<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>Springboot读取配置文件及自定义配置文件 - Java从入门到跑路</title>
<link>http://www.cnblogs.com/kellyJAVA/p/8030395.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/kellyJAVA/p/8030395.html</guid>
<description>
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;1.创建maven工程，在pom文件中添加依赖&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code _mce_tagged_br&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;   &amp;lt;parent&amp;gt;
&lt;span&gt; 2&lt;/span&gt;     &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
&lt;span&gt; 3&lt;/span&gt;     &amp;lt;artifactId&amp;gt;spring-boot-starter-parent&amp;lt;/artifactId&amp;gt;
&lt;span&gt; 4&lt;/span&gt;     &amp;lt;version&amp;gt;1.5.9.RELEASE&amp;lt;/version&amp;gt;
&lt;span&gt; 5&lt;/span&gt;     &amp;lt;/parent&amp;gt;
&lt;span&gt; 6&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt;   &amp;lt;dependencies&amp;gt;
&lt;span&gt; 8&lt;/span&gt;     &amp;lt;dependency&amp;gt;
&lt;span&gt; 9&lt;/span&gt;         &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
&lt;span&gt;10&lt;/span&gt;         &amp;lt;artifactId&amp;gt;spring-boot-starter-web&amp;lt;/artifactId&amp;gt;
&lt;span&gt;11&lt;/span&gt;     &amp;lt;/dependency&amp;gt;
&lt;span&gt;12&lt;/span&gt;     &amp;lt;!-- 单元测试使用 --&amp;gt;
&lt;span&gt;13&lt;/span&gt;     &amp;lt;dependency&amp;gt;
&lt;span&gt;14&lt;/span&gt;         &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
&lt;span&gt;15&lt;/span&gt;         &amp;lt;artifactId&amp;gt;spring-boot-starter-test&amp;lt;/artifactId&amp;gt;
&lt;span&gt;16&lt;/span&gt;     &amp;lt;/dependency&amp;gt;
&lt;span&gt;17&lt;/span&gt;   
&lt;span&gt;18&lt;/span&gt;     &amp;lt;dependency&amp;gt;
&lt;span&gt;19&lt;/span&gt;       &amp;lt;groupId&amp;gt;junit&amp;lt;/groupId&amp;gt;
&lt;span&gt;20&lt;/span&gt;       &amp;lt;artifactId&amp;gt;junit&amp;lt;/artifactId&amp;gt;
&lt;span&gt;21&lt;/span&gt;       &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt;
&lt;span&gt;22&lt;/span&gt;     &amp;lt;/dependency&amp;gt;
&lt;span&gt;23&lt;/span&gt;    
&lt;span&gt;24&lt;/span&gt;   &amp;lt;/dependencies&amp;gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;2.创建项目启动类 StartApplication.java&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.kelly.controller;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.boot.SpringApplication;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.boot.autoconfigure.EnableAutoConfiguration;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.context.annotation.ComponentScan;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.context.annotation.Configuration;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; 
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;@Configuration
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; @EnableAutoConfiguration &lt;span&gt;//&lt;/span&gt;&lt;span&gt;自动加载配置信息&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt; @ComponentScan(&quot;com.kelly&quot;)&lt;span&gt;//&lt;/span&gt;&lt;span&gt;使包路径下带有注解的类可以使用@Autowired自动注入&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; StartApplication {
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;         SpringApplication.run(StartApplication.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;, args);
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;3.编辑配置文件application.properties及自定义配置文件define.properties&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;strong&gt;application.properties&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#访问的根路径
server.context&lt;/span&gt;-path=/&lt;span&gt;springboot
#端口号
server.port&lt;/span&gt;=8081&lt;span&gt;
#session失效时间
server.session&lt;/span&gt;-timeout=30&lt;span&gt;
#编码
server.tomcat.uri&lt;/span&gt;-encoding=utf-8&lt;span&gt;

test.name&lt;/span&gt;=&lt;span&gt;kelly
test.password&lt;/span&gt;=admin123
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　&lt;strong&gt;　define.properties&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
defineTest.pname=&lt;span&gt;test
defineTest.password&lt;/span&gt;=test123
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;4.读取application.properties配置文件中的属性值&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　FirstController.java&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.kelly.controller;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.beans.factory.annotation.Value;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.stereotype.Controller;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.web.bind.annotation.RequestMapping;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.web.bind.annotation.ResponseBody;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; 
&lt;span&gt; 8&lt;/span&gt; 
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;@Controller
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; FirstController {
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;     
&lt;span&gt;12&lt;/span&gt;     @Value(&quot;${test.name}&quot;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt;&lt;span&gt; String name;
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;     
&lt;span&gt;15&lt;/span&gt;     @Value(&quot;${test.password}&quot;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt;&lt;span&gt; String password;
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;     
&lt;span&gt;18&lt;/span&gt;     @RequestMapping(&quot;/&quot;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;    @ResponseBody
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;    String home()
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &quot;Hello Springboot!&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;     
&lt;span&gt;25&lt;/span&gt;     @RequestMapping(&quot;/hello&quot;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; &lt;span&gt;    @ResponseBody
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; &lt;span&gt;    String hello()
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &quot;name: &quot; + name + &quot;, &quot; + &quot;password: &quot; +&lt;span&gt; password;
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;5.打开浏览器，输入 http://localhost:8081/springboot/hello 即可看到结果&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1296244/201712/1296244-20171212233008051-315710207.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;6.使用java bean的方式读取自定义配置文件 define.properties&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　DefineEntity.java&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.kelly.entity;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.boot.context.properties.ConfigurationProperties;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.context.annotation.PropertySource;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.stereotype.Component;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;@Component
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; @ConfigurationProperties(prefix=&quot;defineTest&quot;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; @PropertySource(&quot;classpath:define.properties&quot;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; DefineEntity {
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;     
&lt;span&gt;12&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt;&lt;span&gt; String pname;
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;     
&lt;span&gt;14&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt;&lt;span&gt; String password;
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; 
&lt;span&gt;16&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getPname() {
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; pname;
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; 
&lt;span&gt;20&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setPname(String pname) {
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.pname =&lt;span&gt; pname;
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; 
&lt;span&gt;24&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getPassword() {
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; password;
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; 
&lt;span&gt;28&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setPassword(String password) {
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.password =&lt;span&gt; password;
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;     
&lt;span&gt;32&lt;/span&gt;     
&lt;span&gt;33&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;　　SecondController.java&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.kelly.controller;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.beans.factory.annotation.Autowired;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.stereotype.Controller;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.web.bind.annotation.RequestMapping;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.web.bind.annotation.ResponseBody;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; 
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.kelly.entity.DefineEntity;
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; 
&lt;span&gt;10&lt;/span&gt; &lt;span&gt;@Controller
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; SecondController {
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;     
&lt;span&gt;13&lt;/span&gt; &lt;span&gt;    @Autowired
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;    DefineEntity defineEntity;
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;     
&lt;span&gt;16&lt;/span&gt;     @RequestMapping(&quot;/define&quot;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;    @ResponseBody
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;    String define()
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &quot;test.name:&quot; + defineEntity.getPname() + &quot;, test.password:&quot; +&lt;span&gt; defineEntity.getPassword();
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;7.打开浏览器，访问 http://localhost:8081/springboot/define，可以看到输出结果&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1296244/201712/1296244-20171212233748738-1254920842.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;补充：我的项目的目录结构&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1296244/201712/1296244-20171212234506894-1400331742.png&quot; alt=&quot;&quot;/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;如果遇到问题也可以留言，我如果看到的话，不管会不会都会给与回复的，我们可以共同讨论，一起学习进步。&lt;/p&gt;

</description>
<pubDate>Tue, 12 Dec 2017 15:48:00 +0000</pubDate>
<dc:creator>Java从入门到跑路</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/kellyJAVA/p/8030395.html</dc:identifier>
</item>
<item>
<title>QT之UDP通信 - 菜头大大</title>
<link>http://www.cnblogs.com/wurenzhong/p/8030220.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/wurenzhong/p/8030220.html</guid>
<description>&lt;p&gt;&lt;span&gt;前言：前一篇讲了TCP通信，这篇来看看UDP通信。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;这里说明一下，UDP通信中分为三种通信分别为单播、组播和广播，下面将一一为大家介绍。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;同样的我们都需要在工程文件中添加network&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
QT       += core gui network
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;进行UDP通信需要用到的头文件&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
#include &amp;lt;QUdpSocket&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;这里我们把UDP通信分为两个部分写，一个是发送端，另一个是接收端，而发送端中又分为单播、组播和广播三种形式，下面我们先来看看写发送端的代码程序的步骤：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;发送端Udpsend的代码：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;1、单播&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;   （1）创建套接字  &lt;/span&gt;&lt;span&gt;  &lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
QUdpSocket mSocket;&lt;br/&gt;mSocket = &lt;span&gt;new&lt;/span&gt; QUdpSocket();
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;     （2）发送数据到指定的地址和端口号 &lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
mSocket-&amp;gt;writeDatagram(ui-&amp;gt;textEdit-&amp;gt;toPlainText().toUtf8(),QHostAddress(&quot;192.168.137.1&quot;),6677);&lt;br/&gt;参数：ui-&amp;gt;textEdit-&amp;gt;toPlainText().toUtf8 要发送的消息&lt;br/&gt;QHostAddress(&quot;192.168.137.1&quot;)   接收端的ip地址&lt;br/&gt;6677  端口号，要和接收端的一致
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;2、组播，组播和单播的步骤是一样的，只有ip地址处有区别&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
组播ip地址范围：&lt;span&gt;224.0&lt;/span&gt;.&lt;span&gt;0.0&lt;/span&gt;-&lt;span&gt;239.255&lt;/span&gt;.&lt;span&gt;255.255&lt;/span&gt;&lt;span&gt;
例子：mSocket&lt;/span&gt;-&amp;gt;writeDatagram(ui-&amp;gt;textEdit-&amp;gt;toPlainText().toUtf8(),QHostAddress(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;224.0.0.100&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;),&lt;span&gt;6677&lt;/span&gt;);
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;3、广播，广播也只有ip地址和单播有区别&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
广播地址ip：QHostAddress::Broadcast&lt;br/&gt;例子：mSocket-&amp;gt;writeDatagram(ui-&amp;gt;textEdit-&amp;gt;toPlainText().toUtf8(),QHostAddress::Broadcast,6677);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;好了，单播、组播和广播的区别应该都了解了，那么我们就来看发送端（udpsend.cpp）的具体代码：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; #include &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;udpsend.h&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; #include &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ui_udpsend.h&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt; 
&lt;span&gt; 4&lt;/span&gt;  UdpSend:: UdpSend(QWidget *&lt;span&gt;parent) :
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;    QMainWindow(parent),
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;     ui(&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Ui:: UdpSend)
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;     ui-&amp;gt;setupUi(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; 
&lt;span&gt;10&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;初始化创建QUdpSocket对象&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt;     mSocket = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; QUdpSocket();
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; 
&lt;span&gt;14&lt;/span&gt;  UdpSend::~&lt;span&gt; UdpSend()
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;     &lt;span&gt;delete&lt;/span&gt;&lt;span&gt; ui;
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; 
&lt;span&gt;19&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; UdpSend::on_sendBt_clicked()
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;单播
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; qint64 len = mSocket-&amp;gt;writeDatagram(ui-&amp;gt;textEdit-&amp;gt;toPlainText().toUtf8(),QHostAddress(&quot;192.168.137.1&quot;),6677);
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; 
&lt;span&gt;24&lt;/span&gt; 
&lt;span&gt;25&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;组播ip地址范围：224.0.0.0-239.255.255.255
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;qint64 len = mSocket-&amp;gt;writeDatagram(ui-&amp;gt;textEdit-&amp;gt;toPlainText().toUtf8(),QHostAddress(&quot;224.0.0.100&quot;),6677);
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; 
&lt;span&gt;28&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;广播&lt;/span&gt;
&lt;span&gt;29&lt;/span&gt;     qint64 len = mSocket-&amp;gt;writeDatagram(ui-&amp;gt;textEdit-&amp;gt;toPlainText().toUtf8(),QHostAddress::Broadcast,&lt;span&gt;6677&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; 
&lt;span&gt;31&lt;/span&gt; 
&lt;span&gt;32&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;发送端的界面文件我做的很简单，我只做了发送消息框：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1206191/201712/1206191-20171212225652051-1774127911.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;看完发送端的代码，我们继续来看接收端的代码（Udprecv）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;接收端不管是单播、或者组播还是广播代码都是一样的，下面是写接收端代码的步骤：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;1、创建套接字&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;QUdpSocket mSocket;
mSocket &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; QUdpSocket();
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;2、绑定地址和端口号&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
mSocket-&amp;gt;bind(QHostAddress::AnyIPv4,&lt;span&gt;6677&lt;/span&gt;&lt;span&gt;);
参数：AnyIPv4  IPv4
     &lt;/span&gt;&lt;span&gt;6677&lt;/span&gt;  端口号，要和发送端的一致
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;3、等待数据的到来，利用readyRread()&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
connect(mSocket,SIGNAL(readyRead()),&lt;span&gt;this&lt;/span&gt;,SLOT(read_data()));
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;4、读数据&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
readDatagram(&lt;span&gt;char&lt;/span&gt; * data, qint64 maxSize, QHostAddress * address = &lt;span&gt;0&lt;/span&gt;, quint16 * port = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
 参数：
      data：数据
      maxSize：数据的大小
      address：QHostAddress类型的地址
      port：端口号

例子：
&lt;/span&gt;&lt;span&gt;void&lt;/span&gt;&lt;span&gt; UdpRecv::read_data()
{
    QByteArray array;
    QHostAddress address;
    quint16 port;
    array.resize(mSocket&lt;/span&gt;-&amp;gt;bytesAvailable());&lt;span&gt;//&lt;/span&gt;&lt;span&gt;根据可读数据来设置空间大小&lt;/span&gt;
    mSocket-&amp;gt;readDatagram(array.data(),array.size(),&amp;amp;address,&amp;amp;port); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;读取数据&lt;/span&gt;
    ui-&amp;gt;listWidget-&amp;gt;addItem(array);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;显示数据
   &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;发送反馈数据&lt;/span&gt;
&lt;span&gt;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;如果是组播的话还涉及到加入组播和退出组播&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;加入到组播组  joinMulticastGroup
            例子：mSocket&lt;/span&gt;-&amp;gt;joinMulticastGroup(QHostAddress(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;224.0.0.100&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;));&lt;br/&gt;退出组播组    leaveMulticastGroup
            例子： mSocket&lt;/span&gt;-&amp;gt;leaveMulticastGroup(QHostAddress(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;224.0.0.100&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;));
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;来看看接收端（Udprecv.cpp）具体实现的代码&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; #include &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;udprecv.h&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; #include &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ui_udprecv.h&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt; 
&lt;span&gt; 4&lt;/span&gt; UdpRecv::UdpRecv(QWidget *&lt;span&gt;parent) :
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;    QMainWindow(parent),
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;     ui(&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Ui::UdpRecv)
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;     ui-&amp;gt;setupUi(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; 
&lt;span&gt;10&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;创建对象 初始化&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt;     mSocket = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; QUdpSocket();
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; 
&lt;span&gt;13&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;绑定&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt;     mSocket-&amp;gt;bind(QHostAddress::AnyIPv4,&lt;span&gt;6677&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;关联读数据信号readyread&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt;     connect(mSocket,SIGNAL(readyRead()),&lt;span&gt;this&lt;/span&gt;&lt;span&gt;,SLOT(read_data()));
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; 
&lt;span&gt;18&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; 
&lt;span&gt;20&lt;/span&gt; UdpRecv::~&lt;span&gt;UdpRecv()
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;     &lt;span&gt;delete&lt;/span&gt;&lt;span&gt; ui;
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; 
&lt;span&gt;25&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; UdpRecv::read_data()
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; &lt;span&gt;    QByteArray array;
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; &lt;span&gt;    QHostAddress address;
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; &lt;span&gt;    quint16 port;
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;     array.resize(mSocket-&amp;gt;bytesAvailable());&lt;span&gt;//&lt;/span&gt;&lt;span&gt;根据可读数据来设置空间大小&lt;/span&gt;
&lt;span&gt;31&lt;/span&gt;     mSocket-&amp;gt;readDatagram(array.data(),array.size(),&amp;amp;address,&amp;amp;port); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;读取数据&lt;/span&gt;
&lt;span&gt;32&lt;/span&gt;     ui-&amp;gt;listWidget-&amp;gt;addItem(array);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;显示数据
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt;    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;发送反馈数据&lt;/span&gt;
&lt;span&gt;34&lt;/span&gt; 
&lt;span&gt;35&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt; 
&lt;span&gt;37&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; UdpRecv::on_checkBox_clicked(&lt;span&gt;bool&lt;/span&gt; &lt;span&gt;checked&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt;(&lt;span&gt;checked&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;加入组播&lt;/span&gt;
&lt;span&gt;42&lt;/span&gt;         mSocket-&amp;gt;joinMulticastGroup(QHostAddress(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;224.0.0.100&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;));
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt; 
&lt;span&gt;45&lt;/span&gt;     &lt;span&gt;else&lt;/span&gt;
&lt;span&gt;46&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;退出组播&lt;/span&gt;
&lt;span&gt;48&lt;/span&gt;         mSocket-&amp;gt;leaveMulticastGroup(QHostAddress(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;224.0.0.100&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;));
&lt;/span&gt;&lt;span&gt;49&lt;/span&gt; 
&lt;span&gt;50&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;51&lt;/span&gt; 
&lt;span&gt;52&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;接收端的界面文件我只加了显示接收到的信息和选择是否加入组播的选择按钮&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1206191/201712/1206191-20171212225849301-862439662.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;这是发送端和接收分开来写的，此外我也实现了一下发送端和接收端写到同一个文件中&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;头文件qudpapp.h中的代码&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_cc3cc22e-883b-4ec7-85a4-8a4610e490de&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_cc3cc22e-883b-4ec7-85a4-8a4610e490de&quot; class=&quot;code_img_opened&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_cc3cc22e-883b-4ec7-85a4-8a4610e490de&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;#ifndef QUDPAPP_H
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;#define&lt;/span&gt; QUDPAPP_H
&lt;span&gt; 3&lt;/span&gt; 
&lt;span&gt; 4&lt;/span&gt; #include &amp;lt;QWidget&amp;gt;
&lt;span&gt; 5&lt;/span&gt; #include &amp;lt;QUdpSocket&amp;gt;
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; Ui {
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; QUdpApp;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; 
&lt;span&gt;10&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; QUdpApp : &lt;span&gt;public&lt;/span&gt;&lt;span&gt; QWidget
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;    Q_OBJECT
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; 
&lt;span&gt;14&lt;/span&gt; &lt;span&gt;public&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;     &lt;span&gt;explicit&lt;/span&gt; QUdpApp(QWidget *parent = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;     ~&lt;span&gt;QUdpApp();
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; 
&lt;span&gt;18&lt;/span&gt; &lt;span&gt;private&lt;/span&gt;&lt;span&gt; slots:
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;     &lt;span&gt;void&lt;/span&gt; on_sendSigRb_clicked(); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;单播旋转轴&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt;     &lt;span&gt;void&lt;/span&gt; on_sendMulRb_clicked();  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;组播选择&lt;/span&gt;
&lt;span&gt;21&lt;/span&gt;     &lt;span&gt;void&lt;/span&gt; on_sendBroadRb_clicked(); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;广播选择&lt;/span&gt;
&lt;span&gt;22&lt;/span&gt;     &lt;span&gt;void&lt;/span&gt; on_sendBt_clicked(); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;发送按钮
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; 
&lt;span&gt;24&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;===========================================&lt;/span&gt;
&lt;span&gt;25&lt;/span&gt;     &lt;span&gt;void&lt;/span&gt; on_recvCb_clicked(&lt;span&gt;bool&lt;/span&gt; &lt;span&gt;checked&lt;/span&gt;);  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;选择接收&lt;/span&gt;
&lt;span&gt;26&lt;/span&gt;     &lt;span&gt;void&lt;/span&gt; on_recvJoinMulBt_clicked();  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;加入组播&lt;/span&gt;
&lt;span&gt;27&lt;/span&gt;     &lt;span&gt;void&lt;/span&gt; on_recvLeaveMulBt_clicked(); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;退出组播&lt;/span&gt;
&lt;span&gt;28&lt;/span&gt; 
&lt;span&gt;29&lt;/span&gt;     &lt;span&gt;void&lt;/span&gt; on_sendMesEdit_cursorPositionChanged();&lt;span&gt;//&lt;/span&gt;&lt;span&gt;检测消息框是否有数据&lt;/span&gt;
&lt;span&gt;30&lt;/span&gt;     &lt;span&gt;void&lt;/span&gt;&lt;span&gt; read_data();
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; 
&lt;span&gt;32&lt;/span&gt; &lt;span&gt;private&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt;     Ui::QUdpApp *&lt;span&gt;ui;
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt;     QUdpSocket *&lt;span&gt;mSocket;
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt; &lt;span&gt;    QHostAddress sendaddrees;
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt; &lt;span&gt;    QString sendPort;
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt; 
&lt;span&gt;38&lt;/span&gt; &lt;span&gt;};
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt; 
&lt;span&gt;40&lt;/span&gt; &lt;span&gt;#endif&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; QUDPAPP_H&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;源文件qudpapp.cpp中的代码&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;44&quot;&gt;&lt;img id=&quot;code_img_closed_971453f1-444a-4ac5-83dc-8126c9c5e6be&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_971453f1-444a-4ac5-83dc-8126c9c5e6be&quot; class=&quot;code_img_opened&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_971453f1-444a-4ac5-83dc-8126c9c5e6be&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;83&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt; #include &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;qudpapp.h&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;  2&lt;/span&gt; #include &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ui_qudpapp.h&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;  3&lt;/span&gt; #include &amp;lt;QMessageBox&amp;gt;
&lt;span&gt;  4&lt;/span&gt; QUdpApp::QUdpApp(QWidget *&lt;span&gt;parent) :
&lt;/span&gt;&lt;span&gt;  5&lt;/span&gt; &lt;span&gt;    QWidget(parent),
&lt;/span&gt;&lt;span&gt;  6&lt;/span&gt;     ui(&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Ui::QUdpApp)
&lt;/span&gt;&lt;span&gt;  7&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;  8&lt;/span&gt;     ui-&amp;gt;setupUi(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;  9&lt;/span&gt;     mSocket = &lt;span&gt;new&lt;/span&gt; QUdpSocket();&lt;span&gt;//&lt;/span&gt;&lt;span&gt;创建套接字&lt;/span&gt;
&lt;span&gt; 10&lt;/span&gt;     ui-&amp;gt;sendBt-&amp;gt;setEnabled(&lt;span&gt;false&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 11&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt; 12&lt;/span&gt; 
&lt;span&gt; 13&lt;/span&gt; QUdpApp::~&lt;span&gt;QUdpApp()
&lt;/span&gt;&lt;span&gt; 14&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 15&lt;/span&gt;     &lt;span&gt;delete&lt;/span&gt;&lt;span&gt; ui;
&lt;/span&gt;&lt;span&gt; 16&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt; 17&lt;/span&gt; 
&lt;span&gt; 18&lt;/span&gt; 
&lt;span&gt; 19&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;==========================发送端====================
&lt;/span&gt;&lt;span&gt; 20&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;单播选择&lt;/span&gt;
&lt;span&gt; 21&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; QUdpApp::on_sendSigRb_clicked()
&lt;/span&gt;&lt;span&gt; 22&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 23&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt;(ui-&amp;gt;sendPortEdit-&amp;gt;text().isEmpty() || ui-&amp;gt;sendSigAddrEdit-&amp;gt;&lt;span&gt;text().isEmpty())
&lt;/span&gt;&lt;span&gt; 24&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 25&lt;/span&gt;         QMessageBox::warning(&lt;span&gt;this&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;提示&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;请输入单播ip和端口号&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 26&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;ui-&amp;gt;sendSigRb-&amp;gt;setChecked(false);&lt;/span&gt;
&lt;span&gt; 27&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 28&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 29&lt;/span&gt;     sendaddrees.setAddress( ui-&amp;gt;sendSigAddrEdit-&amp;gt;&lt;span&gt;text());
&lt;/span&gt;&lt;span&gt; 30&lt;/span&gt;     sendPort  = ui-&amp;gt;sendPortEdit-&amp;gt;&lt;span&gt;text();
&lt;/span&gt;&lt;span&gt; 31&lt;/span&gt; 
&lt;span&gt; 32&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt; 33&lt;/span&gt; 
&lt;span&gt; 34&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;组播选择&lt;/span&gt;
&lt;span&gt; 35&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; QUdpApp::on_sendMulRb_clicked()
&lt;/span&gt;&lt;span&gt; 36&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 37&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt;(ui-&amp;gt;sendPortEdit-&amp;gt;text().isEmpty() || ui-&amp;gt;sendMulAddrEdit-&amp;gt;&lt;span&gt;text().isEmpty())
&lt;/span&gt;&lt;span&gt; 38&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 39&lt;/span&gt;         QMessageBox::warning(&lt;span&gt;this&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;提示&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;请输入组播ip和端口号&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 40&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;ui-&amp;gt;sendSigRb-&amp;gt;setChecked(false);&lt;/span&gt;
&lt;span&gt; 41&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 42&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 43&lt;/span&gt;    sendaddrees.setAddress( ui-&amp;gt;sendMulAddrEdit-&amp;gt;&lt;span&gt;text());
&lt;/span&gt;&lt;span&gt; 44&lt;/span&gt;    sendPort  = ui-&amp;gt;sendPortEdit-&amp;gt;&lt;span&gt;text();
&lt;/span&gt;&lt;span&gt; 45&lt;/span&gt; 
&lt;span&gt; 46&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt; 47&lt;/span&gt; 
&lt;span&gt; 48&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;广播选择&lt;/span&gt;
&lt;span&gt; 49&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; QUdpApp::on_sendBroadRb_clicked()
&lt;/span&gt;&lt;span&gt; 50&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 51&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt;(ui-&amp;gt;sendPortEdit-&amp;gt;text().isEmpty() || ui-&amp;gt;sendBroadAddrEdit-&amp;gt;&lt;span&gt;text().isEmpty())
&lt;/span&gt;&lt;span&gt; 52&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 53&lt;/span&gt;         QMessageBox::warning(&lt;span&gt;this&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;提示&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;请输入广播ip和端口号&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 54&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;ui-&amp;gt;sendSigRb-&amp;gt;setChecked(false);&lt;/span&gt;
&lt;span&gt; 55&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 56&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 57&lt;/span&gt;     sendaddrees.setAddress( ui-&amp;gt;sendBroadAddrEdit-&amp;gt;&lt;span&gt;text());
&lt;/span&gt;&lt;span&gt; 58&lt;/span&gt;     sendPort  = ui-&amp;gt;sendPortEdit-&amp;gt;&lt;span&gt;text();
&lt;/span&gt;&lt;span&gt; 59&lt;/span&gt; 
&lt;span&gt; 60&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt; 61&lt;/span&gt; 
&lt;span&gt; 62&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;发送按钮&lt;/span&gt;
&lt;span&gt; 63&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; QUdpApp::on_sendBt_clicked()
&lt;/span&gt;&lt;span&gt; 64&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 65&lt;/span&gt;     mSocket-&amp;gt;writeDatagram(ui-&amp;gt;sendMesEdit-&amp;gt;&lt;span&gt;toPlainText().toUtf8(),sendaddrees,sendPort.toInt());
&lt;/span&gt;&lt;span&gt; 66&lt;/span&gt; 
&lt;span&gt; 67&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt; 68&lt;/span&gt; 
&lt;span&gt; 69&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;检测发送消息对话框中是否有消息&lt;/span&gt;
&lt;span&gt; 70&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; QUdpApp::on_sendMesEdit_cursorPositionChanged()
&lt;/span&gt;&lt;span&gt; 71&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 72&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt;(ui-&amp;gt;sendMesEdit-&amp;gt;&lt;span&gt;toPlainText().isEmpty())
&lt;/span&gt;&lt;span&gt; 73&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 74&lt;/span&gt;         ui-&amp;gt;sendBt-&amp;gt;setEnabled(&lt;span&gt;false&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 75&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 76&lt;/span&gt;     &lt;span&gt;else&lt;/span&gt;
&lt;span&gt; 77&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 78&lt;/span&gt;         ui-&amp;gt;sendBt-&amp;gt;setEnabled(&lt;span&gt;true&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 79&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 80&lt;/span&gt; 
&lt;span&gt; 81&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt; 82&lt;/span&gt; 
&lt;span&gt; 83&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;==========================发送端====================
&lt;/span&gt;&lt;span&gt; 84&lt;/span&gt; 
&lt;span&gt; 85&lt;/span&gt; 
&lt;span&gt; 86&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;==========================接收端=====================
&lt;/span&gt;&lt;span&gt; 87&lt;/span&gt; 
&lt;span&gt; 88&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;选择接收&lt;/span&gt;
&lt;span&gt; 89&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; QUdpApp::on_recvCb_clicked(&lt;span&gt;bool&lt;/span&gt; &lt;span&gt;checked&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 90&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 91&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt;(ui-&amp;gt;recvPortEdit-&amp;gt;&lt;span&gt;text().isEmpty())
&lt;/span&gt;&lt;span&gt; 92&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 93&lt;/span&gt;         QMessageBox::warning(&lt;span&gt;this&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;提示&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;请输入端口号&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 94&lt;/span&gt;         ui-&amp;gt;recvCb-&amp;gt;setChecked(&lt;span&gt;false&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 95&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 96&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 97&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt;(&lt;span&gt;checked&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 98&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 99&lt;/span&gt;         mSocket-&amp;gt;bind(QHostAddress::AnyIPv4,ui-&amp;gt;recvPortEdit-&amp;gt;&lt;span&gt;text().toInt());
&lt;/span&gt;&lt;span&gt;100&lt;/span&gt;         connect(mSocket,SIGNAL(readyRead()),&lt;span&gt;this&lt;/span&gt;&lt;span&gt;,SLOT(read_data()));
&lt;/span&gt;&lt;span&gt;101&lt;/span&gt;         ui-&amp;gt;recvPortEdit-&amp;gt;setEnabled(&lt;span&gt;false&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;102&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;103&lt;/span&gt;     &lt;span&gt;else&lt;/span&gt;
&lt;span&gt;104&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;105&lt;/span&gt;         mSocket-&amp;gt;&lt;span&gt;close();
&lt;/span&gt;&lt;span&gt;106&lt;/span&gt;         ui-&amp;gt;recvPortEdit-&amp;gt;setEnabled(&lt;span&gt;true&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;107&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;108&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;109&lt;/span&gt; 
&lt;span&gt;110&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;加入组播&lt;/span&gt;
&lt;span&gt;111&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; QUdpApp::on_recvJoinMulBt_clicked()
&lt;/span&gt;&lt;span&gt;112&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;113&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt;(ui-&amp;gt;recvMulAddrEdit-&amp;gt;&lt;span&gt;text().isEmpty())
&lt;/span&gt;&lt;span&gt;114&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;115&lt;/span&gt;         QMessageBox::warning(&lt;span&gt;this&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;提示&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;请输入组播ip&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;116&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;117&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;118&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt;(mSocket-&amp;gt;joinMulticastGroup(QHostAddress(ui-&amp;gt;recvMulAddrEdit-&amp;gt;text()))) &lt;span&gt;//&lt;/span&gt;&lt;span&gt;加入组播&lt;/span&gt;
&lt;span&gt;119&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;120&lt;/span&gt;         ui-&amp;gt;recvMulAddr-&amp;gt;addItem(ui-&amp;gt;recvMulAddrEdit-&amp;gt;&lt;span&gt;text());
&lt;/span&gt;&lt;span&gt;121&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;122&lt;/span&gt;     &lt;span&gt;else&lt;/span&gt;
&lt;span&gt;123&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;124&lt;/span&gt;         QMessageBox::warning(&lt;span&gt;this&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;提示&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;加入组播失败,请修改ip后继续加入&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;125&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;return;&lt;/span&gt;
&lt;span&gt;126&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;127&lt;/span&gt; 
&lt;span&gt;128&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;129&lt;/span&gt; 
&lt;span&gt;130&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;退出组播&lt;/span&gt;
&lt;span&gt;131&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; QUdpApp::on_recvLeaveMulBt_clicked()
&lt;/span&gt;&lt;span&gt;132&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;133&lt;/span&gt;     mSocket-&amp;gt;leaveMulticastGroup(QHostAddress(ui-&amp;gt;recvMulAddr-&amp;gt;currentIndex()));&lt;span&gt;//&lt;/span&gt;&lt;span&gt;退出组播地址列表当前的组播&lt;/span&gt;
&lt;span&gt;134&lt;/span&gt;     ui-&amp;gt;recvMulAddr-&amp;gt;removeItem(ui-&amp;gt;recvMulAddr-&amp;gt;currentIndex()); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;删除组播地址列表中当前的组播地址&lt;/span&gt;
&lt;span&gt;135&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;136&lt;/span&gt; 
&lt;span&gt;137&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; QUdpApp::read_data()
&lt;/span&gt;&lt;span&gt;138&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;139&lt;/span&gt; &lt;span&gt;    QByteArray array;
&lt;/span&gt;&lt;span&gt;140&lt;/span&gt;     array.resize(mSocket-&amp;gt;bytesAvailable()); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;将接收数据的array设置成为要接收数据的大小&lt;/span&gt;
&lt;span&gt;141&lt;/span&gt; &lt;span&gt;    QHostAddress recvaddress;
&lt;/span&gt;&lt;span&gt;142&lt;/span&gt; &lt;span&gt;    quint16 port;
&lt;/span&gt;&lt;span&gt;143&lt;/span&gt;     mSocket-&amp;gt;readDatagram(array.data(),array.size(),&amp;amp;recvaddress,&amp;amp;port); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;读取数据&lt;/span&gt;
&lt;span&gt;144&lt;/span&gt;     ui-&amp;gt;recvList-&amp;gt;&lt;span&gt;addItem(array);
&lt;/span&gt;&lt;span&gt;145&lt;/span&gt; 
&lt;span&gt;146&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;147&lt;/span&gt; 
&lt;span&gt;148&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;==========================接收端=====================&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;界面文件qudpapp.ui&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_ab37509b-6855-41a2-adbb-584435aac270&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_ab37509b-6855-41a2-adbb-584435aac270&quot; class=&quot;code_img_opened&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_ab37509b-6855-41a2-adbb-584435aac270&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt; &amp;lt;?xml version=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;1.0&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; encoding=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;UTF-8&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;?&amp;gt;
&lt;span&gt;  2&lt;/span&gt; &amp;lt;ui version=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;4.0&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;  3&lt;/span&gt;  &amp;lt;&lt;span&gt;class&lt;/span&gt;&amp;gt;QUdpApp&amp;lt;/&lt;span&gt;class&lt;/span&gt;&amp;gt;
&lt;span&gt;  4&lt;/span&gt;  &amp;lt;widget &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;QWidget&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;QUdpApp&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;  5&lt;/span&gt;   &amp;lt;property name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;geometry&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;  6&lt;/span&gt;    &amp;lt;rect&amp;gt;
&lt;span&gt;  7&lt;/span&gt;     &amp;lt;x&amp;gt;&lt;span&gt;0&lt;/span&gt;&amp;lt;/x&amp;gt;
&lt;span&gt;  8&lt;/span&gt;     &amp;lt;y&amp;gt;&lt;span&gt;0&lt;/span&gt;&amp;lt;/y&amp;gt;
&lt;span&gt;  9&lt;/span&gt;     &amp;lt;width&amp;gt;&lt;span&gt;637&lt;/span&gt;&amp;lt;/width&amp;gt;
&lt;span&gt; 10&lt;/span&gt;     &amp;lt;height&amp;gt;&lt;span&gt;561&lt;/span&gt;&amp;lt;/height&amp;gt;
&lt;span&gt; 11&lt;/span&gt;    &amp;lt;/rect&amp;gt;
&lt;span&gt; 12&lt;/span&gt;   &amp;lt;/property&amp;gt;
&lt;span&gt; 13&lt;/span&gt;   &amp;lt;property name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;sizePolicy&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt; 14&lt;/span&gt;    &amp;lt;sizepolicy hsizetype=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Preferred&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; vsizetype=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Expanding&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt; 15&lt;/span&gt;     &amp;lt;horstretch&amp;gt;&lt;span&gt;0&lt;/span&gt;&amp;lt;/horstretch&amp;gt;
&lt;span&gt; 16&lt;/span&gt;     &amp;lt;verstretch&amp;gt;&lt;span&gt;0&lt;/span&gt;&amp;lt;/verstretch&amp;gt;
&lt;span&gt; 17&lt;/span&gt;    &amp;lt;/sizepolicy&amp;gt;
&lt;span&gt; 18&lt;/span&gt;   &amp;lt;/property&amp;gt;
&lt;span&gt; 19&lt;/span&gt;   &amp;lt;property name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;windowTitle&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt; 20&lt;/span&gt;    &amp;lt;&lt;span&gt;string&lt;/span&gt;&amp;gt;QUdpApp&amp;lt;/&lt;span&gt;string&lt;/span&gt;&amp;gt;
&lt;span&gt; 21&lt;/span&gt;   &amp;lt;/property&amp;gt;
&lt;span&gt; 22&lt;/span&gt;   &amp;lt;widget &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;QWidget&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;layoutWidget&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt; 23&lt;/span&gt;    &amp;lt;property name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;geometry&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt; 24&lt;/span&gt;     &amp;lt;rect&amp;gt;
&lt;span&gt; 25&lt;/span&gt;      &amp;lt;x&amp;gt;&lt;span&gt;9&lt;/span&gt;&amp;lt;/x&amp;gt;
&lt;span&gt; 26&lt;/span&gt;      &amp;lt;y&amp;gt;&lt;span&gt;9&lt;/span&gt;&amp;lt;/y&amp;gt;
&lt;span&gt; 27&lt;/span&gt;      &amp;lt;width&amp;gt;&lt;span&gt;394&lt;/span&gt;&amp;lt;/width&amp;gt;
&lt;span&gt; 28&lt;/span&gt;      &amp;lt;height&amp;gt;&lt;span&gt;463&lt;/span&gt;&amp;lt;/height&amp;gt;
&lt;span&gt; 29&lt;/span&gt;     &amp;lt;/rect&amp;gt;
&lt;span&gt; 30&lt;/span&gt;    &amp;lt;/property&amp;gt;
&lt;span&gt; 31&lt;/span&gt;    &amp;lt;layout &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;QVBoxLayout&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;verticalLayout_6&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt; 32&lt;/span&gt;     &amp;lt;item&amp;gt;
&lt;span&gt; 33&lt;/span&gt;      &amp;lt;layout &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;QHBoxLayout&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;horizontalLayout_9&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt; 34&lt;/span&gt;       &amp;lt;item&amp;gt;
&lt;span&gt; 35&lt;/span&gt;        &amp;lt;widget &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;QGroupBox&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;groupBox&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt; 36&lt;/span&gt;         &amp;lt;property name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;sizePolicy&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt; 37&lt;/span&gt;          &amp;lt;sizepolicy hsizetype=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Preferred&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; vsizetype=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Preferred&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt; 38&lt;/span&gt;           &amp;lt;horstretch&amp;gt;&lt;span&gt;0&lt;/span&gt;&amp;lt;/horstretch&amp;gt;
&lt;span&gt; 39&lt;/span&gt;           &amp;lt;verstretch&amp;gt;&lt;span&gt;0&lt;/span&gt;&amp;lt;/verstretch&amp;gt;
&lt;span&gt; 40&lt;/span&gt;          &amp;lt;/sizepolicy&amp;gt;
&lt;span&gt; 41&lt;/span&gt;         &amp;lt;/property&amp;gt;
&lt;span&gt; 42&lt;/span&gt;         &amp;lt;property name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt; 43&lt;/span&gt;          &amp;lt;&lt;span&gt;string&lt;/span&gt;&amp;gt;发送端&amp;lt;/&lt;span&gt;string&lt;/span&gt;&amp;gt;
&lt;span&gt; 44&lt;/span&gt;         &amp;lt;/property&amp;gt;
&lt;span&gt; 45&lt;/span&gt;         &amp;lt;layout &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;QVBoxLayout&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;verticalLayout_3&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt; 46&lt;/span&gt;          &amp;lt;property name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;spacing&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt; 47&lt;/span&gt;           &amp;lt;number&amp;gt;&lt;span&gt;0&lt;/span&gt;&amp;lt;/number&amp;gt;
&lt;span&gt; 48&lt;/span&gt;          &amp;lt;/property&amp;gt;
&lt;span&gt; 49&lt;/span&gt;          &amp;lt;property name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;leftMargin&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt; 50&lt;/span&gt;           &amp;lt;number&amp;gt;&lt;span&gt;0&lt;/span&gt;&amp;lt;/number&amp;gt;
&lt;span&gt; 51&lt;/span&gt;          &amp;lt;/property&amp;gt;
&lt;span&gt; 52&lt;/span&gt;          &amp;lt;property name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;topMargin&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt; 53&lt;/span&gt;           &amp;lt;number&amp;gt;&lt;span&gt;0&lt;/span&gt;&amp;lt;/number&amp;gt;
&lt;span&gt; 54&lt;/span&gt;          &amp;lt;/property&amp;gt;
&lt;span&gt; 55&lt;/span&gt;          &amp;lt;property name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;rightMargin&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt; 56&lt;/span&gt;           &amp;lt;number&amp;gt;&lt;span&gt;0&lt;/span&gt;&amp;lt;/number&amp;gt;
&lt;span&gt; 57&lt;/span&gt;          &amp;lt;/property&amp;gt;
&lt;span&gt; 58&lt;/span&gt;          &amp;lt;property name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;bottomMargin&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt; 59&lt;/span&gt;           &amp;lt;number&amp;gt;&lt;span&gt;0&lt;/span&gt;&amp;lt;/number&amp;gt;
&lt;span&gt; 60&lt;/span&gt;          &amp;lt;/property&amp;gt;
&lt;span&gt; 61&lt;/span&gt;          &amp;lt;item&amp;gt;
&lt;span&gt; 62&lt;/span&gt;           &amp;lt;layout &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;QVBoxLayout&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;verticalLayout_2&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt; 63&lt;/span&gt;            &amp;lt;item&amp;gt;
&lt;span&gt; 64&lt;/span&gt;             &amp;lt;layout &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;QHBoxLayout&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;horizontalLayout&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt; 65&lt;/span&gt;              &amp;lt;property name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;spacing&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt; 66&lt;/span&gt;               &amp;lt;number&amp;gt;&lt;span&gt;0&lt;/span&gt;&amp;lt;/number&amp;gt;
&lt;span&gt; 67&lt;/span&gt;              &amp;lt;/property&amp;gt;
&lt;span&gt; 68&lt;/span&gt;              &amp;lt;item&amp;gt;
&lt;span&gt; 69&lt;/span&gt;               &amp;lt;widget &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;QLabel&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;label&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt; 70&lt;/span&gt;                &amp;lt;property name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt; 71&lt;/span&gt;                 &amp;lt;&lt;span&gt;string&lt;/span&gt;&amp;gt;端 口 号&amp;lt;/&lt;span&gt;string&lt;/span&gt;&amp;gt;
&lt;span&gt; 72&lt;/span&gt;                &amp;lt;/property&amp;gt;
&lt;span&gt; 73&lt;/span&gt;               &amp;lt;/widget&amp;gt;
&lt;span&gt; 74&lt;/span&gt;              &amp;lt;/item&amp;gt;
&lt;span&gt; 75&lt;/span&gt;              &amp;lt;item&amp;gt;
&lt;span&gt; 76&lt;/span&gt;               &amp;lt;widget &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;QLineEdit&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;sendPortEdit&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt; 77&lt;/span&gt;                &amp;lt;property name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;sizePolicy&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt; 78&lt;/span&gt;                 &amp;lt;sizepolicy hsizetype=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Preferred&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; vsizetype=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Preferred&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt; 79&lt;/span&gt;                  &amp;lt;horstretch&amp;gt;&lt;span&gt;0&lt;/span&gt;&amp;lt;/horstretch&amp;gt;
&lt;span&gt; 80&lt;/span&gt;                  &amp;lt;verstretch&amp;gt;&lt;span&gt;0&lt;/span&gt;&amp;lt;/verstretch&amp;gt;
&lt;span&gt; 81&lt;/span&gt;                 &amp;lt;/sizepolicy&amp;gt;
&lt;span&gt; 82&lt;/span&gt;                &amp;lt;/property&amp;gt;
&lt;span&gt; 83&lt;/span&gt;                &amp;lt;property name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;placeholderText&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt; 84&lt;/span&gt;                 &amp;lt;&lt;span&gt;string&lt;/span&gt;&amp;gt;请输入端口号&amp;lt;/&lt;span&gt;string&lt;/span&gt;&amp;gt;
&lt;span&gt; 85&lt;/span&gt;                &amp;lt;/property&amp;gt;
&lt;span&gt; 86&lt;/span&gt;               &amp;lt;/widget&amp;gt;
&lt;span&gt; 87&lt;/span&gt;              &amp;lt;/item&amp;gt;
&lt;span&gt; 88&lt;/span&gt;             &amp;lt;/layout&amp;gt;
&lt;span&gt; 89&lt;/span&gt;            &amp;lt;/item&amp;gt;
&lt;span&gt; 90&lt;/span&gt;            &amp;lt;item&amp;gt;
&lt;span&gt; 91&lt;/span&gt;             &amp;lt;layout &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;QHBoxLayout&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;horizontalLayout_2&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt; 92&lt;/span&gt;              &amp;lt;property name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;spacing&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt; 93&lt;/span&gt;               &amp;lt;number&amp;gt;&lt;span&gt;0&lt;/span&gt;&amp;lt;/number&amp;gt;
&lt;span&gt; 94&lt;/span&gt;              &amp;lt;/property&amp;gt;
&lt;span&gt; 95&lt;/span&gt;              &amp;lt;item&amp;gt;
&lt;span&gt; 96&lt;/span&gt;               &amp;lt;widget &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;QRadioButton&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;sendSigRb&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt; 97&lt;/span&gt;                &amp;lt;property name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt; 98&lt;/span&gt;                 &amp;lt;&lt;span&gt;string&lt;/span&gt;&amp;gt;单播&amp;lt;/&lt;span&gt;string&lt;/span&gt;&amp;gt;
&lt;span&gt; 99&lt;/span&gt;                &amp;lt;/property&amp;gt;
&lt;span&gt;100&lt;/span&gt;               &amp;lt;/widget&amp;gt;
&lt;span&gt;101&lt;/span&gt;              &amp;lt;/item&amp;gt;
&lt;span&gt;102&lt;/span&gt;              &amp;lt;item&amp;gt;
&lt;span&gt;103&lt;/span&gt;               &amp;lt;widget &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;QLineEdit&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;sendSigAddrEdit&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;104&lt;/span&gt;                &amp;lt;property name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;sizePolicy&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;105&lt;/span&gt;                 &amp;lt;sizepolicy hsizetype=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Preferred&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; vsizetype=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Preferred&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;106&lt;/span&gt;                  &amp;lt;horstretch&amp;gt;&lt;span&gt;0&lt;/span&gt;&amp;lt;/horstretch&amp;gt;
&lt;span&gt;107&lt;/span&gt;                  &amp;lt;verstretch&amp;gt;&lt;span&gt;0&lt;/span&gt;&amp;lt;/verstretch&amp;gt;
&lt;span&gt;108&lt;/span&gt;                 &amp;lt;/sizepolicy&amp;gt;
&lt;span&gt;109&lt;/span&gt;                &amp;lt;/property&amp;gt;
&lt;span&gt;110&lt;/span&gt;                &amp;lt;property name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;placeholderText&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;111&lt;/span&gt;                 &amp;lt;&lt;span&gt;string&lt;/span&gt;&amp;gt;请输入接收方地址&amp;lt;/&lt;span&gt;string&lt;/span&gt;&amp;gt;
&lt;span&gt;112&lt;/span&gt;                &amp;lt;/property&amp;gt;
&lt;span&gt;113&lt;/span&gt;               &amp;lt;/widget&amp;gt;
&lt;span&gt;114&lt;/span&gt;              &amp;lt;/item&amp;gt;
&lt;span&gt;115&lt;/span&gt;             &amp;lt;/layout&amp;gt;
&lt;span&gt;116&lt;/span&gt;            &amp;lt;/item&amp;gt;
&lt;span&gt;117&lt;/span&gt;            &amp;lt;item&amp;gt;
&lt;span&gt;118&lt;/span&gt;             &amp;lt;layout &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;QHBoxLayout&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;horizontalLayout_3&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;119&lt;/span&gt;              &amp;lt;property name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;spacing&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;120&lt;/span&gt;               &amp;lt;number&amp;gt;&lt;span&gt;0&lt;/span&gt;&amp;lt;/number&amp;gt;
&lt;span&gt;121&lt;/span&gt;              &amp;lt;/property&amp;gt;
&lt;span&gt;122&lt;/span&gt;              &amp;lt;item&amp;gt;
&lt;span&gt;123&lt;/span&gt;               &amp;lt;widget &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;QRadioButton&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;sendMulRb&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;124&lt;/span&gt;                &amp;lt;property name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;125&lt;/span&gt;                 &amp;lt;&lt;span&gt;string&lt;/span&gt;&amp;gt;组播&amp;lt;/&lt;span&gt;string&lt;/span&gt;&amp;gt;
&lt;span&gt;126&lt;/span&gt;                &amp;lt;/property&amp;gt;
&lt;span&gt;127&lt;/span&gt;               &amp;lt;/widget&amp;gt;
&lt;span&gt;128&lt;/span&gt;              &amp;lt;/item&amp;gt;
&lt;span&gt;129&lt;/span&gt;              &amp;lt;item&amp;gt;
&lt;span&gt;130&lt;/span&gt;               &amp;lt;widget &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;QLineEdit&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;sendMulAddrEdit&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;131&lt;/span&gt;                &amp;lt;property name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;sizePolicy&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;132&lt;/span&gt;                 &amp;lt;sizepolicy hsizetype=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Preferred&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; vsizetype=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Preferred&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;133&lt;/span&gt;                  &amp;lt;horstretch&amp;gt;&lt;span&gt;0&lt;/span&gt;&amp;lt;/horstretch&amp;gt;
&lt;span&gt;134&lt;/span&gt;                  &amp;lt;verstretch&amp;gt;&lt;span&gt;0&lt;/span&gt;&amp;lt;/verstretch&amp;gt;
&lt;span&gt;135&lt;/span&gt;                 &amp;lt;/sizepolicy&amp;gt;
&lt;span&gt;136&lt;/span&gt;                &amp;lt;/property&amp;gt;
&lt;span&gt;137&lt;/span&gt;                &amp;lt;property name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;placeholderText&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;138&lt;/span&gt;                 &amp;lt;&lt;span&gt;string&lt;/span&gt;&amp;gt;请输入组播地址&amp;lt;/&lt;span&gt;string&lt;/span&gt;&amp;gt;
&lt;span&gt;139&lt;/span&gt;                &amp;lt;/property&amp;gt;
&lt;span&gt;140&lt;/span&gt;               &amp;lt;/widget&amp;gt;
&lt;span&gt;141&lt;/span&gt;              &amp;lt;/item&amp;gt;
&lt;span&gt;142&lt;/span&gt;             &amp;lt;/layout&amp;gt;
&lt;span&gt;143&lt;/span&gt;            &amp;lt;/item&amp;gt;
&lt;span&gt;144&lt;/span&gt;            &amp;lt;item&amp;gt;
&lt;span&gt;145&lt;/span&gt;             &amp;lt;layout &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;QHBoxLayout&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;horizontalLayout_4&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;146&lt;/span&gt;              &amp;lt;property name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;spacing&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;147&lt;/span&gt;               &amp;lt;number&amp;gt;&lt;span&gt;0&lt;/span&gt;&amp;lt;/number&amp;gt;
&lt;span&gt;148&lt;/span&gt;              &amp;lt;/property&amp;gt;
&lt;span&gt;149&lt;/span&gt;              &amp;lt;item&amp;gt;
&lt;span&gt;150&lt;/span&gt;               &amp;lt;widget &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;QRadioButton&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;sendBroadRb&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;151&lt;/span&gt;                &amp;lt;property name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;152&lt;/span&gt;                 &amp;lt;&lt;span&gt;string&lt;/span&gt;&amp;gt;广播&amp;lt;/&lt;span&gt;string&lt;/span&gt;&amp;gt;
&lt;span&gt;153&lt;/span&gt;                &amp;lt;/property&amp;gt;
&lt;span&gt;154&lt;/span&gt;               &amp;lt;/widget&amp;gt;
&lt;span&gt;155&lt;/span&gt;              &amp;lt;/item&amp;gt;
&lt;span&gt;156&lt;/span&gt;              &amp;lt;item&amp;gt;
&lt;span&gt;157&lt;/span&gt;               &amp;lt;widget &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;QLineEdit&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;sendBroadAddrEdit&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;158&lt;/span&gt;                &amp;lt;property name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;sizePolicy&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;159&lt;/span&gt;                 &amp;lt;sizepolicy hsizetype=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Preferred&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; vsizetype=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Preferred&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;160&lt;/span&gt;                  &amp;lt;horstretch&amp;gt;&lt;span&gt;0&lt;/span&gt;&amp;lt;/horstretch&amp;gt;
&lt;span&gt;161&lt;/span&gt;                  &amp;lt;verstretch&amp;gt;&lt;span&gt;0&lt;/span&gt;&amp;lt;/verstretch&amp;gt;
&lt;span&gt;162&lt;/span&gt;                 &amp;lt;/sizepolicy&amp;gt;
&lt;span&gt;163&lt;/span&gt;                &amp;lt;/property&amp;gt;
&lt;span&gt;164&lt;/span&gt;                &amp;lt;property name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;placeholderText&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;165&lt;/span&gt;                 &amp;lt;&lt;span&gt;string&lt;/span&gt;&amp;gt;请输入广播地址&amp;lt;/&lt;span&gt;string&lt;/span&gt;&amp;gt;
&lt;span&gt;166&lt;/span&gt;                &amp;lt;/property&amp;gt;
&lt;span&gt;167&lt;/span&gt;               &amp;lt;/widget&amp;gt;
&lt;span&gt;168&lt;/span&gt;              &amp;lt;/item&amp;gt;
&lt;span&gt;169&lt;/span&gt;             &amp;lt;/layout&amp;gt;
&lt;span&gt;170&lt;/span&gt;            &amp;lt;/item&amp;gt;
&lt;span&gt;171&lt;/span&gt;           &amp;lt;/layout&amp;gt;
&lt;span&gt;172&lt;/span&gt;          &amp;lt;/item&amp;gt;
&lt;span&gt;173&lt;/span&gt;         &amp;lt;/layout&amp;gt;
&lt;span&gt;174&lt;/span&gt;        &amp;lt;/widget&amp;gt;
&lt;span&gt;175&lt;/span&gt;       &amp;lt;/item&amp;gt;
&lt;span&gt;176&lt;/span&gt;       &amp;lt;item&amp;gt;
&lt;span&gt;177&lt;/span&gt;        &amp;lt;widget &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;QGroupBox&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;groupBox_2&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;178&lt;/span&gt;         &amp;lt;property name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;sizePolicy&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;179&lt;/span&gt;          &amp;lt;sizepolicy hsizetype=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Preferred&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; vsizetype=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Preferred&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;180&lt;/span&gt;           &amp;lt;horstretch&amp;gt;&lt;span&gt;0&lt;/span&gt;&amp;lt;/horstretch&amp;gt;
&lt;span&gt;181&lt;/span&gt;           &amp;lt;verstretch&amp;gt;&lt;span&gt;0&lt;/span&gt;&amp;lt;/verstretch&amp;gt;
&lt;span&gt;182&lt;/span&gt;          &amp;lt;/sizepolicy&amp;gt;
&lt;span&gt;183&lt;/span&gt;         &amp;lt;/property&amp;gt;
&lt;span&gt;184&lt;/span&gt;         &amp;lt;property name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;185&lt;/span&gt;          &amp;lt;&lt;span&gt;string&lt;/span&gt;&amp;gt;接收端&amp;lt;/&lt;span&gt;string&lt;/span&gt;&amp;gt;
&lt;span&gt;186&lt;/span&gt;         &amp;lt;/property&amp;gt;
&lt;span&gt;187&lt;/span&gt;         &amp;lt;layout &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;QVBoxLayout&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;verticalLayout_4&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;188&lt;/span&gt;          &amp;lt;item&amp;gt;
&lt;span&gt;189&lt;/span&gt;           &amp;lt;layout &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;QVBoxLayout&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;verticalLayout&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;190&lt;/span&gt;            &amp;lt;item&amp;gt;
&lt;span&gt;191&lt;/span&gt;             &amp;lt;layout &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;QHBoxLayout&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;horizontalLayout_7&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;192&lt;/span&gt;              &amp;lt;item&amp;gt;
&lt;span&gt;193&lt;/span&gt;               &amp;lt;widget &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;QCheckBox&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;recvCb&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;194&lt;/span&gt;                &amp;lt;property name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;195&lt;/span&gt;                 &amp;lt;&lt;span&gt;string&lt;/span&gt;&amp;gt;接收&amp;lt;/&lt;span&gt;string&lt;/span&gt;&amp;gt;
&lt;span&gt;196&lt;/span&gt;                &amp;lt;/property&amp;gt;
&lt;span&gt;197&lt;/span&gt;               &amp;lt;/widget&amp;gt;
&lt;span&gt;198&lt;/span&gt;              &amp;lt;/item&amp;gt;
&lt;span&gt;199&lt;/span&gt;              &amp;lt;item&amp;gt;
&lt;span&gt;200&lt;/span&gt;               &amp;lt;widget &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;QLineEdit&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;recvPortEdit&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;201&lt;/span&gt;                &amp;lt;property name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;placeholderText&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;202&lt;/span&gt;                 &amp;lt;&lt;span&gt;string&lt;/span&gt;&amp;gt;请输入端口号&amp;lt;/&lt;span&gt;string&lt;/span&gt;&amp;gt;
&lt;span&gt;203&lt;/span&gt;                &amp;lt;/property&amp;gt;
&lt;span&gt;204&lt;/span&gt;               &amp;lt;/widget&amp;gt;
&lt;span&gt;205&lt;/span&gt;              &amp;lt;/item&amp;gt;
&lt;span&gt;206&lt;/span&gt;             &amp;lt;/layout&amp;gt;
&lt;span&gt;207&lt;/span&gt;            &amp;lt;/item&amp;gt;
&lt;span&gt;208&lt;/span&gt;            &amp;lt;item&amp;gt;
&lt;span&gt;209&lt;/span&gt;             &amp;lt;layout &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;QHBoxLayout&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;horizontalLayout_5&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;210&lt;/span&gt;              &amp;lt;property name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;spacing&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;211&lt;/span&gt;               &amp;lt;number&amp;gt;&lt;span&gt;0&lt;/span&gt;&amp;lt;/number&amp;gt;
&lt;span&gt;212&lt;/span&gt;              &amp;lt;/property&amp;gt;
&lt;span&gt;213&lt;/span&gt;              &amp;lt;item&amp;gt;
&lt;span&gt;214&lt;/span&gt;               &amp;lt;widget &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;QLineEdit&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;recvMulAddrEdit&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;215&lt;/span&gt;                &amp;lt;property name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;placeholderText&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;216&lt;/span&gt;                 &amp;lt;&lt;span&gt;string&lt;/span&gt;&amp;gt;输入要加入的组播地址&amp;lt;/&lt;span&gt;string&lt;/span&gt;&amp;gt;
&lt;span&gt;217&lt;/span&gt;                &amp;lt;/property&amp;gt;
&lt;span&gt;218&lt;/span&gt;               &amp;lt;/widget&amp;gt;
&lt;span&gt;219&lt;/span&gt;              &amp;lt;/item&amp;gt;
&lt;span&gt;220&lt;/span&gt;              &amp;lt;item&amp;gt;
&lt;span&gt;221&lt;/span&gt;               &amp;lt;widget &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;QPushButton&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;recvJoinMulBt&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;222&lt;/span&gt;                &amp;lt;property name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;maximumSize&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;223&lt;/span&gt;                 &amp;lt;size&amp;gt;
&lt;span&gt;224&lt;/span&gt;                  &amp;lt;width&amp;gt;&lt;span&gt;40&lt;/span&gt;&amp;lt;/width&amp;gt;
&lt;span&gt;225&lt;/span&gt;                  &amp;lt;height&amp;gt;&lt;span&gt;16777215&lt;/span&gt;&amp;lt;/height&amp;gt;
&lt;span&gt;226&lt;/span&gt;                 &amp;lt;/size&amp;gt;
&lt;span&gt;227&lt;/span&gt;                &amp;lt;/property&amp;gt;
&lt;span&gt;228&lt;/span&gt;                &amp;lt;property name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;229&lt;/span&gt;                 &amp;lt;&lt;span&gt;string&lt;/span&gt;&amp;gt;加入&amp;lt;/&lt;span&gt;string&lt;/span&gt;&amp;gt;
&lt;span&gt;230&lt;/span&gt;                &amp;lt;/property&amp;gt;
&lt;span&gt;231&lt;/span&gt;               &amp;lt;/widget&amp;gt;
&lt;span&gt;232&lt;/span&gt;              &amp;lt;/item&amp;gt;
&lt;span&gt;233&lt;/span&gt;             &amp;lt;/layout&amp;gt;
&lt;span&gt;234&lt;/span&gt;            &amp;lt;/item&amp;gt;
&lt;span&gt;235&lt;/span&gt;            &amp;lt;item&amp;gt;
&lt;span&gt;236&lt;/span&gt;             &amp;lt;layout &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;QHBoxLayout&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;horizontalLayout_6&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;237&lt;/span&gt;              &amp;lt;item&amp;gt;
&lt;span&gt;238&lt;/span&gt;               &amp;lt;widget &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;QComboBox&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;recvMulAddr&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;/&amp;gt;
&lt;span&gt;239&lt;/span&gt;              &amp;lt;/item&amp;gt;
&lt;span&gt;240&lt;/span&gt;              &amp;lt;item&amp;gt;
&lt;span&gt;241&lt;/span&gt;               &amp;lt;widget &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;QPushButton&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;recvLeaveMulBt&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;242&lt;/span&gt;                &amp;lt;property name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;maximumSize&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;243&lt;/span&gt;                 &amp;lt;size&amp;gt;
&lt;span&gt;244&lt;/span&gt;                  &amp;lt;width&amp;gt;&lt;span&gt;40&lt;/span&gt;&amp;lt;/width&amp;gt;
&lt;span&gt;245&lt;/span&gt;                  &amp;lt;height&amp;gt;&lt;span&gt;16777215&lt;/span&gt;&amp;lt;/height&amp;gt;
&lt;span&gt;246&lt;/span&gt;                 &amp;lt;/size&amp;gt;
&lt;span&gt;247&lt;/span&gt;                &amp;lt;/property&amp;gt;
&lt;span&gt;248&lt;/span&gt;                &amp;lt;property name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;249&lt;/span&gt;                 &amp;lt;&lt;span&gt;string&lt;/span&gt;&amp;gt;退出&amp;lt;/&lt;span&gt;string&lt;/span&gt;&amp;gt;
&lt;span&gt;250&lt;/span&gt;                &amp;lt;/property&amp;gt;
&lt;span&gt;251&lt;/span&gt;               &amp;lt;/widget&amp;gt;
&lt;span&gt;252&lt;/span&gt;              &amp;lt;/item&amp;gt;
&lt;span&gt;253&lt;/span&gt;             &amp;lt;/layout&amp;gt;
&lt;span&gt;254&lt;/span&gt;            &amp;lt;/item&amp;gt;
&lt;span&gt;255&lt;/span&gt;           &amp;lt;/layout&amp;gt;
&lt;span&gt;256&lt;/span&gt;          &amp;lt;/item&amp;gt;
&lt;span&gt;257&lt;/span&gt;         &amp;lt;/layout&amp;gt;
&lt;span&gt;258&lt;/span&gt;        &amp;lt;/widget&amp;gt;
&lt;span&gt;259&lt;/span&gt;       &amp;lt;/item&amp;gt;
&lt;span&gt;260&lt;/span&gt;      &amp;lt;/layout&amp;gt;
&lt;span&gt;261&lt;/span&gt;     &amp;lt;/item&amp;gt;
&lt;span&gt;262&lt;/span&gt;     &amp;lt;item&amp;gt;
&lt;span&gt;263&lt;/span&gt;      &amp;lt;layout &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;QVBoxLayout&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;verticalLayout_5&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;264&lt;/span&gt;       &amp;lt;item&amp;gt;
&lt;span&gt;265&lt;/span&gt;        &amp;lt;widget &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;QListWidget&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;recvList&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;/&amp;gt;
&lt;span&gt;266&lt;/span&gt;       &amp;lt;/item&amp;gt;
&lt;span&gt;267&lt;/span&gt;       &amp;lt;item&amp;gt;
&lt;span&gt;268&lt;/span&gt;        &amp;lt;widget &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;QTextEdit&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;sendMesEdit&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;269&lt;/span&gt;         &amp;lt;property name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;maximumSize&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;270&lt;/span&gt;          &amp;lt;size&amp;gt;
&lt;span&gt;271&lt;/span&gt;           &amp;lt;width&amp;gt;&lt;span&gt;16777215&lt;/span&gt;&amp;lt;/width&amp;gt;
&lt;span&gt;272&lt;/span&gt;           &amp;lt;height&amp;gt;&lt;span&gt;100&lt;/span&gt;&amp;lt;/height&amp;gt;
&lt;span&gt;273&lt;/span&gt;          &amp;lt;/size&amp;gt;
&lt;span&gt;274&lt;/span&gt;         &amp;lt;/property&amp;gt;
&lt;span&gt;275&lt;/span&gt;        &amp;lt;/widget&amp;gt;
&lt;span&gt;276&lt;/span&gt;       &amp;lt;/item&amp;gt;
&lt;span&gt;277&lt;/span&gt;      &amp;lt;/layout&amp;gt;
&lt;span&gt;278&lt;/span&gt;     &amp;lt;/item&amp;gt;
&lt;span&gt;279&lt;/span&gt;     &amp;lt;item&amp;gt;
&lt;span&gt;280&lt;/span&gt;      &amp;lt;layout &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;QHBoxLayout&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;horizontalLayout_8&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;281&lt;/span&gt;       &amp;lt;item&amp;gt;
&lt;span&gt;282&lt;/span&gt;        &amp;lt;widget &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;QPushButton&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;clearRecvListBt&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;283&lt;/span&gt;         &amp;lt;property name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;284&lt;/span&gt;          &amp;lt;&lt;span&gt;string&lt;/span&gt;&amp;gt;清除接收区&amp;lt;/&lt;span&gt;string&lt;/span&gt;&amp;gt;
&lt;span&gt;285&lt;/span&gt;         &amp;lt;/property&amp;gt;
&lt;span&gt;286&lt;/span&gt;        &amp;lt;/widget&amp;gt;
&lt;span&gt;287&lt;/span&gt;       &amp;lt;/item&amp;gt;
&lt;span&gt;288&lt;/span&gt;       &amp;lt;item&amp;gt;
&lt;span&gt;289&lt;/span&gt;        &amp;lt;widget &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;QPushButton&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;clearsendEditBt&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;290&lt;/span&gt;         &amp;lt;property name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;291&lt;/span&gt;          &amp;lt;&lt;span&gt;string&lt;/span&gt;&amp;gt;清除发送区&amp;lt;/&lt;span&gt;string&lt;/span&gt;&amp;gt;
&lt;span&gt;292&lt;/span&gt;         &amp;lt;/property&amp;gt;
&lt;span&gt;293&lt;/span&gt;        &amp;lt;/widget&amp;gt;
&lt;span&gt;294&lt;/span&gt;       &amp;lt;/item&amp;gt;
&lt;span&gt;295&lt;/span&gt;       &amp;lt;item&amp;gt;
&lt;span&gt;296&lt;/span&gt;        &amp;lt;spacer name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;horizontalSpacer_2&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;297&lt;/span&gt;         &amp;lt;property name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;orientation&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;298&lt;/span&gt;          &amp;lt;&lt;span&gt;enum&lt;/span&gt;&amp;gt;Qt::Horizontal&amp;lt;/&lt;span&gt;enum&lt;/span&gt;&amp;gt;
&lt;span&gt;299&lt;/span&gt;         &amp;lt;/property&amp;gt;
&lt;span&gt;300&lt;/span&gt;         &amp;lt;property name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;sizeHint&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; stdset=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;301&lt;/span&gt;          &amp;lt;size&amp;gt;
&lt;span&gt;302&lt;/span&gt;           &amp;lt;width&amp;gt;&lt;span&gt;40&lt;/span&gt;&amp;lt;/width&amp;gt;
&lt;span&gt;303&lt;/span&gt;           &amp;lt;height&amp;gt;&lt;span&gt;20&lt;/span&gt;&amp;lt;/height&amp;gt;
&lt;span&gt;304&lt;/span&gt;          &amp;lt;/size&amp;gt;
&lt;span&gt;305&lt;/span&gt;         &amp;lt;/property&amp;gt;
&lt;span&gt;306&lt;/span&gt;        &amp;lt;/spacer&amp;gt;
&lt;span&gt;307&lt;/span&gt;       &amp;lt;/item&amp;gt;
&lt;span&gt;308&lt;/span&gt;       &amp;lt;item&amp;gt;
&lt;span&gt;309&lt;/span&gt;        &amp;lt;widget &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;QPushButton&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;sendBt&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;310&lt;/span&gt;         &amp;lt;property name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;311&lt;/span&gt;          &amp;lt;&lt;span&gt;string&lt;/span&gt;&amp;gt;发送&amp;lt;/&lt;span&gt;string&lt;/span&gt;&amp;gt;
&lt;span&gt;312&lt;/span&gt;         &amp;lt;/property&amp;gt;
&lt;span&gt;313&lt;/span&gt;        &amp;lt;/widget&amp;gt;
&lt;span&gt;314&lt;/span&gt;       &amp;lt;/item&amp;gt;
&lt;span&gt;315&lt;/span&gt;      &amp;lt;/layout&amp;gt;
&lt;span&gt;316&lt;/span&gt;     &amp;lt;/item&amp;gt;
&lt;span&gt;317&lt;/span&gt;    &amp;lt;/layout&amp;gt;
&lt;span&gt;318&lt;/span&gt;   &amp;lt;/widget&amp;gt;
&lt;span&gt;319&lt;/span&gt;  &amp;lt;/widget&amp;gt;
&lt;span&gt;320&lt;/span&gt;  &amp;lt;layoutdefault spacing=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;6&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; margin=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;/&amp;gt;
&lt;span&gt;321&lt;/span&gt;  &amp;lt;resources/&amp;gt;
&lt;span&gt;322&lt;/span&gt;  &amp;lt;connections&amp;gt;
&lt;span&gt;323&lt;/span&gt;   &amp;lt;connection&amp;gt;
&lt;span&gt;324&lt;/span&gt;    &amp;lt;sender&amp;gt;clearRecvListBt&amp;lt;/sender&amp;gt;
&lt;span&gt;325&lt;/span&gt;    &amp;lt;signal&amp;gt;clicked()&amp;lt;/signal&amp;gt;
&lt;span&gt;326&lt;/span&gt;    &amp;lt;receiver&amp;gt;recvList&amp;lt;/receiver&amp;gt;
&lt;span&gt;327&lt;/span&gt;    &amp;lt;slot&amp;gt;clear()&amp;lt;/slot&amp;gt;
&lt;span&gt;328&lt;/span&gt;    &amp;lt;hints&amp;gt;
&lt;span&gt;329&lt;/span&gt;     &amp;lt;hint type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;sourcelabel&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;330&lt;/span&gt;      &amp;lt;x&amp;gt;&lt;span&gt;47&lt;/span&gt;&amp;lt;/x&amp;gt;
&lt;span&gt;331&lt;/span&gt;      &amp;lt;y&amp;gt;&lt;span&gt;448&lt;/span&gt;&amp;lt;/y&amp;gt;
&lt;span&gt;332&lt;/span&gt;     &amp;lt;/hint&amp;gt;
&lt;span&gt;333&lt;/span&gt;     &amp;lt;hint type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;destinationlabel&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;334&lt;/span&gt;      &amp;lt;x&amp;gt;&lt;span&gt;70&lt;/span&gt;&amp;lt;/x&amp;gt;
&lt;span&gt;335&lt;/span&gt;      &amp;lt;y&amp;gt;&lt;span&gt;227&lt;/span&gt;&amp;lt;/y&amp;gt;
&lt;span&gt;336&lt;/span&gt;     &amp;lt;/hint&amp;gt;
&lt;span&gt;337&lt;/span&gt;    &amp;lt;/hints&amp;gt;
&lt;span&gt;338&lt;/span&gt;   &amp;lt;/connection&amp;gt;
&lt;span&gt;339&lt;/span&gt;   &amp;lt;connection&amp;gt;
&lt;span&gt;340&lt;/span&gt;    &amp;lt;sender&amp;gt;clearsendEditBt&amp;lt;/sender&amp;gt;
&lt;span&gt;341&lt;/span&gt;    &amp;lt;signal&amp;gt;clicked()&amp;lt;/signal&amp;gt;
&lt;span&gt;342&lt;/span&gt;    &amp;lt;receiver&amp;gt;sendMesEdit&amp;lt;/receiver&amp;gt;
&lt;span&gt;343&lt;/span&gt;    &amp;lt;slot&amp;gt;clear()&amp;lt;/slot&amp;gt;
&lt;span&gt;344&lt;/span&gt;    &amp;lt;hints&amp;gt;
&lt;span&gt;345&lt;/span&gt;     &amp;lt;hint type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;sourcelabel&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;346&lt;/span&gt;      &amp;lt;x&amp;gt;&lt;span&gt;134&lt;/span&gt;&amp;lt;/x&amp;gt;
&lt;span&gt;347&lt;/span&gt;      &amp;lt;y&amp;gt;&lt;span&gt;455&lt;/span&gt;&amp;lt;/y&amp;gt;
&lt;span&gt;348&lt;/span&gt;     &amp;lt;/hint&amp;gt;
&lt;span&gt;349&lt;/span&gt;     &amp;lt;hint type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;destinationlabel&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;350&lt;/span&gt;      &amp;lt;x&amp;gt;&lt;span&gt;145&lt;/span&gt;&amp;lt;/x&amp;gt;
&lt;span&gt;351&lt;/span&gt;      &amp;lt;y&amp;gt;&lt;span&gt;410&lt;/span&gt;&amp;lt;/y&amp;gt;
&lt;span&gt;352&lt;/span&gt;     &amp;lt;/hint&amp;gt;
&lt;span&gt;353&lt;/span&gt;    &amp;lt;/hints&amp;gt;
&lt;span&gt;354&lt;/span&gt;   &amp;lt;/connection&amp;gt;
&lt;span&gt;355&lt;/span&gt;  &amp;lt;/connections&amp;gt;
&lt;span&gt;356&lt;/span&gt; &amp;lt;/ui&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;界面文件图示&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1206191/201712/1206191-20171212230357863-547470968.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

</description>
<pubDate>Tue, 12 Dec 2017 15:06:00 +0000</pubDate>
<dc:creator>菜头大大</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/wurenzhong/p/8030220.html</dc:identifier>
</item>
<item>
<title>Scala入门系列（七）：面向对象之继承 - 小丑进场</title>
<link>http://www.cnblogs.com/LiCheng-/p/8030090.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/LiCheng-/p/8030090.html</guid>
<description>&lt;div id=&quot;wmd-preview-section-25285&quot; readability=&quot;7&quot;&gt;
&lt;h2&gt;extends&lt;/h2&gt;
&lt;p&gt;与Java一样，也是使用extends关键字，使用继承可以有效复用代码&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;wmd-preview-section-25506&quot; readability=&quot;12.5&quot;&gt;
&lt;pre&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;Person&lt;/span&gt;&lt;/span&gt; {&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;
 
&lt;/pre&gt;
&lt;p&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;var&lt;/span&gt; name = &lt;span&gt;&quot;leo&quot;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;getName&lt;/span&gt;&lt;/span&gt; = name&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;Student&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;Person&lt;/span&gt;&lt;/span&gt; {&lt;/p&gt;
&lt;p&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;var&lt;/span&gt; score = &lt;span&gt;&quot;A&quot;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;getScore&lt;/span&gt;&lt;/span&gt; = score&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;defined &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;Person&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;defined &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;Student&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;scala&amp;gt; &lt;span&gt;val&lt;/span&gt; s = &lt;span&gt;new&lt;/span&gt; &lt;span&gt;Student&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;s: &lt;span&gt;Student&lt;/span&gt; = &lt;span&gt;Student&lt;/span&gt;@&lt;span&gt;53432&lt;/span&gt;aef&lt;/p&gt;

&lt;p&gt;scala&amp;gt; s.getName&lt;/p&gt;
&lt;p&gt;res27: &lt;span&gt;String&lt;/span&gt; = leo&lt;/p&gt;

&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;子类可以覆盖父类的field和method；但如果父类用final修饰，则该类是无法被继承的，如果field和method用final修饰，则field和method是无法被覆盖的。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;/div&gt;
&lt;div id=&quot;wmd-preview-section-25307&quot; readability=&quot;11&quot;&gt;
&lt;h2&gt;override &amp;amp; super&lt;/h2&gt;
&lt;p&gt;跟Java一样，在Scala中，如果子类要覆盖一个父类中的非抽象方法，则必须要使用override关键字。&lt;/p&gt;
&lt;p&gt;但再覆盖之后，如果我们需要在子类中调用父类被覆盖的方法该怎么办呢？那就可以使用super关键字，显式地指定要调用的父类方法。&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;wmd-preview-section-25248&quot; readability=&quot;13&quot;&gt;
&lt;pre&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;Person&lt;/span&gt;&lt;/span&gt; {&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;
 
&lt;/pre&gt;
&lt;p&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;var&lt;/span&gt; name = &lt;span&gt;&quot;leo&quot;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;getName&lt;/span&gt;&lt;/span&gt; = name&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;Student&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;Person&lt;/span&gt;&lt;/span&gt; {&lt;/p&gt;
&lt;p&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;var&lt;/span&gt; score = &lt;span&gt;&quot;A&quot;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;getScore&lt;/span&gt;&lt;/span&gt; = score&lt;/p&gt;
&lt;p&gt;&lt;span&gt;override&lt;/span&gt; &lt;span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;getName&lt;/span&gt;&lt;/span&gt; = &lt;span&gt;&quot;Hi, I'm&quot;&lt;/span&gt; + &lt;span&gt;super&lt;/span&gt;.getName&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;在Scala中，子类可以覆盖父类的val field，而且子类的val field还可以覆盖父类val field的getter方法；只要在子类中使用override关键字。&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;wmd-preview-section-25529&quot; readability=&quot;17&quot;&gt;
&lt;pre&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;Person&lt;/span&gt;&lt;/span&gt; {&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;
 
&lt;/pre&gt;
&lt;p&gt;&lt;span&gt;val&lt;/span&gt; name: &lt;span&gt;String&lt;/span&gt; = &lt;span&gt;&quot;Person&quot;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;age&lt;/span&gt;&lt;/span&gt;: &lt;span&gt;Int&lt;/span&gt; = &lt;span&gt;0&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;Student&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;Person&lt;/span&gt;&lt;/span&gt; {&lt;/p&gt;
&lt;p&gt;&lt;span&gt;override&lt;/span&gt; &lt;span&gt;val&lt;/span&gt; name: &lt;span&gt;String&lt;/span&gt; = &lt;span&gt;&quot;leo&quot;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;override&lt;/span&gt; &lt;span&gt;val&lt;/span&gt; age: &lt;span&gt;Int&lt;/span&gt; = &lt;span&gt;30&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;defined &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;Person&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;defined &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;Student&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;scala&amp;gt; &lt;span&gt;val&lt;/span&gt; s = &lt;span&gt;new&lt;/span&gt; &lt;span&gt;Student&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;// 测试覆盖了父类的getter方法&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;scala&amp;gt; s.age&lt;/p&gt;
&lt;p&gt;res28: &lt;span&gt;Int&lt;/span&gt; = &lt;span&gt;30&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;div id=&quot;wmd-preview-section-25330&quot; readability=&quot;9&quot;&gt;
&lt;h2&gt;isInstanceOf &amp;amp; asInstanceOf&lt;/h2&gt;
&lt;p&gt;使用isInstanceOf 和 asInstanceOf可以安全的做到父类与子类对象之间类型的转化。 &lt;br/&gt;首先，需要使用isInstanceOf判断对象是否是指定类的对象，如果是的话，则可以使用asInstanceOf将对象转换为指定类型。&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;wmd-preview-section-25611&quot; readability=&quot;13&quot;&gt;
&lt;pre&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;Person&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;
 
&lt;/pre&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;Student&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;Person&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;val&lt;/span&gt; p: &lt;span&gt;Person&lt;/span&gt; = &lt;span&gt;new&lt;/span&gt; &lt;span&gt;Student&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;var&lt;/span&gt; s: &lt;span&gt;Student&lt;/span&gt; = &lt;span&gt;null&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;if&lt;/span&gt; (p.isInstanceOf[&lt;span&gt;Student&lt;/span&gt;]) s = p.asInstanceOf[&lt;span&gt;Student&lt;/span&gt;]&lt;/p&gt;

&lt;p&gt;scala&amp;gt; s&lt;/p&gt;
&lt;p&gt;res31: &lt;span&gt;Student&lt;/span&gt; = &lt;span&gt;Student&lt;/span&gt;@&lt;span&gt;7&lt;/span&gt;ebfe01a&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;如果对象时null，则isInstanceOf返回false，asInstanceOf返回null&lt;/li&gt;
&lt;li&gt;如果没有用isInstanceOf先判断就直接asInstanceOf转换，则可能抛出异常&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;

&lt;/div&gt;
&lt;div id=&quot;wmd-preview-section-25352&quot; readability=&quot;8&quot;&gt;
&lt;h2&gt;getCalss &amp;amp; classOf&lt;/h2&gt;
&lt;p&gt;isInstanceOf 只能判断出对象是否是指定类以及其子类的对象，而不能精确判断出，对象就是指定类的对象。 &lt;br/&gt;使用getCalss 和 classOf 就可以精确判断。&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;wmd-preview-section-25633&quot; readability=&quot;13&quot;&gt;
&lt;pre&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;Person&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;
 
&lt;/pre&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;Student&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;Person&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;val&lt;/span&gt; p: &lt;span&gt;Person&lt;/span&gt; = &lt;span&gt;new&lt;/span&gt; &lt;span&gt;Student&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;scala&amp;gt; p.getClass == classOf[&lt;span&gt;Person&lt;/span&gt;]&lt;/p&gt;
&lt;p&gt;res32: &lt;span&gt;Boolean&lt;/span&gt; = &lt;span&gt;false&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;scala&amp;gt; p.getClass == classOf[&lt;span&gt;Student&lt;/span&gt;]&lt;/p&gt;
&lt;p&gt;res33: &lt;span&gt;Boolean&lt;/span&gt; = &lt;span&gt;true&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;div id=&quot;wmd-preview-section-25374&quot; readability=&quot;11&quot;&gt;
&lt;h2&gt;protected关键字&lt;/h2&gt;
&lt;p&gt;跟Java一样，Scala中同样可以使用protected关键字来修饰field和method，这样在子类中就不需要super关键字，直接就可以访问。&lt;/p&gt;
&lt;p&gt;还可以使用protected[this]，则只能在当前子类对象中访问父类的field和method，无法在其他子类对象中访问，跟private[this]一样。&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;wmd-preview-section-25655&quot; readability=&quot;26&quot;&gt;
&lt;pre&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;Person&lt;/span&gt;&lt;/span&gt; {&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;
 
&lt;/pre&gt;
&lt;p&gt;&lt;span&gt;protected&lt;/span&gt; &lt;span&gt;var&lt;/span&gt; name: &lt;span&gt;String&lt;/span&gt; = &lt;span&gt;&quot;leo&quot;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;protected&lt;/span&gt;[&lt;span&gt;this&lt;/span&gt;] &lt;span&gt;var&lt;/span&gt; hobby: &lt;span&gt;String&lt;/span&gt; = &lt;span&gt;&quot;game&quot;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;Student&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;Person&lt;/span&gt;&lt;/span&gt; {&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;sayHelllo&lt;/span&gt;&lt;/span&gt; = println(&lt;span&gt;&quot;hello, &quot;&lt;/span&gt; + name)&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;makeFriends&lt;/span&gt;&lt;/span&gt;(s: &lt;span&gt;Student&lt;/span&gt;) {&lt;/p&gt;
&lt;p&gt;println(&lt;span&gt;&quot;my hobby is &quot;&lt;/span&gt; + hobby + &lt;span&gt;&quot;,your hobby is &quot;&lt;/span&gt; + s.hobby)&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;&lt;span&gt;// 因为父类中使用了protected[this]，所以这里s.hobby访问出错&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;console&amp;gt;:&lt;span&gt;19&lt;/span&gt;: error: value hobby is not a member of &lt;span&gt;Student&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;println(&lt;span&gt;&quot;my hobby is &quot;&lt;/span&gt; + hobby + &lt;span&gt;&quot;,your hobby is &quot;&lt;/span&gt; + s.hobby)&lt;/p&gt;
&lt;p&gt;^&lt;/p&gt;

&lt;/div&gt;
&lt;div id=&quot;wmd-preview-section-25396&quot; readability=&quot;11&quot;&gt;
&lt;h2&gt;调用父类的constructor&lt;/h2&gt;
&lt;p&gt;在Scala中，每个类可以有一个主constructor和任意多个辅constructor，而每个辅助constructor的第一行都必须是调用其他辅助constructor或者是主constructor，&lt;strong&gt;因此子类的辅助constructor是一定不可能直接调用父类的constructor的&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;只能在子类的主constructor中调用父类的constructor，采用以下语法：&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;wmd-preview-section-25677&quot; readability=&quot;24&quot;&gt;
&lt;pre&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;Person&lt;/span&gt;(&lt;span&gt;val name: &lt;span&gt;String&lt;/span&gt;, val age: &lt;span&gt;Int&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;
 
&lt;/pre&gt;

&lt;p&gt;&lt;span&gt;/* 注意，如果是父类接收的参数，比如name和age，子类中接收时，就不要用任何val或者var来修饰，否则会被认为是子类覆盖父类的field。*/&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;Student&lt;/span&gt;(&lt;span&gt;name: &lt;span&gt;String&lt;/span&gt;, age: &lt;span&gt;Int&lt;/span&gt;, var score: &lt;span&gt;Double&lt;/span&gt;&lt;/span&gt;) &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;Person&lt;/span&gt;(&lt;span&gt;name, age&lt;/span&gt;)&lt;/span&gt; {&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;/span&gt;(name: &lt;span&gt;String&lt;/span&gt;) {&lt;/p&gt;
&lt;p&gt;&lt;span&gt;this&lt;/span&gt;(name, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;)&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;/span&gt;(age: &lt;span&gt;Int&lt;/span&gt;) {&lt;/p&gt;
&lt;p&gt;&lt;span&gt;this&lt;/span&gt;(&lt;span&gt;&quot;sparks&quot;&lt;/span&gt;, age, &lt;span&gt;0&lt;/span&gt;)&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;defined &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;Person&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;defined &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;Student&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;


&lt;p&gt;scala&amp;gt; &lt;span&gt;val&lt;/span&gt; s = &lt;span&gt;new&lt;/span&gt; &lt;span&gt;Student&lt;/span&gt;(&lt;span&gt;&quot;sparks&quot;&lt;/span&gt;)&lt;/p&gt;
&lt;p&gt;s: &lt;span&gt;Student&lt;/span&gt; = &lt;span&gt;Student&lt;/span&gt;@&lt;span&gt;4&lt;/span&gt;c3fcbe7&lt;/p&gt;

&lt;p&gt;scala&amp;gt; &lt;span&gt;val&lt;/span&gt; s = &lt;span&gt;new&lt;/span&gt; &lt;span&gt;Student&lt;/span&gt;(&lt;span&gt;20&lt;/span&gt;)&lt;/p&gt;
&lt;p&gt;s: &lt;span&gt;Student&lt;/span&gt; = &lt;span&gt;Student&lt;/span&gt;@&lt;span&gt;7852&lt;/span&gt;ab30&lt;/p&gt;

&lt;/div&gt;
&lt;div id=&quot;wmd-preview-section-25418&quot; readability=&quot;11&quot;&gt;
&lt;h2&gt;匿名内部类&lt;/h2&gt;
&lt;p&gt;在Scala中，匿名内部类是非常强大且常见的，Spark源码中也大量使用了这种匿名内部类。&lt;/p&gt;
&lt;p&gt;定义一个类的没有名字的子类，并直接创建其对象，然后将该对象的引用赋予一个变量，之后甚至可以将该对象传递给其他函数。&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;wmd-preview-section-25699&quot; readability=&quot;19&quot;&gt;
&lt;pre&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;Person&lt;/span&gt;(&lt;span&gt;protected val name: &lt;span&gt;String&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;{&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;
 
&lt;/pre&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;sayHello&lt;/span&gt;&lt;/span&gt; = &lt;span&gt;&quot;hello, I'm &quot;&lt;/span&gt; + name&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;&lt;span&gt;// 定义匿名内部类&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;val&lt;/span&gt; p = &lt;span&gt;new&lt;/span&gt; &lt;span&gt;Person&lt;/span&gt;(&lt;span&gt;&quot;leo&quot;&lt;/span&gt;){&lt;/p&gt;
&lt;p&gt;&lt;span&gt;override&lt;/span&gt; &lt;span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;sayHello&lt;/span&gt;&lt;/span&gt; = &lt;span&gt;&quot;Hi, I'm &quot;&lt;/span&gt; + name&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;&lt;span&gt;// 定义使用匿名内部类的函数&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;greeting&lt;/span&gt;&lt;/span&gt;(p: &lt;span&gt;Person&lt;/span&gt;{&lt;span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;sayHello&lt;/span&gt;&lt;/span&gt;: &lt;span&gt;String&lt;/span&gt;}){&lt;/p&gt;
&lt;p&gt;println(p.sayHello)&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;&lt;span&gt;// 测试&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;scala&amp;gt; greeting(p)&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Hi&lt;/span&gt;, &lt;span&gt;I&lt;/span&gt;&lt;span&gt;'m&lt;/span&gt; leo&lt;/p&gt;

&lt;/div&gt;
&lt;div id=&quot;wmd-preview-section-25440&quot; readability=&quot;10&quot;&gt;
&lt;h2&gt;抽象类&lt;/h2&gt;
&lt;p&gt;跟Java相似，一个类中如果有一个抽象方法，那么类就必须用abstract来声明类，此时抽象类不可以实例化。&lt;/p&gt;
&lt;p&gt;在子类覆盖抽象类的抽象方法时，不需要使用override 关键字&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;wmd-preview-section-25261&quot; readability=&quot;18&quot;&gt;
&lt;pre&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;&lt;span&gt;abstract&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;Person&lt;/span&gt;(&lt;span&gt;val name: &lt;span&gt;String&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;{&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;
 
&lt;/pre&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;sayHello&lt;/span&gt;&lt;/span&gt;: &lt;span&gt;Unit&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;Student&lt;/span&gt;(&lt;span&gt;name: &lt;span&gt;String&lt;/span&gt;&lt;/span&gt;) &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;Person&lt;/span&gt;(&lt;span&gt;name&lt;/span&gt;)&lt;/span&gt; {&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;sayHello&lt;/span&gt;&lt;/span&gt;: &lt;span&gt;Unit&lt;/span&gt; = println(&lt;span&gt;&quot;Hello, &quot;&lt;/span&gt; + name)&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;如果在抽象类中定义了field，但没有给出初始值，则此field为抽象field&lt;/p&gt;
&lt;p&gt;抽象field意味着：scala会根据自己的规则，为var或val类型的field生成对应的getter和setter方法，但是父类中是没有该field的，子类必须覆盖field，不需要使用override关键字。&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;wmd-preview-section-25262&quot; readability=&quot;9&quot;&gt;
&lt;pre&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;&lt;span&gt;abstract&lt;/span&gt; &lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;Person&lt;/span&gt;&lt;/span&gt;{&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;
 
&lt;/pre&gt;
&lt;p&gt;&lt;span&gt;val&lt;/span&gt; name: &lt;span&gt;String&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;&lt;span&gt;// 子类必须要覆盖抽象field&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;Student&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;Person&lt;/span&gt;&lt;/span&gt;{&lt;/p&gt;
&lt;p&gt;&lt;span&gt;val&lt;/span&gt; name: &lt;span&gt;String&lt;/span&gt; = &lt;span&gt;&quot;leo&quot;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;/div&gt;
</description>
<pubDate>Tue, 12 Dec 2017 14:36:00 +0000</pubDate>
<dc:creator>小丑进场</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/LiCheng-/p/8030090.html</dc:identifier>
</item>
<item>
<title>Spring之bean二生命周期 - 社会主义接班人</title>
<link>http://www.cnblogs.com/5ishare/p/8030038.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/5ishare/p/8030038.html</guid>
<description>&lt;p&gt;上一博客主要学习了下bean的配置、注入、自定义属性编辑器，今天来熟悉bean的生命周期。在开发中生命周期是一个很常见的名词，基本每种编程语言都能找到与它关联的。关于bean的生命周期我在网上也找了好多，基本都差不多。这里我主要是想通过代码来验证，毕竟学的知识都是一样的，都是学的Java，最重要的是动手练习，这样印象更深。下面是它生命周期的描述，我们通过demo来进行验证。下图是它执行的顺序。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/733213/201712/733213-20171212222111004-2126963628.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/733213/201712/733213-20171212221723972-533210600.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;一、创建LiftCycle类实现BeanFactoryAware,BeanNameAware,InitializingBean,DisposableBean,ApplicationContextAware5个接口方法&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34.5&quot;&gt;&lt;img id=&quot;code_img_closed_3a2be721-347d-42bb-bd51-e822b73020a5&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_3a2be721-347d-42bb-bd51-e822b73020a5&quot; class=&quot;code_img_opened&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_3a2be721-347d-42bb-bd51-e822b73020a5&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;64&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; Cuiyw.Spring.Service;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.beans.BeansException;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.beans.factory.BeanFactory;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.beans.factory.BeanFactoryAware;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.beans.factory.BeanNameAware;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.beans.factory.DisposableBean;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.beans.factory.InitializingBean;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.context.ApplicationContext;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.context.ApplicationContextAware;


&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; LifeCycle  &lt;span&gt;implements&lt;/span&gt;&lt;span&gt; BeanFactoryAware,BeanNameAware,InitializingBean,DisposableBean,ApplicationContextAware{
    
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String name;
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getName() {
        System.out.println(&lt;/span&gt;&quot;getName name=&quot;+&lt;span&gt;name);
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; name;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setName(String name) {
         System.out.println(&lt;/span&gt;&quot;setName name=&quot;+&lt;span&gt;name);
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.name =&lt;span&gt; name;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; afterPropertiesSet() &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; TODO Auto-generated method stub&lt;/span&gt;
         System.out.println(&quot;InitializingBean.afterPropertiesSet()&quot;&lt;span&gt;);
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setBeanName(String arg0) {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; TODO Auto-generated method stub&lt;/span&gt;
        System.out.println(&quot;BeanNameAware.setBeanName&quot;&lt;span&gt;);

    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; setBeanFactory(BeanFactory arg0) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; BeansException {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; TODO Auto-generated method stub&lt;/span&gt;
        System.out.println(&quot;BeanFactoryAware.setBeanFactory&quot;&lt;span&gt;);
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; destroy() &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; TODO Auto-generated method stub&lt;/span&gt;
        System.out.println(&quot;DisposableBean.destroy&quot;&lt;span&gt;);
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; myInit() {
        System.out.println(&lt;/span&gt;&quot;【init-method】调用&amp;lt;bean&amp;gt;的init-method属性指定的初始化方法&quot;&lt;span&gt;);
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; myDestory() {
        System.out.println(&lt;/span&gt;&quot;【destroy-method】调用&amp;lt;bean&amp;gt;的destroy-method属性指定的初始化方法&quot;&lt;span&gt;);
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; setApplicationContext(ApplicationContext arg0) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; BeansException {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; TODO Auto-generated method stub&lt;/span&gt;
         System.out.println(&quot;ApplicationContextAware.setApplicationContext&quot;&lt;span&gt;);
    }
    
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;二、注册InstantiationAwareBeanPostProcessor接口&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;&lt;img id=&quot;code_img_closed_dbda5d4d-f366-461d-b758-b5957a1b006e&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_dbda5d4d-f366-461d-b758-b5957a1b006e&quot; class=&quot;code_img_opened&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_dbda5d4d-f366-461d-b758-b5957a1b006e&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;67&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; Cuiyw.Spring.Service;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.beans.PropertyDescriptor;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.beans.BeansException;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.beans.PropertyValues;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.beans.factory.config.InstantiationAwareBeanPostProcessor;

&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; MyInstantiationAwareBeanPostProcessor &lt;span&gt;implements&lt;/span&gt;&lt;span&gt; InstantiationAwareBeanPostProcessor{

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; Object postProcessAfterInitialization(Object bean, String beanName) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; BeansException {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; TODO Auto-generated method stub&lt;/span&gt;
        System.out.println(&quot;InstantiationAwareBeanPostProcessor.postProcessAfterInitialization&quot;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; bean;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; Object postProcessBeforeInitialization(Object bean, String beanName) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; BeansException {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; TODO Auto-generated method stub&lt;/span&gt;
        System.out.println(&quot;InstantiationAwareBeanPostProcessor.postProcessBeforeInitialization&quot;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; bean;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt; postProcessAfterInstantiation(Object bean, String beanName) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; BeansException {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; TODO Auto-generated method stub&lt;/span&gt;
        System.out.println(&quot;InstantiationAwareBeanPostProcessor.postProcessAfterInstantiation&quot;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; Object postProcessBeforeInstantiation(Class&amp;lt;?&amp;gt; beanClass, String beanName) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; BeansException {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; TODO Auto-generated method stub&lt;/span&gt;
        System.out.println(&quot;InstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation&quot;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; PropertyValues postProcessPropertyValues(PropertyValues pvs, PropertyDescriptor[] pds, Object bean,
            String beanName) &lt;/span&gt;&lt;span&gt;throws&lt;/span&gt;&lt;span&gt; BeansException {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; TODO Auto-generated method stub&lt;/span&gt;
        System.out.println(&quot;InstantiationAwareBeanPostProcessor.postProcessPropertyValues&quot;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; pvs;
    }

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;三、注册BeanPostProcessor接口&lt;/p&gt;
&lt;p&gt;其实InstantiationAwareBeanPostProcessor继承BeanPostProcessor，所以在上面我也实现了BeanPostProcessor接口的方法&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33.5&quot;&gt;&lt;img id=&quot;code_img_closed_4b495167-1d38-485e-b2fd-7e1f55ef3d19&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_4b495167-1d38-485e-b2fd-7e1f55ef3d19&quot; class=&quot;code_img_opened&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_4b495167-1d38-485e-b2fd-7e1f55ef3d19&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;62&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; Cuiyw.Spring.Service;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.beans.BeansException;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.beans.factory.config.BeanPostProcessor;

&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; MyBeanPostProcessor &lt;span&gt;implements&lt;/span&gt;&lt;span&gt;  BeanPostProcessor {

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; Object postProcessAfterInitialization(Object bean, String beanName) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; BeansException {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; TODO Auto-generated method stub&lt;/span&gt;
        System.out.println(&quot;BeanPostProcessor.postProcessAfterInitialization  &quot;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; bean;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; Object postProcessBeforeInitialization(Object bean, String beanName) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; BeansException {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; TODO Auto-generated method stub&lt;/span&gt;
        System.out.println(&quot;BeanPostProcessor.postProcessBeforeInitialization&quot;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; bean;
    }

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;四、注册BeanFactoryPostProcessor接口&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_3710de32-1710-4562-8b7d-258f804ad53d&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_3710de32-1710-4562-8b7d-258f804ad53d&quot; class=&quot;code_img_opened&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_3710de32-1710-4562-8b7d-258f804ad53d&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; Cuiyw.Spring.Service;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.beans.BeansException;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.beans.factory.config.BeanFactoryPostProcessor;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.beans.factory.config.ConfigurableListableBeanFactory;

&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; MyBeanFactoryPostProcessor &lt;span&gt;implements&lt;/span&gt;&lt;span&gt;  BeanFactoryPostProcessor {

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; postProcessBeanFactory(ConfigurableListableBeanFactory arg0) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; BeansException {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; TODO Auto-generated method stub&lt;/span&gt;
        System.out.println(&quot;BeanFactoryPostProcessor.postProcessBeanFactory&quot;&lt;span&gt;);
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;五、在上下文中配置&lt;/p&gt;
&lt;p&gt;这里还是在上一个博客demo的基础上进行修改，为了有其他干扰，我先把service去掉了。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_dd4832b0-49f6-4f83-bc1a-428b1c3d0516&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_dd4832b0-49f6-4f83-bc1a-428b1c3d0516&quot; class=&quot;code_img_opened&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_dd4832b0-49f6-4f83-bc1a-428b1c3d0516&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;
&amp;lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;&lt;span&gt;
    xmlns:xsi&lt;/span&gt;=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;span&gt;
    xsi:schemaLocation&lt;/span&gt;=&quot;http://www.springframework.org/schema/beans
http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;www.springframework.org/schema/beans/spring-beans.xsd&quot;&amp;gt;&lt;/span&gt;
&amp;lt;bean id=&quot;beanPostProcessor&quot; &lt;span&gt;class&lt;/span&gt;=&quot;Cuiyw.Spring.Service.MyBeanPostProcessor&quot;&amp;gt;&amp;lt;/bean&amp;gt;
&amp;lt;bean id=&quot;instantiationAwareBeanPostProcessor&quot; &lt;span&gt;class&lt;/span&gt;=&quot;Cuiyw.Spring.Service.MyInstantiationAwareBeanPostProcessor&quot;&amp;gt;&amp;lt;/bean&amp;gt;
&amp;lt;bean id=&quot;beanFactoryPostProcessor&quot; &lt;span&gt;class&lt;/span&gt;=&quot;Cuiyw.Spring.Service.MyBeanFactoryPostProcessor&quot;&amp;gt;&amp;lt;/bean&amp;gt;
&amp;lt;bean id=&quot;lifeCycle&quot; &lt;span&gt;class&lt;/span&gt;=&quot;Cuiyw.Spring.Service.LifeCycle&quot; init-method=&quot;myInit&quot; destroy-method=&quot;myDestory&quot;&amp;gt;
&amp;lt;property name=&quot;name&quot; value=&quot;cuiyw1&quot;&amp;gt;&amp;lt;/property&amp;gt;
&amp;lt;/bean&amp;gt;
&amp;lt;/beans&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;六、在main中使用bean&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;&lt;img id=&quot;code_img_closed_3b823262-10f1-42a9-bb8a-7204587bc742&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_3b823262-10f1-42a9-bb8a-7204587bc742&quot; class=&quot;code_img_opened&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_3b823262-10f1-42a9-bb8a-7204587bc742&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;61&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; Cuiyw.SpringAop;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.beans.factory.BeanFactory;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.context.ApplicationContext;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.context.support.ClassPathXmlApplicationContext;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; Cuiyw.Spring.IService.IService;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; Cuiyw.Spring.Service.LifeCycle;

&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; App 
{
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main( String[] args )
    {
        ApplicationContext context&lt;/span&gt;=&lt;span&gt;new&lt;/span&gt; ClassPathXmlApplicationContext(&lt;span&gt;new&lt;/span&gt; String[]{&quot;ApplicationContext.xml&quot;&lt;span&gt;});
        BeanFactory factory&lt;/span&gt;=&lt;span&gt;context;
        LifeCycle lifeCycle&lt;/span&gt;=factory.getBean(&quot;lifeCycle&quot;,LifeCycle.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;);
        lifeCycle.setName(&lt;/span&gt;&quot;cuiyw2&quot;&lt;span&gt;);
         System.out.println(&lt;/span&gt;&quot;lifeCycle.name=&quot;+&lt;span&gt;lifeCycle.getName());
        ((ClassPathXmlApplicationContext)factory).registerShutdownHook();

     
        &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;service=(IService)factory.getBean(&quot;ServiceA&quot;);
        service.service(&quot;Cuiyw ServiceA&quot;); 
        service=(IService)factory.getBean(&quot;ServiceImpl&quot;);
        service.service(&quot;Cuiyw ServiceImpl&quot;); &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    }

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;七、输入打印结果&lt;/p&gt;
&lt;p&gt;可以发现输出的顺序和上面图的顺序基本一致。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/733213/201712/733213-20171212221356519-684387556.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
</description>
<pubDate>Tue, 12 Dec 2017 14:27:00 +0000</pubDate>
<dc:creator>社会主义接班人</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/5ishare/p/8030038.html</dc:identifier>
</item>
<item>
<title>C# 通过反射初探ORM框架的实现原理 - cccc_hi</title>
<link>http://www.cnblogs.com/liyuhui-Z/p/8026505.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/liyuhui-Z/p/8026505.html</guid>
<description>&lt;h2&gt;背景：&lt;/h2&gt;
&lt;p&gt;　　以前学的Java进行开发，多用到Mybatis，Hiberante等ORM框架，最近需要上手一个C#的项目，由于不是特别难，也不想再去学习C#的ORM框架，所以就想着用反射简单的实现一下ORM框架的内容，简单的增删改查，没有用到多表之间的联系。&lt;/p&gt;
&lt;h2&gt;反射：&lt;/h2&gt;
&lt;p&gt;　　Java和C#中的反射大体相同，主要是指程序可以访问，检测和修改它本身状态或行为的一种能力，并能根据自身行为的状态和结果，调整或修改应用所描述行为的状态和相关的语义。我的理解就是可以程序运行时动态的获取对象的属性和方法，并且可以进行与之相关的调用。&lt;/p&gt;
&lt;h2&gt;首先看一下C#中反射实现方式：&lt;/h2&gt;
&lt;h3&gt;　　获取Type对象，反射操作都需要通过Type对象来进行。&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt;     通过全限定名来获取  Type tp = Type.GetType(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;TJCommon.Dao.Deriver&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; 
&lt;span&gt;3&lt;/span&gt;     通过类来获取   Type tp = &lt;span&gt;typeof&lt;/span&gt;(Int)
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;　　获取到Type对象后我们可以通过其构造方法来创建对象&lt;/h3&gt;
&lt;h4&gt;　　　　调用无参构造&lt;/h4&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 获取类的初始化构造信息&lt;/span&gt;
&lt;span&gt;2&lt;/span&gt;         ConstructorInfo ct =&lt;span&gt; tp.GetConstructor(System.Type.EmptyTypes);
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 调用不带参数的构造器&lt;/span&gt;
&lt;span&gt;4&lt;/span&gt;         T newObj = (T)ct.Invoke(&lt;span&gt;null&lt;/span&gt;);
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;　　　　调用有参构造&lt;/h4&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;定义参数类型数组&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt;         Type[] tps = &lt;span&gt;new&lt;/span&gt; Type[&lt;span&gt;2&lt;/span&gt;&lt;span&gt;];
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;         tps[&lt;span&gt;0&lt;/span&gt;] = &lt;span&gt;typeof&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;         tps[&lt;span&gt;1&lt;/span&gt;] = &lt;span&gt;typeof&lt;/span&gt;(&lt;span&gt;string&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取类的初始化参数信息&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt;         ConstructorInfo ct2 =&lt;span&gt; tp.GetConstructor(tps);
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; 
&lt;span&gt; 8&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;定义参数数组&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt;         &lt;span&gt;object&lt;/span&gt;[] obj = &lt;span&gt;new&lt;/span&gt; &lt;span&gt;object&lt;/span&gt;[&lt;span&gt;2&lt;/span&gt;&lt;span&gt;];
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;         obj[&lt;span&gt;0&lt;/span&gt;] = (&lt;span&gt;object&lt;/span&gt;)&lt;span&gt;100&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;         obj[&lt;span&gt;1&lt;/span&gt;] = (&lt;span&gt;object&lt;/span&gt;)&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Param Example&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; 
&lt;span&gt;13&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;调用带参数的构造器&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt;         ExampleClass Ex2 = (ExampleClass)ct2.Invoke(obj);
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;　　　　获得所有公共字段&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt;         
&lt;span&gt;2&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 获取到所有公共字段&lt;/span&gt;
&lt;span&gt;3&lt;/span&gt;         FieldInfo[] arr =&lt;span&gt; t.GetFields();     
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; 
&lt;span&gt;5&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 给指定的字段赋值   需要传递进来一个对象  newObj&lt;/span&gt;
&lt;span&gt;6&lt;/span&gt;         f.SetValue(newObj, r[name]);    
&lt;/pre&gt;&lt;/div&gt;

&lt;h4&gt; 　　　这里就介绍这几个方法，通过反射可以获得类中的所有信息，并且可以进行调用，还可以打破封装（不安全） &lt;/h4&gt;
&lt;h2&gt;练习&lt;/h2&gt;
&lt;h4&gt;　　下面就是通过反射将从数据库中获取到的结果集自动封装到Bean中。无需手动封装&lt;/h4&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt;&lt;span&gt; T dataToObj(String str)
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; 
&lt;span&gt; 4&lt;/span&gt;             String strSql =&lt;span&gt; str;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;             DataSet ds =&lt;span&gt; SqlCompose.ExecuteSqlQuery(strSql);
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt;             Type t = &lt;span&gt;typeof&lt;/span&gt;&lt;span&gt;(T);
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;             DataRow r = ds.Tables[&lt;span&gt;0&lt;/span&gt;].Rows[&lt;span&gt;0&lt;/span&gt;];   &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 找到一行&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt;             FieldInfo[] arr = t.GetFields();   &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 返回所有公共字段(public)&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt;             ConstructorInfo ct =&lt;span&gt; t.GetConstructor(System.Type.EmptyTypes);
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;             T newObj = (T)ct.Invoke(&lt;span&gt;null&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (r != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;                 &lt;span&gt;foreach&lt;/span&gt; (FieldInfo f &lt;span&gt;in&lt;/span&gt; arr)&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 遍历所有字段&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt; &lt;span&gt;                {
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;                     &lt;span&gt;string&lt;/span&gt; name =&lt;span&gt; f.Name;
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;                     Type type2 =&lt;span&gt; f.FieldType;
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;                     &lt;span&gt;if&lt;/span&gt; (r[name].GetType() != &lt;span&gt;typeof&lt;/span&gt;&lt;span&gt;(DBNull))
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;                    {
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;                         &lt;span&gt;string&lt;/span&gt; typeName =&lt;span&gt; f.FieldType.Name;
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;                        f.SetValue(newObj, r[name]);
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;                    }
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;             &lt;span&gt;else&lt;/span&gt;
&lt;span&gt;26&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;                 newObj = &lt;span&gt;default&lt;/span&gt;&lt;span&gt;(T);
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; &lt;span&gt;            ds.Tables.Clear();
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; 
&lt;span&gt;31&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt; newObj;
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;         }
&lt;/pre&gt;&lt;/div&gt;

&lt;h4&gt;　　封装到List&lt;/h4&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; List&amp;lt;T&amp;gt;&lt;span&gt; dataToList(String str)
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;             List&amp;lt;T&amp;gt; list = &lt;span&gt;new&lt;/span&gt; List&amp;lt;T&amp;gt;&lt;span&gt;();
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; 
&lt;span&gt; 5&lt;/span&gt;             String strSql =&lt;span&gt; str;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;             DataSet ds =&lt;span&gt; SqlCompose.ExecuteSqlQuery(strSql);
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; 
&lt;span&gt; 8&lt;/span&gt;             Type t = &lt;span&gt;typeof&lt;/span&gt;&lt;span&gt;(T);
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;             FieldInfo[] arr = t.GetFields();   &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 返回所有公共字段(public)&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt;             ConstructorInfo ct =&lt;span&gt; t.GetConstructor(System.Type.EmptyTypes);
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; 
&lt;span&gt;12&lt;/span&gt;             &lt;span&gt;foreach&lt;/span&gt; (DataRow dr &lt;span&gt;in&lt;/span&gt; ds.Tables[&lt;span&gt;0&lt;/span&gt;&lt;span&gt;].Rows)
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;                 T newObj = (T)ct.Invoke(&lt;span&gt;null&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;                 &lt;span&gt;foreach&lt;/span&gt; (FieldInfo f &lt;span&gt;in&lt;/span&gt; arr)&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 遍历所有字段&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt; &lt;span&gt;                {
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;                     &lt;span&gt;string&lt;/span&gt; name =&lt;span&gt; f.Name;
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;                     Type type2 =&lt;span&gt; f.FieldType;
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;                     &lt;span&gt;string&lt;/span&gt; typeName =&lt;span&gt; f.FieldType.Name;
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;                     &lt;span&gt;if&lt;/span&gt; (dr[name].GetType() != &lt;span&gt;typeof&lt;/span&gt;&lt;span&gt;(DBNull))
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;                    {
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;                        f.SetValue(newObj, dr[name]);
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;                    }
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; 
&lt;span&gt;25&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; 
&lt;span&gt;27&lt;/span&gt; &lt;span&gt;                list.Add(newObj);
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; 
&lt;span&gt;29&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; &lt;span&gt;            ds.Tables.Clear();
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt; list;
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; 
&lt;span&gt;33&lt;/span&gt;         }
&lt;/pre&gt;&lt;/div&gt;

&lt;h4&gt;　　拼接字符串进行insert操作&lt;/h4&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; inserByBean(&lt;span&gt;string&lt;/span&gt;&lt;span&gt; tableName, T target)
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; 
&lt;span&gt; 4&lt;/span&gt;         StringBuilder sql = &lt;span&gt;new&lt;/span&gt; StringBuilder(); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 拼接的sql&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt; 
&lt;span&gt; 6&lt;/span&gt;         sql.Append(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;insert into &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;+tableName+&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; 
&lt;span&gt; 8&lt;/span&gt;         Type t =&lt;span&gt; target.GetType();
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;         PropertyInfo[] ps =&lt;span&gt; t.GetProperties();
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; 
&lt;span&gt;11&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; ps.Length; i++&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; 
&lt;span&gt;14&lt;/span&gt;             &lt;span&gt;object&lt;/span&gt; obj = ps[i].GetValue(target, &lt;span&gt;null&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (obj != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;                 &lt;span&gt;string&lt;/span&gt; name =&lt;span&gt; ps[i].Name;
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt; (i != ps.Length - &lt;span&gt;1&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;                {
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;                     sql.Append(&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt; + name + &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;                 &lt;span&gt;else&lt;/span&gt;
&lt;span&gt;23&lt;/span&gt; &lt;span&gt;                {
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;                     sql.Append(&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt; + name + &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; 
&lt;span&gt;29&lt;/span&gt;         sql.Append(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;) values(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; 
&lt;span&gt;31&lt;/span&gt; 
&lt;span&gt;32&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; ps.Length; i++&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt;             &lt;span&gt;object&lt;/span&gt; obj = ps[i].GetValue(target, &lt;span&gt;null&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt; 
&lt;span&gt;36&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (obj != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt; (i != ps.Length - &lt;span&gt;1&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt; &lt;span&gt;                {
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt;                     &lt;span&gt;if&lt;/span&gt; (ps[i].PropertyType == &lt;span&gt;typeof&lt;/span&gt;(&lt;span&gt;string&lt;/span&gt;) || ps[i].PropertyType == &lt;span&gt;typeof&lt;/span&gt;&lt;span&gt;(DateTime))
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt; &lt;span&gt;                    {
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt;                         sql.Append(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; + obj + &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;',&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt; &lt;span&gt;                    }
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt;                     &lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt;                         sql.Append(&lt;span&gt;&quot;&quot;&lt;/span&gt; + obj + &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt; &lt;span&gt;                    }
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt;                 &lt;span&gt;else&lt;/span&gt;
&lt;span&gt;49&lt;/span&gt; &lt;span&gt;                {
&lt;/span&gt;&lt;span&gt;50&lt;/span&gt;                     &lt;span&gt;if&lt;/span&gt; (ps[i].PropertyType == &lt;span&gt;typeof&lt;/span&gt;(&lt;span&gt;string&lt;/span&gt;) || ps[i].PropertyType == &lt;span&gt;typeof&lt;/span&gt;&lt;span&gt;(DateTime))
&lt;/span&gt;&lt;span&gt;51&lt;/span&gt; &lt;span&gt;                    {
&lt;/span&gt;&lt;span&gt;52&lt;/span&gt;                         sql.Append(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; + obj + &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;')&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;53&lt;/span&gt; &lt;span&gt;                    }
&lt;/span&gt;&lt;span&gt;54&lt;/span&gt;                     &lt;span&gt;else&lt;/span&gt;
&lt;span&gt;55&lt;/span&gt; &lt;span&gt;                    {
&lt;/span&gt;&lt;span&gt;56&lt;/span&gt;                         sql.Append(&lt;span&gt;&quot;&quot;&lt;/span&gt; + obj + &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;57&lt;/span&gt; &lt;span&gt;                    }
&lt;/span&gt;&lt;span&gt;58&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;59&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;60&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;61&lt;/span&gt;         &lt;span&gt;string&lt;/span&gt; resultSql =&lt;span&gt; sql.ToString();
&lt;/span&gt;&lt;span&gt;62&lt;/span&gt; &lt;span&gt;        SqlCompose.ExecuteSqlNonQuery(resultSql);
&lt;/span&gt;&lt;span&gt;63&lt;/span&gt;     }
&lt;/pre&gt;&lt;/div&gt;

</description>
<pubDate>Tue, 12 Dec 2017 12:56:00 +0000</pubDate>
<dc:creator>cccc_hi</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/liyuhui-Z/p/8026505.html</dc:identifier>
</item>
<item>
<title>【OCR技术系列之二】文字定位与切割 - Madcola</title>
<link>http://www.cnblogs.com/skyfsm/p/8029668.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/skyfsm/p/8029668.html</guid>
<description>&lt;p&gt;要做文字识别，第一步要考虑的就是怎么将每一个字符从图片中切割下来，然后才可以送入我们设计好的模型进行字符识别。现在就以下面这张图片为例，说一说最一般的字符切割的步骤是哪些。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1093303/201712/1093303-20171212203609660-86218199.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;当然，我们实际上要识别的图片很可能没上面那张图片如此整洁，很可能是倾斜的，或者是带噪声的，又或者这张图片是用手机拍下来下来的，变得歪歪扭扭，所以需要进行图片预处理，把文本位置矫正，把噪声去除，然后才可以进行进一步的字符分割和文字识别。这些预处理的方法在我的前面几篇博客都有提到了，大家可以参考参考：&lt;br/&gt;&lt;a href=&quot;http://www.cnblogs.com/skyfsm/p/7324346.html&quot;&gt;透视矫正&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;http://www.cnblogs.com/skyfsm/p/6902524.html&quot;&gt;水平矫正&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在预处理工作做好之后，我们就可以开始切割字符了。最普通的切割算法可以总结为以下几个步骤：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;对图片进行水平投影，找到每一行的上界限和下界限，进行行切割&lt;/li&gt;
&lt;li&gt;对切割出来的每一行，进行垂直投影，找到每一个字符的左右边界，进行单个字符的切割&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;一看只有两个步骤，好像不太难，马上编程实现看看效果。&lt;/p&gt;
&lt;p&gt;首先是行切割。这里提到了水平投影的概念，估计有的读者没听过这个名词，我来解释一下吧。水平投影，就是对一张图片的每一行元素进行统计（就是往水平方向统计），然后我们根据这个统计结果画出统计结果图，进而确定每一行的起始点和结束点。下面提到的垂直投影也是类似的，只是它的投影方向是往下的，即统计每一列的元素个数。&lt;/p&gt;
&lt;p&gt;根据上面的解释，我们可以写出一个用于水平投影和垂直投影的函数。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;#define V_PROJECT 1  //垂直投影（vertical）
#define H_PROJECT 2  //水平投影（horizational）

typedef struct
{
    int begin;
    int end;

}char_range_t;



//获取文本的投影以用于分割字符(垂直，水平),默认图片是白底黑色
int GetTextProjection(Mat &amp;amp;src, vector&amp;lt;int&amp;gt;&amp;amp; pos, int mode)
{
    if (mode == V_PROJECT)
    {
        for (int i = 0; i &amp;lt; src.rows; i++)
        {
            uchar* p = src.ptr&amp;lt;uchar&amp;gt;(i);
            for (int j = 0; j &amp;lt; src.cols; j++)
            {
                if (p[j] == 0)  //是黑色像素
                {
                    pos[j]++;
                }
            }
        }
    }
    else if (mode == H_PROJECT)
    {
        for (int i = 0; i &amp;lt; src.cols; i++)
        {

            for (int j = 0; j &amp;lt; src.rows; j++)
            {
                if (src.at&amp;lt;uchar&amp;gt;(j, i) == 0)
                {
                    pos[j]++;
                }
            }
        }
    }

    return 0;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;上面代码提到的vector pos就是用于存储垂直投影和水平投影的位置的，我们可以根据它来确定行的位置。我们先把水平投影画出来。&lt;/p&gt;
&lt;p&gt;下面是画出水平（垂直）投影图的代码实现。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;void draw_projection(vector&amp;lt;int&amp;gt;&amp;amp; pos, int mode)
{
    vector&amp;lt;int&amp;gt;::iterator max = std::max_element(std::begin(pos), std::end(pos)); //求最大值
    if (mode == H_PROJECT)
    {
        int height = pos.size();
        int width = *max;
        Mat project = Mat::zeros(height, width, CV_8UC1);
        for (int i = 0; i &amp;lt; project.rows; i++)
        {
            for (int j = 0; j &amp;lt; pos[i]; j++)
            {
                project.at&amp;lt;uchar&amp;gt;(i, j) = 255;
            }
        }
        imshow(&quot;horizational projection&quot;, project);

    }
    else if (mode == V_PROJECT)
    {
        int height = *max;
        int width = pos.size();
        Mat project = Mat::zeros(height, width, CV_8UC1);
        for (int i = 0; i &amp;lt; project.cols; i++)
        {
            for (int j = project.rows - 1; j &amp;gt;= project.rows - pos[i]; j--)
            {
                //std::cout &amp;lt;&amp;lt; &quot;j:&quot; &amp;lt;&amp;lt; j &amp;lt;&amp;lt; &quot;i:&quot; &amp;lt;&amp;lt; i &amp;lt;&amp;lt; std::endl;
                project.at&amp;lt;uchar&amp;gt;(j, i) = 255;
            }
        }
        imshow(&quot;vertical projection&quot;, project);
    }

    waitKey();
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;水平投影图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1093303/201712/1093303-20171212203627144-914341786.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;通过上面的水平投影图，我们很容易就能确定每一行文字的位置，确定的思路如下：我们可以以每个小山峰的起始结束点作为我们文本行的起始结束点，当然我们要对这些山峰做些约束，比如这些山峰的跨度不能太小。这样子我们就得到每一个文本行的位置，接着我们就根据这些位置将每个文本行切割下来用于接下来的单个字符的切割。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;//获取每个分割字符的范围，min_thresh：波峰的最小幅度，min_range：两个波峰的最小间隔
int GetPeekRange(vector&amp;lt;int&amp;gt; &amp;amp;vertical_pos, vector&amp;lt;char_range_t&amp;gt; &amp;amp;peek_range, int min_thresh = 2, int min_range = 10)
{
    int begin = 0;
    int end = 0;
    for (int i = 0; i &amp;lt; vertical_pos.size(); i++)
    {
        if (vertical_pos[i] &amp;gt; min_thresh &amp;amp;&amp;amp; begin == 0)
        {
            begin = i;
        }
        else if (vertical_pos[i] &amp;gt; min_thresh &amp;amp;&amp;amp; begin != 0)
        {
            continue;
        }
        else if (vertical_pos[i] &amp;lt; min_thresh &amp;amp;&amp;amp; begin != 0)
        {
            end = i;
            if (end - begin &amp;gt;= min_range)
            {
                char_range_t tmp;
                tmp.begin = begin;
                tmp.end = end;
                peek_range.push_back(tmp);
                begin = 0;
                end = 0;
            }

        }
        else if (vertical_pos[i] &amp;lt; min_thresh || begin == 0)
        {
            continue;
        }
        else
        {
            //printf(&quot;raise error!\n&quot;);
        }
    }

    return 0;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;切割每一行，然后我们得到了一行文本，我们继续对这行文本进行垂直投影。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1093303/201712/1093303-20171212203638066-1836008044.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;紧接着我们根据垂直投影求出来每个字符的边界值进行单个字符切割。方法与垂直投影的方法一样，只不过，因为字符排列得比较紧密，仅通过投影确定字符得到的结果往往不够准确的。不过先不管了，先切下来看看。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1093303/201712/1093303-20171212203645785-1478538755.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;从上图看出，切割效果不太好，那多切割几行再看看。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1093303/201712/1093303-20171212203656332-869222680.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1093303/201712/1093303-20171212203704160-1155060509.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;效果确实不咋滴，那换成英文文档来测试这个切割算法。&lt;/p&gt;
&lt;p&gt;比如切割这个英语文本图片&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1093303/201712/1093303-20171212204055504-118369071.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;切割效果还是很不错的：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1093303/201712/1093303-20171212203823176-2029059386.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1093303/201712/1093303-20171212203832129-1105054263.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;那为什么英语的切割效果很好，但中文效果一般呢？&lt;/p&gt;
&lt;p&gt;分析其原因，这其实跟中文的字体复杂度有关的，中文的字符的笔画和形态都比英文的多，更重要的是英文字母都是绝大部分都是联通体，切割起来很简单，但是汉字多存在左右结构和上下结构，很容易造成过度切割，即把一个左右偏旁的汉字切成了两份，比如上面的“则”字。&lt;/p&gt;
&lt;p&gt;针对行字符分割，左右偏旁的字难以分割的情况，我觉得可以做以下处理：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;先用通用的分割方法切割字符，得到一堆候选的切割字符集合。&lt;/li&gt;
&lt;li&gt;统计字符集合的大多数字符的尺寸，作为标准尺寸。&lt;/li&gt;
&lt;li&gt;根据标准尺寸选出标准的字符，切割保存。并对切割保存好的字符原位置涂成白色&lt;/li&gt;
&lt;li&gt;对剩下下来的图片进行腐蚀，让字体粘连。&lt;/li&gt;
&lt;li&gt;用1中算法再次分割，得到完整字体集合。&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;因为以上的思路可能只适应于纯汉字文本，所以就不贴代码了。&lt;/p&gt;
&lt;p&gt;最后贴几张分割字符的图吧，感觉分割效果不太让人满意，主要是汉字的分割确实很有难度，左右偏旁的字经常分割错误。&lt;/p&gt;
&lt;p&gt;英文的切割还是比较简单的，毕竟英文字母基本都是联通体，而且没有像汉字那样的左右结构。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1093303/201712/1093303-20171212203842863-492058882.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;对于字体间隔比较宽的汉字文档，总的看来分割任务基本完成，但是左右结构的汉字依然难以正确分割。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1093303/201712/1093303-20171212203851988-1673541577.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;最后看一下一些字体较小，字体间隔较窄的情况。这类情况确实分割效果大打折扣，因为每个字体粘连过于接近，字体的波谷很难确定下来，进而造成切割字符失败。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1093303/201712/1093303-20171212203858941-1085124261.png&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;总结&quot;&gt;总结&lt;/h2&gt;
&lt;p&gt;汉字字符切割，看似简单，做起来其实很难做得很好，我也对此查阅了很多论文，发现其实很多论文也谈到了，汉字确实很那做到一个高正确率的分割，直至现在还没有一统江湖的解决方案。汉字切割的失败，就会直接导致了后面OCR识别的失败，这也是当前很多一些很厉害的OCR公司都没法把汉字做到100%识别的一个原因吧。所以这个问题就必须得到很好的解决。现在解决汉字切割失败（过切割，一个字被拆成两个）的较好方法是，在OCR识别中再把它修正。比如“刺”字被分为两部分了，那么我们就直接将这两个“字”送去识别，结果当然是得到一个置信度很低的一个反馈，那么我们就将这两个部分往他们身边最近的、而且没被成功识别的部分进行合并，再将这个合并后的字送进OCR识别，这样子我们就可以通过识别反馈来完成汉字的正确分割和识别了。既然一些基于图像处理的方法基本很难把汉字分割的效果做得很好，那深度学习呢？我先去试试，效果好的话再分享给大家。&lt;/p&gt;
&lt;p&gt;代码在&lt;a href=&quot;https://github.com/AstarLight/text_segementation&quot;&gt;我的github&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Tue, 12 Dec 2017 12:41:00 +0000</pubDate>
<dc:creator>Madcola</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/skyfsm/p/8029668.html</dc:identifier>
</item>
<item>
<title>屏幕旋转时调用PopupWindow update方法更新位置失效的问题及解决方案 - popfisher</title>
<link>http://www.cnblogs.com/popfisher/p/8029616.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/popfisher/p/8029616.html</guid>
<description>&lt;p&gt;   接到一个博友的反馈，在屏幕旋转时调用PopupWindow的update方法失效。使用场景如下：在一个Activity中监听屏幕旋转事件，在Activity主布局文件中有个按钮点击弹出一个PopupWindow，另外在主布局文件中有个ListView。测试结果发现：如果ListView设置为可见（visibile）的话，屏幕旋转时调用的update方法无效，如果ListView设置为不可见（gone）或者直接删除的话，屏幕旋转时调用的update方法就生效。下面先展示两种情况的效果图对比。&lt;/p&gt;
&lt;h2 id=&quot;listview不可见的情况update生效效果符合预期&quot;&gt;ListView不可见的情况（update生效，效果符合预期）&lt;/h2&gt;
&lt;h3 id=&quot;横屏效果图如下&quot;&gt;横屏效果图如下&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/823551/201712/823551-20171212202648066-1310270954.png&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;竖屏效果图如下&quot;&gt;竖屏效果图如下&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/823551/201712/823551-20171212202653222-1457966087.png&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;listview可见的情况update不生效效果不符合预期&quot;&gt;ListView可见的情况（update不生效，效果不符合预期）&lt;/h2&gt;
&lt;h3 id=&quot;横屏效果图如下-1&quot;&gt;横屏效果图如下&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/823551/201712/823551-20171212202700785-1559994523.png&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;竖屏效果图如下-1&quot;&gt;竖屏效果图如下&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/823551/201712/823551-20171212202708222-741636504.png&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;看了上面的效果图再来看看简单的布局实现和activity代码实现&quot;&gt;看了上面的效果图，再来看看简单的布局实现和Activity代码实现&lt;/h2&gt;
&lt;h2 id=&quot;activity主布局文件如下&quot;&gt;Activity主布局文件如下&lt;/h2&gt;
&lt;pre&gt;
&lt;code&gt;&amp;lt;RelativeLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;
    xmlns:tools=&quot;http://schemas.android.com/tools&quot;
    android:layout_width=&quot;match_parent&quot;
    android:layout_height=&quot;match_parent&quot;
    android:paddingBottom=&quot;@dimen/activity_vertical_margin&quot;
    android:paddingLeft=&quot;@dimen/activity_horizontal_margin&quot;
    android:paddingRight=&quot;@dimen/activity_horizontal_margin&quot;
    android:paddingTop=&quot;@dimen/activity_vertical_margin&quot;
    tools:context=&quot;popup.popfisher.com.smartpopupwindow.PopupWindowMainActivity&quot;&amp;gt;
&amp;lt;!-- 这个ListView的显示隐藏直接影响到PopupWindow在屏幕旋转的时候update方法是否生效 --&amp;gt;
&amp;lt;ListView
    android:id=&quot;@+id/listview&quot;
    android:layout_width=&quot;match_parent&quot;
    android:layout_height=&quot;match_parent&quot;
    android:cacheColorHint=&quot;@android:color/transparent&quot;
    android:visibility=&quot;visible&quot; /&amp;gt;

&amp;lt;TextView
    android:id=&quot;@+id/textView1&quot;
    android:layout_width=&quot;wrap_content&quot;
    android:layout_height=&quot;wrap_content&quot;
    android:text=&quot;监听屏幕旋转并调用PopupWindow的update方法，发现如果ListView可见的时候，update方法不生效，ListView不可见的时候update生效&quot; /&amp;gt;

&amp;lt;Button
    android:id=&quot;@+id/anchor_button&quot;
    android:layout_width=&quot;wrap_content&quot;
    android:layout_height=&quot;wrap_content&quot;
    android:layout_alignLeft=&quot;@+id/textView1&quot;
    android:layout_below=&quot;@+id/textView1&quot;
    android:layout_marginLeft=&quot;44dp&quot;
    android:layout_marginTop=&quot;40dp&quot;
    android:text=&quot;点击弹出PopupWindow&quot; /&amp;gt;

&amp;lt;LinearLayout
    android:id=&quot;@+id/btnListLayout&quot;
    android:layout_width=&quot;fill_parent&quot;
    android:layout_height=&quot;wrap_content&quot;
    android:layout_alignParentBottom=&quot;true&quot;
    android:background=&quot;@android:color/transparent&quot;
    android:orientation=&quot;horizontal&quot;&amp;gt;&amp;lt;/LinearLayout&amp;gt;

&amp;lt;/RelativeLayout&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;activity代码如下onconfigurationchanged中根据屏幕方向调用update方法&quot;&gt;Activity代码如下（onConfigurationChanged中根据屏幕方向调用update方法）&lt;/h2&gt;
&lt;pre&gt;
&lt;code&gt;public class ScreenChangeUpdatePopupActivity extends Activity {
    private Button mAnchorBtn;
    private PopupWindow mPopupWindow = null;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_screen_change_update_popup);
        mAnchorBtn = (Button) findViewById(R.id.anchor_button);
        mAnchorBtn.setOnClickListener(new OnClickListener() {

            @Override
            public void onClick(View arg0) {
                View contentView = LayoutInflater.from(getApplicationContext()).inflate(R.layout.popup_content_layout, null);
                mPopupWindow = new PopupWindow(contentView, ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT);
                mPopupWindow.setFocusable(true);
                mPopupWindow.setOutsideTouchable(true);
                mPopupWindow.setBackgroundDrawable(new ColorDrawable());
                mPopupWindow.showAsDropDown(mAnchorBtn, 0, 0);
            }
        });
    }

    public void onConfigurationChanged(Configuration newConfig) {
        super.onConfigurationChanged(newConfig);
        // 转屏时调用update方法更新位置，现象如下
        // 1. 如果R.layout.activity_screen_change_update_popup中的ListView可见，则update无效
        // 2. 如果R.layout.activity_screen_change_update_popup中的ListView不可见，则update有效
        final int typeScreen = newConfig.orientation;
        if (typeScreen == ActivityInfo.SCREEN_ORIENTATION_USER || typeScreen == ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE) {
            mPopupWindow.update(0, 0, -1, -1);
        } else if (typeScreen == ActivityInfo.SCREEN_ORIENTATION_PORTRAIT) {
            mPopupWindow.update(0, 800, -1, -1);
        }
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;   效果图也看了，代码也看了，感觉代码本身没什么毛病，引起这个问题的导火索却是一个ListView，怎么办？当然一开始肯定要不停的尝试新的写法，看看是不是布局文件本身有什么问题。如果怎么尝试都解决不了的时候，这个时候可能已经踩到系统的坑了，可是怎么确定？去看看源码，然后调试一下看看。首先源码要确定是哪个版本的，发现这个问题的Android版本是6.0（其实这个是个普遍的问题，应该不是特有的，看后面的源码分析），那就找个api = 23的（平时空闲的时候再Android studio上把各种版本的api源码全部下载下来吧，方便直接调试和查看）。&lt;/p&gt;
&lt;h2 id=&quot;准备好源码和调试环境之后准备先看下源码从哪儿开始看&quot;&gt;准备好源码和调试环境之后，准备先看下源码（从哪儿开始看？）&lt;/h2&gt;
&lt;p&gt;   我们之前发现的现象是update方法失效，准确的说是update的前两个参数 x,y 坐标失效，高度和宽度是可以的。那我们就看开update方法的前面两个参数怎么使用的。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;public void update(int x, int y, int width, int height, boolean force) {
    if (width &amp;gt;= 0) {
        mLastWidth = width;
        setWidth(width);
    }

    if (height &amp;gt;= 0) {
        mLastHeight = height;
        setHeight(height);
    }

    if (!isShowing() || mContentView == null) {
        return;
    }
    // 这里拿到了 mDecorView 的布局参数 WindowManager.LayoutParams p
    final WindowManager.LayoutParams p =
            (WindowManager.LayoutParams) mDecorView.getLayoutParams();

    boolean update = force;

    final int finalWidth = mWidthMode &amp;lt; 0 ? mWidthMode : mLastWidth;
    if (width != -1 &amp;amp;&amp;amp; p.width != finalWidth) {
        p.width = mLastWidth = finalWidth;
        update = true;
    }

    final int finalHeight = mHeightMode &amp;lt; 0 ? mHeightMode : mLastHeight;
    if (height != -1 &amp;amp;&amp;amp; p.height != finalHeight) {
        p.height = mLastHeight = finalHeight;
        update = true;
    }
    // 这里把x,y分别赋值给 WindowManager.LayoutParams p
    if (p.x != x) {
        p.x = x;
        update = true;
    }

    if (p.y != y) {
        p.y = y;
        update = true;
    }

    final int newAnim = computeAnimationResource();
    if (newAnim != p.windowAnimations) {
        p.windowAnimations = newAnim;
        update = true;
    }

    final int newFlags = computeFlags(p.flags);
    if (newFlags != p.flags) {
        p.flags = newFlags;
        update = true;
    }

    if (update) {
        setLayoutDirectionFromAnchor();
        // 这里把 WindowManager.LayoutParams p 设置给了 mDecorView
        mWindowManager.updateViewLayout(mDecorView, p);
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;  里面的几个注释是本人加的，仔细看这个方法好像没什么毛病。但是这个时候还是要坚信代码里面存在真理，它不会骗人。这里其实可以靠猜，是不是可能存在调用了多次update，本来设置好的又被其他地方调用update给覆盖了。但是猜是靠经验的，一般不好猜，还是笨方法吧，在update方法开头打个断点，看看代码怎么执行的。&lt;/p&gt;
&lt;h2 id=&quot;万能的debug找准位置打好断点开始调试&quot;&gt;万能的Debug，找准位置打好断点，开始调试&lt;/h2&gt;
&lt;p&gt;  先把弹窗弹出来，然后打上断点，绑定调试的进程，转屏之后断点就过来了，如下所示&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/823551/201712/823551-20171212202726176-1338715350.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;  然后单步调试（AS的F8）完看看各个地方是不是正常的流程。这里会发现整个 update 方法都正常，那我们走完它吧（AS的F9快捷键）,奇怪的时候发现update又一次调用进来了，这一次参数有点不一样，看调用堆栈是从一个 onScrollChanged 方法调用过来的，而且参数x,y已经变了，高度宽度还是-1没变（到这里问题已经找到了，就是update被其他地方调用把我们设置的值覆盖了，不过都到这里了，肯定想知道为什么吧，继续看吧）。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/823551/201712/823551-20171212202735894-593038754.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;  从上面的调用堆栈，找到了 onScrollChanged 方法，我们查找一下看看，果然不出所料，这个方法改变了 x,y 参数，具体修改的地方是 findDropDownPosition 方法中，想知道怎么改的细节，可以继续断点调试。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/823551/201712/823551-20171212202744160-1552868388.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/823551/201712/823551-20171212202753707-1503189523.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;  继续寻找调用源头，mOnScrollChangedListener 的 onScrollChanged 谁调用？&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/823551/201712/823551-20171212202801160-314625369.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/823551/201712/823551-20171212202810410-1920618320.png&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;源码分析找到原因了有什么解决方案呢&quot;&gt;源码分析找到原因了，有什么解决方案呢？&lt;/h2&gt;
&lt;p&gt;  最后通过源码看到，在调用 showAsDropDown 方法的时候，会调用 registerForScrollChanged 方法，此方法会拿到anchorView 的 ViewTreeObserver 并添加一个全局的滚动监听事件。至于为什么有ListView的时候会触发到这个滚动事件，这个具体也不知道，不过从这里可以推测，可能不仅是ListView会出现这种情况，理论上还有很多其他的写法会导致转屏的时候触发到那个滚动事件，转屏这个操作太重了，什么的欧可能发生。所以个人推测这是一个普遍存在的问题，只是这种使用场景比较少。所以个人有如下建议：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;可以想办法把它注册的那个 OnScrollChangedLister 反注册掉&lt;/li&gt;
&lt;li&gt;转屏的时候延迟一下，目的是等它的 OnScrollChangedLister 回调走完，我们再走一次把正确的值覆盖掉，但是延迟时间不好控制。还可以自己也给那个anchorView的ViewTreeObserver添加一个OnScrollChangedLister，准确的监听到这个回调之后重新调用update方法设置正确的值，不过这个要和屏幕旋转回调做好配合。&lt;/li&gt;
&lt;li&gt;绕过这个坑，用其他的方式实现&lt;/li&gt;
&lt;/ol&gt;&lt;h2 id=&quot;第二种方法比较常用代码如下&quot;&gt;第二种方法比较常用，代码如下&lt;/h2&gt;
&lt;pre&gt;
&lt;code&gt;public class ScreenChangeUpdatePopupActivity extends Activity {
    private Button mAnchorBtn;
    private PopupWindow mPopupWindow = null;
    private int mCurOrientation = -1;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_screen_change_update_popup);
        mAnchorBtn = (Button) findViewById(R.id.anchor_button);
        mAnchorBtn.setOnClickListener(new OnClickListener() {

            @Override
            public void onClick(View arg0) {
                View contentView = LayoutInflater.from(getApplicationContext()).inflate(R.layout.popup_content_layout, null);
                mPopupWindow = new PopupWindow(contentView, ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT);
                mPopupWindow.setFocusable(true);
                mPopupWindow.setOutsideTouchable(true);
                mPopupWindow.setBackgroundDrawable(new ColorDrawable());
                mPopupWindow.showAsDropDown(mAnchorBtn, 0, 0);
                // showAsDropDown里面注册了一个OnScrollChangedListener,我们自己也注册一个OnScrollChangedListener
                // 但是要在它的后面，这样系统回调的时候会先做完它的再做我们自己的，就可以用我们自己正确的值覆盖掉它的
                initViewListener();
            }
        });
    }

    public void onConfigurationChanged(Configuration newConfig) {
        super.onConfigurationChanged(newConfig);
        mCurOrientation = newConfig.orientation;
    }

    private void initViewListener() {
        mAnchorBtn.getViewTreeObserver().addOnScrollChangedListener(new ViewTreeObserver.OnScrollChangedListener() {
            @Override
            public void onScrollChanged() {
                if (mPopupWindow == null || !mPopupWindow.isShowing()) {
                    return;
                }
                updatePopupPos();
            }
        });
    }

    private void updatePopupPos() {
        if (mCurOrientation == ActivityInfo.SCREEN_ORIENTATION_USER || mCurOrientation == ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE) {
            mPopupWindow.update(0, 0, -1, -1);
        } else if (mCurOrientation == ActivityInfo.SCREEN_ORIENTATION_PORTRAIT) {
            mPopupWindow.update(0, 800, -1, -1);
        }
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;github项目地址&quot;&gt;Github项目地址&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/PopFisher/SmartPopupWindow&quot; class=&quot;uri&quot;&gt;https://github.com/PopFisher/SmartPopupWindow&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Tue, 12 Dec 2017 12:30:00 +0000</pubDate>
<dc:creator>popfisher</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/popfisher/p/8029616.html</dc:identifier>
</item>
<item>
<title>【ASP.NET Core】运行原理之启动WebHost - Never、C</title>
<link>http://www.cnblogs.com/neverc/p/8029419.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/neverc/p/8029419.html</guid>
<description>&lt;p&gt;本节将分析&lt;code&gt;WebHost.StartAsync();&lt;/code&gt;代码，确定是如何一步一步到我们注册的中间件，并介绍几种Configure的方式。&lt;/p&gt;
&lt;p&gt;源代码参考.NET Core 2.0.0&lt;/p&gt;
&lt;h2 id=&quot;目录&quot;&gt;目录&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;Server.StartAsync
&lt;ul&gt;&lt;li&gt;Server&lt;/li&gt;
&lt;li&gt;IHttpApplication&lt;/li&gt;
&lt;li&gt;HttpContextFactory&lt;/li&gt;
&lt;li&gt;HttpContext&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Configure
&lt;ul&gt;&lt;li&gt;IApplicationBuilder&lt;/li&gt;
&lt;li&gt;Use&lt;/li&gt;
&lt;li&gt;Run&lt;/li&gt;
&lt;li&gt;UseMiddleware&lt;/li&gt;
&lt;li&gt;UseWhen&lt;/li&gt;
&lt;li&gt;MapWhen&lt;/li&gt;
&lt;li&gt;Map&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;server.startasync&quot;&gt;Server.StartAsync&lt;/h2&gt;
&lt;p&gt;在上节我们知道&lt;code&gt;WebHost.StartAsync&lt;/code&gt;内部是调用&lt;code&gt;Server.StartAsync&lt;/code&gt;的。&lt;/p&gt;
&lt;pre class=&quot;c#&quot;&gt;
&lt;code&gt;public async Task StartAsync&amp;lt;TContext&amp;gt;(IHttpApplication&amp;lt;TContext&amp;gt; application, CancellationToken cancellationToken)
{
    async Task OnBind(ListenOptions endpoint)
    {
        var connectionHandler = new ConnectionHandler&amp;lt;TContext&amp;gt;(endpoint, ServiceContext, application);
        var transport = _transportFactory.Create(endpoint, connectionHandler);
        _transports.Add(transport);

        await transport.BindAsync().ConfigureAwait(false);
    }

    await AddressBinder.BindAsync(_serverAddresses, Options.ListenOptions, Trace, OnBind).ConfigureAwait(false);
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;参数application即为之前的&lt;code&gt;new HostingApplication&lt;/code&gt;。在这里说下大概的流程：&lt;/p&gt;
&lt;pre class=&quot;c#&quot;&gt;
&lt;code&gt;KestrelServer.StartAsync -&amp;gt; new ConnectionHandler&amp;lt;TContext&amp;gt;().OnConnection -&amp;gt; new FrameConnection().StartRequestProcessing() -&amp;gt; 
new Frame&amp;lt;TContext&amp;gt;().ProcessRequestsAsync() -&amp;gt; _application.CreateContext(this) &amp;amp;&amp;amp; _application.ProcessRequestAsync(context)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;如果你需要更细节的流程，可参考如下：&lt;/p&gt;
&lt;pre class=&quot;c#&quot;&gt;
&lt;code&gt;LibuvTransportFactory -&amp;gt; LibuvTransport.BindAsync() -&amp;gt; ListenerPrimary.StartAsync() -&amp;gt; 
listener.ListenSocket.Listen(LibuvConstants.ListenBacklog, ConnectionCallback, listener) -&amp;gt; listener.OnConnection(stream, status) -&amp;gt; ConnectionCallback() -&amp;gt;
new LibuvConnection(this, socket).Start() -&amp;gt; ConnectionHandler.OnConnection() -&amp;gt; connection.StartRequestProcessing() -&amp;gt; 
ProcessRequestsAsync -&amp;gt; CreateFrame -&amp;gt; await _frame.ProcessRequestsAsync()&lt;/code&gt;
&lt;/pre&gt;
&lt;ol&gt;&lt;li&gt;_application 为上面的HostingApplication;&lt;/li&gt;
&lt;li&gt;每个WebHost.StartAsync 将创建唯一的一个HostingApplication实例并在每次请求时使用。&lt;/li&gt;
&lt;li&gt;由Frame类调用HostingApplication的方法。&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;下面展示Frame以及HostingApplication:&lt;/p&gt;
&lt;h3 id=&quot;frame&quot;&gt;Frame&lt;/h3&gt;
&lt;pre class=&quot;c#&quot;&gt;
&lt;code&gt;public class Frame&amp;lt;TContext&amp;gt; : Frame
{
    public override async Task ProcessRequestsAsync()
    {
        while (!_requestProcessingStopping)
        {
            Reset();

            EnsureHostHeaderExists();

            var messageBody = MessageBody.For(_httpVersion, FrameRequestHeaders, this);
            InitializeStreams(messageBody);

            var context = _application.CreateContext(this);
            try
            {
                await _application.ProcessRequestAsync(context);
            }
            finally
            {
                _application.DisposeContext(context, _applicationException);
            }
        }
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;hostingapplication&quot;&gt;HostingApplication&lt;/h3&gt;
&lt;pre class=&quot;c#&quot;&gt;
&lt;code&gt;public class HostingApplication : IHttpApplication&amp;lt;HostingApplication.Context&amp;gt;
{
    private readonly RequestDelegate _application;
    private readonly IHttpContextFactory _httpContextFactory;

    public HostingApplication(
        RequestDelegate application,
        IHttpContextFactory httpContextFactory)
    {
        _application = application;
        _httpContextFactory = httpContextFactory;
    }

    // Set up the request
    public Context CreateContext(IFeatureCollection contextFeatures)
    {
        var context = new Context();
        var httpContext = _httpContextFactory.Create(contextFeatures);
        context.HttpContext = httpContext;
        return context;
    }

    // Execute the request
    public Task ProcessRequestAsync(Context context)
    {
        return _application(context.HttpContext);
    }

    // Clean up the request
    public void DisposeContext(Context context, Exception exception)
    {
        var httpContext = context.HttpContext;
        _httpContextFactory.Dispose(httpContext);
    }

    public struct Context
    {
        public HttpContext HttpContext { get; set; }
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;由此我们发现HttpContext是由HttpContextFactory创建的，其中&lt;code&gt;_httpContextFactory&lt;/code&gt;则是上节在WebHostBuilder的BuildCommon注入的&lt;br/&gt;同时在HostingApplication的ProcessRequestAsync方法中，我们看到我们的_application(Startup注册的中间件)被调用了。&lt;br/&gt;&lt;a href=&quot;https://github.com/aspnet/HttpAbstractions/blob/release/2.0.0/src/Microsoft.AspNetCore.Http/HttpContextFactory.cs&quot;&gt;IHttpContextFactory&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&quot;httpcontextfactory&quot;&gt;HttpContextFactory&lt;/h3&gt;
&lt;pre class=&quot;c#&quot;&gt;
&lt;code&gt;public HttpContext Create(IFeatureCollection featureCollection)
{
    var httpContext = new DefaultHttpContext(featureCollection);
    if (_httpContextAccessor != null)
        _httpContextAccessor.HttpContext = httpContext;
    return httpContext;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;而创建的HttpContext则是DefaultHttpContext类型：&lt;/p&gt;
&lt;pre class=&quot;c#&quot;&gt;
&lt;code&gt;public class DefaultHttpContext : HttpContext
{
    public virtual void Initialize(IFeatureCollection features)
    {
        _features = new FeatureReferences&amp;lt;FeatureInterfaces&amp;gt;(features);
        _request = InitializeHttpRequest();
        _response = InitializeHttpResponse();
    }

    public override HttpRequest Request =&amp;gt; _request;

    public override HttpResponse Response =&amp;gt; _response;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;configure&quot;&gt;Configure&lt;/h2&gt;
&lt;h3 id=&quot;iapplicationbuilder&quot;&gt;IApplicationBuilder&lt;/h3&gt;
&lt;p&gt;我们知道在Startup的Configure方法中，通过&lt;code&gt;IApplicationBuilder&lt;/code&gt;可以注册中间件。&lt;/p&gt;
&lt;pre class=&quot;c#&quot;&gt;
&lt;code&gt;public interface IApplicationBuilder
{
    IServiceProvider ApplicationServices { get; set; }
    RequestDelegate Build();
    IApplicationBuilder Use(Func&amp;lt;RequestDelegate, RequestDelegate&amp;gt; middleware);
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;默认实现类为：&lt;/p&gt;
&lt;pre class=&quot;c#&quot;&gt;
&lt;code&gt;public class ApplicationBuilder : IApplicationBuilder
{
    private readonly IList&amp;lt;Func&amp;lt;RequestDelegate, RequestDelegate&amp;gt;&amp;gt; _components = new List&amp;lt;Func&amp;lt;RequestDelegate, RequestDelegate&amp;gt;&amp;gt;();
    public IApplicationBuilder Use(Func&amp;lt;RequestDelegate, RequestDelegate&amp;gt; middleware)
    {
        _components.Add(middleware);
        return this;
    }

    public RequestDelegate Build()
    {
        RequestDelegate app = context =&amp;gt;
        {
            context.Response.StatusCode = 404;
            return Task.CompletedTask;
        };

        foreach (var component in _components.Reverse())
            app = component(app);

        return app;
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;其中Use方法为注册中间件。中间件的本质就是一个&lt;code&gt;Func&amp;lt;RequestDelegate, RequestDelegate&amp;gt;&lt;/code&gt;对象。&lt;br/&gt;该对象的传入参数为下一个中间件，返回对象为本中间件。&lt;/p&gt;
&lt;p&gt;而Build方法为生成一个&lt;code&gt;RequestDelegate&lt;/code&gt;，在HostingApplication构造函数中的参数即为该对象。&lt;br/&gt;在Build方法中，我们看到最后一个中间件为404中间件。其他的中间件都是通过Use方法注册到内部维护的_components对象上。&lt;/p&gt;
&lt;h3 id=&quot;use&quot;&gt;Use&lt;/h3&gt;
&lt;p&gt;我们通过一个Use示例，来看下中间件的流程：&lt;/p&gt;
&lt;pre class=&quot;c#&quot;&gt;
&lt;code&gt;public void Configure(IApplicationBuilder app, IHostingEnvironment env)
{
    app.Use(next =&amp;gt; async context =&amp;gt;
    {
        Console.WriteLine(&quot;A begin&quot;);
        await next(context);
        Console.WriteLine(&quot;A end&quot;);
    });

    app.Use(next =&amp;gt; async context =&amp;gt;
    {
        Console.WriteLine(&quot;B begin&quot;);
        await next(context);
        Console.WriteLine(&quot;B end&quot;);
    });
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;访问结果：&lt;br/&gt;A begin&lt;br/&gt;B begin&lt;br/&gt;B end&lt;br/&gt;A end&lt;/p&gt;
&lt;p&gt;流程图：&lt;br/&gt;&lt;img src=&quot;https://docs.microsoft.com/zh-cn/aspnet/core/fundamentals/middleware/_static/request-delegate-pipeline.png&quot; alt=&quot;流程图&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;run&quot;&gt;Run&lt;/h3&gt;
&lt;p&gt;当我们不使用next 下一个中间件的时候，我们可以使用Run方法来实现&lt;br/&gt;Run方法接受一个RequestDelegate对象，本身是IApplicationBuilder的扩展方法。&lt;/p&gt;
&lt;pre class=&quot;c#&quot;&gt;
&lt;code&gt;public static void Run(this IApplicationBuilder app, RequestDelegate handler);
{
    app.Use(_ =&amp;gt; handler);
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Run示例&lt;/p&gt;
&lt;p&gt;&lt;code&gt;app.Run(context=&amp;gt;context.Response.WriteAsync(&quot;Run Core&quot;));&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;该示例相当于：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;app.Use(next =&amp;gt; context =&amp;gt; context.Response.WriteAsync(&quot;Run Core&quot;));&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&quot;usemiddleware&quot;&gt;UseMiddleware&lt;/h3&gt;
&lt;p&gt;而通常我们添加中间件的方式是通过UseMiddleware来更加方便的操作。&lt;/p&gt;
&lt;p&gt;先看下IMiddleware：&lt;/p&gt;
&lt;pre class=&quot;c#&quot;&gt;
&lt;code&gt;public interface IMiddleware
{
    Task InvokeAsync(HttpContext context, RequestDelegate next);
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;参数next即为下一个中间件。&lt;/p&gt;
&lt;p&gt;有2种实现UseMiddleware的方式：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;实现IMiddleware接口。&lt;/li&gt;
&lt;li&gt;基于接口约定的方法。&lt;/li&gt;
&lt;/ol&gt;&lt;h4 id=&quot;imiddleware接口&quot;&gt;IMiddleware接口&lt;/h4&gt;
&lt;pre class=&quot;c#&quot;&gt;
&lt;code&gt;public class DemoMiddle : IMiddleware
{
    public Task InvokeAsync(HttpContext context, RequestDelegate next)
    {
        return context.Response.WriteAsync(&quot;hello middleware&quot;);
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;在使用IMiddleware接口的时候，还需要注册该类到DI系统中。&lt;/p&gt;
&lt;h4 id=&quot;约定&quot;&gt;约定&lt;/h4&gt;
&lt;pre class=&quot;c#&quot;&gt;
&lt;code&gt;public class DemoMiddle
{
    private RequestDelegate _next;
    public DemoMiddle(RequestDelegate next)
    {
        _next = next;
    }
    public Task InvokeAsync(HttpContext context)
    {
        return context.Response.WriteAsync(&quot;hello middleware&quot;);
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这种方式，不用再注册到DI中，如果需要对该类构造函数传入参数，直接在&lt;code&gt;app.UseMiddleware&amp;lt;DemoMiddle&amp;gt;(&quot;hi1&quot;);&lt;/code&gt;传入参数即可。&lt;/p&gt;
&lt;h3 id=&quot;usewhen&quot;&gt;UseWhen&lt;/h3&gt;
&lt;pre class=&quot;c#&quot;&gt;
&lt;code&gt;app.Use(next =&amp;gt; async context =&amp;gt; { await context.Response.WriteAsync(&quot;Begin&quot;); await next(context); });

app.UseWhen(context =&amp;gt; context.Request.Path.Value == &quot;/hello&quot;, branch =&amp;gt; branch.Use(
    next =&amp;gt; async context =&amp;gt; { await context.Response.WriteAsync(&quot;hello&quot;); await next(context); }));

app.Run(context =&amp;gt; context.Response.WriteAsync(&quot;End&quot;));&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;当我们访问/hello时，结果为：&lt;code&gt;BeginhelloEnd&lt;/code&gt;&lt;br/&gt;分析源码得知在构建管道的时候，克隆一个另外的IApplicationBuilder。&lt;/p&gt;
&lt;pre class=&quot;c#&quot;&gt;
&lt;code&gt;public static IApplicationBuilder UseWhen(this IApplicationBuilder app, Predicate predicate, Action&amp;lt;IApplicationBuilder&amp;gt; configuration)
{
    var branchBuilder = app.New();
    configuration(branchBuilder);

    return app.Use(main =&amp;gt;
    {
        // This is called only when the main application builder
        // is built, not per request.
        branchBuilder.Run(main);// 添加(调用)原来的中间件
        var branch = branchBuilder.Build();

        return context =&amp;gt; predicate(context) ? branch(context): main(context);
    });
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;mapwhen&quot;&gt;MapWhen&lt;/h3&gt;
&lt;pre class=&quot;c#&quot;&gt;
&lt;code&gt;app.Use(next =&amp;gt; async context =&amp;gt; { await context.Response.WriteAsync(&quot;Begin&quot;); await next(context); });

app.MapWhen(context =&amp;gt; context.Request.Path.Value == &quot;/hello&quot;, app2 =&amp;gt; app2.Run(context =&amp;gt; context.Response.WriteAsync(&quot;hello&quot;)));

app.Run(context =&amp;gt; context.Response.WriteAsync(&quot;End&quot;));&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;当我们访问/hello时，结果为：&lt;code&gt;Beginhello&lt;/code&gt;。&lt;br/&gt;分析源码得知在构建管道的时候，新分支并没有再调用原来的中间件。&lt;/p&gt;
&lt;pre class=&quot;c#&quot;&gt;
&lt;code&gt;public static IApplicationBuilder MapWhen(this IApplicationBuilder app, Predicate predicate, Action&amp;lt;IApplicationBuilder&amp;gt; configuration)
{
    var branchBuilder = app.New();
    configuration(branchBuilder);
    var branch = branchBuilder.Build();
    return app.Use(next =&amp;gt; context =&amp;gt; predicate(context) ? branch(context): next(context));
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;map&quot;&gt;Map&lt;/h3&gt;
&lt;pre class=&quot;c#&quot;&gt;
&lt;code&gt;app.Map(&quot;/hello&quot;, app2 =&amp;gt; app2.Run(context =&amp;gt; context.Response.WriteAsync(&quot;hello&quot;)));&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;当我们访问/hello时，结果为：&lt;code&gt;Beginhello&lt;/code&gt;。与MapWhen效果一样。&lt;br/&gt;如果我们只是判断URLPath的话，通常我们会使用Map方法。&lt;/p&gt;
&lt;p&gt;以上是常用的注册中间件的方式。&lt;/p&gt;
&lt;p&gt;本文链接：&lt;a href=&quot;http://neverc.cnblogs.com/p/8029419.html&quot; class=&quot;uri&quot;&gt;http://neverc.cnblogs.com/p/8029419.html&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Tue, 12 Dec 2017 11:41:00 +0000</pubDate>
<dc:creator>Never、C</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/neverc/p/8029419.html</dc:identifier>
</item>
<item>
<title>部署平台分布式锁设计 - liu_roy</title>
<link>http://www.cnblogs.com/liuroy/p/8029366.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/liuroy/p/8029366.html</guid>
<description>&lt;hr/&gt;&lt;p&gt;[TOC]&lt;/p&gt;
&lt;hr/&gt;&lt;h2 id=&quot;背景&quot;&gt;背景&lt;/h2&gt;
&lt;p&gt;平台支持对服务的安装，更新，启停，备份，卸载，查询等操作，由平台发起命令，agent执行任务，由于agent是多线程并发处理任务，试想一下，多用户对主机上同一服务的进行操作，例如同时卸载和备份，会出现什么可怕的情况。老版本的所有操作，都是人工通过简单if else状态判断，没有从根本上发现问题的本质，并且耦合了业务属性，没有对其进行足够的抽象。&lt;/p&gt;
&lt;h2 id=&quot;主要名词解释&quot;&gt;主要名词解释&lt;/h2&gt;
&lt;table&gt;&lt;thead/&gt;&lt;tbody&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;curator&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;zookeeper&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;平台&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;agent&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h2 id=&quot;方案设计&quot;&gt;方案设计&lt;/h2&gt;
&lt;p&gt;平台锁提供了两种实现方式，一种是基于jdk原生的ReentrantLock，另一种是基于zookeeper的分布式锁，两种方式更有优劣，原生方式的好处是不需要引入第三方组件，由自己在内存中维护锁，zookeeper好处是如果未来平台支持集群，那么锁服务可以无缝衔接。&lt;br/&gt;&lt;/p&gt;
&lt;h2 id=&quot;zookeeper分布式锁&quot;&gt;zookeeper分布式锁&lt;/h2&gt;
&lt;p&gt;zookeeper分布式锁实现可以参考《从Paxos到Zookeeper分布式一致性原理与实现》里面的分布式锁，也可以直接用curator，封装的很好，里面有实现。&lt;/p&gt;
&lt;h3 id=&quot;排它锁截图来自从paxos到zookeeper&quot;&gt;排它锁（截图来自从Paxos到zookeeper）&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20171205163810680&quot; alt=&quot;这里写图片描述&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;共享锁-截图来自从paxos到zookeeper&quot;&gt;共享锁 （截图来自从Paxos到zookeeper）&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20171205164027227&quot; alt=&quot;这里写图片描述&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20171205164057477&quot; alt=&quot;这里写图片描述&quot;/&gt;&lt;/p&gt;
&lt;p&gt;锁的设计是针对一个项目下单台机器上的单台服务，这样既能保证锁的细度，又能保证agent并发操作多服务。锁的路径标记形如“/projectId/sericeId/serviceName&quot;的形式（模仿zookeeper的树形结构）, 通常情况下 projectId和serviceId就能确定一个唯一服务，加上serviceName可以作为调试信息。锁路径的生成由统一的构造器LockPathBuilder生成，保证形式统一。&lt;/p&gt;
&lt;p&gt;ReentrantServiceLock由自己编写一个key：value 的map，来维护锁的信息，zookeeper则不需要为此考虑。&lt;/p&gt;
&lt;h2 id=&quot;类设计&quot;&gt;类设计&lt;/h2&gt;
&lt;p&gt;锁的设计采用工厂方法设计模式，通过工厂接口和锁接口面向接口开发，可方便扩展其他锁的实现方式，利用统一的LockPathBuilder来生成锁的路径，保证路径的规范统一，借助于javaSPI机制，可以在不修改代码的情况下替换应用默认的锁实现方式。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20171124153111497&quot; alt=&quot;这里写图片描述&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;流程图&quot;&gt;流程图&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;构建当前操作服务的锁的路径&lt;/li&gt;
&lt;li&gt;获取锁&lt;/li&gt;
&lt;li&gt;上锁&lt;/li&gt;
&lt;li&gt;对agent发命令进行操作&lt;/li&gt;
&lt;li&gt;解锁&lt;br/&gt;&lt;img src=&quot;http://img.blog.csdn.net/20171129110233595&quot; alt=&quot;这里写图片描述&quot;/&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;使用实例&quot;&gt;使用实例&lt;/h2&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;17&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;        String lockPath = LockPathBuilder.&lt;span class=&quot;fu&quot;&gt;newLock&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;withProjectId&lt;/span&gt;(service.&lt;span class=&quot;fu&quot;&gt;getProjectId&lt;/span&gt;())
                .&lt;span class=&quot;fu&quot;&gt;withServiceName&lt;/span&gt;(service.&lt;span class=&quot;fu&quot;&gt;getAbbreviation&lt;/span&gt;())
                .&lt;span class=&quot;fu&quot;&gt;withServiceId&lt;/span&gt;(serviceId)
                .&lt;span class=&quot;fu&quot;&gt;build&lt;/span&gt;();   &lt;span class=&quot;co&quot;&gt;//lockPath创建&lt;/span&gt;

        &lt;span class=&quot;co&quot;&gt;//删除备份所需要的参数&lt;/span&gt;
        param.&lt;span class=&quot;fu&quot;&gt;put&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;serviceName&quot;&lt;/span&gt;, service.&lt;span class=&quot;fu&quot;&gt;getAbbreviation&lt;/span&gt;());
        param.&lt;span class=&quot;fu&quot;&gt;put&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;backupPath&quot;&lt;/span&gt;, path);
        ServiceLock serviceLock = SERVICE_LOCK_FACTORY.&lt;span class=&quot;fu&quot;&gt;getLock&lt;/span&gt;(lockPath);&lt;span class=&quot;co&quot;&gt;//获取此服务锁&lt;/span&gt;
        serviceLock.&lt;span class=&quot;fu&quot;&gt;lock&lt;/span&gt;();  &lt;span class=&quot;co&quot;&gt;//上锁&lt;/span&gt;
        &lt;span class=&quot;co&quot;&gt;//对此agent发送命令&lt;/span&gt;
        Future future = agentService.&lt;span class=&quot;fu&quot;&gt;synPushTask&lt;/span&gt;(ip, ScriptConstant.&lt;span class=&quot;fu&quot;&gt;remove_service_backup&lt;/span&gt;, param, UUID.&lt;span class=&quot;fu&quot;&gt;randomUUID&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;toString&lt;/span&gt;(), AgentResultMsg.&lt;span class=&quot;fu&quot;&gt;class&lt;/span&gt;);
        AgentResultMsg result = &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;;
        &lt;span class=&quot;kw&quot;&gt;try&lt;/span&gt; {
            result = (AgentResultMsg) future.&lt;span class=&quot;fu&quot;&gt;get&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;20&lt;/span&gt;, TimeUnit.&lt;span class=&quot;fu&quot;&gt;SECONDS&lt;/span&gt;);&lt;span class=&quot;co&quot;&gt;//等待结果时间&lt;/span&gt;
        } &lt;span class=&quot;kw&quot;&gt;catch&lt;/span&gt; (TimeoutException e) {
            restResult.&lt;span class=&quot;fu&quot;&gt;setSuccess&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;false&lt;/span&gt;);
            restResult.&lt;span class=&quot;fu&quot;&gt;setMessage&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;删除备份超时&quot;&lt;/span&gt;);
        } &lt;span class=&quot;kw&quot;&gt;catch&lt;/span&gt; (Exception e) {
           logger.&lt;span class=&quot;fu&quot;&gt;error&lt;/span&gt;(e);
        } &lt;span class=&quot;kw&quot;&gt;finally&lt;/span&gt; {
            &lt;span class=&quot;co&quot;&gt;//释放锁&lt;/span&gt;
            serviceLock.&lt;span class=&quot;fu&quot;&gt;unlock&lt;/span&gt;();
        }&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上述过程有个隐含的步骤，那就是一定要有超时机制，不然agent挂掉，一直不返回数据，会造成死锁，平台在这一版本中支持了同步调用agent，保证能在有限的时间内完成调用，并在同一个线程中释放锁。&lt;/p&gt;
&lt;p&gt;关于同步调用如何实现会在以后的案例中分析。&lt;/p&gt;
&lt;h2 id=&quot;测试用例&quot;&gt;测试用例&lt;/h2&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;co&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * Created by liuroy on 2017/9/25.&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; */&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; ReentrantServiceLockTest {

    &lt;span class=&quot;fu&quot;&gt;@Test&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;testServiceLock&lt;/span&gt;() {
        ServiceLockFactory lockFactory = SpiServiceFactory.&lt;span class=&quot;fu&quot;&gt;getService&lt;/span&gt;(ServiceLockFactory.&lt;span class=&quot;fu&quot;&gt;class&lt;/span&gt;);
        Runnable task1 = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; Runnable() {
            &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;run&lt;/span&gt;() {
                ServiceLock lock = &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;;
                &lt;span class=&quot;kw&quot;&gt;try&lt;/span&gt; {
                    lock = lockFactory.&lt;span class=&quot;fu&quot;&gt;getLock&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;test1&quot;&lt;/span&gt;);
                    lock.&lt;span class=&quot;fu&quot;&gt;lock&lt;/span&gt;();
                    System.&lt;span class=&quot;fu&quot;&gt;out&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;println&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;Thread &quot;&lt;/span&gt; + Thread.&lt;span class=&quot;fu&quot;&gt;currentThread&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;getId&lt;/span&gt;() + &lt;span class=&quot;st&quot;&gt;&quot; getted lock&quot;&lt;/span&gt;);
                    Thread.&lt;span class=&quot;fu&quot;&gt;sleep&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;3000&lt;/span&gt;);
                    System.&lt;span class=&quot;fu&quot;&gt;out&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;println&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;Thread &quot;&lt;/span&gt; + Thread.&lt;span class=&quot;fu&quot;&gt;currentThread&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;getId&lt;/span&gt;() + &lt;span class=&quot;st&quot;&gt;&quot; running&quot;&lt;/span&gt;);
                    System.&lt;span class=&quot;fu&quot;&gt;out&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;println&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;Thread &quot;&lt;/span&gt; + Thread.&lt;span class=&quot;fu&quot;&gt;currentThread&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;getId&lt;/span&gt;() + &lt;span class=&quot;st&quot;&gt;&quot; run oven&quot;&lt;/span&gt;);
                } &lt;span class=&quot;kw&quot;&gt;catch&lt;/span&gt; (Exception e) {
                    e.&lt;span class=&quot;fu&quot;&gt;printStackTrace&lt;/span&gt;();
                } &lt;span class=&quot;kw&quot;&gt;finally&lt;/span&gt; {
                    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (lock != &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;)
                        lock.&lt;span class=&quot;fu&quot;&gt;unlock&lt;/span&gt;();
                }
            }
        };

        &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; Thread(task1).&lt;span class=&quot;fu&quot;&gt;start&lt;/span&gt;();
        Runnable task2 = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; Runnable() {
            &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;run&lt;/span&gt;() {
                ServiceLock lock = &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;;
                &lt;span class=&quot;kw&quot;&gt;try&lt;/span&gt; {
                    lock = lockFactory.&lt;span class=&quot;fu&quot;&gt;getLock&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;test1&quot;&lt;/span&gt;);
                    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (!lock.&lt;span class=&quot;fu&quot;&gt;tryLock&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;2000&lt;/span&gt;, TimeUnit.&lt;span class=&quot;fu&quot;&gt;MILLISECONDS&lt;/span&gt;)){
                        System.&lt;span class=&quot;fu&quot;&gt;out&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;println&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;Thread &quot;&lt;/span&gt; + Thread.&lt;span class=&quot;fu&quot;&gt;currentThread&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;getId&lt;/span&gt;() + &lt;span class=&quot;st&quot;&gt;&quot; unget lock&quot;&lt;/span&gt;);
                    }
                    lock.&lt;span class=&quot;fu&quot;&gt;lock&lt;/span&gt;();
                    System.&lt;span class=&quot;fu&quot;&gt;out&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;println&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;Thread &quot;&lt;/span&gt; + Thread.&lt;span class=&quot;fu&quot;&gt;currentThread&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;getId&lt;/span&gt;() + &lt;span class=&quot;st&quot;&gt;&quot; getted lock&quot;&lt;/span&gt;);
                    System.&lt;span class=&quot;fu&quot;&gt;out&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;println&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;Thread &quot;&lt;/span&gt; + Thread.&lt;span class=&quot;fu&quot;&gt;currentThread&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;getId&lt;/span&gt;() + &lt;span class=&quot;st&quot;&gt;&quot; running&quot;&lt;/span&gt;);
                    Thread.&lt;span class=&quot;fu&quot;&gt;sleep&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;3000&lt;/span&gt;);
                    System.&lt;span class=&quot;fu&quot;&gt;out&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;println&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;Thread &quot;&lt;/span&gt; + Thread.&lt;span class=&quot;fu&quot;&gt;currentThread&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;getId&lt;/span&gt;() + &lt;span class=&quot;st&quot;&gt;&quot; run oven&quot;&lt;/span&gt;);
                } &lt;span class=&quot;kw&quot;&gt;catch&lt;/span&gt; (Exception e) {
                    e.&lt;span class=&quot;fu&quot;&gt;printStackTrace&lt;/span&gt;();
                } &lt;span class=&quot;kw&quot;&gt;finally&lt;/span&gt; {
                    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (lock != &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;)
                        lock.&lt;span class=&quot;fu&quot;&gt;unlock&lt;/span&gt;();
                }
            }
        };

        Runnable task3 = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; Runnable() {
            &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;run&lt;/span&gt;() {
                ServiceLock lock = &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;;
                &lt;span class=&quot;kw&quot;&gt;try&lt;/span&gt; {
                    lock = lockFactory.&lt;span class=&quot;fu&quot;&gt;getLock&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;test1&quot;&lt;/span&gt;);
                    lock.&lt;span class=&quot;fu&quot;&gt;lock&lt;/span&gt;();
                    System.&lt;span class=&quot;fu&quot;&gt;out&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;println&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;Thread &quot;&lt;/span&gt; + Thread.&lt;span class=&quot;fu&quot;&gt;currentThread&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;getId&lt;/span&gt;() + &lt;span class=&quot;st&quot;&gt;&quot; getted lock&quot;&lt;/span&gt;);
                    System.&lt;span class=&quot;fu&quot;&gt;out&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;println&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;Thread &quot;&lt;/span&gt; + Thread.&lt;span class=&quot;fu&quot;&gt;currentThread&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;getId&lt;/span&gt;() + &lt;span class=&quot;st&quot;&gt;&quot; running&quot;&lt;/span&gt;);
                    Thread.&lt;span class=&quot;fu&quot;&gt;sleep&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;4000&lt;/span&gt;);
                    System.&lt;span class=&quot;fu&quot;&gt;out&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;println&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;Thread &quot;&lt;/span&gt; + Thread.&lt;span class=&quot;fu&quot;&gt;currentThread&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;getId&lt;/span&gt;() + &lt;span class=&quot;st&quot;&gt;&quot; run oven&quot;&lt;/span&gt;);
                } &lt;span class=&quot;kw&quot;&gt;catch&lt;/span&gt; (Exception e) {
                    e.&lt;span class=&quot;fu&quot;&gt;printStackTrace&lt;/span&gt;();
                } &lt;span class=&quot;kw&quot;&gt;finally&lt;/span&gt; {
                    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (lock != &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;)
                        lock.&lt;span class=&quot;fu&quot;&gt;unlock&lt;/span&gt;();
                }
            }
        };

        &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; Thread(task2).&lt;span class=&quot;fu&quot;&gt;start&lt;/span&gt;();
        &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; Thread(task3).&lt;span class=&quot;fu&quot;&gt;start&lt;/span&gt;();


        &lt;span class=&quot;kw&quot;&gt;try&lt;/span&gt; {
            Thread.&lt;span class=&quot;fu&quot;&gt;sleep&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;20000&lt;/span&gt;);
        } &lt;span class=&quot;kw&quot;&gt;catch&lt;/span&gt; (InterruptedException e1) {
            e1.&lt;span class=&quot;fu&quot;&gt;printStackTrace&lt;/span&gt;();
        }
    }
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;co&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * Created by liuroy on 2017/9/25.&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; */&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; ZookeeperServiceLockTest {

    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt;  ServiceLockFactory lockFactory;

    &lt;span class=&quot;fu&quot;&gt;@Before&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;init&lt;/span&gt;() {
        lockFactory = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;ZookeeperServiceLockFactory&lt;/span&gt;();
    }

    &lt;span class=&quot;fu&quot;&gt;@Test&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;testServiceLock&lt;/span&gt;() {
        Runnable task1 = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; Runnable() {
            &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;run&lt;/span&gt;() {
                ServiceLock lock = &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;;
                &lt;span class=&quot;kw&quot;&gt;try&lt;/span&gt; {
                    lock = lockFactory.&lt;span class=&quot;fu&quot;&gt;getLock&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;testmmm/test&quot;&lt;/span&gt;);
                    lock.&lt;span class=&quot;fu&quot;&gt;lock&lt;/span&gt;();
                    System.&lt;span class=&quot;fu&quot;&gt;out&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;println&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;Thread1 getted lock&quot;&lt;/span&gt;);
                    Thread.&lt;span class=&quot;fu&quot;&gt;sleep&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;3000&lt;/span&gt;);
                    System.&lt;span class=&quot;fu&quot;&gt;out&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;println&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;Thread1 running&quot;&lt;/span&gt;);
                    System.&lt;span class=&quot;fu&quot;&gt;out&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;println&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;Thread1 run oven&quot;&lt;/span&gt;);
                } &lt;span class=&quot;kw&quot;&gt;catch&lt;/span&gt; (Exception e) {
                    e.&lt;span class=&quot;fu&quot;&gt;printStackTrace&lt;/span&gt;();
                } &lt;span class=&quot;kw&quot;&gt;finally&lt;/span&gt; {
                    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (lock != &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;)
                        lock.&lt;span class=&quot;fu&quot;&gt;unlock&lt;/span&gt;();
                }
            }
        };

        &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; Thread(task1).&lt;span class=&quot;fu&quot;&gt;start&lt;/span&gt;();
        &lt;span class=&quot;kw&quot;&gt;try&lt;/span&gt; {
            Thread.&lt;span class=&quot;fu&quot;&gt;sleep&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;300&lt;/span&gt;);
        } &lt;span class=&quot;kw&quot;&gt;catch&lt;/span&gt; (InterruptedException e) {
            e.&lt;span class=&quot;fu&quot;&gt;printStackTrace&lt;/span&gt;();
        }
        Runnable task2 = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; Runnable() {
            &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;run&lt;/span&gt;() {
                ServiceLock lock = &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;;
                &lt;span class=&quot;kw&quot;&gt;try&lt;/span&gt; {
                    lock = lockFactory.&lt;span class=&quot;fu&quot;&gt;getLock&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;testmmm/test&quot;&lt;/span&gt;);
                    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (!lock.&lt;span class=&quot;fu&quot;&gt;tryLock&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;2000&lt;/span&gt;, TimeUnit.&lt;span class=&quot;fu&quot;&gt;MILLISECONDS&lt;/span&gt;)){
                        System.&lt;span class=&quot;fu&quot;&gt;out&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;println&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;Thread2 unget lock&quot;&lt;/span&gt;);
                    }
                    lock.&lt;span class=&quot;fu&quot;&gt;lock&lt;/span&gt;();
                    System.&lt;span class=&quot;fu&quot;&gt;out&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;println&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;Thread2 getted lock&quot;&lt;/span&gt;);
                    System.&lt;span class=&quot;fu&quot;&gt;out&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;println&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;Thread2 running&quot;&lt;/span&gt;);
                    Thread.&lt;span class=&quot;fu&quot;&gt;sleep&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;3000&lt;/span&gt;);
                    System.&lt;span class=&quot;fu&quot;&gt;out&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;println&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;Thread2 run oven&quot;&lt;/span&gt;);
                } &lt;span class=&quot;kw&quot;&gt;catch&lt;/span&gt; (Exception e) {
                    e.&lt;span class=&quot;fu&quot;&gt;printStackTrace&lt;/span&gt;();
                } &lt;span class=&quot;kw&quot;&gt;finally&lt;/span&gt; {
                    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (lock != &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;)
                        lock.&lt;span class=&quot;fu&quot;&gt;unlock&lt;/span&gt;();
                }
            }
        };

        Runnable task3 = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; Runnable() {
            &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;run&lt;/span&gt;() {
                ServiceLock lock = &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;;
                &lt;span class=&quot;kw&quot;&gt;try&lt;/span&gt; {
                    lock = lockFactory.&lt;span class=&quot;fu&quot;&gt;getLock&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;testmmm/test&quot;&lt;/span&gt;);
                    lock.&lt;span class=&quot;fu&quot;&gt;lock&lt;/span&gt;();
                    System.&lt;span class=&quot;fu&quot;&gt;out&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;println&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;Thread3 getted lock&quot;&lt;/span&gt;);
                    System.&lt;span class=&quot;fu&quot;&gt;out&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;println&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;Thread3 running&quot;&lt;/span&gt;);
                    Thread.&lt;span class=&quot;fu&quot;&gt;sleep&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;4000&lt;/span&gt;);
                    System.&lt;span class=&quot;fu&quot;&gt;out&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;println&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;Thread3 run oven&quot;&lt;/span&gt;);
                } &lt;span class=&quot;kw&quot;&gt;catch&lt;/span&gt; (Exception e) {
                    e.&lt;span class=&quot;fu&quot;&gt;printStackTrace&lt;/span&gt;();
                } &lt;span class=&quot;kw&quot;&gt;finally&lt;/span&gt; {
                    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (lock != &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;)
                        lock.&lt;span class=&quot;fu&quot;&gt;unlock&lt;/span&gt;();
                }
            }
        };
        &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; Thread(task3).&lt;span class=&quot;fu&quot;&gt;start&lt;/span&gt;();
        &lt;span class=&quot;kw&quot;&gt;try&lt;/span&gt; {
            Thread.&lt;span class=&quot;fu&quot;&gt;sleep&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;300&lt;/span&gt;);
        } &lt;span class=&quot;kw&quot;&gt;catch&lt;/span&gt; (InterruptedException e) {
            e.&lt;span class=&quot;fu&quot;&gt;printStackTrace&lt;/span&gt;();
        }
        &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; Thread(task2).&lt;span class=&quot;fu&quot;&gt;start&lt;/span&gt;();



        &lt;span class=&quot;kw&quot;&gt;try&lt;/span&gt; {
            Thread.&lt;span class=&quot;fu&quot;&gt;sleep&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;20000&lt;/span&gt;);
        } &lt;span class=&quot;kw&quot;&gt;catch&lt;/span&gt; (InterruptedException e1) {
            e1.&lt;span class=&quot;fu&quot;&gt;printStackTrace&lt;/span&gt;();
        }
    }

    &lt;span class=&quot;fu&quot;&gt;@After&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;fini&lt;/span&gt;() {
    }
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
</description>
<pubDate>Tue, 12 Dec 2017 11:30:00 +0000</pubDate>
<dc:creator>liu_roy</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/liuroy/p/8029366.html</dc:identifier>
</item>
<item>
<title>深入理解javascript函数进阶系列第三篇——函数节流和函数防抖 - 小火柴的蓝色理想</title>
<link>http://www.cnblogs.com/xiaohuochai/p/8024563.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/xiaohuochai/p/8024563.html</guid>
<description>&lt;h2&gt;前面的话&lt;/h2&gt;
&lt;p&gt;　　javascript中的函数大多数情况下都是由用户主动调用触发的，除非是函数本身的实现不合理，否则一般不会遇到跟性能相关的问题。但在一些少数情况下，函数的触发不是由用户直接控制的。在这些场景下，函数有可能被非常频繁地调用，而造成大的性能问题。解决性能问题的处理办法就是函数节流和函数防抖。本文将详细介绍函数节流和函数防抖&lt;/p&gt;

&lt;h3&gt;常见场景&lt;/h3&gt;
&lt;p&gt;　　下面是函数被频繁调用的常见的几个场景&lt;/p&gt;
&lt;p&gt;　　1、mousemove事件。如果要实现一个拖拽功能，需要一路监听 mousemove 事件，在回调中获取元素当前位置，然后重置 dom 的位置来进行样式改变。如果不加以控制，每移动一定像素而触发的回调数量非常惊人，回调中又伴随着 DOM 操作，继而引发浏览器的重排与重绘，性能差的浏览器可能就会直接假死。&lt;/p&gt;
&lt;p&gt;　　2、window.onresize事件。为window对象绑定了resize事件，当浏览器窗口大小被拖动而改变的时候，这个事件触发的频率非常之高。如果在window.onresize事件函数里有一些跟DOM节点相关的操作，而跟DOM节点相关的操作往往是非常消耗性能的，这时候浏览器可能就会吃不消而造成卡顿现象&lt;/p&gt;
&lt;p&gt;　　3、射击游戏的 mousedown/keydown 事件（单位时间只能发射一颗子弹）&lt;/p&gt;
&lt;p&gt;　　4、搜索联想（keyup事件）&lt;/p&gt;
&lt;p&gt;　　5、监听滚动事件判断是否到页面底部自动加载更多（scroll事件）&lt;/p&gt;
&lt;p&gt;　　对于这些情况的解决方案就是函数节流（throttle）或函数去抖（debounce），核心其实就是限制某一个方法的频繁触发&lt;/p&gt;

&lt;h3&gt;函数防抖&lt;/h3&gt;
&lt;p&gt;　　函数防抖的原理是将即将被执行的函数用setTimeout延迟一段时间执行。对于正在执行的函数和新触发的函数冲突问题有两种处理，也分别对应了定时器管理的两种机制&lt;/p&gt;
&lt;p&gt;　　第一种是只要当前函数没有执行完成，任何新触发的函数都会被忽略，简易代码如下&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;function debounce(method, context) {
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;忽略新函数&lt;/span&gt;
  &lt;span&gt;if&lt;/span&gt;&lt;span&gt;(method.tId){
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
  }
  method.tId &lt;/span&gt;=&lt;span&gt; setTimeout(function() {
    method.call(context);
  }, &lt;/span&gt;&lt;span&gt;1000&lt;/span&gt;&lt;span&gt;);
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　第二种是只要有新触发的函数，就立即停止执行当前函数，转而执行新函数，简易代码如下&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;function debounce(method, context) {
 &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;停止当前函数&lt;/span&gt;
&lt;span&gt;  clearTimeout(method.tId);
  method.tId &lt;/span&gt;=&lt;span&gt; setTimeout(function() {&lt;/span&gt;
&lt;span&gt;    method.call(context);
  }, &lt;/span&gt;&lt;span&gt;1000&lt;/span&gt;&lt;span&gt;);
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　当然，不论是哪种处理，函数去抖的目的是让要执行的函数停止一段时间之后才执行&lt;/p&gt;
&lt;p&gt;　　下面是一个比较完整的防抖函数（debounce），该函数接受2个参数，第一个参数为需要被延迟执行的函数，第二个参数为延迟执行的时间&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; debounce =&lt;span&gt; function ( fn, interval ) {
  &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;  _self = fn,    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 保存需要被延迟执行的函数引用&lt;/span&gt;
      timer,    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 定时器&lt;/span&gt;
      firstTime = &lt;span&gt;true&lt;/span&gt;;    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 是否是第一次调用&lt;/span&gt;
  &lt;span&gt;return&lt;/span&gt;&lt;span&gt; function () {
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; args =&lt;span&gt; arguments,
    _me &lt;/span&gt;= &lt;span&gt;this&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; ( firstTime ) {    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 如果是第一次调用，不需延迟执行&lt;/span&gt;
&lt;span&gt;      _self.apply( me, args);
      &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; firstTime = &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
    }
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; ( timer ) {    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 如果定时器还在，说明前一次延迟执行还没有完成&lt;/span&gt;
      &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
    }
    timer &lt;/span&gt;= setTimeout(function () { &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 延迟一段时间执行&lt;/span&gt;
&lt;span&gt;      clearTimeout(timer); 
      timer &lt;/span&gt;= &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
      _self.apply(_me, args);
    }, interval &lt;/span&gt;|| &lt;span&gt;500&lt;/span&gt;&lt;span&gt; );
  };
};
window.onresize &lt;/span&gt;=&lt;span&gt; debounce(function(){ 
  console.log( &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt; );
}, &lt;/span&gt;&lt;span&gt;500&lt;/span&gt; );
&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;函数节流&lt;/h3&gt;
&lt;p&gt;　　函数节流使得连续的函数执行，变为固定时间段间断地执行。关于节流的实现，有两种主流的实现方式，一种是使用时间戳，一种是设置定时器&lt;/p&gt;
&lt;p&gt;【使用时间戳】&lt;/p&gt;
&lt;p&gt;　　触发事件时，取出当前的时间戳，然后减去之前的时间戳(最一开始值设为 0 )，如果大于设置的时间周期，就执行函数，然后更新时间戳为当前的时间戳，如果小于，就不执行&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;function throttle(func, wait) {
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; context, args;
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; previous = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; function() {
        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; now = +&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Date();
        context &lt;/span&gt;= &lt;span&gt;this&lt;/span&gt;&lt;span&gt;;
        args &lt;/span&gt;=&lt;span&gt; arguments;
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (now - previous &amp;gt;&lt;span&gt; wait) {
            func.apply(context, args);
            previous &lt;/span&gt;=&lt;span&gt; now;
        }
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;【使用定时器】&lt;/p&gt;
&lt;p&gt;　　触发事件时，设置一个定时器，再触发事件的时候，如果定时器存在，就不执行，直到定时器执行，然后执行函数，清空定时器，这样就可以设置下个定时器&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;function throttle(func, wait) {
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; timeout,args,context;
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; previous = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; function() {
        context &lt;/span&gt;= &lt;span&gt;this&lt;/span&gt;&lt;span&gt;;
        args &lt;/span&gt;=&lt;span&gt; arguments;
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;timeout) {
            timeout &lt;/span&gt;=&lt;span&gt; setTimeout(function(){
                timeout &lt;/span&gt;= &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
                func.apply(context, args)
            }, wait)
        }
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;数组分块&lt;/h3&gt;
&lt;p&gt;　　在前面关于函数节流和函数防抖的讨论中，提供了限制函数被频繁调用的解决方案。下面将遇到另外一个问题，某些函数确实是用户主动调用的，但因为一些客观的原因，这些函数会严重地影响页面性能&lt;/p&gt;
&lt;p&gt;　　一个例子是创建WebQQ的QQ好友列表。列表中通常会有成百上千个好友，如果一个好友用一个节点来表示，在页面中渲染这个列表的时候，可能要一次性往页面中创建成百上千个节点&lt;/p&gt;
&lt;p&gt;　　在短时间内往页面中大量添加DOM节点显然也会让浏览器吃不消，看到的结果往往就是浏览器的卡顿甚至假死。代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; ary =&lt;span&gt; [];
&lt;/span&gt;&lt;span&gt;for&lt;/span&gt; ( &lt;span&gt;var&lt;/span&gt; i = &lt;span&gt;1&lt;/span&gt;; i &amp;lt;= &lt;span&gt;1000&lt;/span&gt;; i++&lt;span&gt; ){
  ary.push( i );    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 假设 ary 装载了 1000 个好友的数据&lt;/span&gt;
&lt;span&gt;};
&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; renderFriendList =&lt;span&gt; function( data ){
  &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; ( &lt;span&gt;var&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;, l = data.length; i &amp;lt; l; i++&lt;span&gt; ){
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; div = document.createElement( &lt;span&gt;'&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt; );
    div.innerHTML &lt;/span&gt;=&lt;span&gt; i;
    document.body.appendChild( div );
  }
};
renderFriendList( ary );&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　这个问题的解决方案之一是数组分块技术，下面的timeChunk函数让创建节点的工作分批进行，比如把1秒钟创建1000个节点，改为每隔200毫秒创建8个节点&lt;/p&gt;
&lt;p&gt;　　数组分块是一种使用定时器分割循环的技术，为要处理的项目创建一个队列，然后使用定时器取出下一个要处理的项目进行处理，接着再设置另一个定时器&lt;/p&gt;
&lt;p&gt;　　在数组分块模式中，array变量本质上就是一个“待办事宜”列表，它包含了要处理的项目。使用shift()方法可以获取队列中下一个要处理的项目，然后将其传递给某个函数。如果在队列中还有其他项目，则设置另一个定时器，并通过arguments.callee调用同一个匿名函数&lt;/p&gt;
&lt;p&gt;　　数组分块的重要性在于它可以将多个项目的处理在执行队列上分开，在每个项目处理之后，给予其他的浏览器处理机会运行，这样就可能避免长时间运行脚本的错误。一旦某个函数需要花50ms以上的时间完成，那么最好看看能否将任务分割为一系列可以使用定时器的小任务&lt;/p&gt;
&lt;p&gt;　　下面是数组分块模式的简易代码&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;function chunk(array,process,context){
    setTimeout(function(){
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;取出下一个条目并处理&lt;/span&gt;
        &lt;span&gt;var&lt;/span&gt; item =&lt;span&gt; array.shift();
        process.call(context,item);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;若还有条目，再设置另一个定时器&lt;/span&gt;
        &lt;span&gt;if&lt;/span&gt;(array.length &amp;gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;){
            setTimeout(arguments.callee,&lt;/span&gt;&lt;span&gt;100&lt;/span&gt;&lt;span&gt;);
        }
    },&lt;/span&gt;&lt;span&gt;100&lt;/span&gt;&lt;span&gt;);    
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; data = [&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;2&lt;/span&gt;,&lt;span&gt;3&lt;/span&gt;,&lt;span&gt;4&lt;/span&gt;,&lt;span&gt;5&lt;/span&gt;,&lt;span&gt;6&lt;/span&gt;,&lt;span&gt;7&lt;/span&gt;,&lt;span&gt;8&lt;/span&gt;,&lt;span&gt;9&lt;/span&gt;,&lt;span&gt;0&lt;/span&gt;&lt;span&gt;];
function printValue(item){
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; div = document.getElementById(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;myDiv&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
    div.innerHTML &lt;/span&gt;+= item + &lt;span&gt;'&lt;/span&gt;&lt;span&gt;&amp;lt;br&amp;gt;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
}
chunk(data.concat(),printValue);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　下面是数组分块的详细代码，timeChunk函数接受3个参数，第1个参数是创建节点时需要用到的数据，第2个参数是封装了创建节点逻辑的函数，第3个参数表示每一批创建的节点数量&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; timeChunk =&lt;span&gt; function( ary, fn, count ){ 
  &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; obj,t;
  &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; len =&lt;span&gt; ary.length;
  &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; start =&lt;span&gt; function(){
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; ( &lt;span&gt;var&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; Math.min( count || &lt;span&gt;1&lt;/span&gt;, ary.length ); i++&lt;span&gt; ){ 
      &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; obj =&lt;span&gt; ary.shift();
      fn( obj );
    }
  };
  &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; function(){
    t &lt;/span&gt;=&lt;span&gt; setInterval(function(){
      &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; ( ary.length === &lt;span&gt;0&lt;/span&gt; ){ &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 如果全部节点都已经被创建好&lt;/span&gt;
        &lt;span&gt;return&lt;/span&gt;&lt;span&gt; clearInterval( t );
      }
      start();
    }, &lt;/span&gt;&lt;span&gt;200&lt;/span&gt; );    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 分批执行的时间间隔，也可以用参数的形式传入&lt;/span&gt;
&lt;span&gt;  };
};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　最后进行一些小测试，假设有1000个好友的数据，利用timeChunk函数，每一批只往页面中创建8个节点&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; ary =&lt;span&gt; [];
&lt;/span&gt;&lt;span&gt;for&lt;/span&gt; ( &lt;span&gt;var&lt;/span&gt; i = &lt;span&gt;1&lt;/span&gt;; i &amp;lt;= &lt;span&gt;1000&lt;/span&gt;; i++&lt;span&gt; ){ 
  ary.push( i );
};
&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; renderFriendList =&lt;span&gt; timeChunk( ary, function( n ){ 
  &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; div = document.createElement( &lt;span&gt;'&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt; ); 
  div.innerHTML &lt;/span&gt;=&lt;span&gt; n;
  document.body.appendChild( div );
}, &lt;/span&gt;&lt;span&gt;8&lt;/span&gt;&lt;span&gt; );
renderFriendList();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

</description>
<pubDate>Tue, 12 Dec 2017 10:37:00 +0000</pubDate>
<dc:creator>小火柴的蓝色理想</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/xiaohuochai/p/8024563.html</dc:identifier>
</item>
</channel>
</rss>