<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>数据管理 - 每天5分钟玩转 Docker 容器技术（147） - CloudMan</title>
<link>http://www.cnblogs.com/CloudMan6/p/8655279.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/CloudMan6/p/8655279.html</guid>
<description>&lt;p&gt;&lt;span&gt;本章将讨论 Kubernetes 如何管理存储资源。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;首先我们会学习 Volume，以及 Kubernetes 如何通过 Volume 为集群中的容器提供存储；然后我们会实践几种常用的 Volume 类型并理解它们各自的应用场景；最后，我们会讨论 Kubernetes 如何通过 Persistent Volume 和 Persistent Volume Claim 分离集群管理员与集群用户的职责，并实践 Volume 的静态供给和动态供给。&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;&lt;span&gt;Volume&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;本节我们讨论 Kubernetes 的存储模型 Volume，学习如何将各种持久化存储映射到容器。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;我们经常会说：容器和 Pod 是短暂的。&lt;br/&gt;其含义是它们的生命周期可能很短，会被频繁地销毁和创建。容器销毁时，保存在容器内部文件系统中的数据都会被清除。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;为了持久化保存容器的数据，可以使用 Kubernetes Volume。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Volume 的生命周期独立于容器，Pod 中的容器可能被销毁和重建，但 Volume 会被保留。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;本质上，Kubernetes Volume 是一个目录，这一点与 Docker Volume 类似。当 Volume 被 mount 到 Pod，Pod 中的所有容器都可以访问这个 Volume。Kubernetes Volume 也支持多种 backend 类型，包括 emptyDir、hostPath、GCE Persistent Disk、AWS Elastic Block Store、NFS、Ceph 等，完整列表可参考 &lt;/span&gt;&lt;a title=&quot;This link will take you away from steemit.com&quot; href=&quot;https://kubernetes.io/docs/concepts/storage/volumes/#types-of-volumes&quot; rel=&quot;nofollow noopener&quot;&gt;&lt;span&gt;https://kubernetes.io/docs/concepts/storage/volumes/#types-of-volumes&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Volume 提供了对各种 backend 的抽象，容器在使用 Volume 读写数据的时候不需要关心数据到底是存放在本地节点的文件系统中呢还是云硬盘上。对它来说，所有类型的 Volume 都只是一个目录。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;我们将从最简单的 emptyDir 开始学习 Kubernetes Volume。&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;&lt;span&gt;emptyDir&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;emptyDir 是最基础的 Volume 类型。正如其名字所示，一个 emptyDir Volume 是 Host 上的一个空目录。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;emptyDir Volume 对于容器来说是持久的，对于 Pod 则不是。当 Pod 从节点删除时，Volume 的内容也会被删除。但如果只是容器被销毁而 Pod 还在，则 Volume 不受影响。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;也就是说：&lt;span&gt;emptyDir Volume 的生命周期与 Pod 一致&lt;/span&gt;。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Pod 中的所有容器都可以共享 Volume，它们可以指定各自的 mount 路径。下面通过例子来实践 emptyDir，配置文件如下：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/775365/201803/775365-20180327061553636-1037216504.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;这里我们模拟了一个 producer-consumer 场景。Pod 有两个容器 &lt;/span&gt;&lt;code&gt;&lt;span&gt;producer&lt;/span&gt;&lt;/code&gt;&lt;span&gt;和 &lt;/span&gt;&lt;code&gt;&lt;span&gt;consumer&lt;/span&gt;&lt;/code&gt;&lt;span&gt;，它们共享一个 Volume。&lt;/span&gt;&lt;code&gt;&lt;span&gt;producer&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 负责往 Volume 中写数据，&lt;/span&gt;&lt;code&gt;&lt;span&gt;consumer&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 则是从 Volume 读取数据。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;① 文件最底部 &lt;/span&gt;&lt;code&gt;&lt;span&gt;volumes&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 定义了一个 &lt;/span&gt;&lt;code&gt;&lt;span&gt;emptyDir&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 类型的 Volume &lt;/span&gt;&lt;code&gt;&lt;span&gt;shared-volume&lt;/span&gt;&lt;/code&gt;&lt;span&gt;。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;② &lt;/span&gt;&lt;code&gt;&lt;span&gt;producer&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 容器将 &lt;/span&gt;&lt;code&gt;&lt;span&gt;shared-volume&lt;/span&gt;&lt;/code&gt;&lt;span&gt; mount 到 &lt;/span&gt;&lt;code&gt;&lt;span&gt;/producer_dir&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 目录。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;③ &lt;/span&gt;&lt;code&gt;&lt;span&gt;producer&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 通过 &lt;/span&gt;&lt;code&gt;&lt;span&gt;echo&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 将数据写到文件 &lt;/span&gt;&lt;code&gt;&lt;span&gt;hello&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 里。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;④ &lt;/span&gt;&lt;code&gt;&lt;span&gt;consumer&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 容器将 &lt;/span&gt;&lt;code&gt;&lt;span&gt;shared-volume&lt;/span&gt;&lt;/code&gt;&lt;span&gt; mount 到 &lt;/span&gt;&lt;code&gt;&lt;span&gt;/consumer_dir&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 目录。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;⑤ &lt;/span&gt;&lt;code&gt;&lt;span&gt;consumer&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 通过 &lt;/span&gt;&lt;code&gt;&lt;span&gt;cat&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 从文件 &lt;/span&gt;&lt;code&gt;&lt;span&gt;hello&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 读数据。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;执行如下命令创建 Pod：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/775365/201803/775365-20180327061607414-1874243335.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;code&gt;&lt;span&gt;kubectl logs&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 显示容器 &lt;/span&gt;&lt;code&gt;&lt;span&gt;consumer&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 成功读到了 &lt;/span&gt;&lt;code&gt;&lt;span&gt;producer&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 写入的数据，验证了两个容器共享 emptyDir Volume。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;因为 emptyDir 是 Docker Host 文件系统里的目录，其效果相当于执行了 &lt;/span&gt;&lt;code&gt;&lt;span&gt;docker run -v /producer_dir&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 和 &lt;/span&gt;&lt;code&gt;&lt;span&gt;docker run -v /consumer_dir&lt;/span&gt;&lt;/code&gt;&lt;span&gt;。通过 &lt;/span&gt;&lt;code&gt;&lt;span&gt;docker inspect&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 查看容器的详细配置信息，我们发现两个容器都 mount 了同一个目录：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/775365/201803/775365-20180327061621660-601676997.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/775365/201803/775365-20180327061633139-1950536605.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;这里 &lt;/span&gt;&lt;code&gt;&lt;span&gt;/var/lib/kubelet/pods/3e6100eb-a97a-11e7-8f72-0800274451ad/volumes/kubernetes.io~empty-dir/shared-volume&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 就是 emptyDir 在 Host 上的真正路径。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;emptyDir 是 Host 上创建的临时目录，其优点是能够方便地为 Pod 中的容器提供共享存储，不需要额外的配置。但它不具备持久性，如果 Pod 不存在了，emptyDir 也就没有了。根据这个特性，emptyDir 特别适合 Pod 中的容器需要临时共享存储空间的场景，比如前面的生产者消费者用例。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;下一节我们学习 hostPath Volume。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;书籍：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;1.《每天5分钟玩转Kubernetes》&lt;br/&gt;&lt;a href=&quot;https://item.jd.com/26225745440.html&quot;&gt;https://item.jd.com/26225745440.html&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;2.《每天5分钟玩转Docker容器技术》&lt;br/&gt;&lt;a href=&quot;https://item.jd.com/16936307278.html&quot;&gt;https://item.jd.com/16936307278.html&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;3.《每天5分钟玩转OpenStack》&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;a href=&quot;https://item.jd.com/12086376.html&quot;&gt;https://item.jd.com/12086376.html&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img title=&quot;https://i.imgsafe.org/68/68da21ce15.png&quot; src=&quot;https://i.imgsafe.org/68/68da21ce15.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Tue, 27 Mar 2018 20:02:00 +0000</pubDate>
<dc:creator>CloudMan</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/CloudMan6/p/8655279.html</dc:identifier>
</item>
<item>
<title>如何让shell脚本自杀 - 骏马金龙</title>
<link>http://www.cnblogs.com/f-ck-need-u/p/8661501.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/f-ck-need-u/p/8661501.html</guid>
<description>&lt;p&gt;有些时候我们写的shell脚本中有一些后台任务，当脚本的流程已经执行到结尾处并退出时，这些后台任务会直接挂靠在init/systemd进程下，而不会随着脚本退出而停止。&lt;/p&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
[root@mariadb ~&lt;span&gt;]# cat test1.sh 
#&lt;/span&gt;!/bin/&lt;span&gt;bash
echo $BASHPID
sleep &lt;/span&gt;&lt;span&gt;50&lt;/span&gt; &amp;amp;&lt;span&gt;

[root@mariadb &lt;/span&gt;~]# ps -elf |&lt;span&gt; grep slee[p]
&lt;/span&gt;&lt;span&gt;0&lt;/span&gt; S root      &lt;span&gt;10806&lt;/span&gt;      &lt;span&gt;1&lt;/span&gt;  &lt;span&gt;0&lt;/span&gt;  &lt;span&gt;80&lt;/span&gt;   &lt;span&gt;0&lt;/span&gt; - &lt;span&gt;26973&lt;/span&gt; hrtime &lt;span&gt;19&lt;/span&gt;:&lt;span&gt;26&lt;/span&gt; pts/&lt;span&gt;1&lt;/span&gt;    &lt;span&gt;00&lt;/span&gt;:&lt;span&gt;00&lt;/span&gt;:&lt;span&gt;00&lt;/span&gt; sleep &lt;span&gt;50&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;从结果中可以看到，脚本退出后，sleep进程的父进程变为了1，也就是挂在了init/systemd进程下。&lt;/p&gt;
&lt;p&gt;这时我们可以在脚本中直接使用kill命令杀掉sleep进程。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
[root@mariadb ~&lt;span&gt;]# cat test1.sh 
#&lt;/span&gt;!/bin/&lt;span&gt;bash
echo $BASHPID
sleep &lt;/span&gt;&lt;span&gt;50&lt;/span&gt; &amp;amp;&lt;span&gt;
kill $&lt;/span&gt;!
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;但是，如果这个sleep进程是在循环中，那就麻烦了。&lt;/p&gt;
&lt;p&gt;例如下面的例子，杀掉sleep、或者杀掉脚本自身进程、或者让脚本自动退出、甚至exec退出当前脚本shell都是无效的。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
[root@mariadb ~&lt;span&gt;]# cat test1.sh 
#&lt;/span&gt;!/bin/&lt;span&gt;bash
echo $BASHPID

&lt;/span&gt;&lt;span&gt;while&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;;&lt;span&gt;do&lt;/span&gt;&lt;span&gt;
    sleep &lt;/span&gt;&lt;span&gt;50&lt;/span&gt;&lt;span&gt;
    echo &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;
done &lt;/span&gt;&amp;amp;&lt;span&gt;

killall sleep
kill $BASHPID&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;因为sleep在while中循环，杀了sleep后，稍后又会生成一个sleep。而杀掉脚本自身、或者让脚本自动退出、或者使用exec，由于有循环存在，它都会重新fork一个脚本进程出来。注意，这时循环的进程不会挂在init/systemd进程下，而是挂在一个新的脚本进程之下。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
[root@mariadb ~]# ./&lt;span&gt;test1.sh 
&lt;/span&gt;&lt;span&gt;10859&lt;/span&gt;&lt;span&gt;
.&lt;/span&gt;/test1.sh: line &lt;span&gt;7&lt;/span&gt;: &lt;span&gt;10862&lt;/span&gt; Terminated              sleep &lt;span&gt;50&lt;/span&gt;&lt;span&gt;
Terminated
&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;
[root@mariadb &lt;/span&gt;~]# pstree -p |&lt;span&gt; grep sleep
           &lt;/span&gt;|-test1.sh(&lt;span&gt;10860&lt;/span&gt;)---sleep(&lt;span&gt;10863&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;从结果中可以看到test1.sh的10859进程被自身杀掉了，但是重新生成了一个10860的test1.sh进程，且不断生成的sleep进程也总是在test1.sh下。&lt;/p&gt;
&lt;p&gt;除非我们手动杀掉新生成的test1.sh，否则这个脚本将无限循环下去。但是，这不是很麻烦吗？&lt;/p&gt;
&lt;p&gt;那么如何实现&quot;脚本自杀&quot;？其实很简单，只要在脚本退出前，使用killall命令杀掉脚本进程即可。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
[root@mariadb ~&lt;span&gt;]# cat test1.sh 
#&lt;/span&gt;!/bin/&lt;span&gt;bash
echo $BASHPID

&lt;/span&gt;&lt;span&gt;while&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;;&lt;span&gt;do&lt;/span&gt;&lt;span&gt;
    sleep &lt;/span&gt;&lt;span&gt;50&lt;/span&gt;&lt;span&gt;
    echo &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;
done &lt;/span&gt;&amp;amp;&lt;span&gt;

killall `basename $&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;`
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这样，在脚本退出前，内核准备fork新的test1.sh进程接管后台的while内的sleep进程时，killall会将这个新的test1.sh也杀掉，这样后台进程就随着test1.sh也一起消逝了。&lt;/p&gt;
&lt;p&gt;这里的关键点是，&lt;strong&gt;&lt;span&gt;当脚本中有循环的后台任务时，脚本退出有一个过程：(1)脚本准备退出--&amp;gt;(2)内核fork新的脚本进程用来接管脚本内的后台循环任务--&amp;gt;(3)新脚本进程接管后台任务--&amp;gt;(4)旧脚本进程消逝。&lt;/span&gt;&lt;/strong&gt;而killall正好赶在第(3)步之前将新旧脚本进程都杀掉，这使得脚本进程成功自杀。&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;a href=&quot;http://www.cnblogs.com/f-ck-need-u/p/7048359.html&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;回到Linux系列文章大纲：http://www.cnblogs.com/f-ck-need-u/p/7048359.html&lt;/span&gt;&lt;/a&gt;&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;strong&gt;&lt;a href=&quot;http://www.cnblogs.com/f-ck-need-u/p/7576137.html&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;回到网站架构系列文章大纲：http://www.cnblogs.com/f-ck-need-u/p/7576137.html&lt;/span&gt;&lt;/a&gt;&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;strong&gt;&lt;a href=&quot;http://www.cnblogs.com/f-ck-need-u/p/7586194.html&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;回到数据库系列文章大纲：http://www.cnblogs.com/f-ck-need-u/p/7586194.html&lt;/span&gt;&lt;/a&gt;&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;strong&gt;&lt;a href=&quot;http://www.cnblogs.com/f-ck-need-u/p/8661501.html&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;转载请注明出处：http://www.cnblogs.com/f-ck-need-u/p/8661501.html&lt;/span&gt;&lt;/a&gt;&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;注：若您觉得这篇文章还不错请点击右下角推荐，您的支持能激发作者更大的写作热情，非常感谢！&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Tue, 27 Mar 2018 18:32:00 +0000</pubDate>
<dc:creator>骏马金龙</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/f-ck-need-u/p/8661501.html</dc:identifier>
</item>
<item>
<title>Hibernate学习（2）-   hibernate.cfg.xml详解 - _Json</title>
<link>http://www.cnblogs.com/JsonShare/p/8647559.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/JsonShare/p/8647559.html</guid>
<description>&lt;p&gt;1：主配置文件主要分为三部分：&lt;br/&gt;　　　　注意：通常情况下，一个session-factory节点代表一个数据库；&lt;br/&gt;　　　　1.1：第一部分&lt;br/&gt;　　　　　　　数据库连接部分，注意&quot;hibernate.connection.driver_class&quot;中间的 _；&lt;br/&gt;　　　　1.2：第二部分&lt;br/&gt;　　　　　　　其他相关配置，包含打印sql语句，格式化sql语句，创建数据表或者更新数据表等等&lt;br/&gt;　　　　1.3：第三部分&lt;br/&gt;　　　　　　　加载所有的映射；&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE hibernate-configuration PUBLIC
    &quot;-//Hibernate/Hibernate Configuration DTD 3.0//EN&quot;
    &quot;http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;hibernate-configuration&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;session-factory&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 第一部分:数据连接配置 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;connection.driver_class&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;com.mysql.jdbc.Driver&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;connection.url&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;jdbc:mysql://localhost:3306/hibernate_test&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;connection.username&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;json&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;connection.password&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;123456&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        
        
        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 第二部分：其他相关配置 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 数据库方言  - 配置hibernate方言，可针对特定的数据库优化。  &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;dialect&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.hibernate.dialect.MySQL5Dialect&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 是否在运行时候sql语句输出到控制台，编码阶段便于测试的。（默认设置为true）&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;show_sql&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;true&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 输出在控制台sql语句是否进行格式化，便于阅读。（默认设置为true） &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;format_sql&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;true&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 
            可帮助由java代码生成数据库脚本，进而生成具体表结构。如：create/update/create-drop/validate
                create： 每次都重新建表，原来的表删除，同时数据全部清楚重新插入数据。（每次加载hibernate，重新创建数据库表结构，这就是导致数据库表数据丢失的原因。）  
                create-drop： 每次在创建sessionFactory时执行创建表，当调用sessionFactory的close方法的时候，删除表       (在实际项目中不用)
                update: 只是根据映射文件去和数据库中的表对应起来，如果不一致，就更新表的结构
                validate： 加载hibernate时，验证创建数据库表结构，如果是不同的话则不创建表。
                
            PS:
                1.请慎重使用 hbm2ddl.auto 此参数，没必要就不要随便用。  
                2.如果发现数据库表丢失，请检查hibernate.hbm2ddl.auto的配置  
        &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;hbm2ddl.auto&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;update&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        
        
        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 第三部分:加载所有的映射（*.hbm.xml） &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;mapping &lt;/span&gt;&lt;span&gt;resource&lt;/span&gt;&lt;span&gt;=&quot;com/demo/pojo/User.hbm.xml&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;mapping&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;session-factory&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;hibernate-configuration&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;PS：原文地址  &lt;a title=&quot;http://www.cnblogs.com/JsonShare/p/8647559.html&quot; href=&quot;http://www.cnblogs.com/JsonShare/p/8647559.html&quot; target=&quot;_blank&quot;&gt;http://www.cnblogs.com/JsonShare/p/8647559.html&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

</description>
<pubDate>Tue, 27 Mar 2018 15:46:00 +0000</pubDate>
<dc:creator>_Json</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/JsonShare/p/8647559.html</dc:identifier>
</item>
<item>
<title>Hibernate学习（1）-  初识 - _Json</title>
<link>http://www.cnblogs.com/JsonShare/p/8647269.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/JsonShare/p/8647269.html</guid>
<description>&lt;h2&gt;一、概念引入&lt;/h2&gt;
&lt;p&gt;1、持久化：&lt;/p&gt;
&lt;p&gt;　　狭义概念：数据存储在物理介质不会丢失。&lt;/p&gt;
&lt;p&gt;　　广义概念：对数据的CRUD操作都叫做持久化。&lt;/p&gt;
&lt;p&gt;2、加载： hibernate里，数据从数据库中加载到session。&lt;/p&gt;
&lt;p&gt;3、ORM -- Object Relation Mapping&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/633261/201803/633261-20180325220047132-1160635282.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;好处：&lt;/p&gt;
&lt;p&gt;　　解决阻抗不匹配：对象与关系数据库不匹配。&lt;/p&gt;
&lt;p&gt;　　没有侵入性：在代码中不用去继承或者实现hibernate类或实现hibernate提供的接口。&lt;/p&gt;
&lt;p&gt;　　hibernate：一个ORM的轻量级框架，解决持久化问题，是程序员可以从编写复杂的JDBC工作中解放，专注于业务，提高程序员的开发效率。&lt;/p&gt;
&lt;h2&gt;二、第一个Hibernate程序&lt;/h2&gt;
&lt;p&gt;1、资源包介绍&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/633261/201803/633261-20180325224237450-505284637.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;　documentation ：相关文档&lt;/li&gt;
&lt;li&gt;　lib ：相关的jar包&lt;/li&gt;
&lt;li&gt;　project ：相关资源文件、模板文件、源码等&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;2、搭建hibernate环境&lt;br/&gt;a）相关jar包 （required下的jar）&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/633261/201803/633261-20180325224351710-163639583.png&quot; alt=&quot;&quot;/&gt;               &lt;img src=&quot;https://images2018.cnblogs.com/blog/633261/201803/633261-20180327222213893-1115469119.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;补充一点：hibernate所处的位置关系：&lt;/p&gt;
&lt;p&gt;hibernate.cfg.xml 主要是配置信息&lt;br/&gt;*.hbm.xml 实体与表的映射关系&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/633261/201803/633261-20180325224511924-868814313.png&quot; alt=&quot;&quot;/&gt;   &lt;img src=&quot;https://images2018.cnblogs.com/blog/633261/201803/633261-20180325224555369-752749102.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;b）添加配置文件（hibernate.cfg.xml）&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE hibernate-configuration PUBLIC
    &quot;-//Hibernate/Hibernate Configuration DTD 3.0//EN&quot;
    &quot;http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;hibernate-configuration&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;session-factory&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 第一部分:数据连接配置 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;connection.driver_class&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;com.mysql.jdbc.Driver&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;connection.url&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;jdbc:mysql://localhost:3306/hibernate_test&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;connection.username&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;json&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;connection.password&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;123456&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        
        
        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 第二部分：其他相关配置 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 数据库方言  - 配置hibernate方言，可针对特定的数据库优化。  &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;dialect&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.hibernate.dialect.MySQL5Dialect&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 是否在运行时候sql语句输出到控制台，编码阶段便于测试的。（默认设置为true）&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;show_sql&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;true&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 输出在控制台sql语句是否进行格式化，便于阅读。（默认设置为true） &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;format_sql&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;true&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 
            可帮助由java代码生成数据库脚本，进而生成具体表结构。如：create/update/create-drop/validate
                create： 每次都重新建表，原来的表删除，同时数据全部清楚重新插入数据。（每次加载hibernate，重新创建数据库表结构，这就是导致数据库表数据丢失的原因。）  
                create-drop： 每次在创建sessionFactory时执行创建表，当调用sessionFactory的close方法的时候，删除表       (在实际项目中不用)
                update: 只是根据映射文件去和数据库中的表对应起来，如果不一致，就更新表的结构
                validate： 加载hibernate时，验证创建数据库表结构，如果是不同的话则不创建表。
                
            PS:
                1.请慎重使用 hbm2ddl.auto 此参数，没必要就不要随便用。  
                2.如果发现数据库表丢失，请检查hibernate.hbm2ddl.auto的配置  
        &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;hbm2ddl.auto&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;update&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;session-factory&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;hibernate-configuration&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt; c）创建数据库&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;CREATE&lt;/span&gt; &lt;span&gt;TABLE&lt;/span&gt; `&lt;span&gt;user&lt;/span&gt;&lt;span&gt;` (
  `id` &lt;/span&gt;&lt;span&gt;bigint&lt;/span&gt;(&lt;span&gt;20&lt;/span&gt;) &lt;span&gt;NOT&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt;&lt;span&gt; AUTO_INCREMENT,
  `name` &lt;/span&gt;&lt;span&gt;varchar&lt;/span&gt;(&lt;span&gt;255&lt;/span&gt;) &lt;span&gt;DEFAULT&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt;&lt;span&gt;,
  `pwd` &lt;/span&gt;&lt;span&gt;varchar&lt;/span&gt;(&lt;span&gt;255&lt;/span&gt;) &lt;span&gt;DEFAULT&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt;&lt;span&gt;,
  &lt;/span&gt;&lt;span&gt;PRIMARY&lt;/span&gt; &lt;span&gt;KEY&lt;/span&gt;&lt;span&gt; (`id`)
) ENGINE&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;InnoDB &lt;span&gt;DEFAULT&lt;/span&gt; CHARSET&lt;span&gt;=&lt;/span&gt;utf8;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;d）创建实体对象&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.demo.pojo;

&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; User {
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; Long id;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String name;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String pwd;
    
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; Long getId() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; id;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setId(Long id) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.id =&lt;span&gt; id;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getName() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; name;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setName(String name) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.name =&lt;span&gt; name;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getPwd() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; pwd;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setPwd(String pwd) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.pwd =&lt;span&gt; pwd;
    }
    
    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String toString() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &quot;id=&quot; + id + &quot;, name=&quot; + name + &quot;, pwd=&quot; +&lt;span&gt; pwd;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;e）编辑*.hbm.xml文件&lt;/p&gt;
&lt;p&gt;文件名一般为实体类User对应的名称 User.hbm.xml&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;?&lt;/span&gt;&lt;span&gt;xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;?&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE hibernate-mapping PUBLIC
    &quot;-//Hibernate/Hibernate Mapping DTD 3.0//EN&quot;
    &quot;http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;hibernate-mapping &lt;/span&gt;&lt;span&gt;package&lt;/span&gt;&lt;span&gt;=&quot;org.hibernate.test.cache.infinispan.functional.entities&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;class &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;com.demo.pojo.User&quot;&lt;/span&gt;&lt;span&gt; table&lt;/span&gt;&lt;span&gt;=&quot;user&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;id &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;id&quot;&lt;/span&gt;&lt;span&gt;  type&lt;/span&gt;&lt;span&gt;=&quot;java.lang.Long&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 主键生成策略 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;generator &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;identity&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt; &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;  自增 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 实体类属性 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;name&quot;&lt;/span&gt;&lt;span&gt; type&lt;/span&gt;&lt;span&gt;=&quot;java.lang.String&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;pwd&quot;&lt;/span&gt;&lt;span&gt; type&lt;/span&gt;&lt;span&gt;=&quot;java.lang.String&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;        
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;hibernate-mapping&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;f）测试&lt;br/&gt;前提：将*.hml.xml文件 加入到hibernate.cfg.xml中&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE hibernate-configuration PUBLIC
    &quot;-//Hibernate/Hibernate Configuration DTD 3.0//EN&quot;
    &quot;http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;hibernate-configuration&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;session-factory&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 第一部分:数据连接配置 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;connection.driver_class&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;com.mysql.jdbc.Driver&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;connection.url&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;jdbc:mysql://localhost:3306/hibernate_test&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;connection.username&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;json&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;connection.password&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;123456&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        
        
        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 第二部分：其他相关配置 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 数据库方言  - 配置hibernate方言，可针对特定的数据库优化。  &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;dialect&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.hibernate.dialect.MySQL5Dialect&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 是否在运行时候sql语句输出到控制台，编码阶段便于测试的。（默认设置为true）&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;show_sql&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;true&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 输出在控制台sql语句是否进行格式化，便于阅读。（默认设置为true） &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;format_sql&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;true&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 
            可帮助由java代码生成数据库脚本，进而生成具体表结构。如：create/update/create-drop/validate
                create： 每次都重新建表，原来的表删除，同时数据全部清楚重新插入数据。（每次加载hibernate，重新创建数据库表结构，这就是导致数据库表数据丢失的原因。）  
                create-drop： 每次在创建sessionFactory时执行创建表，当调用sessionFactory的close方法的时候，删除表       (在实际项目中不用)
                update: 只是根据映射文件去和数据库中的表对应起来，如果不一致，就更新表的结构
                validate： 加载hibernate时，验证创建数据库表结构，如果是不同的话则不创建表。
                
            PS:
                1.请慎重使用 hbm2ddl.auto 此参数，没必要就不要随便用。  
                2.如果发现数据库表丢失，请检查hibernate.hbm2ddl.auto的配置  
        &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;hbm2ddl.auto&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;update&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        
        
        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 第三部分:加载所有的映射（*.hbm.xml） &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;mapping &lt;/span&gt;&lt;span&gt;resource&lt;/span&gt;&lt;span&gt;=&quot;com/demo/pojo/User.hbm.xml&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;mapping&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;session-factory&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;hibernate-configuration&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;测试类：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.demo.test;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.hibernate.Session;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.hibernate.SessionFactory;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.hibernate.Transaction;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.hibernate.boot.MetadataSources;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.hibernate.boot.registry.StandardServiceRegistry;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.hibernate.boot.registry.StandardServiceRegistryBuilder;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.junit.jupiter.api.Test;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.demo.pojo.User;

&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; QueryTest {

    @Test
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; connectTest() {
        &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;
        //1、新建Configuration对象 (Configuration管理加载配置文件)
        Configuration config = new Configuration().configure();
        //2、通过configuration得到SessionFactory对象
        //3、通过SessionFactory得到Session对象
        //hibernate3.x 中的写法
        SessionFactory session = config.buildSessionFactory();
        
        //hibernate4.3之前 ~~ 4.0
        ServiceRegistry serviceRegistry = new ServiceRegistryBuilder().applySettings(config.getProperties()).buildServiceRegistry();
        SessionFactory sessionFactory = config.buildSessionFactory(serviceRegistry);
        Session session = sessionFactory.openSession();
    
        //hibernate4.3  其中的一种 获取SessionFactory的方法
        ServiceRegistry serviceRegistry = new StandardServiceRegistryBuilder().applySettings(config.getProperties()).build();
        SessionFactory sessionFactory = config.buildSessionFactory(serviceRegistry);
        Session session = sessionFactory.openSession(); 
        &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;

        &lt;span&gt;//&lt;/span&gt;&lt;span&gt;Hibernate5.1 的获取SessionFactory的方法&lt;/span&gt;
        StandardServiceRegistry serviceRegistry = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; StandardServiceRegistryBuilder().configure().build();
        SessionFactory sessionFactory &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; MetadataSources(serviceRegistry).buildMetadata().buildSessionFactory();
        Session session &lt;/span&gt;=&lt;span&gt; sessionFactory.openSession();
        
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;4、通过Session得到Transaction对象 (两种写法)
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;Transaction transaction = session.getTransaction();
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;transaction.begin();&lt;/span&gt;
        Transaction transaction =&lt;span&gt; session.beginTransaction();
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;5、保存数据&lt;/span&gt;
        User user = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; User();
        user.setName(&lt;/span&gt;&quot;张三&quot;&lt;span&gt;);
        user.setPwd(&lt;/span&gt;&quot;123456&quot;&lt;span&gt;);
        session.save(user);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;6、提交事务&lt;/span&gt;
&lt;span&gt;        transaction.commit();
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;7、关闭Session&lt;/span&gt;
&lt;span&gt;        session.close();
    }
    
    @Test
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; queryTest() {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;Hibernate5.1 的获取SessionFactory的方法&lt;/span&gt;
        StandardServiceRegistry serviceRegistry = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; StandardServiceRegistryBuilder().configure().build();
        SessionFactory sessionFactory &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; MetadataSources(serviceRegistry).buildMetadata().buildSessionFactory();
        Session session &lt;/span&gt;=&lt;span&gt; sessionFactory.openSession();
        
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;5、保存数据&lt;/span&gt;
        User user = session.get(User.&lt;span&gt;class&lt;/span&gt;, 8L&lt;span&gt;);
        System.out.println(user);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;6、提交事务
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;7、关闭Session&lt;/span&gt;
&lt;span&gt;        session.close();
    }
    
    @Test
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; saveTest() {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;Hibernate5.1 的获取SessionFactory的方法&lt;/span&gt;
        StandardServiceRegistry serviceRegistry = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; StandardServiceRegistryBuilder().configure().build();
        SessionFactory sessionFactory &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; MetadataSources(serviceRegistry).buildMetadata().buildSessionFactory();
        Session session &lt;/span&gt;=&lt;span&gt; sessionFactory.openSession();
        
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;4、通过Session得到Transaction对象&lt;/span&gt;
        Transaction transaction =&lt;span&gt; session.beginTransaction();
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;5、保存数据&lt;/span&gt;
        User user = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; User();
        user.setName(&lt;/span&gt;&quot;张三&quot;&lt;span&gt;);
        user.setPwd(&lt;/span&gt;&quot;123456&quot;&lt;span&gt;);
        session.save(user);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;6、提交事务&lt;/span&gt;
&lt;span&gt;        transaction.commit();
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;7、关闭Session&lt;/span&gt;
&lt;span&gt;        session.close();
    }

}&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;PS:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;&lt;span&gt;SessionFactroy对象： 是一个session工厂，是一个重量级的对象，在一个应用中最好也是单例的，是一个线程安全的，属于进程级的对象。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;Session对象：使用hibernate进行数据库操作，主要使用session。session可以理解为对connction对象的一个包装。session对象中提供了对数据库的CRUD操作，Session是一个线程不安全的对象，生命周期很短暂，一般和事务一一对应。Session又称为hibernate的一级缓存。Session又是Transaction对象的工厂。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;Transaction对象：事务管理对象，通过Session获取该对象。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;Query 对象： 条件查询&lt;/span&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;PS：源码地址   &lt;strong&gt;&lt;a title=&quot;https://github.com/JsonShare/hibernate-demo&quot; href=&quot;https://github.com/JsonShare/hibernate-demo&quot; target=&quot;_blank&quot;&gt;https://github.com/JsonShare/hibernate-demo&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;PS：原文地址  &lt;a title=&quot;http://www.cnblogs.com/JsonShare/p/8647269.html&quot; href=&quot;http://www.cnblogs.com/JsonShare/p/8647269.html&quot; target=&quot;_blank&quot;&gt; http://www.cnblogs.com/JsonShare/p/8647269.html&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

</description>
<pubDate>Tue, 27 Mar 2018 15:44:00 +0000</pubDate>
<dc:creator>_Json</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/JsonShare/p/8647269.html</dc:identifier>
</item>
<item>
<title>JVM学习六：JVM之类加载器之双亲委派机制 - pony1223</title>
<link>http://www.cnblogs.com/pony1223/p/8654678.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/pony1223/p/8654678.html</guid>
<description>&lt;p&gt;&lt;span&gt;前面我们知道类加载有系统自带的3种加载器，也有自定义的加载器，那么这些加载器之间的关系是什么，已经在加载类的时候，谁去加载呢？这节，我们将进行讲解。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;一、双亲委派机制&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/401339/201803/401339-20180326223226827-1656372278.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;JVM的ClassLoader采用的是树形结构，除了BootstrapClassLoader以外？每个ClassLoader都会有一个parentClassLoader，用户自定义的ClassLoader默认的parentClassLoader是SystemClassLoader，当然你可以自己指定需要用哪一个ClassLoader的实例，我们来看他的API：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/401339/201803/401339-20180326223328017-1478716917.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;默认的无参构造方法使用的是SystemClassLoader，你可以通过传入一个ClassLoader的实例来指定他的父类加载器。&lt;span&gt;这里强调一点，很多人认为各个父子类加载器之间是继承关系，这里澄清一下，父子类加载器之间是组合关系，子类类加载器会含有一个parentClassLoader的对象，类加载的时候通常会按照树形结构的原则来进行，也就是说，首先是从parentClassLoader中尝试进行加载，当parent无法进行加载时，再从当前的类加载器进行加载，以此类推。JVM会保证一个类在同一个ClassLoader中只会被加载一次。&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;ClassLoader抽象类为我们定义了一系列的关键的方法，下来让我们来看一下&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;strong&gt;1、loadClass方法&lt;/strong&gt;，&lt;strong&gt;此方法用来加载指定名字的类&lt;/strong&gt;，ClassLoader会先从已加载的类中寻找，如果没有，则使用父加载器进行加载，如果加载成功则加载，否则从当前的类加载器中进行加载，如果还没有找到该类的class文件则会抛出异常ClassNotFoundException&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/401339/201803/401339-20180326223510938-282595648.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;如果该类需要链接，则通过resolveClass进行链接。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;2、defineClass，此方法用来将二进制的字节码转换为Class对象&lt;/strong&gt;，这个对类的自定义加载非常重要，当然前文我们已经说了，当类的二进制文件被加载到内存之后，要进行语法分析，语义分析等一系列的验证，如果不符合JVM规范，则抛出ClassFormateError错误，如果生成的类名和字节码中的不一致，则抛出NoClassDefFoundException，如果加载的class是受保护的、采用不同的标签名的，或者一java.*开头的，则抛出SecurityException，如果要加载的class在之前已经被加载过，则直接抛出LinkageError。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/401339/201803/401339-20180326223644906-1637114492.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;3、resolveClass，此方法完成Class的链接，如果链接过则直接返回&lt;/strong&gt;。当Java开发人员调用Class.forName来获取一个class对象的时候，JVM会从方法栈上寻找第一个ClassLoader，通常也就是执行Class.forName的ClassLoader，并使用这个ClassLoader来加载此类。JVM为了保护加载、执行的类的安全，不允许ClassLoader直接卸载加载了的类，只有JVM才可以卸载，在SUN的JDK中，只有ClassLoader没有 被引用的时候，次ClassLoader加载的类才会被卸载！&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/401339/201803/401339-20180326223801874-950780044.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;附：JDK中ClassLoader的部分源码&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span lang=&quot;EN-US&quot;&gt;1、&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;构造函数&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;protected&lt;/span&gt;&lt;span&gt; ClassLoader(ClassLoader parent) {
    SecurityManager security &lt;/span&gt;=&lt;span&gt; System.getSecurityManager();
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (security != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
        security.checkCreateClassLoader();
    }
    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.parent =&lt;span&gt; parent;
    initialized &lt;/span&gt;= &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
}
    &lt;/span&gt;&lt;span&gt;protected&lt;/span&gt;&lt;span&gt; ClassLoader() {
    SecurityManager security &lt;/span&gt;=&lt;span&gt; System.getSecurityManager();
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (security != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
        security.checkCreateClassLoader();
    }
    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.parent =&lt;span&gt; getSystemClassLoader();
    initialized &lt;/span&gt;= &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;&lt;span lang=&quot;EN-US&quot;&gt;2&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;、&lt;/strong&gt;&lt;strong&gt;&lt;span lang=&quot;EN-US&quot;&gt;loadClass&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; Class&amp;lt;?&amp;gt; loadClass(String name) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; ClassNotFoundException {
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; loadClass(name, &lt;span&gt;false&lt;/span&gt;&lt;span&gt;);
    }
    &lt;/span&gt;&lt;span&gt;protected&lt;/span&gt; &lt;span&gt;synchronized&lt;/span&gt; Class&amp;lt;?&amp;gt; loadClass(String name, &lt;span&gt;boolean&lt;/span&gt;&lt;span&gt; resolve)
    &lt;/span&gt;&lt;span&gt;throws&lt;/span&gt;&lt;span&gt; ClassNotFoundException
    {
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; First, check if the class has already been loaded&lt;/span&gt;
    Class c =&lt;span&gt; findLoadedClass(name);
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (c == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
        &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
       &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (parent != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
           c &lt;/span&gt;= parent.loadClass(name, &lt;span&gt;false&lt;/span&gt;&lt;span&gt;);
       } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
           c &lt;/span&gt;=&lt;span&gt; findBootstrapClass0(name);
       }
        } &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (ClassNotFoundException e) {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; If still not found, then invoke findClass in order
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; to find the class.&lt;/span&gt;
            c =&lt;span&gt; findClass(name);
        }
    }
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (resolve) {
        resolveClass(c);
    }
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; c;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;类的这种加载机制我们称之为父委托加载机制，&lt;span&gt;父委托机制的优点就是能够提高软件系统的安全性&lt;/span&gt;。因为在此机制下，用户自定义的类加载器不可能加载本应该由父加载器加载的可靠类，从而防止不可靠的甚至恶意的代码代替由父类加载器加载的可靠代码。如，java.lang.Object类总是由根类加载器加载的，其他任何用户自定义的类加载器都不可能加载含有恶意代码的java.lang.Object类。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;被定义的类加载器，而它的父类加载器则被称为初始类加载器。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;我们知道java中很可能出现类名相同的类，但是JVM却能正常的加载，是因为我们将相同的类名的类放在了不通的包（package）下面，这个也成为命名空间，每个类加载器都有自己的命名空间，命名空间是由该加载器以及所有父加载器所加载的类组成。&lt;span&gt;在同一个命名空间中，不会出现类的完整名字（包名+类名）相同的两个类；在不同的命名空间中，有可能出现类的完整名字相同的两个类。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;由同一类加载器加载的属于相同包的类组成了运行时包。决定两个类是不是属于同一个运行时包，不仅要看他们的包名称是否相同，还要看定义类加载器是否相同。只有属于同一运行时包的类之间才能相互访问可见（默认访问级别）的类和成员&lt;/span&gt;。假设用户自定义了一个类java.lang.TestCase并由用于自定义的类加载器加载，由于java.lang.TestCase和核心类库java.lang.*由不同的类加载器加载，他们属于不同的运行时包，所以java.lang.TestCase不能访问核心库java.lang包中的包可见成员。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;同一个命名空间内的类是相互可见的。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;子类加载器的命名空间包含所有父类加载器的命名空间，因此由子类加载器加载的类能看见父类加载器加载的类，相反，由父类加载器加载的类不能看见子类加载器加载的类。如果两个加载器之间没有直接或者间接的父子关系，那么他们各自加载的类互不可见。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;二、自定义类加载器 &lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;首先类的双亲委派流程为：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/401339/201803/401339-20180326224719578-1082444131.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;首先，我们定义一个待加载的普通&lt;code&gt;Java&lt;/code&gt;类:&lt;code&gt;Test.java&lt;/code&gt;。放在&lt;code&gt;com.pony.cl&lt;/code&gt;包下:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.pony.cl;

&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Test {
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; hello() {
        System.out.println(&lt;/span&gt;&quot;恩，是的，我是由 &quot; +&lt;span&gt; getClass().getClassLoader().getClass()
                &lt;/span&gt;+ &quot; 加载进来的&quot;&lt;span&gt;);
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;注意：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;如果你是直接在当前项目里面创建，待&lt;code&gt;Test.java&lt;/code&gt;编译后，请把&lt;code&gt;Test.class&lt;/code&gt;文件拷贝走，再将&lt;code&gt;Test.java&lt;/code&gt;删除。因为如果&lt;code&gt;Test.class&lt;/code&gt;存放在当前项目中，根据双亲委派模型可知，会通过&lt;code&gt;sun.misc.Launcher$AppClassLoader&lt;/code&gt; 类加载器加载。为了让我们自定义的类加载器加载，我们把Test.class文件放入到其他目录。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;接下来就是自定义我们的类加载器：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.io.FileInputStream;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.lang.reflect.Method;

&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Main {
    &lt;/span&gt;&lt;span&gt;static&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; MyClassLoader &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; ClassLoader {
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String classPath;

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; MyClassLoader(String classPath) {
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.classPath =&lt;span&gt; classPath;
        }

        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;byte&lt;/span&gt;[] loadByte(String name) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
            name &lt;/span&gt;= name.replaceAll(&quot;\\.&quot;, &quot;/&quot;&lt;span&gt;);
            FileInputStream fis &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; FileInputStream(classPath + &quot;/&quot; +&lt;span&gt; name
                    &lt;/span&gt;+ &quot;.class&quot;&lt;span&gt;);
            &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; len =&lt;span&gt; fis.available();
            &lt;/span&gt;&lt;span&gt;byte&lt;/span&gt;[] data = &lt;span&gt;new&lt;/span&gt; &lt;span&gt;byte&lt;/span&gt;&lt;span&gt;[len];
            fis.read(data);
            fis.close();
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; data;

        }

        &lt;/span&gt;&lt;span&gt;protected&lt;/span&gt; Class&amp;lt;?&amp;gt; findClass(String name) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; ClassNotFoundException {
            &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
                &lt;/span&gt;&lt;span&gt;byte&lt;/span&gt;[] data =&lt;span&gt; loadByte(name);
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; defineClass(name, data, 0&lt;span&gt;, data.length);
            } &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception e) {
                e.printStackTrace();
                &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; ClassNotFoundException();
            }
        }

    };

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; main(String args[]) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
        MyClassLoader classLoader &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; MyClassLoader(&quot;D:/test&quot;&lt;span&gt;);
        Class clazz &lt;/span&gt;= classLoader.loadClass(&quot;com.pony.cl.Test&quot;&lt;span&gt;);
        Object obj &lt;/span&gt;=&lt;span&gt; clazz.newInstance();
        Method helloMethod &lt;/span&gt;= clazz.getDeclaredMethod(&quot;hello&quot;, &lt;span&gt;null&lt;/span&gt;&lt;span&gt;);
        helloMethod.invoke(obj, &lt;/span&gt;&lt;span&gt;null&lt;/span&gt;&lt;span&gt;);
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;注意点：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;Object obj =&lt;span&gt; clazz.newInstance();
不能写成：
Test obj &lt;/span&gt;= (Test)clazz.newInstance();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;如果写成这样会报错，因为当前的这个类是由系统加载器加载，而Test是由自定义加载器加载，那么系统类加载和自定义类的加载器不属于同一个运行时包，这个时候是没有办法直接转换的，只能通过反射的方式去访问，反射是唯一一种可以跨越在不同运行时包的方法。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;参考资料：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;圣思园张龙老师深入Java虚拟机系列&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Tue, 27 Mar 2018 15:31:00 +0000</pubDate>
<dc:creator>pony1223</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/pony1223/p/8654678.html</dc:identifier>
</item>
<item>
<title>4.Apache POI使用详解 - 豆豆de思念</title>
<link>http://www.cnblogs.com/lukelook/p/8660798.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/lukelook/p/8660798.html</guid>
<description>&lt;p&gt;&lt;span&gt;&lt;span&gt;1.&lt;span&gt;POI介绍&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;Apache POI是Apache软件基金会的开源项目，POI提供API给Java程序对Microsoft Office格式档案读和写的功能。 .NET的开发人员则可以利用NPOI (POI for .NET) 来存取 Microsoft Office文档的功能&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;2.&lt;span&gt;POI结构说明&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;包名称 &lt;span class=&quot;Apple-tab-span&quot;&gt;说明&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;HSSF &lt;span class=&quot;Apple-tab-span&quot;&gt;提供读写Microsoft Excel XLS格式档案的功能。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;XSSF &lt;span class=&quot;Apple-tab-span&quot;&gt;提供读写Microsoft Excel OOXML XLSX格式档案的功能。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;HWPF &lt;span class=&quot;Apple-tab-span&quot;&gt;提供读写Microsoft Word DOC格式档案的功能。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;HSLF &lt;span class=&quot;Apple-tab-span&quot;&gt;提供读写Microsoft PowerPoint格式档案的功能。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;HDGF &lt;span class=&quot;Apple-tab-span&quot;&gt;提供读Microsoft Visio格式档案的功能。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;HPBF &lt;span class=&quot;Apple-tab-span&quot;&gt;提供读Microsoft Publisher格式档案的功能。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;HSMF &lt;span class=&quot;Apple-tab-span&quot;&gt;提供读Microsoft Outlook格式档案的功能。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt;3&lt;/span&gt;.&lt;span&gt;POI常用类说明&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div readability=&quot;15.5&quot;&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;类名&lt;/strong&gt;                &lt;strong&gt;说明&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;span&gt;HSSFWorkbook        Excel的文档对象&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;&lt;span&gt;HSSFSheet &lt;span class=&quot;Apple-tab-span&quot;&gt;    　　　Excel的表单&lt;br/&gt;HSSFRow &lt;span class=&quot;Apple-tab-span&quot;&gt;            Excel的行&lt;br/&gt;HSSFCell &lt;span class=&quot;Apple-tab-span&quot;&gt;   　　　　 Excel的格子单元&lt;br/&gt;HSSFFont            Excel字体&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;   &lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;span&gt;HSSFDataFormat      格子单元的日期格式&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;span&gt;HSSFHeader          Excel文档Sheet的页眉&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;span&gt;HSSFFooter          Excel文档Sheet的页脚&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;span&gt;HSSFCellStyle       格子单元样式&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;span&gt;HSSFDateUtil        日期&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;span&gt;HSSFPrintSetup      打印&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;span&gt;HSSFErrorConstants  错误信息&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;

&lt;p&gt; Maven 依赖&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.apache.poi&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;poi&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;3.9&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;


&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.apache.poi&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;poi-ooxml&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;3.9&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.my.utils;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.io.FileOutputStream;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.poi.hssf.usermodel.HSSFWorkbook;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.poi.hssf.util.HSSFColor;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.poi.ss.usermodel.Cell;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.poi.ss.usermodel.CellStyle;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.poi.ss.usermodel.Row;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.poi.ss.usermodel.Sheet;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.poi.ss.usermodel.Workbook;

&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; UsePoiCreateExcle {

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; TODO Auto-generated method stub&lt;/span&gt;
        String path = &quot;D:\\java\\test\\test.xls&quot;&lt;span&gt;;

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; create workbook&lt;/span&gt;
        Workbook workbook = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; HSSFWorkbook();

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; create sheet&lt;/span&gt;
        Sheet sheet1 = workbook.createSheet(&quot;teacher&quot;&lt;span&gt;);
        Sheet sheet2 &lt;/span&gt;= workbook.createSheet(&quot;student&quot;&lt;span&gt;);

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 设置为当前页面&lt;/span&gt;
        workbook.setActiveSheet(0&lt;span&gt;);

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 创建行&lt;/span&gt;
        Row row = sheet1.createRow(0&lt;span&gt;);

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 创建表格&lt;/span&gt;
        Cell cell1 = row.createCell(0&lt;span&gt;);
        Cell cell2 &lt;/span&gt;= row.createCell(1&lt;span&gt;);
        Cell cell3 &lt;/span&gt;= row.createCell(2&lt;span&gt;);

        CellStyle style &lt;/span&gt;=&lt;span&gt; workbook.createCellStyle();
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 对齐方式&lt;/span&gt;
&lt;span&gt;        style.setAlignment(CellStyle.ALIGN_CENTER);

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 先设置样式再设置颜色&lt;/span&gt;
&lt;span&gt;        style.setBorderBottom(CellStyle.BORDER_THICK);
        style.setBottomBorderColor(HSSFColor.RED.index);

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;先设置填充样式再设置颜色&lt;/span&gt;
&lt;span&gt;        style.setFillPattern(CellStyle.ALT_BARS);
        style.setFillForegroundColor(HSSFColor.GREEN.index);
        cell1.setCellValue(&lt;/span&gt;&quot;序号&quot;&lt;span&gt;);
        cell1.setCellStyle(style);
        cell2.setCellValue(&lt;/span&gt;&quot;姓名&quot;&lt;span&gt;);
        cell3.setCellValue(&lt;/span&gt;&quot;年龄&quot;&lt;span&gt;);
        System.out.println(&lt;/span&gt;&quot;=============&quot;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
            FileOutputStream out &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; FileOutputStream(path);
            workbook.write(out);
            out.close();
        } &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception e) {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; TODO Auto-generated catch block&lt;/span&gt;
&lt;span&gt;            e.printStackTrace();
        }

    }

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;



&lt;p&gt;&lt;span&gt;&lt;strong&gt;1.&lt;/strong&gt;创建文档摘要信息&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
workbook.createInformationProperties();&lt;span&gt;//&lt;/span&gt;&lt;span&gt;创建文档信息&lt;/span&gt;
DocumentSummaryInformation dsi= workbook.getDocumentSummaryInformation();&lt;span&gt;//&lt;/span&gt;&lt;span&gt;摘要信息&lt;/span&gt;
dsi.setCategory(&quot;类别:Excel文件&quot;);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;类别&lt;/span&gt;
dsi.setManager(&quot;管理者:李志伟&quot;);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;管理者&lt;/span&gt;
dsi.setCompany(&quot;公司:--&quot;);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;公司&lt;/span&gt;
SummaryInformation si = workbook.getSummaryInformation();&lt;span&gt;//&lt;/span&gt;&lt;span&gt;摘要信息&lt;/span&gt;
si.setSubject(&quot;主题:--&quot;);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;主题&lt;/span&gt;
si.setTitle(&quot;标题:测试文档&quot;);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;标题&lt;/span&gt;
si.setAuthor(&quot;作者:李志伟&quot;);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;作者&lt;/span&gt;
si.setComments(&quot;备注:POI测试文档&quot;);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;备注&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1132619/201803/1132619-20180327223755756-49922571.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;2.&lt;/strong&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;创建批注&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
HSSFSheet sheet = workbook.createSheet(&quot;Test&quot;);&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 创建工作表(Sheet)&lt;/span&gt;
HSSFPatriarch patr =&lt;span&gt; sheet.createDrawingPatriarch();
HSSFClientAnchor anchor &lt;/span&gt;= patr.createAnchor(0, 0, 0, 0, 5, 1, 8, 3);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;创建批注位置&lt;/span&gt;
HSSFComment comment = patr.createCellComment(anchor);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;创建批注&lt;/span&gt;
comment.setString(&lt;span&gt;new&lt;/span&gt; HSSFRichTextString(&quot;这是一个批注段落！&quot;));&lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置批注内容&lt;/span&gt;
comment.setAuthor(&quot;李志伟&quot;);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置批注作者&lt;/span&gt;
comment.setVisible(&lt;span&gt;true&lt;/span&gt;);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置批注默认显示&lt;/span&gt;
HSSFCell cell = sheet.createRow(2).createCell(1&lt;span&gt;);
cell.setCellValue(&lt;/span&gt;&quot;测试&quot;&lt;span&gt;);
cell.setCellComment(comment);&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;把批注赋值给单元格&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1132619/201803/1132619-20180327223904912-1424708606.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;创建批注位置HSSFPatriarch.createAnchor(dx1, dy1, dx2, dy2, col1, row1, col2, row2)方法参数说明：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;dx1         第1个单元格中x轴的偏移量
dy1         第1个单元格中y轴的偏移量
dx2         第2个单元格中x轴的偏移量
dy2         第2个单元格中y轴的偏移量
col1        第1个单元格的列号
row1        第1个单元格的行号
col2        第2个单元格的列号
row2        第2个单元格的行号&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;3.&lt;/strong&gt;&lt;span&gt;创建页眉和页脚&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
HSSFSheet sheet = workbook.createSheet(&quot;Test&quot;);&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 创建工作表(Sheet)&lt;/span&gt;
HSSFHeader header =sheet.getHeader();&lt;span&gt;//&lt;/span&gt;&lt;span&gt;得到页眉&lt;/span&gt;
header.setLeft(&quot;页眉左边&quot;&lt;span&gt;);
header.setRight(&lt;/span&gt;&quot;页眉右边&quot;&lt;span&gt;);
header.setCenter(&lt;/span&gt;&quot;页眉中间&quot;&lt;span&gt;);
HSSFFooter footer &lt;/span&gt;=sheet.getFooter();&lt;span&gt;//&lt;/span&gt;&lt;span&gt;得到页脚&lt;/span&gt;
footer.setLeft(&quot;页脚左边&quot;&lt;span&gt;);
footer.setRight(&lt;/span&gt;&quot;页脚右边&quot;&lt;span&gt;);
footer.setCenter(&lt;/span&gt;&quot;页脚中间&quot;);
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1132619/201803/1132619-20180327224128869-1805556494.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; 也可以使用Office自带的标签定义，你可以通过HSSFHeader或HSSFFooter访问到它们，都是静态属性，列表如下：&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
HSSFHeader.tab                  &amp;amp;&lt;span&gt;A    表名
HSSFHeader.file                 &lt;/span&gt;&amp;amp;&lt;span&gt;F    文件名
HSSFHeader.startBold            &lt;/span&gt;&amp;amp;&lt;span&gt;B    粗体开始
HSSFHeader.endBold              &lt;/span&gt;&amp;amp;&lt;span&gt;B    粗体结束
HSSFHeader.startUnderline       &lt;/span&gt;&amp;amp;&lt;span&gt;U    下划线开始
HSSFHeader.endUnderline         &lt;/span&gt;&amp;amp;&lt;span&gt;U    下划线结束
HSSFHeader.startDoubleUnderline &lt;/span&gt;&amp;amp;&lt;span&gt;E    双下划线开始
HSSFHeader.endDoubleUnderline   &lt;/span&gt;&amp;amp;&lt;span&gt;E    双下划线结束
HSSFHeader.time                 &lt;/span&gt;&amp;amp;&lt;span&gt;T    时间
HSSFHeader.date                 &lt;/span&gt;&amp;amp;&lt;span&gt;D    日期
HSSFHeader.numPages             &lt;/span&gt;&amp;amp;&lt;span&gt;N    总页面数
HSSFHeader.page                 &lt;/span&gt;&amp;amp;P    当前页号
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;4.&lt;/strong&gt;&lt;span&gt;设置数据格式&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
HSSFSheet sheet = workbook.createSheet(&quot;Test&quot;);&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 创建工作表(Sheet)&lt;/span&gt;
HSSFRow row=sheet.createRow(0&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置日期格式--使用Excel内嵌的格式&lt;/span&gt;
HSSFCell cell=row.createCell(0&lt;span&gt;);
cell.setCellValue(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Date());
HSSFCellStyle style&lt;/span&gt;=&lt;span&gt;workbook.createCellStyle();
style.setDataFormat(HSSFDataFormat.getBuiltinFormat(&lt;/span&gt;&quot;m/d/yy h:mm&quot;&lt;span&gt;));
cell.setCellStyle(style);
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置保留2位小数--使用Excel内嵌的格式&lt;/span&gt;
cell=row.createCell(1&lt;span&gt;);
cell.setCellValue(&lt;/span&gt;12.3456789&lt;span&gt;);
style&lt;/span&gt;=&lt;span&gt;workbook.createCellStyle();
style.setDataFormat(HSSFDataFormat.getBuiltinFormat(&lt;/span&gt;&quot;0.00&quot;&lt;span&gt;));
cell.setCellStyle(style);
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置货币格式--使用自定义的格式&lt;/span&gt;
cell=row.createCell(2&lt;span&gt;);
cell.setCellValue(&lt;/span&gt;12345.6789&lt;span&gt;);
style&lt;/span&gt;=&lt;span&gt;workbook.createCellStyle();
style.setDataFormat(workbook.createDataFormat().getFormat(&lt;/span&gt;&quot;￥#,##0&quot;&lt;span&gt;));
cell.setCellStyle(style);
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置百分比格式--使用自定义的格式&lt;/span&gt;
cell=row.createCell(3&lt;span&gt;);
cell.setCellValue(&lt;/span&gt;0.123456789&lt;span&gt;);
style&lt;/span&gt;=&lt;span&gt;workbook.createCellStyle();
style.setDataFormat(workbook.createDataFormat().getFormat(&lt;/span&gt;&quot;0.00%&quot;&lt;span&gt;));
cell.setCellStyle(style);
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置中文大写格式--使用自定义的格式&lt;/span&gt;
cell=row.createCell(4&lt;span&gt;);
cell.setCellValue(&lt;/span&gt;12345&lt;span&gt;);
style&lt;/span&gt;=&lt;span&gt;workbook.createCellStyle();
style.setDataFormat(workbook.createDataFormat().getFormat(&lt;/span&gt;&quot;[DbNum2][$-804]0&quot;&lt;span&gt;));
cell.setCellStyle(style);
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置科学计数法格式--使用自定义的格式&lt;/span&gt;
cell=row.createCell(5&lt;span&gt;);
cell.setCellValue(&lt;/span&gt;12345&lt;span&gt;);
style&lt;/span&gt;=&lt;span&gt;workbook.createCellStyle();
style.setDataFormat(workbook.createDataFormat().getFormat(&lt;/span&gt;&quot;0.00E+00&quot;&lt;span&gt;));
cell.setCellStyle(style);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;HSSFDataFormat.getFormat和HSSFDataFormat.getBuiltinFormat的区别：&lt;/strong&gt;当使用Excel内嵌的（或者说预定义）的格式时，直接用HSSFDataFormat.getBuiltinFormat静态方法即可。当使用自己定义的格式时，必须先调用HSSFWorkbook.createDataFormat()，因为这时在底层会先找有没有匹配的内嵌FormatRecord，如果没有就会新建一个FormatRecord，所以必须先调用这个方法，然后你就可以用获得的HSSFDataFormat实例的getFormat方法了，当然相对而言这种方式比较麻烦，所以内嵌格式还是用HSSFDataFormat.getBuiltinFormat静态方法更加直接一些。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;5.&lt;/strong&gt;&lt;span&gt;合并单元格&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
HSSFSheet sheet = workbook.createSheet(&quot;Test&quot;);&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 创建工作表(Sheet)&lt;/span&gt;
HSSFRow row=sheet.createRow(0&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;合并列&lt;/span&gt;
HSSFCell cell=row.createCell(0&lt;span&gt;);
cell.setCellValue(&lt;/span&gt;&quot;合并列&quot;&lt;span&gt;);
CellRangeAddress region&lt;/span&gt;=&lt;span&gt;new&lt;/span&gt; CellRangeAddress(0, 0, 0, 5&lt;span&gt;);
sheet.addMergedRegion(region);
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;合并行&lt;/span&gt;
cell=row.createCell(6&lt;span&gt;);
cell.setCellValue(&lt;/span&gt;&quot;合并行&quot;&lt;span&gt;);
region&lt;/span&gt;=&lt;span&gt;new&lt;/span&gt; CellRangeAddress(0, 5, 6, 6&lt;span&gt;);
sheet.addMergedRegion(region);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1132619/201803/1132619-20180327224639150-197433185.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;CellRangeAddress对象其实就是表示一个区域，其构造方法如下：CellRangeAddress(firstRow, lastRow, firstCol, lastCol)，参数的说明：&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;firstRow        区域中第一个单元格的行号
lastRow         区域中最后一个单元格的行号
firstCol        区域中第一个单元格的列号
lastCol         区域中最后一个单元格的列号 &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;6.单元格对齐&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
HSSFCell cell=row.createCell(0&lt;span&gt;);
cell.setCellValue(&lt;/span&gt;&quot;单元格对齐&quot;&lt;span&gt;);
HSSFCellStyle style&lt;/span&gt;=&lt;span&gt;workbook.createCellStyle();
style.setAlignment(HSSFCellStyle.ALIGN_CENTER);&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;水平居中&lt;/span&gt;
style.setVerticalAlignment(HSSFCellStyle.VERTICAL_CENTER);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;垂直居中&lt;/span&gt;
style.setWrapText(&lt;span&gt;true&lt;/span&gt;);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;自动换行&lt;/span&gt;
style.setIndention((&lt;span&gt;short&lt;/span&gt;)5);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;缩进&lt;/span&gt;
style.setRotation((&lt;span&gt;short&lt;/span&gt;)60);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;文本旋转，这里的取值是从-90到90，而不是0-180度。&lt;/span&gt;
cell.setCellStyle(style);  
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;水平对齐相关参数&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;如果是左侧对齐就是   HSSFCellStyle.ALIGN_FILL;
如果是居中对齐就是   HSSFCellStyle.ALIGN_CENTER;
如果是右侧对齐就是   HSSFCellStyle.ALIGN_RIGHT;
如果是跨列举中就是   HSSFCellStyle.ALIGN_CENTER_SELECTION;
如果是两端对齐就是   HSSFCellStyle.ALIGN_JUSTIFY;
如果是填充就是       HSSFCellStyle.ALIGN_FILL;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;垂直对齐相关参数&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;如果是靠上就是     HSSFCellStyle.VERTICAL_TOP;
如果是居中就是     HSSFCellStyle.VERTICAL_CENTER;
如果是靠下就是     HSSFCellStyle.VERTICAL_BOTTOM;
如果是两端对齐就是 HSSFCellStyle.VERTICAL_JUSTIFY;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;span&gt;边框和其他单元格设置一样也是调用CellStyle接口，CellStyle有2种和边框相关的属性，分别是:&lt;/span&gt;&lt;/p&gt;

&lt;div readability=&quot;9.5&quot;&gt;
&lt;table border=&quot;1&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody readability=&quot;3&quot;&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; width=&quot;114&quot;&gt;
&lt;p align=&quot;center&quot;&gt;&lt;span&gt;边框相关属性&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;87&quot;&gt;
&lt;p align=&quot;center&quot;&gt;&lt;span&gt;说明&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;329&quot;&gt;
&lt;p align=&quot;center&quot;&gt;&lt;span&gt;范例&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4.5&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;114&quot;&gt;
&lt;p&gt;&lt;span&gt;Border+方向&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;87&quot;&gt;
&lt;p&gt;&lt;span&gt;边框类型&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;329&quot; readability=&quot;6&quot;&gt;
&lt;p&gt;&lt;span&gt;BorderLeft, BorderRight等&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4.5&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;114&quot;&gt;
&lt;p&gt;&lt;span&gt;方向+BorderColor&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;87&quot;&gt;
&lt;p&gt;&lt;span&gt;边框颜色&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;329&quot; readability=&quot;6&quot;&gt;
&lt;p&gt;&lt;span&gt;TopBorderColor,BottomBorderColor等&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
HSSFCell cell=row.createCell(1&lt;span&gt;);
cell.setCellValue(&lt;/span&gt;&quot;设置边框&quot;&lt;span&gt;);
HSSFCellStyle style&lt;/span&gt;=&lt;span&gt;workbook.createCellStyle();
style.setBorderTop(HSSFCellStyle.BORDER_DOTTED);&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;上边框&lt;/span&gt;
style.setBorderBottom(HSSFCellStyle.BORDER_THICK);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;下边框&lt;/span&gt;
style.setBorderLeft(HSSFCellStyle.BORDER_DOUBLE);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;左边框&lt;/span&gt;
style.setBorderRight(HSSFCellStyle.BORDER_SLANTED_DASH_DOT);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;右边框&lt;/span&gt;
style.setTopBorderColor(HSSFColor.RED.index);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;上边框颜色&lt;/span&gt;
style.setBottomBorderColor(HSSFColor.BLUE.index);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;下边框颜色&lt;/span&gt;
style.setLeftBorderColor(HSSFColor.GREEN.index);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;左边框颜色&lt;/span&gt;
style.setRightBorderColor(HSSFColor.PINK.index);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;右边框颜色&lt;/span&gt;
cell.setCellStyle(style);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1132619/201803/1132619-20180327225007224-862343408.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;其中边框类型分为以下几种：&lt;/span&gt;&lt;/p&gt;
&lt;div&gt;
&lt;table border=&quot;1&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody readability=&quot;13&quot;&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; width=&quot;112&quot;&gt;
&lt;p align=&quot;center&quot;&gt;&lt;span&gt;边框范例图&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;390&quot;&gt;
&lt;p align=&quot;center&quot;&gt;&lt;span&gt;对应的静态值&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;112&quot;&gt; &lt;img src=&quot;https://images0.cnblogs.com/blog/601464/201503/041657095397412.png&quot; alt=&quot;1&quot; width=&quot;49&quot; height=&quot;14&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;390&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;span&gt;HSSFCellStyle.&lt;em&gt;BORDER_DOTTED&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;112&quot;&gt; &lt;img src=&quot;https://images0.cnblogs.com/blog/601464/201503/041657101643055.png&quot; alt=&quot;2&quot; width=&quot;49&quot; height=&quot;13&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;390&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;span&gt;HSSFCellStyle.&lt;em&gt;BORDER_HAIR&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;112&quot;&gt; &lt;img src=&quot;https://images0.cnblogs.com/blog/601464/201503/041657109923870.png&quot; alt=&quot;3&quot; width=&quot;47&quot; height=&quot;13&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;390&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;span&gt;HSSFCellStyle.&lt;em&gt;BORDER_DASH_DOT_DOT&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;112&quot;&gt; &lt;img src=&quot;https://images0.cnblogs.com/blog/601464/201503/041657115559297.png&quot; alt=&quot;4&quot; width=&quot;49&quot; height=&quot;11&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;390&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;span&gt;HSSFCellStyle.&lt;em&gt;BORDER_DASH_DOT&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;112&quot;&gt; &lt;img src=&quot;https://images0.cnblogs.com/blog/601464/201503/041657121171427.png&quot; alt=&quot;5&quot; width=&quot;49&quot; height=&quot;10&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;390&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;span&gt;HSSFCellStyle.&lt;em&gt;BORDER_DASHED&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;112&quot;&gt; &lt;img src=&quot;https://images0.cnblogs.com/blog/601464/201503/041657130244283.png&quot; alt=&quot;6&quot; width=&quot;49&quot; height=&quot;9&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;390&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;span&gt;HSSFCellStyle.&lt;em&gt;BORDER_THIN&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;112&quot;&gt; &lt;img src=&quot;https://images0.cnblogs.com/blog/601464/201503/041657136647452.png&quot; alt=&quot;7&quot; width=&quot;49&quot; height=&quot;9&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;390&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;span&gt;HSSFCellStyle.&lt;em&gt;BORDER_MEDIUM_DASH_DOT_DOT&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;112&quot;&gt; &lt;img src=&quot;https://images0.cnblogs.com/blog/601464/201503/041657144453282.png&quot; alt=&quot;8&quot; width=&quot;49&quot; height=&quot;12&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;390&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;span&gt;HSSFCellStyle.&lt;em&gt;BORDER_SLANTED_DASH_DOT&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;112&quot;&gt; &lt;img src=&quot;https://images0.cnblogs.com/blog/601464/201503/041657149455195.png&quot; alt=&quot;9&quot; width=&quot;49&quot; height=&quot;11&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;390&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;span&gt;HSSFCellStyle.&lt;em&gt;BORDER_MEDIUM_DASH_DOT&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;112&quot;&gt; &lt;img src=&quot;https://images0.cnblogs.com/blog/601464/201503/041657154457109.png&quot; alt=&quot;10&quot; width=&quot;49&quot; height=&quot;10&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;390&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;span&gt;HSSFCellStyle.&lt;em&gt;BORDER_MEDIUM_DASHED&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;112&quot;&gt; &lt;img src=&quot;https://images0.cnblogs.com/blog/601464/201503/041657163995951.png&quot; alt=&quot;11&quot; width=&quot;49&quot; height=&quot;13&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;390&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;span&gt;HSSFCellStyle.&lt;em&gt;BORDER_MEDIUM&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;112&quot;&gt; &lt;img src=&quot;https://images0.cnblogs.com/blog/601464/201503/041657169453851.png&quot; alt=&quot;12&quot; width=&quot;49&quot; height=&quot;13&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;390&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;span&gt;HSSFCellStyle.&lt;em&gt;BORDER_THICK&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;112&quot;&gt; &lt;img src=&quot;https://images0.cnblogs.com/blog/601464/201503/041657180557178.png&quot; alt=&quot;13&quot; width=&quot;49&quot; height=&quot;13&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;390&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;span&gt;HSSFCellStyle.&lt;em&gt;BORDER_DOUBLE&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;8.设置字体&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
HSSFCell cell = row.createCell(1&lt;span&gt;);
cell.setCellValue(&lt;/span&gt;&quot;设置字体&quot;&lt;span&gt;);
HSSFCellStyle style &lt;/span&gt;=&lt;span&gt; workbook.createCellStyle();
HSSFFont font &lt;/span&gt;=&lt;span&gt; workbook.createFont();
font.setFontName(&lt;/span&gt;&quot;华文行楷&quot;);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置字体名称&lt;/span&gt;
font.setFontHeightInPoints((&lt;span&gt;short&lt;/span&gt;)28);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置字号&lt;/span&gt;
font.setColor(HSSFColor.RED.index);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置字体颜色&lt;/span&gt;
font.setUnderline(FontFormatting.U_SINGLE);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置下划线&lt;/span&gt;
font.setTypeOffset(FontFormatting.SS_SUPER);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置上标下标&lt;/span&gt;
font.setStrikeout(&lt;span&gt;true&lt;/span&gt;);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置删除线&lt;/span&gt;
&lt;span&gt;style.setFont(font);
cell.setCellStyle(style);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;下划线选项值：
        单下划线 FontFormatting.U_SINGLE
        双下划线 FontFormatting.U_DOUBLE
        会计用单下划线 FontFormatting.U_SINGLE_ACCOUNTING
        会计用双下划线 FontFormatting.U_DOUBLE_ACCOUNTING
    无下划线 FontFormatting.U_NONE
    上标下标选项值：
        上标 FontFormatting.SS_SUPER
        下标 FontFormatting.SS_SUB
        普通，默认值 FontFormatting.SS_NONE&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
SSFCellStyle style =&lt;span&gt; workbook.createCellStyle();
style.setFillForegroundColor(HSSFColor.GREEN.index);&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置图案颜色&lt;/span&gt;
style.setFillBackgroundColor(HSSFColor.RED.index);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置图案背景色&lt;/span&gt;
style.setFillPattern(HSSFCellStyle.SQUARES);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置图案样式&lt;/span&gt;
cell.setCellStyle(style);
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1132619/201803/1132619-20180327225559164-1896687708.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;   &lt;img src=&quot;https://images2018.cnblogs.com/blog/1132619/201803/1132619-20180327225629723-932634804.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;10.&lt;strong&gt;&lt;span&gt;设置宽度和高度&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
HSSFSheet sheet = workbook.createSheet(&quot;Test&quot;);&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 创建工作表(Sheet)&lt;/span&gt;
HSSFRow row = sheet.createRow(1&lt;span&gt;);
HSSFCell cell &lt;/span&gt;= row.createCell(1&lt;span&gt;);
cell.setCellValue(&lt;/span&gt;&quot;123456789012345678901234567890&quot;&lt;span&gt;);
sheet.setColumnWidth(&lt;/span&gt;1, 31 * 256);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置第一列的宽度是31个字符宽度&lt;/span&gt;
row.setHeightInPoints(50);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置行的高度是50个点&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;





&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;11.&lt;strong&gt;&lt;span&gt;判断单元格是否为日期&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//判断单元格是否为日期类型，使用DateUtil.isCellDateFormatted(cell)方法，例如：
HSSFCell cell &lt;/span&gt;= row.createCell(1&lt;span&gt;);
cell.setCellValue(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt; Date());&lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置日期数据&lt;/span&gt;
System.out.println(DateUtil.isCellDateFormatted(cell));&lt;span&gt;//&lt;/span&gt;&lt;span&gt;输出：false&lt;/span&gt;
HSSFCellStyle style =&lt;span&gt;workbook.createCellStyle();
style.setDataFormat(HSSFDataFormat.getBuiltinFormat(&lt;/span&gt;&quot;m/d/yy h:mm&quot;&lt;span&gt;));
cell.setCellStyle(style);&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置日期样式&lt;/span&gt;
System.out.println(DateUtil.isCellDateFormatted(cell));&lt;span&gt;//&lt;/span&gt;&lt;span&gt;输出：true&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
HSSFWorkbook workbook = &lt;span&gt;new&lt;/span&gt; HSSFWorkbook();&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 创建Excel文件(Workbook)&lt;/span&gt;
workbook.createSheet(&quot;Test0&quot;);&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 创建工作表(Sheet)&lt;/span&gt;
workbook.createSheet(&quot;Test1&quot;);&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 创建工作表(Sheet)&lt;/span&gt;
workbook.createSheet(&quot;Test2&quot;);&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 创建工作表(Sheet)&lt;/span&gt;
workbook.createSheet(&quot;Test3&quot;);&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 创建工作表(Sheet)&lt;/span&gt;
workbook.setActiveSheet(2);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置默认工作表&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
HSSFWorkbook workbook = &lt;span&gt;new&lt;/span&gt; HSSFWorkbook();&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 创建Excel文件(Workbook)&lt;/span&gt;
workbook.createSheet(&quot;Test0&quot;);&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 创建工作表(Sheet)&lt;/span&gt;
workbook.createSheet(&quot;Test1&quot;);&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 创建工作表(Sheet)&lt;/span&gt;
workbook.createSheet(&quot;Test2&quot;);&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 创建工作表(Sheet)&lt;/span&gt;
workbook.createSheet(&quot;Test3&quot;);&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 创建工作表(Sheet)&lt;/span&gt;
workbook.setSheetName(2, &quot;1234&quot;);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;重命名工作表&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;14.&lt;/strong&gt;调整表单显示比例&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
HSSFWorkbook workbook = &lt;span&gt;new&lt;/span&gt; HSSFWorkbook();&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 创建Excel文件(Workbook)&lt;/span&gt;
HSSFSheet sheet1= workbook.createSheet(&quot;Test0&quot;);&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 创建工作表(Sheet)&lt;/span&gt;
HSSFSheet sheet2=workbook.createSheet(&quot;Test1&quot;);&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 创建工作表(Sheet)&lt;/span&gt;
HSSFSheet sheet3=workbook.createSheet(&quot;Test2&quot;);&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 创建工作表(Sheet)&lt;/span&gt;
sheet1.setZoom(1,2);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;50%显示比例&lt;/span&gt;
sheet2.setZoom(2,1);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;200%显示比例&lt;/span&gt;
sheet3.setZoom(1,10);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;10%显示比例&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;strong&gt;15.&lt;/strong&gt;显示/隐藏网格线&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
HSSFWorkbook workbook = &lt;span&gt;new&lt;/span&gt; HSSFWorkbook();&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 创建Excel文件(Workbook)&lt;/span&gt;
HSSFSheet sheet1= workbook.createSheet(&quot;Test0&quot;);&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 创建工作表(Sheet)&lt;/span&gt;
HSSFSheet sheet2=workbook.createSheet(&quot;Test1&quot;);&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 创建工作表(Sheet)&lt;/span&gt;
sheet1.setDisplayGridlines(&lt;span&gt;false&lt;/span&gt;);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;隐藏Excel网格线,默认值为true&lt;/span&gt;
sheet2.setGridsPrinted(&lt;span&gt;true&lt;/span&gt;);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;打印时显示网格线,默认值为false&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;strong&gt;16.&lt;/strong&gt;遍历Sheet&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
String filePath = &quot;d:\\users\\lizw\\桌面\\POI\\sample.xls&quot;&lt;span&gt;;
FileInputStream stream &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; FileInputStream(filePath);
HSSFWorkbook workbook &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; HSSFWorkbook(stream);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;读取现有的Excel&lt;/span&gt;
HSSFSheet sheet= workbook.getSheet(&quot;Test0&quot;);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;得到指定名称的Sheet&lt;/span&gt;
&lt;span&gt;for&lt;/span&gt;&lt;span&gt; (Row row : sheet)
{
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt; (Cell cell : row)
    {
        System.out.print(cell &lt;/span&gt;+ &quot;\t&quot;&lt;span&gt;);
    }
    System.out.println();
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;strong&gt;其他详见：http://www.cnblogs.com/LiZhiW/p/4313789.html&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;


&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;strong&gt;http://blog.csdn.net/qq_27937043/article/details/72779442&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt; &lt;/p&gt;
&lt;div id=&quot;article_content&quot; class=&quot;article_content csdn-tracking-statistics tracking-click&quot; data-mod=&quot;popu_519&quot; data-dsm=&quot;post&quot;&gt;
&lt;div class=&quot;htmledit_views&quot;&gt;
&lt;table border=&quot;0&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot; align=&quot;left&quot;&gt;&lt;tbody readability=&quot;8&quot;&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;.            &lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td readability=&quot;5&quot;&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;HSSFColor.GREY_80_PERCENT&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;HSSFColor.INDIGO&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;HSSFColor.PLUM&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
&lt;p align=&quot;left&quot;&gt; &lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;HSSFColor.BROWN&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;HSSFColor.OLIVE_GREEN&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;HSSFColor.DARK_GREEN&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;HSSFColor.SEA_GREEN&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;HSSFColor.DARK_TEAL&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td readability=&quot;5&quot;&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;HSSFColor.GREY_40_PERCENT&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;HSSFColor.BLUE_GREY&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;HSSFColor.ORANGE&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;HSSFColor.LIGHT_ORANGE&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;HSSFColor.GOLD&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;HSSFColor.LIME&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;HSSFColor.AQUA&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;HSSFColor.LIGHT_BLUE&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;HSSFColor.TAN&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;HSSFColor.LAVENDER&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;HSSFColor.ROSE&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;HSSFColor.PALE_BLUE&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;HSSFColor.LIGHT_YELLOW&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;HSSFColor.LIGHT_GREEN&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td readability=&quot;5&quot;&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;HSSFColor.LIGHT_TURQUOISE&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;HSSFColor.SKY_BLUE&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;HSSFColor.BLUE&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;HSSFColor.TEAL&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;HSSFColor.DARK_RED&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;HSSFColor.VIOLET&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;HSSFColor.TURQUOISE&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;HSSFColor.YELLOW&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;HSSFColor.PINK&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;HSSFColor.DARK_BLUE&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td readability=&quot;5&quot;&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;HSSFColor.LIGHT_CORNFLOWER_BLUE&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;HSSFColor.ROYAL_BLUE&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;HSSFColor.CORAL&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;HSSFColor.ORCHID&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td readability=&quot;5&quot;&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;HSSFColor.LIGHT_TURQUOISE&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;HSSFColor.LEMON_CHIFFON&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;HSSFColor.PLUM&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td readability=&quot;5&quot;&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;HSSFColor.CORNFLOWER_BLUE&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td readability=&quot;5&quot;&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;HSSFColor.GREY_50_PERCENT&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td readability=&quot;5&quot;&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;HSSFColor.GREY_25_PERCENT&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;HSSFColor.TEAL&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;HSSFColor.VIOLET&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;HSSFColor.DARK_YELLOW&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;HSSFColor.DARK_BLUE&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;HSSFColor.GREEN&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;HSSFColor.DARK_RED&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;HSSFColor.TURQUOISE&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;HSSFColor.PINK&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;HSSFColor.YELLOW&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;HSSFColor.BLUE&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;HSSFColor.BRIGHT_GREEN&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;HSSFColor.RED&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;HSSFColor.WHITE&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;HSSFColor.BLACK&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;
&lt;/div&gt;
</description>
<pubDate>Tue, 27 Mar 2018 14:45:00 +0000</pubDate>
<dc:creator>豆豆de思念</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/lukelook/p/8660798.html</dc:identifier>
</item>
<item>
<title>salesforce lightning零基础学习(一) lightning简单介绍以及org开启lightning - zero.zhang</title>
<link>http://www.cnblogs.com/zero-zyq/p/7899260.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/zero-zyq/p/7899260.html</guid>
<description>&lt;p&gt;lightning对于开发salesforce人员来说并不陌生，即使没有做过lightning开发，这个名字肯定也是耳熟能详。原来的博客基本都是基于classic基于配置以及开发，后期博客会以lightning为主。&lt;/p&gt;
&lt;p&gt;那么问题来了，why lightning?&lt;/p&gt;
&lt;p&gt;lightning针对classic，不管是针对界面上来说还是开发上来说，都有很大的改变。lightning基于sales，service增加了很多很便捷的功能，针对列表视图也增加了kanban 视图，列表，详情页面更加友好，可以基于组件对UI界面进行的配置，lightning也提供了好多标准功能组件。当然，说的lightning的有点太过于片面，lightning的优点很多，这里不一一例举。当然，有一些功能在salesforce的classic可以使用的，却没法在lightning使用或者不好移植过来，具体的区别以及优点感兴趣的可以自己去查看。既然lightning有很多的好处，并且lightning越来越热，那么如何开启lightning呢？&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;一.启用Lightning&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; 1.配置自定义域名&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;使用Lightning前提需要org拥有自定义的域名。此步为必需的操作，只要org使用lightning，则必须拥有唯一的自定义域名。点击SetUp后，搜索My Domain,按照步骤注册即可。对步骤有问题的可以参考：&lt;a href=&quot;https://help.salesforce.com/articleView?id=domain_name_overview.htm&amp;amp;type=5&quot; target=&quot;_blank&quot;&gt;https://help.salesforce.com/articleView?id=domain_name_overview.htm&amp;amp;type=5&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/910966/201802/910966-20180201223356562-2027630455.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.指定Profile或者指定用户开启Lightning&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; 配置完第一步以后，作为System Admin的你便可以点击右上角你的名称选择Switch To Lightning Experience体验Lightning了。好多项目可能原来是在Classic基础上慢慢的向Lightning迁移，对于部分功能有可能指定的Profile或者指定的User使用Lightning功能模块，其他的用户还是使用Classic，这时便需要针对指定的Profile或者指定的用户进行开启Lightning权限了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;针对Profile：&lt;/strong&gt;找到需要启用Lightning Experience的简档，勾选Lightning Experience User选项。这里针对Sales Profile简档开启了Lightning Experience。&lt;img src=&quot;https://images2017.cnblogs.com/blog/910966/201802/910966-20180201232051921-1489882692.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;test1用户登录后便可以切换成Lightning Experience.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/910966/201802/910966-20180201232945859-789567332.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; &lt;strong&gt;针对指定用户：&lt;/strong&gt;新建Lightning Experience User Permission Set(名称自己起)，保存后点击System Permissions.Edit后将Lightning Experience User勾选。点击Manage Assignments将需要设置Lightning的用户添加进去即可。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/910966/201802/910966-20180202220746593-720012943.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;注：不是所有的情况都支持启用Lightning,以下情况不支持启用Lightning。&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;org使用了&lt;a href=&quot;https://help.salesforce.com/articleView?id=account_person.htm&amp;amp;type=5&quot; target=&quot;_blank&quot;&gt;personal Account&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;以下版本不允许：Contact Manager Edition, Personal Edition, Database.com Edition, and Chatter.com Edition&lt;/li&gt;
&lt;li&gt;以下License对应的Profile的User不允许使用Lightning，相关的Permission Set方式配置Assign User时也会相应的报错：&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Customer Community/Customer Community &lt;em id=&quot;__mceDel&quot;&gt;Plus/Partner Community/All Portal licenses/Force.com Free/Work.comDatabase.com/Content Only/Ideas Only/Knowledge Only/Site.com Only&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; 二.Lightning简单介绍&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Lightning相对Classic，除了在UI方面上变得更加用户友好外，还增加了很多特性，例举几个点：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Performance Chart&lt;/li&gt;
&lt;li&gt;Assistant：展示过期的Task/今天到期的Task/今天分配给你的Lead/包含过期Task的Opportunity/30天内无Activity的Opportunity/无Open Activity的Opportunity&lt;/li&gt;
&lt;li&gt;首页Chart可以filter&lt;/li&gt;
&lt;li&gt;增加Sales Path&lt;/li&gt;
&lt;li&gt;更加美观的Dashboard&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Lightning特性以及使用（偏Admin）感兴趣的可以查看此PDF文档：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://resources.docs.salesforce.com/206/latest/en-us/sfdc/pdf/lightning_experience_guide.pdf&quot; target=&quot;_blank&quot;&gt;https://resources.docs.salesforce.com/206/latest/en-us/sfdc/pdf/lightning_experience_guide.pdf&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;注：Lightning针对SetUp中的设置，有一些内容进行了位置的更改以及整合，也有一些新增的模块内容。建议Lightning零基础的同学详细看一遍上面的文档。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;针对开发者来说，我们可能更关注于和经典模式的区别，以及Lightning如何开发。Lightning开发的模式如下图所示。可以简单的总结以下几点：&lt;/p&gt;
&lt;p&gt;1.Lightning开发采用View-Controller(js)-Controller(server)-Database模式，而Classic采用View-Controller(server)-Database模式，Lightning通过事件驱动方式单独将js的事件处理从页面中拿出来放在Controller(js)中，View里面不允许存在js，而且Lightning更多的是开发可复用的Component并嵌套到需要的Lightning App Builder中；&lt;/p&gt;
&lt;p&gt;2.Lightning前端UI以及框架整体采用aura UI框架,可以更好的兼容网页端以及手机端，而且提供了很多已经封装好的标签，&lt;a href=&quot;https://www.lightningdesignsystem.com/getting-started/&quot; target=&quot;_blank&quot;&gt;Lightning Design System&lt;/a&gt;提供了标签实现的样式写法，当然，这些样式也可以使用到classic中；&lt;/p&gt;
&lt;p&gt;3.创建一个Lightning Component会创建一个bundle，bundle中包括lightning component,lightning controller,lightning helper,lightning style,lightning design,lightning document,lightning renderer svg元素。可以通过几种方式创建lightning component，比如idea，sublime以及develper console。bundle中包含的这些内容后期会详解。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/910966/201802/910966-20180224164838186-621786628.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;总结：&lt;/strong&gt;此篇只是简单的介绍Lightning配置以及提供Lightning的一些特性以及和classic的区别，详细的内容参看篇中的链接PDF。开发的内容后期的博客会有更新。有写错的地方欢迎指出，有不懂的欢迎留言。&lt;/p&gt;

</description>
<pubDate>Tue, 27 Mar 2018 14:35:00 +0000</pubDate>
<dc:creator>zero.zhang</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/zero-zyq/p/7899260.html</dc:identifier>
</item>
<item>
<title>EF Core利用Transaction对数据进行回滚保护 - 码农阿宇</title>
<link>http://www.cnblogs.com/CoderAyu/p/8660592.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/CoderAyu/p/8660592.html</guid>
<description>

&lt;p&gt;首先，说一下什么是EF Core中的Transaction&lt;/p&gt;
&lt;p&gt;Transaction允许以原子方式处理多个数据库操作，如果事务已提交，则所有操作都应用于数据库，如果事务回滚，则没有任何操作应用于数据库。&lt;/p&gt;
&lt;p&gt;所谓原子方式 是指对数据库的每一个操作是对立开来的，但是多个操作能合成一个整体（个人理解）。&lt;/p&gt;
&lt;p&gt;当操作到某一步失败了，那么会触发事物的回滚，把前面成功的操作也进行撤销，为什么这一操作这么重要呢？我举个例子你就知道了&lt;/p&gt;
&lt;p&gt;就那拿一行转账这件事情来说。正常的A给B转账X元有两步：&lt;/p&gt;
&lt;p&gt;1. 从A的账户余额中减去X元。&lt;/p&gt;
&lt;p&gt;2. 往B的银行账户中添加X元。&lt;/p&gt;
&lt;p&gt;假如，第一步执行完了，第二部因为某种原因执行失败了，那么，是不是A的账户平白无故地少了X元而B并没有多X元呢？显然这种事情是不能发生的，正确的做法是，把第一步撤销，即把A账户减去的X元加上。&lt;/p&gt;
&lt;p&gt;然而在在.Net中，如果你使用EF Core来操作数据库，这些都不用我们手动完成了，EF Core的事物完全可以帮我们完成这样的操作。&lt;/p&gt;

&lt;p&gt;下面我们利用一个asp.net core webapi的例子来讲解EF Core中这种Transaction的用法。&lt;/p&gt;
&lt;h2&gt;新建一个webapi应用程序&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://images2018.cnblogs.com/blog/1293736/201803/1293736-20180327220945813-1538552316.gif&quot;&gt;&lt;img title=&quot;clip_image002[1]&quot; src=&quot;https://images2018.cnblogs.com/blog/1293736/201803/1293736-20180327220946137-972187197.gif&quot; alt=&quot;clip_image002[1]&quot; width=&quot;670&quot; height=&quot;381&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;选择Asp.NET Core Web应用程序&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://images2018.cnblogs.com/blog/1293736/201803/1293736-20180327220946351-102130089.gif&quot;&gt;&lt;img title=&quot;clip_image004[1]&quot; src=&quot;https://images2018.cnblogs.com/blog/1293736/201803/1293736-20180327220946527-873749395.gif&quot; alt=&quot;clip_image004[1]&quot; width=&quot;662&quot; height=&quot;344&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.选择WebApi&lt;/p&gt;
&lt;h2&gt;搭建EF Core&lt;/h2&gt;
&lt;p&gt;创建Model文件夹和BankContext数据库上下文，Walet钱包实体，如图：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://images2018.cnblogs.com/blog/1293736/201803/1293736-20180327220946691-477422422.gif&quot;&gt;&lt;img title=&quot;clip_image006[1]&quot; src=&quot;https://images2018.cnblogs.com/blog/1293736/201803/1293736-20180327220946840-1868073869.gif&quot; alt=&quot;clip_image006[1]&quot; width=&quot;244&quot; height=&quot;221&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Wallet的代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Collections.Generic;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Linq;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Threading.Tasks;

&lt;/span&gt;&lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; EFCoreRollback.Models
{
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Wallet
    {
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; Id { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; Name { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;double&lt;/span&gt; Money { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;BankContext的代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Collections.Generic;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Linq;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Threading.Tasks;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; Microsoft.EntityFrameworkCore;

&lt;/span&gt;&lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; EFCoreRollback.Models
{
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; BankContext:DbContext
    {
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; BankContext(DbContextOptions&amp;lt;BankContext&amp;gt; options) : &lt;span&gt;base&lt;/span&gt;&lt;span&gt;(options)
        {

        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; DbSet&amp;lt;Wallet&amp;gt; Wallets { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;因为我是用Mysql数据库进行数据存储的，所以需要添加Mysql的EF Core引用，选中依赖项，右键菜单 选择管理Nuget程序包，&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://images2018.cnblogs.com/blog/1293736/201803/1293736-20180327220947316-608385804.gif&quot;&gt;&lt;img title=&quot;clip_image008[1]&quot; src=&quot;https://images2018.cnblogs.com/blog/1293736/201803/1293736-20180327220947843-1290801679.gif&quot; alt=&quot;clip_image008[1]&quot; width=&quot;543&quot; height=&quot;298&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;安装下列引用项目（Pomelo.EntityFrameworkCore.MySql）：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://images2018.cnblogs.com/blog/1293736/201803/1293736-20180327220948324-872418853.gif&quot;&gt;&lt;img title=&quot;clip_image010[1]&quot; src=&quot;https://images2018.cnblogs.com/blog/1293736/201803/1293736-20180327220948500-503469436.gif&quot; alt=&quot;clip_image010[1]&quot; width=&quot;609&quot; height=&quot;244&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在appsettings.json中加入数据库连接字符串，如下：&lt;/p&gt;
&lt;p&gt;&quot;ConnectionStrings&quot;: { &quot;Connection&quot;: &quot;Data Source=127.0.0.1;Database=bank;User ID=root;Password=123456;&quot; }&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://images2018.cnblogs.com/blog/1293736/201803/1293736-20180327220949005-254653301.png&quot;&gt;&lt;img title=&quot;QQ截图20180327202848&quot; src=&quot;https://images2018.cnblogs.com/blog/1293736/201803/1293736-20180327220949216-2006426322.png&quot; alt=&quot;QQ截图20180327202848&quot; width=&quot;800&quot; height=&quot;281&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;修改statup.cs，进行BankContext的依赖注入，主要修改了灰色部分，代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Collections.Generic;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Linq;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Threading.Tasks;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; EFCoreRollback.Models;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; Microsoft.AspNetCore.Builder;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; Microsoft.AspNetCore.Hosting;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; Microsoft.EntityFrameworkCore;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; Microsoft.Extensions.Configuration;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; Microsoft.Extensions.DependencyInjection;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; Microsoft.Extensions.Logging;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; Microsoft.Extensions.Options;

&lt;/span&gt;&lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; EFCoreRollback
{
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Startup
    {
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; Startup(IConfiguration configuration)
        {
            Configuration &lt;/span&gt;=&lt;span&gt; configuration;
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; IConfiguration Configuration { &lt;span&gt;get&lt;/span&gt;&lt;span&gt;; }

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; This method gets called by the runtime. Use this method to add services to the container.&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; ConfigureServices(IServiceCollection services)
        {
           &lt;/span&gt;
&lt;/pre&gt;
&lt;span&gt;&lt;span&gt;var&lt;/span&gt; connectString = Configuration.GetConnectionString(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Connection&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;); services.AddDbContext&lt;/span&gt;&amp;lt;BankContext&amp;gt;(options =&amp;gt;&lt;/span&gt;
&lt;pre&gt;
&lt;span&gt;
&lt;span&gt;            {
                options.UseMySql(connectString);
                options.UseLoggerFactory(&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;span&gt;&lt;span&gt;new&lt;/span&gt; LoggerFactory().AddConsole()); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;加入该句会把EF Core执行过程中的Sql语句在控制台输出&lt;/span&gt;&lt;/span&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt;            });&lt;/span&gt;
            services.AddMvc();
        }

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; This method gets called by the runtime. Use this method to configure the HTTP request pipeline.&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; Configure(IApplicationBuilder app, IHostingEnvironment env)
        {
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (env.IsDevelopment())
            {
                app.UseDeveloperExceptionPage();
            }

            app.UseMvc();
        }
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;创建数据库和表&lt;/h2&gt;
&lt;p&gt;打开NuGet报管理器下的程序包管理控制台&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://images2018.cnblogs.com/blog/1293736/201803/1293736-20180327220949734-35012957.gif&quot;&gt;&lt;img title=&quot;clip_image014[1]&quot; src=&quot;https://images2018.cnblogs.com/blog/1293736/201803/1293736-20180327220950260-171386117.gif&quot; alt=&quot;clip_image014[1]&quot; width=&quot;709&quot; height=&quot;264&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;先后执行以下两条语句&lt;/p&gt;
&lt;p&gt;Add-Migrition Init&lt;/p&gt;
&lt;p&gt;Updata-Database&lt;/p&gt;
&lt;p&gt;执行效果如图：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://images2018.cnblogs.com/blog/1293736/201803/1293736-20180327220951115-2031771879.gif&quot;&gt;&lt;img title=&quot;clip_image016[1]&quot; src=&quot;https://images2018.cnblogs.com/blog/1293736/201803/1293736-20180327220951992-820981884.gif&quot; alt=&quot;clip_image016[1]&quot; width=&quot;701&quot; height=&quot;553&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;执行成功后，Mysql数据库中多了Bank数据库和walets表，如图：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://images2018.cnblogs.com/blog/1293736/201803/1293736-20180327220952210-774391109.gif&quot;&gt;&lt;img title=&quot;clip_image018[1]&quot; src=&quot;https://images2018.cnblogs.com/blog/1293736/201803/1293736-20180327220952368-1722085653.gif&quot; alt=&quot;clip_image018[1]&quot; width=&quot;553&quot; height=&quot;187&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;添加控制器（业务代码）&lt;/h2&gt;
&lt;p&gt;在Controllers下新建一个BankController.cs，完整代码如下（核心部分为灰色背景）：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Collections.Generic;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Linq;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Threading.Tasks;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; EFCoreRollback.Models;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; Microsoft.AspNetCore.Mvc;

&lt;/span&gt;&lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; EFCoreRollback.Controllers
{
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; BankController : Controller
    {
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;readonly&lt;/span&gt;&lt;span&gt; BankContext _bankContext;
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; BankController(BankContext context)
        {
            _bankContext &lt;/span&gt;=&lt;span&gt; context;
        }
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 数据初始化
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span&gt;        [HttpGet]
        [Route(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;bangk/InitData&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)]
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;&lt;span&gt; InitData()
        {
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (_bankContext.Wallets.ToList().Count == &lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
            {
                Wallet AUser &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Wallet()
                {
                    Name &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;A&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                    Money &lt;/span&gt;= &lt;span&gt;100&lt;/span&gt;&lt;span&gt;
                };
                Wallet BUser &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Wallet()
                {
                    Name &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;B&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                    Money &lt;/span&gt;= &lt;span&gt;100&lt;/span&gt;&lt;span&gt;
                };
                _bankContext.Wallets.Add(AUser);
                _bankContext.Wallets.Add(BUser);
                _bankContext.SaveChanges();
            }
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Success&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
        }
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 进行转账
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
&lt;span&gt;        [HttpGet]
        [Route(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;bank/TransferAccounts&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)]
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;&lt;span&gt; TransferAccounts()
        {
            &lt;/span&gt;
&lt;/pre&gt;
&lt;span&gt;&lt;span&gt;using&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; transaction =&lt;/span&gt; &lt;span&gt;&lt;span&gt;_bankContext.Database.BeginTransaction()) {&lt;/span&gt; &lt;span&gt;try&lt;/span&gt;&lt;/span&gt;
&lt;pre&gt;
&lt;span&gt;
&lt;span&gt;                {
                    AAction();
                    BAction();

                    &lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果未执行到Commit()就执行失败遇到异常了，EF Core会自动进行数据回滚（前提是使用Using）&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;transaction.Commit(); }&lt;/span&gt; &lt;span&gt;catch&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;(Exception ex) {&lt;/span&gt; &lt;span&gt;//&lt;/span&gt; &lt;span&gt;TODO: Handle failure&lt;/span&gt; &lt;span&gt;return&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;ex.Message; } }&lt;/span&gt; &lt;span&gt;return&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;success&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;/span&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt;;&lt;/span&gt;
        }
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 从A的账户里面减掉10元
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;private&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; AAction()
        {
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; AUser = _bankContext.Wallets.Where(u =&amp;gt; u.Name == &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;A&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;).FirstOrDefault();
            AUser.Money &lt;/span&gt;-= &lt;span&gt;10&lt;/span&gt;&lt;span&gt;;
            _bankContext.SaveChanges();
        }
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 从B的账户里面加上10元
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;private&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; BAction()
        {
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; BUser = _bankContext.Wallets.Where(u =&amp;gt; u.Name == &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;B&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;).FirstOrDefault();
            BUser.Money &lt;/span&gt;+= &lt;span&gt;10&lt;/span&gt;&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; Exception(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;B的数据在保存前出现异常了&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;使用该方法模拟出现数据保存异常&lt;/span&gt;
&lt;span&gt;            _bankContext.SaveChanges();
        }

        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 展示钱包账户
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
&lt;span&gt;        [HttpGet]
        [Route(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;bank/Show&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)]
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; List&amp;lt;Wallet&amp;gt;&lt;span&gt; ShowWallets()
        {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; _bankContext.Wallets.ToList();
        }



    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;span&gt;通过InitData方法，我们把数据初始化，往数据库中插入A、B用户，他们钱包的初始金额都为100元。&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;通过TransferAccounts方法，我们执行转账操作，通过using引入了EF Core的Transaction，如果未执行到Commit()就执行失败遇到异常了，EF Core会自动进行数据回滚（前提是使用Using）。&lt;/p&gt;
&lt;p&gt;在执行AAction后，执行BAction，其中BAction在数据保存前，设置了一个异常。&lt;/p&gt;
&lt;h2&gt;执行接口（调用业务）&lt;/h2&gt;
&lt;p&gt;首先，其启动方式从IIS切换到WebAPi程序本身，为的是在控制台中看到输出的SQL语句。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://images2018.cnblogs.com/blog/1293736/201803/1293736-20180327220952604-763049690.png&quot;&gt;&lt;img title=&quot;QQ截图20180327205604&quot; src=&quot;https://images2018.cnblogs.com/blog/1293736/201803/1293736-20180327220952857-1335416063.png&quot; alt=&quot;QQ截图20180327205604&quot; width=&quot;546&quot; height=&quot;198&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;程序成功启动后，我们调用数据初始化接口，效果如图：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://images2018.cnblogs.com/blog/1293736/201803/1293736-20180327220953149-442494962.gif&quot;&gt;&lt;img title=&quot;clip_image020[1]&quot; src=&quot;https://images2018.cnblogs.com/blog/1293736/201803/1293736-20180327220953425-249853614.gif&quot; alt=&quot;clip_image020[1]&quot; width=&quot;800&quot; height=&quot;332&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;有了数据后，我们调用转账接口进行转账操作，如图：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://images2018.cnblogs.com/blog/1293736/201803/1293736-20180327220953689-818038325.gif&quot;&gt;&lt;img title=&quot;clip_image022[1]&quot; src=&quot;https://images2018.cnblogs.com/blog/1293736/201803/1293736-20180327220953978-528937754.gif&quot; alt=&quot;clip_image022[1]&quot; width=&quot;760&quot; height=&quot;263&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;进行转账操作，在A的账户成功减掉10元后，在B的账户加上10元保存时，由于我们设置了异常，程序跳出了。&lt;/p&gt;
&lt;p&gt;如果按照我们正常的思维方式，因为B在保存数据前异常了，所以最终结果因该是：A的账户少了10元，而B的账户金额未变。事实是不是这样呢？&lt;/p&gt;
&lt;p&gt;我们执行Show接口，展示A和B用户的钱包金额情况，可以看到，A和B的钱包金额都是100，&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://images2018.cnblogs.com/blog/1293736/201803/1293736-20180327220954210-1272456260.gif&quot;&gt;&lt;img title=&quot;clip_image024[1]&quot; src=&quot;https://images2018.cnblogs.com/blog/1293736/201803/1293736-20180327220954428-1766644796.gif&quot; alt=&quot;clip_image024[1]&quot; width=&quot;780&quot; height=&quot;236&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;为什么A的账户明明执行了减去10元的操作，而最后没有生效呢？原来是在执行transaction.Commit()之前，程序遇到异常了，它会自动调用transaction.Rollback()进行数据回滚，撤销A的减去10元这一操作。&lt;/p&gt;


&lt;p&gt;使用EF Core的Transaction要么所有操作全部成功，要么一个操作都不执行，可以保护数据安全。&lt;/p&gt;

&lt;p&gt;该项目的完整代码：&lt;a title=&quot;https://github.com/liuzhenyulive/EFCoreTransaction&quot; href=&quot;https://github.com/liuzhenyulive/EFCoreTransaction&quot;&gt;https://github.com/liuzhenyulive/EFCoreTransaction&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;如果您觉得有帮助，请点击推荐，谢谢。&lt;/p&gt;
&lt;pre&gt;
 
&lt;/pre&gt;</description>
<pubDate>Tue, 27 Mar 2018 14:10:00 +0000</pubDate>
<dc:creator>码农阿宇</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/CoderAyu/p/8660592.html</dc:identifier>
</item>
<item>
<title>职场新人碰到的几个常见误区 - 沐榕休</title>
<link>http://www.cnblogs.com/sankt/p/8658028.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/sankt/p/8658028.html</guid>
<description>&lt;p&gt;自己工作10+年了，大概5年前从技术转管理后，多少还是发现一些职场新人职业发展的问题。&lt;/p&gt;
&lt;p&gt;表现惊艳的新人肯定有，这种人往往在学校里面或者进入职场后就养成了一些非常良好的做事方式和工作习惯，工作效率高，产出多，甚至很短时间内就可以带新人，年度最佳新人当之无愧。&lt;/p&gt;
&lt;p&gt; 然而表现不到位的似乎更多一些，这些员工工作时间短（比如说应届毕业生或者不到两年）尤其性格内向的往往容易掉入错误泥潭，无法自拔，而这些错误的行为会对未来的发展造成非常负面的影响，从而导致职场发展往失败的道路上越走越远。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/373479/201803/373479-20180327224337653-1642330312.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;我分别从以下角度来阐述一下，&lt;/p&gt;
&lt;h3&gt;1. 不愿意和同事沟通，不愿意向同事多学习&lt;/h3&gt;
&lt;p&gt;这种员工大多比较内向或者性情有点高冷，须不知三人行，必有我师。多向同事学习，互通有无，对自己以后的发展有百利而无一害。有导师制或者老员工带，情况或许会有所改善，但如果内因没有改变，最终效果依旧不容乐观。&lt;/p&gt;
&lt;p&gt;技术开发工作中遇到一些技术难题非常正常，当然独立思考固然可贵，但是公司项目往往有一定的时间限制，优先解决问题永远放在第一位，而不是一个人在那里苦苦挣扎和搜索解决方案。如果时间压力不大，多思考一下也未尝不可。考虑到交付压力，这个时候就需要积极和同事，技术经理沟通，寻找解决思路，通常情况下，积极的沟通好过自己的单打独斗。也许同事或者老板的一句话，就应了那据古诗，山重水复疑无路，柳暗花明又一村。与此同时也和同事建立了更好的友谊，在老板心里也留下了做事有方法的好印象。&lt;/p&gt;

&lt;h3&gt;2.视野狭窄，只关注自己的一亩三分地，囿于角色.&lt;/h3&gt;
&lt;p&gt;这种情况其实在职场中多见不仅是初级程序员，甚至工作五年以上的程序员也有类似的问题，不是自己的事情不闻不问，而且危害更大。&lt;/p&gt;
&lt;p&gt;公司项目往往大而全，如果仅仅专注自己的那个角落，那么永远都是只见树木，不见森林。&lt;/p&gt;
&lt;p&gt;我相信没有老板会介意下面的程序员多承担一些责任，多做一些事情，最后给项目组多一些产出。&lt;/p&gt;
&lt;p&gt;既然老板不介意，那么就应该大胆的跳出自己的职责范围，多看看公司的其他项目，丰富自己的行业知识。&lt;/p&gt;
&lt;p&gt;职责外的事情，帮的上的不要躲避,，努力承担更多的东西。帮助别人就是提高自己，教学相长就是这个意思。况且你这次帮了别人，下次你的项目紧或者遇到技术难题了，受助之人肯定投桃报李，这样就形成了良性互助氛围，整个项目组的产出也同步提升了。&lt;/p&gt;
&lt;p&gt;一般来说，公司要提升一个人，最好的策略就是先让候选人做一些将来职位才需要做的事情。做的好，理所当然就要提拔。做的不好，则可以提前发现该员工的问题，暂缓提拔，需要多考察一段时间。这样的试错成本毫无疑问是最低的。&lt;/p&gt;

&lt;h3&gt;3.格局太小，对项目以外的技术视而不见，知识面陈旧，匮乏，技能极其单一。&lt;/h3&gt;
&lt;p&gt; 这里其实谈到了整个IT行业的问题，技术发展太快了。主要还是一个持续提升竞争力的一个话题。&lt;/p&gt;
&lt;p&gt;今天还是桌面开发，明天web开发就成为主流。&lt;/p&gt;
&lt;p&gt;好不容易掌握了关系型数据库，No-SQL成为主流。&lt;/p&gt;
&lt;p&gt;费了九牛二虎之力，熟练掌握Java, C#等静态语言，发现动态语言GO, Python成为云计算，机器学习的标配。&lt;/p&gt;
&lt;p&gt;移动开发昨天还是Object-C, Java, 今天就变成Swift, Kotlin。&lt;/p&gt;

&lt;p&gt;当然这里不是说让大家紧跟潮流，扼住时尚。那样做除了疲于奔命，累死在工作台，没有其他的结果。&lt;/p&gt;
&lt;p&gt;其实只要选择一个方向，纵深学习和积累，必有所成。&lt;/p&gt;

&lt;p&gt;比如说，你熟悉Java, 那么学习Kotlin绝对驾轻就熟。&lt;/p&gt;
&lt;p&gt;你有扎实的关系型数据库基础，那么掌握MangoDB肯定是件轻而易举的事情。&lt;/p&gt;
&lt;p&gt;编成思想和解决问题的思路都是相通的，平时的学习和工作中要善于思考，举一反三。并且做到与时俱进，及时更新自己的知识库和技能属性，保持良好的市场竞争力。&lt;/p&gt;
&lt;p&gt;做完事情后多思考，怎样做得更好，站在更好的要求上看问题.&lt;/p&gt;

&lt;p&gt;我举两个实际案例，&lt;/p&gt;
&lt;p&gt;程序员A在某国企里面，持续开发 Windows Form, 拖拉控件为主，对SQL Server数据库增删改查，时间长达五年之久，突然有一天打算离职，看看新的机会，以为有五年工作经验，可以很轻松找一个更好的工作。但是实际上求职之路异常艰辛，名义上的五年工作经验，其实就是极其单一的技能重复使用了五年。而且大环境也变了，主流已经是web开发，移动开发了。因为没有及时更新自己的知识库和技能储备，那么真要跳槽的时候可能已经跳不动了。&lt;/p&gt;

&lt;p&gt;程序员B在某外企，氛围比较安逸轻松，项目节奏慢，看似也作了不少项目，但做的项目几乎比较类似，难度一般，涉及面挺广，但技术点都是蜻蜓点水，浅尝辄止。这样过了三年，其实积累也是比较松散，知识的深度没有，核心技能并没有养成。&lt;/p&gt;

&lt;h3&gt;4.对未来没有想法，根本不考虑三五年自己要做什么&lt;/h3&gt;
&lt;p&gt;作者本人就犯过类似的错误，幡然醒悟的时候，三年时间已经过去了。&lt;/p&gt;
&lt;p&gt;程序员的职业生涯里面最初的三年其实是一个非常重要的打磨和规划时期，如果在迷茫中度过，那么事后想起肯定会扼腕叹息，奈何流水已经东去，再无复返之理。&lt;/p&gt;
&lt;p&gt;有目标，而没有具体的计划，那么就是一个愿景而已。&lt;/p&gt;
&lt;p&gt;建议不管是初级还是高级程序员，都应该积极向前辈或者直属老板沟通，看看他们有没有值得借鉴的规划和建议。&lt;/p&gt;
&lt;p&gt;职场大忌就是被动等待命运的安排，作者本人也是在职业生涯初期等待老板来帮我规划未来，到现在为止，十年过去了，也没有等到。。。&lt;/p&gt;
&lt;p&gt;所以老板不会主动帮助你规划未来，最重要的事情还是自己对自身的要求和期望。&lt;/p&gt;

&lt;h3&gt;5.没有意识到是给自己打工还是公司打工&lt;/h3&gt;
&lt;p&gt;这也是一个非常好的话题，很多人都没有想明白，甚至包括一些工作十年之久的程序员。&lt;/p&gt;
&lt;p&gt;想明白这一点，工作积极性明显就会好太多。自我驱动, 让工作更加有趣和有意义。&lt;/p&gt;
&lt;p&gt;国内知名的互联网公司大老板说过一句话，非常值得深思。&lt;/p&gt;
&lt;p&gt;“我每年付你20万，五年也就是100万。如果你在这里混日子，那么最后吃亏的肯定是你。你的五年青春就只值100万吗？”&lt;/p&gt;
&lt;p&gt;所以职场新人的主人翁意识一定要加强，你要持续提升自己的能力，持续强化自己创造价值的能力。&lt;/p&gt;
&lt;p&gt;举个例子，比如说现在公司支付你20万每年，那么你应该有目标能给公司带来远超过20万的收益，多多益善。&lt;/p&gt;
&lt;p&gt;你有这个能力，公司肯定也会对你相应回报。如果公司不给你升职加薪，那么一走了之，潇洒痛快。优质的人才从来都是抢着要。&lt;/p&gt;

&lt;h3&gt;6.不愿意走出舒适区域,不敢尝试新的东西&lt;/h3&gt;
&lt;p&gt;这点倒是因人而异，不可强求。这个话题其实有点广义。&lt;/p&gt;
&lt;p&gt;如果你在某个方向做的非常好，而且回报也不错，那么不愿意涉足其他领域也无可厚非。&lt;/p&gt;
&lt;p&gt;这个世界唯一不变的东西就是世界一直在改变。今天还有的岗位，明天也许就要消失。世界要抛弃你，都不会打一声招呼。&lt;/p&gt;

&lt;p&gt;举个例子，你在公司是SQL Server或者Oracle专家，但是公司计划转非关系型数据库，如果你害怕改变甚至拒绝改变，那么意味着你可能要错过另外一个全新的数据存储平台。进而错过很多机会，而那些勇于接受变化，顺应趋势的人肯定会获得更好的时代回报。&lt;/p&gt;

&lt;p&gt;又比如说，你现在用的技术在日常项目中都刚好够用，那么从改善用户体验和使用更加主流的技术角度看，是不是应该要尝试一些新的东西，同时也刷新了自己的技术栈，一举两得，何乐而不为呢？&lt;/p&gt;

&lt;p&gt;还有一个例子是一位资深程序员习惯了长期的慢节奏的工作氛围，因为公司改组被裁员，不过自身条件不错，很快就加入国内一家一线互联网公司，但是完全适应不了互联网快节奏，工作一段时间就以公司管理”混乱”，战略规划”经常”改变为借口离职了，接下来很长一段时间找不到一个合适自己的工作，加上中年已到，如果自身不积极调整，接下来的工作和生活肯定困难重重。&lt;/p&gt;

&lt;p&gt;最后再简单小结一下，职场新人需要做的就是从小事做起，学会吃亏，以结果为目标导向，日常工作中积极和同事，老板沟通。&lt;/p&gt;
&lt;p&gt;工作中要善于总结方法，经常更新问题的思考模式，对职业负责，对目标负责，对自己负责，脚踏实地，主动找事情做，而不是被动等事情来找你。&lt;/p&gt;
&lt;p&gt;相信职场新人如果能成功避开上面说的几个误区，那么在职业发展道路上就可以少走一些弯路，少犯一些错误，从而更快地实现自己的小目标。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/373479/201803/373479-20180327221401913-1809206973.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/sankt/p/8660884.html&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;最后如果觉得不错，可以移步赞赏页面支持作者发布更多原创文章。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;

</description>
<pubDate>Tue, 27 Mar 2018 14:09:00 +0000</pubDate>
<dc:creator>沐榕休</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/sankt/p/8658028.html</dc:identifier>
</item>
<item>
<title>canvas星空和图形变换 - starof</title>
<link>http://www.cnblogs.com/starof/p/8626422.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/starof/p/8626422.html</guid>
<description>&lt;p&gt;图形变换。&lt;/p&gt;

&lt;p&gt;先画一片canvas.width宽canvas.height高的黑色星空，再画200个随机位置，随机大小，随机旋转角度的星星。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('805f684c-034d-4f60-88a8-7cb841d59b28')&quot; readability=&quot;40&quot;&gt;&lt;img id=&quot;code_img_closed_805f684c-034d-4f60-88a8-7cb841d59b28&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_805f684c-034d-4f60-88a8-7cb841d59b28&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('805f684c-034d-4f60-88a8-7cb841d59b28',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_805f684c-034d-4f60-88a8-7cb841d59b28&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;75&quot;&gt;
&lt;pre&gt;
window.onload=&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; canvas=document.getElementById(&quot;canvas&quot;&lt;span&gt;);

    canvas.width&lt;/span&gt;=800&lt;span&gt;;
    canvas.height&lt;/span&gt;=800&lt;span&gt;;

    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; context=canvas.getContext(&quot;2d&quot;&lt;span&gt;);
    
    context.fillStyle&lt;/span&gt;=&quot;black&quot;&lt;span&gt;;
    context.fillRect(&lt;/span&gt;0,0&lt;span&gt;,canvas.width,canvas.height);

    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(&lt;span&gt;var&lt;/span&gt; i=0;i&amp;lt;200;i++&lt;span&gt;){
        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; r=Math.random()*10+10&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; x=Math.random()*&lt;span&gt;canvas.width;
        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; y=Math.random()*&lt;span&gt;canvas.height;
        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; a=Math.random()*360&lt;span&gt;;
        drawStar(context,x,y,r,r&lt;/span&gt;/2.0,a);
&lt;span&gt;    }
    
}        




&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;rot顺时针旋转的角度&lt;/span&gt;
&lt;span&gt;function&lt;/span&gt;&lt;span&gt; drawStar(ctx,x,y,r,R,rot){
    ctx.beginPath();
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;角度转弧度：除以180*PI&lt;/span&gt;
    &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;var&lt;/span&gt; i=0;i&amp;lt;5;i++&lt;span&gt;){
        ctx.lineTo(Math.cos((&lt;/span&gt;18+i*72-rot)/180*Math.PI)*R+x,
            -Math.sin((18+i*72-rot)/180*Math.PI)*R+y);
            ctx.lineTo(Math.cos((54+i*72-rot)/180*Math.PI)*r+x,
            -Math.sin((54+i*72-rot)/180*Math.PI)*r+y);
&lt;span&gt;    }

    ctx.closePath();

    ctx.fillStyle&lt;/span&gt;=&quot;#fb3&quot;&lt;span&gt;;
    ctx.strokeStyle&lt;/span&gt;=&quot;#fd5&quot;&lt;span&gt;;
    ctx.lineWidth&lt;/span&gt;=3&lt;span&gt;;
    ctx.lineJoin&lt;/span&gt;=&quot;round&quot;&lt;span&gt;;

    ctx.fill();
    ctx.stroke();
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt; 产生一个扁平化设计中200个星星的效果。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/315302/201803/315302-20180322203314588-2015131514.png&quot; alt=&quot;&quot; width=&quot;271&quot; height=&quot;241&quot;/&gt;&lt;/p&gt;

&lt;h2&gt;1、用标准路径+图形变换思想重构&lt;/h2&gt;
&lt;p&gt;上面drawStar函数承载的功能太多来，整个绘制路径的指定，同时把五角星的位移，大小，旋转多少度全部揉合在一个函数里了。&lt;/p&gt;
&lt;p&gt;假如需要变为画一个四角形？六角形？代码改起来就比较麻烦了。&lt;/p&gt;
&lt;p&gt;标准做法：修改函数结构。&lt;/p&gt;
&lt;p&gt;接口不变，省去了旋转角度，画一个标准星星。假设外圆半径是内圆半径的两倍，所以只需要传入一个小r。drawStar里调用一个startPath()函数来绘制一个标准五角星的路径。&lt;/p&gt;
&lt;p&gt;标准的五角星路径：只传入一个context，在(0,0)的位置绘制来一个大圆半径为1，同时没有任何偏移，任何旋转的的五角星。&lt;/p&gt;
&lt;p&gt;在drawStar里勾绘出标准五角星后再通过图形变换使得标准五角星的位移变成在(x,y)的位置，大小变成R这么大，同时旋转rot角度。再进行具体的绘制。&lt;/p&gt;
&lt;p&gt;这样一个设计的结构可以避免之前的问题。比如需求变成要画六角形，四角形，只需要把starPath()里面路径勾绘的代码进行相应的更改即可。&lt;/p&gt;
&lt;p&gt;更高级的复用：starPath()函数以参数的形式传入drawStar()中。这样drawStar可以叫drawSheap用户可以绘制任意的图形，只需要传入绘制图形的标准路径，变更的位移量，大小量，旋转量即可。 &lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;rot顺时针旋转的角度&lt;/span&gt;
&lt;span&gt;function&lt;/span&gt;&lt;span&gt; drawStar(ctx,x,y,r,R,rot){
    starPath(ctx);
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;绘制在(x,y)大小为R，旋转rot度的五角星&lt;/span&gt;
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;...&lt;/span&gt;
&lt;span&gt;}&lt;br/&gt;&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; starPath(ctx){
    ctx.beginPath();
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;角度转弧度：除以180*PI&lt;/span&gt;
    &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;var&lt;/span&gt; i=0;i&amp;lt;5;i++&lt;span&gt;){
        ctx.lineTo(Math.cos((&lt;/span&gt;18+i*72)/180*Math.PI),
            -Math.sin((18+i*72)/180*Math.PI));
            ctx.lineTo(Math.cos((54+i*72)/180*Math.PI),
            -Math.sin((54+i*72)/180*Math.PI));
&lt;span&gt;    }
    ctx.closePath();
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;总结：图形学里绘制先绘制标准路径，再通过图形变换成需求大小。&lt;/p&gt;
&lt;h2&gt;2，图形变换&lt;/h2&gt;
&lt;p&gt;三种基本操作：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;位移translate(x,y)&lt;/li&gt;
&lt;li&gt;旋转rotate(deg)&lt;/li&gt;
&lt;li&gt;缩放 scale(sx,sy)&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;translate会叠加&lt;/p&gt;
&lt;p&gt;绿色正方形位置经过2次translate后到达了(200,200)。并不是代码里看起来的(150,150)。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('1f81bf5e-627d-4993-a420-57b1f18edfff')&quot; readability=&quot;36.5&quot;&gt;&lt;img id=&quot;code_img_closed_1f81bf5e-627d-4993-a420-57b1f18edfff&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_1f81bf5e-627d-4993-a420-57b1f18edfff&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('1f81bf5e-627d-4993-a420-57b1f18edfff',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_1f81bf5e-627d-4993-a420-57b1f18edfff&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;68&quot;&gt;
&lt;pre&gt;
window.onload=&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; canvas=document.getElementById(&quot;canvas&quot;&lt;span&gt;);

    canvas.width&lt;/span&gt;=400&lt;span&gt;;
    canvas.height&lt;/span&gt;=400&lt;span&gt;;

    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; context=canvas.getContext(&quot;2d&quot;&lt;span&gt;);

    context.fillStyle&lt;/span&gt;=&quot;red&quot;&lt;span&gt;;
    context.translate(&lt;/span&gt;50,50&lt;span&gt;);
    context.fillRect(&lt;/span&gt;0,0,200,200&lt;span&gt;);

    context.fillStyle&lt;/span&gt;=&quot;green&quot;&lt;span&gt;;
    context.translate(&lt;/span&gt;150,150&lt;span&gt;);
    context.fillRect(&lt;/span&gt;0,0,200,200&lt;span&gt;);
}  &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/315302/201803/315302-20180322212351619-1083147652.png&quot; alt=&quot;&quot; width=&quot;234&quot; height=&quot;232&quot;/&gt;&lt;/p&gt;
&lt;p&gt;为了避免上述问题，&lt;span&gt;&lt;strong&gt;最佳实践&lt;/strong&gt;&lt;/span&gt;是使用图形变换之后，再反向操作把图形变换的结果逆转过来。如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('fae058ca-7c39-4a82-81c5-7423efddcf3f')&quot; readability=&quot;37.5&quot;&gt;&lt;img id=&quot;code_img_closed_fae058ca-7c39-4a82-81c5-7423efddcf3f&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_fae058ca-7c39-4a82-81c5-7423efddcf3f&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('fae058ca-7c39-4a82-81c5-7423efddcf3f',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_fae058ca-7c39-4a82-81c5-7423efddcf3f&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;70&quot;&gt;
&lt;pre&gt;
window.onload=&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; canvas=document.getElementById(&quot;canvas&quot;&lt;span&gt;);

    canvas.width&lt;/span&gt;=400&lt;span&gt;;
    canvas.height&lt;/span&gt;=400&lt;span&gt;;

    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; context=canvas.getContext(&quot;2d&quot;&lt;span&gt;);

    context.fillStyle&lt;/span&gt;=&quot;red&quot;&lt;span&gt;;
    context.translate(&lt;/span&gt;50,50&lt;span&gt;);
    context.fillRect(&lt;/span&gt;0,0,200,200&lt;span&gt;);
    context.translate(&lt;/span&gt;-50,-50);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;反向操作&lt;/span&gt;
&lt;span&gt;
    context.fillStyle&lt;/span&gt;=&quot;green&quot;&lt;span&gt;;
    context.translate(&lt;/span&gt;150,150&lt;span&gt;);
    context.fillRect(&lt;/span&gt;0,0,200,200&lt;span&gt;);
    context.translate(&lt;/span&gt;-150,-150);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;反向操作&lt;/span&gt;
}  
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/315302/201803/315302-20180322212807487-1540319853.png&quot; alt=&quot;&quot; width=&quot;235&quot; height=&quot;233&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;3，canvas状态的保存save()和恢复restore()&lt;/h2&gt;
&lt;p&gt;逆转图形变换太麻烦了，canvas提供了一个save()API,保存当前的图形状态，状态包括所有我们设置的状态，自然也包括图形变换的状态。&lt;/p&gt;
&lt;p&gt;在完成图形变换并且具体绘制以后，在最后再调用一次context.restore()。&lt;/p&gt;
&lt;p&gt;restore()和save()是成对出现的，restore()返回在save()时候canvas的所有状态， 这是一个非常好的保持canvas绘图状态的方法，在save()和restore()之间可以随意的更改canvas的状态而不影响后续的绘制效果。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;45&quot;&gt;
&lt;pre&gt;
window.onload=&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; canvas=document.getElementById(&quot;canvas&quot;&lt;span&gt;);

    canvas.width&lt;/span&gt;=400&lt;span&gt;;
    canvas.height&lt;/span&gt;=400&lt;span&gt;;

    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; context=canvas.getContext(&quot;2d&quot;&lt;span&gt;);

    &lt;span&gt;context.save();&lt;/span&gt;
    context.fillStyle&lt;/span&gt;=&quot;red&quot;&lt;span&gt;;
    context.translate(&lt;/span&gt;50,50&lt;span&gt;);
    context.fillRect(&lt;/span&gt;0,0,200,200&lt;span&gt;);
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;context.translate(-50,-50);//反向操作&lt;/span&gt;
&lt;span&gt;&lt;span&gt;    context.restore();&lt;/span&gt;

    context.save()
    context.fillStyle&lt;/span&gt;=&quot;green&quot;&lt;span&gt;;
    context.translate(&lt;/span&gt;150,150&lt;span&gt;);
    context.fillRect(&lt;/span&gt;0,0,200,200&lt;span&gt;);
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; context.translate(-150,-150);//反向操作&lt;/span&gt;
&lt;span&gt;    context.restore();
}   &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;Note&lt;/span&gt;&lt;/strong&gt;:绘制整体元素，特别是在其中使用图形变换的时候，都应该先save()一下，最终结束绘制时再restore()一下以保证canvas图形绘制的正确。&lt;/p&gt;

&lt;h2&gt;1、使用translate和rotate绘制固定大小星星的星空&lt;/h2&gt;
&lt;p&gt;没有用scale.&lt;/p&gt;
&lt;div readability=&quot;7&quot;&gt;
&lt;p&gt;ctx.translate(x,y);&lt;/p&gt;
&lt;p&gt;ctx.rotate(rot/180*Math.PI);&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('e2d76a16-d4d2-413a-b85e-7d0ce337b9ed')&quot; readability=&quot;40&quot;&gt;&lt;img id=&quot;code_img_closed_e2d76a16-d4d2-413a-b85e-7d0ce337b9ed&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_e2d76a16-d4d2-413a-b85e-7d0ce337b9ed&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('e2d76a16-d4d2-413a-b85e-7d0ce337b9ed',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_e2d76a16-d4d2-413a-b85e-7d0ce337b9ed&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;75&quot;&gt;
&lt;pre&gt;
window.onload=&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; canvas=document.getElementById(&lt;span&gt;&quot;canvas&quot;&lt;/span&gt;&lt;span&gt;);

    canvas.width&lt;/span&gt;=800&lt;span&gt;;
    canvas.height&lt;/span&gt;=800&lt;span&gt;;

    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; context=canvas.getContext(&lt;span&gt;&quot;2d&quot;&lt;/span&gt;&lt;span&gt;);
    
    context.fillStyle&lt;/span&gt;=&lt;span&gt;&quot;black&quot;&lt;/span&gt;&lt;span&gt;;
    context.fillRect(&lt;/span&gt;0,0&lt;span&gt;,canvas.width,canvas.height);

    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(&lt;span&gt;var&lt;/span&gt; i=0;i&amp;lt;200;i++&lt;span&gt;){
        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; r=Math.random()*10+10&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; x=Math.random()*&lt;span&gt;canvas.width;
        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; y=Math.random()*&lt;span&gt;canvas.height;
        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; a=Math.random()*360&lt;span&gt;;
        drawStar(context,x,y,r,a);
    }
    
}        


&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;rot顺时针旋转的角度&lt;/span&gt;
&lt;span&gt;function&lt;/span&gt;&lt;span&gt; drawStar(ctx,x,y,R,rot){
    
    ctx.save();

    ctx.translate(x,y);
    ctx.rotate(rot&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;180*Math.PI);
&lt;span&gt;    starPath(ctx);
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;绘制在(x,y)大小为R，旋转rot度的五角星&lt;/span&gt;
&lt;span&gt;
    ctx.fillStyle&lt;/span&gt;=&lt;span&gt;&quot;#fb3&quot;&lt;/span&gt;&lt;span&gt;;
    ctx.strokeStyle&lt;/span&gt;=&lt;span&gt;&quot;#fd5&quot;&lt;/span&gt;&lt;span&gt;;
    ctx.lineWidth&lt;/span&gt;=3&lt;span&gt;;
    ctx.lineJoin&lt;/span&gt;=&lt;span&gt;&quot;round&quot;&lt;/span&gt;&lt;span&gt;;

    ctx.fill();
    ctx.stroke();

    ctx.restore();
}


&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; starPath(ctx){
    ctx.beginPath();
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;角度转弧度：除以180*PI&lt;/span&gt;
    &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;var&lt;/span&gt; i=0;i&amp;lt;5;i++&lt;span&gt;){
        ctx.lineTo(Math.cos((&lt;/span&gt;18+i*72)&lt;span&gt;/&lt;/span&gt;180*Math.PI)*20,
            -Math.sin((18+i*72)&lt;span&gt;/&lt;/span&gt;180*Math.PI)*20);
            ctx.lineTo(Math.cos((54+i*72)&lt;span&gt;/&lt;/span&gt;180*Math.PI)*0.5*20,
            -Math.sin((54+i*72)&lt;span&gt;/&lt;/span&gt;180*Math.PI)*0.5*20);
&lt;span&gt;    }
    ctx.closePath();
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;效果和上面图片一样。&lt;/p&gt;
&lt;h2&gt;2、scale副作用&lt;/h2&gt;
&lt;p&gt;不仅放在大小，还会放大坐标，边框等。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;49&quot;&gt;
&lt;pre&gt;
 &lt;span&gt;var&lt;/span&gt; canvas=document.getElementById(&lt;span&gt;&quot;canvas&quot;&lt;/span&gt;&lt;span&gt;);

    canvas.width&lt;/span&gt;=400&lt;span&gt;;
    canvas.height&lt;/span&gt;=400&lt;span&gt;;

    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; context=canvas.getContext(&lt;span&gt;&quot;2d&quot;&lt;/span&gt;&lt;span&gt;);

    context.save();
    context.scale(&lt;/span&gt;1,1&lt;span&gt;);
    context.strokeRect(&lt;/span&gt;10,10,100,100&lt;span&gt;);
    context.restore();

    context.save()
    context.scale(&lt;/span&gt;2,2&lt;span&gt;,);
    context.strokeRect(&lt;/span&gt;10,10,100,100&lt;span&gt;);
    context.restore();

    context.save()
    context.scale(&lt;/span&gt;3,3&lt;span&gt;,);
    context.strokeRect(&lt;/span&gt;10,10,100,100&lt;span&gt;);
    context.restore();
}   &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/315302/201803/315302-20180327072740039-1195443209.png&quot; alt=&quot;&quot; width=&quot;257&quot; height=&quot;255&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;3， 应用scale绘制星空&lt;/h2&gt;
&lt;p&gt;坐标是通过translate变换的，始终是(0,0)所以scale后还是(0,0)。&lt;/p&gt;
&lt;p&gt;放弃外边框的绘制。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('51d62b17-0d86-45b7-9404-6d317c9e53ad')&quot; readability=&quot;40.5&quot;&gt;&lt;img id=&quot;code_img_closed_51d62b17-0d86-45b7-9404-6d317c9e53ad&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_51d62b17-0d86-45b7-9404-6d317c9e53ad&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('51d62b17-0d86-45b7-9404-6d317c9e53ad',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_51d62b17-0d86-45b7-9404-6d317c9e53ad&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;76&quot;&gt;
&lt;pre&gt;
window.onload=&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; canvas=document.getElementById(&lt;span&gt;&quot;canvas&quot;&lt;/span&gt;&lt;span&gt;);

    canvas.width&lt;/span&gt;=800&lt;span&gt;;
    canvas.height&lt;/span&gt;=800&lt;span&gt;;

    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; context=canvas.getContext(&lt;span&gt;&quot;2d&quot;&lt;/span&gt;&lt;span&gt;);
    
    context.fillStyle&lt;/span&gt;=&lt;span&gt;&quot;black&quot;&lt;/span&gt;&lt;span&gt;;
    context.fillRect(&lt;/span&gt;0,0&lt;span&gt;,canvas.width,canvas.height);

    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(&lt;span&gt;var&lt;/span&gt; i=0;i&amp;lt;200;i++&lt;span&gt;){
        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; r=Math.random()*10+10&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; x=Math.random()*&lt;span&gt;canvas.width;
        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; y=Math.random()*&lt;span&gt;canvas.height;
        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; a=Math.random()*360&lt;span&gt;;
        drawStar(context,x,y,r,a);
    }
    
}        


&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;rot顺时针旋转的角度&lt;/span&gt;
&lt;span&gt;function&lt;/span&gt;&lt;span&gt; drawStar(ctx,x,y,R,rot){
    
    ctx.save();

    ctx.translate(x,y);
    ctx.rotate(rot&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;180*Math.PI);
&lt;span&gt;    ctx.scale(R,R);

    starPath(ctx);
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;绘制在(x,y)大小为R，旋转rot度的五角星&lt;/span&gt;
&lt;span&gt;
    ctx.fillStyle&lt;/span&gt;=&lt;span&gt;&quot;#fb3&quot;&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;放弃外边框的绘制&lt;/span&gt;
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; ctx.strokeStyle=&quot;#fd5&quot;;&lt;/span&gt;
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; ctx.lineWidth=3;&lt;/span&gt;
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; ctx.lineJoin=&quot;round&quot;;&lt;/span&gt;
&lt;span&gt;
    ctx.fill();
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; ctx.stroke();&lt;/span&gt;
&lt;span&gt;
    ctx.restore();
}


&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; starPath(ctx){
    ctx.beginPath();
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;角度转弧度：除以180*PI&lt;/span&gt;
    &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;var&lt;/span&gt; i=0;i&amp;lt;5;i++&lt;span&gt;){
        ctx.lineTo(Math.cos((&lt;/span&gt;18+i*72)&lt;span&gt;/&lt;/span&gt;180*Math.PI),
            -Math.sin((18+i*72)&lt;span&gt;/&lt;/span&gt;180*Math.PI));
            ctx.lineTo(Math.cos((54+i*72)&lt;span&gt;/&lt;/span&gt;180*Math.PI)*0.5,
            -Math.sin((54+i*72)&lt;span&gt;/&lt;/span&gt;180*Math.PI)*0.5);
&lt;span&gt;    }
    ctx.closePath();
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;星星没有外边框。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/315302/201803/315302-20180327073748834-194598282.png&quot; alt=&quot;&quot; width=&quot;305&quot; height=&quot;304&quot;/&gt;&lt;/p&gt;

&lt;p&gt;图形变换的实质是对图形的顶点坐标的再计算。计算过程通过变换矩阵来完成。&lt;/p&gt;
&lt;p&gt;二维的变换矩阵是3*3，三维的变换矩阵是4*4。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/315302/201803/315302-20180327074052562-794770679.png&quot; alt=&quot;&quot; width=&quot;290&quot; height=&quot;208&quot;/&gt;&lt;/p&gt;
&lt;p&gt;使用transform(a,b,c,d,e,f)设置变换矩阵每次设置是在之前的基础上设置的。&lt;/p&gt;
&lt;p&gt;可以用setTransform(a,b,c,d,e,f))忽略掉之前所有的变换矩阵。先设置为单位矩阵再变换。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;69&quot;&gt;
&lt;pre&gt;
window.onload=&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; canvas=document.getElementById(&lt;span&gt;&quot;canvas&quot;&lt;/span&gt;&lt;span&gt;);

    canvas.width&lt;/span&gt;=400&lt;span&gt;;
    canvas.height&lt;/span&gt;=400&lt;span&gt;;

    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; context=canvas.getContext(&lt;span&gt;&quot;2d&quot;&lt;/span&gt;&lt;span&gt;);

    context.fillStyle&lt;/span&gt;=&lt;span&gt;&quot;red&quot;&lt;/span&gt;&lt;span&gt;;
    context.strokeStyle&lt;/span&gt;=&lt;span&gt;&quot;#058&quot;&lt;/span&gt;&lt;span&gt;;
    context.lineWidth&lt;/span&gt;=5&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;///////////////////////////&lt;/span&gt;
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; a c e&lt;/span&gt;
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; b d f &lt;/span&gt;
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 0 0 1&lt;/span&gt;
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;///////////////////////////&lt;/span&gt;
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; a,d 水平，垂直缩放&lt;/span&gt;
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; b,c 水平，垂直倾斜&lt;/span&gt;
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; e,f 水平，垂直位移&lt;/span&gt;
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;///////////////////////////&lt;/span&gt;
&lt;span&gt;    context.save();
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; context.transform(1,0,0,1,0,0);&lt;/span&gt;
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;transform级联操作&lt;/span&gt;
    context.transform(1,0,0,1,50,100&lt;span&gt;);
    context.transform(&lt;/span&gt;2,0,0,1.5,0,0&lt;span&gt;);
    context.transform(&lt;/span&gt;1,-0.2,-0.2,1,0,0&lt;span&gt;);
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;setTransform()只使用当前变换&lt;/span&gt;
    context.setTransform(1,0,0,1,100,100&lt;span&gt;);
    context.fillRect(&lt;/span&gt;50,50,100,100&lt;span&gt;);
    context.strokeRect(&lt;/span&gt;50,50,100,100&lt;span&gt;);
    context.restore();
} &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这部分内容和css3的动画的内容本质都是一样的，都是图形学的内容。&lt;/p&gt;
&lt;p&gt;css3动画可以参考我之前的博客：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/starof/p/4560076.html&quot;&gt;css3中变形与动画（一）&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/starof/p/4582367.html&quot;&gt;css3中变形与动画（二）&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/starof/p/4585324.html&quot;&gt;css3中变形与动画（三）&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;本文作者&lt;a href=&quot;http://www.cnblogs.com/starof/&quot; target=&quot;_blank&quot;&gt;starof&lt;/a&gt;,因知识本身在变化，作者也在不断学习成长，文章内容也不定时更新，为避免误导读者，方便追根溯源，请诸位转载注明出处：&lt;a id=&quot;Editor_Edit_hlEntryLink&quot; title=&quot;view: 星空和图形变换&quot; href=&quot;http://www.cnblogs.com/starof/p/8626422.html&quot; target=&quot;_blank&quot;&gt;http://www.cnblogs.com/starof/p/8626422.html&lt;/a&gt; 有问题欢迎与我讨论，共同进步。 &lt;/p&gt;
</description>
<pubDate>Tue, 27 Mar 2018 13:39:00 +0000</pubDate>
<dc:creator>starof</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/starof/p/8626422.html</dc:identifier>
</item>
</channel>
</rss>