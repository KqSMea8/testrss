<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>Python面向对象篇之元类，附Django Model核心原理 - gregory2017</title>
<link>http://www.cnblogs.com/gregoryli/p/7787518.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/gregoryli/p/7787518.html</guid>
<description>&lt;p&gt;关于元类，我写过一篇，如果你只是了解元类，看下面这一篇就足够了。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/gregoryli/p/7780913.html&quot; target=&quot;_blank&quot;&gt;Python面向对象之类的方法和属性&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;本篇是深度解剖，如果你觉得元类用不到，呵呵，那是因为你不了解Django。&lt;/p&gt;
&lt;p&gt;在Python中有一个type类，所有的类都是基于type类生成的，可谓万物之母。&lt;/p&gt;
&lt;p&gt;如此广袤无垠的python生态圈，都是由type产生出来的。&lt;/p&gt;
&lt;p&gt;Python面向对象总计包含五大部分：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;常用部分：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;3.class(类，或者叫实例生成器)&lt;/p&gt;
&lt;p&gt;4.instance(实例)&lt;/p&gt;
&lt;p&gt;5.实例的各种属性与方法，我们平常使用python时，调用的就是它们。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;不常用部分（类从何而来）：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1.type&lt;/p&gt;
&lt;p&gt;2.metaclass(元类，或者叫类生成器)&lt;/p&gt;
&lt;p&gt; 两种方式创建类：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 创建一个Hello类，拥有属性say_hello&lt;/span&gt;
&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Hello():
    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt; say_hello(self, name=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;gregory&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;):
        &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;( &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Hello, %s.&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;%&lt;span&gt; name)
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 从Hello类创建一个实例hello&lt;/span&gt;
hello =&lt;span&gt;Hello()
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 使用hello调用方法say_hello&lt;/span&gt;
&lt;span&gt;hello.say_hello()

&lt;/span&gt;&lt;span&gt;def&lt;/span&gt; func(self, name=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;gregory&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;):
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 创建函数func&lt;/span&gt;
    &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Hi, %s.&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;%&lt;span&gt; name)
Hi&lt;/span&gt;= type(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Hi&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, (object,), dict(say_hello=&lt;span&gt;func))
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 通过type创建Hi class&lt;/span&gt;
hello=&lt;span&gt;Hi()
hello.say_hello()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;效果一样的。&lt;/p&gt;
&lt;pre&gt;
Hi= type('Hi', (object,), dict(say_hello=func))
&lt;/pre&gt;
&lt;p&gt;第一个参数： 类名。我是谁。&lt;/p&gt;
&lt;p&gt;第二个参数：当前类的基类。我从哪里来，也就是我的“父类”，以上实例中我的父类是“object”——python中一种非常初级的类。&lt;/p&gt;
&lt;p&gt;第三个参数：类的成员。我要到哪里去，将需要调用的方法和属性包含到一个字典里，再作为参数传入。以上实例中，say_hello方法包装进了字典中。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;type可以直接生成类（class），但也可以先生成元类（metaclass），再使用元类批量定制类（class）。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;元类均被命名后缀为Metalass，元类的生命周期：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;46&quot;&gt;
&lt;pre&gt;
&lt;span&gt;class&lt;/span&gt;&lt;span&gt; SayMetaClass(type):
    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;元类是由“type”衍生而出，所以父类需要传入type。&lt;/span&gt;
    &lt;span&gt;def&lt;/span&gt; &lt;span&gt;__new__&lt;/span&gt;&lt;span&gt;(cls, name, bases, attrs):
        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;元类的操作都在 __new__中完成，它的第一个参数是将创建的类，之后的参数即是三大永恒命题：类名，基类，类的成员。&lt;/span&gt;
&lt;span&gt;
        attrs[&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;say_&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;+ name] =&lt;span&gt;lambda&lt;/span&gt; self, value, saying=name:&lt;span&gt;print&lt;/span&gt;(saying + &lt;span&gt;'&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;+ value +&lt;span&gt;'&lt;/span&gt;&lt;span&gt;!&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;创造属性和方法，由元类创建的类叫“Hello”，那创建时就自动有了一个叫“say_Hello”的类方法&lt;/span&gt;
        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 然后又将类的名字“Hello”作为默认参数saying，传到了方法里面。&lt;/span&gt;
        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 然后把hello方法调用时的传参作为value传进去，最终打印出来。&lt;/span&gt;

        &lt;span&gt;return&lt;/span&gt; type.&lt;span&gt;__new__&lt;/span&gt;&lt;span&gt;(cls, name, bases, attrs)
        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;传承类名，父类，属性&lt;/span&gt;

&lt;span&gt;class&lt;/span&gt; Hello(object, metaclass =&lt;span&gt;SayMetaClass):
    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 创建类，通过元类创建的类，第一个参数是父类，第二个参数是metaclass&lt;/span&gt;
    &lt;span&gt;pass&lt;/span&gt;&lt;span&gt;

hello &lt;/span&gt;=Hello()&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 创建实列&lt;/span&gt;
hello.say_Hello( &lt;span&gt;'&lt;/span&gt;&lt;span&gt;gregory&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 调用实例方法&lt;/span&gt;

&lt;span&gt;class&lt;/span&gt; Nihao(object,metaclass=&lt;span&gt;SayMetaClass):
    &lt;/span&gt;&lt;span&gt;pass&lt;/span&gt;&lt;span&gt;

nihao&lt;/span&gt;=&lt;span&gt;Nihao()
nihao.say_Nihao(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;greg 李&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;应用：Django的核心思想是“Object Relational Mapping”，即对象-关系映射，简称ORM。&lt;/p&gt;
&lt;p&gt;这是Django的一大难点，但学完了元类，一切变得清晰。你对Django的理解将更上一层楼！&lt;/p&gt;
&lt;h2&gt;通过元类创建ORM&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;72&quot;&gt;
&lt;pre&gt;
&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Field(object):
    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;__init__&lt;/span&gt;&lt;span&gt;(self, name, column_type):
        self.name &lt;/span&gt;=&lt;span&gt; name
        self.column_type &lt;/span&gt;=&lt;span&gt; column_type

    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;__str__&lt;/span&gt;&lt;span&gt;(self):
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;&amp;lt;%s:%s&amp;gt;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;% (self.&lt;span&gt;__class__&lt;/span&gt;.&lt;span&gt;__name__&lt;/span&gt;&lt;span&gt;,self.name)

&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; StringField(Field):
    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;__init__&lt;/span&gt;&lt;span&gt;(self, name):
        super(StringField,self).&lt;/span&gt;&lt;span&gt;__init__&lt;/span&gt;(name,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;varchar(100)&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)

&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; IntegerField(Field):
    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;__init__&lt;/span&gt;&lt;span&gt;(self , name):
        super(IntegerField,self).&lt;/span&gt;&lt;span&gt;__init__&lt;/span&gt;(name,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;bigint&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)


&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; ModelMetaclass(type):
    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;__new__&lt;/span&gt;&lt;span&gt;(cls, name, bases, attrs):
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; name==&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Model&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; type.&lt;span&gt;__new__&lt;/span&gt;&lt;span&gt;(cls, name, bases, attrs)
        &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Found model: %s&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; %&lt;span&gt; name)
        mappings &lt;/span&gt;=&lt;span&gt; dict()
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; k, v &lt;span&gt;in&lt;/span&gt;&lt;span&gt; attrs.items():
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; isinstance(v, Field):
                &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Found mapping: %s ==&amp;gt; %s&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; %&lt;span&gt; (k, v))
                mappings[k] &lt;/span&gt;=&lt;span&gt; v
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; k &lt;span&gt;in&lt;/span&gt;&lt;span&gt; mappings.keys():
            attrs.pop(k)
        attrs[&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;__mappings__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] = mappings &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 保存属性和列的映射关系&lt;/span&gt;
        attrs[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;__table__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] = name &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 假设表名和类名一致&lt;/span&gt;
        &lt;span&gt;return&lt;/span&gt; type.&lt;span&gt;__new__&lt;/span&gt;&lt;span&gt;(cls, name, bases, attrs)


&lt;/span&gt;&lt;span&gt;class&lt;/span&gt; Model(dict, metaclass=&lt;span&gt;ModelMetaclass):
    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;__init__&lt;/span&gt;(self, **&lt;span&gt;kwarg):
        super(Model, self).&lt;/span&gt;&lt;span&gt;__init__&lt;/span&gt;(**&lt;span&gt;kwarg)

    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;__getattr__&lt;/span&gt;&lt;span&gt;(self, key):
        &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt;:
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; self[key]
        &lt;/span&gt;&lt;span&gt;except&lt;/span&gt;&lt;span&gt; KeyError:
            &lt;/span&gt;&lt;span&gt;raise&lt;/span&gt; AttributeError(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;'Model' object has no attribute '%s'&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; %&lt;span&gt; key)

    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;__setattr__&lt;/span&gt;&lt;span&gt;(self, key, value):
        self[key] &lt;/span&gt;=&lt;span&gt; value

    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 模拟建表操作&lt;/span&gt;
    &lt;span&gt;def&lt;/span&gt;&lt;span&gt; save(self):
        fields &lt;/span&gt;=&lt;span&gt; []
        args &lt;/span&gt;=&lt;span&gt; []
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; k, v &lt;span&gt;in&lt;/span&gt; self.&lt;span&gt;__mappings__&lt;/span&gt;&lt;span&gt;.items():
            fields.append(v.name)
            args.append(getattr(self, k, None))
        sql &lt;/span&gt;= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;insert into %s (%s) values (%s)&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; % (self.&lt;span&gt;__table__&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;.join(fields), &lt;span&gt;'&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;.join([str(i) &lt;span&gt;for&lt;/span&gt; i &lt;span&gt;in&lt;/span&gt;&lt;span&gt; args]))
        &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;SQL: %s&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; %&lt;span&gt; sql)
        &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;ARGS: %s&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; %&lt;span&gt; str(args))


&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; User(Model):
    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 定义类的属性到列的映射：&lt;/span&gt;
    id = IntegerField(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
    name &lt;/span&gt;= StringField(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;username&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
    email &lt;/span&gt;= StringField(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;email&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
    password &lt;/span&gt;= StringField(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;password&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)

u &lt;/span&gt;= User(id=12345, name=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Gregory&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, email=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;292409083@qq.com&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, password=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;iamgreg&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
u.save()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这是Django中的Model版块核心原理！&lt;/p&gt;
&lt;p&gt;运行结果：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;44&quot;&gt;
&lt;pre&gt;
&lt;span&gt;Found model: User
Found mapping: id &lt;/span&gt;==&amp;gt; &amp;lt;IntegerField:id&amp;gt;&lt;span&gt;
Found mapping: name &lt;/span&gt;==&amp;gt; &amp;lt;StringField:username&amp;gt;&lt;span&gt;
Found mapping: email &lt;/span&gt;==&amp;gt; &amp;lt;StringField:email&amp;gt;&lt;span&gt;
Found mapping: password &lt;/span&gt;==&amp;gt; &amp;lt;StringField:password&amp;gt;&lt;span&gt;
SQL: insert into User(id,username,email,password) values (&lt;/span&gt;12345,Gregory,292409083&lt;span&gt;@qq.com,iamgreg)
ARGS: [&lt;/span&gt;12345, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Gregory&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;292409083@qq.com&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;iamgreg&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;]
&lt;/pre&gt;&lt;/div&gt;

</description>
<pubDate>Sun, 05 Nov 2017 07:23:00 +0000</pubDate>
<dc:creator>gregory2017</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/gregoryli/p/7787518.html</dc:identifier>
</item>
<item>
<title>web实现数据交互的几种常见方式 - 白菜白</title>
<link>http://www.cnblogs.com/zxt-17862802783/p/7787258.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/zxt-17862802783/p/7787258.html</guid>
<description>&lt;p&gt;      在当今社会，作为一名前端程序猿，并不是一昧的去制作静态页面就可以满足滴；你说你会制作网页，好吧，只能说你算是一个前端程序猿。但这是你作为一个程序猿最基本的能力，并不会为你进行加分；&lt;/p&gt;
&lt;p&gt;　　我们都明白，要想提高竞争力，提高自己的技能是十灰重要的。前后台的数据交互就是一个很好的加分项。今天，就带大家一起了解一下web前端实现数据交互的几种方式；&lt;/p&gt;

&lt;table border=&quot;0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;一、Ajax&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;作为一个前端程序猿，对于各种JS框架和各种库肯定不陌生。原生js的ajax以及jQuery的ajax都是十分常用的数据交互的方式；&lt;/p&gt;

&lt;h2&gt;&lt;span&gt;&lt;span class=&quot;autonum&quot; title=&quot;&quot; data-original-title=&quot;&quot;&gt;1.1&lt;/span&gt;&lt;span&gt;&lt;strong class=&quot;135brush&quot; data-brushtype=&quot;text&quot;&gt;原生JS的Ajax&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;大家可能对原生JS比较陌生，毕竟相对于jQuery的ajax,原生的确实有些复杂，不够jQuery的ajax是由原生的ajax封装而来。由此可见了解原生的ajax是十分必要的；&lt;/p&gt;
&lt;p&gt;首先，要了解异步的javascript和xml,核心对象为XMLHttpRequest.&lt;/p&gt;
&lt;p&gt;接下啦，给大家介绍XMLHttpRequest中的属性与方法：&lt;/p&gt;
&lt;p&gt;XMLHttpRequest属性：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1205848/201711/1205848-20171105140712966-953910580.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;二、XMLHttpRequest方法：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1205848/201711/1205848-20171105140740357-1039736025.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;接下来，把栗子中的步骤整理一下：&lt;/p&gt;
&lt;p&gt;第一步：获得XMLHttpRequest对象；&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
var ajax = new XMLHttpRequest();
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;第二步：设置状态监听函数&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
ajax.onreadystatechange = function(){}
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;第三步：open一个请求：&lt;/p&gt;
&lt;p&gt; 其中，第一个参数为传递方式：get/post;&lt;/p&gt;
&lt;p&gt;第二个参数：请求数据的url地址；&lt;/p&gt;
&lt;p&gt;第三个参数：true/false。true表示异步请求。false表示同步请求&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
ajax.open(&quot;GET&quot;,&quot;h5.json&quot;,true); 
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;第四步：send一个请求。可以发送对象和字符串，不需要传递数据发送null;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
ajax.send(null);
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;第五步，在监听函数中，判断readyState==4 &amp;amp;&amp;amp; status == 200表示请求成功；&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
if (ajax.readyState == 4 &amp;amp;&amp;amp; ajax.status == 200) {}
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;第六步，使用ajax.responseText、ajax.responseXML接收响应数据，并使用原生js操作DOM进行显示；&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
console.log(JSON.parse(ajax.responseText));
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;直接上栗子：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;text/javascript&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;第一步：获得XMLHttpRequest对象&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt;             &lt;span&gt;var&lt;/span&gt;&lt;span&gt; ajax &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; XMLHttpRequest();
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;             
&lt;span&gt;10&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;第二步：设置状态监听函数&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt; &lt;span&gt;            ajax.onreadystatechange &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;                //console.log(ajax.readyState);
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;                //console.log(ajax.status);
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;                 &lt;span&gt;//&lt;/span&gt;&lt;span&gt;第五步，在监听函数中，判断readyState==4 &amp;amp;&amp;amp; status == 200表示请求成功；&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (ajax.readyState &lt;/span&gt;&lt;span&gt;==&lt;/span&gt; &lt;span&gt;4&lt;/span&gt; &lt;span&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span&gt; ajax.status &lt;/span&gt;&lt;span&gt;==&lt;/span&gt; &lt;span&gt;200&lt;/span&gt;&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;                     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;第六步，使用ajax.responseText、ajax.responseXML接收响应数据，并使用原生js操作DOM进行显示&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt; &lt;span&gt;                    //console.log(ajax.responseText);
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;                    //console.log(ajax.responseXML);&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;返回不是XMl,显示null&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt; &lt;span&gt;                    console.log(JSON.parse(ajax.responseText));
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;                    //console.log(eval(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;ajax.responseText&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;));
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;                     
&lt;span&gt;22&lt;/span&gt;                     
&lt;span&gt;23&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;             
&lt;span&gt;26&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;第三步：open一个请求&lt;/span&gt;
&lt;span&gt;27&lt;/span&gt; &lt;span&gt;            ajax.open(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;GET&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;h5.json&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;); &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;true表示异步请求。false表示同步请求&lt;/span&gt;
&lt;span&gt;28&lt;/span&gt;             
&lt;span&gt;29&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;第四步：send一个请求。可以发送对象和字符串，不需要传递数据发送null;&lt;/span&gt;
&lt;span&gt;30&lt;/span&gt; &lt;span&gt;            ajax.send(&lt;/span&gt;&lt;span&gt;null&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;             
&lt;span&gt;32&lt;/span&gt;             &lt;span&gt;var&lt;/span&gt;&lt;span&gt; str &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;alert('111')&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; &lt;span&gt;            eval(str);
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; &lt;span&gt;            eval(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;alert('111')&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt;             
&lt;span&gt;36&lt;/span&gt;             &lt;span&gt;var&lt;/span&gt;&lt;span&gt; json1 &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;{'name':'zhangsan'}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt; &lt;span&gt;            console.log(eval(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;json1&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;));
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;39&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;40&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;41&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;42&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; json:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;58&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;[
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;        &quot;name&quot;: &quot;zhangsan&quot;,
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;        &quot;age&quot;: 17,
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;        &quot;hobby&quot;: [
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;            &quot;吃&quot;,
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;            &quot;喝&quot;,
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;            &quot;玩&quot;,
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;            &quot;乐&quot;
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;        ],
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;        &quot;score&quot;:{
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;            &quot;math&quot;:78,
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;            &quot;chinese&quot;:89
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;    },
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;        &quot;name&quot;: &quot;zhangsan&quot;,
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;        &quot;age&quot;: 17,
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;        &quot;hobby&quot;: [
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;            &quot;吃&quot;,
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;            &quot;喝&quot;,
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;            &quot;玩&quot;,
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;            &quot;乐&quot;
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; &lt;span&gt;        ],
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; &lt;span&gt;        &quot;score&quot;:{
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; &lt;span&gt;            &quot;math&quot;:78,
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; &lt;span&gt;            &quot;chinese&quot;:89
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; &lt;span&gt;    },
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; &lt;span&gt;        &quot;name&quot;: &quot;zhangsan&quot;,
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; &lt;span&gt;        &quot;age&quot;: 17,
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; &lt;span&gt;        &quot;hobby&quot;: [
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; &lt;span&gt;            &quot;吃&quot;,
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt; &lt;span&gt;            &quot;喝&quot;,
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt; &lt;span&gt;            &quot;玩&quot;,
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt; &lt;span&gt;            &quot;乐&quot;
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt; &lt;span&gt;        ],
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt; &lt;span&gt;        &quot;score&quot;:{
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt; &lt;span&gt;            &quot;math&quot;:78,
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt; &lt;span&gt;            &quot;chinese&quot;:89
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt;    
&lt;span&gt;45&lt;/span&gt; ]
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;结果：&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/1205848/201711/1205848-20171105132944076-648815804.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h2&gt;&lt;span&gt;&lt;span class=&quot;autonum&quot; title=&quot;&quot; data-original-title=&quot;&quot;&gt;1.1.2&lt;/span&gt;&lt;span&gt;&lt;strong class=&quot;135brush&quot; data-brushtype=&quot;text&quot;&gt;解析json的两种方式&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt; 在解析json的时候，通常我们使用JSON.parse()进行解析；但是，有很多程序猿使用eval()来解析json；&lt;/p&gt;
&lt;p&gt;1、eval函数用于将字符串中的代码解析出来并执行&lt;br/&gt;当使用eval函数解析JSON字符串时，需要在函数内部将JSON字符串用()拼接&lt;br/&gt;eval(&quot;(&quot;+json1+&quot;)&quot;)表示eval函数中的字符串不是用于执行，而是进行字符串解析&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
eval(&quot;(&quot;+json1+&quot;)&quot;) = JSON.parse(json1);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 举个小例子：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;var json1 = &quot;{'name':'zhangsan'}&quot;;
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;  console.log(eval(&quot;(&quot;+json1+&quot;)&quot;));
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1205848/201711/1205848-20171105135954935-562779123.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;h2&gt;&lt;span&gt;&lt;span class=&quot;autonum&quot; title=&quot;&quot; data-original-title=&quot;&quot;&gt;1.2&lt;/span&gt;&lt;span&gt;&lt;strong class=&quot;135brush&quot; data-brushtype=&quot;text&quot;&gt;jQuery中的Ajax&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt; $.ajax():是JQuery最底层的ajax函数，参数接收一个大对象。对象里面的属性和方法，表示ajax请求的相关设置：&lt;/p&gt;
&lt;p&gt;① url : 请求远程文件的路径&lt;br/&gt;② type： Ajax请求的类型，可选值 get/post&lt;br/&gt;③ data: 对象格式。向后台发送一个对象，表示传递的数据。&lt;br/&gt;常用与type为&quot;post&quot;的请求方式；&lt;br/&gt; 如果type为&quot;get&quot;，可以直接使用？追加在URL的后面。&lt;br/&gt;④ dataType ：预期后台返回什么类型的数据。&lt;br/&gt;&quot;text&quot;-字符串 &quot;json&quot;-JSON对象&lt;br/&gt; ⑤ success: 请求成功的回调函数。参数接受一个data，表示后台返回的数据。&lt;br/&gt; ⑥ error : 请求失败的时候的回调函数&lt;br/&gt; ⑦ statusCode ： 接受一个对象，对象的键值对是status状态码和对应的回调函数，表示当请求状态码是对应数&lt;br/&gt;字时，执行具体的操作函数。&lt;br/&gt;200-正常请求成功 404-页面没有找到 500-服务器内部错误。&lt;/p&gt;
&lt;p&gt;再再举个栗子：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;44&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;text/javascript&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
    $(&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
        
        $.ajax({
            url : &lt;/span&gt;&lt;span&gt;&quot;url&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
            type: &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;post&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
            data : {
                name : &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;李四&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                age : &lt;/span&gt;&lt;span&gt;28&lt;/span&gt;&lt;span&gt;
            },
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;dataType : &quot;json&quot;,&lt;/span&gt;
&lt;span&gt;            success : &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(data){
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; JQuery中吧JSON字符串转成JSON对象&lt;/span&gt;
                &lt;span&gt;var&lt;/span&gt;&lt;span&gt; jsons &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; $.parseJSON(data);
                console.log(jsons);
            },
            error: &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
                alert(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;请求失败啦！&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            },
            statusCode:{
                &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;404&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
                    alert(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;404表示页面没有找到&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
                },
                &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;500&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
                    alert(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;500表示服务器内部错误&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
                },
                &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;200&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
                    alert(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;200表示请求成功&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
                }
            }
        });
&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;&lt;span&gt;&lt;span class=&quot;autonum&quot; title=&quot;&quot; data-original-title=&quot;&quot;&gt;1.2.2&lt;/span&gt;&lt;span&gt;&lt;strong class=&quot;135brush&quot; data-brushtype=&quot;text&quot;&gt;$.post/$.get&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;在jQuery中，还进一步封装了Ajax，$.get();  $.post(); 这两个函数，是在$.ajax()的基础上进行封装而来。可以直接默认发送get请求或post请求；&lt;/p&gt;
&lt;p&gt;接受四个参数：&lt;br/&gt;① 请求的URL路径。 相当于$.ajax()里面的url；&lt;br/&gt;② 向后台传递的数据。 相当于$.ajax()里面的data；&lt;br/&gt;③ 请求成功的回调函数。 相当于$.ajax()里面的success；&lt;br/&gt;④ 预期返回的数据类型。 相当于$.ajax()里面的dataType；&lt;/p&gt;
&lt;p&gt;疯狂的举栗子：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;$.post(&quot;Surl&quot;,{data:&quot;aaa&quot;},function(data){
            console.log(data);
        },&quot;json&quot;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;table border=&quot;0&quot;&gt;&lt;tbody readability=&quot;1&quot;&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;二、AngularJS中的$http&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;在上篇的AngularJS中小编讲了一下$http,今天再来复习一遍；AngularJS中的$http的基本样式比较简单，&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;div class=&quot;cnblogs_code_toolbar&quot;&gt;&lt;span class=&quot;cnblogs_code_copy&quot;&gt;&lt;a title=&quot;复制代码&quot;&gt;&lt;img src=&quot;http://common.cnblogs.com/images/copycode.gif&quot; alt=&quot;复制代码&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;
&lt;pre&gt;
1 $http({
2 method:&quot;get/post&quot;, /*请求的方法*/
3 url:&quot; &quot; /*请求的地址*/
4 }).then(function(classes){
5 /*请求成功的回调函数*/
6 },function(){
7 /*请求失败的回调函数*/
8 });
&lt;/pre&gt;
&lt;div class=&quot;cnblogs_code_toolbar&quot;&gt;&lt;span class=&quot;cnblogs_code_copy&quot;&gt;&lt;a title=&quot;复制代码&quot;&gt;&lt;img src=&quot;http://common.cnblogs.com/images/copycode.gif&quot; alt=&quot;复制代码&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;直接上栗子：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;div class=&quot;cnblogs_code_toolbar&quot;&gt;&lt;span class=&quot;cnblogs_code_copy&quot;&gt;&lt;a title=&quot;复制代码&quot;&gt;&lt;img src=&quot;http://common.cnblogs.com/images/copycode.gif&quot; alt=&quot;复制代码&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;
&lt;pre&gt;
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
    &amp;lt;head&amp;gt;
        &amp;lt;meta charset=&quot;UTF-8&quot;&amp;gt;
        &amp;lt;title&amp;gt;&amp;lt;/title&amp;gt;
    &amp;lt;/head&amp;gt;
    &amp;lt;body ng-app=&quot;app&quot; ng-controller=&quot;ctrl&quot;&amp;gt;
        &amp;lt;table width=&quot;400px&quot;border=&quot;1&quot;style=&quot;border-collapse: collapse;&quot;&amp;gt;
            &amp;lt;tr&amp;gt;
                &amp;lt;th&amp;gt;姓名&amp;lt;/th&amp;gt;
                &amp;lt;th&amp;gt;年龄&amp;lt;/th&amp;gt;
                &amp;lt;th&amp;gt;兴趣&amp;lt;/th&amp;gt;
                &amp;lt;th&amp;gt;语文成绩&amp;lt;/th&amp;gt;
                &amp;lt;th&amp;gt;数学成绩&amp;lt;/th&amp;gt;
                &amp;lt;th&amp;gt;总分&amp;lt;/th&amp;gt;    
            &amp;lt;/tr&amp;gt;
            &amp;lt;tr ng-repeat=&quot;item in classes|orderBy:'score.chinese+score.math'&quot;&amp;gt;
                &amp;lt;td&amp;gt;{{item.name}}&amp;lt;/td&amp;gt;
                &amp;lt;td&amp;gt;{{item.age}}&amp;lt;/td&amp;gt;
                &amp;lt;td&amp;gt;{{item.hobby}}&amp;lt;/td&amp;gt;
                &amp;lt;td&amp;gt;{{item.score.math}}&amp;lt;/td&amp;gt;
                &amp;lt;td&amp;gt;{{item.score.chinese}}&amp;lt;/td&amp;gt;
                &amp;lt;td&amp;gt;{{item.score.math+item.score.chinese}}&amp;lt;/td&amp;gt;
            &amp;lt;/tr&amp;gt;
            
        &amp;lt;/table&amp;gt;
    &amp;lt;/body&amp;gt;
    
    &amp;lt;script type=&quot;text/javascript&quot; src=&quot;js/angular.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script type=&quot;text/javascript&quot;&amp;gt;
        angular.module(&quot;app&quot;,[])
        .controller(&quot;ctrl&quot;,function($scope,$http){
            $http({
                method:&quot;get&quot;, /*请求的方法*/
                url:&quot;AngularJs.json&quot; /*请求的地址*/
            }).then(function(classes){
                /*请求成功的回调函数*/
                $scope.classes=classes.data;
                
//                $scope.name = classes.data.name;
                alert(&quot;请求成功！&quot;);
            },function(){
                /*请求成功的回调函数*/
                alert(&quot;请求失败&quot;);
            });
            
    　　});&lt;br/&gt;&amp;lt;/script&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/pre&gt;
&lt;div class=&quot;cnblogs_code_toolbar&quot;&gt;&lt;span class=&quot;cnblogs_code_copy&quot;&gt;&lt;a title=&quot;复制代码&quot;&gt;&lt;img src=&quot;http://common.cnblogs.com/images/copycode.gif&quot; alt=&quot;复制代码&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;json：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;66&quot;&gt;
&lt;div class=&quot;cnblogs_code_toolbar&quot;&gt;&lt;span class=&quot;cnblogs_code_copy&quot;&gt;&lt;a title=&quot;复制代码&quot;&gt;&lt;img src=&quot;http://common.cnblogs.com/images/copycode.gif&quot; alt=&quot;复制代码&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;
&lt;pre&gt;
 1 [
 2     {
 3         &quot;name&quot;: &quot;张三&quot;,
 4         &quot;age&quot;: 17,
 5         &quot;hobby&quot;: [
 6             &quot;吃&quot;,
 7             &quot;喝&quot;,
 8             &quot;玩&quot;,
 9             &quot;乐&quot;
10         ],
11         &quot;score&quot;:{
12             &quot;math&quot;:48,
13             &quot;chinese&quot;:59
14         }
15     },
16     {
17         &quot;name&quot;: &quot;张三&quot;,
18         &quot;age&quot;: 17,
19         &quot;hobby&quot;: [
20             &quot;吃&quot;,
21             &quot;喝&quot;,
22             &quot;玩&quot;,
23             &quot;乐&quot;
24         ],
25         &quot;score&quot;:{
26             &quot;math&quot;:88,
27             &quot;chinese&quot;:99
28         }
29     },
30     {
31         &quot;name&quot;: &quot;张三&quot;,
32         &quot;age&quot;: 17,
33         &quot;hobby&quot;: [
34             &quot;吃&quot;,
35             &quot;喝&quot;,
36             &quot;玩&quot;,
37             &quot;乐&quot;
38         ],
39         &quot;score&quot;:{
40             &quot;math&quot;:68,
41             &quot;chinese&quot;:89
42         }
43     },
44     {
45         &quot;name&quot;: &quot;张三&quot;,
46         &quot;age&quot;: 17,
47         &quot;hobby&quot;: [
48             &quot;吃&quot;,
49             &quot;喝&quot;,
50             &quot;玩&quot;,
51             &quot;乐&quot;
52         ],
53         &quot;score&quot;:{
54             &quot;math&quot;:78,
55             &quot;chinese&quot;:89
56         }
57     }
58 ]
&lt;/pre&gt;
&lt;div class=&quot;cnblogs_code_toolbar&quot;&gt;&lt;span class=&quot;cnblogs_code_copy&quot;&gt;&lt;a title=&quot;复制代码&quot;&gt;&lt;img src=&quot;http://common.cnblogs.com/images/copycode.gif&quot; alt=&quot;复制代码&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1205848/201710/1205848-20171028165547023-1166844422.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;当然，他也有简写形式：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
$http.get('/someUrl', config).then(successCallback, errorCallback);
$http.post('/someUrl', data, config).then(successCallback, errorCallback);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;举个栗子：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;div class=&quot;cnblogs_code_toolbar&quot;&gt;&lt;span class=&quot;cnblogs_code_copy&quot;&gt;&lt;a title=&quot;复制代码&quot;&gt;&lt;img src=&quot;http://common.cnblogs.com/images/copycode.gif&quot; alt=&quot;复制代码&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;
&lt;pre&gt;
1             $http.get(&quot;angularJs.json&quot;,{/*需要传递到后台的参数*/}).then(function(){
2                 alert(&quot;请求成功！&quot;)
3                 },function(){
4                 alert(&quot;请求失败！&quot;);
5             })
6         })
7         
&lt;/pre&gt;
&lt;div class=&quot;cnblogs_code_toolbar&quot;&gt;&lt;span class=&quot;cnblogs_code_copy&quot;&gt;&lt;a title=&quot;复制代码&quot;&gt;&lt;img src=&quot;http://common.cnblogs.com/images/copycode.gif&quot; alt=&quot;复制代码&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;table border=&quot;0&quot;&gt;&lt;tbody readability=&quot;1&quot;&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;三、表单提交的get/post请求&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;在最开始的前端学习中，表单是很重要的一部分。要知道，表单的提交过程也是想后台的一种数据交互的过程；今天，就来看一下表单请求到PHP；&lt;/p&gt;

&lt;h2&gt;&lt;span&gt;&lt;span class=&quot;autonum&quot; title=&quot;&quot; data-original-title=&quot;&quot;&gt;3.1&lt;/span&gt;&lt;span&gt;&lt;strong class=&quot;135brush&quot; data-brushtype=&quot;text&quot;&gt;POST表单提交&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt; 在http中，有个HTTP POST变量：$_POST，其作用就是获取通过前台post发送的数据；&lt;/p&gt;
&lt;p&gt;再次疯狂的举栗子：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;http://libs.baidu.com/jquery/2.0.0/jquery.min.js&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt;         &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;&amp;lt;form action=&quot;03-chaoQuanJuArray.php&quot; method=&quot;get&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt;             用户名：&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;text&quot;&lt;/span&gt;&lt;span&gt; name&lt;/span&gt;&lt;span&gt;=&quot;username&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;        
&lt;span&gt;11&lt;/span&gt;             密码：&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;password&quot;&lt;/span&gt;&lt;span&gt; name&lt;/span&gt;&lt;span&gt;=&quot;pwd&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt;             &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;&amp;lt;input type=&quot;file&quot; name=&quot;file&quot; /&amp;gt;&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;button &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;btn&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;点击发送post请求&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;button&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt;         &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt;         
&lt;span&gt;16&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;text/javascript&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt; &lt;span&gt;            $(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;#btn&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;).click(&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;                 &lt;span&gt;var&lt;/span&gt;&lt;span&gt; username &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; $(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;input[name='username']&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;).val();
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;                 &lt;span&gt;var&lt;/span&gt;&lt;span&gt; pwd &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; $(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;input[name='pwd']&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;).val();
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;                $.post(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;03-chaoQuanJuArray.php&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,{
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;                     &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;username&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;:username,
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;                     &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;pwd&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;:pwd,
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;                },&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(data){
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; &lt;span&gt;                    alert(data);
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; &lt;span&gt;                })
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; &lt;span&gt;            });
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;28&lt;/span&gt; 
&lt;span&gt;29&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;30&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;PHP：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;?&lt;/span&gt;&lt;span&gt;php
    header(&quot;Content-Type:text/html;charset=utf-8&quot;);
if(isset($_POST[&quot;username&quot;])&amp;amp;&amp;amp;isset($_POST[&quot;pwd&quot;])){
        if($_POST[&quot;username&quot;]=='zhang'&amp;amp;&amp;amp;$_POST[&quot;pwd&quot;]==123){
            echo &quot;登录成功&quot;;
        }else{
            echo &quot;登录失败&quot;;
        }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1205848/201711/1205848-20171105150240201-1557693742.gif&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span&gt;&lt;span class=&quot;autonum&quot; title=&quot;&quot; data-original-title=&quot;&quot;&gt;3.2&lt;/span&gt;&lt;span&gt;&lt;strong class=&quot;135brush&quot; data-brushtype=&quot;text&quot;&gt;表单Get请求数据&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt; 最后疯狂的举例：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;http://libs.baidu.com/jquery/2.0.0/jquery.min.js&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;form &lt;/span&gt;&lt;span&gt;action&lt;/span&gt;&lt;span&gt;=&quot;03-chaoQuanJuArray.php&quot;&lt;/span&gt;&lt;span&gt; method&lt;/span&gt;&lt;span&gt;=&quot;get&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
            用户名：&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;text&quot;&lt;/span&gt;&lt;span&gt; name&lt;/span&gt;&lt;span&gt;=&quot;username&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;&lt;span&gt;        
            密码：&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;password&quot;&lt;/span&gt;&lt;span&gt; name&lt;/span&gt;&lt;span&gt;=&quot;pwd&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;&amp;lt;input type=&quot;file&quot; name=&quot;file&quot; /&amp;gt;&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;button &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;btn&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;点击发送post请求&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;button&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;form&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;text/javascript&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
            $(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;#btn&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;).click(&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; username &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; $(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;input[name='username']&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;).val();
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; pwd &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; $(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;input[name='pwd']&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;).val();
                $.post(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;03-chaoQuanJuArray.php&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,{
                    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;username&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;:username,
                    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;pwd&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;:pwd,
                },&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(data){
                    alert(data);
                })
            });
        &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; php:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;?&lt;/span&gt;&lt;span&gt;php
    header(&quot;Content-Type:text/html;charset=utf-8&quot;);
if(isset($_GET[&quot;username&quot;])&amp;amp;&amp;amp; isset($_GET[&quot;pwd&quot;])){
        if($_GET[&quot;username&quot;]=='zhang'&amp;amp;&amp;amp;$_GET[&quot;pwd&quot;]==123){
            echo &quot;登录成功&quot;;
        }else{
            echo &quot;登录失败&quot;;
        }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1205848/201711/1205848-20171105150846904-1466066205.gif&quot; alt=&quot;&quot;/&gt; &lt;/p&gt;

&lt;div readability=&quot;11&quot;&gt;
&lt;h4 class=&quot;135brush&quot;&gt;编者按&lt;/h4&gt;
&lt;p&gt;今天小编就给大家介绍着四种前后台数据交互的方式。还有，localStorage和sessionStorage中的数据也是数据交互的一种方式。&lt;/p&gt;
&lt;p&gt;而在数据交互的过程中，经常会需要进行跨域请求，小编之后会给大家讲解。&lt;/p&gt;
&lt;/div&gt;
</description>
<pubDate>Sun, 05 Nov 2017 07:22:00 +0000</pubDate>
<dc:creator>白菜白</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/zxt-17862802783/p/7787258.html</dc:identifier>
</item>
<item>
<title>Nginx实现动静分离 - Aubin</title>
<link>http://www.cnblogs.com/aubin/p/7787464.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/aubin/p/7787464.html</guid>
<description>&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1026632/201711/1026632-20171105150554623-486115682.png&quot;/&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;　Nginx的静态处理能力很强，但是动态处理能力不足，因此，在企业中常用动静分离技术。动静分离技术其实是采用代理的方式，在server{}段中加入带正则匹配的location来指定匹配项针对PHP的动静分离：静态页面交给Nginx处理，动态页面交给PHP-FPM模块或Apache处理。在Nginx的配置中，是通过location配置段配合正则匹配实现静态与动态页面的不同处理方式&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;部署wordpress实现整个网站的动静分离，实现如下要求：&lt;br/&gt;1.前端Nginx收到静态请求，直接从NFS中返回给客户端。&lt;br/&gt;2.前端Nginx收到动态请求转交给通过FastCGI交给PHP服务器处理。&lt;br/&gt;----如果得到静态结果直接从NFS取出结果交给Nginx然后返回给客户端。&lt;br/&gt;----如果需要数据处理PHP服务器连接数据库后将结果返回给Nginx&lt;br/&gt;3.前端Nginx收到图片请求以.jpg、.png、.gif等请求交给后端Images服务器处理。&lt;br/&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1026632/201711/1026632-20171105150605763-167708028.png&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1026632/201711/1026632-20171105150614560-810473873.png&quot;/&gt;&lt;/p&gt;

&lt;h3 id=&quot;nfs服务器配置&quot;&gt;1.NFS服务器配置&lt;/h3&gt;
&lt;pre&gt;
&lt;code&gt;vim /etc/exports
/app/blog   10.10.0.0/24(ro,sync,root_squash,no_all_squash) # 只允许内网网段挂载，提高安全性。
#
#
cd /app/blog                                                # 将wordpress文件解压
tar  -xvf  wordpress-4.8.1-zh_CN.tar.gz&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;nginx服务器配置&quot;&gt;2.Nginx服务器配置&lt;/h3&gt;
&lt;p&gt;首先Nginx与PHP服务器都要挂载NFS。实现统一部署方便管理&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;mount 10.10.0.72:/app/blog  /app/blog                   # 将NFS的/app/blog挂载至本地的/app/blog&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;然后再配置Nginx&lt;br/&gt;Nginx主要是server中的location的配置。&lt;strong&gt;配置location将.php结尾的交给PHP服务器。将.jpg、gif结尾的交给Image。其他配置按默认即可。&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;vim /etc/nginx/nginx.conf
http {
    log_format  main  '$remote_addr - $remote_user [$time_local] &quot;$request&quot; '
                      '$status $body_bytes_sent &quot;$http_referer&quot; '
                      '&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;';
    access_log  /var/log/nginx/access.log  main;
    sendfile                on;
    tcp_nopush           on;
    tcp_nodelay             on;
    keepalive_timeout   65;
    types_hash_max_size 2048;
    include             /etc/nginx/mime.types;
    default_type        application/octet-stream;
    include /etc/nginx/conf.d/*.conf;
    server {
        listen       80 default_server;
        server_name  www.shuaiguoxia.com;
        index index.php index.html;
        root /app/blog;                                     # 根目录为挂载的NFS的挂载点
        include /etc/nginx/default.d/*.conf;
        location ~* \.php$ {                                # location匹配将php结尾的交给PHP服务器
                fastcgi_pass 10.10.0.22:9000;
                fastcgi_index index.php;
                fastcgi_param SCRIPT_FILENAME /app/blog$fastcgi_script_name;
                include fastcgi_params;
        } 
        location ~* \.(jpg|gif)$ {                          # location匹配将图片交给Image处理
                proxy_pass http://10.10.0.23:80;            # Image服务器要开启web服务
        }
        error_page 404 /404.html;
            location = /40x.html {
        }
        error_page 500 502 503 504 /50x.html;
            location = /50x.html {
        }
    }&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;php服务器配置&quot;&gt;3.PHP服务器配置&lt;/h3&gt;
&lt;p&gt;PHP服务器的配置比较简单，主要讲PHP以FPM模式安装后进行简单的配置即可&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;yum install php-fpm php-mysql

vim /etc/php-fpm.d/www.conf
listen = 9000                                   # 只写监听端口，即监听所有IP
listen.allowed_clients = any                    # 允许所有IP进行访问。或者将这行注释。&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;mysql服务器&quot;&gt;4.MySQL服务器&lt;/h3&gt;
&lt;pre&gt;
&lt;code&gt;yum install marirdb-server

/usr/local/mysql/bin/myhsql_secure_installation         #MySql初始化脚本，以下为每一项的翻译
  是否设置root密码
  输入密码
  确认密码
  是否设置匿名用户
  是否允许root远程登录
  删除test数据库
  现在是否生效
  
mysql -uroot -p 

create database wpdb;                                   # 创建wp数据库
grant all on wpdb.* to wpadm@'10.10.%' idenfied by 'centos';    # 授权用户。用户不存在系统会自动创建&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;image服务器配置&quot;&gt;5.Image服务器配置&lt;/h3&gt;
&lt;pre&gt;
&lt;code&gt;yum install nginx                               # 安装Nginx

cd /app/image                                   # 将所有图片解压至此路径。图片的目录结构要保持原样
tar  -xvf  wordpress-4.8.1-zh_CN.tar.gz

 server {
        root      /app/image;                   # 仅仅修改根目录这一行即可。Httpd同理
        }                                       # 如果使用apache要注意在CentOS7下默认拒绝所有
nginx start                                     # 启动服务&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;配置wordpress&quot;&gt;6.配置wordpress&lt;/h3&gt;
&lt;pre&gt;
&lt;code&gt;cp wp-config-sample.php wp-config.php           # 复制一个模板文件后改名作为主配置文件

vim wp-config.php
/** WordPress数据库的名称 */  
define('DB_NAME', 'wpdb');                      # wpdb为MySQL中创建的数据库

/** MySQL数据库用户名 */
define('DB_USER', 'wpadm');                     # wpadm为MySQL中授权的用户

/** MySQL数据库密码 */
define('DB_PASSWORD', 'centos');                # 授权用户的密码

/** MySQL主机 */
define('DB_HOST', '10.10.0.24');                # MySQL主机地址&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;至此配置就已经完成。达到了图片从图片服务器返回，静态nginx直接返回，动态交给PHP进行处理。&lt;/p&gt;

&lt;pre&gt;
&lt;code&gt;1.前端Nginx要做好location匹配，将*.php与*.jpg等进行反向代理。
2.后端PHP服务器要修改配置文件，PHP自带配置文件只监听本地，且只允许本地访问 
3.后端Image服务器，不论是apache还是Nginx要开启WEB服务。根目录要指向图片根目录，且根目录下的图片要与原本图片文件目录结构一致。&lt;/code&gt;
&lt;/pre&gt;</description>
<pubDate>Sun, 05 Nov 2017 07:07:00 +0000</pubDate>
<dc:creator>Aubin</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/aubin/p/7787464.html</dc:identifier>
</item>
<item>
<title>脑残手贱：被NFS祸害的调度系统 - 运维笔记</title>
<link>http://www.cnblogs.com/liwanliangblog/p/7787266.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/liwanliangblog/p/7787266.html</guid>
<description>&lt;p&gt;&lt;strong&gt;建议：任何时候，都要三思而后行！！！&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;系统中采用slurm调度系统来进行并行计算。但是在GPU节点上，无论如何都无法启动slurmd，报插件初始化错误的故障。&lt;br/&gt;因此需要编译新的munge和slurm来确认是否是软件版本和操作系统版本不不兼容造成的。&lt;/p&gt;

&lt;p&gt;我们的系统，共享的应用环境放置在NAS上的NFS文件系统。我在A节点上已经卸载了NFS文件，然后挂载点（本地目录）上编译新版本，启动了slurm之后，还是有问题。&lt;br/&gt;因此需要更换一个节点B试试，直接把文件拷贝到B节点很方便。&lt;br/&gt;因此很熟练的&lt;code&gt;scp -r munge-0.5.12 B:$(pwd)&lt;/code&gt;，看着文档被覆盖，一切都这么顺利的时候，我的内心突然一阵惶恐！&lt;br/&gt;没错，NFS对于所有节点都是可读写的。我神不知鬼不觉地用A 节点上centos7编译的munge覆盖了B节点上NFS挂载的centos6编译的munge，那一刻，我的世界坍塌了。&lt;br/&gt;赶紧找个节点，提交我的测试算例。看着一堆的报错，那一刻我的心都碎了，是的没错，果然影响了在线的系统。完了，彻底完了！&lt;br/&gt;赶紧给领导打电话，说我手残了，系统被我搞垮了，领导安抚了一下我，赶紧把旧的恢复回去，slurm超时300s，来的及的话，还能够拯救。&lt;/p&gt;

&lt;p&gt;我赶忙找找我是否备份了之前的文件。&lt;br/&gt;幸运的是，我在A节点的本地目录下，CP了一份munge.0.5.12.nas_nfs，这就是之前的那个了，万幸！。只要将这个目录再次拷贝回去，应该是没有问题的。&lt;br/&gt;慌不择路。&lt;br/&gt;我scp -r munge.0.5.12.nas_nfs 到NAS上的同一个目录时，发现还是没有拯救回来，报错GLIBC的问题。完了，彻底完了。真的要重新编译吗？可是那耗时还是太长了。&lt;br/&gt;我cd 到munge的目录下，发现把 munge.0.5.12.nas_nfs拷贝到了 munge.0.5.12目录下，也就是说：scp这个目录用错了，没有覆盖，而是拷贝到目标目录下了。&lt;br/&gt;似乎有了希望。&lt;br/&gt;为了确保万无一失，我把munge-0.5.12下的东西全部删除，然后在munge.0.5.12.nas_nfs目录下&lt;code&gt;mv * ../&lt;/code&gt;。&lt;br/&gt;然后我批量处理所有节点，启动munged，从SUCCESS的字段我看到了自己的命可能保住了。&lt;br/&gt;然后sinfo看到了所有节点还是down。看来的确是slurm通信已经超时，slurm的控制器已经认为节点死了。只能够重新启动slurmd了&lt;br/&gt;批量执行之后，看到SUCCESS之后，我想这次虽然把系统拯救好了，但是那些排队的计算任务，已经无法再次复活了，只能等待重新提交了。&lt;/p&gt;

&lt;ol&gt;&lt;li&gt;备份。很重要很重要。假如没有备份的东西，我已经被枪杀了。&lt;/li&gt;
&lt;li&gt;细节。因为没有卸载B节点的NFS，所有直接覆盖了全部节点的共享目录，导致系统出错。&lt;/li&gt;
&lt;li&gt;冷静。还是那句话，故障不要紧，要紧的是无法修复故障。。&lt;/li&gt;
&lt;li&gt;沉着。 运维这个工作，平时没你啥事，有你啥事的时候就有可能是天塌下来的责任。&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;无论是测试还是上线，旁边最好坐个backuper，不然脑子不够使，毁了系统可能还在傻呵呵地笑&lt;br/&gt;运维最大的难度在于：脑残和手贱。以此为戒，绝不再犯！&lt;/p&gt;
</description>
<pubDate>Sun, 05 Nov 2017 06:19:00 +0000</pubDate>
<dc:creator>运维笔记</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/liwanliangblog/p/7787266.html</dc:identifier>
</item>
<item>
<title>计算机加电后操作系统启动过程 - ☆Ronny丶</title>
<link>http://www.cnblogs.com/ronny/p/7787259.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/ronny/p/7787259.html</guid>
<description>&lt;p&gt;揭开钢琴的盖子：操作系统好比一个架美丽的钢琴，我们可以用上面的琴键弹出优美的旋律。但是我们不能满足于只会弹奏，如果我们要更深入理解钢琴，必须打开钢琴的盖子，一探究竟。所以学习操作系统，不能停留上系统API的调用，需要能更好更高效的调用API，知道API的局限性与缺点，就必须打开操作系统的盖子，探究操作系统API下的底层原理。&lt;/p&gt;
&lt;p&gt;从我们按下电源键使得计算机通电，计算机的各个部件是怎么运行起来的呢。我们现在使用的计算都遵循冯诺依曼结构，在我们探讨计算机的启动前，先弄明白我们的计算机的结构。&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;计算机的核心工作部件是CPU，CPU内部从上电开始反复执行着两个动作：1）取址；2）执行&lt;/li&gt;
&lt;li&gt;计算机根据一系列的操作指令来执行不同的动作，这些指令就是计算机程序。&lt;/li&gt;
&lt;li&gt;计算机运行的程序是以二进制的方式存在内存中，程序中的数据与指令不加区别的都存储在内存上。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;imgcap&quot; readability=&quot;7&quot;&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/378920/201711/378920-20171105131053263-1887692903.png&quot;/&gt;&lt;p&gt;图1：从系统加电起所执行的程序&lt;/p&gt;
&lt;/div&gt;
&lt;ol&gt;&lt;li&gt;X86 PC岁开机时，CPU处于实模式，这时候内存的计算方式是 &lt;code&gt;段基址 &amp;lt;&amp;lt; 4 + 段内偏移&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;CPU的第一条指令是通过&lt;code&gt;CS：IP&lt;/code&gt;来取得，而此时CS=0xFFFF，IP=0x0000。这是硬件设定好的。&lt;/li&gt;
&lt;li&gt;所以最开始执行的指令地址就是0xFFFF0，这个内存地址映射在主板的BIOS ROM（只读存储区）中。&lt;/li&gt;
&lt;li&gt;ROM中的程序会检测RAM、键盘、显示器、软硬磁盘是否正确工作。同时会从地址0开始设置BIOS的中断向量表。&lt;/li&gt;
&lt;li&gt;ROM中的程序继续执行，将&lt;strong&gt;启动设备&lt;/strong&gt;磁盘0磁道0扇区，一个512字节的扇区读到内存0x07c00处。0x07c00应试是一个历史遗留的问题，后续把system模块拷贝到地址开始处时，预留的空间将不够，所以bootset需要把0x07c00这一块操作系统引导与设置模块拷贝走。这算是一个历史包袱。&lt;/li&gt;
&lt;li&gt;设置cs=0x07c0，ip=0x0000。&lt;/li&gt;
&lt;li&gt;ROM中的程序执行结束，转到0x07c00处开始执行。&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;启动设备是可以通过BIOS程序来设置的，信息写在CMOS中。CMOS（64B-128B）中存的还有实时钟，硬件配置信息等。(开始时按住Del键可以进入启动设置的配置界面，可以设置光盘启动或U盘启动等)。&lt;/p&gt;
&lt;div class=&quot;imgcap&quot; readability=&quot;7&quot;&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/378920/201711/378920-20171105131705388-2145812787.png&quot;/&gt;&lt;p&gt;图2：内核在磁盘上的分布情况&lt;/p&gt;
&lt;/div&gt;

&lt;ol&gt;&lt;li&gt;把0x7c00开始的512个字节，拷贝到0x90000处。（0x90000 - 0x90020）&lt;/li&gt;
&lt;li&gt;设置栈ss = 0x9000，sp = 0xff00，这里把sp设置的够大，防止栈的区域把下面的操作系统代码覆盖了。&lt;/li&gt;
&lt;li&gt;调用BIOS ox13中断，将第2-5个扇区拷贝到0x90020开始的内存处。如果出错，就反复读取。&lt;/li&gt;
&lt;li&gt;获取磁盘的参数：磁道数等&lt;/li&gt;
&lt;li&gt;打印字符串信息：system is loading&lt;/li&gt;
&lt;li&gt;读入system部分（几百个扇区），读入到内存为0x10000处。（在0x90000的下面）&lt;/li&gt;
&lt;li&gt;转到地址为0x90020的地址处执行，也就是开始执行setup部分的代码了。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;主要工作是完成操作系统启动前的设置工作。&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;读取光标的位置信息放在09000的头2个字节处。因为这时候bootsect模块的代码已经没有用了，可以覆盖了。&lt;/li&gt;
&lt;li&gt;读出扩展内存的大小，放在接着的2个字节处。&lt;/li&gt;
&lt;li&gt;获取显卡参数，硬盘参数等等。&lt;/li&gt;
&lt;li&gt;将system模块的内容从0x10000处开始移到0x00000处，即内存的起始位置。之所以Load进来的时候为什么不一次性放在0x00000处，是因为0x00000处开始放的bios中断。现在bios中断已经不需要了，所以可以覆盖了。&lt;/li&gt;
&lt;li&gt;这时候开始，BIOS的中断向量表已经被覆盖了，后面就不再需要BIOS的中断了。&lt;/li&gt;
&lt;li&gt;设置中断向量表与全局描述符表的一部分内容。&lt;/li&gt;
&lt;li&gt;把cr0的最后一位设置为1，也就是说从实模型进入保护模式。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;jmpi 0, 8&lt;/code&gt;。 cs = 8，取到的段基址其实是0x0000，那么这句话就是跳转到地址为0x00000的地方开始执行，也就是system模块的开始部分。&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;保护模式下地址翻译与中断处理的改变：&lt;/p&gt;
&lt;p&gt;cp:ip的翻译过程是：从cs的前12位取出GDT的偏移量（这里是1），从gtd的对应表项中取得基地址，再和ip合并为一个完整的地址。&lt;br/&gt;int n: n指明了IDT表中的序号。从IDT表中获取中断处理函数的入口地址。&lt;/p&gt;

&lt;p&gt;System的第一部分就是head.s部分的代码，这部分代码实际处于绝对地址0处开始的地方。该部分的代码是在保护模式下执行的，所使用的是AT&amp;amp;T格式的汇编指令与之前使用的as86汇编指令不同。这部分的代码主要完成了下面几件事情。&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;初步始中断描述符中的256项门描述符。&lt;/li&gt;
&lt;li&gt;检查A20地址线是否打开。&lt;a href=&quot;http://blog.sina.com.cn/s/blog_5d66c2780100bp8n.html&quot;&gt;关于A20地址线的解释&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;测试系统是否含有数据协处理器，并设置寄存器CR0对应的位。&lt;/li&gt;
&lt;li&gt;初始化内存页目录表，为内存分页管理作好准备工作。页目录表放在了绝对物理地址为0开始处，也就是head.s程序物理内存位置，程序会被覆盖掉。80286当时24根地址线，寻址16M，所以页表要能寻址16MB。如果内存页大小为4k，那页表就有4K个表项，一个表项按4个字节算，那页表就需要16K个字节（4页）。这里只用到了1级页表，在后续的发展中出现了二级页表，3级页表。&lt;/li&gt;
&lt;li&gt;最后跳转到system模块中的初始化程序init/main.c中继续执行。&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;head.s程序执行结束后，已经正式完成了内存页目录页表的设置，并重新设置了内核实际使用的中断描述符表idt和全局描述符表gtd。另外还为软盘驱动开辟了1kb的缓冲区。此时system模块在内存中的详细映像如下图所示：&lt;/p&gt;
&lt;div class=&quot;imgcap&quot; readability=&quot;7&quot;&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/378920/201711/378920-20171105131919138-1755896398.png&quot;/&gt;&lt;p&gt;图3：System内存中的映像示意图&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;整体上可以分类6个阶段，头2个阶段为boostset，中间3个阶段为setup，最后一个阶段为system的head模块。&lt;/p&gt;
&lt;div class=&quot;imgcap&quot; readability=&quot;7&quot;&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/378920/201711/378920-20171105132106185-1418392793.png&quot;/&gt;&lt;p&gt;图4：启动引导的整个过程中，内核在内存中的位置以及移动后的位置情况&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;[1] 《Linux内核完全剖析基于0.12内核》 赵炯著。&lt;br/&gt;[2] 网易云课堂，哈尔滨工业大学《操作系统之应用》 李治军。&lt;/p&gt;
</description>
<pubDate>Sun, 05 Nov 2017 05:41:00 +0000</pubDate>
<dc:creator>☆Ronny丶</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/ronny/p/7787259.html</dc:identifier>
</item>
<item>
<title>孩子们的游戏（圆圈中最后剩下的数字） - .....?</title>
<link>http://www.cnblogs.com/fanling999/p/7787213.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/fanling999/p/7787213.html</guid>
<description>&lt;h2 id=&quot;题目&quot;&gt;题目&lt;/h2&gt;
&lt;p&gt;孩子们的游戏，圆圈中最后剩下的数字。n 个小朋友，从 0 开始编号到 n-1，每次都删除第 m 个小朋友。其中删除以后从被删除结点的下一个结点开始从 0 开始编号。最后只剩下一个小朋友时游戏结束，这个小朋友的编号是多少？&lt;/p&gt;
&lt;h2 id=&quot;思考&quot;&gt;思考&lt;/h2&gt;
&lt;h3 id=&quot;方法1&quot;&gt;方法1:&lt;/h3&gt;
&lt;p&gt;循环链表模拟游戏过程。可以自己实现循环链表结构，也可以直接是用 C++ 的 list 来模拟循环链表。其中使用链表结构而不是数组结构是因为要保证删除／移动的时间复杂度为O(1)。空间复杂度：O(n)；时间复杂度：每次删除 1 个结点，需要删除 n-1 个结点，每删除一个结点需要循环 m 次，则复杂度为 O(n*m)。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意：分析时间复杂度时要结合使用的语言和数据结构的特性&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;c++ 中的 list 结构虽然能保证增加和删除节点的操作在常数时间内完成，但获取链表长度的操作确是线性的复杂度。为了避免这样的复杂度，在代码实现时候应该避免使用这个耗时的操作。list 中剩下最后一个结点，也就意味着我们要删除 n-1 个结点，使用 for 循环控制 n-1 次删除操作，而不是检查当前 list 的 size，以保证高效型。&lt;/p&gt;
&lt;h3 id=&quot;方法2&quot;&gt;方法2：&lt;/h3&gt;
&lt;p&gt;从数学的角度可以让求解更高效，下面将是比较复杂的分析推理过程。最优解，时间复杂度O(n)，空间复杂度O(1)。&lt;/p&gt;
&lt;p&gt;假设有关于 n 和 m 的函数 f(n, m)，表示从 n 个数字，seq=(0,1,..,n-1)，开始，每次删除第 m 个数字后&lt;strong&gt;最后剩下的数字&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;第一次删除操作：&lt;br/&gt;删除的数字为 k = (m-1)%n&lt;br/&gt;剩下的序列为 ，共 n-1 个数字，根据游戏规则重新调整得到序列 seq' = (k+1,...,n-1,0,1,..,k-1)，即从被删除的下一个结点开始编号，将 k+1 放到了序列的第一个位置。&lt;/p&gt;
&lt;p&gt;值得注意的是 seq' 与 seq 的形式不同，假设有新的关于 n 和 m 的函数 f'(n-1, m)，表示从 seq' 开始，每次删除第 m 个数字后&lt;strong&gt;最后剩下的数字&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;综上必然有：f(n,m) = f'(n-1,m)&lt;/p&gt;
&lt;p&gt;f' 函数是否与 f 函数有什么关系呢？？？&lt;/p&gt;
&lt;p&gt;对 seq' 重新编号：&lt;/p&gt;
&lt;table&gt;&lt;tbody&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;seq'&lt;/td&gt;
&lt;td&gt;k+1&lt;/td&gt;
&lt;td&gt;k+2&lt;/td&gt;
&lt;td&gt;...&lt;/td&gt;
&lt;td&gt;n-1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;...&lt;/td&gt;
&lt;td&gt;k-1&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;y=seq'-k-1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;...&lt;/td&gt;
&lt;td&gt;n-k-2&lt;/td&gt;
&lt;td&gt;-k-1&lt;/td&gt;
&lt;td&gt;-k&lt;/td&gt;
&lt;td&gt;...&lt;/td&gt;
&lt;td&gt;-2&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;seq''=y%n&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;...&lt;/td&gt;
&lt;td&gt;n-k-2&lt;/td&gt;
&lt;td&gt;n-k-1&lt;/td&gt;
&lt;td&gt;n-k&lt;/td&gt;
&lt;td&gt;...&lt;/td&gt;
&lt;td&gt;n-2&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;细节：&lt;br/&gt;seq' 有 n-1 个数，对应编号为 0,..,n-2。k+1 编号为 0，也就是以 k+1 为基准对序列重新编号，那么对于序列中的任意一个数 x，编号为 y = x-(k+1) = x-k-1。&lt;br/&gt;当 x 取 [0,..,k-1] 时，y 为负数，对 n 取模，可以将数映射到 [0,n] 的范围内，并保证新序列依旧有序。&lt;/p&gt;
&lt;p&gt;综上：从 f' 函数中的序列 seq' 进行映射 g(x) = (x-k-1)%n，可以得到类似 seq 的序列 seq''=(0,1,..,n-2)，是 f(n,m) 的子问题 f(n-1,m)。&lt;/p&gt;
&lt;p&gt;g(x) = (x-k-1)%n 的逆映射为 g'(x) = (x+k+1)%n。（可以将这一过程想象成循环移位的过程也就好理解了，原的映射是在 x 的基础上向左边循环移 （k+1）位，那么逆过程就是在原来的基础上向右循环移 (k+1)，左移为“减”，右移为“加”）。&lt;/p&gt;
&lt;p&gt;根据 g(x) 和 g'(x) 我们可以将 f 和 f' 联系起来&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;f(n,m) = f'(n-1,m) 
       = g'(f(n-1, m)) ..... f'(n-1,m) = f(n-1,m)，参考上文分析
       = [f(n-1, m)+k+1]%n ...... f(n-1,m) 带入 g'
       = [f(n-1, m)+(m-1)%n+1]%n ...... k = (m-1)%n  带入
       = [f(n-1, m)+m]%n
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;细节，[f(n-1, m)+(m-1)%n+1]%n 的展开：&lt;br/&gt;由题目肯定有：0&amp;lt;=f(n-1, m)&amp;lt;=n-1，可以写成 f(n-1, m)%n，显然有 1 = 1%n&lt;br/&gt;则有：[f(n-1, m)+(m-1)%n+1]%n = [f(n-1, m)%n+(m-1)%n+1%n]%n = [f(n-1, m)+(m-1)+1]%n = [f(n-1, m)+m]%n&lt;/p&gt;
&lt;p&gt;综上可以得到递归式：&lt;/p&gt;
&lt;p&gt;当 n &amp;gt; 1 时： f(n,m) = [f(n-1, m)+m]%n&lt;br/&gt;当 n = 1 时： f(n,m)=0。&lt;/p&gt;
&lt;p&gt;接下来的代码就好实现了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;总体思路：将问题抽象成函数表达式，问题拆解，能否找到重叠子问题，递归求解？&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;code&quot;&gt;code&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;注意不合法情况，即边界条件的检查&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;22&quot;&gt;
&lt;pre class=&quot;sourceCode cpp&quot;&gt;
&lt;code class=&quot;sourceCode cpp&quot;&gt;
&lt;span class=&quot;ot&quot;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;#include &amp;lt;vector&amp;gt;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;#include &amp;lt;algorithm&amp;gt;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;#include &amp;lt;list&amp;gt;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;namespace&lt;/span&gt; std;

&lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; Solution{
&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt;:
    &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; LastRemaining_Solution(&lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; n, &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; m){
        &lt;span class=&quot;co&quot;&gt;//return LastRemainingList(n, m);&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; LastRemainingDynamic(n, m);
    }

    &lt;span class=&quot;co&quot;&gt;// time-O(m*n), spcae-O(n)&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; LastRemainingList(&lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; n, &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; m){
        &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt;(n &amp;lt;= &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt; || m &amp;lt;= &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;)
            &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;-1&lt;/span&gt;;
        list&amp;lt;&lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt;&amp;gt; children;
        &lt;span class=&quot;kw&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; i=&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;; i&amp;lt;n; i++){&lt;span class=&quot;co&quot;&gt;// no. from 0 to (n-1)&lt;/span&gt;
            children.push_back(i);
        }

        &lt;span class=&quot;kw&quot;&gt;auto&lt;/span&gt; it = children.begin(); &lt;span class=&quot;co&quot;&gt;// no. 0&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; k=&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;; k&amp;lt;n&lt;span class=&quot;dv&quot;&gt;-1&lt;/span&gt;; k++){
            &lt;span class=&quot;co&quot;&gt;// Note: while(children.size() &amp;gt; 1) is not appropriate, because the complexity of children.size() is up to linear&lt;/span&gt;
            &lt;span class=&quot;co&quot;&gt;// until now, it point to the 0-th child&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; i=&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;; i&amp;lt;m; i++){ &lt;span class=&quot;co&quot;&gt;// loop from th 1-th child to m-1&lt;/span&gt;
                it++;
                &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt;(it == children.end())
                    it = children.begin();
            }

            &lt;span class=&quot;co&quot;&gt;// until now, it point to the (m-1)-th child&lt;/span&gt;
            it = children.erase(it); &lt;span class=&quot;co&quot;&gt;// erase will return the following iterator&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt;(it == children.end())
                it = children.begin(); 
        }

        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; children.front();
    }

    &lt;span class=&quot;co&quot;&gt;// time-O(n), space-O(1)&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; LastRemainingDynamic(&lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; n, &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; m){
        &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt;(n&amp;lt;=&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt; || m&amp;lt;=&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;)
            &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;-1&lt;/span&gt;;

        &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; f = &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;; &lt;span class=&quot;co&quot;&gt;// f[1,m] = 0&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; i=&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;; i&amp;lt;=n; i++){
            &lt;span class=&quot;co&quot;&gt;// calculate f[i,m]&lt;/span&gt;
            f = (f+m)%i;
        }

        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; f;
    }
};

&lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; main()
{
    &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;;
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
</description>
<pubDate>Sun, 05 Nov 2017 05:20:00 +0000</pubDate>
<dc:creator>.....?</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/fanling999/p/7787213.html</dc:identifier>
</item>
<item>
<title>给你1000位美女照片，你如何选出5位最漂亮的 - 紫薯Mr</title>
<link>http://www.cnblogs.com/haosun/p/7787092.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/haosun/p/7787092.html</guid>
<description>
&lt;p&gt;老板给了你1000张美女model照片，让你选5位出来参加展会，请问你如何选？&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/432946/201711/432946-20171105114003091-2062161308.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;A：我会嗖嗖嗖过一遍，然后随机挑5张顺眼的。&lt;/p&gt;
&lt;p&gt;紫薯：还不如让老板随机选顺眼的。 &lt;/p&gt;
&lt;p&gt;B：开个小组会，集合大家的意见选5个最漂亮的。&lt;/p&gt;
&lt;p&gt;紫薯：你真不在乎老板想看到哪几位美女么？&lt;/p&gt;
&lt;p&gt;C：随机选5个身材满足标准、容貌可佳的就可以了。&lt;/p&gt;
&lt;p&gt;紫薯：你的决策也很随机哇。&lt;/p&gt;
&lt;p&gt;紫薯觉得：我们需要考虑老板最喜欢长成什么样的女生，需要知道来看台的客户对美女的偏好，要知道哪些美女的长相与产品、场景更相配。&lt;/p&gt;
&lt;p&gt;&lt;img title=&quot;&quot; src=&quot;http://www.adbtime.com/store/thumbs/2017/1104/04233237blpc.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;所以...最好还是用上图像识别技术，让“万能”的算法帮你搞定，不然搞完这些保证你看到美女就想吐。&lt;/p&gt;
&lt;p&gt;为了简单起见，这里只考虑老板喜好这一个因素。因为无论因素多少，我们只需要确定一个标准美女便可。&lt;/p&gt;
&lt;p&gt;紫薯的解决方案：&lt;/p&gt;
&lt;p&gt;第一步：紫薯：“老板，你觉得哪个明星最漂亮？” 老板：“ 孙俪”。&lt;/p&gt;
&lt;p&gt;第二步：小叔花了3秒钟找了张孙俪姐姐的照片。&lt;/p&gt;
&lt;p&gt;&lt;img title=&quot;&quot; src=&quot;http://www.adbtime.com/store/thumbs/2017/1104/04233439bxxk.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;第三步：又花了3秒钟把自己的那套人脸识别、人脸相似度匹配的软件程序打开。(mac pro,)&lt;/p&gt;
&lt;p&gt;第四步：跑程序自动匹配从1000张原始图片中抠出人脸结果，花了30分钟，这期间我喝了个茶看看了远处的风景。&lt;/p&gt;
&lt;div&gt;
&lt;div id=&quot;highlighter_877375&quot; class=&quot;syntaxhighlighter python&quot;&gt;
&lt;table border=&quot;0&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody readability=&quot;4&quot;&gt;&lt;tr readability=&quot;8&quot;&gt;&lt;td class=&quot;gutter&quot;&gt;
&lt;p&gt;1&lt;/p&gt;
&lt;p&gt;2&lt;/p&gt;
&lt;p&gt;3&lt;/p&gt;
&lt;p&gt;4&lt;/p&gt;
&lt;p&gt;5&lt;/p&gt;
&lt;p&gt;6&lt;/p&gt;
&lt;p&gt;7&lt;/p&gt;
&lt;p&gt;8&lt;/p&gt;
&lt;p&gt;9&lt;/p&gt;
&lt;p&gt;10&lt;/p&gt;
&lt;p&gt;11&lt;/p&gt;
&lt;p&gt;12&lt;/p&gt;
&lt;p&gt;13&lt;/p&gt;
&lt;p&gt;14&lt;/p&gt;
&lt;p&gt;15&lt;/p&gt;
&lt;p&gt;16&lt;/p&gt;
&lt;p&gt;17&lt;/p&gt;
&lt;p&gt;18&lt;/p&gt;
&lt;p&gt;19&lt;/p&gt;
&lt;p&gt;20&lt;/p&gt;
&lt;/td&gt;
&lt;td class=&quot;code&quot; readability=&quot;8.5&quot;&gt;
&lt;div class=&quot;container&quot; readability=&quot;16&quot;&gt;
&lt;p&gt;&lt;code class=&quot;python plain&quot;&gt;......&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python plain&quot;&gt;modelin&lt;/code&gt;&lt;code class=&quot;python keyword&quot;&gt;/&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;1&lt;/code&gt; &lt;code class=&quot;python plain&quot;&gt;(&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;9&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;)(&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;8&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;).jpg&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python plain&quot;&gt;modelin&lt;/code&gt;&lt;code class=&quot;python keyword&quot;&gt;/&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;1&lt;/code&gt; &lt;code class=&quot;python plain&quot;&gt;(&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;9&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;)(&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;9&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;).jpg&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python plain&quot;&gt;modelin&lt;/code&gt;&lt;code class=&quot;python keyword&quot;&gt;/&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;1&lt;/code&gt; &lt;code class=&quot;python plain&quot;&gt;(&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;9&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;).jpg&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python plain&quot;&gt;modelin&lt;/code&gt;&lt;code class=&quot;python keyword&quot;&gt;/&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;Alyson&lt;/code&gt;&lt;code class=&quot;python keyword&quot;&gt;-&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;Hannigan&lt;/code&gt;&lt;code class=&quot;python keyword&quot;&gt;-&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;5.jpg&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python plain&quot;&gt;modelin&lt;/code&gt;&lt;code class=&quot;python keyword&quot;&gt;/&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;Alyson_Hannigan_200512.jpg&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python plain&quot;&gt;modelin&lt;/code&gt;&lt;code class=&quot;python keyword&quot;&gt;/&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;fangbingbing.jpg&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python plain&quot;&gt;modelin&lt;/code&gt;&lt;code class=&quot;python keyword&quot;&gt;/&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;gaoyuanyuan.jpg&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python plain&quot;&gt;modelin&lt;/code&gt;&lt;code class=&quot;python keyword&quot;&gt;/&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;libingbing.jpg&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python plain&quot;&gt;modelin&lt;/code&gt;&lt;code class=&quot;python keyword&quot;&gt;/&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;linqingxia.jpg&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python plain&quot;&gt;modelin&lt;/code&gt;&lt;code class=&quot;python keyword&quot;&gt;/&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;linzhiling.jpg&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python plain&quot;&gt;modelin&lt;/code&gt;&lt;code class=&quot;python keyword&quot;&gt;/&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;liushishi.jpg&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python plain&quot;&gt;modelin&lt;/code&gt;&lt;code class=&quot;python keyword&quot;&gt;/&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;liuyifei.jpg&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python plain&quot;&gt;modelin&lt;/code&gt;&lt;code class=&quot;python keyword&quot;&gt;/&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;lizhi.jpg&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python plain&quot;&gt;modelin&lt;/code&gt;&lt;code class=&quot;python keyword&quot;&gt;/&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;Miley&lt;/code&gt;&lt;code class=&quot;python keyword&quot;&gt;-&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;Cyrus&lt;/code&gt;&lt;code class=&quot;python keyword&quot;&gt;-&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;Photos.jpg&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python plain&quot;&gt;modelin&lt;/code&gt;&lt;code class=&quot;python keyword&quot;&gt;/&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;Screenshot at Dec &lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;11&lt;/code&gt; &lt;code class=&quot;python value&quot;&gt;22&lt;/code&gt;&lt;code class=&quot;python keyword&quot;&gt;-&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;10&lt;/code&gt;&lt;code class=&quot;python keyword&quot;&gt;-&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;55.png&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python plain&quot;&gt;modelin&lt;/code&gt;&lt;code class=&quot;python keyword&quot;&gt;/&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;shuwei.jpg&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python plain&quot;&gt;modelin&lt;/code&gt;&lt;code class=&quot;python keyword&quot;&gt;/&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;tangwei.jpg&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python plain&quot;&gt;modelin&lt;/code&gt;&lt;code class=&quot;python keyword&quot;&gt;/&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;zhangmanyu.jpg&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python plain&quot;&gt;detect &lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;1015&lt;/code&gt; &lt;code class=&quot;python plain&quot;&gt;faces, cost &lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;1777.025725&lt;/code&gt; &lt;code class=&quot;python plain&quot;&gt;seconds! &lt;/code&gt;&lt;code class=&quot;python keyword&quot;&gt;/&lt;/code&gt;&lt;code class=&quot;python keyword&quot;&gt;/&lt;/code&gt;&lt;code class=&quot;python keyword&quot;&gt;/&lt;/code&gt;&lt;code class=&quot;python keyword&quot;&gt;/&lt;/code&gt;&lt;code class=&quot;python keyword&quot;&gt;/&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;耗时&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;下面是给每张图片打分，733张有效人脸，耗时35s：&lt;/p&gt;
&lt;div&gt;
&lt;div id=&quot;highlighter_931345&quot; class=&quot;syntaxhighlighter python&quot;&gt;
&lt;table border=&quot;0&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody readability=&quot;12.5&quot;&gt;&lt;tr readability=&quot;25&quot;&gt;&lt;td class=&quot;gutter&quot;&gt;
&lt;p&gt;1&lt;/p&gt;
&lt;p&gt;2&lt;/p&gt;
&lt;p&gt;3&lt;/p&gt;
&lt;p&gt;4&lt;/p&gt;
&lt;p&gt;5&lt;/p&gt;
&lt;p&gt;6&lt;/p&gt;
&lt;p&gt;7&lt;/p&gt;
&lt;p&gt;8&lt;/p&gt;
&lt;p&gt;9&lt;/p&gt;
&lt;p&gt;10&lt;/p&gt;
&lt;p&gt;11&lt;/p&gt;
&lt;p&gt;12&lt;/p&gt;
&lt;p&gt;13&lt;/p&gt;
&lt;p&gt;14&lt;/p&gt;
&lt;p&gt;15&lt;/p&gt;
&lt;p&gt;16&lt;/p&gt;
&lt;p&gt;17&lt;/p&gt;
&lt;p&gt;18&lt;/p&gt;
&lt;p&gt;19&lt;/p&gt;
&lt;/td&gt;
&lt;td class=&quot;code&quot; readability=&quot;30&quot;&gt;
&lt;div class=&quot;container&quot; readability=&quot;59&quot;&gt;
&lt;p&gt;&lt;code class=&quot;python plain&quot;&gt;......&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python plain&quot;&gt;图片名称:[&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;1&lt;/code&gt; &lt;code class=&quot;python plain&quot;&gt;(&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;9&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;)(&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;7&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;)face.jpg], 与目标图片相似度&lt;/code&gt;&lt;code class=&quot;python keyword&quot;&gt;=&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;[&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;74&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python plain&quot;&gt;图片名称:[&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;1&lt;/code&gt; &lt;code class=&quot;python plain&quot;&gt;(&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;9&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;)(&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;8&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;)face.jpg], 与目标图片相似度&lt;/code&gt;&lt;code class=&quot;python keyword&quot;&gt;=&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;[&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;64&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python plain&quot;&gt;图片名称:[&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;1&lt;/code&gt; &lt;code class=&quot;python plain&quot;&gt;(&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;9&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;)(&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;9&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;)face.jpg], 与目标图片相似度&lt;/code&gt;&lt;code class=&quot;python keyword&quot;&gt;=&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;[&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;66&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python plain&quot;&gt;图片名称:[&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;1&lt;/code&gt; &lt;code class=&quot;python plain&quot;&gt;(&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;9&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;)face.jpg], 与目标图片相似度&lt;/code&gt;&lt;code class=&quot;python keyword&quot;&gt;=&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;[&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;54&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python plain&quot;&gt;图片名称:[Alyson&lt;/code&gt;&lt;code class=&quot;python keyword&quot;&gt;-&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;Hannigan&lt;/code&gt;&lt;code class=&quot;python keyword&quot;&gt;-&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;5face&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;.jpg], 与目标图片相似度&lt;/code&gt;&lt;code class=&quot;python keyword&quot;&gt;=&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;[&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;52&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python plain&quot;&gt;图片名称:[Alyson_Hannigan_200512face.jpg], 与目标图片相似度&lt;/code&gt;&lt;code class=&quot;python keyword&quot;&gt;=&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;[&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;46&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python plain&quot;&gt;图片名称:[gaoyuanyuanface.jpg], 与目标图片相似度&lt;/code&gt;&lt;code class=&quot;python keyword&quot;&gt;=&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;[&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;44&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python plain&quot;&gt;图片名称:[libingbingface.jpg], 与目标图片相似度&lt;/code&gt;&lt;code class=&quot;python keyword&quot;&gt;=&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;[&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;42&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python plain&quot;&gt;图片名称:[linqingxiaface.jpg], 与目标图片相似度&lt;/code&gt;&lt;code class=&quot;python keyword&quot;&gt;=&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;[&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;58&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python plain&quot;&gt;图片名称:[linzhilingface.jpg], 与目标图片相似度&lt;/code&gt;&lt;code class=&quot;python keyword&quot;&gt;=&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;[&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;56&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python plain&quot;&gt;图片名称:[liushishiface.jpg], 与目标图片相似度&lt;/code&gt;&lt;code class=&quot;python keyword&quot;&gt;=&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;[&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;44&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python plain&quot;&gt;图片名称:[liuyifeiface.jpg], 与目标图片相似度&lt;/code&gt;&lt;code class=&quot;python keyword&quot;&gt;=&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;[&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;44&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python plain&quot;&gt;图片名称:[lizhiface.jpg], 与目标图片相似度&lt;/code&gt;&lt;code class=&quot;python keyword&quot;&gt;=&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;[&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;54&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python plain&quot;&gt;图片名称:[Miley&lt;/code&gt;&lt;code class=&quot;python keyword&quot;&gt;-&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;Cyrus&lt;/code&gt;&lt;code class=&quot;python keyword&quot;&gt;-&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;Photosface.jpg], 与目标图片相似度&lt;/code&gt;&lt;code class=&quot;python keyword&quot;&gt;=&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;[&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;44&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python plain&quot;&gt;图片名称:[Screenshot at Dec &lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;11&lt;/code&gt; &lt;code class=&quot;python value&quot;&gt;22&lt;/code&gt;&lt;code class=&quot;python keyword&quot;&gt;-&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;10&lt;/code&gt;&lt;code class=&quot;python keyword&quot;&gt;-&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;55face&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;.jpg], 与目标图片相似度&lt;/code&gt;&lt;code class=&quot;python keyword&quot;&gt;=&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;[&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;56&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python plain&quot;&gt;图片名称:[tangweiface.jpg], 与目标图片相似度&lt;/code&gt;&lt;code class=&quot;python keyword&quot;&gt;=&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;[&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;44&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python plain&quot;&gt;图片名称:[zhangmanyuface.jpg], 与目标图片相似度&lt;/code&gt;&lt;code class=&quot;python keyword&quot;&gt;=&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;[&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;48&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python plain&quot;&gt;detect &lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;733&lt;/code&gt; &lt;code class=&quot;python plain&quot;&gt;faces, cost &lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;35.284538999999995&lt;/code&gt; &lt;code class=&quot;python plain&quot;&gt;seconds!&lt;/code&gt;&lt;code class=&quot;python keyword&quot;&gt;/&lt;/code&gt;&lt;code class=&quot;python keyword&quot;&gt;/&lt;/code&gt;&lt;code class=&quot;python keyword&quot;&gt;/&lt;/code&gt;&lt;code class=&quot;python keyword&quot;&gt;/&lt;/code&gt;&lt;code class=&quot;python keyword&quot;&gt;/&lt;/code&gt;&lt;code class=&quot;python keyword&quot;&gt;/&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;耗时&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;前五名的结果出来了&lt;/p&gt;
&lt;div&gt;
&lt;div id=&quot;highlighter_198735&quot; class=&quot;syntaxhighlighter python&quot;&gt;
&lt;table border=&quot;0&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody readability=&quot;5&quot;&gt;&lt;tr readability=&quot;10&quot;&gt;&lt;td class=&quot;gutter&quot;&gt;
&lt;p&gt;1&lt;/p&gt;
&lt;p&gt;2&lt;/p&gt;
&lt;p&gt;3&lt;/p&gt;
&lt;p&gt;4&lt;/p&gt;
&lt;p&gt;5&lt;/p&gt;
&lt;/td&gt;
&lt;td class=&quot;code&quot; readability=&quot;10.5&quot;&gt;
&lt;div class=&quot;container&quot; readability=&quot;20&quot;&gt;
&lt;p&gt;&lt;code class=&quot;python plain&quot;&gt;图片名称: (&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;52&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;)face.jpg , 与目标图片相似度&lt;/code&gt;&lt;code class=&quot;python keyword&quot;&gt;=&lt;/code&gt; &lt;code class=&quot;python value&quot;&gt;94&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python plain&quot;&gt;图片名称: &lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;0&lt;/code&gt; &lt;code class=&quot;python plain&quot;&gt;(&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;142&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;)face.jpg , 与目标图片相似度&lt;/code&gt;&lt;code class=&quot;python keyword&quot;&gt;=&lt;/code&gt; &lt;code class=&quot;python value&quot;&gt;94&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python plain&quot;&gt;图片名称: &lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;1&lt;/code&gt; &lt;code class=&quot;python plain&quot;&gt;(&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;27&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;)face.jpg , 与目标图片相似度&lt;/code&gt;&lt;code class=&quot;python keyword&quot;&gt;=&lt;/code&gt; &lt;code class=&quot;python value&quot;&gt;94&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python plain&quot;&gt;图片名称: &lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;1&lt;/code&gt; &lt;code class=&quot;python plain&quot;&gt;(&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;26&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;)(&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;5&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;)face.jpg , 与目标图片相似度&lt;/code&gt;&lt;code class=&quot;python keyword&quot;&gt;=&lt;/code&gt; &lt;code class=&quot;python value&quot;&gt;92&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python plain&quot;&gt;图片名称: &lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;1&lt;/code&gt; &lt;code class=&quot;python plain&quot;&gt;(&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;2&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;)face.jpg , 与目标图片相似度&lt;/code&gt;&lt;code class=&quot;python keyword&quot;&gt;=&lt;/code&gt; &lt;code class=&quot;python value&quot;&gt;92&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;第五步：又花了3秒钟，5位绝色美女的照片被发到老板面前，而这五位都是老板最喜欢的。&lt;/p&gt;
&lt;p&gt;&lt;img title=&quot;&quot; src=&quot;http://www.adbtime.com/store/thumbs/2017/1104/04234406sp6u.jpeg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;耗时计算：3秒+3秒+3秒 = 9秒干活 ，外加 30分钟休息。&lt;/p&gt;
&lt;p&gt;看一张结果中第一位美女的全图，是不是还可以？&lt;/p&gt;
&lt;p&gt;&lt;img title=&quot;&quot; src=&quot;http://www.adbtime.com/store/thumbs/2017/1104/04234447tcu4.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;以下进入高能编码区。&lt;/p&gt;
&lt;p&gt;介绍下程序实现方法原理：&lt;/p&gt;
&lt;p&gt;首先遍历文件夹下所有图片，识别其面部区域，并抠图保存。&lt;/p&gt;
&lt;p&gt;主要使用opencv的人脸识别算法，有兴趣的可以了解下haar特征，核心代码如下：&lt;/p&gt;
&lt;div&gt;
&lt;div id=&quot;highlighter_661334&quot; class=&quot;syntaxhighlighter python&quot;&gt;
&lt;table border=&quot;0&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody readability=&quot;3.5&quot;&gt;&lt;tr readability=&quot;7&quot;&gt;&lt;td class=&quot;gutter&quot;&gt;
&lt;p&gt;1&lt;/p&gt;
&lt;p&gt;2&lt;/p&gt;
&lt;p&gt;3&lt;/p&gt;
&lt;p&gt;4&lt;/p&gt;
&lt;p&gt;5&lt;/p&gt;
&lt;p&gt;6&lt;/p&gt;
&lt;p&gt;7&lt;/p&gt;
&lt;p&gt;8&lt;/p&gt;
&lt;/td&gt;
&lt;td class=&quot;code&quot; readability=&quot;8.5&quot;&gt;
&lt;div class=&quot;container&quot; readability=&quot;16&quot;&gt;
&lt;p&gt;&lt;code class=&quot;python plain&quot;&gt;start &lt;/code&gt;&lt;code class=&quot;python keyword&quot;&gt;=&lt;/code&gt; &lt;code class=&quot;python plain&quot;&gt;time.clock()&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python keyword&quot;&gt;for&lt;/code&gt; &lt;code class=&quot;python functions&quot;&gt;file&lt;/code&gt; &lt;code class=&quot;python keyword&quot;&gt;in&lt;/code&gt; &lt;code class=&quot;python plain&quot;&gt;files:&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;python spaces&quot;&gt;    &lt;/code&gt;&lt;code class=&quot;python keyword&quot;&gt;if&lt;/code&gt; &lt;code class=&quot;python string&quot;&gt;'DS_Store'&lt;/code&gt; &lt;code class=&quot;python keyword&quot;&gt;in&lt;/code&gt; &lt;code class=&quot;python functions&quot;&gt;file&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;:&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python spaces&quot;&gt;        &lt;/code&gt;&lt;code class=&quot;python keyword&quot;&gt;continue&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python spaces&quot;&gt;    &lt;/code&gt;&lt;code class=&quot;python keyword&quot;&gt;print&lt;/code&gt; &lt;code class=&quot;python plain&quot;&gt;(&lt;/code&gt;&lt;code class=&quot;python string&quot;&gt;'modelin/'&lt;/code&gt;&lt;code class=&quot;python keyword&quot;&gt;+&lt;/code&gt;&lt;code class=&quot;python functions&quot;&gt;file&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python spaces&quot;&gt;    &lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;outFaces(&lt;/code&gt;&lt;code class=&quot;python string&quot;&gt;'modelin/'&lt;/code&gt;&lt;code class=&quot;python keyword&quot;&gt;+&lt;/code&gt;&lt;code class=&quot;python functions&quot;&gt;file&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;,&lt;/code&gt;&lt;code class=&quot;python functions&quot;&gt;file&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;[:&lt;/code&gt;&lt;code class=&quot;python keyword&quot;&gt;-&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;4&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;])&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python functions&quot;&gt;print&lt;/code&gt; &lt;code class=&quot;python plain&quot;&gt;(&lt;/code&gt;&lt;code class=&quot;python string&quot;&gt;&quot;detect %d faces, cost %s seconds!&quot;&lt;/code&gt; &lt;code class=&quot;python keyword&quot;&gt;%&lt;/code&gt; &lt;code class=&quot;python plain&quot;&gt;(&lt;/code&gt;&lt;code class=&quot;python functions&quot;&gt;len&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;(files),time.clock()&lt;/code&gt;&lt;code class=&quot;python keyword&quot;&gt;-&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;start))&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div id=&quot;highlighter_27&quot; class=&quot;syntaxhighlighter python&quot;&gt;
&lt;table border=&quot;0&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody readability=&quot;9.5&quot;&gt;&lt;tr readability=&quot;19&quot;&gt;&lt;td class=&quot;gutter&quot;&gt;
&lt;p&gt;1&lt;/p&gt;
&lt;p&gt;2&lt;/p&gt;
&lt;p&gt;3&lt;/p&gt;
&lt;p&gt;4&lt;/p&gt;
&lt;p&gt;5&lt;/p&gt;
&lt;p&gt;6&lt;/p&gt;
&lt;p&gt;7&lt;/p&gt;
&lt;p&gt;8&lt;/p&gt;
&lt;p&gt;9&lt;/p&gt;
&lt;p&gt;10&lt;/p&gt;
&lt;p&gt;11&lt;/p&gt;
&lt;p&gt;12&lt;/p&gt;
&lt;p&gt;13&lt;/p&gt;
&lt;p&gt;14&lt;/p&gt;
&lt;p&gt;15&lt;/p&gt;
&lt;/td&gt;
&lt;td class=&quot;code&quot; readability=&quot;20.5&quot;&gt;
&lt;div class=&quot;container&quot; readability=&quot;40&quot;&gt;
&lt;p&gt;&lt;code class=&quot;python keyword&quot;&gt;def&lt;/code&gt; &lt;code class=&quot;python plain&quot;&gt;detectFaces(image_path):&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python spaces&quot;&gt;    &lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;img &lt;/code&gt;&lt;code class=&quot;python keyword&quot;&gt;=&lt;/code&gt; &lt;code class=&quot;python plain&quot;&gt;cv2.imread(image_path)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;python spaces&quot;&gt;    &lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;face_cascade &lt;/code&gt;&lt;code class=&quot;python keyword&quot;&gt;=&lt;/code&gt; &lt;code class=&quot;python plain&quot;&gt;cv2.CascadeClassifier(&lt;/code&gt;&lt;code class=&quot;python string&quot;&gt;&quot;cvdata/haarcascades/haarcascade_frontalface_default.xml&quot;&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python spaces&quot;&gt;    &lt;/code&gt;&lt;code class=&quot;python keyword&quot;&gt;if&lt;/code&gt; &lt;code class=&quot;python plain&quot;&gt;img.ndim &lt;/code&gt;&lt;code class=&quot;python keyword&quot;&gt;=&lt;/code&gt;&lt;code class=&quot;python keyword&quot;&gt;=&lt;/code&gt; &lt;code class=&quot;python value&quot;&gt;3&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;:&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python spaces&quot;&gt;        &lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;gray &lt;/code&gt;&lt;code class=&quot;python keyword&quot;&gt;=&lt;/code&gt; &lt;code class=&quot;python plain&quot;&gt;cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python spaces&quot;&gt;    &lt;/code&gt;&lt;code class=&quot;python keyword&quot;&gt;else&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;:&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python spaces&quot;&gt;        &lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;gray &lt;/code&gt;&lt;code class=&quot;python keyword&quot;&gt;=&lt;/code&gt; &lt;code class=&quot;python plain&quot;&gt;img &lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;python spaces&quot;&gt;    &lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;faces &lt;/code&gt;&lt;code class=&quot;python keyword&quot;&gt;=&lt;/code&gt; &lt;code class=&quot;python plain&quot;&gt;face_cascade.detectMultiScale(gray, scaleFactor&lt;/code&gt;&lt;code class=&quot;python keyword&quot;&gt;=&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;1.1&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;, minNeighbors&lt;/code&gt;&lt;code class=&quot;python keyword&quot;&gt;=&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;3&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;, minSize&lt;/code&gt;&lt;code class=&quot;python keyword&quot;&gt;=&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;(&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;10&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;,&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;10&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;),&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python spaces&quot;&gt;                                     &lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;flags&lt;/code&gt;&lt;code class=&quot;python keyword&quot;&gt;=&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;cv2.CASCADE_SCALE_IMAGE)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python spaces&quot;&gt;    &lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;result &lt;/code&gt;&lt;code class=&quot;python keyword&quot;&gt;=&lt;/code&gt; &lt;code class=&quot;python plain&quot;&gt;[]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python spaces&quot;&gt;    &lt;/code&gt;&lt;code class=&quot;python keyword&quot;&gt;for&lt;/code&gt; &lt;code class=&quot;python plain&quot;&gt;(x,y,width,height) &lt;/code&gt;&lt;code class=&quot;python keyword&quot;&gt;in&lt;/code&gt; &lt;code class=&quot;python plain&quot;&gt;faces:&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python spaces&quot;&gt;        &lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;result.append((x,y,x&lt;/code&gt;&lt;code class=&quot;python keyword&quot;&gt;+&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;width,y&lt;/code&gt;&lt;code class=&quot;python keyword&quot;&gt;+&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;height))&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python spaces&quot;&gt;    &lt;/code&gt;&lt;code class=&quot;python keyword&quot;&gt;return&lt;/code&gt; &lt;code class=&quot;python plain&quot;&gt;result&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;图像识别最常用的是通过颜色特征判断。图片相似性主要通过比较汉明距离来确定。像手指一样，每张图片也有自己的图像指纹，它是由一组哈希算法运算后得到的二进制结果。所谓汉明距离，便是一组二进制数据变成另一组二进制数据所需步骤。两张相同的图片，汉明距离便是0.&lt;/p&gt;

&lt;p&gt;遍历抠出的面部区域文件夹，使用pHash(感知哈希算法)进行图片指纹的对比：&lt;/p&gt;
&lt;div&gt;
&lt;div id=&quot;highlighter_620733&quot; class=&quot;syntaxhighlighter python&quot;&gt;
&lt;table border=&quot;0&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody readability=&quot;5&quot;&gt;&lt;tr readability=&quot;10&quot;&gt;&lt;td class=&quot;gutter&quot;&gt;
&lt;p&gt;1&lt;/p&gt;
&lt;p&gt;2&lt;/p&gt;
&lt;p&gt;3&lt;/p&gt;
&lt;p&gt;4&lt;/p&gt;
&lt;p&gt;5&lt;/p&gt;
&lt;p&gt;6&lt;/p&gt;
&lt;p&gt;7&lt;/p&gt;
&lt;/td&gt;
&lt;td class=&quot;code&quot; readability=&quot;10.5&quot;&gt;
&lt;div class=&quot;container&quot; readability=&quot;20&quot;&gt;
&lt;p&gt;&lt;code class=&quot;python keyword&quot;&gt;for&lt;/code&gt; &lt;code class=&quot;python plain&quot;&gt;fname &lt;/code&gt;&lt;code class=&quot;python keyword&quot;&gt;in&lt;/code&gt; &lt;code class=&quot;python plain&quot;&gt;files:&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python spaces&quot;&gt;    &lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;image2 &lt;/code&gt;&lt;code class=&quot;python keyword&quot;&gt;=&lt;/code&gt; &lt;code class=&quot;python plain&quot;&gt;Image.&lt;/code&gt;&lt;code class=&quot;python functions&quot;&gt;open&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;(&lt;/code&gt;&lt;code class=&quot;python string&quot;&gt;'modelout/'&lt;/code&gt;&lt;code class=&quot;python keyword&quot;&gt;+&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;fname)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python spaces&quot;&gt;    &lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;score &lt;/code&gt;&lt;code class=&quot;python keyword&quot;&gt;=&lt;/code&gt; &lt;code class=&quot;python plain&quot;&gt;classify_DCT(imageStand,image2)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python spaces&quot;&gt;    &lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;dicAll[fname] &lt;/code&gt;&lt;code class=&quot;python keyword&quot;&gt;=&lt;/code&gt; &lt;code class=&quot;python plain&quot;&gt;score&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python spaces&quot;&gt;    &lt;/code&gt;&lt;code class=&quot;python functions&quot;&gt;print&lt;/code&gt; &lt;code class=&quot;python plain&quot;&gt;(&lt;/code&gt;&lt;code class=&quot;python string&quot;&gt;&quot;图片名称:[%s], 与目标图片相似度=[%d]&quot;&lt;/code&gt; &lt;code class=&quot;python keyword&quot;&gt;%&lt;/code&gt; &lt;code class=&quot;python plain&quot;&gt;(fname,(&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;100&lt;/code&gt;&lt;code class=&quot;python keyword&quot;&gt;-&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;score)))&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python spaces&quot;&gt;    &lt;/code&gt; &lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python functions&quot;&gt;print&lt;/code&gt; &lt;code class=&quot;python plain&quot;&gt;(&lt;/code&gt;&lt;code class=&quot;python string&quot;&gt;&quot;detect %d faces, cost %s seconds!&quot;&lt;/code&gt; &lt;code class=&quot;python keyword&quot;&gt;%&lt;/code&gt; &lt;code class=&quot;python plain&quot;&gt;(&lt;/code&gt;&lt;code class=&quot;python functions&quot;&gt;len&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;(files),time.clock()&lt;/code&gt;&lt;code class=&quot;python keyword&quot;&gt;-&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;start))&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div id=&quot;highlighter_945440&quot; class=&quot;syntaxhighlighter python&quot;&gt;
&lt;table border=&quot;0&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody readability=&quot;9.5&quot;&gt;&lt;tr readability=&quot;19&quot;&gt;&lt;td class=&quot;gutter&quot;&gt;
&lt;p&gt;1&lt;/p&gt;
&lt;p&gt;2&lt;/p&gt;
&lt;p&gt;3&lt;/p&gt;
&lt;p&gt;4&lt;/p&gt;
&lt;p&gt;5&lt;/p&gt;
&lt;p&gt;6&lt;/p&gt;
&lt;p&gt;7&lt;/p&gt;
&lt;p&gt;8&lt;/p&gt;
&lt;p&gt;9&lt;/p&gt;
&lt;p&gt;10&lt;/p&gt;
&lt;p&gt;11&lt;/p&gt;
&lt;p&gt;12&lt;/p&gt;
&lt;p&gt;13&lt;/p&gt;
&lt;p&gt;14&lt;/p&gt;
&lt;p&gt;15&lt;/p&gt;
&lt;p&gt;16&lt;/p&gt;
&lt;p&gt;17&lt;/p&gt;
&lt;p&gt;18&lt;/p&gt;
&lt;p&gt;19&lt;/p&gt;
&lt;p&gt;20&lt;/p&gt;
&lt;p&gt;21&lt;/p&gt;
&lt;p&gt;22&lt;/p&gt;
&lt;p&gt;23&lt;/p&gt;
&lt;/td&gt;
&lt;td class=&quot;code&quot; readability=&quot;27&quot;&gt;
&lt;div class=&quot;container&quot; readability=&quot;53&quot;&gt;
&lt;p&gt;&lt;code class=&quot;python keyword&quot;&gt;def&lt;/code&gt; &lt;code class=&quot;python plain&quot;&gt;simmilar_people(image1,image2,size&lt;/code&gt;&lt;code class=&quot;python keyword&quot;&gt;=&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;(&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;32&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;,&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;32&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;),part_size&lt;/code&gt;&lt;code class=&quot;python keyword&quot;&gt;=&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;(&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;8&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;,&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;8&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;)):&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;python spaces&quot;&gt;    &lt;/code&gt;&lt;code class=&quot;python keyword&quot;&gt;assert&lt;/code&gt; &lt;code class=&quot;python plain&quot;&gt;size[&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;0&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;]&lt;/code&gt;&lt;code class=&quot;python keyword&quot;&gt;=&lt;/code&gt;&lt;code class=&quot;python keyword&quot;&gt;=&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;size[&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;1&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;],&lt;/code&gt;&lt;code class=&quot;python string&quot;&gt;&quot;size error&quot;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python spaces&quot;&gt;    &lt;/code&gt;&lt;code class=&quot;python keyword&quot;&gt;assert&lt;/code&gt; &lt;code class=&quot;python plain&quot;&gt;part_size[&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;0&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;]&lt;/code&gt;&lt;code class=&quot;python keyword&quot;&gt;=&lt;/code&gt;&lt;code class=&quot;python keyword&quot;&gt;=&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;part_size[&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;1&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;],&lt;/code&gt;&lt;code class=&quot;python string&quot;&gt;&quot;part_size error&quot;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;python spaces&quot;&gt;    &lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;image1 &lt;/code&gt;&lt;code class=&quot;python keyword&quot;&gt;=&lt;/code&gt; &lt;code class=&quot;python plain&quot;&gt;image1.resize(size).convert(&lt;/code&gt;&lt;code class=&quot;python string&quot;&gt;'L'&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;).&lt;/code&gt;&lt;code class=&quot;python functions&quot;&gt;filter&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;(ImageFilter.BLUR)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python spaces&quot;&gt;    &lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;image1 &lt;/code&gt;&lt;code class=&quot;python keyword&quot;&gt;=&lt;/code&gt; &lt;code class=&quot;python plain&quot;&gt;ImageOps.equalize(image1)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python spaces&quot;&gt;    &lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;matrix &lt;/code&gt;&lt;code class=&quot;python keyword&quot;&gt;=&lt;/code&gt; &lt;code class=&quot;python plain&quot;&gt;get_matrix(image1)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python spaces&quot;&gt;    &lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;DCT_matrix &lt;/code&gt;&lt;code class=&quot;python keyword&quot;&gt;=&lt;/code&gt; &lt;code class=&quot;python plain&quot;&gt;DCT(matrix)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python spaces&quot;&gt;    &lt;/code&gt;&lt;code class=&quot;python functions&quot;&gt;List&lt;/code&gt; &lt;code class=&quot;python keyword&quot;&gt;=&lt;/code&gt; &lt;code class=&quot;python plain&quot;&gt;sub_matrix_to_list(DCT_matrix, part_size)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python spaces&quot;&gt;    &lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;middle &lt;/code&gt;&lt;code class=&quot;python keyword&quot;&gt;=&lt;/code&gt; &lt;code class=&quot;python plain&quot;&gt;get_middle(&lt;/code&gt;&lt;code class=&quot;python functions&quot;&gt;List&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python spaces&quot;&gt;    &lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;code1 &lt;/code&gt;&lt;code class=&quot;python keyword&quot;&gt;=&lt;/code&gt; &lt;code class=&quot;python plain&quot;&gt;get_code(&lt;/code&gt;&lt;code class=&quot;python functions&quot;&gt;List&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;, middle)&lt;/code&gt;&lt;/p&gt;


&lt;p&gt;&lt;code class=&quot;python spaces&quot;&gt;    &lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;image2 &lt;/code&gt;&lt;code class=&quot;python keyword&quot;&gt;=&lt;/code&gt; &lt;code class=&quot;python plain&quot;&gt;image2.resize(size).convert(&lt;/code&gt;&lt;code class=&quot;python string&quot;&gt;'L'&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;).&lt;/code&gt;&lt;code class=&quot;python functions&quot;&gt;filter&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;(ImageFilter.BLUR)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python spaces&quot;&gt;    &lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;image2 &lt;/code&gt;&lt;code class=&quot;python keyword&quot;&gt;=&lt;/code&gt; &lt;code class=&quot;python plain&quot;&gt;ImageOps.equalize(image2)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python spaces&quot;&gt;    &lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;matrix &lt;/code&gt;&lt;code class=&quot;python keyword&quot;&gt;=&lt;/code&gt; &lt;code class=&quot;python plain&quot;&gt;get_matrix(image2)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python spaces&quot;&gt;    &lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;DCT_matrix &lt;/code&gt;&lt;code class=&quot;python keyword&quot;&gt;=&lt;/code&gt; &lt;code class=&quot;python plain&quot;&gt;DCT(matrix)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python spaces&quot;&gt;    &lt;/code&gt;&lt;code class=&quot;python functions&quot;&gt;List&lt;/code&gt; &lt;code class=&quot;python keyword&quot;&gt;=&lt;/code&gt; &lt;code class=&quot;python plain&quot;&gt;sub_matrix_to_list(DCT_matrix, part_size)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python spaces&quot;&gt;    &lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;middle &lt;/code&gt;&lt;code class=&quot;python keyword&quot;&gt;=&lt;/code&gt; &lt;code class=&quot;python plain&quot;&gt;get_middle(&lt;/code&gt;&lt;code class=&quot;python functions&quot;&gt;List&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python spaces&quot;&gt;    &lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;code2 &lt;/code&gt;&lt;code class=&quot;python keyword&quot;&gt;=&lt;/code&gt; &lt;code class=&quot;python plain&quot;&gt;get_code(&lt;/code&gt;&lt;code class=&quot;python functions&quot;&gt;List&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;, middle)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;python spaces&quot;&gt;    &lt;/code&gt;&lt;code class=&quot;python keyword&quot;&gt;return&lt;/code&gt; &lt;code class=&quot;python plain&quot;&gt;comp_code(code1, code2)&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;小决策，大学问。&lt;/p&gt;
&lt;p&gt;此项目代码已经开源。但是千张美女图片因怕涉嫌传播**...，所以不敢乱放。&lt;/p&gt;
&lt;p&gt;关注公众号，输入“识别美女”，便可获得资源下载地址，当然是整个项目的源码大包(180M)，下下来后，请阅读readme了解运行环境。&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/432946/201711/432946-20171105130828701-2125367510.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;个人博客地址 &lt;a href=&quot;http://www.adbtime.com/view/428&quot; target=&quot;_blank&quot;&gt;http://www.adbtime.com/view/428&lt;/a&gt; ，欢迎访问&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;原创文章，转载请注明出处，感谢！ &lt;/strong&gt;&lt;/p&gt;
</description>
<pubDate>Sun, 05 Nov 2017 04:12:00 +0000</pubDate>
<dc:creator>紫薯Mr</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/haosun/p/7787092.html</dc:identifier>
</item>
<item>
<title>【JDK1.8】JDK1.8集合源码阅读——LinkedHashMap - joemsu</title>
<link>http://www.cnblogs.com/joemsu/p/7787043.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/joemsu/p/7787043.html</guid>
<description>&lt;h2 id=&quot;一前言&quot;&gt;一、前言&lt;/h2&gt;
&lt;p&gt;在&lt;a href=&quot;http://www.cnblogs.com/joemsu/p/7724623.html&quot;&gt;上一篇随笔&lt;/a&gt;中，我们分析了&lt;strong&gt;HashMap&lt;/strong&gt;的源码，里面涉及到了3个钩子函数，用来预设给子类——&lt;strong&gt;LinkedHashMap&lt;/strong&gt;的调用，所以趁热打铁，今天我们来一起看一下它的源码吧。&lt;/p&gt;

&lt;h2 id=&quot;二linkedhashmap的结构与继承关系&quot;&gt;二、LinkedHashMap的结构与继承关系&lt;/h2&gt;

&lt;h3 id=&quot;linkedhashmap的数据结构&quot;&gt;2.1 LinkedHashMap的数据结构&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1256203/201711/1256203-20171105115323638-1649388511.png&quot; alt=&quot;LinkedHashMap结构&quot;/&gt;&lt;/p&gt;
&lt;p&gt;可以从上图中看到，LinkedHashMap数据结构相比较于HashMap来说，添加了双向指针，分别指向前一个节点——&lt;strong&gt;before&lt;/strong&gt;和后一个节点——&lt;strong&gt;after&lt;/strong&gt;，从而将所有的节点已链表的形式串联一起来，从名字上来看LinkedHashMap与HashMap有一定的联系，实际上也确实是这样，LinkedHashMap继承了HashMap，重写了HashMap的一部分方法，从而加入了链表的实现。让我们来看一下它们的继承关系。&lt;/p&gt;

&lt;h3 id=&quot;linkedhashmap的继承关系&quot;&gt;2.2 LinkedHashMap的继承关系&lt;/h3&gt;

&lt;h4 id=&quot;entry的继承关系&quot;&gt;2.2.1 Entry的继承关系&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1256203/201711/1256203-20171105115353170-1563498238.png&quot; alt=&quot;LinkedHashMapEntry&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Entry作为基本的节点，可以看到LinkedHashMap的Entry继承自HashMap的Node，在其基础上加上了before和after两个指针，而TreeNode作为HashMap和LinkedHashMap的树节点，继承自LinkedHahsMap的Entry，并且加上了树节点的相关指针，另外提一点：before和parent的两个概念是不一样的，before是相对于链表来的，parent是相对于树操作来的，所以要分两个。&lt;/p&gt;

&lt;h4 id=&quot;iterator的继承关系&quot;&gt;2.2.2 Iterator的继承关系&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1256203/201711/1256203-20171105115420935-624050187.png&quot; alt=&quot;LinkedHashMapIterator&quot;/&gt;&lt;/p&gt;
&lt;p&gt;LinkedHashMap的迭代器为遍历节点提供了自己的实现——LinkedHashIterator，对于Key、Value、Entry的3个迭代器，都继承自它。而且内部采用的遍历方式就是在前面提到的Entry里加的新的指向下一个节点的指针after，后面我们将具体看它的代码实现。&lt;/p&gt;

&lt;h2 id=&quot;三linkedhashmap源码解析&quot;&gt;三、LinkedHashMap源码解析&lt;/h2&gt;
&lt;p&gt;本节我们将结合HashMap的部分源码一起分析一下LinkedHashMap。&lt;/p&gt;

&lt;h3 id=&quot;linkedhashmap的继承关系-1&quot;&gt;3.1 LinkedHashMap的继承关系&lt;/h3&gt;
&lt;p&gt;LinekdHashMap的继承关系前面已经说到了，不过按照习惯还是先放上去，凑一下字数 :）&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; LinkedHashMap&amp;lt;K,V&amp;gt; &lt;span class=&quot;kw&quot;&gt;extends&lt;/span&gt; HashMap&amp;lt;K,V&amp;gt; &lt;span class=&quot;kw&quot;&gt;implements&lt;/span&gt; Map&amp;lt;K,V&amp;gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这里没什么好说的，继承自HashMap，实现了Map接口&lt;/p&gt;

&lt;h3 id=&quot;linkedhashmap的成员变量&quot;&gt;3.2 LinkedHashMap的成员变量&lt;/h3&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;12&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;long&lt;/span&gt; serialVersionUID = 3801124242820219131L;

&lt;span class=&quot;co&quot;&gt;// 用于指向双向链表的头部&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;transient&lt;/span&gt; LinkedHashMap.&lt;span class=&quot;fu&quot;&gt;Entry&lt;/span&gt;&amp;lt;K,V&amp;gt; head;
&lt;span class=&quot;co&quot;&gt;//用于指向双向链表的尾部&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;transient&lt;/span&gt; LinkedHashMap.&lt;span class=&quot;fu&quot;&gt;Entry&lt;/span&gt;&amp;lt;K,V&amp;gt; tail;
&lt;span class=&quot;co&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * 用来指定LinkedHashMap的迭代顺序，&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * true则表示按照基于访问的顺序来排列，意思就是最近使用的entry，放在链表的最末尾&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * false则表示按照插入顺序来&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; */&lt;/span&gt; 
&lt;span class=&quot;dt&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;boolean&lt;/span&gt; accessOrder;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注意：&lt;code&gt;accessOrder&lt;/code&gt;的&lt;strong&gt;final&lt;/strong&gt;关键字，说明我们要在构造方法里给它初始化。&lt;/p&gt;
&lt;p&gt;至于Entry的数据结构在第二节的图里面有了，这里就不重复了哈。&lt;/p&gt;

&lt;h3 id=&quot;linkedhashmap的构造方法&quot;&gt;3.3 LinkedHashMap的构造方法&lt;/h3&gt;
&lt;p&gt;跟HashMap类似的构造方法这里就不一一赘述了，里面唯一的区别就是添加了前面提到的accessOrder，默认赋值为false——按照插入顺序来排列，这里主要说明一下不同的构造方法。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;12&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;co&quot;&gt;//多了一个 accessOrder的参数，用来指定按照LRU排列方式还是顺序插入的排序方式&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; LinkedHashMap(&lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; initialCapacity,
                         &lt;span class=&quot;dt&quot;&gt;float&lt;/span&gt; loadFactor,
                         &lt;span class=&quot;dt&quot;&gt;boolean&lt;/span&gt; accessOrder) {
   &lt;span class=&quot;kw&quot;&gt;super&lt;/span&gt;(initialCapacity, loadFactor);
   &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;accessOrder&lt;/span&gt; = accessOrder;
 }&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;linkedhashmap的get方法&quot;&gt;3.4 LinkedHashMap的get()方法&lt;/h3&gt;
&lt;p&gt;可能会有园友好奇，LinkedHashMap是怎么加上双向链表的呢，我们先来看一下&lt;code&gt;get()&lt;/code&gt;方法&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;12&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; V &lt;span class=&quot;fu&quot;&gt;get&lt;/span&gt;(Object key) {
  Node&amp;lt;K,V&amp;gt; e;
  &lt;span class=&quot;co&quot;&gt;//调用HashMap的getNode的方法，详见上一篇HashMap源码解析&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; ((e = &lt;span class=&quot;fu&quot;&gt;getNode&lt;/span&gt;(&lt;span class=&quot;fu&quot;&gt;hash&lt;/span&gt;(key), key)) == &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;)
    &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;;
  &lt;span class=&quot;co&quot;&gt;//在取值后对参数accessOrder进行判断，如果为true，执行afterNodeAccess&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (accessOrder)
    &lt;span class=&quot;fu&quot;&gt;afterNodeAccess&lt;/span&gt;(e);
  &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; e.&lt;span class=&quot;fu&quot;&gt;value&lt;/span&gt;;
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;从上面的代码可以看到，LinkedHashMap的get方法，调用HashMap的getNode方法后，对accessOrder的值进行了判断，我们之前提到：&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;accessOrder为true则表示按照基于访问的顺序来排列，意思就是最近使用的entry，放在链表的最末尾&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;由此可见，&lt;code&gt;afterNodeAccess(e)&lt;/code&gt;就是基于访问的顺序排列的关键，让我们来看一下它的代码：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;16&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;co&quot;&gt;//此函数执行的效果就是将最近使用的Node，放在链表的最末尾&lt;/span&gt;
&lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;afterNodeAccess&lt;/span&gt;(Node&amp;lt;K,V&amp;gt; e) {
  LinkedHashMap.&lt;span class=&quot;fu&quot;&gt;Entry&lt;/span&gt;&amp;lt;K,V&amp;gt; last;
  &lt;span class=&quot;co&quot;&gt;//仅当按照LRU原则且e不在最末尾，才执行修改链表，将e移到链表最末尾的操作&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (accessOrder &amp;amp;&amp;amp; (last = tail) != e) {
    &lt;span class=&quot;co&quot;&gt;//将e赋值临时节点p， b是e的前一个节点， a是e的后一个节点&lt;/span&gt;
    LinkedHashMap.&lt;span class=&quot;fu&quot;&gt;Entry&lt;/span&gt;&amp;lt;K,V&amp;gt; p =
      (LinkedHashMap.&lt;span class=&quot;fu&quot;&gt;Entry&lt;/span&gt;&amp;lt;K,V&amp;gt;)e, b = p.&lt;span class=&quot;fu&quot;&gt;before&lt;/span&gt;, a = p.&lt;span class=&quot;fu&quot;&gt;after&lt;/span&gt;;
    &lt;span class=&quot;co&quot;&gt;//设置p的后一个节点为null，因为执行后p在链表末尾，after肯定为null&lt;/span&gt;
    p.&lt;span class=&quot;fu&quot;&gt;after&lt;/span&gt; = &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;;
    &lt;span class=&quot;co&quot;&gt;//p前一个节点不存在，情况一&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (b == &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;) &lt;span class=&quot;co&quot;&gt;// ①&lt;/span&gt;
      head = a;
    &lt;span class=&quot;kw&quot;&gt;else&lt;/span&gt;
      b.&lt;span class=&quot;fu&quot;&gt;after&lt;/span&gt; = a;
    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (a != &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;) 
      a.&lt;span class=&quot;fu&quot;&gt;before&lt;/span&gt; = b;
    &lt;span class=&quot;co&quot;&gt;//p的后一个节点不存在，情况二&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;// ②&lt;/span&gt;
      last = b;
    &lt;span class=&quot;co&quot;&gt;//情况三&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (last == &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;) &lt;span class=&quot;co&quot;&gt;// ③&lt;/span&gt;
      head = p;
    &lt;span class=&quot;co&quot;&gt;//正常情况，将p设置为尾节点的准备工作，p的前一个节点为原先的last，last的after为p&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;else&lt;/span&gt; {
      p.&lt;span class=&quot;fu&quot;&gt;before&lt;/span&gt; = last;
      last.&lt;span class=&quot;fu&quot;&gt;after&lt;/span&gt; = p;
    }
    &lt;span class=&quot;co&quot;&gt;//将p设置为将p设置为尾节点&lt;/span&gt;
    tail = p;
    &lt;span class=&quot;co&quot;&gt;// 修改计数器+1&lt;/span&gt;
    ++modCount;
  }
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;标注的情况如下图所示（&lt;strong&gt;特别说明一下，这里是显示链表的修改后指针的情况，实际上在桶里面的位置是不变的，只是前后的指针指向的对象变了&lt;/strong&gt;）：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1256203/201711/1256203-20171105115455560-1365060597.png&quot; alt=&quot;afterNodeAccess&quot;/&gt;&lt;/p&gt;
&lt;p&gt;下面来简单说明一下：&lt;/p&gt;
&lt;ul readability=&quot;-0.5&quot;&gt;&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;正常情况下：查询的p在链表中间，那么将p设置到末尾后，它原先的前节点b和后节点a就变成了前后节点。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;情况一：p为头部，前一个节点b不存在，那么考虑到p要放到最后面，则设置p的后一个节点a为head&lt;/li&gt;
&lt;li&gt;情况二：p为尾部，后一个节点a不存在，那么考虑到统一操作，设置last为b&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;情况三：p为链表里的第一个节点，head=p&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;linkedhashmap的put方法&quot;&gt;3.5 LinkedHashMap的put()方法&lt;/h3&gt;
&lt;p&gt;接下来，让我们来看一下LinkedHashMap是怎么插入Entry的：LinkedHashMap的put方法调用的还是HashMap里的put，不同的是重写了里面的部分方法，一起来看一下：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;25&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;dt&quot;&gt;final&lt;/span&gt; V &lt;span class=&quot;fu&quot;&gt;putVal&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; hash, K key, V value, &lt;span class=&quot;dt&quot;&gt;boolean&lt;/span&gt; onlyIfAbsent,
                   &lt;span class=&quot;dt&quot;&gt;boolean&lt;/span&gt; evict) {
    ...
    tab[i] = &lt;span class=&quot;fu&quot;&gt;newNode&lt;/span&gt;(hash, key, value, &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;);
    ...
    e = ((TreeNode&amp;lt;K,V&amp;gt;)p).&lt;span class=&quot;fu&quot;&gt;putTreeVal&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;, tab, hash, key, value);
    ...
    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; ((e = p.&lt;span class=&quot;fu&quot;&gt;next&lt;/span&gt;) == &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;) {
      p.&lt;span class=&quot;fu&quot;&gt;next&lt;/span&gt; = &lt;span class=&quot;fu&quot;&gt;newNode&lt;/span&gt;(hash, key, value, &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;);
    ...
        &lt;span class=&quot;fu&quot;&gt;afterNodeAccess&lt;/span&gt;(e);
    ...
        &lt;span class=&quot;fu&quot;&gt;afterNodeInsertion&lt;/span&gt;(evict);
      &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;;
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;由于在&lt;a href=&quot;http://www.cnblogs.com/joemsu/p/7724623.html&quot;&gt;上一章&lt;/a&gt;分析过了put方法，这里笔者就省略了部分代码，LinkedHashMap将其中&lt;code&gt;newNode&lt;/code&gt;方法以及之前设置下的钩子方法&lt;code&gt;afterNodeAccess&lt;/code&gt;和&lt;code&gt;afterNodeInsertion&lt;/code&gt;进行了重写，从而实现了加入链表的目的。一起来看一下：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;38&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;Node&amp;lt;K,V&amp;gt; &lt;span class=&quot;fu&quot;&gt;newNode&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; hash, K key, V value, Node&amp;lt;K,V&amp;gt; e) {
  &lt;span class=&quot;co&quot;&gt;//秘密就在于 new的是自己的Entry类，然后调用了linkedNodeLast&lt;/span&gt;
  LinkedHashMap.&lt;span class=&quot;fu&quot;&gt;Entry&lt;/span&gt;&amp;lt;K,V&amp;gt; p =
    &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; LinkedHashMap.&lt;span class=&quot;fu&quot;&gt;Entry&lt;/span&gt;&amp;lt;K,V&amp;gt;(hash, key, value, e);
  &lt;span class=&quot;fu&quot;&gt;linkNodeLast&lt;/span&gt;(p);
  &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; p;
}

&lt;span class=&quot;co&quot;&gt;//顾名思义就是把新加的节点放在链表的最后面&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;linkNodeLast&lt;/span&gt;(LinkedHashMap.&lt;span class=&quot;fu&quot;&gt;Entry&lt;/span&gt;&amp;lt;K,V&amp;gt; p) {
  &lt;span class=&quot;co&quot;&gt;//将tail给临时变量last&lt;/span&gt;
  LinkedHashMap.&lt;span class=&quot;fu&quot;&gt;Entry&lt;/span&gt;&amp;lt;K,V&amp;gt; last = tail;
  &lt;span class=&quot;co&quot;&gt;//把new的Entry给tail&lt;/span&gt;
  tail = p;
  &lt;span class=&quot;co&quot;&gt;//若没有last，说明p是第一个节点，head=p&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (last == &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;)
    head = p;
  &lt;span class=&quot;co&quot;&gt;//否则就做准备工作，你懂的 (￣▽￣)&quot;&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;else&lt;/span&gt; {
    p.&lt;span class=&quot;fu&quot;&gt;before&lt;/span&gt; = last;
    last.&lt;span class=&quot;fu&quot;&gt;after&lt;/span&gt; = p;
  }
}

&lt;span class=&quot;co&quot;&gt;//这里笔者也把TreeNode的重写也加了进来，因为putTreeVal里有调用了这个&lt;/span&gt;
TreeNode&amp;lt;K,V&amp;gt; &lt;span class=&quot;fu&quot;&gt;newTreeNode&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; hash, K key, V value, Node&amp;lt;K,V&amp;gt; next) {
  TreeNode&amp;lt;K,V&amp;gt; p = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; TreeNode&amp;lt;K,V&amp;gt;(hash, key, value, next);
  &lt;span class=&quot;fu&quot;&gt;linkNodeLast&lt;/span&gt;(p);
  &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; p;
}

&lt;span class=&quot;co&quot;&gt;//插入后把最老的Entry删除，不过removeEldestEntry总是返回false，所以不会删除，估计又是一个钩子方法给子类用的&lt;/span&gt;
&lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;afterNodeInsertion&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;boolean&lt;/span&gt; evict) {
  LinkedHashMap.&lt;span class=&quot;fu&quot;&gt;Entry&lt;/span&gt;&amp;lt;K,V&amp;gt; first;
  &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (evict &amp;amp;&amp;amp; (first = head) != &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt; &amp;amp;&amp;amp; &lt;span class=&quot;fu&quot;&gt;removeEldestEntry&lt;/span&gt;(first)) {
    K key = first.&lt;span class=&quot;fu&quot;&gt;key&lt;/span&gt;;
    &lt;span class=&quot;fu&quot;&gt;removeNode&lt;/span&gt;(&lt;span class=&quot;fu&quot;&gt;hash&lt;/span&gt;(key), key, &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;, &lt;span class=&quot;kw&quot;&gt;false&lt;/span&gt;, &lt;span class=&quot;kw&quot;&gt;true&lt;/span&gt;);
  }
}

&lt;span class=&quot;kw&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;removeEldestEntry&lt;/span&gt;(Map.&lt;span class=&quot;fu&quot;&gt;Entry&lt;/span&gt;&amp;lt;K,V&amp;gt; eldest) {
  &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;false&lt;/span&gt;;
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;总结：设计者灵活的运用了Override，以及设置的钩子方法，实现了双向链表。&lt;/p&gt;

&lt;h3 id=&quot;linkedhashmap的remove&quot;&gt;3.6 LinkedHashMap的remove()&lt;/h3&gt;
&lt;p&gt;上一章我们提到过remove里面设计者也设置了一个钩子方法：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;13&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;dt&quot;&gt;final&lt;/span&gt; Node&amp;lt;K,V&amp;gt; &lt;span class=&quot;fu&quot;&gt;removeNode&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; hash, Object key, Object value,
                               &lt;span class=&quot;dt&quot;&gt;boolean&lt;/span&gt; matchValue, &lt;span class=&quot;dt&quot;&gt;boolean&lt;/span&gt; movable) {
  ...
      &lt;span class=&quot;co&quot;&gt;//node即是要删除的节点&lt;/span&gt;
      &lt;span class=&quot;fu&quot;&gt;afterNodeRemoval&lt;/span&gt;(node);
  ...
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;一起来看一下这个方法干了什么：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;15&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;afterNodeRemoval&lt;/span&gt;(Node&amp;lt;K,V&amp;gt; e) {
  &lt;span class=&quot;co&quot;&gt;//与afterNodeAccess一样，记录e的前后节点b，a&lt;/span&gt;
  LinkedHashMap.&lt;span class=&quot;fu&quot;&gt;Entry&lt;/span&gt;&amp;lt;K,V&amp;gt; p =
    (LinkedHashMap.&lt;span class=&quot;fu&quot;&gt;Entry&lt;/span&gt;&amp;lt;K,V&amp;gt;)e, b = p.&lt;span class=&quot;fu&quot;&gt;before&lt;/span&gt;, a = p.&lt;span class=&quot;fu&quot;&gt;after&lt;/span&gt;;
  &lt;span class=&quot;co&quot;&gt;//p已删除，前后指针都设置为null，便于GC回收&lt;/span&gt;
  p.&lt;span class=&quot;fu&quot;&gt;before&lt;/span&gt; = p.&lt;span class=&quot;fu&quot;&gt;after&lt;/span&gt; = &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;;
  &lt;span class=&quot;co&quot;&gt;//与afterNodeAccess一样类似，一顿判断，然后b，a互为前后节点&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (b == &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;)
    head = a;
  &lt;span class=&quot;kw&quot;&gt;else&lt;/span&gt;
    b.&lt;span class=&quot;fu&quot;&gt;after&lt;/span&gt; = a;
  &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (a == &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;)
    tail = b;
  &lt;span class=&quot;kw&quot;&gt;else&lt;/span&gt;
    a.&lt;span class=&quot;fu&quot;&gt;before&lt;/span&gt; = b;
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;remove里的相对简单，顺带着简单提一提。&lt;/p&gt;

&lt;h3 id=&quot;linkedhashmap的迭代器&quot;&gt;3.7 LinkedHashMap的迭代器&lt;/h3&gt;
&lt;p&gt;这一节，让我们来看一下LinkedHashMap的最基础的迭代器——LinkedHashIterator&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;19&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;kw&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; LinkedHashIterator {
  &lt;span class=&quot;co&quot;&gt;//记录下一个Entry&lt;/span&gt;
  LinkedHashMap.&lt;span class=&quot;fu&quot;&gt;Entry&lt;/span&gt;&amp;lt;K,V&amp;gt; next;
  &lt;span class=&quot;co&quot;&gt;//记录当前的Entry&lt;/span&gt;
  LinkedHashMap.&lt;span class=&quot;fu&quot;&gt;Entry&lt;/span&gt;&amp;lt;K,V&amp;gt; current;
  &lt;span class=&quot;co&quot;&gt;//记录是否发生了迭代过程中的修改&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; expectedModCount;

  &lt;span class=&quot;fu&quot;&gt;LinkedHashIterator&lt;/span&gt;() {
    &lt;span class=&quot;co&quot;&gt;//初始化的时候把head给next&lt;/span&gt;
    next = head;
    expectedModCount = modCount;
    current = &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;;
  }

  &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;hasNext&lt;/span&gt;() {
    &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; next != &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;;
  }

  &lt;span class=&quot;co&quot;&gt;//这里采用的是链表方式的遍历方式，有兴趣的园友可以去上一章看看HashMap的遍历方式&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;final&lt;/span&gt; LinkedHashMap.&lt;span class=&quot;fu&quot;&gt;Entry&lt;/span&gt;&amp;lt;K,V&amp;gt; &lt;span class=&quot;fu&quot;&gt;nextNode&lt;/span&gt;() {
    LinkedHashMap.&lt;span class=&quot;fu&quot;&gt;Entry&lt;/span&gt;&amp;lt;K,V&amp;gt; e = next;
    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (modCount != expectedModCount)
      &lt;span class=&quot;kw&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; ConcurrentModificationException();
    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (e == &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;)
      &lt;span class=&quot;kw&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; NoSuchElementException();
    &lt;span class=&quot;co&quot;&gt;//记录当前的Entry&lt;/span&gt;
    current = e;
    &lt;span class=&quot;co&quot;&gt;//直接拿after给next&lt;/span&gt;
    next = e.&lt;span class=&quot;fu&quot;&gt;after&lt;/span&gt;;
    &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; e;
  }

  &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;remove&lt;/span&gt;() {
    Node&amp;lt;K,V&amp;gt; p = current;
    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (p == &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;)
      &lt;span class=&quot;kw&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; IllegalStateException();
    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (modCount != expectedModCount)
      &lt;span class=&quot;kw&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; ConcurrentModificationException();
    current = &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;;
    K key = p.&lt;span class=&quot;fu&quot;&gt;key&lt;/span&gt;;
    &lt;span class=&quot;fu&quot;&gt;removeNode&lt;/span&gt;(&lt;span class=&quot;fu&quot;&gt;hash&lt;/span&gt;(key), key, &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;, &lt;span class=&quot;kw&quot;&gt;false&lt;/span&gt;, &lt;span class=&quot;kw&quot;&gt;false&lt;/span&gt;);
    expectedModCount = modCount;
  }
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;LinkedHashMap遍历的方式使链表，顺序访问的话速度应该会更快一些。&lt;/p&gt;

&lt;h2 id=&quot;四总结&quot;&gt;四、总结&lt;/h2&gt;
&lt;p&gt;在阅读分析了HashMap的基础上，看LinkedHashMap会简单很多，觉得有收获的园友可以点一下推荐，另外有解读不对的地方可以留言指正，最后谢谢各位园友观看，与大家共同进步！&lt;/p&gt;

</description>
<pubDate>Sun, 05 Nov 2017 04:10:00 +0000</pubDate>
<dc:creator>joemsu</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/joemsu/p/7787043.html</dc:identifier>
</item>
<item>
<title>从代码质量谈起 - 冷豪</title>
<link>http://www.cnblogs.com/learnhow/p/7786939.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/learnhow/p/7786939.html</guid>
<description>&lt;p&gt;最近加入了一个临时的项目组，针对前期客户提出的需求在原有系统上做一些升级开发。说白了就是只能使用旧的技术在原有代码上增加功能，有的是需要开发新功能有的只是在原有基础上进行改进。刚开始，项目经理在和我谈需求的时候聊得轻描淡写，以为只是做一些简单的迭代开发，因此信心满满的答应下来。可直到拿到项目的源码才发现全然不是这么回事。项目逻辑混乱，代码杂论无章再加上客户需求不够具体致使整个项目组一度陷入阅读源码的泥潭。&lt;/p&gt;
&lt;p&gt;2017年初阿里巴巴也发布了《Java开发手册》旨在帮助行业人员提高&lt;span id=&quot;rlt_7&quot;&gt;开发质量和效率、大大降低代码维护成本&lt;/span&gt;，手册里面提到的规范我无需列举。在此只是做一些补充把我个人认为非常重要又很基础的规范提出来供大家讨论。&lt;/p&gt;
&lt;p&gt;1.容器类&lt;/p&gt;
&lt;p&gt;　　i.不要乱用容器：不要为了方便用容器类代替JavaBean的作用。尤其在数据库的读取的时候，尽量使用对应的实体对象传输数据。&lt;/p&gt;
&lt;p&gt;　　ii.使用容器都必须有泛型约束：使用容器类就一定要为容器增加泛型约束。容器是为了提高代码效率而产生的，不要为了省事把容器当成“垃圾箱”。&lt;/p&gt;
&lt;p&gt;　　iii.函数形参超过4个且类型相同的时候才应该考虑使用容器作为形参：使用容器作为形参会让二次开发人员无法对参数一目了然，降低代码的可读性和增加接口文档的编写难度。&lt;/p&gt;
&lt;p&gt;　　iv.作为方法返回值的容器类型不能直接作为其他方法的实参带入：容器类经常被作为方法的返回值，但是不可以直接将它作为实参带入其他方法。因为使用同一个容器来回在不同的方法中进出会污染容器并且也让二次维护变的极其困难。因此即使是类型相同，泛型形同的情况下也应该首先在方法外将包含的对象取出来，然后再生成新的容器作为实参。&lt;/p&gt;
&lt;p&gt;2.异常类&lt;/p&gt;
&lt;p&gt;　　i.不要别出心裁的设计异常：JDK提供的异常种类已经足够了。除非是有特殊需求否则不要专门设计一个异常类。自定义的异常只会增加代码的耦合。&lt;/p&gt;
&lt;p&gt;　　ii.推荐抛出RuntimeException：RuntimeException不需要在接口中声明。&lt;/p&gt;
&lt;p&gt;3.变量&lt;/p&gt;
&lt;p&gt;　　1.变量名不可以使用拼音且应该意图清晰：一个好的变量名应该能同时提供多种信息（包括：变量功能，变量类型）&lt;/p&gt;
&lt;p&gt;4.代码提交&lt;/p&gt;
&lt;p&gt;　　i.不要提交有问题的代码：SVN不是代码痕迹管理，提交出错的代码可能会让整个项目成员的项目都报错。如果仅仅是希望保持一个痕迹管理的个人版本，推荐使用GIT。&lt;/p&gt;
&lt;p&gt;5.项目&lt;/p&gt;
&lt;p&gt;　　i.小而精好过大而全&lt;/p&gt;
&lt;p&gt;　　ii.约定优于配置&lt;/p&gt;
&lt;p&gt;Coder不是天然的高大上，我们是为了让计算机更好的帮助人类工作而存在的职业。大多数时候我们会穿着廉价的T恤，喝着廉价的咖啡，使用着廉价的电脑。如果你还编写着廉价的代码，就等于挥霍着廉价的青春。&lt;/p&gt;
&lt;p&gt;最后的最后，永远不要向垃圾代码妥协——至每一个不愿意向现实低头的行者，及我。&lt;/p&gt;
</description>
<pubDate>Sun, 05 Nov 2017 03:27:00 +0000</pubDate>
<dc:creator>冷豪</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/learnhow/p/7786939.html</dc:identifier>
</item>
<item>
<title>Linux系列教程（十二）——Linux软件包管理之yum在线管理 - YSOcean</title>
<link>http://www.cnblogs.com/ysocean/p/7774468.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/ysocean/p/7774468.html</guid>
<description>&lt;p&gt;　　上一篇博客我们介绍了&lt;a href=&quot;http://www.cnblogs.com/ysocean/p/7751268.html&quot; target=&quot;_blank&quot;&gt;rpm包管理之rpm命令管理&lt;/a&gt;，我们发现在使用rpm命令手动安装rpm包的时候，会发现安装遇到到的依赖让你痛不欲生，安装一个rpm时会要先先安装某个依赖的rpm，而安装这个依赖的rpm包是可能又必须先安装它所依赖的。在实际操作中，我们肯定是不会使用rpm命令手动安装软件包的，更简单的方法就是这篇博客我们将介绍RPM包管理——yum在线管理。&lt;/p&gt;

&lt;h3&gt;1、yum在线管理&lt;/h3&gt;
&lt;p&gt;　　yum（全称为 Yellow dog Updater, Modified）是一个在Fedora和RedHat以及SUSE中的Shell前端软件包管理器。基于RPM包管理，能够从指定的服务器自动下载RPM包并且安装，&lt;strong&gt;可以自动处理依赖性关系，并且一次安装所有依赖的软体包&lt;/strong&gt;，无须繁琐地一次次下载、安装。yum提供了查找、安装、删除某一个、一组甚至全部软件包的命令，而且命令简洁而又好记。 &lt;/p&gt;
&lt;p&gt;　　从上面的解释我们可以看到yum管理是从指定的服务器（网络yum源）下载，所以必须要有网络或者自己手动配置一个本地yum源（不需要网络，后面会讲解如何手动配置），而且最关键的是yum能帮我们解决依赖性关系。&lt;/p&gt;

&lt;h3&gt;2、网络yum源&lt;/h3&gt;
&lt;p&gt;　　在安装好的Linux系统中，进入到 /etc/yum.repos.d/ 目录：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/1120165/201711/1120165-20171102214446545-181602468.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　一般来讲，以 .repo 结尾的文件都是yum源。如果能联网，会使用CentOS-Base.repo作为默认的yum源，如果不能联网我们使用 CentOS-Media.repo 作为本地光盘yum源。&lt;/p&gt;
&lt;p&gt;　　通过vim 命令打开 CentOS-Base.repo：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/1120165/201711/1120165-20171102214803607-2114674134.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　查看红色框住的内容：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/1120165/201711/1120165-20171102214836310-720254337.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　mirrorlist和baseurl的地址就是用来下载rpm包的地址，我们使用其中一个就好了。由于默认的地址都是国外的网站，如果嫌网速慢的话，可以更改为国内的yum源地址。&lt;/p&gt;
&lt;p&gt;　　比如阿里的：http://mirrors.aliyun.com/repo/Centos-7.repo&lt;/p&gt;

&lt;h3&gt;3、常用的 yum 命令 &lt;/h3&gt;
&lt;h4&gt;　　①、查询所有可用软件包列表:yum list&lt;/h4&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/1120165/201711/1120165-20171102215744763-1077209714.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　注意：此命令是在配好的yum源服务器上去查询所有可用的软件包&lt;/p&gt;

&lt;h4&gt;　　②、查询服务器上和关键字相关的软件包：yum search 关键字&lt;/h4&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/1120165/201711/1120165-20171102215931013-1758790396.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h4&gt;　　③、yum 安装软件包：yum -y install 包名&lt;/h4&gt;
&lt;p&gt;　　选项： -y   表示自动回答 yes（如果不加，每安装一个软件都会让你确认是否安装）&lt;/p&gt;
&lt;p&gt;　　　　　install   表示安装&lt;/p&gt;
&lt;p&gt;　　范例：这里以安装编译器 gcc 为例（后面演示安装源码包必须要用到此编译器）：yum -y install gcc&lt;/p&gt;
&lt;p&gt;　　没有报错，出现如下安装信息则说明安装成功：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/1120165/201711/1120165-20171102220611545-1442410447.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;　　或者在安装完成之后，输入 rpm -q gcc 弹出如下界面表示安装成功：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/1120165/201711/1120165-20171102220628857-328035645.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h4&gt;　　④、yum 升级软件包：yum -y update 包名&lt;/h4&gt;
&lt;p&gt;　　注意：如果不指定包名，那么将会升级系统中所有的软件包，包括Linux内核。而Linux内核升级之后是需要在本地进行一些配置才能开机，如果是远程连接服务器进行Linux内核升级，那么是不可能启动服务器的。&lt;/p&gt;
&lt;h4&gt;　　⑤、yum 卸载软件包：yum -y remove 包名&lt;/h4&gt;
&lt;p&gt;　　注意：卸载和升级也一样，而且由于软件包很多都有依赖性，你卸载A，而B和C都依赖于A，那么B和C都会卸载。假如C和Linux某个系统软件有依赖，而C也卸载掉了，可能造成某个系统功能不能使用。所以我们在卸载软件的时候一定要注意。&lt;/p&gt;

&lt;h3&gt;4、yum软件组管理&lt;/h3&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/1120165/201711/1120165-20171102221232670-244532591.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　安装某个软件组，会比我们一个一个安装某个软件包要方便的多。&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/1120165/201711/1120165-20171102221330873-1124688856.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　这是在远程的桌面显示的是中文信息，如果直接进入服务器查询，显示的便是英文，我们需要什么直接安装即可。&lt;/p&gt;

</description>
<pubDate>Sun, 05 Nov 2017 03:20:00 +0000</pubDate>
<dc:creator>YSOcean</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/ysocean/p/7774468.html</dc:identifier>
</item>
</channel>
</rss>