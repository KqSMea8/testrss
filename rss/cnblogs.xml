<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>【ASP.NET MVC系列】浅谈HTML辅助方法 - Alan_beijing</title>
<link>http://www.cnblogs.com/wangjiming/p/8293965.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/wangjiming/p/8293965.html</guid>
<description>&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1066923/201801/1066923-20180114231237472-1175578725.png&quot; alt=&quot;&quot; width=&quot;216&quot; height=&quot;42&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1066923/201801/1066923-20180119111916974-764315611.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;一 概述&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;基于ASP.NET MVC基架开发模式中，我们很清楚View的扩展名：.cshtml，对该扩展名，不知是否有朋友研究过为啥将其如此命名？我且将它拆分成.cshtml=.cs(后台代码)+html(前端纯html标签代码)。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;我们知道，MVC的本质目的是尽量做到前后端分离，View这样命名，是否有违背前后端分离这一原则呢？当然不是，相反，这样做却提高了代码的复用性，提高了编程的效率。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;那有什么工具来解决该问题呢？HTML辅助方法。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;本文将与大家分享HTML辅助方法，当然，HTML辅助方法是在表单上运用的，所以，我们会先大致提一些表单(Form)。HTML辅助方法，我们可大致归结为基于ASP.NET MVC基架的HTML辅助方法和自定义的&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;HTML扩展方法，前者不作为本章的重点(因为非常简单，使用时，只需调用相应的方法即可)，后者才是本章的重点。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;二 表单&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;关于表单的内容，将会从下图的四个方面的来论述：&lt;/p&gt;
&lt;p&gt;(1)WebFormb表单与MVC表单的比较&lt;/p&gt;
&lt;p&gt;(2)表单提交的方式和url：action和method特性&lt;/p&gt;
&lt;p&gt;(3)表单请求方式&lt;/p&gt;
&lt;p&gt;(4)数据输入的一般模式&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1066923/201801/1066923-20180119112251428-952823947.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;（一）WebForm表单与MVC表单比较&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;1.WebForm表单主要是利用其强大的&amp;lt;form&amp;gt;标签，而MVC并未完全利用&amp;lt;form&amp;gt;标签；&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1066923/201801/1066923-20180119114602162-1112495077.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;2.WebForm主要利用服务器端控件，MVC主要利用基于MVC基架的HTML辅助方法，两者都用HTML标签&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1066923/201801/1066923-20180119120539803-552177695.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; 3.WebForm页面与后台代码强绑定，而MVC与后台代码松耦合&lt;/p&gt;
&lt;p&gt;(1)WebForm中，每个页面对应一个类，页面泪继承Page类，我们称为页面类，如上图中Default页面对应的类为_Default，&lt;/p&gt;
&lt;p&gt;(2)每个页面由三部分组成：前端代码(Default.aspx)，后台代码(Default.aspx.cs)和设计器(Default.aspx.designer.cs);&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1066923/201801/1066923-20180121073558693-121847377.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;4.从性能上看，MVC比WebForm性能高。WebForm性能低的主要因素有如下几点：&lt;/p&gt;
&lt;p&gt;(1)服务器端控件，消耗带宽，吃内存；&lt;/p&gt;
&lt;p&gt;(2)ViewState垃圾数据; &lt;/p&gt;
&lt;p&gt;&lt;span&gt;（二）表单提交的方式和url：action和method特性&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;action和method为&amp;lt;form&amp;gt;标签两个重要的特性&lt;/p&gt;
&lt;p&gt;(1)action：指将&amp;lt;form&amp;gt;标签提交到何处，本质就是一个url;&lt;/p&gt;
&lt;p&gt;(2)method：提交form的方法，主要为post和get，默认为get;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;（三）表单请求方式&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;表单请求方式，主要为post和get,默认为get；&lt;/p&gt;
&lt;p&gt;&lt;span&gt;（四）数据输入的一般模式&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; 数据输入模式，一般分为两种模式：编辑-提交模式(Edit-and-Post)和选择-编辑-提交模式(Selct-Edit-Post)&lt;/p&gt;
&lt;p&gt;&lt;span&gt;三 HTML辅助方法&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;基于ASP.NET MVC基架的HTML辅助方法，大致分为内置HTM辅助方法(也叫基于MVC基架的HTML辅助方法)和自定义HTML辅助方法。 &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1066923/201801/1066923-20180121073314849-1442539408.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;（一）基于MVC基架的HTML辅助方法&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;通过反汇编工具查看System.Web.Mvc.Html下的辅助方法，如下图所以。&lt;/p&gt;
&lt;p&gt;由于基于MVC基架的辅方法比较简单，使用时只需调用即可，故本节不会花较大篇幅讲解，只是大致提及一下。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1066923/201801/1066923-20180121063329381-847598790.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;1.我们随便查看InputExtensions和LableExtensions辅助方法&lt;/p&gt;
&lt;p&gt;InputExtensions&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;229&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; InputExtensions
{
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Methods&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; MvcHtmlString CheckBox(&lt;span&gt;this&lt;/span&gt; HtmlHelper htmlHelper, &lt;span&gt;string&lt;/span&gt;&lt;span&gt; name);
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; MvcHtmlString CheckBox(&lt;span&gt;this&lt;/span&gt; HtmlHelper htmlHelper, &lt;span&gt;string&lt;/span&gt; name, &lt;span&gt;bool&lt;/span&gt;&lt;span&gt; isChecked);
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; MvcHtmlString CheckBox(&lt;span&gt;this&lt;/span&gt; HtmlHelper htmlHelper, &lt;span&gt;string&lt;/span&gt; name, IDictionary&amp;lt;&lt;span&gt;string&lt;/span&gt;, &lt;span&gt;object&lt;/span&gt;&amp;gt;&lt;span&gt; htmlAttributes);
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; MvcHtmlString CheckBox(&lt;span&gt;this&lt;/span&gt; HtmlHelper htmlHelper, &lt;span&gt;string&lt;/span&gt; name, &lt;span&gt;object&lt;/span&gt;&lt;span&gt; htmlAttributes);
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; MvcHtmlString CheckBox(&lt;span&gt;this&lt;/span&gt; HtmlHelper htmlHelper, &lt;span&gt;string&lt;/span&gt; name, &lt;span&gt;bool&lt;/span&gt; isChecked, IDictionary&amp;lt;&lt;span&gt;string&lt;/span&gt;, &lt;span&gt;object&lt;/span&gt;&amp;gt;&lt;span&gt; htmlAttributes);
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; MvcHtmlString CheckBox(&lt;span&gt;this&lt;/span&gt; HtmlHelper htmlHelper, &lt;span&gt;string&lt;/span&gt; name, &lt;span&gt;bool&lt;/span&gt; isChecked, &lt;span&gt;object&lt;/span&gt;&lt;span&gt; htmlAttributes);
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; MvcHtmlString CheckBoxFor&amp;lt;TModel&amp;gt;(&lt;span&gt;this&lt;/span&gt; HtmlHelper&amp;lt;TModel&amp;gt; htmlHelper, Expression&amp;lt;Func&amp;lt;TModel, &lt;span&gt;bool&lt;/span&gt;&amp;gt;&amp;gt;&lt;span&gt; expression);
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; MvcHtmlString CheckBoxFor&amp;lt;TModel&amp;gt;(&lt;span&gt;this&lt;/span&gt; HtmlHelper&amp;lt;TModel&amp;gt; htmlHelper, Expression&amp;lt;Func&amp;lt;TModel, &lt;span&gt;bool&lt;/span&gt;&amp;gt;&amp;gt; expression, IDictionary&amp;lt;&lt;span&gt;string&lt;/span&gt;, &lt;span&gt;object&lt;/span&gt;&amp;gt;&lt;span&gt; htmlAttributes);
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; MvcHtmlString CheckBoxFor&amp;lt;TModel&amp;gt;(&lt;span&gt;this&lt;/span&gt; HtmlHelper&amp;lt;TModel&amp;gt; htmlHelper, Expression&amp;lt;Func&amp;lt;TModel, &lt;span&gt;bool&lt;/span&gt;&amp;gt;&amp;gt; expression, &lt;span&gt;object&lt;/span&gt;&lt;span&gt; htmlAttributes);
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; MvcHtmlString CheckBoxHelper(HtmlHelper htmlHelper, ModelMetadata metadata, &lt;span&gt;string&lt;/span&gt; name, &lt;span&gt;bool&lt;/span&gt;? isChecked, IDictionary&amp;lt;&lt;span&gt;string&lt;/span&gt;, &lt;span&gt;object&lt;/span&gt;&amp;gt;&lt;span&gt; htmlAttributes);
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; MvcHtmlString Hidden(&lt;span&gt;this&lt;/span&gt; HtmlHelper htmlHelper, &lt;span&gt;string&lt;/span&gt;&lt;span&gt; name);
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; MvcHtmlString Hidden(&lt;span&gt;this&lt;/span&gt; HtmlHelper htmlHelper, &lt;span&gt;string&lt;/span&gt; name, &lt;span&gt;object&lt;/span&gt;&lt;span&gt; value);
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; MvcHtmlString Hidden(&lt;span&gt;this&lt;/span&gt; HtmlHelper htmlHelper, &lt;span&gt;string&lt;/span&gt; name, &lt;span&gt;object&lt;/span&gt; value, IDictionary&amp;lt;&lt;span&gt;string&lt;/span&gt;, &lt;span&gt;object&lt;/span&gt;&amp;gt;&lt;span&gt; htmlAttributes);
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; MvcHtmlString Hidden(&lt;span&gt;this&lt;/span&gt; HtmlHelper htmlHelper, &lt;span&gt;string&lt;/span&gt; name, &lt;span&gt;object&lt;/span&gt; value, &lt;span&gt;object&lt;/span&gt;&lt;span&gt; htmlAttributes);
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; MvcHtmlString HiddenFor&amp;lt;TModel, TProperty&amp;gt;(&lt;span&gt;this&lt;/span&gt; HtmlHelper&amp;lt;TModel&amp;gt; htmlHelper, Expression&amp;lt;Func&amp;lt;TModel, TProperty&amp;gt;&amp;gt;&lt;span&gt; expression);
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; MvcHtmlString HiddenFor&amp;lt;TModel, TProperty&amp;gt;(&lt;span&gt;this&lt;/span&gt; HtmlHelper&amp;lt;TModel&amp;gt; htmlHelper, Expression&amp;lt;Func&amp;lt;TModel, TProperty&amp;gt;&amp;gt; expression, IDictionary&amp;lt;&lt;span&gt;string&lt;/span&gt;, &lt;span&gt;object&lt;/span&gt;&amp;gt;&lt;span&gt; htmlAttributes);
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; MvcHtmlString HiddenFor&amp;lt;TModel, TProperty&amp;gt;(&lt;span&gt;this&lt;/span&gt; HtmlHelper&amp;lt;TModel&amp;gt; htmlHelper, Expression&amp;lt;Func&amp;lt;TModel, TProperty&amp;gt;&amp;gt; expression, &lt;span&gt;object&lt;/span&gt;&lt;span&gt; htmlAttributes);
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; MvcHtmlString HiddenHelper(HtmlHelper htmlHelper, ModelMetadata metadata, &lt;span&gt;object&lt;/span&gt; value, &lt;span&gt;bool&lt;/span&gt; useViewData, &lt;span&gt;string&lt;/span&gt; expression, IDictionary&amp;lt;&lt;span&gt;string&lt;/span&gt;, &lt;span&gt;object&lt;/span&gt;&amp;gt;&lt;span&gt; htmlAttributes);
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; MvcHtmlString InputHelper(HtmlHelper htmlHelper, InputType inputType, ModelMetadata metadata, &lt;span&gt;string&lt;/span&gt; name, &lt;span&gt;object&lt;/span&gt; value, &lt;span&gt;bool&lt;/span&gt; useViewData, &lt;span&gt;bool&lt;/span&gt; isChecked, &lt;span&gt;bool&lt;/span&gt; setId, &lt;span&gt;bool&lt;/span&gt; isExplicitValue, &lt;span&gt;string&lt;/span&gt; format, IDictionary&amp;lt;&lt;span&gt;string&lt;/span&gt;, &lt;span&gt;object&lt;/span&gt;&amp;gt;&lt;span&gt; htmlAttributes);
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; MvcHtmlString Password(&lt;span&gt;this&lt;/span&gt; HtmlHelper htmlHelper, &lt;span&gt;string&lt;/span&gt;&lt;span&gt; name);
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; MvcHtmlString Password(&lt;span&gt;this&lt;/span&gt; HtmlHelper htmlHelper, &lt;span&gt;string&lt;/span&gt; name, &lt;span&gt;object&lt;/span&gt;&lt;span&gt; value);
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; MvcHtmlString Password(&lt;span&gt;this&lt;/span&gt; HtmlHelper htmlHelper, &lt;span&gt;string&lt;/span&gt; name, &lt;span&gt;object&lt;/span&gt; value, IDictionary&amp;lt;&lt;span&gt;string&lt;/span&gt;, &lt;span&gt;object&lt;/span&gt;&amp;gt;&lt;span&gt; htmlAttributes);
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; MvcHtmlString Password(&lt;span&gt;this&lt;/span&gt; HtmlHelper htmlHelper, &lt;span&gt;string&lt;/span&gt; name, &lt;span&gt;object&lt;/span&gt; value, &lt;span&gt;object&lt;/span&gt;&lt;span&gt; htmlAttributes);
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; MvcHtmlString PasswordFor&amp;lt;TModel, TProperty&amp;gt;(&lt;span&gt;this&lt;/span&gt; HtmlHelper&amp;lt;TModel&amp;gt; htmlHelper, Expression&amp;lt;Func&amp;lt;TModel, TProperty&amp;gt;&amp;gt;&lt;span&gt; expression);
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; MvcHtmlString PasswordFor&amp;lt;TModel, TProperty&amp;gt;(&lt;span&gt;this&lt;/span&gt; HtmlHelper&amp;lt;TModel&amp;gt; htmlHelper, Expression&amp;lt;Func&amp;lt;TModel, TProperty&amp;gt;&amp;gt; expression, IDictionary&amp;lt;&lt;span&gt;string&lt;/span&gt;, &lt;span&gt;object&lt;/span&gt;&amp;gt;&lt;span&gt; htmlAttributes);
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; MvcHtmlString PasswordFor&amp;lt;TModel, TProperty&amp;gt;(&lt;span&gt;this&lt;/span&gt; HtmlHelper&amp;lt;TModel&amp;gt; htmlHelper, Expression&amp;lt;Func&amp;lt;TModel, TProperty&amp;gt;&amp;gt; expression, &lt;span&gt;object&lt;/span&gt;&lt;span&gt; htmlAttributes);
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; MvcHtmlString PasswordHelper(HtmlHelper htmlHelper, ModelMetadata metadata, &lt;span&gt;string&lt;/span&gt; name, &lt;span&gt;object&lt;/span&gt; value, IDictionary&amp;lt;&lt;span&gt;string&lt;/span&gt;, &lt;span&gt;object&lt;/span&gt;&amp;gt;&lt;span&gt; htmlAttributes);
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; MvcHtmlString RadioButton(&lt;span&gt;this&lt;/span&gt; HtmlHelper htmlHelper, &lt;span&gt;string&lt;/span&gt; name, &lt;span&gt;object&lt;/span&gt;&lt;span&gt; value);
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; MvcHtmlString RadioButton(&lt;span&gt;this&lt;/span&gt; HtmlHelper htmlHelper, &lt;span&gt;string&lt;/span&gt; name, &lt;span&gt;object&lt;/span&gt; value, &lt;span&gt;bool&lt;/span&gt;&lt;span&gt; isChecked);
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; MvcHtmlString RadioButton(&lt;span&gt;this&lt;/span&gt; HtmlHelper htmlHelper, &lt;span&gt;string&lt;/span&gt; name, &lt;span&gt;object&lt;/span&gt; value, IDictionary&amp;lt;&lt;span&gt;string&lt;/span&gt;, &lt;span&gt;object&lt;/span&gt;&amp;gt;&lt;span&gt; htmlAttributes);
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; MvcHtmlString RadioButton(&lt;span&gt;this&lt;/span&gt; HtmlHelper htmlHelper, &lt;span&gt;string&lt;/span&gt; name, &lt;span&gt;object&lt;/span&gt; value, &lt;span&gt;object&lt;/span&gt;&lt;span&gt; htmlAttributes);
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; MvcHtmlString RadioButton(&lt;span&gt;this&lt;/span&gt; HtmlHelper htmlHelper, &lt;span&gt;string&lt;/span&gt; name, &lt;span&gt;object&lt;/span&gt; value, &lt;span&gt;bool&lt;/span&gt; isChecked, IDictionary&amp;lt;&lt;span&gt;string&lt;/span&gt;, &lt;span&gt;object&lt;/span&gt;&amp;gt;&lt;span&gt; htmlAttributes);
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; MvcHtmlString RadioButton(&lt;span&gt;this&lt;/span&gt; HtmlHelper htmlHelper, &lt;span&gt;string&lt;/span&gt; name, &lt;span&gt;object&lt;/span&gt; value, &lt;span&gt;bool&lt;/span&gt; isChecked, &lt;span&gt;object&lt;/span&gt;&lt;span&gt; htmlAttributes);
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; MvcHtmlString RadioButtonFor&amp;lt;TModel, TProperty&amp;gt;(&lt;span&gt;this&lt;/span&gt; HtmlHelper&amp;lt;TModel&amp;gt; htmlHelper, Expression&amp;lt;Func&amp;lt;TModel, TProperty&amp;gt;&amp;gt; expression, &lt;span&gt;object&lt;/span&gt;&lt;span&gt; value);
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; MvcHtmlString RadioButtonFor&amp;lt;TModel, TProperty&amp;gt;(&lt;span&gt;this&lt;/span&gt; HtmlHelper&amp;lt;TModel&amp;gt; htmlHelper, Expression&amp;lt;Func&amp;lt;TModel, TProperty&amp;gt;&amp;gt; expression, &lt;span&gt;object&lt;/span&gt; value, IDictionary&amp;lt;&lt;span&gt;string&lt;/span&gt;, &lt;span&gt;object&lt;/span&gt;&amp;gt;&lt;span&gt; htmlAttributes);
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; MvcHtmlString RadioButtonFor&amp;lt;TModel, TProperty&amp;gt;(&lt;span&gt;this&lt;/span&gt; HtmlHelper&amp;lt;TModel&amp;gt; htmlHelper, Expression&amp;lt;Func&amp;lt;TModel, TProperty&amp;gt;&amp;gt; expression, &lt;span&gt;object&lt;/span&gt; value, &lt;span&gt;object&lt;/span&gt;&lt;span&gt; htmlAttributes);
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; MvcHtmlString RadioButtonHelper(HtmlHelper htmlHelper, ModelMetadata metadata, &lt;span&gt;object&lt;/span&gt; model, &lt;span&gt;string&lt;/span&gt; name, &lt;span&gt;object&lt;/span&gt; value, &lt;span&gt;bool&lt;/span&gt;? isChecked, IDictionary&amp;lt;&lt;span&gt;string&lt;/span&gt;, &lt;span&gt;object&lt;/span&gt;&amp;gt;&lt;span&gt; htmlAttributes);
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; MvcHtmlString TextBox(&lt;span&gt;this&lt;/span&gt; HtmlHelper htmlHelper, &lt;span&gt;string&lt;/span&gt;&lt;span&gt; name);
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; MvcHtmlString TextBox(&lt;span&gt;this&lt;/span&gt; HtmlHelper htmlHelper, &lt;span&gt;string&lt;/span&gt; name, &lt;span&gt;object&lt;/span&gt;&lt;span&gt; value);
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; MvcHtmlString TextBox(&lt;span&gt;this&lt;/span&gt; HtmlHelper htmlHelper, &lt;span&gt;string&lt;/span&gt; name, &lt;span&gt;object&lt;/span&gt; value, IDictionary&amp;lt;&lt;span&gt;string&lt;/span&gt;, &lt;span&gt;object&lt;/span&gt;&amp;gt;&lt;span&gt; htmlAttributes);
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; MvcHtmlString TextBox(&lt;span&gt;this&lt;/span&gt; HtmlHelper htmlHelper, &lt;span&gt;string&lt;/span&gt; name, &lt;span&gt;object&lt;/span&gt; value, &lt;span&gt;object&lt;/span&gt;&lt;span&gt; htmlAttributes);
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; MvcHtmlString TextBox(&lt;span&gt;this&lt;/span&gt; HtmlHelper htmlHelper, &lt;span&gt;string&lt;/span&gt; name, &lt;span&gt;object&lt;/span&gt; value, &lt;span&gt;string&lt;/span&gt;&lt;span&gt; format);
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; MvcHtmlString TextBox(&lt;span&gt;this&lt;/span&gt; HtmlHelper htmlHelper, &lt;span&gt;string&lt;/span&gt; name, &lt;span&gt;object&lt;/span&gt; value, &lt;span&gt;string&lt;/span&gt; format, IDictionary&amp;lt;&lt;span&gt;string&lt;/span&gt;, &lt;span&gt;object&lt;/span&gt;&amp;gt;&lt;span&gt; htmlAttributes);
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; MvcHtmlString TextBox(&lt;span&gt;this&lt;/span&gt; HtmlHelper htmlHelper, &lt;span&gt;string&lt;/span&gt; name, &lt;span&gt;object&lt;/span&gt; value, &lt;span&gt;string&lt;/span&gt; format, &lt;span&gt;object&lt;/span&gt;&lt;span&gt; htmlAttributes);
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; MvcHtmlString TextBoxFor&amp;lt;TModel, TProperty&amp;gt;(&lt;span&gt;this&lt;/span&gt; HtmlHelper&amp;lt;TModel&amp;gt; htmlHelper, Expression&amp;lt;Func&amp;lt;TModel, TProperty&amp;gt;&amp;gt;&lt;span&gt; expression);
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; MvcHtmlString TextBoxFor&amp;lt;TModel, TProperty&amp;gt;(&lt;span&gt;this&lt;/span&gt; HtmlHelper&amp;lt;TModel&amp;gt; htmlHelper, Expression&amp;lt;Func&amp;lt;TModel, TProperty&amp;gt;&amp;gt; expression, IDictionary&amp;lt;&lt;span&gt;string&lt;/span&gt;, &lt;span&gt;object&lt;/span&gt;&amp;gt;&lt;span&gt; htmlAttributes);
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; MvcHtmlString TextBoxFor&amp;lt;TModel, TProperty&amp;gt;(&lt;span&gt;this&lt;/span&gt; HtmlHelper&amp;lt;TModel&amp;gt; htmlHelper, Expression&amp;lt;Func&amp;lt;TModel, TProperty&amp;gt;&amp;gt; expression, &lt;span&gt;object&lt;/span&gt;&lt;span&gt; htmlAttributes);
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; MvcHtmlString TextBoxFor&amp;lt;TModel, TProperty&amp;gt;(&lt;span&gt;this&lt;/span&gt; HtmlHelper&amp;lt;TModel&amp;gt; htmlHelper, Expression&amp;lt;Func&amp;lt;TModel, TProperty&amp;gt;&amp;gt; expression, &lt;span&gt;string&lt;/span&gt;&lt;span&gt; format);
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; MvcHtmlString TextBoxFor&amp;lt;TModel, TProperty&amp;gt;(&lt;span&gt;this&lt;/span&gt; HtmlHelper&amp;lt;TModel&amp;gt; htmlHelper, Expression&amp;lt;Func&amp;lt;TModel, TProperty&amp;gt;&amp;gt; expression, &lt;span&gt;string&lt;/span&gt; format, IDictionary&amp;lt;&lt;span&gt;string&lt;/span&gt;, &lt;span&gt;object&lt;/span&gt;&amp;gt;&lt;span&gt; htmlAttributes);
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; MvcHtmlString TextBoxFor&amp;lt;TModel, TProperty&amp;gt;(&lt;span&gt;this&lt;/span&gt; HtmlHelper&amp;lt;TModel&amp;gt; htmlHelper, Expression&amp;lt;Func&amp;lt;TModel, TProperty&amp;gt;&amp;gt; expression, &lt;span&gt;string&lt;/span&gt; format, &lt;span&gt;object&lt;/span&gt;&lt;span&gt; htmlAttributes);
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; MvcHtmlString TextBoxHelper(&lt;span&gt;this&lt;/span&gt; HtmlHelper htmlHelper, ModelMetadata metadata, &lt;span&gt;object&lt;/span&gt; model, &lt;span&gt;string&lt;/span&gt; expression, &lt;span&gt;string&lt;/span&gt; format, IDictionary&amp;lt;&lt;span&gt;string&lt;/span&gt;, &lt;span&gt;object&lt;/span&gt;&amp;gt;&lt;span&gt; htmlAttributes);
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; RouteValueDictionary ToRouteValueDictionary(IDictionary&amp;lt;&lt;span&gt;string&lt;/span&gt;, &lt;span&gt;object&lt;/span&gt;&amp;gt;&lt;span&gt; dictionary);
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;LableExtensions&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;113&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; LabelExtensions
{
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Methods&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; MvcHtmlString Label(&lt;span&gt;this&lt;/span&gt; HtmlHelper html, &lt;span&gt;string&lt;/span&gt;&lt;span&gt; expression);
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; MvcHtmlString Label(&lt;span&gt;this&lt;/span&gt; HtmlHelper html, &lt;span&gt;string&lt;/span&gt; expression, IDictionary&amp;lt;&lt;span&gt;string&lt;/span&gt;, &lt;span&gt;object&lt;/span&gt;&amp;gt;&lt;span&gt; htmlAttributes);
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; MvcHtmlString Label(&lt;span&gt;this&lt;/span&gt; HtmlHelper html, &lt;span&gt;string&lt;/span&gt; expression, &lt;span&gt;object&lt;/span&gt;&lt;span&gt; htmlAttributes);
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; MvcHtmlString Label(&lt;span&gt;this&lt;/span&gt; HtmlHelper html, &lt;span&gt;string&lt;/span&gt; expression, &lt;span&gt;string&lt;/span&gt;&lt;span&gt; labelText);
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; MvcHtmlString Label(&lt;span&gt;this&lt;/span&gt; HtmlHelper html, &lt;span&gt;string&lt;/span&gt; expression, &lt;span&gt;string&lt;/span&gt; labelText, IDictionary&amp;lt;&lt;span&gt;string&lt;/span&gt;, &lt;span&gt;object&lt;/span&gt;&amp;gt;&lt;span&gt; htmlAttributes);
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; MvcHtmlString Label(&lt;span&gt;this&lt;/span&gt; HtmlHelper html, &lt;span&gt;string&lt;/span&gt; expression, &lt;span&gt;string&lt;/span&gt; labelText, &lt;span&gt;object&lt;/span&gt;&lt;span&gt; htmlAttributes);
    &lt;/span&gt;&lt;span&gt;internal&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; MvcHtmlString Label(&lt;span&gt;this&lt;/span&gt; HtmlHelper html, &lt;span&gt;string&lt;/span&gt; expression, &lt;span&gt;string&lt;/span&gt; labelText, IDictionary&amp;lt;&lt;span&gt;string&lt;/span&gt;, &lt;span&gt;object&lt;/span&gt;&amp;gt;&lt;span&gt; htmlAttributes, ModelMetadataProvider metadataProvider);
    &lt;/span&gt;&lt;span&gt;internal&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; MvcHtmlString Label(&lt;span&gt;this&lt;/span&gt; HtmlHelper html, &lt;span&gt;string&lt;/span&gt; expression, &lt;span&gt;string&lt;/span&gt; labelText, &lt;span&gt;object&lt;/span&gt;&lt;span&gt; htmlAttributes, ModelMetadataProvider metadataProvider);
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; MvcHtmlString LabelFor&amp;lt;TModel, TValue&amp;gt;(&lt;span&gt;this&lt;/span&gt; HtmlHelper&amp;lt;TModel&amp;gt; html, Expression&amp;lt;Func&amp;lt;TModel, TValue&amp;gt;&amp;gt;&lt;span&gt; expression);
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; MvcHtmlString LabelFor&amp;lt;TModel, TValue&amp;gt;(&lt;span&gt;this&lt;/span&gt; HtmlHelper&amp;lt;TModel&amp;gt; html, Expression&amp;lt;Func&amp;lt;TModel, TValue&amp;gt;&amp;gt; expression, IDictionary&amp;lt;&lt;span&gt;string&lt;/span&gt;, &lt;span&gt;object&lt;/span&gt;&amp;gt;&lt;span&gt; htmlAttributes);
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; MvcHtmlString LabelFor&amp;lt;TModel, TValue&amp;gt;(&lt;span&gt;this&lt;/span&gt; HtmlHelper&amp;lt;TModel&amp;gt; html, Expression&amp;lt;Func&amp;lt;TModel, TValue&amp;gt;&amp;gt; expression, &lt;span&gt;object&lt;/span&gt;&lt;span&gt; htmlAttributes);
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; MvcHtmlString LabelFor&amp;lt;TModel, TValue&amp;gt;(&lt;span&gt;this&lt;/span&gt; HtmlHelper&amp;lt;TModel&amp;gt; html, Expression&amp;lt;Func&amp;lt;TModel, TValue&amp;gt;&amp;gt; expression, &lt;span&gt;string&lt;/span&gt;&lt;span&gt; labelText);
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; MvcHtmlString LabelFor&amp;lt;TModel, TValue&amp;gt;(&lt;span&gt;this&lt;/span&gt; HtmlHelper&amp;lt;TModel&amp;gt; html, Expression&amp;lt;Func&amp;lt;TModel, TValue&amp;gt;&amp;gt; expression, &lt;span&gt;string&lt;/span&gt; labelText, IDictionary&amp;lt;&lt;span&gt;string&lt;/span&gt;, &lt;span&gt;object&lt;/span&gt;&amp;gt;&lt;span&gt; htmlAttributes);
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; MvcHtmlString LabelFor&amp;lt;TModel, TValue&amp;gt;(&lt;span&gt;this&lt;/span&gt; HtmlHelper&amp;lt;TModel&amp;gt; html, Expression&amp;lt;Func&amp;lt;TModel, TValue&amp;gt;&amp;gt; expression, &lt;span&gt;string&lt;/span&gt; labelText, &lt;span&gt;object&lt;/span&gt;&lt;span&gt; htmlAttributes);
    &lt;/span&gt;&lt;span&gt;internal&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; MvcHtmlString LabelFor&amp;lt;TModel, TValue&amp;gt;(&lt;span&gt;this&lt;/span&gt; HtmlHelper&amp;lt;TModel&amp;gt; html, Expression&amp;lt;Func&amp;lt;TModel, TValue&amp;gt;&amp;gt; expression, &lt;span&gt;string&lt;/span&gt; labelText, IDictionary&amp;lt;&lt;span&gt;string&lt;/span&gt;, &lt;span&gt;object&lt;/span&gt;&amp;gt;&lt;span&gt; htmlAttributes, ModelMetadataProvider metadataProvider);
    &lt;/span&gt;&lt;span&gt;internal&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; MvcHtmlString LabelFor&amp;lt;TModel, TValue&amp;gt;(&lt;span&gt;this&lt;/span&gt; HtmlHelper&amp;lt;TModel&amp;gt; html, Expression&amp;lt;Func&amp;lt;TModel, TValue&amp;gt;&amp;gt; expression, &lt;span&gt;string&lt;/span&gt; labelText, &lt;span&gt;object&lt;/span&gt;&lt;span&gt; htmlAttributes, ModelMetadataProvider metadataProvider);
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; MvcHtmlString LabelForModel(&lt;span&gt;this&lt;/span&gt;&lt;span&gt; HtmlHelper html);
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; MvcHtmlString LabelForModel(&lt;span&gt;this&lt;/span&gt; HtmlHelper html, IDictionary&amp;lt;&lt;span&gt;string&lt;/span&gt;, &lt;span&gt;object&lt;/span&gt;&amp;gt;&lt;span&gt; htmlAttributes);
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; MvcHtmlString LabelForModel(&lt;span&gt;this&lt;/span&gt; HtmlHelper html, &lt;span&gt;object&lt;/span&gt;&lt;span&gt; htmlAttributes);
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; MvcHtmlString LabelForModel(&lt;span&gt;this&lt;/span&gt; HtmlHelper html, &lt;span&gt;string&lt;/span&gt;&lt;span&gt; labelText);
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; MvcHtmlString LabelForModel(&lt;span&gt;this&lt;/span&gt; HtmlHelper html, &lt;span&gt;string&lt;/span&gt; labelText, IDictionary&amp;lt;&lt;span&gt;string&lt;/span&gt;, &lt;span&gt;object&lt;/span&gt;&amp;gt;&lt;span&gt; htmlAttributes);
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; MvcHtmlString LabelForModel(&lt;span&gt;this&lt;/span&gt; HtmlHelper html, &lt;span&gt;string&lt;/span&gt; labelText, &lt;span&gt;object&lt;/span&gt;&lt;span&gt; htmlAttributes);
    &lt;/span&gt;&lt;span&gt;internal&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; MvcHtmlString LabelHelper(HtmlHelper html, ModelMetadata metadata, &lt;span&gt;string&lt;/span&gt; htmlFieldName, &lt;span&gt;string&lt;/span&gt; labelText = &lt;span&gt;null&lt;/span&gt;, IDictionary&amp;lt;&lt;span&gt;string&lt;/span&gt;, &lt;span&gt;object&lt;/span&gt;&amp;gt; htmlAttributes = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;);
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;2.在ASP.NET MVC5 高级编程(Jon Galloway,Brad Wilson,K.Scott Allen,David Matson 著 ,孙远帅 译) 中，作者将HTML辅助方法大致分为下图几类&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1066923/201801/1066923-20180121064830006-1487153482.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;（二）自定义的HTML辅助方法&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;关于自定义HTML辅助方法，主要从下图五个角度讲解。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1066923/201801/1066923-20180121062522834-2013030139.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;1.为什么要扩展辅助方法&lt;/p&gt;
&lt;p&gt;(1)何为扩展？&lt;/p&gt;
&lt;p&gt;从汉语字面意义理解，即在现有的基础上进行修改(&lt;span&gt;修改现有辅助方法&lt;/span&gt;)、增加(&lt;span&gt;自定义MVC基架没有的辅助方法&lt;/span&gt;)等操作。&lt;/p&gt;
&lt;p&gt;(2)扩展的作用？&lt;/p&gt;
&lt;p&gt;首先，从MVC基架现有的某些HTML辅助方法，其某些属性，如样式等无法满足现有需求，需要扩展；&lt;/p&gt;
&lt;p&gt;其次，现有需求的某些辅助方法，如Image辅助辅助方法，File辅助方法等，MVC基架并未提供，需要扩展；&lt;/p&gt;
&lt;p&gt;最后，扩展的最终目的是提高代码的复用，提高编码效率；&lt;/p&gt;
&lt;p&gt;2.用反汇编工具查看MVC源码是如何扩展的&lt;/p&gt;
&lt;p&gt;(1)我们查看MVC是如何定义强类型和弱类型的，以Html.Lable为例，我们容易得出三个结论：&lt;/p&gt;
&lt;p&gt;1)程序集为System.Web.Mvc&lt;/p&gt;
&lt;p&gt;2)命名空间为System.Web.Mvc.Html&lt;/p&gt;
&lt;p&gt;3)弱类型方法名字直接为纯html对应名字&lt;/p&gt;
&lt;p&gt;4)强类型方法名字=若类型名字+For &lt;/p&gt;
&lt;p&gt;5)辅助方法的返回类型均为MvcHtmlString&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1066923/201801/1066923-20180121054824303-462539378.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;(2)我们用反汇编工具查看一下&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1066923/201801/1066923-20180121055704849-2004523286.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;(3)总结&lt;/p&gt;
&lt;p&gt;根据如上(1)(2)分析，我们知道定义一个HTML辅助方法的步骤&lt;/p&gt;
&lt;p&gt;1)命名空间为System.Web.Mvc&lt;/p&gt;
&lt;p&gt;2)弱类型方法名字直接为纯html对应名字&lt;/p&gt;
&lt;p&gt;3)强类型方法名字=若类型名字+For &lt;/p&gt;
&lt;p&gt;4)辅助方法的返回类型均为MvcHtmlString&lt;/p&gt;
&lt;p&gt;3.扩展弱类型辅助方法&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;49&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;Image弱类型&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; MvcHtmlString Image(&lt;span&gt;this&lt;/span&gt; HtmlHelper helper, &lt;span&gt;string&lt;/span&gt; id, &lt;span&gt;string&lt;/span&gt; url, &lt;span&gt;string&lt;/span&gt; width, &lt;span&gt;string&lt;/span&gt; height, &lt;span&gt;string&lt;/span&gt; alternateText, &lt;span&gt;object&lt;/span&gt;&lt;span&gt; htmlAttributes)
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;创建img标签&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt;             TagBuilder imgTagBulider = &lt;span&gt;new&lt;/span&gt; TagBuilder(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;img&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;为img标签添加属性：id,url,alternateText,htmlAttributes&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;            imgTagBulider.GenerateId(id);
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;             imgTagBulider.MergeAttribute(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, url);
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;             imgTagBulider.MergeAttribute(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;width&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, width);
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;             imgTagBulider.MergeAttribute(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;height&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, height);
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;             imgTagBulider.MergeAttribute(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, url);
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;             imgTagBulider.MergeAttribute(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;alt&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, alternateText);
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;             imgTagBulider.MergeAttributes(&lt;span&gt;new&lt;/span&gt;&lt;span&gt; RouteValueDictionary(htmlAttributes));
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; 
&lt;span&gt;16&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 输出img标签&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt; MvcHtmlString.Create(imgTagBulider.ToString());
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;         }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;4.扩展强类型辅助方法&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;52&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;Image强类型&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; MvcHtmlString ImageFor&amp;lt;TModel, TValue&amp;gt;(&lt;span&gt;this&lt;/span&gt; HtmlHelper&amp;lt;TModel&amp;gt; html,Expression&amp;lt;Func&amp;lt;TModel,TValue&amp;gt;&amp;gt; expression,&lt;span&gt;string&lt;/span&gt; url, &lt;span&gt;string&lt;/span&gt; width, &lt;span&gt;string&lt;/span&gt; height, &lt;span&gt;string&lt;/span&gt; alternateText, Dictionary&amp;lt;TModel, TValue&amp;gt;&lt;span&gt; htmlAttributes)
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;             &lt;span&gt;string&lt;/span&gt; modelName = ExpressionHelper.GetExpressionText(expression);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;从Lambda表达式中获取模型对应属性的名称
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;创建img标签&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt;             TagBuilder imgTagBulider = &lt;span&gt;new&lt;/span&gt; TagBuilder(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;img&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; 
&lt;span&gt; 8&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;为img标签添加属性：id,url,alternateText,htmlAttributes&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;            imgTagBulider.GenerateId(modelName);
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;             imgTagBulider.MergeAttribute(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, url);
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;             imgTagBulider.MergeAttribute(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;width&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, width);
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;             imgTagBulider.MergeAttribute(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;height&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, height);
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;             imgTagBulider.MergeAttribute(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, url);
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;             imgTagBulider.MergeAttribute(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;alt&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, alternateText);
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;             imgTagBulider.MergeAttributes(&lt;span&gt;new&lt;/span&gt;&lt;span&gt; RouteValueDictionary(htmlAttributes));
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; 
&lt;span&gt;17&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt; MvcHtmlString.Create(imgTagBulider.ToString(TagRenderMode.SelfClosing));
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;         }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 5.完整代码&lt;/p&gt;
&lt;p&gt;Index.cshtml&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('cd171456-a705-4107-9b64-6aeede85f9ca')&quot; readability=&quot;37.5&quot;&gt;&lt;img id=&quot;code_img_closed_cd171456-a705-4107-9b64-6aeede85f9ca&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_cd171456-a705-4107-9b64-6aeede85f9ca&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('cd171456-a705-4107-9b64-6aeede85f9ca',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_cd171456-a705-4107-9b64-6aeede85f9ca&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;70&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;@model  HTMLHelperDemo.Models.UserInfo
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; 
&lt;span&gt;3&lt;/span&gt; 
&lt;span&gt;4&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;---------------Image弱类型扩展------------------&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;5&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;@Html.Image(&quot;ImageID&quot;, &quot;/Images/hgspb.jpg&quot;, &quot;300&quot;,&quot;300&quot;,&quot;自定义图片&quot;,null)&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;6&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;---------------Image强类型扩展------------------&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;7&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;@Html.ImageFor(m=&amp;gt;m.UserName, &quot;/Images/hgspb.jpg&quot;, &quot;300&quot;, &quot;300&quot;, &quot;自定义图片&quot;, null)&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;8&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;DefaultController&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('39252f2a-3f00-4a17-94bb-273e8a9a7652')&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_39252f2a-3f00-4a17-94bb-273e8a9a7652&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_39252f2a-3f00-4a17-94bb-273e8a9a7652&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('39252f2a-3f00-4a17-94bb-273e8a9a7652',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_39252f2a-3f00-4a17-94bb-273e8a9a7652&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Collections.Generic;
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Linq;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Web;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Web.Mvc;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; HTMLHelperDemo.Controllers
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; DefaultController : Controller
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; GET: Default&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt;&lt;span&gt; ActionResult Index()
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt; View();
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;MyHtmlHelperExtension.cs&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('3a875798-37d8-43f6-8a15-5325989b9052')&quot; readability=&quot;48&quot;&gt;&lt;img id=&quot;code_img_closed_3a875798-37d8-43f6-8a15-5325989b9052&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_3a875798-37d8-43f6-8a15-5325989b9052&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('3a875798-37d8-43f6-8a15-5325989b9052',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_3a875798-37d8-43f6-8a15-5325989b9052&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;91&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Collections.Generic;
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Linq;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Web;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; 
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Web.Routing;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Linq.Expressions;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; System.Web.Mvc
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; ImageExtensions
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;Image弱类型&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; MvcHtmlString Image(&lt;span&gt;this&lt;/span&gt; HtmlHelper helper, &lt;span&gt;string&lt;/span&gt; id, &lt;span&gt;string&lt;/span&gt; url, &lt;span&gt;string&lt;/span&gt; width, &lt;span&gt;string&lt;/span&gt; height, &lt;span&gt;string&lt;/span&gt; alternateText, &lt;span&gt;object&lt;/span&gt;&lt;span&gt; htmlAttributes)
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;创建img标签&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt;             TagBuilder imgTagBulider = &lt;span&gt;new&lt;/span&gt; TagBuilder(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;img&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; 
&lt;span&gt;18&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;为img标签添加属性：id,url,alternateText,htmlAttributes&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt; &lt;span&gt;            imgTagBulider.GenerateId(id);
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;             imgTagBulider.MergeAttribute(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, url);
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;             imgTagBulider.MergeAttribute(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;width&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, width);
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;             imgTagBulider.MergeAttribute(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;height&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, height);
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;             imgTagBulider.MergeAttribute(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, url);
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;             imgTagBulider.MergeAttribute(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;alt&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, alternateText);
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;             imgTagBulider.MergeAttributes(&lt;span&gt;new&lt;/span&gt;&lt;span&gt; RouteValueDictionary(htmlAttributes));
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; 
&lt;span&gt;27&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 输出img标签&lt;/span&gt;
&lt;span&gt;28&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt; MvcHtmlString.Create(imgTagBulider.ToString());
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;Image强类型&lt;/span&gt;
&lt;span&gt;31&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; MvcHtmlString ImageFor&amp;lt;TModel, TValue&amp;gt;(&lt;span&gt;this&lt;/span&gt; HtmlHelper&amp;lt;TModel&amp;gt; html,Expression&amp;lt;Func&amp;lt;TModel,TValue&amp;gt;&amp;gt; expression,&lt;span&gt;string&lt;/span&gt; url, &lt;span&gt;string&lt;/span&gt; width, &lt;span&gt;string&lt;/span&gt; height, &lt;span&gt;string&lt;/span&gt; alternateText, Dictionary&amp;lt;TModel, TValue&amp;gt;&lt;span&gt; htmlAttributes)
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt;             &lt;span&gt;string&lt;/span&gt; modelName = ExpressionHelper.GetExpressionText(expression);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;从Lambda表达式中获取模型对应属性的名称
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;创建img标签&lt;/span&gt;
&lt;span&gt;35&lt;/span&gt;             TagBuilder imgTagBulider = &lt;span&gt;new&lt;/span&gt; TagBuilder(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;img&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt; 
&lt;span&gt;37&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;为img标签添加属性：id,url,alternateText,htmlAttributes&lt;/span&gt;
&lt;span&gt;38&lt;/span&gt; &lt;span&gt;            imgTagBulider.GenerateId(modelName);
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt;             imgTagBulider.MergeAttribute(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, url);
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt;             imgTagBulider.MergeAttribute(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;width&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, width);
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt;             imgTagBulider.MergeAttribute(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;height&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, height);
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt;             imgTagBulider.MergeAttribute(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, url);
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt;             imgTagBulider.MergeAttribute(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;alt&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, alternateText);
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt;             imgTagBulider.MergeAttributes(&lt;span&gt;new&lt;/span&gt;&lt;span&gt; RouteValueDictionary(htmlAttributes));
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt; 
&lt;span&gt;46&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt; MvcHtmlString.Create(imgTagBulider.ToString(TagRenderMode.SelfClosing));
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;49&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;50&lt;/span&gt;     
&lt;span&gt;51&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;图解&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1066923/201801/1066923-20180121060849412-1873924248.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; 四  HTML辅助方法的工作原理&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;关于HTML辅助方法工做原理，这里不做深入研讨，只是描述一下工作原理的轮廓。&lt;/p&gt;
&lt;p&gt;1.MVC中，View的后缀为.cshtml，我们可以将其拆分为：.cshtml=.cs+html，即由后台.cs代码+html标签构成；&lt;/p&gt;
&lt;p&gt;2.既然View是由后台代码.cs+html标签构成，那么什么标签能满足这两个条件呢？HTML辅助方法。由此，我们知道HTML辅助方法扮演后台代码和前端HTML代码的中间者，桥梁；&lt;/p&gt;
&lt;p&gt;3.既然HTML代码扮演后台代码和前端HTML桥梁，那么其与后台有哪些联系呢？&lt;/p&gt;
&lt;p&gt; (1)与Model的联系，如HTML强辅助方法，使用Lambda表达式&lt;/p&gt;
&lt;p&gt; (2)与Conteller联系,如Html.ActonLink&lt;/p&gt;
&lt;p&gt;(3)与Route联系，如Html.RouteLink;&lt;/p&gt;
&lt;p&gt;(4)与ModelState联系，如在验证输入值的合法性时，若验证错误，错误消息存在模型状态中，然后返回给Html相应的辅助方法&lt;/p&gt;
&lt;p&gt;.......&lt;/p&gt;
&lt;p&gt;4.我们知道了HTML辅助方法与后台的联系，那么与后台联系之后，接下来做什么呢？渲染成HTML，返回给浏览器&lt;/p&gt;
&lt;p&gt;如上，我们大致分析了HTML辅助方法的工作原理步骤，下面我们将要的画图分析一下&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1066923/201801/1066923-20180121071131271-1937999574.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;四  参考文献&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;【01】C#高级编程（第七版）  （Christian Nagel,Bill Evjen和Jay Glynn 编著，李铭 译，黄静 审校）&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;五 作者关于评论的建议&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;欢迎读者朋友们广提意见，您宝贵的意见，是我写作的动力。相互学习，共同进步！&lt;/span&gt;&lt;br/&gt;&lt;span&gt;（一） 关于文章内容&lt;/span&gt;&lt;br/&gt;&lt;span&gt;1.简单，回复1(请指出简单因素)&lt;/span&gt;&lt;br/&gt;&lt;span&gt;2.一般，回复2&lt;/span&gt;&lt;br/&gt;&lt;span&gt;3.适度，回复3&lt;/span&gt;&lt;br/&gt;&lt;span&gt;4.较难，回复4&lt;/span&gt;&lt;br/&gt;&lt;span&gt;5.很难，回复5(请指出很难因素)&lt;/span&gt;&lt;br/&gt;&lt;span&gt;（二） 文章讲解&lt;/span&gt;&lt;br/&gt;&lt;span&gt;1.一般，回复6&lt;/span&gt;&lt;br/&gt;&lt;span&gt;2.良好，回复7&lt;/span&gt;&lt;br/&gt;&lt;span&gt;3.易懂，回复8&lt;/span&gt;&lt;br/&gt;&lt;span&gt;4.复杂，回复9(请指出复杂因素)&lt;/span&gt;&lt;br/&gt;&lt;span&gt;（三） 关于其他意见&lt;/span&gt;&lt;br/&gt;&lt;span&gt;10.若有其他意见，在评论区评价即可；&lt;/span&gt;&lt;br/&gt;&lt;span&gt;11.关于评价内容，不好的评价内容(除人身攻击外)，具有建设性建议的评价内容，一定保存&lt;/span&gt;&lt;br/&gt;&lt;span&gt;12.其他评价，有可能会被删除&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;六   版权区&lt;/span&gt;&lt;/p&gt;
&lt;div&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;感谢您的阅读，若有不足之处，欢迎指教，共同学习、共同进步。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;博主网址：http://www.cnblogs.com/wangjiming/。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;极少部分文章利用读书、参考、引用、抄袭、复制和粘贴等多种方式整合而成的，大部分为原创。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;如您喜欢，麻烦推荐一下；如您有新想法，欢迎提出，邮箱：2098469527@qq.com。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;可以转载该博客，但必须著名博客来源。&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
</description>
<pubDate>Sat, 20 Jan 2018 23:26:00 +0000</pubDate>
<dc:creator>Alan_beijing</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/wangjiming/p/8293965.html</dc:identifier>
</item>
<item>
<title>Java 基础系列之volatile变量(一) - vOoT</title>
<link>http://www.cnblogs.com/liferecord/p/8322484.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/liferecord/p/8322484.html</guid>
<description>&lt;p&gt;&lt;span&gt;&lt;strong&gt;一、锁&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;　　两种特性：互斥性（mutual exclusion）、可见性（visibility）、原子性（atomic）&lt;br/&gt;　　互斥性就是一次只有一个线程可以访问该共享数据，可见性就是释放锁之前，对共享数据的修改，随后获取锁的另一个线程是可见的，也就是说一个线程修改了共享变量的值，另一个线程访问该共享变量的时候能立即得到最新修改的值。原子性就是多个变量或者某个变量的当前值和修改值之间存在某种一定约束。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;二、volatile&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;　　volatile变量具有可见性，但不具有原子性。这就是说线程能够自动发现votatile变量的最新值。如果想让volatile变量提供线程安全，这我们必须满足该变量满足下面2个特性。另一方面，volatile变量可以防止该变量操作的指令重排和优化。&lt;br/&gt;　　第一、对于volatile变量的写操作不能依赖于该变量的当前值，比如volatile修饰变量x,而变量x操作：x++。如果多个线程操作x++，并不能达到预期的结果，原因在于x++这个操作是：首先cpu从内存中读取变量x的值到cpu的一级cache中，接着cpu对cache中的值做修改，最后把cache中修改的值回写到内存中。这一组操作需要以原子性的方式执行，才能保证线程安全，但是volatile本身不满足原子性。&lt;br/&gt;　　第二、该volatile变量没有在具有其他变量的不变式中，比如2个volatile变量start和end,而 start&amp;lt;=end这个语句在多线程中可能出现线程安全问题。&lt;br/&gt;&lt;span&gt;&lt;strong&gt;三、性能&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;　　一般情况下使用volatile变量的同步机子的性能要优于锁，就是说，在目前大多数的处理器架构上，volatile读操作开销非常低 —— 几乎和非volatile读操作一样。而 volatile写操作的开销要比非volatile写操作多很多，因为要保证可见性需要实现内存界定（Memory Fence），即便如此，volatile 的总开销仍然要比锁获取低。&lt;br/&gt;&lt;span&gt;&lt;strong&gt;四、运用&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;　　在使用volatile的时候，需要记住该变量的状态独立于程序其他内容时，才能使用volatile变量。如下是几个运用：&lt;br/&gt;　　1、状态标志。比如volatile变量isInitialized是一个boolean类型，用于表示某种操作是否已经初始化完成。&lt;br/&gt;　　2、一次性安全发布&lt;br/&gt;　　3、独立观察&lt;br/&gt;　　4、开销较低的读－写锁策略&lt;br/&gt;&lt;span&gt;&lt;strong&gt;五、总结&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;　　如果一个变量被volatile修饰，那么cpu在读取该变量的时候都不会从cpu本身的cache缓存中读取，而是每次从内存中读取，这样保证了每个volatile变量的可见性。但是volatile变量不满足原子性。更加说明一下x++的不是线程安全的。比如多个线程操作volatile变量x进行x++.其中x初始值是0，线程A和线程B都从内存中读取x到各自的cache中，如cacheA(x=0),和cacheB(x=0),此时2个线程各自在自己的cache中操作变量x,这时线程A的cache值为cacheA(x=1),线程B的cache值为cacheB(x=1)。由于变量x是volatile类型，所以线程会把修改变量x的值立即回写到内存中。比如线程A立即回写，则变量x的值在内存中为1，而后线程B也回写，则变量x的值为1。这跟预期的结果有差距的。&lt;/p&gt;
</description>
<pubDate>Sat, 20 Jan 2018 17:06:00 +0000</pubDate>
<dc:creator>vOoT</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/liferecord/p/8322484.html</dc:identifier>
</item>
<item>
<title>网站流量统计的意义 - 三十亿少女的梦</title>
<link>http://www.cnblogs.com/yonglin/p/8322477.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/yonglin/p/8322477.html</guid>
<description>&lt;p&gt;&lt;span&gt;&lt;strong&gt;什么是流量统计？&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　流量统计是指通过各种科学的方式，准确的纪录来访某一页面的访问者的流量信息。说白了就是获取一些我们需要的用户信息，然后进行统计分析。&lt;/p&gt;
&lt;p&gt;　　网站流量统计是一种可以准确的分析访客用户的来源，便于网站管理者根据访客的需求增加或者修改网站的相关内容，便于更好的提升&lt;a href=&quot;https://baike.baidu.com/item/%E7%BD%91%E7%AB%99%E8%BD%AC%E6%8D%A2%E7%8E%87/9202326&quot; target=&quot;_blank&quot; data-lemmaid=&quot;9202326&quot;&gt;网站转换率&lt;/a&gt;，提高&lt;a href=&quot;https://baike.baidu.com/item/%E7%BD%91%E7%AB%99%E6%B5%81%E9%87%8F/9268660&quot; target=&quot;_blank&quot; data-lemmaid=&quot;9268660&quot;&gt;网站流量&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;为什么要流量统计？&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　（1）及时掌握网站推广的效果，减少盲目性；&lt;/p&gt;
&lt;p&gt;　　　　　　例子：当我们在某个地方推广了我们的网站，那么我们就可以收集推广的这段时间的流量，网站流量有没有增加，如果流量并没有增加，那么可以考虑优化或者停止推广了~&lt;/p&gt;
&lt;div class=&quot;para&quot; readability=&quot;5.811320754717&quot;&gt;　　（2）分析各种网络营销手段的效果，为制定和修正&lt;a href=&quot;https://baike.baidu.com/item/%E7%BD%91%E7%BB%9C%E8%90%A5%E9%94%80%E7%AD%96%E7%95%A5&quot; target=&quot;_blank&quot;&gt;网络营销策略&lt;/a&gt;提供依据；&lt;/div&gt;
&lt;p&gt;　　　　　　例子：比如说我们在a网站推广了我们的网站，那我们可以统计我们网站的用户来源，判断用户是不是从a网站导流过来的，这样就能很清晰的知道我们在a网站的推广效果怎么样&lt;/p&gt;
&lt;div class=&quot;para&quot; readability=&quot;7.9271523178808&quot;&gt;　　（3）通过网站访问数据分析进行&lt;a href=&quot;https://baike.baidu.com/item/%E7%BD%91%E7%BB%9C%E8%90%A5%E9%94%80%E8%AF%8A%E6%96%AD/8244469&quot; target=&quot;_blank&quot; data-lemmaid=&quot;8244469&quot;&gt;网络营销诊断&lt;/a&gt;，包括对各项网站推广活动的效果分析、网站优化状况诊断等；&lt;/div&gt;
&lt;p&gt;　　　　　　例子：同（2）&lt;/p&gt;
&lt;p&gt;　　（4）了解用户访问网站的行为，为更好地满足用户需求提供支持；&lt;/p&gt;
&lt;p&gt;　　　　　　例子：我们可以统计用户在我们网站哪个页面停留最久，可能表示他们对这个网页最感兴趣，那么我们可以针对这个网页进行性能和用户体验的优化&lt;/p&gt;

&lt;p&gt;　　　　　　例子：同（2）&lt;/p&gt;
&lt;p&gt;　　  (6) 帮助了解网站的访问情况,提前应对系统负荷问题&lt;/p&gt;
&lt;p&gt;　　　　　　例子：可以统计网站在一天的哪个时间段访问最量最多，并发数最高，从而针对那个时间段进行性能优化，比如说增设服务器，做负载均衡，做缓存等等&lt;/p&gt;
&lt;p&gt;　　  (7) 根据监测的到的访问客户端的信息来优化网站设计和功能&lt;/p&gt;
&lt;p&gt;　　　　　　例子：统计我们的网站主要是哪些浏览器的用户在用，比如说ie8以下居多（我的内心是拒绝的），那我们的网站就要多针对ie8以下的浏览器进行优化&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;常见的流量统计内容&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;para&quot; readability=&quot;29.840989399293&quot;&gt;
&lt;p&gt;　　（1） 网站流量统计可以精确的统计访客的具体来源地区和ip地址&lt;/p&gt;
&lt;p&gt;　　（2） 网站流量统计可以精确的统计目前网站在线多少人，具体访问了哪些页面&lt;/p&gt;
&lt;p&gt;　　（3） 网站流量统计可以精确的统计访客是通过哪些页面，搜索关键词访客的网站，访客浏览的是哪些页面&lt;/p&gt;
&lt;div class=&quot;para&quot; readability=&quot;6.6181818181818&quot;&gt;　　（4） 网站流&lt;span&gt;量统计可&lt;/span&gt;以精确的统计访客的浏览器是什么版本，ie6 ie7 还是&lt;a href=&quot;https://baike.baidu.com/item/%E7%81%AB%E7%8B%90&quot; target=&quot;_blank&quot;&gt;火狐&lt;/a&gt;&lt;/div&gt;
&lt;p&gt;　　（5） 网站流量统计可以精确的统计网站黏粘率，回头率是多少，浏览多少页面&lt;/p&gt;
&lt;p&gt;　　（6） 网站流量统计可以精确的统计网站的分时统计，分日统计，分月统计，实时统计，在线访问哪个页面。&lt;/p&gt;
&lt;p&gt;　　（7） 网站流量统计可以精确的统计访客的操作系统是什么，分辨率是多少。&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;推荐一些统计工具网站&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　&lt;/strong&gt; 友盟，ga，百度统计，51la（我使用的就是51la）&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;总结：其实流量统计的终极目的无非就是&lt;span&gt;更好的适应用户需求，用户就是大哥！这句话说起来简单，但真正做到的app或者网站又有几个呢？共勉~&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
</description>
<pubDate>Sat, 20 Jan 2018 16:55:00 +0000</pubDate>
<dc:creator>三十亿少女的梦</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/yonglin/p/8322477.html</dc:identifier>
</item>
<item>
<title>ASP.NET Core Razor中处理Ajax请求 - 大壮他哥</title>
<link>http://www.cnblogs.com/dazhuangtage/p/8322452.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/dazhuangtage/p/8322452.html</guid>
<description>&lt;h3 id=&quot;在asp.net-core-razor以下简称razor刚出来的时候看了一下官方的文档一直没怎么用过今天闲来无事准备用rozor做个项目熟练下结果写第一个页面就卡住了折腾半天才搞好下面给大家分享下解决方案&quot;&gt;在ASP.NET Core Razor(以下简称Razor)刚出来的时候,看了一下官方的文档,一直没怎么用过。今天闲来无事,准备用Rozor做个项目熟练下,结果写第一个页面就卡住了。。折腾半天才搞好,下面给大家分享下解决方案。&lt;/h3&gt;
&lt;h2 id=&quot;先来给大家简单介绍下razor&quot;&gt;先来给大家简单介绍下Razor&lt;/h2&gt;
&lt;h3 id=&quot;razor-pages是asp.net-core的一项新功能可以使编页面的编程方案更简单更高效razor页面使用处理程序方法来处理传入的http请求get-post-put-delete这些类似于asp.net-mvc或web-api的action方法razor-pages遵循特定的命名约定handler方法也是如此他们也遵循特定的命名约定并与on前缀和http动词一样ongetonpost等处理方法也有异步版本ongetasynconpostasync等&quot;&gt;Razor Pages是ASP.NET Core的一项新功能，可以使编页面的编程方案更简单，更高效。Razor页面使用处理程序方法来处理传入的HTTP请求（GET / POST / PUT / Delete）。这些类似于ASP.NET MVC或WEB API的Action方法。Razor Pages遵循特定的命名约定，Handler方法也是如此。他们也遵循特定的命名约定，并与“On”前缀：和HTTP动词一样OnGet()，OnPost()等处理方法也有异步版本：OnGetAsync()，OnPostAsync()等。&lt;/h3&gt;
&lt;h2 id=&quot;介绍完razor直接上图&quot;&gt;介绍完Razor,直接上图&lt;/h2&gt;
&lt;h3 id=&quot;页面描述1&quot;&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/789313/201801/789313-20180120233613037-928882729.png&quot; alt=&quot;页面描述&quot;/&gt;&lt;/h3&gt;
&lt;h3 id=&quot;功能很简单就是个登录用户点击登录按钮后利用jquery获取文本框的值异步提交到服务器很简单的功能相信大家都写过很多次了啪啪啪几下代码就撸出来了&quot;&gt;功能很简单，就是个登录。用户点击&quot;登录按钮&quot;后利用Jquery获取文本框的值,异步提交到服务器。很简单的功能，相信大家都写过很多次了。啪啪啪几下代码就撸出来了。&lt;/h3&gt;
&lt;pre&gt;
&lt;code&gt;##前台代码
&amp;lt;form  method=&quot;post&quot;&amp;gt;
            &amp;lt;div class=&quot;login-ic&quot;&amp;gt;
                &amp;lt;i&amp;gt;&amp;lt;/i&amp;gt;
                &amp;lt;input  asp-for=&quot;Login.UserName&quot;  id=&quot;UserName&quot; /&amp;gt;
                &amp;lt;div class=&quot;clear&quot;&amp;gt; &amp;lt;/div&amp;gt;
            &amp;lt;/div&amp;gt;
            &amp;lt;div class=&quot;login-ic&quot;&amp;gt;
                &amp;lt;i class=&quot;icon&quot;&amp;gt;&amp;lt;/i&amp;gt;
                &amp;lt;input  id=&quot;PassWord&quot; asp-for=&quot;Login.PassWord&quot; /&amp;gt;
                &amp;lt;div class=&quot;clear&quot;&amp;gt; &amp;lt;/div&amp;gt;
            &amp;lt;/div&amp;gt;
            &amp;lt;div style=&quot;margin-top:-0.5em;&quot;&amp;gt;
                &amp;lt;ul&amp;gt;
                    &amp;lt;li&amp;gt;
                        &amp;lt;input type=&quot;checkbox&quot; id=&quot;brand1&quot; value=&quot;&quot;&amp;gt;
                        &amp;lt;label for=&quot;brand1&quot;&amp;gt;记得我&amp;lt;/label&amp;gt;
                    &amp;lt;/li&amp;gt;
                &amp;lt;/ul&amp;gt;
                &amp;lt;a href=&quot;#&quot;&amp;gt;
                    忘记密码?
                &amp;lt;/a&amp;gt;
            &amp;lt;/div&amp;gt;
            &amp;lt;div class=&quot;log-bwn&quot; style=&quot;margin-top:4em;&quot;&amp;gt;
                &amp;lt;input type=&quot;button&quot; value=&quot;登录&quot; id=&quot;btnLogin&quot;&amp;gt;
            &amp;lt;/div&amp;gt;
            &amp;lt;div class=&quot;log-bwn&quot; style=&quot;margin-top:1em;&quot;&amp;gt;
                &amp;lt;input type=&quot;button&quot; value=&quot;注册&quot; onclick=&quot;location.href='/user/register'&quot;&amp;gt;
            &amp;lt;/div&amp;gt;
&amp;lt;/form&amp;gt;
##Script代码
$(&quot;#btnLogin&quot;).click(function () {
            $.post('/user/Login?hanler=LoginIn', { UserName:$(&quot;#UserName&quot;).val(),                           PassWord:$(&quot;#PassWord&quot;).val() }, function (data) {
                console.log(data);
            });
        });
##后台代码
public class LoginModel : PageModel
{

    private UserServiciCasee _userService;

    public LoginModel(UserServiciCasee userService)
    {
        _userService = userService;
    }

    public void OnGet()
    {
    }

    [BindProperty]
    public UserLoginDto Login { get; set; }

    public async Task&amp;lt;ActionResult&amp;gt; OnPostLoginInAsync()
    {
        //if (ModelState.IsValid)
        //{
        //    var user = await _userService.LoginAsync(Login);
        //    if (user != null)
        //    {
        //        return new JsonResult(ApiResult.ToSucess(&quot;登录成功!&quot;));
        //    }
        //    return new JsonResult(ApiResult.ToFail(&quot;帐号密码错误!&quot;));
        //}
        return new JsonResult(ApiResult.ToFail(&quot;参数填写错误,请检查!&quot;));
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;首先解释下userloginhanlerloginin这个url是什么意思user是我page下的一个目录login是一个页面loginin是页面里面对应的一个方法这个url的就是把这个请求交给onpostlogininasync方法处理至于为什么是loginin而不是onpostlogininasync在文章开头也提到过这是rozar的语法限定不清楚的朋友可以去看下微软的官方文档写的肯定比我好这个代码乍一看思路很清晰项目跑起来走一波看看&quot;&gt;首先解释下/user/Login?hanler=LoginIn这个Url是什么意思,user是我Page下的一个目录,Login是一个页面,LoginIn是页面里面对应的一个方法。这个url的就是把这个请求交给OnPostLoginInAsync()方法处理。至于为什么是LoginIn而不是OnPostLoginInAsync,在文章开头也提到过,这是Rozar的语法限定,不清楚的朋友可以去看下微软的官方文档，写的肯定比我好。。这个代码乍一看，思路很清晰,项目跑起来,走一波看看。&lt;/h3&gt;
&lt;h3 id=&quot;此处输入图片的描述2&quot;&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/789313/201801/789313-20180120235312381-1390256669.png&quot; alt=&quot;此处输入图片的描述&quot;/&gt;&lt;/h3&gt;
&lt;h3 id=&quot;是的你没看错响应码400各种姿势试了半天就是400你现在一定想知道上面的代码有什么问题那么上面的代码没有错原因是razor被设计为可以自动防止跨站请求伪造csrf-xsrf攻击你不必编写任何其他代码razor页面中自动包含防伪令牌生成和验证这里请求失败是因为post没有提交antiforgerytoken&quot;&gt;是的,你没看错，响应码400。各种姿势试了半天，就是400,你现在一定想知道，上面的代码有什么问题。那么，上面的代码没有错。原因是，Razor被设计为可以自动防止跨站请求伪造（CSRF / XSRF）攻击。你不必编写任何其他代码。Razor页面中自动包含防伪令牌生成和验证。这里请求失败，是因为POST没有提交AntiForgeryToken。&lt;/h3&gt;

&lt;ul readability=&quot;0.5&quot;&gt;&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;在ASP.NET Core MVC 2.0中，FormTagHelper为HTML表单元素注入反伪造令牌。例如，Razor文件中的以下标记将自动生成防伪标记：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;lt;form method=&quot;post&quot;&amp;gt;
&amp;lt;!-- form markup --&amp;gt;
&amp;lt;/form&amp;gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;明确添加使用 @Html.AntiForgeryToken()&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;要添加antiforgerytoken我们可以使用任何方法这两种方法都添加了一个隐藏名称的输入类型__requestverificationtokenajax请求应将请求头中的防伪标记发送到服务器所以修改后的ajax请求看起来像这个样子&quot;&gt;要添加AntiForgeryToken，我们可以使用任何方法。这两种方法都添加了一个隐藏名称的输入类型__RequestVerificationToken。Ajax请求应将请求头中的防伪标记发送到服务器。所以，修改后的Ajax请求看起来像这个样子:&lt;/h3&gt;
&lt;pre&gt;
&lt;code&gt;$(&quot;#btnLogin&quot;).click(function () {
            $.ajax({
                type: &quot;POST&quot;,
                url: &quot;/user/Login?handler=LoginIn&quot;,
                beforeSend: function (xhr) {
                    xhr.setRequestHeader(&quot;XSRF-TOKEN&quot;,
                        $('input:hidden[name=&quot;__RequestVerificationToken&quot;]').val());
                },
                data: { UserName: $(&quot;#UserName&quot;).val(), PassWord: $(&quot;#PassWord&quot;).val() },
                success: function (response) {
                    console.log(response);
                },
                failure: function (response) {
                    alert(response);
                }
            });
        });&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;改良后的代码在发送请求前在请求头中增加了xsrf-token标识值为表单自动生成的防伪标记由于xsrf-token是我们自己加的框架本身不会识别所以我们需要把这个标记添加到框架&quot;&gt;改良后的代码在发送请求前在请求头中增加了&quot;XSRF-TOKEN&quot;标识,值为表单自动生成的防伪标记。由于“XSRF-TOKEN”是我们自己加的,框架本身不会识别,所以我们需要把这个标记添加到框架：&lt;/h3&gt;
&lt;pre&gt;
&lt;code&gt;public void ConfigureServices(IServiceCollection services)
{
    services.AddMvc();
    services.AddAntiforgery(o =&amp;gt; o.HeaderName = &quot;XSRF-TOKEN&quot;);
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;现在服务端就可以正常收到post请求了折腾了半天总算解决了解决了之后发现自己之前钻了牛角尖其实还有更简单的方法太晚了明天测试一下可行的话补回来&quot;&gt;现在服务端就可以正常收到Post请求了。折腾了半天总算解决了。。。。解决了之后发现自己之前钻了牛角尖，，，其实还有更简单的方法。。太晚了,明天测试一下,可行的话补回来。&lt;/h3&gt;
</description>
<pubDate>Sat, 20 Jan 2018 16:21:00 +0000</pubDate>
<dc:creator>大壮他哥</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/dazhuangtage/p/8322452.html</dc:identifier>
</item>
<item>
<title>mongoose的关联查询 ：populate - 太上老俊</title>
<link>http://www.cnblogs.com/laojun/p/8322448.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/laojun/p/8322448.html</guid>
<description>&lt;p&gt;mongoose关联查询从3.2版本开始支持&lt;/p&gt;
&lt;p&gt;基本用法如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;46&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; studentSchema = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Schema({
    name:String,
    age:String,
    school:{
        type:Schema.Types.ObjectId,
        ref:&lt;/span&gt;'school'&lt;span&gt;
    }
});


&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; schoolSchema = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Schema({
    name:String,
    students:[
        {
            type:Schema.Types.ObjectId,
            ref:&lt;/span&gt;&quot;student&quot;&lt;span&gt;
        }
    ]
})


&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; Student = mongoose.model('student'&lt;span&gt;,studentSchema);

&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; School = mongoose.model(&quot;school&quot;&lt;span&gt;,schoolSchema);


School.findOne({name:&lt;/span&gt;&quot;xxx&quot;}).populate(&quot;students&quot;,&quot;name age&quot;).exec(&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(err,school){
    console.log(school);
    console.log(&lt;/span&gt;&quot;============&quot;&lt;span&gt;)
})

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;populatte中第二个参数，只返回关联表中的字段&lt;/span&gt;
Student.findOne({name:&quot;xxx&quot;}).populate(&quot;school&quot;,&quot;name&quot;).exec(&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(err,student){
    console.log(student);
    console.log(&lt;/span&gt;&quot;===============&quot;&lt;span&gt;)
})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;总结点：&lt;/p&gt;
&lt;p&gt;　　1、schame中的ref值需要对应mongoose.model中的第一个参数，即数据库中的集合名称，否者查询失败&lt;/p&gt;
&lt;p&gt;　　2、populate(arg1,arg2)&lt;/p&gt;
&lt;p&gt;　　　　　　第一个参数对应集合中的存续关联数据的属性，若对应错误，查询成功，但关联集合只有_id返回。&lt;/p&gt;
&lt;p&gt;　　　　　　第二个参数用于过滤查询关联集合中的属性，多个属性用空格隔开，若缺失，返回关联集合的所有参数，可以传&quot;-_id&quot;去除返回值中的_id属性&lt;/p&gt;
&lt;p&gt;　　　　注：官方说明：In Mongoose &amp;gt;= 4.0, you can manually populate a field as well.&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//官方例子&lt;br/&gt;Story.
  findOne({ title: &lt;/span&gt;/casino royale/&lt;span&gt;i }).
  populate(&lt;/span&gt;'author', 'name'). &lt;span&gt;//&lt;/span&gt;&lt;span&gt; only return the Persons name&lt;/span&gt;
  exec(&lt;span&gt;function&lt;/span&gt;&lt;span&gt; (err, story) {
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (err) &lt;span&gt;return&lt;/span&gt;&lt;span&gt; handleError(err);

    console.log(&lt;/span&gt;'The author is %s'&lt;span&gt;, story.author.name);
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; prints &quot;The author is Ian Fleming&quot;&lt;/span&gt;
&lt;span&gt;
    console.log(&lt;/span&gt;'The authors age is %s'&lt;span&gt;, story.author.age);
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; prints &quot;The authors age is null'&lt;/span&gt;
  });
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　3、多个关联集合　&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;Story.
  find(...).
  populate(&lt;/span&gt;'fans'&lt;span&gt;).
  populate(&lt;/span&gt;'author'&lt;span&gt;).
  exec();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;关于多个关联集合，若同时populate多个相同的集合，则只有最后一个产生作用&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
School.findOne({name:&quot;xxxx&quot;&lt;span&gt;})
.populate(&lt;/span&gt;&quot;students&quot;,&quot;name&quot;&lt;span&gt;)
.populate(&lt;/span&gt;&quot;students&quot;,&quot;age&quot;&lt;span&gt;)
.exec(&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(err,school){
    console.log(school);
    console.log(&lt;/span&gt;&quot;============&quot;&lt;span&gt;)
})
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;返回结果中只有age，没有name&lt;br/&gt;//也可以写为：&lt;/span&gt;&lt;code class=&quot;lang-javascript&quot;&gt;populate({ path: &lt;span class=&quot;hljs-string&quot;&gt;'students', select: &lt;span class=&quot;hljs-string&quot;&gt;'name age' })&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;　　4、关联条件查询&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;Story.
  find(...).
  populate({
    path: &lt;/span&gt;'fans',&lt;span&gt;//&lt;/span&gt;&lt;span&gt;关联的结合&lt;/span&gt;
    match: { age: { $gte: 21 }},&lt;span&gt;//&lt;/span&gt;&lt;span&gt;条件&lt;/span&gt;
    select: 'name -_id',&lt;span&gt;//&lt;/span&gt;&lt;span&gt;去掉_id属性，选择name&lt;/span&gt;
    options: { limit: 5 }&lt;span&gt;//&lt;/span&gt;&lt;span&gt;分页&lt;/span&gt;
&lt;span&gt;  }).
  exec();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　5、多级查询&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; userSchema = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Schema({
  name: String,
  friends: [{ type: ObjectId, ref: &lt;/span&gt;'User'&lt;span&gt; }]
});

User.
  findOne({ name: &lt;/span&gt;'Val'&lt;span&gt; }).
  populate({
    path: &lt;/span&gt;'friends',&lt;span&gt;//&lt;/span&gt;&lt;span&gt;查询我的朋友&lt;/span&gt;
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Get friends of friends - populate the 'friends' array for every friend&lt;/span&gt;
    populate: { path: 'friends' }&lt;span&gt;//&lt;/span&gt;&lt;span&gt;查询我朋友的朋友列表&lt;/span&gt;
  });
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　6、跨数据库查询&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; eventSchema = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Schema({
  name: String,
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; The id of the corresponding conversation&lt;/span&gt;
  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Notice there's no ref here!&lt;/span&gt;
&lt;span&gt;  conversation: ObjectId
});
&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; conversationSchema = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Schema({
  numMessages: Number
});

&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; db1 = mongoose.createConnection('localhost:27000/db1'&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; db2 = mongoose.createConnection('localhost:27001/db2'&lt;span&gt;);

&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; Event = db1.model('Event'&lt;span&gt;, eventSchema);
&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; Conversation = db2.model('Conversation'&lt;span&gt;, conversationSchema);

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;给populate的conversation指定一个model，这样就能通过model跨数据库查询&lt;/span&gt;
&lt;span&gt;Event.
  find().
  populate({ path: &lt;/span&gt;'conversation'&lt;span&gt;, model: Conversation }).
  exec(&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;(error, docs) { &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; ... &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt; });
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;7、动态参考：假如有个用户的schema，有个关联的字段为group，group中能来自多个集合的参考，如：group可以是一个足球队、一个篮球队。。。&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;52&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; userSchema = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Schema({
  name: String,
  connections: [{
    kind: String,
    item: { type: ObjectId, refPath: &lt;/span&gt;'connections.kind'&lt;span&gt; }
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;connections.kind就是表示此中的关联是kind字段对应的组织&lt;/span&gt;
&lt;span&gt;  }]
});

&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; organizationSchema = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Schema({ name: String, kind: String });

&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; User = mongoose.model('User'&lt;span&gt;, userSchema);
&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; Organization = mongoose.model('Organization'&lt;span&gt;, organizationSchema);

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 有一个组织{ _id: '01'), name: &quot;Beyond&quot;, kind: 'Band' }&lt;/span&gt;&lt;span&gt;
//&lt;/span&gt;&lt;span&gt;有两个用户&lt;/span&gt;&lt;span&gt;
//&lt;/span&gt;&lt;span&gt; {_id: '02'),name: '黄家驹',&lt;/span&gt;&lt;span&gt;
//&lt;/span&gt;&lt;span&gt;   connections: [&lt;/span&gt;&lt;span&gt;
//&lt;/span&gt;&lt;span&gt;     { kind: 'User', item: '03') },&lt;/span&gt;&lt;span&gt;
//&lt;/span&gt;&lt;span&gt;     { kind: 'Organization', item:'01') }&lt;/span&gt;&lt;span&gt;
//&lt;/span&gt;&lt;span&gt;   ]&lt;/span&gt;&lt;span&gt;
//&lt;/span&gt;&lt;span&gt; },&lt;/span&gt;&lt;span&gt;
//&lt;/span&gt;&lt;span&gt; {&lt;/span&gt;&lt;span&gt;
//&lt;/span&gt;&lt;span&gt;   _id: '03',&lt;/span&gt;&lt;span&gt;
//&lt;/span&gt;&lt;span&gt;   name: '叶世荣',&lt;/span&gt;&lt;span&gt;
//&lt;/span&gt;&lt;span&gt;   connections: []&lt;/span&gt;&lt;span&gt;
//&lt;/span&gt;&lt;span&gt; }&lt;/span&gt;
&lt;span&gt;
User.
  findOne({ name: &lt;/span&gt;'黄家驹'&lt;span&gt; }).
  populate(&lt;/span&gt;'connections.item').&lt;span&gt;//&lt;/span&gt;&lt;span&gt;关联中的item&lt;/span&gt;
  exec(&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(error, doc) {
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; doc.connections[0].item is a User doc&lt;/span&gt;
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; doc.connections[1].item is an Organization doc&lt;/span&gt;
&lt;span&gt;  });

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;总结：&lt;/span&gt;&lt;span&gt;
//&lt;/span&gt;&lt;span&gt;   refPath告诉mongoose，populate指向connetions.item，&lt;br/&gt;//      而connetions.item又指向connetions.kind，kind最终存的是对应的model，&lt;br/&gt;//      kind的值可以不一样，则populate中的指向就会根据kind的值不同而改变，类似动态参数一样&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;8、虚拟填充：版本&amp;gt;4.5&lt;/p&gt;
&lt;p&gt;　　不是根据_id的关联查询，如下面的例子是关联band名字的关联查询&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;44&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; PersonSchema = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Schema({
  name: String,
  band: String
});

&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; BandSchema = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Schema({
  name: String
});&lt;br/&gt;//给BandSchme设置一个虚拟关联字段：members;
BandSchema.virtual(&lt;/span&gt;'members'&lt;span&gt;, {
  ref: &lt;/span&gt;'Person', &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 虚拟字段的model为Person&lt;/span&gt;
  localField: 'name', &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 查找到Person.band的值和Band.name的值相等的项&lt;/span&gt;
  foreignField: 'band', &lt;span&gt;//&lt;/span&gt;
  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; justOne用于指定，返回的members是单个数据还是一个数组集合，justOne默认为false&lt;/span&gt;
  justOne: &lt;span&gt;false&lt;/span&gt;&lt;span&gt;
});

&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; Person = mongoose.model('Person'&lt;span&gt;, PersonSchema);
&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; Band = mongoose.model('Band'&lt;span&gt;, BandSchema);

&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
 * 假如有两个band:&quot;beyond&quot;, &quot;唐朝乐队&quot;
 * 有4个Person: 黄家驹(黄家驹.band = beyond)  黄家强(黄家强.band=&quot;beyond&quot;)&lt;br/&gt;*              丁武（丁武.band = &quot;唐朝乐队&quot;） 陈磊（陈磊.band=&quot;唐朝乐队&quot;）
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
Band.find({}).populate(&lt;/span&gt;'members').exec(&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(error, bands) {&lt;br/&gt;　　//这里返回的bands含有members字段，里面的值为Person的实例&lt;br/&gt;&lt;/span&gt;&lt;span&gt;
});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;以上基本上是官方文档的所有说明了，需要注意版本的不同。&lt;/p&gt;


</description>
<pubDate>Sat, 20 Jan 2018 16:19:00 +0000</pubDate>
<dc:creator>太上老俊</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/laojun/p/8322448.html</dc:identifier>
</item>
<item>
<title>Java入门篇（二）——Java语言基础（上） - 0o霏霏o0</title>
<link>http://www.cnblogs.com/adamjwh/p/8322434.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/adamjwh/p/8322434.html</guid>
<description>&lt;p&gt;　　本篇我们开始进入Java的学习，首先在学习如何编写Java语言前要先了解Java程序的基本结构。&lt;/p&gt;
&lt;h2&gt;一、Java程序的基本结构&lt;/h2&gt;
&lt;p&gt;　　一个Java程序的基本结构大体可以分为包、类、main()主方法、标识符、关键字、语句和注释等，如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;package&lt;/span&gt; hello;                                                &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 定义包&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; Structure {                                    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 创建类&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt; 
&lt;span&gt; 5&lt;/span&gt;     &lt;span&gt;static&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; num = 1;                                &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 定义类的成员变量&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt;     
&lt;span&gt; 7&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; main(String[] args) {                &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 定义主方法&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt;         
&lt;span&gt; 9&lt;/span&gt;         String str = &quot;http://www.cnblogs.com/adamjwh/&quot;;        &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 定义局部变量&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt;         
&lt;span&gt;11&lt;/span&gt;         System.out.println(num);                            &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 输出成员变量的值&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt;         
&lt;span&gt;13&lt;/span&gt;         System.out.println(str);                            &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 输出局部变量的值&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt;         
&lt;span&gt;15&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; 
&lt;span&gt;17&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　我们来逐一分析一下每一条语句，过多的概念我就不详述了，只说最基本的。&lt;/p&gt;
&lt;p&gt;　　第一条语句“package hello;”定义了Java程序中类所在的包是hello，hello是一个标识符，由程序员自己定义，package是关键字。注意：标识符和关键字区分大小写。&lt;/p&gt;
&lt;p&gt;　　第二条语句“public class Structure”用于创建一个名为Structure的类，类名由程序员自己定义，其中public及class是关键字，关于public和static的用法会在后续篇章中提到。&lt;/p&gt;
&lt;p&gt;　　第三条语句“static int num = 1;”定义了类的成员变量，static和int都是关键字，而num是一个标识符，由程序员自己定义。&lt;/p&gt;
&lt;p&gt;　　第四条语句“public static void main(String[] args)”是类的主方法，Java程序从这里开始执行，除了可以将“String[] args”改为“String args[]”外，不可改变本条语句的任何部分。&lt;/p&gt;
&lt;p&gt;　　第五条语句“String str = &quot;http://www.cnblogs.com/adamjwh”是在主方法中定义了一个局部变量，String是一个类，用于创建字符串对象（说简单点就是说，如果你想创建一条字符串，就使用String类），str是局部变量的名称，为程序员自己定义的一个标识符，而后面引号中的网址是局部变量str的值，“=”为赋值运算符。&lt;/p&gt;
&lt;p&gt;　　第六条语句“System.out.println(num);”是输出语句，这是输出语句的固定写法，注意区分大小写，输出换行为println，不换行为print。&lt;/p&gt;
&lt;p&gt;　　第七条语句同样为输出语句，执行将输出str的值，即http://www.cnblogs.com/adamjwh。&lt;/p&gt;
&lt;h2&gt;二、标识符和关键字&lt;/h2&gt;
&lt;p&gt;　　那么说了这么多是不是觉得好复杂啊，标识符、关键字都是什么。其实标识符可以简单理解为一个名字，用来标识类名、变量名、方法名、数组名、文件名的有效字符序列。&lt;/p&gt;
&lt;p&gt;　　例如，定义一个变量i并赋值为100，那么我们可以写出如下代码： &lt;span class=&quot;cnblogs_code&quot;&gt;&lt;span&gt;int&lt;/span&gt; i = 100;&lt;/span&gt; &lt;/p&gt;
&lt;p&gt;　　这就是一个典型的赋值语句，其中int是定义一个整型数，i就是标识符，由程序员自己起名，但有一定的规则，简单点来说就是&lt;span&gt;&lt;strong&gt;由字母、数字、下划线和美元符号组成，第一个字符不能为数字，并且区分大小写，不能为关键字或保留字。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　&lt;/strong&gt;我们可以举几个例子看看，合法标识符如name、user、_u8080、tc_bvt等等，非法标识符如5work、7fix等等。&lt;/p&gt;
&lt;p&gt;　　上面提到的关键字和保留字，是Java语言中已经被赋予特定意义的一组单词，不可作为标识符使用，比如上面代码中的int就是关键字，至于java的关键字有哪些我就不过多的描述了，毕竟网上有很多很详细的介绍，我们还是主要从代码入手。&lt;/p&gt;
&lt;h2&gt; 三、基本数据类型&lt;/h2&gt;
&lt;p&gt;　　了解了上面的Java程序的基本结构后是不是对Java有一定的感觉了呢，那么编写程序肯定要用到许许多多数据，那Java中的数据又是如何分类及编写的呢？&lt;/p&gt;
&lt;p&gt;　　在Java中有8种数据类型，其中6种是数值类型，另外两种分别是字符类型和布尔类型，如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Type {
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;     
&lt;span&gt; 3&lt;/span&gt;     &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 整数类型 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt;     &lt;span&gt;byte&lt;/span&gt; myByte = 45;                &lt;span&gt;//&lt;/span&gt;&lt;span&gt; byte型变量，占一个字节，取值范围-128~127&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt;     &lt;span&gt;short&lt;/span&gt; myShort = 100;            &lt;span&gt;//&lt;/span&gt;&lt;span&gt; short型变量，也即短整型，占两个字节，取值范围-32768~32767&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt;     &lt;span&gt;int&lt;/span&gt; myInt = 450;                &lt;span&gt;//&lt;/span&gt;&lt;span&gt; int型变量，也即整型，占四个字节，取值范围-2147483648~2147483647&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt;     &lt;span&gt;long&lt;/span&gt; myLong = 45261636L;        &lt;span&gt;//&lt;/span&gt;&lt;span&gt; long型变量，也即长整型，占八个字节，取值范围-9223372036854775808~9223372036854775807&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt;     
&lt;span&gt; 9&lt;/span&gt;     &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 浮点类型 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt;     &lt;span&gt;float&lt;/span&gt; myFloat = 15.621F;        &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 单精度浮点型，占四个字节，结尾必须加'F'或'f'，如果不加自动定义为double型变量，取值范围1.4E-45~3.4028235E-38&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt;     &lt;span&gt;double&lt;/span&gt; myDouble = 15.621D;        &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 双精度浮点型，占八个字节，结尾可以加'D'或'd'，也可不加，取值范围4.9E-324~1.7976931348623157E-308&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt;     
&lt;span&gt;13&lt;/span&gt;     &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 字符类型 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt; 
&lt;span&gt;14&lt;/span&gt;     &lt;span&gt;char&lt;/span&gt; myChar = 'a';                &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 字符类型变量，用于存储单个字符，占两个字节，需用单引号括起来&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt;     
&lt;span&gt;16&lt;/span&gt;     &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 布尔类型 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt;     &lt;span&gt;boolean&lt;/span&gt; myBoolean = &lt;span&gt;true&lt;/span&gt;;        &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 布尔类型又称逻辑类型，只有true和false两个值，分别代表“真”和“假”&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　当我们要定义一个变量的时候，先判断变量的数据类型，再从上方8种类型中选择合适的类型使用即可，定义方法就如上方代码，以“[数据类型] [变量名] = [值]”的形式即可，其中变量名需自起名，满足上面提到的标识符的几个条件。&lt;/p&gt;
&lt;p&gt;　　在字符类型中还有一种特殊的字符，以反斜线“\”开头，后跟一个或多个字符，具有特定的含义，叫做转义字符。&lt;/p&gt;
&lt;table border=&quot;1&quot; align=&quot;left&quot;&gt;&lt;tbody readability=&quot;3&quot;&gt;&lt;tr&gt;&lt;td&gt;转义字符&lt;/td&gt;
&lt;td&gt;含义&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;\ddd&lt;/td&gt;
&lt;td&gt;1~3位八进制数据所表示的字符，如\456&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;\dxxxx&lt;/td&gt;
&lt;td&gt;4位十六进制所表示的字符，如\0051&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;\'&lt;/td&gt;
&lt;td&gt;单引号字符&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;\\&lt;/td&gt;
&lt;td&gt;反斜杠字符&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;\t&lt;/td&gt;
&lt;td&gt;垂直制表符，将光标移到下一个制表符的位置&lt;/td&gt;
&lt;/tr&gt;&lt;tr valign=&quot;middle&quot;&gt;&lt;td&gt;\r&lt;/td&gt;
&lt;td&gt;回车&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;\n&lt;/td&gt;
&lt;td&gt;换行&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;\b&lt;/td&gt;
&lt;td&gt;退格&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;\f&lt;/td&gt;
&lt;td&gt;换页&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;








&lt;p&gt;　　转义字符一般多用于输出，比如“\n”回车换行，“\t”移到下一制表位，如果想要输出单引号、双引号、下划线等字符时，也需要用转义字符进行输出。&lt;/p&gt;
&lt;h2&gt;四、变量与常量&lt;/h2&gt;
&lt;p&gt;　　刚刚我们提到了变量，接下来就说一下什么是变量和常量。在程序执行过程中，其值不能改变的称为常量，其值能改变的称为变量。变量与常量的声明都必须使用合法的标识符，所有变量与常量只有在声明之后才能使用。下面举一个声明变量的例子：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;int&lt;/span&gt; age; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 声明int型变量 &lt;/span&gt;
&lt;span&gt;char&lt;/span&gt; c = 'J' &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 声明char型变量并赋值&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　既然叫变量那肯定是能改变的，现在我们对变量进行一下改变试试：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Variable {
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt; num = 10;                                &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 定义一个变量num，并赋给初值10&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt;         System.out.println(&quot;num的初值为：&quot;+num);        &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 输出当前变量num的值为10&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt;         
&lt;span&gt; 7&lt;/span&gt;         num = 100;                                    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 将100赋给num&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt;         System.out.println(&quot;num现在的值为：&quot;+num);        &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 输出现在变量num的值为100&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; 
&lt;span&gt;11&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　上方是一段测试代码，我们首先定义一个变量，起名为num，然后对它赋一个初值10，再对这个变量赋值为100，看两次值的变化，运行结果如下所示：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2017.cnblogs.com/blog/1018770/201801/1018770-20180120230241053-697320688.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　由此可以看出变量是在运行过程中其值可以改变。&lt;/p&gt;
&lt;p&gt;　　而常量在整个程序中只能被赋值一次，需通过final关键字进行限定，如 &lt;span class=&quot;cnblogs_code&quot;&gt;&lt;span&gt;final&lt;/span&gt; &lt;span&gt;double&lt;/span&gt; PI = 3.1415926;&lt;/span&gt; ，为定义一个常量，名为PI（圆周率），我们如果单独定义一个变量是“double PI = 3.1415926;”，现在定义一个常量就是在double前加一个final关键字进行限定即可。&lt;/p&gt;

&lt;p&gt;　　看到这里，是不是对Java的声明及定义有一些了解了呢？也许在之前大家也都见到了有些变量前有static这个关键字，它有什么用呢？这里就要说的变量的有效范围了。&lt;/p&gt;
&lt;p&gt;　　变量的有效范围是指程序代码能够访问该变量的区域，若超出变量所在区域访问变量则编译时会出现错误。可分为“成员变量”和“局部变量”。&lt;/p&gt;
&lt;p&gt;　　在类体中定义的变量被称为&lt;span&gt;&lt;span&gt;成员变量&lt;/span&gt;&lt;/span&gt;，成员变量在整个类中都有效，分为静态变量和实例变量两种。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;class&lt;/span&gt;&lt;span&gt; var {
    &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; x = 45;                 &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 定义实例变量&lt;/span&gt;
    &lt;span&gt;static&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; y = 90;        &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 定义静态变量&lt;br/&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　其中x是实例变量，y是静态变量。如果成员变量的类型前面加上static，就被称为静态变量，静态变量的有效范围可以跨类，甚至可达到整个应用程序之内，也可用“类名.静态变量”的方式在其它类中使用（具体会在今后的篇幅中出现，想了解的可先行查阅资料）。&lt;/p&gt;
&lt;p&gt;　　而在类的方法体中定义的变量（即“{”与“}”之间的声明变量）称之为&lt;span&gt;&lt;span&gt;局部变量&lt;/span&gt;&lt;/span&gt;。只在当前代码块中有效，简单点来说就是只在其所定义的大括号中有效。下面举一个例子：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Val {
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt;     &lt;span&gt;static&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; times = 3;                                    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 定义成员变量times&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt; times = 4;                                        &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 定义局部变量times&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt;         
&lt;span&gt; 7&lt;/span&gt;         System.out.println(&quot;times的值为：&quot; + times);            &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 将times输出&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt;         System.out.println(&quot;静态变量times的值为：&quot; + Val.times);        &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 输出静态变量&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; 
&lt;span&gt;11&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　输出结果为：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2017.cnblogs.com/blog/1018770/201801/1018770-20180120233849662-725106623.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　从这段代码可以看出，首先在main方法外定义了一个成员变量times，并且是一个静态变量，而在main方法内又定义了一个局部变量times。这里有人就会问了，变量名不是不能相同吗？注意，这里第一个times是成员变量，作用范围是针对于整个类而言，而第二个times是局部变量，只在main方法内有效，所以两个重名并不冲突。但如果我们直接输出times，如第一个输出，输出结果为4，是局部变量起了作用，因为&lt;span&gt;&lt;strong&gt;当局部变量与成员变量名字相同时，此时成员变量将被隐藏，即这个成员变量在此方法中暂时失效。&lt;/strong&gt;&lt;/span&gt;如果我们想调用成员变量，需要使用“类名.静态变量”调用，如第二个输出，类名为Val，静态变量名为times，用“Val.times”即可调用静态变量的值为3。&lt;/p&gt;
&lt;h2&gt;五、代码注释&lt;/h2&gt;
&lt;p&gt;　　注释可以提高程序的可读性，注释包含的文字不会对程序产生任何影响，在Java中，代码注释主要有以下几种：&lt;/p&gt;
&lt;h4&gt;　　1. 单行注释　　&lt;/h4&gt;
&lt;p&gt;　　“//”为单行注释标记，从“//”开始到换行为止的所有内容均被注释而被编译器忽略。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 这是一条单行注释&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;　　2. 多行注释&lt;/h4&gt;
&lt;p&gt;　　“/* */”为多行注释标记，符号“/*”与“*/”之间的所有内容均为注释内容，可以换行。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;
    注释内容1
    注释内容2
    ......
&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　在多行注释中可以嵌套单行注释，比如下面的用法是正确的：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;
    名称：博客园    // 时间：2018-1-20
&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　但在多行注释中不能嵌套多行注释。&lt;/p&gt;
&lt;h4&gt;　　3. 文档注释&lt;/h4&gt;
&lt;p&gt;　　“/** */”为文档注释标记。符号“/**”与“*/”之间的内容均为文档注释内容。当文档注释出现在任何声明之前时，会被Javadoc文档工具读取作为Javadoc文档内容。格式与多行注释相同。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt;2&lt;/span&gt; &lt;span&gt;    * name: Hello World
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; &lt;span&gt;    * time: 2018-1-20
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; &lt;span&gt;    * author: Adam
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt; &lt;span&gt;*&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;　　下一篇将继续介绍Java语言基础中的运算符及类型转换。&lt;/p&gt;
</description>
<pubDate>Sat, 20 Jan 2018 16:12:00 +0000</pubDate>
<dc:creator>0o霏霏o0</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/adamjwh/p/8322434.html</dc:identifier>
</item>
<item>
<title>unison+inotify数据实时双向同步 - Sunzz</title>
<link>http://www.cnblogs.com/Sunzz/p/8322335.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/Sunzz/p/8322335.html</guid>
<description>&lt;h4 id=&quot;unison是一款跨windowslinuxmac-os平台的文件同步工具不仅支持本地对本地同步也支持通过sshrsh和socket等网络协议进行同步更棒的是unison支持双向同步操作你既可以从a同步到b也可以从b同步到a这些都不需要额外的设定&quot;&gt;&lt;code&gt;unison&lt;/code&gt;是一款跨windows/linux/MAC OS平台的文件同步工具，不仅支持本地对本地同步，也支持通过SSH、RSH和Socket等网络协议进行同步。更棒的是，&lt;code&gt;unison&lt;/code&gt;支持双向同步操作，你既可以从A同步到B，也可以从B同步到A，这些都不需要额外的设定。&lt;/h4&gt;
&lt;h4 id=&quot;inotify-是一个-linux-内核特性它监控文件系统并且及时向专门的应用程序发出相关的事件警告比如删除读写和卸载操作等您还可以跟踪活动的源头和目标等细节&quot;&gt;&lt;code&gt;inotify&lt;/code&gt; 是一个 Linux 内核特性，它监控文件系统，并且及时向专门的应用程序发出相关的事件警告，比如删除、读、写和卸载操作等。您还可以跟踪活动的源头和目标等细节。&lt;/h4&gt;
&lt;h4 id=&quot;使用-inotify很简单创建一个文件描述符附加一个或多个监视器一个监视器-是一个路径和一组事件然后使用-read-方法从描述符获取事件read-并不会用光整个周期它在事件发生之前是被阻塞的&quot;&gt;使用 &lt;code&gt;inotify&lt;/code&gt;很简单：创建一个文件描述符，附加一个或多个监视器（一个监视器 是一个路径和一组事件），然后使用 read 方法从描述符获取事件。read 并不会用光整个周期，它在事件发生之前是被阻塞的。&lt;/h4&gt;
&lt;h3 id=&quot;环境介绍&quot;&gt;环境介绍&lt;/h3&gt;
&lt;h4 id=&quot;服务器分别为&quot;&gt;服务器分别为:&lt;/h4&gt;
&lt;pre&gt;
&lt;code&gt;服务器node1:192.168.5.10，同步目录：/opt/http/
服务器node2:192.168.5.20，同步目录：/opt/http/&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;配置epel源&quot;&gt;配置epel源&lt;/h4&gt;
&lt;pre&gt;
&lt;code&gt;wget -O /etc/yum.repos.d/epel.repo http://mirrors.aliyun.com/repo/epel-7.repo&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;在node1和-node2上安装一下软件&quot;&gt;1、在node1和 node2上安装一下软件&lt;/h2&gt;
&lt;h4 id=&quot;安装ocaml&quot;&gt;（1）安装ocaml&lt;/h4&gt;
&lt;pre&gt;
&lt;code&gt;[root@node1 ~]# yum install  ocaml -y&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;安装unison&quot;&gt;（2）安装unison&lt;/h4&gt;
&lt;pre&gt;
&lt;code&gt;[root@node1 ~]# yum install  unison240.x86_64 -y&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;安装inotify&quot;&gt;（3）安装inotify&lt;/h4&gt;
&lt;pre&gt;
&lt;code&gt;[root@node1 ~]# yum install  inotify-tools.x86_64 -y&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;配置双机ssh信任&quot;&gt;2、配置双机ssh信任&lt;/h2&gt;
&lt;h4 id=&quot;详细请参考-httpswww.cnblogs.comsunzzp8320330.html&quot;&gt;详细请参考 &lt;a href=&quot;https://www.cnblogs.com/Sunzz/p/8320330.html&quot; class=&quot;uri&quot;&gt;https://www.cnblogs.com/Sunzz/p/8320330.html&lt;/a&gt;&lt;/h4&gt;
&lt;h4 id=&quot;在node1机root用户下执行ssh-keygen命令在需要输入的地方直接回车生成建立安全信任关系的证书&quot;&gt;（1）在node1机root用户下执行ssh-keygen命令，在需要输入的地方，直接回车，生成建立安全信任关系的证书。&lt;/h4&gt;
&lt;pre&gt;
&lt;code&gt;[root@node1 ~]# ssh-keygen -t rsa&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;node1对node2建立信任关系&quot;&gt;node1对node2建立信任关系&lt;/h4&gt;
&lt;pre&gt;
&lt;code&gt;[root@node1 ~]# chmod 600 /root/.ssh/authorized_keys
[root@node1 ~]# scp -r /root/.ssh/id_rsa.pub 192.168.5.20:/root/.ssh/authorized_keys&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;node2对node1建立信任关系&quot;&gt;（2）node2对node1建立信任关系&lt;/h4&gt;
&lt;h4 id=&quot;在node2机上执行同样的操作建立node2对node1的信任关系&quot;&gt;在node2机上执行同样的操作，建立node2对node1的信任关系。&lt;/h4&gt;
&lt;h4 id=&quot;远程执行命令测试是否成功第一次有可能要输入密码&quot;&gt;（3）远程执行命令测试是否成功，第一次有可能要输入密码&lt;/h4&gt;
&lt;h4 id=&quot;命令格式ssh-远程用户名远程主机ip地址-远程命令或者脚本&quot;&gt;命令格式：ssh &lt;a href=&quot;mailto:远程用户名@远程主机ip地址&quot;&gt;远程用户名@远程主机IP地址&lt;/a&gt; '远程命令或者脚本'&lt;/h4&gt;
&lt;pre&gt;
&lt;code&gt;[root@node2 ~]# ssh root@192.168.5.10 'hostname'&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1157397/201801/1157397-20180120232329240-923871662.png&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;添加脚本&quot;&gt;3、添加脚本&lt;/h2&gt;
&lt;h4 id=&quot;在192.168.5.10服务器node1上添加脚本&quot;&gt;（1）在192.168.5.10服务器node1上添加脚本：&lt;/h4&gt;
&lt;pre&gt;
&lt;code&gt;[root@node1 ~]# mkdir /script&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code&gt;[root@node2 ~]# vim /script/inotify.sh&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code&gt;#/bin/bash
UNISON=`ps -ef |grep -v grep|grep -c inotifywait`
if [ ${UNISON} -lt 1 ]
then
    ip2=&quot;192.168.5.20&quot; ##目标主机IP
    src2=&quot;/opt/http/&quot;
    dst2=&quot;/opt/http/&quot;
    /usr/bin/inotifywait -mrq -e create,delete,modify,move $src2 | while read line
do
    /usr/bin/unison -batch $src2 ssh://$ip2/$dst2
    echo -n &quot;$line &quot; &amp;gt;&amp;gt; /var/log/inotify/inotify$(date +%u).log
    echo ` date +%F %T &quot; &quot; -f1-4` &amp;gt;&amp;gt; /var/log/inotify/inotify$(date +%u).log
done
fi&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;在192.168.5.20服务器node2上添加脚本&quot;&gt;（2）在192.168.5.20服务器node2上添加脚本：&lt;/h4&gt;
&lt;pre&gt;
&lt;code&gt;[root@node2 ~]# mkdir /script&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code&gt;[root@node2 ~]# vim /script/inotify.sh&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code&gt;#/bin/bash
UNISON=`ps -ef |grep -v grep|grep -c inotifywait`
if [ ${UNISON} -lt 1 ]
then
    ip2=&quot;192.168.5.10&quot;
    src2=&quot;/opt/http/&quot;
    dst2=&quot;/opt/http/&quot;
    /usr/bin/inotifywait -mrq -e create,delete,modify,move $src2 | while read line
do
    /usr/bin/unison -batch $src2 ssh://$ip2/$dst2
    echo -n &quot;$line &quot; &amp;gt;&amp;gt; /var/log/inotify/inotify$(date +%u).log
    echo ` date +%F %T &quot; &quot; -f1-4` &amp;gt;&amp;gt; /var/log/inotify/inotify$(date +%u).log
done
fi&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;在二台服务器上修改脚本权限&quot;&gt;4、在二台服务器上修改脚本权限：&lt;/h2&gt;
&lt;pre&gt;
&lt;code&gt;[root@node1 ~]# chmod a+x /script/inotify.sh&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;建立日志目录&quot;&gt;5、建立日志目录&lt;/h2&gt;
&lt;h4 id=&quot;如果varloginotify目录没有则需要手工创建用来存放inotify的日志&quot;&gt;如果/var/log/inotify目录没有则需要手工创建，用来存放inotify的日志;&lt;/h4&gt;
&lt;pre&gt;
&lt;code&gt;[root@node2 ~]# mkdir /var/log/inotify&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;添加定时任务&quot;&gt;6、添加定时任务&lt;/h2&gt;
&lt;pre&gt;
&lt;code&gt;[root@node2 ~]# crontab -e
* * * * * /bin/bash /script/inotify.sh &amp;gt; /dev/null 2&amp;gt;&amp;amp;1 &amp;amp;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1157397/201801/1157397-20180120232343990-363605974.png&quot;/&gt;&lt;/p&gt;
&lt;h4 id=&quot;重启电脑测试二台服务器中opthttp的内容是否能同步&quot;&gt;重启电脑，测试二台服务器中/opt/http/的内容是否能同步&lt;/h4&gt;
&lt;h4 id=&quot;不重启电脑手动执行脚本也可以测试&quot;&gt;不重启电脑，手动执行脚本也可以测试&lt;/h4&gt;
&lt;h4 id=&quot;binbash-scriptinotify.sh或scriptinotify.sh&quot;&gt;/bin/bash /script/inotify.sh或/script/inotify.sh&lt;/h4&gt;
&lt;h4 id=&quot;在其中一台opthttp目录中添加或修改或删除文件的时候可以看到脚本状态同时另一台服务器也应该会跟随操作&quot;&gt;在其中一台/opt/http/目录中添加，或修改，或删除文件的时候，可以看到脚本状态，同时另一台服务器也应该会跟随操作。&lt;/h4&gt;
&lt;h2 id=&quot;如果需要可以指定某几种后缀的文件不同步&quot;&gt;7、如果需要可以指定某几种后缀的文件不同步&lt;/h2&gt;
&lt;h4 id=&quot;打开root.unisondefault.prf添加&quot;&gt;打开/root/.unison/default.prf，添加：&lt;/h4&gt;
&lt;pre&gt;
&lt;code&gt;ignore = Name *.txt
ignore = Name *.mdb&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;意思就是不同步txt和mdb格式的文件修改完之后重新执行一下binsh-scriptinotify.sh即可生效&quot;&gt;意思就是不同步txt和mdb格式的文件，修改完之后重新执行一下/bin/sh /script/inotify.sh即可生效。&lt;/h4&gt;
&lt;h4 id=&quot;我的是直接指定名称&quot;&gt;我的是直接指定名称：&lt;/h4&gt;
&lt;pre&gt;
&lt;code&gt;ignore = Name .bash_profile
ignore = Name .viminfo
ignore = Name .bash_history&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;以上步骤操作完成基本上都不会有问题如果有问题那你接着往下看&quot;&gt;以上步骤操作完成基本上都不会有问题，如果有问题那你接着往下看。&lt;/h3&gt;
&lt;h2 id=&quot;如果有问题请手动修改下脚本&quot;&gt;8、如果有问题，请手动修改下脚本：&lt;/h2&gt;
&lt;h4 id=&quot;在某些公司中是禁止禁用root远程登陆只能使用普通用户进行同步方案&quot;&gt;在某些公司中，是禁止禁用root远程登陆，只能使用普通用户进行同步方案&lt;/h4&gt;
&lt;h4 id=&quot;等待同步目录二台电脑不能使用一样的待同步目录名否则报错&quot;&gt;等待同步目录（二台电脑不能使用一样的待同步目录名，否则报错）&lt;/h4&gt;
&lt;pre&gt;
&lt;code&gt;192.168.5.10: /opt/http/
192.168.5.20: /opt/http/&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;安装过程如下&quot;&gt;安装过程如下&lt;/h4&gt;
&lt;pre&gt;
&lt;code&gt;useradd –g apache unison
passwd unison
(输入新密码)
chown –R unison. /opt/http/
mkdir /home/unison/.ssh
chmod 700  /home/unison/.ssh
su – unison
ssh-keygen -t rsa
(然后连续三次回车)
添加密钥到授权密钥文件中&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;在192.168.5.10服务器node1上操作22是端口号&quot;&gt;在192.168.5.10服务器node1上操作（22是端口号）&lt;/h4&gt;
&lt;pre&gt;
&lt;code&gt;cd /home/unison/.ssh
ssh &quot;-p 22&quot; 192.168.5.10 cat /home/unison/.ssh/id_rsa.pub &amp;gt;&amp;gt; authorized_keys  #小写p
ssh &quot;-p 22&quot; 192.168.5.20 cat /home/unison /.ssh/id_rsa.pub &amp;gt;&amp;gt; authorized_keys
scp  -P 22 authorized_keys 192.168.5.20:/home/unison/.ssh/  #大写P
chmod 600  /home/unison/.ssh/authorized_keys&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;在192.168.5.20服务器b上操作&quot;&gt;在192.168.5.20服务器B上操作&lt;/h4&gt;
&lt;pre&gt;
&lt;code&gt;chmod 600 /home/unison/.ssh/authorized_keys&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;分别在两台机器上执行如下测试第一次执行时会要求输入密码以后执行则不需要说明信任成功&quot;&gt;分别在两台机器上执行如下测试（第一次执行时，会要求输入密码，以后执行则不需要说明信任成功）&lt;/h4&gt;
&lt;pre&gt;
&lt;code&gt;ssh -p 22 unison@192.168.5.10 date
ssh -p 22 unison@192.168.5.20 date
su - root&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;node1脚本&quot;&gt;node1脚本&lt;/h4&gt;
&lt;pre&gt;
&lt;code&gt; #/bin/bash
UNISON=`ps -ef |grep -v grep|grep -c inotifywait`
if [ ${UNISON} -lt 1 ]
then
ip2=&quot;unison@192.168.5.20:22&quot;
src2=&quot;/opt/http/&quot;
dst2=&quot;/opt/http/&quot;
/usr/local/bin/inotifywait -mrq -e create,delete,modify,move $src2 | while read line
do
/usr/local/bin/unison -batch -sshargs &quot;-i /home/unison/.ssh/id_rsa&quot; $src2 ssh://$ip2
/$dst2
echo -n &quot;$line &quot; &amp;gt;&amp;gt; /var/umelook-log/inotify/inotify$(date +%u).log
echo ` date +%F %T` &amp;gt;&amp;gt; /var/umelook-log/inotify/inotify$(date +%u).log
done
fi&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;node2脚本&quot;&gt;node2脚本：&lt;/h4&gt;
&lt;pre&gt;
&lt;code&gt; #/bin/bash
UNISON=`ps -ef |grep -v grep|grep -c inotifywait`
if [ ${UNISON} -lt 1 ]
then
ip2=&quot;unison@192.168.5.10:22&quot;
src2=&quot;/opt/http/&quot;
dst2=&quot;/opt/http/&quot;
/usr/local/bin/inotifywait -mrq -e create,delete,modify,move $src2 | while read line
do
/usr/local/bin/unison -batch -sshargs &quot;-i /home/unison/.ssh/id_rsa&quot; $src2 ssh://$ip2
/$dst2
echo -n &quot;$line &quot; &amp;gt;&amp;gt; /var/umelook-log/inotify/inotify$(date +%u).log
echo ` date +%F %T` &amp;gt;&amp;gt; /var/umelook-log/inotify/inotify$(date +%u).log
done
fi&lt;/code&gt;
&lt;/pre&gt;</description>
<pubDate>Sat, 20 Jan 2018 16:10:00 +0000</pubDate>
<dc:creator>Sunzz</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/Sunzz/p/8322335.html</dc:identifier>
</item>
<item>
<title>在做vue计算属性，v-for处理数组时遇到的一个bug - CodingHot</title>
<link>http://www.cnblogs.com/stephentian/p/8322378.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/stephentian/p/8322378.html</guid>
<description>&lt;h2 id=&quot;问题&quot;&gt;问题&lt;/h2&gt;
&lt;h3 id=&quot;bug-you-may-have-an-infinite-update-loop-in-a-component-render-function-无限循环&quot;&gt;bug: You may have an infinite update loop in a component render function 无限循环&lt;/h3&gt;
&lt;ol readability=&quot;4&quot;&gt;&lt;li&gt;需要处理的数组(在 ** ssq **里)：&lt;br/&gt;&lt;code&gt;bonus_code: ['01', '19', '25', '26', '27', '33', '10']&lt;/code&gt;&lt;/li&gt;
&lt;li readability=&quot;3&quot;&gt;
&lt;p&gt;计算属性 computed：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;ssqRed: function() {
return this.ssq.bonus_code.splice(0, 6)
},
ssqBlue: function() {
return this.ssq.bonus_code.splice(6, 7)
}&lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;v-for 代码：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;lt;em class=&quot;red-ball tac mr5 fl&quot; v-for=&quot;(item, index) in ssqRed&quot;&amp;gt;{{ item }}&amp;lt;/em&amp;gt;
&amp;lt;em class=&quot;blue-ball tac mr5 fl&quot; v-for=&quot;(item, index) in ssqBlue&quot;&amp;gt;{{ item }}&amp;lt;/em&amp;gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;最终结果我想把数组前6个数渲染成红色球，最后一个（也就是第7个）渲染成蓝色。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;h2 id=&quot;解答&quot;&gt;解答&lt;/h2&gt;
&lt;h3 id=&quot;我已经在-segmentfault上提问地址vue计算属性computed同时操作一个数组&quot;&gt;我已经在 SegmentFault上提问，地址：&lt;a href=&quot;https://segmentfault.com/q/1010000012919077&quot;&gt;vue计算属性computed同时操作一个数组&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;我已采纳答案，将代码改成：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;ssqRed: function() {
    return this.ssq.bonus_code.slice(0, 6)
},
ssqBlue: function() {
    return this.ssq.bonus_code.slice(6, 7)
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;问题就在于自己没搞清楚 splice会对原数组造成改变。&lt;/p&gt;
&lt;h3 id=&quot;在寻找解决方案时朋友少晖教给我一种更好的解决方式很感谢&quot;&gt;在寻找解决方案时，朋友少晖教给我一种更好的解决方式，很感谢&lt;/h3&gt;
&lt;p&gt;即类名判断&lt;/p&gt;
&lt;ol readability=&quot;2.5&quot;&gt;&lt;li&gt;如果数组大小已知，就做一个类名判断，索引大于多少展示蓝色的类名就行了；&lt;/li&gt;
&lt;li readability=&quot;6&quot;&gt;
&lt;p&gt;处理后的 html代码：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;lt;em v-for=&quot;(item, index) in ssq.bonus_code&quot; :class=&quot;['tac','mr5','fl',index&amp;gt;5?'blue-ball':'red-ball']&quot; &amp;gt;{{ item }}&amp;lt;/em&amp;gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;增加的代码：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;index&amp;gt;5?'blue-ball':'red-ball'&lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;</description>
<pubDate>Sat, 20 Jan 2018 15:45:00 +0000</pubDate>
<dc:creator>CodingHot</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/stephentian/p/8322378.html</dc:identifier>
</item>
<item>
<title>通过一个案例分析贝叶斯公式与机器识别 - kingking512</title>
<link>http://www.cnblogs.com/kingking512/p/8322360.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/kingking512/p/8322360.html</guid>
<description>&lt;p&gt;贝叶斯公式定义如下，&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/882900/201801/882900-20180120224159740-428898762.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;公式大家都知道，如何理解呢？下面给一个机器识别相关的例子，直观地说明。&lt;/p&gt;
&lt;p&gt;在机器识别中，假设机器要识别“一”所在的这个小图像块表示什么字符（可以想象为拿手机对着一页书拍了张照片，机器要认出照片中“一”这个区域代表的是什么字）。&lt;/p&gt;
&lt;p&gt;我们先看“一”字在几何上的特点是什么呢？大概认为是 宽高比很大 + 宽度与整篇文章的平均字宽度相当 + 纵向位置在其所在行的中间位置附近。&lt;/p&gt;
&lt;p&gt;其中&lt;/p&gt;
&lt;p&gt;“待识别的图像是一”  是 “事件”，&lt;/p&gt;
&lt;p&gt;“宽高比很大 + 宽度与整篇文章的平均字宽度相当 + 纵向位置在其所在行的中间位置附近”  是  “信息”，&lt;/p&gt;
&lt;p&gt;则 P(信息|事件) 的物理意义为， 在图像代表的字符为“一”的情况下， 它的几何特点为 “宽高比很大 + 宽度与整篇文章的平均字宽度相当 + 纵向位置在其所在行的中间位置附近” 的概率。&lt;/p&gt;
&lt;p&gt;基本上，在编写类似OCR这样的模式识别软件时，我们都需要做数据字典，此时每个字符到底是什么是已知的，要做的是尽量准确地提出其特征。对这个例子而言就是要提取字符“一”的几何特点描述，固化为数据字典中“一”这个内码对应的描述数据。用贝叶斯公式的语音来说，就是要不断修正 P(信息|事件)。&lt;/p&gt;
&lt;p&gt;再看，&lt;/p&gt;
&lt;p&gt;P(信息)表示什么呢？ 表示在所有待识别的图像小方块中，满足 “宽高比很大 + 宽度与整篇文章的平均字宽度相当 + 纵向位置在其所在行的中间位置附近”  这个几何特点的小方块占所有小方块的比例是多少，或者说概率是多少。&lt;/p&gt;
&lt;p&gt;P(事件)，表示“一”这个字的字频， 也即是在所有文章中出现“一”的概率有多少（我们认为机器需要识别所有的中文文章）&lt;/p&gt;
&lt;p&gt;现在来看 P(事件|信息)，&lt;/p&gt;
&lt;p&gt;P(事件|信息) 表示 当软件遇到一个小图像块，而这个小图形块的几何特点是“宽高比很大 + 宽度与整篇文章的平均字宽度相当 + 纵向位置在其所在行的中间位置附近”时， 它是“一”的概率 —— 可以认为这就是对机器识别，或人工智能最简单的描述。&lt;/p&gt;
&lt;p&gt;可以看到，&lt;/p&gt;
&lt;p&gt;1.  P(事件|信息)与 P(信息|事件)正相关，这表示我们在进行机器学习训练时，对“一”的几何特征训练得越精确（即是P(信息|事件)越大），则在对实际样张的识别中，遇到这样的几何特征时，将它识别为“一”是正确的概率越高（即是P(事件|信息)越大）。&lt;/p&gt;
&lt;p&gt;2.  P(事件|信息)与 P(信息)负相关，这表示如果很多待识别的小图像方块几何特点都是“宽高比很大 + 宽度与整篇文章的平均字宽度相当 + 纵向位置在其所在行的中间位置附近”（P(信息)很大）， 就意味着“如果这么多字符的特点都是这个吊样，那么我就没把握说它恰好是“一”了”（P(事件|信息)很小）；反之，如果只有“一“的特点是“宽高比很大 + 宽度与整篇文章的平均字宽度相当 + 纵向位置在其所在行的中间位置附近”（P(信息)很小），其它字符的特点都不是这样，那我遇到这个具有这个特点的小图像块，就可以信心满满地说它就是“一”字了（P(事件|信息)很大）。&lt;/p&gt;
&lt;p&gt;3. P(事件|信息)与 P(事件)正相关，这表示如果“一”的字频很高、在所有的文章中出现的频率很高（P(事件)大），那我说待识别的小图像块是“一”的正确性概率当然就比较高（P(事件|信息)大）；反之，如果“一”是个生僻字，在一般的文章中根本就没出现过几次（P(事件)小），那我说待识别的小图像块是“一”的正确性概率当然也就比较低了（P(事件|信息)小）。&lt;/p&gt;
</description>
<pubDate>Sat, 20 Jan 2018 15:38:00 +0000</pubDate>
<dc:creator>kingking512</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/kingking512/p/8322360.html</dc:identifier>
</item>
<item>
<title>Angular17 Angular自定义指令 - NeverCtrl_C</title>
<link>http://www.cnblogs.com/NeverCtrl-C/p/8322327.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/NeverCtrl-C/p/8322327.html</guid>
<description>&lt;h2&gt;1 什么是HTML&lt;/h2&gt;
&lt;p&gt;　　HTML文档就是一个纯文本文件，该文件包含了HTML元素、CSS样式以及JavaScript代码；HTML元素是由标签呈现，浏览器会为每个标签创建带有属性的DOM对象，浏览器通过渲染这些DOM节点来呈现内容，用户在浏览器中看到的内容就是浏览器渲染DOM对象后的结果。&lt;/p&gt;

&lt;h2&gt;2 指令的分类&lt;/h2&gt;
&lt;p&gt;　　组件、属性指令、结构性指令&lt;/p&gt;
&lt;p&gt;　　具体的知识点请参见《Angular2揭秘》&lt;/p&gt;

&lt;h2&gt;3 指定义指令常用到的一些常量&lt;/h2&gt;
&lt;h3&gt;　　3.1 Directive&lt;/h3&gt;
&lt;p&gt;　　　　用于装饰控制器类来指明该控制器类是一个自定义指令控制器类&lt;/p&gt;
&lt;h3&gt;　　3.2 ElementRef&lt;/h3&gt;
&lt;p&gt;　　　　作为DOM对象的引用使用，通过构造器进行依赖注入，它的实例代表标注有自定义指令那个元素的DOM对象；每个标注了自定义指令的元素都会自动拥有一个ElementRef对象来作为该元素DOM对象的引用（前提：在自定义指令的控制器中依赖注入了ElementRef）&lt;/p&gt;
&lt;h3&gt;　　3.3 Render2&lt;/h3&gt;
&lt;p&gt;　　　　Render2的实例是用来操作DOM节点的，因为Angular不推荐直接操作DOM节点；Render2是从Angular4才开始支持的，之前的版本是使用的Render；每个标注有自定义指令的元素都会拥有一个Render2实例来操作该元素的DOM属性（前提：在自定义指令的控制器中依赖注入了Render2）&lt;/p&gt;
&lt;h3&gt;　　3.4 HostListener&lt;/h3&gt;
&lt;p&gt;　　　　用于装饰事件触发方法的注解&lt;/p&gt;

&lt;h2&gt;4 自定义属性指令&lt;/h2&gt;
&lt;p&gt;　　一个自定义的属性指令需要一个有@Directive装饰器进行装饰的控制器类&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
import { Directive } from '@angular/core'&lt;span&gt;;

@Directive({
  selector: &lt;/span&gt;'[appDirectiveTest02]'&lt;span&gt;
})
export class DirectiveTest02Directive {

  constructor() { }

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;　　4.1 实现自定义属性指令&lt;/h3&gt;
&lt;h4&gt;　　　　4.1.1 创建自定义属性指令控制类&lt;/h4&gt;
&lt;p&gt;　　　　　　技巧01：创建一个模块来专门放自定义指令&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
ng g d directive/test/directive-test02 --spec=&lt;span&gt;false&lt;/span&gt; --module=directive
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;　　　　4.1.2 在控制器类中依赖注入ElementRef　　&lt;/h4&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  constructor(
    private el: ElementRef
  ) {}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;　　　　4.1.3 通过ElementRef实例改变标有自定义指令元素对应的DOM对象的背景颜色　&lt;/h4&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  ngOnInit() {
    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.el.nativeElement.style.backgroundColor = 'skyblue'&lt;span&gt;;
  }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;　　　　4.1.3 在自定义指令模块中指定exports&lt;/h4&gt;
&lt;p&gt;　　　　　　&lt;img src=&quot;https://images2017.cnblogs.com/blog/1057762/201801/1057762-20180120225728928-105916298.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34.5&quot;&gt;&lt;img id=&quot;code_img_closed_fc5d921b-a123-49b8-a9b9-32e397d37aad&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_fc5d921b-a123-49b8-a9b9-32e397d37aad&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_fc5d921b-a123-49b8-a9b9-32e397d37aad&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;64&quot;&gt;
&lt;pre&gt;
import { NgModule } from '@angular/core'&lt;span&gt;;
import { CommonModule } from &lt;/span&gt;'@angular/common'&lt;span&gt;;
import { DirectiveTest01Directive } from &lt;/span&gt;'./test/directive-test01.directive'&lt;span&gt;;
import { SharedModule } from &lt;/span&gt;'../shared/shared.module'&lt;span&gt;;
import { DirectiveTest02Directive } from &lt;/span&gt;'./test/directive-test02.directive'&lt;span&gt;;

@NgModule({
  imports: [
    CommonModule
  ],
  declarations: [
    DirectiveTest01Directive,
    DirectiveTest02Directive],
  exports: [
    DirectiveTest01Directive,
    DirectiveTest02Directive
  ]
})
  
export class DirectiveModule { }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;h4&gt;　　　　4.1.4 将自定义指令模块导入到需要用到指定指令的组件所在的模块中&lt;/h4&gt;
&lt;p&gt;　　　　　　技巧01：自定义指令一般会被多次用到，所以一般会将自定义指令模块导入到共享模块在从共享模块导出，这样其它模块只需要导入共享模块就可以啦&lt;/p&gt;
&lt;p&gt;　　　　　　&lt;img src=&quot;https://images2017.cnblogs.com/blog/1057762/201801/1057762-20180120230001787-555101690.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;49.5&quot;&gt;&lt;img id=&quot;code_img_closed_98a1be71-cadd-47d9-952f-e59e97c0ed9b&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_98a1be71-cadd-47d9-952f-e59e97c0ed9b&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_98a1be71-cadd-47d9-952f-e59e97c0ed9b&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;94&quot;&gt;
&lt;pre&gt;
import { NgModule } from '@angular/core'&lt;span&gt;;
import { CommonModule } from &lt;/span&gt;'@angular/common'&lt;span&gt;;
import { RouterModule } from &lt;/span&gt;'@angular/router'&lt;span&gt;;
import { 
  MdToolbarModule,
  MdSidenavModule,
  MdIconModule,
  MdButtonModule,
  MdCardModule,
  MdInputModule,
  MdRadioModule,
  MdRadioButton
 } from &lt;/span&gt;'@angular/material'&lt;span&gt;;
import { FormsModule, ReactiveFormsModule } from &lt;/span&gt;'@angular/forms'&lt;span&gt;;
import { HttpModule } from &lt;/span&gt;'@angular/http'&lt;span&gt;;
import { DirectiveModule } from &lt;/span&gt;'../directive/directive.module'&lt;span&gt;; 

@NgModule({
  imports: [
    CommonModule,
    RouterModule,
    FormsModule,
    ReactiveFormsModule,
    HttpModule,
    MdToolbarModule,
    MdSidenavModule,
    MdIconModule,
    MdButtonModule,
    MdCardModule,
    MdInputModule,
    DirectiveModule,
    MdRadioModule
  ],
  declarations: [],
  exports: [
    CommonModule,
    RouterModule,
    FormsModule,
    ReactiveFormsModule,
    HttpModule,
    MdToolbarModule,
    MdSidenavModule,
    MdIconModule,
    MdButtonModule,
    MdCardModule,
    MdInputModule,
    DirectiveModule,
    MdRadioButton
  ]
})
export class SharedModule { }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;h4&gt;　　　　4.1.5 在组件中使用自定组件对应的选择器即可&lt;/h4&gt;
&lt;p&gt;　　　　　　自定义指令的选择器是由@Directive装饰器的selector元数据指定的&lt;/p&gt;
&lt;p&gt;　　　　　　　　&lt;img src=&quot;https://images2017.cnblogs.com/blog/1057762/201801/1057762-20180120230242271-1206593457.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　　　在元素中直接标注自定义指令的选择器就行啦&lt;/p&gt;
&lt;p&gt;　　　　　　　&lt;img src=&quot;https://images2017.cnblogs.com/blog/1057762/201801/1057762-20180120230602053-185476036.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_838962c1-e708-4eec-bad1-fe8e567d365d&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_838962c1-e708-4eec-bad1-fe8e567d365d&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_838962c1-e708-4eec-bad1-fe8e567d365d&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&amp;lt;div class=&quot;panel panel-primary&quot;&amp;gt;
    &amp;lt;div class=&quot;panel panel-heading&quot;&amp;gt;实现自定义属性指令&amp;lt;/div&amp;gt;
    &amp;lt;div class=&quot;panel-body&quot;&amp;gt;
        &amp;lt;button md-raised-button appDirectiveTest02&amp;gt;实现自定义指令的按钮&amp;lt;/button&amp;gt;
        &amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;
        &amp;lt;button md-raised-button&amp;gt;未实现自定以指令的按钮&amp;lt;/button&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;div class=&quot;panel-footer&quot;&amp;gt;2018-1-20 22:47:06&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;h4&gt;　　　　4.1.6 代码汇总&lt;/h4&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
import { Directive, ElementRef } from '@angular/core'&lt;span&gt;;
import { OnInit } from &lt;/span&gt;'../../../../node_modules/_@angular_core@4.4.6@@angular/core/src/metadata/lifecycle_hooks'&lt;span&gt;;

@Directive({
  selector: &lt;/span&gt;'[appDirectiveTest02]'&lt;span&gt;
})
export class DirectiveTest02Directive implements OnInit {

  constructor(
    private el: ElementRef
  ) {}

  ngOnInit() {
    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.el.nativeElement.style.backgroundColor = 'skyblue'&lt;span&gt;;
  }

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;　　4.2 给自定义属性指令绑定输入属性&lt;/h3&gt;
&lt;p&gt;　　　　在4.1中实现的自定义属性指令中背景颜色是写死的不能更改，我们可以给指令绑定输入属性实现数据传递，从而达到动态改变的目的&lt;/p&gt;
&lt;h4&gt;　　　　4.2.1 在自定义属性指令的控制器中添加一个输入属性myColor&lt;/h4&gt;
&lt;p&gt;　　　　　　&lt;img src=&quot;https://images2017.cnblogs.com/blog/1057762/201801/1057762-20180120231541537-295013241.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;&lt;img id=&quot;code_img_closed_d285941f-1e63-4e95-a4fa-8b84b22ad5fa&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_d285941f-1e63-4e95-a4fa-8b84b22ad5fa&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_d285941f-1e63-4e95-a4fa-8b84b22ad5fa&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;63&quot;&gt;
&lt;pre&gt;
import { Directive, ElementRef, OnInit, Input } from '@angular/core'&lt;span&gt;;

@Directive({
  selector: &lt;/span&gt;'[appDirectiveTest02]'&lt;span&gt;
})
export class DirectiveTest02Directive implements OnInit {

  @Input()
  myColor: string;

  constructor(
    private el: ElementRef
  ) {}

  ngOnInit() {
    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.el.nativeElement.style.backgroundColor = &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.myColor;
  }

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;h4&gt;　　　　4.2.2 在组件中给myColor属性赋值&lt;/h4&gt;
&lt;p&gt;　　　　　　技巧01：在给输入属性赋值时，等号右边如果不是一个变量就需要用单引号括起来&lt;/p&gt;
&lt;p&gt;　　　　　　&lt;img src=&quot;https://images2017.cnblogs.com/blog/1057762/201801/1057762-20180120231655474-1375621086.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_ddcf548c-7133-4ebf-ad3d-72c5d032bfe1&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_ddcf548c-7133-4ebf-ad3d-72c5d032bfe1&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_ddcf548c-7133-4ebf-ad3d-72c5d032bfe1&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&amp;lt;div class=&quot;panel panel-primary&quot;&amp;gt;
    &amp;lt;div class=&quot;panel panel-heading&quot;&amp;gt;实现自定义属性指令&amp;lt;/div&amp;gt;
    &amp;lt;div class=&quot;panel-body&quot;&amp;gt;
        &amp;lt;button md-raised-button appDirectiveTest02 [myColor]=&quot;'red'&quot;&amp;gt;实现自定义指令的按钮&amp;lt;/button&amp;gt;
        &amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;
        &amp;lt;button md-raised-button&amp;gt;未实现自定以指令的按钮&amp;lt;/button&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;div class=&quot;panel-footer&quot;&amp;gt;2018-1-20 22:47:06&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;h4&gt;　　　　4.2.3 效果展示&lt;/h4&gt;
&lt;p&gt;　　　　　　&lt;img src=&quot;https://images2017.cnblogs.com/blog/1057762/201801/1057762-20180120231926521-1132937415.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h4&gt;　　　　4.2.4 改进&lt;/h4&gt;
&lt;p&gt;　　　　　　可以通过自定义属性指令的选择器来实现数据传输&lt;/p&gt;
&lt;p&gt;　　　　　　》利用自定义属性指令的选择器作为输入属性myColor输入属性的别名&lt;/p&gt;
&lt;p&gt;　　　　　　　　&lt;img src=&quot;https://images2017.cnblogs.com/blog/1057762/201801/1057762-20180120232135068-421895866.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　　　》在组件中直接利用自定义指令的选择器作为输入属性&lt;/p&gt;
&lt;p&gt;　　　　　　　　&lt;img src=&quot;https://images2017.cnblogs.com/blog/1057762/201801/1057762-20180120232316521-194603853.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_7b27f7e5-7011-4bb4-adb5-3a799a947b81&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_7b27f7e5-7011-4bb4-adb5-3a799a947b81&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_7b27f7e5-7011-4bb4-adb5-3a799a947b81&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&amp;lt;div class=&quot;panel panel-primary&quot;&amp;gt;
    &amp;lt;div class=&quot;panel panel-heading&quot;&amp;gt;实现自定义属性指令&amp;lt;/div&amp;gt;
    &amp;lt;div class=&quot;panel-body&quot;&amp;gt;
        &amp;lt;button md-raised-button [appDirectiveTest02]=&quot;'yellow'&quot;&amp;gt;实现自定义指令的按钮&amp;lt;/button&amp;gt;
        &amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;
        &amp;lt;button md-raised-button&amp;gt;未实现自定以指令的按钮&amp;lt;/button&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;div class=&quot;panel-footer&quot;&amp;gt;2018-1-20 22:47:06&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;　　　　　　》 效果展示&lt;/p&gt;
&lt;p&gt;　　　　　　　　&lt;img src=&quot;https://images2017.cnblogs.com/blog/1057762/201801/1057762-20180120232417193-979544936.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;　　4.3 响应用户操作&lt;/h3&gt;
&lt;p&gt;　　　　daigengxin......2018-1-20 23:25:11&lt;/p&gt;




</description>
<pubDate>Sat, 20 Jan 2018 15:26:00 +0000</pubDate>
<dc:creator>NeverCtrl_C</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/NeverCtrl-C/p/8322327.html</dc:identifier>
</item>
</channel>
</rss>