<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>测试驱动开发实践2————测试驱动开发之前 - 云开发</title>
<link>http://www.cnblogs.com/cloud-dev/p/ce-shi-qu-dong-kai-fa-shi-jian2ce-shi-qu-dong-kai-.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/cloud-dev/p/ce-shi-qu-dong-kai-fa-shi-jian2ce-shi-qu-dong-kai-.html</guid>
<description>&lt;p&gt;【内容指引】&lt;br/&gt;关闭微服务项目的缓存开关；&lt;br/&gt;改造dto层代码；&lt;br/&gt;改造dao层代码；&lt;br/&gt;改造service.impl层的list方法；&lt;br/&gt;调整单元测试类的testList方法代码。&lt;/p&gt;
&lt;h2 id=&quot;toc_0&quot;&gt;一、关闭项目的缓存开关&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;在正式进行测试驱动开发之前，我们需要关闭项目的缓存配置&lt;/em&gt;。由于从“云开发”平台生成的微服务初始化代码默认启用了Redis缓存(建议以Docker的方式安装及启动Redis)，为避免因为缓存导致测试数据不准确，可以关闭缓存的开关。&lt;/p&gt;
&lt;p&gt;如下图所示，在&quot;DocApplicationTests&quot;中将“//TODO”提示这行删除掉即可：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1340917/201804/1340917-20180405074938565-142960196.jpg&quot; alt=&quot;&quot;/&gt;￼&lt;/p&gt;
&lt;p&gt;在“DocApplication”中将“@EnableCaching”这个注解注释掉，就关掉了缓存开关：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1340917/201804/1340917-20180405074938905-985830872.jpg&quot; alt=&quot;&quot;/&gt;￼&lt;/p&gt;
&lt;h2 id=&quot;toc_1&quot;&gt;二、改造dto层代码&lt;/h2&gt;
&lt;p&gt;在查询文档分类(Category)列表时，查询的参数通过“DTO数据传输对象”CategoryDTO传递。默认情况下，“云开发”平台初始化的DTO类代码中的字段来自于领域类中数据类型为String的字段，除此外，增加一个keyword字段。&lt;/p&gt;
&lt;p&gt;keyword字段用于标准查询，其它字段用于高级查询。这里介绍下标准查询和高级查询的区别。&lt;br/&gt;&lt;em&gt;提示&lt;/em&gt;&lt;br/&gt;由于本例中Category领域类仅包含name(分类名称)这一个String类型的字段，不便于区分标准查询和高级查询。&lt;em&gt;我们假设Category类中还含有一个memo(分类说明)字段&lt;/em&gt;，那么标准查询和高级查询的用途如下：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;标准查询&lt;/strong&gt;&lt;br/&gt;标准查询，就是“或”关系的匹配。客户端仅提供一个“查询关键字”，然后从Category领域类对应的数据表&quot;tbl_category&quot;的多个String字段中匹配该关键字(忽略大小写)，只要任何一个字段匹配成功，即成为查询结果之一。比如，关键字为“AA”，那么如果分类名称(name)中含有“AA”，或者分类说明(memo)中含有“AA”,都是符合条件的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;高级查询&lt;/strong&gt;&lt;br/&gt;高级查询，就是“且”关系的匹配。客户端提供多个关键字，然后从Category领域类对应的数据表&quot;tbl_category&quot;的多个String字段中分别匹配这些关键字，只有所有字段的赋值均匹配成功，才能成为查询结果之一。比如，分类名称关键字为“AA”，分类说明关键字为“BB”，那么只有分类名称(name)中含有“AA”，并且分类说明(memo)中含有“BB”的数据才是符合条件的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1340917/201804/1340917-20180405074939862-116160088.jpg&quot; alt=&quot;&quot;/&gt;￼&lt;/p&gt;
&lt;h3 id=&quot;toc_2&quot;&gt;1.keyword字段不可删除&lt;/h3&gt;
&lt;p&gt;keyword字段是约定用于标准查询的参数，不可删除！&lt;/p&gt;
&lt;h3 id=&quot;toc_3&quot;&gt;2.CategoryDTO其它字段&lt;/h3&gt;
&lt;p&gt;根据实际查询需要，将不适合用于查询的字段删除掉，包含私有字段、构造函数、get和set属性。&lt;br/&gt;本例中由于领域类Category中仅含一个String类型字段name，所以不必分标准查询和高级查询，所以将用于高级查询的字段“name”删除掉。&lt;/p&gt;
&lt;h3 id=&quot;toc_4&quot;&gt;3.为CategoryDTO增加字段&lt;/h3&gt;
&lt;p&gt;本例中，查询文档分类时需指定所属的项目，所以增加一个projectId字段，相应修改带参构造函数和Getter、Setter。Mac操作系统下使用IntelliJ IDEA编码时可以用“Command + N”快捷键：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1340917/201804/1340917-20180405074939930-2025224850.jpg&quot; alt=&quot;&quot;/&gt;￼&lt;/p&gt;
&lt;p&gt;修改后代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; top.cloudev.doc.dto;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.io.Serializable;

&lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * Category(文档分类) 的DTO数据传输对象
 * Created by Mac.Manon on 2018/04/02
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;

&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; CategoryDTO &lt;span&gt;implements&lt;/span&gt;&lt;span&gt; Serializable {

    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;long&lt;/span&gt; serialVersionUID = 1L&lt;span&gt;;

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 关键字(标准查询)
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt;&lt;span&gt; String keyword;

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 文档分类所属的项目
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt;&lt;span&gt; Long projectId;

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     *空构造函数
     *
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt;&lt;span&gt; CategoryDTO(){
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; CategoryDTO(String keyword, Long projectId) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.keyword =&lt;span&gt; keyword;
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.projectId =&lt;span&gt; projectId;
    }

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     *Getter,Setter
     *
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getKeyword() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; keyword;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setKeyword(String keyword) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.keyword =&lt;span&gt; keyword;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; Long getProjectId() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; projectId;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setProjectId(Long projectId) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.projectId =&lt;span&gt; projectId;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;toc_5&quot;&gt;三、改造dao层代码&lt;/h2&gt;
&lt;p&gt;dao层采用JPA接口的方式实现数据查询，根据DTO中字段的调整，修改这里的接口(增加了projectId参数)：&lt;/p&gt;
&lt;p&gt;修改前代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; top.cloudev.doc.dao;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; top.cloudev.doc.domain.Category;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.data.domain.Page;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.data.domain.Pageable;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.data.jpa.repository.JpaRepository;

&lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * 领域类 Category(文档分类) 的DAO Repository接口层
 * Created by Mac.Manon on 2018/04/02
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;

&lt;span&gt;//&lt;/span&gt;&lt;span&gt;@RepositoryRestResource(path = &quot;newpath&quot;)&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt; CategoryRepository &lt;span&gt;extends&lt;/span&gt; JpaRepository&amp;lt;Category,Long&amp;gt;&lt;span&gt; {

    Page&lt;/span&gt;&amp;lt;Category&amp;gt;&lt;span&gt; findByIsDeletedFalse(Pageable pageable);

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 标准查询&lt;/span&gt;
    Page&amp;lt;Category&amp;gt;&lt;span&gt; findByNameContainingAndIsDeletedFalseAllIgnoringCase(String name, Pageable pageable);

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;修改后代码：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1340917/201804/1340917-20180405074942122-1823650402.jpg&quot; alt=&quot;&quot;/&gt;￼&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; top.cloudev.doc.dao;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; top.cloudev.doc.domain.Category;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.data.domain.Page;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.data.domain.Pageable;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.data.jpa.repository.JpaRepository;

&lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * 领域类 Category(文档分类) 的DAO Repository接口层
 * Created by Mac.Manon on 2018/04/02
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;

&lt;span&gt;//&lt;/span&gt;&lt;span&gt;@RepositoryRestResource(path = &quot;newpath&quot;)&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt; CategoryRepository &lt;span&gt;extends&lt;/span&gt; JpaRepository&amp;lt;Category,Long&amp;gt;&lt;span&gt; {

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 默认列表&lt;/span&gt;
    Page&amp;lt;Category&amp;gt;&lt;span&gt; findByProjectIdAndIsDeletedFalse(Long projectId, Pageable pageable);

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 标准查询&lt;/span&gt;
    Page&amp;lt;Category&amp;gt;&lt;span&gt; findByNameContainingAllIgnoringCaseAndProjectIdAndIsDeletedFalse(String name, Long projectId, Pageable pageable);

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;toc_6&quot;&gt;四、改造service.impl层的getPageData方法&lt;/h2&gt;
&lt;p&gt;由于dao层的查询接口已修改，相应调整服务实现层UserServiceImpl中getPageData方法调用的方法名及参数。这里利用&quot;dto.getProjectId()&quot;给增加的参数传值：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1340917/201804/1340917-20180405074940956-1542138786.jpg&quot; alt=&quot;&quot;/&gt;￼&lt;/p&gt;
&lt;h2 id=&quot;toc_7&quot;&gt;五、调整单元测试类的testList方法代码&lt;/h2&gt;
&lt;p&gt;打开文档分类的单元测试类代码，找到&quot;testList()&quot;方法，对其中调用Dao层数据访问接口的代码进行调整（正常情况下应该在“测试无搜索列表”、“测试标准查询”和“测试高级查询”三处有对dao接口的调用，本例中因没有高级查询，所以仅需修改两处）：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1340917/201804/1340917-20180405074943401-2087317693.jpg&quot; alt=&quot;&quot;/&gt;￼&lt;/p&gt;
&lt;p&gt;调整后代码如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1340917/201804/1340917-20180405074955268-1081489692.jpg&quot; alt=&quot;&quot;/&gt;￼&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1340917/201804/1340917-20180405074954128-1310771408.jpg&quot; alt=&quot;&quot;/&gt;￼&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;53&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
         * 测试无搜索列表
         &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;

        &lt;span&gt;/**&lt;/span&gt;&lt;span&gt;---------------------测试用例赋值开始---------------------*&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
        &lt;span&gt;//&lt;/span&gt;&lt;span&gt;TODO 将下面的null值换为测试参数&lt;/span&gt;
        Pageable pageable=&lt;span&gt;new&lt;/span&gt; PageRequest(0,10, Sort.Direction.DESC,&quot;categoryId&quot;&lt;span&gt;);

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 期望获得的结果数量(默认有两个测试用例，所以值应为&quot;2L&quot;，如果新增了更多测试用例，请相应设定这个值)&lt;/span&gt;
        expectResultCount = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;---------------------测试用例赋值结束---------------------*&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;

        &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 直接通过dao层接口方法获得期望的数据&lt;/span&gt;
        Page&amp;lt;Category&amp;gt; pagedata =&lt;span&gt; categoryRepository.findByProjectIdAndIsDeletedFalse(c1.getCategoryId(), pageable);
        expectData &lt;/span&gt;= JsonPath.read(Obj2Json(pagedata),&quot;$&quot;&lt;span&gt;).toString();

        MvcResult mvcResult &lt;/span&gt;=&lt;span&gt; mockMvc
                .perform(
                        MockMvcRequestBuilders.get(&lt;/span&gt;&quot;/category/list&quot;&lt;span&gt;)
                                .accept(MediaType.APPLICATION_JSON)
                )
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 打印结果&lt;/span&gt;
&lt;span&gt;                .andDo(print())
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 检查状态码为200&lt;/span&gt;
&lt;span&gt;                .andExpect(status().isOk())
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 检查返回的数据节点&lt;/span&gt;
                .andExpect(jsonPath(&quot;$.pagedata.totalElements&quot;&lt;span&gt;).value(expectResultCount))
                .andExpect(jsonPath(&lt;/span&gt;&quot;$.dto.keyword&quot;&lt;span&gt;).isEmpty())
                .andExpect(jsonPath(&lt;/span&gt;&quot;$.dto.name&quot;&lt;span&gt;).isEmpty())
                .andReturn();

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 提取返回结果中的列表数据及翻页信息&lt;/span&gt;
        responseData = JsonPath.read(mvcResult.getResponse().getContentAsString(),&quot;$.pagedata&quot;&lt;span&gt;).toString();

        System.out.println(&lt;/span&gt;&quot;=============无搜索列表期望结果：&quot; +&lt;span&gt; expectData);
        System.out.println(&lt;/span&gt;&quot;=============无搜索列表实际返回：&quot; +&lt;span&gt; responseData);

        Assert.assertEquals(&lt;/span&gt;&quot;错误，无搜索列表返回数据与期望结果有差异&quot;&lt;span&gt;,expectData,responseData);
        


        &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
         * 测试标准查询
         &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;

        &lt;span&gt;/**&lt;/span&gt;&lt;span&gt;---------------------测试用例赋值开始---------------------*&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
        &lt;span&gt;//&lt;/span&gt;&lt;span&gt;TODO 将下面的null值换为测试参数&lt;/span&gt;
        dto = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; CategoryDTO();
        dto.setKeyword(&lt;/span&gt;&lt;span&gt;null&lt;/span&gt;&lt;span&gt;);
        dto.setProjectId(c1.getProjectId());

        pageable&lt;/span&gt;=&lt;span&gt;new&lt;/span&gt; PageRequest(0,10, Sort.Direction.DESC,&quot;categoryId&quot;&lt;span&gt;);

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 期望获得的结果数量&lt;/span&gt;
        expectResultCount = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;---------------------测试用例赋值结束---------------------*&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;

        String keyword &lt;/span&gt;=&lt;span&gt; dto.getKeyword().trim();

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 直接通过dao层接口方法获得期望的数据&lt;/span&gt;
        pagedata =&lt;span&gt; categoryRepository.findByNameContainingAllIgnoringCaseAndProjectIdAndIsDeletedFalse(keyword, dto.getProjectId(), pageable);
        expectData &lt;/span&gt;= JsonPath.read(Obj2Json(pagedata),&quot;$&quot;&lt;span&gt;).toString();

        mvcResult &lt;/span&gt;=&lt;span&gt; mockMvc
                .perform(
                        MockMvcRequestBuilders.get(&lt;/span&gt;&quot;/category/list&quot;&lt;span&gt;)
                                .param(&lt;/span&gt;&quot;keyword&quot;&lt;span&gt;,dto.getKeyword())
                                .accept(MediaType.APPLICATION_JSON)
                )
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 打印结果&lt;/span&gt;
&lt;span&gt;                .andDo(print())
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 检查状态码为200&lt;/span&gt;
&lt;span&gt;                .andExpect(status().isOk())
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 检查返回的数据节点&lt;/span&gt;
                .andExpect(jsonPath(&quot;$.pagedata.totalElements&quot;&lt;span&gt;).value(expectResultCount))
                .andExpect(jsonPath(&lt;/span&gt;&quot;$.dto.keyword&quot;&lt;span&gt;).value(dto.getKeyword()))
                .andExpect(jsonPath(&lt;/span&gt;&quot;$.dto.name&quot;&lt;span&gt;).isEmpty())
                .andReturn();

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 提取返回结果中的列表数据及翻页信息&lt;/span&gt;
        responseData = JsonPath.read(mvcResult.getResponse().getContentAsString(),&quot;$.pagedata&quot;&lt;span&gt;).toString();

        System.out.println(&lt;/span&gt;&quot;=============标准查询期望结果：&quot; +&lt;span&gt; expectData);
        System.out.println(&lt;/span&gt;&quot;=============标准查询实际返回：&quot; +&lt;span&gt; responseData);

        Assert.assertEquals(&lt;/span&gt;&quot;错误，标准查询返回数据与期望结果有差异&quot;,expectData,responseData);
&lt;/pre&gt;&lt;/div&gt;

</description>
<pubDate>Wed, 04 Apr 2018 23:50:00 +0000</pubDate>
<dc:creator>云开发</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/cloud-dev/p/ce-shi-qu-dong-kai-fa-shi-jian2ce-shi-qu-dong-kai-.html</dc:identifier>
</item>
<item>
<title>【零基础】【Fungus首个中文教程】10分钟快速构建Unity中的万能对话系统 / 叙事系统 / 剧情系统 - 姜子瑜</title>
<link>http://www.cnblogs.com/ldzhangyx/p/8720168.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/ldzhangyx/p/8720168.html</guid>
<description>
&lt;p&gt;我真的很久没有写过一个完整的攻略了（笑），咸鱼了很久之后还是想来写一个好玩的。这次主要是梳理一下Unity的小众插件Fungus的核心功能，并且快速掌握其使用方法。&lt;/p&gt;
&lt;p&gt;官方文档：http://fungusdocs.snozbot.com/&lt;/p&gt;
&lt;p&gt;视频教程：https://www.youtube.com/watch?v=9zqUx0xZBv4&lt;/p&gt;
&lt;p&gt;那么首先Fungus是什么呢？Fungus提供了一个交互式的界面，快速构建一个对话系统，甚至是文字游戏（AVG）的核心组件。&lt;/p&gt;
&lt;p&gt;Fungus在Unity 3D项目中，主要是做剧情讲述部分，故我主要是阐述Fungus怎么做好一个剧情阐述。&lt;/p&gt;

&lt;p&gt;一，怎么创建一个叙述？场景开始时的故事阐述&lt;/p&gt;
&lt;p&gt;首先我们打开一个Unity项目，当然我手上是有一个项目的，目前正在参加Imagine Cup 2018.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1037202/201804/1037202-20180404232616642-29612985.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; 首先我们在Tools里找到Fungus。事先我们需要在Unity的Assets Store里安装这个插件。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1037202/201804/1037202-20180404232709469-1265030447.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;创建一个Flowchart。这样我们可以发现左边的树里已经多了一项Flowchart。&lt;/p&gt;
&lt;p&gt;接下来我们打开Fungus的Flowchart窗口。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1037202/201804/1037202-20180404232820314-1599198371.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;然后会出现一个这样的界面：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1037202/201804/1037202-20180404234648379-1753514471.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;接下来我们点一下这个Block，为它改名为“StartStory”，然后将触发条件设为“GameStart”。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1037202/201804/1037202-20180404234931122-1567802600.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;接下来为这个Block添加一些内容。&lt;/p&gt;
&lt;p&gt;我们选择“+”，然后选择narrative里的say，添加一个新的叙述。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1037202/201804/1037202-20180404235022331-140205109.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1037202/201804/1037202-20180404235051328-1510448449.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;如果需要多段叙述，可以继续添加不同的块。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1037202/201804/1037202-20180404235211246-2091431318.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;到现在我们都没有看见一行代码，是不是非常简洁？&lt;/p&gt;

&lt;p&gt;二，对话系统开放！Character与Menu&lt;/p&gt;
&lt;p&gt;一直到刚才我讲的都是单线叙事，现在我引入一个概念：Character。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1037202/201804/1037202-20180405000722331-1144348926.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;接下来我们建立一个叫做boy的人物。&lt;/p&gt;
&lt;p&gt;我们可以为人物指定一个Portrait（肖像），实现类似下图的效果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1037202/201804/1037202-20180405000921801-1915110965.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;如图操作：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1037202/201804/1037202-20180405000952542-339958755.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;现在有了一个Character之后，我们的对话就可以指定角色来区分了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1037202/201804/1037202-20180405001031881-563767280.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;当然还有一个加快速度的剧情添加办法：Narrative &amp;gt; Conversation。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1037202/201804/1037202-20180405001136086-2028365144.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; 然后将剧情以这样的方式添加：[character] [portrait] [position] [hide] [&amp;lt;&amp;lt;&amp;lt; | &amp;gt;&amp;gt;&amp;gt;]: [Dialogue text]&lt;/p&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;div class=&quot;fragment&quot; readability=&quot;16&quot;&gt;
&lt;blockquote readability=&quot;25&quot;&gt;
&lt;p&gt;john bored left: Oh, so that's how you use the Conversation command.&lt;/p&gt;
&lt;p&gt;sherlock eyeroll right: Yes, well done John.&lt;/p&gt;
&lt;p&gt;You catch on quickly don't you?&lt;/p&gt;
&lt;p&gt;hide john &quot;offscreen left&quot;: I sure do.&lt;/p&gt;
&lt;p&gt;-- This is a comment, it doesn't appear in the conversation&lt;/p&gt;
&lt;p&gt;john angry middle: Wait, what!&lt;/p&gt;
&lt;p&gt;left: There's no need to be rude Sherlock!&lt;/p&gt;
&lt;p&gt;bored: Not like that would stop you.&lt;/p&gt;
&lt;p&gt;sherlock excited: AHA! So that's how you do a conversation from Lua!&lt;/p&gt;
&lt;p&gt;Fascinating.&lt;/p&gt;
&lt;p&gt;john &amp;lt;&amp;lt;&amp;lt;: Yes, riveting.&lt;/p&gt;
&lt;p&gt;john hide:&lt;/p&gt;
&lt;p&gt;sherlock hide:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;p&gt;接下来就能顺利展开剧情了。&lt;/p&gt;

&lt;p&gt;接下来是一个重要功能：Menu。Menu可以为我们做出剧情走向，即根据选择跳转到不同的Block。&lt;/p&gt;
&lt;p&gt;首先我们做一个简单的对话选择支：答题系统。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1037202/201804/1037202-20180405001849356-1789327724.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;首先我们在Block后创建四个Menu：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1037202/201804/1037202-20180405002015233-864605159.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;然后再新建几个新的Block，将Menu的target指向新的Block。&lt;br/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1037202/201804/1037202-20180405002101081-1926304475.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这样就可以实现一个对话分支了。&lt;/p&gt;
&lt;p&gt;请看答题系统的Fungus实现:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1037202/201804/1037202-20180405002138337-2074578778.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; 最后就可以形成一个对话树结构。&lt;/p&gt;

&lt;p&gt;三，触发式对话&lt;/p&gt;
&lt;p&gt;当然我们知道，一个正常的人物对话其实应该是触发式展开的。比如说你走近一个人，就开始自动对话，或者是按下键，就自动对话。&lt;/p&gt;
&lt;p&gt;这里提供一个简单的触发式解决办法，当然这不是唯一的解决办法：&lt;/p&gt;
&lt;p&gt;1，首先我们给人物加一个Collider，Box Collider即可。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1037202/201804/1037202-20180405003244293-115361137.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;这里最好让Collider不碰到任何其他物体。&lt;/p&gt;
&lt;p&gt; 同时注意，我们还要创建另一个Collider来保证人物不被穿过。这个时候可以用Sphere Collider。&lt;/p&gt;
&lt;p&gt;2，我们勾选触发器，isTrigger选项。&lt;/p&gt;
&lt;p&gt;然后在这个人物这里新建一个C#脚本，编辑触发器函数：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1037202/201804/1037202-20180405004141050-2046709108.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;这里的Message类似一个信号，当我们触发了这个Collider之后，广播了一个信号，我暂且取名为majorTask1.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1037202/201804/1037202-20180405004410717-185537589.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;同时我们将block的触发条件设置为”Message Received“。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1037202/201804/1037202-20180405004444651-290821369.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;这样我们就可以设置成触发式对话了。&lt;/p&gt;

&lt;p&gt;=================================&lt;/p&gt;
&lt;p&gt;这是我们正在开发的独立游戏：《无尽音海》音乐跑酷+探索城市。目前正在开发阶段。&lt;/p&gt;

</description>
<pubDate>Wed, 04 Apr 2018 16:46:00 +0000</pubDate>
<dc:creator>姜子瑜</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/ldzhangyx/p/8720168.html</dc:identifier>
</item>
<item>
<title>Java8-如何构建一个Stream - Ryan.Miao</title>
<link>http://www.cnblogs.com/woshimrf/p/Java8-build-stream.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/woshimrf/p/Java8-build-stream.html</guid>
<description>&lt;p&gt;Stream的创建方式有很多种，除了最常见的集合创建，还有其他几种方式。&lt;/p&gt;
&lt;h2 id=&quot;list转stream&quot;&gt;List转Stream&lt;/h2&gt;
&lt;p&gt;List继承自Collection接口，而Collection提供了stream()方法。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;List&amp;lt;Integer&amp;gt; list = Lists.&lt;span class=&quot;fu&quot;&gt;newArrayList&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;);
Stream&amp;lt;Integer&amp;gt; stream = list.&lt;span class=&quot;fu&quot;&gt;stream&lt;/span&gt;();&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;数组转stream&quot;&gt;数组转stream&lt;/h2&gt;
&lt;p&gt;对于数组，Arrays提供了stream()方法。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;String[] arr = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; String[]{&lt;span class=&quot;st&quot;&gt;&quot;a&quot;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&quot;b&quot;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&quot;c&quot;&lt;/span&gt;};
Stream&amp;lt;String&amp;gt; stream = Arrays.&lt;span class=&quot;fu&quot;&gt;stream&lt;/span&gt;(arr);&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;map转stream&quot;&gt;Map转stream&lt;/h2&gt;
&lt;p&gt;Map并不是一个序列，不是集合，没办法直接转成stream(). 但entrySet()是Set，可以转&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;
Map&amp;lt;String, Object&amp;gt; map = Maps.&lt;span class=&quot;fu&quot;&gt;newHashMap&lt;/span&gt;();
Stream&amp;lt;Entry&amp;lt;String, Object&amp;gt;&amp;gt; stream = map.&lt;span class=&quot;fu&quot;&gt;entrySet&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;stream&lt;/span&gt;();&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;直接创建stream&quot;&gt;直接创建Stream&lt;/h2&gt;
&lt;p&gt;Stream也提供了API直接生成一个Stream，这个Stream大概可以理解成一个List。因为内部就是数组实现的。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;Stream&amp;lt;Integer&amp;gt; integerStream = Stream.&lt;span class=&quot;fu&quot;&gt;of&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;);&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;读取文件的stream&quot;&gt;读取文件的Stream&lt;/h2&gt;
&lt;p&gt;用过Linux的就会对其命令行的管道符敬佩不已，一个管道符就可以源源不断的做处理。在Java里读取文件也可以实现类似的功能。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;
&lt;span class=&quot;dt&quot;&gt;long&lt;/span&gt; uniqueWords = &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;;
&lt;span class=&quot;kw&quot;&gt;try&lt;/span&gt; (Stream&amp;lt;String&amp;gt; lines = Files.&lt;span class=&quot;fu&quot;&gt;lines&lt;/span&gt;(Paths.&lt;span class=&quot;fu&quot;&gt;get&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;data.txt&quot;&lt;/span&gt;), Charset.&lt;span class=&quot;fu&quot;&gt;defaultCharset&lt;/span&gt;())) {
    uniqueWords = lines.&lt;span class=&quot;fu&quot;&gt;flatMap&lt;/span&gt;(l -&amp;gt; Arrays.&lt;span class=&quot;fu&quot;&gt;stream&lt;/span&gt;(l.&lt;span class=&quot;fu&quot;&gt;split&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot; &quot;&lt;/span&gt;)))
            .&lt;span class=&quot;fu&quot;&gt;distinct&lt;/span&gt;()
            .&lt;span class=&quot;fu&quot;&gt;count&lt;/span&gt;();
} &lt;span class=&quot;kw&quot;&gt;catch&lt;/span&gt; (IOException e) {
    &lt;span class=&quot;co&quot;&gt;//&lt;/span&gt;
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;通过函数来生成无限流&quot;&gt;通过函数来生成无限流&lt;/h2&gt;
&lt;p&gt;Stream提供了iterate来生成一个无限序列，一个基于初始值的无限序列。可以用lambda设置序列的生成规则，比如每次增加2.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;Stream.&lt;span class=&quot;fu&quot;&gt;iterate&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;, n -&amp;gt; n + &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;)
      .&lt;span class=&quot;fu&quot;&gt;limit&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;)
      .&lt;span class=&quot;fu&quot;&gt;forEach&lt;/span&gt;(System.&lt;span class=&quot;fu&quot;&gt;out&lt;/span&gt;::println);&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;再比如，斐波那契数列（Fibonacci sequence）&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;
Stream.&lt;span class=&quot;fu&quot;&gt;iterate&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt;[]{&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;}, t -&amp;gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt;[]{t[&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;], t[&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;] + t[&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;]})
        .&lt;span class=&quot;fu&quot;&gt;limit&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;20&lt;/span&gt;)
        .&lt;span class=&quot;fu&quot;&gt;map&lt;/span&gt;(t -&amp;gt; t[&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;])
        .&lt;span class=&quot;fu&quot;&gt;forEach&lt;/span&gt;(System.&lt;span class=&quot;fu&quot;&gt;out&lt;/span&gt;::println);&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Stream还提供了另一个generate方法来生成序列。接收一个用户指定的生成序列函数IntSupplier.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;IntSupplier fib = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;IntSupplier&lt;/span&gt;() {
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; previous = &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; current = &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;;

    &lt;span class=&quot;fu&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;getAsInt&lt;/span&gt;() {
        &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; oldPrevious = &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;previous&lt;/span&gt;;
        &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; nextValue = &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;previous&lt;/span&gt; + &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;current&lt;/span&gt;;
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;previous&lt;/span&gt; = &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;current&lt;/span&gt;;
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;current&lt;/span&gt; = nextValue;
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; oldPrevious;
    }
};
IntStream.&lt;span class=&quot;fu&quot;&gt;generate&lt;/span&gt;(fib).&lt;span class=&quot;fu&quot;&gt;limit&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;).&lt;span class=&quot;fu&quot;&gt;forEach&lt;/span&gt;(System.&lt;span class=&quot;fu&quot;&gt;out&lt;/span&gt;::println);&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
</description>
<pubDate>Wed, 04 Apr 2018 15:46:00 +0000</pubDate>
<dc:creator>Ryan.Miao</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/woshimrf/p/Java8-build-stream.html</dc:identifier>
</item>
<item>
<title>欧拉角-万象锁问题。 - 请勿靠近丶</title>
<link>http://www.cnblogs.com/MyGameBlogs/p/8719761.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/MyGameBlogs/p/8719761.html</guid>
<description>&lt;p&gt;欧拉角，Roll-Pitch-Yaw. Roll表示绕X轴旋转，Pitch表示绕Y轴旋转，Yaw表示绕Z轴旋转。&lt;/p&gt;
&lt;p&gt;在欧拉角中，三个角度存在层级关系。例如Roll-&amp;gt;Pitch-&amp;gt;Yaw，Roll旋转时会同时旋转Pitch和Yaw，Pitch旋转时会旋转Yaw，而Yaw旋转时则不能影响前面2个。&lt;/p&gt;
&lt;p&gt;在UE4中，层级关系似乎是Yaw-&amp;gt;Pitch-&amp;gt;Roll。 Pitch一定是第二层级，因为本人测试过当Pitch旋转为±90°的时候，将发生万象锁。&lt;/p&gt;

&lt;p&gt;万象锁，即由于第二层级旋转轴发生±90°的旋转，从而导致第三层级的旋转轴与第一层级的旋转轴重合。此时，因为第一层级和第三层级的旋转轴重合，因此第一层级的旋转效果和第三层级的旋转效果是一样的。&lt;/p&gt;
&lt;p&gt;这个现象就是万象锁问题。  &lt;/p&gt;
&lt;p&gt;解决方法：&lt;/p&gt;
&lt;p&gt;第一是限制第二层级旋转轴的旋转角度。只要旋转角度不是±90°，则不会发生万象锁。不过这种情况下，要进行连续的旋转动画则可能会由问题。&lt;/p&gt;

&lt;p&gt;以上为对欧拉角万象锁的理解。&lt;/p&gt;
&lt;p&gt;附上万象锁解释视频：https://www.bilibili.com/video/av8387812/?spm_id_from=333.338.recommend_report.2 &lt;/p&gt;

</description>
<pubDate>Wed, 04 Apr 2018 15:44:00 +0000</pubDate>
<dc:creator>请勿靠近丶</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/MyGameBlogs/p/8719761.html</dc:identifier>
</item>
<item>
<title>偶遇vue-awesome-swiper的坑 - 新哥·lewis</title>
<link>http://www.cnblogs.com/lewiscutey/p/8719596.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/lewiscutey/p/8719596.html</guid>
<description>&lt;div id=&quot;output_wrapper_id&quot; class=&quot;output_wrapper&quot; readability=&quot;44.5&quot;&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;最近用vue重构一个移动端的项目，碰到了不少坑，今天拿移动端最著名的轮播插件swiper为例来说，由于这个项目没用UI库，纯手写的样式，沿用老的插件，自然而然的选择了&lt;strong&gt;vue-awesome-swiper&lt;/strong&gt;(3.1.3)最新版，记不清上次用这个插件多久了，现在用来竟遇到很多坑，今晚闲暇以此记录，帮助大家避免踩坑。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;h1&quot;&gt;&lt;span&gt;1. 轮播图不轮播&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;这个原因有很多，首先要检查样式swiper.css是否正确的引进来了，其次是最容易被忽略的也是这次最主要的原因，最新版的vue-awesome-swiper是基于swiper4，有很多配置option已经变了，最为明显的就是原来的key-value格式&lt;strong&gt;&lt;em&gt;autoplay: true&lt;/em&gt;&lt;/strong&gt;,现在已经变成了下面这样的json格式：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs css&quot;&gt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;autoplay&lt;/span&gt;:{&lt;br/&gt;&lt;span class=&quot;hljs-attribute&quot;&gt;enabled&lt;/span&gt;: true,&lt;br/&gt;disableOnInteraction: false,&lt;br/&gt;delay: &lt;span class=&quot;hljs-number&quot;&gt;3000&lt;/span&gt;&lt;br/&gt;},&lt;br/&gt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;pagination&lt;/span&gt;: {&lt;br/&gt;&lt;span class=&quot;hljs-attribute&quot;&gt;el&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;'.pagination'&lt;/span&gt;&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;下图为证：&lt;/p&gt;
&lt;img title=&quot;官网上的图&quot; src=&quot;https://mmbiz.qpic.cn/mmbiz_png/YoPjibEwXiacnGM8nbnAgKoeJXbCpWpMq7r8WveXXqB3TccIGt2ibYAaoOfibIsRHHWwN3usqQtqTdgialWhicj9wZuA/0?wx_fmt=png&quot; alt=&quot;官网上的图&quot;/&gt;官网上的图&lt;br/&gt;配置好以后应该是可以轮播了，还有就是SPA如果不是多个轮播的话没必要全局引这个，

&lt;pre&gt;
&lt;code class=&quot;hljs coffeescript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; VueAwesomeSwiper &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;'vue-awesome-swiper'&lt;/span&gt;;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;'swiper/dist/css/swiper.css'&lt;/span&gt;;&lt;br/&gt;Vue.use(VueAwesomeSwiper);&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;只需要在封装好的轮播组件内引入以下这个就够了。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs coffeescript&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; { swiper, swiperSlide } &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;'vue-awesome-swiper'&lt;/span&gt;;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;'swiper/dist/css/swiper.css'&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;这个的话其一就是因为上面提到的配置option格式变了，其二是需要在pagination 的div盒子里增加slot=&quot;pagination&quot;用来分发，这两个都没问题的话应该就OK了。&lt;/p&gt;
&lt;h3 id=&quot;h3&quot;&gt;&lt;span&gt;3. 轮播第二次开始后第一张图一闪而过&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;这个问题困扰了我好久，百度了很久也没找到有用的线索，今天早上去了公司心里想这个问题必须解决啊，要不体验也太差了，所以直接Google一下吧，第一个答案就是vue-awesome-swiper的GitHub上的issue，一看原来早已有人遇到了类似的问题，作者给出的解释是由于vue特殊的渲染机制导致数据没有完全返回时swiper已经初始化了，现在解决的方法是加v-if=“data.length”,保证数据完全返回了才开始渲染swiper，这样总算是解决了，体验马上好极啦！之前由于英文不好所以一般有问题都是百度，最近发现同事有问题都是Google，今日一试果然是快准狠，以后要充分的利用好Google和StackOverFlow，提升效率不是一点半点哈！&lt;/p&gt;
&lt;h3 id=&quot;h4resizeundefined&quot;&gt;&lt;span&gt;4. resize()方法报错undefined&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;这个问题也是因为swiper4已经把resize变为一个object，它包含两个方法，我用了它的resizeHandler()方法，这样就OK了。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;技术在不断进步，插件在不断更新，以后遇到问题一定要先看原文档，解决问题多借助Google！&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
</description>
<pubDate>Wed, 04 Apr 2018 14:43:00 +0000</pubDate>
<dc:creator>新哥&amp;#183;lewis</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/lewiscutey/p/8719596.html</dc:identifier>
</item>
<item>
<title>Huginn实现自动通过slack推送豆瓣高分电影 - 天天_byconan</title>
<link>http://www.cnblogs.com/tiantianbyconan/p/8719444.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/tiantianbyconan/p/8719444.html</guid>
<description>&lt;p&gt;博客搬迁至&lt;a href=&quot;https://blog.wangjiegulu.com&quot; class=&quot;uri&quot;&gt;https://blog.wangjiegulu.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;RSS订阅：&lt;a href=&quot;https://blog.wangjiegulu.com/feed.xml&quot; class=&quot;uri&quot;&gt;https://blog.wangjiegulu.com/feed.xml&lt;/a&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;0.77319587628866&quot;&gt;
&lt;p&gt;&lt;strong&gt;原文链接&lt;/strong&gt;：&lt;a href=&quot;https://blog.wangjiegulu.com/2018/04/03/huginn_douban_high_score_movies_and_slack/&quot; class=&quot;uri&quot;&gt;https://blog.wangjiegulu.com/2018/04/03/huginn_douban_high_score_movies_and_slack/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote readability=&quot;4.3478260869565&quot;&gt;
&lt;p&gt;如果尚未安装 Huginn，可以参考&lt;a href=&quot;https://blog.wangjiegulu.com/2018/04/02/build_the_environment_for_huginn/&quot;&gt;这里&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;想象下以下场景：每当有正在上映的电影在豆瓣上的评分超过7.8分，则 huginn 自动编辑一条信息并通过 &lt;a href=&quot;https://slack.com&quot;&gt;&lt;code&gt;Slack&lt;/code&gt;&lt;/a&gt; （当然也可以用 telegram 等app）通知到我电脑或者手机上。收到信息后，点击不喜欢忽略，或者点击购票按钮直接进入到购票页面。甚至 Huginn 可以结合 &lt;code&gt;Google Calendar&lt;/code&gt; 查询你这几天的行程安排，推送高分电影信息的同时给你选择一个比较合适观看电影的时间点，购买好电影票后，huginn 又自动帮你把日程事件写入到 &lt;code&gt;Google Calendar&lt;/code&gt; 中，并设置提醒。是不是很酷？！&lt;/p&gt;
&lt;p&gt;Huginn 就如你的贴心管家，按照你的意愿自动帮你完成很多事情。&lt;/p&gt;
&lt;p&gt;我们先来实现 &lt;code&gt;每当有正在上映的电影在豆瓣上的评分超过7.8分，则给我推送 Slack 信息&lt;/code&gt; 这一部分需求。&lt;/p&gt;
&lt;p&gt;最后达到的效果如下：&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/5423194/38308823-d6afbb92-384a-11e8-8db6-4f6def8ff371.png&quot; width=&quot;300px&quot;/&gt;&lt;br/&gt;手机端效果&lt;/div&gt;
&lt;div&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/5423194/38308728-9a9ba6f2-384a-11e8-9cf5-541e828207e2.png&quot; width=&quot;600px&quot;/&gt;&lt;br/&gt;PC端效果&lt;/div&gt;
&lt;h2 id=&quot;创建-agents&quot;&gt;创建 Agents&lt;/h2&gt;
&lt;p&gt;首先进入 Huginn 首页（默认&lt;code&gt;localhost:3000&lt;/code&gt;），左上角进入 &lt;code&gt;Scenarios&lt;/code&gt;：&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/5423194/38248922-84a7d57e-377c-11e8-8073-443bd59fd2f1.png&quot; width=&quot;500px&quot;/&gt;&lt;/div&gt;
&lt;p&gt;我的理解：&lt;strong&gt;Scenario&lt;/strong&gt; 代表一种场景，一般会包含多个 &lt;strong&gt;agent&lt;/strong&gt;，一个 agent 表示进行一次事件的处理或者变换。拿我们现在的例子来说，&lt;strong&gt;自动通过slack推送豆瓣高分电影&lt;/strong&gt; 这一整个就是一个 &lt;code&gt;Scenario&lt;/code&gt;，但是这个 &lt;code&gt;Scenario&lt;/code&gt; 会有很多的 &lt;code&gt;agent&lt;/code&gt;s 组成，比如：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;有一个 agent 是用来从豆瓣网页获取当前上映中的所有电影和它们的分数等信息；&lt;/li&gt;
&lt;li&gt;一个 agent 是用来从第一个 agent 里面拿到的所有电影进行过滤，过滤的标准就是 &lt;code&gt;score &amp;gt; 7.8&lt;/code&gt;，&lt;/li&gt;
&lt;li&gt;还有一个 agent 是用来把过滤后的电影通过 slack 推送到我们手机上。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;看着跟 &lt;code&gt;RxJava&lt;/code&gt; 的观察者模式是不是很像？第一个从豆瓣页面拉取数据的过程就像是 &lt;code&gt;Observable&lt;/code&gt;，然后其它的 agent 就像很多的 &lt;code&gt;operator&lt;/code&gt; 用来把数据进行转换和变化，最终通知到 &lt;code&gt;subscriber&lt;/code&gt;，这里的 &lt;code&gt;subscriber&lt;/code&gt; 就是我们自己。我们通过 huginn 订阅了 &lt;code&gt;豆瓣高分电影&lt;/code&gt;，就是这么简单。&lt;/p&gt;
&lt;p&gt;点击左下角的 &lt;code&gt;New Scenario&lt;/code&gt; 创建一个名为 &lt;code&gt;douban_high_score_movie&lt;/code&gt; 的 Scenario。&lt;/p&gt;
&lt;h3 id=&quot;创建获取数据-agent&quot;&gt;创建获取数据 agent&lt;/h3&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;第一个 agent 用来从豆瓣官网获取所有正在上映的电影&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在 &lt;code&gt;douban_high_score_movie&lt;/code&gt; 的 Scenario 中点击 &lt;code&gt;+ New Agent&lt;/code&gt; 来创建第一个 Agent。&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/5423194/38249853-b1eac0d4-377f-11e8-8242-022b28113653.png&quot; width=&quot;500px&quot;/&gt;&lt;/div&gt;
&lt;p&gt;如上图，你需要去决定你要创建的 agent 的类型（&lt;a href=&quot;https://github.com/huginn/huginn/wiki/Agent-Types-&amp;amp;-Descriptions&quot;&gt;这里&lt;/a&gt;是目前 Huginn 支持的所有的类型）。&lt;/p&gt;
&lt;p&gt;我们通过输入 &quot;web&quot; 来进行过滤选择 &lt;code&gt;Website Agent&lt;/code&gt;。&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/5423194/38283656-c5dc2f5a-37e9-11e8-8f3c-bd7d8d8d7c5e.png&quot; width=&quot;700px&quot;/&gt;&lt;/div&gt;
&lt;p&gt;上图，左边是我们需要去配置的地方；右边是每个设置对应的说明。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Name：&lt;/strong&gt;给这个 agent 取个名字，我们这里取名为 &lt;code&gt;step1_get_douban_playing_movies&lt;/code&gt;，表示这个 agent 是 &lt;code&gt;douban_high_score_movie&lt;/code&gt; 这个 Scenario 的第一步，是用来从豆瓣获取当前正在上映的所有电影。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Schedule：&lt;/strong&gt;表示调度周期，表示在什么时候自动执行这个 agent，比如 &lt;code&gt;Every 1d&lt;/code&gt; 表示每一天执行一次、&lt;code&gt;Every 2h&lt;/code&gt; 表示每2小时执行一次、&lt;code&gt;8pm&lt;/code&gt; 表示每天下午8点执行等等；这里我们选择 &lt;code&gt;3pm&lt;/code&gt;，每天下午3点执行一次。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Keep events：&lt;/strong&gt;表示事件保留的时间；比如我们从豆瓣上获取到所有上映的电影，每一部电影信息都是一个 event，Huginn会把这些 event 保留在本地，你可以通过这个参数来设置这些 events 在本地保留多少时间，超过这个时间，Huginn会把数据清除。我们这里设置1小时（为什么只设置为1小时，&lt;a href=&quot;http://www.cnblogs.com/tiantianbyconan/p/8719444.html#keep_useless&quot;&gt;下面我们会再讨论&lt;/a&gt;）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Sources：&lt;/strong&gt;表示这个 agent 处理的数据来源是哪个 agent。我们现在创建的 agent 是第一个 agent，是从豆瓣网站上获取正在上映的所有电影，所以不需要从其他 agent 传递数据（也就是上面说的 events）过来，所以这个留空。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Receivers：&lt;/strong&gt;表示这个 agent 处理完数据之后把这些数据传入到哪个 agent。还是用 &lt;code&gt;RxJava&lt;/code&gt; 做类比，因为每个 agnet 都有可能只是整个观察者模式中的一个操作符，用来转化数据，数据转化完之后，可能还需要其他 agent 把这些数据做进一步的转化。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Scenarios：&lt;/strong&gt;表示这个 agent 是数据哪个 Scenario 的。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Options：&lt;/strong&gt;这个非常关键，就是通过这个配置文件（JSON）来进行网络请求和豆瓣电影数据解析相关的操作的，这个我们重点讲下。&lt;/li&gt;
&lt;/ul&gt;&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;strong&gt;注意：&lt;/strong&gt;以上没提到的配置可以留空&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;options-配置&quot;&gt;Options 配置&lt;/h4&gt;
&lt;p&gt;Options 配置其实就是一个 JSON 文件。Website Agent 的 Options 主要的元素有如下：&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/5423194/38284371-684365f8-37ed-11e8-8125-b94a2a35e12b.png&quot; width=&quot;500px&quot;/&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;url：&lt;/strong&gt;网站地址，表示我需要从哪个网站获取数据，现在我们是从豆瓣，所以需要输入豆瓣正在上映的网址，这里我们输入 &lt;code&gt;https://movie.douban.com/cinema/nowplaying/hangzhou/&lt;/code&gt;，当然最后一个地点可以根据你的常驻地点做相应的修改。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;type：&lt;/strong&gt;数据解析的类型，支持的类型有 &lt;code&gt;xml&lt;/code&gt;、&lt;code&gt;html&lt;/code&gt;、&lt;code&gt;json&lt;/code&gt;、&lt;code&gt;text&lt;/code&gt; 四种，当前豆瓣网址返回的当然是 html 了，所以这里我们填写 &lt;code&gt;html&lt;/code&gt;。如果其他场景，比如 调用第三方开放的 api，返回的类型可能就是 &lt;code&gt;json&lt;/code&gt; 或者 &lt;code&gt;xml&lt;/code&gt;了。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;mode：&lt;/strong&gt;表示获取数据的模式，我们这里选择 &lt;code&gt;on_change&lt;/code&gt;。
&lt;ul&gt;&lt;li&gt;on_change：在数据有更改时才会获取作为 events。&lt;/li&gt;
&lt;li&gt;merge：把新数据和输入的数据进行合并。&lt;/li&gt;
&lt;li&gt;all：获取所有数据。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;extract：&lt;/strong&gt;用来配置（JSON）从这个网站解析出真正我们想要的数据。如果 &lt;code&gt;type&lt;/code&gt; 是 &lt;code&gt;html&lt;/code&gt;，则每个数据通过 &lt;code&gt;css&lt;/code&gt; 选择器或者 &lt;code&gt;xpath&lt;/code&gt; 来解析出真正的数据。&lt;/li&gt;
&lt;/ul&gt;&lt;blockquote readability=&quot;4.7256637168142&quot;&gt;
&lt;p&gt;&lt;strong&gt;注意：&lt;/strong&gt; &lt;code&gt;on_change&lt;/code&gt; 这个设置在我们现在的场景下其实用处不大，这个&lt;a href=&quot;http://www.cnblogs.com/tiantianbyconan/p/8719444.html#keep_useless&quot;&gt;下面我们会再讨论&lt;/a&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;最后的 options 如下：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;31&quot;&gt;
&lt;pre class=&quot;sourceCode json&quot;&gt;
&lt;code class=&quot;sourceCode json&quot;&gt;&lt;span class=&quot;fu&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;&quot;expected_update_period_in_days&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;2&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;&quot;url&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;https://movie.douban.com/cinema/nowplaying/hangzhou/&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;html&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;&quot;mode&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;on_change&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;&quot;extract&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;title&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;dt&quot;&gt;&quot;css&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;li[@data-category='nowplaying']&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;dt&quot;&gt;&quot;value&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;@data-title&quot;&lt;/span&gt;
    &lt;span class=&quot;fu&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;score&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;dt&quot;&gt;&quot;css&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;li[@data-category='nowplaying']&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;dt&quot;&gt;&quot;value&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;@data-score&quot;&lt;/span&gt;
    &lt;span class=&quot;fu&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;star&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;dt&quot;&gt;&quot;css&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;li[@data-category='nowplaying']&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;dt&quot;&gt;&quot;value&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;@data-star&quot;&lt;/span&gt;
    &lt;span class=&quot;fu&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;release&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;dt&quot;&gt;&quot;css&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;li[@data-category='nowplaying']&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;dt&quot;&gt;&quot;value&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;@data-release&quot;&lt;/span&gt;
    &lt;span class=&quot;fu&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;region&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;dt&quot;&gt;&quot;css&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;li[@data-category='nowplaying']&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;dt&quot;&gt;&quot;value&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;@data-region&quot;&lt;/span&gt;
    &lt;span class=&quot;fu&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;actors&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;dt&quot;&gt;&quot;css&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;li[@data-category='nowplaying']&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;dt&quot;&gt;&quot;value&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;@data-actors&quot;&lt;/span&gt;
    &lt;span class=&quot;fu&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;director&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;dt&quot;&gt;&quot;css&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;li[@data-category='nowplaying']&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;dt&quot;&gt;&quot;value&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;@data-director&quot;&lt;/span&gt;
    &lt;span class=&quot;fu&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;detail_url&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;dt&quot;&gt;&quot;css&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;li[@data-category='nowplaying']/ul/li/a[@data-psource='poster']&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;dt&quot;&gt;&quot;value&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;@href&quot;&lt;/span&gt;
    &lt;span class=&quot;fu&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;image_url&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;dt&quot;&gt;&quot;css&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;li[@data-category='nowplaying']/ul/li/a[@data-psource='poster']/img&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;dt&quot;&gt;&quot;value&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;@src&quot;&lt;/span&gt;
    &lt;span class=&quot;fu&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;fu&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;fu&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;以上可以看出，我们从豆瓣的每部电影中获取了以下信息：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;title：电影名字&lt;/li&gt;
&lt;li&gt;score：电影分数，满分10分&lt;/li&gt;
&lt;li&gt;star：电影分数，满分50分&lt;/li&gt;
&lt;li&gt;release：上映日期&lt;/li&gt;
&lt;li&gt;region：地区&lt;/li&gt;
&lt;li&gt;actors：演员&lt;/li&gt;
&lt;li&gt;director：导演&lt;/li&gt;
&lt;li&gt;detail_url：详细 url&lt;/li&gt;
&lt;li&gt;image_url：电影封面&lt;/li&gt;
&lt;/ul&gt;&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;&lt;strong&gt;注意：&lt;/strong&gt;获取具体 xpath 比较简单的方法：通过 chrome 右键的 &lt;code&gt;inspect&lt;/code&gt; 来复制拿到。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;以上配置完毕后，点击下面的 &lt;code&gt;Dry Run&lt;/code&gt;，应该就会出现以下页面&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/5423194/38285255-f7211d02-37f1-11e8-84ee-c6b74401094e.png&quot; width=&quot;650px&quot;/&gt;&lt;/div&gt;
&lt;p&gt;最后进行保存。第一个 agent 就创建完毕了。&lt;/p&gt;
&lt;p&gt;同时，这个 agent 在运行的过程中会生成以下 events：&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/5423194/38285762-5520c52c-37f4-11e8-9db5-ffa0f1116924.png&quot; width=&quot;700px&quot;/&gt;&lt;/div&gt;
&lt;h3 id=&quot;创建过滤-agnet&quot;&gt;创建过滤 agnet&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;step1_get_douban_playing_movies&lt;/code&gt; 把所有正在上映的电影数据从豆瓣上拉取下来并解析好，生成一个个 events。然后我们第二个 agent 就需要从这些 events 里面进行过滤筛选出所有分数大于 &lt;code&gt;7.8&lt;/code&gt;（具体的标准可以自己定） 的电影。相当于 RxJava 的 filter 操作符吧。&lt;/p&gt;
&lt;p&gt;同样创建 agent，选择为 &lt;code&gt;TriggerAgent&lt;/code&gt;，名字为 &lt;code&gt;step2_pick_high_score_movies&lt;/code&gt;。这是把 &lt;strong&gt;Sources&lt;/strong&gt; 填写为第一个 agent 的名字，即 &lt;code&gt;step1_get_douban_playing_movies&lt;/code&gt;，表示我要创建的 agent 处理的数据（events）是从 &lt;code&gt;step1_get_douban_playing_movies&lt;/code&gt; 来的。&lt;/p&gt;
&lt;p&gt;然后重点还是在 Options 中&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;keep_event：&lt;/strong&gt;表示是否把我从 &lt;code&gt;step1_get_douban_playing_movies&lt;/code&gt; 这个 agent 收到的 events 原封不动地再传给下一个 agent（下一个 agent 我们还没创建），我们设置为 true。因为下一个 agent 我们是用来把数据通过 slack 发送到给我们自己的，那肯定需要第一个 agent 中获取到的例如电影名字、分数等信息。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;rules：&lt;/strong&gt;表示我们过滤的规则，可以多个，具体下面说。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;must_match：&lt;/strong&gt;表示 rules 中我必须要满足几个规则，如果是1，则意味着 rules 中所有的规则是或关系（只要满足 rules 中的1个规则即可）；默认不填写的话是&lt;strong&gt;必须要满足 rules 中所有的规则。&lt;/strong&gt;，因为我们这里只需要满足一个分数大于7.8就可以，所以可以不填写。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;最后 Options 的配置如下：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;14&quot;&gt;
&lt;pre class=&quot;sourceCode json&quot;&gt;
&lt;code class=&quot;sourceCode json&quot;&gt;&lt;span class=&quot;fu&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;&quot;expected_receive_period_in_days&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;2&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;&quot;keep_event&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;true&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;&quot;rules&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;fu&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;dt&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;field&amp;gt;=value&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;dt&quot;&gt;&quot;value&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;7.8&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;dt&quot;&gt;&quot;path&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;$.score&quot;&lt;/span&gt;
    &lt;span class=&quot;fu&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;ot&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;&quot;message&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;Looks like your pattern matched in '{{value}}'!&quot;&lt;/span&gt;
&lt;span class=&quot;fu&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如上，在 &lt;strong&gt;rules&lt;/strong&gt; 中添加一个规则，&lt;strong&gt;type&lt;/strong&gt; 表示匹配规则，&lt;code&gt;field&amp;gt;=value&lt;/code&gt;：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;field&lt;/strong&gt;: 通过下面 path 从 events 匹配出来的数据，这里是 &lt;code&gt;$.score&lt;/code&gt;，所以表示的是电影的分数；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt;：表示下面 json 的 &lt;code&gt;value&lt;/code&gt; 字段的值，这里为 &lt;code&gt;7.8&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;通过简单的表达式 &lt;code&gt;field&amp;gt;=value&lt;/code&gt; 来设定匹配规则：电影分数 &amp;gt;= 7.8分。&lt;/p&gt;
&lt;p&gt;至此，第二个 agent 创建完毕。&lt;/p&gt;
&lt;p&gt;你同样可以通过下面的 &lt;code&gt;Dry Run&lt;/code&gt; 来进行测试，测试时因为有 &lt;code&gt;Sources&lt;/code&gt;，需要你构造一些假数据作为输入来运行。&lt;/p&gt;
&lt;h3 id=&quot;创建去重-agnet&quot;&gt;创建去重 agnet&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;step2_pick_high_score_movies&lt;/code&gt;用来把 &lt;code&gt;step1_get_douban_playing_movies&lt;/code&gt; 中从豆瓣官网获取的电影信息进行高分的过滤（分数&amp;gt;=7.8）。&lt;/p&gt;
&lt;p&gt;我们还需要创建一个去重的 agent，来避免重复给我们自己推送高分电影（因为我们现在获取的频率是每天进行获取检测，但是电影总不可能是每部电影只上映一天吧，第二天获取的时候肯定有第一天获取的数据）。&lt;/p&gt;
&lt;p&gt;这里大家可能会有个问题，因为我们在配置第一个 agent 的时候，已经把 &lt;code&gt;mode&lt;/code&gt; 已经设置为 &lt;code&gt;on_change&lt;/code&gt; 了，为什么还是会有重复数据呢？因为这里的电影信息中，有诸如 &lt;code&gt;分数&lt;/code&gt; 这类的数据，这些数据是随时可能会有变化的，虽然是同一个电影，但是分数从 &lt;code&gt;8.1&lt;/code&gt; 上升到 &lt;code&gt;8.2&lt;/code&gt;，那 Huginn 也会认为满足了 &lt;code&gt;on_change&lt;/code&gt; 条件，所以会造成重复推送。所以，我们还需要单独做去重处理。&lt;/p&gt;

&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;&lt;strong&gt;注意：&lt;/strong&gt; 之前提到过 &lt;code&gt;on_change&lt;/code&gt; 等设置在第一个 agent 其实用处不大，同样也是由于上面说的原因，我们也不知道同样的电影什么时候分数会发生变化，就算用了 &lt;code&gt;on_change&lt;/code&gt;，也可能会把之前获取过的数据拿到。所以第一个 agent 的 keep_event 设置的时间比较短，因为这些 events 提供给 &lt;code&gt;on_change&lt;/code&gt; 匹配意义不大，所以还是节省空间，设置短一点。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;创建 agent，type 选择 &lt;code&gt;DeDuplicationAgent&lt;/code&gt;，名字取为 &lt;code&gt;step2_1_deduplication_high_score_movies&lt;/code&gt;，&lt;strong&gt;Sources&lt;/strong&gt; 填写为上一个 agent 的名字，即 &lt;code&gt;step2_pick_high_score_movies&lt;/code&gt;。&lt;/p&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;&lt;strong&gt;注意：&lt;/strong&gt;这里 &lt;strong&gt;keep_event&lt;/strong&gt; 设置了90天，因为一旦经过我们这个 agent 去重后，events 假设保留1小时，那下一天我再去获取所有上映的电影并高分过滤后，因为昨天的数据（events）已经被清空了，所以就没办法做比较去重了，所以会导致重复数据。所以这里保存时间应该要&amp;gt;=电影上映的时长，所以这里设置为90天，即3个月左右。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;DeDuplicationAgent 的 Options 填写就比较简单了&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/5423194/38286554-8fa7b166-37f8-11e8-9d8b-601bf37c895e.png&quot; width=&quot;500px&quot;/&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Property：&lt;/strong&gt;填写你要去重依据的字段，我们这里根据电影名字来去重，也就是 &lt;code&gt;title&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Lookback：&lt;/strong&gt;表示去重的时候跟之前的多少条历史 events 做比较，同一时期一起上映的电影应该不会超过100部，所以设置为100了。&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;创建-slack-通知的-agent&quot;&gt;创建 slack 通知的 agent&lt;/h3&gt;
&lt;p&gt;Huginn 自带有一个 &lt;code&gt;SlackAgent&lt;/code&gt;，用来发送 slack 消息。&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/5423194/38287159-d1b96f10-37fb-11e8-835f-0b9e620ab075.png&quot; width=&quot;700px&quot;/&gt;&lt;/div&gt;
&lt;p&gt;它使用了 &lt;a href=&quot;https://api.slack.com/incoming-webhooks&quot;&gt;incoming-webhooks&lt;/a&gt; 来实现消息的发送。&lt;/p&gt;
&lt;p&gt;但是为了有更多的可玩性，我们这里选择，自己创建一个 &lt;code&gt;slack app&lt;/code&gt;，然后通过它的 open api 实现。&lt;/p&gt;
&lt;p&gt;因此，我们需要创建一个 &lt;code&gt;PostAgent&lt;/code&gt;。但是在此之前我们先来配置好 Slack 环境。&lt;/p&gt;
&lt;h4 id=&quot;配置-slack-环境&quot;&gt;配置 Slack 环境&lt;/h4&gt;
&lt;p&gt;安装 Slack：&lt;a href=&quot;https://slack.com&quot; class=&quot;uri&quot;&gt;https://slack.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;创建自己的 workspace（单独创建一个自己私有的，注意不要使用公司、团队的 workspace），比如我的是 &lt;code&gt;https://wangjie.slack.com&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;在自己私有的 workspace 中创建一个私有的 channel：&lt;code&gt;#huginn-movie&lt;/code&gt;&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/5423194/38288443-62b02016-3803-11e8-8733-ded2ac3b535b.png&quot; width=&quot;300px&quot;/&gt;&lt;/div&gt;
&lt;p&gt;这个 channel 就是用来接收高分电影的数据了，当然你也可以使用 &lt;code&gt;#general&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;然后我们创建一个自己的 app，用来发送电影信息。进入 &lt;a href=&quot;https://api.slack.com/&quot; class=&quot;uri&quot;&gt;https://api.slack.com/&lt;/a&gt;&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/5423194/38288591-4f2cf702-3804-11e8-9b96-fe8561c21e9c.png&quot; width=&quot;300px&quot;/&gt;&lt;/div&gt;
&lt;p&gt;点击 &lt;code&gt;Start Building&lt;/code&gt;，&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/5423194/38288667-a0cc323a-3804-11e8-9a7d-6da84babc266.png&quot; width=&quot;500px&quot;/&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;App Name：&lt;/strong&gt;可以随意填写&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Development Slack Workspace：&lt;/strong&gt;选择你刚刚创建的私有的 workspace&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;在 &lt;code&gt;Add features and functionality&lt;/code&gt; 中点击 &lt;code&gt;Permissions&lt;/code&gt; 进入权限配置。&lt;/p&gt;
&lt;p&gt;在 &lt;code&gt;Scope&lt;/code&gt; 中添加如下权限：&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/5423194/38288837-a0438740-3805-11e8-821e-5e91a1bf401e.png&quot; width=&quot;550px&quot;/&gt;&lt;/div&gt;
&lt;p&gt;添加完以上所有权限后，点击保存，然后重新打开 &lt;code&gt;Permissions&lt;/code&gt;，点击下面按钮安装我们的这个 app 到 slack。&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/5423194/38288942-31655e06-3806-11e8-92af-63c67f778570.png&quot; width=&quot;550px&quot;/&gt;&lt;/div&gt;
&lt;p&gt;&lt;span id=&quot;slack_token&quot;/&gt;&lt;br/&gt;安装完毕之后，再次进入 &lt;code&gt;Permissions&lt;/code&gt;，拷贝 &lt;code&gt;OAuth Access Token&lt;/code&gt;：&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/5423194/38289144-4ad7c56c-3807-11e8-9599-4e64dd704258.png&quot; width=&quot;550px&quot;/&gt;&lt;/div&gt;
&lt;p&gt;然后，我们就可以使用我们的 token 来访问 slack 的 open api 了，具体文档在这里：&lt;a href=&quot;https://api.slack.com/web&quot; class=&quot;uri&quot;&gt;https://api.slack.com/web&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;我们需要的发送消息到 &lt;code&gt;#huginn-movie&lt;/code&gt; channel 的接口文档：&lt;br/&gt;&lt;a href=&quot;https://api.slack.com/methods/chat.postMessage&quot; class=&quot;uri&quot;&gt;https://api.slack.com/methods/chat.postMessage&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;有了 api 文档，有了 token，一切就好办了。&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/5423194/38289564-69cd36bc-3809-11e8-820f-8f7cddaf64cb.png&quot; width=&quot;650px&quot;/&gt;&lt;/div&gt;
&lt;p&gt;由上述文档，我们可以通过 post 请求，把我们要发送的电影信息封装到 &lt;code&gt;attachments&lt;/code&gt; 参数中执行请求即可。&lt;/p&gt;
&lt;p&gt;而且 &lt;code&gt;attachments&lt;/code&gt; 参数可以参考文档 &lt;a href=&quot;https://api.slack.com/docs/message-attachments&quot; class=&quot;uri&quot;&gt;https://api.slack.com/docs/message-attachments&lt;/a&gt; 来封装信息。&lt;/p&gt;
&lt;p&gt;Slack 环境一切就绪，接下来，回到 Huginn。&lt;/p&gt;
&lt;h4 id=&quot;创建-agent-发送-slack-消息&quot;&gt;创建 Agent 发送 Slack 消息&lt;/h4&gt;
&lt;p&gt;创建 &lt;code&gt;PostAgent&lt;/code&gt;（注意，不是 &lt;code&gt;SlackAgent&lt;/code&gt;），取名为 &lt;code&gt;step3_high_score_movies_to_slack_post&lt;/code&gt;。&lt;strong&gt;Sources&lt;/strong&gt; 填写为 &lt;code&gt;step2_1_deduplication_high_score_movies&lt;/code&gt;，因为这个 agent 需要把去重后的电影信息通过 slack 发送给我们。&lt;/p&gt;
&lt;p&gt;最终的 Options 配置如下：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;50&quot;&gt;
&lt;pre class=&quot;sourceCode json&quot;&gt;
&lt;code class=&quot;sourceCode json&quot;&gt;&lt;span class=&quot;fu&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;&quot;post_url&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;{% credential slack_huginn_url_post_message %}&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;&quot;expected_receive_period_in_days&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;1&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;&quot;content_type&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;json&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;&quot;method&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;post&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;&quot;payload&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;channel&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;huginn-movie&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;username&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;Douban Movie&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;icon_url&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;https://img3.doubanio.com/pics/douban-icons/favicon_48x48.png&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;attachments&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;[&lt;/span&gt;
      &lt;span class=&quot;fu&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;&quot;fallback&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;Required plain-text summary of the attachment.&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;&quot;mrkdwn_in&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;[&lt;/span&gt;
          &lt;span class=&quot;st&quot;&gt;&quot;text&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;st&quot;&gt;&quot;pretext&quot;&lt;/span&gt;
        &lt;span class=&quot;ot&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;&quot;color&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;#36a64f&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;&quot;pretext&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;Hi~ &amp;lt;@{% credential  slack_at_user_id %}&amp;gt;, There is *high score* movie.&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;&quot;author_name&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;{{director}}&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;&quot;author_link&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;{{detail_url}}&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;&quot;author_icon&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;&quot;title&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;《{{title}}》&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;&quot;title_link&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;{{detail_url}}&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;&quot;text&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;*Actors*: {{actors}}&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;&quot;fields&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;[&lt;/span&gt;
          &lt;span class=&quot;fu&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;dt&quot;&gt;&quot;title&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;Score&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;dt&quot;&gt;&quot;value&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;{{score}}&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;dt&quot;&gt;&quot;short&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;true&lt;/span&gt;
          &lt;span class=&quot;fu&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;fu&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;dt&quot;&gt;&quot;title&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;Star&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;dt&quot;&gt;&quot;value&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;{{star}}&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;dt&quot;&gt;&quot;short&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;true&lt;/span&gt;
          &lt;span class=&quot;fu&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;fu&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;dt&quot;&gt;&quot;title&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;Region&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;dt&quot;&gt;&quot;value&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;{{region}}&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;dt&quot;&gt;&quot;short&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;true&lt;/span&gt;
          &lt;span class=&quot;fu&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;fu&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;dt&quot;&gt;&quot;title&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;Release&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;dt&quot;&gt;&quot;value&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;{{release}}&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;dt&quot;&gt;&quot;short&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;true&lt;/span&gt;
          &lt;span class=&quot;fu&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;ot&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;&quot;image_url&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;&quot;thumb_url&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;{{image_url}}&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;&quot;footer&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;Slack&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;&quot;footer_icon&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;https://platform.slack-edge.com/img/default_application_icon.png&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;&quot;ts&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;{{&lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;st&quot;&gt; | date: &lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;%s&lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;}}&quot;&lt;/span&gt;
      &lt;span class=&quot;fu&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;ot&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;fu&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;&quot;headers&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;Content-Type&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;application/json&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;&quot;Authorization&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;{% credential slack_huginn_token %}&quot;&lt;/span&gt;
  &lt;span class=&quot;fu&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;&quot;emit_events&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;false&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;&quot;no_merge&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;false&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;&quot;output_mode&quot;&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;clean&quot;&lt;/span&gt;
&lt;span class=&quot;fu&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;需要注意的是：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;{\% credential slack_huginn_url_post_message %\}&lt;/code&gt;：此类的表达式为 &lt;a href=&quot;https://github.com/huginn/huginn/wiki/Formatting-Events-using-Liquid&quot;&gt;Liquid-interpolated&lt;/a&gt;，具体的值配置在 &lt;code&gt;Credentials&lt;/code&gt; 中，可以理解为全局定义，在 &lt;code&gt;Credentials&lt;/code&gt; 中配置好 &lt;code&gt;key-value&lt;/code&gt; 之后，可以在其它地方以诸如 &lt;code&gt;{\% credential key \%}&lt;/code&gt; 的方式来使用，这里不做过多介绍了。&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;&lt;li&gt;在消息中使用Slack 中的 &lt;code&gt;@&lt;/code&gt; 某人的功能时，需要拿到对应用户的 ID，可以的获取方式可以通过在 slack 中选中名字然后 &lt;code&gt;Copy link&lt;/code&gt; 的方式拿到用户链接，用户连接的最后就是 ID。&lt;/li&gt;
&lt;/ul&gt;&lt;div&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/5423194/38290017-c49db6c8-380b-11e8-817c-bbd1aa25396e.png&quot; width=&quot;300px&quot;/&gt;&lt;/div&gt;
&lt;p&gt;保存该 Agent，至此，所需的所有的 Agent 都已经创建完毕了。&lt;/p&gt;
&lt;h2 id=&quot;总结&quot;&gt;总结&lt;/h2&gt;
&lt;p&gt;整个 Scenario 的事件流程图如下：&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/5423194/38290316-44ee5e12-380d-11e8-9da2-d6d995fb3e1a.png&quot; width=&quot;300px&quot;/&gt;&lt;/div&gt;
&lt;p&gt;Huginn 还支持公开你创建的 Scenario，提供给其它人使用，以上的代码也已经公开：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://h.wangjiegulu.com/scenarios/8/export.json&quot; class=&quot;uri&quot;&gt;http://h.wangjiegulu.com/scenarios/8/export.json&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;大家可以直接下载使用，不过需要在 &lt;code&gt;Credentials&lt;/code&gt; 中配置如下参数：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;slack_huginn_token：&lt;/strong&gt;你创建的 Slack App 的 OAuth Access Token，具体方式可以参考&lt;a href=&quot;http://www.cnblogs.com/tiantianbyconan/p/8719444.html#slack_token&quot;&gt;这里&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;slack_at_user_id：&lt;/strong&gt;你需要 @ 的 slack 用户 ID，填写你自己的，拿到你 ID 的方式可以参考&lt;a href=&quot;http://www.cnblogs.com/tiantianbyconan/p/8719444.html#slack_at_anyone&quot;&gt;这里&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;slack_huginn_url_post_message：&lt;/strong&gt;填写 &lt;code&gt;https://slack.com/api/chat.postMessage&lt;/code&gt; 即可。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;除了以上例子，Huginn 还可以完成更多奇思妙想，限制你的只有你的想象力。&lt;/p&gt;
</description>
<pubDate>Wed, 04 Apr 2018 13:52:00 +0000</pubDate>
<dc:creator>天天_byconan</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/tiantianbyconan/p/8719444.html</dc:identifier>
</item>
<item>
<title>New UWP Community Toolkit - AdaptiveGridView - shaomeng</title>
<link>http://www.cnblogs.com/shaomeng/p/8695814.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/shaomeng/p/8695814.html</guid>
<description>&lt;p&gt;&lt;span&gt;概述&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;UWP Community Toolkit  中有一个自适应的 GridView 控件 - AdaptiveGridView，本篇我们结合代码详细讲解  AdaptiveGridView 的实现。&lt;/p&gt;
&lt;p&gt;AdaptiveGridView 控件能够以均匀分组的方式，让一组列填充整个显示空间，它可以对布局和内容的变化做出反应，以便自动适应不同的外观。我们来看一下官方示例的展示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/306530/201804/306530-20180402185228319-1476519466.jpg&quot; alt=&quot;&quot; height=&quot;500&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Source: &lt;a href=&quot;https://github.com/Microsoft/UWPCommunityToolkit/tree/master/Microsoft.Toolkit.Uwp.UI.Controls/AdaptiveGridView&quot; target=&quot;_blank&quot;&gt;https://github.com/Microsoft/UWPCommunityToolkit/tree/master/Microsoft.Toolkit.Uwp.UI.Controls/AdaptiveGridView&lt;/a&gt;&lt;a href=&quot;https://github.com/Microsoft/UWPCommunityToolkit/tree/master/Microsoft.Toolkit.Uwp.UI.Controls/RadialGauge&quot; target=&quot;_blank&quot;&gt;&lt;br/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Doc: &lt;a href=&quot;https://docs.microsoft.com/zh-cn/windows/uwpcommunitytoolkit/controls/adaptivegridview&quot; target=&quot;_blank&quot;&gt;https://docs.microsoft.com/zh-cn/windows/uwpcommunitytoolkit/controls/adaptivegridview&lt;/a&gt;&lt;a href=&quot;https://docs.microsoft.com/zh-cn/windows/uwpcommunitytoolkit/controls/radialgauge&quot; target=&quot;_blank&quot;&gt;&lt;br/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Namespace: &lt;em&gt;Microsoft.Toolkit.Uwp.UI.Controls&lt;/em&gt;; Nuget: &lt;em&gt;Microsoft.Toolkit.Uwp.UI.Controls&lt;/em&gt;;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;开发过程&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;代码分析&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;我们先来看看 AdaptiveGridView 控件的类构成：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;AdaptiveGridView.Properties.cs - AdaptiveGridView 控件的依赖属性类；&lt;/li&gt;
&lt;li&gt;AdaptiveGridView.cs - AdaptiveGridView 控件的定义和事件处理类；&lt;/li&gt;
&lt;li&gt;AdaptiveHeightValueConverter.cs - 自适应高度转换器，根据传入的 value: ItemHeight，以及 padding、margin 等参数得到自适应高度；&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/306530/201804/306530-20180402205226802-1927734180.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;1. AdaptiveGridView.Properties.cs&lt;/p&gt;
&lt;p&gt;AdaptiveGridView 控件的依赖属性类，包括了以下属性：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;ItemClickCommand - 元素点击命令&lt;/li&gt;
&lt;li&gt;ItemHeight - 元素高度&lt;/li&gt;
&lt;li&gt;ItemWidth - 元素宽度&lt;/li&gt;
&lt;li&gt;OneRowModeEnabled - 单行模式可用性标志，布尔值&lt;/li&gt;
&lt;li&gt;DesiredWidth - 元素的期望宽度&lt;/li&gt;
&lt;li&gt;StretchContentForSingleRow - 内容知否已经拉伸去填充一行，布尔值 &lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;另外类中还有一个方法 CalculateColumns(&lt;span class=&quot;pl-k&quot;&gt;&lt;span class=&quot;pl-smi&quot;&gt;containerWidth, &lt;span class=&quot;pl-k&quot;&gt;&lt;span class=&quot;pl-smi&quot;&gt;itemWidth), 根据容器宽度和元素宽度，确定控件应该包含几列，向下取整，最小值为 1；&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;2. AdaptiveGridView.cs&lt;/p&gt;
&lt;p&gt;AdaptiveGridView 类继承自 GridView 类， 先来看一下类结构：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/306530/201804/306530-20180403090012708-83554800.jpg&quot; alt=&quot;&quot; height=&quot;600&quot;/&gt;&lt;/p&gt;
&lt;p&gt;因为继承自 GridView 类，所以 AdaptiveGridView 重载了两个方法：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;PrepareContainerForItemOverride(d, item) - 准备特定的 element 去显示特定的 item；当 d 为 FrameworkElement 类型时，绑定 ItemWidth 和 ItemHeight 属性；当为 ContentControl 类型时，HorizontalContentAlignment 和 VerticalContentAlignment 设为 Stretch；&lt;/li&gt;
&lt;li&gt;OnApplyTemplate() - 针对单行的状态变化，调用 DetermineOneRowMode() 方法做显示的处理；&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt; 接下来看一下几个重要的事件处理方法：&lt;/p&gt;
&lt;p&gt;① RecalculateLayout(ActualWidth)&lt;/p&gt;
&lt;p&gt;RecalculateLayout(ActualWidth) 方法会在 item 数量变化，尺寸变化，控件尺寸变化等触发时调用，根据 panel 的 Margin 和 AdaptiveGridView 的 Padding 来调整 containerWidth，再调用 CalculateItemWidth(containerWidth) 方法计算得到 ItemWidth。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;private&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; RecalculateLayout(&lt;span&gt;double&lt;/span&gt;&lt;span&gt; containerWidth)
{
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; itemsPanel = ItemsPanelRoot &lt;span&gt;as&lt;/span&gt;&lt;span&gt; Panel;
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; panelMargin = itemsPanel != &lt;span&gt;null&lt;/span&gt; ?&lt;span&gt;
                        itemsPanel.Margin.Left &lt;/span&gt;+&lt;span&gt; itemsPanel.Margin.Right :
                        &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;;

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; width should be the displayable width&lt;/span&gt;
    containerWidth = containerWidth - Padding.Left - Padding.Right -&lt;span&gt; panelMargin;
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (containerWidth &amp;gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
    {
        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; newWidth =&lt;span&gt; CalculateItemWidth(containerWidth);
        ItemWidth &lt;/span&gt;=&lt;span&gt; Math.Floor(newWidth);
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;② CalculateItemWidth(containerWidth)&lt;/p&gt;
&lt;p&gt;计算 item 的宽度；根据 containerWidth 和 item 的 DesiredWidth 计算出控件的列数；如果需要针对单行模式调整，则调整列数为实际 item 数量；获取 ItemMargin，当 items 或 container 为空时，设置为需要 container 的 Margin；最后根据 每一列在 container 中的宽度，减掉 itemMargin，得到 itemWidth；&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;protected&lt;/span&gt; &lt;span&gt;virtual&lt;/span&gt; &lt;span&gt;double&lt;/span&gt; CalculateItemWidth(&lt;span&gt;double&lt;/span&gt;&lt;span&gt; containerWidth)
{
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (&lt;span&gt;double&lt;/span&gt;&lt;span&gt;.IsNaN(DesiredWidth))
    {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; DesiredWidth;
    }

    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; columns =&lt;span&gt; CalculateColumns(containerWidth, DesiredWidth);

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; If there's less items than there's columns, reduce the column count (if requested);&lt;/span&gt;
    &lt;span&gt;if&lt;/span&gt; (Items != &lt;span&gt;null&lt;/span&gt; &amp;amp;&amp;amp; Items.Count &amp;gt; &lt;span&gt;0&lt;/span&gt; &amp;amp;&amp;amp; Items.Count &amp;lt; columns &amp;amp;&amp;amp;&lt;span&gt; StretchContentForSingleRow)
    {
        columns &lt;/span&gt;=&lt;span&gt; Items.Count;
    }

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; subtract the margin from the width so we place the correct width for placement&lt;/span&gt;
    &lt;span&gt;var&lt;/span&gt; fallbackThickness = &lt;span&gt;default&lt;/span&gt;&lt;span&gt;(Thickness);
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; itemMargin = AdaptiveHeightValueConverter.GetItemMargin(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;, fallbackThickness);
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (itemMargin ==&lt;span&gt; fallbackThickness)
    {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; No style explicitly defined, or no items or no container for the items
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; We need to get an actual margin for proper layout&lt;/span&gt;
        _needContainerMarginForLayout = &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
    }

    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; (containerWidth / columns) - itemMargin.Left -&lt;span&gt; itemMargin.Right;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;③ DetermineOneRowMode()&lt;/p&gt;
&lt;p&gt;单行模式和多行模式切换时的处理；当单行时，把 MaxHeight 属性设置为 ItemHeight，Orientation 设为纵向，滚动设置包括纵向滚动禁止，隐藏滚动条，横向滚动可用；如果为多行模式，则根据保存的 Orientation 和 滚动条属性恢复显示；&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;47&quot;&gt;
&lt;pre&gt;
&lt;span&gt;private&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; DetermineOneRowMode()
{
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (_isLoaded)
    {
        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; itemsWrapGridPanel = ItemsPanelRoot &lt;span&gt;as&lt;/span&gt;&lt;span&gt; ItemsWrapGrid;

        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (OneRowModeEnabled)
        {
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; b = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Binding()
            {
                Source &lt;/span&gt;= &lt;span&gt;this&lt;/span&gt;&lt;span&gt;,
                Path &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; PropertyPath(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ItemHeight&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;),
                Converter &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; AdaptiveHeightValueConverter(),
                ConverterParameter &lt;/span&gt;= &lt;span&gt;this&lt;/span&gt;&lt;span&gt;
            };

            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (itemsWrapGridPanel != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
            {
                _savedOrientation &lt;/span&gt;=&lt;span&gt; itemsWrapGridPanel.Orientation;
                itemsWrapGridPanel.Orientation &lt;/span&gt;=&lt;span&gt; Orientation.Vertical;
            }

            SetBinding(MaxHeightProperty, b);

            _savedHorizontalScrollMode &lt;/span&gt;= ScrollViewer.GetHorizontalScrollMode(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;);
            _savedVerticalScrollMode &lt;/span&gt;= ScrollViewer.GetVerticalScrollMode(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;);
            _savedHorizontalScrollBarVisibility &lt;/span&gt;= ScrollViewer.GetHorizontalScrollBarVisibility(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;);
            _savedVerticalScrollBarVisibility &lt;/span&gt;= ScrollViewer.GetVerticalScrollBarVisibility(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;);
            _needToRestoreScrollStates &lt;/span&gt;= &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;

            ScrollViewer.SetVerticalScrollMode(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;, ScrollMode.Disabled);
            ScrollViewer.SetVerticalScrollBarVisibility(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;, ScrollBarVisibility.Hidden);
            ScrollViewer.SetHorizontalScrollBarVisibility(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;, ScrollBarVisibility.Visible);
            ScrollViewer.SetHorizontalScrollMode(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;, ScrollMode.Enabled);
        }
        &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;
        {
            ClearValue(MaxHeightProperty);

            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;_needToRestoreScrollStates)
            {
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
            }

            _needToRestoreScrollStates &lt;/span&gt;= &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;

            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (itemsWrapGridPanel != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
            {
                itemsWrapGridPanel.Orientation &lt;/span&gt;=&lt;span&gt; _savedOrientation;
            }

            ScrollViewer.SetVerticalScrollMode(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;, _savedVerticalScrollMode);
            ScrollViewer.SetVerticalScrollBarVisibility(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;, _savedVerticalScrollBarVisibility);
            ScrollViewer.SetHorizontalScrollBarVisibility(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;, _savedHorizontalScrollBarVisibility);
            ScrollViewer.SetHorizontalScrollMode(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;, _savedHorizontalScrollMode);
        }
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;④ OnSizeChanged(sender, e)&lt;/p&gt;
&lt;p&gt;在尺寸变化时，如果横向不是拉伸状态，则需要计算变化前后的列数是否有变化，如果有变化则重新计算布局；如果是拉伸状态，则尺寸变化时直接重新计算布局；&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;private&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; OnSizeChanged(&lt;span&gt;object&lt;/span&gt;&lt;span&gt; sender, SizeChangedEventArgs e)
{
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; If we are in center alignment, we only care about relayout if the number of columns we can display changes
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Fixes #1737&lt;/span&gt;
    &lt;span&gt;if&lt;/span&gt; (HorizontalAlignment !=&lt;span&gt; HorizontalAlignment.Stretch)
    {
        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; prevColumns =&lt;span&gt; CalculateColumns(e.PreviousSize.Width, DesiredWidth);
        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; newColumns =&lt;span&gt; CalculateColumns(e.NewSize.Width, DesiredWidth);

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; If the width of the internal list view changes, check if more or less columns needs to be rendered.&lt;/span&gt;
        &lt;span&gt;if&lt;/span&gt; (prevColumns !=&lt;span&gt; newColumns)
        {
            RecalculateLayout(e.NewSize.Width);
        }
    }
    &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (e.PreviousSize.Width !=&lt;span&gt; e.NewSize.Width)
    {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; We need to recalculate width as our size changes to adjust internal items.&lt;/span&gt;
&lt;span&gt;        RecalculateLayout(e.NewSize.Width);
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;3. AdaptiveHeightValueConverter.cs&lt;/p&gt;
&lt;p&gt;自适应高度转换器，单向转换，根据传入的 value: ItemHeight，以及 padding、margin 等参数得到自适应高度；转换只在 OneRowMode 时使用，作用是把原高度，加上 padding 和 margin 变成新的高度，效果就是单行模式时，元素在高度上没有空隙；设置的 Item padding 和 margin 会失效；&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;object&lt;/span&gt; Convert(&lt;span&gt;object&lt;/span&gt; value, Type targetType, &lt;span&gt;object&lt;/span&gt; parameter, &lt;span&gt;string&lt;/span&gt;&lt;span&gt; language)
{
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (value != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
    {
        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; gridView =&lt;span&gt; (GridView)parameter;
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (gridView == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
        {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; value;
        }

        &lt;/span&gt;&lt;span&gt;double&lt;/span&gt;.TryParse(value.ToString(), &lt;span&gt;out&lt;/span&gt; &lt;span&gt;double&lt;/span&gt;&lt;span&gt; height);

        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; padding =&lt;span&gt; gridView.Padding;
        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; margin =&lt;span&gt; GetItemMargin(gridView, DefaultItemMargin);
        height &lt;/span&gt;= height + margin.Top + margin.Bottom + padding.Top +&lt;span&gt; padding.Bottom;

        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; height;
    }

    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;double&lt;/span&gt;&lt;span&gt;.NaN;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;AdaptiveHeightValueConverter 类中还有一个方法 GetItemMargin(view, fallback), 在 AdaptiveGridView 类的 CalculateItemWidth(containerWidth) 方法中使用，值设置的优先级是：先取 GridView 对应的 Margin 属性值，如果为空，则取 GridViewItem 的 Margin 属性值，如果也为空，则取默认值；&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;internal&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; Thickness GetItemMargin(GridView view, Thickness fallback = &lt;span&gt;default&lt;/span&gt;&lt;span&gt;(Thickness))
{
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; setter = view.ItemContainerStyle?.Setters.OfType&amp;lt;Setter&amp;gt;().FirstOrDefault(s =&amp;gt; s.Property ==&lt;span&gt; FrameworkElement.MarginProperty);
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (setter != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
    {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; (Thickness)setter.Value;
    }
    &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;
    {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (view.Items.Count &amp;gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
        {
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; container = (GridViewItem)view.ContainerFromIndex(&lt;span&gt;0&lt;/span&gt;&lt;span&gt;);
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (container != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
            {
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; container.Margin;
            }
        }

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Use the default thickness for a GridViewItem&lt;/span&gt;
        &lt;span&gt;return&lt;/span&gt;&lt;span&gt; fallback;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;调用示例&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;我们简单调用 AdaptiveGridView 控件，设置了 DesiredWidth 和 ItemHeight，选择模式设置为多选；可以看到在控件尺寸变化时，列数和 Item 尺寸都发生了变化；如果不设置 ItemHeight，则每一行都会占满宽度；第三张图，当设置单行模式时，Item 在一行排列；&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Grid &lt;/span&gt;&lt;span&gt;Background&lt;/span&gt;&lt;span&gt;=&quot;&lt;/span&gt;&lt;span&gt;{ThemeResource ApplicationPageBackgroundThemeBrush}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;controls:AdaptiveGridView &lt;/span&gt;&lt;span&gt;Name&lt;/span&gt;&lt;span&gt;=&quot;AdaptiveGridViewControl&quot;&lt;/span&gt;&lt;span&gt;
                                OneRowModeEnabled&lt;/span&gt;&lt;span&gt;=&quot;False&quot;&lt;/span&gt;&lt;span&gt;
                                ItemHeight&lt;/span&gt;&lt;span&gt;=&quot;145&quot;&lt;/span&gt;&lt;span&gt;
                                DesiredWidth&lt;/span&gt;&lt;span&gt;=&quot;157&quot;&lt;/span&gt;&lt;span&gt;
                                SelectionMode&lt;/span&gt;&lt;span&gt;=&quot;Multiple&quot;&lt;/span&gt;&lt;span&gt;
                                IsItemClickEnabled&lt;/span&gt;&lt;span&gt;=&quot;True&quot;&lt;/span&gt;&lt;span&gt;
                                ItemTemplate&lt;/span&gt;&lt;span&gt;=&quot;&lt;/span&gt;&lt;span&gt;{StaticResource PhotosTemplate}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Grid&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/306530/201804/306530-20180403102419982-1500465258.jpg&quot; alt=&quot;&quot; height=&quot;400&quot;/&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/306530/201804/306530-20180403102437183-329140273.jpg&quot; alt=&quot;&quot; height=&quot;400&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/306530/201804/306530-20180403102456399-457314126.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;总结&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;到这里我们就把 UWP Community Toolkit 中的 AdaptiveGridView 控件的源代码实现过程和简单的调用示例讲解完成了，希望能对大家更好的理解和使用这个控件有所帮助。欢迎大家多多交流，谢谢！&lt;/p&gt;
&lt;p&gt;最后，再跟大家安利一下 UWPCommunityToolkit 的官方微博：&lt;em&gt;&lt;strong&gt;&lt;a href=&quot;https://weibo.com/u/6506046490&quot; target=&quot;_blank&quot;&gt;https://weibo.com/u/6506046490&lt;/a&gt;, &lt;/strong&gt;&lt;/em&gt;大家可以通过微博关注最新动态。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;衷心感谢 UWPCommunityToolkit 的作者们杰出的工作，Thank you so much, UWPCommunityToolkit authors!!!&lt;/strong&gt;&lt;/p&gt;

</description>
<pubDate>Wed, 04 Apr 2018 13:45:00 +0000</pubDate>
<dc:creator>shaomeng</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/shaomeng/p/8695814.html</dc:identifier>
</item>
<item>
<title>构建微服务开发环境8————Hello 微服务 - 云开发</title>
<link>http://www.cnblogs.com/cloud-dev/p/gou-jian-wei-fu-wu-kai-fa-huan-jing8Hello-wei-fu-w.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/cloud-dev/p/gou-jian-wei-fu-wu-kai-fa-huan-jing8Hello-wei-fu-w.html</guid>
<description>&lt;p&gt;【内容指引】&lt;br/&gt;1.用IDEA打开微服务项目;&lt;br/&gt;2.更新Maven依赖；&lt;br/&gt;3.IntelliJ IDEA JDK配置;&lt;br/&gt;4.修改代码；&lt;br/&gt;5.运行微服务；&lt;br/&gt;6.将代码变更提交到Github。&lt;/p&gt;
&lt;p&gt;经过前面的努力，我们已经为Spring Cloud微服务开发准备好了合适的环境。目前我们的操作系统上已安装了JDK、IntelliJ IDEA高效开发工具、Maven项目管理工具、Docker和Mysql等镜像、Github代码版本管理工具Github Desktop。今天我们小试牛刀，来个体验级的综合演练：&lt;/p&gt;
&lt;h2 id=&quot;toc_0&quot;&gt;一、用IDEA打开微服务项目&lt;/h2&gt;
&lt;p&gt;上一篇中，我们向Github服务器提交了一个微服务项目“top_cloudev_doc”。现在我们分别演示在macOS系统和windows系统上打开这个项目：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;macOS系统下的打开方式&lt;/strong&gt;&lt;br/&gt;在底部程序坞中点击IDEA图标(安装macOS版IDEA时我们演示过如何将IDEA加入到程序坞)：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1340917/201804/1340917-20180404214015847-498690221.jpg&quot; alt=&quot;&quot;/&gt;￼&lt;/p&gt;
&lt;p&gt;在欢迎界面点击“Open”：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1340917/201804/1340917-20180404214014610-543626754.jpg&quot; alt=&quot;&quot;/&gt;￼&lt;/p&gt;
&lt;p&gt;定位到前面存放的“top_cloudev_doc”微服务项目，即可打开该项目。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;windows系统下的打开方式&lt;/strong&gt;&lt;br/&gt;如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1340917/201804/1340917-20180404214017066-1488977690.jpg&quot; alt=&quot;&quot;/&gt;￼&lt;/p&gt;
&lt;p&gt;在欢迎界面点击“Open”：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1340917/201804/1340917-20180404214014610-543626754.jpg&quot; alt=&quot;&quot;/&gt;￼&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1340917/201804/1340917-20180404214015006-920563095.jpg&quot; alt=&quot;&quot;/&gt;￼&lt;/p&gt;
&lt;h2 id=&quot;toc_1&quot;&gt;二、更新Maven依赖&lt;/h2&gt;
&lt;p&gt;这是我们安装IDEA和Maven后第一次打开项目，该项目使用Maven管理项目所需要的各种依赖。打开项目后我们会看到IDEA右下角有不断更新的进度，根据网速快慢的差异，这个过程可能会花很长时间，&lt;em&gt;切记不要中断，耐心等待Maven依赖全部更新完成！&lt;/em&gt;，否则以后可能有各种找不到依赖的异常，而Maven对于下载了一半未完成的更新不会自动修复！&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1340917/201804/1340917-20180404214015966-760910223.jpg&quot; alt=&quot;&quot;/&gt;￼&lt;/p&gt;
&lt;h2 id=&quot;toc_2&quot;&gt;三、IntelliJ IDEA JDK配置&lt;/h2&gt;
&lt;p&gt;目前大多数IDE都没有集成JDK环境，IDEA也是一样，在使用IDEA之前首先要安装JDK，并且配置环境变量。与其他IDE不同之处在于，IDEA不会自动匹配系统的JDK环境。这时候启动类中代码看起来似乎有问题，其实只是IDEA的JDK没有配置过而已：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1340917/201804/1340917-20180404214017726-1754933759.jpg&quot; alt=&quot;&quot;/&gt;￼&lt;/p&gt;
&lt;p&gt;下面演示配置方法：&lt;br/&gt;&lt;strong&gt;macOS系统&lt;/strong&gt;&lt;br/&gt;1.打开菜单“File &amp;gt; Project Structure”:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1340917/201804/1340917-20180404214017547-290825270.jpg&quot; alt=&quot;&quot;/&gt;￼&lt;/p&gt;
&lt;p&gt;2.添加SDK：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1340917/201804/1340917-20180404214017909-607682609.jpg&quot; alt=&quot;&quot;/&gt;￼&lt;/p&gt;
&lt;p&gt;3.选择“JDK”：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1340917/201804/1340917-20180404214024363-718258689.jpg&quot; alt=&quot;&quot;/&gt;￼&lt;/p&gt;
&lt;p&gt;4.目标为安装JDK下的“Contents/Home”目录：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1340917/201804/1340917-20180404214025113-1368628036.jpg&quot; alt=&quot;&quot;/&gt;￼&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1340917/201804/1340917-20180404214023862-1084862114.jpg&quot; alt=&quot;&quot;/&gt;￼&lt;/p&gt;
&lt;p&gt;5.在Project Structure中选择“Project”：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1340917/201804/1340917-20180404214023737-765192480.jpg&quot; alt=&quot;&quot;/&gt;￼&lt;/p&gt;
&lt;p&gt;6.如下图所示，选择SDK：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1340917/201804/1340917-20180404214033035-1837823012.jpg&quot; alt=&quot;&quot;/&gt;￼&lt;/p&gt;
&lt;p&gt;macOS下IDEA的JDK设定已完成，启动类里的红色波浪线警告也消失了：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1340917/201804/1340917-20180404214032941-851307522.jpg&quot; alt=&quot;&quot;/&gt;￼&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;windows系统&lt;/strong&gt;&lt;br/&gt;与macOS版IDEA的JDK配置方法一模一样：&lt;/p&gt;
&lt;p&gt;1.打开菜单“File &amp;gt; Project Structure”:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1340917/201804/1340917-20180404214032060-1714557616.jpg&quot; alt=&quot;&quot;/&gt;￼&lt;/p&gt;
&lt;p&gt;2.在Project Structrue下的SDKs中添加JDK：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1340917/201804/1340917-20180404214036347-1558123256.jpg&quot; alt=&quot;&quot;/&gt;￼&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1340917/201804/1340917-20180404214040815-1773948368.jpg&quot; alt=&quot;&quot;/&gt;￼&lt;/p&gt;
&lt;p&gt;3.在Project中选择JDK：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1340917/201804/1340917-20180404214039809-970492422.jpg&quot; alt=&quot;&quot;/&gt;￼&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1340917/201804/1340917-20180404214042180-1849598036.jpg&quot; alt=&quot;&quot;/&gt;￼&lt;/p&gt;
&lt;h2 id=&quot;toc_3&quot;&gt;四、修改代码&lt;/h2&gt;
&lt;p&gt;我们新建一个Rest控制器：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1340917/201804/1340917-20180404214044003-717468792.jpg&quot; alt=&quot;&quot;/&gt;￼&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1340917/201804/1340917-20180404214044726-1171771455.jpg&quot; alt=&quot;&quot;/&gt;￼&lt;/p&gt;
&lt;p&gt;名称为：HomeController&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1340917/201804/1340917-20180404214045898-2062856246.jpg&quot; alt=&quot;&quot;/&gt;￼&lt;/p&gt;
&lt;p&gt;此时会弹出一个提示是否自动加入Github管理的对话框，勾选记住选择，然后点击“Yes”：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1340917/201804/1340917-20180404214055159-1644045649.jpg&quot; alt=&quot;&quot;/&gt;￼&lt;/p&gt;
&lt;p&gt;代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; top.cloudev.doc.web;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.web.bind.annotation.GetMapping;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.web.bind.annotation.RestController;

&lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * 我写的第一个REST控制器接口，仅用于演示
 * Created by Mac.Manon on 2018/04/04
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
@RestController
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; HomeController {

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * hello spring cloud
     * GET: /hello
     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;
     &lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    @GetMapping(&lt;/span&gt;&quot;/hello&quot;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String hello(){
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &quot;hello, spring cloud!&quot;&lt;span&gt;;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;toc_4&quot;&gt;五、运行微服务&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1340917/201804/1340917-20180404214048581-131953623.jpg&quot; alt=&quot;&quot;/&gt;￼&lt;/p&gt;
&lt;p&gt;在windows下有可能遭到防火墙警告，点击“允许访问”即可：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1340917/201804/1340917-20180404214047699-1468110682.jpg&quot; alt=&quot;&quot;/&gt;￼&lt;/p&gt;
&lt;p&gt;项目启动成功，端口是8888，现在访问&lt;a href=&quot;http://localhost:8888/hello&quot;&gt;http://localhost:8888/hello&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1340917/201804/1340917-20180404214056332-610221682.jpg&quot; alt=&quot;&quot;/&gt;￼&lt;/p&gt;
&lt;p&gt;运行正常。&lt;/p&gt;
&lt;h2 id=&quot;toc_5&quot;&gt;六、将代码变更提交到Github&lt;/h2&gt;
&lt;p&gt;打开Github Desktop，如下图，为本次更新代码写必要的备注，然后点击“Commit to master”:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1340917/201804/1340917-20180404214051863-502106680.jpg&quot; alt=&quot;&quot;/&gt;￼&lt;/p&gt;
&lt;p&gt;如下图，点击“Push origin”将本次代码更新提交到Github服务器：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1340917/201804/1340917-20180404214056185-233174421.jpg&quot; alt=&quot;&quot;/&gt;￼&lt;/p&gt;
&lt;p&gt;在Github.com上已能看到本次更新的代码了：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1340917/201804/1340917-20180404214100175-234402253.jpg&quot; alt=&quot;&quot;/&gt;￼&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1340917/201804/1340917-20180404214058331-191677447.jpg&quot; alt=&quot;&quot;/&gt;￼&lt;/p&gt;
</description>
<pubDate>Wed, 04 Apr 2018 13:41:00 +0000</pubDate>
<dc:creator>云开发</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/cloud-dev/p/gou-jian-wei-fu-wu-kai-fa-huan-jing8Hello-wei-fu-w.html</dc:identifier>
</item>
<item>
<title>Spring Boot 配置文件详解 - ITDragon龙</title>
<link>http://www.cnblogs.com/itdragon/p/8686554.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/itdragon/p/8686554.html</guid>
<description>&lt;p&gt;Spring Boot提供了两种常用的配置文件，分别是properties文件和yml文件。他们的作用都是修改Spring Boot自动配置的默认值。相对于properties文件而言，yml文件更年轻，也有很多的坑。可谓成也萧何败萧何，yml通过空格来确定层级关系，是配置文件结构跟清晰，但也会因为微不足道的空格而破坏了层级关系。本章重点介绍yml的语法和从配置文件中取值。还在等什么，赶快来学习吧！&lt;/p&gt;
&lt;p&gt;技术：yaml、properties语法，ConfigurationProperties和Value注解的使用，配置文件占位符的使用&lt;/p&gt;
&lt;p&gt;说明：本章重点介绍yaml的语法和ConfigurationProperties注解的使用，测试代码和完整代码请移步github，喜欢的朋友可以点个star。&lt;/p&gt;
&lt;p&gt;源码：&lt;a href=&quot;https://github.com/ITDragonBlog/daydayup/tree/master/SpringBoot/spring-boot-yml&quot; class=&quot;uri&quot;&gt;https://github.com/ITDragonBlog/daydayup/tree/master/SpringBoot/spring-boot-yml&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;文章目录结构：&lt;br/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/806956/201804/806956-20180401220714608-87698899.png&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;一yaml简介&quot;&gt;一、YAML简介&lt;/h2&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;yml是YAML（YAML Ain't Markup Language）语言的文件，以数据为中心，比json、xml等更适合做配置文件&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;yml和xml相比，少了一些结构化的代码，使数据更直接，一目了然。&lt;/p&gt;
&lt;p&gt;yml和json呢？没有谁好谁坏，合适才是最好的。yml的语法比json优雅，注释更标准，适合做配置文件。json作为一种机器交换格式比yml强，更适合做api调用的数据交换。&lt;/p&gt;
&lt;h3 id=&quot;一yaml语法&quot;&gt;一）YAML语法&lt;/h3&gt;
&lt;p&gt;以空格的缩进程度来控制层级关系。空格的个数并不重要，只要左边空格对齐则视为同一个层级。注意不能用tab代替空格。且大小写敏感。支持字面值，对象，数组三种数据结构，也支持复合结构。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;字面值&lt;/strong&gt;：字符串，布尔类型，数值，日期。字符串默认不加引号，单引号会转义特殊字符。日期格式支持yyyy/MM/dd HH:mm:ss&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;对象&lt;/strong&gt;：由键值对组成，形如 &lt;strong&gt;key:(空格)value&lt;/strong&gt; 的数据组成。冒号后面的空格是必须要有的，每组键值对占用一行，且缩进的程度要一致，也可以使用行内写法：{k1: v1, ....kn: vn}&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;数组&lt;/strong&gt;：由形如 &lt;strong&gt;-(空格)value&lt;/strong&gt; 的数据组成。短横线后面的空格是必须要有的，每组数据占用一行，且缩进的程度要一致，也可以使用行内写法： [1,2,...n]&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;复合结构&lt;/strong&gt;：上面三种数据结构任意组合&lt;/p&gt;
&lt;h3 id=&quot;二yaml的运用&quot;&gt;二）YAML的运用&lt;/h3&gt;
&lt;p&gt;创建一个Spring Boot 的全局配置文件 application.yml，配置属性参数。主要有字符串，带特殊字符的字符串，布尔类型，数值，集合，行内集合，行内对象，集合对象这几种常用的数据格式。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;14&quot;&gt;
&lt;pre class=&quot;sourceCode yaml&quot;&gt;
&lt;code class=&quot;sourceCode yaml&quot;&gt;&lt;span class=&quot;fu&quot;&gt;yaml:&lt;/span&gt;
  &lt;span class=&quot;fu&quot;&gt;str:&lt;/span&gt; 字符串可以不加引号
  &lt;span class=&quot;fu&quot;&gt;specialStr:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;双引号直接输出\n特殊字符&quot;&lt;/span&gt;
  &lt;span class=&quot;fu&quot;&gt;specialStr2:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'单引号可以转义\n特殊字符'&lt;/span&gt;
  &lt;span class=&quot;fu&quot;&gt;flag:&lt;/span&gt; false
  &lt;span class=&quot;fu&quot;&gt;num:&lt;/span&gt; 666
  &lt;span class=&quot;fu&quot;&gt;Dnum:&lt;/span&gt; 88.88
  &lt;span class=&quot;fu&quot;&gt;list:&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;-&lt;/span&gt; one
    &lt;span class=&quot;kw&quot;&gt;-&lt;/span&gt; two
    &lt;span class=&quot;kw&quot;&gt;-&lt;/span&gt; two
  &lt;span class=&quot;fu&quot;&gt;set:&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;[&lt;/span&gt;1&lt;span class=&quot;kw&quot;&gt;,&lt;/span&gt;2&lt;span class=&quot;kw&quot;&gt;,&lt;/span&gt;2&lt;span class=&quot;kw&quot;&gt;,&lt;/span&gt;3&lt;span class=&quot;kw&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;fu&quot;&gt;map:&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;k1:&lt;/span&gt; v1&lt;span class=&quot;kw&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;k2:&lt;/span&gt; v2&lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;fu&quot;&gt;positions:&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;name:&lt;/span&gt; ITDragon
      &lt;span class=&quot;fu&quot;&gt;salary:&lt;/span&gt; 15000.00
    &lt;span class=&quot;kw&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;name:&lt;/span&gt; ITDragonBlog
      &lt;span class=&quot;fu&quot;&gt;salary:&lt;/span&gt; 18888.88&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;创建实体类YamlEntity.java 获取配置文件中的属性值，&lt;a href=&quot;mailto:通过注解@ConfigurationProperties获取配置文件中的指定值并注入到实体类中&quot;&gt;通过注解@ConfigurationProperties获取配置文件中的指定值并注入到实体类中&lt;/a&gt;。其具体的测试方法和获取值的原理，请继续往后看！&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;14&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;kw&quot;&gt;import org.springframework.boot.context.properties.ConfigurationProperties;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import org.springframework.stereotype.Component;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import java.util.List;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import java.util.Map;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import java.util.Set;&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * YAML 语法实体类&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * 切记点：&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * 一、冒号后面加空格，即 key:(空格)value&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * 二、每行参数左边空格数量决定了该参数的层级，不可乱输入。&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; */&lt;/span&gt;
&lt;span class=&quot;fu&quot;&gt;@Component&lt;/span&gt;
&lt;span class=&quot;fu&quot;&gt;@ConfigurationProperties&lt;/span&gt;(prefix = &lt;span class=&quot;st&quot;&gt;&quot;yaml&quot;&lt;/span&gt;)
&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; YamlEntity {

    &lt;span class=&quot;co&quot;&gt;// 字面值，字符串，布尔，数值&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; String str; &lt;span class=&quot;co&quot;&gt;// 普通字符串&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; String specialStr; &lt;span class=&quot;co&quot;&gt;// 转义特殊字符串&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; String specialStr2;&lt;span class=&quot;co&quot;&gt;// 输出特殊字符串&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; Boolean flag;   &lt;span class=&quot;co&quot;&gt;// 布尔类型&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; Integer num;    &lt;span class=&quot;co&quot;&gt;// 整数&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; Double dNum;    &lt;span class=&quot;co&quot;&gt;// 小数&lt;/span&gt;

    &lt;span class=&quot;co&quot;&gt;// 数组，List和Set，两种写法： 第一种：-空格value，每个值占一行，需缩进对齐；第二种：[1,2,...n] 行内写法&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; List&amp;lt;Object&amp;gt; list;  &lt;span class=&quot;co&quot;&gt;// list可重复集合&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; Set&amp;lt;Object&amp;gt; set;    &lt;span class=&quot;co&quot;&gt;// set不可重复集合&lt;/span&gt;

    &lt;span class=&quot;co&quot;&gt;// Map和实体类，两种写法：第一种：key空格value，每个值占一行，需缩进对齐；第二种：{key: value,....} 行内写法&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; Map&amp;lt;String, Object&amp;gt; map; &lt;span class=&quot;co&quot;&gt;// Map K-V&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; List&amp;lt;Position&amp;gt; positions;  &lt;span class=&quot;co&quot;&gt;// 复合结构，集合对象&lt;/span&gt;

    &lt;span class=&quot;co&quot;&gt;// 省略getter，setter，toString方法&lt;/span&gt;
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;三yml小结&quot;&gt;三）YML小结&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;一、字符串可以不加引号，若加双引号则输出特殊字符，若不加或加单引号则转义特殊字符；&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;二、数组类型，短横线后面要有空格；对象类型，冒号后面要有空格；&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;三、YAML是以空格缩进的程度来控制层级关系，但不能用tab键代替空格，大小写敏感；&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;四、如何让一个程序员崩溃？在yml文件中加几个空格！(〃＞皿＜)&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;二properties简介&quot;&gt;二、Properties简介&lt;/h2&gt;
&lt;p&gt;properties文件大家经常用，这里就简单介绍一下。其语法结构形如：key=value。注意中文乱码问题，需要转码成ASCII。具体如下所示：&lt;/p&gt;
&lt;pre class=&quot;prop&quot;&gt;
&lt;code&gt;userinfo.account=itdragonBlog
userinfo.age=25
userinfo.active=true
userinfo.created-date=2018/03/31 16:54:30
userinfo.map.k1=v1
userinfo.map.k2=v2
userinfo.list=one,two,three
userinfo.position.name=Java架构师
userinfo.position.salary=19999.99&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;从配置文件中取值注入到实体类中，和YAML是一样的。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;kw&quot;&gt;import org.springframework.boot.context.properties.ConfigurationProperties;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import org.springframework.stereotype.Component;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import java.util.Date;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import java.util.List;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import java.util.Map;&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * 用户信息&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * @ConfigurationProperties : 被修饰类中的所有属性会和配置文件中的指定值（该值通过prefix找到）进行绑定&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; */&lt;/span&gt;
&lt;span class=&quot;fu&quot;&gt;@Component&lt;/span&gt;
&lt;span class=&quot;fu&quot;&gt;@ConfigurationProperties&lt;/span&gt;(prefix = &lt;span class=&quot;st&quot;&gt;&quot;userinfo&quot;&lt;/span&gt;)
&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; UserInfo {

    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; String account;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; Integer age;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; Boolean active;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; Date createdDate;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; Map&amp;lt;String, Object&amp;gt; map;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; List&amp;lt;Object&amp;gt; list;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; Position position;

   &lt;span class=&quot;co&quot;&gt;// 省略getter，setter，toString方法&lt;/span&gt;
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;三配置文件取值&quot;&gt;三、配置文件取值&lt;/h2&gt;
&lt;p&gt;Spring Boot通过ConfigurationProperties注解从配置文件中获取属性。从上面的例子可以看出ConfigurationProperties注解可以通过设置prefix指定需要批量导入的数据。支持获取字面值，集合，Map，对象等复杂数据。ConfigurationProperties注解还有其他特么呢？它和Spring的Value注解又有什么区别呢？带着这些问题，我们继续往下看。(๑•̀ㅂ•́)و✧&lt;/p&gt;
&lt;h3 id=&quot;一configurationproperties和value优缺点&quot;&gt;一）ConfigurationProperties和Value优缺点&lt;/h3&gt;
&lt;p&gt;ConfigurationProperties注解的优缺点&lt;/p&gt;
&lt;p&gt;一、可以从配置文件中批量注入属性；&lt;/p&gt;
&lt;p&gt;二、支持获取复杂的数据类型；&lt;/p&gt;
&lt;p&gt;三、对属性名匹配的要求较低，比如user-name，user_name，userName，USER_NAME都可以取值；&lt;/p&gt;
&lt;p&gt;四、支持JAVA的JSR303数据校验；&lt;/p&gt;
&lt;p&gt;五、缺点是不支持强大的SpEL表达式；&lt;/p&gt;
&lt;p&gt;Value注解的优缺点正好相反，它只能一个个配置注入值；不支持数组、集合等复杂的数据类型；不支持数据校验；对属性名匹配有严格的要求。最大的特点是支持SpEL表达式，使其拥有更丰富的功能。&lt;/p&gt;
&lt;h3 id=&quot;二configurationproperties详解&quot;&gt;二）@ConfigurationProperties详解&lt;/h3&gt;
&lt;p&gt;第一步：导入依赖。若要使用ConfigurationProperties注解，需要导入依赖 spring-boot-configuration-processor；&lt;/p&gt;
&lt;p&gt;第二步：配置数据。在application.yml配置文件中，配置属性参数，其前缀为itdragon，参数有字面值和数组，用来判断是否支持获取复杂属性的能力；&lt;/p&gt;
&lt;p&gt;第三步：匹配数据。在类上添加注解ConfigurationProperties，并设置prefix属性值为itdragon。并把该类添加到Spring的IOC容器中。&lt;/p&gt;
&lt;p&gt;第四步：校验数据。添加数据校验Validated注解，开启数据校验，测试其是否支持数据校验的功能；&lt;/p&gt;
&lt;p&gt;第五步：测试ConfigurationProperties注解是否支持SpEL表达式；&lt;/p&gt;
&lt;p&gt;导入依赖：pom.xml 添加 spring-boot-configuration-processor依赖&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode xml&quot;&gt;
&lt;code class=&quot;sourceCode xml&quot;&gt;&lt;span class=&quot;kw&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span class=&quot;kw&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-boot-configuration-processor&lt;span class=&quot;kw&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;&amp;lt;optional&amp;gt;&lt;/span&gt;true&lt;span class=&quot;kw&quot;&gt;&amp;lt;/optional&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;配置数据：application.yml 配置属性参数，nick-name是用来判断匹配属性的松散性，若换成nick_name依然可以获取值。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode yaml&quot;&gt;
&lt;code class=&quot;sourceCode yaml&quot;&gt;&lt;span class=&quot;fu&quot;&gt;itdragon:&lt;/span&gt;
  &lt;span class=&quot;fu&quot;&gt;nick-name:&lt;/span&gt; ITDragonBlog
  &lt;span class=&quot;fu&quot;&gt;email:&lt;/span&gt; 1234567890@qq.com
  &lt;span class=&quot;fu&quot;&gt;iphone:&lt;/span&gt; 1234567890
  &lt;span class=&quot;fu&quot;&gt;abilities:&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;[&lt;/span&gt;java&lt;span class=&quot;kw&quot;&gt;,&lt;/span&gt; sql&lt;span class=&quot;kw&quot;&gt;,&lt;/span&gt; html&lt;span class=&quot;kw&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;fu&quot;&gt;created_date:&lt;/span&gt; 2018/03/31 15:27:30&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;匹配和校验数据：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;kw&quot;&gt;import org.springframework.boot.context.properties.ConfigurationProperties;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import org.springframework.stereotype.Component;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import org.springframework.validation.annotation.Validated;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import javax.validation.constraints.Email;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import java.util.Date;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import java.util.List;&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * ConfigurationProperties 注解语法类&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * 第一步：导入依赖 spring-boot-configuration-processor；&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * 第二步：把ConfigurationProperties注解修饰的类添加到Spring的IOC容器中；&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * 第三步：设置prefix属性，指定需要注入属性的前缀；&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * 第四步：添加数据校验注解，开启数据校验；&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; *&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * 注意点：&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * 一、nickName和createdDate在yml配置文件中，对应参数分别是中划线和下划线，用于测试其对属性名匹配的松散性&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * 二、email和iphone 测试其支持JSR303数据校验&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * 三、abilities 测试其支持复杂的数据结构&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; */&lt;/span&gt;
&lt;span class=&quot;fu&quot;&gt;@Component&lt;/span&gt;
&lt;span class=&quot;fu&quot;&gt;@ConfigurationProperties&lt;/span&gt;(prefix = &lt;span class=&quot;st&quot;&gt;&quot;itdragon&quot;&lt;/span&gt;)
&lt;span class=&quot;fu&quot;&gt;@Validated&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; ConfigurationPropertiesEntity {

    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; String nickName;    &lt;span class=&quot;co&quot;&gt;// 解析成功，支持松散匹配属性&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; String email;
&lt;span class=&quot;co&quot;&gt;//    @Email                      // 解析失败，数据校验成功：BindValidationException: Binding validation errors on itdragon&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; String iphone;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; List&amp;lt;String&amp;gt; abilities;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; Date createdDate;   &lt;span class=&quot;co&quot;&gt;// 解析成功，支持松散匹配属性&lt;/span&gt;

&lt;span class=&quot;co&quot;&gt;//    @ConfigurationProperties(&quot;#{(1+2-3)/4*5}&quot;)&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; String operator;    &lt;span class=&quot;co&quot;&gt;// 语法报错，不支持SpEL表达式：not applicable to field&lt;/span&gt;

    &lt;span class=&quot;co&quot;&gt;// 省略getter，setter，toString方法&lt;/span&gt;
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;三value详解&quot;&gt;三）@Value详解&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/itdragon/p/8658946.html&quot;&gt;上一篇博客&lt;/a&gt;已经介绍过Value注解的使用，这里只简单说明。&lt;/p&gt;
&lt;p&gt;第一步：在属性上添加Value注解，通过${}设置参数从配置文件中注入值；&lt;/p&gt;
&lt;p&gt;第二步：修改&lt;code&gt;${itdragon.ceatred_date}&lt;/code&gt;中的参数值，改为&lt;code&gt;${itdragon.ceatredDate}&lt;/code&gt;测试是否能解析成功；&lt;/p&gt;
&lt;p&gt;第三步：添加数据校验Validated注解，开启数据校验，测试其是否支持数据校验的功能；&lt;/p&gt;
&lt;p&gt;第四步：测试Value注解是否支持SpEL表达式；&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;kw&quot;&gt;import org.springframework.beans.factory.annotation.Value;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import org.springframework.stereotype.Component;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import org.springframework.validation.annotation.Validated;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import javax.validation.constraints.Email;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import java.util.Date;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import java.util.List;&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * Value 注解语法类&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * 第一步：在属性上添加注解Value注入参数&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * 第二步：把Value注解修饰的类添加到Spring的IOC容器中；&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * 第三步：添加数据校验注解，检查是否支持数据校验；&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; *&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * 注意点：&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * 一、nickName和createdDate在yml配置文件中，对应参数分别是中划线和下划线，用于测试其对属性名匹配的松散性&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * 二、email和iphone 测试其支持JSR303数据校验&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * 三、abilities 测试其支持复杂的数据结构&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; *&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * 结论：&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * 一、createDate取值必须和yml配置文件中的参数保持一致，&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * 二、既是在iphone上添加邮箱验证注解依然可以通过测试，&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * 三、不支持复杂的数据结构，提示错误和第一条相同：IllegalArgumentException: Could not resolve placeholder 'itdragon.abilities' in value &quot;${itdragon.abilities}&quot;&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; */&lt;/span&gt;
&lt;span class=&quot;fu&quot;&gt;@Component&lt;/span&gt;
&lt;span class=&quot;fu&quot;&gt;@Validated&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; ValueEntity {

    &lt;span class=&quot;fu&quot;&gt;@Value&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;${itdragon.nick-name}&quot;&lt;/span&gt;)
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; String nickName;
    &lt;span class=&quot;fu&quot;&gt;@Value&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;${itdragon.email}&quot;&lt;/span&gt;)
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; String email;
    &lt;span class=&quot;fu&quot;&gt;@Email&lt;/span&gt;
    &lt;span class=&quot;fu&quot;&gt;@Value&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;${itdragon.iphone}&quot;&lt;/span&gt;)        &lt;span class=&quot;co&quot;&gt;// 解析成功，并不支持数据校验&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; String iphone;
&lt;span class=&quot;co&quot;&gt;//    @Value(&quot;${itdragon.abilities}&quot;)     // 解析错误，并不支持复杂的数据结构&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; List&amp;lt;String&amp;gt; abilities;
&lt;span class=&quot;co&quot;&gt;//    @Value(&quot;${itdragon.ceatredDate}&quot;)   // 解析错误，并不支持松散匹配属性，必须严格一致&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; Date createdDate;

    &lt;span class=&quot;co&quot;&gt;// Value注解的强大一面：支持SpEL表达式&lt;/span&gt;
    &lt;span class=&quot;fu&quot;&gt;@Value&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;#{(1+2-3)/4*5}&quot;&lt;/span&gt;)            &lt;span class=&quot;co&quot;&gt;// 算术运算&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; String operator;
    &lt;span class=&quot;fu&quot;&gt;@Value&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;#{1&amp;gt;2 || 2 &amp;lt;= 3}&quot;&lt;/span&gt;)          &lt;span class=&quot;co&quot;&gt;// 关系运算&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; Boolean comparison;
    &lt;span class=&quot;fu&quot;&gt;@Value&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;#{systemProperties['java.version']}&quot;&lt;/span&gt;) &lt;span class=&quot;co&quot;&gt;// 系统配置：os.name&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; String systemProperties;
    &lt;span class=&quot;fu&quot;&gt;@Value&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;#{T(java.lang.Math).abs(-18)}&quot;&lt;/span&gt;) &lt;span class=&quot;co&quot;&gt;// 表达式&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; String mapExpression;

    &lt;span class=&quot;co&quot;&gt;// 省略getter，setter，toString方法&lt;/span&gt;
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;四配置文件取值小结&quot;&gt;四）配置文件取值小结&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;一、ConfigurationProperties注解支持批量注入，而Value注解适合单个注入；&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;二、ConfigurationProperties注解支持数据校验，而Value注解不支持；&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;三、ConfigurationProperties注解支持松散匹配属性，而Value注解必须严格匹配属性；&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;四、ConfigurationProperties不支持强大的SpEL表达式，而Value支持；&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;四配置文件占位符&quot;&gt;四、配置文件占位符&lt;/h2&gt;
&lt;p&gt;占位符和随机数比较简单，这里就直接贴出代码。需要注意的是：&lt;/p&gt;
&lt;p&gt;一、占位符的值必须是完整路径&lt;/p&gt;
&lt;p&gt;二、占位符设置默认值，冒号后面不能有空格&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode yaml&quot;&gt;
&lt;code class=&quot;sourceCode yaml&quot;&gt;&lt;span class=&quot;fu&quot;&gt;ran:&lt;/span&gt;  &lt;span class=&quot;co&quot;&gt;# 这里的prefix不能是random，&lt;/span&gt;
  &lt;span class=&quot;fu&quot;&gt;ran-value:&lt;/span&gt; ${random.value}
  &lt;span class=&quot;fu&quot;&gt;ran-int:&lt;/span&gt; ${random.int}
  &lt;span class=&quot;fu&quot;&gt;ran-long:&lt;/span&gt; ${random.long}
  &lt;span class=&quot;fu&quot;&gt;ran-int-num:&lt;/span&gt; ${random.int(10)}
  &lt;span class=&quot;fu&quot;&gt;ran-int-range:&lt;/span&gt; ${random.int[10,20]}
  &lt;span class=&quot;fu&quot;&gt;ran-placeholder:&lt;/span&gt; placeholder_${ran.ran-value:此处不能有空格，且key为完整路径}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;kw&quot;&gt;import org.springframework.boot.context.properties.ConfigurationProperties;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import org.springframework.stereotype.Component;&lt;/span&gt;

&lt;span class=&quot;co&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * 随机数和占位符语法类&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; */&lt;/span&gt;
&lt;span class=&quot;fu&quot;&gt;@Component&lt;/span&gt;
&lt;span class=&quot;fu&quot;&gt;@ConfigurationProperties&lt;/span&gt;(prefix = &lt;span class=&quot;st&quot;&gt;&quot;ran&quot;&lt;/span&gt;)
&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; RandomEntity {

    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; String ranValue;    &lt;span class=&quot;co&quot;&gt;// 随机生成一个字符串&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; Integer ranInt;     &lt;span class=&quot;co&quot;&gt;// 随机生成一个整数&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; Long ranLong;       &lt;span class=&quot;co&quot;&gt;// 随机生成一个长整数&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; Integer ranIntNum;  &lt;span class=&quot;co&quot;&gt;// 在指定范围内随机生成一个整数&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; Integer ranIntRange;&lt;span class=&quot;co&quot;&gt;// 在指定区间内随机生成一个整数&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; String ranPlaceholder;&lt;span class=&quot;co&quot;&gt;// 占位符&lt;/span&gt;

    &lt;span class=&quot;co&quot;&gt;// 省略getter，setter，toString方法e&lt;/span&gt;
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;测试代码：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;fu&quot;&gt;@RunWith&lt;/span&gt;(SpringRunner.&lt;span class=&quot;fu&quot;&gt;class&lt;/span&gt;)
&lt;span class=&quot;fu&quot;&gt;@SpringBootTest&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; SpringBootYmlApplicationTests {

    &lt;span class=&quot;fu&quot;&gt;@Autowired&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; UserInfo userInfo;
    &lt;span class=&quot;fu&quot;&gt;@Autowired&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; YamlEntity yamlEntity;
    &lt;span class=&quot;fu&quot;&gt;@Autowired&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; ConfigurationPropertiesEntity configurationPropertiesEntity;
    &lt;span class=&quot;fu&quot;&gt;@Autowired&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; ValueEntity valueEntity;
    &lt;span class=&quot;fu&quot;&gt;@Autowired&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; RandomEntity randomEntity;

    &lt;span class=&quot;fu&quot;&gt;@Test&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;contextLoads&lt;/span&gt;() {
&lt;span class=&quot;co&quot;&gt;//      System.out.println(&quot;YAML Grammar : &quot; + yamlEntity);&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;//      System.out.println(&quot;UserInfo : &quot; + userInfo);&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;//      System.out.println(&quot;ConfigurationProperties Grammar : &quot; + configurationPropertiesEntity);&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;//      System.out.println(&quot;Value Grammar : &quot; + valueEntity);&lt;/span&gt;
        System.&lt;span class=&quot;fu&quot;&gt;out&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;println&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;Random Grammar : &quot;&lt;/span&gt; + randomEntity);
    }

}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;五总结&quot;&gt;五、总结&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;一、Spring Boot 支持两种格式的配置文件，其中YAML的数据结构比properties更清晰。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;二、YAML 是专门用来写配置文件的语言，非常简洁和强大。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;三、YAML 对空格的要求很严格，且不能用Tab键代替。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;四、YAML 通过空格缩进的程度确定层级，冒号后面有空格，短横线后面有空格。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;五、ConfigurationProperties注解适合批量注入配置文件中的属性，Value注解适合获取配置文件中的某一项。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;六、ConfigurationProperties注解支持数据校验和获取复杂的数据，Value注解支持SpEL表达式。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;文章到这里就结束了。如果文章对你有帮助，可以点个&quot;&lt;strong&gt;推荐&lt;/strong&gt;&quot;，也可以&quot;&lt;strong&gt;关注&lt;/strong&gt;&quot;我，获得更多丰富的知识。&lt;/p&gt;
&lt;p&gt;这里是博客文章目录一栏表中的部分内容，如果有感兴趣的内容可以点击右边的链接： &lt;a href=&quot;http://www.cnblogs.com/itdragon/p/8709948.html&quot; class=&quot;uri&quot;&gt;http://www.cnblogs.com/itdragon/p/8709948.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/806956/201804/806956-20180404120547967-1298773028.png&quot; alt=&quot;文章目录&quot;/&gt;&lt;/p&gt;
</description>
<pubDate>Wed, 04 Apr 2018 12:44:00 +0000</pubDate>
<dc:creator>ITDragon龙</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/itdragon/p/8686554.html</dc:identifier>
</item>
<item>
<title>JAVAEE——BOS物流项目09：业务受理需求分析、创建表、实现自动分单、数据表格编辑功能使用方法和工作单快速录入 - kent鹏</title>
<link>http://www.cnblogs.com/xieyupeng/p/8719083.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/xieyupeng/p/8719083.html</guid>
<description>&lt;p&gt;&lt;strong&gt;1&lt;span&gt;、业务受理需求分析&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p class=&quot;16&quot;&gt;n 业务通知单&lt;/p&gt;
&lt;p class=&quot;16&quot;&gt;n 工单&lt;/p&gt;
&lt;p class=&quot;16&quot;&gt;n 工作单&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2&lt;span&gt;、创建业务受理环节的数据表&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p class=&quot;16&quot;&gt;n 业务通知单&lt;/p&gt;
&lt;p class=&quot;16&quot;&gt;n 工单&lt;/p&gt;
&lt;p class=&quot;16&quot;&gt;n 工作单&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3&lt;span&gt;、实现业务受理自动分单&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p class=&quot;16&quot;&gt;n &lt;span&gt;在&lt;/span&gt;CRM&lt;span&gt;服务端扩展方法根据手机号查询客户信息&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;16&quot;&gt;n &lt;span&gt;在&lt;/span&gt;CRM&lt;span&gt;服务端扩展方法根据取件地址查询定区&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;16&quot;&gt;n 调整业务受理页面回显客户信息&lt;/p&gt;
&lt;p class=&quot;16&quot;&gt;n 实现自动分单&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4&lt;span&gt;、数据表格编辑功能使用方法&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5&lt;span&gt;、工作单快速录入&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;



&lt;p&gt;&lt;span&gt;整个&lt;/span&gt;BOS&lt;span&gt;项目分为基础设置、取派、中转、路由、报表等几大部分。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　受理环节，是物流公司业务的开始，作为服务前端，客户通过电话、网络等多种方式进行委托，业务受理员通过与客户交流，获取客户的服务需求和具体委托信息，将服务指令输入我司服务系统。&lt;/p&gt;

&lt;p&gt;&lt;span&gt;　　客户通过打电话方式进行物流委托，物流公司的客服人员需要将委托信息录入到&lt;/span&gt;BOS&lt;span&gt;系统中，这个录入的信息称为&lt;/span&gt;&lt;strong&gt;业务通知单&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;　　当客服人员将业务通知单信息录入到系统后，系统会根据客户的住址自动匹配到一个取派员，并为这个取派员产生一个任务，这个任务就称为&lt;strong&gt;工单&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　取派员收到取货任务后，会到客户住址取货，取派员会让客户填写纸质的单子（寄件人信息、收件人信息等），取派员将货物取回物流公司网点后，需要将纸质单子上的信息录入到&lt;/span&gt;BOS&lt;span&gt;系统中，录入的信息称为&lt;/span&gt;&lt;strong&gt;工作单&lt;/strong&gt;。&lt;/p&gt;


&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1135185/201804/1135185-20180404195541335-446469633.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;



&lt;p&gt;&lt;span&gt;页面：&lt;/span&gt;WEB-INF/pages/qupai/noticebill_add.jsp&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1135185/201804/1135185-20180404195548475-1524759053.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h2&gt;4.1 &lt;strong&gt;&lt;span&gt;在&lt;/span&gt;crm&lt;span&gt;服务中扩展方法&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt;
&lt;p class=&quot;16&quot;&gt;l 根据客户的手机号查询客户信息&lt;/p&gt;
&lt;p class=&quot;16&quot;&gt;l &lt;span&gt;根据客户的取件地址查询定区&lt;/span&gt;id&lt;/p&gt;

&lt;p&gt;接口：&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1135185/201804/1135185-20180404195558356-1721606565.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;实现类：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;45&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;根据手机号查询客户信息&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt;&lt;span&gt; Customer findCustomerByTelephone(String telephone) {
        String sql &lt;/span&gt;= &quot;select * from t_customer where telephone = ?&quot;&lt;span&gt;;
        List&lt;/span&gt;&amp;lt;Customer&amp;gt; list = jdbcTemplate.query(sql, &lt;span&gt;new&lt;/span&gt; RowMapper&amp;lt;Customer&amp;gt;&lt;span&gt;(){
            &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; Customer mapRow(ResultSet rs, &lt;span&gt;int&lt;/span&gt; arg1) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; SQLException {
                &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; id = rs.getInt(&quot;id&quot;);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;根据字段名称从结果集中获取对应的值&lt;/span&gt;
                String name = rs.getString(&quot;name&quot;&lt;span&gt;);
                String station &lt;/span&gt;= rs.getString(&quot;station&quot;&lt;span&gt;);
                String telephone &lt;/span&gt;= rs.getString(&quot;telephone&quot;&lt;span&gt;);
                String address &lt;/span&gt;= rs.getString(&quot;address&quot;&lt;span&gt;);
                String decidedzone_id &lt;/span&gt;= rs.getString(&quot;decidedzone_id&quot;&lt;span&gt;);
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Customer(id, name, station, telephone, address, decidedzone_id);
            }
        },telephone);
        
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(list != &lt;span&gt;null&lt;/span&gt; &amp;amp;&amp;amp; list.size() &amp;gt; 0&lt;span&gt;){
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; list.get(0&lt;span&gt;);
        }
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String findDecidedzoneIdByAddress(String address) {
        String sql &lt;/span&gt;= &quot;select decidedzone_id from t_customer where address = ?&quot;&lt;span&gt;;
        String decidedzoneId &lt;/span&gt;= jdbcTemplate.queryForObject(sql, String.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;, address);
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; decidedzoneId;
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;4.2 &lt;strong&gt;页面调整&lt;/strong&gt;&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&amp;lt;td&amp;gt;来电号码:&amp;lt;/td&amp;gt;
                    &amp;lt;td&amp;gt;&amp;lt;input type=&quot;text&quot; class=&quot;easyui-validatebox&quot; name=&quot;telephone&quot; required=&quot;true&quot; /&amp;gt;
                        &amp;lt;script type=&quot;text/javascript&quot;&amp;gt;&lt;span&gt;
                            $(&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
                                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;页面加载完成后，为手机号输入框绑定离焦事件&lt;/span&gt;
                                $(&quot;input[name=telephone]&quot;).blur(&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
                                    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取页面输入的手机号&lt;/span&gt;
                                    &lt;span&gt;var&lt;/span&gt; telephone = &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.value;
                                    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;发送ajax请求，请求Action，在Action中远程掉调用crm服务，获取客户信息，用于页面回显&lt;/span&gt;
                                    $.post('noticebillAction_findCustomerByTelephone.action',{&quot;telephone&quot;:telephone},&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(data){
                                        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(data != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;){
                                            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;查询到了客户信息，可以进行页面回显&lt;/span&gt;
                                            &lt;span&gt;var&lt;/span&gt; customerId =&lt;span&gt; data.id;
                                            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; customerName =&lt;span&gt; data.name;
                                            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; address =&lt;span&gt; data.address;
                                            $(&lt;/span&gt;&quot;input[name=customerId]&quot;&lt;span&gt;).val(customerId);
                                            $(&lt;/span&gt;&quot;input[name=customerName]&quot;&lt;span&gt;).val(customerName);
                                            $(&lt;/span&gt;&quot;input[name=delegater]&quot;&lt;span&gt;).val(customerName);
                                            $(&lt;/span&gt;&quot;input[name=pickaddress]&quot;&lt;span&gt;).val(address);
                                        }&lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;{
                                            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;没有查询到客户信息，不能进行页面回显&lt;/span&gt;
                                            $(&quot;input[name=customerId]&quot;).val(&quot;&quot;&lt;span&gt;);
                                            $(&lt;/span&gt;&quot;input[name=customerName]&quot;).val(&quot;&quot;&lt;span&gt;);
                                            $(&lt;/span&gt;&quot;input[name=delegater]&quot;).val(&quot;&quot;&lt;span&gt;);
                                            $(&lt;/span&gt;&quot;input[name=pickaddress]&quot;).val(&quot;&quot;&lt;span&gt;);
                                        }
                                    });
                                });
                            });
                        &lt;/span&gt;&amp;lt;/script&amp;gt;    
                    &amp;lt;/td&amp;gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;第二步：创建&lt;/span&gt;NoticebillAction&lt;span&gt;，注入&lt;/span&gt;&lt;span&gt;crm&lt;/span&gt;&lt;span&gt;代理对象，提供方法根据手机号查询客户信息，返回&lt;/span&gt;&lt;span&gt;json&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1135185/201804/1135185-20180404195751350-1739579493.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;注意：配置&lt;/span&gt;struts.xml&lt;/p&gt;
&lt;p&gt;&lt;span&gt;第三步：为页面中&lt;/span&gt;“新单”按钮绑定事件&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1135185/201804/1135185-20180404195758210-1156201016.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h2&gt;4.3 &lt;strong&gt;&lt;span&gt;在&lt;/span&gt;NoticebillAction&lt;span&gt;中提供方法实现业务受理自动分单&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1135185/201804/1135185-20180404195819605-1540704647.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;@Service
@Transactional
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; NoticebillServiceImpl &lt;span&gt;implements&lt;/span&gt;&lt;span&gt; INoticebillService {
    @Autowired
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; INoticebillDao noticebillDao;
    @Autowired
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; IDecidedzoneDao decidedzoneDao; 
    @Autowired
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; IWorkbillDao workbillDao;
    @Autowired
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; ICustomerService customerService;
    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 保存业务通知单，还有尝试自动分单
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; save(Noticebill model) {
        User user &lt;/span&gt;=&lt;span&gt; BOSUtils.getLoginUser();
        model.setUser(user);&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置当前登录用户&lt;/span&gt;
&lt;span&gt;        noticebillDao.save(model);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取客户的取件地址&lt;/span&gt;
        String pickaddress =&lt;span&gt; model.getPickaddress();
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;远程调用crm服务，根据取件地址查询定区id&lt;/span&gt;
        String decidedzoneId =&lt;span&gt; customerService.findDecidedzoneIdByAddress(pickaddress);
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(decidedzoneId != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;){
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;查询到了定区id，可以完成自动分单&lt;/span&gt;
            Decidedzone decidedzone =&lt;span&gt; decidedzoneDao.findById(decidedzoneId);
            Staff staff &lt;/span&gt;=&lt;span&gt; decidedzone.getStaff();
            model.setStaff(staff);&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;业务通知单关联取派员对象
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置分单类型为：自动分单&lt;/span&gt;
&lt;span&gt;            model.setOrdertype(Noticebill.ORDERTYPE_AUTO);
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;为取派员产生一个工单&lt;/span&gt;
            Workbill workbill = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Workbill();
            workbill.setAttachbilltimes(&lt;/span&gt;0);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;追单次数&lt;/span&gt;
            workbill.setBuildtime(&lt;span&gt;new&lt;/span&gt; Timestamp(System.currentTimeMillis()));&lt;span&gt;//&lt;/span&gt;&lt;span&gt;创建时间，当前系统时间&lt;/span&gt;
            workbill.setNoticebill(model);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;工单关联页面通知单&lt;/span&gt;
            workbill.setPickstate(Workbill.PICKSTATE_NO);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;取件状态&lt;/span&gt;
            workbill.setRemark(model.getRemark());&lt;span&gt;//&lt;/span&gt;&lt;span&gt;备注信息&lt;/span&gt;
            workbill.setStaff(staff);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;工单关联取派员&lt;/span&gt;
            workbill.setType(Workbill.TYPE_1);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;工单类型&lt;/span&gt;
&lt;span&gt;            workbillDao.save(workbill);
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;调用短信平台，发送短信&lt;/span&gt;
        }&lt;span&gt;else&lt;/span&gt;&lt;span&gt;{
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;没有查询到定区id，不能完成自动分单&lt;/span&gt;
&lt;span&gt;            model.setOrdertype(Noticebill.ORDERTYPE_MAN);
        }
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;



&lt;p&gt;数据表格编辑功能是以列为单位。&lt;/p&gt;
&lt;p class=&quot;16&quot;&gt;l 通过数据表格中的列属性定区具体那一列具有编辑功能：&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1135185/201804/1135185-20180404195911295-1011616539.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p class=&quot;16&quot;&gt;l 开始编辑：&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1135185/201804/1135185-20180404195917534-1355523723.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;结束编辑：&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1135185/201804/1135185-20180404195931455-2146304880.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p class=&quot;16&quot;&gt;l 插入一行数据：&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1135185/201804/1135185-20180404195939503-1306603760.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p class=&quot;16&quot;&gt;l 删除一行：&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1135185/201804/1135185-20180404200143808-781436949.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p class=&quot;16&quot;&gt;l 获得指定行对象的索引&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1135185/201804/1135185-20180404200151631-1590038203.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p class=&quot;16&quot;&gt;l 数据表格提供的用于监听结束编辑事件&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1135185/201804/1135185-20180404200213463-1314305493.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;83&quot;&gt;
&lt;pre&gt;
&amp;lt;table id=&quot;mytable&quot;&amp;gt;&amp;lt;/table&amp;gt;
    &amp;lt;!-- 方式三：使用easyUI提供的API创建datagrid --&amp;gt;
    &amp;lt;script type=&quot;text/javascript&quot;&amp;gt;&lt;span&gt;
        $(&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; myIndex = -1;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;全局变量，值为正在编辑行的索引&lt;/span&gt;
            &lt;span&gt;//&lt;/span&gt;&lt;span&gt;页面加载完成后，创建数据表格datagrid&lt;/span&gt;
            $(&quot;#mytable&quot;&lt;span&gt;).datagrid({
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;定义标题行所有的列&lt;/span&gt;
&lt;span&gt;                columns:[[
                          {title:&lt;/span&gt;'编号',field:'id',checkbox:&lt;span&gt;true&lt;/span&gt;&lt;span&gt;},
                          {width:&lt;/span&gt;150,title:'姓名',field:'name'&lt;span&gt;,editor:{
                                                              type:&lt;/span&gt;'validatebox'&lt;span&gt;,
                                                              options:{}
                                                             }},
                          {width:&lt;/span&gt;150,title:'年龄',field:'age'&lt;span&gt;,editor:{
                                type:&lt;/span&gt;'numberbox'&lt;span&gt;,
                                  options:{}
                                   }},
                          {width:&lt;/span&gt;150,title:'日期',field:'address'&lt;span&gt;,editor:{
                                type:&lt;/span&gt;'datebox'&lt;span&gt;,
                                  options:{}
                                   }}
                          ]],
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;指定数据表格发送ajax请求的地址&lt;/span&gt;
                url:'${pageContext.request.contextPath }/json/datagrid_data.json'&lt;span&gt;,
                rownumbers:&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;,
                singleSelect:&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;,
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;定义工具栏&lt;/span&gt;
&lt;span&gt;                toolbar:[
                         {text:&lt;/span&gt;'添加',iconCls:'icon-add'&lt;span&gt;,
                             &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;为按钮绑定单击事件&lt;/span&gt;
                             handler:&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
                                 $(&lt;/span&gt;&quot;#mytable&quot;).datagrid(&quot;insertRow&quot;&lt;span&gt;,{
                                     index:&lt;/span&gt;0,&lt;span&gt;//&lt;/span&gt;&lt;span&gt;在第一行插入数据&lt;/span&gt;
                                     row:{}&lt;span&gt;//&lt;/span&gt;&lt;span&gt;空行&lt;/span&gt;
&lt;span&gt;                                 });
                                 $(&lt;/span&gt;&quot;#mytable&quot;).datagrid(&quot;beginEdit&quot;,0&lt;span&gt;);
                                 myIndex &lt;/span&gt;= 0&lt;span&gt;;
                              }
                         },
                         {text:&lt;/span&gt;'删除',iconCls:'icon-remove',handler:&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
                            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;获得选中的行对象&lt;/span&gt;
                             &lt;span&gt;var&lt;/span&gt; rows = $(&quot;#mytable&quot;).datagrid(&quot;getSelections&quot;&lt;span&gt;);
                             &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(rows.length == 1&lt;span&gt;){
                                 &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; row = rows[0&lt;span&gt;];
                                 &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;获得指定行对象的索引&lt;/span&gt;
                                 myIndex = $(&quot;#mytable&quot;).datagrid(&quot;getRowIndex&quot;&lt;span&gt;,row);
                             }
                             $(&lt;/span&gt;&quot;#mytable&quot;).datagrid(&quot;deleteRow&quot;&lt;span&gt;,myIndex);
                             &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;$.post();&lt;/span&gt;
&lt;span&gt;                         }},
                         {text:&lt;/span&gt;'修改',iconCls:'icon-edit',handler:&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
                             &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;获得选中的行对象&lt;/span&gt;
                             &lt;span&gt;var&lt;/span&gt; rows = $(&quot;#mytable&quot;).datagrid(&quot;getSelections&quot;&lt;span&gt;);
                             &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(rows.length == 1&lt;span&gt;){
                                 &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; row = rows[0&lt;span&gt;];
                                 &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;获得指定行对象的索引&lt;/span&gt;
                                 myIndex = $(&quot;#mytable&quot;).datagrid(&quot;getRowIndex&quot;&lt;span&gt;,row);
                             }
                             $(&lt;/span&gt;&quot;#mytable&quot;).datagrid(&quot;beginEdit&quot;&lt;span&gt;,myIndex);
                         }},
                         {text:&lt;/span&gt;'保存',iconCls:'icon-save',handler:&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
                             $(&lt;/span&gt;&quot;#mytable&quot;).datagrid(&quot;endEdit&quot;&lt;span&gt;,myIndex);
                         }}
                         ],
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;显示分页条&lt;/span&gt;
                pagination:&lt;span&gt;true&lt;/span&gt;&lt;span&gt;,
                pageList:[&lt;/span&gt;3,5,7,10&lt;span&gt;],
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;数据表格提供的用于监听结束编辑事件&lt;/span&gt;
                onAfterEdit:&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(index,data,changes){
                    console.info(data);
                    $.post();
                }
            });
        });
    &lt;/span&gt;&amp;lt;/script&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;quickworkorder.jsp&lt;/p&gt;
&lt;p&gt;&lt;span&gt;添加&lt;/span&gt;ajax&lt;span&gt;。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1135185/201804/1135185-20180404200248379-259360322.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;添加后台代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;public&lt;/span&gt; String add() &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; IOException {
        String f &lt;/span&gt;= &quot;1&quot;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt;{
            workordermanageService.save(model);
        }&lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt;(Exception exception){
            f&lt;/span&gt;= &quot;0&quot;&lt;span&gt;;
        }
    ServletActionContext.getResponse().setContentType(&lt;/span&gt;&quot;text/html;charset=utf-8&quot;&lt;span&gt;);
        ServletActionContext.getResponse().getWriter().print(f);
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; NONE;
        
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt; &lt;/strong&gt;&lt;/p&gt;

</description>
<pubDate>Wed, 04 Apr 2018 12:05:00 +0000</pubDate>
<dc:creator>kent鹏</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/xieyupeng/p/8719083.html</dc:identifier>
</item>
</channel>
</rss>