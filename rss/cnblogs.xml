<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>【深度学习系列】用PaddlePaddle和Tensorflow实现经典CNN网络GoogLeNet - Charlotte77</title>
<link>http://www.cnblogs.com/charlotte77/p/8066867.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/charlotte77/p/8066867.html</guid>
<description>&lt;p&gt;&lt;span&gt;　　前面讲了LeNet、AlexNet和Vgg，这周来讲讲GoogLeNet。GoogLeNet是由google的Christian Szegedy等人在2014年的论文《&lt;a href=&quot;https://arxiv.org/abs/1409.4842&quot; target=&quot;_blank&quot;&gt;Going Deeper with Convolutions&lt;/a&gt;》提出，其最大的亮点是提出一种叫Inception的结构，以此为基础构建GoogLeNet，并在当年的ImageNet分类和检测任务中获得第一，ps：GoogLeNet的取名是为了向YannLeCun的LeNet系列致敬。&lt;/span&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;关于深度网络的一些思考&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　在本系列最开始的几篇文章我们讲到了卷积神经网络，设计的网络结构也非常简单，属于浅层神经网络，如三层的卷积神经网络等，但是在层数比较少的时候，有时候效果往往并没有那么好，在实验过程中发现，当我们尝试增加网络的层数，或者增加每一层网络的神经元个数的时候，对准确率有一定的提升，简单的说就是增加网络的深度与宽度，但这样做有两个明显的缺点：&lt;/span&gt;&lt;/p&gt;
&lt;ul data-anchor-id=&quot;au8w&quot;&gt;&lt;li&gt;&lt;span&gt;更深更宽的网络意味着更多的参数，提高了模型的复杂度，从而大大增加过拟合的风险，尤其在训练数据不是那么多或者某个label训练数据不足的情况下更容易发生；&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;增加计算资源的消耗，实际情况下，不管是因为数据稀疏还是扩充的网络结构利用不充分（比如很多权重接近0），都会导致大量计算的浪费。&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;span&gt;　　解决以上两个问题的基本方法是将全连接或卷积连接改为稀疏连接。不管从生物的角度还是机器学习的角度，稀疏性都有良好的表现，回想一下在讲AlexNet这一节提出的Dropout网络以及ReLU激活函数，其本质就是利用稀疏性提高模型泛化性（但需要计算的参数没变少）。 &lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　简单解释下稀疏性，当整个特征空间是非线性甚至不连续时：&lt;/span&gt;&lt;/p&gt;
&lt;ul data-anchor-id=&quot;yz7u&quot;&gt;&lt;li&gt;&lt;span&gt;学好局部空间的特征集更能提升性能，类似于Maxout网络中使用多个局部线性函数的组合来拟合非线性函数的思想；&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;假设整个特征空间由N个不连续局部特征空间集合组成，任意一个样本会被映射到这N个空间中并激活/不激活相应特征维度，如果用C1表示某类样本被激活的特征维度集合，用C2表示另一类样本的特征维度集合，当数据量不够大时，要想增加特征区分度并很好的区分两类样本，就要降低C1和C2的重合度（比如可用Jaccard距离衡量），即缩小C1和C2的大小，意味着相应的特征维度集会变稀疏。&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p data-anchor-id=&quot;lqz2&quot;&gt;&lt;span&gt;　　不过尴尬的是，现在的计算机体系结构更善于稠密数据的计算，而在非均匀分布的稀疏数据上的计算效率极差，比如稀疏性会导致的缓存miss率极高，于是需要一种方法既能发挥稀疏网络的优势又能保证计算效率。好在前人做了大量实验（如《&lt;a href=&quot;http://www.bmi.osu.edu/~umit/papers/Catalyurek10-SISC.pdf&quot; target=&quot;_blank&quot;&gt;On Two-Dimensional Sparse Matrix Partitioning: Models, Methods, and a Recipe&lt;/a&gt;》），发现对稀疏矩阵做聚类得到相对稠密的子矩阵可以大幅提高稀疏矩阵乘法性能，借鉴这个思想，作者提出Inception的结构。&lt;/span&gt;&lt;/p&gt;
&lt;p data-anchor-id=&quot;lqz2&quot;&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/853467/201712/853467-20171220144601662-354774100.png&quot; alt=&quot;&quot; width=&quot;511&quot; height=&quot;234&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p data-anchor-id=&quot;lqz2&quot;&gt; &lt;/p&gt;
&lt;p data-anchor-id=&quot;lqz2&quot;&gt;　图1 Inception结构&lt;/p&gt;
&lt;ul data-anchor-id=&quot;1ve3&quot;&gt;&lt;li&gt;&lt;span&gt;把不同大小卷积核抽象得到的特征空间看做子特征空间，每个子特征空间都是稀疏的，把这些不同尺度特征做融合，相当于得到一个相对稠密的空间；&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;采用1×1、3×3、5×5卷积核(不是必须的，也可以是其他大小)，stride取1，利用padding可以方便的做输出特征维度对齐；&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;大量事实表明pooling层能有效提高卷积网络的效果，所以加了一条max pooling路径；&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;这个结构符合直观理解，视觉信息通过不同尺度的变换被聚合起来作为下一阶段的特征，比如：人的高矮、胖瘦、青老信息被聚合后做下一步判断。&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p data-anchor-id=&quot;m31h&quot;&gt;&lt;span&gt;这个网络的最大问题是5×5卷积带来了巨大计算负担，例如，假设上层输入为：28×28×192：&lt;/span&gt;&lt;/p&gt;
&lt;ul data-anchor-id=&quot;h6p0&quot;&gt;&lt;li&gt;&lt;span&gt;直接经过96个5×5卷积层(stride=1，padding=2)后，输出为：28×28×96，卷积层参数量为：192×5×5×96=460800；&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;借鉴NIN网络(Network in Network,后续会讲)，在5×5卷积前使用32个1×1卷积核做维度缩减，变成28×28×32，之后经过96个5×5卷积层(stride=1，padding=2)后，输出为：28×28×96，但所有卷积层的参数量为：192×1×1×32+32×5×5×96=82944，可见整个参数量是原来的1/5.5，且效果上没有多少损失。 &lt;/span&gt;&lt;br/&gt;&lt;span&gt;新网络结构为&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/853467/201712/853467-20171220144700443-167605774.png&quot; alt=&quot;&quot; width=&quot;495&quot; height=&quot;246&quot;/&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;　图2 新Inception结构&lt;/p&gt;

&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;GoogLeNet网络结构&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　利用上述Inception模块构建GoogLeNet，实验表明Inception模块出现在高层特征抽象时会更加有效（我理解由于其结构特点，更适合提取高阶特征，让它提取低阶特征会导致特征信息丢失），所以在低层依然使用传统卷积层。整个网路结构如下：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/853467/201712/853467-20171220144814271-919840711.png&quot; alt=&quot;&quot; width=&quot;607&quot; height=&quot;334&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; 图3 GoogLeNet网络结构&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/853467/201712/853467-20171220144902865-2058783214.png&quot; alt=&quot;&quot; width=&quot;510&quot; height=&quot;1933&quot;/&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;　图4 GoogLeNet详细网络结构示意图&lt;/p&gt;
&lt;p data-anchor-id=&quot;s3xl&quot;&gt;&lt;span&gt;网络说明：&lt;/span&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul data-anchor-id=&quot;8qx7&quot;&gt;&lt;li&gt;&lt;span&gt;所有卷积层均使用ReLU激活函数，包括做了1×1卷积降维后的激活；&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;移除全连接层，像NIN一样使用Global Average Pooling，使得Top 1准确率提高0.6%，但由于GAP与类别数目有关系，为了方便大家做模型fine-tuning，最后加了一个全连接层；&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;与前面的ResNet类似，实验观察到，相对浅层的神经网络层对模型效果有较大的贡献，训练阶段通过对Inception(4a、4d)增加两个额外的分类器来增强反向传播时的梯度信号，但最重要的还是正则化作用，这一点在GoogLeNet v3中得到实验证实，并间接证实了GoogLeNet V2中BN的正则化作用，这两个分类器的loss会以0.3的权重加在整体loss上，在模型inference阶段，这两个分类器会被去掉；&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;用于降维的1×1卷积核个数为128个；&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;全连接层使用1024个神经元；&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;使用丢弃概率为0.7的Dropout层；&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;p data-anchor-id=&quot;enx1&quot;&gt;&lt;span&gt;网络结构详细说明： &lt;/span&gt;&lt;/p&gt;
&lt;p data-anchor-id=&quot;enx1&quot;&gt;&lt;span&gt;　　输入数据为224×224×3的RGB图像，图中&quot;S&quot;代表做same-padding，&quot;V&quot;代表不做。&lt;/span&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul data-anchor-id=&quot;z1j8&quot;&gt;&lt;li&gt;&lt;span&gt;C1卷积层：64个7×7卷积核(stride=2，padding=3)，输出为：112×112×64；&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;P1抽样层：64个3×3卷积核(stride=2)，输出为56×56×64，其中：56=(112-3+1)/2+1&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;C2卷积层：192个3×3卷积核(stride=1，padding=1)，输出为：56×56×192；&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;P2抽样层：192个3×3卷积核(stride=2)，输出为28×28×192，其中：28=(56-3+1)/2+1，接着数据被分出4个分支，进入Inception (3a)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;Inception (3a)：由4部分组成 &lt;br/&gt;&lt;/span&gt;
&lt;ul data-anchor-id=&quot;z1j8&quot;&gt;&lt;li&gt;&lt;span&gt;64个1×1的卷积核，输出为28×28×64;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;96个1×1的卷积核做降维，输出为28×28×96，之后128个3×3卷积核(stride=1，padding=1)，输出为：28×28×128&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;16个1×1的卷积核做降维，输出为28×28×16，之后32个5×5卷积核(stride=1，padding=2)，输出为：28×28×32&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;192个3×3卷积核(stride=1，padding=1)，输出为28×28×192，进行32个1×1卷积核，输出为：28×28×32 &lt;/span&gt;&lt;br/&gt;&lt;span&gt;最后对4个分支的输出做“深度”方向组合，得到输出28×28×256，接着数据被分出4个分支，进入Inception (3b)；&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;Inception (3b)：由4部分组成 &lt;/span&gt;&lt;br/&gt;&lt;ul data-anchor-id=&quot;z1j8&quot;&gt;&lt;li&gt;&lt;span&gt;128个1×1的卷积核，输出为28×28×128;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;128个1×1的卷积核做降维，输出为28×28×128，进行192个3×3卷积核(stride=1，padding=1)，输出为：28×28×192&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;32个1×1的卷积核做降维，输出为28×28×32，进行96个5×5卷积核(stride=1，padding=2)，输出为：28×28×96&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;256个3×3卷积核(stride=1，padding=1)，输出为28×28×256，进行64个1×1卷积核，输出为：28×28×64 &lt;/span&gt;&lt;br/&gt;&lt;span&gt;最后对4个分支的输出做“深度”方向组合，得到输出28×28×480； &lt;/span&gt;&lt;br/&gt;&lt;span&gt;后面结构以此类推。&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;用PaddlePaddle实现GoogLeNet&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　1.网络结构 &lt;a href=&quot;https://github.com/PaddlePaddle/models/blob/develop/image_classification/googlenet.py&quot; target=&quot;_blank&quot;&gt;googlenet.py&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　在PaddlePaddle的models下面，有关于GoogLeNet的实现代码，大家可以直接学习拿来跑一下：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;233&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; paddle.v2 as paddle
&lt;/span&gt;&lt;span&gt;  2&lt;/span&gt; 
&lt;span&gt;  3&lt;/span&gt; &lt;span&gt;__all__&lt;/span&gt; = [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;googlenet&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]
&lt;/span&gt;&lt;span&gt;  4&lt;/span&gt; 
&lt;span&gt;  5&lt;/span&gt; 
&lt;span&gt;  6&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; inception(name, input, channels, filter1, filter3R, filter3, filter5R,
&lt;/span&gt;&lt;span&gt;  7&lt;/span&gt; &lt;span&gt;              filter5, proj):
&lt;/span&gt;&lt;span&gt;  8&lt;/span&gt;     cov1 =&lt;span&gt; paddle.layer.img_conv(
&lt;/span&gt;&lt;span&gt;  9&lt;/span&gt;         name=name + &lt;span&gt;'&lt;/span&gt;&lt;span&gt;_1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 10&lt;/span&gt;         input=&lt;span&gt;input,
&lt;/span&gt;&lt;span&gt; 11&lt;/span&gt;         filter_size=1&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 12&lt;/span&gt;         num_channels=&lt;span&gt;channels,
&lt;/span&gt;&lt;span&gt; 13&lt;/span&gt;         num_filters=&lt;span&gt;filter1,
&lt;/span&gt;&lt;span&gt; 14&lt;/span&gt;         stride=1&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 15&lt;/span&gt;         padding=&lt;span&gt;0)
&lt;/span&gt;&lt;span&gt; 16&lt;/span&gt; 
&lt;span&gt; 17&lt;/span&gt;     cov3r =&lt;span&gt; paddle.layer.img_conv(
&lt;/span&gt;&lt;span&gt; 18&lt;/span&gt;         name=name + &lt;span&gt;'&lt;/span&gt;&lt;span&gt;_3r&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 19&lt;/span&gt;         input=&lt;span&gt;input,
&lt;/span&gt;&lt;span&gt; 20&lt;/span&gt;         filter_size=1&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 21&lt;/span&gt;         num_channels=&lt;span&gt;channels,
&lt;/span&gt;&lt;span&gt; 22&lt;/span&gt;         num_filters=&lt;span&gt;filter3R,
&lt;/span&gt;&lt;span&gt; 23&lt;/span&gt;         stride=1&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 24&lt;/span&gt;         padding=&lt;span&gt;0)
&lt;/span&gt;&lt;span&gt; 25&lt;/span&gt;     cov3 =&lt;span&gt; paddle.layer.img_conv(
&lt;/span&gt;&lt;span&gt; 26&lt;/span&gt;         name=name + &lt;span&gt;'&lt;/span&gt;&lt;span&gt;_3&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 27&lt;/span&gt;         input=&lt;span&gt;cov3r,
&lt;/span&gt;&lt;span&gt; 28&lt;/span&gt;         filter_size=3&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 29&lt;/span&gt;         num_filters=&lt;span&gt;filter3,
&lt;/span&gt;&lt;span&gt; 30&lt;/span&gt;         stride=1&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 31&lt;/span&gt;         padding=1&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 32&lt;/span&gt; 
&lt;span&gt; 33&lt;/span&gt;     cov5r =&lt;span&gt; paddle.layer.img_conv(
&lt;/span&gt;&lt;span&gt; 34&lt;/span&gt;         name=name + &lt;span&gt;'&lt;/span&gt;&lt;span&gt;_5r&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 35&lt;/span&gt;         input=&lt;span&gt;input,
&lt;/span&gt;&lt;span&gt; 36&lt;/span&gt;         filter_size=1&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 37&lt;/span&gt;         num_channels=&lt;span&gt;channels,
&lt;/span&gt;&lt;span&gt; 38&lt;/span&gt;         num_filters=&lt;span&gt;filter5R,
&lt;/span&gt;&lt;span&gt; 39&lt;/span&gt;         stride=1&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 40&lt;/span&gt;         padding=&lt;span&gt;0)
&lt;/span&gt;&lt;span&gt; 41&lt;/span&gt;     cov5 =&lt;span&gt; paddle.layer.img_conv(
&lt;/span&gt;&lt;span&gt; 42&lt;/span&gt;         name=name + &lt;span&gt;'&lt;/span&gt;&lt;span&gt;_5&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 43&lt;/span&gt;         input=&lt;span&gt;cov5r,
&lt;/span&gt;&lt;span&gt; 44&lt;/span&gt;         filter_size=5&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 45&lt;/span&gt;         num_filters=&lt;span&gt;filter5,
&lt;/span&gt;&lt;span&gt; 46&lt;/span&gt;         stride=1&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 47&lt;/span&gt;         padding=2&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 48&lt;/span&gt; 
&lt;span&gt; 49&lt;/span&gt;     pool1 =&lt;span&gt; paddle.layer.img_pool(
&lt;/span&gt;&lt;span&gt; 50&lt;/span&gt;         name=name + &lt;span&gt;'&lt;/span&gt;&lt;span&gt;_max&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 51&lt;/span&gt;         input=&lt;span&gt;input,
&lt;/span&gt;&lt;span&gt; 52&lt;/span&gt;         pool_size=3&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 53&lt;/span&gt;         num_channels=&lt;span&gt;channels,
&lt;/span&gt;&lt;span&gt; 54&lt;/span&gt;         stride=1&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 55&lt;/span&gt;         padding=1&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 56&lt;/span&gt;     covprj =&lt;span&gt; paddle.layer.img_conv(
&lt;/span&gt;&lt;span&gt; 57&lt;/span&gt;         name=name + &lt;span&gt;'&lt;/span&gt;&lt;span&gt;_proj&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 58&lt;/span&gt;         input=&lt;span&gt;pool1,
&lt;/span&gt;&lt;span&gt; 59&lt;/span&gt;         filter_size=1&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 60&lt;/span&gt;         num_filters=&lt;span&gt;proj,
&lt;/span&gt;&lt;span&gt; 61&lt;/span&gt;         stride=1&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 62&lt;/span&gt;         padding=&lt;span&gt;0)
&lt;/span&gt;&lt;span&gt; 63&lt;/span&gt; 
&lt;span&gt; 64&lt;/span&gt;     cat = paddle.layer.concat(name=name, input=&lt;span&gt;[cov1, cov3, cov5, covprj])
&lt;/span&gt;&lt;span&gt; 65&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; cat
&lt;/span&gt;&lt;span&gt; 66&lt;/span&gt; 
&lt;span&gt; 67&lt;/span&gt; 
&lt;span&gt; 68&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; googlenet(input, class_dim):
&lt;/span&gt;&lt;span&gt; 69&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; stage 1&lt;/span&gt;
&lt;span&gt; 70&lt;/span&gt;     conv1 =&lt;span&gt; paddle.layer.img_conv(
&lt;/span&gt;&lt;span&gt; 71&lt;/span&gt;         name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;conv1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 72&lt;/span&gt;         input=&lt;span&gt;input,
&lt;/span&gt;&lt;span&gt; 73&lt;/span&gt;         filter_size=7&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 74&lt;/span&gt;         num_channels=3&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 75&lt;/span&gt;         num_filters=64&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 76&lt;/span&gt;         stride=2&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 77&lt;/span&gt;         padding=3&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 78&lt;/span&gt;     pool1 =&lt;span&gt; paddle.layer.img_pool(
&lt;/span&gt;&lt;span&gt; 79&lt;/span&gt;         name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;pool1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, input=conv1, pool_size=3, num_channels=64, stride=2&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 80&lt;/span&gt; 
&lt;span&gt; 81&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; stage 2&lt;/span&gt;
&lt;span&gt; 82&lt;/span&gt;     conv2_1 =&lt;span&gt; paddle.layer.img_conv(
&lt;/span&gt;&lt;span&gt; 83&lt;/span&gt;         name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;conv2_1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 84&lt;/span&gt;         input=&lt;span&gt;pool1,
&lt;/span&gt;&lt;span&gt; 85&lt;/span&gt;         filter_size=1&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 86&lt;/span&gt;         num_filters=64&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 87&lt;/span&gt;         stride=1&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 88&lt;/span&gt;         padding=&lt;span&gt;0)
&lt;/span&gt;&lt;span&gt; 89&lt;/span&gt;     conv2_2 =&lt;span&gt; paddle.layer.img_conv(
&lt;/span&gt;&lt;span&gt; 90&lt;/span&gt;         name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;conv2_2&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 91&lt;/span&gt;         input=&lt;span&gt;conv2_1,
&lt;/span&gt;&lt;span&gt; 92&lt;/span&gt;         filter_size=3&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 93&lt;/span&gt;         num_filters=192&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 94&lt;/span&gt;         stride=1&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 95&lt;/span&gt;         padding=1&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 96&lt;/span&gt;     pool2 =&lt;span&gt; paddle.layer.img_pool(
&lt;/span&gt;&lt;span&gt; 97&lt;/span&gt;         name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;pool2&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, input=conv2_2, pool_size=3, num_channels=192, stride=2&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 98&lt;/span&gt; 
&lt;span&gt; 99&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; stage 3&lt;/span&gt;
&lt;span&gt;100&lt;/span&gt;     ince3a = inception(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ince3a&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, pool2, 192, 64, 96, 128, 16, 32, 32&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;101&lt;/span&gt;     ince3b = inception(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ince3b&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, ince3a, 256, 128, 128, 192, 32, 96, 64&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;102&lt;/span&gt;     pool3 =&lt;span&gt; paddle.layer.img_pool(
&lt;/span&gt;&lt;span&gt;103&lt;/span&gt;         name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;pool3&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, input=ince3b, num_channels=480, pool_size=3, stride=2&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;104&lt;/span&gt; 
&lt;span&gt;105&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; stage 4&lt;/span&gt;
&lt;span&gt;106&lt;/span&gt;     ince4a = inception(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ince4a&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, pool3, 480, 192, 96, 208, 16, 48, 64&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;107&lt;/span&gt;     ince4b = inception(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ince4b&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, ince4a, 512, 160, 112, 224, 24, 64, 64&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;108&lt;/span&gt;     ince4c = inception(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ince4c&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, ince4b, 512, 128, 128, 256, 24, 64, 64&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;109&lt;/span&gt;     ince4d = inception(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ince4d&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, ince4c, 512, 112, 144, 288, 32, 64, 64&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;110&lt;/span&gt;     ince4e = inception(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ince4e&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, ince4d, 528, 256, 160, 320, 32, 128, 128&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;111&lt;/span&gt;     pool4 =&lt;span&gt; paddle.layer.img_pool(
&lt;/span&gt;&lt;span&gt;112&lt;/span&gt;         name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;pool4&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, input=ince4e, num_channels=832, pool_size=3, stride=2&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;113&lt;/span&gt; 
&lt;span&gt;114&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; stage 5&lt;/span&gt;
&lt;span&gt;115&lt;/span&gt;     ince5a = inception(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ince5a&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, pool4, 832, 256, 160, 320, 32, 128, 128&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;116&lt;/span&gt;     ince5b = inception(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ince5b&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, ince5a, 832, 384, 192, 384, 48, 128, 128&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;117&lt;/span&gt;     pool5 =&lt;span&gt; paddle.layer.img_pool(
&lt;/span&gt;&lt;span&gt;118&lt;/span&gt;         name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;pool5&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;119&lt;/span&gt;         input=&lt;span&gt;ince5b,
&lt;/span&gt;&lt;span&gt;120&lt;/span&gt;         num_channels=1024&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;121&lt;/span&gt;         pool_size=7&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;122&lt;/span&gt;         stride=7&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;123&lt;/span&gt;         pool_type=&lt;span&gt;paddle.pooling.Avg())
&lt;/span&gt;&lt;span&gt;124&lt;/span&gt;     dropout =&lt;span&gt; paddle.layer.addto(
&lt;/span&gt;&lt;span&gt;125&lt;/span&gt;         input=&lt;span&gt;pool5,
&lt;/span&gt;&lt;span&gt;126&lt;/span&gt;         layer_attr=paddle.attr.Extra(drop_rate=0.4&lt;span&gt;),
&lt;/span&gt;&lt;span&gt;127&lt;/span&gt;         act=&lt;span&gt;paddle.activation.Linear())
&lt;/span&gt;&lt;span&gt;128&lt;/span&gt; 
&lt;span&gt;129&lt;/span&gt;     out =&lt;span&gt; paddle.layer.fc(
&lt;/span&gt;&lt;span&gt;130&lt;/span&gt;         input=dropout, size=class_dim, act=&lt;span&gt;paddle.activation.Softmax())
&lt;/span&gt;&lt;span&gt;131&lt;/span&gt; 
&lt;span&gt;132&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; fc for output 1&lt;/span&gt;
&lt;span&gt;133&lt;/span&gt;     pool_o1 =&lt;span&gt; paddle.layer.img_pool(
&lt;/span&gt;&lt;span&gt;134&lt;/span&gt;         name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;pool_o1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;135&lt;/span&gt;         input=&lt;span&gt;ince4a,
&lt;/span&gt;&lt;span&gt;136&lt;/span&gt;         num_channels=512&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;137&lt;/span&gt;         pool_size=5&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;138&lt;/span&gt;         stride=3&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;139&lt;/span&gt;         pool_type=&lt;span&gt;paddle.pooling.Avg())
&lt;/span&gt;&lt;span&gt;140&lt;/span&gt;     conv_o1 =&lt;span&gt; paddle.layer.img_conv(
&lt;/span&gt;&lt;span&gt;141&lt;/span&gt;         name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;conv_o1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;142&lt;/span&gt;         input=&lt;span&gt;pool_o1,
&lt;/span&gt;&lt;span&gt;143&lt;/span&gt;         filter_size=1&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;144&lt;/span&gt;         num_filters=128&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;145&lt;/span&gt;         stride=1&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;146&lt;/span&gt;         padding=&lt;span&gt;0)
&lt;/span&gt;&lt;span&gt;147&lt;/span&gt;     fc_o1 =&lt;span&gt; paddle.layer.fc(
&lt;/span&gt;&lt;span&gt;148&lt;/span&gt;         name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;fc_o1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;149&lt;/span&gt;         input=&lt;span&gt;conv_o1,
&lt;/span&gt;&lt;span&gt;150&lt;/span&gt;         size=1024&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;151&lt;/span&gt;         layer_attr=paddle.attr.Extra(drop_rate=0.7&lt;span&gt;),
&lt;/span&gt;&lt;span&gt;152&lt;/span&gt;         act=&lt;span&gt;paddle.activation.Relu())
&lt;/span&gt;&lt;span&gt;153&lt;/span&gt;     out1 =&lt;span&gt; paddle.layer.fc(
&lt;/span&gt;&lt;span&gt;154&lt;/span&gt;         input=fc_o1, size=class_dim, act=&lt;span&gt;paddle.activation.Softmax())
&lt;/span&gt;&lt;span&gt;155&lt;/span&gt; 
&lt;span&gt;156&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; fc for output 2&lt;/span&gt;
&lt;span&gt;157&lt;/span&gt;     pool_o2 =&lt;span&gt; paddle.layer.img_pool(
&lt;/span&gt;&lt;span&gt;158&lt;/span&gt;         name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;pool_o2&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;159&lt;/span&gt;         input=&lt;span&gt;ince4d,
&lt;/span&gt;&lt;span&gt;160&lt;/span&gt;         num_channels=528&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;161&lt;/span&gt;         pool_size=5&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;162&lt;/span&gt;         stride=3&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;163&lt;/span&gt;         pool_type=&lt;span&gt;paddle.pooling.Avg())
&lt;/span&gt;&lt;span&gt;164&lt;/span&gt;     conv_o2 =&lt;span&gt; paddle.layer.img_conv(
&lt;/span&gt;&lt;span&gt;165&lt;/span&gt;         name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;conv_o2&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;166&lt;/span&gt;         input=&lt;span&gt;pool_o2,
&lt;/span&gt;&lt;span&gt;167&lt;/span&gt;         filter_size=1&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;168&lt;/span&gt;         num_filters=128&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;169&lt;/span&gt;         stride=1&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;170&lt;/span&gt;         padding=&lt;span&gt;0)
&lt;/span&gt;&lt;span&gt;171&lt;/span&gt;     fc_o2 =&lt;span&gt; paddle.layer.fc(
&lt;/span&gt;&lt;span&gt;172&lt;/span&gt;         name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;fc_o2&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;173&lt;/span&gt;         input=&lt;span&gt;conv_o2,
&lt;/span&gt;&lt;span&gt;174&lt;/span&gt;         size=1024&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;175&lt;/span&gt;         layer_attr=paddle.attr.Extra(drop_rate=0.7&lt;span&gt;),
&lt;/span&gt;&lt;span&gt;176&lt;/span&gt;         act=&lt;span&gt;paddle.activation.Relu())
&lt;/span&gt;&lt;span&gt;177&lt;/span&gt;     out2 =&lt;span&gt; paddle.layer.fc(
&lt;/span&gt;&lt;span&gt;178&lt;/span&gt;         input=fc_o2, size=class_dim, act=&lt;span&gt;paddle.activation.Softmax())
&lt;/span&gt;&lt;span&gt;179&lt;/span&gt; 
&lt;span&gt;180&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; out, out1, out2
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;　　&lt;span&gt;2.训练模型&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;90&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; gzip
&lt;/span&gt;&lt;span&gt;  2&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; paddle.v2.dataset.flowers as flowers
&lt;/span&gt;&lt;span&gt;  3&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; paddle.v2 as paddle
&lt;/span&gt;&lt;span&gt;  4&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; reader
&lt;/span&gt;&lt;span&gt;  5&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; vgg
&lt;/span&gt;&lt;span&gt;  6&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; resnet
&lt;/span&gt;&lt;span&gt;  7&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; alexnet
&lt;/span&gt;&lt;span&gt;  8&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; googlenet
&lt;/span&gt;&lt;span&gt;  9&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; argparse
&lt;/span&gt;&lt;span&gt; 10&lt;/span&gt; 
&lt;span&gt; 11&lt;/span&gt; DATA_DIM = 3 * 224 * 224
&lt;span&gt; 12&lt;/span&gt; CLASS_DIM = 102
&lt;span&gt; 13&lt;/span&gt; BATCH_SIZE = 128
&lt;span&gt; 14&lt;/span&gt; 
&lt;span&gt; 15&lt;/span&gt; 
&lt;span&gt; 16&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; main():
&lt;/span&gt;&lt;span&gt; 17&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; parse the argument&lt;/span&gt;
&lt;span&gt; 18&lt;/span&gt;     parser =&lt;span&gt; argparse.ArgumentParser()
&lt;/span&gt;&lt;span&gt; 19&lt;/span&gt; &lt;span&gt;    parser.add_argument(
&lt;/span&gt;&lt;span&gt; 20&lt;/span&gt;         &lt;span&gt;'&lt;/span&gt;&lt;span&gt;model&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 21&lt;/span&gt;         help=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;The model for image classification&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 22&lt;/span&gt;         choices=[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;alexnet&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;vgg13&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;vgg16&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;vgg19&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;resnet&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;googlenet&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;])
&lt;/span&gt;&lt;span&gt; 23&lt;/span&gt;     args =&lt;span&gt; parser.parse_args()
&lt;/span&gt;&lt;span&gt; 24&lt;/span&gt; 
&lt;span&gt; 25&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; PaddlePaddle init&lt;/span&gt;
&lt;span&gt; 26&lt;/span&gt;     paddle.init(use_gpu=True, trainer_count=7&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 27&lt;/span&gt; 
&lt;span&gt; 28&lt;/span&gt;     image =&lt;span&gt; paddle.layer.data(
&lt;/span&gt;&lt;span&gt; 29&lt;/span&gt;         name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;image&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, type=&lt;span&gt;paddle.data_type.dense_vector(DATA_DIM))
&lt;/span&gt;&lt;span&gt; 30&lt;/span&gt;     lbl =&lt;span&gt; paddle.layer.data(
&lt;/span&gt;&lt;span&gt; 31&lt;/span&gt;         name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;label&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, type=&lt;span&gt;paddle.data_type.integer_value(CLASS_DIM))
&lt;/span&gt;&lt;span&gt; 32&lt;/span&gt; 
&lt;span&gt; 33&lt;/span&gt;     extra_layers =&lt;span&gt; None
&lt;/span&gt;&lt;span&gt; 34&lt;/span&gt;     learning_rate = 0.01
&lt;span&gt; 35&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; args.model == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;alexnet&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt; 36&lt;/span&gt;         out = alexnet.alexnet(image, class_dim=&lt;span&gt;CLASS_DIM)
&lt;/span&gt;&lt;span&gt; 37&lt;/span&gt;     &lt;span&gt;elif&lt;/span&gt; args.model == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;vgg13&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt; 38&lt;/span&gt;         out = vgg.vgg13(image, class_dim=&lt;span&gt;CLASS_DIM)
&lt;/span&gt;&lt;span&gt; 39&lt;/span&gt;     &lt;span&gt;elif&lt;/span&gt; args.model == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;vgg16&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt; 40&lt;/span&gt;         out = vgg.vgg16(image, class_dim=&lt;span&gt;CLASS_DIM)
&lt;/span&gt;&lt;span&gt; 41&lt;/span&gt;     &lt;span&gt;elif&lt;/span&gt; args.model == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;vgg19&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt; 42&lt;/span&gt;         out = vgg.vgg19(image, class_dim=&lt;span&gt;CLASS_DIM)
&lt;/span&gt;&lt;span&gt; 43&lt;/span&gt;     &lt;span&gt;elif&lt;/span&gt; args.model == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;resnet&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt; 44&lt;/span&gt;         out = resnet.resnet_imagenet(image, class_dim=&lt;span&gt;CLASS_DIM)
&lt;/span&gt;&lt;span&gt; 45&lt;/span&gt;         learning_rate = 0.1
&lt;span&gt; 46&lt;/span&gt;     &lt;span&gt;elif&lt;/span&gt; args.model == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;googlenet&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt; 47&lt;/span&gt;         out, out1, out2 = googlenet.googlenet(image, class_dim=&lt;span&gt;CLASS_DIM)
&lt;/span&gt;&lt;span&gt; 48&lt;/span&gt;         loss1 =&lt;span&gt; paddle.layer.cross_entropy_cost(
&lt;/span&gt;&lt;span&gt; 49&lt;/span&gt;             input=out1, label=lbl, coeff=0.3&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 50&lt;/span&gt;         paddle.evaluator.classification_error(input=out1, label=&lt;span&gt;lbl)
&lt;/span&gt;&lt;span&gt; 51&lt;/span&gt;         loss2 =&lt;span&gt; paddle.layer.cross_entropy_cost(
&lt;/span&gt;&lt;span&gt; 52&lt;/span&gt;             input=out2, label=lbl, coeff=0.3&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 53&lt;/span&gt;         paddle.evaluator.classification_error(input=out2, label=&lt;span&gt;lbl)
&lt;/span&gt;&lt;span&gt; 54&lt;/span&gt;         extra_layers =&lt;span&gt; [loss1, loss2]
&lt;/span&gt;&lt;span&gt; 55&lt;/span&gt; 
&lt;span&gt; 56&lt;/span&gt;     cost = paddle.layer.classification_cost(input=out, label=&lt;span&gt;lbl)
&lt;/span&gt;&lt;span&gt; 57&lt;/span&gt; 
&lt;span&gt; 58&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; Create parameters&lt;/span&gt;
&lt;span&gt; 59&lt;/span&gt;     parameters =&lt;span&gt; paddle.parameters.create(cost)
&lt;/span&gt;&lt;span&gt; 60&lt;/span&gt; 
&lt;span&gt; 61&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; Create optimizer&lt;/span&gt;
&lt;span&gt; 62&lt;/span&gt;     optimizer =&lt;span&gt; paddle.optimizer.Momentum(
&lt;/span&gt;&lt;span&gt; 63&lt;/span&gt;         momentum=0.9&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 64&lt;/span&gt;         regularization=paddle.optimizer.L2Regularization(rate=0.0005 *
&lt;span&gt; 65&lt;/span&gt; &lt;span&gt;                                                         BATCH_SIZE),
&lt;/span&gt;&lt;span&gt; 66&lt;/span&gt;         learning_rate=learning_rate /&lt;span&gt; BATCH_SIZE,
&lt;/span&gt;&lt;span&gt; 67&lt;/span&gt;         learning_rate_decay_a=0.1&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 68&lt;/span&gt;         learning_rate_decay_b=128000 * 35&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 69&lt;/span&gt;         learning_rate_schedule=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;discexp&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, )
&lt;/span&gt;&lt;span&gt; 70&lt;/span&gt; 
&lt;span&gt; 71&lt;/span&gt;     train_reader =&lt;span&gt; paddle.batch(
&lt;/span&gt;&lt;span&gt; 72&lt;/span&gt; &lt;span&gt;        paddle.reader.shuffle(
&lt;/span&gt;&lt;span&gt; 73&lt;/span&gt; &lt;span&gt;            flowers.train(),
&lt;/span&gt;&lt;span&gt; 74&lt;/span&gt;             &lt;span&gt;#&lt;/span&gt;&lt;span&gt; To use other data, replace the above line with:&lt;/span&gt;
&lt;span&gt; 75&lt;/span&gt;             &lt;span&gt;#&lt;/span&gt;&lt;span&gt; reader.train_reader('train.list'),&lt;/span&gt;
&lt;span&gt; 76&lt;/span&gt;             buf_size=1000&lt;span&gt;),
&lt;/span&gt;&lt;span&gt; 77&lt;/span&gt;         batch_size=&lt;span&gt;BATCH_SIZE)
&lt;/span&gt;&lt;span&gt; 78&lt;/span&gt;     test_reader =&lt;span&gt; paddle.batch(
&lt;/span&gt;&lt;span&gt; 79&lt;/span&gt; &lt;span&gt;        flowers.valid(),
&lt;/span&gt;&lt;span&gt; 80&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; To use other data, replace the above line with:&lt;/span&gt;
&lt;span&gt; 81&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; reader.test_reader('val.list'),&lt;/span&gt;
&lt;span&gt; 82&lt;/span&gt;         batch_size=&lt;span&gt;BATCH_SIZE)
&lt;/span&gt;&lt;span&gt; 83&lt;/span&gt; 
&lt;span&gt; 84&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; Create trainer&lt;/span&gt;
&lt;span&gt; 85&lt;/span&gt;     trainer =&lt;span&gt; paddle.trainer.SGD(
&lt;/span&gt;&lt;span&gt; 86&lt;/span&gt;         cost=&lt;span&gt;cost,
&lt;/span&gt;&lt;span&gt; 87&lt;/span&gt;         parameters=&lt;span&gt;parameters,
&lt;/span&gt;&lt;span&gt; 88&lt;/span&gt;         update_equation=&lt;span&gt;optimizer,
&lt;/span&gt;&lt;span&gt; 89&lt;/span&gt;         extra_layers=&lt;span&gt;extra_layers)
&lt;/span&gt;&lt;span&gt; 90&lt;/span&gt; 
&lt;span&gt; 91&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; End batch and end pass event handler&lt;/span&gt;
&lt;span&gt; 92&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt;&lt;span&gt; event_handler(event):
&lt;/span&gt;&lt;span&gt; 93&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;&lt;span&gt; isinstance(event, paddle.event.EndIteration):
&lt;/span&gt;&lt;span&gt; 94&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; event.batch_id % 1 ==&lt;span&gt; 0:
&lt;/span&gt;&lt;span&gt; 95&lt;/span&gt;                 &lt;span&gt;print&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;\nPass %d, Batch %d, Cost %f, %s&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; %&lt;span&gt; (
&lt;/span&gt;&lt;span&gt; 96&lt;/span&gt; &lt;span&gt;                    event.pass_id, event.batch_id, event.cost, event.metrics)
&lt;/span&gt;&lt;span&gt; 97&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;&lt;span&gt; isinstance(event, paddle.event.EndPass):
&lt;/span&gt;&lt;span&gt; 98&lt;/span&gt;             with gzip.open(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;params_pass_%d.tar.gz&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; % event.pass_id, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;w&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;) as f:
&lt;/span&gt;&lt;span&gt; 99&lt;/span&gt; &lt;span&gt;                trainer.save_parameter_to_tar(f)
&lt;/span&gt;&lt;span&gt;100&lt;/span&gt; 
&lt;span&gt;101&lt;/span&gt;             result = trainer.test(reader=&lt;span&gt;test_reader)
&lt;/span&gt;&lt;span&gt;102&lt;/span&gt;             &lt;span&gt;print&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;\nTest with Pass %d, %s&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; %&lt;span&gt; (event.pass_id, result.metrics)
&lt;/span&gt;&lt;span&gt;103&lt;/span&gt; 
&lt;span&gt;104&lt;/span&gt; &lt;span&gt;    trainer.train(
&lt;/span&gt;&lt;span&gt;105&lt;/span&gt;         reader=train_reader, num_passes=200, event_handler=&lt;span&gt;event_handler)
&lt;/span&gt;&lt;span&gt;106&lt;/span&gt; 
&lt;span&gt;107&lt;/span&gt; 
&lt;span&gt;108&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; &lt;span&gt;__name__&lt;/span&gt; == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__main__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;109&lt;/span&gt;     main()
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　&lt;span&gt;3.运行方式&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; python train.py googlenet
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　其中最后的googlenet是可选的网络模型，输入其他的网络模型，如alexnet、vgg3、vgg6等就可以用不同的网络结构来训练了。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;　&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;用Tensorflow实现GoogLeNet&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;　　&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;span&gt;tensorflow的实现在models里有非常详细的代码，这里就不全部贴出来了，大家可以在&lt;span class=&quot;repo-root js-repo-root&quot;&gt;&lt;span class=&quot;js-path-segment&quot;&gt;&lt;a href=&quot;https://github.com/tensorflow/models/tree/master/research/slim/nets&quot; target=&quot;_blank&quot;&gt;models&lt;/a&gt;&lt;span class=&quot;separator&quot;&gt;&lt;a href=&quot;https://github.com/tensorflow/models/tree/master/research/slim/nets&quot; target=&quot;_blank&quot;&gt;/&lt;/a&gt;&lt;span class=&quot;js-path-segment&quot;&gt;&lt;a href=&quot;https://github.com/tensorflow/models/tree/master/research/slim/nets&quot; target=&quot;_blank&quot;&gt;research&lt;/a&gt;&lt;span class=&quot;separator&quot;&gt;&lt;a href=&quot;https://github.com/tensorflow/models/tree/master/research/slim/nets&quot; target=&quot;_blank&quot;&gt;/&lt;/a&gt;&lt;span class=&quot;js-path-segment&quot;&gt;&lt;a href=&quot;https://github.com/tensorflow/models/tree/master/research/slim/nets&quot; target=&quot;_blank&quot;&gt;slim&lt;/a&gt;&lt;span class=&quot;separator&quot;&gt;&lt;a href=&quot;https://github.com/tensorflow/models/tree/master/research/slim/nets&quot; target=&quot;_blank&quot;&gt;/&lt;/a&gt;&lt;span class=&quot;final-path&quot;&gt;&lt;a href=&quot;https://github.com/tensorflow/models/tree/master/research/slim/nets&quot; target=&quot;_blank&quot;&gt;nets&lt;/a&gt;&lt;span class=&quot;separator&quot;&gt;&lt;a href=&quot;https://github.com/tensorflow/models/tree/master/research/slim/nets&quot; target=&quot;_blank&quot;&gt;/ &lt;/a&gt;里详细看看，关于InceptionV1~InceptionV4的实现都有。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;ps:这里的slim不是tensorflow的contrib下的slim，是models下的slim，别弄混了，slim可以理解为Tensorflow的一个高阶api，在构建这些复杂的网络结构时，可以直接调用slim封装好的网络结构就可以了，而不需要从头开始写整个网络结构。关于slim的详细大家可以在网上搜索，非常方便。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;总结&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　其实GoogLeNet的最关键的一点就是提出了Inception结构，这有个什么好处呢，原来你想要提高准确率，需要堆叠更深的层，增加神经元个数等，堆叠到一定层可能结果的准确率就提不上去了，因为参数更多了啊，模型更复杂，更容易过拟合了，但是在实验中转向了更稀疏但是更精密的结构同样可以达到很好的效果，说明我们可以照着这个思路走，继续做，所以后面会有InceptionV2 ,V3,V4等，它表现的结果也非常好。给我们传统的通过堆叠层提高准确率的想法提供了一个新的思路。&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Wed, 20 Dec 2017 07:55:00 +0000</pubDate>
<dc:creator>Charlotte77</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/charlotte77/p/8066867.html</dc:identifier>
</item>
<item>
<title>闲话权限系统的设计 - 深蓝医生</title>
<link>http://www.cnblogs.com/bluedoctor/p/8073466.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/bluedoctor/p/8073466.html</guid>
<description>&lt;p&gt;权限管理，首先要理清权限的本质：&lt;strong&gt;权限就是对受保护资源的有限许可访问。&lt;/strong&gt;&lt;br/&gt;理解了权限的本质，就好谈权限的管理了。&lt;/p&gt;
&lt;p&gt;权限就是对受保护资源的有限许可访问--这句话包含两层含义：&lt;br/&gt;1，受保护的资源&lt;br/&gt;2，有限的许可访问&lt;/p&gt;
&lt;p&gt;但，本质上谈的都是对资源的访问，所以探讨权限问题，首先要定义资源。&lt;/p&gt;

&lt;p&gt;    资源是一个抽象的概念，按照百科的词条解释，“资源”是指一国或一定地区内拥有的物力、财力、人力等各种物质要素的总称。分为自然资源和社会资源两大类。前者如阳光、空气、水、土地、森林、草原、动物、矿藏等；后者包括人力资源、信息资源以及经过劳动创造的各种物质财富等。&lt;br/&gt;    在计算机软件中，资源指的是软件使用过程中使用的各种对象，功能，文件，网络等各种要素的总称。比如一个按钮所操作功能也算是一种资源；这样，菜单，按钮，页面等等，都可以算是资源。甚至，数据库的某个字段，也是资源。如果按照RESTFull API的思路去理解资源可能更好理解。&lt;/p&gt;
&lt;h2&gt;2.1 资源的识别&lt;/h2&gt;
&lt;p&gt;    资源多了，管理起来也有点麻烦，比如一个软件有很多按钮，要搞清楚这些按钮是比较困难的。把资源硬编码一个代号，对资源进行命名，对一类资源进行组织归类，这样复杂的系统就好管理了。&lt;/p&gt;
&lt;h2&gt;2.2 有限的资源&lt;/h2&gt;
&lt;p&gt;资源有很多，但并不是所有资源都是我们在当前领域需要关心的，我们要从所有资源中，整理出那些是受保护的有限资源。&lt;br/&gt;两个定语：受保护，有限。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;公开的且无限的资源，不需要保护了（当然不是完全不需要），比如阳光，比如以前的空气。但是，随着工业化的发展，空气也越来越需要保护了。&lt;br/&gt;水资源，虽说是公开的，但是它是有限的，所以需要严格保护。野生动物，森林，都是需要保护的，它们的数量都是有限的。&lt;br/&gt;由于人类活动范围的持续增大，几乎地球上所有的资源都不够了，总有一天，阳光也会成为稀缺的资源。所以，资源总是给人一种有限的感觉。&lt;/p&gt;
&lt;p&gt;正因为资源是有限的特点，我们不能随意并且大量的使用，所以需要对这些资源进行保护，要访问（使用）资源，需要授权。&lt;br/&gt;所以，权限就是对受保护资源的有限许可访问&lt;/p&gt;

&lt;h2&gt;3.1 权限的分类&lt;/h2&gt;
&lt;p&gt; 权限并不是一个独立的东西，它不是主体，是客体，所以它必须依附于一个主体。所以，我们常常根据权限所依附的主体来给权限分类：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;  按照&lt;strong&gt;授权方式区分&lt;/strong&gt;的权限类型：部门权限，人员权限，角色权限。&lt;/li&gt;
&lt;li&gt;  按照&lt;strong&gt;软件层级区分&lt;/strong&gt;：功能权限，业务权限，数据权限。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;br/&gt;功能权限是指可访问的页面、菜单、按钮等，这些功能一般都在软件的“视图层”；&lt;br/&gt;业务权限是指可以处理的一类业务，通常包含很多功能，比如一个功能，A业务可以修改，但是B业务只能查询；&lt;br/&gt;数据权限是指哪些数据可以被什么对象访问。通常在数据库级别进行控制，比如：同样一个表，员工只能查询，经理可以修改。&lt;/p&gt;
&lt;h2&gt;3.2 权限的控制模型&lt;/h2&gt;
&lt;p&gt;    权限，实质上分为权限的受体和权限的配体，权限的受体在资源对象上，而权限的配体是权限访问者持有的访问秘钥，可以用细胞分子来理解受体和配体。只有当受体和配体有效结合以后，才代表权限执行成功，被访问的资源的状态发生了改变。可以用锁来举例理解，要开锁必须有钥匙，钥匙是权限的“配体”，而锁是权限的受体。锁接受了钥匙成功进行了配对，打开了锁，于是人打开了门，进入了房间，那么房间这个资源的状态就改变了。&lt;br/&gt;    另外，权限还要区分拥有者和执行者，访问受保护资源的访问者，只要持有代表行使权限的访问秘钥，那么访问者就可以访问这个资源，也就说这个访问者有了访问这个资源的权限。&lt;br/&gt;  这里有三个关键词：&lt;strong&gt;访问者，资源，秘钥&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;  访问者就是是权限的执行者，它可以是权限的拥有者，也可以是权限拥有者授权的代理人，就像公司的董事长和总经理的关系，董事长授权总经理经营管理公司，总经理代表董事长行使公司资产使用的权利。但是不管谁来行使访问权限，都要持有访问资源的秘钥，比如银行账户的密码。其实这个过程，做过微服务权限控制，都能明白。&lt;/p&gt;
&lt;p&gt;  权限系统，跟国家的权力架构一样，也分为制定权限资源（立法），执行权限访问（司法），授予权限（行政）。组成权限系统的3个部分是相互分立，相互制约的。把权限系统的原理搞清楚了，那么设计权限系统的程序，就很简单了，能够做到完备且灵活。&lt;/p&gt;
&lt;h2&gt;3.3 权限的授权&lt;/h2&gt;
&lt;p&gt;    权限系统里面最常出现的就是角色，这叫做角色授权，当系统权限多了，势必要对权限进行一个分组（分类），这就是角色。所以，角色，仅仅是一个权限集合而已，因此授权的时候按角色授权要方便些，。但实际上，也可以按部门授权，或者按个人授权，或者，3者交叉授权。所以，最终一个系统的权限管理，复杂就复杂在这个地方，而如果权限授权不清晰，也容易出现推诿，扯皮的事情。所以，管理者授权，是很考验管理智慧的地方。&lt;/p&gt;

&lt;p&gt;权限系统分为三大部分：&lt;br/&gt;1，系统使用的资源（菜单，按钮，页面，数据等等有限的可操作可访问的对象）；&lt;br/&gt;2，权限的识别，对资源系统中找出那些是需要进行受保护访问的而不是公开可操作的资源，对这样的资源进行分组和命名；&lt;br/&gt;3，权限的授权（按角色授权，按部门授权，按个人授权等）；&lt;br/&gt; &lt;/p&gt;
&lt;p&gt;以上内容是我多年开发使用各种管理系统，并且最近跟朋友讨论的一点畅想，一家之言，仅供参考。&lt;/p&gt;

</description>
<pubDate>Wed, 20 Dec 2017 07:36:00 +0000</pubDate>
<dc:creator>深蓝医生</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/bluedoctor/p/8073466.html</dc:identifier>
</item>
<item>
<title>Cesium几个案例介绍 - shoufengwei</title>
<link>http://www.cnblogs.com/shoufengwei/p/8073922.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/shoufengwei/p/8073922.html</guid>
<description>&lt;p&gt;本文为大家介绍几个Cesium的Demo，通过这几个Demo能够对如何使用Cesium有进一步的了解，并能充分理解Cesium的强大之处和新功能。其他的无需多言，如果还不太了解什么是Cesium，可以参见我的另外两篇关于Cesium的博客，下面直接进入正题。&lt;/p&gt;

&lt;p&gt;在Cesium中可以很方便的监听前台HTML控件，类似C#等语言中的MVVM。&lt;/p&gt;
&lt;h2 id=&quot;前台控件&quot;&gt;1.1 前台控件&lt;/h2&gt;
&lt;p&gt;前台控件效果如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/704456/201712/704456-20171220151510787-1509732536.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;代码如下：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;15&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;&lt;span class=&quot;kw&quot;&gt;&amp;lt;div&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; id=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;toolbar&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;div&amp;gt;&lt;/span&gt;SRTM&lt;span class=&quot;kw&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;input&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; min=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;0&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; max=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;100&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; step=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;1&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; data-bind=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;value: srtm, valueUpdate: 'input'&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; type=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;range&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;input&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; size=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;5&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; data-bind=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;value: srtm&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; type=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;text&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;div&amp;gt;&lt;/span&gt;SLOPE&lt;span class=&quot;kw&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;input&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; min=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;0&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; max=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;100&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; step=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;1&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; data-bind=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;value: slope, valueUpdate: 'input'&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; type=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;range&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;input&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; size=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;5&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; data-bind=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;value: slope&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; type=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;text&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;div&amp;gt;&lt;/span&gt;Type&lt;span class=&quot;kw&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;select&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; data-bind=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;options: types, optionsText: 'name', value: selectedType, optionsCaption: 'Choose a Type...'&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&amp;lt;/select&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;首先创建一个div，js监测此div中的控件，重要的是id。&lt;/p&gt;
&lt;p&gt;在此div中创建input，一个或多个input对应js中的一个变量，当然此多个input之间也是相互绑定的关系。如：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;&lt;span class=&quot;kw&quot;&gt;&amp;lt;input&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; min=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;0&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; max=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;100&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; step=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;1&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; data-bind=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;value: srtm, valueUpdate: 'input'&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; type=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;range&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;input&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; size=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;5&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; data-bind=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;value: srtm&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; type=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;text&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;此二者均对应js端的srtm变量，第一个是range类型，代表一个slide控件，第二个是一个文本框，二者相互联动，只选择其中一个控件也是可以的。重要的是data-bind属性中value后的变量名称需与js中对应。&lt;/p&gt;
&lt;p&gt;当然也可以绑定一个下拉列表框：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;&lt;span class=&quot;kw&quot;&gt;&amp;lt;select&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; data-bind=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;options: types, optionsText: 'name', value: selectedType, optionsCaption: 'Choose a Type...'&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&amp;lt;/select&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这里就对应了js中的两个变量：types和selectedType。前者代表所有的可选列表及其值，后者代表选择的结果。&lt;/p&gt;
&lt;h2 id=&quot;后台&quot;&gt;1.2 后台&lt;/h2&gt;
&lt;p&gt;首先创建一个viewModel对象，里面包含上述创建的各个变量，如下：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;14&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; viewModel &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;srtm&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;slope&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;types&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; [&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;dt&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'type1'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;dt&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'100'&lt;/span&gt;
            &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;dt&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'type2'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;dt&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'200'&lt;/span&gt;
            &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
    ]&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;selectedType&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;undefined&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;};&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;而后对此变量进行监控并绑定到前台的相应控件：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;va&quot;&gt;Cesium&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;knockout&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;track&lt;/span&gt;(viewModel)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;// 跟踪此Model&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; toolbar &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;getElementById&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'toolbar'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;// 获取前端监控div&lt;/span&gt;
&lt;span class=&quot;va&quot;&gt;Cesium&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;knockout&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;applyBindings&lt;/span&gt;(viewModel&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; toolbar)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;// 绑定监控&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这样就可以监听控件的变化事件：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;va&quot;&gt;Cesium&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;knockout&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;getObservable&lt;/span&gt;(viewModel&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'srtm'&lt;/span&gt;).&lt;span class=&quot;at&quot;&gt;subscribe&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt;(value) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    ...
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可以对此值进行处理比如发送到后台或者请求相应的瓦片图层等等。不过下拉列表框的情况稍微复杂点：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;va&quot;&gt;Cesium&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;knockout&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;getObservable&lt;/span&gt;(viewModel&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'selectedType'&lt;/span&gt;).&lt;span class=&quot;at&quot;&gt;subscribe&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt;(options) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; values &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;options&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    ...
 &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;其实也就是多了一步，在定义types的时候除了name变量我们还定义了values变量，此处就需要通过options.values来取出此值，其他不变。&lt;/p&gt;

&lt;p&gt;这是Cesium 1.4.0版新添加的功能，所以一定要更新到此版本。只需要正确加载地形瓦片，Cesium可以自动算出高程设色瓦片、坡度设色瓦片以及等高线。其实也不难理解，地形瓦片中包含了空三等信息，根据这些信息自然能够计算出高度图、坡度图以及等高线，先来看效果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/704456/201712/704456-20171220151613662-43245791.jpg&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/704456/201712/704456-20171220151658209-648678290.jpg&quot;/&gt;&lt;/p&gt;
&lt;p&gt;加载地形瓦片图层无需多言，前面已经有过介绍：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;va&quot;&gt;viewer&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;terrainProvider&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;Cesium&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;CesiumTerrainProvider&lt;/span&gt;(&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;url &lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'https://assets.agi.com/stk-terrain/v1/tilesets/world/tiles'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;requestWaterMask &lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;requestVertexNormals &lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后就可以开始计算高程设色瓦片和坡度设色瓦片以及等高线，当然此块涉及到的东西太多，我只能凭借我粗浅的理解简单介绍，如有错误，望批评指正：&lt;/p&gt;
&lt;p&gt;首先来看一下生成等高线：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; contourUniforms &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{};&lt;/span&gt;
material &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;Cesium&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;Material&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;fromType&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'ElevationContour'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
contourUniforms &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;material&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;uniforms&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;va&quot;&gt;contourUniforms&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;width&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;va&quot;&gt;contourUniforms&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;spacing&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;va&quot;&gt;contourUniforms&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;color&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;Cesium&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;Color&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;RED&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;很简单的几行代码，其中Cesium.Material.fromType函数定义如下：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;va&quot;&gt;Material&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;fromType&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt;(type&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; uniforms) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;at&quot;&gt;defined&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;Material&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;_materialCache&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;getMaterial&lt;/span&gt;(type))) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;cf&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;DeveloperError&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'material with type &lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;\'&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; type &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;\'&lt;/span&gt;&lt;span class=&quot;st&quot;&gt; does not exist.'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; material &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;Material&lt;/span&gt;(&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;fabric &lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;dt&quot;&gt;type &lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; type
        &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;at&quot;&gt;defined&lt;/span&gt;(uniforms)) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;cf&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; name &lt;span class=&quot;kw&quot;&gt;in&lt;/span&gt; uniforms) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;va&quot;&gt;uniforms&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;hasOwnProperty&lt;/span&gt;(name)) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;va&quot;&gt;material&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;uniforms&lt;/span&gt;[name] &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; uniforms[name]&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; material&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;};&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;此函数返回一个Material对象，根据ElevationContour可以知道这是一个等高线类型的材质。uniforms是glsl着色器语言中的变量，用于控制对象颜色、位置等等。所以此处可以简单理解为得到ElevationContour类型的unifrom值并将此值作用于场景。Cesium根据此uniform生成相应类型的等高线。&lt;/p&gt;
&lt;p&gt;理解了这一点，高程设色和坡度设色也就明白了。&lt;/p&gt;
&lt;p&gt;高程设色如下：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; shadingUniforms &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{};&lt;/span&gt;
material &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;Cesium&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;Material&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;fromType&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'ElevationRamp'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
shadingUniforms &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;material&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;uniforms&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;va&quot;&gt;shadingUniforms&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;minHeight&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;fl&quot;&gt;414.0&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;va&quot;&gt;shadingUniforms&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;maxHeight&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;8777&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;坡度设色如下：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; shadingUniforms &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{};&lt;/span&gt;
material &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;Cesium&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;Material&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;fromType&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'SlopeRamp'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
shadingUniforms &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;material&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;uniforms&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;二者都需要为shadingUniforms变量添加一个色表：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;va&quot;&gt;shadingUniforms&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;image&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;getColorRamp&lt;/span&gt;(selectedShading)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; elevationRamp &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; [&lt;span class=&quot;fl&quot;&gt;0.0&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;fl&quot;&gt;0.045&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;fl&quot;&gt;0.1&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;fl&quot;&gt;0.15&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;fl&quot;&gt;0.37&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;fl&quot;&gt;0.54&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;fl&quot;&gt;1.0&lt;/span&gt;]&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; slopeRamp &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; [&lt;span class=&quot;fl&quot;&gt;0.0&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;fl&quot;&gt;0.29&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;fl&quot;&gt;0.5&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;sqrt&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;)/&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;fl&quot;&gt;0.87&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;fl&quot;&gt;0.91&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;fl&quot;&gt;1.0&lt;/span&gt;]&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;getColorRamp&lt;/span&gt;(selectedShading) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; ramp &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;createElement&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'canvas'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;va&quot;&gt;ramp&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;width&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;va&quot;&gt;ramp&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;height&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; ctx &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;ramp&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;getContext&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'2d'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; values &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; selectedShading &lt;span class=&quot;op&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'elevation'&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;?&lt;/span&gt; elevationRamp : slopeRamp&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; grd &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;ctx&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;createLinearGradient&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;va&quot;&gt;grd&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;addColorStop&lt;/span&gt;(values[&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;]&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'#000000'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;//black&lt;/span&gt;
    &lt;span class=&quot;va&quot;&gt;grd&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;addColorStop&lt;/span&gt;(values[&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;]&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'#2747E0'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;//blue&lt;/span&gt;
    &lt;span class=&quot;va&quot;&gt;grd&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;addColorStop&lt;/span&gt;(values[&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;]&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'#D33B7D'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;//pink&lt;/span&gt;
    &lt;span class=&quot;va&quot;&gt;grd&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;addColorStop&lt;/span&gt;(values[&lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;]&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'#D33038'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;//red&lt;/span&gt;
    &lt;span class=&quot;va&quot;&gt;grd&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;addColorStop&lt;/span&gt;(values[&lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;]&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'#FF9742'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;//orange&lt;/span&gt;
    &lt;span class=&quot;va&quot;&gt;grd&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;addColorStop&lt;/span&gt;(values[&lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;]&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'#ffd700'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;//yellow&lt;/span&gt;
    &lt;span class=&quot;va&quot;&gt;grd&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;addColorStop&lt;/span&gt;(values[&lt;span class=&quot;dv&quot;&gt;6&lt;/span&gt;]&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'#ffffff'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;//white&lt;/span&gt;

    &lt;span class=&quot;va&quot;&gt;ctx&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;fillStyle&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; grd&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;va&quot;&gt;ctx&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;fillRect&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; ramp&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;对高程和坡度归一化后的值设置颜色。这样就可以正常显示高程设色和坡度设色。&lt;/p&gt;

&lt;p&gt;不是简单的两个图层叠加，而是真实的分割整个地图，左右显示两个不同的瓦片图层。效果如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/704456/201712/704456-20171220151722006-607151732.jpg&quot;/&gt;&lt;/p&gt;
&lt;p&gt;首先添加两个图层，第一个创建Viewer的时候设置基础图层，第二个采用layers.addImageryProvider的方式添加（当然也可以两个都采用此种方式添加），具体添加图层的方式参考前面的博客。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;layer1 &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;layers&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;addImageryProvider&lt;/span&gt;(...)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
layer2 &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;layers&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;addImageryProvider&lt;/span&gt;(...)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;只需要设置layer1或则layer2的splitDirection属性即可：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;va&quot;&gt;layer2&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;splitDirection&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;Cesium&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;ImagerySplitDirection&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;LEFT&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;当然还需要设置图层分割的位置：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;va&quot;&gt;viewer&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;scene&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;imagerySplitPosition&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;fl&quot;&gt;0.5&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可以改变此值来改变左右图层的分割位置，0.5表示在中间。如果需要动态调整分割位置则需要加一个分割器，监听位置变化事件。整体代码如下：&lt;/p&gt;
&lt;p&gt;前台：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;&lt;span class=&quot;co&quot;&gt;&amp;lt;!--css--&amp;gt;&lt;/span&gt;
#slider {
    position: absolute;
    left: 50%;
    top: 0px;
    background-color: #D3D3D3;
    width: 5px;
    height: 100%;
    z-index: 9999;
}

#slider:hover {
    cursor: ew-resize;
}

&lt;span class=&quot;co&quot;&gt;&amp;lt;!--html--&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;div&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; id=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;cesiumContainer&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;div&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; id=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;slider&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;后台：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;20&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; viewer &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;Cesium&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;Viewer&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'cesiumContainer'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;dt&quot;&gt;baseLayerPicker&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
   &lt;span class=&quot;dt&quot;&gt;imageryProvider&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;Cesium&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;ArcGisMapServerImageryProvider&lt;/span&gt;(&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
       &lt;span class=&quot;dt&quot;&gt;url &lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'https://server.arcgisonline.com/ArcGIS/rest/services/World_Street_Map/MapServer'&lt;/span&gt;
   &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; layers &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;viewer&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;imageryLayers&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; balckMarble &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;layers&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;addImageryProvider&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;Cesium&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;createTileMapServiceImageryProvider&lt;/span&gt;(&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;url &lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'https://cesiumjs.org/blackmarble'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;credit &lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'Black Marble imagery courtesy NASA Earth Observatory'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;flipXY &lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;))&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;va&quot;&gt;balckMarble&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;splitDirection&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;Cesium&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;ImagerySplitDirection&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;LEFT&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; slider &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;getElementById&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'slider'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;va&quot;&gt;viewer&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;scene&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;imagerySplitPosition&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; (&lt;span class=&quot;va&quot;&gt;slider&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;offsetLeft&lt;/span&gt;) / &lt;span class=&quot;va&quot;&gt;slider&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;parentElement&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;offsetWidth&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; handler &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;Cesium&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;ScreenSpaceEventHandler&lt;/span&gt;(slider)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; moveActive &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;move&lt;/span&gt;(movement) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;op&quot;&gt;!&lt;/span&gt;moveActive) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; relativeOffset &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;movement&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;endPosition&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; splitPosition &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; (&lt;span class=&quot;va&quot;&gt;slider&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;offsetLeft&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; relativeOffset) / &lt;span class=&quot;va&quot;&gt;slider&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;parentElement&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;offsetWidth&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;va&quot;&gt;slider&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;style&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;fl&quot;&gt;100.0&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;*&lt;/span&gt; splitPosition &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'%'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;va&quot;&gt;viewer&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;scene&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;imagerySplitPosition&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; splitPosition&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;va&quot;&gt;handler&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;setInputAction&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt;() &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    moveActive &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;Cesium&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;ScreenSpaceEventType&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;LEFT_DOWN&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;va&quot;&gt;handler&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;setInputAction&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt;() &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    moveActive &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;Cesium&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;ScreenSpaceEventType&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;PINCH_START&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;va&quot;&gt;handler&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;setInputAction&lt;/span&gt;(move&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;Cesium&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;ScreenSpaceEventType&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;MOUSE_MOVE&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;va&quot;&gt;handler&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;setInputAction&lt;/span&gt;(move&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;Cesium&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;ScreenSpaceEventType&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;PINCH_MOVE&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;va&quot;&gt;handler&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;setInputAction&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt;() &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    moveActive &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;Cesium&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;ScreenSpaceEventType&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;LEFT_UP&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;va&quot;&gt;handler&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;setInputAction&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt;() &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    moveActive &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;Cesium&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;ScreenSpaceEventType&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;PINCH_END&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Cesium自带了geocoder控件，可以检索并定位到某个地址，原理很简单，就是后台解析此地址，根据解析结果将地图切换到该位置。Cesium默认采用的是微软Bing地址解析引擎，如果我们想要换成其他的如OSM或者我们自己的，只需要对此控件简单改造即可。示例代码如下：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;15&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;co&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * This class is an example of a custom geocoder. It provides geocoding through the OpenStreetMap Nominatim service.&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * &lt;/span&gt;@alias&lt;span class=&quot;co&quot;&gt; OpenStreetMapNominatimGeocoder&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * &lt;/span&gt;@constructor
&lt;span class=&quot;co&quot;&gt; */&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;OpenStreetMapNominatimGeocoder&lt;/span&gt;() &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;co&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * The function called to geocode using this geocoder service.&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; *&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;@param&lt;/span&gt;&lt;span class=&quot;co&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;{String}&lt;/span&gt;&lt;span class=&quot;co&quot;&gt; input The query to be sent to the geocoder service&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;@returns&lt;/span&gt;&lt;span class=&quot;co&quot;&gt; {Promise&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;lt;GeocoderResult&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;co&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; */&lt;/span&gt;
&lt;span class=&quot;va&quot;&gt;OpenStreetMapNominatimGeocoder&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;prototype&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;geocode&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; (input) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; endpoint &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'https://nominatim.openstreetmap.org/search?'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; query &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'format=json&amp;amp;q='&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; input&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; requestString &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; endpoint &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; query&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;Cesium&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;loadJson&lt;/span&gt;(requestString)  &lt;span class=&quot;co&quot;&gt;//请求url获取json数据&lt;/span&gt;
        .&lt;span class=&quot;at&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; (results) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; bboxDegrees&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;results&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; (resultObject) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                bboxDegrees &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;resultObject&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;boundingbox&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;dt&quot;&gt;displayName&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;resultObject&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;display_name&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
                    &lt;span class=&quot;dt&quot;&gt;destination&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;Cesium&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;Rectangle&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;fromDegrees&lt;/span&gt;(
                        bboxDegrees[&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;]&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
                        bboxDegrees[&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;]&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
                        bboxDegrees[&lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;]&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
                        bboxDegrees[&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;]
                    )
                &lt;span class=&quot;op&quot;&gt;};&lt;/span&gt;
            &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; viewer &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;Cesium&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;Viewer&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'cesiumContainer'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;geocoder&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;OpenStreetMapNominatimGeocoder&lt;/span&gt;()
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;首先创建了一个OpenStreetMapNominatimGeocoder类，并为其添加了geocode方法，在此方法中根据输入拼接请求url，解析结果取出经纬度、名称等内容。这样就实现了我们自己的地名解析器，其实这就是C#等语言中的父类和继承的关系。&lt;/p&gt;

&lt;p&gt;本文介绍了几个Cesium的案例，都是一些比较有意思和好玩的功能，后续如果搜集到其他好玩的使用案例，同样也会总结放出。&lt;/p&gt;
</description>
<pubDate>Wed, 20 Dec 2017 07:18:00 +0000</pubDate>
<dc:creator>shoufengwei</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/shoufengwei/p/8073922.html</dc:identifier>
</item>
<item>
<title>Sagit.Framework For IOS 开发框架入门教程3：Start引导页及框架布局和隐藏事件的内幕 - 路过秋天</title>
<link>http://www.cnblogs.com/cyq1162/p/8070502.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/cyq1162/p/8070502.html</guid>
<description>&lt;p&gt;框架依旧在快速更新着：在重构、简化代码，统一标准的过程中。&lt;/p&gt;
&lt;p&gt;中间也遇到各种坑，不过好在一步一脚印的解决了。&lt;/p&gt;
&lt;p&gt;虽然还有些功能还在思考，不过教程，还是得补上：&lt;/p&gt;
&lt;p&gt;上篇文章：&lt;a id=&quot;homepage1_HomePageDays_DaysList_ctl00_DayList_TitleUrl_0&quot; class=&quot;postTitle2&quot; href=&quot;http://www.cnblogs.com/cyq1162/p/8057611.html&quot;&gt;Sagit.Framework For IOS 开发框架入门开发教程2：一行代码实现引导页&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;里面讲到，引导完后，根据是否存在的Token来解决跳转到StartController还是MainController。&lt;/p&gt;
&lt;p&gt;这篇就写写StartController，实现的代码虽少，但原理很精彩！！！&lt;/p&gt;

&lt;p&gt;从WelcomleController中，现在跳到了StartController了：&lt;/p&gt;
&lt;p&gt;呈现的内容如下图：（为不影响整体，这图宽高设的的很小，大伙可以新开窗口看大图）：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/17408/201712/17408-20171220023017084-1386749014.png&quot; alt=&quot;&quot; width=&quot;171&quot; height=&quot;313&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这个界面，除了基础的布局，还有两个事件：&lt;/p&gt;
&lt;p&gt;1：点立即注册：跳转到注册页。&lt;/p&gt;
&lt;p&gt;2：点登录：或跳转到登录页。&lt;/p&gt;
&lt;p&gt;整体的效果如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/17408/201712/17408-20171220142813771-1306206984.gif&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这里把View和Controller分开文件处理：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/17408/201712/17408-20171220023743600-581390290.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;看看StartView的布局的全部代码：（下面是我本人简化后的代码，以前的代码多到吓死人）&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#import&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;STView.h&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;

&lt;span&gt;@interface&lt;/span&gt; StartView : STView  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;StartView.h&lt;/span&gt;

&lt;span&gt;@end&lt;/span&gt;


&lt;span&gt;@implementation&lt;/span&gt; StartView    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;StartView.m&lt;/span&gt;

- (&lt;span&gt;void&lt;/span&gt;&lt;span&gt;)initUI
{&lt;br/&gt;　　&lt;/span&gt;if(self.STController!=nil &amp;amp;&amp;amp; self.STController.navigationController==nil){
&lt;/pre&gt;
&lt;p&gt;      [self.STController asRoot:RootViewNavigationType];} &lt;/p&gt;
&lt;pre&gt;
&lt;span&gt;    [self needNavigationBar:NO setNavBar:YES];&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;隐藏导航栏。&lt;/span&gt;
&lt;span&gt;    
    [[[self addImageView:&lt;/span&gt;&lt;span&gt;@&quot;&lt;/span&gt;&lt;span&gt;logo&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; imgName:&lt;span&gt;@&quot;&lt;/span&gt;&lt;span&gt;login_logo&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;] width:&lt;span&gt;170&lt;/span&gt; height:&lt;span&gt;170&lt;/span&gt;] relate:LeftTopRight v:&lt;span&gt;290&lt;/span&gt; v2:&lt;span&gt;200&lt;/span&gt; v3:&lt;span&gt;290&lt;/span&gt;&lt;span&gt;];
    
    UILabel &lt;/span&gt;*title = [[[self addLabel:nil text:&lt;span&gt;@&quot;&lt;/span&gt;&lt;span&gt;IT恋&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; font:&lt;span&gt;48&lt;/span&gt;] width:&lt;span&gt;160&lt;/span&gt; height:&lt;span&gt;44&lt;/span&gt;] onBottom:&lt;span&gt;@&quot;&lt;/span&gt;&lt;span&gt;logo&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; y:&lt;span&gt;50&lt;/span&gt;&lt;span&gt;];
    [[title textColor:&lt;/span&gt;&lt;span&gt;@&quot;&lt;/span&gt;&lt;span&gt;#000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;] textAlignment:NSTextAlignmentCenter];

    UILabel &lt;/span&gt;*description = [[[[self addLabel:nil text:&lt;span&gt;@&quot;&lt;/span&gt;&lt;span&gt;找优质靠谱IT男就上IT恋&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; font:&lt;span&gt;36&lt;/span&gt;] width:&lt;span&gt;450&lt;/span&gt; height:&lt;span&gt;34&lt;/span&gt;] onBottom:title y:&lt;span&gt;48&lt;/span&gt;&lt;span&gt;] toCenter:X];
    [[description textColor:&lt;/span&gt;&lt;span&gt;@&quot;&lt;/span&gt;&lt;span&gt;#000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;] textAlignment:NSTextAlignmentCenter];
    
    UIButton &lt;/span&gt;*regBtn = [[[[self addButton:&lt;span&gt;@&quot;&lt;/span&gt;&lt;span&gt;Reg&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; title:&lt;span&gt;@&quot;&lt;/span&gt;&lt;span&gt;立即注册&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;] width:&lt;span&gt;287&lt;/span&gt; height:&lt;span&gt;77&lt;/span&gt;] onBottom:description y:&lt;span&gt;484&lt;/span&gt;&lt;span&gt;] toCenter:X];
    [[regBtn backgroundImage:&lt;/span&gt;&lt;span&gt;@&quot;&lt;/span&gt;&lt;span&gt;login_btn&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;] keyValue:@{&lt;span&gt;@&quot;&lt;/span&gt;&lt;span&gt;leftNavImage&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;@&quot;&lt;/span&gt;&lt;span&gt;nav_arrow_left_black&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;}];

    UIButton &lt;/span&gt;*loginBtn = [[[[self addButton:&lt;span&gt;@&quot;&lt;/span&gt;&lt;span&gt;Login&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; title:&lt;span&gt;@&quot;&lt;/span&gt;&lt;span&gt;已有账号，立即登录&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; font:&lt;span&gt;24&lt;/span&gt;] width:&lt;span&gt;300&lt;/span&gt; height:&lt;span&gt;26&lt;/span&gt;] onBottom:regBtn y:&lt;span&gt;60&lt;/span&gt;&lt;span&gt;] toCenter:X];
    [[loginBtn titleColor:MainHexColor] keyValue:STPreView.keyValue];
}


&lt;/span&gt;&lt;span&gt;@end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;代码功能讲解（第二点和第三点下面再细讲）：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt;&lt;span&gt;：基本上一个控件布局就一行代码，直接看过去就好了。

&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;：第一行设置不需要导航栏，并直接隐藏导航栏：[self needNavigationBar:NO setNavBar:YES];&lt;span&gt;//&lt;/span&gt;&lt;span&gt;隐藏导航栏&lt;/span&gt;

&lt;span&gt;3&lt;/span&gt;：注册和登陆按钮，多了一个陌生的keyValue，因为这里要控制导航的返回按钮为自定义的图片。
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;再看看StartController中的全部代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;@interface StartController : STController //StartController.h&lt;br/&gt;@end&lt;/span&gt;

&lt;span&gt;@implementation&lt;/span&gt; StartController &lt;span&gt;//&lt;/span&gt;&lt;span&gt;StartContrller.m&lt;/span&gt;

-&lt;span&gt;(instancetype)init
{
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;初始化全局设置，必须要在UI初始之前。&lt;/span&gt;
&lt;span&gt;    [self configNavAndStatusBar];
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; self;
}
&lt;/span&gt;-(&lt;span&gt;void&lt;/span&gt;&lt;span&gt;)configNavAndStatusBar
{&lt;/span&gt;
&lt;/pre&gt;
&lt;pre&gt;
    [[UIApplication sharedApplication] setStatusBarStyle:UIStatusBarStyleDefault animated:YES];&lt;span&gt;//&lt;/span&gt;&lt;span&gt;白色底，所以状态字颜色改为黑
    
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;这里提前统一设定全局协议的内容（对于登陆、注册、找回密码三个窗体有效）,进入Main之后，会重新修改全局协议的内容&lt;/span&gt;
&lt;span&gt;    [[[[[[UINavigationBar globalSetting] barTintColor:ColorWhite]tintColor:ColorBlack] backgroundImage:nil] shadowImage:nil]
     titleTextAttributes:@{NSForegroundColorAttributeName:ColorBlack}];&lt;/span&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;span&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;功能讲解：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1：设置全局的导航栏和状态栏属性。 

2：如果当前不是导航控制器，则设置自身为导航根控制器。&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;对于框架的布局：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt;&lt;span&gt;：以【self addXXX】为起手势，一行代码实现一个UI的布局。

&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;：对于需要特定类型的控制属性的，用变量接收后，用无限连语法处理属性赋值。

&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;：相对父控件，用relate方法；相对同级，用：onTop、onLeft、onRight、onBottom方法,可以混着用，怎么简单怎么来。
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;布局的方法，都抽到了以下STUIViewAutoLayout文件中：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/17408/201712/17408-20171220035429396-1753776699.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;看看基本的方法重载：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#pragma&lt;/span&gt; mark [相对布局方法] RelativeLayout
-(UIView*)onRight:(&lt;span&gt;id&lt;/span&gt;&lt;span&gt;)uiOrName x:(CGFloat)x;
&lt;/span&gt;-(UIView*)onRight:(&lt;span&gt;id&lt;/span&gt;&lt;span&gt;)uiOrName x:(CGFloat)x y:(CGFloat)y;
&lt;/span&gt;-(UIView*)onLeft:(&lt;span&gt;id&lt;/span&gt;&lt;span&gt;)uiOrName x:(CGFloat)x;
&lt;/span&gt;-(UIView*)onLeft:(&lt;span&gt;id&lt;/span&gt;&lt;span&gt;)uiOrName x:(CGFloat)x y:(CGFloat)y;
&lt;/span&gt;-(UIView*)onTop:(&lt;span&gt;id&lt;/span&gt;&lt;span&gt;)uiOrName y:(CGFloat)y;
&lt;/span&gt;-(UIView*)onTop:(&lt;span&gt;id&lt;/span&gt;&lt;span&gt;)uiOrName y:(CGFloat)y x:(CGFloat)x;
&lt;/span&gt;-(UIView *)onBottom:(&lt;span&gt;id&lt;/span&gt;&lt;span&gt;)uiOrName y:(CGFloat)y;
&lt;/span&gt;-(UIView *)onBottom:(&lt;span&gt;id&lt;/span&gt;&lt;span&gt;)uiOrName y:(CGFloat)y x:(CGFloat)x;
&lt;/span&gt;-(UIView*&lt;span&gt;)relate:(XYLocation)location v:(CGFloat)value;
&lt;/span&gt;-(UIView*&lt;span&gt;)relate:(XYLocation)location v:(CGFloat)value v2:(CGFloat)value2;
&lt;/span&gt;-(UIView*&lt;span&gt;)relate:(XYLocation)location v:(CGFloat)value v2:(CGFloat)value2 v3:(CGFloat)value3;
&lt;/span&gt;-(UIView*&lt;span&gt;)relate:(XYLocation)location v:(CGFloat)value v2:(CGFloat)value2 v3:(CGFloat)value3 v4:(CGFloat)value4;
&lt;/span&gt;-(UIView*&lt;span&gt;)toCenter;
&lt;/span&gt;-(UIView*)toCenter:(XYFlag)xyFlag;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这个很好理解的，基本读过去就明白了，简单易懂，其它的属性，等后续文章用到再说。&lt;/p&gt;

&lt;p&gt;上一篇文章中，对事件有过一段讲解：&lt;/p&gt;
&lt;p&gt;框架对于UIView扩展了两种点击事件的绑定方式：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
#pragma mark 扩展系统事件
-(UIView*)click:(NSString*)event;
- (UIView*)addClick:(onClick)block;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;click用于指定一个事件的名称，addClick用于追加一个事件执行的代码块。&lt;/p&gt;
&lt;p&gt;也说了事件的寻址流程：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
1：先找传进来的event在所在的Controller中是否有对应的事件，若有，执行，若没有继续以下：

2：对event追加后缀变成eventClick和eventClick:再看有没有对应的事件，若有，执行，若没有继续以下：

3：对event追加后缀变成EventController，看有没有对应的控制器，若有，执行默认的open:事件跳转，若没有，则无绑定事件。
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;不过上面的布局代码中并没使用click或addClick，同样是触发了这个流程：&lt;/p&gt;
&lt;p&gt;核心就在于UIButtton的name，如果一个按钮有name，则寻找事件，如果找到，就自动绑定事件。&lt;/p&gt;
&lt;p&gt;因此，对于两个name，Reg和Login：一路找到最终会找到RegController和LoginController，触发STController中预先定义的open:事件。&lt;/p&gt;

&lt;h2&gt;1：keyValue属性&lt;/h2&gt;
&lt;p&gt;IT恋这里有点特殊，跳转后需要改变导航栏的返回图标，原来在Controller中写事件：&lt;/p&gt;
&lt;p&gt;[self stPush：方法的第三个参数，指定一张图片做为返回按钮]&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/17408/201712/17408-20171220032524334-1925206663.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;不过对于有代码洁P的我，总想着怎么消灭掉这些这些代码，虽然两个事件就几行，但也不留。&lt;/p&gt;
&lt;p&gt;这个参数怎么传到open：里呢？如果不是图片，是指定文字为返回的按钮呢？&lt;/p&gt;
&lt;p&gt;最后想到一个相对完美的解决方案：&lt;/p&gt;
&lt;p&gt;1：对UIView再扩展了一个keyValue的属性，于是有了：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
[[regBtn backgroundImage:&lt;span&gt;@&quot;&lt;/span&gt;&lt;span&gt;login_btn&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;] keyValue:@{&lt;span&gt;@&quot;&lt;/span&gt;&lt;span&gt;leftNavImage&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;@&quot;&lt;/span&gt;&lt;span&gt;nav_arrow_left_black&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;}];
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;2：open:事件中，再进行一下的简单判断拿值。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/17408/201712/17408-20171220041153834-1181343156.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;就这样完美的解决了。&lt;/p&gt;
&lt;p&gt;后来发现这个keyValue还有更多的用户场景，如：设置控制导航栏的显示或隐藏：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
 [self needNavigationBar:NO setNavBar:YES];&lt;span&gt;//&lt;/span&gt;&lt;span&gt;隐藏导航栏。&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;内部其实就是对keyValue进行取值或赋值：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
-(UIView*&lt;span&gt;)needNavigationBar:(BOOL)yesNo setNavBar:(BOOL)setNavBar
{
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(self.keyValue==&lt;span&gt;nil)
    {
        self.keyValue&lt;/span&gt;=[NSMutableDictionary &lt;span&gt;new&lt;/span&gt;&lt;span&gt;];
    }
    [self.keyValue &lt;/span&gt;&lt;span&gt;set&lt;/span&gt;:&lt;span&gt;@&quot;&lt;/span&gt;&lt;span&gt;needNavigationBar&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; value:yesNo?&lt;span&gt;@&quot;&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;@&quot;&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;];
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(setNavBar &amp;amp;&amp;amp; self.STController!=nil &amp;amp;&amp;amp; self.STController.navigationController!=&lt;span&gt;nil)
    {
        self.STController.navigationController.navigationBar.hidden&lt;/span&gt;=!&lt;span&gt;yesNo;
    }
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; self;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;目前框架是自动控制导航栏的显示或隐藏，不需要用户去再操心的在每个页面都是写代码了。&lt;/p&gt;
&lt;p&gt;为了这个导航栏，真花我不少心力，特别是自定义返回和系统滑动返回，研究的过程都够另外再写一篇。&lt;/p&gt;
&lt;h2&gt;2：UINavigationBar globalSetting 的产生：&lt;/h2&gt;
&lt;h2&gt; A：对于这个StartController这个页面，有以下几种情况会跳转过来：&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt;&lt;span&gt;：从欢迎引导页WelcomeController进来；

&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;：用户进行系统后，点击退出时从SystemController进来；

&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;：当前用户的Token数据失效，需要重新登陆时，从MainController中，跳进来；
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;不管从哪个地方过来，由于自身需要占根视图，而为导航控制器，所以有一行代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;从引导页跳转来时，需要将自身设置为导航根控制器&lt;/span&gt;
 &lt;span&gt;if&lt;/span&gt;(self.STController.navigationController==nil){[self.STController asRoot:RootViewNavigationType];}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;框架对UIViewCtroller扩展了：asRoot方法，可以将当前Controller直接设置为根视图：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;将当前视图设置为根视图&lt;/span&gt;
-(UIViewController*&lt;span&gt;)asRoot:(RootViewControllerType)rootViewControllerType{
    
    UIViewController &lt;/span&gt;*controller=&lt;span&gt;self;
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(rootViewControllerType==&lt;span&gt;RootViewNavigationType)
    {
        controller &lt;/span&gt;=&lt;span&gt; [[UINavigationController alloc]initWithRootViewController:self];
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;self.navigationController.navigationBar.hidden=!self.view.needNavigationBar;&lt;/span&gt;
&lt;span&gt;    }
    [UIApplication sharedApplication].&lt;/span&gt;&lt;span&gt;delegate&lt;/span&gt;.window.rootViewController=&lt;span&gt;controller;
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; self;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;B：&lt;span&gt;导航栏进行统一的颜色风格处理（处理后，将对注册、登陆、找回密码等生效）：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;之前的代码是这样的：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/17408/201712/17408-20171220031140506-99240864.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;框架封装完成属性无限连后可以这样：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;[[[[[[UINavigationBar globalSetting] barTintColor:ColorWhite]tintColor:ColorBlack] backgroundImage:nil] shadowImage:nil]
     titleTextAttributes:@{NSForegroundColorAttributeName:ColorBlack}];&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;这里有几点坑和大伙分享：&lt;/h3&gt;
&lt;h4&gt;坑A：如何进行属性无限连&lt;/h4&gt;
&lt;p&gt;[UINavigationBar appearance] 这里返回的是协议接口，并不是UINavigationBar实例&lt;/p&gt;
&lt;p&gt;一开始看到UINavigationBar去接收appearance的属性，聪明如我，就去扩展UINavigationBar的属性方法，然后打算用无限连简化。&lt;/p&gt;
&lt;p&gt;结果一运行就死，进入坑里徘徊了不少时间，最后才发现appearance返回的是UIAppearance接口，并不是UINavigationBar类型。&lt;/p&gt;
&lt;p&gt;但是UIAppearnce又不能直接用，也不能对协议接口做扩展，一时蒙了下B。&lt;/p&gt;
&lt;p&gt;然后绕到导航栏显示不显示、自定义返回和滑动返回，返回主界面没主动往上顶等坑里。&lt;/p&gt;
&lt;p&gt;坑里呆久出来后，想到另一种方式来实现无限连：&lt;/p&gt;
&lt;p&gt;通过一个静态方法返回一个自定义类，再由这个自定义类来连代码，像这样：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;@implementation&lt;/span&gt;&lt;span&gt; UINavigationBar (ST)

&lt;/span&gt;+(UINavigationBarSetting*&lt;span&gt;)globalSetting
{
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; [UINavigationBarSetting &lt;span&gt;new&lt;/span&gt;&lt;span&gt;];
}
&lt;/span&gt;&lt;span&gt;@end&lt;/span&gt;

&lt;span&gt;@implementation&lt;/span&gt;&lt;span&gt; UINavigationBarSetting
&lt;/span&gt;&lt;span&gt;#pragma&lt;/span&gt; mark 扩展系统属性
-(UINavigationBarSetting*)tintColor:(&lt;span&gt;id&lt;/span&gt;&lt;span&gt;)colorOrHex
{
    [UINavigationBar appearance].tintColor&lt;/span&gt;=&lt;span&gt;[UIView toColor:(colorOrHex)];
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; self;
}
&lt;/span&gt;-(UINavigationBarSetting*)barTintColor:(&lt;span&gt;id&lt;/span&gt;&lt;span&gt;)colorOrHex
{
    [UINavigationBar appearance].barTintColor&lt;/span&gt;=&lt;span&gt;[UIView toColor:(colorOrHex)];
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; self;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;坑B：为何全局设置无效&lt;/h4&gt;
&lt;p&gt;以前的代码，先执行ViewDidLoad里的全局设置，再执行asRoot，触发导航栏，这样是正常的：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
-(&lt;span&gt;void&lt;/span&gt;&lt;span&gt;)viewWillAppear:(BOOL)animated
{
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(self.navigationController==&lt;span&gt;nil)
    {
        [self asRoot:RootViewNavigationType];
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;self.navigationController.navigationBar.hidden = YES;&lt;/span&gt;
&lt;span&gt;    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;但是这段代码被我消灭了，其它地方的跳转代码都是直接，退出后转跳：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/17408/201712/17408-20171220044814725-164174113.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;改完后，发现全局失效了，最后坑里呆了一圈才发现：&lt;/p&gt;
&lt;p&gt;全局的设置，必须在导航栏UI出现之前设置才有效，所以，如果这样写代码：&lt;/p&gt;
&lt;p&gt;全局设置就不能写在ViewDidLoad里了，必须写在init中了。&lt;/p&gt;

&lt;p&gt;1：用框架写代码很简单，也很简洁。&lt;/p&gt;
&lt;p&gt;2：框架目前的代码不多，早看早了结。&lt;/p&gt;
&lt;p&gt;3：随着应用场景的增多，框架会不断的增强，预味着开发仍是很简单，但要理解原理就需要花更多时间。&lt;/p&gt;
&lt;p&gt;4：虽然教程是以IT恋为讲解，但还是希望大伙多关心IT连，哈。&lt;/p&gt;
</description>
<pubDate>Wed, 20 Dec 2017 06:32:00 +0000</pubDate>
<dc:creator>路过秋天</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/cyq1162/p/8070502.html</dc:identifier>
</item>
<item>
<title>css3的动画特效--动画序列（animation） - saucxs</title>
<link>http://www.cnblogs.com/chengxs/p/8067908.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/chengxs/p/8067908.html</guid>
<description>&lt;p&gt;&lt;strong&gt;首先复习一下animation动画添加各种参数&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;（1）infinite参数&lt;/strong&gt;，表示动画将无限循环。在速度曲线和播放次数之间还可以插入一个时间参数，用以设置动画延迟的时间。如希望使图标在1秒钟后再开始旋转，并旋转两次，代码如下&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;.close:hover::before{
    -webkit-animation: spin 1s linear 1s 2&lt;span&gt;;
    animation: spin 1s linear 1s 2&lt;span&gt;;
}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;（2）alternate参数。&lt;/strong&gt;animation动画中加入反向播放参数alternate。在加入该参数后，动画将在偶数次数时反向播放动画。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;.close:hover::before{
    -webkit-animation: spin 1s linear 1s 2&lt;span&gt; alternate;
    animation: spin 1s linear 1s 2&lt;span&gt; alternate;
}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;animation属性参数中，延迟参数是我们较为常用的一种参数。当动画的对象为多个时，我们常常用延迟参数来形成动画序列。如以下代码定义了5个不同的图标：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&amp;lt;span class=&quot;close icon-suningliujinyun&quot;&amp;gt;Close&amp;lt;/span&amp;gt;
&amp;lt;span class=&quot;close icon-shousuo&quot;&amp;gt;Close&amp;lt;/span&amp;gt;
&amp;lt;span class=&quot;close icon-zhankai&quot;&amp;gt;Close&amp;lt;/span&amp;gt;
&amp;lt;span class=&quot;close icon-diaoyonglian&quot;&amp;gt;Close&amp;lt;/span&amp;gt;
&amp;lt;span class=&quot;close icon-lingshouyun&quot;&amp;gt;Close&amp;lt;/span&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;图标的基本样式和之前的Close图标一致，不同之处在于此处的图标都设置为inline-block，使它们能够横向排列。代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;.close{
    font&lt;/span&gt;-size:0px;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;使span中的文字不显示&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    cursor:pointer;&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;使鼠标指针显示为手型&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    display:inline-&lt;/span&gt;&lt;span&gt;&lt;span&gt;block;&lt;/span&gt;
    width:100px;
    height:100px;
    line&lt;/span&gt;-&lt;span&gt;height:100px;
    border&lt;/span&gt;-radius:50%;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;使背景形状显示为圆形&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    background:#FFF;
    color:#8b8ab3;
    text&lt;/span&gt;-&lt;span&gt;align:center;&lt;/span&gt;&lt;span&gt;
}
.close::before{
    font&lt;/span&gt;-family: 'suningcloud'&lt;span&gt;;
    speak:none; &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;使文本内容不能通过屏幕阅读器等辅助设备读取&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    font&lt;/span&gt;-&lt;span&gt;size:48px;
    display:block;
}&lt;br/&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;初始化的时候展示，如下图所示；&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/900740/201712/900740-20171219213031740-1189274122.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;接下来，为图标添加animation动画，使图标初始位置向下偏移-100%，然后再向上移动回到初始位置，在此过程中同时使图标由完全透明变化为完全不透明&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;p&gt;.close{&lt;br/&gt;font-size:0px;/*使span中的文字不显示*/&lt;br/&gt;cursor:pointer;/*使鼠标指针显示为手型*/&lt;br/&gt;display:inline-block;&lt;br/&gt;width:100px;&lt;br/&gt;height:100px;&lt;br/&gt;line-height:100px;&lt;br/&gt;border-radius:50%;/*使背景形状显示为圆形*/&lt;br/&gt;background:#FFF;&lt;br/&gt;color:#8b8ab3;&lt;br/&gt;text-align:center;&lt;br/&gt;/**/&lt;br/&gt;&lt;span&gt;-webkit-animation: moving 1s linear;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;animation: moving 1s linear;&lt;/span&gt;&lt;br/&gt;}&lt;/p&gt;
&lt;pre&gt;
&lt;br/&gt;@-webkit-&lt;span&gt;keyframes moving {
    from {
        opacity: &lt;/span&gt;0&lt;span&gt;;
        &lt;/span&gt;-webkit-transform: translateY(100%&lt;span&gt;);
    }
    to {
        opacity: &lt;/span&gt;1&lt;span&gt;;
        &lt;/span&gt;-webkit-transform: translateY(0%&lt;span&gt;);
    }
}
@keyframes moving {
    from {
        opacity: &lt;/span&gt;0&lt;span&gt;;
        transform: translateY(&lt;/span&gt;100%&lt;span&gt;);
    }
    to {
        opacity: &lt;/span&gt;1&lt;span&gt;;
        transform: translateY(&lt;/span&gt;0%&lt;span&gt;);
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;以上5个图标的动画效果都是同时进行的，为了使图标运动带有先后顺序，我们将为每个动画添加延迟。和之前运用的方法所不同，我们可以直接通过&lt;strong&gt;animation-delay属性&lt;/strong&gt;来设置animation动画延迟，代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;p&gt;.icon-suningliujinyun{&lt;br/&gt;-webkit-animation-delay:0s;&lt;br/&gt;animation-delay: 0s;&lt;br/&gt;}&lt;br/&gt;.icon-shousuo{&lt;br/&gt;-webkit-animation-delay:.1s;&lt;br/&gt;animation-delay: .1s;&lt;br/&gt;}&lt;br/&gt;.icon-zhankai{&lt;br/&gt;-webkit-animation-delay:.2s;&lt;br/&gt;animation-delay: .2s;&lt;br/&gt;}&lt;br/&gt;.icon-diaoyonglian{&lt;br/&gt;-webkit-animation-delay:.3s;&lt;br/&gt;animation-delay: .3s;&lt;br/&gt;}&lt;br/&gt;.icon-lingshouyun{&lt;br/&gt;-webkit-animation-delay:.4s;&lt;br/&gt;animation-delay: .4s;&lt;br/&gt;}&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;在以上代码中，我们设置了5个图标的延迟时间分别为0、0.1、0.2、0.3和0.4s。实际上，延迟0秒为默认值，因此第一个图标实际上也不需要设置延迟代码。测试页面，动画效果如图所示。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/900740/201712/900740-20171219213710381-1423982745.gif&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;里面我刷新了两次，&lt;strong&gt;发现最开头，几个图标将在顶部一闪而过。&lt;/strong&gt;这个算bug&lt;/p&gt;
&lt;p&gt;造成这个bug原因：&lt;strong&gt;在于除第一个图标外，其余图标都有一定的动画延迟，而在动画没有开始时，图标是没有发生偏移，也是完全不透明的，只有当动画开始的那一瞬间，图标才会切换到完全透明且偏移的动画起始状态。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;解决办法：&lt;/strong&gt;需要使用&lt;strong&gt;animation动画的&lt;span&gt;animation-fill-mode&lt;/span&gt;属性&lt;/strong&gt;。这一属性规定了&lt;strong&gt;元素在动画时间之外的状态&lt;/strong&gt;是怎样的。若该值为forwards，则表示动画完成后保留最后一个关键帧中的属性值，该值为backwards时则恰好相反，表示在动画延迟之前就使得元素应用第一个关键帧中的属性值，而该值为both时则表示同时包含forwards和backwards两种设置。在本例中，我们使用backward或both均可，&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;.close{
    font&lt;/span&gt;-size:0px;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;使span中的文字不显示&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    cursor:pointer;&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;使鼠标指针显示为手型&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    display:inline&lt;/span&gt;-&lt;span&gt;block;
    width:100px;
    height:100px;
    line&lt;/span&gt;-&lt;span&gt;height:100px;
    border&lt;/span&gt;-radius:50%;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;使背景形状显示为圆形&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    background:#FFF;
    color:#8b8ab3;
    text&lt;/span&gt;-&lt;span&gt;align:center;
    &lt;/span&gt;&lt;span&gt;/**/&lt;/span&gt;
    -webkit-&lt;span&gt;animation: moving 1s linear;
    animation: moving 1s linear;
    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;清除抖动&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;-webkit-animation-fill-mode: both;
    animation-fill-&lt;/span&gt;&lt;span&gt;&lt;span&gt;mode: both; 
&lt;/span&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 效果如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/900740/201712/900740-20171219214308865-1915372221.gif&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;PS:&lt;strong&gt;在animation中也可以像transition动画那样设置速度曲线&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; 比如实现：在本例中我们希望图标的运动带有一点弹性效果，即图标向上运动时，并非减速并停止在终点，而是到达终点后继续向上运动，超过一定距离后再反方向运动回到终点，形成一种往复的效果。&lt;/p&gt;
&lt;p&gt; 我们当然可以使用帧动画来实现这样的效果，但是如果使用速度曲线将更为简便。要使用自定义曲线，我们往往需要一些工具，因为CSS3动画使用了三次贝塞尔（Cubic Bezier）数学函数来生成速度曲线，而这个函数的参数并不直观。我们可以使用诸如&lt;a class=&quot; wrap external&quot; href=&quot;http://link.zhihu.com/?target=http%3A//cubic-bezier.com&quot; rel=&quot;nofollow noreferrer&quot; target=&quot;_blank&quot;&gt;cubic-bezier.com&lt;/a&gt;这样的站点来可视化地调整速度曲线。&lt;/p&gt;
&lt;p&gt;接下来，我们就能够将该速度曲线写入animation属性的参数中，代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
&lt;span&gt;.close{
    font&lt;/span&gt;-size:0px;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;使span中的文字不显示&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    cursor:pointer;&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;使鼠标指针显示为手型&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    display:inline&lt;/span&gt;-&lt;span&gt;block;
    width:100px;
    height:100px;
    line&lt;/span&gt;-&lt;span&gt;height:100px;
    border&lt;/span&gt;-radius:50%;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;使背景形状显示为圆形&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    background:#FFF;
    color:#8b8ab3;
    text&lt;/span&gt;-&lt;span&gt;align:center;
    &lt;/span&gt;&lt;span&gt;/**/&lt;/span&gt;
    &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;-webkit-animation: moving 1s linear;
    animation: moving 1s linear;&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;cubic-bezier&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
   &lt;span&gt; -webkit-animation:moving 1s cubic-bezier(.62,-0.91,.45,1.97);
      animation:moving 1s cubic-bezier(.62,-0.91,.45,1.97);
    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;清除抖动&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    -webkit-animation-fill-&lt;span&gt;mode: both;
    animation&lt;/span&gt;-fill-&lt;span&gt;mode: both; 
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;效果如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/900740/201712/900740-20171219214750271-614011499.gif&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;欢迎访问：&lt;/p&gt;
&lt;p&gt;1、云商城isv系统&lt;a href=&quot;http://isv.suningcloud.com/mpisv-web/index&quot; target=&quot;_blank&quot;&gt;http://isv.suningcloud.com/mpisv-web/index&lt;/a&gt;&lt;/p&gt;
&lt;p&gt; 2、云商城消费者门户&lt;a href=&quot;http://www.suningcloud.com/promotion/index/experience_center.html&quot; target=&quot;_blank&quot;&gt;http://www.suningcloud.com/promotion/index/experience_center.html&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Wed, 20 Dec 2017 06:13:00 +0000</pubDate>
<dc:creator>saucxs</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/chengxs/p/8067908.html</dc:identifier>
</item>
<item>
<title>log4j2 项目日志组件 - 代码风云</title>
<link>http://www.cnblogs.com/cjh-notes/p/8017855.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/cjh-notes/p/8017855.html</guid>
<description>&lt;p&gt;在项目运行过程中，常常需要进行功能调试以及用户行为的跟踪和记录，部分人习惯使用System.out，但这并不建议，它仅仅是使用方便但不便于维护也无扩展性。相比log4j的话，log4j可以控制日志信息的输送目的地、输出格式以及级别等等，使我们能够更加细致地控制日志的生成过程。&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;tgt&quot; data-group=&quot;0-0&quot;&gt;Log4j2是对Log4j1的升级，在性能和功能上有显著的改进，包括多线程中吞吐量的增强、占位符的支持、配置文件自动重新加载等&lt;/span&gt;&lt;/p&gt;

&lt;h2&gt;一、入门介绍&lt;/h2&gt;
&lt;h3&gt;1、下载jar包&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;pox.xml&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependencies&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.apache.logging.log4j&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;log4j-api&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;2.10.0&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.apache.logging.log4j&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;log4j-core&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;2.10.0&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependencies&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;2、配置文件&lt;/h3&gt;
&lt;p&gt;Log4j包含四个配置工厂实现：JSON、YAML、properties、XML，本文介绍常用的方式XML。&lt;/p&gt;
&lt;p&gt;Log4j具有在初始化期间自动配置自身的能力。当Log4j启动时，它将定位类路径下所有符合名称的文件，优先级顺序：log4j2-test.properties &amp;gt; log4j2-test.xml &amp;gt; log4j2.properties &amp;gt; log4j2.xml&lt;/p&gt;

&lt;h3&gt;3、一个简单的实例&lt;/h3&gt;
&lt;p&gt;xml配置：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;?&lt;/span&gt;&lt;span&gt;xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;?&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Configuration &lt;/span&gt;&lt;span&gt;status&lt;/span&gt;&lt;span&gt;=&quot;WARN&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Appenders&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Console &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;Console&quot;&lt;/span&gt;&lt;span&gt; target&lt;/span&gt;&lt;span&gt;=&quot;SYSTEM_OUT&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;PatternLayout &lt;/span&gt;&lt;span&gt;pattern&lt;/span&gt;&lt;span&gt;=&quot;%d{HH:mm:ss.SSS} [%t] %-5level %logger{36} - %msg%n&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Console&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Appenders&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Loggers&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Root &lt;/span&gt;&lt;span&gt;level&lt;/span&gt;&lt;span&gt;=&quot;info&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;AppenderRef &lt;/span&gt;&lt;span&gt;ref&lt;/span&gt;&lt;span&gt;=&quot;Console&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Root&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Loggers&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Configuration&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;java代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; Logger logger = LogManager.getLogger(MyApp.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;);

    @Test
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; testLog4j(){
        logger.info(&lt;/span&gt;&quot;hello world!&quot;&lt;span&gt;);
    }

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;控制台信息&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
22:17:47.146 [main] INFO  MyApp - hello world!
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;二、模块介绍&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;&amp;lt;Configuration&amp;gt;&lt;/span&gt;&lt;/p&gt;
&lt;table border=&quot;0&quot;&gt;&lt;tbody readability=&quot;6&quot;&gt;&lt;tr&gt;&lt;td&gt;属性&lt;/td&gt;
&lt;td&gt;描述&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;monitorInterval&lt;/td&gt;
&lt;td&gt;如果文件被修改了，指定时间后会重新加载配置。单位秒，最小值是5&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td&gt;packages&lt;/td&gt;
&lt;td&gt;以逗号隔开的包名列表，用于搜索插件，比如自定义filter、appender等。插件仅会加载一次，所以要想修改后生效必须重启项目&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td&gt;status&lt;/td&gt;
&lt;td&gt;内部日志级别，设置值为debug可以在控制台上清晰地看到整个日志事件流程，所使用的Logger是org.apache.logging.log4j.core.LOGGER&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;strict &lt;/td&gt;
&lt;td&gt;允许使用严格的XML格式。不支持JSON配置&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;verbose  &lt;/td&gt;
&lt;td&gt;在加载插件时启用诊断信息&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;&lt;span&gt;&amp;lt;Appenders&amp;gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Log4j允许将日志请求打印到多个目的地。在log4j语言中，输出目的地称为Appender。目前，appender存在于控制台、文件、远程套接字服务器、Apache Flume、JMS、远程UNIX Syslog守护进程和各种数据库api中。以下介绍几种比较常用的appender，如需了解更多可以到官网上进行查阅。&lt;/p&gt;
&lt;h3&gt;1、ConsoleAppender&lt;/h3&gt;
&lt;p&gt;输出到控制台，&amp;lt;Console&amp;gt;&lt;/p&gt;
&lt;table border=&quot;0&quot;&gt;&lt;tbody readability=&quot;2&quot;&gt;&lt;tr&gt;&lt;td&gt;
&lt;p&gt;参数名称&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;类型&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;描述&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
&lt;p&gt;filter&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;Filter&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt; 过滤器&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
&lt;p&gt;layout&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;Layout&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt; 日志输出格式&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
&lt;p&gt;follow&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;boolean&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;

&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
&lt;p&gt;direct&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;boolean&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;

&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
&lt;p&gt;name&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;String&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;Appender的名称&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td&gt;
&lt;p&gt;ignoreExceptions&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;boolean&lt;/p&gt;
&lt;/td&gt;
&lt;td readability=&quot;5&quot;&gt;
&lt;p&gt;默认true，忽略写入异常&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td&gt;
&lt;p&gt;target&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;String&lt;/p&gt;
&lt;/td&gt;
&lt;td readability=&quot;5&quot;&gt;
&lt;p&gt;SYSTEM_OUT或SYSTEM_ERR，默认是SYSTEM_OUT&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;h3&gt;2、FileAppender&lt;/h3&gt;
&lt;p&gt;输出到文件，&amp;lt;File&amp;gt;&lt;/p&gt;
&lt;table class=&quot;bodyTable table table-striped table-bordered&quot; border=&quot;0&quot;&gt;&lt;tbody readability=&quot;10.5&quot;&gt;&lt;tr class=&quot;a&quot;&gt;&lt;th&gt;
&lt;p&gt;参数&lt;/p&gt;
&lt;/th&gt;
&lt;th&gt;
&lt;p&gt;类型&lt;/p&gt;
&lt;/th&gt;
&lt;th&gt;
&lt;p&gt;描述&lt;/p&gt;
&lt;/th&gt;
&lt;/tr&gt;&lt;tr class=&quot;b&quot; readability=&quot;3&quot;&gt;&lt;td&gt;
&lt;p&gt;append&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;boolean&lt;/p&gt;
&lt;/td&gt;
&lt;td readability=&quot;5&quot;&gt;
&lt;p&gt;默认是true，新记录将追加到文件尾部&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;a&quot; readability=&quot;3&quot;&gt;&lt;td&gt;
&lt;p&gt;bufferedIO&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;boolean&lt;/p&gt;
&lt;/td&gt;
&lt;td readability=&quot;5&quot;&gt;
&lt;p&gt;默认是true，使用缓冲区可以显著地提高性能&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;b&quot; readability=&quot;3&quot;&gt;&lt;td&gt;
&lt;p&gt;bufferSize&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;int&lt;/p&gt;
&lt;/td&gt;
&lt;td readability=&quot;5&quot;&gt;
&lt;p&gt;当bufferedIO是true时，这个属性缓冲区大小，默认是8192字节。&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;a&quot; readability=&quot;4.5&quot;&gt;&lt;td&gt;
&lt;p&gt;createOnDemand&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;boolean&lt;/p&gt;
&lt;/td&gt;
&lt;td readability=&quot;6&quot;&gt;
&lt;p&gt;appender按需创建文件。只有当一个日志事件通过所有过滤器并被路由到这个appender时，appender才会创建这个文件。默认值为假&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;b&quot; readability=&quot;4.5&quot;&gt;&lt;td&gt;
&lt;p&gt;filter&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;Filter&lt;/p&gt;
&lt;/td&gt;
&lt;td readability=&quot;6&quot;&gt;
&lt;p&gt;一个过滤器来确定事件是否应该由这个Appender处理。使用复合过滤器可以使用多个筛选器&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;a&quot; readability=&quot;3&quot;&gt;&lt;td&gt;
&lt;p&gt;fileName&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;String&lt;/p&gt;
&lt;/td&gt;
&lt;td readability=&quot;5&quot;&gt;
&lt;p&gt;要写入的文件的名称。如果文件或它的任何父目录不存在，它们将被创建&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;b&quot; readability=&quot;4.5&quot;&gt;&lt;td&gt;
&lt;p&gt;immediateFlush&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;boolean&lt;/p&gt;
&lt;/td&gt;
&lt;td readability=&quot;6&quot;&gt;
&lt;p&gt;默认true，每次写入后都将有一个刷新。这将保证缓冲区的数据被写入磁盘，但可能会影响性能。&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;a&quot;&gt;&lt;td&gt;
&lt;p&gt;layout&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;Layout&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;日志格式&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;b&quot;&gt;&lt;td&gt;
&lt;p&gt;locking&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;boolean&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;文件锁，默认false&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;a&quot;&gt;&lt;td&gt;
&lt;p&gt;name&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;String&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;Appender的名称&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;b&quot; readability=&quot;3&quot;&gt;&lt;td&gt;
&lt;p&gt;ignoreExceptions&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;boolean&lt;/p&gt;
&lt;/td&gt;
&lt;td readability=&quot;5&quot;&gt;
&lt;p&gt;默认true，忽略写入异常&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;a&quot; readability=&quot;3&quot;&gt;&lt;td&gt;
&lt;p&gt;filePermissions&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;String&lt;/p&gt;
&lt;/td&gt;
&lt;td readability=&quot;5&quot;&gt;
&lt;p&gt;定义文件权限&lt;/p&gt;
&lt;p&gt;例: rw------- or rw-rw-rw- etc...&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;b&quot;&gt;&lt;td&gt;
&lt;p&gt;fileOwner&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;String&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;定义文件所有者&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;a&quot;&gt;&lt;td&gt;
&lt;p&gt;fileGroup&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;String&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;定义文件组&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;h3&gt;3、JDBCAppender&lt;/h3&gt;
&lt;p&gt;JDBCAppender使用标准JDBC将日志事件写入到关系数据库表中。它可以配置为使用JNDI数据源或自定义工厂方法获得JDBC连接。无论采用哪种方法，都必须由连接池来支持。否则，日志记录性能将受到极大的影响。如果已配置的JDBC驱动程序支持批处理语句，并且将缓冲区大小配置为一个正数，那么日志事件将被批处理。&lt;/p&gt;
&lt;h4&gt;（1）&amp;lt;JDBC&amp;gt;&lt;/h4&gt;
&lt;table class=&quot;bodyTable table table-striped table-bordered&quot; border=&quot;0&quot;&gt;&lt;tbody readability=&quot;7.5&quot;&gt;&lt;tr class=&quot;a&quot;&gt;&lt;th&gt;
&lt;p&gt;参数&lt;/p&gt;
&lt;/th&gt;
&lt;th&gt;
&lt;p&gt;类型&lt;/p&gt;
&lt;/th&gt;
&lt;th&gt;
&lt;p&gt;描述&lt;/p&gt;
&lt;/th&gt;
&lt;/tr&gt;&lt;tr class=&quot;b&quot; readability=&quot;3&quot;&gt;&lt;td&gt;
&lt;p&gt;name&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;String&lt;/p&gt;
&lt;/td&gt;
&lt;td readability=&quot;5&quot;&gt;
&lt;p&gt;必须，appender的名称&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;a&quot; readability=&quot;3&quot;&gt;&lt;td&gt;
&lt;p&gt;ignoreExceptions&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;boolean&lt;/p&gt;
&lt;/td&gt;
&lt;td readability=&quot;5&quot;&gt;
&lt;p&gt;默认true，忽略日志事件异常&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;b&quot;&gt;&lt;td&gt;
&lt;p&gt;filter&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;Filter&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;过滤器&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;a&quot; readability=&quot;4.5&quot;&gt;&lt;td&gt;
&lt;p&gt;bufferSize&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;int&lt;/p&gt;
&lt;/td&gt;
&lt;td readability=&quot;6&quot;&gt;
&lt;p&gt;如果一个大于0的整数，这将导致appender缓冲日志事件，并在缓冲区达到该大小时刷新写入数据&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;b&quot; readability=&quot;3&quot;&gt;&lt;td&gt;
&lt;p&gt;connectionSource&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;ConnectionSource&lt;/p&gt;
&lt;/td&gt;
&lt;td readability=&quot;5&quot;&gt;
&lt;p&gt;必须，可被检索到的数据库连接&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;a&quot; readability=&quot;3&quot;&gt;&lt;td&gt;
&lt;p&gt;tableName&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;String&lt;/p&gt;
&lt;/td&gt;
&lt;td readability=&quot;5&quot;&gt;
&lt;p&gt;必须，插入日志事件的数据表名&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;b&quot; readability=&quot;3&quot;&gt;&lt;td&gt;
&lt;p&gt;columnConfigs&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;ColumnConfig[]&lt;/p&gt;
&lt;/td&gt;
&lt;td readability=&quot;5&quot;&gt;
&lt;p&gt;必须，需要插入到数据库的字段，由多个&amp;lt;Column&amp;gt;元素组成&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;a&quot; readability=&quot;3&quot;&gt;&lt;td&gt;
&lt;p&gt;columnMappings&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;ColumnMapping[]&lt;/p&gt;
&lt;/td&gt;
&lt;td readability=&quot;5&quot;&gt;
&lt;p&gt;必须，字段映射配置&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h4&gt;（2）使用&amp;lt;DataSource&amp;gt;来获得JDBC的连接，这里仅列出jndi：&lt;/h4&gt;
&lt;table class=&quot;bodyTable table table-striped table-bordered&quot; border=&quot;0&quot;&gt;&lt;tbody readability=&quot;1.5&quot;&gt;&lt;tr class=&quot;a&quot;&gt;&lt;th&gt;参数&lt;/th&gt;
&lt;th&gt;类型&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;&lt;tr class=&quot;b&quot; readability=&quot;3&quot;&gt;&lt;td&gt;jndiName&lt;/td&gt;
&lt;td&gt;String&lt;/td&gt;
&lt;td&gt;必需的，&lt;span class=&quot;tgt&quot; data-group=&quot;0-1&quot;&gt;&lt;span class=&quot;tgt&quot; data-group=&quot;0-2&quot;&gt;如已配置的jndi为jdbc/LoggingDatabase，那此处的值为java:comp/env/jdbc/LoggingDatabase。&lt;span class=&quot;tgt highlight&quot; data-group=&quot;0-3&quot;&gt;数据源必须由连接池来支持;&lt;span class=&quot;tgt&quot; data-group=&quot;0-4&quot;&gt;否则，日志记录将非常缓慢。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h4&gt;（3）使用&amp;lt;Column&amp;gt;来指定要写入表中的哪些列，以及如何对它们进行写入。它没有SQL注入漏洞。&lt;/h4&gt;
&lt;table class=&quot;bodyTable table table-striped table-bordered&quot; border=&quot;0&quot;&gt;&lt;tbody readability=&quot;7&quot;&gt;&lt;tr class=&quot;a&quot;&gt;&lt;th&gt;参数&lt;/th&gt;
&lt;th&gt;类型&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;&lt;tr class=&quot;b&quot;&gt;&lt;td&gt;name&lt;/td&gt;
&lt;td&gt;String&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;必须，表字段名称&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;a&quot; readability=&quot;4.5&quot;&gt;&lt;td&gt;pattern&lt;/td&gt;
&lt;td&gt;String&lt;/td&gt;
&lt;td readability=&quot;6&quot;&gt;
&lt;p&gt;使用PatternLayout模式插入值，注：同一个Column元素中，patter、literal、isEventTimestamp3个属性只能存在一个&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;b&quot; readability=&quot;4.5&quot;&gt;&lt;td&gt;literal&lt;/td&gt;
&lt;td&gt;String&lt;/td&gt;
&lt;td readability=&quot;6&quot;&gt;
&lt;p&gt;该值将直接包含在SQL语句中执行，比如：rand()函数将生成随机数，类似myibats中的${}&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;a&quot; readability=&quot;3&quot;&gt;&lt;td&gt;isEventTimestamp&lt;/td&gt;
&lt;td&gt;boolean&lt;/td&gt;
&lt;td readability=&quot;5&quot;&gt;
&lt;p&gt;是否时间格式java.sql.Types.TIMESTAMP&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;b&quot; readability=&quot;4.5&quot;&gt;&lt;td&gt;isUnicode&lt;/td&gt;
&lt;td&gt;boolean&lt;/td&gt;
&lt;td readability=&quot;6&quot;&gt;
&lt;p&gt;除非指定pattern，否则该属性将被忽略。如果是true，该值将插入Unicode。否则，该值将被插入非Unicode。&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;a&quot; readability=&quot;4.5&quot;&gt;&lt;td&gt;isClob&lt;/td&gt;
&lt;td&gt;boolean&lt;/td&gt;
&lt;td readability=&quot;6&quot;&gt;
&lt;p&gt;除非指定pattern，否则该属性将被忽略。如果是true，该值将插入CLOB，否则将插入varchar、nvarchar&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h4&gt;实例：&lt;/h4&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;?&lt;/span&gt;&lt;span&gt;xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;?&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Configuration &lt;/span&gt;&lt;span&gt;status&lt;/span&gt;&lt;span&gt;=&quot;error&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Appenders&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;JDBC &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;databaseAppender&quot;&lt;/span&gt;&lt;span&gt; tableName&lt;/span&gt;&lt;span&gt;=&quot;dbo.application_log&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;DataSource &lt;/span&gt;&lt;span&gt;jndiName&lt;/span&gt;&lt;span&gt;=&quot;java:/comp/env/jdbc/LoggingDataSource&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Column &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;eventDate&quot;&lt;/span&gt;&lt;span&gt; isEventTimestamp&lt;/span&gt;&lt;span&gt;=&quot;true&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Column &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;level&quot;&lt;/span&gt;&lt;span&gt; pattern&lt;/span&gt;&lt;span&gt;=&quot;%level&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Column &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;logger&quot;&lt;/span&gt;&lt;span&gt; pattern&lt;/span&gt;&lt;span&gt;=&quot;%logger&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Column &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;message&quot;&lt;/span&gt;&lt;span&gt; pattern&lt;/span&gt;&lt;span&gt;=&quot;%message&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Column &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;exception&quot;&lt;/span&gt;&lt;span&gt; pattern&lt;/span&gt;&lt;span&gt;=&quot;%ex{full}&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;JDBC&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Appenders&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Loggers&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Root &lt;/span&gt;&lt;span&gt;level&lt;/span&gt;&lt;span&gt;=&quot;warn&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;AppenderRef &lt;/span&gt;&lt;span&gt;ref&lt;/span&gt;&lt;span&gt;=&quot;databaseAppender&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Root&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Loggers&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Configuration&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt; &lt;/h4&gt;
&lt;p&gt;&lt;span&gt;&amp;lt;PatternLayout&amp;gt;&lt;/span&gt;&lt;/p&gt;
&lt;h4&gt;（1）日期，%d / %date&lt;/h4&gt;
&lt;table class=&quot;bodyTable table table-striped table-bordered&quot; border=&quot;0&quot;&gt;&lt;tbody readability=&quot;1.5&quot;&gt;&lt;tr class=&quot;a&quot;&gt;&lt;th&gt;
&lt;p&gt;Pattern&lt;/p&gt;
&lt;/th&gt;
&lt;th&gt;
&lt;p&gt;示例&lt;/p&gt;
&lt;/th&gt;
&lt;/tr&gt;&lt;tr class=&quot;b&quot;&gt;&lt;td&gt;
&lt;p&gt;%d{DEFAULT}&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;2012-11-02 14:34:02,781&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;a&quot;&gt;&lt;td&gt;
&lt;p&gt;%d{ISO8601}&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;2012-11-02T14:34:02,781&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;b&quot;&gt;&lt;td&gt;
&lt;p&gt;%d{ISO8601_BASIC}&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;20121102T143402,781&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;a&quot;&gt;&lt;td&gt;
&lt;p&gt;%d{ABSOLUTE}&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;14:34:02,781&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;b&quot;&gt;&lt;td&gt;
&lt;p&gt;%d{DATE}&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;02 Nov 2012 14:34:02,781&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;a&quot;&gt;&lt;td&gt;
&lt;p&gt;%d{COMPACT}&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;20121102143402781&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;b&quot;&gt;&lt;td&gt;
&lt;p&gt;%d{HH:mm:ss,SSS}&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;14:34:02,781&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;a&quot; readability=&quot;4.5&quot;&gt;&lt;td readability=&quot;6&quot;&gt;
&lt;p&gt;%d{dd MMM yyyy HH:mm:ss,SSS}&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;02 Nov 2012 14:34:02,781&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;b&quot;&gt;&lt;td&gt;
&lt;p&gt;%d{HH:mm:ss}{GMT+0}&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;18:34:02&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;a&quot;&gt;&lt;td&gt;
&lt;p&gt;%d{UNIX}&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;1351866842&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;b&quot;&gt;&lt;td&gt;
&lt;p&gt;%d{UNIX_MILLIS}&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;1351866842781&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;当然你也可以自定义格式，比如 %d{yyyy-MM-dd HH:mm:ss}&lt;/p&gt;
&lt;h4&gt;（2）记录器，%c / %logger&lt;/h4&gt;
&lt;table class=&quot;bodyTable table table-striped table-bordered&quot; border=&quot;0&quot;&gt;&lt;tbody readability=&quot;2&quot;&gt;&lt;tr class=&quot;a&quot;&gt;&lt;th&gt;
&lt;p&gt;Conversion Pattern&lt;/p&gt;
&lt;/th&gt;
&lt;th&gt;
&lt;p&gt;Logger Name&lt;/p&gt;
&lt;/th&gt;
&lt;th&gt;
&lt;p&gt;结果&lt;/p&gt;
&lt;/th&gt;
&lt;/tr&gt;&lt;tr class=&quot;b&quot;&gt;&lt;td&gt;
&lt;p&gt;%c{1}&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;org.apache.commons.Foo&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;Foo&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;a&quot;&gt;&lt;td&gt;
&lt;p&gt;%c{2}&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;org.apache.commons.Foo&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;commons.Foo&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;b&quot;&gt;&lt;td&gt;
&lt;p&gt;%c{10}&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;org.apache.commons.Foo&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;org.apache.commons.Foo&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;a&quot;&gt;&lt;td&gt;
&lt;p&gt;%c{-1}&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;org.apache.commons.Foo&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;apache.commons.Foo&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;b&quot;&gt;&lt;td&gt;
&lt;p&gt;%c{-2}&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;org.apache.commons.Foo&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;commons.Foo&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;a&quot;&gt;&lt;td&gt;
&lt;p&gt;%c{-10}&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;org.apache.commons.Foo&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;org.apache.commons.Foo&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;b&quot;&gt;&lt;td&gt;
&lt;p&gt;%c{1.}&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;org.apache.commons.Foo&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;o.a.c.Foo&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;a&quot; readability=&quot;3&quot;&gt;&lt;td&gt;
&lt;p&gt;%c{1.1.~.~}&lt;/p&gt;
&lt;/td&gt;
&lt;td readability=&quot;5&quot;&gt;
&lt;p&gt;org.apache.commons.test.Foo&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;o.a.~.~.Foo&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;b&quot; readability=&quot;3&quot;&gt;&lt;td&gt;
&lt;p&gt;%c{.}&lt;/p&gt;
&lt;/td&gt;
&lt;td readability=&quot;5&quot;&gt;
&lt;p&gt;org.apache.commons.test.Foo&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;....Foo&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;{?} - ?是正整数时表示从右边开始取n个部分，负整数表示从左边开始移除n个部分，那为什么%c{-10}是完整的名称我也不清楚，欢迎留言&lt;/p&gt;
&lt;h4&gt;（3）日志信息，%m / %msg / %message&lt;/h4&gt;
&lt;h4&gt;（4）日志级别，%level&lt;/h4&gt;

&lt;p&gt;&lt;span&gt;&amp;lt;Filter&amp;gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;log4j2自带多种filter供直接使用，也可以由我们自己来定义filter：&lt;/p&gt;
&lt;p&gt;MyFilter.java&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.logging.log4j.Level;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.logging.log4j.Marker;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.logging.log4j.ThreadContext;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.logging.log4j.core.LogEvent;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.logging.log4j.core.Logger;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.logging.log4j.core.config.plugins.Plugin;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.logging.log4j.core.config.plugins.PluginAttribute;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.logging.log4j.core.config.plugins.PluginFactory;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.logging.log4j.core.filter.AbstractFilter;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.logging.log4j.message.Message;

@Plugin(name &lt;/span&gt;= &quot;MyFilter&quot;, category = &quot;Core&quot;, elementType = &quot;filter&quot;, printObject = &lt;span&gt;true&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; MyFilter &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; AbstractFilter {

    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt;&lt;span&gt; Level level;

    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; MyFilter(Level level, Result onMatch, Result onMismatch) {
        &lt;/span&gt;&lt;span&gt;super&lt;/span&gt;&lt;span&gt;(onMatch, onMismatch);
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.level =&lt;span&gt; level;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; Result filter(Logger logger, Level level, Marker marker, String msg, Object[] params) {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; filter(level);
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; Result filter(Logger logger, Level level, Marker marker, Object msg, Throwable t) {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; filter(level);
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; Result filter(Logger logger, Level level, Marker marker, Message msg, Throwable t) {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; filter(level);
    }

    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; Result filter(LogEvent event) {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; filter(event.getLevel());
    }

    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; Result filter(Level level) {

        &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;
        * 业务逻辑
        * &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
        
        &lt;span&gt;return&lt;/span&gt; level.isMoreSpecificThan(&lt;span&gt;this&lt;/span&gt;.level) ?&lt;span&gt; onMatch : onMismatch;
    }

    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String toString() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; level.toString();
    }

    @PluginFactory
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; MyFilter createFilter(@PluginAttribute(value = &quot;level&quot;, defaultString = &quot;ERROR&quot;&lt;span&gt;) Level level,
                                               @PluginAttribute(value &lt;/span&gt;= &quot;onMatch&quot;, defaultString = &quot;NEUTRAL&quot;&lt;span&gt;) Result onMatch,
                                               @PluginAttribute(value &lt;/span&gt;= &quot;onMismatch&quot;, defaultString = &quot;DENY&quot;&lt;span&gt;) Result onMismatch) {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; MyFilter(level, onMatch, onMismatch);
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;log4j2.xml&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;?&lt;/span&gt;&lt;span&gt;xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;?&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Configuration &lt;/span&gt;&lt;span&gt;status&lt;/span&gt;&lt;span&gt;=&quot;warn&quot;&lt;/span&gt;&lt;span&gt; monitorInterval&lt;/span&gt;&lt;span&gt;=&quot;5&quot;&lt;/span&gt;&lt;span&gt;  packages&lt;/span&gt;&lt;span&gt;=&quot;your packages&quot;&lt;/span&gt;&lt;span&gt; verbose&lt;/span&gt;&lt;span&gt;=&quot;false&quot;&lt;/span&gt;&lt;span&gt; strict&lt;/span&gt;&lt;span&gt;=&quot;true&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Appenders&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Console &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;Console&quot;&lt;/span&gt;&lt;span&gt; target&lt;/span&gt;&lt;span&gt;=&quot;SYSTEM_OUT&quot;&lt;/span&gt;&lt;span&gt; ignoreExceptions&lt;/span&gt;&lt;span&gt;=&quot;true&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;PatternLayout &lt;/span&gt;&lt;span&gt;pattern&lt;/span&gt;&lt;span&gt;=&quot;%d{yyyy-MM-dd  HH:mm:ss} %level %logger{10} - %msg&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;MyFilter &lt;/span&gt;&lt;span&gt;level&lt;/span&gt;&lt;span&gt;=&quot;info&quot;&lt;/span&gt;&lt;span&gt; onMatch&lt;/span&gt;&lt;span&gt;=&quot;ACCEPT&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Console&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Appenders&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Loggers&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Root &lt;/span&gt;&lt;span&gt;level&lt;/span&gt;&lt;span&gt;=&quot;info&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;AppenderRef &lt;/span&gt;&lt;span&gt;ref&lt;/span&gt;&lt;span&gt;=&quot;Console&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Root&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Loggers&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Configuration&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;补充：&lt;/h2&gt;
&lt;p&gt;在实际应用中，有时需要对用户的访问信息进行记录，比如请求参数、用户id等等。在log4j1中我们会使用MDC和NDC来存储应用程序的上下文信息，而log4j2使用ThreadContext来实现MDC和NDC两者的功能。 &lt;/p&gt;
&lt;p&gt;（1）NDC采用类似栈的机制来存储上下文信息，线程独立。&lt;/p&gt;
&lt;p&gt;在PatternLayout中使用 %x 来输出，注意x是小写。&lt;/p&gt;
&lt;p&gt;实例：&lt;/p&gt;
&lt;p&gt;Test.java&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
ThreadContext.push(&quot;hello world!&quot;);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;log4j2.xml&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&amp;lt;Column name=&quot;tip&quot; pattern=&quot;%x&quot; /&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;（2）MDC采用类似map的机制来存储信息，线程独立。&lt;/p&gt;
&lt;p&gt;在PatternLayout中使用 %X{userId} 来输出，注意X是大写。&lt;/p&gt;
&lt;p&gt;实例：&lt;/p&gt;
&lt;p&gt;Test.java&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
ThreadContext.put(&quot;userId&quot;,&quot;1&quot;);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;log4j2.xml&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&amp;lt;Column name=&quot;userId&quot; pattern=&quot;%X{userId}&quot; /&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注意使用完后调用clearAll()清除上下文映射和堆栈。&lt;/p&gt;


&lt;p&gt;api：&lt;a href=&quot;http://logging.apache.org/log4j/2.x/javadoc.html&quot; target=&quot;_blank&quot;&gt;http://logging.apache.org/log4j/2.x/javadoc.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;官网地址：&lt;a href=&quot;https://logging.apache.org/log4j/2.x/index.html&quot; target=&quot;_blank&quot;&gt;https://logging.apache.org/log4j/2.x/index.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;转载请注明出处：&lt;a href=&quot;http://www.cnblogs.com/cjh-notes/p/8017855.html&quot; target=&quot;_blank&quot;&gt;http://www.cnblogs.com/cjh-notes/p/8017855.html&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Wed, 20 Dec 2017 04:58:00 +0000</pubDate>
<dc:creator>代码风云</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/cjh-notes/p/8017855.html</dc:identifier>
</item>
<item>
<title>【Win 10 应用开发】MIDI 音乐合成——乐理篇 - 东邪独孤</title>
<link>http://www.cnblogs.com/tcjiaan/p/8067058.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/tcjiaan/p/8067058.html</guid>
<description>&lt;p&gt;针对 MIDI 音乐的 API ，其实在 Win 8.1 的时候就出现。在UWP中采用了新的驱动模式，MIDI 消息传递更加高效。&lt;/p&gt;
&lt;p&gt;首先得说明的是，UWP 的 MIDI 相关 API 不是针对 MIDI 文件的，而是针对 MIDI 设备的，所以它不具备保存 MIDI 文件的功能。当然，如果你想把 MIDI 消息存为音频文件，完全可以自己一个字节一个字节地写入。MIDI 文件分为两个数据块——头部和音轨。头部主要描述音轨类型（单轨或多轨），包含轨道数量，以及计时方式。&lt;/p&gt;
&lt;p&gt;MIDI 有两种方式来描述音符时值：&lt;/p&gt;
&lt;p&gt;&lt;span&gt;1、Timing Clock：单个四分音符（常规是每四分音符为一拍）的“脉冲时钟数”（PPQ），时间单位Tick，一般为24的倍数。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;2、帧率。这个跟视频有点像，比如24帧，30帧等。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;计时方式用两个字节表示（16位），如果最高位为0，表示用Tick方式来描述，剩下的15位表示Tick值；如果最高位为1，则表示帧率。&lt;/p&gt;
&lt;p&gt;比如，如果用Tick方式表示（常用），第16位必须为0，即 0111 1111  1111 1111。&lt;/p&gt;
&lt;p&gt;MIDI 文件除头部外，剩下部分都是音轨数据。每个音轨由一系列事件组成。事件就是MIDI指令。MIDI 文件之所以体积小，是因为它不存储音频数据，只存储指令。比如 Note on 开始播放某个音符，Note off 停止播放某个音符。每个事件都由两段组成：&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&amp;lt;delta time&amp;gt;&amp;lt;event data&amp;gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Delta time 指事件的时间偏移量，它是相对于前一个事件而言的，当然，如果是轨道中的第一个事件（或者是元数据事件），delta time 可以是0。常用的是tick计时方式，比如，文件头中指定每个四分音符的时值为96，那么，假调事件A播放中音1（C），事件B停止播放中音1，如果这个中音1是四分音符，即时值为1拍，两个事件可这样排列：&lt;/p&gt;
&lt;p&gt;&amp;lt;0&amp;gt;&amp;lt;note on 60&amp;gt;&amp;lt;96&amp;gt;&amp;lt;note off 60&amp;gt;&lt;/p&gt;
&lt;p&gt;60中音1的编码，这个老周后面会说，也就是B事件要在A事件后面，相隔时间为96，1拍。如果是八分音符呢，就是48（半拍）。&lt;/p&gt;
&lt;p&gt;&amp;lt;0&amp;gt;&amp;lt;note on 60&amp;gt;&amp;lt;48&amp;gt;&amp;lt;note off 60&amp;gt;&lt;/p&gt;

&lt;p&gt;好了，关于 MIDI 文件的信息就说到这里，有兴趣的话，你可以到 midi.org 官方网站去查看相关的规范。老周写了一个读写 MIDI 文件的通用类，功能还未完尚，仅供参考。&lt;a href=&quot;https://share.weiyun.com/93413b7d936d1e6cbbc77ab4b6a79a6f&quot; target=&quot;_blank&quot;&gt;下载链接在这里&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;=====================================================&lt;/p&gt;
&lt;p&gt;下面咱们说正题。&lt;/p&gt;
&lt;p&gt;UWP 中的 MIDI API 是用于与 MIDI 设备通信的。其实总的来说也就两种设备：输入/输出。输入设备一般来说也就是 MIDI 键盘了。这个我们一般人用不上，买一个的话也不便宜，起码要几百大洋。输出设备可以是专门的MIDI声卡，当然，我们一般的声卡也可以。普通声卡支持MIDI 的通用标准，缺点是音色不太真实。专业声卡再配上软音源就可以模拟出更多乐器的音色，而且质量也高。软音源也不便宜，买一套大概也要一千大洋。&lt;/p&gt;
&lt;p&gt;本篇咱们先不说 API 怎么用，很简单，因为微软都封装好了的，直接发送 MIDI 消息就行了，或者从外接的 MIDI 键盘中接收 MIDI 消息。但是，前提是你得有一点乐理知识。要求不高，能看懂简谱的话，就可以了。&lt;/p&gt;

&lt;h2&gt;简谱头部&lt;/h2&gt;
&lt;p&gt;在简谱上，标题、副标题这些就不多说了，都能看明白的。在简谱头部，我们主要了解三个标记：&lt;/p&gt;
&lt;p&gt;1、调号。比如我们看到许多简谱上会标注 1 = C，意思是中音1的发音是钢琴键盘上的【中央C】键（白键）。调号不理解也无所谓，其实不影响MIDI编程，我们就不需要弄得太复杂了，尤其是大调小调的区分，除非你对音乐有兴趣，可以研究研究。反正就是调越高声音越尖锐，调越低声音越柔和。所以小调一般很适合民歌。&lt;/p&gt;
&lt;p&gt;2、拍号：常用的是 4/4，分子为4，表示每四拍为一小节；分母为4，表示一个四分音符为一拍。这是最常见的。比如这样：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/367389/201712/367389-20171219175655990-1165541022.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;前面部分是调号，紧跟着是拍号。&lt;/p&gt;
&lt;p&gt;如果是，2/4，表明每两拍为一小节，四分音符为一拍。&lt;/p&gt;
&lt;p&gt;3、节奏（节拍）：表示每分钟多少拍（BPM）。常见的节奏为120。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/367389/201712/367389-20171219175953646-1823718427.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;表示一分钟 120 拍，所以，每拍的时长为 0.5 秒。&lt;/p&gt;
&lt;p&gt;如果是60，表明一分钟60拍，即一秒一拍。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/367389/201712/367389-20171219180111975-2105185433.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;实际上，决定曲子速度的不是拍号，而是节奏。120 的曲子速度自然要比 60 的快。拍号只是确定每个音符的相对时值，标准是四分音符为1拍，那么八分音符就是半拍，十六分音符就是1/4拍，三十二分音符就是1/8拍了。总之都是二次方的，而且分的越小时值越短。&lt;/p&gt;
&lt;p&gt;前面提到MIDI文件有 Tick 和帧率两种计时方式，其实计时方式也不会影响曲子的速度（时长），就好比2分钟长的视频，你把帧率从 30 帧改为 15 帧，但视频长度依然是 2 分钟，只是变得不太流畅而已。MIDI 中也一样，速度是由节拍映射（Tempo map）决定的。不同的是，我们简谱中用的是 BPM（每分钟多少拍），而MIDI中用的是微秒，比如，BPM=120，即0.5秒一拍，换算为微秒就是 500000了。&lt;/p&gt;

&lt;h2&gt;小节&lt;/h2&gt;
&lt;p&gt;上面咱们提到过，4/4表示每四分音符为一拍，每小节一拍。那小节是啥？在简谱上，用小节线（竖线）来划分小节。请看下面例子。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/367389/201712/367389-20171220103606975-964345581.png&quot; alt=&quot;&quot; width=&quot;540&quot;/&gt;&lt;/p&gt;
&lt;p&gt;上面例子中有两个小节，按照拍号的规定，每小节必须是四拍，第一个3是两拍，第二个3是两拍，加起来正好是四拍。所以后面紧跟一条竖线，这根线就是小节线。第二个小节中，中音5是一拍，中音2是一拍，紧接着的中音3、1下面都有一横线，是八分音符，各半拍，加起来正好一拍；最后的低音6是一拍，合起来也是四拍。&lt;/p&gt;

&lt;p&gt;再看一个例子。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/367389/201712/367389-20171220104908928-1285888503.png&quot; alt=&quot;&quot; width=&quot;680&quot;/&gt;&lt;/p&gt;
&lt;p&gt;注意看拍号，2/4表示每四分音符为一拍，但每小节是两拍。比如第一小节，中音1、中音2都是四分音符，各一拍，共两拍，所以构成一个小节。&lt;/p&gt;

&lt;h2&gt;音符&lt;/h2&gt;
&lt;p&gt;我们刚刚在简谱上看到的1234567，就是音符，当然这是简谱上的表示法，这种表示法，容易识别。在五线谱中，音符是用“蝌蚪文”来表示的，不容易分别，也不好懂。&lt;/p&gt;
&lt;p&gt;顺便说说唱名和音名。这两个东西，很多时候都会搞混。所谓唱名，就是你用嘴巴唱出来的时候发的声，就是&lt;/p&gt;
&lt;p&gt;dol  re  mi  fa  sol  la  xi&lt;/p&gt;
&lt;p&gt;对应的音符就是 1 2 3 4 5 6 7。这个应该不难，小学生都懂。&lt;/p&gt;
&lt;p&gt;音名就是钢琴键盘上那些字母，与唱名对应的是 C D E F G A B。&lt;/p&gt;
&lt;p&gt;中国很多乐器（尤其是吹管类）的基本音域都在 1 2 3 5 6 这几个音上，那是因为我们古代的定音方式为“宫，商，角，徽，羽”，有的说是“宫，商，角，徴，羽”，对应的大约是1 2 3 5 6，古人是用“三分损益”法计算音阶的。因此，许多民乐都没有 4 这个音（3和4的音程是半音），比如，巴乌就是个典型。 笛子和洞箫虽然有 4 这个音（放开全部音孔，八孔箫要按住半音孔），但发声相对较弱。其实，像巴乌（葫芦丝）这些乐器也可以通过接中音5以下的音孔来调节出 4 的音，但也是比较弱的。&lt;/p&gt;

&lt;h2&gt;十二平均律&lt;/h2&gt;
&lt;p&gt;音阶划分方式很多，比如中国古代有“五度相生”法，五度指纯五度，这个很复杂，老周也说不清楚，不过，我可以总结出一句不太靠谱的话——&lt;strong&gt;&lt;em&gt;纯五度的总音程为 3.5 个全音（三个全音，一个半音）&lt;/em&gt;&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;其他的计算方式不多讲，因为 MIDI 的音阶用的是十二平均律，这是世界普及的，琴键上用的也是十二平均律。其实，十二平均律是中国人发明的，在明朝的时候就出现了，只是当时乐器生产工艺限制，没有人愿意接受这种方式，结果让西方人抢了头功。&lt;/p&gt;
&lt;p&gt;十二平均律是以每【半音】来划分的，因此，它可以包含12个音：&lt;/p&gt;
&lt;p&gt;1、1#、2、2#、3、4、4#、5、5#、6、6#、7&lt;/p&gt;
&lt;p&gt;对应的音名为&lt;/p&gt;
&lt;p&gt;C、C#、D、D#、E、F、F#、G、G#、A、A#、B&lt;/p&gt;
&lt;p&gt;其中，3和4之间的音程是半音，前一八度的7与后一八度的1之间的音程是半音，其余为全音，比如1和2之间是全音，所以，在1和2之半加一个 1#，表示在1的基础上升半音，因此，1# 和 2b 是同一个位置，1升半音就是 1#，2 降半音是 2b。&lt;/p&gt;
&lt;p&gt;文字是说不清楚的，看看这个图你就懂了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/367389/201712/367389-20171220115052568-710835328.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; 不管白键还是黑键，两个键之间的音程都是半音，你会看到，3 和 4 之间没有黑键，因为 3 和 4 之间的音程就是半音。故 12345 就是所谓的纯五度，因为它们的总音程就是 3.5 个全音。&lt;/p&gt;
&lt;p&gt;再看一张更大的图。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/367389/201712/367389-20171220115425631-752347233.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这样你就看到规律了，一个八度的键排序是这样的：&lt;/p&gt;
&lt;p&gt;      黑              黑                       黑              黑                黑                        ……&lt;/p&gt;
&lt;p&gt;-------------------------------------------------------------------------------------------------------------------&lt;/p&gt;
&lt;p&gt;白            白              白      白             白               白                 白             ……&lt;/p&gt;
&lt;p&gt;故而，3和4之间是两个白键，7和1之间是两个白键，因为它们的音程都是半音。&lt;/p&gt;
&lt;p&gt;将其替换为十二个音符，就是：&lt;/p&gt;
&lt;p&gt;    1#       2#              4#        5#        6#            ……&lt;/p&gt;
&lt;p&gt;-------------------------------------------------------------------------------&lt;/p&gt;
&lt;p&gt;1         2          3   4          5          6          7       ……&lt;/p&gt;

&lt;p&gt; 介绍完音符，咱们还要了解音符的时值，所谓时值，就是音符的相对时间长度。&lt;/p&gt;
&lt;p&gt;按照时值不同，可以分为以下几种：&lt;/p&gt;
&lt;p&gt;1、全音符。标准情况下是四拍，表示方法为 X - - -。&lt;/p&gt;
&lt;p&gt;2、二分音符。标准情况下是二拍，表示方法 X -。&lt;/p&gt;
&lt;p&gt;3、四分音符。一拍，表示方法 X。&lt;/p&gt;
&lt;p&gt;4、八分音符。半拍，表示方法 &lt;img src=&quot;http://images2017.cnblogs.com/blog/367389/201712/367389-20171220120651084-935759407.png&quot; alt=&quot;&quot; height=&quot;24&quot;/&gt;。&lt;/p&gt;
&lt;p&gt;5、十六分音符。四分之一拍，表示方式 &lt;img src=&quot;http://images2017.cnblogs.com/blog/367389/201712/367389-20171220120914459-1209563455.png&quot; alt=&quot;&quot; height=&quot;24&quot;/&gt;。&lt;/p&gt;
&lt;p&gt;6、三十二分音符。八分之一拍，表示方式 &lt;img src=&quot;http://images2017.cnblogs.com/blog/367389/201712/367389-20171220121038631-1651455278.png&quot; alt=&quot;&quot; height=&quot;24&quot;/&gt;。&lt;/p&gt;
&lt;p&gt;……&lt;/p&gt;
&lt;p&gt;后面就不再分了，时值太短了，你也唱不出来。&lt;/p&gt;
&lt;p&gt;当然，也有比较特殊的，比如，三拍时值的音符，也可以表示为 X - -。&lt;/p&gt;

&lt;p&gt;好了，只要有了上面这些基本知识，就可以开始 MIDI 编程了。下一篇老周就说说如何向声卡发送 MIDI 消息。本篇就扯到这儿了。&lt;/p&gt;

</description>
<pubDate>Wed, 20 Dec 2017 04:16:00 +0000</pubDate>
<dc:creator>东邪独孤</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/tcjiaan/p/8067058.html</dc:identifier>
</item>
<item>
<title>数据模型与查询语言 ------《Designing Data-Intensive Applications》读书笔记2 - HappenLee</title>
<link>http://www.cnblogs.com/happenlee/p/8072693.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/happenlee/p/8072693.html</guid>
<description>&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;数据模型是开发软件的最重要的部分，因为它们对应用程序有着深远的影响：不仅是软件的编写方式，而且也影响我们如何解决的问题的方式。第二篇读书笔记，我们聊一聊数据模型的设计。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;数据模型的分层&quot;&gt;1.数据模型的分层&lt;/h3&gt;
&lt;p&gt;作为一个开发者来说，在一个复杂的应用程序中，是存在很多&lt;strong&gt;分层模型&lt;/strong&gt;的，但基本思想还是一样的：每一层都提供了一个干净的数据模型，从而隐藏了底层的复杂性。通过这样的抽象来允许不同的人群有效地协同工作。&lt;/p&gt;
&lt;p&gt;每个数据模型都包含了如何使用它的假设。有些用法很容易，有些不支持；有些操作很快，有些执行不好；有些数据转换很自然，有些则很笨拙。&lt;strong&gt;由于数据模型对其上层的应用程序能做什么和不能做什么有着深刻的影响，因此选择适合于应用程序的数据模型十分重要。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;（在这一章中，我们将完整的梳理各类数据模型和基于不同数据模型衍生的查询语言）&lt;/p&gt;
&lt;h3 id=&quot;数据模型&quot;&gt;2.数据模型&lt;/h3&gt;
&lt;ul readability=&quot;0.49185667752443&quot;&gt;&lt;li readability=&quot;1.9444444444444&quot;&gt;
&lt;p&gt;关系型数据模型&lt;br/&gt;目前对计算机科学具有最深远影响的数据模型就是SQL，基于&lt;a href=&quot;https://en.wikipedia.org/wiki/Edgar_F._Codd&quot;&gt;Edgar Codd&lt;/a&gt; 提出了关系模型的对数据进行组织成表（SQL之中的表），其中每个元组称之为行，行是一个无序的集合（SQL之中的行）。关系型的数据模型的目标将实现细节隐藏在一个更干净的接口后面。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;非关系型数据模型（NoSQL）&lt;br/&gt;与关系数据模型相比，非关系型数据模型具有下面的一些优点。包括了:&lt;/li&gt;
&lt;li&gt;非常大的数据容量与非常高的读写吞吐量。&lt;/li&gt;
&lt;li&gt;很好地支持的专门查询操作&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;数据模型会更加灵活&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;h5 id=&quot;举个栗子&quot;&gt;举个栗子：&lt;/h5&gt;
&lt;p&gt;目前大多数应用程序开发都是使用面向对象编程语言完成的，这导致了对SQL数据模型灵活性的批评：数据存储在关系表中，应用程序代码中需要在对象与表、行和列的数据库模型之间需要一个笨拙的转换层。（&lt;strong&gt;也就是我们日常使用的ORM&lt;/strong&gt;）&lt;br/&gt;LinkedIn是我们常用的职业档案网站，我们来看看使用不同数据模型的差异。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/8552201-03b010a4dbce14f5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Linkedin档案使用关系型数据模型表示&quot;/&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;在传统的SQL模型中，最常见的规范化表示是将位置、教育和联系人信息放在单独的表中，带有外键表引用到用户表，如上图所示。&lt;strong&gt;问题是显而易见的，多表之间的依赖关系大大的复杂化了应用程序的编写。&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/8552201-fcdd73d616229aa2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Linkedin档案使JSON模型表示&quot;/&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;JSON模型减少了应用程序代码和存储层之间匹配问题，它会更加灵活。如上图所示，JSON表示相比多表模式具有更好的局部性。如果要获得如教育或职业信息，在 多表模型之中您需要执行多次查询（通过user_id查询每个表）或执行一个多表连接的操作。&lt;strong&gt;而在JSON的数据模型之中，所有相关信息都在一个位置，一次查询就足够完成了。&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;（&lt;strong&gt;注：在例子中的前一段，region_id和industry_id给出的ID，不是纯文本字符串“&lt;em&gt;Greater Seattle Area&lt;/em&gt;”和“&lt;em&gt;Philanthropy&lt;/em&gt;”。有如下几个考量：（1）避免歧义（2）可以统一更新（3）可以更好的本地化来适应不同的语言。&lt;/strong&gt;使用id的优点是，因为它对人类没有意义，所以它不需要更改：id可以保持不变，即使它标识的信息是变化的。任何对人类有意义的东西都可能需要在将来某个时候改变，如果信息被复制，所有多余的副本都需要更新。这会导致写开销，并且不一致性的风险。区域和行业的列表可能很小，而且变化缓慢，以至于应用程序可以简单地将它们保存在内存中。**）&lt;/p&gt;
&lt;h5 id=&quot;文档型数据模型的灵活性&quot;&gt;文档型数据模型的灵活性：&lt;/h5&gt;
&lt;p&gt;当应用程序希望改变其数据格式的情况下，&lt;strong&gt;灵活性&lt;/strong&gt;就显得至关重要了。 例如，假设我们在数据库中将每个用户的全名存储在一个字段中，而现在想要分别存储名称和姓氏。&lt;/p&gt;
&lt;ul readability=&quot;1.5&quot;&gt;&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;文档数据库中，只需要开始使用新字段编写新文档，并在应用程序中有代码处理旧文档读取时的情况。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (user &amp;amp;&amp;amp; user.&lt;span class=&quot;fu&quot;&gt;name&lt;/span&gt; &amp;amp;&amp;amp; !user.&lt;span class=&quot;fu&quot;&gt;first_name&lt;/span&gt;) {
   user.&lt;span class=&quot;fu&quot;&gt;first_name&lt;/span&gt; = user.&lt;span class=&quot;fu&quot;&gt;name&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;split&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot; &quot;&lt;/span&gt;)[&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;];
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li readability=&quot;6.5&quot;&gt;
&lt;p&gt;在关系型数据库模式中，通常按照这样的思路修改模型：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;12&quot;&gt;
&lt;pre class=&quot;sourceCode sql&quot;&gt;
&lt;code class=&quot;sourceCode sql&quot;&gt;&lt;span class=&quot;kw&quot;&gt;ALTER&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;TABLE&lt;/span&gt; users &lt;span class=&quot;kw&quot;&gt;ADD&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;COLUMN&lt;/span&gt; first_name text;
&lt;span class=&quot;kw&quot;&gt;UPDATE&lt;/span&gt; users &lt;span class=&quot;kw&quot;&gt;SET&lt;/span&gt; first_name = split_part(name, &lt;span class=&quot;st&quot;&gt;' '&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;); 
&lt;span class=&quot;kw&quot;&gt;UPDATE&lt;/span&gt; users &lt;span class=&quot;kw&quot;&gt;SET&lt;/span&gt; first_name = substring_index(name, &lt;span class=&quot;st&quot;&gt;' '&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;);&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在一个大数据量的表上运行UPDATE语句可能在任何数据库上都很慢，因为每一行都需要重写。如果这是不可接受的，应用程序可以让first_name设置为其默认为填写在读的时候，通过这样的方式来模拟文档数据库的&lt;strong&gt;灵活性&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;小结：文档型的数据模型的主要优点是模式灵活性，在局部性更好的性能，如程序经常需要访问整个文档时具有更好的性能优势。对于特定的应用程序，它更接近应用程序所使用的数据结构。如果在应用程序中的数据具有类似文档的结构（即一对多关系树，通常是一次加载整个树），那么使用文档模型会是一个好的选择。关系型数据模型通过提供更好的连接支持、多对一和多对多关系，如果应用程序使用多对多关系，关系型数据模型会更加适合。通过在数据库中生成多个请求，可以在应用程序代码中模拟连接，但这也会将复杂性移动到应用程序中。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;（&lt;strong&gt;文档型数据库开始支持表之间的关系查询，连接操作。关系型数据库开始引入JSON与XML的支持。混合型的数据模型或许会是数据库发展的方向&lt;/strong&gt;）&lt;/p&gt;
&lt;h3 id=&quot;数据查询语言&quot;&gt;3.数据查询语言&lt;/h3&gt;
&lt;p&gt;不知道大家有木有试想过一个问题，为什么我们会有SQL语言。本身使用SQL语句表达的逻辑同样可以用程序设计语言去表达，为何还需要多此一举的使用另一种方式去表达数据模型呢？&lt;/p&gt;
&lt;p&gt;其实这个答案是非必须的，也就是说，我们可以直接使用程序设计语言来和数据交互。（如：MongoDB就是使用了Js作为原生的交互语言。）但绝大多数我们直接使用的程序设计语言是&lt;strong&gt;命令式语言&lt;/strong&gt;，而像SQL这种代数关系&lt;strong&gt;声明式的查询语言&lt;/strong&gt;会有一些更贴合数据模型的优点。&lt;/p&gt;
&lt;h5 id=&quot;举个栗子-1&quot;&gt;举个栗子：&lt;/h5&gt;
&lt;p&gt;例如，如果你有一个动物物种的列表，需要返回列表上的&lt;em&gt;Shark&lt;/em&gt;：&lt;br/&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/8552201-2c51d5fa5f130350.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;使用Js的数据表达&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/8552201-8bab11575d09f39c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;使用SQL的数据表达&quot;/&gt;&lt;/p&gt;
&lt;p&gt;由上图所示，命令式语言告诉计算机按一定顺序执行某些操作。你可以需要一行一行地单步执行代码，评估条件，更新变量，并决定是否再循环一次。而在像SQL或关系代数这样的声明式查询语言中，您只需指定您想要的数据的模式，结果必须满足什么条件，以及您希望如何转换数据（例如，排序、分组和聚合），而不是具体的实现流程。数据库系统的查询优化器来决定哪些索引以及哪些连接方法可以使用，以及执行查询的各个部分的顺序。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;声明式查询语言通常比命令式语言的API更简洁，更易于使用。但更重要的是，它还隐藏了数据库引擎的实现细节，这使得数据库系统可以在不需要对查询进行任何更改的情况下引入性能改进。&lt;/li&gt;
&lt;li&gt;但SQL在功能上更为有限，灵活性上会受到限制，这给数据库提供了更多的自动优化空间。&lt;/li&gt;
&lt;li&gt;声明式语言通常适合于并行执行，因为它们只指定结果的模式，而不是用于确定结果的算法。&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;总结&quot;&gt;4.总结&lt;/h3&gt;
&lt;p&gt;数据模型是一个庞大的主题，所有不同的数据模型。现在都被广泛使用，它们各自的领域都很好。一个模型可以用另一个模型来模拟，例如，文档型的数据可以用关系数据库表示，但结果往往很笨拙。&lt;strong&gt;这就是为什么我们有不同的系统为了不同的目的，而不是一个单一的一刀切的解决方案。&lt;/strong&gt;&lt;/p&gt;
</description>
<pubDate>Wed, 20 Dec 2017 03:05:00 +0000</pubDate>
<dc:creator>HappenLee</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/happenlee/p/8072693.html</dc:identifier>
</item>
<item>
<title>为PowerApps和Flow，Power BI开发自定义连接器 - 陈希章</title>
<link>http://www.cnblogs.com/chenxizhang/p/8072543.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/chenxizhang/p/8072543.html</guid>
<description>&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;作者：陈希章 发表于 2017年12月20日&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;我在之前用了几篇文章来介绍新一代微软商业应用平台三剑客（&lt;a href=&quot;https://github.com/chenxizhang/office365dev/blob/master/docs/powerapps.md&quot;&gt;PowerApps&lt;/a&gt;，&lt;a href=&quot;https://github.com/chenxizhang/office365dev/blob/master/docs/microsoftflow.md&quot;&gt;Microsoft Flow&lt;/a&gt;，&lt;a href=&quot;https://github.com/chenxizhang/office365dev/blob/master/docs/powerbi.md&quot;&gt;Power BI&lt;/a&gt;），相信对于大家会有一种跃跃欲试的冲动，他们看起来真的不难，因为他们的定位是要给业务部门的用户直接使用的。那么现在问题就来了&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;他们为什么能这么灵活和强大？&lt;/li&gt;
&lt;li&gt;如果这些活儿都是业务部门用户自己去做了，那么IT部门人员，开发人员该干嘛呢？&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;好问题啊！但是这两个问题其实是相关的，而且第二个问题的答案就是第一个问题所描述的结果。因为可以将IT专业人员（IT Pro）和开发人员（Developer）从日常的轻量级业务应用的工作中解放出来，所以，他们可以去做一些更加擅长的技术、通用性的业务支撑组件的开发。&lt;/p&gt;
&lt;p&gt;我们再来看一张已经多次展示过的图片&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/chenxizhang/office365dev/blob/master/docs/images/businessplatformarc.png&quot;&gt;&lt;img alt=&quot;&quot; src=&quot;https://github.com/chenxizhang/office365dev/raw/master/docs/images/businessplatformarc.png&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在应用的基础架构这部分，Common Data Service我此前已经&lt;a href=&quot;https://github.com/chenxizhang/office365dev/blob/master/docs/commondatamodel.md&quot;&gt;介绍&lt;/a&gt;过了，Gateways也已经在 &lt;a href=&quot;https://github.com/chenxizhang/office365dev/blob/master/docs/powerappsadv.md&quot;&gt;PowerApps进阶篇&lt;/a&gt;中讲解过。Pro dev extensibility 在目前这个系列中我不准备展开。那么就余下了Connectors（连接器了）。当然，实际上我们早就使用过了连接器，例如在Microsoft Flow中内置了将近200个连接器，如下&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/chenxizhang/office365dev/blob/master/docs/images/2017-12-20-08-56-29.png&quot;&gt;&lt;img alt=&quot;&quot; src=&quot;https://github.com/chenxizhang/office365dev/raw/master/docs/images/2017-12-20-08-56-29.png&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;但是，如果我们需要的某个功能，上面的连接器并没有提供，而你有正好有一定的开发能力，那么本文将很适合你。我们将以一个实例介绍如何自定义连接器。从某种意义上说，PowerApps和Flow是共用连接器的，而Power BI的连接器则更特殊一点。本文的内容将包括&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;编写一个Web API服务（适合于PowerApps和Flow）&lt;/li&gt;
&lt;li&gt;在Flow中创建自定义连接器&lt;/li&gt;
&lt;li&gt;在Flow中使用自定义连接器&lt;/li&gt;
&lt;li&gt;在PowerApps中使用自定义连接器&lt;/li&gt;
&lt;li&gt;Power BI自定义连接器的开发思路&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;可以这么说，绝大部分的连接器，都是一个Web API服务。我们将一些业务逻辑封装在服务器端(或者准确地说是云端)，然后有选择性地暴露出来一些接口，供PowerApps和Flow在需要的时候调用。所以，在开始自定义连接器之前，你需要做的就是编写一个Web API服务。你可以用任何熟悉的语言和平台完成这个工作，但我已经完成了一个使用C#编写的，基于dotnet core框架的Web API服务的例子，因为本文的重点不是将具体如何创建Web API服务以及部署，所以我用另外一篇文章专门讲解了这个过程，请参考&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/chenxizhang/p/8067824.html&quot;&gt;使用 dotnet core 和 Azure PaaS服务进行devOps开发 (Web API 实例)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;该项目的代码，可以通过 &lt;a href=&quot;https://github.com/chenxizhang/dotnetcoreapisample&quot;&gt;https://github.com/chenxizhang/dotnetcoreapisample&lt;/a&gt; 下载到。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/chenxizhang/office365dev/blob/master/docs/images/2017-12-20-09-04-50.png&quot;&gt;&lt;img alt=&quot;&quot; src=&quot;https://github.com/chenxizhang/office365dev/raw/master/docs/images/2017-12-20-09-04-50.png&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;但是，在PowerApps或Flow中定义自定义连接器的时候，如果有一个服务描述文档，则会大大简化操作。所以，我们需要在上面这个成果的基础上添加一个功能，让它能自动生成一个服务描述文档。微软官方的建议是用swagger的规范。关于swagger，如果有兴趣，可以参考他们的官网：&lt;a href=&quot;https://swagger.io/specification/&quot;&gt;https://swagger.io/specification/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在上述项目中添加swagger的支持，请参考下面的步骤&lt;/p&gt;
&lt;ol readability=&quot;3&quot;&gt;&lt;li&gt;使用该命令导入一个包 &lt;code&gt;dotnet add package Swashbuckle.AspNetCore&lt;/code&gt;，然后进行还原 &lt;code&gt;dotnet restore&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;在Startup.cs文件中，添加两个命名空间的引用 &lt;code&gt;using Swashbuckle.AspNetCore&lt;/code&gt;和 &lt;code&gt;using Swashbuckle.AspNetCore.Swagger&lt;/code&gt;&lt;/li&gt;
&lt;li readability=&quot;6&quot;&gt;在ConfigureServices方法的底部增加如下代码
&lt;pre&gt;
&lt;code&gt;services.AddSwaggerGen(_=&amp;gt;{
    _.SwaggerDoc(&quot;v1&quot;,new Info(){
        Version =&quot;1.0&quot;,
        Title =&quot;dotnet core api sample&quot;,
        Contact = new Contact(){Name=&quot;Ares Chen&quot;,Email =&quot;ares@xizhang.com&quot;},
        Description =&quot;dotnet core api sample using swagger&quot;
    });
});
&lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;在Configure方法的底部增加如下代码
&lt;pre&gt;
&lt;code&gt;app.UseSwagger();
app.UseSwaggerUI(_=&amp;gt;_.SwaggerEndpoint(&quot;/swagger/v1/swagger.json&quot;,&quot;v1&quot;));
&lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;完成上面的工作后，请按照&lt;a href=&quot;http://www.cnblogs.com/chenxizhang/p/8067824.html&quot;&gt;使用 dotnet core 和 Azure PaaS服务进行devOps开发 (Web API 实例)&lt;/a&gt; 提到的步骤那样，将代码提交到Azure的Git存储库，然后在浏览器中访问 &lt;a href=&quot;https://dotnetcoreapisample.azurewebsites.net/swagger/v1/swagger.json&quot;&gt;https://dotnetcoreapisample.azurewebsites.net/swagger/v1/swagger.json&lt;/a&gt; ,正常情况下你会看到如下的结果输出。&lt;/p&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;你的实际部署地址可能跟我不一样，因为Azure不允许同名地址。如果你不想自己去部署，你可以直接用我的这个地址查看输出结果，并且将其用在后续的自定义连接器中。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/chenxizhang/office365dev/blob/master/docs/images/2017-12-20-09-20-57.png&quot;&gt;&lt;img alt=&quot;&quot; src=&quot;https://github.com/chenxizhang/office365dev/raw/master/docs/images/2017-12-20-09-20-57.png&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这是一个JSON的文档。如果你用格式化工具来查看，它可能是这样的：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/chenxizhang/office365dev/blob/master/docs/images/2017-12-20-09-21-07.png&quot;&gt;&lt;img alt=&quot;&quot; src=&quot;https://github.com/chenxizhang/office365dev/raw/master/docs/images/2017-12-20-09-21-07.png&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;查看它并不是重点，你现在需要做的是将点击右键，然后另存到本地（swagger.json），一会儿我们就会用到这个文件来自定义连接器。&lt;/p&gt;

&lt;p&gt;准备好了上面这个Web API服务的话，接下来就可以在Flow中来自定义连接器了。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/chenxizhang/office365dev/blob/master/docs/images/2017-12-20-09-29-30.png&quot;&gt;&lt;img alt=&quot;&quot; src=&quot;https://github.com/chenxizhang/office365dev/raw/master/docs/images/2017-12-20-09-29-30.png&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在接下来的界面中选择导入现有OpenAPI文件来定义连接器&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/chenxizhang/office365dev/blob/master/docs/images/2017-12-20-09-30-29.png&quot;&gt;&lt;img alt=&quot;&quot; src=&quot;https://github.com/chenxizhang/office365dev/raw/master/docs/images/2017-12-20-09-30-29.png&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;接下来定义标题，并且找到此前保存在本地的swagger.json文件&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/chenxizhang/office365dev/blob/master/docs/images/2017-12-20-09-33-40.png&quot;&gt;&lt;img alt=&quot;&quot; src=&quot;https://github.com/chenxizhang/office365dev/raw/master/docs/images/2017-12-20-09-33-40.png&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;点击“继续”，设置一些基本信息&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/chenxizhang/office365dev/blob/master/docs/images/2017-12-20-09-34-57.png&quot;&gt;&lt;img alt=&quot;&quot; src=&quot;https://github.com/chenxizhang/office365dev/raw/master/docs/images/2017-12-20-09-34-57.png&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;点击“继续”，在安全设置这里暂时先选择 “无身份验证”&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/chenxizhang/office365dev/blob/master/docs/images/2017-12-20-09-36-06.png&quot;&gt;&lt;img alt=&quot;&quot; src=&quot;https://github.com/chenxizhang/office365dev/raw/master/docs/images/2017-12-20-09-36-06.png&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;请注意，真正使用的连接器，是需要做身份验证的。建议在这个基础上，大家做一些针对性的实践。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;点击“继续”，此时Flow会读取swagger文件中的定义信息，列出所有的操作&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/chenxizhang/office365dev/blob/master/docs/images/2017-12-20-09-37-28.png&quot;&gt;&lt;img alt=&quot;&quot; src=&quot;https://github.com/chenxizhang/office365dev/raw/master/docs/images/2017-12-20-09-37-28.png&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;你会发现我们有五个操作，对应了创建订单，修改订单，查询订单（列表以及单个订单的详情),删除订单。目前来说在这些操作上面有一个感叹号的提示，因为有部分信息还需要你做定义：摘要和说明。请补充完整即可。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/chenxizhang/office365dev/blob/master/docs/images/2017-12-20-09-41-30.png&quot;&gt;&lt;img alt=&quot;&quot; src=&quot;https://github.com/chenxizhang/office365dev/raw/master/docs/images/2017-12-20-09-41-30.png&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;如果你确认没有问题了，请点击“创建连接器”来完成操作。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/chenxizhang/office365dev/blob/master/docs/images/2017-12-20-09-43-54.png&quot;&gt;&lt;img alt=&quot;&quot; src=&quot;https://github.com/chenxizhang/office365dev/raw/master/docs/images/2017-12-20-09-43-54.png&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;然后点击加号，可以基于这个连接器（connector）创建一个用于当前环境的连接（connection）。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/chenxizhang/office365dev/blob/master/docs/images/2017-12-20-09-48-28.png&quot;&gt;&lt;img alt=&quot;&quot; src=&quot;https://github.com/chenxizhang/office365dev/raw/master/docs/images/2017-12-20-09-48-28.png&quot;/&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;接下来我们“从空白创建”来体验上面这个自定义连接器的使用。为了便于测试，我选择用“手工触发流”。如果你对这个方面不熟悉，请参考 &lt;a href=&quot;https://github.com/chenxizhang/office365dev/blob/master/docs/microsoftflow.md&quot;&gt;这篇文章&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/chenxizhang/office365dev/blob/master/docs/images/2017-12-20-09-57-17.png&quot;&gt;&lt;img alt=&quot;&quot; src=&quot;https://github.com/chenxizhang/office365dev/raw/master/docs/images/2017-12-20-09-57-17.png&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在添加操作的时候，搜索Orderservice，你能看到有五个操作，下面我们添加CreateOrder，输入一些基本信息&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/chenxizhang/office365dev/blob/master/docs/images/2017-12-20-10-02-36.png&quot;&gt;&lt;img alt=&quot;&quot; src=&quot;https://github.com/chenxizhang/office365dev/raw/master/docs/images/2017-12-20-10-02-36.png&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;当然为了让测试更加直观，我继续添加了一个获取订单列表的操作，然后将获取到的结果发送到一个服务器地址。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/chenxizhang/office365dev/blob/master/docs/images/2017-12-20-10-10-59.png&quot;&gt;&lt;img alt=&quot;&quot; src=&quot;https://github.com/chenxizhang/office365dev/raw/master/docs/images/2017-12-20-10-10-59.png&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;点击“创建流”，然后点击“立即运行”按钮&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/chenxizhang/office365dev/blob/master/docs/images/2017-12-20-10-07-58.png&quot;&gt;&lt;img alt=&quot;&quot; src=&quot;https://github.com/chenxizhang/office365dev/raw/master/docs/images/2017-12-20-10-07-58.png&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;点击“继续”&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/chenxizhang/office365dev/blob/master/docs/images/2017-12-20-10-08-17.png&quot;&gt;&lt;img alt=&quot;&quot; src=&quot;https://github.com/chenxizhang/office365dev/raw/master/docs/images/2017-12-20-10-08-17.png&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;点击“运行流”，很快你就能看到下面的结果&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/chenxizhang/office365dev/blob/master/docs/images/2017-12-20-10-11-57.png&quot;&gt;&lt;img alt=&quot;&quot; src=&quot;https://github.com/chenxizhang/office365dev/raw/master/docs/images/2017-12-20-10-11-57.png&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;而且在我的服务器也很快收到了数据&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/chenxizhang/office365dev/blob/master/docs/images/2017-12-20-10-12-46.png&quot;&gt;&lt;img alt=&quot;&quot; src=&quot;https://github.com/chenxizhang/office365dev/raw/master/docs/images/2017-12-20-10-12-46.png&quot;/&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;同样的事情，在PowerApps上面也是类似的。所以，你在PowerApps中也立即可以看到之前定义好的这个OrderService的连接。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/chenxizhang/office365dev/blob/master/docs/images/2017-12-20-10-18-23.png&quot;&gt;&lt;img alt=&quot;&quot; src=&quot;https://github.com/chenxizhang/office365dev/raw/master/docs/images/2017-12-20-10-18-23.png&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在创建应用的时候，可以很自然地选择到这个数据连接&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/chenxizhang/office365dev/blob/master/docs/images/2017-12-20-10-20-34.png&quot;&gt;&lt;img alt=&quot;&quot; src=&quot;https://github.com/chenxizhang/office365dev/raw/master/docs/images/2017-12-20-10-20-34.png&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;建立连接后，在数据控件上面可以通过下面的方式调用方法。例如下面这个操作，是读取订单列表。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/chenxizhang/office365dev/blob/master/docs/images/2017-12-20-10-26-28.png&quot;&gt;&lt;img alt=&quot;&quot; src=&quot;https://github.com/chenxizhang/office365dev/raw/master/docs/images/2017-12-20-10-26-28.png&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;如果要创建一个订单，可以参考下面的做法。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/chenxizhang/office365dev/blob/master/docs/images/2017-12-20-10-28-21.png&quot;&gt;&lt;img alt=&quot;&quot; src=&quot;https://github.com/chenxizhang/office365dev/raw/master/docs/images/2017-12-20-10-28-21.png&quot;/&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;看完上面的介绍，大家对于创建Web API服务，并且将其用于PowerApps和Flow的过程有了感性的认识。我们可能还会很自然地联想到，这个服务和连接器能否也用于三剑客中的另外一个组件——PowerBI，用于数据获取呢？&lt;/p&gt;
&lt;p&gt;答案是：目前还不行。Power BI目前支持的自定义连接器的方式，目前是在Preview的阶段，其实现方式是比较特殊的，有兴趣的朋友可以参考下面这篇文章：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://powerbi.microsoft.com/en-us/blog/data-connectors-developer-preview/&quot;&gt;Data Connector SDK Developer Preview&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;新一代的商业应用平台，它的强大依赖于强大的底层设计和灵活的应用架构。作为PowerApps和Flow的基础，连接器是一个核心的基础组件。微软提供的组件化架构，让开发人员可以使用自己习惯的方式开发Web API，并将其无缝地整合到业务应用的开发中去。&lt;/p&gt;
</description>
<pubDate>Wed, 20 Dec 2017 02:43:00 +0000</pubDate>
<dc:creator>陈希章</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/chenxizhang/p/8072543.html</dc:identifier>
</item>
<item>
<title>运行循环 - RunLoop - 沉江小鱼</title>
<link>http://www.cnblogs.com/chenjiangxiaoyu/p/8035490.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/chenjiangxiaoyu/p/8035490.html</guid>
<description>&lt;h2&gt;1.RunLoop简介&lt;/h2&gt;
&lt;h3&gt;1.1 什么是RunLoop&lt;/h3&gt;
&lt;p&gt;简单来说就是：运行循环，可以理解成一个死循环，一直在运行。&lt;/p&gt;
&lt;p&gt;RunLoop实际上就是一个对象，这个对象用来处理程序运行过程中出现的各种事件(触摸、Timer、网络)，从而保持线程的持续运行，而且在没有事件处理的时候，会进入休眠，从而节省CPU资源，提高程序性能。&lt;/p&gt;
&lt;p&gt;OSX/iOS系统中，提供了两个这样的对象：NSRunLoop 和 CFRunLoopRef。CFRunLoopRef 是在CoreFoundation 框架内的，它提供了纯 C 函数的 API，所以这些API都是现成安全的；NSRunLoop是基于 CFRunLoopRef 的封装，提供了面向对象的API，但是这些API不是现成安全的。&lt;/p&gt;
&lt;h3&gt;1.2 RunLoop和线程&lt;/h3&gt;
&lt;p&gt;RunLoop 和线程有很密切的关系，我们知道线程的任务是用来执行一个或多个特定的任务，但是在默认情况下，线程执行完之后就会退出。这时候，如果我们想让这个线程一直去处理任务，并不退出，所以就有了RunLoop。&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;一条线程对应一个RunLoop对象，但是子线程中的RunLoop默认是不运行的，需要调用RunLoop的run方法，这个方法就是一个死循环&lt;/li&gt;
&lt;li&gt;我们只能在当前线程中操作当前线程的RunLoop对象；&lt;/li&gt;
&lt;li&gt;RunLoop对象是在第一次获取RunLoop对象时创建，在线程结束的时候销毁；&lt;/li&gt;
&lt;li&gt;主线程RunLoop对象，系统帮我们创建好了，子线程的RunLoop对象，需要我们自己去创建。&lt;/li&gt;
&lt;/ol&gt;&lt;h3&gt;1.3 默认情况下的主线程的RunLoop原理&lt;/h3&gt;
&lt;p&gt;我们在启动一个程序的时候，系统会调用创建项目时自动生成的 main.m 文件：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;37&quot;&gt;
&lt;pre class=&quot;brush:objc;gutter:true;&quot;&gt;
int main(int argc, char * argv[]) {
    @autoreleasepool {
        return UIApplicationMain(argc, argv, nil, NSStringFromClass([AppDelegate class]));
    }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 其中 UIApplicationMain 函数内部帮我们开启了主线程的 RunLoop，UIApplicationMain 函数内部有一个无线循环的代码，上面开启 RunLoop 的代码可以简单的理解为以下代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;34&quot;&gt;
&lt;pre class=&quot;brush:objc;gutter:true;&quot;&gt;
int main(int argc, char * argv[]) {        
    BOOL running = YES;
    do {
        // 执行各种任务，处理各种事件
        // ......
    } while (running);

    return 0;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 从上面可以看出，程序一直在 do-while 循环中执行，所以 UIApplicationMain 函数一直没有返回，我们在运行程序之后，不会马上退出，会保持持续运行状态。&lt;/p&gt;
&lt;p&gt;来看一张官方的 RunLoop 模型图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1031687/201712/1031687-20171213224033722-1559537520.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;从上图中可以看出，RunLoop 就是线程中的的一个循环，RunLoop 在循环中会不断检测，通过 Input Source (输入源) 和 Timer Source(定时源) 两种事件源来等待接收事件，然后对接收到的事件通知线程处理，并在没有事件的时候休息。&lt;/p&gt;
&lt;h2&gt;2.RunLoop相关类&lt;/h2&gt;
&lt;p&gt;下面我们来了解一下 Core Fundation 框架下，关于RunLoop 的5个类：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;CFRunLoopRef：代表RunLoop对象&lt;/li&gt;
&lt;li&gt;CFRunLoopModeRef：代表RunLoop的运行模式&lt;/li&gt;
&lt;li&gt;CFRunLoopSourceRef：就是RunLoop模型中提到的输入源/事件源&lt;/li&gt;
&lt;li&gt;CFRunLoopTimerRef：就是RunLoop模型中的定时源&lt;/li&gt;
&lt;li&gt;CFRunLoopObserverRef：观察者，能够监听RunLoop的状态改变&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;下面是这5个类的关系图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1031687/201712/1031687-20171213224646222-1380366701.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;通过上图，我们可以看出，一个RunLoop对象(CFRunLoopRef)包含若干个运行模式(CFRunLoopModeRef)，每一个运行模式下又包含着若干个输入源(CFRunLoopSourceRef)，定时源(CFRunLoopTimerRef)，观察者(CFRunLoopObserverRef)&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;每次RunLoop启动的时候，只能指定其中的一种运行模式(CFRunLoopModeRef)，这个运行模式被称为 currentMode&lt;/li&gt;
&lt;li&gt;如果需要切换运行模式(CFRunLoopModeRef)，只能退出 RunLoop，在重新指定一个运行模式(CFRunLoopModeRef)进入&lt;/li&gt;
&lt;li&gt;这样做主要是为了分割开输入源(CFRunLoopSourceRef)，定时源(CFRunLoopTimerRef)，观察者(CFRunLoopObserverRef)，使其不受影响&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;2.1 CFRunLoopRef&lt;/h3&gt;
&lt;p&gt;CFRunLoopRef 就是 Core Foundation 框架下的 RunLoop 类，我们可以通过以下方式来获取 RunLoop 对象：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Core Foundation&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:objc;gutter:true;&quot;&gt;
CFRunLoopGetCurrent(); // 获得当前线程的RunLoop对象
CFRunLoopGetMain();    // 获得主线程的RunLoop对象
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt; Foundation&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:objc;gutter:true;&quot;&gt;
[NSRunLoop currentRunLoop]; // 获得当前线程的RunLoop对象
[NSRunLoop mainRunLoop];    // 获得主线程的RunLoop对象
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt; 2.2 CFRunLoopModeRef&lt;/h3&gt;
&lt;p&gt;系统默认定义了多种运行模式：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;&lt;strong&gt;kCFRunLoopDefaultMode&lt;/strong&gt; : App的默认运行模式，通常主线程是在这个运行模式下运行&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;UITrackingRunLoopMode&lt;/strong&gt; ：跟踪用户的交互事件 (用于scrollView追踪触摸滑动，保证界面滑动时不受其他mode影响)，只能是触摸事件唤醒，级别最大&lt;/li&gt;
&lt;li&gt;UIInitializationRunLoopMode：在刚启动App的时候进入的第一个mode，启动完成后就不在使用&lt;/li&gt;
&lt;li&gt;GSEventReceiveRunLoopMode：接受系统内部事件，通常用不到&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;kCFRunLoopCommonMode&lt;/strong&gt;：占位模式，不是一种真正的运行模式，&lt;/li&gt;
&lt;/ol&gt;&lt;h3&gt;2.3 CFRunLoopTimerRef&lt;/h3&gt;
&lt;p&gt;CFRunLoopTimerRef 定时源，理解为基于时间的触发器，基本上就是NSTimer。&lt;/p&gt;
&lt;p&gt; 下面我们来演示下 CFRunLoopModeRef 和 CFRunLoopTimerRef 结合的使用用法，从而加深理解：&lt;/p&gt;
&lt;p&gt; - 我们先新建一个iOS项目，在Main.storyboard中拖入一个Text View。&lt;/p&gt;
&lt;p&gt; - 在ViewController.m 文件中加入以下代码&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:objc;gutter:true;&quot;&gt;
- (void)viewDidLoad {
    [super viewDidLoad];

    // 定义一个定时器，约定两秒之后调用self的run方法
    NSTimer *timer = [NSTimer timerWithTimeInterval:2.0 target:self selector:@selector(run) userInfo:nil repeats:YES];

    // 将定时器添加到当前RunLoop的NSDefaultRunLoopMode下
    [[NSRunLoop currentRunLoop] addTimer:timer forMode:NSDefaultRunLoopMode];
}

- (void)run
{
    NSLog(@&quot;---run&quot;);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;  - 然后运行，这时候我们会发现如果我们不对模拟器进行任何操作的话，定时器会稳定的每隔2秒调用run 方法打印&lt;/p&gt;
&lt;p&gt; - 但是当我们拖动Text View 滚动时，我们发现 :run 方法不打印了，也就是说 NSTimer 不工作了。而当我们松开鼠标的时候， NSTimer就又开始正常工作了。&lt;/p&gt;
&lt;p&gt;这是因为：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;当我们不做任何操作的时候，RunLoop 处于 NSDefaultRunLoopMode 下&lt;/li&gt;
&lt;li&gt;而当我们拖动 Text View 的时候，RunLoop 就结束 NSDefaultRunLoopMode，切换到了 UITrackingRunLoopMode 模式下，这个模式下没有添加 NSTimer，所以我们的 NSTimer 就不工作了&lt;/li&gt;
&lt;li&gt;但当我们松开鼠标的时候，RunLoop就结束 UITrackingRunLoopMode 模式，又切换回 NSDefaultRunLoopMode 模式，所以 NSTimer 就又开始正常工作了。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;可以试着将上面代码中的：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:objc;gutter:true;&quot;&gt;
// 将定时器添加到当前RunLoop的NSDefaultRunLoopMode下
    [[NSRunLoop currentRunLoop] addTimer:timer forMode:NSDefaultRunLoopMode];
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 换成&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:objc;gutter:true;&quot;&gt;
// 将定时器添加到当前RunLoop的NSDefaultRunLoopMode下
    [[NSRunLoop currentRunLoop] addTimer:timer forMode:UITrackingRunLoopMode];
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 也就是将定时器添加到当前 RunLoop 的UITrackingRunLoopMode 下，你就会发现定时器只会在拖动 Text View 的模式下工作，而不做操作的时候，定时器就不工作。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;那难道我们就不能再这两种模式下让NSTimer都能正常工作吗？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;当然可以啊，这就用到了之前说的 伪模式(kCFRunLoopCommonModes) ,也可以理解为占位模式，这其实不是一种真实的模式，而是一种标记模式，意思就是可以在打上Common Modes标记的模式下运行。&lt;/p&gt;
&lt;p&gt;那么此时，我们需要将 NSDefaultRunLoopMode 和 UITrackingRunLoopMode 打上标记，所以我们只要将NSTimer 添加到当前 RunLoop 的占位模式下就可以让 NSTimer 在不做操作和拖动 Text View 两种情况下愉快的工作了。&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:objc;gutter:true;&quot;&gt;
[[NSRunLoop currentRunLoop] addTimer:timer forMode:NSRunLoopCommonModes];
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 顺便讲一下 NSTimer 中的 scheduledTimerWithTimeInterval 方法和 RunLoop 的关系：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:objc;gutter:true;&quot;&gt;
[NSTimer scheduledTimerWithTimeInterval:2.0 target:self selector:@selector(run) userInfo:nil repeats:YES];
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 这句代码调用了 scheduledTimer 返回的定时器，NSTimer 会自动被加入到了 RunLoop 的 NSDefaultRunLoopMode 模式下，这句代码相当于下面两句代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:objc;gutter:true;&quot;&gt;
NSTimer *timer = [NSTimer timerWithTimeInterval:2.0 target:self selector:@selector(run) userInfo:nil repeats:YES];
[[NSRunLoop currentRunLoop] addTimer:timer forMode:NSDefaultRunLoopMode];
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt; 2.4 CFRunLoopSourceRef&lt;/h3&gt;
&lt;p&gt;CFRunLoopSourceRef 是事件源，它有两种分类方法：&lt;/p&gt;
&lt;p&gt;第一种：按照官方文档来分类（就像RunLoop模型图中那样）：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Port-Based Sources (基于端口)&lt;/li&gt;
&lt;li&gt;Custom Input Sources （自定义）&lt;/li&gt;
&lt;li&gt;Cocoa Perform Selector Sources&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;第二种：按照函数调用栈来分类：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Source0：非基于Port(这是个啥？进行间通信的轻量级的方式？)，处理App内部事件、App负责管理，如UIEvent、CFS ocket.&lt;/li&gt;
&lt;li&gt;Source1：基于Port，通过内核和其他线程通信，接收、分发系统事件&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;这两种分类方式其实没有区别，只不过第一种是通过官方理论来分类，第二种是在实际应用中通过调用函数来分类、。 &lt;/p&gt;
&lt;p&gt;下面我们举个例子大致来了解一下函数调用栈和Source：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1031687/201712/1031687-20171218225838287-2061321789.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;当我们点击红色区域的时候，会弹出下面的窗口，这就是点击事件产生的函数调用栈：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1031687/201712/1031687-20171218225931803-1299605198.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;所以点击事件是这样来的：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;首先程序启动，调用 16 行的main函数，main函数调用15行的UIApplicationMain函数，然后一直往上调用函数，最终调用到 0 行的BtnClick 函数，即点击函数。&lt;/li&gt;
&lt;li&gt;同时我们可以看到11 行中有Sources0，也就是说我们点击事件是属于 Sources0 函数的，点击事件就是在 Sources0 中处理的。&lt;/li&gt;
&lt;li&gt;而至于 Sources1，则是用来接收、分发系统事件，然后再分发到Sources0中处理的。&lt;/li&gt;
&lt;/ol&gt;&lt;h3&gt;2.5 CFRunLoopObserverRef&lt;/h3&gt;
&lt;p&gt;CFRunLoopObserverRef 是观察者，用来监听RunLoop的状态改变：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;42&quot;&gt;
&lt;pre class=&quot;brush:objc;gutter:true;&quot;&gt;
typedef CF_OPTIONS(CFOptionFlags, CFRunLoopActivity) {
    kCFRunLoopEntry = (1UL &amp;lt;&amp;lt; 0),               // 即将进入Loop：1
    kCFRunLoopBeforeTimers = (1UL &amp;lt;&amp;lt; 1),        // 即将处理Timer：2    
    kCFRunLoopBeforeSources = (1UL &amp;lt;&amp;lt; 2),       // 即将处理Source：4
    kCFRunLoopBeforeWaiting = (1UL &amp;lt;&amp;lt; 5),       // 即将进入休眠：32
    kCFRunLoopAfterWaiting = (1UL &amp;lt;&amp;lt; 6),        // 即将从休眠中唤醒：64
    kCFRunLoopExit = (1UL &amp;lt;&amp;lt; 7),                // 即将从Loop中退出：128
    kCFRunLoopAllActivities = 0x0FFFFFFFU       // 监听全部状态改变  
};
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 下面我们通过代码来监听RunLoop中的状态改变：&lt;/p&gt;
&lt;p&gt;1. 添加以下代码:&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;43&quot;&gt;
&lt;pre class=&quot;brush:objc;gutter:true;&quot;&gt;
- (void)viewDidLoad {
    [super viewDidLoad];

    // 创建观察者
    CFRunLoopObserverRef observer = CFRunLoopObserverCreateWithHandler(CFAllocatorGetDefault(), kCFRunLoopAllActivities, YES, 0, ^(CFRunLoopObserverRef observer, CFRunLoopActivity activity) {
        NSLog(@&quot;监听到RunLoop发生改变---%zd&quot;,activity);
    });

    // 添加观察者到当前RunLoop中
    CFRunLoopAddObserver(CFRunLoopGetCurrent(), observer, kCFRunLoopDefaultMode);

    // 释放observer，最后添加完需要释放掉
    CFRelease(observer);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 2.然后运行，看下打印结果：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:objc;gutter:true;&quot;&gt;
2017-12-18 23:05:06.992894+0800 RunLoop[10436:1007150] 监听到RunLoop发生改变---2
2017-12-18 23:05:06.993346+0800 RunLoop[10436:1007150] 监听到RunLoop发生改变---4
2017-12-18 23:05:06.993608+0800 RunLoop[10436:1007150] 监听到RunLoop发生改变---2
2017-12-18 23:05:06.993798+0800 RunLoop[10436:1007150] 监听到RunLoop发生改变---4
2017-12-18 23:05:06.993986+0800 RunLoop[10436:1007150] 监听到RunLoop发生改变---2
2017-12-18 23:05:06.994204+0800 RunLoop[10436:1007150] 监听到RunLoop发生改变---4
2017-12-18 23:05:06.997608+0800 RunLoop[10436:1007150] 监听到RunLoop发生改变---2
2017-12-18 23:05:06.997771+0800 RunLoop[10436:1007150] 监听到RunLoop发生改变---4
2017-12-18 23:05:06.997951+0800 RunLoop[10436:1007150] 监听到RunLoop发生改变---2
2017-12-18 23:05:06.998064+0800 RunLoop[10436:1007150] 监听到RunLoop发生改变---4
2017-12-18 23:05:06.998226+0800 RunLoop[10436:1007150] 监听到RunLoop发生改变---2
2017-12-18 23:05:06.998342+0800 RunLoop[10436:1007150] 监听到RunLoop发生改变---4
2017-12-18 23:05:06.999366+0800 RunLoop[10436:1007150] 监听到RunLoop发生改变---2
2017-12-18 23:05:06.999518+0800 RunLoop[10436:1007150] 监听到RunLoop发生改变---4
2017-12-18 23:05:06.999653+0800 RunLoop[10436:1007150] 监听到RunLoop发生改变---2
2017-12-18 23:05:06.999757+0800 RunLoop[10436:1007150] 监听到RunLoop发生改变---4
2017-12-18 23:05:07.002657+0800 RunLoop[10436:1007150] 监听到RunLoop发生改变---2
2017-12-18 23:05:07.003307+0800 RunLoop[10436:1007150] 监听到RunLoop发生改变---4
2017-12-18 23:05:07.067024+0800 RunLoop[10436:1007150] 监听到RunLoop发生改变---2
2017-12-18 23:05:07.067467+0800 RunLoop[10436:1007150] 监听到RunLoop发生改变---4
2017-12-18 23:05:07.068242+0800 RunLoop[10436:1007150] 监听到RunLoop发生改变---32
2017-12-18 23:05:07.248755+0800 RunLoop[10436:1007150] 监听到RunLoop发生改变---64
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 可以看到RunLoop的状态在不断的改变，最终变成了状态 32，也就是即将进入睡眠状态，说明RunLoop之后就会进入睡眠状态。&lt;/p&gt;
&lt;h2&gt;3. RunLoop 原理&lt;/h2&gt;
&lt;p&gt;下面，我们来理解下RunLoop的运行逻辑了：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1031687/201712/1031687-20171218230808600-1311688139.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这张图对于我们理解RunLoop很有帮助，下面我们说下官方文档给我们的RunLoop逻辑：&lt;/p&gt;
&lt;p&gt;在每次运行开启RunLoop的时候，所在线程的RunLoop会自动处理之前未处理的事件，并且通知相关的观察者：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;通知观察者RunLoop已经启动&lt;/li&gt;
&lt;li&gt;通知观察者即将要开始的定时器&lt;/li&gt;
&lt;li&gt;通知观察者任何即将启动的非基于端口的源&lt;/li&gt;
&lt;li&gt;启动任何准备好的非基于端口的源&lt;/li&gt;
&lt;li&gt;如果基于端口的源准备好并处于等待状态，立即启动，并进入步骤9&lt;/li&gt;
&lt;li&gt;通知观察者线程进入休眠状态&lt;/li&gt;
&lt;li&gt;将线程置于休眠直到任一下面的事件发生：某一事件到达基于端口的源 - 定时器启动 - RunLoop设置的时间已经超时 - RunLoop被显示唤醒&lt;/li&gt;
&lt;li&gt;通知观察者线程将被唤醒&lt;/li&gt;
&lt;li&gt;处理未处理的事件 - 如果用户定义的定时器启动，处理定时器事件并重启RunLoop，进入步骤2  - 如果输入源启动，传递相应的消息 - 如果RunLoop被显示唤醒而且时间还没超时，重启RunLoop，进入步骤2&lt;/li&gt;
&lt;li&gt;通知观察者RunLoop结束。&lt;/li&gt;
&lt;/ol&gt;&lt;h2&gt;4 使用场景&lt;/h2&gt;
&lt;h3&gt;4.1 后台常驻线程(很常用)&lt;/h3&gt;
&lt;p&gt;我们在开发程序的过程中，如果后台操作特别频繁，经常会在子线程做一些耗时操作(下载文件、后台播放音乐等)，我们最好能让这条线程永远常驻内存。&lt;/p&gt;
&lt;p&gt;那么怎么做呢？&lt;/p&gt;
&lt;p&gt;添加一条用于常驻内存的强引用的子线程，在该线程的RunLoop下添加一个 Sources，开启 RunLoop。&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:objc;gutter:true;&quot;&gt;
- (void)viewDidLoad {
    [super viewDidLoad];

    // 创建线程，并调用run1方法执行任务
    self.thread = [[NSThread alloc] initWithTarget:self selector:@selector(run1) object:nil];
    // 开启线程
    [self.thread start];    
}

- (void) run1
{
    // 这里写任务
    NSLog(@&quot;----run1-----&quot;);

    // 添加下边两句代码，就可以开启RunLoop，之后self.thread就变成了常驻线程，可随时添加任务，并交于RunLoop处理
    [[NSRunLoop currentRunLoop] addPort:[NSPort port] forMode:NSDefaultRunLoopMode];
    [[NSRunLoop currentRunLoop] run];

    // 测试是否开启了RunLoop，如果开启RunLoop，则来不了这里，因为RunLoop开启了循环。
    NSLog(@&quot;未开启RunLoop&quot;);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 运行之后发现打印了 ---run1--- ，而未开启RunLoop则未打印。&lt;/p&gt;
&lt;p&gt;这样我们就开启了一条常驻线程，如果我们再去添加其他任务的时候，---run1---还会继续打印，这就实现了常驻线程的需求。&lt;/p&gt;

</description>
<pubDate>Wed, 20 Dec 2017 02:22:00 +0000</pubDate>
<dc:creator>沉江小鱼</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/chenjiangxiaoyu/p/8035490.html</dc:identifier>
</item>
</channel>
</rss>