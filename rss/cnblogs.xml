<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>图解MySQL索引--B-Tree（B+Tree） - 浪人~</title>
<link>http://www.cnblogs.com/liqiangchn/p/9060521.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/liqiangchn/p/9060521.html</guid>
<description>&lt;p&gt;看了很多关于索引的博客，讲的大同小异。但是始终没有让我明白关于索引的一些概念，如B-Tree索引，Hash索引，唯一索引....或许有很多人和我一样，没搞清楚概念就开始研究B-Tree，B+Tree等结构，导致在面试的时候答非所问！&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;索引是什么?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;索引是帮助MySQL高效获取数据的数据结构。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;索引能干什么?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;提高数据查询的效率。&lt;/p&gt;
&lt;p&gt;索引：排好序的快速查找数据结构！索引会影响where后面的查找，和order by 后面的排序。&lt;/p&gt;
&lt;h2 id=&quot;一索引的分类&quot;&gt;一、索引的分类&lt;/h2&gt;
&lt;p&gt;1️⃣从存储结构上来划分：BTree索引（B-Tree或B+Tree索引），Hash索引，full-test全文索引，R-Tree索引。&lt;/p&gt;
&lt;p&gt;2️⃣从应用层次来分：普通索引，唯一索引，复合索引&lt;/p&gt;
&lt;p&gt;3️⃣根据中数据的物理顺序与键值的逻辑（索引）顺序关系：聚集索引，非聚集索引。&lt;/p&gt;
&lt;p&gt;​ 1️⃣中所描述的是索引存储时保存的形式，2️⃣是索引使用过程中进行的分类，两者是不同层次上的划分。不过平时讲的索引类型一般是指在应用层次的划分。&lt;/p&gt;
&lt;p&gt;就像手机分类：安卓手机，IOS手机 与 华为手机，苹果手机，OPPO手机一样。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;普通索引&lt;/strong&gt;：即一个索引只包含单个列，一个表可以有多个单列索引&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;唯一索引&lt;/strong&gt;：索引列的值必须唯一，但允许有空值&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;复合索引&lt;/strong&gt;：即一个索引包含多个列&lt;/p&gt;
&lt;h2 id=&quot;二索引的底层实现单值索引&quot;&gt;二、索引的底层实现（单值索引）&lt;/h2&gt;
&lt;pre&gt;
&lt;code&gt;mysql默认存储引擎innodb只显式支持B-Tree( 从技术上来说是B+Tree)索引，对于频繁访问的表，innodb会透明建立自适应hash索引，即在B树索引基础上建立hash索引，可以显著提高查找效率，对于客户端是透明的，不可控制的，隐式的。&lt;/code&gt;
&lt;/pre&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;不谈存储引擎，只讨论实现&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Hash索引&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;基于哈希表实现，只有精确匹配索引所有列的查询才有效，对于每一行数据，存储引擎都会对所有的索引列计算一个哈希码（hash code），并且Hash索引将所有的哈希码存储在索引中，同时在索引表中保存指向每个数据行的指针。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://p34qzbztu.bkt.clouddn.com/201805191452_413.png?imageView1/JannLee/md/01&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;B-Tree索引（MySQL使用B+Tree）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​ B-Tree能加快数据的访问速度，因为存储引擎不再需要进行全表扫描来获取数据，数据分布在各个节点之中。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://p34qzbztu.bkt.clouddn.com/201805191426_250.png?imageView1/JannLee/md/01&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;B+Tree&lt;/strong&gt;索引&lt;/p&gt;
&lt;p&gt;​ 是B-Tree的改进版本，同时也是数据库索引索引所采用的存储结构。数据都在叶子节点上，并且增加了顺序访问指针，每个叶子节点都指向相邻的叶子节点的地址。相比B-Tree来说，进行范围查找时只需要查找两个节点，进行遍历即可。而B-Tree需要获取所有节点，相比之下B+Tree效率更高。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://p34qzbztu.bkt.clouddn.com/201805191424_706.png?imageView1/JannLee/md/01&quot;/&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;结合存储引擎来讨论（一般默认使用B+Tree）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;案例：假设有一张学生表，id为主键&lt;/p&gt;
&lt;table&gt;&lt;thead/&gt;&lt;tbody&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td align=&quot;center&quot;&gt;1&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;Tom&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;1996-01-01&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td align=&quot;center&quot;&gt;2&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;Jann&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;1996-01-04&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td align=&quot;center&quot;&gt;3&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;Ray&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;1996-01-08&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td align=&quot;center&quot;&gt;4&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;Michael&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;1996-01-10&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td align=&quot;center&quot;&gt;5&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;Jack&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;1996-01-13&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td align=&quot;center&quot;&gt;6&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;Steven&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;1996-01-23&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td align=&quot;center&quot;&gt;7&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;Lily&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;1996-01-25&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;&lt;strong&gt;在MyISAM引擎中的实现&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://p34qzbztu.bkt.clouddn.com/201805191452_953.png?imageView1/JannLee/md/01&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;在InnoDB中的实现&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://p34qzbztu.bkt.clouddn.com/201805191433_127.png?imageView1/JannLee/md/01&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;三问题&quot;&gt;三、问题&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;问：为什么索引结构默认使用B-Tree，而不是hash，二叉树，红黑树？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;hash：虽然可以快速定位，但是没有顺序，IO复杂度高。&lt;/p&gt;
&lt;p&gt;二叉树：树的高度不均匀，不能自平衡，查找效率跟数据有关（树的高度），并且IO代价高。&lt;/p&gt;
&lt;p&gt;红黑树：树的高度随着数据量增加而增加，IO代价高。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;问：为什么官方建议使用自增长主键作为索引。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;结合B+Tree的特点，自增主键是连续的，在插入过程中尽量减少页分裂，即使要进行页分裂，也只会分裂很少一部分。并且能减少数据的移动，每次插入都是插入到最后。总之就是减少分裂和移动的频率。&lt;/p&gt;
&lt;p&gt;插入连续的数据：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://p34qzbztu.bkt.clouddn.com/201805191537_258.gif?imageView1/JannLee/md/01&quot;/&gt;&lt;/p&gt;
&lt;p&gt;插入非连续的数据&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://p34qzbztu.bkt.clouddn.com/201805191538_202.gif?imageView1/JannLee/md/01&quot;/&gt;&lt;/p&gt;
&lt;p&gt;原文地址：&lt;a href=&quot;http://www.cnblogs.com/liqiangchn/p/http：//www.mycookies.cn&quot;&gt;李强的个人博客(基于SSM，Nginx+Redis的后台架构)&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Sat, 19 May 2018 07:43:00 +0000</pubDate>
<dc:creator>浪人~</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/liqiangchn/p/9060521.html</dc:identifier>
</item>
<item>
<title>1.Spring Framework 5.0 入门篇 - 星云博客园</title>
<link>http://www.cnblogs.com/xingyunblog/p/6926927.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/xingyunblog/p/6926927.html</guid>
<description>&lt;p&gt; 随着对Java EE的不断接触和理解，你会发现Spring  在各个企业和项目中发挥着越来越重要的作用。掌握Spring 已成为我们IT行业生存必学的本领之一。&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;&lt;li&gt;Spring Framework 是一个开源的Java／Java EE全功能栈（full-stack）的应用程序框架，以Apache许可证形式发布，也有.NET平台上的移植版本。&lt;/li&gt;
&lt;li&gt; 该框架基于 Expert One-on-One Java EE Design and Development（ISBN 0-7645-4385-7）一书中的代码，最初由Rod Johnson和Juergen Hoeller等开发。&lt;/li&gt;
&lt;li&gt; Spring Framework提供了一个简易的开发方式，这种开发方式，将避免那些可能致使底层代码变得繁杂混乱的大量的属性文件和帮助类。&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;p&gt; Spring Framework 当前最新版本是Spring Framework 5,当你打开官网，你应该能够看到官网的宣传图片&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/622489/201805/622489-20180519092514495-1501179669.png&quot; alt=&quot;&quot; width=&quot;658&quot; height=&quot;296&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这里有个相关的新闻有兴趣可以看下，&lt;a href=&quot;https://content.pivotal.io/spring/oct-4-getting-reactive-with-spring-framework-5-0-s-ga-release-webinar&quot; target=&quot;_blank&quot;&gt;英文原版地址点击查看&lt;/a&gt;    &lt;a href=&quot;http://www.cnblogs.com/xingyunblog/articles/9055063.html&quot; target=&quot;_blank&quot;&gt;中文版点击查看&lt;/a&gt;&lt;/p&gt;
&lt;p&gt; 根据官网动态和我所了解的信息来看，Spring 官网还会继续支持Spring MVC，因为它还有很多改进的地方。&lt;/p&gt;
&lt;p&gt; 但是未来的趋势我认为必将是  &lt;em&gt;&lt;strong&gt;Spring Boot+ SpringWeb Flux + Spring Cloud&lt;/strong&gt;&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt; 那么Spring MVC 和 Spring Web Flux 两者有何区别呢？&lt;/p&gt;
&lt;p&gt; 官网对此给出了这样一张对比图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/622489/201805/622489-20180519093437579-64319755.png&quot; alt=&quot;&quot; width=&quot;600&quot; height=&quot;497&quot;/&gt;&lt;/p&gt;
&lt;p&gt;翻译下就是：&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;&lt;li&gt;Spring MVC基于servlet API构建，并使用一个同步阻塞I / O体系结构和一个单线程请求线程模型的Web 框架&lt;/li&gt;
&lt;li&gt;Spring WebFlux是一个非阻塞的Web框架，从该组建立起，利用多核，下一代处理器和大量并发连接。&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;p&gt;总结：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Spring MVC 是基于Servlet API 构建的同步阻塞式I/O 的Web 框架。&lt;/li&gt;
&lt;li&gt;Spring WebFlux 是一种更优秀的非阻塞式Web框架，而且能更好处理大量并发连接。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;看到这里，相信此时聪明的你应该晓得为什么我之前会那么说了吧。&lt;/p&gt;

&lt;p&gt;上面这些链接相信很多人都知道，但是其实往往我们不是很清楚什么时候用哪个链接。&lt;/p&gt;
&lt;p&gt;Spring 官网： 关注Spring 官网动态，最新的Spring 技术和版本发布公告&lt;/p&gt;
&lt;p&gt;Spring 文档： what you want to do ? 你想开发一个什么样的项目？可以在这里快速找到相关介绍和文档。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/622489/201805/622489-20180519100555880-978779332.png&quot; alt=&quot;&quot; width=&quot;582&quot; height=&quot;255&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Spring IDE:    如果你打算用Eclipse 版本,那么我推荐用 官网这个STS，因为它应该是最友好支持Spring的Eclipse 版本。当然，如果如果条件可以，我还是强烈推荐你使用Intellij Idea.&lt;/p&gt;
&lt;p&gt;Spring Project: 这里是按照项目模块划分的，比如 从配置到安全，Web应用程序到大数据，想学习哪个就按照分类去学即可。&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/622489/201805/622489-20180519100713844-387864500.png&quot; alt=&quot;&quot; width=&quot;585&quot; height=&quot;290&quot;/&gt;&lt;/p&gt;
&lt;p&gt;项目生成器：这里是Spring 官网提供的一个非常便利的工具，需要哪些依赖，哪个版本，在这里配置下然后下载即可。&lt;/p&gt;

&lt;p&gt;Spring Framework核心支持依赖注入，事务管理，Web应用程序，数据访问，消息传递，测试和更多&lt;/p&gt;
&lt;p&gt;Tips:这里讲述的是翻译 &lt;a href=&quot;https://projects.spring.io/spring-framework/&quot; target=&quot;_blank&quot;&gt;https://projects.spring.io/spring-framework/ &lt;/a&gt;  上面的内容&lt;/p&gt;
&lt;h2&gt;3.1 介绍&lt;/h2&gt;
&lt;blockquote readability=&quot;10&quot;&gt;
&lt;p&gt;Spring框架为现代基于Java的企业应用程序提供了一个全面的编程和配置模型 - 在任何类型的部署平台上。&lt;/p&gt;
&lt;p&gt;Spring的一个关键元素是应用程序级别的基础架构支持：Spring着重于企业应用程序的“管道”，以便团队可以专注于应用程序级业务逻辑，而不必与特定部署环境形成不必要的联系。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;3.2 功能特点&lt;/h2&gt;
&lt;blockquote&gt;
&lt;ul&gt;&lt;li&gt;核心技术：依赖注入，事件，资源，i18n，验证，数据绑定，类型转换，SpEL，AOP。&lt;/li&gt;
&lt;li&gt;测试：模拟对象，TestContext框架，Spring MVC测试，WebTestClient。&lt;/li&gt;
&lt;li&gt;数据访问：事务，DAO支持，JDBC，ORM，编组XML。&lt;/li&gt;
&lt;li&gt;Spring MVC和Spring WebFlux Web框架&lt;/li&gt;
&lt;li&gt;整合：远程处理，JMS，JCA，JMX，电子邮件，任务，调度，缓存。&lt;/li&gt;
&lt;li&gt;语言：Kotlin，Groovy，动态语言。&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;Tips:&lt;/strong&gt; 这里加一张官网文档中的一个截图吧，相信有助于你更好地理解。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;img src=&quot;https://images2015.cnblogs.com/blog/622489/201706/622489-20170601020227274-562798884.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;3.3 最低要求&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;JDK 8+ for Spring Framework 5.x&lt;/li&gt;
&lt;li&gt;JDK 6+ for Spring Framework 4.x&lt;/li&gt;
&lt;li&gt;JDK 5+ for Spring Framework 3.x&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Tips: 所以你的电脑现在推荐使用 JDK1.8+ &lt;/p&gt;
&lt;h2&gt;&lt;span&gt;3.4 快速开始&lt;/span&gt;&lt;/h2&gt;
&lt;blockquote readability=&quot;7.6271186440678&quot;&gt;
&lt;p&gt;在项目中开始使用spring-framework的推荐方法是使用依赖管理系统 - 下面的代码片段可以复制并粘贴到您的构建中。&lt;/p&gt;
&lt;p&gt;需要帮忙？ 请参阅我们有关使用 &lt;a href=&quot;https://spring.io/guides/gs/maven/&quot; target=&quot;_blank&quot;&gt;Maven&lt;/a&gt;和 &lt;a href=&quot;https://spring.io/guides/gs/gradle/&quot; target=&quot;_blank&quot;&gt;Gradle&lt;/a&gt; 构建的入门指南。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;其实不止Spring 官网我们如今的各大公司应该大多数也推荐我们是用Maven和Gradle 来管理项目Jar包依赖。&lt;/p&gt;
&lt;p&gt;如果你使用的Maven:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependencies&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; spring-context&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;5.1.0.BUILD-SNAPSHOT&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependencies&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;repositories&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;repository&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-snapshots&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Spring Snapshots&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;url&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;https://repo.spring.io/libs-snapshot&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;url&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;snapshots&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;enabled&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;true&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;enabled&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;snapshots&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;repository&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;repositories&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果你是用的是Gradle &lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;dependencies {
    compile 'org.springframework: spring-context:5.1.0.BUILD-SNAPSHOT'
}repositories {
    maven {
        url 'https://repo.spring.io/libs-snapshot'
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; Tips: 其实我觉得Gradle应该是一种比Maven更先进的版本依赖管理工具，不过如今各大公司使用Gradle 似乎还不是很多，也许是与因为Eclipse 对Gradle 的支持还不够像Intellij Idea 那么完美吧。&lt;/p&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;Spring框架包含许多不同的模块。 这里我们展示了提供核心功能的spring-context。 有关其他选项，请参阅右侧的入门指南。&lt;/p&gt;
&lt;p&gt;一旦你使用spring-context依赖关系设置你的构建，你就可以做到以下几点：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;到这里后官网有些不详细，补充下。&lt;/p&gt;
&lt;p&gt;方法一： 使用STS 工具构建这个带有Spring-context 上下文的项目&lt;/p&gt;
&lt;p&gt;准备工作：&lt;/p&gt;
&lt;p&gt; Tips: 下载的时候有个坑注意下，如果你的JDK是64位，默认直接下载的STS是32位，会出现这个错误。&lt;/p&gt;
&lt;p&gt;    &lt;img src=&quot;https://images2018.cnblogs.com/blog/622489/201805/622489-20180519134303357-761035672.png&quot; alt=&quot;&quot; width=&quot;262&quot; height=&quot;134&quot;/&gt;&lt;/p&gt;
&lt;p&gt;所以下载的时候一定要下载JDK匹配的版本才行，移步：&lt;a href=&quot;https://spring.io/tools/sts/all&quot; target=&quot;_blank&quot;&gt;https://spring.io/tools/sts/all&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/622489/201805/622489-20180519134424080-923407324.png&quot; alt=&quot;&quot; width=&quot;517&quot; height=&quot;165&quot;/&gt;&lt;/p&gt;
&lt;p&gt; 这里下载完成后我们在我们的IDE空白处，右键——&amp;gt; New——&amp;gt; Other...&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/622489/201805/622489-20180519150054047-102341476.png&quot; alt=&quot;&quot; width=&quot;536&quot; height=&quot;403&quot;/&gt;&lt;/p&gt;
&lt;p&gt; 输入maven 搜索，选择Maven Project，创建一个Maven项目&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/622489/201805/622489-20180519150146995-1825650398.png&quot; alt=&quot;&quot; width=&quot;518&quot; height=&quot;428&quot;/&gt;&lt;/p&gt;
&lt;p&gt;选择默认的工作空间&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/622489/201805/622489-20180519150408953-1049361335.png&quot; alt=&quot;&quot; width=&quot;503&quot; height=&quot;431&quot;/&gt;&lt;/p&gt;
&lt;p&gt;选择默认的类型&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/622489/201805/622489-20180519150505064-1618361521.png&quot; alt=&quot;&quot; width=&quot;512&quot; height=&quot;454&quot;/&gt;&lt;/p&gt;
&lt;p&gt;输入项目基本信息后点击Finish 完成&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/622489/201805/622489-20180519150638323-790344933.png&quot; alt=&quot;&quot; width=&quot;508&quot; height=&quot;450&quot;/&gt;&lt;/p&gt;
&lt;p&gt;然后我们应该可以看到这样的项目结构&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/622489/201805/622489-20180519150913160-294516840.png&quot; alt=&quot;&quot; width=&quot;363&quot; height=&quot;344&quot;/&gt;&lt;/p&gt;
&lt;p&gt;首先修改pom.xml&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_2264d526-7c76-49b1-a8e8-eabbe1954ba2&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_2264d526-7c76-49b1-a8e8-eabbe1954ba2&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_2264d526-7c76-49b1-a8e8-eabbe1954ba2&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;project &lt;/span&gt;&lt;span&gt;xmlns&lt;/span&gt;&lt;span&gt;=&quot;http://maven.apache.org/POM/4.0.0&quot;&lt;/span&gt;&lt;span&gt;
    xmlns:xsi&lt;/span&gt;&lt;span&gt;=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt;&lt;span&gt;
    xsi:schemaLocation&lt;/span&gt;&lt;span&gt;=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;modelVersion&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;4.0.0&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;modelVersion&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;com.xingyun&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-context-sample&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;0.0.1-SNAPSHOT&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;packaging&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;jar&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;packaging&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-context-sample&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;url&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;http://maven.apache.org&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;url&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;properties&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;project.build.sourceEncoding&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;UTF-8&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;project.build.sourceEncoding&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;properties&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependencies&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;junit&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;junit&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;3.8.1&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;scope&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;test&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;scope&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; spring-context&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;5.1.0.BUILD-SNAPSHOT&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependencies&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;repositories&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;repository&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-snapshots&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Spring Snapshots&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;url&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;https://repo.spring.io/libs-snapshot&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;url&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;snapshots&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;enabled&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;true&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;enabled&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;snapshots&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;repository&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;repositories&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;


&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;project&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;创建文件&lt;/p&gt;
&lt;p&gt;hello/MessageService.java&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.xingyun.spring_context_sample.hello;

&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt;&lt;span&gt; MessageService {
    String getMessage();
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;hello/MessagePrinter.java&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.xingyun.spring_context_sample.hello;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.beans.factory.annotation.Autowired;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.stereotype.Component;

@Component
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; MessagePrinter {
    &lt;/span&gt;&lt;span&gt;final&lt;/span&gt; &lt;span&gt;private&lt;/span&gt;&lt;span&gt; MessageService service;

    @Autowired
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; MessagePrinter(MessageService service) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.service =&lt;span&gt; service;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; printMessage() {
        System.out.println(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.service.getMessage());
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Tips: 注意下这里有个注解不要忘了&lt;/p&gt;
&lt;p&gt;App.java&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.xingyun.spring_context_sample;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.context.ApplicationContext;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.context.annotation.AnnotationConfigApplicationContext;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.context.annotation.Bean;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.context.annotation.ComponentScan;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.context.annotation.Configuration;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.xingyun.spring_context_sample.hello.MessagePrinter;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.xingyun.spring_context_sample.hello.MessageService;

@Configuration
@ComponentScan
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; App 
{
    @Bean
    MessageService mockMessageService() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; MessageService() {
            &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getMessage() {
              &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &quot;Hello World!&quot;&lt;span&gt;;
            }
        };
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main( String[] args )
    {
         ApplicationContext context &lt;/span&gt;= 
                  &lt;span&gt;new&lt;/span&gt; AnnotationConfigApplicationContext(App.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;);
              MessagePrinter printer &lt;/span&gt;= context.getBean(MessagePrinter.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;);
              printer.printMessage();
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Tips: 注意类上有两个注解和方法上有一个注解不要忘了，类的名字你可以改成官网上的Application 也可以保留默认的App名字也行。&lt;/p&gt;
&lt;p&gt;创建成功后项目结构应该是这样&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/622489/201805/622489-20180519152435363-2035846214.png&quot; alt=&quot;&quot; width=&quot;304&quot; height=&quot;290&quot;/&gt;&lt;/p&gt;
&lt;p&gt;当然可能你会看着这种项目结构不舒服，那么你也可以选择改变下。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/622489/201805/622489-20180519152631967-1405014315.png&quot; alt=&quot;&quot; width=&quot;455&quot; height=&quot;302&quot;/&gt;&lt;/p&gt;
&lt;p&gt;项目结构就变成了这种：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/622489/201805/622489-20180519152712708-669858580.png&quot; alt=&quot;&quot; width=&quot;295&quot; height=&quot;331&quot;/&gt;&lt;/p&gt;
&lt;p&gt;运行App.main() 主方法&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/622489/201805/622489-20180519152243711-880648724.png&quot; alt=&quot;&quot; width=&quot;742&quot; height=&quot;128&quot;/&gt;&lt;/p&gt;
&lt;p&gt;项目源码下载：&lt;a href=&quot;https://github.com/geekxingyun/JavaEE-Framework-Sample/tree/master/spring-context-sample&quot; target=&quot;_blank&quot;&gt;https://github.com/geekxingyun/JavaEE-Framework-Sample/tree/master/spring-context-sample&lt;/a&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt; 附录：核心Jar包依赖关系&lt;/p&gt;
&lt;p&gt;Tips: 如果你不是写一个java web Application,那么将不需要spring-web 模块。&lt;/p&gt;
&lt;table summary=&quot;Spring Framework Artifacts&quot; border=&quot;1&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;thead&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot;&gt;
&lt;p&gt;&lt;strong&gt;GroupId&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot;&gt;
&lt;p&gt;&lt;strong&gt;ArtifactId&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot;&gt;
&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody readability=&quot;21.5&quot;&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot;&gt;
&lt;p&gt;org.springframework&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot;&gt;
&lt;p&gt;spring-aop&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot;&gt;
&lt;p&gt;Proxy-based AOP support&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot;&gt;
&lt;p&gt;org.springframework&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot;&gt;
&lt;p&gt;spring-aspects&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot;&gt;
&lt;p&gt;AspectJ based aspects&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4.5&quot;&gt;&lt;td valign=&quot;top&quot;&gt;
&lt;p&gt;org.springframework&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot;&gt;
&lt;p&gt;spring-beans&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; readability=&quot;6&quot;&gt;
&lt;p&gt;Beans support, including Groovy&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4.5&quot;&gt;&lt;td valign=&quot;top&quot;&gt;
&lt;p&gt;org.springframework&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot;&gt;
&lt;p&gt;spring-context&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; readability=&quot;6&quot;&gt;
&lt;p&gt;Application context runtime, including scheduling and remoting abstractions&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot;&gt;
&lt;p&gt;org.springframework&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot;&gt;
&lt;p&gt;spring-context-support&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;Support classes for integrating common third-party libraries into a Spring application context&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4.5&quot;&gt;&lt;td valign=&quot;top&quot;&gt;
&lt;p&gt;org.springframework&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot;&gt;
&lt;p&gt;spring-core&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; readability=&quot;6&quot;&gt;
&lt;p&gt;Core utilities, used by many other Spring modules&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot;&gt;
&lt;p&gt;org.springframework&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot;&gt;
&lt;p&gt;spring-expression&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;Spring Expression Language (SpEL)&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot;&gt;
&lt;p&gt;org.springframework&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot;&gt;
&lt;p&gt;spring-instrument&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;Instrumentation agent for JVM bootstrapping&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot;&gt;
&lt;p&gt;org.springframework&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot;&gt;
&lt;p&gt;spring-instrument-tomcat&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;Instrumentation agent for Tomcat&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4.5&quot;&gt;&lt;td valign=&quot;top&quot;&gt;
&lt;p&gt;org.springframework&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot;&gt;
&lt;p&gt;spring-jdbc&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; readability=&quot;6&quot;&gt;
&lt;p&gt;JDBC support package, including DataSource setup and JDBC access support&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4.5&quot;&gt;&lt;td valign=&quot;top&quot;&gt;
&lt;p&gt;org.springframework&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot;&gt;
&lt;p&gt;spring-jms&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; readability=&quot;6&quot;&gt;
&lt;p&gt;JMS support package, including helper classes to send/receive JMS messages&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot;&gt;
&lt;p&gt;org.springframework&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot;&gt;
&lt;p&gt;spring-messaging&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;Support for messaging architectures and protocols&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4.5&quot;&gt;&lt;td valign=&quot;top&quot;&gt;
&lt;p&gt;org.springframework&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot;&gt;
&lt;p&gt;spring-orm&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; readability=&quot;6&quot;&gt;
&lt;p&gt;Object/Relational Mapping, including JPA and Hibernate support&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot;&gt;
&lt;p&gt;org.springframework&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot;&gt;
&lt;p&gt;spring-oxm&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot;&gt;
&lt;p&gt;Object/XML Mapping&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot;&gt;
&lt;p&gt;org.springframework&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot;&gt;
&lt;p&gt;spring-test&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;Support for unit testing and integration testing Spring components&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4.5&quot;&gt;&lt;td valign=&quot;top&quot;&gt;
&lt;p&gt;org.springframework&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot;&gt;
&lt;p&gt;spring-tx&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; readability=&quot;6&quot;&gt;
&lt;p&gt;Transaction infrastructure, including DAO support and JCA integration&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4.5&quot;&gt;&lt;td valign=&quot;top&quot;&gt;
&lt;p&gt;org.springframework&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot;&gt;
&lt;p&gt;spring-web&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; readability=&quot;6&quot;&gt;
&lt;p&gt;Foundational web support, including web client and web-based remoting&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot;&gt;
&lt;p&gt;org.springframework&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot;&gt;
&lt;p&gt;spring-webmvc&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;HTTP-based Model-View-Controller and REST endpoints for Servlet stacks&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot;&gt;
&lt;p&gt;org.springframework&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot;&gt;
&lt;p&gt;spring-webmvc-portlet&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;MVC implementation to be used in a Portlet environment&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4.5&quot;&gt;&lt;td valign=&quot;top&quot;&gt;
&lt;p&gt;org.springframework&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot;&gt;
&lt;p&gt;spring-websocket&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; readability=&quot;6&quot;&gt;
&lt;p&gt;WebSocket and SockJS infrastructure, including STOMP messaging support&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;</description>
<pubDate>Sat, 19 May 2018 07:32:00 +0000</pubDate>
<dc:creator>星云博客园</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/xingyunblog/p/6926927.html</dc:identifier>
</item>
<item>
<title>时间序列（一）：上手体验 - JSong</title>
<link>http://www.cnblogs.com/gasongjian/p/9060327.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/gasongjian/p/9060327.html</guid>
<description>&lt;p&gt;我们把按照时间次序排列的随机变量序列&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;math display&quot;&gt;\[Y_0,\, Y_1,\, Y_2, \cdots \]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;称为时间序列（Time Series）。比如网站的PV、DAU，国家的GDP，股票的价格等。&lt;/p&gt;
&lt;p&gt;这种特别的次序给模型提出了特别的挑战，包含数据内的自相关性、不可交换性、以及数据和参数的不平稳性等。&lt;/p&gt;
&lt;p&gt;时间序列里面的内容很多，小到接下来要讲的平滑，大到金融里的混沌时间序列预测等。我准备花一些时间认真整理部分理论和应用，第一篇就分享下上手攻略，关键词是 insight。&lt;/p&gt;
&lt;p&gt;本文采用的数据集是 Peyton Manning 的 Wikipedia 页面的 PV，下载地址是：&lt;a href=&quot;https://github.com/facebook/prophet/tree/master/examples&quot; class=&quot;uri&quot;&gt;https://github.com/facebook/prophet/tree/master/examples&lt;/a&gt; ，也可以在公众号后台回复 &lt;em&gt;数据集&lt;/em&gt; 下载。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;df &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; pd.read_csv(&lt;span class=&quot;st&quot;&gt;'.&lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;example_wp_peyton_manning.csv'&lt;/span&gt;)
df[&lt;span class=&quot;st&quot;&gt;'ds'&lt;/span&gt;]&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;pd.to_datetime(df[&lt;span class=&quot;st&quot;&gt;'ds'&lt;/span&gt;])
df[&lt;span class=&quot;st&quot;&gt;'y'&lt;/span&gt;]&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;np.log(df[&lt;span class=&quot;st&quot;&gt;'y'&lt;/span&gt;])&lt;span class=&quot;co&quot;&gt;# tricks&lt;/span&gt;
plt.plot(df[&lt;span class=&quot;st&quot;&gt;'ds'&lt;/span&gt;],df[&lt;span class=&quot;st&quot;&gt;'y'&lt;/span&gt;],&lt;span class=&quot;st&quot;&gt;'.'&lt;/span&gt;)
ax.set_title(&lt;span class=&quot;st&quot;&gt;'Raw Time Series'&lt;/span&gt;)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/802399/201805/802399-20180519144324792-1830176010.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/802399/201805/802399-20180519144347215-326894128.png&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;手动平滑时间序列和获取趋势项&quot;&gt;1. 手动平滑时间序列和获取趋势项&lt;/h2&gt;
&lt;p&gt;假设时间序列有周期为 s 的周期性趋势，一种最简单的平滑方式就是移动平均法(moving average)，假设窗口设为7，则&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;math display&quot;&gt;\[s_t=\frac{1}{7}(y_t+y_{t-1}+y_{t-2}+\cdots +y_{t-6})\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;其实就是股票中的5日均线、20日均线。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;24&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;y1&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;pd.rolling_mean(df[&lt;span class=&quot;st&quot;&gt;'y'&lt;/span&gt;],window&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;7&lt;/span&gt;)
&lt;span class=&quot;co&quot;&gt;# 如果要使得平滑后长度一致，可以设置参数,min_periods=1&lt;/span&gt;
y2&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;pd.rolling_mean(df[&lt;span class=&quot;st&quot;&gt;'y'&lt;/span&gt;],window&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;365&lt;/span&gt;)
fig,ax&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;plt.subplots()
ax.plot(df[&lt;span class=&quot;st&quot;&gt;'ds'&lt;/span&gt;],df[&lt;span class=&quot;st&quot;&gt;'y'&lt;/span&gt;],&lt;span class=&quot;st&quot;&gt;'.'&lt;/span&gt;,alpha&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;fl&quot;&gt;0.4&lt;/span&gt;,label&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'Raw'&lt;/span&gt;)
ax.plot(df[&lt;span class=&quot;st&quot;&gt;'ds'&lt;/span&gt;],y1,&lt;span class=&quot;st&quot;&gt;'-'&lt;/span&gt;,label&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'Win:7'&lt;/span&gt;)
ax.plot(df[&lt;span class=&quot;st&quot;&gt;'ds'&lt;/span&gt;],y2,&lt;span class=&quot;st&quot;&gt;'-'&lt;/span&gt;,label&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'Win:365'&lt;/span&gt;)
ax.legend()
ax.set_title(&lt;span class=&quot;st&quot;&gt;'Smoothing : Moving Average'&lt;/span&gt;)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/802399/201805/802399-20180519144351123-1248009047.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;移动平均法只利用了前面n天的数据，而且权重一样。一种更好的方法是指数平滑法（exponentially weighted moving average），越靠近当天的数据权重越高&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;math display&quot;&gt;\[s_0=y_0, \,\, s_t=\alpha y_t +(1-\alpha)y_{t-1}\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;从这个公式看不出指数在哪，但当我们把它展开后就很明显了。&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;math display&quot;&gt;\[s_t=\alpha [y_t+(1-\alpha)y_{t-1} + \cdots + (1-\alpha)^{t-1}y_1] + (1-\alpha)^{t} y_0\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;事实上 EMWA 是一种没有常数项的ARIMA(0,1,1)模型，当把alpha的选取标准设为最小化 s_t 和 y_{t+1} 就是一个很简单的时间序列预测模型。&lt;/p&gt;
&lt;p&gt;股票中的MACD指标利用的就是指数平滑，其中的DIF线就是12日的指数平滑值 减去26日的指数平滑值。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;22&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;y1&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;pd.ewma(df[&lt;span class=&quot;st&quot;&gt;'y'&lt;/span&gt;],span&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;7&lt;/span&gt;)
y2&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;pd.ewma(df[&lt;span class=&quot;st&quot;&gt;'y'&lt;/span&gt;],span&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;365&lt;/span&gt;)
fig,ax&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;plt.subplots()
ax.plot(df[&lt;span class=&quot;st&quot;&gt;'ds'&lt;/span&gt;],df[&lt;span class=&quot;st&quot;&gt;'y'&lt;/span&gt;],&lt;span class=&quot;st&quot;&gt;'.'&lt;/span&gt;,alpha&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;fl&quot;&gt;0.4&lt;/span&gt;,label&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'Raw'&lt;/span&gt;)
ax.plot(df[&lt;span class=&quot;st&quot;&gt;'ds'&lt;/span&gt;],y1,&lt;span class=&quot;st&quot;&gt;'-'&lt;/span&gt;,label&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'Span:7'&lt;/span&gt;)
ax.plot(df[&lt;span class=&quot;st&quot;&gt;'ds'&lt;/span&gt;],y2,&lt;span class=&quot;st&quot;&gt;'-'&lt;/span&gt;,label&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'Span:365'&lt;/span&gt;)
ax.legend()
ax.set_title(&lt;span class=&quot;st&quot;&gt;'Smoothing : Exponentially Weighted Moving Average'&lt;/span&gt;)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/802399/201805/802399-20180519144409213-1071793778.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;除此之外还有一些更好的方法，大家可以试试，比如 Holt-Winter三次指数平滑法等&lt;/p&gt;
&lt;h2 id=&quot;利用-prophet-看趋势和周期&quot;&gt;2. 利用 Prophet 看趋势和周期&lt;/h2&gt;
&lt;p&gt;时间序列经过合理的函数变换后都可以被认为是由三个部分叠加而成。分别是趋势项部分、周期项部分和噪声项部分&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;math display&quot;&gt;\[y(t) = g(t) +s(t) +\varepsilon_t\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;其中 s(t) 表示周期项，如 weekly seasonality（周一和周二是不一样的）和 yearly seasonality（平时和寒暑假是不一样的等）等。对于一些特别的场景，比如网站的DAU，还需要考虑节假日成分、特殊时间成分等。&lt;/p&gt;
&lt;p&gt;我们可以利用 Facebook 开源的包 Prophet 来分解。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;12&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;co&quot;&gt;# 可以添加节假日参数，这样分解会更准确&lt;/span&gt;
m&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;Prophet()
m.fit(df)
future&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;m.make_future_dataframe(periods&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;)
forecast&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;m.predict(future)
forecast1&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;forecast.loc[:,[&lt;span class=&quot;st&quot;&gt;'ds'&lt;/span&gt;,&lt;span class=&quot;st&quot;&gt;'yhat'&lt;/span&gt;]]
&lt;span class=&quot;co&quot;&gt;#m.plot(forecast);&lt;/span&gt;
fig&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;m.plot_components(forecast,weekly_start&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/802399/201805/802399-20180519144425057-292586188.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Prophet 利用加法模型把序列分成了4个部分（如果给定节假日参数，则是5个部分）。我们可以大概看下它的预测效果，之后我准备花一篇文章专门梳理各个方法（包）的预测效果。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;25&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;df1&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;pd.merge(forecast.loc[:,[&lt;span class=&quot;st&quot;&gt;'ds'&lt;/span&gt;,&lt;span class=&quot;st&quot;&gt;'yhat'&lt;/span&gt;]],df,on&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'ds'&lt;/span&gt;,how&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'inner'&lt;/span&gt;)
&lt;span class=&quot;co&quot;&gt;# 计算RMSE&lt;/span&gt;
&lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; sklearn &lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; metrics
rmse&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;np.sqrt(metrics.mean_squared_error(df1[&lt;span class=&quot;st&quot;&gt;'yhat'&lt;/span&gt;],df1[&lt;span class=&quot;st&quot;&gt;'y'&lt;/span&gt;]))
fig,ax&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;plt.subplots()
ax.plot(df1[&lt;span class=&quot;st&quot;&gt;'ds'&lt;/span&gt;],df1[&lt;span class=&quot;st&quot;&gt;'y'&lt;/span&gt;],&lt;span class=&quot;st&quot;&gt;'.'&lt;/span&gt;,label&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'Raw'&lt;/span&gt;)
ax.plot(df1[&lt;span class=&quot;st&quot;&gt;'ds'&lt;/span&gt;],df1[&lt;span class=&quot;st&quot;&gt;'yhat'&lt;/span&gt;],&lt;span class=&quot;st&quot;&gt;'-'&lt;/span&gt;,alpha&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;fl&quot;&gt;0.8&lt;/span&gt;,label&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'Prophet'&lt;/span&gt;)
ax.legend()
ax.set_title(&lt;span class=&quot;st&quot;&gt;'Prophet Predict (RMSE= {:.2f})'&lt;/span&gt;.&lt;span class=&quot;bu&quot;&gt;format&lt;/span&gt;(rmse))&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
fig.savefig(&lt;span class=&quot;st&quot;&gt;'.&lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;_images&lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;prophet_predict.png'&lt;/span&gt;,dpi&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;500&lt;/span&gt;)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/802399/201805/802399-20180519144443910-1538989558.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;PS： 因为我们用的是训练集，所以这个RMSE并不能用来评估预测的效果。&lt;/p&gt;
&lt;h2 id=&quot;从频域看可能存在的周期&quot;&gt;3. 从频域看可能存在的周期&lt;/h2&gt;
&lt;p&gt;我们还可以利用Fourier Transform 在频域里看看时间序列。给定一个函数 f(x), 则其 傅里叶变换可以表示为：&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;math display&quot;&gt;\[\hat{f}(x)=\int f(x)e^{-2\pi i x \xi} dx\]&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;24&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;w &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; np.fft.fft(df[&lt;span class=&quot;st&quot;&gt;'y'&lt;/span&gt;]&lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;y4)
n&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bu&quot;&gt;len&lt;/span&gt;(w)
w&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;w[&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;:]
power &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; np.&lt;span class=&quot;bu&quot;&gt;abs&lt;/span&gt;(w[:&lt;span class=&quot;bu&quot;&gt;int&lt;/span&gt;(n&lt;span class=&quot;op&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;)])
nyquist &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;
freq &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; np.arange(&lt;span class=&quot;bu&quot;&gt;int&lt;/span&gt;(n&lt;span class=&quot;op&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;))&lt;span class=&quot;op&quot;&gt;/&lt;/span&gt;(n&lt;span class=&quot;op&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;*&lt;/span&gt;nyquist
fig,ax&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;plt.subplots()
ax.plot(freq,power)
ax.set_xlim(&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;fl&quot;&gt;0.2&lt;/span&gt;)
ax.set_title(&lt;span class=&quot;st&quot;&gt;'Power Spectral'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
ax.plot(&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;365&lt;/span&gt;,power[&lt;span class=&quot;dv&quot;&gt;7&lt;/span&gt;],&lt;span class=&quot;st&quot;&gt;'o'&lt;/span&gt;,color&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'red'&lt;/span&gt;)
ax.text(&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;365&lt;/span&gt;,power[&lt;span class=&quot;dv&quot;&gt;7&lt;/span&gt;],&lt;span class=&quot;st&quot;&gt;'   Hz: 1/365'&lt;/span&gt;)
ax.plot(&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;7&lt;/span&gt;,power[&lt;span class=&quot;dv&quot;&gt;416&lt;/span&gt;],&lt;span class=&quot;st&quot;&gt;'o'&lt;/span&gt;,color&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'red'&lt;/span&gt;)
ax.text(&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;7&lt;/span&gt;,power[&lt;span class=&quot;dv&quot;&gt;416&lt;/span&gt;],&lt;span class=&quot;st&quot;&gt;'   Hz:1/7'&lt;/span&gt;)
fig.savefig(&lt;span class=&quot;st&quot;&gt;'.&lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;_images&lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;power_spectral.png'&lt;/span&gt;,dpi&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;500&lt;/span&gt;)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/802399/201805/802399-20180519144456352-528396839.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;功率谱上的两个峰值就是时间序列存在的周期。&lt;/p&gt;
&lt;h2 id=&quot;从时频域看异常值&quot;&gt;4. 从时频域看异常值&lt;/h2&gt;
&lt;p&gt;小波变换可以把时间序列直接在时频域进行分解成高频部分和低频部分。低频部分包含了序列的大部分信息，高频部分则包含了一些细节信息。现在的JPEG2000压缩标准就是基于小波变换设计的，如果将一张图片进行小波变换，则低频部分跟原图差别很小，高频部分则大概能看出图片的轮廊，通过一些方法就能进行图片边界的检测了，大家有兴趣可以试试。&lt;/p&gt;
&lt;p&gt;首先回顾一下小波变换的相关理论. 详细的我就不讲了，比较复杂。设 &lt;span class=&quot;math inline&quot;&gt;\(f(x)\in L^2(\mathbb{R})\)&lt;/span&gt;，对于任意精度 &lt;span class=&quot;math inline&quot;&gt;\(\varepsilon\)&lt;/span&gt;，我们都能找到一个 &lt;span class=&quot;math inline&quot;&gt;\(j\)&lt;/span&gt; 使得&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;math display&quot;&gt;\[ \| f-f_j\|_{L^2} \leq \varepsilon,\quad f_j \in V_j, \]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;math display&quot;&gt;\[ f_j(x)=\sum_{k\in \mathbb{Z}}c_{j,k}\varphi_{j,k}(x) \]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;其中 &lt;span class=&quot;math inline&quot;&gt;\(\{\varphi_{j,k}(x)\}\)&lt;/span&gt; 是具有紧支撑的函数族，比如 db1,db2,...&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;39&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; pywt
(cA,cD)&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;pywt.dwt(df[&lt;span class=&quot;st&quot;&gt;'y'&lt;/span&gt;],&lt;span class=&quot;st&quot;&gt;'db4'&lt;/span&gt;)
n&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bu&quot;&gt;len&lt;/span&gt;(df)
cAn&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;pywt.upcoef(&lt;span class=&quot;st&quot;&gt;'a'&lt;/span&gt;,cA,&lt;span class=&quot;st&quot;&gt;'db4'&lt;/span&gt;,take&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;n)
cDn&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;pywt.upcoef(&lt;span class=&quot;st&quot;&gt;'d'&lt;/span&gt;,cD,&lt;span class=&quot;st&quot;&gt;'db4'&lt;/span&gt;,take&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;n)
fig,[ax0,ax1,ax2]&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;plt.subplots(&lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;)
ax0.plot(df[&lt;span class=&quot;st&quot;&gt;'ds'&lt;/span&gt;],df[&lt;span class=&quot;st&quot;&gt;'y'&lt;/span&gt;],&lt;span class=&quot;st&quot;&gt;'.'&lt;/span&gt;)
ax0.set_xlabel(&lt;span class=&quot;st&quot;&gt;'Raw'&lt;/span&gt;)

ax1.plot(df[&lt;span class=&quot;st&quot;&gt;'ds'&lt;/span&gt;],cAn,&lt;span class=&quot;st&quot;&gt;'.'&lt;/span&gt;)
ax1.set_xlabel(&lt;span class=&quot;st&quot;&gt;'Low Frequency'&lt;/span&gt;)

ax2.plot(df[&lt;span class=&quot;st&quot;&gt;'ds'&lt;/span&gt;],cDn,&lt;span class=&quot;st&quot;&gt;'.'&lt;/span&gt;)
ax2.set_xlabel(&lt;span class=&quot;st&quot;&gt;'High Frequency'&lt;/span&gt;)

fig.tight_layout()
&lt;span class=&quot;co&quot;&gt;#fig.savefig('.\\_images\\小波分解.png',dpi=500)&lt;/span&gt;

fig,ax&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;plt.subplots()
cDn[np.&lt;span class=&quot;bu&quot;&gt;abs&lt;/span&gt;(cDn)&lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;*&lt;/span&gt;np.std(cDn)]&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;
ax.plot(df[&lt;span class=&quot;st&quot;&gt;'ds'&lt;/span&gt;],df[&lt;span class=&quot;st&quot;&gt;'y'&lt;/span&gt;],&lt;span class=&quot;st&quot;&gt;'.'&lt;/span&gt;)
tmp&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;df.copy()
tmp[&lt;span class=&quot;st&quot;&gt;'cDn'&lt;/span&gt;]&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;cDn
tmp&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;tmp.loc[tmp[&lt;span class=&quot;st&quot;&gt;'cDn'&lt;/span&gt;]&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;,[&lt;span class=&quot;st&quot;&gt;'ds'&lt;/span&gt;,&lt;span class=&quot;st&quot;&gt;'y'&lt;/span&gt;]]
ax.plot(tmp[&lt;span class=&quot;st&quot;&gt;'ds'&lt;/span&gt;],tmp[&lt;span class=&quot;st&quot;&gt;'y'&lt;/span&gt;],&lt;span class=&quot;st&quot;&gt;'o'&lt;/span&gt;,alpha&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;fl&quot;&gt;0.4&lt;/span&gt;,color&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'red'&lt;/span&gt;)
ax.set_xlabel(&lt;span class=&quot;st&quot;&gt;'outlier mark'&lt;/span&gt;)
fig.tight_layout()
&lt;span class=&quot;co&quot;&gt;#fig.savefig('.\\_images\\异常值标记.png',dpi=500)&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/802399/201805/802399-20180519144519548-695448508.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/802399/201805/802399-20180519144530410-387551341.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;接下来的计划还没想好，大概率有一篇讲ARIMA系列模型，一篇评估现有各种包的预测效果，一篇讲 Change Point ，一篇将 RNN 和 LSTM。&lt;/p&gt;
&lt;h2 id=&quot;参考文献&quot;&gt;参考文献&lt;/h2&gt;
&lt;p&gt;[1]. 指数平滑法, &lt;a href=&quot;http://connor-johnson.com/2014/02/01/smoothing-with-exponentially-weighted-moving-averages/&quot; class=&quot;uri&quot;&gt;http://connor-johnson.com/2014/02/01/smoothing-with-exponentially-weighted-moving-averages/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[2]. 指数平滑法, &lt;a href=&quot;https://www.jianshu.com/p/6fb0408b3f54&quot; class=&quot;uri&quot;&gt;https://www.jianshu.com/p/6fb0408b3f54&lt;/a&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/802399/201805/802399-20180519144622096-314493124.png&quot;/&gt;&lt;/p&gt;
</description>
<pubDate>Sat, 19 May 2018 06:48:00 +0000</pubDate>
<dc:creator>JSong</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/gasongjian/p/9060327.html</dc:identifier>
</item>
<item>
<title>Web前端原生JavaScript浅谈轮播图 - kevin-tang</title>
<link>http://www.cnblogs.com/kevinTangwen/p/Kevin.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/kevinTangwen/p/Kevin.html</guid>
<description>&lt;p&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;1、&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;一直来说轮播图都是困扰刚进业内小白的一大难点，因为我们不仅需要自己作出一个&lt;strong&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;比较完美的运动框架&lt;/span&gt;&lt;/strong&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;（虽然网上一抓一大把，但是哪有比自己做出来实现的有成就感，不是吗？&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;^_^&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;），还必须需要非常关键性的把握住&lt;strong&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;轮播的原理&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;，&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;这样才能把一个轮播图完美的呈现出来。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;2、废话不多说，请看下面代码&lt;img src=&quot;https://images2018.cnblogs.com/blog/1385046/201805/1385046-20180519131322879-1558807735.png&quot; alt=&quot;&quot; width=&quot;12&quot; height=&quot;12&quot;/&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;47&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;首先我们必须都明确，一个好的运动框架那必须是能够同时承载两种或多种以上需求的，所以我们应该避免单运动框架通过行内样式的局限性，就需要我们知道怎么去获取非行间样式&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;function&lt;/span&gt;&lt;span&gt; getStyle(obj,attr){
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt;&lt;span&gt;(obj.currentStyle){
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; obj.currentStyle[attr];
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;     }&lt;span&gt;else&lt;/span&gt;&lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; getComputedStyle(obj,&lt;span&gt;false&lt;/span&gt;&lt;span&gt;)[attr]
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;以上我们用函数去封装一个获取非行间样式的方法方便我们以后使用&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt; 
&lt;span&gt;11&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;开始封装运动框架&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt; &lt;span&gt;function&lt;/span&gt;&lt;span&gt; move(obj,json,fn){
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;    clearInterval(obj.timer)
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;     obj.timer =setInterval(&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;         &lt;span&gt;var&lt;/span&gt; bStop = &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;var&lt;/span&gt; attr &lt;span&gt;in&lt;/span&gt;&lt;span&gt; json){
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;             &lt;span&gt;var&lt;/span&gt; initialVal = 0&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt;(attr == &quot;opacity&quot;&lt;span&gt;){
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;                 initialVal = parseInt(parseFloat(getStyle(obj,attr))*100&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;             }&lt;span&gt;else&lt;/span&gt;&lt;span&gt;{
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;                 initialVal =&lt;span&gt; parseInt(getStyle(obj,attr));
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;             &lt;span&gt;var&lt;/span&gt; speed = (json[attr]-initialVal)/8;
&lt;span&gt;24&lt;/span&gt;             speed = speed&amp;gt;0?&lt;span&gt;Math.ceil(speed):Math.floor(speed);
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt;(initialVal !=&lt;span&gt; json[attr]){
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;                 bStop = &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt;(attr == &quot;opacity&quot;&lt;span&gt;){
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;                 obj.style.opacity = (initialVal+speed)/100;
&lt;span&gt;30&lt;/span&gt;                 obj.style.filter = &quot;alpha(opacity:&quot;+(initialVal+speed)+&quot;)&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;             }&lt;span&gt;else&lt;/span&gt;&lt;span&gt;{
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;                 obj.style[attr] = initialVal+speed+&quot;px&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt;&lt;span&gt;(bStop){
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt; &lt;span&gt;                clearInterval(obj.timer);
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt;                 fn &amp;amp;&amp;amp;&lt;span&gt; fn();
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt;     },30&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;上面一个运动框架就做好了,现在只需要我们调用即可,当然这种类型的框架还不是最完美的,有些功能还无法实现,所以我上面一直说比较完美,但这已经足够用啦...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;第二步: 轮播图&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;首先我们来写一个简单的html和css&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html &lt;/span&gt;&lt;span&gt;lang&lt;/span&gt;&lt;span&gt;=&quot;en&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;viewport&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Document&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;style &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;text/css&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;        *&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;padding&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 0&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;margin&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 0&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt; &lt;span&gt;        #banner&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt; &lt;span&gt;            width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;     800px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt; &lt;span&gt;            height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;400px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt; &lt;span&gt;            position&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; relative&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt; &lt;span&gt;            margin&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 50px auto&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt; &lt;span&gt;            overflow&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; hidden&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt;         &lt;span&gt;}&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt; &lt;span&gt;        #banner&amp;gt;ul&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt; &lt;span&gt;            position&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; absolute&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt;         &lt;span&gt;}&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt; &lt;span&gt;        #banner&amp;gt;ul&amp;gt;li&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;
&lt;span&gt;21&lt;/span&gt; &lt;span&gt;            float&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; left&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;22&lt;/span&gt; &lt;span&gt;            list-style&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; none&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;23&lt;/span&gt;         &lt;span&gt;}&lt;/span&gt;
&lt;span&gt;24&lt;/span&gt; &lt;span&gt;        #banner&amp;gt;ul&amp;gt;li&amp;gt;img&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;
&lt;span&gt;25&lt;/span&gt; &lt;span&gt;            width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;800px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;26&lt;/span&gt; &lt;span&gt;            height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 400px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;27&lt;/span&gt; &lt;span&gt;            border-radius&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 15px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;28&lt;/span&gt;         &lt;span&gt;}&lt;/span&gt;
&lt;span&gt;29&lt;/span&gt;         
&lt;span&gt;30&lt;/span&gt; &lt;span&gt;        #cut&amp;gt;a&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;
&lt;span&gt;31&lt;/span&gt; &lt;span&gt;            width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 80px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;32&lt;/span&gt; &lt;span&gt;            height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 40px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;33&lt;/span&gt; &lt;span&gt;            background&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;rgba(228,23,221,0.5)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;34&lt;/span&gt; &lt;span&gt;            ;border-radius&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 10px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;35&lt;/span&gt; &lt;span&gt;            text-decoration&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; none&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;36&lt;/span&gt; &lt;span&gt;            text-align&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; center&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;37&lt;/span&gt; &lt;span&gt;            font-weight&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; bold&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;38&lt;/span&gt; &lt;span&gt;            font-size&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 30px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;39&lt;/span&gt; &lt;span&gt;            color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; pink&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;40&lt;/span&gt; &lt;span&gt;            position&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; absolute&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;41&lt;/span&gt; &lt;span&gt;            top&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;180px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;42&lt;/span&gt; &lt;span&gt;            display&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; block&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;43&lt;/span&gt; &lt;span&gt;            line-height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 40px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;44&lt;/span&gt;         &lt;span&gt;}&lt;/span&gt;
&lt;span&gt;45&lt;/span&gt; &lt;span&gt;        #cut&amp;gt;a:nth-child(2)&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;
&lt;span&gt;46&lt;/span&gt; &lt;span&gt;            right&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;47&lt;/span&gt;         &lt;span&gt;}&lt;/span&gt;
&lt;span&gt;48&lt;/span&gt;         
&lt;span&gt;49&lt;/span&gt; &lt;span&gt;        #btn&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;
&lt;span&gt;50&lt;/span&gt; &lt;span&gt;            position&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; absolute&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;51&lt;/span&gt; &lt;span&gt;            top&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 350px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;52&lt;/span&gt; &lt;span&gt;            left&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 350px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;53&lt;/span&gt;         &lt;span&gt;}&lt;/span&gt;
&lt;span&gt;54&lt;/span&gt; &lt;span&gt;        #btn&amp;gt;a&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;
&lt;span&gt;55&lt;/span&gt; &lt;span&gt;            width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 20px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;56&lt;/span&gt; &lt;span&gt;            height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 20px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;57&lt;/span&gt; &lt;span&gt;            border-radius&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 50%&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;58&lt;/span&gt; &lt;span&gt;            background&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;yellowgreen&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;59&lt;/span&gt; &lt;span&gt;            margin-right&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;6px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;60&lt;/span&gt; &lt;span&gt;            float&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; left&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;61&lt;/span&gt;         &lt;span&gt;}&lt;/span&gt;
&lt;span&gt;62&lt;/span&gt; &lt;span&gt;        #btn&amp;gt;.active&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;background&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;yellow&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;
&lt;span&gt;63&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;64&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;65&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;66&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;banner&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;67&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;ul&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;68&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;img &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;images/1.jpg&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;69&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;img &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;images/2.jpg&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;70&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;img &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;images/3.jpg&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;71&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;img &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;images/4.jpg&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;72&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;img &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;images/5.jpg&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;73&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;ul&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;74&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;cut&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;75&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;a &lt;/span&gt;&lt;span&gt;href&lt;/span&gt;&lt;span&gt;=&quot;##&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;&amp;lt;/a&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;76&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;a &lt;/span&gt;&lt;span&gt;href&lt;/span&gt;&lt;span&gt;=&quot;##&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&amp;gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;77&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;78&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;btn&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;79&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;a &lt;/span&gt;&lt;span&gt;href&lt;/span&gt;&lt;span&gt;=&quot;##&quot;&lt;/span&gt;&lt;span&gt; class&lt;/span&gt;&lt;span&gt;=&quot;active&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;80&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;a &lt;/span&gt;&lt;span&gt;href&lt;/span&gt;&lt;span&gt;=&quot;##&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;81&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;a &lt;/span&gt;&lt;span&gt;href&lt;/span&gt;&lt;span&gt;=&quot;##&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;82&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;a &lt;/span&gt;&lt;span&gt;href&lt;/span&gt;&lt;span&gt;=&quot;##&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;83&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;a &lt;/span&gt;&lt;span&gt;href&lt;/span&gt;&lt;span&gt;=&quot;##&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;84&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;85&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;86&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;87&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;88&lt;/span&gt; &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;上面我的一个简单的布局，我就不多说了，下面请看我们的关键轮播图吧&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;无缝轮播图---&amp;gt; 当我们拿到需求时，我们会要立马想到无缝轮播是一种图片从左至右的滑动式切换，那肯定是通过切换ul（按我上述的HTML来说）的left值从而达到效果的，请看下面代码&lt;img src=&quot;https://images2018.cnblogs.com/blog/1385046/201805/1385046-20180519131722179-1913856366.png&quot; alt=&quot;&quot; width=&quot;15&quot; height=&quot;15&quot;/&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;var&lt;/span&gt; oBan =document.getElementById(&quot;banner&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;var&lt;/span&gt; oli =oBan.getElementsByTagName(&quot;li&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;var&lt;/span&gt; oul= oBan.getElementsByTagName(&quot;ul&quot;)[0&lt;span&gt;];
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;var&lt;/span&gt; index = 0&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;var&lt;/span&gt; timer = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;想要实现无缝轮播，关键就是使用一种偷梁换柱的障眼法去掩盖用户的视觉差&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;var&lt;/span&gt; li =oli[0].cloneNode(&lt;span&gt;true&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;oul.appendChild(li);
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; 
&lt;span&gt;11&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;为了方便以后的代码维护&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt; &lt;span&gt;var&lt;/span&gt; iw =oli[0&lt;span&gt;].offsetWidth;
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; oul.style.width =iw*oli.length+&quot;px&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; 
&lt;span&gt;15&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;轮播原理&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt; &lt;span&gt;function&lt;/span&gt;&lt;span&gt; cutImg(){
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;     move(oul,{left:-index*&lt;span&gt;iw});
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;当图片切换时，需要下面的小店同步进行切换&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;var&lt;/span&gt; i = 0;i&amp;lt;oBtn.length;i++&lt;span&gt;){
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;         oBtn[i].className = &quot;&quot;&lt;span&gt; ; 
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;     oBtn[index&amp;gt;oBtn.length-1?0:index].className = &quot;active&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; 
&lt;span&gt;25&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;轮播的自动播放&lt;/span&gt;
&lt;span&gt;26&lt;/span&gt; &lt;span&gt;function&lt;/span&gt;&lt;span&gt; autoP(){
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;这一步的目的在于当图片处于最后一张图时，我们怎么通过一个障眼法使图片变成我们想要的下一张图&lt;/span&gt;
&lt;span&gt;28&lt;/span&gt;     timer=setInterval(&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;(index == oli.length-1&lt;span&gt;){
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;            index = 1&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;            oul.style.left = 0&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;         }&lt;span&gt;else&lt;/span&gt;&lt;span&gt;{
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt;            index++
&lt;span&gt;34&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt; &lt;span&gt;        cutImg()
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt;     },3000&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt; &lt;span&gt;autoP()
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt;     
&lt;span&gt;40&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;当我们鼠标移上时，轮播停止，鼠标移开轮播继续&lt;/span&gt;
&lt;span&gt;41&lt;/span&gt;     oBan.onmouseover = &lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt; &lt;span&gt;        clearInterval(timer);
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt;     oBan.onmouseout = &lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt; &lt;span&gt;       autoP();
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt;     
&lt;span&gt;48&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 轮播图中的点击小点图片切换&lt;/span&gt;
&lt;span&gt;49&lt;/span&gt;     &lt;span&gt;var&lt;/span&gt; oBtn = document.getElementById(&quot;btn&quot;).getElementsByTagName(&quot;a&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;50&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;var&lt;/span&gt; i = 0;i&amp;lt;oBtn.length;i++&lt;span&gt;){
&lt;/span&gt;&lt;span&gt;51&lt;/span&gt;        oBtn[i].onclick = &lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
&lt;/span&gt;&lt;span&gt;52&lt;/span&gt;            oBtn[i].iNow =&lt;span&gt; i;
&lt;/span&gt;&lt;span&gt;53&lt;/span&gt;            &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;var&lt;/span&gt; j = 0;j&amp;lt;oBtn.length;j++&lt;span&gt;){
&lt;/span&gt;&lt;span&gt;54&lt;/span&gt;                oBtn[j].className = &quot;&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;55&lt;/span&gt; &lt;span&gt;           }
&lt;/span&gt;&lt;span&gt;56&lt;/span&gt;            &lt;span&gt;this&lt;/span&gt;.className =&quot;active&quot;&lt;span&gt; ;
&lt;/span&gt;&lt;span&gt;57&lt;/span&gt;            move(oul,{left:-&lt;span&gt;this&lt;/span&gt;.iNow*&lt;span&gt;iw})
&lt;/span&gt;&lt;span&gt;58&lt;/span&gt; &lt;span&gt;       }
&lt;/span&gt;&lt;span&gt;59&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;60&lt;/span&gt;     
&lt;span&gt;61&lt;/span&gt;    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 轮播图中左右切换按钮切换&lt;/span&gt;
&lt;span&gt;62&lt;/span&gt;     &lt;span&gt;var&lt;/span&gt; oCut =document.getElementById(&quot;cut&quot;).getElementsByTagName(&quot;a&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;63&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;点击右边按钮切换到第一张图时，我们下一步想要得到的倒数第二张图&lt;/span&gt;
&lt;span&gt;64&lt;/span&gt;     oCut[1].onclick = &lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
&lt;/span&gt;&lt;span&gt;65&lt;/span&gt;          &lt;span&gt;if&lt;/span&gt;(index == oli.length-1&lt;span&gt;){
&lt;/span&gt;&lt;span&gt;66&lt;/span&gt;            index = 1&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;67&lt;/span&gt;            oul.style.left = 0&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;68&lt;/span&gt;         }&lt;span&gt;else&lt;/span&gt;&lt;span&gt;{
&lt;/span&gt;&lt;span&gt;69&lt;/span&gt;            index++
&lt;span&gt;70&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;71&lt;/span&gt; &lt;span&gt;        cutImg()
&lt;/span&gt;&lt;span&gt;72&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;73&lt;/span&gt;     
&lt;span&gt;74&lt;/span&gt;    
&lt;span&gt;75&lt;/span&gt;     oCut[0].onclick = &lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
&lt;/span&gt;&lt;span&gt;76&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;(index == 0&lt;span&gt;){
&lt;/span&gt;&lt;span&gt;77&lt;/span&gt;            index = oli.length -2&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;78&lt;/span&gt;            oul.style.left = -(oli.length-1)*&lt;span&gt;iw;
&lt;/span&gt;&lt;span&gt;79&lt;/span&gt;         }&lt;span&gt;else&lt;/span&gt;&lt;span&gt;{
&lt;/span&gt;&lt;span&gt;80&lt;/span&gt;            index--&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;81&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;82&lt;/span&gt; &lt;span&gt;         cutImg()
&lt;/span&gt;&lt;span&gt;83&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;84&lt;/span&gt;     
&lt;span&gt;85&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;这样一个无缝轮播图就做好啦！！&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上面是我对轮播图的一个基本构思和大致框架，希望融合大家各位技术大牛们&lt;img alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;的思想加以优化，谢谢大家。。。。&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Sat, 19 May 2018 05:22:00 +0000</pubDate>
<dc:creator>kevin-tang</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/kevinTangwen/p/Kevin.html</dc:identifier>
</item>
<item>
<title>testng实现场景恢复 - helentester</title>
<link>http://www.cnblogs.com/helenMemery/p/9059369.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/helenMemery/p/9059369.html</guid>
<description>&lt;p&gt;自动化测试过程中存在很多的不稳定性，例如网络的不稳定，浏览器无响应等等，这些失败往往并不是产品中的错误。那么这时我们需要对执行失败的场景恢复重新执行，确认其是否确实失败。 &lt;/p&gt;
&lt;p&gt;以前使用QTP的时候也使用了场景恢复，那么testng的场景恢复怎么做呢？&lt;/p&gt;
&lt;p&gt;一、查看testng现在接口&lt;/p&gt;
&lt;p&gt;首先，我们来看一下TestNG的IRetryAnalyzer接口（因为我的项目是用maven管理，所以接口位置是：Maven Dependencies－testng.jar－org.testng－IRetryAnalyzer.class）&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; org.testng;

&lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * Interface to implement to be able to have a chance to retry a failed test.
 *
 * &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; tocman@gmail.com (Jeremie Lenfant-Engelmann)
 *
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt;&lt;span&gt; IRetryAnalyzer {

  &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
   * Returns true if the test method has to be retried, false otherwise.
   *
   * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; result The result of the test method that just ran.
   * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;&lt;span&gt; true if the test method has to be retried, false otherwise.
   &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
  &lt;span&gt;public&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt;&lt;span&gt; retry(ITestResult result);
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这个接口只有一个方法:&lt;/p&gt;
&lt;p&gt;　　public boolean retry(ITestResult result);&lt;/p&gt;
&lt;p&gt;　　一旦测试方法失败，就会调用此方法。如果您想重新执行失败的测试用例，那么就让此方法返回true，如果不想重新执行测试用例，则返回false。&lt;/p&gt;

&lt;p&gt;二、实现testng失败重跑的接口IRetryAnalyzer&lt;/p&gt;
&lt;p&gt; 　　添加类TestngRetry，实现如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; Helen 
 * @date 2018年5月19日  
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; common;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.testng.IRetryAnalyzer;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.testng.ITestResult;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.testng.Reporter;

&lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * 描述：重写testngRetry接口，设置场景恢复
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; TestngRetry &lt;span&gt;implements&lt;/span&gt;&lt;span&gt; IRetryAnalyzer {
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; retryCount = 1&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; maxRetryCount = 3;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 最大重新执行场景的次数&lt;/span&gt;

    &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;
     * 场景恢复设置，重新执行失败用例的次数
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt;&lt;span&gt; retry(ITestResult result) {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (retryCount &amp;lt;=&lt;span&gt; maxRetryCount) {
            String message &lt;/span&gt;= &quot;Retry for [&quot; + result.getName() + &quot;] on class [&quot; +&lt;span&gt; result.getTestClass().getName()
                    &lt;/span&gt;+ &quot;] Retry &quot; + retryCount + &quot; times&quot;&lt;span&gt;;
            Reporter.setCurrentTestResult(result);
            Reporter.log(message);&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;报告中输出日志&lt;/span&gt;
            retryCount++&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
        }
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
    }

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;三、添加监听&lt;/p&gt;
&lt;p&gt;　　这时我们还要通过接用IAnnotationTransformer来实现监听，添加类TestngRetryListener，代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; Helen 
 * @date 2018年5月19日  
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; common;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.lang.reflect.Constructor;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.lang.reflect.Method;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.testng.IAnnotationTransformer;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.testng.IRetryAnalyzer;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.testng.annotations.ITestAnnotation;

&lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * 描述：实现IAnnotationTransformer接口，设置监听
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; TestngRetryListener &lt;span&gt;implements&lt;/span&gt;&lt;span&gt; IAnnotationTransformer{

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; transform(ITestAnnotation annotation, Class testClass, Constructor testConstructor, Method testMethod) {
        IRetryAnalyzer retry &lt;/span&gt;=&lt;span&gt; annotation.getRetryAnalyzer();  
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (retry == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {  
            annotation.setRetryAnalyzer(TestngRetry.&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;);  
        } 
        
    }

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;四、配置testng监听器&lt;/p&gt;
&lt;p&gt;最后，我们只要在testng.xml里面设置监听就可以了，在testng.xml中添加如下配置：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;listeners&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 添加场景恢复的监听器 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;listener &lt;/span&gt;&lt;span&gt;class-name&lt;/span&gt;&lt;span&gt;=&quot;common.TestngRetryListener&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;listener&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;listeners&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;五、结果展示&lt;/p&gt;
&lt;p&gt;　　执行完结果后，查看测试报告，测试是有失败的。&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1087925/201805/1087925-20180519120225444-18268397.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　在 log输出中，我们可以看到TClassManageTest中的方法inputClassList是重跑了三次的。&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1087925/201805/1087925-20180519120323475-127508716.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

</description>
<pubDate>Sat, 19 May 2018 04:06:00 +0000</pubDate>
<dc:creator>helentester</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/helenMemery/p/9059369.html</dc:identifier>
</item>
<item>
<title>Linux用户管理 - 人生不如戏</title>
<link>http://www.cnblogs.com/fu-yong/p/9059784.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/fu-yong/p/9059784.html</guid>
<description>&lt;h2&gt;用户管理&lt;/h2&gt;
&lt;h3&gt;添加用户&lt;/h3&gt;
&lt;p&gt;useradd或者adduser。其实adduser是useradd的一个软连接。以useradd为例，其用法为 useradd  [option]  USERNAME&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
[root@compute ~]# ll `which adduser`
lrwxrwxrwx. 1 root root 7 5月  26 14:21 /usr/sbin/adduser -&amp;gt; useradd
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;-u  指定新添加用户的UID，不过根据规定，普通用户的UID必须大于499且不能和已存在的UID重复。&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
[root@compute ~]# useradd -u 1010 user1
[root@compute ~]# tail -1 /etc/passwd
user1:x:1010:1010::/home/user1:/bin/bash
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;-g 指定新添加用户的基本组，可以使用GID也可以使用组名来为其指明基本组（可以用id命令来查看用户信息）&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
[root@compute ~]# useradd -g root user2
[root@compute ~]# id user2
uid=1011(user2) gid=0(root) 组=0(root)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;-G 指定新添加的用户的附加组，附加组可以有多个，多个附加组之间用逗号隔开。&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;36&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
[root@compute ~]# useradd -G user1,root user3
[root@compute ~]# id user3
uid=1012(user3) gid=1012(user3) 组=1012(user3),0(root),1010(user1)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;-d 为新添加的用户指定家目录，默认情况下家目录是/home下的与用户名同名的目录。&lt;/p&gt;
&lt;p&gt;-M 不为新用户创建家目录。&lt;/p&gt;
&lt;p&gt;-s 为新添加的用户指定默认的shell。（系统中有一个nologin的shell可以禁止某账户登入）&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
[root@compute ~]# useradd -s /sbin/nologin user4
[root@compute ~]# su user4
This account is currently not available.
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可以使用 echo $SHELL 来查看当前用户的shell&lt;/p&gt;
&lt;p&gt;-r 添加新用户为系统用户，系统用户的UID在1-499之间，一般不能登入，没有家目录。&lt;/p&gt;
&lt;p&gt;注：该命令添加的用户的部分默认参数（比如用户的默认shell）在/etc/default/useradd文件中。&lt;/p&gt;
&lt;h3&gt;查看用户信息&lt;/h3&gt;
&lt;p&gt;用id命令可以查看用户信息，用法：id  [option]  [USERNAME]，不指定用户名时默认用户为当前用户。&lt;/p&gt;
&lt;p&gt;-u 查看UID&lt;/p&gt;
&lt;p&gt;-g 查看基本组的GID&lt;/p&gt;
&lt;p&gt;-G 查看所有组的GIO&lt;/p&gt;
&lt;p&gt;-n 和上面的选项组合使用，用于显示名称，而非id号&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
[root@compute ~]# id -u user1
1010
[root@compute ~]# id -un user1
user1
[root@compute ~]# id -G user3
1012 0 1010
[root@compute ~]# id -Gn user3
user3 root user1
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;finger命令也可以查看用户相关信息&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
[root@compute ~]# finger user1
Login: user1                      Name: 
Directory: /home/user1                  Shell: /bin/bash
Never logged in.
No mail.
No Plan.
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;删除用户&lt;/h3&gt;
&lt;p&gt;使用userdel命令来删除用户，不过值得注意的是userdel命令默认情况下是不会删除用户的家目录。&lt;/p&gt;
&lt;p&gt; userdel的用法：userdel  [option]  USERNAME&lt;/p&gt;
&lt;p&gt;-r 同时删除用户的家目录。&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
[root@compute ~]# ls /home
boost  compute  EasyDrcom  libpcap  lost+found  user1  user2  user3  user4
[root@compute ~]# userdel user1
userdel：组“user1”没有移除，因为它包含其它成员。
[root@compute ~]# userdel -r user2
[root@compute ~]# ls /home
boost  compute  EasyDrcom  libpcap  lost+found  user1  user3  user4
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;修该用户信息&lt;/h3&gt;
&lt;p&gt;使用usermod来修改用户的账户信息，其用法同useradd。具体实例如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;40&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
[root@compute ~]# id user3
uid=1012(user3) gid=1012(user3) 组=1012(user3),0(root),1010(user1)
[root@compute ~]# usermod -u 505 user3
[root@compute ~]# id user3
uid=505(user3) gid=1012(user3) 组=1012(user3),0(root),1010(user1)
[root@compute ~]# finger user3
Login: user3                      Name: 
Directory: /home/user3                  Shell: /bin/bash
Never logged in.
No mail.
No Plan.
[root@compute ~]# usermod -g 0 -s /bin/tcsh user3 #这里该的基本组必须事先存在
[root@compute ~]# !id
id user3
uid=505(user3) gid=0(root) 组=0(root),1010(user1)
[root@compute ~]# !fing
finger user3
Login: user3                      Name: 
Directory: /home/user3                  Shell: /bin/tcsh
Never logged in.
No mail.
No Plan.
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;-l 参数用于修改用户名&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;34&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
[root@compute ~]# usermod -l u3 user3
[root@compute ~]# id u3
uid=505(u3) gid=0(root) 组=0(root),1010(user1)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注：如果使用-G为用户修改附加组的话，默认情况下会覆盖原有的附加组，如果只想追加新的附加组可以使用 -aG 其中a表示追加。使用 -d 修改用户家目录的时候最好用再配合 -m 使用，其意思是修改家目录的同时把原来家目录下的文件复制一份到目的家目录。&lt;/p&gt;
&lt;p&gt;修改用户的登入shell还可以使用 chsh （change shell）命令。其用法为 chsh  USERNAME&lt;/p&gt;
&lt;p&gt;可以用pwck来检查用户账号的完整性。&lt;/p&gt;
&lt;h3&gt;修改用户密码&lt;/h3&gt;
&lt;p&gt;使用passwd命令来修改用户的密码，用法：passwd  [USERNAME]&lt;/p&gt;
&lt;p&gt;对于普通用户来说，只能使用passwd命令，用来修改自己的密码。对于管理员来说，不仅可以使用passwd来修改自己的密码，还可以使用passwd  USERNAME 命令来修改别人的密码。&lt;/p&gt;
&lt;p&gt;passwd可以使用 --stdin 参数来指明从标准输入来获取密码。&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
[root@compute ~]# passwd user3
更改用户 user3 的密码 。
新的 密码：
无效的密码： 密码未通过字典检查 - 过于简单化/系统化
重新输入新的 密码：
passwd：所有的身份验证令牌已经成功更新。
[root@compute ~]# echo &quot;123456789&quot; | passwd user3 --stdin
更改用户 user3 的密码 。
passwd：所有的身份验证令牌已经成功更新。
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;-d 参数可以删除用户的密码。&lt;/p&gt;
&lt;h2&gt;组管理&lt;/h2&gt;
&lt;h3&gt;组的创建&lt;/h3&gt;
&lt;p&gt;组的创建使用groupadd命令，可以使用 -g 指定GID，-r表明改组为系统组。具体用法和useradd类似，以下关于组的操作命令的用法均可参考关于用户操作的命令的用法。&lt;/p&gt;
&lt;h3&gt;组信息修改&lt;/h3&gt;
&lt;p&gt;groupmod 命令用于修改组信息，-g 修改GID，-n 修改组名。&lt;/p&gt;
&lt;h3&gt;组的删除&lt;/h3&gt;
&lt;p&gt;groupdel 命令用于删除一个组&lt;/p&gt;
&lt;h3&gt;组添加密码&lt;/h3&gt;
&lt;p&gt;使用 gpasswd 命令用于修改组密码。组密码主要用于临时改变用户所属的组。&lt;/p&gt;
&lt;p&gt;比如下面的代码中，user3用户临时使用了user4组创建了一个b.txt文件&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;39&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
[root@compute ~]# usermod -l user3 u3
[root@compute ~]# gpasswd user4
正在修改 user4 组的密码
新密码：
请重新输入新密码：
[root@compute ~]# su - user3
上一次登录：五 7月 28 06:29:18 CST 2017pts/1 上
[user3@compute ~]$ touch a.txt
[user3@compute ~]$ id
uid=505(user3) gid=0(root) 组=0(root),1010(user1) 环境=unconfined_u:unconfined_r:unconfined_t:s0-s0:c0.c1023
[user3@compute ~]$ ll
总用量 0
-rw-r--r--. 1 user3 root 0 7月  28 06:30 a.txt
[user3@compute ~]$ newgrp user4
密码：
[user3@compute ~]$ touch b.txt
[user3@compute ~]$ id
uid=505(user3) gid=1013(user4) 组=1013(user4),0(root),1010(user1) 环境=unconfined_u:unconfined_r:unconfined_t:s0-s0:c0.c1023
[user3@compute ~]$ ll
总用量 0
-rw-r--r--. 1 user3 root  0 7月  28 06:30 a.txt
-rw-r--r--. 1 user3 user4 0 7月  28 06:31 b.txt
[user3@compute ~]$ exit
exit
[user3@compute ~]$ id
uid=505(user3) gid=0(root) 组=0(root),1010(user1) 环境=unconfined_u:unconfined_r:unconfined_t:s0-s0:c0.c1023
[user3@compute ~]$ exit
logout
[root@compute ~]#
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注：上面的newgrp用于临时切换基本组，当这个临时组用完要退出时使用exit命令。&lt;/p&gt;
&lt;h2 id=&quot;usermod&quot;&gt;usermod 示例 – 将一个已有用户增加到一个已有用户组中&lt;span class=&quot;anchorlink&quot;&gt;&lt;a href=&quot;https://cnzhx.net/blog/linux-add-user-to-group/#usermod&quot; target=&quot;_blank&quot;&gt;¶&lt;/a&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;将一个已有用户 cnzhx 增加到一个已有用户组 apache 中，使此用户组成为该用户的附加用户组，可以使用带 -a 参数的 &lt;code&gt;usermod&lt;/code&gt;  指令。-a 代表 append， 也就是将用户添加到新用户组中而不必离开原有的其他用户组。不过需要与 -G 选项配合使用：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
# usermod -a -G apache cnzhx
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果要同时将 cnzhx 的主要用户组改为 apache，则直接使用 -g 选项：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
# usermod -g apache cnzhx
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果要将一个用户从某个组中删除，则&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
gpasswd -d user group
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;但是这个时候需要保证 group 不是 user 的主组。&lt;/p&gt;
&lt;h2&gt;手动创建用户&lt;/h2&gt;
&lt;p&gt;这部分需要了解linux保存用户的几个配置文件。&lt;/p&gt;
&lt;p&gt;/etc/passwd —— 账号文件&lt;/p&gt;
&lt;p&gt;/etc/shadow —— 密码文件&lt;/p&gt;
&lt;p&gt;/etc/group—— 组信息文件&lt;/p&gt;
&lt;p&gt;/etc/gshadow —— 组密码文件&lt;/p&gt;
&lt;p&gt;/etc/skel —— 用户默认家目录的备份文件&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
[root@compute demo]# tail -1 /etc/passwd
user3:x:505:0::/home/user3:/bin/tcsh
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;passwd文件中的配置规则如下：&lt;/p&gt;
&lt;p&gt;用户名：密码占位符：用户ID：组ID：一般的信息：家目录：默认登入shell&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
[root@compute demo]# tail -1 /etc/passwd
user3:x:505:0::/home/user3:/bin/tcsh
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;shadow文件的配置规则如下：&lt;/p&gt;
&lt;p&gt;账号&lt;/p&gt;
&lt;p&gt;加密的密码，注意前三个字符 &amp;amp;6&amp;amp; 代表着密码的加密方式，后面会用到。&lt;/p&gt;
&lt;p&gt;最后一次修改密码的日期，该位是从1970年1月1号开始到上次密码修改的天数，0表示用户下一次登入需要改密码，空白表示密码年龄功能被禁用。&lt;/p&gt;
&lt;p&gt;密码最小年龄，0或空白表示没有最小年龄。&lt;/p&gt;
&lt;p&gt;密码最大年龄，空白表示没有密码最大年龄。超过密码最大年龄还未改密码将进入密码警告时间段。&lt;/p&gt;
&lt;p&gt;密码警告时间段，该阶段会提示用户修改密码，0或空白表示没有密码警告时间段，超过密码警告时间段将密码禁用期。&lt;/p&gt;
&lt;p&gt;密码禁用期，该阶段会强制用户修改密码，不修改就无法登入。空白表示没有禁用期，超过将进入账户过期期。&lt;/p&gt;
&lt;p&gt;账户过期期，账户过期后该账户将无法登入，该位与上面的密码禁用期有所不同，密码禁用期超过后用户只要修改密码后就可以重新登入，而账户过期永远无法登入，除非管理员解封。&lt;/p&gt;
&lt;p&gt;保留位，该字段保留未用。&lt;/p&gt;
&lt;p&gt;group文件的配置规则如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
[root@compute demo]# tail -1 /etc/group
user4:x:1013:
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;组名：密码占位符：组ID：以该组为额外组的组内用户&lt;/p&gt;
&lt;p&gt;有上面这些基本知识后现在正式开始手动添加用户&lt;/p&gt;
&lt;p&gt;首先添加账户：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
[root@compute demo]# echo &quot;user5:x:5000:5000::/home/user5:/bin/bash&quot; &amp;gt;&amp;gt; /etc/passwd
[root@compute demo]# tail -1 !$
tail -1 /etc/passwd
user5:x:5000:5000::/home/user5:/bin/bash
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;添加账户密码（不同的Linux发行版系统使用的密码加密方式不同，加密方式的查看方式见上面红色字体，在我的电脑上为6号加密方式即SHA-512加密）：&lt;/p&gt;
&lt;p&gt; 目前我还没找到能加密sha512（带salt）的加密工具，于是自己用c写了一个加密程序。&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;41&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
#define _XOPEN_SOURCE
#include &amp;lt;unistd.h&amp;gt;
#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;string.h&amp;gt;
int main()
{
        char salt[20]={0};
        char key[100]={0};
        char tmp[20];
        int id;
        int length=0;
        printf(&quot;please choose the encrypt algorithm:\n&quot;);
        printf(&quot;1 : MD5\n&quot;
               &quot;5 : SHA-256\n&quot;
               &quot;6 : SHA-512\n&quot;);
        scanf(&quot;%d&quot;,&amp;amp;id);
        salt[0]='$';
        salt[2]='$';
        salt[1]=id+'0';

        printf(&quot;please input salt(no more than 8 characters):&quot;);
        scanf(&quot;%s&quot;,tmp);
        length=strlen(tmp);
        strcpy(salt+3, tmp);
        salt[3+length]='$';

        printf(&quot;please input the key:&quot;);
        scanf(&quot;%s&quot;,key);

        printf(&quot;%s\n&quot;,crypt(key, salt));
        return 0;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;编译命令：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
[root@compute demo]# gcc encrypt.c -o encrypt -lcrypt
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注：上面的encrypt.c为源文件，encrypt为输出程序，-lcrypt为用到的加密库。&lt;/p&gt;
&lt;p&gt;现在可以用这个程序来生成密码了。&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;34&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
[root@compute demo]# ./encrypt 
please choose the encrypt algorithm:
: MD5
: SHA-256
: SHA-512
please input salt(no more than 8 characters):1234abcd
please input the key:password
$6$1234abcd$RQ0et4pXYf990f./lJNcInZtANef5Mw0GSA0ftwDYKZEViukdnf9bM/PALLnGuSv91L/9bWBkFBQM4Os8CMYk/
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这里我们运用自己写的加密工具生成了一个salt为1234abcd，密码为password的采用SHA-512加密的 加密密码 $6$1234abcd$RQ0et4pXYf990f./lJNcInZtANef5Mw0GSA0ftwDYKZEViukdnf9bM/PALLnGuSv91L/9bWBkFBQM4Os8CMYk/ 。&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
[root@compute demo]# echo 'user5:$6$1234abcd$RQ0et4pXYf990f./lJNcInZtANef5Mw0GSA0ftwDYKZEViukdnf9bM/PALLnGuSv91L/9bWBkFBQM4Os8CMYk/:17374:0:99999:7:::' &amp;gt;&amp;gt; /etc/shadow
[root@compute demo]# tail -1 !$
tail -1 /etc/shadow
user5:$6$1234abcd$RQ0et4pXYf990f./lJNcInZtANef5Mw0GSA0ftwDYKZEViukdnf9bM/PALLnGuSv91L/9bWBkFBQM4Os8CMYk/:17374:0:99999:7:::
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;到此为止添加密码这一步已经做完。&lt;/p&gt;

&lt;p&gt;在group中加入其基本组&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
[root@compute demo]# echo &quot;user5:x:5000:&quot; &amp;gt;&amp;gt; /etc/group
[root@compute demo]# tail -1 /etc/group
user5:x:5000:
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;最后在gshadow中添加组信息（为了方便起见，我们暂时不添加组密码，有兴趣的同学可以自己添加，添加方式和添加用户密码相同，把加密后的密码替换！即可）：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
[root@compute demo]# echo &quot;user5:!::&quot; &amp;gt;&amp;gt; /etc/gshadow
-bash: :: unrecognized history modifier
[root@compute demo]# echo 'user5:!::' &amp;gt;&amp;gt; /etc/gshadow
[root@compute demo]# tail -1 /etc/gshadow
user5:!::
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注：上面可以看到我使用echo &quot;user5:!::&quot; &amp;gt;&amp;gt; /etc/gshadow命令时报错了，原因是bash支持命令展开，而 ! 是展开的一种修饰前缀，因此bash试图将 :: 进行展开，这里我们将双引号改为单引号即可，因为单引号为强引用，明确告诉bash不需要对字符串中的内容进行展开。&lt;/p&gt;
&lt;p&gt;最后一步，复制家目录：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
[root@compute demo]# cp -r /etc/skel /home/user5
[root@compute demo]# ll /home/
总用量 496
drwx------.  3 user3   root      4096 7月  28 06:31 user3
drwx------.  3 user4   user4     4096 7月  28 00:29 user4
drwxr-xr-x.  3 root    root      4096 7月  30 01:48 user5
[root@compute demo]# chown -R user5:user5 /home/user5
[root@compute demo]# chmod -R --reference=/home/user4 /home/user5
[root@compute demo]# ll /home/
总用量 496
drwx------.  3 user3   root      4096 7月  28 06:31 user3
drwx------.  3 user4   user4     4096 7月  28 00:29 user4
drwx------.  3 user5   user5     4096 7月  30 01:48 user5
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;到此为止，user5用户就添加完成了，现在可以用user5用户登入了，密码就是刚才设置的password&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;34&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
[root@compute demo]# su -l user5
上一次登录：日 7月 30 01:53:57 CST 2017pts/1 上
[user5@compute ~]$ touch hello.c
[user5@compute ~]$ ll
总用量 0
-rw-rw-r--. 1 user5 user5 0 7月  30 01:54 hello.c
[user5@compute ~]$ pwd
/home/user5
&lt;/pre&gt;&lt;/div&gt;
</description>
<pubDate>Sat, 19 May 2018 03:28:00 +0000</pubDate>
<dc:creator>人生不如戏</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/fu-yong/p/9059784.html</dc:identifier>
</item>
<item>
<title>Spring 数据处理框架的演变 - 腾讯云+社区</title>
<link>http://www.cnblogs.com/qcloud1001/p/9056809.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/qcloud1001/p/9056809.html</guid>
<description>&lt;p&gt;&lt;strong&gt;欢迎大家前往&lt;a href=&quot;https://cloud.tencent.com/developer/?fromSource=waitui&quot;&gt;腾讯云+社区&lt;/a&gt;，获取更多腾讯海量技术实践干货哦~&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;定量分析的成败在很大程度上取决于采集，存储和处理数据的能力。若能及时地向业务决策者提供深刻并可靠的数据解读，大数据项目就会有更多机会取得成功。&lt;/p&gt;
&lt;p&gt;如今，为数据处理设计合适的架构需要下很大工夫。数据处理主要包括 3 个方面：&lt;/p&gt;
&lt;ul class=&quot;ul-level-0&quot;&gt;&lt;li&gt;&lt;strong&gt;批处理&lt;/strong&gt;：批量处理大量的静态数据。这一方式一般是分布式并且可扩展的。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;实时处理&lt;/strong&gt;：实时处理主要处理连续且无尽的的数据流。这些数据流也是分布式的，且速度很快。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;混合计算模型&lt;/strong&gt;：该模型是批处理和实时处理的结合，可以处理大量和高速数据。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;大数据项目的工程非常耗时，并且要利用合适的技能来解决数据采集和处理的问题，因为这些问题的解决对大多数方案来说都是必不可少的。Pivotal 曾推出了 Spring XD 和 Spring Cloud Dataflow 来减少大数据工程的开销。本文将简要介绍 Spring XD，以及该技术的最新版本，即 Spring Cloud Data Flow 的各方面细节。&lt;/p&gt;
&lt;h2&gt;Spring XD&lt;/h2&gt;
&lt;p&gt;Spring XD 是第一轮技术创新的产物。它为一些常见的与数据处理有关的任务提供了一种易用的解决方案。Spring XD 建立在了历经考验的 Spring 技术之上，并为数据摄入、移动、处理、深度分析、流处理和批处理提供了支持。&lt;/p&gt;
&lt;p&gt;Spring XD 为实时处理以及批处理提供了一个精巧、稳定，且可扩展的框架。用 Spring XD 来采集数据，并将数据从各种数据源移到目标会更加容易。&lt;/p&gt;
&lt;p&gt;Spring XD 架构在传统企业级 ETL（数据抽取、转换与加载的流程），实时分析和数据科学项目工作台的创建中得到了广泛应用。&lt;/p&gt;
&lt;h3&gt;基于 Spring XD 的架构&lt;/h3&gt;
&lt;p&gt;下图描述了基于 Spring XD 的架构。在下图这些模块的帮助下，我们可以创建、运行、部署并销毁数据管道，并对管道中的数据进行各种各样的处理。&lt;/p&gt;
&lt;div class=&quot;image-block&quot;&gt;&lt;img src=&quot;https://ask.qcloudimg.com/draft/1094052/355iti3pvi.png?imageView2/0/w/1620&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;p&gt;Spring XD 的主要组件是 Admin 和 Container。&lt;/p&gt;
&lt;ol class=&quot;ol-level-0&quot;&gt;&lt;li&gt;Admin UI 用于向服务器发送要执行某个任务的请求，然后服务器会调用关联的模块执行所请求的任务。在此，一个模块是构建 Spring 应用程序上下文的组件之一。&lt;/li&gt;
&lt;li&gt;所有模块都需要一个 XD 容器才能运行并执行该模块执行的相关任务。&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;以下是 Spring XD 体系结构中的一些关键模块。&lt;/p&gt;
&lt;ul class=&quot;ul-level-0&quot;&gt;&lt;li&gt;&lt;strong&gt;数据源（Source）&lt;/strong&gt;：一个数据流的创建总会从创建数据源模块开始。数据源可以使用轮询机制或事件驱动机制获得数据，然后只会提供数据的输出。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;数据处理器（Processor）&lt;/strong&gt;：它会接收输入消息，并在经过某些类型的处理后产生输出消息。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;数据接收器（Sink）&lt;/strong&gt;：顾名思义，该模块是一个数据流的终点。它会将输出的数据发送到一个外部的资源，例如 HDFS。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;作业（Job）&lt;/strong&gt;：该模块会执行一些批处理作业。&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;对 Spring Cloud Data Flow 的需求&lt;/h2&gt;
&lt;p&gt;应用方面的需求总是在变化。这逐渐揭示了 Spring XD 的缺陷和对新一轮的技术创新的需求。以下是一些对新型框架最重要的需求：&lt;/p&gt;
&lt;ul class=&quot;ul-level-0&quot;&gt;&lt;li&gt;云技术在运营需求和非功能性需求的平台级实现方面发挥了巨大作用，但在应用级别上落实 非功能性要求仍是一个对工程量的挑战。&lt;/li&gt;
&lt;li&gt;在分布式环境中对特定阶段部署，动态资源分配，扩展能力和跟踪能力的需求也在日益增长。&lt;/li&gt;
&lt;li&gt;现在越来越多的平台意识到了将平台迁移到云服务供应商上，以及一个平台的可迁移性的必要性。基于微服务的云架构会更加适合这一需求，但 Spring XD 没有为基于微服务的架构提供直接的支持。&lt;/li&gt;
&lt;li&gt;Spring XD 支持大数据的应用场景，但仍有很大一部分项目不需要 Hadoop 来存储并处理数据。&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;Spring Cloud Data Flow&lt;/h2&gt;
&lt;p&gt;作为第二轮技术创新，Pivotal 推出了 Spring Cloud Data Flow 来替代原来的 Spring XD。Spring Cloud Data Flow 继承了 Spring XD 的优势，并通过利用云原生（cloud native）方法提供了更具可扩展性的解决方案。Spring Cloud Data Flow 是一个混合的计算模型，可以将流处理和批处理统一起来。开发人员可以利用 Spring Cloud Data Flow 来创建并操作数据管道来进行处理数据摄入、实时分析和批处理等常见流程。Spring Cloud Data Flow 只会提供一个管理服务模型，旨在精简数据项目的工程量，并让开发人员将精力集中在具体问题及对问题的分析上。&lt;/p&gt;
&lt;h2&gt;Spring Cloud Data Flow 的架构&lt;/h2&gt;
&lt;p&gt;从 Spring XD 到 Spring Cloud Data Flow，对功能的结构以及利用云原生架构扩展应用程序方法发生了从根本上的改变。&lt;/p&gt;
&lt;p&gt;Spring Cloud Data Flow 从传统的基于组件的架构转向了采用更适合云原生应用的，由消息驱动的微服务架构。现在 Spring XD 模块已经被部署在云端上的微服务取代了。&lt;/p&gt;
&lt;p&gt;具体地说，Spring Cloud Data Flow 在以下方面有着一些重大变化：&lt;/p&gt;
&lt;ul class=&quot;ul-level-0&quot;&gt;&lt;li&gt;为了利用云原生平台，Spring Cloud Data Flow 引入了服务提供者接口（SPI），该接口取代了 Spring XD 运行层（runtime layer）。&lt;/li&gt;
&lt;li&gt;像 Admin REST API，shell 和 UI 层这样的用户界面和集成元素与 Spring XD 相同，但底层架构已被大幅修改。&lt;/li&gt;
&lt;li&gt;服务提供者接口（SPI）取代了基于 Zookeeper 的运行模式。现在 SPI 会与其他系统（例如 Pivotal Cloud Foundry 或 Yarn）协调监测并启动基于微服务的应用程序。&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;image-block&quot;&gt;&lt;img src=&quot;https://ask.qcloudimg.com/draft/1094052/vo6i3f0gdc.png?imageView2/0/w/1620&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;p&gt;Spring Cloud Data Flow 的组件：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1112679/201805/1112679-20180518155515726-275613516.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;div class=&quot;image-block&quot;&gt;&lt;img src=&quot;https://ask.qcloudimg.com/draft/1094052/mgo11u3yns.png?imageView2/0/w/1620&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;p&gt;上图描绘了使用 Spring Cloud Data Flow 模型创建的一个典型数据流。&lt;/p&gt;
&lt;p&gt;作为 Spring Boot 微服务，数据源，作业，数据接收器和数据处理器都可以部署在 Cloud Foundry， Lattice 或 Yarn 集群上。通过使用部署在云原生平台上的这些微服务，我们可以创建数据管道并将其输入到 Yarn，Lattice 或基于 Cloud Foundry 的目标中。平台特定的 SPI（服务提供者接口）会被用于发现和绑定微服务，以及绑定基于开发平台的渠道（channel）。&lt;/p&gt;
&lt;h2&gt;用例&lt;/h2&gt;
&lt;p&gt;使用 Spring Cloud Data Flow 的真正好处是能够使用一个统一的框架来快速完成构建和配置工作，并建立数据摄入和处理流程，从而使开发人员能更好地关注具体问题。&lt;/p&gt;
&lt;p&gt;我们不妨构建这样一个用例来在高层面上见识一下 Spring Cloud Data Flow 的改变：在没有自带数据源模块的情况下构造一个完整的数据流，比如对 Facebook 的数据造一个数据流来分析 Facebook 的帖子。 在这种情况下，我们不能用在 Spring Cloud Data Flow 模块里能随便用的 Facebook 数据源模块，因此我们需要为 Facebook 数据源创建自定义模块。创建一个数据流需要三个主要的微服务：数据源，数据处理器和数据接收器。这三个微服务都有相应的接口类。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Facebook 数据管道的数据源和数据接收器的微服务示例代码片段：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Facebook 数据源：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;@SpringBootApplication
@ComponentScan(.&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; SourceApplication {
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
        SpringApplication.run(SourceApplication.&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;, args);
    }
}

@Configuration
@EnableBinding(Source.&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; FBSource {
    @Value(&lt;/span&gt;&quot;${format}&quot;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String format;
    
    @Bean
    @InboundChannelAdapter(value &lt;/span&gt;= Source.OUTPUT, poller = @Poller(fixedDelay = &quot;${fixedDelay}&quot;, maxMessagesPerPoll = &quot;1&quot;&lt;span&gt;))
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; PostSource&amp;lt;String&amp;gt;&lt;span&gt; FBPostSource() {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 一些从 Facebook 获取帖子的逻辑&lt;/span&gt;
        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Facebook 帖子列表&lt;/span&gt;
&lt;span&gt;    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;@EnableBindings(Source.class)&lt;/code&gt;注解会检查相应的作为可绑定组件的接口类的实现是否存在（要在应用的 classpath 中设置，参考 Redis），然后这一组件会构建相应的渠道适配器（channel adapters）。所有微服务都会被转变为 Spring Boot 应用程序来实现更简单的依赖管理。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Facebook 数据接收器：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;@SpringBootApplication
@EnableBinding(Sink.&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;)
@ComponentScan(.&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; SinkApplication {
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
        SpringApplication.run(SinkApplication.&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;, args);
    }
}

@Configuration
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; FBSink {
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; Logger logger = LoggerFactory.getLogger(LogSink.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;);
    
    @ServiceActivator(Source.INPUT)
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; loggerSink(Object payload) {
        logger.info(&lt;/span&gt;&quot;Received: &quot; +&lt;span&gt; payload);
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上述代码会接收来自 Facebook 数据流的数据并将其写入控制台。&lt;code&gt;Sink.class&lt;/code&gt; 在此会作为参数传递给 &lt;code&gt;@EnableBinding&lt;/code&gt; 注解。另外 &lt;code&gt;@ServiceActivator&lt;/code&gt; 会将数据输入模块连接到上例中的终端（endpoint）控制台。&lt;/p&gt;
&lt;p&gt;一些作为数据处理器的微服务将根据输入的 SPEL 表达式过滤来自 FBSource 微服务的 Facebook 帖子，而数据处理器微服务的输出就会是 FBSink 微服务的输入。&lt;/p&gt;
&lt;h2&gt;结论&lt;/h2&gt;
&lt;p&gt;Spring Cloud Data Flow 使用了 Spring Cloud stream 模块。我们可以用后者来创建和运行以 Spring Boot 应用为形式的消息传递微服务，以便它们可以部署在不同的平台上，独立运行并相互交互。在使用 Spring Cloud stream 模块创建数据管道时，Spring Cloud Data Flow 可以充当类似胶水的角色。&lt;/p&gt;
&lt;p&gt;目前有许多用于管理数据摄入，实时分析和数据加载的，独立的开源项目。Spring Cloud Data Flow 则为数据摄入，实时分析，批处理还有数据输出提供了一个统一的，可扩展的分布式服务。&lt;/p&gt;

&lt;blockquote readability=&quot;1.375&quot;&gt;
&lt;p&gt;&lt;strong&gt;问答&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;相关阅读&lt;/strong&gt;&lt;/p&gt;
&lt;p class=&quot;col-article-title&quot;&gt;&lt;a href=&quot;https://cloud.tencent.com/developer/article/1116615?fromSource=waitui&quot; target=&quot;_blank&quot;&gt;Spring框架系列之AOP思想&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;col-article-title&quot;&gt;&lt;a href=&quot;https://cloud.tencent.com/developer/article/1081348?fromSource=waitui&quot; target=&quot;_blank&quot;&gt;初识Spring Boot框架&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;col-article-title&quot;&gt;&lt;a href=&quot;https://cloud.tencent.com/developer/article/1129525?fromSource=waitui&quot; target=&quot;_blank&quot;&gt;Spring 事务管理基础入门总结&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p class=&quot;col-article-title&quot;&gt; &lt;/p&gt;
&lt;p class=&quot;col-article-title&quot;&gt;&lt;strong&gt;此文已由作者授权腾讯云+社区发布，原文链接：https://cloud.tencent.com/developer/article/1128177?fromSource=waitui&lt;/strong&gt;&lt;br/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1112679/201805/1112679-20180515153644255-433320237.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
</description>
<pubDate>Sat, 19 May 2018 03:27:00 +0000</pubDate>
<dc:creator>腾讯云+社区</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/qcloud1001/p/9056809.html</dc:identifier>
</item>
<item>
<title>[创业] 02：如何选择创业方向 - 一步之遥&gt;&gt;</title>
<link>http://www.cnblogs.com/somebody2005/p/9059635.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/somebody2005/p/9059635.html</guid>
<description>&lt;p&gt;这里说的仅仅是IT类的创业。&lt;/p&gt;
&lt;p&gt;我&lt;strong&gt;尝试过/见过&lt;/strong&gt;不少IT类创业公司，理解不能算太深刻，只是随便说说我自己的看法。&lt;br/&gt;1：项目为主&lt;br/&gt;    类似代工，随着行情而改变，人力成本是最大的考量点。项目少的话要养人，项目多了要加班加点。&lt;/p&gt;
&lt;p&gt;    这是一个辛苦活儿。&lt;br/&gt;2：行业应用软件&lt;br/&gt;   依托一个行业，做行业软件。成功的很多。&lt;/p&gt;
&lt;p&gt;   售价高、粘度大，一旦做开了，日子就好过了。&lt;/p&gt;
&lt;p&gt;   我做过的L行业，基本上一个用户账户的价格大约是一个员工的一个月薪水。维护费是售价的60%左右。&lt;/p&gt;
&lt;p&gt;   就粘度来说，我记得很多时候客户为了保证维护的可持续性，常常请我们喝咖啡聊天，确保我们都还健康的工作着。&lt;br/&gt;   缺点就是：小火慢工，十年磨一剑，要能耐得住。其次，要有机会深入了解一个行业。吃定一个行业需要多年的浸淫，不断地深入。&lt;br/&gt;3：纯平台类的&lt;br/&gt;   人力成本小，市场开销大。容易成功也容易复制。&lt;br/&gt;   前提是想得到一个非常好的商业模式，快速拿下最肥的市场，然后利用先发优势挤压对手。&lt;br/&gt;   但是商业模式不好的话，纯烧钱。即使有大佬投资，最后也是坐吃山空。见过两三个这种例子了。&lt;/p&gt;
&lt;p&gt;   另外一种就是找不到合适的盈利模式，每月几千万/上亿的过账，自己却只能干看。&lt;/p&gt;
&lt;p&gt;   当然，平台小有规模之后就被收购，这种的成功例子也见过。&lt;br/&gt;4：o2o&lt;br/&gt;   线上线下，其实是一种互联网+。利用互联网改造传统行业。&lt;br/&gt;   我现在干的就是这种。&lt;br/&gt;   劳心劳力，很多是经营性的工作，作为IT人并不占优势。所以合适的合作伙伴尤其重要。&lt;br/&gt;5：产品为主&lt;br/&gt;   比如智能家居。前两年试过水。&lt;br/&gt;   产品研发是一部分，良好的产品设计和性能，不然到市场上也是一个死。&lt;br/&gt;   如果选择一个创新的产品，从设计到原型是一大步；再到生产又是一大步。这里牵扯到生产成本，测试成本。&lt;br/&gt;   也有公司只是对成熟的产品做一点革新，或者包装贴牌做解决方案，也有做的不错的。&lt;br/&gt;   然后就是运营，安装维护。建筑的后装市场可不是一个IT人能轻易做起来的。这块又到了传统行业上去了。外包出去是一个办法。&lt;br/&gt;6：算法为主&lt;br/&gt;   曾经有好几年我想靠这个当作核心。&lt;br/&gt;   然而，国外有google这种巨头，国内也有BAT，他们的研发能力是碾压的。一旦他们要进入，几乎只有等死的份。    &lt;/p&gt;
&lt;p&gt;   虽然自己做的早，也是数学专业，但是和这些大公司比，人家动不动就n多个数学博士，实在是实力差距太大了。  &lt;/p&gt;


&lt;p&gt;&lt;strong&gt;要不要选风口项目&lt;/strong&gt;？ 风口项目一般都是冲着风投去的。&lt;br/&gt;1：容易拿到投资&lt;br/&gt;   风投的钱也不是天上掉下来的，投资的话要求高回报，增值空间百倍的那种。如果投资失误，也是要解释的。&lt;br/&gt;   所以，很多风头选择风口上的项目，因为大家都投，投资失败也不会背黑锅。&lt;/p&gt;
&lt;p&gt;2：风口的项目失败率也非常高。&lt;br/&gt;   风口项目，很多时候资本决定一切。如果没有良好的关系，拿不到钱或者拿不够钱，最后也不过是炮灰。&lt;br/&gt; &lt;br/&gt;3：先做，等着被大玩家收购。&lt;br/&gt;   有很多成功的例子。&lt;br/&gt; &lt;br/&gt;总体而言，选择风口还是一个好主意。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;选择创业方向和组建团队是密切相关的。甚至很多时候是有了团队雏形才选择方向。&lt;/p&gt;


</description>
<pubDate>Sat, 19 May 2018 02:41:00 +0000</pubDate>
<dc:creator>一步之遥&amp;gt;&amp;gt;</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/somebody2005/p/9059635.html</dc:identifier>
</item>
<item>
<title>监督学习——K邻近算法及数字识别实践 - NeilZhang</title>
<link>http://www.cnblogs.com/NeilZhang/p/9059529.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/NeilZhang/p/9059529.html</guid>
<description>&lt;h2&gt;1. KNN 算法&lt;/h2&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;        K-近邻(k-Nearest Neighbor，KNN)&lt;strong&gt;是分类算法&lt;/strong&gt;，是一个理论上比较成熟的方法，也是&lt;strong&gt;最简单的机器学习算法&lt;/strong&gt;之一。该方法的思路是：如果一个样本在特征空间中的k个最相似(即特征空间中最邻近)的样本中的大多数属于某一个类别，则该样本也属于这个类别。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;         K邻近算法原理很简单，但是真正用好它也不容易，比如K的取值到底为多少才合适，而且知道什么场景下用它更不简单。&lt;/p&gt;
&lt;p&gt;         缺点：  该算法的执行效率并不高，每次计算都需要将 待识别的用例 与所有测试用例进行求差计算，计算量较大。随着测试数据的增多，计算量会越来越大。&lt;/p&gt;
&lt;h2&gt;2. 数字识别 Python 实现&lt;/h2&gt;
&lt;p&gt;        下图为一个 二进制表示的数字“6”，每个训练数据和测试数据都是以这种形式保存在一个txt文件中，数据为32*32（1024个数据）的矩阵。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://images2018.cnblogs.com/blog/918077/201805/918077-20180519100837506-139647954.png&quot;&gt;&lt;img title=&quot;20171230175900503&quot; src=&quot;https://images2018.cnblogs.com/blog/918077/201805/918077-20180519100839471-127207379.png&quot; alt=&quot;20171230175900503&quot; width=&quot;229&quot; height=&quot;451&quot;/&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;KNN算法实现数字识别步骤&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1. 读取训练数据中的所有数据到一个矩阵中（矩阵中的每一列代表一个图片数据），同时读取数据的标签保存在一个数组中（数据的标签或患者说文件代表的具体数字信息在文件命中）&lt;/p&gt;
&lt;p&gt;2. 读取测试数据，转换1024*1的矩阵。&lt;/p&gt;
&lt;p&gt;3. 用测试数据与矩阵A中的每一列求距离，求得的L个距离存入距离数组中（距离算法）&lt;/p&gt;
&lt;p&gt;4. 从距离数组中取出最小的K个距离所对应的训练集的索引&lt;/p&gt;
&lt;p&gt;5. 拥有最多索引的值就是预测值（有多个众数时，按距离和最小）&lt;/p&gt;
&lt;p&gt;&lt;span&gt;数据加载函数&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;该函数用于打开一个数字数据源（32*32），保存在一个1*1024的矩阵中&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
def openFile(fileName):
    returnVect = np.zeros((1,1024))
    fr = open(fileName)
    &lt;span&gt;for&lt;/span&gt; i in range(32):
        linestr = fr.readline();
        &lt;span&gt;for&lt;/span&gt; j in range(32):
            returnVect[0,32*i+j] = &lt;span&gt;int&lt;/span&gt;(linestr[j])
    &lt;span&gt;return&lt;/span&gt; returnVect
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果需要加载某个文件夹下的所有数字文件则可以调用如下函数（数字的标签保存在文件名中第一个字符）&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
def loadData(dir):
    fileList = listdir(dir)  // 列出dir文件下的所有文件（测试数据）
    lable = []
    index = 0
    dataMat = np.zeros((1024,len(fileList)))
    &lt;span&gt;for&lt;/span&gt; file in fileList:
        lable.append(&lt;span&gt;int&lt;/span&gt;(file[0]));  // 标签信息保存在文件的第一个字符中
        dataMat[:,index] = openFile(dir+file)
        index +=1;
    &lt;span&gt;return&lt;/span&gt; dataMat,lable
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;距离计算函数&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;该函数用于计算两个图片举证（1*1024）的距离，（相同位置如果数字相同则距离加1）&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
def caculateerro(data1,data2):
    len1 = len(data1)
    len2 = len(data2)
    sizelen = min(len1,len2);
    totalerro = 0;
    &lt;span&gt;for&lt;/span&gt; i in range(sizelen):
        &lt;span&gt;if&lt;/span&gt; data1[i] != data2[i]:
            totalerro +=1
    &lt;span&gt;return&lt;/span&gt; totalerro
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;数字识别函数&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;45&quot;&gt;
&lt;pre&gt;
def classFier(datain):
    k=15
    dictErro = {} //保存 训练数据编号——测试数据与该训练数据的距离
    trainingdata, traninglabel = loadData('digits\\trainingDigits\\');
    m,n = trainingdata.shape;

    &lt;span&gt;for&lt;/span&gt; i in range(n):
&lt;/pre&gt;
&lt;pre&gt;
        // 计算测试图片与每张训练图片的距离
        currErro = caculateerro(datain,trainingdata[:,i])
        dictErro[i] = currErro
    sortedDict = sorted(dictErro.items(),key=lambda x:x[1],reverse=False);
    numofnumber = range(10)

    &lt;span&gt;for&lt;/span&gt; i in range(10):
        numofnumber[i] = 0
    &lt;span&gt;for&lt;/span&gt; j in range(30):
        label = &lt;span&gt;int&lt;/span&gt;(sortedDict[j][0])
        numofnumber[&lt;span&gt;int&lt;/span&gt;(traninglabel[label])] += 1;
    &lt;span&gt;return&lt;/span&gt; numofnumber.index(max(numofnumber))
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;        上述源码中KNN算法的K取值为15，即取出距离训练数据最小的十五个图片，然后判断这15张图片中对应的那个数字出现的平率最多，将最多的数据作为识别结果返回。&lt;/p&gt;

&lt;p&gt;参考：&lt;/p&gt;
&lt;p&gt;《机器学习实战》&lt;/p&gt;
&lt;p&gt;&lt;a title=&quot;https://blog.csdn.net/zzz_cming/article/details/78938107&quot; href=&quot;https://blog.csdn.net/zzz_cming/article/details/78938107&quot;&gt;https://blog.csdn.net/zzz_cming/article/details/78938107&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Sat, 19 May 2018 02:11:00 +0000</pubDate>
<dc:creator>NeilZhang</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/NeilZhang/p/9059529.html</dc:identifier>
</item>
<item>
<title>Python 中的 if __name__ == '__main__' 该如何理解 - 郭耀华</title>
<link>http://www.cnblogs.com/guoyaohua/p/9059522.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/guoyaohua/p/9059522.html</guid>
<description>&lt;p&gt;　　对于很多编程语言来说，程序都必须要有一个入口，比如 C，C++，以及完全面向对象的编程语言 Java，C# 等。如果你接触过这些语言，对于程序入口这个概念应该很好理解，C 和 C++ 都需要有一个 main 函数来作为程序的入口，也就是程序的运行会从 main 函数开始。同样，Java 和 C# 必须要有一个包含 Main 方法的主类来作为程序入口。&lt;/p&gt;
&lt;p&gt;　　而 Python 则有不同，它属于脚本语言，不像编译型语言那样先将程序编译成二进制再运行，而是动态的逐行解释运行。也就是从脚本第一行开始运行，没有统一的入口。&lt;/p&gt;
&lt;p&gt;　　一个 Python 源码文件除了可以被直接运行外，还可以作为模块（也就是库）被导入。不管是导入还是直接运行，最顶层的代码都会被运行（Python 用缩进来区分代码层次）。而实际上在导入的时候，有一部分代码我们是不希望被运行的。&lt;/p&gt;
&lt;p&gt;　　举一个例子来说明一下，假设我们有一个 const.py 文件，内容如下：&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;6.5&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
PI = 3.14

&lt;span&gt;def&lt;/span&gt;&lt;span&gt; main():
    &lt;/span&gt;&lt;span&gt;print&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;PI:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, PI

main()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;　　我们在这个文件里边定义了一些常量，然后又写了一个 main 函数来输出定义的常量，最后运行 main 函数就相当于对定义做一遍人工检查，看看值设置的都对不对。然后我们直接执行该文件(python const.py),输出：&lt;/p&gt;

&lt;p&gt;　　现在，我们有一个 area.py 文件，用于计算圆的面积，该文件里边需要用到 const.py 文件中的 PI 变量，那么我们从 const.py 中把 PI 变量导入到 area.py 中：&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;7&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;from&lt;/span&gt; const &lt;span&gt;import&lt;/span&gt;&lt;span&gt; PI

&lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; calc_round_area(radius):
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; PI * (radius ** 2&lt;span&gt;)

&lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; main():
    &lt;/span&gt;&lt;span&gt;print&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;round area: &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, calc_round_area(2&lt;span&gt;)

main()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;　　运行 area.py，输出结果：&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;6&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
PI: 3.14&lt;span&gt;
round area:  &lt;/span&gt;12.56
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;　　可以看到，const 中的 main 函数也被运行了，实际上我们是不希望它被运行，提供 main 也只是为了对常量定义进行下测试。这时，&lt;code&gt;if __name__ == '__main__'&lt;/code&gt; 就派上了用场。把 const.py 改一下：&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;6.5&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
PI = 3.14

&lt;span&gt;def&lt;/span&gt;&lt;span&gt; main():
    &lt;/span&gt;&lt;span&gt;print&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;PI:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, PI

&lt;/span&gt;&lt;span&gt;if&lt;/span&gt; &lt;span&gt;__name__&lt;/span&gt; == &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;__main__&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;:
    main()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;　　然后再运行 area.py，输出如下：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
round area:  12.56
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;　　再运行下 const.py，输出如下：&lt;/p&gt;

&lt;p&gt;　　这才是我们想要的效果。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;　　if __name__ == '__main__'&lt;/code&gt; 就相当于是 Python &lt;strong&gt;模拟的程序入口&lt;/strong&gt;。Python 本身并没有规定这么写，这只是一种编码习惯。由于模块之间相互引用，不同模块可能都有这样的定义，而入口程序只能有一个。到底哪个入口程序被选中，这取决于 &lt;code&gt;__name__&lt;/code&gt; 的值。&lt;/p&gt;
&lt;h2 id=&quot;__name__&quot;&gt;__name__&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;　　__name__&lt;/code&gt; 是内置变量，用于表示当前模块的名字，同时还能反映一个包的结构。来举个例子，假设有如下一个包：&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;a
├── b
│   ├── c.py
│   └── __init__.py
└── __init__.py
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;目录中所有 py 文件的内容都为：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
&lt;span&gt;print&lt;/span&gt; &lt;span&gt;__name__&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;我们执行 &lt;code&gt;python -c &quot;import a.b.c&quot;&lt;/code&gt;，输出结果：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
&lt;span&gt;a
a.b
a.b.c&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;由此可见，&lt;code&gt;__name__&lt;/code&gt; 可以清晰的反映一个模块在包中的层次。其实，所谓模块名就是 import 时需要用到的名字，例如：&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;6&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; tornado
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt; tornado.web
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;　　这里的 tornado 和 tornado.web 就被称为模块的模块名。&lt;/p&gt;
&lt;p&gt;　　如果一个模块被直接运行，则其没有包结构，其 &lt;code&gt;__name__&lt;/code&gt; 值为 &lt;code&gt;__main__&lt;/code&gt;。例如在上例中，我们直接运行 c.py 文件（python a/b/c.py），输出结果如下：&lt;/p&gt;

&lt;p&gt;　　所以，&lt;code&gt;if __name__ == '__main__'&lt;/code&gt; 我们简单的理解就是： &lt;strong&gt;如果模块是被直接运行的，则代码块被运行，如果模块是被导入的，则代码块不被运行&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;　　实际上，这个问题还可以衍生出其他的一些知识点，例如 &lt;code&gt;__main__.py&lt;/code&gt; 文件与 Python 的 &lt;code&gt;-m&lt;/code&gt; 参数。&lt;/p&gt;
&lt;h2 id=&quot;__main__-py-python-m&quot;&gt;__main__.py 文件与 python -m&lt;/h2&gt;
&lt;p&gt;　　Python 的 &lt;code&gt;-m&lt;/code&gt; 参数用于将一个模块或者包作为一个脚本运行，而 &lt;code&gt;__main__.py&lt;/code&gt; 文件则相当于是一个包的”入口程序“。&lt;/p&gt;
&lt;p&gt;　　首先我们需要来看看 &lt;code&gt;python xxx.py&lt;/code&gt; 与 &lt;code&gt;python -m xxx.py&lt;/code&gt; 的区别。两种运行 Python 程序的方式的不同点在于，一种是直接运行，一种是当做模块来运行。&lt;/p&gt;
&lt;p&gt;　　先来看一个简单的例子，假设有一个 Python 文件 run.py，其内容如下：&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;6&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; sys
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt; sys.path
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;我们用直接运行的方式启动（python run.py），输出结果(为了说明问题，输出结果只截取了重要部分，下同)：&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;6.5&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/home/huoty/aboutme/pythonstudy/main&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, ...]
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;然后以模块的方式运行（python -m run.py）:&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;6.5&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
[&lt;span&gt;''&lt;/span&gt;&lt;span&gt;, ...]
&lt;/span&gt;/usr/bin/python: No module named run.py
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;　　由于输出结果只列出了关键的部分，应该很容易看出他们之间的差异。直接运行是把 run.py 文件所在的目录放到了 sys.path 属性中。以模块方式运行是把你输入命令的目录（也就是当前工作路径），放到了 sys.path 属性中。以模块方式运行还有一个不同的地方是，多出了一行 &lt;code&gt;No module named run.py&lt;/code&gt; 的错误。实际上以模块方式运行时，Python 先对 run.py 执行一遍 import，所以 &lt;code&gt;print sys.path&lt;/code&gt; 被成功执行，然后 Python 才尝试运行 run.py 模块，但是，在 path 变量中并没有 run.py 这个模块，所以报错。而正确的运行方式，应该是 &lt;code&gt;python -m run&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;　　这个例子并不能明显的说明问题。接着我们来看看 &lt;code&gt;__main__.py&lt;/code&gt; 的作用。&lt;/p&gt;
&lt;p&gt;　　仍然先看例子，有如下一个包：&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;&lt;span class=&quot;k&quot;&gt;package
&lt;span class=&quot;err&quot;&gt;├── &lt;span class=&quot;n&quot;&gt;__init__&lt;span class=&quot;p&quot;&gt;.&lt;span class=&quot;n&quot;&gt;py
&lt;span class=&quot;err&quot;&gt;└── &lt;span class=&quot;n&quot;&gt;__main__&lt;span class=&quot;p&quot;&gt;.&lt;span class=&quot;n&quot;&gt;py
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;__init__.py&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;highlight&quot; readability=&quot;6&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; sys
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;__init__&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;print&lt;/span&gt; sys.path
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;__main__.py&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;highlight&quot; readability=&quot;6&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; sys
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;__main__&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;print&lt;/span&gt; sys.path
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;用 &lt;code&gt;python -m package&lt;/code&gt; 运行结果：&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;7&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;__init__&lt;/span&gt;&lt;span&gt;
[&lt;/span&gt;&lt;span&gt;''&lt;/span&gt;&lt;span&gt;, ...]
&lt;/span&gt;&lt;span&gt;__main__&lt;/span&gt;&lt;span&gt;
[&lt;/span&gt;&lt;span&gt;''&lt;/span&gt;, ...]
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;用 &lt;code&gt;python package&lt;/code&gt; 运行结果：&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;6.5&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;__main__&lt;/span&gt;&lt;span&gt;
[&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;package&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, ...]
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;p&gt;然后我们来总结一下：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;1、 &lt;strong&gt;加上 -m 参数时会把当前工作目录添加到 sys.path 中，而不加时则会把脚本所在目录添加到 sys.path 中&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;2、 &lt;strong&gt;加上 -m 参数时 Python 会先将模块或者包导入，然后再执行&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;3、 &lt;strong&gt;__main__.py 文件是一个包或者目录的入口程序。&lt;/strong&gt;不管是用 &lt;code&gt;python package&lt;/code&gt; 还是用 &lt;code&gt;python -m package&lt;/code&gt; 运行时，__main__.py 文件总是被执行。&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;part-654288be9d6&quot;&gt;后序&lt;/h2&gt;
&lt;p&gt;　　我试图使用长篇大论来阐述，在 Python 中如何理解 &lt;code&gt;if __name__ == '__main__'&lt;/code&gt; 这个问题，不知道我有没有描述得足够的明白。Python 的确是简单的，优雅的，但也有很多问题是不太容易理解的，例如很多高级的特性，像元类、生成器表达式、描述符、协程等。Python 并没有在太多的地方规定要如何如何，很多的用法只是惯用法，例如 self 和本文讨论的内容。这些用法或是为了让代码看起来更优雅，或是前人的经验。使用 Python 是有无限可能的，你可以写出很多简洁优雅的代码。&lt;/p&gt;
&lt;h2 id=&quot;part-2bb23717ee7e9bfc&quot;&gt;参考资料&lt;/h2&gt;
&lt;h2&gt;原文地址&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.konghy.cn/2017/04/24/python-entry-program/&quot; target=&quot;_blank&quot;&gt;http://blog.konghy.cn/2017/04/24/python-entry-program/&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Sat, 19 May 2018 02:08:00 +0000</pubDate>
<dc:creator>郭耀华</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/guoyaohua/p/9059522.html</dc:identifier>
</item>
</channel>
</rss>