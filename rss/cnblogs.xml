<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>小视频&amp;短视频 - 泡泡0</title>
<link>http://www.cnblogs.com/paopa0/p/9512432.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/paopa0/p/9512432.html</guid>
<description>&lt;p&gt;       2017-2018年，小视频和短视频火了。其代表产品有抖音、西瓜视频、快手，以及腾讯又重新扶持的微视，这些堪称互联网现象级的产品是如何做到快速发展、高速增长的呢？首先，我们来探究一下小视频类产品满足了用户那些需求，为什么能成功。关于用户需求方面：第一，随着生活节奏的加快，人们的时间越来越碎片化，小视频满足了用户碎片化时间的打发需求；第二，社会工作学习压力普遍增大，小视频的趣味性很好的舒缓了压力，让用户得到放松；第三，小视频图像能满足用户分享记录生活的需求，而且视频图像可以做到更加直观的表达。小视频的成功之道在于成功的利用了用户的碎片化时间；观看和生产内容的门槛低，去中心化，人人都可以参与，每个人都是主角；视频的题材丰富，创意新颖，具有极高的趣味性，很好的激发了用户的创造分享热情。&lt;/p&gt;
&lt;p&gt;      小视频和短视频总让人傻傻分不清楚，下面讲下区别。小视频时间较短，在1min中以内，其代表产品抖音、快手、微视控制在15s以内，要提到的是微信上线的小视频功能时间控制的是10s。而短视频的时长较长，在3-5min，代表产品有西瓜视频。为什么这类视频软件要严格限制时长呢？因为时长关乎信息浓度，有这么一个公式：信息浓度=主题信息量/时间，控制时长的目的就在于提升观众关心的主题信息量，提升信息浓度，提供有效的信息素，才是获得用户喜欢和关注的关键所在。那又为什么小视频为15s呢？通过相关统计分析，15s足够介绍一个事物，把分享的场景说清楚了。视频越短，就越碎片化，用户几分钟就可以浏览更多视频，视频越短视频的内容生产成本就越低，用户就越愿意参与，弊端是短的时长，内容完整性差，内容更倾向于作者的自我表达，用户之间的互动性就较差。而微信是时长更短，在于考虑用户常在户外使用微信，网络、流量受限，同时时长更短意味着视频更小，降低接收方的流量压力和播放时的心理压力。而短视频3-5min的时长是满足用户完整讲一个故事，唱一首歌，分享一部电影、电视最精彩的部分，相比于小视频，短视频相对制作门槛高，要求有一定是专业性，内容的生产者一般的是专业视频制作团队。因此小视频和短视频满足用户的需求不同，目标用户也不相同。&lt;/p&gt;
&lt;p&gt;      这些视频平台，我们常常把它定义为社交类产品，和腾讯视频等媒体平台的区别在于，这类平台更看重了是用户生产内容进行自我表达，获得关注和持续的情感反馈。小视频类产品需要的是用户去分享生活，因为基于日常生活表达的&lt;span lang=&quot;EN-US&quot;&gt;UGC内容才能建立更有粘性的社交关系网。这社交产品看重的不仅仅是获取流量，更看重对用户心理，互动模式等更加准确的把握。当用户喜欢使用这款社交产品，习惯性使用，持续在平台上产生内容，产生了足够的依赖，那流量就是水到渠成了。下面探讨一下，这类产品的商业模式。作为互联网产品，商业模式最重要的就是流量转化变现，通常通过广告来实现。事实上，目前的小视频平台已经这么做了，抖音信息流广告已经随处可见，在抖音的强大洗脑下，当下也出现了不少抖音爆款。那如何在现有的基础上，增大小视频平台的价值呢？我想这就需要向社交大佬微信学习了，要更精心的产品设计和精细化的运营，将流量沉淀下来，提升话题的参与感，强化用户的存在感和归属感，引导用户社交互动。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span lang=&quot;EN-US&quot;&gt;    随着小视频大火，爆表的用户接受度，越来越多的平台加入视频元素，例如电商商品的展示视频、音乐平台的创作视频等，由此可见小视频的应用越来越广，找到自己产品与小视频结合的点，确定产品的核心价值，那小视频在传统互联网行业也会绽放异彩，谁让小视频顺应了时代，虏获了用户的芳心呢。&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Wed, 22 Aug 2018 07:43:00 +0000</pubDate>
<dc:creator>泡泡0</dc:creator>
<og:description>2017-2018年，小视频和短视频火了。其代表产品有抖音、西瓜视频、快手，以及腾讯又重新扶持的微视，这些堪称互联网现象级的产品是如何做到快速发展、高速增长的呢？首先，我们来探究一下小视频类产品满足了</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/paopa0/p/9512432.html</dc:identifier>
</item>
<item>
<title>oracle 分页方法 - ziChuangShi</title>
<link>http://www.cnblogs.com/chuang-sharing/p/9518080.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/chuang-sharing/p/9518080.html</guid>
<description>&lt;p&gt;我分享两种：&lt;/p&gt;
&lt;p&gt;1.用rownum&lt;/p&gt;
&lt;p&gt;select * from (select p.* , rownum rn  from t_premium p where rn&amp;lt;= page * 10) a where a.rn &amp;gt; (page -1) * 10 + 1；&lt;/p&gt;
&lt;p&gt;2.不用rownum&lt;/p&gt;
&lt;p&gt;select * from (select p.*,row_number() over(order by p.premium_id) rn from t_premium p ) a where a.rn between (page -1) * 10 + 1 and page*10;&lt;/p&gt;

&lt;p&gt;备注：补充一下row_number() over(order by id) 函数的相关介绍&lt;/p&gt;

&lt;p&gt;https://blog.csdn.net/burpee/article/details/55517434&lt;/p&gt;

</description>
<pubDate>Wed, 22 Aug 2018 07:40:00 +0000</pubDate>
<dc:creator>ziChuangShi</dc:creator>
<og:description>我分享两种： 1.用rownum select * from (select p.* , rownum rn from t_premium p where rn&lt;= page * 10) a w</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/chuang-sharing/p/9518080.html</dc:identifier>
</item>
<item>
<title>浅谈JVM内存模型 - 八月的思念</title>
<link>http://www.cnblogs.com/missOfAugust/p/9517916.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/missOfAugust/p/9517916.html</guid>
<description>&lt;p&gt;JAVA虚拟机在执行JAVA程序的时候，会把它管理的内存分成若干不同的数据区域，每个区域都有各自的用途。目前大致把JVM内存模型划分为五个区域：程序计数器，虚拟机栈，本地方法栈，堆和方法区。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.cnblogs.com/missOfAugust/p/data/attachment/forum/201808/22/091934t18n6n64uxeu868w.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1421784/201808/1421784-20180822151806674-606538624.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;程序计数器&lt;/h2&gt;
&lt;p&gt;程序计数器（ProgramCounterRegister）是当前线程所执行的字节码的行号指示器。这句话理解起来有点拗口，打个比方，我看书看到一半的时候突然接到领导电话”XX啊，线上那个项目出BUG了,赶紧来公司加个班解决！“，这时书没看完啊怎么办？我会在当前页夹个书签，以便下次再看的时候接着上次看的地方往下读。而程序计数器就是这样一个作用。我们的CPU多线程处理能力有限，常规的CPU也就是4核8线程，表示同一时间段最多能同时处理8个线程。而我们的程序往往是几百上千个线程在跑。所以不得不采用线程之间来回切换的形式来执行程序。程序计数器就是线程的”书签“，用来记录当前线程执行到方法的哪一步，以便下次线程切回来的时候从上次执行的内存地址继续执行。程序计数器是线程私有的，各个线程之间的计数器互不影响，独立存储。程序计数器也是唯一在Java 虚拟机规范中没有规定任何OutOfMemoryError 的区域。&lt;/p&gt;
&lt;p&gt;ps:JVM还有个东西叫方法计数器，是用来记录方法执行次数的，用于JIT。当方法执行次数达到阈值的时候，JVM会判定该方法为热点方法，从而将该方法编译为机器码，从而提高执行效率，两者概念别搞混淆了。&lt;/p&gt;
&lt;h2&gt;虚拟机栈&lt;/h2&gt;
&lt;p&gt; 虚拟机栈（Java Virtual Machine Stacks）与程序计数器一样，也是线程私有的，它的生命周期与线程相同。我们JAVA程序中的所有线程都被它管理。线程是什么？网上这种概念一找一大堆，我的理解很简单，线程就是方法的执行者，java程序中所有方法只能被线程执行。一个用户请求过来就创建了一个线程，一直到请求回应这个线程生命也走到了尽头。该请求在我们的服务端执行了哪些操作都是在这个线程中实现的，线程每执行一个方法就会创建一个栈帧，栈帧用来存储当前方法的局部变量表、操作数栈、动态链接、方法出口等信息。每个方法从被调用至返回的过程, 就对应着一个栈帧在虚拟机栈中从入栈到出栈的过程。&lt;/p&gt;
&lt;p&gt;在Java 虚拟机规范中，对这个区域规定了两种异常状况：如果线程请求的栈深度大于虚拟机所允许的深度（如循环嵌套/死循环），将抛出StackOverflowError 异常；如果虚拟机栈无法申请到足够的内存时会抛出OutOfMemoryError 异常。ps:普通线程大概消耗1M左右的内存，如果项目中线程数过多也会导致在该区域内存溢出，抛出OutOfMemoryError 异常。所以项目中能用线程池就用线程池限制和维护线程数量。&lt;/p&gt;
&lt;h2&gt;本地方法栈&lt;/h2&gt;
&lt;p&gt; 本地方法栈（Native Method Stacks）与虚拟机栈非常类似，只不过虚拟机栈为虚拟机执行Java 方法服务，而本地方法栈则是为虚拟机使用到的native 方法服务。我们看JDK源码的时候经常看到有的方法前面有native修饰，这些都是本地方法，由非JAVA语言实现。&lt;/p&gt;
&lt;p&gt;示例如下&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;34&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
package java.lang;
public class Object{
private static native void registerNatives();
...
...
public final native Class&amp;lt;?&amp;gt; getClass();
public native int hashCode();
protected native Object clone() throws CloneNotSupportedException;
public final native void notify();
...
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;与 虚拟机栈类似，本地方法栈也会抛出StackOverflowError和OutOfMemoryError 异常。以前项目中遇到过这种场景，遍历获取服务器某个目录下面所有文件夹和文件的时候抛出OutOfMemoryError 异常，提示是native方法报错。这时候别被native误导，native方法轻易不抛异常，就算抛异常也是我们打开方式有误，结合场景推测应该是有大文件在该目录下从而导致内存溢出，然后果然找到了大文件。&lt;/p&gt;
&lt;h2&gt;Java 堆&lt;/h2&gt;
&lt;p&gt;JAVA堆(Heap)是JVM内存管理中区域最大一块，也是GC垃圾回收器最活跃的区域，我们所有对象的生命周期都在堆里面。由于堆里面所有数据都是对虚拟机栈中所有线程共享，所以会造成并发编程的时候线程不安全的问题，这个我们先不讨论。现代GC主要采用的是分代回收的策略，将我们的堆主要划分为新生代(Eden区、From Survivor区和To Survivor区)和老年代。新生代就像炼狱，里面的对象朝生暮死,每分每秒都在煎熬，熬不下去就game over被扔到GC的销毁队列挨个销毁，熬下去了就跑到老年代去颐享天年。JVM默认配置一个对象如果经历了15次GC回收都还存活的话，就转移到老年代，特殊的大对象（如数组）除外。根据Java 虚拟机规范的规定，当JAVA堆无法满足内存分配需求时，将会抛出OutOfMemoryError 异常。ps:老年代不会轻易GC，但是老年代空间有限的情况下如果空间满了，则会促使GC来次大扫除--FULL GC,FULL GC是非常影响性能的，因为在执行FULL GC的时候，其他所有线程都不得不停下来等待，也就是所谓的STOP THE WORLD,一个好的JVM配置，基本不会出现 FULL GC的情况。&lt;/p&gt;
&lt;h2&gt;方法区&lt;/h2&gt;
&lt;p&gt;方法区（Method Area）存放虚拟机加载的类信息，静态变量，常量等数据。根据Java 虚拟机规范的规定，当方法区无法满足内存分配需求时，将抛出OutOfMemoryError 异常。同堆一样，方法区也是对所有线程共享的。 JDK1.8之前，大家习惯于把方法区称之为”永久代“，这是因为HotSpot 虚拟机的设计团队选择把GC 分代收集扩展到了方法区，但是为了跟堆区分出来又取了一个别名叫非堆。1.8以后用”元空间“取代了永久代的概念，元空间不再是jvm内存的一部分，而是直接在于本机内存中。而将常量池移到堆中。&lt;/p&gt;

&lt;p&gt;希望这篇文章能给大家一些提示。&lt;/p&gt;
</description>
<pubDate>Wed, 22 Aug 2018 07:22:00 +0000</pubDate>
<dc:creator>八月的思念</dc:creator>
<og:description>JAVA虚拟机在执行JAVA程序的时候，会把它管理的内存分成若干不同的数据区域，每个区域都有各自的用途。目前大致把JVM内存模型划分为五个区域：程序计数器，虚拟机栈，本地方法栈，堆和方法区。 程序计数</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/missOfAugust/p/9517916.html</dc:identifier>
</item>
<item>
<title>Ajax等待返回结果时,弹出一个友好的等待提示 - mCod</title>
<link>http://www.cnblogs.com/tg666/p/9517896.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/tg666/p/9517896.html</guid>
<description>&lt;p&gt;&lt;span&gt;　　jQuery是经常使用的一个开源js框架，其中的$.ajax请求中有一个beforeSend方法，用于在向服务器发送请求前执行一些动作。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;具体可参考jQuery官方文档：&lt;a class=&quot;uri&quot; href=&quot;http://api.jquery.com/Ajax_Events/&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;http://api.jquery.com/Ajax_Events/&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;$.ajax({
    beforeSend: &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
     &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Handle the beforeSend event&lt;/span&gt;
&lt;span&gt;    },
    complete: &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
     &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Handle the complete event&lt;/span&gt;
&lt;span&gt;    }
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; ......&lt;/span&gt;
}); 
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;span&gt;防止重复数据&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;　　&lt;span&gt;在实际项目开发中，提交表单时常常由于网络或者其原因，用户点击提交按钮误认为自己没有操作成功，进而会重复提交按钮操作次数，如果页面前端代码没有做一些相应的处理，通常会导致多条同样的数据插入数据库，导致脏数据的增加。要避免这种现象，在$.ajax请求中的beforeSend方法中把提交按钮禁用掉，等到Ajax请求执行完毕，在恢复按钮的可用状态。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;举个例子：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 提交表单数据到后台处理&lt;/span&gt;
&lt;span&gt;$.ajax({
    type: &lt;/span&gt;&quot;post&quot;&lt;span&gt;,
    data: studentInfo,
    contentType: &lt;/span&gt;&quot;application/json&quot;&lt;span&gt;,
    url: &lt;/span&gt;&quot;/Home/Submit&quot;&lt;span&gt;,
    beforeSend: &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 禁用按钮防止重复提交&lt;/span&gt;
        $(&quot;#submit&quot;).attr({ disabled: &quot;disabled&quot;&lt;span&gt; });
    },
    success: &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; (data) {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (data == &quot;Success&quot;&lt;span&gt;) {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;清空输入框&lt;/span&gt;
&lt;span&gt;            clearBox();
        }
    },
    complete: &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
        $(&lt;/span&gt;&quot;#submit&quot;).removeAttr(&quot;disabled&quot;&lt;span&gt;);
    },
    error: &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; (data) {
        console.info(&lt;/span&gt;&quot;error: &quot; +&lt;span&gt; data.responseText);
    }
});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;toast&quot;&gt;&lt;span&gt;模拟Toast效果&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;ajax请求服务器加载数据列表时提示loading(“加载中，请稍后...”)&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
&lt;span&gt;$.ajax({   &lt;br/&gt;　　type: &lt;/span&gt;&quot;post&quot;&lt;span&gt;,
    contentType: &lt;/span&gt;&quot;application/json&quot;&lt;span&gt;,
    url: &lt;/span&gt;&quot;/Home/GetList&quot;&lt;span&gt;,
    beforeSend: &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
        $(&lt;/span&gt;&quot;loading&quot;&lt;span&gt;).show();
    },
    success: &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; (data) {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (data == &quot;Success&quot;&lt;span&gt;) {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; ...&lt;/span&gt;
&lt;span&gt;        }
    },
    complete: &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
        $(&lt;/span&gt;&quot;loading&quot;&lt;span&gt;).hide();
    },
    error: &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; (data) {
        console.info(&lt;/span&gt;&quot;error: &quot; +&lt;span&gt; data.responseText);
    }
});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;span&gt;通过调用一个函数展示有好的动画效果&lt;/span&gt;&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;45&quot;&gt;
&lt;pre&gt;
&amp;lt;script type=&quot;text/javascript&quot;&amp;gt;  
  
&lt;span&gt;function&lt;/span&gt;&lt;span&gt; test_ajax(){  
   $.ajax(  
   {  
      type:&lt;/span&gt;&quot;GET&quot;,&lt;span&gt;//&lt;/span&gt;&lt;span&gt;通常会用到两种：GET,POST。默认是：GET  &lt;/span&gt;
      url:&quot;a.php&quot;,&lt;span&gt;//&lt;/span&gt;&lt;span&gt;(默认: 当前页地址) 发送请求的地址  &lt;/span&gt;
      dataType:&quot;html&quot;,&lt;span&gt;//&lt;/span&gt;&lt;span&gt;预期服务器返回的数据类型。  &lt;/span&gt;
      beforeSend:beforeSend, &lt;span&gt;//&lt;/span&gt;&lt;span&gt;发送请求  &lt;/span&gt;
      success:callback, &lt;span&gt;//&lt;/span&gt;&lt;span&gt;请求成功  &lt;/span&gt;
      error:error,&lt;span&gt;//&lt;/span&gt;&lt;span&gt;请求出错   &lt;/span&gt;
      complete:complete&lt;span&gt;//&lt;/span&gt;&lt;span&gt;请求完成  &lt;/span&gt;
&lt;span&gt;   });  
}  
&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; error(XMLHttpRequest, textStatus, errorThrown){  
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 通常情况下textStatus和errorThown只有其中一个有值   &lt;/span&gt;
  $(&quot;#showResult&quot;).append(&quot;&amp;lt;div&amp;gt;请求出错啦！&amp;lt;/div&amp;gt;&quot;&lt;span&gt;);  
}  
&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; beforeSend(XMLHttpRequest){  
  $(&lt;/span&gt;&quot;#showResult&quot;).append(&quot;&amp;lt;div&amp;gt;&amp;lt;img src='loading.gif' /&amp;gt;&amp;lt;div&amp;gt;&quot;&lt;span&gt;);  
}  
&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; complete(XMLHttpRequest, textStatus){  
  $(&lt;/span&gt;&quot;#showResult&quot;&lt;span&gt;).remove();  
}  
&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; callback(msg){  
  $(&lt;/span&gt;&quot;#showResult&quot;).append(&quot;&amp;lt;div&amp;gt;请求成功，回传数:&quot;+msg+&quot;&amp;lt;div&amp;gt;&quot;&lt;span&gt;);  
}  
&lt;/span&gt;&amp;lt;/script&amp;gt;  
&lt;/pre&gt;&lt;/div&gt;
</description>
<pubDate>Wed, 22 Aug 2018 07:20:00 +0000</pubDate>
<dc:creator>mCod</dc:creator>
<og:description>巧用Ajax的beforeSend 提高用户体验 jQuery是经常使用的一个开源js框架，其中的$.ajax请求中有一个beforeSend方法，用于在向服务器发送请求前执行一些动作。 具体可参考j</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/tg666/p/9517896.html</dc:identifier>
</item>
<item>
<title>使用JSP／Servlet技术开发新闻发布系统——第二章   JSP数据交互（一） - 逆風〠飛翔</title>
<link>http://www.cnblogs.com/HQING/p/9517891.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/HQING/p/9517891.html</guid>
<description>&lt;p&gt;&lt;strong&gt;1、 &lt;/strong&gt;&lt;strong&gt;JSP&lt;/strong&gt;&lt;strong&gt;内置对象：JSP内置对象是 Web 容器创建的一组对象；&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; 　　●&lt;/strong&gt;&lt;strong&gt;JSP&lt;/strong&gt;&lt;strong&gt;常用的内置对象：out、request、application、session、respons等；&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　&lt;/strong&gt;&lt;strong&gt;●内置对象不需要实例化的原因：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; 　　　　 &lt;/strong&gt; &lt;strong&gt;★由Web容器加载的一组Servlet API的实例，这些实例由 JSP 规范进行了默认的初始化操作，可以直接在JSP中使用，&lt;/strong&gt;&lt;strong&gt;特别要注意的是JSP内置对象名称均是JSP的保留字，不得当作自定义变名使用；&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2、&lt;/strong&gt;&lt;strong&gt;JSP&lt;/strong&gt;&lt;strong&gt;的内置对象out：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　&lt;/strong&gt;&lt;strong&gt;●out 内置对象是在 JSP 开发过程中使用最为频繁的对象，out 对用于向浏览器输出数据，其常用的方法是 print( ) , 该方法用于在页面中显示字符串信息。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　　　例如在页面上显示 “Hello JSP'：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;       　　　　  &amp;lt;%&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;           　　　　  out.print(“Hello JSP”);&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;      　　　　   %&amp;gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3、 &lt;/strong&gt;&lt;strong&gt;JSP&lt;/strong&gt; &lt;strong&gt;内置对象 request：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　&lt;/strong&gt;&lt;strong&gt;●&lt;/strong&gt;&lt;strong&gt;request&lt;/strong&gt;&lt;strong&gt;对象是最常用的 JSP 内置对象之一 , 其中包含了有关浏览器请求的信息；&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　　　工作原理：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;     　　　　　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1334152/201808/1334152-20180822150607143-190501720.png&quot; alt=&quot;&quot; width=&quot;537&quot; height=&quot;132&quot;/&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;      &lt;/strong&gt; &lt;strong&gt;●request&lt;/strong&gt;&lt;strong&gt;对象常用方法：&lt;/strong&gt;&lt;/p&gt;
&lt;table border=&quot;1&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody readability=&quot;8.5&quot;&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; width=&quot;258&quot;&gt;
&lt;p&gt;&lt;strong&gt;方法名称&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;282&quot;&gt;
&lt;p&gt;&lt;strong&gt; &lt;/strong&gt;&lt;strong&gt;说明&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;6&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;258&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;strong&gt;String getParameter(String name)&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;282&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;strong&gt;根据页面表单组件名称获取页面提交数据&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;7.5&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;258&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;strong&gt;String[ ] getParameterValues(String name)&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;282&quot; readability=&quot;6&quot;&gt;
&lt;p&gt;&lt;strong&gt;获取一组相同名称名命的表单组件提交的数据（表单组件对应多个值时的请求数据 ）&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;6&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;258&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;strong&gt;void setCharacterEncoding(String charset)&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;282&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;strong&gt;指定每个请求的编码&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;6&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;258&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;strong&gt;RequestDispatcher getRequestDispatcher(String path)&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;282&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;strong&gt;返回一个javax.servlet.RequestDispatcher对象，该对象的forward( )方法用于转发请求&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;

&lt;table border=&quot;1&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody readability=&quot;12&quot;&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td colspan=&quot;2&quot; valign=&quot;top&quot; width=&quot;664&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;strong&gt;eg&lt;/strong&gt;&lt;strong&gt;：编码实现学员的注册功能：&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;71.5&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;278&quot; readability=&quot;70&quot;&gt;
&lt;p&gt;&lt;strong&gt;注册reginput . jsp页面的jsp：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&amp;lt;body&amp;gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;         &amp;lt;div align=&quot;center&quot;&amp;gt;&lt;/strong&gt;&lt;strong&gt;请输入注册信息&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;                  &amp;lt;form name=&quot;form1&quot; method=&quot;post&quot; action=&quot;reginfo.jsp&quot;&amp;gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;              &amp;lt;table  border=&quot;0&quot; align=&quot;center&quot;&amp;gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;                                &amp;lt;tr&amp;gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;                            &amp;lt;td&amp;gt;&lt;/strong&gt;&lt;strong&gt;用户名：&amp;lt;/td&amp;gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;                            &amp;lt;td&amp;gt;&amp;lt;input type=&quot;text&quot; name=&quot;name&quot;&amp;gt;&amp;lt;/td&amp;gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;                              &amp;lt;/tr&amp;gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;                                   &amp;lt;tr&amp;gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;                                  &amp;lt;td height=&quot;19&quot;&amp;gt;&lt;/strong&gt;&lt;strong&gt;密码：&amp;lt;/td&amp;gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;                                  &amp;lt;td height=&quot;19&quot;&amp;gt;&amp;lt;input type=&quot;password&quot; name=&quot;pwd&quot;&amp;gt;&amp;lt;/td&amp;gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;                                   &amp;lt;/tr&amp;gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;                                   &amp;lt;tr&amp;gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;                            &amp;lt;td&amp;gt;&lt;/strong&gt;&lt;strong&gt;信息来源：&amp;lt;/td&amp;gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;                            &amp;lt;td&amp;gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;                                                     &amp;lt;input type=&quot;checkbox&quot; name=&quot;channel&quot; value=&quot;&lt;/strong&gt;&lt;strong&gt;报刊&quot;&amp;gt;报刊&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;                                           &amp;lt;input type=&quot;checkbox&quot; name=&quot;channel&quot; value=&quot;&lt;/strong&gt;&lt;strong&gt;网络&quot;&amp;gt;网络&amp;lt;br/&amp;gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;                                           &amp;lt;input type=&quot;checkbox&quot; name=&quot;channel&quot; value=&quot;&lt;/strong&gt;&lt;strong&gt;朋友推荐&quot;&amp;gt;朋友推荐&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;                                           &amp;lt;input type=&quot;checkbox&quot; name=&quot;channel&quot; value=&quot;&lt;/strong&gt;&lt;strong&gt;电视&quot;&amp;gt;电视&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;                                      &amp;lt;/td&amp;gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;                              &amp;lt;/tr&amp;gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;                              &amp;lt;!--&lt;/strong&gt; &lt;strong&gt;以下是提交、取消按钮 --&amp;gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;                              &amp;lt;tr &amp;gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;                            &amp;lt;td colspan=&quot;2&quot; align=&quot;center&quot; &amp;gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;                                            &amp;lt;input type=&quot;submit&quot; name=&quot;Submit&quot; value=&quot;&lt;/strong&gt;&lt;strong&gt;提交&quot;&amp;gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;                                            &amp;lt;input type=&quot;reset&quot; name=&quot;Reset&quot; value=&quot;&lt;/strong&gt;&lt;strong&gt;取消&quot;&amp;gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;                            &amp;lt;/td&amp;gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;                              &amp;lt;/tr&amp;gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;              &amp;lt;/table&amp;gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;                &amp;lt;/form&amp;gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;         &amp;lt;/div&amp;gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;         &amp;lt;/body&amp;gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;387&quot; readability=&quot;59&quot;&gt;
&lt;p&gt;&lt;strong&gt;提交reginfo . isp页面的jsp：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&amp;lt;body&amp;gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;       &amp;lt;%&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;           request.setCharacterEncoding(&quot;UTF-8&quot;);&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;           String name = request.getParameter(&quot;name&quot;);&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;           String pwd = request.getParameter(&quot;pwd&quot;);&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;           String[] channels = request.getParameterValues(&quot;channel&quot;);&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;       %&amp;gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;       &amp;lt;div align=&quot;center&quot;&amp;gt;&lt;/strong&gt;&lt;strong&gt;你输入的注册信息&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;              &amp;lt;table border=&quot;0&quot; align=&quot;center&quot;&amp;gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;                  &amp;lt;tr&amp;gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;                      &amp;lt;td width=&quot;80&quot; height=&quot;20&quot;&amp;gt;&lt;/strong&gt;&lt;strong&gt;用户名:&amp;lt;/td&amp;gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;                      &amp;lt;td&amp;gt;&amp;lt;%=name%&amp;gt;&amp;lt;/td&amp;gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;                  &amp;lt;/tr&amp;gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;                  &amp;lt;tr&amp;gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;                      &amp;lt;td height=&quot;20&quot;&amp;gt;&lt;/strong&gt;&lt;strong&gt;密码:&amp;lt;/td&amp;gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;                      &amp;lt;td&amp;gt;&amp;lt;%=pwd%&amp;gt;&amp;lt;/td&amp;gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;                  &amp;lt;/tr&amp;gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;                  &amp;lt;tr&amp;gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;                      &amp;lt;td height=&quot;20&quot;&amp;gt;&lt;/strong&gt;&lt;strong&gt;信息来源:&amp;lt;/td&amp;gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;                      &amp;lt;td &amp;gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;                      &amp;lt;%&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;                          if (channels != null) {&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;                              for (String channel: channels) {&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;                                  out.print(channel+&quot;&amp;amp;nbsp;&quot;);&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;                              }&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;                          }&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;                      %&amp;gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;                      &amp;lt;/td&amp;gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;                  &amp;lt;/tr&amp;gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;              &amp;lt;/table&amp;gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;       &amp;lt;/div&amp;gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;       &amp;lt;/body&amp;gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;      &lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;22&quot;&gt;&lt;td colspan=&quot;2&quot; valign=&quot;top&quot; width=&quot;664&quot; readability=&quot;23&quot;&gt;
&lt;p&gt;&lt;strong&gt;代码分析：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;★&lt;/strong&gt;&lt;strong&gt;request&lt;/strong&gt;&lt;strong&gt;的getParameter()方法是最为常用的，使用此方法可以获得请求中所提交的参数值，&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　例如，注册页面 (reginput . jsp) 通过 HTML 表单为注册提交页面 (reginfo . isp) 提交了两个参数，名称分别为name 和 pwd,&lt;/strong&gt;&lt;strong&gt;通过调用 request .getParameter( &quot;name' ) 和 request.getParameter 就可以获取这两个参数的值；&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;★在注册页面中，出现了多个复选框 复选框的名称都是 channel, 在注册提交页面中使用getParameterValues(“channel”) 方法就可以获取一个&lt;/strong&gt;&lt;strong&gt;字符串数组，该数组中存储的是所有选中的复选框对应的值。如果没有选择任何选项，请求中不包含名为channel的参数. 则该方法返回null；&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;★request 对象的 setCharacterEncodlrig ( ) 方法用于设置字符集，可以用来解决中文乱码问题，常用字符集编码有 ASCll 、ISO-8859-1 、GB2312、&lt;/strong&gt;&lt;strong&gt;GBK&lt;/strong&gt;&lt;strong&gt;、Unicode、UTF-8等，java在其内部使用 Unicode字符集来表示字符，这样就存在 Unicode 字符集和本地字符集进行换的过程，左Web 应&lt;/strong&gt;&lt;strong&gt;用中, 通常都包括了浏览器、Web 服务器、Web 应用程序和数据库等部分，每一部分都有可能使用不同的字符集，从而导致字符数据在各种不同&lt;/strong&gt;&lt;strong&gt;的字符集之间转换时，出现乱码的问题；&lt;/strong&gt;&lt;/p&gt;
&lt;table border=&quot;1&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody readability=&quot;5.5&quot;&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;611&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;strong&gt;●&lt;/strong&gt;&lt;strong&gt;对于中文乱码问题，根据产生的原因，主要有以下几种解决方案：&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;32&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;611&quot; readability=&quot;49&quot;&gt;
&lt;p&gt;&lt;strong&gt;▲以&lt;/strong&gt;&lt;strong&gt;POST&lt;/strong&gt; &lt;strong&gt;方法提交的表单数据中有中文字符时：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　◆&lt;/strong&gt;&lt;strong&gt;Tomcat&lt;/strong&gt;&lt;strong&gt;对请求数据默认采用ISO-8859-1字符集进行解码，request 对象的 getParameter方法得到的字符串是以 ISO-8859-1 转换而来的，所以在获取请求参数值之前，调用setCharacterEncoding ( &quot;UTF-8“ )方法，将请求的解码方式设定为 UTF-8。注意：页面和浏览器发请求也应一致使用 UTF-8 编码， 通过 JSP 页面设置 page 指令的 contentType属性，指定页面内容的编码格式如下：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　　　 &amp;lt;% page contentType=”text/html;charset=UTF-8”%&amp;gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　　　　　☆&lt;/strong&gt;&lt;strong&gt;注：cententType和pageEncoding的区别：cententType定义响应的资源类型，也可以包含JSP页面和响应内容的字符集;&lt;/strong&gt;&lt;strong&gt;pageEncoding&lt;/strong&gt; &lt;strong&gt;指定JSP文件的字符集及默认的 contentType字符集；&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;▲&lt;/strong&gt;&lt;strong&gt;以 GET方法提交的表单数据中有中文字符时：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　◆&lt;/strong&gt;&lt;strong&gt;当采用GET方式提交表单时，提交的数据作为查询字符串被附加到URL的末端发送到服务器，对于这部分数据，在服务器调用setCharacterEnCoding ( ) 方法是不起作用的，我们需要得到请求参数值后，进行编码转换，在上面的示例中，将表单的提交方式改为 method= 'get'，则在注册提交页reginfo中将获得用户名的代码修改：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;  　　    String name = request.getParameter(&quot;name&quot;);&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　　　name=new String(name.getBytes(“ISO-8859-1”),”UTF-8”)&lt;/strong&gt;&lt;strong&gt;；&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　　　　　☆&lt;/strong&gt;&lt;strong&gt;其中，nama.getBytes(“ISO-8859-1”)是按照 “ISO-8859-1”字符集编码把 name 字符串转换为btye数组，再通过new String()方法,使用指定的”UTF-8”字符集把 byte 数组构造为一个新的String；&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;▲&lt;/strong&gt;&lt;strong&gt;在 Tomcat 中设置字符集：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　◆&lt;/strong&gt;&lt;strong&gt;当表单采用 GET 方法提交时，虽然可以通过构造一个新的String 的方式解决中文乱码问题，但是当获取多个参数值时.每个参数都进行重新编码，操作比较烦琐，效率也不高。这时可以通过Tomcat中设置字符集的方式解决，配置方式如下：找到 Tomcat 目录结构\conf\server . xml 文件，&amp;lt;Connector&amp;gt;元素中添加 URIEncoding 属性,将它的值设置为 “UTF-8 “；&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;    　　&amp;lt;Connector port=&quot;8080&quot; protocol=&quot;HTTP/1.1&quot;connectionTimeout=&quot;20000&quot;redirectPort=&quot;8443&quot; URIEncoding =&lt;/strong&gt;&lt;strong&gt;“UTF-8”/&amp;gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;   　　　　　&lt;/strong&gt;&lt;strong&gt;☆&lt;/strong&gt;&lt;strong&gt;在 Tomcat 中设置了字符集编码，对于浏览器以 GET 方式提交的数据则无须在 JSP页面中再进行重新编码处理 (注意浏览器需以 UTF-8,编码发送 URL);&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;&lt;strong&gt;4、&lt;/strong&gt;&lt;strong&gt;JSP&lt;/strong&gt;&lt;strong&gt;内置对象response：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　&lt;/strong&gt;&lt;strong&gt;●&lt;/strong&gt;&lt;strong&gt;与request对象相对应的是response对象，response对象用于响应客户请求并向客户端输出信息；&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　&lt;/strong&gt;&lt;strong&gt;●工作原理：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　&lt;/strong&gt;&lt;strong&gt;  &lt;/strong&gt;&lt;strong&gt;     　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1334152/201808/1334152-20180822150948466-108878824.png&quot; alt=&quot;&quot; width=&quot;666&quot; height=&quot;176&quot;/&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　●response对象常用的方法：&lt;/strong&gt;&lt;/p&gt;
&lt;table border=&quot;1&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody readability=&quot;7&quot;&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;296&quot;&gt;
&lt;p&gt;&lt;strong&gt;addCookie(Cookie cookie)&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;194&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;strong&gt;向客户端添加Cookie；&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;6&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;296&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;strong&gt;setContentType(String type)&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;194&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;strong&gt;设置HTTP响应的contentType类型&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;6&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;296&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;strong&gt;setCharacterEncoding(String charset)&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;194&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;strong&gt;设置响应所采用字符编码类型&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;6&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;296&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;strong&gt;sendRedirect(String location)&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;194&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;strong&gt;将请求重新定位到一个新的URL上&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;&lt;strong&gt; 　　　　　　　　 &lt;/strong&gt;&lt;strong&gt;◆&lt;/strong&gt;&lt;strong&gt;最常用的方法：sendRedirect(String location)：客户端将重新发送请求到指定的URL；&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5&lt;/strong&gt;&lt;strong&gt;、转发与重定向：&lt;/strong&gt;&lt;/p&gt;
&lt;table border=&quot;1&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody readability=&quot;14.5&quot;&gt;&lt;tr readability=&quot;12&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;491&quot; readability=&quot;15&quot;&gt;
&lt;p&gt;&lt;strong&gt;●&lt;/strong&gt;&lt;strong&gt;转发：从程序运行的角度理解. 即当客户端发送一个请求到服务器后， Web 服务器在容器内部完成求跳转， 然后将最终的结果发送给浏览器，整个过程都是在&lt;/strong&gt;&lt;strong&gt;容器内部完成的，而对应到客户端，无论服务器内部如何处理，作为浏览器都只是提交了一个请求，因而客户端的 URL 地址不会发生改变；&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;☆&lt;/strong&gt;&lt;strong&gt;转发的实现很简单，使用 request 的 getRequestDispatcher ( ) 方法得到 RequestDispatcher 对象,此对象用于封装一个由路径所标识的服务器资源，&lt;/strong&gt;&lt;strong&gt;然后用这个对象调用 forward )方法，将请求传递服务器上另外的 JSP 页面或者 HTML 文件；&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;☆&lt;/strong&gt;&lt;strong&gt;转发可以在多个页面交互过程中实现请求数据的共享；&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;10.5&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;491&quot; readability=&quot;10&quot;&gt;
&lt;p&gt;&lt;strong&gt;●&lt;/strong&gt;&lt;strong&gt;重定向：当用户登录成功后. 使用的是 response 对象的 sendRedirect ( ) 方法。 那么该方法行的结果是客户端重新向服务器请求一个地址链接，由于是发送新&lt;/strong&gt;&lt;strong&gt;的请求 , 因而上次请求中的数将随之丢失 这种行为称为重定向。由于服务器重新定向了URL， 因而在客户端浏览器中显示的新的 URL 地址, 所以重定&lt;/strong&gt;&lt;strong&gt;向可以理解为浏览器至少提交了两次请求&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;14.5&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;491&quot; readability=&quot;22&quot;&gt;
&lt;p&gt;&lt;strong&gt;●转发和重定向有什么区别：转发和重定向都能够实现页面的跳转，不同之处表现在以下几方面：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　◆转发过程：Web 服务器内部将一个 request 请求的处理权交给另外一个资源，属于同一个访问请求和响应过程，所以 request对象的信息不会丢失，&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　　　★转发是在服务器端发挥作用，通过 RequestDispatcher 对象的forward( ) 方法将交信息在多个页面间进行传递；&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　　　★转发是在服务器内部控制权的转移 ， 客户端浏览器的地址栏不会显示出转向的地址。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　◆重定向过程：Web 服务器向浏览器返回一个响应，浏览器接受此响应后再发一个新的 http请求到服务器，这属于两次不同的请求， 则上一次请求的 request&lt;/strong&gt;&lt;strong&gt;信息将丢失；&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　　　★重定向是在客户端发挥作用，通过请求新的地址实现页面转向。其通过浏览器重新请求地址，在地址栏中可以显示转向后的地址。&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;16&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;491&quot; readability=&quot;13&quot;&gt;
&lt;p&gt;&lt;strong&gt;●&lt;/strong&gt;&lt;strong&gt;如果需要在重定向的情况下将简单数据（值类型、字符串）传递到目标页面；也以使用查询字符串（Query String）实现：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　response.sendRedirect(“welcome.jsp?username=”+name”);&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　查询字符串以名值对方式 存储数据，通过“？”连接在URL的后面，多个名值对可以使用“&amp;amp;”进行分隔；&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;●&lt;/strong&gt;&lt;strong&gt;查询字符串的应用：&lt;/strong&gt;&lt;/p&gt;
&lt;table border=&quot;1&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody readability=&quot;13&quot;&gt;&lt;tr readability=&quot;28.5&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;153&quot; readability=&quot;26&quot;&gt;
&lt;p&gt;&lt;strong&gt;eg&lt;/strong&gt;&lt;strong&gt;：选择页面&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&amp;lt;%@ page language=&quot;java&quot; import=&quot;java.util.*&quot; pageEncoding=&quot;UTF-8&quot; %&amp;gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&amp;lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;&amp;gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&amp;lt;html&amp;gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;    &amp;lt;head&amp;gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;        &amp;lt;title&amp;gt;&lt;/strong&gt;&lt;strong&gt;选择喜欢的颜色&amp;lt;/title&amp;gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;    &amp;lt;/head&amp;gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;    &amp;lt;body&amp;gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;        &lt;/strong&gt; &lt;strong&gt;请从以下7种颜色中,选择你最喜欢的颜色&amp;lt;br/&amp;gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;        &amp;lt;a href=&quot;color.jsp?color=&lt;/strong&gt;&lt;strong&gt;赤色&quot;&amp;gt;赤色&amp;lt;/a&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;        &amp;lt;a href=&quot;color.jsp?color=&lt;/strong&gt;&lt;strong&gt;橙色&quot;&amp;gt;橙色&amp;lt;/a&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;        &amp;lt;a href=&quot;color.jsp?color=&lt;/strong&gt;&lt;strong&gt;黄色&quot;&amp;gt;黄色&amp;lt;/a&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;        &amp;lt;a href=&quot;color.jsp?color=&lt;/strong&gt;&lt;strong&gt;绿色&quot;&amp;gt;绿色&amp;lt;/a&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;        &amp;lt;a href=&quot;color.jsp?color=&lt;/strong&gt;&lt;strong&gt;青色&quot;&amp;gt;青色&amp;lt;/a&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;        &amp;lt;a href=&quot;color.jsp?color=&lt;/strong&gt;&lt;strong&gt;蓝色&quot;&amp;gt;蓝色&amp;lt;/a&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;        &amp;lt;a href=&quot;color.jsp?color=&lt;/strong&gt;&lt;strong&gt;紫色&quot;&amp;gt;紫色&amp;lt;/a&amp;gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;    &amp;lt;/body&amp;gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&amp;lt;/html&amp;gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;210&quot; readability=&quot;15&quot;&gt;
&lt;p&gt;&lt;strong&gt;eg&lt;/strong&gt;&lt;strong&gt;：展示页面&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&amp;lt;%@ page language=&quot;java&quot; import=&quot;java.util.*&quot; pageEncoding=&quot;UTF-8&quot;%&amp;gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&amp;lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;&amp;gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&amp;lt;html&amp;gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;    &amp;lt;head&amp;gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;        &amp;lt;title&amp;gt;&lt;/strong&gt;&lt;strong&gt;我喜欢的颜色&amp;lt;/title&amp;gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;    &amp;lt;/head&amp;gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;    &amp;lt;body&amp;gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;    &amp;lt;%  &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;             //&lt;/strong&gt;&lt;strong&gt;已在Tomcat中设置字符集为“UTF-8”&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;        String color = request.getParameter(&quot;color&quot;);&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;    %&amp;gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;       &lt;/strong&gt; &lt;strong&gt;你最喜欢的颜色是:&amp;lt;%=color%&amp;gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;    &amp;lt;/body&amp;gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&amp;lt;/html&amp;gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;13.5&quot;&gt;&lt;td colspan=&quot;2&quot; valign=&quot;top&quot; width=&quot;362&quot; readability=&quot;12&quot;&gt;
&lt;p&gt;&lt;strong&gt;分析：通过上面的代码, 可以发现数据传递成功了：代码中的a标签部分，在跳转页面的后面都有一个 '?'. 以及一个参数名 'color',&lt;/strong&gt;&lt;strong&gt;每一个参数的值就是所选择的颜色。而在结果页面中使用 request 对象的 getParameter ) 方法 , 就可取到参数 'color&quot; 的值,&lt;/strong&gt;&lt;strong&gt;达到了数据的传递效果；&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;15&quot;&gt;&lt;td colspan=&quot;2&quot; valign=&quot;top&quot; width=&quot;362&quot; readability=&quot;21&quot;&gt;
&lt;p&gt;&lt;strong&gt;注：使用超链接进行数据传递时: 采用的是 GET 方式提交请求，如果在传递裁据中存中 文，使用 request 对象直接获取时，容易产生乱码&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;问題。因此，需要对数据进行重新编码。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　▲&lt;/strong&gt;&lt;strong&gt;可以使用 String 对象的方法实现数椐重新编码；&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　　　★&lt;/strong&gt;&lt;strong&gt;语法 ：new String ( 需要编码的数据.getBytes(“ ISO-8859-1“ )，“ UTF-8“ )；&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　▲&lt;/strong&gt;&lt;strong&gt;也可以通过设置 Tomcat 字符集实现：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　　　★&lt;/strong&gt;&lt;strong&gt;当传递多个数据时， 可用 “&amp;amp;” 连接。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　　　　　eg&lt;/strong&gt;&lt;strong&gt;：&amp;lt;a href=“ color.jsp?color=赤色&amp;amp;id=1&amp;gt;赤色&amp;lt;/a&amp;gt;, 在荻取数据时， 依然可以通过参数名 “id” 读取参数值 “1”;&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;&lt;strong&gt;6、&lt;/strong&gt;&lt;strong&gt;JSP&lt;/strong&gt; &lt;strong&gt;内置对象 session：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　&lt;/strong&gt;&lt;strong&gt;●&lt;/strong&gt;&lt;strong&gt;会话：&lt;/strong&gt;&lt;/p&gt;
&lt;table border=&quot;1&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody readability=&quot;10&quot;&gt;&lt;tr readability=&quot;5.5&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;742&quot; readability=&quot;8&quot;&gt;
&lt;p&gt;&lt;strong&gt;session&lt;/strong&gt;&lt;strong&gt;：原义是指有始有终的一系列动作；&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　eg&lt;/strong&gt;&lt;strong&gt;：打电话时，甲方拿起电话拨通乙方电话这一系列的过程就可以称为一个会话，电话挂断时会话结束；&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;7.5&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;742&quot; readability=&quot;8&quot;&gt;
&lt;p&gt;&lt;strong&gt;★&lt;/strong&gt;&lt;strong&gt;对Web开发来说，一个会话就是在一段时间内一个用户与 Web 服务器的一连串相关的交互过程，它可包含浏览器与服务器之间的多次请求，&lt;/strong&gt;&lt;strong&gt;响应过程：在一次会话中，用户可能会多次请求访问一网页，也有可能请求访问同一个服务器的其他资源；&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;12&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;742&quot; readability=&quot;17&quot;&gt;
&lt;p&gt;&lt;strong&gt;▲&lt;/strong&gt;&lt;strong&gt;下图描述了浏览器与服务器的一个会话过程：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; 　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1334152/201808/1334152-20180822151324633-2014998995.png&quot; alt=&quot;&quot; width=&quot;441&quot; height=&quot;215&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;★&lt;/strong&gt;&lt;strong&gt;会话机制是一种服务器端的机制，当用户向服务器发出第一次请求时，服务器会为该用户创建唯一的会话，会话将一直延续到用户访问结束；&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;★&lt;/strong&gt;&lt;strong&gt;当服务器接收到客户端的请求时，服务器首先会判断是否已经创建了与该客户端对应的会话，如果已经创建就将该请求与此会话相关联，如果没有包建，&lt;/strong&gt;&lt;strong&gt;则会创建一个新会话，此客户端之后发送的请求将关联到该会话；&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;★&lt;/strong&gt;&lt;strong&gt;而服务器判断是否创建了相关会话，是通过一个唯一的标识 sessionid来实现的。如果在客户端请求中包含了一个sessionid，则说明在此前已经为客户端创建了会话，&lt;/strong&gt;&lt;strong&gt;服务器就会根据这个 sessionid将对应的会话对象读取出来；否则就会创建一个新的会话对象并生成一个 sessionid，并将 sessionid在本次晌应的过程返回客户端&lt;/strong&gt;&lt;strong&gt;保存；&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;12.5&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;742&quot; readability=&quot;14&quot;&gt;
&lt;p&gt;&lt;strong&gt;★&lt;/strong&gt;&lt;strong&gt;sessionid&lt;/strong&gt;&lt;strong&gt;会返回客户端，那么在客户端 sessionid 会保存在什么位置？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　回答：在客户端保存用户信息使用的是 cookie, 因此保存 sessionid 的方式也是使cookoe来实现的，在客户端的 cookie 中，保存 sessionid 的名称是&lt;/strong&gt;&lt;strong&gt; JSESSIONID&lt;/strong&gt;&lt;strong&gt;， segsionid 的值是由一串复杂字符串组成的；&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　　　eg&lt;/strong&gt;&lt;strong&gt;：JSESSIONID=2A 11D30C7B32329D7C8BF16DC598C509 , 其中等号后面的字符串就是分配的 scssionid 对应的值；&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;&lt;strong&gt;7、 &lt;/strong&gt;&lt;strong&gt;session&lt;/strong&gt;&lt;strong&gt;对象：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　&lt;/strong&gt;&lt;strong&gt;●&lt;/strong&gt;&lt;strong&gt;session&lt;/strong&gt; &lt;strong&gt;对象作为JSP提供的内置对象之一 , session 对象允许用户访问会话的相关信息，以及绑定数据到话（在服务器端使用类似于哈希表的结构来保存信息)。&lt;/strong&gt;&lt;strong&gt;绑定到会话的数据可以在多次请求之间持有效；&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　　　◆&lt;/strong&gt; &lt;strong&gt;session&lt;/strong&gt;&lt;strong&gt;对象的常用方法：&lt;/strong&gt;&lt;/p&gt;
&lt;table border=&quot;1&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody readability=&quot;11.5&quot;&gt;&lt;tr&gt;&lt;td width=&quot;277&quot;&gt;
&lt;p&gt;&lt;strong&gt;方法名称&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;176&quot;&gt;
&lt;p&gt;&lt;strong&gt;说明&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;277&quot;&gt;
&lt;p&gt;&lt;strong&gt;String getId()&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;176&quot;&gt;
&lt;p&gt;&lt;strong&gt;获取sessionid&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;6&quot;&gt;&lt;td width=&quot;277&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;strong&gt;void setMaxInactiveInterval(int interval)&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;176&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;strong&gt;设定session的非活动时间&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;6&quot;&gt;&lt;td width=&quot;277&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;strong&gt;int getMaxInactiveInterval()&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;176&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;strong&gt;获取session的有效非活动时间(以秒为单位)&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td width=&quot;277&quot;&gt;
&lt;p&gt;&lt;strong&gt;void invalidate()&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;176&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;strong&gt;设置session对象失效&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;7.5&quot;&gt;&lt;td width=&quot;277&quot; readability=&quot;6&quot;&gt;
&lt;p&gt;&lt;strong&gt;void setAttribute(String key, Object value)&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;176&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;strong&gt;以key/value的形式将对象保存对到&lt;/strong&gt;&lt;strong&gt;session&lt;/strong&gt;&lt;strong&gt;中&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;6&quot;&gt;&lt;td width=&quot;277&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;strong&gt;Object getAttribute(String key)&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;176&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;strong&gt;通过key获取&lt;/strong&gt;&lt;strong&gt;session&lt;/strong&gt;&lt;strong&gt;中保存的&lt;/strong&gt;&lt;strong&gt;对象值&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;6&quot;&gt;&lt;td width=&quot;277&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;strong&gt;void removeAttribute(String key)&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;176&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;strong&gt;从session中删除指定名称(key)所对应的对象&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;&lt;strong&gt; 　　　　&lt;/strong&gt;&lt;strong&gt;●session&lt;/strong&gt;&lt;strong&gt;与窗口的关系：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　　　　　　　◆&lt;/strong&gt;&lt;strong&gt;每个session对象都与一个浏览器窗口对应 ，重新开启一个浏览器窗口，可以重新创建一个session对象（不同版本浏览器可能有所差别）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　　　　　　　◆&lt;/strong&gt;&lt;strong&gt;通过超链接打开的新窗口，新窗口的session与其父窗口的session相同&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;8、&lt;/strong&gt;&lt;strong&gt;使用 session 对象实现权限控制：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　　　eg&lt;/strong&gt;&lt;strong&gt;：用户通过登录页面登网站， 如果该用户是已注册用户 . 系统会保存该用户的登录信息. 并让用户进入其欲访问的页面；&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　　　　　 &lt;/strong&gt;&lt;strong&gt;用户直接访问网站的某个页面. 系统会查询是否保存有该用户的登录信息，如果有则显示该页面的内容；如果没有，则转入登录页面. 要求用户登录网站&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　&lt;/strong&gt;&lt;strong&gt;●&lt;/strong&gt;&lt;strong&gt;这里要实现的权限访问控制是基于 session 对象来完成的。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　　　eg&lt;/strong&gt;&lt;strong&gt;：&lt;/strong&gt;&lt;strong&gt;使用 session 为新闻发布系增加访问控制，要求新闻发布系统中所有针对新闻的操作，如发布新闻、 修改新闻 、发布新闻标题、 修改新闻标题，&lt;/strong&gt;&lt;strong&gt;都只能由管理员才能完成。普通用户没有权限进行访问，访问控制流程如图：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;    　　　　　　　　　　　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1334152/201808/1334152-20180822151517414-1556911679.png&quot; alt=&quot;&quot; width=&quot;600&quot; height=&quot;276&quot;/&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　　　★&lt;/strong&gt;&lt;strong&gt;根据新闻发布系统的访问控制流程，&lt;/strong&gt;&lt;strong&gt;实现访问控制的流程如下：&lt;/strong&gt;&lt;/p&gt;
&lt;table border=&quot;1&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody readability=&quot;15.5&quot;&gt;&lt;tr readability=&quot;10&quot;&gt;&lt;td colspan=&quot;2&quot; valign=&quot;top&quot; width=&quot;528&quot; readability=&quot;13&quot;&gt;
&lt;p&gt;&lt;strong&gt;1&lt;/strong&gt;&lt;strong&gt;、在登陆页面输入用户名和密码；&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2&lt;/strong&gt;&lt;strong&gt;、在登陆处理页面进行登陆验证；&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3&lt;/strong&gt;&lt;strong&gt;、在会话中，保存用户信息，如果用户登录成功，则跳转到管理员页面；&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4&lt;/strong&gt;&lt;strong&gt;、在管理员页面读取会话中的用户信息，并进行校验；&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5&lt;/strong&gt;&lt;strong&gt;、验证失败，返回登陆页面；&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;48&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;289&quot; readability=&quot;50&quot;&gt;
&lt;p&gt;&lt;strong&gt;eg&lt;/strong&gt;&lt;strong&gt;：登陆处理页面jsp的代码：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&amp;lt;%@ page language=&quot;java&quot; import=&quot;java.util.*&quot; pageEncoding=&quot;UTF-8&quot;%&amp;gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&amp;lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;&amp;gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&amp;lt;html&amp;gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&amp;lt;head&amp;gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&amp;lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot; /&amp;gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&amp;lt;title&amp;gt;&lt;/strong&gt;&lt;strong&gt;登录处理页面&amp;lt;/title&amp;gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&amp;lt;/head&amp;gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&amp;lt;body&amp;gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;    &amp;lt;%&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;        request.setCharacterEncoding(&quot;UTF-8&quot;);&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;        //&lt;/strong&gt;&lt;strong&gt;获取请求数据,并去除空格&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;        String name = request.getParameter(&quot;userName&quot;).trim();&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;        String pwd = request.getParameter(&quot;pwd&quot;).trim();&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;        boolean valid = false;  //&lt;/strong&gt;&lt;strong&gt;判断用户验证是否成功&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;        if(&quot;admin&quot;.equals(name)&amp;amp;&amp;amp;&quot;admin&quot;.equals(pwd)){&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;             valid = true;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;             //&lt;/strong&gt;&lt;strong&gt;设置用户登录信息&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;             session.setAttribute(&quot;login&quot;, name);&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;             //&lt;/strong&gt;&lt;strong&gt;设置session过期时间&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;             session.setMaxInactiveInterval(10*60);&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;        }&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;        if (valid) {&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;            request.getRequestDispatcher(&quot;admin.jsp&quot;)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;                .forward(request,response);&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;        } else {&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;                response.sendRedirect(&quot;index.jsp&quot;);&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;        }&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;    %&amp;gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;    &amp;lt;/body&amp;gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&amp;lt;/html&amp;gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;分析：接下来在管理员操作页面加入登录验证。此时要完成的任务是，从 session 中提取用户的信息，如果用户信息存在，则可以进行操作； 如果用户信息不存在 . 则跳转到登录页面。这一步实现了问的控制；&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;239&quot; readability=&quot;26&quot;&gt;
&lt;p&gt;&lt;strong&gt;eg&lt;/strong&gt;&lt;strong&gt;：在管理员界面加入如下代码：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&amp;lt;%@ page language=&quot;java&quot; import=&quot;java.util.*&quot; pageEncoding=&quot;UTF-8&quot;%&amp;gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&amp;lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;&amp;gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&amp;lt;html&amp;gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;  &amp;lt;head&amp;gt;  &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;    &amp;lt;title&amp;gt;&lt;/strong&gt;&lt;strong&gt;管理员&amp;lt;/title&amp;gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;  &amp;lt;/head&amp;gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;  &amp;lt;body&amp;gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;    &amp;lt;%&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;           String login = (String) session.getAttribute(&quot;login&quot;);&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;           if (login == null){&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;               response.sendRedirect(&quot;index.jsp&quot;);&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;               return;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;           }&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;    %&amp;gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;   &lt;/strong&gt; &lt;strong&gt;您好，欢迎您！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;  &amp;lt;/body&amp;gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&amp;lt;/html&amp;gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;分析：在登录处理页面中，已经实现了对用户的身份验证，为什么在此处还要再进验证。原因很简单.，如果用户不通过登录方式，而是直接在浏览器地址栏中输入管理员页面的地址这样将会直接绕过登录限制而访问成功。 所以需要在管理员操作界面再添加控制语句，以避免此情况的发生。&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;10&quot;&gt;&lt;td colspan=&quot;2&quot; valign=&quot;top&quot; width=&quot;528&quot; readability=&quot;13&quot;&gt;
&lt;p&gt;&lt;strong&gt;◆至此：此示例的访问控制已经基本实现了；&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　▲验证访问控制效果的具体步骤如下：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　　　1&lt;/strong&gt;&lt;strong&gt;、直接在浏览器地址栏中输入URL，访问管理员操作页面；&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　　　2&lt;/strong&gt;&lt;strong&gt;、通过登录页面进入管理员操作页面；&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　　　3&lt;/strong&gt;&lt;strong&gt;、重新开启一个浏览器窗口，直接访问管理员操作页面；&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;26&quot;&gt;&lt;td colspan=&quot;2&quot; valign=&quot;top&quot; width=&quot;528&quot; readability=&quot;39&quot;&gt;
&lt;p&gt;&lt;strong&gt;◆按照以上步骤运行，观察每个步骤会发生什么样的结果 , 并思考为什么会产生这样的结果。下面对此进行分析:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　☉如釆直接在浏览器地址栏中输入管理员操作页面的 URL, 系统会跳入登录页面 , 提示用户进行登录。 这个原因很简单，因为我们在管理员操作页面中加入了访问控制，只有正确登陆后，进入管理员操作界面，会话中才会存储用户登录成功的状态信息，才可以正常访问管理员操作页面；&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　☉如果重新开启一个浏览器窗口，直接访问管理员操作页面，不管在其他窗口中是否登陆，所进入的肯定是登录页面，这是我们经常遇到的问题，即 session 与浏器窗口的关系 ；&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　☉每个 session 对象都与浏览器一一对应，也就是说，重新开启一个浏览器窗口，相当于新创建一个 scssion 对象。但是需要注意的是，由于浏览器或版本不同，即使重新开启个浏览器窗口，也会认为是同一个 session 对象，也就是所谓的出现会话共享问题；&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　　　☆以 IE8为例，可以在浏览器上执行 &quot;文件” — &quot;新建会话’ 命令新建一个会话窗口。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　　　☆另外，提供两种取消浏览器窗口共享 session 的办法：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　　　　　　　1&lt;/strong&gt;&lt;strong&gt;、修改 IE8 的快捷方式：右击 IE8快捷方式图标，在弹出 的快捷菜单中选择 ’属性&quot; —“ 目 标’ 选项， 末尾添加 “- nomerge&quot;，&lt;/strong&gt;&lt;strong&gt;修改后如&quot;C:\Program Files\Itemet Explorer\iexplorc.exe&quot; -nomerge;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　　　　　　　2&lt;/strong&gt;&lt;strong&gt;、使用命令参数 &quot;iexpldre.exe -nomerge' 打开IE&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　☉现在就可解释为什么在登录成功后，重新开启一个浏览器窗口直接访问管理员操作页即可进入登录页面了，在其他浏览器窗口中保存的登录信息与新的浏览器窗口完全无关，所以系统会判定尚未登录，跳转进入登录页面；&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;&lt;strong&gt;9、&lt;/strong&gt;&lt;strong&gt;会话的失效：&lt;/strong&gt;&lt;/p&gt;
&lt;table border=&quot;1&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody readability=&quot;6.5&quot;&gt;&lt;tr readability=&quot;6.5&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;518&quot; readability=&quot;8&quot;&gt;
&lt;p&gt;&lt;strong&gt;●&lt;/strong&gt;&lt;strong&gt;会话也是有时效的，使会话失效的方式有两种： 一种是会话超时；另一种是手动调用方法设置失效；&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;●会话超时是指两次请求的时间间隔超过了服务器允许的最大时间间隔；&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;518&quot;&gt; &lt;strong&gt;●&lt;/strong&gt;&lt;strong&gt;会话的超时间隔可通过三种方法设置：&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;22&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;518&quot; readability=&quot;33&quot;&gt;
&lt;p&gt;&lt;strong&gt;　　◆&lt;/strong&gt;&lt;strong&gt;通过 session 对象的setMaxInactiveInterval( )方法设置，单位是秒；&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;  　　　　  &amp;lt;%&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　　　　　session.setAttribute(&quot;login&quot;,&quot;admin&quot;);&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　　　　　//&lt;/strong&gt;&lt;strong&gt;参数 600 的单位是秒， 表示在 10 分钟后 session对象失效；&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　　　　　session.setMaxInactiveInterval(600);&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　　　　　response.sendRedirect(&quot;admin.jsp&quot;);&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　　　　%&amp;gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　◆在项目的web.xml中设置，单位是分钟，设置为0或负数，表示永不超时；&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;   　　　　 &amp;lt;session-config&amp;gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;       　　　　 &amp;lt;session-timeout&amp;gt;10&amp;lt;/session-timeout&amp;gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　　　　&amp;lt;/session-config&amp;gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　◆在应用服务器中设置，在 Tomcat目录下的/conf/web.xml文件中找到&amp;lt;sesston-config&amp;gt;元素,&lt;/strong&gt; &lt;strong&gt;其中&amp;lt;sesston-config&amp;gt;元素中的 30 就是默认的时间，单位是分钟，可以修改其值；&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　☉&lt;/strong&gt;&lt;strong&gt;动调用方法设置失效是通过调用 session 对象的 invalidate（）方法实现的， 主要应用于用户注销的场合，但如果只想清空会话中绑定的某个数据对象，则可以调用 session . removeAttribute (String key)方法，将指定的对象从会话中清除，而会话仍然有效；&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;&lt;strong&gt;10、   &lt;/strong&gt; &lt;strong&gt;include&lt;/strong&gt;&lt;strong&gt;指令：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　&lt;/strong&gt;&lt;strong&gt;●文件引用指令&lt;/strong&gt;&lt;strong&gt;include&lt;/strong&gt;&lt;strong&gt;，将一些可以重用的内客写入一个单独的文件，然后通过 include 指令引用该文件 ， 从而缓解代码的冗余问題, 并且修改时也更方便；&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　&lt;/strong&gt;&lt;strong&gt;●&lt;/strong&gt;&lt;strong&gt;include&lt;/strong&gt; &lt;strong&gt;指令的基本语法：以&amp;lt;%@ 开始，以 %&amp;gt; 结束。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;     　　　　&lt;/strong&gt; &lt;strong&gt;语法：&amp;lt;%@  include file=&quot;应&lt;/strong&gt;&lt;strong&gt;用文件路径&lt;/strong&gt; &lt;strong&gt;&quot; %&amp;gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　&lt;/strong&gt;&lt;strong&gt;●&lt;/strong&gt; &lt;strong&gt;Include&lt;/strong&gt; &lt;strong&gt;指令表示，在 JSP 编译时插入一个包含文本或代码的文件，这个包含的过程是静态的，包含的文件可以是 JSP 页面、HTML 网页、文本文件等。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　&lt;/strong&gt;&lt;strong&gt;●&lt;/strong&gt;&lt;strong&gt;include&lt;/strong&gt; &lt;strong&gt;指令只有一个 fi1e 属性 , 表示被包含的文件路径；&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; &lt;/strong&gt;&lt;/p&gt;
</description>
<pubDate>Wed, 22 Aug 2018 07:19:00 +0000</pubDate>
<dc:creator>逆風〠飛翔</dc:creator>
<og:description>1、 JSP内置对象：JSP内置对象是 Web 容器创建的一组对象； ●JSP常用的内置对象：out、request、application、session、respons等； ●内置对象不</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/HQING/p/9517891.html</dc:identifier>
</item>
<item>
<title>Java设计模式之装饰者模式 - 渡劫锦官城</title>
<link>http://www.cnblogs.com/javafucker/p/9517778.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/javafucker/p/9517778.html</guid>
<description>&lt;p&gt;要对类的功能进行增强，可以新建一个类继承这个类，这种方法可以解决问题，但如果增加的功能越来越多，那继承的层次就越来越深，造成继承冗余的问题&lt;/p&gt;
&lt;p&gt;装饰者模式可以不用继承类而增强类的功能，原理是使用对象之间的关联关系取代类之间的继承关系&lt;/p&gt;
&lt;p&gt;当然还可以使用&lt;span&gt;代理模式&lt;/span&gt;来增强类的功能&lt;/p&gt;

&lt;p&gt;1、装饰器和被装饰者的抽象类&lt;/p&gt;
&lt;p&gt;2、被装饰者（继承自装饰器和被装饰者的抽象类）&lt;/p&gt;
&lt;p&gt;3、装饰器的抽象&lt;/p&gt;
&lt;p&gt;4、装饰器的具体实现&lt;/p&gt;

&lt;h2&gt;类结构图&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1237666/201808/1237666-20180822150232508-1131224337.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;代码&lt;/h2&gt;
&lt;p&gt;Component&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;装饰器和被装饰者的抽象类&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;abstract&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Component {

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;共有的抽象方法，也就是待装饰的方法&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;abstract&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; show();

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Door&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;被装饰者，继承自被装饰者和装饰器的抽象类&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; Door &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; Component {

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 待装饰方法的具体实现
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; show() {
        System.out.println(&lt;/span&gt;&quot;大家好我是门&quot;&lt;span&gt;);
    }

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ComponentDecorator&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;装饰器的抽象&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;abstract&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; ComponentDecorator &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; Component {

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;被装饰者的引用，可以操作被装饰者&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt;&lt;span&gt; Component component;

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;装饰者的构造器，用于初始化被装饰者对象&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt;&lt;span&gt; ComponentDecorator(Component component) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.component =&lt;span&gt; component;
    }

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 重写待装饰方法
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; show() {
        component.show();   &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;调用被装饰者的待装饰方法&lt;/span&gt;
&lt;span&gt;    }

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;LockDecorator&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;装饰器的具体实现&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; LockDecorator &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; ComponentDecorator {

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 构造器
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; component   被装饰者对象
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt;&lt;span&gt; LockDecorator(Component component) {
        &lt;/span&gt;&lt;span&gt;super&lt;/span&gt;&lt;span&gt;(component);
    }

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 重写待装饰方法
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; show() {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.setLock();   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;调用装饰方法&lt;/span&gt;
        &lt;span&gt;super&lt;/span&gt;.show();   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;调用父类的待装饰方法，也就是被装饰者的待装饰方法&lt;/span&gt;
&lt;span&gt;    }

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 装饰方法的实现
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setLock(){
        System.out.println(&lt;/span&gt;&quot;为组件加锁&quot;&lt;span&gt;);
    }

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;EyeDecorator&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;装饰器的具体实现&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; EyeDecorator &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; ComponentDecorator {

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 构造器
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; component   被装饰者对象
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt;&lt;span&gt; EyeDecorator(Component component) {
        &lt;/span&gt;&lt;span&gt;super&lt;/span&gt;&lt;span&gt;(component);
    }

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 重写待装饰方法
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; show() {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.setEye();   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;调用装饰方法&lt;/span&gt;
        &lt;span&gt;super&lt;/span&gt;.show();   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;调用父类的待装饰方法，也就是被装饰者的待装饰方法&lt;/span&gt;
&lt;span&gt;    }

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 装饰方法的实现
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setEye(){
        System.out.println(&lt;/span&gt;&quot;为组件加猫眼&quot;&lt;span&gt;);
    }

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Customer（测试类）&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Customer {

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
        Component door, decorator1, decorator2;
        door &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Door();
        decorator1 &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; LockDecorator(door);   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;装饰door对象&lt;/span&gt;
&lt;span&gt;        decorator1.show();
        System.out.println(&lt;/span&gt;&quot;------------------我是严肃的分割线------------------&quot;&lt;span&gt;);
        decorator2 &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; EyeDecorator(decorator1);   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;装饰decorator1对象&lt;/span&gt;
&lt;span&gt;        decorator2.show();
    }

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;运行结果&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;为组件加锁
大家好我是门
&lt;/span&gt;------------------我是严肃的分割线------------------&lt;span&gt;
为组件加猫眼
为组件加锁
大家好我是门&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;1、需要为某个现有对象添加一个新功能时，可以考虑装饰者模式或代理模式&lt;/p&gt;
&lt;p&gt;2、某个对象的功能经常发生变化或经常需要动态添加功能时&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;JDK中的InputStream就是经典的装饰者模式，有兴趣的小伙伴可以研究下源码&lt;/p&gt;

</description>
<pubDate>Wed, 22 Aug 2018 07:09:00 +0000</pubDate>
<dc:creator>渡劫锦官城</dc:creator>
<og:description>装饰者模式出现的原因 要对类的功能进行增强，可以新建一个类继承这个类，这种方法可以解决问题，但如果增加的功能越来越多，那继承的层次就越来越深，造成继承冗余的问题 装饰者模式可以不用继承类而增强类的功能</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/javafucker/p/9517778.html</dc:identifier>
</item>
<item>
<title>syzoj 中文安装指南 docker简易版 - c++蒟蒻</title>
<link>http://www.cnblogs.com/likecoding/p/9517749.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/likecoding/p/9517749.html</guid>
<description>&lt;td class=&quot;gutter&quot; readability=&quot;8&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;75&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;76&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;77&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;78&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;79&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;80&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;81&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;82&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;83&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;84&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;85&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;86&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;87&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;88&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;89&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;90&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;91&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;92&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;93&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;94&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;95&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;96&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;97&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;98&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;99&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;100&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;101&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;102&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;103&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;104&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;105&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;106&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;107&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;108&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;109&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;110&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;111&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;112&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;113&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;114&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;115&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;116&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;117&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;118&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;119&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;120&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;121&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;122&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;123&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;124&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;125&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;126&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;127&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;128&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;129&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;130&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;131&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;132&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;133&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;134&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;135&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;136&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;137&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;138&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;139&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;140&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;141&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;142&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;143&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;144&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;145&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;146&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;147&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;148&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;149&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;150&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;151&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;152&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;153&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;154&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;155&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;156&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;157&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;158&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;159&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;160&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;161&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;162&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;163&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;164&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;165&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;166&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;167&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;168&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;169&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;170&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot; readability=&quot;118&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;line&quot;&gt;{&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;  &quot;title&quot;: &quot;SYZOJ&quot;, // 网站名，可以改！&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;  &quot;hostname&quot;: &quot;0.0.0.0&quot;,   // 不要改！&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;  &quot;db&quot;: {&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    &quot;database&quot;: &quot;syzoj&quot;,  //若使用外部mysql数据库，请进行更改&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    &quot;username&quot;: &quot;syzoj&quot;,&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    &quot;password&quot;: &quot;syzoj&quot;,&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    &quot;host&quot;: &quot;mysql&quot;,&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    &quot;dialect&quot;: &quot;mysql&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;  },&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;  &quot;register_mail&quot;: false,   // 见 https://github.com/syzoj/syzoj#邮件配置&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;  &quot;email&quot;: {&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    &quot;method&quot;: &quot;aliyundm&quot;,&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    &quot;options&quot;: {&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;      &quot;AccessKeyId&quot;: &quot;xxxx&quot;,&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;      &quot;AccessKeySecret&quot;: &quot;xxxx&quot;,&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;      &quot;AccountName&quot;: &quot;xxxx&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    }&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;  },&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;  &quot;upload_dir&quot;: &quot;uploads&quot;, // 评测数据上传目录&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;  &quot;default&quot;: {             // 默认配置&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    &quot;problem&quot;: {&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;      &quot;time_limit&quot;: 1000,  // 时间限制&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;      &quot;memory_limit&quot;: 256  // 内存限制&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    },&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    &quot;user&quot;: {&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;      &quot;show&quot;: true,&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;      &quot;rating&quot;: 1500&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    }&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;  },&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;  &quot;sorting&quot;: {&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    &quot;ranklist&quot;: {&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;      &quot;field&quot;: &quot;rating&quot;,&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;      &quot;order&quot;: &quot;desc&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    },&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    &quot;problem&quot;: {&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;      &quot;field&quot;: &quot;id&quot;,&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;      &quot;order&quot;: &quot;asc&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    }&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;  },&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;  &quot;limit&quot;: {&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    &quot;time_limit&quot;: 10000,&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    &quot;memory_limit&quot;: 1024,&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    &quot;data_size&quot;: 209715200,&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    &quot;testdata&quot;: 209715200,&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    &quot;submit_code&quot;: 102400,&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    &quot;submit_answer&quot;: 10485760,&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    &quot;custom_test_input&quot;: 20971520,&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    &quot;testdata_filecount&quot;: 5&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;  },&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;  &quot;page&quot;: {&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    &quot;problem&quot;: 50,&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    &quot;problem_statistics&quot;: 10,&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    &quot;judge_state&quot;: 10,&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    &quot;ranklist&quot;: 20,&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    &quot;discussion&quot;: 10,&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    &quot;article_comment&quot;: 10,&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    &quot;contest&quot;: 10,&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    &quot;edit_contest_problem_list&quot;: 10,&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    &quot;edit_problem_tag_list&quot;: 10&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;  },&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;  &quot;languages&quot;: {&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    &quot;cpp&quot;: {&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;      &quot;show&quot;: &quot;C++&quot;,&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;      &quot;highlight&quot;: &quot;cpp&quot;,&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;      &quot;version&quot;: &quot;GCC 5.4.0&quot;,&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;      &quot;editor&quot;: &quot;c_cpp&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    },&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    &quot;cpp11&quot;: {&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;      &quot;show&quot;: &quot;C++11&quot;,&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;      &quot;highlight&quot;: &quot;cpp&quot;,&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;      &quot;version&quot;: &quot;GCC 5.4.0&quot;,&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;      &quot;editor&quot;: &quot;c_cpp&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    },&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    &quot;csharp&quot;: {&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;      &quot;show&quot;: &quot;C#&quot;,&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;      &quot;highlight&quot;: &quot;csharp&quot;,&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;      &quot;version&quot;: &quot;MCS 4.8.0.0, Mono 4.8.0&quot;,&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;      &quot;editor&quot;: &quot;csharp&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    },&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    &quot;c&quot;: {&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;      &quot;show&quot;: &quot;C&quot;,&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;      &quot;highlight&quot;: &quot;c&quot;,&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;      &quot;version&quot;: &quot;GCC 5.4.0&quot;,&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;      &quot;editor&quot;: &quot;c_cpp&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    },&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    &quot;vala&quot;: {&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;      &quot;show&quot;: &quot;Vala&quot;,&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;      &quot;highlight&quot;: &quot;vala&quot;,&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;      &quot;version&quot;: &quot;Vala 0.30.1, GCC 5.4.0&quot;,&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;      &quot;editor&quot;: &quot;vala&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    },&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    &quot;java&quot;: {&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;      &quot;show&quot;: &quot;Java&quot;,&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;      &quot;highlight&quot;: &quot;java&quot;,&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;      &quot;version&quot;: &quot;GCC 5.4.0&quot;,&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;      &quot;editor&quot;: &quot;java&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    },&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    &quot;pascal&quot;: {&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;      &quot;show&quot;: &quot;Pascal&quot;,&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;      &quot;highlight&quot;: &quot;pascal&quot;,&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;      &quot;version&quot;: &quot;FPC 3.0.0&quot;,&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;      &quot;editor&quot;: &quot;pascal&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    },&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    &quot;lua&quot;: {&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;      &quot;show&quot;: &quot;Lua&quot;,&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;      &quot;highlight&quot;: &quot;lua&quot;,&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;      &quot;version&quot;: &quot;Lua 5.2.4&quot;,&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;      &quot;editor&quot;: &quot;lua&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    },&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    &quot;luajit&quot;: {&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;      &quot;show&quot;: &quot;LuaJIT&quot;,&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;      &quot;highlight&quot;: &quot;lua&quot;,&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;      &quot;version&quot;: &quot;LuaJIT 2.0.4&quot;,&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;      &quot;editor&quot;: &quot;lua&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    },&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    &quot;python2&quot;: {&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;      &quot;show&quot;: &quot;Python 2&quot;,&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;      &quot;highlight&quot;: &quot;python&quot;,&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;      &quot;version&quot;: &quot;CPython 2.7.12&quot;,&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;      &quot;editor&quot;: &quot;python&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    },&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    &quot;python3&quot;: {&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;      &quot;show&quot;: &quot;Python 3&quot;,&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;      &quot;highlight&quot;: &quot;python&quot;,&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;      &quot;version&quot;: &quot;CPython 3.5.2&quot;,&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;      &quot;editor&quot;: &quot;python&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    },&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    &quot;nodejs&quot;: {&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;      &quot;show&quot;: &quot;Node.js&quot;,&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;      &quot;highlight&quot;: &quot;js&quot;,&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;      &quot;version&quot;: &quot;7.7.3&quot;,&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;      &quot;editor&quot;: &quot;javascript&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    },&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    &quot;ruby&quot;: {&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;      &quot;show&quot;: &quot;Ruby&quot;,&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;      &quot;highlight&quot;: &quot;ruby&quot;,&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;      &quot;version&quot;: &quot;2.3.1&quot;,&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;      &quot;editor&quot;: &quot;ruby&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    },&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    &quot;haskell&quot;: {&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;      &quot;show&quot;: &quot;Haskell&quot;,&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;      &quot;highlight&quot;: &quot;haskell&quot;,&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;      &quot;version&quot;: &quot;GHC 7.10.3&quot;,&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;      &quot;editor&quot;: &quot;haskell&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    },&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    &quot;ocaml&quot;: {&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;      &quot;show&quot;: &quot;OCaml&quot;,&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;      &quot;highlight&quot;: &quot;ocaml&quot;,&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;      &quot;version&quot;: &quot;Ocamlbuild 4.02.3&quot;,&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;      &quot;editor&quot;: &quot;ocaml&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    },&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    &quot;vbnet&quot;: {&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;      &quot;show&quot;: &quot;Visual Basic&quot;,&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;      &quot;highlight&quot;: &quot;vbnet&quot;,&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;      &quot;version&quot;: &quot;VBNC 0.0.0.5943, Mono 4.8.0&quot;,&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;      &quot;editor&quot;: &quot;vbscript&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    }&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;  },&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;  &quot;links&quot;: [ // 友链&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    {&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;      &quot;title&quot;: &quot;LibreOJ&quot;,&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;      &quot;url&quot;: &quot;https://loj.ac/&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;    }&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;  ],&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;  &quot;session_secret&quot;: &quot;233&quot;,                      // session&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;  &quot;judge_server_addr&quot;: &quot;http://127.0.0.1:5284&quot;, // 评测机地址&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;  &quot;judge_token&quot;: &quot;233&quot;,                         // 评测机 Token&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;  &quot;email_jwt_secret&quot;: &quot;test&quot;                    // email jsonwebtoken secret&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;line&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
</description>
<pubDate>Wed, 22 Aug 2018 07:06:00 +0000</pubDate>
<dc:creator>c++蒟蒻</dc:creator>
<og:description>今天，由likecoding的博主给大家带来如何安装syzoj 准备工具： 一台ubuntu18.04的电脑 本文GitHub地址：https://github.com/jyeric/hexo3 本文</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/likecoding/p/9517749.html</dc:identifier>
</item>
<item>
<title>支付宝支付之扫码支付（电脑网站支付）、H5支付（手机网站支付）相关业务流程分析总结 - 龙行天涯</title>
<link>http://www.cnblogs.com/luckyyang/p/9517402.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/luckyyang/p/9517402.html</guid>
<description>&lt;h3&gt;&lt;span&gt;&lt;strong&gt;前言&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;在上一篇文章《&lt;span&gt;&lt;a id=&quot;post_title_link_9509631&quot; href=&quot;https://www.cnblogs.com/luckyyang/p/9509631.html&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;微信支付之扫码支付、公众号支付、H5支付、小程序支付相关业务流程分析总结&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;》中，分析和总结了微信支付相关支付类型的业务流程，这里作为与微信支付平起平坐不相伯仲的支付宝支付，当然也是每个公司少不了的第三方支付接入选择。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;因此，本篇文章主要分析和总结支付宝支付中的扫码支付、H5支付相关业务流程。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;&lt;span&gt;&lt;strong&gt;概述&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;h4&gt;&lt;span&gt;1. &lt;strong&gt;电脑网站支付&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;&lt;span&gt;电脑网站支付，也称扫码支付，是专门针对电脑而开发的一种支付方式，既在网页展示一个动态生成的支付二维码，用户通过手机支付宝扫码以后可实现支付功能的一种支付方式。&lt;/span&gt;&lt;/p&gt;
&lt;h4&gt;&lt;span&gt;2. &lt;strong&gt;手机网站支付&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;&lt;span&gt;手机网站支付，是专门针对手机而开发的一种支付方式，跟扫码支付不一样的是，手机网站支付可以唤醒手机中安装的支付宝APP，直接通过支付宝APP实现支付功能；如果手机中没有安装支付宝APP，则会通过手机网页支付流程实现支付功能。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;&lt;span&gt;&lt;strong&gt;开发前准备&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;h4&gt;&lt;span&gt;1. &lt;strong&gt;电脑网站支付&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;&lt;span&gt;电脑网站支付的流程目前分新老版本两种，新版本开发文档地址：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;a href=&quot;https://docs.open.alipay.com/270/105899/&quot;&gt;&lt;span&gt;https://docs.open.alipay.com/270/105899/&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;老版本开发文档地址：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;a href=&quot;https://docs.open.alipay.com/62/103566&quot;&gt;&lt;span&gt;https://docs.open.alipay.com/62/103566&lt;/span&gt;&lt;/a&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;因本人所在公司目前所用的电脑网站支付依旧用的是老版本的支付功能，因此文中会对老版本的业务流程做一定分析。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;老版本：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;&lt;span&gt;登录支付宝开放平台后台，查询到合作伙伴身份（PID），然后根据开发文档正确配置RSA密钥。密钥配置操作手册：&lt;span&gt;&lt;a href=&quot;https://docs.open.alipay.com/common/104740&quot;&gt;&lt;span&gt;https://docs.open.alipay.com/common/104740&lt;/span&gt;&lt;/a&gt;&lt;/span&gt; &lt;/span&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;span&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/827287/201808/827287-20180822085302686-224859422.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; 　　老版本的支付接口叫及时到账接口，最原来的时候支付宝官方也是封装了一套开发demo的，后来由于新版本的到来，老版本的demo就被屏蔽了，我找了好半天都没能在官网文档中找到，因此只好到其他网站去找，于是找到了这篇文章《&lt;span&gt;&lt;a href=&quot;https://blog.csdn.net/yuanll023/article/details/54618011&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;支付宝即时到账接口&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;》，在这篇文章中找到了下载老版本demo的链接地址：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&amp;lt;a href=&quot;http://aopsdkdownload.cn-hangzhou.alipay-pub.aliyun-inc.com/demo/alipaydirect.zip?spm=a219a.7629140.0.0.ZXTiAo&amp;amp;file=alipaydirect.zip&quot; &amp;gt;下载DEMO&amp;lt;/a&amp;gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; 如果链接失效，则请访问我的百度网盘：&lt;span&gt;&lt;a href=&quot;https://pan.baidu.com/s/1scJRwAIhIfkXbhf8cegZkg&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;https://pan.baidu.com/s/1scJRwAIhIfkXbhf8cegZkg&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;；下载完毕后的demo结构如下：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/827287/201808/827287-20180822145725679-435323784.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/827287/201808/827287-20180822145752825-1450060800.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;



&lt;p&gt;&lt;span&gt;上图中分别是MD5跟RSA两中签名版本的SDK，打开文件夹以后又分贝包含了C#、JAVA、PHP三个版本的内容，这里选用C#版本，在往里打开就是具体的项目结构了：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/827287/201808/827287-20180822100258937-1975136503.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;其中主要demo源码就封装在app_code中：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/827287/201808/827287-20180822100359967-781925110.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; 有了开发demo，再结合官方文档的指导，将文件夹app_code中的所有内容复制粘贴到实际开发项目中，就可进行实际开发应用了。官方操作文档：&lt;span&gt;&lt;a href=&quot;https://docs.open.alipay.com/62/104746/&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;https://docs.open.alipay.com/62/104746/&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;新版本：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;&lt;span&gt;登录支付宝开放平台，在开发者中心登记应用，获得应用唯一标识（APPID），最后提交审核，待审核通过后该应用可正式使用；&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;配置密钥。操作手册地址：&lt;span&gt;&lt;a href=&quot;https://docs.open.alipay.com/200/105310&quot;&gt;&lt;span&gt;https://docs.open.alipay.com/200/105310&lt;/span&gt;&lt;/a&gt;&lt;/span&gt; ；&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;搭建和配置开发环境。电脑网站支付SDK与Demo：&lt;span&gt;&lt;a href=&quot;https://docs.open.alipay.com/270/106291/&quot;&gt;&lt;span&gt;https://docs.open.alipay.com/270/106291/&lt;/span&gt;&lt;/a&gt;&lt;/span&gt; &lt;/span&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;span&gt; 新版本的demo下载到本地以后的项目目录如下：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/827287/201808/827287-20180822100650220-1553990076.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/827287/201808/827287-20180822100950971-928389558.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;新版本的demo已经将大部分内容封装成了DLL，只保留了一个需要开发者自己去配置的类文件config.cs；因此开发前需要将BIn目录下的AopSdk.dll应用到项目中，并且将config.cs复制到项目中。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/827287/201808/827287-20180822101231877-568842224.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;其余事情则按官方开发文档操作即可。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;h4&gt;&lt;span&gt;2. &lt;strong&gt;手机网站支付&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;&lt;span&gt; 　 1.登录支付宝开放平台，根据实际需要创建应用，这里选择手机网站支付类型；配置相关参数后提交审核，审核通过后即可使用；开发平台操作手车URL：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;　　&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;　　&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;a href=&quot;https://docs.open.alipay.com/203/105910/&quot;&gt;&lt;span&gt;https://docs.open.alipay.com/203/105910/&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; 　 2. 搭建和配置开发环境。首先下载服务独胆SDK，并将相关SDK内容应用到开发项目中；SDK下载地址：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　&lt;span&gt;&lt;a href=&quot;https://docs.open.alipay.com/203/105910/&quot;&gt;&lt;span&gt;https://docs.open.alipay.com/203/105910/&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;手机网站支付的SDK跟电脑网站支付的最新版SDK是一样的，这里就不做重复介绍。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;对于电脑网站支付、手机网站支付中都提到的密钥配置，支付宝官方文档提供了相应的配置工具，但是仅针对与RSA签名方式，RSA密钥下载及操作文档：&lt;span&gt;&lt;a href=&quot;https://docs.open.alipay.com/291/105971&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;https://docs.open.alipay.com/291/105971&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;，下载了密钥生成工具后，解压压缩包：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/827287/201808/827287-20180822104451932-142391918.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;双击点击RSA签名验签工具.bat：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/827287/201808/827287-20180822104601357-650092217.png&quot; alt=&quot;&quot; width=&quot;601&quot; height=&quot;514&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/827287/201808/827287-20180822104906252-617425890.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;最后将商户公钥上传至支付宝开放平台，保留商户私钥给到自己，下面就可以进行开发了。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;&lt;span&gt;&lt;strong&gt;业务流程&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;因公司项目接入的是支付宝电脑网站支付的老版本，所以这里会对新版本的业务流程做一个梳理。&lt;/span&gt;&lt;/p&gt;
&lt;h4&gt;&lt;span&gt;1. &lt;strong&gt;电脑网站支付&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;老版本业务流程：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;&lt;span&gt;用户在电脑下单，选择支付宝支付；&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;商户后台生成订单，并准备和组合好调起支付宝支付所需的参数，最终形成跳转到支付宝网页的URL链接。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;商户后台跳转至上一步形成的URL，既跳转至支付宝网页；&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;支付宝后台接收请求并处理；&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;支付宝网页展示支付二维码；&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;用户打开手机支付宝进行扫码支付；&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;支付宝后台检测到支付成功，跳转至商户回调页面，并向商户异步通知地址发送通知；&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;商户在回调页面获取回调信息，并作相关业务逻辑处理，并根据成功或失败的情况做跳转到到支付成功或失败页面的处理；&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;商户后台异步通知地址收到支付宝的异步通知，并做相关业务逻辑处理，最终返回success或fail的标识以告知支付宝商户后台已经收到通知。&lt;/span&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;span&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/827287/201808/827287-20180822085424188-1758340151.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;新版本业务流程：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;&lt;span&gt;用户在电脑下单，选择支付宝支付；&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;商户后台生成订单，并准备和组合好调起支付宝支付所需的参数，调用统一下单接口；&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;支付宝返回前台页面请求需要的完整form表单的html（包含自动提交脚本），商户直接输出该HTML到前台页面，最终将支付二维码展示给用户；&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;用户打开手机支付宝进行扫码支付；&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;支付宝后台检测到支付成功，跳转至商户回调页面，并向商户异步通知地址发送通知；&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;商户在回调页面获取回调信息，并作相关业务逻辑处理，并根据成功或失败的情况做跳转到到支付成功或失败页面的处理；&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;商户后台异步通知地址收到支付宝的异步通知，并做相关业务逻辑处理，最终返回success或fail的标识以告知支付宝商户后台已经收到通知。&lt;/span&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;span&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/827287/201808/827287-20180822085436478-1112545827.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;h4&gt;&lt;span&gt;2. &lt;strong&gt;手机网站支付&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;&lt;span&gt;支付宝的手机网站支付目前也分新老版本两种，但由于惠庶网项目采用的是新版本支付，因此下面只介绍新版本的业务流程。&lt;/span&gt;&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;&lt;span&gt;用户在手机端下单，选择支付宝支付；&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;商户系统按照&lt;span&gt;&lt;a href=&quot;https://docs.open.alipay.com/203/107090&quot;&gt;&lt;span&gt;手机网站支付接口alipay.trade.wap.pay&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;API的参数规范生成订单数据，并以包含form表单的HTML形式输出到前端页面；&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;前端页面通过form表单的形式请求到支付宝；&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;支付宝将页面跳转至支付宝收银台，如果用户手机安装了支付宝APP，则自动唤起支付宝APP，否则就调用支付宝网页支付；&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;用户输入密码进行支付操作；&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;支付宝后台检测到支付成功，跳转至商户回调页面，并向商户异步通知地址发送通知；&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;商户在回调页面获取回调信息，并作相关业务逻辑处理，并根据成功或失败的情况做跳转到到支付成功或失败页面的处理；&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;商户后台异步通知地址收到支付宝的异步通知，并做相关业务逻辑处理，最终返回success或fail的标识以告知支付宝商户后台已经收到通知。&lt;/span&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;span&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/827287/201808/827287-20180822085448415-432870288.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;&lt;span&gt;分析和总结&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt; 1. 支付宝支付的新老版本电脑网站支付、手机网站支付支付接口的请求参数中都有两个参数return_url和notify_url，return_url传的是支付完成后支付宝要跳转的同步回调地址，notify_url传的是支付宝支付完成后要发送异步通知的地址；但是支付宝向这两个地址发送请求的顺序是不定的，因此在两个地址的后台都需要做针对支付完成后订单业务逻辑处理的操作；区别在于return_url操作完成以后直接跳转到支付成功或失败页面，而notify_url则是返回SUCCESS或FAIL给到支付宝；&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　2. 支付宝电脑网站支付的老版本demo在官方文档已经找不到，因此如果不是原来项目中已经使用了老版本开发demo，都建议使用新版本demo进行开发；&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; 3. 电脑网站支付新老版本、手机网站支付调起支付宝支付的区别：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　电脑网站老版本：根据及时到账接口提供的请求参数说明，调用SDK生成可以调起支付宝支付的URL，商户后台直接做Respopnse.Redirect(URL)操作，既可调起支付宝支付。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　电脑网站新版本：商户调用统一下单接口，统一下单接口返回完整form表单的HTML（HTML中包含自动提交表单的脚本），商户后台输出该form表单，即可调起支付宝支付。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　手机网站新版本：商户后台向支付宝api发起支付请求，支付宝api返回完整form表单的HTML（HTML中包含自动提交的脚本），商户后台输出form表单。即可掉漆支付宝支付。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; 4. 对于手机网站支付，在用户将有form表单的HTML字符串输出后，自动提交脚本会向支付宝收银台发起请求，支付宝收银台会先判断用户手机上是否安装了支付宝APP，如有安装，则调起支付宝APP发起支付功能，如果没有，则跳转至网页版支付宝支付，实现支付功能。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;如有发现错误及解释不当之处，欢迎大家指正。&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt; &lt;/h3&gt;
&lt;h3&gt;&lt;span&gt;参考文档&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;手机网站支付（新版）：&lt;span&gt;&lt;a href=&quot;https://docs.open.alipay.com/203/105285/&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;https://docs.open.alipay.com/203/105285/&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;电脑网站支付（老版）：&lt;span&gt;&lt;a href=&quot;https://docs.open.alipay.com/62/104746/&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;https://docs.open.alipay.com/62/104746/&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;电脑网站支付（新版）：&lt;span&gt;&lt;a href=&quot;https://docs.open.alipay.com/270/105899/&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;https://docs.open.alipay.com/270/105899/&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;转载请注明本文出处：&lt;span&gt;&lt;a href=&quot;https://www.cnblogs.com/luckyyang/p/9517402.html&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;https://www.cnblogs.com/luckyyang/p/9517402.html&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Wed, 22 Aug 2018 07:02:00 +0000</pubDate>
<dc:creator>龙行天涯</dc:creator>
<og:description>前言 在上一篇文章《微信支付之扫码支付、公众号支付、H5支付、小程序支付相关业务流程分析总结》中，分析和总结了微信支付相关支付类型的业务流程，这里作为与微信支付平起平坐不相伯仲的支付宝支付，当然也是每</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/luckyyang/p/9517402.html</dc:identifier>
</item>
<item>
<title>【RL-TCPnet网络教程】第22章 RL-TCPnet之网络协议IP - 席萌0209</title>
<link>http://www.cnblogs.com/armfly/p/9517696.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/armfly/p/9517696.html</guid>
<description>&lt;p&gt;&lt;span&gt;本章节为大家讲解IP（Internet Protocol，网络协议），通过前面章节对TCP和UDP的学习，需要大家对IP也有个基础的认识。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;（本章的知识点主要整理自网络）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;22.1  初学者重要提示&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;22.2  IP基础知识参考资料&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;22.3  IP基础知识点&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;22.4  总结&lt;/span&gt;&lt;/p&gt;


&lt;h2&gt;22.1  初学者重要提示&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;通过前面几个章节对TCP和UDP的学习，需要初学者对IP的基础知识点也有个认识。&lt;/span&gt;&lt;/p&gt;

&lt;h2&gt;22.2   IP基础知识参考资料&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;为了对TCP和UDP有更全面的认识，需要对IP协议的一些基础知识有个了解。大家可以从以下地址获得IP协议基础知识：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;对于初学者来说，学习上面四个参考资料就够了。如果大家有网络方面的书籍，比如《TCP/IP详解》，也可以直接看书籍。&lt;/span&gt;&lt;/p&gt;

&lt;h2&gt;22.3  IP基础知识点&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;（这里的知识点整理自上面的参考资料地址）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;教程这里也对IP的基础知识点做个介绍，方便大家先有个大概的认识。&lt;/span&gt;&lt;/p&gt;

&lt;h3&gt;22.3.1 IP简要说明&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;IP（Internet Protocol，缩写为 IP）协议是用于分组交换网络的一种面向数据的协议，IP是在TCP/IP协议中网络层的主要协议。它在TCP/IP参考模型的位置如下：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1379107/201808/1379107-20180822145751799-1379919014.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;IP协议在源地址和目的地址之间传送一种称之为数据包的东西，它还提供对数据大小的重新组装功能，以适应不同网络对包大小的要求。为此目的，IP定义了寻址方法和数据报的封装结构。第一个架构的主要版本，现在称为IPv4，仍然是最主要的互联网协议，尽管世界各地正在积极部署IPv6。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;IP的责任就是把数据从源传送到目的地。它不负责保证传送可靠性、流控制、包顺序和其它对于主机到主机协议来说很普通的服务。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;这个协议由主机到主机协议调用，而此协议负责调用本地网络协议将数据包传送到下一个网关或目的主机。例如TCP可以调用IP协议，在调用时传送目的地址和源地址作为参数，IP形成数据包并调用本地网络（协议）接口传送数据包。&lt;/span&gt;&lt;/p&gt;

&lt;h3&gt;22.3.2 IP封装&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;数据在IP互联网中传送时会被封装为数据报文。IP协议的独特之处在于：在报文交换网络中主机在传输数据之前，无须与先前未曾通信过的目的主机预先创建好一条特定的“通路”。互联网协议提供了一种“不可靠的”数据包传输机制（也被称作“尽力而为”）；也就是说，它不保证数据能准确的传输。数据包在到达的时候可能已经损坏，顺序错乱（与其它一起传送的报文相比），产生冗余包，或者全部丢失。如果应用需要保证可靠性，一般需要采取其他的方法，例如利用IP的上层协议控制。&lt;/span&gt;&lt;/p&gt;

&lt;h3&gt;22.3.3 IP提供的服务&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;&lt;span&gt;IP实现两个基本功能：寻址和分段&lt;/span&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;span&gt;IP可以根据数据包包头中包括的目的地址将数据包传送到目的地址，在此过程中IP负责选择传送的道路，这种选择道路称为路由功能。如果有些网络内只能传送小数据包，IP可以将数据包重新组装并在报头域内注明。IP模块中包括这些基本功能，这些模块存在于网络中的每台主机和网关上，而且这些模块（特别在网关上）有路由选择和其它服务功能。对IP来说，数据包之间没有什么联系。&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;&lt;strong&gt;&lt;span&gt;IP使用四个关键技术提供服务：服务类型，生存时间，选项和报头校验码&lt;/span&gt;&lt;/strong&gt;&lt;/strong&gt;
&lt;ul&gt;&lt;li&gt;服务类型指希望得到的服务质量。服务类型是一个参数集，这些参数是Internet能够提供服务的代表。这种服务类型由网关使用，用于在特定的网络，或是用于下一个要经过的网络，或是下一个要对这个数据包进行路由的网关上选择实际的传送参数。&lt;/li&gt;
&lt;li&gt;生存时间是数据包可以生存的时间上限。它由发送者设置，由经过路由的地方处理。如果未到达时生存时间为零，抛弃此数据包。&lt;/li&gt;
&lt;li&gt;对于控制函数来说选项是重要的，但对于通常的通信来说它没有存在的必要。选项包括时间戳、安全和特殊路由。&lt;/li&gt;
&lt;li&gt;报头校验码保证数据的正确传输。如果校验出错，抛弃整个数据包。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;span&gt;IP不提供可靠的传输服务&lt;/span&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;span&gt;它不提供端到端的或（路由）结点到（路由）结点的确认，对数据没有容错控制，它只使用报头的校验码，它不提供重发和流量控制。如果出错可以通过ICMP报告，ICMP在IP模块中实现。&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;&lt;span&gt;IP协议设计原则&lt;/span&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;span&gt;IP协议的设计原则，假定网络基础设施本身就是不可靠的单一网络元素或传输介质，并且它使用的是动态的节点和连接，不存在中央监测和性能衡量机制来跟踪和维护网络的状态。为了减少网络的复杂性，大部分网络分布在每个数据传输的终端节点。传输路径中的路由器只是简单地将数据报文发送到下一个匹配目的地址的网关。&lt;/span&gt;&lt;/p&gt;

&lt;h2&gt;22.4 总结&lt;/h2&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;本章节就为大家讲解这么多，更多IP协议的相关知识需要大家查阅相关书籍进行学习，或者网上搜索相关资料进行学习。&lt;/span&gt;&lt;/p&gt;

&lt;div&gt;&lt;span&gt; 我的博客即将搬运同步至腾讯云+社区，邀请大家一同入驻：&lt;img alt=&quot;&quot;/&gt;https://cloud.tencent.com/developer/support-plan?invite_code=1zwoow5ctts00 &lt;/span&gt;&lt;/div&gt;
</description>
<pubDate>Wed, 22 Aug 2018 06:59:00 +0000</pubDate>
<dc:creator>席萌0209</dc:creator>
<og:description>第22章 RL-TCPnet之网络协议IP 本章节为大家讲解IP（Internet Protocol，网络协议），通过前面章节对TCP和UDP的学习，需要大家对IP也有个基础的认识。 （本章的知识点主</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/armfly/p/9517696.html</dc:identifier>
</item>
<item>
<title>直播的用户体验体系与质量监控方案 - 又拍云</title>
<link>http://www.cnblogs.com/upyun/p/9517672.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/upyun/p/9517672.html</guid>
<description>
&lt;blockquote readability=&quot;12&quot;&gt;
&lt;p&gt;6月24日，又拍云OpenTalk |2018音视频技术沙龙·上海站顺利落幕，这是又拍云OpenTalk | 2018音视频技术沙龙系列活动的第二站。作为又拍云技术分享的看家活动，本次OpenTalk邀请了网易云、谷人云、又拍云、战旗等四家公司的讲师。四位讲师在活动中拿出了看家本领，为到场、观看直播的观众贡献了精彩的分享！&lt;/p&gt;&lt;p&gt;战旗直播高级流媒体研发工程师石硕，在现场分享了《视频直播的用户体验体系与质量监控方案》，重点介绍了直播质量监控方案的搭建，以及直播卡顿、延时监控、首屏秒开三个方面的优化。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;&lt;li&gt;直播质量评价体系&lt;/li&gt;
&lt;li&gt;直播质量监控方案的结构和逻辑&lt;/li&gt;
&lt;li&gt;卡顿优化的十条法则&lt;/li&gt;
&lt;li&gt;延时监控：自定义扩展、数字水印&lt;/li&gt;
&lt;li&gt;首屏秒开的三个优化方向&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img class=&quot;origin_image zh-lightbox-thumb lazy&quot; src=&quot;https://pic2.zhimg.com/80/v2-f5cbc7181d91093f55d89b23e33ead37_hd.jpg&quot; alt=&quot;&quot; width=&quot;774&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;774&quot; data-rawheight=&quot;558&quot; data-original=&quot;https://pic2.zhimg.com/v2-f5cbc7181d91093f55d89b23e33ead37_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-f5cbc7181d91093f55d89b23e33ead37_b.jpg&quot;/&gt;&lt;/p&gt;
&lt;p&gt;△ 石硕：战旗直播高级流媒体研发工程师&lt;/p&gt;
&lt;p&gt;以下是石硕分享内容的整理：&lt;/p&gt;

&lt;p&gt;大家好，我是来自战旗直播平台的高级流媒体工程师石硕。今天我主要讲两个内容：第一方面，直播、点播的整体用户体验体系。现有公开场合讲整体用户体验体系的内容偏少一点。另一方面，“质量监控方案”，这也很少有提及的。&lt;/p&gt;
&lt;p&gt;从本质上来讲，用户体验和质量监控，做的是一件事情，即：在一定程度上保证用户观看直播的体验是最好的。&lt;/p&gt;
&lt;p&gt;我的分享内容主要分为四个部分：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;直播质量评价。用户体系覆盖了哪些方面，用户整体的体验由几部分组成的。&lt;/li&gt;
&lt;li&gt;卡顿监控与优化。卡顿优化依赖于监控体系如何发现卡顿现象。&lt;/li&gt;
&lt;li&gt;延时监控的难题。视频延时监控存在难题，因为现在业界对于“延时”的监控还是比较欠缺，商用方案里面还没有看到比较切实有效的办法。&lt;/li&gt;
&lt;li&gt;首屏优化要点。首屏优化在行业里讲得比较多，我简单罗列一下要点。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;直播质量评价体系&lt;/h2&gt;
&lt;p&gt;直播质量评价这一块，先讲一下音视频的质量评价体系。&lt;/p&gt;
&lt;p&gt;音视频评价起源比较早。早在1996年，ITU国际组织就已经有了主观评价流媒体音视频的传输质量，当时主要评测电话的通话质量。然后在2003年根据个人主观评价提出了一套MOS体系，2012年、2013年对MOS体系进行了不同方面的补充，推出了vMos体系。&lt;/p&gt;
&lt;p&gt;今天我主要讲华为的U-vMOS主观质量评价体系。一方面，对整套体系，国内中文的资料比较充实；另一方面，U-vMOS在vMOS的基础上面做扩展的，U-vMOS的整个质量体系，也是在vMOS内容里面的。&lt;/p&gt;
&lt;p&gt;MOS质量评价的主要目的，是根据用户的主观体验来对音频或者是视频质量进行评分。它的分值，常规意义上是分为五分，分值越高它的质量就越好。&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;origin_image zh-lightbox-thumb lazy&quot; src=&quot;https://pic2.zhimg.com/80/v2-3897d5222fd07db6d5f4d073afd7f86f_hd.jpg&quot; alt=&quot;&quot; width=&quot;561&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;561&quot; data-rawheight=&quot;302&quot; data-original=&quot;https://pic2.zhimg.com/v2-3897d5222fd07db6d5f4d073afd7f86f_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-3897d5222fd07db6d5f4d073afd7f86f_b.jpg&quot;/&gt;&lt;/p&gt;
&lt;p&gt;△ MOS质量评价&lt;img class=&quot;origin_image zh-lightbox-thumb lazy&quot; src=&quot;https://pic3.zhimg.com/80/v2-b4eb3dca3c079c30ac6f89a8bbfb9fb2_hd.jpg&quot; alt=&quot;&quot; width=&quot;1204&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1204&quot; data-rawheight=&quot;266&quot; data-original=&quot;https://pic3.zhimg.com/v2-b4eb3dca3c079c30ac6f89a8bbfb9fb2_r.jpg&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-b4eb3dca3c079c30ac6f89a8bbfb9fb2_b.jpg&quot;/&gt;△ U-vMOS质量评价的建模方法&lt;/p&gt;
&lt;p&gt;MOS质量评价体系针对音频质量。视频质量的评价可以在这个基础上做一个延伸，具体看一下U-vMOS质量评价体系。&lt;/p&gt;
&lt;p&gt;U-vMOS将视频质量评价分为三个部分：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;视频质量，指视频的分辨率、帧率、码率、编码级别；&lt;/li&gt;
&lt;li&gt;互动体验，主要指被叫视频载入时间的长短；&lt;/li&gt;
&lt;li&gt;观看体验，主要指画面的花屏和卡顿。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;针对视频质量的各种相关因素，其中我们能取到的“典型分值”的“分”，主要是播放设备的屏幕尺寸及视频的分辨率，这两个相关度是比较大。&lt;/p&gt;
&lt;p&gt;视频质量的评分&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;origin_image zh-lightbox-thumb lazy&quot; src=&quot;https://pic3.zhimg.com/80/v2-52d91bf5b7b42860776c8f7384b4bdda_hd.jpg&quot; alt=&quot;&quot; width=&quot;1218&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1218&quot; data-rawheight=&quot;558&quot; data-original=&quot;https://pic3.zhimg.com/v2-52d91bf5b7b42860776c8f7384b4bdda_r.jpg&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-52d91bf5b7b42860776c8f7384b4bdda_b.jpg&quot;/&gt;△ 视频质量：视频分辨率与屏幕尺寸的关系&lt;/p&gt;
&lt;p&gt;4分以上可以算是比较好的观看体验，看这张表格，4.5寸、5.5寸的手机屏幕，都至少需要有720P的视频流才能达到4分以上。那我们做手机的视频服务时，如果用户对于视频的要求不是特别苛刻，通常情况来讲720P足够了；个别提供1080P，其实对观看体验并没有特别大的提升，仅从4.3分提升到4.6分，这个过程不光对码率有要求，视频帧率、解码难度都会高出很多。&lt;/p&gt;
&lt;p&gt;一般电视端想要达到4.0分以上的观看体验的话，需要1080P的视频。这个表格对直播企业的对于视频流分辨率的选择是具有一定参考意义的。&lt;/p&gt;
&lt;p&gt;视频体验，首屏秒开的标准&lt;/p&gt;
&lt;p&gt;互动体验，主要是涉及到常规意义上所讲的“首屏秒开”。首屏秒开通常被认为在100毫秒以内才算完美。&lt;/p&gt;
&lt;p&gt;这个要求是局域网环境下，公网环境下首屏秒开达到100毫秒的几乎没有，或者说特别少。常规意义上，我们都会努力让首屏秒开做到1秒也就是1000毫秒左右的时间。&lt;/p&gt;
&lt;p&gt;我们能了解到的，现有像快手、斗鱼、虎牙这一类的App，通常首屏时间都会做到3秒以内。3秒是一个界限，大家一般是2秒左右。&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;origin_image zh-lightbox-thumb lazy&quot; src=&quot;https://pic1.zhimg.com/80/v2-d4e3e72fbed27697daf7dec77805ce92_hd.jpg&quot; alt=&quot;&quot; width=&quot;1222&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1222&quot; data-rawheight=&quot;436&quot; data-original=&quot;https://pic1.zhimg.com/v2-d4e3e72fbed27697daf7dec77805ce92_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-d4e3e72fbed27697daf7dec77805ce92_b.jpg&quot;/&gt;△ 互动体验（首屏秒开）的典型分值&lt;/p&gt;
&lt;p&gt;观看体验：花屏不再，重在优化卡顿&lt;/p&gt;
&lt;p&gt;观看体验包括两部分：花屏和卡顿。&lt;/p&gt;
&lt;p&gt;现在直播平台在又拍云等CDN服务商的努力下，“花屏”已经出现得很少了，主要影响观看体验得因素是“卡顿“，主要指的是在一分钟内卡顿出现了多少次，每一次卡顿的时长有多少，最后得出来一个卡顿的时长占比。观看体验的质量评价体系是实验室环境下得出的。&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;origin_image zh-lightbox-thumb lazy&quot; src=&quot;https://pic4.zhimg.com/80/v2-77ac018e3c848d08ee1d082e26b27344_hd.jpg&quot; alt=&quot;&quot; width=&quot;1232&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1232&quot; data-rawheight=&quot;322&quot; data-original=&quot;https://pic4.zhimg.com/v2-77ac018e3c848d08ee1d082e26b27344_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-77ac018e3c848d08ee1d082e26b27344_b.jpg&quot;/&gt;△ 观看体验的典型分值 (卡顿统计周期1分钟)&lt;/p&gt;
&lt;h2&gt;直播质量监控方案的结构和逻辑&lt;/h2&gt;
&lt;p&gt;国外针对于这一套体系的执行方面可能会更多一些，国内企业目前来说主要关注的可能是卡顿和首屏秒开。延时的话，关注相对会少一些。&lt;/p&gt;
&lt;p&gt;我们重点讲一下卡顿的优化体系，包括“卡顿监控”，以及监控的结果收集完之后进行的一些优化工作。&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;origin_image zh-lightbox-thumb lazy&quot; src=&quot;https://pic4.zhimg.com/80/v2-1f00f1aace44458381512aa43b32c96b_hd.jpg&quot; alt=&quot;&quot; width=&quot;1555&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1555&quot; data-rawheight=&quot;433&quot; data-original=&quot;https://pic4.zhimg.com/v2-1f00f1aace44458381512aa43b32c96b_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-1f00f1aace44458381512aa43b32c96b_b.jpg&quot;/&gt;△ 直播质量监控系统组成&lt;/p&gt;
&lt;p&gt;卡顿主要分为四个部分：数据收集、数据分析、数据展示、预警系统。&lt;/p&gt;
&lt;p&gt;数据收集，收集主播端和观看端的设备信息、网络环境。设备信息主要是指设备机型、用户IP，以及视频流的分辨率、码率，包括播放过程中的CPU使用率、GDP使用率、内存使用率。网络环境，主要指连接方式。还有一些需要探测才能得知的数据，比如：优先收集手机到本地路由器的网络情况，然后收集手机到公网出口的环境，以及手机到CDN节点的网络情况。第三部分数据是正常监控需要的，包括卡顿数据、首屏数据、延时数据。&lt;/p&gt;
&lt;p&gt;数据分析，收集完之后，放到大数据中心做一些数据过滤、综合分析；把用户ID分门别类的处理成我们实际上运营需要的监控数据。&lt;/p&gt;
&lt;p&gt;第三是数据展示，这一块主要是地图展示。在一张地图上面，把卡顿率及其它的一些数据展现出来，就是观看会更方便一些。这是战旗整体卡顿监控的监控图表，左下角标注了卡顿率从低到高，最低是“0”，最高是“15”。可以看到，战旗的卡顿率应该在“4”个点以内，一般是3点多。&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;origin_image zh-lightbox-thumb lazy&quot; src=&quot;https://pic2.zhimg.com/80/v2-507d044a8df207ea56ef5ffd8ce43ff8_hd.jpg&quot; alt=&quot;&quot; width=&quot;1646&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1646&quot; data-rawheight=&quot;1100&quot; data-original=&quot;https://pic2.zhimg.com/v2-507d044a8df207ea56ef5ffd8ce43ff8_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-507d044a8df207ea56ef5ffd8ce43ff8_b.jpg&quot;/&gt;△ 卡顿数据展示示意图&lt;/p&gt;
&lt;p&gt;第四部分是预警系统。这一块主要是运维人员及CDN厂商。常规意义上，这个预警通常会直接给自己公司的运营人员。但是做直播的，基本上都会用到CDN厂商的云加速服务。如果我们发现用户卡顿的话，其实最终会分析得出来用户卡顿原因是CDN某个节点不好，把这个分析反馈给CDN，让CDN进行相应的调整。&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;origin_image zh-lightbox-thumb lazy&quot; src=&quot;https://pic3.zhimg.com/80/v2-c53ba1ecdea338472f85ae515c802416_hd.jpg&quot; alt=&quot;&quot; width=&quot;1286&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1286&quot; data-rawheight=&quot;580&quot; data-original=&quot;https://pic3.zhimg.com/v2-c53ba1ecdea338472f85ae515c802416_r.jpg&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-c53ba1ecdea338472f85ae515c802416_b.jpg&quot;/&gt;△ 卡顿监控体系的运行逻辑&lt;/p&gt;
&lt;p&gt;整个监控体系，我们这边可以简单的分为五大部分：客户端、监控系统、运维支持、智能调度、CDN厂商。&lt;/p&gt;
&lt;p&gt;监控系统首先是给运维支持，然后是给CDN厂商，告诉发生了某个事。然后是给智能调度系统，这一部分的报警级别相对低一点，是针对个别用户的报警。我们可以针对用户报警，根据他的硬件设备情况及网络情况做一次智能调度。比如：探测到带宽不够，发生了卡顿；调度系统只需要给客户端发一条命令，告诉它带宽不够，让它把码率降一级，可能卡顿情况就会缓解。&lt;/p&gt;
&lt;h2&gt;卡顿优化十条法则&lt;/h2&gt;
&lt;p&gt;针对于卡顿优化，我们这边可以分为十个部分：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;HTTP-DNS调度&lt;/li&gt;
&lt;li&gt;播放端本地调度&lt;/li&gt;
&lt;li&gt;服务端智能调度&lt;/li&gt;
&lt;li&gt;服务端手动调度&lt;/li&gt;
&lt;li&gt;CDN手动调度&lt;/li&gt;
&lt;li&gt;使用UDP推流&lt;/li&gt;
&lt;li&gt;推流端流畅度监控&lt;/li&gt;
&lt;li&gt;提供多种清晰度选择&lt;/li&gt;
&lt;li&gt;播放器优化&lt;/li&gt;
&lt;li&gt;用户反馈系统&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;HTTP-DNS调度：在国内DNS污染会比较严重，可能会把DNS解析到错误的节点上去。这个解析服务，可能会把你的域名，比如把海徐汇区的域名解析到浦东新区去。我们尽可能去避免这种错误，这个时候就需要HTTP-DNS调度。我们每次拉一个地址之前，使用自己的服务器先做一次解析，保证每次反馈给你是最近的服务节点，这就会比较流畅。&lt;/p&gt;
&lt;p&gt;播放端本地调度：如果发现用户播放比较卡顿，我们本地会有一些检测机制。比如检测是硬件CPU不高，CPU使用率超高了，我们可能就会把它的分辨率、解码率降一下，让CPU有所缓解，这个时候卡顿就会缓解。另外，也可能是网络导致的本地卡顿，我们就可以给他换一个服务节点，或者是做一些其它的处理。&lt;/p&gt;
&lt;p&gt;服务器端智能调度、服务器端手动调度：服务器端的智能调度、手动调度，这个主要是在后端通过远程方式去做一些调整。在智能调度系统里面，我们会根据用户的情况做统一调度。比如用户硬件不够了，我们帮他加一点。如果用户卡顿的话，我们先要判断是CDN节点的问题，还是用户自己的问题。如果是CDN节点的问题，我们帮他自动调到下一个节点去。&lt;/p&gt;
&lt;p&gt;CDN手动调度：指手动干预的方式。比如：现在发生了用户卡顿，智能调度系统比如发现上海徐汇区的一个服务节点特别不好，我们可以手动把这个节点拉黑掉，用户不会访问到这个质量比较差的节点。&lt;/p&gt;
&lt;p&gt;第四点、第五点是会有一定的重合度，因为CDN的手动调度也是根据智能调度系统收集到的数据、下发的数据来进行相应的一些处理。&lt;/p&gt;
&lt;p&gt;UDP推流：TCP的协议容灾和慢恢复机制导致它抵抗网络抖动的能力会比较差。为了解决因为网络抖动导致的卡顿问题，我们会使用“自定义”或者是自有UDP协议处理这个问题。谷歌之前有推出类似于“类UDP”的各种SDK包，使用UDP代替TCP对抗网络抖动，可以把TCP的容灾机制、恢复机制规避掉，可以快速地恢复网络。UDP还有一个作用，在丢包的情况下“抗丢包能力”比较好，它可以自己自主决定“重发多少数据包”。&lt;/p&gt;
&lt;p&gt;推流端流畅度监控：这一块主要是监控主播推流是否有音视频不同步或者帧率不够的情况。如果主播端卡顿的话，所有的用户调度到任何节点都会卡顿，所以推流端监控相对会重要一些。针对于主播端的监控，我们实时反馈给主播，让主播切换网络或者是做一些调整。&lt;/p&gt;
&lt;p&gt;提供多种清晰度选择：提供多种清晰度选择，这个主要针对于用户手动操作的。通常情况下会提供标情、高清、超清等多种分辨率。不同的分辨率对应的码率、编码复杂度都是不一样的。清晰度越高，相应解码的难度就会越高。让用户可以手动去选择，在整体情况比较好的时间，他可以提高清晰度。当发生卡顿的情况下，可以手动降清晰度或者是降分辨率，可以解决一部分卡顿的问题。&lt;/p&gt;
&lt;p&gt;播放器优化：播放器的优化，针对于卡顿主要是处理两个事情：一个是音视频不同步导致的卡顿。第二部分，主要是针对于缓冲区的处理，缓冲区相对于对抗“网络抖动”是比较有用处的。&lt;/p&gt;
&lt;p&gt;用户反馈系统：这一块是用户主动提供一些卡顿的建议或者问题，用户的反馈系统可以作为我们整体监控系统的一个补充，可以帮我们改善整个监控系统。&lt;/p&gt;
&lt;h2&gt;延时监控：自定义扩展、数字水印&lt;/h2&gt;
&lt;p&gt;下面讲一下“延时监控”。“延时监控”我主要讲两个部分的内容：&lt;/p&gt;
&lt;p&gt;第一部分，开发阶段延时的计算及延时的优化；&lt;/p&gt;
&lt;p&gt;第二部分，发布阶段的延时计算。&lt;/p&gt;
&lt;p&gt;通常情况下，直播研发的开发阶段的延时都会以“北京时间”的方式做对比。&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;origin_image zh-lightbox-thumb lazy&quot; src=&quot;https://pic1.zhimg.com/80/v2-1a7fdd6268a347a42a96284585cf3dc0_hd.jpg&quot; alt=&quot;&quot; width=&quot;2728&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;2728&quot; data-rawheight=&quot;794&quot; data-original=&quot;https://pic1.zhimg.com/v2-1a7fdd6268a347a42a96284585cf3dc0_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-1a7fdd6268a347a42a96284585cf3dc0_b.jpg&quot;/&gt;△ 左图是推流端本地的“北京时间”，右边是播放器播放的“北京时间”&lt;/p&gt;
&lt;p&gt;开发阶段的延时，推流工具、播放工具在同一台机器上。左边的时间减去右边的时间，实际上就是直播延时。我们可以看到上图的直播延时是2秒2毫秒。&lt;/p&gt;
&lt;p&gt;开发阶段的延时计算到了发布阶段已经不管用了，因为正常情况下不可能实时盯着用户手机看“延时多高”，也不可能在视频流里面嵌入一个“北京时间”。&lt;/p&gt;
&lt;p&gt;发布阶段延时计算需要借助一些另外的手段，一种方式是自定义扩展，一种方式是数字水印。&lt;/p&gt;
&lt;p&gt;自定义扩展实现延时监控&lt;/p&gt;
&lt;p&gt;自定义扩展利用直播协议里面的一些自定义字段做延时监控。&lt;/p&gt;
&lt;p&gt;一个选择是FLV协议的metadata字段。FLV协议本身有字段，可以嵌入，然后在推流时发“北京时间”放到这个metadata字段里面去，接到之后把它和本地的“北京时间”做差值。&lt;/p&gt;
&lt;p&gt;第二个可以扩展的地方，是H.264、H.265编码的SEI字段，这个字段也可以自定义做扩展，计算延时的方法也是相同的，就是在这个字段里面嵌入“北京时间”就可以了。&lt;/p&gt;
&lt;p&gt;自定义扩展的两种方法有好处——配置比较简单。&lt;/p&gt;
&lt;p&gt;当然也有比较难的地方。因为CDN本身会有转码系统和分发系统，如果不和CDN厂商强调的话，所有的自定义字段从CDN系统过一遍之后全部都会删除掉。&lt;/p&gt;
&lt;p&gt;还有一个有问题的地方，在于CDN分发视频流，默认会把所有的视频流，无论是从什么时间开始拉流的，都会“从零开始”。这个时候我们在字段里面嵌入的“北京时间”，实际上就没有参照对象，因为我们是根据视频流里面每一帧视频的时间，以及嵌入到自定义字段的时间，还有本地时间三者做“差”得到的延时，这一部分会有影响。&lt;/p&gt;
&lt;p&gt;数字水印实现延时监控&lt;/p&gt;
&lt;p&gt;基于前面两种方法的缺点，然后我们又扩展出了根据“数字水印”来嵌入数据计算延时的方法。“数字水印”出现得比较早，原来是用于音视频版权确认，在音视频嵌入不可见、听不到的数据，这对于整体音视频质量影响比较小，但是通过某种算法可以嵌入进去、可以被提取出来，主要是应用在这个方面。&lt;/p&gt;
&lt;p&gt;我简单讲一下“数字水印”的原理，数字水印可以嵌入的地方比较多。&lt;/p&gt;
&lt;p&gt;先了解下通过修改YUV原始数据或PCM原始数据植入数字水印。以720P分辨率的视频流为参照，每一张画面是1280×720像素点，每个像素点是由一个Y以及1/4U、1/4V组成的。通常情况下在Y里面，每一个Y像素是有8比特数据组成的。也就是说，数据范围可以从-127到127。Y数据总共有8比特，我们可以把它末三位抹掉，然后再嵌入我们想要的数据。比如：我们想要的第一个Y像素点里面，就嵌入一个数字“0”或者是“1”，我们可以把8比特后3位抹掉，在里面嵌入后3位是“0-7”的，我们嵌入一个“3”代表“0”，嵌入一个“6”代表“1”。嵌入之后，然后根据同样的方式把这个方式再提取出来，然后把这个数据再还原，就可以得到我们嵌入的YUV里面的数据。这种方式嵌入的话，会有一定的影响。因为正常情况下，我们知道Y数据是“-127”到“127”。末三位改变以后会对色彩有影响。数据准确率越高，就需要抹掉的比特位数越多，对于视频的损伤就越大。我们想要准确度越高，又需要比较多的比特位数，这个时候就需要做一些取舍。&lt;/p&gt;
&lt;p&gt;PCM也是同样的方式，在末位不重要、比较小的数据上面做一些修改。&lt;/p&gt;
&lt;p&gt;再看下通过AAC量化子带或H.264块的DCT参数实现数字水印。&lt;/p&gt;
&lt;p&gt;AAC量化子带由一系列的参数组成的，我们可以改写参数第一位。&lt;/p&gt;
&lt;p&gt;H.264块的DCT参数，相应这个参数的修改方法也是一样的，改第一位的不重要的这些数据。&lt;/p&gt;
&lt;p&gt;客观地讲，刚才几种方式里面，在数据的嵌入、提取的过程中会受到CDN转码系统的一定影响。因为正常情况下，我们知道从YUV数据到H.264重新再解码出YUV的时候，这个YUV数据其实是发生了一些变化，只是这个变化被控制在一定的范围内，绝大多数的情况下是看不出差别。&lt;/p&gt;
&lt;p&gt;这个时候，在刚才讲到的这些算法之上，延伸出了一些算法，针对于这些数据的这些参数；我们刚才讲的是直接在这些数据里面做修改，做延伸处理的方法是把这些数据放进，像压缩通常会用到的“离散预选”参数。这个算法相对来说，对于原始数据的修改会更小，然后提取的成功率也会更高。&lt;/p&gt;

&lt;h2&gt;首屏秒开的三个优化方向&lt;/h2&gt;
&lt;p&gt;简单过一下首屏秒开优化的要点。首屏优化的话题可能会特别多，我这里就不一个一个去解释了；这里提供首屏秒开的三个优化方向，有优化需求的话，按照推流、转发、播放三个方向去做优化，肯定能收到效果。&lt;/p&gt;
&lt;p&gt;推流优化——主播端：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;合理的GOP值(建议2秒)&lt;/li&gt;
&lt;li&gt;减少帧间依赖，不使用P帧&lt;/li&gt;
&lt;li&gt;X264无延时编码&lt;/li&gt;
&lt;li&gt;合理的分辨率、码率、帧率&lt;/li&gt;
&lt;li&gt;使用UDP对抗网络抖动&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;转发优化——CDN&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;缓存GOP数据&lt;/li&gt;
&lt;li&gt;提前预热资源&lt;/li&gt;
&lt;li&gt;TCP单边加速&lt;/li&gt;
&lt;li&gt;提供多路转码流&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;播放优化——播放端&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;优先加载视频流数据&lt;/li&gt;
&lt;li&gt;可变缓存，先小后大&lt;/li&gt;
&lt;li&gt;使用HTTPDNS分配节点&lt;/li&gt;
&lt;li&gt;优化FFmpeg视频流探测&lt;/li&gt;
&lt;li&gt;网络请求并行加载&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;我今天讲的内容大体上就是这些，谢谢大家的聆听。&lt;/p&gt;

&lt;h2&gt;问答部分&lt;/h2&gt;
&lt;p&gt;Q1：赛事直播、游戏直播的时候，主播推流一定会延迟。昨天我遇见一个主播，延迟就已经有20秒，也就是说在编码完了之后，会有20秒才会推出来，这样的话，数字水印是不准确的。我看战旗也有很多游戏主播，这个问题怎么解决的？&lt;/p&gt;
&lt;p&gt;石硕：这分为两方面。我们如果要做延时计算，相应来说直播用的工具我们是可控的。像刚才您讲的情况，应该是这个主播用的是开源的OBS推流工具。针对于OBS的推流工具，我们需要做一些特殊的处理。战旗为OBS开发一个插件，这个插件是嵌入视频水印的。第二这个插件要获取OBS缓冲延时，把这个数据获取之后，针对嵌入的视频水印会做一些特殊处理。如果是用自己的直播软件，相应的来说时延就是本地的缓冲区都是自己设置的，相应做一下处理就好了。&lt;/p&gt;
&lt;p&gt;Q2：我前两天刚上线了网页端的H.265，码率比较低；发现卡顿主要原因来自于硬件情况，比如CPU不够或者GPU不行。我考虑在网页端加一些什么样的东西，获取到用户的硬件情况，然后发现能获取到的硬件情况非常有限，跟移动端在上H.265完全不一样的状态。国内主流的浏览器可以获取到用户的内存情况，但获取不到GPU等信息，即便有问题很难定位。战旗在这一块，目前是怎么解决的？&lt;/p&gt;
&lt;p&gt;石硕：这是一个很好的问题。现在主流的浏览器、比较常见的浏览器，通常情况下如果用HTML5做直播，会默认更多得去选硬件。受限于浏览器，我们是拿不到GPU信息的。这个时候，我们会获取一些再外围的数据信息，比如去拿CPU型号，进而获取GPU信息。某几个GPU幸好解1080P确实不行，这个时候我们可以尝试把它的分辨率从1080降到720P，这个时候它的GPU是能吃得消的。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;分享PPT+视频实录传送门：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&quot;LinkCard LinkCard--hasImage&quot; href=&quot;https://link.zhihu.com/?target=https%3A//opentalk.upyun.com/396.html&quot; target=&quot;_blank&quot; data-draft-node=&quot;block&quot; data-draft-type=&quot;link-card&quot; data-image=&quot;https://pic3.zhimg.com/v2-df054ff7d70318295d588f3e1252af72_180x120.jpg&quot; data-image-width=&quot;960&quot; data-image-height=&quot;540&quot; data-za-detail-view-id=&quot;172&quot;&gt;&lt;span class=&quot;LinkCard-backdrop&quot;&gt;&lt;span class=&quot;LinkCard-content&quot;&gt;&lt;span class=&quot;LinkCard-title&quot; data-text=&quot;true&quot;&gt;视频直播的用户体验体系与质量监控方案&lt;span class=&quot;LinkCard-meta&quot;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Wed, 22 Aug 2018 06:56:00 +0000</pubDate>
<dc:creator>又拍云</dc:creator>
<og:description>直播质量评价体系 直播质量监控方案的结构和逻辑 卡顿优化的十条法则 延时监控：自定义扩展、数字水印 首屏秒开的三个优化方向 △ 石硕：战旗直播高级流媒体研发工程师 以下是石硕分享内容的整理： 大家好，</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/upyun/p/9517672.html</dc:identifier>
</item>
</channel>
</rss>