<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>算法8 五大查找之：二叉排序树(BSTree) - nnngu</title>
<link>http://www.cnblogs.com/nnngu/p/8294714.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/nnngu/p/8294714.html</guid>
<description>&lt;p&gt;上一篇总结了&lt;a href=&quot;http://www.cnblogs.com/nnngu/p/8290367.html&quot; target=&quot;_blank&quot;&gt;索引查找&lt;/a&gt;，这一篇要总结的是二叉排序树，又称为二叉搜索树(BSTree) 。&lt;/p&gt;
&lt;p&gt;构造一棵二叉排序树的目的，其实并不是为了排序，而是为了提高查找和插入删除的效率。&lt;/p&gt;
&lt;p&gt;什么是二叉排序树呢？二叉排序树具有以下几个特点。&lt;/p&gt;
&lt;p&gt;（1）若根节点有左子树，则左子树的所有节点都比根节点小。&lt;/p&gt;
&lt;p&gt;（2）若根节点有右子树，则右子树的所有节点都比根节点大。&lt;/p&gt;
&lt;p&gt;（3）根节点的左，右子树也分别是二叉排序树。&lt;/p&gt;
&lt;h2&gt;1、二叉排序树的图示&lt;/h2&gt;
&lt;p&gt;下面是二叉排序树的图示，通过它可以加深对二叉排序树的理解。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1313428/201801/1313428-20180115232749099-1202098429.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h2&gt;2、二叉排序树常见的操作及思路&lt;/h2&gt;
&lt;p&gt;下面是二叉排序树常见的操作及思路。&lt;/p&gt;
&lt;h3&gt;2-1、插入节点&lt;/h3&gt;
&lt;p&gt;思路：比如我们要插入数字20到这棵二叉排序树中。那么步骤如下：&lt;/p&gt;
&lt;p&gt;&lt;span&gt;（1）首先将20与根节点进行比较，发现比根节点小，所以继续与根节点的左子树30比较。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;（2）发现20比30也要小，所以继续与30的左子树10进行比较。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;（3）发现20比10要大，所以就将20插入到10的右子树中。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;此时的二叉排序树如下图：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1313428/201801/1313428-20180115233659646-157343746.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h3&gt;2-2、查找节点&lt;/h3&gt;
&lt;p&gt;比如我们要查找节点10，那么思路如下：&lt;/p&gt;
&lt;p&gt;&lt;span&gt;（1）还是一样，首先将10与根节点50进行比较，发现比根节点要小，所以继续与根节点的左子树30进行比较。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;（2）发现10比左子树30要小，所以继续与30的左子树10进行比较。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;（3）发现两值相等，即查找成功，返回10的位置。&lt;/span&gt;&lt;/p&gt;

&lt;h3&gt;2-3、删除节点&lt;/h3&gt;
&lt;p&gt;删除节点的情况相对复杂，主要分为以下三种情形：&lt;/p&gt;
&lt;p&gt;（1）删除的是叶节点(即没有孩子节点的)。比如20，删除它不会破坏原来树的结构，最简单。如图所示。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1313428/201801/1313428-20180115234324803-1791940212.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;（2）删除的是单孩子节点。比如90，删除它后需要将它的孩子节点与自己的父节点相连。情形比第一种复杂一些。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1313428/201801/1313428-20180115234722021-232139621.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;（3）删除的是有左右孩子的节点。比如根节点50&lt;/p&gt;
&lt;p&gt;这里有一个问题就是删除它后，谁将作为根节点？&lt;strong&gt;&lt;span&gt;利用二叉树的中序遍历，就是右节点的左子树的最左孩子&lt;/span&gt;&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1313428/201801/1313428-20180116000406537-1552914566.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h2&gt;3、代码&lt;/h2&gt;
&lt;p&gt;有了思路之后，下面就开始写代码来实现这些功能。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;BSTreeNode.java&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; BSTreeNode {
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; data;
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; BSTreeNode left;
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; BSTreeNode right;

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; BSTreeNode(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; data) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.data =&lt;span&gt; data;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;BSTreeOperate.java&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * 二叉排序树的常见操作
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; BSTreeOperate {

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 树的根节点&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt;&lt;span&gt; BSTreeNode root;
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 记录树的节点个数&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; size;

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 创建二叉排序树
     *
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; list
     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;
     &lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; BSTreeNode create(&lt;span&gt;int&lt;/span&gt;&lt;span&gt;[] list) {

        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = 0; i &amp;lt; list.length; i++&lt;span&gt;) {
            insert(list[i]);
        }
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; root;
    }

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 插入一个值为data的节点
     *
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; data
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; insert(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; data) {
        insert(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; BSTreeNode(data));
    }

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 插入一个节点
     *
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; bsTreeNode
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; insert(BSTreeNode bsTreeNode) {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (root == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
            root &lt;/span&gt;=&lt;span&gt; bsTreeNode;
            size&lt;/span&gt;++&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
        }
        BSTreeNode current &lt;/span&gt;=&lt;span&gt; root;
        &lt;/span&gt;&lt;span&gt;while&lt;/span&gt; (&lt;span&gt;true&lt;/span&gt;&lt;span&gt;) {
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (bsTreeNode.data &amp;lt;=&lt;span&gt; current.data) {
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 如果插入节点的值小于当前节点的值，说明应该插入到当前节点左子树，而此时如果左子树为空，就直接设置当前节点的左子树为插入节点。&lt;/span&gt;
                &lt;span&gt;if&lt;/span&gt; (current.left == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
                    current.left &lt;/span&gt;=&lt;span&gt; bsTreeNode;
                    size&lt;/span&gt;++&lt;span&gt;;
                    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
                }
                current &lt;/span&gt;=&lt;span&gt; current.left;
            } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 如果插入节点的值大于当前节点的值，说明应该插入到当前节点右子树，而此时如果右子树为空，就直接设置当前节点的右子树为插入节点。&lt;/span&gt;
                &lt;span&gt;if&lt;/span&gt; (current.right == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
                    current.right &lt;/span&gt;=&lt;span&gt; bsTreeNode;
                    size&lt;/span&gt;++&lt;span&gt;;
                    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
                }
                current &lt;/span&gt;=&lt;span&gt; current.right;
            }
        }
    }

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 中序遍历
     *
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; bsTreeNode
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; LDR(BSTreeNode bsTreeNode) {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (bsTreeNode != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 遍历左子树&lt;/span&gt;
&lt;span&gt;            LDR(bsTreeNode.left);
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 输出节点数据&lt;/span&gt;
            System.out.print(bsTreeNode.data + &quot; &quot;&lt;span&gt;);
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 遍历右子树&lt;/span&gt;
&lt;span&gt;            LDR(bsTreeNode.right);
        }
    }

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 查找节点
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt; search(BSTreeNode bsTreeNode, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; key) {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 遍历完没有找到，查找失败&lt;/span&gt;
        &lt;span&gt;if&lt;/span&gt; (bsTreeNode == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
        }
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 要查找的元素为当前节点，查找成功&lt;/span&gt;
        &lt;span&gt;if&lt;/span&gt; (key ==&lt;span&gt; bsTreeNode.data) {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
        }
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 继续去当前节点的左子树中查找，否则去当前节点的右子树中查找&lt;/span&gt;
        &lt;span&gt;if&lt;/span&gt; (key &amp;lt;&lt;span&gt; bsTreeNode.data) {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; search(bsTreeNode.left, key);
        } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; search(bsTreeNode.right, key);
        }
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;BSTreeOperateTest.java&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; BSTreeOperateTest {
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
        BSTreeOperate bsTreeOperate &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; BSTreeOperate();
        &lt;/span&gt;&lt;span&gt;int&lt;/span&gt;[] list = &lt;span&gt;new&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;[]{50, 30, 70, 10, 40, 90, 80&lt;span&gt;};
        System.out.println(&lt;/span&gt;&quot;*********创建二叉排序树*********&quot;&lt;span&gt;);
        BSTreeNode bsTreeNode &lt;/span&gt;=&lt;span&gt; bsTreeOperate.create(list);
        System.out.println(&lt;/span&gt;&quot;中序遍历原始的数据：&quot;&lt;span&gt;);
        bsTreeOperate.LDR(bsTreeNode);
        System.out.println(&lt;/span&gt;&quot;&quot;&lt;span&gt;);
        System.out.println(&lt;/span&gt;&quot;&quot;&lt;span&gt;);

        System.out.println(&lt;/span&gt;&quot;********查找节点*******&quot;&lt;span&gt;);
        System.out.println(&lt;/span&gt;&quot;元素20是否在树中：&quot; + bsTreeOperate.search(bsTreeNode, 20&lt;span&gt;));
        System.out.println(&lt;/span&gt;&quot;&quot;&lt;span&gt;);

        System.out.println(&lt;/span&gt;&quot;********插入节点*******&quot;&lt;span&gt;);
        System.out.println(&lt;/span&gt;&quot;将元素20插入到树中&quot;&lt;span&gt;);
        bsTreeOperate.insert(&lt;/span&gt;20&lt;span&gt;);
        System.out.println(&lt;/span&gt;&quot;中序遍历：&quot;&lt;span&gt;);
        bsTreeOperate.LDR(bsTreeNode);
        System.out.println(&lt;/span&gt;&quot;&quot;&lt;span&gt;);
        System.out.println(&lt;/span&gt;&quot;&quot;&lt;span&gt;);

        System.out.println(&lt;/span&gt;&quot;********查找节点*******&quot;&lt;span&gt;);
        System.out.println(&lt;/span&gt;&quot;元素20是否在树中：&quot; + bsTreeOperate.search(bsTreeNode, 20&lt;span&gt;));
        System.out.println(&lt;/span&gt;&quot;&quot;&lt;span&gt;);
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;运行结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1313428/201801/1313428-20180116060222881-920823434.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt;欢迎转载，但请保留文章原始出处&lt;/p&gt;
&lt;p&gt;本文地址：&lt;a id=&quot;Editor_Edit_hlEntryLink&quot; title=&quot;view: 算法8 五大查找之：二叉排序树(BSTree)&quot; href=&quot;http://www.cnblogs.com/nnngu/p/8294714.html&quot;&gt;http://www.cnblogs.com/nnngu/p/8294714.html&lt;/a&gt; &lt;/p&gt;

</description>
<pubDate>Mon, 15 Jan 2018 22:05:00 +0000</pubDate>
<dc:creator>nnngu</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/nnngu/p/8294714.html</dc:identifier>
</item>
<item>
<title>Java学习笔记21---内部类之对成员内部类的补充说明（二） - 蝉蝉</title>
<link>http://www.cnblogs.com/chanchan/p/8281021.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/chanchan/p/8281021.html</guid>
<description>&lt;p&gt;上篇文章--&lt;a href=&quot;http://www.cnblogs.com/chanchan/p/8254124.html&quot; target=&quot;_blank&quot;&gt;笔记20&lt;/a&gt;补充说明了前四点，这里接着来说剩下的两点。&lt;/p&gt;
&lt;p&gt;要点如下：&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;5.访问权限修饰符可以修饰成员内部类&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;    1).访问权限修饰符对内部类的访问限制与外部类的一般成员遵循一样的规则，具体请参考&lt;a href=&quot;http://www.cnblogs.com/chanchan/p/7752373.html&quot; target=&quot;_blank&quot;&gt;笔记10&lt;/a&gt;；&lt;/p&gt;
&lt;p&gt;    2).这里涉及到的&lt;strong&gt;子类是外部类的子类&lt;/strong&gt;；&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;6.访问权限修饰符可以修饰成员内部类的成员变量和成员方法&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;    1).成员内部类可由4种访问权限修饰符修饰，每种内部类的成员方法或变量也可由4种访问权限修饰符修饰，所以分16种情况来讨论；&lt;/p&gt;
&lt;p&gt;    2).修饰类时涉及到的&lt;strong&gt;子类是外部类的子类&lt;/strong&gt;；修饰内部类的成员方法或变量时涉及到的&lt;strong&gt;子类是成员内部类的子类&lt;/strong&gt;；&lt;/p&gt;
&lt;p&gt;    3).构造方法的默认修饰符与类一致；&lt;/p&gt;
&lt;p&gt;    4).在外部类的不同包子类中创建protected修饰的内部类的对象时，会提示构造方法不可见，这时要为该内部类&lt;strong&gt;添加public修饰的构造方法；&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;作者： 蝉蝉&lt;/p&gt;
&lt;p&gt;请尊重作者劳动成果，转载请在标题注明“转载”字样，并标明原文链接：&lt;/p&gt;
&lt;p&gt;&lt;a id=&quot;Editor_Edit_hlEntryLink&quot; title=&quot;view: Java学习笔记21---内部类之对成员内部类的补充说明（二）&quot; href=&quot;http://www.cnblogs.com/chanchan/p/8281021.html&quot; target=&quot;_blank&quot;&gt;http://www.cnblogs.com/chanchan/p/8281021.html&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;下面详细展开说明。&lt;/p&gt;
&lt;p&gt;类Person中定义了4个成员内部类，分别由public、protected、默认、private修饰；并给这4个成员内部类分别添加4个成员方法，分别由public、protected、默认及private修饰。代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; InnerClassPu {
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;         &lt;span&gt;void&lt;/span&gt;&lt;span&gt; printInCPuDef() {
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;             System.out.println(&quot;public inner class:default&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;         
&lt;span&gt; 6&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; printInCPuPu() {
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;             System.out.println(&quot;public inner class:public&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;         
&lt;span&gt;10&lt;/span&gt;         &lt;span&gt;protected&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; printInCPuPro() {
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;             System.out.println(&quot;public inner class:protected&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;         
&lt;span&gt;14&lt;/span&gt;         &lt;span&gt;private&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; printInCPuPri() {
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;             System.out.println(&quot;public inner class:private&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;     
&lt;span&gt;19&lt;/span&gt;     &lt;span&gt;protected&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; InnerClassPro {
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;         &lt;span&gt;void&lt;/span&gt;&lt;span&gt; printInCProDef() {
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;             System.out.println(&quot;protected inner class:default&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;         
&lt;span&gt;24&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; printInCProPu() {
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;             System.out.println(&quot;protected inner class:public&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;         
&lt;span&gt;28&lt;/span&gt;         &lt;span&gt;protected&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; printInCProPro() {
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;             System.out.println(&quot;protected inner class:protected&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;         
&lt;span&gt;32&lt;/span&gt;         &lt;span&gt;private&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; printInCProPri() {
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt;             System.out.println(&quot;protected inner class:private&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt; 
&lt;span&gt;37&lt;/span&gt;     &lt;span&gt;class&lt;/span&gt;&lt;span&gt; InnerClass {
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;访问权限修饰符修饰成员内部类的方法&lt;/span&gt;
&lt;span&gt;39&lt;/span&gt;         &lt;span&gt;void&lt;/span&gt;&lt;span&gt; printInCDefDef() {
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt;             System.out.println(&quot;default inner class:default&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt;         
&lt;span&gt;43&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; printInCDefPu() {
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt;             System.out.println(&quot;default inner class:public&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt;         
&lt;span&gt;47&lt;/span&gt;         &lt;span&gt;protected&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; printInCDefPro() {
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt;             System.out.println(&quot;default inner class:protected&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;49&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;50&lt;/span&gt;         
&lt;span&gt;51&lt;/span&gt;         &lt;span&gt;private&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; printInCDefPri() {
&lt;/span&gt;&lt;span&gt;52&lt;/span&gt;             System.out.println(&quot;default inner class:private&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;53&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;54&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;55&lt;/span&gt; 
&lt;span&gt;56&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; InnerClassPri {
&lt;/span&gt;&lt;span&gt;57&lt;/span&gt;         &lt;span&gt;void&lt;/span&gt;&lt;span&gt; printInCPriDef() {
&lt;/span&gt;&lt;span&gt;58&lt;/span&gt;             System.out.println(&quot;private inner class:default&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;59&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;60&lt;/span&gt;         
&lt;span&gt;61&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; printInCPriPu() {
&lt;/span&gt;&lt;span&gt;62&lt;/span&gt;             System.out.println(&quot;private inner class:public&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;63&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;64&lt;/span&gt;         
&lt;span&gt;65&lt;/span&gt;         &lt;span&gt;protected&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; printInCPriPro() {
&lt;/span&gt;&lt;span&gt;66&lt;/span&gt;             System.out.println(&quot;private inner class:protected&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;67&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;68&lt;/span&gt;         
&lt;span&gt;69&lt;/span&gt;         &lt;span&gt;private&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; printInCPriPri() {
&lt;/span&gt;&lt;span&gt;70&lt;/span&gt;             System.out.println(&quot;private inner class:private&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;71&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;72&lt;/span&gt;     }
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;A.&lt;/strong&gt;根据访问权限修饰符的特性，要验证每种成员内部类的访问权限，需要分别在&lt;/p&gt;
&lt;p&gt;1).外部类&lt;/p&gt;
&lt;p&gt;2).与外部类同一个包的类&lt;/p&gt;
&lt;p&gt;3).与外部类不同包的子类&lt;/p&gt;
&lt;p&gt;4).与外部类不同包的其他类&lt;/p&gt;
&lt;p&gt;这4种类中添加测试代码。&lt;/p&gt;
&lt;p&gt;注：&lt;/p&gt;
&lt;p&gt;    这里是&lt;strong&gt;把成员内部类当成外部类的一个成员来看的&lt;/strong&gt;，即，成员内部类是一个整体，对其他类而言它就是外部类的一个变量而已，所以这里涉及到的子类是外部类的子类。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;B.&lt;/strong&gt;另，根据访问权限修饰符的特性，要验证每种成员方法的访问权限，需要分别在&lt;/p&gt;
&lt;p&gt;1).外部类&lt;/p&gt;
&lt;p&gt;2).与成员内部类同一个包的类&lt;/p&gt;
&lt;p&gt;&lt;span&gt;3).与成员内部类不同包的子类&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;4).与成员内部类不同包的其他类&lt;/p&gt;
&lt;p&gt;    1&amp;gt;.其他类是外部类的子类&lt;/p&gt;
&lt;p&gt;    2&amp;gt;.其他类不是外部类的子类&lt;/p&gt;
&lt;p&gt;这5种类中添加测试代码。&lt;/p&gt;
&lt;p&gt;注：&lt;/p&gt;
&lt;p&gt;1].这里要测试的是成员内部类的成员方法，所以对情况3而言，应该是成员内部类的子类，而不是外部类的子类；&lt;/p&gt;
&lt;p&gt;    又由于成员内部类位于外部类的内部，所以其子类是不可能位于其他包中的，所以&lt;strong&gt;第3种情况是不存在的。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; 2].由于成员内部类是外部类的一个成员，&lt;strong&gt;其可见性对“与其不同包的”“外部类的子类和非子类”是不一样的，所以情况4要再细分成两种情况。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;综合上面的A、B，下面几个图是所有的测试代码：&lt;/p&gt;
&lt;p&gt;其中Person是外部类，TestMain是同包的类，GateMan是不同包的Person的非子类，Teacher是不同包的Person的子类。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1.Person内的测试：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2017.cnblogs.com/blog/1234147/201801/1234147-20180115215004084-736854254.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;由上图可知：&lt;/p&gt;
&lt;p&gt;所有成员内部类对外部类都可见；&lt;/p&gt;
&lt;p&gt;所有成员内部类的所有成员方法对外部类都可见；&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2.TestMain内的测试：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1234147/201801/1234147-20180115215043287-1629959405.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;由上图可知：&lt;/p&gt;
&lt;p&gt;private修饰的成员内部类对与外部类同包的其他类是不可见的；&lt;/p&gt;
&lt;p&gt;private修饰的成员内部类的所有成员方法对与内部类同包的其他类是不可见的；&lt;/p&gt;
&lt;p&gt;public、protected及默认权限的成员内部类对与外部类同包的其他类是可见的；&lt;/p&gt;
&lt;p&gt;public、protected及默认权限的成员内部类的public、protected及默认权限的成员方法对与内部类同包的其他类是可见的；&lt;/p&gt;
&lt;p&gt;public、protected及默认权限的成员内部类的private权限的成员方法对与内部类同包的其他类是可见的；&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3.GateMan内的测试：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1234147/201801/1234147-20180115215105943-2049825893.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;由上图可知：&lt;/p&gt;
&lt;p&gt;public修饰的成员内部类对与外部类不同包的非子类是可见的；&lt;/p&gt;
&lt;p&gt;public修饰的成员内部类的public权限的成员方法对与内部类不同包的非子类是可见的；&lt;/p&gt;
&lt;p&gt;public修饰的成员内部类的其他权限的成员方法对与内部类不同包的非子类是不可见的；&lt;/p&gt;
&lt;p&gt;protected、默认及private修饰的成员内部类对与外部类不同包的非子类是不可见的；&lt;/p&gt;
&lt;p&gt;protected、默认及private修饰的成员内部类的所有成员方法对与内部类不同包的非子类是不可见的---类不可见，其成员方法当然不可见；&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4.Teacher内的测试：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1234147/201801/1234147-20180115234302568-1908261021.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;注意28行，提示的错误与其他行都不一样：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1234147/201801/1234147-20180115234410412-1337786749.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;即，protected修饰的成员内部类InnerClassPro的构造方法是不可见的。&lt;/p&gt;
&lt;p&gt;但第42行，即inCPro.printInCProPu();是没有问题的，也就是说InnerClassPro是可以在Teacher里使用的。&lt;/p&gt;
&lt;p&gt;为什么会出现这样的矛盾呢？&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;分析：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;类Teacher与类Person不在同一个包里，但是其子类，所以protected修饰的内部类InnerClassPro对Teacher是可见的；&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;但类InnerClassPro没有显式创建构造方法，所以其默认的构造方法也是protected的；&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;对内部类InnerClassPro而言，类Teacher与其不在同一个包里，且不是其子类，所以，Teacher是看不到protected修饰的构造方法的；&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;因此就出现了上面的错误。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;对策：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;为类InnerClassPro添加构造方法，并声明为public的，&lt;/strong&gt;这样就能保证Teacher能看到其构造方法并正确的创建InnerClassPro的对象了。&lt;/p&gt;
&lt;p&gt;代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;protected&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; InnerClassPro {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;构造方法为public&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt;&lt;span&gt; InnerClassPro() {

        }
         ...
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;修改后，就不会出现上面的问题了，见下图：&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2017.cnblogs.com/blog/1234147/201801/1234147-20180116000833974-1850745340.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;Teacher类里的完整测试代码如下，就不再一一分析了：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1234147/201801/1234147-20180116001208068-926771861.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;下图把16种情况的可见性依次列了出来，比较特殊的就是protected修饰的内部类InnerClassPro的public的成员方法，上面已详细解释说明过，不再赘述。（注：图有点大，可点开查看）&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1234147/201801/1234147-20180116005259303-2128435226.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

</description>
<pubDate>Mon, 15 Jan 2018 17:04:00 +0000</pubDate>
<dc:creator>蝉蝉</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/chanchan/p/8281021.html</dc:identifier>
</item>
<item>
<title>VS2015配置内核WDK7600环境,32位下. - iBinary</title>
<link>http://www.cnblogs.com/iBinary/p/8290595.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/iBinary/p/8290595.html</guid>
<description>

&lt;p&gt;学习内核驱动的编写,就要会配置环境.不然总是用记事本编写.比较不方便.&lt;/p&gt;
&lt;p&gt;环境配置如下.&lt;/p&gt;
&lt;p&gt;1.首先下载WDK7600, 课堂资料代码中已经上传.链接：&lt;a href=&quot;https://pan.baidu.com/s/1o9PjpUU&quot; target=&quot;_blank&quot;&gt;https://pan.baidu.com/s/1o9PjpUU&lt;/a&gt; 密码：k5sp&lt;/p&gt;
&lt;p&gt;2.VS2015下载. 这个网络上有很多.自己选择一个下载即可. PS: VS2013配置一样可以. 配置好了导出模版.然后也可以给VS2015使用.&lt;/p&gt;

&lt;h3&gt;1.打开VS2015,新建空项目&lt;/h3&gt;
&lt;p&gt;中文: 文件 -&amp;gt; 新建 -&amp;gt; 常规 -&amp;gt; 空项目&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1197364/201801/1197364-20180115212340318-663369572.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;2.添加新文件,后缀为.cpp&lt;/h3&gt;
&lt;p&gt;打开解决方案视图&lt;/p&gt;
&lt;p&gt;源文件 -&amp;gt; 添加新建项(Ctrl + shift + a)&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1197364/201801/1197364-20180115212509787-1355159663.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;3.修改配置属性&lt;/h3&gt;
&lt;p&gt;项目 -&amp;gt; 属性 -&amp;gt; 常规&lt;/p&gt;
&lt;p&gt;ALT + F7(直接这个按键也可以).&lt;/p&gt;
&lt;p&gt;修改:&lt;/p&gt;
&lt;p&gt;　　项目 -&amp;gt; 属性 -&amp;gt; 常规 -&amp;gt;目标文件扩展名为&lt;span&gt;.sys&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1197364/201801/1197364-20180115223023521-1948039641.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;4.修改配置管理器,添加配置管理&lt;/h3&gt;
&lt;p&gt;生成 -&amp;gt; 配置管理器&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1197364/201801/1197364-20180115223207162-699293491.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1197364/201801/1197364-20180115223230365-683361823.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1197364/201801/1197364-20180115223253318-1264596859.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;名字可以随便取&lt;/p&gt;
&lt;h3&gt;5.配置WDK的环境变量&lt;/h3&gt;
&lt;p&gt;配置环境变量&lt;/p&gt;
&lt;p&gt;计算机- &amp;gt;属性 -&amp;gt; 高级系统设置 -&amp;gt;高级-&amp;gt;环境变量-&amp;gt;系统变量-&amp;gt;path路径&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1197364/201801/1197364-20180115223534162-1705119461.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;然后将我们的WDK的根目录拷贝进来即可.&lt;/p&gt;
&lt;p&gt;例如我的是:&lt;/p&gt;
&lt;p&gt;　　&lt;span&gt;D:\WinDDK\7600.16385.1&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;&lt;span&gt;6.配置文件目录以及库目录&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;项目-&amp;gt;属性&lt;/p&gt;
&lt;p&gt;或者快捷键 ALT+F7&lt;/p&gt;
&lt;p&gt;配置:&lt;/p&gt;
&lt;p&gt;　　项目-&amp;gt;属性-&amp;gt;VC++目录&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1197364/201801/1197364-20180115223839006-1347317401.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;可执行的配置路径:&lt;/p&gt;
&lt;p&gt;　　　　配好我们的环境变量了,那么配置我们的XP即可.&lt;/p&gt;
&lt;p&gt;　例如我的是:&lt;/p&gt;
&lt;p&gt;　　　　D:\WinDDK\7600.16385.1\bin\x86\x86&lt;/p&gt;
&lt;p&gt;包含目录的配置路径:&lt;/p&gt;
&lt;p&gt;　　　　总共三个路径需要配置,都是inc下的路径&lt;/p&gt;
&lt;p&gt;　　　　1.D:\WinDDK\7600.16385.1\inc\ddk    &lt;/p&gt;
&lt;p&gt;　　　　2.D:\WinDDK\7600.16385.1\inc\api&lt;/p&gt;
&lt;p&gt;　　　　3.D:\WinDDK\7600.16385.1\inc\crt&lt;/p&gt;
&lt;p&gt;引用目录的配置路径:&lt;/p&gt;
&lt;p&gt;　　　　　也是三个,很简单.都是lib下的.&lt;/p&gt;
&lt;p&gt;　　　　1.D:\WinDDK\7600.16385.1\lib\ATL\i386&lt;/p&gt;
&lt;p&gt;　　　　2.D:\WinDDK\7600.16385.1\lib\Crt\i386&lt;/p&gt;
&lt;p&gt;　　　　3.D:\WinDDK\7600.16385.1\lib\wxp\i386&lt;/p&gt;
&lt;p&gt;库目录的配置路径:&lt;/p&gt;
&lt;p&gt;　　　　　库目录的配置路径就是把我们的WDK的lib库设置一下即可.&lt;/p&gt;
&lt;p&gt;　　　　1.D:\WinDDK\7600.16385.1\lib\wxp\i386&lt;/p&gt;
&lt;h3&gt;7.设置优化选项&lt;/h3&gt;

&lt;p&gt;项目-&amp;gt;属性&lt;/p&gt;
&lt;p&gt;或者快捷键 ALT+F7&lt;/p&gt;
&lt;p&gt;配置:&lt;/p&gt;
&lt;p&gt;　　项目 -&amp;gt; 属性 -&amp;gt; C/C++ -&amp;gt;优化&lt;/p&gt;
&lt;p&gt;设置如下.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1197364/201801/1197364-20180115231226099-882731331.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;8.设置预处理器&lt;/h3&gt;
&lt;p&gt;项目 -&amp;gt; 属性&lt;/p&gt;
&lt;p&gt;配置属性:&lt;/p&gt;
&lt;p&gt;　　项目 -&amp;gt; 属性-&amp;gt;C/C++ -&amp;gt; 预处理器&lt;/p&gt;
&lt;p&gt;设置为下面的命令:&lt;/p&gt;
&lt;p&gt;　　_X86_;_DDK_;_WIN32_WINNT=0x0501;WINVER=0x0501;_DEBUG;DBG=1&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1197364/201801/1197364-20180115231417584-21929321.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;9.禁止安全检查&lt;/h3&gt;
&lt;p&gt;项目 -&amp;gt; 属性&lt;/p&gt;
&lt;p&gt;配置属性:&lt;/p&gt;
&lt;p&gt;　　项目-&amp;gt;属性-&amp;gt;C/C++-&amp;gt;代码生成 -&amp;gt; 安全检查.&lt;/p&gt;
&lt;p&gt;设置为禁止安全检查即可.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1197364/201801/1197364-20180115231621615-611655912.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;10.修改调用约定&lt;/h3&gt;
&lt;p&gt;修改我们的调用约定为STDCALL&lt;/p&gt;

&lt;p&gt;项目-&amp;gt;属性&lt;/p&gt;
&lt;p&gt;配置属性:&lt;/p&gt;
&lt;p&gt;　　项目-&amp;gt;属性-&amp;gt;C/C++-&amp;gt;高级-&amp;gt;调用约定&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1197364/201801/1197364-20180115231827303-372034724.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;11.修改连接器配置中的依赖选项和忽略所有默认库&lt;/h3&gt;
&lt;p&gt;修改连接器中的附加依赖选项,和忽略所有默认库&lt;/p&gt;
&lt;p&gt;项目-&amp;gt;属性&lt;/p&gt;
&lt;p&gt;配置属性:&lt;/p&gt;
&lt;p&gt;　　项目-&amp;gt;属性-&amp;gt;连接器-&amp;gt;输入-&amp;gt;附加依赖选项&lt;/p&gt;
&lt;p&gt;　　项目-&amp;gt;属性-&amp;gt;连接器-&amp;gt;忽略所有库&lt;/p&gt;
&lt;p&gt;附加依赖选项修改为:&lt;/p&gt;
&lt;p&gt;　　　　　　ntoskrnl.lib;ndis.lib;Hal.lib;wdm.lib;wdmsec.lib;wmilib.lib&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2017.cnblogs.com/blog/1197364/201801/1197364-20180115232232693-1357758405.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;h3&gt;12.修改连接器配置中的清单文件&lt;/h3&gt;
&lt;p&gt;项目-&amp;gt;属性&lt;/p&gt;
&lt;p&gt;配置属性:&lt;/p&gt;
&lt;p&gt;　　项目-&amp;gt;属性-&amp;gt;连接器-&amp;gt;清单文件-&amp;gt;生成清单.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1197364/201801/1197364-20180115232420318-1171013422.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;13.修改连接器配置中的调试信息&lt;/h3&gt;
&lt;p&gt;项目-&amp;gt;配置&lt;/p&gt;
&lt;p&gt;配置属性:&lt;/p&gt;
&lt;p&gt;　　项目-&amp;gt;配置-&amp;gt;连接器-&amp;gt;调试&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1197364/201801/1197364-20180115232636506-1663541678.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;箭头所指的地方,如果是VS2013,改为是即可.&lt;/p&gt;
&lt;h3&gt;14.修改连接器配置中的系统属性&lt;/h3&gt;
&lt;p&gt; 项目-&amp;gt;属性&lt;/p&gt;
&lt;p&gt;配置属性:&lt;/p&gt;
&lt;p&gt;　　项目-&amp;gt;属性-&amp;gt;连接器-&amp;gt;系统-&amp;gt;驱动程序&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1197364/201801/1197364-20180115233009084-11688969.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;15.修改连接器配置中的入口点&lt;/h3&gt;
&lt;p&gt;项目-&amp;gt;属性&lt;/p&gt;
&lt;p&gt;配置属性:&lt;/p&gt;
&lt;p&gt;　　项目-&amp;gt;属性-&amp;gt;连接器-&amp;gt;高级&lt;/p&gt;
&lt;p&gt;这里要设置入口点以及随机基址&lt;/p&gt;
&lt;p&gt;入口点设置为内核驱动入口点&lt;/p&gt;
&lt;p&gt;DriverEntry&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1197364/201801/1197364-20180115235815209-861561937.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;注意:&lt;/p&gt;
&lt;p&gt;　　随机基址,和数据执行保护都要为空&lt;/p&gt;
&lt;p&gt;&lt;span&gt;对比连接器所有选项设置&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1197364/201801/1197364-20180115235918943-1096732208.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1197364/201801/1197364-20180115235946443-81004645.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; &lt;img src=&quot;https://images2017.cnblogs.com/blog/1197364/201801/1197364-20180116000004178-166295385.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;注意子系统需要设置一下&lt;/p&gt;




&lt;h3&gt;16.将我们的CPP文件.或者.c文件设置为驱动代码.编译看看是否可以生成.&lt;/h3&gt;
&lt;p&gt;此时我们都已经配置完毕,我们拷贝一个驱动代码进来.看看是否能生成&lt;/p&gt;
&lt;p&gt;如果可以生成,那么配置没有错误.可以导出为模版,然后只要建立驱动程序就可以使用这个模版了.&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2017.cnblogs.com/blog/1197364/201801/1197364-20180116000158724-1698946646.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;成功生成,可以导出为模版文件了.&lt;/p&gt;

&lt;h3&gt;17.生成模版文件使用&lt;/h3&gt;
&lt;p&gt;文件-&amp;gt;导出模版-&amp;gt;项目模版&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1197364/201801/1197364-20180116000309849-287205925.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;下一步进行操作&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1197364/201801/1197364-20180116000351974-985753341.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;模版名称可以修改&lt;/p&gt;
&lt;p&gt;注意模版路径,如果你有更好的模版路径,则可以输出到这个路径. 那么VS2015就可以使用这个模版了.&lt;/p&gt;
&lt;p&gt;完成即可.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1197364/201801/1197364-20180116000524771-344459664.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; 进入我们的路径,则可以看到我们的模版文件了.&lt;/p&gt;

&lt;h3&gt;18使用模版,创建一个WDK内核驱动程序&lt;/h3&gt;
&lt;p&gt;现在我们可以关闭我们的VS2015,重新打开则可以创建一个内核驱动了.&lt;/p&gt;

&lt;p&gt;文件-&amp;gt;新建-&amp;gt;项目-&amp;gt;Visual C++&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1197364/201801/1197364-20180116000810240-136611352.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;此时已经有我们的模版了.创建了.然后生成一下看看是否成功&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1197364/201801/1197364-20180116001003974-1223200841.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;可以正常运行,但是注意一下.我们要选择我们自己配置的生成.&lt;/p&gt;
&lt;p&gt;不能选择Debug或者Release编译.&lt;/p&gt;

&lt;p&gt;原创不易,转载请注明出处.如果对你有用.下方请评论.支持一下.&lt;/p&gt;

</description>
<pubDate>Mon, 15 Jan 2018 16:12:00 +0000</pubDate>
<dc:creator>iBinary</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/iBinary/p/8290595.html</dc:identifier>
</item>
<item>
<title>【ASP.NET MVC系列】浅谈数据注解和验证 - Alan_beijing</title>
<link>http://www.cnblogs.com/wangjiming/p/8286465.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/wangjiming/p/8286465.html</guid>
<description>&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1066923/201801/1066923-20180114231237472-1175578725.png&quot; alt=&quot;&quot; width=&quot;216&quot; height=&quot;42&quot;/&gt;&lt;/p&gt;

&lt;p&gt;  &lt;img src=&quot;https://images2017.cnblogs.com/blog/1066923/201801/1066923-20180115085938412-636694043.png&quot; alt=&quot;&quot; width=&quot;1619&quot; height=&quot;185&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;一  概述&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;关于数据验证和数据注解，是任何软件系统不可小觑的必要模块，在软件系统中起到举足轻重的作用。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;1.从数据验证的验证方式来说，我们一般分为客户端验证和服务端验证（或者两种方式相结合）；&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;2.从数据验证的作用角度来说，数据验证起到很重要的作用，如防止漏洞注入，防止网络攻击（XSS等），确保数据安全，确保数据合理性，防止垃圾数据等作用；&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;3.从数据验证的种类来书，一般分为第三方验证（如我们用Jquery写好验证插件，在客户端用AJAX验证）和基于ASP.NET MVC框架的数据验证；&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;4.从数据注解的作用角度来说，如界面关键字段的友好设置和提示等；&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;说了那么多，那么本篇文章会讲解哪些内容呢？&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;本篇文章主要讲解基于ASP.NET MVC框架的数据验证特性和数据注解。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1066923/201801/1066923-20180115231825162-2020208858.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;二  数据验证&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;（一）ASP.NET MVC 内置六大类数据验证特性&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1066923/201801/1066923-20180115233714506-2100336962.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;1.在ASP.NET MVC中，验证特性定义在System.ComponentModel.DataAnnotations命名空间中，因此我们在使用验证特性前，需要引入命名空间：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;using&lt;/span&gt; System.ComponentModel.DataAnnotations;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;2.ASP.NET MVC内置了六大验证特性：Required,StringLength,RegularExpression,Range,Compare和Remote;&lt;/p&gt;
&lt;p&gt;3.数据验证使用单个验证特性：指数据验证只使用其中一个验证特性&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;[Required]
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;  &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; Username { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;4.有些属性，单个验证特性无法满足，需要两个及其以上验证特性组合，如密码，至少要满足两个条件：&lt;/p&gt;
&lt;p&gt;(1)必填      (2)不少于6位&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;[Required]
[StringLength(&lt;/span&gt;&lt;span&gt;6&lt;/span&gt;&lt;span&gt;)]
 &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; Password { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;5.用代码演示一下五大验证特性(Remote除外)&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2017.cnblogs.com/blog/1066923/201801/1066923-20180115105600412-1371719027.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Models：UserInfo.cs&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('7e2aea1c-063d-4a6a-b9bf-5e474a6f75e3')&quot; readability=&quot;34.5&quot;&gt;&lt;img id=&quot;code_img_closed_7e2aea1c-063d-4a6a-b9bf-5e474a6f75e3&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_7e2aea1c-063d-4a6a-b9bf-5e474a6f75e3&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('7e2aea1c-063d-4a6a-b9bf-5e474a6f75e3',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_7e2aea1c-063d-4a6a-b9bf-5e474a6f75e3&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;64&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Collections.Generic;
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Linq;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Web;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; 
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.ComponentModel.DataAnnotations;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; 
&lt;span&gt; 8&lt;/span&gt; 
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; DataValidate.Models
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; UserInfo
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;定义用户名必填&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt; &lt;span&gt;        [Required]
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; UserName { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;定义密码必填，且满足6位&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt; &lt;span&gt;        [Required]
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;         [StringLength(&lt;span&gt;128&lt;/span&gt;,MinimumLength =&lt;span&gt;6&lt;/span&gt;&lt;span&gt;)]
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; Password { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;验证两次输入的密码是否一致&lt;/span&gt;
&lt;span&gt;21&lt;/span&gt; &lt;span&gt;        [Required]
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;         [Compare(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Password&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, ErrorMessage = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;两次密码输入不一致&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)]
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; ConfirmPassword { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;定义邮件为必填，且满足邮件格式&lt;/span&gt;
&lt;span&gt;25&lt;/span&gt; &lt;span&gt;        [Required]
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;         [RegularExpression(&lt;span&gt;@&quot;&lt;/span&gt;&lt;span&gt;[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,4}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)]
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; Email { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;定义年龄为必填，且1-130岁之间&lt;/span&gt;
&lt;span&gt;29&lt;/span&gt; &lt;span&gt;        [Required]
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;         [Range(&lt;span&gt;1&lt;/span&gt;, &lt;span&gt;130&lt;/span&gt;&lt;span&gt;)]
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; Age { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt;         
&lt;span&gt;35&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt; Controller:DefaultController&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('e9b9e053-57a8-4615-b8f6-4f52e262a101')&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_e9b9e053-57a8-4615-b8f6-4f52e262a101&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_e9b9e053-57a8-4615-b8f6-4f52e262a101&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('e9b9e053-57a8-4615-b8f6-4f52e262a101',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_e9b9e053-57a8-4615-b8f6-4f52e262a101&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Collections.Generic;
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Linq;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Web;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Web.Mvc;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; DataValidate.Models;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; DataValidate.Controllers
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; DefaultController : Controller
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; GET: Default&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt; 
&lt;span&gt;14&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt;&lt;span&gt; ActionResult Index()
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt; View();
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; 
&lt;span&gt;19&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt;&lt;span&gt; ActionResult DataValidateDemo(UserInfo userInfo)
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;             UserInfo _userInfo = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; UserInfo();
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;             _userInfo.UserName =&lt;span&gt; userInfo.UserName;
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; View(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Index&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;View:Index.cshtml&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('06e24edc-1c0f-4ea7-8b06-f5a04516c41b')&quot; readability=&quot;33&quot;&gt;&lt;img id=&quot;code_img_closed_06e24edc-1c0f-4ea7-8b06-f5a04516c41b&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_06e24edc-1c0f-4ea7-8b06-f5a04516c41b&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('06e24edc-1c0f-4ea7-8b06-f5a04516c41b',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_06e24edc-1c0f-4ea7-8b06-f5a04516c41b&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;61&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;@model DataValidate.Models.UserInfo
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; 
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;@{
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;    ViewBag.Title = &quot;Index&quot;;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; 
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;h2&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Index&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;h2&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt; 
&lt;span&gt;10&lt;/span&gt; &lt;span&gt;@using (Html.BeginForm(&quot;DataValidateDemo&quot;, &quot;Default&quot;))
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;@Html.Label(&quot;用户名&quot;)： @Html.TextBoxFor(m=&amp;gt;m.UserName)
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;    @Html.ValidationMessageFor(m=&amp;gt;m.UserName)
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;@Html.Label(&quot;密码&quot;)：@Html.TextBox(&quot;Password&quot;)
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;     @Html.ValidationMessageFor(m=&amp;gt;m.Password)&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt; 
&lt;span&gt;18&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;@Html.Label(&quot;确认密码&quot;)：@Html.TextBox(&quot;ConfirmPassword&quot;)
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;     @Html.ValidationMessageFor(m=&amp;gt;m.ConfirmPassword)&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;21&lt;/span&gt; &lt;span&gt;        @Html.Label(&quot;邮件&quot;)：@Html.TextBox(&quot;Email&quot;)
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;        @Html.ValidationMessageFor(m =&amp;gt; m.Email)
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;24&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;25&lt;/span&gt; &lt;span&gt;        @Html.Label(&quot;年龄&quot;)：@Html.TextBox(&quot;Age&quot;)
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; &lt;span&gt;        @Html.ValidationMessageFor(m =&amp;gt; m.Age)
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;28&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;submit&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;提交&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;29&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;我们来看看测试结果&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1066923/201801/1066923-20180115110232115-824071017.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;6.为什么要把Remote剔出来单独讲解呢？&lt;/p&gt;
&lt;p&gt; 我们知道，除Remote以外的五大验证特性，命名空间均为System.ComponentModel.DataAnnotations，而Remote特性的命名空间却是System.Web.Mvc。&lt;/p&gt;
&lt;p&gt; Remote，从字面意思可以看出，“远程”，即远程验证。Remote特性指利用服务器端的回调函数执行客户端的验证逻辑(当执行到有Remote特性的元数据时，会自动地调用相应的控制器下的Action)。&lt;/p&gt;
&lt;p&gt; 举个例子：新会员注册时，一般手机号是不允许重复的，检查DB中是否已存在手机号，可以使用Remote特性来验证。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1066923/201801/1066923-20180115121437678-1102784800.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Model:UserInfo.cs&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('294665d8-8577-4e75-a296-f33bc679b890')&quot; readability=&quot;35.5&quot;&gt;&lt;img id=&quot;code_img_closed_294665d8-8577-4e75-a296-f33bc679b890&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_294665d8-8577-4e75-a296-f33bc679b890&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('294665d8-8577-4e75-a296-f33bc679b890',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_294665d8-8577-4e75-a296-f33bc679b890&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;66&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Collections.Generic;
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Linq;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Web;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; 
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.ComponentModel.DataAnnotations;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; 
&lt;span&gt; 8&lt;/span&gt; 
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; DataValidate.Models
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; UserInfo
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;定义用户名必填&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt; &lt;span&gt;        [Required]
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; UserName { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;定义密码必填，且满足6位&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt; &lt;span&gt;        [Required]
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;         [StringLength(&lt;span&gt;128&lt;/span&gt;,MinimumLength =&lt;span&gt;6&lt;/span&gt;&lt;span&gt;)]
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; Password { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;验证两次输入的密码是否一致&lt;/span&gt;
&lt;span&gt;21&lt;/span&gt; &lt;span&gt;        [Required]
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;         [Compare(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Password&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, ErrorMessage = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;两次密码输入不一致&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)]
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; ConfirmPassword { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;定义邮件为必填，且满足邮件格式&lt;/span&gt;
&lt;span&gt;25&lt;/span&gt; &lt;span&gt;        [Required]
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;         [RegularExpression(&lt;span&gt;@&quot;&lt;/span&gt;&lt;span&gt;[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,4}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)]
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; Email { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;定义年龄为必填，且1-130岁之间&lt;/span&gt;
&lt;span&gt;29&lt;/span&gt; &lt;span&gt;        [Required]
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;         [Range(&lt;span&gt;1&lt;/span&gt;, &lt;span&gt;130&lt;/span&gt;&lt;span&gt;)]
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;          &lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; Age { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; 
&lt;span&gt;33&lt;/span&gt; &lt;span&gt;        [Required]
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt;         [System.Web.Mvc.Remote(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;CheckTelephone&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Default&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, ErrorMessage =&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;手机号码已经存在&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)]
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; Telephone { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt;         
&lt;span&gt;39&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;DefaultController&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('4276b382-d4a8-4c52-8dfa-9e722cca46e1')&quot; readability=&quot;33.5&quot;&gt;&lt;img id=&quot;code_img_closed_4276b382-d4a8-4c52-8dfa-9e722cca46e1&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_4276b382-d4a8-4c52-8dfa-9e722cca46e1&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('4276b382-d4a8-4c52-8dfa-9e722cca46e1',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_4276b382-d4a8-4c52-8dfa-9e722cca46e1&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;62&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Collections.Generic;
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Linq;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Web;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Web.Mvc;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; DataValidate.Models;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; DataValidate.Controllers
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; DefaultController : Controller
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; GET: Default&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt; 
&lt;span&gt;14&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt;&lt;span&gt; ActionResult Index()
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt; View();
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; 
&lt;span&gt;19&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt;&lt;span&gt; ActionResult DataValidateDemo(UserInfo userInfo)
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;             UserInfo _userInfo = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; UserInfo();
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;             _userInfo.UserName =&lt;span&gt; userInfo.UserName;
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; View(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Index&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; 
&lt;span&gt;26&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; ActionResult CheckTelephone(&lt;span&gt;string&lt;/span&gt;&lt;span&gt; telephone)
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (telephone==&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;13636595489&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;                 &lt;span&gt;return&lt;/span&gt; Json(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;手机号&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;+telephone+ &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;已经存在&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, JsonRequestBehavior.AllowGet);
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; Json(&lt;span&gt;true&lt;/span&gt;&lt;span&gt;, JsonRequestBehavior.AllowGet);
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; 
&lt;span&gt;34&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;Index.cshtml&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('0dcec8c3-8102-4156-ae2b-6cb03a0b08ed')&quot; readability=&quot;33&quot;&gt;&lt;img id=&quot;code_img_closed_0dcec8c3-8102-4156-ae2b-6cb03a0b08ed&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_0dcec8c3-8102-4156-ae2b-6cb03a0b08ed&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('0dcec8c3-8102-4156-ae2b-6cb03a0b08ed',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_0dcec8c3-8102-4156-ae2b-6cb03a0b08ed&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;61&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;@model DataValidate.Models.UserInfo
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; 
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;@{
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;    ViewBag.Title = &quot;Index&quot;;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;    Html.EnableClientValidation();
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;    Html.EnableUnobtrusiveJavaScript();
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; 
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; 
&lt;span&gt;11&lt;/span&gt; 
&lt;span&gt;12&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;h2&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Index&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;h2&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt; 
&lt;span&gt;14&lt;/span&gt; &lt;span&gt;@using (Html.BeginForm(&quot;DataValidateDemo&quot;, &quot;Default&quot;))
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt; &lt;span&gt;        @Html.Label(&quot;用户名&quot;)： @Html.TextBoxFor(m =&amp;gt; m.UserName)
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;        @Html.ValidationMessageFor(m =&amp;gt; m.UserName)
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;21&lt;/span&gt; &lt;span&gt;        @Html.Label(&quot;密码&quot;)：@Html.TextBox(&quot;Password&quot;)
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;        @Html.ValidationMessageFor(m =&amp;gt; m.Password)
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;24&lt;/span&gt; 
&lt;span&gt;25&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;26&lt;/span&gt; &lt;span&gt;        @Html.Label(&quot;确认密码&quot;)：@Html.TextBox(&quot;ConfirmPassword&quot;)
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; &lt;span&gt;        @Html.ValidationMessageFor(m =&amp;gt; m.ConfirmPassword)
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;29&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;30&lt;/span&gt; &lt;span&gt;        @Html.Label(&quot;邮件&quot;)：@Html.TextBox(&quot;Email&quot;)
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; &lt;span&gt;        @Html.ValidationMessageFor(m =&amp;gt; m.Email)
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;33&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;34&lt;/span&gt; &lt;span&gt;        @Html.Label(&quot;年龄&quot;)：@Html.TextBox(&quot;Age&quot;)
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt; &lt;span&gt;        @Html.ValidationMessageFor(m =&amp;gt; m.Age)
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;37&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;38&lt;/span&gt; &lt;span&gt;        @Html.Label(&quot;手机号码&quot;)：@Html.TextBox(&quot;Telephone&quot;)
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt; &lt;span&gt;        @Html.ValidationMessageFor(m =&amp;gt; m.Telephone)
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;41&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;submit&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;提交&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;42&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt; &lt;span&gt;@section scripts{
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt; 
&lt;span&gt;45&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;~/Scripts/jquery.validate.js&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;46&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;~/Scripts/jquery.validate.unobtrusive.js&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;47&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;测试结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1066923/201801/1066923-20180115122152037-1480726640.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2017.cnblogs.com/blog/1066923/201801/1066923-20180115122313303-1261512935.png&quot; alt=&quot;&quot; width=&quot;64&quot; height=&quot;78&quot;/&gt; 给大家留一个思考题：如何验证多个参数？&lt;/p&gt;
&lt;p&gt;      在实际项目开发中，一般我们验证的不仅仅是一个参数，而是多个参数，如用户名和手机号，身份证号等一起验证，关于多参数验证，Remote验证特性又是怎么处理的呢？&lt;/p&gt;
&lt;p&gt; （二） 验证错误提示&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2017.cnblogs.com/blog/1066923/201801/1066923-20180115071003256-1495361360.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;1.什么是验证错误提示？&lt;/p&gt;
&lt;p&gt;指验证字段在验证不通过时，反馈给用户的提示信息，如密码不能低于6位，手机号必须为11位，年龄限制在1-130岁之间等，通过验证特性的ErroMessage实现。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;[Required]
[StringLength(&lt;/span&gt;&lt;span&gt;128&lt;/span&gt;,MinimumLength =&lt;span&gt;6&lt;/span&gt;,ErrorMessage =&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;密码不能低于6位数&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;)]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;2.错误验证提示大致分为两大类：默认错误提示和自定义错误提示。&lt;/p&gt;
&lt;p&gt; (1)默认错误提示：当我们不指定ErroMessage的值时，ASP.NET MVC框架会指定默认值。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;定义密码必填，且满足6位&lt;/span&gt;
&lt;span&gt;[Required]
[StringLength(&lt;/span&gt;&lt;span&gt;128&lt;/span&gt;,MinimumLength =&lt;span&gt;6&lt;/span&gt;&lt;span&gt;)]
 &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; Password { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Result:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1066923/201801/1066923-20180115211215334-1807011752.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;(2)自定义值：我们为ErrorMessage指定具体自定义的值“密码不能低于6位数”&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;[Required]
[StringLength(&lt;/span&gt;&lt;span&gt;128&lt;/span&gt;,MinimumLength =&lt;span&gt;6&lt;/span&gt;,ErrorMessage =&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;密码不能低于6位数&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)]
&lt;/span&gt;&lt;span&gt; public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; Password { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; Result:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1066923/201801/1066923-20180115211924521-457284495.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;3.为什么要有自定义错误提示？&lt;/p&gt;
&lt;p&gt;(1)为用户呈现友好提示，我们来看一下2中的默认值和自定义值；&lt;/p&gt;
&lt;p&gt;默认值：字段Password必须是一个字符串，其最小长度为6，最大长度为128（&lt;span&gt;这么一句话，要是给不懂程序的用户看了，肯定会疯掉，&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;很简单，对程序员来说，“字段”二字再基础不过，&lt;/span&gt;&lt;span&gt;可对用户来说，他可能会问，字段是什么东东？&lt;/span&gt;）&lt;/p&gt;
&lt;p&gt;自定义值：密码不能低于6位数（&lt;span&gt;无论是程序员还是用户，都能看得明白&lt;/span&gt;）&lt;/p&gt;
&lt;p&gt; (2)提高通用性，比如对美国提供英语提示，对俄罗斯提供俄语提示等；&lt;/p&gt;
&lt;p&gt;4.如何实现通用性国际化？&lt;/p&gt;
&lt;p&gt;在如上的自定义验证错误提示中，我们使用的是硬编码的形式，然而，面向国际市场开发的，这种硬编码错误消息提示是不实用的，因为我们要为不同地区显示&lt;/p&gt;
&lt;p&gt;不同内容，实现国际化，庆幸的是，所有验证特性都允许为本地化的错误消息提示指定资源类型名称和资源名称，感兴趣的读者朋友，请参照How to:Set the&lt;/p&gt;
&lt;p&gt;Cultrue and UI Cultrue for ASP.NET Page Globalization(sites:http://msdn.microsoft.com/en-us/library/bz9tc508.aspx)&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1066923/201801/1066923-20180115122313303-1261512935.png&quot; alt=&quot;&quot; width=&quot;64&quot; height=&quot;78&quot;/&gt; 思考题，如何实现错误消息通用性国际化？&lt;/p&gt;
&lt;p&gt; （三）  验证原理&lt;/p&gt;
&lt;p&gt;关于数据验证，我们思考这样一个问题：验证是什么时候发生的？如何才能知道验证失败？&lt;/p&gt;
&lt;p&gt;本节我们将来回答这个问题。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1066923/201801/1066923-20180115082254318-1219207697.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; 1.要想充分理解验证原理，我们应该先熟悉几个基本概念：模型绑定器，模型元数据，模型验证器和模型状态（这部分内容，本篇文章不论述，大家知道这几个概念即可，具体详情内容，&lt;/p&gt;
&lt;p&gt;将在接下来的文章中与大家分享：【ASP.NET MVC系列】浅谈ASP.NET MVC 模型）&lt;/p&gt;
&lt;p&gt; 2.默认情况下，ASP.NET MVC框架在模型绑定时就执行验证逻辑，在执行验证时，分为隐式执行和显示执行。&lt;/p&gt;
&lt;p&gt; (1)隐式执行：一般指在控制器的Action中带有参数时，就会隐式执行模型验证。如下方法带有参数，因此就隐式执行模型绑定。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;public&lt;/span&gt;&lt;span&gt; ActionResult DataValidateDemo(UserInfo userInfo)
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;             UserInfo _userInfo = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; UserInfo();
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;             _userInfo.UserName =&lt;span&gt; userInfo.UserName;
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; View(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Index&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt;         }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; (2)显示执行：只利用控制器的UpdateModel或TryUpdateModel方式时，显示执行模型绑定。&lt;/p&gt;
&lt;p&gt;3.模型绑定器一旦使用新值更新模型属性时，就会利用当前的模型元数据获得模型的所有验证器；&lt;/p&gt;
&lt;p&gt;4.ASP.NET MVC运行时，DataAnnotationsModelValidator与数据验证一起工作；&lt;/p&gt;
&lt;p&gt;5.DataAnnotationsModelValidator验证器会找到所有的验证特性并执行它所包含的验证逻辑；&lt;/p&gt;
&lt;p&gt;6.模型绑定器捕获所有失败的验证规则，并把他们放入模型状态中；&lt;/p&gt;
&lt;p&gt;7.模型绑定主要的副产品是模型状态，模型状态包含如下内容：&lt;/p&gt;
&lt;p&gt;   (1)包含用户放入模型属性中的所有值；&lt;/p&gt;
&lt;p&gt;   (2)包含每个属性相关联的所有错误；&lt;/p&gt;
&lt;p&gt;  (3)包含所有与模型对象本身有关的错误；&lt;/p&gt;
&lt;p&gt;8.如果模型状态中存在错误，ModelState.IsValid就返回false;&lt;/p&gt;
&lt;p&gt;9.控制操作和验证错误是怎样执行的？&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1066923/201801/1066923-20180115223604521-820609722.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;控制器操作决定模型验证失败和验证成功时的执行流程。&lt;/p&gt;
&lt;p&gt;   (1)验证成功时：当验证成时，操作通常会执行必要的步骤来保存或更新用户信息；&lt;/p&gt;
&lt;p&gt;   (2)验证失败时：当验证失败时，操作一般会重新渲染提交模型值得视图；&lt;/p&gt;
&lt;p&gt;（四）自定义验证&lt;/p&gt;
&lt;p&gt;ASP.NET MVC之所以强大，在于其提供强大的自定义和扩展性，关于这个内容，会在后续的文章：“【SP.NET MVC系列】&lt;a&gt;浅谈ASP.NET MVC八大类扩展&lt;/a&gt;”中深入讲解这两个强大的特性。&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2017.cnblogs.com/blog/1066923/201801/1066923-20180115083436787-2057809305.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; 1.基于ASP.NET MVC的自定义验证，一般分为两大类型：将验证逻辑封装在自定义数据中和将验证逻辑封装在模型对象中。&lt;/p&gt;
&lt;p&gt;  (1)将验证逻辑封装在自定义数据中：复杂，但可复用性高；&lt;/p&gt;
&lt;p&gt;  (2)将验证逻辑封装在模型对象中：简单，但可复用性低；&lt;/p&gt;
&lt;p&gt; 2.将验证逻辑封装在自定数据中&lt;span&gt;(会在后续的文章：“【ASP.NET MVC系列】&lt;a&gt;&lt;span&gt;浅谈ASP.NET MVC八大类扩展&lt;/span&gt;&lt;/a&gt;”中深入讲解)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; 3.将验证逻辑封装模型对象中&lt;span&gt;(会在后续的文章：“【ASP.NET MVC系列】&lt;a&gt;&lt;span&gt;浅谈ASP.NET MVC八大类扩展&lt;/span&gt;&lt;/a&gt;”中深入讲解)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;三 数据注解&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; （一）七大类型ASP.NET MVC内置数据注解&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2017.cnblogs.com/blog/1066923/201801/1066923-20180115085113599-634777050.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;1.Dispaly特性：(1)模型属性设置友好的显示名称  (2)控制UI上属性的显示顺序；&lt;/p&gt;
&lt;p&gt;2.ScaffoldColumn特性：隐藏HTML辅助方法；&lt;/p&gt;
&lt;p&gt;3.DisplayFormat特性：处理属性的各种格式化选项；&lt;/p&gt;
&lt;p&gt;4.ReadOnly特性:确保默认的模型绑定器不使用新值来更新；&lt;/p&gt;
&lt;p&gt;5.DataType特性：提供关于属性的特定信息；&lt;/p&gt;
&lt;p&gt;6.UIHint特性：(1)为ASP.NET MVC运行时提供模板名称，以备调用模板辅助方法渲染输出时使用  (2)自定义模板辅助方法；&lt;/p&gt;
&lt;p&gt;7.HiddenInput特性：渲染type为hidden的元素；&lt;/p&gt;
&lt;p&gt;&lt;span&gt;四   参考文献&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;【01】ASP.NET MVC5 高级编程(Jon Galloway,Brad Wilson,K.Scott Allen,David Matson 著 ,孙远帅 译)&lt;/p&gt;
&lt;p&gt;【02】ASP.NET MVC5编程实战（第3版）（Dino Esposite 著，潘丽丞 译）&lt;/p&gt;
&lt;p&gt;&lt;span&gt;五   版权区&lt;/span&gt;&lt;/p&gt;
&lt;div&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;感谢您的阅读，若有不足之处，欢迎指教，共同学习、共同进步。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;博主网址：http://www.cnblogs.com/wangjiming/。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;极少部分文章利用读书、参考、引用、抄袭、复制和粘贴等多种方式整合而成的，大部分为原创。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;如您喜欢，麻烦推荐一下；如您有新想法，欢迎提出，邮箱：2098469527@qq.com。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;可以转载该博客，但必须著名博客来源。&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
</description>
<pubDate>Mon, 15 Jan 2018 15:34:00 +0000</pubDate>
<dc:creator>Alan_beijing</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/wangjiming/p/8286465.html</dc:identifier>
</item>
<item>
<title>LeetCode第[18]题(Java)：4Sum 标签：Array - 清风吹斜阳</title>
<link>http://www.cnblogs.com/Xieyang-blog/p/8290511.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/Xieyang-blog/p/8290511.html</guid>
<description>&lt;p&gt;题目难度：Medium&lt;/p&gt;
&lt;p&gt;题目：&lt;/p&gt;
&lt;p&gt;Given an array &lt;em&gt;S&lt;/em&gt; of &lt;em&gt;n&lt;/em&gt; integers, are there elements &lt;em&gt;a&lt;/em&gt;, &lt;em&gt;b&lt;/em&gt;, &lt;em&gt;c&lt;/em&gt;, and &lt;em&gt;d&lt;/em&gt; in &lt;em&gt;S&lt;/em&gt; such that &lt;em&gt;a&lt;/em&gt; + &lt;em&gt;b&lt;/em&gt; + &lt;em&gt;c&lt;/em&gt; + &lt;em&gt;d&lt;/em&gt; = target? Find all unique quadruplets in the array which gives the sum of target.&lt;/p&gt;
&lt;p&gt;Note: The solution set must not contain duplicate quadruplets.&lt;/p&gt;
&lt;p&gt;翻译：&lt;/p&gt;
&lt;p&gt;给定一个n个整数的数组S，在S中是否存在有a、b、c、d的元素使得a+b+c+d=target?如果有，请找出数组中所有唯一的组合。&lt;/p&gt;
&lt;p&gt;注意:解决方案集不能包含重复的四胞胎。&lt;/p&gt;
&lt;p&gt;【其实和3Sum是一个意思】&lt;/p&gt;

&lt;p&gt;思路：既然是在3Sum的基础上加了一个数，那么请允许我可耻的想到了在外面再加。。。。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1303641/201801/1303641-20180115222325459-1668283142.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;。。。。。。可是我实在想不到别的了，，外面的循环没有一个标准，所以也不可能在外面再用一遍left与right双重指针。&lt;/p&gt;
&lt;p&gt;嗯，那就可耻地写吧&lt;/p&gt;
&lt;p&gt;【&lt;span&gt;注意：很多同学面对算法题其实并不是没有思路，而是多多少少有些思路，但是心里知道这个思路很low写了也没多大意思，干脆就不写了而迫不及待去看答案。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;这就大错特错了，其实大多数的算法都是由简单算法演变而来的，只是在low算法的基础上或多或少地将冗余的步骤技巧性跳过了。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;都不把自己的思路写出来，那么当面对一个从没见过的算法题时思路几乎永远是空白。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;况且，平时写简单地算时各种边界问题的处理也能使我们养成良好的编程习惯和对代码的掌控力。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;我们不能为了刷题而刷题，应该是为了锻炼自己的思路。以上个人见解，欢迎讨论&lt;/span&gt;】&lt;/p&gt;

&lt;p&gt;Code：&lt;span id=&quot;result_progress&quot; class=&quot;ng-binding&quot;&gt;282 / 282 test cases passed.——72ms（beats 46.27%）　　　　时间复杂度：O(N&lt;sup&gt;3&lt;/sup&gt;)&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; List&amp;lt;List&amp;lt;Integer&amp;gt;&amp;gt; fourSum(&lt;span&gt;int&lt;/span&gt;[] nums, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; target) {
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;         List&amp;lt;List&amp;lt;Integer&amp;gt;&amp;gt; result = &lt;span&gt;new&lt;/span&gt; ArrayList&amp;lt;List&amp;lt;Integer&amp;gt;&amp;gt;&lt;span&gt;();
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;        Arrays.sort(nums);
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = 0; i &amp;lt; nums.length - 3; i++&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (i &amp;gt; 0 &amp;amp;&amp;amp; nums[i] == nums[i-1]) &lt;span&gt;continue&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;             &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; j = i + 1; j &amp;lt; nums.length - 2; j++&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt; (j &amp;gt; i + 1 &amp;amp;&amp;amp; nums[j] == nums[j-1]) &lt;span&gt;continue&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;                 &lt;span&gt;int&lt;/span&gt; sum = target - nums[i] -&lt;span&gt; nums[j];
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;                 &lt;span&gt;int&lt;/span&gt; left = j + 1&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;                 &lt;span&gt;int&lt;/span&gt; right = nums.length -1&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;                 &lt;span&gt;while&lt;/span&gt; (left &amp;lt;&lt;span&gt; right) {
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;                     &lt;span&gt;if&lt;/span&gt; (nums[left] + nums[right] ==&lt;span&gt; sum) {
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;                        result.add(Arrays.asList(nums[i], nums[j], nums[left], nums[right]));
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;                         &lt;span&gt;while&lt;/span&gt; (left &amp;lt; right &amp;amp;&amp;amp; nums[left] == nums[left+1]) left++&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;                         &lt;span&gt;while&lt;/span&gt; (left &amp;lt; right &amp;amp;&amp;amp; nums[right] == nums[right-1])  right--&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;                         left ++&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;                         right --&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;                     } &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (nums[left] + nums[right] &amp;lt;&lt;span&gt; sum) {
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;                         left++&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;                     } &lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;                         right--&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;                    }
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; result;
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;     }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 以上直接套用3sum那道题的“双指针法”，然后在外面加了一个for循环，没啥好说的。    3sum：&lt;a id=&quot;post_title_link_8242900&quot; href=&quot;http://www.cnblogs.com/Xieyang-blog/p/8242900.html&quot;&gt;LeetCode第[15]题(Java)：3Sum 标签：Array&lt;/a&gt;&lt;/p&gt;
&lt;p&gt; 过程错误：&lt;/p&gt;
&lt;p&gt;1.命名错误：length 写成 leng&lt;/p&gt;
&lt;p&gt;2.忘记定义类名：直接写成了left = j+1; （left前少写了int）【这就是不建议用(My)Eclipse做算法题的原因，脱离IDE可以改掉很多不好的编码习惯，也对将来面试手写代码帮助不少】&lt;/p&gt;
&lt;p&gt;3.忘记写&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (nums[left] + nums[right] &amp;lt;&lt;span&gt; sum) {
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;     left++&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; } &lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;      right--&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt;                           
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 这一部分了，导致最后输出为空，在写if的时候应该把所有的else if 和else都写完，以防止遗漏。&lt;span&gt;这也说明自己还是在凭借对之前用过的算法的记忆在写代码，而没有真正的做到理解后的运用自如，&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;所以即使自信对某一个算法很熟悉，在写的时候也应该思考它的思想和逻辑，以防止出现关键性的遗漏。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;答案1——Cdoe：&lt;span&gt;282 / 282 test cases passed.——29ms（beats 81.40%）　　　　时间复杂度：O(N&lt;sup&gt;3&lt;/sup&gt;)&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; 　　&lt;span&gt;public&lt;/span&gt; List&amp;lt;List&amp;lt;Integer&amp;gt;&amp;gt; fourSum(&lt;span&gt;int&lt;/span&gt;[] nums, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; target) {
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;         List&amp;lt;List&amp;lt;Integer&amp;gt;&amp;gt; res=&lt;span&gt;new&lt;/span&gt; ArrayList&amp;lt;&amp;gt;&lt;span&gt;();
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;(nums.length&amp;lt;4) &lt;span&gt;return&lt;/span&gt;&lt;span&gt; res;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;        Arrays.sort(nums);
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; i=0;i&amp;lt;nums.length-3;i++&lt;span&gt;){
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt;(i&amp;gt;0&amp;amp;&amp;amp;nums[i]==nums[i-1]) &lt;span&gt;continue&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;             
&lt;span&gt; 8&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt;(nums[i]*4&amp;gt;target) &lt;span&gt;break&lt;/span&gt;;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Too Big!!&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt;(nums[i]+3*nums[nums.length-1]&amp;lt;target) &lt;span&gt;continue&lt;/span&gt;;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;Too Small&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt;             
&lt;span&gt;11&lt;/span&gt;             &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; j=i+1;j&amp;lt;nums.length-2;j++&lt;span&gt;){
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt;(j&amp;gt;i+1&amp;amp;&amp;amp;nums[j]==nums[j-1]) &lt;span&gt;continue&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;                 
&lt;span&gt;14&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt;(nums[j]*3&amp;gt;target-nums[i]) &lt;span&gt;break&lt;/span&gt;;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;Too Big&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt;(nums[j]+2*nums[nums.length-1]&amp;lt;target-nums[i]) &lt;span&gt;continue&lt;/span&gt;;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Too Small&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt;                 
&lt;span&gt;17&lt;/span&gt;                 &lt;span&gt;int&lt;/span&gt; begin=j+1&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;                 &lt;span&gt;int&lt;/span&gt; end=nums.length-1&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;                 &lt;span&gt;while&lt;/span&gt;(begin&amp;lt;&lt;span&gt;end){
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;                     &lt;span&gt;int&lt;/span&gt; sum=nums[i]+nums[j]+nums[begin]+&lt;span&gt;nums[end];
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;                     &lt;span&gt;if&lt;/span&gt;(sum==&lt;span&gt;target){
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;                        res.add(Arrays.asList(nums[i],nums[j],nums[begin],nums[end]));
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;                         &lt;span&gt;while&lt;/span&gt;(begin&amp;lt;end &amp;amp;&amp;amp; nums[begin]==nums[begin+1]){begin++&lt;span&gt;;}
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;                         &lt;span&gt;while&lt;/span&gt;(begin&amp;lt;end &amp;amp;&amp;amp; nums[end]==nums[end-1]){end--&lt;span&gt;;}
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;                         begin++&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;                         end--&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;                     }&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (sum&amp;lt;&lt;span&gt;target){
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;                         begin++&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;                     }&lt;span&gt;else&lt;/span&gt;&lt;span&gt;{
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;                         end--&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; &lt;span&gt;                    }
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; res;
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt;     }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 和我的解法是一样的，但是多加了一些条件判断，去除了一些重复数据和不可能数据，这样在很多测试用例时能省下不少时间。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;面试手写的时候大家可以秀一秀这样的操作，但是做公司的笔试题的时候因为做题时间有限，除非已经都AC，否则优先保证完整性即可。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;这波强行解释怎么样！&lt;img src=&quot;https://images2017.cnblogs.com/blog/1303641/201801/1303641-20180115231502928-1714484824.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;答案2——&lt;span&gt;Code：282 / 282 test cases passed.——28ms（beats 83.45%）　　　　时间复杂度：O(N&lt;sup&gt;3&lt;/sup&gt;)&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;79&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; List&amp;lt;List&amp;lt;Integer&amp;gt;&amp;gt; fourSum(&lt;span&gt;int&lt;/span&gt;[] nums, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; target) {
&lt;/span&gt;&lt;span&gt;  2&lt;/span&gt;         ArrayList&amp;lt;List&amp;lt;Integer&amp;gt;&amp;gt; res = &lt;span&gt;new&lt;/span&gt; ArrayList&amp;lt;List&amp;lt;Integer&amp;gt;&amp;gt;&lt;span&gt;();
&lt;/span&gt;&lt;span&gt;  3&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt; len =&lt;span&gt; nums.length;
&lt;/span&gt;&lt;span&gt;  4&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (nums == &lt;span&gt;null&lt;/span&gt; || len &amp;lt; 4&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;  5&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt; res;
&lt;/span&gt;&lt;span&gt;  6&lt;/span&gt; 
&lt;span&gt;  7&lt;/span&gt; &lt;span&gt;        Arrays.sort(nums);
&lt;/span&gt;&lt;span&gt;  8&lt;/span&gt; 
&lt;span&gt;  9&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt; max = nums[len - 1&lt;span&gt;];
&lt;/span&gt;&lt;span&gt; 10&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (4 * nums[0] &amp;gt; target || 4 * max &amp;lt;&lt;span&gt; target)
&lt;/span&gt;&lt;span&gt; 11&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt; res;
&lt;/span&gt;&lt;span&gt; 12&lt;/span&gt; 
&lt;span&gt; 13&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt;&lt;span&gt; i, z;
&lt;/span&gt;&lt;span&gt; 14&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt; (i = 0; i &amp;lt; len; i++&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt; 15&lt;/span&gt;             z =&lt;span&gt; nums[i];
&lt;/span&gt;&lt;span&gt; 16&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (i &amp;gt; 0 &amp;amp;&amp;amp; z == nums[i - 1])&lt;span&gt;//&lt;/span&gt;&lt;span&gt; avoid duplicate&lt;/span&gt;
&lt;span&gt; 17&lt;/span&gt;                 &lt;span&gt;continue&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 18&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (z + 3 * max &amp;lt; target) &lt;span&gt;//&lt;/span&gt;&lt;span&gt; z is too small&lt;/span&gt;
&lt;span&gt; 19&lt;/span&gt;                 &lt;span&gt;continue&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 20&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (4 * z &amp;gt; target) &lt;span&gt;//&lt;/span&gt;&lt;span&gt; z is too large&lt;/span&gt;
&lt;span&gt; 21&lt;/span&gt;                 &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 22&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (4 * z == target) { &lt;span&gt;//&lt;/span&gt;&lt;span&gt; z is the boundary&lt;/span&gt;
&lt;span&gt; 23&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt; (i + 3 &amp;lt; len &amp;amp;&amp;amp; nums[i + 3] ==&lt;span&gt; z)
&lt;/span&gt;&lt;span&gt; 24&lt;/span&gt; &lt;span&gt;                    res.add(Arrays.asList(z, z, z, z));
&lt;/span&gt;&lt;span&gt; 25&lt;/span&gt;                 &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 26&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt; 27&lt;/span&gt; 
&lt;span&gt; 28&lt;/span&gt;             threeSumForFourSum(nums, target - z, i + 1, len - 1&lt;span&gt;, res, z);
&lt;/span&gt;&lt;span&gt; 29&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 30&lt;/span&gt; 
&lt;span&gt; 31&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; res;
&lt;/span&gt;&lt;span&gt; 32&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 33&lt;/span&gt; 
&lt;span&gt; 34&lt;/span&gt;     &lt;span&gt;/*&lt;/span&gt;
&lt;span&gt; 35&lt;/span&gt; &lt;span&gt;     * Find all possible distinguished three numbers adding up to the target
&lt;/span&gt;&lt;span&gt; 36&lt;/span&gt; &lt;span&gt;     * in sorted array nums[] between indices low and high. If there are,
&lt;/span&gt;&lt;span&gt; 37&lt;/span&gt; &lt;span&gt;     * add all of them into the ArrayList fourSumList, using
&lt;/span&gt;&lt;span&gt; 38&lt;/span&gt; &lt;span&gt;     * fourSumList.add(Arrays.asList(z1, the three numbers))
&lt;/span&gt;&lt;span&gt; 39&lt;/span&gt;      &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 40&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; threeSumForFourSum(&lt;span&gt;int&lt;/span&gt;[] nums, &lt;span&gt;int&lt;/span&gt; target, &lt;span&gt;int&lt;/span&gt; low, &lt;span&gt;int&lt;/span&gt; high, ArrayList&amp;lt;List&amp;lt;Integer&amp;gt;&amp;gt;&lt;span&gt; fourSumList,
&lt;/span&gt;&lt;span&gt; 41&lt;/span&gt;             &lt;span&gt;int&lt;/span&gt;&lt;span&gt; z1) {
&lt;/span&gt;&lt;span&gt; 42&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (low + 1 &amp;gt;=&lt;span&gt; high)
&lt;/span&gt;&lt;span&gt; 43&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 44&lt;/span&gt; 
&lt;span&gt; 45&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt; max =&lt;span&gt; nums[high];
&lt;/span&gt;&lt;span&gt; 46&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (3 * nums[low] &amp;gt; target || 3 * max &amp;lt;&lt;span&gt; target)
&lt;/span&gt;&lt;span&gt; 47&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 48&lt;/span&gt; 
&lt;span&gt; 49&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt;&lt;span&gt; i, z;
&lt;/span&gt;&lt;span&gt; 50&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt; (i = low; i &amp;lt; high - 1; i++&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt; 51&lt;/span&gt;             z =&lt;span&gt; nums[i];
&lt;/span&gt;&lt;span&gt; 52&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (i &amp;gt; low &amp;amp;&amp;amp; z == nums[i - 1]) &lt;span&gt;//&lt;/span&gt;&lt;span&gt; avoid duplicate&lt;/span&gt;
&lt;span&gt; 53&lt;/span&gt;                 &lt;span&gt;continue&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 54&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (z + 2 * max &amp;lt; target) &lt;span&gt;//&lt;/span&gt;&lt;span&gt; z is too small&lt;/span&gt;
&lt;span&gt; 55&lt;/span&gt;                 &lt;span&gt;continue&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 56&lt;/span&gt; 
&lt;span&gt; 57&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (3 * z &amp;gt; target) &lt;span&gt;//&lt;/span&gt;&lt;span&gt; z is too large&lt;/span&gt;
&lt;span&gt; 58&lt;/span&gt;                 &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 59&lt;/span&gt; 
&lt;span&gt; 60&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (3 * z == target) { &lt;span&gt;//&lt;/span&gt;&lt;span&gt; z is the boundary&lt;/span&gt;
&lt;span&gt; 61&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt; (i + 1 &amp;lt; high &amp;amp;&amp;amp; nums[i + 2] ==&lt;span&gt; z)
&lt;/span&gt;&lt;span&gt; 62&lt;/span&gt; &lt;span&gt;                    fourSumList.add(Arrays.asList(z1, z, z, z));
&lt;/span&gt;&lt;span&gt; 63&lt;/span&gt;                 &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 64&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt; 65&lt;/span&gt; 
&lt;span&gt; 66&lt;/span&gt;             twoSumForFourSum(nums, target - z, i + 1&lt;span&gt;, high, fourSumList, z1, z);
&lt;/span&gt;&lt;span&gt; 67&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 68&lt;/span&gt; 
&lt;span&gt; 69&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 70&lt;/span&gt; 
&lt;span&gt; 71&lt;/span&gt;     &lt;span&gt;/*&lt;/span&gt;
&lt;span&gt; 72&lt;/span&gt; &lt;span&gt;     * Find all possible distinguished two numbers adding up to the target
&lt;/span&gt;&lt;span&gt; 73&lt;/span&gt; &lt;span&gt;     * in sorted array nums[] between indices low and high. If there are,
&lt;/span&gt;&lt;span&gt; 74&lt;/span&gt; &lt;span&gt;     * add all of them into the ArrayList fourSumList, using
&lt;/span&gt;&lt;span&gt; 75&lt;/span&gt; &lt;span&gt;     * fourSumList.add(Arrays.asList(z1, z2, the two numbers))
&lt;/span&gt;&lt;span&gt; 76&lt;/span&gt;      &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 77&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; twoSumForFourSum(&lt;span&gt;int&lt;/span&gt;[] nums, &lt;span&gt;int&lt;/span&gt; target, &lt;span&gt;int&lt;/span&gt; low, &lt;span&gt;int&lt;/span&gt; high, ArrayList&amp;lt;List&amp;lt;Integer&amp;gt;&amp;gt;&lt;span&gt; fourSumList,
&lt;/span&gt;&lt;span&gt; 78&lt;/span&gt;             &lt;span&gt;int&lt;/span&gt; z1, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; z2) {
&lt;/span&gt;&lt;span&gt; 79&lt;/span&gt; 
&lt;span&gt; 80&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (low &amp;gt;=&lt;span&gt; high)
&lt;/span&gt;&lt;span&gt; 81&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 82&lt;/span&gt; 
&lt;span&gt; 83&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (2 * nums[low] &amp;gt; target || 2 * nums[high] &amp;lt;&lt;span&gt; target)
&lt;/span&gt;&lt;span&gt; 84&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 85&lt;/span&gt; 
&lt;span&gt; 86&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt; i = low, j =&lt;span&gt; high, sum, x;
&lt;/span&gt;&lt;span&gt; 87&lt;/span&gt;         &lt;span&gt;while&lt;/span&gt; (i &amp;lt;&lt;span&gt; j) {
&lt;/span&gt;&lt;span&gt; 88&lt;/span&gt;             sum = nums[i] +&lt;span&gt; nums[j];
&lt;/span&gt;&lt;span&gt; 89&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (sum ==&lt;span&gt; target) {
&lt;/span&gt;&lt;span&gt; 90&lt;/span&gt; &lt;span&gt;                fourSumList.add(Arrays.asList(z1, z2, nums[i], nums[j]));
&lt;/span&gt;&lt;span&gt; 91&lt;/span&gt; 
&lt;span&gt; 92&lt;/span&gt;                 x =&lt;span&gt; nums[i];
&lt;/span&gt;&lt;span&gt; 93&lt;/span&gt;                 &lt;span&gt;while&lt;/span&gt; (++i &amp;lt; j &amp;amp;&amp;amp; x == nums[i]) &lt;span&gt;//&lt;/span&gt;&lt;span&gt; avoid duplicate&lt;/span&gt;
&lt;span&gt; 94&lt;/span&gt; &lt;span&gt;                    ;
&lt;/span&gt;&lt;span&gt; 95&lt;/span&gt;                 x =&lt;span&gt; nums[j];
&lt;/span&gt;&lt;span&gt; 96&lt;/span&gt;                 &lt;span&gt;while&lt;/span&gt; (i &amp;lt; --j &amp;amp;&amp;amp; x == nums[j]) &lt;span&gt;//&lt;/span&gt;&lt;span&gt; avoid duplicate&lt;/span&gt;
&lt;span&gt; 97&lt;/span&gt; &lt;span&gt;                    ;
&lt;/span&gt;&lt;span&gt; 98&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt; 99&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (sum &amp;lt;&lt;span&gt; target)
&lt;/span&gt;&lt;span&gt;100&lt;/span&gt;                 i++&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;101&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (sum &amp;gt;&lt;span&gt; target)
&lt;/span&gt;&lt;span&gt;102&lt;/span&gt;                 j--&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;103&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;104&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;105&lt;/span&gt;     }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;呃，还写了两个调用函数。。，&lt;/p&gt;
&lt;p&gt;它在主函数里面循环调用了3sum的算法，然后加了一些判断，其实就是和答案一也就是和我的也是一样的。。。。。。&lt;img src=&quot;https://images2017.cnblogs.com/blog/1303641/201801/1303641-20180115232637271-538852043.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;&quot;/&gt;&lt;/p&gt;
</description>
<pubDate>Mon, 15 Jan 2018 15:31:00 +0000</pubDate>
<dc:creator>清风吹斜阳</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/Xieyang-blog/p/8290511.html</dc:identifier>
</item>
<item>
<title>TextView 的新特性，Autosizing 到底是如何实现的？ | 源码分析 - 承香墨影</title>
<link>http://www.cnblogs.com/plokmju/p/8290394.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/plokmju/p/8290394.html</guid>
<description>[unable to retrieve full-text content]一、前言 Hi，大家好，我是承香墨影！ 前两天聊了一下 Autosizing 的使用，反映还不错。毕竟是这种能解决实际问题的新 Api，确实在需要的时候，用起来会很顺手。 简单回顾一下，Autosizing 是在 Support v26 中新支持的功能，可以根据文本的内容和 TextView 的大小</description>
<pubDate>Mon, 15 Jan 2018 14:57:00 +0000</pubDate>
<dc:creator>承香墨影</dc:creator>
<dc:identifier>http://www.cnblogs.com/plokmju/p/8290394.html</dc:identifier>
</item>
<item>
<title>Effective Java 第三版——19. 如果使用继承则设计，并文档说明，否则不该使用 - 林本托</title>
<link>http://www.cnblogs.com/IcanFixIt/p/8290126.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/IcanFixIt/p/8290126.html</guid>
<description>&lt;blockquote readability=&quot;9&quot;&gt;
&lt;p&gt;Tips&lt;br/&gt;《Effective Java, Third Edition》一书英文版已经出版，这本书的第二版想必很多人都读过，号称Java四大名著之一，不过第二版2009年出版，到现在已经将近8年的时间，但随着Java 6，7，8，甚至9的发布，Java语言发生了深刻的变化。&lt;br/&gt;在这里第一时间翻译成中文版。供大家学习分享之用。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/4366140-ca5216df5c1029f6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Effective Java, Third Edition&quot;/&gt;&lt;/p&gt;

&lt;p&gt;条目 18中提醒你注意继承没有设计和文档说明的“外来”类的子类化的危险。 那么为了继承而设计和文档说明一个类是什么意思呢？&lt;/p&gt;
&lt;p&gt;首先，这个类必须准确地描述重写这个方法带来的影响。 换句话说，该类必须文档说明可重写方法的自用性（self-use）。 对于每个公共或受保护的方法，文档必须指明方法调用哪些重写方法，以何种顺序以及每次调用的结果如何影响后续处理。 （重写方法，这里是指非final修饰的方法，无论是公开还是保护的。）更一般地说，一个类必须文档说明任何可能调用可重写方法的情况。 例如，后台线程或者静态初始化代码块可能会调用这样的方法。&lt;/p&gt;
&lt;p&gt;调用可重写方法的方法在文档注释结束时包含对这些调用的描述。 这些描述在规范中特定部分，标记为“Implementation Requirements,”，由Javadoc标签&lt;code&gt;@implSpec&lt;/code&gt;生成。 本节介绍该方法的内部工作原理。 下面是从&lt;code&gt;java.util.AbstractCollection&lt;/code&gt;类的规范中拷贝的例子：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;public boolean remove(Object o)
Removes a single instance of the specified element from this collection, if it is present (optional operation). More formally, removes an element e such that Objects.equals(o, e), if this collection contains one or more such elements. Returns true if this collection contained the specified element (or equivalently, if this collection changed as a result of the call).

Implementation Requirements: This implementation iterates over the collection looking for the specified element. If it finds the element, it removes the element from the collection using the iterator’s remove method. Note that this implementation throws an UnsupportedOperationException if the iterator returned by this collection’s iterator method does not implement the remove method and this collection contains the specified object.&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;从该集合中删除指定元素的单个实例（如果存在，&lt;code&gt;optional&lt;/code&gt;实例操作）。 更正式地说，如果这个集合包含一个或多个这样的元素，删除使得&lt;code&gt;Objects.equals(o, e)&lt;/code&gt;的一个元素e。 如果此集合包含指定的元素（或者等同于此集合因调用而发生了更改），则返回true。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;实现要求&lt;/strong&gt;：这个实现迭代遍历集合查找指定元素。 如果找到元素，则使用迭代器的&lt;code&gt;remove&lt;/code&gt;方法从集合中删除元素。 请注意，如果此集合的&lt;code&gt;iterator&lt;/code&gt;方法返回的迭代器未实现&lt;code&gt;remove&lt;/code&gt;方法，并且此集合包含指定的对象，则此实现将引发&lt;code&gt;UnsupportedOperationException&lt;/code&gt;异常。&lt;/p&gt;
&lt;p&gt;这个文档毫无疑问地说明，重写&lt;code&gt;iterator&lt;/code&gt;方法会影响&lt;code&gt;remove&lt;/code&gt;方法的行为。 它还描述了&lt;code&gt;iterator&lt;/code&gt;方法返回的Iterator行为将如何影响&lt;code&gt;remove&lt;/code&gt;方法的行为。 与条目 18中的情况相反，在这种情况下，程序员继承&lt;code&gt;HashSet&lt;/code&gt;并不能说明重写add方法是否会影响addAll方法的行为。&lt;/p&gt;
&lt;p&gt;但是，这是否违背了一个良好的API文档应该描述给定的方法是什么，而不是它是如何做的呢？ 是的，它确实！这是继承违反封装这一事实的不幸后果。要文档说明一个类以便可以安全地进行子类化，必须描述清楚那些没有详细说明的实现细节。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;@implSpec&lt;/code&gt;标签是在Java 8中添加的，并且在Java 9中被大量使用。这个标签应该默认启用，但是从Java 9开始，除非通过命令行开关&lt;code&gt;-tag &quot;apiNote:a:API Note:”&lt;/code&gt;，否则Javadoc实用工具仍然会忽略它。&lt;/p&gt;
&lt;p&gt;设计继承涉及的不仅仅是文档说明自用的模式。 为了让程序员能够写出有效的子类而不会带来不适当的痛苦，一个类可能以明智选择的受保护方法的形式提供内部工作，或者在罕见的情况下，提供受保护的属性。 例如，考虑&lt;code&gt;java.util.AbstractList&lt;/code&gt;中的&lt;code&gt;removeRange&lt;/code&gt;方法：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;protected void removeRange(int fromIndex, int toIndex)
Removes from this list all of the elements whose index is between fromIndex, inclusive, and toIndex, exclusive. Shifts any succeeding elements to the left (reduces their index). This call shortens the list by (toIndex - fromIndex) elements. (If toIndex == fromIndex, this operation has no effect.)
This method is called by the clear operation on this list and its sublists. Overriding this method to take advantage of the internals of the list implementation can substantially improve the performance of the clear operation on this list and its sublists.
Implementation Requirements: This implementation gets a list iterator positioned before fromIndex and repeatedly calls ListIterator.nextfollowed by ListIterator.remove, until the entire range has been removed. Note: If ListIterator.remove requires linear time, this implementation requires quadratic time.
Parameters:
fromIndex       index of first element to be removed.

toIndex           index after last element to be removed.&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;从此列表中删除索引介于&lt;code&gt;fromIndex&lt;/code&gt;（包含）和&lt;code&gt;inclusive&lt;/code&gt;（不含）之间的所有元素。 将任何后续元素向左移（减少索引）。 这个调用通过&lt;code&gt;（toIndex - fromIndex）&lt;/code&gt;元素来缩短列表。 （如果&lt;code&gt;toIndex == fromIndex&lt;/code&gt;，则此操作无效。）&lt;/p&gt;
&lt;p&gt;这个方法是通过列表及其子类的clear操作来调用的。重写这个方法利用列表内部实现的优势，可以大大提高列表和子类的clear操作性能。&lt;/p&gt;
&lt;p&gt;实现要求：这个实现获取一个列表迭代器，它位于&lt;code&gt;fromIndex&lt;/code&gt;之前，并重复调用&lt;code&gt;ListIterator.remove&lt;/code&gt;和&lt;code&gt;ListIterator.next&lt;/code&gt;方法，直到整个范围被删除。 注意：如果&lt;code&gt;ListIterator.remove&lt;/code&gt;需要线性时间，则此实现需要平方级时间。&lt;/p&gt;
&lt;p&gt;参数：&lt;br/&gt;fromIndex 要移除的第一个元素的索引&lt;br/&gt;toIndex 要移除的最后一个元素之后的索引&lt;/p&gt;
&lt;p&gt;这个方法对List实现的最终用户来说是没有意义的。 它仅仅是为了使子类很容易提供一个快速clear方法。 在没有&lt;code&gt;removeRange&lt;/code&gt;方法的情况下，当在子列表上调用clear方法，子类将不得不使用平方级的时间，否则，或从头重写整个subList机制——这不是一件容易的事情！&lt;/p&gt;
&lt;p&gt;那么当你设计一个继承类的时候，你如何决定暴露哪些的受保护的成员呢？ 不幸的是，没有灵丹妙药。 所能做的最好的就是努力思考，做出最好的测试，然后通过编写子类来进行测试。 应该尽可能少地暴露受保护的成员，因为每个成员都表示对实现细节的承诺。 另一方面，你不能暴露太少，因为失去了保护的成员会导致一个类几乎不能用于继承。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;测试为继承而设计的类的唯一方法是编写子类&lt;/strong&gt;。 如果你忽略了一个关键的受保护的成员，试图编写一个子类将会使得遗漏痛苦地变得明显。 相反，如果编写的几个子类，而且没有一个使用受保护的成员，那么应该将其设为私有。 经验表明，三个子类通常足以测试一个可继承的类。 这些子类应该由父类作者以外的人编写。&lt;/p&gt;
&lt;p&gt;当你为继承设计一个可能被广泛使用的类的时候，要意识到你永远承诺你文档说明的自用模式以及隐含在其保护的方法和属性中的实现决定。 这些承诺可能会使后续版本中改善类的性能或功能变得困难或不可能。 因此，&lt;strong&gt;在发布它之前，你必须通过编写子类来测试你的类&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;另外，请注意，继承所需的特殊文档混乱了正常的文档，这是为创建类的实例并在其上调用方法的程序员设计的。 在撰写本文时，几乎没有工具将普通的API文档从和仅仅针对子类实现的信息，分离出来。&lt;/p&gt;
&lt;p&gt;还有一些类必须遵守允许继承的限制。 &lt;strong&gt;构造方法绝不能直接或间接调用可重写的方法&lt;/strong&gt;。 如果违反这个规则，将导致程序失败。 父类构造方法在子类构造方法之前运行，所以在子类构造方法运行之前，子类中的重写方法被调用。 如果重写方法依赖于子类构造方法执行的任何初始化，则此方法将不会按预期运行。 为了具体说明，这是一个违反这个规则的类：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;public class Super {
    // Broken - constructor invokes an overridable method
    public Super() {
        overrideMe();
    }
    public void overrideMe() {
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;以下是一个重写&lt;code&gt;overrideMe&lt;/code&gt;方法的子类，Super类的唯一构造方法会错误地调用它：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;public final class Sub extends Super {
    // Blank final, set by constructor
    private final Instant instant;

    Sub() {
        instant = Instant.now();
    }

    // Overriding method invoked by superclass constructor
    @Override public void overrideMe() {
        System.out.println(instant);
    }

    public static void main(String[] args) {
        Sub sub = new Sub();
        sub.overrideMe();
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;你可能期望这个程序打印两次&lt;code&gt;instant&lt;/code&gt;实例，但是它第一次打印出null，因为在Sub构造方法有机会初始化&lt;code&gt;instant&lt;/code&gt;属性之前，&lt;code&gt;overrideMe&lt;/code&gt;被Super构造方法调用。 请注意，这个程序观察两个不同状态的final属性！ 还要注意的是，如果&lt;code&gt;overrideMe&lt;/code&gt;方法调用了&lt;code&gt;instant&lt;/code&gt;实例中任何方法，那么当父类构造方法调用&lt;code&gt;overrideMe&lt;/code&gt;时，它将抛出一个&lt;code&gt;NullPointerException&lt;/code&gt;异常。 这个程序不会抛出&lt;code&gt;NullPointerException&lt;/code&gt;的唯一原因是&lt;code&gt;println&lt;/code&gt;方法容忍null参数。&lt;/p&gt;
&lt;p&gt;请注意，从构造方法中调用私有方法，其中任何一个方法都不可重写的，那么final方法和静态方法是安全的。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Cloneable&lt;/code&gt;和&lt;code&gt;Serializable&lt;/code&gt;接口在设计继承时会带来特殊的困难。 对于为继承而设计的类来说，实现这些接口通常不是一个好主意，因为这会给继承类的程序员带来很大的负担。 然而，可以采取特殊的行动来允许子类实现这些接口，而不需要强制这样做。 这些操作在条目 13和条目 86中有描述。&lt;/p&gt;
&lt;p&gt;如果你决定在为继承而设计的类中实现&lt;code&gt;Cloneable&lt;/code&gt;或&lt;code&gt;Serializable&lt;/code&gt;接口，那么应该知道，由于&lt;code&gt;clone&lt;/code&gt;和&lt;code&gt;readObjec&lt;/code&gt;t方法与构造方法相似，所以也有类似的限制：&lt;strong&gt;clone和readObject都不会直接或间接调用可重写的方法&lt;/strong&gt;。在&lt;code&gt;readObject&lt;/code&gt;的情况下，重写方法将在子类的状态被反序列化之前运行。 在&lt;code&gt;clone&lt;/code&gt;的情况下，重写方法将在子类的&lt;code&gt;clone&lt;/code&gt;方法有机会修复克隆的状态之前运行。 在任何一种情况下，都可能会出现程序故障。 在&lt;code&gt;clone&lt;/code&gt;的情况下，故障可能会损坏原始对象以及被克隆对象本身。 例如，如果重写方法假定它正在修改对象的深层结构的拷贝，但是尚未创建拷贝，则可能发生这种情况。&lt;/p&gt;
&lt;p&gt;最后，如果你决定在为继承设计的类中实现&lt;code&gt;Serializable&lt;/code&gt;接口，并且该类有一个&lt;code&gt;readResolve&lt;/code&gt;或&lt;code&gt;writeReplace&lt;/code&gt;方法，则必须使&lt;code&gt;readResolve&lt;/code&gt;或&lt;code&gt;writeReplace&lt;/code&gt;方法设置为受保护而不是私有。 如果这些方法是私有的，它们将被子类无声地忽略。 这是另一种情况，把实现细节成为类的API的一部分，以允许继承。&lt;/p&gt;
&lt;p&gt;到目前为止，&lt;strong&gt;设计一个继承类需要很大的努力，并且对这个类有很大的限制&lt;/strong&gt;。 这不是一个轻率的决定。 有些情况显然是正确的，比如抽象类，包括接口的骨架实现（skeletal implementations）（条目 20）。 还有其他的情况显然是错误的，比如不可变的类（条目 17）。&lt;/p&gt;
&lt;p&gt;但是普通的具体类呢？ 传统上，它们既不是final的，也不是为了子类化而设计和文档说明的，但是这种情况是危险的。每次修改这样的类，则继承此类的子类将被破坏。 这不仅仅是一个理论问题。 在修改非final的具体类的内部之后，接收与子类相关的错误报告并不少见，这些类没有为继承而设计和文档说明。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;解决这个问题的最好办法是，在没有想要安全地子类化的设计和文档说明的类中禁止子类化&lt;/strong&gt;。 有两种方法禁止子类化。 两者中较容易的是声明类为final。 另一种方法是使所有的构造方法都是私有的或包级私有的，并且添加公共静态工厂来代替构造方法。 这个方案在内部提供了使用子类的灵活性，在条目 17中讨论过。两种方法都是可以接受的。&lt;/p&gt;
&lt;p&gt;这个建议可能有些争议，因为许多程序员已经习惯于继承普通的具体类来增加功能，例如通知和同步等功能，或限制原有类的功能。 如果一个类实现了捕获其本质的一些接口，比如Set，List或Map，那么不应该为了禁止子类化而感到愧疚。 在条目 18中描述的包装类模式为增强功能提供了继承的优越选择。&lt;/p&gt;
&lt;p&gt;如果一个具体的类没有实现一个标准的接口，那么你可能会通过禁止继承来给一些程序员带来不便。 如果你觉得你必须允许从这样的类继承，一个合理的方法是确保类从不调用任何可重写的方法，并文档说明这个事实。 换句话说，完全消除类的自用（self-use）的可重写的方法。 这样做，你将创建一个合理安全的子类。 重写一个方法不会影响任何其他方法的行为。&lt;/p&gt;
&lt;p&gt;你可以机械地消除类的自我使用的重写方法，而不会改变其行为。 将每个可重写的方法的主体移动到一个私有的“帮助器方法”，并让每个可重写的方法调用其私有的帮助器方法。 然后用直接调用可重写方法的专用帮助器方法来替换每个自用的可重写方法。&lt;/p&gt;
&lt;p&gt;你可以机械地消除类的自用的重写方法，而不会改变其行为。 将每个可重写的方法的主体移到一个私有的“辅助方法（helper method）”，并让每个可重写的方法调用其私有的辅助方法。 然后用直接调用可重写方法的专用辅助方法来替换每个自用的可重写方法。&lt;/p&gt;
&lt;p&gt;总之，设计一个继承类是一件很辛苦的事情。 你必须文档说明所有的自用模式，一旦你文档说明了它们，必须承诺为他们的整个生命周期。 如果你不这样做，子类可能会依赖于父类的实现细节，并且如果父类的实现发生改变，子类可能会损坏。 为了允许其他人编写高效的子类，可能还需要导出一个或多个受保护的方法。 除非你知道有一个真正的子类需要，否则你可能最好是通过声明你的类为final禁止继承，或者确保没有可访问的构造方法。&lt;/p&gt;
</description>
<pubDate>Mon, 15 Jan 2018 13:50:00 +0000</pubDate>
<dc:creator>林本托</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/IcanFixIt/p/8290126.html</dc:identifier>
</item>
<item>
<title>[UWP]如何使用Fluent Design System (下) - dino.c</title>
<link>http://www.cnblogs.com/dino623/p/FluentDesignSystem2.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/dino623/p/FluentDesignSystem2.html</guid>
<description>&lt;h2 id=&quot;兼容旧版本&quot;&gt;4. 兼容旧版本&lt;/h2&gt;
&lt;p&gt;FDS最常见的问题之一是如何与Fall Creators Update之前的版本兼容，其实做起来也挺简单的，&lt;a href=&quot;https://github.com/DinoChan/Colorful-Box&quot;&gt;ColorfulBox&lt;/a&gt;就实现了Creators Update与Fall Creators Update之间的兼容。&lt;/p&gt;

&lt;p&gt;UWP Community Toolkit中的&lt;a href=&quot;https://docs.microsoft.com/en-us/windows/uwpcommunitytoolkit/controls/hamburgermenu&quot;&gt;HamburgerMenu&lt;/a&gt;是以前制作汉堡包导航菜单最常用的方案，升级到2.0版本以后它会判断运行的Windows版本，如果是Fall Creators Update则加载基于NavigationView的ControlTemplate，反之则加载默认ControlTemplate。控件内源码如下：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode cs&quot;&gt;
&lt;code class=&quot;sourceCode cs&quot;&gt;&lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (menu.&lt;span class=&quot;fu&quot;&gt;UseNavigationViewWhenPossible&lt;/span&gt; &amp;amp;&amp;amp; HamburgerMenu.&lt;span class=&quot;fu&quot;&gt;IsNavigationViewSupported&lt;/span&gt;)
{
    ResourceDictionary dict = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;ResourceDictionary&lt;/span&gt;();
    dict.&lt;span class=&quot;fu&quot;&gt;Source&lt;/span&gt; = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; System.&lt;span class=&quot;fu&quot;&gt;Uri&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;ms-appx:///Microsoft.Toolkit.Uwp.UI.Controls/HamburgerMenu/HamburgerMenuNavViewTemplate.xaml&quot;&lt;/span&gt;);
    menu.&lt;span class=&quot;fu&quot;&gt;_previousTemplateUsed&lt;/span&gt; = menu.&lt;span class=&quot;fu&quot;&gt;Template&lt;/span&gt;;
    menu.&lt;span class=&quot;fu&quot;&gt;Template&lt;/span&gt; = dict[&lt;span class=&quot;st&quot;&gt;&quot;HamburgerMenuNavViewTemplate&quot;&lt;/span&gt;] &lt;span class=&quot;kw&quot;&gt;as&lt;/span&gt; ControlTemplate;
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;使用条件xaml&quot;&gt;4.2 使用条件XAML&lt;/h3&gt;
&lt;p&gt;Reveal样式只在Fall Creators Update中提供，如果XAML中使用了Reveal样式，项目在Fall Creators Update前的版本运行将会报如下错误：“Cannot find a Resource with the Name/Key ButtonRevealStyle [Line: 396 Position: 9]””。&lt;/p&gt;
&lt;p&gt;对这种情况可以使用&lt;a href=&quot;https://docs.microsoft.com/zh-cn/windows/uwp/debug-test-perf/conditional-xaml&quot;&gt;条件 XAML&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;条件 XAML 提供在 XAML 标记中使用 ApiInformation.IsApiContractPresent 方法的一种途径。它从Creators Update开始提供。 若要使用条件 XAML，Visual Studio 项目的最低版本必须设置为内部版本 15063（Creators Update）或更高版本，且目标版本设置为比最低版本更高的版本。&lt;/p&gt;
&lt;p&gt;上面这种情况，可以在XAML中添加条件命名空间：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;sourceCode xml&quot;&gt;
&lt;code class=&quot;sourceCode xml&quot;&gt;xmlns:fcu=&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation?IsApiContractPresent(Windows.Foundation.UniversalApiContract,5)&quot;
xmlns:cu=&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation?IsApiContractNotPresent(Windows.Foundation.UniversalApiContract,5)&quot;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后使用条件命名空间前缀设置属性：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode xml&quot;&gt;
&lt;code class=&quot;sourceCode xml&quot;&gt;&lt;span class=&quot;kw&quot;&gt;&amp;lt;Button&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; fcu:Style=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;{StaticResource ButtonRevealStyle}&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上面这段XAML中 &lt;code&gt;Style=&quot;{StaticResource ButtonRevealStyle}&quot;&lt;/code&gt; 只在Fall Creators Update中生效，不影响以前版本。&lt;/p&gt;
&lt;h3 id=&quot;使用版本自适应代码&quot;&gt;4.3 使用版本自适应代码&lt;/h3&gt;
&lt;p&gt;对于Creators Update之前的版本，可以使用&lt;a href=&quot;https://docs.microsoft.com/en-us/uwp/api/Windows.Foundation.Metadata.ApiInformation&quot;&gt;ApiInformation类&lt;/a&gt;创建&lt;a href=&quot;https://docs.microsoft.com/zh-cn/windows/uwp/debug-test-perf/version-adaptive-code&quot;&gt;版本自适应代码&lt;/a&gt;。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;sourceCode cs&quot;&gt;
&lt;code class=&quot;sourceCode cs&quot;&gt;&lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (ApiInformation.&lt;span class=&quot;fu&quot;&gt;IsApiContractPresent&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;Windows.Foundation.UniversalApiContract&quot;&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;))
{
    &lt;span class=&quot;dt&quot;&gt;var&lt;/span&gt; frameworkElement = Window.&lt;span class=&quot;fu&quot;&gt;Current&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;Content&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;as&lt;/span&gt; FrameworkElement;
    &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; frameworkElement.&lt;span class=&quot;fu&quot;&gt;ActualTheme&lt;/span&gt;;
}
&lt;span class=&quot;kw&quot;&gt;else&lt;/span&gt;
{
    &lt;span class=&quot;dt&quot;&gt;var&lt;/span&gt; frameworkElement = Window.&lt;span class=&quot;fu&quot;&gt;Current&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;Content&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;as&lt;/span&gt; FrameworkElement;
    &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; frameworkElement.&lt;span class=&quot;fu&quot;&gt;RequestedTheme&lt;/span&gt;;
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ApiContract的主版本号见下表，从RTM开始到秋季创意者更新的版本号分别为1到5。&lt;br/&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/38937/201801/38937-20180106232526518-1731704830.png&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;其它常见的问题&quot;&gt;5. 其它常见的问题&lt;/h2&gt;
&lt;h3 id=&quot;为什么acrylic和reveal没有生效&quot;&gt;5.1 为什么Acrylic和Reveal没有生效&lt;/h3&gt;
&lt;p&gt;在几种情况下这两个特效不会生效，AcrylicBrush变成纯色不透明的Brush，应用了ButtonRevealStyle的按钮变成普通的按钮。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;电脑电量不足，或开启了“节电模式”；&lt;/li&gt;
&lt;li&gt;运行于低端硬件；&lt;/li&gt;
&lt;li&gt;在“设置\个性化\颜色”中关闭了“透明效果”选项。&lt;br/&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/38937/201801/38937-20180106232550549-1403000394.png&quot;/&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;除此之外还有一个常见的情况：在没激活的Windows 10上Acrylic和Reveal都不会生效。大概和Windows7没激活时不能开启Aero一样。&lt;/p&gt;
&lt;h3 id=&quot;错误使用acrylic&quot;&gt;5.2 错误使用Acrylic&lt;/h3&gt;
&lt;p&gt;Acrylic有些难用，一般来说Acrylic只应该作为背景使用在菜单、弹出遮罩或Flyout等，程序的主体区域的背景不可以使用Acrylic。如果在应用在整个应用的背景使用Acrylic，除了使整个应用十分晃眼（以及程序员的自我满足）外没有任何积极意义。&lt;br/&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/38937/201801/38937-20180106232642409-240778977.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;作为例外，Widget或轻量级应用可以在整个应用的背景使用Acrylic，像计算器应用那样。&lt;br/&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/38937/201801/38937-20180106232648612-1579471974.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;不要在使用了Acrylic的地方使用Accent Color作为文字的Foreground，看不清的。&lt;a href=&quot;https://github.com/Microsoft/WindowsTemplateStudio&quot;&gt;WindowsTemplateStudio&lt;/a&gt;在这点上也犯了错误。&lt;br/&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/38937/201801/38937-20180106232653878-866216029.png&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;错误使用reveal&quot;&gt;5.3 错误使用Reveal&lt;/h3&gt;
&lt;p&gt;简单来说：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;只应该在可操作的元素上使用Reveal。&lt;/li&gt;
&lt;li&gt;不要在孤立的元素上使用Reveal。&lt;/li&gt;
&lt;li&gt;不要在大面积的元素上使用Reveal。&lt;/li&gt;
&lt;li&gt;静态元素（例如文字和背景）不应该使用Reveal。&lt;/li&gt;
&lt;li&gt;不应该让Reveal干扰重要的信息。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;不在静态元素、孤立元素、大面积元素上使用Reveal，这倒不是为了性能考虑。光照一直是设计师梦寐以求的元素，它有其应用场景，不应该乱用导致UI杂乱无章。Reveal最大的作用是为一组元素提示其可操作区域，例如ListView，NavigationView，或类似计算器应用上的无边框按钮。如果整个UI都用上Reveal，对重要信息反而是种干扰。&lt;/p&gt;
&lt;h2 id=&quot;如何评价fluent-design-system&quot;&gt;6. 如何评价Fluent Design System&lt;/h2&gt;
&lt;h3 id=&quot;过去&quot;&gt;6.1 过去&lt;/h3&gt;
&lt;p&gt;Zune和WP的时代，局限于设备性能及屏幕尺寸，微软提出了MetroUI，提倡了扁平化设计、移除多余装饰元素，既好看又好用。&lt;/p&gt;
&lt;p&gt;Windows8时代，微软将MetroUI搬上桌面，依然十分好看，可各种问题马上浮现：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;MetroUI不能承载复杂信息，而且由于要顾及触摸操作，所有元素都设计得很大，导致UI显得更加简陋。&lt;/li&gt;
&lt;li&gt;在触屏时操作十分自然舒适的各种操作（典型的如横向移动）到了桌面的鼠标的操作变得十分别扭。&lt;/li&gt;
&lt;li&gt;MetroUI是一种难度很高的UI，在WP时代有大量让人惊艳的应用，但后来微软为了提高应用数量放松了大量粗制滥造的应用的验证，大大拉低了Metro的评价。&lt;/li&gt;
&lt;li&gt;微软自己都不清楚应该怎么使用MetroUI，更别提对它进行改进。&lt;/li&gt;
&lt;li&gt;为保证桌面和手机有相同的步伐，结果就是更新缓慢。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;本来这些问题一直都存在，只是以前应用少用户少，而且没有跨设备，也没有强制用户使用Metro，所以问题不明显。Windows8让这些问题一口气爆发，种种错误导致一个超前的UI慢慢落后。&lt;/p&gt;
&lt;p&gt;但这不妨碍大量模仿MetroUI的桌面应用和网站，从这方面来看MetroUI本身还算是成功的。&lt;/p&gt;
&lt;p&gt;Windows10时代，ModernUI代替了MetroUI。这时手机市场已经可以忽略不计，放弃了各种Metro的特色后，勉强拼凑起来的ModernUI在Windows10桌面上运行起来还不错。但没有特色的ModernUI已经没有人去模仿了。&lt;/p&gt;
&lt;h3 id=&quot;现状&quot;&gt;6.2 现状&lt;/h3&gt;
&lt;p&gt;微软现在需要解决ModernUI的各种问题，他需要一个能跨设备，可持续发展，精雕细琢，适应各种输入输出而且又很好看的UI。自从提出FDS到现在都已经不短时间了，FDS还只是一个很美好的愿景，没什么出彩的应用，而且大致上就只是现在的UWP换了个发光发亮的皮肤，没变得更好用，不满意的地方倒是一堆。&lt;/p&gt;
&lt;p&gt;例如我就觉得Reveal样式的按钮婆婆妈妈拖拖拉拉软软绵绵的没有手感，Pressed状态慢悠悠做动画，而鼠标释放后再次慢悠悠地做动画，几秒后才回到PointerOver状态，这使整个操作看起来反应迟钝。按钮的天职是反应迅速，这样才能给用户愉悦的操作感受。单独地看这个按钮样式的话除了炫技术还不如普通按钮，希望以后可以改进吧。&lt;br/&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/38937/201801/38937-20180109164004082-149552088.gif&quot;/&gt;&lt;/p&gt;
&lt;p&gt;另一方面，微软的宣传也有问题，现在很多媒体还将Acrylic说成Aero回归，明显是微软改名部不给力，起什么名不好，偏偏弄个这么复杂的英文。&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;不得不再次点名批评改名部，看看以前Lumia、Metro、Modern，个个都好读好记；Fluent Design System什么鬼。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;文档方面，Material Design有很详细的使用规范、指导原则，而且有面向设计师的文档，而FDS还太过空泛，文档主要是面向开发者的，各种规范分布在UWP的开发文档中。&lt;/p&gt;
&lt;p&gt;我觉得暂时来说，在设计师们还没有完全上手以前，只要规规矩矩用上新的Style、Brush、控件就可以让应用很好看了，可惜现在不少声称使用上FDS的应用为了炫技把各种新Control、新Brush、新Style用得乱七八糟还沾沾自喜。连微软自家的应用都不争气，例如我以前吐槽过的Mail应用，它还出过新闻高调宣传自己已经适配FDS了，结果好处没看到多少，倒是一大堆旧毛病都不处理。我还记得Windows8刚出的时候对官方应用感到十分惊艳，可惜现在的官方应用很多连基本的用色和对齐都没做好，都足够做反面教材了。&lt;/p&gt;
&lt;h3 id=&quot;未来&quot;&gt;6.3 未来&lt;/h3&gt;
&lt;p&gt;通过FDS的五个主题可以看出FDS的一个主要目的是让数字内容通过设备与真实世界链接，这是个很好的愿景。文章开头介绍的视频中展示了ParallaxView在MR中运行的效果，效果有趣很多：&lt;br/&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/38937/201801/38937-20180106233727159-542437287.gif&quot;/&gt;&lt;/p&gt;
&lt;p&gt;即使只在桌面上运行，FDS也激发了不少创意。例如&lt;a href=&quot;https://stories.uplabs.com/12-fluent-designs-you-need-to-check-out-e109213e5e01&quot;&gt;这些设计:&lt;/a&gt;&lt;br/&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/38937/201801/38937-20180109141721910-1754684044.gif&quot;/&gt;&lt;/p&gt;
&lt;p&gt;相比起当年MetroUI在桌面上后劲不足，FDS看起来有很长远的发展计划，虽然现在还有各种问题，相信以后能给我们更多的惊喜。&lt;/p&gt;
&lt;h2 id=&quot;结语&quot;&gt;7. 结语&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/dino623/p/IValueConverter.html&quot;&gt;上一篇文章&lt;/a&gt;承诺过尽量写短一些，但这篇文章的主题是个很庞大的话题，即使长话短说也短不了多少，所以分成两篇发布了。&lt;/p&gt;
&lt;p&gt;其实比起各种新控件新特效，我更希望FDS给出一个大的设计准则，一个严谨又包容多样性的规范。这几年随着Windows不再强势，设计师好像突然就忘了在桌面上怎么设计了。前两天看到一个运行在Windows上的系统的设计，系统的第一版和第二版都保持着“确定、取消”的按钮顺序，到最近的第三版就突然变成“取消、确定”，大概因为设计组的大佬们这两年都换了MacBook，而平时看的UI文档都是Google和Apple的，谁叫微软没有给设计师看的UI指导文档呢(如果不算&lt;a href=&quot;https://msdn.microsoft.com/en-us/library/windows/desktop/ff728831(v=vs.85).aspx&quot;&gt;这份古老的文档&lt;/a&gt;的话)。&lt;/p&gt;
&lt;p&gt;本来关于Metro我还写了很多，但都删除了。写博客是为了传播新知识，无意为已经死去的Metro引起口水战。而且我对FDS已经喋喋不休抱怨了很多，再写下去就更像怨妇了。&lt;/p&gt;
&lt;p&gt;当年也曾热衷于在桌面上使用Metro，但现在对在WPF上使用FDS没什么兴趣。何况这个主题是讨论UWP中额FDS，不太想涉及WPF。上一篇文章的评论里提到FDS其中几种元素在WPF上的实现，有兴趣可以参考一下。&lt;/p&gt;
&lt;h2 id=&quot;参考&quot;&gt;8. 参考&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://fluent.microsoft.com/&quot;&gt;Fluent Design System&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/windows/uwp/design/fluent-design-system/index&quot;&gt;Fluent Design System for UWP apps&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/windows/uwp/design/style/reveal&quot;&gt;Reveal highlight&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/windows/uwp/design/style/acrylic&quot;&gt;Acrylic material&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/windows/uwp/design/motion/connected-animation&quot;&gt;Connected animation&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/windows/uwp/design/motion/parallax&quot;&gt;ParallaxView&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/windows/uwp/design/controls-and-patterns/navigationview&quot;&gt;Navigation view&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/windows/uwp/debug-test-perf/conditional-xaml&quot;&gt;Conditional XAML&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;https://www.zhihu.com/question/59724483&quot;&gt;如何评价微软在 Build 2017 上提出的 Fluent Design System？&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;源码&quot;&gt;9. 源码&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/DinoChan/Fluent-Design-System-Sample&quot;&gt;Fluent-Design-System-Sample&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;https://github.com/DinoChan/Colorful-Box&quot;&gt;Colorful-Box&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Mon, 15 Jan 2018 13:03:00 +0000</pubDate>
<dc:creator>dino.c</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/dino623/p/FluentDesignSystem2.html</dc:identifier>
</item>
<item>
<title>windows第七层负载均衡--基于IIS的ARR负载均衡 - 秃驴竟敢跟贫道抢师太</title>
<link>http://www.cnblogs.com/NET-BLOG/p/8286732.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/NET-BLOG/p/8286732.html</guid>
<description>&lt;pre&gt;
{&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ResultCode&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;1000&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Message&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;成功&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;DetailError&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;null&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Data&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:[{&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Id&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;595225a5bbccc61ff88e89a7&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ChatName&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;testttt&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ChatType&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;2&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;CreaterUserId&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;76&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Members&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:[],&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;CreateTime&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;2017-06-27 17:30:13&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;LastChatTime&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;2017-11-10 17:43:17&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;LastChatText&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;[定位]&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;IsDisbanded&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;false&lt;/span&gt;},{&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Id&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;5952445ebbccc71ff8adf671&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ChatName&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;测试2&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ChatType&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;2&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;CreaterUserId&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;13&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Members&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:[],&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;CreateTime&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;2017-06-27 19:41:18&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;LastChatTime&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;2017-06-27 19:48:47&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;LastChatText&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;行&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;IsDisbanded&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;true&lt;/span&gt;},{&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Id&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;5952463dbbccc71ff8adf67d&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ChatName&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;巡视频么么哒哒&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ChatType&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;2&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;CreaterUserId&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;13&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Members&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:[],&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;CreateTime&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;2017-06-27 19:49:17&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;LastChatTime&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;2017-12-20 19:47:17&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;LastChatText&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;[定位]&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;IsDisbanded&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;false&lt;/span&gt;},{&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Id&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;59524c0ebbccc71ff8adf6ae&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ChatName&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;rrrffff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ChatType&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;2&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;CreaterUserId&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;13&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Members&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:[],&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;CreateTime&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;2017-06-27 20:14:06&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;LastChatTime&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;2017-06-27 20:34:54&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;LastChatText&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;6565&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;IsDisbanded&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;false&lt;/span&gt;},{&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Id&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;59531cdfbbccc414e8f6769f&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ChatName&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;都纷纷fee俄方热热&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ChatType&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;2&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;CreaterUserId&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;76&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Members&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:[],&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;CreateTime&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;2017-06-28 11:05:03&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;LastChatTime&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;2017-06-28 11:05:13&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;LastChatText&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;123&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;IsDisbanded&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;true&lt;/span&gt;},{&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Id&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;59531de5bbccc414e8f676a1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ChatName&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;天赋过人托管人&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ChatType&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;2&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;CreaterUserId&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;76&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Members&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:[],&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;CreateTime&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;2017-06-28 11:09:25&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;LastChatTime&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;2017-06-28 11:09:33&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;LastChatText&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;呃呃呃&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;IsDisbanded&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;true&lt;/span&gt;},{&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Id&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;59531e40bbccc414e8f676a3&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ChatName&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;热热&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ChatType&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;2&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;CreaterUserId&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;76&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Members&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:[],&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;CreateTime&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;2017-06-28 11:10:56&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;LastChatTime&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;2017-06-28 17:58:41&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;LastChatText&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;333&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;IsDisbanded&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;false&lt;/span&gt;},{&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Id&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;59532140bbccc414e8f676a6&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ChatName&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;会厌结核有机会好好&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ChatType&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;2&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;CreaterUserId&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;76&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Members&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:[],&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;CreateTime&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;2017-06-28 11:23:44&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;LastChatTime&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;2017-06-28 11:24:40&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;LastChatText&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;eee&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;IsDisbanded&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;true&lt;/span&gt;},{&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Id&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;595321d3bbccc414e8f676a8&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ChatName&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;656565656&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ChatType&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;2&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;CreaterUserId&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;76&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Members&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:[],&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;CreateTime&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;2017-06-28 11:26:11&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;LastChatTime&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;2017-06-28 18:50:08&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;LastChatText&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ggg&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;IsDisbanded&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;false&lt;/span&gt;},{&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Id&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;5954d0eebbccc40fecbea435&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ChatName&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;r&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ChatType&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;2&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;CreaterUserId&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;76&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Members&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:[],&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;CreateTime&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;2017-06-29 18:05:34&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;LastChatTime&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;null&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;LastChatText&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;null&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;IsDisbanded&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;false&lt;/span&gt;}]}
&lt;/pre&gt;</description>
<pubDate>Mon, 15 Jan 2018 12:51:00 +0000</pubDate>
<dc:creator>秃驴竟敢跟贫道抢师太</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/NET-BLOG/p/8286732.html</dc:identifier>
</item>
<item>
<title>UML中类图的一些基本知识 - xcywt</title>
<link>http://www.cnblogs.com/xcywt/p/8289743.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/xcywt/p/8289743.html</guid>
<description>&lt;p&gt;类（class）封装了数据和行为，是面向对象的重要组成部分，他是具有相同操作、属性、关系的对象集合的总称。&lt;/p&gt;
&lt;p&gt;在软件运行时，类被实例化成对象（object），对象对应某个具体的事物，是类的实例（instance）&lt;/p&gt;
&lt;p&gt;类图（class diagram）使用出现在系统中的不同类来描述系统的静态结构，它用来描述不同的类以及它们之间的关系。&lt;/p&gt;

&lt;p&gt;在系统分析和设计阶段，类通常可以分为三种，分别是实体类（Entity class）、控制类（Control Class）和边界类（Boundary Class）。&lt;/p&gt;
&lt;p&gt;1）实体类：对应系统中的每个实体，它们通常需要保存在永久存储体中，一般使用数据库或文件表来记录，实体类既包括存储和传递数据的类，还包括操作数据的类。实体类来源于需求说明中的名词，如学生、商品等。&lt;/p&gt;
&lt;p&gt;2）控制类：用于体现应用程序的执行逻辑，提供相应的业务操作，将控制 类抽象出来可以降低界面和数据库之间的耦合度。控制类一般是由动宾结构的短语（动词加名词）转化来的名词，比如增加商品类，用户注册类。&lt;/p&gt;
&lt;p&gt;3）边界类：用于对外部用户和系统之间的交互对象进行抽象，主要包括界面类，如对话框、窗口、菜单。&lt;/p&gt;


&lt;p&gt;一般是长方形（分三格），类名在最上面那格，中间是成员变量（属性），最下面是成员函数（行为）。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;属性格式：&lt;/strong&gt; 可见性 名称:类型 [ = 缺省值]&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;行为格式：&lt;/strong&gt; 可见性 名词（参数列表） [ : 返回类型]&lt;/p&gt;
&lt;p&gt;关于可见性： + public，- private，# protected&lt;/p&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/822287/201801/822287-20180115201118053-798251501.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;在软件系统中，类表示孤立存在的，类与类之间存在各种关系，UML提供不提供表示方式。&lt;/p&gt;
&lt;h2&gt;1.关联关系（Association）：&lt;/h2&gt;
&lt;p&gt;最常用的一种关系，它是一种结构化关系，用于表示一类对象和另一对象之间有联系。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;在UML&lt;/strong&gt;&lt;strong&gt;类图中，用实线连接有关联关系的对象所对应的类。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;实际的场景：class A有一个成员对象b，b的类型是class B。那就可以表示为A与B用实线连接起来，箭头由A指向B。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/822287/201801/822287-20180115201144271-1787898298.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h3&gt;1.1双向关联：&lt;/h3&gt;
&lt;p&gt;默认情况下关联是双向的，也就是没有箭头指向的。&lt;/p&gt;
&lt;p&gt;比如顾客里面有商品，同时卖出的商品里面也可以有顾客。&lt;/p&gt;
&lt;h3&gt;1.2单向关联：&lt;/h3&gt;
&lt;p&gt;就像上面的例子一样，XHTTPServer有成员XTcp。&lt;/p&gt;
&lt;h3&gt;1.3自关联：&lt;/h3&gt;
&lt;p&gt;存在一些类的属性对象类型为该类本身。比如一个节点的成员也是节点类型的对象。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/822287/201801/822287-20180115201208162-431756201.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;1.4 多重性关联（Multiolicity）：&lt;/h3&gt;
&lt;p&gt;表示两个关联对象在数量上的对应关系。&lt;/p&gt;
&lt;p&gt;在UML中对象之间的多重性可以直接在关联直线上用一个数字或一个数字范围表示。&lt;/p&gt;
&lt;p&gt;常见的多重性表示如下图：&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2017.cnblogs.com/blog/822287/201801/822287-20180115201342334-952313237.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;比如一个界面（Form）可以拥有零个或多个按钮，一个按钮只能属于一个界面。&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2017.cnblogs.com/blog/822287/201801/822287-20180115201336693-764638799.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;h3&gt;1.5 聚合关系（Aggregation）：&lt;/h3&gt;
&lt;p&gt;表示整体与部分的关系。在聚合关系中，成员对象是整体对象的一部分，但是成员对象也可以脱离整体对象独立存在。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;在UML&lt;/strong&gt;&lt;strong&gt;中聚合关系用空心菱形的直线表示。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;比如汽车发动机是汽车的一部分，但是发动机也可以独立存在。&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2017.cnblogs.com/blog/822287/201801/822287-20180115201328662-1063396303.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;h3&gt;1.6 组合关系（composition）：&lt;/h3&gt;
&lt;p&gt;表示整体和部分的关系，但是在组合关系中整体对象可以控制成员对象的生命周期。一旦整体对象不在了，成员对象也就不在了。具有同生共死的关系。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;在UML&lt;/strong&gt;&lt;strong&gt;中用带实心菱形的直线表示。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;比如，头是整体，嘴巴只是一个部分。嘴巴不能独立存在&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2017.cnblogs.com/blog/822287/201801/822287-20180115201318537-718159264.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;h2&gt;2.依赖关系（Dependency）：&lt;/h2&gt;
&lt;p&gt;是一种使用关系，特定事物的改变有可能会影响到使用该事物的事物，在需要表示一个事物使用另一个事物的时就用到了依赖关系。&lt;/p&gt;
&lt;p&gt;比如：classA中的fun(B b)，方法fun中用到了class B对象。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;在UML&lt;/strong&gt;&lt;strong&gt;中用带箭头的虚线表示，由依赖的一方指向被依赖的一方。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2017.cnblogs.com/blog/822287/201801/822287-20180115201310662-112969464.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;h2&gt;3.泛化关系（Generalization）：&lt;/h2&gt;
&lt;p&gt;也就是继承关系。描述父类与子类之间的关系。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;在UML&lt;/strong&gt;&lt;strong&gt;中使用带空性三角形的直线来表示。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2017.cnblogs.com/blog/822287/201801/822287-20180115201302068-1876963799.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;4.接口与实现关系（Realization）&lt;/h2&gt;
&lt;p&gt;接口和类之间还存在一种实现关系。这种关系中，类实现了接口，类中的操作实现了接口中所做的声明。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;在UML&lt;/strong&gt;&lt;strong&gt;中类与接口之间的实现关系用带空心三角形的虚线来表示。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;比如，下面的接口Vehicle，包含抽象操作move，类ship和类car都实现了该move操作，具体的细节会不一样而已。&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2017.cnblogs.com/blog/822287/201801/822287-20180115201250849-1574784609.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; 关于上面的参考：http://www.uml.org.cn/oobject/201211231.asp&lt;/p&gt;
&lt;p&gt;关于如何用Enterprise Architect 8.0画类图可以参考：http://blog.csdn.net/cfeibiao/article/details/8545083&lt;/p&gt;
</description>
<pubDate>Mon, 15 Jan 2018 12:15:00 +0000</pubDate>
<dc:creator>xcywt</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/xcywt/p/8289743.html</dc:identifier>
</item>
</channel>
</rss>