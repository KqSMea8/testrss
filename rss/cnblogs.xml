<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>淘宝适配源码解析 - 一曲笙箫</title>
<link>http://www.cnblogs.com/LucklyPisces/p/7634851.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/LucklyPisces/p/7634851.html</guid>
<description>&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
(&lt;span&gt;function&lt;/span&gt;&lt;span&gt; flexible (window, document) {
  &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; docEl =&lt;span&gt; document.documentElement
  &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; dpr = window.devicePixelRatio || 1

  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; adjust body font size&lt;/span&gt;
  &lt;span&gt;function&lt;/span&gt;&lt;span&gt; setBodyFontSize () {
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (document.body) {
      document.body.style.fontSize &lt;/span&gt;= (12 * dpr) + 'px'&lt;span&gt;
    }
    &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
      document.addEventListener(&lt;/span&gt;'DOMContentLoaded'&lt;span&gt;, setBodyFontSize) 
    }
  }
  setBodyFontSize();

&lt;/span&gt;

  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; set 1rem = viewWidth / 10&lt;/span&gt;
  &lt;span&gt;function&lt;/span&gt;&lt;span&gt; setRemUnit () {
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; rem = docEl.clientWidth / 10&lt;span&gt;
    docEl.style.fontSize &lt;/span&gt;= rem + 'px'&lt;span&gt;
  }

  setRemUnit()&lt;/span&gt;
  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; reset rem unit on page resize&lt;/span&gt;
  window.addEventListener('resize'&lt;span&gt;, setRemUnit)
  window.addEventListener(&lt;/span&gt;'pageshow', &lt;span&gt;function&lt;/span&gt;&lt;span&gt; (e) {
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (e.persisted) {
      setRemUnit()
    }
  })

  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; detect 0.5px supports&lt;/span&gt;
  &lt;span&gt;if&lt;/span&gt; (dpr &amp;gt;= 2&lt;span&gt;) {
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; fakeBody = document.createElement('body'&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; testElement = document.createElement('div'&lt;span&gt;)
    testElement.style.border &lt;/span&gt;= '.5px solid transparent'&lt;span&gt;
    fakeBody.appendChild(testElement)
    docEl.appendChild(fakeBody)
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (testElement.offsetHeight === 1&lt;span&gt;) {
      docEl.classList.add(&lt;/span&gt;'hairlines'&lt;span&gt;)
    }
    docEl.removeChild(fakeBody)
  }
}(window, document))&lt;br/&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;
var docEl =&lt;span&gt; document.documentElement
var dpr = window.devicePixelRatio || 1&lt;/span&gt;（var docEl = document.documentElement 为获取HTML文档的整个文档元素，var dpr = window.devicePixelRatio || 1 为获取设备像素比例，若像素比例为0则以1代替）
&lt;/pre&gt;
&lt;pre&gt;
function&lt;span&gt; setBodyFontSize () {
    if&lt;span&gt; (document.body) {
      document.body.style.fontSize = (12 * dpr) + 'px'&lt;span&gt;
    }
    else&lt;span&gt; {
      document.addEventListener('DOMContentLoaded'&lt;span&gt;, setBodyFontSize) 
    }
  }
  setBodyFontSize();&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;span&gt; （&lt;/span&gt;以上部分为设置字体大小，document.body.style.fontSize = (12 * dpr) + 'px' ，设置12*设备像素比例为字体大小，这样字体就可以自适应大小，先判断body是否存在，存在则设置大小，不存在则监听DOM加载完后再递归调用此方法）
&lt;/pre&gt;
&lt;pre&gt;
 function&lt;span&gt; setRemUnit () {
    var rem = docEl.clientWidth / 10&lt;span&gt;
    docEl.style.fontSize = rem + 'px'&lt;span&gt;
  }

  setRemUnit()
（设置rem的自适应大小，docEl,clientWidth获取设备可视区域的宽度，使rem根据设备的宽度来设置其大小）&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;pre&gt;
 window.addEventListener('resize'&lt;span&gt;, setRemUnit)
  window.addEventListener('pageshow', function&lt;span&gt; (e) {
    if&lt;span&gt; (e.persisted) {
      setRemUnit()
    }
  })&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;pre&gt;
这段代码则是通过监听事件来设置rem的大小&lt;br/&gt;以上自己简单对淘宝适配源码的理解，有不足或者有误的地方望提出。
&lt;/pre&gt;</description>
<pubDate>Sat, 07 Oct 2017 07:31:00 +0000</pubDate>
<dc:creator>一曲笙箫</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/LucklyPisces/p/7634851.html</dc:identifier>
</item>
<item>
<title>Django 1.10中文文档-执行查询 - j_hao104</title>
<link>http://www.cnblogs.com/jhao/p/7634783.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/jhao/p/7634783.html</guid>
<description>&lt;blockquote readability=&quot;1.7857142857143&quot;&gt;
&lt;p&gt;Django 1.10中文文档: &lt;a href=&quot;https://github.com/jhao104/django-chinese-doc&quot; target=&quot;_blank&quot;&gt;https://github.com/jhao104/django-chinese-doc&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;只要创建好 &lt;a class=&quot;reference internal&quot; href=&quot;file:///G:/code/django-chinese-doc/build/html/topics/db/models.html&quot;&gt;数据模型&lt;/a&gt;, Django 会自动为生成一套数据库抽象的API， 可以让你创建、检索、更新和删除对象。这篇文档阐述如何使用这些API。 关于模型查询所有选项的完整细节，请见 &lt;a class=&quot;reference internal&quot; href=&quot;file:///G:/code/django-chinese-doc/build/html/ref/models/index.html&quot;&gt;数据模型参考&lt;/a&gt; 。&lt;/p&gt;
&lt;p&gt;在整个文档（以及参考）中，都将引用下面的模型，它是一个博客应用：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; django.db &lt;span&gt;import&lt;/span&gt;&lt;span&gt; models
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Blog(models.Model):
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;     name = models.CharField(max_length=100&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;     tagline =&lt;span&gt; models.TextField()
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt; &lt;span&gt;__str__&lt;/span&gt;(self):              &lt;span&gt;#&lt;/span&gt;&lt;span&gt; __unicode__ on Python 2&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; self.name
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; 
&lt;span&gt;10&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Author(models.Model):
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;     name = models.CharField(max_length=200&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;     email =&lt;span&gt; models.EmailField()
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; 
&lt;span&gt;14&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt; &lt;span&gt;__str__&lt;/span&gt;(self):              &lt;span&gt;#&lt;/span&gt;&lt;span&gt; __unicode__ on Python 2&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; self.name
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; 
&lt;span&gt;17&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Entry(models.Model):
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;     blog =&lt;span&gt; models.ForeignKey(Blog)
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;     headline = models.CharField(max_length=255&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;     body_text =&lt;span&gt; models.TextField()
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;     pub_date =&lt;span&gt; models.DateField()
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;     mod_date =&lt;span&gt; models.DateField()
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;     authors =&lt;span&gt; models.ManyToManyField(Author)
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;     n_comments =&lt;span&gt; models.IntegerField()
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;     n_pingbacks =&lt;span&gt; models.IntegerField()
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;     rating =&lt;span&gt; models.IntegerField()
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; 
&lt;span&gt;28&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt; &lt;span&gt;__str__&lt;/span&gt;(self):              &lt;span&gt;#&lt;/span&gt;&lt;span&gt; __unicode__ on Python 2&lt;/span&gt;
&lt;span&gt;29&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; self.headline
&lt;/pre&gt;&lt;/div&gt;

&lt;div id=&quot;id2&quot; class=&quot;section&quot; readability=&quot;22.006818181818&quot;&gt;
&lt;h2&gt;创建对象&lt;/h2&gt;
&lt;p&gt;Django 使用一种直观的方式把数据库表中的数据表示成Python对象： 一个模型类代表数据库中的一个表，一个模型类的实例代表这个数据库表中的一条记录。&lt;/p&gt;
&lt;p&gt;使用关键字参数实例化模型实例来创建一个对象，然后调用 &lt;a class=&quot;reference internal&quot; title=&quot;django.db.models.Model.save&quot; href=&quot;file:///G:/code/django-chinese-doc/build/html/ref/models/instances.html#django.db.models.Model.save&quot;&gt;&lt;code class=&quot;xref py py-meth docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;save()&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; 把它保存到数据库中。&lt;/p&gt;
&lt;p&gt;假设模型位于文件 &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;mysite/blog/models.py&lt;/span&gt;&lt;/code&gt; 中，下面是一个例子:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &amp;gt;&amp;gt;&amp;gt; &lt;span&gt;from&lt;/span&gt; blog.models &lt;span&gt;import&lt;/span&gt;&lt;span&gt; Blog
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; &amp;gt;&amp;gt;&amp;gt; b = Blog(name=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Beatles Blog&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, tagline=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;All the latest Beatles news.&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; &amp;gt;&amp;gt;&amp;gt; b.save()
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;上面的代码其实是执行了SQL 的 &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;INSERT&lt;/span&gt;&lt;/code&gt; 语句。在你调用 &lt;a class=&quot;reference internal&quot; title=&quot;django.db.models.Model.save&quot; href=&quot;file:///G:/code/django-chinese-doc/build/html/ref/models/instances.html#django.db.models.Model.save&quot;&gt;&lt;code class=&quot;xref py py-meth docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;save()&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; 之前，Django 不会访问数据库。&lt;/p&gt;
&lt;p&gt;&lt;a class=&quot;reference internal&quot; title=&quot;django.db.models.Model.save&quot; href=&quot;file:///G:/code/django-chinese-doc/build/html/ref/models/instances.html#django.db.models.Model.save&quot;&gt;&lt;code class=&quot;xref py py-meth docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;save()&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; 方法没有返回值。&lt;/p&gt;
&lt;div class=&quot;admonition seealso&quot; readability=&quot;8.010989010989&quot;&gt;
&lt;p class=&quot;first admonition-title&quot;&gt;参见&lt;/p&gt;
&lt;p&gt;&lt;a class=&quot;reference internal&quot; title=&quot;django.db.models.Model.save&quot; href=&quot;file:///G:/code/django-chinese-doc/build/html/ref/models/instances.html#django.db.models.Model.save&quot;&gt;&lt;code class=&quot;xref py py-meth docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;save()&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; 方法还有一些高级选项，完整的细节参见 &lt;a class=&quot;reference internal&quot; title=&quot;django.db.models.Model.save&quot; href=&quot;file:///G:/code/django-chinese-doc/build/html/ref/models/instances.html#django.db.models.Model.save&quot;&gt;&lt;code class=&quot;xref py py-meth docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;save()&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; 文档。&lt;/p&gt;
&lt;p class=&quot;last&quot;&gt;如果你想只用一条语句创建并保存一个对象，可以使用 &lt;a class=&quot;reference internal&quot; title=&quot;django.db.models.query.QuerySet.create&quot; href=&quot;file:///G:/code/django-chinese-doc/build/html/ref/models/querysets.html#django.db.models.query.QuerySet.create&quot;&gt;&lt;code class=&quot;xref py py-meth docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;create()&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; 方法。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;id3&quot; class=&quot;section&quot; readability=&quot;19.374247894103&quot;&gt;
&lt;h2&gt;修改对象&lt;/h2&gt;
&lt;p&gt;要保存一个数据库已存在对象的修改也是使用 &lt;a class=&quot;reference internal&quot; title=&quot;django.db.models.Model.save&quot; href=&quot;file:///G:/code/django-chinese-doc/build/html/ref/models/instances.html#django.db.models.Model.save&quot;&gt;&lt;code class=&quot;xref py py-meth docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;save()&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; 方法。&lt;/p&gt;
&lt;p&gt;假设 &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;Blog&lt;/span&gt;&lt;/code&gt; 的一个实例 &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;b5&lt;/span&gt;&lt;/code&gt; 已经被保存在数据库中，下面这个例子将更改它的 name 并且更新数据库中的记录:&lt;/p&gt;
&lt;div class=&quot;highlight-default&quot; readability=&quot;6&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'New name'&lt;br/&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;上面的代码其实是执行了SQL 的 &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;UPDATE&lt;/span&gt;&lt;/code&gt; 语句。在你调用 &lt;a class=&quot;reference internal&quot; title=&quot;django.db.models.Model.save&quot; href=&quot;file:///G:/code/django-chinese-doc/build/html/ref/models/instances.html#django.db.models.Model.save&quot;&gt;&lt;code class=&quot;xref py py-meth docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;save()&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; 之前，Django 不会访问数据库。&lt;/p&gt;
&lt;div id=&quot;foreignkey-manytomanyfield&quot; class=&quot;section&quot; readability=&quot;18.400157853197&quot;&gt;
&lt;h3&gt;保存 &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;ForeignKey&lt;/span&gt;&lt;/code&gt; 和 &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;ManyToManyField&lt;/span&gt;&lt;/code&gt; 字段&lt;/h3&gt;
&lt;p&gt;更新 &lt;code class=&quot;xref py py-class docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;ForeignKey&lt;/span&gt; 字段的方式和保存普通字段相同 &lt;span class=&quot;pre&quot;&gt;——&lt;/span&gt; &lt;span class=&quot;pre&quot;&gt;只要把一个正确类型的对象赋值给该字段即可。&lt;/span&gt; &lt;span class=&quot;pre&quot;&gt;下面的例子更新了&lt;/span&gt; &lt;span class=&quot;pre&quot;&gt;``Entry`&lt;/span&gt;&lt;/code&gt;类的实例 &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;entry&lt;/span&gt;&lt;/code&gt; 的 &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;blog&lt;/span&gt;&lt;/code&gt; 属性，假设 &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;Entry&lt;/span&gt;&lt;/code&gt; 和 &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;Blog&lt;/span&gt;&lt;/code&gt; 分别已经有一个实例保存在数据库中 （所以我们才能像下面这样获取它们）:&lt;/p&gt;
&lt;div class=&quot;highlight-default&quot; readability=&quot;6.5&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;8&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;blog.models&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Entry&lt;br/&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;entry&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Entry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;br/&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cheese_blog&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Blog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Cheddar Talk&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;br/&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;entry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;blog&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cheese_blog&lt;br/&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;entry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;更新 &lt;a class=&quot;reference internal&quot; title=&quot;django.db.models.ManyToManyField&quot; href=&quot;file:///G:/code/django-chinese-doc/build/html/ref/models/fields.html#django.db.models.ManyToManyField&quot;&gt;&lt;code class=&quot;xref py py-class docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;ManyToManyField&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; 的方式有一些不同 —— 需要使用字段的 &lt;a class=&quot;reference internal&quot; title=&quot;django.db.models.fields.related.RelatedManager.add&quot; href=&quot;file:///G:/code/django-chinese-doc/build/html/ref/models/relations.html#django.db.models.fields.related.RelatedManager.add&quot;&gt;&lt;code class=&quot;xref py py-meth docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;add()&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; 方法来增加关联关系的一条记录。 下面这个例子向 &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;entry&lt;/span&gt;&lt;/code&gt; 对象添加 &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;Author&lt;/span&gt;&lt;/code&gt; 类的实例 &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;joe&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;highlight-default&quot; readability=&quot;6.5&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;8&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;blog.models&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Author&lt;br/&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;joe&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Author&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Joe&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;br/&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;entry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;authors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;joe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;可以在调用 &lt;a class=&quot;reference internal&quot; title=&quot;django.db.models.fields.related.RelatedManager.add&quot; href=&quot;file:///G:/code/django-chinese-doc/build/html/ref/models/relations.html#django.db.models.fields.related.RelatedManager.add&quot;&gt;&lt;code class=&quot;xref py py-meth docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;add()&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; 方法时传入多参数，一次性向 &lt;a class=&quot;reference internal&quot; title=&quot;django.db.models.ManyToManyField&quot; href=&quot;file:///G:/code/django-chinese-doc/build/html/ref/models/fields.html#django.db.models.ManyToManyField&quot;&gt;&lt;code class=&quot;xref py py-class docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;ManyToManyField&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; 添加多条记录:&lt;/p&gt;
&lt;div class=&quot;highlight-default&quot; readability=&quot;8.5&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;12&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;john&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Author&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;John&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;br/&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;paul&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Author&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Paul&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;br/&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;george&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Author&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;George&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;br/&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ringo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Author&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Ringo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;br/&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;entry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;authors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;john&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;paul&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;george&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ringo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Django将会在你赋值或添加错误类型的对象时报错。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;retrieving-objects&quot; class=&quot;section&quot; readability=&quot;105.54215215901&quot;&gt;&lt;span id=&quot;id4&quot;/&gt;
&lt;h2&gt;检索对象&lt;/h2&gt;
&lt;p&gt;通过使用模型中的 &lt;a class=&quot;reference internal&quot; title=&quot;django.db.models.Manager&quot; href=&quot;file:///G:/code/django-chinese-doc/build/html/topics/db/managers.html#django.db.models.Manager&quot;&gt;&lt;code class=&quot;xref py py-class docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;Manager&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; 构造一个 &lt;a class=&quot;reference internal&quot; title=&quot;django.db.models.query.QuerySet&quot; href=&quot;file:///G:/code/django-chinese-doc/build/html/ref/models/querysets.html#django.db.models.query.QuerySet&quot;&gt;&lt;code class=&quot;xref py py-class docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;QuerySet&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; 来从数据库中获取对象。&lt;/p&gt;
&lt;p&gt;&lt;a class=&quot;reference internal&quot; title=&quot;django.db.models.query.QuerySet&quot; href=&quot;file:///G:/code/django-chinese-doc/build/html/ref/models/querysets.html#django.db.models.query.QuerySet&quot;&gt;&lt;code class=&quot;xref py py-class docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;QuerySet&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; 表示从数据库中取出来的对象的集合。 它可以包含零个、一个或者多个 &lt;em&gt;过滤器&lt;/em&gt; 。 过滤器的功能是基于所给的参数过滤查询的结果。 从SQL角度看， &lt;a class=&quot;reference internal&quot; title=&quot;django.db.models.query.QuerySet&quot; href=&quot;file:///G:/code/django-chinese-doc/build/html/ref/models/querysets.html#django.db.models.query.QuerySet&quot;&gt;&lt;code class=&quot;xref py py-class docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;QuerySet&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; 等价于 &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;SELECT&lt;/span&gt;&lt;/code&gt; 语句, 过滤器就相当于 &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;WHERE&lt;/span&gt;&lt;/code&gt; 或者 &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;LIMIT&lt;/span&gt;&lt;/code&gt; 这样的子句。&lt;/p&gt;
&lt;p&gt;&lt;a class=&quot;reference internal&quot; title=&quot;django.db.models.query.QuerySet&quot; href=&quot;file:///G:/code/django-chinese-doc/build/html/ref/models/querysets.html#django.db.models.query.QuerySet&quot;&gt;&lt;code class=&quot;xref py py-class docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;QuerySet&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; 通过模型的 &lt;a class=&quot;reference internal&quot; title=&quot;django.db.models.Manager&quot; href=&quot;file:///G:/code/django-chinese-doc/build/html/topics/db/managers.html#django.db.models.Manager&quot;&gt;&lt;code class=&quot;xref py py-class docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;Manager&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; 获取。每个模型至少包含一个 &lt;a class=&quot;reference internal&quot; title=&quot;django.db.models.Manager&quot; href=&quot;file:///G:/code/django-chinese-doc/build/html/topics/db/managers.html#django.db.models.Manager&quot;&gt;&lt;code class=&quot;xref py py-class docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;Manager&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;, 它们默认叫做 &lt;a class=&quot;reference internal&quot; title=&quot;django.db.models.Model.objects&quot; href=&quot;file:///G:/code/django-chinese-doc/build/html/ref/models/class.html#django.db.models.Model.objects&quot;&gt;&lt;code class=&quot;xref py py-attr docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;objects&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; 。 可以通过模型类直接访问， 例如:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &amp;gt;&amp;gt;&amp;gt;&lt;span&gt; Blog.objects
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; &amp;lt;django.db.models.manager.Manager object at ...&amp;gt;
&lt;span&gt;3&lt;/span&gt; &amp;gt;&amp;gt;&amp;gt; b = Blog(name=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Foo&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, tagline=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Bar&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; &amp;gt;&amp;gt;&amp;gt;&lt;span&gt; b.objects
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt; &lt;span&gt;Traceback:
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt; &lt;span&gt;    ...
&lt;/span&gt;&lt;span&gt;7&lt;/span&gt; AttributeError: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Manager isn't accessible via Blog instances.&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;admonition note&quot; readability=&quot;8&quot;&gt;
&lt;p class=&quot;first admonition-title&quot;&gt;注解&lt;/p&gt;
&lt;p class=&quot;last&quot;&gt;&lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;Managers&lt;/span&gt;&lt;/code&gt; 只能通过模型类访问，而不是模型实例。 目的是为了强制区分“表级别”的操作和“记录级别”的操作。&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;a class=&quot;reference internal&quot; title=&quot;django.db.models.Manager&quot; href=&quot;file:///G:/code/django-chinese-doc/build/html/topics/db/managers.html#django.db.models.Manager&quot;&gt;&lt;code class=&quot;xref py py-class docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;Manager&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; 是 &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;QuerySets&lt;/span&gt;&lt;/code&gt; 的主要来源。 比如， &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;Blog.objects.all()&lt;/span&gt;&lt;/code&gt; 返回一个数据库中所有 &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;Blog&lt;/span&gt;&lt;/code&gt; 对象的 &lt;a class=&quot;reference internal&quot; title=&quot;django.db.models.query.QuerySet&quot; href=&quot;file:///G:/code/django-chinese-doc/build/html/ref/models/querysets.html#django.db.models.query.QuerySet&quot;&gt;&lt;code class=&quot;xref py py-class docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;QuerySet&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; 。&lt;/p&gt;
&lt;div id=&quot;id5&quot; class=&quot;section&quot; readability=&quot;8.9539748953975&quot;&gt;
&lt;h3&gt;获取所有对象&lt;/h3&gt;
&lt;p&gt;表中检索对象的最简单方法是获取所有对象。要做到这一点，在 &lt;a class=&quot;reference internal&quot; title=&quot;django.db.models.Manager&quot; href=&quot;file:///G:/code/django-chinese-doc/build/html/topics/db/managers.html#django.db.models.Manager&quot;&gt;&lt;code class=&quot;xref py py-class docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;Manager&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; 上使用 &lt;a class=&quot;reference internal&quot; title=&quot;django.db.models.query.QuerySet.all&quot; href=&quot;file:///G:/code/django-chinese-doc/build/html/ref/models/querysets.html#django.db.models.query.QuerySet.all&quot;&gt;&lt;code class=&quot;xref py py-meth docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;all()&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; 方法:&lt;/p&gt;
&lt;div class=&quot;highlight-default&quot; readability=&quot;6&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;all_entries&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Entry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;a class=&quot;reference internal&quot; title=&quot;django.db.models.query.QuerySet.all&quot; href=&quot;file:///G:/code/django-chinese-doc/build/html/ref/models/querysets.html#django.db.models.query.QuerySet.all&quot;&gt;&lt;code class=&quot;xref py py-meth docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;all()&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; 返回一个数据库中所有对象的 &lt;a class=&quot;reference internal&quot; title=&quot;django.db.models.query.QuerySet&quot; href=&quot;file:///G:/code/django-chinese-doc/build/html/ref/models/querysets.html#django.db.models.query.QuerySet&quot;&gt;&lt;code class=&quot;xref py py-class docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;QuerySet&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; 。&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;id6&quot; class=&quot;section&quot; readability=&quot;31.214642262895&quot;&gt;
&lt;h3&gt;使用过滤器检索&lt;/h3&gt;
&lt;p&gt;&lt;a class=&quot;reference internal&quot; title=&quot;django.db.models.query.QuerySet.all&quot; href=&quot;file:///G:/code/django-chinese-doc/build/html/ref/models/querysets.html#django.db.models.query.QuerySet.all&quot;&gt;&lt;code class=&quot;xref py py-meth docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;all()&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; 方法返回包含数据库所有记录的 &lt;a class=&quot;reference internal&quot; title=&quot;django.db.models.query.QuerySet&quot; href=&quot;file:///G:/code/django-chinese-doc/build/html/ref/models/querysets.html#django.db.models.query.QuerySet&quot;&gt;&lt;code class=&quot;xref py py-class docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;QuerySet&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;。 但是往往只需要获取其中的一个子集。&lt;/p&gt;
&lt;p&gt;要创建这样一个子集，你需要在原始的的 &lt;a class=&quot;reference internal&quot; title=&quot;django.db.models.query.QuerySet&quot; href=&quot;file:///G:/code/django-chinese-doc/build/html/ref/models/querysets.html#django.db.models.query.QuerySet&quot;&gt;&lt;code class=&quot;xref py py-class docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;QuerySet&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; 上增加一些过滤条件。 有两种方式可以实现：&lt;/p&gt;
&lt;dl class=&quot;docutils&quot;&gt;&lt;dt&gt;&lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;filter(**kwargs)&lt;/span&gt;&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;返回一个新的 &lt;a class=&quot;reference internal&quot; title=&quot;django.db.models.query.QuerySet&quot; href=&quot;file:///G:/code/django-chinese-doc/build/html/ref/models/querysets.html#django.db.models.query.QuerySet&quot;&gt;&lt;code class=&quot;xref py py-class docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;QuerySet&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; ，它包含满足查询参数的对象。&lt;/dd&gt;
&lt;dt&gt;&lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;exclude(**kwargs)&lt;/span&gt;&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;返回一个新的 &lt;a class=&quot;reference internal&quot; title=&quot;django.db.models.query.QuerySet&quot; href=&quot;file:///G:/code/django-chinese-doc/build/html/ref/models/querysets.html#django.db.models.query.QuerySet&quot;&gt;&lt;code class=&quot;xref py py-class docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;QuerySet&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; 。它包含 &lt;em&gt;不&lt;/em&gt; 满足查询参数的对象。&lt;/dd&gt;
&lt;/dl&gt;&lt;p&gt;查询参数 (上面函数中的 &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;**kwargs&lt;/span&gt;&lt;/code&gt; ) 需要满足特定的格式，下面 &lt;a class=&quot;reference internal&quot; href=&quot;file:///G:/code/django-chinese-doc/build/html/topics/db/queries.html#id10&quot;&gt;字段查询&lt;/a&gt; 一节会提到。&lt;/p&gt;
&lt;p&gt;例如, 使用 &lt;a class=&quot;reference internal&quot; title=&quot;django.db.models.query.QuerySet.filter&quot; href=&quot;file:///G:/code/django-chinese-doc/build/html/ref/models/querysets.html#django.db.models.query.QuerySet.filter&quot;&gt;&lt;code class=&quot;xref py py-meth docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;filter()&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; 方法获取年份为2006的所有文章的 &lt;a class=&quot;reference internal&quot; title=&quot;django.db.models.query.QuerySet&quot; href=&quot;file:///G:/code/django-chinese-doc/build/html/ref/models/querysets.html#django.db.models.query.QuerySet&quot;&gt;&lt;code class=&quot;xref py py-class docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;QuerySet&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;highlight-default&quot; readability=&quot;6&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;n&quot;&gt;Entry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pub_date__year&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2006&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;利用默认的管理器，它相当于:&lt;/p&gt;
&lt;div class=&quot;highlight-default&quot; readability=&quot;6&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;n&quot;&gt;Entry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pub_date__year&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2006&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;chaining-filters&quot; class=&quot;section&quot; readability=&quot;15.618530884808&quot;&gt;&lt;span id=&quot;id7&quot;/&gt;
&lt;h4&gt;链式过滤&lt;/h4&gt;
&lt;p&gt;&lt;a class=&quot;reference internal&quot; title=&quot;django.db.models.query.QuerySet&quot; href=&quot;file:///G:/code/django-chinese-doc/build/html/ref/models/querysets.html#django.db.models.query.QuerySet&quot;&gt;&lt;code class=&quot;xref py py-class docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;QuerySet&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; 的筛选结果本身还是 &lt;a class=&quot;reference internal&quot; title=&quot;django.db.models.query.QuerySet&quot; href=&quot;file:///G:/code/django-chinese-doc/build/html/ref/models/querysets.html#django.db.models.query.QuerySet&quot;&gt;&lt;code class=&quot;xref py py-class docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;QuerySet&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;, 所以可以将筛选语句链接在一起:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &amp;gt;&amp;gt;&amp;gt;&lt;span&gt; Entry.objects.filter(
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; ...     headline__startswith=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;What&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;span&gt;3&lt;/span&gt; &lt;span&gt;... ).exclude(
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; ...     pub_date__gte=&lt;span&gt;datetime.date.today()
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt; &lt;span&gt;... ).filter(
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt; ...     pub_date__gte=datetime(2005, 1, 30&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;7&lt;/span&gt; ... )
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;这个例子最开始获取数据库中所有对象的一个 &lt;a class=&quot;reference internal&quot; title=&quot;django.db.models.query.QuerySet&quot; href=&quot;file:///G:/code/django-chinese-doc/build/html/ref/models/querysets.html#django.db.models.query.QuerySet&quot;&gt;&lt;code class=&quot;xref py py-class docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;QuerySet&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;, 之后增加一个过滤器，然后是一个排除器，再之后又是一个过滤器。 但是最终结果还是 &lt;a class=&quot;reference internal&quot; title=&quot;django.db.models.query.QuerySet&quot; href=&quot;file:///G:/code/django-chinese-doc/build/html/ref/models/querysets.html#django.db.models.query.QuerySet&quot;&gt;&lt;code class=&quot;xref py py-class docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;QuerySet&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; 。它包含标题以”What“开头、发布日期在2005年1月30日至当天之间的所有记录。&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;queryset&quot; class=&quot;section&quot; readability=&quot;14.12938331318&quot;&gt;&lt;span id=&quot;filtered-querysets-are-unique&quot;/&gt;
&lt;h4&gt;过滤后的 &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;QuerySet&lt;/span&gt;&lt;/code&gt; 是独立的&lt;/h4&gt;
&lt;p&gt;每次你筛选一个 &lt;a class=&quot;reference internal&quot; title=&quot;django.db.models.query.QuerySet&quot; href=&quot;file:///G:/code/django-chinese-doc/build/html/ref/models/querysets.html#django.db.models.query.QuerySet&quot;&gt;&lt;code class=&quot;xref py py-class docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;QuerySet&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;, 得到的都是全新的另一个 &lt;a class=&quot;reference internal&quot; title=&quot;django.db.models.query.QuerySet&quot; href=&quot;file:///G:/code/django-chinese-doc/build/html/ref/models/querysets.html#django.db.models.query.QuerySet&quot;&gt;&lt;code class=&quot;xref py py-class docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;QuerySet&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; ， 它和之前的 &lt;a class=&quot;reference internal&quot; title=&quot;django.db.models.query.QuerySet&quot; href=&quot;file:///G:/code/django-chinese-doc/build/html/ref/models/querysets.html#django.db.models.query.QuerySet&quot;&gt;&lt;code class=&quot;xref py py-class docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;QuerySet&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; 之间没有任何绑定关系。每次筛选都会创建一个独立的 &lt;a class=&quot;reference internal&quot; title=&quot;django.db.models.query.QuerySet&quot; href=&quot;file:///G:/code/django-chinese-doc/build/html/ref/models/querysets.html#django.db.models.query.QuerySet&quot;&gt;&lt;code class=&quot;xref py py-class docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;QuerySet&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; ，它可以被存储及反复使用。&lt;/p&gt;
&lt;p&gt;例如:&lt;/p&gt;
&lt;div class=&quot;highlight-default&quot; readability=&quot;6.5&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;8&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;q1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Entry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;headline__startswith&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;What&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;br/&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;q2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;q1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exclude&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pub_date__gte&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;datetime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;today&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;br/&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;q3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;q1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pub_date__gte&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;datetime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;today&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;这三个 &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;QuerySets&lt;/span&gt;&lt;/code&gt; 都是独立的。第一个是包含所有标题以“What”开头的 &lt;a class=&quot;reference internal&quot; title=&quot;django.db.models.query.QuerySet&quot; href=&quot;file:///G:/code/django-chinese-doc/build/html/ref/models/querysets.html#django.db.models.query.QuerySet&quot;&gt;&lt;code class=&quot;xref py py-class docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;QuerySet&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; 。第二个是第一个的子集， 增加了限制条件，排除了 &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;pub_date&lt;/span&gt;&lt;/code&gt; 大于等于今天的记录。 第三个也是第一个的子集，限制条件是：只要 &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;pub_date&lt;/span&gt;&lt;/code&gt; 大于等于今天的记录。 而原来的 &lt;a class=&quot;reference internal&quot; title=&quot;django.db.models.query.QuerySet&quot; href=&quot;file:///G:/code/django-chinese-doc/build/html/ref/models/querysets.html#django.db.models.query.QuerySet&quot;&gt;&lt;code class=&quot;xref py py-class docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;QuerySet&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; (&lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;q1&lt;/span&gt;&lt;/code&gt;) 不会受到筛选的影响。&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;querysets-are-lazy&quot; class=&quot;section&quot; readability=&quot;13.869346733668&quot;&gt;&lt;span id=&quot;id8&quot;/&gt;
&lt;h4&gt;&lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;QuerySet&lt;/span&gt;&lt;/code&gt; 是惰性的&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;QuerySets&lt;/span&gt;&lt;/code&gt; 是惰性执行的 —— 创建 &lt;a class=&quot;reference internal&quot; title=&quot;django.db.models.query.QuerySet&quot; href=&quot;file:///G:/code/django-chinese-doc/build/html/ref/models/querysets.html#django.db.models.query.QuerySet&quot;&gt;&lt;code class=&quot;xref py py-class docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;QuerySet&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; 不会立即执行任何数据库的访问。 你可以将过滤器保持一整天，直到 &lt;a class=&quot;reference internal&quot; title=&quot;django.db.models.query.QuerySet&quot; href=&quot;file:///G:/code/django-chinese-doc/build/html/ref/models/querysets.html#django.db.models.query.QuerySet&quot;&gt;&lt;code class=&quot;xref py py-class docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;QuerySet&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; 被 &lt;em&gt;求值&lt;/em&gt; 时，Django 才会真正运行这个查询。看下这个例子:&lt;/p&gt;
&lt;div class=&quot;highlight-default&quot; readability=&quot;6.5&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;8&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;q&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Entry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;headline__startswith&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;What&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;br/&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;q&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pub_date__lte&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;datetime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;today&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;br/&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;q&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exclude&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;body_text__icontains&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;food&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;虽然它看上去有三次数据库访问, 但事实上只有在最后一行 (&lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;print(q)&lt;/span&gt;&lt;/code&gt;) 时才访问一次数据库。 一般来说，只有在“请求” &lt;a class=&quot;reference internal&quot; title=&quot;django.db.models.query.QuerySet&quot; href=&quot;file:///G:/code/django-chinese-doc/build/html/ref/models/querysets.html#django.db.models.query.QuerySet&quot;&gt;&lt;code class=&quot;xref py py-class docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;QuerySet&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; 的结果时才会到数据库中去获取它们。 当你确实需要结果时，&lt;a class=&quot;reference internal&quot; title=&quot;django.db.models.query.QuerySet&quot; href=&quot;file:///G:/code/django-chinese-doc/build/html/ref/models/querysets.html#django.db.models.query.QuerySet&quot;&gt;&lt;code class=&quot;xref py py-class docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;QuerySet&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; 通过访问数据库来求值。 关于求值发生的准确时间，参见 &lt;a class=&quot;reference internal&quot; href=&quot;file:///G:/code/django-chinese-doc/build/html/ref/models/querysets.html#when-querysets-are-evaluated&quot;&gt;When QuerySets are evaluated&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;get&quot; class=&quot;section&quot; readability=&quot;21.075170842825&quot;&gt;&lt;span id=&quot;retrieving-single-object-with-get&quot;/&gt;
&lt;h3&gt;使用 &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;get()&lt;/span&gt;&lt;/code&gt; 获取单个对象&lt;/h3&gt;
&lt;p&gt;&lt;a class=&quot;reference internal&quot; title=&quot;django.db.models.query.QuerySet.filter&quot; href=&quot;file:///G:/code/django-chinese-doc/build/html/ref/models/querysets.html#django.db.models.query.QuerySet.filter&quot;&gt;&lt;code class=&quot;xref py py-meth docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;filter()&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; 始终返回一个 &lt;a class=&quot;reference internal&quot; title=&quot;django.db.models.query.QuerySet&quot; href=&quot;file:///G:/code/django-chinese-doc/build/html/ref/models/querysets.html#django.db.models.query.QuerySet&quot;&gt;&lt;code class=&quot;xref py py-class docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;QuerySet&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; ，即使只有一个对象满足查询条件。 —— 这种情况下， &lt;a class=&quot;reference internal&quot; title=&quot;django.db.models.query.QuerySet&quot; href=&quot;file:///G:/code/django-chinese-doc/build/html/ref/models/querysets.html#django.db.models.query.QuerySet&quot;&gt;&lt;code class=&quot;xref py py-class docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;QuerySet&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;将只包含一个元素。&lt;/p&gt;
&lt;p&gt;如果你知道只有一个对象满足你的查询，你可以使用 &lt;a class=&quot;reference internal&quot; title=&quot;django.db.models.Manager&quot; href=&quot;file:///G:/code/django-chinese-doc/build/html/topics/db/managers.html#django.db.models.Manager&quot;&gt;&lt;code class=&quot;xref py py-class docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;Manager&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; 的 &lt;a class=&quot;reference internal&quot; title=&quot;django.db.models.query.QuerySet.get&quot; href=&quot;file:///G:/code/django-chinese-doc/build/html/ref/models/querysets.html#django.db.models.query.QuerySet.get&quot;&gt;&lt;code class=&quot;xref py py-meth docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;get()&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; 方法，它直接返回该对象:&lt;/p&gt;
&lt;div class=&quot;highlight-default&quot; readability=&quot;6&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;one_entry&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Entry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;你可以对 &lt;a class=&quot;reference internal&quot; title=&quot;django.db.models.query.QuerySet.get&quot; href=&quot;file:///G:/code/django-chinese-doc/build/html/ref/models/querysets.html#django.db.models.query.QuerySet.get&quot;&gt;&lt;code class=&quot;xref py py-meth docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;get()&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; 使用任何查询表达式， 就和 &lt;a class=&quot;reference internal&quot; title=&quot;django.db.models.query.QuerySet.filter&quot; href=&quot;file:///G:/code/django-chinese-doc/build/html/ref/models/querysets.html#django.db.models.query.QuerySet.filter&quot;&gt;&lt;code class=&quot;xref py py-meth docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;filter()&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; 一样， 参考 &lt;a class=&quot;reference internal&quot; href=&quot;file:///G:/code/django-chinese-doc/build/html/topics/db/queries.html#id10&quot;&gt;字段查询&lt;/a&gt; 。&lt;/p&gt;
&lt;p&gt;但是 &lt;a class=&quot;reference internal&quot; title=&quot;django.db.models.query.QuerySet.get&quot; href=&quot;file:///G:/code/django-chinese-doc/build/html/ref/models/querysets.html#django.db.models.query.QuerySet.get&quot;&gt;&lt;code class=&quot;xref py py-meth docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;get()&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; 和 &lt;a class=&quot;reference internal&quot; title=&quot;django.db.models.query.QuerySet.filter&quot; href=&quot;file:///G:/code/django-chinese-doc/build/html/ref/models/querysets.html#django.db.models.query.QuerySet.filter&quot;&gt;&lt;code class=&quot;xref py py-meth docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;filter()&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; 有一点区别，如果没有符合条件的查询结果 &lt;a class=&quot;reference internal&quot; title=&quot;django.db.models.query.QuerySet.get&quot; href=&quot;file:///G:/code/django-chinese-doc/build/html/ref/models/querysets.html#django.db.models.query.QuerySet.get&quot;&gt;&lt;code class=&quot;xref py py-meth docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;get()&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; 会抛出一个 &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;DoesNotExist&lt;/span&gt;&lt;/code&gt; 异常。 这个异常是正在查询的模型类的一个属性，所以在上面的代码中，如果没有主键为 1 的 &lt;cite&gt;Entry&lt;/cite&gt;, Django 将抛出一个 &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;Entry.DoesNotExist&lt;/span&gt;&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;同样，如果 &lt;a class=&quot;reference internal&quot; title=&quot;django.db.models.query.QuerySet.get&quot; href=&quot;file:///G:/code/django-chinese-doc/build/html/ref/models/querysets.html#django.db.models.query.QuerySet.get&quot;&gt;&lt;code class=&quot;xref py py-meth docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;get()&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; 满足条件的结果超过1个,Django会抛出一个 &lt;a class=&quot;reference internal&quot; title=&quot;django.core.exceptions.MultipleObjectsReturned&quot; href=&quot;file:///G:/code/django-chinese-doc/build/html/ref/exceptions.html#django.core.exceptions.MultipleObjectsReturned&quot;&gt;&lt;code class=&quot;xref py py-exc docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;MultipleObjectsReturned&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; 异常。&lt;/p&gt;
&lt;/div&gt;

&lt;div id=&quot;queryset-limit&quot; class=&quot;section&quot; readability=&quot;25.371666666667&quot;&gt;&lt;span id=&quot;limiting-querysets&quot;/&gt;
&lt;h3&gt;&lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;QuerySet&lt;/span&gt;&lt;/code&gt; 的Limit&lt;/h3&gt;
&lt;p&gt;可以使用Python 的切片语法来限制 &lt;a class=&quot;reference internal&quot; title=&quot;django.db.models.query.QuerySet&quot; href=&quot;file:///G:/code/django-chinese-doc/build/html/ref/models/querysets.html#django.db.models.query.QuerySet&quot;&gt;&lt;code class=&quot;xref py py-class docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;QuerySet&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; 记录的数目。它等同于SQL 的 &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;LIMIT&lt;/span&gt;&lt;/code&gt; 和 &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;OFFSET&lt;/span&gt;&lt;/code&gt; 子句。&lt;/p&gt;
&lt;p&gt;例如，下面的语句返回前面5个对象 (&lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;LIMIT&lt;/span&gt; &lt;span class=&quot;pre&quot;&gt;5&lt;/span&gt;&lt;/code&gt;):&lt;/p&gt;
&lt;div class=&quot;highlight-default&quot; readability=&quot;6&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Entry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()[:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;下面这条语句返回第6至第10个对像 (&lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;OFFSET&lt;/span&gt; &lt;span class=&quot;pre&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;pre&quot;&gt;LIMIT&lt;/span&gt; &lt;span class=&quot;pre&quot;&gt;5&lt;/span&gt;&lt;/code&gt;):&lt;/p&gt;
&lt;div class=&quot;highlight-default&quot; readability=&quot;6&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Entry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;不支持负数索引 (i.e. &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;Entry.objects.all()[-1]&lt;/span&gt;&lt;/code&gt;) 。&lt;/p&gt;
&lt;p&gt;通常, &lt;a class=&quot;reference internal&quot; title=&quot;django.db.models.query.QuerySet&quot; href=&quot;file:///G:/code/django-chinese-doc/build/html/ref/models/querysets.html#django.db.models.query.QuerySet&quot;&gt;&lt;code class=&quot;xref py py-class docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;QuerySet&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; 的切片返回一个新的 &lt;a class=&quot;reference internal&quot; title=&quot;django.db.models.query.QuerySet&quot; href=&quot;file:///G:/code/django-chinese-doc/build/html/ref/models/querysets.html#django.db.models.query.QuerySet&quot;&gt;&lt;code class=&quot;xref py py-class docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;QuerySet&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; – 它不会立即执行查询。但是，如果你使用了Python切片语法中的“步长”参数， 比如下面的语句将在前10个对象中每隔2个对象返回，这样会立即执行数据库查询:&lt;/p&gt;
&lt;div class=&quot;highlight-default&quot; readability=&quot;6&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Entry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()[:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;若不想获取列表，要一个单一的对象(e.g. &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;pre&quot;&gt;foo&lt;/span&gt; &lt;span class=&quot;pre&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;pre&quot;&gt;bar&lt;/span&gt; &lt;span class=&quot;pre&quot;&gt;LIMIT&lt;/span&gt; &lt;span class=&quot;pre&quot;&gt;1&lt;/span&gt;&lt;/code&gt;)，可以直接使用位置索引而不是切片。 。例如，下面的语句返回数据库中根据标题排序后的第一条 &lt;cite&gt;Entry&lt;/cite&gt;&lt;/p&gt;
&lt;div class=&quot;highlight-default&quot; readability=&quot;6&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Entry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;order_by&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'headline'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;它等同于:&lt;/p&gt;
&lt;div class=&quot;highlight-default&quot; readability=&quot;6&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Entry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;order_by&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'headline'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;不同的是，如果没有满足条件的结果，第一种方法将引发 &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;IndexError&lt;/span&gt;&lt;/code&gt; 异常，第二种方法会引发 &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;DoesNotExist&lt;/span&gt;&lt;/code&gt; 异常。 更多细节参见 &lt;a class=&quot;reference internal&quot; title=&quot;django.db.models.query.QuerySet.get&quot; href=&quot;file:///G:/code/django-chinese-doc/build/html/ref/models/querysets.html#django.db.models.query.QuerySet.get&quot;&gt;&lt;code class=&quot;xref py py-meth docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;get()&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; 。&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;field-lookups-intro&quot; class=&quot;section&quot; readability=&quot;22.942315789474&quot;&gt;&lt;span id=&quot;id10&quot;/&gt;
&lt;h3&gt;字段查询&lt;/h3&gt;
&lt;p&gt;字段查询是指如何指定SQL &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;WHERE&lt;/span&gt;&lt;/code&gt; 子句的内容， 它们通过 &lt;a class=&quot;reference internal&quot; title=&quot;django.db.models.query.QuerySet&quot; href=&quot;file:///G:/code/django-chinese-doc/build/html/ref/models/querysets.html#django.db.models.query.QuerySet&quot;&gt;&lt;code class=&quot;xref py py-class docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;QuerySet&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; 的 &lt;a class=&quot;reference internal&quot; title=&quot;django.db.models.query.QuerySet.filter&quot; href=&quot;file:///G:/code/django-chinese-doc/build/html/ref/models/querysets.html#django.db.models.query.QuerySet.filter&quot;&gt;&lt;code class=&quot;xref py py-meth docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;filter()&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;, &lt;a class=&quot;reference internal&quot; title=&quot;django.db.models.query.QuerySet.exclude&quot; href=&quot;file:///G:/code/django-chinese-doc/build/html/ref/models/querysets.html#django.db.models.query.QuerySet.exclude&quot;&gt;&lt;code class=&quot;xref py py-meth docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;exclude()&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; 和&lt;a class=&quot;reference internal&quot; title=&quot;django.db.models.query.QuerySet.get&quot; href=&quot;file:///G:/code/django-chinese-doc/build/html/ref/models/querysets.html#django.db.models.query.QuerySet.get&quot;&gt;&lt;code class=&quot;xref py py-meth docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;get()&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; 方法的关键字参数指定。&lt;/p&gt;
&lt;p&gt;查询的关键字参数的基本形式是 &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;field__lookuptype=value&lt;/span&gt;&lt;/code&gt;. (中间是两个下划线)。 例如:&lt;/p&gt;
&lt;div class=&quot;highlight-default&quot; readability=&quot;6&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Entry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pub_date__lte&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'2006-01-01'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;翻译成SQL就是:&lt;/p&gt;
&lt;div class=&quot;highlight-sql&quot; readability=&quot;6&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;blog_entry&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pub_date&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'2006-01-01'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;admonition- admonition&quot; readability=&quot;7.375&quot;&gt;
&lt;p class=&quot;first admonition-title&quot;&gt;如何实现&lt;/p&gt;
&lt;p class=&quot;last&quot;&gt;Python 定义的函数可以接收任意的键/值对参数，这些名称和参数可以在运行时求值。更多信息， 参见Python 官方文档中的 &lt;a class=&quot;reference external&quot; href=&quot;https://docs.python.org/3/tutorial/controlflow.html#keyword-arguments&quot;&gt;关键字参数&lt;/a&gt; 。&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;查询条件中指定的字段必须是模型字段的名称。但有一个例外，对于 &lt;a class=&quot;reference internal&quot; title=&quot;django.db.models.ForeignKey&quot; href=&quot;file:///G:/code/django-chinese-doc/build/html/ref/models/fields.html#django.db.models.ForeignKey&quot;&gt;&lt;code class=&quot;xref py py-class docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;ForeignKey&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; 你可以使用字段名加上 &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;_id&lt;/span&gt;&lt;/code&gt; 后缀。在这种情况下，该参数的值应该是外键的原始值。例如:&lt;/p&gt;
&lt;div class=&quot;highlight-default&quot; readability=&quot;6&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Entry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;blog_id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;如果传入的是一个不合法的参数，查询函数将引发 &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;TypeError&lt;/span&gt;&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;这些数据库API 支持大约二十多种查询的类型; 完整的参考请参见 &lt;a class=&quot;reference internal&quot; href=&quot;file:///G:/code/django-chinese-doc/build/html/ref/models/querysets.html#field-lookups&quot;&gt;字段查询&lt;/a&gt; 。 下面是一些可能用到的常见查询：&lt;/p&gt;
&lt;dl class=&quot;docutils&quot; readability=&quot;8.0325&quot;&gt;&lt;dt&gt;&lt;a class=&quot;reference internal&quot; href=&quot;file:///G:/code/django-chinese-doc/build/html/ref/models/querysets.html#std:fieldlookup-exact&quot;&gt;&lt;code class=&quot;xref std std-lookup docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;exact&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd readability=&quot;6&quot;&gt;
&lt;p class=&quot;first&quot;&gt;“精确”匹配。例如:&lt;/p&gt;
&lt;div class=&quot;highlight-default&quot; readability=&quot;6&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Entry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;headline__exact&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Cat bites dog&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;将生成下面的SQL:&lt;/p&gt;
&lt;div class=&quot;highlight-sql&quot; readability=&quot;6&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;headline&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Cat bites dog'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;如果没有提供查询类型 – 即如果关键字参数不包含双下划线 – 默认查询类型就是 &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;exact&lt;/span&gt;&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;因此，下面的两条语句相等:&lt;/p&gt;
&lt;div class=&quot;highlight-default&quot; readability=&quot;6&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Blog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id__exact&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;14&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# Explicit form&lt;br/&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Blog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;14&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;         &lt;span class=&quot;c1&quot;&gt;# __exact is implied&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&quot;last&quot;&gt;这是为了方便，因为 &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;exact&lt;/span&gt;&lt;/code&gt; 查询是最常见的查询。&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;&lt;a class=&quot;reference internal&quot; href=&quot;file:///G:/code/django-chinese-doc/build/html/ref/models/querysets.html#std:fieldlookup-iexact&quot;&gt;&lt;code class=&quot;xref std std-lookup docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;iexact&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd readability=&quot;2&quot;&gt;
&lt;p class=&quot;first&quot;&gt;大小写不敏感的匹配。所以这个查询:&lt;/p&gt;
&lt;div class=&quot;highlight-default&quot; readability=&quot;6&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Blog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name__iexact&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;beatles blog&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&quot;last&quot;&gt;将匹配到标题为 &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;&quot;Beatles&lt;/span&gt; &lt;span class=&quot;pre&quot;&gt;Blog&quot;&lt;/span&gt;&lt;/code&gt; 和 &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;&quot;beatles&lt;/span&gt; &lt;span class=&quot;pre&quot;&gt;blog&quot;&lt;/span&gt;&lt;/code&gt; 甚至 &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;&quot;BeAtlES&lt;/span&gt; &lt;span class=&quot;pre&quot;&gt;blOG&quot;&lt;/span&gt;&lt;/code&gt; 的 &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;Blog&lt;/span&gt;&lt;/code&gt; 。&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;&lt;a class=&quot;reference internal&quot; href=&quot;file:///G:/code/django-chinese-doc/build/html/ref/models/querysets.html#std:fieldlookup-contains&quot;&gt;&lt;code class=&quot;xref std std-lookup docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;contains&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd readability=&quot;5.8333333333333&quot;&gt;
&lt;p class=&quot;first&quot;&gt;大小写敏感的包含关系。 例如:&lt;/p&gt;
&lt;div class=&quot;highlight-default&quot; readability=&quot;6&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;n&quot;&gt;Entry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;headline__contains&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Lennon'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;可以翻译成下面的SQL:&lt;/p&gt;
&lt;div class=&quot;highlight-sql&quot; readability=&quot;6&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;headline&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;LIKE&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'%Lennon%'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;注意，这种可以匹配到 &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;'Today&lt;/span&gt; &lt;span class=&quot;pre&quot;&gt;Lennon&lt;/span&gt; &lt;span class=&quot;pre&quot;&gt;honored'&lt;/span&gt;&lt;/code&gt; 但匹配不到 &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;'today&lt;/span&gt; &lt;span class=&quot;pre&quot;&gt;lennon&lt;/span&gt; &lt;span class=&quot;pre&quot;&gt;honored'&lt;/span&gt;&lt;/code&gt; 。&lt;/p&gt;
&lt;p class=&quot;last&quot;&gt;同样也有个大小写不敏感的版本 &lt;a class=&quot;reference internal&quot; href=&quot;file:///G:/code/django-chinese-doc/build/html/ref/models/querysets.html#std:fieldlookup-icontains&quot;&gt;&lt;code class=&quot;xref std std-lookup docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;icontains&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; 。&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;&lt;a class=&quot;reference internal&quot; href=&quot;file:///G:/code/django-chinese-doc/build/html/ref/models/querysets.html#std:fieldlookup-startswith&quot;&gt;&lt;code class=&quot;xref std std-lookup docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;startswith&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; 和 &lt;a class=&quot;reference internal&quot; href=&quot;file:///G:/code/django-chinese-doc/build/html/ref/models/querysets.html#std:fieldlookup-endswith&quot;&gt;&lt;code class=&quot;xref std std-lookup docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;endswith&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;分别是查找以目标字符串开头和结尾的记录,同样的，它们都有一个不区分大小写的方法&lt;a class=&quot;reference internal&quot; href=&quot;file:///G:/code/django-chinese-doc/build/html/ref/models/querysets.html#std:fieldlookup-istartswith&quot;&gt;&lt;code class=&quot;xref std std-lookup docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;istartswith&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; 和 &lt;a class=&quot;reference internal&quot; href=&quot;file:///G:/code/django-chinese-doc/build/html/ref/models/querysets.html#std:fieldlookup-iendswith&quot;&gt;&lt;code class=&quot;xref std std-lookup docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;iendswith&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; 。&lt;/dd&gt;
&lt;/dl&gt;&lt;p&gt;上面罗列的仅仅是部分查询方法，完整的参考： &lt;a class=&quot;reference internal&quot; href=&quot;file:///G:/code/django-chinese-doc/build/html/ref/models/querysets.html#field-lookups&quot;&gt;字段查询参考&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;lookups-that-span-relationships&quot; class=&quot;section&quot; readability=&quot;45.224610822832&quot;&gt;&lt;span id=&quot;id12&quot;/&gt;
&lt;h3&gt;夸关联关系查询&lt;/h3&gt;
&lt;p&gt;Django 提供了强大而又直观的方式来“处理”查询中的关联关系，它在后台自动帮你处理 &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;JOIN&lt;/span&gt;&lt;/code&gt; 。 若要使用关联关系的字段查询，只需使用关联的模型字段的名称，并使用双下划线分隔。&lt;/p&gt;
&lt;p&gt;比如要获取所有 &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;Entry&lt;/span&gt;&lt;/code&gt; 中所有 &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;Blog&lt;/span&gt;&lt;/code&gt; 的 &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;name&lt;/span&gt;&lt;/code&gt; 为 &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;'Beatles&lt;/span&gt; &lt;span class=&quot;pre&quot;&gt;Blog'&lt;/span&gt;&lt;/code&gt; 的对象:&lt;/p&gt;
&lt;div class=&quot;highlight-default&quot; readability=&quot;6&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Entry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;blog__name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Beatles Blog'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;而且这种查询可以是任意深度的。 反过来也是可行的。若要引用一个“反向”的关系，使用该模型的小写的名称即可。&lt;/p&gt;
&lt;p&gt;比如，获取所有 &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;Blog&lt;/span&gt;&lt;/code&gt; 中 &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;Entry&lt;/span&gt;&lt;/code&gt; 的 &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;headline&lt;/span&gt;&lt;/code&gt; 包含 &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;'Lennon'&lt;/span&gt;&lt;/code&gt; 的对象:&lt;/p&gt;
&lt;div class=&quot;highlight-default&quot; readability=&quot;6&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Blog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;entry__headline__contains&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Lennon'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;如果多个关联关系直接过滤而且其中某个中间模型没有满足过滤条件的值， Django 会把它当做一个空的（所有的值都为NULL）合法对象。这意味着不会引发任何错误。例如，在下面的过滤器中:&lt;/p&gt;
&lt;div class=&quot;highlight-default&quot; readability=&quot;6&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;n&quot;&gt;Blog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;entry__authors__name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Lennon'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;(假设存在 &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;Author&lt;/span&gt;&lt;/code&gt; 的关联模型), 如果没有找到符合条件的 &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;author&lt;/span&gt;&lt;/code&gt; , 那么都会返回空, 而不是引发缺失 &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;author&lt;/span&gt;&lt;/code&gt; 的异常， 这是一种比较好的处理方式，但是当使用 &lt;a class=&quot;reference internal&quot; href=&quot;file:///G:/code/django-chinese-doc/build/html/ref/models/querysets.html#std:fieldlookup-isnull&quot;&gt;&lt;code class=&quot;xref std std-lookup docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;isnull&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; 就会有二义性。 例如:&lt;/p&gt;
&lt;div class=&quot;highlight-default&quot; readability=&quot;6&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;n&quot;&gt;Blog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;entry__authors__name__isnull&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;这将会返回 &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;author&lt;/span&gt;&lt;/code&gt; 中 &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;name&lt;/span&gt;&lt;/code&gt; 为空的 &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;Blog&lt;/span&gt;&lt;/code&gt; 对象，以及 &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;entry&lt;/span&gt;&lt;/code&gt; 中 &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;author&lt;/span&gt;&lt;/code&gt; 为空的``Blog`` 对象。 如果你不需要后者，你可以修改成:&lt;/p&gt;
&lt;div class=&quot;highlight-default&quot; readability=&quot;6.5&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;8&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;n&quot;&gt;Blog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;entry__authors__isnull&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;entry__authors__name__isnull&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;id13&quot; class=&quot;section&quot; readability=&quot;41.179435483871&quot;&gt;
&lt;h4&gt;跨关联关系多值查询&lt;/h4&gt;
&lt;p&gt;当你使用 &lt;a class=&quot;reference internal&quot; title=&quot;django.db.models.ManyToManyField&quot; href=&quot;file:///G:/code/django-chinese-doc/build/html/ref/models/fields.html#django.db.models.ManyToManyField&quot;&gt;&lt;code class=&quot;xref py py-class docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;ManyToManyField&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; 或者 &lt;a class=&quot;reference internal&quot; title=&quot;django.db.models.ForeignKey&quot; href=&quot;file:///G:/code/django-chinese-doc/build/html/ref/models/fields.html#django.db.models.ForeignKey&quot;&gt;&lt;code class=&quot;xref py py-class docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;ForeignKey&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; 来过滤一个对象时,有两种不同的过滤方式。 对于 &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;Blog&lt;/span&gt;&lt;/code&gt;/&lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;Entry&lt;/span&gt;&lt;/code&gt; 的关联关系 (&lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;Blog&lt;/span&gt;&lt;/code&gt; 和 &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;Entry&lt;/span&gt;&lt;/code&gt; 是一对多关系)。既可以查找headline为 &lt;em&gt;“Lennon”&lt;/em&gt; 并且pub_date是2008的Entry, 也可以查找 headline为 &lt;em&gt;“Lennon”&lt;/em&gt; 或者 pub_date为 2008的Entry。这两种查询都是有可能并且有意义的。&lt;/p&gt;
&lt;p&gt;&lt;a class=&quot;reference internal&quot; title=&quot;django.db.models.ManyToManyField&quot; href=&quot;file:///G:/code/django-chinese-doc/build/html/ref/models/fields.html#django.db.models.ManyToManyField&quot;&gt;&lt;code class=&quot;xref py py-class docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;ManyToManyField&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; 也有类似的情况。比如，如果 &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;Entry&lt;/span&gt;&lt;/code&gt; 有一个 &lt;a class=&quot;reference internal&quot; title=&quot;django.db.models.ManyToManyField&quot; href=&quot;file:///G:/code/django-chinese-doc/build/html/ref/models/fields.html#django.db.models.ManyToManyField&quot;&gt;&lt;code class=&quot;xref py py-class docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;ManyToManyField&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;tags&lt;/span&gt;&lt;/code&gt;,这样可能想找到tag为 &lt;em&gt;“music”&lt;/em&gt; and &lt;em&gt;“bands”&lt;/em&gt; 的Entry, 或者我们想找一个tag名为 &lt;em&gt;“music”&lt;/em&gt; 且状态为“public”的Entry。&lt;/p&gt;
&lt;p&gt;这些情况都可以使用 &lt;a class=&quot;reference internal&quot; title=&quot;django.db.models.query.QuerySet.filter&quot; href=&quot;file:///G:/code/django-chinese-doc/build/html/ref/models/querysets.html#django.db.models.query.QuerySet.filter&quot;&gt;&lt;code class=&quot;xref py py-meth docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;filter()&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; 来处理。 在单个 &lt;a class=&quot;reference internal&quot; title=&quot;django.db.models.query.QuerySet.filter&quot; href=&quot;file:///G:/code/django-chinese-doc/build/html/ref/models/querysets.html#django.db.models.query.QuerySet.filter&quot;&gt;&lt;code class=&quot;xref py py-meth docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;filter()&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; 中的条件都会被同时应用到匹配。&lt;/p&gt;
&lt;p&gt;这种描述可能不好理解，用一个例子来说明。比如要选择所有的entry包含 &lt;em&gt;“Lennon”&lt;/em&gt; 标题并于2008年发表的博客(即这个Blog的entry要同时包含这两个条件)， 查询代码是这样的:&lt;/p&gt;
&lt;div class=&quot;highlight-default&quot; readability=&quot;6.5&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;8&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;n&quot;&gt;Blog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;entry__headline__contains&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Lennon'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;entry__pub_date__year&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2008&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;要选择Blog的entry包含 &lt;em&gt;“Lennon”&lt;/em&gt; 标题，或者是2008年出版的，查询代码是这样的:&lt;/p&gt;
&lt;div class=&quot;highlight-default&quot; readability=&quot;6&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;n&quot;&gt;Blog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;entry__headline__contains&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Lennon'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;entry__pub_date__year&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2008&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;假设有一个Blog拥有一个标题包含 &lt;em&gt;“Lennon”&lt;/em&gt; 的entry和一个来自2008年的entry。 第一个查询将匹配不到Blog, 第二个查询才会匹配上这个Blog。&lt;/p&gt;
&lt;p&gt;第二个例子中，第一个filter过滤出的查询集是所有关联有标题包含 &lt;em&gt;“Lennon”&lt;/em&gt; 的entry的Blog, 第二个filter是在第一个的查询集中过滤出关联有发布时间是2008的entry的Blog。 第二个filter过滤出来的entry与第一个filter过滤出来的entry可能相同也可能不同。 每个filter语句过滤的是 &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;Blog&lt;/span&gt;&lt;/code&gt; ，而不是 &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;Entry&lt;/span&gt;&lt;/code&gt; 。&lt;/p&gt;
&lt;div class=&quot;admonition note&quot; readability=&quot;14.169381107492&quot;&gt;
&lt;p class=&quot;first admonition-title&quot;&gt;注解&lt;/p&gt;
&lt;p&gt;夸关联关系的多值 &lt;a class=&quot;reference internal&quot; title=&quot;django.db.models.query.QuerySet.filter&quot; href=&quot;file:///G:/code/django-chinese-doc/build/html/ref/models/querysets.html#django.db.models.query.QuerySet.filter&quot;&gt;&lt;code class=&quot;xref py py-meth docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;filter()&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; 查询和 &lt;a class=&quot;reference internal&quot; title=&quot;django.db.models.query.QuerySet.exclude&quot; href=&quot;file:///G:/code/django-chinese-doc/build/html/ref/models/querysets.html#django.db.models.query.QuerySet.exclude&quot;&gt;&lt;code class=&quot;xref py py-meth docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;exclude()&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; 不同。 单个 &lt;a class=&quot;reference internal&quot; title=&quot;django.db.models.query.QuerySet.exclude&quot; href=&quot;file:///G:/code/django-chinese-doc/build/html/ref/models/querysets.html#django.db.models.query.QuerySet.exclude&quot;&gt;&lt;code class=&quot;xref py py-meth docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;exclude()&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; 方法的条件不必引用同一个记录。&lt;/p&gt;
&lt;p&gt;例如，要排除标题中包含 &lt;em&gt;“Lennon”&lt;/em&gt; 的entry和 发布在2008的entry:&lt;/p&gt;
&lt;div class=&quot;highlight-default&quot; readability=&quot;7&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;9&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;n&quot;&gt;Blog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exclude&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;entry__headline__contains&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Lennon'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;entry__pub_date__year&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2008&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;但是，这个和 &lt;a class=&quot;reference internal&quot; title=&quot;django.db.models.query.QuerySet.filter&quot; href=&quot;file:///G:/code/django-chinese-doc/build/html/ref/models/querysets.html#django.db.models.query.QuerySet.filter&quot;&gt;&lt;code class=&quot;xref py py-meth docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;filter()&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; 不一样,它并不是排除同时满足这两个条件的Blog。 如果要排除Blog中entry的标题包含 &lt;em&gt;“Lennon”&lt;/em&gt; 且发布时间为2008的，需要改成这样:&lt;/p&gt;
&lt;div class=&quot;last highlight-default&quot; readability=&quot;8&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;11&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;n&quot;&gt;Blog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exclude&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;entry__in&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Entry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;headline__contains&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Lennon'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pub_date__year&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2008&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;filters&quot; class=&quot;section&quot; readability=&quot;30.793905817175&quot;&gt;&lt;span id=&quot;using-f-expressions-in-filters&quot;/&gt;
&lt;h3&gt;Filters 引用模型字段&lt;/h3&gt;
&lt;p&gt;在上面例子中，最多是将模型字段和常量进行比较。那么如何将模型的一个字段与模型的另外一个字段进行比较？&lt;/p&gt;
&lt;p&gt;Django 提供了 &lt;a class=&quot;reference internal&quot; title=&quot;django.db.models.F&quot; href=&quot;file:///G:/code/django-chinese-doc/build/html/ref/models/expressions.html#django.db.models.F&quot;&gt;&lt;code class=&quot;xref py py-class docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;F&lt;/span&gt; &lt;span class=&quot;pre&quot;&gt;表达式&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; 来完成这种操作。 &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;F()&lt;/span&gt;&lt;/code&gt; 的实例作为查询中模型字段的引用。可以在查询filter中使用这些引用来比较相同模型不同instance上两个不同字段的值。&lt;/p&gt;
&lt;p&gt;比如, 如果要查找comments数目多于pingbacks的Entry，可以构造一个 &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;F()&lt;/span&gt;&lt;/code&gt; 对象来引用pingback数目， 并在查询中使用该 &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;F()&lt;/span&gt;&lt;/code&gt; 对象:&lt;/p&gt;
&lt;div class=&quot;highlight-default&quot; readability=&quot;6&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;django.db.models&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;F&lt;br/&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Entry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n_comments__gt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'n_pingbacks'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Django 支持对 &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;F()&lt;/span&gt;&lt;/code&gt; 对象使用加法、减法、乘法、除法、取模以及幂计算等算术操作， 操作符两边可以都是常数或 &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;F()&lt;/span&gt;&lt;/code&gt; 对象。例如，查找comments 数目比pingbacks 两倍还要多的Entry，可以将查询修改为:&lt;/p&gt;
&lt;div class=&quot;highlight-default&quot; readability=&quot;6&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Entry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n_comments__gt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'n_pingbacks'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;查询rating 比pingback 和comment 数目总和要小的Entry，可以这样查询:&lt;/p&gt;
&lt;div class=&quot;highlight-default&quot; readability=&quot;6&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Entry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rating__lt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'n_comments'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'n_pingbacks'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;F()&lt;/span&gt;&lt;/code&gt; 还支持在对象中使用双下划线标记来跨关联关系查询。带有双下划线的 &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;F()&lt;/span&gt;&lt;/code&gt; 对象将引入任何需要的join 操作以访问关联的对象。例如，如要获取author的名字与blog名字相同的Entry，可以这样查询:&lt;/p&gt;
&lt;div class=&quot;highlight-default&quot; readability=&quot;6&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Entry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;authors__name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'blog__name'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;对于date 和date/time 字段，支持给它们加上或减去一个 &lt;code class=&quot;xref py py-class docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;timedelta&lt;/span&gt;&lt;/code&gt; 对象。 下面的例子将返回修改时间位于发布3天后的Entry:&lt;/p&gt;
&lt;div class=&quot;highlight-default&quot; readability=&quot;6.5&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;8&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;datetime&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timedelta&lt;br/&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Entry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mod_date__gt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'pub_date'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timedelta&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;days&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;F()&lt;/span&gt;&lt;/code&gt; 对象支持 &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;.bitand()&lt;/span&gt;&lt;/code&gt; 和 &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;.bitor()&lt;/span&gt;&lt;/code&gt; 两种位操作，例如:&lt;/p&gt;
&lt;div class=&quot;highlight-default&quot; readability=&quot;6&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'somefield'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bitand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;pk&quot; class=&quot;section&quot; readability=&quot;16.5&quot;&gt;
&lt;h3&gt;&lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;pk&lt;/span&gt;&lt;/code&gt; 快捷查询&lt;/h3&gt;
&lt;p&gt;为了方便，Django 提供一个查询快捷方式 &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;pk&lt;/span&gt;&lt;/code&gt; ，它表示“primary key” 的意思。&lt;/p&gt;
&lt;p&gt;在 &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;Blog&lt;/span&gt;&lt;/code&gt; 模型示例中，主键是 &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;id&lt;/span&gt;&lt;/code&gt; 字段，所以下面三条语句是等同的:&lt;/p&gt;
&lt;div class=&quot;highlight-default&quot; readability=&quot;6.5&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;8&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Blog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id__exact&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;14&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Explicit form&lt;br/&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Blog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;14&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# __exact is implied&lt;br/&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Blog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;14&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# pk implies id__exact&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;pk&lt;/span&gt;&lt;/code&gt; 的使用不仅限于 &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;__exact&lt;/span&gt;&lt;/code&gt; 查询 —— 任何查询类型都可以与 &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;pk&lt;/span&gt;&lt;/code&gt; 结合来完成一个模型上对主键的查询:&lt;/p&gt;
&lt;div class=&quot;highlight-default&quot; readability=&quot;8&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;11&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;c1&quot;&gt;# Get blogs entries with id 1, 4 and 7&lt;br/&gt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Blog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pk__in&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;br/&gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# Get all blog entries with id &amp;gt; 14&lt;br/&gt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Blog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pk__gt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;14&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;pk&lt;/span&gt;&lt;/code&gt; 查询在 join 中适用。例如，下面三个语句是等同的:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &amp;gt;&amp;gt;&amp;gt; Entry.objects.filter(blog__id__exact=3) &lt;span&gt;#&lt;/span&gt;&lt;span&gt; Explicit form&lt;/span&gt;
&lt;span&gt;2&lt;/span&gt; &amp;gt;&amp;gt;&amp;gt; Entry.objects.filter(blog__id=3)        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; __exact is implied&lt;/span&gt;
&lt;span&gt;3&lt;/span&gt; &amp;gt;&amp;gt;&amp;gt; Entry.objects.filter(blog__pk=3)        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; __pk implies __id__exact&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;like&quot; class=&quot;section&quot; readability=&quot;17&quot;&gt;
&lt;h3&gt;&lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;LIKE&lt;/span&gt;&lt;/code&gt; 中的%和_转义&lt;/h3&gt;
&lt;p&gt;与 &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;LIKE&lt;/span&gt;&lt;/code&gt; SQL 语句等同的字段查询（ &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;iexact&lt;/span&gt;&lt;/code&gt; 、 &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;contains&lt;/span&gt;&lt;/code&gt; 、 &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;icontains&lt;/span&gt;&lt;/code&gt; 、 &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;startswith&lt;/span&gt;&lt;/code&gt; 、 &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;istartswith&lt;/span&gt;&lt;/code&gt; 、 &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;endswith&lt;/span&gt;&lt;/code&gt; 和 &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;iendswith&lt;/span&gt;&lt;/code&gt; ）将自动转义在 &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;LIKE&lt;/span&gt;&lt;/code&gt; 语句中 使用的两个特殊的字符 —— 百分号和下划线。（在 &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;LIKE&lt;/span&gt;&lt;/code&gt; 语句中，百分号通配符表示多个字符，下划线通配符表示单个字符）&lt;/p&gt;
&lt;p&gt;这样语句将很直观，不会显得太抽象。例如，要获取包含一个百分号的所有的 &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;Entry&lt;/span&gt;&lt;/code&gt; ，只需要像其它任何字符一样使用百分号:&lt;/p&gt;
&lt;div class=&quot;highlight-default&quot; readability=&quot;6&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Entry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;headline__contains&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'%'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Django 会帮你转义；生成的SQL 看上去会是这样s:&lt;/p&gt;
&lt;div class=&quot;highlight-sql&quot; readability=&quot;6&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;headline&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;LIKE&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'%\%%'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;对于下划线是同样的道理。百分号和下划线都会自动地帮你处理。&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;caching-and-querysets&quot; class=&quot;section&quot; readability=&quot;27.559130798161&quot;&gt;&lt;span id=&quot;id14&quot;/&gt;
&lt;h3&gt;&lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;QuerySet&lt;/span&gt;&lt;/code&gt; 缓存&lt;/h3&gt;
&lt;p&gt;每个 &lt;a class=&quot;reference internal&quot; title=&quot;django.db.models.query.QuerySet&quot; href=&quot;file:///G:/code/django-chinese-doc/build/html/ref/models/querysets.html#django.db.models.query.QuerySet&quot;&gt;&lt;code class=&quot;xref py py-class docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;QuerySet&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; 都会缓存一个最小化的数据库访问。编写高效的代码前你需要理解它是如何工作的。&lt;/p&gt;
&lt;p&gt;在一个新创建的 &lt;a class=&quot;reference internal&quot; title=&quot;django.db.models.query.QuerySet&quot; href=&quot;file:///G:/code/django-chinese-doc/build/html/ref/models/querysets.html#django.db.models.query.QuerySet&quot;&gt;&lt;code class=&quot;xref py py-class docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;QuerySet&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; 中，缓存为空。 首次对查询集进行求值——即产生数据库查询，Django将保存查询的结果到 &lt;a class=&quot;reference internal&quot; title=&quot;django.db.models.query.QuerySet&quot; href=&quot;file:///G:/code/django-chinese-doc/build/html/ref/models/querysets.html#django.db.models.query.QuerySet&quot;&gt;&lt;code class=&quot;xref py py-class docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;QuerySet&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; 的缓存中，并明确返回请求的结果（ 例如，如果正在迭代 &lt;a class=&quot;reference internal&quot; title=&quot;django.db.models.query.QuerySet&quot; href=&quot;file:///G:/code/django-chinese-doc/build/html/ref/models/querysets.html#django.db.models.query.QuerySet&quot;&gt;&lt;code class=&quot;xref py py-class docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;QuerySet&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; ，则返回下一个结果） 接下来对该 &lt;a class=&quot;reference internal&quot; title=&quot;django.db.models.query.QuerySet&quot; href=&quot;file:///G:/code/django-chinese-doc/build/html/ref/models/querysets.html#django.db.models.query.QuerySet&quot;&gt;&lt;code class=&quot;xref py py-class docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;QuerySet&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; 的求值将重用缓存的结果。&lt;/p&gt;
&lt;p&gt;请牢记这个缓存行为，因为对 &lt;a class=&quot;reference internal&quot; title=&quot;django.db.models.query.QuerySet&quot; href=&quot;file:///G:/code/django-chinese-doc/build/html/ref/models/querysets.html#django.db.models.query.QuerySet&quot;&gt;&lt;code class=&quot;xref py py-class docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;QuerySet&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; 使用不当的话，它会坑你的。 例如，下面的语句创建两个 &lt;a class=&quot;reference internal&quot; title=&quot;django.db.models.query.QuerySet&quot; href=&quot;file:///G:/code/django-chinese-doc/build/html/ref/models/querysets.html#django.db.models.query.QuerySet&quot;&gt;&lt;code class=&quot;xref py py-class docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;QuerySet&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; ，对它们求值，然后扔掉它们:&lt;/p&gt;
&lt;div class=&quot;highlight-default&quot; readability=&quot;6.5&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;8&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;headline&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Entry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()])&lt;br/&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pub_date&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Entry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;这意味着相同的数据库查询将执行两次，显然增加了你的数据库负载。 同时，还有可能两个结果列表并不包含相同的数据库记录，因为在两次请求期间有可能有 &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;Entry&lt;/span&gt;&lt;/code&gt; 被添加进来或删除掉。&lt;/p&gt;
&lt;p&gt;为了避免这个问题，只需保存 &lt;a class=&quot;reference internal&quot; title=&quot;django.db.models.query.QuerySet&quot; href=&quot;file:///G:/code/django-chinese-doc/build/html/ref/models/querysets.html#django.db.models.query.QuerySet&quot;&gt;&lt;code class=&quot;xref py py-class docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;QuerySet&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; 并重新使用它:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &amp;gt;&amp;gt;&amp;gt; queryset =&lt;span&gt; Entry.objects.all()
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; &amp;gt;&amp;gt;&amp;gt; &lt;span&gt;print&lt;/span&gt;([p.headline &lt;span&gt;for&lt;/span&gt; p &lt;span&gt;in&lt;/span&gt; queryset]) &lt;span&gt;#&lt;/span&gt;&lt;span&gt; Evaluate the query set.&lt;/span&gt;
&lt;span&gt;3&lt;/span&gt; &amp;gt;&amp;gt;&amp;gt; &lt;span&gt;print&lt;/span&gt;([p.pub_date &lt;span&gt;for&lt;/span&gt; p &lt;span&gt;in&lt;/span&gt; queryset]) &lt;span&gt;#&lt;/span&gt;&lt;span&gt; Re-use the cache from the evaluation.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div id=&quot;id15&quot; class=&quot;section&quot; readability=&quot;20.714156079855&quot;&gt;
&lt;h4&gt;何时查询集不会被缓存&lt;/h4&gt;
&lt;p&gt;查询集不会永远缓存它们的结果。当只对查询集的部分进行求值时会检查缓存， 但是如果这个部分不在缓存中，那么接下来查询返回的记录都将不会被缓存。 这意味着使用切片或 &lt;a class=&quot;reference internal&quot; href=&quot;file:///G:/code/django-chinese-doc/build/html/topics/db/queries.html#limiting-querysets&quot;&gt;限制查询集&lt;/a&gt; 将不会填充缓存。&lt;/p&gt;
&lt;p&gt;例如，重复获取查询集对象中一个特定的索引将每次都查询数据库:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &amp;gt;&amp;gt;&amp;gt; queryset =&lt;span&gt; Entry.objects.all()
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; &amp;gt;&amp;gt;&amp;gt; &lt;span&gt;print&lt;/span&gt;(queryset[5]) &lt;span&gt;#&lt;/span&gt;&lt;span&gt; Queries the database&lt;/span&gt;
&lt;span&gt;3&lt;/span&gt; &amp;gt;&amp;gt;&amp;gt; &lt;span&gt;print&lt;/span&gt;(queryset[5]) &lt;span&gt;#&lt;/span&gt;&lt;span&gt; Queries the database again&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然而，如果已经对全部查询集求值过，则将检查缓存:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &amp;gt;&amp;gt;&amp;gt; queryset =&lt;span&gt; Entry.objects.all()
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; &amp;gt;&amp;gt;&amp;gt; [entry &lt;span&gt;for&lt;/span&gt; entry &lt;span&gt;in&lt;/span&gt; queryset] &lt;span&gt;#&lt;/span&gt;&lt;span&gt; Queries the database&lt;/span&gt;
&lt;span&gt;3&lt;/span&gt; &amp;gt;&amp;gt;&amp;gt; &lt;span&gt;print&lt;/span&gt;(queryset[5]) &lt;span&gt;#&lt;/span&gt;&lt;span&gt; Uses cache&lt;/span&gt;
&lt;span&gt;4&lt;/span&gt; &amp;gt;&amp;gt;&amp;gt; &lt;span&gt;print&lt;/span&gt;(queryset[5]) &lt;span&gt;#&lt;/span&gt;&lt;span&gt; Uses cache&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;下面是一些其它例子，它们都会使得全部的查询集被求值并填充到缓存中:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &amp;gt;&amp;gt;&amp;gt; [entry &lt;span&gt;for&lt;/span&gt; entry &lt;span&gt;in&lt;/span&gt;&lt;span&gt; queryset]
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; &amp;gt;&amp;gt;&amp;gt;&lt;span&gt; bool(queryset)
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; &amp;gt;&amp;gt;&amp;gt; entry &lt;span&gt;in&lt;/span&gt;&lt;span&gt; queryset
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; &amp;gt;&amp;gt;&amp;gt; list(queryset)
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;admonition note&quot; readability=&quot;8&quot;&gt;
&lt;p class=&quot;first admonition-title&quot;&gt;注解&lt;/p&gt;
&lt;p class=&quot;last&quot;&gt;简单地打印查询集不会填充缓存。因为 &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;__repr__()&lt;/span&gt;&lt;/code&gt; 调用只返回全部查询集的一个切片。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;q&quot; class=&quot;section&quot; readability=&quot;55.328589909444&quot;&gt;&lt;span id=&quot;complex-lookups-with-q&quot;/&gt;
&lt;h2&gt;&lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;Q&lt;/span&gt;&lt;/code&gt; 复杂查询&lt;/h2&gt;
&lt;p&gt;&lt;a class=&quot;reference internal&quot; title=&quot;django.db.models.query.QuerySet.filter&quot; href=&quot;file:///G:/code/django-chinese-doc/build/html/ref/models/querysets.html#django.db.models.query.QuerySet.filter&quot;&gt;&lt;code class=&quot;xref py py-meth docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;filter()&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; 等方法中的关键字参数查询都是一起进行 “AND” 操作, 如果你需要执行更复杂的查询(例如 &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;OR&lt;/span&gt;&lt;/code&gt; 语句), 你可以使用 &lt;a class=&quot;reference internal&quot; title=&quot;django.db.models.Q&quot; href=&quot;file:///G:/code/django-chinese-doc/build/html/ref/models/querysets.html#django.db.models.Q&quot;&gt;&lt;code class=&quot;xref py py-class docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;Q&lt;/span&gt; &lt;span class=&quot;pre&quot;&gt;查询对象&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a class=&quot;reference internal&quot; title=&quot;django.db.models.Q&quot; href=&quot;file:///G:/code/django-chinese-doc/build/html/ref/models/querysets.html#django.db.models.Q&quot;&gt;&lt;code class=&quot;xref py py-class docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;Q&lt;/span&gt; &lt;span class=&quot;pre&quot;&gt;对象&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; (&lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;django.db.models.Q&lt;/span&gt;&lt;/code&gt;) 对象用于封装一组关键字参数。 这些关键字参数就是上文“字段查询” 中所提及的那些。&lt;/p&gt;
&lt;p&gt;例如，下面的 &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;Q&lt;/span&gt; &lt;span class=&quot;pre&quot;&gt;``对象封装一个&lt;/span&gt; &lt;span class=&quot;pre&quot;&gt;``LIKE&lt;/span&gt;&lt;/code&gt; 查询:&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
from django.db.models import Q
Q(question__startswith='What')
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;Q&lt;/span&gt;&lt;/code&gt; 对象可以使用 &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;&amp;amp;&lt;/span&gt;&lt;/code&gt; 和 &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;|&lt;/span&gt;&lt;/code&gt; 操作符组合。 当使用操作符将两个对象组合是，将生成一个新的 &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;Q&lt;/span&gt;&lt;/code&gt; 对象。&lt;/p&gt;
&lt;p&gt;例如，下面的语句产生一个 &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;Q&lt;/span&gt;&lt;/code&gt; 对象，表示两个 &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;&quot;question__startswith&quot;&lt;/span&gt;&lt;/code&gt; 查询的“OR”:&lt;/p&gt;
&lt;div class=&quot;highlight-default&quot; readability=&quot;6&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;n&quot;&gt;Q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;question__startswith&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Who'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;question__startswith&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'What'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;它等同于下面的SQL &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;WHERE&lt;/span&gt;&lt;/code&gt; 句子:&lt;/p&gt;
&lt;div class=&quot;highlight-default&quot; readability=&quot;6&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;n&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;question&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LIKE&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Who%'&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OR&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;question&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LIKE&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'What%'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;你可以组合 &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;&amp;amp;&lt;/span&gt;&lt;/code&gt; 和 &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;|&lt;/span&gt;&lt;/code&gt; 操作符以及使用括号进行分组来编写任意复杂的 &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;Q&lt;/span&gt;&lt;/code&gt; 对象。 同时，&lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;Q&lt;/span&gt;&lt;/code&gt; 对象可以使用 &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;~&lt;/span&gt;&lt;/code&gt; 操作符取反，这允许组合正常的查询和取反( &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;NOT&lt;/span&gt;&lt;/code&gt; ) 查询:&lt;/p&gt;
&lt;div class=&quot;highlight-default&quot; readability=&quot;6&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;n&quot;&gt;Q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;question__startswith&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Who'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pub_date__year&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2005&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;每个接受关键字参数的查询函数 (e.g. &lt;a class=&quot;reference internal&quot; title=&quot;django.db.models.query.QuerySet.filter&quot; href=&quot;file:///G:/code/django-chinese-doc/build/html/ref/models/querysets.html#django.db.models.query.QuerySet.filter&quot;&gt;&lt;code class=&quot;xref py py-meth docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;filter()&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;, &lt;a class=&quot;reference internal&quot; title=&quot;django.db.models.query.QuerySet.exclude&quot; href=&quot;file:///G:/code/django-chinese-doc/build/html/ref/models/querysets.html#django.db.models.query.QuerySet.exclude&quot;&gt;&lt;code class=&quot;xref py py-meth docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;exclude()&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;, &lt;a class=&quot;reference internal&quot; title=&quot;django.db.models.query.QuerySet.get&quot; href=&quot;file:///G:/code/django-chinese-doc/build/html/ref/models/querysets.html#django.db.models.query.QuerySet.get&quot;&gt;&lt;code class=&quot;xref py py-meth docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;get()&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;) 都可以传递一个或多个 &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;Q&lt;/span&gt;&lt;/code&gt; 对象作为位置参数。 如果一个查询函数有多个 &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;Q&lt;/span&gt;&lt;/code&gt; 对象参数，这些参数的逻辑关系为“AND”。例如:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;Poll.objects.get(
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;     Q(question__startswith=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Who&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;),
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;     Q(pub_date=date(2005, 5, 2)) | Q(pub_date=date(2005, 5, 6&lt;span&gt;))
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; )
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;大体上可以翻译成这个SQL:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; SELECT * &lt;span&gt;from&lt;/span&gt; polls WHERE question LIKE &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Who%&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;span&gt;2&lt;/span&gt;     AND (pub_date = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;2005-05-02&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; OR pub_date = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;2005-05-06&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;查询函数可以混合使用 &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;Q&lt;/span&gt;&lt;/code&gt; 对象和关键字参数。 所有提供查询函数的参数（关键字参数或 &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;Q&lt;/span&gt;&lt;/code&gt; 对象）都将”AND”在一起。 但是，如果出现 &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;Q&lt;/span&gt;&lt;/code&gt; 对象，它必须位于所有关键字参数的前面。例如:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;Poll.objects.get(
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;     Q(pub_date=date(2005, 5, 2)) | Q(pub_date=date(2005, 5, 6&lt;span&gt;)),
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;     question__startswith=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Who&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; )
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这是一个合法的查询，等同于前面的例子; 但是:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; INVALID QUERY&lt;/span&gt;
&lt;span&gt;2&lt;/span&gt; &lt;span&gt;Poll.objects.get(
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;     question__startswith=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Who&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;     Q(pub_date=date(2005, 5, 2)) | Q(pub_date=date(2005, 5, 6&lt;span&gt;))
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt; )
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这个是不合法的。&lt;/p&gt;
&lt;div class=&quot;admonition seealso&quot; readability=&quot;5.775&quot;&gt;
&lt;p class=&quot;first admonition-title&quot;&gt;参见&lt;/p&gt;
&lt;p class=&quot;last&quot;&gt;Django 单元测试中的 &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/django/django/blob/master/tests/or_lookups/tests.py&quot;&gt;OR查询示例&lt;/a&gt; 演示了几种 &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;Q&lt;/span&gt;&lt;/code&gt; 的用法.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;id16&quot; class=&quot;section&quot; readability=&quot;14&quot;&gt;
&lt;h2&gt;对象比较&lt;/h2&gt;
&lt;p&gt;使用双等号 &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;==&lt;/span&gt;&lt;/code&gt; 比较两个对象，其实是比较两个模型主键的值。&lt;/p&gt;
&lt;p&gt;使用上面的 &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;Entry&lt;/span&gt;&lt;/code&gt; 示范, 下面两个表达式是等同的:&lt;/p&gt;
&lt;div class=&quot;highlight-default&quot; readability=&quot;6&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;some_entry&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;other_entry&lt;br/&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;some_entry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;other_entry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;即是模型的主键名称不是 &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;id&lt;/span&gt;&lt;/code&gt; 也没关系，这种比较总是会使用主键不叫，不论叫什么名字。 例如，如果模型的主键字段叫 &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;name&lt;/span&gt;&lt;/code&gt; ，下面的两条语句是等同的:&lt;/p&gt;
&lt;div class=&quot;highlight-default&quot; readability=&quot;6&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;some_obj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;other_obj&lt;br/&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;some_obj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;other_obj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;topics-db-queries-delete&quot; class=&quot;section&quot; readability=&quot;32.039718129404&quot;&gt;&lt;span id=&quot;id17&quot;/&gt;
&lt;h2&gt;删除对象&lt;/h2&gt;
&lt;p&gt;删除方法叫做 &lt;a class=&quot;reference internal&quot; title=&quot;django.db.models.Model.delete&quot; href=&quot;file:///G:/code/django-chinese-doc/build/html/ref/models/instances.html#django.db.models.Model.delete&quot;&gt;&lt;code class=&quot;xref py py-meth docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;delete()&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; 。这个方法将立即删除对象， 返回被删除的对象的总数和每个对象类型的删除数量的字典。举例:&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
&amp;gt;&amp;gt;&amp;gt; e.delete()
(1, {'weblog.Entry': 1})
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;versionchanged&quot; readability=&quot;7&quot;&gt;
&lt;p&gt;1.9开始删除方法才有返回值。&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;你还可以批量删除对象。每个 &lt;a class=&quot;reference internal&quot; title=&quot;django.db.models.query.QuerySet&quot; href=&quot;file:///G:/code/django-chinese-doc/build/html/ref/models/querysets.html#django.db.models.query.QuerySet&quot;&gt;&lt;code class=&quot;xref py py-class docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;QuerySet&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; 都有 &lt;a class=&quot;reference internal&quot; title=&quot;django.db.models.query.QuerySet.delete&quot; href=&quot;file:///G:/code/django-chinese-doc/build/html/ref/models/querysets.html#django.db.models.query.QuerySet.delete&quot;&gt;&lt;code class=&quot;xref py py-meth docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;delete()&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; 方法，它作用是删除 &lt;a class=&quot;reference internal&quot; title=&quot;django.db.models.query.QuerySet&quot; href=&quot;file:///G:/code/django-chinese-doc/build/html/ref/models/querysets.html#django.db.models.query.QuerySet&quot;&gt;&lt;code class=&quot;xref py py-class docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;QuerySet&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; 中的所有成员。&lt;/p&gt;
&lt;p&gt;例如, 下面语句删除所有 &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;pub_date&lt;/span&gt;&lt;/code&gt; 为2005的 &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;Entry&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
&amp;gt;&amp;gt;&amp;gt; Entry.objects.filter(pub_date__year=2005).delete()
(5, {'webapp.Entry': 5})
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;上面的过程是通过SQL实现的，并不是依次调用每个对象的 &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;delete()&lt;/span&gt;&lt;/code&gt; 方法。 如果你给模型类提供了一个自定义的 &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;delete()&lt;/span&gt;&lt;/code&gt; 方法，并且希望删除时方法被调用。 你需要”手动”调用实例的 &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;delete()&lt;/span&gt;&lt;/code&gt;（例如:迭代 &lt;a class=&quot;reference internal&quot; title=&quot;django.db.models.query.QuerySet&quot; href=&quot;file:///G:/code/django-chinese-doc/build/html/ref/models/querysets.html#django.db.models.query.QuerySet&quot;&gt;&lt;code class=&quot;xref py py-class docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;QuerySet&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; 调用每个实例的 &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;delete()&lt;/span&gt;&lt;/code&gt; 方法，使用 &lt;a class=&quot;reference internal&quot; title=&quot;django.db.models.query.QuerySet&quot; href=&quot;file:///G:/code/django-chinese-doc/build/html/ref/models/querysets.html#django.db.models.query.QuerySet&quot;&gt;&lt;code class=&quot;xref py py-class docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;QuerySet&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; 的 &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;delete()&lt;/span&gt;&lt;/code&gt; 方法）。&lt;/p&gt;
&lt;p&gt;当Django 删除一个对象时，它默认使用SQL &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;ON&lt;/span&gt; &lt;span class=&quot;pre&quot;&gt;DELETE&lt;/span&gt; &lt;span class=&quot;pre&quot;&gt;CASCADE&lt;/span&gt;&lt;/code&gt; 约束 —— 换句话讲，任何有外键指向要删除对象的对象都将一起删除。 例如:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
b = Blog.objects.get(pk=1&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 这会删除该 Blog 和它所有的Entry对象&lt;/span&gt;
b.delete()
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这种级联的行为可以通过 &lt;a class=&quot;reference internal&quot; title=&quot;django.db.models.ForeignKey&quot; href=&quot;file:///G:/code/django-chinese-doc/build/html/ref/models/fields.html#django.db.models.ForeignKey&quot;&gt;&lt;code class=&quot;xref py py-class docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;ForeignKey&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; 的 &lt;a class=&quot;reference internal&quot; title=&quot;django.db.models.ForeignKey.on_delete&quot; href=&quot;file:///G:/code/django-chinese-doc/build/html/ref/models/fields.html#django.db.models.ForeignKey.on_delete&quot;&gt;&lt;code class=&quot;xref py py-attr docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;on_delete&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; 参数定义。&lt;/p&gt;
&lt;p&gt;注意， &lt;a class=&quot;reference internal&quot; title=&quot;django.db.models.query.QuerySet.delete&quot; href=&quot;file:///G:/code/django-chinese-doc/build/html/ref/models/querysets.html#django.db.models.query.QuerySet.delete&quot;&gt;&lt;code class=&quot;xref py py-meth docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;delete()&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; 是唯一没有在 &lt;a class=&quot;reference internal&quot; title=&quot;django.db.models.Manager&quot; href=&quot;file:///G:/code/django-chinese-doc/build/html/topics/db/managers.html#django.db.models.Manager&quot;&gt;&lt;code class=&quot;xref py py-class docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;Manager&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; 上暴露出来的 &lt;a class=&quot;reference internal&quot; title=&quot;django.db.models.query.QuerySet&quot; href=&quot;file:///G:/code/django-chinese-doc/build/html/ref/models/querysets.html#django.db.models.query.QuerySet&quot;&gt;&lt;code class=&quot;xref py py-class docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;QuerySet&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; 方法。 这是一个安全机制来防止你意外地请求 &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;Entry.objects.delete()&lt;/span&gt;&lt;/code&gt; , 而删除所有的条目。 如果你确实想删除所有的对象，你必须明确地请求一个完整的查询集:&lt;/p&gt;
&lt;div class=&quot;highlight-default&quot; readability=&quot;6&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;n&quot;&gt;Entry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;delete&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;topics-db-queries-copy&quot; class=&quot;section&quot; readability=&quot;29&quot;&gt;&lt;span id=&quot;id18&quot;/&gt;
&lt;h2&gt;复制对象&lt;/h2&gt;
&lt;p&gt;没有内建的复制模型实例的方法，但可以通过创建一个新的实例并将它的所有字段都拷贝过来。最简单的方法是，只需要将 &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;pk&lt;/span&gt;&lt;/code&gt; 设置成 &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;None&lt;/span&gt;&lt;/code&gt; 。使用blog作为演示:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; blog = Blog(name=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;My blog&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, tagline=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Blogging is easy&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; blog.save() &lt;span&gt;#&lt;/span&gt;&lt;span&gt; blog.pk == 1&lt;/span&gt;
&lt;span&gt;3&lt;/span&gt; 
&lt;span&gt;4&lt;/span&gt; blog.pk =&lt;span&gt; None
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt; blog.save() &lt;span&gt;#&lt;/span&gt;&lt;span&gt; blog.pk == 2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;如果你使用继承，那么会复杂一些。比如 &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;Blog&lt;/span&gt;&lt;/code&gt; 的子类:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;class&lt;/span&gt;&lt;span&gt; ThemeBlog(Blog):
    theme &lt;/span&gt;= models.CharField(max_length=200&lt;span&gt;)

django_blog &lt;/span&gt;= ThemeBlog(name=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Django&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, tagline=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Django is easy&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, theme=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;python&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
django_blog.save() &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; django_blog.pk == 3&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;由于继承的原因, 你必须同时设置 &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;pk&lt;/span&gt;&lt;/code&gt; 和 &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;id&lt;/span&gt;&lt;/code&gt; 为 None:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
django_blog.pk =&lt;span&gt; None
django_blog.id &lt;/span&gt;=&lt;span&gt; None
django_blog.save() &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; django_blog.pk == 4&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这样就不会复制到其关联对象。 比如， &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;Entry&lt;/span&gt;&lt;/code&gt; 有一个 &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;ManyToManyField&lt;/span&gt;&lt;/code&gt; 的 &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;Author&lt;/span&gt;&lt;/code&gt;。在复制了一个entry后， 必须为这个新的entry设置一个多对多关联关系:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; entry = Entry.objects.all()[0] &lt;span&gt;#&lt;/span&gt;&lt;span&gt; some previous entry&lt;/span&gt;
&lt;span&gt;2&lt;/span&gt; old_authors =&lt;span&gt; entry.authors.all()
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; entry.pk =&lt;span&gt; None
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; &lt;span&gt;entry.save()
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt; entry.authors.set(old_authors)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果是 &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;OneToOneField&lt;/span&gt;&lt;/code&gt;, 您必须复制相关联的对象并将其赋值给新对象的字段，避免出现复制后一对多的情况。 例如，假设 &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;entry&lt;/span&gt;&lt;/code&gt; 已经是复制后的:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
detail =&lt;span&gt; EntryDetail.objects.all()[0]
detail.pk &lt;/span&gt;=&lt;span&gt; None
detail.entry &lt;/span&gt;=&lt;span&gt; entry
detail.save()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;topics-db-queries-update&quot; class=&quot;section&quot; readability=&quot;32.533033707865&quot;&gt;&lt;span id=&quot;id19&quot;/&gt;
&lt;h2&gt;同时更新多个对象&lt;/h2&gt;
&lt;p&gt;可以对 &lt;a class=&quot;reference internal&quot; title=&quot;django.db.models.query.QuerySet&quot; href=&quot;file:///G:/code/django-chinese-doc/build/html/ref/models/querysets.html#django.db.models.query.QuerySet&quot;&gt;&lt;code class=&quot;xref py py-class docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;QuerySet&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; 中的所有对象修改该某个字段的值。这就需要使用 &lt;a class=&quot;reference internal&quot; title=&quot;django.db.models.query.QuerySet.update&quot; href=&quot;file:///G:/code/django-chinese-doc/build/html/ref/models/querysets.html#django.db.models.query.QuerySet.update&quot;&gt;&lt;code class=&quot;xref py py-meth docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;update()&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; 方法，例如:&lt;/p&gt;
&lt;div class=&quot;highlight-default&quot; readability=&quot;6.5&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;8&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;c1&quot;&gt;# 修改所有pub_date为2007的headlines&lt;br/&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Entry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pub_date__year&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2007&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;headline&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Everything is the same'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;也可以对非关联字段和 &lt;a class=&quot;reference internal&quot; title=&quot;django.db.models.ForeignKey&quot; href=&quot;file:///G:/code/django-chinese-doc/build/html/ref/models/fields.html#django.db.models.ForeignKey&quot;&gt;&lt;code class=&quot;xref py py-class docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;ForeignKey&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; 字段使用这个方法。若要更新一个非关联字段，只需提供一个新的常数值。 若要更新 &lt;a class=&quot;reference internal&quot; title=&quot;django.db.models.ForeignKey&quot; href=&quot;file:///G:/code/django-chinese-doc/build/html/ref/models/fields.html#django.db.models.ForeignKey&quot;&gt;&lt;code class=&quot;xref py py-class docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;ForeignKey&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; 字段, 需设置新的值是你想指向的新的模型实例，例如:&lt;/p&gt;
&lt;div class=&quot;highlight-default&quot; readability=&quot;6.5&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;8&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Blog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;br/&gt;&lt;/span&gt;&lt;span class=&quot;go&quot;&gt;# 修改所有的 Entry，使它们属于这个Blog&lt;br/&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Entry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;blog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;update()&lt;/span&gt;&lt;/code&gt; 方法会立即执行并返回匹配的行数 (如果有些行的值和新值相同，返回的行数可能和被更新的行数不相等)。 更新 &lt;a class=&quot;reference internal&quot; title=&quot;django.db.models.query.QuerySet&quot; href=&quot;file:///G:/code/django-chinese-doc/build/html/ref/models/querysets.html#django.db.models.query.QuerySet&quot;&gt;&lt;code class=&quot;xref py py-class docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;QuerySet&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; 唯一的限制是它只能访问一个数据库表，也就是模型的主表。 你可以根据关联的字段过滤，但是你只能更新模型主表中的列，例如:&lt;/p&gt;
&lt;div class=&quot;highlight-default&quot; readability=&quot;6.5&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;8&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Blog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;br/&gt;&lt;/span&gt;&lt;span class=&quot;go&quot;&gt;# Update all the headlines belonging to this Blog.&lt;br/&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Entry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;select_related&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;blog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;headline&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Everything is the same'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;update()&lt;/span&gt;&lt;/code&gt; 方法会直接转换成一个SQL语句。它是一个批量的更新操作，而且不会调用模型的&lt;a class=&quot;reference internal&quot; title=&quot;django.db.models.Model.save&quot; href=&quot;file:///G:/code/django-chinese-doc/build/html/ref/models/instances.html#django.db.models.Model.save&quot;&gt;&lt;code class=&quot;xref py py-meth docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;save()&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; 方法, 或者触发 &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;pre_save&lt;/span&gt;&lt;/code&gt; 和 &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;post_save&lt;/span&gt;&lt;/code&gt; 信号(调用 &lt;a class=&quot;reference internal&quot; title=&quot;django.db.models.Model.save&quot; href=&quot;file:///G:/code/django-chinese-doc/build/html/ref/models/instances.html#django.db.models.Model.save&quot;&gt;&lt;code class=&quot;xref py py-meth docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;save()&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; 方法产生), 或者遵从 &lt;a class=&quot;reference internal&quot; title=&quot;django.db.models.DateField.auto_now&quot; href=&quot;file:///G:/code/django-chinese-doc/build/html/ref/models/fields.html#django.db.models.DateField.auto_now&quot;&gt;&lt;code class=&quot;xref py py-attr docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;auto_now&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; 选项。 如果想保存 &lt;a class=&quot;reference internal&quot; title=&quot;django.db.models.query.QuerySet&quot; href=&quot;file:///G:/code/django-chinese-doc/build/html/ref/models/querysets.html#django.db.models.query.QuerySet&quot;&gt;&lt;code class=&quot;xref py py-class docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;QuerySet&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; 中的每个条目并确保每个实例的 &lt;a class=&quot;reference internal&quot; title=&quot;django.db.models.Model.save&quot; href=&quot;file:///G:/code/django-chinese-doc/build/html/ref/models/instances.html#django.db.models.Model.save&quot;&gt;&lt;code class=&quot;xref py py-meth docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;save()&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; 方法都被调用， 不需要使用任何特殊的函数来处理。只需要迭代调用它们 的 &lt;a class=&quot;reference internal&quot; title=&quot;django.db.models.Model.save&quot; href=&quot;file:///G:/code/django-chinese-doc/build/html/ref/models/instances.html#django.db.models.Model.save&quot;&gt;&lt;code class=&quot;xref py py-meth docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;save()&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; 方法:&lt;/p&gt;
&lt;div class=&quot;highlight-default&quot; readability=&quot;6&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;my_queryset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;br/&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;    item&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;调用update也可以使用 &lt;a class=&quot;reference internal&quot; title=&quot;django.db.models.F&quot; href=&quot;file:///G:/code/django-chinese-doc/build/html/ref/models/expressions.html#django.db.models.F&quot;&gt;&lt;code class=&quot;xref py py-class docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;F&lt;/span&gt; &lt;span class=&quot;pre&quot;&gt;表达式&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; 来根据模型中的一个字段更新另外一个字段。 这种在当前值的基础上加另一个值时特别有用。例如Blog中每个Entry的pingback个数:&lt;/p&gt;
&lt;div class=&quot;highlight-default&quot; readability=&quot;6&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Entry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n_pingbacks&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'n_pingbacks'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;但是, 和filter和exclude子句中的 &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;F()&lt;/span&gt;&lt;/code&gt; 对象不同，在update中不可以使用 &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;F()&lt;/span&gt;&lt;/code&gt; 对象引入join – 只可以引用正在更新的模型的字段。如果使用 &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;F()&lt;/span&gt;&lt;/code&gt; 对象引入了join，将引发一个 &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;FieldError&lt;/span&gt;&lt;/code&gt; 错误:&lt;/p&gt;
&lt;div class=&quot;highlight-default&quot; readability=&quot;6&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;c1&quot;&gt;# This will raise a FieldError&lt;br/&gt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Entry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;headline&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'blog__name'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;sql&quot; class=&quot;section&quot; readability=&quot;12.260393873085&quot;&gt;
&lt;h2&gt;使用原始 SQL&lt;/h2&gt;
&lt;p&gt;如果你发现自己需要编写一个对非常复杂的SQL查询(Django API不好实现)，那么你就可以手动写SQL了。 Django有几个选择来编写原始的SQL查询;参见 &lt;a class=&quot;reference internal&quot; href=&quot;file:///G:/code/django-chinese-doc/build/html/topics/db/sql.html&quot;&gt;Performing raw SQL queries&lt;/a&gt; 。&lt;/p&gt;
&lt;p&gt;最后，值得注意的是Django 的数据库层只是数据库的一个接口。你可以利用其它工具、编程语言或数据库框架来访问数据库； 你的数据库并不需要迎合django的任何东西。&lt;/p&gt;
&lt;/div&gt;
</description>
<pubDate>Sat, 07 Oct 2017 07:05:00 +0000</pubDate>
<dc:creator>j_hao104</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/jhao/p/7634783.html</dc:identifier>
</item>
<item>
<title>简单又炫酷的two.js 二维动画教程 - 骚楠</title>
<link>http://www.cnblogs.com/lnzixin/p/7627171.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/lnzixin/p/7627171.html</guid>
<description>&lt;blockquote readability=&quot;9&quot;&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;  前  言&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong class=&quot;135brush&quot; data-brushtype=&quot;text&quot;&gt;S     N&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　今天呢给大家介绍一个小js框架，Two.JS。其实在自己学习的过程中并没有找到合适的教程，所以我这种学习延迟的同学是有一定难度的，然后准备给大家整理一份，简单易懂的小教程。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;  来吧！！&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;让我们打开TWO.JS这个二维空间之门。&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1205872/201710/1205872-20171004101115302-2000977667.gif&quot; alt=&quot;&quot; width=&quot;510&quot; height=&quot;403&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　　　　　　　　　　　　　 (图1-1)&lt;/p&gt;
&lt;h2&gt;&lt;span&gt;&lt;span class=&quot;autonum&quot; title=&quot;&quot; data-original-title=&quot;&quot;&gt; 1-1&lt;/span&gt;&lt;span&gt;&lt;strong class=&quot;135brush&quot; data-brushtype=&quot;text&quot;&gt;简介&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;Two.js 是二维画图脚本，它的最大优点是支持 svg , canvas , webGL不同种类的技术。&lt;br/&gt;（svg：SVG,简单来说就是矢量图，一种使用XML技术描述二维图形的语言。)&lt;br/&gt; ( canvas：HTML5 &amp;lt;canvas&amp;gt; 元素用于图形的绘制，通过脚本 (通常是JavaScript)来完成.)&lt;br/&gt; (  webGL：&lt;span&gt;&lt;span&gt;一项允许开发人员在浏览器里操纵GPU来显示图形的技术。让我们一起走进WebGL的世界。&lt;/span&gt;&lt;/span&gt;&lt;span&gt;）&lt;/span&gt;&lt;br/&gt;Two.js 有一个内置的动画循环，可搭配其他动画库， 包含可伸缩矢量图形解释器。使平面形状和动画的创建更方便，更简洁。&lt;/p&gt;
&lt;div readability=&quot;14&quot;&gt;
&lt;p&gt;在Two.js中和Canvas、SVG都&lt;span&gt;不同的&lt;/span&gt;有这么几个地方：&lt;/p&gt;
&lt;p&gt;　　① Two.js中所有的旋转都是以自己为中心&lt;/p&gt;
&lt;p&gt;　　② Two.js中的旋转不会累加&lt;/p&gt;
&lt;p&gt;　　③ Two.js中不使用定时器，使用Two.play()方法，类似于Flash动画（但它的底层是有定时器的，该方法每秒钟调用60次two.update()方法）&lt;/p&gt;
&lt;/div&gt;
&lt;div readability=&quot;31&quot;&gt;Two.js的特性：
&lt;p&gt;1、 绘制矢量图形 -受平面运动图形的启发,two.js更偏向于制作平面运动图形，所以它不支持文本和图片。&lt;/p&gt;
&lt;p&gt;2 、场景图 -基于对象。创建一个two对象,可以随意的操作该对象。&lt;/p&gt;
&lt;p&gt;3 、动画效果 - two.js本身带有自己的动画效果库，也可以和其它的动画效果库合作实现复杂的动画效果。&lt;/p&gt;
&lt;p&gt;4 、支持SVG - 它可以创建可伸缩的矢量图形，扩展性强，可以和Adobe的svg工具结合画图。&lt;/p&gt;
&lt;p&gt;好了不多说了！ 当然引入Two.js的文件是必不可少的，那下面就是 ↓&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1205872/201710/1205872-20171004131202365-2076023386.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;！！！引入Two.js后在Console中输入Two可查询是否引入成功。（如下图 ↓）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1205872/201710/1205872-20171006202200708-1841208737.gif&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;two.js下载地址就分享给大家：https://two.js.org/  （虽然你们在网上也能找的到的，但不是还是为了大家的方便嘛！）&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1205872/201710/1205872-20171004131413661-503312721.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;当然我是用的浏览器的翻译，像我这种看英文就跟就看BUG一样的，怎么都得都得依靠外力。&lt;/p&gt;
&lt;p&gt;我想大家对Two.js也是有了一定的了解了，那么我也就废话不多说了。咱们一起看看Two.js的神奇之处吧。&lt;/p&gt;
&lt;/div&gt;
&lt;h2&gt;&lt;span&gt;&lt;span class=&quot;autonum&quot; title=&quot;&quot; data-original-title=&quot;&quot;&gt;2-1&lt;/span&gt;&lt;span&gt;&lt;strong class=&quot;135brush&quot; data-brushtype=&quot;text&quot;&gt;绘制二维空间创建图形&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1205872/201710/1205872-20171006204224755-250534975.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;div readability=&quot;14&quot;&gt;
&lt;h4 class=&quot;135brush&quot;&gt;创建图形代码：&lt;/h4&gt;

&lt;ul class=&quot;documentation&quot;&gt;&lt;li class=&quot;title&quot;&gt;
&lt;h3&gt;&lt;span&gt;&lt;span&gt;Two.Path&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;/li&gt;
&lt;li class=&quot;title&quot;&gt;
&lt;h3&gt;&lt;span&gt;&lt;span&gt;这是在two.js中创建所有可绘制形状的基类。&lt;/span&gt;&lt;span&gt;除非指定的方法返回其&lt;/span&gt;&lt;/span&gt;&lt;code&gt;Two.Path&lt;/code&gt;&lt;span&gt;&lt;span&gt;链接目的的&lt;/span&gt;&lt;span&gt;实例&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
&amp;lt;body&amp;gt;
    &amp;lt;!--创建一个div作为一个选区 也就是svg 我就是介么理解地--&amp;gt;
    &amp;lt;div id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;draw-shapes&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
                        
    &amp;lt;/div&amp;gt;
        
        
        
    &amp;lt;script type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text/javascript&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
         
    &lt;span&gt;var&lt;/span&gt; elem = document.getElementById(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;draw-shapes&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;);&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;原生的JS代码 取到你所创建的Div&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;var&lt;/span&gt; &lt;span&gt;params&lt;/span&gt; = { width: &lt;span&gt;400&lt;/span&gt;, height: &lt;span&gt;400&lt;/span&gt;}; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置二维空间的宽高&lt;/span&gt;
    &lt;span&gt;var&lt;/span&gt; two = &lt;span&gt;new&lt;/span&gt; Two(&lt;span&gt;params&lt;/span&gt;).appendTo(elem); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;新建一个在div中的二维空间&lt;/span&gt;
        
        
    &lt;span&gt;var&lt;/span&gt; circle = two.makeCircle(&lt;span&gt;100&lt;/span&gt;, &lt;span&gt;200&lt;/span&gt;, &lt;span&gt;45&lt;/span&gt;); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 创建圆形（x坐标，y坐标，半径）&lt;/span&gt;
    &lt;span&gt;var&lt;/span&gt; star = two.makeStar(&lt;span&gt;245&lt;/span&gt;, &lt;span&gt;200&lt;/span&gt;, &lt;span&gt;65&lt;/span&gt;,&lt;span&gt;30&lt;/span&gt;,&lt;span&gt;5&lt;/span&gt;);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;创建五角星（x坐标，y坐标，内半径，外半径，几角星） 

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 设置不同的样式属性:&lt;/span&gt;
    circle.fill = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;#CCD0D5&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;;  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 填充色&lt;/span&gt;
    circle.stroke = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;#D3C294&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 边线颜色&lt;/span&gt;
    circle.linewidth = &lt;span&gt;5&lt;/span&gt;;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 边线的宽度&lt;/span&gt;
&lt;span&gt;    
    star.fill &lt;/span&gt;= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;#FFD31C&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;填充色&lt;/span&gt;
    star.opacity = &lt;span&gt;0.5&lt;/span&gt;;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;透明度&lt;/span&gt;
    star.noStroke();&lt;span&gt;//&lt;/span&gt;&lt;span&gt;去掉边线&lt;/span&gt;
    two.update();&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 将生成的空间，图形投射到网页上，&lt;/span&gt;
    
    &amp;lt;/script&amp;gt;
    &amp;lt;/body&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt; 下图是给大家简单整理的创建图形的一些属性，可以每个都试试还是蛮有意思。↓&lt;span&gt;↓&lt;/span&gt;&lt;span&gt;↓&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;img src=&quot;http://images2017.cnblogs.com/blog/1205872/201710/1205872-20171006210358583-763978346.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;h2&gt;&lt;span&gt;&lt;span class=&quot;autonum&quot; title=&quot;&quot; data-original-title=&quot;&quot;&gt;2-2&lt;/span&gt;&lt;span&gt;&lt;strong class=&quot;135brush&quot; data-brushtype=&quot;text&quot;&gt;组的建立与作用&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/1205872/201710/1205872-20171007120632771-1851864974.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;div readability=&quot;16&quot;&gt;
&lt;h4 class=&quot;135brush&quot;&gt;组的创建与作用代码：&lt;/h4&gt;
&lt;p&gt;&lt;span&gt;　　&lt;span&gt;&lt;span&gt;Two.Group&lt;/span&gt;&lt;/span&gt;，就是吧两个图形和并到一个图形，进行统一的设置啊什么的。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; group = two.makeGroup(circle, star);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;下面设置的样式与Two.Path里面的差不多  只不过多了个旋转，把两个图形左右调换个位置，请看注释，自我感觉注释地比较清楚，不理解呢请去Two.js网站对比理解。。。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; group =&lt;span&gt; two.makeGroup(circle, star);
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;组可以将数个图形合并到一个组中，一个组可以设置相同的属性与效果    &lt;/span&gt;
    group.translation.&lt;span&gt;set&lt;/span&gt;(two.width /&lt;span&gt;2&lt;/span&gt;, two.height /&lt;span&gt;2&lt;/span&gt;&lt;span&gt;);
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;让一个组内所有的形状位移，使中心保持在二维空间的什么位置.&lt;/span&gt;
    group.rotation = Math.PI;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;以组中心旋转默认值180。&lt;/span&gt;
    group.scale =&lt;span&gt;0.75&lt;/span&gt;;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;统一设置缩放（0——1）       &lt;/span&gt;
    group.linewidth = &lt;span&gt;7&lt;/span&gt;;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果有边线的统一设置线宽&lt;/span&gt;
    group.opacity = &lt;span&gt;1&lt;/span&gt;; &lt;span&gt;//&lt;span&gt;统一&lt;/span&gt;&lt;/span&gt;&lt;span&gt;透明度&lt;span&gt;（0——1）&lt;/span&gt;&lt;/span&gt;
     
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;h2&gt;&lt;span&gt;&lt;span class=&quot;autonum&quot; title=&quot;&quot; data-original-title=&quot;&quot;&gt;3-1&lt;/span&gt;&lt;span&gt;&lt;strong class=&quot;135brush&quot; data-brushtype=&quot;text&quot;&gt;创建动画(闪烁）&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1205872/201710/1205872-20171007123418880-399872953.gif&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;div readability=&quot;16.5&quot;&gt;
&lt;h4 class=&quot;135brush&quot;&gt;闪烁动画代码：&lt;/h4&gt;
&lt;p&gt;&lt;span&gt;　&lt;span&gt;bind可以绑定一个函数来在函数中表达动画属性。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　&lt;span&gt;.play() 启动动画&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
 two.bind(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;update&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, function(frameCount) {
&lt;/pre&gt;
&lt;pre&gt;
&lt;span&gt;　　//&lt;span&gt; 两个参数，第一个参数是string格式，表示要监听的事件，第二个参数是一个函数,函数中的参数为帧数&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;span&gt;　　　　 }).play();  &lt;span&gt;//&lt;span&gt; 最后.play();启动动画;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;↓ 闪烁代码 。（多多的尝试，就会有很多意想不到的动画诞生）&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
         two.bind(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;update&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, function(frameCount) {
          &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 代码的意思是每调用一次，执行一次two.update();  帧数为每秒60次即每秒钟执行60次&lt;/span&gt;
               
              &lt;span&gt;if&lt;/span&gt; ( group.opacity &amp;gt; &lt;span&gt;0.9999&lt;/span&gt;&lt;span&gt;) {
&lt;/span&gt;
               group.opacity =&lt;span&gt;0&lt;/span&gt;&lt;span&gt;;&lt;span&gt;//&lt;span&gt;使透明度变成0，就是初始位置&lt;/span&gt;&lt;/span&gt;
          }
          
　　　　　　&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置时间与动画变化的属性关联方程式&lt;/span&gt;
          &lt;span&gt;var&lt;/span&gt; t = (&lt;span&gt;1&lt;/span&gt; - group.opacity) * &lt;span&gt;0.5&lt;/span&gt;;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;声明一个t变量，如果透明度可以到1，time会变成0&lt;/span&gt;
          group.opacity += t;&lt;br/&gt;&lt;span&gt;　　　　　　//&lt;/span&gt;&lt;span&gt;使透明度不断+=time，第一个关系式会使time减小，所以透明度的增加速度会一点一点减慢。假设透明度可以到1，那么透明度会停止增加
         &lt;/span&gt;&lt;span&gt;                      
        }).play();  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 最后.play();启动动画;&lt;/span&gt;
       
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;h2&gt;&lt;span&gt;&lt;span class=&quot;autonum&quot; title=&quot;&quot; data-original-title=&quot;&quot;&gt;3-1&lt;/span&gt;&lt;span&gt;&lt;strong class=&quot;135brush&quot; data-brushtype=&quot;text&quot;&gt;缩放旋转动画&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1205872/201710/1205872-20171007131913380-869651036.gif&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;div readability=&quot;24&quot;&gt;
&lt;h4 class=&quot;135brush&quot;&gt;缩放旋转动画代码：&lt;/h4&gt;
&lt;p&gt;&lt;span&gt;　&lt;span&gt;注意：创建动画之后要调整两个图形的 x、y 的位置，不然会出现不同的动画效果呢。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;46&quot;&gt;
&lt;pre&gt;
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
    &amp;lt;head&amp;gt;
        &amp;lt;meta charset=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;UTF-8&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
        &amp;lt;title&amp;gt;&amp;lt;/title&amp;gt;
        &amp;lt;style type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text/css&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;
            body{
                background&lt;/span&gt;-color: #&lt;span&gt;000000&lt;/span&gt;&lt;span&gt;;
            }
            svg{
                background&lt;/span&gt;-&lt;span&gt;color: #FEF1F2;
            }
        &lt;/span&gt;&amp;lt;/style&amp;gt;
        &amp;lt;script type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text/javascript&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; src=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;js/two.JS.js&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &amp;gt;&amp;lt;/script&amp;gt;

&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
    &amp;lt;!--创建一个div作为一个选区--&amp;gt;
    &amp;lt;div id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;draw-shapes&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
            
            
    &amp;lt;/div&amp;gt;
        
        
        
    &amp;lt;script type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text/javascript&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;         
    &lt;span&gt;var&lt;/span&gt; elem = document.getElementById(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;draw-shapes&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;);&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;原生的JS代码 取到你所创建的Div&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;var&lt;/span&gt; &lt;span&gt;params&lt;/span&gt; = { width: &lt;span&gt;400&lt;/span&gt;, height: &lt;span&gt;400&lt;/span&gt;}; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置二维空间的宽高&lt;/span&gt;
    &lt;span&gt;var&lt;/span&gt; two = &lt;span&gt;new&lt;/span&gt; Two(&lt;span&gt;params&lt;/span&gt;).appendTo(elem); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;新建一个在div中的二维空间    &lt;/span&gt;
    &lt;span&gt;var&lt;/span&gt; circle = two.makeCircle(-&lt;span&gt;72&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;50&lt;/span&gt;); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 创建圆形（x坐标，y坐标，半径）&lt;/span&gt;
    &lt;span&gt;var&lt;/span&gt; star = two.makeStar(&lt;span&gt;75&lt;/span&gt;,&lt;span&gt;0&lt;/span&gt;, &lt;span&gt;75&lt;/span&gt;,&lt;span&gt;35&lt;/span&gt;,&lt;span&gt;5&lt;/span&gt;);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;创建五角星（x坐标，y坐标，内半径，外半径，几角星） 

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 设置不同的样式属性:&lt;/span&gt;
    circle.fill = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;#CCD0D5&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;;  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;fill 填充色&lt;/span&gt;
    circle.stroke = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;#D3C294&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 边线颜色&lt;/span&gt;
    circle.linewidth = &lt;span&gt;5&lt;/span&gt;;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 边线的宽度&lt;/span&gt;
&lt;span&gt;    
    star.fill &lt;/span&gt;= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;#FFD31C&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
    star.opacity &lt;/span&gt;= &lt;span&gt;0.5&lt;/span&gt;;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;透明度&lt;/span&gt;
    star.noStroke();&lt;span&gt;//&lt;/span&gt;&lt;span&gt;去掉边线&lt;/span&gt;
    
    &lt;span&gt;var&lt;/span&gt; group =&lt;span&gt; two.makeGroup(circle, star);
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;组可以将数个图形合并到一个组中，一个组可以设置相同的属性与效果    &lt;/span&gt;
    group.translation.&lt;span&gt;set&lt;/span&gt;(two.width /&lt;span&gt;2&lt;/span&gt;, two.height /&lt;span&gt;2&lt;/span&gt;&lt;span&gt;);
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;让一个组内所有的形状位移，使中心保持在二维空间的什么位置.&lt;/span&gt;
    group.rotation = Math.PI;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;以组中心旋转默认值180。&lt;/span&gt;
    group.scale =&lt;span&gt;0&lt;/span&gt;;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;统一设置缩放（1——0）       &lt;/span&gt;
     group.linewidth = &lt;span&gt;7&lt;/span&gt;;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果有边线的统一设置线宽&lt;/span&gt;
     group.opacity = &lt;span&gt;1&lt;/span&gt;; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;透明度&lt;/span&gt;
    two.update();&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 将生成的空间，图形投射到网页上。
    
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; bind可以绑定一个函数来在函数中表达动画属性。
    
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 两个参数，第一个参数是string格式，表示要监听的事件，第二个参数是一个函数,函数中的参数为帧数&lt;/span&gt;
         two.bind(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;update&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, function(frameCount) {
             
          &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 代码的意思是每调用一次，执行一次two.update();  帧数为每秒60次即每秒钟执行60次 &lt;/span&gt;
              &lt;span&gt;if&lt;/span&gt; (group.scale &amp;gt; &lt;span&gt;0.9999&lt;/span&gt;&lt;span&gt;) {
               group.scale &lt;/span&gt;= group.rotation = &lt;span&gt;0&lt;/span&gt;
               &lt;span&gt;//&lt;/span&gt;&lt;span&gt;使缩放与回转变成0，就是初始位置&lt;/span&gt;
&lt;span&gt;          }
          
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置时间与动画变化的属性关联方程式&lt;/span&gt;
          &lt;span&gt;var&lt;/span&gt; t = (&lt;span&gt;1&lt;/span&gt; - group.scale) * &lt;span&gt;0.125&lt;/span&gt;&lt;span&gt;;
          
          &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;声明一个t变量，随着缩放的增大而减小并且确定其他关系，如果缩放可以到1，time会变成0&lt;/span&gt;
&lt;span&gt;         
         group.scale &lt;/span&gt;+=&lt;span&gt; t;
         
          &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;使缩放不断+=time，由于缩放的增大，第一个关系式会使time减小，所以缩放的增加速度会一点一点减慢。假设缩放可以到1，那么缩放会停止增加&lt;/span&gt;
&lt;span&gt;         
         group.rotation &lt;/span&gt;+= t * &lt;span&gt;4&lt;/span&gt;* Math.PI;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;回转幅度不断+=time的4倍(math.pi是180度)&lt;/span&gt;
&lt;span&gt;        
          
        }).play();  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 最后.play();启动动画;&lt;/span&gt;
       
     
    &amp;lt;/script&amp;gt;
    &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span&gt;&lt;strong&gt;(图 1-1) 代码 如下：&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;&lt;div class=&quot;cnblogs_code&quot; readability=&quot;46&quot;&gt;
&lt;pre&gt;
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
    &amp;lt;head&amp;gt;
        &amp;lt;meta charset=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;UTF-8&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
        &amp;lt;title&amp;gt;&amp;lt;/title&amp;gt;
        &amp;lt;style type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text/css&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;
            body{
                background&lt;/span&gt;-color: #&lt;span&gt;000000&lt;/span&gt;&lt;span&gt;;
            }
            svg{
                background&lt;/span&gt;-&lt;span&gt;color: #FEF1F2;
            }
        &lt;/span&gt;&amp;lt;/style&amp;gt;
        &amp;lt;script type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text/javascript&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; src=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;js/two.JS.js&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &amp;gt;&amp;lt;/script&amp;gt;

&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
    &amp;lt;!--创建一个div作为一个选区--&amp;gt;
    &amp;lt;div id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;draw-shapes&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
            
            
    &amp;lt;/div&amp;gt;
        
        
        
    &amp;lt;script type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text/javascript&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;         
    &lt;span&gt;var&lt;/span&gt; elem = document.getElementById(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;draw-shapes&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;);&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;原生的JS代码 取到你所创建的Div&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;var&lt;/span&gt; &lt;span&gt;params&lt;/span&gt; = { width: &lt;span&gt;400&lt;/span&gt;, height: &lt;span&gt;400&lt;/span&gt;}; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置二维空间的宽高&lt;/span&gt;
    &lt;span&gt;var&lt;/span&gt; two = &lt;span&gt;new&lt;/span&gt; Two(&lt;span&gt;params&lt;/span&gt;).appendTo(elem); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;新建一个在div中的二维空间    &lt;/span&gt;
    &lt;span&gt;var&lt;/span&gt; circle = two.makeCircle(-&lt;span&gt;72&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;50&lt;/span&gt;); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 创建圆形（x坐标，y坐标，半径）&lt;/span&gt;
    &lt;span&gt;var&lt;/span&gt; star = two.makeStar(&lt;span&gt;75&lt;/span&gt;,&lt;span&gt;0&lt;/span&gt;, &lt;span&gt;75&lt;/span&gt;,&lt;span&gt;35&lt;/span&gt;,&lt;span&gt;5&lt;/span&gt;);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;创建五角星（x坐标，y坐标，内半径，外半径，几角星） 

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 设置不同的样式属性:&lt;/span&gt;
    circle.fill = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;#CCD0D5&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;;  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;fill 填充色&lt;/span&gt;
    circle.stroke = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;#D3C294&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 边线颜色&lt;/span&gt;
    circle.linewidth = &lt;span&gt;5&lt;/span&gt;;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 边线的宽度&lt;/span&gt;
&lt;span&gt;    
    star.fill &lt;/span&gt;= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;#FFD31C&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
    star.opacity &lt;/span&gt;= &lt;span&gt;0.5&lt;/span&gt;;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;透明度&lt;/span&gt;
    star.noStroke();&lt;span&gt;//&lt;/span&gt;&lt;span&gt;去掉边线&lt;/span&gt;
    
    &lt;span&gt;var&lt;/span&gt; group =&lt;span&gt; two.makeGroup(circle, star);
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;组可以将数个图形合并到一个组中，一个组可以设置相同的属性与效果    &lt;/span&gt;
    group.translation.&lt;span&gt;set&lt;/span&gt;(two.width /&lt;span&gt;2&lt;/span&gt;, two.height /&lt;span&gt;2&lt;/span&gt;&lt;span&gt;);
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;让一个组内所有的形状位移，使中心保持在二维空间的什么位置.&lt;/span&gt;
    group.rotation = Math.PI;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;以组中心旋转默认值180。&lt;/span&gt;
    group.scale =&lt;span&gt;0&lt;/span&gt;;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;统一设置缩放（1——0）       &lt;/span&gt;
     group.linewidth = &lt;span&gt;7&lt;/span&gt;;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果有边线的统一设置线宽&lt;/span&gt;
     group.opacity = &lt;span&gt;1&lt;/span&gt;; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;透明度&lt;/span&gt;
    two.update();&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 将生成的空间，图形投射到网页上。
    
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; bind可以绑定一个函数来在函数中表达动画属性。
    
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 两个参数，第一个参数是string格式，表示要监听的事件，第二个参数是一个函数,函数中的参数为帧数&lt;/span&gt;
         two.bind(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;update&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, function(frameCount) {
             
          &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 代码的意思是每调用一次，执行一次two.update();  帧数为每秒60次即每秒钟执行60次 &lt;/span&gt;
              &lt;span&gt;if&lt;/span&gt; (group.scale &amp;gt; &lt;span&gt;0.9999&lt;/span&gt;&lt;span&gt;) {
               group.scale &lt;/span&gt;= group.rotation = &lt;span&gt;0&lt;/span&gt;
               &lt;span&gt;//&lt;/span&gt;&lt;span&gt;使缩放与回转变成0，就是初始位置&lt;/span&gt;
&lt;span&gt;          }
          
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置时间与动画变化的属性关联方程式&lt;/span&gt;
          &lt;span&gt;var&lt;/span&gt; t = (&lt;span&gt;1&lt;/span&gt; - group.scale) * &lt;span&gt;0.125&lt;/span&gt;&lt;span&gt;;
          
          &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;声明一个t变量，随着缩放的增大而减小并且确定其他关系，如果缩放可以到1，time会变成0&lt;/span&gt;
&lt;span&gt;         
         group.scale &lt;/span&gt;+=&lt;span&gt; t;
         
          &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;使缩放不断+=time，由于缩放的增大，第一个关系式会使time减小，所以缩放的增加速度会一点一点减慢。假设缩放可以到1，那么缩放会停止增加&lt;/span&gt;
&lt;span&gt;         
         group.rotation &lt;/span&gt;+= t * &lt;span&gt;4&lt;/span&gt;* Math.PI;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;回转幅度不断+=time的4倍(math.pi是180度)&lt;/span&gt;
&lt;span&gt;        
          
        }).play();  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 最后.play();启动动画;&lt;/span&gt;
       
     
    &amp;lt;/script&amp;gt;
    &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;  后  序&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong class=&quot;135brush&quot; data-brushtype=&quot;text&quot;&gt;S     N&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
　　　　　　好啦！ Two.js就和大家学习到这了。希望给大家多少都有点帮助，主要还是多练习对吧 。&lt;br/&gt;　　　　　　　学习使我快乐，哈哈！&lt;br/&gt;　　　　　　对了，我分享的不过是简单的一点，更多呢还是要靠大家自己学习。&lt;br/&gt;　　　　　　　　　　　　不唠叨了，再见朋友们。&lt;/blockquote&gt;

</description>
<pubDate>Sat, 07 Oct 2017 06:18:00 +0000</pubDate>
<dc:creator>骚楠</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/lnzixin/p/7627171.html</dc:identifier>
</item>
<item>
<title>Day4 闭包、装饰器decorator、迭代器与生成器、面向过程编程、三元表达式、列表解析与生成器表达式、序列化与反序列化 - 思维无界限</title>
<link>http://www.cnblogs.com/happy-king/p/7589328.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/happy-king/p/7589328.html</guid>
<description>&lt;h2&gt;一、装饰器&lt;/h2&gt;
&lt;h3&gt;一、装饰器的知识储备&lt;/h3&gt;
&lt;h4&gt;　　1、可变长参数  ：*args和**kwargs&lt;/h4&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;49&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; index(name,age):
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;     &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(name,age)
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; 
&lt;span&gt;4&lt;/span&gt; &lt;span&gt;def&lt;/span&gt; wrapper(*args,**&lt;span&gt;kwargs):
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt;即args=(1,2,3,4,5),kwargs={'x':1,'y':3}&lt;/span&gt;
&lt;span&gt;6&lt;/span&gt;     index(*args,**&lt;span&gt;kwargs)
&lt;/span&gt;&lt;span&gt;7&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt;index(1,2,3,4,5,y=2,x=5)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;　　2、函数对象：被当做数据传递&lt;/h4&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
    1&lt;span&gt;、函数可以当做参数传给另外一个函数
    &lt;/span&gt;2&lt;span&gt;、一个函数的返回值，也可以是一个函数（打破函数的层级关系）
        &lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; f1():
            &lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; f2():
                &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;f2&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; f2  &lt;span&gt;#&lt;/span&gt;&lt;span&gt;#打破函数的层级关系&lt;/span&gt;
        f=&lt;span&gt;f1()
        f()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;　　3、名称空间和作用域&lt;/h4&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
    1&lt;span&gt;、名称空间：
        分类：分三种
            内置名称空间：Python解释器启动则生效，关闭时失效
            全局名称空间：执行Python文件时生效

            内置名称空间：调用函数时，临时生效；函数调用结束失效
         加载顺序：先内置，在全局，最后有可能产生局部
         查找名字的顺序：先局部，再全局，最后内置
    &lt;/span&gt;2&lt;span&gt;、作用域
        分类：分两种
            全局作用域：全局存活，全局有效
            局部作用域：临时存活，局部有效
    强调：作用关系在函数定义阶段已经固定，与调用位置无关&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;二、闭包函数&lt;/h3&gt;
&lt;h4&gt;　　1、定义&lt;/h4&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
1、定义在函数内部的函数
2、包含对外部作用域名字的引用，而不是对全局作用域名字的引用
   那么该内部函数称之为闭包函数
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;　　2、实例&lt;/h4&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;31.5&quot;&gt;&lt;img id=&quot;code_img_closed_f4e01178-7764-4900-90e1-8ae5182a0bb4&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_f4e01178-7764-4900-90e1-8ae5182a0bb4&quot; class=&quot;code_img_opened&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_f4e01178-7764-4900-90e1-8ae5182a0bb4&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;58&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; x = 1
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; f1():
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;     x=111111111111
&lt;span&gt; 4&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt; f2():  &lt;span&gt;#&lt;/span&gt;&lt;span&gt;f2是闭关函数&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt;         &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(x)
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; f2  &lt;span&gt;#&lt;/span&gt;&lt;span&gt;#获取返回值&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt; func=&lt;span&gt;f1()
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; func()&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt; 
&lt;span&gt;10&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt;  foo():
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;     x=1988193190112131
&lt;span&gt;12&lt;/span&gt; &lt;span&gt;    func()
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; foo()
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;h4&gt;　　3、应用：延迟计算/惰性计算（爬网页）&lt;/h4&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;31.5&quot;&gt;&lt;img id=&quot;code_img_closed_f8b342a7-2d14-4f67-bbff-1f2a6c8a2b97&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_f8b342a7-2d14-4f67-bbff-1f2a6c8a2b97&quot; class=&quot;code_img_opened&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_f8b342a7-2d14-4f67-bbff-1f2a6c8a2b97&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;58&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; get(url):
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; requests.get(url).text
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; print(get('https://www.toutiao.com/'))&lt;/span&gt;
&lt;span&gt;4&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;(get(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;https://www.python.org&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;))
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;方式一&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;&lt;img id=&quot;code_img_closed_45ee2cc8-ecd7-4ca9-92c3-14cb93523e05&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_45ee2cc8-ecd7-4ca9-92c3-14cb93523e05&quot; class=&quot;code_img_opened&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_45ee2cc8-ecd7-4ca9-92c3-14cb93523e05&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;59&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;  requests  &lt;span&gt;#&lt;/span&gt;&lt;span&gt;需要pip3 install request&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; index(url):
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; url='https://www.python.org'&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt;&lt;span&gt; get():
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; requests.get(url).text
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; get
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; python_web=index(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;https://www.python.org&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; baidu_web=index(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;https://www.baidu.com&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;python_web()
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; baidu_web()
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;优化&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;p&gt;from urllib.request import urlopen&lt;br/&gt;def get(url): #url='http://www.baidu.com'&lt;br/&gt;# url='http://www.baidu.com'&lt;br/&gt;def inner():&lt;br/&gt;return urlopen(url).read()&lt;br/&gt;return inner&lt;/p&gt;
&lt;p&gt;baidu=get('http://www.baidu.com')&lt;br/&gt;print(baidu)&lt;br/&gt;res=baidu()&lt;br/&gt;baidu()&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;34&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
def index(url):
    # url='https://www.python.org'
    def warpper():
        return requests.get(url).text
    return warpper
python_web=index('https://www.python.org')
print(python_web.__closure__[0])  ##closure 闭包  ##能看到内存地址就不要使用ID
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt; 三、装饰器&lt;/h3&gt;
&lt;p&gt;装饰器就是闭包函数的一种应用场景&lt;/p&gt;
&lt;h4&gt;　　1、为何要用装饰器&lt;/h4&gt;
&lt;p&gt;开放封闭原则：对修改封闭，对扩展开放&lt;/p&gt;
&lt;h4&gt;　　2、装饰器的定义和原则&lt;/h4&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
装饰器本身可以是任意可以调用对象，被装饰的对象本身也可以是任意可调用对象
定义：本质是函数，（装饰其他函数），就是为其他函数添加附加功能
　　　在代码运行期间动态增加功能的方式，称之为“装饰器”（Decorator）。
原则：1、不能修改被装饰的函数的源代码
         2、不能修改被装饰的函数的调用方式
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;　　&lt;strong&gt;添加统计执行时间的功能&lt;/strong&gt;&lt;/h4&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;31.5&quot;&gt;&lt;img id=&quot;code_img_closed_6fa97340-3bb9-433b-8eed-397b5fc24eda&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_6fa97340-3bb9-433b-8eed-397b5fc24eda&quot; class=&quot;code_img_opened&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_6fa97340-3bb9-433b-8eed-397b5fc24eda&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;58&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; time
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; index():
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;     start=&lt;span&gt;time.time()
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;     time.sleep(3&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt;     &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;welcome to index&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt;     stop=&lt;span&gt;time.time()
&lt;/span&gt;&lt;span&gt;7&lt;/span&gt;     &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;run time is :[%s}&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; %(stop-&lt;span&gt;start))
&lt;/span&gt;&lt;span&gt;8&lt;/span&gt; index()
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;修改源代码&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_c3cd38a7-edbe-4711-892f-ea64c2efb7d1&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_c3cd38a7-edbe-4711-892f-ea64c2efb7d1&quot; class=&quot;code_img_opened&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_c3cd38a7-edbe-4711-892f-ea64c2efb7d1&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; time
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; index():
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;     time.sleep(3&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;     &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;welcome to index&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; index()&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; wrapper(func):
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;     start=&lt;span&gt;time.time()
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;    func()
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;     stop=&lt;span&gt;time.time()
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;     &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;run time is %s&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; %(stop-&lt;span&gt;start))
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;wrapper(index)  ##注意index一定不能加() ，因为使用的是内存地址&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt; index=wrapper(index)
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;不修改源代码，修改调用方式&lt;/span&gt;&lt;/div&gt;
&lt;h4&gt;　　3、装饰的定义和调用&lt;/h4&gt;
&lt;p&gt;　使用装饰器添加统计执行时间的功能，不修改原代码，不修改调用方式&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; time
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; timmer(func):
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; func=index&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt;&lt;span&gt; wrapper():
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;         start=&lt;span&gt;time.time()
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;        func()
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;         stop=&lt;span&gt;time.time()
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;         &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;run time is [%s]&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; %(stop-&lt;span&gt;start))
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; wrapper
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; 
&lt;span&gt;11&lt;/span&gt; @timmer &lt;span&gt;#&lt;/span&gt;&lt;span&gt;等价于index=timmer(index)  #@装饰器名，会将正下方函数名作为参数传给装饰器，然后重新赋值给函数名&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; index():
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;     time.sleep(3&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;     &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;welcome to index&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; index=timmer(index)  ##实践一：重新赋值，然后调用&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; index()&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt; 
&lt;span&gt;18&lt;/span&gt; @timmer &lt;span&gt;#&lt;/span&gt;&lt;span&gt;等价于home=timmer(home)&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; home():
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;     time.sleep(3&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;     &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;welcome to home&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;index()
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; home()
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;&lt;img id=&quot;code_img_closed_41c9af01-bd88-41cc-85a6-413e7bedc442&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_41c9af01-bd88-41cc-85a6-413e7bedc442&quot; class=&quot;code_img_opened&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_41c9af01-bd88-41cc-85a6-413e7bedc442&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;63&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;!/usr/bin/env python&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; -*- coding:utf-8 -*-&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; __author__ = &quot;wzs&quot;&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;2017/9/23&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;#有参和无参函数都能使用装饰器(*args,**kwargs)&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; time
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; timmer(func):
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; func=index&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt; wrapper(*args,**&lt;span&gt;kwargs):
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;         start=&lt;span&gt;time.time()
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;         res=func(*args,**kwargs) &lt;span&gt;#&lt;/span&gt;&lt;span&gt;有无返回值，均可处理:有返回值，是相应的返回值，没有返回值是None&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt;         stop=&lt;span&gt;time.time()
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;         &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;run time is %s&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; %(stop-&lt;span&gt;start))
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; res &lt;span&gt;#&lt;/span&gt;&lt;span&gt;#有无返回值，均可处理&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; wrapper
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; @timmer &lt;span&gt;#&lt;/span&gt;&lt;span&gt;等价于index=timmer(index)  #@装饰器名，会将下面函数名作为参数传给装饰器，然后重新赋值给函数名&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; index():
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;     time.sleep(3&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;     &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;welcome to index&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; 123
&lt;span&gt;21&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; index()&lt;/span&gt;
&lt;span&gt;22&lt;/span&gt; 
&lt;span&gt;23&lt;/span&gt; @timmer &lt;span&gt;#&lt;/span&gt;&lt;span&gt;等价于home=timmer(home)&lt;/span&gt;
&lt;span&gt;24&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; home(name):
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;     time.sleep(3&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;     &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;welcome to home&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;有返回值&lt;/span&gt;
&lt;span&gt;28&lt;/span&gt; res=index()  &lt;span&gt;#&lt;/span&gt;&lt;span&gt;即res=wrapper&lt;/span&gt;
&lt;span&gt;29&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(res)
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; home(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;wzs&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)  &lt;span&gt;#&lt;/span&gt;&lt;span&gt;即wrapper('wzs')&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;被装饰对象有参数，参数类型和数量不固定&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;&lt;img id=&quot;code_img_closed_432a6a2e-94ce-44f0-9fd3-c1c8f7b29027&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_432a6a2e-94ce-44f0-9fd3-c1c8f7b29027&quot; class=&quot;code_img_opened&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_432a6a2e-94ce-44f0-9fd3-c1c8f7b29027&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;67&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;!/usr/bin/env python&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; -*- coding:utf-8 -*-&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; __author__ = &quot;wzs&quot;&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;2017/9/23&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;#eval 将字符串里面的命令提取出来，执行一下&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;字符串转成字典&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; dic='{&quot;name&quot;:&quot;alex&quot;,&quot;password&quot;:&quot;alex123&quot;}'&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; d=eval(dic)&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; print(type(d))&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt; 
&lt;span&gt;11&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;#从文件取用户信息进行认证&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; with open('db.txt',encoding='utf-8') as f:&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;     data=f.read()&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;     dic=eval(data)&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;     print(dic['name'])&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt; 
&lt;span&gt;17&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;#保存用户登录状态&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt; current_user={&lt;span&gt;'&lt;/span&gt;&lt;span&gt;user&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:None,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;current_status&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:False}
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; auth(func):
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt; wrapper(*args,**&lt;span&gt;kwargs):
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; current_user[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;user&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] &lt;span&gt;and&lt;/span&gt; current_user[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;current_status&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]:
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; func(*args,**&lt;span&gt;kwargs)
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;         name=input(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;please input your name:&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;).strip()
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;         password=input(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;please input your password:&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;).strip()
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; 
&lt;span&gt;26&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt;#用户的认证来源有多种：文件，数据库等等&lt;/span&gt;
&lt;span&gt;27&lt;/span&gt;         with open(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;db.txt&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, encoding=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;utf-8&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;) as f:
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;             user_dic =&lt;span&gt; eval(f.read())
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; if name == user_dic['name'] and password == user_dic['password']:&lt;/span&gt;
&lt;span&gt;30&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; name &lt;span&gt;in&lt;/span&gt; user_dic &lt;span&gt;and&lt;/span&gt; password ==&lt;span&gt; user_dic[name]:
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;             res=func(*args,**kwargs) &lt;span&gt;#&lt;/span&gt;&lt;span&gt;有无返回值，均可处理:有返回值，是相应的返回值，没有返回值是None&lt;/span&gt;
&lt;span&gt;32&lt;/span&gt;             current_user[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;user&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] = name &lt;span&gt;#&lt;/span&gt;&lt;span&gt;#登录成功记录下来&lt;/span&gt;
&lt;span&gt;33&lt;/span&gt;             current_user[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;current_status&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] ==&lt;span&gt; True
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; res &lt;span&gt;#&lt;/span&gt;&lt;span&gt;#有无返回值，均可处理&lt;/span&gt;
&lt;span&gt;35&lt;/span&gt;         &lt;span&gt;else&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt;             &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;user or password is wrong&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; wrapper
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt; @auth &lt;span&gt;#&lt;/span&gt;&lt;span&gt;等价于index=timmer(index)  #@装饰器名，会将下面函数名作为参数传给装饰器，然后重新赋值给函数名&lt;/span&gt;
&lt;span&gt;39&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; index():
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt;     &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;welcome to index&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; 123
&lt;span&gt;42&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; index()&lt;/span&gt;
&lt;span&gt;43&lt;/span&gt; 
&lt;span&gt;44&lt;/span&gt; @auth &lt;span&gt;#&lt;/span&gt;&lt;span&gt;等价于home=timmer(home)&lt;/span&gt;
&lt;span&gt;45&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; home(name):
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt;     &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;welcome to home&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;有返回值&lt;/span&gt;
&lt;span&gt;48&lt;/span&gt; res=index()  &lt;span&gt;#&lt;/span&gt;&lt;span&gt;即res=wrapper&lt;/span&gt;
&lt;span&gt;49&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;(res)
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;有认证功能的装饰器&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;&lt;img id=&quot;code_img_closed_f324c5b3-5dcc-422a-83f6-739848d25ed0&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_f324c5b3-5dcc-422a-83f6-739848d25ed0&quot; class=&quot;code_img_opened&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_f324c5b3-5dcc-422a-83f6-739848d25ed0&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;65&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;!/usr/bin/env python&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; -*- coding:utf-8 -*-&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; __author__ = &quot;wzs&quot;&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;2017/9/23&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt; 
&lt;span&gt; 6&lt;/span&gt; current_user={&lt;span&gt;'&lt;/span&gt;&lt;span&gt;user&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:None,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;current_status&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:False}
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;def&lt;/span&gt; auth(auth_type=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;file&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;): &lt;span&gt;#&lt;/span&gt;&lt;span&gt;#给装饰器传参数，最多三层(已经满足所有需求，一般情况下，直接调用别人的有参装饰器)&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt;&lt;span&gt; deco(func):
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;         &lt;span&gt;def&lt;/span&gt; wrapper(*args,**&lt;span&gt;kwargs):
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; auth_type == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;file&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt; current_user[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;user&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]:
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;                     &lt;span&gt;return&lt;/span&gt; func(*args,**&lt;span&gt;kwargs)
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;                 name=input(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;please input your name:&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;).strip()
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;                 password=input(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;please input your password:&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;).strip()
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; 
&lt;span&gt;16&lt;/span&gt;                 &lt;span&gt;#&lt;/span&gt;&lt;span&gt;#用户的认证来源有多种：文件，数据库等等&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt;                 with open(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;db.txt&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, encoding=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;utf-8&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;) as f:
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;                     user_dic =&lt;span&gt; eval(f.read())
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;                 &lt;span&gt;#&lt;/span&gt;&lt;span&gt; if name == user_dic['name'] and password == user_dic['password']:&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt; name &lt;span&gt;in&lt;/span&gt; user_dic &lt;span&gt;and&lt;/span&gt; password ==&lt;span&gt; user_dic[name]:
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;                     res=func(*args,**kwargs) &lt;span&gt;#&lt;/span&gt;&lt;span&gt;有无返回值，均可处理:有返回值，是相应的返回值，没有返回值是None&lt;/span&gt;
&lt;span&gt;22&lt;/span&gt;                     current_user[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;user&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] = name &lt;span&gt;#&lt;/span&gt;&lt;span&gt;#登录成功记录下来&lt;/span&gt;
&lt;span&gt;23&lt;/span&gt;                     current_user[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;current_status&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] =&lt;span&gt; True
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;                     &lt;span&gt;return&lt;/span&gt; res &lt;span&gt;#&lt;/span&gt;&lt;span&gt;#有无返回值，均可处理&lt;/span&gt;
&lt;span&gt;25&lt;/span&gt;                 &lt;span&gt;else&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;                     &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;user or password is wrong&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;             &lt;span&gt;elif&lt;/span&gt; auth_type == &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;mysql&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;                 &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;mysql&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;             &lt;span&gt;elif&lt;/span&gt; auth_type == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;ldap&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;                 &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;ldap&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;             &lt;span&gt;else&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;                 &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;not valid auth_type&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; wrapper
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; deco
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt; @auth(auth_type=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;mysql&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)&lt;span&gt;#&lt;/span&gt;&lt;span&gt;等价于@deco #index=deco(index)  #index=inner #@装饰器名，会将下面函数名作为参数传给装饰器，然后重新赋值给函数名&lt;/span&gt;
&lt;span&gt;36&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; index():
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt;     &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;welcome to index&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; 123
&lt;span&gt;39&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; index()&lt;/span&gt;
&lt;span&gt;40&lt;/span&gt; 
&lt;span&gt;41&lt;/span&gt; @auth(auth_type=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;file&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;) &lt;span&gt;#&lt;/span&gt;&lt;span&gt;等价于home=timmer(home)&lt;/span&gt;
&lt;span&gt;42&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; home(name):
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt;     &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;welcome to home&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;有返回值&lt;/span&gt;
&lt;span&gt;45&lt;/span&gt; res=index()  &lt;span&gt;#&lt;/span&gt;&lt;span&gt;即res=wrapper&lt;/span&gt;
&lt;span&gt;46&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(res)
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt; home()
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;有参数的装饰器&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;&lt;img id=&quot;code_img_closed_0ac90458-3dae-4561-b7d5-ef419e5595d5&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_0ac90458-3dae-4561-b7d5-ef419e5595d5&quot; class=&quot;code_img_opened&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_0ac90458-3dae-4561-b7d5-ef419e5595d5&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;65&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;!/usr/bin/env python&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; -*- coding:utf-8 -*-&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; __author__ = &quot;wzs&quot;&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;2017/9/23&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;###使用装饰器&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; time
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; functools &lt;span&gt;import&lt;/span&gt; wraps  &lt;span&gt;#&lt;/span&gt;&lt;span&gt;#引用Python自带的装饰器&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt; current_user={&lt;span&gt;'&lt;/span&gt;&lt;span&gt;user&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:None,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;current_status&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:False}
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;def&lt;/span&gt; auth(auth_type=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;file&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;):
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt;&lt;span&gt; deco(func):
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;         &lt;span&gt;def&lt;/span&gt; wrapper(*args,**&lt;span&gt;kwargs):
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; auth_type == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;file&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt; current_user[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;user&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]:
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;                     &lt;span&gt;return&lt;/span&gt; func(*args,**&lt;span&gt;kwargs)
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;                 name=input(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;please input your name:&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;).strip()
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;                 password=input(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;please input your password:&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;).strip()
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; 
&lt;span&gt;18&lt;/span&gt;                 &lt;span&gt;#&lt;/span&gt;&lt;span&gt;#用户的认证来源有多种：文件，数据库等等&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt;                 with open(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;db.txt&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, encoding=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;utf-8&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;) as f:
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;                     user_dic =&lt;span&gt; eval(f.read())
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;                 &lt;span&gt;#&lt;/span&gt;&lt;span&gt; if name == user_dic['name'] and password == user_dic['password']:&lt;/span&gt;
&lt;span&gt;22&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt; name &lt;span&gt;in&lt;/span&gt; user_dic &lt;span&gt;and&lt;/span&gt; password ==&lt;span&gt; user_dic[name]:
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;                     res=func(*args,**kwargs) &lt;span&gt;#&lt;/span&gt;&lt;span&gt;有无返回值，均可处理:有返回值，是相应的返回值，没有返回值是None&lt;/span&gt;
&lt;span&gt;24&lt;/span&gt;                     current_user[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;user&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] = name &lt;span&gt;#&lt;/span&gt;&lt;span&gt;#登录成功记录下来&lt;/span&gt;
&lt;span&gt;25&lt;/span&gt;                     current_user[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;current_status&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] =&lt;span&gt; True
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;                     &lt;span&gt;return&lt;/span&gt; res &lt;span&gt;#&lt;/span&gt;&lt;span&gt;#有无返回值，均可处理&lt;/span&gt;
&lt;span&gt;27&lt;/span&gt;                 &lt;span&gt;else&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;                     &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;user or password is wrong&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;             &lt;span&gt;elif&lt;/span&gt; auth_type == &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;mysql&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;                 &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;mysql&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;             &lt;span&gt;elif&lt;/span&gt; auth_type == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;ldap&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;                 &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;ldap&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt;             &lt;span&gt;else&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt;                 &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;not valid auth_type&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; wrapper
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; deco
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; timmer(func):
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; func=index&lt;/span&gt;
&lt;span&gt;39&lt;/span&gt;     @wraps(func)  &lt;span&gt;#&lt;/span&gt;&lt;span&gt;#利用Python的自带的装饰器（可以查到注释信息）&lt;/span&gt;
&lt;span&gt;40&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt;&lt;span&gt; wrapper():
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt;         start=&lt;span&gt;time.time()
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt; &lt;span&gt;        func()
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt;         stop=&lt;span&gt;time.time()
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt;         &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;run time is %s&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; %(stop-&lt;span&gt;start))
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; wrapper
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;#装饰器是有先后顺序的，装饰器装饰的是正下方的函数&lt;/span&gt;
&lt;span&gt;47&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;#上面装饰器先生效，下面的后生效;但是先执行下面（函数正上方的装饰器）&lt;/span&gt;
&lt;span&gt;48&lt;/span&gt; @timmer &lt;span&gt;#&lt;/span&gt;&lt;span&gt;index=timmer(wrapper)&lt;/span&gt;
&lt;span&gt;49&lt;/span&gt; @auth() &lt;span&gt;#&lt;/span&gt;&lt;span&gt; @deco #index=deco(index) #index=wrapper&lt;/span&gt;
&lt;span&gt;50&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; index():
&lt;/span&gt;&lt;span&gt;51&lt;/span&gt;     &lt;span&gt;'''&lt;/span&gt;&lt;span&gt;这是函数&lt;/span&gt;&lt;span&gt;'''&lt;/span&gt;
&lt;span&gt;52&lt;/span&gt;     time.sleep(3&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;53&lt;/span&gt;     &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;welcome to index&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;54&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; index()&lt;/span&gt;
&lt;span&gt;55&lt;/span&gt; 
&lt;span&gt;56&lt;/span&gt; @timmer &lt;span&gt;#&lt;/span&gt;&lt;span&gt;等价于home=timmer(home)&lt;/span&gt;
&lt;span&gt;57&lt;/span&gt; &lt;span&gt;@auth()
&lt;/span&gt;&lt;span&gt;58&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; home():
&lt;/span&gt;&lt;span&gt;59&lt;/span&gt;     time.sleep(3&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;60&lt;/span&gt;     &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;welcome to home&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;61&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; index()&lt;/span&gt;
&lt;span&gt;62&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; home()&lt;/span&gt;
&lt;span&gt;63&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;(index.&lt;span&gt;__doc__&lt;/span&gt;) &lt;span&gt;#&lt;/span&gt;&lt;span&gt;#加上装饰器后默认是返回None ；调用系统自带的装饰器from functools import wraps ，引用@wraps后，可以查看函数的注释信息&lt;/span&gt;
&lt;span&gt;64&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; print(help(index))  ##查看函数注释信息&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;显示被装饰对象的注释信息&lt;/span&gt;&lt;/div&gt;
&lt;p&gt; 　&lt;span&gt;　&lt;strong&gt;装饰器最多三层函数，三层几乎满足所有的需求了&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h4&gt;　　4、练习题&lt;/h4&gt;

&lt;p&gt;　　一：编写函数，（函数执行的时间是随机的）&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33.5&quot;&gt;&lt;img id=&quot;code_img_closed_ea978bbe-9c4f-4790-a519-7fcf0486f62f&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_ea978bbe-9c4f-4790-a519-7fcf0486f62f&quot; class=&quot;code_img_opened&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_ea978bbe-9c4f-4790-a519-7fcf0486f62f&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;62&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;!/usr/bin/env python&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; -*- coding:utf-8 -*-&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; __author__ = &quot;wzs&quot;&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;2017/10/7&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt; 
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; time
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; timmer(func):
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt; wrapper(*args,**&lt;span&gt;kwargs):
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;         start =&lt;span&gt; time.time()
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;         func(*args,**&lt;span&gt;kwargs)
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;         stop =&lt;span&gt; time.time()
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;         &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;execution time is %s&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; %&lt;span&gt;(start))
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; 
&lt;span&gt;14&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; wrapper
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;@timmer
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;def&lt;/span&gt; &lt;span&gt;exec&lt;/span&gt;&lt;span&gt;():
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;     &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;what are you doing?&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;exec&lt;/span&gt;()
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;　　二：编写装饰器，为函数加上统计时间的功能&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33.5&quot;&gt;&lt;img id=&quot;code_img_closed_74c472d8-8963-4154-8c1d-cd0cdd6e89ce&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_74c472d8-8963-4154-8c1d-cd0cdd6e89ce&quot; class=&quot;code_img_opened&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_74c472d8-8963-4154-8c1d-cd0cdd6e89ce&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;62&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;!/usr/bin/env python&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; -*- coding:utf-8 -*-&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; __author__ = &quot;wzs&quot;&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;2017/10/7&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt; 
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; time
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; timmer(func):
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt; wrapper(*args,**&lt;span&gt;kwargs):
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;         start =&lt;span&gt; time.time()
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;         func(*args,**&lt;span&gt;kwargs)
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;         stop =&lt;span&gt; time.time()
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;         &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;execution time is %s&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; %&lt;span&gt;(start))
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; 
&lt;span&gt;14&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; wrapper
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;@timmer
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;def&lt;/span&gt; &lt;span&gt;exec&lt;/span&gt;&lt;span&gt;():
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;     &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;what are you doing?&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;exec&lt;/span&gt;()
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;　　三：编写装饰器，为函数加上认证的功能&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33.5&quot;&gt;&lt;img id=&quot;code_img_closed_c5c89c4d-49ad-4664-a1b6-1e97f912652d&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_c5c89c4d-49ad-4664-a1b6-1e97f912652d&quot; class=&quot;code_img_opened&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_c5c89c4d-49ad-4664-a1b6-1e97f912652d&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;62&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;!/usr/bin/env python&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; -*- coding:utf-8 -*-&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; __author__ = &quot;wzs&quot;&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;2017/10/7&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt; 
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; auth(func):
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt; wrapper(*args,**&lt;span&gt;kwargs):
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;         name = input(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;please your name&amp;gt;&amp;gt;:&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;).strip()
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;         password = input(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;please your password&amp;gt;&amp;gt;:&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;).strip()
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; name == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;wzs&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; &lt;span&gt;and&lt;/span&gt; password == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;wzs123&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;             func(*args,**&lt;span&gt;kwargs)
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; wrapper
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;@auth
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; login(name):
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;     &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;%s 欢迎登录&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; %&lt;span&gt;(name))
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; login(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;wzs&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;　　四：编写装饰器，为多个函数加上认证的功能（用户的账号密码来源于文件），要求登录成功一次，后续的函数都无需再输入用户名和密码&lt;br/&gt;注意：从文件中读出字符串形式的字典，可以用eval('{&quot;name&quot;:&quot;egon&quot;,&quot;password&quot;:&quot;123&quot;}')转成字典格式&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;&lt;img id=&quot;code_img_closed_bb6d6296-0b16-4b3c-859f-b8c556807821&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_bb6d6296-0b16-4b3c-859f-b8c556807821&quot; class=&quot;code_img_opened&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_bb6d6296-0b16-4b3c-859f-b8c556807821&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;65&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;!/usr/bin/env python&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; -*- coding:utf-8 -*-&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; __author__ = &quot;wzs&quot;&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;2017/10/7&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt; 
&lt;span&gt; 6&lt;/span&gt; current_user={&lt;span&gt;'&lt;/span&gt;&lt;span&gt;user&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:None,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;current_status&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:False}
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; auth(func):
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt; wrapper(*args,**&lt;span&gt;kwargs):
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; current_user[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;user&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] &lt;span&gt;and&lt;/span&gt; current_user[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;current_status&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]:
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; func(*args,**&lt;span&gt;kwargs)
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;         name=input(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;please input your name:&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;).strip()
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;         password=input(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;please input your password:&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;).strip()
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; 
&lt;span&gt;14&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt;#用户的认证来源有多种：文件，数据库等等&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt;         with open(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;db.txt&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, encoding=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;utf-8&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;) as f:
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;             user_dic =&lt;span&gt; eval(f.read())
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; if name == user_dic['name'] and password == user_dic['password']:&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; name &lt;span&gt;in&lt;/span&gt; user_dic &lt;span&gt;and&lt;/span&gt; password ==&lt;span&gt; user_dic[name]:
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;             res=func(*args,**kwargs) &lt;span&gt;#&lt;/span&gt;&lt;span&gt;有无返回值，均可处理:有返回值，是相应的返回值，没有返回值是None&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt;             current_user[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;user&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] = name &lt;span&gt;#&lt;/span&gt;&lt;span&gt;#登录成功记录下来&lt;/span&gt;
&lt;span&gt;21&lt;/span&gt;             current_user[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;current_status&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] ==&lt;span&gt; True
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; res &lt;span&gt;#&lt;/span&gt;&lt;span&gt;#有无返回值，均可处理&lt;/span&gt;
&lt;span&gt;23&lt;/span&gt;         &lt;span&gt;else&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;             &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;user or password is wrong&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; wrapper
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; @auth &lt;span&gt;#&lt;/span&gt;&lt;span&gt;等价于index=timmer(index)  #@装饰器名，会将下面函数名作为参数传给装饰器，然后重新赋值给函数名&lt;/span&gt;
&lt;span&gt;27&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; index():
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;     &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;welcome to index&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; 123
&lt;span&gt;30&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; index()&lt;/span&gt;
&lt;span&gt;31&lt;/span&gt; 
&lt;span&gt;32&lt;/span&gt; @auth &lt;span&gt;#&lt;/span&gt;&lt;span&gt;等价于home=timmer(home)&lt;/span&gt;
&lt;span&gt;33&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; home(name):
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt;     &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;welcome to home&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;有返回值&lt;/span&gt;
&lt;span&gt;36&lt;/span&gt; res=index()  &lt;span&gt;#&lt;/span&gt;&lt;span&gt;即res=wrapper&lt;/span&gt;
&lt;span&gt;37&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;(res)
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;

&lt;p&gt;　　五：编写装饰器，为多个函数加上认证功能，要求登录成功一次，在超时时间内无需重复登录，超过了超时时间，则必须重新登录&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;&lt;img id=&quot;code_img_closed_c1754eb5-ff4a-4515-90a1-81d380425ce0&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_c1754eb5-ff4a-4515-90a1-81d380425ce0&quot; class=&quot;code_img_opened&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_c1754eb5-ff4a-4515-90a1-81d380425ce0&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;69&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;!/usr/bin/env python&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; -*- coding:utf-8 -*-&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; __author__ = &quot;wzs&quot;&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;2017/10/7&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt; 
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; time,random
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; user={&lt;span&gt;'&lt;/span&gt;&lt;span&gt;user&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:None,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;login_time&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:None,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;timeout&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:0.000005&lt;span&gt;,}
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; timmer(func):
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt; wrapper(*args,**&lt;span&gt;kwargs):
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;         exe_start =&lt;span&gt; time.time()
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;         res = func(*args,**&lt;span&gt;kwargs)
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;         exe_stop =&lt;span&gt; time.time()
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;         &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;%s&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; %(exe_stop -&lt;span&gt; exe_start))
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; res
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; wrapper
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; 
&lt;span&gt;17&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; auth(func):
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt; wrapper(*args,**&lt;span&gt;kwargs):
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; user[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;user&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]:
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;             timeout = time.time() - user[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;login_time&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; timeout &amp;lt; user[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;timeout&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]:
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;                 &lt;span&gt;return&lt;/span&gt; func(*args,**&lt;span&gt;kwargs)
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;         name = input(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;your name&amp;gt;&amp;gt;:&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;).strip()
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;         password = input(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;your password&amp;gt;&amp;gt;:&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;).strip()
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; name == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;wzs&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; &lt;span&gt;and&lt;/span&gt; password == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;wzs123&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;             user[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;user&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] =&lt;span&gt; name
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;             user[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;login_time&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] =&lt;span&gt; time.time()
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;             res = func(*args,**&lt;span&gt;kwargs)
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt; res
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; wrapper
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; 
&lt;span&gt;32&lt;/span&gt; &lt;span&gt;@auth
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; index():
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt;     time.sleep(random.randrange(3&lt;span&gt;))
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt;     &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;welcome to index&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt; &lt;span&gt;@auth
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; home(name):
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt;     time.sleep(random.randrange(3&lt;span&gt;))
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt;     &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;welcome %s to home&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; %&lt;span&gt;name)
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt; 
&lt;span&gt;41&lt;/span&gt; &lt;span&gt;index()
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt; home(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;wzs&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;

&lt;p&gt;　　六：编写下载网页内容的函数，要求功能是：用户传入一个url，函数返回下载页面的结果&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;&lt;img id=&quot;code_img_closed_e29c53f4-c93a-43ae-879d-ac43e04c9dbc&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_e29c53f4-c93a-43ae-879d-ac43e04c9dbc&quot; class=&quot;code_img_opened&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_e29c53f4-c93a-43ae-879d-ac43e04c9dbc&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;59&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;!/usr/bin/env python&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; -*- coding:utf-8 -*-&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; __author__ = &quot;wzs&quot;&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;2017/10/7&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt; 
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; requests
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; index(url):
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt;&lt;span&gt; wrapper():
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; requests.get(url).text
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; wrapper
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; 
&lt;span&gt;12&lt;/span&gt; index_web = index(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;https://www.python.org&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;(index_web())
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;　　七：为题目五编写装饰器，实现缓存网页内容的功能：&lt;br/&gt;具体：实现下载的页面存放于文件中，如果文件内有值（文件大小不为0），就优先从文件中读取网页内容，否则，就去下载，然后存到文件中&lt;/p&gt;
&lt;p&gt;扩展功能：用户可以选择缓存介质/缓存引擎，针对不同的url，缓存到不同的文件中&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36.5&quot;&gt;&lt;img id=&quot;code_img_closed_d6f104bd-00e4-4482-84a5-5b043fab56b7&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_d6f104bd-00e4-4482-84a5-5b043fab56b7&quot; class=&quot;code_img_opened&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_d6f104bd-00e4-4482-84a5-5b043fab56b7&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;68&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;!/usr/bin/env python&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; -*- coding:utf-8 -*-&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; __author__ = &quot;wzs&quot;&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;2017/10/7&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt; 
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; requests,os
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; cache_file = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;cache.txt&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; make_cache(func):
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt; wrapper(*args,**&lt;span&gt;kwargs):
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; &lt;span&gt;not&lt;/span&gt;&lt;span&gt; os.path.exists(cache_file):
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;             with open(cache_file,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;w&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;):&lt;span&gt;pass&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;&lt;span&gt; os.path.getsize(cache_file):
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;             with open(cache_file,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;r&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,encoding=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;utf-8&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;) as f:
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;                 res =&lt;span&gt; f.read()
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;         &lt;span&gt;else&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;             res = func(*args,**&lt;span&gt;kwargs)
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;             with open(cache_file,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;w&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,encoding=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;utf-8&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;) as f:
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;                f.write(res)
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; res
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; wrapper
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;@make_cache
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; get(url):
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; requests.get(url).text
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; 
&lt;span&gt;25&lt;/span&gt; get(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;https://www.python.org&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;　　八：还记得我们用函数对象的概念，制作一个函数字典的操作吗，来来来，我们有更高大上的做法，在文件开头声明一个空字典，然后在每个函数前加上装饰器，完成自动添加到字典的操作&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_7c881997-c28c-4a00-be69-bd2f5a5c7180&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_7c881997-c28c-4a00-be69-bd2f5a5c7180&quot; class=&quot;code_img_opened&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_7c881997-c28c-4a00-be69-bd2f5a5c7180&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;!/usr/bin/env python&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; -*- coding:utf-8 -*-&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; __author__ = &quot;wzs&quot;&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;2017/10/7&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt; 
&lt;span&gt; 6&lt;/span&gt; route_dic=&lt;span&gt;{}
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; 
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; make_route(name):
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt;&lt;span&gt; deco(func):
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;         route_dic[name]=&lt;span&gt;func
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; deco
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; @make_route(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;select&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; func1():
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;     &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;select&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; 
&lt;span&gt;16&lt;/span&gt; @make_route(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;insert&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; func2():
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;     &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;insert&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; 
&lt;span&gt;20&lt;/span&gt; @make_route(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;update&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; func3():
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;     &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;update&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; 
&lt;span&gt;24&lt;/span&gt; @make_route(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;delete&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; func4():
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;     &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;delete&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; 
&lt;span&gt;28&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;(route_dic)
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;　　九 编写日志装饰器，实现功能如：一旦函数f1执行，则将消息2017-07-21 11:12:11 f1 run写入到日志文件中，日志文件路径可以指定&lt;br/&gt;注意：时间格式的获取&lt;br/&gt;import time&lt;br/&gt;time.strftime('%Y-%m-%d %X')&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36.5&quot;&gt;&lt;img id=&quot;code_img_closed_e0bd6ff8-6596-403e-a79b-322f44fea738&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_e0bd6ff8-6596-403e-a79b-322f44fea738&quot; class=&quot;code_img_opened&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_e0bd6ff8-6596-403e-a79b-322f44fea738&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;68&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;!/usr/bin/env python&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; -*- coding:utf-8 -*-&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; __author__ = &quot;wzs&quot;&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;2017/10/7&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt; 
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; time,os
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; auth(logfile):
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt;&lt;span&gt; deco(func):
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; &lt;span&gt;not&lt;/span&gt;&lt;span&gt; os.path.exists(logfile):
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;             with open(logfile,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;w&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,encoding=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;utf-8&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;) as f:&lt;span&gt;pass&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt;         &lt;span&gt;def&lt;/span&gt; wrapper(*args,**&lt;span&gt;kwargs):
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;             res = func(*args,**&lt;span&gt;kwargs)
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;             with open(logfile,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,encoding=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;utf-8&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;) as f:
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;                 f.write(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;%s %s run&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;%(time.strftime(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;%Y-%m-%d %X&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;),func.&lt;span&gt;__name__&lt;/span&gt;&lt;span&gt;))
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; wrapper
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; deco
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; @auth(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;access.log&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; index():
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;     &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;this is my index&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; 
&lt;span&gt;21&lt;/span&gt; index()
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;h2&gt;二、迭代器、生成器、面向过程&lt;/h2&gt;
&lt;h3&gt;一、 迭代器&lt;/h3&gt;
&lt;h4&gt;　　1、迭代的概念&lt;/h4&gt;
&lt;p&gt;迭代：迭代是个重复的过程，每次重复都是基于上一次的结果来的（软件版本的迭代）&lt;/p&gt;
&lt;h4&gt;　　2、为何要用迭代器？&lt;/h4&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; l=[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;b&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;c&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; n=&lt;span&gt;0
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; &lt;span&gt;while&lt;/span&gt; n &amp;lt;&lt;span&gt; len(l):
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;     &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(len(n))
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt;     n += 1
&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;
对于序列类型，如字符串，列表，元组，可以使用基于索引的迭代取值方式&lt;br/&gt;对于没有索引的类型，如字典、集合、文件，这种方式不再适用，于是我们必须找出一种不依赖于索引的取值方式，这就是迭代器找找
&lt;/pre&gt;
&lt;h4&gt;　　3、什么是可迭代对象？什么是迭代器对象？&lt;/h4&gt;
&lt;pre&gt;
可迭代对象：只要对象内置有__iter__方法，obj.__iter__ 例如：字符串，列表，元组，字典，集合
&lt;/pre&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;hello&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;.&lt;span&gt;__iter__&lt;/span&gt;&lt;span&gt;()
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; [1,2].&lt;span&gt;__iter__&lt;/span&gt;&lt;span&gt;()
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; (1,2).&lt;span&gt;__iter__&lt;/span&gt;&lt;span&gt;()
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; {&lt;span&gt;'&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:1}.&lt;span&gt;__iter__&lt;/span&gt;&lt;span&gt;()
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt; {1,2,3}.&lt;span&gt;__iter__&lt;/span&gt;()
&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;
迭代器对象：对象既有内置有__iter__方法，又内置有__next__，如文件对象&lt;br/&gt;可迭代对象通过.__iter__方法，得到的结果就是迭代器对象&lt;br/&gt;文件既是可迭代对象，又是迭代器对象 例如：文件
&lt;/pre&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; open(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;a.txt&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;w&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;).&lt;span&gt;__iter__&lt;/span&gt;&lt;span&gt;()
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; open(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;a.txt&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;w&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;).&lt;span&gt;__next__&lt;/span&gt;()
&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;
&lt;strong&gt;&lt;span&gt; 注意：迭代器对象一定是可迭代对象，可迭代队形不一定是迭代器对象&lt;/span&gt;&lt;/strong&gt;
&lt;/pre&gt;
&lt;h4&gt;　　4、迭代器对象的应用&lt;/h4&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; dic={&lt;span&gt;'&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;alex&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;age&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:29,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;sex&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;male&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;}
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; iter_dic=dic.&lt;span&gt;__iter__&lt;/span&gt;&lt;span&gt;()
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;(iter_dic.&lt;span&gt;__next__&lt;/span&gt;&lt;span&gt;())
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;(iter_dic.&lt;span&gt;__next__&lt;/span&gt;&lt;span&gt;())
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;(iter_dic.&lt;span&gt;__next__&lt;/span&gt;()) &lt;span&gt;#&lt;/span&gt;&lt;span&gt;#等价于print(next(iter_dic))&lt;/span&gt;
&lt;span&gt;6&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; print(iter_dic.__next__())  ##当没有值了，继续取值会报错&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　有了迭代器对象取值，所有类型的数据都可以使用（不依赖索引取值）&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; dic={&lt;span&gt;'&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;alex&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;age&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:29,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;sex&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;male&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;}
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; iter_dic=dic.&lt;span&gt;__iter__&lt;/span&gt;&lt;span&gt;()
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; &lt;span&gt;while&lt;/span&gt; True:  &lt;span&gt;#&lt;/span&gt;&lt;span&gt;##可以使用try ....except....使用手工捕捉异常，避免程序崩溃&lt;/span&gt;
&lt;span&gt;4&lt;/span&gt;     &lt;span&gt;try&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt;         k=&lt;span&gt;next(iter_dic)
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt;         &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(dic[k])
&lt;/span&gt;&lt;span&gt;7&lt;/span&gt;     &lt;span&gt;except&lt;/span&gt;&lt;span&gt; StopIteration:
&lt;/span&gt;&lt;span&gt;8&lt;/span&gt;         &lt;span&gt;break&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　使用for循环，for循环会自己处理异常&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt;相当于iter_dic=dic.iter__()&lt;/span&gt;
&lt;span&gt;for&lt;/span&gt; k &lt;span&gt;in&lt;/span&gt;&lt;span&gt; dic:
    &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(dic[k])
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　for循环的工作原理&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
for 循环的工作原理
    1、执行in后对象的dic.__iter__()方法
    2、执行next(iter_dic),将得到的值赋值给k，然后执行循环体代码
    3、重复过程2，知道捕捉到异常StopIteration
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;　　5、迭代器的优缺点&lt;/h4&gt;
&lt;pre readability=&quot;5&quot;&gt;
    优点：&lt;br/&gt;1、提供一种统一的迭代取值方式，该方式不再依赖于索引&lt;br/&gt;2、更节省内存&lt;br/&gt;缺点：&lt;br/&gt;1、无法统计长度&lt;br/&gt;2、一次性的，只能往后走，不能往前退，无法获取指定位置的值&lt;p&gt;　　应用场景：&lt;br/&gt;　　for循环
&lt;/p&gt;&lt;/pre&gt;
&lt;h3&gt;二、生成器&lt;/h3&gt;
&lt;h4&gt;　　1、生成器的定义&lt;/h4&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;34&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
定义：只要函数内部出现yield关键字，那么再调用该函数，将不会立即执行该函数体代码，会得到一个结果，该结果就是生成器对象
本质：生成器本质就是迭代器
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_8038db1e-6914-46d0-999f-0d0515e3baf0&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_8038db1e-6914-46d0-999f-0d0515e3baf0&quot; class=&quot;code_img_opened&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_8038db1e-6914-46d0-999f-0d0515e3baf0&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; fun():
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;     &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;first&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;     &lt;span&gt;yield&lt;/span&gt; 1,2,3
&lt;span&gt; 4&lt;/span&gt;     &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;second&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;     &lt;span&gt;yield&lt;/span&gt; 2
&lt;span&gt; 6&lt;/span&gt;     &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;third&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;     &lt;span&gt;yield&lt;/span&gt; 3
&lt;span&gt; 8&lt;/span&gt; 
&lt;span&gt; 9&lt;/span&gt; g=&lt;span&gt;fun()
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; print(next(g))&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt; &lt;span&gt;for&lt;/span&gt; i &lt;span&gt;in&lt;/span&gt;&lt;span&gt; g:
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;     &lt;span&gt;print&lt;/span&gt;(i)
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;范例：yield&lt;/span&gt;&lt;/div&gt;
&lt;h4&gt;　　2、yield的功能&lt;/h4&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
    1、提供了一种自定义迭代器的方式
    2、对比return，可以返回多次之，挂起函数的运行状态
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　自定义功能，可以生成无穷多个值，因为同一时间在内部中只有一个值（节约资源）&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33.5&quot;&gt;&lt;img id=&quot;code_img_closed_017a814b-eb2a-4a3e-91df-d85f2c08f2a5&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_017a814b-eb2a-4a3e-91df-d85f2c08f2a5&quot; class=&quot;code_img_opened&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_017a814b-eb2a-4a3e-91df-d85f2c08f2a5&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;62&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;def&lt;/span&gt; my_range(start,stop,step=1&lt;span&gt;):
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;     &lt;span&gt;while&lt;/span&gt; start &amp;lt;&lt;span&gt; stop:
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;         &lt;span&gt;yield&lt;/span&gt;&lt;span&gt; start
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;         start +=&lt;span&gt; step
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt; 
&lt;span&gt;6&lt;/span&gt; &lt;span&gt;for&lt;/span&gt; i &lt;span&gt;in&lt;/span&gt; my_range(1,1000000,2&lt;span&gt;):
&lt;/span&gt;&lt;span&gt;7&lt;/span&gt;     &lt;span&gt;print&lt;/span&gt;(i)
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;使用迭代器，实现range功能&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;　　send功能：1、初始化（None），和next效果一样；2、传值&lt;/p&gt;
&lt;p&gt;　　yield的表达式形式应用&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;&lt;img id=&quot;code_img_closed_f6649d23-6c38-431d-8351-863935e62841&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_f6649d23-6c38-431d-8351-863935e62841&quot; class=&quot;code_img_opened&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_f6649d23-6c38-431d-8351-863935e62841&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;61&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; eater(name):
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;     food_list=&lt;span&gt;[]
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;     &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;%s 开动啦&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; %&lt;span&gt;name)
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;     &lt;span&gt;while&lt;/span&gt;&lt;span&gt; True:
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;         food = &lt;span&gt;yield&lt;/span&gt; food_list &lt;span&gt;#&lt;/span&gt;&lt;span&gt;#将返回值保存在一个列表中&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt;         &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;%s 开始吃 %s&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; %&lt;span&gt;(name,food))
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; 
&lt;span&gt; 8&lt;/span&gt; g=eater(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;alex&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; g.send(None) &lt;span&gt;#&lt;/span&gt;&lt;span&gt;#相当于next(g)&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt; g.send(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;骨头&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)  &lt;span&gt;#&lt;/span&gt;&lt;span&gt;#next()功能和传值的功能&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt; g.send(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;包子&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)  &lt;span&gt;#&lt;/span&gt;&lt;span&gt;#可以多次传值&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;send应用&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;&lt;img id=&quot;code_img_closed_2ed4cc07-40de-44e3-bd9d-b45900de7f14&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_2ed4cc07-40de-44e3-bd9d-b45900de7f14&quot; class=&quot;code_img_opened&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_2ed4cc07-40de-44e3-bd9d-b45900de7f14&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;59&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; f1():
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;     &lt;span&gt;while&lt;/span&gt;&lt;span&gt; True:
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;         x=&lt;span&gt;yield&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt;         &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(x)
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; g=&lt;span&gt;f1()
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; next(g) &lt;span&gt;#&lt;/span&gt;&lt;span&gt;初始化&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt; g.send(12&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; g.send(12&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; g.send(12&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; g.close()  ##只能传值到这个位置，在执行下面的传值，就报错&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt; g.send(12&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; g.send(12)
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;无限传值&lt;/span&gt;&lt;/div&gt;
&lt;h3&gt;实现：tail -f access.log | grep '404'&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;&lt;img id=&quot;code_img_closed_d5a7be67-724a-463f-815f-5fc03ebb539e&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;tail -f access.log | grep '404'&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;&lt;img id=&quot;code_img_closed_851ce82e-39a8-45ea-a767-0a0a6f9adc5c&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_851ce82e-39a8-45ea-a767-0a0a6f9adc5c&quot; class=&quot;code_img_opened&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_851ce82e-39a8-45ea-a767-0a0a6f9adc5c&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;59&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;!/usr/bin/env python&lt;/span&gt;
&lt;span&gt;2&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; -*- coding:utf-8 -*-&lt;/span&gt;
&lt;span&gt;3&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; __author__ = &quot;wzs&quot;&lt;/span&gt;
&lt;span&gt;4&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;2017/9/28&lt;/span&gt;
&lt;span&gt;5&lt;/span&gt; with open(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;access.log&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;) as f:
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt;     f.write(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;pythonxxx19xxxxJHHH404GG\n&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;向access.log追加内容&lt;/span&gt;&lt;/div&gt;
&lt;h3&gt;三、对象过程&lt;/h3&gt;
&lt;pre&gt;
&lt;span&gt;&lt;strong&gt;&lt;span&gt;面向过程绝对不是函数编程那么简单，对象过程是一种变成思路、思想，而变成思路是不依赖于具体语言的或语法的&lt;/span&gt;。&lt;/strong&gt;&lt;/span&gt;　
&lt;/pre&gt;
&lt;pre&gt;
&lt;span&gt;&lt;strong&gt;r是后面的特殊符号转换字符串&lt;/strong&gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;h4&gt;　　1、定义&lt;/h4&gt;
&lt;p&gt;面向过程的核心是过程，过程指的是解决问题的步骤：即先干什么再干什么。&lt;/p&gt;
&lt;h4&gt;　　2、优缺点&lt;/h4&gt;
&lt;p&gt;优点：复杂的问题流程化，进行简单化&lt;/p&gt;
&lt;p&gt;缺点：可扩展性差，修改流水线的任意一个阶段，都会牵一发而动全身&lt;/p&gt;
&lt;h4&gt;　　3、应用&lt;/h4&gt;
&lt;p&gt;扩展性要求不高的场景，典型案例例如：Linux内核，git，httpd（程序实现的流程图）&lt;/p&gt;
&lt;h4&gt;　　4、范例：实现grep -rl 'root' /etc的效果，从/etc开始递归抓取文件中含有root的文件，并打印文件绝对路径，命令效果如下&lt;/h4&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
[root@iZ94ao17ezcZ ~]# grep -rl 'root' /etc
/etc/passwd
/etc/rc4.d/K30postfix
/etc/rc4.d/K87restorecond
/etc/rc4.d/K85mdmonitor
/etc/rc4.d/S64mysql
/etc/rc4.d/K92ip6tables
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39.5&quot;&gt;&lt;img id=&quot;code_img_closed_3d46770e-c877-4247-95c4-7d2af985c25a&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_3d46770e-c877-4247-95c4-7d2af985c25a&quot; class=&quot;code_img_opened&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_3d46770e-c877-4247-95c4-7d2af985c25a&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;74&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; os
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; init(func):
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt; inner(*args,**&lt;span&gt;kwargs):
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;         g=func(*args,**&lt;span&gt;kwargs)
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;        next(g)
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; g
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; inner
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;def&lt;/span&gt; search(filepath,target): &lt;span&gt;#&lt;/span&gt;&lt;span&gt;找到一个文件路径就往下个阶段传一次&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt;     g =&lt;span&gt; os.walk(filepath)
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt; dirname, _, files &lt;span&gt;in&lt;/span&gt;&lt;span&gt; g:
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt; file &lt;span&gt;in&lt;/span&gt;&lt;span&gt; files:
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;             abs_file_path = r&lt;span&gt;'&lt;/span&gt;&lt;span&gt;%s\%s&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; %&lt;span&gt; (dirname, file)
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;            target.send(abs_file_path)
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;@init
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; opener(target):
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;     &lt;span&gt;while&lt;/span&gt;&lt;span&gt; True:
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;         abs_file_path=&lt;span&gt;yield&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt;         with open(abs_file_path,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;rb&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;) as f:
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;            target.send((f,abs_file_path))
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;@init
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; cat(target):
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;     &lt;span&gt;while&lt;/span&gt;&lt;span&gt; True:
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;         f,abs_file_path=&lt;span&gt;yield&lt;/span&gt;
&lt;span&gt;24&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt; line &lt;span&gt;in&lt;/span&gt;&lt;span&gt; f:
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;             res=&lt;span&gt;target.send((line,abs_file_path))
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt;&lt;span&gt; res:
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;                 &lt;span&gt;break&lt;/span&gt;
&lt;span&gt;28&lt;/span&gt; &lt;span&gt;@init
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; grep(pattern,target):
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;     tag=&lt;span&gt;False
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;     pattern = pattern.encode(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;utf-8&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;     &lt;span&gt;while&lt;/span&gt;&lt;span&gt; True:
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt;         line,abs_file_path=&lt;span&gt;yield&lt;/span&gt;&lt;span&gt; tag
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt;         tag=&lt;span&gt;False
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; pattern &lt;span&gt;in&lt;/span&gt;&lt;span&gt; line:
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt; &lt;span&gt;            target.send(abs_file_path)
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt;             tag=&lt;span&gt;True
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt; &lt;span&gt;@init
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; printer():
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt;     &lt;span&gt;while&lt;/span&gt;&lt;span&gt; True:
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt;         abs_file_path=&lt;span&gt;yield&lt;/span&gt;
&lt;span&gt;42&lt;/span&gt;         &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(abs_file_path)
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt; search(r&lt;span&gt;'&lt;/span&gt;&lt;span&gt;G:\data\PyCharm_Project\s19\day4\a&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,opener(cat(grep(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;你好&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,printer()))))
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;实现方法&lt;/span&gt;&lt;/div&gt;
&lt;h2&gt;三、三元表达式、列表解析、生成器表达式&lt;/h2&gt;
&lt;h3&gt;一、三元表达式&lt;/h3&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
#!/usr/bin/env python
# -*- coding:utf-8 -*-
# __author__ = &quot;wzs&quot;
#2017/9/24

# name=input('&amp;gt;&amp;gt;:')
# if name == 'bingbing':
#     print('I love you!')
# else:
#     print('Goodbye!')

name=input('&amp;gt;&amp;gt;:')
#满足条件的返回结果放在最左边，不满足则放在最右边
print('I love you' if name == 'wzs' else 'Goodbye')
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;二、列表解析（列表推倒式）&lt;/h3&gt;
&lt;h4&gt; 　　1、范例：当产egg的数量大于3时，将超过3的部分放入仓库中&lt;/h4&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;31.5&quot;&gt;&lt;img id=&quot;code_img_closed_e35dc8a5-4497-4a4b-89df-488a4bfdcbda&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_e35dc8a5-4497-4a4b-89df-488a4bfdcbda&quot; class=&quot;code_img_opened&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_e35dc8a5-4497-4a4b-89df-488a4bfdcbda&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;58&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; egg_list=&lt;span&gt;[]
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; &lt;span&gt;for&lt;/span&gt; i &lt;span&gt;in&lt;/span&gt; range(10&lt;span&gt;):
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; i &amp;gt; 3&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;         res=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;egg %s&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; %&lt;span&gt;i
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt; &lt;span&gt;        egg_list.append(res)
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt; 
&lt;span&gt;7&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;(egg_list)
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;常规写法&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;31&quot;&gt;&lt;img id=&quot;code_img_closed_19199b05-f7e2-4192-a566-3d76cc130ada&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_19199b05-f7e2-4192-a566-3d76cc130ada&quot; class=&quot;code_img_opened&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_19199b05-f7e2-4192-a566-3d76cc130ada&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;57&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; l=[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;egg%s&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; %i &lt;span&gt;for&lt;/span&gt; i &lt;span&gt;in&lt;/span&gt; range(10) &lt;span&gt;if&lt;/span&gt; i &amp;gt; 3&lt;span&gt;]
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;(l)
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;列表推倒式&lt;/span&gt;&lt;/div&gt;
&lt;h4&gt;　　2、语法&lt;/h4&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; [expression &lt;span&gt;for&lt;/span&gt; item1 &lt;span&gt;in&lt;/span&gt; iterable1 &lt;span&gt;if&lt;/span&gt;&lt;span&gt; condition1
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; &lt;span&gt;for&lt;/span&gt; item2 &lt;span&gt;in&lt;/span&gt; iterable2 &lt;span&gt;if&lt;/span&gt;&lt;span&gt; condition2
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; &lt;span&gt;...
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; &lt;span&gt;for&lt;/span&gt; itemN &lt;span&gt;in&lt;/span&gt; iterableN &lt;span&gt;if&lt;/span&gt;&lt;span&gt; conditionN
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt; ]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　相当于&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; res=&lt;span&gt;[]
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; &lt;span&gt;for&lt;/span&gt; item1 &lt;span&gt;in&lt;/span&gt;&lt;span&gt; iterable1:
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt;&lt;span&gt; condition1:
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt; item2 &lt;span&gt;in&lt;/span&gt;&lt;span&gt; iterable2:
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt;&lt;span&gt; condition2
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt; &lt;span&gt;                ...
&lt;/span&gt;&lt;span&gt;7&lt;/span&gt;                 &lt;span&gt;for&lt;/span&gt; itemN &lt;span&gt;in&lt;/span&gt;&lt;span&gt; iterableN:
&lt;/span&gt;&lt;span&gt;8&lt;/span&gt;                     &lt;span&gt;if&lt;/span&gt;&lt;span&gt; conditionN:
&lt;/span&gt;&lt;span&gt;9&lt;/span&gt;                         res.append(expression)
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;　　3、优点：方便，改变了编程习惯，可称之为声明式编程&lt;/h4&gt;
&lt;h3&gt;三、生成器表达式&lt;/h3&gt;
&lt;h4&gt;　　1、语法&lt;/h4&gt;
&lt;p&gt;　　将列表推导式的[ ]换成( )，就是生成器表达式&lt;/p&gt;
&lt;h4&gt;　　2、范例：&lt;/h4&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
g=(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;egg %s&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; %i &lt;span&gt;for&lt;/span&gt; i &lt;span&gt;in&lt;/span&gt; range(10) &lt;span&gt;if&lt;/span&gt; i &amp;gt; 3&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; print(g) #生成器&lt;/span&gt;
&lt;span&gt;print&lt;/span&gt;(next(g)) &lt;span&gt;#&lt;/span&gt;&lt;span&gt;取值&lt;/span&gt;
&lt;span&gt;print&lt;/span&gt;(list(g)) &lt;span&gt;#&lt;/span&gt;&lt;span&gt;生成器是迭代器对象 因而可以转成列表  输出列表中的元素&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;　　3、优点：省内存，一次在内存中只产生一个值&lt;/h4&gt;
&lt;h3&gt;四、声明式编程练习题&lt;/h3&gt;
&lt;h4&gt;　　1、将names=['egon','alex_sb','wupeiqi','yuanhao']中的名字全部变成大写&lt;/h4&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;&lt;img id=&quot;code_img_closed_cd44d4df-ce63-483e-8598-020596942d42&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_cd44d4df-ce63-483e-8598-020596942d42&quot; class=&quot;code_img_opened&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_cd44d4df-ce63-483e-8598-020596942d42&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;61&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; names=[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;egon&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;alex_sb&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;wupeiqi&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;yuanhao&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; names=[name.upper() &lt;span&gt;for&lt;/span&gt; name &lt;span&gt;in&lt;/span&gt;&lt;span&gt; names]
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;(names)
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;列表推导式&lt;/span&gt;&lt;/div&gt;
&lt;h4&gt;　　2、将names=['egon','alex_sb','wupeiqi','yuanhao']中以sb结尾的名字过滤掉，然后保存剩下的名字长度&lt;/h4&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;&lt;img id=&quot;code_img_closed_40829797-1773-4460-8175-74b826eaa254&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_40829797-1773-4460-8175-74b826eaa254&quot; class=&quot;code_img_opened&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_40829797-1773-4460-8175-74b826eaa254&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;61&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; names=[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;egon&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;alex_sb&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;wupeiqi&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;yuanhao&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; names=[len(name) &lt;span&gt;for&lt;/span&gt; name &lt;span&gt;in&lt;/span&gt; names &lt;span&gt;if&lt;/span&gt; &lt;span&gt;not&lt;/span&gt; name.endswith(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;sb&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)]
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;(names)
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;列表推导式&lt;/span&gt;&lt;/div&gt;
&lt;h4&gt;　　3、求文件test中最长的行的长度（长度按字符个数算，需要使用max函数）&lt;/h4&gt;
&lt;p&gt;　　读取文件的每一行内容，然后计算出每行字符的数量，最后使用max函数取出最长一行字符的数量&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;31.5&quot;&gt;&lt;img id=&quot;code_img_closed_fd322963-2c7a-48b8-a57e-ff80a1b2cedc&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_fd322963-2c7a-48b8-a57e-ff80a1b2cedc&quot; class=&quot;code_img_opened&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_fd322963-2c7a-48b8-a57e-ff80a1b2cedc&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;58&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; with open(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;test&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,encoding=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;utf-8&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;) as f:
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;     &lt;span&gt;print&lt;/span&gt;(max(len(line) &lt;span&gt;for&lt;/span&gt; line &lt;span&gt;in&lt;/span&gt; f))
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;生成器表达式&lt;/span&gt;&lt;/div&gt;
&lt;h4&gt;　　4、求文件test中总共包含的字符个数？思考为何在第一次之后的n次sum求和得到的结果为0？（需要使用sum函数）&lt;/h4&gt;
&lt;p&gt;　　每次必须重新打开文件或seek到文件开头，因为迭代完一次就结束了&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_724091ba-84d5-438f-a8c1-b703f2e3e6ee&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_724091ba-84d5-438f-a8c1-b703f2e3e6ee&quot; class=&quot;code_img_opened&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_724091ba-84d5-438f-a8c1-b703f2e3e6ee&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; with open(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;test&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,encoding=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;utf-8&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;) as f:
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;     &lt;span&gt;print&lt;/span&gt;(sum(len(line) &lt;span&gt;for&lt;/span&gt; line &lt;span&gt;in&lt;/span&gt; f)) &lt;span&gt;#&lt;/span&gt;&lt;span&gt;第一次计算出所有行总的字符串&lt;/span&gt;
&lt;span&gt;3&lt;/span&gt;     &lt;span&gt;print&lt;/span&gt;(sum(len(line) &lt;span&gt;for&lt;/span&gt; line &lt;span&gt;in&lt;/span&gt; f)) &lt;span&gt;#&lt;/span&gt;&lt;span&gt;得出的结果是0：因为第一次已将生成器的值取完，再去取，所有结果为0&lt;/span&gt;
&lt;span&gt;4&lt;/span&gt;     &lt;span&gt;print&lt;/span&gt;(sum(len(line) &lt;span&gt;for&lt;/span&gt; line &lt;span&gt;in&lt;/span&gt; f))
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;生成器表达式&lt;/span&gt;&lt;/div&gt;
&lt;h4&gt;　　5、思考题&lt;/h4&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; with open(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;a.txt&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;) as f:
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;     g=(len(line) &lt;span&gt;for&lt;/span&gt; line &lt;span&gt;in&lt;/span&gt;&lt;span&gt; f)
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;(sum(g)) &lt;span&gt;#&lt;/span&gt;&lt;span&gt;为何报错？ &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;####正确的方式&lt;br/&gt;1&lt;/span&gt; with open(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;test&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;) as f:
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; g=(sum(len(line) for line in f))&lt;/span&gt;
&lt;span&gt;3&lt;/span&gt;     g=(len(line) &lt;span&gt;for&lt;/span&gt; line &lt;span&gt;in&lt;/span&gt;&lt;span&gt; f)
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;     &lt;span&gt;print&lt;/span&gt;(sum(g))&lt;span&gt;&lt;br/&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;　　6、文件shopping.txt内容如下&lt;/h4&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;37&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
求总共花了多少钱？
打印出所有商品的信息，格式为[{'name':'xxx','price':333,'count':3},...]
求单价大于10000的商品信息,格式同上
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　a.txt文件内容如下&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
mouse 100.00 2&lt;span&gt;
computer &lt;/span&gt;4999.00 1&lt;span&gt;
keyboard &lt;/span&gt;300.00 1&lt;span&gt;
mobile &lt;/span&gt;3000.00 2&lt;span&gt;
Mac &lt;/span&gt;12000 1
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　1问：sum&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;&lt;img id=&quot;code_img_closed_00a3a1e5-6c0e-4fde-bcae-699683a6893b&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_00a3a1e5-6c0e-4fde-bcae-699683a6893b&quot; class=&quot;code_img_opened&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_00a3a1e5-6c0e-4fde-bcae-699683a6893b&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;61&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; with open(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;a.txt&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,encoding=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;utf-8&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;) as f:
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;     info=[line.split() &lt;span&gt;for&lt;/span&gt; line &lt;span&gt;in&lt;/span&gt;&lt;span&gt; f]
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;     cost=sum(float(unit_price)*int(count) &lt;span&gt;for&lt;/span&gt; _,unit_price,count &lt;span&gt;in&lt;/span&gt;&lt;span&gt; info)
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;     &lt;span&gt;print&lt;/span&gt;(cost)
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;1问 总花费&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;　　2问：打印出所有商品的信息&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33.5&quot;&gt;&lt;img id=&quot;code_img_closed_63dab15f-a16a-4d6e-8171-b2e2869f463d&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_63dab15f-a16a-4d6e-8171-b2e2869f463d&quot; class=&quot;code_img_opened&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_63dab15f-a16a-4d6e-8171-b2e2869f463d&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;62&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; with open(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;a.txt&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,encoding=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;utf-8&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;) as f:
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;     info=&lt;span&gt;[{
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;         &lt;span&gt;'&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:line.split()[0],
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;         &lt;span&gt;'&lt;/span&gt;&lt;span&gt;price&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:line.split()[1&lt;span&gt;],
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt;         &lt;span&gt;'&lt;/span&gt;&lt;span&gt;count&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:line.split()[2&lt;span&gt;],
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt;     } &lt;span&gt;for&lt;/span&gt; line &lt;span&gt;in&lt;/span&gt;&lt;span&gt; f]
&lt;/span&gt;&lt;span&gt;7&lt;/span&gt;     &lt;span&gt;print&lt;/span&gt;(info)
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;列表推导式&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;　　3问：打印单价大于10000的商品信息&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;&lt;img id=&quot;code_img_closed_03ee9802-acd3-46a6-af7b-739c3c6431fa&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_03ee9802-acd3-46a6-af7b-739c3c6431fa&quot; class=&quot;code_img_opened&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_03ee9802-acd3-46a6-af7b-739c3c6431fa&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;63&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; with open(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;a.txt&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,encoding=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;utf-8&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;) as f:
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;     info=&lt;span&gt;[{
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;         &lt;span&gt;'&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:line.split()[0],
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;         &lt;span&gt;'&lt;/span&gt;&lt;span&gt;price&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:line.split()[1&lt;span&gt;],
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt;         &lt;span&gt;'&lt;/span&gt;&lt;span&gt;count&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:line.split()[2&lt;span&gt;],
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt;     } &lt;span&gt;for&lt;/span&gt; line &lt;span&gt;in&lt;/span&gt; f &lt;span&gt;if&lt;/span&gt; float(line.split()[1]) &amp;gt; 10000&lt;span&gt;]
&lt;/span&gt;&lt;span&gt;7&lt;/span&gt;     &lt;span&gt;print&lt;/span&gt;(info)
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;列表推导式&lt;/span&gt;&lt;/div&gt;

</description>
<pubDate>Sat, 07 Oct 2017 06:16:00 +0000</pubDate>
<dc:creator>思维无界限</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/happy-king/p/7589328.html</dc:identifier>
</item>
<item>
<title>关于el-dialog，我更推荐的用法 - 明年我18</title>
<link>http://www.cnblogs.com/default/p/7634443.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/default/p/7634443.html</guid>
<description>&lt;p&gt;最近的项目里用上了vue和element-ui。vue这种轻量级渐进式框架的舒适自不必说，但一直困扰着我的，是如何方便又优雅的弹出模态dialog...&lt;/p&gt;
&lt;p&gt;对于我这种在jquery出现之前就用document.getElementById敲代码的老顽固来说，我始终不能完全接受把dialog在编码期就写入模板的方式，下面是尤大在知乎某个相关问题的回答节选（全文请看&lt;a href=&quot;https://www.zhihu.com/question/35820643&quot; target=&quot;_blank&quot;&gt;https://www.zhihu.com/question/35820643&lt;/a&gt;）：&lt;/p&gt;
&lt;blockquote readability=&quot;13&quot;&gt;
&lt;p&gt;为什么一定要异步插入？&lt;br/&gt;其实以前也有一些用户跟我纠结过这个问题，他们觉得一定要在需要的时候创建这个组件才是符合他们思维的做法。在我看来，这是没有理解『状态驱动的界面』的一种表现。&lt;br/&gt;传统的命令式 (Imperative) 的思维写出来的代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
$('.open-modal').on('click', &lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
  &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; modal = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Modal()
  modal.$appendTo(&lt;/span&gt;'body'&lt;span&gt;)
  modal.open()
})

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 在 modal 内部还要处理关闭、销毁自身的逻辑&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;状态驱动的思维写出来的代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;this&lt;/span&gt;.showModal = &lt;span&gt;true&lt;/span&gt;

&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 关掉&lt;/span&gt;
&lt;span&gt;this&lt;/span&gt;.showModal = &lt;span&gt;false&lt;br/&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/blockquote&gt;
&lt;p&gt;不可否认，尤大所说的状态驱动确实是vue的精髓，但是在实际应用中，dialog往往需要直接在body下才能避免这样那样的问题，就比如本文要说的element-ui的el-dialog问题：如果你在一个el-dialog里，嵌套了另外一个el-dialog，那么弹窗的遮罩层会相互影响，导致用户无法使用（新发布的element-ui 2.0已经解决了嵌套弹窗的问题，文档在这里&lt;a href=&quot;http://element.eleme.io/#/zh-CN/component/dialog&quot; target=&quot;_blank&quot;&gt;http://element.eleme.io/#/zh-CN/component/dialog&lt;/a&gt;）。&lt;/p&gt;
&lt;p&gt;这就要求我们把系统中所有可能出现的dialog，都预先放在vue的根组件中，但显然这是不合理的，根组件无法预知业务模块中将会出现的dialog。dialog应该和alert、messagebox、toast一样，提供方法级别的调用，但不知为何element-ui为后者们提供了全局方法，但对dialog却没有。&lt;/p&gt;
&lt;p&gt;本文的目的，就是为了分享一个为dialog提供全局方法的做法。这是我在csdn上看到的一篇文章，确实解决了我的问题，原文在这里：&lt;a href=&quot;http://blog.csdn.net/zmy_coder/article/details/78042485&quot; target=&quot;_blank&quot;&gt;http://blog.csdn.net/zmy_coder/article/details/78042485&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;原理就是在方法被调用时，在body里create一个div，并且创建一个Vue实例，指定el属性为这个div。&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;49&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;dialog.js&lt;/span&gt;
&lt;span&gt;function&lt;/span&gt;&lt;span&gt; makeDialog(option) {
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; dom = document.createElement('div'&lt;span&gt;);
    document.getElementsByTagName(&lt;/span&gt;'body')[0&lt;span&gt;].appendChild(dom);
    let tpl &lt;/span&gt;= '&lt;span&gt;\
        &amp;lt;el-dialog \
            :close-on-click-modal=&quot;false&quot; \
            :custom-class=&quot;customClass&quot; \
            :title=&quot;title&quot; \
            :visible.sync=&quot;show&quot; \
            :size=&quot;size&quot; \
            :before-close=&quot;handleClose&quot; \
            @close=&quot;close&quot;&amp;gt;\
                &amp;lt;dialogContent  @close=&quot;closeDialog&quot; @confirm=&quot;confirmDialog&quot; v-model=&quot;dialogData&quot;&amp;gt;&amp;lt;/dialogContent&amp;gt;\
        &amp;lt;/el-dialog&amp;gt;&lt;/span&gt;'&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; vue = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Vue({
        el: dom,
        data: &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; {
                title: option.title,
                size: option.size &lt;/span&gt;|| 'small'&lt;span&gt;,
                show: &lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;,
                dialogData: option.data,
            };
        },
        template: tpl,
        computed: {
            customClass(){
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; `el-dialog--width-${option.size || 'auto'&lt;span&gt;}`;
            }
        },
        methods: {
            handleClose(done){
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (option.beforeClose) {
                    option.beforeClose(done);
                } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
                    done();
                }
            },
            close() {
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (option.close) {
                    option.close();
                }
            },

            closeDialog(){
                &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.show = &lt;span&gt;false&lt;/span&gt;&lt;span&gt;
            },
            confirmDialog(result){
                &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.show = &lt;span&gt;false&lt;/span&gt;&lt;span&gt;
                option.confirm &lt;/span&gt;&amp;amp;&amp;amp;&lt;span&gt; option.confirm(result)
            }
        },
        components: {
            dialogContent: option.component,
        },
    });
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; vue;
}

export &lt;/span&gt;&lt;span&gt;default&lt;/span&gt;&lt;span&gt; {
    open(options){
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; makeDialog(options)
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在创建的这个Vue实例里，用到了el-dialog组件，并且具体的内容由外部调用者以component的形式传入，如果该component需要初始数据，需要为该component定义一个value属性，并且在调用open方法时，用options.data传入，并且可以设置在对话框beforeClose、close、confirm时的回调&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;用法示例：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;对话框内容：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;SimpleDialogTest.vue&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;template&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;tutorial&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
        请输入您的姓名 &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;form-control&quot;&lt;/span&gt;&lt;span&gt; v-model&lt;/span&gt;&lt;span&gt;=&quot;name&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;button &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;button&quot;&lt;/span&gt;&lt;span&gt; class&lt;/span&gt;&lt;span&gt;=&quot;btn btn-primary&quot;&lt;/span&gt;&lt;span&gt; @click&lt;/span&gt;&lt;span&gt;=&quot;submit&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;确定&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;button&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;button &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;button&quot;&lt;/span&gt;&lt;span&gt; class&lt;/span&gt;&lt;span&gt;=&quot;btn btn-default&quot;&lt;/span&gt;&lt;span&gt; @click&lt;/span&gt;&lt;span&gt;=&quot;cancel&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;取消&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;button&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;template&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;style &lt;/span&gt;&lt;span&gt;lang&lt;/span&gt;&lt;span&gt;=&quot;scss&quot;&lt;/span&gt;&lt;span&gt; rel&lt;/span&gt;&lt;span&gt;=&quot;stylesheet/scss&quot;&lt;/span&gt;&lt;span&gt; scoped&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;text/ecmascript-6&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
    import dialog from &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;../../assets/js/dialog&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
    export &lt;/span&gt;&lt;span&gt;default&lt;/span&gt;&lt;span&gt;{
        props: {
            value: Object,
        },
        data(){
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; {
                name : &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.value.name
            }
        },

        methods: {
            submit(){
                console.log(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;your name is &lt;/span&gt;&lt;span&gt;'&lt;/span&gt; &lt;span&gt;+&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.name)
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;do something if you like&lt;/span&gt;
                &lt;span&gt;//&lt;/span&gt;&lt;span&gt;...&lt;/span&gt;

                &lt;span&gt;//&lt;/span&gt;&lt;span&gt;关闭对话框&lt;/span&gt;
                &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.$emit(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;close&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);

                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;关闭对话框, 并回调调用者的option.confirm方法&lt;/span&gt;&lt;span&gt;
//&lt;/span&gt;&lt;span&gt;                this.$emit('confirm', {&lt;/span&gt;&lt;span&gt;
//&lt;/span&gt;&lt;span&gt;                        ...&lt;/span&gt;&lt;span&gt;
//&lt;/span&gt;&lt;span&gt;                });&lt;/span&gt;
&lt;span&gt;            },
            cancel(){
                &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.$emit(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;close&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
            }
        },

    }
&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;调用方：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;46&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;-调用方&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;template&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;button &lt;/span&gt;&lt;span&gt;@click&lt;/span&gt;&lt;span&gt;=&quot;openDialog&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;弹出对话框&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;button&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;template&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;text/ecmascript-6&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
    import dialog from &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;../assets/js/dialog&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
    import SimpleDialogTest from &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;SimpleDialogTest.vue&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
    export &lt;/span&gt;&lt;span&gt;default&lt;/span&gt;&lt;span&gt;{
        data(){
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt;{
            }
        },
        methods:{
            openDialog(){
                dialog.open({
                    title: &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;标题标题&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
                    size:&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;small&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;可选项tiny/small/large/full, 对应el-dialog的size属性&lt;/span&gt;
&lt;span&gt;                    component: SimpleDialogTest,
                    data: {
                        name: &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;your name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
                    },
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;                    beforeClose: (done) =&amp;gt; {&lt;/span&gt;&lt;span&gt;
//&lt;/span&gt;&lt;span&gt;                        //点右上角关闭按钮后触发&lt;/span&gt;&lt;span&gt;
//&lt;/span&gt;&lt;span&gt;                        console.log('dialog is closing');&lt;/span&gt;&lt;span&gt;
//&lt;/span&gt;&lt;span&gt;                        done()&lt;/span&gt;&lt;span&gt;
//&lt;/span&gt;&lt;span&gt;                    },&lt;/span&gt;
&lt;span&gt;                    close: () &lt;/span&gt;&lt;span&gt;=&amp;gt;&lt;/span&gt;&lt;span&gt; {
                        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;关闭后触发&lt;/span&gt;
&lt;span&gt;                        console.log(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;dialog is closed&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
                    },
                    confirm: (result) &lt;/span&gt;&lt;span&gt;=&amp;gt;&lt;/span&gt;&lt;span&gt; {
                        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;显式$emit('confirm')时触发&lt;/span&gt;
&lt;span&gt;                        console.log(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;dialog is confirmed, and dialog result is &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, result)
                    }
                })
            }
        }
    }
&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt; &lt;strong&gt;关于option的size&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; el-dialog中size的四个选项tiny/small/large/full在实际应用中是不够的，有时候我们希望能为dialog能自适应内容组件的宽度，也就是说由内容组件来决定宽度，应该怎么做呢？&lt;/p&gt;
&lt;p&gt;首先定义一个全局的css：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;.el-dialog.el-dialog--width-auto&lt;/span&gt;{&lt;span&gt;
  width&lt;/span&gt;:&lt;span&gt;auto !important&lt;/span&gt;;
}
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;然后在调用dialog.open()的时候，不要指定size属性就行了。&lt;/p&gt;

</description>
<pubDate>Sat, 07 Oct 2017 03:51:00 +0000</pubDate>
<dc:creator>明年我18</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/default/p/7634443.html</dc:identifier>
</item>
<item>
<title>JavaWeb（二）会话管理之细说cookie与session - 苦水润喉</title>
<link>http://www.cnblogs.com/zhangyinhua/p/7633738.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/zhangyinhua/p/7633738.html</guid>
<description>&lt;p&gt;&lt;span&gt;&lt;strong&gt;前言&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　前面花了几篇博客介绍了Servlet，讲的非常的详细。这一篇给大家介绍一下cookie和session。&lt;/p&gt;

&lt;h2&gt;1.1、什么是会话？&lt;/h2&gt;
&lt;p&gt;　　会话可简单理解为：用户&lt;span&gt;开一个浏览器，点击多个超链接，访问服务器多个web资源，然后关闭浏览器，整个过程&lt;/span&gt;称之为一个会话。&lt;/p&gt;
&lt;p&gt;　　一次会话指的是：就好比打电话&lt;span&gt;，A给B打电话，接通之后，会话开始，直到挂断电话，该次会话就结束了&lt;/span&gt;，而浏览器访问服务器，就跟打电话一样，浏览器A给服务器发送请求，访问web程序，该次会话就已经接通，&lt;/p&gt;
&lt;p&gt;　　　　　　　　　　其中不管浏览器发送多少请求(就相当于接通电话后说话一样)，都视为一次会话，直到浏览器关闭，本次会话结束。其中注意，&lt;span&gt;一个浏览器就相当于一部电话，如果使用火狐浏览器，访问服务器，就是一次会话了，&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　　　　　　　然后打开google浏览器，访问服务器，这是另一个会话，虽然是在同一台电脑，同一个用户在访问，但是，这是两次不同的会话&lt;/span&gt;。&lt;/p&gt;
&lt;h2&gt;1.2、会话机制&lt;/h2&gt;
&lt;p&gt;　　Web程序中常用的技术，&lt;span&gt;用来跟踪用户的整个会话&lt;/span&gt;。常用的会话跟踪技术是&lt;span&gt;Cookie与Session&lt;/span&gt;。Cookie通过&lt;span&gt;在客户端记录信息确定用户身份&lt;/span&gt;，Session通过&lt;span&gt;在服务器端记录信息确定用户身份&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;　　知道了什么是会话后，思考一个问题，一个浏览器访问一个服务器就能建立一个会话，如果别的电脑，都同时访问该服务器，就会创建很多会话，就拿一些购物网站来说，我们访问一个购物网站的服务器，会话就被创建了，&lt;/p&gt;
&lt;p&gt;　　然后就点击浏览商品，对感兴趣的商品就先加入购物车，等待一起付账，这看起来是很普通的操作，但是想一下，如果有很多别的电脑上的浏览器同时也在访问该购物网站的服务器，跟我们做类似的操作呢？服务器又是怎么记住用户，&lt;/p&gt;
&lt;p&gt;　　怎么知道用户A购买的任何商品都应该放在A的购物车内，不论是用户A什么时间购买的，不能放入用户B或用户C的购物车内的呢？所以就有了cookie和session这两个技术，&lt;span&gt;cookie和session用来跟踪用户的整个会话&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;　　会话要解决的问题：　　　　&lt;/p&gt;
&lt;p&gt;　　　　每个用户在&lt;span&gt;使用浏览器与服务器进行会话的过程中，不可避免各自会产生一些数据，程序要想办法为每个用户保存这些数据&lt;/span&gt;。&lt;br/&gt;　　　　例如：用户点击超链接通过一个servlet购买了一个商品，程序应该想办法保存用户购买的商品，以便于用户点结帐servlet时，结帐servlet可以得到用户购买的商品为用户结帐。&lt;/p&gt;

&lt;h2&gt;2.1、cookie&lt;/h2&gt;
&lt;p&gt;　　Cookie是&lt;span&gt;客户端技术&lt;/span&gt;，程序把&lt;span&gt;每个用户的数据以cookie的形式写给用户各自的浏览器&lt;/span&gt;。&lt;span&gt;当用户使用浏览器再去访问服务器中的web资源时，就会带着各自的数据去。这样，web资源处理的就是用户各自的数据了&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;　　由于&lt;span&gt;cookie是由客户端浏览器保存和携带的，所以称之为客户端技术&lt;/span&gt;：API中介绍&lt;/p&gt;
&lt;p&gt;　　　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/999804/201710/999804-20171007003626771-194910184.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;2.2、session　　&lt;/h2&gt;
&lt;p&gt;　　Session是&lt;span&gt;服务器端技术&lt;/span&gt;，利用这个技术&lt;span&gt;，服务器在运行时可以为每一个用户的浏览器创建一个其独享的HttpSession对象，由于session为用户浏览器独享，所以用户在访问服务器的web资源时，&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　可以把各自的数据放在各自的session中&lt;/span&gt;，&lt;span&gt;当用户再去访问服务器中的其它web资源时，其它web资源再从用户各自的session中取出数据为用户服务&lt;/span&gt;。&lt;/p&gt;
&lt;h2&gt;2.3、Cookie和Session之间的区别和联系&lt;/h2&gt;
&lt;p&gt;　　假如一个咖啡店有喝5杯咖啡免费赠一杯咖啡的优惠，然而一次性消费5杯咖啡的机会微乎其微，这时就需要某种方式来纪录某位顾客的消费数量。想象一下其实也无外乎下面的几种方案：　&lt;/p&gt;
&lt;p&gt;　　　　1）该店的店员很厉害，能记住每位顾客的消费数量，只要顾客一走进咖啡店，店员就知道该怎么对待了。这种做法就是&lt;span&gt;协议本身支持状态。但是http协议本身是无状态的&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;　　　　2）发给顾客一张卡片，上面记录着消费的数量，一般还有个有效期限。每次消费时，如果顾客出示这张卡片，则此次消费就会与以前或以后的消费相联系起来。&lt;/p&gt;
&lt;p&gt;　　　　　　这种做法就是在&lt;span&gt;客户端保持状态。也就是cookie。 顾客就相当于浏览器&lt;/span&gt;，cookie如何工作，下面会详细讲解&lt;/p&gt;
&lt;p&gt;　　　　3）发给顾客一张会员卡，除了卡号之外什么信息也不纪录，每次消费时，如果顾客出示该卡片，则店员在店里的纪录本上找到这个卡号对应的纪录添加一些消费信息。这种做法就是&lt;span&gt;在服务器端保持状态&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;　　由于&lt;span&gt;HTTP协议是无状态的，而出于种种考虑也不希望使之成为有状态的&lt;/span&gt;，因此，后面两种方案就成为现实的选择。具体来说&lt;span&gt;cookie机制采用的是在客户端保持状态的方案，而session机制采用的是在服务器端保持状态的方案&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;　　同时我们也看到，由于&lt;span&gt;采用服务器端保持状态的方案在客户端也需要保存一个标识，所以session机制可能需要借助于cookie机制来达到保存标识的目的&lt;/span&gt;，但实际上它还有其他选择。&lt;/p&gt;

&lt;p&gt;　　上面已经介绍了为什么要使用Cookie，以及Cookie的一些特点，比如保存在客户端，用来记录用户身份信息的，现在来看看如何使用Cookie。&lt;/p&gt;
&lt;p&gt;　　借着上面会员卡的例子来说，采用的是第二种方案，其中还需要解决的问题就是：如何分发会员卡，会员卡的内容，客户如何使用会员卡，会员卡的有效日期，会员卡的使用范围&lt;/p&gt;
&lt;p&gt;　　1）如何分发会员卡、会员卡的内容：也就是cookie是如何创建的？创建后如何发送给客户端？&lt;/p&gt;
&lt;p&gt;　　　　由服务器进行创建，也就相当于咖啡店来创建会员卡，在创建会员卡的同时，就会将会员卡中的内容也给设置了　　　&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
　　　　Cookie cookie = &lt;span&gt;new&lt;/span&gt; Cookie(key,value);　　&lt;span&gt;//&lt;/span&gt;&lt;span&gt;以键值对的方式存放内容，&lt;/span&gt;&lt;span&gt;
　　　　response.addCookie(cookie);　　&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;发送回浏览器端&lt;/span&gt;　　　
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　　　注意：一旦cookie创建好了，就不能在往其中增加别的键值对，但是可以修改其中的内容，　　　　　　　　&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
　　　　　cookie.setValue();　　&lt;span&gt;//&lt;/span&gt;&lt;span&gt;将key对应的value值修改&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　2）客户如何使用会员卡，cookie在客户端是如何工作的，工作原理是什么？　&lt;/p&gt;
&lt;p&gt;　　　　图一：&lt;/p&gt;
&lt;p&gt;　　　　　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/999804/201710/999804-20171007005103865-1331217859.png&quot; alt=&quot;&quot; width=&quot;677&quot; height=&quot;328&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　图二：&lt;/p&gt;
&lt;p&gt;　　　　　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/999804/201710/999804-20171007004929849-1134095645.png&quot; alt=&quot;&quot; width=&quot;825&quot; height=&quot;214&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　这个过程就相当于，咖啡店创建好了会员卡，并且已经设置了其中的内容，交到了客户手中，下次客户过来时，就带着会员卡过来，就知道你是会员了，然后咖啡店就拿到你的会员卡对其进行操作。&lt;/p&gt;
&lt;p&gt;　　3）会员卡的有效日期？也就是cookie也是拥有有效日期的。　　　&lt;/p&gt;
&lt;p&gt;　　　　这个可以自由设置，默认是关闭浏览器，cookie就没用了。　　　　&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
　　cookie.setMaxAge(expiry);　　&lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置cookie被浏览器保存的时间。&lt;/span&gt;&lt;span&gt;
　　　　　　expiry：单位秒，默认为&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;&lt;span&gt;，
　　　　　　expiry&lt;/span&gt;=-&lt;span&gt;1&lt;/span&gt;&lt;span&gt;：代表&lt;span&gt;浏览器关闭后，也就是会话结束后，cookie就失效了，也就没有了。&lt;/span&gt;
　　　　 　 expiry&lt;/span&gt;&amp;gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;：代表&lt;span&gt;浏览器关闭后，cookie不会失效，仍然存在。并且会将cookie保存到硬盘中，直到设置时间过期才会被浏览器自动删除&lt;/span&gt;，
　　　　　　expiry&lt;/span&gt;=&lt;span&gt;0&lt;/span&gt;：&lt;span&gt;删除cookie。不管是之前的expiry=-1还是expiry&amp;gt;0，当设置expiry=&lt;/span&gt;&lt;span&gt;&lt;span&gt;0时，cookie都会被浏览器给删除&lt;/span&gt;。

 &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 　　4）会员卡的使用范围？&lt;/p&gt;
&lt;p&gt;　　　　比如：星巴克在北京有一个分店，在上海也有一个分店，我们只是在北京的星巴克办理了会员卡，那么当我们到上海时，就不能使用该会员卡进行打折优惠了。&lt;/p&gt;
&lt;p&gt;　　　　　　  而cookie也是如此，可以&lt;span&gt;设置服务器端获取cookie的访问路径，而并非在服务器端的web项目中所有的servlet都能访问该cookie&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;　　　　cookie默认路径：&lt;span&gt;当前访问的servlet父路径&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;　　　　　　例如：http://localhost:8080/test01/a/b/c/SendCookieServlet&lt;/p&gt;
&lt;p&gt;　　　　　　默认路径：/test01/a/b/c　　也就是说，&lt;span&gt;在该默认路径下的所有Servlet都能够获取到cookie&lt;/span&gt;，/test01/a/b/c/MyServlet　这个MyServlet就能获取到cookie。&lt;/p&gt;
&lt;p&gt;　　　　修改cookie的访问路径&lt;/p&gt;
&lt;p&gt;　　　　　&lt;span&gt;　setPath(&quot;/&quot;)；　　//在该服务器下，任何项目，任何位置都能获取到cookie。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　　　　　用途：&lt;span&gt;保证在tomcat下所有的web项目可以共享相同的cookie &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　　　　　例如：tieba , wenku , beike 多个项目共享数据。例如用户名。&lt;/p&gt;
&lt;p&gt;　　　　　　setPath(&quot;/test01/&quot;);　　//在test01项目下任何位置都能获取到cookie。&lt;/p&gt;

&lt;h2&gt;4.1、Cookie的工作流程&lt;/h2&gt;
&lt;p&gt;　　1）servlet创建cookie，保存少量数据，发送浏览器。&lt;br/&gt;　　2）浏览器获得服务器发送的cookie数据，将自动的保存到浏览器端。&lt;br/&gt;　　3）下次访问时，浏览器将自动携带cookie数据发送给服务器。&lt;/p&gt;
&lt;h2&gt;4.2、Cookie操作&lt;/h2&gt;
&lt;p&gt;　　1）创建cookie：new Cookie(name,value)&lt;br/&gt;　　2）发送cookie到浏览器：HttpServletResponse.addCookie(Cookie)&lt;br/&gt;　　3）servlet接收cookie：HttpServletRequest.getCookies() 浏览器发送的所有cookie&lt;/p&gt;
&lt;h2&gt;4.3、Cookie特点&lt;/h2&gt;
&lt;p&gt;　　1）每一个cookie文件大小：&lt;span&gt;4kb&lt;/span&gt; ， 如果超过4kb浏览器不识别&lt;br/&gt;　　2）一个web站点（web项目）：发送&lt;span&gt;20&lt;/span&gt;个&lt;br/&gt;　　3）一个浏览器保存总大小：&lt;span&gt;300&lt;/span&gt;个&lt;br/&gt;　　4）&lt;span&gt;cookie 不安全，可能泄露用户信息。浏览器支持禁用cookie操作&lt;/span&gt;。&lt;br/&gt;　　5） 默认情况生命周期：&lt;span&gt;与浏览器会话一样，当浏览器关闭时cookie销毁的&lt;/span&gt;。---临时cookie&lt;/p&gt;
&lt;h2&gt;4.4、Cookie API&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;　　getName() 获得名称，cookie中的key
　　getValue() 获得值，cookie中的value
　　setValue(java.lang.String newValue)  设置内容，用于修改key对应的value值。
　　setMaxAge(&lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt; expiry) 设置有效时间【】
　　setPath(java.lang.String uri)  设置路径【】　　
　　setDomain(java.lang.String pattern) 设置域名 , 一般无效，有浏览器自动设置，setDomain(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;.zyh.com&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
　　　　www.zyh.com &lt;/span&gt;/&lt;span&gt; bbs.zyh.com 都可以访问
　　　　a.b.zyh.com无法访问
　　　　作用：设置cookie的作用范围，域名&lt;/span&gt;+&lt;span&gt;路径在一起就构成了cookie的作用范围，上面单独设置的setPath有用，是因为有浏览器自动设置该域名属性，但是我们必须知道有这么个属性进行域名设置的
　　isHttpOnly()  是否只是http协议使用。只能servlet的通过getCookies()获得，javascript不能获得。
　　setComment(java.lang.String purpose) (了解)　　&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;对该cookie进行描述的信息(说明作用)，浏览器显示cookie信息时能看到&lt;/span&gt;&lt;span&gt;
　　setSecure(boolean flag) (了解)　　是否使用安全传输协议。为true时，只有当是https请求连接时cookie才会发送给服务器端，而http时不会，但是服务端还是可以发送给浏览端的。
　　setVersion(&lt;/span&gt;&lt;span&gt;int&lt;/span&gt; v) (了解)　　参数为0（传统Netscape cookie规范编译）或1（RFC 2109规范编译）。这个没用到，不是很懂
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　注意：cookie不能发送中文，如果要发送中文，就需要进行特别处理。&lt;/p&gt;
&lt;p&gt;　　JDK提供工具，进行编码：&lt;/p&gt;
&lt;p&gt;　　　　URLEncoder:编码&lt;/p&gt;
&lt;p&gt;　　　　URLDecoder:解码&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;　　　　　　//&lt;/span&gt;&lt;span&gt;发送cookie&lt;/span&gt;&lt;span&gt;
　　　　　　Cookie cookie &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; Cookie(URLEncoder.encode(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;哈哈&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;),URLEncoder.encode(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;呵呵&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;));
　　　　　　response.addCookie(cookie);
&lt;/span&gt;&lt;span&gt;　　　　　　//&lt;/span&gt;&lt;span&gt;获得cookie中文内容&lt;/span&gt;&lt;span&gt;
　　　　　　URLDecoder.decoder(request.getCookie().getName);　　&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取key&lt;/span&gt;&lt;span&gt;
　　　　　　URLDecoder.decoder(request.getCookie().getValue);　　&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取value&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;4.5、Cookie应用&lt;/h2&gt;
&lt;p&gt;　　1）记住用户名&lt;/p&gt;
&lt;p&gt;　　　　登录时，在服务器端获取到用户名，然后创建一个cookie，将用户名存入cookie中，发送回浏览器端，然后浏览器下次在访问登录页面时，先拿到cookie，将cookie中的信息拿出来，&lt;/p&gt;
&lt;p&gt;　　　　看是否保存了该用户名，如果保存了，那么直接用他，如果没有，则自己手写用户名。&lt;/p&gt;
&lt;p&gt;　　2）历史记录&lt;/p&gt;
&lt;p&gt;　　　　比如购物网站，都会有我们的浏览记录的，实现原理其实也是用cookie技术，每浏览一个商品，就将其存入cookie中，到需要显示浏览记录时，只需要将cookie拿出来遍历即可。&lt;/p&gt;

&lt;p&gt;　　在上面的介绍中我们知道：&lt;/p&gt;
&lt;p&gt;　　　　在WEB开发中，服务器可以为&lt;span&gt;每个用户浏览器创建一个会话对象（session对象）&lt;/span&gt;，注意：&lt;span&gt;一个浏览器独占一个session对象(默认情况下)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;　　　　因此，在需要&lt;span&gt;保存用户数据时，服务器程序可以把用户数据写到用户浏览器独占的session中&lt;/span&gt;，当&lt;span&gt;用户使用浏览器访问其它程序时，其它程序可以从用户的session中取出该用户的数据，为用户服务&lt;/span&gt;。　　　　&lt;/p&gt;
&lt;p&gt;　　同样，会员卡的例子的第三种方法，发给顾客一张会员卡，除了卡号之外什么信息也不纪录，每次消费时，如果顾客出示该卡片，则店员在店里的记事本上找到这个卡号对应的纪录添加一些消费信息。&lt;/p&gt;
&lt;p&gt;　　这种做法就是&lt;span&gt;在服务器端保持状态。　这就是session的用法，在服务器端来保持状态，保存一些用户信息。　　&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　　　功能作用：服务器用于共享数据技术 &lt;/p&gt;
&lt;p&gt;　　　　　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/999804/201710/999804-20171007101600021-2060413004.png&quot; alt=&quot;&quot; width=&quot;856&quot; height=&quot;230&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;5.1、session原理分析&lt;/h2&gt;
&lt;p&gt;　　　　我们通过两幅图来描述一下：虽然代码相同，但不同浏览器得到的各自的数据&lt;/p&gt;
&lt;p&gt;　　　　　　　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/999804/201710/999804-20171007104530490-1811680115.png&quot; alt=&quot;&quot; width=&quot;681&quot; height=&quot;329&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　原理分析图：服务器是如何实现一个session为一个用户浏览器服务的&lt;/p&gt;
&lt;p&gt;　　　　　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/999804/201710/999804-20171007104639052-1732879588.png&quot; alt=&quot;&quot; width=&quot;767&quot; height=&quot;308&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　首先浏览器请求服务器访问web站点时，程序需要为客户端的请求创建一个session的时候，服务器首先会&lt;span&gt;检查这个客户端请求是否已经包含了一个session标识&lt;/span&gt;、称为SESSIONID，&lt;/p&gt;
&lt;p&gt;　　　　如果已经包含了一个sessionid则说明以前已经为此客户端创建过session，服务器就按照sessionid把这个session检索出来使用，如果&lt;span&gt;客户端请求不包含session id，则服务器为此客户端创建一个session并且&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　生成一个与此session相关联的session id&lt;/span&gt;，sessionid 的值应该是&lt;span&gt;一个既不会重复，又不容易被找到规律以仿造的字符串&lt;/span&gt;，这个&lt;span&gt;sessionid将在本次响应中返回到客户端保存，保存这个sessionid的方式就可以是cookie&lt;/span&gt;，&lt;/p&gt;
&lt;p&gt;　　　　这样在交互的过程中，浏览器可以&lt;span&gt;自动的按照规则把这个标识发回给服务器，服务器根据这个sessionid就可以找得到对应的session&lt;/span&gt;，又回到了这段文字的开始。&lt;/p&gt;
&lt;h2&gt;5.2、获取session　　　&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
　　　　request.getSession();　　&lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果没有将创建一个新的，等效getSession(true);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　　　有些人不理解，为什么是通过request来获取session，可以这样理解，在获取session时，需要检测请求中是否有session标识，所以需要用request来获取&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
　　　　request.getSession(boolean);　　&lt;span&gt;//&lt;/span&gt;&lt;span&gt;true：没有将创建，false：没有将返回null&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;5.3、session属性操作&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;　　xxxAttribute(...)
　　　　用来存放一些信息，然后才能共享信息　
　　setAttrubute(key,value);
　　getAttribute(key);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt; 5.4、session生命周期&lt;/h2&gt;
&lt;p&gt;　　常常听到这样一种误解“只要关闭浏览器，session就消失了”。其实可以想象一下会员卡的例子，除非顾客主动对店家提出销卡，否则店家绝对不会轻易删除顾客的资料。对session来说也是一样的，除非程序通知服务器删除一个session，&lt;/p&gt;
&lt;p&gt;　　否则服务器会一直保留，程序一般都是在用户做log off的时候发个指令去删除session。然而&lt;span&gt;浏览器从来不会主动在关闭之前通知服务器它将要关闭，因此服务器根本不会有机会知道浏览器已经关闭&lt;/span&gt;，之所以会有这种错觉，&lt;/p&gt;
&lt;p&gt;　　是大部分session机制都使用会话cookie来保存session id，而关闭浏览器后这个session id就消失了，再次连接服务器时也就无法找到原来的session。如果服务器设置的cookie被保存到硬盘上，或者使用某种手段改写浏览器发出的HTTP请求头，&lt;/p&gt;
&lt;p&gt;　　把原来的session id发送给服务器，则再次打开浏览器仍然能够找到原来的session。&lt;/p&gt;
&lt;p&gt;　　恰恰是由于&lt;span&gt;关闭浏览器不会导致session被删除，迫使服务器为seesion设置了一个失效时间，一般是30分钟&lt;/span&gt;，当距离客户端上一次使用session的时间超过这个失效时间时，服务器就可以认为客户端已经停止了活动，才会把session删除以节省存储空间。 　&lt;/p&gt;
&lt;p&gt;　　我们也可以自己来控制session的有效时间：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;　　　　session.invalidate()将session对象销毁
　　　　setMaxInactiveInterval(&lt;/span&gt;&lt;span&gt;int&lt;/span&gt; interval) 设置有效时间，单位秒
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　在web.xml中配置session的有效时间：　&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
　　　　　&amp;lt;session-config&amp;gt;
　　　　　　　　　　&amp;lt;session-timeout&amp;gt;&lt;span&gt;30&lt;/span&gt;&amp;lt;/session-timeout&amp;gt;&lt;span&gt;   单位：分钟
&lt;/span&gt;　　　　&amp;lt;session-config&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　所以，讨论了这么久，session的生命周期就是：&lt;/p&gt;
&lt;p&gt;　　　　创建：第一次调用getSession()&lt;/p&gt;
&lt;p&gt;　　　　销毁：&lt;/p&gt;
&lt;p&gt;　　　　　　1）超时，默认30分钟&lt;/p&gt;
&lt;p&gt;　　　　　　2）执行api：session.invalidate()将session对象销毁、setMaxInactiveInterval(int interval) 设置有效时间，单位：秒 &lt;/p&gt;
&lt;p&gt;　　　　　　3）服务器非正常关闭　　　　　&lt;/p&gt;
&lt;p&gt;　　　　　　　　自杀，直接将JVM马上关闭&lt;/p&gt;
&lt;p&gt;　　　　　　　　如果正常关闭，&lt;span&gt;session就会被持久化(写入到文件中，因为session默认的超时时间为30分钟，正常关闭后，就会将session持久化，等30分钟后，就会被删除&lt;/span&gt;)&lt;/p&gt;
&lt;p&gt;　　　　　　　　位置：　D:\java\tomcat\apache-tomcat-7.0.53\work\Catalina\localhost\test01\SESSIONS.ser&lt;/p&gt;
&lt;h2&gt;5.5、session id的URL重写&lt;/h2&gt;
&lt;p&gt;　　当浏览器将cookie禁用，基于cookie的session将不能正常工作，每次使用request.getSession() 都将创建一个新的session。达不到session共享数据的目的，但是我们知道原理，只需要将session id 传递给服务器session就可以正常工作的。&lt;/p&gt;
&lt;p&gt;　　解决：通过URL将session id 传递给服务器：URL重写&lt;/p&gt;
&lt;p&gt;　　1）手动方式： url;jsessionid=....&lt;/p&gt;
&lt;p&gt;　　2）api方式：&lt;/p&gt;
&lt;p&gt;　　　　　　encodeURL(java.lang.String url) 进行所有URL重写&lt;/p&gt;
&lt;p&gt;　　　　　&lt;span&gt;　encodeRedirectURL(java.lang.String url) 进行重定向 URL重写　&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; 　　　　　　这两个用法基本一致,只不过考虑特殊情况,要&lt;span&gt;访问的链接可能会被Redirect到其他servlet去进行处理&lt;/span&gt;,这样你用上述方法&lt;span&gt;带来的session的id信息不能被同时传送到其他servlet。这时候用encodeRedirectURL()方法&lt;/span&gt;就可以了。　　&lt;/p&gt;
&lt;p&gt;　　如果浏览器禁用cooke，api将自动追加session id ，如果没有禁用，api将不进行任何修改。&lt;/p&gt;
&lt;p&gt;　　注意：如果浏览器禁用cookie，&lt;span&gt;web项目的所有url都需进行重写。否则session将不能正常工作&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;　　当cookie禁用时：&lt;/p&gt;
&lt;p&gt;　　　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/999804/201710/999804-20171007104733240-136871692.png&quot; alt=&quot;&quot; width=&quot;585&quot; height=&quot;359&quot;/&gt;&lt;/p&gt;

&lt;p&gt;　　上面都详细的说明了cookie和session的核心内容：&lt;/p&gt;
&lt;p&gt;　　1）知道什么是cookie和session&lt;/p&gt;
&lt;p&gt;　　　　cookie是一种在客户端记录用户信息的技术，因为http协议是无状态的，为了解决这个问题而产生了cookie。记录用户名等一些应用&lt;/p&gt;
&lt;p&gt;　　　　session是一种在服务端记录用户信息的技术，一般session用来在服务器端共享数据。&lt;/p&gt;
&lt;p&gt;　　2）cookie的工作原理和session的工作原理&lt;/p&gt;
&lt;p&gt;　　　　cookie工作原理，可以看上面讲解cookie的那张图，cookie是由服务器端创建发送回浏览器端的，并且每次请求服务器都会将cookie带过去，以便服务器知道该用户是哪一个。&lt;/p&gt;
&lt;p&gt;　　　　其cookie中是&lt;span&gt;使用键值对来存储信息的，并且一个cookie只能存储一个键值对。所以在获取cookie时，是会获取到所有的cookie，然后从其中遍历&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;　　　　　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/999804/201710/999804-20171007105020786-650462453.png&quot; alt=&quot;&quot; width=&quot;714&quot; height=&quot;282&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　session的工作原理就是依靠cookie来做支撑，第一次使用request.getSession()时session被创建，并且会为该session创建一个独一无二的sessionid存放到cookie中，然后发送会浏览器端，&lt;/p&gt;
&lt;p&gt;　　　　浏览器端每次请求时，都会带着这个sessionid，服务器就会认识该sessionid，知道了sessionid就找得到哪个session。以此来达到共享数据的目的。 这里需要注意的是，session不会随着浏览器的关闭而死亡，而是等待超时时间。&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;喜欢就点个“推荐”哦！&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Sat, 07 Oct 2017 03:20:00 +0000</pubDate>
<dc:creator>苦水润喉</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/zhangyinhua/p/7633738.html</dc:identifier>
</item>
<item>
<title>初识Hibernate之关联映射（一） - Single_Yam</title>
<link>http://www.cnblogs.com/yangming1996/p/7634307.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/yangming1996/p/7634307.html</guid>
<description>&lt;p&gt;     上篇文章我们对持久化对象进行的学习，了解了它的三种不同的状态并通过它完成对数据库的映射操作。但这都是基于单张表的操作，如果两张或者两张以上的表之间存在某种关联，我们又该如何利用持久化对象进行操作呢？本篇主要介绍的关联映射就是针对有着某种关联的多张表的各种操作，主要涉及内容如下：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;组合主键的映射&lt;/li&gt;
&lt;li&gt;组件的映射&lt;/li&gt;
&lt;li&gt;单向多对一的映射&lt;/li&gt;
&lt;li&gt;单向一对多的映射&lt;/li&gt;
&lt;li&gt;双向一对多的映射&lt;/li&gt;
&lt;li&gt;级联映射&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;一、组合主键的映射操作&lt;/strong&gt;&lt;br/&gt;     根据我们的上篇文章，对于单一主键，在对象映射配置文件中使用 id标签即可完成配置。但是，往往有些主键并不是单一的，它可能由多个字段组合，那么此时就不能使用 id标签进行指定了。例如，我们有一张scores表，该表有三个字段，uid表示学生id，sub表示学生考试的学科，score表示该门考试成绩。那么确定一个学生的某门考试成绩就需要uid和usub，此时它们就是scores表的主键，因为它能唯一确定一行数据。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;/*定义scores实体类*/
public class Scores {
    private Score scoreId;    //主键
    private int score;
    //省略get，set方法
}
public class Score implements Serializable {
    private int userId;
    private String sub;
    //省略get，set方法
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;在这里，我们定义scores实体类，我们将主键封装成一个类score，该类必须继承接口Serializable ，最好还能实现它的两个方法equals和hashcode。然后就是我们的实体映射配置文件的编写：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;lt;class name=&quot;DbClasses.Scores&quot; table=&quot;scores&quot;&amp;gt;
    &amp;lt;composite-id name=&quot;scoreId&quot; class=&quot;DbClasses.Score&quot;&amp;gt;
        &amp;lt;key-property name=&quot;userId&quot; column=&quot;userId&quot;&amp;gt;&amp;lt;/key-property&amp;gt;
        &amp;lt;key-property name=&quot;sub&quot; column=&quot;sub&quot;&amp;gt;&amp;lt;/key-property&amp;gt;
    &amp;lt;/composite-id&amp;gt;
    &amp;lt;property name=&quot;score&quot; column=&quot;score&quot;&amp;gt;&amp;lt;/property&amp;gt;
&amp;lt;/class&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;对于组合主键，我们使用标签composite-id来配置，name和class属性分别指定主键类在实体类中的名称及其位置。该标签下的key-property标签则是用来指定主键成员对应于数据表中的具体字段的。我们运行程序，看看Hibernate为我们创建的表中是否有一个组合主键：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20171006090120064?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzUzMjY3MTg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;这里写图片描述&quot;/&gt;&lt;/p&gt;
&lt;p&gt;显然，在我们的scores表中，userId和sub的组合构成了该表的主键。这就是组合主键在Hibernate中的配置情况，组合主键还是比较常见的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;二、组件映射&lt;/strong&gt;&lt;br/&gt;     这里将要介绍的组件映射和上述介绍的主键映射名称相似，但确实完全不同的概念，需要予以区别。假设我们有一张person表：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20171006091201765?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzUzMjY3MTg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;这里写图片描述&quot;/&gt;&lt;/p&gt;
&lt;p&gt;person表中有主键id，name，age字段，还有三个地址字段（往往一个人有多个地址，我们要分别进行保存）。但是这样的一个表结构对应于我们的实体类如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;public class Person {
    private int id;
    private String name;
    private int age;
    private String address1;
    private String address2;
    private String address3;
    //省略get，set方法
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;对于这样的实体类来说，我们觉得他对于地址字段的处理是冗余的，假如某个人有十个地址，难道要在我们的实体类中配置十个属性吗？显然是不合理的，Hibernate允许我们像主键映射一样将所有的地址字段抽象出来一个类。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;public class Person {
    private int id;
    private String name;
    private int age;
    private Address address;
    //省略get，set方法
}
public class Address {
    private String address1;
    private String address2;
    private String address3;
    //省略get，set方法
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;重点在于我们的实体映射文件的配置，&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;lt;class name=&quot;DbClasses.Person&quot; table=&quot;person&quot;&amp;gt;
    &amp;lt;id name=&quot;id&quot; column=&quot;id&quot;&amp;gt;
        &amp;lt;generator class=&quot;native&quot;&amp;gt;&amp;lt;/generator&amp;gt;
    &amp;lt;/id&amp;gt;
    &amp;lt;property name=&quot;name&quot; column=&quot;name&quot;&amp;gt;&amp;lt;/property&amp;gt;
    &amp;lt;property name=&quot;age&quot; column=&quot;age&quot;&amp;gt;&amp;lt;/property&amp;gt;
    &amp;lt;!--映射的一个组件属性--&amp;gt;
    &amp;lt;component name=&quot;address&quot; class=&quot;DbClasses.Address&quot;&amp;gt;
        &amp;lt;property name=&quot;address1&quot; column=&quot;address1&quot;&amp;gt;&amp;lt;/property&amp;gt;
        &amp;lt;property name=&quot;address2&quot; column=&quot;address2&quot;&amp;gt;&amp;lt;/property&amp;gt;
        &amp;lt;property name=&quot;address3&quot; column=&quot;address3&quot;&amp;gt;&amp;lt;/property&amp;gt;
    &amp;lt;/component&amp;gt;
&amp;lt;/class&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;实体类中其他的属性照常配置，对于这个Address类型的属性，我们使用component标签进行配置，name和class分别指定组件名和其位置，在该标签下，使用property标签配置组件的成员对应于数据表中的字段。然后我们删除表，重新看看这次Hibernate为我们生成的表结构：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20171006092647079?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzUzMjY3MTg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;这里写图片描述&quot;/&gt;&lt;/p&gt;
&lt;p&gt;显然结果是一样的，我们使用组件映射的一个好处就在于在这个实体类中，对于数据表结构显得非常清晰，代码的封装性更好，方便查错。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;三、单向多对一的映射&lt;/strong&gt;&lt;br/&gt;     以上介绍的两种基本映射并不属于我们本篇将要介绍的关联映射，关联映射就是指在处理多张有关联的表时，我们的实体类的配置。所谓的多对一就是指，其中一张表的主键是另一张表的外键，例如：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20171006104251938?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzUzMjY3MTg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;这里写图片描述&quot;/&gt;&lt;/p&gt;
&lt;p&gt;我们有一张Student表，一张grade表，其中grade表的主键id是Student表的外键（grade），Student中的多条记录对应于grade的一条记录，所以这种表的关联又被称作多对一的关联关系。下面我们看看如何通过对实体类的配置达到构建这种多对一的数据表关联。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;public class Student {
    private int uId;
    private String name;
    private int age;
    private Grade grade;
    //省略get，set方法
}&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code&gt;public class Grade {
    private int id;
    private String grade;
    //省略get，set方法
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Student和Grade分别对应不同数据库表的两个实体类，但是Student实体类中有一个属性grade指向实体类Grade。实体类映射配置文件如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;lt;class name=&quot;DbClasses2.Student&quot; table=&quot;student&quot;&amp;gt;
    &amp;lt;id name=&quot;uId&quot; column=&quot;uid&quot;&amp;gt;
         &amp;lt;generator class=&quot;native&quot;&amp;gt;&amp;lt;/generator&amp;gt;
    &amp;lt;/id&amp;gt;
    &amp;lt;property name=&quot;name&quot;&amp;gt;&amp;lt;/property&amp;gt;
    &amp;lt;property name=&quot;age&quot;&amp;gt;&amp;lt;/property&amp;gt;
    &amp;lt;many-to-one name=&quot;grade&quot; class=&quot;DbClasses2.Grade&quot; column=&quot;grade_id&quot;&amp;gt;&amp;lt;/many-to-one&amp;gt;
&amp;lt;/class&amp;gt;

&amp;lt;class name=&quot;DbClasses2.Grade&quot; table=&quot;grade&quot;&amp;gt;
    &amp;lt;id name=&quot;id&quot; column=&quot;id&quot;&amp;gt;
        &amp;lt;generator class=&quot;native&quot;&amp;gt;&amp;lt;/generator&amp;gt;
    &amp;lt;/id&amp;gt;
    &amp;lt;property name=&quot;grade&quot; column=&quot;grade&quot;&amp;gt;&amp;lt;/property&amp;gt;
&amp;lt;/class&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Grade实体类的配置没什么变化，Student中使用many-to-one标签将本实体类中属性grade配置指向另一个实体类Grade，并用column指定外键名称。也就是当Hibernate根据映射配置文件创建数据表的时候，发现属性grade指向的是一个实体类Grade，于是把Grade表的主键关联到grade字段上。我们先运行程序看看HIbernate是否为我们创建了这种外键关联，然后通过插入数据进一步理解Hibernate在底层为我们做的事情。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20171006143448463?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzUzMjY3MTg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;这里写图片描述&quot;/&gt;&lt;/p&gt;
&lt;p&gt;显然，在分别创建Student和Grade表之后，Hibernate又向数据库发送了一条alter语句，该语句负责添加外键关联。下面我们看看能否利用外键获取到Grade表中的成绩。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;/*首先向表中插入信息*/
Student student = new Student();
student.setName(&quot;single&quot;);
student.setAge(21);

Grade grade = new Grade();
grade.setGrade(&quot;优秀&quot;);

student.setGrade(grade);

session.save(grade);
session.save(student);&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;我们知道，一个实体类的对象对应于数据表的一条记录，那么grade代表Grade表的一条记录，而该对象作为属性值被赋值给Student中的grade属性则表示它将自己的引用交给了Student的外键字段，也就是说student这条记录可以通过外键字段找到grade代表的这条记录。有点绕，但是学过数据库原理的应该不难理解。下面我们看，如何利用外键获取对应的Grade表中的一条完整记录。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Student student = (Student)session.get(Student.class,1);
Grade grade = student.getGrade();
System.out.println(grade.getId()+&quot;:&quot;+grade.getGrade());&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;输出结果：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;1:优秀&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;显然，我们通过Student返回的grade对象代表的就是基于Student外键字段值在Grade表中的一条数据。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;四、单向一对多的映射&lt;/strong&gt;&lt;br/&gt;     单向many-to-one关联是最常见的单向关联关系，其逻辑也趋近与我们的Sql语言，还算比较好理解。而对于单向一对多的映射则是其的一个逆向的逻辑，相对而言比较难以理解。这个多对一和一对多之间有个很明显的区别，对于多对一的情况，我们在得到Student对象代表的一条数据记录时，可以利用外键得到相对应Grade表中的一条记录。但是反过来，如果我们想知道对于Grade表的某条记录究竟有多少Student表记录予以对应呢？起码这是多对一无法直接解决的，那么我们的一对多则着重解决的就是这么一个问题。&lt;/p&gt;
&lt;p&gt;     所谓的一对多就是利用一的一方完成这种外键关联的构建。我们先看实体类的定义：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;/*student实体类的定义*/
public class Student {
    private int uId;
    private String name;
    private int age;
    //省略get，set方法
}&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code&gt;public class Grade {
    private int id;
    private String grade;
    //用于给其他表映射外键
    private Set&amp;lt;Student&amp;gt; students = new HashSet&amp;lt;Student&amp;gt;(0); 
    //省略get，set方法
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这里我们使用set集合，其实无论是list或者map都是可以的，旨在保存多的一方的记录。看似毫无关联的两张表却可以通过配置文件完成外键关联操作。有关Student实体的映射配置部分代码和平常是一样的，没有变动此处不再贴出，我们主要看Grade实体类的映射配置代码：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;lt;class name=&quot;DbClasses2.Grade&quot; table=&quot;grade&quot;&amp;gt;
    &amp;lt;id name=&quot;id&quot; column=&quot;id&quot;&amp;gt;
        &amp;lt;generator class=&quot;native&quot;&amp;gt;&amp;lt;/generator&amp;gt;
    &amp;lt;/id&amp;gt;
    &amp;lt;property name=&quot;grade&quot;/&amp;gt;
    &amp;lt;set name=&quot;students&quot;&amp;gt;
        &amp;lt;key column=&quot;grade_id&quot;&amp;gt;&amp;lt;/key&amp;gt;
        &amp;lt;one-to-many class=&quot;DbClasses2.Student&quot;&amp;gt;&amp;lt;/one-to-many&amp;gt;
    &amp;lt;/set&amp;gt;
&amp;lt;/class&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;在Grade的实体类映射配置文件中，set标签用于配置属性students 。也就是说，当Hibernate加载到这里的时候，两张表单独创建完成之后，我要回到这里来，这里有一个一对多的外键需要更新，该外键的表载体在Student中，外键的名称是grade_id，于是它就会去更新Student的表结构，为它添加外键的引用，而引用的表就是Grade。这里还看不出set的作用，我们先看Hibernate为我们创建的表关联是否正确，然后通过存取数据来感受set的作用。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20171006152329143?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzUzMjY3MTg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;这里写图片描述&quot;/&gt;&lt;/p&gt;
&lt;p&gt;显然，Hibernate是先单独创建两张表，然后发送alter语句添加外键引用。那究竟set有什么用呢？它里面装的又是什么呢？&lt;br/&gt;假设两张表中有如下信息：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20171006152635318?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzUzMjY3MTg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;这里写图片描述&quot;/&gt;&lt;/p&gt;
&lt;p&gt;下面我们通过程序获取成绩为优秀的所有Student。这一点在多对一映射中是做不到的。多对一只能知道某个学生的成绩是什么，但是无法直接知道成绩为什么的所有学生。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Grade grade = (Grade)session.get(Grade.class,1);
Set&amp;lt;Student&amp;gt; students = grade.getStudents();
//遍历输出所有学生姓名
Iterator&amp;lt;Student&amp;gt; iterator = students.iterator();
while(iterator.hasNext()){
            System.out.println(iterator.next().getName());
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;输出结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20171006153448078?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzUzMjY3MTg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;这里写图片描述&quot;/&gt;&lt;/p&gt;
&lt;p&gt;从Hibernate的日志输出中，我们可以很显然的看出来，首先Hibernate向数据库发送第一条select语句查询id为1的grade记录，然后默默的又一次发送select语句，不过这次是Student表，查询所有grade_id为1的记录并通过反射全部添加到set集合中。于是我们可以遍历输出所有Student信息。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;五、双向一对多的映射&lt;/strong&gt;&lt;br/&gt;     双向一对多或者双向多对一都是一个意思，这种形式的关联映射操作就是上述的两种映射的结合，在多的一段配置多对一映射，在一的一段配置一对多映射。这样，我们既可以从多的一端通过外键获取到一的一端的详细记录又可以从一的一端通过自己的主键获取到多的一端的所有对应记录。这种方式比较简单，此处不再赘述，我们最后看看两个关键字cascade和inverse的含义和用法。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;六、级联映射&lt;/strong&gt;&lt;br/&gt;     我们首先看级联操作，级联就是在两张具有关联关系的表操作的时候，通过操作其中一张表级联的更新了另一张表。先看个例子：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;lt;many-to-one name=&quot;grade&quot; class=&quot;DbClasses2.Grade&quot; column=&quot;grade_id&quot; cascade=&quot;save-update&quot; /&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;我们在多的一端配置cascade等于save-update，意味着我们在多的一端进行save和update的时候，数据会自动更新到Grade表中。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Student stu1 = new Student();
stu1.setName(&quot;single&quot;);
stu1.setAge(21);

Grade grade = new Grade();
grade.setGrade(&quot;优秀&quot;);

stu1.setGrade(grade);

//session.save(grade);
session.save(stu1);&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;上述的这段代码完成的是一个插入操作，如果没有设置级联的话，该段程序必然报错，因为grade表中无任何数据，而student代表的一条记录的grade_id的字段却被强行插入数值1，自然会报错（外键1在grade表中找不到）。但是我们配置了级联就不一样了，Hibernate会先保存grade到数据库中，然后再插入student这条记录。从Hibernate的输出日志中也可以看出来：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20171006210021626?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzUzMjY3MTg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;这里写图片描述&quot;/&gt;&lt;/p&gt;
&lt;p&gt;当然，除了可以在多的一端配置级联，我们也可以在一的一端配置级联，让一的一端也可以级联的操作多的一端。例如：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;lt;set name=&quot;students&quot; cascade=&quot;save-update&quot;&amp;gt;
      &amp;lt;key column=&quot;grade_id&quot;&amp;gt;&amp;lt;/key&amp;gt;
      &amp;lt;one-to-many class=&quot;DbClasses2.Student&quot;&amp;gt;&amp;lt;/one-to-many&amp;gt;
&amp;lt;/set&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;给一的一端配置级联，然后我么通过级联来保存多的一端的数据。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Grade grade = new Grade();
grade.setGrade(&quot;优秀&quot;);

Student stu1  = new Student();
stu1.setName(&quot;single&quot;);
stu1.setAge(21);

Student stu2 = new Student();
stu2.setName(&quot;cyy&quot;);
stu2.setAge(20);

grade.getStudents().add(stu1);
grade.getStudents().add(stu2);

//session.save(stu1);sesion.save(stu2);
session.save(grade);&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这段代码在没有配置级联的状态下，必然会报错。首先Hibernate根据配置文件创建了两张表及其之间的关联关系。执行save的时候会将grade保存到数据表中，然后Hibernate会查看自己set集合中对应的多端的记录并根据这些记录去更新多端表中的外键值，当然如果没有保存到student表中，自然会报错。我们看看级联是怎么做的：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20171007093918240?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzUzMjY3MTg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;这里写图片描述&quot;/&gt;&lt;/p&gt;
&lt;p&gt;显然，在保存好grade之后，立马将自己set集合中的Student记录插入到Student表中，然后通过update语句更新他们的外键值。而没有设置级联的话，第二三条Sql语句是没有的，报错那也是自然的。关于级联，只要理解了它的本质，这些操作也都是可以理解的，本质上就是在做插入或者修改操作的时候如果发现自己代表的这条记录中有外部关联表的内容，那么则先完成对外部表的更新。这就是级联，级联的操作和自己关联的外部表，当然cascade也不止这一个参数值：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;cascade=&quot;all|none|save-update|delete&quot;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;其中，none表示不级联，all表示所有操作都级联，save-update 表示保存和修改操作进行级联，delete表示删除的时候级联删除。本质都类似，此处不再赘述。&lt;/p&gt;
&lt;p&gt;至此，有关关联映射的第一部分介绍完了，下篇将继续介绍未完的其他关联映射的操作。总结不到之处，望指出！&lt;/p&gt;
</description>
<pubDate>Sat, 07 Oct 2017 02:51:00 +0000</pubDate>
<dc:creator>Single_Yam</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/yangming1996/p/7634307.html</dc:identifier>
</item>
<item>
<title>httpd网页身份认证 - 骏马金龙</title>
<link>http://www.cnblogs.com/f-ck-need-u/p/7634205.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/f-ck-need-u/p/7634205.html</guid>
<description>&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;a&gt;&lt;span&gt;本文目录：&lt;/span&gt;&lt;/a&gt;&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;a href=&quot;http://www.cnblogs.com/f-ck-need-u/p/7634205.html#blog1.1&quot;&gt;&lt;span&gt;1.1 htpasswd命令&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;a href=&quot;http://www.cnblogs.com/f-ck-need-u/p/7634205.html#blog1.2&quot;&gt;&lt;span&gt;1.2 身份认证类基本指令&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;a href=&quot;http://www.cnblogs.com/f-ck-need-u/p/7634205.html#blog1.3&quot;&gt;&lt;span&gt;1.3 Require指令&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;a href=&quot;http://www.cnblogs.com/f-ck-need-u/p/7634205.html#blog1.4&quot;&gt;&lt;span&gt;1.4 web身份认证示例&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;httpd对web身份认证的支持很丰富，提供的控制也非常细致。无疑，功能丰富意味着模块多。关于完整的模块，见&lt;span&gt;&lt;a href=&quot;http://httpd.apache.org/docs/2.4/mod/&quot;&gt;&lt;span&gt;http://httpd.apache.org/docs/2.4/mod/&lt;/span&gt;&lt;/a&gt;&lt;/span&gt; ，其中mod_authX_XXX都是和认证有关的模块。要实现最基本的帐户认证访问控制，只需几个常见的模块即可：mod_authz_core,mod_authz_user,mod_authz_host...。&lt;/p&gt;

&lt;h2 id=&quot;1-1-htpasswd-&quot;&gt;1.1 htpasswd命令&lt;/h2&gt;
&lt;p&gt;htpasswd用于为指定用户生成基于网页用户身份认证的密码，由httpd-tools软件包提供。支持3种加密算法：MD5、SHA和系统上的crypt()函数，不指定算法时，默认为md5。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;htpasswd [ -c ] [ -m ] [ -D ] passwdfile username
htpasswd -b [ -c ] [ -m | &lt;span class=&quot;hljs-operator&quot;&gt;-d&lt;/span&gt; | -p | &lt;span class=&quot;hljs-operator&quot;&gt;-s&lt;/span&gt; ] [ -D ] passwdfile username password
htpasswd -n [ -m | &lt;span class=&quot;hljs-operator&quot;&gt;-d&lt;/span&gt; | &lt;span class=&quot;hljs-operator&quot;&gt;-s&lt;/span&gt; | -p ] username
htpasswd -nb [ -m | &lt;span class=&quot;hljs-operator&quot;&gt;-d&lt;/span&gt; | &lt;span class=&quot;hljs-operator&quot;&gt;-s&lt;/span&gt; | -p ] username password
选项说明：
passwdfile：包含用户名及其密码的用户密码文件。如果使用了&lt;span class=&quot;hljs-string&quot;&gt;&quot;-c&quot;&lt;/span&gt;选项，则会创建或覆盖文件。不使用&lt;span class=&quot;hljs-string&quot;&gt;&quot;-n&quot;&lt;/span&gt;选项时必须指定passwdfile参数。
username：为指定的用户名创建密码。如果该用户记录已存在，则更新。
-c：创建用户密码文件passwdfile，如果文件已经存在则会覆盖已存在的文件。不能和&lt;span class=&quot;hljs-string&quot;&gt;&quot;-n&quot;&lt;/span&gt;一起使用。
-n：在标准输出中输出结果，而不是将其写入到用户密码文件中。该选项会忽略用户密码文件passwdfile参数。不能和&lt;span class=&quot;hljs-string&quot;&gt;&quot;-c&quot;&lt;/span&gt;选项一起使用。
-m：使用MD5加密算法。默认。
&lt;span class=&quot;hljs-operator&quot;&gt;-d&lt;/span&gt;：使用crypt()函数计算密码，不安全。
&lt;span class=&quot;hljs-operator&quot;&gt;-s&lt;/span&gt;：使用SHA加密算法。安全。
-P：强制不加密密码，保持明文状态，不安全。
-B：强制bcrypt加密密码，非常安全。
-D：从用户密码文件中删除指定的用户及其密码。
-b：使用批处理模式，即非交互模式，可以直接待加密的传递明文密码。
password：指定要输入的明文密码。只能在批处理模式中使用，即和&lt;span class=&quot;hljs-string&quot;&gt;&quot;-b&quot;&lt;/span&gt;一起使用。
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;p&gt;(1).使用&quot;-n&quot;选项直接将结果输出到标准输出而不创建passwdfile。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;[root@xuexi ~]
&lt;span class=&quot;hljs-keyword&quot;&gt;New&lt;/span&gt; password: 
Re-type &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; password: 
Jim:ZKHud9tziGucY
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;(2).使用批处理模式直接传递密码。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;[root&lt;span class=&quot;hljs-variable&quot;&gt;@xuexi&lt;/span&gt; ~]
&lt;span class=&quot;hljs-constant&quot;&gt;Jim&lt;/span&gt;&lt;span class=&quot;hljs-symbol&quot;&gt;:r&lt;/span&gt;.&lt;span class=&quot;hljs-constant&quot;&gt;BF8RVw56BOA&lt;/span&gt;

&lt;span class=&quot;hljs-constant&quot;&gt;Jim&lt;/span&gt;&lt;span class=&quot;hljs-symbol&quot;&gt;:xXoNgOS8nN3LQ&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;发现密码完全是随机的。&lt;/p&gt;
&lt;p&gt;(3).创建用户密码文件passwdfile。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;[root&lt;span class=&quot;hljs-variable&quot;&gt;@xuexi&lt;/span&gt; ~]
[root&lt;span class=&quot;hljs-variable&quot;&gt;@xuexi&lt;/span&gt; ~]
&lt;span class=&quot;hljs-constant&quot;&gt;Bob&lt;/span&gt;&lt;span class=&quot;hljs-symbol&quot;&gt;:fvUxzB3kcnDPk&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;(4).删除用户文件中的某用户。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;[root&lt;span class=&quot;hljs-variable&quot;&gt;@xuexi&lt;/span&gt; ~]
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;(5).使用sha和md5加密算法计算密码。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;[root&lt;span class=&quot;hljs-variable&quot;&gt;@xuexi&lt;/span&gt; ~]
[root&lt;span class=&quot;hljs-variable&quot;&gt;@xuexi&lt;/span&gt; ~]
Bob:&lt;span class=&quot;hljs-variable&quot;&gt;$apr1&lt;/span&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$bllkodFt&lt;/span&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$GUmeb8hXngOAschs1SBgq0&lt;/span&gt;
[root&lt;span class=&quot;hljs-variable&quot;&gt;@xuexi&lt;/span&gt; ~]
[root&lt;span class=&quot;hljs-variable&quot;&gt;@xuexi&lt;/span&gt; ~]
Bob:&lt;span class=&quot;hljs-string&quot;&gt;{SHA}&lt;/span&gt;fEqNCco3Yq9h5ZUglD3CZJT4lBs=
&lt;/code&gt;
&lt;/pre&gt;

&lt;h2 id=&quot;1-2-&quot;&gt;1.2 身份认证类基本指令&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;AuthType&lt;/code&gt;：指定web身份认证的类型。有效值为none、basic、digest以及form。通常最基本的认证使用的是文件认证，所以通常使用basic。&lt;br/&gt;&lt;code&gt;AuthName&lt;/code&gt;：设置身份认证时的提示信息。&lt;br/&gt;&lt;code&gt;AuthUserFile file-path&lt;/code&gt;：指定web用户认证列表。由htpasswd命令生成。&lt;br/&gt;&lt;code&gt;AuthGroupFile file-path&lt;/code&gt;：指定组认证文件，文件中分组格式为&quot;mygroup: Jim Bob Alice&quot;。如果文件路径为相对路径，则相对于ServerRoot&lt;/p&gt;
&lt;p&gt;基于basic类型的认证就这么几个指令，最主要的还是require指令的使用。更多的认证方法见官方手册的auth类模块。&lt;/p&gt;

&lt;h2 id=&quot;1-3-require-&quot;&gt;1.3 Require指令&lt;/h2&gt;
&lt;p&gt;该指令只能放在Directory容器中，用于控制对目录的访问权限。它的主要功能是由mod_authz_core模块提供，但有些身份认证类模块也提供它额外的功能，这时它可以放在&amp;lt; Directory &amp;gt;、&amp;lt; Files &amp;gt;或&amp;lt; Location &amp;gt;容器中。&lt;/p&gt;
&lt;p&gt;主要功能：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Require all granted&lt;br/&gt;无条件允许所有人访问该目录&lt;/li&gt;
&lt;li&gt;Require all denied&lt;br/&gt;无条件拒绝所有人访问该目录&lt;/li&gt;
&lt;li&gt;Require env env-var [env-var] ...&lt;br/&gt;只有给定的环境变量var-env已经定义才允许访问该目录&lt;/li&gt;
&lt;li&gt;Require method http-method [http-method] ...&lt;br/&gt;只有给定的HTTP请求方法才允许访问该目录，如只允许GET才能访问&lt;/li&gt;
&lt;li&gt;Require expr expression&lt;br/&gt;只有给定的表达式为true才允许访问该目录&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;身份认证类模块提供的require指令功能包括：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;mod_authz_user为require指令提供的功能：
&lt;ul&gt;&lt;li&gt;Require user userid [userid] ...：认证列表中只有指定的userid才能访问&lt;/li&gt;
&lt;li&gt;Require valid-user：认证列表中的所有用户都可以访问&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;mod_authz_groupfile为require指令提供的功能：
&lt;ul&gt;&lt;li&gt;Require group group1 [group2] ...：指定组内的用户都可以访问&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;本地文件系统身份参考类：
&lt;ul&gt;&lt;li&gt;Require file-owner：要求web用户名必须和请求文件的uid对应的username完全相同&lt;/li&gt;
&lt;li&gt;Require file-group：要求web用户名必须为请求文件的gid组中的一员&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;mod_authz_host为require指令提供的ip和host功能：
&lt;ul&gt;&lt;li&gt;Require ip 192.168.1.104 192.168.1.205&lt;/li&gt;
&lt;li&gt;Require ip 10.1&lt;/li&gt;
&lt;li&gt;Require ip 10 172.20 192.168.2&lt;/li&gt;
&lt;li&gt;Require ip 10.1.0.0/255.255.0.0&lt;/li&gt;
&lt;li&gt;Require ip 10.1.0.0/16&lt;/li&gt;
&lt;li&gt;Require host www.example.org&lt;/li&gt;
&lt;li&gt;Require host example.org&lt;/li&gt;
&lt;li&gt;Require host .net example.edu&lt;/li&gt;
&lt;li&gt;Require local&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;可以在require指令后紧跟not关键字，表示取反。例如&quot;require not group group1&quot;、&quot;require not local&quot;等。&lt;/p&gt;
&lt;p&gt;还支持require条件容器，包括&amp;lt; RequireAll &amp;gt;、&amp;lt; RequireAny &amp;gt;和&amp;lt; RequireNone &amp;gt;，当require指令没有写在任何Require容器中时，它们隐式包含在一个&amp;lt; RequireAny &amp;gt;容器中。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&amp;lt; RequireAll &amp;gt;：其内封装的Require指令必须全都不能失败，且至少有一个成功时，该容器成功。如果其内所有指令既不成功又不失败，则该容器中立。其余所有情况都会导致该容器失败。&lt;/li&gt;
&lt;li&gt;&amp;lt; RequireAny &amp;gt;：其内封装的Require指令只要有一个成功，该容器就成功。如果其内所有指令既不成功又不失败，则该容器中立。其余所有情况(即全部失败时)都会导致该容器失败。&lt;/li&gt;
&lt;li&gt;&amp;lt; RequireNone &amp;gt;：其内封装的Require指令只要有一个成功时该容器就失败，否则就中立。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;1-4-web-&quot;&gt;1.4 web身份认证示例&lt;/h2&gt;
&lt;p&gt;以最常见的Basic认证方式为例。支持基于用户的认证和基于组的认证。&lt;/p&gt;
&lt;h3 id=&quot;1-4-1-&quot;&gt;1.4.1 基于用户的认证&lt;/h3&gt;
&lt;p&gt;先创建一个web用户及其密码列表文件。其内有4个用户：Jim、Bob、Alice和Tom。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;[root&lt;span class=&quot;hljs-variable&quot;&gt;@xuexi&lt;/span&gt; ~]
[root&lt;span class=&quot;hljs-variable&quot;&gt;@xuexi&lt;/span&gt; ~]
[root&lt;span class=&quot;hljs-variable&quot;&gt;@xuexi&lt;/span&gt; ~]
[root&lt;span class=&quot;hljs-variable&quot;&gt;@xuexi&lt;/span&gt; ~]
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;修改httpd配置文件，假设只有www.a.com中的a.com目录才需要认证且只有Jim和Bob可以认证，而其他目录以及www.b.com不需要认证，其他用户认证不通过。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;VirtualHost 192.168.100.14:80&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;hljs-keyword&quot;&gt;&lt;span class=&quot;hljs-common&quot;&gt;ServerName&lt;/span&gt;&lt;/span&gt; www.a.com
        &lt;span class=&quot;hljs-keyword&quot;&gt;&lt;span class=&quot;hljs-common&quot;&gt;DocumentRoot&lt;/span&gt;&lt;/span&gt; /usr/local/apache/htdocs/a.com
        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;Directory /usr/local/apache/htdocs/a.com&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;hljs-keyword&quot;&gt;AllowOverride&lt;/span&gt; Authconfig
                &lt;span class=&quot;hljs-keyword&quot;&gt;AuthType&lt;/span&gt; Basic
                &lt;span class=&quot;hljs-keyword&quot;&gt;AuthName&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;please enter your name &amp;amp; passwd&quot;&lt;/span&gt;
                &lt;span class=&quot;hljs-keyword&quot;&gt;AuthUserFile&lt;/span&gt; a_com.pass
                &lt;span class=&quot;hljs-keyword&quot;&gt;Require&lt;/span&gt; user Jim Bob
        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/Directory&amp;gt;&lt;/span&gt;
&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/VirtualHost&amp;gt;&lt;/span&gt;

&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;VirtualHost 192.168.100.14:80&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;hljs-keyword&quot;&gt;&lt;span class=&quot;hljs-common&quot;&gt;ServerName&lt;/span&gt;&lt;/span&gt; www.b.com
        &lt;span class=&quot;hljs-keyword&quot;&gt;&lt;span class=&quot;hljs-common&quot;&gt;DocumentRoot&lt;/span&gt;&lt;/span&gt; /usr/local/apache/htdocs/b.com
&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/VirtualHost&amp;gt;&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;此处AuthUserFile使用的相对路径，所以该文件必须放在ServerRoot(我的测试环境ServerRoot为/usr/local/apache)下。且Require user行可以替换为&quot;Require valid-user&quot;表示a_com.pass中的所有用户都允许认证。&lt;/p&gt;
&lt;p&gt;然后重启httpd，并修改客户端hosts文件。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;192.168.100.14 www.a.com www.b.com
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;再测试访问。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/733013/201710/733013-20171007112848599-2136656488.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;1-4-2-&quot;&gt;1.4.2 基于组的认证&lt;/h3&gt;
&lt;p&gt;基于组的认证只需创建一个组文件，文件中包含的是组名和组中用户成员。&lt;/p&gt;
&lt;p&gt;例如，将Tom和Alice加入到allow组，使它们也可以访问a.com目录。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;[root@xuexi ~]# echo &lt;span class=&quot;hljs-string&quot;&gt;'allow:Tom Alice'&lt;/span&gt; &amp;gt;&lt;span class=&quot;hljs-regexp&quot;&gt;/usr/&lt;/span&gt;local/apache/auth_group
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;修改配置文件，例如：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;VirtualHost 192.168.100.14:80&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;hljs-keyword&quot;&gt;&lt;span class=&quot;hljs-common&quot;&gt;ServerName&lt;/span&gt;&lt;/span&gt; www.a.com
        &lt;span class=&quot;hljs-keyword&quot;&gt;&lt;span class=&quot;hljs-common&quot;&gt;DocumentRoot&lt;/span&gt;&lt;/span&gt; /usr/local/apache/htdocs/a.com
        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;Directory /usr/local/apache/htdocs/a.com&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;hljs-keyword&quot;&gt;AllowOverride&lt;/span&gt; Authconfig
                &lt;span class=&quot;hljs-keyword&quot;&gt;AuthType&lt;/span&gt; Basic
                &lt;span class=&quot;hljs-keyword&quot;&gt;AuthName&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;please enter your name &amp;amp; passwd&quot;&lt;/span&gt;
                &lt;span class=&quot;hljs-keyword&quot;&gt;AuthUserFile&lt;/span&gt; a_com.pass
                &lt;span class=&quot;hljs-keyword&quot;&gt;AuthGroupFile&lt;/span&gt; auth_group
                &lt;span class=&quot;hljs-keyword&quot;&gt;Require&lt;/span&gt; user Jim Bob
                &lt;span class=&quot;hljs-keyword&quot;&gt;Require&lt;/span&gt; group allow
        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/Directory&amp;gt;&lt;/span&gt;
&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/VirtualHost&amp;gt;&lt;/span&gt;

&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;VirtualHost 192.168.100.14:80&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;hljs-keyword&quot;&gt;&lt;span class=&quot;hljs-common&quot;&gt;ServerName&lt;/span&gt;&lt;/span&gt; www.b.com
        &lt;span class=&quot;hljs-keyword&quot;&gt;&lt;span class=&quot;hljs-common&quot;&gt;DocumentRoot&lt;/span&gt;&lt;/span&gt; /usr/local/apache/htdocs/b.com
&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/VirtualHost&amp;gt;&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;再重启进行测试。&lt;/p&gt;
&lt;h3&gt;&lt;a href=&quot;http://www.cnblogs.com/f-ck-need-u/p/7048359.html&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;回到Linux系列文章大纲：http://www.cnblogs.com/f-ck-need-u/p/7048359.html&lt;/span&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;h3&gt;&lt;a href=&quot;http://www.cnblogs.com/f-ck-need-u/p/7576137.html&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;回到网站架构系列文章大纲：http://www.cnblogs.com/f-ck-need-u/p/7576137.html&lt;/span&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;h3&gt;&lt;a href=&quot;http://www.cnblogs.com/f-ck-need-u/p/7586194.html&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;回到数据库系列文章大纲：http://www.cnblogs.com/f-ck-need-u/p/7586194.html&lt;/span&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;h3&gt;&lt;a href=&quot;http://www.cnblogs.com/f-ck-need-u/p/7634205.html&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;转载请注明出处：http://www.cnblogs.com/f-ck-need-u/p/7634205.html&lt;/span&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;h3&gt;&lt;span&gt;注：若您觉得这篇文章还不错请点击右下角推荐，您的支持能激发作者更大的写作热情，非常感谢！&lt;/span&gt;&lt;/h3&gt;
</description>
<pubDate>Sat, 07 Oct 2017 02:05:00 +0000</pubDate>
<dc:creator>骏马金龙</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/f-ck-need-u/p/7634205.html</dc:identifier>
</item>
<item>
<title>最接近原生APP体验的高性能前端框架——MUI - 听醒木一声收</title>
<link>http://www.cnblogs.com/lihaohai/p/7634094.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/lihaohai/p/7634094.html</guid>
<description>&lt;blockquote readability=&quot;14&quot;&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;  前  言&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;MUI有三大特点：&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;轻量&lt;/h3&gt;
&lt;p&gt;追求性能体验，是我们开始启动MUI项目的首要目标，轻量必然是重要特征；&lt;/p&gt;
&lt;p&gt;MUI不依赖任何第三方JS库，压缩后的JS和CSS文件仅有100+K和60+K&lt;/p&gt;
&lt;h3&gt;原生UI&lt;/h3&gt;
&lt;p&gt;鉴于之前的很多前端框架（特别是响应式布局的框架），UI控件看起来太像网页，没有原生感觉，因此追求原生UI感觉也是我们的重要目标&lt;/p&gt;
&lt;p&gt;MUI以iOS平台UI为基础，补充部分Android平台特有的UI控件&lt;/p&gt;
&lt;h3&gt;流畅体验&lt;/h3&gt;
&lt;p&gt;下拉刷新，侧滑导航，滑动触发操作菜单&lt;/p&gt;
&lt;/blockquote&gt;

&lt;table border=&quot;0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;  1、新手指南&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;h2&gt;&lt;span&gt;&lt;span class=&quot;autonum&quot; title=&quot;&quot; data-original-title=&quot;&quot;&gt;1.1  &lt;/span&gt;&lt;span&gt;&lt;strong class=&quot;135brush&quot; data-brushtype=&quot;text&quot;&gt;快速体验&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;

&lt;h3&gt;1. 下载Hello mui App&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://dcloud.io/hellomui/&quot;&gt;点击下载&lt;/a&gt; 已打包好的Hello mui 手机app，直接在手机上体验mui的控件UI及能力展示；&lt;/p&gt;

&lt;h3&gt;2. 创建Hello mui工程&lt;/h3&gt;

&lt;p&gt;可从&lt;a href=&quot;http://www.dcloud.io/&quot;&gt;https://www.dcloud.io&lt;/a&gt;下载Hbuilder，选择新建“移动APP”，并选择“Hello MUI”工程模板，创建工程；然后通过数据线将手机连接上电脑，点击运行，就可以在手机上体验MUI的各项能力。&lt;/p&gt;

&lt;h2&gt;&lt;span&gt;&lt;span class=&quot;autonum&quot; title=&quot;&quot; data-original-title=&quot;&quot;&gt;1.2&lt;/span&gt;&lt;span&gt;&lt;strong class=&quot;135brush&quot; data-brushtype=&quot;text&quot;&gt;快速构建页面&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;

&lt;h3&gt;1. 新建含mui的HTML文件&lt;/h3&gt;
&lt;p&gt;在Hbuilder中，新建HTML文件，选择”含mui的HTML“模板，可以快速生成mui页面模板，该模板默认处理了mui的js、css资源引用。&lt;/p&gt;
&lt;h3&gt;2.输入mheader&lt;/h3&gt;
&lt;p&gt;顶部标题栏是每个页面都必需的内容，在Hbuilder中输入mheader，可以快速生成顶部导航栏。&lt;/p&gt;
&lt;h3&gt;3.输入mbody&lt;/h3&gt;
&lt;p&gt;除顶部导航、底部选项卡两个控件之外，其它控件都建议放在&lt;code&gt;.mui-content&lt;/code&gt;控件内，在Hbuilder中输入mbody，可快速生成包含&lt;code&gt;.mui-content&lt;/code&gt;的代码块。&lt;/p&gt;
&lt;h3&gt;4.完整代码块请参考&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1212190/201710/1212190-20171007075304411-1062229514.gif&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;table border=&quot;0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;  2、 UI组件&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;　　以iOS 7为基础，补充部分Android特有控件&lt;/p&gt;
&lt;p&gt;　　下面介绍常用的组件&lt;/p&gt;

&lt;h2&gt;&lt;span&gt;&lt;span class=&quot;autonum&quot; title=&quot;&quot; data-original-title=&quot;&quot;&gt;2.1&lt;/span&gt;&lt;span&gt;&lt;strong class=&quot;135brush&quot; data-brushtype=&quot;text&quot;&gt;折叠面板&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;

&lt;p class=&quot;component-description&quot;&gt;　　折叠面板从二级列表中演化而来，dom结构和二级列表类似，如下：&lt;/p&gt;
&lt;p class=&quot;component-description&quot;&gt;　　&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;　　&amp;lt;&lt;/span&gt;&lt;span&gt;ul &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;mui-table-view&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; 
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;mui-table-view-cell mui-collapse&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;a &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;mui-navigate-right&quot;&lt;/span&gt;&lt;span&gt; href&lt;/span&gt;&lt;span&gt;=&quot;#&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;面板1&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;mui-collapse-content&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;面板1子内容&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;ul&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt; 　　可以在折叠面板中放置任何内容；折叠面板默认收缩，若希望某个面板默认展开，只需要在包含&lt;code&gt;.mui-collapse&lt;/code&gt;类的&lt;code&gt;li&lt;/code&gt;节点上，增加&lt;code&gt;.mui-active&lt;/code&gt;类即可；mui官网中的方法说明，使用的就是折叠面板控件。&lt;/p&gt;

&lt;h2&gt;&lt;span&gt;&lt;span class=&quot;autonum&quot; title=&quot;&quot; data-original-title=&quot;&quot;&gt;2.2&lt;/span&gt;&lt;span&gt;图片轮播&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;

&lt;p class=&quot;component-description&quot;&gt;　　图片轮播继承自&lt;a href=&quot;http://dev.dcloud.net.cn/mui/ui/#slide&quot;&gt;slide插件&lt;/a&gt;，因此其DOM结构、事件均和slide插件相同；&lt;/p&gt;
&lt;h4&gt;　　DOM结构&lt;/h4&gt;
&lt;p&gt;　　默认不支持循环播放，DOM结构如下：&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;　　&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;mui-slider&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
 　　 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;mui-slider-group&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
   　　 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;mui-slider-item&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;a &lt;/span&gt;&lt;span&gt;href&lt;/span&gt;&lt;span&gt;=&quot;#&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;img &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;1.jpg&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
   　　 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;mui-slider-item&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;a &lt;/span&gt;&lt;span&gt;href&lt;/span&gt;&lt;span&gt;=&quot;#&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;img &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;2.jpg&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
   　　 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;mui-slider-item&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;a &lt;/span&gt;&lt;span&gt;href&lt;/span&gt;&lt;span&gt;=&quot;#&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;img &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;3.jpg&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
   　　 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;mui-slider-item&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;a &lt;/span&gt;&lt;span&gt;href&lt;/span&gt;&lt;span&gt;=&quot;#&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;img &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;4.jpg&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
　　  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
　　&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p class=&quot;component-description&quot;&gt; &lt;/p&gt;
&lt;p class=&quot;component-description&quot;&gt;　　假设当前图片轮播中有1、2、3、4四张图片，从第1张图片起，依次向左滑动切换图片，当切换到第4张图片时，继续向左滑动，接下来会有两种效果：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;支持循环：左滑，直接切换到第1张图片；&lt;/li&gt;
&lt;li&gt;不支持循环：左滑，无反应，继续显示第4张图片，用户若要显示第1张图片，必须连续向右滑动切换到第1张图片；&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;　　当显示第1张图片时，继续右滑是否显示第4张图片，是同样问题；这个问题的实现需要通过&lt;code&gt;.mui-slider-loop&lt;/code&gt;类及DOM节点来控制；&lt;/p&gt;

&lt;p class=&quot;component-description&quot;&gt;　　若要支持循环，则需要在&lt;code&gt;.mui-slider-group&lt;/code&gt;节点上增加&lt;code&gt;.mui-slider-loop&lt;/code&gt;类，同时需要重复增加2张图片，图片顺序变为：4、1、2、3、4、1，代码示例如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;mui-slider&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;mui-slider-group mui-slider-loop&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;支持循环，需要重复图片节点&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;mui-slider-item mui-slider-item-duplicate&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;a &lt;/span&gt;&lt;span&gt;href&lt;/span&gt;&lt;span&gt;=&quot;#&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;img &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;4.jpg&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;mui-slider-item&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;a &lt;/span&gt;&lt;span&gt;href&lt;/span&gt;&lt;span&gt;=&quot;#&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;img &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;1.jpg&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;mui-slider-item&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;a &lt;/span&gt;&lt;span&gt;href&lt;/span&gt;&lt;span&gt;=&quot;#&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;img &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;2.jpg&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;mui-slider-item&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;a &lt;/span&gt;&lt;span&gt;href&lt;/span&gt;&lt;span&gt;=&quot;#&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;img &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;3.jpg&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;mui-slider-item&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;a &lt;/span&gt;&lt;span&gt;href&lt;/span&gt;&lt;span&gt;=&quot;#&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;img &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;4.jpg&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;支持循环，需要重复图片节点&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;mui-slider-item mui-slider-item-duplicate&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;a &lt;/span&gt;&lt;span&gt;href&lt;/span&gt;&lt;span&gt;=&quot;#&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;img &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;1.jpg&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;　　JS Method&lt;/h4&gt;
&lt;p&gt;　　mui框架内置了图片轮播插件，通过该插件封装的JS API，用户可以设定是否自动轮播及轮播周期，如下为代码示例：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;　　//&lt;/span&gt;&lt;span&gt;获得slider插件对象&lt;/span&gt;
　　&lt;span&gt;var&lt;/span&gt; gallery = mui('.mui-slider'&lt;span&gt;);
　　gallery.slider({
  　　interval:&lt;/span&gt;5000&lt;span&gt;//&lt;/span&gt;&lt;span&gt;自动轮播周期，若为0则不自动播放，默认为0；&lt;/span&gt;
　　});
&lt;/pre&gt;&lt;/div&gt;
&lt;p class=&quot;component-description&quot;&gt;　　因此若希望图片轮播不要自动播放，而是用户手动滑动才切换，只需要通过如上方法，将interval参数设为0即可。&lt;/p&gt;
&lt;p class=&quot;component-description&quot;&gt;　　若要跳转到第x张图片，则可以使用图片轮播插件的gotoItem方法，例如：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;　　//&lt;/span&gt;&lt;span&gt;获得slider插件对象&lt;/span&gt;
　　&lt;span&gt;var&lt;/span&gt; gallery = mui('.mui-slider'&lt;span&gt;);
　　gallery.slider().gotoItem(index);&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;跳转到第index张图片，index从0开始；&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　注意：mui框架会默认初始化当前页面的图片轮播组件；若轮播组件内容为js动态生成时（比如通过ajax动态获取的营销信息），则需要在&lt;a class=&quot;snippet_a&quot; href=&quot;jabascript:void(0);&quot;&gt;动态生成完整DOM&lt;/a&gt; (包含&lt;code&gt;mui-slider&lt;/code&gt;下所有DOM结构) 后，手动调用图片轮播的初始化方法；代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;　　//&lt;/span&gt;&lt;span&gt;获得slider插件对象&lt;/span&gt;
　　&lt;span&gt;var&lt;/span&gt; gallery = mui('.mui-slider'&lt;span&gt;);
　　gallery.slider({
 　　 interval:&lt;/span&gt;5000&lt;span&gt;//&lt;/span&gt;&lt;span&gt;自动轮播周期，若为0则不自动播放，默认为0；&lt;/span&gt;
　　});
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;&lt;span&gt;&lt;span class=&quot;autonum&quot; title=&quot;&quot; data-original-title=&quot;&quot;&gt;2.3&lt;/span&gt;&lt;span&gt;&lt;strong class=&quot;135brush&quot; data-brushtype=&quot;text&quot;&gt;栅格&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;

&lt;p class=&quot;component-description&quot;&gt;&lt;span class=&quot;snippet_a&quot;&gt;栅格系统简介：&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;component-description&quot;&gt;MUI 提供了非常简单实用的&lt;code&gt;12&lt;/code&gt;列响应式栅格系统。使用时只需在外围容器上添加&lt;code&gt;.mui-row&lt;/code&gt;，在列上添加 &lt;code&gt;.mui-col-[sm|xs]-[1-12]&lt;/code&gt;，即可栅格参数:&lt;/p&gt;
&lt;div class=&quot;component-description&quot;&gt;
&lt;table class=&quot;table table-bordered table-striped&quot;&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;尺寸&lt;/th&gt;
&lt;th&gt;超小屏幕(&amp;lt;400px)(Extrasmall)&lt;/th&gt;
&lt;th&gt;小屏幕(≥400px) &lt;small&gt;Small&lt;/small&gt;&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;th class=&quot;text-nowrap&quot; scope=&quot;row&quot;&gt;类前缀&lt;/th&gt;
&lt;td&gt;&lt;code&gt;.mui-col-xs-[1-12]&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;.mui-col-sm-[1-12]&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;th class=&quot;text-nowrap&quot; scope=&quot;row&quot;&gt;列（column）数&lt;/th&gt;
&lt;td colspan=&quot;4&quot;&gt;12&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;th class=&quot;text-nowrap&quot; scope=&quot;row&quot;&gt;可嵌套&lt;/th&gt;
&lt;td colspan=&quot;4&quot;&gt;是&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;
&lt;h2 class=&quot;component-description&quot;&gt;实例:&lt;/h2&gt;
&lt;p class=&quot;component-description&quot;&gt;左侧:通过定义&lt;code&gt;.mui-col-sm-6&lt;/code&gt;类在大屏(≥400px)设备上会展现为并排的两列,而&lt;code&gt;.mui-col-xs-12&lt;/code&gt;在小屏(＜400px)设备上会覆盖之前定义的类展现为水平排列&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;mui-content&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;mui-row&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;mui-col-sm-6 mui-col-xs-12&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;mui-table-view-cell&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;a &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;mui-navigate-right&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
                    Item 1    
                &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;mui-col-sm-6 mui-col-xs-12&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;mui-table-view-cell&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;a &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;mui-navigate-right&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
                    Item 1
                &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2 class=&quot;component-description&quot;&gt;实例:多余的列将会另起一行排列&lt;/h2&gt;
&lt;p class=&quot;component-description&quot;&gt;左侧:如果在一个&lt;code&gt;.mui-row&lt;/code&gt;内包含的列（column）大于12个,包含多余列（column）的元素将作为一个整体单元被另起一行排列。&lt;/p&gt;
&lt;p class=&quot;component-description&quot;&gt;右侧:如果不足12个列将不会撑满整个&lt;code&gt;.mui-row&lt;/code&gt;容器&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;mui-content&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;mui-row&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;mui-col-sm-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;mui-table-view-cell&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;a &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;mui-navigate-right&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
                    Item 1    
                &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;mui-col-sm-6&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;mui-table-view-cell&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;a &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;mui-navigate-right&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
                    Item 1
                &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2 class=&quot;component-description&quot;&gt;实例:通过为&lt;code&gt;列&lt;/code&gt;设置&lt;code&gt;padding&lt;/code&gt; 属性，从而创建列与列之间的间隔&lt;/h2&gt;
&lt;p class=&quot;component-description&quot;&gt;两列之间白色区域为左侧列的&lt;code&gt;padding&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;mui-content&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;mui-row&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;mui-col-sm-6&quot;&lt;/span&gt;&lt;span&gt; style&lt;/span&gt;&lt;span&gt;=&quot;padding-right: 20px;&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;mui-table-view-cell&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;a &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;mui-navigate-right&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
                    Item 1    
                &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;mui-col-sm-6&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;mui-table-view-cell&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;a &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;mui-navigate-right&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
                    Item 1
                &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;table border=&quot;0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;3 下拉刷新功能&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;　　为实现下拉刷新功能，大多数 H5 框架都是通过 DIV 模拟下拉回弹动画，在低端 android 手机上，DIV 动画经常出现卡顿现象（特别是图文列表的情况); mui 通过使用原生 webview 下拉刷新解决这个 DIV 动画的卡顿问题，并且拖动效果更加流畅；&lt;/p&gt;
&lt;p&gt;　　这里提供两种模式的下拉刷新，以适用不同场景：&lt;/p&gt;

&lt;h2&gt;&lt;span&gt;&lt;span class=&quot;autonum&quot; title=&quot;&quot; data-original-title=&quot;&quot;&gt;3.1&lt;/span&gt;&lt;span&gt;&lt;strong class=&quot;135brush&quot; data-brushtype=&quot;text&quot;&gt;单webview模式&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;　　效果展示：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/1212190/201710/1212190-20171007081025458-571989731.gif&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　动画原理：&lt;/p&gt;
&lt;p&gt;　　下拉刷新时，触发的是原生下拉刷新控件，而整个&lt;code&gt;webview&lt;/code&gt;位置不会发生变化，所以不会在拖动过程中发生DOM重绘，当控件拖动到一定位置触发动态加载数据以及刷新操作。此模式下拉刷新，相比双webview 模式，不创建额外 webview，性能更优。&lt;/p&gt;
&lt;p&gt;　　使用方法：&lt;/p&gt;
&lt;p&gt;　　mui 初始化时设置&lt;code&gt;pullRefresh&lt;/code&gt;各项参数，与双 webview 模式的子页面设置是一样的。&lt;/p&gt;
&lt;p&gt;　　说明：&lt;/p&gt;
&lt;p&gt;　　1、DOM结构无特殊要求，只需要指定一个下拉刷新容器标识即可&lt;/p&gt;
&lt;div readability=&quot;19.5&quot;&gt;　　
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;47&quot;&gt;
&lt;pre&gt;
&lt;span&gt;mui.init({
  pullRefresh : {
    container:&lt;/span&gt;&quot;#refreshContainer&quot;,&lt;span&gt;//&lt;/span&gt;&lt;span&gt;下拉刷新容器标识，querySelector能定位的css选择器均可，比如：id、.class等&lt;/span&gt;
&lt;span&gt;    down : {
      style:&lt;/span&gt;'circle',&lt;span&gt;//&lt;/span&gt;&lt;span&gt;必选，下拉刷新样式，目前支持原生5+ ‘circle’ 样式&lt;/span&gt;
      color:'#2BD009', &lt;span&gt;//&lt;/span&gt;&lt;span&gt;可选，默认“#2BD009” 下拉刷新控件颜色&lt;/span&gt;
      height:'50px',&lt;span&gt;//&lt;/span&gt;&lt;span&gt;可选,默认50px.下拉刷新控件的高度,&lt;/span&gt;
      range:'100px', &lt;span&gt;//&lt;/span&gt;&lt;span&gt;可选 默认100px,控件可下拉拖拽的范围&lt;/span&gt;
      offset:'0px', &lt;span&gt;//&lt;/span&gt;&lt;span&gt;可选 默认0px,下拉刷新控件的起始位置&lt;/span&gt;
      auto: &lt;span&gt;true&lt;/span&gt;,&lt;span&gt;//&lt;/span&gt;&lt;span&gt;可选,默认false.首次加载自动上拉刷新一次&lt;/span&gt;
      callback :pullfresh-&lt;span&gt;function&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;必选，刷新函数，根据具体业务来编写，比如通过ajax从服务器获取新数据；&lt;/span&gt;
&lt;span&gt;    }
  }
});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　模式说明：&lt;/p&gt;
&lt;p&gt;　　优点&lt;/p&gt;
&lt;p&gt;　　1、相比双webview，不创建额外子webview性能消耗更少&lt;/p&gt;
&lt;p&gt;　　2、下拉拖动过程中不会发生重绘，性能消耗更少&lt;/p&gt;
&lt;p&gt;　　缺点：&lt;/p&gt;
&lt;p&gt;　　目前仅仅支持circle样式及其样式的自定义&lt;/p&gt;

&lt;/div&gt;

&lt;h2&gt;&lt;span&gt;&lt;span class=&quot;autonum&quot; title=&quot;&quot; data-original-title=&quot;&quot;&gt;3.1&lt;/span&gt;&lt;span&gt;&lt;strong class=&quot;135brush&quot; data-brushtype=&quot;text&quot;&gt;双webview模式&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;　　效果展示：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/1212190/201710/1212190-20171007081820568-1740741836.gif&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　动画原理：&lt;/p&gt;
&lt;p&gt;　　使用双 webview 模式的下拉刷新，创建一个子 webview 添加列表；拖动时，拖动的是一个完整的 webview，避免了类似 DIV 拖动流畅度不好的问题，回弹动画使用原生动画；在 iOS 平台，H5 的动画已经比较流畅，故依然使用 H5 方案。两个平台实现虽有差异，但 mui 经过封装，可使用一套代码实现下拉刷新。&lt;/p&gt;
&lt;p&gt;　　使用方法：&lt;/p&gt;
&lt;p&gt;　　主页面内容比较简单，只需要创建子页面即可：&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;mui.init({
    subpages:[{
      url:pullrefresh&lt;/span&gt;-subpage-url,&lt;span&gt;//&lt;/span&gt;&lt;span&gt;下拉刷新内容页面地址&lt;/span&gt;
      id:pullrefresh-subpage-id,&lt;span&gt;//&lt;/span&gt;&lt;span&gt;内容页面标志&lt;/span&gt;
&lt;span&gt;      styles:{
        top:subpage&lt;/span&gt;-top-position,&lt;span&gt;//&lt;/span&gt;&lt;span&gt;内容页面顶部位置,需根据实际页面布局计算，若使用标准mui导航，顶部默认为48px；&lt;/span&gt;
        .....&lt;span&gt;//&lt;/span&gt;&lt;span&gt;其它参数定义&lt;/span&gt;
&lt;span&gt;      }
    }]
});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　iOS平台的下拉刷新，使用的是 mui 封装的&lt;a href=&quot;http://dev.dcloud.net.cn/mui/ui/index.html#scroll&quot;&gt;区域滚动组件&lt;/a&gt;， 为保证两个平台的 DOM 结构一致，内容页面需统一按照如下 DOM 结构构建：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;下拉刷新容器&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;refreshContainer&quot;&lt;/span&gt;&lt;span&gt; class&lt;/span&gt;&lt;span&gt;=&quot;mui-content mui-scroll-wrapper&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;mui-scroll&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;数据列表&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;ul &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;mui-table-view mui-table-view-chevron&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;ul&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　其次，通过 mui.init 方法中 pullRefresh 参数配置下拉刷新各项参数，如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;44&quot;&gt;
&lt;pre&gt;
&lt;span&gt;mui.init({
  pullRefresh : {
    container:&lt;/span&gt;&quot;#refreshContainer&quot;,&lt;span&gt;//&lt;/span&gt;&lt;span&gt;下拉刷新容器标识，querySelector能定位的css选择器均可，比如：id、.class等&lt;/span&gt;
&lt;span&gt;    down : {
      height:&lt;/span&gt;50,&lt;span&gt;//&lt;/span&gt;&lt;span&gt;可选,默认50.触发下拉刷新拖动距离,&lt;/span&gt;
      auto: &lt;span&gt;true&lt;/span&gt;,&lt;span&gt;//&lt;/span&gt;&lt;span&gt;可选,默认false.首次加载自动下拉刷新一次&lt;/span&gt;
      contentdown : &quot;下拉可以刷新&quot;,&lt;span&gt;//&lt;/span&gt;&lt;span&gt;可选，在下拉可刷新状态时，下拉刷新控件上显示的标题内容&lt;/span&gt;
      contentover : &quot;释放立即刷新&quot;,&lt;span&gt;//&lt;/span&gt;&lt;span&gt;可选，在释放可刷新状态时，下拉刷新控件上显示的标题内容&lt;/span&gt;
      contentrefresh : &quot;正在刷新...&quot;,&lt;span&gt;//&lt;/span&gt;&lt;span&gt;可选，正在刷新状态时，下拉刷新控件上显示的标题内容&lt;/span&gt;
      callback :pullfresh-&lt;span&gt;function&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;必选，刷新函数，根据具体业务来编写，比如通过ajax从服务器获取新数据；&lt;/span&gt;
&lt;span&gt;    }
  }
});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　模式说明：&lt;/p&gt;
&lt;p&gt;　　优点：可自定义下拉刷新样式。&lt;/p&gt;
&lt;p&gt;　　缺点：性能消耗大，DOM结构需要重新配置。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;  结尾&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　MUI的定位。&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;MUI的定位是：最接近原生体验的移动App的UI框架&lt;/h3&gt;
&lt;p&gt;基于mui的定位，产生了mui的几个特点，轻、小、只涉及UI、只为移动App而生、界面风格原生化。&lt;br/&gt;所以请大家注意，mui有所为有所不为：&lt;/p&gt;

&lt;ol readability=&quot;3.5&quot;&gt;&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;mui不是jq，不封装dom操作&lt;br/&gt;与ui无关的mui不做，你愿意用jq或zepto就自己用，并不冲突。&lt;br/&gt;但我们并不建议在移动App里引入jq或zepto这些框架，原因如下：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;为了性能，层层封装的框架，尤其是遍历循环dom时，影响效率，尤其在低端Android手机上，我们费死劲了才把性能以毫秒为单位一点点提升，搞这个的dom框架进来就让很多努力又付诸东流。&lt;/li&gt;
&lt;li&gt;原生JS挺简单，为何需要jq？&lt;br/&gt;jq的成功当时是因为ie6、7、8、9、10、chrome、ff这些浏览器不兼容，让开发者崩溃，而且pc上浏览器性能好，跨平台兼容也不影响性能。但jq根本就不是为手机设计的。&lt;br/&gt;手机上只有webkit浏览器（忽略wp，反正mui不支持wp），根本就不需要jq这种封装框架来操作dom。&lt;br/&gt;而且HBuilder提供了代码块来简化开发，敲dg、dq，直接生成document.getElementById(&quot;&quot;)、document.querySelectorAll(&quot;&quot;)，非常快捷方便，而且执行性能非常高，而且没有浏览器兼容问题。&lt;br/&gt;发现很多开发者只会jq，反正想继续在App里使用jq没有问题。但也建议大家多学学js本身。&lt;br/&gt;mui与vue、react、angular也不是一个层面的东西，可以在一个工程里混合使用。但在大多数ui控件上，应该直接使用mui的写法，因为mui的绘制是最朴素的HTML绘制，不是经过js操作的绘制，这种方案的效率比经过js绘制的效率要高很多。只有必须经过js操作才能渲染的控件，比如ajax联网后填充的list，此时使用vuew或react都可以。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;mui、HTML5+、5+Runtime的关系说明&lt;br/&gt;mui是一个前端框架，HTML5+是一套HTML5能力扩展规范，HTML5+ Runtime是实现HTML5+规范的强化浏览器引擎。&lt;br/&gt;有点类似于bootstrap、w3c和chrome os的关系。&lt;br/&gt;HTML5+规范隶属于http://www.html5plus.org，定义了HTML5规范中没有但开发者做App需要的扩展规范。&lt;br/&gt;DCloud的5+ Runtime完整的实现了HTML5+规范。同时5+ Runtime还实现了Native.js，一种通过js调用几十万原生API的技术。&lt;br/&gt;为了提升体验，mui势必会调用一些5+Rutime的增强能力，主要是plus.webview、plus.nativeobj和plus.nativeUI。&lt;br/&gt;但mui不是要替代HTML5Plus，以后也无计划替代把所有5+的api都包一层。&lt;br/&gt;mui是把一些常用的窗体操作封装了，但这种封装适应面也是有限的，遇到复杂窗体管理，还是要仔细了解plus的api。&lt;br/&gt;所以，&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;有人抱怨mui的文档不全，其实是缺本文，本文终于说清楚mui做什么不做什么了。详细的mui文档要去下方提示的mui官网查看。&lt;/li&gt;
&lt;li&gt;有人抱怨mui api不全，其实是没去看plus的api。知原理、知如何封装，方能融汇贯通。&lt;/li&gt;
&lt;li&gt;有人抱怨Hello mui示例代码里写的mui的方法，为何文档里没有，是因为有些方法是内部工程师简化开发中的封装，未考虑通用设计，还不足以开放为标准api，所以文档里没介绍。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;mui有插件体系&lt;br/&gt;为了简化开发者的多端发布开发，mui在核心库之外，补充了一些插件，这些插件不一定是ui相关，也有业务相关。&lt;br/&gt;在Hello mui示例里下方的示例模板，基本都属于插件。这些插件的使用需要加载mui标准库之外的js等资源。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;mui是一个开源项目，请前往托管在github的&lt;a href=&quot;http://dev.dcloud.net.cn/mui/&quot;&gt;mui官网&lt;/a&gt;查看详细介绍&lt;/p&gt;
&lt;p&gt;这里是mui发布时的演讲视频：&lt;a href=&quot;http://v.youku.com/v_show/id_XNzYyOTEyMjcy.html&quot;&gt;http://v.youku.com/v_show/id_XNzYyOTEyMjcy.html&lt;/a&gt;&lt;/p&gt;

</description>
<pubDate>Sat, 07 Oct 2017 00:27:00 +0000</pubDate>
<dc:creator>听醒木一声收</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/lihaohai/p/7634094.html</dc:identifier>
</item>
<item>
<title>Java并发（一、概述） - ZhouZe</title>
<link>http://www.cnblogs.com/sally-zhou/p/7634034.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/sally-zhou/p/7634034.html</guid>
<description>&lt;p&gt;离上次写博客又隔了很久，心中有愧。在我不断使用Java的过程中，几乎都是拿来就用，就Java并发这块我还没有系统的梳理过，趁着国庆有空余时间，把它梳理一遍。以下部分内容参考相关书籍，以作学习之用，特此说明。&lt;/p&gt;
&lt;h2 id=&quot;并行定律&quot;&gt;1.并行定律&lt;/h2&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;随着科技的发展，集成电路上的晶体管数量也达到了物理极限，摩尔定律也随之不再那么有效，例如Amdahl定律和Gustafson定律代替它成为计算机性能发展的源动力。从这个演变也可以看出，计算机的性能发展也不得不从追求处理器频率到多核并行处理的发展过程。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;定义&quot;&gt;1.1.定义&lt;/h3&gt;
&lt;p&gt;　　所谓阿姆达尔（Amdahl）定律，它定义了串行系统并行化后的加速比的计算公式和理论上限。&lt;/p&gt;
&lt;h3 id=&quot;公式&quot;&gt;1.2.公式&lt;/h3&gt;
&lt;p&gt;　　就是其公式就是：&lt;br/&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/453008/201710/453008-20171007034202458-965872284.png&quot;/&gt;&lt;br/&gt;　　其中Sp就是加速比，T1是优化前系统耗时，Tp是优化之后系统耗时，p就是处理器个数。那么这个公式意义就是 加速比 = 优化前系统耗时 / 优化后系统耗时。&lt;br/&gt;　　我们逐步看一下它的公式推导：&lt;br/&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/453008/201710/453008-20171007034228021-165381550.png&quot;/&gt;&lt;br/&gt;　　其中，p为处理器个数，F为串行比率，那么1-F就是并行的比例了。这个公式就是计算优化后的耗时公式，将这个公式代入加速比公式我们就可以得出CPU的处理器数量越多，那么加速比与系统的串行率就成反比：&lt;br/&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/453008/201710/453008-20171007034257240-2045650116.png&quot;/&gt;&lt;br/&gt;　　我们不妨看个例子，假设现在有个系统是按如下方式串行运行的：&lt;br/&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/453008/201710/453008-20171007034359818-162927668.jpg&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　这个系统有三步，其中第一步和第三步都是100ms，第二步是200ms，整个串行的运行时间是400ms。那我们现在可能要对这个系统做个优化，已知这个系统是两个核心，那么如果Step2的操作内部由串行改为并行，那么理想情况可能是这样的：&lt;br/&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/453008/201710/453008-20171007034419240-1022028403.jpg&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　我们看到Step2分解成并行的操作，那么代入公式得到最终它的加速比为1.2。我们不妨推算一下，假设处理器的个数为无穷大，那么Step2的操作耗时无限趋近于0，那么对于这个系统而言，它的加速比（300ms/200ms）最大也不过是1.5。也就是说，P越趋近于无穷大，那么Sp=1/F。&lt;br/&gt;　　加速比越高，表明优化效果越好。根据Amdahl定律，使用多核的CPU对系统优化，优化的效果取决于CPU的数量和系统串行化程序的比重，如果仅仅提升Cpu数量，而不降低程序的串行比重，也是无法提高系统性能的。所以，我们要根本上去改变程序的串行行为，合理的并行与增加处理器数量，才能获得更大的性能提升。&lt;/p&gt;
&lt;h3 id=&quot;gustafson定律&quot;&gt;1.3.Gustafson定律&lt;/h3&gt;
&lt;p&gt;　　 Gustafson定律只是从不同的角度去阐述处理器个数、串行比例和加速比之间的关系。所以这里不再赘述。&lt;/p&gt;
&lt;h2 id=&quot;java内存模型&quot;&gt;2.Java内存模型&lt;/h2&gt;
&lt;h3 id=&quot;处理器高速缓存主存交互&quot;&gt;2.1.处理器、高速缓存、主存交互&lt;/h3&gt;
&lt;p&gt;　　 提高计算机的性能并不是让计算机同时处理多个任务那样简单，处理器需要和内存交互，例如读取数据、存储运算结果，因为现代计算机的处理器能力太强，存储设备的读写速度与之相差太大，所以在存储设备和处理器之间加上高速缓存来作为处理器和内存之间的缓冲。这样的话CPU就不需要等待相对而言缓慢的内存读写了。&lt;br/&gt;　　 当高速缓存作为一种解决处理器与内存读写速度矛盾的手段时，带来了新的问题，那就是缓存一致性。处理器有对应的高速缓存，而它们又对应同一块主内存。当多个处理器的运算都涉及到同一个主内存时，该如何保证数据的一致性？所以为了解决一致性，又在处理器访问缓存时候遵循一些协议。&lt;br/&gt;　　 那么诸如Java虚拟机的内存模型之类就可以理解成，在特定的操作协议下，对特定的内存或者高速缓存进行读写的过程抽象。&lt;br/&gt;　　 除了高速缓存之外，处理器也会对输入代码乱序执行优化（Out-Of-Order Execution）优化，这种优化并不能保证处理器的执行顺序会和输入代码的顺序一致，但会保证最终输入的结果是一致的。与之相对应的，Java也存在着一套类似的机制，就是指令重排（Instruction Reorder）优化。&lt;br/&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/453008/201710/453008-20171007034511943-1522464400.jpg&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;java内存模型jmm&quot;&gt;2.2.Java内存模型（JMM）&lt;/h3&gt;
&lt;p&gt;　　 Java虚拟机定义了一套内存模型来屏蔽各种硬件和操作系统带来的内存访问差异，实现Java程序在各平台下达到一致的内存访问结果。&lt;br/&gt;　　 JMM主要目标是定义程序中各个变量的访问规则，即在虚拟机中将变量存储、取出的底层细节。这里的变量包括实例字段、静态字段和构成数组对象的元素，但不包括局部变量和方法参数，因为这些是线程私有的，不会被共享。&lt;br/&gt;　　 Java内存模型规定所有变量都存在主内存，每条线程都有自己的工作内存，线程所有对变量的操作都必须在工作内存中执行，线程的工作内存保存了被该线程使用到的变量主内存拷贝，不能直接读写主内存中的变量，线程之间变量值传递需要通过主内存完成。线程、主内存、工作内存交互如下：&lt;br/&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/453008/201710/453008-20171007034523349-1135583046.jpg&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;内存间的交互操作&quot;&gt;2.3.内存间的交互操作&lt;/h3&gt;
&lt;p&gt;　　 在主内存和工作内存之间的交互协议的具体细节，Java内存模型定义了8个操作来完成，虚拟机来保证这8个操作都是原子的。&lt;/p&gt;
&lt;table&gt;&lt;thead/&gt;&lt;tbody readability=&quot;12&quot;&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td align=&quot;center&quot;&gt;lock&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;锁定&lt;/td&gt;
&lt;td&gt;作用于主内存的变量，将一个变量标识为一条线程独占的状态&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;4&quot;&gt;&lt;td align=&quot;center&quot;&gt;unlock&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;解锁&lt;/td&gt;
&lt;td&gt;作用于主内存的变量，将一个标记为锁定状态的变量解锁,以便其它线程使用&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;3&quot;&gt;&lt;td align=&quot;center&quot;&gt;read&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;读取&lt;/td&gt;
&lt;td&gt;作用于主内存的变量，将一个变量的值从主内存传输到线程的工作内存中，以便load操作使用&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;3&quot;&gt;&lt;td align=&quot;center&quot;&gt;load&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;载入&lt;/td&gt;
&lt;td&gt;作用于工作内存的变量，将read操作读取过来的值放入工作内存的变量副本中&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;3&quot;&gt;&lt;td align=&quot;center&quot;&gt;use&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;使用&lt;/td&gt;
&lt;td&gt;作用于工作内存的变量，将工作内存的值传递给执行引擎，虚拟机遇到一个需要使用变量的字节码指令就会这么做&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;3&quot;&gt;&lt;td align=&quot;center&quot;&gt;assign&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;赋值&lt;/td&gt;
&lt;td&gt;作用于工作内存的变量，从执行引擎接受到的值赋给工作内存的变量，虚拟机遇到一个给变量赋值的字节码指令就会这么做&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;3&quot;&gt;&lt;td align=&quot;center&quot;&gt;store&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;存储&lt;/td&gt;
&lt;td&gt;作用于工作内存的变量，将工作内存的变量的值传递给主内存中，以便write操作&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;3&quot;&gt;&lt;td align=&quot;center&quot;&gt;write&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;写入&lt;/td&gt;
&lt;td&gt;作用于主内存的变量，它把store操作从工作内存中得到的变量赋值放入主内存的变量中&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;　　 Java内存模型只要求两个操作必须按顺序执行，而没有保证是连续执行，也就是说两个指令之间是可以有其它指令的。Java内存模型还规定可在执行上述8种基本操作时必须满足以下的规则：&lt;br/&gt;　　 * 不允许read和load、store和write操作之一单独出现；&lt;br/&gt;　　 * 不允许一个线程丢弃它最近的assign操作，即assign操作之后必须将值同步给主内存；&lt;br/&gt;　　 * 不允许一个线程没发生过assign就把数据同步给主内存；&lt;br/&gt;　　 * 一个新的变量只能诞生在主内存，不允许工作内存直接使用一个未被（load和assign）的变量；&lt;br/&gt;　　 * 一个线程在同一时刻只允许同一条线程对其进行lock操作；&lt;br/&gt;　　 * 如果对一个变量执行lock，那么将清空这个变量在工作内存的此变量的值，在执行引擎使用这个变量之前，重新执行load和assign操作初始化工作内存的值；&lt;br/&gt;　　 * 如果一个变量事先没有被lock操作锁定，就允许对其或其它线程进行unlock操作；&lt;br/&gt;　　 * 对一个变量执行unlock操作之前，必须先同不会主内存；&lt;/p&gt;
&lt;h3 id=&quot;原子性atomicity可见性visibility有序性ordering&quot;&gt;2.4.原子性（Atomicity）、可见性（Visibility）、有序性（Ordering）&lt;/h3&gt;
&lt;p&gt;　　 原子性（Atomicity）：原子性是指一个操作是不可中断的，一旦一个操作开始，就不会被其它线程干扰。Java内存模型来直接保证原子性变量的操作包括read、load、assign、use、store和write，基本可以认为基本数据类型的读写是原子性的，但是double、long类型例外，这是它们的非原子性协定决定的。当然，Java内存模型还提供了lock和unlock来满足更大范围的原子性操作，这两个操作反映到字节码指令就是monitorenter和monitorexit隐式的操作，反映到代码上就是synchronized关键字。&lt;br/&gt;　　 可见性（Visibility）：可见性是指一个线程修改了共享变量的值，其它线程能立即得知这个更改。Java内存模型是通过变量修改后将新值同步给主内存，在变量读取前从主内存刷新变量值依赖主内存作为传递媒介的方式来实现可见性的，无论这个变量是否被volatile修饰，但它们的区别是volatile变量的特殊规则能立即同步到主内存，以及每次使用前从主内存刷新，而普通变量不行。当然，除了volatile能实现可见性之外，synchronized和final同样可以。synchronized的可见性是通过“对一个变量执行unlock操作之前，必须把此变量同步回主内存中”这条规则获得的；而final的可见性是指，被final修饰的字段在构造器一旦初始化完成，并且构造器没把this的引用传递出去，那么在其它线程就能看见final字段的值。&lt;br/&gt;　　 有序性（Ordering）：前面也提到，java会指令重排，代码顺序未必和指令执行顺序一致。Java提供了volatile和synchronized来保证线程之间操作的有序性。volatile关键字本身就禁止质量重排，而synchronized是由“一个变量在同一时刻只允许一条线程对其lock操作”这条规则获得。&lt;/p&gt;
&lt;h3 id=&quot;happen-before原则&quot;&gt;2.5.Happen-Before原则&lt;/h3&gt;
&lt;p&gt;　　 Java里的有序性除了靠volatile和synchronized两个关键字完成，其实还隐藏着先行发生（Happen-Before）原则，通过这个原则和之前的规则基本能解决并发环境下两个操作之间的冲突问题。&lt;br/&gt;　　 * 程序次序原则（Program Order Rule）：一个行程内保证语义的串行；&lt;br/&gt;　　 * 管程锁定原则（Monitor Lock Rule）：unlock操作必定在之后的同一个锁的lock操作之前；&lt;br/&gt;　　 * volatile规则（Volatile Variable Rule）：volatile变量的写操作先行发生于后面这个变量的读操作；&lt;br/&gt;　　 * 线程启动规则（Thread Start Rule）：线程的start（）方法先于该线程其它的每一个动作；&lt;br/&gt;　　 * 线程终止规则（Thread Termination Rule）：线程的所有操作都先于该线程的终结（Thread.join（））；&lt;br/&gt;　　 * 线程中断规则（Thread Interruption Rule）：线程的interrupt（）方法调用先行发生于被中断线程的代码检测到中断事件的发生；&lt;br/&gt;　　 * 对象终结规则（Finalizer Rule）：一个对象的初始化完成先行与它的finalize（）方法的开始；&lt;br/&gt;　　 * 传递性 （Transitivity）：如果A操作先于B操作，B操作先于C操作，那么A必定先于C；&lt;/p&gt;
&lt;h2 id=&quot;volatile&quot;&gt;3.volatile&lt;/h2&gt;
&lt;h3 id=&quot;语义&quot;&gt;3.1.语义&lt;/h3&gt;
&lt;p&gt;　　 Java内存模型基本是围绕原子性、有序性、可见性展开，而volatile关键字的语义，一是保证此变量对所有线程的可见性，二是禁止指令重排。可以看出，volatile不能保证原子性，这个需要通过加锁或者一些原子类来实现。&lt;br/&gt;　　 举个例子：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;public class VolatileTest {

    public static volatile int i = 0;

    public static void increase() {
        i++;
    }

    public static class IncreaseTask implements Runnable{
        public void run() {
            for (int y = 0; y &amp;lt; 10000; y++) {
                increase();
            }
        }
    }

    public static void main(String[] args) throws InterruptedException {
        Thread[] threads = new Thread[10];
        for (int i = 0; i &amp;lt; 10; i++) {
            threads[i] = new Thread(new IncreaseTask());
            threads[i].start();
        }
        for (int i = 0; i &amp;lt; 10; i++) {
            threads[i].join();
        }
        System.out.println(i);
    }

}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;　　 在上面这段代码中，变量i用volatile修饰，循环10个线程，每个线程内部对i递增10000次，如果这段代码并发成功的话，预期的结果应该是100000。但是运行结果可见，每次的结果值都小于100000。&lt;br/&gt;　　 这个正是因为increase（）方法内部对i递增的处理，也就是 i++ 这一段代码不是原子的，代码虽然只有一行，但是编译出来的字节码指令却有多个指令，而且每个指令本身未必就是原子的，因为这些指令还会转化成若干个本地机器码指令。不难分析出，每个线程取到i的值那一刻，volatile保证了这一刻取到的是正确的数据，但是继续往下执行的时候，这个值就可能已经被其它线程修改了，而此时的数据就变成过期的数据，同步到主内存中的数据就可能是一个较小的数据。&lt;br/&gt;　　 除了在操作递增时候加锁之外，使用AtomicInteger原子类代替int一样可以得到预期的结果。&lt;/p&gt;
&lt;h3 id=&quot;volatile的可见性和指令重排&quot;&gt;3.2.volatile的可见性和指令重排&lt;/h3&gt;
&lt;p&gt;　　 volatile修饰的变量，赋值后的指令会多出一个内存屏障，这个内存屏障会杜绝后面的指令排到前面去。这种内存屏障其实就是一个空操作，这个空操作指令是lock前缀，它的作用就是使得本CPU的Cache写入内存（write和store操作），该写入动作使得其它CPU或者别的内核无效化其Cache，所以通过这样的一个空操作，让volatile修饰的变量对其它CPU立即可见。也因此，这个空操作指令在同步到内存时，意味着所有的操作都已经执行完成，这样就形成了“指令排序无法越过屏障”的效果。&lt;/p&gt;
</description>
<pubDate>Fri, 06 Oct 2017 19:34:00 +0000</pubDate>
<dc:creator>ZhouZe</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/sally-zhou/p/7634034.html</dc:identifier>
</item>
</channel>
</rss>