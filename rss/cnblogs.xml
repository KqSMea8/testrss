<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>数据结构 图的定义和搜索方法（清晰图解） - IDreamo</title>
<link>http://www.cnblogs.com/idreamo/p/8621259.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/idreamo/p/8621259.html</guid>
<description>&lt;p&gt;在计算机科学领域中，图是最为灵活的数据结构之一。&lt;/p&gt;
&lt;p&gt;一般来说，&lt;strong&gt;图在定义对象之间的关系或联系这类问题上能够作为一种模型来帮助我们&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;图中的对象可以是具体的，比如网络中的结点；也可以是不具体的，比如数据库中的业务或系统中的状态。&lt;strong&gt;相同点是对象之间的关系和联系&lt;/strong&gt;。网络上的结点是物理上相连接的，系统中状态之间的关系可能只是简单地表示为了达到下一个状态在当前所做出的决策。无论什么情况，图的模型都很有用，能够解决许多有趣的问题。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;图的组成&lt;/strong&gt;：图由两种类型的元素组成，顶点和边。&lt;/p&gt;
&lt;p&gt;       &lt;strong&gt;顶点代表对象，边则建立起对象之间的关系或关联&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;图的有向&lt;/strong&gt;：图要么是有向的，要么是无向的。&lt;/p&gt;
&lt;p&gt;       &lt;strong&gt;在有向图中，边是由两个顶点组成的有序对，具有特定的方向&lt;/strong&gt;。形象地说，有向图可以由顶点和带方向的箭头所组成的圈绘制出来。&lt;/p&gt;
&lt;p&gt;       有时候，&lt;strong&gt;有向图的边也称为&lt;/strong&gt;弧。&lt;/p&gt;
&lt;p&gt;       在无向图中，边是没有方向的，因此，无向图的边就直接用线段来代替箭头表示。&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1281268/201803/1281268-20180323055818351-473492185.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; 图的正式表示法&lt;/strong&gt;：&lt;strong&gt;G=(V , E)，这里V代表顶点的集合，面E和V之间是一种二元关系&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;        在有向图中，如果某条边是从顶点u开始到顶点v结束，则E包含有序对(u,v)。比如上图中，V={1，2，3，4}，而E={(1,2),(1,3),(1,4),(2,3),(2,4),(3,2),(3,4)}。&lt;/p&gt;
&lt;p&gt;        但是按照惯例，在图中表示边的集合时，用圆括号而不是大括号。&lt;/p&gt;
&lt;p&gt;        在无向图中，由于边(u,v)和(v,u)是一样的意思，因此在E中只需要记录其中一个就可以了。因此，在上图的b中，V={1，2，3，4}，而E={(1,2),(1,3),(1,4),(2,3),(2,4),(3,4)}。&lt;/p&gt;
&lt;p&gt;        在有向图中，边可能会指回同一顶点，但在无向图中则不会出现这种情况。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;图中的两个重要关系：邻接(adjacency)和关联(incidence)。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;        &lt;strong&gt;邻接是两个顶点之间的一种关系&lt;/strong&gt;。如果图包含边(u,v)，则称顶点v和顶点u邻接。在无向图中，这也暗示了顶点u和顶点v邻接。换句话说，在无向图中邻接关系是对称的。&lt;/p&gt;
&lt;p&gt;        而在有向图中则并非如此，比如上图a中，顶点2与顶点1相邻接，但顶点1并不与顶点2相邻接。另一方面，顶点2和顶点3则互为邻接。&lt;/p&gt;
&lt;p&gt;        如果一幅图中的每一个顶点都与其他顶点相邻接，则称这幅图是完全图。&lt;/p&gt;
&lt;p&gt;        &lt;strong&gt;关联是指顶点和边之间的关系&lt;/strong&gt;。在有向图中，边（u，v）从顶点u开始关联到顶点v，或者相反，从顶点v开始关联到顶点u。因此，在上图a中，边(1, 2)从顶点1开始关联到顶点2。&lt;/p&gt;
&lt;p&gt;        在有向图中，顶点的入度指的是以该顶点为终点的边的数目。而顶点的出度指的是以该顶点为起点的边的数目。&lt;/p&gt;
&lt;p&gt;        在无向图中，边（u，v）与顶点u和v相关联，而顶点的度就是与该顶点相关联的边的数目。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;图的路径：路径是依次遍历顶点序列之间的边所形成的轨迹。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;        正式的说法是，顶点u到另一个顶点u‘的路径由顶点序列&amp;lt;v0，v1，v2，...vk&amp;gt;组成，使得u=v0且u'=vk，对于i=1，2，...，k，所有的(vi-1,vk)均属于E。这样的一条路径包含边&lt;/p&gt;
&lt;p&gt;        (v0,v1),(v1,v2),...(vk-1,vk)，且长度为k。&lt;/p&gt;
&lt;p&gt;        如果存在一条从u到u’的路径，则称u‘从u是可达的。&lt;/p&gt;
&lt;p&gt;        没有重复顶点的路径称为简单路径。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;环：是指路径包含相同的顶点两次或两次以上。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;        也就是说，在有向图的一条路径中， 如果从某个顶点出发，最后能够驾到该顶点，则该路径是环。图2中包含环{1，2，4，1}。&lt;/p&gt;
&lt;p&gt;        正式的说法是，在有向图中，如果v0=vk，且路径包含至少一条边，则该路径组成一个环。&lt;/p&gt;
&lt;p&gt;        在无向图中，有路径&amp;lt;v0,v1,v2,...,vk&amp;gt;，如果有v0=vk且从v1到vk中没有重复的顶点，则该路径组成一个环。&lt;/p&gt;
&lt;p&gt;        没有环的图称为无环图。有向无环图有特殊的名称，叫做DAG（Directed Acyline Graph）。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1281268/201803/1281268-20180323123948753-2142428232.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;联通性：连通性是图中的一个重要概念。对于无向图而言，如果它的每个顶点都能通过某条路径到达其他顶点，那么我们称它为连通的。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;        &lt;strong&gt;如果该条件在有向图中同样成立，则称该图是强连通的。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;        尽管无向图可能不是连通的，但它仍然可能包含连通的部分，这部分称为连通分支。如果有向图中只有部分是强连通的，则该部分称为强连通分支。如图3。&lt;/p&gt;
&lt;p&gt;        某些特定的于保持图或连通分支的连通性有特殊重要的意义。如果移除某个顶点将使得图或分支失去连通性，则称该顶点为关结点。&lt;/p&gt;
&lt;p&gt;        如图4，顶点4和5都是关结点因为如果它们中的任意一个被移除，图就变成非连通的了。移除这些顶点后，图中拥有两个连通分支{1，2，3}和{6，7，8}。&lt;/p&gt;
&lt;p&gt;        如果移除某条边会使得图失去连通性，则称该边为桥。没有关结点的连通图称为双连通图。尽管图本身可能不是双连通的，但它仍然可能包含双连通分支。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1281268/201803/1281268-20180323125142326-2087146509.png&quot; alt=&quot;&quot;/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1281268/201803/1281268-20180323125149000-1023499916.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;图的表示方法：最常用来表示图的方法是采用邻接表表示形式，邻接表按照链表的方式组织起来。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;        链表中的每一个结构都包含两个成员：&lt;strong&gt;一个顶点和与该顶点邻接的顶点所组成的一个邻接表&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;        在图G=（V，E）中，如果V中的两个顶点u和v组成E中的边（u，v），则顶点v包含在顶点u的邻接表中。因而，在有向图中，所有邻接表中的顶点总数同总的边数相等。&lt;/p&gt;
&lt;p&gt;        在无向图中，由于边（u，v）暗含了边（v，u），因此顶点v包含在顶点u的邻接表中，而顶点u而包含在顶点v的邻接表中。因而，在这种情况下所有邻接表中的顶点总数是总边数的两倍。&lt;/p&gt;
&lt;p&gt;        通常，邻接表多用于稀疏图中，稀疏图是指边数相对来说较少的图。稀疏图非常普遍。但是如果图非常的稠密，就应该选择邻接矩阵表示方式来表示稠密图了。需要占用O（VE）的空间。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1281268/201803/1281268-20180327063511867-1917602687.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h4&gt; 搜索方法：广度优先搜索和深度优先搜索&lt;/h4&gt;
&lt;h4&gt;        广度优先搜索&lt;/h4&gt;
&lt;p&gt;        广度优先搜索在进一步探索图中的顶点之前，&lt;strong&gt;先访问当前顶点的所有邻接顶点&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;        这种查找方法在很多应用中都非常有用，包括查找出最小生成树和最短路径问题。&lt;/p&gt;
&lt;p&gt;        开始前，优先选择一个起始顶点并将其涂灰，而其他顶点为白色。把起始顶点置于一个队列中。&lt;/p&gt;
&lt;p&gt;        该算法按照如下方式处理：对于队列中的每一个顶点（初始状态下只有起始顶点），从队列首部选出这个顶点&lt;strong&gt;并找出每一个与之相邻接的顶点&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;        将找到的邻接顶点入队到队列的末尾。&lt;strong&gt;我们将已经访问过的顶点涂黑，而还没访问过的顶点则是白色。如果顶点的颜色是灰色，表示已经发现它了，并把它入队到队列末尾&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;        &lt;strong&gt;如果顶点的颜色是白色，表示还没有发现它，将按照同样的方法继续处理队列中的下一个邻接顶点。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;        &lt;strong&gt;一旦所有的邻接顶点都已经找到，就将队列头的顶点出队并将其涂黑，表示我们已经完成了对其的查找&lt;/strong&gt;。&lt;strong&gt;我们继续这个步骤直到队列为空，此时，从起始顶点开始可达的所有顶点都已经涂黑了。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;        图6演示了一个有向图的广度优先搜索过程，广度优先搜索也能应用于无向图中。&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1281268/201803/1281268-20180329064233179-804098210.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;        除了简单地访问顶点外，广度优先搜索还可以用来跟踪记录一些有用的信息。比如，在到达每个顶点之前，可以记录已经遍历过的顶点个数，在一个每条边都没有权重的图中，&lt;strong&gt;由这些顶点组成的路径往往就是访问每个顶点的最短路径&lt;/strong&gt;。在图6中，从顶点1到顶点2或顶点3的最短路径只包含1跳，当找到顶点2和3时就记录下来。从顶点1到顶点4的最短路径包含两跳：其中1跳已经在找到顶点2时记录下来了，另一跳则在从顶点2出发到顶点4时记录下来。&lt;/p&gt;
&lt;p&gt;        也可以采用广度优先搜索法来生成一颗广度优先树。&lt;strong&gt;广度优先树是用来维护我们发现的每个顶点的祖先结点信息的数据结构。由于顶点只能被发现1次（当其涂黑时），它只有惟一一个祖先或父结点。在图6中灰色线段标注的边就是广度优先树的枝干。&lt;/strong&gt;&lt;/p&gt;
&lt;h4&gt;         深度优先搜索&lt;/h4&gt;
&lt;p&gt;        深度优先搜索在搜索过程中每当访问到某一个顶点后，需要&lt;strong&gt;递归地访问此顶点的所有未访问过的相邻顶点&lt;/strong&gt;。因而，这种搜索将尽可能深地持续探索，直到无法继续为止。这种策略使得深度优先搜索在很多应用中非常有用，包括环检测以及拓扑排序。&lt;/p&gt;
&lt;p&gt;        搜索开始前，将每个顶点涂为白色，并选择一个作为起始点。该算法执照如下的方式进行处理：首先选择一个起始顶点，涂为灰色，表示还未发现它。&lt;/p&gt;
&lt;p&gt;        然后&lt;strong&gt;从该顶点的邻接并且未发现顶点集合中选择一个新顶点&lt;/strong&gt;，&lt;strong&gt;继续这个过程，直到所选的顶点没有其他的白色邻接顶点为止，此时已经到达了最深的程度。因而，将当前选择的顶点涂黑，表示完成了对其的探索，然后回溯到该顶点的上一个顶点，继续探索其余的白色邻接顶点。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;        &lt;strong&gt;继续这个步骤，直到所选择的初始顶点已经没有白色的邻接顶点为止。这个过程仅访问了从初始顶点开始可达的顶点。因此，整个处理过程必须在图中的每一个顶点上重复。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;        如图7所示，如果缺少重复这个步骤，将不会访问到顶点4。当我们在一个已经涂黑的顶点上重复该过程时，搜索过程将立刻停止，然后我们继续移动到下一个顶点。图7在有向图上展示了深度优先搜索的过程，深度优先搜索也能应用在无向图上。&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1281268/201803/1281268-20180330062911316-922666010.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;        除了只搜索顶点外，深度优先搜索也可以用来记录一些有用的信息。比如，可以记录发现和终止于每个顶点的次数。深度优先搜索也可以用来构建一个深度优先生成森林。&lt;/p&gt;
&lt;p&gt;        深度优先生成森林是树的集合，每一棵树用来维护搜索到的每个顶点的祖先结点。由于顶点只能发现一次（当将其涂黑时），因此每个顶点都只有唯一的祖先结点（或父结点）。每棵树都包含搜索过程中发现的与该顶点唯一相连的结点。在图7中，以灰色线段标注的边就是树的枝干。&lt;/p&gt;

</description>
<pubDate>Thu, 29 Mar 2018 22:42:00 +0000</pubDate>
<dc:creator>IDreamo</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/idreamo/p/8621259.html</dc:identifier>
</item>
<item>
<title>hostPath Volume - 每天5分钟玩转 Docker 容器技术（148） - CloudMan</title>
<link>http://www.cnblogs.com/CloudMan6/p/8667779.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/CloudMan6/p/8667779.html</guid>
<description>&lt;p&gt;&lt;span&gt;hostPath Volume 的作用是将 Docker Host 文件系统中已经存在的目录 mount 给 Pod 的容器。大部分应用都不会使用 hostPath Volume，因为这实际上增加了 Pod 与节点的耦合，限制了 Pod 的使用。不过那些需要访问 Kubernetes 或 Docker 内部数据（配置文件和二进制库）的应用则需要使用 hostPath。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;比如 kube-apiserver 和 kube-controller-manager 就是这样的应用，通过&lt;/span&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;span&gt;kubectl edit --namespace=kube-system pod kube-apiserver-k8s-master&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;span&gt;查看 kube-apiserver Pod 的配置，下面是 Volume 的相关部分：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/775365/201803/775365-20180329063214797-766970785.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;这里定义了三个 hostPath volume &lt;/span&gt;&lt;code&gt;&lt;span&gt;k8s&lt;/span&gt;&lt;/code&gt;&lt;span&gt;、&lt;/span&gt;&lt;code&gt;&lt;span&gt;certs&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 和 &lt;/span&gt;&lt;code&gt;&lt;span&gt;pki&lt;/span&gt;&lt;/code&gt;&lt;span&gt;，分别对应 Host 目录 &lt;/span&gt;&lt;code&gt;&lt;span&gt;/etc/kubernetes&lt;/span&gt;&lt;/code&gt;&lt;span&gt;、&lt;/span&gt;&lt;code&gt;&lt;span&gt;/etc/ssl/certs&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 和 &lt;/span&gt;&lt;code&gt;&lt;span&gt;/etc/pki&lt;/span&gt;&lt;/code&gt;&lt;span&gt;。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;如果 Pod 被销毁了，hostPath 对应的目录也还会被保留，从这点看，hostPath 的持久性比 emptyDir 强。不过一旦 Host 崩溃，hostPath 也就没法访问了。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;下一节我们将学习具备真正持久性的 Volume。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;书籍：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;1.《每天5分钟玩转Kubernetes》&lt;br/&gt;&lt;a href=&quot;https://item.jd.com/26225745440.html&quot;&gt;https://item.jd.com/26225745440.html&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;2.《每天5分钟玩转Docker容器技术》&lt;br/&gt;&lt;a href=&quot;https://item.jd.com/16936307278.html&quot;&gt;https://item.jd.com/16936307278.html&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;3.《每天5分钟玩转OpenStack》&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;a href=&quot;https://item.jd.com/12086376.html&quot;&gt;https://item.jd.com/12086376.html&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img title=&quot;https://i.imgsafe.org/68/68da21ce15.png&quot; src=&quot;https://i.imgsafe.org/68/68da21ce15.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Thu, 29 Mar 2018 22:34:00 +0000</pubDate>
<dc:creator>CloudMan</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/CloudMan6/p/8667779.html</dc:identifier>
</item>
<item>
<title>TensorFlow-谷歌深度学习库 用tfrecord写入读取 - 火山岩上的小红花</title>
<link>http://www.cnblogs.com/duwenlu/p/8673997.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/duwenlu/p/8673997.html</guid>
<description>&lt;p&gt;TensorFlow自带一种数据格式叫做tfrecords。 你可以把你的输入转成专属与TensorFlow的tfrecords格式并保存在本地。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;-关于输入碎碎念：输入比如图片，可以有各种格式呀首先你从网上下载到的一般是png或者jpg格式的吧， 你可以把它存成一个矩阵的形式（numpy ndarray），如果不用TensorFlow自带的tfrecords，你其实也可以存成python独有的pickle文件哈。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;那么要怎样把数据存成tfrecords呢？&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;当然是用TensorFlow api库啦，就是下面这个Class：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;tf.python_io.TFRecordWriter

&lt;/span&gt;&lt;span&gt;__init__&lt;/span&gt;(self, path, options=&lt;span&gt;None)
Opens file `path` &lt;/span&gt;&lt;span&gt;and&lt;/span&gt;&lt;span&gt; creates a `TFRecordWriter` writing to it.
Args：
path: The path to the TFRecords file.
options: (optional) A TFRecordOptions object.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;在参数列表里指明你想要存放的路径。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
tf.python_io.TFRecordWriter(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;SVHN/train.tfrecords&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote readability=&quot;13&quot;&gt;
&lt;p&gt;虽然有一点没逻辑，但是我还是要介绍一下在处理图片数据输入需要用到的一个TensorFlow Class：&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;span&gt;class GFile(tensorflow.python.lib.io.file_io.FileIO)&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;这是一个用来处理文件IO的类，它包含一个类似正则的查找匹配的函数我们可以用它来找到我们想要的文件-&amp;gt;&lt;/span&gt;tf.gfile.Glob&lt;/p&gt;
&lt;p&gt;它返回一个包含所有满足条件元素的列表。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;初始化一个TFRecordWriter完成后，就等于知道了tfrecords的存放路径，接下来就要往这个文件中存数据呀！这里用到了这个类的write函数。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;tf.python_io.TFRecordWriter
write(self, record)
Write a string record to the file.
Args:
record: str&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;当要读取tfrecords中的数据时，要做以下的事情：&lt;br/&gt;首先呢需要一个pipeline，然后需要将tfrecords的存放路径作为一个str放入到一个queuezhong。&lt;em id=&quot;__mceDel&quot;&gt;string_input_producer这个函数负责完成这件事。&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
string_input_producer(string_tensor, num_epochs=None, shuffle=True, seed=None, capacity=32, shared_name=None, name=None, cancel_op=&lt;span&gt;None)
Output strings (e.g. filenames) to a queue &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; an input pipeline.
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;类似的TensorFlow有相对应的TFRecordReader类来读取。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;class&lt;/span&gt;&lt;span&gt; TFRecordReader(ReaderBase)
A Reader that outputs the records &lt;/span&gt;&lt;span&gt;from&lt;/span&gt;&lt;span&gt; a TFRecords file
&lt;/span&gt;&lt;span&gt;__init__&lt;/span&gt;(self, name=None, options=&lt;span&gt;None)
Create a TFRecordReader.
Args:
name: A name &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt; the operation (optional).
options: A TFRecordOptions object (optional).&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;初始化一个TFRecordWriter完成后，接下来就要往这个文件中读数据呀！这里用到了这个类的read函数。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
read(self, queue, name=&lt;span&gt;None)
Returns the next record (key, value) pair produced by a reader.

Will dequeue a work unit &lt;/span&gt;&lt;span&gt;from&lt;/span&gt; queue &lt;span&gt;if&lt;/span&gt;&lt;span&gt; necessary (e.g. when the
Reader needs to start reading &lt;/span&gt;&lt;span&gt;from&lt;/span&gt;&lt;span&gt; a new file since it has
finished with the previous file).

Args:
queue: A Queue &lt;/span&gt;&lt;span&gt;or&lt;/span&gt;&lt;span&gt; a mutable string Tensor representing a handle
to a Queue, with string work items.
name: A name &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt; the operation (optional).

Returns:
A tuple of Tensors (key, value).
key: A string scalar Tensor.
value: A string scalar Tensor.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;pre&gt;
&lt;/pre&gt;</description>
<pubDate>Thu, 29 Mar 2018 19:45:00 +0000</pubDate>
<dc:creator>火山岩上的小红花</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/duwenlu/p/8673997.html</dc:identifier>
</item>
<item>
<title>在博客园里给图片加水印(canvas + drag) - 韩子卢</title>
<link>http://www.cnblogs.com/vvjiang/p/8673879.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/vvjiang/p/8673879.html</guid>
<description>&lt;h2&gt;前言&lt;/h2&gt;
&lt;div readability=&quot;26.750960799385&quot;&gt;
&lt;p&gt;想给自己的一些图片加上水印，于是就捣腾了这么个东西。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;此功能没有考虑兼容性（太懒了），只在Chrome下测试通过，如果您在什么IE火狐下测试不通过就不要吐槽了。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;因为应用了download属性，所以IE什么的就不用指望了，如果您是火狐浏览器的话，自己改一下兼容性应该是没问题的。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;代码什么的开了F12自己拿吧，没有压缩哦。（最后吐槽一下，本来代码是贴进博客里面的，保存为草稿预览的时候也可以，结果在发布后js代码全被屏蔽了，最后只能写到页脚里了。所以获取js代码到页脚那里获取就好了）&lt;/p&gt;
&lt;div readability=&quot;5.9230769230769&quot;&gt;当然你也可以访问下面这个github地址获取代码：&lt;a href=&quot;https://github.com/vvjiang/ImgModifier&quot; target=&quot;_blank&quot;&gt;代码地址&lt;/a&gt;。&lt;/div&gt;
&lt;p&gt;另外为了弄进博客园，特意把代码从ES2015改成了ES5，所以多多少少有点乱，不过必要的注释都加上去了，这么辛苦，点个赞啊。&lt;/p&gt;
&lt;div readability=&quot;7&quot;&gt;至于要改水印样式什么的，控制台里更改这个变量的属性即可。
&lt;div readability=&quot;8&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; watermarkInfo =&lt;span&gt; {
　　fontSize: &lt;/span&gt;18, &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 像素值&lt;/span&gt;
　　fontFamily: 'cursive'&lt;span&gt;,
　　content: &lt;/span&gt;''&lt;span&gt;,
　　color: &lt;/span&gt;'#fffbf0'&lt;span&gt;
};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt; 废话就不多说了，直接上作品。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;选择背景图后，设置水印文字，然后拖动水印文字到任意位置，最后点击下载文件按钮即可。&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;h2&gt;实现过程中的问题与解决方案&lt;/h2&gt;
&lt;p&gt;代码什么的就不全部贴上来了，只是讲一下其中遇到的一些问题与实现思路。&lt;/p&gt;
&lt;p&gt;这些问题您可能已经大多了解了，不过为了兼顾所有人，所以还是会将一些比较简单的技术点也讲一下。&lt;/p&gt;
&lt;p&gt;整个实现过程中遇到的问题如下&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;获取图片&lt;/li&gt;
&lt;li&gt;将上传文件转换为图片&lt;/li&gt;
&lt;li&gt;在图片上加水印&lt;/li&gt;
&lt;li&gt;拖动文字加水印&lt;/li&gt;
&lt;li&gt;将最后修改的图片下载下来&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;获取图片&lt;/h2&gt;
&lt;p&gt;获取图片实际上就是用到文件上传控件，也就是&lt;/p&gt;
&lt;div readability=&quot;27&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;target_file&quot;&lt;/span&gt;&lt;span&gt; type&lt;/span&gt;&lt;span&gt;=&quot;file&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然而原始的文件上传控件比较丑，所以隐藏此控件，并加了一个新的按钮在它前面&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;a &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;btn&quot;&lt;/span&gt;&lt;span&gt; id&lt;/span&gt;&lt;span&gt;=&quot;btn_select_file&quot;&lt;/span&gt;&lt;span&gt; href&lt;/span&gt;&lt;span&gt;=&quot;jacascript:void(0)&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;选择背景图&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;target_file&quot;&lt;/span&gt;&lt;span&gt; type&lt;/span&gt;&lt;span&gt;=&quot;file&quot;&lt;/span&gt;&lt;span&gt; style&lt;/span&gt;&lt;span&gt;=&quot;display:none&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;而想实现点击选择背景图按钮去选择文件，用以下代码即可&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 按下选择的背景图&lt;/span&gt;
$('#btn_select_file').click(&lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
  $(&lt;/span&gt;'#target_file'&lt;span&gt;).click();
});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;选择文件后，文件上传控件会触发change事件，此时可以拿到文件。&lt;/p&gt;
&lt;div readability=&quot;6&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
$('#target_file').change(&lt;span&gt;function&lt;/span&gt;&lt;span&gt; (event) {
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; imgFile = event.target.files[0&lt;span&gt;];
    ......
});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;h2&gt;将文件转换为图片&lt;/h2&gt;
&lt;p&gt;文件转换为图片实际上首先需要读取文件，这里需要用到FileReader。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;function&lt;/span&gt;&lt;span&gt; setImgIntoCanvas(imgFile) {
　　&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; reader = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; FileReader();

　　reader.onloadend &lt;/span&gt;= &lt;span&gt;function&lt;/span&gt;&lt;span&gt; (e) {
&lt;/span&gt;&lt;span&gt;　　　　var&lt;/span&gt; dataURL =&lt;span&gt; e.target.result;
　　　　img.onload &lt;/span&gt;= &lt;span&gt;function&lt;/span&gt;&lt;span&gt; (event) {
&lt;/span&gt;&lt;span&gt;　　　　　　var&lt;/span&gt; ctx = document.getElementById('target_canvas').getContext('2d'&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;　　　　　　//&lt;/span&gt;&lt;span&gt;将canvas大小设置为和图片一样大&lt;/span&gt;
&lt;span&gt;　　　　　　setCanvasSize(event.target.naturalWidth, event.target.naturalHeight);
　　　　　　ctx.drawImage(img, &lt;/span&gt;0, 0&lt;span&gt;);
　　　　　　setCanvasImgToDownloadLink();
　　　　};
　　　　img.src &lt;/span&gt;=&lt;span&gt; dataURL;
　　};
   reader.readAsDataURL(imgFile);
   resetWatermark();
};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

以上为核心代码，通过&lt;strong&gt;FileReader&lt;/strong&gt;的&lt;strong&gt;readAsDataURL&lt;/strong&gt;函数读取文件可以获得Base64格式的图片数据，将图片数据赋值给一个Image对象。&lt;/div&gt;
&lt;h2&gt;在图片上加水印&lt;/h2&gt;
&lt;p&gt;看了上面的代码，里面就有一个步骤是将图片渲染进canvas，实际上核心功能就是用canvas来给图片加水印。&lt;/p&gt;
&lt;div readability=&quot;13&quot;&gt;操作思路就是先将图片用&lt;strong&gt;drawImage&lt;/strong&gt;渲染进canvas，再在指定的位置用&lt;strong&gt;fillText&lt;/strong&gt;渲染文字即可，并将最后的canvas用
&lt;p&gt;&lt;strong&gt;toDataURL&lt;/strong&gt;&lt;/p&gt;
转化为图片数据即可。&lt;/div&gt;
&lt;p&gt;具体的用法可以参考我的代码，然后查一下canvas的API即可。&lt;/p&gt;
&lt;p&gt;这种在新手看来很难的东西说穿了其实很简单，这里就不讲了。&lt;/p&gt;

&lt;p&gt;但是接下来就麻烦了，如果是白色水印，图片上加水印的地方肯定不能和图片色差太小，要不然很难发现。&lt;/p&gt;
&lt;p&gt;所以针对不同的图片，水印的位置肯定需要可调整。&lt;/p&gt;
&lt;p&gt;最开始的方案是给定两个输入框，然后输入位置，接着渲染水印到文本上。&lt;/p&gt;
&lt;p&gt;但是这个方案首先就面临一个易用性的问题，我怎么获得具体的位置呢，只能一个一个去试，并不是每个用户都会用截图软件去找位置。&lt;/p&gt;
&lt;p&gt;所以这里采用拖动文字的方案。&lt;/p&gt;
&lt;div readability=&quot;51&quot;&gt;
&lt;h2&gt;拖动文字加水印&lt;/h2&gt;
&lt;p&gt;canvas虽然也能捕获事件，获取鼠标位置，并实现拖动文字效果，但是实现起来太麻烦。&lt;/p&gt;
&lt;p&gt;所以这里采用更简单的方案。&lt;/p&gt;
&lt;p&gt;当我们设置水印时，直接将文字渲染到canvas上，然后在文字上方安放一个颜色透明的内容为水印文字的span元素。&lt;/p&gt;
&lt;p&gt;然后我们在这个span元素上加drag事件。&lt;/p&gt;
&lt;p&gt;HTML5拖动功能网上一大堆，这里就不讲了。&lt;/p&gt;
&lt;p&gt;主要讲一下实现思路：&lt;/p&gt;
&lt;p&gt;在开始拖动时，重新用图片渲染canvas，使得之前渲染的文字消失。&lt;/p&gt;
&lt;p&gt;在结束拖动时，获取到具体的位置，再重新将文字渲染进canvas。&lt;/p&gt;
&lt;p&gt;这里说起来简单，其实还是有一些细节，包括css和js的配合，比如文字拖动到边界时的处理方式，又比如文字拖动到边界出现换行的情况。&lt;/p&gt;
&lt;p&gt;还有一些其他的小坑点，需要你自己看代码去体会了。&lt;/p&gt;
&lt;p&gt;这里贴出部分代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;48&quot;&gt;
&lt;pre&gt;
&lt;span&gt;　　　　　//&lt;/span&gt;&lt;span&gt; 绑定移动水印相关事件&lt;/span&gt;
　　　　　&lt;span&gt;var&lt;/span&gt; bindEvent4DragWatermark = &lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
          $(&lt;/span&gt;'#watermark').on('dragstart', &lt;span&gt;function&lt;/span&gt;&lt;span&gt; (e) {
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; ctx = document.getElementById('target_canvas').getContext('2d'&lt;span&gt;);
            ctx.clearRect(&lt;/span&gt;0, 0, $('#target_canvas').width(), $('#target_canvas'&lt;span&gt;).height());
            ctx.drawImage(img, &lt;/span&gt;0, 0&lt;span&gt;);
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 显示可拖拽水印&lt;/span&gt;
            $(&lt;span&gt;this&lt;/span&gt;).addClass('selected'&lt;span&gt;);
            watermarkInfo.offsetX &lt;/span&gt;= e.originalEvent.offsetX +&lt;span&gt; canvasInfo.left;
            watermarkInfo.offsetY &lt;/span&gt;= e.originalEvent.offsetY +&lt;span&gt; canvasInfo.top;
          });
          &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 让水印跟着鼠标移动&lt;/span&gt;
          $('#watermark').on('drag', &lt;span&gt;function&lt;/span&gt;&lt;span&gt; (e) {
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; x =&lt;span&gt; e.originalEvent.pageX;
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; y =&lt;span&gt; e.originalEvent.pageY;
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (x === 0 &amp;amp;&amp;amp; y === 0&lt;span&gt;) {
              &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
            }
            x &lt;/span&gt;-=&lt;span&gt; watermarkInfo.offsetX;
            y &lt;/span&gt;-=&lt;span&gt; watermarkInfo.offsetY;

            $(&lt;/span&gt;'#watermark').css('left', x).css('top'&lt;span&gt;, y);
          });
          $(&lt;/span&gt;'#watermark').on('dragend', &lt;span&gt;function&lt;/span&gt;&lt;span&gt; (e) {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 调整位置，使水印无法超出canvas边界&lt;/span&gt;
            &lt;span&gt;var&lt;/span&gt; x = e.originalEvent.pageX -&lt;span&gt; watermarkInfo.offsetX;
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; y = e.originalEvent.pageY -&lt;span&gt; watermarkInfo.offsetY;
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (x &amp;lt; 0&lt;span&gt;) {
              x &lt;/span&gt;= 0&lt;span&gt;;
            }
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (y &amp;lt; 0&lt;span&gt;) {
              y &lt;/span&gt;= 0&lt;span&gt;;
            }

            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; maxX = canvasInfo.width -&lt;span&gt; watermarkInfo.width;
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; maxY = canvasInfo.height -&lt;span&gt; watermarkInfo.height;
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (x &amp;gt;&lt;span&gt; maxX) {
              x &lt;/span&gt;=&lt;span&gt; maxX;
            }
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (y &amp;gt;&lt;span&gt; maxY) {
              y &lt;/span&gt;=&lt;span&gt; maxY;
            }
            $(&lt;/span&gt;'#watermark').css('left', x).css('top'&lt;span&gt;, y);
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 拖拽完水印，文本隐藏&lt;/span&gt;
            $('#watermark').removeClass('selected'&lt;span&gt;);
            setTextIntoCanvas();
          });
          &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 让鼠标不显示禁用样式&lt;/span&gt;
          $('#canvas-container').on('dragover', &lt;span&gt;function&lt;/span&gt;&lt;span&gt; (e) {
            e.preventDefault();
          });
        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;将最后修改的图片下载下来&lt;/h2&gt;
&lt;p&gt;之前我们已经讲到了用canvas的&lt;strong&gt;toDataURL&lt;/strong&gt;函数获取最后的图片数据，然后关于下载就需要用到一个HTML5的download属性。&lt;/p&gt;
&lt;div readability=&quot;28.5&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;a &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;btn&quot;&lt;/span&gt;&lt;span&gt; id&lt;/span&gt;&lt;span&gt;=&quot;download_file&quot;&lt;/span&gt;&lt;span&gt; href&lt;/span&gt;&lt;span&gt;=&quot;#&quot;&lt;/span&gt;&lt;span&gt; download&lt;/span&gt;&lt;span&gt;=&quot;水印图片&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;下载合成图片&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;接下来是设置图片数据的代码&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
 * 设置canvas图像到下载链接上
&lt;/span&gt;&lt;span&gt; */&lt;/span&gt;
&lt;span&gt;function&lt;/span&gt;&lt;span&gt; setCanvasImgToDownloadLink() {
&lt;/span&gt;&lt;span&gt;  var&lt;/span&gt; imgData = document.getElementById('target_canvas'&lt;span&gt;).toDataURL();
  $(&lt;/span&gt;'#download_file').attr('href'&lt;span&gt;, imgData);
};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;将功能写进博客里&lt;/h2&gt;
&lt;p&gt;至于这部分首先要申请JS权限。&lt;/p&gt;
&lt;p&gt;其次如果观察仔细，还可以在我的代码中看到下列代码&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 此处通过这种方式将html插入，是因为博客园自动屏蔽了canvas标签和download属性&lt;/span&gt;
&lt;span&gt;var&lt;/span&gt; initHtmlConstruct = &lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
  $(&lt;/span&gt;'#canvas-container').text('').append('&amp;lt;canvas id=&quot;target_canvas&quot; width=&quot;100&quot; height=&quot;100&quot;&amp;gt;浏览器不支持此功能，请升级&amp;lt;/canvas&amp;gt;&amp;lt;span draggable=&quot;true&quot; id=&quot;watermark&quot;&amp;gt;&amp;lt;/span&amp;gt;'&lt;span&gt;)
  $(&lt;/span&gt;'#toolbar').append('&amp;lt;a class=&quot;btn&quot; id=&quot;download_file&quot; href=&quot;#&quot; download=&quot;水印图片&quot;&amp;gt;下载合成图片&amp;lt;/a&amp;gt;'&lt;span&gt;);
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;至于原因注释里也写了，是因为博客园的编辑器屏蔽了canvas标签和download属性。&lt;/p&gt;
&lt;h2&gt;总结&lt;/h2&gt;
&lt;p&gt;总的来说，这其实是一个很小的功能，但是要把它做得好用一点，涉及到的知识点并不少，也不并不仅仅我提到的这一点（比如canvas的透明度样式并不是用图片哦，而是用css样式，还是从《css揭秘》那本书上学到的）。&lt;/p&gt;
&lt;p&gt;当然这个东西或多或少还是有那么一些瑕疵，也存在一些兼容性上的问题，不过对我而言够用就好。&lt;/p&gt;
&lt;p&gt;也希望上面介绍的一些东西对您也有收获。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
<pubDate>Thu, 29 Mar 2018 19:06:00 +0000</pubDate>
<dc:creator>韩子卢</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/vvjiang/p/8673879.html</dc:identifier>
</item>
<item>
<title>SoDiaoEditor电子病历编辑器更新至V3版本，愿与各位一路同行！ - tongling</title>
<link>http://www.cnblogs.com/tlzzu/p/8673715.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/tlzzu/p/8673715.html</guid>
<description>&lt;p&gt;简单闲聊两句……&lt;/p&gt;
&lt;p&gt;记得刚参加工作那会儿，去医院实施，信息科不远处就是手术室，门口每天都挤满了人，他们中大多数都是等待手术结果的患者家属，有的还会把折叠床带来，应该是陪床有段时间了。有时路过，还会听到一群人在手术室门口哭，那是我毕业前最接近死亡的一段时间，当时就想着有天能为医疗行业做点什么。&lt;/p&gt;
&lt;p&gt;后来有几次接触到医院自研的电子病历，编辑器那叫一个丑啊，而且设计模板的方式也很奇葩，但当时咱也是个初入医疗行业的菜鸟，不敢瞎逼逼，何况也给不出更好的方案。不过想做一款更好的电子病历编辑器的想法就这么萌生了。&lt;/p&gt;
&lt;p&gt;再后来 16 年因为个人+公司的缘故，迷茫了一段时间。当时想着抽空把编辑器做出来，了结了这件事，按照以往怀胎十月也该生了，何况我这都一年多了，然后就利用闲时初步写了一款编辑器（就是现在的 SoDiaoEditor 啦--以下简称 SDE），还取了一个贼恶心的名字，为了恶心到底，我还买了个更恶心的域名，豁出去了。。。&lt;/p&gt;
&lt;p&gt;好啦，恍恍惚惚，SDE 从建立到现在也有 18 个月了，中间提交了上百次的 commit，也经历了多个小伙伴们的二级&amp;amp;三级&amp;amp;云电子病历项目的上线，加上中间遇到的各种 bug，，，一路走来，感谢各位小伙伴的信任、理解与支持。也算是为医疗行业尽了一份力。共勉！&lt;/p&gt;
&lt;p&gt;以下为具体更新内容，更多接口详情请见&lt;a href=&quot;https://github.com/tlzzu/SoDiaoEditor/blob/master/document/api.v3.md&quot;&gt;V3 API接口&lt;/a&gt;：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/tlzzu/p/8673715.html#愿景&quot;&gt;愿景&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/tlzzu/p/8673715.html#交流&quot;&gt;交流&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/tlzzu/p/8673715.html#更新&quot;&gt;更新&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/tlzzu/p/8673715.html#Vue中使用&quot;&gt;Vue 中使用&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/tlzzu/p/8673715.html#效果展示&quot;&gt;效果展示&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/tlzzu/p/8673715.html#在线预览&quot;&gt;在线预览&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/tlzzu/p/8673715.html#目录结构&quot;&gt;目录结构&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/tlzzu/p/8673715.html#使用说明&quot;&gt;使用说明&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/tlzzu/p/8673715.html#API文档&quot;&gt;API 文档&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/tlzzu/p/8673715.html#需求bug提交&quot;&gt;需求&amp;amp;bug 提交&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/tlzzu/p/8673715.html#打赏&quot;&gt;打赏&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/tlzzu/p/8673715.html#展望&quot;&gt;展望&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;愿景&quot;&gt;愿景&lt;/h2&gt;
&lt;ol&gt;&lt;li&gt;成为电子病历编辑器的通用标准；&lt;/li&gt;
&lt;li&gt;愿为医疗行业做点力所能及的事；&lt;/li&gt;
&lt;li&gt;愿各位码农少加班；&lt;/li&gt;
&lt;/ol&gt;&lt;h2 id=&quot;交流&quot;&gt;交流&lt;/h2&gt;
&lt;p&gt;QQ 群：&lt;strong&gt;370844065&lt;/strong&gt; （已有近百家医疗企业开发人员，欢迎进群探讨）&lt;/p&gt;
&lt;h2 id=&quot;更新记录&quot;&gt;更新记录&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/tlzzu/SoDiaoEditor/blob/master/document/updatelist.md&quot;&gt;查看详情&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;vue-中使用&quot;&gt;Vue 中使用&lt;/h2&gt;
&lt;p&gt;详见另一个 github 项目：&lt;a href=&quot;https://github.com/tlzzu/SoDiaoEditor-vue&quot;&gt;SoDiaoEditor-Vue&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;待完善！&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;效果展示&quot;&gt;效果展示&lt;/h2&gt;
&lt;h4 id=&quot;v3-版本&quot;&gt;V3 版本：&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/tlzzu/SoDiaoEditor/raw/master/document/1.gif&quot; alt=&quot;image&quot;/&gt;&lt;/p&gt;

&lt;p&gt;SDE 分为两大编辑器：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;截止到目前的旧模式&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;em&gt;设计器&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;设计模式-DESIGN&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;编辑模式-EDITOR&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;只读模式-READONLY&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;编辑器&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;设计模式-DESIGN（可编辑控件及病历内容）&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;编辑模式-EDITOR（只允许操作非只读控件）&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;只读模式-READONLY（不可编辑）&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;新模式将在 4 月底实现&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;因为时间关系，SDE 的模式调整将于 4 月底完成，届时各位的使用将不受影响，只需根据自己的选择适当调整即可。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;设计器&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;设计模式-DESIGN&lt;/strong&gt;
&lt;ul&gt;&lt;li&gt;建议设计电子病历模板时使用该模式。可自由添加模板，设计控件。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;编辑模式-EDITOR&lt;/strong&gt;
&lt;ul&gt;&lt;li&gt;建议操作人员（医生、护士、检查科室等）使用该模式。编辑模板，不可添加/删除控件。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;输入模式-INPUT&lt;/strong&gt;
&lt;ul&gt;&lt;li&gt;建议操作人员使用该模式。该模式只允许修改非只读控件的值。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;只读模式-READONLY&lt;/strong&gt;
&lt;ul&gt;&lt;li&gt;建议在部分查看、调阅电子病历的场景下使用。该模式下模板不可编辑。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;编辑器&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;编辑模式-EDITOR&lt;/strong&gt;
&lt;ul&gt;&lt;li&gt;建议给医生使用，或移动版使用。该模式下可编辑控件及病历内容。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;输入模式-INPUT&lt;/strong&gt;
&lt;ul&gt;&lt;li&gt;建议给医生使用。只允许操作非只读控件。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;只读模式-READONLY&lt;/strong&gt;
&lt;ul&gt;&lt;li&gt;建议在部分查看、调阅电子病历的场景下使用。该模式下不可编辑。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;目录结构&quot;&gt;目录结构&lt;/h2&gt;
&lt;pre class=&quot;shell&quot;&gt;
&lt;code&gt;data                    //模拟异步请求的数据，正式项目中可忽略
dialogs                 //扩展百度ueditor的dialogs
lang                    //toolbar多语言支持，可自定义toolbar标题
dist
    js
        sde.design.js   //SoDiaoEditor设计器核心js
        sde.editor.js   //SoDiaoEditor编辑器核心js
example                 //一些demo
ueditor                 //因ue存在部分bug，请使用经过本人调整过的版本。
sde.config.js           //配置文件&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;使用说明&quot;&gt;使用说明&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;设计器：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;13&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;&lt;span class=&quot;dt&quot;&gt;&amp;lt;!DOCTYPE &lt;/span&gt;html&lt;span class=&quot;dt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;html&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; lang=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;zh-CN&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;meta&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; charset=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;utf-8&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;meta&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; http-equiv=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;X-UA-Compatible&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; content=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;IE=edge&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;meta&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;viewport&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; content=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;width=device-width, initial-scale=1&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;SoDiaoEditor.v3 电子病历设计器&lt;span class=&quot;kw&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;co&quot;&gt;&amp;lt;!-- 注意以下各脚本之间的加载顺序！ --&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;script&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; type=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; src=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;sde.config.js&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;link&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; rel=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;stylesheet&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; href=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;ueditor/themes/default/css/ueditor.css&quot;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;script&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; type=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; src=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;ueditor/ueditor.all.js&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;script&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; type=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; src=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;ueditor/lang/zh-cn/zh-cn.js&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;script&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; type=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; src=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;lang/sde-zh-cn.js&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;script&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; type=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;   src=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;dist/js/sde.design.js&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;script&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; id=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;myEditor&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; type=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;text/plain&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; style=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;width:680px;height:1000px;&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
        病历模板&lt;span class=&quot;ss&quot;&gt;/后续调用sde.html设置...&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;    &amp;lt;/script&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;script type&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;va&quot;&gt;window&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;onload&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt;() &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; sde &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;SDE&lt;/span&gt;(&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;dt&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;myEditor&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;dt&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'&amp;lt;div&amp;gt;SoDiaoEditor.v3 电子病历设计器&amp;lt;/div&amp;gt;'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;dt&quot;&gt;ready&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;co&quot;&gt;//sde为异步渲染，若想在sde加载完成后 设置html或修改模式等，可在这里触发&lt;/span&gt;
                &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;};&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;&amp;lt;/body&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/html&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;编辑器：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;&lt;span class=&quot;dt&quot;&gt;&amp;lt;!DOCTYPE &lt;/span&gt;html&lt;span class=&quot;dt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;html&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; lang=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;zh-CN&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;meta&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; charset=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;utf-8&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;meta&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; http-equiv=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;X-UA-Compatible&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; content=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;IE=edge&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;meta&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;viewport&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; content=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;width=device-width, initial-scale=1&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;SoDiaoEditor.v3 电子病历编辑器&lt;span class=&quot;kw&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;script&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; type=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; src=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;dist/js/sde.editor.js&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;div&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; id=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;myEditor&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; style=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;width:680px;height:1000px;margin:0 auto;&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
        病历模板/后续调用sde.html设置...
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;script&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; type=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;va&quot;&gt;window&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;onload&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt;() &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; sde &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;SDE&lt;/span&gt;(&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;dt&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;myEditor&quot;&lt;/span&gt;
            &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;co&quot;&gt;//注：在编辑器SDE为同步渲染&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;};&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;&amp;lt;/body&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/html&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/tlzzu/SoDiaoEditor/blob/master/document/demo.v3.md&quot;&gt;&lt;strong&gt;点击查看更多示例&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;api-文档&quot;&gt;API 文档&lt;/h2&gt;
&lt;p&gt;SDE 尽量保证 &lt;strong&gt;设计器&lt;/strong&gt; 与 &lt;strong&gt;编辑器&lt;/strong&gt; 接口一致，以降低各位同学的学习成本。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/tlzzu/SoDiaoEditor/blob/master/document/api.v3.md&quot;&gt;点击查看详情&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;需求bug-提交&quot;&gt;需求&amp;amp;bug 提交&lt;/h2&gt;
&lt;ol&gt;&lt;li&gt;可邮件至&lt;a href=&quot;mailto://dd@sodiao.org/&quot;&gt;dd@sodiao.org&lt;/a&gt;；&lt;/li&gt;
&lt;li&gt;可以在 github 中的 Iss 中提交；&lt;/li&gt;
&lt;/ol&gt;&lt;h2 id=&quot;打赏&quot;&gt;打赏&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/tlzzu/SoDiaoEditor/raw/master/data/img/ds.png&quot; alt=&quot;image&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;展望&quot;&gt;展望&lt;/h2&gt;
&lt;p&gt;18 年的重点在兼容 IE8 上，并努力将功能向三级医院的需求靠拢。&lt;/p&gt;
&lt;p&gt;2018，愿与各位一路同行！&lt;/p&gt;
</description>
<pubDate>Thu, 29 Mar 2018 17:37:00 +0000</pubDate>
<dc:creator>tongling</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/tlzzu/p/8673715.html</dc:identifier>
</item>
<item>
<title>Go实现海量日志收集系统(二) - python修行路</title>
<link>http://www.cnblogs.com/zhaof/p/8673420.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/zhaof/p/8673420.html</guid>
<description>&lt;p&gt;一篇文章主要是关于整体架构以及用到的软件的一些介绍，这一篇文章是对各个软件的使用介绍，当然这里主要是关于架构中我们agent的实现用到的内容&lt;/p&gt;
&lt;h2 id=&quot;toc_1&quot;&gt;关于zookeeper+kafka&lt;/h2&gt;
&lt;p&gt;我们需要先把两者启动，先启动zookeeper,再启动kafka&lt;br/&gt;启动ZooKeeper:./bin/zkServer.sh start&lt;br/&gt;启动kafka:./bin/kafka-server-start.sh ./config/server.properties&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;操作kafka需要安装一个包：go get github.com/Shopify/sarama&lt;br/&gt;写一个简单的代码，通过go调用往kafka里扔数据：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;45&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package main

import (
    &lt;/span&gt;&quot;github.com/Shopify/sarama&quot;
    &quot;fmt&quot;&lt;span&gt;
)

func main() {
    config :&lt;/span&gt;=&lt;span&gt; sarama.NewConfig()
    config.Producer.RequiredAcks &lt;/span&gt;=&lt;span&gt; sarama.WaitForAll
    config.Producer.Partitioner &lt;/span&gt;=&lt;span&gt; sarama.NewRandomPartitioner
    config.Producer.Return.Successes &lt;/span&gt;= &lt;span&gt;true&lt;/span&gt;&lt;span&gt;
    msg :&lt;/span&gt;= &amp;amp;&lt;span&gt;sarama.ProducerMessage{}
    msg.Topic &lt;/span&gt;= &quot;nginx_log&quot;&lt;span&gt;
    msg.Value &lt;/span&gt;= sarama.StringEncoder(&quot;this is a good test,my message is zhaofan&quot;&lt;span&gt;)
    client,err :&lt;/span&gt;= sarama.NewSyncProducer([]string{&quot;192.168.0.118:9092&quot;&lt;span&gt;},config)
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; err !=&lt;span&gt; nil{
        fmt.Println(&lt;/span&gt;&quot;producer close err:&quot;&lt;span&gt;,err)
        return
    }
    defer client.Close()

    pid,offset,err :&lt;/span&gt;=&lt;span&gt; client.SendMessage(msg)
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; err !=&lt;span&gt; nil{
        fmt.Println(&lt;/span&gt;&quot;send message failed,&quot;&lt;span&gt;,err)
        return
    }
    fmt.Printf(&lt;/span&gt;&quot;pid:%v offset:%v\n&quot;&lt;span&gt;,pid,offset)
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;config.Producer.RequiredAcks = sarama.WaitForAll 这里表示是在给kafka扔数据的时候是否需要确认收到kafka的ack消息&lt;/p&gt;
&lt;p&gt;msg.Topic = &quot;nginx_log&quot; 因为kafka是一个分布式系统，假如我们要读的是nginx日志，apache日志，我们可以根据topic做区分，同时也是我们也可以有不同的分区&lt;/p&gt;
&lt;p&gt;我们将上述代码执行一下，就会往kafka中扔一条消息，可以通过kakfa中自带的消费者命令查看：&lt;br/&gt;./bin/kafka-console-consumer.sh --zookeeper localhost:2181 --topic nginx_log --from-beginning&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/997599/201803/997599-20180330000105635-580785426.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;我们可以将最后的代码稍微更改一下，更改为循环发送：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;for{
    pid,offset,err :&lt;/span&gt;=&lt;span&gt; client.SendMessage(msg)
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; err !=&lt;span&gt; nil{
        fmt.Println(&lt;/span&gt;&quot;send message failed,&quot;&lt;span&gt;,err)
        return
    }
    fmt.Printf(&lt;/span&gt;&quot;pid:%v offset:%v\n&quot;&lt;span&gt;,pid,offset)
    time.Sleep(&lt;/span&gt;2*&lt;span&gt;time.Second)
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这样当我们再次执行的程序的时候，我们可以看到客户端在不停的消费到数据：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/997599/201803/997599-20180330000145571-1594272419.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这样我们就实现一个kakfa的生产者的简单的demo&lt;/p&gt;
&lt;p&gt;接下来我们还需要知道一个工具的使用tailf&lt;/p&gt;
&lt;h2 id=&quot;toc_2&quot;&gt;tailf&lt;/h2&gt;
&lt;p&gt;我们的agent需要读日志目录下的日志文件，而日志文件是不停的增加并且切换文件的，所以我们就需要借助于tailf这个包来读文件，当然这里的tailf和linux里的tail -f命令虽然不同，但是效果是差不多的，都是为了获取日志文件新增加的内容。&lt;/p&gt;
&lt;p&gt;而我们的客户端非常重要的一个地方就是要读日志文件并且将读到的日志文件推送到kafka&lt;/p&gt;
&lt;p&gt;这里需要我们下载一个包：go get github.com/hpcloud/tail&lt;/p&gt;
&lt;p&gt;我们通过下面一个例子对这个包进行一个基本的使用，更详细的api说明看：&lt;a href=&quot;https://godoc.org/github.com/hpcloud/tail&quot;&gt;https://godoc.org/github.com/hpcloud/tail&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;49&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package main

import (
    &lt;/span&gt;&quot;github.com/hpcloud/tail&quot;
    &quot;fmt&quot;
    &quot;time&quot;&lt;span&gt;
)

func main() {
    filename :&lt;/span&gt;= &quot;/Users/zhaofan/go_project/src/go_dev/13/tailf/my.log&quot;&lt;span&gt;
    tails,err :&lt;/span&gt;=&lt;span&gt; tail.TailFile(filename,tail.Config{
        ReOpen:&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;,
        Follow:&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;,
        Location:&lt;/span&gt;&amp;amp;tail.SeekInfo{Offset:0,Whence:2&lt;span&gt;},
        MustExist:&lt;/span&gt;&lt;span&gt;false&lt;/span&gt;&lt;span&gt;,
        Poll:&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;,
    })

    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; err !=&lt;span&gt;nil{
        fmt.Println(&lt;/span&gt;&quot;tail file err:&quot;&lt;span&gt;,err)
        return
    }

    var msg &lt;/span&gt;*&lt;span&gt;tail.Line
    var ok bool
    for &lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;{
        msg,ok &lt;/span&gt;= &amp;lt;-&lt;span&gt;tails.Lines
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; !&lt;span&gt;ok{
            fmt.Printf(&lt;/span&gt;&quot;tail file close reopen,filenam:%s\n&quot;&lt;span&gt;,tails,filename)
            time.Sleep(&lt;/span&gt;100*&lt;span&gt;time.Millisecond)
            continue
        }
        fmt.Println(&lt;/span&gt;&quot;msg:&quot;&lt;span&gt;,msg.Text)
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;最终实现的效果是当你文件里面添加内容后，就可以不断的读取文件中的内容&lt;/p&gt;
&lt;h2 id=&quot;toc_3&quot;&gt;日志库的使用&lt;/h2&gt;
&lt;p&gt;这里是通过beego的日志库实现的，beego的日志库是可以单独拿出来用的，还是非常方便的，使用例子如下：&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;45&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package main

import (
    &lt;/span&gt;&quot;github.com/astaxie/beego/logs&quot;
    &quot;encoding/json&quot;
    &quot;fmt&quot;&lt;span&gt;
)

func main() {
    config :&lt;/span&gt;=&lt;span&gt; make(map[string]interface{})
    config[&lt;/span&gt;&quot;filename&quot;] = &quot;/Users/zhaofan/go_project/src/go_dev/13/log/logcollect.log&quot;&lt;span&gt;
    config[&lt;/span&gt;&quot;level&quot;] =&lt;span&gt; logs.LevelTrace
    configStr,err :&lt;/span&gt;=&lt;span&gt; json.Marshal(config)
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; err !=&lt;span&gt; nil{
        fmt.Println(&lt;/span&gt;&quot;marshal failed,err：&quot;&lt;span&gt;,err)
        return
    }
    logs.SetLogger(logs.AdapterFile,string(configStr))
    logs.Debug(&lt;/span&gt;&quot;this is a debug,my name is %s&quot;,&quot;stu01&quot;&lt;span&gt;)
    logs.Info(&lt;/span&gt;&quot;this is a info,my name is %s&quot;,&quot;stu02&quot;&lt;span&gt;)
    logs.Trace(&lt;/span&gt;&quot;this is trace my name is %s&quot;,&quot;stu03&quot;&lt;span&gt;)
    logs.Warn(&lt;/span&gt;&quot;this is a warn my name is %s&quot;,&quot;stu04&quot;&lt;span&gt;)
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;toc_4&quot;&gt;简单版本logagent的实现&lt;/h2&gt;
&lt;p&gt;这里主要是先实现核心的功能，后续再做优化和改进，主要实现能够根据配置文件中配置的日志路径去读取日志并将读取的实时推送到kafka消息队列中&lt;/p&gt;
&lt;p&gt;关于logagent的主要结构如下：&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/997599/201803/997599-20180330000300533-1957599918.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;程序目录结构为：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;├── conf
│   └── app.conf
├── config.go
├── kafka.go
├── logs
│   └── logcollect.log
├── main.go
└── server.go&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;app.conf :配置文件&lt;br/&gt;config.go:用于初始化读取配置文件中的内容，这里的配置文件加载是通过之前自己实现的配置文件热加载包处理的，博客地址：&lt;a href=&quot;http://www.cnblogs.com/zhaof/p/8593204.html&quot;&gt;http://www.cnblogs.com/zhaof/p/8593204.html&lt;/a&gt;&lt;br/&gt;logcollect.log:日志文件&lt;br/&gt;kafka.go:对kafka的操作，包括初始化kafka连接，以及给kafka发送消息&lt;br/&gt;server.go:主要是tail 的相关操作，用于去读日志文件并将内容放到channel中&lt;/p&gt;
&lt;p&gt;所以这里我们主要的代码逻辑或者重要的代码逻辑就是kafka.go 以及server.go&lt;/p&gt;
&lt;p&gt;kafka.go代码内容为：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;47&quot;&gt;
&lt;pre&gt;
//&lt;span&gt; 这里主要是kafak的相关操作，包括了kafka的初始化，以及发送消息的操作
package main

import (
    &lt;/span&gt;&quot;github.com/Shopify/sarama&quot;
    &quot;github.com/astaxie/beego/logs&quot;&lt;span&gt;
)

var (
    client sarama.SyncProducer
    kafkaSender &lt;/span&gt;*&lt;span&gt;KafkaSender
)

type KafkaSender struct {
    client sarama.SyncProducer
    lineChan chan string
}

&lt;/span&gt;//&lt;span&gt; 初始化kafka
func NewKafkaSender(kafkaAddr string)(kafka &lt;/span&gt;*&lt;span&gt;KafkaSender,err error){
    kafka &lt;/span&gt;= &amp;amp;&lt;span&gt;KafkaSender{
        lineChan:make(chan string,&lt;/span&gt;100000&lt;span&gt;),
    }
    config :&lt;/span&gt;=&lt;span&gt; sarama.NewConfig()
    config.Producer.RequiredAcks &lt;/span&gt;=&lt;span&gt; sarama.WaitForAll
    config.Producer.Partitioner &lt;/span&gt;=&lt;span&gt; sarama.NewRandomPartitioner
    config.Producer.Return.Successes &lt;/span&gt;= &lt;span&gt;true&lt;/span&gt;&lt;span&gt;

    client,err :&lt;/span&gt;=&lt;span&gt; sarama.NewSyncProducer([]string{kafkaAddr},config)
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; err !=&lt;span&gt; nil{
        logs.Error(&lt;/span&gt;&quot;init kafka client failed,err:%v\n&quot;&lt;span&gt;,err)
        return
    }
    kafka.client &lt;/span&gt;=&lt;span&gt; client
    for i:&lt;/span&gt;=0;i&amp;lt;appConfig.KafkaThreadNum;i++&lt;span&gt;{
        &lt;/span&gt;//&lt;span&gt; 根据配置文件循环开启线程去发消息到kafka
        go kafka.sendToKafka()
    }
    return
}

func initKafka()(err error){
    kafkaSender,err &lt;/span&gt;=&lt;span&gt; NewKafkaSender(appConfig.kafkaAddr)
    return
}

func (k &lt;/span&gt;*&lt;span&gt;KafkaSender) sendToKafka(){
    &lt;/span&gt;//&lt;span&gt;从channel中读取日志内容放到kafka消息队列中
    for v :&lt;/span&gt;=&lt;span&gt; range k.lineChan{
        msg :&lt;/span&gt;= &amp;amp;&lt;span&gt;sarama.ProducerMessage{}
        msg.Topic &lt;/span&gt;= &quot;nginx_log&quot;&lt;span&gt;
        msg.Value &lt;/span&gt;=&lt;span&gt; sarama.StringEncoder(v)
        _,_,err :&lt;/span&gt;=&lt;span&gt; k.client.SendMessage(msg)
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; err !=&lt;span&gt; nil{
            logs.Error(&lt;/span&gt;&quot;send message to kafka failed,err:%v&quot;&lt;span&gt;,err)
        }
    }
}

func (k &lt;/span&gt;*&lt;span&gt;KafkaSender) addMessage(line string)(err error){
    &lt;/span&gt;//&lt;span&gt;我们通过tailf读取的日志文件内容先放到channel里面
    k.lineChan &lt;/span&gt;&amp;lt;-&lt;span&gt; line
    return
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;server.go的代码为：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;56&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package main

import (
    &lt;/span&gt;&quot;github.com/hpcloud/tail&quot;
    &quot;fmt&quot;
    &quot;sync&quot;
    &quot;github.com/astaxie/beego/logs&quot;
    &quot;strings&quot;&lt;span&gt;
)

type TailMgr struct {
    &lt;/span&gt;//&lt;span&gt;因为我们的agent可能是读取多个日志文件，这里通过存储为一个map
    tailObjMap map[string]&lt;/span&gt;*&lt;span&gt;TailObj
    lock sync.Mutex
}

type TailObj struct {
    &lt;/span&gt;//&lt;span&gt;这里是每个读取日志文件的对象
    tail &lt;/span&gt;*&lt;span&gt;tail.Tail
    offset int64  &lt;/span&gt;//&lt;span&gt;记录当前位置
    filename string
}

var tailMgr &lt;/span&gt;*&lt;span&gt;TailMgr
var waitGroup sync.WaitGroup

func NewTailMgr()(&lt;/span&gt;*&lt;span&gt;TailMgr){
    tailMgr &lt;/span&gt;=  &amp;amp;&lt;span&gt;TailMgr{
        tailObjMap:make(map[string]&lt;/span&gt;*TailObj,16&lt;span&gt;),
    }
    return tailMgr
}

func (t &lt;/span&gt;*&lt;span&gt;TailMgr) AddLogFile(filename string)(err error){
    t.lock.Lock()
    defer t.lock.Unlock()
    _,ok :&lt;/span&gt;=&lt;span&gt; t.tailObjMap[filename]
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; ok{
        err &lt;/span&gt;= fmt.Errorf(&quot;duplicate filename:%s\n&quot;&lt;span&gt;,filename)
        return
    }
    tail,err :&lt;/span&gt;=&lt;span&gt; tail.TailFile(filename,tail.Config{
        ReOpen:&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;,
        Follow:&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;,
        Location:&lt;/span&gt;&amp;amp;tail.SeekInfo{Offset:0,Whence:2&lt;span&gt;},
        MustExist:&lt;/span&gt;&lt;span&gt;false&lt;/span&gt;&lt;span&gt;,
        Poll:&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;,
    })

    tailobj :&lt;/span&gt;= &amp;amp;&lt;span&gt;TailObj{
        filename:filename,
        offset:&lt;/span&gt;0&lt;span&gt;,
        tail:tail,
    }
    t.tailObjMap[filename] &lt;/span&gt;=&lt;span&gt; tailobj
    return
}

func (t &lt;/span&gt;*&lt;span&gt;TailMgr) Process(){
    &lt;/span&gt;//&lt;span&gt;开启线程去读日志文件
    for _, tailObj :&lt;/span&gt;=&lt;span&gt; range t.tailObjMap{
        waitGroup.Add(&lt;/span&gt;1&lt;span&gt;)
        go tailObj.readLog()
    }
}

func (t &lt;/span&gt;*&lt;span&gt;TailObj) readLog(){
    &lt;/span&gt;//&lt;span&gt;读取每行日志内容
    for line :&lt;/span&gt;=&lt;span&gt; range t.tail.Lines{
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; line.Err !=&lt;span&gt; nil {
            logs.Error(&lt;/span&gt;&quot;read line failed,err:%v&quot;&lt;span&gt;,line.Err)
            continue
        }
        str :&lt;/span&gt;=&lt;span&gt; strings.TrimSpace(line.Text)
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; len(str)==0 || str[0] == '\n'&lt;span&gt;{
            continue
        }

        kafkaSender.addMessage(line.Text)
    }
    waitGroup.Done()
}


func RunServer(){
    tailMgr &lt;/span&gt;=&lt;span&gt; NewTailMgr()
    &lt;/span&gt;//&lt;span&gt; 这一部分是要调用tailf读日志文件推送到kafka中
    for _, filename :&lt;/span&gt;=&lt;span&gt; range appConfig.LogFiles{
        err :&lt;/span&gt;=&lt;span&gt; tailMgr.AddLogFile(filename)
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; err !=&lt;span&gt; nil{
            logs.Error(&lt;/span&gt;&quot;add log file failed,err:%v&quot;&lt;span&gt;,err)
            continue
        }

    }
    tailMgr.Process()
    waitGroup.Wait()
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可以整体演示一下代码实现的效果,当我们运行程序之后我配置文件配置的目录为：&lt;br/&gt;log_files=/app/log/a.log,/Users/zhaofan/a.log&lt;br/&gt;我通过一个简单的代码对对a.log循环追加内容，你可以从kafka的客户端消费力看到内容了：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/997599/201803/997599-20180330000439397-1904271336.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;完成的代码地址：&lt;a href=&quot;https://github.com/pythonsite/logagent&quot;&gt;https://github.com/pythonsite/logagent&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;toc_5&quot;&gt;小结&lt;/h2&gt;
&lt;p&gt;这次只是实现logagent的核心功能，实现了从日志文件中通过多个线程获取要读的日志内容，这里借助了tailf，并将获取的内容放到channel中，kafka.go会从channel中取出日志内容并放到kafka的消息队列中&lt;br/&gt;这里并没有做很多细致的处理，下一篇文章会在这个代码的基础上进行改进。同时现在的配置文件的方式也不是最佳的，每次改动配置文件都需要重新启动程序，后面将通过etcd的方式。&lt;/p&gt;
</description>
<pubDate>Thu, 29 Mar 2018 16:05:00 +0000</pubDate>
<dc:creator>python修行路</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/zhaof/p/8673420.html</dc:identifier>
</item>
<item>
<title>[LTR] 信息检索评价指标（RP/MAP/DCG/NDCG/RR/ERR） - Memento</title>
<link>http://www.cnblogs.com/memento/p/8673309.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/memento/p/8673309.html</guid>
<description>&lt;h3&gt;&lt;span&gt;一、RP&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;R（&lt;span&gt;recall&lt;/span&gt;）表示&lt;strong&gt;召回率、查全率&lt;/strong&gt;，指查询返回结果中相关文档占所有相关文档的比例；P（&lt;span&gt;precision&lt;/span&gt;）表示&lt;strong&gt;准确率、精度&lt;/strong&gt;，指查询返回结果中相关文档占所有查询结果文档的比例；&lt;/span&gt;&lt;/p&gt;
&lt;div&gt;&lt;a href=&quot;https://images2018.cnblogs.com/blog/335284/201803/335284-20180329233645735-1369060548.png&quot;&gt;&lt;span&gt;&lt;img width=&quot;541&quot; height=&quot;78&quot; title=&quot;f9fa0f3c-e542-4bec-a51c-f1fbd4c1e2e4&quot; alt=&quot;f9fa0f3c-e542-4bec-a51c-f1fbd4c1e2e4&quot; src=&quot;https://images2018.cnblogs.com/blog/335284/201803/335284-20180329233646125-1210474261.png&quot; border=&quot;0&quot;/&gt;&lt;/span&gt;&lt;/a&gt;&lt;/div&gt;

&lt;div&gt;&lt;a href=&quot;https://images2018.cnblogs.com/blog/335284/201803/335284-20180329233646464-1819469058.png&quot;&gt;&lt;span&gt;&lt;img width=&quot;509&quot; height=&quot;81&quot; title=&quot;45533e0d-4575-4428-909f-8a67872eebeb&quot; alt=&quot;45533e0d-4575-4428-909f-8a67872eebeb&quot; src=&quot;https://images2018.cnblogs.com/blog/335284/201803/335284-20180329233646843-1958639536.png&quot; border=&quot;0&quot;/&gt;&lt;/span&gt;&lt;/a&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;则 PR 曲线呈现出负相关的下降趋势；&lt;/span&gt;&lt;/p&gt;
&lt;div readability=&quot;8&quot;&gt;
&lt;div&gt;&lt;a href=&quot;https://images2018.cnblogs.com/blog/335284/201803/335284-20180329233647165-334566582.jpg&quot;&gt;&lt;span&gt;&lt;img width=&quot;305&quot; height=&quot;287&quot; title=&quot;058a9536-fe6c-4c21-84d5-467d9e35a456&quot; alt=&quot;058a9536-fe6c-4c21-84d5-467d9e35a456&quot; src=&quot;https://images2018.cnblogs.com/blog/335284/201803/335284-20180329233647537-1246757166.jpg&quot; border=&quot;0&quot;/&gt;&lt;/span&gt;&lt;/a&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;一般来说，recall 和 precision 反映了模型性能的两个方面，单一依靠某个指标并不能较为全面的评价一个模型的性能。&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;span&gt;此时引入&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;strong&gt;F-Score/F-measure&lt;/strong&gt; 作为综合指标，平衡 recall 和 precision 的影响，较为全面的评价一个模型。&lt;/span&gt;&lt;/p&gt;
&lt;div&gt;&lt;a href=&quot;https://images2018.cnblogs.com/blog/335284/201803/335284-20180329233647866-1291011888.png&quot;&gt;&lt;span&gt;&lt;img width=&quot;455&quot; height=&quot;82&quot; title=&quot;22d25eb1-a548-4965-9bb7-1c62d7ceaf08&quot; alt=&quot;22d25eb1-a548-4965-9bb7-1c62d7ceaf08&quot; src=&quot;https://images2018.cnblogs.com/blog/335284/201803/335284-20180329233648228-1181219934.png&quot; border=&quot;0&quot;/&gt;&lt;/span&gt;&lt;/a&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;其中，F1-Score 表示准确率和召回率一样重要；F2-Score 表示召回率比准确率重要一倍；F0.5-Score 表示准确率比召回率重要一倍。&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;&lt;span&gt;二、MAP&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;对 PR 曲线进行积分求曲线下方的面积，就是 AP（Average Precision），即&lt;/span&gt;&lt;/p&gt;
&lt;div&gt;&lt;a href=&quot;https://images2018.cnblogs.com/blog/335284/201803/335284-20180329233648503-735079860.png&quot;&gt;&lt;span&gt;&lt;img width=&quot;195&quot; height=&quot;64&quot; title=&quot;9aa94817-14eb-43e6-937f-fe0e25281282&quot; alt=&quot;9aa94817-14eb-43e6-937f-fe0e25281282&quot; src=&quot;https://images2018.cnblogs.com/blog/335284/201803/335284-20180329233648783-605294957.png&quot; border=&quot;0&quot;/&gt;&lt;/span&gt;&lt;/a&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;其中，p 表示 precision，r 表示 recall，p 是一个以 r 为参数的函数，AP 的计算是对排序位置敏感的，相关文档排序的位置越靠前，检索出相关的文档越多，AP 值越大。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;近似计算约等于 AAP（Aproximate Average Precision）：&lt;/span&gt;&lt;/p&gt;
&lt;div&gt;
&lt;div&gt;&lt;span&gt;&lt;a href=&quot;https://images2018.cnblogs.com/blog/335284/201803/335284-20180329233649160-1834099625.png&quot;&gt;&lt;span&gt;&lt;img width=&quot;688&quot; height=&quot;92&quot; title=&quot;5b39c9fe-d327-4543-82de-61f1cf73f4f1&quot; alt=&quot;5b39c9fe-d327-4543-82de-61f1cf73f4f1&quot; src=&quot;https://images2018.cnblogs.com/blog/335284/201803/335284-20180329233649579-1457822439.png&quot; border=&quot;0&quot;/&gt;&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;
&lt;span&gt;&lt;span&gt;其中，N 代表所有相关文档的总数，p(k) 表示能检索出 k 个相关文档时的 precision 值，而 △r(k) 则表示检索相关文档个数从 k-1 变化到 k 时（通过调整阈值）recall 值的变化情况。&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;rel(k) 表示第 k 个文档是否相关，若相关则为1，否则为0，则可以简化公式为：&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div readability=&quot;11&quot;&gt;
&lt;div&gt;&lt;a href=&quot;https://images2018.cnblogs.com/blog/335284/201803/335284-20180329233650014-668416066.png&quot;&gt;&lt;span&gt;&lt;img width=&quot;311&quot; height=&quot;85&quot; title=&quot;984c61c5-337e-4d5b-ba7f-192e99eb3668&quot; alt=&quot;984c61c5-337e-4d5b-ba7f-192e99eb3668&quot; src=&quot;https://images2018.cnblogs.com/blog/335284/201803/335284-20180329233650299-1351349744.png&quot; border=&quot;0&quot;/&gt;&lt;/span&gt;&lt;/a&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;其中，N 表示相关文档总数，position(i) 表示第 i 个相关文档在检索结果列表中的位置。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;MAP（Mean Average Precision）即多个查询的平均正确率（AP）的均值，从整体上反映模型的检索性能。&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;span&gt;&lt;span&gt;下面举一个例子来说明上述公式的计算：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;查询 query1 对应总共有4个相关文档，查询 query2 对应总共有5个相关文档。当通过模型执行查询1、2时，分别检索出4个相关文档（Rank=1、2、4、7）和3个相关文档（Rank=1、3、5）。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;则 query1&lt;/span&gt;&lt;sub&gt;&lt;span&gt;AP&lt;/span&gt;&lt;/sub&gt;&lt;span&gt;=(1/1+2/2+3/4+4/7)/4=0.83，query2&lt;/span&gt;&lt;sub&gt;&lt;span&gt;AP&lt;/span&gt;&lt;/sub&gt;&lt;span&gt;=(1/1+2/3+3/5+0+0)/5=0.45，最后 MAP=(0.83+0.45)/2=0.64。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;&lt;span&gt;三、NDCG&lt;/span&gt;&lt;/h3&gt;
&lt;h4&gt;&lt;span&gt;&lt;span&gt;1、CG（Cumulative Gain）&lt;/span&gt;&lt;span&gt;&lt;span&gt;累计效益&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;div&gt;&lt;a href=&quot;https://images2018.cnblogs.com/blog/335284/201803/335284-20180329233650555-1852084284.png&quot;&gt;&lt;span&gt;&lt;img width=&quot;219&quot; height=&quot;86&quot; title=&quot;7c723338-5b30-4824-99be-503c257250e7&quot; alt=&quot;7c723338-5b30-4824-99be-503c257250e7&quot; src=&quot;https://images2018.cnblogs.com/blog/335284/201803/335284-20180329233650854-1188142155.png&quot; border=&quot;0&quot;/&gt;&lt;/span&gt;&lt;/a&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;其中 k 表示 k 个文档组成的集合，rel 表示第 i 个文档的&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;相关度&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;，例如&lt;/span&gt;&lt;span&gt;相关度&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;分为以下几个等级：&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;wiz-table-container&quot;&gt;
&lt;div class=&quot;wiz-table-body&quot;&gt;
&lt;table width=&quot;277&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td width=&quot;156&quot; align=&quot;center&quot; valign=&quot;middle&quot;&gt;&lt;span&gt;Relevance Rating&lt;/span&gt;&lt;/td&gt;
&lt;td width=&quot;120&quot; align=&quot;center&quot; valign=&quot;middle&quot;&gt;&lt;span&gt;Value&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;156&quot; align=&quot;left&quot; valign=&quot;middle&quot;&gt;&lt;span&gt;Perfect&lt;/span&gt;&lt;/td&gt;
&lt;td width=&quot;120&quot; align=&quot;left&quot; valign=&quot;middle&quot;&gt;&lt;span&gt;5&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;156&quot; align=&quot;left&quot; valign=&quot;middle&quot;&gt;&lt;span&gt;Excellent&lt;/span&gt;&lt;/td&gt;
&lt;td width=&quot;120&quot; align=&quot;left&quot; valign=&quot;middle&quot;&gt;&lt;span&gt;4&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;156&quot; align=&quot;left&quot; valign=&quot;middle&quot;&gt;&lt;span&gt;Good&lt;/span&gt;&lt;/td&gt;
&lt;td width=&quot;120&quot; align=&quot;left&quot; valign=&quot;middle&quot;&gt;&lt;span&gt;3&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;156&quot; align=&quot;left&quot; valign=&quot;middle&quot;&gt;&lt;span&gt;Fair&lt;/span&gt;&lt;/td&gt;
&lt;td width=&quot;120&quot; align=&quot;left&quot; valign=&quot;middle&quot;&gt;&lt;span&gt;2&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;156&quot;&gt;&lt;span&gt;Simple&lt;/span&gt;&lt;/td&gt;
&lt;td width=&quot;120&quot;&gt;&lt;span&gt;1&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;156&quot; align=&quot;left&quot; valign=&quot;middle&quot;&gt;&lt;span&gt;Bad&lt;/span&gt;&lt;/td&gt;
&lt;td width=&quot;120&quot; align=&quot;left&quot; valign=&quot;middle&quot;&gt;&lt;span&gt;0&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;h4&gt;&lt;span&gt;2、DCG（Discounted Cumulative Gain）&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;&lt;span&gt;在 CG 的计算中没有考虑到位置信息，例如检索到三个文档的相关度依次为（3，-1&lt;span&gt;，&lt;/span&gt;1）和（-1&lt;span&gt;，&lt;/span&gt;1&lt;span&gt;，&lt;/span&gt;3），根据 CG 的计算公式得出的排名是相同的，但是显然前者的排序好一些。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;所以需要在 CG 计算的基础上加入位置信息的计算，现假设根据位置的递增，对应的价值递减，为 1/log&lt;/span&gt;&lt;sub&gt;&lt;span&gt;2&lt;/span&gt;&lt;/sub&gt;&lt;span&gt;(i+1)，其中 log&lt;/span&gt;&lt;sub&gt;&lt;span&gt;2&lt;/span&gt;&lt;/sub&gt;&lt;span&gt;(i+1) 为&lt;span&gt;折扣因子&lt;/span&gt;；&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div&gt;&lt;a href=&quot;https://images2018.cnblogs.com/blog/335284/201803/335284-20180329233651147-547765551.jpg&quot;&gt;&lt;span&gt;&lt;img width=&quot;317&quot; height=&quot;83&quot; title=&quot;a4fe0c3e-f733-418c-a015-b14359025caf&quot; alt=&quot;a4fe0c3e-f733-418c-a015-b14359025caf&quot; src=&quot;https://images2018.cnblogs.com/blog/335284/201803/335284-20180329233651585-1898482726.jpg&quot; border=&quot;0&quot;/&gt;&lt;/span&gt;&lt;/a&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;另一种&lt;strong&gt;增加相关度影响比重&lt;/strong&gt;的 DCG 计算公式：&lt;/span&gt;&lt;/p&gt;
&lt;div&gt;&lt;a href=&quot;https://images2018.cnblogs.com/blog/335284/201803/335284-20180329233652134-2083685297.jpg&quot;&gt;&lt;span&gt;&lt;img width=&quot;311&quot; height=&quot;92&quot; title=&quot;76654d8a-82be-4ce7-9f97-08f8d4e715fe&quot; alt=&quot;76654d8a-82be-4ce7-9f97-08f8d4e715fe&quot; src=&quot;https://images2018.cnblogs.com/blog/335284/201803/335284-20180329233652473-1450456377.jpg&quot; border=&quot;0&quot;/&gt;&lt;/span&gt;&lt;/a&gt;&lt;/div&gt;

&lt;h4&gt;&lt;span&gt;3、IDCG（ideal DCG）&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;理想情况&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;下，按照相关度从大到小排序，然后计算 DCG 可以取得最大值情况。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div&gt;&lt;a href=&quot;https://images2018.cnblogs.com/blog/335284/201803/335284-20180329233652806-236956354.jpg&quot;&gt;&lt;span&gt;&lt;img width=&quot;331&quot; height=&quot;92&quot; title=&quot;51869e97-3a06-40f1-ae79-dea40691e10a&quot; alt=&quot;51869e97-3a06-40f1-ae79-dea40691e10a&quot; src=&quot;https://images2018.cnblogs.com/blog/335284/201803/335284-20180329233653136-262596326.jpg&quot; border=&quot;0&quot;/&gt;&lt;/span&gt;&lt;/a&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;其中 |REL| 表示文档按照相关度从大到小排序，取前 k 个文档组成的集合。&lt;/span&gt;&lt;/p&gt;

&lt;h4&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;4、NDCG（Normalized DCG）&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;&lt;span&gt;由于每个查询所能检索到的结果文档集合长度不一致，k 值的不同会影响 DCG 的计算结果。所以不能简单的对不同查询的 DCG 结果进行平均，需要先归一化处理。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;NDCG 就是利用 IDCG 进行归一化处理，表示当前的 DCG 与理想情况下的 IDCG 相差多大：&lt;/span&gt;&lt;/p&gt;
&lt;div&gt;&lt;a href=&quot;https://images2018.cnblogs.com/blog/335284/201803/335284-20180329233653462-1211841969.jpg&quot;&gt;&lt;span&gt;&lt;img width=&quot;291&quot; height=&quot;78&quot; title=&quot;baba3d13-fbd8-4448-9514-55ac759dbf34&quot; alt=&quot;baba3d13-fbd8-4448-9514-55ac759dbf34&quot; src=&quot;https://images2018.cnblogs.com/blog/335284/201803/335284-20180329233653834-940026362.jpg&quot; border=&quot;0&quot;/&gt;&lt;/span&gt;&lt;/a&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;这样每个查询的 NDCG 均在 0-1 范围内，不同查询之间就可以进行比较，求取多个查询的平均 NDCG。&lt;/span&gt;&lt;/p&gt;
&lt;h4&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;5、例子&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;&lt;span&gt;通过一个计算示例来说明上面的公式，例如现在有一个 query={abc}，返回下图左列的 Ranked List，当假设用户的选择与排序结果无关，则根据相关度生成的累计增益如下图所示：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;wiz-table-container&quot;&gt;
&lt;div class=&quot;wiz-table-body&quot;&gt;
&lt;table width=&quot;601&quot;&gt;&lt;tbody readability=&quot;1&quot;&gt;&lt;tr&gt;&lt;td width=&quot;40&quot; align=&quot;left&quot; valign=&quot;middle&quot;&gt;&lt;br/&gt;&lt;/td&gt;
&lt;td width=&quot;248&quot; align=&quot;left&quot; valign=&quot;middle&quot;&gt;&lt;span&gt;URL&lt;/span&gt;&lt;/td&gt;
&lt;td width=&quot;42&quot; align=&quot;left&quot; valign=&quot;middle&quot;&gt;&lt;span&gt;rel&lt;/span&gt;&lt;/td&gt;
&lt;td width=&quot;101&quot; align=&quot;left&quot; valign=&quot;middle&quot;&gt;&lt;span&gt;&lt;span&gt;Gain(2&lt;/span&gt;&lt;sup&gt;&lt;span&gt;reli-&lt;/span&gt;&lt;/sup&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;&lt;span&gt;1&lt;/span&gt;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;
&lt;td width=&quot;169&quot; align=&quot;left&quot; valign=&quot;middle&quot;&gt;&lt;span&gt;Cumulative Gain&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;40&quot; align=&quot;left&quot; valign=&quot;middle&quot;&gt;&lt;span&gt;#1&lt;/span&gt;&lt;/td&gt;
&lt;td width=&quot;248&quot; align=&quot;left&quot; valign=&quot;middle&quot;&gt;&lt;span&gt;http://abc.go.com&lt;/span&gt;&lt;/td&gt;
&lt;td width=&quot;42&quot; align=&quot;left&quot; valign=&quot;middle&quot;&gt;&lt;span&gt;5&lt;/span&gt;&lt;/td&gt;
&lt;td width=&quot;101&quot; align=&quot;left&quot; valign=&quot;middle&quot;&gt;&lt;span&gt;31&lt;/span&gt;&lt;/td&gt;
&lt;td width=&quot;169&quot; align=&quot;left&quot; valign=&quot;middle&quot;&gt;&lt;span&gt;31&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;40&quot; align=&quot;left&quot; valign=&quot;middle&quot;&gt;&lt;span&gt;#2&lt;/span&gt;&lt;/td&gt;
&lt;td width=&quot;248&quot; align=&quot;left&quot; valign=&quot;middle&quot;&gt;&lt;span&gt;http://www.abctech.com&lt;/span&gt;&lt;/td&gt;
&lt;td width=&quot;42&quot; align=&quot;left&quot; valign=&quot;middle&quot;&gt;&lt;span&gt;2&lt;/span&gt;&lt;/td&gt;
&lt;td width=&quot;101&quot; align=&quot;left&quot; valign=&quot;middle&quot;&gt;&lt;span&gt;3&lt;/span&gt;&lt;/td&gt;
&lt;td width=&quot;169&quot; align=&quot;left&quot; valign=&quot;middle&quot;&gt;&lt;span&gt;34=31+3&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td width=&quot;40&quot; align=&quot;left&quot; valign=&quot;middle&quot;&gt;&lt;span&gt;#3&lt;/span&gt;&lt;/td&gt;
&lt;td width=&quot;248&quot; align=&quot;left&quot; valign=&quot;middle&quot;&gt;&lt;span&gt;http://abcnews.go.com/sections/&lt;/span&gt;&lt;/td&gt;
&lt;td width=&quot;42&quot; align=&quot;left&quot; valign=&quot;middle&quot;&gt;&lt;span&gt;4&lt;/span&gt;&lt;/td&gt;
&lt;td width=&quot;101&quot; align=&quot;left&quot; valign=&quot;middle&quot;&gt;&lt;span&gt;15&lt;/span&gt;&lt;/td&gt;
&lt;td width=&quot;169&quot; align=&quot;left&quot; valign=&quot;middle&quot;&gt;&lt;span&gt;49=31+3+15&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;40&quot;&gt;&lt;span&gt;#4&lt;/span&gt;&lt;/td&gt;
&lt;td width=&quot;248&quot;&gt;&lt;span&gt;http://www.abc.net.au/&lt;/span&gt;&lt;/td&gt;
&lt;td width=&quot;42&quot;&gt;&lt;span&gt;4&lt;/span&gt;&lt;/td&gt;
&lt;td width=&quot;101&quot;&gt;&lt;span&gt;15&lt;/span&gt;&lt;/td&gt;
&lt;td width=&quot;169&quot;&gt;&lt;span&gt;64=31+3+15+15&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;40&quot;&gt;&lt;span&gt;#5&lt;/span&gt;&lt;/td&gt;
&lt;td width=&quot;248&quot;&gt;&lt;span&gt;http://abcnews.com/&lt;/span&gt;&lt;/td&gt;
&lt;td width=&quot;42&quot;&gt;&lt;span&gt;4&lt;/span&gt;&lt;/td&gt;
&lt;td width=&quot;101&quot;&gt;&lt;span&gt;15&lt;/span&gt;&lt;/td&gt;
&lt;td width=&quot;169&quot;&gt;&lt;span&gt;79=31+3+15+15+15&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;40&quot;&gt;&lt;span&gt;#6&lt;/span&gt;&lt;/td&gt;
&lt;td width=&quot;248&quot;&gt;&lt;span&gt;...&lt;/span&gt;&lt;/td&gt;
&lt;td width=&quot;42&quot;&gt;&lt;span&gt;...&lt;/span&gt;&lt;/td&gt;
&lt;td width=&quot;101&quot;&gt;&lt;span&gt;...&lt;/span&gt;&lt;/td&gt;
&lt;td width=&quot;169&quot;&gt;&lt;span&gt;...&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;span&gt;现在考虑搜索结果排在前面的用户会优先选择，引入一个折算因子（discounting factor）：1/(log(i+1)/log2) = log2/log(i+1)。&lt;/span&gt;&lt;/p&gt;
&lt;div&gt;
&lt;div class=&quot;wiz-table-container&quot;&gt;
&lt;div class=&quot;wiz-table-body&quot;&gt;
&lt;table width=&quot;781&quot;&gt;&lt;tbody readability=&quot;1&quot;&gt;&lt;tr&gt;&lt;td width=&quot;39&quot; rowspan=&quot;1&quot; colspan=&quot;1&quot;&gt;&lt;br/&gt;&lt;/td&gt;
&lt;td width=&quot;248&quot; rowspan=&quot;1&quot; colspan=&quot;1&quot;&gt;&lt;span&gt;URL&lt;/span&gt;&lt;/td&gt;
&lt;td width=&quot;42&quot; rowspan=&quot;1&quot; colspan=&quot;1&quot;&gt;&lt;span&gt;rel&lt;/span&gt;&lt;/td&gt;
&lt;td width=&quot;103&quot; rowspan=&quot;1&quot; colspan=&quot;1&quot;&gt;&lt;span&gt;&lt;span&gt;Gain(2&lt;/span&gt;&lt;sup&gt;&lt;span&gt;reli-&lt;/span&gt;&lt;/sup&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;&lt;span&gt;1&lt;/span&gt;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;
&lt;td width=&quot;165&quot; rowspan=&quot;1&quot; colspan=&quot;1&quot;&gt;&lt;span&gt;Cumulative Gain&lt;/span&gt;&lt;/td&gt;
&lt;td width=&quot;183&quot; align=&quot;left&quot; valign=&quot;middle&quot;&gt;&lt;span&gt;DCG&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;39&quot; rowspan=&quot;1&quot; colspan=&quot;1&quot;&gt;&lt;span&gt;#1&lt;/span&gt;&lt;/td&gt;
&lt;td width=&quot;248&quot; rowspan=&quot;1&quot; colspan=&quot;1&quot;&gt;&lt;span&gt;http://abc.go.com&lt;/span&gt;&lt;/td&gt;
&lt;td width=&quot;42&quot; rowspan=&quot;1&quot; colspan=&quot;1&quot;&gt;&lt;span&gt;5&lt;/span&gt;&lt;/td&gt;
&lt;td width=&quot;103&quot; rowspan=&quot;1&quot; colspan=&quot;1&quot;&gt;&lt;span&gt;31&lt;/span&gt;&lt;/td&gt;
&lt;td width=&quot;165&quot; rowspan=&quot;1&quot; colspan=&quot;1&quot;&gt;&lt;span&gt;31&lt;/span&gt;&lt;/td&gt;
&lt;td width=&quot;183&quot; align=&quot;left&quot; valign=&quot;middle&quot;&gt;&lt;span&gt;31=31×1&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;39&quot; rowspan=&quot;1&quot; colspan=&quot;1&quot;&gt;&lt;span&gt;#2&lt;/span&gt;&lt;/td&gt;
&lt;td width=&quot;248&quot; rowspan=&quot;1&quot; colspan=&quot;1&quot;&gt;&lt;span&gt;http://www.abctech.com&lt;/span&gt;&lt;/td&gt;
&lt;td width=&quot;42&quot; rowspan=&quot;1&quot; colspan=&quot;1&quot;&gt;&lt;span&gt;2&lt;/span&gt;&lt;/td&gt;
&lt;td width=&quot;103&quot; rowspan=&quot;1&quot; colspan=&quot;1&quot;&gt;&lt;span&gt;3&lt;/span&gt;&lt;/td&gt;
&lt;td width=&quot;165&quot; rowspan=&quot;1&quot; colspan=&quot;1&quot;&gt;&lt;span&gt;34=31+3&lt;/span&gt;&lt;/td&gt;
&lt;td width=&quot;183&quot; align=&quot;left&quot; valign=&quot;middle&quot;&gt;&lt;span&gt;32.9=31+3×0.63&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td width=&quot;39&quot; rowspan=&quot;1&quot; colspan=&quot;1&quot;&gt;&lt;span&gt;#3&lt;/span&gt;&lt;/td&gt;
&lt;td width=&quot;248&quot; rowspan=&quot;1&quot; colspan=&quot;1&quot;&gt;&lt;span&gt;http://abcnews.go.com/sections/&lt;/span&gt;&lt;/td&gt;
&lt;td width=&quot;42&quot; rowspan=&quot;1&quot; colspan=&quot;1&quot;&gt;&lt;span&gt;4&lt;/span&gt;&lt;/td&gt;
&lt;td width=&quot;103&quot; rowspan=&quot;1&quot; colspan=&quot;1&quot;&gt;&lt;span&gt;15&lt;/span&gt;&lt;/td&gt;
&lt;td width=&quot;165&quot; rowspan=&quot;1&quot; colspan=&quot;1&quot;&gt;&lt;span&gt;49=31+3+15&lt;/span&gt;&lt;/td&gt;
&lt;td width=&quot;183&quot; align=&quot;left&quot; valign=&quot;middle&quot;&gt;&lt;span&gt;40.4=32.9+15×0.50&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;39&quot; rowspan=&quot;1&quot; colspan=&quot;1&quot;&gt;&lt;span&gt;#4&lt;/span&gt;&lt;/td&gt;
&lt;td width=&quot;248&quot; rowspan=&quot;1&quot; colspan=&quot;1&quot;&gt;&lt;span&gt;http://www.abc.net.au/&lt;/span&gt;&lt;/td&gt;
&lt;td width=&quot;42&quot; rowspan=&quot;1&quot; colspan=&quot;1&quot;&gt;&lt;span&gt;4&lt;/span&gt;&lt;/td&gt;
&lt;td width=&quot;103&quot; rowspan=&quot;1&quot; colspan=&quot;1&quot;&gt;&lt;span&gt;15&lt;/span&gt;&lt;/td&gt;
&lt;td width=&quot;165&quot; rowspan=&quot;1&quot; colspan=&quot;1&quot;&gt;&lt;span&gt;64=31+3+15+15&lt;/span&gt;&lt;/td&gt;
&lt;td width=&quot;183&quot; align=&quot;left&quot; valign=&quot;middle&quot;&gt;&lt;span&gt;46.9=40.4+15×0.43&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;39&quot; rowspan=&quot;1&quot; colspan=&quot;1&quot;&gt;&lt;span&gt;#5&lt;/span&gt;&lt;/td&gt;
&lt;td width=&quot;248&quot; rowspan=&quot;1&quot; colspan=&quot;1&quot;&gt;&lt;span&gt;http://abcnews.com/&lt;/span&gt;&lt;/td&gt;
&lt;td width=&quot;42&quot; rowspan=&quot;1&quot; colspan=&quot;1&quot;&gt;&lt;span&gt;4&lt;/span&gt;&lt;/td&gt;
&lt;td width=&quot;103&quot; rowspan=&quot;1&quot; colspan=&quot;1&quot;&gt;&lt;span&gt;15&lt;/span&gt;&lt;/td&gt;
&lt;td width=&quot;165&quot; rowspan=&quot;1&quot; colspan=&quot;1&quot;&gt;&lt;span&gt;79=31+3+15+15+15&lt;/span&gt;&lt;/td&gt;
&lt;td width=&quot;183&quot; align=&quot;left&quot; valign=&quot;middle&quot;&gt;&lt;span&gt;52.7=46.9+15×0.39&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;39&quot; rowspan=&quot;1&quot; colspan=&quot;1&quot;&gt;&lt;span&gt;#6&lt;/span&gt;&lt;/td&gt;
&lt;td width=&quot;248&quot; rowspan=&quot;1&quot; colspan=&quot;1&quot;&gt;&lt;span&gt;...&lt;/span&gt;&lt;/td&gt;
&lt;td width=&quot;42&quot; rowspan=&quot;1&quot; colspan=&quot;1&quot;&gt;&lt;span&gt;...&lt;/span&gt;&lt;/td&gt;
&lt;td width=&quot;103&quot; rowspan=&quot;1&quot; colspan=&quot;1&quot;&gt;&lt;span&gt;...&lt;/span&gt;&lt;/td&gt;
&lt;td width=&quot;165&quot; rowspan=&quot;1&quot; colspan=&quot;1&quot;&gt;&lt;span&gt;...&lt;/span&gt;&lt;/td&gt;
&lt;td width=&quot;183&quot; align=&quot;left&quot; valign=&quot;middle&quot;&gt;&lt;span&gt;...&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;span&gt;而理想的情况，根据相关度 rel 递减排序后计算 DCG：&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;
&lt;div class=&quot;wiz-table-container&quot;&gt;
&lt;div class=&quot;wiz-table-body&quot;&gt;
&lt;table width=&quot;615&quot;&gt;&lt;tbody readability=&quot;1&quot;&gt;&lt;tr&gt;&lt;td width=&quot;39&quot; rowspan=&quot;1&quot; colspan=&quot;1&quot;&gt;&lt;br/&gt;&lt;/td&gt;
&lt;td width=&quot;248&quot; rowspan=&quot;1&quot; colspan=&quot;1&quot;&gt;&lt;span&gt;URL&lt;/span&gt;&lt;/td&gt;
&lt;td width=&quot;42&quot; rowspan=&quot;1&quot; colspan=&quot;1&quot;&gt;&lt;span&gt;rel&lt;/span&gt;&lt;/td&gt;
&lt;td width=&quot;103&quot; rowspan=&quot;1&quot; colspan=&quot;1&quot;&gt;&lt;span&gt;&lt;span&gt;Gain(2&lt;/span&gt;&lt;sup&gt;&lt;span&gt;reli-&lt;/span&gt;&lt;/sup&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;&lt;span&gt;1&lt;/span&gt;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;
&lt;td width=&quot;183&quot; rowspan=&quot;1&quot; colspan=&quot;1&quot;&gt;&lt;span&gt;IDCG（Max DCG）&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;39&quot; rowspan=&quot;1&quot; colspan=&quot;1&quot;&gt;&lt;span&gt;#1&lt;/span&gt;&lt;/td&gt;
&lt;td width=&quot;248&quot; rowspan=&quot;1&quot; colspan=&quot;1&quot;&gt;&lt;span&gt;http://abc.go.com&lt;/span&gt;&lt;/td&gt;
&lt;td width=&quot;42&quot; rowspan=&quot;1&quot; colspan=&quot;1&quot;&gt;&lt;span&gt;5&lt;/span&gt;&lt;/td&gt;
&lt;td width=&quot;103&quot; rowspan=&quot;1&quot; colspan=&quot;1&quot;&gt;&lt;span&gt;31&lt;/span&gt;&lt;/td&gt;
&lt;td width=&quot;183&quot; rowspan=&quot;1&quot; colspan=&quot;1&quot;&gt;&lt;span&gt;31=31×1&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td width=&quot;39&quot;&gt;&lt;span&gt;#3&lt;/span&gt;&lt;/td&gt;
&lt;td width=&quot;248&quot;&gt;&lt;span&gt;http://abcnews.go.com/sections/&lt;/span&gt;&lt;/td&gt;
&lt;td width=&quot;42&quot;&gt;&lt;span&gt;4&lt;/span&gt;&lt;/td&gt;
&lt;td width=&quot;103&quot;&gt;&lt;span&gt;15&lt;/span&gt;&lt;/td&gt;
&lt;td width=&quot;183&quot;&gt;&lt;span&gt;40.5=31+15×0.63&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;39&quot; rowspan=&quot;1&quot; colspan=&quot;1&quot;&gt;&lt;span&gt;#4&lt;/span&gt;&lt;/td&gt;
&lt;td width=&quot;248&quot; rowspan=&quot;1&quot; colspan=&quot;1&quot;&gt;&lt;span&gt;http://www.abc.net.au/&lt;/span&gt;&lt;/td&gt;
&lt;td width=&quot;42&quot; rowspan=&quot;1&quot; colspan=&quot;1&quot;&gt;&lt;span&gt;4&lt;/span&gt;&lt;/td&gt;
&lt;td width=&quot;103&quot; rowspan=&quot;1&quot; colspan=&quot;1&quot;&gt;&lt;span&gt;15&lt;/span&gt;&lt;/td&gt;
&lt;td width=&quot;183&quot; rowspan=&quot;1&quot; colspan=&quot;1&quot;&gt;&lt;span&gt;48.0=40.5+15×0.5&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;39&quot; rowspan=&quot;1&quot; colspan=&quot;1&quot;&gt;&lt;span&gt;#5&lt;/span&gt;&lt;/td&gt;
&lt;td width=&quot;248&quot; rowspan=&quot;1&quot; colspan=&quot;1&quot;&gt;&lt;span&gt;http://abcnews.com/&lt;/span&gt;&lt;/td&gt;
&lt;td width=&quot;42&quot; rowspan=&quot;1&quot; colspan=&quot;1&quot;&gt;&lt;span&gt;4&lt;/span&gt;&lt;/td&gt;
&lt;td width=&quot;103&quot; rowspan=&quot;1&quot; colspan=&quot;1&quot;&gt;&lt;span&gt;15&lt;/span&gt;&lt;/td&gt;
&lt;td width=&quot;183&quot; rowspan=&quot;1&quot; colspan=&quot;1&quot;&gt;&lt;span&gt;54.5=48.0+15×0.43&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;39&quot;&gt;&lt;span&gt;#7&lt;/span&gt;&lt;/td&gt;
&lt;td width=&quot;248&quot;&gt;&lt;span&gt;http://abc.org/&lt;/span&gt;&lt;/td&gt;
&lt;td width=&quot;42&quot;&gt;&lt;span&gt;4&lt;/span&gt;&lt;/td&gt;
&lt;td width=&quot;103&quot;&gt;&lt;span&gt;15&lt;/span&gt;&lt;/td&gt;
&lt;td width=&quot;183&quot;&gt;&lt;span&gt;60.4=54.5+15×0.39&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;39&quot; rowspan=&quot;1&quot; colspan=&quot;1&quot;&gt;&lt;span&gt;#9&lt;/span&gt;&lt;/td&gt;
&lt;td width=&quot;248&quot; rowspan=&quot;1&quot; colspan=&quot;1&quot;&gt;&lt;span&gt;...&lt;/span&gt;&lt;/td&gt;
&lt;td width=&quot;42&quot; rowspan=&quot;1&quot; colspan=&quot;1&quot;&gt;&lt;span&gt;...&lt;/span&gt;&lt;/td&gt;
&lt;td width=&quot;103&quot; rowspan=&quot;1&quot; colspan=&quot;1&quot;&gt;&lt;span&gt;...&lt;/span&gt;&lt;/td&gt;
&lt;td width=&quot;183&quot; rowspan=&quot;1&quot; colspan=&quot;1&quot;&gt;&lt;span&gt;...&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;span&gt;所以最终得出 NDCG 结果：&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;
&lt;div class=&quot;wiz-table-container&quot;&gt;
&lt;div class=&quot;wiz-table-body&quot;&gt;
&lt;table width=&quot;1083&quot;&gt;&lt;tbody readability=&quot;1&quot;&gt;&lt;tr&gt;&lt;td width=&quot;37&quot; rowspan=&quot;1&quot; colspan=&quot;1&quot;&gt;&lt;br/&gt;&lt;/td&gt;
&lt;td width=&quot;248&quot; rowspan=&quot;1&quot; colspan=&quot;1&quot;&gt;&lt;span&gt;URL&lt;/span&gt;&lt;/td&gt;
&lt;td width=&quot;42&quot; rowspan=&quot;1&quot; colspan=&quot;1&quot;&gt;&lt;span&gt;rel&lt;/span&gt;&lt;/td&gt;
&lt;td width=&quot;103&quot; rowspan=&quot;1&quot; colspan=&quot;1&quot;&gt;&lt;span&gt;&lt;span&gt;Gain(2&lt;/span&gt;&lt;sup&gt;&lt;span&gt;reli-&lt;/span&gt;&lt;/sup&gt;&lt;span data-wiz-span=&quot;data-wiz-span&quot;&gt;&lt;span&gt;1&lt;/span&gt;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;
&lt;td width=&quot;165&quot; rowspan=&quot;1&quot; colspan=&quot;1&quot;&gt;&lt;span&gt;Cumulative Gain&lt;/span&gt;&lt;/td&gt;
&lt;td width=&quot;183&quot; rowspan=&quot;1&quot; colspan=&quot;1&quot;&gt;&lt;span&gt;DCG&lt;/span&gt;&lt;/td&gt;
&lt;td width=&quot;162&quot; align=&quot;left&quot; valign=&quot;middle&quot;&gt;&lt;span&gt;IDCG（Max DCG）&lt;/span&gt;&lt;/td&gt;
&lt;td width=&quot;142&quot; align=&quot;left&quot; valign=&quot;middle&quot;&gt;&lt;span&gt;NDCG&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;37&quot; rowspan=&quot;1&quot; colspan=&quot;1&quot;&gt;&lt;span&gt;#1&lt;/span&gt;&lt;/td&gt;
&lt;td width=&quot;248&quot; rowspan=&quot;1&quot; colspan=&quot;1&quot;&gt;&lt;span&gt;http://abc.go.com&lt;/span&gt;&lt;/td&gt;
&lt;td width=&quot;42&quot; rowspan=&quot;1&quot; colspan=&quot;1&quot;&gt;&lt;span&gt;5&lt;/span&gt;&lt;/td&gt;
&lt;td width=&quot;103&quot; rowspan=&quot;1&quot; colspan=&quot;1&quot;&gt;&lt;span&gt;31&lt;/span&gt;&lt;/td&gt;
&lt;td width=&quot;165&quot; rowspan=&quot;1&quot; colspan=&quot;1&quot;&gt;&lt;span&gt;31&lt;/span&gt;&lt;/td&gt;
&lt;td width=&quot;183&quot; rowspan=&quot;1&quot; colspan=&quot;1&quot;&gt;&lt;span&gt;31=31×1&lt;/span&gt;&lt;/td&gt;
&lt;td width=&quot;162&quot; align=&quot;left&quot; valign=&quot;middle&quot;&gt;&lt;span&gt;31=31×1&lt;/span&gt;&lt;/td&gt;
&lt;td width=&quot;142&quot; align=&quot;left&quot; valign=&quot;middle&quot;&gt;&lt;span&gt;1=31/31&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;37&quot; rowspan=&quot;1&quot; colspan=&quot;1&quot;&gt;&lt;span&gt;#2&lt;/span&gt;&lt;/td&gt;
&lt;td width=&quot;248&quot; rowspan=&quot;1&quot; colspan=&quot;1&quot;&gt;&lt;span&gt;http://www.abctech.com&lt;/span&gt;&lt;/td&gt;
&lt;td width=&quot;42&quot; rowspan=&quot;1&quot; colspan=&quot;1&quot;&gt;&lt;span&gt;2&lt;/span&gt;&lt;/td&gt;
&lt;td width=&quot;103&quot; rowspan=&quot;1&quot; colspan=&quot;1&quot;&gt;&lt;span&gt;3&lt;/span&gt;&lt;/td&gt;
&lt;td width=&quot;165&quot; rowspan=&quot;1&quot; colspan=&quot;1&quot;&gt;&lt;span&gt;34=31+3&lt;/span&gt;&lt;/td&gt;
&lt;td width=&quot;183&quot; rowspan=&quot;1&quot; colspan=&quot;1&quot;&gt;&lt;span&gt;32.9=31+3×0.63&lt;/span&gt;&lt;/td&gt;
&lt;td width=&quot;162&quot; align=&quot;left&quot; valign=&quot;middle&quot;&gt;&lt;span&gt;40.5=31+15×0.63&lt;/span&gt;&lt;/td&gt;
&lt;td width=&quot;142&quot; align=&quot;left&quot; valign=&quot;middle&quot;&gt;&lt;span&gt;0.81=32.9/40.5&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td width=&quot;37&quot; rowspan=&quot;1&quot; colspan=&quot;1&quot;&gt;&lt;span&gt;#3&lt;/span&gt;&lt;/td&gt;
&lt;td width=&quot;248&quot; rowspan=&quot;1&quot; colspan=&quot;1&quot;&gt;&lt;span&gt;http://abcnews.go.com/sections/&lt;/span&gt;&lt;/td&gt;
&lt;td width=&quot;42&quot; rowspan=&quot;1&quot; colspan=&quot;1&quot;&gt;&lt;span&gt;4&lt;/span&gt;&lt;/td&gt;
&lt;td width=&quot;103&quot; rowspan=&quot;1&quot; colspan=&quot;1&quot;&gt;&lt;span&gt;15&lt;/span&gt;&lt;/td&gt;
&lt;td width=&quot;165&quot; rowspan=&quot;1&quot; colspan=&quot;1&quot;&gt;&lt;span&gt;49=31+3+15&lt;/span&gt;&lt;/td&gt;
&lt;td width=&quot;183&quot; rowspan=&quot;1&quot; colspan=&quot;1&quot;&gt;&lt;span&gt;40.4=32.9+15×0.50&lt;/span&gt;&lt;/td&gt;
&lt;td width=&quot;162&quot; align=&quot;left&quot; valign=&quot;middle&quot;&gt;&lt;span&gt;48.0=40.5+15×0.5&lt;/span&gt;&lt;/td&gt;
&lt;td width=&quot;142&quot; align=&quot;left&quot; valign=&quot;middle&quot;&gt;&lt;span&gt;0.84=40.4/48.0&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;37&quot; rowspan=&quot;1&quot; colspan=&quot;1&quot;&gt;&lt;span&gt;#4&lt;/span&gt;&lt;/td&gt;
&lt;td width=&quot;248&quot; rowspan=&quot;1&quot; colspan=&quot;1&quot;&gt;&lt;span&gt;http://www.abc.net.au/&lt;/span&gt;&lt;/td&gt;
&lt;td width=&quot;42&quot; rowspan=&quot;1&quot; colspan=&quot;1&quot;&gt;&lt;span&gt;4&lt;/span&gt;&lt;/td&gt;
&lt;td width=&quot;103&quot; rowspan=&quot;1&quot; colspan=&quot;1&quot;&gt;&lt;span&gt;15&lt;/span&gt;&lt;/td&gt;
&lt;td width=&quot;165&quot; rowspan=&quot;1&quot; colspan=&quot;1&quot;&gt;&lt;span&gt;64=31+3+15+15&lt;/span&gt;&lt;/td&gt;
&lt;td width=&quot;183&quot; rowspan=&quot;1&quot; colspan=&quot;1&quot;&gt;&lt;span&gt;46.9=40.4+15×0.43&lt;/span&gt;&lt;/td&gt;
&lt;td width=&quot;162&quot; align=&quot;left&quot; valign=&quot;middle&quot;&gt;&lt;span&gt;54.5=48.0+15×0.43&lt;/span&gt;&lt;/td&gt;
&lt;td width=&quot;142&quot; align=&quot;left&quot; valign=&quot;middle&quot;&gt;&lt;span&gt;0.86=46.9/54.5&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;37&quot; rowspan=&quot;1&quot; colspan=&quot;1&quot;&gt;&lt;span&gt;#5&lt;/span&gt;&lt;/td&gt;
&lt;td width=&quot;248&quot; rowspan=&quot;1&quot; colspan=&quot;1&quot;&gt;&lt;span&gt;http://abcnews.com/&lt;/span&gt;&lt;/td&gt;
&lt;td width=&quot;42&quot; rowspan=&quot;1&quot; colspan=&quot;1&quot;&gt;&lt;span&gt;4&lt;/span&gt;&lt;/td&gt;
&lt;td width=&quot;103&quot; rowspan=&quot;1&quot; colspan=&quot;1&quot;&gt;&lt;span&gt;15&lt;/span&gt;&lt;/td&gt;
&lt;td width=&quot;165&quot; rowspan=&quot;1&quot; colspan=&quot;1&quot;&gt;&lt;span&gt;79=31+3+15+15+15&lt;/span&gt;&lt;/td&gt;
&lt;td width=&quot;183&quot; rowspan=&quot;1&quot; colspan=&quot;1&quot;&gt;&lt;span&gt;52.7=46.9+15×0.39&lt;/span&gt;&lt;/td&gt;
&lt;td width=&quot;162&quot; align=&quot;left&quot; valign=&quot;middle&quot;&gt;&lt;span&gt;60.4=54.5+15×0.39&lt;/span&gt;&lt;/td&gt;
&lt;td width=&quot;142&quot; align=&quot;left&quot; valign=&quot;middle&quot;&gt;&lt;span&gt;0.87=52.7/60.4&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;37&quot; rowspan=&quot;1&quot; colspan=&quot;1&quot;&gt;&lt;span&gt;#6&lt;/span&gt;&lt;/td&gt;
&lt;td width=&quot;248&quot; rowspan=&quot;1&quot; colspan=&quot;1&quot;&gt;&lt;span&gt;...&lt;/span&gt;&lt;/td&gt;
&lt;td width=&quot;42&quot; rowspan=&quot;1&quot; colspan=&quot;1&quot;&gt;&lt;span&gt;...&lt;/span&gt;&lt;/td&gt;
&lt;td width=&quot;103&quot; rowspan=&quot;1&quot; colspan=&quot;1&quot;&gt;&lt;span&gt;...&lt;/span&gt;&lt;/td&gt;
&lt;td width=&quot;165&quot; rowspan=&quot;1&quot; colspan=&quot;1&quot;&gt;&lt;span&gt;...&lt;/span&gt;&lt;/td&gt;
&lt;td width=&quot;183&quot; rowspan=&quot;1&quot; colspan=&quot;1&quot;&gt;&lt;span&gt;...&lt;/span&gt;&lt;/td&gt;
&lt;td width=&quot;162&quot; align=&quot;left&quot; valign=&quot;middle&quot;&gt;&lt;span&gt;...&lt;/span&gt;&lt;/td&gt;
&lt;td width=&quot;142&quot; align=&quot;left&quot; valign=&quot;middle&quot;&gt;&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h3&gt;&lt;span&gt;四、ERR&lt;/span&gt;&lt;/h3&gt;
&lt;h4&gt;&lt;span&gt;1、RR（reciprocal rank）&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;&lt;span&gt;倒数排名，指检索结果中第一个相关文档的排名的倒数。&lt;/span&gt;&lt;/p&gt;
&lt;div&gt;&lt;a href=&quot;https://images2018.cnblogs.com/blog/335284/201803/335284-20180329233654171-1308937891.png&quot;&gt;&lt;span&gt;&lt;img width=&quot;151&quot; height=&quot;77&quot; title=&quot;9d0fa1c3-5446-4161-9bbb-b88811ff9b36&quot; alt=&quot;9d0fa1c3-5446-4161-9bbb-b88811ff9b36&quot; src=&quot;https://images2018.cnblogs.com/blog/335284/201803/335284-20180329233654476-33703257.png&quot; border=&quot;0&quot;/&gt;&lt;/span&gt;&lt;/a&gt;&lt;/div&gt;
&lt;h4&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;2、MRR（mean reciprocal rank）&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;&lt;span&gt;多个查询的倒数排名的均值，公式如下：&lt;/span&gt;&lt;/p&gt;
&lt;div&gt;&lt;a href=&quot;https://images2018.cnblogs.com/blog/335284/201803/335284-20180329233654729-847316414.png&quot;&gt;&lt;span&gt;&lt;img width=&quot;264&quot; height=&quot;92&quot; title=&quot;b9d4b10e-a0de-448d-8dd6-6962a57e7824&quot; alt=&quot;b9d4b10e-a0de-448d-8dd6-6962a57e7824&quot; src=&quot;https://images2018.cnblogs.com/blog/335284/201803/335284-20180329233655006-1753595183.png&quot; border=&quot;0&quot;/&gt;&lt;/span&gt;&lt;/a&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;rank&lt;/span&gt;&lt;sub&gt;&lt;span&gt;i&lt;/span&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/sub&gt;&lt;span&gt;表示第 i 个查询的第一个相关文档的排名。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h4&gt;&lt;span&gt;3、Cascade Model（瀑布模型）&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;点击模型&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;中的瀑布模型，考虑到在同一个检索结果列表中各文档之间的位置依赖关系，假设用户从上至下查看，如果遇到某一检索结果项满意并进行点击，则操作结束；否则跳过该项继续往后查看。第 i 个位置的文档项被点击的概率为：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div&gt;&lt;a href=&quot;https://images2018.cnblogs.com/blog/335284/201803/335284-20180329233655268-282374562.jpg&quot;&gt;&lt;span&gt;&lt;img width=&quot;234&quot; height=&quot;88&quot; title=&quot;48f5f9eb-dd78-4ad0-bb08-514712295384&quot; alt=&quot;48f5f9eb-dd78-4ad0-bb08-514712295384&quot; src=&quot;https://images2018.cnblogs.com/blog/335284/201803/335284-20180329233655629-1596370064.jpg&quot; border=&quot;0&quot;/&gt;&lt;/span&gt;&lt;/a&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;其中 r&lt;/span&gt;&lt;sub&gt;&lt;span&gt;i&lt;/span&gt;&lt;/sub&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;表示第 i 个文档被点击的概率，前 i-1 个文档则没有被点击，概率均为 1-r&lt;/span&gt;&lt;sub&gt;&lt;span&gt;j&lt;/span&gt;&lt;/sub&gt;&lt;span&gt;；&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h4&gt;&lt;span&gt;4、ERR（Expected reciprocal rank）&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;&lt;span&gt;预期的倒数排名，表示用户的需求被满足时停止的位置的倒数的期望，与 RR 计算第一个相关文档的位置倒数不同。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;首先用户在位置 r 处停止的概率 PP&lt;/span&gt;&lt;sub&gt;&lt;span&gt;r&lt;/span&gt;&lt;/sub&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;计算公式如下：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div&gt;&lt;a href=&quot;https://images2018.cnblogs.com/blog/335284/201803/335284-20180329233655898-1839418406.jpg&quot;&gt;&lt;span&gt;&lt;img width=&quot;234&quot; height=&quot;79&quot; title=&quot;d9f84f88-933b-49dd-a6e2-0f470eb81386&quot; alt=&quot;d9f84f88-933b-49dd-a6e2-0f470eb81386&quot; src=&quot;https://images2018.cnblogs.com/blog/335284/201803/335284-20180329233656219-217839556.jpg&quot; border=&quot;0&quot;/&gt;&lt;/span&gt;&lt;/a&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;其中 R&lt;/span&gt;&lt;sub&gt;&lt;span&gt;i&lt;/span&gt;&lt;/sub&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;是关于文档相关度等级的函数，现假设该函数为：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div&gt;&lt;a href=&quot;https://images2018.cnblogs.com/blog/335284/201803/335284-20180329233656511-1920293571.png&quot;&gt;&lt;span&gt;&lt;img width=&quot;469&quot; height=&quot;108&quot; title=&quot;3623a307-2760-4c02-806a-ea9ca4be5ceb&quot; alt=&quot;3623a307-2760-4c02-806a-ea9ca4be5ceb&quot; src=&quot;https://images2018.cnblogs.com/blog/335284/201803/335284-20180329233656886-293149431.png&quot; border=&quot;0&quot;/&gt;&lt;/span&gt;&lt;/a&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;当文档是不相关的（g=0），则用户检索到相关文档的概率为0；而当文档极其相关（g=4，如果相关度划分5个等级）时，用户检索到相关文档的概率接近于1。上面公式中的 g 表示文档的相关度，参考 NDCG 中的 rel。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;更通用一点来讲，ERR 不一定是计算用户需求满足时停止的位置的倒数的期望，它可以是基于位置的函数&lt;/span&gt; &lt;span class=&quot;MJX_Assistive_MathML&quot;&gt;&lt;?XML:NAMESPACE PREFIX = &quot;[default] http://www.w3.org/1998/Math/MathML&quot; NS = &quot;http://www.w3.org/1998/Math/MathML&quot; /??&gt;&lt;span&gt;φ(r&lt;/span&gt;&lt;span&gt;) ，只要满足 φ(0&lt;/span&gt;&lt;span&gt;)=1，且随着 r→&lt;span&gt;∞，&lt;/span&gt;φ(r&lt;/span&gt;&lt;span&gt;)→0。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;MJX_Assistive_MathML&quot;&gt;&lt;span&gt;ERR 的计算公式如下：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div readability=&quot;7&quot;&gt;
&lt;div&gt;&lt;span class=&quot;MJX_Assistive_MathML&quot;&gt;&lt;a href=&quot;https://images2018.cnblogs.com/blog/335284/201803/335284-20180329233657253-1088965604.png&quot;&gt;&lt;span&gt;&lt;img width=&quot;627&quot; height=&quot;91&quot; title=&quot;29e3a765-0beb-4df5-beb1-010ac8a91b63&quot; alt=&quot;29e3a765-0beb-4df5-beb1-010ac8a91b63&quot; src=&quot;https://images2018.cnblogs.com/blog/335284/201803/335284-20180329233657574-1792360744.png&quot; border=&quot;0&quot;/&gt;&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;span class=&quot;MJX_Assistive_MathML&quot;&gt;&lt;span&gt;&lt;span&gt;可以看出，当 φ(r&lt;/span&gt;&lt;span&gt;)=1/r 时就是 ERR，当 φ(r&lt;/span&gt;&lt;span&gt;)=1/log&lt;/span&gt;&lt;sub&gt;&lt;span&gt;2&lt;/span&gt;&lt;/sub&gt;&lt;span&gt;(r+1) 就是DCG。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;h3&gt;&lt;span&gt;参考链接：&lt;/span&gt;&lt;/h3&gt;







&lt;p&gt;by. Memento&lt;br class=&quot;Apple-interchange-newline&quot;/&gt;&lt;/p&gt;
</description>
<pubDate>Thu, 29 Mar 2018 15:37:00 +0000</pubDate>
<dc:creator>Memento</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/memento/p/8673309.html</dc:identifier>
</item>
<item>
<title>drbd(一)：简介和安装 - 骏马金龙</title>
<link>http://www.cnblogs.com/f-ck-need-u/p/8673178.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/f-ck-need-u/p/8673178.html</guid>
<description>&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;a&gt;&lt;span&gt;本文目录：&lt;/span&gt;&lt;/a&gt;&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;a href=&quot;http://www.cnblogs.com/f-ck-need-u/p/8673178.html#blog1&quot;&gt;&lt;span&gt;1.drbd简介&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;a href=&quot;http://www.cnblogs.com/f-ck-need-u/p/8673178.html#blog2&quot;&gt;&lt;span&gt;2.drbd工作原理和术语说明&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　&lt;a href=&quot;http://www.cnblogs.com/f-ck-need-u/p/8673178.html#blog2.1&quot;&gt;&lt;span&gt;2.1 drbd工作原理&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　&lt;a href=&quot;http://www.cnblogs.com/f-ck-need-u/p/8673178.html#blog2.2&quot;&gt;&lt;span&gt;2.2 drbd复制协议模型&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　&lt;a href=&quot;http://www.cnblogs.com/f-ck-need-u/p/8673178.html#blog2.3&quot;&gt;&lt;span&gt;2.3 drbd设备的概念&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　&lt;a href=&quot;http://www.cnblogs.com/f-ck-need-u/p/8673178.html#blog2.4&quot;&gt;&lt;span&gt;2.4 drbd资源角色&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　&lt;a href=&quot;http://www.cnblogs.com/f-ck-need-u/p/8673178.html#blog2.5&quot;&gt;&lt;span&gt;2.5 drbd工作模式&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　&lt;a href=&quot;http://www.cnblogs.com/f-ck-need-u/p/8673178.html#blog2.6&quot;&gt;&lt;span&gt;2.6 drbd分区说明&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;a href=&quot;http://www.cnblogs.com/f-ck-need-u/p/8673178.html#blog3&quot;&gt;&lt;span&gt;3.drbd部署实验&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　&lt;a href=&quot;http://www.cnblogs.com/f-ck-need-u/p/8673178.html#blog3.1&quot;&gt;&lt;span&gt;3.1 实验环境和部署前的准备&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　&lt;a href=&quot;http://www.cnblogs.com/f-ck-need-u/p/8673178.html#blog3.2&quot;&gt;&lt;span&gt;3.2 yum安装drbd&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　&lt;a href=&quot;http://www.cnblogs.com/f-ck-need-u/p/8673178.html#blog3.3&quot;&gt;&lt;span&gt;3.3 编译安装drbd&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;


&lt;p&gt;&lt;span&gt;drbd是&lt;strong&gt;通过网络(tcp连接)在不同服务器之间实现基于block级别进行数据实时同步的软件&lt;/strong&gt;&lt;/span&gt;。类似于inotify+rsync，只不过inotify+rsync是按文件级别来同步的，而drbd是工作在文件系统下层的，实现的是block同步和拷贝，效率相对较高。且inotify+rsync是通过监控事件来实现实时同步的，而drbd则跟普通写入磁盘的过程一样，只不过多了一条写入网卡的分支路线。&lt;/p&gt;
&lt;p&gt;如下图，此处只是简单的示意图。更具体的原理图见下文。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/733013/201803/733013-20180329152757292-1204044548.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;drbd只能在分区上、LVM逻辑卷上或整块磁盘上实现，不能在某一个目录上实现。&lt;/p&gt;
&lt;p&gt;drbd支持同步、半同步、异步三种数据同步的方式。&lt;/p&gt;
&lt;p&gt;drbd支持脑裂(brain split)通知和自动恢复。&lt;/p&gt;


&lt;p&gt;drbd的核心功能是通过Linux内核模块实现的。特别地，操作系统中的虚拟块设备(virtual block device)中有它的驱动，因此drbd几乎处于操作系统I/O堆栈的&quot;最底部&quot;。这使得它非常具有弹性，可以很容易地为服务提供高可用性。&lt;/p&gt;
&lt;p&gt;但注意，drbd处于文件系统之下的层次，不能实现文件系统层次的功能，例如检查文件是否损坏、为文件系统提供高可用等。但它是基于block的，可以做块设备检查、同步的完整性检查等。&lt;/p&gt;

&lt;h2 id=&quot;2-1-drbd-&quot;&gt;2.1 drbd工作原理&lt;/h2&gt;
&lt;p&gt;drbd实现基于块级别的数据同步，其实现方式是通过tcp连接来镜像整个设备。&lt;/p&gt;
&lt;p&gt;它有主备节点的概念。在主节点上，可以对drbd设备创建文件系统以供读取，甚至可以直接IO。在主节点写入的数据通过DRBD设备存储到主节点的磁盘设备中，同时，这个数据块也会通过网络传输到备节点对应的DRBD设备上，最终写入备用节点的磁盘设备上实现同步。在备用节点上，DRBD只是将数据从DRBD设备写入到备用节点的磁盘中，无法供外界读、写，之所以连读都提供，是为了维护缓存一致性(cache coherency)的问题。&lt;/p&gt;
&lt;p&gt;现在大部分的高可用集群都会使用共享存储，在实时同步以及数据一致性角度而言，drbd能代替共享存储。而且，drbd可以配合高可用软件，实现高可用服务的切换而不会数据丢失，因为备节点和主节点数据是实时同步的，这样给用户的体验是更好的，但却节约了成本，其性能与稳定性方面也不错。&lt;/p&gt;
&lt;p&gt;下图是drbd的原理图。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/733013/201803/733013-20180329153010222-1008430710.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;对于正常的文件系统，写入数据的流程：&lt;code&gt;buffer--&amp;gt;filesystem--&amp;gt; disk scheduler--&amp;gt;disk driver--&amp;gt;disk&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;而使用drbd时，流程是上图中的红色箭头。在filesystem的下一层加上drbd层，该层将写入的数据通过drbd发送到tcp套接字的send缓存(send buffer)，再通过DMA的方式拷贝到网卡，由网卡发送到备节点。备节点的drbd设备从tcp套接字的recv缓存(recv buffer)中接收数据，然后从drbd设备读出数据并等待disk scheduler调度写入到磁盘中。&lt;/p&gt;
&lt;p&gt;如果不理解或者理解的不清晰，可先阅读：&lt;span&gt;&lt;a href=&quot;http://www.cnblogs.com/f-ck-need-u/p/7623252.html&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;不可不知的socket和TCP连接过程&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;其中A/B/C是drbd复制的协议级别，如下&quot;drbd复制模型&quot;所述。&lt;/p&gt;

&lt;h2 id=&quot;2-2-drbd-&quot;&gt;2.2 drbd复制协议模型&lt;/h2&gt;
&lt;p&gt;上面drbd工作原理图中的A、B、C对应的是drbd的不同复制模型。复制模型指的是数据的写入执行到哪个过程就认为此次写操作已经完成。&lt;/p&gt;
&lt;p&gt;drbd有三种复制协议：同步、半同步、异步。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;A协议&lt;/code&gt;：异步复制(asynchronous)，如上图A标识，指的是&lt;span&gt;&lt;strong&gt;当数据写到本地磁盘上，并且复数据已经复制到tcp的send buffer缓冲区以后，此时就认为写入磁盘成功。&lt;/strong&gt;&lt;/span&gt;此复制协议性能好，但可能会丢失一些最近的数据。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;B协议&lt;/code&gt;：半同步复制(semi sync)，也称为内存复制，如上图B标识，指的是&lt;span&gt;&lt;strong&gt;数据已经写到本地磁盘上，并且已经被对方的tcp协议栈接收到(即写入到了对方的recv buffer中)，此时就认为此次写操作成功。&lt;/strong&gt;&lt;/span&gt;此复制协议性能较好，且只有当两节点都断电时才会丢失最近处于socket buffer中的数据。因此性能和数据可靠性介于协议A和C之间。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;C协议&lt;/code&gt;：同步复制(sync)，如上图C标识，指的是&lt;span&gt;&lt;strong&gt;数据已经写入到本地磁盘，也已经写入到远程磁盘上，此时就认为此次写操作成功。&lt;/strong&gt;&lt;/span&gt;此复制协议性能较差，但数据可靠性高。&lt;/p&gt;
&lt;p&gt;C复制协议是drbd默认使用的协议。&lt;/p&gt;

&lt;h2 id=&quot;2-3-drbd-&quot;&gt;2.3 DRBD设备的概念&lt;/h2&gt;
&lt;p&gt;DRBD设备是操作系统中的一个虚拟块设备，在Linux上游内核中已经集成了DRBD的块设备模块和驱动。它的主设备号(major)为147，次设备号默认从0开始编号。&lt;/p&gt;
&lt;p&gt;在一组主机上,drbd设备的设备名称为/dev/drbdN，这个N通常和它的次设备号一致。&lt;/p&gt;
&lt;p&gt;DRBD需要构建在底层设备之上，然后构建出一个块设备出来。对于用户来说，一个DRBD设备，就像是一个分区，可以在上面创建文件系统。DRBD所支持的底层设备有以下这些类：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;1、磁盘或磁盘的某一个分区；&lt;/li&gt;
&lt;li&gt;2、软 raid 设备；&lt;/li&gt;
&lt;li&gt;3、LVM的逻辑卷；&lt;/li&gt;
&lt;li&gt;4、EVMS(企业卷管理系统,Enterprise Volume Management System)；&lt;/li&gt;
&lt;li&gt;4、其他任何的块设备，甚至DRBD块设备自身也能成为另一个DRBD的底层设备。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;2-4-drbd-&quot;&gt;2.4 drbd资源角色&lt;/h2&gt;
&lt;p&gt;在drbd构造的集群中，资源具有角色的概念，分别为primary和secondary（主从的概念）。&lt;/p&gt;
&lt;p&gt;所有primary的资源将不受限制进行读写操作，可以创建文件系统，可以使用裸设备，可以直接io。而所有secondary的设备中不能挂载，不能读、写。&lt;/p&gt;

&lt;h2 id=&quot;2-5-drbd-&quot;&gt;2.5 drbd工作模式&lt;/h2&gt;
&lt;ol readability=&quot;2&quot;&gt;&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;&lt;strong&gt;主从模型master/slave（primary/secondary）&lt;/strong&gt;&lt;br/&gt;这种机制在某一时刻只允许有一个主节点。主节点的作用是可以挂载使用，写入数据等；从节点只是作为主节点的镜像，是主节点的备份，且是不可见的。&lt;br/&gt;这样的工作机制的好处是可以有效的避免磁盘出现单点故障，而且数据不会错乱。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;&lt;strong&gt;双主模型dula primary(primary/primary)&lt;/strong&gt;&lt;br/&gt;所谓双主模型是2个节点都可以当做主节点来挂载使用。但会导致数据错乱。当第一个主节点对某一文件正在执行写操作，此时另一个节点也正在对同一文件执行写操作，这种情况会造成数据错乱，从而导致数据不能正常使用。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;解决双主模型数据混乱的方案是：使用集群(分布式)文件系统，如gfs2。集群文件系统使用分布式文件锁管理器，当一个节点对文件加锁之后会通过某种机制来通知其他节点锁信息，从而实现文件锁共享。&lt;/p&gt;
&lt;p&gt;也可以将两节点的不同drbd设备分别设置主从，从而实现双主模型。例如服务器A上的a分区(主)和服务器B上的a分区（从），同时服务器A上的b分区(从)和服务器B上的b分区(主)。&lt;/p&gt;

&lt;h2 id=&quot;2-6-&quot;&gt;2.6 分区说明&lt;/h2&gt;
&lt;p&gt;drbd分为两种分区。其中一个分区是metadata区，用于存储元数据，给个1G就够了，2G就非常多了；另一种分区是数据区，这是drbd块设备的底层设备。因此，大多数情况下需要在drbd的两节点上创建两个分区，分别作为metadata区和data区。&lt;/p&gt;
&lt;p&gt;注意，metadata区也可以和数据区在同一分区，这时metadata区称为&quot;内部元数据区(Internal metadata)&quot;。&lt;/p&gt;
&lt;p&gt;关于分区有几点注意：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;数据区创建完成后不能挂载。&lt;/li&gt;
&lt;li&gt;metadata分区创建完成后不能格式化，也就是不能创建文件系统（要交给drbd来处理）。&lt;/li&gt;
&lt;li&gt;建议两边的数据分区大小给一样的，否则一端会浪费空间。如何解决此问题后文说明。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;绝大多数情况下，drbd都是两节点的，要么是主从工作模式(primary/secondary)，要么是结合集群文件系统的主主模式(primary/primary)。很少情况下，可以添加一个第三节点，作为backup角色。&lt;/p&gt;
&lt;p&gt;drbd节点最好部署在使用专门的网络环境下，节点之间可以使用直连模式、back-to-back模式或使用高速网卡。如果中间跨了交换机，建议加上Linux的网卡绑定功能(如不了解，请百度&quot;bonding驱动&quot;)。不建议drbd节点之间跨路由器，这会严重影响性能。&lt;/p&gt;
&lt;p&gt;drbd两节点之间的数据区应尽量差不多大小。&lt;/p&gt;

&lt;h2 id=&quot;3-1-&quot;&gt;3.1 实验环境以及安装前的准备&lt;/h2&gt;
&lt;p&gt;drbd的实验环境：&lt;br/&gt;A服务器上：&lt;br/&gt;　　管理IP：eth0 192.168.100.49&lt;br/&gt;　　数据同步IP：eth1 192.168.100.51&lt;br/&gt;B服务器上：&lt;br/&gt;　　管理IP：eth0 192.168.100.50&lt;br/&gt;　　数据同步IP：eth1 192.168.100.52&lt;/p&gt;
&lt;p&gt;操作系统均为CentOS 7.2，安装的drbd是8.4版。&lt;/p&gt;
&lt;ol readability=&quot;7&quot;&gt;&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;修改主机名。因为drbd是基于主机名解析的。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;hostnamectl &lt;span class=&quot;hljs-built_in&quot;&gt;set&lt;/span&gt;-hostname drbd1.longshuai.com  &lt;span class=&quot;hljs-preprocessor&quot;&gt;# A服务器上配置&lt;/span&gt;
hostnamectl &lt;span class=&quot;hljs-built_in&quot;&gt;set&lt;/span&gt;-hostname drbd2.longshuai.com  &lt;span class=&quot;hljs-preprocessor&quot;&gt;# B服务器上配置&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;修改hosts文件。最好将主机名配置成数据同步专用通道eth1的地址。&lt;br/&gt;A/B服务器上都配置&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;192.168.100.51 node1.longshuai.com node1
192.168.100.52 node2.longshuai.com node2
&lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;添加主机路由。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&lt;span class=&quot;hljs-title&quot;&gt;route&lt;/span&gt; add -host &lt;span class=&quot;hljs-number&quot;&gt;192.168.100.52&lt;/span&gt; dev eth1  
route add -host &lt;span class=&quot;hljs-number&quot;&gt;192.168.100.51&lt;/span&gt; dev eth1  
&lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;时间同步。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&lt;span class=&quot;hljs-title&quot;&gt;ntpdate&lt;/span&gt; ntp1.aliyun.com     
&lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li readability=&quot;5&quot;&gt;
&lt;p&gt;提供分区。&lt;br/&gt;分别在A/B服务器上添加一块硬盘，然后都分为两个区。注意，作为metadata的分区不要格式化，而用作data的分区格式化后不要挂载。&lt;br/&gt;此处实验分区为/dev/sdb1(metadata区)和/dev/sdb5(数据区)。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;

&lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; /sys/class/scsi_host/*;&lt;span class=&quot;hljs-keyword&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;- - -&quot;&lt;/span&gt; &amp;gt;&lt;span class=&quot;hljs-variable&quot;&gt;$i&lt;/span&gt;/scan;&lt;span class=&quot;hljs-keyword&quot;&gt;done&lt;/span&gt;


parted /dev/sdb mklabel msdos
parted /dev/sdb mkpart p &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;G
parted /dev/sdb &lt;span class=&quot;hljs-string&quot;&gt;&quot;mkpart e 1G -1&quot;&lt;/span&gt;
parted /dev/sdb mkpart l &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;G &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;G
fdisk /dev/sdb
&lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;3-2-yum-drbd&quot;&gt;3.2 yum安装drbd&lt;/h2&gt;
&lt;p&gt;drbd工具分为两部分：内核模块(kmod-drbd)和用户空间的管理工具(drbd-utils)，其中内核模块已经整合到了2.6.33版本及以后版本的上游内核中。如果早于这个版本，则需要安装和管理工具相同版本的模块。&lt;/p&gt;
&lt;p&gt;在elrepo源中，可以找到drbd的内核模块和管理工具。因此先配置elrepo源(此处配置清华大学镜像站的elrepo)。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;cat /etc/yum.repos.d/elrepo.repo 

[elrepo]
&lt;span class=&quot;hljs-constant&quot;&gt;name&lt;/span&gt;=elrepo
&lt;span class=&quot;hljs-constant&quot;&gt;baseurl&lt;/span&gt;=https://mirrors.tuna.tsinghua.edu.cn/elrepo/archive/elrepo/el7/x86_64/
&lt;span class=&quot;hljs-constant&quot;&gt;enable&lt;/span&gt;=1
&lt;span class=&quot;hljs-constant&quot;&gt;gpgcheck&lt;/span&gt;=0
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;再安装drbd84-utils和对应版本的模块kmod-drbd84。安装后装载drbd模块。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;yum -y &lt;span class=&quot;hljs-operator&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;install&lt;/span&gt; drbd84-utils kmod-drbd84

modprobe drbd&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;如果装载drbd模块时发现&quot;not found&quot;，说明没有安装&quot;kernel-devel&quot;，yum安装下后重启系统即可。&lt;/p&gt;
&lt;p&gt;看看drbd84-utils提供了哪些工具：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;[root&lt;span class=&quot;hljs-variable&quot;&gt;@node1&lt;/span&gt; ~]
/usr/sbin/drbd-overview   
/usr/sbin/drbdadm         
/usr/sbin/drbdmeta        
/usr/sbin/drbdmon         
/usr/sbin/drbdsetup       
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;其中drbdadm是主要管理工具，可以给其传递一些模块化的命令来调用其他的drbd工具。例如&lt;code&gt;drbdadm create-md&lt;/code&gt;将调用drbdmeta工具。&lt;/p&gt;
&lt;p&gt;此外，还提供了/etc/ha.d/resource.d/drbddisk脚本，用于结合heartbeat使用，该脚本用于标记节点块设备为primary角色并进行文件系统的挂载。&lt;/p&gt;

&lt;h2 id=&quot;3-3-drbd&quot;&gt;3.3 编译安装drbd&lt;/h2&gt;
&lt;p&gt;测试环境CentOS 6.6&lt;/p&gt;
&lt;p&gt;安装相关程序：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;yum -y &lt;span class=&quot;hljs-operator&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;install&lt;/span&gt; gcc make automake autoconf kernel-devel kernel-headers flex libxslt&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;如果发现更新了kernel版本，则需要重启系统。重启后需要重新配置路由，否则两端不能通信。&lt;/p&gt;
&lt;p&gt;下载drbd-utils：wget &lt;a href=&quot;http://www.drbd.org/download/drbd/utils/drbd-utils-8.9.10.tar.gz&quot;&gt;http://www.drbd.org/download/drbd/utils/drbd-utils-8.9.10.tar.gz&lt;/a&gt;&lt;br/&gt;下载drbd软件：wget &lt;a href=&quot;http://www.drbd.org/download/drbd/9.0/drbd-9.0.4-1.tar.gz&quot;&gt;http://www.drbd.org/download/drbd/9.0/drbd-9.0.4-1.tar.gz&lt;/a&gt;&lt;/p&gt;
&lt;ol readability=&quot;2&quot;&gt;&lt;li readability=&quot;1&quot;&gt;先安装drbd-utils再安装drbd
&lt;pre&gt;
&lt;code&gt;wget http://www.drbd.org/download/drbd/utils/drbd-utils-8.9.10.tar.gz
tar xf drbd-utils-8.9.10.tar.gz 
cd drbd-utils-8.9.10
./autogen.sh
./configure 
make KDIR=/usr/src/kernels/2.6.32-504.el6.x86_64/
make &lt;span class=&quot;hljs-operator&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;install&lt;/span&gt;&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;再安装drbd
&lt;pre&gt;
&lt;code&gt;tar xf drbd-&lt;span class=&quot;hljs-number&quot;&gt;9.0&lt;/span&gt;.&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;.tar.gz
cd drbd-&lt;span class=&quot;hljs-number&quot;&gt;9.0&lt;/span&gt;.&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;
make &lt;span class=&quot;hljs-constant&quot;&gt;KDIR&lt;/span&gt;=&lt;span class=&quot;hljs-regexp&quot;&gt;/usr/src&lt;/span&gt;&lt;span class=&quot;hljs-regexp&quot;&gt;/kernels/&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;2.6&lt;/span&gt;.&lt;span class=&quot;hljs-number&quot;&gt;32&lt;/span&gt;-&lt;span class=&quot;hljs-number&quot;&gt;504&lt;/span&gt;.el6.x86_64/
make install
&lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;最后加载drbd模块
&lt;pre&gt;
&lt;code&gt;lsmod|&lt;span class=&quot;hljs-keyword&quot;&gt;grep&lt;/span&gt; drbd
modprobe drbd
lsmod|&lt;span class=&quot;hljs-keyword&quot;&gt;grep&lt;/span&gt; drbd
drbd                  &lt;span class=&quot;hljs-number&quot;&gt;500374&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; 
libcrc32c               &lt;span class=&quot;hljs-number&quot;&gt;1246&lt;/span&gt;  &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; drbd,btrfs
&lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;由于重启模块不自动加载，可以在&lt;code&gt;/etc/sysconfig/modules/&lt;/code&gt;目录下新建一个*.modules文件，里面写入&lt;code&gt;modprobe drbd&lt;/code&gt;，或者在/etc/rc.modules文件(可能不存在)中追加此行。当然，放入到rc.local也是一样的。&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;a href=&quot;http://www.cnblogs.com/f-ck-need-u/p/7048359.html&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;回到Linux系列文章大纲：http://www.cnblogs.com/f-ck-need-u/p/7048359.html&lt;/span&gt;&lt;/a&gt;&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;strong&gt;&lt;a href=&quot;http://www.cnblogs.com/f-ck-need-u/p/7576137.html&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;回到网站架构系列文章大纲：http://www.cnblogs.com/f-ck-need-u/p/7576137.html&lt;/span&gt;&lt;/a&gt;&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;strong&gt;&lt;a href=&quot;http://www.cnblogs.com/f-ck-need-u/p/7586194.html&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;回到数据库系列文章大纲：http://www.cnblogs.com/f-ck-need-u/p/7586194.html&lt;/span&gt;&lt;/a&gt;&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;strong&gt;&lt;a href=&quot;http://www.cnblogs.com/f-ck-need-u/p/8673178.html&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;转载请注明出处：http://www.cnblogs.com/f-ck-need-u/p/8673178.html&lt;/span&gt;&lt;/a&gt;&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;注：若您觉得这篇文章还不错请点击右下角推荐，您的支持能激发作者更大的写作热情，非常感谢！&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Thu, 29 Mar 2018 15:15:00 +0000</pubDate>
<dc:creator>骏马金龙</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/f-ck-need-u/p/8673178.html</dc:identifier>
</item>
<item>
<title>ASP.NET没有魔法——ASP.NET MVC Razor与View渲染 - 7m鱼</title>
<link>http://www.cnblogs.com/selimsong/p/8670744.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/selimsong/p/8670744.html</guid>
<description>&lt;p&gt;　　对于Web应用来说，它的界面是由浏览器根据HTML代码及其引用的相关资源进行渲染后展示给用户的结果，换句话说Web应用的界面呈现工作是由浏览器完成的，&lt;span&gt;Web应用的原理是通过Http协议从服务器上获取到对应的Html代码以及相关资源，使得浏览器能够完成正确的呈现工作&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;　　ASP.NET MVC作为一个Web应用构建框架View承担了UI显示的功能，在开发过程中View以Action的名称命名，当用户的请求被路由到某一Action方法时，ASP.NET MVC将会根据Action的名称来获取到对应的View文件，将该View文件动态处理后生成最终的Html内容，将内容返回到浏览器进行显示。所以&lt;span&gt;ASP.NET的渲染实际上指的是动态的生成Html代码的过程&lt;/span&gt;。&lt;br/&gt;　　而ASP.NET MVC中action的代码可以简单如下：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/640251/201803/640251-20180329144505497-1446560647.png&quot; alt=&quot;&quot;/&gt;　&lt;/p&gt;
&lt;p&gt;　　仅需要调用一个View方法就可以将Index这个View显示到用户的浏览器上，那么View方法到底做了什么处理？Razor是什么？Action方法的返回值ActionResult又是什么？&lt;br/&gt;　　本文将从以下几个方面来介绍ASP.NET MVC Html代码的生成过程：&lt;br/&gt;　　● &lt;a href=&quot;http://www.cnblogs.com/selimsong/p/8670744.html#actionresult&quot;&gt;ActionResult及ViewResult&lt;/a&gt;&lt;br/&gt;　　● &lt;a href=&quot;http://www.cnblogs.com/selimsong/p/8670744.html#findview&quot;&gt;View的查找与Razor&lt;/a&gt;&lt;br/&gt;　　　　○ &lt;a href=&quot;http://www.cnblogs.com/selimsong/p/8670744.html#viewengine&quot;&gt;ViewEngineCollection&amp;amp;ViewEngine&lt;/a&gt;&lt;br/&gt;　　　　○ &lt;a href=&quot;http://www.cnblogs.com/selimsong/p/8670744.html#viewengineresult&quot;&gt;ViewEngineResult&lt;/a&gt;&lt;br/&gt;　　● &lt;a href=&quot;http://www.cnblogs.com/selimsong/p/8670744.html#viewcompiled&quot;&gt;View的编译与激活&lt;/a&gt;&lt;br/&gt;　　● &lt;a href=&quot;http://www.cnblogs.com/selimsong/p/8670744.html#viewrender&quot;&gt;View的渲染&lt;/a&gt;&lt;br/&gt;　　● &lt;a href=&quot;http://www.cnblogs.com/selimsong/p/8670744.html#viewdemo&quot;&gt;使用示例代码演示View的渲染过程&lt;/a&gt;&lt;br/&gt;　　● &lt;a href=&quot;http://www.cnblogs.com/selimsong/p/8670744.html#htmlhelper&quot;&gt;View的Html Helper与ModelMetadata&lt;/a&gt;&lt;br/&gt;　　● &lt;a href=&quot;http://www.cnblogs.com/selimsong/p/8670744.html#moreresult&quot;&gt;常用的ActionResult&lt;/a&gt;&lt;br/&gt;　　● &lt;a href=&quot;http://www.cnblogs.com/selimsong/p/8670744.html#summary&quot;&gt;小结&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;ActionResult及ViewResult&lt;/h2&gt;
&lt;p&gt;　　在之前的文章《ASP.NET没有魔法——ASP.NET MVC 过滤器(Filter)》中提到过，Action方法是由ActionInvoker完成执行的，Action返回的结果是一个ActionResult类型，Action执行后ActionInvoker又调用了ActionResult的ExecuteResult方法完成特定的操作，相关代码如下所示：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/640251/201803/640251-20180329144828010-1166195013.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/640251/201803/640251-20180329144841214-2018237195.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　ActionResult的定义如下，它包含了一个名为ExecuteResult的方法，该方法用来完成对action方法执行结果进行处理：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/640251/201803/640251-20180329145317594-4107320.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　回到最初提到的View()方法，该方法定义在Controller中，它的返回值是一个ViewResult类型：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/640251/201803/640251-20180329145537111-1253533339.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　可以这么说，当Action执行完成后，ASP.NET MVC的&lt;strong&gt;&lt;span&gt;View渲染工作是由ViewResult在ExecuteResult方法中完成的&lt;/span&gt;&lt;/strong&gt;，ViewResult的ExecuteResult实现代码如下(&lt;span&gt;注：该代码在ViewResult的基类ViewResultBase中实现&lt;/span&gt;)：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/640251/201803/640251-20180329150018357-475158461.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　从代码中可以容易的看出，ASP.NET MVC中View的渲染工作主要有四步：&lt;br/&gt;　　1. 如果没有指定View的名称，那么默认以Action的名称为View名称。&lt;br/&gt;　　2. 根据控制器的上下文查找并获得真实的View对象。&lt;br/&gt;　　3. 调用View对象的Render方法将View的内容写到HttpContext的响应信息中，后续将其返回至浏览器。&lt;br/&gt;　　4. 释放View对象。&lt;/p&gt;
&lt;p&gt;　　根据上面的分析View渲染的两个重要步骤就是View对象的&lt;strong&gt;&lt;span&gt;查找&lt;/span&gt;&lt;/strong&gt;和&lt;strong&gt;&lt;span&gt;渲染&lt;/span&gt;&lt;/strong&gt;，其整个过程可参考下图，详细内容将在后续介绍：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/640251/201803/640251-20180329172352760-1808655103.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;View的查找与Razor&lt;/h2&gt;
&lt;p&gt;　　在ASP.NET MVC中View文件一般放置在项目根目录的Views目录下，以Controller名称为子目录，每一个子目录下保存了以action方法名称命名的View文件：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/640251/201803/640251-20180329152244734-463264037.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　ViewResult类型中查找View的代码如下：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/640251/201803/640251-20180329152952714-1234046494.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　从代码可以看出它是通过一个ViewEngineCollection对象，根据ViewName（默认是actionName）去查找View的，如果找到返回一个ViewEngineResult类型，否则将抛出异常，异常中包含查找的位置：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/640251/201803/640251-20180329153107077-1997978555.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; 　　&lt;span&gt;注：从上面的错误信息中可以看到ASP.NET MVC在查找View时，除了匹配了.cshtml和.vbhtml的文件外，还匹配了.aspx和.ascx的文件，后者是Web Form框架的页面文件，这是为什么呢？因为默认情况下ASP.NET MVC中会包含MVC使用的Razor 引擎和Web Form使用的Web Form引擎，所以在纯使用MVC开发的情况下，&lt;strong&gt;为了优化性能&lt;/strong&gt;，一般会通过以下代码将Web Form的引擎删除：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/640251/201803/640251-20180329171719306-428819317.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;span&gt;更多View引擎的内容后续介绍。&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;ViewEngineCollection&amp;amp;ViewEngine&lt;/h3&gt;
&lt;p&gt;　　在ASP.NET中有一个IViewEngine的接口，它定义了查找和释放View，其定义如下：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/640251/201803/640251-20180329153215554-1044568484.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　而ASP.NET中实现IViewEngine接口的类型关系如下图：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/640251/201803/640251-20180329153243202-1814045667.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　从该图中可以得到一下信息：&lt;br/&gt;　　● ASP.NET中有两个最终实现的ViewEngine，分别是Razor和WebForm，MVC应用中使用Razor实现View的渲染。&lt;br/&gt;　　● 它们的基类都是VirtualPathProviderViewEngine，就是说它们都是基于相对路径来管理View的。&lt;br/&gt;　　● 它们的基类都是BuildManagerViewEngine，表面它们都和编译有关(&lt;span&gt;注：在ASP.NET中无论是WebForm还是MVC，都可以在页面上编写代码，而这些代码肯定是不能被浏览器理解的，需要经过编译才能够正常工作&lt;/span&gt;)。&lt;/p&gt;
&lt;p&gt;　　ASP.NET中的ViewEngine被一个名为ViewEngines的集合进行管理，如下图：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/640251/201803/640251-20180329154347598-900293092.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　MVC中主要使用的是RazorViewEngine，下图是RazorViewEngine的部分代码：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/640251/201803/640251-20180329154606667-73048216.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　从代码中可以看到两个重要信息，第一是&lt;strong&gt;&lt;span&gt;“_ViewStart”被硬编码为启动页面&lt;/span&gt;&lt;/strong&gt;，这也是为什么在该页面指定布局的原因，另外&lt;strong&gt;&lt;span&gt;在其构造方法中硬编码了各种LocationFormats，它们指定了相应类型页面的搜索路径&lt;/span&gt;&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;　　那么上面提到的Razor又是什么呢?&lt;strong&gt;Razor是ASP.NET的一种可以将服务器代码嵌入到网页中的标记语言，它由Razor标记、服务器代码(C#/VB)以及Html代码组成&lt;/strong&gt;。在Html中以@符号开始的内容将会被识别为服务器代码，而Razor将识别这些代码将其渲染为Html代码。更多关于Razor的内容可参考：&lt;a href=&quot;https://docs.microsoft.com/en-us/aspnet/core/mvc/views/razor&quot; target=&quot;_blank&quot;&gt;https://docs.microsoft.com/en-us/aspnet/core/mvc/views/razor&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;ViewEngineResult&lt;/h3&gt;
&lt;p&gt;　　ViewEngineResult是ViewEngine对View查找后结果的封装，其定义如下：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/640251/201803/640251-20180329162157495-40366445.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　它包含了查找后的结果IView类型以及用于查找的ViewEngine本身，另外还有一个字符串列表用来保存查找该View所遍历过的路径。&lt;br/&gt;　　下面是RazorViewEngine用来查找和创建RazorView对象的主要代码，其核心实际就是根据action名称和Controller名称与相应的LocationFormats匹配后查找文件是否存在，如果存在则创建IView实例的过程：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/640251/201803/640251-20180329162347734-1804871852.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　而这里的IView类型就是RazorView：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/640251/201803/640251-20180329162424571-198475675.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;View的编译与激活&lt;/h2&gt;
&lt;p&gt;　　上面介绍了ViewEngine用来查找并获取相应IView对象，那IView是用来做什么的呢？下图是IView的接口定义，它只有一个Render方法，用来将指定的View上下文信息通过指定的TextWriter进行渲染，这实际上就是将View文件的内容处理后，写到Http响应数据的过程：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/640251/201803/640251-20180329162459105-1329576207.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　ASP.NET中实现IView的类结构如下：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/640251/201803/640251-20180329162518393-750741143.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　同样的有两种View分别对象Razor和WebForm，而它们的基类都是BuildManagerCompiledView(被BuildManager编译后的View)，而且Render方法也是在基类中实现的，具体代码如下：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/640251/201803/640251-20180329162615936-305197795.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　RenderView方法实现在对应的子类中，下图为RazorView的RenderView方法：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/640251/201803/640251-20180329162642286-1410008542.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　上面代码的核心在于：&lt;br/&gt;　　1. 通过BuildManager根据View文件的路径对View文件进行编译，并获得编译后的类型(注：BuildManager是ASP.NET中用于对程序集、页面进行编译的工具)。&lt;br/&gt;　　2. 通过激活器创建View编译后的类型，下图是默认使用的激活器，其核心是通过依赖解析器或者Activator来直接创建类型实例。&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/640251/201803/640251-20180329162729073-1401415832.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　3. 实例化后的对象是一个WebViewPage类型，通过对WebViewPage初始化后(包含起始页的查找)调用WebViewPage的ExecutePageHierarchy方法完成渲染。&lt;/p&gt;
&lt;p&gt;　　注：WebViewPage是Razor对应的页面类型，WebForm对应的是ViewPage和ViewUserControl。&lt;/p&gt;
&lt;h2&gt;View的渲染&lt;/h2&gt;
&lt;p&gt;　　上面提到View文件编译后是一个WebViewPage对象，而View的渲染也是由该对象完成的，那么WebViewPage是什么？下图是WebViewPage的定义：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/640251/201803/640251-20180329162825558-1549464309.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　从中可以看到一些重要的属性如Html、Ajax、Url等这些可以在View里面使用的，有用来生成Html、Url、Ajax的帮助类型，也有如携带了数据用于绑定到View上的Model、TempData、ViewBag、ViewData等类型。&lt;br/&gt;　　另外WebViewPage继承至WebPageBase：&lt;/p&gt;
&lt;p&gt; 　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/640251/201803/640251-20180329162914804-635161436.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　WebPageBase类型里面定义了RenderBody、RenderSection等方法。&lt;br/&gt;　　了解了WebPage与WebPageBase之后有没有感觉&lt;span&gt;View文件实际上是WebPage的一个子类型&lt;/span&gt;，在&lt;span&gt;View中可以随意使用和调用WebPage和WebPageBase中的属性和方法&lt;/span&gt;。&lt;br/&gt;　　下图是对Contact.cshtml文件编译后的代码：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/640251/201803/640251-20180329162943503-747374091.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　从代码中证明了之前的猜想，View文件编译后确实是WebViewPage的子类型，而该类型中的Execute方法是将Html代码以字符串的形式进行了拼接，拼接过程中如果遇到特殊方法的调用则拼接特殊方法的返回值：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/640251/201803/640251-20180329163009358-804784937.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/640251/201803/640251-20180329163018718-478049176.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　以上代码来自布局文件的编译结果。&lt;br/&gt;　　而Execute方法也就是最终ASP.NET MVC进行View渲染的实际方法。WebViewPage的ExecutePageHierarchy是因为MVC中页面可能依赖多个View，如默认情况下页面有StartPage中指定的布局View和内容View，为了&lt;strong&gt;&lt;span&gt;保证渲染内容顺序不变&lt;/span&gt;&lt;/strong&gt;ExecutePageHierarchy方法中引入了栈机制(后进先出)。&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/640251/201803/640251-20180329163050981-1782850911.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;span&gt;注：BuildManager编译的View结果默认路径为&quot;%WinDir\Microsoft.NET\Framework\ {Version No}\Temporary ASPNET Files&quot;目录下，以App_Web_开头的程序集中，程序集的名称是根据路径随机生成的。&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;使用示例代码演示View的渲染过程&lt;/h2&gt;
&lt;p&gt;　　下面就用代码的方式来演示View的查找、编译、激活以及渲染的全过程：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/640251/201803/640251-20180329163259532-1652515296.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　全量代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('940125bc-ccf8-4f0c-b6b5-7d6067c8b9a7')&quot; readability=&quot;43.5&quot;&gt;&lt;img id=&quot;code_img_closed_940125bc-ccf8-4f0c-b6b5-7d6067c8b9a7&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_940125bc-ccf8-4f0c-b6b5-7d6067c8b9a7&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('940125bc-ccf8-4f0c-b6b5-7d6067c8b9a7',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_940125bc-ccf8-4f0c-b6b5-7d6067c8b9a7&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;82&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Collections.Generic;
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.IO;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Linq;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Web;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Web.Compilation;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Web.Mvc;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Web.WebPages;
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; 
&lt;span&gt;10&lt;/span&gt; &lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; My_Blog.Controllers
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; ViewRenderController : Controller
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; GET: ViewRender&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; Index()
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;             &lt;span&gt;var&lt;/span&gt; path = &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;             &lt;span&gt;var&lt;/span&gt; viewEngineResult = &lt;span&gt;this&lt;/span&gt;.FindView(&lt;span&gt;out&lt;/span&gt; path);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;查找View&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt;             Render(viewEngineResult, path);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;渲染View&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; 
&lt;span&gt;22&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;View的查找，相当于RazorViewEngine&lt;/span&gt;
&lt;span&gt;23&lt;/span&gt;         &lt;span&gt;private&lt;/span&gt; ViewEngineResult FindView(&lt;span&gt;out&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;&lt;span&gt; path)
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;             &lt;span&gt;var&lt;/span&gt; actionName = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Contact&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;             &lt;span&gt;var&lt;/span&gt; controllerName = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Home&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;             &lt;span&gt;var&lt;/span&gt; viewLocationFormat = &lt;span&gt;@&quot;&lt;/span&gt;&lt;span&gt;~/Views/{1}/{0}.cshtml&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;根据Controller和Action名称与地址模板组成View相对路径&lt;/span&gt;
&lt;span&gt;29&lt;/span&gt;             path = &lt;span&gt;string&lt;/span&gt;&lt;span&gt;.Format(viewLocationFormat, actionName, controllerName);
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;根据文件路径创建RazorView和ViewEngineResult&lt;/span&gt;
&lt;span&gt;31&lt;/span&gt;             &lt;span&gt;var&lt;/span&gt; view = &lt;span&gt;new&lt;/span&gt; RazorView(&lt;span&gt;this&lt;/span&gt;.ControllerContext, path, &lt;span&gt;&quot;&quot;&lt;/span&gt;, &lt;span&gt;true&lt;/span&gt;, &lt;span&gt;null&lt;/span&gt;, &lt;span&gt;null&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; ViewEngineResult(view, &lt;span&gt;new&lt;/span&gt;&lt;span&gt; RazorViewEngine());
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; 
&lt;span&gt;35&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;View的渲染&lt;/span&gt;
&lt;span&gt;36&lt;/span&gt;         &lt;span&gt;private&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; Render(ViewEngineResult viewEngineResult,&lt;span&gt;string&lt;/span&gt;&lt;span&gt; path)
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt;             Type pageType = BuildManager.GetCompiledType(path);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;根据对View文件进行编译&lt;/span&gt;
&lt;span&gt;39&lt;/span&gt;             &lt;span&gt;var&lt;/span&gt; pageInstance = Activator.CreateInstance(pageType);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;创建View文件编译后类型实例&lt;/span&gt;
&lt;span&gt;40&lt;/span&gt;             &lt;span&gt;var&lt;/span&gt; webViewPage = &lt;span&gt;this&lt;/span&gt;.InitViewPage(pageInstance, viewEngineResult, path);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;对实例中相关属性进行初始化&lt;/span&gt;
&lt;span&gt;41&lt;/span&gt;             webViewPage.ExecutePageHierarchy(&lt;span&gt;//&lt;/span&gt;&lt;span&gt;完成View的渲染&lt;/span&gt;
&lt;span&gt;42&lt;/span&gt;                 &lt;span&gt;new&lt;/span&gt; WebPageContext(&lt;span&gt;this&lt;/span&gt;.HttpContext, &lt;span&gt;null&lt;/span&gt;, &lt;span&gt;null&lt;/span&gt;&lt;span&gt;),
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt;                 &lt;span&gt;this&lt;/span&gt;.HttpContext.Response.Output, &lt;span&gt;null&lt;/span&gt;);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;startpage设置为null，将不会渲染布局页面&lt;/span&gt;
&lt;span&gt;44&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt; 
&lt;span&gt;46&lt;/span&gt;         &lt;span&gt;private&lt;/span&gt; WebViewPage InitViewPage(&lt;span&gt;object&lt;/span&gt; instance, ViewEngineResult viewEngineResult, &lt;span&gt;string&lt;/span&gt;&lt;span&gt; path)
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt;             WebViewPage webViewPage = instance &lt;span&gt;as&lt;/span&gt;&lt;span&gt; WebViewPage;
&lt;/span&gt;&lt;span&gt;49&lt;/span&gt; 
&lt;span&gt;50&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (webViewPage == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;51&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;52&lt;/span&gt;                 &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; InvalidOperationException(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;无效&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;53&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;54&lt;/span&gt;             ViewContext viewContext = &lt;span&gt;new&lt;/span&gt; ViewContext(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.ControllerContext,
&lt;/span&gt;&lt;span&gt;55&lt;/span&gt; &lt;span&gt;                viewEngineResult.View, 
&lt;/span&gt;&lt;span&gt;56&lt;/span&gt;                 &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.ViewData, 
&lt;/span&gt;&lt;span&gt;57&lt;/span&gt;                 &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.TempData, 
&lt;/span&gt;&lt;span&gt;58&lt;/span&gt;                 &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.HttpContext.Response.Output);
&lt;/span&gt;&lt;span&gt;59&lt;/span&gt;             webViewPage.VirtualPath =&lt;span&gt; path;
&lt;/span&gt;&lt;span&gt;60&lt;/span&gt; 
&lt;span&gt;61&lt;/span&gt;             webViewPage.ViewContext =&lt;span&gt; viewContext;
&lt;/span&gt;&lt;span&gt;62&lt;/span&gt;             webViewPage.ViewData =&lt;span&gt; viewContext.ViewData;
&lt;/span&gt;&lt;span&gt;63&lt;/span&gt; &lt;span&gt;            webViewPage.InitHelpers();
&lt;/span&gt;&lt;span&gt;64&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt; webViewPage;
&lt;/span&gt;&lt;span&gt;65&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;66&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;67&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;　　上面的代码要点如下：&lt;br/&gt;　　● FindView方法实际上代表的就是RazorViewEngine，它根据硬编码的View文件搜索模板结合Controller和Action的名称获得View文件的全路径，并创建RazorView和ViewEngineResult对象。&lt;br/&gt;　　● Render则代表了View的编译、激活以及渲染过程。&lt;/p&gt;
&lt;p&gt; 　　运行结果(由于没有布局页面，所以相关的样式和JS都没有被引入)：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/640251/201803/640251-20180329163648919-1074870631.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;View的Html Helper与ModelMetadata&lt;/h2&gt;
&lt;p&gt;　　在ASP.NET MVC的View中可以通过一些Helper类型来生成HTML代码，下图为用户注册页面的View代码：&lt;/p&gt;
&lt;p&gt; 　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/640251/201803/640251-20180329164047126-1512334777.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　从代码中可以看到ASP.NET MVC并不是完全使用Html来构成页面的，中间有一些通过Html属性（注：Html是WebViewPage类型中的HtmlHelper类型的实例）调用的方法，从方法的名称来看这些方法分别用于生成如数据验证信息、Label标签、文本框以及密码类型文本框等HTML代码。&lt;br/&gt;　　ASP.NET MVC提供了一系列的Helper类及其拓展方法，这些Helper类中封装了针对HTML、Ajax（ASP.NET MVC中Ajax Helper的用法可参考：&lt;a href=&quot;https://www.c-sharpcorner.com/article/Asp-Net-mvc-ajax-helper/&quot; target=&quot;_blank&quot;&gt;https://www.c-sharpcorner.com/article/Asp-Net-mvc-ajax-helper/&lt;/a&gt;）等相关内容的实现，ASP.NET MVC对Html拓展可以分为以下四类：&lt;br/&gt;　　1. 用于生成特定标签的拓展，如Form、Input、Label、TextArea、Select等拓展。&lt;br/&gt;　　使用方式如下：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/640251/201803/640251-20180329164217611-479125341.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　将常用的HTML标签进行封装，对于不熟悉Html的开发人员来说ASP.NET MVC提供了一种面向对象编程的方式来对页面进行开发，更重要的是Html方法可以与模型关联，当模型的元数据中有相应的验证特性并且开启了客户端验证时，在渲染标签时会包含相应的验证信息，使用&lt;span&gt;这类标签最大的好处就是可以将关注点全部放在模型上，当模型发生变化时View上不需要做任何的修改&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;　　2. 用于生成Model验证信息的拓展。&lt;br/&gt;　　使用方式如下：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/640251/201803/640251-20180329164705782-1961879341.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　ASP.NET MVC中提供了模型验证的机制，当模型验证失败时会有相应的失败信息，而该拓展就是对这些错误信息进行渲染，大大的减少了输出验证信息的工作量。&lt;/p&gt;
&lt;p&gt;　　3. 根据用途“展示/编辑”生成标签的Display以及Editor拓展。&lt;br/&gt;　　使用方式如下(注：DisplayFor是用于显示指定模型属性中的值，如果要显示对应模型属性的名称可用DisplayNameFor)：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/640251/201803/640251-20180329165038383-1602549393.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　Display与Editor是根据模型的数据类型来判断如何对模型进行展示。ASP.NET MVC中为Display和Editor提供了一些基础类型的默认模板实现分别通过内部静态类型DefaultEditorTemplates和DefaultDisplayTemplates进行存储，下面是bool类型模板代码：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/640251/201803/640251-20180329165059105-57322413.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/640251/201803/640251-20180329165108573-395269398.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　在提供默认模板的同时ASP.NET MVC也提供了自定义模板的机制，可以分别使用DisplayAttribute与UIHintAttribute对特定属性指定渲染模板，如何自定义Display和Editor模板可参考：&lt;a href=&quot;http://www.growingwiththeweb.com/2012/12/aspnet-mvc-display-and-editor-templates.html&quot; target=&quot;_blank&quot;&gt;http://www.growingwiththeweb.com/2012/12/aspnet-mvc-display-and-editor-templates.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;　　4. Partial拓展。&lt;br/&gt;　　使用方法(注：第一个参数是Partial View的名称，默认情况下Partial View文件存储于Views/Shared目录下，如果文件不在这个目录下需要在参数中体现具体目录)：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/640251/201803/640251-20180329165150250-1039824775.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　Partial是ASP.NET MVC中用于将可重用Html进行分离的机制，并且Partial是可以访问数据的，就是说通过parital分离的Html代码，可以根据传入的数据来动态生成Html代码，更多关于Partial View的内容可参考.Net Core的文档：&lt;a href=&quot;https://docs.microsoft.com/en-us/aspnet/core/mvc/views/partial&quot; target=&quot;_blank&quot;&gt;https://docs.microsoft.com/en-us/aspnet/core/mvc/views/partial&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;　　5. Child Action拓展。&lt;br/&gt;　　使用方法：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/640251/201803/640251-20180329165218407-643369753.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　Child Action类似于Partial View，它也是将可重用的部分进行分离，但Partial View更侧重于关注Html代码重用，Child Action还包含了后端逻辑的重用。如购物网站的购物车，它可能出现在任意的页面中，但首页的逻辑、模型与购物车就可能没有任何关系，此时就可以使用Child Action。&lt;/p&gt;
&lt;h2&gt;常用的ActionResult&lt;/h2&gt;
&lt;p&gt;　　前面提到过ASP.NET MVC的页面渲染工作实际上是由一个继承至ActionResult的ViewResult对象完成的，ActionResult实际上是ASP.NET MVC中的一个抽象，代表了所有逻辑执行后的结果，而ViewResult是将结果面向人的，所以返回了Html让浏览器显示给人看，除了ViewResult之外还有一些常用的ActionResult如下：&lt;br/&gt;　　● ContentResult：用于将字符串返回到客户端，在Action方法中调用Content方法返回。&lt;br/&gt;　　● FileStreamResult：用于将文件返回到客户端，在Action方法中调用File方法(有多个重载)返回。&lt;br/&gt;　　● HttpNotFoundResult：用于返回HTTP未找到状态，在Action方法中调用HttpNotFound方法返回。&lt;br/&gt;　　● JavaScriptResult：用于将JavaScript返回到客户端并执行，在Action方法中调用JavaScript方法返回。&lt;br/&gt;　　● JsonResult：用于将Json数据返回到客户端，在Action方法中调用Json方法返回。&lt;br/&gt;　　● PartialViewResult：用于渲染partial页面，在Action方法中调用PartialView方法返回。&lt;br/&gt;　　● RedirectResult：用于重定向，在Action方法中调用Redirect方法传入需要重定向的Url进行重定向操作。&lt;br/&gt;　　● RedirectToRouteResult：用于路由重定向，在Action方法中调用RedirectToAction方法重定向到指定的Action。&lt;br/&gt;　　● EmptyResult：返回空，在Action方法中返回Null或将Action方法的返回值设为Void即可。&lt;/p&gt;
&lt;h2&gt;小结&lt;/h2&gt;
&lt;p&gt;　　本文介绍了ASP.NET MVC如何在Action方法执行时通过对ActionResult(ViewResult)的执行完成View文件的查找、编译以及渲染的过程，除了ViewResult之外ASP.NET MVC还提供了其它类型的ActionResult如Json、File等，使用这些结果可以创建简单的Web API以及文件下载等功能，另外MVC通过Html Helper类型对View进行了拓展，在开发View时可以最大程度的对View的Html代码和逻辑进行重用，同时也将View与Model(特指ViewModel)进行关联，在开发时可以将关注点放在Model上，无需担心Model修改后View代码的修改。合理的使用View提供的相关机制，可以极大的减少工作量同时也可以让代码变得更加简洁。&lt;/p&gt;
&lt;p&gt;参考：&lt;br/&gt;　　&lt;a href=&quot;https://zhuanlan.zhihu.com/p/29418126&quot; target=&quot;_blank&quot;&gt;https://zhuanlan.zhihu.com/p/29418126&lt;/a&gt;&lt;br/&gt;　　&lt;a href=&quot;https://www.codeproject.com/Articles/787320/An-Absolute-Beginners-Tutorial-on-HTML-Helpers-and&quot; target=&quot;_blank&quot;&gt;https://www.codeproject.com/Articles/787320/An-Absolute-Beginners-Tutorial-on-HTML-Helpers-and&lt;/a&gt;&lt;br/&gt;　　&lt;a href=&quot;https://www.c-sharpcorner.com/article/Asp-Net-mvc-ajax-helper/&quot; target=&quot;_blank&quot;&gt;https://www.c-sharpcorner.com/article/Asp-Net-mvc-ajax-helper/&lt;/a&gt;&lt;br/&gt;　　&lt;a href=&quot;http://www.growingwiththeweb.com/2012/12/aspnet-mvc-display-and-editor-templates.html&quot; target=&quot;_blank&quot;&gt;http://www.growingwiththeweb.com/2012/12/aspnet-mvc-display-and-editor-templates.html&lt;/a&gt;&lt;br/&gt;　　&lt;a href=&quot;https://stackoverflow.com/questions/5037580/asp-net-mvc-3-partial-vs-display-template-vs-editor-template&quot; target=&quot;_blank&quot;&gt;https://stackoverflow.com/questions/5037580/asp-net-mvc-3-partial-vs-display-template-vs-editor-template&lt;/a&gt;&lt;br/&gt;　　&lt;a href=&quot;https://weblogs.asp.net/scottgu/introducing-razor&quot; target=&quot;_blank&quot;&gt;https://weblogs.asp.net/scottgu/introducing-razor&lt;/a&gt;&lt;br/&gt;　　&lt;a href=&quot;https://docs.microsoft.com/en-us/aspnet/core/mvc/views/razor&quot; target=&quot;_blank&quot;&gt;https://docs.microsoft.com/en-us/aspnet/core/mvc/views/razor&lt;/a&gt;&lt;/p&gt;
&lt;p&gt; 本文链接：&lt;a id=&quot;Editor_Edit_hlEntryLink&quot; title=&quot;view: ASP.NET没有魔法——ASP.NET MVC View渲染及Razor&quot; href=&quot;http://www.cnblogs.com/selimsong/p/8670744.html&quot; target=&quot;_blank&quot;&gt;http://www.cnblogs.com/selimsong/p/8670744.html&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;&lt;a id=&quot;post_title_link_7641799&quot; href=&quot;http://www.cnblogs.com/selimsong/p/7641799.html&quot;&gt;ASP.NET没有魔法——目录&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Thu, 29 Mar 2018 15:10:00 +0000</pubDate>
<dc:creator>7m鱼</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/selimsong/p/8670744.html</dc:identifier>
</item>
<item>
<title>走进webpack（2）--第三方框架（类库）的引入及抽离 - Zaking</title>
<link>http://www.cnblogs.com/zaking/p/8656625.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/zaking/p/8656625.html</guid>
<description>&lt;p&gt;　　正文之前，由于这是一个系列的文章，可能第一次看到的看官老爷们会觉得突兀，如果你是webpack新手，我建议你先从前几篇文章看起，如果你对webpack有一些了解，也希望可以在&lt;a href=&quot;https://github.com/ZakingQ/structure-demo/tree/master/webpackSeniorDemo&quot; target=&quot;_blank&quot;&gt;github&lt;/a&gt;上下载代码，对照着看会更有效果&lt;/p&gt;
&lt;p&gt;　　在当代的前端开发中，很少会用原生JS来开发页面，最基本的都会使用jQuery来节省我们开发的时间和效率，而angular，vue，react的出现更是为前端开发者带来了福音。那么这篇文章就说说如何用webpack来打包引入第三方框架（类库）。如果单纯的引入jQuery或者其他第三方类库，在打包的时候webpack会把它一起打包进我们的main.js，也就说，如果我们引入两三个框架，两三个UI库，那么我们的集成包会很大，页面的加载时间也会很长，这是我们不愿见到的结果。所以在学会引入的同时，还要知道如何把第三方类库从我们的业务逻辑包中抽离出来。&lt;/p&gt;
&lt;p&gt;　　那么我们先来安装一下jQuery，因为在生产环境我们仍旧是需要jQuery作为依赖的，所以我们需要用npm install jquery --save来安装它。安装完成之后，我们在main.js中增加两行代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;引入jQuery&lt;/span&gt;
import $ from 'jquery'&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;编写jQuery代码&lt;/span&gt;
$('#jqueryDiv').html('Hello Zaking,jQuery is useful');
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　我们还需要在index.html中增加一个div容器：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; jQuery代码容器 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;jqueryDiv&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　然后，我们npm run dev看一下，会发现页面中已经有jQuery代码所生成的文字，说明我们引入jQuery成功了。你可以在每一个需要jQuery的页面这样引入。但是这样会很麻烦，我们如果通过这样的方式引入了jQuery，但是整个项目中却并没有写一行jQuery代码，那么webpack也是会把它打包进去的。而且每一个需要jQuery的页面都需要引入的话好麻烦，那么我们可以使用ProvidePlugin来实现一次引入全局使用，而且通过插件的方式来引入第三方类库，如果你不使用它的话，webpack就不会打包它，还不错吧。由于ProvidePlugin是webpack自带的插件，我们不需要引入他，但是需要引入一下webpack：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;引入webpack&lt;/span&gt;
const webpack = require('webpack');
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　我们还需要在入口文件引入jQuery，还记得前面模块化的时候把入口文件单独拆分成了一个entry.js，所以我们在其中增加一点代码，现在看起来应该是这样的：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
entry.path=&lt;span&gt;{
    main:&lt;/span&gt;'./src/main.js'&lt;span&gt;,
    jquery:&lt;/span&gt;'jquery'&lt;span&gt;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　然后我们在plugins项下配置一下这个插件，就像这样：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
 &lt;span&gt;//&lt;/span&gt;&lt;span&gt;创建一个webpack下的ProvidePlugin插件的实例，使全局都可以使用jQuery&lt;/span&gt;
&lt;span&gt;new&lt;/span&gt;&lt;span&gt; webpack.ProvidePlugin({
   $:&lt;/span&gt;&quot;jquery&quot;&lt;span&gt;
})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　这样就可以了，但是别忘了把main.js中通过import引入的jQuery代码删除，然后再npm run dev试一下。会发现也同样出现了jQuery生成的文字。&lt;/p&gt;
&lt;p&gt;　　那么下面我们就学习一下，如何抽离第三方类库，使其存储在一个单独的文件夹下，在webpack3时代，通常是使用CommonsChunkPlugin，CommonsChunkPlugin也是webpack自带的插件。官方文档是这样解释他的：&lt;strong&gt;&lt;code&gt;CommonsChunkPlugin&lt;/code&gt; 插件，是一个可选的用于建立一个独立文件(又称作 chunk)的功能，这个文件包括多个入口&lt;code&gt;chunk&lt;/code&gt; 的公共模块。通过将公共模块拆出来，最终合成的文件能够在最开始的时候加载一次，便存到缓存中供后续使用。这个带来速度上的提升，因为浏览器会迅速将公共的代码从缓存中取出来，而不是每次访问一个新页面时，再去加载一个更大的文件。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　简单来说，就是将公共模块拆分出来以便使浏览器加载速度更快。但是在webpack4时代，已经取消了这个插件取而代之的是&lt;/strong&gt;splitChunks 和runtimeChunk ，那么我们就来看一下，在webpack4的环境下，如何抽离多个第三方类库。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　&lt;/strong&gt;我们先来安装一下vue，跟jQuery的安装方式一样，就不多说了，同样的我们也需要在入口文件处引入vue：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
entry.path=&lt;span&gt;{
    main:&lt;/span&gt;'./src/main.js'&lt;span&gt;,
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;引入jQuery和vue&lt;/span&gt;
    jquery:'jquery'&lt;span&gt;,
    vue:&lt;/span&gt;&quot;vue&quot;&lt;span&gt;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　然后再ProvidePlugin中加入vue这个选项：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;new&lt;/span&gt;&lt;span&gt; webpack.ProvidePlugin({
        $:&lt;/span&gt;&quot;jquery&quot;&lt;span&gt;,
        vue:&lt;/span&gt;&quot;vue&quot;&lt;span&gt;
    })&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　然后我们在plugins中增加一个配置：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;new&lt;/span&gt;&lt;span&gt; webpack.optimize.SplitChunksPlugin({
      chunks: &lt;/span&gt;&quot;all&quot;&lt;span&gt;,
      minSize: &lt;/span&gt;20000&lt;span&gt;,
      minChunks: &lt;/span&gt;1&lt;span&gt;,
      maxAsyncRequests: &lt;/span&gt;5&lt;span&gt;,
      maxInitialRequests: &lt;/span&gt;3&lt;span&gt;,
      name: &lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;
  })&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　然后我们npm run build一下，会发现在dist的根目录下已经生成了vue.js和jQuery.js。说明我们打包成功了。那么我们想要测试一下，vue究竟能用了么？&lt;/p&gt;
&lt;p&gt;　　我们在main.js中引入vue，并且加上vue官网例子中最简单的一个：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
import Vue from 'vue'
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;vue代码&lt;/span&gt;
&lt;span&gt;var&lt;/span&gt; app = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Vue({
  el: &lt;/span&gt;'#vueApp'&lt;span&gt;,
  data: {
    message: &lt;/span&gt;'Hello Vue!'&lt;span&gt;
  }
})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　然后，我们在index.html创建一个div容器：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; vue容器 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;vueApp&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
  {{message}}
&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　然后我们试一下npm run dev，页面打开之后我们发现没有hello vue，f12看下控制台，发现报错了。不出意外的话，你的报错信息是这样的：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1184971/201803/1184971-20180328234308087-1099576013.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　什么意思呢，官方解释是：运行时构建不包含模板编译器，因此不支持 template 选项，只能用 render 选项，但即使使用运行时构建，在单文件组件中也依然可以写模板，因为单文件组件的模板会在构建时预编译为 render 函数。就是说，&lt;strong&gt;如果我们想使用template，我们不能直接在客户端使用npm install之后的vue&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;　　那么我们需要新增一点配置：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;resolve: {
   alias: {
     &lt;/span&gt;'vue$': 'vue/dist/vue.esm.js'&lt;span&gt;
  }
}
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;resolve是在最外层的，与plugins等同级&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　这样就可以了，然后运行一下，会发现Hello Vue已经出现在我们的页面之中了。这两天一直加班，所以更新的有点慢，这个系列的文章还有最后一篇，尽量在这两天就可以完成。&lt;/p&gt;
</description>
<pubDate>Thu, 29 Mar 2018 14:33:00 +0000</pubDate>
<dc:creator>Zaking</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/zaking/p/8656625.html</dc:identifier>
</item>
</channel>
</rss>