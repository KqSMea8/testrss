<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>hotspot虚拟机的调试 - 阿宝天天见</title>
<link>http://www.cnblogs.com/abaoge/p/7958191.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/abaoge/p/7958191.html</guid>
<description>
&lt;p&gt;3这篇文章，怎么说呢。是踩了很多坑得出来了，也是在自己快要崩溃的时候得出来了的。&lt;/p&gt;
&lt;p&gt;连续踩了差不多10来个小时的坑，还好是出来了。&lt;/p&gt;
&lt;p&gt;这篇文章是调试虚拟机的，其实网上也能找到一些文章，但是每个人的环境不一样，可能有的很顺利，有的就不一样了&lt;/p&gt;
&lt;p&gt;但是踩了坑比较多，你才会横向发现有些别人其实是没讲到位的，也就是一笔带过的。&lt;/p&gt;

&lt;p&gt;上一篇文章我写了关于编译openjdk的文章，这篇实际上是接着上一篇来的。&lt;/p&gt;
&lt;p&gt;openjdk编译后会成为一个可用的jdk，jdk中就包含了虚拟机。&lt;/p&gt;
&lt;p&gt;虚拟机，众所周知，是一个让class文件运行的平台，那么这次调试，你可以先理解为当class文件运行，我们将断点停留在虚拟机。&lt;/p&gt;
&lt;p&gt;有了这个初步的感性认识你可能好理解得多了。&lt;/p&gt;
&lt;p&gt;来，我们一步步顺着好理解的逻辑来解决这个问题。&lt;/p&gt;

&lt;p&gt;1既然是要调试虚拟机，那我们最好是不是要一个ide来调试呢，由于虚拟机是c编写的，所以我们下载一个netBeans Ide。&lt;/p&gt;
&lt;p&gt;  这里要提示两点，第一点，下载ide的时候要下载c++版本的。第二点ide最好下载7.0.1版本的，因为有些版本无法跳入到断点，这算一个坑&lt;/p&gt;
&lt;p&gt;  你弄了半天都不知道为什么。当然如果你是大神，你可以直接使用gdb来调试。&lt;/p&gt;
&lt;p&gt;2在netBeans中新建基于源码c/c++项目。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1244747/201712/1244747-20171203010113851-1888835514.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;3找到你openjdk下关于hotspot的源码文件夹，并填好，以及选择定制&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1244747/201712/1244747-20171203010243319-150819136.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;4写上hotspotmake目录下makefile的路径&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1244747/201712/1244747-20171203010454226-12923813.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;5下一步要填写一些生成命令，我的是如下：&lt;/p&gt;
&lt;p&gt;${MAKE} -f Makefile clean jvmg ALT_BOOTDIR=/usr/java/jdk1.6.0_32 ARCH_DATA_MODEL=64 LANG=C   &lt;/p&gt;
&lt;p&gt;中间的alt_bootdir实际上我上篇文章编译openjdk的那个oracle jdk1.6。至于为什么要用这个版本大家可以去查一下，&lt;/p&gt;
&lt;p&gt;其实还有另一点。你电脑上如果jdk是1.8的，你的netBeanIde运行不起来，所以低版本就好，我的是1.6.0_32。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1244747/201712/1244747-20171203011343069-293578182.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;6一直点下一步，在ide中会出现hotspot项目。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1244747/201712/1244747-20171203011530772-266979111.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;7右键点击项目，选择属性，再点运行，又出来三个需要配置的地方。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1244747/201712/1244747-20171203011831522-347832003.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; 运行命令的意思是，用什么去运行什么，第一个什么就是gamma，这个gamma就是虚拟机程序，第二个什么就是指的你要在虚拟机上运行的class文件。当然class文件的运行&lt;/p&gt;
&lt;p&gt;实际上是为了调试虚拟机，这点要清楚，你class都没有运行，怎么调试你的虚拟机呢。我的命令如下：&lt;/p&gt;
&lt;p&gt;/usr/openjdk/hotspot/build/linux/linux_amd64_compiler2/jvmg/gamma -XX:StopInterpreterAt=1 -version /usr/openjdk/hotspot/build/linux/linux_amd64_compiler2/jvmg/Queens&lt;/p&gt;
&lt;p&gt;注意中间的空格，gamma是hotspot源代码编译后生成的，要生成后才有，但是你要找到你gamma的路径，后面的两个是gamma的参数，最后的一个长路径是你要&lt;/p&gt;
&lt;p&gt;运行的class文件地址。你大可写成绝对路径，就不用在后续的classpath地址上加这个长路径了。&lt;/p&gt;

&lt;p&gt;运行目录我填的是/usr/openjdk/hotspot/build/linux/linux_amd64_compiler2/jvmg。&lt;/p&gt;

&lt;p&gt;环境变量如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1244747/201712/1244747-20171203012439991-1721927377.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; JAVA_HOME  ：/usr/java/jdk1.6.0_32&lt;/p&gt;
&lt;p&gt;CLASSPATH：.:${JAVA_HOME}/lib/dt.jar:${JAVA_HOME}/lib/tools.jar&lt;/p&gt;
&lt;p&gt;LD_LIBRARY_PATH： /usr/openjdk/hotspot/build/linux/linux_amd64_compiler2/jvmg&lt;/p&gt;
&lt;p&gt;我的是这样的，你们可能需要对照的改一下。&lt;/p&gt;
&lt;p&gt; 最后保存上面的更改。&lt;/p&gt;

&lt;p&gt;8在下图的文件层次结构下找到java.c这个就是虚拟机的入口了，你可以先打上断点。然后右击项目选择调试&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1244747/201712/1244747-20171203013012507-1826421773.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;9点了调试后会是漫长的等待，知道有一刻你发现断点在main函数中停留了，那就说明是成功了，最后运行完毕后，可以看到控制台的结果如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1244747/201712/1244747-20171203013256897-193176511.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;那就说明能调试成功了。&lt;/p&gt;

&lt;p&gt;10现在你就可以将你的程序替换上面的Queens类文件了，当你的程序运行的时候你就可以进一步窥探虚拟机怎么运行的了。&lt;/p&gt;

&lt;p&gt;谢谢各位，如果看完了，希望能关注一波，写这个东西很费时间的，文章不是重点，交个朋友才是重中之重！&lt;/p&gt;

</description>
<pubDate>Sat, 02 Dec 2017 17:37:00 +0000</pubDate>
<dc:creator>阿宝天天见</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/abaoge/p/7958191.html</dc:identifier>
</item>
<item>
<title>webpack之深入浅出externals - 前端小豪</title>
<link>http://www.cnblogs.com/ssh-007/p/7957369.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/ssh-007/p/7957369.html</guid>
<description>&lt;p&gt;我们通常在做项目时可能会把第三方库打包到bundle中，比如下面这张图&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/728583/201712/728583-20171202234933804-1300620049.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;如果不想把第三方库打包到bundle中，这就有了externals。官方的使用externals比较简单，只需三步——&lt;/p&gt;
&lt;p&gt;1.在HTML中引入第三方库的cdn&lt;/p&gt;
&lt;p&gt;2.在webpack中配置externals&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;externals: {
    jquery: &lt;/span&gt;&quot;jQuery&quot;&lt;span&gt;,
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;3.在js中引用&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
const $ = require(&quot;jquery&quot;&lt;span&gt;);
$(&lt;/span&gt;&quot;#content&quot;).html(&quot;&amp;lt;h1&amp;gt;hello world&amp;lt;/h1&amp;gt;&quot;);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;好，现在我们可以随心所欲的使用jquery插件并保证不会打包到bundle中。external是怎么办到的呢？下面我们通过bundle的源码来分析下原理。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/728583/201712/728583-20171202231454757-724236917.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这里的/* 0 */和__webpack_require__分别指打包前js对应的模块函数(详细过程见&lt;a href=&quot;http://www.cnblogs.com/ssh-007/p/7944491.html&quot; target=&quot;_blank&quot;&gt;我上一篇博客&lt;/a&gt;)，这里就不细说了。这里可以看到module.exports = jQuery，就是说我们externals中的key指的是require的东西，value指的就是它，就是说“当require的参数是jquery的时候，使用jQuery这个全局变量引用它”。这种最简洁的externals配置方式为默认的global模式，就是在window上挂一个全局变量，然后直接可以使用这个变量。具体的流程是这样，我们在源码中使用require('jquery')后，可以直接把jquery加到externals中，得到一个打包的trunk.js，但是在引入这个trunkjs之前，肯定要先引入jquery这个库文件，这个库文件会创建一个全局变量jQuery，而咱们的trunkjs中externals的jquery是global模式，所以实际上trunkjs引入jquery的时候，就会从全局变量中引用，即module.export = jQuery&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/728583/201712/728583-20171202232940413-455424388.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;当然，既然是通过这种externals方式，其实我们可以不用require引入，直接使用全局变量也是可以的。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
jQuery(&quot;#content&quot;).html(&quot;&amp;lt;h1&amp;gt;hello world&amp;lt;/h1&amp;gt;&quot;);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 大家如果注意到我刚说过的global模式的话，没错，你也许已经猜到了，我可以任意的使用不同的输出方式。如果打包文件我想运行到node环境下，我得使用commonjs规范，所以你要这么写。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;externals: {
    jquery: &lt;/span&gt;&quot;commonjs2 jQuery&quot;&lt;span&gt;,
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;打包后会是这样子。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/728583/201712/728583-20171202235603335-897752708.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;然后我的项目中还用到了lodash，也想把它从bundle中移除，之前我的代码是这样子，引的是npm包&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/728583/201712/728583-20171203000415929-1000687700.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;



&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/728583/201712/728583-20171203000337601-1347336617.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; 现在我们的externals配置如下&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;externals: {
        jquery: &lt;/span&gt;&quot;jQuery&quot;&lt;span&gt;,
        _: &lt;/span&gt;&quot;lodash&quot;&lt;span&gt;

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/728583/201712/728583-20171203001042835-532628914.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;我们必须要去掉这个const ，否则的话会报一个错误 lodash is not defined。为什么会这样呢？因为我们的lodash输出是global格式的，我在这里先卖一个关子，我们先统一一下输出格式，加一个libraryTarget字段&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/728583/201712/728583-20171203002344491-1799837649.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;这个东西是干嘛用的呢？&lt;/p&gt;
&lt;p&gt;他是我们输出文件的模块化规范，想想我们上面配置的commonjs jquery是运行在node下，总之记住一句话——我们最长使用的模块化方案是commonjs2和umd，前者是为node环境，后者是为浏览器环境。一共有这几种规范：&lt;/p&gt;
&lt;p&gt;&quot;var&quot; - Export by setting a variable: var Library = xxx (default)&lt;/p&gt;
&lt;p&gt;&quot;this&quot; - Export by setting a property of this: this[&quot;Library&quot;] = xxx&lt;br/&gt;&quot;commonjs&quot; - Export by setting a property of exports: exports[&quot;Library&quot;] = xxx&lt;br/&gt;&quot;commonjs2&quot; - Export by setting module.exports: module.exports = xxx&lt;br/&gt;&quot;amd&quot; - Export to AMD (optionally named - set the name via the library option)&lt;br/&gt;&quot;umd&quot; - Export to AMD, CommonJS2 or as property in root&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/728583/201712/728583-20171203002809897-2035818806.png&quot; alt=&quot;&quot;/&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;然后报这个错误，也就是说我们的模块没有正确的输出，回到我们的externals，它更多的是指定当你引用一个包的时候，这个包(lodash)应该遵循哪种模块化方式(common,root,amd等等)引入，这意思就是说，打包的时候不需要关心他到底怎么输出。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;externals: {
        jquery: &lt;/span&gt;&quot;jQuery&quot;&lt;span&gt;,
        lodash: {
            commonjs: &lt;/span&gt;'lodash'&lt;span&gt;,
            commonjs2: &lt;/span&gt;'lodash'&lt;span&gt;,
            amd: &lt;/span&gt;'lodash'&lt;span&gt;,
            root: &lt;/span&gt;'_'&lt;span&gt;
        }
    },&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;ok，记得要将之前的覆盖掉，替换成下面的require，因为在externals中我们规范的commmonjs规范为lodash&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/728583/201712/728583-20171203003928444-1057096341.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;也就是说，这就是我们最初的代码，即没有用过externals时候的代码，看，也就是说我们只需要配置externals和libraryTarget就可以，其他的业务逻辑代码不需要改变。包括我们的项目中还用了echarts，这个通通不用改变！！！！！&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/728583/201712/728583-20171203004119897-1437012453.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;也就是说最终的代码是externals配合libraryTarget一起使用，如果去掉umd的话，会报这个错误&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/728583/201712/728583-20171203004825647-905740364.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;相应的源码是这样子&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/728583/201712/728583-20171203005116335-948243019.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　就是说我不知道通过那种方式输出，所以我应该告诉webpack，我通过umd方式输出,即将你的 lodash 暴露为所有的模块定义下都可运行的方式。它将在 CommonJS, AMD 环境下运行，或将模块导出到 global 下的变量.加上umd的源码如下&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/728583/201712/728583-20171203005657132-1869289712.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; 看到了吧，我通过require('lodash')引入模块，输出走的是commonjs&lt;em id=&quot;__mceDel&quot;&gt;规范,贴下最终的配置&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;44&quot;&gt;
&lt;pre&gt;
&lt;span&gt;entry: {
        main: &lt;/span&gt;'./src/index.js'&lt;span&gt;
    },
    externals: {
        jquery: &lt;/span&gt;&quot;jQuery&quot;&lt;span&gt;,
        lodash: {
            commonjs: &lt;/span&gt;'lodash'&lt;span&gt;,
            commonjs2: &lt;/span&gt;'lodash'&lt;span&gt;,
            amd: &lt;/span&gt;'lodash'&lt;span&gt;,
            root: &lt;/span&gt;'_'&lt;span&gt;
        }
    },
    output: {
        filename: &lt;/span&gt;'[name].[chunkhash].js'&lt;span&gt;,
        path: path.resolve(__dirname,&lt;/span&gt;'dist'&lt;span&gt;),
        libraryTarget: &lt;/span&gt;'umd'&lt;span&gt;
    },&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

</description>
<pubDate>Sat, 02 Dec 2017 17:03:00 +0000</pubDate>
<dc:creator>前端小豪</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/ssh-007/p/7957369.html</dc:identifier>
</item>
<item>
<title>【MAVEN】maven系列--pom.xml标签详解 - 千万之路刚开始</title>
<link>http://www.cnblogs.com/hyhnet/p/7956197.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/hyhnet/p/7956197.html</guid>
<description>&lt;p&gt;pom文件作为MAVEN中重要的配置文件，对于它的配置是相当重要。文件中包含了开发者需遵循的规则、缺陷管理系统、组织、licenses、项目信息、项目依赖性等。下面将重点介绍一下该文件的基本组成与功能。&lt;/p&gt;
&lt;h3 id=&quot;标签预览&quot;&gt;标签预览&lt;/h3&gt;
&lt;pre&gt;
&lt;code&gt;&amp;lt;project&amp;gt;
    &amp;lt;modelVersion&amp;gt;4.0.0&amp;lt;/modelVersion&amp;gt;
    &amp;lt;!-- 基础设置 --&amp;gt;
    &amp;lt;groupId&amp;gt;...&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;...&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;...&amp;lt;/version&amp;gt;
    &amp;lt;packaging&amp;gt;...&amp;lt;/packaging&amp;gt;
    &amp;lt;name&amp;gt;...&amp;lt;/name&amp;gt;
    &amp;lt;url&amp;gt;...&amp;lt;/url&amp;gt;
    &amp;lt;dependencies&amp;gt;...&amp;lt;/dependencies&amp;gt;
    &amp;lt;parent&amp;gt;...&amp;lt;/parent&amp;gt;
    &amp;lt;dependencyManagement&amp;gt;...&amp;lt;/dependencyManagement&amp;gt;
    &amp;lt;modules&amp;gt;...&amp;lt;/modules&amp;gt;
    &amp;lt;properties&amp;gt;...&amp;lt;/properties&amp;gt;
    &amp;lt;!--构建设置 --&amp;gt;
    &amp;lt;build&amp;gt;...&amp;lt;/build&amp;gt;
    &amp;lt;reporting&amp;gt;...&amp;lt;/reporting&amp;gt;
    &amp;lt;!-- 更多项目信息 --&amp;gt;
    &amp;lt;name&amp;gt;...&amp;lt;/name&amp;gt;
    &amp;lt;description&amp;gt;...&amp;lt;/description&amp;gt;
    &amp;lt;url&amp;gt;...&amp;lt;/url&amp;gt;
    &amp;lt;inceptionYear&amp;gt;...&amp;lt;/inceptionYear&amp;gt;
    &amp;lt;licenses&amp;gt;...&amp;lt;/licenses&amp;gt;
    &amp;lt;organization&amp;gt;...&amp;lt;/organization&amp;gt;
    &amp;lt;developers&amp;gt;...&amp;lt;/developers&amp;gt;
    &amp;lt;contributors&amp;gt;...&amp;lt;/contributors&amp;gt;
    &amp;lt;!-- 环境设置--&amp;gt;
    &amp;lt;issueManagement&amp;gt;...&amp;lt;/issueManagement&amp;gt;
    &amp;lt;ciManagement&amp;gt;...&amp;lt;/ciManagement&amp;gt;
    &amp;lt;mailingLists&amp;gt;...&amp;lt;/mailingLists&amp;gt; 
    &amp;lt;scm&amp;gt;...&amp;lt;/scm&amp;gt;
    &amp;lt;prerequisites&amp;gt;...&amp;lt;/prerequisites&amp;gt;
    &amp;lt;repositories&amp;gt;...&amp;lt;/repositories&amp;gt;
    &amp;lt;pluginRepositories&amp;gt;...&amp;lt;/pluginRepositories&amp;gt;
    &amp;lt;distributionManagement&amp;gt;...&amp;lt;/distributionManagement&amp;gt;
    &amp;lt;profiles&amp;gt;...&amp;lt;/profiles&amp;gt;
&amp;lt;/project&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;基本内容设置&quot;&gt;基本内容设置&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;groupId&lt;/strong&gt;：项目或者组织的唯一标志 ，如cn.gov.customs生成的相对路径为：/cn/gov/customs&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;artifactId&lt;/strong&gt;：项目的通用名称&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;version&lt;/strong&gt;：项目的版本&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;packaging&lt;/strong&gt;：打包机制，如pom,jar,maven-plugin,ejb,war,ear,rar,par&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;name&lt;/strong&gt;：用户描述项目的名称，无关紧要的东西，非必要&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;url&lt;/strong&gt;：开发团队官方地址 ，非必要&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;classifer&lt;/strong&gt;：分类&lt;/p&gt;
&lt;p&gt;对于以上基本标签，groupId,artifactId,version,packaging作为项目唯一坐标&lt;/p&gt;
&lt;h3 id=&quot;pom依赖关系设置&quot;&gt;POM依赖关系设置&lt;/h3&gt;
&lt;p&gt;对于POM文件中的关系，主要有依赖，继承，合成等关系。&lt;/p&gt;
&lt;h4 id=&quot;依赖关系&quot;&gt;依赖关系&lt;/h4&gt;
&lt;pre&gt;
&lt;code&gt;&amp;lt;dependencies&amp;gt;
    &amp;lt;dependency&amp;gt;
        &amp;lt;groupId&amp;gt;junit&amp;lt;/groupId&amp;gt;
        &amp;lt;artifactId&amp;gt;junit&amp;lt;/artifactId&amp;gt;
        &amp;lt;version&amp;gt;4.0&amp;lt;/version&amp;gt;
        &amp;lt;type&amp;gt;jar&amp;lt;/type&amp;gt;
        &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt;
        &amp;lt;optional&amp;gt;true&amp;lt;/optional&amp;gt;
    &amp;lt;/dependency&amp;gt;
    
    &amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;com.alibaba.china.shared&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;alibaba.apollo.webx&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;2.5.0&amp;lt;/version&amp;gt;
    &amp;lt;exclusions&amp;gt;
        &amp;lt;exclusion&amp;gt;
            &amp;lt;artifactId&amp;gt;org.slf4j.slf4j-api&amp;lt;/artifactId&amp;gt;
            &amp;lt;groupId&amp;gt;com.alibaba.external&amp;lt;/groupId&amp;gt;
        &amp;lt;/exclusion&amp;gt;
        ....
    &amp;lt;/exclusions&amp;gt;
    ......
&amp;lt;/dependencies&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;blockquote readability=&quot;10&quot;&gt;
&lt;p&gt;以上代码说明：&lt;strong&gt;groupId&lt;/strong&gt;, &lt;strong&gt;artifactId&lt;/strong&gt;, &lt;strong&gt;version&lt;/strong&gt;这三个组合标示依赖的具体工程。如果在中央仓库中没有的依赖包，需要自行导入到本地或私有仓库中。&lt;/p&gt;
&lt;p&gt;具体有三种方式，简单提一提，具体后续出专题文章。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol readability=&quot;1&quot;&gt;&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;通过本地maven 进行配置安装 使用maven install plugin。如：mvn install:intall-file -Dfile=non-maven-proj.jar -DgroupId=som.group -DartifactId=non-maven-proj -Dversion=1。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;创建自己的repositories并且部署这个包，使用类似上面的deploy:deploy-file命令。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;在代码中配置scope为system,并且指定系统路径。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;strong&gt;dependency介绍&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;dependency&lt;/strong&gt;下面包含众多字标签。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;type&lt;/strong&gt;：默认为&lt;strong&gt;jar&lt;/strong&gt;类型，常用的类型有：&lt;strong&gt;jar,ejb-client,test-jar&lt;/strong&gt;...,可设置plugins中的extensions值为true后在增加新类型。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;scope&lt;/strong&gt;：用来指定当前包的依赖范围&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;compile（编译范围），是默认的范围，编译范围依赖在所有的classpath中可用，同时它们也会被打包。&lt;/li&gt;
&lt;li&gt;provided（已提供范围），只有在当JDK或者一个容器已提供该依赖之后才使用。&lt;/li&gt;
&lt;li&gt;runtime（运行时范围），在运行和测试系统的时候需要。&lt;/li&gt;
&lt;li&gt;test（测试范围），在一般的 编译和运行时都不需要。&lt;/li&gt;
&lt;li&gt;system（系统范围），与provided类似&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;optional&lt;/strong&gt;：设置指依赖是否可选，默认为false,即子项目默认都继承，为true,则子项目必需显示的引入，与dependencyManagement里定义的依赖类似 。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;exclusions&lt;/strong&gt;：如果X需要A,A包含B依赖，那么X可以声明不要B依赖，只要在exclusions中声明exclusion。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;exclusion&lt;/strong&gt;：将B从依赖树中删除，如上配置，alibaba.apollo.webx不想使用com.alibaba.external ,但是alibaba.apollo.webx是集成了com.alibaba.external,r所以就需要排除掉。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;parent&lt;/strong&gt;：如果一个工程作为父类工程，那就必须添加pom,子系统要继承父类，也必须使用&lt;strong&gt;parent&lt;/strong&gt;标签。对于子系统使用如下所示：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;lt;parent&amp;gt; 
    &amp;lt;groupId&amp;gt;org.codehaus.mojo&amp;lt;/groupId&amp;gt; 
    &amp;lt;artifactId&amp;gt;my-parent&amp;lt;/artifactId&amp;gt; 
    &amp;lt;version&amp;gt;2.0&amp;lt;/version&amp;gt; 
    &amp;lt;relativePath&amp;gt;../my-parent&amp;lt;/relativePath&amp;gt; 
&amp;lt;/parent&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;说明：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;relativePath&lt;/strong&gt;：为可选项，maven会首先搜索该地址，然后再搜索远程仓库。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;dependencyManagement&lt;/strong&gt;：用于帮助管理chidren的dependencies，优点就是可以集中管理版本。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;modules&lt;/strong&gt;：多模块项目的标签，顺序不重要，MAVEN会自动拓展排序。使用如下所示：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;lt;!--子模块--&amp;gt;
&amp;lt;modules&amp;gt;
    &amp;lt;module&amp;gt;ygb-service-config&amp;lt;/module&amp;gt;
    &amp;lt;module&amp;gt;ygb-service-bus&amp;lt;/module&amp;gt;
    &amp;lt;module&amp;gt;ygb-service-policy-center&amp;lt;/module&amp;gt;
    &amp;lt;module&amp;gt;ygb-service-letter-of-indemnity&amp;lt;/module&amp;gt;
    &amp;lt;module&amp;gt;ygb-service-authentication-center&amp;lt;/module&amp;gt;
    &amp;lt;module&amp;gt;ygb-service-eureka-center&amp;lt;/module&amp;gt;
    &amp;lt;module&amp;gt;ygb-service-api-gateway&amp;lt;/module&amp;gt;
    &amp;lt;module&amp;gt;ygb-service-demo&amp;lt;/module&amp;gt;
    &amp;lt;module&amp;gt;ygb-service-cache-ehcache&amp;lt;/module&amp;gt;
    &amp;lt;module&amp;gt;ygb-service-maven&amp;lt;/module&amp;gt;
&amp;lt;/modules&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;properties&lt;/strong&gt;：POM文件常量定义区，在文件中可以直接引用，如版本、编码等。如下所示：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;lt;properties&amp;gt;
  &amp;lt;file.encoding&amp;gt;UTF-8&amp;lt;/file_encoding&amp;gt;
  &amp;lt;java.source.version&amp;gt;1.8&amp;lt;/java_source_version&amp;gt;
  &amp;lt;java.target.version&amp;gt;1.8&amp;lt;/java_target_version&amp;gt;
&amp;lt;/properties&amp;gt;   &lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;使用方式：&lt;strong&gt;${file.encoding}&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;maven构建设置&quot;&gt;MAVEN构建设置&lt;/h2&gt;
&lt;p&gt;这部分主要是对项目的构建过程进行配置，包括打包的方式、插件的安装等。配置如下所示：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;lt;!-- 构建管理 --&amp;gt;
&amp;lt;build&amp;gt;
    &amp;lt;!--构建工具插件管理--&amp;gt;
    &amp;lt;plugins&amp;gt;
        &amp;lt;plugin&amp;gt;
            &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;spring-boot-maven-plugin&amp;lt;/artifactId&amp;gt;
        &amp;lt;/plugin&amp;gt;
    &amp;lt;/plugins&amp;gt;
&amp;lt;/build&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;build模块设置&quot;&gt;build模块设置&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;defaultGoal&lt;/strong&gt; ：默认的目标，必须跟命令行上的参数相同，如：&lt;a href=&quot;jar:jar,或者与时期parse相同,例如install&quot; class=&quot;uri&quot;&gt;jar:jar,或者与时期parse相同,例如install&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;directory&lt;/strong&gt;：指定build target目标的目录，默认为$(basedir}/target,即项目根目录下的target。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;finalName&lt;/strong&gt;：指定去掉后缀的工程名字，例如：默认为${artifactId}-${version}。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;filters&lt;/strong&gt;：定义指定filter属性的位置，例如filter元素赋值filters/filter1.properties,那么这个文件里面就可以定义name=value对，这个name=value对的值就可以在工程pom中通过${name}引用，默认的filter目录是${basedir}/src/main/fiters/。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;resources&lt;/strong&gt;：描述工程中各种文件资源的位置 。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;lt;resource&amp;gt; 
    &amp;lt;targetPath&amp;gt;META-INF/plexus&amp;lt;/targetPath&amp;gt; 
    &amp;lt;filtering&amp;gt;false&amp;lt;/filtering&amp;gt; 
    &amp;lt;directory&amp;gt;${basedir}/src/main/plexus&amp;lt;/directory&amp;gt; 
    &amp;lt;includes&amp;gt; 
        &amp;lt;include&amp;gt;configuration.xml&amp;lt;/include&amp;gt; 
    &amp;lt;/includes&amp;gt; 
    &amp;lt;excludes&amp;gt; 
        &amp;lt;exclude&amp;gt;**/*.properties&amp;lt;/exclude&amp;gt; 
    &amp;lt;/excludes&amp;gt; 
&amp;lt;/resource&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;子标签介绍：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;&lt;strong&gt;targetPath&lt;/strong&gt;：指定build资源具体目录，默认是base directory。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;filtering&lt;/strong&gt;：指定是否将filter文件的变量值在这个resource文件有效。即上面说的filters里定义的*.property文件。例如上面就指定那些变量值在configuration文件无效，设置为false。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;directory&lt;/strong&gt;：指定属性文件的目录，build的过程需要找到它，并且将其放到targetPath下，默认的directory是&lt;strong&gt;${basedir}/src/main/resources&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;includes&lt;/strong&gt;：指定包含文件的patterns,符合样式并且在directory目录下的文件将会包含进project的资源文件。&lt;/li&gt;
&lt;li&gt;excludes：指定不包含在内的patterns。&lt;/li&gt;
&lt;li&gt;testResources：包含测试资源元素。默认的测试资源路径是${basedir}/src/test/resources,测试资源是不部署的。&lt;/li&gt;
&lt;/ol&gt;&lt;h3 id=&quot;plugins配置&quot;&gt;plugins配置&lt;/h3&gt;
&lt;p&gt;对于打包插件的相关配置在该模块配置。样例如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;lt;plugin&amp;gt; 
    &amp;lt;groupId&amp;gt;org.apache.maven.plugins&amp;lt;/groupId&amp;gt; 
    &amp;lt;artifactId&amp;gt;maven-jar-plugin&amp;lt;/artifactId&amp;gt; 
    &amp;lt;version&amp;gt;2.0&amp;lt;/version&amp;gt; 
    &amp;lt;extensions&amp;gt;false&amp;lt;/extensions&amp;gt; 
    &amp;lt;inherited&amp;gt;true&amp;lt;/inherited&amp;gt; 
    &amp;lt;configuration&amp;gt; 
      &amp;lt;classifier&amp;gt;test&amp;lt;/classifier&amp;gt; 
    &amp;lt;/configuration&amp;gt; 
    &amp;lt;dependencies&amp;gt;...&amp;lt;/dependencies&amp;gt; 
    &amp;lt;executions&amp;gt;...&amp;lt;/executions&amp;gt; 
&amp;lt;/plugin&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;子标签说明：&lt;/p&gt;
&lt;ol readability=&quot;-1&quot;&gt;&lt;li&gt;&lt;strong&gt;extensions&lt;/strong&gt;：true or false, 决定是否要load这个plugin的extensions，默认为true。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;inherited&lt;/strong&gt;：是否让子pom继承，ture or false 默认为true。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;configuration&lt;/strong&gt;：通常用于私有不开源的plugin,不能够详细了解plugin的内部工作原理，但使plugin满足的properties&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;dependencies&lt;/strong&gt;：与pom基础的dependencies的结构和功能都相同，只是plugin的dependencies用于plugin,而pom的denpendencies用于项目本身。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;dependencies&lt;/strong&gt;：排除一些用不到的dependency或者修改dependency的版本等。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;executions&lt;/strong&gt;：plugin也有很多个目标，每个目标具有不同的配置，executions就是设定plugin的目标。&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;pre&gt;
&lt;code&gt;&amp;lt;!--executions 内部标签示意--&amp;gt;

&amp;lt;execution&amp;gt; 
    &amp;lt;id&amp;gt;echodir&amp;lt;/id&amp;gt; 
    &amp;lt;goals&amp;gt; 
      &amp;lt;goal&amp;gt;run&amp;lt;/goal&amp;gt; 
    &amp;lt;/goals&amp;gt; 
    &amp;lt;phase&amp;gt;verify&amp;lt;/phase&amp;gt; 
    &amp;lt;inherited&amp;gt;false&amp;lt;/inherited&amp;gt; 
    &amp;lt;configuration&amp;gt; 
      &amp;lt;tasks&amp;gt; 
        &amp;lt;echo&amp;gt;Build Dir: ${project.build.directory}&amp;lt;/echo&amp;gt; 
      &amp;lt;/tasks&amp;gt; 
    &amp;lt;/configuration&amp;gt; 
&amp;lt;/execution&amp;gt; &lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;h3 id=&quot;pluginmanagement配置&quot;&gt;pluginManagement配置&lt;/h3&gt;
&lt;p&gt;pluginManagement的作用类似于denpendencyManagement,只是denpendencyManagement是用于管理项目jar包依赖，pluginManagement是用于管理plugin。样例如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;lt;pluginManagement&amp;gt; 
  &amp;lt;plugins&amp;gt; 
    &amp;lt;plugin&amp;gt; 
      &amp;lt;groupId&amp;gt;org.apache.maven.plugins&amp;lt;/groupId&amp;gt; 
      &amp;lt;artifactId&amp;gt;maven-jar-plugin&amp;lt;/artifactId&amp;gt; 
      &amp;lt;version&amp;gt;2.2&amp;lt;/version&amp;gt; 
      &amp;lt;executions&amp;gt; 
        &amp;lt;execution&amp;gt; 
          &amp;lt;id&amp;gt;pre-process-classes&amp;lt;/id&amp;gt; 
          &amp;lt;phase&amp;gt;compile&amp;lt;/phase&amp;gt; 
          &amp;lt;goals&amp;gt; 
            &amp;lt;goal&amp;gt;jar&amp;lt;/goal&amp;gt; 
          &amp;lt;/goals&amp;gt; 
          &amp;lt;configuration&amp;gt; 
            &amp;lt;classifier&amp;gt;pre-process&amp;lt;/classifier&amp;gt; 
          &amp;lt;/configuration&amp;gt; 
        &amp;lt;/execution&amp;gt; 
      &amp;lt;/executions&amp;gt; 
    &amp;lt;/plugin&amp;gt; 
  &amp;lt;/p&lt;/code&gt;
&lt;/pre&gt;</description>
<pubDate>Sat, 02 Dec 2017 15:06:00 +0000</pubDate>
<dc:creator>千万之路刚开始</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/hyhnet/p/7956197.html</dc:identifier>
</item>
<item>
<title>tensorflow初探 - Wanna_Go</title>
<link>http://www.cnblogs.com/wxshi/p/7956026.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/wxshi/p/7956026.html</guid>
<description>&lt;p&gt;TensorFlow是一个采用数据流图，用于数值计算的开源软件库。自己接触tensorflow比较的早，可是并没有系统深入的学习过，现在TF在深度学习已经成了“标配”，所以打算系统的学习一遍。在本篇文章中主要介绍TF的基础知识。。。&lt;/p&gt;
&lt;h3 id=&quot;创建并运行图&quot;&gt;创建并运行图&lt;/h3&gt;
&lt;p&gt;首先创建 两个变量&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;import tensorflow as tf
reset_graph()
x = tf.Variable(3, name=&quot;x&quot;)
y = tf.Variable(4, name=&quot;y&quot;)
f = x*x*y + y + 2
&amp;gt;&amp;gt;f
&amp;lt;tf.Tensor 'add_3:0' shape=() dtype=int32&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;然而，&lt;code&gt;f&lt;/code&gt;中并没有想法要的结果，实际上上面的代码并没有真正的运行，它只是创建了一个&lt;code&gt;计算图(compution graph)&lt;/code&gt;，并且定义的变量也并没有被初始化，为了计算刚才定义的图，我们需要开启一个&lt;code&gt;session&lt;/code&gt;，然后初始化上面的变量。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;sess = tf.Session()
sess.run(x.initializer)
sess.run(y.initializer)
result = sess.run(f)
sess.close()  # 最终关闭这个session
&amp;gt;&amp;gt;print(result)
42&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;类似python的&lt;code&gt;with open()&lt;/code&gt;语法，我们还可以这样写&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;with tf.Session() as sess:
    x.initializer.run() #sess.run(x.initializer)
    y.initializer.run()
    result = f.eval()  #sess.run(f)
    print(result)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;注意上面代码注释的部分，这两钟方法是等价的，即&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt; x.initializer.run()  &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; tf.get_default_session().run(x.initializer)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;选择哪一种写法主要取决于哪种方法简单。那么如果我们由很多的变量，都需要进行初始化，再逐一初始化就显得繁琐了，这时候我们可以使用&lt;code&gt;global_variables_initializer()&lt;/code&gt;方法进行初始化。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;init = tf.global_variables_initializer() # 准备init节点
with tf.Session() as sess:
    init.run()              #执行初始化动作
    print(f.eval)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;从上面的代码可以看出，TF程序的运行过程分为两个阶段，&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;1.构建计算图，构建能够表示 机器学习模型的图。&lt;/li&gt;
&lt;li&gt;2.运行部分，通常是一个循环，重复地对训练步骤进行评估，改善模型的参数。&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;管理计算图&quot;&gt;管理计算图&lt;/h3&gt;
&lt;p&gt;当我们创建一个节点的时候， 被创建的节点自动的被添加到默认的计算图中：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;gt;&amp;gt;x.graph is tf.get_default_graph() 
True&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;但是大多的时候，我们想分别管理相互独立的graphs，这时候就要创建新的graph&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;graph = tf.Graph()
with graph.as_default():
    x1 = tf.Variable(2)
    
print(x1.graph is graph) #True
print(x1.graph is tf.get_default_graph) #False&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;note:&lt;/strong&gt;我们在使用Python shell试验阶段的时候，可能会出现输出和我们的预期不一样，这是因为多次运行导致默认的graph包含重复的nodes，一个解决方案是重启shell，另外一个是使用&lt;code&gt;tf.reset_default_graph()&lt;/code&gt;。&lt;/p&gt;
&lt;h3 id=&quot;节点的生命周期&quot;&gt;节点的生命周期&lt;/h3&gt;
&lt;p&gt;节点的生命周期也成为变量的生命周期，因为在TF中每一个变量在graph中都对应一个node，当我们创建一个node，TF会自动判断该节点的依赖关系，例如下面这段代码：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;w = tf.constant(3)
x = w + 2
y = x + 5
z = x * 3
with tf.Session() as sess:
    print(y.eval()) #10
    print(z.eval()) #15&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;上面这段代码定义了一个简单的graph，并计算y和z的值，TF发现y依赖x、x依赖w。所以它依次计算w、x和y。再计算z的时候，发现需要计算x和w。最终这段代码执行了两次w和x。当执行完毕后所有的节点都被&lt;code&gt;删除&lt;/code&gt;，除了&lt;code&gt;Variable&lt;/code&gt;值，variable的生命周期为整个session。也就是说variable的生命周期从&lt;code&gt;initializer&lt;/code&gt;开始，到session&lt;code&gt;close&lt;/code&gt;结束。&lt;br/&gt;上面这段代码在正式的生产环境下效率是很低的，为了避免被重复计算，我们就需要告诉TF计算y和z在同一个graph中。下面是代码：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;with tf.Session() as sess: 
    y_val,z_val = sess.run([y,z]) ##
    print(y_val) 
    print(z_val) &lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;note:&lt;/strong&gt;在单进程的TF程序中，多个session是不共用变量(数据)的，每一个session有着独自的变量copy。在分布式TF程序中，变量是存储在server，而不是在session中，所以多个session可以共享变量。&lt;/p&gt;
&lt;h3 id=&quot;使用tf求解线性回归&quot;&gt;使用TF求解线性回归&lt;/h3&gt;
&lt;h4 id=&quot;正规方程求解&quot;&gt;1 正规方程求解&lt;/h4&gt;
&lt;p&gt;在之前的文章&lt;a href=&quot;http://www.cnblogs.com/wxshi/p/7725814.html&quot;&gt;使用sklearn进行数据挖掘&lt;/a&gt;介绍了使用sklean进行数据挖掘，这里我们使用TF来进行计算，不过为了方便我们直接使用sklean提供的数据集，跳过数据处理过程，直接使用正规方程(Normal Equation)方法求解$ \theta=(X^T\cdot X)^{-1}\cdot X^T\cdot y $。类似Numpy，TF也提供了许多数据转换的方法，在numpy数组被成为&lt;code&gt;ndarray&lt;/code&gt;，详见&lt;a href=&quot;http://www.cnblogs.com/wxshi/p/7851701.html&quot;&gt;掌握numpy&lt;/a&gt;，在TF中的多维数组被成为张量(&lt;code&gt;tensors&lt;/code&gt;)。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;import numpy as np
from sklearn.datasets import fetch_california_housing
housing = fetch_california_housing()
m,n = housing.data.shape
data = np.c_[np.ones((m,1)),housing.data] #添加X0=1
X = tf.constant(data,dtype=tf.float32,name='X')
y = tf.constant(housing.target.reshape(-1,1),dtype=tf.float32,name='y')#转为列向量(1D -&amp;gt; 2D)
X_T = tf.transpose(X)
theat = tf.matmul(tf.matmul(tf.matrix_inverse( tf.matmul(X_T,X)),X_T),y)    
with tf.Session() as sess:
    theat_hat = theat.eval()
    print(theat_hat)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;上面这段代码可以完全使用Numpy替代，当然也可以使用sklearn的回归方法，也是分分钟搞定的事情，&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;from sklearn.linear_model import LinearRegression
lin_reg = LinearRegression()
lin_reg.fit(housing.data, housing.target.reshape(-1, 1))
print(np.vstack((lin_reg.intercept_.reshape(-1, 1), lin_reg.coef_.T)))&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;使用TF的优势是可以使用GPU进行运算。&lt;br/&gt;&lt;strong&gt;note:&lt;/strong&gt;&lt;code&gt;reshape(-1,1)&lt;/code&gt;的作用是将一维数组转化为二维数组，参数-1表示&lt;code&gt;unspecified&lt;/code&gt;,表示会根据数组的长度作为这一维度的值。&lt;/p&gt;
&lt;h4 id=&quot;使用批梯度下降求解&quot;&gt;2 使用批梯度下降求解&lt;/h4&gt;
&lt;p&gt;上面使用的是正规方程求解，现在我们使用梯度下降方法求解，在求解之前我们需要现对数据做normalize，否则会导致收敛速度慢&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()
scaled_data = scaler.fit_transform(housing.data)
data = np.c_[np.ones((m,1)),scaled_data] #添加X0=1&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;下面就是使用TF计算梯度下降了，最终的迭代公式为$\theta^{'}=\frac{2}{m}X^T\cdot (X\cdot \theta-y) $，这里就不再赘述。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;n_epoch = 100
learning_rate = 0.1
X = tf.constant(data,dtype=tf.float32,name='X')
y = tf.constant(housing.target.reshape(-1,1),dtype=tf.float32,name='y')
theta = tf.Variable(tf.random_uniform([n+1,1],-1,1),name='theta')
y_pred = tf.matmul(X,theta,name='prediction')
error = y_pred - y
mse = tf.reduce_mean(tf.square(error),name='mse') #Mean Squared Error 
gradient = 2/m * tf.matmul(tf.transpose(X),error)
training_op = tf.assign(theta,theta - learning_rate * gradient)

init = tf.global_variables_initializer()
with tf.Session() as sess:
    sess.run(init)
    for epoch in range(n_epoch):
        if epoch % 100 == 0:
            print(&quot;Epoch&quot;, epoch, &quot;MSE =&quot;, mse.eval())
        sess.run(training_op)
    &amp;gt;&amp;gt;print('best theta:',theta.eval())
Epoch 0 MSE = 9.16154
Epoch 100 MSE = 0.714501
Epoch 200 MSE = 0.566705
Epoch 300 MSE = 0.555572
Epoch 400 MSE = 0.548812
Epoch 500 MSE = 0.543636
Epoch 600 MSE = 0.539629
Epoch 700 MSE = 0.536509
Epoch 800 MSE = 0.534068
Epoch 900 MSE = 0.532147
'best theta:'
[[ 2.06855249],
 [ 0.88740271],
 [ 0.14401658],
 [-0.34770882],
 [ 0.36178368],
 [ 0.00393812],
 [-0.04269557],
 [-0.66145277],
 [-0.63752776]]&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;上面的代码比较简单,&lt;code&gt;tf.random_uniform()&lt;/code&gt;生成一个均匀分布，大小为(n+1,1)，取值范围(-1,1)。至于为什么n+1，是因为考虑到&lt;span class=&quot;math inline&quot;&gt;\(x_0=1\)&lt;/span&gt;。&lt;code&gt;tf.assign()&lt;/code&gt;是创建一个新的节点，为variable更新值&lt;/p&gt;
&lt;h4 id=&quot;使用tf自动求导&quot;&gt;2.1使用TF自动求导&lt;/h4&gt;
&lt;p&gt;未完。。。待续&lt;/p&gt;
</description>
<pubDate>Sat, 02 Dec 2017 14:49:00 +0000</pubDate>
<dc:creator>Wanna_Go</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/wxshi/p/7956026.html</dc:identifier>
</item>
<item>
<title>沟通技巧系列 - 入门篇 - 奶爸码农</title>
<link>http://www.cnblogs.com/wdsunny/p/7955978.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/wdsunny/p/7955978.html</guid>
<description>&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;沟通的目的是清楚而明确地将你的信息传递给他人。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;沟通需要消息的发送者和接收者共同的努力。这是一个充满错误的过程，信息经常被接收者误解。如果没有发现，就会造成巨大的困惑，浪费精力和错失良机。&lt;/p&gt;
&lt;p&gt;实际上，只有当发送者和接收者都了解到沟通的相同信息时，沟通才是成功的。&lt;/p&gt;
&lt;p&gt;通过成功地传达您的信息，您可以有效传达您的想法。 如果不成功，您所传达的想法并不一定会反映出您自己的原本想法，从而导致个人和专业方面的沟通障碍。&lt;/p&gt;
&lt;p&gt;在最近对拥有5万多名员工的公司的招聘人员进行的一项调查中，沟通技巧被认为是选择经理人的唯一最重要的决定性因素。匹兹堡大学卡茨商学院进行的这项调查指出，沟通技巧，包括书面和口头表达，以及与他人合作的能力是促成工作成功的主要因素。&lt;/p&gt;
&lt;p&gt;尽管对沟通技巧的越来越重视，许多人仍然为此而斗争，无法有效地传达自己的想法 - 无论是口头还是书面形式。这种沟通障碍使他们几乎不可能在工作场所进行有效的竞争，并妨碍职业发展。&lt;/p&gt;
&lt;p&gt;传递信息是最重要的。要做到这一点，你必须了解你的信息是什么，你要传送给什么观众，以及它将如何被感知。你还必须权衡在你的交际环境中，如情境和文化背景。&lt;/p&gt;

&lt;p&gt;在沟通过程的每个阶段（包括发送者，消息，渠道，接收者，反馈和上下文 - 见下图），沟通障碍都会出现，并有可能造成误解和混淆。&lt;/p&gt;

&lt;div class=&quot;image-package&quot;&gt;
&lt;div class=&quot;image-container&quot;&gt;

&lt;div class=&quot;image-view&quot; data-width=&quot;922&quot; data-height=&quot;500&quot;&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/7755754-eb7bf3334f351a31.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700&quot; alt=&quot;&quot; data-original-src=&quot;//upload-images.jianshu.io/upload_images/7755754-eb7bf3334f351a31.png&quot; data-original-width=&quot;922&quot; data-original-height=&quot;500&quot; data-original-format=&quot;image/png&quot; data-original-filesize=&quot;188212&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;为了成为一个有效的沟通者，让你的观点没有误解和困惑，你的目标应该是在这个过程的每个阶段减少这些障碍的频率，清晰，简洁，准确，有计划的沟通。 我们遵循以下流程：&lt;/p&gt;
&lt;h2&gt;发送者&lt;/h2&gt;
&lt;p&gt;作为消息的来源，你需要清楚你为什么要沟通，以及你想要沟通什么。您还需要确信您所传达的信息是有用和准确的。&lt;/p&gt;
&lt;h2&gt;信息&lt;/h2&gt;
&lt;p&gt;该消息是您想要沟通的信息。&lt;/p&gt;
&lt;h2&gt;编码&lt;/h2&gt;
&lt;p&gt;这是将您想要传达的信息转换成可以在另一端发送并正确解码的过程。您在编码方面的成功部分取决于您清楚而简单地传达信息的能力，还取决于您预测和消除混淆源（例如，文化问题，错误的假设和缺失的信息）的能力。其中一个关键部分是知道您的听众：不明白您与谁沟通会导致被误解的信息。&lt;/p&gt;
&lt;h2&gt;渠道&lt;/h2&gt;
&lt;p&gt;信息通过渠道传达，口头包括面对面的会议，电话和视频会议; 书面包括信件，电子邮件，备忘录和报告。&lt;/p&gt;
&lt;p&gt;不同的渠道有不同的优势和劣势。例如，口头提供一长串的指示并不是特别有效，如果你用电子邮件强烈批评某人，你很快就会出现问题。&lt;/p&gt;
&lt;h2&gt;解码&lt;/h2&gt;
&lt;p&gt;正如成功的编码技巧一样，成功的解码也是如此（例如，需要花费时间仔细阅读信息，或主动听取信息）。正如编码错误可能引起的混淆一样，解码也可能产生于解码错误。如果解码器没有足够的知识来理解消息，情况尤其如此。&lt;/p&gt;
&lt;h2&gt;接收器&lt;/h2&gt;
&lt;p&gt;你的信息被传送给你的听众的个人成员。毫无疑问，你要记住你希望你的消息从这个观众那里得到的行动或反应。但请记住，这些人中的每一个人都会带着思想和感情进入交流过程，这无疑会影响他们对你的信息的理解和回应。要成为一个成功的沟通者，你应该在发表你的信息之前考虑这些，并采取适当的行动。&lt;/p&gt;
&lt;h2&gt;反馈&lt;/h2&gt;
&lt;p&gt;你的听众将会为你提供反馈，口头和非语言的反应。密切关注这个反馈，因为它是唯一让你确信你的听众已经理解了你的信息的东西。如果您发现有误解，至少您有机会再次发送消息。&lt;/p&gt;
&lt;h2&gt;上下文&lt;/h2&gt;
&lt;p&gt;您的消息传递的情况是有上下文。这可能包括周边环境或更广泛的文化（企业文化，国际文化等）。&lt;/p&gt;

&lt;p&gt;为了有效传达你的信息，你必须致力于打破沟通过程中每个阶段存在的障碍。&lt;/p&gt;
&lt;p&gt;我们从消息本身开始。 如果您的消息太冗长，杂乱无章或者包含错误，则可能会导致消息被误解。使用不好的口头和肢体语言也会混淆消息。&lt;/p&gt;
&lt;p&gt;上下文中的障碍往往源于提供太多信息的发送者太快。 如果有疑问，通常更少。 最好要留意别人的时间要求，特别是在当今这个繁忙的社会。&lt;/p&gt;
&lt;p&gt;一旦你明白了这一点，你需要努力了解你的听众的文化，确保你可以在你自己的组织内，在这个国家，甚至在国外，把你的信息传达给不同背景和文化的人。&lt;/p&gt;

&lt;p&gt;当今社会，每个人都需要和别人合作沟通，想想你在一天中与人沟通的频率。你写电子邮件，主持会议，参加电话会议，编写报告，设计演示稿，与你的同事辩论......&lt;/p&gt;
&lt;p&gt;在工作中，我们可能花几乎整整一天来进行沟通。 那么，我们怎样才能提高生产力呢？我们可以确保以最清晰，最有效的方式进行交流。&lt;/p&gt;
&lt;p&gt;这就是为什么7 Cs的沟通有帮助，7 Cs提供了一个清单，确保您的会议，电子邮件，电话会议，报告和演示文稿能够清晰的创建并且传达信息给到您的听众。&lt;/p&gt;
&lt;p&gt;根据7 Cs，沟通需要是：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Clear - 明确。&lt;/li&gt;
&lt;li&gt;Concise - 简洁。&lt;/li&gt;
&lt;li&gt;Concrete - 具体。&lt;/li&gt;
&lt;li&gt;Correct - 正确。&lt;/li&gt;
&lt;li&gt;Coherent - 一致。&lt;/li&gt;
&lt;li&gt;Complete - 完整。&lt;/li&gt;
&lt;li&gt;Courteous - 有礼貌。&lt;/li&gt;
&lt;/ol&gt;&lt;h2&gt;1.Clear - 明确&lt;/h2&gt;
&lt;p&gt;在写信或和某人讲话时，要清楚你的目标或信息。你和这个人沟通的目的是什么？如果你不确定，那么你的听众也不会确定。&lt;/p&gt;
&lt;p&gt;要清楚，尽量减少每个句子中的想法的数量。确保你的读者很容易理解你的意思。人们不应该为了理解你想表达的意思而自己做些假设。&lt;/p&gt;
&lt;h3&gt;坏例子&lt;/h3&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;你好，John，&lt;/p&gt;
&lt;p&gt;我想给你写一个关于在你的部门工作的Daniel的简短说明。他是一个很棒的同事，当你有时间的时候，我想和你谈谈更多。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这封邮件是关于什么的？我们不确定。首先，如果John的部门有多个Daniel，John不会知道来信者的意思。&lt;/p&gt;
&lt;p&gt;接下来，Daniel在做什么，具体来说，这真是太棒了？我们也不知道。这是如此模糊，约翰肯定会回信去了解更多的信息。&lt;/p&gt;
&lt;p&gt;最后，这封电子邮件的目的是什么？来信者只是想有一个关于Daniel的闲聊，还是有一些更具体的目标吗？这个消息没有意义，所以有点混乱。&lt;/p&gt;
&lt;h3&gt;好例子&lt;/h3&gt;
&lt;blockquote readability=&quot;11&quot;&gt;
&lt;p&gt;你好，John，&lt;/p&gt;
&lt;p&gt;我想给你写一个关于在你部门工作的Daniel Kedar的简短说明。最近几个星期，他利用自己的时间帮助IT部门完成了几个紧急的项目。&lt;/p&gt;
&lt;p&gt;我们有一个艰难的升级项目，将在未来三个月运行，他的知识和技能将被证明是非常宝贵的。我们可以请他帮忙做这个工作吗？&lt;/p&gt;
&lt;p&gt;我希望能和你谈谈这件事。什么时候最好打电话给你进一步讨论？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;第二个信息更清晰，因为读者有他需要采取行动的信息。&lt;/p&gt;
&lt;h2&gt;2.Concise - 简洁&lt;/h2&gt;
&lt;p&gt;当你的沟通时你坚持要点，并保持简短。当你可以三句话传达你的信息时，你的听众不想听到六句话。&lt;/p&gt;
&lt;p&gt;有没有可以删除的形容词或“填充词”？通常可以消除“例如”，“你看”，“绝对”，“我觉得”，“字面意思”，“基本上”或“我的意思”这样的词。&lt;br/&gt;有没有不必要的句子？&lt;br/&gt;你用不同的方式重复了几次？&lt;/p&gt;
&lt;h3&gt;坏例子&lt;/h3&gt;
&lt;blockquote readability=&quot;11&quot;&gt;
&lt;p&gt;Hi Matt，&lt;/p&gt;
&lt;p&gt;我想和你们谈谈我们上周四计划的电子邮件营销活动。我真的认为我们的目标市场肯定是想看到公司的慈善努力。我认为这可能会产生很大的影响，而且会停留在比销售更长的时间内。&lt;/p&gt;
&lt;p&gt;例如，如果我们谈论公司努力实现可持续发展，以及我们在当地学校所做的慈善工作，那么我们希望吸引的人们将会更长时间地记住我们的信息。影响会更大。&lt;/p&gt;
&lt;p&gt;你怎么看？&lt;/p&gt;
&lt;p&gt;杰西卡&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这封电子邮件太长了！有重复，有很多“填料”占用空间。&lt;/p&gt;
&lt;h3&gt;好例子&lt;/h3&gt;
&lt;p&gt;看看我们简洁的时候会发生什么，去掉填充词：&lt;/p&gt;
&lt;blockquote readability=&quot;9&quot;&gt;
&lt;p&gt;Hi Matt，&lt;/p&gt;
&lt;p&gt;我想快速讨论我们上周四分析的电子邮件营销活动。我们的目标市场将希望了解公司的慈善事业，特别是我们的目标是成为可持续的，并帮助当地学校。&lt;/p&gt;
&lt;p&gt;这将产生更大的影响，并且会比传统的销售时间更长久。&lt;/p&gt;
&lt;p&gt;你怎么看？&lt;/p&gt;
&lt;p&gt;杰西卡&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;3.Concrete - 具体&lt;/h2&gt;
&lt;p&gt;当你的信息是具体的，那么你的观众就清楚地知道你在告诉他们什么。有细节（但不是太多！）和生动的事实，并有激光般的焦点。你的信息是坚实的。&lt;/p&gt;
&lt;h3&gt;坏例子&lt;/h3&gt;
&lt;p&gt;考虑这个广告文案：&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;午餐盒向导将为您节省时间每一天。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;像这样的声明可能没办法销售掉一件商品。没有激情，没有生动的细节，没有什么创造情感，也没有什么能够告诉听众他们为什么要关心。这个信息不够具体，不能有所作为。&lt;/p&gt;
&lt;h3&gt;好例子&lt;/h3&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;你每天花多少时间来包装孩子的午餐？不再需要了！每天只要从冰箱里拿出一个完整的午餐盒，给你的孩子一个健康的午餐，有更多的时间玩耍和阅读！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这个版本更好，因为有生动的图像。观众可以把照片花在与孩子相处的时间上，而父母可以与之争论什么？并提到产品存放在冰箱里解释了这个想法是如何实际的。通过这些细节，消息已经生动起来。&lt;/p&gt;
&lt;h2&gt;4.Correct - 正确&lt;/h2&gt;
&lt;p&gt;当你的交流是正确的，它符合你的观众。正确的沟通也是无误的沟通。&lt;/p&gt;
&lt;p&gt;你使用的技术术语是否符合受众的教育水平或知识水平？&lt;br/&gt;你有没有检查你的写作是否有语法错误？请记住，拼写检查器不会抓住所有的东西。&lt;br/&gt;所有名称和标题拼写正确吗？&lt;/p&gt;
&lt;h3&gt;坏例子&lt;/h3&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;Hi Daniel，&lt;/p&gt;
&lt;p&gt;非常感谢今天在午餐会见我！我喜欢我们的保护，我期待在我们的项目上前进。我相信这两周（two-weak）的期限不会是一个问题。&lt;/p&gt;
&lt;p&gt;再次感谢，我会尽快与您联系！&lt;/p&gt;
&lt;p&gt;敬上，&lt;/p&gt;
&lt;p&gt;杰克米勒&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果你快速阅读这个例子，那么你可能没有发现任何错误。但仔细观察，一个错误是使用弱(weak)而不是一周(week)。&lt;/p&gt;
&lt;p&gt;拼写检查器不会发现这样的错误，这就是为什么校对一切都是非常重要的！&lt;/p&gt;
&lt;h2&gt;5.Coherent - 一致&lt;/h2&gt;
&lt;p&gt;当你的沟通是一致的，这是合乎逻辑的。所有的点都与主题相关联，文本的语调和流程是一致的。&lt;/p&gt;
&lt;h3&gt;坏例子&lt;/h3&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;崔西，&lt;/p&gt;
&lt;p&gt;我想给你写一个关于你上周完成的报告的快速记录。我把它交给米歇尔来检验，她想确保你知道我们星期五的部门会议。我们将为新员工手册创建一个大纲。&lt;/p&gt;
&lt;p&gt;谢谢，&lt;/p&gt;
&lt;p&gt;米歇尔&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;正如你所看到的，这封电子邮件并没有很好地传达它的观点。米歇尔对崔西报告的反馈在哪里？她开始提起这个问题，但后来她把话题转到了星期五的会议上。&lt;/p&gt;
&lt;h3&gt;好例子&lt;/h3&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;崔西，&lt;/p&gt;
&lt;p&gt;我想给你写一个关于你上周完成的报告的快速记录。我把它交给米歇尔来检验，她让我知道你需要做一些改变。她会在今天下午晚些时候通过电子邮件发送给她详细的评论。&lt;/p&gt;
&lt;p&gt;谢谢，&lt;/p&gt;
&lt;p&gt;米歇尔&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;请注意，这就是一个很好的例子，并没有提到星期五的会议。这是因为会议提醒应该是一个完全独立的电子邮件。通过这种方式，崔西可以在她做出更改后删除报告反馈电子邮件，但将有关会议的电子邮件保存为提醒。每封电子邮件都应该只有一个主题。&lt;/p&gt;
&lt;h2&gt;6.Complete - 完整&lt;/h2&gt;
&lt;p&gt;在一个完整的信息，观众有他们需要的一切通知，并在适用情况下，采取行动。&lt;/p&gt;
&lt;p&gt;您的信息是否包含“号召行动”，以便您的听众清楚地知道您希望他们做什么？&lt;br/&gt;您是否包含了所有相关信息 - 联系人姓名，日期，时间，地点等等？&lt;/p&gt;
&lt;h3&gt;坏例子&lt;/h3&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;嗨，大家好，&lt;/p&gt;
&lt;p&gt;我只是想给大家提醒一下我们明天会面的事情！&lt;/p&gt;
&lt;p&gt;回头见，&lt;/p&gt;
&lt;p&gt;克里斯&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这个消息不完整，原因很明显。 什么会议？ 什么时候？ 哪里？ 克里斯已经留给了他的队伍一份含糊不清的信息。&lt;/p&gt;
&lt;h3&gt;好例子&lt;/h3&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;嗨，大家好，&lt;/p&gt;
&lt;p&gt;我只想提醒你明天的新远程办公会议。 会议将在二楼会议室的上午10:00举行。 如果你不能参加请提前让我知道。&lt;/p&gt;
&lt;p&gt;回头见，&lt;/p&gt;
&lt;p&gt;克里斯&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;7.Courteous - 有礼貌&lt;/h2&gt;
&lt;p&gt;礼貌的交流是友好的，开放的，诚实的。没有隐藏的侮辱或被动攻击性的声调。你牢记你的读者的观点，而且你对他们的需求感同身受。&lt;/p&gt;
&lt;h3&gt;坏例子&lt;/h3&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;杰夫，&lt;/p&gt;
&lt;p&gt;我想让你知道，我不明白你的团队在我们每周的会议上为什么总是主导讨论。我有很多项目，我也需要时间来讨论我的团队的进展。到目前为止，感谢你的部门，我在会上什么都没有做。你能确保他们下周为我和我的团队留点时间吗？&lt;/p&gt;
&lt;p&gt;谢谢，&lt;/p&gt;
&lt;p&gt;菲尔&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这很不礼貌！像这样的消息可能会开始办公室范围的战斗。而这封电子邮件只会造成不好的感觉，降低生产力和士气。即使在困难的情况下，一点点礼貌也可以帮助你走得更远。&lt;/p&gt;
&lt;h3&gt;好例子&lt;/h3&gt;
&lt;blockquote readability=&quot;10&quot;&gt;
&lt;p&gt;嗨，杰夫，&lt;/p&gt;
&lt;p&gt;我想给你写个简短的说明来帮个忙。在我们的每周会议中，你的团队在突出他们的进展方面做得非常出色。但是，这使用了一些可用于我的团队来突出他们的时间。如果您可以每周给我的团队多一点时间来完整说明他们的进度报告，我将不胜感激。&lt;/p&gt;
&lt;p&gt;非常感谢，请让我知道如果有什么我可以为你做的！&lt;/p&gt;
&lt;p&gt;敬上，&lt;/p&gt;
&lt;p&gt;菲尔&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这封电子邮件礼貌友善，在办公室传播不良感受的机会很少。&lt;/p&gt;
&lt;p&gt;我们所有人每天都在交流。 我们沟通的越好，我们对客户，老板和同事的信誉就越高。&lt;br/&gt;使用7 Cs沟通作为您所有沟通的检查清单。 通过这样做，你会保持明确，简洁，具体，正确，一致，完整和有礼貌。&lt;/p&gt;
</description>
<pubDate>Sat, 02 Dec 2017 14:40:00 +0000</pubDate>
<dc:creator>奶爸码农</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/wdsunny/p/7955978.html</dc:identifier>
</item>
<item>
<title>Python带参数的装饰器 - gregory2017</title>
<link>http://www.cnblogs.com/gregoryli/p/7955897.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/gregoryli/p/7955897.html</guid>
<description>&lt;h4 id=&quot;&quot;&gt;在装饰器函数里传入参数&lt;/h4&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;47&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt; -*- coding: utf-8 -*-&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt; 2017/12/2 21:38&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt; 这不是什么黑魔法,你只需要让包装器传递参数:&lt;/span&gt;
&lt;span&gt;def&lt;/span&gt;&lt;span&gt; a_decorator_passing_arguments(function_to_decorate):
    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; a_wrapper_accepting_arguments(arg1, arg2):
        &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;I got args! Look:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, arg1, arg2)
        function_to_decorate(arg1, arg2)
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; a_wrapper_accepting_arguments

&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 当你调用装饰器返回的函数时,也就调用了包装器,把参数传入包装器里,&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt; 它将把参数传递给被装饰的函数里.&lt;/span&gt;
&lt;span&gt;
@a_decorator_passing_arguments
&lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; print_full_name(first_name, last_name):
    &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;My name is&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, first_name, last_name)

print_full_name(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Peter&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Venkman&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 输出:&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt;I got args! Look: Peter Venkman&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt;My name is Peter Venkman&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在Python里方法和函数几乎一样.唯一的区别就是方法的第一个参数是一个当前对象的(&lt;code&gt;self&lt;/code&gt;)&lt;/p&gt;
&lt;p&gt;也就是说你可以用同样的方式来装饰方法!只要记得把&lt;code&gt;self&lt;/code&gt;加进去:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;def&lt;/span&gt;&lt;span&gt; method_friendly_decorator(method_to_decorate):
    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; wrapper(self, lie):
        lie &lt;/span&gt;= lie - 3 &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 女性福音 :-)&lt;/span&gt;
        &lt;span&gt;return&lt;/span&gt;&lt;span&gt; method_to_decorate(self, lie)
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; wrapper

&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Lucy(object):
    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;__init__&lt;/span&gt;&lt;span&gt;(self):
        self.age &lt;/span&gt;= 32&lt;span&gt;

    @method_friendly_decorator
    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; sayYourAge(self, lie):
        &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;I am %s, what did you think?&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; % (self.age +&lt;span&gt; lie))

l &lt;/span&gt;=&lt;span&gt; Lucy()
l.sayYourAge(&lt;/span&gt;-3&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;输出: I am 26, what did you think?&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果你想造一个更通用的可以同时满足方法和函数的装饰器,用&lt;code&gt;*args,**kwargs&lt;/code&gt;就可以了&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;66&quot;&gt;
&lt;pre&gt;
&lt;span&gt;def&lt;/span&gt;&lt;span&gt; a_decorator_passing_arbitrary_arguments(function_to_decorate):
    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 包装器接受所有参数&lt;/span&gt;
    &lt;span&gt;def&lt;/span&gt; a_wrapper_accepting_arbitrary_arguments(*args, **&lt;span&gt;kwargs):
        &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Do I have args?:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
        &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(args)
        &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(kwargs)
        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 现在把*args,**kwargs解包&lt;/span&gt;
        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 如果你不明白什么是解包的话,请查阅:&lt;/span&gt;
        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; http://www.saltycrane.com/blog/2008/01/how-to-use-args-and-kwargs-in-python/&lt;/span&gt;
        function_to_decorate(*args, **&lt;span&gt;kwargs)
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; a_wrapper_accepting_arbitrary_arguments

@a_decorator_passing_arbitrary_arguments
&lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; function_with_no_argument():
    &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Python is cool, no argument here.&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)

function_with_no_argument()
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;输出&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt;Do I have args?:&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt;{}&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt;Python is cool, no argument here.&lt;/span&gt;
&lt;span&gt;
@a_decorator_passing_arbitrary_arguments
&lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; function_with_arguments(a, b, c):
    &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(a, b, c)

function_with_arguments(&lt;/span&gt;1,2,3&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;输出&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt;Do I have args?:&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt;(1, 2, 3)&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt;{}&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt;1 2 3&lt;/span&gt;
&lt;span&gt;
@a_decorator_passing_arbitrary_arguments
&lt;/span&gt;&lt;span&gt;def&lt;/span&gt; function_with_named_arguments(a, b, c, platypus=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Why not ?&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;):
    &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Do %s, %s and %s like platypus? %s&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; %&lt;span&gt;(a, b, c, platypus))

function_with_named_arguments(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Bill&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Linus&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Steve&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, platypus=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Indeed!&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;输出&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt;Do I have args ? :&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt;('Bill', 'Linus', 'Steve')&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt;{'platypus': 'Indeed!'}&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt;Do Bill, Linus and Steve like platypus? Indeed!&lt;/span&gt;

&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Mary(object):
    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;__init__&lt;/span&gt;&lt;span&gt;(self):
        self.age &lt;/span&gt;= 31&lt;span&gt;

    @a_decorator_passing_arbitrary_arguments
    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt; sayYourAge(self, lie=-3): &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 可以加入一个默认值&lt;/span&gt;
        &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;I am %s, what did you think ?&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; % (self.age +&lt;span&gt; lie))

m &lt;/span&gt;=&lt;span&gt; Mary()
m.sayYourAge()
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;输出&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt; Do I have args?:&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt;(&amp;lt;__main__.Mary object at 0xb7d303ac&amp;gt;,)&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt;{}&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt;I am 28, what did you think?&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;&quot;&gt;把参数传递给装饰器&lt;/h3&gt;
&lt;p&gt;好了,如何把参数传递给装饰器自己?&lt;/p&gt;
&lt;p&gt;因为装饰器必须接收一个函数当做参数,所以有点麻烦.好吧,你不可以直接把被装饰函数的参数传递给装饰器.&lt;/p&gt;
&lt;p&gt;在我们考虑这个问题时,让我们重新回顾下:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 装饰器就是一个'平常不过'的函数&lt;/span&gt;
&lt;span&gt;def&lt;/span&gt;&lt;span&gt; my_decorator(func):
    &lt;/span&gt;&lt;span&gt;print&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;I am an ordinary function&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
    &lt;span&gt;def&lt;/span&gt;&lt;span&gt; wrapper():
        &lt;/span&gt;&lt;span&gt;print&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;I am function returned by the decorator&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        func()
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; wrapper

&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 因此你可以不用&quot;@&quot;也可以调用他&lt;/span&gt;

&lt;span&gt;def&lt;/span&gt;&lt;span&gt; lazy_function():
    &lt;/span&gt;&lt;span&gt;print&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;zzzzzzzz&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;

decorated_function &lt;/span&gt;=&lt;span&gt; my_decorator(lazy_function)
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;输出: I am an ordinary function&lt;/span&gt;

&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 之所以输出 &quot;I am an ordinary function&quot;是因为你调用了函数,&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt; 并非什么魔法.&lt;/span&gt;
&lt;span&gt;
@my_decorator
&lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; lazy_function():
    &lt;/span&gt;&lt;span&gt;print&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;zzzzzzzz&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;

&lt;span&gt;#&lt;/span&gt;&lt;span&gt;输出: I am an ordinary function&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;看见了吗,和&quot;&lt;code&gt;my_decorator&lt;/code&gt;&quot;一样只是被调用.所以当你用&lt;code&gt;@my_decorator&lt;/code&gt;你只是告诉Python去掉用被变量&lt;code&gt;my_decorator&lt;/code&gt;标记的函数.&lt;/p&gt;
&lt;p&gt;这非常重要!你的标记能直接指向装饰器.&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
&lt;span&gt;def&lt;/span&gt;&lt;span&gt; decorator_maker():

    &lt;/span&gt;&lt;span&gt;print&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;I make decorators! I am executed only once: &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;+&lt;span&gt;\
          &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;when you make me create a decorator.&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;

    &lt;span&gt;def&lt;/span&gt;&lt;span&gt; my_decorator(func):

        &lt;/span&gt;&lt;span&gt;print&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;I am a decorator! I am executed only when you decorate a function.&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;

        &lt;span&gt;def&lt;/span&gt;&lt;span&gt; wrapped():
            &lt;/span&gt;&lt;span&gt;print&lt;/span&gt; (&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;I am the wrapper around the decorated function. &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
                  &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;I am called when you call the decorated function. &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
                  &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;As the wrapper, I return the RESULT of the decorated function.&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; func()

        &lt;/span&gt;&lt;span&gt;print&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;As the decorator, I return the wrapped function.&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;

        &lt;span&gt;return&lt;/span&gt;&lt;span&gt; wrapped

    &lt;/span&gt;&lt;span&gt;print&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;As a decorator maker, I return a decorator&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
    &lt;span&gt;return&lt;/span&gt;&lt;span&gt; my_decorator

&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 让我们建一个装饰器.它只是一个新函数.&lt;/span&gt;
new_decorator =&lt;span&gt; decorator_maker()
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;输出:&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt;I make decorators! I am executed only once: when you make me create a decorator.&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt;As a decorator maker, I return a decorator&lt;/span&gt;

&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 下面来装饰一个函数&lt;/span&gt;

&lt;span&gt;def&lt;/span&gt;&lt;span&gt; decorated_function():
    &lt;/span&gt;&lt;span&gt;print&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;I am the decorated function.&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;

decorated_function &lt;/span&gt;=&lt;span&gt; new_decorator(decorated_function)
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;输出:&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt;I am a decorator! I am executed only when you decorate a function.&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt;As the decorator, I return the wrapped function&lt;/span&gt;

&lt;span&gt;#&lt;/span&gt;&lt;span&gt; Let’s call the function:&lt;/span&gt;
&lt;span&gt;decorated_function()
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;输出:&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt;I am the wrapper around the decorated function. I am called when you call the decorated function.&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt;As the wrapper, I return the RESULT of the decorated function.&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt;I am the decorated function.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;下面让我们去掉所有可恶的中间变量:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;def&lt;/span&gt;&lt;span&gt; decorated_function():
    &lt;/span&gt;&lt;span&gt;print&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;I am the decorated function.&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
decorated_function &lt;/span&gt;=&lt;span&gt; decorator_maker()(decorated_function)
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;输出:&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt;I make decorators! I am executed only once: when you make me create a decorator.&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt;As a decorator maker, I return a decorator&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt;I am a decorator! I am executed only when you decorate a function.&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt;As the decorator, I return the wrapped function.&lt;/span&gt;

&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 最后:&lt;/span&gt;
&lt;span&gt;decorated_function()
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;输出:&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt;I am the wrapper around the decorated function. I am called when you call the decorated function.&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt;As the wrapper, I return the RESULT of the decorated function.&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt;I am the decorated function.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;让我们简化一下:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;@decorator_maker()
&lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; decorated_function():
    &lt;/span&gt;&lt;span&gt;print&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;I am the decorated function.&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt;输出:&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt;I make decorators! I am executed only once: when you make me create a decorator.&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt;As a decorator maker, I return a decorator&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt;I am a decorator! I am executed only when you decorate a function.&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt;As the decorator, I return the wrapped function.&lt;/span&gt;

&lt;span&gt;#&lt;/span&gt;&lt;span&gt;最终:&lt;/span&gt;
&lt;span&gt;decorated_function()
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;输出:&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt;I am the wrapper around the decorated function. I am called when you call the decorated function.&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt;As the wrapper, I return the RESULT of the decorated function.&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt;I am the decorated function.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;看到了吗?我们用一个函数调用&quot;&lt;code&gt;@&lt;/code&gt;&quot;语法!:-)&lt;/p&gt;
&lt;p&gt;所以让我们回到装饰器的.如果我们在函数运行过程中动态生成装饰器,我们是不是可以把参数传递给函数?&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;49&quot;&gt;
&lt;pre&gt;
&lt;span&gt;def&lt;/span&gt;&lt;span&gt; decorator_maker_with_arguments(decorator_arg1, decorator_arg2):
    &lt;/span&gt;&lt;span&gt;print&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;I make decorators! And I accept arguments:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, decorator_arg1, decorator_arg2
    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; my_decorator(func):
        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 这里传递参数的能力是借鉴了 closures.&lt;/span&gt;
        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 如果对closures感到困惑可以看看下面这个:&lt;/span&gt;
        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; http://stackoverflow.com/questions/13857/can-you-explain-closures-as-they-relate-to-python&lt;/span&gt;
        &lt;span&gt;print&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;I am the decorator. Somehow you passed me arguments:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, decorator_arg1, decorator_arg2
        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 不要忘了装饰器参数和函数参数!&lt;/span&gt;
        &lt;span&gt;def&lt;/span&gt;&lt;span&gt; wrapped(function_arg1, function_arg2) :
            &lt;/span&gt;&lt;span&gt;print&lt;/span&gt; (&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;I am the wrapper around the decorated function.\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
                  &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;I can access all the variables\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
                  &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;\t- from the decorator: {0} {1}\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
                  &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;\t- from the function call: {2} {3}\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
                  &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Then I can pass them to the decorated function&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
                  .format(decorator_arg1, decorator_arg2,
                          function_arg1, function_arg2))
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; func(function_arg1, function_arg2)
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; wrapped
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; my_decorator

@decorator_maker_with_arguments(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Leonard&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Sheldon&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; decorated_function_with_arguments(function_arg1, function_arg2):
    &lt;/span&gt;&lt;span&gt;print&lt;/span&gt; (&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;I am the decorated function and only knows about my arguments: {0}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
           &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; {1}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;.format(function_arg1, function_arg2))

decorated_function_with_arguments(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Rajesh&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Howard&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;输出:&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt;I make decorators! And I accept arguments: Leonard Sheldon&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt;I am the decorator. Somehow you passed me arguments: Leonard Sheldon&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt;I am the wrapper around the decorated function.&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt;I can access all the variables&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt;   - from the decorator: Leonard Sheldon&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt;   - from the function call: Rajesh Howard&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt;Then I can pass them to the decorated function&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt;I am the decorated function and only knows about my arguments: Rajesh Howard&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上面就是带参数的装饰器.参数可以设置成变量:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
c1 = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Penny&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
c2 &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Leslie&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;

@decorator_maker_with_arguments(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Leonard&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, c1)
&lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; decorated_function_with_arguments(function_arg1, function_arg2):
    &lt;/span&gt;&lt;span&gt;print&lt;/span&gt; (&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;I am the decorated function and only knows about my arguments:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
           &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; {0} {1}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;.format(function_arg1, function_arg2))

decorated_function_with_arguments(c2, &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Howard&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;输出:&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt;I make decorators! And I accept arguments: Leonard Penny&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt;I am the decorator. Somehow you passed me arguments: Leonard Penny&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt;I am the wrapper around the decorated function.&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt;I can access all the variables&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt;   - from the decorator: Leonard Penny&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt;   - from the function call: Leslie Howard&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt;Then I can pass them to the decorated function&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt;I am the decorated function and only knows about my arguments: Leslie Howard&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;你可以用这个小技巧把任何函数的参数传递给装饰器.如果你愿意还可以用&lt;code&gt;*args,**kwargs&lt;/code&gt;.但是一定要记住了&lt;strong&gt;装饰器只能被调用一次&lt;/strong&gt;.当Python载入脚本后,你不可以动态的设置参数了.当你运行&lt;code&gt;import x&lt;/code&gt;,函数已经被装饰,所以你什么都不能动了.&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;code&gt;functools&lt;/code&gt;模块在2.5被引进.它包含了一个&lt;code&gt;functools.wraps()&lt;/code&gt;函数,可以复制装饰器函数的名字,模块和文档给它的包装器.&lt;/span&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;span&gt;如何为被装饰的函数保存元数据&lt;/span&gt;&lt;br/&gt;&lt;span&gt;解决方案:&lt;/span&gt;&lt;br/&gt;&lt;span&gt;使用标准库functools中的装饰器wraps 装饰内部包裹函数,&lt;/span&gt;&lt;br/&gt;&lt;span&gt;可以 制定将原函数的某些属性，更新到包裹函数的上面&lt;/span&gt;&lt;br/&gt;&lt;span&gt;其实也可以通过&lt;/span&gt;&lt;br/&gt;&lt;span&gt;wrapper.name = func.name&lt;/span&gt;&lt;br/&gt;&lt;span&gt;update_wrapper(wrapper, func, (‘name‘,’doc‘), (‘dict‘,))&lt;/span&gt;&lt;br/&gt;&lt;span&gt;f.__name__ 函数的名字&lt;/span&gt;&lt;br/&gt;&lt;span&gt;f.__doc__ 函数文档字符串&lt;/span&gt;&lt;br/&gt;&lt;span&gt;f.__module__ 函数所属模块名称&lt;/span&gt;&lt;br/&gt;&lt;span&gt;f.__dict__ 函数的属性字典&lt;/span&gt;&lt;br/&gt;&lt;span&gt;f.__defaults__ 默认参数元组&lt;/span&gt;&lt;br/&gt;&lt;span&gt;f.__closure__ 函数闭包&lt;/span&gt;
&lt;/pre&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&amp;gt;&amp;gt;&amp;gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; f():
...     a&lt;/span&gt;=2&lt;span&gt;
...     &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;lambda&lt;/span&gt; k:a**&lt;span&gt;k
...
&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; g=&lt;span&gt;f()
&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; g.&lt;span&gt;__closure__&lt;/span&gt;&lt;span&gt;
(&lt;/span&gt;&amp;lt;cell at 0x000001888D17F2E8: int object at 0x0000000055F4C6D0&amp;gt;&lt;span&gt;,)
&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; c=g.&lt;span&gt;__closure__&lt;/span&gt;&lt;span&gt;[0]
&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt;&lt;span&gt; c.cell_contents
&lt;/span&gt;2
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
&lt;span&gt;from&lt;/span&gt; functools &lt;span&gt;import&lt;/span&gt;&lt;span&gt; wraps,update_wrapper
&lt;/span&gt;&lt;span&gt;def&lt;/span&gt; log(level=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;low&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;):
    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; deco(func):
        @wraps(func)
        &lt;/span&gt;&lt;span&gt;def&lt;/span&gt; wrapper(*args,**&lt;span&gt;kwargs):
            &lt;/span&gt;&lt;span&gt;'''&lt;/span&gt;&lt;span&gt; I am wrapper function&lt;/span&gt;&lt;span&gt;'''&lt;/span&gt;
            &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;log was in...&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; level == &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;low&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;:
                &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;detailes was needed&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; func(*args,**&lt;span&gt;kwargs)
        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;wrapper.__name__ = func.__name__&lt;/span&gt;
        &lt;span&gt;#&lt;/span&gt;&lt;span&gt;update_wrapper(wrapper, func, ('__name__','__doc__'), ('__dict__',))&lt;/span&gt;
        &lt;span&gt;return&lt;/span&gt;&lt;span&gt; wrapper
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; deco

@log()
&lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; myFunc():
    &lt;/span&gt;&lt;span&gt;'''&lt;/span&gt;&lt;span&gt;I am myFunc...&lt;/span&gt;&lt;span&gt;'''&lt;/span&gt;
    &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;myFunc was called&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)

&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(myFunc.&lt;span&gt;__name__&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(myFunc.&lt;span&gt;__doc__&lt;/span&gt;&lt;span&gt;)
myFunc()


&lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;
myFunc
I am myFunc...
log was in...
detailes was needed
myFunc was called
&lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如何定义带参数的装饰器&lt;br/&gt;实现一个装饰器，它用来检查被装饰函数的参数类型，装饰器可以通过参数指明函数参数的类型，&lt;br/&gt;调用时如果检测出类型不匹配则抛出异常。&lt;br/&gt;提取函数签名python3 inspect.signature()&lt;br/&gt;带参数的装饰器，也就是根据参数定制化一个装饰器可以看生成器的工厂&lt;br/&gt;每次调用typeassert，返回一个特定的装饰器，然后用它去装饰其他函数&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;93&quot;&gt;
&lt;pre&gt;
&amp;gt;&amp;gt;&amp;gt; &lt;span&gt;from&lt;/span&gt; inspect &lt;span&gt;import&lt;/span&gt;&lt;span&gt; signature
&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; &lt;span&gt;def&lt;/span&gt; f(a,b,c=1):&lt;span&gt;pass&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; sig=&lt;span&gt;signature(f)
&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt;&lt;span&gt; sig.parameters
mappingproxy(OrderedDict([(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &amp;lt;Parameter &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;), (&lt;span&gt;'&lt;/span&gt;&lt;span&gt;b&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &amp;lt;Parameter &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;b&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;), (&lt;span&gt;'&lt;/span&gt;&lt;span&gt;c&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &amp;lt;Parameter &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;c=1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;)]))
&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; a=sig.parameters[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]
&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt;&lt;span&gt; a.name
&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt;&lt;span&gt; a
&lt;/span&gt;&amp;lt;Parameter &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&amp;gt;&amp;gt;&amp;gt;&lt;span&gt; dir(a)
[&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;KEYWORD_ONLY&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;POSITIONAL_ONLY&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;POSITIONAL_OR_KEYWORD&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;VAR_KEYWORD&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;VAR_POSITIONAL&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__class__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__delattr__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__dir__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__doc__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__eq__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__format__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__ge__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__getattribute__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__gt__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__hash__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__init__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__init_subclass__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__le__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__lt__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__module__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__ne__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__new__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__reduce__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__reduce_ex__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__repr__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__setattr__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__setstate__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__sizeof__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__slots__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__str__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__subclasshook__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;_annotation&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;_default&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;_kind&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;_name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;annotation&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;default&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;empty&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;kind&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;replace&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]
&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt;&lt;span&gt; a.kind
&lt;/span&gt;&amp;lt;_ParameterKind.POSITIONAL_OR_KEYWORD: 1&amp;gt;
&amp;gt;&amp;gt;&amp;gt;&lt;span&gt; a.default
&lt;/span&gt;&amp;lt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;inspect._empty&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&amp;gt;
&amp;gt;&amp;gt;&amp;gt; c=sig.parameters[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;c&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]
&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt;&lt;span&gt; c.default
&lt;/span&gt;1
&amp;gt;&amp;gt;&amp;gt;&lt;span&gt; sig.bind(str,int,int)
&lt;/span&gt;&amp;lt;BoundArguments (a=&amp;lt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;str&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&amp;gt;, b=&amp;lt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&amp;gt;, c=&amp;lt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&amp;gt;)&amp;gt;
&amp;gt;&amp;gt;&amp;gt; bargs=&lt;span&gt;sig.bind(str,int,int)
&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt;&lt;span&gt; bargs.arguments
OrderedDict([(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &amp;lt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;str&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&amp;gt;), (&lt;span&gt;'&lt;/span&gt;&lt;span&gt;b&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &amp;lt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&amp;gt;), (&lt;span&gt;'&lt;/span&gt;&lt;span&gt;c&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &amp;lt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&amp;gt;&lt;span&gt;)])
&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; bargs.arguments[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]
&lt;/span&gt;&amp;lt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;str&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&amp;gt;
&amp;gt;&amp;gt;&amp;gt; bargs.arguments[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;b&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]
&lt;/span&gt;&amp;lt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;61&quot;&gt;
&lt;pre&gt;
&lt;span&gt;from&lt;/span&gt; inspect &lt;span&gt;import&lt;/span&gt;&lt;span&gt; signature
&lt;/span&gt;&lt;span&gt;def&lt;/span&gt; typeassert(*ty_args,**&lt;span&gt;ty_kargs):
    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; decorator(func):
        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;func -&amp;gt;a,b&lt;/span&gt;
        &lt;span&gt;#&lt;/span&gt;&lt;span&gt;d = {'a':int,'b':str}&lt;/span&gt;
        sig =&lt;span&gt; signature(func)
        btypes &lt;/span&gt;= sig.bind_partial(*ty_args,**&lt;span&gt;ty_kargs).arguments
        &lt;/span&gt;&lt;span&gt;def&lt;/span&gt; wrapper(*args,**&lt;span&gt;kargs):
            &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;arg in d,instance(arg,d[arg])&lt;/span&gt;
            &lt;span&gt;for&lt;/span&gt; name, obj &lt;span&gt;in&lt;/span&gt; sig.bind(*args,**&lt;span&gt;kargs).arguments.items():
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; name &lt;span&gt;in&lt;/span&gt;&lt;span&gt; btypes:
                    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; &lt;span&gt;not&lt;/span&gt;&lt;span&gt; isinstance(obj,btypes[name]):
                        &lt;/span&gt;&lt;span&gt;raise&lt;/span&gt; TypeError(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;&quot;%s&quot; must be &quot;%s&quot;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; %&lt;span&gt;(name,btypes[name]))
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; func(*args,**&lt;span&gt;kargs)
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; wrapper
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; decorator

@typeassert(int,str,list)
&lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; f(a,b,c):
    &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(a,b,c)

f(&lt;/span&gt;1,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;abc&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,[1,2,3&lt;span&gt;])
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; f(1,2,[1,2,3])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如何实现属性可修改的函数装饰器&lt;br/&gt;为分析程序内哪些函数执行时间开销较大，我们定义一个带timeout参数的函数装饰器，装饰功能如下：&lt;br/&gt;1.统计被装饰函数单词调用运行时间&lt;br/&gt;2.时间大于参数timeout的，将此次函数调用记录到log日志中&lt;br/&gt;3.运行时可修改timeout的值。&lt;br/&gt;解决方案:&lt;br/&gt;python3 nolocal&lt;br/&gt;为包裹函数添加一个函数，用来修改闭包中使用的自由变量.&lt;br/&gt;python中，使用nonlocal访问嵌套作用域中的变量引用,或者在python2中列表方式,这样就不会在函数本地新建一个局部变量&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;from&lt;/span&gt; functools &lt;span&gt;import&lt;/span&gt;&lt;span&gt; wraps
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; time
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; logging
&lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; warn(timeout):
    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; timeout = [timeout]&lt;/span&gt;
    &lt;span&gt;def&lt;/span&gt;&lt;span&gt; deco(func):
        &lt;/span&gt;&lt;span&gt;def&lt;/span&gt; wrapper(*args,**&lt;span&gt;kwargs):
            start &lt;/span&gt;=&lt;span&gt; time.time()
            res &lt;/span&gt;= func(*args,**&lt;span&gt;kwargs)
            used &lt;/span&gt;= time.time() -&lt;span&gt;start
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; used &amp;gt;&lt;span&gt; timeout:
                msg &lt;/span&gt;= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;&quot;%s&quot; : %s &amp;gt; %s&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;%(func.&lt;span&gt;__name__&lt;/span&gt;&lt;span&gt;,used,timeout)
                logging.warn(msg)
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; res

        &lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; setTimeout(k):
            nonlocal timeout
            &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; timeout[0] = k&lt;/span&gt;
            timeout=&lt;span&gt;k
        &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;timeout was given....&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
        wrapper.setTimeout &lt;/span&gt;=&lt;span&gt; setTimeout
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; wrapper
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; deco

&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; random &lt;span&gt;import&lt;/span&gt;&lt;span&gt; randint
@warn(&lt;/span&gt;1.5&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; test():
    &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;in test...&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;while&lt;/span&gt; randint(0,1&lt;span&gt;):
        time.sleep(&lt;/span&gt;0.5&lt;span&gt;)

&lt;/span&gt;&lt;span&gt;for&lt;/span&gt; _ &lt;span&gt;in&lt;/span&gt; range(30&lt;span&gt;):
    test()

test.setTimeout(&lt;/span&gt;1&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;after set to 1....&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;for&lt;/span&gt; _ &lt;span&gt;in&lt;/span&gt; range(30&lt;span&gt;):
    test()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;小练习：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt;为了debug,堆栈跟踪将会返回函数的 __name__&lt;/span&gt;
&lt;span&gt;def&lt;/span&gt;&lt;span&gt; foo():
    &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;foo&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)

&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(foo.&lt;span&gt;__name__&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;输出: foo&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt;#######################################&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt; 如果加上装饰器,将变得有点复杂&lt;/span&gt;
&lt;span&gt;def&lt;/span&gt;&lt;span&gt; bar(func):
    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; wrapper():
        &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;bar&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; func()
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; wrapper

@bar
&lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; foo():
    &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;foo&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)

&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(foo.&lt;span&gt;__name__&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;输出: wrapper&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt;######################################&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt; &quot;functools&quot; 将有所帮助&lt;/span&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; functools

&lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; bar(func):
    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 我们所说的&quot;wrapper&quot;,正在包装 &quot;func&quot;,&lt;/span&gt;
    &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 好戏开始了&lt;/span&gt;
&lt;span&gt;    @functools.wraps(func)
    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; wrapper():
        &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;bar&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; func()
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; wrapper

@bar
&lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; foo():
    &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;foo&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)

&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(foo.&lt;span&gt;__name__&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;输出: foo&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

</description>
<pubDate>Sat, 02 Dec 2017 14:16:00 +0000</pubDate>
<dc:creator>gregory2017</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/gregoryli/p/7955897.html</dc:identifier>
</item>
<item>
<title>.Net Core 2.0 EntityFrameworkCore CodeFirst入门教程 - 雲霏霏</title>
<link>http://www.cnblogs.com/yunfeifei/p/7955625.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/yunfeifei/p/7955625.html</guid>
<description>&lt;p&gt;最近难得有时间闲下来，研究了一下.net core 2.0,总的来说，目前除了一些第三方的库不支持外，基本上可以满足我们的项目需求了！&lt;/p&gt;
&lt;p&gt;我们就以一个网站开发为例，搭建一个简单的三层架构，先熟悉一下.net core 2.0的开发流程！&lt;/p&gt;

&lt;p&gt;&lt;strong&gt; 一 、搭建项目框架&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;首先，我们新建项目，如图：&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/622439/201712/622439-20171202210731413-1433560770.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/622439/201712/622439-20171202210755726-12756725.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;然后，我们分别添加.net core类库项目，NetCoreDemo.Repository（数据访问层）和NetCoreDemo.Service（服务层），项目结构如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/622439/201712/622439-20171202211122819-1282763957.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt; 二 、初始化数据库&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;项目中， NetCoreDemo.Repository相当于三层中的DAL层，主要是与数据库交互！为了实现web项目和数据库解耦，方便将来更好数据库，我们在NetCoreDemo.Repository中安装EntiryFrameWorkCore，这里我们以SQL Server为例，安装下面两个安装包，在程序包管理控制台执行以下命名或者用Nuget包管理器安装均可：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
Install-&lt;span&gt;package Microsoft.EntityFrameworkCore
Install&lt;/span&gt;-package Microsoft.EntityFrameworkCore.SqlServer
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后，我们新建DbContext类，如MyDbContext，继承自DbContext，代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;using&lt;/span&gt;&lt;span&gt; Microsoft.EntityFrameworkCore;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.ComponentModel.DataAnnotations;

&lt;/span&gt;&lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; NetCoreDemo.Repository
{
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; MyDbContext : DbContext
    {
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; MyDbContext(DbContextOptions&amp;lt;MyDbContext&amp;gt;&lt;span&gt; options)
            : &lt;/span&gt;&lt;span&gt;base&lt;/span&gt;&lt;span&gt;(options)
        {
        }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; DbSet&amp;lt;User&amp;gt; Uesrs { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
    }&lt;/span&gt;&lt;span&gt;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这里，我们新建一个User类作为测试，代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; User
{
     [Key]
     &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; Id { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
     &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; UserName { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
     &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; Password { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 现在，DbContext建好了，下面我们连接数据库，还差一个数据库连接字符串，这个连接字符串我们通常是放在webconfig中的，那么.net core中应该放到哪里呢？&lt;/p&gt;
&lt;p&gt;我们来到web项目下，看到有一个appsettings.json，里面内容如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;{
  &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Logging&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: {
    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;IncludeScopes&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;false&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;LogLevel&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: {
      &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Default&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Warning&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
    }
  }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;我们就把数据库连接字符串放到这里吧，改完后，其内容如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;{
  &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Logging&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: {
    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;IncludeScopes&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;false&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;LogLevel&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: {
      &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Default&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Warning&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
    }
  },
  &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ConnectionStrings&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: {
    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;SqlServer&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Data Source=.;Initial Catalog=netcore;User Id=sa;Password=123456;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
  } 
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;既然我们是Code First,下面准备创建数据库，生成表，执行Migration！&lt;/p&gt;
&lt;p&gt;我们修改Startup.cs,修改ConfigureServices方法如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; ConfigureServices(IServiceCollection services)
        {
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; connection = Configuration.GetConnectionString(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;SqlServer&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            services.AddDbContext&lt;/span&gt;&amp;lt;MyDbContext&amp;gt;(options =&amp;gt;&lt;span&gt;
                options.UseSqlServer(connection, b &lt;/span&gt;=&amp;gt; b.MigrationsAssembly(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;NetCoreDemo&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)));
            services.AddMvc();
        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这里需要注意的是，我们通过Configuration方法读取appsetting.json中的连接字符串，然后调用AddDbContext方法，把连接字符串传进去，这里要设置MigrationsAssembly为当前web项目，（这里大家可以试一下不设置这个，会报一个错误），这是因为我们执行Migration是在web项目下，下面我们打开DOS窗口，开始 -&amp;gt; 运行 -&amp;gt; CMD,定位到web项目根目录下，执行如下命令：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
dotnet ef migrations add v1
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这里，我们看到出现了错误，如图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/622439/201712/622439-20171202214324351-545900426.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这里，我们修改项目文件，在项目上面右键，打开项目文件，如图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/622439/201712/622439-20171202214358944-2107566046.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;在里面添加如下代码（任意位置均可）：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
  &amp;lt;ItemGroup&amp;gt;
    &amp;lt;DotNetCliToolReference Include=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Microsoft.EntityFrameworkCore.Tools.DotNet&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; Version=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;2.0.1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; /&amp;gt;
  &amp;lt;/ItemGroup&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;加完后，如图：&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/622439/201712/622439-20171202214803694-355413484.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;然后，我们再次执行命令：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
dotnet ef migrations add v1
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果出现Build faild的错误，重新生成一下项目，然后再次执行，执行成功后，如图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/622439/201712/622439-20171202215500272-929654715.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这一步成功了，也就意味着，我们后面的路会很顺利了，下面我们更新到数据库，执行命令：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
dotnet ef database update
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;等待一小会儿，执行成功后，我们会发现数据库中已经生成了我们的数据库和表了，这里我就不截图了，上传图片实在是太慢了~~&lt;/p&gt;

&lt;p&gt;&lt;strong&gt; 三 、后续工作&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; 上面，我们已经完成了数据库的创建，后面就可以开开心心的写代码了~~&lt;/p&gt;

&lt;div readability=&quot;12.757763975155&quot;&gt;
&lt;p&gt; 作者：&lt;a href=&quot;http://www.cnblogs.com/yunfeifei/&quot;&gt;雲霏霏&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;QQ交流群：243633526&lt;/p&gt;
&lt;p&gt; 博客地址：http://www.cnblogs.com/yunfeifei/&lt;/p&gt;
&lt;p&gt; 声明：本博客原创文字只代表本人工作中在某一时间内总结的观点或结论，与本人所在单位没有直接利益关系。非商业，未授权，贴子请以现状保留，转载时必须保留此段声明，且在文章页面明显位置给出原文连接。&lt;/p&gt;
&lt;p&gt;如果大家感觉我的博文对大家有帮助，请推荐支持一把，给我写作的动力。&lt;/p&gt;
&lt;/div&gt;

</description>
<pubDate>Sat, 02 Dec 2017 14:01:00 +0000</pubDate>
<dc:creator>雲霏霏</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/yunfeifei/p/7955625.html</dc:identifier>
</item>
<item>
<title>【正则表达式】--python（表示字符） - 凡_仁</title>
<link>http://www.cnblogs.com/123fantao/p/7955693.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/123fantao/p/7955693.html</guid>
<description>[unable to retrieve full-text content]【前修知识】 match :匹配 span:范围 match 是从头往后开始匹配，search不按照顺序，直接获取自己想要的，有就显示，没有就None r 代表反转义，前面也提到过这个知识，如果我们在获取东西的过程中，都不需要反转义的东西，往前就加个r就行，如果是有特殊含义的就给反转义，没有特殊含义</description>
<pubDate>Sat, 02 Dec 2017 13:25:00 +0000</pubDate>
<dc:creator>凡_仁</dc:creator>
<dc:identifier>http://www.cnblogs.com/123fantao/p/7955693.html</dc:identifier>
</item>
<item>
<title>实现基于Haproxy+Keepalived负载均衡高可用架构 - 大天使彦</title>
<link>http://www.cnblogs.com/1477717815fuming/p/7955634.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/1477717815fuming/p/7955634.html</guid>
<description>&lt;p&gt;&lt;span&gt;1.项目介绍：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;上上期我们实现了keepalived主从高可用集群网站架构，随着公司业务的发展，公司负载均衡服务已经实现四层负载均衡，但业务的复杂程度提升，公司要求把mobile手机站点作为单独的服务提供，不在和pc站点一起提供服务，此时需要做7层规则负载均衡，运维总监要求，能否用一种服务同既能实现七层负载均衡，又能实现四层负载均衡，并且性能高效，配置管理容易，而且还是开源。&lt;/p&gt;
&lt;h2&gt;&lt;span&gt;四层和七层负载均衡的区别：&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;四层：&lt;/p&gt;
&lt;p&gt;通过分析IP层及TCP/UDP层的流量实现的基于&quot;IP+端口&quot;的负载均衡。&lt;/p&gt;
&lt;p&gt;七层：&lt;/p&gt;
&lt;p&gt;可以根据内容，再配合负载均衡算法来选择后端服务器，不但可以根据&quot;ip+端口&quot;方式进行负载分流，还可以根据&lt;span&gt;&lt;strong&gt;网站的URL，访问域名，浏览器类别，语言等决定负载均衡的策略。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;七层负载均衡模式下，负载均衡与客户端及后端的服务器会分别建立一次TCP连接，而在四层负载均衡模式下(DR)，仅建立一次TCP连接；七层负载均衡对负载均衡设备的要求更高，处理能力也低于四层负载均衡。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;在企业生产环境中，每天会有很多的需求变更，比如增加服务器、新业务上线、url路由修改、域名配置等等，对于前端负载均衡设备来说，容易维护，复杂度低，是首选指标。在企业中，稳定压倒一切，与其搞得很复杂，经常出问题，不如做的简单和稳定。&lt;/p&gt;
&lt;p&gt;在企业中，&lt;span&gt;&lt;strong&gt;90%以上的故障，来源于需求变更。&lt;/strong&gt;&lt;/span&gt;可能是程序bug，也可能是人为故障，也可能是架构设计问题等等。&lt;/p&gt;
&lt;p&gt;前端负载均衡设备为重中之重，在软件选型上一定充分考虑，能满足业务的前提下，尽可能降低复杂度，提高易维护性。&lt;/p&gt;



&lt;p&gt;HAProxy是一个使用C语言编写的自由及开放源代码软件，其提供高性能性、负载均衡，以及基于TCP和HTTP的应用程序代理。相较与 Nginx，HAProxy 更专注与反向代理，因此它可以支持更多的选项，更精细的控制，更多的健康状态检测机制和负载均衡算法。&lt;/p&gt;
&lt;p&gt;HAProxy特别适用于那些负载特大的web站点，这些站点通常又需要会话保持或七层处理。HAProxy运行在当前的硬件上，完全可以支持数以万计的并发连接。并且它的运行模式使得它可以很简单安全的整合进您当前的架构中， 同时可以保护你的web服务器不被暴露到网络上。&lt;/p&gt;
&lt;p&gt;包括 GitHub、Bitbucket、Stack Overflow、Reddit、Tumblr、Twitter在内众多知名网站，及亚马逊网络服务系统都使用了HAProxy。&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;1、可靠性与稳定性都非常出色，可与硬件级设备媲美。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;2、支持连接拒绝，可以用于防止DDoS攻击&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;3、支持长连接、短连接和日志功能，可根据需要灵活配置&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;4、路由HTTP请求到后端服务器,基于cookie作会话绑定；同时支持通过获取指定&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;的url来检测后端服务器的状态&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;5、HAProxy还拥有功能强大的ACL支持，可灵活配置路由功能，实现动静分离，&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;在架构设计与实现上带来很大方便&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;6、可支持四层和七层负载均衡，几乎能为所有常见的服务提供负载均衡功能&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;7、拥有功能强大的后端服务器的状态监控web页面，可以实时了解设备的运行状态，还可实现设备上下线等简单操作。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;8、支持多种负载均衡调度算法，并且也支持session保持&lt;/strong&gt;&lt;/span&gt;。&lt;/p&gt;



&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1235933/201712/1235933-20171202210920397-536074646.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span&gt;一、环境准备：&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;centos系统服务器4台、两台用于做haproxy主从架构，两台作为后端server，服务器配置好&lt;/p&gt;
&lt;p&gt;yum源、防火墙关闭、各节点时钟服务同步、各节点之间可以通过主机名互相通信&lt;/p&gt;

&lt;div&gt;
&lt;table border=&quot;0&quot;&gt;&lt;colgroup&gt;&lt;col/&gt;&lt;col/&gt;&lt;col/&gt;&lt;col/&gt;&lt;/colgroup&gt;&lt;tbody valign=&quot;top&quot; readability=&quot;6&quot;&gt;&lt;tr&gt;&lt;td valign=&quot;middle&quot;&gt;
&lt;p&gt;机器名称&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;middle&quot;&gt;
&lt;p&gt;IP配置&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;middle&quot;&gt;
&lt;p&gt;服务角色&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;middle&quot;&gt;
&lt;p&gt;备注&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td valign=&quot;middle&quot;&gt;
&lt;p&gt;haproxy-server-master&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;middle&quot;&gt;
&lt;p&gt;VIP：172.17.253.100&lt;/p&gt;
&lt;p&gt;DIP：172.17.253.132&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;middle&quot;&gt;
&lt;p&gt;负载均衡器&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;middle&quot;&gt;
&lt;p&gt;开启路由功能&lt;/p&gt;
&lt;p&gt;配置keepalived&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td valign=&quot;middle&quot;&gt;
&lt;p&gt;haproxy-server-master&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;middle&quot;&gt;
&lt;p&gt;VIP：172.17.253.100&lt;/p&gt;
&lt;p&gt;DIP：172.17.252.162&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;middle&quot;&gt;
&lt;p&gt;负载均衡器&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;middle&quot;&gt;
&lt;p&gt;开启路由功能&lt;/p&gt;
&lt;p&gt;配置keepalived&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;middle&quot;&gt;
&lt;p&gt;rs1&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;middle&quot;&gt;
&lt;p&gt;RIP：172.17.251.236&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;middle&quot;&gt;
&lt;p&gt;后端服务器&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;middle&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;网关指向DIP（桥接）&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;middle&quot;&gt;
&lt;p&gt;rs2&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;middle&quot;&gt;
&lt;p&gt;RIP：172.17.251.237&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;middle&quot;&gt;
&lt;p&gt;后端服务器&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;middle&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;网关指向DIP（桥接）&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;

&lt;h2&gt;&lt;span&gt;二、安装步骤：&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;1、iptables -F &amp;amp;&amp;amp; setenforing 清空防火墙策略，关闭selinux&lt;/p&gt;
&lt;p&gt;2、拿两台服务器都使用yum方式安装haproxy、keepalived服务&lt;/p&gt;
&lt;p&gt;3、后端服务器配置好基于LNMP架构的web服务&lt;/p&gt;
&lt;h2&gt;&lt;span&gt;三、修改配置文件:&lt;/span&gt;&lt;/h2&gt;
&lt;h3&gt;&lt;span&gt;1．修改/etc/keepalived/keepalived.conf配置文件内容&lt;/span&gt;&lt;/h3&gt;
&lt;h4&gt;在haproxy-server-master上&lt;/h4&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
&lt;span&gt;vim /etc/keepalived/keepalived.conf

global_defs {

notification_email {

root@localhost

}

notification_email_from root@mingming.com

smtp_server 127.0.0.1

smtp_connect_timeout 30

router_id keepalived_lvs

}

vrrp_instance VI_1 {

state MASTER

interface ens33

virtual_router_id 55

priority 100

advert_int 1

authentication {

auth_type PASS

auth_pass mingming

}

virtual_ipaddress {

172.17.253.100

}

}
&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h4&gt;在haproxy-server-backup上&lt;/h4&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
&lt;span&gt;global_defs {

notification_email {

root@localhost

}

notification_email_from root@mingming.com

smtp_server 127.0.0.1

smtp_connect_timeout 30

router_id keepalived_lvs

}

vrrp_instance VI_1 {

state BACKUP

interface eth1

virtual_router_id 55

priority 98

advert_int 1

authentication {

auth_type PASS

auth_pass mingming

}

virtual_ipaddress {

172.17.253.100

}

}
&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;&lt;span&gt;2.修改主haproxy配置文件主要是listen，frontend和backend段&lt;/span&gt;&lt;/h3&gt;
&lt;h4&gt;在haproxy-server-master上&lt;/h4&gt;
&lt;p&gt;vim /etc/haproxy/haproxy.cfg&lt;/p&gt;
&lt;h4&gt;&lt;span&gt;listsen段&lt;/span&gt;&lt;/h4&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
&lt;span&gt;listen stats

bind 0.0.0.0:1080

stats enable

stats uri /haproxyadmin

stats auth admin:admin

stats admin if TRUE
&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;span&gt;frontend段&lt;/span&gt;&lt;/h4&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
&lt;span&gt;frontend web

bind *:80

default_backend lnmp-server
&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;span&gt;backend段&lt;/span&gt;&lt;/h4&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;34&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
&lt;span&gt;backend lnmp-server

balance roundrobin

option httpchk GET /index.html

server webserver1 172.17.251.236:80 check inter 3000 rise 3 fall 5

server webserver1 172.17.251.237:80 check inter 3000 rise 3 fall 5
&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;在haproxy-server-backup上和在haproxy-server-master上&lt;/span&gt;&lt;span&gt;haproxy配置文件的配置是一样的&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;然后在haproxy-server-master上和在haproxy-server-backup上都开启keepalived和haproxy服务，会发现vip漂移到haproxy-server-backup上（因为haproxy-server-master上keepalived的配置文件中优先级高），而且haproxy-server-master和haproxy-server-backup上haproxy服务都监听了1080端口和80端口&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1235933/201712/1235933-20171202210920882-2100083211.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt;1.客户端先访问一下vip，成功访问小米网站&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1235933/201712/1235933-20171202210921429-1860207479.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;2.在haproxy-server-master上停掉keepalived服务，会发现vip漂移到haproxy-server-backup上，客户端依旧能够访问vip，访问小米网站，实现了高可用&lt;/p&gt;
&lt;p&gt;3.关闭后端一台服务器的web服务，观察haproxy健康状态监测&lt;/p&gt;

&lt;p&gt;&lt;span&gt;4.企业级应用&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;haproxy的ACL用于实现基于请求报文的首部、响应报文的内容或其它的环境状态信息来做出转发决策，这大大增强了其配置弹性。其配置法则通常分为两步，首先去定义ACL，即定义一个测试条件，而后在条件得到满足时执行某特定的动作，如阻止请求或转发至某特定的后端。&lt;/p&gt;
&lt;h2&gt;&lt;span&gt;定义ACL的语法格式如下：&lt;/span&gt;&lt;/h2&gt;
&lt;h2&gt;&lt;span&gt;acl &amp;lt;aclname&amp;gt; &amp;lt;criterion&amp;gt; [flags] [operator] &amp;lt;value&amp;gt; ...&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&amp;lt;aclname&amp;gt;：&lt;/strong&gt;&lt;/span&gt;ACL名称，区分字符大小写，且其只能包含大小写字母、数字、-(连接线)、_(下划线)、.(点号)和:(冒号)；&lt;span&gt;&lt;strong&gt;haproxy中，acl可以重名，这可以把多个测试条件定义为一个共同的acl；&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&amp;lt;criterion&amp;gt;：&lt;/strong&gt;&lt;/span&gt;测试标准，即对什么信息发起测试；测试方式可以由[flags]指定的标志进行调整；而有些测试标准也可以需要为其在&amp;lt;value&amp;gt;之前指定一个操作符[operator]；&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;[flags]：&lt;/strong&gt;&lt;/span&gt;常见haproxy的acl支持的标志位有3个：&lt;/p&gt;
&lt;p&gt;-i：不区分&amp;lt;value&amp;gt;中模式字符的大小写；&lt;/p&gt;
&lt;p&gt;-f：从指定的文件中加载模式；&lt;/p&gt;
&lt;p&gt;--：标志符的强制结束标记，在模式中的字符串像标记符时使用；&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&amp;lt;value&amp;gt;：&lt;/strong&gt;&lt;/span&gt;acl测试条件常见的值有以下四类：&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;整数或整数范围&lt;/strong&gt;&lt;/span&gt;：如1024:65535表示从1024至65535；仅支持使用正整数(如果出现类似小数的标识，其为通常为版本测试)，且支持使用的操作符有5个，分别为eq、ge、gt、le和lt；&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;字符串&lt;/strong&gt;&lt;/span&gt;：支持使用&quot;-i&quot;以忽略字符大小写，支持使用&quot;\&quot;进行转义；如果在模式首部出现了-i，可以在其之前使用&quot;--&quot;标志位；&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;正则表达式&lt;/strong&gt;&lt;/span&gt;：其机制类同字符串匹配；&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;IP地址及网络地址&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;同一个acl中可以指定多个测试条件，这些测试条件需要由逻辑操作符指定其关系。条件间的组合测试关系有三种：&quot;与&quot;(默认即为与操作)、&quot;或&quot;(使用&quot;||&quot;操作符)以及&quot;非&quot;(使用&quot;!&quot;操作符)。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1235933/201712/1235933-20171202210921726-1228528990.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;h2&gt;&lt;span&gt;通过ACL限制用户请求速率&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;be_sess_rate(backend) &amp;lt;integer&amp;gt;&lt;/p&gt;
&lt;p&gt;be_sess_rate 测试标准&lt;/p&gt;
&lt;p&gt;用于测试指定的backend上会话创建的速率(即每秒创建的会话数)是否满足指定的条件；常用于在指定backend上的会话速率过高时将用户请求转发至另外的backend，或用于阻止攻击行为。例如：&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;backend dynamic&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;mode http&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;acl being_scanned be_sess_rate gt 100&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;redirect location /denied.html if being_scanned&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h2&gt;&lt;span&gt;通过ACL指定可访问的用户（定义到frontend段中）&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;阻断非指定请求&lt;/p&gt;
&lt;p&gt;在传输层获取样本，通常是TCP/IP 协议的IP和端口，以及建立连接速率等等。而且此部分样本通常用于&lt;/p&gt;
&lt;p&gt;&quot;tcp-request connection&quot;指令中的规则之中。&lt;/p&gt;

&lt;p&gt;dst : ip #目标地址&lt;/p&gt;
&lt;p&gt;dst_port : integer&lt;/p&gt;
&lt;p&gt;src : ip #源地址&lt;/p&gt;
&lt;p&gt;src_port : integer&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;#阻断来自非指定IP的访问80端口的请求&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;acl myhost src 172.16.100.1&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;acl myport dst_port 80&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;tcp-request connection reject if !myhost myport&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;#还可以用block&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;block if ! myhost myport&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;


&lt;p&gt;根据用户访问内容实现动静分离&lt;/p&gt;
&lt;p&gt;path_beg &amp;lt;string&amp;gt;&lt;/p&gt;
&lt;p&gt;用于测试请求的URL是否以&amp;lt;string&amp;gt;指定的模式开头。下面的例子用于测试URL是否以/static、&lt;/p&gt;
&lt;p&gt;/images、/javascript或/stylesheets头。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;acl url_static path_beg -i /static /images /javascript /stylesheets&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;path_end &amp;lt;string&amp;gt;&lt;/p&gt;
&lt;p&gt;用于测试请求的URL是否以&amp;lt;string&amp;gt;指定的模式结尾。例如，下面的例子用户测试URL是否以jpg、gif、png、css或js结尾。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;acl url_static path_end -i .jpg .gif .png .css .js&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h2&gt;&lt;span&gt;根据用户访问内容实现动静分离配置实例&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;frontend http-in&lt;/p&gt;
&lt;p&gt;bind *:80&lt;/p&gt;
&lt;p&gt;log global&lt;/p&gt;
&lt;p&gt;option httpclose&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;acl url_static path_beg -i /static /images /javascript /stylesheets&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;acl url_static path_end -i .jpg .jpeg .gif .png .css .js&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;use_backend static_servers if url_static&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;default_backend dynamic_servers&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;backend static_servers&lt;/p&gt;
&lt;p&gt;balance roundrobin&lt;/p&gt;
&lt;p&gt;server imgsrv1 172.16.200.7:80 check maxconn 6000&lt;/p&gt;
&lt;p&gt;server imgsrv2 172.16.200.8:80 check maxconn 6000&lt;/p&gt;
&lt;p&gt;backend dynamic_servers&lt;/p&gt;
&lt;p&gt;balance source&lt;/p&gt;
&lt;p&gt;server websrv1 172.16.200.7:80 check maxconn 1000&lt;/p&gt;
&lt;p&gt;server websrv2 172.16.200.8:80 check maxconn 1000&lt;/p&gt;


&lt;p&gt;hdr_reg &amp;lt;string&amp;gt;正则匹配请求内容，匹配后可做对应的操作&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;#阻断火狐浏览器发送的请求&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;acl firefox hdr_reg(User-Agent) -i .*firefox.*&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;block if firefox&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;#将IE用户请求分配到静态服务器&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;acl ie_useragent hdr_reg(User-Agent) -i .*ie.*&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;use_backend static_servers if ie_useragent&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;


&lt;p&gt;&lt;strong&gt;option forwardfor&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;option forwardfor [ except &amp;lt;network&amp;gt; ] [ header &amp;lt;name&amp;gt; ] [ if-none ]&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;允许在发往服务器的请求首部中插入&quot;X-Forwarded-For&quot;首部。&lt;/p&gt;
&lt;p&gt;&amp;lt;network&amp;gt;：可选参数，当指定时，源地址为匹配至此网络中的请求都禁用此功能。&lt;/p&gt;
&lt;p&gt;&amp;lt;name&amp;gt;：可选参数，可使用一个自定义的首部，如&quot;X-Client&quot;来替代&quot;X-Forwarded-For&quot;。有些独特的web服务&lt;/p&gt;
&lt;p&gt;器的确需要用于一个独特的首部。&lt;/p&gt;
&lt;p&gt;if-none：仅在此首部不存在时才将其添加至请求报文问道中。&lt;/p&gt;
&lt;p&gt;HAProxy工作于反向代理模式，其发往服务器的请求中的客户端IP均为HAProxy主机的地址而非真正客户端的地址，这会使得服务器端的日志信息记录不了真正的请求来源，&quot;X-Forwarded-For&quot;首部则可用于解决此问题。HAProxy可以向每个发往服务器的请求上添加此首部，并以客户端IP为其value。&lt;/p&gt;
&lt;p&gt;需要注意的是，HAProxy工作于隧道模式，其仅检查每一个连接的第一个请求，因此，仅第一个请求报文被附加此首部。&lt;/p&gt;
&lt;p&gt;下面是一个例子。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;frontend www&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;mode http&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;option forwardfor except 127.0.0.1&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;在haproxy的配置文件中默认就有此选项&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1235933/201712/1235933-20171202210922132-1690509725.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;在nginx的主配置文件中也默认有此选项&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1235933/201712/1235933-20171202210922476-945842734.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;h2&gt;&lt;span&gt;一、源地址hash（用户IP识别）&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;Haroxy 将用户IP经过hash计算后 指定到固定的真实服务器上（类似于nginx 的IP hash 指令）。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;缺点：当后端一台服务器挂了以后会造成部分session丢失&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;p&gt;backend SOURCE_srv&lt;/p&gt;
&lt;p&gt;mode http&lt;/p&gt;
&lt;p&gt;balance source&lt;/p&gt;
&lt;p&gt;server app-node1 10.31.1.179:80 check port 80 inter 3000 rise 3 fall 3&lt;/p&gt;
&lt;p&gt;server app-node2 10.31.1.191:80 check port 80 inter 3000 rise 3 fall 3&lt;/p&gt;
&lt;p&gt;server app-node3 10.31.0.35:80 check port 80 inter 3000 rise 3 fall 3&lt;/p&gt;
&lt;h2&gt;&lt;span&gt;二、cookie 识别&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;haproxy 将WEB服务端返回给客户端的cookie中插入haproxy中特定的字符串(或添加前缀)在后端的服&lt;/p&gt;
&lt;p&gt;务器COOKIE ID。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;backend COOKIE_srv&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;mode http&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;cookie SERVERID insert indirect nocache&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;server app-node1 10.31.1.179:80 check port 80 cookie a inter 3000 rise 3 fall 3&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;server app-node2 10.31.1.191:80 check port 80 cookie b inter 3000 rise 3 fall 3&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;server app-node3 10.31.0.251:80 check port 80 cookie c inter 3000 rise 3 fall 3&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;在LB1上配置好HAProxy后，LB1将接受用户的所有请求。如果一个用户请求不包含任何cookie，那这个请求将被HAProxy转发到一台可用的WEB服务器。可能是webA,webB，webC。然后HAProxy将把处理这个请求的WEB服务器的cookie值插入到请求响应中。如SERVERID=A。当这个客户端再次访问并在HTTP请求头中带有SERVERID=A,HAProxy将会把它的请求直接转发给webA处理。在请求到达webA之前，cookie将被移除，webA将不会看到这个cookie。如果webA不可用，对应的请求将被转发到其他可用的WEB服务器，相应的cookie值也将被重新设置。&lt;/p&gt;


&lt;p&gt;&lt;span&gt;&lt;strong&gt;option redispatch：&lt;/strong&gt;&lt;/span&gt;当server对应的服务器挂掉后，强制定向到其他健康的服务器&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;option dontlognull ：&lt;/strong&gt;&lt;/span&gt;保证HAProxy不记录上级负载均衡发送过来的用于检测状态没有数据的心跳包。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;retries 3 :&lt;/strong&gt;&lt;/span&gt; //3次连接失败就认为服务器不可用，主要通过后面的check检查&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;maxconn 30000 :&lt;/strong&gt;&lt;/span&gt; //代理时所能接受的最大并发连接数，应该要比后端主机的并发总和要小&lt;/p&gt;
&lt;p&gt;好了，今天的内容就到这里，下期再见。&lt;/p&gt;
</description>
<pubDate>Sat, 02 Dec 2017 13:10:00 +0000</pubDate>
<dc:creator>大天使彦</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/1477717815fuming/p/7955634.html</dc:identifier>
</item>
<item>
<title>全内存的redis用习惯了？那能突破内存限制类redis产品ssdb呢？ - 一线码农</title>
<link>http://www.cnblogs.com/huangxincheng/p/7955473.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/huangxincheng/p/7955473.html</guid>
<description>
&lt;p&gt;           首先说一下背景，在双十一的时候，我们系统接受X宝的订单推送，同事原先的实现方式是使用redis的List作为推送数据的承载，在非大促的场景下，&lt;/p&gt;
&lt;p&gt;一切运行正常，内存占用大概3-4G，机器是16G内存。由于提前预计不足，在双十一来临的时候，订单瞬时量达到了平时的10X倍，内存非常吃紧，情况算&lt;/p&gt;
&lt;p&gt;是非常紧急了，采取的临时解决方案就是再开一个redis，将程序中的redis地址指向这台新的，重启一下程序，把数据暂时引导过去。&lt;/p&gt;

&lt;p&gt;&lt;span&gt;一：分析&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;         redis确实是一个好东西，一个如此强大的内存数据结构服务器，全内存存储，有些场景，恰恰你会死在全内存上，而且相对ssd硬盘来说，内存还是&lt;/p&gt;
&lt;p&gt;太小了。内存很便宜，但是内存和ssd比起来很贵，况且有些场景你可能根本不需要使用全内存，使用硬盘也许会更能帮助我们节省成本，你可能会说，现&lt;/p&gt;
&lt;p&gt;在业界标准已经差不多是kafka了，有时候我们还需要redis里面的hash，也就是说我现在需要kafka + redis 的一个综合体的产品，这就是本篇和大家说到的&lt;/p&gt;
&lt;p&gt;ssdb，当然ssdb和kafka还是不能相提并论的哈，毕竟我是在选择一个轻量级的解决方案。&lt;/p&gt;

&lt;p&gt;&lt;span&gt;二：ssdb说明&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;        ssdb是一个使用leveldb做为底层存储的nosql数据库，&lt;span&gt;好处就是可以利用redis中的所有数据结构，而且数据还是基于硬盘的&lt;/span&gt;，所以可以存储的数据比&lt;/p&gt;
&lt;p&gt;redis大的不要太多，&lt;span&gt;官方文档的说法就是用来替代redis的&lt;/span&gt;，而且让你眼前一亮的就是，它对.net还是比较友好的，一个很不错的解决方案，不过成熟度不&lt;/p&gt;
&lt;p&gt;如redis，大家前期可以当缓存用用，或者存储一些非关键性数据，节省节省内存空间。目前我在项目中用起来了。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;1. 使用hash来存customerID 和customerNick的映射关系。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;2. 使用List来承载X宝的订单推送。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;三：快速搭建&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;      官方下载：&lt;span&gt;http://ssdb.io， &lt;/span&gt;有一点要注意的就是官方文档明确表示，CentOS7的文件句柄设置问题，建议不要在centos7上进行搭建，具体的说明&lt;/p&gt;
&lt;p&gt;可以看看这个：&lt;a href=&quot;http://ssdb.io/docs/zh_cn/config.html&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;http://ssdb.io/docs/zh_cn/config.html&lt;/span&gt;&lt;/a&gt; ，大家可以用用centos6.5或者ubantu吧。&lt;/p&gt;

&lt;p&gt;&lt;span&gt;1. wget下载和unzip解压。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
[root@localhost apps]# &lt;span&gt;wget https://codeload.github.com/ideawu/ssdb/zip/master&lt;/span&gt;

--&lt;span&gt;2017&lt;/span&gt;-&lt;span&gt;12&lt;/span&gt;-&lt;span&gt;02&lt;/span&gt; &lt;span&gt;03&lt;/span&gt;:&lt;span&gt;02&lt;/span&gt;:&lt;span&gt;18&lt;/span&gt;-- https:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;codeload.github.com/ideawu/ssdb/zip/master&lt;/span&gt;
&lt;span&gt;
Resolving codeload.github.com (codeload.github.com)... &lt;/span&gt;&lt;span&gt;192.30&lt;/span&gt;.&lt;span&gt;255.120&lt;/span&gt;, &lt;span&gt;192.30&lt;/span&gt;.&lt;span&gt;255.121&lt;/span&gt;&lt;span&gt;

Connecting to codeload.github.com (codeload.github.com)&lt;/span&gt;|&lt;span&gt;192.30&lt;/span&gt;.&lt;span&gt;255.120&lt;/span&gt;|:&lt;span&gt;443&lt;/span&gt;&lt;span&gt;... connected.

HTTP request sent, awaiting response... &lt;/span&gt;&lt;span&gt;200&lt;/span&gt;&lt;span&gt; OK

Length: &lt;/span&gt;&lt;span&gt;1595060&lt;/span&gt; (&lt;span&gt;1.5M&lt;/span&gt;) [application/&lt;span&gt;zip]

Saving to: ‘master’

 
&lt;/span&gt;&lt;span&gt;100&lt;/span&gt;%[==================================================================&amp;gt;] &lt;span&gt;1&lt;/span&gt;,&lt;span&gt;595&lt;/span&gt;,&lt;span&gt;060&lt;/span&gt; &lt;span&gt;69&lt;/span&gt;.3KB/s &lt;span&gt;in&lt;/span&gt;&lt;span&gt; 36s

 
&lt;/span&gt;&lt;span&gt;2017&lt;/span&gt;-&lt;span&gt;12&lt;/span&gt;-&lt;span&gt;02&lt;/span&gt; &lt;span&gt;03&lt;/span&gt;:&lt;span&gt;02&lt;/span&gt;:&lt;span&gt;57&lt;/span&gt; (&lt;span&gt;43.7&lt;/span&gt; KB/s) - ‘master’ saved [&lt;span&gt;1595060&lt;/span&gt;/&lt;span&gt;1595060&lt;/span&gt;&lt;span&gt;]

[root@localhost apps]#&lt;span&gt;unzip master&lt;/span&gt;

[root@localhost apps]# ls

master ssdb&lt;/span&gt;-master
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt; 2. 使用make对C++代码进行编译&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
[root@localhost ssdb-master]# make
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;3. 编译完之后，一泡尿的功夫，这个ssdb-server可执行文件就出来了。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
[root@localhost ssdb-&lt;span&gt;master]# ls
api              ChangeLog  Dockerfile  Makefile   ssdb.conf        tools      version
build_config.mk  data       docs        README.md  &lt;span&gt;ssdb&lt;/span&gt;&lt;/span&gt;&lt;span&gt;-server&lt;/span&gt;      &lt;span&gt;var&lt;/span&gt;&lt;span&gt;
build.sh         deps       LICENSE     src        ssdb_slave.conf  var_slave&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;4.然后我们把ssdb.conf配置一下&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;    这里面有三个配置要注意下：&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&amp;lt;1&amp;gt; work_dir： 存放data和meta的目录，可以在ssdb-master文件夹下mkdir data文件夹。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&amp;lt;2&amp;gt; ip：设为0.0.0.0，让所有的主机都能够连接上来。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&amp;lt;3&amp;gt; port  8888 ：这个是默认的ssdbserver端口号，大家可以看情况修改。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;完整配置如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
# ssdb-&lt;span&gt;server config
# MUST indent by TAB&lt;/span&gt;!&lt;span&gt;

# absolute path, or relative to path of &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt; file, directory must exists
work_dir &lt;/span&gt;= /usr/apps/ssdb-master/&lt;span&gt;data
pidfile &lt;/span&gt;= ./&lt;span&gt;var&lt;/span&gt;/&lt;span&gt;ssdb.pid

server:
        ip: &lt;/span&gt;&lt;span&gt;0.0&lt;/span&gt;.&lt;span&gt;0.0&lt;/span&gt;&lt;span&gt;
        port: &lt;/span&gt;&lt;span&gt;8888&lt;/span&gt;&lt;span&gt;
        # bind to &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; ip
        #ip: &lt;/span&gt;&lt;span&gt;0.0&lt;/span&gt;.&lt;span&gt;0.0&lt;/span&gt;&lt;span&gt;
        # format: allow&lt;/span&gt;|deny: all|&lt;span&gt;ip_prefix
        # multiple allows or denys &lt;/span&gt;&lt;span&gt;is&lt;/span&gt;&lt;span&gt; supported
        #deny: all
        #allow: &lt;/span&gt;&lt;span&gt;127.0&lt;/span&gt;.&lt;span&gt;0.1&lt;/span&gt;&lt;span&gt;
        #allow: &lt;/span&gt;&lt;span&gt;192.168&lt;/span&gt;&lt;span&gt;
        # auth password must be at least &lt;/span&gt;&lt;span&gt;32&lt;/span&gt;&lt;span&gt; characters
        #auth: very&lt;/span&gt;-strong-&lt;span&gt;password
        #&lt;/span&gt;&lt;span&gt;readonly&lt;/span&gt;&lt;span&gt;: yes
        # &lt;/span&gt;&lt;span&gt;in&lt;/span&gt;&lt;span&gt; ms, to log slowlog with WARN level
        #slowlog_timeout: &lt;/span&gt;&lt;span&gt;5&lt;/span&gt;&lt;span&gt;

replication:
        binlog: yes
        # Limit sync speed to &lt;/span&gt;*MB/s, -&lt;span&gt;1&lt;/span&gt;&lt;span&gt;: no limit
        sync_speed: &lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;&lt;span&gt;
        slaveof:
                # to identify a master even &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; it moved(ip, port changed)
                # &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; &lt;span&gt;set&lt;/span&gt;&lt;span&gt; to empty or not defined, ip:port will be used.
                #id: svc_2
                # sync&lt;/span&gt;|mirror, &lt;span&gt;default&lt;/span&gt; &lt;span&gt;is&lt;/span&gt;&lt;span&gt; sync
                #type: sync
                #host: localhost
                #port: &lt;/span&gt;&lt;span&gt;8889&lt;/span&gt;&lt;span&gt;

logger:
        level: debug
        output: log.txt
        rotate:
                size: &lt;/span&gt;&lt;span&gt;1000000000&lt;/span&gt;&lt;span&gt;

leveldb:
        # &lt;/span&gt;&lt;span&gt;in&lt;/span&gt;&lt;span&gt; MB
        cache_size: &lt;/span&gt;&lt;span&gt;500&lt;/span&gt;&lt;span&gt;
        # &lt;/span&gt;&lt;span&gt;in&lt;/span&gt;&lt;span&gt; MB
        write_buffer_size: &lt;/span&gt;&lt;span&gt;64&lt;/span&gt;&lt;span&gt;
        # &lt;/span&gt;&lt;span&gt;in&lt;/span&gt; MB/&lt;span&gt;s
        compaction_speed: &lt;/span&gt;&lt;span&gt;1000&lt;/span&gt;&lt;span&gt;
        # yes&lt;/span&gt;|&lt;span&gt;no
        compression: yes&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt; &lt;span&gt;5. 启动ssdb-server,指定一下配置文件，采取静默启动&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
[root@localhost ssdb-master]# &lt;span&gt;./ssdb-server ./ssdb.conf -&lt;/span&gt;&lt;span&gt;&lt;span&gt;d&lt;/span&gt;
ssdb&lt;/span&gt;-server &lt;span&gt;1.9&lt;/span&gt;.&lt;span&gt;6&lt;/span&gt;&lt;span&gt;
Copyright (c) &lt;/span&gt;&lt;span&gt;2012&lt;/span&gt;-&lt;span&gt;2015&lt;/span&gt;&lt;span&gt; ssdb.io

[root@localhost ssdb&lt;/span&gt;-master]# netstat -&lt;span&gt;tlnp
Active Internet connections (only servers)
Proto Recv&lt;/span&gt;-Q Send-Q Local Address           Foreign Address         State       PID/&lt;span&gt;Program name    
tcp        &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;      &lt;span&gt;0&lt;/span&gt; &lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;122.1&lt;/span&gt;:&lt;span&gt;53&lt;/span&gt;        &lt;span&gt;0.0&lt;/span&gt;.&lt;span&gt;0.0&lt;/span&gt;:*               LISTEN      &lt;span&gt;1869&lt;/span&gt;/&lt;span&gt;dnsmasq        
tcp        &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;      &lt;span&gt;0&lt;/span&gt; &lt;span&gt;0.0&lt;/span&gt;.&lt;span&gt;0.0&lt;/span&gt;:&lt;span&gt;22&lt;/span&gt;              &lt;span&gt;0.0&lt;/span&gt;.&lt;span&gt;0.0&lt;/span&gt;:*               LISTEN      &lt;span&gt;1115&lt;/span&gt;/&lt;span&gt;sshd           
tcp        &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;      &lt;span&gt;0&lt;/span&gt; &lt;span&gt;127.0&lt;/span&gt;.&lt;span&gt;0.1&lt;/span&gt;:&lt;span&gt;631&lt;/span&gt;           &lt;span&gt;0.0&lt;/span&gt;.&lt;span&gt;0.0&lt;/span&gt;:*               LISTEN      &lt;span&gt;1117&lt;/span&gt;/&lt;span&gt;cupsd          
tcp        &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;      &lt;span&gt;0&lt;/span&gt; &lt;span&gt;0.0.0.0:8888&lt;/span&gt;            &lt;span&gt;0.0&lt;/span&gt;.&lt;span&gt;0.0&lt;/span&gt;:*               LISTEN      &lt;span&gt;12994&lt;/span&gt;/./ssdb-&lt;span&gt;server 
tcp        &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;      &lt;span&gt;0&lt;/span&gt; &lt;span&gt;127.0&lt;/span&gt;.&lt;span&gt;0.1&lt;/span&gt;:&lt;span&gt;25&lt;/span&gt;            &lt;span&gt;0.0&lt;/span&gt;.&lt;span&gt;0.0&lt;/span&gt;:*               LISTEN      &lt;span&gt;1627&lt;/span&gt;/&lt;span&gt;master         
tcp6       &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;      &lt;span&gt;0&lt;/span&gt; :::&lt;span&gt;22&lt;/span&gt;                   :::*                    LISTEN      &lt;span&gt;1115&lt;/span&gt;/&lt;span&gt;sshd           
tcp6       &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;      &lt;span&gt;0&lt;/span&gt; ::&lt;span&gt;1&lt;/span&gt;:&lt;span&gt;631&lt;/span&gt;                 :::*                    LISTEN      &lt;span&gt;1117&lt;/span&gt;/&lt;span&gt;cupsd          
tcp6       &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;      &lt;span&gt;0&lt;/span&gt; ::&lt;span&gt;1&lt;/span&gt;:&lt;span&gt;25&lt;/span&gt;                  :::*                    LISTEN      &lt;span&gt;1627&lt;/span&gt;/&lt;span&gt;master         
[root@localhost ssdb&lt;/span&gt;-master]# 
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;  可以看到，上面的8888端口已经成功开启，没毛病。&lt;/p&gt;

&lt;p&gt;&lt;span&gt;四：使用C#客户端&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;        在&lt;a href=&quot;http://ssdb.io/docs/zh_cn/clients.html&quot; target=&quot;_blank&quot;&gt;http://ssdb.io/docs/zh_cn/clients.html&lt;/a&gt;上面列出了各个语言的客户端SDK，这里我就选择C#的SDK：&lt;a href=&quot;https://github.com/ssdb/dotnetssdb&quot; target=&quot;_blank&quot;&gt;https://github.com/ssdb/dotnetssdb&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/214741/201712/214741-20171202201123366-1728907154.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;      可以看到，里面没啥东西，就三个破文件，里面并没有实现ssdb应该有的所有功能，所以大家可以根据自己的需要进行封装，连接池啥的都要&lt;/p&gt;
&lt;p&gt;你自己根据需要实现吧，好了，接下来我用hash简单的测试一下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Program
    {
        &lt;/span&gt;&lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; Main(&lt;span&gt;string&lt;/span&gt;&lt;span&gt;[] args)
        {
            Client client &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; Client(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;192.168.23.153&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;8888&lt;/span&gt;&lt;span&gt;);

            client.hset(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;customerHash&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;customerID&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;1000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);

            &lt;/span&gt;&lt;span&gt;string&lt;/span&gt; val = &lt;span&gt;string&lt;/span&gt;&lt;span&gt;.Empty;

            client.hget(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;customerHash&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;customerID&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;out&lt;/span&gt;&lt;span&gt; val);

            Debug.WriteLine(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;customerID= &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; +&lt;span&gt; val);

            client.close();
        }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/214741/201712/214741-20171202201443460-1481943926.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;    好了，本篇先就说到这里，希望对你有帮助。&lt;/p&gt;
</description>
<pubDate>Sat, 02 Dec 2017 12:26:00 +0000</pubDate>
<dc:creator>一线码农</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/huangxincheng/p/7955473.html</dc:identifier>
</item>
</channel>
</rss>