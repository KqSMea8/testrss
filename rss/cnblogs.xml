<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>Spring Boot 2.0系列文章(五)：Spring Boot 2.0 项目源码结构预览 - zhisheng_tian</title>
<link>http://www.cnblogs.com/zhisheng/p/8934501.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/zhisheng/p/8934501.html</guid>
<description>&lt;p&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/006tKfTcgy1fqhraflay7j31hc0zk0z1.jpg&quot; alt=&quot;fireworks-2585843_1920&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;关注我&quot;&gt;关注我&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;http://ohfk1r827.bkt.clouddn.com/blog/180103/C6LG3mGa12.jpg&quot; alt=&quot;mark&quot;/&gt;&lt;/p&gt;
&lt;p&gt;转载请务必注明原创地址为：&lt;a href=&quot;http://www.54tianzhisheng.cn/2018/04/18/spring_boot2_project/&quot;&gt;http://www.54tianzhisheng.cn/2018/04/15/springboot2_code/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;项目结构&quot;&gt;项目结构&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/006tKfTcgy1fqhsa07r59j30ps104gpd.jpg&quot; alt=&quot;springboot2001&quot;/&gt;&lt;/p&gt;
&lt;p&gt;结构分析：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Spring-boot-project 核心代码，代码量很多（197508 行）&lt;/li&gt;
&lt;li&gt;Spring-boot-samples 一些样例 demo，代码量不多（9685 行），蛮有用的&lt;/li&gt;
&lt;li&gt;Spring-boot-samples-invoker 里面无代码&lt;/li&gt;
&lt;li&gt;Spring-boot-tests 测试代码（1640 行）&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;spring-boot-project&quot;&gt;spring-boot-project&lt;/h3&gt;
&lt;p&gt;Spring-boot-project 下面有很多模块，如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws3.sinaimg.cn/large/006tKfTcgy1fqhs874239j30p00n2dip.jpg&quot; alt=&quot;springboot2002&quot;/&gt;&lt;/p&gt;
&lt;h4 id=&quot;spirng-boot&quot;&gt;Spirng-boot&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;https://ws2.sinaimg.cn/large/006tKfTcgy1fqhs885a4zj30xk1ea78a.jpg&quot; alt=&quot;springboot&quot;/&gt;&lt;/p&gt;
&lt;p&gt;该模块 47760 行代码（含测试代码），Spring boot 主要的库，提供了支持 Spring Boot 其他部分的功能，其中包括了：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;在&lt;code&gt;SpringApplication&lt;/code&gt;类，提供静态便捷方法，可以很容易写一个独立的 Spring 应用程序。它唯一的工作就是创造并更新一个合适的 Spring&lt;code&gt;ApplicationContext&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;带有可选容器的嵌入式 Web 应用程序（Tomcat，Jetty 或 Undertow）&lt;/li&gt;
&lt;li&gt;一流的外部配置支持&lt;/li&gt;
&lt;li&gt;便捷&lt;code&gt;ApplicationContext&lt;/code&gt;初始化程序，包括对敏感日志记录默认值的支持&lt;/li&gt;
&lt;/ul&gt;&lt;h4 id=&quot;spring-boot-actuator&quot;&gt;spring-boot-actuator&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;https://ws3.sinaimg.cn/large/006tKfTcgy1fqhs8ibzjzj30xk15mjv8.jpg&quot; alt=&quot;springboot-actuator&quot;/&gt;&lt;/p&gt;
&lt;p&gt;该模块 18398 行代码（含测试代码），spring-boot-actuator 模块它完全是一个用于暴露自身信息的模块，提供了一个监控和管理生产环境的模块，可以使用 http、jmx、ssh、telnet 等管理和监控应用。审计（Auditing）、 健康（health）、数据采集（metrics gathering）会自动加入到应用里面。&lt;/p&gt;
&lt;h4 id=&quot;spring-boot-actuator-autoconfigure&quot;&gt;spring-boot-actuator-autoconfigure&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;https://ws4.sinaimg.cn/large/006tKfTcgy1fqhs8hfazpj30wi1dy0xb.jpg&quot; alt=&quot;springboot-actoator-autoconfig&quot;/&gt;&lt;/p&gt;
&lt;p&gt;该模块 16721 行代码（含测试代码），Spring Boot Actuator 提供了额外的自动配置功能，可以在生产环境中实现可即时部署和支持的功能，从而装饰你的应用。例如，如果您正在编写 JSON Web 服务，那么它将提供服务器，安全性，日志记录，外部配置，管理端点，审计抽象等等功能。如果您想关闭内置功能，或者扩展或替换它们，它也会变得非常简单。&lt;/p&gt;
&lt;h4 id=&quot;spring-boot-autoconfigure&quot;&gt;spring-boot-autoconfigure&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;https://ws2.sinaimg.cn/large/006tKfTcgy1fqhs89img2j30xs0og0uz.jpg&quot; alt=&quot;springboot-autoconfig&quot;/&gt;&lt;/p&gt;
&lt;p&gt;该模块 51100 行代码（含测试代码）， Spring Boot 可以根据类路径的内容配置大部分常用应用程序。单个&lt;code&gt;@EnableAutoConfiguration&lt;/code&gt;注释会触发 Spring上下文的自动配置。&lt;/p&gt;
&lt;p&gt;自动配置尝试推断用户可能需要哪些 bean。例如，如果 &lt;code&gt;HSQLDB&lt;/code&gt;在类路径中，并且用户尚未配置任何数据库连接，则他们可能需要定义内存数据库。当用户开始定义他们自己的 bean 时，自动配置将永远远离。&lt;/p&gt;
&lt;h4 id=&quot;spring-boot-cli&quot;&gt;spring-boot-cli&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;https://ws2.sinaimg.cn/large/006tKfTcgy1fqhsa2hmasj30x21aqq6j.jpg&quot; alt=&quot;springboot-cli&quot;/&gt;&lt;/p&gt;
&lt;p&gt;该模块 9346 行代码（含测试代码），Spring 命令行应用程序编译并运行 Groovy 源代码，使得可以编写少量代码就能运行应用程序。Spring CLI 也可以监视文件，当它们改变时自动重新编译并重新启动。&lt;/p&gt;
&lt;h4 id=&quot;spring-boot-dependencies&quot;&gt;spring-boot-dependencies&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/006tKfTcgy1fqhs9xrj6qj31kw16be31.jpg&quot; alt=&quot;springboot-dependencies&quot;/&gt;&lt;/p&gt;
&lt;p&gt;该模块里面没有源码，只有所有依赖和插件的版本号信息。&lt;/p&gt;
&lt;h4 id=&quot;spring-boot-devtools&quot;&gt;spring-boot-devtools&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/006tKfTcgy1fqhs9z88hrj30v41bw785.jpg&quot; alt=&quot;springboot-devtools&quot;/&gt;&lt;/p&gt;
&lt;p&gt;该模块 9418 行代码（含测试代码），spring-boot-devtools 模块来使 Spring Boot 应用支持热部署，提高开发者的开发效率，无需手动重启 Spring Boot 应用。&lt;/p&gt;
&lt;h4 id=&quot;spring-boot-docs&quot;&gt;spring-boot-docs&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;https://ws3.sinaimg.cn/large/006tKfTcgy1fqhs8affekj30xo1ecdkr.jpg&quot; alt=&quot;springboot-docs&quot;/&gt;&lt;/p&gt;
&lt;p&gt;该模块 671 行代码，springboot 参考文件。&lt;/p&gt;
&lt;h4 id=&quot;spring-boot-parent&quot;&gt;spring-boot-parent&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;https://ws4.sinaimg.cn/large/006tKfTcgy1fqhs8dxfnij31kw0zrqkw.jpg&quot; alt=&quot;springboot-parent&quot;/&gt;&lt;/p&gt;
&lt;p&gt;该模块是其他项目的 parent，该模块的父模块是 spring-boot-dependencies。&lt;/p&gt;
&lt;h4 id=&quot;spring-boot-properties-migrator&quot;&gt;spring-boot-properties-migrator&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;https://ws3.sinaimg.cn/large/006tKfTcgy1fqhs9wkyvsj30um18678o.jpg&quot; alt=&quot;springboot-properties-migrator&quot;/&gt;&lt;/p&gt;
&lt;p&gt;该模块有 495 行代码，在 Spring Boot 2.0 中，许多配置属性被重新命名/删除，开发人员需要更新&lt;code&gt;application.properties&lt;/code&gt;/ &lt;code&gt;application.yml&lt;/code&gt;相应的配置。为了帮助你解决这一问题，Spring Boot 发布了一个新&lt;code&gt;spring-boot-properties-migrator&lt;/code&gt;模块。一旦作为该模块作为依赖被添加到你的项目中，它不仅会分析应用程序的环境，而且还会在启动时打印诊断信息，而且还会在运行时为您暂时迁移属性。在您的应用程序迁移期间，这个模块是必备的，完成迁移后，请确保从项目的依赖关系中删除此模块。&lt;/p&gt;
&lt;h4 id=&quot;spring-boot-starters&quot;&gt;spring-boot-starters&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/006tKfTcgy1fqhs8foqadj31he1hwh5l.jpg&quot; alt=&quot;springboot-starter&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Starter POMs 是由很多方便的依赖集合组成，如果你需要使用某种技术，通过添加少量的jar就可以把相关的依赖加入到项目中去。&lt;/p&gt;
&lt;p&gt;虽然你看得到有这么多 starter，但是却没有一行 Java 代码，意不意外？&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/006tKfTcgy1fqhs84zby0j31kw0xdkb0.jpg&quot; alt=&quot;springboot-starter-activemq&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这确实是 Spring Boot 自动配置的关键之处，后面我可以讲讲。&lt;/p&gt;
&lt;h4 id=&quot;spring-boot-test&quot;&gt;spring-boot-test&lt;/h4&gt;
&lt;p&gt;测试代码！有 10980 行代码。&lt;/p&gt;
&lt;h4 id=&quot;spring-boot-test-autoconfigure&quot;&gt;spring-boot-test-autoconfigure&lt;/h4&gt;
&lt;p&gt;自动配置的测试代码，有 6063 行代码。&lt;/p&gt;
&lt;h4 id=&quot;spring-boot-tools&quot;&gt;spring-boot-tools&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;https://ws4.sinaimg.cn/large/006tKfTcgy1fqhs8kcu5ej30ri0lqwh5.jpg&quot; alt=&quot;springboot-tools&quot;/&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;spring-boot-antlib&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Spring Boot AntLib 模块为 Apache Ant 提供了基本的 Spring Boot 支持。 您可以使用该模块创建可执行文件夹。 要使用该模块，您需要在 build.xml 中声明一个额外的 spring-boot 命名空间，如以下示例所示：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;xml &amp;lt;project xmlns:ivy=&quot;antlib:org.apache.ivy.ant&quot; xmlns:spring-boot=&quot;antlib:org.springframework.boot.ant&quot; name=&quot;myapp&quot; default=&quot;build&quot;&amp;gt; ... &amp;lt;/project&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;您需要记住使用 -lib 选项启动 Ant，如以下示例所示：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ant -lib &amp;lt;folder containing spring-boot-antlib-2.1.0.BUILD-SNAPSHOT.jar&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Spring-boot-autoconfigure-processor&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;spring boot 自动配置的核心类&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Spring-boot-configuration-metadata&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Spring boot 配置元数据&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Spring-boot-configuration-processor&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;spring boot 配置的核心&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Spring-boot-gradle-plugin&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Spring Boot Gradle 插件在 Gradle 中提供了 Spring Boot 支持，可以打包成可执行 jar 或 war ，运行 Spring Boot 应用程序，并使用 spring-boot-dependencies 提供的依赖关系管理。 它需要 Gradle 4.0 或更高版本。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Spring-boot-maven-plugin&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Spring Boot Maven Plugin 在 Maven 中提供了 Spring Boot 支持，让您可以打包成可执行 jar 或 war 应用，并“就地”运行应用程序。 要使用它，你必须使用 Maven 3.2（或更高版本）。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Spring-boot-loader&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;spring-boot-load 模块通过自定义 jar 包结构，自定义类加载器，优雅的实现了嵌套 jar 资源的加载，通过打包时候重新设置启动类和组织 jar 结构，通过运行时设置自定义加载器来实现嵌套 jar 资源加载。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Spring-boot-loader-tools&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;spring-boot-load 模块的工具模块&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Spring-boot-test-support&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;测试&lt;/p&gt;
&lt;h3 id=&quot;spring-boot-samples&quot;&gt;spring-boot-samples&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://ws2.sinaimg.cn/large/006tKfTcgy1fqhsa4qklcj31kw11y7ud.jpg&quot; alt=&quot;springboot-samples&quot;/&gt;&lt;/p&gt;
&lt;p&gt;样例 demo 比较多，大家看源码的时候可以拿这些现成 demo 测试。&lt;/p&gt;
&lt;h3 id=&quot;spring-boot-tests&quot;&gt;spring-boot-tests&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://ws2.sinaimg.cn/large/006tKfTcgy1fqhs8cezdbj30ui1dqagt.jpg&quot; alt=&quot;springboot-tests&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;相关文章&quot;&gt;相关文章&lt;/h3&gt;
&lt;p&gt;1、&lt;a href=&quot;http://www.54tianzhisheng.cn/2018/03/06/SpringBoot2-Migration-Guide/&quot;&gt;Spring Boot 2.0系列文章(一)：Spring Boot 2.0 迁移指南&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;2、&lt;a href=&quot;http://www.54tianzhisheng.cn/2018/03/06/SpringBoot2-new-features/&quot;&gt;Spring Boot 2.0系列文章(二)：Spring Boot 2.0 新特性详解&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;3、&lt;a href=&quot;http://www.54tianzhisheng.cn/2018/04/13/Spring_Boot_2.0_Configuration_Changelog/&quot;&gt;Spring Boot 2.0系列文章(三)：Spring Boot 2.0 配置改变&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;4、&lt;a href=&quot;http://www.54tianzhisheng.cn/2018/04/15/springboot2_code/&quot;&gt;Spring Boot 2.0系列文章(四)：Spring Boot 2.0 源码阅读环境搭建&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;5、&lt;a href=&quot;http://www.54tianzhisheng.cn/2018/04/18/spring_boot2_project/&quot;&gt;Spring Boot 2.0系列文章(五)：Spring Boot 2.0 项目源码结构预览&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;6、&lt;a href=&quot;http://www.54tianzhisheng.cn/2018/04/19/SpringBootApplication-annotation/&quot;&gt;Spring Boot 2.0系列文章(六)：Spring boot 2.0 中 SpringBootApplication 注解详解&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;总结&quot;&gt;总结&lt;/h3&gt;
&lt;p&gt;本文主要分析了下 Spring boot 项目源码结构。包含 Spring boot 核心源码、样例 demo、测试。分析了项目的整体结构后，后面才能够有的放矢的去读源码。&lt;/p&gt;
&lt;h3 id=&quot;最后&quot;&gt;最后&lt;/h3&gt;
&lt;p&gt;虽然源码很难，但随着不断的探索，源码在你面前将会一览无遗，享受这种探索后的成就感！加油！骚年！&lt;/p&gt;
</description>
<pubDate>Tue, 24 Apr 2018 15:40:00 +0000</pubDate>
<dc:creator>zhisheng_tian</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/zhisheng/p/8934501.html</dc:identifier>
</item>
<item>
<title>深入以太坊智能合约 ABI - 以太坊开发</title>
<link>http://www.cnblogs.com/helloworld2018/p/8934425.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/helloworld2018/p/8934425.html</guid>
<description>&lt;p&gt;开发 DApp 时要调用在区块链上的以太坊智能合约，就需要智能合约的 ABI。本文希望更多了解 ABI，如为什么需要 ABI？如何解读 Ethereum 的智能合约 ABI？以及如何取得合约的 ABI？&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/11831773-f937422962fc1f94.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;div class=&quot;image-package&quot;&gt;
&lt;p&gt;数字猫合约 ABI&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;ABI（Application Binary Interface）&lt;/p&gt;
&lt;p&gt;如果理解 API 就很容易了解 ABI。简单来说，API 是程序与程序间互动的接口。这个接口包含程序提供外界存取所需的 functions、variables 等。ABI 也是程序间互动的接口，但程序是被编译后的 binary code。所以同样的接口，但传递的是 binary 格式的信息。所以 ABI 就要描述如何 decode/encode 程序间传递的 binary 信息。下图以 Linux 为例，描述 Linux 中 API、ABI 和程序的关系。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/11831773-d07312035b86a7df.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;div class=&quot;image-package&quot;&gt;
&lt;p&gt;Linux API and ABI&lt;/p&gt;
&lt;/div&gt;
&lt;h3&gt;编译和部署智能合约&lt;/h3&gt;
&lt;p&gt;在 Ethereum 智能合约可以被大家使用前，必须先被部署到区块链上。&lt;/p&gt;
&lt;p&gt;从智能合约的代码到使用智能合约，大概包含几个步骤：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;编写智能合约的代码（一般是用 Solidity 写）&lt;/li&gt;
&lt;li&gt;编译智能合约的代码变成可在 EVM 上执行的 bytecode（binary code）。同时可以通过编译取得智能合约的 ABI&lt;/li&gt;
&lt;li&gt;部署智能合约，实际上是把 bytecode 存储在链上（通过一个transaction），并取得一个专属于这个合约的地址&lt;/li&gt;
&lt;li&gt;如果要写个程序调用这个智能合约，就要把信息发送到这个合约的地址（一样的也是通过一个 transaction）。Ethereum 节点会根据输入的信息，选择要执行合约中的哪一个 function 和要输入的参数&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;而要如何知道這这个智能合约提供哪些 function 以及应该要传入什么样的参数呢？这些信息就是记录在智能合约的 ABI！&lt;/p&gt;
&lt;h3&gt;Ethereum 智能合约 ABI&lt;/h3&gt;
&lt;p&gt;Ethereum 智能合约 ABI 用一个 array 表示，其中会包含数个用 JSON 格式表示的 Function 或 Event。根据最新的 Solidity 文件：&lt;/p&gt;
&lt;h4&gt;Function&lt;/h4&gt;
&lt;p&gt;共有 7 个参数：&lt;/p&gt;
&lt;ol readability=&quot;6.5&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code&gt;name&lt;/code&gt;：a string，function 名称&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;&lt;code&gt;type&lt;/code&gt;：a string，&quot;function&quot;, &quot;constructor&quot;, or &quot;fallback&quot;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code&gt;inputs&lt;/code&gt;：an array，function 输入的参数，包含：&lt;/p&gt;
&lt;ul readability=&quot;0.5&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code&gt;name&lt;/code&gt;：a string，参数名&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code&gt;type&lt;/code&gt;：a string，参数的 data type(e.g. uint256)&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;code&gt;components&lt;/code&gt;：an array，如果输入的参数是 tuple(struct) type 才会有这个参数。描述 struct 中包含的参数类型&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;code&gt;outputs&lt;/code&gt;：an array，function 的返回值，和 &lt;code&gt;inputs&lt;/code&gt; 使用相同表示方式。如果沒有返回值可忽略，值为 &lt;code&gt;[]&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code&gt;payable&lt;/code&gt;：&lt;code&gt;true&lt;/code&gt;，function 是否可收 Ether，预设为 &lt;code&gt;false&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code&gt;constant&lt;/code&gt;：&lt;code&gt;true&lt;/code&gt;，function 是否会改写区块链状态，反之为 &lt;code&gt;false&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;&lt;code&gt;stateMutability&lt;/code&gt;：a string，其值可能为以下其中之一：&quot;pure&quot;（不会读写区块链状态）、&quot;view&quot;（只读不写区块链状态）、&quot;payable&quot; and &quot;nonpayable&quot;（会改区块链状态，且如可收 Ether 为 &quot;payable&quot;，反之为 &quot;nonpayable&quot;）&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;仔细看会发现 &lt;code&gt;payable&lt;/code&gt; 和 &lt;code&gt;constant&lt;/code&gt; 这两个参数所描述的內容，似乎已包含在 &lt;code&gt;stateMutability&lt;/code&gt; 中。&lt;/p&gt;
&lt;p&gt;事实也确实是这样的，在 &lt;a href=&quot;https://link.jianshu.com/?t=https%3A%2F%2Fgithub.com%2Fethereum%2Fsolidity%2Freleases&quot;&gt;Solidity v0.4.16&lt;/a&gt; 中把 &lt;code&gt;constant&lt;/code&gt; 这个修饰function 的 key words 分成： &lt;code&gt;view&lt;/code&gt;（neither reads from nor writes to the state）和 &lt;code&gt;pure&lt;/code&gt;（does not modify the state），并从 v0.4.17 开始 Type Checker 会强制检查。&lt;code&gt;constant&lt;/code&gt; 改为只用来修饰不能被修改的 variable。并在 ABI 中加入 &lt;code&gt;stateMutability&lt;/code&gt; 这个参数统一表示，&lt;code&gt;payable&lt;/code&gt; 和 &lt;code&gt;constant&lt;/code&gt; 目前保留是为了向后兼容。这个改动详细的內容和讨论可参考：&lt;a href=&quot;https://link.jianshu.com/?t=https%3A%2F%2Fgithub.com%2Fethereum%2Fsolidity%2Fissues%2F992&quot;&gt;https://github.com/ethereum/solidity/issues/992&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;Event&lt;/h4&gt;
&lt;p&gt;共有 4 个参数：&lt;/p&gt;
&lt;ol readability=&quot;1&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code&gt;name&lt;/code&gt;: a string，event 的名称&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code&gt;type&lt;/code&gt;: a string，always &quot;event&quot;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code&gt;inputs&lt;/code&gt;: an array，输入参数，包含：&lt;/p&gt;
&lt;ul readability=&quot;1.5&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code&gt;name&lt;/code&gt;: a string，参数名称&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code&gt;type&lt;/code&gt;: a string，参数的 data type(e.g. uint256)&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;code&gt;components&lt;/code&gt;: an array，如果输入参数是 tuple(struct) type 才会有这个参数。描述 struct 中包含的信息类型&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code&gt;indexed&lt;/code&gt;: &lt;code&gt;true&lt;/code&gt;，如果这个参数被定义为 indexed ，反之为 &lt;code&gt;false&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code&gt;anonymous&lt;/code&gt;: &lt;code&gt;true&lt;/code&gt;，如果 event 被定义为 anonymous&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;更新智能合约状态需要发送 transaction，transaction 需要等待验证，所以更新合约状态是非同步的，无法马上取得返回值。使用 Event 可以在状态更新成功后，将相关信息记录到 Log，并让监听这个 Event 的 DApp 或任何应用这个接口的程序收到通知。每笔 transaction 都有对应的 Log。&lt;/p&gt;
&lt;p&gt;所以简单来说，Event 可用來：1. 取得 function 更新合约状态的返回值 2. 也可作为合约另外的存储空间。&lt;/p&gt;
&lt;p&gt;Event 的参数分为：有 &lt;code&gt;indexed&lt;/code&gt;，和其他没有 &lt;code&gt;indexed&lt;/code&gt; 的。有 &lt;code&gt;indexed&lt;/code&gt; 的参数可以使用 filter，例如同一个 Event，我可以选择只监听从特定 address 发出来的交易。每笔 Log 的信息同样分为两个部分：Topics（长度最多为 4 的 array） 和 Data。有 &lt;code&gt;indexed&lt;/code&gt; 的参数会存储存在 Log 的 Topics，其他的存在 Data。如果定义为 &lt;code&gt;anonymous&lt;/code&gt;，就不会产生以下示例中的 Topics[0]，其值为 Event signature 的 hash，作为這個 Event 的 ID。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/11831773-fb419508dfc0d2bc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Event&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;event&lt;/span&gt; Set(address indexed _from, &lt;span&gt;uint&lt;/span&gt; value)
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;用一个简单的智能合约举个例子&lt;/h3&gt;
&lt;p&gt;这个智能合约包含：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;data&lt;/code&gt;：一个可修改的 state variable，会自动产生一个只能读取的 &lt;code&gt;data()&lt;/code&gt; function&lt;/li&gt;
&lt;li&gt;&lt;code&gt;set()&lt;/code&gt;：一个修改 &lt;code&gt;data&lt;/code&gt; 值的 function&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Set()&lt;/code&gt;：一个在每次修写 &lt;code&gt;data&lt;/code&gt; 时记录 Log 的 event&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;智能合约 Source Code：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
pragma solidity ^&lt;span&gt;0.4&lt;/span&gt;.&lt;span&gt;20&lt;/span&gt;&lt;span&gt;;
contract SimpleStorage {
    &lt;/span&gt;&lt;span&gt;uint&lt;/span&gt; &lt;span&gt;public&lt;/span&gt;&lt;span&gt; data;
    &lt;/span&gt;&lt;span&gt;event&lt;/span&gt; Set(address indexed _from, &lt;span&gt;uint&lt;/span&gt;&lt;span&gt; value);
    function &lt;/span&gt;&lt;span&gt;set&lt;/span&gt;(&lt;span&gt;uint&lt;/span&gt; x) &lt;span&gt;public&lt;/span&gt;&lt;span&gt; {
        data &lt;/span&gt;=&lt;span&gt; x;
        Set(msg.sender, x);
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;智能合约 ABI：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;59&quot;&gt;
&lt;pre&gt;
&lt;span&gt;[{
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;constant&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;true&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;inputs&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: [],
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;data&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;outputs&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: [{&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;uint256&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;}],
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;payable&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;false&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;stateMutabㄒility&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;view&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
    },
    {
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;anonymous&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;false&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;inputs&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: [{&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;indexed&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;true&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;_from&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;address&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;},{&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;indexed&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;false&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;uint256&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;}],
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Set&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;event&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
    },
    {
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;constant&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;false&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;inputs&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: [{&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;x&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;uint256&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;}],
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;set&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;outputs&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: [],
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;payable&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;false&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;stateMutability&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;nonpayable&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
}]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;取得 Ethereum 智能合约 ABI&lt;/h3&gt;
&lt;h4&gt;Solidity Compiler&lt;/h4&gt;
&lt;p&gt;可以用 Solidity Compiler 取得合约 ABI，我使用 JavaScript 版本的 Compiler 为例。&lt;/p&gt;
&lt;p&gt;安装：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
npm install solc -g
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;取得合约 ABI：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
solcjs simpleStorage.sol --abi
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;会生成一个 simpleStorage_sol_SimpleStorage.abi 文件，里面就是合约ABI 內容。&lt;/p&gt;
&lt;p&gt;也可以取得合约的 binary code：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
solcjs your_contract.sol --bin
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;Remix&lt;/h4&gt;
&lt;p&gt;同样的使用 Solidity Compiler，也可以用 Remix。在合约的 Details 可以看到完整的 ABI。可以在 Settings 中指定 Compiler 版本。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/11831773-4f94ee9fce3e3906.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Remix&lt;/p&gt;
&lt;h4&gt;Etherscan&lt;/h4&gt;
&lt;p&gt;许多知名合约会把合约 source code 放上 Etherscan 做验证，可以同时看到h 合约ABI。&lt;/p&gt;
&lt;div class=&quot;image-package&quot;&gt;
&lt;div class=&quot;image-container&quot;&gt;
&lt;div class=&quot;image-view&quot;&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/11831773-6cd385bc69aca28c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Etherscan&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;另外 Etherscan 提供 &lt;a href=&quot;https://link.jianshu.com/?t=https%3A%2F%2Fetherscan.io%2Fapis%23contracts&quot;&gt;API&lt;/a&gt;，可用来取得经过验证的合约 ABI。&lt;/p&gt;
</description>
<pubDate>Tue, 24 Apr 2018 15:22:00 +0000</pubDate>
<dc:creator>以太坊开发</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/helloworld2018/p/8934425.html</dc:identifier>
</item>
<item>
<title>【linux】---常用命令整理 - 雨点的名字</title>
<link>http://www.cnblogs.com/qdhxhz/p/8921654.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/qdhxhz/p/8921654.html</guid>
<description>
&lt;h2&gt;&lt;span&gt;一、ls命令&lt;/span&gt;&lt;span&gt;   &lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;    就是list的缩写，通过ls 命令不仅可以查看linux文件夹包含的文件，而且可以查看文件权限(包括目录、文件夹、文件权限)查看目录信息等等&lt;/p&gt;
&lt;p&gt;         常用参数搭配：&lt;/p&gt;
&lt;p&gt;         ls -a 列出目录所有文件，包含以.开始的隐藏文件&lt;/p&gt;
&lt;p&gt;         ls -A 列出除.及..的其它文件&lt;/p&gt;
&lt;p&gt;         ls -r 反序排列&lt;/p&gt;
&lt;p&gt;         ls -t 以文件修改时间排序&lt;/p&gt;
&lt;p&gt;         ls -S 以文件大小排序&lt;/p&gt;
&lt;p&gt;         ls -l 除了文件名之外，还将文件的权限、所有者、文件大小等信息详细列出来(可以直接写成 ll)&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;实例：&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;    &lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
ll name*      &lt;span&gt;#&lt;/span&gt;&lt;span&gt;列出当前目录中所有以“name”开头的目录的详细内容&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;&lt;span&gt;二、cd命令&lt;/span&gt;&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
cd /root/Docements      &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 切换到目录/root/Docements  &lt;/span&gt;
cd ./path               &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 切换到当前目录下的path目录中，“.”表示当前目录    &lt;/span&gt;
cd ../path              &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 切换到上层目录中的path目录中，“..”表示上一层目录  &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;&lt;span&gt;三、rm命令&lt;/span&gt;&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
-f ： &lt;span&gt;#&lt;/span&gt;&lt;span&gt;就是force的意思，忽略不存在的文件，不会出现警告消息  &lt;/span&gt;
-i ： &lt;span&gt;#&lt;/span&gt;&lt;span&gt;互动模式，在删除前会询问用户是否操作  &lt;/span&gt;
-r ： &lt;span&gt;#&lt;/span&gt;&lt;span&gt;递归删除，最常用于目录删除，它是一个非常危险的参数  &lt;/span&gt;

&lt;span&gt;#&lt;/span&gt;&lt;span&gt;举例&lt;/span&gt;
rm -i file &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 删除文件file，在删除之前会询问是否进行该操作  &lt;/span&gt;
rm -fr dir &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 强制删除目录dir中的所有文件  &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;&lt;span&gt;四、cp命令&lt;/span&gt;&lt;/h2&gt;
&lt;ol class=&quot;dp-xml&quot; start=&quot;1&quot;&gt;&lt;li class=&quot;alt&quot;&gt;-a ：将文件的特性一起复制  &lt;/li&gt;
&lt;li&gt;-p ：连同文件的属性一起复制，而非使用默认方式，与-a相似，常用于备份  &lt;/li&gt;
&lt;li&gt;-r ：递归持续复制，用于目录的复制行为   &lt;/li&gt;
&lt;/ol&gt;&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
cp /home/Test.java             &lt;span&gt;#&lt;/span&gt;&lt;span&gt;将home路径下的Test.java文件复制到当前目录下&lt;/span&gt;
cp -r dir1 dir2                &lt;span&gt;#&lt;/span&gt;&lt;span&gt;-r表示递归，将dir1代表的文件夹及里面的文件复制到dir2路径那里&lt;/span&gt;
cp -r mysql /usr/local/mysql   &lt;span&gt;#&lt;/span&gt;&lt;span&gt;把mysql文件夹所有文件复制到/usr/local/mysql目录下，没有会自动创建目录 &lt;br/&gt;&lt;span&gt;cp file1 file2 file3 dir&lt;/span&gt;       #把文件file1、file2、file3复制到目录dir中 &lt;br/&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;&lt;span&gt;五、mv命令&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;  &lt;span&gt; 移动文件或修改文件名，根据第二参数类型（如目录，则移动文件；如为文件则重命令该文件）。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;ol class=&quot;dp-xml&quot; start=&quot;1&quot;&gt;&lt;li class=&quot;alt&quot;&gt;-f ：force强制的意思，如果目标文件已经存在，不会询问而直接覆盖  &lt;/li&gt;
&lt;li&gt;-i ：若目标文件已经存在，就会询问是否覆盖  &lt;/li&gt;
&lt;li class=&quot;alt&quot;&gt;-u ：若目标文件已经存在，且比目标文件新，才会更新  &lt;/li&gt;
&lt;/ol&gt;&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
mv file1 file2 file3 dir  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 把文件file1、file2、file3移动到目录dir中  &lt;/span&gt;
mv file1 file2            &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 把文件file1重命名为file2  &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;&lt;span&gt;六、mkdir命令&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;      -m --mode=模式，设定权限&amp;lt;模式&amp;gt; (类似 chmod)，而不是 rwxrwxrwx 减 umask&lt;/p&gt;
&lt;p&gt;　　-p --parents 递归创建目录&lt;/p&gt;
&lt;p&gt;　　-v, --verbose 每次创建新目录都显示信息&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
mkdir abc              &lt;span&gt;#&lt;/span&gt;&lt;span&gt;创建一个空目录&lt;/span&gt;
mkdir -p test/test1    &lt;span&gt;#&lt;/span&gt;&lt;span&gt;递归创建多个目录&lt;/span&gt;
mkdir -v hao           &lt;span&gt;#&lt;/span&gt;&lt;span&gt;创建新目录都显示信息&lt;/span&gt;
mkdir -m 777 pc        &lt;span&gt;#&lt;/span&gt;&lt;span&gt;创建权限为777的目录&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;&lt;span&gt;7、pwd命令&lt;/span&gt;&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
pwd        &lt;span&gt;#&lt;/span&gt;&lt;span&gt;查看当前路径&lt;/span&gt;
pwd -P    &lt;span&gt;#&lt;/span&gt;&lt;span&gt;查看软链接的实际路径&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;&lt;span&gt;8、find命令&lt;/span&gt;    &lt;/h2&gt;
&lt;pre&gt;
 -&lt;span&gt;name 按照文件名查找文件

 -&lt;span&gt;perm 按文件权限查找文件

 -&lt;span&gt;user 按文件属主查找文件

 -&lt;span&gt;group  按照文件所属的组来查找文件。

 -&lt;span&gt;amin n   查找系统中最后N分钟访问的文件

 -atime n  查找系统中最后n*&lt;span&gt;24小时访问的文件

 -&lt;span&gt;mmin n   查找系统中最后N分钟被改变文件数据的文件

 -mtime n  查找系统中最后n*24小时被改变文件数据的文件&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
 find ./ -name &lt;span&gt;'&lt;/span&gt;&lt;span&gt;*.log&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;    &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 在当前目录查找 以.log结尾的文件。 &quot;. &quot;代表当前目录&lt;/span&gt;
&lt;span&gt;
 find &lt;/span&gt;/opt -perm 777      &lt;span&gt;#&lt;/span&gt;&lt;span&gt;查找/opt目录下 权限为 777的文件&lt;/span&gt;

 -xargs                   &lt;span&gt;#&lt;/span&gt;&lt;span&gt;find命令把匹配到的文件传递给xargs命令，而xargs命令每次只获取一部分文件而不是全部，不像-exec选项那样。这样它可以先处理最先获取的一部分文件，然后是下一批，并如此继续下去。&lt;/span&gt;
&lt;span&gt;
find &lt;/span&gt;/ -name mysql|xargs rm -rf   &lt;span&gt;#&lt;/span&gt;&lt;span&gt;找到所有文件名为mysql文件，并全部删除。&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;&lt;span&gt;9、tar命令&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;只能使用下面的某一个选项来指定tar要执行的动作。可以通过在选项后面跟一个或多个修饰符来改变该选项的行为&lt;/p&gt;
&lt;p&gt;    -c            创建归档文件&lt;/p&gt;
&lt;p&gt;    -u            将file-list中的文件添加到归档文件&lt;/p&gt;
&lt;p&gt;    -x            从归档文件中提取file-list并把它写入磁盘&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;修饰符&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;-f filename              使用filename来指出要创建或从中提取的归档文件的文件名&lt;/p&gt;
&lt;p&gt;-j                             在创建归档文件或从归档文件中提取文件时，使用bzip2方式来进行压缩和解压缩&lt;/p&gt;
&lt;p&gt;-z                            在创建归档文件或从归档文件中提取文件时，使用gzip方式来进行压缩和解压缩&lt;/p&gt;
&lt;p&gt;-v                            显示所有过程&lt;/p&gt;
&lt;p&gt;-t                             列出归档文件中的目录&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
tar -cvf demo.tar a b c       &lt;span&gt;#&lt;/span&gt;&lt;span&gt;将a b c打包成一个名为demo.tar的归档文件，并显示打包的文件&lt;/span&gt;
tar -xvf demo.tar             &lt;span&gt;#&lt;/span&gt;&lt;span&gt;解压名为demo.tar的归档文件到本目录，并显示解压的文件&lt;/span&gt;
tar -zcvf demo.tar.gz a b c   &lt;span&gt;#&lt;/span&gt;&lt;span&gt;将a b c 三文件用gzip的方式打包并压缩成demo.tar.gz&lt;/span&gt;
tar -zxvf demo.tar.gz         &lt;span&gt;#&lt;/span&gt;&lt;span&gt;用gunzip的的方式解压demo.tar.gz文件&lt;/span&gt;
tar -jcvf demo.tar.bz2 a b c  &lt;span&gt;#&lt;/span&gt;&lt;span&gt;将a b c三文件用bzip2的方式压缩并打包为demo.tar.bz2&lt;/span&gt;
tar -jxvf demo.tar.bz2        &lt;span&gt;#&lt;/span&gt;&lt;span&gt;将demo.tar.bz2用bunzip2的方式解压缩到当前目录&lt;br/&gt;&lt;span&gt;tar -cvf jpg.tar *.jpg&lt;/span&gt;        #将目录里所有jpg文件打包成tar.jpg&lt;br/&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;&lt;span&gt;10、ps命令&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;  ps(process status)，用来查看当前运行的进程状态，一次性查看，如果需要动态连续结果使用top&lt;/p&gt;
&lt;p&gt;         linux上进程有5种状态:&lt;/p&gt;
&lt;p&gt;         1. 运行(正在运行或在运行队列中等待)&lt;/p&gt;
&lt;p&gt;         2. 中断(休眠中, 受阻, 在等待某个条件的形成或接受到信号)&lt;/p&gt;
&lt;p&gt;         3. 不可中断(收到信号不唤醒和不可运行, 进程必须等待直到有中断发生)&lt;/p&gt;
&lt;p&gt;         4. 僵死(进程已终止, 但进程描述符存在, 直到父进程调用wait4()系统调用后释放)&lt;/p&gt;
&lt;p&gt;         5. 停止(进程收到SIGSTOP, SIGSTP, SIGTIN, SIGTOU信号后停止运行运行)&lt;/p&gt;
&lt;p&gt;         命令参数：&lt;/p&gt;
&lt;p&gt;         -A 显示所有进程&lt;/p&gt;
&lt;p&gt;         a 显示所有进程&lt;/p&gt;
&lt;p&gt;        - e 显示环境变量&lt;/p&gt;
&lt;p&gt;        - f 显示进程间的关系&lt;/p&gt;
&lt;p&gt;         r 显示当前终端运行的进程&lt;/p&gt;
&lt;p&gt;         -aux 显示所有包含其它使用的进程&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
ps -A                &lt;span&gt;#&lt;/span&gt;&lt;span&gt;显示所有进程信息&lt;/span&gt;
ps -u root           &lt;span&gt;#&lt;/span&gt;&lt;span&gt;显示指定用户信息&lt;/span&gt;
ps -ef               &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 显示所有进程信息，连同命令行&lt;/span&gt;
ps -ef |grep java    &lt;span&gt;#&lt;/span&gt;&lt;span&gt;显示java 进程是否存在&lt;/span&gt;
  &lt;span&gt;#&lt;/span&gt;&lt;span&gt;grep命令是查找，中间的|是管道命令 是指ps命令与grep同时执行&lt;/span&gt;
ps -aux |grep java   &lt;span&gt;#&lt;/span&gt;&lt;span&gt;显示java 进程是否存在&lt;/span&gt;
  &lt;span&gt;#&lt;/span&gt;&lt;span&gt;上面两个其实没有多大区别只是：aux可以查看进程的CPU占用率和内存占用率。ef可以查看进程的父进程ID和完整的COMMAND命令&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;&lt;span&gt;11、top命令&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;       top显示系统当前的进程和其他状况,是一个动态显示过程，显示当前系统正在执行的进程的相关信息，包括进程ID、内存占用率、CPU占用率等&lt;/p&gt;
&lt;p&gt;  常用参数：&lt;/p&gt;
&lt;p&gt;         -c 显示完整的进程命令&lt;/p&gt;
&lt;p&gt;         -s 保密模式&lt;/p&gt;
&lt;p&gt;         -p &amp;lt;进程号&amp;gt; 指定进程显示&lt;/p&gt;
&lt;p&gt;         -n &amp;lt;次数&amp;gt;循环显示次数&lt;/p&gt;
&lt;pre&gt;
   -d 指定每两次屏幕信息刷新之间的时间间隔。 
&lt;/pre&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
top       &lt;span&gt;#&lt;/span&gt;&lt;span&gt;每隔5秒显式所有进程的资源占用情况（默认是5秒）&lt;/span&gt;
top -d 2  &lt;span&gt;#&lt;/span&gt;&lt;span&gt;每隔2秒显式所有进程的资源占用情况&lt;/span&gt;
top -c    &lt;span&gt;#&lt;/span&gt;&lt;span&gt;每隔5秒显式进程的资源占用情况，并显示进程的命令行参数(默认只有进程名)&lt;/span&gt;
top -p 12345 -p 6789   &lt;span&gt;#&lt;/span&gt;&lt;span&gt;每隔5秒显示pid是12345和pid是6789的两个进程的资源占用情况&lt;/span&gt;
top -d 2 -c -p 123456  &lt;span&gt;#&lt;/span&gt;&lt;span&gt;每隔2秒显示pid是12345的进程的资源使用情况，并显式该进程启动的命令行参数&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;&lt;span&gt;12、kill命令&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;      发送指定的信号到相应进程。&lt;/p&gt;
&lt;p&gt;   常见参数&lt;/p&gt;
&lt;p&gt;        HUP    1    终端断线&lt;/p&gt;
&lt;p&gt;        INT     2    中断（同 Ctrl + C）&lt;/p&gt;
&lt;p&gt;      QUIT    3    退出（同 Ctrl + \）&lt;/p&gt;
&lt;p&gt;    TERM   15    终止&lt;/p&gt;
&lt;p&gt;       KILL    9    强制终止&lt;/p&gt;
&lt;p&gt;    CONT   18    继续（与STOP相反， fg/bg命令）&lt;/p&gt;
&lt;p&gt;    STOP    19    暂停（同 Ctrl + Z）&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
 kill -15 pid    &lt;span&gt;#&lt;/span&gt;&lt;span&gt;让进程正常退出 。 既然信号 15 是退出进程的正确方式，那它也应该是最常用的方式，因而我们可以省略参数 -15。&lt;/span&gt;
 kill -9 pid     &lt;span&gt;#&lt;/span&gt;&lt;span&gt;当进程出现了异常状况，不能通过信号15正常退出时，我们就需要通过非常的手段直接终结掉进程。所谓的非常手段就是传递信号 9 给目标进程！&lt;/span&gt;
 kill -15 $(ps -ef | grep peidalinux)   &lt;span&gt;#&lt;/span&gt;&lt;span&gt;杀死指定进程&lt;br/&gt;#不是特殊情况，建议有15就可以了，慎用9哦&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;&lt;span&gt;13、chmod命令&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;    &lt;span&gt;用于改变linux系统文件或目录的访问权限。用它控制文件或目录的访问权限。该命令有两种用法。一种是包含字母和操作符表达式的文字设定法；另一种是包含数字的数字设定法。&lt;/span&gt;&lt;/span&gt;&lt;span&gt;  &lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;   &lt;strong&gt;常用参数：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;         -c 当发生改变时，报告处理信息&lt;/p&gt;
&lt;p&gt;         -R 处理指定目录以及其子目录下所有文件&lt;/p&gt;
&lt;p&gt;   &lt;strong&gt;权限范围&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;         u ：目录或者文件的当前的用户&lt;/p&gt;
&lt;p&gt;         g ：目录或者文件的当前的群组&lt;/p&gt;
&lt;p&gt;         o ：除了目录或者文件的当前用户或群组之外的用户或者群组&lt;/p&gt;
&lt;p&gt;         a ：所有的用户及群组&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; 三种基本权限&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;   R           读          数值表示为4&lt;/p&gt;
&lt;p&gt;   W          写          数值表示为2&lt;/p&gt;
&lt;p&gt;   X           可执行   数值表示为1&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1090617/201804/1090617-20180424211421410-875565897.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; 如图所示，dump.rdb文件的权限为-rw-r--r--&lt;/p&gt;
&lt;p&gt;  -rw-r--r--一共十个字符，分成四段。&lt;/p&gt;
&lt;p&gt;  第一个字符“-”表示普通文件；这个位置还可能会出现“l”链接；“d”表示目录&lt;/p&gt;
&lt;p&gt;  第二三四个字符“rw-”表示当前所属用户的权限。   所以用数值表示为4+2=6&lt;/p&gt;
&lt;p&gt;  第五六七个字符“r--”表示当前所属组的权限。       所以用数值表示为4&lt;/p&gt;
&lt;p&gt;  第八九十个字符“r--”表示其他用户权限。              所以用数值表示为4&lt;/p&gt;
&lt;p&gt;  所以操作此文件的权限用数值表示为644 &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt; 更改权限&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;sudo chmod [u所属用户  g所属组  o其他用户  a所有用户]  [+增加权限  -减少权限]  [r  w  x]   目录名 &lt;/p&gt;
&lt;p&gt;例如：有一个文件filename，权限为“-rw-r----x” ,将权限值改为&quot;-rwxrw-r-x&quot;，用数值表示为765&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;sudo chmod u+x g+w o+r  filename&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;上面的例子可以用数值表示&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;sudo chmod 765 filename&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;&lt;span&gt;14、grep命令&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;   强大的文本搜索命令，grep(Global Regular Expression Print)全局正则表达式搜索&lt;/p&gt;
&lt;p&gt;   grep太强大了，我这里就举几个常见的。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
ps -ef|grep svn                  &lt;span&gt;#&lt;/span&gt;&lt;span&gt;查找指定进程&lt;/span&gt;
grep -n &lt;span&gt;'&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; nginx.conf          &lt;span&gt;#&lt;/span&gt;&lt;span&gt;在nginx.conf查找包含&quot;li&quot;的行，同时显示行号&lt;/span&gt;
grep &lt;span&gt;'&lt;/span&gt;&lt;span&gt;linux&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; test.txt test2.txt  &lt;span&gt;#&lt;/span&gt;&lt;span&gt;从多个文件中查找关键词&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1090617/201804/1090617-20180424215251182-790732063.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h2&gt;&lt;span&gt; 15、&lt;strong&gt;vim命令&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;    vim三种模式：命令模式、插入模式、编辑模式。使用ESC或i或：来切换模式。&lt;/p&gt;
&lt;p&gt;  命令模式下：&lt;/p&gt;
&lt;p&gt;               :q                      退出&lt;/p&gt;
&lt;p&gt;              :q!                     强制退出&lt;/p&gt;
&lt;p&gt;             :wq                   保存并退出&lt;/p&gt;
&lt;p&gt;             :set number     显示行号&lt;/p&gt;
&lt;p&gt;             :set nonumber  隐藏行号&lt;/p&gt;
&lt;p&gt;              /apache            在文档中查找apache 按n跳到下一个，shift+n上一个&lt;/p&gt;
&lt;p&gt;               yyp                   复制光标所在行，并粘贴&lt;/p&gt;
&lt;p&gt;              h(左移一个字符←)、j(下一行↓)、k(上一行↑)、l(右移一个字符→)&lt;/p&gt;

&lt;h2&gt;&lt;span&gt;16、cat命令&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;    cat主要有三大功能：&lt;/p&gt;
&lt;p&gt;           1.一次显示整个文件:cat filename&lt;/p&gt;
&lt;p&gt;           2.从键盘创建一个文件:cat &amp;gt; filename 只能创建新文件,不能编辑已有文件.&lt;/p&gt;
&lt;p&gt;           3.将几个文件合并为一个文件:cat file1 file2 &amp;gt; file&lt;/p&gt;
&lt;p&gt;          -b对非空输出行号&lt;/p&gt;
&lt;p&gt;          -n输出所有行号&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
cat -n nginx.conf                        &lt;span&gt;#&lt;/span&gt;&lt;span&gt;查看文件并显示行号&lt;/span&gt;
cat -n log2012.log log2013.log           &lt;span&gt;#&lt;/span&gt;&lt;span&gt;把 log2012.log 的文件内容加上行号后输入 log2013.log 这个文件里&lt;/span&gt;
 cat -b log2012.log log2013.log log.log  &lt;span&gt;#&lt;/span&gt;&lt;span&gt;把 log2012.log 和 log2013.log 的文件内容加上行号（空白行不加）之后将内容附加到 log.log 里&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1090617/201804/1090617-20180424220711964-531259559.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h2&gt;&lt;span&gt;17、more命令&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;  功能类似于cat, more会以一页一页的显示方便使用者逐页阅读，而最基本的指令就是按空白键（space）就往下一页显示，按 b 键就会往回（back）一页显示&lt;/p&gt;
&lt;p&gt;  &lt;strong&gt;命令参数&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;         +n      从笫n行开始显示&lt;/p&gt;
&lt;p&gt;         -n       定义屏幕大小为n行&lt;/p&gt;
&lt;p&gt;         +/pattern 在每个档案显示前搜寻该字串（pattern），然后从该字串前两行之后开始显示 &lt;/p&gt;
&lt;p&gt;         -c       从顶部清屏，然后显示&lt;/p&gt;
&lt;p&gt;         -d       提示“Press space to continue，’q’ to quit（按空格键继续，按q键退出）”，禁用响铃功能&lt;/p&gt;
&lt;p&gt;         -l        忽略Ctrl+l（换页）字符&lt;/p&gt;
&lt;p&gt;         -s       把连续的多个空行显示为一行&lt;/p&gt;
&lt;p&gt;     &lt;strong&gt;常用操作命令&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;         Enter    向下n行，需要定义。默认为1行&lt;/p&gt;
&lt;p&gt;         空格键  向下滚动一屏&lt;/p&gt;
&lt;p&gt;         Ctrl+B  返回上一屏&lt;/p&gt;
&lt;p&gt;         =       输出当前行的行号&lt;/p&gt;
&lt;p&gt;         V      调用vi编辑器&lt;/p&gt;
&lt;p&gt;         !命令   调用Shell，并执行命令&lt;/p&gt;
&lt;p&gt;         q       退出more&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
ls -l | more -5   &lt;span&gt;#&lt;/span&gt;&lt;span&gt;在所列出文件目录详细信息，借助管道使每次显示5行 按空格键显示下五行，enter向下1行。具体看上面参数。&lt;br/&gt;&lt;span&gt;more +3 text.txt&lt;/span&gt;  #显示文件中从第3行起的内容&lt;br/&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;&lt;span&gt;18、less命令&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;    less 与 more 类似，但使用 less 可以随意浏览文件，而 more 仅能向前移动，却不能向后移动，而且 less 在查看之前不会加载整个文件。&lt;/p&gt;

&lt;h2&gt;&lt;span&gt;19、tail命令&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;   用于显示指定文件末尾内容，不指定文件时，作为输入信息进行处理。常用查看日志文件。&lt;/p&gt;
&lt;p&gt;         常用参数：&lt;/p&gt;
&lt;p&gt;         -f 循环读取（常用于查看递增的日志文件）&lt;/p&gt;
&lt;p&gt;         -n&amp;lt;行数&amp;gt; 显示行数（从后向前）&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
  tail -f ping.log  &lt;span&gt;#&lt;/span&gt;&lt;span&gt;循环读取逐渐增加的文件内容&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;        这个可以用来看正式服报错日志&lt;/p&gt;

&lt;h2&gt;&lt;span&gt;20、chown命令&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;  chown将指定文件的拥有者改为指定的用户或组，用户可以是用户名或者用户ID；组可以是组名或者组ID；文件是以空格分开的要改变权限的文件列表，支持通配符&lt;/p&gt;
&lt;p&gt;         -c 显示更改的部分的信息&lt;/p&gt;
&lt;p&gt;         -R 处理指定目录及子目录&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
　chown mail:mail log2012.log   &lt;span&gt;#&lt;/span&gt;&lt;span&gt;改变拥有者和群组&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1090617/201804/1090617-20180424224222173-1163522295.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
chown root: log2012.log      &lt;span&gt;#&lt;/span&gt;&lt;span&gt;改变文件拥有者和群组&lt;/span&gt;
chown :mail log2012.log      &lt;span&gt;#&lt;/span&gt;&lt;span&gt;改变文件群组&lt;/span&gt;
chown -R -v root:mail test6  &lt;span&gt;#&lt;/span&gt;&lt;span&gt;改变指定目录以及其子目录下的所有文件的拥有者和群组&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt; &lt;span&gt;参考&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;    &lt;span&gt;&lt;span&gt;&lt;a href=&quot;http://www.cnblogs.com/gaojun/p/3359355.html&quot; target=&quot;_blank&quot;&gt;1.linux常用命令&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;    &lt;a href=&quot;https://www.cnblogs.com/ITtangtang/p/3950497.html&quot; target=&quot;_blank&quot;&gt;2.grep命令详解&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;    &lt;a href=&quot;http://www.cnblogs.com/peida/archive/2012/12/04/2800684.html&quot; target=&quot;_blank&quot;&gt;3.chown命令详解&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;    &lt;a href=&quot;http://www.cnblogs.com/ggjucheng/archive/2012/01/08/2316399.html&quot; target=&quot;_blank&quot;&gt;4.top命令详解&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;    &lt;a href=&quot;http://www.cnblogs.com/qzqdy/p/8203212.html&quot; target=&quot;_blank&quot;&gt;5.tar命令详解&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;    &lt;a href=&quot;http://www.cnblogs.com/peida/archive/2012/12/19/2824418.html&quot; target=&quot;_blank&quot;&gt;6.ps命令详解&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;
&lt;span&gt;&lt;strong&gt;想的太多，做的太少，中间的落差就是烦恼，要么去做，要么别想 &lt;strong&gt;中尉【12】&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;
&lt;/pre&gt;

</description>
<pubDate>Tue, 24 Apr 2018 14:52:00 +0000</pubDate>
<dc:creator>雨点的名字</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/qdhxhz/p/8921654.html</dc:identifier>
</item>
<item>
<title>基于移动端的问答系统--需求分析与原型设计 - compassblog</title>
<link>http://www.cnblogs.com/compassblog/p/8934229.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/compassblog/p/8934229.html</guid>
<description>&lt;p&gt;&lt;span&gt;&lt;strong&gt;1、结对者&lt;/strong&gt;：2015034643032 孔潭活、2015034643023 周宏杰&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;2、需求分析模型：&lt;/strong&gt;NABCD 模型&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;3、原型设计工具：&lt;/strong&gt;Axure RP 8、墨刀、FSCapture&lt;/span&gt;&lt;/p&gt;



&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1322792/201804/1322792-20180421201235175-326335113.jpg&quot; alt=&quot;&quot; width=&quot;758&quot; height=&quot;569&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1322792/201804/1322792-20180421201151907-723540317.jpg&quot; alt=&quot;&quot; width=&quot;757&quot; height=&quot;567&quot;/&gt;&lt;/p&gt;


&lt;h2 id=&quot;nneed需求&quot;&gt;1、N（Need，需求）：&lt;/h2&gt;
&lt;ul readability=&quot;0.5&quot;&gt;&lt;li readability=&quot;1&quot;&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;大学生作为社会新技术、新思想的前沿群体，在大学期间能否将自己锻造成特色鲜明的应用型人才尤为重要，而这款基于移动端的问答系统可以帮他们保持前沿的思维与认知&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;这个问答系统在大学生离开课堂后，在课外遇到自己无法解决的问题时，自学和求学的能力稍显疲软是的时候，在线的互动可以提升他们的求知欲&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;span&gt;在网络上百度、360等搜索引擎和各种平台涉及领域广，提供的信息良莠不齐、有些信息不具时效性甚至还出现信息出错等情况时，这款基于移动端的问答系统可以帮他们获得精确的第一手信息，并配备健全的在线自学与咨询体系&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;&lt;span&gt;对于高校学生来讲，这个问答系统能够使得新生得到老生和教师的指导，了解企业的就业实习信息、学习大量的经验，因此可以使得他们成长的高度会远远高于原先的成长高度&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;aapproach做法&quot;&gt;2、A（Approach，做法）：&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;　　这个基于移动端的问答平台在校园中能有一个针对大学生高质量垂直交流的知识共享平台，将学生、教师以及企业统一联系起来，让学生能在课堂以外，能够得到老生和教师的指导，了解企业的就业实习信息、学习大量的经验，成长的高度会远远高于原先的成长高度。当这群新生成长起来，他们又会去给新一届的新生解惑，新的新生得指导会比之前的新生得到的还要好，新的新生成长起来的高度再一次提高，如此良性循环下去，该校会形成自己内部的专属学习交流圈，帮助新生快速适应大学的学习生活，同时也为企业输送人才铺下技术基础和提供了招聘渠道，可以说是开辟了大学课堂以外的学习辅导途径。&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;       学生注册登录平台，即可发布校园日常问题和学术问题，查看校园最新资讯。日常问题可以查问校园学习攻略、周边攻略、比赛详情、心理调节、人生规划、就业实习、社团活动等；学术问题可以让学生探讨专业问题，解决学习上的困惑，我们会与校方合作，邀请老师和优秀的师兄师姐进行解答；校园资讯包括最新的比赛通知、校内企业实训课、校内举办的活动等，比赛资源来自于网络上的网站搜寻和校内官网的发布，涵盖各专业。&lt;/span&gt;&lt;/p&gt;

&lt;h2 id=&quot;bbenefit好处&quot;&gt;3、B（Benefit，好处）：&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;       当在读的高校学生会遇到各种问题，仅仅向网上的百度求助和向身边的人请教是远远不够的。而这样一个专门针对高校师生面对的各种问题的问答平台，供高校师生使用，在这个平台上在读的高校学生可以发表一些日常遇到的问题或者难以独自解决的问题，平台回答者都是有经验的师兄或者是老师，能够及时给提问者带来优秀的答案。在“校答人”平台上，学生可以掌握一手校园资讯。“校答人”平台上涉及学习、竞赛、社团、心理、职业方向与人生规划以及就业实习等方面，用户可以通过提问获取答复，自己也可以依据自己的能力，充当回答者为他人排忧解难。&lt;/span&gt;&lt;/p&gt;

&lt;h2 id=&quot;ccompetitors竞争&quot;&gt;4、C（Competitors，竞争）：&lt;/h2&gt;
&lt;p align=&quot;left&quot;&gt;      &lt;span&gt; 现在的问答平台正逐渐打破以往免费分享知识的惯性思维，正在转向提供高质量回答的知识付费，向共享经济领域进发，知识付费问答平台越来越受人们关注，目前比较有影响力的付费平台有大弓、知乎、分答等等。016年，有知识付费意愿的用户暴涨了3倍，知识付费用户达到近5000万人，截止到2017年3月，用户知识付费可估算的总体经济规模为100-150亿左右。由于各行各业的人数增多，自身身份和职业常见问题的知识需求增加，当前问答平台正在向专业化与行业化过渡发展，比如有餐饮版的“餐答”，职场版的“业问”，医疗版的“来问医生”，体育版的“映答”，知识分享平台的内容生态还在不断丰富创新，但目前却没有针对大学生高质量垂直交流的知识共享平台。众所周知，如今大学生是一个非常庞大的群体。&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;     如下图所示，截止2016年，大学生数量已由15年前的114万人狂飙至765万人，该群体之大，让我们不得不思考着为这个群体定制一些属于他们青春活力的产品，因此这款基于移动端的问答平台就是在免费与付费的梯度上展开竞争，当然，也可以使用先免费，积累到一定用户后再考虑收费问题，关键在于有付费必定存在免费。&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt; &lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1322792/201804/1322792-20180424215028795-1770955696.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;


&lt;h2 id=&quot;ddelivery推广&quot;&gt;5、D（Delivery，推广）：&lt;/h2&gt;
&lt;p&gt;　　&lt;span&gt;原型设计完成后，即可进行开发，并通过相应的广告平台做相应宣传与推广，当然，起步阶段为了推广，可做相应的优惠政策。&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt; &lt;/h2&gt;


&lt;p&gt;&lt;span&gt;&lt;strong&gt;注册页面原型 &lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1322792/201804/1322792-20180424215359333-228998381.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;


&lt;p&gt;&lt;span&gt;&lt;strong&gt;登录页面原型&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1322792/201804/1322792-20180424215558483-2083503890.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;


&lt;p&gt;&lt;strong&gt;&lt;span&gt;首页原型&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1322792/201804/1322792-20180424215811812-1885704995.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;


&lt;p&gt;&lt;strong&gt;&lt;span&gt;校园页面原型&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1322792/201804/1322792-20180424215942402-1926574522.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt;&lt;strong&gt;&lt;span&gt;提问页面原型&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1322792/201804/1322792-20180424220113119-1433705296.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;


&lt;p&gt;&lt;strong&gt;&lt;span&gt;消息页面原型&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1322792/201804/1322792-20180424220242019-1030441378.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;


&lt;p&gt;&lt;strong&gt;&lt;span&gt;我的页面原型&lt;/span&gt;&lt;/strong&gt; &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1322792/201804/1322792-20180424220359854-350770007.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt;&lt;span&gt;　　兵马未动，粮草先行，或许开发中也可以应用这个道理吧，在时间充足的情况下，多写这种需求分析与原型设计是很有必要的，然而现实骨感，很多事情是不会以一个人的意志为转移的，我们现在的目标也不是成为全栈工程师，而是先往一个方向深入学习，而不是这样所谓的走一个完整项目流程，一个完整的开发流程应该走，但不是这样走，言尽于此，毕竟已经写完了......&lt;/span&gt;&lt;span&gt;我不是个麻瓜，但在所有的事情过程中，我最大的感受只有合作，我也一直坚信我们应该学会合作，但我们最缺乏的就是合作......&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　一言难尽，说来话长，想听的关注微信公众号 compassblog ，直接后台联系我吧。&lt;/span&gt;&lt;/p&gt;



&lt;table border=&quot;1&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody readability=&quot;6&quot;&gt;&lt;tr&gt;&lt;td&gt;
&lt;p align=&quot;left&quot;&gt; &lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p align=&quot;left&quot;&gt; &lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p align=&quot;left&quot;&gt;预计耗时（分钟）&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p align=&quot;left&quot;&gt;实际耗时（分钟）&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
&lt;p align=&quot;left&quot;&gt;Planning&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p align=&quot;left&quot;&gt;计划&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p align=&quot;left&quot;&gt;30&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p align=&quot;left&quot;&gt;30&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td&gt;
&lt;p align=&quot;left&quot;&gt;Estimate&lt;/p&gt;
&lt;/td&gt;
&lt;td readability=&quot;5&quot;&gt;
&lt;p align=&quot;left&quot;&gt;估计这个任务需要多少时间&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p align=&quot;left&quot;&gt;60&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p align=&quot;left&quot;&gt;60&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
&lt;p align=&quot;left&quot;&gt;Development&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p align=&quot;left&quot;&gt;开发&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p align=&quot;left&quot;&gt;120&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p align=&quot;left&quot;&gt;120&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
&lt;p align=&quot;left&quot;&gt;Analysis&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p align=&quot;left&quot;&gt;需求分析&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p align=&quot;left&quot;&gt;20&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p align=&quot;left&quot;&gt;20&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
&lt;p align=&quot;left&quot;&gt;Design Spec&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p align=&quot;left&quot;&gt;生成设计文档&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p align=&quot;left&quot;&gt;0 &lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p align=&quot;left&quot;&gt;0&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td&gt;
&lt;p align=&quot;left&quot;&gt;Design Review&lt;/p&gt;
&lt;/td&gt;
&lt;td readability=&quot;5&quot;&gt;
&lt;p align=&quot;left&quot;&gt;设计复审（和同事审核设计文档）&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p align=&quot;left&quot;&gt;0&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p align=&quot;left&quot;&gt;0&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td&gt;
&lt;p align=&quot;left&quot;&gt;Coding Standerd&lt;/p&gt;
&lt;/td&gt;
&lt;td readability=&quot;5&quot;&gt;
&lt;p align=&quot;left&quot;&gt;代码规范（为目前的开发制定合适的规范）&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p align=&quot;left&quot;&gt;0 &lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p align=&quot;left&quot;&gt;0&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
&lt;p align=&quot;left&quot;&gt;Design&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p align=&quot;left&quot;&gt;具体设计&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p align=&quot;left&quot;&gt;30&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p align=&quot;left&quot;&gt;50&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
&lt;p align=&quot;left&quot;&gt;Coding&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p align=&quot;left&quot;&gt;具体编码&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p align=&quot;left&quot;&gt;0&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p align=&quot;left&quot;&gt;0&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
&lt;p align=&quot;left&quot;&gt;Code Review&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p align=&quot;left&quot;&gt;代码复审&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p align=&quot;left&quot;&gt;0&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p align=&quot;left&quot;&gt;0&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td&gt;
&lt;p align=&quot;left&quot;&gt;Text&lt;/p&gt;
&lt;/td&gt;
&lt;td readability=&quot;5&quot;&gt;
&lt;p align=&quot;left&quot;&gt;测试（自测，修改代码，提交修改）&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p align=&quot;left&quot;&gt;0&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p align=&quot;left&quot;&gt;0&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
&lt;p align=&quot;left&quot;&gt;Reporting&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p align=&quot;left&quot;&gt;报告&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p align=&quot;left&quot;&gt;30&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p align=&quot;left&quot;&gt;50&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
&lt;p align=&quot;left&quot;&gt;Text Report&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p align=&quot;left&quot;&gt;测试报告&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p align=&quot;left&quot;&gt;20&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p align=&quot;left&quot;&gt;30&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
&lt;p align=&quot;left&quot;&gt;Size Measurement&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p align=&quot;left&quot;&gt;计算工作量&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p align=&quot;left&quot;&gt;2&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p align=&quot;left&quot;&gt; 1&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;6&quot;&gt;&lt;td readability=&quot;5&quot;&gt;
&lt;p align=&quot;left&quot;&gt;Postmortem &amp;amp; Process Improvement Plan&lt;/p&gt;
&lt;/td&gt;
&lt;td readability=&quot;5&quot;&gt;
&lt;p align=&quot;left&quot;&gt;事后总结，并提出过程改进计划&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p align=&quot;left&quot;&gt;0&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p align=&quot;left&quot;&gt; 0&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
&lt;p align=&quot;left&quot;&gt;Sum&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p align=&quot;left&quot;&gt;合计&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p align=&quot;left&quot;&gt;312&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p align=&quot;left&quot;&gt;361&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;

&lt;p&gt;&lt;strong&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1322792/201804/1322792-20180424222250345-247681575.jpg&quot; alt=&quot;&quot;/&gt;&lt;/strong&gt;&lt;/p&gt;

</description>
<pubDate>Tue, 24 Apr 2018 14:37:00 +0000</pubDate>
<dc:creator>compassblog</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/compassblog/p/8934229.html</dc:identifier>
</item>
<item>
<title>Recycleview实现复杂布局 - zhaoyinglong</title>
<link>http://www.cnblogs.com/zhaoyinglong/p/8934108.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/zhaoyinglong/p/8934108.html</guid>
<description>&lt;p&gt;首先 附上Demo链接和效果供大家参考&lt;br/&gt;&lt;a href=&quot;https://github.com/zhaoyinglong/RecycleViewXitem&quot;&gt;Demo&lt;/a&gt;&lt;br/&gt;&lt;img src=&quot;http://p6tbfisad.bkt.clouddn.com/xitem.png&quot; alt=&quot;image&quot;/&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;实现思路&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;代码思考&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;hr/&gt;&lt;h2 id=&quot;section&quot;/&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;时间是一切财富中最宝贵的财富。 —— 德奥弗拉斯多&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;实现思路&quot;&gt;实现思路&lt;/h2&gt;
&lt;p&gt;开始看到设计稿子的时候，就在考虑这种参差不齐的布局。是不是有得考虑对数据的重新组装和计算每个空白区域的位置等等，因为之前做过类似的补空白的item。但感觉这个要是算起来会更加复杂 就在考虑有没有比较简单的实现思路&lt;/p&gt;
&lt;ol readability=&quot;11&quot;&gt;&lt;li&gt;首先我想到了用嵌套的方式去实现，但是那样的话，性能会受到很大的影响。因为UI上滑动的卡顿，是我们最不想见到的情况了。&lt;/li&gt;
&lt;li&gt;经过和朋友的交流，他之前实现过类似得。不过我也抛弃他的做法。因为觉得他的也很复杂，感觉比较难维护&lt;/li&gt;
&lt;li readability=&quot;26&quot;&gt;
&lt;p&gt;不过受到他的一些启发，最后通过对数据的处理和实现一个核心方法，实现了最终的效果&lt;/p&gt;
&lt;h3 id=&quot;核心代码&quot;&gt;核心代码&lt;/h3&gt;
&lt;p&gt;1.对后台返回的数据进行在整合，类型划分&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode kotlin&quot;&gt;
&lt;code class=&quot;sourceCode kotlin&quot;&gt;&lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; Data {
&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; type: &lt;span class=&quot;dt&quot;&gt;Int&lt;/span&gt;? = &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; kname: String? = &lt;span class=&quot;st&quot;&gt;&quot;&quot;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; year: String? = &lt;span class=&quot;st&quot;&gt;&quot;&quot;&lt;/span&gt;
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;2.重写Recycleview的onAttachedToRecyclerView方法，对返回的列的数量进行区分&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt; override fun onAttachedToRecyclerView(recyclerView:RecyclerView?) {
    super.onAttachedToRecyclerView(recyclerView)
    (recyclerView!!.layoutManager as GridLayoutManager).spanSizeLookup = object : GridLayoutManager.SpanSizeLookup() {
        override fun getSpanSize(position: Int): Int {
            return if (list[position].type == ITEMTYPE.ITEM_YEAR.ordinal) {
                2
            } else {
                1
            }
        }
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;3.adapter里具体代码实现&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;class XAdapter : RecyclerView.Adapter&amp;lt;RecyclerView.ViewHolder&amp;gt;() {

var list = arrayListOf&amp;lt;Data&amp;gt;()

fun update(list: ArrayList&amp;lt;Data&amp;gt;) {
    this.list.clear()
    this.list.addAll(list)
    notifyDataSetChanged()
}
override fun onCreateViewHolder(parent: ViewGroup?, viewType: Int): RecyclerView.ViewHolder {
    return if (viewType == ITEMTYPE.ITEM_YEAR.ordinal) {
        YearHolder(LayoutInflater.from(parent!!.context).inflate(R.layout.item_year, null))
    } else {
        NormalHolder(LayoutInflater.from(parent!!.context).inflate(R.layout.item_normal, null))
    }
}
override fun onBindViewHolder(holder: RecyclerView.ViewHolder?, position: Int) {
    if (list[position].type == ITEMTYPE.ITEM_YEAR.ordinal) {
        (holder as YearHolder).tv.text = list[position].year
    } else {
        (holder as NormalHolder).normal_tv.text = list[position].kname
    }
}
override fun getItemCount(): Int {
    return list.size
}
override fun getItemViewType(position: Int): Int {
    return list[position].type!!
}
override fun onAttachedToRecyclerView(recyclerView: RecyclerView?) {
    super.onAttachedToRecyclerView(recyclerView)
    (recyclerView!!.layoutManager as GridLayoutManager).spanSizeLookup = object : GridLayoutManager.SpanSizeLookup() {
        override fun getSpanSize(position: Int): Int {
            return if (list[position].type == ITEMTYPE.ITEM_YEAR.ordinal) {
                2
            } else {
                1
            }
        }
    }
}
} 
class NormalHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {
var normal_tv = itemView.findViewById&amp;lt;TextView&amp;gt;(R.id.normal_tv)
} 
class YearHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {
var tv = itemView.findViewById&amp;lt;TextView&amp;gt;(R.id.tv)
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;代码思考&quot;&gt;代码思考&lt;/h2&gt;
&lt;p&gt;由于之前是Java写的，最近在学习Kotlin。个人感觉多学习一些东西还是比较好的。社会在进步嘛，如果赶不上时代的步伐，就会被淘汰，尤其是在中国。&lt;br/&gt;说了那么多没用的，最后还是希望大家能够在码农的道路上越走越远，前辈请多指教。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</description>
<pubDate>Tue, 24 Apr 2018 14:09:00 +0000</pubDate>
<dc:creator>zhaoyinglong</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/zhaoyinglong/p/8934108.html</dc:identifier>
</item>
<item>
<title>解决nodejs中json序列化时Date类型为UTC格式 - 一级码农VIP</title>
<link>http://www.cnblogs.com/zhupengfei/p/8934072.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/zhupengfei/p/8934072.html</guid>
<description>&lt;p&gt;如下图&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
zhupengfei@DESKTOP-HJASOE3 MINGW64 /d/MyProject/&lt;span&gt;exp2
&lt;/span&gt;$&lt;span&gt; node
&lt;/span&gt;&amp;gt;&lt;span&gt; new Date();
&lt;/span&gt;2018-04-24T12:32:55&lt;span&gt;.590Z
&lt;/span&gt;&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;上面只是一个例子，下面我用一个更具体化的例子来展示一个这个情况，我们在开发WEB项目中，经常用到Express组件，&lt;/p&gt;
&lt;p&gt;我们就用express创建了一个demo项目，我们现在要提供一个api接口，返回一些信息&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/801648/201804/801648-20180424204054219-496601753.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;返回操作员信息，这是很正常的接口吧，&lt;/p&gt;
&lt;p&gt;大家看一下，接口log日志中显示的时间是晚上20点，可是接口返回的JSON数据即是12点，差8个小时。&lt;/p&gt;
&lt;p&gt;为什么呢？&lt;/p&gt;
&lt;p&gt;原因是因为JSON在序列化的时候，默认将日期类型转换为了UTC格式的时间，UTC格式是不带时区的，或者说是0时区。客户端根据本地的时区自动再转换。&lt;/p&gt;
&lt;p&gt;JSON可能是想避免大家在时区上弄错，造成时间不一致。但是带来的问题就是必须对时间进行处理，不处理都不能使用。&lt;/p&gt;
&lt;p&gt;能不能默认输出包含时区呢，或者不需要再处理，直接能用呢?&lt;/p&gt;
&lt;p&gt;答案时肯定的。以下介绍在express中的处理方法&lt;/p&gt;
&lt;p&gt;在bin目录下www文件中，增加以下代码&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;44&quot;&gt;
&lt;div class=&quot;cnblogs_code_toolbar&quot;&gt;&lt;span class=&quot;cnblogs_code_copy&quot;&gt;&lt;a title=&quot;复制代码&quot;&gt;&lt;img src=&quot;https://common.cnblogs.com/images/copycode.gif&quot; alt=&quot;复制代码&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;
&lt;pre&gt;
function dateFormat(date, fmt) {
    if (null == date || undefined == date) return '';
    var o = {
        &quot;M+&quot;: date.getMonth() + 1, //月份
        &quot;d+&quot;: date.getDate(), //日
        &quot;h+&quot;: date.getHours(), //小时
        &quot;m+&quot;: date.getMinutes(), //分
        &quot;s+&quot;: date.getSeconds(), //秒
        &quot;S&quot;: date.getMilliseconds() //毫秒
    };
    if (/(y+)/.test(fmt)) fmt = fmt.replace(RegExp.$1, (date.getFullYear() + &quot;&quot;).substr(4 - RegExp.$1.length));
    for (var k in o)
        if (new RegExp(&quot;(&quot; + k + &quot;)&quot;).test(fmt)) fmt = fmt.replace(RegExp.$1, (RegExp.$1.length == 1) ? (o[k]) : ((&quot;00&quot; + o[k]).substr((&quot;&quot; + o[k]).length)));
    return fmt;
}

Date.prototype.toJSON = function () { return dateFormat(this,'yyyy-MM-dd hh:mm:ss')}
&lt;/pre&gt;
&lt;div class=&quot;cnblogs_code_toolbar&quot;&gt;&lt;span class=&quot;cnblogs_code_copy&quot;&gt;&lt;a title=&quot;复制代码&quot;&gt;&lt;img src=&quot;https://common.cnblogs.com/images/copycode.gif&quot; alt=&quot;复制代码&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;如下图&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/801648/201804/801648-20180424205108236-1697345629.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt;这样输出就包含时区了，不再需要处理就可以直接使用了。&lt;/p&gt;

&lt;h2&gt;总结：&lt;/h2&gt;
&lt;p&gt;再次说明这并非是一个问题，开始的时候我们以为这个是Sequelize造成的，在github里也确实看到好多人在问为什么会这样？能不能解决呢，骂声一片，呵呵，我们就被误导了，英文不好嘛，所以看不太明白，以为是Sequelize搞的呢，甚至于搞到要修改Sequelize源码，觉得方案不完美。其实当时好像也有大牛说这不是Sequelize的问题，当时也没注意。后来第二天，又查了一下，好像不是Sequelize的问题，那是nodejs的问题？在网上查了一下，也有人说是Nodejs问题的。于是请教了一下鹅厂出来的同事，定位了一下，终于找到根源了。&lt;/p&gt;
&lt;p&gt;原来是json序列化搞的鬼。&lt;/p&gt;
&lt;p&gt;所以说遇到问题，要查百度没错，但也不能全信，一定要自己思考一下，必要时动手验证一下。&lt;/p&gt;
&lt;p&gt;管理员审核不通过，说是图片太多了，没办法只能删除一些图片，重新再发了。&lt;/p&gt;
</description>
<pubDate>Tue, 24 Apr 2018 14:00:00 +0000</pubDate>
<dc:creator>一级码农VIP</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/zhupengfei/p/8934072.html</dc:identifier>
</item>
<item>
<title>视频人脸检测——OpenCV版（三） - 王磊的博客</title>
<link>http://www.cnblogs.com/vipstone/p/8933916.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/vipstone/p/8933916.html</guid>
<description>&lt;p&gt;&lt;span&gt;视频人脸检测是图片人脸检测的高级版本，图片检测详情点击查看我的上一篇&lt;a href=&quot;http://www.cnblogs.com/vipstone/p/8884991.html&quot; target=&quot;_blank&quot;&gt;《图片人脸检测——OpenCV版（二）》&lt;/a&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;实现思路：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;调用电脑的摄像头，把摄像的信息逐帧分解成图片，基于图片检测标识出人脸的位置，把处理的图片逐帧绘制给用户，用户看到的效果就是视频的人脸检测。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;效果预览：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/172074/201804/172074-20180424213326812-644948394.gif&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span&gt;实现步骤&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;使用OpenCV调用摄像头并展示&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;获取摄像头：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
cap = cv2.VideoCapture(0)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;参数0表示，获取第一个摄像头。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;显示摄像头 逐帧显示，代码如下：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
&lt;span&gt;while (1): 
    ret, img = cap.read()
    cv2.imshow(&quot;Image&quot;, img)
    if cv2.waitKey(1) &amp;amp; 0xFF == ord('q'):
        break
cap.release()  # 释放摄像头
cv2.destroyAllWindows()  # 释放窗口资源&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;cv2.waitKey(1) &amp;amp; 0xFF使用了“&amp;amp;”位元算法，含义是获取用户输入的最后一个字符的ASCII码，如果输入的是“q”，则跳出循环。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;视频的人脸识别&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;这个时候，用到了上一节的&lt;a href=&quot;http://www.cnblogs.com/vipstone/p/8884991.html&quot; target=&quot;_blank&quot;&gt;《图片人脸检测——OpenCV版（二）》&lt;/a&gt; 把人脸识别的代码封装成方法，代码如下：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;52&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
&lt;span&gt;def discern(img):
    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
    cap = cv2.CascadeClassifier(
        &quot;C:\Python36\Lib\site-packages\opencv-master\data\haarcascades\haarcascade_frontalface_default.xml&quot;
    )
    faceRects = cap.detectMultiScale(
        gray, scaleFactor=1.2, minNeighbors=3, minSize=(50, 50))
    if len(faceRects):
        for faceRect in faceRects:
            x, y, w, h = faceRect
            cv2.rectangle(img, (x, y), (x + h, y + w), (0, 255, 0), 2)  # 框出人脸
    cv2.imshow(&quot;Image&quot;, img)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; &lt;span&gt;再循环摄像头帧图片的时候，调用图片识别方法即可，代码如下：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;36&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
&lt;span&gt;# 获取摄像头0表示第一个摄像头
cap = cv2.VideoCapture(0)
while (1):  # 逐帧显示
    ret, img = cap.read()
    # cv2.imshow(&quot;Image&quot;, img)
    discern(img)
    if cv2.waitKey(1) &amp;amp; 0xFF == ord('q'):
        break
cap.release()  # 释放摄像头
cv2.destroyAllWindows()  # 释放窗口资源
&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;完整的代码如下：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;54&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
&lt;span&gt;# -*- coding:utf-8 -*-
# OpenCV版本的视频检测
import cv2


# 图片识别方法封装
def discern(img):
    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
    cap = cv2.CascadeClassifier(
        &quot;C:\Python36\Lib\site-packages\opencv-master\data\haarcascades\haarcascade_frontalface_default.xml&quot;
    )
    faceRects = cap.detectMultiScale(
        gray, scaleFactor=1.2, minNeighbors=3, minSize=(50, 50))
    if len(faceRects):
        for faceRect in faceRects:
            x, y, w, h = faceRect
            cv2.rectangle(img, (x, y), (x + h, y + w), (0, 255, 0), 2)  # 框出人脸
    cv2.imshow(&quot;Image&quot;, img)


# 获取摄像头0表示第一个摄像头
cap = cv2.VideoCapture(0)
while (1):  # 逐帧显示
    ret, img = cap.read()
    # cv2.imshow(&quot;Image&quot;, img)
    discern(img)
    if cv2.waitKey(1) &amp;amp; 0xFF == ord('q'):
        break
cap.release()  # 释放摄像头
cv2.destroyAllWindows()  # 释放窗口资源
&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;

&lt;hr/&gt;&lt;p&gt; 连载目录：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/vipstone/p/8884956.html&quot; target=&quot;_blank&quot;&gt;《OpenCV环境搭建（一）》&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/vipstone/p/8884991.html&quot; target=&quot;_blank&quot;&gt;《图片人脸检测——OpenCV版（二）》&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/vipstone/p/8933916.html&quot; target=&quot;_blank&quot;&gt;《视频人脸检测——OpenCV版（三）》&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;code&gt;更多动态，请关注我的GitHub：&lt;a href=&quot;https://github.com/vipstone/faceai&quot; target=&quot;_blank&quot;&gt;https://github.com/vipstone/faceai&lt;/a&gt;&lt;/code&gt;&lt;/span&gt;&lt;/p&gt;

</description>
<pubDate>Tue, 24 Apr 2018 13:36:00 +0000</pubDate>
<dc:creator>王磊的博客</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/vipstone/p/8933916.html</dc:identifier>
</item>
<item>
<title>学生管理系统（SSM简易版）总结 - 我没有三颗心脏</title>
<link>http://www.cnblogs.com/wmyskxz/p/8933898.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/wmyskxz/p/8933898.html</guid>
<description>&lt;blockquote readability=&quot;4.8157894736842&quot;&gt;
&lt;p&gt;之前用 Servlet + JSP 实现了一个&lt;a href=&quot;https://www.jianshu.com/p/553fc76bb8eb&quot;&gt;简易版的学生管理系统&lt;/a&gt;，在学习了 SSM 框架之后，我们来对之前写过的项目重构一下！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;技术准备&quot;&gt;技术准备&lt;/h2&gt;
&lt;p&gt;为了完成这个项目，需要掌握如下技术：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Java&lt;br/&gt;基础知识&lt;/li&gt;
&lt;li&gt;前端：&lt;br/&gt;HTML, CSS, JAVASCRIPT, JQUERY&lt;/li&gt;
&lt;li&gt;J2EE：&lt;br/&gt;Tomcat, Servlet, JSP, Filter&lt;/li&gt;
&lt;li&gt;框架：&lt;br/&gt;&lt;a href=&quot;https://www.jianshu.com/p/1af66a499f49&quot;&gt;Spring&lt;/a&gt;, &lt;a href=&quot;https://www.jianshu.com/p/91a2d0a1e45a&quot;&gt;Spring MVC&lt;/a&gt;, &lt;a href=&quot;https://www.jianshu.com/p/c77e3691867d&quot;&gt;MyBatis&lt;/a&gt;, &lt;a href=&quot;https://www.jianshu.com/p/412051d41d73&quot;&gt;Spring 与 MyBatis 整合&lt;/a&gt;, &lt;a href=&quot;https://www.jianshu.com/p/3098050b0d14&quot;&gt;SSM 整合&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;数据库：&lt;br/&gt;MySQL&lt;/li&gt;
&lt;li&gt;开发工具：&lt;br/&gt;IDEA, Maven&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;开发流程&quot;&gt;开发流程&lt;/h2&gt;
&lt;p&gt;之前虽然已经使用 &lt;strong&gt;Servlet + JSP&lt;/strong&gt; 完成了简单的开发，这次使用 &lt;strong&gt;SSM&lt;/strong&gt; 仅仅是重构工作，但我们仍然按照商业项目的开发步骤来一步一步完成，进一步熟悉这个过程，&lt;strong&gt;重复的部分我就直接复制了。&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&quot;需求分析&quot;&gt;① 需求分析&lt;/h4&gt;
&lt;p&gt;首先要确定要做哪些功能&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;使用&lt;strong&gt;数据库&lt;/strong&gt;来&lt;strong&gt;保存数据&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;能&lt;strong&gt;增删改查&lt;/strong&gt;学生的信息&lt;em&gt;（学号，名称，年龄，性别，出生日期）&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h4 id=&quot;表结构设计&quot;&gt;② 表结构设计&lt;/h4&gt;
&lt;p&gt;根据需求，那么只需要一个 student 表就能够完成功能了。&lt;/p&gt;
&lt;ul readability=&quot;0&quot;&gt;&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;strong&gt;创建数据库：student&lt;/strong&gt;&lt;br/&gt;将数据库编码格式设置为 UTF-8 ，便于存取中文数据&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode sql&quot;&gt;
&lt;code class=&quot;sourceCode sql&quot;&gt;&lt;span class=&quot;kw&quot;&gt;DROP&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;DATABASE&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;IF&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;EXISTS&lt;/span&gt; student;
&lt;span class=&quot;kw&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;DATABASE&lt;/span&gt; student &lt;span class=&quot;kw&quot;&gt;DEFAULT&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;CHARACTER&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;SET&lt;/span&gt; utf8;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li readability=&quot;6&quot;&gt;
&lt;p&gt;&lt;strong&gt;创建学生表：student&lt;/strong&gt;&lt;br/&gt;不用&lt;strong&gt;学生学号(studentID)&lt;/strong&gt;作为主键的原因是：不方便操作，例如在更新数据的时候，同时也要更改学号，那这样的操作怎么办呢？&lt;br/&gt;所以我们加了一个 &lt;strong&gt;id&lt;/strong&gt; 用来唯一表示当前数据。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;15&quot;&gt;
&lt;pre class=&quot;sourceCode sql&quot;&gt;
&lt;code class=&quot;sourceCode sql&quot;&gt;&lt;span class=&quot;kw&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;TABLE&lt;/span&gt; student(
  &lt;span class=&quot;kw&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;11&lt;/span&gt;) &lt;span class=&quot;kw&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;NULL&lt;/span&gt; AUTO_INCREMENT,
  student_id &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;11&lt;/span&gt;) &lt;span class=&quot;kw&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;UNIQUE&lt;/span&gt;,
  name &lt;span class=&quot;dt&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;255&lt;/span&gt;) &lt;span class=&quot;kw&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;NULL&lt;/span&gt;,
  age &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;11&lt;/span&gt;) &lt;span class=&quot;kw&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;NULL&lt;/span&gt;,
  sex &lt;span class=&quot;dt&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;255&lt;/span&gt;) &lt;span class=&quot;kw&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;NULL&lt;/span&gt;,
  birthday &lt;span class=&quot;dt&quot;&gt;date&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;DEFAULT&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;NULL&lt;/span&gt;,
  &lt;span class=&quot;kw&quot;&gt;PRIMARY&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;KEY&lt;/span&gt; (&lt;span class=&quot;kw&quot;&gt;id&lt;/span&gt;)
) ENGINE=InnoDB &lt;span class=&quot;kw&quot;&gt;DEFAULT&lt;/span&gt; CHARSET=utf8;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;MySQL 在 Windows 下不区分大小写，但在 Linux 下默认区分大小写，因此，&lt;strong&gt;数据库名、表明、字段名都不允许出现任何大写字母&lt;/strong&gt;，避免节外生枝。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;原型设计&quot;&gt;③ 原型设计&lt;/h4&gt;
&lt;p&gt;就是设计界面，在商业项目中，这是很重要的一步，我们可以&lt;strong&gt;解除界面原型，低成本、高效率&lt;/strong&gt;的与客户达成&lt;strong&gt;需求的一致性&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;这个项目一共就分为两个页面：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;
&lt;p&gt;主页面：&lt;br/&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/7896890-0169962ea353fcbd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;首页&quot;/&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;学生编辑页面：&lt;br/&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/7896890-2eac73f04dcf3ea4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;编辑页面&quot;/&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;h4 id=&quot;ssm-环境搭建&quot;&gt;④ SSM 环境搭建&lt;/h4&gt;
&lt;p&gt;在真正开始编写代码之前，我们首先需要先来搭建好我们的 SSM 环境。&lt;/p&gt;
&lt;h4 id=&quot;第一步创建-maven-webapp-项目&quot;&gt;第一步：创建 Maven webapp 项目&lt;/h4&gt;
&lt;p&gt;首先新建工程，选择 Maven 标签，然后勾选上【Create from archetype】选择 webapp：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/7896890-37bca8243a63a411.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot;/&gt;&lt;/p&gt;
&lt;p&gt;点击下一步，填写上【GroupId】和【ArtifactId】：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/7896890-87095d22145798ac.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot;/&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;GroupId：项目组织唯一的标识符，实际对应 JAVA 的包的结构，也就是 main 目录下 java 的目录结构（包）&lt;/li&gt;
&lt;li&gt;AritifactId：项目的唯一标识符，实际对应项目的名称，就是项目根目录的名称&lt;/li&gt;
&lt;li&gt;实际上你可以乱填上试试，我就不乱填了&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;然后是确认项目路径，这一步你可以看到 Maven 配置中的参数，不需要做改动，直接下一步就可以（&lt;em&gt;图中的路径是我配置的本地 Maven 仓库的地址&lt;/em&gt;）：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/7896890-5ff7e5ec2ad03ebc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot;/&gt;&lt;/p&gt;
&lt;p&gt;确认项目名称和路径，点击【Finish】即可：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/7896890-491970db6a349a5e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot;/&gt;&lt;/p&gt;
&lt;p&gt;等待一会儿，控制台就会有创建成功的提示信息，我们把【Enable Auto-Import】点上，这个提示会在每次 pom.xml 有改动时出现，自动导入，省掉麻烦：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/7896890-2ebc5e0cd0503ad7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot;/&gt;&lt;/p&gt;
&lt;h4 id=&quot;第二步搭建项目目录结构&quot;&gt;第二步：搭建项目目录结构&lt;/h4&gt;
&lt;p&gt;下面就是 Maven 风格的 webapp 的默认目录结构：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/7896890-4ac356da8a41ee5b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot;/&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;注意：&lt;/strong&gt; webapp 是默认没有 java 源文件也没有 test 目录的。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;遵循 Maven 的统一项目结构，我们搭建出项目的完整目录结构如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/7896890-51e8952802f0ec9c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot;/&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;我们并没有使用 Log4j 来输出日志，而是使用 logback&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;提示：&lt;/strong&gt;我们可以在 IDEA 中右键目录然后选择【Make Directory as】，让 IDEA 识别不同的目录作用&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/7896890-6ca8b5c413335048.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这里的目录建好之后还需要设置一下，让 IDEA 识别目录作用，选择【File】&amp;gt;【Project Structure】：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/7896890-640537dba7ff226e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot;/&gt;&lt;/p&gt;
&lt;p&gt;设置好之后点击 OK，即完成了项目目录的搭建。&lt;/p&gt;
&lt;h4 id=&quot;第三步配置文件内容&quot;&gt;第三步：配置文件内容&lt;/h4&gt;
&lt;p&gt;在【pom.xml】文件中声明依赖的 jar 包 ：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;
&amp;lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd&quot;&amp;gt;

    &amp;lt;modelVersion&amp;gt;4.0.0&amp;lt;/modelVersion&amp;gt;
    &amp;lt;packaging&amp;gt;war&amp;lt;/packaging&amp;gt;

    &amp;lt;name&amp;gt;StudentManagerSSM&amp;lt;/name&amp;gt;
    &amp;lt;groupId&amp;gt;cn.wmyskxz&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;StudentManagerSSM&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;1.0-SNAPSHOT&amp;lt;/version&amp;gt;

    &amp;lt;build&amp;gt;
        &amp;lt;plugins&amp;gt;
            &amp;lt;plugin&amp;gt;
                &amp;lt;groupId&amp;gt;org.mortbay.jetty&amp;lt;/groupId&amp;gt;
                &amp;lt;artifactId&amp;gt;maven-jetty-plugin&amp;lt;/artifactId&amp;gt;
                &amp;lt;version&amp;gt;6.1.7&amp;lt;/version&amp;gt;
                &amp;lt;configuration&amp;gt;
                    &amp;lt;connectors&amp;gt;
                        &amp;lt;connector implementation=&quot;org.mortbay.jetty.nio.SelectChannelConnector&quot;&amp;gt;
                            &amp;lt;port&amp;gt;8888&amp;lt;/port&amp;gt;
                            &amp;lt;maxIdleTime&amp;gt;30000&amp;lt;/maxIdleTime&amp;gt;
                        &amp;lt;/connector&amp;gt;
                    &amp;lt;/connectors&amp;gt;
                    &amp;lt;webAppSourceDirectory&amp;gt;${project.build.directory}/${pom.artifactId}-${pom.version}
                    &amp;lt;/webAppSourceDirectory&amp;gt;
                    &amp;lt;contextPath&amp;gt;/&amp;lt;/contextPath&amp;gt;
                &amp;lt;/configuration&amp;gt;
            &amp;lt;/plugin&amp;gt;
        &amp;lt;/plugins&amp;gt;
    &amp;lt;/build&amp;gt;

    &amp;lt;properties&amp;gt;
        &amp;lt;!-- 设置项目编码编码 --&amp;gt;
        &amp;lt;project.build.sourceEncoding&amp;gt;UTF-8&amp;lt;/project.build.sourceEncoding&amp;gt;
        &amp;lt;project.reporting.outputEncoding&amp;gt;UTF-8&amp;lt;/project.reporting.outputEncoding&amp;gt;
        &amp;lt;!-- spring版本号 --&amp;gt;
        &amp;lt;spring.version&amp;gt;4.3.5.RELEASE&amp;lt;/spring.version&amp;gt;
        &amp;lt;!-- mybatis版本号 --&amp;gt;
        &amp;lt;mybatis.version&amp;gt;3.4.1&amp;lt;/mybatis.version&amp;gt;
    &amp;lt;/properties&amp;gt;

    &amp;lt;dependencies&amp;gt;

        &amp;lt;!-- jstl标签 --&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;javax.servlet&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;jstl&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;1.2&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.apache.taglibs&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;taglibs-standard-impl&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;1.2.5&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;


        &amp;lt;!-- java ee --&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;javax&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;javaee-api&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;7.0&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;

        &amp;lt;!-- 单元测试 --&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;junit&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;junit&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;4.12&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;

        &amp;lt;!-- 实现slf4j接口并整合 --&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;ch.qos.logback&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;logback-classic&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;1.2.2&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;

        &amp;lt;!-- JSON --&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;com.fasterxml.jackson.core&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;jackson-databind&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;2.8.7&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;


        &amp;lt;!-- 数据库 --&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;mysql&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;mysql-connector-java&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;5.1.41&amp;lt;/version&amp;gt;
            &amp;lt;scope&amp;gt;runtime&amp;lt;/scope&amp;gt;
        &amp;lt;/dependency&amp;gt;

        &amp;lt;!-- 数据库连接池 --&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;com.mchange&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;c3p0&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;0.9.5.2&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;

        &amp;lt;!-- MyBatis --&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.mybatis&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;mybatis&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;${mybatis.version}&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;

        &amp;lt;!-- mybatis/spring整合包 --&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.mybatis&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;mybatis-spring&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;1.3.1&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;

        &amp;lt;!-- Spring --&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.springframework&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;spring-core&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;${spring.version}&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.springframework&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;spring-beans&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;${spring.version}&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.springframework&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;spring-context&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;${spring.version}&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.springframework&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;spring-jdbc&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;${spring.version}&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.springframework&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;spring-tx&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;${spring.version}&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.springframework&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;spring-web&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;${spring.version}&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.springframework&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;spring-webmvc&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;${spring.version}&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.springframework&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;spring-test&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;${spring.version}&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;

    &amp;lt;/dependencies&amp;gt;

&amp;lt;/project&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;&amp;lt;build&amp;gt;&lt;/code&gt; 标签是默认生成的&lt;/li&gt;
&lt;li&gt;我们在 &lt;code&gt;&amp;lt;properties&amp;gt;&lt;/code&gt; 中声明了编码格式以及使用的 spring 和 mybatis 的版本号，然后在 &lt;code&gt;&amp;lt;dependencies&amp;gt;&lt;/code&gt; 中声明了具体的 jar 包&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;在【web.xml】中声明编码过滤器并配置 DispatcherServlet ：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;
&amp;lt;web-app xmlns=&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;
         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
         xsi:schemaLocation=&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd&quot;
         version=&quot;3.1&quot;&amp;gt;

    &amp;lt;!-- 编码过滤器 --&amp;gt;
    &amp;lt;filter&amp;gt;
        &amp;lt;filter-name&amp;gt;encodingFilter&amp;lt;/filter-name&amp;gt;
        &amp;lt;filter-class&amp;gt;org.springframework.web.filter.CharacterEncodingFilter&amp;lt;/filter-class&amp;gt;
        &amp;lt;init-param&amp;gt;
            &amp;lt;param-name&amp;gt;encoding&amp;lt;/param-name&amp;gt;
            &amp;lt;param-value&amp;gt;UTF-8&amp;lt;/param-value&amp;gt;
        &amp;lt;/init-param&amp;gt;
    &amp;lt;/filter&amp;gt;
    &amp;lt;filter-mapping&amp;gt;
        &amp;lt;filter-name&amp;gt;encodingFilter&amp;lt;/filter-name&amp;gt;
        &amp;lt;url-pattern&amp;gt;/*&amp;lt;/url-pattern&amp;gt;
    &amp;lt;/filter-mapping&amp;gt;

    &amp;lt;!-- 配置DispatcherServlet --&amp;gt;
    &amp;lt;servlet&amp;gt;
        &amp;lt;servlet-name&amp;gt;SpringMVC&amp;lt;/servlet-name&amp;gt;
        &amp;lt;servlet-class&amp;gt;org.springframework.web.servlet.DispatcherServlet&amp;lt;/servlet-class&amp;gt;
        &amp;lt;!-- 配置springMVC需要加载的配置文件--&amp;gt;
        &amp;lt;init-param&amp;gt;
            &amp;lt;param-name&amp;gt;contextConfigLocation&amp;lt;/param-name&amp;gt;
            &amp;lt;param-value&amp;gt;classpath:spring-*.xml&amp;lt;/param-value&amp;gt;
        &amp;lt;/init-param&amp;gt;
        &amp;lt;load-on-startup&amp;gt;1&amp;lt;/load-on-startup&amp;gt;
        &amp;lt;async-supported&amp;gt;true&amp;lt;/async-supported&amp;gt;
    &amp;lt;/servlet&amp;gt;
    &amp;lt;servlet-mapping&amp;gt;
        &amp;lt;servlet-name&amp;gt;SpringMVC&amp;lt;/servlet-name&amp;gt;
        &amp;lt;!-- 匹配所有请求 --&amp;gt;
        &amp;lt;url-pattern&amp;gt;/&amp;lt;/url-pattern&amp;gt;
    &amp;lt;/servlet-mapping&amp;gt;

&amp;lt;/web-app&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;在【spring-mybatis.xml】中完成 spring 和 mybatis 的配置：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;
&amp;lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;
       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
       xmlns:context=&quot;http://www.springframework.org/schema/context&quot; xmlns:tx=&quot;http://www.springframework.org/schema/tx&quot;
       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd&quot;&amp;gt;

    &amp;lt;!-- 扫描service包下所有使用注解的类型 --&amp;gt;
    &amp;lt;context:component-scan base-package=&quot;cn.wmyskxz.service&quot;/&amp;gt;

    &amp;lt;!-- 配置数据库相关参数properties的属性：${url} --&amp;gt;
    &amp;lt;context:property-placeholder location=&quot;classpath:jdbc.properties&quot;/&amp;gt;

    &amp;lt;!-- 数据库连接池 --&amp;gt;
    &amp;lt;bean id=&quot;dataSource&quot; class=&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;&amp;gt;
        &amp;lt;property name=&quot;driverClass&quot; value=&quot;${jdbc.driver}&quot;/&amp;gt;
        &amp;lt;property name=&quot;jdbcUrl&quot; value=&quot;${jdbc.url}&quot;/&amp;gt;
        &amp;lt;property name=&quot;user&quot; value=&quot;${jdbc.username}&quot;/&amp;gt;
        &amp;lt;property name=&quot;password&quot; value=&quot;${jdbc.password}&quot;/&amp;gt;
        &amp;lt;property name=&quot;maxPoolSize&quot; value=&quot;${c3p0.maxPoolSize}&quot;/&amp;gt;
        &amp;lt;property name=&quot;minPoolSize&quot; value=&quot;${c3p0.minPoolSize}&quot;/&amp;gt;
        &amp;lt;property name=&quot;autoCommitOnClose&quot; value=&quot;${c3p0.autoCommitOnClose}&quot;/&amp;gt;
        &amp;lt;property name=&quot;checkoutTimeout&quot; value=&quot;${c3p0.checkoutTimeout}&quot;/&amp;gt;
        &amp;lt;property name=&quot;acquireRetryAttempts&quot; value=&quot;${c3p0.acquireRetryAttempts}&quot;/&amp;gt;
    &amp;lt;/bean&amp;gt;

    &amp;lt;!-- 配置SqlSessionFactory对象 --&amp;gt;
    &amp;lt;bean id=&quot;sqlSessionFactory&quot; class=&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;&amp;gt;
        &amp;lt;!-- 注入数据库连接池 --&amp;gt;
        &amp;lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;/&amp;gt;
        &amp;lt;!-- 扫描entity包 使用别名 --&amp;gt;
        &amp;lt;property name=&quot;typeAliasesPackage&quot; value=&quot;cn.wmyskxz.entity&quot;/&amp;gt;
        &amp;lt;!-- 扫描sql配置文件:mapper需要的xml文件 --&amp;gt;
        &amp;lt;property name=&quot;mapperLocations&quot; value=&quot;classpath:mapper/*.xml&quot;/&amp;gt;
    &amp;lt;/bean&amp;gt;

    &amp;lt;!-- 配置扫描Dao接口包，动态实现Dao接口，注入到spring容器中 --&amp;gt;
    &amp;lt;bean class=&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;&amp;gt;
        &amp;lt;!-- 注入sqlSessionFactory --&amp;gt;
        &amp;lt;property name=&quot;sqlSessionFactoryBeanName&quot; value=&quot;sqlSessionFactory&quot;/&amp;gt;
        &amp;lt;!-- 给出需要扫描Dao接口包 --&amp;gt;
        &amp;lt;property name=&quot;basePackage&quot; value=&quot;cn.wmyskxz.dao&quot;/&amp;gt;
    &amp;lt;/bean&amp;gt;

    &amp;lt;!-- 配置事务管理器 --&amp;gt;
    &amp;lt;bean id=&quot;transactionManager&quot; class=&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;&amp;gt;
        &amp;lt;!-- 注入数据库连接池 --&amp;gt;
        &amp;lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;/&amp;gt;
    &amp;lt;/bean&amp;gt;

    &amp;lt;!-- 配置基于注解的声明式事务 --&amp;gt;
    &amp;lt;tx:annotation-driven transaction-manager=&quot;transactionManager&quot;/&amp;gt;

&amp;lt;/beans&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;在【spring-mvc.xml】中完成 Spring MVC 的相关配置：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;
&amp;lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;
       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
       xmlns:context=&quot;http://www.springframework.org/schema/context&quot;
       xmlns:mvc=&quot;http://www.springframework.org/schema/mvc&quot;
       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/mvc
       http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd&quot;&amp;gt;

    &amp;lt;!-- 扫描web相关的bean --&amp;gt;
    &amp;lt;context:component-scan base-package=&quot;cn.wmyskxz.controller&quot;/&amp;gt;

    &amp;lt;!-- 开启SpringMVC注解模式 --&amp;gt;
    &amp;lt;mvc:annotation-driven/&amp;gt;

    &amp;lt;!-- 静态资源默认servlet配置 --&amp;gt;
    &amp;lt;mvc:default-servlet-handler/&amp;gt;

    &amp;lt;!-- 配置jsp 显示ViewResolver --&amp;gt;
    &amp;lt;bean class=&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;&amp;gt;
        &amp;lt;property name=&quot;viewClass&quot; value=&quot;org.springframework.web.servlet.view.JstlView&quot;/&amp;gt;
        &amp;lt;property name=&quot;prefix&quot; value=&quot;/WEB-INF/views/&quot;/&amp;gt;
        &amp;lt;property name=&quot;suffix&quot; value=&quot;.jsp&quot;/&amp;gt;
    &amp;lt;/bean&amp;gt;

&amp;lt;/beans&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;在【jdbc.properties】中配置 c3p0 数据库连接池：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;jdbc.driver=com.mysql.jdbc.Driver
#数据库地址
jdbc.url=jdbc:mysql://localhost:3306/student?useUnicode=true&amp;amp;characterEncoding=utf8
#用户名
jdbc.username=root
#密码
jdbc.password=root
#最大连接数
c3p0.maxPoolSize=30
#最小连接数
c3p0.minPoolSize=10
#关闭连接后不自动commit
c3p0.autoCommitOnClose=false
#获取连接超时时间
c3p0.checkoutTimeout=10000
#当获取连接失败重试次数
c3p0.acquireRetryAttempts=2&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;在【logback.xml】中完成日志输出的相关配置：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;
&amp;lt;configuration debug=&quot;true&quot;&amp;gt;
    &amp;lt;appender name=&quot;STDOUT&quot; class=&quot;ch.qos.logback.core.ConsoleAppender&quot;&amp;gt;
        &amp;lt;encoder&amp;gt;
            &amp;lt;pattern&amp;gt;%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n&amp;lt;/pattern&amp;gt;
        &amp;lt;/encoder&amp;gt;
    &amp;lt;/appender&amp;gt;
    &amp;lt;root level=&quot;debug&quot;&amp;gt;
        &amp;lt;appender-ref ref=&quot;STDOUT&quot;/&amp;gt;
    &amp;lt;/root&amp;gt;
&amp;lt;/configuration&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;以上就完成了 SSM 框架的基本配置：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;添加进了 SSM 项目所需要的 jar 包&lt;/li&gt;
&lt;li&gt;配置好了 spring/mybatis/spring MVC 的相关配置信息（自动扫描 &lt;code&gt;cn.wmyskxz&lt;/code&gt; 包下的带有注解的类）&lt;/li&gt;
&lt;li&gt;通过 xml 配置的方式配置好了日志和数据库&lt;/li&gt;
&lt;/ul&gt;&lt;h4 id=&quot;实体类设计&quot;&gt;⑤ 实体类设计&lt;/h4&gt;
&lt;p&gt;实体类仅仅是对数据库中表的一一映射（表中字段名应该和实体类中的名称一一对应），同时可能还需要兼顾对业务能力的支持。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;在 Packge【cn.wmyskxz.entity】下创建 Student 类：&lt;br/&gt;```&lt;br/&gt;package cn.wmyskxz.entity;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;import java.util.Date;&lt;/p&gt;
&lt;p&gt;/**&lt;/p&gt;
&lt;ul readability=&quot;0.5&quot;&gt;&lt;li&gt;Student 实体类&lt;/li&gt;
&lt;li&gt;@author: @我没有三颗心脏&lt;/li&gt;
&lt;li readability=&quot;4&quot;&gt;
&lt;p&gt;@create: 2018-04-23-下午 13:34&lt;br/&gt;*/&lt;br/&gt;public class Student {&lt;/p&gt;
&lt;p&gt;private int id;&lt;br/&gt;private int student_id;&lt;br/&gt;private String name;&lt;br/&gt;private int age;&lt;br/&gt;private String sex;&lt;br/&gt;private Date birthday;&lt;/p&gt;
&lt;p&gt;/* getter and setter */&lt;br/&gt;}&lt;br/&gt;```&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;h4 id=&quot;dao-类的设计&quot;&gt;⑤ DAO 类的设计&lt;/h4&gt;
&lt;p&gt;DAO，即 Date Access Object，数据库访问对象，就是对数据库相关操作的封装，让其他地方看不到 JDBC 的代码。&lt;/p&gt;
&lt;p&gt;在【cn.wmyskxz.dao】包下创建【StudentDao】接口：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;package cn.wmyskxz.dao;

import cn.wmyskxz.entity.Student;

import java.util.List;

public interface StudentDao {
    int getTotal();
    void addStudent(Student student);
    void deleteStudent(int id);
    void updateStudent(Student student);
    Student getStudent(int id);
    List&amp;lt;Student&amp;gt; list(int start, int count);
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;然后在【resources/mapper】下创建好对应的映射文件【StudengDao.xml】：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;
&amp;lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;
        &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&amp;gt;

&amp;lt;!-- 将namespace的值设置为DAO类对应的路径 --&amp;gt;
&amp;lt;mapper namespace=&quot;cn.wmyskxz.dao.StudentDao&quot;&amp;gt;

    &amp;lt;!-- 查询数据条目 --&amp;gt;
    &amp;lt;select id=&quot;getTotal&quot; resultType=&quot;int&quot;&amp;gt;
        SELECT COUNT(*) FROM student
    &amp;lt;/select&amp;gt;

    &amp;lt;!-- 增加一条数据 --&amp;gt;
    &amp;lt;insert id=&quot;addStudent&quot; parameterType=&quot;Student&quot;&amp;gt;
        INSERT INTO student VALUES(NULL, #{student_id}, #{name}, #{age}, #{sex}, #{birthday})
    &amp;lt;/insert&amp;gt;

    &amp;lt;!-- 删除一条数据 --&amp;gt;
    &amp;lt;delete id=&quot;deleteStudent&quot; parameterType=&quot;int&quot;&amp;gt;
        DELETE FROM student WHERE id = #{id}
    &amp;lt;/delete&amp;gt;

    &amp;lt;!-- 更新一条数据 --&amp;gt;
    &amp;lt;update id=&quot;updateStudent&quot; parameterType=&quot;Student&quot;&amp;gt;
        UPDATE student SET student_id = #{student_id}, name = #{name},
        age = #{age}, sex = #{sex}, birthday = #{birthday} WHERE id = #{id}
    &amp;lt;/update&amp;gt;

    &amp;lt;!-- 查询一条数据 --&amp;gt;
    &amp;lt;select id=&quot;getStudent&quot; resultMap=&quot;student&quot; parameterType=&quot;int&quot;&amp;gt;
        SELECT * FROM student WHERE id = #{id}
    &amp;lt;/select&amp;gt;

    &amp;lt;resultMap id=&quot;student&quot; type=&quot;student&quot;&amp;gt;
        &amp;lt;id column=&quot;id&quot; property=&quot;id&quot;/&amp;gt;
        &amp;lt;result column=&quot;student_id&quot; property=&quot;student_id&quot;/&amp;gt;
        &amp;lt;result column=&quot;name&quot; property=&quot;name&quot;/&amp;gt;
        &amp;lt;result column=&quot;age&quot; property=&quot;age&quot;/&amp;gt;
        &amp;lt;result column=&quot;sex&quot; property=&quot;sex&quot;/&amp;gt;
        &amp;lt;result column=&quot;birthday&quot; property=&quot;birthday&quot;/&amp;gt;
    &amp;lt;/resultMap&amp;gt;

    &amp;lt;!-- 查询从start位置开始的count条数据--&amp;gt;
    &amp;lt;select id=&quot;list&quot; resultMap=&quot;student&quot;&amp;gt;
        SELECT * FROM student ORDER BY student_id desc limit #{param1}, #{param2}
    &amp;lt;/select&amp;gt;
&amp;lt;/mapper&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;编写好了 Dao 类是需要测试的，这里测试类就不给出了。&lt;/p&gt;
&lt;h4 id=&quot;业务类设计&quot;&gt;⑦ 业务类设计&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;问题：&lt;/strong&gt; 为什么不直接使用 Dao 类而是还要在上面封装一层 Service 层呢？&lt;/li&gt;
&lt;li&gt;回答：&lt;br/&gt;基于责任分离的原则，Dao 层就应该专注于对数据库的操作，而在 Service 层我们可以增加一些非 CRUD 的方法去更好的完成本身抽离出来的 service 服务（业务处理）。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;在【cn.wmyskxz.service】包下创建【StudentService】接口：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;package cn.wmyskxz.service;

import cn.wmyskxz.entity.Student;

import java.util.List;

public interface StudentService {

    /**
     * 获取到 Student 的总数
     * @return
     */
    int getTotal();

    /**
     * 增加一条数据
     * @param student
     */
    void addStudent(Student student);

    /**
     * 删除一条数据
     * @param id
     */
    void deleteStudent(int id);

    /**
     * 更新一条数据
     * @param student
     */
    void updateStudent(Student student);

    /**
     * 找到一条数据
     * @param id
     * @return
     */
    Student getStudent(int id);

    /**
     * 列举出从 start 位置开始的 count 条数据
     * @param start
     * @param count
     * @return
     */
    List&amp;lt;Student&amp;gt; list(int start, int count);
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;并在相同包名下创建实现类【StudentServiceImpl】：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;package cn.wmyskxz.service;

import cn.wmyskxz.dao.StudentDao;
import cn.wmyskxz.entity.Student;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;

/**
 * StudentService 的实现类
 *
 * @author: @我没有三颗心脏
 * @create: 2018-04-23-下午 13:51
 */
@Service
public class StudentServiceImpl implements StudentService {

    @Autowired
    StudentDao studentDao;

    public int getTotal() {
        return studentDao.getTotal();
    }

    public void addStudent(Student student) {
        studentDao.addStudent(student);
    }

    public void deleteStudent(int id) {
        studentDao.deleteStudent(id);
    }

    public void updateStudent(Student student) {
        studentDao.updateStudent(student);
    }

    public Student getStudent(int id) {
        return studentDao.getStudent(id);
    }

    public List&amp;lt;Student&amp;gt; list(int start, int count) {
        return studentDao.list(start, count);
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;功能开发&quot;&gt;⑧ 功能开发&lt;/h4&gt;
&lt;p&gt;在【cn.wmyskxz.controller】包下创建【StudentController】控制器，代码基本上都是复制黏贴之前在 Servlet 中的代码：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;package cn.wmyskxz.controller;

import cn.wmyskxz.entity.Student;
import cn.wmyskxz.service.StudentService;
import cn.wmyskxz.util.Page;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.servlet.ModelAndView;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;

/**
 * Student 控制器
 *
 * @author: @我没有三颗心脏
 * @create: 2018-04-23-下午 13:27
 */
@Controller
@RequestMapping(&quot;&quot;)
public class StudentController {

    @Autowired
    private StudentService studentService;

    @RequestMapping(&quot;/addStudent&quot;)
    public String addStudent(HttpServletRequest request, HttpServletResponse response) {

        Student student = new Student();

        int studentID = Integer.parseInt(request.getParameter(&quot;student_id&quot;));
        String name = request.getParameter(&quot;name&quot;);
        int age = Integer.parseInt(request.getParameter(&quot;age&quot;));
        String sex = request.getParameter(&quot;sex&quot;);
        Date birthday = null;
        // String 类型按照 yyyy-MM-dd 的格式转换为 java.util.Date 类
        SimpleDateFormat simpleDateFormat = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;);
        try {
            birthday = simpleDateFormat.parse(request.getParameter(&quot;birthday&quot;));
        } catch (ParseException e) {
            e.printStackTrace();
        }

        student.setStudent_id(studentID);
        student.setName(name);
        student.setAge(age);
        student.setSex(sex);
        student.setBirthday(birthday);

        studentService.addStudent(student);

        return &quot;redirect:listStudent&quot;;
    }

    @RequestMapping(&quot;/listStudent&quot;)
    public String listStudent(HttpServletRequest request, HttpServletResponse response) {

        // 获取分页参数
        int start = 0;
        int count = 10;

        try {
            start = Integer.parseInt(request.getParameter(&quot;page.start&quot;));
            count = Integer.parseInt(request.getParameter(&quot;page.count&quot;));
        } catch (Exception e) {
        }

        Page page = new Page(start, count);

        List&amp;lt;Student&amp;gt; students = studentService.list(page.getStart(), page.getCount());
        int total = studentService.getTotal();
        page.setTotal(total);

        request.setAttribute(&quot;students&quot;, students);
        request.setAttribute(&quot;page&quot;, page);

        return &quot;listStudent&quot;;
    }

    @RequestMapping(&quot;/deleteStudent&quot;)
    public String deleteStudent(int id) {
        studentService.deleteStudent(id);
        return &quot;redirect:listStudent&quot;;
    }

    @RequestMapping(&quot;/editStudent&quot;)
    public ModelAndView editStudent(int id) {
        ModelAndView mav = new ModelAndView(&quot;editStudent&quot;);
        Student student = studentService.getStudent(id);
        mav.addObject(&quot;student&quot;, student);
        return mav;
    }

    @RequestMapping(&quot;/updateStudent&quot;)
    public String updateStudent(HttpServletRequest request, HttpServletResponse response) {

        Student student = new Student();

        int id = Integer.parseInt(request.getParameter(&quot;id&quot;));
        int student_id = Integer.parseInt(request.getParameter(&quot;student_id&quot;));
        String name = request.getParameter(&quot;name&quot;);
        int age = Integer.parseInt(request.getParameter(&quot;age&quot;));
        String sex = request.getParameter(&quot;sex&quot;);

        SimpleDateFormat simpleDateFormat = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;);
        Date birthday = null;
        try {
            birthday = simpleDateFormat.parse(request.getParameter(&quot;birthday&quot;));
        } catch (ParseException e) {
            e.printStackTrace();
        }

        student.setId(id);
        student.setStudent_id(student_id);
        student.setName(name);
        student.setAge(age);
        student.setSex(sex);
        student.setBirthday(birthday);

        studentService.updateStudent(student);
        return &quot;redirect:listStudent&quot;;
    }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;注意：&lt;/strong&gt; 所有的学号都用 student_id 表示，为了契合在数据库中的字段名（包括下面的 JSP 文件）&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;JSP 文件也直接黏之前的就好了，不过需要&lt;strong&gt;注意所有的 &lt;code&gt;name&lt;/code&gt; 属性&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;【listStudent.jsp】：&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot;
         pageEncoding=&quot;UTF-8&quot; %&amp;gt;
&amp;lt;%@ taglib uri=&quot;http://java.sun.com/jsp/jstl/core&quot; prefix=&quot;c&quot; %&amp;gt;

&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;

    &amp;lt;%-- 引入JQ和Bootstrap --%&amp;gt;
    &amp;lt;script src=&quot;js/jquery/2.0.0/jquery.min.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;link href=&quot;css/bootstrap/3.3.6/bootstrap.min.css&quot; rel=&quot;stylesheet&quot;&amp;gt;
    &amp;lt;script src=&quot;js/bootstrap/3.3.6/bootstrap.min.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;link href=&quot;css/style.css&quot; rel=&quot;stylesheet&quot;&amp;gt;

    &amp;lt;title&amp;gt;学生管理页面 - 首页&amp;lt;/title&amp;gt;

    &amp;lt;script&amp;gt;
        $(function () {
            $(&quot;ul.pagination li.disabled a&quot;).click(function () {
                return false;
            });
        });
    &amp;lt;/script&amp;gt;
&amp;lt;/head&amp;gt;

&amp;lt;body&amp;gt;

&amp;lt;div class=&quot;listDIV&quot;&amp;gt;
    &amp;lt;table class=&quot;table table-striped table-bordered table-hover table-condensed&quot;&amp;gt;

        &amp;lt;caption&amp;gt;学生列表 - 共${page.total}人&amp;lt;/caption&amp;gt;
        &amp;lt;thead&amp;gt;
        &amp;lt;tr class=&quot;success&quot;&amp;gt;
            &amp;lt;th&amp;gt;学号&amp;lt;/th&amp;gt;
            &amp;lt;th&amp;gt;姓名&amp;lt;/th&amp;gt;
            &amp;lt;th&amp;gt;年龄&amp;lt;/th&amp;gt;
            &amp;lt;th&amp;gt;性别&amp;lt;/th&amp;gt;
            &amp;lt;th&amp;gt;出生日期&amp;lt;/th&amp;gt;

            &amp;lt;th&amp;gt;编辑&amp;lt;/th&amp;gt;
            &amp;lt;th&amp;gt;删除&amp;lt;/th&amp;gt;
        &amp;lt;/tr&amp;gt;
        &amp;lt;/thead&amp;gt;

        &amp;lt;tbody&amp;gt;
        &amp;lt;c:forEach items=&quot;${students}&quot; var=&quot;s&quot; varStatus=&quot;status&quot;&amp;gt;
            &amp;lt;tr&amp;gt;
                &amp;lt;td&amp;gt;${s.student_id}&amp;lt;/td&amp;gt;
                &amp;lt;td&amp;gt;${s.name}&amp;lt;/td&amp;gt;
                &amp;lt;td&amp;gt;${s.age}&amp;lt;/td&amp;gt;
                &amp;lt;td&amp;gt;${s.sex}&amp;lt;/td&amp;gt;
                &amp;lt;td&amp;gt;${s.birthday}&amp;lt;/td&amp;gt;

                &amp;lt;td&amp;gt;&amp;lt;a href=&quot;/editStudent?id=${s.id}&quot;&amp;gt;&amp;lt;span class=&quot;glyphicon glyphicon-edit&quot;&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;/a&amp;gt;&amp;lt;/td&amp;gt;
                &amp;lt;td&amp;gt;&amp;lt;a href=&quot;/deleteStudent?id=${s.id}&quot;&amp;gt;&amp;lt;span class=&quot;glyphicon glyphicon-trash&quot;&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;/a&amp;gt;&amp;lt;/td&amp;gt;
            &amp;lt;/tr&amp;gt;
        &amp;lt;/c:forEach&amp;gt;

        &amp;lt;/tbody&amp;gt;
    &amp;lt;/table&amp;gt;
&amp;lt;/div&amp;gt;

&amp;lt;nav class=&quot;pageDIV&quot;&amp;gt;
    &amp;lt;ul class=&quot;pagination&quot;&amp;gt;
        &amp;lt;li &amp;lt;c:if test=&quot;${!page.hasPreviouse}&quot;&amp;gt;class=&quot;disabled&quot;&amp;lt;/c:if&amp;gt;&amp;gt;
            &amp;lt;a href=&quot;?page.start=0&quot;&amp;gt;
                &amp;lt;span&amp;gt;«&amp;lt;/span&amp;gt;
            &amp;lt;/a&amp;gt;
        &amp;lt;/li&amp;gt;

        &amp;lt;li &amp;lt;c:if test=&quot;${!page.hasPreviouse}&quot;&amp;gt;class=&quot;disabled&quot;&amp;lt;/c:if&amp;gt;&amp;gt;
            &amp;lt;a href=&quot;?page.start=${page.start-page.count}&quot;&amp;gt;
                &amp;lt;span&amp;gt;‹&amp;lt;/span&amp;gt;
            &amp;lt;/a&amp;gt;
        &amp;lt;/li&amp;gt;

        &amp;lt;c:forEach begin=&quot;0&quot; end=&quot;${page.totalPage-1}&quot; varStatus=&quot;status&quot;&amp;gt;

            &amp;lt;c:if test=&quot;${status.count*page.count-page.start&amp;lt;=30 &amp;amp;&amp;amp; status.count*page.count-page.start&amp;gt;=-10}&quot;&amp;gt;
                &amp;lt;li &amp;lt;c:if test=&quot;${status.index*page.count==page.start}&quot;&amp;gt;class=&quot;disabled&quot;&amp;lt;/c:if&amp;gt;&amp;gt;
                    &amp;lt;a
                            href=&quot;?page.start=${status.index*page.count}&quot;
                            &amp;lt;c:if test=&quot;${status.index*page.count==page.start}&quot;&amp;gt;class=&quot;current&quot;&amp;lt;/c:if&amp;gt;
                    &amp;gt;${status.count}&amp;lt;/a&amp;gt;
                &amp;lt;/li&amp;gt;
            &amp;lt;/c:if&amp;gt;
        &amp;lt;/c:forEach&amp;gt;

        &amp;lt;li &amp;lt;c:if test=&quot;${!page.hasNext}&quot;&amp;gt;class=&quot;disabled&quot;&amp;lt;/c:if&amp;gt;&amp;gt;
            &amp;lt;a href=&quot;?page.start=${page.start+page.count}&quot;&amp;gt;
                &amp;lt;span&amp;gt;›&amp;lt;/span&amp;gt;
            &amp;lt;/a&amp;gt;
        &amp;lt;/li&amp;gt;
        &amp;lt;li &amp;lt;c:if test=&quot;${!page.hasNext}&quot;&amp;gt;class=&quot;disabled&quot;&amp;lt;/c:if&amp;gt;&amp;gt;
            &amp;lt;a href=&quot;?page.start=${page.last}&quot;&amp;gt;
                &amp;lt;span&amp;gt;»&amp;lt;/span&amp;gt;
            &amp;lt;/a&amp;gt;
        &amp;lt;/li&amp;gt;
    &amp;lt;/ul&amp;gt;
&amp;lt;/nav&amp;gt;

&amp;lt;div class=&quot;addDIV&quot;&amp;gt;

    &amp;lt;div class=&quot;panel panel-success&quot;&amp;gt;
        &amp;lt;div class=&quot;panel-heading&quot;&amp;gt;
            &amp;lt;h3 class=&quot;panel-title&quot;&amp;gt;增加学生&amp;lt;/h3&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;div class=&quot;panel-body&quot;&amp;gt;

            &amp;lt;form method=&quot;post&quot; action=&quot;/addStudent&quot; role=&quot;form&quot;&amp;gt;
                &amp;lt;table class=&quot;addTable&quot;&amp;gt;
                    &amp;lt;tr&amp;gt;
                        &amp;lt;td&amp;gt;学号：&amp;lt;/td&amp;gt;
                        &amp;lt;td&amp;gt;&amp;lt;input type=&quot;text&quot; name=&quot;student_id&quot; id=&quot;student_id&quot; placeholder=&quot;请在这里输入学号&quot;&amp;gt;&amp;lt;/td&amp;gt;
                    &amp;lt;/tr&amp;gt;
                    &amp;lt;tr&amp;gt;
                        &amp;lt;td&amp;gt;姓名：&amp;lt;/td&amp;gt;
                        &amp;lt;td&amp;gt;&amp;lt;input type=&quot;text&quot; name=&quot;name&quot; id=&quot;name&quot; placeholder=&quot;请在这里输入名字&quot;&amp;gt;&amp;lt;/td&amp;gt;
                    &amp;lt;/tr&amp;gt;
                    &amp;lt;tr&amp;gt;
                        &amp;lt;td&amp;gt;年龄：&amp;lt;/td&amp;gt;
                        &amp;lt;td&amp;gt;&amp;lt;input type=&quot;text&quot; name=&quot;age&quot; id=&quot;age&quot; placeholder=&quot;请在这里输入年龄&quot;&amp;gt;&amp;lt;/td&amp;gt;
                    &amp;lt;/tr&amp;gt;
                    &amp;lt;tr&amp;gt;
                        &amp;lt;td&amp;gt;性别：&amp;lt;/td&amp;gt;
                        &amp;lt;td&amp;gt;&amp;lt;input type=&quot;radio&quot; class=&quot;radio radio-inline&quot; name=&quot;sex&quot; value=&quot;男&quot;&amp;gt; 男
                            &amp;lt;input type=&quot;radio&quot; class=&quot;radio radio-inline&quot; name=&quot;sex&quot; value=&quot;女&quot;&amp;gt; 女
                        &amp;lt;/td&amp;gt;
                    &amp;lt;/tr&amp;gt;
                    &amp;lt;tr&amp;gt;
                        &amp;lt;td&amp;gt;出生日期：&amp;lt;/td&amp;gt;
                        &amp;lt;td&amp;gt;&amp;lt;input type=&quot;date&quot; name=&quot;birthday&quot; id=&quot;birthday&quot; placeholder=&quot;请在这里输入出生日期&quot;&amp;gt;&amp;lt;/td&amp;gt;
                    &amp;lt;/tr&amp;gt;
                    &amp;lt;tr class=&quot;submitTR&quot;&amp;gt;
                        &amp;lt;td colspan=&quot;2&quot; align=&quot;center&quot;&amp;gt;
                            &amp;lt;button type=&quot;submit&quot; class=&quot;btn btn-success&quot;&amp;gt;提 交&amp;lt;/button&amp;gt;
                        &amp;lt;/td&amp;gt;

                    &amp;lt;/tr&amp;gt;

                &amp;lt;/table&amp;gt;
            &amp;lt;/form&amp;gt;
        &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;

&amp;lt;/div&amp;gt;


&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;【editStudent.jsp】：&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot;
         pageEncoding=&quot;UTF-8&quot; %&amp;gt;
&amp;lt;%@ taglib prefix=&quot;c&quot; uri=&quot;http://java.sun.com/jsp/jstl/core&quot; %&amp;gt;

&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;

    &amp;lt;%-- 引入JQ和Bootstrap --%&amp;gt;
    &amp;lt;script src=&quot;js/jquery/2.0.0/jquery.min.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;link href=&quot;css/bootstrap/3.3.6/bootstrap.min.css&quot; rel=&quot;stylesheet&quot;&amp;gt;
    &amp;lt;script src=&quot;js/bootstrap/3.3.6/bootstrap.min.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;link href=&quot;css/style.css&quot; rel=&quot;stylesheet&quot;&amp;gt;

    &amp;lt;title&amp;gt;学生管理页面 - 编辑页面&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;

&amp;lt;body&amp;gt;

&amp;lt;div class=&quot;editDIV&quot;&amp;gt;

    &amp;lt;div class=&quot;panel panel-success&quot;&amp;gt;
        &amp;lt;div class=&quot;panel-heading&quot;&amp;gt;
            &amp;lt;h3 class=&quot;panel-title&quot;&amp;gt;编辑学生&amp;lt;/h3&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;div class=&quot;panel-body&quot;&amp;gt;

            &amp;lt;form method=&quot;post&quot; action=&quot;/updateStudent&quot; role=&quot;form&quot;&amp;gt;
                &amp;lt;table class=&quot;editTable&quot;&amp;gt;
                    &amp;lt;tr&amp;gt;
                        &amp;lt;td&amp;gt;学号：&amp;lt;/td&amp;gt;
                        &amp;lt;td&amp;gt;&amp;lt;input type=&quot;text&quot; name=&quot;student_id&quot; id=&quot;student_id&quot; value=&quot;${student.student_id}&quot;
                                   placeholder=&quot;请在这里输入学号&quot;&amp;gt;&amp;lt;/td&amp;gt;
                    &amp;lt;/tr&amp;gt;
                    &amp;lt;tr&amp;gt;
                        &amp;lt;td&amp;gt;姓名：&amp;lt;/td&amp;gt;
                        &amp;lt;td&amp;gt;&amp;lt;input type=&quot;text&quot; name=&quot;name&quot; id=&quot;name&quot; value=&quot;${student.name}&quot; placeholder=&quot;请在这里输入名字&quot;&amp;gt;
                        &amp;lt;/td&amp;gt;
                    &amp;lt;/tr&amp;gt;
                    &amp;lt;tr&amp;gt;
                        &amp;lt;td&amp;gt;年龄：&amp;lt;/td&amp;gt;
                        &amp;lt;td&amp;gt;&amp;lt;input type=&quot;text&quot; name=&quot;age&quot; id=&quot;age&quot; value=&quot;${student.age}&quot; placeholder=&quot;请在这里输入年龄&quot;&amp;gt;&amp;lt;/td&amp;gt;
                    &amp;lt;/tr&amp;gt;
                    &amp;lt;tr&amp;gt;
                        &amp;lt;td&amp;gt;性别：&amp;lt;/td&amp;gt;
                        &amp;lt;td&amp;gt;&amp;lt;input type=&quot;radio&quot; class=&quot;radio radio-inline&quot; name=&quot;sex&quot; value=&quot;男&quot;&amp;gt; 男
                            &amp;lt;input type=&quot;radio&quot; class=&quot;radio radio-inline&quot; name=&quot;sex&quot; value=&quot;女&quot;&amp;gt; 女
                        &amp;lt;/td&amp;gt;
                    &amp;lt;/tr&amp;gt;
                    &amp;lt;tr&amp;gt;
                        &amp;lt;td&amp;gt;出生日期：&amp;lt;/td&amp;gt;
                        &amp;lt;td&amp;gt;&amp;lt;input type=&quot;date&quot; name=&quot;birthday&quot; id=&quot;birthday&quot; value=&quot;${student.birthday}&quot;
                                   placeholder=&quot;请在这里输入出生日期&quot;&amp;gt;&amp;lt;/td&amp;gt;
                    &amp;lt;/tr&amp;gt;
                    &amp;lt;tr class=&quot;submitTR&quot;&amp;gt;
                        &amp;lt;td colspan=&quot;2&quot; align=&quot;center&quot;&amp;gt;
                            &amp;lt;input type=&quot;hidden&quot; name=&quot;id&quot; value=&quot;${student.id}&quot;&amp;gt;
                            &amp;lt;button type=&quot;submit&quot; class=&quot;btn btn-success&quot;&amp;gt;提 交&amp;lt;/button&amp;gt;
                        &amp;lt;/td&amp;gt;

                    &amp;lt;/tr&amp;gt;

                &amp;lt;/table&amp;gt;
            &amp;lt;/form&amp;gt;
        &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;

&amp;lt;/div&amp;gt;

&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;style.css 文件：&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code&gt;body {
    padding-top: 60px;
}

div.listDIV {
    width: 600px;
    margin: 0 auto;
}

div.editDIV {
    width: 400px;
    margin: 0 auto;
}

nav.pageDIV {
    text-align: center;
}

div.addDIV {
    width: 300px;
    margin: 0 auto;
}

table.addTable {
    width: 100%;
    padding: 5px;
}

table.addTable td {
    padding: 5px;
}

table.editTable {
    width: 100%;
    padding: 5px;
}

table.editTable td {
    padding: 5px;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;项目的整体结构&quot;&gt;项目的整体结构&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/7896890-3012fde670b3ff42.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot;/&gt;&lt;/p&gt;
&lt;h4 id=&quot;分页功能&quot;&gt;分页功能&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;首先在 Packge【util】包下创建一个 Page 工具类：&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code&gt;package cn.wmyskxz.util;

public class Page {

    int start;      // 开始数据
    int count;      // 每一页的数量
    int total;      // 总共的数据量

    public Page(int start, int count) {
        super();
        this.start = start;
        this.count = count;
    }

    public boolean isHasPreviouse(){
        if(start==0)
            return false;
        return true;

    }
    public boolean isHasNext(){
        if(start==getLast())
            return false;
        return true;
    }

    public int getTotalPage(){
        int totalPage;
        // 假设总数是50，是能够被5整除的，那么就有10页
        if (0 == total % count)
            totalPage = total /count;
            // 假设总数是51，不能够被5整除的，那么就有11页
        else
            totalPage = total / count + 1;

        if(0==totalPage)
            totalPage = 1;
        return totalPage;

    }

    public int getLast(){
        int last;
        // 假设总数是50，是能够被5整除的，那么最后一页的开始就是40
        if (0 == total % count)
            last = total - count;
            // 假设总数是51，不能够被5整除的，那么最后一页的开始就是50
        else
            last = total - total % count;

        last = last&amp;lt;0?0:last;
        return last;
    }

    // 各种 setter 和 getter
}&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;totalPage 是计算得来的数，用来表示页码一共的数量&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;在首页显示的 StudentList 用 page 的参数来获取：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;List&amp;lt;Student&amp;gt; students = studentService.list(page.getStart(), page.getCount());&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;并且在映射文件中用 &lt;strong&gt;LIMIT&lt;/strong&gt; 关键字：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;lt;!-- 查询从start位置开始的count条数据--&amp;gt;
&amp;lt;select id=&quot;list&quot; resultMap=&quot;student&quot;&amp;gt;
    SELECT * FROM student ORDER BY student_id desc limit #{param1}, #{param2}
&amp;lt;/select&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;1.写好头和尾&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;lt;nav class=&quot;pageDIV&quot;&amp;gt;
    &amp;lt;ul class=&quot;pagination&quot;&amp;gt;
    .....
    &amp;lt;/ul&amp;gt;
&amp;lt;/nav&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;2.写好&lt;code&gt;«&lt;/code&gt; &lt;code&gt;‹&lt;/code&gt;这两个功能按钮&lt;br/&gt;使用 &lt;code&gt;&amp;lt;c:if&amp;gt;&lt;/code&gt;标签来增加边界判断，如果没有前面的页码了则设置为disable状态&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;        &amp;lt;li &amp;lt;c:if test=&quot;${!page.hasPreviouse}&quot;&amp;gt;class=&quot;disabled&quot;&amp;lt;/c:if&amp;gt;&amp;gt;
            &amp;lt;a href=&quot;?page.start=0&quot;&amp;gt;
                &amp;lt;span&amp;gt;«&amp;lt;/span&amp;gt;
            &amp;lt;/a&amp;gt;
        &amp;lt;/li&amp;gt;

        &amp;lt;li &amp;lt;c:if test=&quot;${!page.hasPreviouse}&quot;&amp;gt;class=&quot;disabled&quot;&amp;lt;/c:if&amp;gt;&amp;gt;
            &amp;lt;a href=&quot;?page.start=${page.start-page.count}&quot;&amp;gt;
                &amp;lt;span&amp;gt;‹&amp;lt;/span&amp;gt;
            &amp;lt;/a&amp;gt;
        &amp;lt;/li&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;再通过 JavaScrip 代码来完成禁用功能：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;lt;script&amp;gt;
    $(function () {
        $(&quot;ul.pagination li.disabled a&quot;).click(function () {
            return false;
        });
    });
&amp;lt;/script&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;3.完成中间页码的编写&lt;br/&gt;从 &lt;code&gt;0&lt;/code&gt; 循环到 &lt;code&gt;page.totalPage - 1&lt;/code&gt; ，&lt;code&gt;varStatus&lt;/code&gt; 相当于是循环变量&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;status.count 是从1开始遍历&lt;/li&gt;
&lt;li&gt;status.index 是从0开始遍历&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;要求：&lt;/strong&gt;显示当前页码的前两个和后两个就可，例如当前页码为3的时候，就显示 1 2 3(当前页) 4 5 的页码&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;理解测试条件：&lt;/strong&gt;&lt;br/&gt;-10 &amp;lt;= 当前页*每一页显示的数目 - 当前页开始的数据编号 &amp;lt;= 30&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/7896890-1f82d91e47a31c7f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot;/&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;只要理解了这个判断条件，其他的就都好理解了&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code&gt;&amp;lt;c:forEach begin=&quot;0&quot; end=&quot;${page.totalPage-1}&quot; varStatus=&quot;status&quot;&amp;gt;

    &amp;lt;c:if test=&quot;${status.count*page.count-page.start&amp;lt;=30 &amp;amp;&amp;amp; status.count*page.count-page.start&amp;gt;=-10}&quot;&amp;gt;
        &amp;lt;li &amp;lt;c:if test=&quot;${status.index*page.count==page.start}&quot;&amp;gt;class=&quot;disabled&quot;&amp;lt;/c:if&amp;gt;&amp;gt;
            &amp;lt;a
                    href=&quot;?page.start=${status.index*page.count}&quot;
                    &amp;lt;c:if test=&quot;${status.index*page.count==page.start}&quot;&amp;gt;class=&quot;current&quot;&amp;lt;/c:if&amp;gt;
            &amp;gt;${status.count}&amp;lt;/a&amp;gt;
        &amp;lt;/li&amp;gt;
    &amp;lt;/c:if&amp;gt;
&amp;lt;/c:forEach&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;4.在控制器中获取参数&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;// 获取分页参数
int start = 0;
int count = 10;

try {
    start = Integer.parseInt(request.getParameter(&quot;page.start&quot;));
    count = Integer.parseInt(request.getParameter(&quot;page.count&quot;));
} catch (Exception e) {
}

....

// 共享 page 数据
request.setAttribute(&quot;page&quot;, page);&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;date-转换的问题&quot;&gt;Date 转换的问题&lt;/h4&gt;
&lt;p&gt;最开始的时候，我们看到页面上显示的日期是这样的格式：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/7896890-6d4120db01b4df30.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这显然是我们不希望看到的&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;解决方案：在映射文件中设置日期显示的类型。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/7896890-d70cfa9638709579.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot;/&gt;&lt;/p&gt;
&lt;p&gt;重新部署文件，然后刷新页面，就能看到我们希望的效果啦：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/7896890-f99cbf278ce04c17.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot;/&gt;&lt;/p&gt;
&lt;h4 id=&quot;项目总结&quot;&gt;项目总结&lt;/h4&gt;
&lt;ol&gt;&lt;li&gt;由于之前的项目代码都有，所以在&lt;strong&gt;重构的时候，基本上没有花什么时间&lt;/strong&gt;就完成了项目的搭建，能够体会到&lt;strong&gt;代码分离的重要性&lt;/strong&gt;，这在很大程度上保证了我们的代码复用。&lt;/li&gt;
&lt;li&gt;相较于之前用 Servlet + JSP 来完成，很明显的感觉是&lt;strong&gt;DAO层的编写方便了很多，仅仅需要编写一个 xml 映射文件和一个 Dao 层接口就可以完成功能，&lt;/strong&gt;而不用自己再去重复的去在每一个 CRUD 方法中去处理结果集，重复而且繁琐。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;注解真的很方便，&lt;/strong&gt;这不仅仅提升了我们自身开发的效率，写起来也很带劲儿。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;开发效率快，而且低耦合，&lt;/strong&gt;我们基于 xml 配置了大部分的工作，在基于 SSM 框架开发时，我们&lt;strong&gt;可以把专注点集中在逻辑处理上。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;在 SSM 框架中&lt;strong&gt;能方便的对项目进行修改，&lt;/strong&gt;这不仅仅得益于框架的约定，使得代码分离并且可复用，也得益于 Maven 工具对于项目的管理。&lt;/li&gt;
&lt;li&gt;我们能够通过一个 Controller 来完成五个 Servlet 的功能，并且通过注解来完成配置。&lt;/li&gt;
&lt;/ol&gt;&lt;hr/&gt;&lt;h2 id=&quot;项目改进&quot;&gt;项目改进&lt;/h2&gt;
&lt;p&gt;项目很简单，仅仅也只是在数据库增删改查的基础上增加了一个界面，我们来动手改一改。&lt;/p&gt;
&lt;h4 id=&quot;改进一增加删除提示&quot;&gt;改进一：增加删除提示&lt;/h4&gt;
&lt;p&gt;第一个想到的就是删除提示，没有删除提示是很要命的一件事情，如果手滑了一下那可能就悲剧了....&lt;/p&gt;
&lt;p&gt;首先我们在顶部的 &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; 标签中的 &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; 中增加一段代码：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;function del() {
    var msg = &quot;您真的确定要删除吗？\n\n请确认！&quot;;
    if (confirm(msg) == true) {
        return true;
    } else {
        return false;
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;然后在删除 a 标签页中增加 onclick 属性：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;onclick=&quot;javascript:return del();&quot;
....就像下面这样....
td&amp;gt;&amp;lt;a href=&quot;/deleteStudent?id=${s.id}&quot; onclick=&quot;javascript:return del();&quot;&amp;gt;&amp;lt;span
        class=&quot;glyphicon glyphicon-trash&quot;&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;/a&amp;gt;&amp;lt;/td&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;当我们刷新页面后，点击删除就会弹出提示信息：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/7896890-944caee345a8b0a4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot;/&gt;&lt;/p&gt;
&lt;h4 id=&quot;改进二编辑页面自动勾选上性别&quot;&gt;改进二：编辑页面自动勾选上性别&lt;/h4&gt;
&lt;p&gt;在当前的项目中，如果点击编辑按钮进入到编辑页面后，性别这个选项是空选的状态，这就很low：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/7896890-4e3152100e76f6f6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这个也很简单，在 editStudent 页面增加一些判断就好了：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/7896890-90029a61673b0b1e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot;/&gt;&lt;/p&gt;
&lt;p&gt;用 &lt;code&gt;&amp;lt;c:if&amp;gt;&lt;/code&gt; 标签来判断 sex 的值，然后根据对应的属性增加 checked 属性，这样就可以自动勾选上所对应的属性：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/7896890-814b777087dd85d0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot;/&gt;&lt;/p&gt;
&lt;h4 id=&quot;改进三空值判断&quot;&gt;改进三：空值判断&lt;/h4&gt;
&lt;p&gt;我们允许设置为 null 的值仅仅为出生日期，其他的值均不允许出现空值，所以我们需要加入空值判断：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;function checkEmpty(id, name) {
    var value = $(&quot;#&quot; + id).val();
    if (value.length == 0) {
        alert(name + &quot;不能为空&quot;);
        $(&quot;#&quot; + id).focus();
        return false;
    }
    return true;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;然后再为 form 创建一个 id 属性值为 “addForm” 并添加进判断空值的方法：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/7896890-3a2a1bf8b9030c40.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot;/&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;注意：&lt;/strong&gt; 这里需要写在 $(function(){}) 里面，等待文档加载完毕才能生效。&lt;/li&gt;
&lt;li&gt;这里并没有为 sex 属性判断空值，我们采用一个简单的&lt;strong&gt;为 sex 添加一个默认勾选项&lt;/strong&gt;来省略空值的判断。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;同样的，我们也在编辑页面，采用同样的方法进行空值判断：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/7896890-f51f469bcaef903d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot;/&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;3.3290322580645&quot;&gt;
&lt;p&gt;欢迎转载，转载请注明出处！&lt;br/&gt;@我没有三颗心脏&lt;br/&gt;CSDN博客：&lt;a href=&quot;http://blog.csdn.net/qq939419061&quot; class=&quot;uri&quot;&gt;http://blog.csdn.net/qq939419061&lt;/a&gt;&lt;br/&gt;简书：&lt;a href=&quot;http://www.jianshu.com/u/a40d61a49221&quot; class=&quot;uri&quot;&gt;http://www.jianshu.com/u/a40d61a49221&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
<pubDate>Tue, 24 Apr 2018 13:33:00 +0000</pubDate>
<dc:creator>我没有三颗心脏</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/wmyskxz/p/8933898.html</dc:identifier>
</item>
<item>
<title>通过接口标准化ABAP OO开发 - 氢氦</title>
<link>http://www.cnblogs.com/hhelibeb/p/8919767.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/hhelibeb/p/8919767.html</guid>
<description>&lt;p&gt;本文是对接口编程的讨论，希望能对年轻的开发者有所帮助。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;要点：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;通过接口对类方法进行更高层的抽象&lt;/li&gt;
&lt;li&gt;接口使代码清晰易读&lt;/li&gt;
&lt;li&gt;接口使你可以创建模拟对象（Mockup Object）以提高代码的可测试性&lt;/li&gt;
&lt;li&gt;帮助实现&lt;a href=&quot;https://zh.wikipedia.org/wiki/SOLID_(%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%AE%BE%E8%AE%A1)&quot; target=&quot;_blank&quot;&gt;SOLID原则&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;可以在不使用&lt;a href=&quot;https://help.sap.com/doc/abapdocu_752_index_htm/7.52/en-US/abenrtti.htm&quot; target=&quot;_blank&quot;&gt;RTTS&lt;/a&gt;和类型转换的前提下使用多种类的不同实例。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;因为在学习ABAP之前，我曾经学习过其它面向对象语言，因此我很纠结于ABAP中不存在的一个特性——重载方法（overload)。&lt;/p&gt;
&lt;p&gt;也许你会问，&lt;strong&gt;重载是什么？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;重载就是函数或者方法有相同的名称，但是参数列表和实现不相同的情形。&lt;/p&gt;
&lt;p&gt;没有了重载，在某种程度上，类也许会变的过大，并且难以追踪那些有着相似行为但是名字不同的方法。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;接口不提供重载能力，但是通过限制名字不同但是功能相近的方法的数量，接口可以整理和简化你的代码。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;本文链接：&lt;a id=&quot;Editor_Edit_hlEntryLink&quot; title=&quot;view: 通过接口标准化ABAP OO开发&quot; href=&quot;http://www.cnblogs.com/hhelibeb/p/8919767.html&quot; target=&quot;_blank&quot;&gt;http://www.cnblogs.com/hhelibeb/p/8919767.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;span lang=&quot;zh-CN&quot;&gt;英文原文：&lt;a href=&quot;https://blogs.sap.com/2018/03/04/using-interfaces-to-standardize-your-abap-oo-development/&quot; target=&quot;_blank&quot;&gt;Using interfaces to standardize your ABAP OO Development&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;简介&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;在ABAP中类的继承是单一继承（每个类只能有一个父类），接口实现可以有多个。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/994049/201804/994049-20180424141759430-801644128.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;例如，上图中的LCL_Child_Class继承LCL_Parent_Class中所有的非私有变量、方法、类型和常量，并且必须实现LINF_Utility和LINF_Saver接口中所有的功能。&lt;/p&gt;
&lt;p&gt;为了解释接口的定义，我将使用个“不怎么专业”的描述——它是一个类似于类的实体，不包含所声明的方法的任何具体实现，但是它可能包含常量、类型和变量。&lt;strong&gt;接口无法被初始化。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;默认情况下接口的所有方法都必须被实现——这是面向对象编程中的一个通常的强制规则。不能允许接口方法的实现变得可选择，但是这不属于本文的讨论范围，所以不会展开论述。&lt;/p&gt;
&lt;p&gt;（译注：原文评论指出，在ABAP中，可以使用&lt;strong&gt;DEFAULT IGNORE|FAIL&lt;/strong&gt;附加项指定一个可选的接口方法，虽然好像并没有什么用）&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;“真实”用例&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;设想下我们有个程序，需要从多种数据源获取数据并更新到表SFLIGHT：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Excel上传&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.cnblogs.com/hhelibeb/p/8066753.html&quot; target=&quot;_blank&quot;&gt;RFC&lt;/a&gt;上传&lt;/li&gt;
&lt;li&gt;在程序运行期间上传修改和插入的行&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;当然我们可以在该清单中添加ADBC源、经由HTTP客户端对象抓取的JSON/XML源等，但是我只是想介绍下要点，没必要穷举所有例子。&lt;/p&gt;
&lt;p&gt;同时，因为本文只是对可能性的表述，因此我不会创建一个能真正工作的程序。&lt;/p&gt;
&lt;h2&gt;声明接口&lt;/h2&gt;
&lt;p&gt;我们将创建2个接口，不过在这个例子里只有一个是真实需要的。&lt;/p&gt;
&lt;p&gt;第一个是最重要的，我命名它为linf_sflight_career，因为这是个用于EXCEL、RFC和本地表运输（carrier）的本地接口，在本地类中实现。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;interface&lt;/span&gt;&lt;span&gt; linf_sflight_carrier.
    &lt;span&gt;types&lt;/span&gt;: tt_sflight &lt;span&gt;type standard table of&lt;/span&gt; sflight &lt;span&gt;with default key&lt;/span&gt;,
           st_sflight &lt;span&gt;type sorted table of&lt;/span&gt; sflight&lt;span&gt; with non&lt;/span&gt;&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;&lt;span&gt;unique key&lt;/span&gt; mandt carrid connid,
           ht_sflight &lt;span&gt;type hashed table of&lt;/span&gt; sflight&lt;span&gt; with unique key&lt;/span&gt; mandt carrid connid fldate.
    &lt;span&gt;methods&lt;/span&gt;: &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;! Returns hashed table SFLIGHT contents&lt;/span&gt;
             &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;! @parameter r_sflight |&lt;/span&gt;
&lt;span&gt;             get_hashed_records &lt;span&gt;returning value&lt;/span&gt;(r_sflight) &lt;span&gt;type&lt;/span&gt; ht_sflight,
             &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;! Returns sorted table SFLIGHT contents&lt;/span&gt;
             &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;! @parameter r_sflight |&lt;/span&gt;
&lt;span&gt;             get_sorted_records &lt;span&gt;returning value&lt;/span&gt;(r_sflight) &lt;span&gt;type&lt;/span&gt; st_sflight,
             &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;! Returns standard table SFLIGHT contents&lt;/span&gt;
             &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;! @parameter r_sflight |&lt;/span&gt;
&lt;span&gt;             get_standard_records &lt;span&gt;returning value&lt;/span&gt;(r_sflight) &lt;span&gt;type&lt;/span&gt; tt_sflight.       
&lt;span&gt;endinterface&lt;/span&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;接口包含不同的表类型和三个方法，将会在EXCEL、RFC和表运输的类中实现。&lt;/p&gt;
&lt;p&gt;下个接口由负责保存数据到数据库的类实现：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;interface&lt;/span&gt;&lt;span&gt; linf_sflight_saver.
    &lt;span&gt;constants&lt;/span&gt;: &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;! Table lock types&lt;/span&gt;
&lt;span&gt;&lt;span&gt;               begin of&lt;/span&gt; lock_types,
                exclusive&lt;span&gt; type&lt;/span&gt; enqmode&lt;span&gt; value &lt;/span&gt;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;E&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
               &lt;span&gt;end of&lt;/span&gt; lock_types.
    &lt;span&gt;constants&lt;/span&gt;: &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;! Scopes for table lock&lt;/span&gt;
&lt;span&gt;&lt;span&gt;               begin of&lt;/span&gt; scope_range,
                _2 &lt;span&gt;type&lt;/span&gt; char01 value &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
               &lt;span&gt;end of&lt;/span&gt; scope_range.
    &lt;span&gt;constants&lt;/span&gt;: _sflight &lt;span&gt;type&lt;/span&gt; tablename &lt;span&gt;value&lt;/span&gt; &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;SFLIGHT&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;.                      
   &lt;span&gt; methods&lt;/span&gt;: &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;! Save data from carrier object to SFLIGHT table&lt;/span&gt;
             &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;! @parameter i_carrier | Carrier object&lt;/span&gt;
&lt;span&gt;             save_data &lt;span&gt;importing&lt;/span&gt; i_carrier &lt;span&gt;type ref to&lt;/span&gt; linf_sflight_carrier.
&lt;span&gt;endinterface&lt;/span&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在这里，你也许会问，为什么我们需要这么多类来完成一个很简单的工作？为什么我们不利用相似的类继承或者是单个类来实现目的？&lt;/p&gt;
&lt;p&gt;答案是显然的：&lt;a href=&quot;https://en.wikipedia.org/wiki/SOLID_(object-oriented_design)&quot;&gt;SOLID&lt;/a&gt;。如果你想要知道关于它的更多信息，可以留言回复，我将创建另一篇博客单独讲这一话题。&lt;/p&gt;
&lt;p&gt;回到主题——接下来是类：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;56&quot;&gt;
&lt;pre&gt;
&lt;span&gt;class&lt;/span&gt;&lt;span&gt; lcl_excel_carrier definition.
    &lt;span&gt;public section&lt;/span&gt;.
        &lt;span&gt;interfaces&lt;/span&gt;: linf_sflight_carrier.
        &lt;span&gt;aliases&lt;/span&gt;: tt_sflight &lt;span&gt;for&lt;/span&gt; linf_sflight_carrier~tt_sflight,
                 st_sflight &lt;span&gt;for&lt;/span&gt; linf_sflight_carrier~st_sflight,
                 ht_sflight &lt;span&gt;for&lt;/span&gt; linf_sflight_carrier~ht_sflight,
                 get_hashed_records &lt;span&gt;for&lt;/span&gt; linf_sflight_carrier~get_hashed_records,
                 get_sorted_records &lt;span&gt;for&lt;/span&gt; linf_sflight_carrier~get_sorted_records,
                 get_standard_records &lt;span&gt;for&lt;/span&gt; linf_sflight_carrier~get_standard_records.
    &lt;span&gt;protected section&lt;/span&gt;.
   &lt;span&gt; private section&lt;/span&gt;.
        &lt;span&gt;data&lt;/span&gt;: standard_sflight &lt;span&gt;type&lt;/span&gt; tt_sflight,
              sorted_sflight &lt;span&gt;type&lt;/span&gt; st_sflight,
              hashed_sflight &lt;span&gt;type&lt;/span&gt; ht_sflight.
&lt;span&gt;endclass&lt;/span&gt;.
&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; lcl_excel_carrier &lt;span&gt;implementation&lt;/span&gt;.
  &lt;span&gt;method&lt;/span&gt; get_hashed_records.
    r_sflight &lt;/span&gt;=&lt;span&gt; hashed_sflight.
  &lt;span&gt;endmethod&lt;/span&gt;.
  &lt;span&gt;method&lt;/span&gt; get_sorted_records.
    r_sflight &lt;/span&gt;=&lt;span&gt; sorted_sflight.
  &lt;span&gt;endmethod&lt;/span&gt;.
  &lt;span&gt;method&lt;/span&gt; get_standard_records.
    r_sflight &lt;/span&gt;=&lt;span&gt; standard_sflight.
  &lt;span&gt;endmethod&lt;/span&gt;.
&lt;span&gt;endclass&lt;/span&gt;.

&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; lcl_rfc_carrier &lt;span&gt;definition&lt;/span&gt;.
    &lt;span&gt;public section&lt;/span&gt;.
            &lt;span&gt;interfaces&lt;/span&gt;: linf_sflight_carrier.
            aliases: tt_sflight &lt;span&gt;for&lt;/span&gt; linf_sflight_carrier~tt_sflight,
                     st_sflight &lt;span&gt;for&lt;/span&gt; linf_sflight_carrier~st_sflight,
                     ht_sflight &lt;span&gt;for&lt;/span&gt; linf_sflight_carrier~ht_sflight,
                     get_hashed_records &lt;span&gt;for&lt;/span&gt; linf_sflight_carrier~get_hashed_records,
                     get_sorted_records &lt;span&gt;for&lt;/span&gt; linf_sflight_carrier~get_sorted_records,
                     get_standard_records &lt;span&gt;for&lt;/span&gt; linf_sflight_carrier~get_standard_records.
    &lt;span&gt;protected section&lt;/span&gt;.
    &lt;span&gt;private section&lt;/span&gt;.
        &lt;span&gt;data&lt;/span&gt;: standard_sflight &lt;span&gt;type&lt;/span&gt; tt_sflight,
              sorted_sflight &lt;span&gt;type&lt;/span&gt; st_sflight,
              hashed_sflight &lt;span&gt;type&lt;/span&gt; ht_sflight.
&lt;span&gt;endclass&lt;/span&gt;.
&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; lcl_rfc_carrier &lt;span&gt;implementation&lt;/span&gt;.
  &lt;span&gt;method&lt;/span&gt; get_hashed_records.
    r_sflight &lt;/span&gt;=&lt;span&gt; hashed_sflight.
  &lt;span&gt;endmethod&lt;/span&gt;.
  &lt;span&gt;method&lt;/span&gt; get_sorted_records.
    r_sflight &lt;/span&gt;=&lt;span&gt; sorted_sflight.
  &lt;span&gt;endmethod&lt;/span&gt;.
  &lt;span&gt;method&lt;/span&gt; get_standard_records.
    r_sflight &lt;/span&gt;=&lt;span&gt; standard_sflight.
  &lt;span&gt;endmethod&lt;/span&gt;.
&lt;span&gt;endclass&lt;/span&gt;.

&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; lcl_table_carrier &lt;span&gt;definition&lt;/span&gt;.
    &lt;span&gt;public section&lt;/span&gt;.
            &lt;span&gt;interfaces&lt;/span&gt;: linf_sflight_carrier.
            &lt;span&gt;aliases&lt;/span&gt;: tt_sflight &lt;span&gt;for&lt;/span&gt; linf_sflight_carrier~tt_sflight,
                     st_sflight &lt;span&gt;for&lt;/span&gt; linf_sflight_carrier~st_sflight,
                     ht_sflight &lt;span&gt;for&lt;/span&gt; linf_sflight_carrier~ht_sflight,
                     get_hashed_records &lt;span&gt;for&lt;/span&gt; linf_sflight_carrier~get_hashed_records,
                     get_sorted_records &lt;span&gt;for&lt;/span&gt; linf_sflight_carrier~get_sorted_records,
                     get_standard_records &lt;span&gt;for&lt;/span&gt; linf_sflight_carrier~get_standard_records.
    &lt;span&gt;protected section&lt;/span&gt;.
    &lt;span&gt;private section&lt;/span&gt;.
        &lt;span&gt;data&lt;/span&gt;: standard_sflight &lt;span&gt;type&lt;/span&gt; tt_sflight,
              sorted_sflight &lt;span&gt;type&lt;/span&gt; st_sflight,
              hashed_sflight &lt;span&gt;type&lt;/span&gt; ht_sflight.
&lt;span&gt;endclass&lt;/span&gt;.
&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; lcl_table_carrier &lt;span&gt;implementation&lt;/span&gt;.
  &lt;span&gt;method&lt;/span&gt; get_hashed_records.
    r_sflight &lt;/span&gt;=&lt;span&gt; hashed_sflight.
  &lt;span&gt;endmethod&lt;/span&gt;.
  &lt;span&gt;method&lt;/span&gt; get_sorted_records.
    r_sflight &lt;/span&gt;=&lt;span&gt; sorted_sflight.
  &lt;span&gt;endmethod&lt;/span&gt;.
  &lt;span&gt;method&lt;/span&gt; get_standard_records.
    r_sflight &lt;/span&gt;=&lt;span&gt; standard_sflight.
  &lt;span&gt;endmethod&lt;/span&gt;.
&lt;span&gt;endclass&lt;/span&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上面的类有着相同的功能，但是根据具体的运输目的，完整的实现类会有某些特定的方法（比如从raw数据中过滤、检索数据等等）。&lt;/p&gt;
&lt;p&gt;所有运输类需要实现linf_sflight_carrier——由此我们不再不得不在每个类中定义所有的方法了。不过，我使用&lt;strong&gt;aliases&lt;/strong&gt;关键字增加了别名，以提高代码的可读性。&lt;/p&gt;
&lt;p&gt;我们下一个将要创建的类是数据库保存者，名字是lcl_database_saver：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;class&lt;/span&gt;&lt;span&gt; lcl_database_saver &lt;span&gt;definition&lt;/span&gt;.
    &lt;span&gt;public section&lt;/span&gt;.
        &lt;span&gt;interfaces&lt;/span&gt;: linf_sflight_saver.
        &lt;span&gt;aliases&lt;/span&gt;: lock_types &lt;span&gt;for&lt;/span&gt; linf_sflight_saver~lock_types,
                 scope_range &lt;span&gt;for&lt;/span&gt; linf_sflight_saver~scope_range,
                 save_data &lt;span&gt;for&lt;/span&gt; linf_sflight_saver~save_data,
                 _sflight &lt;span&gt;for&lt;/span&gt; linf_sflight_saver~_sflight.
   &lt;span&gt; protected section&lt;/span&gt;.
   &lt;span&gt; private section&lt;/span&gt;.
        &lt;span&gt;methods&lt;/span&gt;: &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;! Creates table lock key for database lock&lt;/span&gt;
                 &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;! @parameter i_sflight_ref | Reference to SFLIGHT table line&lt;/span&gt;
                 &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;! @parameter r_varkey | Varkey returned&lt;/span&gt;
&lt;span&gt;                 create_varkey &lt;span&gt;importing&lt;/span&gt; i_sflight_ref &lt;span&gt;type ref to&lt;/span&gt; sflight
                               &lt;span&gt;returning&lt;/span&gt; &lt;span&gt;value&lt;/span&gt;(r_varkey) &lt;span&gt;type&lt;/span&gt; vim_enqkey,
                 &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;! Locks table using passed varkey&lt;/span&gt;
                 &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;! @parameter i_varkey | Table lock key&lt;/span&gt;
                 &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;! @parameter i_tabname | Table name&lt;/span&gt;
                 &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;! @parameter r_subrc | Information on lock creation. 0 = okay&lt;/span&gt;
&lt;span&gt;                 lock_table_line &lt;span&gt;importing&lt;/span&gt; i_varkey &lt;span&gt;type&lt;/span&gt; vim_enqkey
                                           i_tabname &lt;span&gt;type&lt;/span&gt; tablename &lt;span&gt;default&lt;/span&gt; _sflight
                                 &lt;span&gt;returning value&lt;/span&gt;(r_is_locked) &lt;span&gt;type&lt;/span&gt; abap_bool,
                 &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;! Unlocks locked table line&lt;/span&gt;
                 &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;! @parameter i_varkey | Table lock key&lt;/span&gt;
                 &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;! @parameter i_tabname | Table name&lt;/span&gt;
&lt;span&gt;                 unlock_table_line &lt;span&gt;importing&lt;/span&gt; i_varkey &lt;span&gt;type&lt;/span&gt; vim_enqkey
                                             i_tabname &lt;span&gt;type&lt;/span&gt; tablename &lt;span&gt;default&lt;/span&gt; _sflight.
&lt;span&gt;endclass&lt;/span&gt;.
&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; lcl_database_saver &lt;span&gt;implementation&lt;/span&gt;.
  &lt;span&gt;method&lt;/span&gt; save_data.
        &lt;span&gt;loop at&lt;/span&gt; i_carrier&lt;/span&gt;-&amp;gt;&lt;span&gt;get_standard_records( ) reference &lt;span&gt;into&lt;/span&gt; &lt;span&gt;data&lt;/span&gt;(standard_line).
            &lt;span&gt;data&lt;/span&gt;(varkey) &lt;/span&gt;=&lt;span&gt; create_varkey( standard_line ).
            &lt;span&gt;if&lt;/span&gt; lock_table_line( i_varkey &lt;/span&gt;=&lt;span&gt; varkey ).
                &lt;span&gt;modify&lt;/span&gt; sflight from standard_line&lt;/span&gt;-&amp;gt;*&lt;span&gt;.
                unlock_table_line( &lt;span&gt;exporting&lt;/span&gt; i_varkey  &lt;/span&gt;=&lt;span&gt; varkey ).
            &lt;span&gt;endif&lt;/span&gt;.
        &lt;span&gt;endloop&lt;/span&gt;.
  &lt;span&gt;endmethod&lt;/span&gt;.
  &lt;span&gt;method&lt;/span&gt; lock_table_line.
    call &lt;/span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;ENQUEUE_E_TABLEE&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;&lt;span&gt;
      exporting&lt;/span&gt;
        mode_rstable   &lt;/span&gt;= lock_types-exclusive    &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; Lock mode for table RSTABLE&lt;/span&gt;
        tabname        = i_tabname    &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; 01th enqueue argument&lt;/span&gt;
        varkey         = i_varkey    &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; 02th enqueue argument&lt;/span&gt;
        _scope         = scope_range-&lt;span&gt;_2
      &lt;span&gt;exceptions&lt;/span&gt;
        foreign_lock   &lt;/span&gt;= &lt;span&gt;1&lt;/span&gt;&lt;span&gt;
        system_failure &lt;/span&gt;= &lt;span&gt;2&lt;/span&gt;&lt;span&gt;&lt;span&gt;
        others        &lt;/span&gt; &lt;/span&gt;= &lt;span&gt;3&lt;/span&gt;&lt;span&gt;.
     r_is_locked &lt;/span&gt;= xsdbool( sy-subrc = &lt;span&gt;0&lt;/span&gt;&lt;span&gt; ).
  &lt;span&gt;endmethod&lt;/span&gt;.
  &lt;span&gt;method&lt;/span&gt; unlock_table_line.
    call &lt;/span&gt;&lt;span&gt;function&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;DEQUEUE_E_TABLEE&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
      exporting
        mode_rstable &lt;/span&gt;= lock_types-exclusive    &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; Lock mode for table RSTABLE&lt;/span&gt;
        tabname      = i_tabname    &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; 01th enqueue argument&lt;/span&gt;
        varkey       = i_varkey    &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; 02th enqueue argument&lt;/span&gt;
        _scope       = scope_range-&lt;span&gt;_2.
  &lt;span&gt;endmethod&lt;/span&gt;.
  &lt;span&gt;method&lt;/span&gt; create_varkey.
    r_varkey &lt;/span&gt;= |{ i_sflight_ref-&amp;gt;mandt }{ i_sflight_ref-&amp;gt;carrid }{ i_sflight_ref-&amp;gt;connid }{ i_sflight_ref-&amp;gt;&lt;span&gt;fldate }|.
  &lt;span&gt;endmethod&lt;/span&gt;.
&lt;span&gt;endclass&lt;/span&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;最后，运行例子：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt;initialization&lt;/span&gt;.
&lt;span&gt;data&lt;/span&gt;(excel_carrier) &lt;/span&gt;=&lt;span&gt;&lt;span&gt; new&lt;/span&gt; lcl_excel_carrier( ).
&lt;span&gt;data&lt;/span&gt;(rfc_carrier) &lt;/span&gt;=&lt;span&gt;&lt;span&gt; new&lt;/span&gt; lcl_rfc_carrier( ).
&lt;span&gt;data&lt;/span&gt;(database_saver) &lt;/span&gt;=&lt;span&gt;&lt;span&gt; new&lt;/span&gt; lcl_database_saver( ).

&lt;span&gt;try&lt;/span&gt;.
    database_saver&lt;/span&gt;-&amp;gt;save_data( i_carrier =&lt;span&gt; excel_carrier ).
&lt;span&gt;catch&lt;/span&gt; cx_sy_assign_cast_illegal_cast.
&lt;span&gt;catch&lt;/span&gt; cx_sy_assign_cast_unknown_type.
&lt;span&gt;catch&lt;/span&gt; cx_sy_assign_cast_error.
&lt;span&gt;endtry&lt;/span&gt;.

&lt;span&gt;try&lt;/span&gt;.
    database_saver&lt;/span&gt;-&amp;gt;save_data( i_carrier =&lt;span&gt; rfc_carrier ).
&lt;span&gt;catch&lt;/span&gt; cx_sy_assign_cast_illegal_cast.
&lt;span&gt;catch&lt;/span&gt; cx_sy_assign_cast_unknown_type.
&lt;span&gt;catch&lt;/span&gt; cx_sy_assign_cast_error.
&lt;span&gt;endtry&lt;/span&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;如你所见，通过把抽象部分移动到接口层面，我们可以确保&lt;strong&gt;任何&lt;/strong&gt;实现了linf_sflight_carrier接口的类可以传输给saver方法并且被正确处理。&lt;/p&gt;
&lt;p&gt;另一个该实现的优点是可以快速简单地创建模拟对象来进行单元测试。可测试的代码即更好的代码。&lt;/p&gt;
&lt;p&gt;这就是本文的全部内容了，愿你喜欢🙂。&lt;/p&gt;
&lt;h2&gt;总结&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;接口描述了一个会被类承诺提供的功能集。这是一个公共方法集。&lt;/li&gt;
&lt;li&gt;接口中不含代码，只有公共方法和数据声明&lt;/li&gt;
&lt;li&gt;任何实现了接口的类必须实现接口的承诺。例如，为每个这些公共方法写代码。&lt;/li&gt;
&lt;li&gt;一个类也许会实现多个接口，这是ABAP中的多继承。&lt;/li&gt;
&lt;li&gt;而子类与父类间的关系是“是”的关系（例如，鸭子是鸟），接口则表达了一种“有”的关系（如“类XYZ有一个用于发送邮件的方法”）。&lt;/li&gt;
&lt;li&gt;通用的OO原则是倾向于组合（composition）而非继承（inheritance）。例如，在可能的情况下，不是使用子类而是使用实现接口的方式达到目的。&lt;/li&gt;
&lt;li&gt;一个真实世界的例子是，某个人平日里是会计，而业余时间是救火志愿者。消防队只关心他救火的能力，相应地雇主则只在意他的会计能力。&lt;/li&gt;
&lt;li&gt;在编程的世界里，类变量可以被定义为接口，&lt;span id=&quot;result_box&quot; lang=&quot;zh-CN&quot;&gt;&lt;span&gt;然后任何实现该接口的类都可以被传入&lt;/span&gt;&lt;/span&gt;（需要这个接口的位置）。&lt;span id=&quot;result_box&quot; lang=&quot;zh-CN&quot;&gt;&lt;span&gt;调用程序只能访问接口的方法，并不知道该类还有进行其它种类行为的能力。&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
<pubDate>Tue, 24 Apr 2018 12:27:00 +0000</pubDate>
<dc:creator>氢氦</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/hhelibeb/p/8919767.html</dc:identifier>
</item>
<item>
<title>VS2015搭建GoogleTest框架--配置第一个项目 - Amedeo</title>
<link>http://www.cnblogs.com/Amedeo/p/8834412.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/Amedeo/p/8834412.html</guid>
<description>&lt;h2 align=&quot;left&quot;&gt;一、googletest简介&lt;/h2&gt;
&lt;p align=&quot;left&quot;&gt;本文使用googletest进行单元测试，这里先简要介绍一下googletest。googletest(简称gtest）是一个跨平台的并且开源的(Linux、Mac OS X、Windows、Cygwin、Windows CE and Symbian)C++单元测试框架，由google公司发布。gtest是为在不同平台上为编写C++测试而生成的。它提供了丰富的断言、致命和非致命判断、参数化、“死亡测试”等。&lt;/p&gt;
&lt;h2 align=&quot;left&quot;&gt;二、相关的准备工作&lt;/h2&gt;
&lt;p align=&quot;left&quot;&gt;本文的内容基于win10+vs2015使用googletest框架进行C++单元测试，那么我们要做的第一个工作就是去下载和配置googletest，以便于我们接下来进行使用。&lt;/p&gt;
&lt;h3 align=&quot;left&quot;&gt;2.1下载源码&lt;/h3&gt;
&lt;p align=&quot;left&quot;&gt;到&lt;a href=&quot;https://github.com/google/googletest&quot;&gt;https://github.com/google/googletest&lt;/a&gt;这个地址去下载googletest的源码为我们下一步进行编译做准备。&lt;/p&gt;
&lt;h3 align=&quot;left&quot;&gt;2.2编译googletest源码生成我们需要的库文件&lt;/h3&gt;
&lt;p align=&quot;left&quot;&gt;下载完成之后我们得到的是一个zip格式的压缩文件，我们将其解压到合适的目录（以方便自己查找为原则）。这里我们需要注意两个文件夹，待会需要使用。&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1001948/201804/1001948-20180423111857654-505196603.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p align=&quot;left&quot;&gt;使用vs2015打开msvc/2010里面的gtest.sln，会提示升级VC++编译器和库，点击确定即可。&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1001948/201804/1001948-20180423111908157-1894288357.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;等待升级完成后，打开gtest项目属性对话框（可以右键单击项目名，打开属性），配置工程属性。按图中两种方式修改都是可以的（注意和后面测试项目的属性设置比较）。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1001948/201804/1001948-20180423111935784-867100014.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1001948/201804/1001948-20180423112015612-1231259851.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;Debug、Release两个模式都要编译。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;在编译时会出现“无法启动程序”字样，这是正常的，因为我们只是生成了相关的库文件，并不是可执行文件。&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1001948/201804/1001948-20180423112028466-1601438073.png&quot; alt=&quot;&quot;/&gt; &lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;编译后，在msvc/2010/gtest/下有Win32-Debug、Win32-Release两个文件夹，并且每个文件夹里面有一个gtestd.lib文件，如下图所示。&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1001948/201804/1001948-20180423112042095-1107584629.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1001948/201804/1001948-20180423112048672-366312257.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;至此，准备阶段完成。&lt;/p&gt;
&lt;h3 align=&quot;left&quot;&gt;2.3必要知识学习&lt;/h3&gt;
&lt;p align=&quot;left&quot;&gt;断言：gtest中采用了大量的宏来包装断言，这里的断言不同于C语言当中的断言（assert）。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;按照其使用方法可以分为两类：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;ASSERT系列（ASSERT_&amp;amp;系列，当检查点失败时，退出当前函数，并非推出当前案例）；&lt;/li&gt;
&lt;li&gt;EXPECT系列（EXPECT_*系列的断言，当检查点失败时，继续往下执行）。&lt;/li&gt;
&lt;/ol&gt;&lt;p align=&quot;left&quot;&gt;按照常用功能可以依次分为12类，平常主要用到的以下这几类：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;布尔值比较&lt;/li&gt;
&lt;li&gt;数值型数据比较&lt;/li&gt;
&lt;li&gt;字符串比较&lt;/li&gt;
&lt;li&gt;浮点数比较&lt;/li&gt;
&lt;li&gt;近似数比较&lt;/li&gt;
&lt;li&gt;异常检测&lt;/li&gt;
&lt;li&gt;自定义格式函数与参数检查&lt;/li&gt;
&lt;/ol&gt;&lt;div align=&quot;center&quot;&gt;
&lt;table border=&quot;1&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody readability=&quot;63&quot;&gt;&lt;tr&gt;&lt;td colspan=&quot;3&quot; valign=&quot;top&quot; width=&quot;548&quot;&gt;
&lt;p align=&quot;center&quot;&gt;&lt;strong&gt;布尔值比较&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; width=&quot;224&quot;&gt;
&lt;p align=&quot;center&quot;&gt;ASSERT_TRUE(condition)&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;201&quot;&gt;
&lt;p align=&quot;center&quot;&gt;EXPECT_TRUE(condition)&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;123&quot;&gt;
&lt;p align=&quot;center&quot;&gt;condition == true&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; width=&quot;224&quot;&gt;
&lt;p align=&quot;center&quot;&gt;ASSERT_FALSE(condition)&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;201&quot;&gt;
&lt;p align=&quot;center&quot;&gt;EXPECT_FALSE(condition)&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;123&quot;&gt;
&lt;p align=&quot;center&quot;&gt;condition == false&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td colspan=&quot;3&quot; valign=&quot;top&quot; width=&quot;548&quot;&gt;
&lt;p align=&quot;center&quot;&gt;&lt;strong&gt;数值型数据比较&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;9&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;224&quot; readability=&quot;6&quot;&gt;
&lt;p align=&quot;center&quot;&gt;ASSERT_EQ (expected, actual)&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;201&quot; readability=&quot;6&quot;&gt;
&lt;p align=&quot;center&quot;&gt;EXPECT_EQ (expected, actual)&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;123&quot;&gt;
&lt;p align=&quot;center&quot;&gt;expected == actual&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; width=&quot;224&quot;&gt;
&lt;p align=&quot;center&quot;&gt;ASSERT_NE (val1, val2)&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;201&quot;&gt;
&lt;p align=&quot;center&quot;&gt;EXPECT_NE (val1, val2)&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;123&quot;&gt;
&lt;p align=&quot;center&quot;&gt;val1 != val2&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; width=&quot;224&quot;&gt;
&lt;p align=&quot;center&quot;&gt;ASSERT_LT (val1, val2)&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;201&quot;&gt;
&lt;p align=&quot;center&quot;&gt;EXPECT_LT (val1, val2)&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;123&quot;&gt;
&lt;p align=&quot;center&quot;&gt;val1 &amp;lt; val2&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; width=&quot;224&quot;&gt;
&lt;p align=&quot;center&quot;&gt;ASSERT_LE (val1, val2)&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;201&quot;&gt;
&lt;p align=&quot;center&quot;&gt;EXPECT_LE (val1, val2)&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;123&quot;&gt;
&lt;p align=&quot;center&quot;&gt;val1 &amp;lt;= val2&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; width=&quot;224&quot;&gt;
&lt;p align=&quot;center&quot;&gt;ASSERT_GT (val1, val2)&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;201&quot;&gt;
&lt;p align=&quot;center&quot;&gt;EXPECT_GT (val1, val2)&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;123&quot;&gt;
&lt;p align=&quot;center&quot;&gt;val1 &amp;gt; val2&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; width=&quot;224&quot;&gt;
&lt;p align=&quot;center&quot;&gt;ASSERT_GE (val1, val2)&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;201&quot;&gt;
&lt;p align=&quot;center&quot;&gt;EXPECT_GE (val1, val2)&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;123&quot;&gt;
&lt;p align=&quot;center&quot;&gt;val2 &amp;gt;= val2&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td colspan=&quot;3&quot; valign=&quot;top&quot; width=&quot;548&quot;&gt;
&lt;p align=&quot;center&quot;&gt;&lt;strong&gt;字符串比较&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;12&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;224&quot; readability=&quot;6&quot;&gt;
&lt;p align=&quot;center&quot;&gt;ASSERT_STREQ (str1, str2)&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;201&quot; readability=&quot;6&quot;&gt;
&lt;p align=&quot;center&quot;&gt;EXPECT_STREQ (str1, str2)&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;123&quot; readability=&quot;5&quot;&gt;
&lt;p align=&quot;center&quot;&gt;两个C字符串内容相同（同时支持char *和wchar_t *类型）&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;12&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;224&quot; readability=&quot;6&quot;&gt;
&lt;p align=&quot;center&quot;&gt;ASSERT_STRNE (str1, str2)&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;201&quot; readability=&quot;6&quot;&gt;
&lt;p align=&quot;center&quot;&gt;EXPECT_STRNE (str1, str2)&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;123&quot; readability=&quot;5&quot;&gt;
&lt;p align=&quot;center&quot;&gt;两个C字符串内容不同（同时支持char *和wchar_t *类型）&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;12&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;224&quot; readability=&quot;6&quot;&gt;
&lt;p align=&quot;center&quot;&gt;ASSERT_STRCASEEQ (str1, str2)&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;201&quot; readability=&quot;6&quot;&gt;
&lt;p align=&quot;center&quot;&gt;EXPECT_STRCASEEQ (str1, str2)&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;123&quot; readability=&quot;5&quot;&gt;
&lt;p align=&quot;center&quot;&gt;两个C字符串内容相同，忽略大小写（只支持char *类型）&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;12&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;224&quot; readability=&quot;6&quot;&gt;
&lt;p align=&quot;center&quot;&gt;ASSERT_STRCASENE (str1, str2)&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;201&quot; readability=&quot;6&quot;&gt;
&lt;p align=&quot;center&quot;&gt;EXPECT_STRCASENE (str1, str2)&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;123&quot; readability=&quot;5&quot;&gt;
&lt;p align=&quot;center&quot;&gt;两个C字符串内容不同，忽略大小写（只支持char *类型）&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td colspan=&quot;3&quot; valign=&quot;top&quot; width=&quot;548&quot;&gt;
&lt;p align=&quot;center&quot;&gt;&lt;strong&gt;浮点数比较&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;12&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;224&quot; readability=&quot;6&quot;&gt;
&lt;p align=&quot;center&quot;&gt;ASSERT_FLOAT_EQ (val1, val2)&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;201&quot; readability=&quot;6&quot;&gt;
&lt;p align=&quot;center&quot;&gt;EXPECT_FLOAT_EQ (val1, val2)&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;123&quot; readability=&quot;5&quot;&gt;
&lt;p align=&quot;center&quot;&gt;the two float values are almost equal&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;12&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;224&quot; readability=&quot;6&quot;&gt;
&lt;p align=&quot;center&quot;&gt;ASSERT_DOUBLE_EQ (val1, val2)&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;201&quot; readability=&quot;6&quot;&gt;
&lt;p align=&quot;center&quot;&gt;EXPECT_DOUBLE_EQ (val1, val2)&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;123&quot; readability=&quot;5&quot;&gt;
&lt;p align=&quot;center&quot;&gt;the two double values are almost equal&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td colspan=&quot;3&quot; valign=&quot;top&quot; width=&quot;548&quot;&gt;
&lt;p align=&quot;center&quot;&gt;&lt;strong&gt;近似数比较&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;15&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;224&quot; readability=&quot;7&quot;&gt;
&lt;p align=&quot;center&quot;&gt;ASSERT_NEAR (val1, val2, abs_error)&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;201&quot; readability=&quot;7&quot;&gt;
&lt;p align=&quot;center&quot;&gt;EXPECT_NEAR (val1, val2, abs_error)&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;123&quot; readability=&quot;5&quot;&gt;
&lt;p align=&quot;center&quot;&gt;两个数值val1和val2的绝对值差不超过abs_error&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; width=&quot;224&quot;&gt;
&lt;p align=&quot;center&quot;&gt; &lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;201&quot;&gt;
&lt;p align=&quot;center&quot;&gt; &lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;123&quot;&gt;
&lt;p align=&quot;center&quot;&gt; &lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td colspan=&quot;3&quot; valign=&quot;top&quot; width=&quot;548&quot;&gt;
&lt;p align=&quot;center&quot;&gt; &lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td colspan=&quot;3&quot; valign=&quot;top&quot; width=&quot;548&quot;&gt;
&lt;p align=&quot;center&quot;&gt;&lt;strong&gt;异常检查&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;9&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;224&quot; readability=&quot;6&quot;&gt;
&lt;p align=&quot;center&quot;&gt;ASSERT_THROW (statement, exception_type)&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;201&quot; readability=&quot;6&quot;&gt;
&lt;p align=&quot;center&quot;&gt;EXPECT_THROW (statement, exception_type)&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;123&quot;&gt;
&lt;p align=&quot;center&quot;&gt;抛出指定类型异常&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; width=&quot;224&quot;&gt;
&lt;p align=&quot;center&quot;&gt;ASSERT_THROW(statement)&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;201&quot;&gt;
&lt;p align=&quot;center&quot;&gt;EXPECT_THROW(statement)&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;123&quot;&gt;
&lt;p align=&quot;center&quot;&gt;抛出任意类型异常&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;6&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;224&quot; readability=&quot;5&quot;&gt;
&lt;p align=&quot;center&quot;&gt;ASSERT_NO_THROW(statement)&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;201&quot; readability=&quot;5&quot;&gt;
&lt;p align=&quot;center&quot;&gt;EXPECT_NO_THROW(statement)&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;123&quot;&gt;
&lt;p align=&quot;center&quot;&gt;不抛异常&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td colspan=&quot;3&quot; valign=&quot;top&quot; width=&quot;548&quot;&gt;
&lt;p align=&quot;center&quot;&gt; &lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td colspan=&quot;3&quot; valign=&quot;top&quot; width=&quot;548&quot; readability=&quot;5&quot;&gt;
&lt;p align=&quot;center&quot;&gt;&lt;strong&gt;函数值与参数检查（目前最多只支持5&lt;/strong&gt;&lt;strong&gt;个参数）&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;9&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;224&quot; readability=&quot;6&quot;&gt;
&lt;p align=&quot;center&quot;&gt;ASSERT_PRED1(pred1, val1)&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;201&quot; readability=&quot;6&quot;&gt;
&lt;p align=&quot;center&quot;&gt;EXPECT_PRED1(pred1, val1)&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;123&quot;&gt;
&lt;p align=&quot;center&quot;&gt;pred1(val1) returns true&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;16.5&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;224&quot; readability=&quot;7&quot;&gt;
&lt;p align=&quot;center&quot;&gt;ASSERT_PRED2(pred2, val1, val2)&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;201&quot; readability=&quot;7&quot;&gt;
&lt;p align=&quot;center&quot;&gt;EXPECT_PRED2(pred2, val1, val2)&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;123&quot; readability=&quot;6&quot;&gt;
&lt;p align=&quot;center&quot;&gt;pred2(val1, val2) returns true&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td colspan=&quot;3&quot; valign=&quot;top&quot; width=&quot;548&quot;&gt;
&lt;p align=&quot;center&quot;&gt; &lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td colspan=&quot;3&quot; valign=&quot;top&quot; width=&quot;548&quot;&gt;
&lt;p align=&quot;center&quot;&gt;&lt;strong&gt;Windows HRESULT&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;9&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;224&quot; readability=&quot;5&quot;&gt;
&lt;p align=&quot;center&quot;&gt;ASSERT_HRESULT_SUCCEEDED(expression)&lt;/p&gt;
&lt;/td&gt;
&lt;td align=&quot;center&quot; valign=&quot;middle&quot; readability=&quot;5&quot;&gt;
&lt;p align=&quot;center&quot;&gt;EXPECT_HRESULT_SUCCEEDED(expression)&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;123&quot; readability=&quot;5&quot;&gt;
&lt;p align=&quot;center&quot;&gt;expression is a success HRESULT&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;9&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;224&quot; readability=&quot;5&quot;&gt;
&lt;p align=&quot;center&quot;&gt;ASSERT_HRESULT_FAILED(expression)&lt;/p&gt;
&lt;/td&gt;
&lt;td align=&quot;center&quot; valign=&quot;middle&quot; readability=&quot;5&quot;&gt;
&lt;p align=&quot;center&quot;&gt;EXPECT_HRESULT_FAILED(expression)&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;123&quot; readability=&quot;5&quot;&gt;
&lt;p align=&quot;center&quot;&gt;expression is a failure HRESULT&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td colspan=&quot;3&quot; valign=&quot;top&quot; width=&quot;548&quot;&gt;
&lt;p align=&quot;center&quot;&gt; &lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td colspan=&quot;3&quot; valign=&quot;top&quot; width=&quot;548&quot; readability=&quot;5&quot;&gt;
&lt;p align=&quot;center&quot;&gt;&lt;strong&gt;自定义格式函数与参数检查（目前最多支持5&lt;/strong&gt;&lt;strong&gt;个参数）&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;12&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;224&quot; readability=&quot;6&quot;&gt;
&lt;p align=&quot;center&quot;&gt;ASSERT_PRED_FORMAT1(pred1, val1)&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;201&quot; readability=&quot;6&quot;&gt;
&lt;p align=&quot;center&quot;&gt;EXPECT_PRED_FORMAT1(pred1, val1)&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;123&quot; readability=&quot;5&quot;&gt;
&lt;p align=&quot;center&quot;&gt;pred1(val1) is successful&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;16.5&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;224&quot; readability=&quot;7&quot;&gt;
&lt;p align=&quot;center&quot;&gt;ASSERT_PRED_FORMAT1(pred1, val1, val2)&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;201&quot; readability=&quot;7&quot;&gt;
&lt;p align=&quot;center&quot;&gt;EXPECT_PRED_FORMAT1(pred1, val1, val2)&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;123&quot; readability=&quot;6&quot;&gt;
&lt;p align=&quot;center&quot;&gt;pred2(val1, val2) is successful&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;
&lt;p align=&quot;left&quot;&gt; &lt;/p&gt;
&lt;h3 align=&quot;left&quot;&gt;2.4创建测试项目并配置属性&lt;/h3&gt;
&lt;p align=&quot;left&quot;&gt;在vs2015中，创建Win32控制台应用程序MyTest。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;打开项目属性对话框，配置工程属性。展开“配置属性 -&amp;gt; C/C++ -&amp;gt; 常规”，在【附加包含目录】中添加“.\include”（这里省略了include的相关母目录，在之前有过关于include的说明，如果忘记在哪找，可以在前边的内容中复习一下）；展开“C/C++ -&amp;gt; 代码生成”，在【运行库】中修改为多线程调试DLL(/MDd)，如下图所示。&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1001948/201804/1001948-20180423112220852-1904914994.png&quot; alt=&quot;&quot;/&gt; &lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;展开“链接器 -&amp;gt; 输入”，在【附加依赖项】添加刚刚生成的lib文件路径，注意这里是配置Debug，要输入Win32-Debug里面的gtestd.lib文件路径（这里需要注意文件名后面有个d）。&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1001948/201804/1001948-20180423112235764-1891971992.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;以上就是配置Debug的方式，配置Release只需要把前边相对应的位置改为Release的相关内容即可。&lt;/p&gt;
&lt;h3 align=&quot;left&quot;&gt;2.5编写测试代码&lt;/h3&gt;
&lt;p align=&quot;left&quot;&gt;这里测试代码主要分为3个文件，主文件FirstGtest.cpp，以及Box类的两个相关文件CBox.h和CBox.cpp&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; CBox.h&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;#pragma&lt;/span&gt; once
&lt;span&gt; 3&lt;/span&gt; #include &amp;lt;&lt;span&gt;string&lt;/span&gt;.h&amp;gt;
&lt;span&gt; 4&lt;/span&gt; 
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;Box类的定义&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; CBox
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;public&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;构造函数&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt;     CBox(&lt;span&gt;double&lt;/span&gt; length_value, &lt;span&gt;double&lt;/span&gt; width_value, &lt;span&gt;double&lt;/span&gt;&lt;span&gt; height_value);
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;默认构造函数&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt; &lt;span&gt;    CBox();
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;volume函数用于计算Box的体积&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt;     &lt;span&gt;double&lt;/span&gt;&lt;span&gt; volume();
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; 
&lt;span&gt;16&lt;/span&gt; &lt;span&gt;private&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;Box的3个特性：长、宽、高&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt;     &lt;span&gt;double&lt;/span&gt;&lt;span&gt; Length_of_box;
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;     &lt;span&gt;double&lt;/span&gt;&lt;span&gt; Width_of_box;
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;     &lt;span&gt;double&lt;/span&gt;&lt;span&gt; Height_of_box;
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; };
&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;45&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;FirstGtest.cpp&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; #include&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;stdafx.h&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt; #include&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;gtest\gtest.h&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt; #include&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;CBox.h&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt; 
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;CBox测试类，继承Test对Box进行测试使用&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; CBox_test : &lt;span&gt;public&lt;/span&gt;&lt;span&gt; testing::Test 
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;protected&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;     CBox*&lt;span&gt; c;
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;     &lt;span&gt;virtual&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; SetUp()
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;         c = &lt;span&gt;new&lt;/span&gt; CBox(&lt;span&gt;2&lt;/span&gt;, &lt;span&gt;3&lt;/span&gt;, &lt;span&gt;4&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; 
&lt;span&gt;16&lt;/span&gt;     &lt;span&gt;virtual&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; TearDown()
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;         &lt;span&gt;delete&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;-&amp;gt;&lt;span&gt;c;
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;};
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; 
&lt;span&gt;22&lt;/span&gt; &lt;span&gt;TEST(CBox, case1)
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;     CBox  box1{ &lt;span&gt;78.0&lt;/span&gt;, &lt;span&gt;24.0&lt;/span&gt;, &lt;span&gt;18.0&lt;/span&gt;&lt;span&gt; };
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; &lt;span&gt;    CBox box2;
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;     EXPECT_LT(&lt;span&gt;23.0&lt;/span&gt;&lt;span&gt;, box1.volume());
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; 
&lt;span&gt;29&lt;/span&gt; &lt;span&gt;TEST_F(CBox_test, case2)
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;     EXPECT_EQ(&lt;span&gt;4&lt;/span&gt;, c-&amp;gt;&lt;span&gt;volume());
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; 
&lt;span&gt;34&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; main(&lt;span&gt;int&lt;/span&gt; argc, &lt;span&gt;char&lt;/span&gt;*&lt;span&gt; argv[])
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt;     testing::InitGoogleTest(&amp;amp;&lt;span&gt;argc, argv);
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; RUN_ALL_TESTS();
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;CBox.cpp&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; #include &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;stdafx.h&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt; #include&amp;lt;iostream&amp;gt; 
&lt;span&gt; 4&lt;/span&gt; #include&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;CBox.h&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt; 
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;using&lt;/span&gt; &lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; std;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; 
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;构造函数定义，包含3个参数：&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt; CBox::CBox(&lt;span&gt;double&lt;/span&gt; length_value, &lt;span&gt;double&lt;/span&gt; width_value, &lt;span&gt;double&lt;/span&gt;&lt;span&gt; height_value)
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;     cout &amp;lt;&amp;lt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Constructor called.&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &amp;lt;&amp;lt;&lt;span&gt; endl;
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;     Length_of_box =&lt;span&gt; length_value;
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;     Width_of_box =&lt;span&gt; width_value;
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;     Height_of_box =&lt;span&gt; height_value;
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; 
&lt;span&gt;17&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;默认构造函数&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt; &lt;span&gt;CBox::CBox()
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;     cout &amp;lt;&amp;lt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Default constructor is called.&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &amp;lt;&amp;lt;&lt;span&gt; endl;
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; 
&lt;span&gt;23&lt;/span&gt; 
&lt;span&gt;24&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 计算Box体积函数&lt;/span&gt;
&lt;span&gt;25&lt;/span&gt; &lt;span&gt;double&lt;/span&gt;&lt;span&gt; CBox::volume()
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; Length_of_box * Width_of_box *&lt;span&gt; Height_of_box;
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;

&lt;h2 align=&quot;left&quot;&gt;三、遇到的问题及解决办法&lt;/h2&gt;
&lt;ol&gt;&lt;li&gt;在生成两个gtestd.lib文件时，编译器报“不是有效的Win32应用程序”，因为之前写的程序都是生成可执行程序，而没有做过只生成库文件的程序，本能地以为程序出错了，之后经过查阅资料和以及进一步地深入研究，发现这里只是生成了依赖库文件（我们也只需要这个库），并没有生成可执行文件，所以那是正常的。&lt;/li&gt;
&lt;li&gt;配置googletest依赖库时，“配置属性 -&amp;gt; C/C++ -&amp;gt; 代码生成”中的【运行库】，前后没有设置相同的模式，从而导致找不到对应的库的情况。&lt;/li&gt;
&lt;li&gt;在配置googletest时，修改“配置属性 -&amp;gt; 链接器 -&amp;gt; 输入”中的【附加依赖项】时，只填到了我们所生成的库文件的目录，但是没有添加文件名，报找不到*.obj文件的错误，只需要把路径填写到库文件就可以解决这个问题。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;作者：耑新新，发布于  &lt;a title=&quot;博客园&quot; href=&quot;https://home.cnblogs.com/u/Amedeo/&quot; target=&quot;_blank&quot;&gt;博客园&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;转载请注明出处，欢迎邮件交流：&lt;a title=&quot;给我写信&quot; href=&quot;http://mail.qq.com/cgi-bin/qm_share?t=qm_mailme&amp;amp;email=VC48ITU6LD06LD06FDI7LDk1PTh6Nzs5&quot; target=&quot;_blank&quot;&gt;zhuanxinxin@foxmail.com&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Tue, 24 Apr 2018 12:10:00 +0000</pubDate>
<dc:creator>Amedeo</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/Amedeo/p/8834412.html</dc:identifier>
</item>
</channel>
</rss>