<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>Vue精简版风格指南 - 小火柴的蓝色理想</title>
<link>http://www.cnblogs.com/xiaohuochai/p/8383407.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/xiaohuochai/p/8383407.html</guid>
<description>&lt;h2&gt;前面的话&lt;/h2&gt;
&lt;p&gt;　　Vue官网的风格指南按照优先级（依次为必要、强烈推荐、推荐、谨慎使用）分类，且代码间隔较大，不易查询。本文按照类型分类，并对部分示例或解释进行缩减，是Vue风格指南的精简版&lt;/p&gt;

&lt;h3&gt;组件名称&lt;/h3&gt;
&lt;p&gt;【组件名为多个单词】（必要）&lt;/p&gt;
&lt;p&gt;　　组件名应该始终是多个单词的，根组件 App 除外。 这样做可以避免跟现有的以及未来的 HTML 元素相冲突，因为所有的 HTML 元素名称都是单个单词的&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;bad&lt;/span&gt;
Vue.component(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;todo&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, {&lt;/span&gt;&lt;span&gt;})&lt;br/&gt;&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;good&lt;/span&gt;
Vue.component(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;todo-item&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, {&lt;/span&gt;&lt;span&gt;})&lt;br/&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;【单文件组件文件名应该要么始终是单词大写开头 (PascalCase)，要么始终横线连接 (kebab-case)】（强烈推荐）&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
//bad
&lt;span&gt;mycomponent.vue
//good
&lt;span&gt;MyComponent.vue
//good
my-component.vue&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;【基础组件名要有一个特定前缀开头】（强烈推荐）&lt;/p&gt;
&lt;p&gt;　　应用特定样式和约定的基础组件 (也就是展示类的、无逻辑的或无状态的组件) 应该全部以一个特定的前缀开头，比如 Base、App 或 V&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
//bad
components/
|-&lt;span&gt; MyButton.vue
|-&lt;span&gt; VueTable.vue
|-&lt;span&gt; Icon.vue
//good
components/
|-&lt;span&gt; BaseButton.vue
|-&lt;span&gt; BaseTable.vue
|- BaseIcon.vue&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;【只应该拥有单个活跃实例的组件应该以 &lt;code&gt;The&lt;/code&gt; 前缀命名，以示其唯一性】（强烈推荐）&lt;/p&gt;
&lt;p&gt;　　这不意味着组件只可用于一个单页面，而是&lt;em&gt;每个页面&lt;/em&gt;只使用一次，这些组件永远不接受任何 prop&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
//bad
components/
|-&lt;span&gt; Heading.vue
|-&lt;span&gt; MySidebar.vue
//good
components/
|-&lt;span&gt; TheHeading.vue
|- TheSidebar.vue&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;【和父组件紧密耦合的子组件应该以父组件名作为前缀命名】（强烈推荐）&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
//bad
components/
|-&lt;span&gt; TodoList.vue
|-&lt;span&gt; TodoItem.vue
|-&lt;span&gt; TodoButton.vue
//good
components/
|-&lt;span&gt; SearchSidebar.vue
|- SearchSidebarNavigation.vue&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;【组件名应该以高级别的 (通常是一般化描述的) 单词开头，以描述性的修饰词结尾】（强烈推荐）&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
//bad
components/
|-&lt;span&gt; ClearSearchButton.vue
|-&lt;span&gt; ExcludeFromSearchInput.vue
|-&lt;span&gt; LaunchOnStartupCheckbox.vue
|-&lt;span&gt; RunSearchButton.vue
|-&lt;span&gt; SearchInput.vue
|-&lt;span&gt; TermsCheckbox.vue
//good
components/
|-&lt;span&gt; SearchButtonClear.vue
|-&lt;span&gt; SearchButtonRun.vue
|-&lt;span&gt; SearchInputQuery.vue
|-&lt;span&gt; SearchInputExcludeGlob.vue
|-&lt;span&gt; SettingsCheckboxTerms.vue
|- SettingsCheckboxLaunchOnStartup.vue&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;【单文件组件和字符串模板中组件名应总是PascalCase——但在DOM模板中总是kebab-case】（强烈推荐）&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
//bad
&amp;lt;!-- 在单文件组件和字符串模板中 --&amp;gt;
&amp;lt;mycomponent/&amp;gt;
&amp;lt;myComponent/&amp;gt;
&amp;lt;!-- 在 DOM 模板中 --&amp;gt;
&amp;lt;MyComponent&amp;gt;&amp;lt;/MyComponent&amp;gt;
//good
&amp;lt;!-- 在单文件组件和字符串模板中 --&amp;gt;
&amp;lt;MyComponent/&amp;gt;
&amp;lt;!-- 在 DOM 模板中 --&amp;gt;
&amp;lt;my-component&amp;gt;&amp;lt;/my-component&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;【组件名应该倾向于完整单词而不是缩写】（强烈推荐）&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
//bad
components/
|- SdSettings.vue
|- UProfOpts.vue
//good
components/
|- StudentDashboardSettings.vue
|- UserProfileOptions.vue
&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;组件相关&lt;/h3&gt;
&lt;p&gt;【单文件组件、字符串模板和JSX中没有内容的组件应该自闭合——但在DOM模板里不要这样做】（强烈推荐）&lt;/p&gt;
&lt;p&gt;　　自闭合组件表示它们不仅没有内容，而且刻意没有内容&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
//bad
&amp;lt;!-- 在单文件组件、字符串模板和 JSX 中 --&amp;gt;
&amp;lt;MyComponent&amp;gt;&amp;lt;/MyComponent&amp;gt;
&amp;lt;!-- 在 DOM 模板中 --&amp;gt;
&amp;lt;my-component/&amp;gt;
//good
&amp;lt;!-- 在单文件组件、字符串模板和 JSX 中 --&amp;gt;
&amp;lt;MyComponent/&amp;gt;
&amp;lt;!-- 在 DOM 模板中 --&amp;gt;
&amp;lt;my-component&amp;gt;&amp;lt;/my-component&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;【为组件样式设置作用域】（必要）&lt;/p&gt;
&lt;p&gt;　　这条规则只和单文件组件有关。&lt;em&gt;不一定&lt;/em&gt;要使用 &lt;code&gt;scoped&lt;/code&gt; 特性。设置作用域也可以通过 CSS Modules，或者使用其它的库或约定&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
//bad
&amp;lt;template&amp;gt;&amp;lt;button class=&quot;btn btn-close&quot;&amp;gt;X&amp;lt;/button&amp;gt;&amp;lt;/template&amp;gt;
&amp;lt;style&amp;gt;&lt;span&gt;
.btn-close {background-&lt;span&gt;color: red;}
&amp;lt;/style&amp;gt;
//good
&amp;lt;template&amp;gt;&amp;lt;button class=&quot;btn btn-close&quot;&amp;gt;X&amp;lt;/button&amp;gt;&amp;lt;/template&amp;gt;
&amp;lt;style scoped&amp;gt;&lt;span&gt;
.btn-close {background-&lt;span&gt;color: red;}
&amp;lt;/style&amp;gt;
//good
&amp;lt;template&amp;gt;&amp;lt;button :class=&quot;[$style.button, $style.buttonClose]&quot;&amp;gt;X&amp;lt;/button&amp;gt;&amp;lt;/template&amp;gt;
&amp;lt;style module&amp;gt;&lt;span&gt;
.btn-close {background-&lt;span&gt;color: red;}
&amp;lt;/style&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;【单文件组件应该总是让 &amp;lt;script&amp;gt;、&amp;lt;template&amp;gt; 和 &amp;lt;style&amp;gt; 标签的顺序保持一致】（推荐）&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
//good
&amp;lt;!-- ComponentA.vue --&amp;gt;
&amp;lt;script&amp;gt;/* ... */&amp;lt;/script&amp;gt;
&amp;lt;template&amp;gt;...&amp;lt;/template&amp;gt;
&amp;lt;style&amp;gt;/* ... */&amp;lt;/style&amp;gt;

&amp;lt;!-- ComponentB.vue --&amp;gt;
&amp;lt;script&amp;gt;/* ... */&amp;lt;/script&amp;gt;
&amp;lt;template&amp;gt;...&amp;lt;/template&amp;gt;
&amp;lt;style&amp;gt;/* ... */&amp;lt;/style&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;【一个文件中只有一个组件】（强烈推荐）&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
//bad
Vue.component('TodoList'&lt;span&gt;, {})
Vue.component('TodoItem'&lt;span&gt;, {})
//good
components/
|-&lt;span&gt; TodoList.vue
|- TodoItem.vue&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;【组件选项默认顺序】（推荐）&lt;/p&gt;
&lt;p&gt;　　1、副作用 (触发组件外的影响)&lt;/p&gt;

&lt;p&gt;　　2、全局感知 (要求组件以外的知识)&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
&lt;span&gt;name
parent&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　3、组件类型 (更改组件的类型)&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
functional
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　4、模板修改器 (改变模板的编译方式)&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
&lt;span&gt;delimiters
comments&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　5、模板依赖 (模板内使用的资源)&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;components
directives
filters&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　6、组合 (向选项里合并属性)&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
&lt;span&gt;extends
mixins&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　7、接口 (组件的接口)&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;inheritAttrs
model
props/propsData&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　8、本地状态 (本地的响应式属性)&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
&lt;span&gt;data
computed&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　9、事件 (通过响应式事件触发的回调)&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
watch&lt;br/&gt;生命周期钩子 (按照它们被调用的顺序)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　10、非响应式的属性 (不依赖响应系统的实例属性)&lt;/p&gt;

&lt;p&gt;　　11、渲染 (组件输出的声明式描述)&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
template/&lt;span&gt;render
renderError&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;prop&lt;/h3&gt;
&lt;p&gt;【Prop 定义应该尽量详细】（必要）&lt;/p&gt;
&lt;p&gt;　　细致的 prop 定义有两个好处： 1、它们写明了组件的 API，所以很容易看懂组件的用法； 2、在开发环境下，如果向一个组件提供格式不正确的 prop，Vue 将会告警，以帮助你捕获潜在的错误来源&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;bad&lt;/span&gt;
props: [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;status&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;good&lt;/span&gt;
&lt;span&gt;props: {
  status: String
}
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;better&lt;/span&gt;
&lt;span&gt;props: {
  status: {
    type: String,
    required: &lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;
  }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;【声明prop时，其命名应始终使用camelCase，而在模板和JSX中应始终使用kebab-case】（强烈推荐）&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
//bad
props: {'greeting-text'&lt;span&gt;: String}
&amp;lt;WelcomeMessage greetingText=&quot;hi&quot;/&amp;gt;
//good
&lt;span&gt;props: {greetingText: String}
&amp;lt;WelcomeMessage greeting-text=&quot;hi&quot;/&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;指令及特性&lt;/h3&gt;
&lt;p&gt;【总是用 key 配合 v-for】（必要）&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;bad&lt;/span&gt;
  &amp;lt;li v-&lt;span&gt;for&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;todo in todos&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;good&lt;/span&gt;
  &amp;lt;&lt;span&gt;li v&lt;/span&gt;-&lt;span&gt;for&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;todo in todos&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;:key&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;todo.id&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;【不要把 v-if 和 v-for 同时用在同一个元素上】（必要）&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;bad&lt;/span&gt;
&amp;lt;li v-&lt;span&gt;for&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;user in users&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; v-&lt;span&gt;if&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;user.isActive&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; :key=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;user.id&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &amp;gt; {{ user.name }} &amp;lt;li&amp;gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;good&lt;/span&gt;
&amp;lt;li v-&lt;span&gt;for&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;user in users&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; v-&lt;span&gt;if&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;shouldShowUsers&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; :key=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;user.id&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &amp;gt; {{ user.name }} &amp;lt;li&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;【多个特性的元素应该分多行撰写，每个特性一行】（强烈推荐）&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
//bad
&amp;lt;img src=&quot;https://vuejs.org/images/logo.png&quot; alt=&quot;Vue Logo&quot;&amp;gt;
//good
&amp;lt;&lt;span&gt;img
  src=&quot;https://vuejs.org/images/logo.png&quot;&lt;span&gt;
  alt=&quot;Vue Logo&quot;
&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;【元素特性默认顺序】（推荐）&lt;/p&gt;
&lt;p&gt;　　1、定义 (提供组件的选项)&lt;/p&gt;

&lt;p&gt;　　2、列表渲染 (创建多个变化的相同元素)&lt;/p&gt;

&lt;p&gt;　　3、条件渲染 (元素是否渲染/显示)&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
v-if&lt;span&gt;
v-else-if&lt;span&gt;
v-else&lt;span&gt;
v-&lt;span&gt;show
v-cloak&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　4、渲染方式 (改变元素的渲染方式)&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
v-&lt;span&gt;pre
v-once&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　5、全局感知 (需要超越组件的知识)&lt;/p&gt;

&lt;p&gt;　　6、唯一的特性 (需要唯一值的特性)&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
ref&lt;span&gt;
key
slot&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　7、双向绑定 (把绑定和事件结合起来)&lt;/p&gt;

&lt;p&gt;　　8、其它特性 (所有普通的绑定或未绑定的特性)&lt;/p&gt;
&lt;p&gt;　　9、事件 (组件事件监听器)&lt;/p&gt;

&lt;p&gt;　　10、内容 (复写元素的内容)&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
v-&lt;span&gt;html
v-text&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;属性&lt;/h3&gt;
&lt;p&gt;【私有属性名】（必要）&lt;/p&gt;
&lt;p&gt;　　在插件、混入等扩展中始终为自定义的私有属性使用 &lt;span&gt;$_&lt;/span&gt; 前缀，并附带一个命名空间以回避和其它作者的冲突 (比如 &lt;span&gt;$_yourPluginName_&lt;/span&gt;)&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;bad&lt;/span&gt;
&lt;span&gt;  methods: {update: function () { }}
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;bad&lt;/span&gt;
&lt;span&gt;  methods: {_update: function () { } }
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;bad&lt;/span&gt;
&lt;span&gt;  methods: {$update: function () { }}
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;bad&lt;/span&gt;
&lt;span&gt;  methods: {$_update: function () { }}
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;good&lt;/span&gt;
&lt;span&gt;  methods: { $_myGreatMixin_update: function () { }}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;【组件的data必须是一个函数】（必要）&lt;/p&gt;
&lt;p&gt;　　当在组件中使用 data 属性的时候 (除了 new Vue 外的任何地方)，它的值必须是返回一个对象的函数&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
//bad
Vue.component('some-comp'&lt;span&gt;, {
  data: {
    foo: 'bar'&lt;span&gt;
  }
})
//good
Vue.component('some-comp'&lt;span&gt;, {
  data: function () {
    return&lt;span&gt; {
      foo: 'bar'&lt;span&gt;
    }
  }
})&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;【组件模板应该只包含简单的表达式，复杂的表达式则应该重构为计算属性或方法】（强烈推荐）&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;bad&lt;/span&gt;
&lt;span&gt;{{
  fullName.split(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;).map(function (word) {
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; word[&lt;span&gt;0&lt;/span&gt;].toUpperCase() + word.slice(&lt;span&gt;1&lt;/span&gt;&lt;span&gt;)
  }).join(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
}}
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;good&lt;/span&gt;
&lt;span&gt;computed: {
  normalizedFullName: function () {
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;.fullName.split(&lt;span&gt;'&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;).map(function (word) {
      &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; word[&lt;span&gt;0&lt;/span&gt;].toUpperCase() + word.slice(&lt;span&gt;1&lt;/span&gt;&lt;span&gt;)
    }).join(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
  }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;【应该把复杂计算属性分割为尽可能多的更简单的属性】（强烈推荐）&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;bad&lt;/span&gt;
&lt;span&gt;computed: {
  price: function () {
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; basePrice = &lt;span&gt;this&lt;/span&gt;.manufactureCost / (&lt;span&gt;1&lt;/span&gt; - &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.profitMargin)
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; (
      basePrice &lt;/span&gt;-&lt;span&gt;
      basePrice &lt;/span&gt;* (&lt;span&gt;this&lt;/span&gt;.discountPercent || &lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
    )
  }
}
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;good&lt;/span&gt;
&lt;span&gt;computed: {
  basePrice: function () {
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;.manufactureCost / (&lt;span&gt;1&lt;/span&gt; - &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.profitMargin)
  },
  discount: function () {
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;.basePrice * (&lt;span&gt;this&lt;/span&gt;.discountPercent || &lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
  },
  finalPrice: function () {
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;.basePrice - &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.discount
  }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;【当组件开始觉得密集或难以阅读时，在多个属性之间添加空行可以让其变得容易】（推荐）&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
//good
props: {
  value: {
    type: String,
    required: true
  },

  focused: {
    type: Boolean,
    default: false
  }
}
&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;谨慎使用&lt;/h3&gt;
&lt;p&gt;　　1、元素选择器应该避免在 scoped 中出现&lt;/p&gt;
&lt;p&gt;　　在 &lt;code&gt;scoped&lt;/code&gt; 样式中，类选择器比元素选择器更好，因为大量使用元素选择器是很慢的&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;bad&lt;/span&gt;
&amp;lt;style scoped&amp;gt;&lt;span&gt;
button {
  background&lt;/span&gt;-&lt;span&gt;color: red;
}
&lt;/span&gt;&amp;lt;/style&amp;gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;good&lt;/span&gt;
&amp;lt;style scoped&amp;gt;&lt;span&gt;
.btn&lt;/span&gt;-&lt;span&gt;close {
  background&lt;/span&gt;-&lt;span&gt;color: red;
}
&lt;/span&gt;&amp;lt;/style&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　2、应该优先通过 prop 和事件进行父子组件之间的通信，而不是 &lt;code&gt;this.$parent&lt;/code&gt; 或改变 prop&lt;/p&gt;
&lt;p&gt;　　3、应该优先通过 &lt;a href=&quot;https://github.com/vuejs/vuex&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;Vuex&lt;/a&gt; 管理全局状态，而不是通过 &lt;code&gt;this.$root&lt;/code&gt; 或一个全局事件总线&lt;/p&gt;
&lt;p&gt;　　4、如果一组 &lt;code&gt;v-if&lt;/code&gt; + &lt;code&gt;v-else&lt;/code&gt; 的元素类型相同，最好使用 &lt;code&gt;key&lt;/code&gt; (比如两个 &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; 元素)&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;bad&lt;/span&gt;
&amp;lt;div v-&lt;span&gt;if&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;error&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&lt;span&gt;
  错误：{{ error }}
&lt;/span&gt;&amp;lt;/div&amp;gt;
&amp;lt;div v-&lt;span&gt;else&lt;/span&gt;&amp;gt;&lt;span&gt;
  {{ results }}
&lt;/span&gt;&amp;lt;/div&amp;gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;good&lt;/span&gt;
&amp;lt;&lt;span&gt;div
  v&lt;/span&gt;-&lt;span&gt;if&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;error&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
  key&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;search-status&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&amp;gt;&lt;span&gt;
  错误：{{ error }}
&lt;/span&gt;&amp;lt;/div&amp;gt;
&amp;lt;&lt;span&gt;div 
  v&lt;/span&gt;-&lt;span&gt;else&lt;/span&gt;&lt;span&gt; 
  key&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;search-results&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&amp;gt;&lt;span&gt;
  {{ results }}
&lt;/span&gt;&amp;lt;/div&amp;gt;
&lt;/pre&gt;&lt;/div&gt;

</description>
<pubDate>Tue, 30 Jan 2018 00:00:00 +0000</pubDate>
<dc:creator>小火柴的蓝色理想</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/xiaohuochai/p/8383407.html</dc:identifier>
</item>
<item>
<title>二叉搜索树的平衡--AVL树和树的旋转（图解） - IDreamo</title>
<link>http://www.cnblogs.com/idreamo/p/8308336.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/idreamo/p/8308336.html</guid>
<description>&lt;p&gt;&lt;strong&gt;二叉搜索树只有保持平衡时其查找效率才会高。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;要保持二叉搜索树的平衡不是一件易事。不过还是有一些非常经典的办法可以做到，其中最好的方法就是&lt;strong&gt;将二叉搜索树实现为AVL树&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;AVL树得名于它的发明者 G.M. Adelson-Velsky 和 E.M. Landis，他们在 1962 年的论文 &quot;An algorithm for the organization of information&quot; 中发表了它。AVL树是一种特殊类型的二叉树，它的每个结点都保存一份额外的信息：&lt;strong&gt;结点的平衡因子&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;结点的平衡因子 = 左子树的高度 - 右子树的高度&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;插入和删除操作都会导致AVL树的自我调整（自我平衡），使得所有结点的平衡因子保持为+1、-1或0。&lt;/p&gt;
&lt;p&gt;当子树的根结点的平衡因子为+1时，它是&lt;strong&gt;左倾斜&lt;/strong&gt;的（left-heavy)。&lt;/p&gt;
&lt;p&gt;当子树的根结点的平衡因子为 -1时，它是&lt;strong&gt;右倾斜&lt;/strong&gt;的(right-heavy)。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;一颗子树的根结点的平衡因子就代表该子树的平衡性&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;保持所有子树几乎都处于平衡状态，AVL树在总体上就能够基本保持平衡&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2017.cnblogs.com/blog/1281268/201801/1281268-20180118084939334-1522993062.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;AVL树的基本查找、插入结点的操作和二叉树的操作一样。但是，当向AVL树中插入一个结点后，还有一些额外的工作要做。首先，必须计算因插入操作对平衡因子带来的改变。其次，如果任何平衡因子变成了+/-2，就必须从这个结点开始往下重新平衡这颗树，这个&lt;strong&gt;重新平衡的过程就称为旋转&lt;/strong&gt;。&lt;/p&gt;
&lt;h3&gt;AVL树的旋转&lt;/h3&gt;
&lt;p&gt;旋转操作用来重新平衡树的某个部分。通过重新安排结点 ，&lt;strong&gt;使结点之间的关系始终保持左子结点小于父结点，父结点小于右子结点&lt;/strong&gt;。使得该树仍然是一颗二叉搜索树。&lt;strong&gt;旋转过后，旋转子树中的所有结点的平衡因子都为+1、-1或0&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;AVL树的旋转类型有4种， 分别是LL(left-left)旋转、LR(left-right)旋转、RR(right-right)旋转和RL(right-left)旋转。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;为方便理解在何时执行哪一种旋转，&lt;span&gt;&lt;strong&gt;设x代表刚插入AVL树中的结点，设A为离x最近且平衡因子更改为2的绝对值的祖先&lt;/strong&gt;&lt;/span&gt;。可以归纳为下面4种处理情况：&lt;/p&gt;
&lt;h4&gt;LL旋转&lt;/h4&gt;
&lt;p&gt;如下图所示，&lt;strong&gt;当x位于A的左子树的左子树上时，执行LL旋转&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;设left为A的左子树&lt;/strong&gt;，要执行LL旋转，&lt;strong&gt;将A的左指针指向left的右子结点，left的右指针指向A，将原来指向A的指针指向left&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;旋转过后，&lt;strong&gt;将A和left的平衡因子都改为0&lt;/strong&gt;。所有其他结点的平衡因子没有发生变化。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1281268/201801/1281268-20180119074857396-1391797908.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3&gt; LR旋转&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;当x位于A的左子树的右子树上时，执行LR旋转。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;设left是A的左子结点，并设A的子孙结点grandchild为left的右子结点。&lt;/p&gt;
&lt;p&gt;要执行LR旋转，&lt;strong&gt;将left的右子结点指向grandchild的左子结点&lt;/strong&gt;，&lt;strong&gt;grandchild的左子结点指向left&lt;/strong&gt;，&lt;strong&gt;A的左子结点指向grandchild的右子结点&lt;/strong&gt;，&lt;strong&gt;再将grandchild的右子结点指向A&lt;/strong&gt;，&lt;strong&gt;最后将原来指向A的指针指向grandchild&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;执行LR旋转之后，&lt;strong&gt;调整结点的平衡因子取决于旋转前grandchild结点的原平衡因子值&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;如果grandchild结点的原始平衡因子为+1，就将A的平衡因子设为-1，将left的平衡因子设为0。&lt;/p&gt;
&lt;p&gt;如果grandchild结点的原始平衡因子为0，就将A和left的平衡因子都设置为0。&lt;/p&gt;
&lt;p&gt;如果grandchild结点的原始平衡因子为-1，就将A的平衡因子设置为0，将left的平衡因子设置为+1。&lt;/p&gt;
&lt;p&gt;在所有的情况下，grandchild的新平衡因子都是0。所有其他结点的平衡因子都没有改变。&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2017.cnblogs.com/blog/1281268/201801/1281268-20180123063313662-696038993.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;RR旋转&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;当x位于A的左子树的右子树上时，执行RR旋转。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;RR旋转与LL旋转是对称的关系。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;设A的右子结点为Right。要执行RR旋转，将A的右指针指向right的左子结点，right的左指针指向A，原来指向A的指针修改为指向right&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;完成旋转以后，将A和left的平衡因子都修改为0&lt;/strong&gt;。所有其他结点的平衡因子都没有改变。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1281268/201801/1281268-20180123065745319-1039256167.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;RL旋转&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;当x位于A的右子树的左子树上时，执行RL旋转&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt; RL旋转与LR旋转是对称的关系。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;设A的右子结点为right，right的左子结点为grandchild。要执行RL旋转，将right结点的左子结点指向grandchild的右子结点，将grandchild的右子结点指向right，将A的右子结点指向grandchild的左子结点，将grandchild的左子结点指向A，最后将原来指向A的指针指向grandchild。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;执行RL旋转以后，调整结点的平衡因子取决于旋转前grandchild结点的原平衡因子。这里也有三种情况需要考虑：&lt;/p&gt;
&lt;p&gt;如果grandchild的原始平衡因子值为+1，将A的平衡因子更新为0，right的更新为-1；&lt;/p&gt;
&lt;p&gt;如果grandchild的原始平衡因子值为  0，将A和right的平衡因子都更新为0；&lt;/p&gt;
&lt;p&gt;如果grandchild的原始平衡因子值为-1，将A的平衡因子更新为+1，right的更新为0；&lt;/p&gt;
&lt;p&gt;在所有情况中，都将grandchild的新平衡因子设置为0。所有其他结点的平衡因子不发生改变。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1281268/201801/1281268-20180130062836312-255811591.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

</description>
<pubDate>Mon, 29 Jan 2018 22:31:00 +0000</pubDate>
<dc:creator>IDreamo</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/idreamo/p/8308336.html</dc:identifier>
</item>
<item>
<title>RAC某节点v$asm_disk查询hang分析处理 - AlfredZhao</title>
<link>http://www.cnblogs.com/jyzhao/p/8379720.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/jyzhao/p/8379720.html</guid>
<description>&lt;p&gt;&lt;strong&gt;主题：&lt;/strong&gt;RAC某节点v$asm_disk查询hang分析处理&lt;br/&gt;&lt;strong&gt;环境：&lt;/strong&gt;Oracle 11.2.0.3 RAC&lt;br/&gt;&lt;strong&gt;故障描述：&lt;/strong&gt;RAC环境2个节点，节点1查询v$asm_disk正常返回结果，节点2查询v$asm_disk就会一直hang，查询会话对应event是ASM file metadata operation.&lt;/p&gt;

&lt;p&gt;首先连接节点1，查询v$asm_disk没有问题：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;--节点1查询v$asm_disk都没有问题
SQL&amp;gt; show parameter name  
SQL&amp;gt; select path from v$asm_disk;

PATH
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
/dev/oracleasm/disks/DATADISK
/dev/oracleasm/disks/FRADISK
/dev/oracleasm/disks/CRSDISK1
/dev/oracleasm/disks/CRSDISK3
/dev/oracleasm/disks/CRSDISK2&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;然后连接节点2，查询v$asm_disk就一直hang&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;SQL&amp;gt; select path from v$asm_disk;
hang住一直无结果返回..&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;故障重现，确认客户描述故障现场属实。&lt;/p&gt;
&lt;p&gt;既然是hang住，自然去查该会话的等待事件是什么？是否有阻塞会话？&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;SQL&amp;gt; select sid, serial#, inst_id, sql_id, event, p1,p2,p3, machine, username, blocking_session from gv$session where wait_class# &amp;lt;&amp;gt; 6;

       SID    SERIAL#    INST_ID SQL_ID        EVENT                                       P1         P2         P3 MACHINE              USERNAME                       BLOCKING_SESSION
---------- ---------- ---------- ------------- ----------------------------------- ---------- ---------- ---------- -------------------- ------------------------------ ----------------

      289      33911          2 b5tshv0auyqm0 ASM file metadata operation               6229          9          0 newdb2               SYS&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;发现等待事件是“ASM file metadata operation”，BLOCKING_SESSION为空，表明并没有阻塞会话。&lt;/p&gt;
&lt;p&gt;此时查了下MOS，初步怀疑是asm_diskstring配置有问题，或是对应的磁盘权限有什么异常。但实际排查并未发现异常。&lt;br/&gt;两个节点asm实例的参数设置都一样；对应目录下的磁盘等权限等也一致。&lt;/p&gt;
&lt;p&gt;1) 两个节点asm实例的参数设置都一样&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;--节点1：
SQL&amp;gt; show parameter asm

NAME                                 TYPE        VALUE
------------------------------------ ----------- ------------------------------
asm_diskgroups                       string      DATADG, FRADG, CRSDG_NEW
asm_diskstring                       string      /dev/oracleasm/disks/*
asm_power_limit                      integer     1
asm_preferred_read_failure_groups    string
SQL&amp;gt; 

--节点2 一样的：
SQL&amp;gt; show parameter asm

NAME                                 TYPE        VALUE
------------------------------------ ----------- ------------------------------
asm_diskgroups                       string      DATADG, FRADG, CRSDG_NEW
asm_diskstring                       string      /dev/oracleasm/disks/*
asm_power_limit                      integer     1
asm_preferred_read_failure_groups    string&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;2) 对应目录下的磁盘等权限等也一致&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;[grid@newdb1 ~]$ ls -l /dev/oracleasm/disks/
total 0
brw-rw---- 1 grid asmadmin 253, 11 Jan 29 15:05 CRSDISK1
brw-rw---- 1 grid asmadmin 253,  9 Jan 29 15:05 CRSDISK2
brw-rw---- 1 grid asmadmin 253, 10 Jan 29 15:05 CRSDISK3
brw-rw---- 1 grid asmadmin 253, 14 Jan 29 15:05 DATADISK
brw-rw---- 1 grid asmadmin 253, 13 Jan 29 15:05 FRADISK
[grid@newdb1 ~]$ 

[grid@newdb2 ~]$ ls -l /dev/oracleasm/disks/
total 0
brw-rw---- 1 grid asmadmin 253, 21 Jan 29 15:05 CRSDISK1
brw-rw---- 1 grid asmadmin 253, 18 Jan 29 15:05 CRSDISK2
brw-rw---- 1 grid asmadmin 253, 19 Jan 29 15:05 CRSDISK3
brw-rw---- 1 grid asmadmin 253, 22 Jan 29 15:05 DATADISK
brw-rw---- 1 grid asmadmin 253, 20 Jan 29 15:05 FRADISK&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;在故障节点2上使用oradebug获取short_stack以及SSD 266，然后进行深入分析。&lt;/p&gt;
&lt;p&gt;首先获取上面289,33911会话的spid：&lt;/p&gt;
&lt;p&gt;select p.spid&lt;br/&gt;from v$process p, v$session s&lt;br/&gt;where p.addr = s.paddr&lt;br/&gt;and s.sid = &amp;amp;sid&lt;br/&gt;and s.serial# = &amp;amp;serial;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;SQL&amp;gt; select p.spid
  2    from v$process p, v$session s
  3   where p.addr = s.paddr
  4     and s.sid = &amp;amp;sid
  5     and s.serial# = &amp;amp;serial;
Enter value for sid: 289
old   4:    and s.sid = &amp;amp;sid
new   4:    and s.sid = 289
Enter value for serial: 33911
old   5:    and s.serial# = &amp;amp;serial
new   5:    and s.serial# = 33911

SPID
------------------------
8763

SQL&amp;gt; !ps -ef|grep 8763
oracle    8763  8762  0 16:31 ?        00:00:00 oraclenewdb2 (DESCRIPTION=(LOCAL=YES)(ADDRESS=(PROTOCOL=beq)))
grid      9639     1  0 16:35 ?        00:00:00 oracle+ASM2_user8763_newdb2 (DESCRIPTION=(LOCAL=YES)(ADDRESS=(PROTOCOL=beq)))
oracle   12022  9750  0 16:43 pts/2    00:00:00 /bin/bash -c ps -ef|grep 8763
oracle   12024 12022  0 16:43 pts/2    00:00:00 grep 8763&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;然后使用oradebug 跟踪8763进程，获取short_stack和SSD 266：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;SQL&amp;gt; oradebug setospid 8763
Oracle pid: 68, Unix process pid: 8763, image: oracle@newdb2 (TNS V1-V3)
SQL&amp;gt; oradebug unlimit
Statement processed.
SQL&amp;gt; oradebug short_stack
ksedsts()+461&amp;lt;-ksdxfstk()+32&amp;lt;-ksdxcb()+1876&amp;lt;-sspuser()+112&amp;lt;-__sighandler()&amp;lt;-read()+14&amp;lt;-ntpfprd()+115&amp;lt;-nsbasic_brc()+376&amp;lt;-nsbrecv()+69&amp;lt;-nioqrc()+485&amp;lt;-ttcdrv()+1461&amp;lt;-nioqwa()+61&amp;lt;-upirtrc()+1385&amp;lt;-kpurcsc()+98&amp;lt;-kpuexec()+10807&amp;lt;-OCIStmtExecute()+39&amp;lt;-kfdDskTableCb4Db()+4492&amp;lt;-kfdDskTableCbInternal()+301&amp;lt;-kfdDskTableCb()+56&amp;lt;-qerfxFetch()+2210&amp;lt;-rwsfcd()+103&amp;lt;-qerhjFetch()+3187&amp;lt;-opifch2()+2995&amp;lt;-kpoal8()+2939&amp;lt;-opiodr()+916&amp;lt;-ttcpip()+2242&amp;lt;-opitsk()+1673&amp;lt;-opiino()+966&amp;lt;-opiodr()+916&amp;lt;-opidrv()+570&amp;lt;-sou2o()+103&amp;lt;-opimai_real()+133&amp;lt;-ssthrdmain()+252&amp;lt;-main()+201&amp;lt;-__libc_start_main()+253&amp;lt;-_start()+36
SQL&amp;gt; oradebug dump systemstate 266
Statement processed.
SQL&amp;gt; oradebug tracefile_name
/home/app/oracle/diag/rdbms/newdg/newdb2/trace/newdb2_ora_8763.trc
SQL&amp;gt; &lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;从获取到的trc文件中，并没有找到有用的线索。至此问题陷入僵局。&lt;/p&gt;

&lt;p&gt;回过头来想之前的解决过程，发现虽然查询v$asm_disk这类操作是在db层，但是本质确实asm实例的管理资源，去查asm实例是否有阻塞呢？&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;--ASM INSTANCE
set lines 350 trimspool on pages 300

select sid, state, event, seconds_in_wait, blocking_session
from   v$session
where  blocking_session is not null
or sid in (select blocking_session 
           from   v$session 
           where  blocking_session is not null)
order by sid;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;在故障节点2的asm实例上查询：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;SQL&amp;gt; set lines 350 trimspool on pages 300
SQL&amp;gt; 
SQL&amp;gt; select sid, state, event, seconds_in_wait, blocking_session
  2  from   v$session
  3  where  blocking_session is not null
  4  or sid in (select blocking_session 
  5             from   v$session 
  6             where  blocking_session is not null)
  7  order by sid;

       SID STATE               EVENT                                                            SECONDS_IN_WAIT BLOCKING_SESSION
---------- ------------------- ---------------------------------------------------------------- --------------- ----------------
       128 WAITING             enq: DD - contention                                                      542311             1702
       380 WAITING             enq: DD - contention                                                     2159938             1702
       442 WAITING             enq: DD - contention                                                     2159098             1702
       506 WAITING             enq: DD - contention                                                     2158258             1702
       569 WAITING             enq: DD - contention                                                      713509             1702
       632 WAITING             enq: DD - contention                                                     2156578             1702
       695 WAITING             enq: DD - contention                                                     2155738             1702
       758 WAITING             enq: DD - contention                                                     1108924             1702
       821 WAITING             enq: DD - contention                                                     2142990             1702
       884 WAITING             enq: DD - contention                                                     2139901             1702
       947 WAITING             enq: DD - contention                                                     2136286             1702
      1010 WAITING             enq: DD - contention                                                     2078621             1702
      1073 WAITING             enq: DD - contention                                                     1845020             1702
      1135 WAITING             GPnP Get Item                                                            2161258
      1136 WAITING             enq: DD - contention                                                     1844671             1702
      1199 WAITING             enq: DD - contention                                                     1844394             1702
      1263 WAITING             enq: DD - contention                                                     1844065             1702
      1325 WAITING             enq: DD - contention                                                     1843549             1702
      1388 WAITING             enq: DD - contention                                                     1471932             1702
      1451 WAITING             enq: DD - contention                                                     1641694             1702
      1514 WAITING             enq: DD - contention                                                     1641426             1702
      1577 WAITING             enq: DD - contention                                                     1572189             1702
      1640 WAITING             enq: DD - contention                                                     1501765             1702
      1702 WAITING             rdbms ipc reply                                                                0             1135
      1703 WAITING             enq: DD - contention                                                      896552             1702
      1765 WAITING             enq: DD - contention                                                     2161018             1702
      1766 WAITING             enq: DD - contention                                                      893474             1702
      1829 WAITING             enq: DD - contention                                                       11782             1702
      1892 WAITING             enq: DD - contention                                                        5041             1702
      1955 WAITING             enq: DD - contention                                                        3357             1702

30 rows selected.&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;果然看到很多阻塞，EVENT为&quot;enq: DD - contention&quot;的都是被1702会话阻塞，而1702会话又是被1135会话阻塞，1135会话的event是&quot;GPnP Get Item&quot;。&lt;br/&gt;看两个会话的详细信息：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;select sid,
       SERIAL#,
       sql_id,
       event,
       MACHINE,
       PROGRAM,
       username,
       blocking_session from   v$session where sid = 1702; 


select sid,
       SERIAL#,
       sql_id,
       event,
       MACHINE,
       PROGRAM,
       username,
       blocking_session from   v$session where sid = 1135; &lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;结果如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;SQL&amp;gt; select sid,
  2         SERIAL#,
  3         sql_id,
  4         event,
  5         MACHINE,
  6         PROGRAM,
  7         username,
  8         blocking_session from   v$session where sid = 1702; 

       SID    SERIAL# SQL_ID        EVENT                                                            MACHINE                                                          PROGRAM                                       USERNAME                BLOCKING_SESSION
---------- ---------- ------------- ---------------------------------------------------------------- ---------------------------------------------------------------- ------------------------------------------------ ------------------------------ ----------------
      1702      15127 b8a2pdbq3p2mj rdbms ipc reply                                                  newdb2                                                           oracle@newdb2 (TNS V1-V3)                     SYS                                         1135

SQL&amp;gt;  select sid,
  2         SERIAL#,
  3         sql_id,
  4         event,
  5         MACHINE,
  6         PROGRAM,
  7         username,
  8         blocking_session from   v$session where sid = 1135; 

       SID    SERIAL# SQL_ID        EVENT                                                            MACHINE                                                          PROGRAM                                       USERNAME                BLOCKING_SESSION
---------- ---------- ------------- ---------------------------------------------------------------- ---------------------------------------------------------------- ------------------------------------------------ ------------------------------ ----------------
      1135          1               GPnP Get Item                                                    newdb2                                                           oracle@newdb2 (RBAL)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;找到最终的原因：GPnP Get Item .&lt;/p&gt;

&lt;p&gt;有了上面的信息，再次查询MOS就可以匹配到&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Diskgroup Mount Hangs with RBAL Waiting on 'GPnP Get Item' and 'enq: DD - contention' (文档 ID 1375505.1)&lt;/li&gt;
&lt;li&gt;&quot;crsctl check cluster -all&quot; command gives CRS-4404, CRS-4405 errors (文档 ID 1392934.1)&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;参照MOS解决方案：&lt;/p&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;ol&gt;&lt;li&gt;Use the following command as root on Compute Node 3 to identify the current gpnpd.bin process:&lt;br/&gt;ps -ef | grep gpnpd.bin&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;This will give you an output similar to:&lt;br/&gt;ps -ef | grep pnp&lt;br/&gt;oracle 31422 1 0 2011 ? 00:05:40 /u01/app/11.2.0.2/grid/bin/gpnpd.bin&lt;/p&gt;
&lt;p&gt;Please note the process ID number&lt;/p&gt;
&lt;ol readability=&quot;0.5&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;Use the following command on Compute Node 3 to stop the current gpnpd.bin process:&lt;br/&gt;kill -HUP&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;After a few moments, gpnpd.bin should be automatically restarted by GI, run the command from step # 1 to verify that a new gpnpd.bin process exists&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;/blockquote&gt;
&lt;p&gt;实际操作如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;[root@newdb2 dev]# ps -ef | grep gpnpd.bin
grid      9835     1  0  2017 ?        00:23:19 /home/app/11.2.0/grid/bin/gpnpd.bin
root     26300 28772  0 17:43 pts/0    00:00:00 grep gpnpd.bin
[root@newdb2 dev]# kill -HUP  9835
You have mail in /var/spool/mail/root
[root@newdb2 dev]# 
[root@newdb2 dev]# ps -ef | grep gpnpd.bin
grid     26740     1  1 17:45 ?        00:00:00 /home/app/11.2.0/grid/bin/gpnpd.bin
root     26762 28772  0 17:45 pts/0    00:00:00 grep gpnpd.bin
[root@newdb2 dev]# su - grid
[grid@newdb2 ~]$ sqlplus / as sysasm

SQL*Plus: Release 11.2.0.3.0 Production on Mon Jan 29 17:46:02 2018

Copyright (c) 1982, 2011, Oracle.  All rights reserved.


Connected to:
Oracle Database 11g Enterprise Edition Release 11.2.0.3.0 - 64bit Production
With the Real Application Clusters and Automatic Storage Management options

SQL&amp;gt; set lines 350 trimspool on pages 300
SQL&amp;gt; 
SQL&amp;gt; select sid, state, event, seconds_in_wait, blocking_session
  2  from   v$session
  3  where  blocking_session is not null
  4  or sid in (select blocking_session 
  5             from   v$session 
  6             where  blocking_session is not null)
  7  order by sid;

no rows selected

SQL&amp;gt; select path from v$asm_disk;

PATH
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
/dev/oracleasm/disks/FRADISK
/dev/oracleasm/disks/DATADISK
/dev/oracleasm/disks/CRSDISK3
/dev/oracleasm/disks/CRSDISK2
/dev/oracleasm/disks/CRSDISK1

SQL&amp;gt;                    &lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;至此，故障节点的ASM实例的阻塞消失，再次验证查询v$asm_disk已经恢复正常，故障算是完美解决。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;后记：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;1.实际上起初的解决思路出现偏差，ASM的问题就应该直接从ASM实例找原因，而之前都是在DB层分析，自然没有得到好的结果。这一点很值得自己反思。&lt;/li&gt;
&lt;li&gt;2.最开始接到这个case是建议找停机时间直接重启节点2，这个方案简单粗暴且不需要深入分析问题，从最终解决方案看到，这种方法也是可以解决问题的。但恰恰由于客户坚持不能重启，反倒因此而学到了更多的技能点。&lt;/li&gt;
&lt;/ul&gt;</description>
<pubDate>Mon, 29 Jan 2018 22:25:00 +0000</pubDate>
<dc:creator>AlfredZhao</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/jyzhao/p/8379720.html</dc:identifier>
</item>
<item>
<title>接受”不完美“:分布式事务学习总结 - 司想君</title>
<link>http://www.cnblogs.com/depsi/p/8380756.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/depsi/p/8380756.html</guid>
<description>&lt;div class=&quot;output_wrapper cye-lm-tag&quot; id=&quot;output_wrapper_id&quot; readability=&quot;97&quot;&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p class=&quot;cye-lm-tag&quot;&gt;作为一个前端专业的人来说，对于事务的理解，一直停留在“要么都成功，要么都不成功”的小白阶段。既然自己将2018年定义为”深入理解“的一年，那么就从深入理解事务开始吧。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;&quot;&gt;&lt;span class=&quot;cye-lm-tag&quot;&gt;什么是事务？&lt;/span&gt;&lt;/h3&gt;
&lt;p class=&quot;cye-lm-tag&quot;&gt;正如文章开头所说的：事务是一系列的动作，这些动作必须全部完成，如果有一个失败，那么事务就会回滚到最开始的状态，仿佛什么都没发生过一样。在企业级应用的开发过程中，事务管理是必不可少的技术，用来确保数据的完整性和一致性。&lt;/p&gt;
&lt;p class=&quot;cye-lm-tag&quot;&gt;事务有四个特性，也就是经常被提到的ACID：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span class=&quot;cye-lm-tag&quot;&gt;原子性(Atomicity):所谓的原子性就是说，在整个事务中的所有操作，要么全部完成，要么全部不做，没有中间状态。对于事务在执行中发生错误，所有的操作都会被回滚，整个事务就像从没被执行过一样。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&quot;cye-lm-tag&quot;&gt;一致性(Consistency):事务的执行必须保证系统的一致性，就拿转账为例，A有500元，B有300元，如果在一个事务里A成功转给B50元，那么不管并发多少，不管发生什么，只要事务执行成功了，那么最后A账户一定是450元，B账户一定是350元。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&quot;cye-lm-tag&quot;&gt;隔离性(Isolation):所谓的隔离性就是说，事务与事务之间不会互相影响，一个事务的中间状态不会被其他事务感知。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&quot;cye-lm-tag&quot;&gt;持久性(Durability):所谓的持久性，就是说一单事务完成了，那么事务对数据所做的变更就完全保存在了数据库中，即使发生停电，系统宕机也是如此。&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p class=&quot;cye-lm-tag&quot;&gt;上面我们说到的事务，也可以称为是”本地事务“。目前许多框架，都能够很方便的支持本地事务。比如Spring Boot，只需要在方法前加上”@Transaction“的注解，就可以愉快的使用事务了。&lt;/p&gt;
&lt;p class=&quot;cye-lm-tag&quot;&gt;但是，事务到此未知就结束了吗？不是的，随着企业应用越来越复杂，应用的架构也从单体架构演变到了SOA，还有现在炙手可热的微服务。这时候，又出现了分布式事务的概念。&lt;/p&gt;
&lt;h3 id=&quot;-1&quot;&gt;&lt;span class=&quot;cye-lm-tag&quot;&gt;分布式事务&lt;/span&gt;&lt;/h3&gt;
&lt;p class=&quot;cye-lm-tag&quot;&gt;分布式事务，简单来说就是指对数据库的处理操作分布在不同的节点之上，而且操作的数据，分布于不同的数据库。分布式事务，需要保证不同数据库的数据一致性。如下图：&lt;/p&gt;

&lt;h2 id=&quot;-3&quot;&gt;&lt;span class=&quot;cye-lm-tag&quot;&gt;数据库分库分表&lt;/span&gt;&lt;/h2&gt;
&lt;p class=&quot;cye-lm-tag&quot;&gt;处于数据量或者数据隔离的考虑，实际开发中需要进行分库分表。原来一个库现在变成了多个库，这时候要保证数据一致性，就要用到分布式事务。&lt;br/&gt;&lt;img src=&quot;http://ohrpyryjo.bkt.clouddn.com/17-4-16/13628033-file_1492319548770_a0aa.png&quot; alt=&quot;异步确保型&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;soa&quot;&gt;&lt;span class=&quot;cye-lm-tag&quot;&gt;应用SOA化&lt;/span&gt;&lt;/h2&gt;
&lt;p class=&quot;cye-lm-tag&quot;&gt;所谓的SOA话，就是业务的服务化。比如原来单机支撑了整个电商网站，现在对整个网站进行拆解，分离出了订单中心、用户中心、库存中心。对于订单中心，有专门的数据库存储订单信息，用户中心也有专门的数据库存储用户信息，库存中心也会有专门的数据库存储库存信息。这时候如果要同时对订单和库存进行操作，那么就会涉及到订单数据库和库存数据库，为了保证数据一致性，就需要用到分布式事务。&lt;br/&gt;&lt;img src=&quot;http://ohrpyryjo.bkt.clouddn.com/17-4-16/13628033-file_1492319548770_a0aa.png&quot; alt=&quot;异步确保型&quot;/&gt;&lt;/p&gt;

&lt;p class=&quot;cye-lm-tag&quot;&gt;说到分布式事务，就离不开CPA原则与BASE方案。&lt;/p&gt;
&lt;h2 id=&quot;cpa&quot;&gt;&lt;span class=&quot;cye-lm-tag&quot;&gt;CPA&lt;/span&gt;&lt;/h2&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p class=&quot;cye-lm-tag&quot;&gt;CPA指的是，在一个分布式系统中，一致性(C)、可用性(A)、分区容错性(P)，三者不可兼得。CPA是NoSQL数据库的基石。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;&lt;li&gt;&lt;span class=&quot;cye-lm-tag&quot;&gt;一致性：在分布式系统中的所有数据备份，在同一时刻是否同样的值。（等同于所有节点访问同一份最新的数据副本）&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&quot;cye-lm-tag&quot;&gt;可用性：在集群中一部分节点故障后，集群整体是否还能响应客户端的读写请求。（对数据更新具备高可用性）&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&quot;cye-lm-tag&quot;&gt;分区容错性：以实际效果而言，分区相当于对通信的时限要求。系统如果不能在时限内达成数据一致性，就意味着发生了分区的情况，必须就当前操作在C和A之间做出选择。&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p class=&quot;cye-lm-tag&quot;&gt;CAP理论就是说在分布式存储系统中，最多只能实现上面的两点。而由于当前的网络硬件肯定&lt;strong&gt;会出现延迟丢包等问题，所以分区容忍性是我们必须需要实现的。&lt;/strong&gt;所以我们只能在一致性和可用性之间进行权衡，没有NoSQL系统能同时保证这三点。&lt;/p&gt;
&lt;h2 id=&quot;base&quot;&gt;&lt;span class=&quot;cye-lm-tag&quot;&gt;BASE&lt;/span&gt;&lt;/h2&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p class=&quot;cye-lm-tag&quot;&gt;BASE就是为了解决关系数据库强一致性引起的问题而引起的可用性降低而提出的解决方案。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p class=&quot;cye-lm-tag&quot;&gt;BASE是下面三个术语的缩写：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span class=&quot;cye-lm-tag&quot;&gt;基本可用（Basically Available）&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&quot;cye-lm-tag&quot;&gt;软状态（Soft state）&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&quot;cye-lm-tag&quot;&gt;最终一致（Eventually consistent）&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;-5&quot;&gt;&lt;span class=&quot;cye-lm-tag&quot;&gt;两阶段提交&lt;/span&gt;&lt;/h2&gt;
&lt;p class=&quot;cye-lm-tag&quot;&gt;两阶段提交(Two Phase Commit, 2PC), 具有强一致性, 是CP系统的一种典型实现，常见的标准是XA，JTA等。例如Oracle的数据库支持XA。&lt;/p&gt;
&lt;p class=&quot;cye-lm-tag&quot;&gt;下面是两阶段提交的示意图：&lt;br/&gt;&lt;img src=&quot;http://ohrpyryjo.bkt.clouddn.com/17-4-16/13628033-file_1492319548770_a0aa.png&quot; alt=&quot;异步确保型&quot;/&gt;&lt;br/&gt;图的上半是两阶段提交成功的演示, 下半是两阶段提交失败的演示。&lt;/p&gt;
&lt;p class=&quot;cye-lm-tag&quot;&gt;两阶段提交目前并不是主流的解决方案，其主要原因是：协调者需要等待所有参与者发出yes请求，或者一个参与者发出no请求后，才能执行提交或者终端操作。这会造成长时间锁住多个资源，造成性能瓶颈。如果参与者有一个耗时长的操作, 性能损耗会更明显；还有一个缺点，就是实现复杂，不利于系统的扩展。&lt;/p&gt;
&lt;h2 id=&quot;tcctryconfirmcancel&quot;&gt;&lt;span class=&quot;cye-lm-tag&quot;&gt;TCC（Try-Confirm-Cancel）&lt;/span&gt;&lt;/h2&gt;
&lt;p class=&quot;cye-lm-tag&quot;&gt;TCC, 是基于补偿型事务的AP系统的一种实现, 具有最终一致性。所谓的TCC编程模式，也是两阶段提交的一个变种。TCC提供了一个编程框架，将整个业务逻辑分为三块：Try、Confirm和Cancel三个操作。以在线下单为例，Try阶段会去扣库存，Confirm阶段则是去更新订单状态，如果更新订单失败，则进入Cancel阶段，会去恢复库存。总之，TCC就是通过代码人为实现了两阶段提交，不同的业务场景所写的代码都不一样，复杂度也不一样，因此，这种模式并不能很好地被复用。&lt;/p&gt;
&lt;h2 id=&quot;-6&quot;&gt;&lt;span class=&quot;cye-lm-tag&quot;&gt;异步确保型&lt;/span&gt;&lt;/h2&gt;
&lt;p class=&quot;cye-lm-tag&quot;&gt;通过将一系列同步的事务操作变为基于消息执行的异步操作, 避免了分布式事务中的同步阻塞操作的影响。基于消息执行就是基于消息中间件的两阶段提交，本质上是对消息中间件的一种特殊利用，它是将本地事务和发消息放在了一个分布式事务里，保证要么本地操作成功成功并且对外发消息成功，要么两者都失败，开源的RocketMQ就支持这一特性，具体原理如下：&lt;br/&gt;&lt;img src=&quot;http://ohrpyryjo.bkt.clouddn.com/17-4-16/13628033-file_1492319548770_a0aa.png&quot; alt=&quot;异步确保型&quot;/&gt;&lt;/p&gt;
&lt;p class=&quot;cye-lm-tag&quot;&gt;执行步骤如下:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;&lt;span class=&quot;cye-lm-tag&quot;&gt;MQ发送方发送远程事务消息到MQ Server;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&quot;cye-lm-tag&quot;&gt;MQ Server给予响应, 表明事务消息已成功到达MQ Server.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&quot;cye-lm-tag&quot;&gt;MQ发送方Commit本地事务.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&quot;cye-lm-tag&quot;&gt;若本地事务Commit成功, 则通知MQ Server允许对应事务消息被消费; 若本地事务失败, 则通知MQ Server对应事务消息应被丢弃.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&quot;cye-lm-tag&quot;&gt;若MQ发送方超时未对MQ Server作出本地事务执行状态的反馈, 那么需要MQ Servfer向MQ发送方主动回查事务状态, 以决定事务消息是否能被消费.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&quot;cye-lm-tag&quot;&gt;当得知本地事务执行成功时, MQ Server允许MQ订阅方消费本条事务消息.&lt;/span&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p class=&quot;cye-lm-tag&quot;&gt;需要额外说明的一点, 就是事务消息投递到MQ订阅方后, 并不一定能够成功执行. 需要MQ订阅方主动给予消费反馈(ack)&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span class=&quot;cye-lm-tag&quot;&gt;如果MQ订阅方执行远程事务成功, 则给予消费成功的ack, 那么MQ Server可以安全将事务消息移除;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&quot;cye-lm-tag&quot;&gt;如果执行失败, MQ Server需要对消息重新投递, 直至消费成功.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&quot;cye-lm-tag&quot;&gt;根据业务逻辑的具体实现不同，还可能需要对消息中间件增加消息不重复, 不乱序等其它要求.&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p class=&quot;cye-lm-tag&quot;&gt;此方案适用于执行周期较长，实时性要求不高的场景。&lt;/p&gt;
&lt;h2 id=&quot;-7&quot;&gt;&lt;span class=&quot;cye-lm-tag&quot;&gt;最大努力通知型&lt;/span&gt;&lt;/h2&gt;
&lt;p class=&quot;cye-lm-tag&quot;&gt;这是分布式事务中要求最低的一种, 也可以通过消息中间件实现, 与前面异步确保型操作不同的一点是, 在消息由MQ Server投递到消费者之后, 允许在达到最大重试次数之后正常结束事务.这种方案适用于交易结果消息的通知等&lt;/p&gt;
&lt;h3 id=&quot;-8&quot;&gt;&lt;span class=&quot;cye-lm-tag&quot;&gt;微服务的事务&lt;/span&gt;&lt;/h3&gt;
&lt;p class=&quot;cye-lm-tag&quot;&gt;最近两年，微服务的呼声越来越高，不可避免的，微服务也会面临事务的困扰。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span class=&quot;cye-lm-tag&quot;&gt;首先，对于微服务架构来说，数据访问变得更加复杂，这是因为数据都是微服务私有的，唯一可访问的方式就是通过 API。这种打包数据访问方式使得微服务之间松耦合，并且彼此之间独立，更容易进行性能扩展。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&quot;cye-lm-tag&quot;&gt;其次，不同的微服务经常使用不同的数据库。应用会产生各种不同类型的数据，关系型数据库并不一定是最佳选择基于微服务的应用一般都使用 SQL 和 NoSQL 结合的模式。但是这些非关系型数据大多数并不支持 2PC。&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;-9&quot;&gt;&lt;span class=&quot;cye-lm-tag&quot;&gt;总结&lt;/span&gt;&lt;/h3&gt;
&lt;p class=&quot;cye-lm-tag&quot;&gt;事务，尤其是分布式事务，是一个很大的话题，除了上述列出的几种解决方案，根据不同的业务要求，还有许多其他的解决方案。按照控制力度，分布式事务分为部分控制和完全控制两种：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span class=&quot;cye-lm-tag&quot;&gt;部分控制就是各种变种的两阶段提交，包括上面提到的异步确保型、TCC模式&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;完全控制就是完全实现两阶段提交。部分控制的好处是并发量和性能很好，缺点是数据一致性减弱了，完全控制则是牺牲了性能，保障了一致性。&lt;br/&gt;具体用哪种方式，最终还是取决于业务场景。&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
</description>
<pubDate>Mon, 29 Jan 2018 16:53:00 +0000</pubDate>
<dc:creator>司想君</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/depsi/p/8380756.html</dc:identifier>
</item>
<item>
<title>微信小程序+和风天气完成天气预报 - 程会玩</title>
<link>http://www.cnblogs.com/huiwenhua/p/8380276.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/huiwenhua/p/8380276.html</guid>
<description>&lt;h3 id=&quot;冷暖自知天气小程序&quot;&gt;《冷暖自知》天气小程序&lt;/h3&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;学无止境，以玩儿玩儿的心态去学习！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;花半天时间完成简单的小程序应用。适合小程序初学者。&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;申请小程序帐号： &lt;a href=&quot;https://mp.weixin.qq.com/wxopen/waregister?action=step1%EF%BC%8C%E5%85%B7%E4%BD%93%E6%93%8D%E4%BD%9C%E6%8C%89%E7%85%A7%E5%AE%98%E7%BD%91%E6%AD%A5%E9%AA%A4%E6%89%A7%E8%A1%8C%EF%BC%8C%E7%9B%B8%E4%BF%A1%E4%BD%A0%E4%BC%9A%E7%9C%8B%E7%9A%84%E5%BE%88%E6%98%8E%E7%99%BD%E7%9A%84%EF%BC%88_-_&quot; class=&quot;uri&quot;&gt;https://mp.weixin.qq.com/wxopen/waregister?action=step1，具体操作按照官网步骤执行，相信你会看的很明白的（_-_&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;安装微信开发者工具，填写信息：①项目目录为自己要开发小程序的位置②AppId在微信管理后台https://mp.weixin.qq.com/wxopen/devprofile?action=get_profile&amp;amp;token=2032482239&amp;amp;lang=zh_CN的设置-开发设置中③项目名称自己起，填写完成点击完成；&lt;/li&gt;
&lt;li&gt;看到默认的初始小程序Hello Horld是不是很兴奋，下面进行我们的关键：&lt;/li&gt;
&lt;li&gt;在index.wxml中写我们的结构，index.wxss中写css样式，在index.js中写我们的逻辑内容。前提是你们要有css3的基础哦！！！（结构代码和样式代码以及效果之后补充，项目在公司电脑上，汗！！！）&lt;/li&gt;
&lt;li&gt;在index.js中定义两个方法，getLocation()获取用户的地理位置和获取天气的方法getWeather();&lt;br/&gt;6.和风天气提供免费天气接口（打广告是不是给点福利，哈哈~~），免费版只能获取3天的天气情况，开发文档：&lt;a href=&quot;https://www.heweather.com/documents&quot; class=&quot;uri&quot;&gt;https://www.heweather.com/documents&lt;/a&gt;&lt;br/&gt;7.两个方法大致如下：&lt;/li&gt;
&lt;/ol&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;16&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;co&quot;&gt;//获取地理位置&lt;/span&gt;
getLocation&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; _this &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;va&quot;&gt;wx&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;getLocation&lt;/span&gt;(&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'wgs84'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;success&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt;(res) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; latitude &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;res&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;latitude&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; longitude &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;res&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;longitude&lt;/span&gt;
    &lt;span class=&quot;va&quot;&gt;_this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;getWeather&lt;/span&gt;(longitude &lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;latitude )&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;co&quot;&gt;//获取地理位置成功之后调用天气函数&lt;/span&gt;
  &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;dt&quot;&gt;getWeather&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt;(lon&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;lat)&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; key&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'你的key'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;co&quot;&gt;//注册和风天气就会生成你的key&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; lon &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; lon&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; lat &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; lat&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; url &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'https://free-api.heweather.com/s6/weather/forecast?key='&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;+&lt;/span&gt;key&lt;span class=&quot;op&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'&amp;amp;location='&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;+&lt;/span&gt;lon&lt;span class=&quot;op&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;','&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;+&lt;/span&gt;lat&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;va&quot;&gt;wx&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;request&lt;/span&gt;(&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; url&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;//仅为示例，并非真实的接口地址&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;success&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt;(res) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;co&quot;&gt;//将数据绑定到页面&lt;/span&gt;
  &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;8.在onshow函数中调用获取位置函数，函数调用：this.getLocation();&lt;/p&gt;
&lt;p&gt;大功搞成，这样就有了自己的天气预报了，天气变冷，大家注意身体哦，身体是革命的本钱！！！&lt;/p&gt;
&lt;p&gt;先记录到这，时间不早了，该休息了！！！后续在修改本文！！！有遇到困难的先留言吧，先对不住啦~~~&lt;/p&gt;
</description>
<pubDate>Mon, 29 Jan 2018 16:28:00 +0000</pubDate>
<dc:creator>程会玩</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/huiwenhua/p/8380276.html</dc:identifier>
</item>
<item>
<title>用C＃编写Linux守护进程 - Chaunce</title>
<link>http://www.cnblogs.com/xiaoliangge/p/8379992.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/xiaoliangge/p/8379992.html</guid>
<description>&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/578477/201801/578477-20180129234636875-490659352.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; 如果要在Red Hat Enterprise Linux上将.NET Core进程作为后台进程运行，则可以创建自定义systemd单元。今天我将为.NET Core编写两个自定义系统单元的例子。一个是运行.NET Core控制台应用程序的一种类型，另一个是运行ASP.NET Core Web应用程序的简单类型。 &lt;/p&gt;

&lt;h2&gt;&lt;span&gt;建立一个应用程序&lt;/span&gt;&lt;/h2&gt;
&lt;p class=&quot;selectionShareable&quot;&gt;&lt;span&gt;您可以用&lt;/span&gt;&lt;code class=&quot;notranslate&quot;&gt;dotnet run&lt;/code&gt;&lt;span&gt;&lt;span&gt;在systemd中使用指定项目目录作为工作目录。&lt;/span&gt;&lt;span&gt;但是，我们来构建一个二进制文件并将其用于systemd。用dotnet new 命令&lt;/span&gt;&lt;span&gt;创建您的项目后&lt;/span&gt;&lt;/span&gt;&lt;span&gt;编辑Program.cs如下。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.IO;
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;  
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; ConsoleApplication
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Program
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; Main(&lt;span&gt;string&lt;/span&gt;&lt;span&gt;[] args)
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;             &lt;span&gt;var&lt;/span&gt; path =&lt;span&gt; Path.GetTempFileName();
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;             File.WriteAllText(path, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Hello Temp File!&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;             Console.WriteLine($&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Wrote temp file: {path}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p class=&quot;selectionShareable&quot;&gt;&lt;span&gt;然后用&lt;/span&gt;&lt;code class=&quot;notranslate&quot;&gt;dotnet publish&lt;/code&gt;&lt;span&gt;&lt;span&gt;命令&lt;/span&gt;&lt;span&gt;发布项目&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;span&gt;你会看到&lt;/span&gt;&lt;/span&gt;&lt;code class=&quot;notranslate&quot;&gt;bin/&amp;lt;Configuration&amp;gt;/&amp;lt;Framework&amp;gt;目录下的二进制文件&lt;/code&gt;&lt;span&gt;。&lt;/span&gt;&lt;/p&gt;
&lt;div&gt;
&lt;div id=&quot;highlighter_702704&quot; class=&quot;syntaxhighlighter redhat-highlight plain&quot;&gt;
&lt;table border=&quot;0&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody readability=&quot;3.5&quot;&gt;&lt;tr readability=&quot;7&quot;&gt;&lt;td class=&quot;gutter&quot;&gt;
&lt;p&gt;1&lt;/p&gt;
&lt;p&gt;2&lt;/p&gt;
&lt;p&gt;3&lt;/p&gt;
&lt;p&gt;4&lt;/p&gt;
&lt;p&gt;5&lt;/p&gt;
&lt;/td&gt;
&lt;td class=&quot;code&quot; readability=&quot;9.5&quot;&gt;
&lt;div class=&quot;container&quot; readability=&quot;18&quot;&gt;
&lt;p&gt;&lt;code class=&quot;plain plain&quot;&gt;$ dotnet publish -c Release&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;plain plain&quot;&gt;Publishing ConsoleApp for .NETCoreApp,Version=v1.1&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;plain plain&quot;&gt;Project ConsoleApp (.NETCoreApp,Version=v1.1) was previously compiled. Skipping compilation.&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;plain plain&quot;&gt;publish: Published to /home/tatanaka/Documents/git/tanaka-takayoshi/SystemdExample/1.1/ConsoleApp/bin/Release/netcoreapp1.1/publish&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;plain plain&quot;&gt;Published 1/1 projects successfully&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;h2&gt;&lt;span&gt;创建一个自定义的systemd&lt;/span&gt;&lt;/h2&gt;
&lt;p class=&quot;selectionShareable&quot;&gt;&lt;span&gt;首先，创建一个运行守护进程和工作目录的用户。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;$ sudo useradd -s /sbin/nologin dotnetuser
$ sudo mkdir /var/SystemdExample
$ sudo cp /home/tatanaka/Documents/git/tanaka-takayoshi/SystemdExample/&lt;/span&gt;&lt;span&gt;1.1&lt;/span&gt;/ConsoleApp/bin/Release/netcoreapp1&lt;span&gt;.1&lt;/span&gt;/publish&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; /var/SystemdExample
$ sudo chown -R dotnetuser:dotnetuser /var/SystemdExample&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p class=&quot;selectionShareable&quot;&gt;&lt;span&gt;然后在&lt;/span&gt;&lt;code class=&quot;notranslate&quot;&gt;/etc/systemd/system/&lt;/code&gt;&lt;span&gt;&lt;span&gt;目录&lt;/span&gt;&lt;span&gt;下创建一个自定义的systemd单元文件&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;span&gt;文件名应该是&lt;/span&gt;&lt;/span&gt;&lt;code class=&quot;notranslate&quot;&gt;&amp;lt;unit-name&amp;gt;.&amp;lt;unit-type&amp;gt;&lt;/code&gt;&lt;span&gt;&lt;span&gt;。&lt;/span&gt;&lt;span&gt;我创建的目录和文件名为：&lt;/span&gt;&lt;/span&gt;&lt;code class=&quot;notranslate&quot;&gt;/etc/systemd/system/netcore-console-example.service&lt;/code&gt;&lt;span&gt;。&lt;/span&gt;&lt;/p&gt;
&lt;table border=&quot;0&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody readability=&quot;3&quot;&gt;&lt;tr readability=&quot;6&quot;&gt;&lt;td class=&quot;gutter&quot;&gt;
&lt;p&gt;1&lt;/p&gt;
&lt;p&gt;2&lt;/p&gt;
&lt;p&gt;3&lt;/p&gt;
&lt;p&gt;4&lt;/p&gt;
&lt;p&gt;5&lt;/p&gt;
&lt;p&gt;6&lt;/p&gt;
&lt;p&gt;7&lt;/p&gt;
&lt;p&gt;8&lt;/p&gt;
&lt;p&gt;9&lt;/p&gt;
&lt;p&gt;10&lt;/p&gt;
&lt;p&gt;11&lt;/p&gt;
&lt;p&gt;12&lt;/p&gt;
&lt;p&gt;13&lt;/p&gt;
&lt;p&gt;14&lt;/p&gt;
&lt;/td&gt;
&lt;td class=&quot;code&quot; readability=&quot;6&quot;&gt;
&lt;div class=&quot;container&quot; readability=&quot;11&quot;&gt;
&lt;p&gt;&lt;span&gt;&lt;code class=&quot;plain plain&quot;&gt;[Unit]&lt;/code&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;code class=&quot;plain plain&quot;&gt;Description=Example for .NET Core ConsoleApp with systemd&lt;/code&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;code class=&quot;plain plain&quot;&gt;DefaultDependencies=no&lt;/code&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;code class=&quot;plain plain&quot;&gt;[Service]&lt;/code&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;code class=&quot;plain plain&quot;&gt;Type=oneshot&lt;/code&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;code class=&quot;plain plain&quot;&gt;RemainAfterExit=no&lt;/code&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;code class=&quot;plain plain&quot;&gt;ExecStart=/opt/rh/rh-dotnetcore11/root/usr/bin/dotnet ConsoleApp.dll&lt;/code&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;code class=&quot;plain plain&quot;&gt;WorkingDirectory=/var/SystemdExample&lt;/code&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;code class=&quot;plain plain&quot;&gt;User=dotnetuser&lt;/code&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;code class=&quot;plain plain&quot;&gt;Group=dotnetuser&lt;/code&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;code class=&quot;plain plain&quot;&gt;[install]&lt;/code&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p class=&quot;selectionShareable&quot;&gt;&lt;span&gt;&lt;span&gt;您应该在ExecStart中指定dotnet的完整路径。&lt;/span&gt;&lt;span&gt;以上是红帽提供的.NET Core 1.1的情况。&lt;/span&gt;&lt;span&gt;然后你可以用&lt;/span&gt;&lt;/span&gt;&lt;code class=&quot;notranslate&quot;&gt;systemctl&lt;/code&gt;&lt;span&gt;&lt;span&gt;命令&lt;/span&gt;&lt;span&gt;执行守护进程&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;span&gt;您可以使用&lt;/span&gt;&lt;/span&gt;&lt;code class=&quot;notranslate&quot;&gt;systemctl status&lt;/code&gt;&lt;span&gt;命令或&lt;/span&gt;&lt;code class=&quot;notranslate&quot;&gt;journalctl&lt;/code&gt;&lt;span&gt;&lt;span&gt;命令&lt;/span&gt;&lt;span&gt;查看控制台输出&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;table border=&quot;0&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody readability=&quot;4.5&quot;&gt;&lt;tr readability=&quot;9&quot;&gt;&lt;td class=&quot;gutter&quot;&gt;
&lt;p&gt;1&lt;/p&gt;
&lt;p&gt;2&lt;/p&gt;
&lt;p&gt;3&lt;/p&gt;
&lt;p&gt;4&lt;/p&gt;
&lt;p&gt;5&lt;/p&gt;
&lt;p&gt;6&lt;/p&gt;
&lt;p&gt;7&lt;/p&gt;
&lt;p&gt;8&lt;/p&gt;
&lt;p&gt;9&lt;/p&gt;
&lt;p&gt;10&lt;/p&gt;
&lt;p&gt;11&lt;/p&gt;
&lt;p&gt;12&lt;/p&gt;
&lt;p&gt;13&lt;/p&gt;
&lt;p&gt;14&lt;/p&gt;
&lt;p&gt;15&lt;/p&gt;
&lt;p&gt;16&lt;/p&gt;
&lt;p&gt;17&lt;/p&gt;
&lt;p&gt;18&lt;/p&gt;
&lt;/td&gt;
&lt;td class=&quot;code&quot; readability=&quot;22&quot;&gt;
&lt;div class=&quot;container&quot; readability=&quot;43&quot;&gt;
&lt;p&gt;&lt;span&gt;&lt;code class=&quot;plain plain&quot;&gt;$ sudo systemctl start netcore-console-example.service&lt;/code&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;code class=&quot;plain plain&quot;&gt;$ sudo systemctl status netcore-console-example.service&lt;/code&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;code class=&quot;plain plain&quot;&gt;● netcore-console-example.service - Example for .NET Core ConsoleApp with systemd&lt;/code&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;code class=&quot;plain spaces&quot;&gt;   &lt;/code&gt;&lt;code class=&quot;plain plain&quot;&gt;Loaded: loaded (/etc/systemd/system/netcore-console-example.service; enabled; vendor preset: disabled)&lt;/code&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;code class=&quot;plain spaces&quot;&gt;   &lt;/code&gt;&lt;code class=&quot;plain plain&quot;&gt;Active: inactive (dead) since Fri 2017-02-24 00:29:16 JST; 13s ago&lt;/code&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;code class=&quot;plain spaces&quot;&gt;  &lt;/code&gt;&lt;code class=&quot;plain plain&quot;&gt;Process: 18075 ExecStart=/opt/rh/rh-dotnetcore11/root/usr/bin/dotnet ConsoleApp.dll (code=exited, status=0/SUCCESS)&lt;/code&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;code class=&quot;plain spaces&quot;&gt; &lt;/code&gt;&lt;code class=&quot;plain plain&quot;&gt;Main PID: 18075 (code=exited, status=0/SUCCESS)&lt;/code&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;code class=&quot;plain plain&quot;&gt;Feb 24 00:29:16 localhost.localdomain systemd[1]: Starting Example for .NET Core ConsoleApp with systemd...&lt;/code&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;code class=&quot;plain plain&quot;&gt;Feb 24 00:29:16 localhost.localdomain dotnet[18075]: Wrote temp file: /tmp/tmph1ok6H.tmp&lt;/code&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;code class=&quot;plain plain&quot;&gt;Feb 24 00:29:16 localhost.localdomain systemd[1]: Started Example for .NET Core ConsoleApp with systemd.&lt;/code&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;code class=&quot;plain plain&quot;&gt;$ journalctl -u netcore-console-example.service -e&lt;/code&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;code class=&quot;plain plain&quot;&gt;Feb 24 00:29:16 localhost.localdomain systemd[1]: Starting Example for .NET Core ConsoleApp with systemd...&lt;/code&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;code class=&quot;plain plain&quot;&gt;Feb 24 00:29:16 localhost.localdomain dotnet[18075]: Wrote temp file: /tmp/tmph1ok6H.tmp&lt;/code&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;code class=&quot;plain plain&quot;&gt;Feb 24 00:29:16 localhost.localdomain systemd[1]: Started Example for .NET Core ConsoleApp with systemd.&lt;/code&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;code class=&quot;plain plain&quot;&gt;$ sudo cat /tmp/tmph1ok6H.tmp&lt;/code&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;code class=&quot;plain plain&quot;&gt;Hello Temp File!&lt;/code&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h2&gt;&lt;span&gt;使用PrivateTemp&lt;/span&gt;&lt;/h2&gt;
&lt;p class=&quot;selectionShareable&quot;&gt;&lt;span&gt;&lt;span&gt;在上述系统单元中，程序在临时文件夹下写入一个文件。&lt;/span&gt;&lt;span&gt;你有时想写一个来自其他用户的临时文件是安全的。&lt;/span&gt;&lt;span&gt;您可以在&lt;code class=&quot;notranslate&quot;&gt;[Service]&lt;/code&gt;section中的指定使用PrivateTemp&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div&gt;
&lt;div id=&quot;highlighter_163284&quot; class=&quot;syntaxhighlighter redhat-highlight plain&quot;&gt;
&lt;table border=&quot;0&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody readability=&quot;1.5&quot;&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td class=&quot;gutter&quot;&gt;
&lt;p&gt;1&lt;/p&gt;
&lt;p&gt;2&lt;/p&gt;
&lt;p&gt;3&lt;/p&gt;
&lt;p&gt;4&lt;/p&gt;
&lt;p&gt;5&lt;/p&gt;
&lt;p&gt;6&lt;/p&gt;
&lt;p&gt;7&lt;/p&gt;
&lt;p&gt;8&lt;/p&gt;
&lt;/td&gt;
&lt;td class=&quot;code&quot; readability=&quot;5&quot;&gt;
&lt;div class=&quot;container&quot; readability=&quot;9&quot;&gt;
&lt;p&gt;&lt;code class=&quot;plain plain&quot;&gt;[Service]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;plain plain&quot;&gt;Type=oneshot&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;plain plain&quot;&gt;RemainAfterExit=no&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;plain plain&quot;&gt;ExecStart=/opt/rh/rh-dotnetcore11/root/usr/bin/dotnet ConsoleApp.dll&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;plain plain&quot;&gt;WorkingDirectory=/var/SystemdExample&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;plain plain&quot;&gt;User=dotnetuser&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;plain plain&quot;&gt;Group=dotnetuser&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;plain plain&quot;&gt;PrivateTemp=true&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;p class=&quot;selectionShareable&quot;&gt;&lt;span&gt;重新加载单元文件后，程序可以以前一样访问&lt;/span&gt;&lt;code class=&quot;notranslate&quot;&gt;/tmp&lt;/code&gt;&lt;span&gt;&lt;span&gt;像&lt;/span&gt;&lt;span&gt;目录，但这不是实际的&lt;/span&gt;&lt;/span&gt;&lt;code class=&quot;notranslate&quot;&gt;/tmp&lt;/code&gt;&lt;span&gt;目录。&lt;/span&gt;&lt;/p&gt;
&lt;div&gt;
&lt;div id=&quot;highlighter_795510&quot; class=&quot;syntaxhighlighter redhat-highlight plain&quot;&gt;
&lt;table border=&quot;0&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody readability=&quot;4.5&quot;&gt;&lt;tr readability=&quot;9&quot;&gt;&lt;td class=&quot;gutter&quot;&gt;
&lt;p&gt;1&lt;/p&gt;
&lt;p&gt;2&lt;/p&gt;
&lt;p&gt;3&lt;/p&gt;
&lt;p&gt;4&lt;/p&gt;
&lt;p&gt;5&lt;/p&gt;
&lt;p&gt;6&lt;/p&gt;
&lt;p&gt;7&lt;/p&gt;
&lt;p&gt;8&lt;/p&gt;
&lt;p&gt;9&lt;/p&gt;
&lt;p&gt;10&lt;/p&gt;
&lt;p&gt;11&lt;/p&gt;
&lt;p&gt;12&lt;/p&gt;
&lt;p&gt;13&lt;/p&gt;
&lt;p&gt;14&lt;/p&gt;
&lt;/td&gt;
&lt;td class=&quot;code&quot; readability=&quot;18&quot;&gt;
&lt;div class=&quot;container&quot; readability=&quot;35&quot;&gt;
&lt;p&gt;&lt;code class=&quot;plain plain&quot;&gt;$ sudo systemctl daemon-reload&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;plain plain&quot;&gt;$ sudo systemctl start netcore-console-example.service&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;plain plain&quot;&gt;$ sudo systemctl status netcore-console-example.service&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;plain plain&quot;&gt;● netcore-console-example.service - Example for .NET Core ConsoleApp with systemd&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;plain spaces&quot;&gt;   &lt;/code&gt;&lt;code class=&quot;plain plain&quot;&gt;Loaded: loaded (/etc/systemd/system/netcore-console-example.service; enabled; vendor preset: disabled)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;plain spaces&quot;&gt;   &lt;/code&gt;&lt;code class=&quot;plain plain&quot;&gt;Active: inactive (dead) since Fri 2017-02-24 00:35:46 JST; 12s ago&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;plain spaces&quot;&gt;  &lt;/code&gt;&lt;code class=&quot;plain plain&quot;&gt;Process: 18415 ExecStart=/opt/rh/rh-dotnetcore11/root/usr/bin/dotnet ConsoleApp.dll (code=exited, status=0/SUCCESS)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;plain spaces&quot;&gt; &lt;/code&gt;&lt;code class=&quot;plain plain&quot;&gt;Main PID: 18415 (code=exited, status=0/SUCCESS)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;plain plain&quot;&gt;Feb 24 00:35:46 localhost.localdomain systemd[1]: Starting Example for .NET Core ConsoleApp with systemd...&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;plain plain&quot;&gt;Feb 24 00:35:46 localhost.localdomain dotnet[18415]: Wrote temp file: /tmp/tmpJLWAGC.tmp&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;plain plain&quot;&gt;Feb 24 00:35:46 localhost.localdomain systemd[1]: Started Example for .NET Core ConsoleApp with systemd.&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;plain plain&quot;&gt;$ ls /tmp/tmpJLWAGC.tmp&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;plain plain&quot;&gt;ls: cannot access /tmp/tmpJLWAGC.tmp: No such file or directory&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;h2&gt;&lt;span&gt;建立一个应用程序&lt;/span&gt;&lt;/h2&gt;
&lt;p class=&quot;selectionShareable&quot;&gt;&lt;span&gt;&lt;span&gt;现在我们来构建一个ASP.NET Core Web应用程序。&lt;/span&gt;&lt;span&gt;今天我使用默认的模板项目。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div&gt;
&lt;div id=&quot;highlighter_451336&quot; class=&quot;syntaxhighlighter redhat-highlight plain&quot;&gt;
&lt;table border=&quot;0&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody readability=&quot;3&quot;&gt;&lt;tr readability=&quot;6&quot;&gt;&lt;td class=&quot;gutter&quot;&gt;
&lt;p&gt;&lt;span&gt;1&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;2&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;3&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;4&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;5&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;6&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;7&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;8&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;9&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;10&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td class=&quot;code&quot; readability=&quot;10&quot;&gt;
&lt;div class=&quot;container&quot; readability=&quot;19&quot;&gt;
&lt;p&gt;&lt;code class=&quot;plain plain&quot;&gt;$ dotnet new -t web&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;plain plain&quot;&gt;Created new C# project in /home/tatanaka/Documents/git/tanaka-takayoshi/SystemdExample/1.1/WebApp.&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;plain plain&quot;&gt;$ dotnet restore&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;plain plain&quot;&gt;** snipped**&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;plain plain&quot;&gt;log  : Restore completed in 9721ms.&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;plain plain&quot;&gt;$ dotnet publish -c Release&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;plain plain&quot;&gt;Publishing WebApp for .NETCoreApp,Version=v1.1&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;plain plain&quot;&gt;** snipped **&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;plain plain&quot;&gt;publish: Published to /home/tatanaka/Documents/git/tanaka-takayoshi/SystemdExample/1.1/WebApp/bin/Release/netcoreapp1.1/publish&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;plain plain&quot;&gt;Published 1/1 projects successfully&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&quot;selectionShareable&quot;&gt;&lt;span&gt;现在可以用dotnet命令运行。&lt;/span&gt;&lt;/p&gt;
&lt;div&gt;
&lt;div id=&quot;highlighter_634216&quot; class=&quot;syntaxhighlighter redhat-highlight plain&quot;&gt;
&lt;table border=&quot;0&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody readability=&quot;2.3941532258065&quot;&gt;&lt;tr readability=&quot;4.7883064516129&quot;&gt;&lt;td class=&quot;gutter&quot;&gt;
&lt;p&gt;&lt;span&gt;1&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;2&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;3&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;4&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;5&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;6&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;7&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td class=&quot;code&quot; readability=&quot;9.0860995850622&quot;&gt;
&lt;div class=&quot;container&quot; readability=&quot;17.215767634855&quot;&gt;
&lt;p&gt;&lt;code class=&quot;plain plain&quot;&gt;$ dotnet bin/Release/netcoreapp1.1/publish/WebApp.dll&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;plain plain&quot;&gt;info: Microsoft.Extensions.DependencyInjection.DataProtectionServices[0]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;plain spaces&quot;&gt;      &lt;/code&gt;&lt;code class=&quot;plain plain&quot;&gt;User profile is available. Using '/home/tatanaka/.aspnet/DataProtection-Keys' as key repository; keys will not be encrypted at rest.&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;plain plain&quot;&gt;Hosting environment: Production&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;plain plain&quot;&gt;Content root path: /home/tatanaka/Documents/git/tanaka-takayoshi/SystemdExample/1.1/WebApp&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;plain plain&quot;&gt;Application started. Press Ctrl+C to shut down.&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;h2&gt;&lt;span&gt;创建一个自定义的systemd&lt;/span&gt;&lt;/h2&gt;
&lt;p class=&quot;selectionShareable&quot;&gt;&lt;span&gt;为这个Web应用程序也指定dotnetuser名称。&lt;/span&gt;&lt;/p&gt;
&lt;div&gt;
&lt;div id=&quot;highlighter_276641&quot; class=&quot;syntaxhighlighter redhat-highlight plain&quot;&gt;
&lt;table border=&quot;0&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody readability=&quot;1.5&quot;&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td class=&quot;gutter&quot;&gt;
&lt;p&gt;&lt;span&gt;1&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;2&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;3&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td class=&quot;code&quot; readability=&quot;6&quot;&gt;
&lt;div class=&quot;container&quot; readability=&quot;11&quot;&gt;
&lt;p&gt;&lt;code class=&quot;plain plain&quot;&gt;$ sudo mkdir /var/SystemdExample&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;plain plain&quot;&gt;$ sudo cp -R bin/Release/netcoreapp1.1/publish/* /var/SystemdWebExample&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;plain plain&quot;&gt;$ sudo chown -R dotnetuser:dotnetuser /var/SystemdWebExample&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&quot;selectionShareable&quot;&gt;&lt;span&gt;然后创建一个自定义的systemd单元文件&lt;/span&gt;&lt;code class=&quot;notranslate&quot;&gt;/etc/systemd/system/netcore-web-example.service&lt;/code&gt;&lt;span&gt;。&lt;/span&gt;&lt;/p&gt;
&lt;div&gt;
&lt;div id=&quot;highlighter_369691&quot; class=&quot;syntaxhighlighter redhat-highlight plain&quot;&gt;
&lt;table border=&quot;0&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody readability=&quot;3.4659248956885&quot;&gt;&lt;tr readability=&quot;6.9318497913769&quot;&gt;&lt;td class=&quot;gutter&quot;&gt;
&lt;p&gt;&lt;span&gt;1&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;2&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;3&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;4&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;5&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;6&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;7&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;8&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;9&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;10&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;11&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;12&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;13&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;14&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;15&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;16&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;17&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;18&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;19&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;20&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td class=&quot;code&quot; readability=&quot;10.884730538922&quot;&gt;
&lt;div class=&quot;container&quot; readability=&quot;20.77994011976&quot;&gt;
&lt;p&gt;&lt;code class=&quot;plain plain&quot;&gt;[Unit]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;plain plain&quot;&gt;Description=Example for .NET Core WebApp with systemd&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;plain plain&quot;&gt;DefaultDependencies=no&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;plain plain&quot;&gt;Wants=network.target # network is required&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;plain plain&quot;&gt;After=network.target&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;plain plain&quot;&gt;[Service]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;plain plain&quot;&gt;ExecStart=/opt/rh/rh-dotnetcore11/root/usr/bin/dotnet WebApp.dll&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;plain plain&quot;&gt;WorkingDirectory=/var/SystemdWebExample&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;plain plain&quot;&gt;Restart=always&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;plain plain&quot;&gt;RestartSec=10   # Restart service after 10 seconds if dotnet service crashes&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;plain plain&quot;&gt;SyslogIdentifier=dotnet-example&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;plain plain&quot;&gt;User=dotnetuser&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;plain plain&quot;&gt;Group=dotnetuser&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;plain plain&quot;&gt;PrivateTmp=true&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;plain plain&quot;&gt;Environment=ASPNETCORE_ENVIRONMENT=Production # specify environment variable for environment&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;line number17 index16 alt2&quot;&gt;&lt;code class=&quot;plain plain&quot;&gt;Environment=ASPNETCORE_URLS=&lt;a href=&quot;http:&quot;&gt;http://&lt;/a&gt;*:8080 # specify environement variable for listening port&lt;/code&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;plain plain&quot;&gt;[Install]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;plain plain&quot;&gt;WantedBy = multi-user.target&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&quot;selectionShareable&quot;&gt;&lt;span&gt;&lt;span&gt;最后，您可以将ASP.NET Core应用程序作为Linux守护程序运行。&lt;/span&gt;&lt;span&gt;请注意，此应用程序侦听端口8080代替了ASP.NET Core 默认的 5000，因为我在&lt;/span&gt;&lt;/span&gt;&lt;code class=&quot;notranslate&quot;&gt;ASPNETCORE_URLS&lt;/code&gt;&lt;span&gt;&lt;span&gt;单元文件中&lt;/span&gt;&lt;span&gt;指定了环境变量  &lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div&gt;
&lt;div id=&quot;highlighter_120455&quot; class=&quot;syntaxhighlighter redhat-highlight plain&quot;&gt;
&lt;table border=&quot;0&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody readability=&quot;3.4533022014676&quot;&gt;&lt;tr readability=&quot;6.9066044029353&quot;&gt;&lt;td class=&quot;gutter&quot;&gt;
&lt;p&gt;&lt;span&gt;1&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;2&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;3&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;4&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;5&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;6&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;7&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;8&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;9&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;10&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;11&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;12&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;13&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;14&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;15&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;16&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;17&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;18&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;19&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;20&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;21&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;22&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;23&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;24&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;25&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;26&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;27&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;28&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;29&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;30&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;31&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;32&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td class=&quot;code&quot; readability=&quot;38.46410168327&quot;&gt;
&lt;div class=&quot;container&quot; readability=&quot;75.941944349021&quot;&gt;
&lt;p&gt;&lt;code class=&quot;plain plain&quot;&gt;$ systemctl start netcore-web-example.service&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;plain plain&quot;&gt;[tatanaka@localhost WebApp]$ systemc^C&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;plain plain&quot;&gt;[tatanaka@localhost WebApp]$ sudo systemctl status netcore-web-example.service&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;plain plain&quot;&gt;[sudo] password for tatanaka:&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;plain plain&quot;&gt;● netcore-web-example.service - Example for .NET Core WebApp with systemd&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;plain spaces&quot;&gt;   &lt;/code&gt;&lt;code class=&quot;plain plain&quot;&gt;Loaded: loaded (/etc/systemd/system/netcore-web-example.service; disabled; vendor preset: disabled)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;plain spaces&quot;&gt;   &lt;/code&gt;&lt;code class=&quot;plain plain&quot;&gt;Active: active (running) since Sat 2017-02-25 01:02:12 JST; 11s ago&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;plain spaces&quot;&gt; &lt;/code&gt;&lt;code class=&quot;plain plain&quot;&gt;Main PID: 7041 (dotnet)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;plain spaces&quot;&gt;   &lt;/code&gt;&lt;code class=&quot;plain plain&quot;&gt;CGroup: /system.slice/netcore-web-example.service&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;plain spaces&quot;&gt;           &lt;/code&gt;&lt;code class=&quot;plain plain&quot;&gt;└─7041 /opt/rh/rh-dotnetcore11/root/usr/bin/dotnet WebApp.dll&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;plain plain&quot;&gt;Feb 25 01:02:12 localhost.localdomain systemd[1]: Started Example for .NET Core WebApp with systemd.&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;plain plain&quot;&gt;Feb 25 01:02:12 localhost.localdomain systemd[1]: Starting Example for .NET Core WebApp with systemd...&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;plain plain&quot;&gt;Feb 25 01:02:12 localhost.localdomain dotnet-example[7041]: info: Microsoft.Extensions.DependencyInjection.DataProtectionServices[0]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;plain plain&quot;&gt;Feb 25 01:02:12 localhost.localdomain dotnet-example[7041]: User profile is available. Using '/home/dotnetuser/.aspnet/DataProtection-Keys' as key repository; keys will not be encrypted at rest.&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;plain plain&quot;&gt;Feb 25 01:02:13 localhost.localdomain dotnet-example[7041]: Hosting environment: Production&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;plain plain&quot;&gt;Feb 25 01:02:13 localhost.localdomain dotnet-example[7041]: Content root path: /var/SystemdWebExample&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;line number18 index17 alt1&quot;&gt;&lt;code class=&quot;plain plain&quot;&gt;Feb 25 01:02:13 localhost.localdomain dotnet-example[7041]: Now listening on: &lt;span&gt;&lt;a href=&quot;http:&quot;&gt;&lt;span&gt;http://&lt;/span&gt;&lt;/a&gt;*:8080&lt;/span&gt;&lt;/code&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;plain plain&quot;&gt;Feb 25 01:02:13 localhost.localdomain dotnet-example[7041]: Application started. Press Ctrl+C to shut down.&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;plain plain&quot;&gt;$ journalctl -u netcore-web-example -xf&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;plain plain&quot;&gt;-- Logs begin at Mon 2017-02-20 11:58:31 JST. --&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;plain plain&quot;&gt;Feb 25 01:02:36 localhost.localdomain dotnet-example[7041]: info: Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware[2]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;plain plain&quot;&gt;Feb 25 01:02:36 localhost.localdomain dotnet-example[7041]: Sending file. Request path: '/images/banner4.svg'. Physical path: '/var/SystemdWebExample/wwwroot/images/banner4.svg'&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;plain plain&quot;&gt;Feb 25 01:02:36 localhost.localdomain dotnet-example[7041]: info: Microsoft.AspNetCore.Hosting.Internal.WebHost[2]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;plain plain&quot;&gt;Feb 25 01:02:36 localhost.localdomain dotnet-example[7041]: Request finished in 0.1973ms 200 image/svg+xml&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;plain plain&quot;&gt;Feb 25 01:02:36 localhost.localdomain dotnet-example[7041]: info: Microsoft.AspNetCore.Hosting.Internal.WebHost[1]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;plain plain&quot;&gt;Feb 25 01:02:36 localhost.localdomain dotnet-example[7041]: info: Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware[2]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;plain plain&quot;&gt;Feb 25 01:02:36 localhost.localdomain dotnet-example[7041]: Sending file. Request path: '/favicon.ico'. Physical path: '/var/SystemdWebExample/wwwroot/favicon.ico'&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;plain plain&quot;&gt;Feb 25 01:02:36 localhost.localdomain dotnet-example[7041]: info: Microsoft.AspNetCore.Hosting.Internal.WebHost[2]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;plain plain&quot;&gt;Feb 25 01:02:36 localhost.localdomain dotnet-example[7041]: Request finished in 0.5824ms 200 image/x-icon&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&quot;selectionShareable&quot;&gt;&lt;span&gt;&lt;span&gt;然而这对于ASP.NET Core的生产使用来说是不够的。&lt;/span&gt;&lt;span&gt;你可能需要设置一个反向代理服务器，比如Jexus,nginx，防火墙等等。&lt;/span&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;selectionShareable&quot;&gt; &lt;span&gt;&lt;a title=&quot;Writing a Linux daemon in C#&quot; href=&quot;https://developers.redhat.com/blog/2017/06/07/writing-a-linux-daemon-in-c/&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;Writing a Linux daemon in C#&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Mon, 29 Jan 2018 16:15:00 +0000</pubDate>
<dc:creator>Chaunce</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/xiaoliangge/p/8379992.html</dc:identifier>
</item>
<item>
<title>1.MAVEN项目的创建与问题的解决 - softshen</title>
<link>http://www.cnblogs.com/yuyanchina/p/8380171.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/yuyanchina/p/8380171.html</guid>
<description>&lt;p&gt;一、创建一个maven-webapp。（环境：mac和15版本的IDEA）&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;blob:https://i.cnblogs.com/5d0ccca5-b89a-4656-891c-7de9bb4d62ad&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;二、next---&amp;gt;填写groupId(公司单位的名字，你组织的名字)和ArtifactID(有关tomcat，以后用到)。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;blob:https://i.cnblogs.com/ec243742-e2fe-48f4-8fe0-c82a72a4072e&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;三、这里默认，不用做修改。基本上就是一些版本的信息。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;blob:https://i.cnblogs.com/bcd7d962-e39e-415f-9e39-d425829dc982&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;四、填写ProjectName，以后写Application context用的到。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;blob:https://i.cnblogs.com/a1a38b46-9be0-439d-bfaa-7525a1d85f52&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;五、Finish之后等一段时间，额~可以上个厕所或者沏一杯星巴克或者铁观音。这时IDEA会帮你下载项目要使用到的jar包，和maven依赖文件。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;blob:https://i.cnblogs.com/55a7c321-f130-4140-bb40-3ca1f67899f1&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;注：出现以上画面就算成功了一半，别急。还有tomcat和proportion的配置。且看。。&lt;/p&gt;
&lt;p&gt;六、部署tomcat，界面右上角顺着点。&lt;img src=&quot;blob:https://i.cnblogs.com/f602e329-4aab-4873-b633-f413af1b4bc8&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;blob:https://i.cnblogs.com/3d50794b-b947-4bc8-ad6f-a7b34e1966c3&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;修改tomcat的昵称，作为识别，这时注意下方的warning：no artifacts configured。点进去fix。&lt;/p&gt;
&lt;p&gt;七、进入到maven配置，就是为了这个该死的artifacts。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;blob:https://i.cnblogs.com/dd30337c-90ab-4e7f-9464-8f533ebbea5f&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;在Project Settings里，选择Modules，点击加号，点选Web，建立一个Web。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;blob:https://i.cnblogs.com/28363e95-3393-4761-8fd3-a7499e0910fe&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;此时，注意&lt;img src=&quot;blob:https://i.cnblogs.com/83e46586-af9f-43f8-893c-fed46e674df9&quot; alt=&quot;&quot; width=&quot;694&quot; height=&quot;50&quot;/&gt;，即刻点击Creat Artifact。然后，&lt;/p&gt;
&lt;p&gt;Artifacts--&amp;gt;add(+)--&amp;gt;web.....--&amp;gt;Form Modules，选择新建的Modules。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;blob:https://i.cnblogs.com/98729758-2b41-45b5-8fbb-d4856e7fdf24&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;blob:https://i.cnblogs.com/70748f4b-a2db-4f7b-ab3e-c9fb9f7b34e3&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这个该死的&lt;img src=&quot;blob:https://i.cnblogs.com/7ddcc9b7-d5cb-428b-81d1-57d033f8523a&quot; alt=&quot;&quot;/&gt;也出现了。&lt;/p&gt;
&lt;p&gt;八、点击OK，出现让你选择哪一个Artifacts，选择你刚才新建的带有Artifacts的，重点：填写界面的Application context（应用的上下文，说白了，就是tomcat和web通过哪一个webapp建立联系，tomcat上的web很多，这一步确定下来。）的路径，前面提过，就是项目的名字作为识别，抄上就行。&lt;img src=&quot;blob:https://i.cnblogs.com/faa008e6-429a-47fc-9860-b3656da76263&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;九、点击OK。现在运行会出错。别急---，右键项目reimport一下。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;blob:https://i.cnblogs.com/13f507f2-4ec4-43d9-8959-50face2f1585&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;blob:https://i.cnblogs.com/f8fbf87c-5120-47fa-adfd-ce688e1978a4&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;Index.jsp里面的默认写的入坑hello world已经在chrome上打印输出了。&lt;/p&gt;
&lt;p&gt;在设置tomcat里面可以设置自己顺手的浏览器。&lt;/p&gt;

&lt;p&gt;至此，一个maven项目在你的IDEA上已经完成了创建。&lt;/p&gt;

&lt;p&gt;感谢&lt;img src=&quot;blob:https://i.cnblogs.com/fe8488e1-0021-4838-a8a1-ab66d6fec7f5&quot; alt=&quot;&quot;/&gt;。哈哈。&lt;/p&gt;

</description>
<pubDate>Mon, 29 Jan 2018 16:15:00 +0000</pubDate>
<dc:creator>softshen</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/yuyanchina/p/8380171.html</dc:identifier>
</item>
<item>
<title>JavaScript对象的valueOf()方法 - weiqinl</title>
<link>http://www.cnblogs.com/weiqinl/p/8380060.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/weiqinl/p/8380060.html</guid>
<description>&lt;p&gt;js对象中的&lt;code&gt;valueOf()&lt;/code&gt;方法和&lt;code&gt;toString()&lt;/code&gt;方法非常类似，但是，当需要返回对象的原始值而非字符串的时候才调用它，尤其是转换为数字的时候。如果在需要使用原始值的上下文中使用了对象，JavaScript就会自动调用&lt;code&gt;valueOf()&lt;/code&gt;方法。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;valueOf()&lt;/code&gt;方法是&lt;code&gt;Object&lt;/code&gt;的原型方法，每个对象都具有该方法，但是各对象返回的值有一定的区别。我们一起来看看。&lt;/p&gt;
&lt;h2 id=&quot;object.prototype.valueof&quot;&gt;Object.prototype.valueOf()&lt;/h2&gt;
&lt;p&gt;JavaScript调用&lt;code&gt;valueOf()&lt;/code&gt;方法将对象转换为原始值。你很少需要自己调用&lt;code&gt;valueOf()&lt;/code&gt;方法；&lt;/p&gt;
&lt;p&gt;默认情况下，&lt;code&gt;valueOf()&lt;/code&gt;方法由Object后面的每个对象继承。每个内置的核心对象都会覆盖此方法以放回适当的值。&lt;br/&gt;如果对象没有原始值，则&lt;code&gt;valueOf()&lt;/code&gt;将返回对象本身。&lt;/p&gt;
&lt;p&gt;你可以在自己的代码中使用&lt;code&gt;valueOf()&lt;/code&gt;将内置对象转换为原始值。创建自定义对象时，可以覆盖&lt;code&gt;Object.prototype.valueOf()&lt;/code&gt;来调用自定义方法，而不是默认&lt;code&gt;Object&lt;/code&gt;方法。&lt;/p&gt;
&lt;h3 id=&quot;覆盖自定义对象的valueof方法&quot;&gt;覆盖自定义对象的&lt;code&gt;valueOf()&lt;/code&gt;方法&lt;/h3&gt;
&lt;p&gt;你可以创建一个取代&lt;code&gt;valueOf()&lt;/code&gt;方法的函数，你的方法必须不能传入参数。&lt;br/&gt;假设你有个对象叫&lt;code&gt;MyNumberType&lt;/code&gt;而你想为它创建一个&lt;code&gt;valueOf()&lt;/code&gt;方法。下面的代码为&lt;code&gt;valueOf()&lt;/code&gt;方法赋予了一个自定义函数:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;MyNumberType.prototype.valueOf = function() { return customPrimitiveValue; };&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;有了这样的一个方法，下一次每当&lt;code&gt;MyNumberType&lt;/code&gt;要被转换为原始类型值时，JavaScript在此之前会自动调用自定义的&lt;code&gt;valueOf()&lt;/code&gt;方法。&lt;br/&gt;&lt;code&gt;valueOf()&lt;/code&gt;方法一般都会被JavaScript自动调用，但你也可以像下面代码那样自己调用：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;myNumberType.valueOf()&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;string.prototype.valueof&quot;&gt;String.prototype.valueOf()&lt;/h2&gt;
&lt;p&gt;语法：&lt;code&gt;strObj.valueOf()&lt;/code&gt;&lt;br/&gt;返回值：表示给定&lt;code&gt;String&lt;/code&gt;对象的原始值&lt;br/&gt;说明：&lt;code&gt;valueOf()&lt;/code&gt;方法返回一个&lt;code&gt;String&lt;/code&gt;对象的原始值，该值等同于&lt;code&gt;String.prototype.toString()&lt;/code&gt;。&lt;br/&gt;该方法通常在JavaScript内部被调用，而不是在代码里显示调用。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;let x = new String('Hello world')
console.log(x.valueOf())   // Hello world&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/564792/201801/564792-20180129235451546-2056772811.png&quot; alt=&quot;String.prototype.valueOf()&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;date.prototype.valueof&quot;&gt;Date.prototype.valueOf()&lt;/h2&gt;
&lt;p&gt;语法：&lt;code&gt;dataObj.valueOf()&lt;/code&gt;&lt;br/&gt;返回值：表示给定&lt;code&gt;Date&lt;/code&gt;对象的原始值&lt;br/&gt;说明：&lt;code&gt;valueOf()&lt;/code&gt;方法返回以数值格式表示的一个&lt;code&gt;Date&lt;/code&gt;对象的原始值。该值从1970年1月1日0时0分0秒（UTC，即协调世界时）到该日期对象所代表时间的毫秒数。&lt;br/&gt;该方法的功能和&lt;code&gt;Date.prototype.getTime()&lt;/code&gt;方法一样。&lt;br/&gt;该方法通常在JavaScript内部调用，而不是在代码中显示调用。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;var x = new Date(2018, 1, 12)
var myVar = x.valueOf()
console.log(myVar) // 1518364800000&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;number.prototype.valueof&quot;&gt;Number.prototype.valueOf()&lt;/h2&gt;
&lt;p&gt;语法： &lt;code&gt;numObj.valueOf()&lt;/code&gt;&lt;br/&gt;返回值：表示给定&lt;code&gt;Number&lt;/code&gt;对象的原始值。&lt;br/&gt;说明：该方法通常在JavaScript内部调用，而不是在代码中显示调用。覆盖&lt;code&gt;Object.prototype.valueOf()&lt;/code&gt;方法&lt;br/&gt;案例：&lt;br/&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/564792/201801/564792-20180129235430343-552143799.png&quot; alt=&quot;Number.prototype.valueOf()&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;boolean.prototype.valueof&quot;&gt;Boolean.prototype.valueOf()&lt;/h2&gt;
&lt;p&gt;语法：&lt;code&gt;bool.valueOf()&lt;/code&gt;&lt;br/&gt;返回值： 返回给定&lt;code&gt;Boolean&lt;/code&gt;对象的原始值&lt;br/&gt;说明： &lt;code&gt;Boolean&lt;/code&gt;的&lt;code&gt;valueOf()&lt;/code&gt;方法返回一个&lt;code&gt;Boolean&lt;/code&gt;字面量的原始值作为布尔数据类型。该方法通常在JavaScript内部调用，而不是在代码中显示调用。&lt;br/&gt;案例：&lt;br/&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/564792/201801/564792-20180129235413140-100092005.png&quot; alt=&quot;Boolean.prototype.valueOf()&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;symbol.prototype.valueof&quot;&gt;Symbol.prototype.valueOf()&lt;/h2&gt;
&lt;p&gt;语法： &lt;code&gt;Symbol().valueOf()&lt;/code&gt;&lt;br/&gt;返回值：返回给定&lt;code&gt;Symbol&lt;/code&gt;对象的原始值&lt;br/&gt;说明：&lt;code&gt;Symbol&lt;/code&gt;的&lt;code&gt;valueOf()&lt;/code&gt;方法返回&lt;code&gt;Symbol&lt;/code&gt;对象的原始值作为&lt;code&gt;Symbol&lt;/code&gt;数据类型。JavaScript调用&lt;code&gt;valueOf()&lt;/code&gt;方法将对象转换为原始值。你很少需要自己调用&lt;code&gt;valueOf()&lt;/code&gt;方法。当遇到期望有原始值的对象时，JavaScript会自动调用它。&lt;br/&gt;案例：&lt;br/&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/564792/201801/564792-20180129235355750-1139685875.png&quot; alt=&quot;Symbol.prototype.valueOf()&quot;/&gt;&lt;br/&gt;[完]&lt;/p&gt;
</description>
<pubDate>Mon, 29 Jan 2018 15:57:00 +0000</pubDate>
<dc:creator>weiqinl</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/weiqinl/p/8380060.html</dc:identifier>
</item>
<item>
<title>dubbo源码—service reply - lacker</title>
<link>http://www.cnblogs.com/sunshine-2015/p/8379902.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/sunshine-2015/p/8379902.html</guid>
<description>&lt;p&gt;dubbo通过netty将请求发送到provider的时候，provider之前已经启动好的NettyServer监听指定端口的时候会收到来自consumer的请求，将通过网络发送来的二进制编码成Request交给上层处理。dubbo从Request中取出调用信息，找到之前的Invoker，然后经过filter，最后通过代理调用到提供服务的方法。&lt;/p&gt;
&lt;p&gt;provider处理请求的调用堆栈如下：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;41&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;sayHe110:&lt;span class=&quot;dv&quot;&gt;18&lt;/span&gt;, &lt;span class=&quot;fu&quot;&gt;TestDubb0Servicelmpl&lt;/span&gt; (com.&lt;span class=&quot;fu&quot;&gt;test&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;service&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;impl&lt;/span&gt;) 
invokeMethod:-&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;fu&quot;&gt;Wrapper1&lt;/span&gt; (com. alibabadubbo. common.&lt;span class=&quot;fu&quot;&gt;bytecode&lt;/span&gt;) 
dolnvoke:&lt;span class=&quot;dv&quot;&gt;46&lt;/span&gt;, JavassistProxyFactory$&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt; (com.&lt;span class=&quot;fu&quot;&gt;alibaba&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;dubbo&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;rpc&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;proxy&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;javassist&lt;/span&gt;) 
invoke:&lt;span class=&quot;dv&quot;&gt;72&lt;/span&gt;, &lt;span class=&quot;fu&quot;&gt;AbstractProxylnvoker&lt;/span&gt; (com.&lt;span class=&quot;fu&quot;&gt;alibaba&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;dubbo&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;rpc&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;proxy&lt;/span&gt;) 
invoke:&lt;span class=&quot;dv&quot;&gt;53&lt;/span&gt;, &lt;span class=&quot;fu&quot;&gt;InvokerWrapper&lt;/span&gt; (com.&lt;span class=&quot;fu&quot;&gt;alibaba&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;dubbo&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;rpc&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;protocol&lt;/span&gt;) 
invoke:&lt;span class=&quot;dv&quot;&gt;64&lt;/span&gt;, ExceptionFilter .&lt;span class=&quot;fu&quot;&gt;com&lt;/span&gt; alibaba.&lt;span class=&quot;fu&quot;&gt;dubbo&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;rpc&lt;/span&gt; filter) 
invoke:&lt;span class=&quot;dv&quot;&gt;91&lt;/span&gt;, ProtocolFilterWrapper$&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt; (com.&lt;span class=&quot;fu&quot;&gt;alibaba&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;dubbo&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;rpc&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;protocol&lt;/span&gt;) 
invoke:&lt;span class=&quot;dv&quot;&gt;64&lt;/span&gt;, MonitorFilter .&lt;span class=&quot;fu&quot;&gt;com&lt;/span&gt; alibaba.&lt;span class=&quot;fu&quot;&gt;dubbo&lt;/span&gt;. monitor.&lt;span class=&quot;fu&quot;&gt;support&lt;/span&gt;) 
invoke:&lt;span class=&quot;dv&quot;&gt;91&lt;/span&gt;, ProtocolFilterWrapper$&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt; (com.&lt;span class=&quot;fu&quot;&gt;alibaba&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;dubbo&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;rpc&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;protocol&lt;/span&gt;) 
invoke:&lt;span class=&quot;dv&quot;&gt;42&lt;/span&gt;, TimeoutFilter .&lt;span class=&quot;fu&quot;&gt;com&lt;/span&gt; alibaba.&lt;span class=&quot;fu&quot;&gt;dubbo&lt;/span&gt;. rpc.&lt;span class=&quot;fu&quot;&gt;filter&lt;/span&gt;) 
invoke:&lt;span class=&quot;dv&quot;&gt;91&lt;/span&gt;, ProtocolFilterWrapper$&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt; (com.&lt;span class=&quot;fu&quot;&gt;alibaba&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;dubbo&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;rpc&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;protocol&lt;/span&gt;) 
invoke:&lt;span class=&quot;dv&quot;&gt;49&lt;/span&gt;, TokenFilter .&lt;span class=&quot;fu&quot;&gt;com&lt;/span&gt; alibaba.&lt;span class=&quot;fu&quot;&gt;dubbo&lt;/span&gt;. roc. filter) 
invoke:&lt;span class=&quot;dv&quot;&gt;91&lt;/span&gt;, ProtocolFilterWrapper$&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt; (com.&lt;span class=&quot;fu&quot;&gt;alibaba&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;dubbo&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;rpc&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;protocol&lt;/span&gt;) 
invoke:&lt;span class=&quot;dv&quot;&gt;78&lt;/span&gt;, TraceFilter .&lt;span class=&quot;fu&quot;&gt;com&lt;/span&gt; alibaba dubbo. roc. protocol.&lt;span class=&quot;fu&quot;&gt;dubbo&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;filter&lt;/span&gt;) 
invoke:&lt;span class=&quot;dv&quot;&gt;91&lt;/span&gt;, ProtocolFilterWrapper$&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt; (com.&lt;span class=&quot;fu&quot;&gt;alibaba&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;dubbo&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;rpc&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;protocol&lt;/span&gt;) 
invoke:&lt;span class=&quot;dv&quot;&gt;60&lt;/span&gt;, ContextFilter .&lt;span class=&quot;fu&quot;&gt;com&lt;/span&gt; alibaba.&lt;span class=&quot;fu&quot;&gt;dubbo&lt;/span&gt;. roc. filter) 
invoke:&lt;span class=&quot;dv&quot;&gt;91&lt;/span&gt;, ProtocolFilterWrapper$&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt; (com.&lt;span class=&quot;fu&quot;&gt;alibaba&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;dubbo&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;rpc&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;protocol&lt;/span&gt;) 
invoke:&lt;span class=&quot;dv&quot;&gt;132&lt;/span&gt;, GenericFilter .&lt;span class=&quot;fu&quot;&gt;com&lt;/span&gt; alibaba.&lt;span class=&quot;fu&quot;&gt;dubbo&lt;/span&gt;. roc. filter) 
invoke:&lt;span class=&quot;dv&quot;&gt;91&lt;/span&gt;, ProtocolFilterWrapper$&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt; (com.&lt;span class=&quot;fu&quot;&gt;alibaba&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;dubbo&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;rpc&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;protocol&lt;/span&gt;) 
invoke:&lt;span class=&quot;dv&quot;&gt;38&lt;/span&gt;, ClassLoaderFilter .&lt;span class=&quot;fu&quot;&gt;com&lt;/span&gt; alibaba dubbo.&lt;span class=&quot;fu&quot;&gt;rpc&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;filter&lt;/span&gt;) 
invoke:&lt;span class=&quot;dv&quot;&gt;91&lt;/span&gt;, ProtocolFilterWrapper$&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt; (com.&lt;span class=&quot;fu&quot;&gt;alibaba&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;dubbo&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;rpc&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;protocol&lt;/span&gt;) 
invoke:&lt;span class=&quot;dv&quot;&gt;38&lt;/span&gt;, EchoFilter .&lt;span class=&quot;fu&quot;&gt;com&lt;/span&gt; alibaba dubbo. rpc filter) 
invoke:&lt;span class=&quot;dv&quot;&gt;91&lt;/span&gt;, ProtocolFilterWrapper$&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt; (com.&lt;span class=&quot;fu&quot;&gt;alibaba&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;dubbo&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;rpc&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;protocol&lt;/span&gt;) 
reply:&lt;span class=&quot;dv&quot;&gt;108&lt;/span&gt;, DubboProtocol$&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt; .&lt;span class=&quot;fu&quot;&gt;com&lt;/span&gt; alibaba dubbo.&lt;span class=&quot;fu&quot;&gt;rpcprotocol&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;dubbo&lt;/span&gt;) 
handleRequest:&lt;span class=&quot;dv&quot;&gt;86&lt;/span&gt;, &lt;span class=&quot;fu&quot;&gt;HeaderExchangeHandler&lt;/span&gt; (com.&lt;span class=&quot;fu&quot;&gt;alibaba&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;dubbo&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;remoting&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;exchange&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;support&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;header&lt;/span&gt;) 
received:&lt;span class=&quot;dv&quot;&gt;172&lt;/span&gt;, &lt;span class=&quot;fu&quot;&gt;HeaderExchangeHandler&lt;/span&gt; (com.&lt;span class=&quot;fu&quot;&gt;alibaba&lt;/span&gt; dubbo. remoting. exchange.&lt;span class=&quot;fu&quot;&gt;support&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;header&lt;/span&gt;) 
received:&lt;span class=&quot;dv&quot;&gt;52&lt;/span&gt;, &lt;span class=&quot;fu&quot;&gt;DecodeHandler&lt;/span&gt; (com.&lt;span class=&quot;fu&quot;&gt;alibaba&lt;/span&gt; dubbo.&lt;span class=&quot;fu&quot;&gt;remoting&lt;/span&gt;. transport) 
run:&lt;span class=&quot;dv&quot;&gt;82&lt;/span&gt;, &lt;span class=&quot;fu&quot;&gt;ChannelEventRunnable&lt;/span&gt; (com.&lt;span class=&quot;fu&quot;&gt;alibaba&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;dubbo&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;remoting&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;transport&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;dispatcher&lt;/span&gt;) 
runWorker:&lt;span class=&quot;dv&quot;&gt;1142&lt;/span&gt;, ThreadPoolExecutor (java.&lt;span class=&quot;fu&quot;&gt;util&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;concurrent&lt;/span&gt;) 
run:&lt;span class=&quot;dv&quot;&gt;617&lt;/span&gt;, ThreadPoolExecutor$&lt;span class=&quot;fu&quot;&gt;Worker&lt;/span&gt; (java.&lt;span class=&quot;fu&quot;&gt;util&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;concurrent&lt;/span&gt;) 
run:&lt;span class=&quot;dv&quot;&gt;745&lt;/span&gt;, Thread (java.&lt;span class=&quot;fu&quot;&gt;lang&lt;/span&gt;) &lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;从调用堆栈基本可以看出provider整个处理请求的过程，比较简单，但是需要知道为什么调用过程是这样的？其中关键类是什么时候在初始化的？怎么初始化的？&lt;/p&gt;
&lt;p&gt;接下来解决一下问题：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;为什么是从ChannelEventRunnable开始的？谁初始化的ChannelEventRunnable？ChannelEventRunnable作用是什么？&lt;/li&gt;
&lt;li&gt;为什么会调用到上面堆栈中的几个handler（也就是handler是怎么初始化的）?&lt;/li&gt;
&lt;li&gt;filter链怎么初始化的？&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;本来这些问题在export的时候如果仔细查看源码已经可以解决了，但是真正用到的时候是处理请求的时候，所以这里算是补上之前export过程的一些关键步骤。&lt;/p&gt;
&lt;h3 id=&quot;channeleventrunnable初始化&quot;&gt;ChannelEventRunnable初始化&lt;/h3&gt;
&lt;p&gt;上面的调用堆栈中，是在线程池中一个单独的线程来处理请求，所以先从线程池中调用的线程开始，ChannelEventRunnable的构造过程。&lt;/p&gt;
&lt;p&gt;接着前面provider export的时候会启动NettyServer，所以ChannelEventRunnable的创建也从NettyServer的启动说起，ChannelEventRunnable被初始化的过程会涉及到netty的部分内容：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;NettyServer#doOpen，NettyServer启动的时候会创建NioServerSocketChannelFactory，该factory负责创建netty放入所有channel&lt;/li&gt;
&lt;li&gt;在NioServerSocketChannelFactory构造方法中会初始化NioWorkerPool，在该类的构造方法中创建NioWorker&lt;/li&gt;
&lt;li&gt;在创建NioWorker的过程中，调用超类AbstractNioSelector的构造方法&lt;/li&gt;
&lt;/ol&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;17&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;co&quot;&gt;// NioWorker构造方法中会调用超类AbstractNioSelector的构造方法&lt;/span&gt;
&lt;span class=&quot;fu&quot;&gt;AbstractNioSelector&lt;/span&gt;(Executor executor, ThreadNameDeterminer determiner) {
  &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;executor&lt;/span&gt; = executor;
  &lt;span class=&quot;fu&quot;&gt;openSelector&lt;/span&gt;(determiner);
}

&lt;span class=&quot;co&quot;&gt;// org.jboss.netty.channel.socket.nio.AbstractNioSelector#openSelector&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;openSelector&lt;/span&gt;(ThreadNameDeterminer determiner) {
  &lt;span class=&quot;kw&quot;&gt;try&lt;/span&gt; {
    &lt;span class=&quot;co&quot;&gt;// open selector&lt;/span&gt;
    selector = SelectorUtil.&lt;span class=&quot;fu&quot;&gt;open&lt;/span&gt;();
  } &lt;span class=&quot;kw&quot;&gt;catch&lt;/span&gt; (Throwable t) {
    &lt;span class=&quot;kw&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;ChannelException&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;Failed to create a selector.&quot;&lt;/span&gt;, t);
  }

  &lt;span class=&quot;co&quot;&gt;// Start the worker thread with the new Selector.&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;boolean&lt;/span&gt; success = &lt;span class=&quot;kw&quot;&gt;false&lt;/span&gt;;
  &lt;span class=&quot;kw&quot;&gt;try&lt;/span&gt; {
    &lt;span class=&quot;co&quot;&gt;// new一个thread，将当前初始化的NioWorker作为入参，也就是说最终要运行的是NioWorker.run&lt;/span&gt;
    &lt;span class=&quot;co&quot;&gt;// 这个start方法里面会将新建的这个线程放到线程池中运行&lt;/span&gt;
    &lt;span class=&quot;co&quot;&gt;// 这里的executor就是new NioServerSocketChannelFactory时候的入参worker，也就是worker线程池&lt;/span&gt;
    DeadLockProofWorker.&lt;span class=&quot;fu&quot;&gt;start&lt;/span&gt;(executor, &lt;span class=&quot;fu&quot;&gt;newThreadRenamingRunnable&lt;/span&gt;(id, determiner));
    success = &lt;span class=&quot;kw&quot;&gt;true&lt;/span&gt;;
  } &lt;span class=&quot;kw&quot;&gt;finally&lt;/span&gt; {
    &lt;span class=&quot;co&quot;&gt;// 省略中间代码...&lt;/span&gt;
  }
  assert selector != &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt; &amp;amp;&amp;amp; selector.&lt;span class=&quot;fu&quot;&gt;isOpen&lt;/span&gt;();
}

&lt;span class=&quot;co&quot;&gt;// org.jboss.netty.channel.socket.nio.AbstractNioWorker#newThreadRenamingRunnable&lt;/span&gt;
&lt;span class=&quot;fu&quot;&gt;@Override&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;protected&lt;/span&gt; ThreadRenamingRunnable &lt;span class=&quot;fu&quot;&gt;newThreadRenamingRunnable&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; id, ThreadNameDeterminer determiner) {
  &lt;span class=&quot;co&quot;&gt;// 这里的this就是初始化的NioWorker&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;ThreadRenamingRunnable&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&quot;New I/O worker #&quot;&lt;/span&gt; + id, determiner);
}

&lt;span class=&quot;co&quot;&gt;// org.jboss.netty.channel.socket.nio.NioWorker#run&lt;/span&gt;
&lt;span class=&quot;fu&quot;&gt;@Override&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;run&lt;/span&gt;() {
  &lt;span class=&quot;co&quot;&gt;// 上面DeadLockProofWorker.start里面启动的线程会调用这个run方法&lt;/span&gt;
  &lt;span class=&quot;co&quot;&gt;// 这里调用了超类的run方法，最终会调用到org.jboss.netty.channel.socket.nio.AbstractNioSelector#run&lt;/span&gt;
  &lt;span class=&quot;co&quot;&gt;// AbstractNioSelector#run&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;super&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;run&lt;/span&gt;();
  recvBufferPool.&lt;span class=&quot;fu&quot;&gt;releaseExternalResources&lt;/span&gt;();
}

&lt;span class=&quot;co&quot;&gt;// AbstractNioSelector#run&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;// 这个方法是NioWorker真正处理逻辑的地方，死循环调用select接受IO事件，然后处理&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;run&lt;/span&gt;() {
  thread = Thread.&lt;span class=&quot;fu&quot;&gt;currentThread&lt;/span&gt;();

  &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; selectReturnsImmediately = &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;;
  Selector selector = &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;selector&lt;/span&gt;;

  &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (selector == &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;) {
    &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt;;
  }
  &lt;span class=&quot;co&quot;&gt;// use 80% of the timeout for measure&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;long&lt;/span&gt; minSelectTimeout = SelectorUtil.&lt;span class=&quot;fu&quot;&gt;SELECT_TIMEOUT_NANOS&lt;/span&gt; * &lt;span class=&quot;dv&quot;&gt;80&lt;/span&gt; / &lt;span class=&quot;dv&quot;&gt;100&lt;/span&gt;;
  &lt;span class=&quot;dt&quot;&gt;boolean&lt;/span&gt; wakenupFromLoop = &lt;span class=&quot;kw&quot;&gt;false&lt;/span&gt;;
  &lt;span class=&quot;kw&quot;&gt;for&lt;/span&gt; (;;) {
    wakenUp.&lt;span class=&quot;fu&quot;&gt;set&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;false&lt;/span&gt;);

    &lt;span class=&quot;kw&quot;&gt;try&lt;/span&gt; {
      &lt;span class=&quot;dt&quot;&gt;long&lt;/span&gt; beforeSelect = System.&lt;span class=&quot;fu&quot;&gt;nanoTime&lt;/span&gt;();
      &lt;span class=&quot;co&quot;&gt;// 监听I/O事件发生&lt;/span&gt;
      &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; selected = &lt;span class=&quot;fu&quot;&gt;select&lt;/span&gt;(selector);
   
      &lt;span class=&quot;co&quot;&gt;// 省略中间代码...&lt;/span&gt;
      
      &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (shutdown) {
        &lt;span class=&quot;co&quot;&gt;// 省略中间代码...&lt;/span&gt;
      } &lt;span class=&quot;kw&quot;&gt;else&lt;/span&gt; {
        &lt;span class=&quot;co&quot;&gt;// 处理I/O事件&lt;/span&gt;
        &lt;span class=&quot;fu&quot;&gt;process&lt;/span&gt;(selector);
      }
    } &lt;span class=&quot;kw&quot;&gt;catch&lt;/span&gt; (Throwable t) {
      &lt;span class=&quot;co&quot;&gt;// 省略中间代码...&lt;/span&gt;
    }
  }
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;接下来到初始化ChannelEventRunnable的调用堆栈&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/846961/201801/846961-20180129230056843-996543725.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;终于到了ChannelEventRunnable开始初始化的地方，所有的ChannelEventRunnable都是在AllChannelHandler中完成初始化，并加入到线程池中执行，下面以收到connect事件为例&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;15&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;connected&lt;/span&gt;(Channel channel) &lt;span class=&quot;kw&quot;&gt;throws&lt;/span&gt; RemotingException {
  ExecutorService cexecutor = &lt;span class=&quot;fu&quot;&gt;getExecutorService&lt;/span&gt;(); 
  &lt;span class=&quot;kw&quot;&gt;try&lt;/span&gt;{
    &lt;span class=&quot;co&quot;&gt;// 初始化ChannelEventRunnable并将其加入线程池&lt;/span&gt;
    &lt;span class=&quot;co&quot;&gt;// 这里的线程池是com.alibaba.dubbo.common.threadpool.ThreadPool这个扩展，默认配置的是&quot;fixed&quot;，也就是FixedThreadPool&lt;/span&gt;
    cexecutor.&lt;span class=&quot;fu&quot;&gt;execute&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;ChannelEventRunnable&lt;/span&gt;(channel, handler ,ChannelState.&lt;span class=&quot;fu&quot;&gt;CONNECTED&lt;/span&gt;));
  }&lt;span class=&quot;kw&quot;&gt;catch&lt;/span&gt; (Throwable t) {
    &lt;span class=&quot;kw&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; ExecutionException(&lt;span class=&quot;st&quot;&gt;&quot;connect event&quot;&lt;/span&gt;, channel, &lt;span class=&quot;fu&quot;&gt;getClass&lt;/span&gt;()+&lt;span class=&quot;st&quot;&gt;&quot; error when process connected event .&quot;&lt;/span&gt; , t);
  }
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;处理请求&quot;&gt;处理请求&lt;/h3&gt;
&lt;p&gt;上面最终启动了ChannelEventRunnable线程，在这个线程中会最终调用到我们的SayHello方法中，这个类负责分类处理各种接收到的I/O事件&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;28&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;co&quot;&gt;// com.alibaba.dubbo.remoting.transport.dispatcher.ChannelEventRunnable#run&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;run&lt;/span&gt;() {
  &lt;span class=&quot;kw&quot;&gt;switch&lt;/span&gt; (state) {
    &lt;span class=&quot;kw&quot;&gt;case&lt;/span&gt; CONNECTED:
      &lt;span class=&quot;kw&quot;&gt;try&lt;/span&gt;{
        &lt;span class=&quot;co&quot;&gt;// 接收到连接&lt;/span&gt;
        handler.&lt;span class=&quot;fu&quot;&gt;connected&lt;/span&gt;(channel);
      }&lt;span class=&quot;kw&quot;&gt;catch&lt;/span&gt; (Exception e) {
        logger.&lt;span class=&quot;fu&quot;&gt;warn&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;ChannelEventRunnable handle &quot;&lt;/span&gt; + state + &lt;span class=&quot;st&quot;&gt;&quot; operation error, channel is &quot;&lt;/span&gt; + channel, e);
      }
      &lt;span class=&quot;kw&quot;&gt;break&lt;/span&gt;;
    &lt;span class=&quot;kw&quot;&gt;case&lt;/span&gt; DISCONNECTED:
      &lt;span class=&quot;kw&quot;&gt;try&lt;/span&gt;{
        &lt;span class=&quot;co&quot;&gt;// 连接断开&lt;/span&gt;
        handler.&lt;span class=&quot;fu&quot;&gt;disconnected&lt;/span&gt;(channel);
      }&lt;span class=&quot;kw&quot;&gt;catch&lt;/span&gt; (Exception e) {
        logger.&lt;span class=&quot;fu&quot;&gt;warn&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;ChannelEventRunnable handle &quot;&lt;/span&gt; + state + &lt;span class=&quot;st&quot;&gt;&quot; operation error, channel is &quot;&lt;/span&gt; + channel, e);
      }
      &lt;span class=&quot;kw&quot;&gt;break&lt;/span&gt;;
    &lt;span class=&quot;kw&quot;&gt;case&lt;/span&gt; SENT:
      &lt;span class=&quot;kw&quot;&gt;try&lt;/span&gt;{
        &lt;span class=&quot;co&quot;&gt;// 发送数据&lt;/span&gt;
        handler.&lt;span class=&quot;fu&quot;&gt;sent&lt;/span&gt;(channel,message);
      }&lt;span class=&quot;kw&quot;&gt;catch&lt;/span&gt; (Exception e) {
        logger.&lt;span class=&quot;fu&quot;&gt;warn&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;ChannelEventRunnable handle &quot;&lt;/span&gt; + state + &lt;span class=&quot;st&quot;&gt;&quot; operation error, channel is &quot;&lt;/span&gt; + channel
                    + &lt;span class=&quot;st&quot;&gt;&quot;, message is &quot;&lt;/span&gt;+ message,e);
      }
      &lt;span class=&quot;kw&quot;&gt;break&lt;/span&gt;;
    &lt;span class=&quot;kw&quot;&gt;case&lt;/span&gt; RECEIVED:
      &lt;span class=&quot;kw&quot;&gt;try&lt;/span&gt;{
        &lt;span class=&quot;co&quot;&gt;// 收到数据&lt;/span&gt;
        handler.&lt;span class=&quot;fu&quot;&gt;received&lt;/span&gt;(channel, message);
      }&lt;span class=&quot;kw&quot;&gt;catch&lt;/span&gt; (Exception e) {
        logger.&lt;span class=&quot;fu&quot;&gt;warn&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;ChannelEventRunnable handle &quot;&lt;/span&gt; + state + &lt;span class=&quot;st&quot;&gt;&quot; operation error, channel is &quot;&lt;/span&gt; + channel
                    + &lt;span class=&quot;st&quot;&gt;&quot;, message is &quot;&lt;/span&gt;+ message,e);
      }
      &lt;span class=&quot;kw&quot;&gt;break&lt;/span&gt;;
    &lt;span class=&quot;kw&quot;&gt;case&lt;/span&gt; CAUGHT:
      &lt;span class=&quot;kw&quot;&gt;try&lt;/span&gt;{
        &lt;span class=&quot;co&quot;&gt;// 处理异常&lt;/span&gt;
        handler.&lt;span class=&quot;fu&quot;&gt;caught&lt;/span&gt;(channel, exception);
      }&lt;span class=&quot;kw&quot;&gt;catch&lt;/span&gt; (Exception e) {
        logger.&lt;span class=&quot;fu&quot;&gt;warn&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;ChannelEventRunnable handle &quot;&lt;/span&gt; + state + &lt;span class=&quot;st&quot;&gt;&quot; operation error, channel is &quot;&lt;/span&gt;+ channel
                    + &lt;span class=&quot;st&quot;&gt;&quot;, message is: &quot;&lt;/span&gt; + message + &lt;span class=&quot;st&quot;&gt;&quot;, exception is &quot;&lt;/span&gt; + exception,e);
      }
      &lt;span class=&quot;kw&quot;&gt;break&lt;/span&gt;;
    &lt;span class=&quot;kw&quot;&gt;default&lt;/span&gt;:
      logger.&lt;span class=&quot;fu&quot;&gt;warn&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;unknown state: &quot;&lt;/span&gt; + state + &lt;span class=&quot;st&quot;&gt;&quot;, message is &quot;&lt;/span&gt; + message);
  }
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上面通过调用handler的相关方法来处理的，接下来看看handler是什么？&lt;/p&gt;
&lt;h3 id=&quot;handler初始化&quot;&gt;handler初始化&lt;/h3&gt;
&lt;p&gt;从最上面的调用堆栈里面有这些handler&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;com.&lt;span class=&quot;fu&quot;&gt;alibaba&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;dubbo&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;remoting&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;transport&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;DecodeHandler&lt;/span&gt;#DecodeHandler
com.&lt;span class=&quot;fu&quot;&gt;alibaba&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;dubbo&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;remoting&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;exchange&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;support&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;header&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;HeaderExchangeHandler&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;// 最上面调用堆栈中com alibaba dubbo.rpcprotocol.dubbo.DubboProtocol$1.reply其实就是线面这个接口的实现类&lt;/span&gt;
com.&lt;span class=&quot;fu&quot;&gt;alibaba&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;dubbo&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;remoting&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;exchange&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;ExchangeHandler&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;之前在dubbo export中说过启动NettyServer的调用堆栈，但是并没有详细看每一个调用方法，这里把相关重要的方法拿出来&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;14&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;co&quot;&gt;// com.alibaba.dubbo.rpc.protocol.dubbo.DubboProtocol#requestHandler&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; ExchangeHandler requestHandler = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;ExchangeHandlerAdapter&lt;/span&gt;() {
  &lt;span class=&quot;co&quot;&gt;// 这些请求received、connected、disconnected最终都会调用下面这个方法处理&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; Object &lt;span class=&quot;fu&quot;&gt;reply&lt;/span&gt;(ExchangeChannel channel, Object message) &lt;span class=&quot;kw&quot;&gt;throws&lt;/span&gt; RemotingException {
    &lt;span class=&quot;co&quot;&gt;// 省略中间代码...&lt;/span&gt;
  }
  &lt;span class=&quot;co&quot;&gt;// 省略中间代码...&lt;/span&gt;
}

&lt;span class=&quot;co&quot;&gt;// com.alibaba.dubbo.rpc.protocol.dubbo.DubboProtocol#createServer&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; ExchangeServer &lt;span class=&quot;fu&quot;&gt;createServer&lt;/span&gt;(URL url) {
  &lt;span class=&quot;co&quot;&gt;// 省略中间代码...&lt;/span&gt;
  &lt;span class=&quot;co&quot;&gt;// 这里的handler就是上面初始化的，是一个匿名内部类，也就是com.alibaba.dubbo.remoting.exchange.ExchangeHandler的实现类&lt;/span&gt;
  server = Exchangers.&lt;span class=&quot;fu&quot;&gt;bind&lt;/span&gt;(url, requestHandler);
  &lt;span class=&quot;co&quot;&gt;// 省略中间代码...&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; server;
}

&lt;span class=&quot;co&quot;&gt;// com.alibaba.dubbo.remoting.exchange.support.header.HeaderExchanger#bind&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; ExchangeServer &lt;span class=&quot;fu&quot;&gt;bind&lt;/span&gt;(URL url, ExchangeHandler handler) &lt;span class=&quot;kw&quot;&gt;throws&lt;/span&gt; RemotingException {
  &lt;span class=&quot;co&quot;&gt;// 这里的handler就是上面bind方法传入的requestHandler&lt;/span&gt;
  &lt;span class=&quot;co&quot;&gt;// 所以这里就是初始化DecodeHandler和HeaderExchangeHandler的地方，也就说传入Transporters.bind方法的是DecodeHandler类型&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;HeaderExchangeServer&lt;/span&gt;(Transporters.&lt;span class=&quot;fu&quot;&gt;bind&lt;/span&gt;(url, &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;DecodeHandler&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;HeaderExchangeHandler&lt;/span&gt;(handler))));
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;channeleventrunnable中的handler是什么类型&quot;&gt;ChannelEventRunnable中的handler是什么类型？&lt;/h3&gt;
&lt;p&gt;从最上面的堆栈已经知道这个handler其实就是DecodeHandler，也就是初始化ChannelEventRunnable的时候传入的handler，接下来需要弄清楚的是为什么是DecodeHandler。&lt;/p&gt;
&lt;p&gt;上面刚说过ChannelEventRunnable的初始化是由AllChannelHandler中的某一个方法初始化的，那么作为构造参数传入ChannelEventRunnable的handler也就是WrappedChannelHandler#handler（这个类是AllChannelHandler的超类），现在要找到AllChannelHandler是怎么初始化的。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;20&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;co&quot;&gt;// com.alibaba.dubbo.remoting.transport.netty.NettyServer#NettyServer&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;// 上面说handler的初始化的时候，Transporters.bind方法会最终调用NettyServer的构造方法&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;NettyServer&lt;/span&gt;(URL url, ChannelHandler handler) &lt;span class=&quot;kw&quot;&gt;throws&lt;/span&gt; RemotingException{
  &lt;span class=&quot;co&quot;&gt;// 这里的handler就是DecodeHandler&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;super&lt;/span&gt;(url, ChannelHandlers.&lt;span class=&quot;fu&quot;&gt;wrap&lt;/span&gt;(handler, ExecutorUtil.&lt;span class=&quot;fu&quot;&gt;setThreadName&lt;/span&gt;(url, SERVER_THREAD_POOL_NAME)));
}

&lt;span class=&quot;co&quot;&gt;// com.alibaba.dubbo.remoting.transport.dispatcher.ChannelHandlers#wrap&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;static&lt;/span&gt; ChannelHandler &lt;span class=&quot;fu&quot;&gt;wrap&lt;/span&gt;(ChannelHandler handler, URL url){
  &lt;span class=&quot;co&quot;&gt;// 这里的handler是DecodeHandler&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; ChannelHandlers.&lt;span class=&quot;fu&quot;&gt;getInstance&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;wrapInternal&lt;/span&gt;(handler, url);
}

&lt;span class=&quot;co&quot;&gt;// com.alibaba.dubbo.remoting.transport.dispatcher.ChannelHandlers#wrapInternal&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;protected&lt;/span&gt; ChannelHandler &lt;span class=&quot;fu&quot;&gt;wrapInternal&lt;/span&gt;(ChannelHandler handler, URL url) {
  &lt;span class=&quot;co&quot;&gt;// 这里的handler是DecodeHandler&lt;/span&gt;
  &lt;span class=&quot;co&quot;&gt;// 先获取Dispatcher的扩展类，默认是com.alibaba.dubbo.remoting.transport.dispatcher.all.AllDispatcher&lt;/span&gt;
  &lt;span class=&quot;co&quot;&gt;// 然后调用AllDispatcher.dispatch方法&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;MultiMessageHandler&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;HeartbeatHandler&lt;/span&gt;(ExtensionLoader.&lt;span class=&quot;fu&quot;&gt;getExtensionLoader&lt;/span&gt;(Dispatcher.&lt;span class=&quot;fu&quot;&gt;class&lt;/span&gt;)
                                                      .&lt;span class=&quot;fu&quot;&gt;getAdaptiveExtension&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;dispatch&lt;/span&gt;(handler, url)));
}

&lt;span class=&quot;co&quot;&gt;// com.alibaba.dubbo.remoting.transport.dispatcher.all.AllDispatcher#dispatch&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; ChannelHandler &lt;span class=&quot;fu&quot;&gt;dispatch&lt;/span&gt;(ChannelHandler handler, URL url) {
  &lt;span class=&quot;co&quot;&gt;// 这里的handler是DecodeHandler，所以AllChannelHandler的超类WrappedChannelHandler#handler就是DecodeHandler&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;AllChannelHandler&lt;/span&gt;(handler, url);
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;也就是ChannelEventRunnable中的handler就是HeaderExchanger#bind方法中new出来的DecodeHandler类型的对象&lt;/p&gt;
&lt;h3 id=&quot;filter链构造&quot;&gt;filter链构造&lt;/h3&gt;
&lt;p&gt;filter链的构造本来也是在provider export服务的时候完成的，同理consumer端是在refer服务的时候完成filter链的构造。&lt;/p&gt;
&lt;p&gt;consumer和provider的filter链都是在下面的类中构造的，查看前面的service_export和service_reference的调用堆栈就可以看到对该类的调用。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;22&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;co&quot;&gt;// com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; ProtocolFilterWrapper &lt;span class=&quot;kw&quot;&gt;implements&lt;/span&gt; Protocol {

    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;final&lt;/span&gt; Protocol protocol;

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;ProtocolFilterWrapper&lt;/span&gt;(Protocol protocol){
        &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (protocol == &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;) {
            &lt;span class=&quot;kw&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; IllegalArgumentException(&lt;span class=&quot;st&quot;&gt;&quot;protocol == null&quot;&lt;/span&gt;);
        }
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;protocol&lt;/span&gt; = protocol;
    }

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;getDefaultPort&lt;/span&gt;() {
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; protocol.&lt;span class=&quot;fu&quot;&gt;getDefaultPort&lt;/span&gt;();
    }

    &lt;span class=&quot;co&quot;&gt;// service export的时候调用 &lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &amp;lt;T&amp;gt; Exporter&amp;lt;T&amp;gt; &lt;span class=&quot;fu&quot;&gt;export&lt;/span&gt;(Invoker&amp;lt;T&amp;gt; invoker) &lt;span class=&quot;kw&quot;&gt;throws&lt;/span&gt; RpcException {
        &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (Constants.&lt;span class=&quot;fu&quot;&gt;REGISTRY_PROTOCOL&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;equals&lt;/span&gt;(invoker.&lt;span class=&quot;fu&quot;&gt;getUrl&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;getProtocol&lt;/span&gt;())) {
            &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; protocol.&lt;span class=&quot;fu&quot;&gt;export&lt;/span&gt;(invoker);
        }
        &lt;span class=&quot;co&quot;&gt;// 先构造filter链再继续后面的export&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; protocol.&lt;span class=&quot;fu&quot;&gt;export&lt;/span&gt;(&lt;span class=&quot;fu&quot;&gt;buildInvokerChain&lt;/span&gt;(invoker, Constants.&lt;span class=&quot;fu&quot;&gt;SERVICE_FILTER_KEY&lt;/span&gt;, Constants.&lt;span class=&quot;fu&quot;&gt;PROVIDER&lt;/span&gt;));
    }

    &lt;span class=&quot;co&quot;&gt;// consumer refer的还是调用&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &amp;lt;T&amp;gt; Invoker&amp;lt;T&amp;gt; &lt;span class=&quot;fu&quot;&gt;refer&lt;/span&gt;(Class&amp;lt;T&amp;gt; type, URL url) &lt;span class=&quot;kw&quot;&gt;throws&lt;/span&gt; RpcException {
        &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (Constants.&lt;span class=&quot;fu&quot;&gt;REGISTRY_PROTOCOL&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;equals&lt;/span&gt;(url.&lt;span class=&quot;fu&quot;&gt;getProtocol&lt;/span&gt;())) {
            &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; protocol.&lt;span class=&quot;fu&quot;&gt;refer&lt;/span&gt;(type, url);
        }
        &lt;span class=&quot;co&quot;&gt;// 这里是先refer调用创建DubboInvoker，然后才构造filter链，因为consumer是先经过filter链，再经过DubboInvoker处理，而provider是先经过DubboProtocol处理，然后调用filter链&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;buildInvokerChain&lt;/span&gt;(protocol.&lt;span class=&quot;fu&quot;&gt;refer&lt;/span&gt;(type, url), Constants.&lt;span class=&quot;fu&quot;&gt;REFERENCE_FILTER_KEY&lt;/span&gt;, Constants.&lt;span class=&quot;fu&quot;&gt;CONSUMER&lt;/span&gt;);
    }

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;destroy&lt;/span&gt;() {
        protocol.&lt;span class=&quot;fu&quot;&gt;destroy&lt;/span&gt;();
    }

    &lt;span class=&quot;co&quot;&gt;// &lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;static&lt;/span&gt; &amp;lt;T&amp;gt; Invoker&amp;lt;T&amp;gt; &lt;span class=&quot;fu&quot;&gt;buildInvokerChain&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;final&lt;/span&gt; Invoker&amp;lt;T&amp;gt; invoker, String key, String group) {
        Invoker&amp;lt;T&amp;gt; last = invoker;
        &lt;span class=&quot;co&quot;&gt;// 获取所有符合条件的filter扩展，条件包括&lt;/span&gt;
        &lt;span class=&quot;co&quot;&gt;// 1. filter扩展类上面group对应的值和要求的group(入参)一致&lt;/span&gt;
        &lt;span class=&quot;co&quot;&gt;// 2. url中也可以指定加载的filter或者剔除的filter，url配置的key就是入参的key&lt;/span&gt;
        List&amp;lt;Filter&amp;gt; filters = ExtensionLoader.&lt;span class=&quot;fu&quot;&gt;getExtensionLoader&lt;/span&gt;(Filter.&lt;span class=&quot;fu&quot;&gt;class&lt;/span&gt;).&lt;span class=&quot;fu&quot;&gt;getActivateExtension&lt;/span&gt;(invoker.&lt;span class=&quot;fu&quot;&gt;getUrl&lt;/span&gt;(), key, group);
        &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (filters.&lt;span class=&quot;fu&quot;&gt;size&lt;/span&gt;() &amp;gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;) {
            &lt;span class=&quot;kw&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; i = filters.&lt;span class=&quot;fu&quot;&gt;size&lt;/span&gt;() - &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;; i &amp;gt;= &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;; i --) {
                &lt;span class=&quot;dt&quot;&gt;final&lt;/span&gt; Filter filter = filters.&lt;span class=&quot;fu&quot;&gt;get&lt;/span&gt;(i);
                &lt;span class=&quot;dt&quot;&gt;final&lt;/span&gt; Invoker&amp;lt;T&amp;gt; next = last;
                &lt;span class=&quot;co&quot;&gt;// 每个filter使用一个Invoker包裹&lt;/span&gt;
                last = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; Invoker&amp;lt;T&amp;gt;() {

                    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; Class&amp;lt;T&amp;gt; &lt;span class=&quot;fu&quot;&gt;getInterface&lt;/span&gt;() {
                        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; invoker.&lt;span class=&quot;fu&quot;&gt;getInterface&lt;/span&gt;();
                    }

                    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; URL &lt;span class=&quot;fu&quot;&gt;getUrl&lt;/span&gt;() {
                        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; invoker.&lt;span class=&quot;fu&quot;&gt;getUrl&lt;/span&gt;();
                    }

                    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;isAvailable&lt;/span&gt;() {
                        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; invoker.&lt;span class=&quot;fu&quot;&gt;isAvailable&lt;/span&gt;();
                    }

                    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; Result &lt;span class=&quot;fu&quot;&gt;invoke&lt;/span&gt;(Invocation invocation) &lt;span class=&quot;kw&quot;&gt;throws&lt;/span&gt; RpcException {
                        &lt;span class=&quot;co&quot;&gt;// 将next传入，在filter负责调用，由此构成链&lt;/span&gt;
                        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; filter.&lt;span class=&quot;fu&quot;&gt;invoke&lt;/span&gt;(next, invocation);
                    }

                    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;destroy&lt;/span&gt;() {
                        invoker.&lt;span class=&quot;fu&quot;&gt;destroy&lt;/span&gt;();
                    }

                    &lt;span class=&quot;fu&quot;&gt;@Override&lt;/span&gt;
                    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;fu&quot;&gt;toString&lt;/span&gt;() {
                        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; invoker.&lt;span class=&quot;fu&quot;&gt;toString&lt;/span&gt;();
                    }
                };
            }
        }
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; last;
    }
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;所以现在返回看最前面的调用堆栈一切应该是顺理成章了，netty接收到I/O请求后，通知到NioWorker，在NioWorker线程中经过pipeline的处理后启动了ChannelEventRunnable线程；在ChannelEventRunnable线程线程中根据接收到的不同事件调用handler的不同方法来处理，经过多个handler处理之后，经过的是filter链，最后会调用到我们编写的service方法。执行完我们的方法之后，dubo会将结果通过netty发送给consumer。&lt;/p&gt;
&lt;h2 id=&quot;总结&quot;&gt;总结&lt;/h2&gt;
&lt;p&gt;上面通过提问题的方式，解读了一些阅读源码中的关键代码，现在将service export和service reply结合起来，再去阅读源代码就就本能读懂所有主流程了，就能明白源代码为什么这么写。&lt;/p&gt;
</description>
<pubDate>Mon, 29 Jan 2018 15:00:00 +0000</pubDate>
<dc:creator>lacker</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/sunshine-2015/p/8379902.html</dc:identifier>
</item>
<item>
<title>谈谈领域驱动设计的理解 - 道法自然</title>
<link>http://www.cnblogs.com/baihmpgy/p/8379886.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/baihmpgy/p/8379886.html</guid>
<description>&lt;p&gt;领域驱动设计有感 最近3年一直在供应链信息化领域的管理和架构，一方面惊讶于该领域业务知识的复杂，另一方面也惊讶于管理的复杂，特别是今年在做一个系统的架构时，学习了很多的东西。这几年，几乎每年都要花2000+元在买书上。目前负责一个架构的团队有几十号人，一直在思考如何更好的做好的一个复杂的软件产品，因此，也有意识的学习一些知识。最近在看的有两本书《领域驱动设计》、《架构及未来》，本文简单的描述读《领域驱动设计》前面两部分的一些体验。&lt;/p&gt;
&lt;p&gt;强烈推荐有志于架构师、CTO，走技术流的兄弟们也好好看一下这两本书。对于一个大型的团队，你不可能再亲力亲为，因而，这时候需要考虑的是如何为团队构建成熟的组织、流程、制度，确保团队可扩展性。阅读《领域驱动设计》的目的，是为系统分析团队探索一条比较有效的系统分析设计方法，希望将其变成团队可以遵循的标准规范，使团队形成更为高效的详细设计方法。 设计的目的是为了建模，通过模型实现更有效的沟通，确保领域专家、技术团队能够为需求达成一致的理解，并且，通过模型可以理解代码，保证代码的可理解性、可扩展性、可维护性。&lt;/p&gt;
&lt;p&gt;领域驱动设计的一个重点就是领域建模。谈到领域建模，我们先谈谈领域。领域知识一般是用于描述有哪些角色使用系统完成什么任务。领域知识的描述语句就是“主谓宾”，比如关于订单领域知识的描述，大致是“用户通过商城可以搜索商品，将商品添加到购物车，然后下单付款等待收货。每一个订单由若干商品构成，在下单的时候，商品价格是确定的、优惠也是确定的。供货商会在不同的时期去更改商品的价格和优惠方式……”。这段领域知识的描述的每一个“主谓宾”句子，本质就是由名词（主语和宾语）和动词构成。因此，对领域知识的建模会有以下元素构成：&lt;/p&gt;
&lt;p&gt;（1）关联：谓语一般用于关联主语和宾语，比如订单由若干商品（确切的讲，应该成为订单商品，订单商品与商品不同）构成。关联由：组合、聚合、关联、依赖四种类型，这里“订单由若干订单商品构成”，表明订单和订单商品是组合关系，即订单是订单商品组成并且订单商品不能单独存在。聚合是组合的弱化，聚合是弱化的整体和部分的关系，这里的部分可以单独存在。关联相对于组合与聚合会更弱一些，比如这里“用户下单付款等待收货”。用户和订单就是一种关联关系，订单属于用户，用户与订单的关系就是“下单”。依赖是在业务代码中，一个类使用到另一个类的功能，比如付款时，我们会依赖第三方接口来实现具体的付款。付款有不同的方式，我们会抽取为不同的支付接口，仅依赖于接口而不是实现。&lt;/p&gt;
&lt;p&gt;（2）实体/值对象：领域知识的名称，会由实体（或称为领域实体）或者值对象来表示，动词则可能是领域实体的一个操作。实体与值对象的差别在于实体具有标识，值对象则没有。&lt;/p&gt;
&lt;p&gt;（3）模块/系统：模块和系统用于组织领域知识的边界，确保软件系统的高内聚、低耦合。&lt;/p&gt;
&lt;p&gt;（4）Service：一般表示一些可复用的功能，领域实体一般会依赖于服务。&lt;/p&gt;
&lt;p&gt;我们通过以上元素，将领域知识，使用大家都能看懂的图形来构建出来，这就是建模。模型必须真实反映了领域知识，并且与代码相对应。对于复杂系统，领域模型会非常庞大，这样的模型图我相信没有任何人有兴趣细看，我们会陷入到细节中，然后不知所措。因此，更有效的建模，会使用分层、模块化、服务化，甚至按照子系统设计，传统的SOA架构也是解决软件复杂性的一种有效的方法。同理，在数据库设计时，一张庞大的ER图也是很恐怖的，模型必须进行分层，由顶向下，由High Level到Details Level。&lt;/p&gt;
&lt;p&gt;￼这里，我们使用图形对“客户下单”领域知识进行了建模（模型图仅示例，不精确）。这个模型反应了客户、订单、商品、优惠折扣及历史价格的关系。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/21322/201801/21322-20180130001203734-707207808.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;所有的领域实体，具有生命周期，我们通过以下模式来管理领域实体。&lt;/p&gt;
&lt;p&gt;（1）聚合（Aggregate）：在这里订单、订单商品（订单商品与商品折扣）、订单折扣是聚合关系，订单是这些部分的聚合根。我们使用聚合模式来将这些实体作为整体统一管理。聚合涉及的实体将一起存在、一起消亡，需要满足固定的商业规则。领域驱动设计只允许我们通过聚合根来访问，二不允许直接访问内部实体。这确保整个业务规则的完整性，具备更好的可维护性、可扩展性。&lt;/p&gt;
&lt;p&gt;（2）Factory和Repository：Factory用于创建复杂的聚合根，Repository用于加载和保存聚合根到持久存储。 领域驱动设计提倡将系统分成UI层、应用层、领域层和基础设施层。通过这几个元素，我们整个设计就初步具备一定的标准规范了。在后续，我会进一步分享关于聚合、Factory、Repository模式的知识。 这本书可以让我们对设计有一种从朦胧到清晰的感觉，提供了更好的方法论，有助于解决软件的复杂性难题。&lt;/p&gt;
</description>
<pubDate>Mon, 29 Jan 2018 14:55:00 +0000</pubDate>
<dc:creator>道法自然</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/baihmpgy/p/8379886.html</dc:identifier>
</item>
</channel>
</rss>