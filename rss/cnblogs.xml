<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>Qemu，KVM，Virsh傻傻的分不清 - popsuper1982</title>
<link>http://www.cnblogs.com/popsuper1982/p/8522535.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/popsuper1982/p/8522535.html</guid>
<description>&lt;p&gt;当你安装了一台Linux，想启动一个KVM虚拟机的时候，你会发现需要安装不同的软件，启动虚拟机的时候，有多种方法：&lt;/p&gt;
&lt;ul class=&quot;list-paddingleft-2&quot;&gt;&lt;li&gt;
&lt;p&gt;virsh start&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;kvm命令&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;qemu命令&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;qemu-kvm命令&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;qemu-system-x86_64命令&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这些之间是什么关系呢？请先阅读上一篇《&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzI1NzYzODk4OQ==&amp;amp;mid=2247483820&amp;amp;idx=1&amp;amp;sn=8a44b992491aea03e55eefb4815a1958&amp;amp;chksm=ea15168edd629f98e622dcb94e64fbb4a75055da98d620e7c83071b5d6d428904fa5c8e9c4ad&amp;amp;scene=21#wechat_redirect&quot; target=&quot;_blank&quot;&gt;我是虚拟机内核我困惑&lt;/a&gt;》&lt;/p&gt;

&lt;p&gt;有了上一篇的基础，我们就能说清楚来龙去脉。&lt;/p&gt;

&lt;p&gt;首先看qemu，其中关键字emu，全称emulator，模拟器，所以单纯使用qemu是采用的完全虚拟化的模式。&lt;/p&gt;

&lt;p&gt;Qemu向Guest OS模拟CPU，也模拟其他的硬件，GuestOS认为自己和硬件直接打交道，其实是同Qemu模拟出来的硬件打交道，Qemu将这些指令转译给真正的硬件。由于所有的指令都要从Qemu里面过一手，因而性能比较差&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/635909/201803/635909-20180307150620008-108720261.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;按照上一次的理论，完全虚拟化是非常慢的，所以要使用硬件辅助虚拟化技术Intel-VT，AMD-V，所以需要CPU硬件开启这个标志位，一般在BIOS里面设置。查看是否开启&lt;/p&gt;
&lt;p&gt;对于Intel CPU 可用命令 grep &quot;vmx&quot; /proc/cpuinfo 判断&lt;/p&gt;
&lt;p&gt;对于AMD CPU 可用命令 grep &quot;svm&quot; /proc/cpuinfo 判断&lt;/p&gt;

&lt;p&gt;当确认开始了标志位之后，通过KVM，GuestOS的CPU指令不用经过Qemu转译，直接运行，大大提高了速度。&lt;/p&gt;

&lt;p&gt;所以KVM在内核里面需要有一个模块，来设置当前CPU是Guest OS在用，还是Host OS在用。&lt;/p&gt;

&lt;p&gt;查看内核模块中是否含有kvm, ubuntu默认加载这些模块&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/635909/201803/635909-20180307150634298-628102674.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;KVM内核模块通过/dev/kvm暴露接口，用户态程序可以通过ioctl来访问这个接口，例如书写下面的程序&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/635909/201803/635909-20180307150654328-1662633336.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;Qemu将KVM整合进来，通过ioctl调用/dev/kvm接口，将有关CPU指令的部分交由内核模块来做，就是qemu-kvm (qemu-system-XXX)&lt;/p&gt;

&lt;p&gt;Qemu-kvm对kvm的整合从release_0_5_1开始有branch，在1.3.0正式merge到master&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/635909/201803/635909-20180307150710177-1591777831.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;qemu和kvm整合之后，CPU的性能问题解决了，另外Qemu还会模拟其他的硬件，如Network, Disk，同样全虚拟化的方式也会影响这些设备的性能。&lt;/p&gt;

&lt;p&gt;于是qemu采取半虚拟化或者类虚拟化的方式，让Guest OS加载特殊的驱动来做这件事情。&lt;/p&gt;

&lt;p&gt;例如网络需要加载virtio_net，存储需要加载virtio_blk，Guest需要安装这些半虚拟化驱动，GuestOS知道自己是虚拟机，所以数据直接发送给半虚拟化设备，经过特殊处理，例如排队，缓存，批量处理等性能优化方式，最终发送给真正的硬件，一定程度上提高了性能。&lt;/p&gt;

&lt;p&gt;至此整个关系如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/635909/201803/635909-20180307150733042-369996016.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;qemu-kvm会创建Guest OS，当需要执行CPU指令的时候，通过/dev/kvm调用kvm内核模块，通过硬件辅助虚拟化方式加速。如果需要进行网络和存储访问，则通过类虚拟化或者直通Pass through的方式，通过加载特殊的驱动，加速访问网络和存储资源。&lt;/p&gt;

&lt;p&gt;然而直接用qemu或者qemu-kvm或者qemu-system-xxx的少，大多数还是通过virsh启动，virsh属于libvirt工具，libvirt是目前使用最为广泛的对KVM虚拟机进行管理的工具和API，可不止管理KVM。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/635909/201803/635909-20180307150801681-1586679180.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;Libvirt分服务端和客户端，Libvirtd是一个daemon进程，是服务端，可以被本地的virsh调用，也可以被远程的virsh调用，virsh相当于客户端。&lt;/p&gt;
&lt;p&gt;Libvirtd调用qemu-kvm操作虚拟机，有关CPU虚拟化的部分，qemu-kvm调用kvm的内核模块来实现&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/635909/201803/635909-20180307150815111-1223973253.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;这下子，整个相互关系才搞清楚了。&lt;/p&gt;

&lt;p&gt;虽然使用virsh创建虚拟机相对简单，但是为了探究虚拟机的究竟如何使用，下一次，我们来解析一下如何裸使用qemu-kvm来创建一台虚拟机，并且能上网。&lt;/p&gt;

&lt;p&gt;如果搭建使用过vmware桌面版或者virtualbox桌面版，创建一个能上网的虚拟机非常简单，但是其实背后做了很多事情，下一次我们裸用qemu-kvm，全部使用手工配置，看创建虚拟机都做了哪些事情。&lt;/p&gt;

&lt;p&gt;欢迎关注微信公众号&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/635909/201803/635909-20180307151042530-1404999858.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
</description>
<pubDate>Wed, 07 Mar 2018 07:09:00 +0000</pubDate>
<dc:creator>popsuper1982</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/popsuper1982/p/8522535.html</dc:identifier>
</item>
<item>
<title>【DDD】领域驱动设计实践 —— 一些问题及想法 - 倒骑的驴</title>
<link>http://www.cnblogs.com/daoqidelv/p/8522502.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/daoqidelv/p/8522502.html</guid>
<description>&lt;p&gt;在社区系统的DDD实践过程中，将遇到一些问题和产生的想法记录下来，共讨论。&lt;/p&gt;
&lt;p&gt;本文为【DDD】系列文章中的其中一篇，其他内容可参考：&lt;a id=&quot;cb_post_title_url&quot; class=&quot;postTitle2&quot; href=&quot;http://www.cnblogs.com/daoqidelv/p/7492322.html&quot;&gt;使用领域驱动设计思想实现业务系统&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;1、dto、model和entity之间的互相转化&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;user interface层的dto、domian层的model、infrastructure层的entity之间的互相转换，比较繁琐，硬编码容易出错。&lt;/p&gt;
&lt;p&gt;如果命名较为规范，则可以考虑交给一个公共服务完成自动转换，约定俗成：dto和model为驼峰式命名，entity和数据库表保持一致，使用小写字母+下划线形式，可以考虑编写一个工具服务完成自动映射；&lt;/p&gt;
&lt;p&gt;现实情况下，社区系统是一个遗留系统，代码规范不佳，因此通用工具服务不可行。&lt;/p&gt;
&lt;h2&gt;2、repository的实现&lt;/h2&gt;
&lt;p&gt;针对不同的存储介质建议有不同的repository impl，比如rdb使用mybatis实现的dao，mongo有自己的dao；这些dao均需要实现domain层的Repository接口；&lt;/p&gt;
&lt;p&gt;对于redis，通常用做缓存，它会搭配主存（rdb、mongo）使用，这时候，可以有一个RepositoryImpl实现类来包装 缓存/主存之间的增删改查逻辑。&lt;/p&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;p&gt; com.eco.domain.repository.IUserRepository &lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
public interface IUserRepository {
        
        public UserInfo queryUserInfoByUserId(long userId);

}
&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;40&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
@Repository
public class UserRepository implements IUserRepository {
        @Autowired
        private JedisCluster jedisCluster;

        @Autowired
        private UserMapper userMapper;

        @Autowired
        private UserRespostoryTranslator userRespostoryTranslator;

        @Override
        public UserInfo queryUserInfoByUserId(long userId) {            
                UserRedisBean userRedisBean =  this.queryUserRedisBeanByUserId(userId); 
                return this.userRespostoryTranslator.translateFromUserRedisBean(userRedisBean);
        }

        private UserRedisBean queryUserRedisBeanByUserId(long userId) {
                UserRedisBean userRedisBean = null;
                // 获取缓存key
                String userIdKey = RedisKeyUtil.getRedisKey(RedisTypeEnum.UserInfoByUserId, StringUtil.toString(userId));
                String value = jedisCluster.get(userIdKey);

                // redis中不存在，则从db中获取用户相关信息
                if (StringUtil.isEmpty(value)) {

                        // 根据userid及用户社交对象从oracle查询用户信息
                        userRedisBean = getUserRedisBeanFromOracle(userId);

                        if (userRedisBean != null) {
                                // 用户信息写入redis
                                JedisClusterUtil.set(jedisCluster, userIdKey, JsonUtil.toJSONString(userRedisBean),ConfigurationConst.userRedisSeconds);
                        }
                } else {
                        // 如果redis中存在，则从redis获取用户相关信息，并设置有效期
                        userRedisBean = JsonUtil.parseObject(value, UserRedisBean.class);
                }
                return userRedisBean;
        }

        /**
         * 根据userid从oracle查询用户信息
         * 
         * @param userId
         * @return UserRedisBean 欲存入redis中的用户信息bean
         */
        private UserRedisBean getUserRedisBeanFromOracle(long userId) {

                UserRedisBean userRedisBean = null;

                // 根据userid查询用户信息
                UserInfo userInfo = this.queryUserInfoByUserIdFromOracle(userId);

                //ignore transfer UserInfo to UserRedisBean.&lt;br/&gt;return userRedisBean;
        }&lt;br/&gt;}        
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;3、查询式和命令式接口使用的domain需要分离&lt;/h2&gt;
&lt;p&gt;查询式接口domain应当简化，甚至于去掉。通常查询接口的实现逻辑为：入参校验、鉴权、从Repository中获取数据、拼凑不同的数据、数据转换、返回数据。理论上，不应当存在过多的业务逻辑。所以可以淡化domain层。如果仍然按照：entity --&amp;gt; model --&amp;gt;dto的转换路径，实际model的作用没有，反而带来了代码复杂度，不值得。&lt;/p&gt;
&lt;p&gt;命令式接口，除去查询式接口的逻辑，还有部分业务相关的，比如“关注”这一业务逻辑，较为复杂，需要收口到domain。&lt;/p&gt;
&lt;p&gt;因此，建议如下处理方式：&lt;/p&gt;
&lt;p&gt;　　查询式和命令式接口使用的domain需要分离设计，查询式接口使用的domain可以淡化。&lt;/p&gt;
</description>
<pubDate>Wed, 07 Mar 2018 07:05:00 +0000</pubDate>
<dc:creator>倒骑的驴</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/daoqidelv/p/8522502.html</dc:identifier>
</item>
<item>
<title>alsa声卡分析alsa-utils调用过程 - yooooooo</title>
<link>http://www.cnblogs.com/linhaostudy/p/8515277.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/linhaostudy/p/8515277.html</guid>
<description>&lt;p&gt;如何分析tinyplay 播放音频和tinymix的过程？需要相应的工具来支持追查；&lt;/p&gt;

&lt;h2&gt;一、利用strace工具分析tinyplay和tinymix：&lt;/h2&gt;
&lt;p&gt;strace -o tinyplay.log tinyplay 1.wav&lt;/p&gt;
&lt;p&gt;strace -o tinymixer.log tinymixer &quot;SEC_MI2S_RX Audio Mixer MultiMedia1&quot; 1&lt;/p&gt;
&lt;p&gt; 利用strace工具获取APP的log，从应用层往下看；&lt;/p&gt;

&lt;h2&gt;二、tinyplay调用分析（tinyplay.log搜索设备节点“/dev/snd/pcmC0D0p”）&lt;/h2&gt;
&lt;h3&gt;2.1 tinyplay的open过程：&lt;/h3&gt;
&lt;p&gt;snd_pcm_f_ops[0]是播放音频的file_operations，snd_pcm_f_ops[1]则是录音的file_operations：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;const&lt;/span&gt; &lt;span&gt;struct&lt;/span&gt; file_operations snd_pcm_f_ops[&lt;span&gt;2&lt;/span&gt;] =&lt;span&gt; {
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;         .owner =&lt;span&gt;        THIS_MODULE,
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;         .write =&lt;span&gt;        snd_pcm_write,
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;         .aio_write =&lt;span&gt;        snd_pcm_aio_write,
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;         .open =&lt;span&gt;&lt;span&gt;            snd_pcm_playback_open&lt;/span&gt;,
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;         .release =&lt;span&gt;        snd_pcm_release,
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;         .llseek =&lt;span&gt;        no_llseek,
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;         .poll =&lt;span&gt;            snd_pcm_playback_poll,
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;         .unlocked_ioctl =&lt;span&gt;    snd_pcm_playback_ioctl,
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;         .compat_ioctl =&lt;span&gt;     snd_pcm_ioctl_compat,
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;         .mmap =&lt;span&gt;            snd_pcm_mmap,
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;         .fasync =&lt;span&gt;        snd_pcm_fasync,
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;         .get_unmapped_area =&lt;span&gt;    snd_pcm_get_unmapped_area,
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;    },
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;         .owner =&lt;span&gt;        THIS_MODULE,
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;         .read =&lt;span&gt;            snd_pcm_read,
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;         .aio_read =&lt;span&gt;        snd_pcm_aio_read,
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;         .open =&lt;span&gt;            snd_pcm_capture_open,
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;         .release =&lt;span&gt;        snd_pcm_release,
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;         .llseek =&lt;span&gt;        no_llseek,
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;         .poll =&lt;span&gt;            snd_pcm_capture_poll,
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;         .unlocked_ioctl =&lt;span&gt;    snd_pcm_capture_ioctl,
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;         .compat_ioctl =&lt;span&gt;     snd_pcm_ioctl_compat,
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;         .mmap =&lt;span&gt;            snd_pcm_mmap,
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;         .fasync =&lt;span&gt;        snd_pcm_fasync,
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;         .get_unmapped_area =&lt;span&gt;    snd_pcm_get_unmapped_area,
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; };
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;我们从snd_pcm_playback_open函数开始向下分析：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; snd_pcm_playback_open(&lt;span&gt;struct&lt;/span&gt; inode *inode, &lt;span&gt;struct&lt;/span&gt; file *&lt;span&gt;file)
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;     &lt;span&gt;struct&lt;/span&gt; snd_pcm *&lt;span&gt;pcm;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;     &lt;span&gt;int&lt;/span&gt; err =&lt;span&gt; nonseekable_open(inode, file);
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (err &amp;lt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; err;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;     pcm =&lt;span&gt; snd_lookup_minor_data(iminor(inode),
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;                    SNDRV_DEVICE_TYPE_PCM_PLAYBACK);　　&lt;span&gt;//&lt;span lang=&quot;EN-US&quot;&gt;取得其私有数据并返回的&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;     err =&lt;span&gt;&lt;span&gt; snd_pcm_open&lt;/span&gt;(file, pcm, SNDRV_PCM_STREAM_PLAYBACK);
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (pcm)
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;         snd_card_unref(pcm-&amp;gt;&lt;span&gt;card);　　　　　　&lt;span&gt;//
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; err;
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在下面调用了snd_pcm_open函数：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;44&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; snd_pcm_open(&lt;span&gt;struct&lt;/span&gt; file *file, &lt;span&gt;struct&lt;/span&gt; snd_pcm *pcm, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; stream)
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;     &lt;span&gt;int&lt;/span&gt;&lt;span&gt; err;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;    wait_queue_t wait;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; 
&lt;span&gt; 6&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (pcm ==&lt;span&gt; NULL) {
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;         err = -&lt;span&gt;ENODEV;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;         &lt;span&gt;goto&lt;/span&gt;&lt;span&gt; __error1;
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;     err = snd_card_file_add(pcm-&amp;gt;&lt;span&gt;card, file);
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (err &amp;lt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;         &lt;span&gt;goto&lt;/span&gt;&lt;span&gt; __error1;
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (!try_module_get(pcm-&amp;gt;card-&amp;gt;&lt;span&gt;module)) {
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;         err = -&lt;span&gt;EFAULT;
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;         &lt;span&gt;goto&lt;/span&gt;&lt;span&gt; __error2;
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;     init_waitqueue_entry(&amp;amp;&lt;span&gt;wait, current);
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;     add_wait_queue(&amp;amp;pcm-&amp;gt;open_wait, &amp;amp;&lt;span&gt;wait);
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;     mutex_lock(&amp;amp;pcm-&amp;gt;&lt;span&gt;open_mutex);
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;     &lt;span&gt;while&lt;/span&gt; (&lt;span&gt;1&lt;/span&gt;&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;         err =&lt;span&gt;&lt;span&gt; snd_pcm_open_file&lt;/span&gt;(file, pcm, stream);　　&lt;span&gt;// 将操作该声卡card的应用程序添加到card-&amp;gt;files_list
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (err &amp;gt;= &lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;             &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (err == -&lt;span&gt;EAGAIN) {
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (file-&amp;gt;f_flags &amp;amp;&lt;span&gt; O_NONBLOCK) {
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;                 err = -&lt;span&gt;EBUSY;
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;                 &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;         } &lt;span&gt;else&lt;/span&gt;
&lt;span&gt;30&lt;/span&gt;             &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; &lt;span&gt;        set_current_state(TASK_INTERRUPTIBLE);
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;         mutex_unlock(&amp;amp;pcm-&amp;gt;&lt;span&gt;open_mutex);
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; &lt;span&gt;        schedule();
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt;         mutex_lock(&amp;amp;pcm-&amp;gt;&lt;span&gt;open_mutex);
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (pcm-&amp;gt;card-&amp;gt;&lt;span&gt;shutdown) {
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt;             err = -&lt;span&gt;ENODEV;
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt;             &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (signal_pending(current)) {
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt;             err = -&lt;span&gt;ERESTARTSYS;
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt;             &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt;     remove_wait_queue(&amp;amp;pcm-&amp;gt;open_wait, &amp;amp;&lt;span&gt;wait);
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt;     mutex_unlock(&amp;amp;pcm-&amp;gt;&lt;span&gt;open_mutex);
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (err &amp;lt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt;         &lt;span&gt;goto&lt;/span&gt;&lt;span&gt; __error;
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; err;
&lt;/span&gt;&lt;span&gt;49&lt;/span&gt; 
&lt;span&gt;50&lt;/span&gt; &lt;span&gt;      __error:
&lt;/span&gt;&lt;span&gt;51&lt;/span&gt;     module_put(pcm-&amp;gt;card-&amp;gt;&lt;span&gt;module);
&lt;/span&gt;&lt;span&gt;52&lt;/span&gt; &lt;span&gt;      __error2:
&lt;/span&gt;&lt;span&gt;53&lt;/span&gt;           snd_card_file_remove(pcm-&amp;gt;&lt;span&gt;card, file);
&lt;/span&gt;&lt;span&gt;54&lt;/span&gt; &lt;span&gt;      __error1:
&lt;/span&gt;&lt;span&gt;55&lt;/span&gt;           &lt;span&gt;return&lt;/span&gt;&lt;span&gt; err;
&lt;/span&gt;&lt;span&gt;56&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 再从snd_pcm_open_file继续向下看：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; snd_pcm_open_file(&lt;span&gt;struct&lt;/span&gt; file *&lt;span&gt;file,
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;                  &lt;span&gt;struct&lt;/span&gt; snd_pcm *&lt;span&gt;pcm,
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;                  &lt;span&gt;int&lt;/span&gt;&lt;span&gt; stream)
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;     &lt;span&gt;struct&lt;/span&gt; snd_pcm_file *&lt;span&gt;pcm_file;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;     &lt;span&gt;struct&lt;/span&gt; snd_pcm_substream *&lt;span&gt;substream;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;     &lt;span&gt;int&lt;/span&gt;&lt;span&gt; err;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; 
&lt;span&gt; 9&lt;/span&gt;     err = &lt;span&gt;snd_pcm_open_substream&lt;/span&gt;(pcm, stream, file, &amp;amp;&lt;span&gt;substream);　　　　&lt;span&gt;//打开substream结构体
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (err &amp;lt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; err;
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; 
&lt;span&gt;13&lt;/span&gt;     pcm_file = kzalloc(&lt;span&gt;sizeof&lt;/span&gt;(*&lt;span&gt;pcm_file), GFP_KERNEL);
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (pcm_file ==&lt;span&gt; NULL) {
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;        snd_pcm_release_substream(substream);
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; -&lt;span&gt;ENOMEM;
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;     pcm_file-&amp;gt;substream =&lt;span&gt; substream;
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (substream-&amp;gt;ref_count == &lt;span&gt;1&lt;/span&gt;&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;         substream-&amp;gt;file =&lt;span&gt; pcm_file;
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;         substream-&amp;gt;pcm_release =&lt;span&gt; pcm_release_private;
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;     file-&amp;gt;private_data =&lt;span&gt; pcm_file;
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; 
&lt;span&gt;25&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('6ea6b31f-edea-4bfe-b410-fdfa66fbaba3')&quot; readability=&quot;35.5&quot;&gt;&lt;img id=&quot;code_img_closed_6ea6b31f-edea-4bfe-b410-fdfa66fbaba3&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_6ea6b31f-edea-4bfe-b410-fdfa66fbaba3&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('6ea6b31f-edea-4bfe-b410-fdfa66fbaba3',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_6ea6b31f-edea-4bfe-b410-fdfa66fbaba3&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;66&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; snd_pcm_open_substream(&lt;span&gt;struct&lt;/span&gt; snd_pcm *pcm, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; stream,
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;                &lt;span&gt;struct&lt;/span&gt; file *&lt;span&gt;file,
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;                &lt;span&gt;struct&lt;/span&gt; snd_pcm_substream **&lt;span&gt;rsubstream)
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;     &lt;span&gt;struct&lt;/span&gt; snd_pcm_substream *&lt;span&gt;substream;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;     &lt;span&gt;int&lt;/span&gt;&lt;span&gt; err;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; 
&lt;span&gt; 8&lt;/span&gt;     err = snd_pcm_attach_substream(pcm, stream, file, &amp;amp;&lt;span&gt;substream);
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (err &amp;lt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; err;
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (substream-&amp;gt;ref_count &amp;gt; &lt;span&gt;1&lt;/span&gt;&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;         *rsubstream =&lt;span&gt; substream;
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; 
&lt;span&gt;16&lt;/span&gt;     err = snd_pcm_hw_constraints_init(substream);    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;初始化substream结构体&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (err &amp;lt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;         snd_printd(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;snd_pcm_hw_constraints_init failed\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;         &lt;span&gt;goto&lt;/span&gt;&lt;span&gt; error;
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; 
&lt;span&gt;22&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; ((err = substream-&amp;gt;ops-&amp;gt;open(substream)) &amp;lt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;         &lt;span&gt;goto&lt;/span&gt;&lt;span&gt; error;
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; 
&lt;span&gt;25&lt;/span&gt;     substream-&amp;gt;hw_opened = &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; 
&lt;span&gt;27&lt;/span&gt;     err =&lt;span&gt; snd_pcm_hw_constraints_complete(substream);
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (err &amp;lt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;         snd_printd(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;snd_pcm_hw_constraints_complete failed\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;         &lt;span&gt;goto&lt;/span&gt;&lt;span&gt; error;
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; 
&lt;span&gt;33&lt;/span&gt;     *rsubstream =&lt;span&gt; substream;
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt; 
&lt;span&gt;36&lt;/span&gt; &lt;span&gt; error:
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt; &lt;span&gt;    snd_pcm_release_substream(substream);
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; err;
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;snd_pcm_open_substream&lt;/span&gt;&lt;/div&gt;

&lt;p&gt; 在snd_pcm_open_substream函数中：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; ((err = substream-&amp;gt;ops-&amp;gt;open(substream)) &amp;lt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;)　　　　&lt;span&gt;// substream-&amp;gt;ops : snd_pcm_ops结构体
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;         &lt;span&gt;goto&lt;/span&gt; error;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 依次调用cpu_dai, dma, codec_dai, machine（三大模块）的open或startup函数；&lt;/p&gt;

&lt;p&gt;msm_mi2s_snd_startup函数：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;struct&lt;/span&gt; snd_soc_pcm_runtime *rtd = substream-&amp;gt;&lt;span&gt;private_data;
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; &lt;span&gt;struct&lt;/span&gt; snd_soc_card *card = rtd-&amp;gt;&lt;span&gt;card;
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; &lt;span&gt;struct&lt;/span&gt; snd_soc_dai *cpu_dai = rtd-&amp;gt;&lt;span&gt;cpu_dai;
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; &lt;span&gt;struct&lt;/span&gt; snd_soc_codec *codec = rtd-&amp;gt;codec;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;设置snd_soc_pcm_runtime的cpu、codec等模块；然后在snd_soc_pcm_runtime函数中对codec函数进行相应的设置，之后通过音频数据流通道播放出声音；&lt;/p&gt;
&lt;p&gt;调用过程如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/811006/201803/811006-20180307092425203-479982768.png&quot; alt=&quot;&quot; width=&quot;745&quot; height=&quot;991&quot;/&gt;&lt;/p&gt;


&lt;h3&gt;2.2 tinyplay的ioctl过程：&lt;/h3&gt;
&lt;p&gt; 同样也是snd_pcm_f_ops[0]结构体的file_operations：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;48&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;         .owner =&lt;span&gt;        THIS_MODULE,
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;         .write =&lt;span&gt;        snd_pcm_write,
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;         .aio_write =&lt;span&gt;        snd_pcm_aio_write,
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;         .open =&lt;span&gt;            snd_pcm_playback_open,
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;         .release =&lt;span&gt;        snd_pcm_release,
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;         .llseek =&lt;span&gt;        no_llseek,
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;         .poll =&lt;span&gt;            snd_pcm_playback_poll,
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;         .unlocked_ioctl =&lt;span&gt;&lt;span&gt;    snd_pcm_playback_ioctl&lt;/span&gt;,
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;         .compat_ioctl =&lt;span&gt;     snd_pcm_ioctl_compat,
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;         .mmap =&lt;span&gt;            snd_pcm_mmap,
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;         .fasync =&lt;span&gt;        snd_pcm_fasync,
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;         .get_unmapped_area =&lt;span&gt;    snd_pcm_get_unmapped_area,
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; },
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;从snd_pcm_playback_ioctl函数向下看：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;long&lt;/span&gt; snd_pcm_playback_ioctl(&lt;span&gt;struct&lt;/span&gt; file *file, unsigned &lt;span&gt;int&lt;/span&gt;&lt;span&gt; cmd,
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;                    unsigned &lt;span&gt;long&lt;/span&gt;&lt;span&gt; arg)
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;     &lt;span&gt;struct&lt;/span&gt; snd_pcm_file *&lt;span&gt;pcm_file;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; 
&lt;span&gt; 6&lt;/span&gt;     pcm_file = file-&amp;gt;&lt;span&gt;private_data;　　　&lt;span&gt;　//获取相应的私有数据
&lt;/span&gt;&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; 
&lt;span&gt; 8&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; ((((cmd &amp;gt;&amp;gt; &lt;span&gt;8&lt;/span&gt;) &amp;amp; &lt;span&gt;0xff&lt;/span&gt;) != &lt;span&gt;'&lt;/span&gt;&lt;span&gt;A&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;) &amp;amp;&amp;amp; (((cmd &amp;gt;&amp;gt; &lt;span&gt;8&lt;/span&gt;) &amp;amp; &lt;span&gt;0xff&lt;/span&gt;) != &lt;span&gt;'&lt;/span&gt;&lt;span&gt;C&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;))
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; -&lt;span&gt;ENOTTY;
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; 
&lt;span&gt;11&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; &lt;span&gt;snd_pcm_playback_ioctl1&lt;/span&gt;(file, pcm_file-&amp;gt;&lt;span&gt;substream, cmd,
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;                        (&lt;span&gt;void&lt;/span&gt; __user *&lt;span&gt;)arg);
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;snd_pcm_playback_ioctl1：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;62&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; snd_pcm_playback_ioctl1(&lt;span&gt;struct&lt;/span&gt; file *&lt;span&gt;file,
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;                    &lt;span&gt;struct&lt;/span&gt; snd_pcm_substream *&lt;span&gt;substream,
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;                    unsigned &lt;span&gt;int&lt;/span&gt; cmd, &lt;span&gt;void&lt;/span&gt; __user *&lt;span&gt;arg)
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (snd_BUG_ON(!&lt;span&gt;substream))
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; -&lt;span&gt;ENXIO;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (snd_BUG_ON(substream-&amp;gt;stream !=&lt;span&gt; SNDRV_PCM_STREAM_PLAYBACK))
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; -&lt;span&gt;EINVAL;
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;根据case不同，对播放进行相应的不同操作&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt;     &lt;span&gt;switch&lt;/span&gt;&lt;span&gt; (cmd) {
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;     &lt;span&gt;case&lt;/span&gt;&lt;span&gt; SNDRV_PCM_IOCTL_WRITEI_FRAMES:
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;         &lt;span&gt;struct&lt;/span&gt;&lt;span&gt; snd_xferi xferi;
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;         &lt;span&gt;struct&lt;/span&gt; snd_xferi __user *_xferi =&lt;span&gt; arg;
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;         &lt;span&gt;struct&lt;/span&gt; snd_pcm_runtime *runtime = substream-&amp;gt;&lt;span&gt;runtime;
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;        snd_pcm_sframes_t result;
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (runtime-&amp;gt;status-&amp;gt;state ==&lt;span&gt; SNDRV_PCM_STATE_OPEN)
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; -&lt;span&gt;EBADFD;
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (put_user(&lt;span&gt;0&lt;/span&gt;, &amp;amp;_xferi-&amp;gt;&lt;span&gt;result))
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; -&lt;span&gt;EFAULT;
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (copy_from_user(&amp;amp;xferi, _xferi, &lt;span&gt;sizeof&lt;/span&gt;&lt;span&gt;(xferi)))
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; -&lt;span&gt;EFAULT;
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;         result =&lt;span&gt; snd_pcm_lib_write(substream, xferi.buf, xferi.frames);
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;         __put_user(result, &amp;amp;_xferi-&amp;gt;&lt;span&gt;result);
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; result &amp;lt; &lt;span&gt;0&lt;/span&gt; ? result : &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;     &lt;span&gt;case&lt;/span&gt;&lt;span&gt; SNDRV_PCM_IOCTL_WRITEN_FRAMES:
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;         &lt;span&gt;struct&lt;/span&gt;&lt;span&gt; snd_xfern xfern;
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;         &lt;span&gt;struct&lt;/span&gt; snd_xfern __user *_xfern =&lt;span&gt; arg;
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;         &lt;span&gt;struct&lt;/span&gt; snd_pcm_runtime *runtime = substream-&amp;gt;&lt;span&gt;runtime;
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;         &lt;span&gt;void&lt;/span&gt; __user **&lt;span&gt;bufs;
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; &lt;span&gt;        snd_pcm_sframes_t result;
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (runtime-&amp;gt;status-&amp;gt;state ==&lt;span&gt; SNDRV_PCM_STATE_OPEN)
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; -&lt;span&gt;EBADFD;
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (runtime-&amp;gt;channels &amp;gt; &lt;span&gt;128&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; -&lt;span&gt;EINVAL;
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (put_user(&lt;span&gt;0&lt;/span&gt;, &amp;amp;_xfern-&amp;gt;&lt;span&gt;result))
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; -&lt;span&gt;EFAULT;
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (copy_from_user(&amp;amp;xfern, _xfern, &lt;span&gt;sizeof&lt;/span&gt;&lt;span&gt;(xfern)))
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; -&lt;span&gt;EFAULT;
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt; 
&lt;span&gt;43&lt;/span&gt;         bufs =&lt;span&gt; memdup_user(xfern.bufs,
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt;                    &lt;span&gt;sizeof&lt;/span&gt;(&lt;span&gt;void&lt;/span&gt; *) * runtime-&amp;gt;&lt;span&gt;channels);
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (IS_ERR(bufs))
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt; PTR_ERR(bufs);
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt;         result =&lt;span&gt; snd_pcm_lib_writev(substream, bufs, xfern.frames);
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt; &lt;span&gt;        kfree(bufs);
&lt;/span&gt;&lt;span&gt;49&lt;/span&gt;         __put_user(result, &amp;amp;_xfern-&amp;gt;&lt;span&gt;result);
&lt;/span&gt;&lt;span&gt;50&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; result &amp;lt; &lt;span&gt;0&lt;/span&gt; ? result : &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;51&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;52&lt;/span&gt;     &lt;span&gt;case&lt;/span&gt;&lt;span&gt; SNDRV_PCM_IOCTL_REWIND:
&lt;/span&gt;&lt;span&gt;53&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;54&lt;/span&gt; &lt;span&gt;        snd_pcm_uframes_t frames;
&lt;/span&gt;&lt;span&gt;55&lt;/span&gt;         snd_pcm_uframes_t __user *_frames =&lt;span&gt; arg;
&lt;/span&gt;&lt;span&gt;56&lt;/span&gt; &lt;span&gt;        snd_pcm_sframes_t result;
&lt;/span&gt;&lt;span&gt;57&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (get_user(frames, _frames))
&lt;/span&gt;&lt;span&gt;58&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; -&lt;span&gt;EFAULT;
&lt;/span&gt;&lt;span&gt;59&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (put_user(&lt;span&gt;0&lt;/span&gt;&lt;span&gt;, _frames))
&lt;/span&gt;&lt;span&gt;60&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; -&lt;span&gt;EFAULT;
&lt;/span&gt;&lt;span&gt;61&lt;/span&gt;         result =&lt;span&gt; snd_pcm_playback_rewind(substream, frames);
&lt;/span&gt;&lt;span&gt;62&lt;/span&gt; &lt;span&gt;        __put_user(result, _frames);
&lt;/span&gt;&lt;span&gt;63&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; result &amp;lt; &lt;span&gt;0&lt;/span&gt; ? result : &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;64&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;65&lt;/span&gt;     &lt;span&gt;case&lt;/span&gt;&lt;span&gt; SNDRV_PCM_IOCTL_FORWARD:
&lt;/span&gt;&lt;span&gt;66&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;67&lt;/span&gt; &lt;span&gt;        snd_pcm_uframes_t frames;
&lt;/span&gt;&lt;span&gt;68&lt;/span&gt;         snd_pcm_uframes_t __user *_frames =&lt;span&gt; arg;
&lt;/span&gt;&lt;span&gt;69&lt;/span&gt; &lt;span&gt;        snd_pcm_sframes_t result;
&lt;/span&gt;&lt;span&gt;70&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (get_user(frames, _frames))
&lt;/span&gt;&lt;span&gt;71&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; -&lt;span&gt;EFAULT;
&lt;/span&gt;&lt;span&gt;72&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (put_user(&lt;span&gt;0&lt;/span&gt;&lt;span&gt;, _frames))
&lt;/span&gt;&lt;span&gt;73&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; -&lt;span&gt;EFAULT;
&lt;/span&gt;&lt;span&gt;74&lt;/span&gt;         result =&lt;span&gt; snd_pcm_playback_forward(substream, frames);
&lt;/span&gt;&lt;span&gt;75&lt;/span&gt; &lt;span&gt;        __put_user(result, _frames);
&lt;/span&gt;&lt;span&gt;76&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; result &amp;lt; &lt;span&gt;0&lt;/span&gt; ? result : &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;77&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;78&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;79&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt;&lt;span&gt;&lt;span&gt; snd_pcm_common_ioctl1&lt;/span&gt;(file, substream, cmd, arg);
&lt;/span&gt;&lt;span&gt;80&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;从snd_pcm_common_ioctl1继续分析，进入函数的prepare中：&lt;/p&gt;
&lt;p&gt;当函数prepare完毕后，就一切准备就绪了，只等一个&lt;span lang=&quot;EN-US&quot;&gt;trigger；而&lt;span lang=&quot;EN-US&quot;&gt;trigger的执行会在上层的&lt;span lang=&quot;EN-US&quot;&gt;alsalib调用&lt;span lang=&quot;EN-US&quot;&gt;write的函数触发；prepare过程可以看下图，具体就不继续分析了：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/811006/201803/811006-20180307144445374-2078381439.png&quot; alt=&quot;&quot; width=&quot;691&quot; height=&quot;665&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; 下一节我们将来分析tinymixer的调用过程；&lt;/p&gt;
</description>
<pubDate>Wed, 07 Mar 2018 07:04:00 +0000</pubDate>
<dc:creator>yooooooo</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/linhaostudy/p/8515277.html</dc:identifier>
</item>
<item>
<title>放大倍数超5万倍的Memcached DDoS反射攻击，怎么破？ - 腾讯云+社区</title>
<link>http://www.cnblogs.com/qcloud1001/p/8522371.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/qcloud1001/p/8522371.html</guid>
<description>&lt;p&gt;欢迎大家前往&lt;a href=&quot;https://cloud.tencent.com/developer&quot; target=&quot;_blank&quot;&gt;腾讯云+社区&lt;/a&gt;，获取更多腾讯海量技术实践干货哦~&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;作者：&lt;a href=&quot;https://cloud.tencent.com/developer/user/1024461&quot; target=&quot;_blank&quot;&gt;腾讯游戏云&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;c-markdown&quot; readability=&quot;93.779421654338&quot;&gt;
&lt;h2&gt;&lt;strong&gt;背景：Memcached攻击创造DDoS攻击流量纪录&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;近日，利用Memcached服务器实施反射DDoS攻击的事件呈大幅上升趋势。DDoS攻击流量首次过T，引发业界热烈回应。现腾讯游戏云回溯整个事件如下：&lt;/p&gt;
&lt;p&gt;追溯2 月 27 日消息，Cloudflare 和 Arbor Networks 公司于周二发出警告称，恶意攻击者正在滥用 Memcached 协议发起分布式拒绝服务（DDoS）放大攻击，全球范围内许多服务器（包括 Arbor Networks 公司）受到影响。下图为监测到Memcached攻击态势。&lt;/p&gt;
&lt;img src=&quot;https://ask.qcloudimg.com/draft/1024461/edj5njsdn7.png?imageView2/0/w/1620&quot; alt=&quot;&quot;/&gt;&lt;p&gt;&lt;strong&gt;仅仅过了一天，就出现了1.35Tbps攻击流量刷新DDoS攻击历史纪录。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;美国东部时间周三下午，GitHub透露其可能遭受了有史最强的DDoS攻击，专家称攻击者采用了放大攻击的新方法Memcached反射攻击，可能会在未来发生更大规模的分布式拒绝服务（DDoS）攻击。对GitHub平台的第一次峰值流量攻击达到了1.35Tbps，随后又出现了另外一次400Gbps的峰值，这可能也将成为目前记录在案的最强DDoS攻击，此前这一数据为1.1Tbps。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;据CNCERT3月3日消息，监测发现Memcached反射攻击在北京时间3月1日凌晨2点30分左右峰值流量高达1.94Tbps。&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;腾讯云捕获多起Memcached反射型DDoS攻击&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;截止3月6日，腾讯云已捕获到多起利用Memcached发起的反射型DDoS攻击。主要攻击目标包括游戏、门户网站等业务。&lt;/p&gt;
&lt;p&gt;腾讯云数据监测显示，黑产针对腾讯云业务发起的Memcached反射型攻击从2月21日起进入活跃期，在3月1日达到活跃高峰，随后攻击次数明显减少，到3月5日再次出现攻击高峰。攻击态势如下图所示：&lt;/p&gt;
&lt;img src=&quot;https://ask.qcloudimg.com/draft/1024461/0mg8q4bpss.png?imageView2/0/w/1620&quot; alt=&quot;&quot;/&gt;&lt;p&gt;下图为腾讯云捕获到的Memcached反射型DDoS攻击的抓包样本：&lt;/p&gt;
&lt;img src=&quot;https://ask.qcloudimg.com/draft/1024461/w7ue7sc2b4.png?imageView2/0/w/1620&quot; alt=&quot;&quot;/&gt;&lt;p&gt;腾讯云捕获到的Memcached反射源为22511个。Memcached反射源来源分布情况如下图所示：&lt;/p&gt;
&lt;img src=&quot;https://ask.qcloudimg.com/draft/1024461/fikcf9u3oj.png?imageView2/0/w/1620&quot; alt=&quot;&quot;/&gt;&lt;p&gt;在腾讯云宙斯盾安全系统防护下，腾讯云业务在Memcached反射型DDoS攻击中不受影响。&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;那么，什么是Memcached反射攻击？&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;一般而言，我们会根据针对的协议类型和攻击方式的不同，把 DDoS 分成 SYN Flood、ACK Flood、UDP Flood、NTP Flood、SSDP Flood、DNS Flood、HTTP Flood、ICMP Flood、CC 等各类攻击类型。&lt;/p&gt;
&lt;p&gt;DDoS攻击的历史可以追溯到上世纪90年代，&lt;strong&gt;反射型DDoS 攻击则是DDoS攻击中较巧妙的一种&lt;/strong&gt;。攻击者并不直接攻击目标服务 IP，而是通过伪造被攻击者的 IP向开放某些某些特殊服务的服务器发请求报文，该服务器会将数倍于请求报文的回复数据发送到那个伪造的IP（即目标服务IP），从而实现隔山打牛，四两拨千金的效果。而Memcached反射型攻击因为其高达数万倍的放大倍数，更加受到攻击者的青睐。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Memcached反射攻击&lt;/strong&gt;，就是发起攻击者伪造成受害者的IP对互联网上可以被利用的Memcached的服务发起大量请求，Memcached对请求回应。大量的回应报文汇聚到被伪造的IP地址源，形成反射型分布式拒绝服务攻击。&lt;/p&gt;
&lt;img src=&quot;https://ask.qcloudimg.com/draft/1024461/x6a3qs4cns.png?imageView2/0/w/1620&quot; alt=&quot;&quot;/&gt;&lt;h2&gt;&lt;strong&gt;为何会造成如此大威胁？&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;据腾讯云宙斯盾安全团队成员介绍，以往我们面临的DDoS威胁，例如NTP和SSDP反射攻击的放大倍数一般都是30~50之间，而Memcached的放大倍数是万为单位，一般放大倍数接近5万倍，且并不能排除这个倍数被继续放大的可能性。利用这个特点，&lt;strong&gt;攻击者可以用非常少的带宽即可发起流量巨大的DDoS攻击。&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;安全建设需要未雨绸缪&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;早在Memcached反射型DDoS攻击手法试探鹅厂业务之时，腾讯云已感知到风险并提前做好部署，这轮黑客基于Memcached反射发起的DDoS攻击都被成功防护。&lt;/p&gt;
&lt;p&gt;与此同时，腾讯云在捕获到Memcached攻击后，及时协助业务客户自查，提供监测和修复建议以确保用户的服务器不被用于发起DDoS攻击。&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;应对超大流量DDoS攻击的安全建议&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;DDoS攻击愈演愈烈，不断刷新攻击流量纪录，面临超越Tbps级的超大流量攻击，腾讯云宙斯盾安全产品团队建议用户做以下应对：&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;1.需要加强对反射型UDP攻击的重点关注，并提高风险感知能力&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;反射型UDP攻击占据DDoS攻击半壁江山。根据2017年腾讯云游戏行业DDoS攻击态势报告显示，反射型UDP攻击占了2017年全年DDoS攻击的55%，需要重点关注此种类型攻击。&lt;/p&gt;
&lt;img src=&quot;https://ask.qcloudimg.com/draft/1024461/wetnc6xc4t.png?imageView2/0/w/1620&quot; alt=&quot;&quot;/&gt;&lt;p&gt;此次Memcached反射型攻击作为一种较新型的反射型UDP攻击形式出现，带来巨大安全隐患，需要业界持续关注互联网安全动态，并提高风险感知能力，做好策略应对。在行业内出现威胁爆发时进行必要的演练。&lt;/p&gt;
&lt;h3&gt;2.应对超大流量攻击威胁，建议接入腾讯云宙斯盾安全产品&lt;/h3&gt;
&lt;p&gt;应对逐步升级的DDoS攻击风险。建议配置宙斯盾高防IP产品，隐藏源站IP。用高防IP充足的带宽资源应对可能的大流量攻击行为，并根据业务特点制定个性化的防护策略，被DDoS攻击时才能保证业务可用性，从容处理。在面对高等级DDoS威胁时，及时升级防护配置，必要时请求DDoS防护厂商的专家服务。&lt;/p&gt;
&lt;p&gt;了解腾讯云超大容量高防产品：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://cloud.tencent.com/login?s_url=https%3A%2F%2Fcloud.tencent.com%2Fact%2Fapply%2FAegis&quot; target=&quot;_blank&quot;&gt;https://cloud.tencent.com/login?s_url=https%3A%2F%2Fcloud.tencent.com%2Fact%2Fapply%2FAegis&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;3.易受大流量攻击行业需加强防范&lt;/h3&gt;
&lt;p&gt;门户、金融、游戏等往年易受黑产死盯的行业需加强防范，政府等DDoS防护能力较弱的业务需提高大流量攻击的警惕。&lt;/p&gt;
&lt;p&gt;风险往往曾经出现过苗头，一旦被黑产的春风点起，在毫无防护的情形之下，就会燃起燎原大火。&lt;/p&gt;
&lt;h3&gt;参考链接：&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.cloudflare.com/memcrashed-major-amplification-attacks-from-port-11211/&quot; target=&quot;_blank&quot;&gt;https://blog.cloudflare.com/memcrashed-major-amplification-attacks-from-port-11211/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s/b0TXg_7Q9TweP4qu-8PKqw&quot; target=&quot;_blank&quot;&gt;http://mp.weixin.qq.com/s/b0TXg_7Q9TweP4qu-8PKqw&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;相关阅读&lt;/h2&gt;
&lt;p&gt;&lt;span data-sheets-value=&quot;{&amp;quot;1&amp;quot;:2,&amp;quot;2&amp;quot;:&amp;quot;Unity引擎与C#脚本简介&amp;quot;}&quot; data-sheets-userformat=&quot;{&amp;quot;2&amp;quot;:1,&amp;quot;3&amp;quot;:[null,0]}&quot;&gt;&lt;a class=&quot;in-cell-link&quot; href=&quot;https://cloud.tencent.com/developer/article/1047768&quot; target=&quot;_blank&quot;&gt;Unity引擎与C#脚本简介&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span data-sheets-value=&quot;{&amp;quot;1&amp;quot;:2,&amp;quot;2&amp;quot;:&amp;quot;Unity引擎与C#脚本简介&amp;quot;}&quot; data-sheets-userformat=&quot;{&amp;quot;2&amp;quot;:1,&amp;quot;3&amp;quot;:[null,0]}&quot;&gt;&lt;span data-sheets-value=&quot;{&amp;quot;1&amp;quot;:2,&amp;quot;2&amp;quot;:&amp;quot;基于腾讯云的视频聊天研究&amp;quot;}&quot; data-sheets-userformat=&quot;{&amp;quot;2&amp;quot;:1,&amp;quot;3&amp;quot;:[null,0]}&quot;&gt;&lt;a class=&quot;in-cell-link&quot; href=&quot;https://cloud.tencent.com/developer/article/1005508&quot; target=&quot;_blank&quot;&gt;基于腾讯云的视频聊天研究&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span data-sheets-value=&quot;{&amp;quot;1&amp;quot;:2,&amp;quot;2&amp;quot;:&amp;quot;Unity引擎与C#脚本简介&amp;quot;}&quot; data-sheets-userformat=&quot;{&amp;quot;2&amp;quot;:1,&amp;quot;3&amp;quot;:[null,0]}&quot;&gt;&lt;span data-sheets-value=&quot;{&amp;quot;1&amp;quot;:2,&amp;quot;2&amp;quot;:&amp;quot;基于腾讯云的视频聊天研究&amp;quot;}&quot; data-sheets-userformat=&quot;{&amp;quot;2&amp;quot;:1,&amp;quot;3&amp;quot;:[null,0]}&quot;&gt;&lt;span data-sheets-value=&quot;{&amp;quot;1&amp;quot;:2,&amp;quot;2&amp;quot;:&amp;quot;ios微信内存监控&amp;quot;}&quot; data-sheets-userformat=&quot;{&amp;quot;2&amp;quot;:1,&amp;quot;3&amp;quot;:[null,0]}&quot;&gt;&lt;a class=&quot;in-cell-link&quot; href=&quot;https://cloud.tencent.com/developer/article/1048715&quot; target=&quot;_blank&quot;&gt;ios微信内存监控&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;&lt;span data-sheets-value=&quot;{&amp;quot;1&amp;quot;:2,&amp;quot;2&amp;quot;:&amp;quot;Unity引擎与C#脚本简介&amp;quot;}&quot; data-sheets-userformat=&quot;{&amp;quot;2&amp;quot;:1,&amp;quot;3&amp;quot;:[null,0]}&quot;&gt;&lt;span data-sheets-value=&quot;{&amp;quot;1&amp;quot;:2,&amp;quot;2&amp;quot;:&amp;quot;基于腾讯云的视频聊天研究&amp;quot;}&quot; data-sheets-userformat=&quot;{&amp;quot;2&amp;quot;:1,&amp;quot;3&amp;quot;:[null,0]}&quot;&gt;&lt;span data-sheets-value=&quot;{&amp;quot;1&amp;quot;:2,&amp;quot;2&amp;quot;:&amp;quot;ios微信内存监控&amp;quot;}&quot; data-sheets-userformat=&quot;{&amp;quot;2&amp;quot;:1,&amp;quot;3&amp;quot;:[null,0]}&quot;&gt;此文已由作者授权腾讯云+社区发布，转载请注明&lt;a href=&quot;https://cloud.tencent.com/developer/article/1053166&quot; target=&quot;_blank&quot;&gt;文章出处&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;原文链接：&lt;a href=&quot;https://cloud.tencent.com/developer/article/1053166&quot; target=&quot;_blank&quot;&gt;https://cloud.tencent.com/developer/article/1053166&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</description>
<pubDate>Wed, 07 Mar 2018 06:50:00 +0000</pubDate>
<dc:creator>腾讯云+社区</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/qcloud1001/p/8522371.html</dc:identifier>
</item>
<item>
<title>ASP.NET没有魔法——ASP.NET MVC 模型绑定解析（下篇） - 7m鱼</title>
<link>http://www.cnblogs.com/selimsong/p/8509359.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/selimsong/p/8509359.html</guid>
<description>&lt;p&gt;　　上一篇《&lt;a id=&quot;post_title_link_8484482&quot; href=&quot;http://www.cnblogs.com/selimsong/p/8484482.html&quot;&gt;ASP.NET没有魔法——ASP.NET MVC 模型绑定解析（上篇）&lt;/a&gt;》文章介绍了ASP.NET MVC模型绑定的相关组件和概念，本章将介绍Controller在执行时是如何通过这些组件完成模型绑定功能的，本章的主要内容有：&lt;/p&gt;
&lt;p&gt;　　● &lt;a href=&quot;http://www.cnblogs.com/selimsong/p/8509359.html#first&quot;&gt;模型绑定过程&lt;/a&gt;&lt;br/&gt;　　　　○ &lt;a href=&quot;http://www.cnblogs.com/selimsong/p/8509359.html#modelbinder&quot;&gt;获取ModelBinder&lt;/a&gt;&lt;br/&gt;　　　　○ &lt;a href=&quot;http://www.cnblogs.com/selimsong/p/8509359.html#valueprovider&quot;&gt;获取ValueProvider&lt;/a&gt;&lt;br/&gt;　　　　○ &lt;a href=&quot;http://www.cnblogs.com/selimsong/p/8509359.html#metadata&quot;&gt;创建ModelMetadata&lt;/a&gt;&lt;br/&gt;　　　　○ &lt;a href=&quot;http://www.cnblogs.com/selimsong/p/8509359.html#bind&quot;&gt;模型绑定&lt;/a&gt;&lt;br/&gt;　　● &lt;a href=&quot;http://www.cnblogs.com/selimsong/p/8509359.html#defaultmodelbinder&quot;&gt;DefaultModelBinder的模型绑定过程&lt;/a&gt;&lt;br/&gt;　　　　○ &lt;a href=&quot;http://www.cnblogs.com/selimsong/p/8509359.html#simply&quot;&gt;简单模型绑定&lt;/a&gt;&lt;br/&gt;　　　　○ &lt;a href=&quot;http://www.cnblogs.com/selimsong/p/8509359.html#complex&quot;&gt;复杂模型绑定&lt;/a&gt;&lt;br/&gt;　　● &lt;a href=&quot;http://www.cnblogs.com/selimsong/p/8509359.html#summary&quot;&gt;小结&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;模型的绑定过程&lt;/h2&gt;
&lt;p&gt; 　　之前的文章介绍过MVC中Controller的创建与执行(可参考：《&lt;a id=&quot;post_title_link_7677108&quot; href=&quot;http://www.cnblogs.com/selimsong/p/7677108.html&quot;&gt;ASP.NET没有魔法——ASP.NET MVC Controller的实例化与执行&lt;/a&gt;》)，其执行过程包含临时数据加载、Action方法名称获取、&lt;strong&gt;Action方法执行&lt;/strong&gt;及临时数据保存。&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/640251/201803/640251-20180305155423780-88717980.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　而模型绑定过程实际上就包含在Action方法的执行(ActionInvoker.InvokeAction方法)中，之前的文章《&lt;a id=&quot;link_post_title&quot; class=&quot;link-post-title&quot; href=&quot;http://www.cnblogs.com/selimsong/p/7839459.html&quot;&gt;ASP.NET没有魔法——ASP.NET MVC 过滤器(Filter)&lt;/a&gt;》也通过从过滤器的角度介绍了Action的执行，其中一点就是当授权过滤器执行完成并&lt;span&gt;通过授权后将开始执行其它过滤器与Action方法&lt;/span&gt;，如下图：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/640251/201803/640251-20180305155502802-1137090440.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　而Action方法的执行核心代码如下：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/640251/201803/640251-20180305155556319-1501622693.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　代码中的&lt;span&gt;GetParameterValues方法&lt;/span&gt;的作用就是根据Controller的上下文以及Action的描述信息来获取Action参数的过程，也&lt;span&gt;就是模型绑定的过程&lt;/span&gt;，其代码如下：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/640251/201803/640251-20180305160504025-1391637936.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　上面代码就是&lt;span&gt;获取Action的参数数组&lt;/span&gt;，然后&lt;span&gt;遍历这个数组&lt;/span&gt;，通过GetParameterValue方法&lt;span&gt;完成单个参数的绑定工作&lt;/span&gt;，&lt;span&gt;最后&lt;/span&gt;以参数名称为Key，绑定后的值为对象&lt;span&gt;存储在字典中&lt;/span&gt;返回。下面是GetParameterValue方法的具体代码：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/640251/201803/640251-20180305160525335-1441381564.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　从代码看来整个绑定过程有如下几个步骤：&lt;/p&gt;
&lt;p&gt;　　1. 根据参数获取ModelBinder。&lt;br/&gt;　　2. 从Controller中获取值提供器。&lt;br/&gt;　　3. 创建模型绑定上下文，该上下文中包含Metadata、模型名称、值提供器等内容。&lt;br/&gt;　　4. 通过获取的ModelBinder完成模型绑定。&lt;br/&gt;　　接下来就对这些核心步骤进行分析。&lt;/p&gt;
&lt;h3&gt;获取ModelBinder&lt;/h3&gt;
&lt;p&gt;　　代码中调用GetModelBinder方法，根据参数信息获取一个ModelBinder，下图是实现代码：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/640251/201803/640251-20180305160610863-752312754.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　从代码中可以看出，获取ModelBinder的方式有两种，首先从通过参数描述信息(ParameterDescriptor)来&lt;span&gt;获取通过特性标记的&lt;/span&gt;方式应用到该参数的&lt;span&gt;ModelBinder&lt;/span&gt;，其核心代码如下(ParameterDescriptor默认使用的类型是ReflectedParameterDescriptor，通过反射的方式获取特性)：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/640251/201803/640251-20180305161849878-840039324.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;span&gt;注：更多关于通过特性应用自定义ModelBinder的内容可参考：&lt;/span&gt;&lt;a href=&quot;https://www.codeproject.com/articles/605595/asp-net-mvc-custom-model-binder&quot; target=&quot;_blank&quot;&gt;https://www.codeproject.com/articles/605595/asp-net-mvc-custom-model-binder&lt;/a&gt;&lt;br/&gt;　　当参数上没有通过特性指定ModelBinder时，将&lt;span&gt;通过Binders根据参数类型来获取ModelBinder&lt;/span&gt;，这里的Binders实际上就是ModelBinderDictionary，前面介绍过这个字典中以ModelBinder的类型名称为Key保存了所有的ModelBinder，ModelBinderDictionary的GetBinder方法如下：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/640251/201803/640251-20180305161935826-812935957.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　首先通过ModelBinderProviders查找(&lt;span&gt;注：默认情况下ASP.NET MVC没有使用ModelBinderProvider：&lt;a href=&quot;http://www.dotnetcurry.com/aspnet-mvc/1261/custom-model-binder-aspnet-mvc&quot; target=&quot;_blank&quot;&gt;http://www.dotnetcurry.com/aspnet-mvc/1261/custom-model-binder-aspnet-mvc&lt;/a&gt;&lt;/span&gt;)，然后再&lt;span&gt;通过类型名称在字典中匹配&lt;/span&gt;对应的ModelBinder，最后从模型类型上找是否通过特性指定了Modelbinder。&lt;br/&gt;　　&lt;span&gt;如果以上都找不到那么&lt;strong&gt;使用默认的ModelBinder&lt;/strong&gt;&lt;/span&gt;，ModelBinderDictionary的结构如下图：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/640251/201803/640251-20180305162009019-1783430525.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;获取ValueProvider&lt;/h3&gt;
&lt;p&gt;　　ValueProvider用于提供数据，此处直接使用Controller中的ValueProvider：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/640251/201803/640251-20180305162643058-752434955.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　而Controller中的ValueProvider是遍历所有ValueProviderFactory根据Controller上下文创建的一个提供器集合：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/640251/201803/640251-20180305162718035-552380830.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　一般来说所有的提供器都会被创建，如下图的FormValue提供器，只要Controller上下文不为空就会有：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/640251/201803/640251-20180305162741585-697885856.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; 　　但是&lt;strong&gt;&lt;span&gt;Json提供器比较特殊&lt;/span&gt;&lt;/strong&gt;，需要请求内容为Json格式并能够正确反序列化才会创建，这也就解释了文章开始时&lt;span&gt;只有发送Json请求时才会有Json值提供器存在&lt;/span&gt;的问题，下面是Json值提供器创建的代码，必须保证反序列化的对象不为空才会将该提供器保存到字典中：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/640251/201803/640251-20180306155451587-619185989.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　而反序列化GetDseserializedObject方法，则是需要请求类型为Json，才会进行反序列化工作：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/640251/201803/640251-20180306155524842-1340611157.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;创建ModelMetadata&lt;/h3&gt;
&lt;p&gt;　　ModelMetadata是用来描述模型的元数据，在进行模型绑定时元数据被包含在模型绑定上下文(ModelBindingContext)对象中，这个上下文对象除了模型元数据外，还包含属性过滤器以及模型名称等信息。&lt;/p&gt;
&lt;p&gt;　　而代码显示元数据获取实际上是通过一个元数据提供器的组件完成的其代码如下：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/640251/201803/640251-20180306155610297-2004679851.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　根据代码分析，实际上使用了一个名为CachedDataAnnotationsModelMetadataProvider的元数据提供器，其获取Metadata的代码如下：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/640251/201803/640251-20180306155636973-114049576.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;span&gt;先获取特性列表&lt;/span&gt;，然后通过该特性列表创建Metadata，获取特性很好理解，而创建Metadata的核心代码如下(部分)，它&lt;span&gt;实例化一个元数据对象&lt;/span&gt;后，通过&lt;span&gt;在特性列表中查找特定的特性然后赋值的方式&lt;/span&gt;&lt;strong&gt;实现了元数据的创建&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/640251/201803/640251-20180307113134862-1157548639.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;span&gt;注：实际上ASP.NET MVC中将元数据特性分为以下几种，除了数据类型、必填等属性外，还包含了很多用于展示的特性，这些展示特性将在渲染View的时候使用，更多内容也将在后续介绍：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/640251/201803/640251-20180306155705063-960243476.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;span&gt;另外ASP.NET MVC中默认使用基于缓存机制的元数据组件以提高性能，相关类型如下图所示，本文不再详解：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/640251/201803/640251-20180306155733008-720138635.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;模型绑定&lt;/h3&gt;
&lt;p&gt; 　　当完成以上步骤后，将通过最开始获取的ModelBinder通过ControllerContext(包含请求数据)以及BindingContext(包含值提供器、模型信息等数据)完成模型绑定。之前也介绍过ModelBinder是根据参数的类型来获取的，比如对于文件数据将会使用HttpPostedFileBaseModelBinder类型来完成，如下图代码就是文件模型绑定的代码：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/640251/201803/640251-20180307114609154-432823854.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　代码中直接根据模型名称(即参数名称)从请求的文件中获取文件数据，简单直接。&lt;/p&gt;
&lt;p&gt;　　但在模型绑定中很少有如文件这种特殊类型的绑定，更多的是一些基础类型以及自定义类型的绑定，而微软并没有针对每一个基础类型都创建了对应的绑定器，所有的一切都是通过DefaultModelBinder完成的，所以DefaultModelBinder的绑定过程相对于特定类型的模型绑定过程来说相对要复杂。&lt;/p&gt;
&lt;h2&gt;DefaultModelBinder的模型绑定过程&lt;/h2&gt;
&lt;p&gt;　　上面提到了模型绑定的大部分情况是使用DefaultModelBinder完成的，下面就对该绑定器如何完成模型绑定进行介绍，先上代码：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/640251/201803/640251-20180306155816817-551298401.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　上面代码做了以下几件事：&lt;br/&gt;　　1. 确保有足够的栈空间来执行.Net中平均大小的函数。&lt;br/&gt;　　2. 如果&lt;strong&gt;模型名称不为空&lt;/strong&gt;、&lt;strong&gt;数据源中不包含以该模型名称为前缀的值&lt;/strong&gt;、并且&lt;strong&gt;参数绑定信息没有前缀&lt;/strong&gt;时，重新初始化绑定上下文，相比原有上下文&lt;span&gt;去除FallbackToEmptyPrefix&lt;/span&gt;以及&lt;span&gt;ModelName属性&lt;/span&gt;并将&lt;span&gt;该模型视为&lt;strong&gt;复杂模型&lt;/strong&gt;&lt;/span&gt;：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/640251/201803/640251-20180306155847961-742151240.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;span&gt;注：上面这种情况可参考《&lt;a id=&quot;link_post_title&quot; class=&quot;link-post-title&quot; href=&quot;http://www.cnblogs.com/selimsong/p/8377283.html&quot;&gt;ASP.NET没有魔法——ASP.NET MVC 模型绑定&lt;/a&gt;》文章中的例子，该例子中存在&lt;strong&gt;参数名obj&lt;/strong&gt;，但是QueryString中&lt;strong&gt;没有使用obj作为前缀&lt;/strong&gt;，action参数也&lt;strong&gt;没有使用bind特性指定前缀&lt;/strong&gt;，这样的类型将被视为复杂类型，如下图：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/640251/201803/640251-20180306161121494-177368271.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　3. 获取是否验证标记，并根据模型名称从ValueProvider中获取数据，获取的数据为ValueProviderResult类型，如果该&lt;span&gt;结果存在&lt;/span&gt;那么&lt;span&gt;&lt;strong&gt;进行简单模型绑定&lt;/strong&gt;&lt;/span&gt;。(&lt;span&gt;注：ValueProviderResult负责简单类型转换，后续介绍，另外这里的验证涉及到.Net中System.Web的基础实现，所以不再进行深入介绍&lt;/span&gt;)&lt;br/&gt;　　4. 如果模型&lt;span&gt;属于复杂模型&lt;/span&gt;，则&lt;span&gt;&lt;strong&gt;进行复杂模型绑定&lt;/strong&gt;&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;　　默认模型绑定器中看到了简单类型与复杂类型概念的使用，从代码中看出模型绑定的核心内容也存在于简单、复杂模型的绑定过程中。&lt;/p&gt;
&lt;h3&gt;简单模型绑定&lt;/h3&gt;
&lt;p&gt;　　之前介绍了&lt;span&gt;简单类型&lt;/span&gt;，实际上就&lt;span&gt;是可以从字符串直接转换的类型&lt;/span&gt;，除此之外还可以通过自定义类型转换器的方式将复杂类型转换为简单类型。&lt;br/&gt;　　那么对于简单模型绑定来说，实际上&lt;span&gt;核心就是获取到对应的值后，使用类型转换器将获取到的值转换为目标类型&lt;/span&gt;。下面是简单模型绑定的实现代码：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/640251/201803/640251-20180306163319053-1882389131.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　根据代码可以看出简单模型绑定核心如下：&lt;br/&gt;　　1. 如果模型类型与从值提供器中获取的类型一致，那么不需要转换就可以直接返回。&lt;br/&gt;　　2. 类型转换的核心方法是DefaultModelBinder.ConvertProviderResult，实际是获取类型转换器完成了转换功能，最终转换代码如下(ValueProviderResult的ConvertSimpleType方法，更多细节可参考反编译代码)：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/640251/201803/640251-20180306163356565-932579844.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　  3. 简单模型的转换考虑到了数组类型以及集合类型的转换。&lt;/p&gt;
&lt;h3&gt;复杂模型绑定&lt;/h3&gt;
&lt;p&gt;　　一般来说基本类型和一些常用的类型均为简单类型，而复杂模型实际上是由一系列简单类型组成的，所以&lt;strong&gt;&lt;span&gt;复杂模型的绑定是将其拆分成一个个简单类型完成绑定后再组装的过程&lt;/span&gt;&lt;/strong&gt;，其主要代码如下(由于完整代码较多，本文只介绍关键点，更多信息可参考DefaultModelBinder的反编译源码)：　&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('18646399-8e3d-4c6f-866c-47dec4e9b410')&quot; readability=&quot;45.5&quot;&gt;&lt;img id=&quot;code_img_closed_18646399-8e3d-4c6f-866c-47dec4e9b410&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_18646399-8e3d-4c6f-866c-47dec4e9b410&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('18646399-8e3d-4c6f-866c-47dec4e9b410',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_18646399-8e3d-4c6f-866c-47dec4e9b410&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;86&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;             &lt;span&gt;internal&lt;/span&gt; &lt;span&gt;object&lt;/span&gt;&lt;span&gt; BindComplexModel(ControllerContext controllerContext, ModelBindingContext bindingContext)
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;             &lt;span&gt;object&lt;/span&gt; model =&lt;span&gt; bindingContext.Model;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;             Type modelType =&lt;span&gt; bindingContext.ModelType;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (model == &lt;span&gt;null&lt;/span&gt; &amp;amp;&amp;amp;&lt;span&gt; modelType.IsArray)
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;                 Type elementType =&lt;span&gt; modelType.GetElementType();
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;                 Type modelType2 = &lt;span&gt;typeof&lt;/span&gt;(List&amp;lt;&amp;gt;).MakeGenericType(&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Type[]
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;                {
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;                    elementType
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;                });
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;                 &lt;span&gt;object&lt;/span&gt; collection = &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.CreateModel(controllerContext, bindingContext, modelType2);
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;                 ModelBindingContext bindingContext2 = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; ModelBindingContext
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;                {
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;                     ModelMetadata = ModelMetadataProviders.Current.GetMetadataForType(() =&amp;gt;&lt;span&gt; collection, modelType2),
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;                     ModelName =&lt;span&gt; bindingContext.ModelName,
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;                     ModelState =&lt;span&gt; bindingContext.ModelState,
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;                     PropertyFilter =&lt;span&gt; bindingContext.PropertyFilter,
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;                     ValueProvider =&lt;span&gt; bindingContext.ValueProvider
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;                };
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;                 IList list = (IList)&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.UpdateCollection(controllerContext, bindingContext2, elementType);
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt; (list == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;                {
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;                     &lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;                 Array array =&lt;span&gt; Array.CreateInstance(elementType, list.Count);
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;                 list.CopyTo(array, &lt;span&gt;0&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;                 &lt;span&gt;return&lt;/span&gt;&lt;span&gt; array;
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;             &lt;span&gt;else&lt;/span&gt;
&lt;span&gt;31&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt; (model == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; &lt;span&gt;                {
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt;                     model = &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.CreateModel(controllerContext, bindingContext, modelType);
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt;                 Type type = TypeHelpers.ExtractGenericInterface(modelType, &lt;span&gt;typeof&lt;/span&gt;(IDictionary&amp;lt;, &amp;gt;&lt;span&gt;));
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt; (type != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt; &lt;span&gt;                {
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt;                     Type[] genericArguments =&lt;span&gt; type.GetGenericArguments();
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt;                     Type keyType = genericArguments[&lt;span&gt;0&lt;/span&gt;&lt;span&gt;];
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt;                     Type valueType = genericArguments[&lt;span&gt;1&lt;/span&gt;&lt;span&gt;];
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt;                     ModelBindingContext modelBindingContext = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; ModelBindingContext();
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt;                     modelBindingContext.ModelMetadata = ModelMetadataProviders.Current.GetMetadataForType(() =&amp;gt;&lt;span&gt; model, modelType);
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt;                     modelBindingContext.ModelName =&lt;span&gt; bindingContext.ModelName;
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt;                     modelBindingContext.ModelState =&lt;span&gt; bindingContext.ModelState;
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt;                     modelBindingContext.PropertyFilter =&lt;span&gt; bindingContext.PropertyFilter;
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt;                     modelBindingContext.ValueProvider =&lt;span&gt; bindingContext.ValueProvider;
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt;                     ModelBindingContext bindingContext3 =&lt;span&gt; modelBindingContext;
&lt;/span&gt;&lt;span&gt;49&lt;/span&gt;                     &lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.UpdateDictionary(controllerContext, bindingContext3, keyType, valueType);
&lt;/span&gt;&lt;span&gt;50&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;51&lt;/span&gt;                 Type type2 = TypeHelpers.ExtractGenericInterface(modelType, &lt;span&gt;typeof&lt;/span&gt;(IEnumerable&amp;lt;&amp;gt;&lt;span&gt;));
&lt;/span&gt;&lt;span&gt;52&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt; (type2 != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;53&lt;/span&gt; &lt;span&gt;                {
&lt;/span&gt;&lt;span&gt;54&lt;/span&gt;                     Type type3 = type2.GetGenericArguments()[&lt;span&gt;0&lt;/span&gt;&lt;span&gt;];
&lt;/span&gt;&lt;span&gt;55&lt;/span&gt;                     Type type4 = &lt;span&gt;typeof&lt;/span&gt;(ICollection&amp;lt;&amp;gt;).MakeGenericType(&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Type[]
&lt;/span&gt;&lt;span&gt;56&lt;/span&gt; &lt;span&gt;                    {
&lt;/span&gt;&lt;span&gt;57&lt;/span&gt; &lt;span&gt;                        type3
&lt;/span&gt;&lt;span&gt;58&lt;/span&gt; &lt;span&gt;                    });
&lt;/span&gt;&lt;span&gt;59&lt;/span&gt;                     &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (type4.IsInstanceOfType(model))
&lt;/span&gt;&lt;span&gt;60&lt;/span&gt; &lt;span&gt;                    {
&lt;/span&gt;&lt;span&gt;61&lt;/span&gt;                         ModelBindingContext modelBindingContext2 = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; ModelBindingContext();
&lt;/span&gt;&lt;span&gt;62&lt;/span&gt;                         modelBindingContext2.ModelMetadata = ModelMetadataProviders.Current.GetMetadataForType(() =&amp;gt;&lt;span&gt; model, modelType);
&lt;/span&gt;&lt;span&gt;63&lt;/span&gt;                         modelBindingContext2.ModelName =&lt;span&gt; bindingContext.ModelName;
&lt;/span&gt;&lt;span&gt;64&lt;/span&gt;                         modelBindingContext2.ModelState =&lt;span&gt; bindingContext.ModelState;
&lt;/span&gt;&lt;span&gt;65&lt;/span&gt;                         modelBindingContext2.PropertyFilter =&lt;span&gt; bindingContext.PropertyFilter;
&lt;/span&gt;&lt;span&gt;66&lt;/span&gt;                         modelBindingContext2.ValueProvider =&lt;span&gt; bindingContext.ValueProvider;
&lt;/span&gt;&lt;span&gt;67&lt;/span&gt;                         ModelBindingContext bindingContext4 =&lt;span&gt; modelBindingContext2;
&lt;/span&gt;&lt;span&gt;68&lt;/span&gt;                         &lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.UpdateCollection(controllerContext, bindingContext4, type3);
&lt;/span&gt;&lt;span&gt;69&lt;/span&gt; &lt;span&gt;                    }
&lt;/span&gt;&lt;span&gt;70&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;71&lt;/span&gt;                 &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.BindComplexElementalModel(controllerContext, bindingContext, model);
&lt;/span&gt;&lt;span&gt;72&lt;/span&gt;                 &lt;span&gt;return&lt;/span&gt;&lt;span&gt; model;
&lt;/span&gt;&lt;span&gt;73&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;74&lt;/span&gt;         }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;　　1. 从绑定上下文中获取模型对象(&lt;span&gt;注：因为复杂模型绑定中存在绑定方法的递归调用，所以可能会多次调用BindComplexModel方法，而绑定上下文的模型对象就是用于保存当前递归的所属对象&lt;/span&gt;)。&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/640251/201803/640251-20180306163605018-2051768761.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　2. 如果model不存在则创建，首次绑定复杂对象时model均为null：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/640251/201803/640251-20180306164110359-151361130.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　 3. 开始绑定该模型中的基本模型，从代码中可以看到实际上就是对模型中的&lt;strong&gt;属性&lt;/strong&gt;进行绑定：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/640251/201803/640251-20180306164137847-877440127.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　4. 属性绑定是获取模型的所有属性，然后&lt;strong&gt;遍历&lt;/strong&gt;并完成所有属性的绑定，属性绑定代码如下：&lt;br/&gt;　　　　a. 获取&lt;strong&gt;属性对应类型&lt;/strong&gt;的ModelBinder:&lt;/p&gt;
&lt;p&gt;　　　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/640251/201803/640251-20180306164205604-487660671.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　b. 调用ModelBinder的BindModel方法(如果该属性为简单模型，那么执行简单模型绑定代码，否则递归调用复杂模型绑定代码)&lt;/p&gt;
&lt;p&gt;　　　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/640251/201803/640251-20180306164321651-1034841846.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　c. 将获取的结果赋值给Model对象，然后获取属性的验证器并&lt;span&gt;对该属性进行验证&lt;/span&gt;，错误信息保存到ModelState列表中：&lt;/p&gt;
&lt;p&gt;　　　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/640251/201803/640251-20180306164411272-366908160.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　&lt;span&gt;注：ModelValidatorProvider是用来获取模型验证器的工具，在ASP.NET MVC中有三种内置的验证提供器如下图所示：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/640251/201803/640251-20180306164722083-1543780595.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　其中DataAnnotationsModelValidatorProvider用来获取通过特性标记的模型验证器，也就是《&lt;a id=&quot;link_post_title&quot; class=&quot;link-post-title&quot; href=&quot;http://www.cnblogs.com/selimsong/p/8424735.html&quot;&gt;ASP.NET没有魔法——ASP.NET MVC 模型验证&lt;/a&gt;》文章中介绍的方法，而DataErrorInfoModelValidatorProvider是一种通过实现IDataErrorInfo接口来实现数据功能的提供器，更多信息可参考：&lt;a href=&quot;https://docs.microsoft.com/en-us/aspnet/mvc/overview/older-versions-1/models-data/validating-with-the-idataerrorinfo-interface-cs&quot; target=&quot;_blank&quot;&gt;https://docs.microsoft.com/en-us/aspnet/mvc/overview/older-versions-1/models-data/validating-with-the-idataerrorinfo-interface-cs&lt;/a&gt;&lt;br/&gt;　　　　&lt;a href=&quot;https://www.codeproject.com/articles/39012/form-validation-with-asp-net-mvc-using-the-idataerrorinfo-interface.aspx&quot; target=&quot;_blank&quot;&gt;https://www.codeproject.com/articles/39012/form-validation-with-asp-net-mvc-using-the-idataerrorinfo-interface.aspx&lt;/a&gt;&lt;br/&gt;　　　　最后ClientDataTypeModelValidatorProvider用于客户端验证。&lt;/p&gt;
&lt;p&gt;　　　　&lt;span&gt;注：从代码可以看出ASP.NET MVC中基于特性标记的数据验证功能&lt;strong&gt;仅对&lt;/strong&gt;复杂模型进行验证，在简单特性上使用验证特性是&lt;strong&gt;无效的&lt;/strong&gt;。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/640251/201803/640251-20180307141941399-346679614.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　　　&lt;span&gt;test123长度已经超出6，但是模型状态仍然是有效的。&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;小结&lt;/h2&gt;
&lt;p&gt; 　　本文主要是基于源码介绍了ASP.NET MVC中模型绑定的过程，简单来说模型绑定核心过程如下：&lt;/p&gt;
&lt;p&gt;&lt;em id=&quot;__mceDel&quot;&gt;　　&lt;/em&gt;● 根据参数类型获取ModelBinder。&lt;br/&gt;　　● 获取ValueProvider，如果是Json请求那么创建Json的ValueProvider。&lt;br/&gt;　　● 根据特性标记获取ModelMetadata。&lt;br/&gt;　　● 根据模型类型(简单/复杂)进行数据绑定，简单类型主要是字符串转换为其它简单类型的过程(包括数组/集合的转换)，而复杂类型是将类型本身分解为简单类型后一一&lt;strong&gt;绑定并验证&lt;/strong&gt;的过程。&lt;/p&gt;
&lt;p&gt;参考：&lt;br/&gt;　　&lt;a href=&quot;https://www.codeproject.com/articles/605595/asp-net-mvc-custom-model-binder&quot; target=&quot;_blank&quot;&gt;https://www.codeproject.com/articles/605595/asp-net-mvc-custom-model-binder&lt;/a&gt;&lt;br/&gt;　　&lt;a href=&quot;http://www.dotnetcurry.com/aspnet-mvc/1261/custom-model-binder-aspnet-mvc&quot; target=&quot;_blank&quot;&gt;http://www.dotnetcurry.com/aspnet-mvc/1261/custom-model-binder-aspnet-mvc&lt;/a&gt;&lt;br/&gt;　　&lt;a href=&quot;https://docs.microsoft.com/en-us/aspnet/mvc/overview/older-versions-1/models-data/validating-with-the-idataerrorinfo-interface-cs&quot; target=&quot;_blank&quot;&gt;https://docs.microsoft.com/en-us/aspnet/mvc/overview/older-versions-1/models-data/validating-with-the-idataerrorinfo-interface-cs&lt;/a&gt;&lt;br/&gt;　　&lt;a href=&quot;https://www.codeproject.com/articles/39012/form-validation-with-asp-net-mvc-using-the-idataerrorinfo-interface.aspx&quot; target=&quot;_blank&quot;&gt;https://www.codeproject.com/articles/39012/form-validation-with-asp-net-mvc-using-the-idataerrorinfo-interface.aspx&lt;/a&gt;&lt;br/&gt;　　&lt;a href=&quot;http://dirk.schuermans.me/?p=749&quot; target=&quot;_blank&quot;&gt;http://dirk.schuermans.me/?p=749&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;本文链接：&lt;a id=&quot;Editor_Edit_hlEntryLink&quot; title=&quot;view: ASP.NET没有魔法——ASP.NET MVC 模型绑定解析（下篇）&quot; href=&quot;http://www.cnblogs.com/selimsong/p/8509359.html&quot; target=&quot;_blank&quot;&gt;http://www.cnblogs.com/selimsong/p/8509359.html&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;&lt;a id=&quot;post_title_link_7641799&quot; href=&quot;http://www.cnblogs.com/selimsong/p/7641799.html&quot;&gt;ASP.NET没有魔法——目录&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Wed, 07 Mar 2018 06:40:00 +0000</pubDate>
<dc:creator>7m鱼</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/selimsong/p/8509359.html</dc:identifier>
</item>
<item>
<title>详解Java的自动装箱与拆箱(Autoboxing and unboxing) - 低调的小白</title>
<link>http://www.cnblogs.com/wang-yaz/p/8516151.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/wang-yaz/p/8516151.html</guid>
<description>&lt;p&gt;一、什么是自动装箱拆箱 &lt;br/&gt;很简单，下面两句代码就可以看到装箱和拆箱过程&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;自动装箱&lt;/span&gt;
&lt;span&gt;2&lt;/span&gt; Integer total = 99&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; 
&lt;span&gt;4&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;自定拆箱&lt;/span&gt;
&lt;span&gt;5&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; totalprim = total;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;简单一点说，装箱就是自动将基本数据类型转换为包装器类型；拆箱就是自动将包装器类型转换为基本数据类型。&lt;/p&gt;
&lt;p&gt;下面我们来看看需要装箱拆箱的类型有哪些：&lt;/p&gt;
&lt;p&gt;&lt;img title=&quot;&quot; src=&quot;http://img.blog.csdn.net/20160329101454749&quot; alt=&quot;这里写图片描述&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img title=&quot;&quot; src=&quot;http://img.blog.csdn.net/20150922151443893&quot; alt=&quot;这里写图片描述&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这个过程是自动执行的，那么我们需要看看它的执行过程：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;public class Main {
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;     public static &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;自动装箱&lt;/span&gt;
&lt;span&gt;4&lt;/span&gt;     Integer total = 99&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt; 
&lt;span&gt;6&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;自定拆箱&lt;/span&gt;
&lt;span&gt;7&lt;/span&gt;     &lt;span&gt;int&lt;/span&gt; totalprim =&lt;span&gt; total;
&lt;/span&gt;&lt;span&gt;8&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;9&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;反编译class文件之后得到如下内容：&lt;/p&gt;
&lt;p&gt; &lt;span class=&quot;cnblogs_code&quot;&gt;&lt;span&gt;1&lt;/span&gt; javap -c StringTest&lt;/span&gt; &lt;/p&gt;
&lt;p&gt;&lt;img title=&quot;&quot; src=&quot;http://img.blog.csdn.net/20150922153411441&quot; alt=&quot;这里写图片描述&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Integer total = 99; &lt;br/&gt;执行上面那句代码的时候，系统为我们执行了： &lt;br/&gt;Integer total = Integer.valueOf(99);&lt;/p&gt;
&lt;p&gt;int totalprim = total; &lt;br/&gt;执行上面那句代码的时候，系统为我们执行了： &lt;br/&gt;int totalprim = total.intValue();&lt;/p&gt;
&lt;p&gt;我们现在就以Integer为例，来分析一下它的源码： &lt;br/&gt;1、首先来看看Integer.valueOf函数&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; Integer valueOf(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; i) {
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; &lt;span&gt;return&lt;/span&gt;  i &amp;gt;= 128 || i &amp;lt; -128 ? &lt;span&gt;new&lt;/span&gt; Integer(i) : SMALL_VALUES[i + 128&lt;span&gt;];
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;它会首先判断i的大小：如果i小于-128或者大于等于128，就创建一个Integer对象，否则执行SMALL_VALUES[i + 128]。&lt;/p&gt;
&lt;p&gt;首先我们来看看Integer的构造函数：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; value;
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; 
&lt;span&gt;3&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; Integer(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; value) {
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;     &lt;span&gt;this&lt;/span&gt;.value =&lt;span&gt; value;
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt; 
&lt;span&gt;7&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; Integer(String string) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; NumberFormatException {
&lt;/span&gt;&lt;span&gt;8&lt;/span&gt;     &lt;span&gt;this&lt;/span&gt;&lt;span&gt;(parseInt(string));
&lt;/span&gt;&lt;span&gt;9&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;它里面定义了一个value变量，创建一个Integer对象，就会给这个变量初始化。第二个传入的是一个String变量，它会先把它转换成一个int值，然后进行初始化。&lt;/p&gt;
&lt;p&gt;下面看看SMALL_VALUES[i + 128]是什么东西：&lt;/p&gt;
&lt;pre name=&quot;code&quot; class=&quot;prettyprint&quot;&gt;
 &lt;span class=&quot;cnblogs_code&quot;&gt;&lt;span&gt;1&lt;/span&gt; &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; Integer[] SMALL_VALUES = &lt;span&gt;new&lt;/span&gt; Integer[256];&lt;/span&gt; 
&lt;/pre&gt;
&lt;p&gt;它是一个静态的Integer数组对象，也就是说最终valueOf返回的都是一个Integer对象。&lt;/p&gt;
&lt;p&gt;所以我们这里可以总结一点：装箱的过程会创建对应的对象，这个会消耗内存，所以装箱的过程会增加内存的消耗，影响性能。&lt;/p&gt;
&lt;p&gt;2、接着看看intValue函数&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;@Override
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; intValue() {
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; value;
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这个很简单，直接返回value值即可。&lt;/p&gt;
&lt;p&gt;二、相关问题 &lt;br/&gt;上面我们看到在Integer的构造函数中，它分两种情况： &lt;/p&gt;
&lt;p&gt;1、i &amp;gt;= 128 || i &amp;lt; -128 =====&amp;gt; new Integer(i) &lt;br/&gt;2、i &amp;lt; 128 &amp;amp;&amp;amp; i &amp;gt;= -128 =====&amp;gt; SMALL_VALUES[i + 128]&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; Integer[] SMALL_VALUES = &lt;span&gt;new&lt;/span&gt; Integer[256];
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;SMALL_VALUES本来已经被创建好，也就是说在i &amp;gt;= 128 || i &amp;lt; -128是会创建不同的对象，在i &amp;lt; 128 &amp;amp;&amp;amp; i &amp;gt;= -128会根据i的值返回已经创建好的指定的对象。&lt;/p&gt;
&lt;p&gt;说这些可能还不是很明白，下面我们来举个例子吧：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Main {
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; 
&lt;span&gt; 4&lt;/span&gt;         Integer i1 = 100&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;         Integer i2 = 100&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;         Integer i3 = 200&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;         Integer i4 = 200&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; 
&lt;span&gt; 9&lt;/span&gt;         System.out.println(i1==i2);  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt;         System.out.println(i3==i4);  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;false&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;代码的后面，我们可以看到它们的执行结果是不一样的，为什么，在看看我们上面的说明。 &lt;br/&gt;1、i1和i2会进行自动装箱，执行了valueOf函数，它们的值在(-128,128]这个范围内，它们会拿到SMALL_VALUES数组里面的同一个对象SMALL_VALUES[228]，它们引用到了同一个Integer对象，所以它们肯定是相等的。&lt;/p&gt;
&lt;p&gt;2、i3和i4也会进行自动装箱，执行了valueOf函数，它们的值大于128，所以会执行new Integer(200)，也就是说它们会分别创建两个不同的对象，所以它们肯定不等。&lt;/p&gt;
&lt;p&gt;下面我们来看看另外一个例子：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Main {
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; 
&lt;span&gt; 4&lt;/span&gt;         Double i1 = 100.0&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;         Double i2 = 100.0&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;         Double i3 = 200.0&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;         Double i4 = 200.0&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; 
&lt;span&gt; 9&lt;/span&gt;         System.out.println(i1==i2); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;false&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt;         System.out.println(i3==i4); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;false&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;看看上面的执行结果，跟Integer不一样，这样也不必奇怪，因为它们的valueOf实现不一样，结果肯定不一样，那为什么它们不统一一下呢？ &lt;br/&gt;这个很好理解，因为对于Integer，在(-128,128]之间只有固定的256个值，所以为了避免多次创建对象，我们事先就创建好一个大小为256的Integer数组SMALL_VALUES，所以如果值在这个范围内，就可以直接返回我们事先创建好的对象就可以了。&lt;/p&gt;
&lt;p&gt;但是对于Double类型来说，我们就不能这样做，因为它在这个范围内个数是无限的。 &lt;br/&gt;总结一句就是：在某个范围内的整型数值的个数是有限的，而浮点数却不是。&lt;/p&gt;
&lt;p&gt;所以在Double里面的做法很直接，就是直接创建一个对象，所以每次创建的对象都不一样。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; Double valueOf(&lt;span&gt;double&lt;/span&gt;&lt;span&gt; d) {
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Double(d);
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;下面我们进行一个归类： &lt;br/&gt;Integer派别：Integer、Short、Byte、Character、Long这几个类的valueOf方法的实现是类似的。 &lt;br/&gt;Double派别：Double、Float的valueOf方法的实现是类似的。每次都返回不同的对象。&lt;/p&gt;
&lt;p&gt;下面对Integer派别进行一个总结，如下图： &lt;br/&gt;&lt;img title=&quot;&quot; src=&quot;http://img.blog.csdn.net/20150922153039509&quot; alt=&quot;这里写图片描述&quot;/&gt;&lt;/p&gt;
&lt;p&gt;下面我们来看看另外一种情况：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Main {
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; 
&lt;span&gt; 4&lt;/span&gt;         Boolean i1 = &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;         Boolean i2 = &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;         Boolean i3 = &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;         Boolean i4 = &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; 
&lt;span&gt; 9&lt;/span&gt;         System.out.println(i1==i2);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt;         System.out.println(i3==i4);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可以看到返回的都是true，也就是它们执行valueOf返回的都是相同的对象。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; Boolean valueOf(&lt;span&gt;boolean&lt;/span&gt;&lt;span&gt; b) {
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; b ?&lt;span&gt; Boolean.TRUE : Boolean.FALSE;
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可以看到它并没有创建对象，因为在内部已经提前创建好两个对象，因为它只有两种情况，这样也是为了避免重复创建太多的对象。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; Boolean TRUE = &lt;span&gt;new&lt;/span&gt; Boolean(&lt;span&gt;true&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; 
&lt;span&gt;3&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; Boolean FALSE = &lt;span&gt;new&lt;/span&gt; Boolean(&lt;span&gt;false&lt;/span&gt;);
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;上面把几种情况都介绍到了，下面来进一步讨论其他情况。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; Integer num1 = 400&lt;span&gt;;  
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; num2 = 400&lt;span&gt;;  
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; System.out.println(num1 == num2); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;pre name=&quot;code&quot; class=&quot;prettyprint&quot;&gt;
说明num1 == num2进行了拆箱操作
&lt;/pre&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; Integer num1 = 100&lt;span&gt;;  
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; num2 = 100&lt;span&gt;;  
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; System.out.println(num1.equals(num2));  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;我们先来看看equals源码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;@Override
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt;&lt;span&gt; equals(Object o) {
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; (o &lt;span&gt;instanceof&lt;/span&gt; Integer) &amp;amp;&amp;amp; (((Integer) o).value ==&lt;span&gt; value);
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;我们指定equal比较的是内容本身，并且我们也可以看到equal的参数是一个Object对象，我们传入的是一个int类型，所以首先会进行装箱，然后比较，之所以返回true，是由于它比较的是对象里面的value值。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; Integer num1 = 100&lt;span&gt;;  
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; num2 = 100&lt;span&gt;;  
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; Long num3 = 200l&lt;span&gt;;  
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; System.out.println(num1 + num2);  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;200&lt;/span&gt;
&lt;span&gt;5&lt;/span&gt; System.out.println(num3 == (num1 + num2));  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;
&lt;span&gt;6&lt;/span&gt; System.out.println(num3.equals(num1 + num2));  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;false&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;1、当一个基础数据类型与封装类进行==、+、-、*、/运算时，会将封装类进行拆箱，对基础数据类型进行运算。 &lt;br/&gt;2、对于num3.equals(num1 + num2)为false的原因很简单，我们还是根据代码实现来说明：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;@Override
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt;&lt;span&gt; equals(Object o) {
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; (o &lt;span&gt;instanceof&lt;/span&gt; Long) &amp;amp;&amp;amp; (((Long) o).value ==&lt;span&gt; value);
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;它必须满足两个条件才为true： &lt;br/&gt;1、类型相同 &lt;br/&gt;2、内容相同 &lt;br/&gt;上面返回false的原因就是类型不同。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; Integer num1 = 100&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; Ingeger num2 = 200&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; Long num3 = 300l&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; System.out.println(num3 == (num1 + num2)); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;我们来反编译一些这个class文件：javap -c StringTest &lt;br/&gt;&lt;img title=&quot;&quot; src=&quot;http://img.blog.csdn.net/20150922153446481&quot; alt=&quot;这里写图片描述&quot;/&gt;&lt;/p&gt;
&lt;p&gt;可以看到运算的时候首先对num3进行拆箱（执行num3的longValue得到基础类型为long的值300），然后对num1和mum2进行拆箱（分别执行了num1和num2的intValue得到基础类型为int的值100和200），然后进行相关的基础运算。&lt;/p&gt;
&lt;p&gt;我们来对基础类型进行一个测试：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; num1 = 100&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; num2 = 200&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; &lt;span&gt;long&lt;/span&gt; mum3 = 300&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; System.out.println(num3 == (num1 + num2)); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;就说明了为什么最上面会返回true.&lt;/p&gt;
&lt;p&gt;所以，当 “==”运算符的两个操作数都是 包装器类型的引用，则是比较指向的是否是同一个对象，而如果其中有一个操作数是表达式（即包含算术运算）则比较的是数值（即会触发自动拆箱的过程）。&lt;/p&gt;
&lt;p&gt;陷阱1：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt;  Integer integer100=&lt;span&gt;null&lt;/span&gt;&lt;span&gt;;  
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;  &lt;span&gt;int&lt;/span&gt; int100=integer100;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这两行代码是完全合法的，完全能够通过编译的，但是在运行时，就会抛出空指针异常。其中，integer100为Integer类型的对象，它当然可以指向null。但在第二行时，就会对integer100进行拆箱，也就是对一个null对象执行intValue()方法，当然会抛出空指针异常。所以，有拆箱操作时一定要特别注意封装类对象是否为null。&lt;/p&gt;
&lt;p&gt;总结： &lt;br/&gt;1、需要知道什么时候会引发装箱和拆箱 &lt;br/&gt;2、装箱操作会创建对象，频繁的装箱操作会消耗许多内存，影响性能，所以可以避免装箱的时候应该尽量避免。&lt;/p&gt;
&lt;p&gt;3、equals(Object o) 因为原equals方法中的参数类型是封装类型，所传入的参数类型（a）是原始数据类型，所以会自动对其装箱，反之，会对其进行拆箱&lt;/p&gt;
&lt;p&gt;4、当两种不同类型用==比较时，包装器类的需要拆箱， 当同种类型用==比较时，会自动拆箱或者装箱&lt;/p&gt;
</description>
<pubDate>Wed, 07 Mar 2018 03:57:00 +0000</pubDate>
<dc:creator>低调的小白</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/wang-yaz/p/8516151.html</dc:identifier>
</item>
<item>
<title>追溯 React Hot Loader 的实现 - iKcamp</title>
<link>http://www.cnblogs.com/ikcamp/p/8521145.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/ikcamp/p/8521145.html</guid>
<description>&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;文：萝卜（沪江金融前端开发工程师）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;本文原创，转载请注明作者及出处&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果你使用 React ，你可以在各个工程里面看到 &lt;a href=&quot;https://github.com/gaearon?tab=repositories&quot;&gt;Dan Abramov&lt;/a&gt; 的身影。他于 2015 年加入 facebook，是 React Hot Loader 、React Transform、redux-thunk、redux-devtools 等等的开发者。同样也是 React、Redux、Create-React-App 的联合开发者。从他的签名 &lt;em&gt;Building tools for humans.&lt;/em&gt; 或许表明了他想打造高效的开发环境以及调试过程。&lt;/p&gt;
&lt;p&gt;作为 Dan 的小迷妹，如他说 &lt;em&gt;is curious where the magic comes from&lt;/em&gt;。这篇文章会带你们去了解 React Hot Loader 的由来，它实现的原理，以及在实现中遇到的问题对应的解决方法。也许你认为这篇文章太过于底层，对日常的业务并没有帮助，但希望你和我一样能通过了解一个实现得到乐趣，以及收获一些思路。&lt;/p&gt;
&lt;h2 id=&quot;首先react-hot-loader-的产生&quot;&gt;首先，React Hot Loader 的产生&lt;/h2&gt;
&lt;p&gt;Dan 在自己的文章里面说到。React Hot Loader 起源一个来自 &lt;a href=&quot;https://stackoverflow.com/questions/24581873/what-exactly-is-hot-module-replacement-in-webpack&quot;&gt;stackoverflow 上的一个问题&lt;/a&gt; —— &lt;strong&gt;what exactly is hot module replacement in webpack&lt;/strong&gt;，这个问题解释了 webpack 的 hot module replacement（下面简称 HMR）到底是什么，以及我们可以利用它做什么，Dan 当时想到也 React 可以和 webpack hot module 以一种有趣的方式结合在一起。&lt;/p&gt;
&lt;p&gt;于是他在 Twitter 上录制了一个简单的视频（请看下面），事实上视频中的实现依赖于它在 React 源代码里面插入了很多自己的全局变量。他本没指望到这个视频能带来多大的关注，但结果是他收到了很多点赞，并且粉丝狂增，他意识到必须以一个真正的工程去实现。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2018/3/7/161fe52da58a5c77?w=300&amp;amp;h=148&amp;amp;f=gif&amp;amp;s=3821796&quot; alt=&quot;上传大小有限制= =&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://cdn-images-1.medium.com/max/400/1*9epU6txsWWSY6lI1OHaqgg.gif&quot;&gt;大图请戳&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;初步尝试-直接使用-hmr&quot;&gt;初步尝试, 直接使用 HMR&lt;/h2&gt;
&lt;p&gt;HMR 是属于 webpack 范畴内的实现，你可以在 &lt;a href=&quot;https://webpack.js.org/api/hot-module-replacement/&quot;&gt;webpack 的官方文档&lt;/a&gt; 看到如何开启它以及它提供的接口。如果你有印象，你会记得使用它需要&lt;br/&gt;在 webpack config 或者 webpack-dev-server cli 里面指定开启 hot reloading 模式，并且在你的代码里写上 &lt;code&gt;module.hot.accept(xxx)&lt;/code&gt;。但 HMR 到底是什么？我们可以用一句话总结：当一个 import 进来的模块发生了变化，HMR 提供了一个接口让我们使用 callback 回调去做一些事情。&lt;/p&gt;
&lt;p&gt;一个使用 HMR 实现自动刷新的 React App 像下面这样：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;13&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;co&quot;&gt;// index.js&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; App &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'./App'&lt;/span&gt;)
&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; React &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'react'&lt;/span&gt;)
&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; ReactDOM &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'react-dom'&lt;/span&gt;)

&lt;span class=&quot;co&quot;&gt;// 像通常一样 render Root Element&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; rootEl &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;getElementById&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'root'&lt;/span&gt;)
&lt;span class=&quot;va&quot;&gt;ReactDOM&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;render&lt;/span&gt;(&lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;App /&lt;span class=&quot;op&quot;&gt;&amp;gt;,&lt;/span&gt; rootEl)

&lt;span class=&quot;co&quot;&gt;// 我们是不是在 dev 环境 ？&lt;/span&gt;
&lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;va&quot;&gt;module&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;hot&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;co&quot;&gt;// 当 App.js 更新了&lt;/span&gt;
  &lt;span class=&quot;va&quot;&gt;module&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;hot&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;accept&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'./App'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; () &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;co&quot;&gt;// require 进来更新的 App.js 重新render&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; NextApp &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'./App'&lt;/span&gt;)
    &lt;span class=&quot;va&quot;&gt;ReactDOM&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;render&lt;/span&gt;(&lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;NextApp /&lt;span class=&quot;op&quot;&gt;&amp;gt;,&lt;/span&gt; rootEl)
  &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;请注意，这个实现没有使用 React Hot Loader 或者 React Transform 或者任何其他的，这仅仅是 webpack 的HMR 的 api&lt;/strong&gt;。而这里的 callback 回调函数当然是 re-render 我们的 app。&lt;/p&gt;
&lt;p&gt;得益于 HMR API 的设计，在嵌套的组件也能实现更新。如果一个模块没有指明如何去更新自己，那么引入这个模块的另一个模块也会被包含在热更新的 bundle 里，这些更新会”冒泡“，直到某个 import 它们的模块 &quot;接收&quot; 更新。如果有些模块最终没有被&quot;接受&quot;，那么热更新失败，控制台会打印出警告。为了“接受”更新，你只需要调用 &lt;code&gt;module.hot.accept('./name', callback)&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;因为我们在 index.js 里的接受了 App.js 的更新 ，这使得我们隐性的接受了所有从 App.js 引入的所有模块（component）的更新。打个比方，假如我编辑了 Button.js 组件，而它被 UserProfile.js 以及 Navbar.js import， 而这两个模块都被 App.js import 引入了。因为 index.js import 了 App.js，并且它包含了 &lt;code&gt;module.hot.accept('./App', callback)&lt;/code&gt; ，Webpack 会自动产生一个包含以上所有文件的 “updated bundle”， 并且运行我们提供的 callback。&lt;/p&gt;
&lt;p&gt;你以为 hot reloading 就到此为止了吗，当然远远不够 😉 。&lt;/p&gt;
&lt;h2 id=&quot;问题组件的-state-和-dom-被销毁&quot;&gt;问题：组件的 state 和 DOM 被销毁。&lt;/h2&gt;
&lt;p&gt;当我们的 App.js 更新，实际上是有个新的 App.js 用 script 标签注入到 html， 并且重新执行了一次。此时新生成的 component 和之前的是一个组件的不同版本，它们是不同版本的同一个组件，但是 NextApp !== App。&lt;/p&gt;
&lt;p&gt;如果你了解 React ，你会知道当下一个 component 的 type 和之前的不一样，它会 unmount 之前那个。这就是为什么 state 和 DOM 会被销毁。&lt;/p&gt;
&lt;p&gt;在解决 state 保留的问题上，有人认为如果工程依赖一个单一的 state 树，那没有必要费大精力去保留组件自身的 state。因为在这种类型的 app 里面我们关注的更多的是全局的这个 state 树，而去保存这个全局的 state 树是很容易做到的，比如你可以把它保存到 localstorage里面，当 store 初始化的时候你去读取它，这样的话连刷新都不会丢失状态。&lt;/p&gt;
&lt;p&gt;Dan 接受了这个意见，并且在自己的文章里面总结，如果你使用 redux ，并且主要的状态保存在 redux 的 store 上，这时也许你不需要使用 React-Hot-Loader。&lt;/p&gt;
&lt;p&gt;但他并没有因为仅仅 &lt;strong&gt;有些人&lt;/strong&gt; 可能不需要用到而放弃了 React-Hot-Loader。这才有了下文 😉 。&lt;/p&gt;
&lt;h2 id=&quot;如何解决-state-和-dom-销毁问题&quot;&gt;如何解决 state 和 DOM 销毁问题&lt;/h2&gt;
&lt;p&gt;当你从上面了解了为什么 DOM 和 state 会丢失，也许你就会 和 Dan 一样想到了两种方法。&lt;/p&gt;
&lt;ol readability=&quot;0&quot;&gt;&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;找到一种方式把 React 的实例和 Dom nodes 以及 state 分离，创建一个新组件的新实例，然后用一种方式把它递归地和现有的 Dom 和 state 结合在一起。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;另外一种，代理 component 的 type，这样能让 React 认为 type 没有变。事实上每次 hot update 实现引用的是新的 component type。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;第一种方式看上去好一点，但是 React 暂时没有提供可以分离（聚合）state 以及不销毁 DOM、不运行生命周期去替换一个实例。即使深入到使用 React 的私有 API 达到这个目的，采用第一个方案任然面临着一些细微的问题。&lt;/p&gt;
&lt;p&gt;比如，React components 经常 在 componentDidmount 时候订阅 Flux stores 或者其他数据源。即使我们做到不销毁 Dom 以及 state， 偷偷地用一个新的实例替换旧的实例，旧的实例仍然会继续保持订阅，而新的实例将不会订阅。&lt;/p&gt;
&lt;p&gt;结论是，如果 React 的 state 的订阅是申明式，并且独立于生命周期之外，或者 React 没有那么依赖 class 和 instance， 第一个方法才可行。这些也许会出现在以后的 React 版本里，但是现在并没有。&lt;/p&gt;
&lt;p&gt;于是 Dan 采用了第二种，这也是之后的 React Hot Loader 和 React Transform 所使用的到技巧。&lt;/p&gt;
&lt;p&gt;为此，Dan 建立了一个独立的工程（react-proxy）去做 proxy，你可以在&lt;a href=&quot;https://github.com/gaearon/react-proxy&quot;&gt;这里&lt;/a&gt; 看到它。create-proxy 只是一个底层的工程，它不依赖 wepback 也不依赖 babel。React Hot Loader 和 React Transform 依赖它，它把 React Component 包装到一个个 proxy 里面，这些 “proxy” 只是些 class， 它们表现的就像你自己的class，但是提供你一些钩子让你能对 class 注入新的实现方法，这样相当于让一个已经存在的实例表现的像新的 class，从而不会销毁 state 和 DOM。&lt;/p&gt;
&lt;h2 id=&quot;在哪里-proxy&quot;&gt;在哪里 proxy ？&lt;/h2&gt;
&lt;p&gt;Dan 首先所做的是在 wepback 的 loader 里面 proxy。&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;补充，很多人认为 React Hot Loader 不是一个 “loader”，因为它只是实现 hot reloading 的。这是一个普遍的误解😀。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;之所以叫 “loader” 是因为 webpack 是这么称呼它，而其他 bundlers（打包器）称呼为 “transform”。打个比方，json-loader 把JSON 文件 “transform” 成 javascript modules，style-loader 把 CSS 文件 “transform” 成 js code 然后把它们以 stylesheets 的形式注入。&lt;/p&gt;
&lt;p&gt;而关于 React Hot Loader 你可以在&lt;a href=&quot;https://github.com/gaearon/react-hot-loader/blob/7b0bc31d0a65eeae2742579e12ab10cf43df1af6/index.js#L26-L72&quot;&gt;这里&lt;/a&gt; 看到，在编译的时候它通过 export 找到 component，并且“静默” 的包裹它，然后 export 一个代理的 component 取而代之原来的。&lt;/p&gt;
&lt;p&gt;通过 module.exports 去寻找 components 开始听上去是合理的。开发者们经常把每个组件单独储存在一个文件，自然而然组件将会被exported。然而，随着时间变化，React 社区发生了一些变化，采取了一些新的写法或者思想，这导致了一些问题。&lt;/p&gt;
&lt;ul readability=&quot;1.9756097560976&quot;&gt;&lt;li readability=&quot;1.9551122194514&quot;&gt;
&lt;p&gt;随着高阶组件变得流行，大家开始 export 出来的是一个高阶组件，而不是实际上自己写的组件。 结果导致， React Hot Loader 没有“发现” module.export 里面包裹的组件，所以没有给它们创建 proxy。它们的 DOM 以及 local state 将会被在这些文件每次修改后销毁。这尤其影响像 &lt;a href=&quot;https://github.com/jsstyles/react-jss&quot;&gt;React JSS&lt;/a&gt; 一样利用高阶组件实现样式。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;React 0.14 引进了函数式组件，并且鼓励在一个文件里面最小化拆分组件。即使React Hot Loader 能检测到导出的组件，它也“看”不到那些未被导出的本地的component。所以这些component 将不会包裹在proxy里面，所以会导致在它以及它下面的子树丢失 DOM 以及 state。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;这显然是使得从 &lt;code&gt;module.exports&lt;/code&gt; 去找组件是不可靠的。&lt;/p&gt;
&lt;h2 id=&quot;react-transform-的出现&quot;&gt;React Transform 的出现&lt;/h2&gt;
&lt;p&gt;除了上面提到的从 &lt;code&gt;module.exports&lt;/code&gt; 不可靠之外，第一版的 React-Hot-Loader 还存在一些其他的问题。比如 webpack 的依赖问题，Dan 想做的是一个通用的工具，而不仅限于 webpack，而现在的工具只是一个 webpack 的 loader。&lt;/p&gt;
&lt;p&gt;虽然目前为止只有 webpack 实现了HMR， 但是一旦有其他的编译工具也实现了 HMR，那现有的 &lt;code&gt;loader&lt;/code&gt; 如何集成到新的编译工具里面 ？&lt;/p&gt;
&lt;p&gt;基于这些问题 Dan 曾经写过一篇 &lt;a href=&quot;https://medium.com/@dan_abramov/the-death-of-react-hot-loader-765fa791d7c4&quot;&gt;React-Hot-Loader&lt;/a&gt; 之死的文章，文章中提到虽然 React-Hot-Loader 得到了巨大的关注，并且有很多工程也采取了他的思想，他仍然认为这不是他所想要的。&lt;/p&gt;
&lt;p&gt;此时 &lt;code&gt;Babel&lt;/code&gt; 如浪潮一般突然占领了整个 javascript 世界。Dan 意识到可以采用静态分析的方法去找到这些 component，而 babel 正好很适合做这些。不仅如此，Dan 同样想做一个错误处理的方式，因为当 render() 方法报错的时候，此时组件会处于一种无效状态，而此时 hot reload 是没办法工作的，Dan 想一起 fix 掉这个问题。&lt;/p&gt;
&lt;p&gt;把 component 包裹在一个 proxy 里或者把 component render() 包裹在一个 try/catch 里，听上去都像 “一个函数接受一个component class 并且在它身上做些修改&quot;。&lt;/p&gt;
&lt;p&gt;那为什么不创造一个 Babel plugin 在你的基准代码里去定位 React Component 并且包裹它们，这样就可以进行随意的 transform。&lt;/p&gt;
&lt;h2 id=&quot;react-transform-的实现&quot;&gt;React Transform 的实现&lt;/h2&gt;
&lt;p&gt;如果你在 github 去搜 React Transform ，你可以搜到 gearaon ( dan 在github上的名字，也是唯一一个不使用真名的账号哦~) 几个工程。 这是因为在开始设定 Transform 实现的时候不确定哪些想法最终会有实质作用，所以他拆分了 React Transform 为以下 5 个子工程：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;React Proxy 实现了对 React Component 的底层代理的功能&lt;/li&gt;
&lt;li&gt;React Transform HMR 为每一个传入的 component 创建了一个代理，并且在全局对象里面保持了一个代理的清单，当同一个组件再次经历 transform，它去更新这些 component&lt;/li&gt;
&lt;li&gt;React Transform Catch Error 在 render() 方法外面包了一层t ry/catch, 当出现错误可以显示一个自己配置的组件。&lt;/li&gt;
&lt;li&gt;Babel Plugin for React Transform 会在你的基准代码里找到所有的React component ，在编译的时候提取它们的信息，并且把它们包裹在你选择使用的 Transform 里（比如，React Transform HMR）&lt;/li&gt;
&lt;li&gt;React Transform Boilerplate 是个模板，展示如何将这些技术组合在一起使用&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;这种模块化带了好处，同时也带来了弊端，弊端就是使用者在不清楚原理的情况下，不知道这些工程到底如何关联起来使用。并且这里有太多的概念暴露给了使用者， “proxies”， “HMR”， “hot middleware”, “error catcher”, 这使得用户感到很迷惑。&lt;/p&gt;
&lt;h3 id=&quot;问题高阶组件还是存在问题&quot;&gt;问题：高阶组件还是存在问题&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;当你解决了这些问题，尽量避免引入由解决它们带来的新的问题&lt;/em&gt;。&lt;/p&gt;
&lt;p&gt;还记得当年 React-Hot-Loader 在高阶组件上面束手无策吗，它没办法通过 &lt;code&gt;module.export&lt;/code&gt; 导出的，包裹在高阶组件里面的组件。而 React Transform 通过静态检查这些组件的生命去“fix”这个问题，寻找继承自&lt;br/&gt;React.Component 或者使用 React.createClass() 申明的 class。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;
// React Hot Loader 找不到它
// React Transform 找得到它
class Counter extends Component {
  constructor(props) {
    super(props)
    this.state = { counter: 0 }
    this.handleClick = this.handleClick.bind(this)
  }
  handleClick() {
    this.setState({
      counter: this.state.counter + 1
    })
  }
  render() {
    return (
      &amp;lt;div className={this.props.sheet.container} onClick={this.handleClick}&amp;gt;
        {this.state.counter}
      &amp;lt;/div&amp;gt;
    )
  }
}

const styles = {
  container: { 
    backgroundColor: 'yellow'
  }
}

// React Hot Loader 找到到它
// React Transform 找不到它
export default useSheet(styles)(Counter)
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;猜猜这里我们遗漏了什么？被导出的 components! 在这个例子中，React Transform 会保留 &lt;em&gt;Counter&lt;/em&gt; 的 state ， hot reload 会改变&lt;br/&gt;&lt;em&gt;render()&lt;/em&gt; 和 &lt;em&gt;handleClick()&lt;/em&gt; 这些方法，但是任何对 &lt;em&gt;styles&lt;/em&gt; 的改变不会体现，因为它不知道 &lt;em&gt;useSheet(styles)(Counter)&lt;/em&gt; 正好 return 一个 React component， 这个组件也需要被 proxy。&lt;/p&gt;
&lt;p&gt;很多人&lt;a href=&quot;https://github.com/gaearon/babel-plugin-react-transform/issues/26&quot;&gt;发现了这个问题&lt;/a&gt;，当他们注意到他们在 redux 里面 selectors 以及 action creators 不再会 hot reload。这是因为 React Transform 没有发现 &lt;em&gt;connect()&lt;/em&gt; 返回一个组件，然后并没有一个简单的方法去识别。&lt;/p&gt;
&lt;h3 id=&quot;问题使用静态方法检查太过于入侵性&quot;&gt;问题：使用静态方法检查太过于入侵性&lt;/h3&gt;
&lt;p&gt;找到通过继承自 &lt;em&gt;React.Component&lt;/em&gt; 或者使 &lt;em&gt;React.createClass()&lt;/em&gt; 创建的class &lt;a href=&quot;https://github.com/gaearon/babel-plugin-react-transform/blob/19c714643faad916f3342f34171f8974589835e1/src/index.js#L4-L32&quot;&gt;不是很难&lt;/a&gt; 。然而，它可能出错，你也不想 &lt;a href=&quot;https://github.com/gaearon/babel-plugin-react-transform/issues/78&quot;&gt;带来误判&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;随着React 0.14的发布，这个任务变得更加艰难。任何 functions，如果&lt;br/&gt;return 出来的是一个有效的 ReactElement 那就可能是一个组件。由于你不能肯定，所以你不得不采用探索法。比如说，你可在判断在顶级作用域的 function，如果是以驼峰命名，使用JSX, 并且接受不超过两个以上（props 和 context）参数，那它可能是个React component。这样会误判吗？是，可能会。&lt;/p&gt;
&lt;p&gt;更糟糕的是，你必须让所有的 “transform” 去处理 classes 和 functions。如果React 在v16版本里面引进&lt;a href=&quot;https://github.com/reactjs/react-future/blob/7ce26f52d53e5132238a4bfcbab821ad77e89d0c/04%20-%20Layout/prototype/index.js&quot;&gt;另外一种&lt;/a&gt; 一种方式去声明组件呢，我们将要重写所有的transform吗？&lt;/p&gt;
&lt;p&gt;最后得出结论，用静态方法 &lt;em&gt;包裹&lt;/em&gt; 组件相当复杂。你将要对 functions 和 classes 可能的 export 方式取使用各种方法去处理，包括 default 和 named 的 exports，function声明，箭头函数，class声明，class表达式，createClass() 形式调用，以及等等。每种情况你都需要用一种方法针对相同的变量或者表达式去绑定不同的值。&lt;/p&gt;
&lt;p&gt;想办法支持 functional components 是&lt;a href=&quot;https://github.com/gaearon/babel-plugin-react-transform/issues/57&quot;&gt;最多的提议&lt;/a&gt;， 我现在不会考虑在 React Transform 支持它，因为实现的复杂程度会给工程以及它的维护者带来巨大困难，并且可能由于一些边缘情况导致彻底的破坏。&lt;/p&gt;
&lt;h2 id=&quot;react-hot-loader-3&quot;&gt;React Hot Loader 3&lt;/h2&gt;
&lt;p&gt;以上总结是出自 Dan 的一篇在medium上的&lt;a href=&quot;https://medium.com/@dan_abramov/hot-reloading-in-react-1140438583bf&quot;&gt;文章&lt;/a&gt;，他称呼 React Hot Loader 是一个 Accidental Complexity，其中还提到它对 compile-to-js 语言 （其他通过编译转成JS的语言）的考虑，以及中途遇到的 babel 的问题等。文章中 Dan 表明他会在几个月内停止 React Transform 而使用一个新的工程代替，新的工程会解决大多数残留的问题，末尾给了一些提示在新工程里面需要做到的。在这篇文章的一个月后，React-Hot-Loader 3 release了，让我们大致的过一下 3 的到底做了些什么。&lt;/p&gt;
&lt;h3 id=&quot;在调用的时候-proxy&quot;&gt;在调用的时候 proxy&lt;/h3&gt;
&lt;p&gt;在源码中找到并且包裹React components是非常难做到的，并且有可能是破坏性的。这真的会破坏你的代码，但标记它们相对来说是比较安全。比如我们可以通过 babel-plugin 检查一个文件，针对顶层 class、function 以及 被 export 出来的模块在文件末尾做个标记:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;class Counter extends Component {
  constructor(props) {
    super(props)
    this.state = { counter: 0 }
    this.handleClick = this.handleClick.bind(this)
  }
  handleClick() {
    this.setState({
      counter: this.state.counter + 1
    })
  }
  render() {
    return (
      &amp;lt;div className={this.props.sheet.container} onClick={this.handleClick}&amp;gt;
        {this.state.counter}
      &amp;lt;/div&amp;gt;
    )
  }
}

const styles = {
  container: { 
    backgroundColor: 'yellow'
  }
}

const __exports_default = useSheet(styles)(Counter)
export default __exports_default

// 我们 generate 的标记代码：
// 在 *远端* 标记任何看上去像 React Component 的东西
register('Counter.js#Counter', Counter)
register('Counter.js#exports#default', __exports_default) // every export too&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;register() 至少会判断传进来的值是不是一个函数，如果是，创建一个 React Proxy 包裹它。它不会替换你的 class 或者 function，这个proxy将会待在全局的map里面，等待着，直到你使用React.createElement()。&lt;/p&gt;
&lt;p&gt;仅仅真正的组件才会经历 React.createElement，这就是我们为什么 monkeyPatch React.createElement()。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;import createProxy from 'react-proxy'

let proxies = {}
const UNIQUE_ID_KEY = '__uniqueId'

export function register(uniqueId, type) {
  Object.defineProperty(type, UNIQUE_ID_KEY, {
    value: uniqueId,
    enumerable: false,
    configurable: false
  })
  
  let proxy = proxies[uniqueId]
  if (proxy) {
    proxy.update(type)
  } else {
    proxy = proxies[id] = createProxy(type)
  }
}

// Resolve 发生在 element 被创建的时候，而不是声明的时候
const realCreateElement = React.createElement
React.createElement = function createElement(type, ...args)  {
  if (type[UNIQUE_ID_KEY]) {
    type = proxies[type[UNIQUE_ID_KEY]].get()
  }
  
  return realCreateElement(type, ...args)
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;在调用端包裹组件解决了很多问题，比如 functional component 不会误判，包裹的逻辑只要考虑 function 和 class，因为我们把生成的代码移到底部这样不会污染代码。&lt;/p&gt;
&lt;h3 id=&quot;给-compile-to-js-语言提供了一种兼容方式&quot;&gt;给 compile-to-js 语言提供了一种兼容方式&lt;/h3&gt;
&lt;p&gt;Dan 提供了类似于 React-Hot-Loader 1 的 webpack loader， 即 &lt;code&gt;react-hot-loader/webpack&lt;/code&gt;。在不使用 babel 做静态分析的情况下，你可以通过它找到 &lt;code&gt;module.export&lt;/code&gt; 出来的 component，并且 register 到全局，然后在调用端实现真正的代理。所以这种方式只能针对&lt;a href=&quot;https://github.com/gaearon/react-hot-loader#known-limitations&quot;&gt;实际 export 出来的组件做保留 state 以及 DOM 的 hot reloading&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;什么情况下会使用这种方式，那就是针对其他 compile-to-js 的语言比如 &lt;a href=&quot;https://github.com/bhauman/lein-figwheel&quot;&gt;Figwheel&lt;/a&gt; 和 &lt;a href=&quot;https://github.com/elm-lang/elm-reactor&quot;&gt;Elm Reactor&lt;/a&gt;。在这些语言里面有自己的类的实现等，所以 Babel 没有针对源码办法去做静态检查，所以必须在编译之后去处理。&lt;/p&gt;
&lt;h3 id=&quot;错误处理&quot;&gt;错误处理&lt;/h3&gt;
&lt;p&gt;还记得 React Transform 里面的React Transform Catch Error 吗。React-Hot-Loader 把处理 render 出错的逻辑放到 AppContainer 。因为 React V16 增加了 &lt;a href=&quot;https://reactjs.org/docs/error-boundaries.html&quot;&gt;error boundaries&lt;/a&gt;，相信在未来的版本 React-Hot-Loader 也会做相应调整。&lt;/p&gt;
&lt;h2 id=&quot;写在最后&quot;&gt;写在最后&lt;/h2&gt;
&lt;p&gt;这就是对 React-Hot-Loader 的实现的一个追溯，如果你真的理解了，那么你在配置 React-Hot-Loader 到你的应用代码里面的每个步骤会有一个重新的认识。我不确定大家是否读懂了，或者存在还存在什么疑问，欢迎来沟通讨论。截止写文现在 React-Hot-Loader 4 已经在进行中，我比较偏向于 4 会和 React 迭代保持更亲密的同步（ 从之前 &lt;a href=&quot;https://reactjs.org/docs/error-boundaries.html&quot;&gt;error boundaries&lt;/a&gt; 和 &lt;a href=&quot;https://github.com/facebook/react/issues/5306&quot;&gt;official instrumentation API&lt;/a&gt; 来看），到时候拭目以待吧。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2017/12/14/1605309af5a7dfa2?w=1426&amp;amp;h=778&amp;amp;f=png&amp;amp;s=414615&quot;/&gt;&lt;/p&gt;
</description>
<pubDate>Wed, 07 Mar 2018 03:04:00 +0000</pubDate>
<dc:creator>iKcamp</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/ikcamp/p/8521145.html</dc:identifier>
</item>
<item>
<title>使用dlib中的深度残差网络(ResNet)实现实时人脸识别 - supersayajin</title>
<link>http://www.cnblogs.com/supersayajin/p/8489435.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/supersayajin/p/8489435.html</guid>
<description>&lt;p&gt;&lt;span&gt;opencv中提供的基于haar特征级联进行人脸检测的方法效果非常不好，本文使用dlib中提供的人脸检测方法（使用HOG特征或卷积神经网方法），并使用提供的深度残差网络（ResNet）实现实时人脸识别，不过本文的目的不是构建深度残差网络，而是利用已经训练好的模型进行实时人脸识别，实时性要求一秒钟达到10帧以上的速率，并且保证不错的精度。opencv和dlib都是非常好用的计算机视觉库，特别是dlib，前面文章提到了其内部封装了一些比较新的深度学习方法，使用这些算法可以实现很多应用，比如人脸检测、车辆检测、目标追踪、语义分割等等。由于这两个库相应的都包含了C++和Python的版本，而Python的配置和相对使用起来更加简单，因此这篇文章主要通过Python来实现。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;先上测试的识别效果，第一张识别吴恩达和Bengio，后者我没有打标签所以识别的是“other”；另外一张gif 是识别梁朝伟、刘德华和一个女主持的过程，本地库中没有存储女主持的图片。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;          &lt;img src=&quot;https://images2018.cnblogs.com/blog/1333838/201803/1333838-20180306224936085-1030499048.gif&quot; alt=&quot;&quot; width=&quot;344&quot; height=&quot;258&quot;/&gt;                                           &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;   &lt;img src=&quot;https://images2018.cnblogs.com/blog/1333838/201803/1333838-20180306232502061-521728753.gif&quot; alt=&quot;&quot; width=&quot;449&quot; height=&quot;250&quot;/&gt;          &lt;/span&gt;&lt;/p&gt;

&lt;p&gt;因为博客园不方便上传本地视频，所以用的gif显示效果图，源视频要比gif清楚，640X480像素大小，总的来说效果识别的效果还不错。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;一、准备&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;（1）需要安装opencv和dlib的Python库，之前的一篇文章提到了怎样安装：&lt;a href=&quot;http://www.cnblogs.com/supersayajin/p/8446685.html&quot; target=&quot;_blank&quot;&gt;http://www.cnblogs.com/supersayajin/p/8446685.html&lt;/a&gt;；如果你有GPU并且开启了加速，那么实现的人脸识别程序速度非常快，可以满足实时性，以我运行的结果来看，检测+识别640X480像素的视频流一秒钟大约十几帧；如果你没有GPU那么速度就会很慢了，而且在检测阶段不能使用卷积神经网络的方法了，否则检测一帧数据可能需要几秒甚至几十秒:)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;（2）需要一个和PC连接的摄像头；在本文中使用的是串口的摄像头，笔记本电脑集成的摄像头就是串口的，opencv中提供了直接获取串口摄像头的接口，非常方便使用；如果是网口的摄像头那么就要看摄像头提供方，比如大华、海康他们的摄像头可能会提供官方的SDK，如果有接口那是最好；或者，如果摄像头支持RTSP协议，opencv也可以通过RTSP协议获取摄像头的数据；否则可能就要写一套socket通信来实现数据传输，这个不在本文范围之内，默认使用的是串口的摄像头。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;二、策略&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;人脸识别分为人脸检测和识别两个阶段，人脸检测会找到人脸区域的矩形窗口，识别则通过ResNet返回人脸特征向量，并进行匹配。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;（1）人脸检测阶段。人脸检测算法需要用大小位置不同的窗口在图像中进行滑动，然后判断窗口中是否存在人脸。在深度学习之前的主流方法是特征提取+集成学习分类器，比如以前火热的haar特征+adaboost级联分类器，opencv中实现的人脸检测方法就采用了这种，不过实验结果来看，这种检测方法效果很不好，经常误检测人脸，或者检测不到真实的人脸；dlib中使用的是HOG（histogram of oriented gradient）+ 回归树的方法，使用dlib训练好的模型进行检测效果要好很多。dlib也使用了卷积神经网络来进行人脸检测，效果好于HOG的集成学习方法，不过需要使用GPU加速，不然程序会卡爆了，一张图片可能几秒甚至几十秒。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;（2）识别阶段。识别也就是我们常说的“分类”，摄像头采集到这个人脸时，让机器判断是张三还是其他人。分类分为两个部分：&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;特征向量抽取。本文用到的是dlib中已经训练好的ResNet模型的接口，此接口会返回一个128维的人脸特征向量。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;距离匹配。在获取特征向量之后可以使用欧式距离和本地的人脸特征向量进行匹配，使用最近邻分类器返回样本的标签。&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;span&gt;根据以上，识别的大致过程如下：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1333838/201803/1333838-20180304161247061-904239642.png&quot; alt=&quot;&quot; width=&quot;477&quot; height=&quot;305&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;图1 人脸识别分类过程&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;对于图1中的获取人脸特征向量，其过程如下：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1333838/201803/1333838-20180304161440852-1579603398.png&quot; alt=&quot;&quot; width=&quot;203&quot; height=&quot;425&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;图2 获取人脸特征向量过程&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;用简单的话总结，整个过程分为两个阶段，本地存储已标记人脸数据；识别阶段把从摄像头读取的人脸和本地进行匹配，得到分类结果。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;三、程序实现&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;（1）构建本地人脸特征向量库，并且打标签。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;首先加载需要的python库：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; dlib
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; numpy as np
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; cv2
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; os
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt; json
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;然后加载模型参数：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
detector = dlib.cnn_face_detection_model_v1(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;mmod_human_face_detector.dat&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
sp &lt;/span&gt;= dlib.shape_predictor(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;shape_predictor_68_face_landmarks.dat&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
facerec &lt;/span&gt;= dlib.face_recognition_model_v1(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;dlib_face_recognition_resnet_model_v1.dat&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;上面代码中的模型参数可以到这里下载：&lt;a href=&quot;http://dlib.net/files/&quot; target=&quot;_blank&quot;&gt;http://dlib.net/files/&lt;/a&gt;。detector是使用卷积神经网络（CNN）进行人脸检测的检测算子，当然如果你使用CNN的话需要使用GPU加速，否则速度会超级慢。也可以使用另一种方法，即HOG特征级联分类的检测方法，效果略差于CNN。变量sp，使用预测算子获取得到的人脸区域中的五官的几何点区域，这里加载的是68特征点的landmark模型；然后facerec会得到ResNet模型，He Kaiming（2009年和2015的CVPR best paper作者）提出的方法的一个实现，这里训练模型已经给出，因此不需要自己手动去训练了。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;最后，对某个目录中的所有图片进行处理，处理的方式是一张一张地读取某个目录中的图片，每读取一张就检测人脸，如果存在人脸就使用ResNet的接口获取人脸特性向量，保存到事先准备好的矩阵中，并且按照文件名存取标签，完了之后把所有的人脸特征向量和标签都存到本地的文本文件中。注意这里给图片打标签的方式，我把每张图片命名为标签名+下划线+序号+点号+后缀名的形式，标签名是手动命名的标记名称，序号用以区分同一类中的第几张。以下是demo中存放的部分图片：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1333838/201803/1333838-20180306214433427-1580665213.png&quot; alt=&quot;&quot; width=&quot;769&quot; height=&quot;137&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;也有很多其他的方法打标签，这里不多举例。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;65&quot;&gt;
&lt;pre&gt;
imagePath = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;LocalImage/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;                                                                           &lt;span&gt;#&lt;/span&gt;&lt;span&gt;图像的目录&lt;/span&gt;
data = np.zeros((1,128))                                                                            &lt;span&gt;#&lt;/span&gt;&lt;span&gt;定义一个128维的空向量data&lt;/span&gt;
label = []                                                                                          &lt;span&gt;#&lt;/span&gt;&lt;span&gt;定义空的list存放人脸的标签&lt;/span&gt;

&lt;span&gt;for&lt;/span&gt; file &lt;span&gt;in&lt;/span&gt; os.listdir(imagePath):                                                                  &lt;span&gt;#&lt;/span&gt;&lt;span&gt;开始一张一张索引目录中的图像&lt;/span&gt;
    &lt;span&gt;if&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;.jpg&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; &lt;span&gt;in&lt;/span&gt; file &lt;span&gt;or&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;.png&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; &lt;span&gt;in&lt;/span&gt;&lt;span&gt; file:
        fileName &lt;/span&gt;=&lt;span&gt; file
        labelName &lt;/span&gt;= file.split(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;_&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)[0]                                                              &lt;span&gt;#&lt;/span&gt;&lt;span&gt;获取标签名&lt;/span&gt;
        &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;current image: &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, file)
        &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;current label: &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, labelName)
        
        img &lt;/span&gt;= cv2.imread(imagePath + file)                                                          &lt;span&gt;#&lt;/span&gt;&lt;span&gt;使用opencv读取图像数据&lt;/span&gt;
        &lt;span&gt;if&lt;/span&gt; img.shape[0]*img.shape[1] &amp;gt; 500000:                                                      &lt;span&gt;#&lt;/span&gt;&lt;span&gt;如果图太大的话需要压缩，这里像素的阈值可以自己设置&lt;/span&gt;
            img = cv2.resize(img, (0,0), fx=0.5, fy=0.5&lt;span&gt;)
        dets &lt;/span&gt;= detector(img, 1)                                                                     &lt;span&gt;#&lt;/span&gt;&lt;span&gt;使用检测算子检测人脸，返回的是所有的检测到的人脸区域&lt;/span&gt;
        &lt;span&gt;for&lt;/span&gt; k, d &lt;span&gt;in&lt;/span&gt;&lt;span&gt; enumerate(dets):
            rec &lt;/span&gt;=&lt;span&gt; dlib.rectangle(d.rect.left(),d.rect.top(),d.rect.right(),d.rect.bottom())
            shape &lt;/span&gt;= sp(img, rec)                                                                    &lt;span&gt;#&lt;/span&gt;&lt;span&gt;获取landmark&lt;/span&gt;
            face_descriptor = facerec.compute_face_descriptor(img, shape)                           &lt;span&gt;#&lt;/span&gt;&lt;span&gt;使用resNet获取128维的人脸特征向量&lt;/span&gt;
            faceArray = np.array(face_descriptor).reshape((1, 128))                                 &lt;span&gt;#&lt;/span&gt;&lt;span&gt;转换成numpy中的数据结构&lt;/span&gt;
            data = np.concatenate((data, faceArray))                                                &lt;span&gt;#&lt;/span&gt;&lt;span&gt;拼接到事先准备好的data当中去&lt;/span&gt;
            label.append(labelName)                                                                 &lt;span&gt;#&lt;/span&gt;&lt;span&gt;保存标签&lt;/span&gt;
            cv2.rectangle(img, (rec.left(), rec.top()), (rec.right(), rec.bottom()), (0, 255, 0), 2)       &lt;span&gt;#&lt;/span&gt;&lt;span&gt;显示人脸区域&lt;/span&gt;
        cv2.waitKey(2&lt;span&gt;)
        cv2.imshow(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;image&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, img)

data &lt;/span&gt;= data[1:, :]                                                                                  &lt;span&gt;#&lt;/span&gt;&lt;span&gt;因为data的第一行是空的128维向量，所以实际存储的时候从第二行开始&lt;/span&gt;
np.savetxt(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;faceData.txt&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, data, fmt=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;%f&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)                                                          &lt;span&gt;#&lt;/span&gt;&lt;span&gt;保存人脸特征向量合成的矩阵到本地&lt;/span&gt;
&lt;span&gt;
labelFile&lt;/span&gt;=open(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;label.txt&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;w&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)                                      
json.dump(label, labelFile)                                                                         &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;使用json保存list到本地&lt;/span&gt;
&lt;span&gt;labelFile.close()

cv2.destroyAllWindows()                                                                             &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;关闭所有的窗口&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;上面的代码中，会索引imagePath这个存放图像的目录；然后定义一个128维的空向量data，在后续获取每一张人脸特征向量的时候可以往这个向量后面追加，即data的每一行是一个样本的特征向量；然后定义一个list来存储标签。之后开始索引某个目录下所有的图片文件。注意我这里用的是opencv的接口读取图像，也可以使用其他的图像读取接口，比如dlib自带的或者PIL接口中的，都可以使用，不过重要的是接口一定要统一，因为每个接口读取图片转成矩阵的数值可能会有差异。然后使用前面定义的测算子开始检测人脸，返回的是dlib中的一个数据结构，这个数据结构存储了所有检测到的人脸区域信息，对每个检测到的人脸区域获取landmark，并且调用深度残差模型的接口获取128维的人脸特征向量，之后我们把这个人脸向量存储到data中去，这里使用numpy中提供的concatenate方法进行拼接，同时把标签添加到label列表中去。最后，因为data事先定义的是一个128维的空向量，之后利用concatenate方法进行拼接得到，我们需要抛弃第一行；最后把得到的人脸特征和标签存储到本地文件。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;这里使用的是CNN进行人脸检测，如果你没有GPU，或者你有GPU但没有进行GPU的配置，那么速度巨慢，此时你可以使用传统的HOG特征+级联分类的方法，不过效果没有CNN的好。这时代码的第6行中模型需要替换成：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
detector = dlib.get_frontal_face_detector()
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;其余的基本保持不变。 &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;以上的代码可以直接运行，运行之后会检测所有的图像，类似于：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1333838/201803/1333838-20180306215013063-19688077.png&quot; alt=&quot;&quot; width=&quot;138&quot; height=&quot;182&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;并且存取得到本地的人脸特征向量库和标签：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1333838/201803/1333838-20180306215339765-468494331.png&quot; alt=&quot;&quot; width=&quot;732&quot; height=&quot;235&quot;/&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1333838/201803/1333838-20180306215413421-1842942191.png&quot; alt=&quot;&quot; width=&quot;740&quot; height=&quot;48&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;（2）实时读取摄像头进行人脸识别&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;在（1）中我们已经得到了本地的打过标签的人脸特征向量，这一部分是实现读取摄像头实时识别。首先加载需要的python库：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; dlib
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; numpy as np
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; cv2
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt; json
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;然后加载神经网络模型：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
detector = dlib.cnn_face_detection_model_v1(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;mmod_human_face_detector.dat&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
sp &lt;/span&gt;= dlib.shape_predictor(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;shape_predictor_68_face_landmarks.dat&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
facerec &lt;/span&gt;= dlib.face_recognition_model_v1(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;dlib_face_recognition_resnet_model_v1.dat&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
threshold &lt;/span&gt;= 0.54
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;其中threshold是人脸识别的阈值，当测试图片和本地图片欧式距离最近的值大于这个值的时候，我们认为不属于本都图片的任何一个类别。然后定义最近邻分类器：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;def&lt;/span&gt;&lt;span&gt; findNearestClassForImage(face_descriptor, faceLabel):
    temp &lt;/span&gt;=  face_descriptor -&lt;span&gt; data
    e &lt;/span&gt;= np.linalg.norm(temp,axis=1,keepdims=&lt;span&gt;True)
    min_distance &lt;/span&gt;=&lt;span&gt; e.min() 
    &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;distance: &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, min_distance)
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; min_distance &amp;gt;&lt;span&gt; threshold:
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;other&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
    index &lt;/span&gt;=&lt;span&gt; np.argmin(e)
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; faceLabel[index]
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt; 当距离值大于threshold的时候我们返回标签“other”，否则返回本地的标签，你可以根据实际情况来设置这个阈值。题外话，安全阈值很依赖于具体的场合，比如安检、银行里进行人脸验证、iPhone解锁，这些对安全要求很高的场合需要比较小的threshold来保证安全，在嫌犯追踪的时候，需要比较大的threshold以保证由嫌疑的人不会漏过。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;然后是读取图像进行识别的函数：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;69&quot;&gt;
&lt;pre&gt;
&lt;span&gt;def&lt;/span&gt;&lt;span&gt; recognition(img):
    dets &lt;/span&gt;= detector(img, 1&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; k, d &lt;span&gt;in&lt;/span&gt;&lt;span&gt; enumerate(dets):
        
        &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Detection {}: Left: {} Top: {} Right: {} Bottom: {}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;.format(
            k, d.rect.left(), d.rect.top(), d.rect.right(), d.rect.bottom()))
        rec &lt;/span&gt;=&lt;span&gt; dlib.rectangle(d.rect.left(),d.rect.top(),d.rect.right(),d.rect.bottom())
        &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(rec.left(),rec.top(),rec.right(),rec.bottom())
        shape &lt;/span&gt;=&lt;span&gt; sp(img, rec)
        face_descriptor &lt;/span&gt;=&lt;span&gt; facerec.compute_face_descriptor(img, shape)        
        
        class_pre &lt;/span&gt;=&lt;span&gt; findNearestClassForImage(face_descriptor, label)
        &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(class_pre)
        cv2.rectangle(img, (rec.left(), rec.top()&lt;/span&gt;+10), (rec.right(), rec.bottom()), (0, 255, 0), 2&lt;span&gt;)
        cv2.putText(img, class_pre , (rec.left(),rec.top()), cv2.FONT_HERSHEY_SIMPLEX, &lt;/span&gt;0.7, (0,255,0), 2&lt;span&gt;, cv2.LINE_AA)

    cv2.imshow(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;image&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, img)
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt; 最后是实时读取摄像头图像，并且进行识别的过程：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;46&quot;&gt;
&lt;pre&gt;
labelFile=open(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;label.txt&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;r&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
label &lt;/span&gt;= json.load(labelFile)                                                   &lt;span&gt;#&lt;/span&gt;&lt;span&gt;载入本地人脸库的标签&lt;/span&gt;
&lt;span&gt;labelFile.close()
    
data &lt;/span&gt;= np.loadtxt(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;faceData.txt&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,dtype=float)                                  &lt;span&gt;#&lt;/span&gt;&lt;span&gt;载入本地人脸特征向量&lt;/span&gt;
&lt;span&gt;
cap &lt;/span&gt;=&lt;span&gt; cv2.VideoCapture(0)
fps &lt;/span&gt;= 10&lt;span&gt;
size &lt;/span&gt;= (640,480&lt;span&gt;)
fourcc &lt;/span&gt;= cv2.VideoWriter_fourcc(*&lt;span&gt;'&lt;/span&gt;&lt;span&gt;XVID&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
videoWriter &lt;/span&gt;= cv2.VideoWriter(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;video.MP4&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, fourcc, fps, size)

&lt;/span&gt;&lt;span&gt;while&lt;/span&gt;(1&lt;span&gt;):
    ret, frame &lt;/span&gt;=&lt;span&gt; cap.read()
    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;frame = cv2.resize(frame, (0,0), fx=0.5, fy=0.5)&lt;/span&gt;
&lt;span&gt;    recognition(frame)
    videoWriter.write(frame)
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; cv2.waitKey(1) &amp;amp; 0xFF == ord(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;q&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;):
        &lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;
    
cap.release()
videoWriter.release()
cv2.destroyAllWindows()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt; 在上面的代码中为了展示检测的效果，我用opencv的接口把图像保存到了视频当中。识别效果截图：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1333838/201803/1333838-20180307000403492-1719606652.png&quot; alt=&quot;&quot; width=&quot;450&quot; height=&quot;236&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;四、总结&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;利用已有的计算机视觉库可以实现很多好玩和有用的应用，本文只是粗略地展示了一个进行实时人脸识别的demo，还有很多可以改善的点来提高精度和效率，比如人脸受角度、表情影响很大，或者需要处理速度要求更高的场景；同时图像类别规模很大的情况下如何保证效果，如何优化这些都是难点。另外dlib中的提供的这些模型都是已经训练好的，我们可以到官方demo下载，demo给出了在一些benchmark中的效果，也可以自己训练得到这些模型，当然前提是你需要有GPU，并且要求很大量的数据以及丰富的调参经验，这些也都是深度学习中的点~&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;（完）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Wed, 07 Mar 2018 02:58:00 +0000</pubDate>
<dc:creator>supersayajin</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/supersayajin/p/8489435.html</dc:identifier>
</item>
<item>
<title>Nodejs的运行原理-libuv篇 - peiyu1988</title>
<link>http://www.cnblogs.com/peiyu1988/p/8520968.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/peiyu1988/p/8520968.html</guid>
<description>&lt;p&gt;&lt;strong&gt;&lt;span&gt;前言&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;这应该是Nodejs的运行原理的第7篇分享，这篇过后，短时间内不会再分享Nodejs的运行原理，会停更一段时间，PS：不是不更，而是会开挖新的坑，最近有在研究RPG Maker MV，区块链，云计算，可能会更新一些相关文章，或者相关教学。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;回到正题，异步编程的难点在于请求与响应不是按顺序发生的。以http server 为例，异步编程赋予了server 高并发的品质，而且他可以以很小的资源代价，不断地接受和处理请求。但是快速处理请求不表示快速地返回请求=&amp;gt;高并发不等同于快速反馈。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;在Nodejs中，libuv则为异步编程的实现提供了可能。&lt;span&gt;libuv为builtin modules&lt;/span&gt; 提供了API，这些API用来支撑请求和数据的返回的异步处理方式。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;这一篇分享，我们主要讨论libuv的运行原理，从两个角度出发：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;1) libuv的架构&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;2) 案例，从细节的角度看libuv是如何对待不同I/O请求，按照不同的方式来完成异步请求和数据返回的。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;Libuv的架构&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1141038/201803/1141038-20180307094514784-1056185595.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;从左往右可分为两部分，Network I/O的相关请求，另一部分File I/O，DNS Ops和User Code组成。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1141038/201803/1141038-20180307095011722-694544333.jpg&quot; alt=&quot;&quot; width=&quot;1049&quot; height=&quot;580&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;上图展示了libuv细节的流程，图中代码很简单，包括2个部分：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;1. server.listen()是用来创建TCP server时，通常放在最后一步执行的代码。主要指定服务器工作的端口以及回调函数。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;2. fs.open()是用异步的方式打开一个文件。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;选择两个示例很简单，因为libuv架构图可视：libuv对 &lt;span&gt;Network I/O和 File I/O采用不同的机制&lt;/span&gt;。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;上图右半部分，主要分成两个部分：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;1. 主线程：主线程也是node启动时执行的现成。node启动时，会完成一系列的初始化动作，启动V8 engine，进入下一个循环。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;2. 线程池：线程池的数量可以通过环境变量UV_THREADPOOL_SIZE配置，最大不超过128个，默认为4个。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;Network I/O&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;V8 engine执行从server.listen() 开始，调用builtin module Tcp_wrap 的过程。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;在创建TCP链接的过程中，libuv直接参与Tcp_wrap.cc函数中的 TCPWrap::listen() 调用uv_listen()开始到执行uv_io_start()结束。看起来很短暂的过程，其实是类似linux kernel的中断处理机制。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;uv_io_start()负载将handle插入到处理的water queue中。这样的好处是请求能够立即得到处理。中断处理机制里面的下半部分与数据处理操作相似，交由主线程去完成处理。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1141038/201803/1141038-20180307103340088-1552850017.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;代码逻辑很简单，查看loop中是否包含handle，如果有遍历default loop。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1141038/201803/1141038-20180307103500866-770399659.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;File I/O&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;这里我们研究一下 File I/O。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;同Network I/O一样，我们的应用所依赖的fs模块，后面有一个builtin module Node_file.cc作为支撑。 Node_file.cc包含了各种我们常用的文件操作的接口，例如open, read, write, chmod,chown等。但同时，它们都支持异步模式。 我们通过Node_file.cc中的Open()函数来研究一下具体的实现细节。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;如果你用类似source insight之类的代码阅读工具跟踪一下代码调用顺序，会很容易发现对于异步模式，Open()函数会在一系列辅助操作之后，进入函数uv_fs_open(),并且传入了一个FSReqWrap的对象。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;FSReqWrap()，从名字可以看得出来，这是一个wrap,且是与FS相关的请求。也就是说，它基于某一个现成的机制来实现与FS相关的请求操作。这个现成的机制就是ReqWrap。好吧，它也是个wrap。乘你还没疯的时候，看一下图6吧。这里完整展示了FSReqWrap类继承关系。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1141038/201803/1141038-20180307103637538-757104966.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;除了FSReqWrap，还有其它Wrap,例如PipeConnectWrap，TCPConnectWrap等等。每个Wrap均为一种请求类型服务。 但是这些wrap，都是node自身的行为，而与libuv相关的是什么呢？上图中表示出了FSReqWrap关键的数据结构 uv_fs_s req__。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;让我们把目光回到uv_fs_open()。在调用这个函数时， req__作为其一个重要的参数被传递进去。而在uv_fs_open()内部，req__则被添加到work queue的末尾中去。图3 thread pool中的thread会去领取这些request进行处理。 每个request很像一个粘贴板，它将event loop, work queue，每个请求的处理函数(work())，以及请求结束处理函数(done())绑定在一起。绑定的操作在uv__work_submit()中完成。 例如对于这里的req__，绑定在它身上的work()为uv__fs_work(), done()为uv__fs_done()。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;这里有一个比较有意思的问题值得额外看一下。我们的thread pool是在什么时候建立的呢？&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;答案是：在第一次异步调用uv__work_submit()时。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;每个thead的入口函数是 Threadpool.c中的worker()。工作逻辑比较简单，依次取出work queue中的请求，执行绑定在该请求上的work()函数。 前面我们提到的绑定在请求上的done()函数在哪里执行呢？这也是一个比较有意思的操作。libuv通过uv_async_send()通知event loop去执行相应的callback函数，也即我们绑定在request上的done()函数。uv__work_done()用于完成这样的操作。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;uv_async_send()与主线程之间通过PIPE通信。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;我在这一小节以一个FSReqWrap以及Open()函数为例，描述了libuv处理这种File I/O请求时所涉及的各种操作：&lt;/span&gt;&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;&lt;span&gt;建立thread pool(只建立一次)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;在每个请求req__上绑定与其相关的event loop, work queue, work(), done()&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;thread worker()用来处理work queue里面的每个请求，并执行work()&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;通过uv_async_send()通知event loop执行done()&lt;/span&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
<pubDate>Wed, 07 Mar 2018 02:39:00 +0000</pubDate>
<dc:creator>peiyu1988</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/peiyu1988/p/8520968.html</dc:identifier>
</item>
<item>
<title>java线程池技术(二)： 核心ThreadPoolExecutor介绍 - WangLei_ClearHeart</title>
<link>http://www.cnblogs.com/leipDao/p/8508093.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/leipDao/p/8508093.html</guid>
<description>&lt;p&gt;&lt;span&gt;Java线程池技术属于比较“古老”而又比较基础的技术了，本篇博客主要作用是个人技术梳理，没什么新玩意。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;一、Java线程池技术的由来&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;我们平时使用线程来进行异步操作时，线程的创建，销毁等相对来说都是比较消耗资源的，试想这样一个业务情景：高并发请求，但是每次请求的时间非常短。如果我们为每一个请求都单独创建一个线程来执行，就会消耗大量设备资源，使设备处于高负荷状态，显然这样的处理就有很大问题了。这时候我们就可以用线程池技术来解决了，我们在线程池中创建若干条线程，当有任务需要执行时就从该线程池中获取一个线程来执行任务，如果一时间任务过多，超出线程池的线程数量，那么后面的线程任务就进入一个等待队列进行等待，直到线程池有线程处于空闲时才从等待队列获取要执行的任务进行处理，这样就减少了线程创建和销毁的开销，实现了线程的复用。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;二、Executor框架介绍&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;首先对整体框架有个大概了解，如图：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/794139/201803/794139-20180305110543346-1272769578.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;


&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;Executor是个接口，就定义了一个void execute(Runnable command)方法。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;ExecutorService同样是一个接口并且继承自&lt;span&gt;&lt;span&gt;&lt;span&gt;Executor&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;接口，对其方法进行扩展，其中最重要的是&amp;lt;T&amp;gt; Future&amp;lt;T&amp;gt; submit(Callable&amp;lt;T&amp;gt; task)方法，关于&lt;span&gt;&lt;span&gt;&lt;span&gt;Callable&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;，&lt;span&gt;&lt;span&gt;&lt;span&gt;Future&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;，&lt;span&gt;&lt;span&gt;&lt;span&gt;Future&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;Task不是本篇重点，有时间会单独写一篇博客介绍。也可以自行搜索了解，比较简单。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;AbstractExecutorService抽象类，实现了&lt;span&gt;&lt;span&gt;&lt;span&gt;ExecutorService&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;接口，主要实现了submit,ivokeAny方法。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;ScheduledExecutorService同样是一个接口，继承自&lt;span&gt;&lt;span&gt;&lt;span&gt;ExecutorService&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;接口，对其进行扩展，主要就是schedule等方法。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;ThreadPoolExecutor具体线程池实现类，继承自AbstractExecutorService抽象类，我们使用的时候大部分就是使用这个类，后面会具体讲到。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;ScheduledThreadPoolExecutor 具有调度能力的线程池实现类，继承自ThreadPoolExecutor类，且实现&lt;span&gt;&lt;span&gt;&lt;span&gt;ScheduledExecutorService&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;接口，其主要功能就是调用&lt;span&gt;&lt;span&gt;&lt;span&gt;schedule&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;方法，可以延时或者周期的执行某一任务，而&lt;span&gt;&lt;span&gt;&lt;span&gt;ThreadPoolExecutor&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;是没有这一共能的。&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;三、&lt;span&gt;&lt;span&gt;&lt;span&gt;ThreadPoolExecutor&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;构造函数参数介绍&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;在我们使用&lt;span&gt;&lt;span&gt;&lt;span&gt;ThreadPoolExecutor&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;的时候会发现构造函数中有很多参数，如下：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;73&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; ThreadPoolExecutor(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; corePoolSize,
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;                               &lt;span&gt;int&lt;/span&gt;&lt;span&gt; maximumPoolSize,
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;                               &lt;span&gt;long&lt;/span&gt;&lt;span&gt; keepAliveTime,
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;                              TimeUnit unit,
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;                               BlockingQueue&amp;lt;Runnable&amp;gt;&lt;span&gt; workQueue) {
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;&lt;span&gt;(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue,
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;             Executors.defaultThreadFactory(), defaultHandler);
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; 
&lt;span&gt;10&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; ThreadPoolExecutor(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; corePoolSize,
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;                               &lt;span&gt;int&lt;/span&gt;&lt;span&gt; maximumPoolSize,
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;                               &lt;span&gt;long&lt;/span&gt;&lt;span&gt; keepAliveTime,
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;                              TimeUnit unit,
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;                               BlockingQueue&amp;lt;Runnable&amp;gt;&lt;span&gt; workQueue,
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;                              ThreadFactory threadFactory) {
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;&lt;span&gt;(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue,
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;             threadFactory, defaultHandler);
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; 
&lt;span&gt;20&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; ThreadPoolExecutor(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; corePoolSize,
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;                               &lt;span&gt;int&lt;/span&gt;&lt;span&gt; maximumPoolSize,
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;                               &lt;span&gt;long&lt;/span&gt;&lt;span&gt; keepAliveTime,
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;                              TimeUnit unit,
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;                               BlockingQueue&amp;lt;Runnable&amp;gt;&lt;span&gt; workQueue,
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; &lt;span&gt;                              RejectedExecutionHandler handler) {
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;&lt;span&gt;(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue,
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; &lt;span&gt;             Executors.defaultThreadFactory(), handler);
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; 
&lt;span&gt;30&lt;/span&gt; 
&lt;span&gt;31&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; ThreadPoolExecutor(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; corePoolSize,
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;                               &lt;span&gt;int&lt;/span&gt;&lt;span&gt; maximumPoolSize,
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt;                               &lt;span&gt;long&lt;/span&gt;&lt;span&gt; keepAliveTime,
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; &lt;span&gt;                              TimeUnit unit,
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt;                               BlockingQueue&amp;lt;Runnable&amp;gt;&lt;span&gt; workQueue,
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt; &lt;span&gt;                              ThreadFactory threadFactory,
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt; &lt;span&gt;                              RejectedExecutionHandler handler) {
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (corePoolSize &amp;lt; 0 ||
&lt;span&gt;39&lt;/span&gt;             maximumPoolSize &amp;lt;= 0 ||
&lt;span&gt;40&lt;/span&gt;             maximumPoolSize &amp;lt; corePoolSize ||
&lt;span&gt;41&lt;/span&gt;             keepAliveTime &amp;lt; 0&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt;             &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; IllegalArgumentException();
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (workQueue == &lt;span&gt;null&lt;/span&gt; || threadFactory == &lt;span&gt;null&lt;/span&gt; || handler == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt;             &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; NullPointerException();
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.corePoolSize =&lt;span&gt; corePoolSize;
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.maximumPoolSize =&lt;span&gt; maximumPoolSize;
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.workQueue =&lt;span&gt; workQueue;
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.keepAliveTime =&lt;span&gt; unit.toNanos(keepAliveTime);
&lt;/span&gt;&lt;span&gt;49&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.threadFactory =&lt;span&gt; threadFactory;
&lt;/span&gt;&lt;span&gt;50&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.handler =&lt;span&gt; handler;
&lt;/span&gt;&lt;span&gt;51&lt;/span&gt;     }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;前3个构造函数都是调用第4个构造函数，只不过有些参数使用默认的罢了。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;接下来我们看下第4个构造函数每个参数意义：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;public ThreadPoolExecutor(int corePoolSize,int maximumPoolSize,long keepAliveTime,TimeUnit unit,BlockingQueue&amp;lt;Runnable&amp;gt; workQueue,&lt;br/&gt;ThreadFactory threadFactory,RejectedExecutionHandler handler)&lt;/span&gt;&lt;/p&gt;
&lt;table border=&quot;0&quot; align=&quot;center&quot;&gt;&lt;tbody readability=&quot;6&quot;&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;参数&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt;说明&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;&lt;span&gt;corePoolSize&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt;线程池中核心线程数量&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;&lt;span&gt;maximumPoolSize&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt;线程池中最大线程数量&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;&lt;span&gt;keepAliveTime&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt;非核心线程存活时间&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;&lt;span&gt;unit&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt;keepAliveTime&lt;/span&gt;&lt;span&gt;的时间单位&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;workQueue&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt;存放任务的队列&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;&lt;span&gt;threadFactory&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt;用来生产线程的工厂&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;&lt;span&gt;handler&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt;当线程池中不能再放入任务时执行的handler&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;&lt;span&gt;如果有一个&lt;span&gt;corePoolSize&lt;/span&gt;为5，&lt;span&gt;maximumPoolSize为10的线程池，可用下图形象展示：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/794139/201803/794139-20180305145400821-646478287.png&quot; alt=&quot;&quot; width=&quot;419&quot; height=&quot;306&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;这里要说明一下：所谓核心线程非核心线程只是一个数量的说明，并不是说&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;核心线程非核心线程&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;有本质上的不同，它们都是普通的线程而已，并且线程特性都一样，不是说核心线程有特殊标记，线程池能“认”出来这是核心线程，对其有特殊操作。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;四、线程池处理任务的策略&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;我们调用线程池的submit()或execute()方法，向线程池中放入一个任务执行的时候线程池到底是怎么按照其策略来执行的呢？接下来，我们对其执行策略进行详细介绍，介绍完会对构造函数中每个参数有更深刻印象的。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;1，调用&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;线程池的submit()或execute()方法向线程池中放入一个任务，线程池内部会检查运行的线程数量是否达到corePoolSize数量，如果没有达到，则创建一个线程执行放入的任务，不管已经创建的线程是否处于空闲状态，创建线程的任务由threadFactory来完成，关于ThreadFactory可以参考我的另一篇博客来学习：&lt;a id=&quot;cb_post_title_url&quot; class=&quot;postTitle2&quot; href=&quot;http://www.cnblogs.com/leipDao/p/8436380.html&quot;&gt;java线程池技术(一)：ThreadFactory与BlockingQueue。&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;2，我们继续向线程池中放入任务，此时线程池中运行的线程数量已经达到&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;corePoolSize数量，则新加入的任务将会被放入workQueue中，直到有线程处于空闲状态，则从workQueue中取出任务执行。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;3，继续向线程池中放入任务，&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;此时线程池中运行的线程数量已经达到&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;corePoolSize数量，&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;并且&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;workQueue&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;中已经放满任务不能再放入新的任务，那么这时候就继续创建新的线程，注意此时线程池中线程数量已经多余&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;corePoolSize数量&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;，多出来的线程就叫做非核心线程。用非核心线程来执行新放入的任务。当线程池中的线程超过你设置的corePoolSize参数，说明当前线程池中有所谓的“非核心线程”。当某个线程处理完任务后，如果等待keepAliveTime时间后仍然没有新的任务分配给它，那么这个线程将会被回收。线程池回收线程时，对所谓的“核心线程”和“非核心线程”是一视同仁的，直到线程池中线程的数量等于你设置的corePoolSize参数时，回收过程才会停止。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;4&lt;/span&gt;， &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;继续向线程池中放入任务，&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;此时线程池中运行的线程数量已经达到&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;maximumPoolSize数量，并且&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;workQueue中已经放满任务不能再放入新的任务，由于线程池中运行的线程&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;已经达到maximumPoolSize数量，所以无法再创建线程执行新放入的任务，此时handler参数就起作用了，在使用的时候相信大部分开发者都没用过这个参数，我们看下系统默认怎么处理的，&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;系统默认闯入传入的是defaultHandler，如下：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;45&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; ThreadPoolExecutor(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; corePoolSize,
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;                               &lt;span&gt;int&lt;/span&gt;&lt;span&gt; maximumPoolSize,
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;                               &lt;span&gt;long&lt;/span&gt;&lt;span&gt; keepAliveTime,
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; &lt;span&gt;                              TimeUnit unit,
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt;                               BlockingQueue&amp;lt;Runnable&amp;gt;&lt;span&gt; workQueue,
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt; &lt;span&gt;                              ThreadFactory threadFactory) {
&lt;/span&gt;&lt;span&gt;7&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;&lt;span&gt;(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue,
&lt;/span&gt;&lt;span&gt;8&lt;/span&gt; &lt;span&gt;             threadFactory, &lt;span&gt;defaultHandler&lt;/span&gt;);
&lt;/span&gt;&lt;span&gt;9&lt;/span&gt;     }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;初始化如下：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; RejectedExecutionHandler defaultHandler =
&lt;span&gt;2&lt;/span&gt;         &lt;span&gt;new&lt;/span&gt; AbortPolicy();
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;接下来看下AbortPolicy这个类吧：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; AbortPolicy &lt;span&gt;implements&lt;/span&gt;&lt;span&gt; RejectedExecutionHandler {
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;         &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;         * Creates an {&lt;/span&gt;&lt;span&gt;@code&lt;/span&gt;&lt;span&gt; AbortPolicy}.
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;          &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt;&lt;span&gt; AbortPolicy() { }
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt;         &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;         * Always throws RejectedExecutionException.
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;         *
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;         * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; r the runnable task requested to be executed
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;         * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; e the executor attempting to execute this task
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;         * &lt;/span&gt;&lt;span&gt;@throws&lt;/span&gt;&lt;span&gt; RejectedExecutionException always
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;          &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; rejectedExecution(Runnable r, ThreadPoolExecutor e) {
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;             &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; RejectedExecutionException(&quot;Task &quot; + r.toString() +
&lt;span&gt;16&lt;/span&gt;                                                  &quot; rejected from &quot; +
&lt;span&gt;17&lt;/span&gt; &lt;span&gt;                                                 e.toString());
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;     }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;AbortPolicy实现了RejectedExecutionHandler接口，在rejectedExecution方法中抛出RejectedExecutionException异常。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;所以如果线程池中运行的线程数量已经达到maximumPoolSize数量，并且workQueueworkQueue中已经放满任务不能再放入新的任务，系统默认情况下就会抛出&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;RejectedExecutionException异常，我们也可以自己实现RejectedExecutionHandler接口，在rejectedExecution方法中实现自己策略。比如我自己写的网络请求框架就自己定义了&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;RejectedExecutionHandler，如下：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; RejectedPolicy &lt;span&gt;implements&lt;/span&gt;&lt;span&gt; RejectedExecutionHandler{
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;    @Override
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; rejectedExecution(Runnable r, ThreadPoolExecutor executor) {
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;          &lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;             taskQuene.put(r);
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;         } &lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (InterruptedException e) {
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;             e.printStackTrace();
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;好了，以上就是线程池具体执行一个新任务的大体策略，是不是有了更深的认识？？？&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;以上分析中涉及的ThreadFactory与BlockingQueue如果你不是太了解，可以参考我的另一篇博客了解一下：&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;a id=&quot;cb_post_title_url&quot; class=&quot;postTitle2&quot; href=&quot;http://www.cnblogs.com/leipDao/p/8436380.html&quot;&gt;java线程池技术(一)：ThreadFactory与BlockingQueue。&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;好了，关于线程池大体介绍就到此为止，希望对你有用。&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Wed, 07 Mar 2018 01:50:00 +0000</pubDate>
<dc:creator>WangLei_ClearHeart</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/leipDao/p/8508093.html</dc:identifier>
</item>
</channel>
</rss>