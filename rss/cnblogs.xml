<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>ES6的generator函数 - 学习会让你青春永驻</title>
<link>http://www.cnblogs.com/blackgan/p/8630699.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/blackgan/p/8630699.html</guid>
<description>&lt;h4 id=&quot;generator是什么&quot;&gt;generator是什么？&lt;/h4&gt;
&lt;p&gt;generator是ES6提供的一种异步编程解决方案，在语法上，可以把它理解为一个状态机，内部封装了多种状态。执行generator，会生成返回一个遍历器对象。返回的遍历器对象，可以依次遍历generator函数的每一个状态。同时ES6规定这个遍历器是Generator函数的实例，也继承了Genarator函数的prototype对象上的方法。&lt;/p&gt;
&lt;p&gt;最简单的generator函数,其实它就是一个普通的函数，但是它有两个特征。第一就是function关键字与函数名之间有一个*号，其二就是函数体内使用yield表达式来遍历状态：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;newGenerator&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'hello'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'world'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'ending'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;执行generator函数之后，该函数并不会立即执行，返回的也不是函数运行结果，而是一个指向内部状态的指针对象。通常使用遍历器对象的next方法。使得指针移向下一个状态。每一次调用next()方法，内部指针就从函数头部或上一次停下里的地方开始执行，直到遇到下一个yield表达式位置，由此可以看出，generator是分段执行的，yield表达式是暂停执行的标记，而next方法可以恢复执行。&lt;/p&gt;
&lt;h4 id=&quot;generator中的yield表达式&quot;&gt;generator中的yield表达式&lt;/h4&gt;
&lt;p&gt;yield表达式在generator中是作为一个暂停标志，当碰到yield时，函数暂停执行，等到下一次next()执行时，函数才从当前yield位置开始执行。并且，yield表达式只能用在Generator函数里边；同时，yield如果后边带一个&lt;em&gt;,则就是相当于一个for...of的简写形式，如果yield后边不带&lt;/em&gt;,则返回的是generator的值。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;gen&lt;/span&gt;() &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'hello'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;yield&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'hello'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; f &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;gen&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;f&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;next&lt;/span&gt;().&lt;span class=&quot;at&quot;&gt;value&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;f&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;next&lt;/span&gt;().&lt;span class=&quot;at&quot;&gt;value&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;f&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;next&lt;/span&gt;().&lt;span class=&quot;at&quot;&gt;value&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;f&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;next&lt;/span&gt;().&lt;span class=&quot;at&quot;&gt;value&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;f&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;next&lt;/span&gt;().&lt;span class=&quot;at&quot;&gt;value&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上述例子中的后四个next()函数，就会顺序的返回h e l l&lt;/p&gt;
&lt;h4 id=&quot;generator中的next函数&quot;&gt;generator中的next函数&lt;/h4&gt;
&lt;p&gt;通过next函数，可以执行对应的yield表达式，且next()函数还可以带参数，该参数可以作为上一次yield表达式的返回值，因为yield本身是没有返回值的，如果next()中不带参数，则yield每次运行之后的返回值都是为undefined;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;dataConsumer&lt;/span&gt;() &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'Started'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;vs&quot;&gt;`1. &lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;yield&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;vs&quot;&gt;`&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;vs&quot;&gt;`2. &lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;yield&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;vs&quot;&gt;`&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'result'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; genObj &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;dataConsumer&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;va&quot;&gt;genObj&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;next&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;// Started&lt;/span&gt;
&lt;span class=&quot;va&quot;&gt;genObj&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;next&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'a'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;// 1. a&lt;/span&gt;
&lt;span class=&quot;va&quot;&gt;genObj&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;next&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'b'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;// 2. b&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上述函数中，第一次运行next()，运行到第一个next()函数截止，第二个next运行时，传入的参数为'a';则运行到第二个yield地方截止，然后第一个yield运行的返回值为'a',依次类推，则得到上述结果。&lt;/p&gt;
&lt;p&gt;另外，通过for...of可以循环generator中的所有状态，并且不需要使用next()函数。除了for...of循环以外，扩展运算符(...),解构赋值和Array.form方法内部调用的，都是遍历器接口。&lt;/p&gt;
&lt;p&gt;generator生成的对象，还有其他一些函数，比如throw()用来抛出错误，return()用来定义返回值并终止generator的状态。&lt;/p&gt;
&lt;p&gt;以上的三个方法在本质上其实是一样的，他们就是让generator恢复执行，并且使用不同的语句来替代yield语句。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;next()是将yield表达式替换成一个值&lt;/li&gt;
&lt;li&gt;throw()是将yield表达式替换成一个throw语句&lt;/li&gt;
&lt;li&gt;return()是将yield表达式替换成一个return语句&lt;/li&gt;
&lt;/ul&gt;&lt;h4 id=&quot;generator与协程&quot;&gt;Generator与协程&lt;/h4&gt;
&lt;p&gt;协程可以理解为“协作的线程”或者“协作的函数”。协程既可以是单线程实现，也可以用多线程实现，前者是一种特殊的子例程，后者是一种特殊的线程。&lt;/p&gt;
&lt;p&gt;协程有点像函数，又有点像线程，它的运行流程大致如下。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;第一步，协程A开始执行&lt;/li&gt;
&lt;li&gt;第二部，协程A执行到一半，进入暂停，执行权转移到协程B&lt;/li&gt;
&lt;li&gt;第三步，（过了一段时间）协程B交换执行权&lt;/li&gt;
&lt;li&gt;最后，协程A恢复执行&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;协程适合用于多任务运行环境，它与普通的线程很相似，都有自己的执行上下文，可以分享全局量。他们的不同之处在于，同一时间可以有多个线程处于运行状态，但是运行的协程只能有一个，其他协程都是处于暂停状态。&lt;/p&gt;
&lt;p&gt;由于JavaScript是单线程，只能保持一个调用栈，引入协程之后，每一个任务可以保持自己的调用栈，这样就可以再抛出错误的时候找到原始的调用栈，不至于像异步操作的回调函数那样，一旦出错，原始的调用栈早就结束了。&lt;/p&gt;
&lt;p&gt;Generator 函数是 ES6 对协程的实现，但属于不完全实现。Generator函数被称为“半协程”（semi-coroutine），意思是只有 Generator 函数的调用者，才能将程序的执行权还给 Generator函数。如果是完全执行的协程，任何函数都可以让暂停的协程继续执行。&lt;/p&gt;
&lt;p&gt;如果将Generator函数当做协程，完全可以将多个需要互相协作的任务写成Generator函数，他们之间使用yield标识交换控制权。&lt;/p&gt;
&lt;p&gt;Generator 函数执行产生的上下文环境，一旦遇到yield命令，就会暂时退出堆栈，但是并不消失，里面的所有变量和对象会冻结在当前状态。等到对它执行next命令时，这个上下文环境又会重新加入调用栈，冻结的变量和对象恢复执行。&lt;/p&gt;
&lt;h4 id=&quot;generator函数的多种用途&quot;&gt;Generator函数的多种用途&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;可以使异步操作来实现同步化表达&lt;/li&gt;
&lt;li&gt;控制流管理&lt;/li&gt;
&lt;li&gt;部署Iterator接口&lt;/li&gt;
&lt;li&gt;做为数据结构&lt;/li&gt;
&lt;/ul&gt;&lt;hr/&gt;&lt;p&gt;上述的介绍中，我们看到了generator是什么，下边我们看一下，目前中，我们使用最多的，generator函数的异步调用。&lt;/p&gt;
&lt;p&gt;异步编程对于单线程的JavaScript无疑是十分重要的（可以笼统的将异步定义为不连续的执行）。之前的文章中，我们也说过，JavaScript中对于异步的实现，就是回调函数。我们之前也有使用过promise去进行死亡回调的改良，promise来使回调嵌套的表现形式更好了些。其实呢generator函数也可以用来实现异步回调的嵌套。&lt;/p&gt;
&lt;p&gt;整个Generator函数就是一个封装的异步任务，或者说是异步任务的容器。异步操作需要暂停的地方，都用yield语句注明。除此之外，它还有两个特性，使它可以作为异步编程的完整解决方案：函数体内外的数据交换和错误处理机制。即为next方法还可以接收参数，向Generator函数体内输入数据。&lt;/p&gt;
&lt;h4 id=&quot;thunk函数&quot;&gt;Thunk函数&lt;/h4&gt;
&lt;p&gt;Thunk函数是自动执行Generator函数的一种方法。&lt;/p&gt;
&lt;p&gt;对于以前的函数参数的求值计算，有两种计算方式，一种是传值调用，一种是传名调用。编辑器中的“传名调用”的实现，往往是将参数放到一个临时函数之中，再将这个临时函数传入函数体，这个临时函数就叫做Thunk函数。&lt;/p&gt;
&lt;p&gt;JavaScript中使用的是传值调用，它的Thunk函数含义有所不同。再JavaScript中，替换的不是表达式，而是多参数函数的休整。&lt;/p&gt;
&lt;p&gt;Thunk函数可以用于Generator函数的自动流程管理。即使Generator函数可以自动执行。&lt;/p&gt;
&lt;h4 id=&quot;co模块&quot;&gt;co模块&lt;/h4&gt;
&lt;p&gt;co模块用于Generator函数的自动执行。co函数返回一个Promise对象，因此可以用then方法添加回调函数。&lt;/p&gt;
&lt;p&gt;使用了Generator函数之后，我们可以将多个异步嵌套的代码改为同步写异步，大大的简化了我们的代码量，以及代码的美观。&lt;/p&gt;
&lt;p&gt;上边就是大概的ES中的Generator函数的介绍，我们可以使用Generator来实现 lazy evaluation，Iterator和实现异步调用同步的写法，但是其中我们面临的更多的还是generator的执行问题，下一篇我们来看一下generator是怎么实现async/await来控制异步。以及co模块的实现。&lt;/p&gt;
</description>
<pubDate>Fri, 23 Mar 2018 07:44:00 +0000</pubDate>
<dc:creator>学习会让你青春永驻</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/blackgan/p/8630699.html</dc:identifier>
</item>
<item>
<title>面向服务的体系架构 SOA（三） --- Zookeeper API、zkClient API的使用 - 胡子叔叔</title>
<link>http://www.cnblogs.com/bearduncle/p/8602554.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/bearduncle/p/8602554.html</guid>
<description>&lt;p&gt;zookeeper简单介绍及API使用&lt;/p&gt;
&lt;p&gt;1.1 zookeeper简介&lt;/p&gt;
&lt;p&gt;zookeeper是一个针对大型分布式系统的可靠的协调系统，提供的功能包括配置维护、名字服务、分布式同步、组服务等。zookeeper可以集群复制，集群间通过zab协议来保持数据的一致性。该协议包括两个阶段：leader election阶段和Atomic broadcas阶段。&lt;/p&gt;
&lt;p&gt;leader election阶段：集群间选举出一个leader，其他的机器则称为follower，所有的写操作都被传送给leader，并通过broadcas将所有的更新告诉follower，当leader崩溃或leader失去大多数的follower时，需要重新选举出一个新的leader，让所有的服务器都恢复到一个正确的状态。当leader被选举出来且大多数服务器完成了和leader的状态同步后，leader election过程结束，进入Atomic broadcas阶段。&lt;/p&gt;
&lt;p&gt;Atomic broadcas阶段：Atomic broadcas同步leader和follower之间的信息，保证二者具有相同的系统状态。&lt;/p&gt;
&lt;p&gt;zookeeper的协作过程简化了松散耦合系统之间的交互，即使参与者彼此不知道对方的存在，也能够相互发现并且完成交互。&lt;/p&gt;
&lt;p&gt;1.2 zookeeper API简单使用&lt;/p&gt;
&lt;p&gt;可以认为zookeeper是一个小型的、精简的文件系统，它的每个节点称为znode，znode除了本身能够包含一部分数据之外，还能拥有子节点，当节点或子节点数据发生变化时，基于watcher机制，会发出相应的通知给订阅其状态变化的客户端。&lt;/p&gt;
&lt;p&gt;1.2.1 zookeeper节点创建&lt;/p&gt;
&lt;p&gt;maven项目中引入模块：&lt;/p&gt;
&lt;p&gt;&amp;lt;dependency&amp;gt;&lt;br/&gt;&amp;lt;groupId&amp;gt;org.apache.zookeeper&amp;lt;/groupId&amp;gt;&lt;br/&gt;&amp;lt;artifactId&amp;gt;zookeeper&amp;lt;/artifactId&amp;gt;&lt;br/&gt;&amp;lt;version&amp;gt;3.4.6&amp;lt;/version&amp;gt;&lt;br/&gt;&amp;lt;/dependency&amp;gt;&lt;/p&gt;
&lt;p&gt;创建zookeeper对象和节点：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;49&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; main(String[] args) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;         &lt;span&gt;/*&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;         * 127.0.0.1:2181：服务器地址
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;         * 10：超时时间
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;         * watcher：若包含boolean watch的读方法中传入true，则将默认watcher注册为所关注事件的watcher
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;         * 若传入false，则不注册任何watcher。此处暂且定为空
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;          &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt;         ZooKeeper zookeeper = &lt;span&gt;new&lt;/span&gt; ZooKeeper(&quot;127.0.0.1:2181&quot;, 10, &lt;span&gt;null&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;         &lt;span&gt;/*&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt; &lt;span&gt;         * 若创建的节点已经存在，则会抛出异常
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;         * /root：节点路径 ； root data：路径包含的字节数据
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;         * Ids.OPEN_ACL_UNSAFE：访问权限
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;         * CreateMode.PERSISTENT：节点类型
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;          &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt;         zookeeper.create(&quot;/root&quot;, &quot;root data&quot;&lt;span&gt;.getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;         &lt;span&gt;/*&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt; &lt;span&gt;         * 设置节点数据
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;         * -1：版本号；若匹配不到响应的节点则会抛出异常
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;          &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt;         zookeeper.setData(&quot;/root&quot;, &quot;hello&quot;.getBytes(), -1&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;         &lt;span&gt;/*&lt;/span&gt;
&lt;span&gt;22&lt;/span&gt; &lt;span&gt;         * 读取节点数据
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;         * stat是节点状态参数，读取时会传出该节点当前状态信息
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;          &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;25&lt;/span&gt;         Stat stat = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Stat();
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;         &lt;span&gt;byte&lt;/span&gt;[] data = zookeeper.getData(&quot;/root&quot;, &lt;span&gt;false&lt;/span&gt;&lt;span&gt;, stat);
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;         System.out.println(&lt;span&gt;new&lt;/span&gt;&lt;span&gt; String(data));
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;         &lt;span&gt;/*&lt;/span&gt;
&lt;span&gt;29&lt;/span&gt; &lt;span&gt;         * 添加子节点，若父节点不存在会抛出异常
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;          &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;31&lt;/span&gt;         zookeeper.create(&quot;/root/child&quot;, &quot;child data&quot;&lt;span&gt;.getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;         &lt;span&gt;/*&lt;/span&gt;
&lt;span&gt;33&lt;/span&gt; &lt;span&gt;         * 判断节点是否存在，不存在则返回的stat为null
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt;          &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;35&lt;/span&gt;         Stat existsStat = zookeeper.exists(&quot;/root/child&quot;, &lt;span&gt;false&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt; &lt;span&gt;        System.out.println(existsStat);
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt;         &lt;span&gt;/*&lt;/span&gt;
&lt;span&gt;38&lt;/span&gt; &lt;span&gt;         * /root/child：删除节点路径
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt; &lt;span&gt;         * -1：节点的版本号；若设置为-1，则匹配所有版本，zookeeper会比较删除的版本和服务器版本是否一致，不一致会抛出异常
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt;          &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;41&lt;/span&gt;         zookeeper.delete(&quot;/root/child&quot;, -1&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt;     }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 实际运行中最常出现这个错误：&lt;/p&gt;
&lt;p&gt;Exception in thread &quot;main&quot; org.apache.zookeeper.KeeperException$ConnectionLossException: KeeperErrorCode = ConnectionLoss for /root&lt;br/&gt;at org.apache.zookeeper.KeeperException.create(KeeperException.java:90)&lt;br/&gt;at org.apache.zookeeper.KeeperException.create(KeeperException.java:42)&lt;br/&gt;at org.apache.zookeeper.ZooKeeper.create(ZooKeeper.java:643)&lt;br/&gt;at com.project.soa.zookeeper.ZookeeperDemo.main(ZookeeperDemo.java:12)&lt;/p&gt;
&lt;p&gt;这是因为还未连接上zookeeper就开始添加、删除节点等操作，为避免这种情况发生，可以在做操作时对连接状态做判断：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; ZooKeeper zookeeper = &lt;span&gt;new&lt;/span&gt; ZooKeeper(&quot;127.0.0.1:2181&quot;, 10, &lt;span&gt;null&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (zookeeper.getState() ==&lt;span&gt; States.CONNECTED) {
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; 
&lt;span&gt;4&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 1.2.2 watcher的实现&lt;/p&gt;
&lt;p&gt;节点的状态发生变化，可以通过zookeeper的watcher机制让客户端取得通知。watcher的实现较为简单，只需实现org.apache.ZooKeeper.Watcher接口即可，其中节点的状态变化包含以下几种状态：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1160920/201803/1160920-20180322103659894-1008207103.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;注意：watcher机制是一次性的，每次处理完状态变化事件之后需重新注册watcher。这也导致在处理事件和重新加上watcher这段时间发生的节点状态无法被感知。&lt;/p&gt;
&lt;p&gt;1.2.3 zkClient的使用&lt;/p&gt;
&lt;p&gt;zkClient解决了watcher的一次性注册问题，将znode的事件重新定义为子节点的变化、数据的变化、连接及状态的变化三类，watcher执行后重新读取数据的同时再注册相同的watcher。在异常发生时zkClient会自动创建新的zookeeper实例进行重连，此时原来的watcher节点都将失效，可在zkClient定义的连接状态变化的接口中进行相应处理。同时zkClient还提供了序列化和反序列化接口ZkSerializer，简化了znode上对象的存储。&lt;/p&gt;
&lt;p&gt;maven中引入zkClient模块：&lt;/p&gt;
&lt;pre&gt;
&amp;lt;dependency&amp;gt;&lt;br/&gt;&amp;lt;groupId&amp;gt;com.github.sgroschupf&amp;lt;/groupId&amp;gt;&lt;br/&gt;&amp;lt;artifactId&amp;gt;zkclient&amp;lt;/artifactId&amp;gt;&lt;br/&gt;&amp;lt;version&amp;gt;0.1&amp;lt;/version&amp;gt;&lt;br/&gt;&amp;lt;/dependency&amp;gt;&lt;p&gt;简单事例：
&lt;/p&gt;&lt;/pre&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;         ZkClient zkClient = &lt;span&gt;new&lt;/span&gt; ZkClient(&quot;192.168.146.132:2181&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;         String path = &quot;/root&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;        zkClient.createPersistent(path);
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;         zkClient.create(path + &quot;/child&quot;, &quot;znode child&quot;&lt;span&gt;, CreateMode.EPHEMERAL);
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;         List&amp;lt;String&amp;gt; children =&lt;span&gt; zkClient.getChildren(path);
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;        System.out.println(children);
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt; countChildren =&lt;span&gt; zkClient.countChildren(path);
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;        System.out.println(countChildren);
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;        System.out.println(zkClient.exists(path));
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;         zkClient.writeData(path + &quot;/child&quot;, &quot;hello everyone&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;         Object data = zkClient.readData(path + &quot;/child&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;        System.out.println(data);
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;         zkClient.delete(path + &quot;/child&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;         
&lt;span&gt;16&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;订阅数据的变化&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt;         zkClient.subscribeDataChanges(path, &lt;span&gt;new&lt;/span&gt;&lt;span&gt; IZkDataListener() {
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;             
&lt;span&gt;19&lt;/span&gt;             &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; handleDataDeleted(String arg0) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;                 
&lt;span&gt;21&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;             
&lt;span&gt;23&lt;/span&gt;             &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; handleDataChange(String arg0, Object arg1) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;                 
&lt;span&gt;25&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; &lt;span&gt;        });
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; 
&lt;span&gt;28&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;订阅子节点的变化&lt;/span&gt;
&lt;span&gt;29&lt;/span&gt;         zkClient.subscribeChildChanges(path, &lt;span&gt;new&lt;/span&gt;&lt;span&gt; IZkChildListener() {
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;             
&lt;span&gt;31&lt;/span&gt;             &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; handleChildChange(String arg0, List&amp;lt;String&amp;gt; arg1) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;                 
&lt;span&gt;33&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; &lt;span&gt;        });
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt;         
&lt;span&gt;36&lt;/span&gt;         zkClient.subscribeStateChanges(&lt;span&gt;new&lt;/span&gt;&lt;span&gt; IZkStateListener() {
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt;             
&lt;span&gt;38&lt;/span&gt;             &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; handleStateChanged(KeeperState arg0) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt;                 
&lt;span&gt;40&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt;             
&lt;span&gt;42&lt;/span&gt;             &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; handleNewSession() &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt;                 &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 在这里可以进行异常发生时节点失效的容错处理&lt;/span&gt;
&lt;span&gt;44&lt;/span&gt;                 
&lt;span&gt;45&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt; &lt;span&gt;        });
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt;     }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 1.2.4 路由和负载均衡&lt;/p&gt;
&lt;p&gt;当服务规模变大时，服务之间的依赖变得十分复杂，这时我们不仅需要了解服务提供方，还需要了解服务消费方以了解服务的调用情况，可以以此作为服务扩容或下线的依据。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1160920/201803/1160920-20180323102827956-211667244.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;服务消费者获取服务提供者地址列表的部分代码为：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;     List&amp;lt;String&amp;gt;&lt;span&gt; serverList;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; List&amp;lt;String&amp;gt;&lt;span&gt; getServerList() {
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;         serverList = &lt;span&gt;new&lt;/span&gt; ArrayList&amp;lt;String&amp;gt;&lt;span&gt;();
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;         String serviceName = &quot;server - A&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;         String serviceString = &quot;127.0.0.1:2181&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;         String path = &quot;/config/&quot; +&lt;span&gt; serviceName;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;         ZkClient zkClient = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; ZkClient(serviceString);
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (zkClient.exists(path)) {&lt;span&gt;//&lt;/span&gt;&lt;span&gt;服务存在则取地址列表&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt;             serverList =&lt;span&gt; zkClient.getChildren(path);
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;         } &lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;             &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; RuntimeException();
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 注册监听事件&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt;         zkClient.subscribeChildChanges(path, &lt;span&gt;new&lt;/span&gt;&lt;span&gt; IZkChildListener() {
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; 
&lt;span&gt;17&lt;/span&gt;             &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; handleChildChange(String s, List&amp;lt;String&amp;gt; list) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;                 serverList =&lt;span&gt; list;
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;        });
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; serverList;
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;     }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;先取得服务上所注册的包含服务提供者地址的子节点，取得服务器地址列表后便可根据负载均衡算法选取调用服务器，服务器列表还存在本地以降低网络开销。注册监听器来感知服务器上线、下线和宕机事件，若发生节点改动，则将监听方法中取得的最新子节点赋给当前的serverList。&lt;/p&gt;
&lt;p&gt;服务提供者向zookeeper注册服务：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;         String path = &quot;/config&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;         String serverList = &quot;127.0.0.1:2181&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;         String serverName = &quot;server&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;         ZkClient zkClient = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; ZkClient(serverList);
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;zkClient.exists(path)) {
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;             zkClient.createPersistent(path);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;创建根节点&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (zkClient.exists(path + &quot;/&quot; +&lt;span&gt; serverName)) {
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;             zkClient.createPersistent(path + &quot;/&quot; + serverName);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;创建服务节点&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;注册当前服务器&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt;         InetAddress addr =&lt;span&gt; InetAddress.getLocalHost();
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;取得本机ip&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt;         String ip =&lt;span&gt; addr.getHostAddress().toString();
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;创建当前服务器节点&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt;         zkClient.createPersistent(path + &quot;/&quot; + serverName + &quot;/&quot; + ip);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这样只有当配置信息更新时服务消费者才会去获取最新的服务地址列表，其他时候使用本地缓存即可，这样能大大降低配置中心的压力。&lt;/p&gt;
&lt;p&gt;1.3 HTTP服务网关&lt;/p&gt;
&lt;p&gt;移动互联网的崛起出现了多平台的现状，同样的功能厂商需根据不同平台开发不同的APP，使得开发成本增高。而由于客户端APP、第三方ISV（独立软件开发商）应用都必须经过公共网络来发起客户端请求，网关（gateway）作用得以凸显。gateway接收外部各种APP的请求，经过一系列权限与安全校验等，根据服务名到对应配置中心选取服务器列表，再由负载均衡算法选取一台服务器进行调用，将结果返回给客户端。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1160920/201803/1160920-20180323151635531-1097801616.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;gateway可以拦截一系列恶意请求，而且能使不同的平台共用重复的逻辑，降低开发和运维成本。但由于gateway是整个网络的核心节点，一旦失效，依赖它的所有外部APP都将无法使用，因此在设计之初应该考虑到系统流量的监控和容量的规划，以便在达到峰值时能够快速进行系统扩容。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1160920/201803/1160920-20180323152130313-806792001.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;上图是一种网关集群的架构方案，一组对等的服务器组成网关集群接收外部HTTP请求，当流量达到警戒值，能方便地增加机器进行扩容。网关前有两台负载均衡设备负责对网关集群进行负载均衡，设备间进行心跳检测，一旦其中一台宕机，另一台则变更自己的地址接管宕机设备，平时这两台机器均对外提供服务。&lt;/p&gt;
</description>
<pubDate>Fri, 23 Mar 2018 07:26:00 +0000</pubDate>
<dc:creator>胡子叔叔</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/bearduncle/p/8602554.html</dc:identifier>
</item>
<item>
<title>【阿里聚安全·安全周刊】500万台Android设备受感染|YouTube封杀枪支组装视频 - 阿里聚安全</title>
<link>http://www.cnblogs.com/alisecurity/p/8630536.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/alisecurity/p/8630536.html</guid>
<description>&lt;p&gt;&lt;strong data-spm-anchor-id=&quot;a313e.7916648.0.i1.30cd70c11jSNrO&quot;&gt;本周&lt;/strong&gt;&lt;strong&gt;的&lt;/strong&gt;&lt;strong&gt;七个&lt;/strong&gt;&lt;strong&gt;关键词&lt;/strong&gt;&lt;strong&gt;：&lt;/strong&gt;&lt;strong&gt; &lt;/strong&gt;&lt;strong&gt; 500万Android 设备受感染&lt;/strong&gt;&lt;strong&gt;丨 &lt;/strong&gt;&lt;strong&gt;黑客将矛头指向无线传输协议&lt;/strong&gt;&lt;strong&gt; &lt;/strong&gt;&lt;strong&gt;丨  &lt;/strong&gt;&lt;strong&gt;YouTube封杀枪支视频&lt;/strong&gt;&lt;strong&gt; &lt;/strong&gt;&lt;strong&gt;丨 &lt;/strong&gt;&lt;strong&gt;AMD将发布补丁&lt;/strong&gt;&lt;strong&gt; &lt;/strong&gt;&lt;strong&gt;丨 &lt;/strong&gt;&lt;strong&gt;Gooligan Android 僵尸网络&lt;/strong&gt;&lt;strong&gt; &lt;/strong&gt;&lt;strong&gt;丨  &lt;/strong&gt;&lt;strong&gt;Native代码加壳保护&lt;/strong&gt;&lt;strong&gt; &lt;/strong&gt;&lt;strong&gt;丨&lt;/strong&gt;&lt;strong&gt;Java 10&lt;/strong&gt;&lt;/p&gt;

&lt;p data-spm-anchor-id=&quot;a313e.7916648.0.i0.30cd70c11jSNrO&quot;&gt;&lt;strong&gt;-1-  &lt;/strong&gt; 【Android】恶意广告程序 RottenSys 感染近 500 万台 Android 设备&lt;/p&gt;
&lt;p&gt;来源：hackernews.cc&lt;/p&gt;
&lt;p&gt;------------------------------------------------------&lt;/p&gt;
&lt;p&gt;据外媒消息，安全公司 Check Point披露了一个名为 RottenSys 的恶意软件家族 —— 通过伪装成系统 Wi-Fi 服务，增加广告收入。根据调查，自 2016 年起，该移动广告软件已感染了近 &lt;strong&gt;500 万台 Android 设备&lt;/strong&gt;，其中受影响较大的包括荣耀、华为以及小米。&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://epo.alicdn.com/image/474udgt9vgd0.png&quot; alt=&quot;&quot; width=&quot;543&quot; height=&quot;329&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;根据 Check Point 的调查，恶意团伙利用 RottenSys 谋取暴利，每 10 天的收入能达到 115,000 美元。目前，感染排名靠前的手机品牌有华为荣耀、华为、小米、OPPO、vivo 等。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;并且需要注意的是，由于 RottenSys 的功能比较广泛，攻击者还可能会利用它来做出一些远比广告更具破坏性的行为。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://jaq.alibaba.com/community/art/show?spm=a313e.7916646.24000001.11.d404c78brwhFF&amp;amp;articleid=1560&quot; target=&quot;_blank&quot;&gt;http://jaq.alibaba.com/community/art/show?articleid=1560&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;&lt;strong&gt;-2-   &lt;/strong&gt;【黑客】不只WiFi：黑客社区将矛头指向四大无线传输标准&lt;/p&gt;
&lt;p&gt;来源： E安全&lt;/p&gt;
&lt;p&gt;------------------------------------------------------------------&lt;/p&gt;
&lt;p&gt;WiFi 是黑客入侵活动的典型实例之一。事实上，WiFi 黑客社区目前正处于质变的边缘。考虑到预构型黑客工具与软件定义无线装置的易用性，黑客即将在 WiFi 之后将攻击矛头指向 Zigbee、蓝牙以及 Sigfox 等其它无线传输协议。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://epo.alicdn.com/image/474uj2m7s4i0.jpg&quot; alt=&quot;&quot; width=&quot;650&quot; height=&quot;386&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;以下为四种常见的无线通信标准，具有经济价值，且可通过新型 SDR 工具轻松进行攻击。相信它们将在不久的将来成为黑客攻击活动的主要目标。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;蓝牙设备、Zigbee物联网设备、面向车库及汽车的“密钥卡”标准、大规模机器对机器（简称M2M）无线网络&lt;br/&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;SDR攻击工具的商品化趋势已经使得无线通信标准极易被全球各高水平黑客社区所攻破。对于无线产品消费者与供应商而言，对SDR攻击工具及其带来的威胁加以关注已经成为当务之急——特别是考虑到上述诱人且易受攻击的广泛潜在目标。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://jaq.alibaba.com/community/art/show?spm=a313e.7916646.24000001.9.d404c78brwhFF&amp;amp;articleid=1562&quot; target=&quot;_blank&quot;&gt;http://jaq.alibaba.com/community/art/show?articleid=1562&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;&lt;strong&gt;-3-   &lt;/strong&gt;【内容安全】YouTube增强对枪支相关视频内容的管控力度 封杀大量枪支组装视频&lt;/p&gt;
&lt;p&gt;来源：cnbeta.com&lt;/p&gt;
&lt;p&gt;------------------------------------------------------------------------------&lt;/p&gt;
&lt;p&gt;震惊全美的2·14佛州校园枪击案再次让控枪成为热点话题，甚至于特朗普也表态要增强枪支管制，然而整个推进工作非常有限度。为此，全球最大视频网站YouTube宣布率先行动，&lt;strong&gt;加强对枪支相关视频内容的管控力度，禁止出现贩卖枪支、展示相关配件、传授观众如何组装枪支等相关视频&lt;/strong&gt;，用实际行动表明对3月24日全国反枪支大游行March for Our Lives的支持。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://epo.alicdn.com/image/474ul6o72t20.jpg&quot; alt=&quot;&quot; width=&quot;650&quot; height=&quot;367&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;YouTube在其官方网站上写道：“YouTube禁止某些涉及枪支的视频内容。这包括关于制造枪支、弹药、大弹匣自制消音器/抑制器(Suppressor)，或者某些枪械配件的说明等等，此外还包括如何将枪支改装成自动或者半自动武器的演示说明等等。”&lt;/strong&gt; &lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://jaq.alibaba.com/community/art/show?spm=a313e.7916646.24000001.4.d404c78brwhFF&amp;amp;articleid=1569&quot; target=&quot;_blank&quot;&gt;http://jaq.alibaba.com/community/art/show?articleid=1569&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;&lt;strong&gt;-4-   &lt;/strong&gt;【漏洞】AMD确认产品存在漏洞，补丁即将发布&lt;/p&gt;
&lt;p&gt;来源：Freebuf.COM&lt;/p&gt;
&lt;p&gt;------------------------------------------------------------------------------&lt;/p&gt;
&lt;p&gt;AMD已经正式确认3月12日发布的RyzenFall，MasterKey，Fallout和Chimera漏洞的有效性，并表示将在“未来几周内发布补丁。”&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://epo.alicdn.com/image/474umkga6m20.png&quot; alt=&quot;&quot; width=&quot;650&quot; height=&quot;443&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;AMD首席技术官Mark Papermaster证实，这些漏洞确实存在，并且影响了AMD Ryzen和EPYC系列处理器。&lt;br/&gt;三个漏洞–MasterKey，Fallout和RyzenFall–影响AMD平台安全处理器（PSP）这是一个类似于英特尔管理引擎（ME）的安全芯片处理器，与其他AMD产品在硬件层面上就有所不同，通常它会处理安全数据，如密码，加密密钥等。&lt;br/&gt;最后一个Chimera漏洞会影响管理处理器，内存和外设之间通信的AMD芯片组（主板组件），攻击者可以执行代码并将虚假信息传递给其他组件。&lt;br/&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://jaq.alibaba.com/community/art/show?spm=a313e.7916646.24000001.2.d404c78brwhFF&amp;amp;articleid=1571&quot; target=&quot;_blank&quot;&gt;http://jaq.alibaba.com/community/art/show?articleid=1571&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;&lt;strong&gt;-5-  &lt;/strong&gt;  【僵尸网络】Gooligan Android 僵尸网络如何运作&lt;/p&gt;
&lt;p&gt;来源：solidot&lt;/p&gt;
&lt;p&gt;-------------------------------------------------------------------------------------&lt;/p&gt;
&lt;p&gt;2016 年安全公司 Check Point 披露了被称为 Gooligan 的恶意程序劫持了超过一百万 Google 账号令牌。该恶意程序利用 Kingroot 工具 root 被感染的设备，窃取访问 Google Play、Gmail、Google Photos、Google Docs、G Suite 和 Google Drive 数据的认证令牌。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://epo.alicdn.com/image/474uqnhge200.png&quot; alt=&quot;&quot; width=&quot;650&quot; height=&quot;350&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;现在，Google 的安全研究员 Elie Bursztein 发表了多篇博文介绍了该恶意程序的内部工作原理及其幕后的攻击者。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;研究人员认为攻击者位于中国大陆，伪装成市场营销公司，实际上背后运作了多种骗局。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://jaq.alibaba.com/community/art/show?spm=a313e.7916646.24000001.5.d404c78brwhFF&amp;amp;articleid=1567&quot; target=&quot;_blank&quot;&gt;http://jaq.alibaba.com/community/art/show?articleid=1567&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;&lt;strong&gt;-6-   &lt;/strong&gt;【应用加固】如何解决恶意APK中常见的Native代码加壳保护&lt;/p&gt;
&lt;p&gt;来源： 嘶吼&lt;/p&gt;
&lt;p&gt;--------------------------------------------------&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;在分析恶意软件时偶然会发现受Native代码加壳保护的APK，本文将介绍如何解决恶意APK中常见的Native代码加壳保护。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://epo.alicdn.com/image/474utu6gfqm0.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://jaq.alibaba.com/community/art/show?spm=a313e.7916642.220000NaN1.2.42bc94e7uQA7Dx&amp;amp;articleid=1565&quot; target=&quot;_blank&quot;&gt;http://jaq.alibaba.com/community/art/show?articleid=1565&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;&lt;strong&gt;-7-   &lt;/strong&gt;【Java】Java 10 正式发布：包含 109 项新特性&lt;/p&gt;
&lt;p&gt;来源：开源中国社区&lt;/p&gt;
&lt;p&gt;--------------------------------------------------------------------------&lt;/p&gt;
&lt;p&gt;Java 10 是采用新发布周期的第一个版本，提供了 109 项新特性，其中最备受关注的莫过于局部变量的类型推断。（可下载）&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://epo.alicdn.com/image/dggddqt30ls.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://jaq.alibaba.com/community/art/show?spm=a313e.7916642.220000NaN1.1.186892dbVyqK0G&amp;amp;articleid=1568&quot; target=&quot;_blank&quot;&gt;http://jaq.alibaba.com/community/art/show?articleid=1568&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;——————————————————————————————&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;以上是本周的安全周刊，想了解更多内容，请访问&lt;a href=&quot;http://jaq.alibaba.com/community/index.htm&quot; target=&quot;_blank&quot;&gt;阿里聚安全官方博客&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Fri, 23 Mar 2018 07:25:00 +0000</pubDate>
<dc:creator>阿里聚安全</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/alisecurity/p/8630536.html</dc:identifier>
</item>
<item>
<title>使用kafka connect，将数据批量写到hdfs完整过程 - 且聆听风</title>
<link>http://www.cnblogs.com/listenfwind/p/8610487.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/listenfwind/p/8610487.html</guid>
<description>&lt;p&gt;&lt;span&gt;版权声明：本文为博主原创文章，未经博主允许不得转载&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;本文是基于hadoop 2.7.1，以及kafka 0.11.0.0。kafka-connect是以单节点模式运行，即standalone。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;首先，先对kafka和kafka connect做一个简单的介绍&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;strong&gt;kafka&lt;/strong&gt;：Kafka是一种高吞吐量的分布式发布订阅消息系统，它可以处理消费者规模的网站中的所有动作流数据。比较直观的解释就是其有一个生产者（producer）和一个消费者（consumer）。可以将kafka想象成一个数据容器，生产者负责发送数据到这个容器中，而消费者从容器中取出数据，在将数据做处理，如存储到hdfs。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;strong&gt;kafka connect&lt;/strong&gt;：Kafka Connect是一种用于在Kafka和其他系统之间可扩展的、可靠的流式传输数据的工具。它使得能够快速定义将大量数据集合移入和移出Kafka的连接器变得简单。即适合批量数据导入导出操作。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;下面将介绍如何用kafka connect将数据写入到hdfs中。包括在这个过程中可能碰到的一些问题说明。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;首先启动kafka-connect:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
bin/connect-standalone.sh config/connect-standalone.properties config/connector1.properties
&lt;/pre&gt;&lt;/div&gt;
&lt;pre readability=&quot;4&quot;&gt;
&lt;span readability=&quot;2&quot;&gt;这个命令后面两个参数，&lt;br/&gt;　　第一个是指定启动的模式，有分布式和单节点两种，这里是单节点。kafka自带，放于config目录下。&lt;br/&gt;　　第二个参数指向描述connector的属性的文件，可以有多个，这里只有一个connector用来写入到hdfs。需要自己创建。&lt;p&gt;接下来看看connector1.properties的内容，&lt;br/&gt;&lt;/p&gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;name=&quot;test&quot;    #该connector的名字
connector.class=hdfs.HdfsSinkConnector #将自己按connect接口规范编写的代码打包后放在kafka/libs目录下，再根据项目结构引用对应connector
tasks.max=1     #Task是导入导出的具体实现，这里是指定多少个task来并行运行导入导出作业，由多线程实现。由于hdfs中一个文件每次只能又一个文件操作，所以这里只能是1.
topics=test      #指定从哪个topic读取数据，这些其实是用来在connector或者task的代码中读取的。
key.converter=org.apache.kafka.connect.converters.ByteArrayConverter    #指定key以那种方式转换，需和Producer发送方指定的序列化方式一致
value.converter=org.apache.kafka.connect.json.JsonConverter     #同上&lt;br/&gt;hdfs.url=hdfs://127.0.0.1:9000　　#hdfs的url路径，在Connector中会被读取&lt;br/&gt;hdfs.path=/test/file　　#hdfs文件路径，同样Connector中被读取&lt;br/&gt;key.converter.schemas.enable=true　　#稍后介绍，可以true也可以false&lt;br/&gt;value.converter.schemas.enable=true　　#稍后介绍，可以true也可以false&lt;br/&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;
&lt;span&gt;接下来看代码，connect主要是&lt;strong&gt;导入导出&lt;/strong&gt;两个概念，&lt;strong&gt;导入是source，导出时Sink&lt;/strong&gt;。这里只使用Sink，不过Source和Sink的实现其实基本相同。&lt;p&gt;先是Connector&lt;br/&gt;&lt;/p&gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;47&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; HdfsSinkConnector &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; SinkConnector {
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;这两项为配置hdfs的urlh和路径的配置项，需要在connector1.properties中指定&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; String HDFS_URL = &quot;hdfs.url&quot;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; String HDFS_PATH = &quot;hdfs.path&quot;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; ConfigDef CONFIG_DEF = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; ConfigDef()
            .define(HDFS_URL, ConfigDef.Type.STRING, ConfigDef.Importance.HIGH, &lt;/span&gt;&quot;hdfs url&quot;&lt;span&gt;)
            .define(HDFS_PATH, ConfigDef.Type.STRING, ConfigDef.Importance.HIGH, &lt;/span&gt;&quot;hdfs path&quot;&lt;span&gt;);
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String hdfsUrl;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String hdfsPath;
    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String version() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; AppInfoParser.getVersion();
    }
    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; start(Map&amp;lt;String, String&amp;gt;&lt;span&gt; props) {
        hdfsUrl &lt;/span&gt;=&lt;span&gt; props.get(HDFS_URL);
        hdfsPath &lt;/span&gt;=&lt;span&gt; props.get(HDFS_PATH);
    }

    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; Class&amp;lt;? &lt;span&gt;extends&lt;/span&gt; Task&amp;gt;&lt;span&gt; taskClass() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; HdfsSinkTask.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;;
    }

    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; List&amp;lt;Map&amp;lt;String, String&amp;gt;&amp;gt; taskConfigs(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; maxTasks) {
        ArrayList&lt;/span&gt;&amp;lt;Map&amp;lt;String, String&amp;gt;&amp;gt; configs = &lt;span&gt;new&lt;/span&gt; ArrayList&amp;lt;&amp;gt;&lt;span&gt;();
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = 0; i &amp;lt; maxTasks; i++&lt;span&gt;) {
            Map&lt;/span&gt;&amp;lt;String, String&amp;gt; config = &lt;span&gt;new&lt;/span&gt; HashMap&amp;lt;&amp;gt;&lt;span&gt;();
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (hdfsUrl != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
                config.put(HDFS_URL, hdfsUrl);
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (hdfsPath != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
                config.put(HDFS_PATH, hdfsPath);
            configs.add(config);
        }
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; configs;
    }

    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; stop() {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Nothing to do since FileStreamSinkConnector has no background monitoring.&lt;/span&gt;
&lt;span&gt;    }

    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; ConfigDef config() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; CONFIG_DEF;
    }

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;接下来是Task&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; HdfsSinkTask &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; SinkTask {
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; Logger log = LoggerFactory.getLogger(HdfsSinkTask.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;);

    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String filename;

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt;&lt;span&gt; String hdfsUrl;
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt;&lt;span&gt; String hdfsPath;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; Configuration conf;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; FSDataOutputStream os;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; FileSystem hdfs;


    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; HdfsSinkTask(){

    }

    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String version() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; HdfsSinkConnector().version();
    }

    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; start(Map&amp;lt;String, String&amp;gt;&lt;span&gt; props) {
        hdfsUrl &lt;/span&gt;=&lt;span&gt; props.get(HdfsSinkConnector.HDFS_URL);
        hdfsPath &lt;/span&gt;=&lt;span&gt; props.get(HdfsSinkConnector.HDFS_PATH);
        System.out.println(&lt;/span&gt;&quot;----------------------------------- start--------------------------------&quot;&lt;span&gt;);

        conf &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Configuration();&lt;/span&gt;
        conf.set(&quot;fs.defaultFS&quot;&lt;span&gt;, hdfsUrl);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;这两个是与hdfs append相关的设置&lt;/span&gt;
        conf.setBoolean(&quot;dfs.support.append&quot;, &lt;span&gt;true&lt;/span&gt;&lt;span&gt;);
        conf.set(&lt;/span&gt;&quot;dfs.client.block.write.replace-datanode-on-failure.policy&quot;, &quot;NEVER&quot;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt;{
            hdfs &lt;/span&gt;=&lt;span&gt; FileSystem.get(conf);
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;            connector.hdfs = new Path(HDFSPATH).getFileSystem(conf);&lt;/span&gt;
            os = hdfs.append(&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Path(hdfsPath));
        }&lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (IOException e){
            System.out.println(e.toString());
        }

    }

    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; put(Collection&amp;lt;SinkRecord&amp;gt;&lt;span&gt; sinkRecords) {
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt; (SinkRecord record : sinkRecords) {
            log.trace(&lt;/span&gt;&quot;Writing line to {}: {}&quot;&lt;span&gt;, logFilename(), record.value());
            &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt;{
                System.out.println(&lt;/span&gt;&quot;write info------------------------&quot; + record.value().toString() + &quot;-----------------&quot;&lt;span&gt;);
                os.write((record.value().toString()).getBytes(&lt;/span&gt;&quot;UTF-8&quot;&lt;span&gt;));
                os.hsync();
            }&lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt;(Exception e){
                System.out.print(e.toString());
            }
        }
    }

    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; flush(Map&amp;lt;TopicPartition, OffsetAndMetadata&amp;gt;&lt;span&gt; offsets) {
        &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt;{
            os.hsync();
        }&lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception e){
            System.out.print(e.toString());
        }

    }
    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; stop() {
        &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
            os.close();
        }&lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt;(IOException e){
            System.out.println(e.toString());
        }
    }

    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String logFilename() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; filename == &lt;span&gt;null&lt;/span&gt; ? &quot;stdout&quot;&lt;span&gt; : filename;
    }


}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;
&lt;span&gt;&lt;br/&gt;&lt;span&gt;这里重点提一下，因为在connector1.propertise中设置了&lt;/span&gt;&lt;span&gt;key.converter=org.apache.kafka.connect.converters.ByteArrayConverter，所以不能用命令行形式的&lt;/span&gt;&lt;br/&gt;&lt;/span&gt;&lt;span&gt;producer发送数据，而是要用程序的方式，并且在producer总也要设置key的序列化形式为&lt;span&gt;org.apache.kafka.common.serialization.ByteArraySerializer&lt;/span&gt;。&lt;/span&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;span&gt;编码完成，先用idea以开发程序与依赖包分离的形式打包成jar包，然后将程序对应的jar包（一般就是“项目名.jar”）放到kafka/libs目录下面，这样就能被找到。&lt;/span&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;span&gt;接下来对这个过程的问题做一个汇总。&lt;/span&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;span&gt;&lt;strong&gt;1.在connector1.properties中的key.converter.schemas.enable=false和value.converter.schemas.enable=false的问题。&lt;/strong&gt;&lt;br/&gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;span&gt;这个选项默认在connect-standalone.properties中是true的，这个时候发送给topic的Json格式是需要使用avro格式，具体情况可以百度，这里给出一个样例。&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;57&quot;&gt;
&lt;pre&gt;
&lt;span&gt;{
    &quot;schema&quot;: {
        &quot;type&quot;: &quot;struct&quot;,
        &quot;fields&quot;: [{
            &quot;type&quot;: &quot;int32&quot;,
            &quot;optional&quot;: true,
            &quot;field&quot;: &quot;c1&quot;
        }, {
            &quot;type&quot;: &quot;string&quot;,
            &quot;optional&quot;: true,
            &quot;field&quot;: &quot;c2&quot;
        }, {
            &quot;type&quot;: &quot;int64&quot;,
            &quot;optional&quot;: false,
            &quot;name&quot;: &quot;org.apache.kafka.connect.data.Timestamp&quot;,
            &quot;version&quot;: 1,
            &quot;field&quot;: &quot;create_ts&quot;
        }, {
            &quot;type&quot;: &quot;int64&quot;,
            &quot;optional&quot;: false,
            &quot;name&quot;: &quot;org.apache.kafka.connect.data.Timestamp&quot;,
            &quot;version&quot;: 1,
            &quot;field&quot;: &quot;update_ts&quot;
        }],
        &quot;optional&quot;: false,
        &quot;name&quot;: &quot;foobar&quot;
    },
    &quot;payload&quot;: {
        &quot;c1&quot;: 10000,
        &quot;c2&quot;: &quot;bar&quot;,
        &quot;create_ts&quot;: 1501834166000,
        &quot;update_ts&quot;: 1501834166000
    }
}  &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;主要就是schema和payload这两个，不按照这个格式会报错如下&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;org.apache.kafka.connect.errors.DataException: JsonConverter with schemas.enable requires &quot;schema&quot; and &quot;payload&quot; fields and may not contain additional fields. If you are trying to deserialize plain JSON data, set schemas.enable=false in your converter configuration.

   at org.apache.kafka.connect.json.JsonConverter.toConnectData(JsonConverter.java:308)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;如果想发送普通的json格式而不是avro格式的话，很简单key.converter.schemas.enable和value.converter.schemas.enable设置为false就行。这样就能发送普通的json格式数据。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;2.在启动的过程中出现各种各样的java.lang.ClassNotFoundException。&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;在启动connector的时候，一开始总是会报各个各样的ClassNotFoundException，不是这个包就是那个包，查找问题一直说要么缺少包要么是包冲突。这个是什么原因呢？&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;其实归根结底还是依赖冲突的问题，因为kafka程序自定义的类加载器加载类的目录是在kafka/libs中，而写到hdfs需要hadoop的包。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;我一开始的做法是将hadoop下的包路径添加到CLASSPATH中，这样子问题就来了，因为kafka和hadoop的依赖包是有冲突的，比如hadoop是guava-11.0.2.jar，而kafka是guava-20.0.jar，两个jar包版本不同，而我们是在kafka程序中调用hdfs，所以当jar包冲突时应该优先调用kafka的。但是注意kafka用的是程序自定义的类加载器，其优先级是低于CLASSPATH路径下的类的，就是说加载类时会优先加载CLASSPATH下的类。这样子就有问题了。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;我的解决方案时将kafka和hadoop加载的jar包路径都添加到CLASSPATH中，并且kafka的路径写在hadoop前面，这样就可以启动connector成功。&lt;/span&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;em id=&quot;__mceDel&quot;&gt;&lt;em id=&quot;__mceDel&quot;&gt;&lt;span&gt; &lt;/span&gt;&lt;/em&gt;&lt;/em&gt;
&lt;/pre&gt;</description>
<pubDate>Fri, 23 Mar 2018 07:13:00 +0000</pubDate>
<dc:creator>且聆听风</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/listenfwind/p/8610487.html</dc:identifier>
</item>
<item>
<title>谷歌弃用图片验证码，从此告别奇葩验证码 - 随遇_而安</title>
<link>http://www.cnblogs.com/happy22/p/8630404.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/happy22/p/8630404.html</guid>
<description>&lt;p align=&quot;center&quot;&gt;&lt;span&gt;本月底，谷歌&lt;/span&gt;&lt;span&gt;Google即将停止全球图片验证码服务，这个困扰我们多年的验证码终于要退出历史的舞台了。官方宣告可以看以下截图：&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1229605/201803/1229605-20180323150121049-176207587.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt; &lt;/p&gt;
&lt;p&gt;&lt;span&gt;想必验证码的发展史已经众所周知了，从&lt;/span&gt;2002年到如今，经过了16年的发展，这个最开始被大家称赞的“安全卫士”到如今却成了频繁被吐槽的对象。这一切，都要源于其越来越糟糕的用户体验。为了与黑客对抗，图片验证码被设计得越来越复杂，甚至可以说越来越奇葩......&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt; &lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1229605/201803/1229605-20180323150224514-1927557587.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;越来越复杂的图片验证码&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1229605/201803/1229605-20180323150149408-1385891906.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; 欺负我数学不好吗？&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1229605/201803/1229605-20180323150310188-569124286.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt; 欺负我没学过物理吗？&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1229605/201803/1229605-20180323150327001-862327133.png&quot; alt=&quot;&quot;/&gt; &lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;你懂这个是什么意思吗？&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1229605/201803/1229605-20180323150334803-1927412972.png&quot; alt=&quot;&quot;/&gt; &lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;大哥，我脸盲啊！&lt;/p&gt;


&lt;p&gt;&lt;span&gt;奇葩验证码不仅在体验感上严重反人类，在技术层面也得不到安全保障。随着计算机技术的发展和知识的普及，黑客通过图片清理和&lt;/span&gt;OCR&lt;span&gt;技术，就能轻松做到对复杂图片验证码的破解。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1229605/201803/1229605-20180323150354875-2022668727.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;图片验证码破解软件&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt; &lt;/p&gt;
&lt;p&gt;&lt;span&gt;作为互联网巨头&lt;/span&gt;—谷歌预见了形同虚设的图片验证码将迎来时代的终结，因此才发出公告正式宣布全面停止图片验证码服务。然而许多大型的网站及企业仍然没有意识到这一点，依旧还在重要的网络交互环节中使用图片验证码，比如&lt;span&gt;App Store&lt;/span&gt;&lt;span&gt;、&lt;/span&gt;&lt;span&gt;12306&lt;/span&gt;&lt;span&gt;、国拍行&lt;/span&gt;&lt;span&gt;......&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1229605/201803/1229605-20180323150409641-1712380211.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; App Store&lt;span&gt;图片验证码&lt;/span&gt;&lt;/p&gt;


&lt;p&gt; 令人头疼的图片验证码不仅严重影响到人们的上网体验，对于互联网交互安全而言也是存在极大的安全隐患。因此，除了谷歌外，也有不少的互联网公司针对验证码进行了不同的改进。&lt;/p&gt;

&lt;p align=&quot;justify&quot;&gt;一．行为验证码&lt;/p&gt;
&lt;p&gt;&lt;span&gt;行为验证码算是目前比较主流的验证码了，用户不再需要将时间浪费在无趣的数字识别上，只需要简单点击即可完成验证，整个过程仅需&lt;/span&gt;0.4&lt;span&gt;秒。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1229605/201803/1229605-20180323150500289-784044727.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt; &lt;span&gt;极验行为验证&lt;/span&gt;3.0&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt; &lt;/p&gt;
&lt;p&gt;&lt;span&gt;看似简单的验证背后，运用的技术并不简单。行为验证码采用的是最前沿的人工智能技术，并结合生物行为特征，能够对人机进行精准区分。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;   二．短信验证码&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;&lt;span&gt;短信验证码是通过发送验证码到手机的一种验证码&lt;/span&gt;&lt;span&gt;形式，其原理是网站通过接口发送请求到接入商的服务器，服务器发送随机数字或字母到手机中，由接入商的服务器统一做验证码的验证。&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt; &lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1229605/201803/1229605-20180323150526632-2056818264.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt; &lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;短信验证码目前也算是用的比较广泛，其安全性与图片验证码相比是有明显提升。但是短信验证码却存在短信接口被调用的安全漏洞，一旦接口被调用，用户就可能会面临这短信轰炸的威胁。&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt; &lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1229605/201803/1229605-20180323150543714-1741293268.gif&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt; &lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;三．无感验证&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;纵观验证码的发展进程，不难发现，未来的验证码肯定是朝着安全与体验的平衡的方向发展。随着人工智能技术的发展，整个验证领域在兼顾安全与体验双要素的同时，将变得更加智能化、无感化，对正常用户的打扰将逐渐消失。&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt; &lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt; &lt;/p&gt;
&lt;p&gt;随着互联网技术的不断发展，我们每日都离不开与互联网的交互。验证码作为互联网交互中的重要环节，保卫着网站的安全以及我们的信息安全。用户体验差、毫无安全性可言的图片验证码即将退出历史舞台，未来将会是安全与体验双重保障的验证码的时代。&lt;/p&gt;

</description>
<pubDate>Fri, 23 Mar 2018 07:07:00 +0000</pubDate>
<dc:creator>随遇_而安</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/happy22/p/8630404.html</dc:identifier>
</item>
<item>
<title>S/4 HANA中的ACDOCT和FAGLFLEXT - 氢氦</title>
<link>http://www.cnblogs.com/hhelibeb/p/8629942.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/hhelibeb/p/8629942.html</guid>
<description>&lt;p&gt;最近的几个需求让我对ACDOCT和FAGLFLEXT这两个财务相关表（准确地说是视图）产生了一些了解，同时也发现某些开发同行和业务顾问并没有认识到这些东西。因此打算从技术角度来说明一下这两个视图在S4中的实际面貌。当然因为我并不了解FICO方面的任何业务知识，所以也只是进行技术角度的说明。&lt;/p&gt;
&lt;p&gt;本文内容基于 S/4 1709版本；某些内容可能和其他版本不是完全符合，特别是具体的DDL代码部分。&lt;/p&gt;
&lt;p&gt;本文链接：&lt;a id=&quot;Editor_Edit_hlEntryLink&quot; title=&quot;view: S/4 HANA中的ACDOCT和FAGLFLEXT&quot; href=&quot;http://www.cnblogs.com/hhelibeb/p/8629942.html&quot; target=&quot;_blank&quot;&gt;http://www.cnblogs.com/hhelibeb/p/8629942.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;财务报表开发中经常会出现有关期初余额和本期发生额的需求，传统上获取期初余额的方式是从FAGLFLEXT或ACDOCT中获取结转余额（HSLVT），再加上各期发生额（HSL01, HSL02....）。&lt;/p&gt;
&lt;p&gt;比如要获取公司1000的2018年3月的期初余额，ABAP代码的写法是：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;SELECT&lt;/span&gt; &lt;span&gt;SUM&lt;/span&gt;( ( hslvt + hsl01 + hsl02 ) ) &lt;span&gt;FROM&lt;/span&gt; faglflext &lt;span&gt;WHERE&lt;/span&gt; rbukrs = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;1000&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
                                                         &lt;span&gt;AND&lt;/span&gt; ryear  = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;2018&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
  &lt;span&gt;INTO&lt;/span&gt; @&lt;span&gt;DATA&lt;/span&gt;(l_balance).
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;这只是段简单的示例代码，实际需求中可能要按科目等条件取出各个期间分组汇总。&lt;/p&gt;

&lt;p&gt;那么，HSLVT和HSL01, HSL02....等数据是从哪里来的呢？如果把FAGLFLEXT和ACDOCT视为数据库表，那么开发者可能会认为，它们是通过某些结转操作，由系统汇总计算后得来并存储到数据库中的。但实际上，FAGLFLEXT和ACDOCT都只是视图，而非透明表。可以理解成，它们当中的数据不是数据库中既有的，而是和各种报表程序一样、是对其它表的数据进行处理后临时生成的结果。&lt;/p&gt;
&lt;p&gt;打开SE11可以看到：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/994049/201803/994049-20180323140512492-1769428406.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/994049/201803/994049-20180323140934553-840402402.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;可以看到，它们实际上是&lt;a href=&quot;http://www.cnblogs.com/hhelibeb/p/6647324.html&quot; target=&quot;_blank&quot;&gt;ABAP CDS视图&lt;/a&gt;。如果不了解ABAP CDS视图的话，可以暂时把它理解成使用SQL语言建立的数据模型，如果使用注解，还能为它赋予其它能力。&lt;/p&gt;
&lt;p&gt;推荐通过&lt;a href=&quot;https://tools.hana.ondemand.com/&quot; target=&quot;_blank&quot;&gt;Eclipse&lt;/a&gt;来查看CDS视图的定义，具体操作方式不提。&lt;/p&gt;
&lt;p&gt;CDS视图中的数据通常是从透明表中取得的，这里以FAGLFLEXT为例：&lt;/p&gt;
&lt;p&gt;观察视图的DDL源，寻找其中的FROM关键字：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;286&quot;&gt;
&lt;pre&gt;
&lt;span&gt;@AbapCatalog&lt;/span&gt;.sqlViewName: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;FAGLFLEXT&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;span&gt;@AccessControl&lt;/span&gt;&lt;span&gt;.authorizationCheck: #NOT_REQUIRED
&lt;/span&gt;&lt;span&gt;@ObjectModel&lt;/span&gt;&lt;span&gt;.usageType.serviceQuality: #X
&lt;/span&gt;&lt;span&gt;@ObjectModel&lt;/span&gt;&lt;span&gt;.usageType.sizeCategory: #XL
&lt;/span&gt;&lt;span&gt;@ObjectModel&lt;/span&gt;&lt;span&gt;.usageType.dataClass: #MIXED
&lt;/span&gt;&lt;span&gt;@EndUserText&lt;/span&gt;.label: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;FAGLFLEXT (Compatibility View) &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;span&gt;@AbapCatalog&lt;/span&gt;&lt;span&gt;.preserveKey: true

define &lt;/span&gt;&lt;span&gt;view&lt;/span&gt;&lt;span&gt; v_faglflext_view 
&lt;/span&gt;&lt;span&gt;as&lt;/span&gt;
    &lt;span&gt;select&lt;/span&gt; &lt;span&gt;key&lt;/span&gt; rclnt, &lt;span&gt;key&lt;/span&gt;&lt;span&gt; ryear,
    &lt;/span&gt;&lt;span&gt;key&lt;/span&gt; objnr00, &lt;span&gt;key&lt;/span&gt; objnr01, &lt;span&gt;key&lt;/span&gt; objnr02, &lt;span&gt;key&lt;/span&gt; objnr03, &lt;span&gt;key&lt;/span&gt; objnr04, &lt;span&gt;key&lt;/span&gt; objnr05, &lt;span&gt;key&lt;/span&gt; objnr06, &lt;span&gt;key&lt;/span&gt; objnr07, &lt;span&gt;key&lt;/span&gt;&lt;span&gt; objnr08,
    &lt;/span&gt;&lt;span&gt;key&lt;/span&gt; drcrk, &lt;span&gt;key&lt;/span&gt;&lt;span&gt; rpmax,
    activ, rmvct, rtcur, runit, awtyp,
    rldnr, rrcty, rvers, logsys, racct, cost_elem, rbukrs,
    rcntr, prctr, rfarea, rbusa, kokrs, segment, zzpaytype, zzinvunit, zzempnum, ps_posid, aufnr, kunnr, lifnr,  
&lt;/span&gt;&lt;span&gt;//&amp;lt;&lt;/span&gt;$VF&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;//&amp;lt;&lt;/span&gt;$FIELDS&lt;span&gt;&amp;gt;&lt;/span&gt;  
&lt;span&gt;//&amp;lt;&lt;/span&gt;$VF&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
    scntr, pprctr, sfarea, sbusa, rassc, psegment,
    tslvt, tsl01, tsl02, tsl03, tsl04, tsl05, tsl06, tsl07, tsl08, tsl09, tsl10, tsl11, tsl12, tsl13, tsl14, tsl15, tsl16,
    hslvt, hsl01, hsl02, hsl03, hsl04, hsl05, hsl06, hsl07, hsl08, hsl09, hsl10, hsl11, hsl12, hsl13, hsl14, hsl15, hsl16,
    kslvt, ksl01, ksl02, ksl03, ksl04, ksl05, ksl06, ksl07, ksl08, ksl09, ksl10, ksl11, ksl12, ksl13, ksl14, ksl15, ksl16,
    oslvt, osl01, osl02, osl03, osl04, osl05, osl06, osl07, osl08, osl09, osl10, osl11, osl12, osl13, osl14, osl15, osl16,
    mslvt, msl01, msl02, msl03, msl04, msl05, msl06, msl07, msl08, msl09, msl10, msl11, msl12, msl13, msl14, msl15, msl16,
    &lt;/span&gt;&lt;span&gt;timestamp&lt;/span&gt;
    &lt;span&gt;from&lt;/span&gt; faglflext_bck &lt;span&gt;where&lt;/span&gt; rrcty &lt;span&gt;=&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;span&gt;union&lt;/span&gt; &lt;span&gt;all&lt;/span&gt;
    &lt;span&gt;select&lt;/span&gt;
    &lt;span&gt;key&lt;/span&gt;&lt;span&gt; rclnt,
    &lt;/span&gt;&lt;span&gt;key&lt;/span&gt; &lt;span&gt;cast&lt;/span&gt;(ryear &lt;span&gt;as&lt;/span&gt; gjahr) &lt;span&gt;as&lt;/span&gt;&lt;span&gt; ryear,
    &lt;/span&gt;&lt;span&gt;key&lt;/span&gt; &lt;span&gt;cast&lt;/span&gt;(objnr00 &lt;span&gt;as&lt;/span&gt; g_objnr) &lt;span&gt;as&lt;/span&gt;&lt;span&gt; objnr00,
    &lt;/span&gt;&lt;span&gt;key&lt;/span&gt; &lt;span&gt;cast&lt;/span&gt;(objnr01 &lt;span&gt;as&lt;/span&gt; g_objnr) &lt;span&gt;as&lt;/span&gt;&lt;span&gt; objnr01,
    &lt;/span&gt;&lt;span&gt;key&lt;/span&gt; &lt;span&gt;cast&lt;/span&gt;(objnr02 &lt;span&gt;as&lt;/span&gt; g_objnr) &lt;span&gt;as&lt;/span&gt;&lt;span&gt; objnr02,
    &lt;/span&gt;&lt;span&gt;key&lt;/span&gt; &lt;span&gt;cast&lt;/span&gt;(objnr03 &lt;span&gt;as&lt;/span&gt; g_objnr) &lt;span&gt;as&lt;/span&gt;&lt;span&gt; objnr03,
    &lt;/span&gt;&lt;span&gt;key&lt;/span&gt; &lt;span&gt;cast&lt;/span&gt;(objnr04 &lt;span&gt;as&lt;/span&gt; g_objnr) &lt;span&gt;as&lt;/span&gt;&lt;span&gt; objnr04,
    &lt;/span&gt;&lt;span&gt;key&lt;/span&gt; &lt;span&gt;cast&lt;/span&gt;(objnr05 &lt;span&gt;as&lt;/span&gt; g_objnr) &lt;span&gt;as&lt;/span&gt;&lt;span&gt; objnr05,
    &lt;/span&gt;&lt;span&gt;key&lt;/span&gt; &lt;span&gt;cast&lt;/span&gt;(objnr06 &lt;span&gt;as&lt;/span&gt; g_objnr) &lt;span&gt;as&lt;/span&gt;&lt;span&gt; objnr06,
    &lt;/span&gt;&lt;span&gt;key&lt;/span&gt; &lt;span&gt;cast&lt;/span&gt;(objnr07 &lt;span&gt;as&lt;/span&gt; g_objnr) &lt;span&gt;as&lt;/span&gt;&lt;span&gt; objnr07,
    &lt;/span&gt;&lt;span&gt;key&lt;/span&gt; &lt;span&gt;cast&lt;/span&gt;(objnr08 &lt;span&gt;as&lt;/span&gt; g_objnr) &lt;span&gt;as&lt;/span&gt;&lt;span&gt; objnr08,
    &lt;/span&gt;&lt;span&gt;key&lt;/span&gt; &lt;span&gt;cast&lt;/span&gt;(drcrk &lt;span&gt;as&lt;/span&gt; shkzg) &lt;span&gt;as&lt;/span&gt;&lt;span&gt; drcrk,
    &lt;/span&gt;&lt;span&gt;key&lt;/span&gt; &lt;span&gt;cast&lt;/span&gt;(rpmax &lt;span&gt;as&lt;/span&gt; rpmax) &lt;span&gt;as&lt;/span&gt;&lt;span&gt; rpmax,
    &lt;/span&gt;&lt;span&gt;cast&lt;/span&gt;(activ &lt;span&gt;as&lt;/span&gt; acti1) &lt;span&gt;as&lt;/span&gt;&lt;span&gt; activ,
    &lt;/span&gt;&lt;span&gt;cast&lt;/span&gt;(rmvct &lt;span&gt;as&lt;/span&gt; rmvct) &lt;span&gt;as&lt;/span&gt;&lt;span&gt; rmvct,
    &lt;/span&gt;&lt;span&gt;cast&lt;/span&gt;(rtcur &lt;span&gt;as&lt;/span&gt; rtcur) &lt;span&gt;as&lt;/span&gt;&lt;span&gt; rtcur,
    runit,
    &lt;/span&gt;&lt;span&gt;cast&lt;/span&gt;(awtyp &lt;span&gt;as&lt;/span&gt; awtyp) &lt;span&gt;as&lt;/span&gt;&lt;span&gt; awtyp,
    &lt;/span&gt;&lt;span&gt;cast&lt;/span&gt;(rldnr &lt;span&gt;as&lt;/span&gt; fagl_rldnr) &lt;span&gt;as&lt;/span&gt;&lt;span&gt; rldnr,
    &lt;/span&gt;&lt;span&gt;cast&lt;/span&gt;(rrcty &lt;span&gt;as&lt;/span&gt; rrcty) &lt;span&gt;as&lt;/span&gt;&lt;span&gt; rrcty,
    &lt;/span&gt;&lt;span&gt;cast&lt;/span&gt;(rvers &lt;span&gt;as&lt;/span&gt; rvers) &lt;span&gt;as&lt;/span&gt;&lt;span&gt; rvers,
    &lt;/span&gt;&lt;span&gt;cast&lt;/span&gt;(logsys &lt;span&gt;as&lt;/span&gt; logsys) &lt;span&gt;as&lt;/span&gt;&lt;span&gt; logsys,
    &lt;/span&gt;&lt;span&gt;cast&lt;/span&gt;(racct &lt;span&gt;as&lt;/span&gt; racct) &lt;span&gt;as&lt;/span&gt;&lt;span&gt; racct,
    &lt;/span&gt;&lt;span&gt;cast&lt;/span&gt;(cost_elem &lt;span&gt;as&lt;/span&gt; kstar) &lt;span&gt;as&lt;/span&gt;&lt;span&gt; cost_elem,
    &lt;/span&gt;&lt;span&gt;cast&lt;/span&gt;(rbukrs &lt;span&gt;as&lt;/span&gt; bukrs) &lt;span&gt;as&lt;/span&gt;&lt;span&gt; rbukrs,
    &lt;/span&gt;&lt;span&gt;cast&lt;/span&gt;(rcntr &lt;span&gt;as&lt;/span&gt; kostl) &lt;span&gt;as&lt;/span&gt;&lt;span&gt; rcntr,
    &lt;/span&gt;&lt;span&gt;cast&lt;/span&gt;(prctr &lt;span&gt;as&lt;/span&gt; prctr) &lt;span&gt;as&lt;/span&gt;&lt;span&gt; prctr,
    &lt;/span&gt;&lt;span&gt;cast&lt;/span&gt;(rfarea &lt;span&gt;as&lt;/span&gt; fkber) &lt;span&gt;as&lt;/span&gt;&lt;span&gt; rfarea,
    &lt;/span&gt;&lt;span&gt;cast&lt;/span&gt;(rbusa &lt;span&gt;as&lt;/span&gt; gsber) &lt;span&gt;as&lt;/span&gt;&lt;span&gt; rbusa,
    &lt;/span&gt;&lt;span&gt;cast&lt;/span&gt;(kokrs &lt;span&gt;as&lt;/span&gt; kokrs) &lt;span&gt;as&lt;/span&gt;&lt;span&gt; kokrs,
    &lt;/span&gt;&lt;span&gt;cast&lt;/span&gt;(segment &lt;span&gt;as&lt;/span&gt; fb_segment) &lt;span&gt;as&lt;/span&gt;&lt;span&gt; segment,&lt;/span&gt;&lt;span&gt;//&amp;lt;&lt;/span&gt;$VF&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;//&amp;lt;&lt;/span&gt;$FIELDS&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;//&amp;lt;&lt;/span&gt;$VF&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;cast&lt;/span&gt;(scntr &lt;span&gt;as&lt;/span&gt; skost) &lt;span&gt;as&lt;/span&gt;&lt;span&gt; scntr,
    &lt;/span&gt;&lt;span&gt;cast&lt;/span&gt;(pprctr &lt;span&gt;as&lt;/span&gt; pprctr) &lt;span&gt;as&lt;/span&gt;&lt;span&gt; pprctr,
    &lt;/span&gt;&lt;span&gt;cast&lt;/span&gt;(sfarea &lt;span&gt;as&lt;/span&gt; sfkber) &lt;span&gt;as&lt;/span&gt;&lt;span&gt; sfarea,
    &lt;/span&gt;&lt;span&gt;cast&lt;/span&gt;(sbusa &lt;span&gt;as&lt;/span&gt; pargb) &lt;span&gt;as&lt;/span&gt;&lt;span&gt; sbusa,
    &lt;/span&gt;&lt;span&gt;cast&lt;/span&gt;(rassc &lt;span&gt;as&lt;/span&gt; rassc) &lt;span&gt;as&lt;/span&gt;&lt;span&gt; rassc,
    &lt;/span&gt;&lt;span&gt;cast&lt;/span&gt;(psegment &lt;span&gt;as&lt;/span&gt; fb_psegment) &lt;span&gt;as&lt;/span&gt;&lt;span&gt; psegment,
    &lt;/span&gt;&lt;span&gt;cast&lt;/span&gt;(tslvt &lt;span&gt;as&lt;/span&gt; tslvt12) &lt;span&gt;as&lt;/span&gt;&lt;span&gt; tslvt,
    &lt;/span&gt;&lt;span&gt;cast&lt;/span&gt;(tsl01 &lt;span&gt;as&lt;/span&gt; tslxx12) &lt;span&gt;as&lt;/span&gt;&lt;span&gt; tsl01,
    &lt;/span&gt;&lt;span&gt;cast&lt;/span&gt;(tsl02 &lt;span&gt;as&lt;/span&gt; tslxx12) &lt;span&gt;as&lt;/span&gt;&lt;span&gt; tsl02,
    &lt;/span&gt;&lt;span&gt;cast&lt;/span&gt;(tsl03 &lt;span&gt;as&lt;/span&gt; tslxx12) &lt;span&gt;as&lt;/span&gt;&lt;span&gt; tsl03,
    &lt;/span&gt;&lt;span&gt;cast&lt;/span&gt;(tsl04 &lt;span&gt;as&lt;/span&gt; tslxx12) &lt;span&gt;as&lt;/span&gt;&lt;span&gt; tsl04,
    &lt;/span&gt;&lt;span&gt;cast&lt;/span&gt;(tsl05 &lt;span&gt;as&lt;/span&gt; tslxx12) &lt;span&gt;as&lt;/span&gt;&lt;span&gt; tsl05,
    &lt;/span&gt;&lt;span&gt;cast&lt;/span&gt;(tsl06 &lt;span&gt;as&lt;/span&gt; tslxx12) &lt;span&gt;as&lt;/span&gt;&lt;span&gt; tsl06,
    &lt;/span&gt;&lt;span&gt;cast&lt;/span&gt;(tsl07 &lt;span&gt;as&lt;/span&gt; tslxx12) &lt;span&gt;as&lt;/span&gt;&lt;span&gt; tsl07,
    &lt;/span&gt;&lt;span&gt;cast&lt;/span&gt;(tsl08 &lt;span&gt;as&lt;/span&gt; tslxx12) &lt;span&gt;as&lt;/span&gt;&lt;span&gt; tsl08,
    &lt;/span&gt;&lt;span&gt;cast&lt;/span&gt;(tsl09 &lt;span&gt;as&lt;/span&gt; tslxx12) &lt;span&gt;as&lt;/span&gt;&lt;span&gt; tsl09,
    &lt;/span&gt;&lt;span&gt;cast&lt;/span&gt;(tsl10 &lt;span&gt;as&lt;/span&gt; tslxx12) &lt;span&gt;as&lt;/span&gt;&lt;span&gt; tsl10,
    &lt;/span&gt;&lt;span&gt;cast&lt;/span&gt;(tsl11 &lt;span&gt;as&lt;/span&gt; tslxx12) &lt;span&gt;as&lt;/span&gt;&lt;span&gt; tsl11,
    &lt;/span&gt;&lt;span&gt;cast&lt;/span&gt;(tsl12 &lt;span&gt;as&lt;/span&gt; tslxx12) &lt;span&gt;as&lt;/span&gt;&lt;span&gt; tsl12,
    &lt;/span&gt;&lt;span&gt;cast&lt;/span&gt;(tsl13 &lt;span&gt;as&lt;/span&gt; tslxx12) &lt;span&gt;as&lt;/span&gt;&lt;span&gt; tsl13,
    &lt;/span&gt;&lt;span&gt;cast&lt;/span&gt;(tsl14 &lt;span&gt;as&lt;/span&gt; tslxx12) &lt;span&gt;as&lt;/span&gt;&lt;span&gt; tsl14,
    &lt;/span&gt;&lt;span&gt;cast&lt;/span&gt;(tsl15 &lt;span&gt;as&lt;/span&gt; tslxx12) &lt;span&gt;as&lt;/span&gt;&lt;span&gt; tsl15,
    &lt;/span&gt;&lt;span&gt;cast&lt;/span&gt;(tsl16 &lt;span&gt;as&lt;/span&gt; tslxx12) &lt;span&gt;as&lt;/span&gt;&lt;span&gt; tsl16,
    &lt;/span&gt;&lt;span&gt;cast&lt;/span&gt;(hslvt &lt;span&gt;as&lt;/span&gt; hslvt12) &lt;span&gt;as&lt;/span&gt;&lt;span&gt; hslvt,
    &lt;/span&gt;&lt;span&gt;cast&lt;/span&gt;(hsl01 &lt;span&gt;as&lt;/span&gt; hslxx12) &lt;span&gt;as&lt;/span&gt;&lt;span&gt; hsl01,
    &lt;/span&gt;&lt;span&gt;cast&lt;/span&gt;(hsl02 &lt;span&gt;as&lt;/span&gt; hslxx12) &lt;span&gt;as&lt;/span&gt;&lt;span&gt; hsl02,
    &lt;/span&gt;&lt;span&gt;cast&lt;/span&gt;(hsl03 &lt;span&gt;as&lt;/span&gt; hslxx12) &lt;span&gt;as&lt;/span&gt;&lt;span&gt; hsl03,
    &lt;/span&gt;&lt;span&gt;cast&lt;/span&gt;(hsl04 &lt;span&gt;as&lt;/span&gt; hslxx12) &lt;span&gt;as&lt;/span&gt;&lt;span&gt; hsl04,
    &lt;/span&gt;&lt;span&gt;cast&lt;/span&gt;(hsl05 &lt;span&gt;as&lt;/span&gt; hslxx12) &lt;span&gt;as&lt;/span&gt;&lt;span&gt; hsl05,
    &lt;/span&gt;&lt;span&gt;cast&lt;/span&gt;(hsl06 &lt;span&gt;as&lt;/span&gt; hslxx12) &lt;span&gt;as&lt;/span&gt;&lt;span&gt; hsl06,
    &lt;/span&gt;&lt;span&gt;cast&lt;/span&gt;(hsl07 &lt;span&gt;as&lt;/span&gt; hslxx12) &lt;span&gt;as&lt;/span&gt;&lt;span&gt; hsl07,
    &lt;/span&gt;&lt;span&gt;cast&lt;/span&gt;(hsl08 &lt;span&gt;as&lt;/span&gt; hslxx12) &lt;span&gt;as&lt;/span&gt;&lt;span&gt; hsl08,
    &lt;/span&gt;&lt;span&gt;cast&lt;/span&gt;(hsl09 &lt;span&gt;as&lt;/span&gt; hslxx12) &lt;span&gt;as&lt;/span&gt;&lt;span&gt; hsl09,
    &lt;/span&gt;&lt;span&gt;cast&lt;/span&gt;(hsl10 &lt;span&gt;as&lt;/span&gt; hslxx12) &lt;span&gt;as&lt;/span&gt;&lt;span&gt; hsl10,
    &lt;/span&gt;&lt;span&gt;cast&lt;/span&gt;(hsl11 &lt;span&gt;as&lt;/span&gt; hslxx12) &lt;span&gt;as&lt;/span&gt;&lt;span&gt; hsl11,
    &lt;/span&gt;&lt;span&gt;cast&lt;/span&gt;(hsl12 &lt;span&gt;as&lt;/span&gt; hslxx12) &lt;span&gt;as&lt;/span&gt;&lt;span&gt; hsl12,
    &lt;/span&gt;&lt;span&gt;cast&lt;/span&gt;(hsl13 &lt;span&gt;as&lt;/span&gt; hslxx12) &lt;span&gt;as&lt;/span&gt;&lt;span&gt; hsl13,
    &lt;/span&gt;&lt;span&gt;cast&lt;/span&gt;(hsl14 &lt;span&gt;as&lt;/span&gt; hslxx12) &lt;span&gt;as&lt;/span&gt;&lt;span&gt; hsl14,
    &lt;/span&gt;&lt;span&gt;cast&lt;/span&gt;(hsl15 &lt;span&gt;as&lt;/span&gt; hslxx12) &lt;span&gt;as&lt;/span&gt;&lt;span&gt; hsl15,
    &lt;/span&gt;&lt;span&gt;cast&lt;/span&gt;(hsl16 &lt;span&gt;as&lt;/span&gt; hslxx12) &lt;span&gt;as&lt;/span&gt;&lt;span&gt; hsl16,
    &lt;/span&gt;&lt;span&gt;cast&lt;/span&gt;(kslvt &lt;span&gt;as&lt;/span&gt; kslvt12) &lt;span&gt;as&lt;/span&gt;&lt;span&gt; kslvt,
    &lt;/span&gt;&lt;span&gt;cast&lt;/span&gt;(ksl01 &lt;span&gt;as&lt;/span&gt; kslxx12) &lt;span&gt;as&lt;/span&gt;&lt;span&gt; ksl01,
    &lt;/span&gt;&lt;span&gt;cast&lt;/span&gt;(ksl02 &lt;span&gt;as&lt;/span&gt; kslxx12) &lt;span&gt;as&lt;/span&gt;&lt;span&gt; ksl02,
    &lt;/span&gt;&lt;span&gt;cast&lt;/span&gt;(ksl03 &lt;span&gt;as&lt;/span&gt; kslxx12) &lt;span&gt;as&lt;/span&gt;&lt;span&gt; ksl03,
    &lt;/span&gt;&lt;span&gt;cast&lt;/span&gt;(ksl04 &lt;span&gt;as&lt;/span&gt; kslxx12) &lt;span&gt;as&lt;/span&gt;&lt;span&gt; ksl04,
    &lt;/span&gt;&lt;span&gt;cast&lt;/span&gt;(ksl05 &lt;span&gt;as&lt;/span&gt; kslxx12) &lt;span&gt;as&lt;/span&gt;&lt;span&gt; ksl05,
    &lt;/span&gt;&lt;span&gt;cast&lt;/span&gt;(ksl06 &lt;span&gt;as&lt;/span&gt; kslxx12) &lt;span&gt;as&lt;/span&gt;&lt;span&gt; ksl06,
    &lt;/span&gt;&lt;span&gt;cast&lt;/span&gt;(ksl07 &lt;span&gt;as&lt;/span&gt; kslxx12) &lt;span&gt;as&lt;/span&gt;&lt;span&gt; ksl07,
    &lt;/span&gt;&lt;span&gt;cast&lt;/span&gt;(ksl08 &lt;span&gt;as&lt;/span&gt; kslxx12) &lt;span&gt;as&lt;/span&gt;&lt;span&gt; ksl08,
    &lt;/span&gt;&lt;span&gt;cast&lt;/span&gt;(ksl09 &lt;span&gt;as&lt;/span&gt; kslxx12) &lt;span&gt;as&lt;/span&gt;&lt;span&gt; ksl09,
    &lt;/span&gt;&lt;span&gt;cast&lt;/span&gt;(ksl10 &lt;span&gt;as&lt;/span&gt; kslxx12) &lt;span&gt;as&lt;/span&gt;&lt;span&gt; ksl10,
    &lt;/span&gt;&lt;span&gt;cast&lt;/span&gt;(ksl11 &lt;span&gt;as&lt;/span&gt; kslxx12) &lt;span&gt;as&lt;/span&gt;&lt;span&gt; ksl11,
    &lt;/span&gt;&lt;span&gt;cast&lt;/span&gt;(ksl12 &lt;span&gt;as&lt;/span&gt; kslxx12) &lt;span&gt;as&lt;/span&gt;&lt;span&gt; ksl12,
    &lt;/span&gt;&lt;span&gt;cast&lt;/span&gt;(ksl13 &lt;span&gt;as&lt;/span&gt; kslxx12) &lt;span&gt;as&lt;/span&gt;&lt;span&gt; ksl13,
    &lt;/span&gt;&lt;span&gt;cast&lt;/span&gt;(ksl14 &lt;span&gt;as&lt;/span&gt; kslxx12) &lt;span&gt;as&lt;/span&gt;&lt;span&gt; ksl14,
    &lt;/span&gt;&lt;span&gt;cast&lt;/span&gt;(ksl15 &lt;span&gt;as&lt;/span&gt; kslxx12) &lt;span&gt;as&lt;/span&gt;&lt;span&gt; ksl15,
    &lt;/span&gt;&lt;span&gt;cast&lt;/span&gt;(ksl16 &lt;span&gt;as&lt;/span&gt; kslxx12) &lt;span&gt;as&lt;/span&gt;&lt;span&gt; ksl16,
    &lt;/span&gt;&lt;span&gt;cast&lt;/span&gt;(oslvt &lt;span&gt;as&lt;/span&gt; oslvt12) &lt;span&gt;as&lt;/span&gt;&lt;span&gt; oslvt,
    &lt;/span&gt;&lt;span&gt;cast&lt;/span&gt;(osl01 &lt;span&gt;as&lt;/span&gt; oslxx12) &lt;span&gt;as&lt;/span&gt;&lt;span&gt; osl01,
    &lt;/span&gt;&lt;span&gt;cast&lt;/span&gt;(osl02 &lt;span&gt;as&lt;/span&gt; oslxx12) &lt;span&gt;as&lt;/span&gt;&lt;span&gt; osl02,
    &lt;/span&gt;&lt;span&gt;cast&lt;/span&gt;(osl03 &lt;span&gt;as&lt;/span&gt; oslxx12) &lt;span&gt;as&lt;/span&gt;&lt;span&gt; osl03,
    &lt;/span&gt;&lt;span&gt;cast&lt;/span&gt;(osl04 &lt;span&gt;as&lt;/span&gt; oslxx12) &lt;span&gt;as&lt;/span&gt;&lt;span&gt; osl04,
    &lt;/span&gt;&lt;span&gt;cast&lt;/span&gt;(osl05 &lt;span&gt;as&lt;/span&gt; oslxx12) &lt;span&gt;as&lt;/span&gt;&lt;span&gt; osl05,
    &lt;/span&gt;&lt;span&gt;cast&lt;/span&gt;(osl06 &lt;span&gt;as&lt;/span&gt; oslxx12) &lt;span&gt;as&lt;/span&gt;&lt;span&gt; osl06,
    &lt;/span&gt;&lt;span&gt;cast&lt;/span&gt;(osl07 &lt;span&gt;as&lt;/span&gt; oslxx12) &lt;span&gt;as&lt;/span&gt;&lt;span&gt; osl07,
    &lt;/span&gt;&lt;span&gt;cast&lt;/span&gt;(osl08 &lt;span&gt;as&lt;/span&gt; oslxx12) &lt;span&gt;as&lt;/span&gt;&lt;span&gt; osl08,
    &lt;/span&gt;&lt;span&gt;cast&lt;/span&gt;(osl09 &lt;span&gt;as&lt;/span&gt; oslxx12) &lt;span&gt;as&lt;/span&gt;&lt;span&gt; osl09,
    &lt;/span&gt;&lt;span&gt;cast&lt;/span&gt;(osl10 &lt;span&gt;as&lt;/span&gt; oslxx12) &lt;span&gt;as&lt;/span&gt;&lt;span&gt; osl10,
    &lt;/span&gt;&lt;span&gt;cast&lt;/span&gt;(osl11 &lt;span&gt;as&lt;/span&gt; oslxx12) &lt;span&gt;as&lt;/span&gt;&lt;span&gt; osl11,
    &lt;/span&gt;&lt;span&gt;cast&lt;/span&gt;(osl12 &lt;span&gt;as&lt;/span&gt; oslxx12) &lt;span&gt;as&lt;/span&gt;&lt;span&gt; osl12,
    &lt;/span&gt;&lt;span&gt;cast&lt;/span&gt;(osl13 &lt;span&gt;as&lt;/span&gt; oslxx12) &lt;span&gt;as&lt;/span&gt;&lt;span&gt; osl13,
    &lt;/span&gt;&lt;span&gt;cast&lt;/span&gt;(osl14 &lt;span&gt;as&lt;/span&gt; oslxx12) &lt;span&gt;as&lt;/span&gt;&lt;span&gt; osl14,
    &lt;/span&gt;&lt;span&gt;cast&lt;/span&gt;(osl15 &lt;span&gt;as&lt;/span&gt; oslxx12) &lt;span&gt;as&lt;/span&gt;&lt;span&gt; osl15,
    &lt;/span&gt;&lt;span&gt;cast&lt;/span&gt;(osl16 &lt;span&gt;as&lt;/span&gt; oslxx12) &lt;span&gt;as&lt;/span&gt;&lt;span&gt; osl16,
    &lt;/span&gt;&lt;span&gt;cast&lt;/span&gt;(mslvt &lt;span&gt;as&lt;/span&gt; mslvt12) &lt;span&gt;as&lt;/span&gt;&lt;span&gt; mslvt,
    &lt;/span&gt;&lt;span&gt;cast&lt;/span&gt;(msl01 &lt;span&gt;as&lt;/span&gt; mslxx12) &lt;span&gt;as&lt;/span&gt;&lt;span&gt; msl01,
    &lt;/span&gt;&lt;span&gt;cast&lt;/span&gt;(msl02 &lt;span&gt;as&lt;/span&gt; mslxx12) &lt;span&gt;as&lt;/span&gt;&lt;span&gt; msl02,
    &lt;/span&gt;&lt;span&gt;cast&lt;/span&gt;(msl03 &lt;span&gt;as&lt;/span&gt; mslxx12) &lt;span&gt;as&lt;/span&gt;&lt;span&gt; msl03,
    &lt;/span&gt;&lt;span&gt;cast&lt;/span&gt;(msl04 &lt;span&gt;as&lt;/span&gt; mslxx12) &lt;span&gt;as&lt;/span&gt;&lt;span&gt; msl04,
    &lt;/span&gt;&lt;span&gt;cast&lt;/span&gt;(msl05 &lt;span&gt;as&lt;/span&gt; mslxx12) &lt;span&gt;as&lt;/span&gt;&lt;span&gt; msl05,
    &lt;/span&gt;&lt;span&gt;cast&lt;/span&gt;(msl06 &lt;span&gt;as&lt;/span&gt; mslxx12) &lt;span&gt;as&lt;/span&gt;&lt;span&gt; msl06,
    &lt;/span&gt;&lt;span&gt;cast&lt;/span&gt;(msl07 &lt;span&gt;as&lt;/span&gt; mslxx12) &lt;span&gt;as&lt;/span&gt;&lt;span&gt; msl07,
    &lt;/span&gt;&lt;span&gt;cast&lt;/span&gt;(msl08 &lt;span&gt;as&lt;/span&gt; mslxx12) &lt;span&gt;as&lt;/span&gt;&lt;span&gt; msl08,
    &lt;/span&gt;&lt;span&gt;cast&lt;/span&gt;(msl09 &lt;span&gt;as&lt;/span&gt; mslxx12) &lt;span&gt;as&lt;/span&gt;&lt;span&gt; msl09,
    &lt;/span&gt;&lt;span&gt;cast&lt;/span&gt;(msl10 &lt;span&gt;as&lt;/span&gt; mslxx12) &lt;span&gt;as&lt;/span&gt;&lt;span&gt; msl10,
    &lt;/span&gt;&lt;span&gt;cast&lt;/span&gt;(msl11 &lt;span&gt;as&lt;/span&gt; mslxx12) &lt;span&gt;as&lt;/span&gt;&lt;span&gt; msl11,
    &lt;/span&gt;&lt;span&gt;cast&lt;/span&gt;(msl12 &lt;span&gt;as&lt;/span&gt; mslxx12) &lt;span&gt;as&lt;/span&gt;&lt;span&gt; msl12,
    &lt;/span&gt;&lt;span&gt;cast&lt;/span&gt;(msl13 &lt;span&gt;as&lt;/span&gt; mslxx12) &lt;span&gt;as&lt;/span&gt;&lt;span&gt; msl13,
    &lt;/span&gt;&lt;span&gt;cast&lt;/span&gt;(msl14 &lt;span&gt;as&lt;/span&gt; mslxx12) &lt;span&gt;as&lt;/span&gt;&lt;span&gt; msl14,
    &lt;/span&gt;&lt;span&gt;cast&lt;/span&gt;(msl15 &lt;span&gt;as&lt;/span&gt; mslxx12) &lt;span&gt;as&lt;/span&gt;&lt;span&gt; msl15,
    &lt;/span&gt;&lt;span&gt;cast&lt;/span&gt;(msl16 &lt;span&gt;as&lt;/span&gt; mslxx12) &lt;span&gt;as&lt;/span&gt;&lt;span&gt; msl16,
    &lt;/span&gt;&lt;span&gt;cast&lt;/span&gt;(&lt;span&gt;timestamp&lt;/span&gt; &lt;span&gt;as&lt;/span&gt; &lt;span&gt;timestamp&lt;/span&gt;) &lt;span&gt;as&lt;/span&gt; &lt;span&gt;timestamp&lt;/span&gt;
    &lt;span&gt;from&lt;/span&gt; FGL_FAGLFLEXT
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;可以发现这个视图结合了2个源。其一是FAGLFLEXT_BCK，查询可知这是旧数据的备份表；另一个是FGL_FAGLFLEXT，&lt;/p&gt;
&lt;p&gt;打开FGL_FAGLFLEXT，发现它还是个CDS视图（因为完整定义过长，只截取了部分代码，下同）：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;66&quot;&gt;
&lt;pre&gt;
&lt;span&gt;@AbapCatalog&lt;/span&gt;.sqlViewName: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;FGLV_FAGLFLEXT&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;span&gt;@AccessControl&lt;/span&gt;&lt;span&gt;.authorizationCheck: #NOT_REQUIRED
&lt;/span&gt;&lt;span&gt;@ObjectModel&lt;/span&gt;&lt;span&gt;.usageType.serviceQuality: #X
&lt;/span&gt;&lt;span&gt;@ObjectModel&lt;/span&gt;&lt;span&gt;.usageType.sizeCategory: #XL
&lt;/span&gt;&lt;span&gt;@ObjectModel&lt;/span&gt;&lt;span&gt;.usageType.dataClass: #MIXED
&lt;/span&gt;&lt;span&gt;@EndUserText&lt;/span&gt;.label: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Compatibility view for FAGLFLEXT&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
define &lt;/span&gt;&lt;span&gt;view&lt;/span&gt; FGL_FAGLFLEXT &lt;span&gt;as&lt;/span&gt; &lt;span&gt;select&lt;/span&gt; &lt;span&gt;from&lt;/span&gt;&lt;span&gt; FGL_GLTT2
{
&lt;/span&gt;&lt;span&gt;key&lt;/span&gt;&lt;span&gt; rclnt,
&lt;/span&gt;&lt;span&gt;key&lt;/span&gt;&lt;span&gt; ryear,
&lt;/span&gt;&lt;span&gt;key&lt;/span&gt; &lt;span&gt;cast&lt;/span&gt;(objnr00 &lt;span&gt;as&lt;/span&gt; abap.int4(&lt;span&gt;10&lt;/span&gt;)) &lt;span&gt;as&lt;/span&gt;&lt;span&gt; objnr00,
&lt;/span&gt;&lt;span&gt;key&lt;/span&gt; &lt;span&gt;cast&lt;/span&gt;(objnr01 &lt;span&gt;as&lt;/span&gt; abap.int4(&lt;span&gt;10&lt;/span&gt;)) &lt;span&gt;as&lt;/span&gt;&lt;span&gt; objnr01,
&lt;/span&gt;&lt;span&gt;key&lt;/span&gt; &lt;span&gt;cast&lt;/span&gt;(objnr02 &lt;span&gt;as&lt;/span&gt; abap.int4(&lt;span&gt;10&lt;/span&gt;)) &lt;span&gt;as&lt;/span&gt;&lt;span&gt; objnr02,
&lt;/span&gt;&lt;span&gt;key&lt;/span&gt; &lt;span&gt;cast&lt;/span&gt;(objnr03 &lt;span&gt;as&lt;/span&gt; abap.int4(&lt;span&gt;10&lt;/span&gt;)) &lt;span&gt;as&lt;/span&gt;&lt;span&gt; objnr03,
&lt;/span&gt;&lt;span&gt;key&lt;/span&gt; &lt;span&gt;cast&lt;/span&gt;(objnr04 &lt;span&gt;as&lt;/span&gt; abap.int4(&lt;span&gt;10&lt;/span&gt;)) &lt;span&gt;as&lt;/span&gt;&lt;span&gt; objnr04,
&lt;/span&gt;&lt;span&gt;key&lt;/span&gt; &lt;span&gt;cast&lt;/span&gt;(objnr05 &lt;span&gt;as&lt;/span&gt; abap.int4(&lt;span&gt;10&lt;/span&gt;)) &lt;span&gt;as&lt;/span&gt;&lt;span&gt; objnr05,
&lt;/span&gt;&lt;span&gt;key&lt;/span&gt; &lt;span&gt;cast&lt;/span&gt;(objnr06 &lt;span&gt;as&lt;/span&gt; abap.int4(&lt;span&gt;10&lt;/span&gt;)) &lt;span&gt;as&lt;/span&gt;&lt;span&gt; objnr06,
&lt;/span&gt;&lt;span&gt;key&lt;/span&gt; &lt;span&gt;cast&lt;/span&gt;(objnr07 &lt;span&gt;as&lt;/span&gt; abap.int4(&lt;span&gt;10&lt;/span&gt;)) &lt;span&gt;as&lt;/span&gt;&lt;span&gt; objnr07,
&lt;/span&gt;&lt;span&gt;key&lt;/span&gt; &lt;span&gt;cast&lt;/span&gt;(objnr08 &lt;span&gt;as&lt;/span&gt; abap.int4(&lt;span&gt;10&lt;/span&gt;)) &lt;span&gt;as&lt;/span&gt;&lt;span&gt; objnr08,
&lt;/span&gt;&lt;span&gt;key&lt;/span&gt;&lt;span&gt; drcrk,
&lt;/span&gt;&lt;span&gt;key&lt;/span&gt;&lt;span&gt; rpmax,
activ,
………………
………………
&lt;/span&gt;&lt;span&gt;@Semantics&lt;/span&gt;.amount.currencyCode: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;T882G.CURR1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; &lt;span&gt;sum&lt;/span&gt;(hslvt) &lt;span&gt;as&lt;/span&gt;&lt;span&gt; hslvt,
&lt;/span&gt;&lt;span&gt;@Semantics&lt;/span&gt;.amount.currencyCode: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;T882G.CURR1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; &lt;span&gt;sum&lt;/span&gt;(hsl01) &lt;span&gt;as&lt;/span&gt;&lt;span&gt; hsl01,
&lt;/span&gt;&lt;span&gt;@Semantics&lt;/span&gt;.amount.currencyCode: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;T882G.CURR1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; &lt;span&gt;sum&lt;/span&gt;(hsl02) &lt;span&gt;as&lt;/span&gt;&lt;span&gt; hsl02,
&lt;/span&gt;&lt;span&gt;@Semantics&lt;/span&gt;.amount.currencyCode: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;T882G.CURR1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; &lt;span&gt;sum&lt;/span&gt;(hsl03) &lt;span&gt;as&lt;/span&gt;&lt;span&gt; hsl03,
&lt;/span&gt;&lt;span&gt;@Semantics&lt;/span&gt;.amount.currencyCode: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;T882G.CURR1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; &lt;span&gt;sum&lt;/span&gt;(hsl04) &lt;span&gt;as&lt;/span&gt;&lt;span&gt; hsl04,
&lt;/span&gt;&lt;span&gt;@Semantics&lt;/span&gt;.amount.currencyCode: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;T882G.CURR1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; &lt;span&gt;sum&lt;/span&gt;(hsl05) &lt;span&gt;as&lt;/span&gt;&lt;span&gt; hsl05,
&lt;/span&gt;&lt;span&gt;@Semantics&lt;/span&gt;.amount.currencyCode: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;T882G.CURR1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; &lt;span&gt;sum&lt;/span&gt;(hsl06) &lt;span&gt;as&lt;/span&gt;&lt;span&gt; hsl06,
&lt;/span&gt;&lt;span&gt;@Semantics&lt;/span&gt;.amount.currencyCode: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;T882G.CURR1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; &lt;span&gt;sum&lt;/span&gt;(hsl07) &lt;span&gt;as&lt;/span&gt;&lt;span&gt; hsl07,
&lt;/span&gt;&lt;span&gt;@Semantics&lt;/span&gt;.amount.currencyCode: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;T882G.CURR1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; &lt;span&gt;sum&lt;/span&gt;(hsl08) &lt;span&gt;as&lt;/span&gt;&lt;span&gt; hsl08,
&lt;/span&gt;&lt;span&gt;@Semantics&lt;/span&gt;.amount.currencyCode: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;T882G.CURR1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; &lt;span&gt;sum&lt;/span&gt;(hsl09) &lt;span&gt;as&lt;/span&gt;&lt;span&gt; hsl09,
&lt;/span&gt;&lt;span&gt;@Semantics&lt;/span&gt;.amount.currencyCode: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;T882G.CURR1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; &lt;span&gt;sum&lt;/span&gt;(hsl10) &lt;span&gt;as&lt;/span&gt;&lt;span&gt; hsl10,
&lt;/span&gt;&lt;span&gt;@Semantics&lt;/span&gt;.amount.currencyCode: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;T882G.CURR1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; &lt;span&gt;sum&lt;/span&gt;(hsl11) &lt;span&gt;as&lt;/span&gt;&lt;span&gt; hsl11,
&lt;/span&gt;&lt;span&gt;@Semantics&lt;/span&gt;.amount.currencyCode: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;T882G.CURR1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; &lt;span&gt;sum&lt;/span&gt;(hsl12) &lt;span&gt;as&lt;/span&gt;&lt;span&gt; hsl12,
&lt;/span&gt;&lt;span&gt;@Semantics&lt;/span&gt;.amount.currencyCode: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;T882G.CURR1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; &lt;span&gt;sum&lt;/span&gt;(hsl13) &lt;span&gt;as&lt;/span&gt;&lt;span&gt; hsl13,
&lt;/span&gt;&lt;span&gt;@Semantics&lt;/span&gt;.amount.currencyCode: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;T882G.CURR1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; &lt;span&gt;sum&lt;/span&gt;(hsl14) &lt;span&gt;as&lt;/span&gt;&lt;span&gt; hsl14,
&lt;/span&gt;&lt;span&gt;@Semantics&lt;/span&gt;.amount.currencyCode: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;T882G.CURR1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; &lt;span&gt;sum&lt;/span&gt;(hsl15) &lt;span&gt;as&lt;/span&gt;&lt;span&gt; hsl15,
&lt;/span&gt;&lt;span&gt;@Semantics&lt;/span&gt;.amount.currencyCode: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;T882G.CURR1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; &lt;span&gt;sum&lt;/span&gt;(hsl16) &lt;span&gt;as&lt;/span&gt;&lt;span&gt; hsl16,
………………
………………
&lt;/span&gt;&lt;span&gt;max&lt;/span&gt;(&lt;span&gt;timestamp&lt;/span&gt;) &lt;span&gt;as&lt;/span&gt; &lt;span&gt;timestamp&lt;/span&gt;&lt;span&gt;
}
&lt;/span&gt;&lt;span&gt;group&lt;/span&gt; &lt;span&gt;by&lt;/span&gt;&lt;span&gt;
………………
………………&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;可以看到，FGL_FAGLFLEXT中的HSLVT和HSL01, HSL02字段，是对FGL_GLTT2中相应字段的汇总得来的。对应语句：&lt;span&gt;sum(hslvt) &lt;span&gt;as &lt;span&gt;hslvt&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;打开FGL_GLTT2，会发现该视图中的金额汇总自FGL_GLTT1，所以这里就不贴FGL_GLTT2的定义了，直接看FGL_GLTT1：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;120&quot;&gt;
&lt;pre&gt;
&lt;span&gt;@AbapCatalog&lt;/span&gt;.sqlViewName: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;FGLV_GLTT1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;span&gt;@AccessControl&lt;/span&gt;&lt;span&gt;.authorizationCheck: #NOT_REQUIRED
&lt;/span&gt;&lt;span&gt;@ObjectModel&lt;/span&gt;&lt;span&gt;.usageType.serviceQuality: #X
&lt;/span&gt;&lt;span&gt;@ObjectModel&lt;/span&gt;&lt;span&gt;.usageType.sizeCategory: #XL
&lt;/span&gt;&lt;span&gt;@ObjectModel&lt;/span&gt;&lt;span&gt;.usageType.dataClass: #MIXED
&lt;/span&gt;&lt;span&gt;@EndUserText&lt;/span&gt;.label: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;G/L totals: create the period block&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
define &lt;/span&gt;&lt;span&gt;view&lt;/span&gt; FGL_GLTT1 &lt;span&gt;as&lt;/span&gt; &lt;span&gt;select&lt;/span&gt; &lt;span&gt;from&lt;/span&gt;&lt;span&gt; FGL_GLTT0
{
rclnt,
ryear,
&lt;/span&gt;&lt;span&gt;0&lt;/span&gt; &lt;span&gt;as&lt;/span&gt;&lt;span&gt; objnr00,
&lt;/span&gt;&lt;span&gt;0&lt;/span&gt; &lt;span&gt;as&lt;/span&gt;&lt;span&gt; objnr01,
&lt;/span&gt;&lt;span&gt;0&lt;/span&gt; &lt;span&gt;as&lt;/span&gt;&lt;span&gt; objnr02,
&lt;/span&gt;&lt;span&gt;0&lt;/span&gt; &lt;span&gt;as&lt;/span&gt;&lt;span&gt; objnr03,
&lt;/span&gt;&lt;span&gt;0&lt;/span&gt; &lt;span&gt;as&lt;/span&gt;&lt;span&gt; objnr04,
&lt;/span&gt;&lt;span&gt;0&lt;/span&gt; &lt;span&gt;as&lt;/span&gt;&lt;span&gt; objnr05,
&lt;/span&gt;&lt;span&gt;0&lt;/span&gt; &lt;span&gt;as&lt;/span&gt;&lt;span&gt; objnr06,
&lt;/span&gt;&lt;span&gt;0&lt;/span&gt; &lt;span&gt;as&lt;/span&gt;&lt;span&gt; objnr07,
&lt;/span&gt;&lt;span&gt;0&lt;/span&gt; &lt;span&gt;as&lt;/span&gt;&lt;span&gt; objnr08,
drcrk,

&lt;/span&gt;&lt;span&gt;case&lt;/span&gt;&lt;span&gt; poper
  &lt;/span&gt;&lt;span&gt;when&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;000&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; &lt;span&gt;then&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;016&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
  &lt;span&gt;else&lt;/span&gt; &lt;span&gt;cast&lt;/span&gt;( lpad( &lt;span&gt;cast&lt;/span&gt; ( &lt;span&gt;16&lt;/span&gt; &lt;span&gt;*&lt;/span&gt; (&lt;span&gt;1&lt;/span&gt; &lt;span&gt;+&lt;/span&gt; div( &lt;span&gt;cast&lt;/span&gt;(poper &lt;span&gt;as&lt;/span&gt; abap.int4) &lt;span&gt;-&lt;/span&gt; &lt;span&gt;1&lt;/span&gt;, &lt;span&gt;16&lt;/span&gt;) ) &lt;span&gt;as&lt;/span&gt; abap.&lt;span&gt;char&lt;/span&gt;(&lt;span&gt;12&lt;/span&gt;) ), &lt;span&gt;3&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;) &lt;span&gt;as&lt;/span&gt; abap.numc(&lt;span&gt;3&lt;/span&gt;&lt;span&gt;))
&lt;/span&gt;&lt;span&gt;end&lt;/span&gt; &lt;span&gt;as&lt;/span&gt;&lt;span&gt; rpmax,
    activ, rmvct, rtcur,
    runit, awtyp, rldnr, rrcty, rvers, logsys, racct, cost_elem, rbukrs,
    rcntr, prctr, rfarea, rbusa, kokrs, segment,
    scntr, pprctr, sfarea, sbusa, rassc, psegment,  
&lt;/span&gt;&lt;span&gt;//&amp;lt;&lt;/span&gt;$VF&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
    fikrs, rfund, rgrant_nbr, rbudget_pd, sfund, sgrant_nbr, sbudget_pd,
    re_bukrs, re_account, vname, egrup, recid,
&lt;/span&gt;&lt;span&gt;//&amp;lt;&lt;/span&gt;$FIELDS&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;//&amp;lt;&lt;/span&gt;$VF&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
………………
………………
&lt;/span&gt;&lt;span&gt;case&lt;/span&gt; poper  &lt;span&gt;when&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;000&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; &lt;span&gt;then&lt;/span&gt; hsl &lt;span&gt;else&lt;/span&gt; &lt;span&gt;0&lt;/span&gt; &lt;span&gt;end&lt;/span&gt; &lt;span&gt;as&lt;/span&gt;&lt;span&gt; hslvt,
&lt;/span&gt;&lt;span&gt;case&lt;/span&gt; mod( &lt;span&gt;cast&lt;/span&gt;(poper &lt;span&gt;as&lt;/span&gt; abap.int4 ), &lt;span&gt;16&lt;/span&gt;) &lt;span&gt;when&lt;/span&gt;  &lt;span&gt;1&lt;/span&gt; &lt;span&gt;then&lt;/span&gt; hsl &lt;span&gt;else&lt;/span&gt; &lt;span&gt;0&lt;/span&gt; &lt;span&gt;end&lt;/span&gt; &lt;span&gt;as&lt;/span&gt;&lt;span&gt; hsl01,
&lt;/span&gt;&lt;span&gt;case&lt;/span&gt; mod( &lt;span&gt;cast&lt;/span&gt;(poper &lt;span&gt;as&lt;/span&gt; abap.int4 ), &lt;span&gt;16&lt;/span&gt;) &lt;span&gt;when&lt;/span&gt;  &lt;span&gt;2&lt;/span&gt; &lt;span&gt;then&lt;/span&gt; hsl &lt;span&gt;else&lt;/span&gt; &lt;span&gt;0&lt;/span&gt; &lt;span&gt;end&lt;/span&gt; &lt;span&gt;as&lt;/span&gt;&lt;span&gt; hsl02,
&lt;/span&gt;&lt;span&gt;case&lt;/span&gt; mod( &lt;span&gt;cast&lt;/span&gt;(poper &lt;span&gt;as&lt;/span&gt; abap.int4 ), &lt;span&gt;16&lt;/span&gt;) &lt;span&gt;when&lt;/span&gt;  &lt;span&gt;3&lt;/span&gt; &lt;span&gt;then&lt;/span&gt; hsl &lt;span&gt;else&lt;/span&gt; &lt;span&gt;0&lt;/span&gt; &lt;span&gt;end&lt;/span&gt; &lt;span&gt;as&lt;/span&gt;&lt;span&gt; hsl03,
&lt;/span&gt;&lt;span&gt;case&lt;/span&gt; mod( &lt;span&gt;cast&lt;/span&gt;(poper &lt;span&gt;as&lt;/span&gt; abap.int4 ), &lt;span&gt;16&lt;/span&gt;) &lt;span&gt;when&lt;/span&gt;  &lt;span&gt;4&lt;/span&gt; &lt;span&gt;then&lt;/span&gt; hsl &lt;span&gt;else&lt;/span&gt; &lt;span&gt;0&lt;/span&gt; &lt;span&gt;end&lt;/span&gt; &lt;span&gt;as&lt;/span&gt;&lt;span&gt; hsl04,
&lt;/span&gt;&lt;span&gt;case&lt;/span&gt; mod( &lt;span&gt;cast&lt;/span&gt;(poper &lt;span&gt;as&lt;/span&gt; abap.int4 ), &lt;span&gt;16&lt;/span&gt;) &lt;span&gt;when&lt;/span&gt;  &lt;span&gt;5&lt;/span&gt; &lt;span&gt;then&lt;/span&gt; hsl &lt;span&gt;else&lt;/span&gt; &lt;span&gt;0&lt;/span&gt; &lt;span&gt;end&lt;/span&gt; &lt;span&gt;as&lt;/span&gt;&lt;span&gt; hsl05,
&lt;/span&gt;&lt;span&gt;case&lt;/span&gt; mod( &lt;span&gt;cast&lt;/span&gt;(poper &lt;span&gt;as&lt;/span&gt; abap.int4 ), &lt;span&gt;16&lt;/span&gt;) &lt;span&gt;when&lt;/span&gt;  &lt;span&gt;6&lt;/span&gt; &lt;span&gt;then&lt;/span&gt; hsl &lt;span&gt;else&lt;/span&gt; &lt;span&gt;0&lt;/span&gt; &lt;span&gt;end&lt;/span&gt; &lt;span&gt;as&lt;/span&gt;&lt;span&gt; hsl06,
&lt;/span&gt;&lt;span&gt;case&lt;/span&gt; mod( &lt;span&gt;cast&lt;/span&gt;(poper &lt;span&gt;as&lt;/span&gt; abap.int4 ), &lt;span&gt;16&lt;/span&gt;) &lt;span&gt;when&lt;/span&gt;  &lt;span&gt;7&lt;/span&gt; &lt;span&gt;then&lt;/span&gt; hsl &lt;span&gt;else&lt;/span&gt; &lt;span&gt;0&lt;/span&gt; &lt;span&gt;end&lt;/span&gt; &lt;span&gt;as&lt;/span&gt;&lt;span&gt; hsl07,
&lt;/span&gt;&lt;span&gt;case&lt;/span&gt; mod( &lt;span&gt;cast&lt;/span&gt;(poper &lt;span&gt;as&lt;/span&gt; abap.int4 ), &lt;span&gt;16&lt;/span&gt;) &lt;span&gt;when&lt;/span&gt;  &lt;span&gt;8&lt;/span&gt; &lt;span&gt;then&lt;/span&gt; hsl &lt;span&gt;else&lt;/span&gt; &lt;span&gt;0&lt;/span&gt; &lt;span&gt;end&lt;/span&gt; &lt;span&gt;as&lt;/span&gt;&lt;span&gt; hsl08,
&lt;/span&gt;&lt;span&gt;case&lt;/span&gt; mod( &lt;span&gt;cast&lt;/span&gt;(poper &lt;span&gt;as&lt;/span&gt; abap.int4 ), &lt;span&gt;16&lt;/span&gt;) &lt;span&gt;when&lt;/span&gt;  &lt;span&gt;9&lt;/span&gt; &lt;span&gt;then&lt;/span&gt; hsl &lt;span&gt;else&lt;/span&gt; &lt;span&gt;0&lt;/span&gt; &lt;span&gt;end&lt;/span&gt; &lt;span&gt;as&lt;/span&gt;&lt;span&gt; hsl09,
&lt;/span&gt;&lt;span&gt;case&lt;/span&gt; mod( &lt;span&gt;cast&lt;/span&gt;(poper &lt;span&gt;as&lt;/span&gt; abap.int4 ), &lt;span&gt;16&lt;/span&gt;) &lt;span&gt;when&lt;/span&gt; &lt;span&gt;10&lt;/span&gt; &lt;span&gt;then&lt;/span&gt; hsl &lt;span&gt;else&lt;/span&gt; &lt;span&gt;0&lt;/span&gt; &lt;span&gt;end&lt;/span&gt; &lt;span&gt;as&lt;/span&gt;&lt;span&gt; hsl10,
&lt;/span&gt;&lt;span&gt;case&lt;/span&gt; mod( &lt;span&gt;cast&lt;/span&gt;(poper &lt;span&gt;as&lt;/span&gt; abap.int4 ), &lt;span&gt;16&lt;/span&gt;) &lt;span&gt;when&lt;/span&gt; &lt;span&gt;11&lt;/span&gt; &lt;span&gt;then&lt;/span&gt; hsl &lt;span&gt;else&lt;/span&gt; &lt;span&gt;0&lt;/span&gt; &lt;span&gt;end&lt;/span&gt; &lt;span&gt;as&lt;/span&gt;&lt;span&gt; hsl11,
&lt;/span&gt;&lt;span&gt;case&lt;/span&gt; mod( &lt;span&gt;cast&lt;/span&gt;(poper &lt;span&gt;as&lt;/span&gt; abap.int4 ), &lt;span&gt;16&lt;/span&gt;) &lt;span&gt;when&lt;/span&gt; &lt;span&gt;12&lt;/span&gt; &lt;span&gt;then&lt;/span&gt; hsl &lt;span&gt;else&lt;/span&gt; &lt;span&gt;0&lt;/span&gt; &lt;span&gt;end&lt;/span&gt; &lt;span&gt;as&lt;/span&gt;&lt;span&gt; hsl12,
&lt;/span&gt;&lt;span&gt;case&lt;/span&gt; mod( &lt;span&gt;cast&lt;/span&gt;(poper &lt;span&gt;as&lt;/span&gt; abap.int4 ), &lt;span&gt;16&lt;/span&gt;) &lt;span&gt;when&lt;/span&gt; &lt;span&gt;13&lt;/span&gt; &lt;span&gt;then&lt;/span&gt; hsl &lt;span&gt;else&lt;/span&gt; &lt;span&gt;0&lt;/span&gt; &lt;span&gt;end&lt;/span&gt; &lt;span&gt;as&lt;/span&gt;&lt;span&gt; hsl13,
&lt;/span&gt;&lt;span&gt;case&lt;/span&gt; mod( &lt;span&gt;cast&lt;/span&gt;(poper &lt;span&gt;as&lt;/span&gt; abap.int4 ), &lt;span&gt;16&lt;/span&gt;) &lt;span&gt;when&lt;/span&gt; &lt;span&gt;14&lt;/span&gt; &lt;span&gt;then&lt;/span&gt; hsl &lt;span&gt;else&lt;/span&gt; &lt;span&gt;0&lt;/span&gt; &lt;span&gt;end&lt;/span&gt; &lt;span&gt;as&lt;/span&gt;&lt;span&gt; hsl14,
&lt;/span&gt;&lt;span&gt;case&lt;/span&gt; mod( &lt;span&gt;cast&lt;/span&gt;(poper &lt;span&gt;as&lt;/span&gt; abap.int4 ), &lt;span&gt;16&lt;/span&gt;) &lt;span&gt;when&lt;/span&gt; &lt;span&gt;15&lt;/span&gt; &lt;span&gt;then&lt;/span&gt; hsl &lt;span&gt;else&lt;/span&gt; &lt;span&gt;0&lt;/span&gt; &lt;span&gt;end&lt;/span&gt; &lt;span&gt;as&lt;/span&gt;&lt;span&gt; hsl15,
&lt;/span&gt;&lt;span&gt;case&lt;/span&gt; mod( &lt;span&gt;cast&lt;/span&gt;(poper &lt;span&gt;as&lt;/span&gt; abap.int4 ), &lt;span&gt;16&lt;/span&gt;&lt;span&gt;)
  &lt;/span&gt;&lt;span&gt;when&lt;/span&gt;  &lt;span&gt;0&lt;/span&gt; &lt;span&gt;then&lt;/span&gt;
    &lt;span&gt;case&lt;/span&gt;&lt;span&gt; poper
      &lt;/span&gt;&lt;span&gt;when&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;000&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; &lt;span&gt;then&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;
      &lt;span&gt;else&lt;/span&gt;&lt;span&gt; hsl
    &lt;/span&gt;&lt;span&gt;end&lt;/span&gt;
  &lt;span&gt;else&lt;/span&gt; &lt;span&gt;0&lt;/span&gt; &lt;span&gt;end&lt;/span&gt;
&lt;span&gt;as&lt;/span&gt;&lt;span&gt; hsl16,
………………
………………

&lt;/span&gt;&lt;span&gt;timestamp&lt;/span&gt;&lt;span&gt;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可以清楚地看到，原来&lt;strong&gt;结转余额HSLVT其实就是期间POPER = 000时的金额，HSL01，HSL02就是期间POPER = 001，002时的金额&lt;/strong&gt;....&lt;/p&gt;
&lt;p&gt;对应语句是：&lt;span&gt;case poper &lt;span&gt;when &lt;span&gt;'&lt;span&gt;000&lt;span&gt;' &lt;span&gt;then hsl &lt;span&gt;else &lt;span&gt;0 &lt;span&gt;end &lt;span&gt;as &lt;span&gt;hslvt,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;，和&lt;span&gt;case mod( &lt;span&gt;cast(poper &lt;span&gt;as abap.int4 ), &lt;span&gt;16) &lt;span&gt;when &lt;span&gt;1 &lt;span&gt;then hsl &lt;span&gt;else &lt;span&gt;0 &lt;span&gt;end &lt;span&gt;as &lt;span&gt;hsl01&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;继续找下去可以得知FGL_GLTT1的数据来自于表ACDOCA（Universal Journal Entry Line Items）。也就是说，每次从FAGLFLEXT中查询数据，实际上相当于经过了FGL_GLSI_ACD-&amp;gt;FGL_GLSI_ACD-&amp;gt;FGL_GLTT1-&amp;gt;FGL_GLTT2-&amp;gt;FGL_FAGLFLEXT-&amp;gt;V_FAGLFLEXT_DDL一系列中间层逻辑处理，其实际的数据源则是表ACDOCA。当然这些视图中可能还包含其它细节..&lt;/p&gt;
&lt;p&gt;以上是对FAGLFLEXT的分析，ACDOCT也是差不多的，具体的条件有点差别。&lt;/p&gt;

&lt;p&gt;FAGLFLEXT和ACDOCT的存在体现了CDS所具备的强大能力。不过，毕竟它们只是兼容视图，又包含这样多的中间层...按照一般的原则，程序中的中间层越多，性能就越差。因此，在了解到它们中的数据的实际来源后，也许在某些情况下，直接从ACDOCA中通过聚合函数获取期初余额之类的东西会有更好的性能。&lt;/p&gt;

&lt;p&gt;按这样的思路改写文初获取1000公司在2018年3月的期初余额的代码，可以写成：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;SELECT&lt;/span&gt; &lt;span&gt;SUM&lt;/span&gt;( hsl ) &lt;span&gt;FROM&lt;/span&gt; acdoca &lt;span&gt;WHERE&lt;/span&gt; rbukrs = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;1000&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
                                &lt;span&gt;AND&lt;/span&gt; gjahr  = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;2018&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
                                &lt;span&gt;AND&lt;/span&gt; poper  &amp;lt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;003&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
  &lt;span&gt;INTO&lt;/span&gt; @&lt;span&gt;DATA&lt;/span&gt;(l_balance).
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;是不是简单了很多呢？&lt;/p&gt;

&lt;p&gt;最后，再次重申，本文只是从技术角度介绍下我对ACDOCT，FAGLFLEXT的了解。在实际业务中，这两个视图中的数据可能和分类账、凭证状态之类的东西有关...其中的数据与ACDOCA中的汇总数据并不一定在任何情况下都完全相等。&lt;/p&gt;

</description>
<pubDate>Fri, 23 Mar 2018 07:02:00 +0000</pubDate>
<dc:creator>氢氦</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/hhelibeb/p/8629942.html</dc:identifier>
</item>
<item>
<title>使用CoreRT将.NET Core发布为Native应用程序 - KAnts</title>
<link>http://www.cnblogs.com/ants/p/8630332.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/ants/p/8630332.html</guid>
<description>&lt;blockquote readability=&quot;6.6105263157895&quot;&gt;
&lt;p&gt;在上一篇文章《&lt;a href=&quot;http://www.cnblogs.com/ants/p/8615958.html&quot; target=&quot;_blank&quot;&gt;使用.NET Core快速开发一个较正规的命令行应用程序&lt;/a&gt;》中我们看到了使用自包含方式发布的.NET Core应用中包含了216个文件。我就写一个cat命令用得着这么动真格。。。这写出来的命令行还有人用吗？今天我们就来介绍一下MS的另一个开源项目CoreRT。用来解决这个棘手的问题。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;CoreRT 是MS一个长期开源项目，它早在一年前就已经建立了，持续到今。&lt;/p&gt;
&lt;h2&gt;项目目标&lt;/h2&gt;
&lt;p&gt;将.NET Core托管（CLR）应用程序编译为本地（特地平台）的单一可执行文件。&lt;/p&gt;
&lt;p&gt;说白了就是将.NET Core编译为机器码（也可以是其他东西，如C++代码），而不再有之前的运行时，将.NET变为真正的“静态编译形”语言。&lt;/p&gt;
&lt;h2&gt;基本信息&lt;/h2&gt;
&lt;p&gt;项目地址：&lt;a title=&quot;https://github.com/dotnet/corert&quot; href=&quot;https://github.com/dotnet/corert&quot; target=&quot;_blank&quot;&gt;https://github.com/dotnet/corert&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;支持的平台&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Windows x64&lt;/li&gt;
&lt;li&gt;MacOS x64&lt;/li&gt;
&lt;li&gt;Linux x64/ARM&lt;/li&gt;
&lt;li&gt;CppCodeGen&lt;/li&gt;
&lt;li&gt;WebAssembly（Blazor目前还是基于Mono的，如果CoreRT成型，不出意外会切换到CoreRT）&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;可以看到目前没有支持x86，所以想跑在x86架构的平台上还是老老实实的吧。。&lt;/p&gt;
&lt;h2&gt;项目状态&lt;/h2&gt;
&lt;p&gt;目前项目版本是：alpha，也就是说非正式版，切还离得比较远。&lt;/p&gt;
&lt;p&gt;所以不推荐大家用在比较大型或商业项目上，会出很多问题。&lt;/p&gt;
&lt;p&gt;但写个小程序，小工具还是没什么太大问题的。&lt;/p&gt;

&lt;p&gt;Native的优势我一说到就激动，期待了很久。从早期Core beta2还有这个功能，到后面被搁置（来不及发布）经历了期望与失落。。克制住情绪，下面我们来理性分析一下Native的好处。&lt;/p&gt;
&lt;h2&gt;更少的发布文件&lt;/h2&gt;
&lt;p&gt;Native后发布文件明显减少，一般情况下我们的.NET应用，每引用一个packages就至少增加一个文件（*.dll）Native会将这些dll都打包在一起。这样极大方便了发布和部署。&lt;/p&gt;
&lt;h2&gt;启动速度更快&lt;/h2&gt;
&lt;p&gt;我们都知道托管语言（.NET、Java）第一次执行（不仅仅是启动，所有的方法、语句第一次执行都一样）都很慢（《&lt;a href=&quot;http://www.cnblogs.com/ants/p/3412083.html&quot; target=&quot;_blank&quot;&gt;在.net中为什么第一次执行会慢？&lt;/a&gt;》），这是托管语言的优势也同样是劣势。&lt;/p&gt;
&lt;p&gt;Native后就不存在虚拟机技术（CLR、JVM）也就没有的即时编译这个动作了。得到的好处就是第一次执行跟第二次执行是一样的。&lt;/p&gt;
&lt;h2&gt;更少的内存资源&lt;/h2&gt;
&lt;p&gt;Native后会进一步减少内存的使用，不需要加载一些核心“框架”（JIT）等。&lt;/p&gt;

&lt;p&gt;Native并不是万能的，也存在缺点。但我觉得整体上利大于弊。&lt;/p&gt;
&lt;h2&gt;更强的针对性&lt;/h2&gt;
&lt;p&gt;Native后就基本不能跨平台了（这边的跨平台是指一次发布到处运行，并不是指程序不能跨平台）&lt;/p&gt;
&lt;p&gt;也就是说，如果你要运行在windows上需要单独为windows进行一次发布，运行在MacOS上也需要单独进行一次发布，运行在Linux上同样也需要单独进行一次发布（当然还包括x86\x64\ARM这样的变更，都需要重新发布）&lt;/p&gt;
&lt;p&gt;同样JIT也无法为代码提供执行编译优化，可以参考之前文章中，关于CPU个数的代码优化。&lt;/p&gt;

&lt;h2&gt;添加Packages&lt;/h2&gt;
&lt;p&gt;首先，因为这个项目还没有正式发布，所以你需要添加dotnet团队的每日构建nuget源，地址为：&lt;a title=&quot;https://dotnet.myget.org/F/dotnet-core/api/v3/index.json&quot; href=&quot;https://dotnet.myget.org/F/dotnet-core/api/v3/index.json&quot;&gt;https://dotnet.myget.org/F/dotnet-core/api/v3/index.json&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;然后安装packages：Microsoft.DotNet.ILCompiler&lt;/p&gt;
&lt;p&gt;或者你可以在你的项目路径下执行下面的命令：&lt;/p&gt;
&lt;blockquote readability=&quot;3.312&quot;&gt;
&lt;p&gt;dotnet add package Microsoft.DotNet.ILCompiler -s &lt;a href=&quot;https://dotnet.myget.org/F/dotnet-core/api/v3/index.json&quot;&gt;https://dotnet.myget.org/F/dotnet-core/api/v3/index.json&lt;/a&gt; –v 1.0.0-alpha-*&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;设置RuntimeIdentifiers&lt;/h2&gt;
&lt;p&gt;RuntimeIdentifiers可设置的内容可以参考上面的平台支持&lt;/p&gt;
&lt;h2&gt;为对应的平台进行发布&lt;/h2&gt;
&lt;p&gt;最终你的项目文件可以像下面这样&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://images2018.cnblogs.com/blog/384997/201803/384997-20180323145628586-2052790003.png&quot;&gt;&lt;img width=&quot;820&quot; height=&quot;256&quot; title=&quot;image&quot; alt=&quot;image&quot; src=&quot;https://images2018.cnblogs.com/blog/384997/201803/384997-20180323145628913-1958759840.png&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;执行发布命令&lt;/p&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;dotnet publish –c Release –r win-x64&lt;/p&gt;
&lt;p&gt;dotnet publish –c Release –r linux-x64&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://images2018.cnblogs.com/blog/384997/201803/384997-20180323145629160-1360536540.png&quot;&gt;&lt;img width=&quot;952&quot; height=&quot;159&quot; title=&quot;image&quot; alt=&quot;image&quot; src=&quot;https://images2018.cnblogs.com/blog/384997/201803/384997-20180323145629430-1386073208.png&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;我们就可以去具体的发布输出目录看到发布结果了&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://images2018.cnblogs.com/blog/384997/201803/384997-20180323145629663-295230483.png&quot;&gt;&lt;img width=&quot;697&quot; height=&quot;123&quot; title=&quot;image&quot; alt=&quot;image&quot; src=&quot;https://images2018.cnblogs.com/blog/384997/201803/384997-20180323145629919-1020191695.png&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;可以看到大小为3.7MB还是有优化的空间的，毕竟现在还不是正式版。&lt;/p&gt;
&lt;p&gt;go引用fmt后的build大小差不多是1.9MB。&lt;/p&gt;

&lt;p&gt;CoreRT为什么不推荐大家现在使用？很大的一个问题就是现有所有用到反射的类型，都必须制定一个Mapping文件。异常麻烦。配置文件内容大概如下：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://images2018.cnblogs.com/blog/384997/201803/384997-20180323145630481-642587960.png&quot;&gt;&lt;img width=&quot;833&quot; height=&quot;789&quot; title=&quot;image&quot; alt=&quot;image&quot; src=&quot;https://images2018.cnblogs.com/blog/384997/201803/384997-20180323145631116-1078200542.png&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;泛型也行也得一个个完全去指定，所以不推荐大家在太复杂的应用下使用。当然官方最终应该不会允许这个文件存在的。目前官方已经开了对应的issue用来讨论如何解决这个现状。&lt;/p&gt;
&lt;p&gt;我们就再耐心等等吧。&lt;/p&gt;
</description>
<pubDate>Fri, 23 Mar 2018 06:57:00 +0000</pubDate>
<dc:creator>KAnts</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/ants/p/8630332.html</dc:identifier>
</item>
<item>
<title>python全栈开发-Day7 字符编码总结 - 天王盖地虎宝塔镇河妖</title>
<link>http://www.cnblogs.com/ManyQian/p/8630060.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/ManyQian/p/8630060.html</guid>
<description>&lt;h2&gt;&lt;span&gt;一、字符编码总结&lt;br/&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;h3&gt;&lt;span&gt;&lt;strong&gt;1、什么是字符编码　　&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　人类的字符---------》翻译---------》数字&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;strong&gt;　　翻译的过程遵循的标准即字符编码（就是一个字符与数字一一对应关系的表）&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　 &lt;strong&gt;&lt;span&gt;我们在计算机上常见：&lt;/span&gt;&lt;/strong&gt;&lt;br/&gt;&lt;span&gt;&lt;strong&gt;　　　　ascii   英文：1bytes&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;strong&gt;　　　　gbk：中文：2bytes 英文：1bytes&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;strong&gt;　　　　unicode：任意字符：2bytes&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;strong&gt;　　　　utf-8：中文：3bytes，英文1bytes&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;&lt;span&gt;2、字符编码要掌握的知识点&lt;/span&gt;　　&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　1、&lt;span&gt;以什么编码存的，就应该以该编码取&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　　　#coding:utf-8 :用于python解释器读取python文件，&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;所以文件头指定的编码必须跟python文件存储时用的编码一致&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　2、 编码解码&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;strong&gt;　　　　&lt;span&gt;unicode---编码encode---》utf-8&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;strong&gt;　　　　utf-8---解码decode---》unicode&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;strong&gt;　　　　python3中str是以unicode编码形式存放的&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;strong&gt;　　　　x='你好'&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;strong&gt;　　　　x.encode('utf-8') ----&amp;gt; bytes&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;strong&gt;　　　　bytes.decode('utf-8')-------------&amp;gt;str（unicode）&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　　　上面最核心的一点就是不管什么(&lt;span&gt;ps:不是官方认证不算&lt;/span&gt;)编码都能够去解码成unicode,如果我们遇到乱码问题，&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;找它是以什么编码格式存在硬盘中。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　3、bytes类型的用途：&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;strong&gt;　　　　1、存放到文件中(说白了就是文件的处理，不需要复杂的解码的过程，直接进行移动存储)&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　　　　　具体的操作看文件操作这篇博客！&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　　　2、基于网络传输（后面的网络编程会有相应的博客，还没学到敬请期待！）&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Fri, 23 Mar 2018 06:16:00 +0000</pubDate>
<dc:creator>天王盖地虎宝塔镇河妖</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/ManyQian/p/8630060.html</dc:identifier>
</item>
<item>
<title>SpringtMVC中配置  与  源码解析 - cyhbyw</title>
<link>http://www.cnblogs.com/cyhbyw/p/8625554.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/cyhbyw/p/8625554.html</guid>
<description>&lt;p&gt;&lt;span&gt;上一篇有提到，当有、无这两个标签时，SpringtMVC 底层所采用的  HandlerMapping 以及 HandlerAdapter 是不一样的。现在就来进行源码调试，揭开 SpringtMVC 底层实现的庐山真面目。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;Demo代码地址：&lt;/span&gt; &lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;a href=&quot;https://github.com/cyhbyw/springMVC_atguigu_TongGang&quot; target=&quot;_blank&quot;&gt;https://github.com/cyhbyw/springMVC_atguigu_TongGang&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;span&gt; 工程名称：&lt;/span&gt; &lt;/p&gt;
&lt;p&gt;&lt;span&gt; springMVC_DebugSourceCode&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;现在开始调试。&lt;/span&gt; &lt;/p&gt;
&lt;p&gt;&lt;span&gt;==============&amp;gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;PS：图片可能不是很清晰，可以右击图片、选择在新标签页中查看&lt;/span&gt;&lt;br/&gt;&lt;span&gt;或者，可以右击图片，选择“图片另存为”保存在本地并编好号（建议直接以01、02、03……来编号）&lt;/span&gt;&lt;br/&gt;&lt;span&gt;或者，可以右击图片，选择“复制图片”，再保存到本地并编好号（建议直接以01、02、03……来编号）&lt;/span&gt;&lt;br/&gt;&lt;span&gt;以上三种办法，任意选择喜欢的一种，以获得并查看更清晰的图片~~&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;==============&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;先来看看&lt;span&gt;没有这两个标签&lt;/span&gt;的情况下，SpringMVC的行为吧。&lt;span&gt;提示：需要在XML配置文件中注释掉这两个标签的内容！&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;01. Bean定义文档的阅读器（其实就是读取XML配置文件中的内容）；可以看到，SpringMVC 会读取到 component-scan 的元素，然后调用Line166的方法；注意线程堆栈信息，此方法位于 AbstractApplicationContext 的 Line501 的 refresh() 方法调用路径中（refresh() 方法是SpringIOC容器管理的核心方法，后面会再提及）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/319547/201803/319547-20180323103841061-1991345412.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;02. 解析元素；先调用 Line1339 的方法，再调用 Line1343 的方法；如图，Line1345 的 resolver() 方法很重要（后面详解）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/319547/201803/319547-20180322180849455-1949534084.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;03. 现在进入 resolve() 方法；然后调用 Line128 的 init() 方法&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/319547/201803/319547-20180322181036819-288606535.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; 04. init() 方法就是注册一批Bean定义解析器；比如 Line35 就定义了 component-scan 元素的解析器&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/319547/201803/319547-20180322181141250-1038084048.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;05. 注册的方式就是放入到 parsers 这个 map 中（这里放入，后面就会取出来使用）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/319547/201803/319547-20180322181238561-1105623537.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;06. 回到上一层，resolve() 方法处理完成后，调用 handler.parse() 方法&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/319547/201803/319547-20180322181315929-1270122210.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; 07. parse() 方法会先去找对应元素的 parser&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/319547/201803/319547-20180322181402407-1642584784.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;08. 找的本质其实就是从刚才的 map 中取出对应元素的值&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/319547/201803/319547-20180322181527723-1566699388.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;09. 找到 parser 后，继续调用 parse() 方法&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/319547/201803/319547-20180322181614544-1837716304.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;10. 继续调用&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/319547/201803/319547-20180322215252407-1607909898.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;11. 继续调用&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/319547/201803/319547-20180322215333472-573306478.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;12. 下面两张图片中断点所在行的 beanDefs.add(registerPostProcessor 方法的 registerPostProcessor() 方法会依次被调用（可以理解，或者说，等价于 for 循环调用，只是 SpringtMVC 还有其它的判断逻辑）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/319547/201803/319547-20180322215437266-563624610.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/319547/201803/319547-20180322215542144-1720469041.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;13. 继续调用 registerBeanDefinition() 方法&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/319547/201803/319547-20180323104750393-7120608.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; 14. 通过 Line851 行将 beanName 添加到 beanDefinitionNames 中，以方便后续使用&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;  &lt;img src=&quot;https://images2018.cnblogs.com/blog/319547/201803/319547-20180322215740924-662986331.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;15. 多次调用后，可以看到，beanDefinitionNames  中的元素数量在增加&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/319547/201803/319547-20180322215857002-1799379249.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; 16. XML 配置文件中定义的 component-scan 元素已经处理完成，现在继续处理 bean 元素（这是的 bean 元素其实是 XML 文件中定义的 InternalResourceViewResolver，只是没有为它的 id/name 赋值，所以下图中显示为 &quot;bean: null&quot;）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/319547/201803/319547-20180322220105468-996425712.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;17. 同理，InternalResourceViewResolver 会被添加到 beanDefinitionNames 中&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/319547/201803/319547-20180322220202240-467158745.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;18. 到目前为止，beanDefinitionNames 已经存入8个元素，是时候想想，什么时候会使用 beanDefinitionNames 了。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;前面也提及过，AbstractApplicationContext 中有个 refresh() 方法，此方法是 SpringIOC 容器管理的核心方法，里面包含了对其它几个重要方法调用。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;refresh() 方法非常重要！！！！&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;refresh() 方法非常重要！！！！&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;refresh() 方法非常重要！！！！&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;上面1--17步中方法的调用，其实都全部位于此处 Line501 的 &lt;span&gt;obtainFreshBeanFactory()&lt;/span&gt; 方法中。现在，是时候转向其它方法的调用了。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;调试发现，接下来 SpringtMVC 会走到 Line532 的 &lt;span&gt;finishFresh()&lt;/span&gt; 方法。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/319547/201803/319547-20180323095814179-1863547534.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;19. 现在到达 &lt;span&gt;DispatcherServlet 的 initStrategies()&lt;/span&gt; 方法；注意查看下图中的堆栈路径，有点多，不再详述了；同时，可以看到，此处 Line482 的 &lt;span&gt;initHandlerMappings(context) &amp;amp; Line483 的 initHandlerAdapters(context)&lt;/span&gt; 方法其实就是从 context--&amp;gt;beanFactory--&amp;gt;beanDefinitionNames 中去获取 HandlerMapping &amp;amp; HandlerAdapter&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/319547/201803/319547-20180323100124415-2003110279.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; 20. 不好意思，获取不到（这个很容易理解，因为上面我们看到的 beanDefinitionNames 确定没有任何一个 HandlerMapping 或者 HandlerAdapter），于是代码转到 Line588 去获取默认值&lt;img src=&quot;https://images2018.cnblogs.com/blog/319547/201803/319547-20180323100343551-725684129.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;21. 默认值是从 defaultStrategies 中获取&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/319547/201803/319547-20180323100455020-423339274.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;22. defaultStrategies 其实是采用 static{} 去读取 &lt;span&gt;DispatcherServlet.properties&lt;/span&gt; 文件中的内容&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/319547/201803/319547-20180323100630282-1825758911.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;23. 文件内容如下；默认两个 HandlerMapping 以及三个 HandlerAdapter （这就是没有配置这两个标签时 SpringtMVC 所采用的默认值）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/319547/201803/319547-20180323100745347-1489630940.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;24. 初始化 HandlerAdapter 的逻辑类似，不再详述&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/319547/201803/319547-20180323101048683-1317030746.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;以上24步，是没有添加这两个标签时 SpringtMVC 的处理流程。接下来分析一下&lt;span&gt;有这两个标签时&lt;/span&gt;的处理流程。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;总体来说，大同小异，只是中间有个地方创建了不同的实例、然后调用了不用实例的方法、进而得到不同的Bean。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;来具体看看吧。&lt;span&gt;相同的逻辑不再赘述，下面的说明及配图主要体现在一些不同的点上。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; 01.  现在开始处理 annotation-driven 元素&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/319547/201803/319547-20180323113821458-293710173.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; 02. 得到一个不同的 NamespaceHandler 并调用它的 init() 方法&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/319547/201803/319547-20180323113924261-1477348707.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;03. 注册内容当然不一样；从图中可以明显看到，第一个就是 annotation-drivern 且对应的类是 AnnotationDrivenBeanDefinitionParser&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/319547/201803/319547-20180323114005796-1280865971.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;04. 获取的时候，当然是拿到刚才注册进去的 AnnotationDrivenBeanDefinitionParser&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/319547/201803/319547-20180323114105774-1283185038.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;05. parse() 方法自然也不一样；&lt;span&gt;注意 Line204 行会注册 HANDLER_MAPPING_BEAN_NAME&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/319547/201803/319547-20180323114201217-1640151780.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;06. &lt;span&gt;而这个 HANDLER_MAPPING_BEAN_NAME 其实就是 RequestMappingHandlerMapping&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/319547/201803/319547-20180323114232640-766764129.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; 07. 可以看到 RequestMappingHandlerMapping 已经被成功地添加到 beanDefinitionNames 中（那么，后续使用时，就可以取出它）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/319547/201803/319547-20180323114334150-338402633.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; 08. &lt;span&gt;注册 HANDLER_ADAPTER_BEAN_NAME&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/319547/201803/319547-20180323134556265-1138117893.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;09. &lt;span&gt;HANDLER_ADAPTER_BEAN_NAME 其实就是 RequestMappingHandlerAdapter&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/319547/201803/319547-20180323134948887-1275314682.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;10. 将 RequestMappingHandlerAdapter 添加到 beanDefinitionNames 中（之后就可以使用啦~~）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/319547/201803/319547-20180323134651606-1708764628.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Fri, 23 Mar 2018 05:59:00 +0000</pubDate>
<dc:creator>cyhbyw</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/cyhbyw/p/8625554.html</dc:identifier>
</item>
<item>
<title>Android库项目中的资源ID冲突 - mmmmar</title>
<link>http://www.cnblogs.com/mmmmar/p/8628794.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/mmmmar/p/8628794.html</guid>
<description>&lt;h2&gt;1、前言&lt;/h2&gt;
&lt;p&gt;Android Studio对模块化开发提供的一个很有用的功能就是可以在主项目下新建库项目（Module），但是在使用库项目时却有一个问题就是资源ID冲突，因为编译时SDK会自动帮我们处理这个问题，所以一般我们不会察觉到，但是在某些情况下，我们需要意识到这个问题的存在。&lt;/p&gt;
&lt;p&gt;比如，在新建的库项目中使用如下代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
public void onButtonClick(View view) {
    switch (view.getId()) {
        case R.id.button_1:
            break;
        case R.id.button_2;
            break;
    }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;IDE会提示：&lt;/p&gt;
&lt;blockquote readability=&quot;10&quot;&gt;
&lt;p&gt;Resource IDs cannot be used in a switch statement in Android library modules less.&lt;/p&gt;
&lt;p&gt;Validates using resource IDs in a switch statement in Android library module. Resource IDs are non final in the library projects since SDK tools r14, means that the library code cannot treat these IDs as constants.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;再比如，我们在库项目中以如下方式使用ButterKnife，编译时就会报错。&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
@OnClick(R.id.button_1)
public void onButtonClick(View view) {

}
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt; 2、分析&lt;/h2&gt;
&lt;p&gt;无论是 &lt;span class=&quot;cnblogs_code&quot;&gt;&lt;span&gt;switch&lt;/span&gt;&lt;/span&gt; 语句还是注解，都有一个要求就是使用的值必须是常量。在主项目中， R类中的成员变量都被 &lt;span class=&quot;cnblogs_code&quot;&gt;&lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt;&lt;/span&gt; 修饰，而在库项目中仅被 &lt;span class=&quot;cnblogs_code&quot;&gt;&lt;span&gt;static&lt;/span&gt;&lt;/span&gt; 修饰。 &lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;34&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
// 库项目中生成的R类：
public final class R {
    public static final class id {
        public static int button_1 = 0x7f0c0001;
    }
}

// 主项目中生成的R类：
public final class R {
    public static final class id {
        public static final int text_1 = 2131165184;
    }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;为什么库项目中生成的资源ID没有被 &lt;span class=&quot;cnblogs_code&quot;&gt;&lt;span&gt;final&lt;/span&gt;&lt;/span&gt; 修饰呢？官方解释如下：&lt;/p&gt;
&lt;blockquote readability=&quot;9.1435768261965&quot;&gt;
&lt;p&gt;&lt;a href=&quot;http://tools.android.com/tips/non-constant-fields&quot; target=&quot;_blank&quot;&gt;&lt;span id=&quot;sites-page-title&quot; dir=&quot;ltr&quot;&gt;Non-constant Fields in Case Labels&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;span dir=&quot;ltr&quot;&gt;当多个库项目进行合并时，不同项目中的资源ID可能会重复。在ADT 14之前，无论是主项目还是库项目，资源ID统一被定义为 final 类型的静态变量。这样照成的结果就是主项目进行编译时一旦发现资源ID冲突，库项目中对应的资源文件以及引用资源文件的代码都需要重新编译。&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果代码中使用了被 &lt;span class=&quot;cnblogs_code&quot;&gt;&lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt;&lt;/span&gt; 修饰的变量，那这个变量实际上就是一个常量，编译时会直接使用它的值进行替换。在编译时，如果库项目与主项目的资源ID发生了重复，资源被分配了新的ID后库项目之前编译过的代码也就失效了。&lt;/p&gt;
&lt;p&gt;那么当库项目R类中的变量仅被 &lt;span class=&quot;cnblogs_code&quot;&gt;&lt;span&gt;static&lt;/span&gt;&lt;/span&gt; 修饰后会起到什么作用呢，我们可以看一下编译后的字节码再反编译后的样子。&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
// 主项目中的Activity：
public class MainActivity extends AppCompatActivity {
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        // 源代码：setContentView(R.layout.activity_main);
        this.setContentView(2131296283);
    }
}
// 库项目中的Activity：
public LibActivity extends AppCompatActivity {
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        this.setContentView(R.layout.activity_lib);
    }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;主项目R类中的资源ID被 &lt;span class=&quot;cnblogs_code&quot;&gt;&lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt;&lt;/span&gt; 修饰，编译时直接被替换成了对应的常量。库项目R类中的资源ID仅被 &lt;span class=&quot;cnblogs_code&quot;&gt;&lt;span&gt;static&lt;/span&gt;&lt;/span&gt; 修饰，所以保留了变量。这样当资源ID发送冲突时，主项目R类不变，修改库项目R类中的变量，库项目已经编译过的代码仍有效。&lt;/p&gt;
&lt;h2&gt; 3、ButterKnife中的R2类&lt;/h2&gt;
&lt;p&gt;既然库项目中的资源ID不可以定义为常量，那如何在库文项目使用ButterKnife呢，作者提供了R2类供我使用。&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;34&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
@OnClick({R2.id.button_1, R2.id.button_2})
public void onButtonClick(View view) {
    int id = view.getId();
    if (id == R.id.button_1) {
        // ...
    } else if (id == R.id.button_2) {
        // ...
    }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;没错在注解中使用R2类，但是在代码里还是需要使用R类，因为R类中的ID不是常量，所以只能使用 &lt;span class=&quot;cnblogs_code&quot;&gt;&lt;span&gt;if&lt;/span&gt;&lt;/span&gt; 语句进行判断。&lt;/p&gt;
&lt;p&gt;先来看一下ButterKnife为我们生成的R2类与R类有什么不同：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;34&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
// 库项目中的R类：
public final class R {
    public static final class id {
        public static int button_1 = 0x7f0c0001;
    }
}
// 库项目中ButterKnife为我们生成的R2类：
public final class R2 {
    public static final class id {
        public static final int button_1 = 0x7f0c0001;
    }
}　　
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ButterKnife做的工作很简单，仅仅是把R类中的变量搬到了R2类里，然后给所有的变量都加上了 &lt;span class=&quot;cnblogs_code&quot;&gt;&lt;span&gt;final&lt;/span&gt;&lt;/span&gt; 。根据前面所说，当项目整体编译时，库项目的资源ID一旦与主项目的资源ID发送冲突，库项目的资源会被重新分配ID导致其R类被修改。显然这个过程并不涉及R2类，R2类中保留的仍然是过时的ID。但是ButterKnife提供的注解的作用是什么，它们并不是为了提供运行时信息，而是为了在编译时生成代码。&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;40&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
public class LibActivity_ViewBinding implements Unbinder {

    private LibActivity target;
    private View view_button_1;
    private View view_button_2;

    @UiThread
    public LibActivity_ViewBinding(final LibActivity target, View source) {
        this.target = target;
        View view = Utils.findRequiredView(source, R.id.button_1, &quot;method 'onButtonClick'&quot;);
        this.view_button_1 = view;
        //view.setOnClickListener....
        view = Utils.findRequiredView(source, R.id.button_2, &quot;method 'onButtonClick'&quot;);
        this.view_button_2 = view;
        //view.setOnClickListener....
    }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在ButterKnife生成的代码中，使用的仍然是R类。R2起到的作用仅仅是提供一个符号名，只要让程序知道在生成代码时对应哪一个变量即可。这个方法可以说是很“tricky”了。&lt;/p&gt;
</description>
<pubDate>Fri, 23 Mar 2018 05:20:00 +0000</pubDate>
<dc:creator>mmmmar</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/mmmmar/p/8628794.html</dc:identifier>
</item>
</channel>
</rss>