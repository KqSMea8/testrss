<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>MyBatis 构造动态 SQL 语句 - tosser</title>
<link>http://www.cnblogs.com/tosser/p/9182513.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/tosser/p/9182513.html</guid>
<description>&lt;p&gt;　　以前看过一个本书叫《深入浅出 MFC 》，台湾 C++ 大师写的一本书。在该书中写道这样一句话，“勿在浮沙筑高台”，这句话写的的确对啊。编程很多语言虽然相同，但是真正做还是需要认真的学习，如果只是想着按想像着来，真的是会走很多弯路，浪费很多时间。&lt;/p&gt;

&lt;p&gt;无法使用 not in&lt;/p&gt;
&lt;p&gt;　　在项目中需要使用到 not in ，想着不是很复杂，但是这个问题困扰了我个把小时，很是郁闷。自己拼接好了字符串，字符串的内容是 not in 中的各个 id 值。通过 not in 来进行 update 的操作，结果和我要的不相同。将 Console 窗口输出的 SQL 语句复制进入 SQL 的客户端执行，和我想的一样。在这个时候，想着不知道是哪里错了。&lt;/p&gt;
&lt;p&gt;　　我拼接的字符串类似如下形式：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; 'aa', 'bb', 'cc', 'dd'
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　以这样的形式放入 not in () 中，刚好可以满足我的需求，但是为什么不行呢？我猜测原因是，MyBatis 将该字符串当参数带入后，会在首尾增加单引号将字符串引住，而我的字符串的首尾都有单引号的存在，因此导致查询时会有问题。因此在拼接字符串时是不需要首尾的单引号的。但是，我并没有再使用拼接字符串的方式来进行处理，因为 MyBatis 有它自己的处理方式。&lt;/p&gt;

&lt;p&gt;MyBatis 的动态 SQL&lt;/p&gt;
&lt;p&gt;　　MyBatis 可以根据不同的条件来拼接 SQL 语句。在 MyBatis 中有一个 foreach 标签，可以轻松的完成我要的动态拼接的效果。&lt;/p&gt;
&lt;p&gt;　　直接贴出我的代码，代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 删除数据库中有的城市，而接口中已经没有的城市 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;update &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;deleteOldCityList&quot;&lt;/span&gt;&lt;span&gt; parameterType&lt;/span&gt;&lt;span&gt;=&quot;java.util.List&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;    UPDATE tls_city SET
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;        del_flag = '1'
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;    WHERE
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;        del_flag = '0'
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;        AND city_code NOT IN
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;foreach &lt;/span&gt;&lt;span&gt;item&lt;/span&gt;&lt;span&gt;=&quot;item&quot;&lt;/span&gt;&lt;span&gt; index&lt;/span&gt;&lt;span&gt;=&quot;index&quot;&lt;/span&gt;&lt;span&gt; collection&lt;/span&gt;&lt;span&gt;=&quot;list&quot;&lt;/span&gt;&lt;span&gt; open&lt;/span&gt;&lt;span&gt;=&quot;(&quot;&lt;/span&gt;&lt;span&gt; separator&lt;/span&gt;&lt;span&gt;=&quot;,&quot;&lt;/span&gt;&lt;span&gt; close&lt;/span&gt;&lt;span&gt;=&quot;)&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;            #{item}
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;foreach&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;update&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　上面的代码是 MyBatis 中的定义，关键的部分就是 foreach 标签，其中：&lt;/p&gt;
&lt;p&gt;item           表示集合中每一个元素进行迭代时的别名；&lt;br/&gt;index         指定一个名字，用于表示在迭代过程中，每次迭代到的位置；&lt;br/&gt;open          表示该语句以什么开始；&lt;br/&gt;separator  表示在每次进行迭代之间以什么符号作为分隔符；&lt;br/&gt;close         表示以什么结束。&lt;/p&gt;
&lt;p&gt;　　在 update 标签的定义中有一个属性， parameterType 使用来指定参数类型的，这里使用的是 java.util.List 的集合类型。&lt;/p&gt;
&lt;p&gt;　　这样，上面的 MyBatis 代码就可以根据我传入的 List 来进行动态拼接 SQL 语句了。&lt;/p&gt;
&lt;p&gt;　　调用的代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;for&lt;/span&gt;( &lt;span&gt;int&lt;/span&gt; i = 0; i &amp;lt; size; i ++&lt;span&gt; ) {  
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; ...&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt;     
&lt;span&gt; 4&lt;/span&gt;     String cityCode = list.get(i).get(&quot;city&quot;&lt;span&gt;).toString();
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;     String cityName = list.get(i).get(&quot;cityname&quot;&lt;span&gt;).toString();
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;    cityList.add(cityCode);
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;     
&lt;span&gt; 9&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; ...&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt; &lt;span&gt;} 
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; 
&lt;span&gt;12&lt;/span&gt; deleteOldCityList(cityList);
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;　　到这里，通过 MyBatis 的 foreach 标签就实现了我想要的功能。对于 collection 而言，除了可以使用 List 以外，还可以使用 Array 和 Map 这两种集合类型。&lt;/p&gt;

&lt;p&gt;　　通过不断的写代码，遇到问题，解决问题，我感觉我越来越向着一个初级的 Java 程序员靠近了。加油！！&lt;/p&gt;
</description>
<pubDate>Thu, 28 Jun 2018 15:06:00 +0000</pubDate>
<dc:creator>tosser</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/tosser/p/9182513.html</dc:identifier>
</item>
<item>
<title>ASP.NET Core WebApi使用Swagger生成api说明文档看这篇就够了 - 依乐祝</title>
<link>http://www.cnblogs.com/yilezhu/p/9241261.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/yilezhu/p/9241261.html</guid>
<description>&lt;h3 id=&quot;引言&quot;&gt;引言&lt;/h3&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;在使用asp.net core 进行api开发完成后，书写api说明文档对于程序员来说想必是件很痛苦的事情吧，但文档又必须写，而且文档的格式如果没有具体要求的话，最终完成的文档则完全取决于开发者的心情。或者详细点，或者简单点。那么有没有一种快速有效的方法来构建api说明文档呢？答案是肯定的， Swagger就是最受欢迎的REST APIs文档生成工具之一！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;为什么使用swagger作为rest-apis文档生成工具&quot;&gt;为什么使用Swagger作为REST APIs文档生成工具&lt;/h3&gt;
&lt;ol&gt;&lt;li&gt;Swagger 可以生成一个具有互动性的API控制台，开发者可以用来快速学习和尝试API。&lt;/li&gt;
&lt;li&gt;Swagger 可以生成客户端SDK代码用于各种不同的平台上的实现。&lt;/li&gt;
&lt;li&gt;Swagger 文件可以在许多不同的平台上从代码注释中自动生成。&lt;/li&gt;
&lt;li&gt;Swagger 有一个强大的社区，里面有许多强悍的贡献者。&lt;/li&gt;
&lt;/ol&gt;&lt;h3 id=&quot;asp.net-core中如何使用swagger生成api说明文档呢&quot;&gt;asp.net core中如何使用Swagger生成api说明文档呢&lt;/h3&gt;
&lt;ol&gt;&lt;li&gt;Swashbuckle.AspNetCore 是一个开源项目，用于生成 ASP.NET Core Web API 的 Swagger 文档。&lt;/li&gt;
&lt;li&gt;NSwag 是另一个用于将 Swagger UI 或 ReDoc 集成到 ASP.NET Core Web API 中的开源项目。 它提供了为 API 生成 C# 和 TypeScript 客户端代码的方法。&lt;/li&gt;
&lt;/ol&gt;&lt;h3 id=&quot;下面以swashbuckle.aspnetcore为例为大家进行展示&quot;&gt;下面以Swashbuckle.AspNetCore为例为大家进行展示&lt;/h3&gt;
&lt;h4 id=&quot;swashbuckle由哪些组成部分呢&quot;&gt;Swashbuckle由哪些组成部分呢？&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;Swashbuckle.AspNetCore.Swagger：将 SwaggerDocument 对象公开为 JSON 终结点的 Swagger 对象模型和中间件。&lt;/li&gt;
&lt;li&gt;Swashbuckle.AspNetCore.SwaggerGen：从路由、控制器和模型直接生成 SwaggerDocument 对象的 Swagger 生成器。 它通常与 Swagger 终结点中间件结合，以自动公开 Swagger JSON。&lt;/li&gt;
&lt;li&gt;Swashbuckle.AspNetCore.SwaggerUI：Swagger UI 工具的嵌入式版本。 它解释 Swagger JSON 以构建描述 Web API 功能的可自定义的丰富体验。 它包括针对公共方法的内置测试工具。&lt;/li&gt;
&lt;/ul&gt;&lt;h4 id=&quot;如何使用vs2017安装swashbuckle呢&quot;&gt;如何使用vs2017安装Swashbuckle呢？&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;从“程序包管理器控制台”窗口进行安装&lt;/li&gt;
&lt;li&gt;转到“视图” &amp;gt; “其他窗口” &amp;gt; “程序包管理器控制台”&lt;/li&gt;
&lt;li&gt;导航到包含 TodoApi.csproj 文件的目录&lt;/li&gt;
&lt;li&gt;请执行以下命令 ·Install-Package Swashbuckle.AspNetCore&lt;/li&gt;
&lt;li&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1377250/201806/1377250-20180628225024672-48745808.png&quot; alt=&quot;1&quot;/&gt;&lt;/li&gt;
&lt;li&gt;从“管理 NuGet 程序包”对话框中：&lt;/li&gt;
&lt;li&gt;右键单击“解决方案资源管理器” &amp;gt; “管理 NuGet 包”中的项目&lt;/li&gt;
&lt;li&gt;将“包源”设置为“nuget.org”&lt;/li&gt;
&lt;li&gt;在搜索框中输入“Swashbuckle.AspNetCore”&lt;/li&gt;
&lt;li&gt;从“浏览”选项卡中选择“Swashbuckle.AspNetCore”包，然后单击“安装”&lt;/li&gt;
&lt;li&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1377250/201806/1377250-20180628225024324-1306730133.png&quot; alt=&quot;2&quot;/&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h4 id=&quot;添加并配置-swagger-中间件&quot;&gt;添加并配置 Swagger 中间件&lt;/h4&gt;
&lt;p&gt;首先引入命名空间：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;using Swashbuckle.AspNetCore.Swagger;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;将 Swagger 生成器添加到 Startup.ConfigureServices 方法中的服务集合中：&lt;/p&gt;
&lt;pre class=&quot;c#&quot;&gt;
&lt;code&gt;//注册Swagger生成器，定义一个和多个Swagger 文档
services.AddSwaggerGen(c =&amp;gt;
{
     c.SwaggerDoc(&quot;v1&quot;, new Info { Title = &quot;My API&quot;, Version = &quot;v1&quot; });
});&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;在 &lt;code&gt;Startup.Configure&lt;/code&gt; 方法中，启用中间件为生成的 JSON 文档和 Swagger UI 提供服务：&lt;/p&gt;
&lt;pre class=&quot;c#&quot;&gt;
&lt;code&gt;//启用中间件服务生成Swagger作为JSON终结点
app.UseSwagger();
//启用中间件服务对swagger-ui，指定Swagger JSON终结点
app.UseSwaggerUI(c =&amp;gt;
{
    c.SwaggerEndpoint(&quot;/swagger/v1/swagger.json&quot;, &quot;My API V1&quot;);
});&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;启动应用，并导航到 &lt;code&gt;http://localhost:&amp;lt;port&amp;gt;/swagger/v1/swagger.json&lt;/code&gt;。 生成的描述终结点的文档显示如下json格式。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1377250/201806/1377250-20180628225023816-1416825884.png&quot; alt=&quot;1530193531880&quot;/&gt;&lt;/p&gt;
&lt;p&gt;可在 &lt;code&gt;http://localhost:&amp;lt;port&amp;gt;/swagger&lt;/code&gt; 找到 Swagger UI。 通过 Swagger UI 浏览 API文档，如下所示。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1377250/201806/1377250-20180628225023393-1380263495.png&quot; alt=&quot;1530193586713&quot;/&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;10&quot;&gt;
&lt;p&gt;要在应用的根 (&lt;code&gt;http://localhost:&amp;lt;port&amp;gt;/&lt;/code&gt;) 处提供 Swagger UI，请将 &lt;code&gt;RoutePrefix&lt;/code&gt; 属性设置为空字符串：&lt;/p&gt;
&lt;pre class=&quot;c#&quot;&gt;
&lt;code&gt;app.UseSwaggerUI(c =&amp;gt;
{
    c.SwaggerEndpoint(&quot;/swagger/v1/swagger.json&quot;, &quot;My API V1&quot;);
    c.RoutePrefix = string.Empty;
});&lt;/code&gt;
&lt;/pre&gt;&lt;/blockquote&gt;
&lt;h3 id=&quot;swagger的高级用法自定义以及扩展&quot;&gt;Swagger的高级用法（自定义以及扩展）&lt;/h3&gt;
&lt;h4 id=&quot;使用swagger为api文档增加说明信息&quot;&gt;使用Swagger为API文档增加说明信息&lt;/h4&gt;
&lt;p&gt;在 &lt;code&gt;AddSwaggerGen&lt;/code&gt; 方法的进行如下的配置操作会添加诸如作者、许可证和说明信息等：&lt;/p&gt;
&lt;pre class=&quot;c#&quot;&gt;
&lt;code&gt;//注册Swagger生成器，定义一个和多个Swagger 文档
services.AddSwaggerGen(c =&amp;gt;
{
    c.SwaggerDoc(&quot;v1&quot;, new Info
    {
        Version = &quot;v1&quot;,
        Title = &quot;yilezhu's API&quot;,
        Description = &quot;A simple example ASP.NET Core Web API&quot;,
        TermsOfService = &quot;None&quot;,
        Contact = new Contact
        {
            Name = &quot;依乐祝&quot;,
            Email = string.Empty,
            Url = &quot;http://www.cnblogs.com/yilezhu/&quot;
        },
        License = new License
        {
            Name = &quot;许可证名字&quot;,
            Url = &quot;http://www.cnblogs.com/yilezhu/&quot;
        }
    });
});&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;wagger UI 显示版本的信息如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1377250/201806/1377250-20180628225022809-172479037.png&quot; alt=&quot;1530194050313&quot;/&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;4.056338028169&quot;&gt;
&lt;p&gt;为了防止博客被转载后，不保留本文的链接，特意在此加入本文的链接：&lt;a href=&quot;https://www.cnblogs.com/yilezhu/p/9241261.html&quot; class=&quot;uri&quot;&gt;https://www.cnblogs.com/yilezhu/p/9241261.html&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;为接口方法添加注释&quot;&gt;为接口方法添加注释&lt;/h4&gt;
&lt;p&gt;大家先点击下api，展开如下图所示，可以没有注释啊，怎么来添加注释呢？&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1377250/201806/1377250-20180628225022335-2142253965.png&quot; alt=&quot;1530194181832&quot;/&gt;&lt;/p&gt;
&lt;p&gt;按照下图所示用三个/添加文档注释，如下所示&lt;/p&gt;
&lt;pre class=&quot;c#&quot;&gt;
&lt;code&gt;/// &amp;lt;summary&amp;gt;
/// 这是一个api方法的注释
/// &amp;lt;/summary&amp;gt;
/// &amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;
[HttpGet]
public ActionResult&amp;lt;IEnumerable&amp;lt;string&amp;gt;&amp;gt; Get()
{
     return new string[] { &quot;value1&quot;, &quot;value2&quot; };
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;然后运行项目，回到swaggerUI中去查看注释是否出现了呢&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1377250/201806/1377250-20180628225021906-1930683601.png&quot; alt=&quot;1530194413243&quot;/&gt;&lt;/p&gt;
&lt;p&gt;还是没有出现，别急，往下看！&lt;/p&gt;
&lt;h4 id=&quot;启用xml-注释&quot;&gt;启用XML 注释&lt;/h4&gt;
&lt;p&gt;可使用以下方法启用 XML 注释：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;右键单击“解决方案资源管理器”中的项目，然后选择“属性”&lt;/li&gt;
&lt;li&gt;查看“生成”选项卡的“输出”部分下的“XML 文档文件”框&lt;/li&gt;
&lt;li&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1377250/201806/1377250-20180628225021482-898229025.png&quot; alt=&quot;1530194540621&quot;/&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;启用 XML 注释后会为未记录的公共类型和成员提供调试信息。如果出现很多警告信息  例如，以下消息指示违反警告代码 1591：&lt;/p&gt;
&lt;pre class=&quot;c#&quot;&gt;
&lt;code&gt;warning CS1591: Missing XML comment for publicly visible type or member 'TodoController.GetAll()'&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;如果你有强迫症，想取消警告怎么办呢？可以按照下图所示进行取消&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1377250/201806/1377250-20180628225020872-1455435307.png&quot; alt=&quot;1530194772758&quot;/&gt;&lt;/p&gt;
&lt;p&gt;注意上面生成的xml文档文件的路径，&lt;/p&gt;
&lt;blockquote readability=&quot;9&quot;&gt;
&lt;p&gt; 注意：&lt;/p&gt;
&lt;p&gt;​ 1.对于 Linux 或非 Windows 操作系统，文件名和路径区分大小写。 例如，“SwaggerDemo.xml”文件在 Windows 上有效，但在 CentOS 上无效。&lt;/p&gt;
&lt;p&gt;​ 2.获取应用程序路径，建议采用&lt;code&gt;Path.GetDirectoryName(typeof(Program).Assembly.Location)&lt;/code&gt;这种方式&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre class=&quot;c#&quot;&gt;
&lt;code&gt;//注册Swagger生成器，定义一个和多个Swagger 文档
            services.AddSwaggerGen(c =&amp;gt;
            {
                c.SwaggerDoc(&quot;v1&quot;, new Info
                {
                    Version = &quot;v1&quot;,
                    Title = &quot;yilezhu's API&quot;,
                    Description = &quot;A simple example ASP.NET Core Web API&quot;,
                    TermsOfService = &quot;None&quot;,
                    Contact = new Contact
                    {
                        Name = &quot;依乐祝&quot;,
                        Email = string.Empty,
                        Url = &quot;http://www.cnblogs.com/yilezhu/&quot;
                    },
                    License = new License
                    {
                        Name = &quot;许可证名字&quot;,
                        Url = &quot;http://www.cnblogs.com/yilezhu/&quot;
                    }
                });
                // 为 Swagger JSON and UI设置xml文档注释路径
                var basePath = Path.GetDirectoryName(typeof(Program).Assembly.Location);//获取应用程序所在目录（绝对，不受工作目录影响，建议采用此方法获取路径）
                var xmlPath = Path.Combine(basePath, &quot;SwaggerDemo.xml&quot;);
                c.IncludeXmlComments(xmlPath);
            });&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;重新生成并运行项目查看一下注释出现了没有&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1377250/201806/1377250-20180628225020298-1098164085.png&quot; alt=&quot;1530195392840&quot;/&gt;&lt;/p&gt;
&lt;p&gt;通过上面的操作可以总结出，Swagger UI 显示上述注释代码的 &lt;code&gt;&amp;lt;summary&amp;gt;&lt;/code&gt; 元素的内部文本作为api大的注释！&lt;/p&gt;
&lt;p&gt;当然你还可以将 remarks 元素添加到 &lt;code&gt;Create&lt;/code&gt; 操作方法文档。 它可以补充 &lt;code&gt;&amp;lt;summary&amp;gt;&lt;/code&gt; 元素中指定的信息，并提供更可靠的 Swagger UI。 &lt;code&gt;&amp;lt;remarks&amp;gt;&lt;/code&gt; 元素内容可包含文本、JSON 或 XML。 代码如下：&lt;/p&gt;
&lt;pre class=&quot;c#&quot;&gt;
&lt;code&gt; /// &amp;lt;summary&amp;gt;
 /// 这是一个带参数的get请求
 /// &amp;lt;/summary&amp;gt;
 /// &amp;lt;remarks&amp;gt;
 /// 例子:
 /// Get api/Values/1
 /// &amp;lt;/remarks&amp;gt;
 /// &amp;lt;param name=&quot;id&quot;&amp;gt;主键&amp;lt;/param&amp;gt;
 /// &amp;lt;returns&amp;gt;测试字符串&amp;lt;/returns&amp;gt;          
 [HttpGet(&quot;{id}&quot;)]
 public ActionResult&amp;lt;string&amp;gt; Get(int id)
 {
       return $&quot;你请求的 id 是 {id}&quot;;
 }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;重新生成下项目，当好到SwaggerUI看到如下所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1377250/201806/1377250-20180628225019933-1726527254.png&quot; alt=&quot;1530196170696&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;使用swaggerui测试api接口&quot;&gt;使用SwaggerUI测试api接口&lt;/h3&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;下面我们通过一个小例子通过SwaggerUI调试下接口吧&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;&lt;li&gt;点击一个需要测试的API接口，然后点击Parameters左右边的“Try it out ” 按钮&lt;/li&gt;
&lt;li&gt;在出现的参数文本框中输入参数，如下图所示的，输入参数2&lt;/li&gt;
&lt;li&gt;点击执行按钮，会出现下面所示的格式化后的Response，如下图所示&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1377250/201806/1377250-20180628225019332-1023704559.png&quot; alt=&quot;1530196606406&quot;/&gt;&lt;/p&gt;
&lt;p&gt;好了，今天的在ASP.NET Core WebApi使用Swagger生成api说明文档看这篇就够了的教程就到这里了。希望能够对大家学习在ASP.NET Core中使用Swagger生成api文档有所帮助！&lt;/p&gt;
&lt;h3 id=&quot;总结&quot;&gt;总结&lt;/h3&gt;
&lt;p&gt;​ 本文从手工书写api文档的痛处说起，进而引出Swagger这款自动生成api说明文档的工具！然后通过通俗易懂的文字结合图片为大家演示了如何在一个ASP.NET Core WebApi中使用SwaggerUI生成api说明文档。最后又为大家介绍了一些ASP.NET Core 中Swagger的一些高级用法！希望对大家在ASP.NET Core中使用Swagger有所帮助！&lt;/p&gt;
</description>
<pubDate>Thu, 28 Jun 2018 14:58:00 +0000</pubDate>
<dc:creator>依乐祝</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/yilezhu/p/9241261.html</dc:identifier>
</item>
<item>
<title>Spring Boot OAuth 2.0 客户端 - 不要乱摸</title>
<link>http://www.cnblogs.com/cjsblog/p/9241217.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/cjsblog/p/9241217.html</guid>
<description>&lt;p&gt;&lt;span&gt;在上一篇《&lt;a href=&quot;https://www.cnblogs.com/cjsblog/p/9230990.html&quot; target=&quot;_blank&quot;&gt;OAuth 2.0 授权码请求&lt;/a&gt;》中我们已经可以获取到access_token了，本节将使用客户端来访问远程资源&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;授权服务器负责生成并发放访问令牌（access_token），客户端在访问受保护的资源时会带上访问令牌，资源服务器需要解析并验证客户端带的这个访问令牌。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;如果你的资源服务器同时也是一个授权服务器（资源服务器和授权服务器在一起），那么资源服务器就不需要考虑令牌解析的事情了，否则这一步是不可或缺的。&lt;/span&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;10&quot;&gt;
&lt;p&gt;&lt;span&gt;To use the access token you need a Resource Server (which can be the same as the Authorization Server). Creating a Resource Server is easy, just add @EnableResourceServer and provide some configuration to allow the server to decode access tokens. If your application is also an Authorization Server it already knows how to decode tokens, so there is nothing else to do. If your app is a standalone service then you need to give it some more configuration.&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span&gt;同时，把它们放在一起的话还有一个问题需要注意，我们知道过滤器是顺序执行的，因此需要确保那些通过访问令牌来访问的资源路径不能被主过滤拦下了，需要单独摘出来。&lt;/span&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;9&quot;&gt;
&lt;p&gt;&lt;span&gt;Note: if your Authorization Server is also a Resource Server then there is another security filter chain with lower priority controlling the API resources. Fo those requests to be protected by access tokens you need their paths not to be matched by the ones in the main user-facing filter chain, so be sure to include a request matcher that picks out only non-API resources in the WebSecurityConfigurer above.&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span&gt;关于Spring Security中过滤器的顺序可以参见 &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;a href=&quot;https://docs.spring.io/spring-security/site/docs/5.0.6.RELEASE/reference/htmlsingle/#filter-ordering&quot; target=&quot;_blank&quot;&gt;https://docs.spring.io/spring-security/site/docs/5.0.6.RELEASE/reference/htmlsingle/#filter-ordering&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;这里偷个懒将它们放在一起：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.cjs.example.config;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.context.annotation.Configuration;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.security.config.annotation.web.builders.HttpSecurity;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.security.oauth2.config.annotation.web.configuration.EnableResourceServer;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.security.oauth2.config.annotation.web.configuration.ResourceServerConfigurerAdapter;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.security.oauth2.config.annotation.web.configurers.ResourceServerSecurityConfigurer;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.security.oauth2.provider.expression.OAuth2WebSecurityExpressionHandler;

@Configuration
@EnableResourceServer
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; ResourceServerConfig &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; ResourceServerConfigurerAdapter {

    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; configure(ResourceServerSecurityConfigurer resources) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
        &lt;/span&gt;&lt;span&gt;super&lt;/span&gt;&lt;span&gt;.configure(resources);
    }

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 用于配置对受保护的资源的访问规则
     * 默认情况下所有不在/oauth/**下的资源都是受保护的资源
     * {&lt;/span&gt;&lt;span&gt;@link&lt;/span&gt;&lt;span&gt; OAuth2WebSecurityExpressionHandler}
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; configure(HttpSecurity http) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
        http.requestMatchers().antMatchers(&lt;/span&gt;&quot;/haha/**&quot;&lt;span&gt;)
                .and()
                .authorizeRequests()
                .anyRequest().authenticated();
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;这里配置很简洁，很多都用了默认的设置（比如：resourceId，accessDeniedHandler，sessionManagement等等，具体可参见源码）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;接下来，看看本例中我们被保护的资源，简单的几个资源（都以/haha开头），只为测试：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.cjs.example.controller;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.cjs.example.domain.UserInfo;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.security.access.prepost.PreAuthorize;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.web.bind.annotation.GetMapping;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.web.bind.annotation.RequestMapping;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.web.bind.annotation.RestController;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.security.Principal;

@RestController
@RequestMapping(&lt;/span&gt;&quot;/haha&quot;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; MainController {

    @GetMapping(&lt;/span&gt;&quot;/sayHello&quot;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String sayHello(String name) {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &quot;Hello, &quot; +&lt;span&gt; name;
    }

    @PreAuthorize(&lt;/span&gt;&quot;hasAnyRole('ADMIN')&quot;&lt;span&gt;)
    @RequestMapping(&lt;/span&gt;&quot;/sayHi&quot;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String sayHi() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &quot;hahaha&quot;&lt;span&gt;;
    }

    @RequestMapping(&lt;/span&gt;&quot;/userInfo&quot;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; UserInfo userInfo(Principal principal) {
        UserInfo userInfo &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; UserInfo();
        userInfo.setName(principal.getName());
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; userInfo;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.cjs.example.config;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.beans.factory.annotation.Autowired;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.context.annotation.Bean;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.context.annotation.Configuration;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.data.redis.connection.RedisConnectionFactory;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.security.oauth2.config.annotation.configurers.ClientDetailsServiceConfigurer;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.security.oauth2.config.annotation.web.configuration.AuthorizationServerConfigurerAdapter;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.security.oauth2.config.annotation.web.configuration.EnableAuthorizationServer;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.security.oauth2.config.annotation.web.configurers.AuthorizationServerEndpointsConfigurer;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.security.oauth2.config.annotation.web.configurers.AuthorizationServerSecurityConfigurer;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.security.oauth2.provider.token.TokenStore;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStore;


@Configuration
@EnableAuthorizationServer
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; AuthorizationServerConfig &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; AuthorizationServerConfigurerAdapter {

    @Autowired
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; RedisConnectionFactory connectionFactory;

    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; configure(AuthorizationServerSecurityConfigurer security) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
        &lt;/span&gt;&lt;span&gt;super&lt;/span&gt;&lt;span&gt;.configure(security);
    }

    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; configure(ClientDetailsServiceConfigurer clients) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
        clients.inMemory()
                .withClient(&lt;/span&gt;&quot;my-client-1&quot;&lt;span&gt;)
                .secret(&lt;/span&gt;&quot;$2a$10$0jyHr4rGRdQw.X9mrLkVROdQI8.qnWJ1Sl8ly.yzK0bp06aaAkL9W&quot;&lt;span&gt;)
                .authorizedGrantTypes(&lt;/span&gt;&quot;authorization_code&quot;, &quot;refresh_token&quot;&lt;span&gt;)
                .scopes(&lt;/span&gt;&quot;read&quot;, &quot;write&quot;, &quot;execute&quot;&lt;span&gt;)
                .redirectUris(&lt;/span&gt;&quot;http://localhost:8081/login/oauth2/code/callback&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;                .redirectUris(&quot;&lt;/span&gt;&lt;span&gt;http://www.baidu.com&lt;/span&gt;&lt;span&gt;&quot;);&lt;/span&gt;
&lt;span&gt;    }

    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; configure(AuthorizationServerEndpointsConfigurer endpoints) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
        endpoints.tokenStore(tokenStore());
    }

    @Bean
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; TokenStore tokenStore() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; RedisTokenStore(connectionFactory);
    }


    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
        System.out.println(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt; org.apache.tomcat.util.codec.binary.Base64().encodeAsString(&quot;my-client-1:12345678&quot;&lt;span&gt;.getBytes()));
        System.out.println(java.util.Base64.getEncoder().encodeToString(&lt;/span&gt;&quot;my-client-1:12345678&quot;&lt;span&gt;.getBytes()));
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;和之前相比，我们增加了TokenStore，将Token存储到Redis中。否则默认放在内存中的话每次重启的话token都丢了。下面是一个例子：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/874963/201806/874963-20180628195155876-2103785868.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;&lt;span&gt;application.yml如下：&lt;/span&gt;&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;server:
  port: &lt;/span&gt;8080&lt;span&gt;

spring:
  redis:
    host: &lt;/span&gt;127.0.0.1&lt;span&gt;
    port: &lt;/span&gt;6379&lt;span&gt;

logging:
  level:
    root: debug
    org.springframework.web: debug
    org.springframework.security: debug&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;我们有了资源，有了授权，我们还缺少用户。WebSecurity主要是配置咱们这个项目的一些安全配置，比如用户、认证、授权等等。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.cjs.example.config;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.context.annotation.Bean;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.context.annotation.Configuration;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.security.config.annotation.web.builders.HttpSecurity;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.security.config.annotation.web.builders.WebSecurity;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.security.crypto.password.PasswordEncoder;

@Configuration
@EnableWebSecurity
@EnableGlobalMethodSecurity(prePostEnabled &lt;/span&gt;= &lt;span&gt;true&lt;/span&gt;, proxyTargetClass = &lt;span&gt;true&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; WebSecurityConfig &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; WebSecurityConfigurerAdapter {

    @Override
    &lt;/span&gt;&lt;span&gt;protected&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; configure(AuthenticationManagerBuilder auth) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
        auth.inMemoryAuthentication()
                .withUser(&lt;/span&gt;&quot;zhangsan&quot;&lt;span&gt;)
                .password(&lt;/span&gt;&quot;$2a$10$qsJ/Oy1RmUxFA.YtDT8RJ.Y2kU3U4z0jvd35YmiMOAPpD.nZUIRMC&quot;&lt;span&gt;)
                .roles(&lt;/span&gt;&quot;USER&quot;&lt;span&gt;)
                .and()
                .withUser(&lt;/span&gt;&quot;lisi&quot;&lt;span&gt;)
                .password(&lt;/span&gt;&quot;$2a$10$qsJ/Oy1RmUxFA.YtDT8RJ.Y2kU3U4z0jvd35YmiMOAPpD.nZUIRMC&quot;&lt;span&gt;)
                .roles(&lt;/span&gt;&quot;USER&quot;, &quot;ADMIN&quot;&lt;span&gt;);
    }

    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; configure(WebSecurity web) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
        web.ignoring().antMatchers(&lt;/span&gt;&quot;/css/**&quot;, &quot;/js/**&quot;, &quot;/plugins/**&quot;, &quot;/favicon.ico&quot;&lt;span&gt;);
    }

    @Override
    &lt;/span&gt;&lt;span&gt;protected&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; configure(HttpSecurity http) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
        &lt;/span&gt;&lt;span&gt;super&lt;/span&gt;&lt;span&gt;.configure(http);
    }

    @Bean
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; PasswordEncoder passwordEncoder() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; BCryptPasswordEncoder();
    }


    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
        BCryptPasswordEncoder bCryptPasswordEncoder &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; BCryptPasswordEncoder();
        System.out.println(bCryptPasswordEncoder.encode(&lt;/span&gt;&quot;123456&quot;&lt;span&gt;));
        System.out.println(bCryptPasswordEncoder.encode(&lt;/span&gt;&quot;12345678&quot;&lt;span&gt;));
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;这里多说两句，关于Endpoint和HttpSecurity&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;Endpoint&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;有很多端点我们是可以重写的，比如：/login，/oauth/token等等&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/874963/201806/874963-20180628200225442-290136270.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;HttpSecurity&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;很多初学者可能会不知道怎么配置HttpSecurity，这个时候其实最好的方法就是看代码或者API文档&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;下面一起看一下常见的几个配置&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;我们先来看一下，当我们继承WebSecurityConfigurerAdapter之后它的默认的HttpSecurity是怎么配置的：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; @formatter:off&lt;/span&gt;
    &lt;span&gt;protected&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; configure(HttpSecurity http) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
        logger.debug(&lt;/span&gt;&quot;Using default configure(HttpSecurity). If subclassed this will potentially override subclass configure(HttpSecurity).&quot;&lt;span&gt;);

        http
            .authorizeRequests()
                .anyRequest().authenticated()
                .and()
            .formLogin().and()
            .httpBasic();
    }
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; @formatter:on&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;可以看到，所有的请求都需要授权，并且指定登录的uri是/login，同时支持Basic认证。&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;requestMatchers()&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;这个方法是用于限定只有特定的HttpServletRequest实例才会导致该HttpSecurity被调用，当然是通过请求uri进行限定的了。它后面可以接多个匹配规则。例如：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;@Configuration
@EnableWebSecurity
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; RequestMatchersSecurityConfig &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; WebSecurityConfigurerAdapter {

        @Override
        &lt;/span&gt;&lt;span&gt;protected&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; configure(HttpSecurity http) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
                http
                        .requestMatchers()
                                .antMatchers(&lt;/span&gt;&quot;/api/**&quot;&lt;span&gt;)
                                .antMatchers(&lt;/span&gt;&quot;/oauth/**&quot;&lt;span&gt;)
                                .and()
                        .authorizeRequests()
                                .antMatchers(&lt;/span&gt;&quot;/**&quot;).hasRole(&quot;USER&quot;&lt;span&gt;)
                                .and()
                        .httpBasic();
        }
        
    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;  与上面那段等价
        @Override
        protected void configure(HttpSecurity http) throws Exception {
                http
                        .requestMatchers()
                                .antMatchers(&quot;/api/**&quot;)
                                .and()
                         .requestMatchers()
                                .antMatchers(&quot;/oauth/**&quot;)
                                .and()
                        .authorizeRequests()
                                .antMatchers(&quot;/**&quot;).hasRole(&quot;USER&quot;)
                                .and()
                        .httpBasic();
        }
    &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;

        @Override
        &lt;/span&gt;&lt;span&gt;protected&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; configure(AuthenticationManagerBuilder auth) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
                auth
                        .inMemoryAuthentication()
                                .withUser(&lt;/span&gt;&quot;user&quot;).password(&quot;password&quot;).roles(&quot;USER&quot;&lt;span&gt;);
        }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;formLogin()&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;该方法是用于配置登录相关的设置的。例如：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; @Configuration
 @EnableWebSecurity
 &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; FormLoginSecurityConfig &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; WebSecurityConfigurerAdapter {

        @Override
        &lt;/span&gt;&lt;span&gt;protected&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; configure(HttpSecurity http) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
                http.authorizeRequests().antMatchers(&lt;/span&gt;&quot;/**&quot;).hasRole(&quot;USER&quot;&lt;span&gt;).and().formLogin()
                                .usernameParameter(&lt;/span&gt;&quot;username&quot;) &lt;span&gt;//&lt;/span&gt;&lt;span&gt; default is username&lt;/span&gt;
                                .passwordParameter(&quot;password&quot;) &lt;span&gt;//&lt;/span&gt;&lt;span&gt; default is password&lt;/span&gt;
                                .loginPage(&quot;/authentication/login&quot;) &lt;span&gt;//&lt;/span&gt;&lt;span&gt; default is /login with an HTTP get&lt;/span&gt;
                                .failureUrl(&quot;/authentication/login?failed&quot;) &lt;span&gt;//&lt;/span&gt;&lt;span&gt; default is /login?error&lt;/span&gt;
                                .loginProcessingUrl(&quot;/authentication/login/process&quot;); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; default is /login
                                                                                                      &lt;/span&gt;
&lt;span&gt;        }

        @Override
        &lt;/span&gt;&lt;span&gt;protected&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; configure(AuthenticationManagerBuilder auth) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
                auth.inMemoryAuthentication().withUser(&lt;/span&gt;&quot;user&quot;).password(&quot;password&quot;).roles(&quot;USER&quot;&lt;span&gt;);
        }
 }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;当我们没有配置登录的时候，会用默认的登录，有默认的登录页面，还有好多默认的登录配置。具体可参见 FormLoginConfigurer.loginPage(String)方法&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/874963/201806/874963-20180628202636808-819886861.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;authorizeRequests()&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;该方法允许基于HttpServletRequest进行访问限制，比如角色、权限。例如：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt; @Configuration
 @EnableWebSecurity
 &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; AuthorizeUrlsSecurityConfig &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; WebSecurityConfigurerAdapter {

        @Override
        &lt;/span&gt;&lt;span&gt;protected&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; configure(HttpSecurity http) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
                http.authorizeRequests().antMatchers(&lt;/span&gt;&quot;/admin/**&quot;).hasRole(&quot;ADMIN&quot;&lt;span&gt;)
                                .antMatchers(&lt;/span&gt;&quot;/**&quot;).hasRole(&quot;USER&quot;&lt;span&gt;).and().formLogin();
        }

        @Override
        &lt;/span&gt;&lt;span&gt;protected&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; configure(AuthenticationManagerBuilder auth) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
                auth.inMemoryAuthentication().withUser(&lt;/span&gt;&quot;user&quot;).password(&quot;password&quot;).roles(&quot;USER&quot;&lt;span&gt;)
                                .and().withUser(&lt;/span&gt;&quot;admin&quot;).password(&quot;password&quot;).roles(&quot;ADMIN&quot;, &quot;USER&quot;&lt;span&gt;);
        }
 }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;anyRequest()表示匹配任意请求&lt;/span&gt;&lt;br/&gt;&lt;span&gt;authenticated()表示只有认证通过的用户才可以访问&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;更多可以参见API文档：&lt;a href=&quot;https://docs.spring.io/spring-security/site/docs/5.0.6.RELEASE/api/&quot; target=&quot;_blank&quot;&gt;https://docs.spring.io/spring-security/site/docs/5.0.6.RELEASE/api/&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h3&gt;获取授权码&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;在浏览器中输入http://localhost:8080/oauth/authorize?response_type=code&amp;amp;client_id=my-client-1&amp;amp;redirect_uri=http://www.baidu.com&amp;amp;scope=read&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;然后跳到登录页面，输入用户名和密码登录，然后从重定向url中拿到code&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;换取访问令牌&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/874963/201806/874963-20180628204141605-637235197.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/874963/201806/874963-20180628204149219-1449176256.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;访问资源&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
http://localhost:8080/haha/sayHi?access_token=9f908b8f-06d6-4987-b105-665ca5a4522a

{
    &quot;error&quot;: &quot;access_denied&quot;,
    &quot;error_description&quot;: &quot;不允许访问&quot;
}
这里不允许访问是因为我用zhangsan登录的，他不在ADMIN角色中

http://localhost:8080/haha/userInfo?access_token=9f908b8f-06d6-4987-b105-665ca5a4522a

{
    &quot;name&quot;: &quot;zhangsan&quot;
}


http://localhost:8080/haha/sayHello?name=jack&amp;amp;access_token=9f908b8f-06d6-4987-b105-665ca5a4522a

Hello, jack
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;访问GitHub&lt;/h2&gt;
&lt;h3&gt;参照SpringBoot官网的示例&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;https://github.com/spring-projects/spring-boot/tree/master/spring-boot-samples/spring-boot-sample-oauth2-client&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;https://github.com/spring-projects&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;https://github.com/spring-projects/spring-boot&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;可以将代码拷下来 &lt;span&gt;https://github.com/spring-projects/spring-boot.git&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;第一步  将我们的客户端注册到GitHub上去&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/874963/201806/874963-20180628205957060-1858550873.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;GitHub的OAuth文档在这里  https://developer.github.com/apps/building-oauth-apps/authorizing-oauth-apps/&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;第二步  浏览器输入http://localhost:8080/后出现如下界面&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/874963/201806/874963-20180628205405841-606869083.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;第三步  点击任意一个连接，跳GitHub登录&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/874963/201806/874963-20180628210326910-1837678532.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;授权以后就可以重定向到我们的localhost:8080/了&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/874963/201806/874963-20180628210420966-418694029.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;主要配置如下：&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
APP-CLIENT-ID: &lt;span&gt;7e304109d91ed8e9bf72&lt;/span&gt;
APP-CLIENT-SECRET: 003daa47fa0f350d181c8741d8bac6833aef568a

spring:
  security:
    oauth2:
      client:
        registration:
          github-client-1:
            client-id: ${APP-CLIENT-ID}
            client-secret: ${APP-CLIENT-SECRET}
            client-name: Github user
            provider: github
            scope: user
            redirect-uri-template: http://cjshuashengke.6655.la:11664/login/oauth2/code/github
          github-client-2:
            client-id: ${APP-CLIENT-ID}
            client-secret: ${APP-CLIENT-SECRET}
            client-name: Github email
            provider: github
            scope: user:email
            redirect-uri-template: http://cjshuashengke.6655.la:11664/login/oauth2/code/github
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;pom.xml如下&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;?&lt;/span&gt;&lt;span&gt;xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;?&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;project &lt;/span&gt;&lt;span&gt;xmlns&lt;/span&gt;&lt;span&gt;=&quot;http://maven.apache.org/POM/4.0.0&quot;&lt;/span&gt;&lt;span&gt; xmlns:xsi&lt;/span&gt;&lt;span&gt;=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt;&lt;span&gt;
    xsi:schemaLocation&lt;/span&gt;&lt;span&gt;=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;modelVersion&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;4.0.0&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;modelVersion&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;sample.oauth2.client&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-boot-sample-oauth2-client&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;0.0.1-SNAPSHOT&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;packaging&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;jar&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;packaging&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;parent&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-boot-starter-parent&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;2.0.3.RELEASE&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;relativePath&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt; &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; lookup parent from repository &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;parent&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;properties&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;project.build.sourceEncoding&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;UTF-8&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;project.build.sourceEncoding&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;project.reporting.outputEncoding&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;UTF-8&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;project.reporting.outputEncoding&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;java.version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;1.8&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;java.version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;properties&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependencies&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; Compile &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-boot-starter-security&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-boot-starter-web&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.security&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-security-config&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.security&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-security-oauth2-client&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.security&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-security-oauth2-jose&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; Test &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.apache.httpcomponents&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;httpclient&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;scope&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;test&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;scope&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-boot-starter-test&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;scope&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;test&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;scope&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependencies&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;build&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;plugins&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;plugin&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-boot-maven-plugin&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;plugin&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;plugins&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;build&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;project&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;启动类&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; sample.oauth2.client;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.boot.SpringApplication;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; SampleOAuth2ClientApplication {

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
        SpringApplication.run(SampleOAuth2ClientApplication.&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;);
    }

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;ExampleController&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; sample.oauth2.client;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.security.Principal;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.web.bind.annotation.RequestMapping;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.web.bind.annotation.RestController;

@RestController
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; ExampleController {

    @RequestMapping(&lt;/span&gt;&quot;/&quot;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String email(Principal principal) {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &quot;Hello &quot; +&lt;span&gt; principal.getName();
    }

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;访问自定义的Provider&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;在这里我遇到一些问题，将provider换成自己的localhost:8080就总是报错，不知道什么原因。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;想想还是写出来吧，希望有大神看到帮我指点迷津。。。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;首先需要明确一点：Spring Security OAuth2提供了一套客户端实现，Spring Boot也有它自己的方式。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;这里我是按照Spring Boot的那一套来的&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Spring Boot最大的优点莫过于自动配置了&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;只要在你的classpath下有&lt;span&gt;spring-security-oauth2-client&lt;/span&gt;，那么将会自动配置OAuth2 Client。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;配置的属性用的是&lt;span class=&quot;fontstyle0&quot;&gt;OAuth2ClientProperties&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;具体参见 &lt;a href=&quot;https://docs.spring.io/spring-boot/docs/2.0.3.RELEASE/reference/htmlsingle/#boot-features-security-oauth2&quot; target=&quot;_blank&quot;&gt;https://docs.spring.io/spring-boot/docs/2.0.3.RELEASE/reference/htmlsingle/#boot-features-security-oauth2&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;例如：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/874963/201806/874963-20180628212609911-1737630144.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;默认情况下，Spring Security的OAuth2LoginAuthenticationFilter只处理URL匹配/login/oauth2/code/*的请求。&lt;/p&gt;
&lt;p&gt;如果你想自定义redirect-uri-template可以在WebSecurityConfigurerAdapter中配置。例如：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public class OAuth2LoginSecurityConfig extends WebSecurityConfigurerAdapter {
　　@Override
　　protected void configure(HttpSecurity http) throws Exception {
　　　　http
　　　　　　.authorizeRequests()
　　　　　　.anyRequest().authenticated()
　　　　　　.and()
　　　　　　.oauth2Login()
　　　　　　.redirectionEndpoint()
　　　　　　.baseUri(&quot;/custom-callback&quot;);
　　}
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;其实，不仅仅可以自定义重定向端点，其它的比如授权端点也是可以自定义的，可参见源码&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/874963/201806/874963-20180628213218460-200309379.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;下面重点说下我的配置&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;&lt;span&gt;pom.xml&lt;/span&gt;&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;?&lt;/span&gt;&lt;span&gt;xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;?&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;project &lt;/span&gt;&lt;span&gt;xmlns&lt;/span&gt;&lt;span&gt;=&quot;http://maven.apache.org/POM/4.0.0&quot;&lt;/span&gt;&lt;span&gt; xmlns:xsi&lt;/span&gt;&lt;span&gt;=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt;&lt;span&gt;
    xsi:schemaLocation&lt;/span&gt;&lt;span&gt;=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;modelVersion&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;4.0.0&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;modelVersion&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;com.cjs.example&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;cjs-oauth2-code-client&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;0.0.1-SNAPSHOT&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;packaging&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;jar&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;packaging&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;cjs-oauth2-code-client&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;parent&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-boot-starter-parent&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;2.0.2.RELEASE&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;relativePath&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt; &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; lookup parent from repository &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;parent&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;properties&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;project.build.sourceEncoding&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;UTF-8&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;project.build.sourceEncoding&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;project.reporting.outputEncoding&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;UTF-8&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;project.reporting.outputEncoding&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;java.version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;1.8&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;java.version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;properties&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependencies&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-boot-starter-security&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-boot-starter-web&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.security&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-security-config&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.security&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-security-oauth2-client&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.security&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-security-oauth2-jose&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.security.oauth&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-security-oauth2&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;2.3.3.RELEASE&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-boot-starter-test&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;scope&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;test&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;scope&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependencies&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;build&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;plugins&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;plugin&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-boot-maven-plugin&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;plugin&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;plugins&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;build&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;


&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;project&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;application.yml&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
server:
  port: 8081

spring:
  security:
    oauth2:
      client:
        registration:
          my-client-1:
            client-id: my-client-1
            client-secret: 12345678
            client-name: ABC
            provider: my-oauth-provider
            scope: read
            redirect-uri-template: http://localhost:8081/login/oauth2/code/callback
            client-authentication-method: basic
            authorization-grant-type: authorization_code
        provider:
          my-oauth-provider:
            authorization-uri: http://localhost:8080/oauth/authorize
            token-uri: http://localhost:8080/oauth/token
logging:
  level:
    root: debug
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;分别启动两个项目&lt;/span&gt;&lt;/p&gt;
&lt;h4&gt;&lt;span&gt;浏览器输入http://localhost:8080/test&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/874963/201806/874963-20180628214140668-1688399538.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h4&gt;&lt;span&gt;点击链接ABC&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/874963/201806/874963-20180628214208847-935221613.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h4&gt;输入zhangsan/123456，结果报错了&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/874963/201806/874963-20180628214358189-444233684.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;查看控制台错误信息&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
org.springframework.security.oauth2.core.OAuth2AuthenticationException: [authorization_request_not_found] 
        at org.springframework.security.oauth2.client.web.OAuth2LoginAuthenticationFilter.attemptAuthentication(OAuth2LoginAuthenticationFilter.java:146)
        at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:212)
        at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) [spring-security-web-5.0.5.RELEASE.jar:5.0.5.RELEASE]
        at org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(OAuth2AuthorizationRequestRedirectFilter.java:128)
        at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) [spring-web-5.0.6.RELEASE.jar:5.0.6.RELEASE]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;打端点，发现重定向过来的HttpServletRequest中session=null&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;正常情况下session不应该是null，而且属性中还应该有一个key为org.springframework.security.oauth2.client.web.HttpSessionOAuth2AuthorizationRequestRepository.AUTHORIZATION_REQUEST的属性的&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/874963/201806/874963-20180628215213487-1263575107.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/874963/201806/874963-20180628215227039-1022092950.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/874963/201806/874963-20180628215232758-606974457.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;后来看根据Spring Security那一套说用@EnableOAuth2Client&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;利用OAuth2RestTemplate来访问资源，具体参见《&lt;a href=&quot;https://www.cnblogs.com/cjsblog/p/9184173.html&quot; target=&quot;_blank&quot;&gt;Spring Security OAuth 2.0&lt;/a&gt;》&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;但是我发现加了这些问题依旧，根本问题是服务端带着code重定向到客户端的时候就失败了&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;在客户端收到的重定向请求中session为null&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;不知道大家有没有遇到这种问题，求路过的大神们支招。。。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;下面贴出客户端完整代码&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.cjs.example.controller;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.beans.factory.annotation.Autowired;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.security.oauth2.client.OAuth2RestTemplate;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.stereotype.Controller;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.web.bind.annotation.GetMapping;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.security.Principal;

@Controller
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; MainController {

    @Autowired
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; OAuth2RestTemplate oAuth2RestTemplate;

    @GetMapping(&lt;/span&gt;&quot;/test&quot;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String test(Principal principal) {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &quot;Hello, &quot; +&lt;span&gt; principal.getName();
    }

    @GetMapping(&lt;/span&gt;&quot;/hello&quot;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String hello() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; oAuth2RestTemplate.getForObject(&quot;http://localhost:8080/sayHi&quot;, String.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;);
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.cjs.example;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.beans.factory.annotation.Autowired;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.boot.SpringApplication;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.boot.autoconfigure.SpringBootApplication;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.security.oauth2.client.OAuth2ClientContext;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.security.oauth2.client.OAuth2RestTemplate;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.security.oauth2.client.token.grant.code.AuthorizationCodeResourceDetails;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.context.annotation.Bean;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.security.oauth2.config.annotation.web.configuration.EnableOAuth2Client;

@EnableOAuth2Client
@SpringBootApplication
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; CjsOauth2CodeClientApplication {

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
        SpringApplication.run(CjsOauth2CodeClientApplication.&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;, args);
    }

    @Autowired
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; OAuth2ClientContext oauth2ClientContext;

    @Bean
     &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; OAuth2RestTemplate restTemplate() {
         &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; OAuth2RestTemplate(&lt;span&gt;new&lt;/span&gt;&lt;span&gt; AuthorizationCodeResourceDetails(), oauth2ClientContext);
     }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;工程截图&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/874963/201806/874963-20180628220631430-738182282.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;代码上传至 https://github.com/chengjiansheng/cjs-oauth2-example.git&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;参考&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;&lt;a href=&quot;https://docs.spring.io/spring-security-oauth2-boot/docs/2.0.1.RELEASE/reference/pdf/spring-security-oauth2-boot-reference.pdf&quot; target=&quot;_blank&quot;&gt;https://docs.spring.io/spring-security-oauth2-boot/docs/2.0.1.RELEASE/reference/pdf/spring-security-oauth2-boot-reference.pdf&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;a href=&quot;https://docs.spring.io/spring-security/site/docs/5.0.6.RELEASE/reference/htmlsingle/#oauth2login-advanced-login-page&quot; target=&quot;_blank&quot;&gt;https://docs.spring.io/spring-security/site/docs/5.0.6.RELEASE/reference/htmlsingle/#oauth2login-advanced-login-page&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;a href=&quot;https://docs.spring.io/spring-security/site/docs/5.0.6.RELEASE/api/&quot; target=&quot;_blank&quot;&gt;https://docs.spring.io/spring-security/site/docs/5.0.6.RELEASE/api/&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;a href=&quot;https://github.com/spring-projects/spring-boot/tree/master/spring-boot-samples&quot; target=&quot;_blank&quot;&gt;https://github.com/spring-projects/spring-boot/tree/master/spring-boot-samples&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;a href=&quot;https://segmentfault.com/a/1190000012309216&quot; target=&quot;_blank&quot;&gt;https://segmentfault.com/a/1190000012309216&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;a href=&quot;https://www.jianshu.com/p/bf5dd33aea6d?utm_source=oschina-app&quot; target=&quot;_blank&quot;&gt;https://www.jianshu.com/p/bf5dd33aea6d?utm_source=oschina-app&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;a href=&quot;https://www.aliyun.com/jiaocheng/800606.html&quot; target=&quot;_blank&quot;&gt;https://www.aliyun.com/jiaocheng/800606.html&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;a href=&quot;https://blog.csdn.net/peter1220/article/details/52413250&quot; target=&quot;_blank&quot;&gt;https://blog.csdn.net/peter1220/article/details/52413250&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;a href=&quot;https://blog.csdn.net/weixin_42033269/article/details/80086422&quot; target=&quot;_blank&quot;&gt;https://blog.csdn.net/weixin_42033269/article/details/80086422&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;

</description>
<pubDate>Thu, 28 Jun 2018 14:37:00 +0000</pubDate>
<dc:creator>不要乱摸</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/cjsblog/p/9241217.html</dc:identifier>
</item>
<item>
<title>RabbitMQ详解（一）------简介与安装 - YSOcean</title>
<link>http://www.cnblogs.com/ysocean/p/9227233.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/ysocean/p/9227233.html</guid>
<description>&lt;p&gt;　　RabbitMQ 这个消息中间件，其实公司最近的项目中有用到，但是一直没有系统的整理，最近看完了《RabbitMQ实战  高效部署分布式消息队列》这本书，所以顺便写写。&lt;/p&gt;
&lt;p&gt;　　那么关于 RabbitMQ 是什么？大家可以首先参考官网：&lt;a href=&quot;http://www.rabbitmq.com/&quot; target=&quot;_blank&quot;&gt;http://www.rabbitmq.com&lt;/a&gt; 。这里我大概的介绍一下：&lt;/p&gt;
&lt;p&gt;　　&lt;strong&gt;RabbitMQ  是一个在AMQP协议标准基础上完整的，可服用的企业消息系统。它遵循Mozilla Public License开源协议，采用 Erlang 实现的工业级的消息队列(MQ)服务器。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　&lt;/strong&gt;①、AMQP，即Advanced Message Queuing Protocol,一个提供统一消息服务的应用层标准高级消息队列协议,是应用层协议的一个开放标准,为面向消息的中间件设计。基于此协议的客户端与消息中间件可传递消息，并不受客户端/中间件不同产品，不同的开发语言等条件的限制。关于 AMQP 的介绍可以参考：&lt;a href=&quot;https://en.wikipedia.org/wiki/Advanced_Message_Queuing_Protocol&quot; target=&quot;_blank&quot;&gt;https://en.wikipedia.org/wiki/Advanced_Message_Queuing_Protocol&lt;/a&gt;，还有官方网站：&lt;a href=&quot;http://www.amqp.org/confluence/display/AMQP/Advanced+Message+Queuing+Protocol&quot; target=&quot;_blank&quot;&gt;http://www.amqp.org/confluence/display/AMQP/Advanced+Message+Queuing+Protocol&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;　　②、开源。&lt;/p&gt;
&lt;p&gt;　　③、使用 Erlang 语言编写，这是一种面向并发的编程语言，目的是创造一种可以应对大规模并发活动的编程语言和运行环境。&lt;/p&gt;
&lt;p&gt;　　接下来我们介绍如何在 Linux 系统上安装 RabbitMQ。&lt;/p&gt;
&lt;h3&gt;1、安装 Erlang&lt;/h3&gt;
&lt;p&gt;　　就想我们编写Java引用程序需要安装 JDK一样，安装 RabbitMQ ,我们也需要安装 Erlang 。&lt;/p&gt;
&lt;p&gt;　　&lt;strong&gt;①、下载 erlang 安装包&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1120165/201806/1120165-20180626224928551-1549800230.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　将安装包下载到 /home/erlang 目录下。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; wget http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;www.erlang.org/download/otp_src_R16B02.tar.gz&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　&lt;strong&gt;②、解压&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; tar -zxvf otp_src_R16B02.tar.gz
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　&lt;strong&gt;③、编译安装&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　首先进入解压的文件目录，然后安装如下插件&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1120165/201806/1120165-20180627080949731-273357528.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　接着设置编译目录为 /usr/local/erlang&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1120165/201806/1120165-20180627081244875-918373099.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　最后执行 make  和 make install 命令即可。&lt;/p&gt;
&lt;p&gt;　　全部命令步骤为：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
1&lt;span&gt;、cd otp_src_R16B02
&lt;/span&gt;2、yum -y install make gcc gcc-c++ kernel-devel m4 ncurses-devel openssl-&lt;span&gt;devel
&lt;/span&gt;3、./configure --prefix=/usr/local/erlang --enable-hipe --enable-threads --enable-smp-support --enable-kernel-&lt;span&gt;poll
&lt;/span&gt;4&lt;span&gt;、make
&lt;/span&gt;5、make install
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　&lt;strong&gt;④、配置环境变量&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　通过 vim /etc/profile 命令进入文件，然后敲入如下代码&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1120165/201806/1120165-20180627082411439-1621106617.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　最后通过如下命令使环境变量生效：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
source /etc/profile
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　&lt;strong&gt;⑤、验证&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　在任意目录下输入 erl 命令，出现如下情况，则 erlang 安装成功：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1120165/201806/1120165-20180627082650196-431113606.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;2、安装 RabbitMQ&lt;/h3&gt;
&lt;p&gt;　　&lt;strong&gt;①、下载安装包&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　创建 /home/rabbitmq 目录，在该目录下执行如下命令：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
wget http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;www.rabbitmq.com/releases/rabbitmq-server/v3.1.5/rabbitmq-server-3.1.5.tar.gz &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　&lt;strong&gt;②、解压&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
tar -zxvf rabbitmq-server-3.1.5.tar.gz
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　&lt;strong&gt;③、编译安装&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; cd rabbitmq-server-3.1.5 
&lt;span&gt;2&lt;/span&gt; yum -&lt;span&gt;y install xmlto 
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; &lt;span&gt;make
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; make install TARGET_DIR=/opt/mq/rabbitmq SBIN_DIR=/opt/mq/rabbitmq/sbin MAN_DIR=/opt/mq/rabbitmq/man
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　将rabbitmq编译到/opt/mq/rabbitmq目录。&lt;/p&gt;
&lt;p&gt;　　&lt;strong&gt;④、开启 web 插件&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; cd /opt/mq/rabbitmq/&lt;span&gt;sbin 
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; mkdir /etc/rabbitmq/ 
&lt;span&gt;3&lt;/span&gt; ./rabbitmq-plugins enable rabbitmq_management
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;3、启动和关闭RabbitMQ&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; 启动监控管理器：rabbitmq-&lt;span&gt;plugins enable rabbitmq_management
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; 关闭监控管理器：rabbitmq-&lt;span&gt;plugins disable rabbitmq_management
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; 启动rabbitmq：rabbitmq-&lt;span&gt;service start
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; 关闭rabbitmq：rabbitmq-&lt;span&gt;service stop
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt; &lt;span&gt;查看所有的队列：rabbitmqctl list_queues
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt; &lt;span&gt;清除所有的队列：rabbitmqctl reset
&lt;/span&gt;&lt;span&gt;7&lt;/span&gt; &lt;span&gt;关闭应用：rabbitmqctl stop_app
&lt;/span&gt;&lt;span&gt;8&lt;/span&gt; 启动应用：rabbitmqctl start_app
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　通过第 3 条命令启动rabbitmq 服务，然后在浏览器上输入 &lt;/p&gt;

&lt;p&gt;　　出现如下界面即可。其中 ip 是安装 rabbitmq 的机器ip地址，15672 是rabbitmq的默认端口。&lt;/p&gt;
&lt;p&gt;　　ps:如果不能打开如下画面，可能是防火墙没有关闭。centos6 关闭防火墙命令：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;关闭命令：  service iptables stop 
永久关闭防火墙：chkconfig iptables off
查看防火墙状态：service iptables status&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1120165/201806/1120165-20180627221815907-104225812.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　默认用户名和密码都是 guest。我们可以用 guest 登录：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1120165/201806/1120165-20180627221944051-1470091069.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
</description>
<pubDate>Thu, 28 Jun 2018 13:42:00 +0000</pubDate>
<dc:creator>YSOcean</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/ysocean/p/9227233.html</dc:identifier>
</item>
<item>
<title>vuex的使用 - 只会一点前端</title>
<link>http://www.cnblogs.com/jsydb/p/9240741.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/jsydb/p/9240741.html</guid>
<description>&lt;p&gt;&lt;span&gt;vuex说白了就是vue中的数据管理仓库,为开发者的数据操作,例如购物车类似的操作,带来了极大的便捷,最近也在使用vuex整理了如下的学习心得,希望能帮大家解决问题.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;vuex的基础使用&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;1.下载好vue.js和vuex.js文件,并引入到html页面中去&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1426400/201806/1426400-20180628192107610-2032763834.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;2.对vuex的基础配置&lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
const store = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Vuex.Store({ 
        state:{ 
            count:&lt;/span&gt;0&lt;span&gt;
        },
        mutations:{
            increment:&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; (state) {
                state.count&lt;/span&gt;++&lt;span&gt;;
            },
            descrement:&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; (state) {
                state.count&lt;/span&gt;--&lt;span&gt;
            }
        }
    });&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;store是新创建vuex中对的store对象&lt;/p&gt;
&lt;p&gt;state是专门来管理数据的仓库&lt;/p&gt;
&lt;p&gt;mutations是用来处理各种判断,异步请求,流程控制,也就是说要干什么事情,在这里监听了两个action名,只有接受到相对应的action名,就会触发函数,对state中的count进行操作&lt;/p&gt;
&lt;p&gt;3.html代码&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;app&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
    count的值:{{count}}
    &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;button &lt;/span&gt;&lt;span&gt;@click&lt;/span&gt;&lt;span&gt;=&quot;increment&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;count加1&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;button&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;button &lt;/span&gt;&lt;span&gt;@click&lt;/span&gt;&lt;span&gt;=&quot;descrement&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;count减1&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;button&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;button &lt;/span&gt;&lt;span&gt;@click&lt;/span&gt;&lt;span&gt;=&quot;checkAsyncAdd&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;延迟加1&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;button&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;button &lt;/span&gt;&lt;span&gt;@click&lt;/span&gt;&lt;span&gt;=&quot;checkAsyncOdd&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;延迟减1&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;button&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;每一个按钮绑定一个事件,实现对count的改变&lt;/p&gt;
&lt;p&gt;4.vue实例中代码的编写&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Vue({
        computed:{
            count(){
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; store.state.count
            }
        },
        methods:{
            increment:&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
                store.commit(&lt;/span&gt;&quot;increment&quot;&lt;span&gt;)
            },
            descrement:&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
                store.commit(&lt;/span&gt;&quot;descrement&quot;&lt;span&gt;)
            },
            checkAsyncAdd:&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
               setTimeout(&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
                   store.commit(&lt;/span&gt;&quot;increment&quot;&lt;span&gt;)
               },&lt;/span&gt;1000&lt;span&gt;)
            },
            checkAsyncOdd:&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
                setTimeout(&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
                    store.commit(&lt;/span&gt;&quot;descrement&quot;&lt;span&gt;)
                },&lt;/span&gt;1000&lt;span&gt;)
            }
        }
    }).$mount(&lt;/span&gt;&quot;#app&quot;)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;使用计算属性来实时元素标签更新对state.count中的引用,(因为state是一个对象,那么count就是其属性,所以在vuex的store中count变化,由于是地址引用,那么count就在全局进行变化)&lt;/p&gt;
&lt;pre&gt;
&lt;span&gt;increment函数执行通过store中的commit属性发送&quot;increment&quot;action名,就可以实现了state中count的改变,其他的方法类似&lt;/span&gt;
&lt;/pre&gt;

&lt;p&gt;&lt;span&gt;在vue项目中使用vuex&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;1没有安装vuex就使用cnpm/npm i vuex -D  安装好vuex&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;2.创建store.js文件(随便创建在哪个目录下,我推荐跟main.js在同一目录下),设置如下内容&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;49&quot;&gt;
&lt;pre&gt;
import Vue from 'vue'&lt;span&gt;
import Vuex from &lt;/span&gt;'vuex'&lt;span&gt;
Vue.use(Vuex); &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;全局使用vuex&lt;/span&gt;
const state = { &lt;span&gt;//&lt;/span&gt;&lt;span&gt;定义数据仓&lt;/span&gt;
  count :10&lt;span&gt;
};
const mutations &lt;/span&gt;= { &lt;span&gt;//&lt;/span&gt;&lt;span&gt;处理数据(状态)变化&lt;/span&gt;
  ydb(state){  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;&quot;ydb&quot;和&quot;ydb1&quot;都是action名&lt;/span&gt;
    state.count++&lt;span&gt;;
  },
  ydb1(state){
    state.count&lt;/span&gt;--&lt;span&gt;;
  }
};
const actions&lt;/span&gt;=&lt;span&gt; {
  increment:({commit})&lt;/span&gt;=&amp;gt;{  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;&quot;increment&quot;是接受前端页面传过来的事件名,下面的也是&lt;/span&gt;
      commit(&quot;ydb&quot;) &lt;span&gt;//&lt;/span&gt;&lt;span&gt;发送actions名,下面类似&lt;/span&gt;
&lt;span&gt;  },
  descrement:({commit})&lt;/span&gt;=&amp;gt;&lt;span&gt;{
    console.log(arguments);
    commit(&lt;/span&gt;&quot;ydb1&quot;&lt;span&gt;);
  },
  checkOdd:({commit,state})&lt;/span&gt;=&amp;gt;&lt;span&gt;{
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(state.count%2===0&lt;span&gt;){
      commit(&lt;/span&gt;&quot;ydb&quot;&lt;span&gt;)
    }
  },
  checkAsync:({commit})&lt;/span&gt;=&amp;gt;&lt;span&gt;{
   &lt;/span&gt;&lt;span&gt;new&lt;/span&gt; Promise((resolve)=&amp;gt;&lt;span&gt;{
     setTimeout(&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
       commit(&lt;/span&gt;&quot;ydb&quot;&lt;span&gt;);
       resolve();
     },&lt;/span&gt;1000&lt;span&gt;)
   })
  }
};
const getters &lt;/span&gt;= { &lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置仓库数去获取对象,方便页面获取仓库中的值&lt;/span&gt;
  count:&lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; state.count
  }
};
export &lt;/span&gt;&lt;span&gt;default&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; Vuex.Store({ &lt;span&gt;//&lt;/span&gt;&lt;span&gt;导出一个新的vuex.Store对象&lt;/span&gt;
&lt;span&gt;  state,
  actions,
  mutations,
  getters
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;并返回定义好的各种功能对象,注意名称必须按照我这样子写,如state写成states会报错&lt;/span&gt;
})
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;3 在项目主文件main.js中引入vuex&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
import Vue from 'vue'&lt;span&gt;
import App from &lt;/span&gt;'./App.vue'
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;import Loading from './components/loading/index'&lt;/span&gt;
import store from  './store' //引入创建好的store对象
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;Vue.use(Loading);&lt;/span&gt;
&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Vue({
  store,
  el: &lt;/span&gt;'#app'&lt;span&gt;,
  render: h &lt;/span&gt;=&amp;gt;&lt;span&gt; h(App)
})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;4.APP.vue文件中编写如下代码&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;52&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;template&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;app&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
   &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p &lt;/span&gt;&lt;span&gt;@click&lt;/span&gt;&lt;span&gt;=&quot;get&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;welcome to 蚂蝗俱乐部&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Loading &lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Loading&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
    {{count}}
    &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;button &lt;/span&gt;&lt;span&gt;@click&lt;/span&gt;&lt;span&gt;=&quot;increment&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;count加1&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;button&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;button &lt;/span&gt;&lt;span&gt;@click&lt;/span&gt;&lt;span&gt;=&quot;descrement&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;count减1&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;button&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;button &lt;/span&gt;&lt;span&gt;@click&lt;/span&gt;&lt;span&gt;=&quot;checkOdd&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;偶数才能点击+&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;button&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;button &lt;/span&gt;&lt;span&gt;@click&lt;/span&gt;&lt;span&gt;=&quot;checkAsync&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;点击异步+&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;button&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;template&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
import {mapGetters,mapActions} from &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;vuex&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;通过es6中的语法,对vuex进行解构赋值,注意名称必须这样写 关于es6的更多介绍,请查看我其他随笔&lt;/span&gt;
&lt;span&gt;export &lt;/span&gt;&lt;span&gt;default&lt;/span&gt;&lt;span&gt; {
  name: &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;app&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
  data () {
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; {}
  },
  computed: { &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;第一种写法:获取在main.js中全局使用store中state中count的值&lt;/span&gt;
&lt;span&gt;    ...mapGetters([
      &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;count&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
    ])
  },
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;  computed:mapGetters( //第二种写法:作用同上&lt;/span&gt;&lt;span&gt;
//&lt;/span&gt;&lt;span&gt;      ['count']&lt;/span&gt;&lt;span&gt;
//&lt;/span&gt;&lt;span&gt;  ),&lt;/span&gt;
&lt;span&gt;  methods: {
    ...mapActions([ &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;第一种写法:向store对象中的actions发送事件名&lt;/span&gt;
      &lt;span&gt;'&lt;/span&gt;&lt;span&gt;increment&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;descrement&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;checkOdd&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;checkAsync&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
    ]),
    get(){
      alert(&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;)
    }
  },
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;  methods:mapActions([ //第二种写法:向store对象中的actions发送事件名&lt;/span&gt;&lt;span&gt;
//&lt;/span&gt;&lt;span&gt;      'increment', 'descrement', &quot;checkOdd&quot;, &quot;checkAsync&quot;&lt;/span&gt;&lt;span&gt;
//&lt;/span&gt;&lt;span&gt;    ]),&lt;/span&gt;
&lt;span&gt;  
}
&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;vuex模块化&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;个人感觉使用vue项目中使用vuex的方法,所有东西都在store.js中,这样页面显的比较代码拥堵,在官网中,作者提供了vuex模块化的思路,自己也把上面的代码改造了一下,实现了一个小的demo&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;1.在vue项目中创建store文件夹,创建如下文件&lt;/span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1426400/201806/1426400-20180628210704001-602775785.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;actions.js相当于之前的actions对象,用来监听不同的事件名来发送不同的actions名&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;41&quot;&gt;
&lt;pre class=&quot;brush:javascript;gutter:true;&quot;&gt;
import * as types from './types' //导入actions名集合
import state from './module'//导入数据仓库
export default { //到处一个发送actions名的对象
  increment:({commit})=&amp;gt;{ //&quot;increment&quot;为前端页面在mapActions中传递过来的事件名,监听到就发送对应的actions名,下面的类似
    commit(types.YDB);
  },
  descrement:({commit})=&amp;gt;{
    commit(types.YDB1);
  },
  checkOdd:({commit})=&amp;gt;{
    if(state.count%2===0){
      commit(types.YDB);
    }

  },
  checkAsync:({commit})=&amp;gt;{
    new Promise((resovle)=&amp;gt;{
      setTimeout(function () {
        commit(types.YDB);
        resovle()
      },1000)
    })

  }
}
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;getters.js相当于之前的getters对象&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:javascript;gutter:true;&quot;&gt;
export default { //返回数据仓库中的count值
  count:(state)=&amp;gt;{
    return state.count
  }
}
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;index就是主文件,负责到处vuex所必须要的配置好之后的对象&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;37&quot;&gt;
&lt;pre class=&quot;brush:javascript;gutter:true;&quot;&gt;
import Vue from 'vue'
import Vuex from 'vuex'
import mutations from './mutations'
import actions from './actions'
Vue.use(Vuex); //全局使用vuex
export  default new Vuex.Store({
  actions,   
  modules:{
    mutations //这里的mutations里面包含了多个对象,使用modules可以转化格式导出
  }
})
//导出配置好的vuex对象
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;module.js相当于之前的state对象,用来存放数据,就是一个数据仓库&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:javascript;gutter:true;&quot;&gt;
const state = {
  count:20
};
export default state //导出数据仓库
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;types.js其实在官方中是没有的,但是大多数人的项目中是用的,一般用来放置一些acction名集合&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:javascript;gutter:true;&quot;&gt;
export const YDB = &quot;YDB&quot;;
export const YDB1 = &quot;YDB1&quot;;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　如上所示,已经成功的把vuex模块化,这样不同的操作,只需要找到不同的js文件就可以进行处理,更符合模块化开发&lt;/p&gt;
&lt;p&gt;其中main.js中的内容如下&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;38&quot;&gt;
&lt;pre class=&quot;brush:javascript;gutter:true;&quot; readability=&quot;5&quot;&gt;
import Vue from 'vue'
import App from './App.vue'
import Loading from './components/loading/index'
import store from  './store/index' //引入store文件夹中的index主文件
Vue.use(Loading);
new Vue({
  store, //全局使用
  el: '#app',
  render: h =&amp;gt; h(App)
})　　&lt;p&gt;//注 APP.vue中的代码没有发生任何改变
&lt;/p&gt;&lt;/pre&gt;&lt;/div&gt;

</description>
<pubDate>Thu, 28 Jun 2018 13:25:00 +0000</pubDate>
<dc:creator>只会一点前端</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/jsydb/p/9240741.html</dc:identifier>
</item>
<item>
<title>工作流技术分析 - 心如直水</title>
<link>http://www.cnblogs.com/CREN/p/9240684.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/CREN/p/9240684.html</guid>
<description>&lt;div class=&quot;Section1&quot; readability=&quot;36.650870203397&quot;&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;center&quot;&gt;&lt;strong&gt;&lt;span&gt;工作流技术分析&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;strong&gt;&lt;span&gt;前言&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span&gt;基于上篇文章我决定写篇文章对工作流技术进行剖析和解读，授之以鱼不如授之以渔。所以决定讲讲原理，以便让大家对工作流有更深的了解。最早工作流是由外国人研发，慢慢被引近国内，我接触比较早的是&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;Java&lt;/span&gt;&lt;span&gt;的工作流如&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;Jbpm&lt;/span&gt;&lt;span&gt;、&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;osworkflow&lt;/span&gt;&lt;span&gt;、&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;activiti&lt;/span&gt;&lt;span&gt;都是比较成熟的解决方案，相比而言，采用&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;Java&lt;/span&gt;&lt;span&gt;研发还是比较幸福，不像&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;C#&lt;/span&gt; &lt;span&gt;那时候还没比较好的成熟解决方案，导致我们在工作流技术框架方面不得不采用&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;Java&lt;/span&gt;&lt;span&gt;的解决方案。由于公司的原因，最后我们业务部分采用&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;C#&lt;/span&gt;&lt;span&gt;语言编写，流程部分采用&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;Java&lt;/span&gt;&lt;span&gt;下&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;osworkflow&lt;/span&gt;&lt;span&gt;技术方案，将&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;Java&lt;/span&gt;&lt;span&gt;中&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;osWorkflow&lt;/span&gt;&lt;span&gt;工作流封装成&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;WebService&lt;/span&gt;&lt;span&gt;服务与&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;C#&lt;/span&gt;&lt;span&gt;这边进行交互模式，增加实施的难度。微软发布的工作流产品（&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;WF&lt;/span&gt;&lt;span&gt;），我们也研究使用过这款产品，这款产品只包含引擎和一个&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;C/S&lt;/span&gt;&lt;span&gt;版的流程设计器，并不支持在线设计流程。在使用方面，我们并没有用好&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;WF&lt;/span&gt;&lt;span&gt;，不知道是不是技术原因，时常报些莫明其妙的错误，使用起来并不太稳定，最后不得不放弃转而使用&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;Java&lt;/span&gt;&lt;span&gt;的解决方案。目前市面上有很多公司或个人研发的工作流产品，有的是完全遵循国际上制定的工作流标准实现，而有的则并没有遵循标准，这两种实现暂且不论好坏，只要能解决自已的需求，在我看来，那就是好的产品。中国有位领导说过，不管白猫黑猫，能抓到老鼠的就是好猫。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;strong&gt;&lt;span&gt;工作流背景&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span&gt;引用上篇文章解释工作流产生背景以及使用场景。&lt;span&gt;工作流是为解决现实中繁杂多变的业务审批流程，应运而生的一种技术。在现实中好多公司、政府、军工单位中审批业务流程是频繁变更，特别在研发&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;ERP&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;信息管理系统，或多或少都存在这种需求。工作流技术的出现为这种需求提供了一种更好的解决方案，将大大的减轻研发人员的工作量。在工作流技术未出现前，研发人员为应对这种情况是疲于应付&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;，精疲力竭。通常都是通过硬性编码对固定的业务流程，进行针对性编码，这种编码方式，就很不适应业务频繁的变更，造成开发人员这种被动的局面。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span&gt;工作流产品一般包含流程引擎和流程设计器两个部分，这两部分是工作流核心部件。流程引擎提供对流程解析，并驱动业务流程的流转。流程设计器则提供图形化操作方式，通过画图方式定义工作流审批流程，最终生成工作审批流程定义的&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;XML&lt;/span&gt;&lt;span&gt;文件。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;strong&gt;&lt;span&gt;流程设计器&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span&gt;市面上通常都是提供的在线流程设计器，在线的流程设计器主要基于&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;Flash&lt;/span&gt;&lt;span&gt;、&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;SL&lt;/span&gt;&lt;span&gt;、&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;H5&lt;/span&gt;&lt;span&gt;、&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;SVG&lt;/span&gt;&lt;span&gt;这四种技术实现。这四种技术实现画图各有优缺点。&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;Flash&lt;/span&gt;&lt;span&gt;、&lt;/span&gt; &lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;SL&lt;/span&gt;&lt;/span&gt;&lt;span&gt;这两种是必须要在客户端安装插件、学习成本也不低，这两种技术在逐步末落。&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;H5&lt;/span&gt;&lt;span&gt;、&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;SVG&lt;/span&gt;&lt;span&gt;这两种技术在近年是越来越流行，但是对老浏览器不支持。选择哪种技术实现方式主要看目前自已的需求。也有些比较优秀&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;JS&lt;/span&gt;&lt;span&gt;开源画图框架如&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;D3&lt;/span&gt;&lt;span&gt;、&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;SVGJS&lt;/span&gt;&lt;span&gt;、&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;Jsplumb&lt;/span&gt;&lt;span&gt;等等，本质上都是基于上面几种技术方式实现的，有兴趣的可以自已去了解。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;strong&gt;&lt;span&gt;流程引擎实现原理&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span&gt;在系统中为了反映与现实的送审流程，工作流框架中通常都采用&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;XML&lt;/span&gt;&lt;span&gt;对送审流程进行描述定义。然后，由工作流引擎对&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;XML&lt;/span&gt;&lt;span&gt;数据结构解析，并将定义的流程节点和关联信息都序列化存储到数据库里。在序列化过程中将与业务表单建立关联，后续将依据上述定义的流程，进行业务上的流转。市面上工作流框架基本上都是基于这种实现方式。当然我并没有准备引入那些高大上的理论进行讲解，因为我觉得那些&lt;/span&gt;&lt;span&gt;专业术语让人听得都生畏，什么工作流泳道模型、顺序、状态机、事件等等这些专业术语的解释，有兴趣的可自行了解。其实，还涉及到到表单流转，这个话题等下次有时间，再来说道说道。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span&gt;开源工作流地址：&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;a href=&quot;https://github.com/chengderen/Smartflow-Sharp&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;https://github.com/chengderen/Smartflow-Sharp&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;strong&gt;&lt;span&gt;结语&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span&gt;上述是我对流程定义、原理和实现，进行解读和分析。由于本人技术水平有限，有理解的不对地方，还请指教。写文章真的太折磨人，费神费力，希望对大家有所帮助。顺便教大家一个排版的技巧，我也是前几天才知道的，写文章最好是先在&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;Word&lt;/span&gt;&lt;span&gt;文档中先调整好格式和排版，然后导出&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;Html&lt;/span&gt;&lt;span&gt;格式的文档，这样你的文章排版和格式看起来很舒服，不会错乱。之前一直苦恼纠结在博客园格编辑器中怎么调整好格式与排版。建议博客园的编辑器应该向&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;csdn&lt;/span&gt;&lt;span&gt;的学习，那个直接拷贝文档都不会乱格式。&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
</description>
<pubDate>Thu, 28 Jun 2018 13:12:00 +0000</pubDate>
<dc:creator>心如直水</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/CREN/p/9240684.html</dc:identifier>
</item>
<item>
<title>【原创】分布式之数据库和缓存双写一致性方案解析(二) - 孤独烟</title>
<link>http://www.cnblogs.com/rjzheng/p/9240611.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/rjzheng/p/9240611.html</guid>
<description>&lt;h2 id=&quot;引言&quot;&gt;引言&lt;/h2&gt;
&lt;p&gt;该文是对&lt;a href=&quot;https://www.cnblogs.com/rjzheng/p/9041659.html&quot;&gt;《分布式之数据库和缓存双写一致性方案解析》&lt;/a&gt;，一文的补充。博主在该文中，提到了这么一句话&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;应该没人问我，为什么没有先更新缓存，再更新数据库这种策略。&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;博主当时觉得，这种更新策略比较简单，没必要多做说明，结果太多人留言给博主，问我为什么不说这套方案？好吧，博主先跟大家道个歉，是我的问题。所以再开一文，把这个方案说明一下&lt;/p&gt;
&lt;h2 id=&quot;正文&quot;&gt;正文&lt;/h2&gt;
&lt;p&gt;下面说明一下&lt;strong&gt;先更缓存，再更新数据库&lt;/strong&gt;这套方案&lt;br/&gt;&lt;strong&gt;&lt;span&gt;更新数据库失败了怎么办？&lt;/span&gt;&lt;/strong&gt;&lt;br/&gt;这个问题其实很好解决，提供一个补偿措施即可。这个补偿措施，大家灵活变通，博主只是举例，如下图所示：&lt;br/&gt;&lt;img src=&quot;https://images.cnblogs.com/cnblogs_com/rjzheng/1202350/o_shuangxie2.png&quot; alt=&quot;image&quot;/&gt;&lt;br/&gt;流程如下所示&lt;br/&gt;（1）更新缓存数据；&lt;br/&gt;（2）更新数据库失败&lt;br/&gt;（3）将需要更新的sql发送至消息队列&lt;br/&gt;（4）自己消费消息，获得需要更新的sql&lt;br/&gt;（5）继续重试更新操作，直到成功&lt;br/&gt;其他方案不列举，因为重点不在这，在下面的情况&lt;br/&gt;&lt;strong&gt;&lt;span&gt;有存在其他的线程安全问题么？&lt;/span&gt;&lt;/strong&gt;&lt;br/&gt;有的，假设这会同时有请求A和请求B进行更新操作，那么会出现&lt;br/&gt;（1）线程A更新了缓存&lt;br/&gt;（2）线程B更新了缓存&lt;br/&gt;（3）线程B更新了数据库&lt;br/&gt;（4）线程A更新了数据库&lt;br/&gt;请求A更新数据库应该比请求B更新数据库早才对，但是因为网络等原因，B却比A更早更新了数据库。这就导致了脏数据，因此不考虑。&lt;br/&gt;可是，这时候有一个细心的读者，给博主举了一个反例。该例子出自《从P1到P7——我在淘宝这7年》这篇博客，&lt;br/&gt;博主偷个懒，直接贴一下该博客的原话&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;在【招财进宝】项目中有一个技术的细节值得拿出来说说，淘宝商品详情页面每天的流量在10亿以上，里面的内容都是放在缓存里的，做【招财进宝】的时候，我们要给卖家显示他的商品被浏览的次数，这个数字必须实时更新，而用缓存的话一般都是异步更新的。于是商品表里面增加了这样一个字段，每增加一个PV这个字段就要更新一次。发布上去一个小时数据库就挂掉了，撑不住这么高的update。数据库撑不住怎么办？一般的缓存策略是不支持实时更新的，这时候多隆大神想了个办法，在apache上面写了一个模块，这个数字根本不经过下层的web容器（只经过apache）就写入一个集中式的缓存区了，这个缓存区的数据再异步更新到数据库。好像什么问题，到了多隆手里，总能迎刃而解。&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;好吧，如果没耐心的读者，直接看博主的总结吧。上面巴拉巴拉一堆，就是说，当时他们有一个读多写多的场景，然后&lt;strong&gt;多隆大神用了先更缓存，再异步更新数据库的策略。&lt;/strong&gt;&lt;br/&gt;&lt;strong&gt;&lt;span&gt;难道淘宝的大神没发现线程安全问题？&lt;/span&gt;&lt;/strong&gt;&lt;br/&gt;不是的，上面提到的场景具有一个特殊性。我们先摘取关键一句话&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;于是商品表里面增加了这样一个字段，每增加一个PV这个字段就要更新一次&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;ps：PV是page view，页面浏览量的意思。&lt;br/&gt;博主斗胆猜测，他们做的应该是用户每次点击，数据库里的这个字段就加一的操作。&lt;br/&gt;那我们这时的SQL一般是这么写&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;update product_tb set number = number+1 where product_id =xxx&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;大家注意到了么，&lt;strong&gt;并发执行这句SQL并不需要关心执行顺序。&lt;/strong&gt;哪个更新线程先执行加一的SQL语句 ，与操作顺序有什么关系呢？&lt;br/&gt;再说的通俗一点，假设我们同时有请求A和请求B进行更新操作，那么会出现&lt;br/&gt;（1）线程A更新了缓存&lt;br/&gt;（2）线程B更新了缓存&lt;br/&gt;（3）线程B更新了数据库&lt;br/&gt;（4）线程A更新了数据库&lt;br/&gt;因为他们这个时候执行的sql是无序的，所以上面的步骤（3）和步骤（4）哪一个步骤先执行，并没有关系。最终结果一定是一致的。&lt;br/&gt;容博主啰嗦，来个实例，假设表product_tb如下&lt;/p&gt;
&lt;p&gt;这时请求A和请求B同时对product_id为1的数据进行更新操作，无论是按出现并发问题时的顺序&lt;br/&gt;(1)线程B更新了数据库，进行加一&lt;br/&gt;(2)线程A更新了数据库，进行加一&lt;br/&gt;还是正常的顺序&lt;br/&gt;(1)线程A更新了数据库，进行加一&lt;br/&gt;(2)线程B更新了数据库，进行加一&lt;br/&gt;最终结果都是&lt;/p&gt;
&lt;p&gt;ok。说到这里，大家应该是懂了。换句话说，如果此时，操作的sql是有序的，就会出现最上面说的线程安全问题。所以，希望大家针对问题多思考总结。&lt;br/&gt;&lt;strong&gt;&lt;span&gt;给大家留一个思考问题?&lt;/span&gt;&lt;/strong&gt;&lt;br/&gt;如果此时是一个读多写多的场景，又要求更新数据库的操作必须严格保证顺序，那这个时候怎么保证缓存和数据库的一致性？大家可以来我的博客留言。&lt;/p&gt;
&lt;h2 id=&quot;总结&quot;&gt;总结&lt;/h2&gt;
&lt;p&gt;本文是对上次文章的一次文章的一次补充。只怪博主思考问题太过简单，给大家留了个坑。因此再开一篇文章进行补充说明。希望大家能够有所收获。&lt;/p&gt;
</description>
<pubDate>Thu, 28 Jun 2018 13:10:00 +0000</pubDate>
<dc:creator>孤独烟</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/rjzheng/p/9240611.html</dc:identifier>
</item>
<item>
<title>Asp.NetMVC利用LigerUI搭建一个简单的后台管理详解（函登录验证） - 魏杨杨</title>
<link>http://www.cnblogs.com/w5942066/p/9240653.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/w5942066/p/9240653.html</guid>
<description>&lt;p&gt;上一篇 &lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;a id=&quot;cb_post_title_url&quot; class=&quot;postTitle2&quot; href=&quot;https://www.cnblogs.com/w5942066/p/9080684.html&quot;&gt;Asp.Net 中Grid详解两种方法使用LigerUI加载数据库数据填充数据分页&lt;/a&gt;&lt;/strong&gt;&lt;/span&gt; &lt;/span&gt; 了解了LigerUI 中Grid的基本用法  现在结合上一篇的内容做一个简单的后台管理，当然也有前台的页面。支持登录验证。&lt;/p&gt;
&lt;h2&gt;1、打开VS新建一个MVC项目，右键点击项目新建一个区域Admin作为后台部分&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/787521/201806/787521-20180628193706272-1130411054.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;2、既然要做登录限制我们在App_Start下面新建一个类 继承Controller作为基处理控制器。&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/787521/201806/787521-20180628194301163-445209497.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;里面Session就是储存用户的登录信息，登陆过的用户跟没有登录的用户就是在这个里面判断，后面建的控制器都是继承这个BaseController，OnActionExecuted重写这个方法判断登录，下面是代码&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Security.Principal;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Web.Mvc;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Web.Mvc.Filters;

&lt;/span&gt;&lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; WyMVCLigerUIDemo20180626
{
    &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
    &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 基处理控制器，不仅可以取代全局过滤器，还提供派生类方法
    &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;abstract&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; BaseController : Controller
    {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; GET: Base&lt;/span&gt;

        &lt;span&gt;protected&lt;/span&gt; Model.UserInfo UserInfo =&amp;gt; Session[&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;UserInfo&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;] &lt;span&gt;as&lt;/span&gt;&lt;span&gt; Model.UserInfo;
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 数据库操作上下文
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;protected&lt;/span&gt; ModelContext Context =&amp;gt;&lt;span&gt; ModelContext.Current;

        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 判断是否登录 没有登录强跳转登录界面
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;filterContext&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;protected&lt;/span&gt; &lt;span&gt;override&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; OnActionExecuted(ActionExecutedContext filterContext)
        {
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (UserInfo == &lt;span&gt;null&lt;/span&gt; &amp;amp;&amp;amp; filterContext.ActionDescriptor.ActionName.ToLower()!=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;login&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
            {
                filterContext.HttpContext.Response.Redirect(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/Admin/Home/Login&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;true&lt;/span&gt;&lt;span&gt;);
            }
           
            &lt;/span&gt;&lt;span&gt;base&lt;/span&gt;&lt;span&gt;.OnActionExecuted(filterContext);
        }
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;下面是UserInfo类就是一个ID、用户名、密码&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;using&lt;/span&gt;&lt;span&gt; Qwit.ORM;

&lt;/span&gt;&lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; WyMVCLigerUIDemo20180626.Model
{
    &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
    &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 管理员信息
    &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
    [Table(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;User&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)]
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; UserInfo:ITablesCreateCompleted
    {

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; Id { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; Name { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; Pass { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; 
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;context&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; OnTablesCreated(EntityContext context)
        { 
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;创建表的时候调用此方法，用于创建视图和默认数据&lt;/span&gt;
&lt;span&gt;

        }
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;3、在区域Areas里面的Admin下的控制器Controller新建一个控制器Home。Home作为后台的首页，Login是登陆界面并添加相应的视图 &lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/787521/201806/787521-20180628195544139-1190095320.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;下面是后台Home控制器中的代码&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Collections.Generic;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Linq;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Web;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Web.Mvc;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; WyMVCLigerUIDemo20180626.Model;

&lt;/span&gt;&lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; WyMVCLigerUIDemo20180626.Areas.Admin.Controllers
{
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; HomeController : BaseController
    {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; GET: Admin/Home&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt;&lt;span&gt; ActionResult Index()
        {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; View();
        }
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; GET: Admin/Home&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 登录页面
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
&lt;span&gt;        [AllowAnonymous]
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; ActionResult Login()
        {
            &lt;/span&gt;&lt;span&gt;string&lt;/span&gt; loginID = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;admin&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;string&lt;/span&gt; PasswordCon = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;admin888&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
            Session[&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;LoginName&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;] =&lt;span&gt; loginID;
            Session[&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Password&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;] =&lt;span&gt; PasswordCon;
            UserInfo userInfo &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; UserInfo();
            userInfo.Name &lt;/span&gt;=&lt;span&gt; loginID;
            userInfo.Pass &lt;/span&gt;=&lt;span&gt; PasswordCon;
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; View();
        }
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 登陆逻辑
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;name&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;pass&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
        &lt;span&gt;//&lt;/span&gt;&lt;span&gt;[AllowAnonymous, HttpPost]
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;public ActionResult Login(string name, string pass)
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;{
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;eg:用户登录 
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;    var user = Context.Users.Where(q =&amp;gt; q.Name.Equals(name)).FirstOrDefault();
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;同 var user =Context.Users.FirstOrDefault(q =&amp;gt; q.Name.Equals(name));

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;推荐采用异步操作，即
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;var user =await Context.Users.FirstOrDefaultAsync(q =&amp;gt; q.Name.Equals(name));

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;    if (user != null)
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;    {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;        if (user.Pass.Equals(pass))
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;        {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;            &lt;span&gt;//&lt;/span&gt;&lt;span&gt;密码正确，登陆成功
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;        }
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;    }


        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;    return Json(new Models.AjaxResult { Result = true });
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;
&lt;span&gt;        [HttpPost]
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; ActionResult LoginTow()
        {


            &lt;/span&gt;&lt;span&gt;string&lt;/span&gt; namelogin = Request[&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;txtName&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;].ToString();
            &lt;/span&gt;&lt;span&gt;string&lt;/span&gt; pass = Request[&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;txtPass&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;].ToString();
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (Session[&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;LoginName&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;].ToString() == namelogin &amp;amp;&amp;amp; Session[&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Password&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;].ToString() ==&lt;span&gt; pass)
            {
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; user = &lt;span&gt;new&lt;/span&gt; UserInfo() { Name = namelogin, Pass =&lt;span&gt; pass };
                Session[&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;UserInfo&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;] =&lt;span&gt; user;
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; Content(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;SU&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);


            }
            &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;
            {
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; Content(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ER&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            }

        }
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Login是对应的登录视图  里面设置的Session，登录的账号密码，这里是写死的没有链接数据库，怕写的多以后再补上，LoginTow这个是登陆方法 前台Ajax请求的地址，看得到返回的不是View是一些文本  登录成功失败都返回相应的字符。下面是登陆界面&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;meta name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;viewport&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; content=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;width=device-width&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; /&amp;gt;
    &amp;lt;title&amp;gt;管理员登录&amp;lt;/title&amp;gt;
    &amp;lt;link href=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/resources/bootstrap/css/bootstrap.css&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; rel=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;stylesheet&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text/css&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; /&amp;gt;
    &amp;lt;link href=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/resources/dropkick/dropkick.css&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; rel=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;stylesheet&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text/css&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; /&amp;gt;
    &amp;lt;link href=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/resources/easyui/easyui.css&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; rel=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;stylesheet&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text/css&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; /&amp;gt;
    &amp;lt;link href=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/resources/css/default.css&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; rel=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;stylesheet&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text/css&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; /&amp;gt;
    &amp;lt;link href=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/resources/css/themes.css&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; rel=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;stylesheet&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text/css&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; /&amp;gt;
    &amp;lt;script src=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/resources/js/jquery.1.11.3.min.js&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script src=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/resources/bootstrap/js/bootstrap.min.js&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script src=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/resources/dropkick/jquery.dropkick-min.js&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script src=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/resources/easyui/jquery.easyui.min.js&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script src=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/resources/js/pop.js&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script src=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/resources/js/myfunctions.js&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script src=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/resources/js/frame.js&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script src=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/resources/js/ajaxfileupload.js&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;style&amp;gt;&lt;span&gt;
        .stymain {
            width: 500px;
            height: 300px;
            margin: &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt; auto;
            margin&lt;/span&gt;-&lt;span&gt;top: 200px;
            border: 1px solid #&lt;/span&gt;&lt;span&gt;808080&lt;/span&gt;&lt;span&gt;;
            background: #eeeeee;
            padding: 5px;
            border&lt;/span&gt;-&lt;span&gt;radius: 5px;
        }
    &lt;/span&gt;&amp;lt;/style&amp;gt;
    &amp;lt;script&amp;gt;&lt;span&gt;
        $(document).ready(function () {
            $(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;#btnsubmit&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;).click(function () {
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; ($(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;#txtLoginID&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;).val() == &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;) {
                    alert(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;请填写用户名！&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
                    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
                }
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; ($(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;#txtPassword&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;).val() == &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;) {
                    alert(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;请输入密码！&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
                    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
                }
                $.ajax({
                    type: &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;POST&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                    url: &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;LoginTow&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                    data: {
                        txtName: $(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;#txtLoginID&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;).val(),
                        txtPass: $(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;#txtPassword&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;).val()
                    },
                    success: function (data) {
                        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (data = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;SU&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;) {
                            setTimeout(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;location.href='/Admin/Home/Index';&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;500&lt;/span&gt;&lt;span&gt;);
                            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;location.href(&quot;/Home/Index&quot;);&lt;/span&gt;
&lt;span&gt;                        }
                        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (data == &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ER&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;) {
                            alert(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;用户名密码错误！！&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
                            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
                        }

                    }

                });
            })
        })
    &lt;/span&gt;&amp;lt;/script&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
    &amp;lt;div &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;stymain&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
        &amp;lt;div &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;section-title&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;管理员登录&amp;lt;/div&amp;gt;
        &amp;lt;div &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;form-horizontal&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
            &amp;lt;div &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;form-group col-sm-12&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
                &amp;lt;label &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;fg-text control-label&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;用户名&amp;lt;/label&amp;gt;
                &amp;lt;div &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;fg-input&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
                    &amp;lt;input type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;form-control&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;txtLoginID&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;txtLoginID&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; placeholder=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;请填写用户名&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
                &amp;lt;/div&amp;gt;
            &amp;lt;/div&amp;gt;
            &amp;lt;div &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;form-group col-sm-12&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
                &amp;lt;label &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;fg-text control-label&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;密码&amp;lt;/label&amp;gt;

                &amp;lt;div &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;fg-input&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
                    &amp;lt;input type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;password&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;form-control&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;txtPassword&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;txtPassword&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; placeholder=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;请填写密码&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
                &amp;lt;/div&amp;gt;
            &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;div &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;form-btns&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
            &amp;lt;button type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;submit&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;btnsubmit&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; id=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;btnsubmit&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;btn btn-success&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;span &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;glyphicon glyphicon-ok&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;/span&amp;gt; 登录&amp;lt;/button&amp;gt;
        &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;里面的代码通俗易懂引用的css是网上随便找了一个后台框架的css。懒得去写样式哈哈。Ajax请求后台的LoginTow方法。&lt;/p&gt;
&lt;h2&gt;4、后台首页部分&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;70&quot;&gt;
&lt;pre&gt;
&lt;span&gt;@{
    Layout = null;
}

&lt;/span&gt;&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;viewport&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;width=device-width&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;后台界面&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;link &lt;/span&gt;&lt;span&gt;href&lt;/span&gt;&lt;span&gt;=&quot;~/Scripts/lib/ligerUI/skins/Aqua/css/ligerui-all.css&quot;&lt;/span&gt;&lt;span&gt; rel&lt;/span&gt;&lt;span&gt;=&quot;stylesheet&quot;&lt;/span&gt;&lt;span&gt; type&lt;/span&gt;&lt;span&gt;=&quot;text/css&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;link &lt;/span&gt;&lt;span&gt;rel&lt;/span&gt;&lt;span&gt;=&quot;stylesheet&quot;&lt;/span&gt;&lt;span&gt; type&lt;/span&gt;&lt;span&gt;=&quot;text/css&quot;&lt;/span&gt;&lt;span&gt; id&lt;/span&gt;&lt;span&gt;=&quot;mylink&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;link &lt;/span&gt;&lt;span&gt;rel&lt;/span&gt;&lt;span&gt;=&quot;stylesheet&quot;&lt;/span&gt;&lt;span&gt; type&lt;/span&gt;&lt;span&gt;=&quot;text/css&quot;&lt;/span&gt;&lt;span&gt; href&lt;/span&gt;&lt;span&gt;=&quot;~/Scripts/homeMain.css&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;~/Scripts/lib/jquery/jquery-1.9.0.min.js&quot;&lt;/span&gt;&lt;span&gt; type&lt;/span&gt;&lt;span&gt;=&quot;text/javascript&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;~/Scripts/lib/ligerUI/js/ligerui.all.js&quot;&lt;/span&gt;&lt;span&gt; type&lt;/span&gt;&lt;span&gt;=&quot;text/javascript&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;~/Scripts/lib/jquery.cookie.js&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;~/Scripts/lib/json2.js&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;~/Scripts/lib/indexdata.js&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;~/Scripts/homeMain.js&quot;&lt;/span&gt;&lt;span&gt; type&lt;/span&gt;&lt;span&gt;=&quot;text/javascript&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
        $(&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
            $(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;#l-link&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;).on(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;click&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
                $(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;#l-link&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;).css(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;background-color&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;blue&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
                $(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;).css(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;background-color&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;yellow&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            })
        });
    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
    @{ 
        string url = HttpContext.Current.Request.Url.Host;
        int url22 = HttpContext.Current.Request.Url.Port;
        string UrlOK = &quot;http:&quot;+url+&quot;/&quot;+url22+ &quot;/TableTring/index&quot;;

    }
&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body &lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;=&quot;padding:0px;background:#EAEEF5;&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;pageloading&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;topmenu&quot;&lt;/span&gt;&lt;span&gt; class&lt;/span&gt;&lt;span&gt;=&quot;l-topmenu&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;=&quot;text-align:center;&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;h1&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;XXX后台管理系统&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;h1&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;layout1&quot;&lt;/span&gt;&lt;span&gt; style&lt;/span&gt;&lt;span&gt;=&quot;width:99.2%; margin:0 auto; margin-top:4px; &quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;position&lt;/span&gt;&lt;span&gt;=&quot;left&quot;&lt;/span&gt;&lt;span&gt; title&lt;/span&gt;&lt;span&gt;=&quot;菜单列表&quot;&lt;/span&gt;&lt;span&gt; id&lt;/span&gt;&lt;span&gt;=&quot;accordion1&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;=&quot;菜单一&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;a &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;l-link&quot;&lt;/span&gt;&lt;span&gt; href&lt;/span&gt;&lt;span&gt;=&quot;javascript:f_addTab('1','表格分页','http://localhost:62545/Admin/TableTring/index')&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;表格分页&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;a &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;l-link&quot;&lt;/span&gt;&lt;span&gt; href&lt;/span&gt;&lt;span&gt;=&quot;javascript:f_addTab('2','1子菜单二','http://www.cnblogs.com/w5942066/')&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;1子菜单二好&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;a &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;l-link&quot;&lt;/span&gt;&lt;span&gt; href&lt;/span&gt;&lt;span&gt;=&quot;javascript:f_addTab('3','1子菜单三','http://localhost:62545/Admin/TableTring/index')&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;1子菜单三很好&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;a &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;l-link&quot;&lt;/span&gt;&lt;span&gt; href&lt;/span&gt;&lt;span&gt;=&quot;javascript:f_addTab('4','1子菜单四','http://localhost:62545/Admin/TableTring/index')&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;1子菜单四相当好&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;=&quot;菜单二&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;a &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;l-link&quot;&lt;/span&gt;&lt;span&gt; href&lt;/span&gt;&lt;span&gt;=&quot;javascript:f_addTab('5','2子菜单一','http://localhost:62545/Admin/TableTring/index')&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;2子菜单一&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;a &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;l-link&quot;&lt;/span&gt;&lt;span&gt; href&lt;/span&gt;&lt;span&gt;=&quot;javascript:f_addTab('6','2子菜单二','http://localhost:62545/Admin/TableTring/index')&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;2子菜单二&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;a &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;l-link&quot;&lt;/span&gt;&lt;span&gt; href&lt;/span&gt;&lt;span&gt;=&quot;javascript:f_addTab('7','2子菜单三','http://localhost:62545/Admin/TableTring/index')&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;2子菜单三&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;a &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;l-link&quot;&lt;/span&gt;&lt;span&gt; href&lt;/span&gt;&lt;span&gt;=&quot;javascript:f_addTab('8','2子菜单四','http://localhost:62545/Admin/TableTring/index')&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;2子菜单四&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;=&quot;菜单三&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;a &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;l-link&quot;&lt;/span&gt;&lt;span&gt; href&lt;/span&gt;&lt;span&gt;=&quot;javascript:f_addTab('9','3子菜单一',' http://localhost:62545/Admin/TableTring/index')&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;3子菜单一&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;a &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;l-link&quot;&lt;/span&gt;&lt;span&gt; href&lt;/span&gt;&lt;span&gt;=&quot;javascript:f_addTab('10','3子菜单二','http://localhost:62545/Admin/TableTring/index')&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;3子菜单二&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;a &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;l-link&quot;&lt;/span&gt;&lt;span&gt; href&lt;/span&gt;&lt;span&gt;=&quot;javascript:f_addTab('11','3子菜单三','http://localhost:62545/Admin/TableTring/index')&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;3子菜单三&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;a &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;l-link&quot;&lt;/span&gt;&lt;span&gt; href&lt;/span&gt;&lt;span&gt;=&quot;javascript:f_addTab('12','3子菜单四','http://localhost:62545/Admin/TableTring/index')&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;3子菜单四&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;=&quot;菜单四&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;a &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;l-link&quot;&lt;/span&gt;&lt;span&gt; href&lt;/span&gt;&lt;span&gt;=&quot;javascript:f_addTab('13','4子菜单一','http://localhost:62545/Admin/TableTring/index')&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;4子菜单一&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;a &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;l-link&quot;&lt;/span&gt;&lt;span&gt; href&lt;/span&gt;&lt;span&gt;=&quot;javascript:f_addTab('14','4子菜单二','http://localhost:62545/Admin/TableTring/index')&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;4子菜单二&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;a &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;l-link&quot;&lt;/span&gt;&lt;span&gt; href&lt;/span&gt;&lt;span&gt;=&quot;javascript:f_addTab('15','4子菜单三','http://localhost:62545/Admin/TableTring/index')&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;4子菜单三&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;a &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;l-link&quot;&lt;/span&gt;&lt;span&gt; href&lt;/span&gt;&lt;span&gt;=&quot;javascript:f_addTab('16','4子菜单四','http://localhost:62545/Admin/TableTring/index')&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;4子菜单四&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;position&lt;/span&gt;&lt;span&gt;=&quot;center&quot;&lt;/span&gt;&lt;span&gt; id&lt;/span&gt;&lt;span&gt;=&quot;framecenter&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;tabid&lt;/span&gt;&lt;span&gt;=&quot;home&quot;&lt;/span&gt;&lt;span&gt; title&lt;/span&gt;&lt;span&gt;=&quot;我的主页&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
                @*&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;iframe &lt;/span&gt;&lt;span&gt;frameborder&lt;/span&gt;&lt;span&gt;=&quot;0&quot;&lt;/span&gt;&lt;span&gt; name&lt;/span&gt;&lt;span&gt;=&quot;home&quot;&lt;/span&gt;&lt;span&gt; id&lt;/span&gt;&lt;span&gt;=&quot;home&quot;&lt;/span&gt; &lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;*@
                @*&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;iframe&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;*@
                &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;tabid&lt;/span&gt;&lt;span&gt;=&quot;home&quot;&lt;/span&gt;&lt;span&gt; title&lt;/span&gt;&lt;span&gt;=&quot;我的主页&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;iframe &lt;/span&gt;&lt;span&gt;frameborder&lt;/span&gt;&lt;span&gt;=&quot;0&quot;&lt;/span&gt;&lt;span&gt; name&lt;/span&gt;&lt;span&gt;=&quot;home&quot;&lt;/span&gt;&lt;span&gt; id&lt;/span&gt;&lt;span&gt;=&quot;home&quot;&lt;/span&gt;&lt;span&gt; src&lt;/span&gt;&lt;span&gt;=&quot;http://www.cnblogs.com/w5942066/&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;iframe&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;=&quot;height:32px; line-height:32px; text-align:center;&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;h4&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;版权信息！Admin Test  Copyright © 2011-2014&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;h4&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;=&quot;display:none&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;里面的HomeMain的js跟css文件是里面原有的样式跟js，为了页面清爽我单独拿了出来。里面LigerUI所需要的js都要添加，我是把下载下来的LigerUI里面Source文件夹下面的Lib文件直接拷贝到项目中的Script文件夹下面。&lt;/p&gt;
&lt;p&gt;HomeMain的css跟js写在Script文件夹下面 ，还要把里面的一个图片拷贝进来不然运行的时候回报错（不是什么大错就是找不到加载中这个图片的路径）。首页布局里面很清楚的看得出来上、左右，下（版权）。&amp;lt;div tabid=&quot;home&quot; title=&quot;我的主页&quot;&amp;gt;这个下面写的是默认的界面 不可以被关闭。&lt;/p&gt;
&lt;p&gt;可以是html文件 也可以外接一个连接。接互联网上的网址 有时出来 有时候出不来 一般都是不允许的，框架里面是不允许显示别的网址里面的东西（要是可以那这个框架岂不是跟浏览器一样了哈哈）。里面的菜单可以写死 也可以保存在数据库里面后台获取拼接出来看个人的爱好。&lt;/p&gt;
&lt;p&gt;里面的菜单所对应的界面想列表页面都是访问的url+端口+Admin+控制器+方法 这里不要忘记了加Admin我弄的时候就是没有加上Admin给我找了一晚上的错误，案例手里面写上@UrlOK也应该可以 但是路径前面会加上以前的Url这里下来还要研究一下。 &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/787521/201806/787521-20180628201210395-1408706607.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;HomeMain.js&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;83&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; tab = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; accordion = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; tree = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; tabItems =&lt;span&gt; [];
$(&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;布局&lt;/span&gt;
    $(&quot;#layout1&quot;&lt;span&gt;).ligerLayout({
        leftWidth: &lt;/span&gt;190&lt;span&gt;,
        height: &lt;/span&gt;'100%'&lt;span&gt;,
        heightDiff: &lt;/span&gt;-34&lt;span&gt;,
        space: &lt;/span&gt;0&lt;span&gt;,
        onHeightChanged: f_heightChanged,
        onLeftToggle: &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
            tab &lt;/span&gt;&amp;amp;&amp;amp; tab.trigger('sysWidthChange'&lt;span&gt;);
        },
        onRightToggle: &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
            tab &lt;/span&gt;&amp;amp;&amp;amp; tab.trigger('sysWidthChange'&lt;span&gt;);
        }
    });

    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; height = $(&quot;.l-layout-center&quot;&lt;span&gt;).height();

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;Tab&lt;/span&gt;
    tab = $(&quot;#framecenter&quot;&lt;span&gt;).ligerTab({
        height: height,
        showSwitchInTab: &lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;,
        showSwitch: &lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;,
        onAfterAddTabItem: &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; (tabdata) {
            tabItems.push(tabdata);
            saveTabStatus();
        },
        onAfterRemoveTabItem: &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; (tabid) {
            &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; i = 0; i &amp;lt; tabItems.length; i++&lt;span&gt;) {
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; o =&lt;span&gt; tabItems[i];
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (o.tabid ==&lt;span&gt; tabid) {
                    tabItems.splice(i, &lt;/span&gt;1&lt;span&gt;);
                    saveTabStatus();
                    &lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
                }
            }
        },
        onReload: &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; (tabdata) {
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; tabid =&lt;span&gt; tabdata.tabid;
        }
    });

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;面板&lt;/span&gt;
    $(&quot;#accordion1&quot;&lt;span&gt;).ligerAccordion({
        height: height &lt;/span&gt;- 24, speed: &lt;span&gt;null&lt;/span&gt;&lt;span&gt;
    });

    $(&lt;/span&gt;&quot;.l-link&quot;).hover(&lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
        $(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;).addClass(&quot;l-link-over&quot;&lt;span&gt;);
    }, &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
        $(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;).removeClass(&quot;l-link-over&quot;&lt;span&gt;);
    });
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;树&lt;/span&gt;
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;$(&quot;#tree1&quot;).ligerTree({&lt;/span&gt;
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;    data: indexdata,&lt;/span&gt;
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;    checkbox: false,&lt;/span&gt;
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;    slide: false,&lt;/span&gt;
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;    nodeWidth: 120,&lt;/span&gt;
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;    attribute: ['nodename', 'url'],&lt;/span&gt;
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;    render: function (a) {&lt;/span&gt;
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;        if (!a.isnew) return a.text;&lt;/span&gt;
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;        return '&amp;lt;a href=&quot;' + a.url + '&quot; target=&quot;_blank&quot;&amp;gt;' + a.text + '&amp;lt;/a&amp;gt;';&lt;/span&gt;
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;    },&lt;/span&gt;
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;    onSelect: function (node) {&lt;/span&gt;
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;        if (!node.data.url) return;&lt;/span&gt;
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;        if (node.data.isnew) {&lt;/span&gt;
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;            return;&lt;/span&gt;
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;        }&lt;/span&gt;
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;        var tabid = $(node.target).attr(&quot;tabid&quot;);&lt;/span&gt;
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;        if (!tabid) {&lt;/span&gt;
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;            tabid = new Date().getTime();&lt;/span&gt;
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;            $(node.target).attr(&quot;tabid&quot;, tabid)&lt;/span&gt;
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;        }&lt;/span&gt;
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;        f_addTab(tabid, node.data.text, node.data.url);&lt;/span&gt;
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;    }&lt;/span&gt;
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;});&lt;/span&gt;

    &lt;span&gt;function&lt;/span&gt;&lt;span&gt; openNew(url) {
        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; jform = $('#opennew_form'&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (jform.length == 0&lt;span&gt;) {
            jform &lt;/span&gt;= $('&amp;lt;form method=&quot;post&quot; /&amp;gt;').attr('id', 'opennew_form').hide().appendTo('body'&lt;span&gt;);
        } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
            jform.empty();
        }
        jform.attr(&lt;/span&gt;'action'&lt;span&gt;, url);
        jform.attr(&lt;/span&gt;'target', '_blank'&lt;span&gt;);
        jform.trigger(&lt;/span&gt;'submit'&lt;span&gt;);
    };


    tab &lt;/span&gt;= liger.get(&quot;framecenter&quot;&lt;span&gt;);
    accordion &lt;/span&gt;= liger.get(&quot;accordion1&quot;&lt;span&gt;);
    tree &lt;/span&gt;= liger.get(&quot;tree1&quot;&lt;span&gt;);
    $(&lt;/span&gt;&quot;#pageloading&quot;&lt;span&gt;).hide();

    css_init();
    pages_init();
});
&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; f_heightChanged(options) {
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (tab)
        tab.addHeight(options.diff);
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (accordion &amp;amp;&amp;amp; options.middleHeight - 24 &amp;gt; 0&lt;span&gt;)
        accordion.setHeight(options.middleHeight &lt;/span&gt;- 24&lt;span&gt;);
}
&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; f_addTab(tabid, text, url) {
    tab.addTabItem({
        tabid: tabid,
        text: text,
        url: url,
        callback: &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;addShowCodeBtn(tabid);&lt;/span&gt;
&lt;span&gt;        }
    });
}
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;function addShowCodeBtn(tabid) {&lt;/span&gt;&lt;span&gt;
//&lt;/span&gt;&lt;span&gt;    var viewSourceBtn = $('&amp;lt;a class=&quot;viewsourcelink&quot; href=&quot;javascript:void(0)&quot;&amp;gt;查看源码&amp;lt;/a&amp;gt;');&lt;/span&gt;&lt;span&gt;
//&lt;/span&gt;&lt;span&gt;    var jiframe = $(&quot;#&quot; + tabid);&lt;/span&gt;&lt;span&gt;
//&lt;/span&gt;&lt;span&gt;    viewSourceBtn.insertBefore(jiframe);&lt;/span&gt;&lt;span&gt;
//&lt;/span&gt;&lt;span&gt;    viewSourceBtn.click(function () {&lt;/span&gt;&lt;span&gt;
//&lt;/span&gt;&lt;span&gt;        showCodeView(jiframe.attr(&quot;src&quot;));&lt;/span&gt;&lt;span&gt;
//&lt;/span&gt;&lt;span&gt;    }).hover(function () {&lt;/span&gt;&lt;span&gt;
//&lt;/span&gt;&lt;span&gt;        viewSourceBtn.addClass(&quot;viewsourcelink-over&quot;);&lt;/span&gt;&lt;span&gt;
//&lt;/span&gt;&lt;span&gt;    }, function () {&lt;/span&gt;&lt;span&gt;
//&lt;/span&gt;&lt;span&gt;        viewSourceBtn.removeClass(&quot;viewsourcelink-over&quot;);&lt;/span&gt;&lt;span&gt;
//&lt;/span&gt;&lt;span&gt;    });&lt;/span&gt;&lt;span&gt;
//&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;
&lt;span&gt;function&lt;/span&gt;&lt;span&gt; showCodeView(src) {
    $.ligerDialog.open({
        title: &lt;/span&gt;'源码预览'&lt;span&gt;,
        url: &lt;/span&gt;'dotnetdemos/codeView.aspx?src=' +&lt;span&gt; src,
        width: $(window).width() &lt;/span&gt;* 0.9&lt;span&gt;,
        height: $(window).height() &lt;/span&gt;* 0.9&lt;span&gt;
    });

}

&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; pages_init() {
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; tabJson = $.cookie('liger-home-tab'&lt;span&gt;);
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (tabJson) {
        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; tabitems =&lt;span&gt; JSON2.parse(tabJson);
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; i = 0; tabitems &amp;amp;&amp;amp; tabitems[i]; i++&lt;span&gt;) {
            f_addTab(tabitems[i].tabid, tabitems[i].text, tabitems[i].url);
        }
    }
}
&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; saveTabStatus() {
    $.cookie(&lt;/span&gt;'liger-home-tab'&lt;span&gt;, JSON2.stringify(tabItems));
}
&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; css_init() {
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; css = $(&quot;#mylink&quot;).get(0), skin = getQueryString(&quot;skin&quot;&lt;span&gt;);
    $(&lt;/span&gt;&quot;#skinSelect&quot;&lt;span&gt;).val(skin);
    $(&lt;/span&gt;&quot;#skinSelect&quot;).change(&lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.value) {
            location.href &lt;/span&gt;= &quot;index.htm?skin=&quot; + &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.value;
        } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
            location.href &lt;/span&gt;= &quot;index.htm&quot;&lt;span&gt;;
        }
    });


    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!css || !skin) &lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
    skin &lt;/span&gt;=&lt;span&gt; skin.toLowerCase();
    $(&lt;/span&gt;'body').addClass(&quot;body-&quot; +&lt;span&gt; skin);
    $(css).attr(&lt;/span&gt;&quot;href&quot;&lt;span&gt;, skin_links[skin]);
}
&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; getQueryString(name) {
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; now_url = document.location.search.slice(1), q_array = now_url.split('&amp;amp;'&lt;span&gt;);
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; i = 0; i &amp;lt; q_array.length; i++&lt;span&gt;) {
        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; v_array = q_array[i].split('='&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (v_array[0] ==&lt;span&gt; name) {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; v_array[1&lt;span&gt;];
        }
    }
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
}
&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; attachLinkToFrame(iframeId, filename) {
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!window.frames[iframeId]) &lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; head = window.frames[iframeId].document.getElementsByTagName('head').item(0&lt;span&gt;);
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; fileref = window.frames[iframeId].document.createElement(&quot;link&quot;&lt;span&gt;);
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!fileref) &lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
    fileref.setAttribute(&lt;/span&gt;&quot;rel&quot;, &quot;stylesheet&quot;&lt;span&gt;);
    fileref.setAttribute(&lt;/span&gt;&quot;type&quot;, &quot;text/css&quot;&lt;span&gt;);
    fileref.setAttribute(&lt;/span&gt;&quot;href&quot;&lt;span&gt;, filename);
    head.appendChild(fileref);
}
&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; getLinkPrevHref(iframeId) {
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!window.frames[iframeId]) &lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; head = window.frames[iframeId].document.getElementsByTagName('head').item(0&lt;span&gt;);
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; links = $(&quot;link:first&quot;&lt;span&gt;, head);
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; i = 0; links[i]; i++&lt;span&gt;) {
        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; href = $(links[i]).attr(&quot;href&quot;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (href &amp;amp;&amp;amp; href.toLowerCase().indexOf(&quot;ligerui&quot;) &amp;gt; 0&lt;span&gt;) {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; href.substring(0, href.toLowerCase().indexOf(&quot;lib&quot;&lt;span&gt;));
        }
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;pre&gt;
&lt;span&gt; f_addTab这个方法就是点击左边，内容在右边显示  调用的时候  &amp;lt;a class=&quot;l-link&quot; href=&quot;javascript:f_addTab('1','表格分页','http://localhost:62545/Admin/TableTring/index')&quot;&amp;gt;表格分页&amp;lt;/a&amp;gt;这是在框架里面显示。要在外面显示&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt; &amp;lt;a class=&quot;l-link&quot; href=&quot;地址&quot; target=&quot;_blank&quot;&amp;gt;标题&amp;lt;/a&amp;gt; 就跟平常的一样里面的各个JS害的慢慢研究作用&lt;/p&gt;

&lt;p&gt;HomeMain.css&lt;/p&gt;
&lt;div readability=&quot;15&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  body,html&lt;/span&gt;{&lt;span&gt;height&lt;/span&gt;:&lt;span&gt;100%&lt;/span&gt;;}&lt;span&gt;
    body&lt;/span&gt;{&lt;span&gt; padding&lt;/span&gt;:&lt;span&gt;0px&lt;/span&gt;;&lt;span&gt; margin&lt;/span&gt;:&lt;span&gt;0&lt;/span&gt;;&lt;span&gt;   overflow&lt;/span&gt;:&lt;span&gt;hidden&lt;/span&gt;;}&lt;span&gt;  
    .l-link&lt;/span&gt;{&lt;span&gt; display&lt;/span&gt;:&lt;span&gt;block&lt;/span&gt;;&lt;span&gt; height&lt;/span&gt;:&lt;span&gt;26px&lt;/span&gt;;&lt;span&gt; line-height&lt;/span&gt;:&lt;span&gt;26px&lt;/span&gt;;&lt;span&gt; padding-left&lt;/span&gt;:&lt;span&gt;10px&lt;/span&gt;;&lt;span&gt; text-decoration&lt;/span&gt;:&lt;span&gt;none&lt;/span&gt;;&lt;span&gt; color&lt;/span&gt;:&lt;span&gt;#333&lt;/span&gt;;&lt;span&gt; list-style&lt;/span&gt;:&lt;span&gt;none&lt;/span&gt;;&lt;span&gt; border-bottom&lt;/span&gt;:&lt;span&gt; 1px dashed #d2d2d2&lt;/span&gt;;}&lt;span&gt;
    .l-link2&lt;/span&gt;{&lt;span&gt;text-decoration&lt;/span&gt;:&lt;span&gt;underline&lt;/span&gt;;&lt;span&gt; color&lt;/span&gt;:&lt;span&gt;white&lt;/span&gt;;&lt;span&gt; margin-left&lt;/span&gt;:&lt;span&gt;2px&lt;/span&gt;;&lt;span&gt;margin-right&lt;/span&gt;:&lt;span&gt;2px&lt;/span&gt;;}&lt;span&gt;
    .l-layout-top&lt;/span&gt;{&lt;span&gt;background&lt;/span&gt;:&lt;span&gt;#102A49&lt;/span&gt;;&lt;span&gt; color&lt;/span&gt;:&lt;span&gt;White&lt;/span&gt;;}&lt;span&gt;
    .l-layout-bottom&lt;/span&gt;{&lt;span&gt; background&lt;/span&gt;:&lt;span&gt;#E5EDEF&lt;/span&gt;;&lt;span&gt; text-align&lt;/span&gt;:&lt;span&gt;center&lt;/span&gt;;}&lt;span&gt;
    #pageloading&lt;/span&gt;{&lt;span&gt;position&lt;/span&gt;:&lt;span&gt;absolute&lt;/span&gt;;&lt;span&gt; left&lt;/span&gt;:&lt;span&gt;0px&lt;/span&gt;;&lt;span&gt; top&lt;/span&gt;:&lt;span&gt;0px&lt;/span&gt;;&lt;span&gt; background&lt;/span&gt;:&lt;span&gt;white url('loading.gif') no-repeat center&lt;/span&gt;;&lt;span&gt; width&lt;/span&gt;:&lt;span&gt;100%&lt;/span&gt;;&lt;span&gt; height&lt;/span&gt;:&lt;span&gt;100%&lt;/span&gt;;&lt;span&gt;z-index&lt;/span&gt;:&lt;span&gt;99999&lt;/span&gt;;}&lt;span&gt;
    .l-link&lt;/span&gt;{&lt;span&gt; display&lt;/span&gt;:&lt;span&gt;block&lt;/span&gt;;&lt;span&gt; line-height&lt;/span&gt;:&lt;span&gt;22px&lt;/span&gt;;&lt;span&gt; height&lt;/span&gt;:&lt;span&gt;22px&lt;/span&gt;;&lt;span&gt; padding-left&lt;/span&gt;:&lt;span&gt;16px&lt;/span&gt;;&lt;span&gt; margin&lt;/span&gt;:&lt;span&gt;4px&lt;/span&gt;;}&lt;span&gt;
    .l-link-over&lt;/span&gt;{&lt;span&gt; background&lt;/span&gt;:&lt;span&gt;#a5fcfe&lt;/span&gt;;}&lt;span&gt; 
    .l-winbar&lt;/span&gt;{&lt;span&gt; background&lt;/span&gt;:&lt;span&gt;#2B5A76&lt;/span&gt;;&lt;span&gt; height&lt;/span&gt;:&lt;span&gt;30px&lt;/span&gt;;&lt;span&gt; position&lt;/span&gt;:&lt;span&gt;absolute&lt;/span&gt;;&lt;span&gt; left&lt;/span&gt;:&lt;span&gt;0px&lt;/span&gt;;&lt;span&gt; bottom&lt;/span&gt;:&lt;span&gt;0px&lt;/span&gt;;&lt;span&gt; width&lt;/span&gt;:&lt;span&gt;100%&lt;/span&gt;;&lt;span&gt; z-index&lt;/span&gt;:&lt;span&gt;99999&lt;/span&gt;;}&lt;span&gt;
    .space&lt;/span&gt;{&lt;span&gt; color&lt;/span&gt;:&lt;span&gt;#E7E7E7&lt;/span&gt;;}
    &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 顶部 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt; 
    .l-topmenu&lt;/span&gt;{&lt;span&gt; margin&lt;/span&gt;:&lt;span&gt;0&lt;/span&gt;;&lt;span&gt; padding&lt;/span&gt;:&lt;span&gt;0&lt;/span&gt;;&lt;span&gt; height&lt;/span&gt;:&lt;span&gt;31px&lt;/span&gt;;&lt;span&gt; line-height&lt;/span&gt;:&lt;span&gt;31px&lt;/span&gt;;&lt;span&gt; background&lt;/span&gt;:&lt;span&gt;url('lib/images/top.jpg') repeat-x bottom&lt;/span&gt;;&lt;span&gt;  position&lt;/span&gt;:&lt;span&gt;relative&lt;/span&gt;;&lt;span&gt; border-top&lt;/span&gt;:&lt;span&gt;1px solid #1D438B&lt;/span&gt;;  }&lt;span&gt;
    .l-topmenu-logo&lt;/span&gt;{&lt;span&gt; color&lt;/span&gt;:&lt;span&gt;#E7E7E7&lt;/span&gt;;&lt;span&gt; padding-left&lt;/span&gt;:&lt;span&gt;35px&lt;/span&gt;;&lt;span&gt; line-height&lt;/span&gt;:&lt;span&gt;26px&lt;/span&gt;;&lt;span&gt;background&lt;/span&gt;:&lt;span&gt;url('lib/images/topicon.gif') no-repeat 10px 5px&lt;/span&gt;;}&lt;span&gt;
    .l-topmenu-welcome&lt;/span&gt;{&lt;span&gt;  position&lt;/span&gt;:&lt;span&gt;absolute&lt;/span&gt;;&lt;span&gt; height&lt;/span&gt;:&lt;span&gt;24px&lt;/span&gt;;&lt;span&gt; line-height&lt;/span&gt;:&lt;span&gt;24px&lt;/span&gt;;&lt;span&gt;  right&lt;/span&gt;:&lt;span&gt;30px&lt;/span&gt;;&lt;span&gt; top&lt;/span&gt;:&lt;span&gt;2px&lt;/span&gt;;&lt;span&gt;color&lt;/span&gt;:&lt;span&gt;#070A0C&lt;/span&gt;;}&lt;span&gt;
    .l-topmenu-welcome a&lt;/span&gt;{&lt;span&gt; color&lt;/span&gt;:&lt;span&gt;#E7E7E7&lt;/span&gt;;&lt;span&gt; text-decoration&lt;/span&gt;:&lt;span&gt;underline&lt;/span&gt;}&lt;span&gt; 
    .body-gray2014 #framecenter&lt;/span&gt;{&lt;span&gt;margin-top&lt;/span&gt;:&lt;span&gt;3px&lt;/span&gt;;}&lt;span&gt;
    .viewsourcelink &lt;/span&gt;{&lt;span&gt; background&lt;/span&gt;:&lt;span&gt;#B3D9F7&lt;/span&gt;;&lt;span&gt;  display&lt;/span&gt;:&lt;span&gt;block&lt;/span&gt;;&lt;span&gt; position&lt;/span&gt;:&lt;span&gt;absolute&lt;/span&gt;;&lt;span&gt; right&lt;/span&gt;:&lt;span&gt;10px&lt;/span&gt;;&lt;span&gt; top&lt;/span&gt;:&lt;span&gt;3px&lt;/span&gt;;&lt;span&gt; padding&lt;/span&gt;:&lt;span&gt;6px 4px&lt;/span&gt;;&lt;span&gt; color&lt;/span&gt;:&lt;span&gt;#333&lt;/span&gt;;&lt;span&gt; text-decoration&lt;/span&gt;:&lt;span&gt;underline&lt;/span&gt;;}&lt;span&gt;
    .viewsourcelink-over &lt;/span&gt;{&lt;span&gt;   background&lt;/span&gt;:&lt;span&gt;#81C0F2&lt;/span&gt;;}&lt;span&gt;
    .l-topmenu-welcome label &lt;/span&gt;{&lt;span&gt;color&lt;/span&gt;:&lt;span&gt;white&lt;/span&gt;;  }&lt;span&gt;
    #skinSelect &lt;/span&gt;{&lt;span&gt; margin-right&lt;/span&gt;:&lt;span&gt; 6px&lt;/span&gt;;}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 里面有鼠标点击菜单的效果看个人爱好去调。&lt;/p&gt;
&lt;h2&gt;5、现在的路由还是前台的首页 要写了跳转到后台打开App_Start目录下的RouteConfig文件配置路由&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Collections.Generic;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Linq;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Web;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Web.Mvc;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Web.Routing;

&lt;/span&gt;&lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; WyMVCLigerUIDemo20180626
{
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; RouteConfig
    {
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; RegisterRoutes(RouteCollection routes)
        {
            routes.IgnoreRoute(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;{resource}.axd/{*pathInfo}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);

            routes.MapRoute(
                name: &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Default&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                url: &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;{controller}/{action}/{id}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                defaults: &lt;/span&gt;&lt;span&gt;new&lt;/span&gt; { controller = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Home&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, action = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Index&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, id =&lt;span&gt; UrlParameter.Optional },
                 &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;namespaces: new[] { &quot;WyMVCLigerUIDemo20180626.Areas.Admin.Controllers&quot; }    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;默认进入后台&lt;/span&gt;
                 namespaces: &lt;span&gt;new&lt;/span&gt;[] { &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;WyMVCLigerUIDemo20180626.Controllers&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; }&lt;span&gt;//&lt;/span&gt;&lt;span&gt;默认前台&lt;/span&gt;
&lt;span&gt;            );
        }
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;p&gt;我这里是先进入前台，再在前台网址里面加上/Admin 就能进入到后台，所以还要配置一下Areas区域下面Admin中的AdminAreaRegistration文件&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Web.Mvc;

&lt;/span&gt;&lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; WyMVCLigerUIDemo20180626.Areas.Admin
{
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; AdminAreaRegistration : AreaRegistration 
    {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;public override string AreaName 
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;{
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;    get 
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;    {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;        return &quot;Admin&quot;;
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;    }
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;override&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; AreaName =&amp;gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Admin&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;override&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; RegisterArea(AreaRegistrationContext context) 
        {
            context.MapRoute(
                &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Admin_default&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Admin/{controller}/{action}/{id}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                &lt;/span&gt;&lt;span&gt;new&lt;/span&gt; { controller = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Home&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, action = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Index&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, id =&lt;span&gt; UrlParameter.Optional },
                 &lt;/span&gt;&lt;span&gt;new&lt;/span&gt;[] { &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;WyMVCLigerUIDemo20180626.Areas.Admin.Controllers&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; } &lt;span&gt;//&lt;/span&gt;&lt;span&gt;这一句要加上&lt;/span&gt;
&lt;span&gt;            );
        }
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;为了进去能正常先把字面自带的模板去了 不要用&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/787521/201806/787521-20180628202913081-589724929.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;注释了或者删除了就可以，前台页面配置跟路由中的一样就可以 默认控制器Home  页面Index。一样的吧Views下面的_ViewStart.cshtml文件注释了&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/787521/201806/787521-20180628203241241-1651532310.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;6、运行项目&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/787521/201806/787521-20180628203445893-1797735854.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;在地址栏后面加上/Admin进入后台 写了登录验证跳转登录界面&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/787521/201806/787521-20180628203645746-2022609350.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;你加了/Admin后面进入到登录界面会补全的用户admin密码admin888在后台Home界面是写好了的&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/787521/201806/787521-20180628204525404-1400692382.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;看分页信息&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/787521/201806/787521-20180628204631510-1931265073.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h2&gt;7、更改JS样式让菜单列表不充满整个左边&lt;/h2&gt;
&lt;p&gt;开始的时候界面是这个样子的&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/787521/201806/787521-20180628204848706-1614833009.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;他是填充满整个左边的菜单 个人看着不舒服 左找右找才知道是JS的问题&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/787521/201806/787521-20180628205242185-987984912.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;在网页调了半天才知道是这个控制  在里面liger.all.js里面查找l-accordion-content  找到1760行把里面这个要么把前面的点删除了 要么后面加上一点内容不让他控制l-accordion-content这个样式。注视了不行会出错 还在查找中。&lt;/p&gt;
&lt;h3&gt;总结：工作的原因没多少时间研究这些了，在大牛面前也是小菜一碟，用着别人的框架没有自己深入研究我觉得没意思，只知此然不知其所以然作为承租原来说有点悲哀了。只会复制加粘贴终究一事无成。关于后面的表格数据 搜索，新增、编辑还有系统的权限设置、参数配置、界面调整、样式等等这些慢慢研究，学而不止！代码我方群里有兴趣的小伙伴可以研究研究。欢迎指出不足之处悉听教导！&lt;/h3&gt;

</description>
<pubDate>Thu, 28 Jun 2018 13:03:00 +0000</pubDate>
<dc:creator>魏杨杨</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/w5942066/p/9240653.html</dc:identifier>
</item>
<item>
<title>设计模式（十七）—— 迭代器模式 - Answer.Geng</title>
<link>http://www.cnblogs.com/Answer-Geng/p/9240419.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/Answer-Geng/p/9240419.html</guid>
<description>&lt;h2 id=&quot;模式简介&quot;&gt;模式简介&lt;/h2&gt;
&lt;hr/&gt;&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;提供一种方法顺序访问一个聚合对象中的各个元素，而又不暴露该对象的内部表示。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;一个聚合对象，应该提供一个方法让用户访问它的元素，并且不暴露其内部结构。遍历的方式可能多种多样，我们不希望在这个聚合类中定义各种遍历的方法。这种情况下，就可以使用迭代器模式&lt;strong&gt;将对列表的访问和遍历从列表对象中分离出来并放入一个迭代器对象中&lt;/strong&gt;。&lt;/p&gt;
&lt;h2 id=&quot;结构分析&quot;&gt;结构分析&lt;/h2&gt;
&lt;hr/&gt;&lt;h3 id=&quot;uml类图&quot;&gt;UML类图&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/971601/201806/971601-20180628135100814-1953082233.png&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;角色说明&quot;&gt;角色说明&lt;/h3&gt;
&lt;p&gt;抽象聚合类，定义一个创建相应迭代器对象的接口。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;ConcreteAggregate&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;实际聚合类，实现创建相应迭代器对象的接口，返回一个ConcreteIterator实例。&lt;/p&gt;
&lt;p&gt;抽象迭代器，定义访问和遍历元素的接口。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;ConcreteIterator&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;实际迭代器，实现抽象迭代器定义的接口。&lt;/p&gt;
&lt;h3 id=&quot;工作原理&quot;&gt;工作原理&lt;/h3&gt;
&lt;p&gt;ConcreteIterator跟踪聚合中的当前对象，通过Next方法计算出待遍历的下一个对象。&lt;/p&gt;
&lt;h3 id=&quot;结构代码&quot;&gt;结构代码&lt;/h3&gt;
&lt;pre&gt;
&lt;code&gt;//抽象迭代器
abstract class Iterator
{
    public abstract object First();
    public abstract object Next();
    public abstract bool IsDone();
    public abstract object CurrentItem();
}

//抽象聚合类
abstract class Aggregate
{
    public abstract Iterator CreateIterator();
}

//实际聚合类，实现Aggregate中的抽象方法CreateIterator，返回相应的迭代器
class ConcreteAggregate : Aggregate
{
    private ArrayList _items = new ArrayList();
    public override Iterator CreateIterator()
    {
        return new ConcreteIterator(this);
    }

    public object this[int index]
    {
        get { return _items[index]; }
        set { _items.Insert(index, value); }
    }

    public int Count
    {
        get { return _items.Count; }
    }
}

//实际迭代器
class ConcreteIterator : Iterator
{
    private ConcreteAggregate _aggregate;
    private int _current;
    public ConcreteIterator(ConcreteAggregate aggregate)
    {
        _aggregate = aggregate;
    }
    public override object CurrentItem()
    {
        return _aggregate[_current];
    }

    public override object First()
    {
        return _aggregate[0];
    }

    public override bool IsDone()
    {
        return _current &amp;gt;= _aggregate.Count - 1;
    }

    public override object Next()
    {
        object next = null;
        if (_current &amp;lt; _aggregate.Count - 1)
        {
            next = _aggregate[++_current];
        }
        return next;
    }
}

//客户端调用
static void Main(string[] args)
{
    ConcreteAggregate aggregate = new ConcreteAggregate();
    aggregate[0] = &quot;A&quot;;
    aggregate[1] = &quot;B&quot;;
    aggregate[2] = &quot;C&quot;;
    aggregate[3] = &quot;D&quot;;

    var iterator = aggregate.CreateIterator();
    Console.WriteLine(iterator.First());
    while (!iterator.IsDone())
    {
        Console.WriteLine(iterator.Next());
    }
    Console.ReadLine();
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/971601/201806/971601-20180628145204401-372729255.png&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;示例分析&quot;&gt;示例分析&lt;/h2&gt;
&lt;hr/&gt;&lt;p&gt;本节我们通过一个遍历音乐播放列表的示例来讲述迭代器模式。首先创建一个歌曲类，包含两个属性：歌曲名称和演唱者。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;class Song
{
    public string Name { get; set; }
    public string Singer { get; set; }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;定义迭代器接口以及聚合接口。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;interface Iterator
{
    object First();
    object Next();
    bool IsDone();
    object CurrentItem();
}

interface IAggregate
{
    Iterator CreateIterator();
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;创建歌曲迭代器，包含一个歌曲列表对象，并提供对这个列表中元素访问的相关方法。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;class SongIterator : Iterator
{
    private SongCollection _songCollection;
    private int _current;

    public SongIterator(SongCollection songCollection)
    {
        this._songCollection = songCollection;
    }

    public object First()
    {
        return _songCollection[0];
    }

    public object Next()
    {
        object song = null;
        if (_current &amp;lt; _songCollection.Count - 1)
        {
            song = _songCollection[++_current];
        }
        return song;
    }

    public bool IsDone()
    {
        return _current &amp;gt;= _songCollection.Count - 1;
    }

    public object CurrentItem()
    {
        return _songCollection[_current];
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;歌曲聚合类，提供一个创建针对该聚合的迭代器的方法。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;class SongCollection : IAggregate
{
    private ArrayList _songs = new ArrayList();
    public Iterator CreateIterator()
    {
        return new SongIterator(this);
    }

    public object this[int index]
    {
        get { return _songs[index]; }
        set { _songs.Insert(index, value); }
    }

    public int Count
    {
        get { return _songs.Count; }
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;客户端调用：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;class Program
{
    static void Main(string[] args)
    {
        SongCollection songs = new SongCollection();
        songs[0] = new Song { Name = &quot;Dance To This&quot;, Singer = &quot;Troye Sivan&quot; };
        songs[1] = new Song { Name = &quot;Ferrari&quot;, Singer = &quot;Bebe Rexha&quot; };
        songs[2] = new Song { Name = &quot;Ocean&quot;, Singer = &quot;Martin Garrix&quot; };
        songs[3] = new Song { Name = &quot;Sober&quot;, Singer = &quot;Demi Lovato&quot; };
        songs[4] = new Song { Name = &quot;Only You&quot;, Singer = &quot;Cheat Codes&quot; };

        Iterator iterator = songs.CreateIterator();
        var firstSong = iterator.First() as Song;
        Console.WriteLine($&quot;First Song：{firstSong.Name},Singer：{firstSong.Singer}&quot;);
        while (!iterator.IsDone())
        {
            var currentSong = iterator.Next() as Song;

            Console.WriteLine($&quot;Now Playing：{ currentSong.Name},Singer：{currentSong.Singer}&quot;);
        }
        Console.ReadLine();
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;运行结果：&lt;br/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/971601/201806/971601-20180628201819386-1602154268.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;在C#中，我们可以使用foreach语句轻松遍历实现IEnumerable和IEnumerator接口的集合。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;List&amp;lt;Song&amp;gt; songs = new List&amp;lt;Song&amp;gt;();
songs.Add(new Song { Name = &quot;Dance To This&quot;, Singer = &quot;Troye Sivan&quot; });
songs.Add(new Song { Name = &quot;Ferrari&quot;, Singer = &quot;Bebe Rexha&quot; });
songs.Add(new Song { Name = &quot;Ocean&quot;, Singer = &quot;Martin Garrix&quot; });
songs.Add(new Song { Name = &quot;Sober&quot;, Singer = &quot;Demi Lovato&quot; });
songs.Add(new Song { Name = &quot;Only You&quot;, Singer = &quot;Cheat Codes&quot; });

foreach (var song in songs)
{
    Console.WriteLine($&quot;Now Playing：{ song.Name},Singer：{song.Singer}&quot;);
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;使用场景&quot;&gt;使用场景&lt;/h2&gt;
&lt;hr/&gt;</description>
<pubDate>Thu, 28 Jun 2018 12:54:00 +0000</pubDate>
<dc:creator>Answer.Geng</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/Answer-Geng/p/9240419.html</dc:identifier>
</item>
<item>
<title>自言自语Spring依赖注入(XML配置) - jolivan</title>
<link>http://www.cnblogs.com/Jolivan/p/9226289.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/Jolivan/p/9226289.html</guid>
<description>&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;em&gt;首先说一点，因为Spring中的对象默认为单例，想要获取它默认init_lazy默认为false。&lt;/em&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;下面的图是整个流程的流程图，下面跟的源码解析就是按照这个流程来的。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1204324/201806/1204324-20180627195035082-1219500689.png&quot; alt=&quot;&quot; width=&quot;1192&quot; height=&quot;496&quot;/&gt;&lt;/p&gt;

&lt;p&gt;至于基于XML依赖注入的过程，首先要找一个比较合适的入口，那就是getBean。那么具体是怎么实现的呢？首先写个测试方法：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
ClassPathXmlApplicationContext app = &lt;span&gt;new&lt;/span&gt; ClassPathXmlApplicationContext(&quot;application-common.xml&quot;,&quot;application-beans.xml&quot;,&quot;application_jdbc.xml&quot;&lt;span&gt;);
Object obj &lt;/span&gt;= app.getBean(&quot;member&quot;);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;第一句在我上篇文章---&lt;a id=&quot;cb_post_title_url&quot; class=&quot;postTitle2&quot; href=&quot;https://www.cnblogs.com/Jolivan/p/9168108.html&quot;&gt;Spring-BeanFactory基本工作流程&lt;/a&gt;中就用到了，主要是作为一个初始化IOC容器的入口，那么我们现在的场景是：IOC容器已经创建好，我们在XML文件中配置的信息已经加载到BeanDefinition中了，那么我们现在的目的就是去获得它。第二句就是我们本篇文章的入口：getBean。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;@Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; Object getBean(String name) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; BeansException {
        assertBeanFactoryActive();
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; getBeanFactory().getBean(name);
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;首先执行的是assertBeanFactoryActive方法，本人在上一篇分析Spring源码的时候就已经赞誉过Spring方法的命名，我们可以通过这个名字来判断它到底有什么意思，首先说明它是一个断言方法，然后判断的事BeanFactory是不是Active的，如果不是就直接抛异常了。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;protected&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; assertBeanFactoryActive() {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.active.get()) {
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.closed.get()) {
                &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; IllegalStateException(getDisplayName() + &quot; has been closed already&quot;&lt;span&gt;);
            }
            &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
                &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; IllegalStateException(getDisplayName() + &quot; has not been refreshed yet&quot;&lt;span&gt;);
            }
        }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后我们接着看getBean方法，可以看到，它会调getBeanFactory方法，他返回的是一个BeanFactory，然后调BeanFactory中的getBean方法：&lt;/p&gt;
&lt;p&gt;在之前的文章中提到过，Spring中做实事的方法都是以do开头的，我们可以看到，在getBean方法中调用了一个doGetBean方法，看名字可以了解到是真正拿到Bean的方法，在doGetBean方法中，首先先将我们传进来的指定的名字转化为管理Bean的名字，然后再创建一个名为bean的Object对象，作为我们要返回的实例。由于我们依赖注入的对象为单例，所以我们要做的就是首先在cache中检查有没有已经创建好的实例。（&lt;span&gt;Spring中从BeanDefinition创建的Bean不是存放在IOC中，而是存放在Cache容器中，IOC只是存放Bean关系&lt;/span&gt;），如果有Bean存在，就直接返回，如果Cache中没有这个Bean，那么就要创建它。&lt;/p&gt;
&lt;p&gt;在我们要自己创建Bean的时候，首先先检查这个Bean有没有相关的BeanDefinition，首先要解析出Bean的原始名称，然后现在当前BeanFactory里检查，如果没有，就去父BeanFactory里面找，如果还是找不到则沿着容器的继承体系向父级容器查找。当当前容器的父亲容器存在而且在当前容器中找不到这个bean时，就开始在父容器里找，会找父级BeanFactory的getBean方法。&lt;/p&gt;
&lt;p&gt;如果在当前的Bean里面有，则首先向容器中标记这个Bean已经被创建了，然后根据指定Bean名称获取其父级的Bean定义，主要解决Bean继承时子类合并父类公共属性问题。接着获取该Bean所有依赖Bean的名称，如果有依赖Bean存在，那么就递归获取依赖Bean，并将依赖Bean注册给当前的Bean。&lt;/p&gt;
&lt;p&gt;针对于Bean的类型（单例还是原型），Spring在创建Bean的过程都不一样，先看如果创建单例Bean的方法，首先看一下Spring在这是怎么处理的，它先使用一个内部匿名类，就是一个SingletonFactory类，然后将Bean实际名、Bean的BeanDefinition和Bean参数传入createBean方法（在下面会分析细节分析这个方法，这边只是大致过一下doGetBean方法）。并返回创建出的Bean实例。同样的，如果是一个原型Bean，因为每次都会建立一个新的实例，然后将获得的实例返回给之前创建的bean。如果Bean既不是单例，也不是原型的话，那么就要根据Bean定义资源中配置的&lt;a href=&quot;https://www.cnblogs.com/zrtqsk/p/3735273.html&quot; target=&quot;_blank&quot;&gt;生命周期&lt;/a&gt;范围来选择合适的实例化Bean方法（这种情况出现在web那块比较多，如session，reques等）。&lt;/p&gt;
&lt;p&gt;最后要对创建好的Bean进行检查，如果符合规范，就认为创建好了并且返回。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;AbstractBeanFactory.class
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取IOC容器中指定名称的Bean&lt;/span&gt;
&lt;span&gt;    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; Object getBean(String name) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; BeansException {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;doGetBean才是真正向IoC容器获取被管理Bean的过程&lt;/span&gt;
        &lt;span&gt;return&lt;/span&gt; doGetBean(name, &lt;span&gt;null&lt;/span&gt;, &lt;span&gt;null&lt;/span&gt;, &lt;span&gt;false&lt;/span&gt;&lt;span&gt;);
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;78&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;span&gt;  2&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;真正实现向IOC容器获取Bean的功能，也是触发依赖注入功能的地方&lt;/span&gt;
&lt;span&gt;  3&lt;/span&gt;     &lt;span&gt;protected&lt;/span&gt; &amp;lt;T&amp;gt; T doGetBean(&lt;span&gt;final&lt;/span&gt; String name, @Nullable &lt;span&gt;final&lt;/span&gt; Class&amp;lt;T&amp;gt;&lt;span&gt; requiredType,
&lt;/span&gt;&lt;span&gt;  4&lt;/span&gt;             @Nullable &lt;span&gt;final&lt;/span&gt; Object[] args, &lt;span&gt;boolean&lt;/span&gt; typeCheckOnly) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; BeansException {
&lt;/span&gt;&lt;span&gt;  5&lt;/span&gt; 
&lt;span&gt;  6&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;根据指定的名称获取被管理Bean的名称，剥离指定名称中对容器的相关依赖
&lt;/span&gt;&lt;span&gt;  7&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果指定的是别名，将别名转换为规范的Bean名称&lt;/span&gt;
&lt;span&gt;  8&lt;/span&gt;         &lt;span&gt;final&lt;/span&gt; String beanName =&lt;span&gt; transformedBeanName(name);
&lt;/span&gt;&lt;span&gt;  9&lt;/span&gt; &lt;span&gt;        Object bean;
&lt;/span&gt;&lt;span&gt; 10&lt;/span&gt; 
&lt;span&gt; 11&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Eagerly check singleton cache for manually registered singletons.
&lt;/span&gt;&lt;span&gt; 12&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;先从缓存中取是否已经有被创建过的单态类型的Bean
&lt;/span&gt;&lt;span&gt; 13&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;对于单例模式的Bean整个IOC容器中只创建一次，不需要重复创建&lt;/span&gt;
&lt;span&gt; 14&lt;/span&gt;         Object sharedInstance =&lt;span&gt; getSingleton(beanName);
&lt;/span&gt;&lt;span&gt; 15&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;IOC容器创建单例模式Bean实例对象&lt;/span&gt;
&lt;span&gt; 16&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (sharedInstance != &lt;span&gt;null&lt;/span&gt; &amp;amp;&amp;amp; args == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt; 17&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (logger.isDebugEnabled()) {
&lt;/span&gt;&lt;span&gt; 18&lt;/span&gt;                 &lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果指定名称的Bean在容器中已有单例模式的Bean被创建
&lt;/span&gt;&lt;span&gt; 19&lt;/span&gt;                 &lt;span&gt;//&lt;/span&gt;&lt;span&gt;直接返回已经创建的Bean&lt;/span&gt;
&lt;span&gt; 20&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (isSingletonCurrentlyInCreation(beanName)) {
&lt;/span&gt;&lt;span&gt; 21&lt;/span&gt;                     logger.debug(&quot;Returning eagerly cached instance of singleton bean '&quot; + beanName +
&lt;span&gt; 22&lt;/span&gt;                             &quot;' that is not fully initialized yet - a consequence of a circular reference&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 23&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt; 24&lt;/span&gt;                 &lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt; 25&lt;/span&gt;                     logger.debug(&quot;Returning cached instance of singleton bean '&quot; + beanName + &quot;'&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 26&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt; 27&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt; 28&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取给定Bean的实例对象，主要是完成FactoryBean的相关处理
&lt;/span&gt;&lt;span&gt; 29&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;注意：BeanFactory是管理容器中Bean的工厂，而FactoryBean是
&lt;/span&gt;&lt;span&gt; 30&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;创建创建对象的工厂Bean，两者之间有区别&lt;/span&gt;
&lt;span&gt; 31&lt;/span&gt;             bean = getObjectForBeanInstance(sharedInstance, name, beanName, &lt;span&gt;null&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 32&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 33&lt;/span&gt; 
&lt;span&gt; 34&lt;/span&gt;         &lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt; 35&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Fail if we're already creating this bean instance:
&lt;/span&gt;&lt;span&gt; 36&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt; We're assumably within a circular reference.
&lt;/span&gt;&lt;span&gt; 37&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;缓存没有正在创建的单例模式Bean
&lt;/span&gt;&lt;span&gt; 38&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;缓存中已经有已经创建的原型模式Bean
&lt;/span&gt;&lt;span&gt; 39&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;但是由于循环引用的问题导致实例化对象失败&lt;/span&gt;
&lt;span&gt; 40&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (isPrototypeCurrentlyInCreation(beanName)) {
&lt;/span&gt;&lt;span&gt; 41&lt;/span&gt;                 &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; BeanCurrentlyInCreationException(beanName);
&lt;/span&gt;&lt;span&gt; 42&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt; 43&lt;/span&gt; 
&lt;span&gt; 44&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Check if bean definition exists in this factory.
&lt;/span&gt;&lt;span&gt; 45&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;对IOC容器中是否存在指定名称的BeanDefinition进行检查，首先检查是否
&lt;/span&gt;&lt;span&gt; 46&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;能在当前的BeanFactory中获取的所需要的Bean，如果不能则委托当前容器
&lt;/span&gt;&lt;span&gt; 47&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;的父级容器去查找，如果还是找不到则沿着容器的继承体系向父级容器查找&lt;/span&gt;
&lt;span&gt; 48&lt;/span&gt;             BeanFactory parentBeanFactory =&lt;span&gt; getParentBeanFactory();
&lt;/span&gt;&lt;span&gt; 49&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;当前容器的父级容器存在，且当前容器中不存在指定名称的Bean&lt;/span&gt;
&lt;span&gt; 50&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (parentBeanFactory != &lt;span&gt;null&lt;/span&gt; &amp;amp;&amp;amp; !&lt;span&gt;containsBeanDefinition(beanName)) {
&lt;/span&gt;&lt;span&gt; 51&lt;/span&gt;                 &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Not found -&amp;gt; check parent.
&lt;/span&gt;&lt;span&gt; 52&lt;/span&gt;                 &lt;span&gt;//&lt;/span&gt;&lt;span&gt;解析指定Bean名称的原始名称&lt;/span&gt;
&lt;span&gt; 53&lt;/span&gt;                 String nameToLookup =&lt;span&gt; originalBeanName(name);
&lt;/span&gt;&lt;span&gt; 54&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt; (parentBeanFactory &lt;span&gt;instanceof&lt;/span&gt;&lt;span&gt; AbstractBeanFactory) {
&lt;/span&gt;&lt;span&gt; 55&lt;/span&gt;                     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; ((AbstractBeanFactory) parentBeanFactory).doGetBean(
&lt;/span&gt;&lt;span&gt; 56&lt;/span&gt; &lt;span&gt;                            nameToLookup, requiredType, args, typeCheckOnly);
&lt;/span&gt;&lt;span&gt; 57&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt; 58&lt;/span&gt;                 &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (args != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt; 59&lt;/span&gt;                     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Delegation to parent with explicit args.
&lt;/span&gt;&lt;span&gt; 60&lt;/span&gt;                     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;委派父级容器根据指定名称和显式的参数查找&lt;/span&gt;
&lt;span&gt; 61&lt;/span&gt;                     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; (T) parentBeanFactory.getBean(nameToLookup, args);
&lt;/span&gt;&lt;span&gt; 62&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt; 63&lt;/span&gt;                 &lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt; 64&lt;/span&gt;                     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; No args -&amp;gt; delegate to standard getBean method.
&lt;/span&gt;&lt;span&gt; 65&lt;/span&gt;                     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;委派父级容器根据指定名称和类型查找&lt;/span&gt;
&lt;span&gt; 66&lt;/span&gt;                     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; parentBeanFactory.getBean(nameToLookup, requiredType);
&lt;/span&gt;&lt;span&gt; 67&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt; 68&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt; 69&lt;/span&gt; 
&lt;span&gt; 70&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;创建的Bean是否需要进行类型验证，一般不需要&lt;/span&gt;
&lt;span&gt; 71&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;typeCheckOnly) {
&lt;/span&gt;&lt;span&gt; 72&lt;/span&gt;                 &lt;span&gt;//&lt;/span&gt;&lt;span&gt;向容器标记指定的Bean已经被创建&lt;/span&gt;
&lt;span&gt; 73&lt;/span&gt; &lt;span&gt;                markBeanAsCreated(beanName);
&lt;/span&gt;&lt;span&gt; 74&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt; 75&lt;/span&gt; 
&lt;span&gt; 76&lt;/span&gt;             &lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt; 77&lt;/span&gt;                 &lt;span&gt;//&lt;/span&gt;&lt;span&gt;根据指定Bean名称获取其父级的Bean定义
&lt;/span&gt;&lt;span&gt; 78&lt;/span&gt;                 &lt;span&gt;//&lt;/span&gt;&lt;span&gt;主要解决Bean继承时子类合并父类公共属性问题&lt;/span&gt;
&lt;span&gt; 79&lt;/span&gt;                 &lt;span&gt;final&lt;/span&gt; RootBeanDefinition mbd =&lt;span&gt; getMergedLocalBeanDefinition(beanName);
&lt;/span&gt;&lt;span&gt; 80&lt;/span&gt; &lt;span&gt;                checkMergedBeanDefinition(mbd, beanName, args);
&lt;/span&gt;&lt;span&gt; 81&lt;/span&gt; 
&lt;span&gt; 82&lt;/span&gt;                 &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Guarantee initialization of beans that the current bean depends on.
&lt;/span&gt;&lt;span&gt; 83&lt;/span&gt;                 &lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取当前Bean所有依赖Bean的名称&lt;/span&gt;
&lt;span&gt; 84&lt;/span&gt;                 String[] dependsOn =&lt;span&gt; mbd.getDependsOn();
&lt;/span&gt;&lt;span&gt; 85&lt;/span&gt;                 &lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果当前Bean有依赖Bean&lt;/span&gt;
&lt;span&gt; 86&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt; (dependsOn != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt; 87&lt;/span&gt;                     &lt;span&gt;for&lt;/span&gt;&lt;span&gt; (String dep : dependsOn) {
&lt;/span&gt;&lt;span&gt; 88&lt;/span&gt;                         &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (isDependent(beanName, dep)) {
&lt;/span&gt;&lt;span&gt; 89&lt;/span&gt;                             &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; BeanCreationException(mbd.getResourceDescription(), beanName,
&lt;/span&gt;&lt;span&gt; 90&lt;/span&gt;                                     &quot;Circular depends-on relationship between '&quot; + beanName + &quot;' and '&quot; + dep + &quot;'&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 91&lt;/span&gt; &lt;span&gt;                        }
&lt;/span&gt;&lt;span&gt; 92&lt;/span&gt;                         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;递归调用getBean方法，获取当前Bean的依赖Bean&lt;/span&gt;
&lt;span&gt; 93&lt;/span&gt; &lt;span&gt;                        registerDependentBean(dep, beanName);
&lt;/span&gt;&lt;span&gt; 94&lt;/span&gt;                         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;把被依赖Bean注册给当前依赖的Bean&lt;/span&gt;
&lt;span&gt; 95&lt;/span&gt; &lt;span&gt;                        getBean(dep);
&lt;/span&gt;&lt;span&gt; 96&lt;/span&gt; &lt;span&gt;                    }
&lt;/span&gt;&lt;span&gt; 97&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt; 98&lt;/span&gt; 
&lt;span&gt; 99&lt;/span&gt;                 &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Create bean instance.
&lt;/span&gt;&lt;span&gt;100&lt;/span&gt;                 &lt;span&gt;//&lt;/span&gt;&lt;span&gt;创建单例模式Bean的实例对象&lt;/span&gt;
&lt;span&gt;101&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (mbd.isSingleton()) {
&lt;/span&gt;&lt;span&gt;102&lt;/span&gt;                     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;这里使用了一个匿名内部类，创建Bean实例对象，并且注册给所依赖的对象&lt;/span&gt;
&lt;span&gt;103&lt;/span&gt;                     sharedInstance = getSingleton(beanName, () -&amp;gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;104&lt;/span&gt;                         &lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;105&lt;/span&gt;                             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;创建一个指定Bean实例对象，如果有父级继承，则合并子类和父类的定义&lt;/span&gt;
&lt;span&gt;106&lt;/span&gt;                             &lt;span&gt;return&lt;/span&gt;&lt;span&gt; createBean(beanName, mbd, args);
&lt;/span&gt;&lt;span&gt;107&lt;/span&gt; &lt;span&gt;                        }
&lt;/span&gt;&lt;span&gt;108&lt;/span&gt;                         &lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (BeansException ex) {
&lt;/span&gt;&lt;span&gt;109&lt;/span&gt;                             &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Explicitly remove instance from singleton cache: It might have been put there
&lt;/span&gt;&lt;span&gt;110&lt;/span&gt;                             &lt;span&gt;//&lt;/span&gt;&lt;span&gt; eagerly by the creation process, to allow for circular reference resolution.
&lt;/span&gt;&lt;span&gt;111&lt;/span&gt;                             &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Also remove any beans that received a temporary reference to the bean.
&lt;/span&gt;&lt;span&gt;112&lt;/span&gt;                             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;显式地从容器单例模式Bean缓存中清除实例对象&lt;/span&gt;
&lt;span&gt;113&lt;/span&gt; &lt;span&gt;                            destroySingleton(beanName);
&lt;/span&gt;&lt;span&gt;114&lt;/span&gt;                             &lt;span&gt;throw&lt;/span&gt;&lt;span&gt; ex;
&lt;/span&gt;&lt;span&gt;115&lt;/span&gt; &lt;span&gt;                        }
&lt;/span&gt;&lt;span&gt;116&lt;/span&gt; &lt;span&gt;                    });
&lt;/span&gt;&lt;span&gt;117&lt;/span&gt;                     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取给定Bean的实例对象&lt;/span&gt;
&lt;span&gt;118&lt;/span&gt;                     bean =&lt;span&gt; getObjectForBeanInstance(sharedInstance, name, beanName, mbd);
&lt;/span&gt;&lt;span&gt;119&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;120&lt;/span&gt; 
&lt;span&gt;121&lt;/span&gt;                 &lt;span&gt;//&lt;/span&gt;&lt;span&gt;IOC容器创建原型模式Bean实例对象&lt;/span&gt;
&lt;span&gt;122&lt;/span&gt;                 &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (mbd.isPrototype()) {
&lt;/span&gt;&lt;span&gt;123&lt;/span&gt;                     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; It's a prototype -&amp;gt; create a new instance.
&lt;/span&gt;&lt;span&gt;124&lt;/span&gt;                     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;原型模式(Prototype)是每次都会创建一个新的对象&lt;/span&gt;
&lt;span&gt;125&lt;/span&gt;                     Object prototypeInstance = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;126&lt;/span&gt;                     &lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;127&lt;/span&gt;                         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;回调beforePrototypeCreation方法，默认的功能是注册当前创建的原型对象&lt;/span&gt;
&lt;span&gt;128&lt;/span&gt; &lt;span&gt;                        beforePrototypeCreation(beanName);
&lt;/span&gt;&lt;span&gt;129&lt;/span&gt;                         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;创建指定Bean对象实例&lt;/span&gt;
&lt;span&gt;130&lt;/span&gt;                         prototypeInstance =&lt;span&gt; createBean(beanName, mbd, args);
&lt;/span&gt;&lt;span&gt;131&lt;/span&gt; &lt;span&gt;                    }
&lt;/span&gt;&lt;span&gt;132&lt;/span&gt;                     &lt;span&gt;finally&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;133&lt;/span&gt;                         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;回调afterPrototypeCreation方法，默认的功能告诉IOC容器指定Bean的原型对象不再创建&lt;/span&gt;
&lt;span&gt;134&lt;/span&gt; &lt;span&gt;                        afterPrototypeCreation(beanName);
&lt;/span&gt;&lt;span&gt;135&lt;/span&gt; &lt;span&gt;                    }
&lt;/span&gt;&lt;span&gt;136&lt;/span&gt;                     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取给定Bean的实例对象&lt;/span&gt;
&lt;span&gt;137&lt;/span&gt;                     bean =&lt;span&gt; getObjectForBeanInstance(prototypeInstance, name, beanName, mbd);
&lt;/span&gt;&lt;span&gt;138&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;139&lt;/span&gt; 
&lt;span&gt;140&lt;/span&gt;                 &lt;span&gt;//&lt;/span&gt;&lt;span&gt;要创建的Bean既不是单例模式，也不是原型模式，则根据Bean定义资源中
&lt;/span&gt;&lt;span&gt;141&lt;/span&gt;                 &lt;span&gt;//&lt;/span&gt;&lt;span&gt;配置的生命周期范围，选择实例化Bean的合适方法，这种在Web应用程序中
&lt;/span&gt;&lt;span&gt;142&lt;/span&gt;                 &lt;span&gt;//&lt;/span&gt;&lt;span&gt;比较常用，如：request、session、application等生命周期&lt;/span&gt;
&lt;span&gt;143&lt;/span&gt;                 &lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;144&lt;/span&gt;                     String scopeName =&lt;span&gt; mbd.getScope();
&lt;/span&gt;&lt;span&gt;145&lt;/span&gt;                     &lt;span&gt;final&lt;/span&gt; Scope scope = &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.scopes.get(scopeName);
&lt;/span&gt;&lt;span&gt;146&lt;/span&gt;                     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;Bean定义资源中没有配置生命周期范围，则Bean定义不合法&lt;/span&gt;
&lt;span&gt;147&lt;/span&gt;                     &lt;span&gt;if&lt;/span&gt; (scope == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;148&lt;/span&gt;                         &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; IllegalStateException(&quot;No Scope registered for scope name '&quot; + scopeName + &quot;'&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;149&lt;/span&gt; &lt;span&gt;                    }
&lt;/span&gt;&lt;span&gt;150&lt;/span&gt;                     &lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;151&lt;/span&gt;                         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;这里又使用了一个匿名内部类，获取一个指定生命周期范围的实例&lt;/span&gt;
&lt;span&gt;152&lt;/span&gt;                         Object scopedInstance = scope.get(beanName, () -&amp;gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;153&lt;/span&gt; &lt;span&gt;                            beforePrototypeCreation(beanName);
&lt;/span&gt;&lt;span&gt;154&lt;/span&gt;                             &lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;155&lt;/span&gt;                                 &lt;span&gt;return&lt;/span&gt;&lt;span&gt; createBean(beanName, mbd, args);
&lt;/span&gt;&lt;span&gt;156&lt;/span&gt; &lt;span&gt;                            }
&lt;/span&gt;&lt;span&gt;157&lt;/span&gt;                             &lt;span&gt;finally&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;158&lt;/span&gt; &lt;span&gt;                                afterPrototypeCreation(beanName);
&lt;/span&gt;&lt;span&gt;159&lt;/span&gt; &lt;span&gt;                            }
&lt;/span&gt;&lt;span&gt;160&lt;/span&gt; &lt;span&gt;                        });
&lt;/span&gt;&lt;span&gt;161&lt;/span&gt;                         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取给定Bean的实例对象&lt;/span&gt;
&lt;span&gt;162&lt;/span&gt;                         bean =&lt;span&gt; getObjectForBeanInstance(scopedInstance, name, beanName, mbd);
&lt;/span&gt;&lt;span&gt;163&lt;/span&gt; &lt;span&gt;                    }
&lt;/span&gt;&lt;span&gt;164&lt;/span&gt;                     &lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (IllegalStateException ex) {
&lt;/span&gt;&lt;span&gt;165&lt;/span&gt;                         &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; BeanCreationException(beanName,
&lt;/span&gt;&lt;span&gt;166&lt;/span&gt;                                 &quot;Scope '&quot; + scopeName + &quot;' is not active for the current thread; consider &quot; +
&lt;span&gt;167&lt;/span&gt;                                 &quot;defining a scoped proxy for this bean if you intend to refer to it from a singleton&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;168&lt;/span&gt; &lt;span&gt;                                ex);
&lt;/span&gt;&lt;span&gt;169&lt;/span&gt; &lt;span&gt;                    }
&lt;/span&gt;&lt;span&gt;170&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;171&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;172&lt;/span&gt;             &lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (BeansException ex) {
&lt;/span&gt;&lt;span&gt;173&lt;/span&gt; &lt;span&gt;                cleanupAfterBeanCreationFailure(beanName);
&lt;/span&gt;&lt;span&gt;174&lt;/span&gt;                 &lt;span&gt;throw&lt;/span&gt;&lt;span&gt; ex;
&lt;/span&gt;&lt;span&gt;175&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;176&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;177&lt;/span&gt; 
&lt;span&gt;178&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Check if required type matches the type of the actual bean instance.
&lt;/span&gt;&lt;span&gt;179&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;对创建的Bean实例对象进行类型检查&lt;/span&gt;
&lt;span&gt;180&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (requiredType != &lt;span&gt;null&lt;/span&gt; &amp;amp;&amp;amp; !&lt;span&gt;requiredType.isInstance(bean)) {
&lt;/span&gt;&lt;span&gt;181&lt;/span&gt;             &lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;182&lt;/span&gt;                 T convertedBean =&lt;span&gt; getTypeConverter().convertIfNecessary(bean, requiredType);
&lt;/span&gt;&lt;span&gt;183&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt; (convertedBean == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;184&lt;/span&gt;                     &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; BeanNotOfRequiredTypeException(name, requiredType, bean.getClass());
&lt;/span&gt;&lt;span&gt;185&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;186&lt;/span&gt;                 &lt;span&gt;return&lt;/span&gt;&lt;span&gt; convertedBean;
&lt;/span&gt;&lt;span&gt;187&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;188&lt;/span&gt;             &lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (TypeMismatchException ex) {
&lt;/span&gt;&lt;span&gt;189&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (logger.isDebugEnabled()) {
&lt;/span&gt;&lt;span&gt;190&lt;/span&gt;                     logger.debug(&quot;Failed to convert bean '&quot; + name + &quot;' to required type '&quot; +
&lt;span&gt;191&lt;/span&gt;                             ClassUtils.getQualifiedName(requiredType) + &quot;'&quot;&lt;span&gt;, ex);
&lt;/span&gt;&lt;span&gt;192&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;193&lt;/span&gt;                 &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; BeanNotOfRequiredTypeException(name, requiredType, bean.getClass());
&lt;/span&gt;&lt;span&gt;194&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;195&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;196&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; (T) bean;
&lt;/span&gt;&lt;span&gt;197&lt;/span&gt;     }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上面比较详细的介绍了Bean实例是如何创建的，那么接下来主要是重点分析一下几个比较重要的方法的细节。先说一下如果Cache容器中有之前已经创建过的该Bean的实例，在31行，我们进入getObjectForBeanInstance方法。&lt;/p&gt;
&lt;p&gt;我们已经拿到了在Cache中拿到了该Bean的FactoryBean,在这说一下FactoryBean和BeanFactory的区别，FactoryBean是用来创建生产Bean的工厂的Bean（有点绕）而BeanFactory是管理Bean的工厂。然后进入getObjectForBeanInstance方法，首先我们会去判断这个Bean是不是一个工厂Bean，如果不是工厂Bean，或者说我们想要得到的就是一个工厂，那么就直接返回它。如果是工厂Bean并且我们要得到的是一个Bean实例，那么首先看一下工厂Bean的缓存中有木有实例，如果有就返回，如果没有，就会调用getObjectFromFactoryBean方法来获得Bean实例。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;44&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;protected&lt;/span&gt;&lt;span&gt; Object getObjectForBeanInstance(
            Object beanInstance, String name, String beanName, @Nullable RootBeanDefinition mbd) {

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Don't let calling code try to dereference the factory if the bean isn't a factory.
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;容器已经得到了Bean实例对象，这个实例对象可能是一个普通的Bean，
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;也可能是一个工厂Bean，如果是一个工厂Bean，则使用它创建一个Bean实例对象，
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果调用本身就想获得一个容器的引用，则指定返回这个工厂Bean实例对象
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果指定的名称是容器的解引用(dereference，即是对象本身而非内存地址)，
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;且Bean实例也不是创建Bean实例对象的工厂Bean&lt;/span&gt;
        &lt;span&gt;if&lt;/span&gt; (BeanFactoryUtils.isFactoryDereference(name) &amp;amp;&amp;amp; !(beanInstance &lt;span&gt;instanceof&lt;/span&gt;&lt;span&gt; FactoryBean)) {
            &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; BeanIsNotAFactoryException(transformedBeanName(name), beanInstance.getClass());
        }

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Now we have the bean instance, which may be a normal bean or a FactoryBean.
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; If it's a FactoryBean, we use it to create a bean instance, unless the
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; caller actually wants a reference to the factory.
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果Bean实例不是工厂Bean，或者指定名称是容器的解引用，
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;调用者向获取对容器的引用，则直接返回当前的Bean实例&lt;/span&gt;
        &lt;span&gt;if&lt;/span&gt; (!(beanInstance &lt;span&gt;instanceof&lt;/span&gt; FactoryBean) ||&lt;span&gt; BeanFactoryUtils.isFactoryDereference(name)) {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; beanInstance;
        }

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;处理指定名称不是容器的解引用，或者根据名称获取的Bean实例对象是一个工厂Bean
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;使用工厂Bean创建一个Bean的实例对象&lt;/span&gt;
        Object object = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (mbd == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;从Bean工厂缓存中获取给定名称的Bean实例对象&lt;/span&gt;
            object =&lt;span&gt; getCachedObjectForFactoryBean(beanName);
        }
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;让Bean工厂生产给定名称的Bean对象实例&lt;/span&gt;
        &lt;span&gt;if&lt;/span&gt; (object == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Return bean instance from factory.&lt;/span&gt;
            FactoryBean&amp;lt;?&amp;gt; factory = (FactoryBean&amp;lt;?&amp;gt;&lt;span&gt;) beanInstance;
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Caches object obtained from FactoryBean if it is a singleton.
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果从Bean工厂生产的Bean是单态模式的，则缓存&lt;/span&gt;
            &lt;span&gt;if&lt;/span&gt; (mbd == &lt;span&gt;null&lt;/span&gt; &amp;amp;&amp;amp;&lt;span&gt; containsBeanDefinition(beanName)) {
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;从容器中获取指定名称的Bean定义，如果继承基类，则合并基类相关属性&lt;/span&gt;
                mbd =&lt;span&gt; getMergedLocalBeanDefinition(beanName);
            }
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果从容器得到Bean定义信息，并且Bean定义信息不是虚构的，
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;则让工厂Bean生产Bean实例对象&lt;/span&gt;
            &lt;span&gt;boolean&lt;/span&gt; synthetic = (mbd != &lt;span&gt;null&lt;/span&gt; &amp;amp;&amp;amp;&lt;span&gt; mbd.isSynthetic());
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;调用FactoryBeanRegistrySupport类的getObjectFromFactoryBean方法，
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;实现工厂Bean生产Bean对象实例的过程&lt;/span&gt;
            object = getObjectFromFactoryBean(factory, beanName, !&lt;span&gt;synthetic);
        }
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; object;
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;接下来我们看一看是怎么从FactoryBean里拿到Bean实例的，先进入getObjectFromFactoryBean方法。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;46&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;Bean工厂生产Bean实例对象&lt;/span&gt;
    &lt;span&gt;protected&lt;/span&gt; Object getObjectFromFactoryBean(FactoryBean&amp;lt;?&amp;gt; factory, String beanName, &lt;span&gt;boolean&lt;/span&gt;&lt;span&gt; shouldPostProcess) {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;Bean工厂是单态模式，并且Bean工厂缓存中存在指定名称的Bean实例对象&lt;/span&gt;
        &lt;span&gt;if&lt;/span&gt; (factory.isSingleton() &amp;amp;&amp;amp;&lt;span&gt; containsSingleton(beanName)) {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;多线程同步，以防止数据不一致&lt;/span&gt;
            &lt;span&gt;synchronized&lt;/span&gt;&lt;span&gt; (getSingletonMutex()) {
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;直接从Bean工厂缓存中获取指定名称的Bean实例对象&lt;/span&gt;
                Object object = &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.factoryBeanObjectCache.get(beanName);
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;Bean工厂缓存中没有指定名称的实例对象，则生产该实例对象&lt;/span&gt;
                &lt;span&gt;if&lt;/span&gt; (object == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
                    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;调用Bean工厂的getObject方法生产指定Bean的实例对象&lt;/span&gt;
                    object =&lt;span&gt; doGetObjectFromFactoryBean(factory, beanName);
                    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Only post-process and store if not put there already during getObject() call above
                    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; (e.g. because of circular reference processing triggered by custom getBean calls)&lt;/span&gt;
                    Object alreadyThere = &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.factoryBeanObjectCache.get(beanName);
                    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (alreadyThere != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
                        object &lt;/span&gt;=&lt;span&gt; alreadyThere;
                    }
                    &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
                        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (shouldPostProcess) {
                            &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
                                object &lt;/span&gt;=&lt;span&gt; postProcessObjectFromFactoryBean(object, beanName);
                            }
                            &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Throwable ex) {
                                &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; BeanCreationException(beanName,
                                        &lt;/span&gt;&quot;Post-processing of FactoryBean's singleton object failed&quot;&lt;span&gt;, ex);
                            }
                        }
                        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;将生产的实例对象添加到Bean工厂缓存中&lt;/span&gt;
                        &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.factoryBeanObjectCache.put(beanName, object);
                    }
                }
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; object;
            }
        }
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;调用Bean工厂的getObject方法生产指定Bean的实例对象&lt;/span&gt;
        &lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
            Object object &lt;/span&gt;=&lt;span&gt; doGetObjectFromFactoryBean(factory, beanName);
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (shouldPostProcess) {
                &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
                    object &lt;/span&gt;=&lt;span&gt; postProcessObjectFromFactoryBean(object, beanName);
                }
                &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Throwable ex) {
                    &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; BeanCreationException(beanName, &quot;Post-processing of FactoryBean's object failed&quot;&lt;span&gt;, ex);
                }
            }
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; object;
        }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;由于我们现在创建的Bean为单例模式，所以要保证线程安全，首先先判断在FactoryBean里有没有该Bean的缓存，如果没有就自己创建，方法为doGetBeanFromFactoryBean，并且将创建好的Bean存到Cache里。那么我们到现在又看到了一个做实事的方法，看名字这个方法应该是生产Bean的方法。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;调用Bean工厂的getObject方法生产指定Bean的实例对象&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; Object doGetObjectFromFactoryBean(&lt;span&gt;final&lt;/span&gt; FactoryBean&amp;lt;?&amp;gt; factory, &lt;span&gt;final&lt;/span&gt;&lt;span&gt; String beanName)
            &lt;/span&gt;&lt;span&gt;throws&lt;/span&gt;&lt;span&gt; BeanCreationException {

        Object object;
        &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (System.getSecurityManager() != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
                AccessControlContext acc &lt;/span&gt;=&lt;span&gt; getAccessControlContext();
                &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
                    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;实现PrivilegedExceptionAction接口的匿名内置类
                    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;根据JVM检查权限，然后决定BeanFactory创建实例对象&lt;/span&gt;
                    object = AccessController.doPrivileged((PrivilegedExceptionAction&amp;lt;Object&amp;gt;) () -&amp;gt;&lt;span&gt;
                            factory.getObject(), acc);
                }
                &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (PrivilegedActionException pae) {
                    &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt;&lt;span&gt; pae.getException();
                }
            }
            &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;调用BeanFactory接口实现类的创建对象方法&lt;/span&gt;
                object =&lt;span&gt; factory.getObject();
            }
        }
        &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (FactoryBeanNotInitializedException ex) {
            &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; BeanCurrentlyInCreationException(beanName, ex.toString());
        }
        &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Throwable ex) {
            &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; BeanCreationException(beanName, &quot;FactoryBean threw exception on object creation&quot;&lt;span&gt;, ex);
        }

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Do not accept a null value for a FactoryBean that's not fully
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; initialized yet: Many FactoryBeans just return null then.
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;创建出来的实例对象为null，或者因为单态对象正在创建而返回null&lt;/span&gt;
        &lt;span&gt;if&lt;/span&gt; (object == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (isSingletonCurrentlyInCreation(beanName)) {
                &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; BeanCurrentlyInCreationException(
                        beanName, &lt;/span&gt;&quot;FactoryBean which is currently in creation returned null from getObject&quot;&lt;span&gt;);
            }
            object &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; NullBean();
        }
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; object;
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;通过这个方法，我们就得到了单例Bean的实例（不管它有没有在Cache里存在）。&lt;/p&gt;
&lt;p&gt;同样，如果缓存中没有被创建的Bean，那么在之前那段代码中（doGetBean），就不会走31行那一块，而是接着往下走，到101行，执行到createBean方法，这里用到了lamda表达式，new了一个内部类objectFactory。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;51&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;AbstractAutowireCapableBeanFactory.class
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;创建Bean实例对象&lt;/span&gt;
&lt;span&gt;    @Override
    &lt;/span&gt;&lt;span&gt;protected&lt;/span&gt;&lt;span&gt; Object createBean(String beanName, RootBeanDefinition mbd, @Nullable Object[] args)
            &lt;/span&gt;&lt;span&gt;throws&lt;/span&gt;&lt;span&gt; BeanCreationException {

        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (logger.isDebugEnabled()) {
            logger.debug(&lt;/span&gt;&quot;Creating instance of bean '&quot; + beanName + &quot;'&quot;&lt;span&gt;);
        }
        RootBeanDefinition mbdToUse &lt;/span&gt;=&lt;span&gt; mbd;

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Make sure bean class is actually resolved at this point, and
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; clone the bean definition in case of a dynamically resolved Class
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; which cannot be stored in the shared merged bean definition.
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;判断需要创建的Bean是否可以实例化，即是否可以通过当前的类加载器加载&lt;/span&gt;
        Class&amp;lt;?&amp;gt; resolvedClass =&lt;span&gt; resolveBeanClass(mbd, beanName);
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (resolvedClass != &lt;span&gt;null&lt;/span&gt; &amp;amp;&amp;amp; !mbd.hasBeanClass() &amp;amp;&amp;amp; mbd.getBeanClassName() != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
            mbdToUse &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; RootBeanDefinition(mbd);
            mbdToUse.setBeanClass(resolvedClass);
        }

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Prepare method overrides.
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;校验和准备Bean中的方法覆盖&lt;/span&gt;
        &lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
            mbdToUse.prepareMethodOverrides();
        }
        &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (BeanDefinitionValidationException ex) {
            &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; BeanDefinitionStoreException(mbdToUse.getResourceDescription(),
                    beanName, &lt;/span&gt;&quot;Validation of method overrides failed&quot;&lt;span&gt;, ex);
        }

        &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Give BeanPostProcessors a chance to return a proxy instead of the target bean instance.
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果Bean配置了初始化前和初始化后的处理器，则试图返回一个需要创建Bean的代理对象&lt;/span&gt;
            Object bean =&lt;span&gt; resolveBeforeInstantiation(beanName, mbdToUse);
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (bean != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; bean;
            }
        }
        &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Throwable ex) {
            &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; BeanCreationException(mbdToUse.getResourceDescription(), beanName,
                    &lt;/span&gt;&quot;BeanPostProcessor before instantiation of bean failed&quot;&lt;span&gt;, ex);
        }

        &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;创建Bean的入口&lt;/span&gt;
            Object beanInstance =&lt;span&gt; doCreateBean(beanName, mbdToUse, args);
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (logger.isDebugEnabled()) {
                logger.debug(&lt;/span&gt;&quot;Finished creating instance of bean '&quot; + beanName + &quot;'&quot;&lt;span&gt;);
            }
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; beanInstance;
        }
        &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (BeanCreationException ex) {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; A previously detected exception with proper bean creation context already...&lt;/span&gt;
            &lt;span&gt;throw&lt;/span&gt;&lt;span&gt; ex;
        }
        &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (ImplicitlyAppearedSingletonException ex) {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; An IllegalStateException to be communicated up to DefaultSingletonBeanRegistry...&lt;/span&gt;
            &lt;span&gt;throw&lt;/span&gt;&lt;span&gt; ex;
        }
        &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Throwable ex) {
            &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; BeanCreationException(
                    mbdToUse.getResourceDescription(), beanName, &lt;/span&gt;&quot;Unexpected exception during bean creation&quot;&lt;span&gt;, ex);
        }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在这里，会调用doCreateBean方法&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;63&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;AbstractAutowireCapableBeanFactory.class
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;真正创建Bean的方法&lt;/span&gt;
    &lt;span&gt;protected&lt;/span&gt; Object doCreateBean(&lt;span&gt;final&lt;/span&gt; String beanName, &lt;span&gt;final&lt;/span&gt; RootBeanDefinition mbd, &lt;span&gt;final&lt;/span&gt;&lt;span&gt; @Nullable Object[] args)
            &lt;/span&gt;&lt;span&gt;throws&lt;/span&gt;&lt;span&gt; BeanCreationException {

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Instantiate the bean.
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;封装被创建的Bean对象&lt;/span&gt;
        BeanWrapper instanceWrapper = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (mbd.isSingleton()) {
            instanceWrapper &lt;/span&gt;= &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.factoryBeanInstanceCache.remove(beanName);
        }
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (instanceWrapper == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
            instanceWrapper &lt;/span&gt;=&lt;span&gt; createBeanInstance(beanName, mbd, args);
        }
        &lt;/span&gt;&lt;span&gt;final&lt;/span&gt; Object bean =&lt;span&gt; instanceWrapper.getWrappedInstance();
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取实例化对象的类型&lt;/span&gt;
        Class&amp;lt;?&amp;gt; beanType =&lt;span&gt; instanceWrapper.getWrappedClass();
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (beanType != NullBean.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;) {
            mbd.resolvedTargetType &lt;/span&gt;=&lt;span&gt; beanType;
        }

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Allow post-processors to modify the merged bean definition.
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;调用PostProcessor后置处理器&lt;/span&gt;
        &lt;span&gt;synchronized&lt;/span&gt;&lt;span&gt; (mbd.postProcessingLock) {
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;mbd.postProcessed) {
                &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
                    applyMergedBeanDefinitionPostProcessors(mbd, beanType, beanName);
                }
                &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Throwable ex) {
                    &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; BeanCreationException(mbd.getResourceDescription(), beanName,
                            &lt;/span&gt;&quot;Post-processing of merged bean definition failed&quot;&lt;span&gt;, ex);
                }
                mbd.postProcessed &lt;/span&gt;= &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
            }
        }

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Eagerly cache singletons to be able to resolve circular references
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; even when triggered by lifecycle interfaces like BeanFactoryAware.
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;向容器中缓存单例模式的Bean对象，以防循环引用&lt;/span&gt;
        &lt;span&gt;boolean&lt;/span&gt; earlySingletonExposure = (mbd.isSingleton() &amp;amp;&amp;amp; &lt;span&gt;this&lt;/span&gt;.allowCircularReferences &amp;amp;&amp;amp;&lt;span&gt;
                isSingletonCurrentlyInCreation(beanName));
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (earlySingletonExposure) {
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (logger.isDebugEnabled()) {
                logger.debug(&lt;/span&gt;&quot;Eagerly caching bean '&quot; + beanName +
                        &quot;' to allow for resolving potential circular references&quot;&lt;span&gt;);
            }
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;这里是一个匿名内部类，为了防止循环引用，尽早持有对象的引用&lt;/span&gt;
            addSingletonFactory(beanName, () -&amp;gt;&lt;span&gt; getEarlyBeanReference(beanName, mbd, bean));
        }

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Initialize the bean instance.
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;Bean对象的初始化，依赖注入在此触发
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;这个exposedObject在初始化完成之后返回作为依赖注入完成后的Bean&lt;/span&gt;
        Object exposedObject =&lt;span&gt; bean;
        &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;将Bean实例对象封装，并且Bean定义中配置的属性值赋值给实例对象&lt;/span&gt;
&lt;span&gt;&lt;span&gt;            populateBean&lt;/span&gt;(beanName, mbd, instanceWrapper);
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;初始化Bean对象&lt;/span&gt;
            exposedObject =&lt;span&gt; initializeBean(beanName, exposedObject, mbd);
        }
        &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Throwable ex) {
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (ex &lt;span&gt;instanceof&lt;/span&gt; BeanCreationException &amp;amp;&amp;amp;&lt;span&gt; beanName.equals(((BeanCreationException) ex).getBeanName())) {
                &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt;&lt;span&gt; (BeanCreationException) ex;
            }
            &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
                &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; BeanCreationException(
                        mbd.getResourceDescription(), beanName, &lt;/span&gt;&quot;Initialization of bean failed&quot;&lt;span&gt;, ex);
            }
        }

        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (earlySingletonExposure) {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取指定名称的已注册的单例模式Bean对象&lt;/span&gt;
            Object earlySingletonReference = getSingleton(beanName, &lt;span&gt;false&lt;/span&gt;&lt;span&gt;);
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (earlySingletonReference != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;根据名称获取的已注册的Bean和正在实例化的Bean是同一个&lt;/span&gt;
                &lt;span&gt;if&lt;/span&gt; (exposedObject ==&lt;span&gt; bean) {
                    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;当前实例化的Bean初始化完成&lt;/span&gt;
                    exposedObject =&lt;span&gt; earlySingletonReference;
                }
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;当前Bean依赖其他Bean，并且当发生循环引用时不允许新创建实例对象&lt;/span&gt;
                &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;this&lt;/span&gt;.allowRawInjectionDespiteWrapping &amp;amp;&amp;amp;&lt;span&gt; hasDependentBean(beanName)) {
                    String[] dependentBeans &lt;/span&gt;=&lt;span&gt; getDependentBeans(beanName);
                    Set&lt;/span&gt;&amp;lt;String&amp;gt; actualDependentBeans = &lt;span&gt;new&lt;/span&gt; LinkedHashSet&amp;lt;&amp;gt;&lt;span&gt;(dependentBeans.length);
                    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取当前Bean所依赖的其他Bean&lt;/span&gt;
                    &lt;span&gt;for&lt;/span&gt;&lt;span&gt; (String dependentBean : dependentBeans) {
                        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;对依赖Bean进行类型检查&lt;/span&gt;
                        &lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;removeSingletonIfCreatedForTypeCheckOnly(dependentBean)) {
                            actualDependentBeans.add(dependentBean);
                        }
                    }
                    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;actualDependentBeans.isEmpty()) {
                        &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; BeanCurrentlyInCreationException(beanName,
                                &lt;/span&gt;&quot;Bean with name '&quot; + beanName + &quot;' has been injected into other beans [&quot; +&lt;span&gt;
                                StringUtils.collectionToCommaDelimitedString(actualDependentBeans) &lt;/span&gt;+
                                &quot;] in its raw version as part of a circular reference, but has eventually been &quot; +
                                &quot;wrapped. This means that said other beans do not use the final version of the &quot; +
                                &quot;bean. This is often the result of over-eager type matching - consider using &quot; +
                                &quot;'getBeanNamesOfType' with the 'allowEagerInit' flag turned off, for example.&quot;&lt;span&gt;);
                    }
                }
            }
        }

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Register bean as disposable.
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;注册完成依赖注入的Bean&lt;/span&gt;
        &lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
            registerDisposableBeanIfNecessary(beanName, bean, mbd);
        }
        &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (BeanDefinitionValidationException ex) {
            &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; BeanCreationException(
                    mbd.getResourceDescription(), beanName, &lt;/span&gt;&quot;Invalid destruction signature&quot;&lt;span&gt;, ex);
        }

        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; exposedObject;
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这里首先创建一个包装类，用到了&lt;a href=&quot;https://blog.csdn.net/zhiweianran/article/details/7919129&quot; target=&quot;_blank&quot;&gt;BeanWrapper&lt;/a&gt;来包装Bean，然后到createBeanInstance方法使得生成一个Bean的Wrapper类。并保证容器缓存中有此Bean对象的单例模式。然后调用populateBean方法，将BeanDefinition的属性赋值给实例对象，并调用initializeBean方法初始化Bean对象。并对Bean对象进行一系列的检查，然后返回生成的Bean。&lt;/p&gt;
&lt;p&gt;首先我们先看一下createBeanInstance方法，这个方法返回的是一个BeanWrapper对象，首先确定Bean是可以实例化的，然后就对Bean进行实例化。实例化的方法有三种：（1）工厂方法 （2）容器自动装配 （3）Bean的构造方法&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;53&quot;&gt;
&lt;pre&gt;
&lt;span&gt;protected&lt;/span&gt;&lt;span&gt; BeanWrapper createBeanInstance(String beanName, RootBeanDefinition mbd, @Nullable Object[] args) {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Make sure bean class is actually resolved at this point.
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;检查确认Bean是可实例化的&lt;/span&gt;
        Class&amp;lt;?&amp;gt; beanClass =&lt;span&gt; resolveBeanClass(mbd, beanName);

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;使用工厂方法对Bean进行实例化&lt;/span&gt;
        &lt;span&gt;if&lt;/span&gt; (beanClass != &lt;span&gt;null&lt;/span&gt; &amp;amp;&amp;amp; !Modifier.isPublic(beanClass.getModifiers()) &amp;amp;&amp;amp; !&lt;span&gt;mbd.isNonPublicAccessAllowed()) {
            &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; BeanCreationException(mbd.getResourceDescription(), beanName,
                    &lt;/span&gt;&quot;Bean class isn't public, and non-public access not allowed: &quot; +&lt;span&gt; beanClass.getName());
        }

        Supplier&lt;/span&gt;&amp;lt;?&amp;gt; instanceSupplier =&lt;span&gt; mbd.getInstanceSupplier();
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (instanceSupplier != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; obtainFromSupplier(instanceSupplier, beanName);
        }

        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (mbd.getFactoryMethodName() != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)  {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;调用工厂方法实例化&lt;/span&gt;
            &lt;span&gt;return&lt;/span&gt;&lt;span&gt; instantiateUsingFactoryMethod(beanName, mbd, args);
        }

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Shortcut when re-creating the same bean...
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;使用容器的自动装配方法进行实例化&lt;/span&gt;
        &lt;span&gt;boolean&lt;/span&gt; resolved = &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;boolean&lt;/span&gt; autowireNecessary = &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (args == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
            &lt;/span&gt;&lt;span&gt;synchronized&lt;/span&gt;&lt;span&gt; (mbd.constructorArgumentLock) {
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (mbd.resolvedConstructorOrFactoryMethod != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
                    resolved &lt;/span&gt;= &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
                    autowireNecessary &lt;/span&gt;=&lt;span&gt; mbd.constructorArgumentsResolved;
                }
            }
        }
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (resolved) {
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (autowireNecessary) {
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;配置了自动装配属性，使用容器的自动装配实例化
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;容器的自动装配是根据参数类型匹配Bean的构造方法&lt;/span&gt;
                &lt;span&gt;return&lt;/span&gt; autowireConstructor(beanName, mbd, &lt;span&gt;null&lt;/span&gt;, &lt;span&gt;null&lt;/span&gt;&lt;span&gt;);
            }
            &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;使用默认的无参构造方法实例化&lt;/span&gt;
                &lt;span&gt;return&lt;/span&gt;&lt;span&gt; instantiateBean(beanName, mbd);
            }
        }

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Need to determine the constructor...
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;使用Bean的构造方法进行实例化&lt;/span&gt;
        Constructor&amp;lt;?&amp;gt;[] ctors =&lt;span&gt; determineConstructorsFromBeanPostProcessors(beanClass, beanName);
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (ctors != &lt;span&gt;null&lt;/span&gt; ||&lt;span&gt;
                mbd.getResolvedAutowireMode() &lt;/span&gt;== RootBeanDefinition.AUTOWIRE_CONSTRUCTOR ||&lt;span&gt;
                mbd.hasConstructorArgumentValues() &lt;/span&gt;|| !&lt;span&gt;ObjectUtils.isEmpty(args))  {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;使用容器的自动装配特性，调用匹配的构造方法实例化&lt;/span&gt;
            &lt;span&gt;return&lt;/span&gt;&lt;span&gt; autowireConstructor(beanName, mbd, ctors, args);
        }

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; No special handling: simply use no-arg constructor.
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;使用默认的无参构造方法实例化&lt;/span&gt;
        &lt;span&gt;return&lt;/span&gt;&lt;span&gt; instantiateBean(beanName, mbd);
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;首先是工厂方法实例化Bean，调用的是instantiateUsingFactoryMethod方法，这边不详细分析了。&lt;/p&gt;
&lt;p&gt;之后是使用容器自动装配来进行实例化，如果匹配了自动装配属性，那么久使用容器自动装配实例化，如果没有，则用构造方法进行实例化，这里说一下用构造方法进行实例化的过程&lt;/p&gt;
&lt;p&gt;无参构造方法instantiateBean方法，这里就是实例Bean的方法。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;44&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;使用默认的无参构造方法实例化Bean对象&lt;/span&gt;
    &lt;span&gt;protected&lt;/span&gt; BeanWrapper instantiateBean(&lt;span&gt;final&lt;/span&gt; String beanName, &lt;span&gt;final&lt;/span&gt;&lt;span&gt; RootBeanDefinition mbd) {
        &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
            Object beanInstance;
            &lt;/span&gt;&lt;span&gt;final&lt;/span&gt; BeanFactory parent = &lt;span&gt;this&lt;/span&gt;&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取系统的安全管理接口，JDK标准的安全管理API&lt;/span&gt;
            &lt;span&gt;if&lt;/span&gt; (System.getSecurityManager() != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;这里是一个匿名内置类，根据实例化策略创建实例对象&lt;/span&gt;
                beanInstance = AccessController.doPrivileged((PrivilegedAction&amp;lt;Object&amp;gt;) () -&amp;gt;&lt;span&gt;
                        getInstantiationStrategy().instantiate(mbd, beanName, parent),
                        getAccessControlContext());
            }
            &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;将实例化的对象封装起来&lt;/span&gt;
                beanInstance =&lt;span&gt; getInstantiationStrategy().instantiate(mbd, beanName, parent);
            }
            BeanWrapper bw &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; BeanWrapperImpl(beanInstance);
            initBeanWrapper(bw);
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; bw;
        }
        &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Throwable ex) {
            &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; BeanCreationException(
                    mbd.getResourceDescription(), beanName, &lt;/span&gt;&quot;Instantiation of bean failed&quot;&lt;span&gt;, ex);
        }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;首先实例对象，用到的是instantiate方法，然后再将其包装成BeanWrapper&lt;/p&gt;
&lt;p&gt;然后到instantiate方法。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;使用初始化策略实例化Bean对象&lt;/span&gt;
&lt;span&gt;    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; Object instantiate(RootBeanDefinition bd, @Nullable String beanName, BeanFactory owner) {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Don't override the class with CGLIB if no overrides.
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果Bean定义中没有方法覆盖，则就不需要CGLIB父类类的方法&lt;/span&gt;
        &lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;bd.hasMethodOverrides()) {
            Constructor&lt;/span&gt;&amp;lt;?&amp;gt;&lt;span&gt; constructorToUse;
            &lt;/span&gt;&lt;span&gt;synchronized&lt;/span&gt;&lt;span&gt; (bd.constructorArgumentLock) {
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取对象的构造方法或工厂方法&lt;/span&gt;
                constructorToUse = (Constructor&amp;lt;?&amp;gt;&lt;span&gt;) bd.resolvedConstructorOrFactoryMethod;
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果没有构造方法且没有工厂方法&lt;/span&gt;
                &lt;span&gt;if&lt;/span&gt; (constructorToUse == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
                    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;使用JDK的反射机制，判断要实例化的Bean是否是接口&lt;/span&gt;
                    &lt;span&gt;final&lt;/span&gt; Class&amp;lt;?&amp;gt; clazz =&lt;span&gt; bd.getBeanClass();
                    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (clazz.isInterface()) {
                        &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; BeanInstantiationException(clazz, &quot;Specified class is an interface&quot;&lt;span&gt;);
                    }
                    &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
                        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (System.getSecurityManager() != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
                            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;这里是一个匿名内置类，使用反射机制获取Bean的构造方法&lt;/span&gt;
                            constructorToUse =&lt;span&gt; AccessController.doPrivileged(
                                    (PrivilegedExceptionAction&lt;/span&gt;&amp;lt;Constructor&amp;lt;?&amp;gt;&amp;gt;) () -&amp;gt;&lt;span&gt; clazz.getDeclaredConstructor());
                        }
                        &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
                            constructorToUse &lt;/span&gt;=&lt;span&gt;    clazz.getDeclaredConstructor();
                        }
                        bd.resolvedConstructorOrFactoryMethod &lt;/span&gt;=&lt;span&gt; constructorToUse;
                    }
                    &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Throwable ex) {
                        &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; BeanInstantiationException(clazz, &quot;No default constructor found&quot;&lt;span&gt;, ex);
                    }
                }
            }
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;使用BeanUtils实例化，通过反射机制调用”构造方法.newInstance(arg)”来进行实例化&lt;/span&gt;
            &lt;span&gt;return&lt;/span&gt;&lt;span&gt; BeanUtils.instantiateClass(constructorToUse);
        }
        &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Must generate CGLIB subclass.
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;使用CGLIB来实例化对象&lt;/span&gt;
            &lt;span&gt;return&lt;/span&gt;&lt;span&gt; instantiateWithMethodInjection(bd, beanName, owner);
        }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;首先检查Bean中有没有覆盖父类方法，如果没有的话，就不用CGLIB父类类的方法，然后通过反射获得Bean的构造方法，之后通过BeanUtils使用构造方法进行实例化。如果有覆盖方法，那么就要使用CGLIB来进行实例化&lt;/p&gt;
&lt;p&gt;然后调用instantiateWithMethodInjection方法&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;@Override
    &lt;/span&gt;&lt;span&gt;protected&lt;/span&gt;&lt;span&gt; Object instantiateWithMethodInjection(RootBeanDefinition bd, @Nullable String beanName, BeanFactory owner) {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; instantiateWithMethodInjection(bd, beanName, owner, &lt;span&gt;null&lt;/span&gt;&lt;span&gt;);
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;@Override
    &lt;/span&gt;&lt;span&gt;protected&lt;/span&gt;&lt;span&gt; Object instantiateWithMethodInjection(RootBeanDefinition bd, @Nullable String beanName, BeanFactory owner,
            @Nullable Constructor&lt;/span&gt;&amp;lt;?&amp;gt;&lt;span&gt; ctor, @Nullable Object... args) {

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Must generate CGLIB subclass...&lt;/span&gt;
        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; CglibSubclassCreator(bd, owner).instantiate(ctor, args);
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;到这里可以看到调用使用CGLIB的instantiate方法。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; Object instantiate(@Nullable Constructor&amp;lt;?&amp;gt;&lt;span&gt; ctor, @Nullable Object... args) {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;创建代理子类&lt;/span&gt;
            Class&amp;lt;?&amp;gt; subclass = createEnhancedSubclass(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.beanDefinition);
            Object instance;
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (ctor == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
                instance &lt;/span&gt;=&lt;span&gt; BeanUtils.instantiateClass(subclass);
            }
            &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
                &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
                    Constructor&lt;/span&gt;&amp;lt;?&amp;gt; enhancedSubclassConstructor =&lt;span&gt; subclass.getConstructor(ctor.getParameterTypes());
                    instance &lt;/span&gt;=&lt;span&gt; enhancedSubclassConstructor.newInstance(args);
                }
                &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception ex) {
                    &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; BeanInstantiationException(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.beanDefinition.getBeanClass(),
                            &lt;/span&gt;&quot;Failed to invoke constructor for CGLIB enhanced subclass [&quot; + subclass.getName() + &quot;]&quot;&lt;span&gt;, ex);
                }
            }
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; SPR-10785: set callbacks directly on the instance instead of in the
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; enhanced class (via the Enhancer) in order to avoid memory leaks.&lt;/span&gt;
            Factory factory =&lt;span&gt; (Factory) instance;
            factory.setCallbacks(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Callback[] {NoOp.INSTANCE,
                    &lt;/span&gt;&lt;span&gt;new&lt;/span&gt; LookupOverrideMethodInterceptor(&lt;span&gt;this&lt;/span&gt;.beanDefinition, &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.owner),
                    &lt;/span&gt;&lt;span&gt;new&lt;/span&gt; ReplaceOverrideMethodInterceptor(&lt;span&gt;this&lt;/span&gt;.beanDefinition, &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.owner)});
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; instance;
        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后调用instantiateClass方法&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &amp;lt;T&amp;gt; T instantiateClass(Class&amp;lt;T&amp;gt; clazz) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; BeanInstantiationException {
        Assert.notNull(clazz, &lt;/span&gt;&quot;Class must not be null&quot;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (clazz.isInterface()) {
            &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; BeanInstantiationException(clazz, &quot;Specified class is an interface&quot;&lt;span&gt;);
        }
        &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
            Constructor&lt;/span&gt;&amp;lt;T&amp;gt; ctor = (KotlinDetector.isKotlinType(clazz) ?&lt;span&gt;
                    KotlinDelegate.findPrimaryConstructor(clazz) : clazz.getDeclaredConstructor());
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (ctor == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
                &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; BeanInstantiationException(clazz, &quot;No default constructor found&quot;&lt;span&gt;);
            }
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; instantiateClass(ctor);
        }
        &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (NoSuchMethodException ex) {
            &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; BeanInstantiationException(clazz, &quot;No default constructor found&quot;&lt;span&gt;, ex);
        }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;46&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &amp;lt;T&amp;gt; T instantiateClass(Constructor&amp;lt;T&amp;gt; ctor, Object... args) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; BeanInstantiationException {
        Assert.notNull(ctor, &lt;/span&gt;&quot;Constructor must not be null&quot;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
            ReflectionUtils.makeAccessible(ctor);
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; (KotlinDetector.isKotlinType(ctor.getDeclaringClass()) ?&lt;span&gt;
                    KotlinDelegate.instantiateClass(ctor, args) : ctor.newInstance(args));
        }
        &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (InstantiationException ex) {
            &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; BeanInstantiationException(ctor, &quot;Is it an abstract class?&quot;&lt;span&gt;, ex);
        }
        &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (IllegalAccessException ex) {
            &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; BeanInstantiationException(ctor, &quot;Is the constructor accessible?&quot;&lt;span&gt;, ex);
        }
        &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (IllegalArgumentException ex) {
            &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; BeanInstantiationException(ctor, &quot;Illegal arguments for constructor&quot;&lt;span&gt;, ex);
        }
        &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (InvocationTargetException ex) {
            &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; BeanInstantiationException(ctor, &quot;Constructor threw exception&quot;&lt;span&gt;, ex.getTargetException());
        }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;回到instantiateBean方法，我们得到了实例化的Bean对象，那么接下来就是将他封装起来。调用了BeanWrapperImpl的构造方法，并初始化这个BeanWrapper然后将其返回。&lt;/p&gt;
&lt;p&gt;之后回到createBeanInstance方法，刚才介绍的是用无参构造函数方法将其进行实例化封装，接下来如果有参数，那么就会使用容器的自动装配特性，调用匹配的构造方法进行实例化。&lt;/p&gt;
&lt;p&gt;再回到之前调用createBeanInstance方法的时候，也就是在AbstractAutowireCapableBeanFactory这个类里的doCreateBean方法中，会调用populateBean方法，这里就是真正的依赖注入。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;58&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;将Bean属性设置到生成的实例对象上&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt;     &lt;span&gt;protected&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; populateBean(String beanName, RootBeanDefinition mbd, @Nullable BeanWrapper bw) {
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (bw == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (mbd.hasPropertyValues()) {
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;                 &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; BeanCreationException(
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;                         mbd.getResourceDescription(), beanName, &quot;Cannot apply property values to null instance&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;             &lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;                 &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Skip property population phase for null instance.&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt;                 &lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; 
&lt;span&gt;14&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Give any InstantiationAwareBeanPostProcessors the opportunity to modify the
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; state of the bean before properties are set. This can be used, for example,
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; to support styles of field injection.&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt;         &lt;span&gt;boolean&lt;/span&gt; continueWithPropertyPopulation = &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; 
&lt;span&gt;19&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (!mbd.isSynthetic() &amp;amp;&amp;amp;&lt;span&gt; hasInstantiationAwareBeanPostProcessors()) {
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;             &lt;span&gt;for&lt;/span&gt;&lt;span&gt; (BeanPostProcessor bp : getBeanPostProcessors()) {
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt; (bp &lt;span&gt;instanceof&lt;/span&gt;&lt;span&gt; InstantiationAwareBeanPostProcessor) {
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;                     InstantiationAwareBeanPostProcessor ibp =&lt;span&gt; (InstantiationAwareBeanPostProcessor) bp;
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;                     &lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;ibp.postProcessAfterInstantiation(bw.getWrappedInstance(), beanName)) {
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;                         continueWithPropertyPopulation = &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;                         &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; &lt;span&gt;                    }
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; 
&lt;span&gt;31&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;continueWithPropertyPopulation) {
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取容器在解析Bean定义资源时为BeanDefiniton中设置的属性值&lt;/span&gt;
&lt;span&gt;35&lt;/span&gt;         PropertyValues pvs = (mbd.hasPropertyValues() ? mbd.getPropertyValues() : &lt;span&gt;null&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt; 
&lt;span&gt;37&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;对依赖注入处理，首先处理autowiring自动装配的依赖注入&lt;/span&gt;
&lt;span&gt;38&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (mbd.getResolvedAutowireMode() == RootBeanDefinition.AUTOWIRE_BY_NAME ||
&lt;span&gt;39&lt;/span&gt;                 mbd.getResolvedAutowireMode() ==&lt;span&gt; RootBeanDefinition.AUTOWIRE_BY_TYPE) {
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt;             MutablePropertyValues newPvs = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; MutablePropertyValues(pvs);
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt; 
&lt;span&gt;42&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Add property values based on autowire by name if applicable.
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;根据Bean名称进行autowiring自动装配处理&lt;/span&gt;
&lt;span&gt;44&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (mbd.getResolvedAutowireMode() ==&lt;span&gt; RootBeanDefinition.AUTOWIRE_BY_NAME) {
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt; &lt;span&gt;                autowireByName(beanName, mbd, bw, newPvs);
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt; 
&lt;span&gt;48&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Add property values based on autowire by type if applicable.
&lt;/span&gt;&lt;span&gt;49&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;根据Bean类型进行autowiring自动装配处理&lt;/span&gt;
&lt;span&gt;50&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (mbd.getResolvedAutowireMode() ==&lt;span&gt; RootBeanDefinition.AUTOWIRE_BY_TYPE) {
&lt;/span&gt;&lt;span&gt;51&lt;/span&gt; &lt;span&gt;                autowireByType(beanName, mbd, bw, newPvs);
&lt;/span&gt;&lt;span&gt;52&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;53&lt;/span&gt; 
&lt;span&gt;54&lt;/span&gt;             pvs =&lt;span&gt; newPvs;
&lt;/span&gt;&lt;span&gt;55&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;56&lt;/span&gt; 
&lt;span&gt;57&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;对非autowiring的属性进行依赖注入处理&lt;/span&gt;
&lt;span&gt;58&lt;/span&gt; 
&lt;span&gt;59&lt;/span&gt;         &lt;span&gt;boolean&lt;/span&gt; hasInstAwareBpps =&lt;span&gt; hasInstantiationAwareBeanPostProcessors();
&lt;/span&gt;&lt;span&gt;60&lt;/span&gt;         &lt;span&gt;boolean&lt;/span&gt; needsDepCheck = (mbd.getDependencyCheck() !=&lt;span&gt; RootBeanDefinition.DEPENDENCY_CHECK_NONE);
&lt;/span&gt;&lt;span&gt;61&lt;/span&gt; 
&lt;span&gt;62&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (hasInstAwareBpps ||&lt;span&gt; needsDepCheck) {
&lt;/span&gt;&lt;span&gt;63&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (pvs == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;64&lt;/span&gt;                 pvs =&lt;span&gt; mbd.getPropertyValues();
&lt;/span&gt;&lt;span&gt;65&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;66&lt;/span&gt;             PropertyDescriptor[] filteredPds =&lt;span&gt; filterPropertyDescriptorsForDependencyCheck(bw, mbd.allowCaching);
&lt;/span&gt;&lt;span&gt;67&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (hasInstAwareBpps) {
&lt;/span&gt;&lt;span&gt;68&lt;/span&gt;                 &lt;span&gt;for&lt;/span&gt;&lt;span&gt; (BeanPostProcessor bp : getBeanPostProcessors()) {
&lt;/span&gt;&lt;span&gt;69&lt;/span&gt;                     &lt;span&gt;if&lt;/span&gt; (bp &lt;span&gt;instanceof&lt;/span&gt;&lt;span&gt; InstantiationAwareBeanPostProcessor) {
&lt;/span&gt;&lt;span&gt;70&lt;/span&gt;                         InstantiationAwareBeanPostProcessor ibp =&lt;span&gt; (InstantiationAwareBeanPostProcessor) bp;
&lt;/span&gt;&lt;span&gt;71&lt;/span&gt;                         pvs =&lt;span&gt; ibp.postProcessPropertyValues(pvs, filteredPds, bw.getWrappedInstance(), beanName);
&lt;/span&gt;&lt;span&gt;72&lt;/span&gt;                         &lt;span&gt;if&lt;/span&gt; (pvs == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;73&lt;/span&gt;                             &lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;74&lt;/span&gt; &lt;span&gt;                        }
&lt;/span&gt;&lt;span&gt;75&lt;/span&gt; &lt;span&gt;                    }
&lt;/span&gt;&lt;span&gt;76&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;77&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;78&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (needsDepCheck) {
&lt;/span&gt;&lt;span&gt;79&lt;/span&gt; &lt;span&gt;                checkDependencies(beanName, mbd, filteredPds, pvs);
&lt;/span&gt;&lt;span&gt;80&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;81&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;82&lt;/span&gt; 
&lt;span&gt;83&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (pvs != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;84&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;对属性进行注入&lt;/span&gt;
&lt;span&gt;85&lt;/span&gt; &lt;span&gt;            applyPropertyValues(beanName, mbd, bw, pvs);
&lt;/span&gt;&lt;span&gt;86&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;87&lt;/span&gt;     }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;首先会检查这个包装类是否为空，在保证不为空的前提下，首先获取BeanDefinition中的资源属性值，然后对其进行自动装配处理，最后对属性进行注入。&lt;/p&gt;
&lt;p&gt;在populateBean方法的最后，会对属性进行注入，调用applyPropertyValues方法&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;54&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;解析并注入依赖属性的过程&lt;/span&gt;
    &lt;span&gt;protected&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; applyPropertyValues(String beanName, BeanDefinition mbd, BeanWrapper bw, PropertyValues pvs) {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (pvs.isEmpty()) {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
        }

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;封装属性值&lt;/span&gt;
        MutablePropertyValues mpvs = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
        List&lt;/span&gt;&amp;lt;PropertyValue&amp;gt;&lt;span&gt; original;

        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (System.getSecurityManager() != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (bw &lt;span&gt;instanceof&lt;/span&gt;&lt;span&gt; BeanWrapperImpl) {
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置安全上下文，JDK安全机制&lt;/span&gt;
&lt;span&gt;                ((BeanWrapperImpl) bw).setSecurityContext(getAccessControlContext());
            }
        }

        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (pvs &lt;span&gt;instanceof&lt;/span&gt;&lt;span&gt; MutablePropertyValues) {
            mpvs &lt;/span&gt;=&lt;span&gt; (MutablePropertyValues) pvs;
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;属性值已经转换&lt;/span&gt;
            &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (mpvs.isConverted()) {
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Shortcut: use the pre-converted values as-is.&lt;/span&gt;
                &lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
                    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;为实例化对象设置属性值&lt;/span&gt;
&lt;span&gt;                    bw.setPropertyValues(mpvs);
                    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
                }
                &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (BeansException ex) {
                    &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; BeanCreationException(
                            mbd.getResourceDescription(), beanName, &lt;/span&gt;&quot;Error setting property values&quot;&lt;span&gt;, ex);
                }
            }
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取属性值对象的原始类型值&lt;/span&gt;
            original =&lt;span&gt; mpvs.getPropertyValueList();
        }
        &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
            original &lt;/span&gt;=&lt;span&gt; Arrays.asList(pvs.getPropertyValues());
        }

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取用户自定义的类型转换&lt;/span&gt;
        TypeConverter converter =&lt;span&gt; getCustomTypeConverter();
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (converter == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
            converter &lt;/span&gt;=&lt;span&gt; bw;
        }
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;创建一个Bean定义属性值解析器，将Bean定义中的属性值解析为Bean实例对象的实际值&lt;/span&gt;
        BeanDefinitionValueResolver valueResolver = &lt;span&gt;new&lt;/span&gt; BeanDefinitionValueResolver(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;, beanName, mbd, converter);

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Create a deep copy, resolving any references for values.

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;为属性的解析值创建一个拷贝，将拷贝的数据注入到实例对象中&lt;/span&gt;
        List&amp;lt;PropertyValue&amp;gt; deepCopy = &lt;span&gt;new&lt;/span&gt; ArrayList&amp;lt;&amp;gt;&lt;span&gt;(original.size());
        &lt;/span&gt;&lt;span&gt;boolean&lt;/span&gt; resolveNecessary = &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt; (PropertyValue pv : original) {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;属性值不需要转换&lt;/span&gt;
            &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (pv.isConverted()) {
                deepCopy.add(pv);
            }
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;属性值需要转换&lt;/span&gt;
            &lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
                String propertyName &lt;/span&gt;=&lt;span&gt; pv.getName();
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;原始的属性值，即转换之前的属性值&lt;/span&gt;
                Object originalValue =&lt;span&gt; pv.getValue();
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;转换属性值，例如将引用转换为IOC容器中实例化对象引用&lt;/span&gt;
                Object resolvedValue =&lt;span&gt; valueResolver.resolveValueIfNecessary(pv, originalValue);
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;转换之后的属性值&lt;/span&gt;
                Object convertedValue =&lt;span&gt; resolvedValue;
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;属性值是否可以转换&lt;/span&gt;
                &lt;span&gt;boolean&lt;/span&gt; convertible = bw.isWritableProperty(propertyName) &amp;amp;&amp;amp;
                        !&lt;span&gt;PropertyAccessorUtils.isNestedOrIndexedProperty(propertyName);
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (convertible) {
                    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;使用用户自定义的类型转换器转换属性值&lt;/span&gt;
                    convertedValue =&lt;span&gt; convertForProperty(resolvedValue, propertyName, bw, converter);
                }
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Possibly store converted value in merged bean definition,
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; in order to avoid re-conversion for every created bean instance.
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;存储转换后的属性值，避免每次属性注入时的转换工作&lt;/span&gt;
                &lt;span&gt;if&lt;/span&gt; (resolvedValue ==&lt;span&gt; originalValue) {
                    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (convertible) {
                        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置属性转换之后的值&lt;/span&gt;
&lt;span&gt;                        pv.setConvertedValue(convertedValue);
                    }
                    deepCopy.add(pv);
                }
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;属性是可转换的，且属性原始值是字符串类型，且属性的原始类型值不是
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;动态生成的字符串，且属性的原始值不是集合或者数组类型&lt;/span&gt;
                &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (convertible &amp;amp;&amp;amp; originalValue &lt;span&gt;instanceof&lt;/span&gt; TypedStringValue &amp;amp;&amp;amp;
                        !((TypedStringValue) originalValue).isDynamic() &amp;amp;&amp;amp;
                        !(convertedValue &lt;span&gt;instanceof&lt;/span&gt; Collection ||&lt;span&gt; ObjectUtils.isArray(convertedValue))) {
                    pv.setConvertedValue(convertedValue);
                    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;重新封装属性的值&lt;/span&gt;
&lt;span&gt;                    deepCopy.add(pv);
                }
                &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
                    resolveNecessary &lt;/span&gt;= &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
                    deepCopy.add(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; PropertyValue(pv, convertedValue));
                }
            }
        }
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (mpvs != &lt;span&gt;null&lt;/span&gt; &amp;amp;&amp;amp; !&lt;span&gt;resolveNecessary) {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;标记属性值已经转换过&lt;/span&gt;
&lt;span&gt;            mpvs.setConverted();
        }

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Set our (possibly massaged) deep copy.
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;进行属性依赖注入&lt;/span&gt;
        &lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
            bw.setPropertyValues(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; MutablePropertyValues(deepCopy));
        }
        &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (BeansException ex) {
            &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; BeanCreationException(
                    mbd.getResourceDescription(), beanName, &lt;/span&gt;&quot;Error setting property values&quot;&lt;span&gt;, ex);
        }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在这里核心调用的是resolveValueIfNecessary方法，将BeanDefinition里的一些属性解析出来，通过反射new出来一个对象。BeanDefinition相当于保存在内存中的配置文件，保存着所有跟这个类属性相关的信息，依赖注入就是把BeanDefinition这个信息读出来，通过反射机制或者代理等机制创建对象。一个Bean对应着一个BeanDefinition&lt;/p&gt;
&lt;p&gt;新创建的对象不会放在IOC容器里，而是会存入到另外一个cache容器。IOC容器存放的是一个关系。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//BeanDefinitionValueResolver.class&lt;br/&gt;//&lt;/span&gt;&lt;span&gt;解析属性值，对注入类型进行转换&lt;/span&gt;
&lt;span&gt;    @Nullable
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; Object resolveValueIfNecessary(Object argName, @Nullable Object value) {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; We must check each value to see whether it requires a runtime reference
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; to another bean to be resolved.
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;对引用类型的属性进行解析&lt;/span&gt;
        &lt;span&gt;if&lt;/span&gt; (value &lt;span&gt;instanceof&lt;/span&gt;&lt;span&gt; RuntimeBeanReference) {
            RuntimeBeanReference ref &lt;/span&gt;=&lt;span&gt; (RuntimeBeanReference) value;
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;调用引用类型属性的解析方法&lt;/span&gt;
            &lt;span&gt;return&lt;/span&gt;&lt;span&gt; resolveReference(argName, ref);
        }
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;对属性值是引用容器中另一个Bean名称的解析&lt;/span&gt;
        &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (value &lt;span&gt;instanceof&lt;/span&gt;&lt;span&gt; RuntimeBeanNameReference) {
            String refName &lt;/span&gt;=&lt;span&gt; ((RuntimeBeanNameReference) value).getBeanName();
            refName &lt;/span&gt;=&lt;span&gt; String.valueOf(doEvaluate(refName));
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;从容器中获取指定名称的Bean&lt;/span&gt;
            &lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.beanFactory.containsBean(refName)) {
                &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; BeanDefinitionStoreException(
                        &lt;/span&gt;&quot;Invalid bean name '&quot; + refName + &quot;' in bean reference for &quot; +&lt;span&gt; argName);
            }
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; refName;
        }
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;对Bean类型属性的解析，主要是Bean中的内部类&lt;/span&gt;
        &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (value &lt;span&gt;instanceof&lt;/span&gt;&lt;span&gt; BeanDefinitionHolder) {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Resolve BeanDefinitionHolder: contains BeanDefinition with name and aliases.&lt;/span&gt;
            BeanDefinitionHolder bdHolder =&lt;span&gt; (BeanDefinitionHolder) value;
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; resolveInnerBean(argName, bdHolder.getBeanName(), bdHolder.getBeanDefinition());
        }
        &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (value &lt;span&gt;instanceof&lt;/span&gt;&lt;span&gt; BeanDefinition) {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Resolve plain BeanDefinition, without contained name: use dummy name.&lt;/span&gt;
            BeanDefinition bd =&lt;span&gt; (BeanDefinition) value;
            String innerBeanName &lt;/span&gt;= &quot;(inner bean)&quot; + BeanFactoryUtils.GENERATED_BEAN_NAME_SEPARATOR +&lt;span&gt;
                    ObjectUtils.getIdentityHexString(bd);
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; resolveInnerBean(argName, innerBeanName, bd);
        }
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;对集合数组类型的属性解析&lt;/span&gt;
        &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (value &lt;span&gt;instanceof&lt;/span&gt;&lt;span&gt; ManagedArray) {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; May need to resolve contained runtime references.&lt;/span&gt;
            ManagedArray array =&lt;span&gt; (ManagedArray) value;
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取数组的类型&lt;/span&gt;
            Class&amp;lt;?&amp;gt; elementType =&lt;span&gt; array.resolvedElementType;
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (elementType == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取数组元素的类型&lt;/span&gt;
                String elementTypeName =&lt;span&gt; array.getElementTypeName();
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (StringUtils.hasText(elementTypeName)) {
                    &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
                        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;使用反射机制创建指定类型的对象&lt;/span&gt;
                        elementType = ClassUtils.forName(elementTypeName, &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.beanFactory.getBeanClassLoader());
                        array.resolvedElementType &lt;/span&gt;=&lt;span&gt; elementType;
                    }
                    &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Throwable ex) {
                        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Improve the message by showing the context.&lt;/span&gt;
                        &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; BeanCreationException(
                                &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.beanDefinition.getResourceDescription(), &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.beanName,
                                &lt;/span&gt;&quot;Error resolving array type for &quot; +&lt;span&gt; argName, ex);
                    }
                }
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;没有获取到数组的类型，也没有获取到数组元素的类型
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;则直接设置数组的类型为Object&lt;/span&gt;
                &lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
                    elementType &lt;/span&gt;= Object.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;;
                }
            }
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;创建指定类型的数组&lt;/span&gt;
            &lt;span&gt;return&lt;/span&gt; resolveManagedArray(argName, (List&amp;lt;?&amp;gt;&lt;span&gt;) value, elementType);
        }
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;解析list类型的属性值&lt;/span&gt;
        &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (value &lt;span&gt;instanceof&lt;/span&gt;&lt;span&gt; ManagedList) {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; May need to resolve contained runtime references.&lt;/span&gt;
            &lt;span&gt;return&lt;/span&gt; resolveManagedList(argName, (List&amp;lt;?&amp;gt;&lt;span&gt;) value);
        }
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;解析set类型的属性值&lt;/span&gt;
        &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (value &lt;span&gt;instanceof&lt;/span&gt;&lt;span&gt; ManagedSet) {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; May need to resolve contained runtime references.&lt;/span&gt;
            &lt;span&gt;return&lt;/span&gt; resolveManagedSet(argName, (Set&amp;lt;?&amp;gt;&lt;span&gt;) value);
        }
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;解析map类型的属性值&lt;/span&gt;
        &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (value &lt;span&gt;instanceof&lt;/span&gt;&lt;span&gt; ManagedMap) {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; May need to resolve contained runtime references.&lt;/span&gt;
            &lt;span&gt;return&lt;/span&gt; resolveManagedMap(argName, (Map&amp;lt;?, ?&amp;gt;&lt;span&gt;) value);
        }
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;解析props类型的属性值，props其实就是key和value均为字符串的map&lt;/span&gt;
        &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (value &lt;span&gt;instanceof&lt;/span&gt;&lt;span&gt; ManagedProperties) {
            Properties original &lt;/span&gt;=&lt;span&gt; (Properties) value;
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;创建一个拷贝，用于作为解析后的返回值&lt;/span&gt;
            Properties copy = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Properties();
            original.forEach((propKey, propValue) &lt;/span&gt;-&amp;gt;&lt;span&gt; {
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (propKey &lt;span&gt;instanceof&lt;/span&gt;&lt;span&gt; TypedStringValue) {
                    propKey &lt;/span&gt;=&lt;span&gt; evaluate((TypedStringValue) propKey);
                }
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (propValue &lt;span&gt;instanceof&lt;/span&gt;&lt;span&gt; TypedStringValue) {
                    propValue &lt;/span&gt;=&lt;span&gt; evaluate((TypedStringValue) propValue);
                }
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (propKey == &lt;span&gt;null&lt;/span&gt; || propValue == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
                    &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; BeanCreationException(
                            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.beanDefinition.getResourceDescription(), &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.beanName,
                            &lt;/span&gt;&quot;Error converting Properties key/value pair for &quot; + argName + &quot;: resolved to null&quot;&lt;span&gt;);
                }
                copy.put(propKey, propValue);
            });
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; copy;
        }
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;解析字符串类型的属性值&lt;/span&gt;
        &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (value &lt;span&gt;instanceof&lt;/span&gt;&lt;span&gt; TypedStringValue) {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Convert value to target type here.&lt;/span&gt;
            TypedStringValue typedStringValue =&lt;span&gt; (TypedStringValue) value;
            Object valueObject &lt;/span&gt;=&lt;span&gt; evaluate(typedStringValue);
            &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取属性的目标类型&lt;/span&gt;
                Class&amp;lt;?&amp;gt; resolvedTargetType =&lt;span&gt; resolveTargetType(typedStringValue);
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (resolvedTargetType != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
                    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;对目标类型的属性进行解析，递归调用&lt;/span&gt;
                    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.typeConverter.convertIfNecessary(valueObject, resolvedTargetType);
                }
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;没有获取到属性的目标对象，则按Object类型返回&lt;/span&gt;
                &lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
                    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; valueObject;
                }
            }
            &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Throwable ex) {
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Improve the message by showing the context.&lt;/span&gt;
                &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; BeanCreationException(
                        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.beanDefinition.getResourceDescription(), &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.beanName,
                        &lt;/span&gt;&quot;Error converting typed String value for &quot; +&lt;span&gt; argName, ex);
            }
        }
        &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (value &lt;span&gt;instanceof&lt;/span&gt;&lt;span&gt; NullBean) {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
        }
        &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; evaluate(value);
        }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;同时，在上个方法中（applyPropertyValues），会调用到bw.setPropertyValues方法，他的作用是为实例化的对象设置属性&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
&lt;span&gt;@Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; setPropertyValues(PropertyValues pvs, &lt;span&gt;boolean&lt;/span&gt; ignoreUnknown, &lt;span&gt;boolean&lt;/span&gt;&lt;span&gt; ignoreInvalid)
            &lt;/span&gt;&lt;span&gt;throws&lt;/span&gt;&lt;span&gt; BeansException {

        List&lt;/span&gt;&amp;lt;PropertyAccessException&amp;gt; propertyAccessExceptions = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
        List&lt;/span&gt;&amp;lt;PropertyValue&amp;gt; propertyValues = (pvs &lt;span&gt;instanceof&lt;/span&gt; MutablePropertyValues ?&lt;span&gt;
                ((MutablePropertyValues) pvs).getPropertyValueList() : Arrays.asList(pvs.getPropertyValues()));
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt; (PropertyValue pv : propertyValues) {
            &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; This method may throw any BeansException, which won't be caught
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; here, if there is a critical failure such as no matching field.
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; We can attempt to deal only with less serious exceptions.&lt;/span&gt;
&lt;span&gt;                setPropertyValue(pv);
            }
            &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (NotWritablePropertyException ex) {
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;ignoreUnknown) {
                    &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt;&lt;span&gt; ex;
                }
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Otherwise, just ignore it and continue...&lt;/span&gt;
&lt;span&gt;            }
            &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (NullValueInNestedPathException ex) {
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;ignoreInvalid) {
                    &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt;&lt;span&gt; ex;
                }
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Otherwise, just ignore it and continue...&lt;/span&gt;
&lt;span&gt;            }
            &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (PropertyAccessException ex) {
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (propertyAccessExceptions == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
                    propertyAccessExceptions &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; LinkedList&amp;lt;&amp;gt;&lt;span&gt;();
                }
                propertyAccessExceptions.add(ex);
            }
        }

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; If we encountered individual exceptions, throw the composite exception.&lt;/span&gt;
        &lt;span&gt;if&lt;/span&gt; (propertyAccessExceptions != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
            PropertyAccessException[] paeArray &lt;/span&gt;=&lt;span&gt;
                    propertyAccessExceptions.toArray(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; PropertyAccessException[propertyAccessExceptions.size()]);
            &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; PropertyBatchUpdateException(paeArray);
        }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;主要一点是弄清楚wrapper是怎么来的。Wrapper对原生对象进行包装，通过构造方法存储原始对象，然后放入cache的是Wrapper。&lt;/p&gt;
&lt;p&gt;考虑一下为什么要用到包装模式：减少代码侵入，能够在原生的基础之上再进行扩展，他可以覆盖、调用方法，甚至可以在原来的方法之上增加监听器、回调函数等。包装模式相当于静态代理的一种额外模式。&lt;/p&gt;
&lt;p&gt;到这儿，Bean的依赖注入就搞定了。总结一下，在我们之前操作的IOC容器初始化后，将XML上的内容转化为BeanDefinition中的内容，然后通过传入指定Bean的名字，首先判断Chache中有没有，也要查看其父级BeanFactory，如果有，就通过限定名字得到实例，如果没有，就去创建，创建的方式也分单例和原型两种。&lt;/p&gt;

</description>
<pubDate>Thu, 28 Jun 2018 12:25:00 +0000</pubDate>
<dc:creator>jolivan</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/Jolivan/p/9226289.html</dc:identifier>
</item>
</channel>
</rss>