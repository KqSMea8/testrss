<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>分布式改造剧集1 - Secondworld</title>
<link>http://www.cnblogs.com/Kidezyq/p/8748961.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/Kidezyq/p/8748961.html</guid>
<description>&lt;p&gt;​ 我所在的项目组，使用的技术一直是接近原始社会的：jdk1.6 + SpringMVC + hessian + Mybatis，当前最火的中间件技术Redis、MQ是完全没有用到，更别说什么分布式这种高大上的东西了。开始一直以为可能接下来的日子我都会在原始社会中渡过，直到我跳槽到另一家公司。&lt;/p&gt;
&lt;p&gt;​ 事情总是在最不抱希望的时候出现转机，最近老大指派我牵头做分布式改造。作为技术痴的我，刚接到这个消息的时候别提有多激动了。虽然平时空闲时间会去学习最新的一些技术，但总觉得没怎么学进去。一是年级大了，对于一个东西不用就忘；二是都只是敲一些demo代码，相信各位大神都知道，真正项目中遇到的技术难题永远比demo中的那些小问题复杂的多。&lt;/p&gt;
&lt;p&gt;​ 废话不多说，先来说说这次分布式改造的预期：&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;&lt;li&gt;应用的分布式：这一点很容易理解，就是希望以前的单节点应用能够部署成多节点，一个请求可以转发到多个节点中的任意一个&lt;/li&gt;
&lt;li&gt;缓存的分布式：好在我们项目对缓存的依赖性不是特别高，项目中使用的缓存也大部分仅仅是为了提升效率。对于内存缓存（Ehcache），希望在不同节点间能够同步，对数据的实时性和一致性要求不是特别高&lt;/li&gt;
&lt;li&gt;锁的分布式：业务互斥其实一直是我们项目的一个复杂所在。因为是金融行业，一旦业务互斥没有做好，就会出现严重的资金风险。对锁的可靠性要求特别高，对于互斥的业务锁，只要一个节点能够拿到，其他节点一定不能拿到。项目以前的实现是直接通过内存中的一个ConcurrentHashMap去实现的。如果多节点部署的话，很显然每个节点都会存在一个内存锁，原来的锁将完全不起作用&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;p&gt;​ 当然除了预期之外，考虑到部署环境的复杂性：一共几十套环境，后面可能上百。有的部署在腾讯云上，有的部署在客户自己内部系统中，一个微小的部署变动可能会被放大几十倍。所以领导除了给出预期之外，还给了以下两点要求：&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;&lt;li&gt;尽量不要升级JDK&lt;/li&gt;
&lt;li&gt;尽量不要引入新的中间件或者新的外部应用部署&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;p&gt;​ 好了，背景暂且交代到这里。我们基本对这次分布式改造剧集有了了解，下面开始进入正片…...&lt;/p&gt;

&lt;h2 id=&quot;第一集-应用分布式改造&quot;&gt;第一集： 应用分布式改造&lt;/h2&gt;
&lt;h3 id=&quot;探索之路&quot;&gt;探索之路&lt;/h3&gt;
&lt;p&gt;​ 对于当今的互联网企业码农，只要公司不处于原始社会。分析了上面的需求之后，对于这种请求多节点转发负载的，很自然地就会想到nginx。没错，我开始也想到了nginx，并且本地测试了，对于当前项目的转发只需下面简单的配置即可：&lt;/p&gt;
&lt;pre class=&quot;nginx&quot;&gt;
&lt;code&gt;upstream apps {
    server 127.0.0.1:8380;
    server 127.0.0.1:8480;
    server 127.0.0.1:8580;
}

server {
    listen 9999;
    server_name 127.0.0.1:9999;
    #本机的hessian服务最终都发布成 */service/*.hs的形式
    location /service/ {
        proxy_pass http://apps/myapp-war/;
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;​ 但是各位别忘了要求的第二点，好吧？忘了的话请再次回头看上面😢 。显然，引入nginx这种最简答的方式不行…...&lt;/p&gt;
&lt;p&gt;​ 既然不能引入这种转发的应用，那么只有DIY一个调用分发的实现了。那么，究竟如何实现呢？永远不要忘记没有什么问题是看源码解决不了的，如果有，那么请debug源码。&lt;/p&gt;
&lt;p&gt;​ hessian与Spring的集成，客户端最终注入到Spring容器中的bean类为&lt;code&gt;org.springframework.remoting.caucho.HessianProxyFactoryBean&lt;/code&gt;,我们跟进这个类的源码，发现该类的上下级关系为:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;HessianProxyFactoryBean &lt;span class=&quot;kw&quot;&gt;extends&lt;/span&gt; HessianClientInterceptor &lt;span class=&quot;kw&quot;&gt;implements&lt;/span&gt; FactoryBean&amp;lt;Object&amp;gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;最终实际客户端的调用时通过&lt;code&gt;HessianClientInterceptor&lt;/code&gt;类的invoke方法来实现的，该类的主要代码如下:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;16&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; HessianClientInterceptor &lt;span class=&quot;kw&quot;&gt;extends&lt;/span&gt; UrlBasedRemoteAccessor &lt;span class=&quot;kw&quot;&gt;implements&lt;/span&gt; MethodInterceptor {

    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; HessianProxyFactory proxyFactory = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;HessianProxyFactory&lt;/span&gt;();

    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; Object hessianProxy;
    
    &lt;span class=&quot;fu&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;afterPropertiesSet&lt;/span&gt;() {
        &lt;span class=&quot;kw&quot;&gt;super&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;afterPropertiesSet&lt;/span&gt;();
        &lt;span class=&quot;co&quot;&gt;// 类初始化完成之后会调用prepare方法，对hessianProxy进行初始化&lt;/span&gt;
        &lt;span class=&quot;fu&quot;&gt;prepare&lt;/span&gt;();
    }

    &lt;span class=&quot;co&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     * Initialize the Hessian proxy for this interceptor.&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     * &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;@throws RemoteLookupFailureException &lt;/span&gt;&lt;span class=&quot;co&quot;&gt;if the service URL is invalid&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     */&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;prepare&lt;/span&gt;() &lt;span class=&quot;kw&quot;&gt;throws&lt;/span&gt; RemoteLookupFailureException {
        &lt;span class=&quot;kw&quot;&gt;try&lt;/span&gt; {
            &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;hessianProxy&lt;/span&gt; = &lt;span class=&quot;fu&quot;&gt;createHessianProxy&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;proxyFactory&lt;/span&gt;);
        }
        &lt;span class=&quot;kw&quot;&gt;catch&lt;/span&gt; (MalformedURLException ex) {
            &lt;span class=&quot;kw&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;RemoteLookupFailureException&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;Service URL [&quot;&lt;/span&gt; + &lt;span class=&quot;fu&quot;&gt;getServiceUrl&lt;/span&gt;() + &lt;span class=&quot;st&quot;&gt;&quot;] is invalid&quot;&lt;/span&gt;, ex);
        }
    }

    &lt;span class=&quot;co&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     * Create the Hessian proxy that is wrapped by this interceptor.&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     * &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;@param proxyFactory &lt;/span&gt;&lt;span class=&quot;co&quot;&gt;the proxy factory to use&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     * &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;@return &lt;/span&gt;&lt;span class=&quot;co&quot;&gt;the Hessian proxy&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     * &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;@throws MalformedURLException &lt;/span&gt;&lt;span class=&quot;co&quot;&gt;if thrown by the proxy factory&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     * &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;@see com.caucho.hessian.client.HessianProxyFactory#create&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     */&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;protected&lt;/span&gt; Object &lt;span class=&quot;fu&quot;&gt;createHessianProxy&lt;/span&gt;(HessianProxyFactory proxyFactory) &lt;span class=&quot;kw&quot;&gt;throws&lt;/span&gt; MalformedURLException {
        Assert.&lt;span class=&quot;fu&quot;&gt;notNull&lt;/span&gt;(&lt;span class=&quot;fu&quot;&gt;getServiceInterface&lt;/span&gt;(), &lt;span class=&quot;st&quot;&gt;&quot;'serviceInterface' is required&quot;&lt;/span&gt;);
        &lt;span class=&quot;co&quot;&gt;// 根据配置文件中的配置创建代理类&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; proxyFactory.&lt;span class=&quot;fu&quot;&gt;create&lt;/span&gt;(&lt;span class=&quot;fu&quot;&gt;getServiceInterface&lt;/span&gt;(), &lt;span class=&quot;fu&quot;&gt;getServiceUrl&lt;/span&gt;(), &lt;span class=&quot;fu&quot;&gt;getBeanClassLoader&lt;/span&gt;());
    }
    
    &lt;span class=&quot;co&quot;&gt;// 最终hessian调用时调用的方法&lt;/span&gt;
    &lt;span class=&quot;fu&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; Object &lt;span class=&quot;fu&quot;&gt;invoke&lt;/span&gt;(MethodInvocation invocation) &lt;span class=&quot;kw&quot;&gt;throws&lt;/span&gt; Throwable {
        &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;hessianProxy&lt;/span&gt; == &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;) {
            &lt;span class=&quot;kw&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; IllegalStateException(&lt;span class=&quot;st&quot;&gt;&quot;HessianClientInterceptor is not properly initialized - &quot;&lt;/span&gt; +
                    &lt;span class=&quot;st&quot;&gt;&quot;invoke 'prepare' before attempting any operations&quot;&lt;/span&gt;);
        }

        ClassLoader originalClassLoader = &lt;span class=&quot;fu&quot;&gt;overrideThreadContextClassLoader&lt;/span&gt;();
        &lt;span class=&quot;kw&quot;&gt;try&lt;/span&gt; {
            &lt;span class=&quot;co&quot;&gt;// 这一句特别关键，最终是使用前面初始化过的hessianProxy的对应方法，最终的hessian地址也存在该对象中&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; invocation.&lt;span class=&quot;fu&quot;&gt;getMethod&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;invoke&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;hessianProxy&lt;/span&gt;, invocation.&lt;span class=&quot;fu&quot;&gt;getArguments&lt;/span&gt;());
        }
        &lt;span class=&quot;kw&quot;&gt;catch&lt;/span&gt; (InvocationTargetException ex) {
            Throwable targetEx = ex.&lt;span class=&quot;fu&quot;&gt;getTargetException&lt;/span&gt;();
            &lt;span class=&quot;co&quot;&gt;// Hessian 4.0 check: another layer of InvocationTargetException.&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (targetEx &lt;span class=&quot;kw&quot;&gt;instanceof&lt;/span&gt; InvocationTargetException) {
                targetEx = ((InvocationTargetException) targetEx).&lt;span class=&quot;fu&quot;&gt;getTargetException&lt;/span&gt;();
            }
            &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (targetEx &lt;span class=&quot;kw&quot;&gt;instanceof&lt;/span&gt; HessianConnectionException) {
                &lt;span class=&quot;kw&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;convertHessianAccessException&lt;/span&gt;(targetEx);
            }
            &lt;span class=&quot;kw&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (targetEx &lt;span class=&quot;kw&quot;&gt;instanceof&lt;/span&gt; HessianException || targetEx &lt;span class=&quot;kw&quot;&gt;instanceof&lt;/span&gt; HessianRuntimeException) {
                Throwable cause = targetEx.&lt;span class=&quot;fu&quot;&gt;getCause&lt;/span&gt;();
                &lt;span class=&quot;kw&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;convertHessianAccessException&lt;/span&gt;(cause != &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt; ? cause : targetEx);
            }
            &lt;span class=&quot;kw&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (targetEx &lt;span class=&quot;kw&quot;&gt;instanceof&lt;/span&gt; UndeclaredThrowableException) {
                UndeclaredThrowableException utex = (UndeclaredThrowableException) targetEx;
                &lt;span class=&quot;kw&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;convertHessianAccessException&lt;/span&gt;(utex.&lt;span class=&quot;fu&quot;&gt;getUndeclaredThrowable&lt;/span&gt;());
            }
            &lt;span class=&quot;kw&quot;&gt;else&lt;/span&gt; {
                &lt;span class=&quot;kw&quot;&gt;throw&lt;/span&gt; targetEx;
            }
        }
        &lt;span class=&quot;kw&quot;&gt;catch&lt;/span&gt; (Throwable ex) {
            &lt;span class=&quot;kw&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;RemoteProxyFailureException&lt;/span&gt;(
                    &lt;span class=&quot;st&quot;&gt;&quot;Failed to invoke Hessian proxy for remote service [&quot;&lt;/span&gt; + &lt;span class=&quot;fu&quot;&gt;getServiceUrl&lt;/span&gt;() + &lt;span class=&quot;st&quot;&gt;&quot;]&quot;&lt;/span&gt;, ex);
        }
        &lt;span class=&quot;kw&quot;&gt;finally&lt;/span&gt; {
            &lt;span class=&quot;fu&quot;&gt;resetThreadContextClassLoader&lt;/span&gt;(originalClassLoader);
        }
    }&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;​ 仔细分析上面源码和我加的中文注释，不难发现解决问题的关键就在与在实际调用之前替换hessianProxy或者针对同一个hessianProxy替换其指向的url。即我们需要对原来注入到Spring容器中的&lt;code&gt;org.springframework.remoting.caucho.HessianProxyFactoryBean&lt;/code&gt;类做定制，替换成我们的类，然后在调用之前动态替换hessianProxy。一种方式是对于需要路由的服务接口xml声明做替换:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode xml&quot;&gt;
&lt;code class=&quot;sourceCode xml&quot;&gt;&lt;span class=&quot;kw&quot;&gt;&amp;lt;bean&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; id=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;channelAccTaskServiceFacade&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; class=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;com.rampage.distribute.factory.DistributeHessainProxyFactoryBean&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;co&quot;&gt;&amp;lt;!--hessian.rampage.server为分布式之前配置文件配置的固定服务器地址 --&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;property&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;serviceUrl&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; value=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;${hessian.rampage.server}/services/helloService.hs&quot;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;property&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;serviceInterface&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; value=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;com.rampage.demo.facade.cle.service.HelloService&quot;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/bean&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;​ 这种可能对代码的改动较大，而且如果不想实现路由的话又得替换回来。另外一种实现就像前面我写的服务定制一样，在Springbean定义加载完成初始化之前做拦截，对bean进行增强替换，这里我们采用第二种方式。应为这样更灵活，可以自定义替换规则。&lt;/p&gt;
&lt;hr/&gt;&lt;h3 id=&quot;实现demo&quot;&gt;实现Demo&lt;/h3&gt;
&lt;p&gt;​ 我这里给出我的一个实现demo，大致步骤分为如下几部：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;定义一个注解，用来添加到hessian服务接口上，表示该服务需要在客户端调用的时候:&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;  &lt;span class=&quot;fu&quot;&gt;@Target&lt;/span&gt;({ElementType.&lt;span class=&quot;fu&quot;&gt;TYPE&lt;/span&gt;})
  &lt;span class=&quot;fu&quot;&gt;@Retention&lt;/span&gt;(RetentionPolicy.&lt;span class=&quot;fu&quot;&gt;RUNTIME&lt;/span&gt;)
  &lt;span class=&quot;fu&quot;&gt;@Documented&lt;/span&gt;
  &lt;span class=&quot;fu&quot;&gt;@Inherited&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;@interface&lt;/span&gt; Distribute {
  }&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;定义一个BFP, 在bean初始化之前根据是否增强为分布式bean策略，来决定是否对hessian服务进行增强：&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;22&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;  &lt;span class=&quot;co&quot;&gt;// 定义一个BFP，在bean初始化之前进行增强&lt;/span&gt;
  &lt;span class=&quot;fu&quot;&gt;@Component&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; DistributeBeanFactoryPostProcessor &lt;span class=&quot;kw&quot;&gt;implements&lt;/span&gt; BeanFactoryPostProcessor, Ordered {
    
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;final&lt;/span&gt; Logger LOGGER = LoggerFactory.&lt;span class=&quot;fu&quot;&gt;getLogger&lt;/span&gt;(DistributeBeanFactoryPostProcessor.&lt;span class=&quot;fu&quot;&gt;class&lt;/span&gt;);
    
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; DistributeStrategy distributeStrategy;
    
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;boolean&lt;/span&gt; openDistribute;
    
    {
        &lt;span class=&quot;co&quot;&gt;// 从配置文件加载是否开启分布式以及分布式分发策略&lt;/span&gt;
        Properties properties = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; Properties();
        &lt;span class=&quot;kw&quot;&gt;try&lt;/span&gt; {
            properties.&lt;span class=&quot;fu&quot;&gt;load&lt;/span&gt;(DistributeBeanFactoryPostProcessor.&lt;span class=&quot;fu&quot;&gt;class&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;getClassLoader&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;getResource&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;app-config.properties&quot;&lt;/span&gt;).&lt;span class=&quot;fu&quot;&gt;openStream&lt;/span&gt;());
        } &lt;span class=&quot;kw&quot;&gt;catch&lt;/span&gt; (IOException e) {
            LOGGER.&lt;span class=&quot;fu&quot;&gt;error&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;加载classPath下配置文件【app-config.properties】失败！&quot;&lt;/span&gt;, e);
        }
        
        openDistribute = Libs.&lt;span class=&quot;fu&quot;&gt;toBoolean&lt;/span&gt;(properties.&lt;span class=&quot;fu&quot;&gt;getProperty&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;open.hessian.client.distribute&quot;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&quot;false&quot;&lt;/span&gt;), &lt;span class=&quot;kw&quot;&gt;false&lt;/span&gt;);
        &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (openDistribute) {
            Class&amp;lt;?&amp;gt; clazz = &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;;
            String strategyClassName = properties.&lt;span class=&quot;fu&quot;&gt;getProperty&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;hessian.client.distribute.strategy&quot;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&quot;com.ramapge.distribute.AnnotationDistributeStrategy&quot;&lt;/span&gt;);
            &lt;span class=&quot;kw&quot;&gt;try&lt;/span&gt; {
                clazz = Class.&lt;span class=&quot;fu&quot;&gt;forName&lt;/span&gt;(strategyClassName);
                distributeStrategy = (DistributeStrategy) clazz.&lt;span class=&quot;fu&quot;&gt;newInstance&lt;/span&gt;();
            } &lt;span class=&quot;kw&quot;&gt;catch&lt;/span&gt; (Exception e) {
                openDistribute = &lt;span class=&quot;kw&quot;&gt;false&lt;/span&gt;;
                LOGGER.&lt;span class=&quot;fu&quot;&gt;error&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;初始化分布式策略类失败！&quot;&lt;/span&gt;, e);
            }
        }
    }

    &lt;span class=&quot;fu&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;getOrder&lt;/span&gt;() {
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; Integer.&lt;span class=&quot;fu&quot;&gt;MAX_VALUE&lt;/span&gt;;
    }

    &lt;span class=&quot;fu&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;postProcessBeanFactory&lt;/span&gt;(ConfigurableListableBeanFactory beanFactory) &lt;span class=&quot;kw&quot;&gt;throws&lt;/span&gt; BeansException {
        &lt;span class=&quot;co&quot;&gt;// 未开启分布式策略，则直接返回&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (!openDistribute) {
            LOGGER.&lt;span class=&quot;fu&quot;&gt;error&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;未开启分布式分发策略, 跳过分布式BeanFactory后置处理......&quot;&lt;/span&gt;);
            &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt;;
        }
        
        LOGGER.&lt;span class=&quot;fu&quot;&gt;info&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;进入分布式策略BeanFactory后置处理, 分布式策略类为【{}】......&quot;&lt;/span&gt;, distributeStrategy.&lt;span class=&quot;fu&quot;&gt;getClass&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;getName&lt;/span&gt;());
        String[] beanDefNames = beanFactory.&lt;span class=&quot;fu&quot;&gt;getBeanDefinitionNames&lt;/span&gt;();
        &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (ArrayUtils.&lt;span class=&quot;fu&quot;&gt;isEmpty&lt;/span&gt;(beanDefNames)) {
            &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt;;
        }
        
        BeanDefinition beanDef = &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;;
        &lt;span class=&quot;co&quot;&gt;// 替换hessian客户端的实现类为分布式hessian支持类&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;for&lt;/span&gt; (String beanName : beanDefNames) {
            beanDef = beanFactory.&lt;span class=&quot;fu&quot;&gt;getBeanDefinition&lt;/span&gt;(beanName);
            &lt;span class=&quot;co&quot;&gt;// 如果满足分布式分发策略，则替换hessian客户端工厂类 FIXME: 测试渠道日结分布式，后续删掉该判断条件&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (distributeStrategy.&lt;span class=&quot;fu&quot;&gt;doDistribute&lt;/span&gt;(beanFactory, beanDef)) {
    beanDef.&lt;span class=&quot;fu&quot;&gt;setBeanClassName&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;com.rampage.distribute.DistributeHessainProxyFactoryBean&quot;&lt;/span&gt;);
            }
        }
    }
  }

  &lt;span class=&quot;co&quot;&gt;// 是否转变成分布式策略&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;interface&lt;/span&gt; DistributeStrategy {
    &lt;span class=&quot;dt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;doDistribute&lt;/span&gt;(ConfigurableListableBeanFactory beanFactory, BeanDefinition beanDef);
  }

  &lt;span class=&quot;co&quot;&gt;// 注解转发策略，这里是如果有对应的Distribute注解，则将其变成分布式调用&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; AnnotationDistributeStrategy &lt;span class=&quot;kw&quot;&gt;implements&lt;/span&gt; DistributeStrategy {
    &lt;span class=&quot;fu&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;doDistribute&lt;/span&gt;(ConfigurableListableBeanFactory beanFactory, BeanDefinition beanDef) {
        &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (!&lt;span class=&quot;st&quot;&gt;&quot;org.springframework.remoting.caucho.HessianProxyFactoryBean&quot;&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;equals&lt;/span&gt;(beanDef.&lt;span class=&quot;fu&quot;&gt;getBeanClassName&lt;/span&gt;())) {
            &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;false&lt;/span&gt;;
        }
        
        &lt;span class=&quot;co&quot;&gt;// 只分发有@Distribute注解的bean&lt;/span&gt;
        MutablePropertyValues pv = beanDef.&lt;span class=&quot;fu&quot;&gt;getPropertyValues&lt;/span&gt;();
        &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (!pv.&lt;span class=&quot;fu&quot;&gt;contains&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;serviceInterface&quot;&lt;/span&gt;)) {
            &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;false&lt;/span&gt;;
        }
        
        TypedStringValue interfaceName = (TypedStringValue) pv.&lt;span class=&quot;fu&quot;&gt;getPropertyValue&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;serviceInterface&quot;&lt;/span&gt;).&lt;span class=&quot;fu&quot;&gt;getValue&lt;/span&gt;();
        &lt;span class=&quot;kw&quot;&gt;try&lt;/span&gt; {
            Class&amp;lt;?&amp;gt; hessianInterface = Thread.&lt;span class=&quot;fu&quot;&gt;currentThread&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;getContextClassLoader&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;loadClass&lt;/span&gt;(interfaceName.&lt;span class=&quot;fu&quot;&gt;getValue&lt;/span&gt;());
            Distribute distribute = hessianInterface.&lt;span class=&quot;fu&quot;&gt;getAnnotation&lt;/span&gt;(Distribute.&lt;span class=&quot;fu&quot;&gt;class&lt;/span&gt;);
            &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (distribute == &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;) {
                &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;false&lt;/span&gt;;
            }
        } &lt;span class=&quot;kw&quot;&gt;catch&lt;/span&gt; (ClassNotFoundException e) {
            &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;false&lt;/span&gt;;
        }   
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;true&lt;/span&gt;;
    }

  }&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;定制的、hessianProxyFactoryBean实现：&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;16&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;  &lt;span class=&quot;co&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;   * 分布式Hessian Bean工厂&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;   * &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;@author &lt;/span&gt;&lt;span class=&quot;co&quot;&gt;ziyuqi&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;   *&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;   */&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; DistributeHessainProxyFactoryBean &lt;span class=&quot;kw&quot;&gt;extends&lt;/span&gt; HessianProxyFactoryBean {
    
    &lt;span class=&quot;co&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     * 从hessian代理类列表&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     */&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; List&amp;lt;Object&amp;gt; slaveHessianProxies = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; ArrayList&amp;lt;Object&amp;gt;();
    
    &lt;span class=&quot;co&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     * 主hessian代理类&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     */&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; Object masterHessianProxy;
    
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; HessianProxyFactory proxyFactory;

    &lt;span class=&quot;fu&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;protected&lt;/span&gt; Object &lt;span class=&quot;fu&quot;&gt;createHessianProxy&lt;/span&gt;(HessianProxyFactory proxyFactory) &lt;span class=&quot;kw&quot;&gt;throws&lt;/span&gt; MalformedURLException {
        &lt;span class=&quot;co&quot;&gt;// 将配置中的proxy设置为主代理类，并且返回null&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;masterHessianProxy&lt;/span&gt; = &lt;span class=&quot;kw&quot;&gt;super&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;createHessianProxy&lt;/span&gt;(proxyFactory);
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;proxyFactory&lt;/span&gt; = proxyFactory;
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;;
    }
    
    

    &lt;span class=&quot;fu&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;afterPropertiesSet&lt;/span&gt;() {
        &lt;span class=&quot;kw&quot;&gt;super&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;afterPropertiesSet&lt;/span&gt;();
        
        &lt;span class=&quot;co&quot;&gt;// TODO: 实现从节点可配置，动态读取当前配置信息进行转发&lt;/span&gt;
        &lt;span class=&quot;co&quot;&gt;// 初始化从Hessian代理列表 &lt;/span&gt;
        String masterServiceUrl = &lt;span class=&quot;fu&quot;&gt;getServiceUrl&lt;/span&gt;();
        &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; suffixIndex = masterServiceUrl.&lt;span class=&quot;fu&quot;&gt;lastIndexOf&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;/services/&quot;&lt;/span&gt;);
          &lt;span class=&quot;co&quot;&gt;// 配置文件中配置的http://127.0.0.1:8580/myapps-war作为主节点，这里demo写死两个从节点&lt;/span&gt;
        String[] slavePrefixes = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; String[] {&lt;span class=&quot;st&quot;&gt;&quot;http://127.0.0.1:8480/myapps-war&quot;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&quot;http://127.0.0.1:8580/myapps-war&quot;&lt;/span&gt;};
        
        &lt;span class=&quot;kw&quot;&gt;for&lt;/span&gt; (String slavePrefix : slavePrefixes) {
            &lt;span class=&quot;kw&quot;&gt;try&lt;/span&gt; {
                Object slaveHessianProxy = &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;proxyFactory&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;create&lt;/span&gt;(&lt;span class=&quot;fu&quot;&gt;getServiceInterface&lt;/span&gt;(), slavePrefix + masterServiceUrl.&lt;span class=&quot;fu&quot;&gt;substring&lt;/span&gt;(suffixIndex), &lt;span class=&quot;fu&quot;&gt;getBeanClassLoader&lt;/span&gt;());
                slaveHessianProxies.&lt;span class=&quot;fu&quot;&gt;add&lt;/span&gt;(slaveHessianProxy);
            } &lt;span class=&quot;kw&quot;&gt;catch&lt;/span&gt; (MalformedURLException e) {
                &lt;span class=&quot;kw&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;RemoteLookupFailureException&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;Service URL [&quot;&lt;/span&gt; + slavePrefix + &lt;span class=&quot;fu&quot;&gt;getServiceUrl&lt;/span&gt;() + &lt;span class=&quot;st&quot;&gt;&quot;] is invalid&quot;&lt;/span&gt;, e);

            }
        }
    }


    &lt;span class=&quot;fu&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; Object &lt;span class=&quot;fu&quot;&gt;invoke&lt;/span&gt;(MethodInvocation invocation) &lt;span class=&quot;kw&quot;&gt;throws&lt;/span&gt; Throwable {
        &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;masterHessianProxy&lt;/span&gt; == &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt; &amp;amp;&amp;amp; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;slaveHessianProxies&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;isEmpty&lt;/span&gt;()) {
            &lt;span class=&quot;kw&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; IllegalStateException(&lt;span class=&quot;st&quot;&gt;&quot;HessianClientInterceptor is not properly initialized - &quot;&lt;/span&gt; +
                    &lt;span class=&quot;st&quot;&gt;&quot;invoke 'prepare' before attempting any operations&quot;&lt;/span&gt;);
        }
        ClassLoader originalClassLoader = &lt;span class=&quot;fu&quot;&gt;overrideThreadContextClassLoader&lt;/span&gt;();
        &lt;span class=&quot;kw&quot;&gt;try&lt;/span&gt; {
            &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; invocation.&lt;span class=&quot;fu&quot;&gt;getMethod&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;invoke&lt;/span&gt;(&lt;span class=&quot;fu&quot;&gt;routeHessianProxy&lt;/span&gt;(invocation), invocation.&lt;span class=&quot;fu&quot;&gt;getArguments&lt;/span&gt;());
        }
        &lt;span class=&quot;kw&quot;&gt;catch&lt;/span&gt; (InvocationTargetException ex) {
            Throwable targetEx = ex.&lt;span class=&quot;fu&quot;&gt;getTargetException&lt;/span&gt;();
            &lt;span class=&quot;co&quot;&gt;// Hessian 4.0 check: another layer of InvocationTargetException.&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (targetEx &lt;span class=&quot;kw&quot;&gt;instanceof&lt;/span&gt; InvocationTargetException) {
                targetEx = ((InvocationTargetException) targetEx).&lt;span class=&quot;fu&quot;&gt;getTargetException&lt;/span&gt;();
            }
            &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (targetEx &lt;span class=&quot;kw&quot;&gt;instanceof&lt;/span&gt; HessianConnectionException) {
                &lt;span class=&quot;kw&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;convertHessianAccessException&lt;/span&gt;(targetEx);
            }
            &lt;span class=&quot;kw&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (targetEx &lt;span class=&quot;kw&quot;&gt;instanceof&lt;/span&gt; HessianException || targetEx &lt;span class=&quot;kw&quot;&gt;instanceof&lt;/span&gt; HessianRuntimeException) {
                Throwable cause = targetEx.&lt;span class=&quot;fu&quot;&gt;getCause&lt;/span&gt;();
                &lt;span class=&quot;kw&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;convertHessianAccessException&lt;/span&gt;(cause != &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt; ? cause : targetEx);
            }
            &lt;span class=&quot;kw&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (targetEx &lt;span class=&quot;kw&quot;&gt;instanceof&lt;/span&gt; UndeclaredThrowableException) {
                UndeclaredThrowableException utex = (UndeclaredThrowableException) targetEx;
                &lt;span class=&quot;kw&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;convertHessianAccessException&lt;/span&gt;(utex.&lt;span class=&quot;fu&quot;&gt;getUndeclaredThrowable&lt;/span&gt;());
            }
            &lt;span class=&quot;kw&quot;&gt;else&lt;/span&gt; {
                &lt;span class=&quot;kw&quot;&gt;throw&lt;/span&gt; targetEx;
            }
        }
        &lt;span class=&quot;kw&quot;&gt;catch&lt;/span&gt; (Throwable ex) {
            &lt;span class=&quot;kw&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;RemoteProxyFailureException&lt;/span&gt;(
                    &lt;span class=&quot;st&quot;&gt;&quot;Failed to invoke Hessian proxy for remote service [&quot;&lt;/span&gt; + &lt;span class=&quot;fu&quot;&gt;getServiceUrl&lt;/span&gt;() + &lt;span class=&quot;st&quot;&gt;&quot;]&quot;&lt;/span&gt;, ex);
        }
        &lt;span class=&quot;kw&quot;&gt;finally&lt;/span&gt; {
            &lt;span class=&quot;fu&quot;&gt;resetThreadContextClassLoader&lt;/span&gt;(originalClassLoader);
        }
    }

    &lt;span class=&quot;co&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     * 路由hessian调用&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     * &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;@param invocation &lt;/span&gt;&lt;span class=&quot;co&quot;&gt;方法调用对象&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     * &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;@return &lt;/span&gt;&lt;span class=&quot;co&quot;&gt;路由hessian代理对象&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     */&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; Object &lt;span class=&quot;fu&quot;&gt;routeHessianProxy&lt;/span&gt;(MethodInvocation invocation) {
        &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;slaveHessianProxies&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;isEmpty&lt;/span&gt;()) {
            &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;masterHessianProxy&lt;/span&gt;;
        }
        
        &lt;span class=&quot;co&quot;&gt;// TODO: 修改随机选取算法&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; totalCount = &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;slaveHessianProxies&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;size&lt;/span&gt;() + &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;;
        &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; nextIndex = (&lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; Random()).&lt;span class=&quot;fu&quot;&gt;nextInt&lt;/span&gt;(totalCount);
        &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (nextIndex == &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;) {
            &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;masterHessianProxy&lt;/span&gt;;
        }
        
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;slaveHessianProxies&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;get&lt;/span&gt;(nextIndex - &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;);
    }
  }&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;
&lt;code&gt;  @Distribute
  public interface HelloService {
      void sayHello(String name);
  }&lt;/code&gt;
&lt;/pre&gt;
&lt;hr/&gt;&lt;h3 id=&quot;展望&quot;&gt;展望&lt;/h3&gt;
&lt;p&gt;​ 前面的简单实现Demo，虽然简单，但其实也预留了一些可以扩展的点可供后续展望:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;&lt;li&gt;DistributeStrategy可以定制，如果只针对特定路径下的服务接口做增强，可以只替换策略，不需要对原来代码做改动&lt;/li&gt;
&lt;li&gt;如果使用Distribute注解可以考虑增加一个服务组的概念，增对不同的服务组进行不同的地址转发处理&lt;/li&gt;
&lt;li&gt;可以考虑增加一个界面对于从节点进行增删该，可以增加权重的概念，根据不同的权重定制不同的路由规则&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;hr/&gt;&lt;h3 id=&quot;后续&quot;&gt;后续&lt;/h3&gt;
&lt;p&gt;​ 这只是DIY分布式改造第一篇只应用分布式改造，后续还有缓存分布式及锁的分布式改造，出于篇幅和时间限制，今天暂时写到这里。后续再做更新。&lt;/p&gt;
</description>
<pubDate>Sun, 08 Apr 2018 15:46:00 +0000</pubDate>
<dc:creator>Secondworld</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/Kidezyq/p/8748961.html</dc:identifier>
</item>
<item>
<title>AutoCAD中的扩展字典及扩展记录（C#） - 沙漠骆驼whlkx</title>
<link>http://www.cnblogs.com/whlkx/p/8748972.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/whlkx/p/8748972.html</guid>
<description>&lt;p&gt;在学习CAD扩展记录的过程中，遇到了一些问题，也积累了一些经验，现在给大家分享一些我的学习心得。在学习扩展字典之前需要读者了解cad的组码，也就是DxfCode。感兴趣的也可以了解一下扩展数据的相关内容（后面有时间也会分享一下，因为扩展数据、扩展字典和DxfCode组码之间有密切的关系）。&lt;/p&gt;
&lt;p&gt;一个CAD对象只能拥有一个扩展字典，而扩展字典下面可以包含多个扩展记录。打个比方，可以这么理解，如果扩展字典相当于excel文件，那么一个扩展记录就相当于excel中的一个表单sheet对象，扩展记录中存储的数据就相当于表单sheet中的数据。&lt;/p&gt;
&lt;p&gt;使用扩展记录可以向对象中保存一些属性数据，以便后续提取之用，这是很有用的。比如说可以向一个多段线（代表一根管线，或是其他）中存储一些施工方面的数据信息，例如施工标段、桩号范围、施工完成时间等，以后再打开图的时候，就知道这段管线是哪个施工单位施工的，什么时间完成的等等，便于查看和统计。CAD程序自身的属性对话框是无法记录这些信息的。&lt;/p&gt;
&lt;p&gt;向对象添加扩展记录一般分为三个步骤：&lt;/p&gt;
&lt;p&gt;1 将添加的数据构成一个类&lt;/p&gt;
&lt;p&gt;2 编写扩展方法，包括扩展记录的添加、读取、删除、修改&lt;/p&gt;
&lt;p&gt;3 调用扩展方法进行操作&lt;/p&gt;
&lt;p&gt;界面如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/708913/201804/708913-20180408233321656-630090113.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;下面列出主要的代码&lt;/p&gt;
&lt;p&gt;1 将需要添加的数据构成一个类，主要包括施工标段、信息、桩号、完成时间等属性&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;53&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;  &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; XDataClass
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; BiaoDuan { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;; }&lt;span&gt;//&lt;/span&gt;&lt;span&gt;施工标段&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; Information { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;; }&lt;span&gt;//&lt;/span&gt;&lt;span&gt;附加到对象上的信息&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;double&lt;/span&gt; StationStart { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;; }&lt;span&gt;//&lt;/span&gt;&lt;span&gt;起始桩号&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;double&lt;/span&gt; StationEnd { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;; }&lt;span&gt;//&lt;/span&gt;&lt;span&gt;终止桩号&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;double&lt;/span&gt; Length { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;private&lt;/span&gt; &lt;span&gt;set&lt;/span&gt;; }&lt;span&gt;//&lt;/span&gt;&lt;span&gt;长度&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; DateTime OverTime { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;; }&lt;span&gt;//&lt;/span&gt;&lt;span&gt;完成时间&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; XRecordName { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;; } &lt;span&gt;//&lt;/span&gt;&lt;span&gt;扩展记录名称&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt;&lt;span&gt; XDataClass() { }
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; XDataClass(&lt;span&gt;string&lt;/span&gt;&lt;span&gt; xrecordName)
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;             XRecordName =&lt;span&gt; xrecordName;
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 将扩展数据实体类转化成typevaluelist类型
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;xdataClass&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt;&lt;span&gt; TypedValueList ClassToTypeValueList(XDataClass xdataClass)
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;             TypedValueList tvList = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; TypedValueList
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; &lt;span&gt;                {DxfCode.Text, xdataClass.BiaoDuan },
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; &lt;span&gt;                {DxfCode.Text, xdataClass.Information },
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; &lt;span&gt;                {DxfCode .Real ,xdataClass.StationStart  },
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; &lt;span&gt;                {DxfCode.Real ,xdataClass .StationEnd  },
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;                 {DxfCode.Text ,xdataClass .OverTime .ToString (&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;d&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;) },
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; &lt;span&gt;                {DxfCode.Text ,xdataClass.XRecordName  },
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; &lt;span&gt;            }; 
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt; tvList;
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span&gt;34&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 将typevaluelist类型的数据转换成实体类
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span&gt;36&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;list&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;span&gt;37&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
&lt;span&gt;38&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt;&lt;span&gt; XDataClass TypeValueListToClass(TypedValueList list)
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt;             XDataClass xdataClass = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; XDataClass()
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt;                 BiaoDuan = list[&lt;span&gt;0&lt;/span&gt;&lt;span&gt;].Value.ToString(),
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt;                 Information = list[&lt;span&gt;1&lt;/span&gt;&lt;span&gt;].Value.ToString(),
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt;                 StationStart = Convert.ToDouble(list[&lt;span&gt;2&lt;/span&gt;&lt;span&gt;].Value),
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt;                 StationEnd = Convert.ToDouble(list[&lt;span&gt;3&lt;/span&gt;&lt;span&gt;].Value),
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt;                 OverTime = Convert.ToDateTime(list[&lt;span&gt;4&lt;/span&gt;&lt;span&gt;].Value),
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt;                 XRecordName = list[&lt;span&gt;5&lt;/span&gt;&lt;span&gt;].Value.ToString(),
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt;                 Length = Math.Abs(Convert.ToDouble(list[&lt;span&gt;3&lt;/span&gt;].Value) - Convert.ToDouble(list[&lt;span&gt;2&lt;/span&gt;&lt;span&gt;].Value))
&lt;/span&gt;&lt;span&gt;49&lt;/span&gt; &lt;span&gt;            };
&lt;/span&gt;&lt;span&gt;50&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt; xdataClass;
&lt;/span&gt;&lt;span&gt;51&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;52&lt;/span&gt;     }
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;2  编写扩展方法，包括扩展记录的添加、读取、删除、修改&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;44&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt; &lt;span&gt;#region&lt;/span&gt; 对象的扩展记录的添加、删除、修改
&lt;span&gt;  2&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span&gt;  3&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt;&lt;span&gt;  添加扩展记录，如果没有扩展字典，那就创建扩展字典
&lt;/span&gt;&lt;span&gt;  4&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span&gt;  5&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;objId&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;对象的objectid&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;span&gt;  6&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;xRecordSearchKey&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;扩展记录名称&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;span&gt;  7&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;values&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;扩展记录的内容&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;span&gt;  8&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&lt;/span&gt;&lt;span&gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
&lt;span&gt;  9&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;bool&lt;/span&gt; AddXRecordToObj(&lt;span&gt;this&lt;/span&gt; ObjectId objId, &lt;span&gt;string&lt;/span&gt;&lt;span&gt; xRecordSearchKey, TypedValueList values)
&lt;/span&gt;&lt;span&gt; 10&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 11&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;添加扩展记录之前，先创建对象的扩展字典&lt;/span&gt;
&lt;span&gt; 12&lt;/span&gt;             DBObject obj = objId.GetObject(OpenMode.ForRead);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;以读的方式打开&lt;/span&gt;
&lt;span&gt; 13&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (obj.ExtensionDictionary.IsNull)&lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果对象无扩展字典，那就给创建&lt;/span&gt;
&lt;span&gt; 14&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt; 15&lt;/span&gt;                 obj.UpgradeOpen();&lt;span&gt;//&lt;/span&gt;&lt;span&gt;切换对象为写的状态&lt;/span&gt;
&lt;span&gt; 16&lt;/span&gt;                 obj.CreateExtensionDictionary();&lt;span&gt;//&lt;/span&gt;&lt;span&gt;为对象创建扩展字典，一个对象只能拥有一个扩展字典&lt;/span&gt;
&lt;span&gt; 17&lt;/span&gt;                 obj.DowngradeOpen();&lt;span&gt;//&lt;/span&gt;&lt;span&gt;将对象切换为读的状态&lt;/span&gt;
&lt;span&gt; 18&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt; 19&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;打开对象的扩展字典&lt;/span&gt;
&lt;span&gt; 20&lt;/span&gt;             DBDictionary dict = obj.ExtensionDictionary.GetObject(OpenMode.ForRead) &lt;span&gt;as&lt;/span&gt;&lt;span&gt; DBDictionary;
&lt;/span&gt;&lt;span&gt; 21&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果扩展字典中已包含指定的扩展记录对象  &lt;/span&gt;
&lt;span&gt; 22&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (dict.Contains(xRecordSearchKey))
&lt;/span&gt;&lt;span&gt; 23&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt; 24&lt;/span&gt;                  &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果包含有指定的扩展记录，那就退出&lt;/span&gt;
&lt;span&gt; 25&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt; 26&lt;/span&gt;             &lt;span&gt;else&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;若没有包含扩展记录，则创建一个&lt;/span&gt;
&lt;span&gt; 27&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt; 28&lt;/span&gt;                 Xrecord xrec = &lt;span&gt;new&lt;/span&gt; Xrecord();&lt;span&gt;//&lt;/span&gt;&lt;span&gt;为对象创建一个扩展记录 &lt;/span&gt;
&lt;span&gt; 29&lt;/span&gt;                 xrec.Data = values;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;指定扩展记录的内容，这里用到了自定义类型转换，TypedValueList--&amp;gt;ResultBuffer&lt;/span&gt;
&lt;span&gt; 30&lt;/span&gt;                 dict.UpgradeOpen();&lt;span&gt;//&lt;/span&gt;&lt;span&gt;将扩展字典切换为写的状态，以便添加一个扩展记录&lt;/span&gt;
&lt;span&gt; 31&lt;/span&gt;                 ObjectId xrecId = dict.SetAt(xRecordSearchKey, xrec);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;在扩展字典中加入新建的扩展记录，并指定它的搜索关键字&lt;/span&gt;
&lt;span&gt; 32&lt;/span&gt;                 objId.Database.TransactionManager.AddNewlyCreatedDBObject(xrec, &lt;span&gt;true&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 33&lt;/span&gt;                 dict.DowngradeOpen();&lt;span&gt;//&lt;/span&gt;&lt;span&gt;将扩展字典切换为读的状态&lt;/span&gt;
&lt;span&gt; 34&lt;/span&gt;                 &lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;; 
&lt;/span&gt;&lt;span&gt; 35&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt; 36&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 37&lt;/span&gt; 
&lt;span&gt; 38&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span&gt; 39&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 用于替换扩展字典中的整个一条扩展记录
&lt;/span&gt;&lt;span&gt; 40&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span&gt; 41&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;objId&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;对象id&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;span&gt; 42&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;xRecordSearchKey&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;扩展记录的名称&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;span&gt; 43&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;values&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;扩展记录的内容&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;span&gt; 44&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;bool&lt;/span&gt; ModObjXrecord(&lt;span&gt;this&lt;/span&gt; ObjectId objId, &lt;span&gt;string&lt;/span&gt;&lt;span&gt; xRecordSearchKey, TypedValueList values)
&lt;/span&gt;&lt;span&gt; 45&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 46&lt;/span&gt;             DBObject obj = objId.GetObject(OpenMode.ForRead);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;以读的方式打开对象&lt;/span&gt;
&lt;span&gt; 47&lt;/span&gt;             ObjectId dictId = obj.ExtensionDictionary;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取对象的扩展字典id&lt;/span&gt;
&lt;span&gt; 48&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (dictId.IsNull)
&lt;/span&gt;&lt;span&gt; 49&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt; 50&lt;/span&gt;                 &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;若对象没有扩展字典，则返回 &lt;/span&gt;
&lt;span&gt; 51&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt; 52&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果对象有扩展字典，则以读的方式打开&lt;/span&gt;
&lt;span&gt; 53&lt;/span&gt;             DBDictionary dict = dictId.GetObject(OpenMode.ForRead) &lt;span&gt;as&lt;/span&gt;&lt;span&gt; DBDictionary;
&lt;/span&gt;&lt;span&gt; 54&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;dict.Contains(xRecordSearchKey))
&lt;/span&gt;&lt;span&gt; 55&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt; 56&lt;/span&gt;                 &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果扩展字典中没有包含指定关键字的扩展记录，则返回 ；&lt;/span&gt;
&lt;span&gt; 57&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt; 58&lt;/span&gt;             ObjectId xrecordId = dict.GetAt(xRecordSearchKey);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取扩展记录的id&lt;/span&gt;
&lt;span&gt; 59&lt;/span&gt;             Xrecord xrecord = xrecordId.GetObject(OpenMode.ForWrite) &lt;span&gt;as&lt;/span&gt;&lt;span&gt; Xrecord;
&lt;/span&gt;&lt;span&gt; 60&lt;/span&gt;             xrecord.Data = values;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;覆盖原来的数据，因为values有了新的指向&lt;/span&gt;
&lt;span&gt; 61&lt;/span&gt;             xrecord.DowngradeOpen();&lt;span&gt;//&lt;/span&gt;&lt;span&gt;将扩展记录切换为读的状态&lt;/span&gt;
&lt;span&gt; 62&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 63&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 64&lt;/span&gt; 
&lt;span&gt; 65&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span&gt; 66&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 获取对象的扩展字典中的扩展记录
&lt;/span&gt;&lt;span&gt; 67&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span&gt; 68&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;objId&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;对象的id&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;span&gt; 69&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;xRecordSearchKey&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;扩展记录名称&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;span&gt; 70&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
&lt;span&gt; 71&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; TypedValueList GetObjXrecord(&lt;span&gt;this&lt;/span&gt; ObjectId objId, &lt;span&gt;string&lt;/span&gt;&lt;span&gt; xRecordSearchKey)
&lt;/span&gt;&lt;span&gt; 72&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 73&lt;/span&gt;             DBObject obj = objId.GetObject(OpenMode.ForRead);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;以读的方式打开对象&lt;/span&gt;
&lt;span&gt; 74&lt;/span&gt;             ObjectId dictId = obj.ExtensionDictionary;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取对象的扩展字典的id&lt;/span&gt;
&lt;span&gt; 75&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (dictId.IsNull)
&lt;/span&gt;&lt;span&gt; 76&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt; 77&lt;/span&gt;                 &lt;span&gt;//&lt;/span&gt;&lt;span&gt;MessageBox.Show(&quot;没有扩展字典&quot;);&lt;/span&gt;
&lt;span&gt; 78&lt;/span&gt;                 &lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;若对象没有扩展字典，则返回null&lt;/span&gt;
&lt;span&gt; 79&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt; 80&lt;/span&gt;             DBDictionary dict = dictId.GetObject(OpenMode.ForRead) &lt;span&gt;as&lt;/span&gt; DBDictionary;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取对象的扩展字典&lt;/span&gt;
&lt;span&gt; 81&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;dict.Contains(xRecordSearchKey))
&lt;/span&gt;&lt;span&gt; 82&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt; 83&lt;/span&gt;                 &lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果扩展字典中没有包含指定关键字的扩展记录，则返回null；&lt;/span&gt;
&lt;span&gt; 84&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt; 85&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;先要获取对象的扩展字典或图形中的有名对象字典，然后才能在字典中获取要查询的扩展记录&lt;/span&gt;
&lt;span&gt; 86&lt;/span&gt;             ObjectId xrecordId = dict.GetAt(xRecordSearchKey);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取扩展记录对象的id&lt;/span&gt;
&lt;span&gt; 87&lt;/span&gt;             Xrecord xrecord = xrecordId.GetObject(OpenMode.ForRead) &lt;span&gt;as&lt;/span&gt; Xrecord;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;根据id获取扩展记录对象&lt;/span&gt;
&lt;span&gt; 88&lt;/span&gt;             TypedValueList values =&lt;span&gt; xrecord.Data;
&lt;/span&gt;&lt;span&gt; 89&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; values;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;values 数组应该是有先后顺序的&lt;/span&gt;
&lt;span&gt; 90&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 91&lt;/span&gt; 
&lt;span&gt; 92&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span&gt; 93&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt;&lt;span&gt;用于删除对象扩展字典中的指定的扩展记录
&lt;/span&gt;&lt;span&gt; 94&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span&gt; 95&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;objId&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;对象id&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;span&gt; 96&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;xRecordSearchKey&quot;&amp;gt;&lt;/span&gt;&lt;span&gt; 扩展记录名称&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;span&gt; 97&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;bool&lt;/span&gt; DelObjXrecord(&lt;span&gt;this&lt;/span&gt; ObjectId objId, &lt;span&gt;string&lt;/span&gt;&lt;span&gt; xRecordSearchKey)
&lt;/span&gt;&lt;span&gt; 98&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 99&lt;/span&gt;             DBObject obj = objId.GetObject(OpenMode.ForRead);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;以读的方式打开对象&lt;/span&gt;
&lt;span&gt;100&lt;/span&gt;             ObjectId dictId = obj.ExtensionDictionary;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取对象的扩展字典id&lt;/span&gt;
&lt;span&gt;101&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (dictId.IsNull)
&lt;/span&gt;&lt;span&gt;102&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;103&lt;/span&gt;                 &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;若对象没有扩展字典，则返回 &lt;/span&gt;
&lt;span&gt;104&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;105&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果对象有扩展字典，则以读的方式打开&lt;/span&gt;
&lt;span&gt;106&lt;/span&gt;             DBDictionary dict = dictId.GetObject(OpenMode.ForRead) &lt;span&gt;as&lt;/span&gt;&lt;span&gt; DBDictionary;
&lt;/span&gt;&lt;span&gt;107&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (dict.Contains(xRecordSearchKey))&lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果扩展字典中包含指定关键字的扩展记录，则删除；&lt;/span&gt;
&lt;span&gt;108&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;109&lt;/span&gt;                 dict.UpgradeOpen();&lt;span&gt;//&lt;/span&gt;&lt;span&gt;切换为写的状态&lt;/span&gt;
&lt;span&gt;110&lt;/span&gt;                 dict.Remove(xRecordSearchKey);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;删除扩展记录&lt;/span&gt;
&lt;span&gt;111&lt;/span&gt;                 dict.DowngradeOpen();&lt;span&gt;//&lt;/span&gt;&lt;span&gt;切换为读的状态&lt;/span&gt;
&lt;span&gt;112&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;113&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;114&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;115&lt;/span&gt;         
&lt;span&gt;116&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span&gt;117&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 删除对象的扩展字典下的所有的扩展记录
&lt;/span&gt;&lt;span&gt;118&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 2018年4月7日09:44:12
&lt;/span&gt;&lt;span&gt;119&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span&gt;120&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;objId&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;span&gt;121&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;bool&lt;/span&gt; DelObjAllXrecords(&lt;span&gt;this&lt;/span&gt;&lt;span&gt; ObjectId objId)
&lt;/span&gt;&lt;span&gt;122&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;123&lt;/span&gt;             DBObject obj = objId.GetObject(OpenMode.ForRead);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;以读的方式打开对象&lt;/span&gt;
&lt;span&gt;124&lt;/span&gt;             ObjectId dictId = obj.ExtensionDictionary;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取对象的扩展字典id&lt;/span&gt;
&lt;span&gt;125&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (dictId.IsNull)
&lt;/span&gt;&lt;span&gt;126&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;127&lt;/span&gt;                 &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;若对象没有扩展字典，则返回 &lt;/span&gt;
&lt;span&gt;128&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;129&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果对象有扩展字典，则以读的方式打开&lt;/span&gt;
&lt;span&gt;130&lt;/span&gt;             DBDictionary dict = dictId.GetObject(OpenMode.ForWrite) &lt;span&gt;as&lt;/span&gt;&lt;span&gt; DBDictionary;
&lt;/span&gt;&lt;span&gt;131&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取扩展字典下的所有扩展记录名称集合 Keys &lt;/span&gt;
&lt;span&gt;132&lt;/span&gt; &lt;span&gt;133&lt;/span&gt;             List&amp;lt;&lt;span&gt;string&lt;/span&gt;&amp;gt; listKeys = &lt;span&gt;new&lt;/span&gt; List&amp;lt;&lt;span&gt;string&lt;/span&gt;&amp;gt;&lt;span&gt;();
&lt;/span&gt;&lt;span&gt;134&lt;/span&gt;             &lt;span&gt;foreach&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; item &lt;span&gt;in&lt;/span&gt; dict)&lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取扩展字典中的所有条目，也就是所有的扩展记录的key&lt;/span&gt;
&lt;span&gt;135&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;136&lt;/span&gt; &lt;span&gt;                listKeys.Add(item.Key);
&lt;/span&gt;&lt;span&gt;137&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;138&lt;/span&gt;             &lt;span&gt;foreach&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; key &lt;span&gt;in&lt;/span&gt; listKeys)&lt;span&gt;//&lt;/span&gt;&lt;span&gt;根据key,删除扩展字典中的每一个条目（也就是扩展记录）&lt;/span&gt;
&lt;span&gt;139&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;140&lt;/span&gt; &lt;span&gt;                dict.Remove(key);
&lt;/span&gt;&lt;span&gt;141&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;142&lt;/span&gt;             dict.DowngradeOpen();&lt;span&gt;//&lt;/span&gt;&lt;span&gt;切换为读的状态 &lt;/span&gt;
&lt;span&gt;143&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;144&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;145&lt;/span&gt; 
&lt;span&gt;146&lt;/span&gt; 
&lt;span&gt;147&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span&gt;148&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 删除对象的扩展字典，因为每个对象只能拥有一个扩展字典，所以给定对象的objectID就好了
&lt;/span&gt;&lt;span&gt;149&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt;&lt;span&gt;  2018年4月7日09:17:44 
&lt;/span&gt;&lt;span&gt;150&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span&gt;151&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;objId&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;span&gt;152&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;bool&lt;/span&gt; DeleteObjExtensionDictionary(&lt;span&gt;this&lt;/span&gt;&lt;span&gt; ObjectId objId)
&lt;/span&gt;&lt;span&gt;153&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;154&lt;/span&gt;             DBObject obj = objId.GetObject(OpenMode.ForRead);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;以读的方式打开对象&lt;/span&gt;
&lt;span&gt;155&lt;/span&gt;             ObjectId dictId = obj.ExtensionDictionary;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取对象的扩展字典的ID&lt;/span&gt;
&lt;span&gt;156&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (dictId.IsNull)
&lt;/span&gt;&lt;span&gt;157&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;158&lt;/span&gt;                 &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;;    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;没有扩展字典&lt;/span&gt;
&lt;span&gt;159&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;160&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;有扩展字典 &lt;/span&gt;&lt;span&gt;161&lt;/span&gt;             obj.UpgradeOpen();&lt;span&gt;//&lt;/span&gt;&lt;span&gt;切换对象为写的状态&lt;br/&gt;162            &lt;span&gt; objId.DelObjAllXrecords(); //调用上面的方法，在删除扩展字典之前要先删除扩展记录&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;163&lt;/span&gt;             obj.ReleaseExtensionDictionary();&lt;span&gt;//&lt;/span&gt;&lt;span&gt;移除对象的扩展字典，一个对象只能拥有一个扩展字典&lt;/span&gt;
&lt;span&gt;164&lt;/span&gt;             obj.DowngradeOpen();&lt;span&gt;//&lt;/span&gt;&lt;span&gt;将对象切换为读的状态 &lt;/span&gt;
&lt;span&gt;165&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;166&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;167&lt;/span&gt;         &lt;span&gt;#endregion&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;3调用扩展方法&lt;/p&gt;
&lt;p&gt;  a 添加扩展记录&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;btn  添加扩展记录&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt;         XDataClass PipeXdataClass = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; XDataClass(Enum_XRcordName.pipe_whlkx.ToString());
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;         ObjectId selectedObjId =&lt;span&gt; ObjectId.Null;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;         &lt;span&gt;private&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; btnAddXData_Click(&lt;span&gt;object&lt;/span&gt;&lt;span&gt; sender, EventArgs e)
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (CheckValue() == &lt;span&gt;false&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;                 &lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;            _instance.Hide();
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;             Document doc =&lt;span&gt; AcadApp.DocumentManager.MdiActiveDocument;
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;             Database db =&lt;span&gt; doc.Database;
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;             Editor ed =&lt;span&gt; doc.Editor; 
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;             PromptEntityResult entityResult = ed.GetEntity(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;\n请选择一个多段线对象&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;单个拾取对象 &lt;/span&gt;
&lt;span&gt;15&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (entityResult.Status !=&lt;span&gt; PromptStatus.OK)
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;                _instance.Show();
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;                 &lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;            GetDataFromControls(PipeXdataClass);//私有函数，将控件中的数据填充到实体类中
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取对象的ID&lt;/span&gt;
&lt;span&gt;22&lt;/span&gt;             ObjectId objId =&lt;span&gt; entityResult.ObjectId; 
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;             &lt;span&gt;bool&lt;/span&gt; result = &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;             &lt;span&gt;using&lt;/span&gt; (DocumentLock docLock =&lt;span&gt; doc.LockDocument())
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;             &lt;span&gt;using&lt;/span&gt; (Transaction trans =&lt;span&gt; db.TransactionManager.StartTransaction())
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;                 &lt;span&gt;//&lt;/span&gt;&lt;span&gt;将xdataCalss类型的数据转换成一个typevalue型的列表&lt;/span&gt;
&lt;span&gt;28&lt;/span&gt;                 TypedValueList values =&lt;span&gt; XDataClass.ClassToTypeValueList(PipeXdataClass);
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;                 result =&lt;span&gt; objId.AddXRecordToObj(PipeXdataClass.XRecordName, values);
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; &lt;span&gt;                trans.Commit();
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (result)
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt;                 ed.WriteMessage(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;\n对象的扩展数据添加成功！&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt;             &lt;span&gt;else&lt;/span&gt;
&lt;span&gt;37&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt;                 ed.WriteMessage(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;\n对象已经有扩展数据&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt; &lt;span&gt;            _instance.Show();
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt;         }
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;  b 读取扩展记录 &lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;btn 读取扩展记录&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt;         &lt;span&gt;private&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; btnReadXData_Click(&lt;span&gt;object&lt;/span&gt;&lt;span&gt; sender, EventArgs e)
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;            _instance.Hide();
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;             ClearContent();&lt;span&gt;//&lt;/span&gt;&lt;span&gt;清空控件中的内容&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt;             Document doc =&lt;span&gt; AcadApp.DocumentManager.MdiActiveDocument;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;             Database db =&lt;span&gt; doc.Database;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;             Editor ed =&lt;span&gt; doc.Editor;
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;开始事务处理&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt;             &lt;span&gt;using&lt;/span&gt; (DocumentLock docLock =&lt;span&gt; doc.LockDocument())
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;             &lt;span&gt;using&lt;/span&gt; (Transaction trans =&lt;span&gt; db.TransactionManager.StartTransaction())
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;                 PromptEntityResult entityResult = ed.GetEntity(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;\n请选择一个对象&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;拾取单个对象&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt; (entityResult.Status !=&lt;span&gt; PromptStatus.OK)
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;                {
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;                     ed.WriteMessage(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;\n取消了选择&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;                    _instance.Show();
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;                     &lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;                 &lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取对象的ID&lt;/span&gt;
&lt;span&gt;21&lt;/span&gt;                 ObjectId objId =&lt;span&gt; entityResult.ObjectId;
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;                 TypedValueList list =&lt;span&gt; objId.GetObjXrecord(PipeXdataClass.XRecordName);
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt; (list &lt;span&gt;is&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; &lt;span&gt;                {
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;                     ed.WriteMessage(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;\n该对象没有扩展记录&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; &lt;span&gt;                    _instance.Show();
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;                     &lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt; (list.Count &amp;lt;= &lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; &lt;span&gt;                {
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;                     ed.WriteMessage(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;\n有扩展记录，但是记录为空&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; &lt;span&gt;                    _instance.Show();
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt;                     &lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt;                 &lt;span&gt;else&lt;/span&gt;
&lt;span&gt;36&lt;/span&gt; &lt;span&gt;                {
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt;                     PipeXdataClass =&lt;span&gt; XDataClass.TypeValueListToClass(list);
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt;                     SetDataToControls(PipeXdataClass);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;向控件中填充数据&lt;/span&gt;
&lt;span&gt;39&lt;/span&gt;                     ed.WriteMessage(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;\n对象扩展数据读取成功&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt;                     selectedObjId =&lt;span&gt; objId;
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt; &lt;span&gt;            _instance.Show();
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt;         }
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;  c 删除扩展记录&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;btn 删除&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt;         &lt;span&gt;private&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; btnDeleteXData_Click(&lt;span&gt;object&lt;/span&gt;&lt;span&gt; sender, EventArgs e)
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;            _instance.Hide();
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;             Document doc =&lt;span&gt; AcadApp.DocumentManager.MdiActiveDocument;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;             Database db =&lt;span&gt; doc.Database;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;             Editor ed =&lt;span&gt; doc.Editor;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;开始事务处理&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt;             &lt;span&gt;using&lt;/span&gt; (DocumentLock docLock =&lt;span&gt; doc.LockDocument())
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;             &lt;span&gt;using&lt;/span&gt; (Transaction trans =&lt;span&gt; db.TransactionManager.StartTransaction())
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;            {&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt;                 PromptSelectionResult ss1 = ed.GetSelection();&lt;span&gt;//&lt;/span&gt;&lt;span&gt;框选对象&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt; (ss1.Status !=&lt;span&gt; PromptStatus.OK)
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;                {
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;                     ed.WriteMessage(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;\n取消了选择&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;                    _instance.Show();
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;                     &lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;                 &lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取对象的ID&lt;/span&gt;
&lt;span&gt;22&lt;/span&gt;                 List&amp;lt;ObjectId&amp;gt; listObjIds =&lt;span&gt; ss1.Value.GetObjectIds().ToList();
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;                 &lt;span&gt;int&lt;/span&gt; count = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;                 listObjIds.ForEach(objId =&amp;gt;
&lt;span&gt;25&lt;/span&gt; &lt;span&gt;                {
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;                     &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (objId.DeleteObjExtensionDictionary())
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; &lt;span&gt;                    {
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;                         ed.WriteMessage(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;\n删除成功&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;                         count++&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; &lt;span&gt;                    }
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; &lt;span&gt;                });
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;                 &lt;span&gt;//&lt;/span&gt;&lt;span&gt;ObjectId objId = entityResult.ObjectId;
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt;                 &lt;span&gt;//&lt;/span&gt;&lt;span&gt;2018年4月7日09:50:35，经验证，必须先删除扩展字典下的所有的扩展记录，才能删除对象的扩展字典
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt;                 &lt;span&gt;//&lt;/span&gt;&lt;span&gt;否则会出现错误：eContainerNotEmpty ，容器不为空
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt;                 &lt;span&gt;//&lt;/span&gt;&lt;span&gt;objId.DelObjAllXrecords();
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt;                 &lt;span&gt;//&lt;/span&gt;&lt;span&gt;objId.DeleteObjExtensionDictionary();&lt;/span&gt;
&lt;span&gt;37&lt;/span&gt; &lt;span&gt;                trans.Commit();
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt;                 ed.WriteMessage(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;\n操作完成，总共删除{0}个扩展记录&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, count);
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt; &lt;span&gt;            } 
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt; &lt;span&gt;            _instance.Show();
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt;         }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 修改扩展记录可以自己写一下，比较简单。&lt;/p&gt;
&lt;p&gt;  下面给出一张图关于扩展字典和扩展记录的示意图，便于理解之间的关系。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/708913/201804/708913-20180408222406759-1382947797.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

</description>
<pubDate>Sun, 08 Apr 2018 15:39:00 +0000</pubDate>
<dc:creator>沙漠骆驼whlkx</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/whlkx/p/8748972.html</dc:identifier>
</item>
<item>
<title>使用 BenchmarkDotnet 测试代码性能 - h82258652</title>
<link>http://www.cnblogs.com/h82258652/p/8748345.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/h82258652/p/8748345.html</guid>
<description>&lt;p&gt;先来点题外话，清明节前把工作辞了（去 tm 的垃圾团队，各种拉帮结派、勾心斗角）。这次找工作就得慢慢找了，不能急了，希望能找到个好团队，好岗位吧。顺便这段时间也算是比较闲，也能学习一下和填掉手上的坑。&lt;/p&gt;
&lt;p&gt;说实话好久没写博客了，一个是手上的工作确实忙，第二个是还有各种各样的坑。写本文的原因也是因为手上的一个坑——ImageEx，WPF/UWP 上的图片缓存控件。&lt;/p&gt;

&lt;p&gt;在我写的这个图片缓存控件中，其中有一个地方就是要根据图片的 url 地址，然后来存储或者获取本地的图片文件的。但是呢，我们不可能把 url 当作本地文件的文件名的，一个是可能包含非法字符（如斜杠），另一个是长度可能超出限制。想了一下，那就只能用哈希（hash）来解决了，其中 MD5 和 SHA1 两种算法我觉得都可以解决这个问题。但问题是，哪一个更好、更快呢？传统经验告诉我是 MD5，但是我觉得还是有必要手动实践一下，毕竟没有 100% 的把握。&lt;/p&gt;
&lt;p&gt;先编写出如下的代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; HashHelper
{
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; GetMD5(&lt;span&gt;string&lt;/span&gt;&lt;span&gt; input)
    {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (input == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
        {
            &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; ArgumentNullException(nameof(input));
        }

        &lt;/span&gt;&lt;span&gt;using&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; md5 =&lt;span&gt; MD5.Create())
        {
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; buffer =&lt;span&gt; Encoding.UTF8.GetBytes(input);
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; hashResult =&lt;span&gt; md5.ComputeHash(buffer);
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; BitConverter.ToString(hashResult).Replace(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;string&lt;/span&gt;&lt;span&gt;.Empty);
        }
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; GetSHA1(&lt;span&gt;string&lt;/span&gt;&lt;span&gt; input)
    {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (input == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
        {
            &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; ArgumentNullException(nameof(input));
        }

        &lt;/span&gt;&lt;span&gt;using&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; sha1 =&lt;span&gt; SHA1.Create())
        {
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; buffer =&lt;span&gt; Encoding.UTF8.GetBytes(input);
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; hashResult =&lt;span&gt; sha1.ComputeHash(buffer);
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; BitConverter.ToString(hashResult).Replace(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;string&lt;/span&gt;&lt;span&gt;.Empty);
        }
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;作用是输入一个字符串，输出一个哈希后的字符串。&lt;/p&gt;

&lt;p&gt;建立一个 .net core 的控制台项目，我就叫 TestBenchmarkDotnet。&lt;/p&gt;
&lt;p&gt;然后安装 nuget 包，BenchmarkDotnet。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://images2018.cnblogs.com/blog/484187/201804/484187-20180408230829048-740836680.png&quot;&gt;&lt;img title=&quot;QQ截图20180408222314&quot; src=&quot;https://images2018.cnblogs.com/blog/484187/201804/484187-20180408230829469-901177871.png&quot; alt=&quot;QQ截图20180408222314&quot; width=&quot;961&quot; height=&quot;519&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;安装完成后编写如下代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; TestContext
{
    [Benchmark]
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; TestMD5()
    {
        HashHelper.GetMD5(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;https://www.baidu.com/img/bd_logo1.png&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
    }

    [Benchmark]
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; TestSHA1()
    {
        HashHelper.GetSHA1(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;https://www.baidu.com/img/bd_logo1.png&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后修改 Main 方法：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Program
{
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; Main(&lt;span&gt;string&lt;/span&gt;&lt;span&gt;[] args)
    {
        Summary summary &lt;/span&gt;= BenchmarkRunner.Run&amp;lt;TestContext&amp;gt;&lt;span&gt;();
        Console.ReadLine();
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;最后将 Debug 调成 Release 模式，不调试启动。&lt;/p&gt;
&lt;p&gt;稍微等待一会儿就会出现结果了。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://images2018.cnblogs.com/blog/484187/201804/484187-20180408230829823-1411679682.png&quot;&gt;&lt;img title=&quot;QQ截图20180408223415&quot; src=&quot;https://images2018.cnblogs.com/blog/484187/201804/484187-20180408230830196-1471132695.png&quot; alt=&quot;QQ截图20180408223415&quot; width=&quot;883&quot; height=&quot;505&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;结论是 MD5 确实比 SHA1 快。&lt;/p&gt;
&lt;p&gt;另外由于这是在 .net core 下的测试结果，而 WPF 是跑在 .net framework 下的，那么是否结果可能不一样呢？&lt;/p&gt;
&lt;p&gt;Benchmark 支持多个 .net 环境的性能测试（.net framework, net core, mono）。&lt;/p&gt;
&lt;p&gt;修改 TestContext 类的代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;[ClrJob, CoreJob]
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; TestContext
{
    [Benchmark]
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; TestMD5()
    {
        HashHelper.GetMD5(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;https://www.baidu.com/img/bd_logo1.png&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
    }

    [Benchmark]
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; TestSHA1()
    {
        HashHelper.GetSHA1(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;https://www.baidu.com/img/bd_logo1.png&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;添加了 ClrJob 和 CoreJob 两个标签&lt;/p&gt;
&lt;p&gt;然后修改项目的 csproj 文件&lt;/p&gt;
&lt;p&gt;将&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;TargetFramework&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;netcoreapp2.0&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;TargetFramework&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;一行改为&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;TargetFrameworks&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;netcoreapp2.0;net471&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;TargetFrameworks&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;回到 VS 重新编译，还原 nuget 包。&lt;/p&gt;
&lt;p&gt;不调试启动。稍等片刻。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://images2018.cnblogs.com/blog/484187/201804/484187-20180408230830630-2086828109.png&quot;&gt;&lt;img title=&quot;QQ截图20180408230358&quot; src=&quot;https://images2018.cnblogs.com/blog/484187/201804/484187-20180408230831046-927131308.png&quot; alt=&quot;QQ截图20180408230358&quot; width=&quot;866&quot; height=&quot;578&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;可见在 .net framework 环境下，仍然是 MD5 比 SHA1 快的。而且可以看见 .net core 比 .net framework 环境下快了很多。&lt;/p&gt;
&lt;p&gt;另外在输出目录下，BenchmarkDotnet 会输出性能测试结果文件：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://images2018.cnblogs.com/blog/484187/201804/484187-20180408230831368-548694546.png&quot;&gt;&lt;img title=&quot;QQ截图20180408230657&quot; src=&quot;https://images2018.cnblogs.com/blog/484187/201804/484187-20180408230831663-73248772.png&quot; alt=&quot;QQ截图20180408230657&quot; width=&quot;273&quot; height=&quot;93&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;打开 html 版本后看到的跟刚才控制台的是一样的&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://images2018.cnblogs.com/blog/484187/201804/484187-20180408230832009-1923382545.png&quot;&gt;&lt;img title=&quot;QQ截图20180408230743&quot; src=&quot;https://images2018.cnblogs.com/blog/484187/201804/484187-20180408230832357-976082546.png&quot; alt=&quot;QQ截图20180408230743&quot; width=&quot;715&quot; height=&quot;334&quot; border=&quot;0&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Sun, 08 Apr 2018 15:09:00 +0000</pubDate>
<dc:creator>h82258652</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/h82258652/p/8748345.html</dc:identifier>
</item>
<item>
<title>WPF 自定义ComboBox样式 - 小明GG</title>
<link>http://www.cnblogs.com/xiaomingg/p/8748286.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/xiaomingg/p/8748286.html</guid>
<description>&lt;h2&gt;一、ComboBox基本样式&lt;/h2&gt;
&lt;p&gt;ComboBox有两种状态，可编辑和不可编辑状态。通过设置IsEditable属性可以切换控件状态。&lt;/p&gt;
&lt;p&gt;先看基本样式效果：&lt;br/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1366553/201804/1366553-20180408212022511-1976193187.gif&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;基本样式代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;44&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;ComboBox&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;ComBoBox项选中背景色&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;SolidColorBrush &lt;/span&gt;&lt;span&gt;x:Key&lt;/span&gt;&lt;span&gt;=&quot;ComboBoxSelectdBackground&quot;&lt;/span&gt;&lt;span&gt; Color&lt;/span&gt;&lt;span&gt;=&quot;#ff8c69&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;ComBoBox项鼠标经过背景色&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;SolidColorBrush &lt;/span&gt;&lt;span&gt;x:Key&lt;/span&gt;&lt;span&gt;=&quot;ComboBoxMouseOverBackground&quot;&lt;/span&gt;&lt;span&gt; Color&lt;/span&gt;&lt;span&gt;=&quot;#ff3030&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;ComBoBox项选中前景色&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;SolidColorBrush &lt;/span&gt;&lt;span&gt;x:Key&lt;/span&gt;&lt;span&gt;=&quot;ComboBoxSelectedForeground&quot;&lt;/span&gt;&lt;span&gt; Color&lt;/span&gt;&lt;span&gt;=&quot;White&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;ComBoBox项鼠标经过前景色&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;SolidColorBrush &lt;/span&gt;&lt;span&gt;x:Key&lt;/span&gt;&lt;span&gt;=&quot;ComboBoxMouseOverForegrond&quot;&lt;/span&gt;&lt;span&gt; Color&lt;/span&gt;&lt;span&gt;=&quot;White&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Style &lt;/span&gt;&lt;span&gt;TargetType&lt;/span&gt;&lt;span&gt;=&quot;&lt;/span&gt;&lt;span&gt;{x:Type ComboBox}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Setter &lt;/span&gt;&lt;span&gt;Property&lt;/span&gt;&lt;span&gt;=&quot;ItemContainerStyle&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Setter.Value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Style &lt;/span&gt;&lt;span&gt;TargetType&lt;/span&gt;&lt;span&gt;=&quot;ComboBoxItem&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Setter &lt;/span&gt;&lt;span&gt;Property&lt;/span&gt;&lt;span&gt;=&quot;Height&quot;&lt;/span&gt;&lt;span&gt; Value&lt;/span&gt;&lt;span&gt;=&quot;20&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Setter &lt;/span&gt;&lt;span&gt;Property&lt;/span&gt;&lt;span&gt;=&quot;Template&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Setter.Value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;ControlTemplate  &lt;/span&gt;&lt;span&gt;TargetType&lt;/span&gt;&lt;span&gt;=&quot;&lt;/span&gt;&lt;span&gt;{x:Type ComboBoxItem}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Grid &lt;/span&gt;&lt;span&gt;Height&lt;/span&gt;&lt;span&gt;=&quot;&lt;/span&gt;&lt;span&gt;{TemplateBinding Height}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; Width&lt;/span&gt;&lt;span&gt;=&quot;&lt;/span&gt;&lt;span&gt;{TemplateBinding Width}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Border &lt;/span&gt;&lt;span&gt;x:Name&lt;/span&gt;&lt;span&gt;=&quot;_borderbg&quot;&lt;/span&gt;&lt;span&gt; Background&lt;/span&gt;&lt;span&gt;=&quot;Transparent&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
                                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;TextBlock &lt;/span&gt;&lt;span&gt;Margin&lt;/span&gt;&lt;span&gt;=&quot;3 0 3 0&quot;&lt;/span&gt;&lt;span&gt; VerticalAlignment&lt;/span&gt;&lt;span&gt;=&quot;Center&quot;&lt;/span&gt;&lt;span&gt; x:Name&lt;/span&gt;&lt;span&gt;=&quot;_txt&quot;&lt;/span&gt;&lt;span&gt; Foreground&lt;/span&gt;&lt;span&gt;=&quot;#333&quot;&lt;/span&gt;&lt;span&gt; Text&lt;/span&gt;&lt;span&gt;=&quot;&lt;/span&gt;&lt;span&gt;{Binding Content,RelativeSource={RelativeSource TemplatedParent}}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
                                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Border &lt;/span&gt;&lt;span&gt;x:Name&lt;/span&gt;&lt;span&gt;=&quot;_border&quot;&lt;/span&gt;&lt;span&gt; Background&lt;/span&gt;&lt;span&gt;=&quot;White&quot;&lt;/span&gt;&lt;span&gt; Opacity&lt;/span&gt;&lt;span&gt;=&quot;0&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
                                    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Grid&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;ControlTemplate.Triggers&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Trigger &lt;/span&gt;&lt;span&gt;Property&lt;/span&gt;&lt;span&gt;=&quot;IsSelected&quot;&lt;/span&gt;&lt;span&gt; Value&lt;/span&gt;&lt;span&gt;=&quot;true&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                                            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Setter &lt;/span&gt;&lt;span&gt;TargetName&lt;/span&gt;&lt;span&gt;=&quot;_borderbg&quot;&lt;/span&gt;&lt;span&gt; Property&lt;/span&gt;&lt;span&gt;=&quot;Background&quot;&lt;/span&gt;&lt;span&gt; Value&lt;/span&gt;&lt;span&gt;=&quot;&lt;/span&gt;&lt;span&gt;{StaticResource ComboBoxSelectdBackground}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
                                            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Setter &lt;/span&gt;&lt;span&gt;TargetName&lt;/span&gt;&lt;span&gt;=&quot;_txt&quot;&lt;/span&gt;&lt;span&gt; Property&lt;/span&gt;&lt;span&gt;=&quot;Foreground&quot;&lt;/span&gt;&lt;span&gt; Value&lt;/span&gt;&lt;span&gt;=&quot;&lt;/span&gt;&lt;span&gt;{StaticResource ComboBoxSelectedForeground}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
                                        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Trigger&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;MultiTrigger&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                                            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;MultiTrigger.Conditions&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                                                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Condition &lt;/span&gt;&lt;span&gt;Property&lt;/span&gt;&lt;span&gt;=&quot;IsSelected&quot;&lt;/span&gt;&lt;span&gt; Value&lt;/span&gt;&lt;span&gt;=&quot;false&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
                                                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Condition &lt;/span&gt;&lt;span&gt;Property&lt;/span&gt;&lt;span&gt;=&quot;IsMouseOver&quot;&lt;/span&gt;&lt;span&gt; Value&lt;/span&gt;&lt;span&gt;=&quot;true&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
                                            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;MultiTrigger.Conditions&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                                            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Setter &lt;/span&gt;&lt;span&gt;TargetName&lt;/span&gt;&lt;span&gt;=&quot;_borderbg&quot;&lt;/span&gt;&lt;span&gt; Property&lt;/span&gt;&lt;span&gt;=&quot;Background&quot;&lt;/span&gt;&lt;span&gt; Value&lt;/span&gt;&lt;span&gt;=&quot;&lt;/span&gt;&lt;span&gt;{StaticResource ComboBoxMouseOverBackground}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
                                            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Setter &lt;/span&gt;&lt;span&gt;TargetName&lt;/span&gt;&lt;span&gt;=&quot;_txt&quot;&lt;/span&gt;&lt;span&gt; Property&lt;/span&gt;&lt;span&gt;=&quot;Foreground&quot;&lt;/span&gt;&lt;span&gt; Value&lt;/span&gt;&lt;span&gt;=&quot;&lt;/span&gt;&lt;span&gt;{StaticResource ComboBoxMouseOverForegrond}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
                                        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;MultiTrigger&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

                                    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;ControlTemplate.Triggers&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                                &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;ControlTemplate&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Setter.Value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Setter&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Setter.Value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Setter&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Setter &lt;/span&gt;&lt;span&gt;Property&lt;/span&gt;&lt;span&gt;=&quot;Template&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Setter.Value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;ControlTemplate &lt;/span&gt;&lt;span&gt;TargetType&lt;/span&gt;&lt;span&gt;=&quot;&lt;/span&gt;&lt;span&gt;{x:Type ComboBox}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Grid&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

                            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Grid.ColumnDefinitions&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;ColumnDefinition &lt;/span&gt;&lt;span&gt;Width&lt;/span&gt;&lt;span&gt;=&quot;0.7*&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
                                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;ColumnDefinition &lt;/span&gt;&lt;span&gt;Width&lt;/span&gt;&lt;span&gt;=&quot;0.3*&quot;&lt;/span&gt;&lt;span&gt; MaxWidth&lt;/span&gt;&lt;span&gt;=&quot;30&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
                            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Grid.ColumnDefinitions&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Border  &lt;/span&gt;&lt;span&gt;Grid.Column&lt;/span&gt;&lt;span&gt;=&quot;0&quot;&lt;/span&gt;&lt;span&gt; Grid.ColumnSpan&lt;/span&gt;&lt;span&gt;=&quot;2&quot;&lt;/span&gt;&lt;span&gt; BorderThickness&lt;/span&gt;&lt;span&gt;=&quot;1&quot;&lt;/span&gt;&lt;span&gt; BorderBrush&lt;/span&gt;&lt;span&gt;=&quot;&lt;/span&gt;&lt;span&gt;{TemplateBinding BorderBrush}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; CornerRadius&lt;/span&gt;&lt;span&gt;=&quot;1,0,0,1&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
                            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;ContentPresenter &lt;/span&gt;&lt;span&gt;HorizontalAlignment&lt;/span&gt;&lt;span&gt;=&quot;Left&quot;&lt;/span&gt;&lt;span&gt; Margin&lt;/span&gt;&lt;span&gt;=&quot;3,3,0,3&quot;&lt;/span&gt;&lt;span&gt; x:Name&lt;/span&gt;&lt;span&gt;=&quot;ContentSite&quot;&lt;/span&gt;&lt;span&gt; VerticalAlignment&lt;/span&gt;&lt;span&gt;=&quot;Center&quot;&lt;/span&gt;&lt;span&gt; Content&lt;/span&gt;&lt;span&gt;=&quot;&lt;/span&gt;&lt;span&gt;{TemplateBinding SelectionBoxItem}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; ContentTemplate&lt;/span&gt;&lt;span&gt;=&quot;&lt;/span&gt;&lt;span&gt;{TemplateBinding SelectionBoxItemTemplate}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; ContentTemplateSelector&lt;/span&gt;&lt;span&gt;=&quot;&lt;/span&gt;&lt;span&gt;{TemplateBinding ItemTemplateSelector}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; IsHitTestVisible&lt;/span&gt;&lt;span&gt;=&quot;False&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;

                            &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;ToggleButton 已数据绑定到 ComboBox 本身以切换 IsDropDownOpen&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
                            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;ToggleButton &lt;/span&gt;&lt;span&gt;Grid.Column&lt;/span&gt;&lt;span&gt;=&quot;0&quot;&lt;/span&gt;&lt;span&gt;  Grid.ColumnSpan&lt;/span&gt;&lt;span&gt;=&quot;2&quot;&lt;/span&gt;&lt;span&gt;  Template&lt;/span&gt;&lt;span&gt;=&quot;&lt;/span&gt;&lt;span&gt;{StaticResource ComboBoxToggleButton}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; x:Name&lt;/span&gt;&lt;span&gt;=&quot;ToggleButton&quot;&lt;/span&gt;&lt;span&gt; Focusable&lt;/span&gt;&lt;span&gt;=&quot;false&quot;&lt;/span&gt;&lt;span&gt; IsChecked&lt;/span&gt;&lt;span&gt;=&quot;&lt;/span&gt;&lt;span&gt;{Binding Path=IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; ClickMode&lt;/span&gt;&lt;span&gt;=&quot;Press&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
                            &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;必须将 TextBox 命名为 PART_EditableTextBox，否则 ComboBox 将无法识别它&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
                            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;TextBox   &lt;/span&gt;&lt;span&gt;Visibility&lt;/span&gt;&lt;span&gt;=&quot;Hidden&quot;&lt;/span&gt;&lt;span&gt; BorderThickness&lt;/span&gt;&lt;span&gt;=&quot;0&quot;&lt;/span&gt;&lt;span&gt;   Margin&lt;/span&gt;&lt;span&gt;=&quot;2 0 0 0&quot;&lt;/span&gt;&lt;span&gt; x:Name&lt;/span&gt;&lt;span&gt;=&quot;PART_EditableTextBox&quot;&lt;/span&gt;&lt;span&gt;  VerticalAlignment&lt;/span&gt;&lt;span&gt;=&quot;Center&quot;&lt;/span&gt;&lt;span&gt; Focusable&lt;/span&gt;&lt;span&gt;=&quot;True&quot;&lt;/span&gt;&lt;span&gt; Background&lt;/span&gt;&lt;span&gt;=&quot;Transparent&quot;&lt;/span&gt;&lt;span&gt; IsReadOnly&lt;/span&gt;&lt;span&gt;=&quot;&lt;/span&gt;&lt;span&gt;{TemplateBinding IsReadOnly}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;

                            &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;Popup 可显示 ComboBox 中的项列表。IsOpen 已数据绑定到通过 ComboBoxToggleButton 来切换的 IsDropDownOpen&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
                            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Popup &lt;/span&gt;&lt;span&gt;IsOpen&lt;/span&gt;&lt;span&gt;=&quot;&lt;/span&gt;&lt;span&gt;{TemplateBinding IsDropDownOpen}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; Placement&lt;/span&gt;&lt;span&gt;=&quot;Bottom&quot;&lt;/span&gt;&lt;span&gt; x:Name&lt;/span&gt;&lt;span&gt;=&quot;Popup&quot;&lt;/span&gt;&lt;span&gt; Focusable&lt;/span&gt;&lt;span&gt;=&quot;False&quot;&lt;/span&gt;&lt;span&gt; AllowsTransparency&lt;/span&gt;&lt;span&gt;=&quot;True&quot;&lt;/span&gt;&lt;span&gt; PopupAnimation&lt;/span&gt;&lt;span&gt;=&quot;Slide&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Grid &lt;/span&gt;&lt;span&gt;MaxHeight&lt;/span&gt;&lt;span&gt;=&quot;150&quot;&lt;/span&gt;&lt;span&gt; MinWidth&lt;/span&gt;&lt;span&gt;=&quot;&lt;/span&gt;&lt;span&gt;{TemplateBinding ActualWidth}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; x:Name&lt;/span&gt;&lt;span&gt;=&quot;DropDown&quot;&lt;/span&gt;&lt;span&gt; SnapsToDevicePixels&lt;/span&gt;&lt;span&gt;=&quot;True&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Border &lt;/span&gt;&lt;span&gt;x:Name&lt;/span&gt;&lt;span&gt;=&quot;DropDownBorder&quot;&lt;/span&gt;&lt;span&gt;  BorderBrush&lt;/span&gt;&lt;span&gt;=&quot;#e8e8e8&quot;&lt;/span&gt;&lt;span&gt; BorderThickness&lt;/span&gt;&lt;span&gt;=&quot;1 0 1 1&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
                                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;ScrollViewer &lt;/span&gt;&lt;span&gt;Margin&lt;/span&gt;&lt;span&gt;=&quot;1&quot;&lt;/span&gt;&lt;span&gt;  SnapsToDevicePixels&lt;/span&gt;&lt;span&gt;=&quot;True&quot;&lt;/span&gt;&lt;span&gt; HorizontalScrollBarVisibility&lt;/span&gt;&lt;span&gt;=&quot;Auto&quot;&lt;/span&gt;&lt;span&gt; VerticalScrollBarVisibility&lt;/span&gt;&lt;span&gt;=&quot;Auto&quot;&lt;/span&gt;&lt;span&gt; CanContentScroll&lt;/span&gt;&lt;span&gt;=&quot;True&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                                        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;StackPanel 用于显示子级，方法是将 IsItemsHost 设置为 True&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
                                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;StackPanel &lt;/span&gt;&lt;span&gt;IsItemsHost&lt;/span&gt;&lt;span&gt;=&quot;True&quot;&lt;/span&gt;&lt;span&gt; KeyboardNavigation.DirectionalNavigation&lt;/span&gt;&lt;span&gt;=&quot;Contained&quot;&lt;/span&gt;&lt;span&gt; Background&lt;/span&gt;&lt;span&gt;=&quot;White&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
                                    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;ScrollViewer&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                                &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Grid&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Popup&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Grid&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;ControlTemplate.Triggers&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Trigger &lt;/span&gt;&lt;span&gt;Property&lt;/span&gt;&lt;span&gt;=&quot;IsEditable&quot;&lt;/span&gt;&lt;span&gt; Value&lt;/span&gt;&lt;span&gt;=&quot;true&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Setter &lt;/span&gt;&lt;span&gt;TargetName&lt;/span&gt;&lt;span&gt;=&quot;PART_EditableTextBox&quot;&lt;/span&gt;&lt;span&gt; Property&lt;/span&gt;&lt;span&gt;=&quot;Visibility&quot;&lt;/span&gt;&lt;span&gt; Value&lt;/span&gt;&lt;span&gt;=&quot;Visible&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
                            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Trigger&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;ControlTemplate.Triggers&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;ControlTemplate&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Setter.Value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Setter&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;br/&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;引用示例：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;ComboBox &lt;/span&gt;&lt;span&gt;x:Name&lt;/span&gt;&lt;span&gt;=&quot;combobox&quot;&lt;/span&gt;&lt;span&gt;  Width&lt;/span&gt;&lt;span&gt;=&quot;150&quot;&lt;/span&gt;&lt;span&gt; Margin&lt;/span&gt;&lt;span&gt;=&quot;10&quot;&lt;/span&gt;&lt;span&gt; IsEditable&lt;/span&gt;&lt;span&gt;=&quot;False&quot;&lt;/span&gt;&lt;span&gt; BorderBrush&lt;/span&gt;&lt;span&gt;=&quot;#e8e8e8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
          &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;CheckBox &lt;/span&gt;&lt;span&gt;Content&lt;/span&gt;&lt;span&gt;=&quot;上海&quot;&lt;/span&gt;&lt;span&gt; Tag&lt;/span&gt;&lt;span&gt;=&quot;1&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;CheckBox&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
          &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;CheckBox &lt;/span&gt;&lt;span&gt;Content&lt;/span&gt;&lt;span&gt;=&quot;北京&quot;&lt;/span&gt;&lt;span&gt; Tag&lt;/span&gt;&lt;span&gt;=&quot;2&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;CheckBox&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
          &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;CheckBox &lt;/span&gt;&lt;span&gt;Content&lt;/span&gt;&lt;span&gt;=&quot;天津&quot;&lt;/span&gt;&lt;span&gt; Tag&lt;/span&gt;&lt;span&gt;=&quot;3&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;CheckBox&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
          &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;CheckBox &lt;/span&gt;&lt;span&gt;Content&lt;/span&gt;&lt;span&gt;=&quot;广州&quot;&lt;/span&gt;&lt;span&gt; Tag&lt;/span&gt;&lt;span&gt;=&quot;4&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;CheckBox&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;ComboBox&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;二、ComboBox扩展样式（多选控件）&lt;/h2&gt;
&lt;p&gt;ComBoBox能够单选选择数据，那么能不能实现多选的操作呢，答案是肯定的。这里多选的自定义控件参考了博主“梦里花落知多少”的内容。我对样式做了补充，使其能够更方便的进行移除多选的内容。同时也更好的展示了已选的内容，大家可以依葫芦湖畔根据实际需求做出更好的展示效果。&lt;/p&gt;
&lt;p&gt;先看效果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1366553/201804/1366553-20180408225840050-820938083.gif&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;2.1、添加自定义控件MultiComboBox&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;47&quot;&gt;
&lt;pre&gt;
 &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; MultiComboBox : ComboBox
    {
        &lt;/span&gt;&lt;span&gt;static&lt;/span&gt;&lt;span&gt; MultiComboBox()
        {
            DefaultStyleKeyProperty.OverrideMetadata(&lt;/span&gt;&lt;span&gt;typeof&lt;/span&gt;(MultiComboBox), &lt;span&gt;new&lt;/span&gt; FrameworkPropertyMetadata(&lt;span&gt;typeof&lt;/span&gt;&lt;span&gt;(MultiComboBox)));
        }


        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; OnPropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)
        {
            d.SetValue(e.Property, e.NewValue);
        }



        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 选中项列表
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; ObservableCollection&amp;lt;MultiCbxBaseData&amp;gt;&lt;span&gt; ChekedItems
        {
            &lt;/span&gt;&lt;span&gt;get&lt;/span&gt; { &lt;span&gt;return&lt;/span&gt; (ObservableCollection&amp;lt;MultiCbxBaseData&amp;gt;&lt;span&gt;)GetValue(ChekedItemsProperty); }
            &lt;/span&gt;&lt;span&gt;set&lt;/span&gt;&lt;span&gt; { SetValue(ChekedItemsProperty, value); }
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;readonly&lt;/span&gt; DependencyProperty ChekedItemsProperty =&lt;span&gt;
            DependencyProperty.Register(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ChekedItems&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;typeof&lt;/span&gt;(ObservableCollection&amp;lt;MultiCbxBaseData&amp;gt;), &lt;span&gt;typeof&lt;/span&gt;(MultiComboBox), &lt;span&gt;new&lt;/span&gt; PropertyMetadata(&lt;span&gt;new&lt;/span&gt; ObservableCollection&amp;lt;MultiCbxBaseData&amp;gt;&lt;span&gt;(), OnPropertyChanged));



        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; ListBox竖向列表
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;private&lt;/span&gt;&lt;span&gt; ListBox _ListBoxV;

        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; ListBox横向列表
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;private&lt;/span&gt;&lt;span&gt; ListBox _ListBoxH;

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;override&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; OnApplyTemplate()
        {
            &lt;/span&gt;&lt;span&gt;base&lt;/span&gt;&lt;span&gt;.OnApplyTemplate();
            _ListBoxV &lt;/span&gt;= Template.FindName(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;PART_ListBox&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;this&lt;/span&gt;) &lt;span&gt;as&lt;/span&gt;&lt;span&gt; ListBox;
            _ListBoxH &lt;/span&gt;= Template.FindName(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;PART_ListBoxChk&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;this&lt;/span&gt;) &lt;span&gt;as&lt;/span&gt;&lt;span&gt; ListBox;
            _ListBoxH.ItemsSource &lt;/span&gt;=&lt;span&gt; ChekedItems;
            _ListBoxV.SelectionChanged &lt;/span&gt;+=&lt;span&gt; _ListBoxV_SelectionChanged;
            _ListBoxH.SelectionChanged &lt;/span&gt;+=&lt;span&gt; _ListBoxH_SelectionChanged;

            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (ItemsSource != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
            {
                &lt;/span&gt;&lt;span&gt;foreach&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; item &lt;span&gt;in&lt;/span&gt;&lt;span&gt; ItemsSource)
                {
                    MultiCbxBaseData bdc &lt;/span&gt;= item &lt;span&gt;as&lt;/span&gt;&lt;span&gt; MultiCbxBaseData;
                    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (bdc.IsCheck)
                    {
                        _ListBoxV.SelectedItems.Add(bdc);
                    }
                }
            }
        }

        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; _ListBoxH_SelectionChanged(&lt;span&gt;object&lt;/span&gt;&lt;span&gt; sender, SelectionChangedEventArgs e)
        {
            &lt;/span&gt;&lt;span&gt;foreach&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; item &lt;span&gt;in&lt;/span&gt;&lt;span&gt; e.RemovedItems)
            {
                MultiCbxBaseData datachk &lt;/span&gt;= item &lt;span&gt;as&lt;/span&gt;&lt;span&gt; MultiCbxBaseData;

                &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; _ListBoxV.SelectedItems.Count; i++&lt;span&gt;)
                {
                    MultiCbxBaseData datachklist &lt;/span&gt;= _ListBoxV.SelectedItems[i] &lt;span&gt;as&lt;/span&gt;&lt;span&gt; MultiCbxBaseData;
                    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (datachklist.ID ==&lt;span&gt; datachk.ID)
                    {
                        _ListBoxV.SelectedItems.Remove(_ListBoxV.SelectedItems[i]);
                    }
                }
            }
        }

        &lt;/span&gt;&lt;span&gt;void&lt;/span&gt; _ListBoxV_SelectionChanged(&lt;span&gt;object&lt;/span&gt;&lt;span&gt; sender, SelectionChangedEventArgs e)
        {
            &lt;/span&gt;&lt;span&gt;foreach&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; item &lt;span&gt;in&lt;/span&gt;&lt;span&gt; e.AddedItems)
            {
                MultiCbxBaseData datachk &lt;/span&gt;= item &lt;span&gt;as&lt;/span&gt;&lt;span&gt; MultiCbxBaseData;
                datachk.IsCheck &lt;/span&gt;= &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (ChekedItems.IndexOf(datachk) &amp;lt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
                {
                    ChekedItems.Add(datachk);
                }
            }

            &lt;/span&gt;&lt;span&gt;foreach&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; item &lt;span&gt;in&lt;/span&gt;&lt;span&gt; e.RemovedItems)
            {
                MultiCbxBaseData datachk &lt;/span&gt;= item &lt;span&gt;as&lt;/span&gt;&lt;span&gt; MultiCbxBaseData;
                datachk.IsCheck &lt;/span&gt;= &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
                ChekedItems.Remove(datachk);
            }
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; MultiCbxBaseData
        {
            &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; _id;
            &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
            &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 关联主键
            &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
            &lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; ID
            {
                &lt;/span&gt;&lt;span&gt;get&lt;/span&gt; { &lt;span&gt;return&lt;/span&gt;&lt;span&gt; _id; }
                &lt;/span&gt;&lt;span&gt;set&lt;/span&gt; { _id =&lt;span&gt; value; }
            }

            &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;&lt;span&gt; _viewName;
            &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
            &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 显示名称
            &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
            &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;&lt;span&gt; ViewName
            {
                &lt;/span&gt;&lt;span&gt;get&lt;/span&gt; { &lt;span&gt;return&lt;/span&gt;&lt;span&gt; _viewName; }
                &lt;/span&gt;&lt;span&gt;set&lt;/span&gt;&lt;span&gt;
                {
                    _viewName &lt;/span&gt;=&lt;span&gt; value;
                }
            }

            &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;bool&lt;/span&gt;&lt;span&gt; _isCheck;
            &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
            &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 是否选中
            &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
            &lt;span&gt;public&lt;/span&gt; &lt;span&gt;bool&lt;/span&gt;&lt;span&gt; IsCheck
            {
                &lt;/span&gt;&lt;span&gt;get&lt;/span&gt; { &lt;span&gt;return&lt;/span&gt;&lt;span&gt; _isCheck; }
                &lt;/span&gt;&lt;span&gt;set&lt;/span&gt; { _isCheck =&lt;span&gt; value;}
            }
        }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;2.2、定义MultiComboBox控件的样式&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;50&quot;&gt;
&lt;pre&gt;
 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;ControlTemplate &lt;/span&gt;&lt;span&gt;x:Key&lt;/span&gt;&lt;span&gt;=&quot;ComboBoxToggleButton&quot;&lt;/span&gt;&lt;span&gt; TargetType&lt;/span&gt;&lt;span&gt;=&quot;&lt;/span&gt;&lt;span&gt;{x:Type ToggleButton}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Grid &lt;/span&gt;&lt;span&gt;Height&lt;/span&gt;&lt;span&gt;=&quot;25&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Border &lt;/span&gt;&lt;span&gt;Grid.Column&lt;/span&gt;&lt;span&gt;=&quot;1&quot;&lt;/span&gt;&lt;span&gt; Background&lt;/span&gt;&lt;span&gt;=&quot;White&quot;&lt;/span&gt;&lt;span&gt; Opacity&lt;/span&gt;&lt;span&gt;=&quot;0&quot;&lt;/span&gt;&lt;span&gt;   Cursor&lt;/span&gt;&lt;span&gt;=&quot;Hand&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Path &lt;/span&gt;&lt;span&gt;x:Name&lt;/span&gt;&lt;span&gt;=&quot;Arrow&quot;&lt;/span&gt;&lt;span&gt; Grid.Column&lt;/span&gt;&lt;span&gt;=&quot;1&quot;&lt;/span&gt;&lt;span&gt;   Data&lt;/span&gt;&lt;span&gt;=&quot;M 0 0  6 6 12 0 Z&quot;&lt;/span&gt;&lt;span&gt;  VerticalAlignment&lt;/span&gt;&lt;span&gt;=&quot;Center&quot;&lt;/span&gt;&lt;span&gt; HorizontalAlignment&lt;/span&gt;&lt;span&gt;=&quot;Center&quot;&lt;/span&gt;&lt;span&gt; Stretch&lt;/span&gt;&lt;span&gt;=&quot;None&quot;&lt;/span&gt;&lt;span&gt; Fill&lt;/span&gt;&lt;span&gt;=&quot;#B1B1B1&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Grid&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;ControlTemplate.Triggers&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Trigger &lt;/span&gt;&lt;span&gt;Property&lt;/span&gt;&lt;span&gt;=&quot;IsChecked&quot;&lt;/span&gt;&lt;span&gt; Value&lt;/span&gt;&lt;span&gt;=&quot;true&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Setter &lt;/span&gt;&lt;span&gt;TargetName&lt;/span&gt;&lt;span&gt;=&quot;Arrow&quot;&lt;/span&gt;&lt;span&gt; Property&lt;/span&gt;&lt;span&gt;=&quot;RenderTransform&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Setter.Value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;RotateTransform   &lt;/span&gt;&lt;span&gt;CenterX&lt;/span&gt;&lt;span&gt;=&quot;6&quot;&lt;/span&gt;&lt;span&gt; CenterY&lt;/span&gt;&lt;span&gt;=&quot;3&quot;&lt;/span&gt;&lt;span&gt; Angle&lt;/span&gt;&lt;span&gt;=&quot;180&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;RotateTransform&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Setter.Value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Setter&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Setter &lt;/span&gt;&lt;span&gt;TargetName&lt;/span&gt;&lt;span&gt;=&quot;Arrow&quot;&lt;/span&gt;&lt;span&gt; Property&lt;/span&gt;&lt;span&gt;=&quot;Margin&quot;&lt;/span&gt;&lt;span&gt; Value&lt;/span&gt;&lt;span&gt;=&quot;0 0 0 2&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Trigger&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;ControlTemplate.Triggers&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;ControlTemplate&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;MultiComboBox普通样式&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Style  &lt;/span&gt;&lt;span&gt;TargetType&lt;/span&gt;&lt;span&gt;=&quot;&lt;/span&gt;&lt;span&gt;{x:Type local:MultiComboBox}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Setter &lt;/span&gt;&lt;span&gt;Property&lt;/span&gt;&lt;span&gt;=&quot;Width&quot;&lt;/span&gt;&lt;span&gt; Value&lt;/span&gt;&lt;span&gt;=&quot;200&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Setter &lt;/span&gt;&lt;span&gt;Property&lt;/span&gt;&lt;span&gt;=&quot;HorizontalContentAlignment&quot;&lt;/span&gt;&lt;span&gt; Value&lt;/span&gt;&lt;span&gt;=&quot;Stretch&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Setter &lt;/span&gt;&lt;span&gt;Property&lt;/span&gt;&lt;span&gt;=&quot;VerticalContentAlignment&quot;&lt;/span&gt;&lt;span&gt; Value&lt;/span&gt;&lt;span&gt;=&quot;Center&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Setter &lt;/span&gt;&lt;span&gt;Property&lt;/span&gt;&lt;span&gt;=&quot;SnapsToDevicePixels&quot;&lt;/span&gt;&lt;span&gt; Value&lt;/span&gt;&lt;span&gt;=&quot;True&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Setter &lt;/span&gt;&lt;span&gt;Property&lt;/span&gt;&lt;span&gt;=&quot;MaxDropDownHeight&quot;&lt;/span&gt;&lt;span&gt; Value&lt;/span&gt;&lt;span&gt;=&quot;400&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Setter &lt;/span&gt;&lt;span&gt;Property&lt;/span&gt;&lt;span&gt;=&quot;Template&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Setter.Value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;ControlTemplate &lt;/span&gt;&lt;span&gt;TargetType&lt;/span&gt;&lt;span&gt;=&quot;&lt;/span&gt;&lt;span&gt;{x:Type local:MultiComboBox}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Grid&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Border &lt;/span&gt;&lt;span&gt;x:Name&lt;/span&gt;&lt;span&gt;=&quot;Bg&quot;&lt;/span&gt;&lt;span&gt; SnapsToDevicePixels&lt;/span&gt;&lt;span&gt;=&quot;&lt;/span&gt;&lt;span&gt;{TemplateBinding SnapsToDevicePixels}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;  Width&lt;/span&gt;&lt;span&gt;=&quot;&lt;/span&gt;&lt;span&gt;{TemplateBinding Width}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; Height&lt;/span&gt;&lt;span&gt;=&quot;&lt;/span&gt;&lt;span&gt;{TemplateBinding Height}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; BorderBrush&lt;/span&gt;&lt;span&gt;=&quot;#eaeaea&quot;&lt;/span&gt;&lt;span&gt; BorderThickness&lt;/span&gt;&lt;span&gt;=&quot;1&quot;&lt;/span&gt;  &lt;span&gt;&amp;gt;&lt;/span&gt;
                            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Grid &lt;/span&gt;&lt;span&gt;x:Name&lt;/span&gt;&lt;span&gt;=&quot;PART_Root&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

                                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Grid &lt;/span&gt;&lt;span&gt;x:Name&lt;/span&gt;&lt;span&gt;=&quot;PART_InnerGrid&quot;&lt;/span&gt;&lt;span&gt; Margin&lt;/span&gt;&lt;span&gt;=&quot;0&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Grid.ColumnDefinitions&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;ColumnDefinition &lt;/span&gt;&lt;span&gt;Width&lt;/span&gt;&lt;span&gt;=&quot;*&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
                                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;ColumnDefinition &lt;/span&gt;&lt;span&gt;Width&lt;/span&gt;&lt;span&gt;=&quot;0.3*&quot;&lt;/span&gt;&lt;span&gt; MaxWidth&lt;/span&gt;&lt;span&gt;=&quot;30&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
                                    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Grid.ColumnDefinitions&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;ListBox &lt;/span&gt;&lt;span&gt;x:Name&lt;/span&gt;&lt;span&gt;=&quot;PART_ListBoxChk&quot;&lt;/span&gt;&lt;span&gt;  SelectionMode&lt;/span&gt;&lt;span&gt;=&quot;Multiple&quot;&lt;/span&gt;&lt;span&gt; BorderThickness&lt;/span&gt;&lt;span&gt;=&quot;0&quot;&lt;/span&gt;&lt;span&gt; ScrollViewer.VerticalScrollBarVisibility&lt;/span&gt;&lt;span&gt;=&quot;Disabled&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;ListBox.ItemsPanel&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                                            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;ItemsPanelTemplate&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                                                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;VirtualizingStackPanel &lt;/span&gt;&lt;span&gt;Orientation&lt;/span&gt;&lt;span&gt;=&quot;Horizontal&quot;&lt;/span&gt;&lt;span&gt; VirtualizingStackPanel.IsVirtualizing&lt;/span&gt;&lt;span&gt;=&quot;True&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
                                            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;ItemsPanelTemplate&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                                        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;ListBox.ItemsPanel&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;ListBox.ItemContainerStyle&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                                            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Style &lt;/span&gt;&lt;span&gt;TargetType&lt;/span&gt;&lt;span&gt;=&quot;ListBoxItem&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                                                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Setter &lt;/span&gt;&lt;span&gt;Property&lt;/span&gt;&lt;span&gt;=&quot;BorderThickness&quot;&lt;/span&gt;&lt;span&gt; Value&lt;/span&gt;&lt;span&gt;=&quot;0&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
                                                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Setter &lt;/span&gt;&lt;span&gt;Property&lt;/span&gt;&lt;span&gt;=&quot;IsSelected&quot;&lt;/span&gt;&lt;span&gt; Value&lt;/span&gt;&lt;span&gt;=&quot;True&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
                                                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Setter &lt;/span&gt;&lt;span&gt;Property&lt;/span&gt;&lt;span&gt;=&quot;Template&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                                                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Setter.Value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                                                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;ControlTemplate &lt;/span&gt;&lt;span&gt;TargetType&lt;/span&gt;&lt;span&gt;=&quot;ListBoxItem&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                                                            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;CheckBox &lt;/span&gt;&lt;span&gt;BorderThickness&lt;/span&gt;&lt;span&gt;=&quot;0&quot;&lt;/span&gt;&lt;span&gt;  VerticalAlignment&lt;/span&gt;&lt;span&gt;=&quot;Center&quot;&lt;/span&gt;&lt;span&gt; HorizontalAlignment&lt;/span&gt;&lt;span&gt;=&quot;Center&quot;&lt;/span&gt;&lt;span&gt;  Content&lt;/span&gt;&lt;span&gt;=&quot;&lt;/span&gt;&lt;span&gt;{Binding ViewName}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; IsChecked&lt;/span&gt;&lt;span&gt;=&quot;&lt;/span&gt;&lt;span&gt;{Binding Path=IsSelected,RelativeSource={RelativeSource TemplatedParent},Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
                                                        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;ControlTemplate&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                                                    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Setter.Value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                                                &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Setter&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                                            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                                        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;ListBox.ItemContainerStyle&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                                    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;ListBox&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

                                    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;下拉按钮&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
                                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;ToggleButton &lt;/span&gt;&lt;span&gt;x:Name&lt;/span&gt;&lt;span&gt;=&quot;PART_DropDownToggle&quot;&lt;/span&gt;&lt;span&gt; IsTabStop&lt;/span&gt;&lt;span&gt;=&quot;False&quot;&lt;/span&gt;&lt;span&gt;  
                                         IsChecked&lt;/span&gt;&lt;span&gt;=&quot;&lt;/span&gt;&lt;span&gt;{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
                                         Grid.Column&lt;/span&gt;&lt;span&gt;=&quot;1&quot;&lt;/span&gt;&lt;span&gt; Template&lt;/span&gt;&lt;span&gt;=&quot;&lt;/span&gt;&lt;span&gt;{StaticResource ComboBoxToggleButton}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
                                &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Grid&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Grid&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Border&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;弹出多选列表&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Popup &lt;/span&gt;&lt;span&gt;x:Name&lt;/span&gt;&lt;span&gt;=&quot;PART_Popup&quot;&lt;/span&gt;&lt;span&gt; AllowsTransparency&lt;/span&gt;&lt;span&gt;=&quot;True&quot;&lt;/span&gt;&lt;span&gt;  Focusable&lt;/span&gt;&lt;span&gt;=&quot;False&quot;&lt;/span&gt;&lt;span&gt; StaysOpen&lt;/span&gt;&lt;span&gt;=&quot;False&quot;&lt;/span&gt;&lt;span&gt;
                               IsOpen&lt;/span&gt;&lt;span&gt;=&quot;&lt;/span&gt;&lt;span&gt;{Binding IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
                               PopupAnimation&lt;/span&gt;&lt;span&gt;=&quot;&lt;/span&gt;&lt;span&gt;{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; Placement&lt;/span&gt;&lt;span&gt;=&quot;Bottom&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Grid &lt;/span&gt;&lt;span&gt;Width&lt;/span&gt;&lt;span&gt;=&quot;&lt;/span&gt;&lt;span&gt;{Binding ActualWidth, RelativeSource={RelativeSource TemplatedParent}}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;  MaxHeight&lt;/span&gt;&lt;span&gt;=&quot;&lt;/span&gt;&lt;span&gt;{Binding MaxDropDownHeight, RelativeSource={RelativeSource TemplatedParent}}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;&amp;gt;&lt;/span&gt;
                                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;ListBox &lt;/span&gt;&lt;span&gt;x:Name&lt;/span&gt;&lt;span&gt;=&quot;PART_ListBox&quot;&lt;/span&gt;&lt;span&gt; SelectionMode&lt;/span&gt;&lt;span&gt;=&quot;Multiple&quot;&lt;/span&gt;&lt;span&gt; BorderThickness&lt;/span&gt;&lt;span&gt;=&quot;1 0 1 1&quot;&lt;/span&gt;&lt;span&gt; Background&lt;/span&gt;&lt;span&gt;=&quot;White&quot;&lt;/span&gt;&lt;span&gt; ItemsSource&lt;/span&gt;&lt;span&gt;=&quot;&lt;/span&gt;&lt;span&gt;{Binding ItemsSource,RelativeSource={RelativeSource TemplatedParent}}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
                                             MaxHeight&lt;/span&gt;&lt;span&gt;=&quot;&lt;/span&gt;&lt;span&gt;{TemplateBinding MaxDropDownHeight}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; BorderBrush&lt;/span&gt;&lt;span&gt;=&quot;#eaeaea&quot;&lt;/span&gt;  &lt;span&gt;&amp;gt;&lt;/span&gt;
                                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;ListBox.ItemContainerStyle&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Style  &lt;/span&gt;&lt;span&gt;TargetType&lt;/span&gt;&lt;span&gt;=&quot;ListBoxItem&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                                            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Setter &lt;/span&gt;&lt;span&gt;Property&lt;/span&gt;&lt;span&gt;=&quot;Template&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                                                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Setter.Value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                                                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;ControlTemplate &lt;/span&gt;&lt;span&gt;TargetType&lt;/span&gt;&lt;span&gt;=&quot;&lt;/span&gt;&lt;span&gt;{x:Type ListBoxItem}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;&amp;gt;&lt;/span&gt;
                                                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Grid  &lt;/span&gt;&lt;span&gt;Height&lt;/span&gt;&lt;span&gt;=&quot;22&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                                                            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Border &lt;/span&gt;&lt;span&gt;x:Name&lt;/span&gt;&lt;span&gt;=&quot;bg&quot;&lt;/span&gt;&lt;span&gt; BorderBrush&lt;/span&gt;&lt;span&gt;=&quot;#eaeaea&quot;&lt;/span&gt;&lt;span&gt; BorderThickness&lt;/span&gt;&lt;span&gt;=&quot;0&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
                                                            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;ContentPresenter &lt;/span&gt;&lt;span&gt;x:Name&lt;/span&gt;&lt;span&gt;=&quot;content&quot;&lt;/span&gt;  &lt;span&gt;/&amp;gt;&lt;/span&gt;
                                                            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Border &lt;/span&gt;&lt;span&gt;Background&lt;/span&gt;&lt;span&gt;=&quot;White&quot;&lt;/span&gt;&lt;span&gt;  Opacity&lt;/span&gt;&lt;span&gt;=&quot;0&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
                                                        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Grid&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                                                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;ControlTemplate.Triggers&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                                                            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Trigger &lt;/span&gt;&lt;span&gt;Property&lt;/span&gt;&lt;span&gt;=&quot;IsSelected&quot;&lt;/span&gt;&lt;span&gt; Value&lt;/span&gt;&lt;span&gt;=&quot;True&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                                                                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Setter  &lt;/span&gt;&lt;span&gt;TargetName&lt;/span&gt;&lt;span&gt;=&quot;bg&quot;&lt;/span&gt;&lt;span&gt;  Property&lt;/span&gt;&lt;span&gt;=&quot;Background&quot;&lt;/span&gt;&lt;span&gt; Value&lt;/span&gt;&lt;span&gt;=&quot;#ADD6FF&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
                                                            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Trigger&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                                                            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;MultiTrigger&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                                                                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;MultiTrigger.Conditions&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                                                                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Condition &lt;/span&gt;&lt;span&gt;Property&lt;/span&gt;&lt;span&gt;=&quot;IsMouseOver&quot;&lt;/span&gt;&lt;span&gt; Value&lt;/span&gt;&lt;span&gt;=&quot;true&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
                                                                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Condition &lt;/span&gt;&lt;span&gt;Property&lt;/span&gt;&lt;span&gt;=&quot;IsSelected&quot;&lt;/span&gt;&lt;span&gt; Value&lt;/span&gt;&lt;span&gt;=&quot;false&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
                                                                &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;MultiTrigger.Conditions&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                                                                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Setter &lt;/span&gt;&lt;span&gt;TargetName&lt;/span&gt;&lt;span&gt;=&quot;bg&quot;&lt;/span&gt;&lt;span&gt; Property&lt;/span&gt;&lt;span&gt;=&quot;Background&quot;&lt;/span&gt;&lt;span&gt; Value&lt;/span&gt;&lt;span&gt;=&quot;#009BDB&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
                                                                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Setter &lt;/span&gt;&lt;span&gt;TargetName&lt;/span&gt;&lt;span&gt;=&quot;bg&quot;&lt;/span&gt;&lt;span&gt; Property&lt;/span&gt;&lt;span&gt;=&quot;Opacity&quot;&lt;/span&gt;&lt;span&gt; Value&lt;/span&gt;&lt;span&gt;=&quot;0.7&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
                                                                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Setter   &lt;/span&gt;&lt;span&gt;Property&lt;/span&gt;&lt;span&gt;=&quot;Foreground&quot;&lt;/span&gt;&lt;span&gt; Value&lt;/span&gt;&lt;span&gt;=&quot;White&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
                                                            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;MultiTrigger&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                                                            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Trigger &lt;/span&gt;&lt;span&gt;Property&lt;/span&gt;&lt;span&gt;=&quot;IsEnabled&quot;&lt;/span&gt;&lt;span&gt; Value&lt;/span&gt;&lt;span&gt;=&quot;False&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                                                                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Setter &lt;/span&gt;&lt;span&gt;TargetName&lt;/span&gt;&lt;span&gt;=&quot;bg&quot;&lt;/span&gt;&lt;span&gt; Property&lt;/span&gt;&lt;span&gt;=&quot;Opacity&quot;&lt;/span&gt;&lt;span&gt; Value&lt;/span&gt;&lt;span&gt;=&quot;0.3&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
                                                                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Setter   &lt;/span&gt;&lt;span&gt;Property&lt;/span&gt;&lt;span&gt;=&quot;Foreground&quot;&lt;/span&gt;&lt;span&gt; Value&lt;/span&gt;&lt;span&gt;=&quot;Gray&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
                                                            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Trigger&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                                                        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;ControlTemplate.Triggers&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                                                    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;ControlTemplate&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                                                &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Setter.Value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                                            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Setter&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                                        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                                    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;ListBox.ItemContainerStyle&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;ListBox.ItemTemplate&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;DataTemplate&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                                            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Grid&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                                                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;CheckBox &lt;/span&gt;&lt;span&gt;x:Name&lt;/span&gt;&lt;span&gt;=&quot;chk&quot;&lt;/span&gt;&lt;span&gt; Visibility&lt;/span&gt;&lt;span&gt;=&quot;Hidden&quot;&lt;/span&gt;&lt;span&gt;  IsChecked&lt;/span&gt;&lt;span&gt;=&quot;&lt;/span&gt;&lt;span&gt;{Binding IsCheck,Mode=TwoWay}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; VerticalAlignment&lt;/span&gt;&lt;span&gt;=&quot;Center&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
                                                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;CheckBox &lt;/span&gt;&lt;span&gt;VerticalAlignment&lt;/span&gt;&lt;span&gt;=&quot;Center&quot;&lt;/span&gt;&lt;span&gt;  Foreground&lt;/span&gt;&lt;span&gt;=&quot;&lt;/span&gt;&lt;span&gt;{Binding Foreground,RelativeSource={RelativeSource AncestorType=ListBoxItem}}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; IsChecked&lt;/span&gt;&lt;span&gt;=&quot;&lt;/span&gt;&lt;span&gt;{Binding  RelativeSource={RelativeSource AncestorType=ListBoxItem},Path=IsSelected,Mode=TwoWay}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;  Content&lt;/span&gt;&lt;span&gt;=&quot;&lt;/span&gt;&lt;span&gt;{Binding Path=ViewName}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
                                            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Grid&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                                            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;DataTemplate.Triggers&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                                                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;DataTrigger   &lt;/span&gt;&lt;span&gt;Binding&lt;/span&gt;&lt;span&gt;=&quot;&lt;/span&gt;&lt;span&gt;{Binding  RelativeSource={RelativeSource AncestorType=ListBoxItem},Path=IsSelected}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; Value&lt;/span&gt;&lt;span&gt;=&quot;true&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                                                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Setter  &lt;/span&gt;&lt;span&gt;TargetName&lt;/span&gt;&lt;span&gt;=&quot;chk&quot;&lt;/span&gt;&lt;span&gt;  Property&lt;/span&gt;&lt;span&gt;=&quot;IsChecked&quot;&lt;/span&gt;&lt;span&gt; Value&lt;/span&gt;&lt;span&gt;=&quot;true&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
                                                &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;DataTrigger&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                                                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;DataTrigger   &lt;/span&gt;&lt;span&gt;Binding&lt;/span&gt;&lt;span&gt;=&quot;&lt;/span&gt;&lt;span&gt;{Binding  RelativeSource={RelativeSource AncestorType=ListBoxItem},Path=IsSelected}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; Value&lt;/span&gt;&lt;span&gt;=&quot;false&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                                                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Setter     &lt;/span&gt;&lt;span&gt;TargetName&lt;/span&gt;&lt;span&gt;=&quot;chk&quot;&lt;/span&gt;&lt;span&gt; Property&lt;/span&gt;&lt;span&gt;=&quot;IsChecked&quot;&lt;/span&gt;&lt;span&gt; Value&lt;/span&gt;&lt;span&gt;=&quot;true&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
                                                &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;DataTrigger&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                                            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;DataTemplate.Triggers&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                                        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;DataTemplate&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                                    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;ListBox.ItemTemplate&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                                &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;ListBox&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Grid&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Popup&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Grid&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    
                &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;ControlTemplate&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Setter.Value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Setter&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;2.3、引用示例：&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;local:MultiComboBox &lt;/span&gt;&lt;span&gt;x:Name&lt;/span&gt;&lt;span&gt;=&quot;multiCmb&quot;&lt;/span&gt;&lt;span&gt; Margin&lt;/span&gt;&lt;span&gt;=&quot;10&quot;&lt;/span&gt;&lt;span&gt; Width&lt;/span&gt;&lt;span&gt;=&quot;200&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;2.4、后台代码（初始化绑定数据）：&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;50&quot;&gt;
&lt;pre&gt;
  &lt;span&gt;public&lt;/span&gt; &lt;span&gt;partial&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; MainWindow : Window
    {
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; MainWindow()
        {
            InitializeComponent();
            MultiComboBoxList &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; ObservableCollection&amp;lt;MultiCbxBaseData&amp;gt;&lt;span&gt;()
            {
                &lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; MultiCbxBaseData(){
                    ID&lt;/span&gt;=&lt;span&gt;0&lt;/span&gt;&lt;span&gt;,
                    ViewName&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;张三&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                    IsCheck&lt;/span&gt;=&lt;span&gt;false&lt;/span&gt;&lt;span&gt;
                },
                &lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; MultiCbxBaseData(){
                    ID&lt;/span&gt;=&lt;span&gt;1&lt;/span&gt;&lt;span&gt;,
                    ViewName&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;李四&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                    IsCheck&lt;/span&gt;=&lt;span&gt;false&lt;/span&gt;&lt;span&gt;
                },
                &lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; MultiCbxBaseData(){
                    ID&lt;/span&gt;=&lt;span&gt;2&lt;/span&gt;&lt;span&gt;,
                    ViewName&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;王五&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                    IsCheck&lt;/span&gt;=&lt;span&gt;false&lt;/span&gt;&lt;span&gt;
                },
                &lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; MultiCbxBaseData(){
                    ID&lt;/span&gt;=&lt;span&gt;3&lt;/span&gt;&lt;span&gt;,
                    ViewName&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;马六&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                    IsCheck&lt;/span&gt;=&lt;span&gt;false&lt;/span&gt;&lt;span&gt;
                },
                 &lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; MultiCbxBaseData(){
                    ID&lt;/span&gt;=&lt;span&gt;4&lt;/span&gt;&lt;span&gt;,
                    ViewName&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;赵七&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                    IsCheck&lt;/span&gt;=&lt;span&gt;false&lt;/span&gt;&lt;span&gt;
                },
            };
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.multiCmb.ItemsSource =&lt;span&gt; MultiComboBoxList;
        }

        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; ObservableCollection&amp;lt;MultiCbxBaseData&amp;gt;&lt;span&gt; MultiComboBoxList;
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

</description>
<pubDate>Sun, 08 Apr 2018 15:07:00 +0000</pubDate>
<dc:creator>小明GG</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/xiaomingg/p/8748286.html</dc:identifier>
</item>
<item>
<title>MyEclipse的多模块Maven web(ssm框架整合) - 左羽</title>
<link>http://www.cnblogs.com/1214804270hacker/p/8748027.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/1214804270hacker/p/8748027.html</guid>
<description>&lt;p&gt;　　&lt;span&gt;&lt;strong&gt;&lt;span&gt;Maven的多模块可以让项目结构更明确，提高功能的内聚，降低项目的耦合度，真正的体现出分层这一概念。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;　　&lt;span&gt;我们在操作中，要明白为什么这样做，要了解到更深的层次，这样，我们就不限于个别软件了。&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;span&gt;话不多说，直入主题&lt;/span&gt;：&lt;/p&gt;
&lt;p&gt;　　如果对Maven还不够熟悉，请看该博客：&lt;a title=&quot;maven的使用&quot; href=&quot;http://www.cnblogs.com/1214804270hacker/p/8683763.html&quot; target=&quot;_blank&quot;&gt;Maven基础&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;　　整个项目做完之后的结构是这样的：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1113894/201804/1113894-20180408204201568-1445752400.png&quot; alt=&quot;&quot; width=&quot;209&quot; height=&quot;108&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1113894/201804/1113894-20180408204610292-252904146.png&quot; alt=&quot;&quot; width=&quot;188&quot; height=&quot;306&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　在开始之前我放出这两张图是maven多模块项目做完后的目录结构，以免大家被eclipse的结构迷惑了。&lt;/p&gt;
&lt;p&gt;　　首先，新建一个maven项目，如图：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1113894/201804/1113894-20180408212327699-1856050749.png&quot; alt=&quot;&quot; width=&quot;325&quot; height=&quot;240&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　选project，注意是Create a simple project，然后特别注意，&lt;strong&gt;&lt;span&gt;root目录的聚合模块的packing是pom&lt;/span&gt;&lt;/strong&gt;！！！&lt;/p&gt;
&lt;p&gt;　　完后在该maven项目上新建模块：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1113894/201804/1113894-20180408212923226-1782011215.png&quot; alt=&quot;&quot; width=&quot;204&quot; height=&quot;161&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　在这里，service层使用简单的maven-archetype-quickstart即可，packing使用jar类型，web层则使用maven-archetype-webapp的web项目，packing使用war类型。在这里，jar类型是为了让其他项目引用更方便，而war类型是为了能在服务器部署它。&lt;/p&gt;

&lt;p&gt;　　到了这一步，我们已经将这些模块建好了，接下来我要深入一下项目结构，以及多模块的原理，然后我们再配置pom文件。&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1113894/201804/1113894-20180408215003478-474101346.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　这是一个项目大概运行机制，ssm-integration作为聚合父级项目，就是为了管理其他子项目（模块），多模块就是基于聚合父级项目的。子模块service是对数据处理的模块，在这里是ssm框架，那么它负责完成对数据库的操作的封装（大概结构，具体不细说），然后对外暴露一个接口供web模块调用即可。也就是当web模块引用了ssm-service.jar之后，供web项目调用的只有你对外暴露的接口，这就真正实现分层。而web模块，只负责servlet、视图模型、前端页面和一些简单的逻辑，需要时调用ssm-service.jar的接口方法就行了。当对项目进行部署时，只需部署ssm-web即可，因为ssm-integration仅仅负责管理，你可以将它理解为承载着多模块的大框架，而ssm-service已经打包给ssm-web了（ssm-web里面已经有ssm-service了）。&lt;/p&gt;

&lt;p&gt;　　在这之前，我声明一下，聚合和继承是可以分开的，只是大家想方便一下，所以统称为父项目。&lt;/p&gt;
&lt;p&gt;　　我们开始看pom的配置，首先时父项目的pom.xml(这里只截取一部分，了解方法为重点）：&lt;/p&gt;
&lt;p&gt;　　父类pom.xml分析&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt; &lt;span&gt;&amp;lt;?&lt;/span&gt;&lt;span&gt;xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;?&amp;gt;&lt;/span&gt;
&lt;span&gt;  2&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;project &lt;/span&gt;&lt;span&gt;xmlns&lt;/span&gt;&lt;span&gt;=&quot;http://maven.apache.org/POM/4.0.0&quot;&lt;/span&gt;&lt;span&gt; xmlns:xsi&lt;/span&gt;&lt;span&gt;=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt;
&lt;span&gt;  3&lt;/span&gt; &lt;span&gt;    xsi:schemaLocation&lt;/span&gt;&lt;span&gt;=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;  4&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;modelVersion&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;4.0.0&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;modelVersion&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;  5&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;cn.zuoyu.ssm&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;  6&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;ssm-integration&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;  7&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;0.0.1-SNAPSHOT&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;  8&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;packaging&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;pom&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;packaging&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;  9&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;ssm-integration&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 10&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring&lt;span&gt;&amp;amp;amp;&lt;/span&gt;springMVC&lt;span&gt;&amp;amp;amp;&lt;/span&gt;mybatis的整合&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 11&lt;/span&gt; 
&lt;span&gt; 12&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;modules&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 13&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;module&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;ssm-service&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;module&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 14&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;module&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;ssm-controller Maven Webapp&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;module&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 15&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;modules&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 16&lt;/span&gt; 
&lt;span&gt; 17&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;properties&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 18&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;project.build.sourceEncoding&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;UTF-8&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;project.build.sourceEncoding&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 19&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;spring.version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;4.3.8.RELEASE&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;spring.version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 20&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;properties&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 21&lt;/span&gt; 
&lt;span&gt; 22&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;build&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 23&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;pluginManagement&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 24&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;plugins&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 25&lt;/span&gt;                 &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 编译插件 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 26&lt;/span&gt;                 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;plugin&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 27&lt;/span&gt;                     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.apache.maven.plugins&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 28&lt;/span&gt;                     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;maven-compiler-plugin&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 29&lt;/span&gt;                     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;2.3.2&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 30&lt;/span&gt;                     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;configuration&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 31&lt;/span&gt;                         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;source&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;1.8&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;source&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 32&lt;/span&gt;                         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;target&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;1.8&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;target&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 33&lt;/span&gt;                     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;configuration&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 34&lt;/span&gt;                 &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;plugin&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 35&lt;/span&gt; 
&lt;span&gt; 36&lt;/span&gt;                 &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 用UTF-8编码处理资源文件 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 37&lt;/span&gt;                 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;plugin&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 38&lt;/span&gt;                     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.apache.maven.plugins&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 39&lt;/span&gt;                     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;maven-resources-plugin&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 40&lt;/span&gt;                     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;2.6&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 41&lt;/span&gt;                     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;configuration&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 42&lt;/span&gt;                         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;encoding&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;UTF-8&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;encoding&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 43&lt;/span&gt;                     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;configuration&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 44&lt;/span&gt;                 &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;plugin&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 45&lt;/span&gt;             &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;plugins&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 46&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;pluginManagement&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 47&lt;/span&gt;         &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; &amp;lt;resources&amp;gt;
&lt;/span&gt;&lt;span&gt; 48&lt;/span&gt; &lt;span&gt;                &amp;lt;!--资源位置配置&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 49&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;resource&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 50&lt;/span&gt;                 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;directory&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;src/main/java&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;directory&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 51&lt;/span&gt;                 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;includes&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 52&lt;/span&gt;                     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;include&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;**/*.xml&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;include&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 53&lt;/span&gt;                 &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;includes&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 54&lt;/span&gt;             &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;resource&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 55&lt;/span&gt;             &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;指定资源的位置&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 56&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;resource&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 57&lt;/span&gt;                 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;directory&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;src/main/resources&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;directory&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 58&lt;/span&gt;             &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;resource&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 59&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;resources&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt; --&amp;gt;
&lt;/span&gt;&lt;span&gt; 60&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;build&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 61&lt;/span&gt; 
&lt;span&gt; 62&lt;/span&gt; 
&lt;span&gt; 63&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependencyManagement&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 64&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependencies&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 65&lt;/span&gt;             &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 单元测试 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 66&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 67&lt;/span&gt;                 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;junit&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 68&lt;/span&gt;                 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;junit&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 69&lt;/span&gt;                 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;4.12&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 70&lt;/span&gt;                 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;scope&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;test&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;scope&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 71&lt;/span&gt;             &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 72&lt;/span&gt;             &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; spring核心包 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 73&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 74&lt;/span&gt;                 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 75&lt;/span&gt;                 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-core&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 76&lt;/span&gt;                 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;${spring.version}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 77&lt;/span&gt;             &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 78&lt;/span&gt; 
&lt;span&gt; 79&lt;/span&gt;             &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 扫描用包 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 80&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 81&lt;/span&gt;                 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 82&lt;/span&gt;                 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-context&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 83&lt;/span&gt;                 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;${spring.version}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 84&lt;/span&gt;             &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 85&lt;/span&gt; 
&lt;span&gt; 86&lt;/span&gt;             &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 缓存扫描用包 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 87&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 88&lt;/span&gt;                 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 89&lt;/span&gt;                 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-context-support&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 90&lt;/span&gt;                 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;${spring.version}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 91&lt;/span&gt;             &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 92&lt;/span&gt; 
&lt;span&gt; 93&lt;/span&gt;             &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; bean支持 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 94&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 95&lt;/span&gt;                 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 96&lt;/span&gt;                 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-beans&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 97&lt;/span&gt;                 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;${spring.version}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 98&lt;/span&gt;             &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 99&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependencyManagement&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;100&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;project&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　在这里，&lt;span data-mce-=&quot;&quot;&gt;&amp;lt;&lt;span data-mce-=&quot;&quot;&gt;modules&lt;span data-mce-=&quot;&quot;&gt;&amp;gt;xxx&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span data-mce-=&quot;&quot;&gt;&lt;span data-mce-=&quot;&quot;&gt;&lt;span data-mce-=&quot;&quot;&gt;&lt;span data-mce-=&quot;&quot;&gt;&amp;lt;&lt;span data-mce-=&quot;&quot;&gt;modules&lt;span data-mce-=&quot;&quot;&gt;&amp;gt;是将需要管理的模块放进去，放进去的模块归该聚合项目管理。例如&lt;span data-mce-=&quot;&quot;&gt;&amp;lt;&lt;span data-mce-=&quot;&quot;&gt;pluginManagement&lt;span data-mce-=&quot;&quot;&gt;&amp;gt;xxx&amp;lt;/&lt;span data-mce-=&quot;&quot;&gt;pluginManagement&lt;span data-mce-=&quot;&quot;&gt;&amp;gt;或&lt;span data-mce-=&quot;&quot;&gt;&amp;lt;&lt;span data-mce-=&quot;&quot;&gt;dependencyManagement&lt;span data-mce-=&quot;&quot;&gt;&amp;gt;xxx&lt;span data-mce-=&quot;&quot;&gt;&amp;lt;/&lt;span data-mce-=&quot;&quot;&gt;dependencyManagement&lt;span data-mce-=&quot;&quot;&gt;&amp;gt;是父类里独有的，为的是统一资源包，方便管理。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span data-mce-=&quot;&quot;&gt;&lt;span data-mce-=&quot;&quot;&gt;&lt;span data-mce-=&quot;&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span data-mce-=&quot;&quot;&gt;&lt;span data-mce-=&quot;&quot;&gt;&lt;span data-mce-=&quot;&quot;&gt;&lt;span data-mce-=&quot;&quot;&gt;&lt;span data-mce-=&quot;&quot;&gt;&lt;span data-mce-=&quot;&quot;&gt;&lt;span data-mce-=&quot;&quot;&gt;&lt;span data-mce-=&quot;&quot;&gt;&lt;span data-mce-=&quot;&quot;&gt;&lt;span data-mce-=&quot;&quot;&gt;&lt;span data-mce-=&quot;&quot;&gt;　　&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt; 　　子类pom.xml分析&lt;/h3&gt;
&lt;p&gt;　　看一下子类的代码，以web模块为例&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;&amp;lt;?&lt;/span&gt;&lt;span&gt;xml version=&quot;1.0&quot;&lt;/span&gt;&lt;span&gt;?&amp;gt;&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;project
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;     &lt;span&gt;xsi:schemaLocation&lt;/span&gt;&lt;span&gt;=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;    xmlns&lt;/span&gt;&lt;span&gt;=&quot;http://maven.apache.org/POM/4.0.0&quot;&lt;/span&gt;&lt;span&gt; xmlns:xsi&lt;/span&gt;&lt;span&gt;=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;modelVersion&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;4.0.0&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;modelVersion&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;parent&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;cn.zuoyu.ssm&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;ssm-integration&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;0.0.1-SNAPSHOT&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;parent&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;ssm-controller&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;packaging&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;war&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;packaging&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;ssm-controller&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;url&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;http://maven.apache.org&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;url&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt; 
&lt;span&gt;16&lt;/span&gt; 
&lt;span&gt;17&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependencies&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt; 
&lt;span&gt;19&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;junit&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;21&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;junit&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;22&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;23&lt;/span&gt;         &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; springMVC核心包 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;24&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;25&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;26&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-webmvc&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;27&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;28&lt;/span&gt; 
&lt;span&gt;29&lt;/span&gt;         &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; jstl支持 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;30&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;31&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;jstl&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;32&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;jstl&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;33&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;34&lt;/span&gt; 
&lt;span&gt;35&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;36&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.apache.taglibs&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;37&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;taglibs-standard-impl&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;38&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;39&lt;/span&gt; 
&lt;span&gt;40&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;41&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.apache.taglibs&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;42&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;taglibs-standard-spec&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;43&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;44&lt;/span&gt;         
&lt;span&gt;45&lt;/span&gt;         &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 对service的依赖 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;46&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;47&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;${project.groupId}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;48&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;ssm-service&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;49&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;${project.version}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;50&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;51&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependencies&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;52&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;build&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;53&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;plugins&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;54&lt;/span&gt;             &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 编译插件 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;55&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;plugin&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;56&lt;/span&gt;                 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.apache.maven.plugins&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;57&lt;/span&gt;                 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;maven-compiler-plugin&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;58&lt;/span&gt;             &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;plugin&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;59&lt;/span&gt; 
&lt;span&gt;60&lt;/span&gt;             &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 编码设置 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;61&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;plugin&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;62&lt;/span&gt;                 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.apache.maven.plugins&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;63&lt;/span&gt;                 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;maven-resources-plugin&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;64&lt;/span&gt;             &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;plugin&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;65&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;plugins&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;66&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;finalName&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;ssm-controller&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;finalName&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;67&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;build&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;68&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;project&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　你会发现多了&lt;span data-mce-=&quot;&quot;&gt;&amp;lt;&lt;span data-mce-=&quot;&quot;&gt;parent&lt;span data-mce-=&quot;&quot;&gt;&amp;gt;&lt;span data-mce-=&quot;&quot;&gt;&lt;span data-mce-=&quot;&quot;&gt;&lt;span data-mce-=&quot;&quot;&gt;&lt;span data-mce-=&quot;&quot;&gt;&lt;span data-mce-=&quot;&quot;&gt;&lt;span data-mce-=&quot;&quot;&gt;&lt;span data-mce-=&quot;&quot;&gt;&lt;span data-mce-=&quot;&quot;&gt;&lt;span data-mce-=&quot;&quot;&gt;&lt;span data-mce-=&quot;&quot;&gt;&lt;span data-mce-=&quot;&quot;&gt;&lt;span data-mce-=&quot;&quot;&gt;&lt;span data-mce-=&quot;&quot;&gt;&lt;span data-mce-=&quot;&quot;&gt;&lt;span data-mce-=&quot;&quot;&gt;&lt;span data-mce-=&quot;&quot;&gt;&lt;span data-mce-=&quot;&quot;&gt;&lt;span data-mce-=&quot;&quot;&gt;&lt;span data-mce-=&quot;&quot;&gt;&lt;span data-mce-=&quot;&quot;&gt;&lt;span data-mce-=&quot;&quot;&gt;&lt;span data-mce-=&quot;&quot;&gt;&lt;span data-mce-=&quot;&quot;&gt;&amp;lt;/&lt;span data-mce-=&quot;&quot;&gt;parent&lt;span data-mce-=&quot;&quot;&gt;&amp;gt;标签，这里面写的就是它要继承的父项目。你还会发现项目没有声明groupId和version，因为它已经有父项目了，父项目已经管理了它的来源和版本号。你还会发现&lt;span data-mce-=&quot;&quot;&gt;&lt;span data-mce-=&quot;&quot;&gt;plugin插件&lt;/span&gt;&lt;/span&gt;和dependency依赖没有声明version，这就是父项目里写pluginManagement和dependencyManagement的优点，父项目里的这个如果子项目没有声明则不会导入该依赖或插件，如果需要，只需声明groupId和artifactId即可，方便管理。另外，必须将该项目依赖的其他项目的pack引用过来，不然多模块就失去了意义，根本运行不起来。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt; 　　注意：&lt;/h3&gt;
&lt;p&gt;　　在maven多模块项目里，子项目的classpath共用的。&lt;/p&gt;
&lt;h2&gt; 　　部署：&lt;/h2&gt;
&lt;p&gt;　　在IntelliJ IDEA里部署MavenWeb项目和MyEclipse部署是有差异的，MyEclipse要很简单：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1113894/201804/1113894-20180408223235667-922231273.png&quot; alt=&quot;&quot; width=&quot;250&quot; height=&quot;230&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　就好了，只部署ssm-web即可。&lt;/p&gt;
&lt;p&gt;　　到了这一步，还差很关键的一部，就是在你运行之前，要保证你的maven仓库有ssm-service，就是你service层的jar包，不然ssm-web根本找不到ssm-service.jar，所以，我们要这样：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1113894/201804/1113894-20180408223558658-172842211.png&quot; alt=&quot;&quot; width=&quot;186&quot; height=&quot;110&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　否则无法运行。&lt;/p&gt;
&lt;p&gt;　　然后...&lt;/p&gt;
&lt;p&gt;　　看一下整体结构：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1113894/201804/1113894-20180408224251377-1388376757.png&quot; alt=&quot;&quot; width=&quot;283&quot; height=&quot;579&quot;/&gt;&lt;/p&gt;

&lt;p&gt;　　&lt;span&gt;就可以运行了...&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;span&gt;若有不对的地方欢迎+感谢评论指出或邮件我　　zuoyuip@qq.com&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;　　共同进步&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

</description>
<pubDate>Sun, 08 Apr 2018 14:40:00 +0000</pubDate>
<dc:creator>左羽</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/1214804270hacker/p/8748027.html</dc:identifier>
</item>
<item>
<title>vue组件详解（三）——组件通信 - 柴小智</title>
<link>http://www.cnblogs.com/chaixiaozhi/p/8746823.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/chaixiaozhi/p/8746823.html</guid>
<description>&lt;p&gt;组件之间通信可以用下图表示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1047894/201804/1047894-20180408170949331-529554303.png&quot; alt=&quot;&quot; width=&quot;400&quot; height=&quot;223&quot;/&gt;&lt;/p&gt;
&lt;p&gt;组件关系可分为父子组件通信、兄弟组件通信、跨级组件通信。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;一、自定义事件&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;当子组件需要向父组件传递数据时，就要用到自定义事件。&lt;/p&gt;
&lt;p&gt;子组件用$emit （）来触发事件，父组件用$on（）来监昕子组件的事件。&lt;/p&gt;
&lt;p&gt;父组件可以直接在子组件的自定义标签上使用v-on 来监昕子组件触发的自定义事件，如：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;app9&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;总数：{{total}}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;my-component9 &lt;/span&gt;&lt;span&gt;@add&lt;/span&gt;&lt;span&gt;=&quot;getTotal&quot;&lt;/span&gt;&lt;span&gt; @cut&lt;/span&gt;&lt;span&gt;=&quot;getTotal&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;my-component9&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
Vue.component('my-component9'&lt;span&gt;,{
    template: &lt;/span&gt;'&amp;lt;div&amp;gt;' +
    '               &amp;lt;button @click=&quot;increase&quot;&amp;gt;+1&amp;lt;/button&amp;gt;' +
    '               &amp;lt;button @click=&quot;reduce&quot;&amp;gt;-1&amp;lt;/button&amp;gt;' +
            '&amp;lt;/div&amp;gt;'&lt;span&gt;,
    data: &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; {
            count: &lt;/span&gt;0&lt;span&gt;
        }
    },
    methods:{
        increase: &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.count++&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.$emit('add',&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.count)　　&lt;span&gt;//广播的事件名和数据&lt;/span&gt;
        },
        reduce: &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.count--&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.$emit('cut',&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.count)　　&lt;span&gt;//广播的事件名和数据&lt;/span&gt;
        }
    }
});

&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; app9 = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Vue({
    el: &lt;/span&gt;'#app9'&lt;span&gt;,
    data:{
        total: &lt;/span&gt;0&lt;span&gt;
    },
    methods:{
        getTotal: &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(count){
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.total =&lt;span&gt; count;
        }
    }
});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1047894/201804/1047894-20180408173109906-1187149236.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;二、使用v-model&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Vue2 .x 可以在自定义组件上使用v-model 指令，直接看一个事例：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;app10&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;总数：{{total}}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;my-component10 &lt;/span&gt;&lt;span&gt;v-model&lt;/span&gt;&lt;span&gt;=&quot;total&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;my-component10&lt;/span&gt;&lt;span&gt;&amp;gt;　　//这个地方v-model实际是一个语法糖,可以直接理解为接收到广播input里面的数据(this.total=count)。&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
Vue.component('my-component10'&lt;span&gt;,{
    template: &lt;/span&gt;'&amp;lt;div&amp;gt;' +
                '&amp;lt;button @click=&quot;increase&quot;&amp;gt;+1&amp;lt;/button&amp;gt;' +
                '&amp;lt;button @click=&quot;reduce&quot;&amp;gt;-1&amp;lt;/button&amp;gt;' +
              '&amp;lt;/div&amp;gt;'&lt;span&gt;,
    data: &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; {
            count: &lt;/span&gt;0&lt;span&gt;
        }
    },
    methods:{
        increase: &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.count++&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.$emit('input',&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.count)　　&lt;span&gt;//注意这个地方，广播的事件名称为特殊的input&lt;/span&gt;
        },
        reduce: &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.count--&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.$emit('input',&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.count)　　&lt;span&gt;//注意这个地方，广播的事件名称为特殊的input&lt;/span&gt;
        }
    }
});

&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; app10 = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Vue({
    el: &lt;/span&gt;'#app10'&lt;span&gt;,
    data:{
        total: &lt;/span&gt;0&lt;span&gt;
    }
});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1047894/201804/1047894-20180408173103110-1867458591.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; v-model 还可以用来创建自定义的表单输入组件， 进行数据双向绑定，例如：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;app11&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;总数：{{total}}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;my-component11 &lt;/span&gt;&lt;span&gt;v-model&lt;/span&gt;&lt;span&gt;=&quot;total&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;my-component11&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;button &lt;/span&gt;&lt;span&gt;@click&lt;/span&gt;&lt;span&gt;=&quot;reduce&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;-1&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;button&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
Vue.component('my-component11'&lt;span&gt;, {
    props: [&lt;/span&gt;'value'&lt;span&gt;],　　&lt;span&gt;//使用v-model的表单组件时，父组件通过value来进行传值&lt;/span&gt;
    template: &lt;/span&gt;'&amp;lt;input :value=&quot;value&quot; @input=&quot;updateValue&quot;&amp;gt;'&lt;span&gt;,
    methods: {
        updateValue: &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(event){
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.$emit('input'&lt;span&gt;, event.target.value);
        }
    }
});

&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; app11 = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Vue({
   el: &lt;/span&gt;'#app11'&lt;span&gt;,
   data:{
      total: &lt;/span&gt;0&lt;span&gt;
    },
    methods:{
        reduce: &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.total--&lt;span&gt;
        }
    }
});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1047894/201804/1047894-20180408174957671-789660186.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;父组件的total发生变化时，会通过传递value值，影响子组件input中的value值，而子组件改变自己input中的value值，又会广播给父组件，影响父组件中的total值。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;实现这样一个具有双向绑定的v -model 组件要满足下面两个要求：&lt;/p&gt;
&lt;p&gt;•接收一个value 属性。&lt;br/&gt;• 在有新的value 时触发input 事件。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;三、非父子组件通信&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在Vue . 2.x 中， 推荐使用一个空的Vue 实例作为中央事件总线（ bu s ），也就是一个中介。&lt;/p&gt;
&lt;p&gt;直接看一个事例：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;app12&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;{{message}}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;my-component12&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;my-component12&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; bus = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Vue();

Vue.component(&lt;/span&gt;'my-component12'&lt;span&gt;,{
   template: &lt;/span&gt;'&amp;lt;button @click=&quot;updateMessage&quot;&amp;gt;传递事件信息&amp;lt;/button&amp;gt;'&lt;span&gt;,
    methods: {
        updateMessage: &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
            bus.$emit(&lt;/span&gt;'updateMessage','更新我的组件信息');   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;利用中介bus传播事件&lt;/span&gt;
&lt;span&gt;        }
    }
});

&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; app12 = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Vue({
   el: &lt;/span&gt;'#app12'&lt;span&gt;,
   data:{
        message: &lt;/span&gt;''&lt;span&gt;
    },
    mounted: &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; _this = &lt;span&gt;this&lt;/span&gt;;   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;这一步赋值必须有&lt;/span&gt;
        bus.$on('updateMessage',&lt;span&gt;function&lt;/span&gt;(data){     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;利用中介bus接收事件&lt;/span&gt;
            _this.message =&lt;span&gt; data;
        })
    }
});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在app 初始化时，也就是在生命周期mounted 钩子函数里监听了来自bus 的事件updateMessage(&lt;span&gt;mounted挂载这一步相当于在两个组件直间提前安排了一个中介，当两个组件通信时，就可以通过该中介相互传递消息了&lt;/span&gt;) ，&lt;/p&gt;
&lt;p&gt;而在组件my-component12中，点击按钮会通过bus 把事件updateMessage发出去，此时app 就会接收到来自bus 的事件，进而在回调里完成自己的业务逻辑。&lt;/p&gt;
&lt;p&gt;这种方法巧妙而轻量地实现了任何组件间的通信，包括父子、兄弟、跨级，而且Vue 1.x 和Vue 2.x 都适用。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;四、父链与子组件索引&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;除了中央事件总线bus 外，还有两种方法可以实现组件间通信：父链和子组件索引。&lt;/p&gt;
&lt;p&gt;在子组件中，使用this.$parent 可以直接访问该组件的父实例或组件，父组件也可以通过this.$children 访问它所有的子组件，而且可以递归向上或向下无线访问， 直到根实例或最内层的组件。&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4.1父链&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;app13&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;{{message}}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;my-component13&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;my-component13&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
Vue.component('my-component13'&lt;span&gt;,{
    template: &lt;/span&gt;'&amp;lt;button @click=&quot;updateMessage&quot;&amp;gt;通过父链直接修改数据&amp;lt;/button&amp;gt;'&lt;span&gt;,
    methods: {
        updateMessage: &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.$parent.message = '来自组件my-component13的内容'　　&lt;span&gt;//通过this.$parent直接修改父组件的内容&lt;/span&gt;&lt;span&gt;
        }
    }
});

&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; app13 = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Vue({
    el: &lt;/span&gt;'#app13'&lt;span&gt;,
    data:{
        message: &lt;/span&gt;''&lt;span&gt;
    }
});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; &lt;span&gt;尽管V ue 允许这样操作，但在业务中， 子组件应该尽可能地避免依赖父组件的数据，更不应该去主动修改它的数据，因为这样使得父子组件紧藕合，理想情况下，只有组件自己能修改它的状态。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;strong&gt;4.2 子组件索引&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;当子组件较多时， 通过this.$children 来一一遍历出我们需要的一个组件实例是比较困难的，尤其是组件动态渲染时，它们的序列是不固定的。Vue 提供了子组件索引的方法，用特殊的属性ref来为子组件指定一个索引名称。&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;app14&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;{{message}}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;my-component14 &lt;/span&gt;&lt;span&gt;ref&lt;/span&gt;&lt;span&gt;=&quot;com14&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;my-component14&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;button &lt;/span&gt;&lt;span&gt;@click&lt;/span&gt;&lt;span&gt;=&quot;handleRef&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;通过ref获取子组件实例&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;button&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
Vue.component('my-component14'&lt;span&gt;,{
    template: &lt;/span&gt;'&amp;lt;div&amp;gt;子组件&amp;lt;/div&amp;gt;'&lt;span&gt;,
    data: &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; {
            message: &lt;/span&gt;'子组件内容'&lt;span&gt;
        }
    }
});

&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; app14 = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Vue({
    el: &lt;/span&gt;'#app14'&lt;span&gt;,
    data:{
        message: &lt;/span&gt;''&lt;span&gt;
    },
    methods: {
        handleRef: &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
             &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.message = &lt;span&gt;this&lt;/span&gt;.$refs.com14.message;   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;通过$refs获取子组件实例&lt;/span&gt;
&lt;span&gt;        }
    }
});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 在父组件模板中，子组件标签上使用ref 指定一个名称，井在父组件内通过this.$refs 来访问指定名称的子组件。&lt;/p&gt;
&lt;p&gt;$refs 只在组件渲染完成后才填充，并且它是非响应式的． 它仅仅作为一个直接访问子组件的应急方案，应当尽量避免在模板或计算属性中使用$refs。&lt;/p&gt;

</description>
<pubDate>Sun, 08 Apr 2018 14:30:00 +0000</pubDate>
<dc:creator>柴小智</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/chaixiaozhi/p/8746823.html</dc:identifier>
</item>
<item>
<title>JVM学习记录 - 纪莫</title>
<link>http://www.cnblogs.com/jimoer/p/8747953.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/jimoer/p/8747953.html</guid>
<description>&lt;h2&gt;本博客是为了自己学习JVM而建立，只记录一些自己学习的经过。&lt;/h2&gt;
&lt;p&gt;最近在看《深入理解Java虚拟机》这本书，里面的内容，很是乏味，因为看不懂所以就会觉得很枯燥，觉得很枯燥看着看着就犯困，然后就睡过去了，再醒来就没心思看书了。不过自己还是要坚持学习，虽然计划赶不上变化，但是还是有自己的小目标的。加油吧。&lt;/p&gt;
&lt;p&gt;看到第二章的时候,前半部分就开始看不懂了，然后就一边看一边在网上搜索相关的知识，后来自己也根据书上的介绍和自己的一些理解把下面这个关系图看明白了一些。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/772743/201804/772743-20180408221833282-804015913.png&quot; alt=&quot;&quot; width=&quot;545&quot; height=&quot;518&quot;/&gt;&lt;/p&gt;
&lt;p&gt;弄明白了这张图，我才想到，怪不得我在看介绍java的关键字volatile深入解析的时候，说的那些线程共享，线程隔离看不懂呢，原来是自己的基础没有打好。看来要学好基础以后才能看懂更深层的东西。&lt;/p&gt;
&lt;p&gt;先概括的说一下，JVM内存主要分三大块：&lt;span&gt;&lt;strong&gt;堆、方法区、栈。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;堆内存&lt;/strong&gt;&lt;/span&gt;是JVM管理的内存中最大的一块儿，又分为&lt;strong&gt;年轻代&lt;/strong&gt;和&lt;strong&gt;老年代&lt;/strong&gt;，其中年轻代又分为三部分，&lt;span class=&quot;16&quot;&gt;&lt;strong&gt;Eden&lt;/strong&gt;区、&lt;span class=&quot;16&quot;&gt;&lt;strong&gt;From Survivor&lt;/strong&gt;区、&lt;span class=&quot;16&quot;&gt;&lt;strong&gt;To Survivor&lt;/strong&gt;区。默认情况下年轻代按照8:1:1的比例来分配；&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;16&quot;&gt;&lt;span class=&quot;16&quot;&gt;&lt;span class=&quot;16&quot;&gt;&lt;span&gt;&lt;strong&gt;方法区&lt;/strong&gt;&lt;/span&gt;存储类信息、常量、静态变量等数据，是线程共享的区域，为与Java堆区分，方法区也被称为Non-Heap(非堆)；&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;16&quot;&gt;&lt;span class=&quot;16&quot;&gt;&lt;span class=&quot;16&quot;&gt;&lt;span&gt;&lt;strong&gt;栈&lt;/strong&gt;&lt;/span&gt;又分为java虚拟机栈和本地方法栈主要用于方法的执行。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;&lt;span class=&quot;16&quot;&gt;&lt;span class=&quot;16&quot;&gt;&lt;span class=&quot;16&quot;&gt;设置各个区域大小的参数：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;--Xms设置堆的最小空间大小。&lt;/p&gt;
&lt;p&gt;--Xmx设置堆的最大空间大小。&lt;/p&gt;
&lt;p&gt;--XX:NewSize设置新生代最小空间大小。&lt;/p&gt;
&lt;p&gt;--XX:MaxNewSize设置新生代最大空间大小。&lt;/p&gt;
&lt;p&gt;--XX:PermSize设置永久代（非堆）最小空间大小。&lt;/p&gt;
&lt;p&gt;--XX:MaxPermSize设置永久代（非堆）最大空间大小。&lt;/p&gt;
&lt;p&gt;--Xss设置每个线程的堆栈大小。&lt;/p&gt;
&lt;p&gt;虽然没有直接设置老年代的参数，但是可以设置堆空间大小和新生代空间大小两个参数来间接控制。&lt;/p&gt;
&lt;p&gt;  &lt;strong&gt;老年代空间大小&lt;/strong&gt;=&lt;strong&gt;堆空间大小&lt;/strong&gt;-&lt;strong&gt;年轻代大空间大小&lt;/strong&gt;&lt;/p&gt;
&lt;h3&gt;根据书里的内容归纳一下各个区域的详细作用&lt;/h3&gt;
&lt;h3&gt;&lt;span class=&quot;16&quot;&gt;Java&lt;span class=&quot;16&quot;&gt;堆（Heap）&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;　　对于大多数应用来说，Java堆（Java Heap）是Java虚拟机所管理的内存中最大的一块。Java堆是被所有线程共享的一块内存区域，在虚拟机启动时创建。此内存区域的唯一目的就是存放对象实例，几乎所有的对象实例都在这里分配内存。&lt;/p&gt;
&lt;p&gt;     Java堆是垃圾收集器管理的主要区域，因此很多时候也被称做“GC堆”。如果从内存回收的角度看，由于现在收集器基本都是采用的分代收集算法，所以Java堆中还可以细分为：新生代和老年代；再细致一点的有Eden空间、From Survivor空间、To Survivor空间等。从内存分配的角度来看，线程共享的Java堆中可能划分出多个线程私有的分配缓冲区（Thread Local Allocation Buffer , TLAB）&lt;/p&gt;
&lt;p&gt;　　根据Java虚拟机规范的规定，Java堆可以处于物理上不连续的内存空间中，只要逻辑上是连续的即可，就像我们的磁盘空间一样。在实现时，既可以实现成固定大小的，也可以是可扩展的，不过当前主流的虚拟机都是按照可扩展来实现的（通过-Xmx和-Xms控制）。&lt;/p&gt;
&lt;p&gt;　　如果在堆中没有内存完成实例分配，并且堆也无法再扩展时，将会抛出OutOfMemoryError异常。&lt;/p&gt;
&lt;h3&gt; 方法区（Method Area）&lt;/h3&gt;
&lt;p&gt;  方法区（Method Area）与Java堆一样，是各个线程共享的内存区域，它用于存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。虽然Java虚拟机规范把方法区描述为堆的一个逻辑部分，但是它却有一个别名叫做Non-Heap（非堆），目的应该是与Java堆区分开来。&lt;/p&gt;
&lt;p&gt;　　对于习惯在HotSpot虚拟机上开发和部署程序的开发者来说，很多人愿意把方法区称为“永久代”（Permanent Generation），本质上两者并不等价，仅仅是因为HotSpot虚拟机的设计团队选择把GC分代收集扩展至方法区，或者说使用永久代来实现方法区而已。&lt;/p&gt;
&lt;p&gt;　　Java虚拟机规范对这个区域的限制非常宽松，除了和Java堆一样不需要连续的内存和可以选择固定大小或者可扩展外，还可以选择不实现垃圾收集。相对而言，垃圾收集行为在这个区域是比较少出现的，但并非数据进入了方法区就如永久代的名字一样“永久”存在了。这个区域的内存回收目标主要是针对常量池的回收和对类型的卸载，一般来说这个区域的回收“成绩”比较难以令人满意，尤其是类型的卸载，条件相当苛刻，但是这部分区域的回收确实是有必要的。&lt;/p&gt;
&lt;p&gt;　　&lt;strong&gt;根据Java虚拟机规范的规定，当方法区无法满足内存分配需求时，将抛出OutOfMemoryError异常。 &lt;/strong&gt;&lt;/p&gt;
&lt;h3&gt;程序计数器（Program Counter Register）&lt;/h3&gt;
&lt;p&gt;程序计数器（Program Counter Register）是一块较小的内存空间，它的作用可以看做是当前线程所执行的字节码的行号指示器。在虚拟机的概念模型里（仅是概念模型，各种虚拟机可能会通过一些更高效的方式去实现），字节码解释器工作时就是通过改变这个计数器的值来选取下一条需要执行的字节码指令，分支、循环、跳转、异常处理、线程恢复等基础功能都需要依赖这个计数器来完成。 &lt;br/&gt;由于Java虚拟机的多线程是通过线程轮流切换并分配处理器执行时间的方式来实现的，在任何一个确定的时刻，一个处理器（对于多核处理器来说是一个内核）只会执行一条线程中的指令。因此，为了线程切换后能恢复到正确的执行位置，每条线程都需要有一个独立的程序计数器，各条线程之间的计数器互不影响，独立存储，我们称这类内存区域为“线程私有”的内存。 &lt;br/&gt;      如果线程正在执行的是一个Java方法，这个计数器记录的是正在执行的虚拟机字节码指令的地址；如果正在执行的是Natvie方法，这个计数器值则为空（Undefined）。&lt;/p&gt;
&lt;p&gt;　　&lt;strong&gt;此内存区域是唯一一个在Java虚拟机规范中没有规定任何OutOfMemoryError情况的区域。&lt;/strong&gt;&lt;/p&gt;
&lt;h3&gt;JVM栈（JVM Stacks）&lt;/h3&gt;
&lt;p&gt;　　与程序计数器一样，Java虚拟机栈（Java Virtual Machine Stacks）也是线程私有的，它的生命周期与线程相同。虚拟机栈描述的是Java方法执行的内存模型：每个方法被执行的时候都会同时创建一个栈帧（Stack Frame）用于存储局部变量表、操作栈、动态链接、方法出口等信息。每一个方法被调用直至执行完成的过程，就对应着一个栈帧在虚拟机栈中从入栈到出栈的过程。 &lt;/p&gt;
&lt;p&gt;　　局部变量表存放了编译期可知的各种基本数据类型（boolean、byte、char、short、int、float、long、double）、对象引用（reference类型，它不等同于对象本身，根据不同的虚拟机实现，它可能是一个指向对象起始地址的引用指针，也可能指向一个代表对象的句柄或者其他与此对象相关的位置）和returnAddress类型（指向了一条字节码指令的地址）。&lt;/p&gt;
&lt;p&gt;　　其中64位长度的long和double类型的数据会占用2个局部变量空间（Slot），其余的数据类型只占用1个。局部变量表所需的内存空间在编译期间完成分配，当进入一个方法时，这个方法需要在帧中分配多大的局部变量空间是完全确定的，在方法运行期间不会改变局部变量表的大小。&lt;/p&gt;
&lt;p&gt;　　&lt;strong&gt;在Java虚拟机规范中，对这个区域规定了两种异常状况：如果线程请求的栈深度大于虚拟机所允许的深度，将抛出StackOverflowError异常；如果虚拟机栈可以动态扩展（当前大部分的Java虚拟机都可动态扩展，只不过Java虚拟机规范中也允许固定长度的虚拟机栈），当扩展时无法申请到足够的内存时会抛出OutOfMemoryError异常。&lt;/strong&gt;&lt;/p&gt;
&lt;h3&gt;本地方法栈（Native Method Stacks）&lt;/h3&gt;
&lt;p&gt;　　本地方法栈（Native Method Stacks）与虚拟机栈所发挥的作用是非常相似的，其区别不过是虚拟机栈为虚拟机执行Java方法（也就是字节码）服务，而本地方法栈则是为虚拟机使用到的Native方法服务。虚拟机规范中对本地方法栈中的方法使用的语言、使用方式与数据结构并没有强制规定，因此具体的虚拟机可以自由实现它。甚至有的虚拟机（譬如Sun HotSpot虚拟机）直接就把本地方法栈和虚拟机栈合二为一。&lt;/p&gt;
&lt;p&gt;　　&lt;strong&gt;与虚拟机栈一样，本地方法栈区域也会抛出StackOverflowError和OutOfMemoryError异常。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;上面的各个区域的介绍内容都是摘自《深入理解Java虚拟机》书上的内容。&lt;/p&gt;
</description>
<pubDate>Sun, 08 Apr 2018 14:27:00 +0000</pubDate>
<dc:creator>纪莫</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/jimoer/p/8747953.html</dc:identifier>
</item>
<item>
<title>写了一年的博客，我收获了什么 - 虚无境</title>
<link>http://www.cnblogs.com/xuwujing/p/8747769.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/xuwujing/p/8747769.html</guid>
<description>&lt;h2 id=&quot;为什么写博客和好好的写博客&quot;&gt;为什么写博客和好好的写博客&lt;/h2&gt;
&lt;p&gt;不知不觉中，我发现自己已经写了一年的博客了！&lt;br/&gt;现在想想，当初是为什么开始写起了博客呢？&lt;br/&gt;看到很多厉害的人在写博客？&lt;br/&gt;看到很有感触的博客？&lt;br/&gt;还是只是单纯的想想做下笔记呢？&lt;br/&gt;其实这些我都有，但是最主要的还是想单纯的做做笔记。将之前遇到的问题以及解决方案记录下来，作为一篇博客。当然，这种博客没有什么技术含量，也没有漂亮的排版，所以也没什么人看。。。&lt;/p&gt;
&lt;p&gt;于是在写了几篇博客之后，回头看看自己的博客，发现几个了问题。&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;博客的排版实在是太丑了... 感觉自己都看不下去了;&lt;/li&gt;
&lt;li&gt;博客的讲解有些杂乱了，想到哪写到哪，没有好好的规划;&lt;/li&gt;
&lt;li&gt;写完博客之后发现点击量实在是太少了，很是打击写博客的心情;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;后来在发现了这些之后，我就好好进行相应的整改了。&lt;br/&gt;首先是页面的排版，但是花了一天的时间学习了下博客的排版，但是发现效果不太明显。 后来了解到了&lt;strong&gt;Markdown&lt;/strong&gt;语法之后，才逐渐好转。&lt;/p&gt;
&lt;p&gt;然后每次写博客之前，我都先理个大纲，主要是围绕着&lt;strong&gt;目的、过程、结果&lt;/strong&gt;这三大要素来写。不过以前在比较喜欢贴代码和图片，少有自己的理解，所以阅读效果并不太好。后来就慢慢的增加了自己的理解了，所以看起来勉强还行。&lt;/p&gt;
&lt;p&gt;在重新设置页面的排版和规划之后，发现博客的点击量也慢慢的上来了，渐渐地还有点赞和评论了，这些也成为了我写博客的一大动力了。即使这也算虚荣心，不过说真的，被人认同的感觉真好！&lt;/p&gt;
&lt;h2 id=&quot;收获&quot;&gt;收获&lt;/h2&gt;
&lt;p&gt;从最开始的2017-04-01的&lt;a href=&quot;https://blog.csdn.net/qazwsxpcm/article/details/68946458&quot;&gt;第一篇博客&lt;/a&gt;到我&lt;a href=&quot;https://blog.csdn.net/qazwsxpcm/article/details/79703865&quot;&gt;上一篇&lt;/a&gt;的2018-03-31的博客刚好是一年了。在这一年中，一共发表了67篇原创博客，平均每月是5篇。现在想想，还有一丝的小小激动，也很有成就感，我竟然写了这么多篇博客了！！！也很高兴自己能够坚持下来写这么多篇博客。&lt;/p&gt;
&lt;p&gt;我有时在想，假如我没有写博客的话，自己的技术会更厉害吗？&lt;br/&gt;然后好好想想发现，应该不会。毕竟感觉自己不是特别有毅力的人...&lt;br/&gt;那么写了一年的博客，技术得到很大的提升了吗?&lt;br/&gt;没有很大，只是有一点而已...&lt;br/&gt;首先说明一点，网上估计有人说写博客可以很大的提升技术。&lt;br/&gt;这里我可以用自己的感受的来说，其实写博客并不能很大的提升技术，因为写博客很花时间，如果有这个时间去学习技术的话，其实很可能会专研得更深。但是如果是这样，那么为什么要写博客呢？&lt;br/&gt;其实这里可以用这个示例来说明:&lt;/p&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;小明是个程序员，在周末的逛技术网站的时候发现某项技术很牛逼之后，便想学习下。但是捣鼓了半天之后，发现太难懂了， 于是就简单的做出了一个demo之后就不了了之了。&lt;br/&gt;小刚也是个程序员，也是在周末的逛技术网站的时候发现某项技术很牛逼之后，也想学习下。于是他就捣鼓了起来，搞了半天依旧只会个demo，但是他想将此写成一篇博客，于是他就继续去研究了起来，直到弄懂，然后将此刻的理解也写在博客上面。虽然写博客也花费了很多的时间，但是他觉得值。&lt;br/&gt;&lt;strong&gt;注:上述示例由本人随编而成，如有不妥，请勿见笑。&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;上面例子中的小明如果和小刚花费同样的时间去学习的话，很有可能他学得比小刚还要好，但是事实上，小刚比小明掌握得要好，因为小明放弃了。放弃的原因很简单，没有动力。而小刚能够更好的掌握，只是因为他有写博客的动力。所以这里我觉得 &lt;strong&gt;写博客并不能很大的提升你对某一项技术的掌握，但是可以促进你去掌握这门技术&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;写了一年的博客之后，发现自己还真是收获了不少。&lt;/p&gt;
&lt;p&gt;首先提升了编写文档的能力。因为以前自己做的笔记仅仅只是自己阅读而已，所以在很多方面都不注重，阅读体验不好。不过在开始写博客之后，自己有意识的注重这方面，并且在工作中编写的文档经常被当作部门中的模板来使用。&lt;/p&gt;
&lt;p&gt;其次提升了学习的态度。以前在学校到工作中应该都属于是那种被动学习的，学校中布置作业就做，不布置基本就不会主动去学习，工作之后，开始还有兴趣，后来则慢慢的只是为了工作而工作，没有主动学习的动力了。现在则慢慢改变了，会开始学习一些新的技术之类的。&lt;/p&gt;
&lt;p&gt;再次提升了逻辑思维能力。或许这里就有人不太理解了，为什么写博客会提升了逻辑思维能力呢？因为将博客对某一些理解透彻，然后将其讲述出来。毕竟自己都不理解的话，如果才能让别人理解呢?（ps:其实到现在我还有很多也没讲明白...）&lt;/p&gt;
&lt;p&gt;最后则是开阔了眼界。一般来说，经常写博客的人也会经常看博客，其中也不乏很多大牛，可以向他们学习之类的。在写博客的时候，有时候自己的理解可能没有讲述明白或者有一些错误，这时如果有细心的同学发现，他也许会提出不用的看法或者指出这些错误，这也是自我成长的一部分。&lt;/p&gt;
&lt;p&gt;说了一些废话，将收获总结如下:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;将自己的笔记变成了大家的笔记&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;由被动学习变成了主动学习&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;提升了逻辑思维能力&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;开阔了眼界&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;其它&quot;&gt;其它&lt;/h2&gt;
&lt;p&gt;该说的也差不多说完了，顺便说下，写博客是有好处的，这里我就不在说明了，使用下面的一张图片来说明写博客的好处。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20180408205617426?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcWF6d3N4cGNt/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;这里写图片描述&quot;/&gt;&lt;/p&gt;
</description>
<pubDate>Sun, 08 Apr 2018 13:56:00 +0000</pubDate>
<dc:creator>虚无境</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/xuwujing/p/8747769.html</dc:identifier>
</item>
<item>
<title>源码解析flask的路由系统 - renpingsheng</title>
<link>http://www.cnblogs.com/renpingsheng/p/8747584.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/renpingsheng/p/8747584.html</guid>
<description>&lt;p&gt;源码解析flask的路由系统&lt;/p&gt;
&lt;p&gt;当我们新建一个flask项目时，pycharm通常已经为项目定义了一个基本路由&lt;/p&gt;
&lt;pre class=&quot;cython&quot;&gt;
&lt;code&gt;@app.route('/')
def hello_world():
    return 'Hello World!'&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;此时在浏览器中输入地址&lt;code&gt;http://127.0.0.1:5000&lt;/code&gt;，页面会显示出&quot;Hello World!&quot;的字样&lt;/p&gt;
&lt;p&gt;如下图所示&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1133627/201804/1133627-20180408212127416-1352244834.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;那么此时在flask后台程序中，到底发生了什么事情呢？？&lt;/p&gt;
&lt;p&gt;在上面的例子中，可以看到对hello_world视图函数被app.route这个有参装假器装饰&lt;/p&gt;
&lt;p&gt;来看下app.route这个有参装饰器的内部实现原理&lt;/p&gt;
&lt;p&gt;app是Flask主程序的类实例化本项目名得到的一个对象&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;app = Flask(__name__)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;然后调用app对象的route方法来装饰hello_world视图函数&lt;/p&gt;
&lt;p&gt;route方法的源码：&lt;/p&gt;
&lt;pre class=&quot;cython&quot;&gt;
&lt;code&gt;def route(self, rule, **options):
    def decorator(f):
        endpoint = options.pop('endpoint', None)
        self.add_url_rule(rule, endpoint, f, **options)
        return f
    return decorator&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;在用app.route装饰hello_world视图函数的时候，实际上app.route中还可以添加一些参数。&lt;/p&gt;
&lt;p&gt;比如指定请求的方法的变量：&lt;code&gt;methods=[&quot;GET&quot;,&quot;POST&quot;]&lt;/code&gt;以及指定视图函数的endpoint，相当于Django中视图函数的别名等&lt;/p&gt;
&lt;p&gt;在这里，rule参数相当于hello_world视图函数中的&quot;/&quot;路径，options参数中包含methods和endpoint等&lt;/p&gt;
&lt;p&gt;在route装饰器里，返回decorator闭包函数。&lt;/p&gt;
&lt;p&gt;在decorator闭包函数中，先从options中获取endpoint的值，endpoint的值默认为None&lt;/p&gt;
&lt;p&gt;然后调用self.add_url_rule内部方法处理传递的参数rule,endpoint,f等，在这里self指的是app这个对象&lt;/p&gt;
&lt;p&gt;查看app对象中的add_url_rule方法：&lt;/p&gt;
&lt;pre class=&quot;cython&quot;&gt;
&lt;code&gt;    @setupmethod
    def add_url_rule(self, rule, endpoint=None, view_func=None, **options):
    
        if endpoint is None:
            endpoint = _endpoint_from_view_func(view_func)
        options['endpoint'] = endpoint
        methods = options.pop('methods', None)
    
        # if the methods are not given and the view_func object knows its
        # methods we can use that instead.  If neither exists, we go with
        # a tuple of only ``GET`` as default.
        if methods is None:
            methods = getattr(view_func, 'methods', None) or ('GET',)
        if isinstance(methods, string_types):
            raise TypeError('Allowed methods have to be iterables of strings, '
                            'for example: @app.route(..., methods=[&quot;POST&quot;])')
        methods = set(item.upper() for item in methods)
    
        # Methods that should always be added
        required_methods = set(getattr(view_func, 'required_methods', ()))
    
        # starting with Flask 0.8 the view_func object can disable and
        # force-enable the automatic options handling.
        provide_automatic_options = getattr(view_func,
            'provide_automatic_options', None)
    
        if provide_automatic_options is None:
            if 'OPTIONS' not in methods:
                provide_automatic_options = True
                required_methods.add('OPTIONS')
            else:
                provide_automatic_options = False
    
        # Add the required methods now.
        methods |= required_methods
    
        rule = self.url_rule_class(rule, methods=methods, **options)
        rule.provide_automatic_options = provide_automatic_options
    
        self.url_map.add(rule)
        if view_func is not None:
            old_func = self.view_functions.get(endpoint)
            if old_func is not None and old_func != view_func:
                raise AssertionError('View function mapping is overwriting an '
                                     'existing endpoint function: %s' % endpoint)
            self.view_functions[endpoint] = view_func&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;可以看到，当在视图函数中没有指定endpoint时，程序会调用_endpoint_from_view_func方法为endpoint赋值&lt;/p&gt;
&lt;pre class=&quot;cython&quot;&gt;
&lt;code&gt;def _endpoint_from_view_func(view_func):
    assert view_func is not None, 'expected view func if endpoint ' \
                                  'is not provided.'
    return view_func.__name__&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;可以看出，_endpoint_from_view_func实际上返回的就是view_func函数的函数名。&lt;/p&gt;
&lt;p&gt;在上面的例子中，view_func指的是hello_world这个视图函数&lt;/p&gt;
&lt;p&gt;所以此时，在options这个字典中有一个键为endpoint，对应的值为view_func函数的函数名&lt;/p&gt;
&lt;p&gt;接着，程序从options字典中弹出&quot;methods&quot;的值，并对methods中的每个方法转换为大写，如果methods没有从程序中获取，则默认为&quot;GET&quot;&lt;/p&gt;
&lt;p&gt;接着，程序从函数中获取&quot;required_methods&quot;的值，并进行去重，默认得到一个空集合&lt;/p&gt;
&lt;p&gt;再对methods和required_methods进行&lt;code&gt;&quot;|=&quot;&lt;/code&gt;操作，也就是按位或运算&lt;/p&gt;
&lt;pre class=&quot;cython&quot;&gt;
&lt;code&gt;    |=(按位或)运算
    
    &amp;gt;&amp;gt;&amp;gt; a = 15
    &amp;gt;&amp;gt;&amp;gt; bin(a)
    '0b1111'
    &amp;gt;&amp;gt;&amp;gt; b = 100
    &amp;gt;&amp;gt;&amp;gt; bin(b)
    '0b1100100'
    &amp;gt;&amp;gt;&amp;gt; a |= b
    &amp;gt;&amp;gt;&amp;gt; a
    111
    &amp;gt;&amp;gt;&amp;gt; bin(a)
    '0b1101111'
    &amp;gt;&amp;gt;&amp;gt; 0b1101111
    111
    
    先把a这个十进制数转换成二进制，得到1111
    再把b这个十进制数转换成二进制，得到1100100
    
    对a和b的二进制格式进行按位或运算
    
    a   000  0111
    b   110  0100
        110  0111
    
    因为a转换成二进制只有四位，如果要和b的二进制格式做位运算，则必须在头部填充0到和b的二进制相同的长度，得到&quot;0000111&quot;
    
    或运算中，只要有一个数为1，则这一位上做或运算的结果就为1
    所以上面两个数做或运算得到的二进制数为&quot;0b1100111&quot;
    把这个二进制数转换成十进制，则为111,把111这个十进制数赋值给a&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;对methods和required_methods进行按位或运算，实际上就是把required_methods的值添加到methods方法集合里&lt;/p&gt;
&lt;p&gt;接着程序调用&lt;code&gt;self.url_rule_class&lt;/code&gt;方法处理rule(也就是&quot;/&quot;)，methods和options字典&lt;/p&gt;
&lt;p&gt;得到rule这个对象，在这里self同样指的是app这个对象&lt;/p&gt;
&lt;p&gt;可以看到，url_rule_class指向的是Rule这个类的内存地址&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;url_rule_class = Rule&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;然后用Map类实例化得到self.url_map对象，调用self.url_map对象中的add方法处理rule这个对象&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;self.url_map = Map()&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;分析了上面的app.route的流程，知道使用app对象的route方法装饰rule，实际上就是执行了add_url_rule这个方法&lt;/p&gt;
&lt;p&gt;那如果定义一个视图函数，调用app对象中的add_url_rule方法来处理对应的rule，是不是也可以完成route的装饰器功能呢&lt;/p&gt;
&lt;pre class=&quot;cython&quot;&gt;
&lt;code&gt;    from flask import Flask
    app = Flask(__name__)
    
    @app.route('/')
    def hello_world():
        return 'Hello World!'
    
    def login():
        return &quot;登录成功！！&quot;
    
    app.add_url_rule(&quot;/login&quot;,endpoint=None,view_func=login,methods=[&quot;GET&quot;])&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;启动这个项目，在浏览器中打开&quot;&lt;a href=&quot;http://127.0.0.1:5000/login%22%E5%9C%B0%E5%9D%80&quot; class=&quot;uri&quot;&gt;http://127.0.0.1:5000/login&quot;地址&lt;/a&gt;，&lt;/p&gt;
&lt;p&gt;得到的效果如下&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1133627/201804/1133627-20180408212139042-978777080.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;由些我们可以知道，虽然flask的路由实现表面上是使用了route这个装饰器，实际上内部也是调用app对象中的add_url_rule方法来实现，类似于Django中中路由的用法&lt;/p&gt;
</description>
<pubDate>Sun, 08 Apr 2018 13:22:00 +0000</pubDate>
<dc:creator>renpingsheng</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/renpingsheng/p/8747584.html</dc:identifier>
</item>
<item>
<title>[图解数据结构] 线性表 - 喜欢天黑却怕鬼</title>
<link>http://www.cnblogs.com/songwenjie/p/8678212.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/songwenjie/p/8678212.html</guid>
<description>&lt;p&gt;[TOC]&lt;/p&gt;

&lt;p&gt;若将线性表记为（a&lt;sub&gt;1&lt;/sub&gt;,...,a&lt;sub&gt;i-1&lt;/sub&gt;,a&lt;sub&gt;i&lt;/sub&gt;,a&lt;sub&gt;i+1&lt;/sub&gt;,...,a&lt;sub&gt;n&lt;/sub&gt;），则表中a&lt;sub&gt;i-1&lt;/sub&gt;领先于a&lt;sub&gt;i&lt;/sub&gt;，a&lt;sub&gt;i&lt;/sub&gt;领先于a&lt;sub&gt;i+1&lt;/sub&gt;，称a&lt;sub&gt;i-1&lt;/sub&gt;是a&lt;sub&gt;i&lt;/sub&gt;的直接前驱元素，a&lt;sub&gt;i+1&lt;/sub&gt;是a&lt;sub&gt;i&lt;/sub&gt;的直接后继元素。&lt;br/&gt;线性表元素的个数n(n&amp;gt;=0)定义为线性表的长度，当n=0时，称为空表。&lt;br/&gt;&lt;img src=&quot;http://p66d6e5qt.bkt.clouddn.com/blog/180330/mEKkHCH8kH.png?imageMogr2/blur/1x0/quality/75%7Cwatermark/2/text/c29uZ3dlbmppZQ==/font/5b6u6L2v6ZuF6buR/fontsize/400/fill/I0RDMTAxMA==/dissolve/24/gravity/SouthEast/dx/2/dy/2%7Cimageslim&quot; alt=&quot;mark&quot;/&gt;&lt;/p&gt;

&lt;p&gt;线性表的顺序存储结构，指的是一段地址连续的存储单元依次存储线性表的数据元素。&lt;/p&gt;
&lt;p&gt;线性表的顺序存储结构如图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://p66d6e5qt.bkt.clouddn.com/blog/180330/DKK8aAEH7H.png?imageMogr2/blur/1x0/quality/75%7Cwatermark/2/text/c29uZ3dlbmppZQ==/font/5b6u6L2v6ZuF6buR/fontsize/400/fill/I0RDMTAxMA==/dissolve/24/gravity/SouthEast/dx/2/dy/2%7Cimageslim&quot; alt=&quot;mark&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;地址计算方法&quot;&gt;2.1地址计算方法&lt;/h2&gt;
&lt;p&gt;用数组存储顺序表意味着要分配固定长度的数组空间，分配的数组空间大于等于当前线性表的长度，数据元素的序号和存放它的数组下标之间存在对应关系：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://p66d6e5qt.bkt.clouddn.com/blog/180330/2hJI3h3E49.png?imageMogr2/blur/1x0/quality/75%7Cwatermark/2/text/c29uZ3dlbmppZQ==/font/5b6u6L2v6ZuF6buR/fontsize/400/fill/I0RDMTAxMA==/dissolve/24/gravity/SouthEast/dx/10/dy/10%7Cimageslim&quot; alt=&quot;mark&quot;/&gt;&lt;/p&gt;
&lt;p&gt;存储器的每个存储单元都有自己的编号，这个编号称为地址。&lt;/p&gt;
&lt;p&gt;每个数据元素都需要占用一定的存储单元空间的，假设占用的是c个存储单元，对于第i个数据元素a&lt;sub&gt;i&lt;/sub&gt;存储位置为（LOC表示获得存储位置的函数）：&lt;/p&gt;
&lt;p&gt;LOC(a&lt;sub&gt;i&lt;/sub&gt;) = LOC(a&lt;sub&gt;1&lt;/sub&gt;) + (i-1)*c&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://p66d6e5qt.bkt.clouddn.com/blog/180330/CFmkH8GlE4.png?imageMogr2/blur/1x0/quality/75%7Cwatermark/2/text/c29uZ3dlbmppZQ==/font/5b6u6L2v6ZuF6buR/fontsize/400/fill/I0RDMTAxMA==/dissolve/24/gravity/SouthEast/dx/10/dy/10%7Cimageslim&quot; alt=&quot;mark&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;线性表顺序存储的结构代码&quot;&gt;2.2线性表顺序存储的结构代码：&lt;/h2&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode c&quot;&gt;
&lt;code class=&quot;sourceCode c&quot;&gt;&lt;span class=&quot;ot&quot;&gt;#define MAXSIZE 20 &lt;/span&gt;&lt;span class=&quot;co&quot;&gt;/*存储空间初始分配量*/&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; ElemType;

&lt;span class=&quot;kw&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;struct&lt;/span&gt; 
{
    ElemType data[MAXSIZE]; &lt;span class=&quot;co&quot;&gt;/*数组存储数据元素*/&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; length;             &lt;span class=&quot;co&quot;&gt;/*线性表当前长度*/&lt;/span&gt;
}SqList;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;描述线性表顺序存储的三个属性：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;存储空间的起始位置：数组data,它的位置就是存储空间的存储位置。&lt;/li&gt;
&lt;li&gt;线性表的最大存储容量：数组长度MAXSIZE。&lt;/li&gt;
&lt;li&gt;线性表的当前长度：length。&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;获得元素操作&quot;&gt;2.3获得元素操作&lt;/h2&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;sourceCode c&quot;&gt;
&lt;code class=&quot;sourceCode c&quot;&gt;&lt;span class=&quot;ot&quot;&gt;#define OK 1&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;#define ERROR 0&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;#define TRUE 1&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;#define FALSE 0&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; Status;
&lt;span class=&quot;co&quot;&gt;/*用e返回L中第i个数据元素的值*/&lt;/span&gt;
Status GetElem(SqList L,&lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; i, ElemType *e) {
    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (L.length = &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt; || i&amp;lt;&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt; || i&amp;gt;L.length) {
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; ERROR;
    }
    *e = L.data[i - &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;];
    &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; OK;
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;插入操作&quot;&gt;2.4插入操作&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;思路&lt;/strong&gt;：&lt;/p&gt;
&lt;ul readability=&quot;1.5&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;如果线性表长度大于等于数组长度，抛出异常&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;如果插入位置不合理，抛出异常&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;从最后一个元素开始向前遍历到第i个位置，分别将它们都向后移动一个位置&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;将要插入元素填入位置i&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;表长加1&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;13&quot;&gt;
&lt;pre class=&quot;sourceCode c&quot;&gt;
&lt;code class=&quot;sourceCode c&quot;&gt;&lt;span class=&quot;co&quot;&gt;/*在L中第i个位置之前插入新的数据元素e,L的长度加1*/&lt;/span&gt;
Status ListInsert(SqList *L, &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; i, ElemType e)
{
    &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; k;
    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (L-&amp;gt;length == MAXSIZE)   &lt;span class=&quot;co&quot;&gt;/*顺序线性表已满*/&lt;/span&gt;
    {
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; ERROR;
    }
    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (i&amp;lt;&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt; || i&amp;gt;L-&amp;gt;length + &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;co&quot;&gt;/*i不在范围内*/&lt;/span&gt;
    {
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; ERROR;
    }
    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (i &amp;lt;= L-&amp;gt;length) &lt;span class=&quot;co&quot;&gt;/*插入位置不在表尾*/&lt;/span&gt;
    {
        &lt;span class=&quot;kw&quot;&gt;for&lt;/span&gt; (k = L-&amp;gt;length&lt;span class=&quot;dv&quot;&gt;-1&lt;/span&gt;; k &amp;gt;=i&lt;span class=&quot;dv&quot;&gt;-1&lt;/span&gt; ; k--)
        {
            L-&amp;gt;data[k + &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;] = L-&amp;gt;data[k];
        }
    }
    L-&amp;gt;data[i - &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;] = e;
    L-&amp;gt;length++;
    &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; OK;
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;插入前&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;​ &lt;img src=&quot;http://p66d6e5qt.bkt.clouddn.com/blog/180331/K2c3iHbgBg.png?imageMogr2/blur/1x0/quality/75%7Cwatermark/2/text/c29uZ3dlbmppZQ==/font/5b6u6L2v6ZuF6buR/fontsize/400/fill/I0RDMTAxMA==/dissolve/24/gravity/SouthEast/dx/10/dy/10%7Cimageslim&quot; alt=&quot;mark&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;插入后&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://p66d6e5qt.bkt.clouddn.com/blog/180331/8k1G1iI932.png?imageMogr2/blur/1x0/quality/75%7Cwatermark/2/text/c29uZ3dlbmppZQ==/font/5b6u6L2v6ZuF6buR/fontsize/400/fill/I0RDMTAxMA==/dissolve/24/gravity/SouthEast/dx/10/dy/10%7Cimageslim&quot; alt=&quot;mark&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;删除操作&quot;&gt;2.5删除操作&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;思路&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;如果为空表，抛出异常&lt;/li&gt;
&lt;li&gt;如果删除位置不合理，抛出异常&lt;/li&gt;
&lt;li&gt;从删除元素位置开始遍历到最后一个元素位置，分别将它们向前移动一个位置&lt;/li&gt;
&lt;li&gt;表长减1&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;12&quot;&gt;
&lt;pre class=&quot;sourceCode c&quot;&gt;
&lt;code class=&quot;sourceCode c&quot;&gt;&lt;span class=&quot;co&quot;&gt;/*删除L的第i个数据元素，并用e返回其值，L的长度减1*/&lt;/span&gt;
Status ListDelete(SqList *L, &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; i, ElemType *e)
{
    &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; k;
    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (L-&amp;gt;length == &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;)
    {
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; ERROR;
    }
    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (i&amp;lt;&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt; || i&amp;gt;L-&amp;gt;length)
    {
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; ERROR;
    }
    *e = L-&amp;gt;data[i - &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;];
    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (i &amp;lt; L-&amp;gt;length)
    {
        &lt;span class=&quot;kw&quot;&gt;for&lt;/span&gt; (k = i; k &amp;lt;= L-&amp;gt;length; k++)
        {
            L-&amp;gt;data[k - &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;] = L-&amp;gt;data[k];
        }
    }
    L-&amp;gt;length--;
    &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; OK;
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;删除前&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://p66d6e5qt.bkt.clouddn.com/blog/180331/eDiFaHKgF8.png?imageMogr2/blur/1x0/quality/75%7Cwatermark/2/text/c29uZ3dlbmppZQ==/font/5b6u6L2v6ZuF6buR/fontsize/400/fill/I0RDMTAxMA==/dissolve/24/gravity/SouthEast/dx/10/dy/10%7Cimageslim&quot; alt=&quot;mark&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;删除后&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://p66d6e5qt.bkt.clouddn.com/blog/180331/BkDfJhH8hL.png?imageMogr2/blur/1x0/quality/75%7Cwatermark/2/text/c29uZ3dlbmppZQ==/font/5b6u6L2v6ZuF6buR/fontsize/400/fill/I0RDMTAxMA==/dissolve/24/gravity/SouthEast/dx/10/dy/10%7Cimageslim&quot; alt=&quot;mark&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;优缺点&quot;&gt;2.6优缺点&lt;/h2&gt;
&lt;p&gt;线性表的顺序存储结构，在存、读数据时，不管是哪个位置，时间复杂度都是O（1）;而插入或删除时，时间复杂度都是O（n）。&lt;/p&gt;
&lt;p&gt;优点：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;无需为表示线性表中的逻辑关系而增加额外的存储空间&lt;/li&gt;
&lt;li&gt;可以快速的存取线性表中任一位置的元素&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;缺点：&lt;/p&gt;
&lt;ul readability=&quot;0&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;插入和删除操作需要移动大量的元素&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;难以确定线性表存储空间的容量&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;造成存储空间的“碎片”，浪费存储空间&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;​&lt;/p&gt;

&lt;p&gt;为了每个数据元素a&lt;sub&gt;i&lt;/sub&gt;与其后继数据元素a&lt;sub&gt;i+1&lt;/sub&gt;之间的逻辑关系，对数据元素a&lt;sub&gt;i&lt;/sub&gt;来说，除了存储本身的信息之外，还需要存储一个指示其后继元素的信息（即直接后继元素的存储位置）。&lt;br/&gt;&lt;img src=&quot;http://p66d6e5qt.bkt.clouddn.com/blog/180401/jE7GdIikHK.png?imageslim&quot; alt=&quot;mark&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;单链表&quot;&gt;3.1单链表&lt;/h2&gt;
&lt;p&gt;n个结点链结成一个链表，每个结点只包含一个指针域，叫做单链表。&lt;/p&gt;
&lt;p&gt;线性链表中第一个结点的存储位置叫做头指针，整个链表的存取必须从头指针开始。 线性链表的最后一个结点指针为“空”（通常用NULL或^表示）。&lt;/p&gt;
&lt;p&gt;单链表存储示意图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://p66d6e5qt.bkt.clouddn.com/blog/180401/gL8J9f33b9.png?imageslim&quot; alt=&quot;mark&quot;/&gt;&lt;/p&gt;
&lt;p&gt;空链表：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://p66d6e5qt.bkt.clouddn.com/blog/180401/L6aBcbBK2i.png?imageslim&quot; alt=&quot;mark&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;线性表链式存储的结构代码&quot;&gt;3.1.1线性表链式存储的结构代码：&lt;/h3&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode c&quot;&gt;
&lt;code class=&quot;sourceCode c&quot;&gt;&lt;span class=&quot;co&quot;&gt;/*线性表的单链表存储结构*/&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; ElemType;
&lt;span class=&quot;kw&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;struct&lt;/span&gt; Node
{
    ElemType data;
    &lt;span class=&quot;kw&quot;&gt;struct&lt;/span&gt; Node *next;
} Node;
&lt;span class=&quot;kw&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;struct&lt;/span&gt; Node *LinkList;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;单链表的读取&quot;&gt;3.1.2单链表的读取&lt;/h3&gt;
&lt;p&gt;在单链表中读取第i个元素，我们无法一开始知道，必须从头开始找。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;读取单链表中第i个数据的思路:&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;声明一指针p指向单链表第一个节点，初始化j=1&lt;/li&gt;
&lt;li&gt;当j&amp;lt;i时，就遍历链表，让p的指针向后移动，不断的指向下一节点，j累加1&lt;/li&gt;
&lt;li&gt;若到链表末尾p为空，则说明第i个节点不存在&lt;/li&gt;
&lt;li&gt;否则查找成功，返回节点p的数据&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;strong&gt;代码实现：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;12&quot;&gt;
&lt;pre class=&quot;sourceCode c&quot;&gt;
&lt;code class=&quot;sourceCode c&quot;&gt;&lt;span class=&quot;ot&quot;&gt;#define OK 1&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;#define ERROR 0&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; Status;
&lt;span class=&quot;kw&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; ElemType;

&lt;span class=&quot;co&quot;&gt;/*初始条件：顺序线性表L已经存在，1&amp;lt;=i&amp;lt;=ListLength(L)*/&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;/*操作结果：用e返回L中第i个数据元素的值*/&lt;/span&gt;
Status GetElem(LinkList L, &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; i, ElemType *e)
{
    &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; j;
    LinkList p;
    p = L-&amp;gt;next;    &lt;span class=&quot;co&quot;&gt;/*让指针p指向链表L的第一个节点*/&lt;/span&gt;
    j = &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;;
    &lt;span class=&quot;kw&quot;&gt;while&lt;/span&gt; (p &amp;amp;&amp;amp; j&amp;lt;i)    &lt;span class=&quot;co&quot;&gt;/*p不为空且计数器j还没有等于i时，循环继续*/&lt;/span&gt;
    {
        p = p-&amp;gt;next;
        ++j;
    }
    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (!p || j &amp;gt; i)
    {
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; ERROR;    &lt;span class=&quot;co&quot;&gt;/*第i个节点不存在*/&lt;/span&gt;
    }
    *e = p-&amp;gt;data;   &lt;span class=&quot;co&quot;&gt;/*取第i个节点的数据*/&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; OK;
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;动画模拟：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://p66d6e5qt.bkt.clouddn.com/blog/180405/6Da7fgcKI3.gif&quot; alt=&quot;mark&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;单链表的插入&quot;&gt;3.1.3单链表的插入&lt;/h3&gt;
&lt;p&gt;假设存储元素e的节点为s,只需要将节点s插入到节点p和p-&amp;gt;next之间即可。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode c&quot;&gt;
&lt;code class=&quot;sourceCode c&quot;&gt;s-&amp;gt;next = p-&amp;gt;next;
p-&amp;gt;next = s;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;也就是说让p的后继节点改成s的后继节点，再把节点s变成p的后继节点。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://p66d6e5qt.bkt.clouddn.com/blog/180405/E31H6bhEjl.png?imageslim&quot; alt=&quot;mark&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意：&lt;code&gt;s-&amp;gt;next = p-&amp;gt;next;p-&amp;gt;next = s;&lt;/code&gt;代码的顺序不能反。&lt;/strong&gt;如果先&lt;code&gt;p-&amp;gt;next = s;&lt;/code&gt;,再&lt;code&gt;s-&amp;gt;next = p-&amp;gt;next;&lt;/code&gt;，此时第一句会将p-&amp;gt;next覆盖成s的地址了，那么&lt;code&gt;s-&amp;gt;next = p-&amp;gt;next;&lt;/code&gt;实际上就等于&lt;code&gt;s-&amp;gt;next = s;&lt;/code&gt;。这样单链表将不再连续，插入操作就是失败的。对于单链表的表头和表尾的特殊情况，操作是相同的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;单链表第i个数据插入节点的思路：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;声明一指针p指向单链表头结点，初始化j=1&lt;/li&gt;
&lt;li&gt;当j&amp;lt;i时，就遍历链表，让p的指针向后移动，不断的指向下一节点，j累加1&lt;/li&gt;
&lt;li&gt;若到链表末尾p为空，则说明第i个节点不存在&lt;/li&gt;
&lt;li&gt;否则查找成功，生成一个空节点s作为插入节点&lt;/li&gt;
&lt;li&gt;将数据元素e赋值给s-&amp;gt;data&lt;/li&gt;
&lt;li&gt;单链表插入的标准语句&lt;code&gt;s-&amp;gt;next = p-&amp;gt;next;p-&amp;gt;next = s;&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;strong&gt;代码实现：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;12&quot;&gt;
&lt;pre class=&quot;sourceCode c&quot;&gt;
&lt;code class=&quot;sourceCode c&quot;&gt;&lt;span class=&quot;ot&quot;&gt;#define OK 1&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;#define ERROR 0&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; Status;
&lt;span class=&quot;kw&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; ElemType;
&lt;span class=&quot;kw&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;struct&lt;/span&gt; Node
{
    ElemType data;
    &lt;span class=&quot;kw&quot;&gt;struct&lt;/span&gt; Node *next;
} Node;
&lt;span class=&quot;kw&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;struct&lt;/span&gt; Node *LinkList;

&lt;span class=&quot;co&quot;&gt;/*初始条件：顺序线性表L已经存在，1&amp;lt;=i&amp;lt;=ListLength(L)*/&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;/*操作结果：在L中第i个节点位置之前插入新的数据元素e，L的长度加1*/&lt;/span&gt;
Status ListInsert(LinkList *L, &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; i, ElemType e)
{
    &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; j;
    LinkList p = *L;
    j = &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;;

    &lt;span class=&quot;kw&quot;&gt;while&lt;/span&gt; (p &amp;amp;&amp;amp; j&amp;lt;i)    &lt;span class=&quot;co&quot;&gt;/*寻找第i-1个节点*/&lt;/span&gt;
    {
        p = p-&amp;gt;next;
        ++j;
    }
    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (!p || j &amp;gt; i)
    {
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; ERROR;   &lt;span class=&quot;co&quot;&gt;/*第i个节点不存在*/&lt;/span&gt;
    }
    LinkList s = (LinkList)malloc(&lt;span class=&quot;kw&quot;&gt;sizeof&lt;/span&gt;(Node));    &lt;span class=&quot;co&quot;&gt;/*生成新节点*/&lt;/span&gt;

    s-&amp;gt;data = e;
    s-&amp;gt;next = p-&amp;gt;next; &lt;span class=&quot;co&quot;&gt;/*将p的后集节点赋值给s的后继*/&lt;/span&gt;
    p-&amp;gt;next = s ;   &lt;span class=&quot;co&quot;&gt;/*将s赋值给p的后继*/&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; OK;
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;c语言的malloc标准函数，用于生成一个新的节点，实质就是在内存中分配内存用来存放节点。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;测试代码：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;18&quot;&gt;
&lt;pre class=&quot;sourceCode c&quot;&gt;
&lt;code class=&quot;sourceCode c&quot;&gt;&lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; main()
{
    LinkList head = (LinkList)malloc(&lt;span class=&quot;kw&quot;&gt;sizeof&lt;/span&gt;(Node)); &lt;span class=&quot;co&quot;&gt;/*头结点*/&lt;/span&gt;

    LinkList s1 = (LinkList)malloc(&lt;span class=&quot;kw&quot;&gt;sizeof&lt;/span&gt;(Node));   &lt;span class=&quot;co&quot;&gt;/*第一个节点*/&lt;/span&gt;
    s1-&amp;gt;data = &lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;;
    s1-&amp;gt;next = NULL;

    head-&amp;gt;next = s1;
    ListInsert(&amp;amp;head, &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;);     &lt;span class=&quot;co&quot;&gt;/*第1个节点前插入2*/&lt;/span&gt;
    ListInsert(&amp;amp;head, &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;);    &lt;span class=&quot;co&quot;&gt;/*第2个节点前插入3*/&lt;/span&gt;
    ListInsert(&amp;amp;head, &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;7&lt;/span&gt;);    &lt;span class=&quot;co&quot;&gt;/*第1个节点前插入7*/&lt;/span&gt;
    ListInsert(&amp;amp;head, &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;);    &lt;span class=&quot;co&quot;&gt;/*第1个节点前插入5*/&lt;/span&gt;
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;运行结果：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://p66d6e5qt.bkt.clouddn.com/blog/180405/l7EeKG57C0.gif&quot; alt=&quot;mark&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;动画模拟：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://p66d6e5qt.bkt.clouddn.com/blog/180405/jI6ilgBgJk.gif&quot; alt=&quot;mark&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;单链表的删除&quot;&gt;3.1.4单链表的删除&lt;/h3&gt;
&lt;p&gt;假设存储元素a&lt;sub&gt;i&lt;/sub&gt;的节点为q,要实现从单链表中将节点q删除的操作，其实是将它的前继节点的指针指向它的后继节点即可。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://p66d6e5qt.bkt.clouddn.com/blog/180405/fj0IDl46LE.png?imageslim&quot; alt=&quot;mark&quot;/&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode c&quot;&gt;
&lt;code class=&quot;sourceCode c&quot;&gt;q = p-&amp;gt;next;
p-&amp;gt;next = q-&amp;gt;next;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;单链表第i个数据删除节点的算法：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;声明一指针p指向单链表头结点，初始化j=1&lt;/li&gt;
&lt;li&gt;当j&amp;lt;i时，就遍历链表，让p的指针向后移动，不断的指向下一节点，j累加1&lt;/li&gt;
&lt;li&gt;若到链表末尾p为空，则说明第i个节点不存在&lt;/li&gt;
&lt;li&gt;否则查找成功，将欲删除的节点p-&amp;gt;next赋值给q&lt;/li&gt;
&lt;li&gt;将q节点中的数据赋值给e，作为返回&lt;/li&gt;
&lt;li&gt;释放q节点&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;strong&gt;代码实现：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;12&quot;&gt;
&lt;pre class=&quot;sourceCode c&quot;&gt;
&lt;code class=&quot;sourceCode c&quot;&gt;&lt;span class=&quot;ot&quot;&gt;#define OK 1&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;#define ERROR 0&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; Status;
&lt;span class=&quot;kw&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; ElemType;
&lt;span class=&quot;kw&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;struct&lt;/span&gt; Node
{
    ElemType data;
    &lt;span class=&quot;kw&quot;&gt;struct&lt;/span&gt; Node *next;
} Node;
&lt;span class=&quot;kw&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;struct&lt;/span&gt; Node *LinkList;

&lt;span class=&quot;co&quot;&gt;/*初始条件：顺序线性表L已经存在，1&amp;lt;=i&amp;lt;=ListLength(L)*/&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;/*操作结果：删除L中第i个节点，并用e返回其值，L的长度减1*/&lt;/span&gt;
Status ListDelete(LinkList *L, &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; i, ElemType *e)
{
    &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; j;
    LinkList p = *L;
    j = &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;;
    &lt;span class=&quot;kw&quot;&gt;while&lt;/span&gt; (p-&amp;gt;next &amp;amp;&amp;amp; j&amp;lt;i)  &lt;span class=&quot;co&quot;&gt;/*寻找第i-1个节点*/&lt;/span&gt;
    {
        p = p-&amp;gt;next;
        ++j;
    }
    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (!(p-&amp;gt;next) || j &amp;gt; i)
    {
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; ERROR;       &lt;span class=&quot;co&quot;&gt;/*第i个节点不存在*/&lt;/span&gt;
    }
    LinkList q = p-&amp;gt;next;
    p-&amp;gt;next = q-&amp;gt;next;      &lt;span class=&quot;co&quot;&gt;/*将q的后继赋值给p的后继*/&lt;/span&gt;
    *e = q-&amp;gt;data;   &lt;span class=&quot;co&quot;&gt;/*将q节点中的数据给e*/&lt;/span&gt;

    free(q);        &lt;span class=&quot;co&quot;&gt;/*回收此节点，释放内存*/&lt;/span&gt;

    &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; OK;
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;c语言的free标准函数，作用是让系统回收一个节点，释放内存。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;测试代码：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;还是使用上面插入例子的单链表，然后删除单链表中的第3个节点：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;20&quot;&gt;
&lt;pre class=&quot;sourceCode c&quot;&gt;
&lt;code class=&quot;sourceCode c&quot;&gt;&lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; main()
{
    LinkList head = (LinkList)malloc(&lt;span class=&quot;kw&quot;&gt;sizeof&lt;/span&gt;(Node)); &lt;span class=&quot;co&quot;&gt;/*头结点*/&lt;/span&gt;

    LinkList s1 = (LinkList)malloc(&lt;span class=&quot;kw&quot;&gt;sizeof&lt;/span&gt;(Node));   &lt;span class=&quot;co&quot;&gt;/*第一个节点*/&lt;/span&gt;
    s1-&amp;gt;data = &lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;;
    s1-&amp;gt;next = NULL;

    head-&amp;gt;next = s1;
    ListInsert(&amp;amp;head, &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;);     &lt;span class=&quot;co&quot;&gt;/*第1个节点前插入2*/&lt;/span&gt;
    ListInsert(&amp;amp;head, &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;);    &lt;span class=&quot;co&quot;&gt;/*第2个节点前插入3*/&lt;/span&gt;
    ListInsert(&amp;amp;head, &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;7&lt;/span&gt;);    &lt;span class=&quot;co&quot;&gt;/*第1个节点前插入7*/&lt;/span&gt;
    ListInsert(&amp;amp;head, &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;);    &lt;span class=&quot;co&quot;&gt;/*第1个节点前插入5*/&lt;/span&gt;

    &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; e;
    ListDelete(&amp;amp;head, &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;, &amp;amp;e);   &lt;span class=&quot;co&quot;&gt;/*删除第3个节点*/&lt;/span&gt;
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;运行结果：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://p66d6e5qt.bkt.clouddn.com/blog/180405/AKKEFD5dCG.gif&quot; alt=&quot;mark&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;动画模拟：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://p66d6e5qt.bkt.clouddn.com/blog/180405/hFjf86mkbg.gif&quot; alt=&quot;mark&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;单链表的整表创建&quot;&gt;3.1.5单链表的整表创建&lt;/h3&gt;
&lt;p&gt;顺序存储结构的创建，其实就是一个数组的初始化；而单链表和顺序存储结构就不一样，它所占用的空间的大小和位置是不需要预先分配划定的。所以创建单链表的过程就是一个动态生成链表的过程，即从“空表”的初始状态起，依次建立各元素节点，并逐个插入链表。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;单链表创建的思路:&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;声明一指针p和计数变量i&lt;/li&gt;
&lt;li&gt;初始化一空链表L&lt;/li&gt;
&lt;li&gt;让L的头结点的指针指向NULL，即建立一个带头结点的单链表&lt;/li&gt;
&lt;li&gt;循环&lt;/li&gt;
&lt;/ol&gt;&lt;ul&gt;&lt;li&gt;生成一个新节点赋值给p&lt;/li&gt;
&lt;li&gt;随机生成一数字赋值给p的数据域p-&amp;gt;data&lt;/li&gt;
&lt;li&gt;将p插入到头节点与前一新节点之间&lt;/li&gt;
&lt;/ul&gt;&lt;h4 id=&quot;头插法&quot;&gt;头插法&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;代码实现：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;sourceCode c&quot;&gt;
&lt;code class=&quot;sourceCode c&quot;&gt;&lt;span class=&quot;co&quot;&gt;/*头插法*/&lt;/span&gt;
&lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; CreateListHead(LinkList *L,&lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; n)
{
    LinkList p;
    &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; i;

    srand(time(&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;));     &lt;span class=&quot;co&quot;&gt;/*初始化随机数种子*/&lt;/span&gt;

    *L = (LinkList)malloc(&lt;span class=&quot;kw&quot;&gt;sizeof&lt;/span&gt;(Node));
    (*L) -&amp;gt; next = NULL;    &lt;span class=&quot;co&quot;&gt;/*先建立一个带头结点的单链表*/&lt;/span&gt;

    &lt;span class=&quot;kw&quot;&gt;for&lt;/span&gt; ( i = &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;; i &amp;lt; n; i++)
    {
        p = (LinkList)malloc(&lt;span class=&quot;kw&quot;&gt;sizeof&lt;/span&gt;(Node));     &lt;span class=&quot;co&quot;&gt;/*生成新节点*/&lt;/span&gt;
        p-&amp;gt;data = rand() % &lt;span class=&quot;dv&quot;&gt;100&lt;/span&gt; + &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;; &lt;span class=&quot;co&quot;&gt;/*随机生成100以内的数字*/&lt;/span&gt;
        p-&amp;gt;next = (*L)-&amp;gt;next;
        (*L)-&amp;gt;next = p;     &lt;span class=&quot;co&quot;&gt;/*插入到表头*/&lt;/span&gt;
    }
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;测试代码：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode c&quot;&gt;
&lt;code class=&quot;sourceCode c&quot;&gt;&lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; main()
{
    LinkList list;
    CreateListHead(&amp;amp;list, &lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;); &lt;span class=&quot;co&quot;&gt;/*创建一个有5个节点的单链表（不包含头结点）*/&lt;/span&gt;
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;运行结果：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://p66d6e5qt.bkt.clouddn.com/blog/180405/4jIm6mlh25.gif&quot; alt=&quot;mark&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;动画模拟：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://p66d6e5qt.bkt.clouddn.com/blog/180405/37k30cd7cI.gif&quot; alt=&quot;mark&quot;/&gt;&lt;/p&gt;
&lt;h4 id=&quot;尾插法&quot;&gt;尾插法&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;代码实现：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;12&quot;&gt;
&lt;pre class=&quot;sourceCode c&quot;&gt;
&lt;code class=&quot;sourceCode c&quot;&gt;&lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; CreateListTail(LinkList *L, &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; n)
{
    LinkList p,r;
    &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; i;

    srand(time(&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;));
    *L = (LinkList)malloc(&lt;span class=&quot;kw&quot;&gt;sizeof&lt;/span&gt;(Node));
    
    r = *L;

    &lt;span class=&quot;kw&quot;&gt;for&lt;/span&gt; (i = &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;; i &amp;lt; n; i++)
    {
        p = (LinkList)malloc(&lt;span class=&quot;kw&quot;&gt;sizeof&lt;/span&gt;(Node));
        p-&amp;gt;data = rand() % &lt;span class=&quot;dv&quot;&gt;100&lt;/span&gt; + &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;;
        r-&amp;gt;next = p;        &lt;span class=&quot;co&quot;&gt;/*将表尾终端节点的指针指向新节点*/&lt;/span&gt;
        r = p;  &lt;span class=&quot;co&quot;&gt;/*将当前的新节点定义为表尾终端节点*/&lt;/span&gt;
    }

    r-&amp;gt;next = NULL;
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注意L和r的关系，L是指整个单链表，而r是指向尾节点的变量，r会随着循环不断的变化节点，而L则是随着循环增长为一个多节点的链表。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;测试代码：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode c&quot;&gt;
&lt;code class=&quot;sourceCode c&quot;&gt;&lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; main()
{
    LinkList list;
    CreateListTail(&amp;amp;list, &lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;); &lt;span class=&quot;co&quot;&gt;/*创建一个有5个节点的单链表（不包含头结点）*/&lt;/span&gt;
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;运行结果：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://p66d6e5qt.bkt.clouddn.com/blog/180405/B396gb4JKf.gif&quot; alt=&quot;mark&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;动画模拟：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://p66d6e5qt.bkt.clouddn.com/blog/180405/Fgm2dGc7i9.gif&quot; alt=&quot;mark&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;单链表的整表删除&quot;&gt;3.1.6单链表的整表删除&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;单链表整表删除的思路：&lt;/strong&gt;&lt;/p&gt;
&lt;ol readability=&quot;-2&quot;&gt;&lt;li&gt;
&lt;p&gt;声明一节点p和q&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;将一个节点赋值给p&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;循环&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;strong&gt;代码实现：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;sourceCode c&quot;&gt;
&lt;code class=&quot;sourceCode c&quot;&gt;&lt;span class=&quot;ot&quot;&gt;#define OK 1&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;#define ERROR 0&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; Status;
&lt;span class=&quot;kw&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; ElemType;
&lt;span class=&quot;kw&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;struct&lt;/span&gt; Node
{
    ElemType data;
    &lt;span class=&quot;kw&quot;&gt;struct&lt;/span&gt; Node *next;
} Node;
&lt;span class=&quot;kw&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;struct&lt;/span&gt; Node *LinkList;

&lt;span class=&quot;co&quot;&gt;/*初始条件：顺序线性表L已经存在*/&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;/*操作结果：将L重置为空表*/&lt;/span&gt;
Status ClearList(LinkList *L)
{
    LinkList p, q;
    p = (*L)-&amp;gt;next;      &lt;span class=&quot;co&quot;&gt;/*p指向第一个节点*/&lt;/span&gt;

    &lt;span class=&quot;kw&quot;&gt;while&lt;/span&gt; (p)   &lt;span class=&quot;co&quot;&gt;/*没到结尾*/&lt;/span&gt;
    {
        q = p-&amp;gt;next;
        free(p);
        p = q;
    }
    (*L)-&amp;gt;next = NULL; &lt;span class=&quot;co&quot;&gt;/*头节点指针域为空*/&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; OK;
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;测试代码：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode c&quot;&gt;
&lt;code class=&quot;sourceCode c&quot;&gt;&lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; main()
{
    LinkList list;
    CreateListTail(&amp;amp;list, &lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;); &lt;span class=&quot;co&quot;&gt;/*用尾插法创建一个5个元素的单链表*/&lt;/span&gt;
    ClearList(&amp;amp;list);   &lt;span class=&quot;co&quot;&gt;/*清空单链表*/&lt;/span&gt;
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;运行结果：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://p66d6e5qt.bkt.clouddn.com/blog/180406/6eGBmlh3eK.gif&quot; alt=&quot;mark&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;动画模拟：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://p66d6e5qt.bkt.clouddn.com/blog/180406/hD174EcHA8.gif&quot; alt=&quot;mark&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;单链表结构与顺序存储结构的优缺点&quot;&gt;3.1.7单链表结构与顺序存储结构的优缺点&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;存储分配方式&lt;/li&gt;
&lt;li&gt;顺序存储结构用一段连续的存储单元依次存储线性表的数据元素&lt;/li&gt;
&lt;li&gt;单链表采用链式存储结构，用一组任意的存储单元存储线性表的元素&lt;/li&gt;
&lt;li&gt;时间性能&lt;/li&gt;
&lt;li&gt;查找
&lt;ul&gt;&lt;li&gt;顺序存储结构O(1)&lt;/li&gt;
&lt;li&gt;单链表O(n)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;插入和删除
&lt;ul&gt;&lt;li&gt;顺序存储结构O(n)&lt;/li&gt;
&lt;li&gt;单链表O(1)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;空间性能&lt;/li&gt;
&lt;li&gt;顺序存储结构需要预先分配存储空间，分大了浪费空间，分小了容易造成内存溢出&lt;/li&gt;
&lt;li&gt;单链表不需要分配存储空间，只要有就可以分配，元素个数也不受限制&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;总结：若线性表需要频繁查找，很少进行插入和删除操作时，宜采用顺序存储结构；若线性表频繁的进行插入和删除操作，或者线性表中的元素个数变化较大，或者根本不知道有多大时，宜采用单链表结构。&lt;/p&gt;
&lt;h2 id=&quot;循环链表&quot;&gt;3.2循环链表&lt;/h2&gt;
&lt;p&gt;将单链表中终端节点的指针由空指针改为指向头节点，就使整个单链表形成一个环，这种&lt;strong&gt;头尾相接的单链表&lt;/strong&gt;称为单循环列表，简称&lt;strong&gt;循环列表&lt;/strong&gt;（circular linked list）。&lt;/p&gt;
&lt;p&gt;循环列表解决了一个很麻烦的问题：如何从一个节点出发，访问到链表的全部节点。&lt;/p&gt;
&lt;p&gt;非空的循环列表：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://p66d6e5qt.bkt.clouddn.com/blog/180406/6H3BkKLBKL.png?imageslim&quot; alt=&quot;mark&quot;/&gt;&lt;/p&gt;
&lt;p&gt;循环列表带有头结点的空链表：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://p66d6e5qt.bkt.clouddn.com/blog/180406/9HLADfClHe.png?imageslim&quot; alt=&quot;mark&quot;/&gt;&lt;/p&gt;
&lt;p&gt;其实循环列表和单链表的主要差异就在于循环的判断条件上，单链表是判断p-&amp;gt;next是否为空，现在则是p-&amp;gt;next不等于头结点，则循环未结束。&lt;/p&gt;
&lt;h2 id=&quot;双向链表&quot;&gt;3.3双向链表&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;双向链表&lt;/strong&gt;（double linked list）是在单链表的每个节点中，再设置一个&lt;strong&gt;指向其前驱节点的指针域&lt;/strong&gt;。&lt;/p&gt;
&lt;h3 id=&quot;双向链表的读取&quot;&gt;3.3.1双向链表的读取&lt;/h3&gt;
&lt;p&gt;双向链表的读取其实和单链表的读取大同小异，只不过双向链表不用每一次都从头开始找节点，支持反向查找。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://p66d6e5qt.bkt.clouddn.com/blog/180407/81cmIEGa5b.gif&quot; alt=&quot;mark&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;双向链表的插入&quot;&gt;3.3.2双向链表的插入&lt;/h3&gt;
&lt;p&gt;假设存储元素e的节点为s，要实现将节点s插入到节点p和p-&amp;gt;next之间需要下面几步，如图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://p66d6e5qt.bkt.clouddn.com/blog/180406/jeiiLmG2B6.png?imageslim&quot; alt=&quot;mark&quot;/&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;13&quot;&gt;
&lt;pre class=&quot;sourceCode c&quot;&gt;
&lt;code class=&quot;sourceCode c&quot;&gt;s-&amp;gt;prior = p;           &lt;span class=&quot;co&quot;&gt;/*把p赋值给s的前驱,如图①*/&lt;/span&gt;
s-&amp;gt;next = p-&amp;gt;next;      &lt;span class=&quot;co&quot;&gt;/*将p的后继节点赋值给s的后继,如图②*/&lt;/span&gt;
p-&amp;gt;next-&amp;gt;prior = s;     &lt;span class=&quot;co&quot;&gt;/*将s赋值给p-&amp;gt;next的前驱,如图③*/&lt;/span&gt;
p-&amp;gt;next = s;            &lt;span class=&quot;co&quot;&gt;/*将s赋值给p的后继,如图④*/&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;操作顺序是先搞定s的前驱和后继，再搞定后节点的前驱，最后解决前节点的后继。&lt;strong&gt;顺序很重要，不能颠倒&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;代码实现：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;12&quot;&gt;
&lt;pre class=&quot;sourceCode c&quot;&gt;
&lt;code class=&quot;sourceCode c&quot;&gt;&lt;span class=&quot;ot&quot;&gt;#define OK 1&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;#define ERROR 0&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; Status;
&lt;span class=&quot;kw&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; ElemType;
&lt;span class=&quot;co&quot;&gt;/*线性表的双向链表存储结构*/&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;struct&lt;/span&gt; DulNode
{
    ElemType data;
    &lt;span class=&quot;kw&quot;&gt;struct&lt;/span&gt; DulNode *prior;      &lt;span class=&quot;co&quot;&gt;/*直接前驱指针*/&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;struct&lt;/span&gt; DulNode *next;       &lt;span class=&quot;co&quot;&gt;/*直接后继指针*/&lt;/span&gt;
} DulNode;
&lt;span class=&quot;kw&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;struct&lt;/span&gt; DulNode *DulLinkList;

&lt;span class=&quot;co&quot;&gt;/*初始条件：顺序线性表L已经存在，1&amp;lt;=i&amp;lt;=ListLength(L)*/&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;/*操作结果：在L中第i个节点位置之前插入新的数据元素e，L的长度加1*/&lt;/span&gt;
Status DulListInsert(DulLinkList *L, &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; i, ElemType e)
{
    &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; j;
    DulLinkList p = *L;
    j = &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;;

    &lt;span class=&quot;kw&quot;&gt;while&lt;/span&gt; (p &amp;amp;&amp;amp; j&amp;lt;i)    &lt;span class=&quot;co&quot;&gt;/*寻找第i-1个节点*/&lt;/span&gt;
    {
        p = p-&amp;gt;next;
        ++j;
    }
    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (!p || j &amp;gt; i)
    {
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; ERROR;   &lt;span class=&quot;co&quot;&gt;/*第i个节点不存在*/&lt;/span&gt;
    }
    DulLinkList s = (DulLinkList)malloc(&lt;span class=&quot;kw&quot;&gt;sizeof&lt;/span&gt;(DulNode));   &lt;span class=&quot;co&quot;&gt;/*生成新节点*/&lt;/span&gt;

    s-&amp;gt;data = e;
    s-&amp;gt;prior = p;               &lt;span class=&quot;co&quot;&gt;/*把p赋值给s的前驱*/&lt;/span&gt;
    s-&amp;gt;next = p-&amp;gt;next;      &lt;span class=&quot;co&quot;&gt;/*将p的后继节点赋值给s的后继*/&lt;/span&gt;
    p-&amp;gt;next-&amp;gt;prior = s;     &lt;span class=&quot;co&quot;&gt;/*将s赋值给p-&amp;gt;next的前驱*/&lt;/span&gt;
    p-&amp;gt;next = s;                    &lt;span class=&quot;co&quot;&gt;/*将s赋值给p的后继*/&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; OK;
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;测试代码：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;sourceCode c&quot;&gt;
&lt;code class=&quot;sourceCode c&quot;&gt;&lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; main()
{
    DulLinkList dulList;
    CreateDulListHead(&amp;amp;dulList, &lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;); &lt;span class=&quot;co&quot;&gt;/*初始化一个有5个节点的循环链表*/&lt;/span&gt;
    DulListInsert(&amp;amp;dulList, &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;7&lt;/span&gt;);&lt;span class=&quot;co&quot;&gt;/*在循环链表第3个节点前插入数据7*/&lt;/span&gt;
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;运行结果：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://p66d6e5qt.bkt.clouddn.com/blog/180406/Jd914lI5ka.gif&quot; alt=&quot;mark&quot;/&gt;&lt;/p&gt;
&lt;p&gt;我们可以看出循环链表一个节点的&lt;strong&gt;前驱的后继&lt;/strong&gt;或者&lt;strong&gt;后继的前驱&lt;/strong&gt;都是&lt;strong&gt;它自己&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;p-&amp;gt;next-&amp;gt;prior = p = p-&amp;gt;prior-&amp;gt;next&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;动画模拟：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://p66d6e5qt.bkt.clouddn.com/blog/180406/10eDmmg132.gif&quot; alt=&quot;mark&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;双向链表的删除&quot;&gt;3.3.3双向链表的删除&lt;/h3&gt;
&lt;p&gt;如果插入操作理解了，那么删除操作就很简单了。&lt;/p&gt;
&lt;p&gt;假设要删除节点p，需要下面两步，如图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://p66d6e5qt.bkt.clouddn.com/blog/180407/h2bd4j1d90.png?imageslim&quot; alt=&quot;mark&quot;/&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode c&quot;&gt;
&lt;code class=&quot;sourceCode c&quot;&gt;p-&amp;gt;prior-&amp;gt;next = p-&amp;gt;next;   &lt;span class=&quot;co&quot;&gt;/*将p-&amp;gt;next赋值给p-&amp;gt;prior的后继,如图①*/&lt;/span&gt;
p-&amp;gt;next-&amp;gt;prior = p-&amp;gt;prior;  &lt;span class=&quot;co&quot;&gt;/*将p-&amp;gt;prior赋值给p-&amp;gt;next的前驱,如图②*/&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;代码实现：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;12&quot;&gt;
&lt;pre class=&quot;sourceCode c&quot;&gt;
&lt;code class=&quot;sourceCode c&quot;&gt;&lt;span class=&quot;ot&quot;&gt;#define OK 1&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;#define ERROR 0&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; Status;
&lt;span class=&quot;kw&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; ElemType;
&lt;span class=&quot;co&quot;&gt;/*线性表的双向链表存储结构*/&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;struct&lt;/span&gt; DulNode
{
    ElemType data;
    &lt;span class=&quot;kw&quot;&gt;struct&lt;/span&gt; DulNode *prior;      &lt;span class=&quot;co&quot;&gt;/*直接前驱指针*/&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;struct&lt;/span&gt; DulNode *next;       &lt;span class=&quot;co&quot;&gt;/*直接后继指针*/&lt;/span&gt;
} DulNode;
&lt;span class=&quot;kw&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;struct&lt;/span&gt; DulNode *DulLinkList;

&lt;span class=&quot;co&quot;&gt;/*初始条件：顺序线性表L已经存在，1&amp;lt;=i&amp;lt;=ListLength(L)*/&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;/*操作结果：删除L中第i个节点，并用e返回其值，L的长度减1*/&lt;/span&gt;
Status DulListDelete(DulLinkList *L, &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; i, ElemType *e)
{
    &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; j;
    DulLinkList p = *L;
    j = &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;;
    &lt;span class=&quot;kw&quot;&gt;while&lt;/span&gt; (p-&amp;gt;next &amp;amp;&amp;amp; j&amp;lt;i)  &lt;span class=&quot;co&quot;&gt;/*寻找第i-1个节点*/&lt;/span&gt;
    {
        p = p-&amp;gt;next;
        ++j;
    }
    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (!(p-&amp;gt;next) || j &amp;gt; i)
    {
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; ERROR;       &lt;span class=&quot;co&quot;&gt;/*第i个节点不存在*/&lt;/span&gt;
    }
    DulLinkList q = p-&amp;gt;next;
    q-&amp;gt;prior-&amp;gt;next = q-&amp;gt;next;       &lt;span class=&quot;co&quot;&gt;/*将q-&amp;gt;next赋值给q-&amp;gt;prior的后继*/&lt;/span&gt;
    q-&amp;gt;next-&amp;gt;prior = q-&amp;gt;prior;  &lt;span class=&quot;co&quot;&gt;/*将q-&amp;gt;prior赋值给q-&amp;gt;next的前驱*/&lt;/span&gt;
    *e = q-&amp;gt;data;   &lt;span class=&quot;co&quot;&gt;/*将q节点中的数据给e*/&lt;/span&gt;

    free(q);        &lt;span class=&quot;co&quot;&gt;/*回收此节点，释放内存*/&lt;/span&gt;

    &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; OK;
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;测试代码：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;12&quot;&gt;
&lt;pre class=&quot;sourceCode c&quot;&gt;
&lt;code class=&quot;sourceCode c&quot;&gt;&lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; main()
{
    DulLinkList dulList;
    ElemType e;
    CreateDulListHead(&amp;amp;dulList, &lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;); &lt;span class=&quot;co&quot;&gt;/*初始化一个有5个节点的循环链表*/&lt;/span&gt;
    DulListDelete(&amp;amp;dulList, &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;, &amp;amp;e); &lt;span class=&quot;co&quot;&gt;/*删除循环链表第3个节点并赋值给e*/&lt;/span&gt;
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;运行结果：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://p66d6e5qt.bkt.clouddn.com/blog/180407/i1hHhk77g9.gif&quot; alt=&quot;mark&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;动画模拟：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://p66d6e5qt.bkt.clouddn.com/blog/180407/I89jhJ3I8f.gif&quot; alt=&quot;mark&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;双向循环链表&quot;&gt;3.3.4双向循环链表&lt;/h3&gt;
&lt;p&gt;既然单链表可以有循环链表，那么双向链表当然也可以是循环链表。&lt;/p&gt;
&lt;p&gt;双向链表的循环带头节点的&lt;strong&gt;空链表&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://p66d6e5qt.bkt.clouddn.com/blog/180407/dg4CaIlIjk.png?imageslim&quot; alt=&quot;mark&quot;/&gt;&lt;/p&gt;
&lt;p&gt;双向链表的循环带头节点的&lt;strong&gt;非空链表&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://p66d6e5qt.bkt.clouddn.com/blog/180407/hBHbahj9BA.png?imageslim&quot; alt=&quot;mark&quot;/&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;本文为博主学习感悟总结，水平有限，如果不当，欢迎指正。&lt;/p&gt;
&lt;p&gt;如果您认为还不错，不妨点击一下下方的&lt;span onclick=&quot;Digg();&quot;&gt;【&lt;span&gt;推荐&lt;/span&gt;】&lt;/span&gt;按钮，谢谢支持。&lt;/p&gt;
&lt;p&gt;转载与引用请注明出处。&lt;/p&gt;
</description>
<pubDate>Sun, 08 Apr 2018 11:58:00 +0000</pubDate>
<dc:creator>喜欢天黑却怕鬼</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/songwenjie/p/8678212.html</dc:identifier>
</item>
</channel>
</rss>