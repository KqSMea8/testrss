<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>【Spring】面向切面之AOP - leesf</title>
<link>http://www.cnblogs.com/leesf456/p/7631620.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/leesf456/p/7631620.html</guid>
<description>&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;前面已经讲解了&lt;code&gt;bean&lt;/code&gt;的装配技术，接着学习&lt;code&gt;Spring&lt;/code&gt;中另外一个核心概念：&lt;code&gt;切面&lt;/code&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;面向切面&quot;&gt;面向切面&lt;/h2&gt;
&lt;h3 id=&quot;面向切面编程&quot;&gt;面向切面编程&lt;/h3&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;切面能够帮助模块化&lt;code&gt;横切关注点&lt;/code&gt;，&lt;code&gt;横切关注点&lt;/code&gt;可以被描述为影响应用的功能，如为业务添加安全和事务管理等。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;aopaspect-orient-programming&quot;&gt;AOP(Aspect Orient Programming)&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;通知，通知定义切面何时被使用，&lt;code&gt;Spring&lt;/code&gt;切面可以应用&lt;code&gt;5&lt;/code&gt;种类型的通知。
&lt;ul&gt;&lt;li&gt;前置通知(Before)，在目标方法被调用之前调用通知功能。&lt;/li&gt;
&lt;li&gt;后置通知(After)，在目标方法完成之后调用通知，并不关心方法的输出。&lt;/li&gt;
&lt;li&gt;返回通知(AfterReturning)，在目标方法成功执行之后调用通知。&lt;/li&gt;
&lt;li&gt;异常通知(AfterThrowing)，在目标方法抛出异常后调用通知。&lt;/li&gt;
&lt;li&gt;环形通知(Around)，通知包裹了被通知的方法，在被通知的方法调用之前和调用之后执行自定义的行为。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;连接点，在应用执行过程中能够插入切面的一个点。&lt;/li&gt;
&lt;li&gt;切点，匹配通知所要织入的一个或多个连接点。&lt;/li&gt;
&lt;li&gt;切面，通知和切点的结合。&lt;/li&gt;
&lt;li&gt;引入，允许向现有类添加新方法或属性。&lt;/li&gt;
&lt;li&gt;织入，把切面应用到目标对象并创建新的代理对象的过程，切面可以在指定的连接点被织入到目标对象中，在目标对象的生命周期中有多个点可以进行织入。
&lt;ul&gt;&lt;li&gt;编译期，在目标类编译时被织入，需要特殊的编译器支持。&lt;/li&gt;
&lt;li&gt;类加载器，切面在目标类加载到&lt;code&gt;JVM&lt;/code&gt;时被织入，需要特殊类加载器。&lt;/li&gt;
&lt;li&gt;运行期，在应用运行的某个时刻被织入，&lt;code&gt;AOP&lt;/code&gt;容器会为目标对象动态创建代理对象，这也是&lt;code&gt;Spring AOP&lt;/code&gt;的织入方式。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h4 id=&quot;spring-aop&quot;&gt;Spring AOP&lt;/h4&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;code&gt;Spring&lt;/code&gt;对&lt;code&gt;AOP&lt;/code&gt;的支持在很多方面借鉴了&lt;code&gt;AspectJ&lt;/code&gt;项目，提供如下四种支持。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;&lt;li&gt;基于代理的经典&lt;code&gt;Spring AOP&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;纯&lt;code&gt;POJO&lt;/code&gt;切面。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@AspectJ&lt;/code&gt;注解的切面。&lt;/li&gt;
&lt;li&gt;注入式&lt;code&gt;AspectJ&lt;/code&gt;切面(适用于&lt;code&gt;Spring&lt;/code&gt;各版本)。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;code&gt;Spring AOP&lt;/code&gt;构建在动态代理基础上，只能局限于对方法拦截；&lt;code&gt;Spring&lt;/code&gt;在运行时通知对象(通过在代理类中包裹切面，在运行期把切面织入到&lt;code&gt;Spring&lt;/code&gt;管理的&lt;code&gt;bean&lt;/code&gt;中，代理类封装了目标类，并拦截被通知方法的调用，执行切面逻辑，再把调用转发给真正的目标&lt;code&gt;bean&lt;/code&gt;)；&lt;code&gt;Spring&lt;/code&gt;只支持方法级别的连接点(基于动态代理决定)。&lt;/p&gt;
&lt;h3 id=&quot;通过切点选择连接点&quot;&gt;通过切点选择连接点&lt;/h3&gt;
&lt;h4 id=&quot;编写切点&quot;&gt;编写切点&lt;/h4&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;首先先定义一个方法&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;
&lt;span class=&quot;kw&quot;&gt;package&lt;/span&gt; ch4

&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;interface&lt;/span&gt; Performance {
    &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;perform&lt;/span&gt;();
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;然后使用切点表达式设置当&lt;code&gt;perform&lt;/code&gt;方法执行时触发通知的调用&lt;strong&gt;execution(* ch4.Performance.perform(..))&lt;/strong&gt;，*表示并不关心返回值，然后指定具体的方法名，方法中的&lt;code&gt;..&lt;/code&gt;表示切点要选择任意的&lt;code&gt;perform&lt;/code&gt;方法。还可使用&lt;code&gt;&amp;amp;&amp;amp;、and、||、or&lt;/code&gt;对切点进行限定。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;切点中选择bean&quot;&gt;切点中选择bean&lt;/h4&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;切点表达式中可使用&lt;code&gt;bean&lt;/code&gt;的&lt;code&gt;ID&lt;/code&gt;来标识&lt;code&gt;bean&lt;/code&gt;，如下切点表达式&lt;strong&gt;execution(* ch4.Performance.perform(..)) &amp;amp;&amp;amp; bean(musicPerformance)&lt;/strong&gt;，表示限定&lt;code&gt;beanID&lt;/code&gt;为&lt;code&gt;musicPerformance&lt;/code&gt;时调用通知，其中&lt;code&gt;musicPerformance&lt;/code&gt;是&lt;code&gt;Performance&lt;/code&gt;的一个子类实现。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;使用注解创建切面&quot;&gt;使用注解创建切面&lt;/h3&gt;
&lt;h4 id=&quot;定义切面&quot;&gt;定义切面&lt;/h4&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;定义一个切面如下。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;
&lt;span class=&quot;kw&quot;&gt;package ch4;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;import org.aspectj.lang.ProceedingJoinPoint;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import org.aspectj.lang.annotation.*;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import org.springframework.stereotype.Component;&lt;/span&gt;

&lt;span class=&quot;fu&quot;&gt;@Aspect&lt;/span&gt;
&lt;span class=&quot;fu&quot;&gt;@Component&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; Audience {
    &lt;span class=&quot;fu&quot;&gt;@Before&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;execution(* ch4.Performance.perform(..))&quot;&lt;/span&gt;)
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;silenceCellPhones&lt;/span&gt;() {
        System.&lt;span class=&quot;fu&quot;&gt;out&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;println&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;Silencing cell phones&quot;&lt;/span&gt;);
    }

    &lt;span class=&quot;fu&quot;&gt;@Before&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;execution(* ch4.Performance.perform(..))&quot;&lt;/span&gt;)
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;takeSeats&lt;/span&gt;() {
        System.&lt;span class=&quot;fu&quot;&gt;out&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;println&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;Taking seats&quot;&lt;/span&gt;);
    }

    &lt;span class=&quot;fu&quot;&gt;@AfterReturning&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;execution(* ch4.Performance.perform(..))&quot;&lt;/span&gt;)
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;applause&lt;/span&gt;() {
        System.&lt;span class=&quot;fu&quot;&gt;out&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;println&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;CLAP CLAP CLAP CLAP&quot;&lt;/span&gt;);
    }

    &lt;span class=&quot;fu&quot;&gt;@AfterThrowing&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;execution(* ch4.Performance.perform(..))&quot;&lt;/span&gt;)
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;demandRefund&lt;/span&gt;() {
        System.&lt;span class=&quot;fu&quot;&gt;out&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;println&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;Demanding a refund&quot;&lt;/span&gt;);
    }
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;可以看到配合注解和切点表达式可以使得在执行&lt;code&gt;perform&lt;/code&gt;方法之前、之后完成指定动作，当然，对于每个方法都使用了&lt;code&gt;execution&lt;/code&gt;切点表达式，可以进一步进行精简。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;
&lt;span class=&quot;kw&quot;&gt;package ch4;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;import org.aspectj.lang.ProceedingJoinPoint;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import org.aspectj.lang.annotation.*;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import org.springframework.stereotype.Component;&lt;/span&gt;

&lt;span class=&quot;fu&quot;&gt;@Aspect&lt;/span&gt;
&lt;span class=&quot;fu&quot;&gt;@Component&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; Audience {
    &lt;span class=&quot;fu&quot;&gt;@Pointcut&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;execution(* ch4.Performance.perform(..))&quot;&lt;/span&gt;)
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;performance&lt;/span&gt;() {

    }

    &lt;span class=&quot;fu&quot;&gt;@Before&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;performance()&quot;&lt;/span&gt;)
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;silenceCellPhones&lt;/span&gt;() {
        System.&lt;span class=&quot;fu&quot;&gt;out&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;println&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;Silencing cell phones&quot;&lt;/span&gt;);
    }

    &lt;span class=&quot;fu&quot;&gt;@Before&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;performance()&quot;&lt;/span&gt;)
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;takeSeats&lt;/span&gt;() {
        System.&lt;span class=&quot;fu&quot;&gt;out&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;println&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;Taking seats&quot;&lt;/span&gt;);
    }

    &lt;span class=&quot;fu&quot;&gt;@AfterReturning&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;performance()&quot;&lt;/span&gt;)
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;applause&lt;/span&gt;() {
        System.&lt;span class=&quot;fu&quot;&gt;out&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;println&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;CLAP CLAP CLAP CLAP&quot;&lt;/span&gt;);
    }

    &lt;span class=&quot;fu&quot;&gt;@AfterThrowing&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;performance()&quot;&lt;/span&gt;)
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;demandRefund&lt;/span&gt;() {
        System.&lt;span class=&quot;fu&quot;&gt;out&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;println&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;Demanding a refund&quot;&lt;/span&gt;);
    }
}
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;可以看到使用&lt;code&gt;@Pointcut&lt;/code&gt;定义切点，然后在其他方法中直接使用注解和切点方法即可，不需要再繁琐的使用&lt;code&gt;execution&lt;/code&gt;切点表达式。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;启动代理功能&quot;&gt;启动代理功能&lt;/h4&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;在定义了注解后，需要启动，否则无法识别，启动方法分为在&lt;code&gt;JavaConfig&lt;/code&gt;中显式配置和&lt;code&gt;XML&lt;/code&gt;注解。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;&lt;li&gt;JavaConfig显式配置&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;
&lt;span class=&quot;kw&quot;&gt;package ch4;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;import org.springframework.context.annotation.Bean;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import org.springframework.context.annotation.ComponentScan;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import org.springframework.context.annotation.Configuration;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import org.springframework.context.annotation.EnableAspectJAutoProxy;&lt;/span&gt;


&lt;span class=&quot;fu&quot;&gt;@Configuration&lt;/span&gt;
&lt;span class=&quot;fu&quot;&gt;@EnableAspectJAutoProxy&lt;/span&gt;
&lt;span class=&quot;fu&quot;&gt;@ComponentScan&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; ConcertConfig {

    &lt;span class=&quot;fu&quot;&gt;@Bean&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; Audience &lt;span class=&quot;fu&quot;&gt;audience&lt;/span&gt;() {
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;Audience&lt;/span&gt;();
    }
}
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode xml&quot;&gt;
&lt;code class=&quot;sourceCode xml&quot;&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;?xml&lt;/span&gt; version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;&lt;span class=&quot;kw&quot;&gt;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;beans&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; xmlns=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;http://www.springframework.org/schema/beans&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;       xmlns:xsi=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;       xmlns:aop=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;http://www.springframework.org/schema/aop&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;       xmlns:context=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;http://www.springframework.org/schema/context&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;       xsi:schemaLocation=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;http://www.springframework.org/schema/beans&lt;/span&gt;
&lt;span class=&quot;st&quot;&gt;                           http://www.springframework.org/schema/beans/spring-beans-3.0.xsd&lt;/span&gt;
&lt;span class=&quot;st&quot;&gt;                           http://www.springframework.org/schema/aop&lt;/span&gt;
&lt;span class=&quot;st&quot;&gt;                           http://www.springframework.org/schema/aop/spring-aop-3.0.xsd&lt;/span&gt;
&lt;span class=&quot;st&quot;&gt;                           http://www.springframework.org/schema/context&lt;/span&gt;
&lt;span class=&quot;st&quot;&gt;                           http://www.springframework.org/schema/context/spring-context-3.1.xsd&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;aop:aspectj-autoproxy/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;context:component-scan&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; base-package=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;ch4&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;&amp;lt;/beans&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;创建环绕通知&quot;&gt;创建环绕通知&lt;/h4&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;将被通知的目标方法完全包装起来，就像在一个通知方法中同时编写前置通知和后置通知。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;
&lt;span class=&quot;kw&quot;&gt;package ch4;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;import org.aspectj.lang.ProceedingJoinPoint;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import org.aspectj.lang.annotation.*;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import org.springframework.stereotype.Component;&lt;/span&gt;

&lt;span class=&quot;fu&quot;&gt;@Aspect&lt;/span&gt;
&lt;span class=&quot;fu&quot;&gt;@Component&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; Audience {
    &lt;span class=&quot;fu&quot;&gt;@Pointcut&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;execution(* ch4.Performance.perform(..)) &amp;amp;&amp;amp; ! bean(musicPerformance)&quot;&lt;/span&gt;)
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;performance&lt;/span&gt;() {

    }

    &lt;span class=&quot;fu&quot;&gt;@Around&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;performance()&quot;&lt;/span&gt;)
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;watchPerformance&lt;/span&gt;(ProceedingJoinPoint jp) {
        &lt;span class=&quot;kw&quot;&gt;try&lt;/span&gt; {
            System.&lt;span class=&quot;fu&quot;&gt;out&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;println&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;Silencing cell phones&quot;&lt;/span&gt;);
            System.&lt;span class=&quot;fu&quot;&gt;out&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;println&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;Taking seats&quot;&lt;/span&gt;);
            jp.&lt;span class=&quot;fu&quot;&gt;proceed&lt;/span&gt;();
            System.&lt;span class=&quot;fu&quot;&gt;out&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;println&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;CLAP CLAP CLAP CLAP&quot;&lt;/span&gt;);
        } &lt;span class=&quot;kw&quot;&gt;catch&lt;/span&gt; (Throwable e) {
            System.&lt;span class=&quot;fu&quot;&gt;out&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;println&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;Demanding a refund&quot;&lt;/span&gt;);
        }
    }
}
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;使用&lt;code&gt;Around&lt;/code&gt;注解表示环绕通知，注意需要调用&lt;code&gt;proceed()&lt;/code&gt;方法来调用实际的通知方法。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;处理通知中的参数&quot;&gt;处理通知中的参数&lt;/h4&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;在&lt;code&gt;perform&lt;/code&gt;方法中添加&lt;code&gt;int number&lt;/code&gt;参数表示有多少观众，使用如下切点表达式&lt;code&gt;execution(\* ch4.Performance.perform(int)) &amp;amp;&amp;amp; args(number)&lt;/code&gt;，表示需要匹配&lt;code&gt;perform(int)&lt;/code&gt;型方法并且通知方法的参数名为&lt;code&gt;number&lt;/code&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;MusicPerformance&lt;/code&gt;如下&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;
&lt;span class=&quot;kw&quot;&gt;package ch4;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;import org.springframework.stereotype.Service;&lt;/span&gt;

&lt;span class=&quot;fu&quot;&gt;@Service&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; MusicPerformance &lt;span class=&quot;kw&quot;&gt;implements&lt;/span&gt; Performance {
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;perform&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; number) {
        System.&lt;span class=&quot;fu&quot;&gt;out&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;println&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;perform music, and the audience number is &quot;&lt;/span&gt; + number);
    }
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;Audience&lt;/code&gt;如下&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;
&lt;span class=&quot;kw&quot;&gt;package ch4;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;import org.aspectj.lang.ProceedingJoinPoint;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import org.aspectj.lang.annotation.*;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import org.springframework.stereotype.Component;&lt;/span&gt;

&lt;span class=&quot;fu&quot;&gt;@Aspect&lt;/span&gt;
&lt;span class=&quot;fu&quot;&gt;@Component&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; Audience {
    &lt;span class=&quot;fu&quot;&gt;@Pointcut&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;execution(* ch4.Performance.perform(int)) &amp;amp;&amp;amp; args(number)&quot;&lt;/span&gt;)
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;performance&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; number) {

    }

    &lt;span class=&quot;fu&quot;&gt;@Before&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;performance(int)&quot;&lt;/span&gt;)
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;silenceCellPhones&lt;/span&gt;() {
        System.&lt;span class=&quot;fu&quot;&gt;out&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;println&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;Silencing cell phones&quot;&lt;/span&gt;);
    }

    &lt;span class=&quot;fu&quot;&gt;@Before&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;performance(int)&quot;&lt;/span&gt;)
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;takeSeats&lt;/span&gt;() {
        System.&lt;span class=&quot;fu&quot;&gt;out&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;println&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;Taking seats&quot;&lt;/span&gt;);
    }

    &lt;span class=&quot;fu&quot;&gt;@AfterReturning&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;performance(int)&quot;&lt;/span&gt;)
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;applause&lt;/span&gt;() {
        System.&lt;span class=&quot;fu&quot;&gt;out&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;println&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;CLAP CLAP CLAP CLAP&quot;&lt;/span&gt;);
    }

    &lt;span class=&quot;fu&quot;&gt;@AfterThrowing&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;performance(int)&quot;&lt;/span&gt;)
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;demandRefund&lt;/span&gt;() {
        System.&lt;span class=&quot;fu&quot;&gt;out&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;println&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;Demanding a refund&quot;&lt;/span&gt;);
    }

    &lt;span class=&quot;fu&quot;&gt;@Around&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;performance(int)&quot;&lt;/span&gt;)
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;watchPerformance&lt;/span&gt;(ProceedingJoinPoint jp) {
        &lt;span class=&quot;kw&quot;&gt;try&lt;/span&gt; {
            System.&lt;span class=&quot;fu&quot;&gt;out&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;println&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;Silencing cell phones&quot;&lt;/span&gt;);
            System.&lt;span class=&quot;fu&quot;&gt;out&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;println&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;Taking seats&quot;&lt;/span&gt;);
            jp.&lt;span class=&quot;fu&quot;&gt;proceed&lt;/span&gt;();
            System.&lt;span class=&quot;fu&quot;&gt;out&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;println&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;CLAP CLAP CLAP CLAP&quot;&lt;/span&gt;);
        } &lt;span class=&quot;kw&quot;&gt;catch&lt;/span&gt; (Throwable e) {
            System.&lt;span class=&quot;fu&quot;&gt;out&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;println&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;Demanding a refund&quot;&lt;/span&gt;);
        }
    }
}
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;测试&lt;code&gt;AOPTest&lt;/code&gt;如下&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;
&lt;span class=&quot;kw&quot;&gt;package ch4;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;import org.junit.Test;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import org.junit.runner.RunWith;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import org.springframework.beans.factory.annotation.Autowired;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import org.springframework.test.context.ContextConfiguration;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;import static org.junit.Assert.assertNotNull;&lt;/span&gt;
&lt;span class=&quot;fu&quot;&gt;@RunWith&lt;/span&gt;(SpringJUnit4ClassRunner.&lt;span class=&quot;fu&quot;&gt;class&lt;/span&gt;)
&lt;span class=&quot;fu&quot;&gt;@ContextConfiguration&lt;/span&gt;(locations = &lt;span class=&quot;st&quot;&gt;&quot;classpath*:spring-learning.xml&quot;&lt;/span&gt;)
&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; AOPTest {
    &lt;span class=&quot;fu&quot;&gt;@Autowired&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; Performance performance;

    &lt;span class=&quot;fu&quot;&gt;@Test&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;notNull&lt;/span&gt;() {
        &lt;span class=&quot;fu&quot;&gt;assertNotNull&lt;/span&gt;(performance);
        performance.&lt;span class=&quot;fu&quot;&gt;perform&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;100&lt;/span&gt;);

        System.&lt;span class=&quot;fu&quot;&gt;out&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;println&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;++++++++++++++++++&quot;&lt;/span&gt;);
        performance.&lt;span class=&quot;fu&quot;&gt;perform&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;999&lt;/span&gt;);
        System.&lt;span class=&quot;fu&quot;&gt;out&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;println&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;++++++++++++++++++&quot;&lt;/span&gt;);
    }
}
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;运行结果：&lt;/p&gt;
&lt;blockquote readability=&quot;10&quot;&gt;
&lt;p&gt;Silencing cell phones&lt;br/&gt;Taking seats&lt;br/&gt;Taking seats&lt;br/&gt;Silencing cell phones&lt;br/&gt;perform music, and the audience number is 100&lt;br/&gt;CLAP CLAP CLAP CLAP&lt;br/&gt;CLAP CLAP CLAP CLAP&lt;br/&gt;++++++++++++++++++&lt;br/&gt;Silencing cell phones&lt;br/&gt;Taking seats&lt;br/&gt;Taking seats&lt;br/&gt;Silencing cell phones&lt;br/&gt;perform music, and the audience number is 999&lt;br/&gt;CLAP CLAP CLAP CLAP&lt;br/&gt;CLAP CLAP CLAP CLAP&lt;br/&gt;++++++++++++++++++&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;在xml中声明切面&quot;&gt;在XML中声明切面&lt;/h3&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;除了使用注解方式声明切面外，还可通过&lt;code&gt;XML&lt;/code&gt;方式声明切面。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;前置通知和后置通知&quot;&gt;前置通知和后置通知&lt;/h4&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode xml&quot;&gt;
&lt;code class=&quot;sourceCode xml&quot;&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;?xml&lt;/span&gt; version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;&lt;span class=&quot;kw&quot;&gt;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;beans&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; xmlns=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;http://www.springframework.org/schema/beans&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;       xmlns:p=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;http://www.springframework.org/schema/p&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;       xmlns:xsi=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;       xmlns:aop=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;http://www.springframework.org/schema/aop&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;       xmlns:context=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;http://www.springframework.org/schema/context&quot;&lt;/span&gt;


&lt;span class=&quot;ot&quot;&gt;       xsi:schemaLocation=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;http://www.springframework.org/schema/beans&lt;/span&gt;
&lt;span class=&quot;st&quot;&gt;                           http://www.springframework.org/schema/beans/spring-beans-3.0.xsd&lt;/span&gt;
&lt;span class=&quot;st&quot;&gt;                           http://www.springframework.org/schema/aop&lt;/span&gt;
&lt;span class=&quot;st&quot;&gt;                           http://www.springframework.org/schema/aop/spring-aop-3.0.xsd&lt;/span&gt;
&lt;span class=&quot;st&quot;&gt;                           http://www.springframework.org/schema/context&lt;/span&gt;
&lt;span class=&quot;st&quot;&gt;                           http://www.springframework.org/schema/context/spring-context-3.1.xsd&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;kw&quot;&gt;&amp;lt;aop:aspectj-autoproxy/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;context:component-scan&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; base-package=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;ch4&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;kw&quot;&gt;&amp;lt;aop:config&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;aop:aspect&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; ref=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;audience&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;aop:before&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;                pointcut=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;execution(* ch4.Performance.perform(..))&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;                method=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;silenceCellPhones&quot;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;

            &lt;span class=&quot;kw&quot;&gt;&amp;lt;aop:before&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;                    pointcut=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;execution(* ch4.Performance.perform(..))&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;                    method=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;takeSeats&quot;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;

            &lt;span class=&quot;kw&quot;&gt;&amp;lt;aop:after-returning&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;                    pointcut=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;execution(* ch4.Performance.perform(..))&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;                    method=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;applause&quot;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;

            &lt;span class=&quot;kw&quot;&gt;&amp;lt;aop:after-throwing&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;                    pointcut=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;execution(* ch4.Performance.perform(..))&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;                    method=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;demandRefund&quot;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;

        &lt;span class=&quot;kw&quot;&gt;&amp;lt;/aop:aspect&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/aop:config&amp;gt;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;&amp;lt;/beans&amp;gt;&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;将&lt;code&gt;Audience&lt;/code&gt;注解删除后运行单元测试可得出正确结果；当然上述&lt;code&gt;XML&lt;/code&gt;也有点复杂，可进一步简化。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode xml&quot;&gt;
&lt;code class=&quot;sourceCode xml&quot;&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;?xml&lt;/span&gt; version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;&lt;span class=&quot;kw&quot;&gt;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;beans&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; xmlns=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;http://www.springframework.org/schema/beans&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;       xmlns:p=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;http://www.springframework.org/schema/p&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;       xmlns:xsi=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;       xmlns:aop=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;http://www.springframework.org/schema/aop&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;       xmlns:context=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;http://www.springframework.org/schema/context&quot;&lt;/span&gt;


&lt;span class=&quot;ot&quot;&gt;       xsi:schemaLocation=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;http://www.springframework.org/schema/beans&lt;/span&gt;
&lt;span class=&quot;st&quot;&gt;                           http://www.springframework.org/schema/beans/spring-beans-3.0.xsd&lt;/span&gt;
&lt;span class=&quot;st&quot;&gt;                           http://www.springframework.org/schema/aop&lt;/span&gt;
&lt;span class=&quot;st&quot;&gt;                           http://www.springframework.org/schema/aop/spring-aop-3.0.xsd&lt;/span&gt;
&lt;span class=&quot;st&quot;&gt;                           http://www.springframework.org/schema/context&lt;/span&gt;
&lt;span class=&quot;st&quot;&gt;                           http://www.springframework.org/schema/context/spring-context-3.1.xsd&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;kw&quot;&gt;&amp;lt;aop:aspectj-autoproxy/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;context:component-scan&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; base-package=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;ch4&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;kw&quot;&gt;&amp;lt;aop:config&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;aop:aspect&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; ref=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;audience&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;aop:pointcut&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;                    id=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;performance&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;                    expression=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;execution(* ch4.Performance.perform(..))&quot;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;

            &lt;span class=&quot;kw&quot;&gt;&amp;lt;aop:before&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;                    pointcut-ref=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;performance&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;                    method=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;silenceCellPhones&quot;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;

            &lt;span class=&quot;kw&quot;&gt;&amp;lt;aop:before&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;                    pointcut-ref=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;performance&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;                    method=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;takeSeats&quot;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;

            &lt;span class=&quot;kw&quot;&gt;&amp;lt;aop:after-returning&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;                    pointcut-ref=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;performance&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;                    method=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;applause&quot;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;

            &lt;span class=&quot;kw&quot;&gt;&amp;lt;aop:after-throwing&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;                    pointcut-ref=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;performance&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;                    method=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;demandRefund&quot;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;

        &lt;span class=&quot;kw&quot;&gt;&amp;lt;/aop:aspect&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/aop:config&amp;gt;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;&amp;lt;/beans&amp;gt;&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;声明环绕通知&quot;&gt;声明环绕通知&lt;/h4&gt;
&lt;p&gt;XML如下&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode xml&quot;&gt;
&lt;code class=&quot;sourceCode xml&quot;&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;?xml&lt;/span&gt; version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;&lt;span class=&quot;kw&quot;&gt;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;beans&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; xmlns=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;http://www.springframework.org/schema/beans&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;       xmlns:p=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;http://www.springframework.org/schema/p&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;       xmlns:xsi=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;       xmlns:aop=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;http://www.springframework.org/schema/aop&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;       xmlns:context=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;http://www.springframework.org/schema/context&quot;&lt;/span&gt;


&lt;span class=&quot;ot&quot;&gt;       xsi:schemaLocation=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;http://www.springframework.org/schema/beans&lt;/span&gt;
&lt;span class=&quot;st&quot;&gt;                           http://www.springframework.org/schema/beans/spring-beans-3.0.xsd&lt;/span&gt;
&lt;span class=&quot;st&quot;&gt;                           http://www.springframework.org/schema/aop&lt;/span&gt;
&lt;span class=&quot;st&quot;&gt;                           http://www.springframework.org/schema/aop/spring-aop-3.0.xsd&lt;/span&gt;
&lt;span class=&quot;st&quot;&gt;                           http://www.springframework.org/schema/context&lt;/span&gt;
&lt;span class=&quot;st&quot;&gt;                           http://www.springframework.org/schema/context/spring-context-3.1.xsd&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;kw&quot;&gt;&amp;lt;aop:aspectj-autoproxy/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;context:component-scan&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; base-package=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;ch4&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;kw&quot;&gt;&amp;lt;aop:config&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;aop:aspect&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; ref=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;audience&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;aop:pointcut&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;                    id=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;performance&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;                    expression=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;execution(* ch4.Performance.perform(..))&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;aop:around&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;                pointcut-ref=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;performance&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;                method=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;watchPerformance&quot;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;/aop:aspect&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/aop:config&amp;gt;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;&amp;lt;/beans&amp;gt;&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;运行单元测试，可得正确结果。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;为通知传递参数&quot;&gt;为通知传递参数&lt;/h4&gt;
&lt;p&gt;XML文件如下&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode xml&quot;&gt;
&lt;code class=&quot;sourceCode xml&quot;&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;?xml&lt;/span&gt; version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;&lt;span class=&quot;kw&quot;&gt;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;beans&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; xmlns=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;http://www.springframework.org/schema/beans&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;       xmlns:p=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;http://www.springframework.org/schema/p&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;       xmlns:xsi=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;       xmlns:aop=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;http://www.springframework.org/schema/aop&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;       xmlns:context=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;http://www.springframework.org/schema/context&quot;&lt;/span&gt;


&lt;span class=&quot;ot&quot;&gt;       xsi:schemaLocation=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;http://www.springframework.org/schema/beans&lt;/span&gt;
&lt;span class=&quot;st&quot;&gt;                           http://www.springframework.org/schema/beans/spring-beans-3.0.xsd&lt;/span&gt;
&lt;span class=&quot;st&quot;&gt;                           http://www.springframework.org/schema/aop&lt;/span&gt;
&lt;span class=&quot;st&quot;&gt;                           http://www.springframework.org/schema/aop/spring-aop-3.0.xsd&lt;/span&gt;
&lt;span class=&quot;st&quot;&gt;                           http://www.springframework.org/schema/context&lt;/span&gt;
&lt;span class=&quot;st&quot;&gt;                           http://www.springframework.org/schema/context/spring-context-3.1.xsd&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;kw&quot;&gt;&amp;lt;aop:aspectj-autoproxy/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;context:component-scan&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; base-package=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;ch4&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;kw&quot;&gt;&amp;lt;aop:config&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;aop:aspect&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; ref=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;audience&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;aop:pointcut&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;                    id=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;performance&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;                    expression=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;execution(* ch4.Performance.perform(int)) and args(int)&quot;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;aop:before&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;                pointcut-ref=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;performance&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;                method=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;silenceCellPhones&quot;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;

            &lt;span class=&quot;kw&quot;&gt;&amp;lt;aop:before&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;                    pointcut-ref=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;performance&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;                    method=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;takeSeats&quot;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;

            &lt;span class=&quot;kw&quot;&gt;&amp;lt;aop:after-returning&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;                    pointcut-ref=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;performance&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;                    method=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;applause&quot;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;

            &lt;span class=&quot;kw&quot;&gt;&amp;lt;aop:after-throwing&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;                    pointcut-ref=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;performance&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;                    method=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;demandRefund&quot;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;/aop:aspect&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/aop:config&amp;gt;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;&amp;lt;/beans&amp;gt;&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;运行单元测试，可得正确结果。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;总结&quot;&gt;总结&lt;/h2&gt;
&lt;blockquote readability=&quot;6.7951219512195&quot;&gt;
&lt;p&gt;&lt;code&gt;AOP&lt;/code&gt;是&lt;code&gt;Spring&lt;/code&gt;的核心概念，通过&lt;code&gt;AOP&lt;/code&gt;，我们可以把切面插入到方法执行的周围，通过本篇博文可以大致了解&lt;code&gt;AOP&lt;/code&gt;的使用方法。源码已经上传至&lt;a href=&quot;https://github.com/leesf/springlearning&quot;&gt;github&lt;/a&gt;，欢迎&lt;code&gt;fork and star&lt;/code&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
</description>
<pubDate>Fri, 06 Oct 2017 07:38:00 +0000</pubDate>
<dc:creator>leesf</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/leesf456/p/7631620.html</dc:identifier>
</item>
<item>
<title>侃一侃编译原理的“文法” - my笔触</title>
<link>http://www.cnblogs.com/yuxiuyan/p/7627371.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/yuxiuyan/p/7627371.html</guid>
<description>[unable to retrieve full-text content]如果你翘累了代码，想喝喝咖啡，顺便看点儿可以当佐料的文章那本文应该比较适合现在的你。(•̀ᴗ•́)و ̑̑ 我们一天天都在和代码打交道，但是你了解代码的运行原理么？为什么你的一行代码就能被执行出五花八门的效果嘞？ 其实代码这玩意儿就是一门语言。是的，你可以看成和中文、英文等语言平等的存在。是语言就得</description>
<pubDate>Fri, 06 Oct 2017 07:23:00 +0000</pubDate>
<dc:creator>my笔触</dc:creator>
<dc:identifier>http://www.cnblogs.com/yuxiuyan/p/7627371.html</dc:identifier>
</item>
<item>
<title>Spring REST 与 Zuul 代理 - oopsguy</title>
<link>http://www.cnblogs.com/oopsguy/p/7631552.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/oopsguy/p/7631552.html</guid>
<description>&lt;blockquote readability=&quot;2.0192307692308&quot;&gt;
&lt;p&gt;&lt;a href=&quot;http://www.baeldung.com/spring-rest-with-zuul-proxy&quot; class=&quot;uri&quot;&gt;http://www.baeldung.com/spring-rest-with-zuul-proxy&lt;/a&gt;&lt;br/&gt;&lt;strong&gt;作者：&lt;/strong&gt; Eugen Paraschiv&lt;br/&gt;&lt;strong&gt;译者：&lt;/strong&gt; &lt;a href=&quot;http://oopsguy.com&quot; class=&quot;uri&quot;&gt;http://oopsguy.com&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;概述&quot;&gt;1、概述&lt;/h2&gt;
&lt;p&gt;在本文中，我们将探讨前端应用与单独部署的 REST API 之间的通信。&lt;/p&gt;
&lt;p&gt;本文旨在&lt;strong&gt;解决 CORS 和浏览器的同源策略限制，允许 UI 调用 API，即使它们不是同源&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;基本上，我们将创建两个独立的应用程序 — 一个 UI 应用程序和一个简单的 REST API，我们将使用 UI 应用程序中的 &lt;strong&gt;Zuul 代理&lt;/strong&gt;来代理对 REST API 的调用。&lt;/p&gt;
&lt;p&gt;Zuul 是 Netflix 的一个基于 JVM 的路由和服务端负载均衡器。Spring Cloud 与内嵌式 Zuul 代理可以很好地集成工作 — 本次我们也将使用他们。&lt;/p&gt;
&lt;h2 id=&quot;maven-配置&quot;&gt;2、Maven 配置&lt;/h2&gt;
&lt;p&gt;首先，我们需要添加一个来自 Spring Cloud 的 zuul 支持到我们的 UI 应用程序的 &lt;strong&gt;pom.xml&lt;/strong&gt; 中：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode xml&quot;&gt;
&lt;code class=&quot;sourceCode xml&quot;&gt;&lt;span class=&quot;kw&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.cloud&lt;span class=&quot;kw&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-cloud-starter-zuul&lt;span class=&quot;kw&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;1.0.4.RELEASE&lt;span class=&quot;kw&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;zuul-properties&quot;&gt;3、Zuul Properties&lt;/h2&gt;
&lt;p&gt;接下来，我们需要配置 Zuul，由于我们使用 Spring Boot，我们将在 &lt;strong&gt;application.yml&lt;/strong&gt; 中进行配置：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode yaml&quot;&gt;
&lt;code class=&quot;sourceCode yaml&quot;&gt;&lt;span class=&quot;fu&quot;&gt;zuul:&lt;/span&gt;
  &lt;span class=&quot;fu&quot;&gt;routes:&lt;/span&gt;
    &lt;span class=&quot;fu&quot;&gt;foos:&lt;/span&gt;
      &lt;span class=&quot;fu&quot;&gt;path:&lt;/span&gt; /foos/**
      &lt;span class=&quot;fu&quot;&gt;url:&lt;/span&gt; http://localhost:8081/spring-zuul-foos-resource/foos&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注意：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;我们正在代理我们的资源服务器 &lt;strong&gt;Foos&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;以 &lt;strong&gt;/foos/&lt;/strong&gt; 开头的 UI 的所有请求都将路由到我们的 &lt;strong&gt;Foos&lt;/strong&gt; 资源服务器：&lt;strong&gt;&lt;a href=&quot;http://&quot; class=&quot;uri&quot;&gt;http://&lt;/a&gt; loclahost:8081/spring-zuul-foos-resource/foos/&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;api&quot;&gt;4、API&lt;/h2&gt;
&lt;p&gt;我们的 API 应用程序是一个简单的 Spring Boot 应用程序。&lt;/p&gt;
&lt;p&gt;在本文中，我们考虑将 API 部署至运行在 8081 端口上的服务器中。&lt;/p&gt;
&lt;p&gt;首先定义我们要使用的资源的 DTO：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; Foo {
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;long&lt;/span&gt; id;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; String name;
 
    &lt;span class=&quot;co&quot;&gt;// standard getters and setters&lt;/span&gt;
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;和一个简单的控制器：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;13&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;fu&quot;&gt;@Controller&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; FooController {
 
    &lt;span class=&quot;fu&quot;&gt;@RequestMapping&lt;/span&gt;(method = RequestMethod.&lt;span class=&quot;fu&quot;&gt;GET&lt;/span&gt;, value = &lt;span class=&quot;st&quot;&gt;&quot;/foos/{id}&quot;&lt;/span&gt;)
    &lt;span class=&quot;fu&quot;&gt;@ResponseBody&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; Foo &lt;span class=&quot;fu&quot;&gt;findById&lt;/span&gt;(
      &lt;span class=&quot;fu&quot;&gt;@PathVariable&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;long&lt;/span&gt; id, HttpServletRequest req, HttpServletResponse res) {
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;Foo&lt;/span&gt;(Long.&lt;span class=&quot;fu&quot;&gt;parseLong&lt;/span&gt;(&lt;span class=&quot;fu&quot;&gt;randomNumeric&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;)), &lt;span class=&quot;fu&quot;&gt;randomAlphabetic&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;));
    }
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;ui-应用程序&quot;&gt;5、UI 应用程序&lt;/h2&gt;
&lt;p&gt;我们的 UI 应用程序也是一个简单的 Spring Boot 应用程序。&lt;/p&gt;
&lt;p&gt;在本文中，我们考虑将 UI 部署至运行在 8080 端口上的服务器中。&lt;/p&gt;
&lt;p&gt;我们从 &lt;strong&gt;index.html&lt;/strong&gt; 开始 — 使用了一点 AngularJS：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;16&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;&lt;span class=&quot;kw&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;body&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; ng-app=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;myApp&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; ng-controller=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;mainCtrl&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;script&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; src=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;angular.min.js&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;script&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; src=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;angular-resource.min.js&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
 
&lt;span class=&quot;kw&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; app &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;angular&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;module&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'myApp'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; [&lt;span class=&quot;st&quot;&gt;&quot;ngResource&quot;&lt;/span&gt;])&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
 
&lt;span class=&quot;va&quot;&gt;app&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;controller&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'mainCtrl'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt;($scope&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;$resource&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;$http) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;va&quot;&gt;$scope&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;foo&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;dt&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;sample foo&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;};&lt;/span&gt;
    &lt;span class=&quot;va&quot;&gt;$scope&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;foos&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;$resource&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;/foos/:fooId&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,{&lt;/span&gt;&lt;span class=&quot;dt&quot;&gt;fooId&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'@id'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
     
    &lt;span class=&quot;va&quot;&gt;$scope&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;getFoo&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;va&quot;&gt;$scope&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;foo&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;$scope&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;foos&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;get&lt;/span&gt;(&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;dt&quot;&gt;fooId&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;$scope&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;foo&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;  
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt; &lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;    &amp;lt;h1&amp;gt;Foo Details&amp;lt;/h1&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;span&lt;span class=&quot;op&quot;&gt;&amp;gt;{{&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;foo&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;}}&amp;lt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/span&amp;gt;&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;    &amp;lt;span&amp;gt;{{foo.name}}&amp;lt;/span&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;a href&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;#&quot;&lt;/span&gt; ng&lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;click&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;getFoo()&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;New Foo&lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/a&amp;gt;&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;&amp;lt;/div&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;&amp;lt;/html&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这里最重要的地方是我们如何使用相对 URL 来访问 API！&lt;/p&gt;
&lt;p&gt;请记住，API 应用程序未部署在与 UI 应用程序相同的服务器上，&lt;strong&gt;因此无法通过相对 URL 工作&lt;/strong&gt;，如果没有使用代理，该 UI 应用程序将无法正常工作。&lt;/p&gt;
&lt;p&gt;然而，如果使用代理服务器，我们可以通过 Zuul 代理来访问 &lt;strong&gt;Foo&lt;/strong&gt; 资源，该代理配置为将这些请求路由到实际部署 API 的位置。&lt;/p&gt;
&lt;p&gt;最后，引导应用程序：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;fu&quot;&gt;@EnableZuulProxy&lt;/span&gt;
&lt;span class=&quot;fu&quot;&gt;@SpringBootApplication&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; UiApplication &lt;span class=&quot;kw&quot;&gt;extends&lt;/span&gt; SpringBootServletInitializer {
 
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;main&lt;/span&gt;(String[] args) {
        SpringApplication.&lt;span class=&quot;fu&quot;&gt;run&lt;/span&gt;(UiApplication.&lt;span class=&quot;fu&quot;&gt;class&lt;/span&gt;, args);
    }
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;除了简单的引导注解，请注意，我们使用 Zuul 代理的注解启用方式，这非常酷，而且干净简洁。&lt;/p&gt;
&lt;h2 id=&quot;测试路由&quot;&gt;6、测试路由&lt;/h2&gt;
&lt;p&gt;现在，让我们来测试 UI 应用程序，如下所示：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;fu&quot;&gt;@Test&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;whenSendRequestToFooResource_thenOK&lt;/span&gt;() {
    Response response = RestAssured.&lt;span class=&quot;fu&quot;&gt;get&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;http://localhost:8080/foos/1&quot;&lt;/span&gt;);
  
    &lt;span class=&quot;fu&quot;&gt;assertEquals&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;200&lt;/span&gt;, response.&lt;span class=&quot;fu&quot;&gt;getStatusCode&lt;/span&gt;());
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;自定义-zuul-filter&quot;&gt;7、自定义 Zuul Filter&lt;/h2&gt;
&lt;p&gt;有多个 &lt;a href=&quot;https://github.com/spring-cloud/spring-cloud-netflix/tree/master/spring-cloud-netflix-core/src/main/java/org/springframework/cloud/netflix/zuul/filters&quot;&gt;Zuul 过滤器&lt;/a&gt;可以使用，我们也可以创建自己自定义的过滤器：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;fu&quot;&gt;@Component&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; CustomZuulFilter &lt;span class=&quot;kw&quot;&gt;extends&lt;/span&gt; ZuulFilter {
 
    &lt;span class=&quot;fu&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; Object &lt;span class=&quot;fu&quot;&gt;run&lt;/span&gt;() {
        RequestContext ctx = RequestContext.&lt;span class=&quot;fu&quot;&gt;getCurrentContext&lt;/span&gt;();
        ctx.&lt;span class=&quot;fu&quot;&gt;addZuulRequestHeader&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;Test&quot;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&quot;TestSample&quot;&lt;/span&gt;);
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;;
    }
 
    &lt;span class=&quot;fu&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;shouldFilter&lt;/span&gt;() {
       &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;true&lt;/span&gt;;
    }
    &lt;span class=&quot;co&quot;&gt;// ...&lt;/span&gt;
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这个简单的过滤器只是在请求中添加了一个名为 &lt;strong&gt;Test&lt;/strong&gt; 的头部 — 当然，我们可以根据我们需要的复杂程度来扩充我们的请求。&lt;/p&gt;
&lt;h2 id=&quot;测试自定义-zuul-filter&quot;&gt;8、测试自定义 Zuul Filter&lt;/h2&gt;
&lt;p&gt;最后，让我们测试以确保我们自定义的过滤器能够正常工作 — 首先我们将在 &lt;strong&gt;Foos&lt;/strong&gt; 资源服务器上修改 &lt;strong&gt;FooController&lt;/strong&gt;：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;14&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;fu&quot;&gt;@Controller&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; FooController {
 
    &lt;span class=&quot;fu&quot;&gt;@GetMapping&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;/foos/{id}&quot;&lt;/span&gt;)
    &lt;span class=&quot;fu&quot;&gt;@ResponseBody&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; Foo &lt;span class=&quot;fu&quot;&gt;findById&lt;/span&gt;(
      &lt;span class=&quot;fu&quot;&gt;@PathVariable&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;long&lt;/span&gt; id, HttpServletRequest req, HttpServletResponse res) {
        &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (req.&lt;span class=&quot;fu&quot;&gt;getHeader&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;Test&quot;&lt;/span&gt;) != &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;) {
            res.&lt;span class=&quot;fu&quot;&gt;addHeader&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;Test&quot;&lt;/span&gt;, req.&lt;span class=&quot;fu&quot;&gt;getHeader&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;Test&quot;&lt;/span&gt;));
        }
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;Foo&lt;/span&gt;(Long.&lt;span class=&quot;fu&quot;&gt;parseLong&lt;/span&gt;(&lt;span class=&quot;fu&quot;&gt;randomNumeric&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;)), &lt;span class=&quot;fu&quot;&gt;randomAlphabetic&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;));
    }
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;现在，让我们开始测试：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;fu&quot;&gt;@Test&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;whenSendRequest_thenHeaderAdded&lt;/span&gt;() {
    Response response = RestAssured.&lt;span class=&quot;fu&quot;&gt;get&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;http://localhost:8080/foos/1&quot;&lt;/span&gt;);
  
    &lt;span class=&quot;fu&quot;&gt;assertEquals&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;200&lt;/span&gt;, response.&lt;span class=&quot;fu&quot;&gt;getStatusCode&lt;/span&gt;());
    &lt;span class=&quot;fu&quot;&gt;assertEquals&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;TestSample&quot;&lt;/span&gt;, response.&lt;span class=&quot;fu&quot;&gt;getHeader&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;Test&quot;&lt;/span&gt;));
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;结论&quot;&gt;9、结论&lt;/h2&gt;
&lt;p&gt;在这篇文章中，我们主要使用了 Zuul 将来自 UI 应用程序的请求路由到 REST API。我们成功地解决了 CORS 和同源策略，我们还定制和扩充了 HTTP 请求。&lt;/p&gt;
&lt;p&gt;本教程的完整实现可以在&lt;a href=&quot;https://github.com/eugenp/tutorials/tree/master/spring-zuul&quot;&gt;项目 GitHub&lt;/a&gt; 中找到 — 这是一个基于 Maven 的项目，所以应该很容易导入和运行。&lt;/p&gt;
&lt;h2 id=&quot;原文项目示例代码&quot;&gt;原文项目示例代码&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/eugenp/tutorials/tree/master/spring-zuul&quot; class=&quot;uri&quot;&gt;https://github.com/eugenp/tutorials/tree/master/spring-zuul&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Fri, 06 Oct 2017 06:52:00 +0000</pubDate>
<dc:creator>oopsguy</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/oopsguy/p/7631552.html</dc:identifier>
</item>
<item>
<title>Net知识图谱 - zyv</title>
<link>http://www.cnblogs.com/wangzhiyong/p/7631534.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/wangzhiyong/p/7631534.html</guid>
<description>[unable to retrieve full-text content]对于Web系统开发来说，Net其实也是有好多知识点需要学的，虽然目前JAVA是主流，就业市场比较大，但Net也在积极的拥抱开源，大Net Core 2 出来了，这无疑给Net开发者带来更大的希望，好了，以下是自己画的知识图，给正在找工作的自己一个时间梳理下，同时也希望给你带来些许帮助，第一次画并鉴于</description>
<pubDate>Fri, 06 Oct 2017 06:40:00 +0000</pubDate>
<dc:creator>zyv</dc:creator>
<dc:identifier>http://www.cnblogs.com/wangzhiyong/p/7631534.html</dc:identifier>
</item>
<item>
<title>Linux系统centOS7在虚拟机下的安装及XShell软件的配置 - 小火柴的蓝色理想</title>
<link>http://www.cnblogs.com/xiaohuochai/p/7631134.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/xiaohuochai/p/7631134.html</guid>
<description>&lt;h2&gt;前面的话&lt;/h2&gt;
&lt;p&gt;　　本文将详细介绍Linux系统centOS7在虚拟机下的安装&lt;/p&gt;

&lt;h3&gt;准备工作&lt;/h3&gt;
&lt;p&gt;【系统下载】&lt;/p&gt;
&lt;p&gt;　　在安装centOS7之前，首先在&lt;a href=&quot;http://isoredirect.centos.org/centos/7/isos/x86_64/CentOS-7-x86_64-DVD-1708.iso&quot; target=&quot;_blank&quot;&gt;官网&lt;/a&gt;下载合适的版本&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/740839/201710/740839-20171006102000990-38652452.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;p&gt;　　然后，选择一个链接下载即可&lt;/p&gt;
&lt;p&gt;【虚拟机配置】&lt;/p&gt;
&lt;p&gt;　　接下来，需要对虚拟机进行配置&lt;/p&gt;
&lt;p&gt;　　1、新建虚拟机&lt;/p&gt;
&lt;p&gt;　　打开虚拟机VMware后，点击新建虚拟机&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/740839/201710/740839-20171006102309271-26945348.png&quot; alt=&quot;&quot;/&gt;、&lt;/div&gt;
&lt;p&gt;　　2、典型配置&lt;/p&gt;
&lt;p&gt;　　出现如下画面后，选择典型，单击下一步&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/740839/201710/740839-20171006102430427-298121878.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;p&gt;　　3、创建空白硬盘&lt;/p&gt;
&lt;p&gt;　　选择“稍后安装操作系统”，点击“下一步”&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/740839/201710/740839-20171006102636724-1531745667.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;p&gt;　　4、选择操作系统版本&lt;/p&gt;
&lt;p&gt;　　“客户机操作系统”选择“Linux”，“版本”选择“CentOS 64位”，然后点击“下一步”&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/740839/201710/740839-20171006102625052-1142900534.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;p&gt;　　5、安装位置&lt;/p&gt;
&lt;p&gt;　　输入自定义的“虚拟机名称”，点击“浏览”按钮，选择虚拟机文件保存的位置，点击“下一步”&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/740839/201710/740839-20171006102806693-125418550.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;p&gt;　　6、磁盘容量&lt;/p&gt;
&lt;p&gt;　　设置最大磁盘容量为20G，并设置将磁盘拆分为多个文件，点击“下一步”&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/740839/201710/740839-20171006102937802-885780776.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;p&gt;　　7、自定义硬件&lt;/p&gt;
&lt;p&gt;　　出现如下界面后，点击自定义硬件，来配置硬件&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/740839/201710/740839-20171006103047255-14535963.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;p&gt;　　8、网卡设置&lt;/p&gt;
&lt;p&gt;　　将选项卡切换到网络适配器，将网络模式设置为桥接模式，并勾选复制物理网络连接状态&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/740839/201710/740839-20171006103302990-1031425201.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;p&gt;　　9、ISO设置&lt;/p&gt;
&lt;p&gt;　　将选项卡切换到CD/DVD(IDE)，选择使用ISO映像文件，找到下载的ISO文件地址&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/740839/201710/740839-20171006103619880-107272602.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;p&gt;　　10、点击完成即可&lt;/p&gt;

&lt;h3&gt;系统安装&lt;/h3&gt;
&lt;p&gt;　　1、开启虚拟机电源&lt;/p&gt;
&lt;p&gt;　　点击开启此虚拟机按钮&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/740839/201710/740839-20171006104122552-467703393.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;p&gt;　　2、选择安装&lt;/p&gt;
&lt;p&gt;　　鼠标移动到虚拟机显示的区域，等鼠标变成手形时点击左键，使虚拟机获得焦点。使用键盘的上下箭头按钮，选择“Install CentOS 7”选项，字体颜色为白色为选中，按回车键进行安装&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/740839/201710/740839-20171006104307521-1700624496.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;p&gt;　　3、语言选择&lt;/p&gt;
&lt;p&gt;　　接下来会显示语言选择界面，选择简体中文，并点击继续&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/740839/201710/740839-20171006104525240-1113585139.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;p&gt;　　4、安装信息&lt;/p&gt;
&lt;p&gt;　　接下来，进入安装信息摘要界面，点击软件选择&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/740839/201710/740839-20171006104819943-192048473.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;p&gt;　　5、软件选择&lt;/p&gt;
&lt;p&gt;　　如果用于云服务器的配置，最好选择基础设施服务器，点击完成&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/740839/201710/740839-20171006104919318-1066946475.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;p&gt;　　6、安装位置&lt;/p&gt;
&lt;p&gt;　　回到安装信息摘要界面，点击安装位置&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/740839/201710/740839-20171006105009958-1431110332.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;p&gt;　　7、自动分区&lt;/p&gt;
&lt;p&gt;　　选择本地标准磁盘，并选择自动分区，点击完成&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/740839/201710/740839-20171006105058177-1056648443.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;p&gt;　　8、网络和主机名&lt;/p&gt;
&lt;p&gt;　　回到安装信息摘要界面，点击网络和主机名&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/740839/201710/740839-20171006105229740-966042240.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;p&gt;　　9、网络配置&lt;/p&gt;
&lt;p&gt;　　将网络从关闭切换为打开后，点击完成&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/740839/201710/740839-20171006105340115-1600566023.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;p&gt;　　10、开始安装&lt;/p&gt;
&lt;p&gt;　　回到安装信息摘要界面后，点击开始安装即可&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/740839/201710/740839-20171006105422427-715380166.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;p&gt;　　11、用户设置&lt;/p&gt;
&lt;p&gt;　　进入用户设置界面，ROOT密码不能立即设置，需要等到底部安装条进度完成时才可以&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/740839/201710/740839-20171006105635458-1943141339.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;p&gt;　　12、ROOT密码&lt;/p&gt;
&lt;p&gt;　　点击ROOT密码进入ROOT密码界面，输入密码后，点击完成&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/740839/201710/740839-20171006105913396-1582942594.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;p&gt;　　13、自动安装&lt;/p&gt;
&lt;p&gt;　　返回该界面后，耐心等待系统的安装&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/740839/201710/740839-20171006110030240-117052712.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;p&gt;　　12、安装完成&lt;/p&gt;
&lt;p&gt;　　安装完成后，出现如下界面，点击重启&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/740839/201710/740839-20171006110219255-866418051.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;p&gt;　　13、自动进入&lt;/p&gt;
&lt;p&gt;　　重启后，会出现两个操作系统供选择，可以选择第一项，也可以等待一段时间后，自动进入第一项。&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/740839/201710/740839-20171006122626927-498454653.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;p&gt;　　14、输入用户名、密码&lt;/p&gt;
&lt;p&gt;　　进入后，输入用户名、密码。用户名为root，密码为自己设置的密码&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/740839/201710/740839-20171006110629302-694017223.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;p&gt;　　　15、输入ifconfig来查看该Linux所在主机的IP地址。&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/740839/201710/740839-20171006110754302-1806700535.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;p&gt;　　至此，Linux系统安装完成，也可以正常上网&lt;/p&gt;

&lt;h3&gt;XShell配置&lt;/h3&gt;
&lt;p&gt;　　接下来，进行xshell的配置，通过xshell来远程连接该主机。由于xshell软件安装较简单，此处就不再赘述&lt;/p&gt;
&lt;p&gt;　　1、打开软件后，点击文件下的新建，来新建连接&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/740839/201710/740839-20171006111040771-1099361318.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;p&gt;　　2、配置&lt;/p&gt;
&lt;p&gt;　　名称为自定义的名称，主机地址输入Linux系统下通过ifconfig获得的IP地址，端口号保持22，点击确定&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/740839/201710/740839-20171006111250755-2022018897.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;p&gt;　　3、连接&lt;/p&gt;
&lt;p&gt;　　然后，出现如下窗口，选中刚才新建的会话名称，点击连接&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/740839/201710/740839-20171006111350036-1001169718.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;p&gt;　　4、输入用户名root&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/740839/201710/740839-20171006111515849-616484993.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;p&gt;　　5、输入密码&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/740839/201710/740839-20171006111540411-1202584921.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;p&gt;　　6、连接成功后，出现如下界面&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/740839/201710/740839-20171006111627943-1619350474.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;p&gt;　　这样，就可以通过Xshell软件来对服务器进行远程操作了&lt;/p&gt;

&lt;h3&gt;常见问题&lt;/h3&gt;
&lt;p&gt;　　问题：centOS7使用setup没有网络配置选项&lt;/p&gt;
&lt;p&gt;　　解释：centOS 7里面，setup已经没有网络设置的功能了。要进行网络配置非常简单，在安装界面已经有过截图，只要将网络连接从关闭切换到开启即可&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/740839/201710/740839-20171006105340115-1600566023.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;p&gt;　　当然，也可以通过nmtui来安装&lt;/p&gt;
&lt;p&gt;　　1、使用nmtui命令，进入网络配置&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/740839/201710/740839-20171006112720271-582250533.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;p&gt;　　2、根据界面，点编辑，进入&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/740839/201710/740839-20171006112740615-1209053589.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;p&gt;　　3、设置为自动获取&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/740839/201710/740839-20171006112844318-429934669.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;p&gt;　　4、点击back回到网络编辑界面，然后激活这个链接&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/740839/201710/740839-20171006112935552-1029359100.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;

</description>
<pubDate>Fri, 06 Oct 2017 03:31:00 +0000</pubDate>
<dc:creator>小火柴的蓝色理想</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/xiaohuochai/p/7631134.html</dc:identifier>
</item>
<item>
<title>.Net 内存对象分析 - Eric zhou</title>
<link>http://www.cnblogs.com/tianqing/p/7630636.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/tianqing/p/7630636.html</guid>
<description>&lt;p&gt;在生产环境中，通过运行日志我们会发现一些异常问题，此时，我们不能直接拿VS远程到服务器上调试，同时日志输出的信息无法百分百反映内存中对象的状态，比如说我们想查看进程中所有的Socket连接状态、服务路由信息等等。&lt;/p&gt;
&lt;p&gt;即：&lt;strong&gt;如何分析.Net 运行时内存对象？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;所以，今天我们推荐.Net进阶必备神器：&lt;strong&gt;Windbg，基于Windbg分析内存中对象的状态。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;还是以实际场景为例吧，这样可以更加贴合实际应用，同时更有借鉴意义。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;业务场景：&lt;/strong&gt;分布式环境下，各个服务容器进程中缓存了各个服务的Socket连接信息，方便运行时服务间相互访问。但是网络是偶尔要抖动的，在抖动的一瞬间，很多Socket连接便中断了，服务调用方收到的异常信息便是：连接已中断等。&lt;/p&gt;
&lt;p&gt;如何快速定位到哪些Socket连接是中断的？这些中断的Socket连接是连接的哪些服务器、端口？这些信息可以帮助我们分析具体的网络问题，同时做一些程序上的补偿：连接重建。一个目标，保持程序的高可用性！&lt;/p&gt;
&lt;p&gt;那么，请出我们今天的主角：Windbg，微软的官方介绍：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://windbg.org/&quot; target=&quot;_blank&quot;&gt;http://windbg.org/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;进一步说，我们需要抓取指定进程某一瞬间的内存镜像，然后使用Windbg分析内存中各种对象、线程、线程池、析构队列、堆、CPU内核时间片等的状态。&lt;/p&gt;
&lt;p&gt;因此，&lt;strong&gt;第一步，我们需要对要进行内存分析的进程，抓取一个Full Dump文件：内存镜像文件。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;任务管理器-&amp;gt;选择进程-&amp;gt;创建转储文件&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/23525/201710/23525-20171006100317552-1726527650.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;系统会将Dump文件存储在指定的目录，这个目录需要拷贝一下，以备用。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第二步，从下面路径下载并安装Windbg&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://developer.microsoft.com/en-us/windows/hardware/download-windbg&quot; target=&quot;_blank&quot;&gt;https://developer.microsoft.com/en-us/windows/hardware/download-windbg&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/23525/201710/23525-20171006100606005-539791247.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;请根据操作系统的位数，选择X86或者X64。这里我们用的64位操作系统，选择的Windbg（X64）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第三步：Ctrl+D，打开刚才抓取的Dump文件&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/23525/201710/23525-20171006100912443-171483632.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/23525/201710/23525-20171006101137240-2074762295.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第四步：加载调试用的SOS.dll: .loadby sos clr&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
.loadby sos clr
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/23525/201710/23525-20171006101411427-972600252.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第五步：查看内存中指定类型的对象&lt;/strong&gt; &lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
!dumpheap -Type Socket
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这里的Socket是具体的类型，我们要查看Socket连接状态，所以类型是Socket&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/23525/201710/23525-20171006102118255-346627617.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这里的Header中MT=Method Table&lt;/p&gt;
&lt;p&gt;我们需要用的MT：00007ffafe50d700&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第六步，查看内存所有所有的Socket对象的地址：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
!dumpheap -mt 00007ffafe50d700
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/23525/201710/23525-20171006102501568-1516096570.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;输出结果中，第一列是某一个Socket对象的内存地址&lt;/p&gt;
&lt;p&gt;此时，我们可以使用下面的命令，随机查看一个Socket对象的信息：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
!&lt;span&gt;do&lt;/span&gt; 000001b2d188ae00
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;!do 的意思：!dumpObj &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/23525/201710/23525-20171006102803818-913129849.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; 那么问题来了，几百个Socket对象，如果一个一个！do查看，这工作量太大了! 当然不能这么干，Windbg有.foreach命令&lt;/p&gt;
&lt;p&gt; 搜索Debugging help.chm文档，.foreach给了个样例：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
.foreach /f ( place &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;g:\myfile.txt&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;) { dds place } 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;即，循环遍历一个文本文件，对每一行数据，执行一个命令操作。&lt;/p&gt;
&lt;p&gt;好，我们回到我们上一步的输出中：每个Socket对象的地址列表，我们拷贝出来，用文本编辑工具只取出第一列（Socket地址列），保存成1.txt&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第七步：循环遍历查看每个内存对象&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
.foreach /f (adr &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;C:\1.txt&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;) {!&lt;span&gt;do&lt;/span&gt; adr}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/23525/201710/23525-20171006103918927-1331779786.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;将所有的输出，拷贝到文本编辑器中，搜索查询指定的属性，例如m_IsConnected=0， 即可找出连接断开的Socket对象，然后进一步用!gcroot 查看这个对象的引用关系，再一步一步看各个引用对象的信息就可以大致分析了。&lt;/p&gt;

&lt;p&gt;以上就是.Net 内存对象分析的整个过程，分享给大家。&lt;/p&gt;

&lt;p&gt;周国庆&lt;/p&gt;
&lt;p&gt;2017/10/06&lt;/p&gt;
</description>
<pubDate>Fri, 06 Oct 2017 02:42:00 +0000</pubDate>
<dc:creator>Eric zhou</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/tianqing/p/7630636.html</dc:identifier>
</item>
<item>
<title>MySQL innodb引擎下根据.frm和.ibd文件恢复表结构和数据 - zhu小伍</title>
<link>http://www.cnblogs.com/zhujunxiong/p/7631001.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/zhujunxiong/p/7631001.html</guid>
<description>&lt;p&gt;记录通过.frm和.ibd文件恢复数据到本地&lt;/p&gt;
&lt;p&gt;.frm文件：保存了每个表的元数据，包括表结构的定义等；&lt;/p&gt;
&lt;p&gt;.ibd文件：InnoDB引擎开启了独立表空间(my.ini中配置innodb_file_per_table = 1)产生的存放该表的数据和索引的文件。&lt;/p&gt;
&lt;p&gt;以actclss表为例，结构如下&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/761322/201710/761322-20171006093529865-2108695675.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;1、安装相同版本的mysql；&lt;/p&gt;
&lt;p&gt;2、找回表结构（若有表结构，直接导入表即可）&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;建立同名的表（InnoDB），随意一个字段即可&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;             &lt;img src=&quot;http://images2017.cnblogs.com/blog/761322/201710/761322-20171006094614833-1421304717.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;关闭mysql服务，用需要恢复的.frm文件覆盖新生成的.frm文件。接着修改my.ini配置innodb_force_recovery = 6进入恢复模式。启动mysql。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;             &lt;img src=&quot;http://images2017.cnblogs.com/blog/761322/201710/761322-20171006094707943-1091457173.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;启动mysql，desc actcalss。我这里直接出现了表结构。若没有，查询日志，会提示该表列数。注释innodb_force_recovery = 6，建立相同列数的表。重复以上步骤，会得到表结构。&lt;/li&gt;
&lt;li&gt;导出结构，删除表，导入表结构。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;3、.ibd文件包含tablespace id，所以需要修改恢复数据.ibd文件的tablespace id和新建立的相同。可使用winHex（编辑16进制）。打开新建的.ibd文件，得到tablespace id。&lt;/p&gt;
&lt;p&gt;          &lt;img src=&quot;http://images2017.cnblogs.com/blog/761322/201710/761322-20171006095753927-1063367171.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;4、打开需恢复的.ibd文件，修改为 00 03。&lt;/p&gt;
&lt;p&gt;5、停止mysql服务，保证innodb_force_recovery = 6。替换.ibd文件。启动mysql。数据和结构都恢复了。可以导出数据和结构。&lt;/p&gt;

&lt;p&gt;注意：&lt;/p&gt;
&lt;p&gt;1、数据量大时，查询时mysql会异常停止服务，可修改my.ini配置或使用程序分批导出；&lt;/p&gt;
&lt;p&gt;2、.ibd文件过大时，winHex修改文件后无法保存，此时可使用linux的vim进行16进制编辑和保存。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;vim actcalss.ibd -b 二进制的方式打开 （文件过大时，需耐心等待一会儿）&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;  &lt;img src=&quot;http://images2017.cnblogs.com/blog/761322/201710/761322-20171006101840052-538413722.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;在vim模式下，输入 :%!xxd 进行16进制编辑&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;  &lt;img src=&quot;http://images2017.cnblogs.com/blog/761322/201710/761322-20171006102004458-1315011710.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;编辑完后，使用 :%!xxd -r 转换为二进制&lt;/li&gt;
&lt;li&gt;:wq!保存即可&lt;/li&gt;
&lt;/ul&gt;</description>
<pubDate>Fri, 06 Oct 2017 02:23:00 +0000</pubDate>
<dc:creator>zhu小伍</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/zhujunxiong/p/7631001.html</dc:identifier>
</item>
<item>
<title>Python数据分析(二): Numpy技巧 (2/4) - solenovex</title>
<link>http://www.cnblogs.com/cgzl/p/7630972.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/cgzl/p/7630972.html</guid>
<description>&lt;div readability=&quot;9&quot;&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;numpy&lt;/strong&gt;&lt;/span&gt;、pandas、matplotlib（+seaborn）是python数据分析/机器学习的基本工具。&lt;/p&gt;
&lt;p&gt;numpy的内容特别丰富，我这里只能介绍一下比较常见的方法和属性。&lt;/p&gt;

&lt;/div&gt;

&lt;p&gt;我一共准备了&lt;strong&gt;numpy技巧4篇文章&lt;/strong&gt;，这是&lt;strong&gt;第二部分&lt;/strong&gt;，剩余两部分会在10.1假期内完成。&lt;/p&gt;
&lt;p&gt;下面就是numpy技巧的第二部分：由于直接再这里添加jupyter notebook源码的话变形比较厉害，所以还是直接上图吧，请看：&lt;/p&gt;

&lt;div&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/986268/201710/986268-20171006101823849-1263989826.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;div&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/986268/201710/986268-20171006102001333-2057264297.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
</description>
<pubDate>Fri, 06 Oct 2017 02:20:00 +0000</pubDate>
<dc:creator>solenovex</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/cgzl/p/7630972.html</dc:identifier>
</item>
<item>
<title>.Neter玩转Linux系列之一：初识Linux - 菠萝吹雪—Code</title>
<link>http://www.cnblogs.com/runningsmallguo/p/7630422.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/runningsmallguo/p/7630422.html</guid>
<description>&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;（1）首先我们欣赏一下，曾经的微软是如何看待Linux的，是不是很惊讶，微软还是很可爱的(#^.^#)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/896449/201710/896449-20171006002743193-1055012526.png&quot; alt=&quot;&quot; width=&quot;533&quot; height=&quot;304&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;如今的微软看待Linux的态度：有人说微软技术那么厉害，难道微软就不能搞出一套比Linux还牛的Windows？可以肯定的回答：不能，因为生态。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;这就是为什么“microsoft love linux”？这就是为什么Windows 10 中都有Linux子系统。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/896449/201710/896449-20171006003938490-771282655.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/896449/201710/896449-20171006003822099-538813670.png&quot; alt=&quot;&quot; width=&quot;523&quot; height=&quot;318&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; 随着.net core的推出绝对不是让我们在Windows上玩的。特别是有工作经验的.net er，需要快速适应这种变化，不然这是个危险的信号。.net正在进行一场革命，革的不好就没命了，微软都已经拥抱Linux了，你还在坚持什么呢？下面我们就进入到Linux的世界。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;（2）linux是一个开源、免费的操作系统，其稳定性、安全性、 处理多并发已经得到业界的认可，目前很多中型，大型甚至 是巨型项目都在使用linux。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;（3）.net core的到来使我们neter不得不去学习Linux&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;好了，说了这么多，还是希望我们.neter好好学习一下Linux，如果你非要在Windows上玩，算我没说。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;　　（1）在进入Linux世界之前，我们先要了解Linux的历史：&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;1999年，IBM宣布与Redhat公司建立伙伴关系，以确保Redhat在IBM机器上 正确运行。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;1999.3月IBM、Compaq和Novell宣布投资Redhat公司，以前一直对Linux持 否定态度的Oracle公司也宣布投资。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;2000年初始，Sun公司在Linux的压力下宣布Solaris8降低售价。事实上Linux 对Sun造成的冲击远比对Windows来得更大。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;2001年IBM则决定投入10亿美元扩大Linux系统的运用，此举犹如一针强心剂， 令华尔街的投资者们闻风而动。8月红色代码爆发，引得许多站点纷纷从wind ows操作系统转向linux操作系统 2002年是Linux企业化的一年。2月，微软公司迫于各洲政府的压力，宣布扩 大公开代码行动，这可是Linux开源带来的深刻影响的结果。3月，内核开发 者宣布新的Linux系统支持64位的计算机&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;2003年1月，NEC宣布将在其手机中使用Linux操作系统，代表着Linux成功 进军手机领域。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;2004年六月的统计报告显示在世界500强超级计算机系统中，使用Linux操作 系统的已经占到了280席，抢占了原本属于各种Unix的份额。9月HP开始网罗 Linux内核代码人员，以影响新版本的内核朝对HP有利的方式发展，而IBM则 准备推出OpenPower服务器，仅运行Linux系统。 国内baidu,google,sohu.sina...中石油，中石化..中国电信，移动..证券金融行 业，都在使用linux/unix操作系统。&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　（2）Linux的特点&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　• 免费、开源&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　• 支持多线程、多用户&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　• 安全性好&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　• 对内存和文件管理优越&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　• Linux只需要4M内存--》可以嵌入式开发&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　缺点：操作相对困难&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　（3）Linux的诞生过程&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/896449/201710/896449-20171006013114302-1967259153.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;（4）什么是Linux&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;世界上不仅只有一个Windows操作系统，还有Linux、mac、Unix等操作系统。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;桌面操作系统下Windows是霸主，而Linux的桌面操作系统用的人很少，因为Windows有的很多软件在Linux下没有或者很弱；服务器操作系统则反之。Linux有一个强大的服务器软件生态系统：Docker、Redis、MySQL、Nginx、Hadoop等等。要特别注意：Linux上是区分大小写的！！！&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;（1）安装虚拟机（VirtualBox）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;地址：https://www.virtualbox.org/&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/896449/201710/896449-20171006014156240-132368690.png&quot; alt=&quot;&quot; width=&quot;645&quot; height=&quot;287&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;一路下一步就行。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;安装成功，之后，打开虚拟机，新建一个虚拟机：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/896449/201710/896449-20171006014335411-1091560086.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/896449/201710/896449-20171006014425661-1941490749.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;注意：新建时 的前提，已经下载好了Ubuntu16.04-x64，在填写名字的时候，会自动识别你的操作系统是64位的还是32位的，然后，点击下一步。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/896449/201710/896449-20171006014646521-551546448.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;建议设置2G，这样更流畅。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/896449/201710/896449-20171006014803724-140817076.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/896449/201710/896449-20171006014836255-598932647.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/896449/201710/896449-20171006014857833-1156036000.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/896449/201710/896449-20171006015019474-2134450048.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/896449/201710/896449-20171006015316615-148332036.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;右键，选择设置--》存储--》没有光盘，在属性右边选择对应的Ubuntu镜像。点击OK即可。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Ubuntu下载地址：http://cn.ubuntu.com/download/&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/896449/201710/896449-20171006015231771-357073581.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; 安装的过程我就不写了，这不是我们的重点。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;（2）Linux第一次接触&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;shutdown    –h    now   立该进行关机

shutdown    –r     now  现在重新启动计算机

reboot                   现在重新启动计算机&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;用户登录：&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;span&gt;登录时尽量少用root帐号登录，因为它是系统管理员，最大的权限，避免操作失误。可以利用普通用户登录，登录后再 &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;用”su -’命令来切换成系统管理员身份。如果是第一次使用Ubuntu时，需要设置root的密码，如下图所示：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/896449/201710/896449-20171006020516786-552065299.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/896449/201710/896449-20171006020334958-1321533546.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt; 用户注销：&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/896449/201710/896449-20171006020702802-1884578102.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;注意：RedHat:使用logout&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;VI编辑器的使用：&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;span&gt;VI编辑器的开发者：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;理查德·马修·斯托曼（Richard Matthew Stallman, RMS，生于1953年），自由软件运动的精神领袖、GNU计划以及自由软件基金会（Free Software Foundation）的创立者、著名黑客。他的主要成就包括Emacs及后来的GNU Emacs，GNU C 编译器及GNU 除错器。 他所写作的GNU通用公共许可证（GNU GPL）是世上最广为采用的自由软件许可证，为copyleft观念开拓出一条崭新的道路。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;vi编辑器是linux下最有名的编辑器，也是我们学习 linux必须掌握的工具，在unix下也可使用vi进行程 序的开发。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;如何使用vi进行开发?&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;下面我们使用vi在linux下，开发一个简单的c程 序 Hello.cpp ，并且在linux下运行成功.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/896449/201710/896449-20171006021137927-1847891901.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/896449/201710/896449-20171006021153646-915326206.png&quot; alt=&quot;&quot; width=&quot;313&quot; height=&quot;260&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/896449/201710/896449-20171006022056865-165194702.png&quot; alt=&quot;&quot; width=&quot;329&quot; height=&quot;364&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;不熟悉如何使用VI的不要紧，后面我会介绍一下如何使用VI。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;先看结果：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/896449/201710/896449-20171006022521771-237521389.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;gcc后多了一个a.out文件，那如何运行它呢？&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;使用：./a.out&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/896449/201710/896449-20171006022640568-1095938057.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;好了装逼结束了，下面让我们看看如何使用VI编辑器：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;vi hello.cpp回车，会进入到编辑状态，&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;请输入i【进入插入模式】，然后接可以输入自己想输入的东西，之后，按一下ESC键，进入命令模式，再按 ：并输入wq保存并退出，（：q!退出不保存）。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;常用内置指令：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/896449/201710/896449-20171006023517224-687045407.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; 好了，今天就讲到这里，晚上继续更新这个系列的文章，觉得可以的话，希望点下推荐哈~你们的推荐是我的动力。&lt;/span&gt;&lt;/p&gt;
&lt;div readability=&quot;10&quot;&gt;
&lt;p&gt;作者：郭峥&lt;/p&gt;
&lt;p&gt;出处：http://www.cnblogs.com/runningsmallguo/&lt;/p&gt;
&lt;p&gt;本文版权归作者和博客园共有，欢迎转载，但未经作者同意必须保留此段声明，且在文章页面明显位置给出原文链接。&lt;/p&gt;
&lt;/div&gt;
</description>
<pubDate>Fri, 06 Oct 2017 01:37:00 +0000</pubDate>
<dc:creator>菠萝吹雪—Code</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/runningsmallguo/p/7630422.html</dc:identifier>
</item>
<item>
<title>跨主机使用 Rex-Ray volume - 每天5分钟玩转 Docker 容器技术（77） - CloudMan</title>
<link>http://www.cnblogs.com/CloudMan6/p/7630205.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/CloudMan6/p/7630205.html</guid>
<description>&lt;p&gt;&lt;span&gt;上一节我们在 docker1 上的 MySQL 容器中使用了 Rex-Ray volume &lt;span&gt;mysqldata&lt;/span&gt;，更新了数据库。现在容器已经删除，今天将演示在 docker2 中重新使用这个卷。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;在 dokcer2 上执行如下命令，启动 MySQL 容器：&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;docker run --name mydb_on_docker2 -v mysqldata:/var/lib/mysql -d mysql&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;新容器也使用相同的卷&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;code&gt;&lt;span&gt;mysqldata&lt;/span&gt;&lt;/code&gt;，不过这次不需要指定环境变量&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;code&gt;MYSQL_ROOT_PASSWORD&lt;/code&gt;，因为密码已经保存到&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;code&gt;&lt;span&gt;mysqldata&lt;/span&gt;&lt;/code&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;里面了。&lt;/p&gt;
&lt;p&gt;现在 Rex-Ray volume&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;code&gt;&lt;span&gt;mysqldata&lt;/span&gt;&lt;/code&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;已经挂载到 docker2：&lt;/p&gt;
&lt;p&gt;&lt;img title=&quot;http://7xo6kd.com1.z0.glb.clouddn.com/upload-ueditor-image-20171005-1507213675415073795.png&quot; src=&quot;http://7xo6kd.com1.z0.glb.clouddn.com/upload-ueditor-image-20171005-1507214360982088275.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;同样可以按照之前的方法用&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;code&gt;&lt;span&gt;docker volume inspect&lt;/span&gt;&lt;/code&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;和&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;code&gt;&lt;span&gt;docker inspect&lt;/span&gt;&lt;/code&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;查看具体的 mount 信息，这里不再赘述。&lt;/p&gt;
&lt;p&gt;按照如下步骤验证 MySQL 的数据：&lt;/p&gt;
&lt;p&gt;&lt;img title=&quot;http://7xo6kd.com1.z0.glb.clouddn.com/upload-ueditor-image-20171005-1507213675845008288.png&quot; src=&quot;http://7xo6kd.com1.z0.glb.clouddn.com/upload-ueditor-image-20171005-1507214361309096194.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;① 进入到容器&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;code&gt;&lt;span&gt;mydb_on_docker2&lt;/span&gt;&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;② 登录数据库，密码与&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;code&gt;&lt;span&gt;mydb_on_docker1&lt;/span&gt;&lt;/code&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;一致。&lt;/p&gt;
&lt;p&gt;③ 切换到数据库&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;code&gt;&lt;span&gt;mysql&lt;/span&gt;&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;④ 确认之前由&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;code&gt;&lt;span&gt;mydb_on_docker1&lt;/span&gt;&lt;/code&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;创建的表和写入的数据完好无损。&lt;/p&gt;
&lt;p&gt;&lt;img title=&quot;http://7xo6kd.com1.z0.glb.clouddn.com/upload-ueditor-image-20171005-1507213675809095736.png&quot; src=&quot;http://7xo6kd.com1.z0.glb.clouddn.com/upload-ueditor-image-20171005-1507214361987092239.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;Rex-Ray 可以提供跨主机的 volume，其生命周期不依赖 Docker Host 和容器，是 stateful 容器理想的数据存储方式。&lt;/p&gt;
&lt;p&gt;如何使用其他 storage provider 的 volume driver，部署和配置 storage provider 会有所不同，不过 Docker 在使用 volume 的方式都是一样的：&lt;/p&gt;
&lt;ol class=&quot; list-paddingleft-2&quot; readability=&quot;-1&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;通过&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;code&gt;&lt;span&gt;docker volume create --driver&lt;/span&gt;&lt;/code&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;创建 volume。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;创建容器时用&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;code&gt;&lt;span&gt;-v&lt;/span&gt;&lt;/code&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;指定上一步创建的 volume。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;br/&gt;&lt;span&gt;Docker  的数据管理就讨论到这里，下一节开始学习容器的监控方案。&lt;/span&gt;&lt;br/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;书籍：&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;1.《每天5分钟玩转Docker容器技术》&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;a href=&quot;https://item.jd.com/16936307278.html&quot; target=&quot;_blank&quot;&gt;https://item.jd.com/16936307278.html&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;2.《每天5分钟玩转OpenStack》&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;a href=&quot;https://item.jd.com/12086376.html&quot; target=&quot;_blank&quot;&gt;https://item.jd.com/12086376.html&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;img title=&quot;http://7xo6kd.com1.z0.glb.clouddn.com/upload-ueditor-image-20170926-1506393629819061392.png&quot; src=&quot;http://7xo6kd.com1.z0.glb.clouddn.com/upload-ueditor-image-20171005-1507214362352040611.jpg&quot; alt=&quot;二维码+指纹.png&quot;/&gt;&lt;/p&gt;
</description>
<pubDate>Fri, 06 Oct 2017 00:44:00 +0000</pubDate>
<dc:creator>CloudMan</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/CloudMan6/p/7630205.html</dc:identifier>
</item>
</channel>
</rss>