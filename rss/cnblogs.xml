<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>Ajax详解 - 疾风_lu</title>
<link>http://www.cnblogs.com/518894-lu/p/9016129.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/518894-lu/p/9016129.html</guid>
<description>&lt;p&gt;前言：&lt;/p&gt;
&lt;p&gt;有时我们在使用requests抓取数据时得到的返回结果会与浏览器中看到的内容不一致，这是因为requests只能得到原始的HTML文挡，而浏览器的页面是通过javascript处理数据后生成的，这些数据的来源可能是Ajax加载的；可能是包含在HTML文档中的，也有可能是javascript+特定的算法生成的。&lt;/p&gt;
&lt;p&gt;对于Ajax加载的页面：当你打开网站，原始页面中只会包含一部分数据，当这部分数据被加载后，会向服务器某个接口发送一个请求来请求数据，拿到数据后再由浏览器进行渲染得到小伙伴们看到的页面的全部内容（这里比如京东商场，当你搜索某个关键字时，会出现很多商品，当你的滚动条往下滑，商品信息才慢慢被加载出来！），而这个发送的请求就是Ajax&lt;/p&gt;
&lt;p&gt;1、What is Ajax?&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload.soyohui.com/ueditor/20170918/soyohui59bf91b3e44ae.jpg&quot; alt=&quot;&quot; width=&quot;200&quot; height=&quot;115&quot;/&gt;&lt;/p&gt;
&lt;p&gt;答：全称为：Asynchronous JavaScript and XML ，也就是异步加载的javascript 和 XML（通俗的讲：利用javascript在保证页面不被完全刷新、链接不改变的情况下于服务器交换数据并更新网页的一种方式）&lt;/p&gt;
&lt;p&gt;2、基本原理(具体详解请参考W3Cschool上面的内容)http://www.w3school.com.cn/ajax/index.asp（官网）&lt;/p&gt;
&lt;p&gt;工作流程：&lt;/p&gt;
&lt;p&gt;（1）、发送请求&lt;/p&gt;
&lt;p&gt;（2）、解析内容&lt;/p&gt;
&lt;p&gt;（3）、渲染网页得到结果&lt;/p&gt;
&lt;p&gt;下面我们来具体分析下整个过程：&lt;/p&gt;
&lt;p&gt;首先介绍下：XMLHttpRequest 对象&lt;/p&gt;
&lt;p&gt;所有现代浏览器均支持 XMLHttpRequest 对象（IE5 和 IE6 使用 ActiveXObject）。&lt;/p&gt;
&lt;p&gt;XMLHttpRequest 用于在后台与服务器交换数据。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新。&lt;/p&gt;
&lt;pre&gt;
var xmlhttp;
if (window.XMLHttpRequest)
  {// code for IE7+, Firefox, Chrome, Opera, Safari
  xmlhttp=new XMLHttpRequest();
  }
else
  {// code for IE6, IE5
  xmlhttp=new ActiveXObject(&quot;Microsoft.XMLHTTP&quot;);
  }
&lt;/pre&gt;
&lt;pre&gt;
xmlhttp.onreadystatechange=function()
  {
  if (xmlhttp.readyState==4 &amp;amp;&amp;amp; xmlhttp.status==200)
    {
    document.getElementById(&quot;myDiv&quot;).innerHTML=xmlhttp.responseText;
    }
  }
&lt;/pre&gt;
&lt;pre&gt;
xmlhttp.open(&quot;GET&quot;,&quot;demo_get.asp&quot;,true);
xmlhttp.send();
&lt;/pre&gt;
&lt;pre&gt;
&lt;br/&gt;在分析上述这段代码之前我们先了解下另两个概念：
&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1324415/201805/1324415-20180509175901322-1643456511.png&quot; alt=&quot;&quot; width=&quot;800&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1324415/201805/1324415-20180509180037358-807968095.png&quot; alt=&quot;&quot; width=&quot;800&quot;/&gt;&lt;/p&gt;
&lt;pre&gt;
基于上述理论小伙伴们我们来分析下上述代码：&lt;br/&gt;1、首先我们定义了一个xmlhttp&lt;br/&gt;2、如果是IE7+, Firefox, Chrome, Opera, Safari浏览器，就将XMLHttpRequest赋给xmlhttp;如果是IE6, IE5浏览器就将ActiveXObject(&quot;Microsoft.XMLHTTP“）给&lt;br/&gt;xmlhttp&lt;br/&gt;3、当服务器返回响应时【(xmlhttp.readyState==4 &amp;amp;&amp;amp; xmlhttp.status==200)表示响应成功】，onreadystatechange属性被触发将id为myDiv中的内容改为服务器返回的内容&lt;br/&gt;xmlhttp.responseText&lt;br/&gt;4、这样整个htmL内容就被刷新了&lt;br/&gt;这就是整个Ajax请求、解析、渲染的过程
&lt;/pre&gt;
&lt;hr/&gt;&lt;pre&gt;
&lt;span&gt;下面小伙伴们咱们来爬取微博实战：&lt;br/&gt;首先随便选取一个微博账号：https://m.weibo.cn/u/3434671244（这里我随便选取了一个我的学生希望她不要介意）&lt;br/&gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;47&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;本文小伙伴如有不了解请结合前面的requests库和urllib库详解&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; urllib.parse &lt;span&gt;import&lt;/span&gt;&lt;span&gt; urlencode
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; requests
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; requests.exceptions &lt;span&gt;import&lt;/span&gt;&lt;span&gt; ConnectionError
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; pyquery &lt;span&gt;import&lt;/span&gt;&lt;span&gt; PyQuery as pq
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; pymongo &lt;span&gt;import&lt;/span&gt;&lt;span&gt; MongoClient
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; 
&lt;span&gt; 8&lt;/span&gt; client =&lt;span&gt; MongoClient()
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; db = client[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;weibo&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; collection = db[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;weibo&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; 
&lt;span&gt;12&lt;/span&gt; base_url = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;https://m.weibo.cn/api/container/getIndex?&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;设置请求头&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt; headers =&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;     &lt;span&gt;'&lt;/span&gt;&lt;span&gt;User-Agent&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/66.0.3359.139 Safari/537.36&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;     &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Referer&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;ttps://m.weibo.cn/u/3434671244&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;     &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Host&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;m.weibo.cn&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;     &lt;span&gt;'&lt;/span&gt;&lt;span&gt;X-Requested-With&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;XMLHttpRequest&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; 
&lt;span&gt;21&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; get_page(page):
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;     params=&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;         &lt;span&gt;'&lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;uid&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;         &lt;span&gt;'&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;3434671244&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;         &lt;span&gt;'&lt;/span&gt;&lt;span&gt;containerid&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;1076033434671244&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;         &lt;span&gt;'&lt;/span&gt;&lt;span&gt;page&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:page,
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; 
&lt;span&gt;29&lt;/span&gt;     url = base_url +&lt;span&gt; urlencode(params)
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt;异常捕获&lt;/span&gt;
&lt;span&gt;31&lt;/span&gt;     &lt;span&gt;try&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;         response = requests.get(url,headers =&lt;span&gt; headers)
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; response.status_code == 200&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt; response.json()
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt;     &lt;span&gt;except&lt;/span&gt;&lt;span&gt; ConnectionError as e:
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt;         &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;error!&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt; 
&lt;span&gt;38&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;页面解析函数&lt;/span&gt;
&lt;span&gt;39&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; parse_page(json):
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt;&lt;span&gt; json:
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt;         items = json.get(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;data&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;).get(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;cards&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt;下面这种写法小伙伴们学习了scrapy 框架就自然明白了,另外请大家学习pyquery的基本使用https://pythonhosted.org/pyquery/index.html#&lt;/span&gt;
&lt;span&gt;43&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt; item &lt;span&gt;in&lt;/span&gt;&lt;span&gt; items:
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt;             item = item.get(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;mblog&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt;             weibo =&lt;span&gt; {}
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt;             weibo[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] = item.get(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt;             weibo[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;text&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] = pq(item.get(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;text&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)).text().split()
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt;             weibo[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;attitudes&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] = item.get(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;attitudes_count&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;49&lt;/span&gt;             weibo[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;comments&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] = item.get(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;comments_count&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;50&lt;/span&gt;             weibo[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;reposts&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] = item.get(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;reposts_count&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;51&lt;/span&gt;             &lt;span&gt;yield&lt;/span&gt;&lt;span&gt; weibo
&lt;/span&gt;&lt;span&gt;52&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;写入mongodb数据库          &lt;/span&gt;
&lt;span&gt;53&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; save_to_mongo(result):
&lt;/span&gt;&lt;span&gt;54&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;&lt;span&gt; collection.insert_one(result):
&lt;/span&gt;&lt;span&gt;55&lt;/span&gt;             &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;save successfully!&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;56&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;主函数         &lt;/span&gt;
&lt;span&gt;57&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; main():
&lt;/span&gt;&lt;span&gt;58&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt; page &lt;span&gt;in&lt;/span&gt; range(1,11&lt;span&gt;):
&lt;/span&gt;&lt;span&gt;59&lt;/span&gt;         json =&lt;span&gt; get_page(page)
&lt;/span&gt;&lt;span&gt;60&lt;/span&gt;         results =&lt;span&gt; parse_page(json)
&lt;/span&gt;&lt;span&gt;61&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt; result &lt;span&gt;in&lt;/span&gt;&lt;span&gt; results:
&lt;/span&gt;&lt;span&gt;62&lt;/span&gt;             &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(result)
&lt;/span&gt;&lt;span&gt;63&lt;/span&gt; &lt;span&gt;            save_to_mongo(result)
&lt;/span&gt;&lt;span&gt;64&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; &lt;span&gt;__name__&lt;/span&gt; == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__main__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;65&lt;/span&gt;     main()
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;运行结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1324415/201805/1324415-20180509233718155-1897664124.png&quot; alt=&quot;&quot; width=&quot;800&quot;/&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;span/&gt;
&lt;/pre&gt;

&lt;pre&gt;
&lt;/pre&gt;

</description>
<pubDate>Wed, 09 May 2018 15:38:00 +0000</pubDate>
<dc:creator>疾风_lu</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/518894-lu/p/9016129.html</dc:identifier>
</item>
<item>
<title>从有值的ID到汉字编码 - Magic激流</title>
<link>http://www.cnblogs.com/magicxyx/p/9017328.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/magicxyx/p/9017328.html</guid>
<description>
&lt;p&gt;　　前些日子漫无目的地刷着朋友圈，突然一个ID从字丛中闯入我的眼睛——&quot;某&amp;amp;字&quot;(为保护当事人隐私，此处用'某''字'代替)，浸淫于计算机而产生的直觉告诉我，这是一个有值的表达式，这位姑娘用这个表达式当ID，那她这ID的值，到底是啥呢？&lt;/p&gt;


&lt;p&gt;    话说在计算机中，姑娘们的照片和她们的ID本质上都一样，都是冷冰冰的二进制0和1。既然都是一个bit，那就有了位操作求值的——咳咳——&quot;科学依据&quot;。&lt;/p&gt;
&lt;p&gt;    与和英文打字键盘完全兼容的拉丁字母不同，输入汉字便成了人们必须研究的课题。从近40年前的GB2312，到扩展后的GBK标准，再到全球化的Unicode，后来又出现了Unicode的Plus版本——UTF标准。&lt;/p&gt;
&lt;p&gt;    好了，说完汉字编码的历史，我们回到计算机中。当初推出GB2312时，为了不和原有的ascii码混肴，智慧的中国人规定，当两个值都大于127的字节连在一起的时候，就表示一个汉字，前面的字节称为高字节（0xA1-0xf7），后面的字节称为低字节（0xA1-0xFE）。但后来人们发现GB2312里的汉字不够用，于是干脆降低要求，不在规定低字节一定得是大于127的值，这样，拓展的GBK诞生了，再之后又经拓展，就成了人们口中的&quot;DBCS&quot;&lt;span&gt;(&lt;span&gt;Double Byte Charecter Set 双字节字符集&lt;/span&gt;)。在这个标准中，程序员必须注意每一个字节的值，如果大于&lt;/span&gt;127，那么就有一个汉字要出现了。&lt;/p&gt;
&lt;p&gt;    而目前使用最广的UTF-8作为一种变长的编码方式，可根据不同的符号变化字节长度（1-4个字节）。在GB2312中，一个汉字为两个字节，而在UTF-8中，一个汉字为3个字节。&lt;/p&gt;

&lt;p&gt;    百度得到dev-cpp的字符编码为GB-2312（此处大雾，后文会详细解释）,所以一个汉字占两个字符。&lt;/p&gt;
&lt;p&gt;    因为涉及位操作，所以新建一个union结构nameBit，一个nameBit占2*16位，也就是4个字节。&lt;/p&gt;
&lt;ol readability=&quot;24&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;    &lt;span&gt;&lt;strong&gt;union&lt;/strong&gt;&lt;span&gt; nameBit{  &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;    &lt;span&gt;&lt;strong&gt;short&lt;/strong&gt;&lt;span&gt; short1[2];  &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;    &lt;span&gt;&lt;strong&gt;struct&lt;/strong&gt;&lt;span&gt; {  &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;        &lt;span&gt;&lt;strong&gt;char&lt;/strong&gt;&lt;span&gt; c0;  &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;        &lt;span&gt;&lt;strong&gt;char&lt;/strong&gt;&lt;span&gt; c1;  &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;        &lt;span&gt;&lt;strong&gt;char&lt;/strong&gt;&lt;span&gt; c2;  &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;        &lt;span&gt;&lt;strong&gt;char&lt;/strong&gt;&lt;span&gt; c3;  &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;    }byte;  &lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;&lt;span&gt;}; &lt;/span&gt;&lt;/p&gt;

&lt;p&gt;这个结构存储了两个汉字的GB-2312编码，分别用一个short表示，byte和short共享内存，所以c0,c1用于存储第一个汉字，c2,c3存储第二个汉字的字符编码。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;/*&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;    &lt;/span&gt; &lt;span&gt;初级版本&lt;/span&gt;&lt;span&gt;---&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;*/&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;#include &amp;lt;stdio.h&amp;gt;&lt;span&gt;  &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;union&lt;/strong&gt;&lt;span&gt; nameBit{  &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;    &lt;span&gt;&lt;strong&gt;short&lt;/strong&gt;&lt;span&gt; short1[2];  &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;    &lt;span&gt;&lt;strong&gt;struct&lt;/strong&gt;&lt;span&gt; {  &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;        &lt;span&gt;&lt;strong&gt;char&lt;/strong&gt;&lt;span&gt; c0;  &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;        &lt;span&gt;&lt;strong&gt;char&lt;/strong&gt;&lt;span&gt; c1;  &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;        &lt;span&gt;&lt;strong&gt;char&lt;/strong&gt;&lt;span&gt; c2;  &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;        &lt;span&gt;&lt;strong&gt;char&lt;/strong&gt;&lt;span&gt; c3;  &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;    }byte;  &lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;};  &lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;int&lt;/strong&gt;&lt;span&gt; main (&lt;span&gt;&lt;strong&gt;void&lt;/strong&gt;&lt;span&gt;)  &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;{  &lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;    &lt;span&gt;&lt;strong&gt;union&lt;/strong&gt;&lt;span&gt; nameBit value1;  &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;    &lt;span&gt;&lt;strong&gt;char&lt;/strong&gt;&lt;span&gt; arr[5];  &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;

&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;    printf(&lt;span&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;请输入两个汉字，中间无需空格隔开&lt;/span&gt;&lt;span&gt;:\n&quot;&lt;span&gt;); &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt; &lt;span&gt;  fgets(arr,5,stdin);&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;

&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;    &lt;span&gt;&lt;strong&gt;for&lt;/strong&gt;&lt;span&gt;(&lt;span&gt;&lt;strong&gt;int&lt;/strong&gt;&lt;span&gt; i = 0;i&amp;lt;4;i++)  &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;    {  &lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;        &lt;span&gt;&lt;strong&gt;char&lt;/strong&gt;&lt;span&gt; *p = &amp;amp;value1.byte.c0 + i;  &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;        *p = arr[i];  &lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;    }  &lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;4&quot;&gt;
&lt;p&gt;&lt;span&gt;    printf(&lt;span&gt;&quot;%c%c &amp;amp; %c%c = &quot;&lt;span&gt;,value1.byte.c0,value1.byte.c1,value1.byte.c2,value1.byte.c3);  &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;    value1.short1[0] = value1.short1[0] &amp;amp; value1.short1[1];  &lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;&lt;span&gt;    printf(&lt;span&gt;&quot;%c%c&quot;&lt;span&gt;,value1.byte.c0,value1.byte.c1);  &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;    &lt;span&gt;&lt;strong&gt;return&lt;/strong&gt;&lt;span&gt; 0;  &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;}  &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;把输入存到一个字符串中，在一字节一字节的复制到union。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;    输入示例&quot;啊哈&quot;：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1219242/201805/1219242-20180509233314076-1743362537.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;'啊'的GB2312编码为B0A1，'哈'的GB2312编码为B9FE，所以B0A1 &amp;amp; B9FE的结果为B0A0，查GB2312编码表发现这个编码并没有值，而拓展的GBK编码中B0A0对应为'盃'(同'杯')。&lt;/p&gt;
&lt;p&gt;    所以可知，该程序运行时遵循的编码方式为GBK。&lt;/p&gt;

&lt;p&gt;    将该.c文件直接移至虚拟机的共享文件夹后，在Linux中运行此程序，出现如下情况：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1219242/201805/1219242-20180509233314303-1561004463.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;    将终端的字符编码改为GBK后，再次执行。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1219242/201805/1219242-20180509233314529-536874857.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;    文件内字符正常显示，但是终端上的汉字出现乱码。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1219242/201805/1219242-20180509233314827-882019825.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;    怀疑是源代码文件和终端上的编码不同，用file命令查看.c编码&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1219242/201805/1219242-20180509233315065-638363138.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;    再用strace命令查看细节，发现&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1219242/201805/1219242-20180509233315288-822625406.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;    其中，/345/225/212转换成16进制就是 E5 95 8A，/345/223/210就是E5 93 88，这正是&quot;啊哈&quot;这两个字的UTF-8编码。所以情况就很明显了，源代码用的dev-cpp的编辑器，保存为ANSI(GB2312)，将文件移至Linux，编译运行后，终端和程序的编码不同，导致输出出现乱码，程序运行时，用的又是UTF-8编码一个汉字占三个字节&lt;/p&gt;
&lt;p&gt;    所以这个程序需要重构。&lt;/p&gt;

&lt;p&gt;    因为在Windows和Linux中运行时所用的编码不同，所以直接用一个10个字节的数组来存储编码。&lt;/p&gt;
&lt;p&gt;    又由于需要在两个平台运行，所以需要有一定的移植性。这个可以用__linux__和_WIN32两个宏来区分。&lt;/p&gt;
&lt;ol readability=&quot;22&quot;&gt;&lt;li&gt;
&lt;p&gt;&lt;span&gt;#if _WIN32&lt;span&gt;  &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;    &lt;span&gt;//windows&lt;span&gt;  &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;    #elif __linux__&lt;span&gt;  &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;    &lt;span&gt;//Linux&lt;span&gt;  &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;    #else&lt;span&gt;  &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;    &lt;span&gt;//other&lt;span&gt;  &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;    #endif&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;最终版本如下：&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;#include &amp;lt;stdio.h&amp;gt;&lt;span&gt;  &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;#define Win_N 2&lt;span&gt;  &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;#define Linux_N 3&lt;span&gt;  &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;int&lt;/strong&gt;&lt;span&gt; main (&lt;span&gt;&lt;strong&gt;void&lt;/strong&gt;&lt;span&gt;)  &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;{  &lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;    &lt;span&gt;&lt;strong&gt;char&lt;/strong&gt;&lt;span&gt; arr[10];  &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;

&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;    printf(&lt;span&gt;&quot;Please input two Chinese charecters:&quot;&lt;span&gt;);  &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;    printf(&lt;span&gt;&quot;(&lt;/span&gt;&lt;/span&gt;&lt;span&gt;请输入两个汉字&lt;/span&gt;&lt;span&gt;)\n&quot;&lt;span&gt;);  &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;

&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;&lt;span&gt;    fgets(arr,10,stdin);  &lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;    #if _WIN32&lt;span&gt;  &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;

&lt;/li&gt;
&lt;li readability=&quot;3&quot;&gt;
&lt;p&gt;&lt;span&gt;    printf(&lt;span&gt;&quot;%c%c &amp;amp; %c%c = &quot;&lt;span&gt;,arr[0],arr[1],arr[2],arr[3]);  &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;    &lt;span&gt;&lt;strong&gt;for&lt;/strong&gt;&lt;span&gt;(&lt;span&gt;&lt;strong&gt;int&lt;/strong&gt;&lt;span&gt; i = 0;i&amp;lt;Win_N;i++)  &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;        arr[i] = arr[i]&amp;amp;arr[i+Win_N];  &lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;&lt;span&gt;    printf(&lt;span&gt;&quot;%c%c\n&quot;&lt;span&gt;,arr[0],arr[1]);  &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;

&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;    #elif __linux__&lt;span&gt;  &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;

&lt;/li&gt;
&lt;li readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;span&gt;    printf(&lt;span&gt;&quot;%c%c%c &amp;amp; %c%c%c = &quot;&lt;span&gt;,arr[0],arr[1],arr[2],arr[3],arr[4],arr[5]);  &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;    &lt;span&gt;&lt;strong&gt;for&lt;/strong&gt;&lt;span&gt;(&lt;span&gt;&lt;strong&gt;int&lt;/strong&gt;&lt;span&gt; i = 0;i&amp;lt;Linux_N;i++)  &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;        arr[i] = arr[i]&amp;amp;arr[i+Linux_N];  &lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;&lt;span&gt;    printf(&lt;span&gt;&quot;%c%c%c\n&quot;&lt;span&gt;,arr[0],arr[1],arr[2]);  &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;    #else&lt;span&gt;  &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;

&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;    printf(&lt;span&gt;&quot;Errors that occur when selecting an operating system\n&quot;&lt;span&gt;);  &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;    #endif&lt;span&gt;  &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;    &lt;span&gt;&lt;strong&gt;return&lt;/strong&gt;&lt;span&gt; 0;  &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;span&gt;}&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;为了防止第十行的汉字在Linux中出现乱码，把该.c文件用Notepad++打开，转为UTF-8格式。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;    之后再在Linux中运行，先测试一下。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1219242/201805/1219242-20180509233315512-34295227.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;    '啊'的UTF-8编码为E5 95 8A ，'哈'为E5 93 88 ，E5 95 8A &amp;amp; E5 93 88 = E591 88， 正好是'呈'的UTF-8编码。&lt;/p&gt;


&lt;h2&gt;    1、&lt;span&gt;&lt;span&gt;源码字符集，执行字符集与运行环境编码&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;        &lt;span&gt;源码字符集：英文the source character set，是指源代码文件是使用何种编码字符集保存的。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;执行字符集：英文&lt;/span&gt;&lt;span&gt;the execution character set&lt;/span&gt;&lt;span&gt;，是指源代码经过编译、链接后的可执行文件是使用何种编码字符集保存的，程序实际执行时，内存中的字符串编码就是执行字符集。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;运行环境编码：是指操作系统（或者当前控制台环境）用于显示文字的编码字符集。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;    2、乱码的根源&lt;/h2&gt;
&lt;p&gt;        &lt;span&gt;&lt;span&gt;源代码文件（源码字符集）经过编译&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;链接，生成可执行文件（执行字符集），最后程序运行于实际环境中（运行环境编码）。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;在这过程中如果有字符集不匹配，最终就无法显示预期的文字信息，甚至产生乱码。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;编译器在编译源代码时，会将源码字符集转化为执行字符集，如果编译器不能正确识别源码字符集，就得不到正确的字符串数据。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;可执行文件在实际运行环境中执行时，为了在控制台（或者其他&lt;/span&gt;&lt;span&gt;UI&lt;/span&gt;&lt;span&gt;）上显示出字符串，就要将执行字符集转化为运行环境的字符集。如果运行环境的字符集与执行字符集不同，也会导致乱码。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;    3、编译器层面的字符转码工作&lt;/h2&gt;
&lt;p&gt;        &lt;span&gt;&lt;span&gt;&lt;strong&gt;GCC&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;：&lt;/span&gt;&lt;span&gt;GCC&lt;/span&gt;&lt;span&gt;的源码字符集与执行字符集默认都是&lt;/span&gt;&lt;span&gt;UTF-8&lt;/span&gt;&lt;span&gt;编码，也就是说默认情况下&lt;/span&gt;&lt;span&gt;GCC&lt;/span&gt;&lt;span&gt;都是按&lt;/span&gt;&lt;span&gt;UTF-8&lt;/span&gt;&lt;span&gt;来解析源码，编译后的执行字符集也是&lt;/span&gt;&lt;span&gt;UTF-8&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;        &lt;span&gt;&lt;strong&gt;&lt;span&gt;MSVC(SP1)&lt;/span&gt;&lt;span&gt;：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;、识别源码字符集：&lt;span&gt;源码文件有&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;BOM&lt;/span&gt;&lt;span&gt;签名的，就按&lt;/span&gt;&lt;span&gt;BOM&lt;/span&gt;&lt;span&gt;的编码来解析源文件；否则使用本地&lt;/span&gt;&lt;span&gt;Locale&lt;/span&gt;&lt;span&gt;字符集解析源文件（随系统设置而变）。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;                &lt;/span&gt;2&lt;/span&gt;&lt;span&gt;、转化执行字符集：&lt;span&gt;对于&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;char&lt;/span&gt;&lt;span&gt;类型，如果有设置预处理选项&lt;/span&gt;&lt;span&gt;&quot;#pragma execution_character_set&quot;&lt;/span&gt;&lt;span&gt;，编译源码时，转换为预编译所设定的执行字符集；&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;否则使用本地&lt;/span&gt;&lt;span&gt;Locale&lt;/span&gt;&lt;span&gt;作为执行字符集。对于&lt;/span&gt;&lt;span&gt;wchar_t&lt;/span&gt;&lt;span&gt;类型，总是使用&lt;/span&gt;&lt;span&gt;UTF-16&lt;/span&gt;&lt;span&gt;编码。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;    回到开头的那个话题，朋友圈的那个表达式ID在我电脑的两个系统中有两个值，分别对应于GB2312及UTF-8下的编码，所以输入姑娘的ID，得到了两个截然不同的值(笑)。&lt;/p&gt;
&lt;p&gt;    &lt;img src=&quot;https://images2018.cnblogs.com/blog/1219242/201805/1219242-20180509233315732-1654364888.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;    &lt;img src=&quot;https://images2018.cnblogs.com/blog/1219242/201805/1219242-20180509233315918-874634883.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;    这个结果仅供娱乐，没有任何意义，这只是偶尔的心血来潮，庸常生活里的一点趣味。&lt;/p&gt;
&lt;p&gt;在即将结束这篇博文的这个时候，浏览器里仍然还有十几个与字符编码有关的网页，我也仅仅是掌握了一些皮毛，却已获益匪浅。拙作初成，还请多多指教。&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;声明：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1、引用，即&quot;注①&quot;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;            内容来源于博文&lt;a href=&quot;https://blog.csdn.net/benkaoya/article/details/59522148&quot;&gt;浅谈C/C++编程中的字符编码转换——许振坪&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;        &lt;strong&gt;2、除上文引用外，一些有干货的文章&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;            &lt;/strong&gt;字符集编码与 C/C++ 源文件字符编译乱弹——Breaker&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/lonnng2004/article/details/51882703&quot;&gt;汉字编码的发展历史&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/smstong/article/details/42193177&quot;&gt;从调用printf()到显示器上看到字符串&lt;/a&gt;&lt;/p&gt;

</description>
<pubDate>Wed, 09 May 2018 15:33:00 +0000</pubDate>
<dc:creator>Magic激流</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/magicxyx/p/9017328.html</dc:identifier>
</item>
<item>
<title>Oracle知识梳理（三）操作篇：SQL基础操作汇总 - 糖拌西红柿</title>
<link>http://www.cnblogs.com/TheGCC/p/8964935.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/TheGCC/p/8964935.html</guid>
<description>&lt;p&gt;&lt;span&gt;&lt;strong&gt;Oracle知识梳理（三）操作篇：SQL基础操作汇总&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1368510/201805/1368510-20180504090655807-588351611.png&quot; alt=&quot;&quot; width=&quot;835&quot; height=&quot;667&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;一、表操作&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;strong&gt;1、表的创建(CREATE TABLE):&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;基本语句格式&lt;/span&gt;：       &lt;span&gt;&lt;strong&gt;CREATE TABLE  table_name （ col_name    datatype, ……）;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;解释&lt;/span&gt;： &lt;strong&gt;&lt;span&gt;table_name 为要创建的表的名称（同一登录用户下表名必须唯一），col_name 为表中属性的名称，datatype 为属性的相应数据类型，同一表中会有许多字段，也可以在字段数据类型后追加各种约束条件（具体见约束）。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;例：&lt;img src=&quot;https://images2018.cnblogs.com/blog/1368510/201805/1368510-20180504094824914-1110667730.png&quot; alt=&quot;&quot; width=&quot;506&quot; height=&quot;145&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;2、表的修改(ALTER TABLE)：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;解释&lt;/span&gt;&lt;/strong&gt;：&lt;strong&gt;&lt;span&gt;所有对表进行修改的语句，开头均以alter table+要修改的表的名称,后面的一系列操作只需要追加相应的关键字语句即可，例如添加字段 ALTER TABLE table_name ADD col_name datatype&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;(修改表名）基本语句格式&lt;/span&gt;&lt;/strong&gt;：&lt;strong&gt;&lt;span&gt;RENAME table_name TO new_table_name;        （TO前面为原表名，后面为新的表名）&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;例：&lt;img src=&quot;https://images2018.cnblogs.com/blog/1368510/201805/1368510-20180504102442673-34950224.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;(添加字段)基本语句格式&lt;/span&gt;&lt;/strong&gt;：&lt;span&gt;&lt;strong&gt;ALTER TABLE table_name ADD col_name datatype;    （add关键字为添加字段使用）&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;例：&lt;/span&gt;&lt;strong&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1368510/201805/1368510-20180504100341435-86216977.png&quot; alt=&quot;&quot; width=&quot;465&quot; height=&quot;297&quot;/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;(修改字段名称）基本语句格式&lt;/span&gt;&lt;/strong&gt;：&lt;span&gt;&lt;strong&gt;ALTER TABLE table_name RENAME COLUMN col_name TO new_col_name;    (RENAME COLUMN为修改字段名的关键字，TO后面为新的名称，前面为原名称)&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;例：&lt;img src=&quot;https://images2018.cnblogs.com/blog/1368510/201805/1368510-20180504102118711-2064094333.png&quot; alt=&quot;&quot; width=&quot;484&quot; height=&quot;308&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;(修改字段数据类型)基本语句格式&lt;/span&gt;&lt;/strong&gt;：&lt;span&gt;&lt;strong&gt;ALTER TABLE tbale_name MODIFY col_name datatype;  &lt;/strong&gt;&lt;/span&gt;   &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;例：&lt;img src=&quot;https://images2018.cnblogs.com/blog/1368510/201805/1368510-20180504101033759-1739125798.png&quot; alt=&quot;&quot; width=&quot;465&quot; height=&quot;326&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;(删除字段)基本语句格式&lt;/span&gt;&lt;/strong&gt;： &lt;strong&gt;&lt;span&gt;ALTER TABLE table_name DROP COLUMN col_name;       (drop column为字段删除的关键字)&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;例：&lt;img src=&quot;https://images2018.cnblogs.com/blog/1368510/201805/1368510-20180504101556906-281100903.png&quot; alt=&quot;&quot; width=&quot;452&quot; height=&quot;305&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;3、表的删除(DROP TABLE\TRUNCATE TABLE)：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;①截断方式删除表：仅清空表中数据，不会删除表，也不会删除表中的字段。&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;基本语句格式&lt;/span&gt;&lt;/strong&gt;：&lt;span&gt;&lt;strong&gt;TRUNCATE TABLE table_name;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;例：&lt;img src=&quot;https://images2018.cnblogs.com/blog/1368510/201805/1368510-20180504103504696-570545921.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;②完全删除方式删除表：会将整个表删除，包括表中数据和表的结构、字段。&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;基本语句格式&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;span&gt;：&lt;span&gt;&lt;strong&gt;DROP TABLE table_name;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;例：&lt;img src=&quot;https://images2018.cnblogs.com/blog/1368510/201805/1368510-20180504103919886-458901482.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;4、向插入数据（INSERT INTO）：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;①纯插入方式&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;基本语句格式：&lt;span&gt;INSERT INTO table_name  (col_name1,col_name2…… ) VALUES（value1，value2……）;  &lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;解释：&lt;/span&gt;&lt;/span&gt;&lt;span&gt;values前的括号内为字段名集，后面为对应的值，值的数据类型必须与字段的数据类型一致，否则无法添加，同时，根据values前括号内的内容可以进行指定字段添加，例如：仅写一个username字段，values后括号内仅一个“zhangsan”，即对单一字段添加值&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;例：&lt;img src=&quot;https://images2018.cnblogs.com/blog/1368510/201805/1368510-20180504105225128-1320874704.png&quot; alt=&quot;&quot; width=&quot;554&quot; height=&quot;224&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;②复制表数据&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;（在创建表时进行复制）基本语句格式：&lt;span&gt;CREATE TABLE table_new  AS SELECT  col_name1,col_name2... | * FROM table_old;  &lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;  解释：&lt;/span&gt;&lt;span&gt;将table_old表中数据复制到新表中，可以指定字段，也可全部复制，全部复制使用*，具体字段指定字段名即可。&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;例：&lt;img src=&quot;https://images2018.cnblogs.com/blog/1368510/201805/1368510-20180504110509724-496789584.png&quot; alt=&quot;&quot; width=&quot;537&quot; height=&quot;202&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;（在添加时进行复制）基本语句格式：&lt;span&gt;INSERT INTO table_new (col_name1,col_name2…… ) SELECT col-name1,col-name2... | *  FROM table_old;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;例：&lt;img src=&quot;https://images2018.cnblogs.com/blog/1368510/201805/1368510-20180504111206045-1955738284.png&quot; alt=&quot;&quot; width=&quot;456&quot; height=&quot;271&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;5、修改表中数据（UPDATE ）：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;(无条件更新）基本语句格式：&lt;span&gt;UPDATE table_name SET col_name1 = value1,col_name2=value2……;  (这种方式会将表中全部数据进行更新）&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;例：&lt;img src=&quot;https://images2018.cnblogs.com/blog/1368510/201805/1368510-20180504150739549-210578971.png&quot; alt=&quot;&quot; width=&quot;458&quot; height=&quot;223&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;此例中将所有password字段值设为11111&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;(有条件更新）基本语句格式：&lt;span&gt;UPDATE table_name SET col_name1=value1,col_name2=value2..  WHERE col-name=value...&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;例：&lt;img src=&quot;https://images2018.cnblogs.com/blog/1368510/201805/1368510-20180504151316756-1916629093.png&quot; alt=&quot;&quot; width=&quot;443&quot; height=&quot;239&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;6、删除表中数据（DELETE）：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;①删除全部数据：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;基本语句格式：&lt;/span&gt;&lt;span&gt;DELETE FROM table_name;        &lt;/span&gt;&lt;span&gt;这一句与上文截断的结果一致，删除该表中全部数据。&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;②删除具体某行的数据：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;基本语句格式：&lt;span&gt;DELETE FROM table_name WHERE col_name=value....;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;例：&lt;img src=&quot;https://images2018.cnblogs.com/blog/1368510/201805/1368510-20180504152258065-289429247.png&quot; alt=&quot;&quot; width=&quot;465&quot; height=&quot;227&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;二、约束&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;strong&gt;1、主键约束(PRIMARY | CONSTRAINT)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;注：一张表仅能有一个主键约束，主键约束可以由多个字段构成（联合主键，复合主键）。主键约束根据关键字&lt;strong&gt;&lt;span&gt;PRIMARY KEY 和 CONSTRAINT&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;来实现&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;创建表时添加主键约束：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;① CREATE TABLE table_name (col_name1 datatype PRIMARY KEY);&lt;/strong&gt;&lt;/span&gt;&lt;strong&gt;//创建表时，直接对某一属性指定为主键&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;②CONSTRAINT  constraint_name PRIMARY KEY (col_name1,col_name2..);&lt;span&gt;//表级约束，一般在创建表时，所有字段都完成后，最后追加这个语句，如下例子：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;create table userinfo(&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;id   number(6,0),&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;username   varchar2(20),&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;rank    varchar2(10),&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;constraint   pk_key (id,username),&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;);   &lt;span&gt;//其中pk_key为人为命名的主键名称&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;修改表时添加主键约束：&lt;span&gt;ADD CONSTRAINT constraint_name PRIMARY&lt;/span&gt; &lt;span&gt;KEY(col_name1,col_name2..);&lt;/span&gt;&lt;span&gt;//一般跟在 ALTER TABLE table table_name后，进行主键追加，如下例子：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;ALTER TABLE userinfo ADD CONSTRAINT pk_id (id );&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;修改主键约束名称：&lt;span&gt;RENAME CONSTRAINT old_name TO new_name; &lt;span&gt;//用在ALTER TABLE table_name 后面，进行主键名称的更改，如下例子：&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;ALTER TABLE userinfo RENAME CONSTRAINT pk_id TO pk_newid;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;删除主键约束：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;①DROP CONSTRAINT constraint_name ; &lt;span&gt;//彻底删除名称为constraint_name的主键约束，跟在ALTER TABLE table_name 后使用。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;②DISABLE|ENABLE  CONSTRAINT  constraint_name;&lt;span&gt;//这种方式为 禁用 | 开启 主键约束，并没有实质的删除，同样是跟在ALTER TABLE table_name 语句后面使用。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;2、外键约束（REFERENCES）&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;创建表时添加外键约束：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;①CREATE TABLE table1（col_name1 datatype REFERENCES table2(col-name)）;&lt;span&gt;//通过关键字REFERENCES，选择table2中的字段作为外键,被引用的字段必须为table2的主键&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;②CONSTRAINT constraint_name FOREIGN KEY( col_name1,col_name2...) REFERENCES table2(col-name,col-name)[ON DELETE CASCADE ] &lt;span&gt;//表级设置，同时指定级联删除，所谓级联删除就是，我们主表中的一条数据被删除，那么从表中引用主表字段的这一行数据也会被删除（通过ON DELETE CASCADE）。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;修改表时设置外键约束：&lt;span&gt;ADD&lt;/span&gt; &lt;span&gt;&lt;strong&gt;CONSTRAINT constraint_name FOREIGN KEY( col_name1,col_name2...) REFERENCES table2(col-name,col-name)[ON DELETE CASCADE ]&lt;span&gt;//跟在修改表语句后使用&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;删除外键约束：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;①DROP CONSTRAINT constraint_name ; &lt;/span&gt;//彻底删除名称为constraint_name的外约束，跟在ALTER TABLE table_name 后使用。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;②DISABLE|ENABLE  CONSTRAINT  constraint_name;&lt;/span&gt;//这种方式为 禁用 | 开启 外键约束，并没有实质的删除，同样是跟在ALTER TABLE table_name 语句后面使用。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3、非空约束(NOT NULL)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;创建时添加非空约束：&lt;span&gt;CREATE TABLE table_name (col_name datype NOT NULL);&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;修改表时添加非空约束：&lt;span&gt;&lt;strong&gt;ALTER TABLE tbale_name MODIFY col_name datatype NOT NULL; &lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;删除非空约束：&lt;span&gt;&lt;strong&gt;ALTER TABLE tbale_name MODIFY col_name datatype NULL; &lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4、唯一约束(UNIQUE)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;注：唯一约束可以有多个，而主键约束仅限一个，两者都有唯一限制&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;创建时添加非空约束：&lt;/span&gt;&lt;span&gt;CREATE TABLE table_name (col_name datype UNIQUE);   或者 CONSTRAINT constraint_name UNIQUE (col-name,col-name);&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;修改表时添加非空约束：&lt;/span&gt;&lt;span&gt;&lt;strong&gt;ALTER TABLE tbale_name ADD &lt;strong&gt;CONSTRAINT constraint_name UNIQUE (col-name,col-name)&lt;/strong&gt;; &lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;删除非空约束：&lt;span&gt;&lt;strong&gt;DISABLE|ENABLE  CONSTRAINT  constraint_name;  或者 &lt;/strong&gt;DROP CONSTRAINT constraint_name ;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;strong&gt;5、检查约束（CHECK）&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;注：检查约束就是限制数据的实际意义，比如现实生活中工资不会出现负数，所以在表设计的时候，工资字段就要设置检查约束，使其大于等于0&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;strong&gt;创建表的时候添加检查约束：&lt;span&gt;&lt;strong&gt;CREATE TABLE table_name (col_name datype CHECK( 具体的约束条件  ));  或者  &lt;/strong&gt;CONSTRAINT constraint_name CHECK (条件);&lt;/span&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;strong&gt;修改表时添加检查约束：&lt;span&gt;&lt;strong&gt;&lt;strong&gt;ALTER TABLE tbale_name ADD &lt;/strong&gt;CONSTRAINT constraint_name CHECK (条件)&lt;/strong&gt;; &lt;/span&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;strong&gt;删除检查约束：&lt;span&gt;&lt;strong&gt;&lt;strong&gt;DISABLE|ENABLE  CONSTRAINT  constraint_name;  或者 &lt;/strong&gt;DROP CONSTRAINT constraint_name ;&lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;三、查询&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1、运算符 &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;算数运算符： &lt;strong&gt;+、-、*、/&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;比较运算符：&lt;strong&gt;&amp;gt; , &amp;gt;= , &amp;lt; , &amp;lt;= , = , &amp;lt;&amp;gt;         &lt;/strong&gt; &lt;span&gt;注：主要用在where关键字后面，结果为布尔值&lt;strong&gt; &lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;逻辑运算符：&lt;strong&gt;NOT,  AND , OR        &lt;/strong&gt;&lt;span&gt;用以链接条件，对应着并，或，非。&lt;/span&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;表达式 = 操作数 + 运算符        &lt;span&gt; &lt;span&gt;这里的操作数在oracle中可以是变量，常量，字段&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2、基本查找语句(SELECT)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;基本语句格式：&lt;span&gt;SELECT col-name1,col-name2... | * FROM table_name;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3、条件查询(SELECT .... WHERE ...)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;基本语句格式：&lt;span&gt;SELECT &lt;strong&gt;col-name1,col-name2... | * FROM table_name WHERE 具体的条件表达式&lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;strong&gt;                    &lt;span&gt;例如：  SELECT  username,password FROM userinfo WHERE id&amp;gt;=1 AND salary &amp;gt;500;      &lt;span&gt; //查询id大于1，工资大于500的所有用户的账号和密码信息&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4、模糊查询（LIKE）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;          &lt;span&gt;LIKE运算符可以归为比较运算符的一种，通过 LIKE 关键字配合通配符  ‘_，%’ 构成实现模糊查询的表达式，放置where后面即可。&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;  &quot; _ &quot; :  一个 ' _ '仅能代替一个字符，例如 a_，代表首字母为a，后面仅有一位字符的组合。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;  &quot; % &quot;:代表0个或多个字符，不限个数，例如  %a，代表末尾为a的所有字符组合&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;基本语句格式：&lt;span&gt;SELECT  * | col-name1,col-name2... FROM table_name WHERE  col-name LIKE  ' 通配符组成的信息 '&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;例如：   SELECT * FROM  userinfo WHERE username LIKE ‘a% ’    &lt;span&gt; //查询用户名以a为首字母的所有信息&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;strong&gt;SELECT email FROM  userinfo WHERE username LIKE ‘_a% ’     &lt;span&gt;// 查询用户名第二个字符为a的邮箱&lt;/span&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;SELECT username FROM  userinfo WHERE username LIKE ‘%a% ’    &lt;span&gt;//查询用户名中包含a字母的所有用户的用户名&lt;/span&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5、范围查询（BETWEEN.....AND....）&lt;/strong&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;主要通过 between  and 的组合构成某项属性的范围条件，与之前的条件查询中运用&amp;lt;,&amp;gt;运算符进行条件查询效果一致，同时进行条件表达式组合时也可以配合NOT 进行组合，例如 NOT BETWEEN 30 AND 50，即是查小于30和大于50的范围&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;基本语句格式： &lt;span&gt;SELECT * | col-name1,col-name2... FROM table_name WHERE col-name BETWEEN ? AND ?;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;6、并表查询&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;strong&gt;&lt;span&gt;并表查询主要依附于表的链接(JOIN)，表的链接分为，内连接，外连接，交叉连接。&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;内连接基本语句格式：&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;SELECT *FROM table1 [inner] join table2 on table1.字段1=table2.字段1....;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;内连接基本语句格式2：&lt;span&gt;SELECT * FROM table1,table2  WHERE &lt;strong&gt;table1.字段1=table2.字段1....;&lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;strong&gt;交叉连接：表与表之间做笛卡儿积，&lt;span&gt;SELECT * FROM table1，table2....&lt;/span&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;strong&gt;外连接又可细分为左外连接，右外连接和全连接&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;①左外连接：LEFT OUTER JOIN &lt;/p&gt;&lt;p&gt;           左侧的表中的全部数据都会被显示出来，但是右侧表的数据，只有和左侧匹配上的字段才会被查询出来！否则都会显示null！&lt;/p&gt;
&lt;p&gt;    &lt;strong&gt;&lt;span&gt;基本语句格式1&lt;/span&gt;&lt;/strong&gt;：&lt;strong&gt;&lt;span&gt;SELECT&lt;/span&gt;&lt;span&gt; * FROM table1 LEFT OUTER JOIN  table2 on table1.col-name1=table2.col-name1;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;    &lt;span&gt;&lt;strong&gt;基本语句格式2&lt;/strong&gt;&lt;/span&gt;：&lt;span&gt;&lt;strong&gt;SELECT* FROM table1 LEFT OUTER JOIN  table2 where table1.col-name1=table2.col-name1&lt;/strong&gt;&lt;/span&gt;;&lt;/p&gt;
&lt;p&gt;②右外连接：RIGHT OUTER JOIN &lt;/p&gt;&lt;p&gt;           右侧的表中的全部数据都会被显示出来，但是左侧表的数据，只有和右侧匹配上的字段才会被查询出来！否则都会显示null！&lt;/p&gt;
&lt;p&gt;  &lt;strong&gt;&lt;span&gt;   基本语句格式1：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;strong&gt;SELECT * FROM table1 RIGHT OUTER JOIN  table2 on table1.col-name1=table2.col-name1;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;     &lt;span&gt;&lt;strong&gt;基本语句格式2：&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;SELECT* FROM table1 RIGHT OUTER JOIN  table2 where table1.col-name1=table2.col-name1&lt;/strong&gt;;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;③全外连接：FULL/ALL OUTER JOIN&lt;/p&gt;
&lt;p&gt;     &lt;strong&gt;&lt;span&gt;基本语句格式：&lt;span&gt;&lt;strong&gt;SELECT * FROM table1 FULL OUTER JOIN  table2 on table1.col-name1=table2.col-name1;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
</description>
<pubDate>Wed, 09 May 2018 15:32:00 +0000</pubDate>
<dc:creator>糖拌西红柿</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/TheGCC/p/8964935.html</dc:identifier>
</item>
<item>
<title>五年级--python函数高级运用 - xiaobaiskill</title>
<link>http://www.cnblogs.com/xiaobaiskill/p/8998714.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/xiaobaiskill/p/8998714.html</guid>
<description>&lt;h3&gt; &lt;/h3&gt;
&lt;h3 id=&quot;python1&quot;&gt;&lt;strong&gt;&lt;span&gt;一、装饰器&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;　　&lt;strong&gt;1.1 闭包函数用法&lt;br/&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 需求:&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt; 执行一个函数前需要认证是否登录,如果登录则不需再登录.&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt; 只认证一次,后续操作无需认证&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt; 要求认证使用闭包函数用法&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt; 闭包函数 = 函数嵌套 + 命名空间作用域 + 函数对象&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('0311c6bb-db24-4c26-b3f7-ce35e95d784a')&quot; readability=&quot;35.5&quot;&gt;&lt;img id=&quot;code_img_closed_0311c6bb-db24-4c26-b3f7-ce35e95d784a&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_0311c6bb-db24-4c26-b3f7-ce35e95d784a&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('0311c6bb-db24-4c26-b3f7-ce35e95d784a',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_0311c6bb-db24-4c26-b3f7-ce35e95d784a&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;66&quot;&gt;
&lt;pre&gt;
login_status =&lt;span&gt; {
    &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;user&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:None,
    &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;status&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:None
}


&lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; login(user:str,pwd:str):
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; user == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;jmz&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; &lt;span&gt;and&lt;/span&gt; pwd ==&lt;span&gt;'&lt;/span&gt;&lt;span&gt;123&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; True
    &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;:
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; False

&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 认证用户是否登录成功&lt;/span&gt;
&lt;span&gt;def&lt;/span&gt;&lt;span&gt; auth(func):
    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt; wrapper(*args,**&lt;span&gt;kwargs):
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; login_status[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;user&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] &lt;span&gt;and&lt;/span&gt; login_status[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;status&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]:
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; func(*args,**&lt;span&gt;kwargs)
        &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;:
            uname &lt;/span&gt;= input(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;username&amp;gt;&amp;gt;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;).strip()
            upwd &lt;/span&gt;= input(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;password&amp;gt;&amp;gt;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;).strip()
            res &lt;/span&gt;=&lt;span&gt;login(uname,upwd)
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; res:
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; func(*args, **&lt;span&gt;kwargs)
            &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;:
                &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;认证失败&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; wrapper



&lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; index():
    &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;from index&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)

index &lt;/span&gt;=&lt;span&gt; auth(index)

&lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; cat():
    &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;form cat&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)

index()
cat()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;实现&lt;/span&gt;&lt;/div&gt;
&lt;p&gt; 　&lt;strong&gt;　1.2 什么是装饰器&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt;  什么是装饰器&lt;/span&gt;
    &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 1、装饰即修饰，器指的就是工具&lt;/span&gt;
    &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 2、装饰器本身可以是任意可调用的对象&lt;/span&gt;
    &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 3、被装饰的对象也可以是任意可调用的对象&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　&lt;strong&gt;1.3 为什么要使用装饰器&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt;  为什么要使用装饰器&lt;/span&gt;
    &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 1、在不改变原有的调用方式,不改变原方法的前提下，如何实现对内容上的新增？？&lt;/span&gt;
    &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 例如：&lt;/span&gt;
        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 今天公司cto要求对一些方法添加文件的日志记录（此时你是否需要对每一个方法添加日志的记录？）&lt;/span&gt;
        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 第二天CTO 突然改变主意说 原来的方法添加日志记录改为 mysql 记录（此时你是否又要修改每一个方法的日志记录？？）&lt;/span&gt;
        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 我知道你此时此刻一定会想，我可以写一个日志记录方法，让每一个方法内部调用这个方法（很不错的想法）&lt;/span&gt;
        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 第三天 你的公司cto 告诉你，我的日志一定要记录那些方法执行的开始和结束时间。（是不是有点懵X了？你该怎么办？？）&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　&lt;strong&gt;1.4 怎么用装饰器&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 是否是和上面的那个闭包函数很像呀（其实装饰器就是闭包函数的一种运用）&lt;/span&gt;
    &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 装饰器语法糖：&lt;/span&gt;
    &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 在被装饰对象的正上方一行写@装饰器的名字&lt;/span&gt;
    &lt;span&gt;#&lt;/span&gt;&lt;span&gt; @auth   ==&amp;gt; func = auth(func)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('e57b700a-78f5-4d7e-a2f7-c27339548954')&quot; readability=&quot;35.5&quot;&gt;&lt;img id=&quot;code_img_closed_e57b700a-78f5-4d7e-a2f7-c27339548954&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_e57b700a-78f5-4d7e-a2f7-c27339548954&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('e57b700a-78f5-4d7e-a2f7-c27339548954',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_e57b700a-78f5-4d7e-a2f7-c27339548954&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;66&quot;&gt;
&lt;pre&gt;
login_status =&lt;span&gt; {
    &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;user&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:None,
    &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;status&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:None
}

&lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; login(user:str,pwd:str):
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; user == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;jmz&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; &lt;span&gt;and&lt;/span&gt; pwd ==&lt;span&gt;'&lt;/span&gt;&lt;span&gt;123&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
        login_status[&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;user&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;]=&lt;span&gt;user
        login_status[&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;status&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;]=&lt;span&gt;True
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; True
    &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;:
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; False

&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 认证用户是否登录成功&lt;/span&gt;
&lt;span&gt;def&lt;/span&gt;&lt;span&gt; auth(func):
    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt; wrapper(*args,**&lt;span&gt;kwargs):
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; login_status[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;user&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] &lt;span&gt;and&lt;/span&gt; login_status[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;status&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]:
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; func(*args,**&lt;span&gt;kwargs)
        &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;:
            uname &lt;/span&gt;= input(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;username&amp;gt;&amp;gt;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;).strip()
            upwd &lt;/span&gt;= input(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;password&amp;gt;&amp;gt;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;).strip()
            res &lt;/span&gt;=&lt;span&gt;login(uname,upwd)
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; res:
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; func(*args, **&lt;span&gt;kwargs)
            &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;:
                &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;认证失败&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; wrapper


@auth
&lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; index():
    &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;from index&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)

@auth
&lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; cat():
    &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;form cat&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)

index()
cat()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;怎么使用装饰器&lt;/span&gt;&lt;/div&gt;
&lt;p&gt; 　　&lt;strong&gt;1.5 有参装饰器&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 上面的装饰器只是使用了固定的用户jmz,登录，而且没有实现以哪种方式 验证（文件方式，还是mysql方式）&lt;/span&gt;
    &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 如果我需要暂时以文件的方式验证，后期再改为使用mysql 方式验证该如何使用？？？ （尽量减少代码的修改）&lt;/span&gt;
    &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 要求：&lt;/span&gt;
        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 1、验证的方式是不固定的&lt;/span&gt;
        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 2、使用的装饰器要兼顾至少两种以上的验证方式&lt;/span&gt;
        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 3、需要能够随时给方法添加验证或撤销验证&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('05a23d2a-29ae-4550-b665-e892fa458db8')&quot; readability=&quot;36.5&quot;&gt;&lt;img id=&quot;code_img_closed_05a23d2a-29ae-4550-b665-e892fa458db8&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_05a23d2a-29ae-4550-b665-e892fa458db8&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('05a23d2a-29ae-4550-b665-e892fa458db8',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_05a23d2a-29ae-4550-b665-e892fa458db8&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;68&quot;&gt;
&lt;pre&gt;
login_status =&lt;span&gt; {
    &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;user&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:None,
    &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;status&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:None
}

&lt;/span&gt;&lt;span&gt;def&lt;/span&gt; login(user:str,pwd:str,type=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;file&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;):
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; type == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;file&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 假设这就是文件认证&lt;/span&gt;
        &lt;span&gt;if&lt;/span&gt; user == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;jmz&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; &lt;span&gt;and&lt;/span&gt; pwd == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;123&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
            login_status[&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;user&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] =&lt;span&gt; user
            login_status[&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;status&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] =&lt;span&gt; True
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; True
        &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;:
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; False
    &lt;/span&gt;&lt;span&gt;elif&lt;/span&gt; type ==&lt;span&gt;'&lt;/span&gt;&lt;span&gt;mysql&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 假设这就是mysql认证&lt;/span&gt;
        &lt;span&gt;if&lt;/span&gt; user == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;jmz&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; &lt;span&gt;and&lt;/span&gt; pwd == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;123&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
            login_status[&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;user&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] =&lt;span&gt; user
            login_status[&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;status&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] =&lt;span&gt; True
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; True
        &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;:
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; False



&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 认证用户是否登录成功&lt;/span&gt;
&lt;span&gt;def&lt;/span&gt; auth(type=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;file&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;):
    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; auth2(func):
        &lt;/span&gt;&lt;span&gt;def&lt;/span&gt; wrapper(*args,**&lt;span&gt;kwargs):
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; login_status[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;user&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] &lt;span&gt;and&lt;/span&gt; login_status[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;status&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]:
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; func(*args,**&lt;span&gt;kwargs)
            &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;:
                uname &lt;/span&gt;= input(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;username&amp;gt;&amp;gt;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;).strip()
                upwd &lt;/span&gt;= input(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;password&amp;gt;&amp;gt;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;).strip()
                res &lt;/span&gt;=&lt;span&gt;login(uname,upwd,type)
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; res:
                    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; func(*args, **&lt;span&gt;kwargs)
                &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;:
                    &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;认证失败&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; wrapper
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; auth2


@auth(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;file&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; index():
    &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;from index&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)

@auth(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;file&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; cat():
    &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;form cat&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)

index()
cat()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;有参装饰器&lt;/span&gt;&lt;/div&gt;

&lt;h3 id=&quot;python2&quot;&gt;&lt;strong&gt;&lt;span&gt;二、迭代器&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;　　&lt;strong&gt;2.1 什么是迭代器？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　　　迭代的工具:&lt;/p&gt;
&lt;p&gt;　　　　　　迭代是一个重复的过程,每一次的重复都是基于上一次的结果进行的　　　　　　&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 这不是迭代&lt;/span&gt;
&lt;span&gt;while&lt;/span&gt;&lt;span&gt; True:
    &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;....&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　&lt;strong&gt;2.2 为什么要使用迭代器？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　　　找到一种不依赖于索引的迭代的方式?&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 1、列表是自带索引的，那么如何迭代没有索引的呢？？？（禁止使用for）&lt;/span&gt;
l = [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;b&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;c&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]
k &lt;/span&gt;=&lt;span&gt; 0
&lt;/span&gt;&lt;span&gt;while&lt;/span&gt; k&amp;lt;&lt;span&gt;len(l):
    &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(l[k])
    k&lt;/span&gt;+=1


&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 2、如何循环取一个无限大的值？&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt;     如果使用上面的方法显然是不现实的，因为你的列表是存不下无限大的值的（列表的数据占着内存的空间）&lt;/span&gt;


&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 那怎么办呢？&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　&lt;strong&gt;2.3 怎么使用迭代器？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　　　2.3.1　可迭代对象&lt;/p&gt;
&lt;p&gt;　　　　　　　　python 中,但凡内置__iter__方法的,都是可迭代对象&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
a = 1&lt;span&gt;
b &lt;/span&gt;= 1.1
&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 以下都是可以使用__iter__ 方法&lt;/span&gt;
c = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;abcd&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt;c.__iter__()&lt;/span&gt;
d = [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;b&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;c&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; d.__iter__()&lt;/span&gt;
e = (&lt;span&gt;'&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;b&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;c&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; e.__iter__()&lt;/span&gt;
f = {&lt;span&gt;'&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:1,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;b&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:2&lt;span&gt;}
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; f.__iter__()&lt;/span&gt;
g={&lt;span&gt;'&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;b&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;c&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;}
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; g.__iter__()&lt;/span&gt;
h=open(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;a.txt&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;r&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 本身就是一个迭代器对象&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　　　　2.3.2 迭代器对象　　　　　　　&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre readability=&quot;4&quot;&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt;     可迭代对象：在python中但凡有内置方法__iter__的对象，都是可迭代对象&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt;     迭代器对象 ：&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt;         执行可迭代对象下__iter__方法后得到迭代器对象&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt;     迭代器对象的内置方法&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt;         __next__&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span readability=&quot;2&quot;&gt;         __iter__方法,执行该方法得到仍然是迭代器本身，干什么用？？(等下解释)&lt;p&gt;# 有了迭代器我们就不需要依赖索引取值了&lt;br/&gt;&lt;/p&gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;span&gt;#       注意： &lt;/span&gt;&lt;br/&gt;&lt;span&gt;#　　　　　　1、迭代器对象一定是对迭代对象&lt;/span&gt;&lt;br/&gt;&lt;span&gt;#　　　　　　2、可迭代对象不一定是迭代器对象&lt;/span&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;span&gt; &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('057077f9-fe32-460a-a773-a77729d82786')&quot; readability=&quot;34&quot;&gt;&lt;img id=&quot;code_img_closed_057077f9-fe32-460a-a773-a77729d82786&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_057077f9-fe32-460a-a773-a77729d82786&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('057077f9-fe32-460a-a773-a77729d82786',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_057077f9-fe32-460a-a773-a77729d82786&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;63&quot;&gt;
&lt;pre&gt;
dic = {&lt;span&gt;'&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:1,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;b&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:2,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;c&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:3,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;d&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:4&lt;span&gt;}
iter_obj &lt;/span&gt;= dic.&lt;span&gt;__iter__&lt;/span&gt;&lt;span&gt;()
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(next(iter_obj))     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; a&lt;/span&gt;
&lt;span&gt;print&lt;/span&gt;(next(iter_obj))     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; b&lt;/span&gt;
&lt;span&gt;
iter_obj1 &lt;/span&gt;= dic.&lt;span&gt;__iter__&lt;/span&gt;()     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 重新 做了一次迭代器对象操作&lt;/span&gt;
&lt;span&gt;print&lt;/span&gt;(next(iter_obj1))    &lt;span&gt;#&lt;/span&gt;&lt;span&gt; a。 &lt;/span&gt;
&lt;span&gt;

iter_obj &lt;/span&gt;= iter_obj.&lt;span&gt;__iter__&lt;/span&gt;()      &lt;span&gt;#&lt;/span&gt;&lt;span&gt; iter_obj.__iter__()  is iter_obj     #True&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt;iter_obj.__iter__() 无论执行多少次都是本身&lt;/span&gt;
&lt;span&gt;print&lt;/span&gt;(next(iter_obj))     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; c    # 会继续给予上一次的操作继续执行&lt;/span&gt;
&lt;span&gt;print&lt;/span&gt;(next(iter_obj))     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; d&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;__iter__ ,迭代器对象执行后任然是本身&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('9f72afd1-1937-43fd-9832-e48294af0a7b')&quot; readability=&quot;33&quot;&gt;&lt;img id=&quot;code_img_closed_9f72afd1-1937-43fd-9832-e48294af0a7b&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_9f72afd1-1937-43fd-9832-e48294af0a7b&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('9f72afd1-1937-43fd-9832-e48294af0a7b',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_9f72afd1-1937-43fd-9832-e48294af0a7b&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;61&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt;for循环的底层运行机制：for循环可以称之为迭代器循环&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt;1、先调用in后那个对象的__iter__方法，得到该对象的迭代器对象&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt;2、执行迭代器对象的__next__方法，将得到的返回值赋值in前面的变量名，然后执行一次循环体代码&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt;3、循环往复，直到取干净迭代器内所有的值，自动捕捉异常结束循环&lt;/span&gt;
dic = {&lt;span&gt;'&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:1,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;b&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:2&lt;span&gt;}

iter_obj &lt;/span&gt;= dic.&lt;span&gt;__iter__&lt;/span&gt;&lt;span&gt;()
&lt;/span&gt;&lt;span&gt;while&lt;/span&gt;&lt;span&gt; True:
    &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; :
        &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(dic[iter_obj.&lt;span&gt;__next__&lt;/span&gt;&lt;span&gt;()])
    &lt;/span&gt;&lt;span&gt;except&lt;/span&gt;&lt;span&gt; StopIteration:
        &lt;/span&gt;&lt;span&gt;break&lt;/span&gt;

&lt;span&gt;for&lt;/span&gt; k &lt;span&gt;in&lt;/span&gt; dic: &lt;span&gt;#&lt;/span&gt;&lt;span&gt;iter_obj=dic.__iter__()&lt;/span&gt;
    &lt;span&gt;print&lt;/span&gt;(dic[k])
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;for 循环实现原理&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;　　　&lt;strong&gt;2.4 总结&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('17ad30dd-fcf7-4728-b534-e414692147c0')&quot; readability=&quot;32&quot;&gt;&lt;img id=&quot;code_img_closed_17ad30dd-fcf7-4728-b534-e414692147c0&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_17ad30dd-fcf7-4728-b534-e414692147c0&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('17ad30dd-fcf7-4728-b534-e414692147c0',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_17ad30dd-fcf7-4728-b534-e414692147c0&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;59&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 优点：&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt;        1、不依赖于索引的迭代取值&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt;        2、节省内存，计算取值&lt;/span&gt;

&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 缺点：&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt;        1、无法获取长度&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt;        2、只能next,不能向上取值，只能想下直至结束&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;迭代器的优缺点&lt;/span&gt;&lt;/div&gt;

&lt;h3 id=&quot;python3&quot;&gt;&lt;span&gt;&lt;strong&gt;三、生成器&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;　　&lt;strong&gt;3.1 什么是生成器&lt;/strong&gt;　&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 函数内部含有yield关键字，那么该函数（） 即为生成器。&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt; 自定义迭代器&lt;/span&gt;

&lt;span&gt;def&lt;/span&gt;&lt;span&gt; func():
    &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;first&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;yield&lt;/span&gt; 1
    &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;second&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;yield&lt;/span&gt; 2
    &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;third&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;yield&lt;/span&gt; 3&lt;span&gt;

f &lt;/span&gt;=&lt;span&gt; func()
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(f) &lt;span&gt;&lt;strong&gt;#&amp;lt;generator object func at 0x0000000001DF0DB0&amp;gt;&lt;/strong&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　&lt;strong&gt;3.2 生成器的使用方式&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('e4d77900-d82f-4c6c-8362-3792f140b982')&quot; readability=&quot;35&quot;&gt;&lt;img id=&quot;code_img_closed_e4d77900-d82f-4c6c-8362-3792f140b982&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_e4d77900-d82f-4c6c-8362-3792f140b982&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('e4d77900-d82f-4c6c-8362-3792f140b982',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_e4d77900-d82f-4c6c-8362-3792f140b982&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;65&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt; yield 返回值操作&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt; 生成器就是迭代器，所以用法与迭代器一样&lt;/span&gt;

&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 仿range函数&lt;/span&gt;
&lt;span&gt;def&lt;/span&gt; range(start:int,end:int,step=1&lt;span&gt;):
    &lt;/span&gt;&lt;span&gt;while&lt;/span&gt; start &amp;lt;&lt;span&gt; end:
        &lt;/span&gt;&lt;span&gt;yield&lt;/span&gt; start        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 当一次next 执行到这里时便会返回start,并停止，下一次操作会从本次停止的地方继续往下执行，&lt;/span&gt;
        start += step       &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 直到再次遇到 yield 再停止，返回后面的值&lt;/span&gt;
&lt;span&gt;
num &lt;/span&gt;= range(1,6,2&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(num.&lt;span&gt;__next__&lt;/span&gt;&lt;span&gt;())
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(num.&lt;span&gt;__next__&lt;/span&gt;&lt;span&gt;())
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(num.&lt;span&gt;__next__&lt;/span&gt;&lt;span&gt;())

&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; yield ： 具有停止本次操作，并return yield 后面的值，与return的返回值一样&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;生成器使用方式一&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('ad5b3b68-66d0-440f-93a9-7493a7c36d3d')&quot; readability=&quot;33&quot;&gt;&lt;img id=&quot;code_img_closed_ad5b3b68-66d0-440f-93a9-7493a7c36d3d&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_ad5b3b68-66d0-440f-93a9-7493a7c36d3d&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('ad5b3b68-66d0-440f-93a9-7493a7c36d3d',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_ad5b3b68-66d0-440f-93a9-7493a7c36d3d&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;61&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt; yield 传值操作&lt;/span&gt;
&lt;span&gt;def&lt;/span&gt;&lt;span&gt; doing(name):
    &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;%s开始干活了&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;%&lt;span&gt;name)
    thing_list &lt;/span&gt;=&lt;span&gt; set()
    &lt;/span&gt;&lt;span&gt;while&lt;/span&gt;&lt;span&gt; True:
        do_thing &lt;/span&gt;= &lt;span&gt;yield&lt;/span&gt; thing_list          &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 返回thing_list&lt;/span&gt;
        &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;%s 正在%s&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;%&lt;span&gt;(name,do_thing))
        thing_list.add(do_thing)


xiaoming &lt;/span&gt;= doing(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;xiaoming&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
next(xiaoming)                   &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 第一次使用，需暂停到yield 那边&lt;/span&gt;
&lt;span&gt;print&lt;/span&gt;(xiaoming.send(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;做饭&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;))    &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 先给yield 传值， 之后再接受执行到下一个yield的返回值&lt;/span&gt;
&lt;span&gt;print&lt;/span&gt;(xiaoming.send(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;吃饭&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;))
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(xiaoming.send(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;干活&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;))
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(xiaoming.send(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;睡觉&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;))
xiaoming.close()                 &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 关闭生成器&lt;/span&gt;
xiaoming.send(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;起床时&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 此时无法再传值执行，并且报错&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;生成器使用方式二&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;　　&lt;strong&gt;3.3 总结&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 1、可以像return 一样，返回值，但又可以多次返回&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt; 2、可以挂起/保存函数的当前状态，可以达到随用随启动的程度&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt; 3、可以多次传值操作&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;python4&quot;&gt;&lt;span&gt;&lt;strong&gt;四、练习&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 作业一:写一个取基数的操作 (迭代器)&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt; 作业二:咖啡3元，糖0.5元 牛奶2元，平时咖啡单点的，活动需要，需加糖与牛奶捆绑销售(装饰器)&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt; 作业三:用户购买商品，以邮箱或短信的形式通知(装饰器)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('72abb694-d7b3-43f5-8251-45feb7a6ebb2')&quot; readability=&quot;35.5&quot;&gt;&lt;img id=&quot;code_img_closed_72abb694-d7b3-43f5-8251-45feb7a6ebb2&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_72abb694-d7b3-43f5-8251-45feb7a6ebb2&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('72abb694-d7b3-43f5-8251-45feb7a6ebb2',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_72abb694-d7b3-43f5-8251-45feb7a6ebb2&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;66&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt;作业一&lt;/span&gt;
&lt;span&gt;def&lt;/span&gt;&lt;span&gt; jishu():
    num &lt;/span&gt;= 1
    &lt;span&gt;while&lt;/span&gt;&lt;span&gt; True:
        is_true &lt;/span&gt;=&lt;span&gt; True
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; num &amp;gt; 1&lt;span&gt;:
            count &lt;/span&gt;= 2
            &lt;span&gt;while&lt;/span&gt; count &amp;lt; num - 1&lt;span&gt;:
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; num%count==&lt;span&gt;0:
                    is_true &lt;/span&gt;=&lt;span&gt; False
                    &lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;
                count &lt;/span&gt;+=1
        &lt;span&gt;if&lt;/span&gt;&lt;span&gt; is_true:
            &lt;/span&gt;&lt;span&gt;yield&lt;/span&gt;&lt;span&gt; num
        num &lt;/span&gt;+=1&lt;span&gt;

num &lt;/span&gt;=&lt;span&gt; jishu()
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(next(num))
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(next(num))
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(next(num))
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(next(num))
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(next(num))

&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;作业二&lt;/span&gt;
&lt;span&gt;def&lt;/span&gt;&lt;span&gt; sugar(func):
    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt; wrapper(*args,**&lt;span&gt;kwargs):
        res &lt;/span&gt;= func(*args,**&lt;span&gt;kwargs)
        res &lt;/span&gt;+= 0.5
        &lt;span&gt;return&lt;/span&gt;&lt;span&gt; res
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; wrapper

&lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; milk(func):
    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt; wrapper(*args,**&lt;span&gt;kwargs):
        res &lt;/span&gt;= func(*args,**&lt;span&gt;kwargs)
        res &lt;/span&gt;+= 2.5
        &lt;span&gt;return&lt;/span&gt;&lt;span&gt; res
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; wrapper

@sugar
@milk
&lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; coffee():
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; 3


&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(coffee())

&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;作业三&lt;/span&gt;
&lt;span&gt;def&lt;/span&gt; notice(type=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;email&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;):
    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; shopping(func):
        &lt;/span&gt;&lt;span&gt;def&lt;/span&gt; wrapper(*args,**&lt;span&gt;kwargs):
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; type == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;email&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
                &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;邮箱通知成功&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
            &lt;/span&gt;&lt;span&gt;elif&lt;/span&gt; type == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;sms&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
                &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;短信通知成功&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; func(*args,**&lt;span&gt;kwargs)
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; wrapper
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; shopping


@notice(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;sms&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; shopping(good):
    &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;成功购买了%s商品&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;%&lt;span&gt;good)

shopping(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;电脑&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;作业&lt;/span&gt;&lt;/div&gt;

</description>
<pubDate>Wed, 09 May 2018 15:22:00 +0000</pubDate>
<dc:creator>xiaobaiskill</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/xiaobaiskill/p/8998714.html</dc:identifier>
</item>
<item>
<title>mysql-列属性 - wyao</title>
<link>http://www.cnblogs.com/nordon-wang/p/9017227.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/nordon-wang/p/9017227.html</guid>
<description>&lt;ul&gt;&lt;li&gt;列属性是真正约束字段的数据类型，但是数据类型的约束很单一，需要有一些额外的约束来确保数据的合法性&lt;/li&gt;
&lt;li&gt;NULL/NOT NULL、default、primary key、unique key、auto_increment、comment等&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;空属性&quot;&gt;空属性&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;NULL、NOT NULL两个值&lt;/li&gt;
&lt;li&gt;虽然数据库基本上字段都是默认的为空，但是实际上需要尽可能的保证所有数据都不应该为空，空数据没有任何意义，也没有办法参加与运算&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode sql&quot;&gt;
&lt;code class=&quot;sourceCode sql&quot;&gt;&lt;span class=&quot;co&quot;&gt;-- 创建表&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;table&lt;/span&gt; my_class(
    name &lt;span class=&quot;dt&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;20&lt;/span&gt;) &lt;span class=&quot;kw&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;,
    room &lt;span class=&quot;dt&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;20&lt;/span&gt;) &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;-- 代表允许为空: 不写默认就是允许为空&lt;/span&gt;
)charset utf8;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;列描述&quot;&gt;列描述&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;列描述comment，是对字段进行注释备注，方便理解说明字段的功能和意义&lt;/li&gt;
&lt;li&gt;使用 comment '列描述' 进行定义&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode sql&quot;&gt;
&lt;code class=&quot;sourceCode sql&quot;&gt;&lt;span class=&quot;co&quot;&gt;-- 创建表&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;table&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;exists&lt;/span&gt; my_teacher(
    name &lt;span class=&quot;dt&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;20&lt;/span&gt;) &lt;span class=&quot;kw&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;comment&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'姓名'&lt;/span&gt;,
    money &lt;span class=&quot;dt&quot;&gt;decimal&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;) &lt;span class=&quot;kw&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;comment&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'工资'&lt;/span&gt;
)charset utf8;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;默认值&quot;&gt;默认值&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;如果某一中数据会经常性的出现某个具体的值，可以在一开始就指定好，在需要使用真实数据的时候，可以选择性的使用默认值&lt;/li&gt;
&lt;li&gt;使用 default '具体的值' 进行定义&lt;/li&gt;
&lt;li&gt;想要使用默认值,可以不一定去指定列表,故意不使用字段列表: 可以使用default关键字代替值&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;15&quot;&gt;
&lt;pre class=&quot;sourceCode sql&quot;&gt;
&lt;code class=&quot;sourceCode sql&quot;&gt;&lt;span class=&quot;co&quot;&gt;-- 创建表&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;table&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;exists&lt;/span&gt; my_default(
    name &lt;span class=&quot;dt&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;20&lt;/span&gt;) &lt;span class=&quot;kw&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;,
    age tinyint unsigned &lt;span class=&quot;kw&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;,
    gender enum(&lt;span class=&quot;st&quot;&gt;'男'&lt;/span&gt;,&lt;span class=&quot;st&quot;&gt;'女'&lt;/span&gt;,&lt;span class=&quot;st&quot;&gt;'保密'&lt;/span&gt;) &lt;span class=&quot;kw&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'男'&lt;/span&gt;
)charset utf8;

&lt;span class=&quot;co&quot;&gt;-- 插入数据&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;into&lt;/span&gt; my_default (name) &lt;span class=&quot;kw&quot;&gt;values&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'王耀'&lt;/span&gt;);

&lt;span class=&quot;kw&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;into&lt;/span&gt; my_default &lt;span class=&quot;kw&quot;&gt;values&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'李四'&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;18&lt;/span&gt;,&lt;span class=&quot;kw&quot;&gt;default&lt;/span&gt;);&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;主键&quot;&gt;主键&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;主键：primary key，一张表&lt;code&gt;只能有一个字段&lt;/code&gt;可以设置为主键，用来唯一的约束该字段里面的数据，不能重复&lt;/li&gt;
&lt;li&gt;主键本身是不允许为空的&lt;/li&gt;
&lt;/ul&gt;&lt;ol&gt;&lt;li&gt;在创建表的时候直接在字段之后跟primary key 关键字进行设置主键，这种方式非常直接，但是只能使用一个字段作为主键，不能使用复合主键&lt;/li&gt;
&lt;/ol&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode sql&quot;&gt;
&lt;code class=&quot;sourceCode sql&quot;&gt;&lt;span class=&quot;co&quot;&gt;-- 直接跟primary key关键字&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;table&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;exists&lt;/span&gt; my_pri1(
    name &lt;span class=&quot;dt&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;20&lt;/span&gt;) &lt;span class=&quot;kw&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;comment&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'username'&lt;/span&gt;,
    &lt;span class=&quot;dt&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;char&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;) &lt;span class=&quot;kw&quot;&gt;primary&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;comment&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'编号,不能重复'&lt;/span&gt;
)charset utf8;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ol&gt;&lt;li&gt;在创建表的时候，在所有的字段都设置完之后，使用primary key(主键字段列表)来创建主键，如若是使用多个字段作为主键，这就是复合主键&lt;/li&gt;
&lt;/ol&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;14&quot;&gt;
&lt;pre class=&quot;sourceCode sql&quot;&gt;
&lt;code class=&quot;sourceCode sql&quot;&gt;&lt;span class=&quot;co&quot;&gt;-- 使用复合主键&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;table&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;exists&lt;/span&gt; my_pri2(
    &lt;span class=&quot;dt&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;char&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;) &lt;span class=&quot;kw&quot;&gt;comment&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'username'&lt;/span&gt;,
    course &lt;span class=&quot;dt&quot;&gt;char&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;) &lt;span class=&quot;kw&quot;&gt;comment&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'课程'&lt;/span&gt;,
    score tinyint unsigned &lt;span class=&quot;kw&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;60&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;comment&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'分数'&lt;/span&gt;,
    &lt;span class=&quot;kw&quot;&gt;primary&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;key&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;number&lt;/span&gt;,course) &lt;span class=&quot;co&quot;&gt;-- 复合主键，增加主键限制，number 和 course组合一起具有唯一性&lt;/span&gt;
)charset utf8;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ol&gt;&lt;li&gt;当表已经创建好之后，额外追加主键，前提是表中字段对应的数据本身是独立的不能重复&lt;/li&gt;
&lt;/ol&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode sql&quot;&gt;
&lt;code class=&quot;sourceCode sql&quot;&gt;&lt;span class=&quot;kw&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;table&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;exists&lt;/span&gt; my_pri3(
    &lt;span class=&quot;dt&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;char&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;) &lt;span class=&quot;kw&quot;&gt;comment&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'username'&lt;/span&gt;,
    course &lt;span class=&quot;dt&quot;&gt;char&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;) &lt;span class=&quot;kw&quot;&gt;comment&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'课程'&lt;/span&gt;,
    score tinyint unsigned &lt;span class=&quot;kw&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;60&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;comment&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'分数'&lt;/span&gt;
)charset utf8;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ol&gt;&lt;li&gt;通过修改表字段属性&lt;/li&gt;
&lt;/ol&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode sql&quot;&gt;
&lt;code class=&quot;sourceCode sql&quot;&gt;&lt;span class=&quot;kw&quot;&gt;alter&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;table&lt;/span&gt; my_pri3 &lt;span class=&quot;kw&quot;&gt;modify&lt;/span&gt; course &lt;span class=&quot;dt&quot;&gt;char&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;) &lt;span class=&quot;kw&quot;&gt;primary&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;comment&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'课程'&lt;/span&gt;;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ol&gt;&lt;li&gt;直接追加&lt;/li&gt;
&lt;/ol&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode sql&quot;&gt;
&lt;code class=&quot;sourceCode sql&quot;&gt;&lt;span class=&quot;co&quot;&gt;-- 需要先删除 再测试&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;alter&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;table&lt;/span&gt; my_pri3 &lt;span class=&quot;kw&quot;&gt;drop&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;primary&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;key&lt;/span&gt;;
&lt;span class=&quot;co&quot;&gt;-- 直接增加主键&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;alter&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;table&lt;/span&gt; my_pri3 &lt;span class=&quot;kw&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;primary&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;key&lt;/span&gt;(course);&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;主键约束&quot;&gt;主键约束&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;主键对应字段中的数据是不允许重复的，一旦重复，数据进行增和改操作会失败&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;24&quot;&gt;
&lt;pre class=&quot;sourceCode sql&quot;&gt;
&lt;code class=&quot;sourceCode sql&quot;&gt;
&lt;span class=&quot;co&quot;&gt;-- 向pri1表插入数据&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;into&lt;/span&gt; my_pri1 &lt;span class=&quot;kw&quot;&gt;values&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'古学星'&lt;/span&gt;,&lt;span class=&quot;st&quot;&gt;'0001'&lt;/span&gt;),(&lt;span class=&quot;st&quot;&gt;'蔡仁湾'&lt;/span&gt;,&lt;span class=&quot;st&quot;&gt;'0002'&lt;/span&gt;);
&lt;span class=&quot;kw&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;into&lt;/span&gt; my_pri2 &lt;span class=&quot;kw&quot;&gt;values&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'0001'&lt;/span&gt;,&lt;span class=&quot;st&quot;&gt;'39010001'&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;90&lt;/span&gt;),(&lt;span class=&quot;st&quot;&gt;'0001'&lt;/span&gt;,&lt;span class=&quot;st&quot;&gt;'39010002'&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;85&lt;/span&gt;),(&lt;span class=&quot;st&quot;&gt;'0002'&lt;/span&gt;,&lt;span class=&quot;st&quot;&gt;'39010001'&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;92&lt;/span&gt;);

&lt;span class=&quot;co&quot;&gt;-- 主键冲突(重复)&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;into&lt;/span&gt; my_pri1 &lt;span class=&quot;kw&quot;&gt;values&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'刘辉'&lt;/span&gt;,&lt;span class=&quot;st&quot;&gt;'0002'&lt;/span&gt;); &lt;span class=&quot;co&quot;&gt;-- 不可以: 主键冲突&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;into&lt;/span&gt; my_pri2 &lt;span class=&quot;kw&quot;&gt;values&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'0001'&lt;/span&gt;,&lt;span class=&quot;st&quot;&gt;'39010001'&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;100&lt;/span&gt;); &lt;span class=&quot;co&quot;&gt;-- 不可以:冲突&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;更新删除主键&quot;&gt;更新、删除主键&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;主键是没有办法更新的，只有删除之后才能增加&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode sql&quot;&gt;
&lt;code class=&quot;sourceCode sql&quot;&gt;&lt;span class=&quot;co&quot;&gt;-- 删除主键&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;alter&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;table&lt;/span&gt; my_pri3 &lt;span class=&quot;kw&quot;&gt;drop&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;primary&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;key&lt;/span&gt;;
&lt;span class=&quot;co&quot;&gt;-- 只有删除主键之后才能增加新的主键&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;alter&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;table&lt;/span&gt; my_pri3 &lt;span class=&quot;kw&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;primary&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;key&lt;/span&gt;(course);&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;主键分类&quot;&gt;主键分类&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;在创建表的过程中，应该尽量不要使用真实业务数据作为主键字段，应该尽量使用逻辑性的字段作为主键字段&lt;/li&gt;
&lt;li&gt;业务主键: 主键字段是真实的业务数据，如学号、姓名等&lt;/li&gt;
&lt;li&gt;逻辑主键：主键没有实际的业务含义，字段值为什么并没有什么关系，也没有什么影响，&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;sourceCode sql&quot;&gt;
&lt;code class=&quot;sourceCode sql&quot;&gt;&lt;span class=&quot;co&quot;&gt;-- 使用逻辑主键&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;table&lt;/span&gt; my_student(
    &lt;span class=&quot;kw&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;primary&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;key&lt;/span&gt; auto_increment &lt;span class=&quot;kw&quot;&gt;comment&lt;/span&gt; ‘逻辑主键: 自增长’,  &lt;span class=&quot;co&quot;&gt;-- 逻辑主键&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;char&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;) &lt;span class=&quot;kw&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;  &lt;span class=&quot;kw&quot;&gt;comment&lt;/span&gt; ‘学号’,
    name &lt;span class=&quot;dt&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;) &lt;span class=&quot;kw&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;
)charset utf8;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;自增长&quot;&gt;自增长&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;自增长：当某个字段设置自增长，不给值或者给默认值或者NULL的时候，会自动被系统触发，系统会从当前字段中&lt;code&gt;已有的最大值+1&lt;/code&gt;操作，得到一个新的唯一的字段&lt;/li&gt;
&lt;li&gt;自增长一般会搭配主键进行使用&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;特点&quot;&gt;特点&lt;/h3&gt;
&lt;ol&gt;&lt;li&gt;任何一个字段要做自增长必须当前字段本身是一个所有(就是desc的时候，key一栏必须有值)，否则不能添加自增长属性&lt;/li&gt;
&lt;li&gt;自增长子弹必须是数字(整型)&lt;/li&gt;
&lt;li&gt;一张表最多只能存在一个自增长字段&lt;/li&gt;
&lt;/ol&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode sql&quot;&gt;
&lt;code class=&quot;sourceCode sql&quot;&gt;&lt;span class=&quot;co&quot;&gt;-- 自增长&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;table&lt;/span&gt; my_auto(
&lt;span class=&quot;kw&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;primary&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;key&lt;/span&gt; auto_increment &lt;span class=&quot;kw&quot;&gt;comment&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'自动增长'&lt;/span&gt;,
name &lt;span class=&quot;dt&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;) &lt;span class=&quot;kw&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;
)charset utf8;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;使用&quot;&gt;使用&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;当自增长被给定的值为NULL或者默认值的时候会触发自动增长&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode sql&quot;&gt;
&lt;code class=&quot;sourceCode sql&quot;&gt;&lt;span class=&quot;co&quot;&gt;-- 触发自增长&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;into&lt;/span&gt; my_auto(name) &lt;span class=&quot;kw&quot;&gt;values&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'张三'&lt;/span&gt;);
&lt;span class=&quot;kw&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;into&lt;/span&gt; my_auto &lt;span class=&quot;kw&quot;&gt;values&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;,&lt;span class=&quot;st&quot;&gt;'李四'&lt;/span&gt;);
&lt;span class=&quot;kw&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;into&lt;/span&gt; my_auto &lt;span class=&quot;kw&quot;&gt;values&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;default&lt;/span&gt;,&lt;span class=&quot;st&quot;&gt;'王五'&lt;/span&gt;);&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;自增长如果对应的字段输入了值,那么自增长失效: 但是下一次还是能够正确的自增长(从最大值+1)e&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode sql&quot;&gt;
&lt;code class=&quot;sourceCode sql&quot;&gt;&lt;span class=&quot;co&quot;&gt;-- 指定数据&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;into&lt;/span&gt; my_auto &lt;span class=&quot;kw&quot;&gt;values&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;6&lt;/span&gt;,&lt;span class=&quot;st&quot;&gt;'王六'&lt;/span&gt;);
&lt;span class=&quot;kw&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;into&lt;/span&gt; my_auto &lt;span class=&quot;kw&quot;&gt;values&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;,&lt;span class=&quot;st&quot;&gt;'李七'&lt;/span&gt;); &lt;span class=&quot;co&quot;&gt;-- id会从当前表中找到最大值然后加1&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;可以通过查看表创建语句看到下一次自增长的值&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode sql&quot;&gt;
&lt;code class=&quot;sourceCode sql&quot;&gt;show &lt;span class=&quot;kw&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;table&lt;/span&gt; my_auto;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;修改自增长&quot;&gt;修改自增长&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;自增长如果涉及到字段改变，必须先删除自增长，后增加，因为一张表最多只能存在一个自增长&lt;/li&gt;
&lt;li&gt;修改当前自增长已经存在的值，修改的值只能比当前已有的自增长耳朵最大值大，若是小则不生效&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode sql&quot;&gt;
&lt;code class=&quot;sourceCode sql&quot;&gt;&lt;span class=&quot;co&quot;&gt;-- 修改表选项的值&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;alter&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;table&lt;/span&gt; my_auto auto_increment = &lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;; &lt;span class=&quot;co&quot;&gt;-- 向下修改(小)，不生效&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;alter&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;table&lt;/span&gt; my_auto auto_increment = &lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;; &lt;span class=&quot;co&quot;&gt;-- 向上修改 &lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;所有的系统变量(字符集、校对集等)都是由系统内部的变量进行控制的，那么就可以产看以及修改，虽然有些修改并无实际意义也无必要&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;14&quot;&gt;
&lt;pre class=&quot;sourceCode sql&quot;&gt;
&lt;code class=&quot;sourceCode sql&quot;&gt;&lt;span class=&quot;co&quot;&gt;-- 查看自增长对应的变量&lt;/span&gt;
show variables &lt;span class=&quot;kw&quot;&gt;like&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'auto_increment%'&lt;/span&gt;;

&lt;span class=&quot;co&quot;&gt;-- 修改自增长步长，可以修改变量实现不同的效果: 修改是对整个数据修改,而不是单张表: (修改是会话级)&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;set&lt;/span&gt; auto_increment_increment = &lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;;

&lt;span class=&quot;co&quot;&gt;-- 插入记录: 使用自增长,这时候自增长的步长是5&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;into&lt;/span&gt; my_auto &lt;span class=&quot;kw&quot;&gt;values&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;,&lt;span class=&quot;st&quot;&gt;'王大'&lt;/span&gt;);
&lt;span class=&quot;kw&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;into&lt;/span&gt; my_auto &lt;span class=&quot;kw&quot;&gt;values&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;,&lt;span class=&quot;st&quot;&gt;'王二'&lt;/span&gt;);&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;删除自增长&quot;&gt;删除自增长&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;自增长是字段的一个属性，可以通过modify来进行修改(只要保证字段没有auto_increment就可以了)&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode sql&quot;&gt;
&lt;code class=&quot;sourceCode sql&quot;&gt;&lt;span class=&quot;co&quot;&gt;-- alter table 表名 modify 字段 类型&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;-- 删除自增长&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;alter&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;table&lt;/span&gt; my_auto &lt;span class=&quot;kw&quot;&gt;modify&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;primary&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;key&lt;/span&gt;; &lt;span class=&quot;co&quot;&gt;-- 错误: 主键理论是单独存在&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;alter&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;table&lt;/span&gt; my_auto &lt;span class=&quot;kw&quot;&gt;modify&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt;; &lt;span class=&quot;co&quot;&gt;-- 有主键的时候,千万不要再加主键&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;唯一键&quot;&gt;唯一键&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;基本与主键差不多&lt;/li&gt;
&lt;/ul&gt;&lt;ol&gt;&lt;li&gt;在创建表的时候，直接在字段跟unique/unique key&lt;/li&gt;
&lt;/ol&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode sql&quot;&gt;
&lt;code class=&quot;sourceCode sql&quot;&gt;&lt;span class=&quot;kw&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;table&lt;/span&gt; my_unique1(
    &lt;span class=&quot;dt&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;char&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;) &lt;span class=&quot;kw&quot;&gt;unique&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;comment&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'学号: 唯一,允许为空'&lt;/span&gt;,
    name &lt;span class=&quot;dt&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;20&lt;/span&gt;) &lt;span class=&quot;kw&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;
)charset utf8;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ol&gt;&lt;li&gt;在所有的字段之后增加 unique key(字段列表)，复合唯一键&lt;/li&gt;
&lt;/ol&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode sql&quot;&gt;
&lt;code class=&quot;sourceCode sql&quot;&gt;&lt;span class=&quot;dt&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;char&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;) &lt;span class=&quot;kw&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;comment&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'学号'&lt;/span&gt;,
    name &lt;span class=&quot;dt&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;20&lt;/span&gt;) &lt;span class=&quot;kw&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;,
    &lt;span class=&quot;co&quot;&gt;-- 增加唯一键&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;unique&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;key&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;number&lt;/span&gt;)
)charset utf8;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ol&gt;&lt;li&gt;在创建表之后增加唯一键&lt;/li&gt;
&lt;/ol&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode sql&quot;&gt;
&lt;code class=&quot;sourceCode sql&quot;&gt;&lt;span class=&quot;kw&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;table&lt;/span&gt; my_unique3(
    &lt;span class=&quot;kw&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;primary&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;key&lt;/span&gt; auto_increment,
    &lt;span class=&quot;dt&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;char&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;) &lt;span class=&quot;kw&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;,
    name &lt;span class=&quot;dt&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;20&lt;/span&gt;) &lt;span class=&quot;kw&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;
)charset utf8;

&lt;span class=&quot;co&quot;&gt;-- 追加唯一键&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;alter&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;table&lt;/span&gt; my_unique3 &lt;span class=&quot;kw&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;unique&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;key&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;number&lt;/span&gt;);&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;唯一键约束&quot;&gt;唯一键约束&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;唯一键和主键本质基本相同，唯一区别就是唯一键默认是允许为空的，而且是多个为空&lt;/li&gt;
&lt;li&gt;若是唯一键也不允许为空，那么唯一键和主键的约束作用是一致的&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;14&quot;&gt;
&lt;pre class=&quot;sourceCode sql&quot;&gt;
&lt;code class=&quot;sourceCode sql&quot;&gt;&lt;span class=&quot;co&quot;&gt;-- 插入数据，唯一键可以为空&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;into&lt;/span&gt; my_unique1 &lt;span class=&quot;kw&quot;&gt;values&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;,&lt;span class=&quot;st&quot;&gt;'王大'&lt;/span&gt;),(&lt;span class=&quot;st&quot;&gt;'0001'&lt;/span&gt;,&lt;span class=&quot;st&quot;&gt;'王二'&lt;/span&gt;),(&lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;,&lt;span class=&quot;st&quot;&gt;'王三'&lt;/span&gt;);
&lt;span class=&quot;kw&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;into&lt;/span&gt; my_unique1 &lt;span class=&quot;kw&quot;&gt;values&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'0001'&lt;/span&gt;,&lt;span class=&quot;st&quot;&gt;'王四'&lt;/span&gt;);&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;更新删除唯一键&quot;&gt;更新、删除唯一键&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;因为唯一键是可以有多个的，所以可以不先删除后新增&lt;/li&gt;
&lt;li&gt;删除唯一键&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode sql&quot;&gt;
&lt;code class=&quot;sourceCode sql&quot;&gt;&lt;span class=&quot;co&quot;&gt;-- alter table 表名 drop unique key 索引名字&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;-- 删除唯一键， unique key后面必须跟索引名字&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;alter&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;table&lt;/span&gt; my_unique3 &lt;span class=&quot;kw&quot;&gt;drop&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;number&lt;/span&gt;;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
</description>
<pubDate>Wed, 09 May 2018 15:04:00 +0000</pubDate>
<dc:creator>wyao</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/nordon-wang/p/9017227.html</dc:identifier>
</item>
<item>
<title>模拟处理机作业调度---短作业优先调度算法 - Hahallo</title>
<link>http://www.cnblogs.com/bigyang/p/9017206.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/bigyang/p/9017206.html</guid>
<description>&lt;h3&gt;&lt;span&gt;&lt;strong&gt;短作业优先调度原理&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;短作业优先调度算法&lt;span&gt;是指对短作业优先调度的算法。短作业优先&lt;/span&gt;(SJF)的调度算法是从后备队列中选择一个或若干个估计运行时间最短的作业，将它们调入内存运行。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;算法流程图&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1202131/201805/1202131-20180509224349367-2107724565.png&quot; alt=&quot;&quot;/&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;JCB 代表一个作业，JCB 的结构如下：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1202131/201805/1202131-20180509224441441-1580310850.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;模拟实现&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;在屏幕上输出以下作业状态表：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1202131/201805/1202131-20180509225036337-623679749.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;可以通过键盘命令动态地增加作业（即增加一个&lt;/span&gt; JCB 数 据结构项）。增加作业后，作业状态表内容可更新查看。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;算法代码：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;89&quot;&gt;
&lt;pre&gt;
#include &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;stdafx.h&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
#include&lt;/span&gt;&amp;lt;iostream&amp;gt;&lt;span&gt;
#include &lt;/span&gt;&amp;lt;iomanip&amp;gt;&lt;span&gt;
#include&lt;/span&gt;&amp;lt;queue&amp;gt;&lt;span&gt;
#include&lt;/span&gt;&amp;lt;math.h&amp;gt;&lt;span&gt;
#include&lt;/span&gt;&amp;lt;vector&amp;gt;&lt;span&gt;
#include&lt;/span&gt;&amp;lt;algorithm&amp;gt;
&lt;span&gt;using&lt;/span&gt; &lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; std;

&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;作业的数据结构&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;struct&lt;/span&gt;&lt;span&gt; JCB
{
    &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; ID;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;作业ID&lt;/span&gt;
    &lt;span&gt;double&lt;/span&gt; in_time;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;作业进入时间&lt;/span&gt;
    &lt;span&gt;double&lt;/span&gt; ex_time;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;作业执行时间&lt;/span&gt;
&lt;span&gt;};
&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;执行时间大到下排序&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;bool&lt;/span&gt; cmp(pair&amp;lt;JCB, &lt;span&gt;double&lt;/span&gt;&amp;gt; first, pair&amp;lt;JCB, &lt;span&gt;double&lt;/span&gt;&amp;gt;&lt;span&gt; next)
{
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; first.second &amp;gt;&lt;span&gt; next.second;
}
&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;ID从小到大排序&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;bool&lt;/span&gt; cmp2(pair&amp;lt;JCB, &lt;span&gt;double&lt;/span&gt;&amp;gt; first, pair&amp;lt;JCB, &lt;span&gt;double&lt;/span&gt;&amp;gt;&lt;span&gt; next)
{
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; first.first.ID &amp;lt;&lt;span&gt; next.first.ID;
}
&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;开始执行时间从早到晚排序&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;bool&lt;/span&gt; cmp3(pair&amp;lt;JCB, &lt;span&gt;double&lt;/span&gt;&amp;gt; first, pair&amp;lt;JCB, &lt;span&gt;double&lt;/span&gt;&amp;gt;&lt;span&gt; next)
{
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; first.second &amp;lt;&lt;span&gt; next.second;
}
&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;ID从大到小排序&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;bool&lt;/span&gt; cmp4(pair&amp;lt;JCB, &lt;span&gt;double&lt;/span&gt;&amp;gt; first, pair&amp;lt;JCB, &lt;span&gt;double&lt;/span&gt;&amp;gt;&lt;span&gt; next)
{
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; first.first.ID &amp;gt;&lt;span&gt; next.first.ID;
}

&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;显示作业表格&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;void&lt;/span&gt; ShowJobChart(vector&amp;lt;pair&amp;lt;JCB, &lt;span&gt;double&lt;/span&gt;&amp;gt;&amp;gt;&lt;span&gt;res)
{
    cout&lt;/span&gt;&amp;lt;&amp;lt;&lt;span&gt;left;
    cout &lt;/span&gt;&amp;lt;&amp;lt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;--------------------------------作业状态表-------------------------------------&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;lt;&amp;lt;&lt;span&gt;endl;
    cout &lt;/span&gt;&amp;lt;&amp;lt; setw(&lt;span&gt;10&lt;/span&gt;) &amp;lt;&amp;lt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;作业ID&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &amp;lt;&amp;lt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;|&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;lt;&amp;lt; setw(&lt;span&gt;10&lt;/span&gt;) &amp;lt;&amp;lt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;到达时间&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &amp;lt;&amp;lt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;|&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &amp;lt;&amp;lt; setw(&lt;span&gt;10&lt;/span&gt;) &amp;lt;&amp;lt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;执行时间&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;lt;&amp;lt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;|&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &amp;lt;&amp;lt; setw(&lt;span&gt;10&lt;/span&gt;) &amp;lt;&amp;lt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;开始时间&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &amp;lt;&amp;lt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;|&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &amp;lt;&amp;lt;&lt;span&gt;
        setw(&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;) &amp;lt;&amp;lt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;完成时间&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &amp;lt;&amp;lt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;|&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &amp;lt;&amp;lt; setw(&lt;span&gt;10&lt;/span&gt;) &amp;lt;&amp;lt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;周转时间&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &amp;lt;&amp;lt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;|&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &amp;lt;&amp;lt; setw(&lt;span&gt;12&lt;/span&gt;) &amp;lt;&amp;lt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;带权周转时间&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &amp;lt;&amp;lt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;|&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;lt;&amp;lt;&lt;span&gt; endl;
    cout &lt;/span&gt;&amp;lt;&amp;lt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;-------------------------------------------------------------------------------&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &amp;lt;&amp;lt;&lt;span&gt; endl;
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (auto it = res.begin();it != res.end();it++&lt;span&gt;)
    {
        cout &lt;/span&gt;&amp;lt;&amp;lt; setw(&lt;span&gt;10&lt;/span&gt;) &amp;lt;&amp;lt; it-&amp;gt;first.ID &amp;lt;&amp;lt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;|&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &amp;lt;&amp;lt; setw(&lt;span&gt;10&lt;/span&gt;) &amp;lt;&amp;lt;it-&amp;gt;first.in_time&amp;lt;&amp;lt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;|&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &amp;lt;&amp;lt; setw(&lt;span&gt;10&lt;/span&gt;) &amp;lt;&amp;lt; it-&amp;gt;first.ex_time &amp;lt;&amp;lt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;|&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &amp;lt;&amp;lt; setw(&lt;span&gt;10&lt;/span&gt;) &amp;lt;&amp;lt;it-&amp;gt;second&amp;lt;&amp;lt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;|&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
            &amp;lt;&amp;lt; setw(&lt;span&gt;10&lt;/span&gt;) &amp;lt;&amp;lt;it-&amp;gt;second+it-&amp;gt;first.ex_time&amp;lt;&amp;lt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;|&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &amp;lt;&amp;lt; setw(&lt;span&gt;10&lt;/span&gt;) &amp;lt;&amp;lt;&lt;span&gt;
            it&lt;/span&gt;-&amp;gt;second + it-&amp;gt;first.ex_time -it-&amp;gt;first.in_time&amp;lt;&amp;lt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;|&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;lt;&amp;lt; setw(&lt;span&gt;12&lt;/span&gt;)&amp;lt;&amp;lt; (it-&amp;gt;second + it-&amp;gt;first.ex_time - it-&amp;gt;first.in_time)/it-&amp;gt;first.ex_time&amp;lt;&amp;lt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;|&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;lt;&amp;lt;&lt;span&gt;endl;
    }
    cout &lt;/span&gt;&amp;lt;&amp;lt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;-------------------------------------------------------------------------------&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &amp;lt;&amp;lt;&lt;span&gt; endl;
}
&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;作业调度                                       &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;输入：待调度的作业队列jobs                     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;输出：调度好的作业数组res                         &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
vector&lt;/span&gt;&amp;lt;pair&amp;lt;JCB, &lt;span&gt;double&lt;/span&gt;&amp;gt;&amp;gt; JobScheduling(queue&amp;lt;JCB&amp;gt;&lt;span&gt;jobs)
{
    JCB f_job &lt;/span&gt;=&lt;span&gt; jobs.front();
    jobs.pop();
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;res数组用于存调度之后的结果，jcb以及对应的作业开始执行时间&lt;/span&gt;
    vector&amp;lt;pair&amp;lt;JCB, &lt;span&gt;double&lt;/span&gt;&amp;gt;&amp;gt;&lt;span&gt;res;
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;首先将第一个到达的工作直接加入数组&lt;/span&gt;
&lt;span&gt;    res.push_back(make_pair(f_job, f_job.in_time));
    vector&lt;/span&gt;&amp;lt;pair&amp;lt;JCB, &lt;span&gt;double&lt;/span&gt;&amp;gt;&amp;gt;&lt;span&gt;job;
    &lt;/span&gt;&lt;span&gt;double&lt;/span&gt; finish = f_job.in_time +&lt;span&gt; f_job.ex_time;
    &lt;/span&gt;&lt;span&gt;while&lt;/span&gt; (!&lt;span&gt;jobs.empty())
    {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;将到达时间在上一个执行的工作结束时间之前的作业存入job数组&lt;/span&gt;
        &lt;span&gt;while&lt;/span&gt; (jobs.front().in_time &amp;lt;=&lt;span&gt; finish)
        {
            job.push_back(make_pair(jobs.front(), jobs.front().ex_time));
            jobs.pop();
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (jobs.empty())&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
        }
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果没有到达时间在上一个执行的工作结束时间之前的作业&lt;/span&gt;
        &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (job.empty())
        {
            res.push_back(make_pair(jobs.front(), jobs.front().in_time));
            finish &lt;/span&gt;= jobs.front().in_time +&lt;span&gt; jobs.front().ex_time;
            jobs.pop();
            &lt;/span&gt;&lt;span&gt;continue&lt;/span&gt;&lt;span&gt;;
        }
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;将到达时间在上一个执行的工作结束时间之前的作业按执行时间从大到小排序&lt;/span&gt;
&lt;span&gt;        sort(job.begin(), job.end(), cmp);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;将最短执行时间的工作存进结果数组&lt;/span&gt;
        res.push_back(make_pair(job.rbegin()-&amp;gt;&lt;span&gt;first, finish));
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;更新结束时间&lt;/span&gt;
        finish += job.rbegin()-&amp;gt;&lt;span&gt;second;
        job.pop_back();
    }
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果后面几个进入的作业都在上一个执行的作业结束之前进入&lt;/span&gt;
        &lt;span&gt;while&lt;/span&gt;(!&lt;span&gt;job.empty())
        {
            res.push_back(make_pair(job.rbegin()&lt;/span&gt;-&amp;gt;&lt;span&gt;first, finish));
            finish &lt;/span&gt;+= job.rbegin()-&amp;gt;&lt;span&gt;second;
            job.pop_back();
        }
        sort(res.begin(), res.end(),cmp2);
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; res;    
}

&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;添加作业                                        &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;输入：待添加的作业job，以及调度好的作业数组res&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;输出：添加作业之后的作业数组res               &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
vector&lt;/span&gt;&amp;lt;pair&amp;lt;JCB, &lt;span&gt;double&lt;/span&gt;&amp;gt;&amp;gt; Addjob(JCB job,vector&amp;lt;pair&amp;lt;JCB, &lt;span&gt;double&lt;/span&gt;&amp;gt;&amp;gt;&lt;span&gt;res)
{
    &lt;/span&gt;&lt;span&gt;double&lt;/span&gt; tmp=&lt;span&gt;job.in_time;
    vector&lt;/span&gt;&amp;lt;pair&amp;lt;JCB, &lt;span&gt;double&lt;/span&gt;&amp;gt;&amp;gt;&lt;span&gt;t_job;
    vector&lt;/span&gt;&amp;lt;pair&amp;lt;JCB, &lt;span&gt;double&lt;/span&gt;&amp;gt;&amp;gt;&lt;span&gt;res2;
    sort(res.begin(), res.end(), cmp3);
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (job.in_time &amp;gt; res.rbegin()-&amp;gt;second)&lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果作业的进入时间比最后执行作业的执行时间还晚&lt;/span&gt;
&lt;span&gt;    {
        res.push_back(make_pair(job, job.in_time));
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; res;
    }
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;将作业的执行时间从早到晚排序，将执行时间晚于作业进入时间的作业加入数组并
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;确定第一个执行的作业之后，重新调用作业调度函数&lt;/span&gt;
    queue&amp;lt;JCB&amp;gt;&lt;span&gt;jobs;
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (auto it = res.begin();it != res.end();it++&lt;span&gt;)
    {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;比较待添加的作业的进入时间和已经调度好的作业的开始执行时间
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;和待添加的作业的执行时间和已经调度好的作业的执行时间&lt;/span&gt;
        &lt;span&gt;if&lt;/span&gt; (job.in_time &amp;gt; it-&amp;gt;second||job.ex_time&amp;gt;=it-&amp;gt;first.ex_time)&lt;span&gt;continue&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;
        {
            job.in_time &lt;/span&gt;= it-&amp;gt;&lt;span&gt;second;
            jobs.push(job);
            sort(it, res.end(), cmp4);
            &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (auto it2 = res.end() - &lt;span&gt;1&lt;/span&gt;;it2 &amp;gt;&lt;span&gt; it;)
            {
                jobs.push(it2&lt;/span&gt;-&amp;gt;&lt;span&gt;first);
                it2&lt;/span&gt;--&lt;span&gt;;
                res.pop_back();
            }
            jobs.push(it&lt;/span&gt;-&amp;gt;&lt;span&gt;first);
            it&lt;/span&gt;--&lt;span&gt;;
            res.pop_back();
            &lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
        }
    }
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;重新调用作业调度函数&lt;/span&gt;
    res2=&lt;span&gt;JobScheduling(jobs);
    res2.begin()&lt;/span&gt;-&amp;gt;first.in_time =&lt;span&gt; tmp;
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;将重新调度好的作业与不参与调度的作业连接&lt;/span&gt;
&lt;span&gt;    res.insert(res.end(), res2.begin(), res2.end());
    sort(res.begin(), res.end(), cmp2);
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; res;
}
&lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt; main()
{
    queue&lt;/span&gt;&amp;lt;JCB&amp;gt;&lt;span&gt;jobs;
    JCB job1, job2, job3, job4,job5;
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;初始作业队列&lt;/span&gt;
    job1 = { &lt;span&gt;1&lt;/span&gt;,&lt;span&gt;8.00&lt;/span&gt;,&lt;span&gt;2&lt;/span&gt;&lt;span&gt; };
    jobs.push(job1);
    job2 &lt;/span&gt;= { &lt;span&gt;2&lt;/span&gt;,&lt;span&gt;8.50&lt;/span&gt;,&lt;span&gt;0.50&lt;/span&gt;&lt;span&gt; };
    jobs.push(job2);
    job3 &lt;/span&gt;= { &lt;span&gt;3&lt;/span&gt;,&lt;span&gt;9.00&lt;/span&gt;,&lt;span&gt;0.10&lt;/span&gt;&lt;span&gt; };
    jobs.push(job3);
    job4 &lt;/span&gt;= { &lt;span&gt;4&lt;/span&gt;,&lt;span&gt;11.60&lt;/span&gt;,&lt;span&gt;0.20&lt;/span&gt;&lt;span&gt; };
    jobs.push(job4);

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;调用作业调度函数&lt;/span&gt;
    vector&amp;lt;pair&amp;lt;JCB, &lt;span&gt;double&lt;/span&gt;&amp;gt;&amp;gt; res=&lt;span&gt;JobScheduling(jobs);
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;输出作业状态表&lt;/span&gt;
&lt;span&gt;    ShowJobChart(res);
    &lt;/span&gt;&lt;span&gt;char&lt;/span&gt;&lt;span&gt; i ;
    cout &lt;/span&gt;&amp;lt;&amp;lt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;添加作业?(y/n):&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
    cin &lt;/span&gt;&amp;gt;&amp;gt;&lt;span&gt; i;
    &lt;/span&gt;&lt;span&gt;while&lt;/span&gt; (i-&lt;span&gt;'&lt;/span&gt;&lt;span&gt;y&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;==&lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
    {
        JCB job;
        cout &lt;/span&gt;&amp;lt;&amp;lt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;请输入作业ID：&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
        cin &lt;/span&gt;&amp;gt;&amp;gt;&lt;span&gt; job.ID;
        cout &lt;/span&gt;&amp;lt;&amp;lt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;请输入作业进入时间：&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
        cin &lt;/span&gt;&amp;gt;&amp;gt;&lt;span&gt; job.in_time;
        cout &lt;/span&gt;&amp;lt;&amp;lt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;请输入作业执行时间：&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
        cin &lt;/span&gt;&amp;gt;&amp;gt;&lt;span&gt; job.ex_time;
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;添加作业&lt;/span&gt;
        vector&amp;lt;pair&amp;lt;JCB, &lt;span&gt;double&lt;/span&gt;&amp;gt;&amp;gt; res =&lt;span&gt; Addjob(job, JobScheduling(jobs));
        ShowJobChart(res);
        cout &lt;/span&gt;&amp;lt;&amp;lt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;继续添加作业?(y/n):&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
        cin &lt;/span&gt;&amp;gt;&amp;gt;&lt;span&gt; i;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;span&gt;&lt;strong&gt;运行结果截图&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;编译程序&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1202131/201805/1202131-20180509225331701-1816021336.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;运行程序&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1202131/201805/1202131-20180509225353834-1790449873.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;添加一个作业&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1202131/201805/1202131-20180509225410347-318773062.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;继续添加一个作业&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1202131/201805/1202131-20180509225425474-659641877.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;编译环境：Ubuntu&lt;/span&gt;&lt;/p&gt;

</description>
<pubDate>Wed, 09 May 2018 15:00:00 +0000</pubDate>
<dc:creator>Hahallo</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/bigyang/p/9017206.html</dc:identifier>
</item>
<item>
<title>JavaScript之对象继承 - laixiangran</title>
<link>http://www.cnblogs.com/laixiangran/p/9017161.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/laixiangran/p/9017161.html</guid>
<description>&lt;h2 id=&quot;原型链继承&quot;&gt;原型链继承&lt;/h2&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;SuperType&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;va&quot;&gt;SuperType&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;prototype&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;getSuperValue&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;property&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;SubType&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;subproperty&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;co&quot;&gt;// 继承了 SuperType&lt;/span&gt;
&lt;span class=&quot;va&quot;&gt;SubType&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;prototype&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;SuperType&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; subType &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;SubType&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;subType&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;getSuperValue&lt;/span&gt;())&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;   &lt;span class=&quot;co&quot;&gt;// 继承了 SuperType 的 getSuperValue 方法，打印 true&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;缺点&quot;&gt;缺点&lt;/h3&gt;
&lt;ol&gt;&lt;li&gt;如果 SuperType 存在一个引用类型的属性，而 SubType 的原型对象变为 SuperType 的一个实例，这样每个 SubType 的实例都会共用这个引用类型的属性，不同的 SubType 实例对该属性的操作都将会在其它 SubType 实例中体现出来，这跟每个实例拥有自己的属性是违背的。&lt;/li&gt;
&lt;/ol&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;18&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;SuperType&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;colors&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; [&lt;span class=&quot;st&quot;&gt;&quot;red&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;blue&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;green&quot;&lt;/span&gt;]&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;SubType&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;            
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;co&quot;&gt;// 继承了 SuperType&lt;/span&gt;
&lt;span class=&quot;va&quot;&gt;SubType&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;prototype&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;SuperType&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; subType1 &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;SubType&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;va&quot;&gt;subType1&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;colors&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;push&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;black&quot;&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;// subType1 修改 colors&lt;/span&gt;
&lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;subType1&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;colors&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;    &lt;span class=&quot;co&quot;&gt;// &quot;red,blue,green,black&quot;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; subType2 &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;SubType&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;subType2&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;colors&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;    &lt;span class=&quot;co&quot;&gt;// &quot;red,blue,green,black&quot;，subType2 的 colors 值为 subType1 修改之后的值&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ol&gt;&lt;li&gt;在创建子类型（SubType）的实例时，不能向超类型（SuperType）的构造函数中传递参数。实际上，应该说是没有办法在不影响所有对象实例（原因如缺点1）的情况下，给超类型的构造函数传递参数。&lt;/li&gt;
&lt;/ol&gt;&lt;h2 id=&quot;借用构造函数继承&quot;&gt;借用构造函数继承&lt;/h2&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;17&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;SuperType&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;colors&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; [&lt;span class=&quot;st&quot;&gt;&quot;red&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;blue&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;green&quot;&lt;/span&gt;]&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;SubType&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;  
    &lt;span class=&quot;co&quot;&gt;// 继承了 SuperType&lt;/span&gt;
    &lt;span class=&quot;va&quot;&gt;SuperType&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;call&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;// 通过 apply() 或 call() 执行 SuperType 的构造函数&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; instance1 &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;SubType&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;va&quot;&gt;instance1&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;colors&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;push&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;black&quot;&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;at&quot;&gt;alert&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;instance1&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;colors&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;    &lt;span class=&quot;co&quot;&gt;// &quot;red,blue,green,black&quot;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; instance2 &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;SubType&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;at&quot;&gt;alert&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;instance2&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;colors&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;    &lt;span class=&quot;co&quot;&gt;// &quot;red,blue,green&quot;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;该方法解决了 &lt;code&gt;原型链继承&lt;/code&gt; 的引用型属性共享的问题。&lt;/p&gt;
&lt;p&gt;还有可以在子类型构造函数中向超类型构造函数传递参数，如下例子：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;SuperType&lt;/span&gt;(name)&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; name&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;SubType&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;  
    &lt;span class=&quot;co&quot;&gt;// 继承 SuperType，并传递参数&lt;/span&gt;
    &lt;span class=&quot;va&quot;&gt;SuperType&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;call&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;Nicholas&quot;&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    
    &lt;span class=&quot;co&quot;&gt;// 实例属性&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;29&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; subType &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;SubType&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;subType&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;name&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;   &lt;span class=&quot;co&quot;&gt;//&quot;Nicholas&quot;;&lt;/span&gt;
&lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;subType&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;age&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;    &lt;span class=&quot;co&quot;&gt;//29&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;缺点-1&quot;&gt;缺点&lt;/h3&gt;
&lt;ol&gt;&lt;li&gt;方法都在构造函数中定义，因此函数复用就无从谈起了。而且，在超类型的原型中定义的方法，对子类型而言也是不可见的，结果所有类型都只能使用构造函数模式。&lt;/li&gt;
&lt;/ol&gt;&lt;h2 id=&quot;原型链构造函数组合继承&quot;&gt;原型链/构造函数组合继承&lt;/h2&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;21&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;SuperType&lt;/span&gt;(name)&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; name&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;colors&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; [&lt;span class=&quot;st&quot;&gt;&quot;red&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;blue&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;green&quot;&lt;/span&gt;]&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;va&quot;&gt;SuperType&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;prototype&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;sayName&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;name&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;SubType&lt;/span&gt;(name&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; age)&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;co&quot;&gt;// 执行 SuperType 的构造函数，继承 SuperType 的属性&lt;/span&gt;
    &lt;span class=&quot;va&quot;&gt;SuperType&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;call&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; name)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    
    &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; age&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;co&quot;&gt;// 将 SuperType 的实例赋给 SubType 的原型对象，这样 SubType 可继承 SuperType 原型中的方法&lt;/span&gt;
&lt;span class=&quot;va&quot;&gt;SubType&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;prototype&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;SuperType&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;va&quot;&gt;SubType&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;prototype&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;sayAge&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;age&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt;  subType1 &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;SubType&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;Nicholas&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;29&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;va&quot;&gt;subType1&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;colors&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;push&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;black&quot;&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;subType1&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;colors&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;co&quot;&gt;// &quot;red,blue,green,black&quot;&lt;/span&gt;
&lt;span class=&quot;va&quot;&gt;subType1&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;sayName&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;      &lt;span class=&quot;co&quot;&gt;// &quot;Nicholas&quot;;&lt;/span&gt;
&lt;span class=&quot;va&quot;&gt;subType1&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;sayAge&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;       &lt;span class=&quot;co&quot;&gt;// 29&lt;/span&gt;


&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; subType2 &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;SubType&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;Greg&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;27&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;subType2&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;colors&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;co&quot;&gt;// &quot;red,blue,green&quot;&lt;/span&gt;
&lt;span class=&quot;va&quot;&gt;subType2&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;sayName&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;      &lt;span class=&quot;co&quot;&gt;// &quot;Greg&quot;;&lt;/span&gt;
&lt;span class=&quot;va&quot;&gt;subType2&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;sayAge&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;       &lt;span class=&quot;co&quot;&gt;// 27&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;缺点-2&quot;&gt;缺点&lt;/h3&gt;
&lt;ol&gt;&lt;li&gt;无论什么情况，都会调用两次超类型构造函数，一次是在创建子类型原型的时候，一次是在执行子类型构造函数的时候。这样一个 SubType 实例会包含两组 SuperType 的属性，一组在 SubType 实例上，一组在 SubType 原型中。&lt;/li&gt;
&lt;/ol&gt;&lt;h2 id=&quot;原型式继承&quot;&gt;原型式继承&lt;/h2&gt;
&lt;p&gt;该方法基于已有的对象创建新对象，同时还不必因此创建自定义类型。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;17&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; person &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;Nicholas&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;friends&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; [&lt;span class=&quot;st&quot;&gt;&quot;Shelby&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;Court&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;Van&quot;&lt;/span&gt;]
&lt;span class=&quot;op&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; anotherPerson &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;create&lt;/span&gt;(person)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;// 使用 person 作为新对象（anotherPerson）的原型&lt;/span&gt;
&lt;span class=&quot;va&quot;&gt;anotherPerson&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;Greg&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;va&quot;&gt;anotherPerson&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;friends&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;push&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;Rob&quot;&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; yetAnotherPerson &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;create&lt;/span&gt;(person)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;va&quot;&gt;yetAnotherPerson&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;Linda&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;va&quot;&gt;yetAnotherPerson&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;friends&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;push&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;Barbie&quot;&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;person&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;friends&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;   &lt;span class=&quot;co&quot;&gt;// &quot;Shelby,Court,Van,Rob,Barbie&quot;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;寄生式继承&quot;&gt;寄生式继承&lt;/h2&gt;
&lt;p&gt;该方法创建一个仅用于封装继承过程的函数，该函数在内部以某种方式来增强对象，最后再像真地是它做了所有工作一样返回对象。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;13&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;creatAnother&lt;/span&gt;(original) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; clone &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;create&lt;/span&gt;(original)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;// 创建一个新对象&lt;/span&gt;
    &lt;span class=&quot;va&quot;&gt;clone&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;sayHi&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt;() &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;// 以某种方式来增强这个对象&lt;/span&gt;
        &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;hi&quot;&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; clone&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;// 返回该对象&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;co&quot;&gt;// 使用示例&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; person &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;Nicholas&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;friends&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; [&lt;span class=&quot;st&quot;&gt;&quot;Shelby&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;Court&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;Van&quot;&lt;/span&gt;]
&lt;span class=&quot;op&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; anotherPerson &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;creatAnother&lt;/span&gt;(person)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;va&quot;&gt;anotherPerson&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;sayHi&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;// &quot;hi&quot;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;寄生原型链构造函数组合继承&quot;&gt;寄生/原型链/构造函数组合继承&lt;/h2&gt;
&lt;p&gt;该方法解决原型链/构造函数组合继承调用两次超类型构造函数的问题。&lt;/p&gt;
&lt;p&gt;通过借用构造函数来继承属性，通过原型链的混成形式来继承方法。其背后的基本思路是：不必为了指定子类型的原型而调用超类型的构造函数，我们所需要的无非就是超类型原型的一个副本而已。本质上，就是使用寄生式继承来继承超类型的原型，然后再将结果指定给子类型的原型。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;23&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;object&lt;/span&gt;(o)&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;F&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;{}&lt;/span&gt;
    &lt;span class=&quot;va&quot;&gt;F&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;prototype&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; o&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;F&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;inheritPrototype&lt;/span&gt;(subType&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; superType)&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; prototype &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;object&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;superType&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;prototype&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;   &lt;span class=&quot;co&quot;&gt;// 根据超类型原型创建新对象&lt;/span&gt;
    &lt;span class=&quot;va&quot;&gt;prototype&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;constructor&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; subType&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;               &lt;span class=&quot;co&quot;&gt;// 将新对象的 constructor 设置为子类型&lt;/span&gt;
    &lt;span class=&quot;va&quot;&gt;subType&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;prototype&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; prototype&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;                 &lt;span class=&quot;co&quot;&gt;// 将新对象赋给子类型的原型&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
                        
&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;SuperType&lt;/span&gt;(name)&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; name&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;colors&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; [&lt;span class=&quot;st&quot;&gt;&quot;red&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;blue&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;green&quot;&lt;/span&gt;]&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;va&quot;&gt;SuperType&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;prototype&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;sayName&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;name&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;SubType&lt;/span&gt;(name&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; age)&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;  
    &lt;span class=&quot;va&quot;&gt;SuperType&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;call&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; name)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    
    &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; age&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;at&quot;&gt;inheritPrototype&lt;/span&gt;(SubType&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; SuperType)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;va&quot;&gt;SubType&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;prototype&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;sayAge&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;age&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; subType1 &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;SubType&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;Nicholas&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;29&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;va&quot;&gt;subType1&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;colors&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;push&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;black&quot;&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;subType1&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;colors&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;co&quot;&gt;// &quot;red,blue,green,black&quot;&lt;/span&gt;
&lt;span class=&quot;va&quot;&gt;subType1&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;sayName&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;      &lt;span class=&quot;co&quot;&gt;// &quot;Nicholas&quot;;&lt;/span&gt;
&lt;span class=&quot;va&quot;&gt;subType1&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;sayAge&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;       &lt;span class=&quot;co&quot;&gt;// 29&lt;/span&gt;


&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; subType2 &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;SubType&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;Greg&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;27&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;at&quot;&gt;alert&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;subType2&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;colors&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;co&quot;&gt;// &quot;red,blue,green&quot;&lt;/span&gt;
&lt;span class=&quot;va&quot;&gt;subType2&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;sayName&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;      &lt;span class=&quot;co&quot;&gt;// &quot;Greg&quot;;&lt;/span&gt;
&lt;span class=&quot;va&quot;&gt;subType2&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;sayAge&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;       &lt;span class=&quot;co&quot;&gt;// 27&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;参考资料：《JavaScript高级程序设计（第3版）》第6.3节 继承&lt;/p&gt;
&lt;/blockquote&gt;
</description>
<pubDate>Wed, 09 May 2018 14:49:00 +0000</pubDate>
<dc:creator>laixiangran</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/laixiangran/p/9017161.html</dc:identifier>
</item>
<item>
<title>区块链踩坑之搭建以太坊网络私有链 - 潇十一郎</title>
<link>http://www.cnblogs.com/zhangxiaoyong/p/9017079.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/zhangxiaoyong/p/9017079.html</guid>
<description>&lt;h4&gt;前言&lt;/h4&gt;
&lt;p&gt;区块链近几年如火如荼，呈愈来愈望的趋势。相信不少小伙伴已经踩过坑，也有很多小伙伴还只是听过概念，并未实际接触到，更别谈开发和运用。我们在这里还是先来普及下区块链的基础概念(已经知晓概念和原理的可直接跳到环境篇)：&lt;/p&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;　　　　&lt;strong&gt;区块链是什么？&lt;/strong&gt;&lt;br/&gt;&lt;strong&gt;       区块链是一种新型去中心化协议，能安全地存储比特币交易或其它数据，信息不可伪造和篡改，可以自动执行智能合约，无需任何中心化机构的审核。交易既可以是比特币这样的数字货币，也可以是债权、股权、版权等数字资产，区块链技术解决了拜占庭将军问题，大大降低了现实经济的信任成本与会计成本，重新定义了互联网时代的产权制度。  &lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;那更具体和详细一点的描述可以参考下面这段话：&lt;/p&gt;
&lt;p&gt;       &lt;span&gt;&lt;strong&gt;区块链（Blockchain）是由节点参与的分布式数据库系统，它的特点是不可更改，不可伪造，也可以将其理解为账簿系统(ledger)。&lt;/strong&gt;&lt;/span&gt;它是比特币的一个重要概念，完整比特币区块链的副本，记录了其代币（token）的每一笔交易。通过这些信息，我们可以找到每一个地址，在历史上任何一点所拥有的价值。&lt;/p&gt;
&lt;p&gt;      区块链是由一串使用密码学方法产生的数据块组成的，每一个区块都包含了上一个区块的哈希值（hash），从创始区块（genesis block）开始连接到当前区块，形成块链。每一个区块都确保按照时间顺序在上一个区块之后产生，否则前一个区块的哈希值是未知的。这些特征使得比特币的双花（double-spending）非常困难。区块链是比特币的核心创新。&lt;/p&gt;
&lt;p&gt;区块链概念的出现，首先是在中本聪的比特币白皮书中提到的，但是以工作量证明链（proof-of-work chain）的形式而存在，以下是中本聪对区块链概念的描述：&lt;/p&gt;
&lt;blockquote readability=&quot;13&quot;&gt;
&lt;p&gt;时间戳服务器通过对以区块(block)形式存在的一组数据，实施随机散列而加上时间戳，并将该随机散列进行广播，就像在新闻或世界性新闻组网络（Usenet）的发帖一样 。显然，该时间戳能够证实特定数据必然于某特定时间是的确存在的，因为只有在该时刻存在了才能获取相应的随机散列值。每个时间戳应当将前一个时间戳纳入其随机散列值中，每一个随后的时间戳都对之前的一个时间戳进行增强(reinforcing)，这样就形成了一条链（Chain）。&lt;/p&gt;
&lt;p&gt;节点始终都将最长的链视为正确链，并持续工作和延长它。如果有两个节点同时广播不同版本的新区块，那么其他节点在接收到该区块的时间上，将存在先后差别。当此情形，他们将在率先收到的区块基础上进行工作，但也会保留另外一条链，以防后者变成最长链。该僵局（tie）的打破，要等到下一个工作量证明被发现，而其中的一条链被证实为是较长的一条，那么在另一条分支链上工作的节点将转换阵营，开始在较长的链上工作。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;      比特币钱包的功能依赖于与区块链的确认，一次有效检验称为一次确认。通常一次交易要获得数个确认才能进行。轻量级（SPV ）比特币钱包, 其客户端在本地只需保存与用户可支配交易相关的数据，而不会存储完整的区块链。&lt;/p&gt;
&lt;p&gt;    区块链技术是众多加密数字货币的核心，包括比特币、以太坊、莱特币、狗狗币等。维护区块链的方式，有工作量证明（proof-of-work）、权益证明(proof-of-stake)等。&lt;/p&gt;
&lt;h4&gt;区块链的优势&lt;/h4&gt;
&lt;p&gt;区块链体系结构的核心优势包括：&lt;/p&gt;
&lt;p&gt;1.任何节点都可以创建交易，在经过一段时间的确认之后，就可以合理地确认该交易是否为有效，区块链可有效地防止双花问题的发生。&lt;/p&gt;
&lt;p&gt;2.对于试图重写或者修改交易记录而言，它的成本是非常高的。&lt;/p&gt;
&lt;p&gt;3.区块链实现了两种记录：交易（transactions）以及区块（blocks）。交易是被存储在区块链上的实际数据，而区块则是记录确认某些交易是在何时，以及以何种顺序成为区块链数据库的一部分。交易是由参与者在正常过程中使用系统所创建的（在加密数字货币的例子中，一笔交易是由bob将代币发送给alice所创建的），而区块则是由我们称之为矿工（miners）的单位负责创建。&lt;/p&gt;
&lt;h4&gt;区块链工作原理&lt;/h4&gt;
&lt;p&gt;这里有个问题就是：我们谈的区块链，那什么是区块呢？&lt;/p&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;&lt;strong&gt; 数据通过称之为区块(block)的文件，永久记录在数字货币网络上。它们好比是一个股票交易账本。新的区块会被添加到记录（区块链）的末端，而且一旦书写就很难修改或移除。&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;区块的结构是什么样的呢？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/762349/201805/762349-20180509213239264-2137232784.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;





&lt;p&gt;&lt;strong&gt;区块头是什么？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;       区块头由三组区块元数据组成。首先是一组引用父区块哈希值的数据，这组元数据用于将该区块与区块链中前一区块相连接。第二组元数据，即难度、时间戳和nonce，与挖矿竞争相关 。第三组元数据是merkle树根（一种用来有效地总结区块中所有交易的数据结构）。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;区块头结构是什么？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/762349/201805/762349-20180509213524156-1217758213.png&quot; alt=&quot;&quot;/&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;创始区块是什么？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;    比特币区块链的第一个区块，创建于2009年，我们称之为创世区块。它是比特币区块链里所有区块的共同祖先，这意味着你从任一区块，循链向后回溯，最终都将到达创世区块。&lt;/p&gt;
&lt;p&gt;每一个节点都“知道”创世区块的哈希值、结构、被创建的时间和里面的一个交易。因此，每个节点都把该区块作为区块链的首区块，从而构建了一个安全的、可信的区块链的根。&lt;/p&gt;
&lt;p&gt;在chainparams.cpp里可以看到创世区块被编入到比特币核心客户端里。&lt;/p&gt;
&lt;p&gt;创世区块的哈希值为：&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;0000000000 19d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt; 在命令行使用比特币核心客户端：&lt;/p&gt;
&lt;blockquote readability=&quot;19&quot;&gt;
&lt;p&gt;$ bitcoindgetblock 000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f{    &quot;hash&quot;:&quot;000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f&quot;,    &quot;confirmations&quot;:308321,    &quot;size&quot;:285,    &quot;height&quot;:0,    &quot;version&quot;:1,    &quot;merkleroot&quot;:&quot;4a5e1e4baab89f3a32518a88c31bc87f618f76673e2cc77ab2127b7afdeda33b&quot;,    &quot;tx&quot;:[&quot;4a5e1e4baab89f3a32518a88c31bc87f618f76673e2cc77ab2127b7afdeda33b&quot;],    &quot;time&quot;:1231006505,    &quot;nonce&quot;:2083236893,    &quot;bits&quot;:&quot;1d00ffff&quot;,    &quot;difficulty&quot;:1.00000000,    &quot;nextblockhash&quot;:&quot;00000000839a8e6886ab5951d76f411475428afc90947ee320161bbf18eb6048&quot;}&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;      创世区块包含一个隐藏的信息。在其Coinbase交易的输入中包含这样一句话“The Times 03/Jan/2009 Chancellor on brink of second bailout forbanks.”这句话是泰晤士报当天的头版文章标题，引用这句话，既是对该区块产生时间的说明，也可视为半开玩笑地提醒人们 , 一个独立的货币制度的重要性，同时告诉人们随着比特币的发展，一场前所未有的世界性货币革命将要发生。该消息是由比特币的创立者中本聪嵌入创世区块中。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; 区块链分叉是什么？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/762349/201805/762349-20180509214702911-217280690.png&quot; alt=&quot;&quot;/&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;     诚实矿工只创建最长有效链上的最新区块。“长度”（Length）指区块链的累计计算难度，而不是是区块数目。当包括在链中的所有区块以及交易都有效，且是从创世区块开始的链，才是被我们承认的有效区块链。&lt;/p&gt;
&lt;p&gt;     对于区块链中的任意一个区块，到达创世块的路径只有一条。然而，从创世块开始，会有分叉的情况出现。当创建两个区块的时间差只有几秒时，经常会创建出一个分叉区块。当发生这种情况时，节点就会在他们最先接收到的那个区块上创建区块。无论哪一个区块包含在下一个区块中，它都会成为主链的一部分，因为这条链更长。&lt;/p&gt;
&lt;p&gt;      短链（无效链）中的区块没有什么作用。当比特币客户端切换至另外一条更长的区块链时，短链中的所有有效交易区块都重新添加到序列交易池中，且会包含在下一个区块中。短链中的区块奖励不会呈现在最长的区块链中，因此实际上他们是有损失的，这就是为什么需要网络强制的100个区块的成熟时间来让产生存在。&lt;/p&gt;
&lt;p&gt;      在短链中的区块，我们通常称之为“孤儿块”（orphans）。这是因为，在长链中这个生成交易并没有父系区块，因为这些生成交易在交易PRC列表中显示为孤儿。一些矿池误解这些信息，声称他们的区块是”孤儿“。事实上，这些区块都有父系区块，而且甚至可能有子系。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;区块链衍生的几个概念&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;公链（public blockchain）&lt;/p&gt;
&lt;p&gt;公链，是指全世界任何人都可读取、发送交易且能获得有效确认的共识区块链。公链的安全由工作量证明机制（pow）或权益证明机制(pos)等方式负责维护。它们是以经济奖励与加密数字验证相结合的方式而存在的，并遵循着一般原则：每个人从中可获得的经济奖励，与对共识过程作出的贡献成正比。这些区块链通常被认为是“完全去中心化”的。&lt;/p&gt;
&lt;p&gt;共同体区块链：（Consortium blockchains）&lt;/p&gt;
&lt;p&gt;共同体区块链，是指其共识过程受到预选节点控制的区块链；例如，有15个金融机构组成一个共同体，每个机构都运行着一个节点，而且为了使每个区块生效需要获得其中10个机构的确认。区块链或许允许每个人都可读取，或者只受限于参与者，或走混合型的路线，例如区块的根哈希及其API（应用程序接口）对外公开，API可允许外界用来作有限次数的查询和获取区块链状态的信息。这些区块链可视为“部分去中心化”。&lt;/p&gt;
&lt;p&gt;私链（private blockchain)，又称无代币区块链（Token-less blockchain）&lt;/p&gt;
&lt;p&gt;完全私有的区块链 , 是指其写入权限仅在一个组织手里的区块链。读取权限或者对外开放，或者被任意程度地进行了限制。相关的应用囊括数据库管理、审计、甚至一个公司，但在很多的情形下，公共的可读性并非是必须的。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;公链和私链的特点&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;共同体区块链结合了公链的“低信任”和私链的“单一高度信任” , 提供了一种混合的模式，而私链可以更精确地描述为带有一定程度数字加密功能，可管理（permissioned）的传统中心化系统。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/762349/201805/762349-20180509214622930-2134348682.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h4&gt;环境篇&lt;/h4&gt;
&lt;p&gt;①下载以太坊钱包Mist或者ETHWallet &lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/ethereum/mist/releases/tag/0.8.1&quot; target=&quot;_blank&quot;&gt;https://github.com/ethereum/mist/releases/tag/0.8.1&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;我这里提供下我用的两个版本地址：&lt;/p&gt;
&lt;p&gt;Mist  链接：https://pan.baidu.com/s/1BVJV9-nJRE4q4QnupNihOw 密码：dt9j&lt;/p&gt;
&lt;p&gt;EthWallet 链接：https://pan.baidu.com/s/1Q-tWMI5cC3uPphoQEN1Plw 密码：nhsu&lt;/p&gt;
&lt;p&gt;Geth 链接：https://pan.baidu.com/s/1j31K0WJm9PDKy-5Cs4E5Og 密码：5zq1&lt;/p&gt;
&lt;p&gt;② 这里我们以Mist为例 ，下载后解压Mist，直接运行，此时会在C盘生成一个Mist的Geth目录  同步区块过程很慢，可以测试环境可直接跳过 &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/762349/201805/762349-20180509215637415-796794688.png&quot; alt=&quot;&quot;/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/762349/201805/762349-20180509215700163-1510893587.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;C:\Users\Administrator\AppData\Roaming\Mist\binaries\Geth\unpacked&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt; 我们先将生成的目录添加进系统Path环境变量中 方便我们后续操作。&lt;/p&gt;
&lt;p&gt;添加Path后，我们打开命令窗口 执行：geth -h 查看geth版本和其他命令信息 如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/762349/201805/762349-20180509220118864-506295848.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;此时我们需要注意的是 在C盘目录下 还生成了一个 以太坊目录：C:\Users\Administrator\AppData\Roaming\Ethereum&lt;/p&gt;
&lt;p&gt;这个路径下面存放的是 账户秘钥信息，区块文件等信息。&lt;/p&gt;
&lt;p&gt;geth account new  创建新账户命令&lt;/p&gt;
&lt;p&gt;秘钥一般存放在：C:\Users\Administrator\AppData\Roaming\Ethereum\keystore 如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/762349/201805/762349-20180509220850447-661418475.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h4&gt; 搭建以太坊私有链&lt;/h4&gt;
&lt;p&gt;编写创始区块CustomGenesis.json 文件内容如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;47&quot;&gt;
&lt;pre&gt;
&lt;span&gt;{
    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;nonce&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;0x0000000000000042&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,     
    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;timestamp&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;0x00&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;parentHash&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;0x0000000000000000000000000000000000000000000000000000000000000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;extraData&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;0x00&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,     
    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;gasLimit&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;0x8000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,     
    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;difficulty&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;0x400&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;mixhash&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;0x0000000000000000000000000000000000000000000000000000000000000000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;coinbase&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;0x3333333333333333333333333333333333333333&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,     
    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;alloc&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: {
     },
     &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;config&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: {
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;chainId&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;15&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;homesteadBlock&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;0&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;eip155Block&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;0&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;eip158Block&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;0&lt;/span&gt;&lt;span&gt;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;关注几个重点项：&lt;/p&gt;
&lt;p&gt;&lt;em&gt;difficulty”: “0x40000”,//难度，该值越大，出块越慢。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;em&gt;extraData”: “Genesis Block”,//附加信息，随意填写&lt;/em&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;gasLimit”: “0xffffffff”//每个块所能容载的gas上限&lt;/em&gt;&lt;/p&gt;
&lt;p&gt; ①创建目录：E:\Mychains\dev  将创始区块文件放入该目录下&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/762349/201805/762349-20180509221353156-1131039443.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;执行cmd &lt;/p&gt;
&lt;blockquote readability=&quot;10&quot;&gt;
&lt;p&gt;geth --identity &quot;mydev&quot; --rpc --rpcport &quot;8086&quot; --rpccorsdomain &quot;*&quot; --datadir &quot;E:\Mychains\dev&quot; --port &quot;8545&quot; --nodiscover --rpcapi &quot;db,eth,net,web3&quot; --networkid 99 init &quot;E:\Mychains\dev\CustomGenesis.json&quot;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt; 其中端口 也可以省略 用默认的 省略写法如下：&lt;/p&gt;
&lt;blockquote readability=&quot;9&quot;&gt;
&lt;p&gt;geth --identity &quot;mydev&quot; --rpc --rpccorsdomain &quot;*&quot; --datadir &quot;E:\Mychains\dev&quot; --rpcapi &quot;db,eth,net,web3&quot; --networkid 99 init &quot;E:\Mychains\dev\CustomGenesis.json&quot;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;执行后：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/762349/201805/762349-20180509221724263-1446513863.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;到这一步 表示私有链已经创建成功。那我们如果使用这个私有链呢？继续往下看&lt;/p&gt;
&lt;p&gt;执行cmd：&lt;/p&gt;
&lt;blockquote readability=&quot;9&quot;&gt;
&lt;p&gt;geth  --identity &quot;mydev&quot; --rpc --rpcport &quot;8080&quot; --rpccorsdomain &quot;*&quot; --datadir &quot;E:\Mychains\dev&quot; --port &quot;8545&quot; --nodiscover  --rpcapi &quot;db,eth,net,web3&quot; --networkid 99 console&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果是简写 可以直接写成：&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;geth  --datadir &quot;E:\Mychains\dev&quot;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt; 执行后：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/762349/201805/762349-20180509222044616-626482642.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;到这一步 表示本地私有链已经启动成功,我们可以运行Mist客户端看一下(此时右上角有PRIVAT-NET标示，说明此时链接的是本地私有网络)&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/762349/201805/762349-20180509222149938-669681579.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;运行后主界面如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/762349/201805/762349-20180509222334402-1088518095.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; 剩下的私有链新建账户 和公网主账户一致，在这里就不赘述了。&lt;/p&gt;
&lt;p&gt;另外，有几个地方需要注意，我们启动了本地私有链后 可以通过 geth查看下 当前运行的区块路径&lt;/p&gt;
&lt;p&gt;首先新开一个cmd命令窗口 输入：&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;geth attach  ipc:\\.\pipe\geth.ipc&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/762349/201805/762349-20180509222727309-1777918157.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;上图表示连接成功，然后我们看下 当前主用户的网络信息&lt;/p&gt;
&lt;p&gt;输入：admin.nodeInfo 如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/762349/201805/762349-20180509222832875-1295349693.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;如果大家留心观察会发现，这里的节点信息 和我们的创始区块文件是一模一样的。&lt;/p&gt;
&lt;p&gt;然后我们看下连接的是哪个区块文件 输入 admin.datadir 如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/762349/201805/762349-20180509222955502-2064377942.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这个文件就是刚才我们开始创建的那个文件目录。&lt;/p&gt;

&lt;p&gt;至此，你已经基本了解怎么样在本地搭建以太坊网络私有链(单节点)，剩下的就是构建多节点的私有链、创建多重签名钱包 以及智能合约 发行代币这块，这块我们后续补充。&lt;/p&gt;
&lt;p&gt;今天大概先写这么多吧。&lt;/p&gt;

&lt;p&gt;未完待续。。。。。&lt;/p&gt;

</description>
<pubDate>Wed, 09 May 2018 14:33:00 +0000</pubDate>
<dc:creator>潇十一郎</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/zhangxiaoyong/p/9017079.html</dc:identifier>
</item>
<item>
<title>yii2实战之初见端倪 - 章鱼喵</title>
<link>http://www.cnblogs.com/zhiqiexing/p/9017050.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/zhiqiexing/p/9017050.html</guid>
<description>&lt;p&gt;php框架有很多种，在国内应用较多的有：Thinkphp, Yii, Laravel, Codeigniter等。关于这些框架，孰优孰劣，是一个极具争议性的话题。各方支持者总能拿出自己的理由，把自己喜欢的框架捧上天，将其他框架喷成翔。&lt;/p&gt;
&lt;p&gt;因此，冒昧地给这些框架作排名是不明智的，很容易成为众矢之的。诚如黑格尔所说：“存在即合理”，流行的PHP框架必然有其存在的市场基础，要么是简单易学，撸起袖子直接开干，学习成本低，公司易招人；要么是高效强大，代码优雅，安全健壮，但学习门槛高，公司招人成本大。&lt;/p&gt;
&lt;p&gt;其实，完全没必要纠结于要学习哪种框架，选框架又不是选老婆，只能选一个。我们完全可以多掌握几个框架，而且是必须要这么做，不然思路会很狭隘。&lt;/p&gt;
&lt;p&gt;本系列文章之所以选用yii2构建一个完整的应用，基于我最近在深入了解yii2，便将自己对于yii2的理解表达出来，希望能帮助那些想了解yii2的同学。如果你对yii2感兴趣，欢迎入坑。如果你对yii2不感兴趣，更希望你能抽空了解下，给yii2一个机会，让她展现魅力，我相信，不喜欢用yii2的人，绝大部分是使用的姿势不对。好比普通人拿屠龙宝刀，只能用于切西瓜，还嫌其笨重。yii2享誉盛久，绝非浪得虚名。&lt;/p&gt;
&lt;p&gt;那么，现在开始我们的yii2之旅吧, 少年...&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/1864602-af8b77b09ab9f0d6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;加油，少年&quot;/&gt;&lt;/p&gt;

&lt;p&gt;现代化的php框架都支持用composer安装，yii2自然也不例外。如果你对composer不了解，到&lt;a href=&quot;https://www.phpcomposer.com/&quot;&gt;composer中文网&lt;/a&gt;补课。&lt;/p&gt;
&lt;p&gt;很悲剧的是，由于众所周之的原因，国内访问国外网络很慢，虽然composer为大多数PHP项目作了中国镜像，可对于yii2的有些插件并没有作镜像。因此，在没有梯子的情况下，用composer安装yii2很大可能是失败...&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/1864602-a1bc661b81438205.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;composer安装失败&quot;/&gt;&lt;/p&gt;
&lt;p&gt;我尝试了好几次，都没成功...&lt;/p&gt;
&lt;p&gt;看了&lt;a href=&quot;https://pkg.phpcomposer.com/&quot;&gt;composer中文社区的说明&lt;/a&gt;，我也很无奈啊...&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/1864602-7642cf2b77dcd343.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;yii2使用composer安装失败的原因&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/1864602-d4796ccf2ae9f8fb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;我也很绝望啊&quot;/&gt;&lt;/p&gt;
&lt;p&gt;于是，我放弃挣扎了，直接下载文档包&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.yiiframework.com/download&quot;&gt;归档文件下载地址&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/1864602-2c8f867d812b1e12.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;下载yii2归档文件&quot;/&gt;&lt;/p&gt;

&lt;p&gt;将归档文件解压，重命名为yii, 进入目录，执行 &lt;code&gt;php init&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/1864602-b7fcbb9fb2b1674c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;初始化yii&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/1864602-89ffa5a2d07e8ed8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;查看yii版本&quot;/&gt;&lt;/p&gt;
&lt;p&gt;项目建立后的第一件事，就是将项目推送到远程git仓库，相信我，使用git是你写任何代码之前最明智的选择。由于github的速度较慢，建议用国内的&lt;a href=&quot;https://gitee.com/&quot;&gt;gitee&lt;/a&gt;作为个人代码仓库。&lt;/p&gt;
&lt;p&gt;以下是我的&lt;a href=&quot;https://gitee.com/zhiqiexing/yii&quot;&gt;项目仓库链接&lt;/a&gt;, 关于yii2的实战系列教程代码都会提交到此项目，欢迎star&lt;/p&gt;

&lt;p&gt;yii2有两套模板，一个是基本模板，一个是高级模板。我们下载的是高级模板，自带了前台与后台目录，因此需要设置两个域名，host配置如下：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode bash&quot;&gt;
&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span class=&quot;kw&quot;&gt;127.0.0.1&lt;/span&gt;   frontend.test &lt;span class=&quot;co&quot;&gt;# 前台&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;127.0.0.1&lt;/span&gt;   backend.test &lt;span class=&quot;co&quot;&gt;# 后台&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;web服务器，我选用nginx，以下是nginx的配置:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode bash&quot;&gt;
&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span class=&quot;kw&quot;&gt;server&lt;/span&gt; {
        &lt;span class=&quot;kw&quot;&gt;charset&lt;/span&gt; utf-8&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;client_max_body_size&lt;/span&gt; 128M&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;kw&quot;&gt;listen&lt;/span&gt; 80&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;## listen for ipv4&lt;/span&gt;
        &lt;span class=&quot;co&quot;&gt;#listen [::]:80 default_server ipv6only=on; ## listen for ipv6&lt;/span&gt;

        &lt;span class=&quot;kw&quot;&gt;server_name&lt;/span&gt; frontend.test&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;root&lt;/span&gt;        /path/to/yii-application/frontend/web/&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;# 你的项目路径&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;index&lt;/span&gt;       index.php&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;kw&quot;&gt;access_log&lt;/span&gt;  /path/to/yii-application/log/frontend-access.log&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;# nginx日志存放在项目目录下&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;error_log&lt;/span&gt;   /path/to/yii-application/log/frontend-error.log&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;kw&quot;&gt;location&lt;/span&gt; / {
            &lt;span class=&quot;kw&quot;&gt;try_files&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;$uri&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;$uri&lt;/span&gt;/ /index.php&lt;span class=&quot;ot&quot;&gt;$is_args$args&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
        }

        &lt;span class=&quot;kw&quot;&gt;location&lt;/span&gt; ~ ^/assets/.*\.php$ {
            &lt;span class=&quot;kw&quot;&gt;deny&lt;/span&gt; all&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
        }

        &lt;span class=&quot;kw&quot;&gt;location&lt;/span&gt; ~ \.php$ {
            &lt;span class=&quot;kw&quot;&gt;include&lt;/span&gt; fastcgi_params&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;fastcgi_param&lt;/span&gt; SCRIPT_FILENAME &lt;span class=&quot;ot&quot;&gt;$document_root$fastcgi_script_name&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;fastcgi_pass&lt;/span&gt; 127.0.0.1:9000&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;try_files&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;$uri&lt;/span&gt; =404&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
        }
    
        &lt;span class=&quot;kw&quot;&gt;location&lt;/span&gt; ~* /\. {
            &lt;span class=&quot;kw&quot;&gt;deny&lt;/span&gt; all&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
        }
    }
     
    &lt;span class=&quot;kw&quot;&gt;server&lt;/span&gt; {
        &lt;span class=&quot;kw&quot;&gt;charset&lt;/span&gt; utf-8&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;client_max_body_size&lt;/span&gt; 128M&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
    
        &lt;span class=&quot;kw&quot;&gt;listen&lt;/span&gt; 80&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;## listen for ipv4&lt;/span&gt;
        
        &lt;span class=&quot;kw&quot;&gt;server_name&lt;/span&gt; backend.test&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;root&lt;/span&gt;        /path/to/yii-application/backend/web/&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;# 你的项目路径&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;index&lt;/span&gt;       index.php&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
    
        &lt;span class=&quot;kw&quot;&gt;access_log&lt;/span&gt;  /path/to/yii-application/log/backend-access.log&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;error_log&lt;/span&gt;   /path/to/yii-application/log/backend-error.log&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
    
        &lt;span class=&quot;kw&quot;&gt;location&lt;/span&gt; / {
            &lt;span class=&quot;kw&quot;&gt;try_files&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;$uri&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;$uri&lt;/span&gt;/ /index.php&lt;span class=&quot;ot&quot;&gt;$is_args$args&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
        }
    
        &lt;span class=&quot;kw&quot;&gt;location&lt;/span&gt; ~ ^/assets/.*\.php$ {
            &lt;span class=&quot;kw&quot;&gt;deny&lt;/span&gt; all&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
        }

        &lt;span class=&quot;kw&quot;&gt;location&lt;/span&gt; ~ \.php$ {
            &lt;span class=&quot;kw&quot;&gt;include&lt;/span&gt; fastcgi_params&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;fastcgi_param&lt;/span&gt; SCRIPT_FILENAME &lt;span class=&quot;ot&quot;&gt;$document_root$fastcgi_script_name&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;fastcgi_pass&lt;/span&gt; 127.0.0.1:9000&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;try_files&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;$uri&lt;/span&gt; =404&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
        }
    
        &lt;span class=&quot;kw&quot;&gt;location&lt;/span&gt; ~* /\. {
            &lt;span class=&quot;kw&quot;&gt;deny&lt;/span&gt; all&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
        }
    }&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;注意：将&lt;code&gt;/path/to/yii-application/&lt;/code&gt;修改为你的本地项目路径；&lt;br/&gt;在项目根目录新建&lt;code&gt;log&lt;/code&gt;目录存放nginx日志, 不然会报错！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;重启nginx服务&lt;/p&gt;&lt;p&gt;浏览器访问：&lt;code&gt;http://frontend.test&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/1864602-672ae8e68a943fcd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;前台界面&quot;/&gt;&lt;br/&gt;后台：&lt;code&gt;http://backend.test&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;浏览器访问：&lt;code&gt;http://backend.test&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/1864602-963dfd1a64a601bc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;后台界面&quot;/&gt;&lt;/p&gt;
&lt;p&gt;将log目录添加到&lt;code&gt;.gitignore&lt;/code&gt;，提交代码到远程仓库。&lt;/p&gt;

&lt;p&gt;本小节讲了如何安装配置yii2。下节将讲解yii2的控制器和视图是如何交互数据的。敬请关注...&lt;/p&gt;
</description>
<pubDate>Wed, 09 May 2018 14:25:00 +0000</pubDate>
<dc:creator>章鱼喵</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/zhiqiexing/p/9017050.html</dc:identifier>
</item>
<item>
<title>TCP流量控制和拥塞控制 - lingjiango</title>
<link>http://www.cnblogs.com/iou123lg/p/9017044.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/iou123lg/p/9017044.html</guid>
<description>&lt;p&gt;先来了解2个TCP的概念：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;MSS：Maximum Segment Size，TCP一次传输发送的最大数据段长度。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;RTT：Round-Trip Time，往返时延，表示从发送端发送数据开始，到发送端收到来自接收端的确认（接收端收到数据后便立即发送确认），总共经历的时延。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;TCP传输大块数据时，肯定需要进行数据分段，而每个分段所能携带的最大数据就是1个MSS，假设大块数据为100个MSS，那么发送方发送的方式大概有如下两种：&lt;/p&gt;
&lt;p&gt;1、  每次发送1个，收到接收方确认后，才发送下1个；&lt;/p&gt;
&lt;p&gt;2、  一口气发送100个，然后收到对方一起确认；&lt;/p&gt;
&lt;p&gt;显然，方式1中，一个RTT只能处理一个包，这样的传输效率太低了。而方式2看似很美好，实际会存在两个问题，一个是接收方的接收窗口未必能一次性接收这么多数据，另外一个是网络的带宽也不一定足够大，容易出现丢包事故。前一个问题就是标题中的流量控制(Flow control)，TCP采用的是滑动窗口机制(Sliding window)，后一个问题就是标题中的拥塞控制(Congestion control)。&lt;strong&gt;发送方的发送窗口或者说网络传输交互就取决于这两个问题的控制，谁控制的更严格，谁就占据了决定性因素，这也是为什么两者总是一起出现一起被讨论。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;流量控制(Flow control):&lt;/p&gt;
&lt;p&gt;TCP uses an end-to-end flow control protocol to avoid having the sender send data too fast for the TCP receiver to receive and process it reliably. Having a mechanism for flow control is essential in an environment where machines of diverse network speeds communicate.&lt;/p&gt;
&lt;p&gt;TCP使用端到端流量控制协议来避免发送方发送数据太快，以致TCP接收方不能可靠地接收和处理数据。在不同网络速度的机器进行通信的环境中，具有流量控制机制至关重要。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/289599/201805/289599-20180509220910868-934899202.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　图一&lt;/p&gt;
&lt;p&gt;图一为通过Wireshark抓包192.168.2.1和192.168.2.198的交互截图，可以看到有个标记Win，这个标记的含义就是接收端告诉发送端自己还有多少缓冲区可以接收数据。于是发送端就可以根据这个接收端的处理能力来发送数据，而不会导致接收端处理不过来。&lt;/p&gt;
&lt;p&gt;[TCP zerowindow]&amp;amp; [TCP window Full]&lt;/p&gt;
&lt;p&gt;提到Win标记，就顺便谈一下Wireshark的[TCP zerowindow]和[TCP window Full]，当Win=0时，Wireshark就会打上TCP zerowindow，表示缓存区已满，不能再接收数据了。当Wireshark在一个包上打上TCP window Full，就表示这个包的发送方已经把对方声明的接收窗口耗尽了。两者的共同特点都是传输暂停，前者的含义是发送方无法再接收数据，后者表示发送方无法再发送数据。&lt;/p&gt;
&lt;p&gt;回过头来再来说滑动窗口。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/289599/201805/289599-20180509221158997-927036946.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　　　　　　　　　　　图二截取自《TCP/IP详解》&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/289599/201805/289599-20180509221311539-839276428.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　　　　　　　　　　　  图三取自参考资料&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/289599/201805/289599-20180509221556258-1217325974.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　　　　　　　　　　　   图四取自参考资料&lt;/p&gt;
&lt;p&gt;图二和图三可以知道接收方会通知发送方当前已接收到的信息和可用窗口信息。&lt;/p&gt;
&lt;p&gt;图三和图四可以看出来窗口滑动的过程。&lt;/p&gt;
&lt;p&gt;总结：&lt;strong&gt;TCP的流量控制由滑动窗口来实现的，滑动窗口控制流量取决于接收方的窗口大小。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;拥塞控制(Congestion control):&lt;/p&gt;
&lt;p&gt;流量控制是端到端的交互，如果只是局域网内的两台设备交互，我想通过滑动窗口大概能控制得不差，但是实际网络的情况非常复杂，发送方和接收方之间还有路由器和交换机，网络传输线路又复杂，这个时候就需要拥塞控制。&lt;/p&gt;
&lt;p&gt;拥塞控制主要有四个算法：&lt;strong&gt;慢启动、拥塞避免、快速重传和快速恢复。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;慢启动：&lt;/p&gt;
&lt;p&gt;讨论慢启动算法先来了解下拥塞窗口的概念，这是慢启动算法为TCP发送方新增的窗口，congestion window，简称cwnd。对应上文，发送方取拥塞窗口和滑动窗口的最小值作为发送上限，即谁严格谁起决定因素。&lt;/p&gt;
&lt;p&gt;1、  连接建立开始，发送方不了解网络的情况，cwnd初始化比较小的值，RFC建议2-4个MSS，具体视MSS的大小而定；&lt;/p&gt;
&lt;p&gt;If (MSS &amp;lt;= 1095 bytes)&lt;/p&gt;
&lt;p&gt;      then win &amp;lt;= 4 * MSS;&lt;/p&gt;
&lt;p&gt;If (1095 bytes &amp;lt; MSS &amp;lt; 2190 bytes)&lt;/p&gt;
&lt;p&gt;      then win &amp;lt;= 4380;&lt;/p&gt;
&lt;p&gt;If (2190 bytes &amp;lt;= MSS)&lt;/p&gt;
&lt;p&gt;      then win &amp;lt;= 2 * MSS; 摘自rfc3390.&lt;/p&gt;
&lt;p&gt;2、  如果发送出去的包都被ACK，说明还未到达拥塞点，则增加拥塞窗口，RFC建议的是每收到n个ACK，则cwnd新增n个MSS，呈指数关系增长，虽然这个过程看似比较快，但是基数比较低，所以被称为“慢启动”。&lt;/p&gt;
&lt;p&gt;拥塞避免：&lt;/p&gt;
&lt;p&gt;其实慢启动除了维护了cwnd，还维护了慢启动临界值ssthresh，一般将ssthresh设置为65535字节。在cwnd&amp;lt;=ssthresh时，还是处于慢启动环节，一旦&amp;gt;ssthresh，开始进入拥塞避免。&lt;/p&gt;
&lt;p&gt;RFC建议拥塞避免环节，无论一个RTT可以收到多少个ACK，每一次确认都只新增1个MSS，呈线性关系增长，避免快速的触碰到网络拥塞点。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/289599/201805/289599-20180509221804474-618345382.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　　　　　　　　　　　图五取自参考资料&lt;/p&gt;
&lt;p&gt;快速重传和快速恢复：&lt;/p&gt;
&lt;p&gt;进入拥塞避免之后，最终还是会碰到拥塞点，发送方此时迟迟得不到确认，当然得不到确认也有可能是因为&lt;a href=&quot;http://www.cnblogs.com/iou123lg/p/8727598.html&quot; target=&quot;_blank&quot;&gt;延迟确认&lt;/a&gt;导致的。发送方此时决定等待一段时间，如果一段时间后还是得不到确认，就发起重传，这个过程叫做超时重传。从发出原始包到重传该包的时间叫做RTO(Retransmission TimeOut)。&lt;/p&gt;
&lt;p&gt;进入超时重传后，RFC建议将cwnd设置为1个MSS，而对于ssthresh，RFC5681建议的是发生拥塞时未被ACK的数据量的1/2，但必须大于等于2个MSS。然后重新进入慢启动环节。超时重传因为需要等待RTO之后才能进入新的恢复环节，所以对网络性能的影响是比较大的。所以各路大神又想到了一个新的方式，看能否无需等待RTO，就发起重传，这种方式叫做快速重传。快速重传规定在收到3个及以上重复ACK时就触发重传，不再进入慢启动环节，然后直接进入拥塞避免，这个就是快速恢复算法。为什么是3个？因为1-2个重复ACK，很有可能是乱序，只有在3个及以上的时候才是有可能丢包了。关于具体快速重传和快速恢复的算法可以看下参考资料，已经写得非常详细了。&lt;/p&gt;

&lt;p&gt;以上就是我对TCP流量控制和拥塞控制的理解，如有不当言论，欢迎留言交流反馈。&lt;/p&gt;

&lt;p&gt;参考资料：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Transmission_Control_Protocol&quot;&gt;https://en.wikipedia.org/wiki/Transmission_Control_Protocol&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/TCP_congestion_control&quot;&gt;https://en.wikipedia.org/wiki/TCP_congestion_control&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.zhihu.com/question/32255109&quot;&gt;https://www.zhihu.com/question/32255109&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.zhihu.com/question/38749788&quot;&gt;https://www.zhihu.com/question/38749788&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://coolshell.cn/articles/11564.html&quot;&gt;https://coolshell.cn/articles/11564.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://coolshell.cn/articles/11609.html&quot;&gt;https://coolshell.cn/articles/11609.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://blough.ece.gatech.edu/4110/TCPTimers.pdf&quot;&gt;http://blough.ece.gatech.edu/4110/TCPTimers.pdf&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.eventhelix.com/RealtimeMantra/Networking/TCP_Slow_Start.pdf&quot;&gt;http://www.eventhelix.com/RealtimeMantra/Networking/TCP_Slow_Start.pdf&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Wed, 09 May 2018 14:23:00 +0000</pubDate>
<dc:creator>lingjiango</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/iou123lg/p/9017044.html</dc:identifier>
</item>
</channel>
</rss>