<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>使用LayUI操作数据表格 - 井传红</title>
<link>http://www.cnblogs.com/jingch/p/7620075.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/jingch/p/7620075.html</guid>
<description>&lt;pre&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;=&quot;utf-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;layui&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;renderer&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;webkit&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;http-equiv&lt;/span&gt;&lt;span&gt;=&quot;X-UA-Compatible&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;IE=edge,chrome=1&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;viewport&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;width=device-width, initial-scale=1, maximum-scale=1&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;link &lt;/span&gt;&lt;span&gt;rel&lt;/span&gt;&lt;span&gt;=&quot;stylesheet&quot;&lt;/span&gt;&lt;span&gt; href&lt;/span&gt;&lt;span&gt;=&quot;../Assets/css/layui.css&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;


    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 注意：如果你直接复制所有代码到本地，上述css路径需要改成你本地的 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;=&quot;margin-bottom: 5px;&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 示例-970 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;ins &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;adsbygoogle&quot;&lt;/span&gt;&lt;span&gt; style&lt;/span&gt;&lt;span&gt;=&quot;display:inline-block;width:700px;height:700px&quot;&lt;/span&gt;&lt;span&gt; data-ad-client&lt;/span&gt;&lt;span&gt;=&quot;ca-pub-6111334333458862&quot;&lt;/span&gt;&lt;span&gt; data-ad-slot&lt;/span&gt;&lt;span&gt;=&quot;3820120620&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;ins&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;demoTable&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
    搜索商户：
    &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;layui-inline&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;layui-input&quot;&lt;/span&gt;&lt;span&gt; name&lt;/span&gt;&lt;span&gt;=&quot;keyword&quot;&lt;/span&gt;&lt;span&gt; id&lt;/span&gt;&lt;span&gt;=&quot;demoReload&quot;&lt;/span&gt;&lt;span&gt; autocomplete&lt;/span&gt;&lt;span&gt;=&quot;off&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;button &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;layui-btn&quot;&lt;/span&gt;&lt;span&gt; data-type&lt;/span&gt;&lt;span&gt;=&quot;reload&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;搜索&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;button&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;table &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;layui-hide&quot;&lt;/span&gt;&lt;span&gt; id&lt;/span&gt;&lt;span&gt;=&quot;LAY_table_user&quot;&lt;/span&gt;&lt;span&gt; lay-filter&lt;/span&gt;&lt;span&gt;=&quot;useruv&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;table&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;text/html&quot;&lt;/span&gt;&lt;span&gt; id&lt;/span&gt;&lt;span&gt;=&quot;barDemo&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;a class&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;layui-btn layui-btn-primary layui-btn-mini&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; lay&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;event&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;detail&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;查看&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;a&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;a class&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;layui-btn layui-btn-mini&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; lay&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;event&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;edit&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;编辑&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;a&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;a class&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;layui-btn layui-btn-danger layui-btn-mini&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; lay&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;event&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;del&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;删除&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;a&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;


&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;../Assets/layui.js&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
    layui.use(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;table&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; table &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; layui.table;

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;方法级渲染&lt;/span&gt;
&lt;span&gt;        table.render({
            elem: &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;#LAY_table_user&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
            ,url: &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;UVServlet&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
            ,cols: [[
                {checkbox: &lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;, fixed: &lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;}
                ,{field:&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, title: &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;ID&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, width:&lt;/span&gt;&lt;span&gt;80&lt;/span&gt;&lt;span&gt;, sort: &lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;, fixed: &lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;}
                ,{field:&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;aid&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, title: &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;商户&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, width:&lt;/span&gt;&lt;span&gt;80&lt;/span&gt;&lt;span&gt;, sort: &lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;}
                ,{field:&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;uv&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, title: &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;访问量&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, width:&lt;/span&gt;&lt;span&gt;80&lt;/span&gt;&lt;span&gt;, sort: &lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;,edit:&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;}
                ,{field:&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;date&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, title: &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;日期&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, width:&lt;/span&gt;&lt;span&gt;180&lt;/span&gt;&lt;span&gt;}
                ,{field:&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;datatype&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, title: &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;日期类型&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, width:&lt;/span&gt;&lt;span&gt;100&lt;/span&gt;&lt;span&gt;}
                ,{field:&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;right&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, title: &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;操作&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, width:&lt;/span&gt;&lt;span&gt;177&lt;/span&gt;&lt;span&gt;,toolbar:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;#barDemo&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;}
            ]]
            ,id: &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;testReload&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
            ,page: &lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;
            ,height: &lt;/span&gt;&lt;span&gt;600&lt;/span&gt;&lt;span&gt;
        });

        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; $ &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; layui.$, active &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; {
            reload: &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; demoReload &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; $(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;#demoReload&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);

                table.reload(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;testReload&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, {
                    where: {
                        keyword: demoReload.val()
                    }
                });
            }
        };



        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;监听表格复选框选择&lt;/span&gt;
&lt;span&gt;        table.on(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;checkbox(useruv)&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(obj){
            console.log(obj)
        });
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;监听工具条&lt;/span&gt;
&lt;span&gt;        table.on(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;tool(useruv)&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(obj){
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; data &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; obj.data;
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt;(obj.event &lt;/span&gt;&lt;span&gt;===&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;detail&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;){
                layer.msg(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;ID：&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt; data.id &lt;/span&gt;&lt;span&gt;+&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt; 的查看操作&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
            } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;&lt;span&gt;(obj.event &lt;/span&gt;&lt;span&gt;===&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;del&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;){
                layer.confirm(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;真的删除行么&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(index){
                    console.log(data);
                    $.ajax({
                        url: &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;UVServlet&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                        type: &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;POST&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                        data:{&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;uvid&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;:data.id,&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;memthodname&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;deleteuv&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;aid&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;:data.aid},
                        dataType: &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;json&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                        success: &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(data){

                            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt;(data.state&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;){
                                obj.del();
                                layer.close(index);
                                layer.msg(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;删除成功&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, {icon: &lt;/span&gt;&lt;span&gt;6&lt;/span&gt;&lt;span&gt;});
                            }&lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;{
                                layer.msg(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;删除失败&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, {icon: &lt;/span&gt;&lt;span&gt;5&lt;/span&gt;&lt;span&gt;});
                            }
                        }

                    });
                });
            } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;&lt;span&gt;(obj.event &lt;/span&gt;&lt;span&gt;===&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;edit&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;){

                layer.prompt({
                    formType: &lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;
                    ,title: &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;修改 ID 为 [&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt; data.id &lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;] 的访问量&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
                    ,value: data.uv
                }, &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(value, index){
                    EidtUv(data,value,index,obj);
                   


                });



            }
        });

        $(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;.demoTable .layui-btn&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;).on(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;click&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; type &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; $(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;).data(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
            active[type] &lt;/span&gt;&lt;span&gt;?&lt;/span&gt;&lt;span&gt; active[type].call(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;) : &lt;/span&gt;&lt;span&gt;''&lt;/span&gt;&lt;span&gt;;
        });

        &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;  EidtUv(data,value,index,obj) {
            $.ajax({
                url: &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;UVServlet&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                type: &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;POST&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                data:{&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;uvid&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;:data.id,&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;memthodname&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;edituv&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;aid&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;:data.aid,&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;uv&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;:value},
                dataType: &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;json&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                success: &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(data){

                    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt;(data.state&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;){

                        layer.close(index);
                        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;同步更新表格和缓存对应的值&lt;/span&gt;
&lt;span&gt;                        obj.update({
                            uv: value
                        });
                        layer.msg(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;修改成功&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, {icon: &lt;/span&gt;&lt;span&gt;6&lt;/span&gt;&lt;span&gt;});
                    }&lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;{
                        layer.msg(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;修改失败&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, {icon: &lt;/span&gt;&lt;span&gt;5&lt;/span&gt;&lt;span&gt;});
                    }
                }

            });
        }


    });
&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;</description>
<pubDate>Mon, 02 Oct 2017 06:14:00 +0000</pubDate>
<dc:creator>井传红</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/jingch/p/7620075.html</dc:identifier>
</item>
<item>
<title>Eclipse连接SQL Server 2008数据库 以及问题总结 - Skylar-Giver</title>
<link>http://www.cnblogs.com/skylarzhan/p/7619977.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/skylarzhan/p/7619977.html</guid>
<description>&lt;p&gt;&lt;span&gt;Eclipse中使用SQL server 2008数据库&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;一、准备材料&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;要能够使用数据库就要有相应的JDBC，所以我们要去Microsoft官网下载 &lt;a href=&quot;https://www.microsoft.com/zh-cn/download/details.aspx?id=11774&quot;&gt;https://www.microsoft.com/zh-cn/download/details.aspx?id=11774&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/1008459/201710/1008459-20171002125414240-877694392.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/1008459/201710/1008459-20171002125423458-1454741202.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/1008459/201710/1008459-20171002125434958-1364318189.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1008459/201710/1008459-20171002125453818-1682839319.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/1008459/201710/1008459-20171002125507333-818309187.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p align=&quot;left&quot;&gt;&lt;span&gt;二、配置SQL server 2008&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;请先确保已经设置好了sa,如果不是，可以参照下面链接修改 &lt;a href=&quot;http://jingyan.baidu.com/article/8cdccae9452b3c315513cd52.html&quot;&gt;http://jingyan.baidu.com/article/8cdccae9452b3c315513cd52.html&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/1008459/201710/1008459-20171002125532568-476984940.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p align=&quot;left&quot;&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/1008459/201710/1008459-20171002125539661-1556574195.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p align=&quot;left&quot;&gt;&lt;span&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/1008459/201710/1008459-20171002125551943-1995381017.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p align=&quot;left&quot;&gt;&lt;span&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/1008459/201710/1008459-20171002125600708-1254398444.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;然后重启数据库，重启完毕后，接下来使用命令测试1433端口是否打开。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;接着开始菜单 → 运行cmd → 在命令提示符下输入：telnet 127.0.0.1 1433，（注意telnet与127之间有空格，1与1433之间有空格）若提示“不能打开到主机的连接，&lt;strong&gt;&lt;span&gt;在端口 1433: 连接失败”，则说明1433端口没有打开，需要重新进行以上配置。如果是显示telnet不是内部命令，则按照图后步骤进行设置&lt;/span&gt;&lt;/strong&gt;，若连接成功，显示如图8所示：&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/1008459/201710/1008459-20171002125611099-1675816068.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;打开控制面板，进入程序，然后点击打开或者关闭windows，往下拉，可以看到telnet客户端，选择即可。然后重复上面第五的步骤。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;http://jingyan.baidu.com/article/6525d4b1377913ac7d2e94eb.html  &lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt; &lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;配置环境变量classpath，将该sqljdbc4放置在jdk1.7(你们的版本)lib中,&lt;a href=&quot;http://jingyan.baidu.com/article/cbcede07cf5fef02f40b4ddd.html&quot;&gt;http://jingyan.baidu.com/article/cbcede07cf5fef02f40b4ddd.html&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;em id=&quot;__mceDel&quot;&gt;&lt;span&gt;这是一条关于环境变量的设置链接。&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/1008459/201710/1008459-20171002125621583-1661073674.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p align=&quot;left&quot;&gt;&lt;span&gt;右击电脑的属性，然后点击高级属性设置，点击环境变量设置，将该jar添加到之前安装的目录下，如果没有，则新建，并且为其设置地址目录。&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt; &lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;三、使用eclipse测试链接SQL server 2008 数据库：&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;1、打开SQL server 2008 数据库，新建一个数据库jsp。&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;2、运行eclipse新建一个project，然后新建一个包，包里新建一个java文件，Main文件。&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/1008459/201710/1008459-20171002125632255-37649086.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p align=&quot;left&quot;&gt;&lt;span&gt;3、将sqljdbc4.jar copy 进入该project ，然后右击它，点击build path。（同时也可以把sqljdbc4jar类放到jre/lib/ext下，并放到tomcat/lib下，这样就可以应用到所有jsp文件，减少对每个项目进行sqljdbc4jar的加载）&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;4、进入Main.java，将下面的代码复制进入&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;package&lt;/span&gt;&lt;span&gt; pkg;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;import&lt;/span&gt; java.sql.*&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; 
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Main {
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;  &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String [] args)
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt; {
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;   String driverName=&quot;com.microsoft.sqlserver.jdbc.SQLServerDriver&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;   String dbURL=&quot;jdbc:sqlserver://127.0.0.1:1433;DatabaseName=jsp&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;   String userName=&quot;sa&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;   String userPwd=&quot;123&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;  &lt;span&gt;try&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;    Class.forName(driverName);
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;     System.out.println(&quot;加载驱动成功！&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; }&lt;span&gt;catch&lt;/span&gt;&lt;span&gt;(Exception e){
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;    e.printStackTrace();
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;     System.out.println(&quot;加载驱动失败！&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;try&lt;/span&gt;&lt;span&gt;{
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;     Connection dbConn=&lt;span&gt;DriverManager.getConnection(dbURL,userName,userPwd);
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;         System.out.println(&quot;连接数据库成功！&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; }&lt;span&gt;catch&lt;/span&gt;&lt;span&gt;(Exception e)
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; &lt;span&gt;    e.printStackTrace();
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;     System.out.print(&quot;SQL Server连接失败！&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; &lt;span&gt;}        
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; 
&lt;span&gt;30&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;如果在连接过程中出现 talnet 127.0.0.1 post 1433 no response,先检查一遍是否设置有误，如果没有，那重新启动下计算机，因为可能未更新，我也是遇到这个问题，后来重启后便成功连接上了数据库。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;参考链接&lt;a href=&quot;http://blog.163.com/jackie_howe/blog/static/19949134720125173539380/&quot;&gt;http://blog.163.com/jackie_howe/blog/static/19949134720125173539380/&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Mon, 02 Oct 2017 05:03:00 +0000</pubDate>
<dc:creator>Skylar-Giver</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/skylarzhan/p/7619977.html</dc:identifier>
</item>
<item>
<title>JPEG流封装AVI视频 - 原野追逐</title>
<link>http://www.cnblogs.com/songhe364826110/p/7619949.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/songhe364826110/p/7619949.html</guid>
<description>

&lt;p&gt;AVI采用RIFF文件结构方式，RIFF是微软定义的一种用于管理windows环境中多媒体数据的文件格式，波形音频wave、MIDI和数字视频AVI都采用这种格式存储，构造RIFF文件的基本单元叫做数据块（Chunk），每个数据块包含3个部分：&lt;/p&gt;
&lt;p&gt;（1）4字节的数据块标记（Chunk ID）&lt;/p&gt;
&lt;p&gt;（2）4字节的数据块大小&lt;/p&gt;
&lt;p&gt;（3）数据&lt;/p&gt;
&lt;p&gt;整个RIFF文件可以看成一个ID为RIFF的数据块，RIFF块包含一系列子块，其中有一种子块的ID为LIST，称为LIST块，LIST块中可以再包含一系列子块，但除了LIST块的其他所有子块都不能再包含子块。&lt;/p&gt;
&lt;p&gt;RIFF和LIST块分别比普通的数据块多一个被称为形式类型（Form Type）和列表类型（List Type）的数据域，其组成如下：&lt;/p&gt;
&lt;p&gt;（1）4字节的数据块标记（Chunk ID）&lt;/p&gt;
&lt;p&gt;（2）4字节的数据块大小&lt;/p&gt;
&lt;p&gt;（3）4字节的形式类型（对于RIFF块）或列表类型（对于LIST块）&lt;/p&gt;
&lt;p&gt;（4）数据&lt;/p&gt;

&lt;p&gt;AVI文件是最复杂的RIFF文件，它能够同时存储音频和视频数据（&lt;strong&gt;注：本文档不涉及音频相关内容，只针对视频数据进行介绍&lt;/strong&gt;），AVI文件RIFF块的形式类型是AVI ，它包含以下3个子块：&lt;/p&gt;
&lt;p&gt;（1）信息块，ID为hdrl的LIST块，用于定义AVI文件的数据格式&lt;/p&gt;
&lt;p&gt;（2）数据块，ID为movi的LIST块，用于存储音视频数据&lt;/p&gt;
&lt;p&gt;（3）索引块，ID为idxl的数据块，用于定义音视频数据的索引，是可选块&lt;/p&gt;

&lt;p&gt;AVI文件结构如图1所示&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1053346/201710/1053346-20171002122447411-2091659398.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;                                    图1  AVI文件结构&lt;/p&gt;
&lt;h2&gt;1.1 信息块&lt;/h2&gt;
&lt;p&gt;信息块包含两个子块：一个ID为avih的子块和一个ID为strl的LIST块。&lt;/p&gt;
&lt;h3&gt;1.1.1 avih块&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1053346/201710/1053346-20171002122621911-578987155.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;                                                  图2  avih块结构&lt;/p&gt;
&lt;p&gt;avih块可用如图2所示的struct avi_avih_chunk结构体定义，图中已对结构体各变量的含义进行了解释，以下是对其中几个变量的补充说明：&lt;/p&gt;
&lt;p&gt;（1）max_bytes_per_sec&lt;/p&gt;
&lt;p&gt;max_bytes_per_sec用于控制视频的最大码率，即每秒传输的最大数据量。但实际上，给这个变量赋值并不能影响视频的码率，原因如下：设JPEG流图像总帧数为nframes，视频帧率为fps，各帧图像平均大小为len，则封装的AVI视频时长、文件大小和视频码率分别为&lt;/p&gt;
&lt;p&gt;time = nframes / fps&lt;/p&gt;
&lt;p&gt;video_size = nframes * len（实际大小还要加上文件头和文件尾的数据）&lt;/p&gt;
&lt;p&gt;rate = video_size / time = fps * len&lt;/p&gt;
&lt;p&gt;由此可见，在固定的帧率fps下，视频码率完全取决于JPEG各帧图像的大小，和max_bytes_per_sec的值没有关系，所以这个变量设为0即可。&lt;/p&gt;
&lt;p&gt;（2）flags&lt;/p&gt;
&lt;p&gt;flags表示AVI文件的全局属性，如是否含有索引块、是否即有音频数据又有视频数据等，不进行任何标记时flags值为0，若含有索引块，则flags值为0x00000010。&lt;/p&gt;
&lt;p&gt;（3）init_frames&lt;/p&gt;
&lt;p&gt;AVI文件若同时存储了音频和视频数据，则音频数据和视频数据是交叉存储的，init_frames仅在这种情况下使用，对于只有视频流的情况，该变量的值为0。&lt;/p&gt;
&lt;p&gt;（4）width、height&lt;/p&gt;
&lt;p&gt;这里的width和height不是JPEG图像的宽和高，而是用播放器打开AVI文件时视频主窗口的宽和高，举个例子，JPEG图像大小为1920*1080，width和height分别设为960和540，用QQ影音打开AVI文件，则QQ影音会以960*540的窗口大小进行播放。&lt;/p&gt;
&lt;h3&gt;1.1.2 strl块&lt;/h3&gt;
&lt;p&gt;strl块由图3所示的结构体定义，它包含strh和strf两个子块。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1053346/201710/1053346-20171002122839021-1630308083.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;                                             图3  strl块结构&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;1、strh&lt;/strong&gt;&lt;strong&gt;块结构&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1053346/201710/1053346-20171002123004630-759071414.png&quot; alt=&quot;&quot;/&gt;&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1053346/201710/1053346-20171002123012349-1299195661.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;                                                图4  strh块结构&lt;/p&gt;
&lt;p&gt;图4所示为strh块结构定义，下面是对结构体内一些变量含义的补充说明：&lt;/p&gt;
&lt;p&gt;（1）codec&lt;/p&gt;
&lt;p&gt;codec是一个长度为4的字符数组，用于指定数据流的编码格式，也就是播放器播放这个流时需要的解码器，对于JPEG编码的视频流，codec数组内容就是'J', 'P', 'E', 'G'，而不能随意指定，否则播放器播放时会无法解码。&lt;/p&gt;
&lt;p&gt;（2）scale、rate&lt;/p&gt;
&lt;p&gt;对于视频流，rate除以scale等于视频帧率，因此这两个变量可赋值为scale = 1、rate = fps。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;2、strf&lt;/strong&gt;&lt;strong&gt;块结构&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;strf块结构根据strh块中stream_type是视频流还是音频流而有所不同，对于视频流，strf块结构如图5所示，其中bitcount表示每个图像像素占的位数，其值根据视频流的实际情况而定，但只能是1、4、8、16、24和32之一，常用的有1（黑白二值化图像）、8（256阶灰度图）和24（RGB图像）。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1053346/201710/1053346-20171002123126411-932304236.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;                                              图5  针对视频流的strf块结构&lt;/p&gt;
&lt;h2&gt;1.2 数据块&lt;/h2&gt;
&lt;p&gt;由图1可知，数据块是一个ID为movi的LIST列表，也称为movi块，在仅有视频流时，该部分存储的就是一帧一帧的图像数据，图6展示了视频流movi块的详细结构。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1053346/201710/1053346-20171002123212302-502650477.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;                        图6 仅有视频流的movi块结构&lt;/p&gt;
&lt;p&gt;可以看到，movi块首先是一个固定结构的LIST列表头，包括块ID、块大小和块类型，其中块ID固定为LIST，块类型固定为movi，块大小为movi块去掉开头8字节后的大小。&lt;/p&gt;
&lt;p&gt;然后是movi块数据，也就是各帧视频图像对应的数据块，每一帧图像的数据块都包含三部分：&lt;/p&gt;
&lt;p&gt;（1）4字节ID：可以为00dc或00db，00dc表示压缩的视频数据，00db表示未压缩的视频数据，根据视频流的实际情况来选择赋值。&lt;/p&gt;
&lt;p&gt;（2）4字节frame length：图像数据长度（单位：字节），该长度必须是4的整数倍，如果不是，则需要将其修正到4的整数倍，比如frame length原始数据为99，则需将其加到100。&lt;/p&gt;
&lt;p&gt;（3）frame data：真正的图像数据。&lt;/p&gt;
&lt;h2&gt;1.3 索引块&lt;/h2&gt;
&lt;p&gt;索引块是AVI文件结构的可选部分，它是一个ID等于idxl的数据块，索引块提供了movi块中存储各帧图像的数据块在AVI文件中的位置索引，作用是提高AVI文件的读写速度，提高视频播放时的体验效果。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1053346/201710/1053346-20171002123258630-2043963969.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;                                     图7 索引块结构&lt;/p&gt;
&lt;p&gt;如图7所示为索引块结构，包括块ID、块大小和块数据三部分，其中块ID固定为idxl，块大小等于索引块数据的大小。&lt;/p&gt;
&lt;p&gt;索引块数据是movi块中存储各帧图像数据块的索引，每一帧图像的索引都是一个16字节的数据结构，具体如下：&lt;/p&gt;
&lt;p&gt;（1）4字节ChunkID：即movi块各帧图像数据块的ID，00dc或00db&lt;/p&gt;
&lt;p&gt;（2）4字节ChunkFlag：表示该帧图像是否是关键帧，0x10代表关键帧，0x00代表非关键帧&lt;/p&gt;
&lt;p&gt;（3）4字节ChunkOffset：图像数据块相对于“movi”标示符（图6红色箭头所指处）的偏移量，由图6可得，各帧图像索引ChunkOffset的值为：&lt;/p&gt;
&lt;p&gt;第一帧图像索引àChunkOffset1 = 4;&lt;/p&gt;
&lt;p&gt;第二帧图像索引àChunkOffset2 = ChunkOffset1+8+第一帧图像数据长度&lt;/p&gt;
&lt;p&gt;第三帧图像索引àChunkOffset3 = ChunkOffset2+8+第二帧图像数据长度&lt;/p&gt;
&lt;p&gt;…… （后面各帧图像索引以此类推，其中各帧图像数据长度指的是修正到4的整数倍后的长度）&lt;/p&gt;
&lt;p&gt;（4）4字节ChunkLength：修正到4的整数倍后的各帧图像数据长度&lt;/p&gt;

&lt;p&gt;JPEG流封装AVI视频的本质是按照AVI结构进行文件读写，操作流程大体上可分为三个步骤：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;步骤1：创建空白AVI文件，设置文件偏移量到数据块movi标示符后面&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;（1）创建AVI文件，以二进制写方式打开&lt;/p&gt;
&lt;p&gt;（2）计算文件偏移量offset，等于RIFF文件头12字节 + hdrl块大小 + movi LIST头12字节&lt;/p&gt;
&lt;p&gt;（3）设置AVI文件偏移量为offset&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;步骤2：从offset偏移量处开始，向AVI文件中逐帧写入JPEG数据&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;（1）将当前JPEG图像数据长度加到4的整数倍，用length表示&lt;/p&gt;
&lt;p&gt;（2）JPEG图像是压缩过的图像数据，故写入'0', '0', 'd', 'c'&lt;/p&gt;
&lt;p&gt;（3）写入当前JPEG图像数据长度length&lt;/p&gt;
&lt;p&gt;（4）写入当前JPEG图像数据，写入长度为length&lt;/p&gt;
&lt;p&gt;（5）循环上述过程，完成逐帧图像数据的写入&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;步骤3：JPEG数据写完后，先继续向后写索引块，再定位到文件头回填各块数据&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;（1）写索引块&lt;/p&gt;
&lt;p&gt;- 先写块ID  'i', 'd', 'x', 'l'&lt;/p&gt;
&lt;p&gt;- 再写块大小 16 * nframes&lt;/p&gt;
&lt;p&gt;- 最后写各帧图像的索引&lt;/p&gt;
&lt;p&gt;（2）从文件头开始，回填各块数据&lt;/p&gt;
&lt;p&gt;- 设置文件偏移量为0&lt;/p&gt;
&lt;p&gt;- 按照AVI文件结构，写入步骤1跳过的各块数据&lt;/p&gt;
&lt;p&gt;需要注意的是，步骤3写索引块时需要各帧图像的数据长度和总帧数，回填各块数据时也需要总帧数和所有帧的总大小，因此步骤2写入JPEG数据时需要保存它们的值。&lt;/p&gt;

&lt;p&gt; 我完成的代码，是以若干张JPEG图片作为JPEG流，先将图片数据读入内存，再写入AVI文件，共包含五个文件：&lt;/p&gt;
&lt;p&gt;1、list.h和list.c，双向循环链表，作用是保存各帧图像大小，用于写索引块&lt;/p&gt;
&lt;p&gt;2、Jpeg2AVI.h和Jpeg2AVI.c，用于将JPEG流封装为AVI视频&lt;/p&gt;
&lt;p&gt;3、main.c，测试程序&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Jpeg2AVI.h&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36.5&quot;&gt;&lt;img id=&quot;code_img_closed_aa43b033-9bcf-4076-b44b-a012402d2b41&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_aa43b033-9bcf-4076-b44b-a012402d2b41&quot; class=&quot;code_img_opened&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_aa43b033-9bcf-4076-b44b-a012402d2b41&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;68&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;#ifndef _JPEG2AVI_H_
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;#define&lt;/span&gt; _JPEG2AVI_H_
&lt;span&gt; 3&lt;/span&gt; 
&lt;span&gt; 4&lt;/span&gt; #include &amp;lt;stdio.h&amp;gt;
&lt;span&gt; 5&lt;/span&gt; 
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; jpeg2avi_start(FILE *&lt;span&gt;fp);
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; jpeg2avi_add_frame(FILE *fp, &lt;span&gt;void&lt;/span&gt; *data, unsigned &lt;span&gt;int&lt;/span&gt;&lt;span&gt; len);
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; jpeg2avi_end(FILE *fp, &lt;span&gt;int&lt;/span&gt; width, &lt;span&gt;int&lt;/span&gt; height, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; fps);
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; 
&lt;span&gt;10&lt;/span&gt; typedef &lt;span&gt;struct&lt;/span&gt;&lt;span&gt; avi_riff_head
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;     unsigned &lt;span&gt;char&lt;/span&gt; id[&lt;span&gt;4&lt;/span&gt;&lt;span&gt;];        
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;     unsigned &lt;span&gt;int&lt;/span&gt;&lt;span&gt; size;           
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;     unsigned &lt;span&gt;char&lt;/span&gt; type[&lt;span&gt;4&lt;/span&gt;&lt;span&gt;];   
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;}AVI_RIFF_HEAD, AVI_LIST_HEAD;
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; 
&lt;span&gt;17&lt;/span&gt; typedef &lt;span&gt;struct&lt;/span&gt;&lt;span&gt; avi_avih_chunk
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;     unsigned &lt;span&gt;char&lt;/span&gt; id[&lt;span&gt;4&lt;/span&gt;];            &lt;span&gt;//&lt;/span&gt;&lt;span&gt;块ID，固定为avih&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt;     unsigned &lt;span&gt;int&lt;/span&gt; size;              &lt;span&gt;//&lt;/span&gt;&lt;span&gt;块大小，等于struct avi_avih_chunk去掉id和size的大小&lt;/span&gt;
&lt;span&gt;21&lt;/span&gt;     unsigned &lt;span&gt;int&lt;/span&gt; us_per_frame;      &lt;span&gt;//&lt;/span&gt;&lt;span&gt;视频帧间隔时间(以微秒为单位)&lt;/span&gt;
&lt;span&gt;22&lt;/span&gt;     unsigned &lt;span&gt;int&lt;/span&gt; max_bytes_per_sec; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;AVI文件的最大数据率&lt;/span&gt;
&lt;span&gt;23&lt;/span&gt;     unsigned &lt;span&gt;int&lt;/span&gt; padding;           &lt;span&gt;//&lt;/span&gt;&lt;span&gt;设为0即可&lt;/span&gt;
&lt;span&gt;24&lt;/span&gt;     unsigned &lt;span&gt;int&lt;/span&gt; flags;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;AVI文件全局属性，如是否含有索引块、音视频数据是否交叉存储等&lt;/span&gt;
&lt;span&gt;25&lt;/span&gt;     unsigned &lt;span&gt;int&lt;/span&gt; total_frames;      &lt;span&gt;//&lt;/span&gt;&lt;span&gt;总帧数&lt;/span&gt;
&lt;span&gt;26&lt;/span&gt;     unsigned &lt;span&gt;int&lt;/span&gt; init_frames;       &lt;span&gt;//&lt;/span&gt;&lt;span&gt;为交互格式指定初始帧数(非交互格式应该指定为0)&lt;/span&gt;
&lt;span&gt;27&lt;/span&gt;     unsigned &lt;span&gt;int&lt;/span&gt; streams;           &lt;span&gt;//&lt;/span&gt;&lt;span&gt;文件包含的流的个数，仅有视频流时为1&lt;/span&gt;
&lt;span&gt;28&lt;/span&gt;     unsigned &lt;span&gt;int&lt;/span&gt; suggest_buff_size; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;指定读取本文件建议使用的缓冲区大小，通常为存储一桢图像                                            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;以及同步声音所需的数据之和，不指定时设为0&lt;/span&gt;
&lt;span&gt;29&lt;/span&gt;     unsigned &lt;span&gt;int&lt;/span&gt; width;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;视频主窗口宽度（单位：像素）&lt;/span&gt;
&lt;span&gt;30&lt;/span&gt;     unsigned &lt;span&gt;int&lt;/span&gt; height;            &lt;span&gt;//&lt;/span&gt;&lt;span&gt;视频主窗口高度（单位：像素）&lt;/span&gt;
&lt;span&gt;31&lt;/span&gt;     unsigned &lt;span&gt;int&lt;/span&gt; reserved[&lt;span&gt;4&lt;/span&gt;];       &lt;span&gt;//&lt;/span&gt;&lt;span&gt;保留段，设为0即可&lt;/span&gt;
&lt;span&gt;32&lt;/span&gt; &lt;span&gt;}AVI_AVIH_CHUNK;
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; 
&lt;span&gt;34&lt;/span&gt; typedef &lt;span&gt;struct&lt;/span&gt;&lt;span&gt; avi_rect_frame
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt;     &lt;span&gt;short&lt;/span&gt;&lt;span&gt; left;
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt;     &lt;span&gt;short&lt;/span&gt;&lt;span&gt; top;
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt;     &lt;span&gt;short&lt;/span&gt;&lt;span&gt; right;
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt;     &lt;span&gt;short&lt;/span&gt;&lt;span&gt; bottom;    
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt; &lt;span&gt;}AVI_RECT_FRAME;
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt; 
&lt;span&gt;42&lt;/span&gt; typedef &lt;span&gt;struct&lt;/span&gt;&lt;span&gt; avi_strh_chunk
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt; &lt;span&gt;{    
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt;     unsigned &lt;span&gt;char&lt;/span&gt; id[&lt;span&gt;4&lt;/span&gt;];            &lt;span&gt;//&lt;/span&gt;&lt;span&gt;块ID，固定为strh&lt;/span&gt;
&lt;span&gt;45&lt;/span&gt;     unsigned &lt;span&gt;int&lt;/span&gt; size;              &lt;span&gt;//&lt;/span&gt;&lt;span&gt;块大小，等于struct avi_strh_chunk去掉id和size的大小&lt;/span&gt;
&lt;span&gt;46&lt;/span&gt;     unsigned &lt;span&gt;char&lt;/span&gt; stream_type[&lt;span&gt;4&lt;/span&gt;];   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;流的类型，vids表示视频流，auds表示音频流&lt;/span&gt;
&lt;span&gt;47&lt;/span&gt;     unsigned &lt;span&gt;char&lt;/span&gt; codec[&lt;span&gt;4&lt;/span&gt;];         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;指定处理这个流需要的解码器，如JPEG&lt;/span&gt;
&lt;span&gt;48&lt;/span&gt;     unsigned &lt;span&gt;int&lt;/span&gt; flags;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;标记，如是否允许这个流输出、调色板是否变化等，一般设为0即可&lt;/span&gt;
&lt;span&gt;49&lt;/span&gt;     unsigned &lt;span&gt;short&lt;/span&gt; priority;        &lt;span&gt;//&lt;/span&gt;&lt;span&gt;流的优先级，视频流设为0即可&lt;/span&gt;
&lt;span&gt;50&lt;/span&gt;     unsigned &lt;span&gt;short&lt;/span&gt; language;        &lt;span&gt;//&lt;/span&gt;&lt;span&gt;音频语言代号，视频流设为0即可&lt;/span&gt;
&lt;span&gt;51&lt;/span&gt;     unsigned &lt;span&gt;int&lt;/span&gt; init_frames;       &lt;span&gt;//&lt;/span&gt;&lt;span&gt;为交互格式指定初始帧数(非交互格式应该指定为0)&lt;/span&gt;
&lt;span&gt;52&lt;/span&gt;     unsigned &lt;span&gt;int&lt;/span&gt; scale;             &lt;span&gt;//
&lt;/span&gt;&lt;span&gt;53&lt;/span&gt;     unsigned &lt;span&gt;int&lt;/span&gt; rate;              &lt;span&gt;//&lt;/span&gt;&lt;span&gt;对于视频流，rate / scale = 帧率fps&lt;/span&gt;
&lt;span&gt;54&lt;/span&gt;     unsigned &lt;span&gt;int&lt;/span&gt; start;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;对于视频流，设为0即可&lt;/span&gt;
&lt;span&gt;55&lt;/span&gt;     unsigned &lt;span&gt;int&lt;/span&gt; length;            &lt;span&gt;//&lt;/span&gt;&lt;span&gt;对于视频流，length即总帧数&lt;/span&gt;
&lt;span&gt;56&lt;/span&gt;     unsigned &lt;span&gt;int&lt;/span&gt; suggest_buff_size; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;读取这个流数据建议使用的缓冲区大小&lt;/span&gt;
&lt;span&gt;57&lt;/span&gt;     unsigned &lt;span&gt;int&lt;/span&gt; quality;           &lt;span&gt;//&lt;/span&gt;&lt;span&gt;流数据的质量指标&lt;/span&gt;
&lt;span&gt;58&lt;/span&gt;     unsigned &lt;span&gt;int&lt;/span&gt; sample_size;       &lt;span&gt;//&lt;/span&gt;&lt;span&gt;音频采样大小，视频流设为0即可&lt;/span&gt;
&lt;span&gt;59&lt;/span&gt;     AVI_RECT_FRAME rcFrame;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;这个流在视频主窗口中的显示位置，设为{0,0，width,height}即可&lt;/span&gt;
&lt;span&gt;60&lt;/span&gt; &lt;span&gt;}AVI_STRH_CHUNK;
&lt;/span&gt;&lt;span&gt;61&lt;/span&gt; 
&lt;span&gt;62&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;对于视频流，strf块结构如下&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;63&lt;/span&gt; typedef &lt;span&gt;struct&lt;/span&gt;&lt;span&gt; avi_strf_chunk
&lt;/span&gt;&lt;span&gt;64&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;65&lt;/span&gt;     unsigned &lt;span&gt;char&lt;/span&gt; id[&lt;span&gt;4&lt;/span&gt;];             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;块ID，固定为strf&lt;/span&gt;
&lt;span&gt;66&lt;/span&gt;     unsigned &lt;span&gt;int&lt;/span&gt; size;               &lt;span&gt;//&lt;/span&gt;&lt;span&gt;块大小，等于struct avi_strf_chunk去掉id和size的大小&lt;/span&gt;
&lt;span&gt;67&lt;/span&gt;     unsigned &lt;span&gt;int&lt;/span&gt; size1;              &lt;span&gt;//&lt;/span&gt;&lt;span&gt;size1含义和值同size一样&lt;/span&gt;
&lt;span&gt;68&lt;/span&gt;     unsigned &lt;span&gt;int&lt;/span&gt; width;              &lt;span&gt;//&lt;/span&gt;&lt;span&gt;视频主窗口宽度（单位：像素）&lt;/span&gt;
&lt;span&gt;69&lt;/span&gt;     unsigned &lt;span&gt;int&lt;/span&gt; height;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;视频主窗口高度（单位：像素）&lt;/span&gt;
&lt;span&gt;70&lt;/span&gt;     unsigned &lt;span&gt;short&lt;/span&gt; planes;           &lt;span&gt;//&lt;/span&gt;&lt;span&gt;始终为1  &lt;/span&gt;
&lt;span&gt;71&lt;/span&gt;     unsigned &lt;span&gt;short&lt;/span&gt; bitcount;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;每个像素占的位数，只能是1、4、8、16、24和32中的一个&lt;/span&gt;
&lt;span&gt;72&lt;/span&gt;     unsigned &lt;span&gt;char&lt;/span&gt; compression[&lt;span&gt;4&lt;/span&gt;];    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;视频流编码格式，如JPEG、MJPG等&lt;/span&gt;
&lt;span&gt;73&lt;/span&gt;     unsigned &lt;span&gt;int&lt;/span&gt; image_size;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;视频图像大小，等于width * height * bitcount / 8&lt;/span&gt;
&lt;span&gt;74&lt;/span&gt;     unsigned &lt;span&gt;int&lt;/span&gt; x_pixels_per_meter; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;显示设备的水平分辨率，设为0即可&lt;/span&gt;
&lt;span&gt;75&lt;/span&gt;     unsigned &lt;span&gt;int&lt;/span&gt; y_pixels_per_meter; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;显示设备的垂直分辨率，设为0即可&lt;/span&gt;
&lt;span&gt;76&lt;/span&gt;     unsigned &lt;span&gt;int&lt;/span&gt; num_colors;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;含义不清楚，设为0即可   &lt;/span&gt;
&lt;span&gt;77&lt;/span&gt;     unsigned &lt;span&gt;int&lt;/span&gt; imp_colors;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;含义不清楚，设为0即可&lt;/span&gt;
&lt;span&gt;78&lt;/span&gt; &lt;span&gt;}AVI_STRF_CHUNK;
&lt;/span&gt;&lt;span&gt;79&lt;/span&gt; 
&lt;span&gt;80&lt;/span&gt; typedef &lt;span&gt;struct&lt;/span&gt;&lt;span&gt; avi_strl_list
&lt;/span&gt;&lt;span&gt;81&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;82&lt;/span&gt;     unsigned &lt;span&gt;char&lt;/span&gt; id[&lt;span&gt;4&lt;/span&gt;];    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;块ID，固定为LIST    &lt;/span&gt;
&lt;span&gt;83&lt;/span&gt;     unsigned &lt;span&gt;int&lt;/span&gt; size;      &lt;span&gt;//&lt;/span&gt;&lt;span&gt;块大小，等于struct avi_strl_list去掉id和size的大小        &lt;/span&gt;
&lt;span&gt;84&lt;/span&gt;     unsigned &lt;span&gt;char&lt;/span&gt; type[&lt;span&gt;4&lt;/span&gt;];  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;块类型，固定为strl&lt;/span&gt;
&lt;span&gt;85&lt;/span&gt; &lt;span&gt;    AVI_STRH_CHUNK strh;      
&lt;/span&gt;&lt;span&gt;86&lt;/span&gt; &lt;span&gt;    AVI_STRF_CHUNK strf;      
&lt;/span&gt;&lt;span&gt;87&lt;/span&gt; &lt;span&gt;}AVI_STRL_LIST;
&lt;/span&gt;&lt;span&gt;88&lt;/span&gt; 
&lt;span&gt;89&lt;/span&gt; typedef &lt;span&gt;struct&lt;/span&gt;&lt;span&gt; avi_hdrl_list
&lt;/span&gt;&lt;span&gt;90&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;91&lt;/span&gt;     unsigned &lt;span&gt;char&lt;/span&gt; id[&lt;span&gt;4&lt;/span&gt;];    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;块ID，固定为LIST    &lt;/span&gt;
&lt;span&gt;92&lt;/span&gt;     unsigned &lt;span&gt;int&lt;/span&gt; size;      &lt;span&gt;//&lt;/span&gt;&lt;span&gt;块大小，等于struct avi_hdrl_list去掉id和size的大小        &lt;/span&gt;
&lt;span&gt;93&lt;/span&gt;     unsigned &lt;span&gt;char&lt;/span&gt; type[&lt;span&gt;4&lt;/span&gt;];  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;块类型，固定为hdrl&lt;/span&gt;
&lt;span&gt;94&lt;/span&gt; &lt;span&gt;    AVI_AVIH_CHUNK avih;
&lt;/span&gt;&lt;span&gt;95&lt;/span&gt; &lt;span&gt;    AVI_STRL_LIST  strl;
&lt;/span&gt;&lt;span&gt;96&lt;/span&gt; &lt;span&gt;}AVI_HDRL_LIST;
&lt;/span&gt;&lt;span&gt;97&lt;/span&gt; 
&lt;span&gt;98&lt;/span&gt; &lt;span&gt;#endif&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Jpeg2AVI.c&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;114.5&quot;&gt;&lt;img id=&quot;code_img_closed_151da15e-f96f-4aac-be0c-8ef5c1ef0f88&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_151da15e-f96f-4aac-be0c-8ef5c1ef0f88&quot; class=&quot;code_img_opened&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_151da15e-f96f-4aac-be0c-8ef5c1ef0f88&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;224&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt; #include &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Jpeg2AVI.h&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;  2&lt;/span&gt; #include &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;list.h&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;  3&lt;/span&gt; #include &amp;lt;stdlib.h&amp;gt;
&lt;span&gt;  4&lt;/span&gt; #include &amp;lt;&lt;span&gt;string&lt;/span&gt;.h&amp;gt;
&lt;span&gt;  5&lt;/span&gt; 
&lt;span&gt;  6&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; nframes;           &lt;span&gt;//&lt;/span&gt;&lt;span&gt;总帧数&lt;/span&gt;
&lt;span&gt;  7&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; totalsize;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;帧的总大小&lt;/span&gt;
&lt;span&gt;  8&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;struct&lt;/span&gt; list_head list; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;保存各帧图像大小的链表，用于写索引块&lt;/span&gt;
&lt;span&gt;  9&lt;/span&gt; 
&lt;span&gt; 10&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;链表宿主结构，用于保存真正的图像大小数据&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 11&lt;/span&gt; &lt;span&gt;struct&lt;/span&gt;&lt;span&gt; ListNode
&lt;/span&gt;&lt;span&gt; 12&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 13&lt;/span&gt;     &lt;span&gt;int&lt;/span&gt;&lt;span&gt; value;
&lt;/span&gt;&lt;span&gt; 14&lt;/span&gt;     &lt;span&gt;struct&lt;/span&gt;&lt;span&gt; list_head head;
&lt;/span&gt;&lt;span&gt; 15&lt;/span&gt; &lt;span&gt;};
&lt;/span&gt;&lt;span&gt; 16&lt;/span&gt; 
&lt;span&gt; 17&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; write_index_chunk(FILE *&lt;span&gt;fp)
&lt;/span&gt;&lt;span&gt; 18&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 19&lt;/span&gt;     unsigned &lt;span&gt;char&lt;/span&gt; index[&lt;span&gt;4&lt;/span&gt;] = {&lt;span&gt;'&lt;/span&gt;&lt;span&gt;i&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;d&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;x&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;};  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;索引块ID&lt;/span&gt;
&lt;span&gt; 20&lt;/span&gt;     unsigned &lt;span&gt;int&lt;/span&gt; index_chunk_size = &lt;span&gt;16&lt;/span&gt; * nframes;   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;索引块大小&lt;/span&gt;
&lt;span&gt; 21&lt;/span&gt;     unsigned &lt;span&gt;int&lt;/span&gt; offset = &lt;span&gt;4&lt;/span&gt;&lt;span&gt;;                        
&lt;/span&gt;&lt;span&gt; 22&lt;/span&gt;     &lt;span&gt;struct&lt;/span&gt; list_head *slider =&lt;span&gt; NULL;
&lt;/span&gt;&lt;span&gt; 23&lt;/span&gt;     &lt;span&gt;struct&lt;/span&gt; list_head *tmpslider =&lt;span&gt; NULL;
&lt;/span&gt;&lt;span&gt; 24&lt;/span&gt; 
&lt;span&gt; 25&lt;/span&gt;     fwrite(index, &lt;span&gt;4&lt;/span&gt;, &lt;span&gt;1&lt;/span&gt;&lt;span&gt;, fp);
&lt;/span&gt;&lt;span&gt; 26&lt;/span&gt;     fwrite(&amp;amp;index_chunk_size, &lt;span&gt;4&lt;/span&gt;, &lt;span&gt;1&lt;/span&gt;&lt;span&gt;, fp);
&lt;/span&gt;&lt;span&gt; 27&lt;/span&gt; 
&lt;span&gt; 28&lt;/span&gt;     list_for_each_safe(slider, tmpslider, &amp;amp;&lt;span&gt;list)
&lt;/span&gt;&lt;span&gt; 29&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 30&lt;/span&gt;         unsigned &lt;span&gt;char&lt;/span&gt; tmp[&lt;span&gt;4&lt;/span&gt;] = {&lt;span&gt;'&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;d&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;c&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;};  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;00dc = 压缩的视频数据&lt;/span&gt;
&lt;span&gt; 31&lt;/span&gt;         unsigned &lt;span&gt;int&lt;/span&gt; keyframe = &lt;span&gt;0x10&lt;/span&gt;;                 &lt;span&gt;//&lt;/span&gt;&lt;span&gt;0x10表示当前帧为关键帧&lt;/span&gt;
&lt;span&gt; 32&lt;/span&gt;         &lt;span&gt;struct&lt;/span&gt; ListNode *node = list_entry(slider, &lt;span&gt;struct&lt;/span&gt;&lt;span&gt; ListNode, head);
&lt;/span&gt;&lt;span&gt; 33&lt;/span&gt; 
&lt;span&gt; 34&lt;/span&gt;         fwrite(tmp, &lt;span&gt;4&lt;/span&gt;, &lt;span&gt;1&lt;/span&gt;&lt;span&gt;, fp);
&lt;/span&gt;&lt;span&gt; 35&lt;/span&gt;         fwrite(&amp;amp;keyframe, &lt;span&gt;4&lt;/span&gt;, &lt;span&gt;1&lt;/span&gt;&lt;span&gt;, fp);    
&lt;/span&gt;&lt;span&gt; 36&lt;/span&gt;         fwrite(&amp;amp;offset, &lt;span&gt;4&lt;/span&gt;, &lt;span&gt;1&lt;/span&gt;&lt;span&gt;, fp);        
&lt;/span&gt;&lt;span&gt; 37&lt;/span&gt;         fwrite(&amp;amp;node-&amp;gt;value, &lt;span&gt;4&lt;/span&gt;, &lt;span&gt;1&lt;/span&gt;&lt;span&gt;, fp);
&lt;/span&gt;&lt;span&gt; 38&lt;/span&gt;         offset = offset + node-&amp;gt;value + &lt;span&gt;8&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 39&lt;/span&gt; 
&lt;span&gt; 40&lt;/span&gt; &lt;span&gt;        list_del(slider);
&lt;/span&gt;&lt;span&gt; 41&lt;/span&gt;         &lt;span&gt;free&lt;/span&gt;&lt;span&gt;(node);
&lt;/span&gt;&lt;span&gt; 42&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 43&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt; 44&lt;/span&gt; 
&lt;span&gt; 45&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; back_fill_data(FILE *fp, &lt;span&gt;int&lt;/span&gt; width, &lt;span&gt;int&lt;/span&gt; height, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; fps)
&lt;/span&gt;&lt;span&gt; 46&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 47&lt;/span&gt;     AVI_RIFF_HEAD riff_head = 
&lt;span&gt; 48&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 49&lt;/span&gt;         {&lt;span&gt;'&lt;/span&gt;&lt;span&gt;R&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;I&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;F&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;F&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;},     
&lt;/span&gt;&lt;span&gt; 50&lt;/span&gt;         &lt;span&gt;4&lt;/span&gt; + &lt;span&gt;sizeof&lt;/span&gt;(AVI_HDRL_LIST) + &lt;span&gt;sizeof&lt;/span&gt;(AVI_LIST_HEAD) + nframes * &lt;span&gt;8&lt;/span&gt; +&lt;span&gt; totalsize,  
&lt;/span&gt;&lt;span&gt; 51&lt;/span&gt;         {&lt;span&gt;'&lt;/span&gt;&lt;span&gt;A&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;V&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;I&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;}
&lt;/span&gt;&lt;span&gt; 52&lt;/span&gt; &lt;span&gt;    };
&lt;/span&gt;&lt;span&gt; 53&lt;/span&gt; 
&lt;span&gt; 54&lt;/span&gt;     AVI_HDRL_LIST hdrl_list = 
&lt;span&gt; 55&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 56&lt;/span&gt;         {&lt;span&gt;'&lt;/span&gt;&lt;span&gt;L&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;I&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;S&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;T&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;},
&lt;/span&gt;&lt;span&gt; 57&lt;/span&gt;         &lt;span&gt;sizeof&lt;/span&gt;(AVI_HDRL_LIST) - &lt;span&gt;8&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 58&lt;/span&gt;         {&lt;span&gt;'&lt;/span&gt;&lt;span&gt;h&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;d&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;r&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;l&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;},
&lt;/span&gt;&lt;span&gt; 59&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 60&lt;/span&gt;             {&lt;span&gt;'&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;v&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;i&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;h&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;},
&lt;/span&gt;&lt;span&gt; 61&lt;/span&gt;             &lt;span&gt;sizeof&lt;/span&gt;(AVI_AVIH_CHUNK) - &lt;span&gt;8&lt;/span&gt;&lt;span&gt;,       
&lt;/span&gt;&lt;span&gt; 62&lt;/span&gt;             &lt;span&gt;1000000&lt;/span&gt; / fps, &lt;span&gt;25000&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, nframes, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;1&lt;/span&gt;, &lt;span&gt;100000&lt;/span&gt;&lt;span&gt;, width, height, 
&lt;/span&gt;&lt;span&gt; 63&lt;/span&gt;             {&lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;&lt;span&gt;}
&lt;/span&gt;&lt;span&gt; 64&lt;/span&gt; &lt;span&gt;        },
&lt;/span&gt;&lt;span&gt; 65&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 66&lt;/span&gt;             {&lt;span&gt;'&lt;/span&gt;&lt;span&gt;L&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;I&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;S&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;T&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;},
&lt;/span&gt;&lt;span&gt; 67&lt;/span&gt;             &lt;span&gt;sizeof&lt;/span&gt;(AVI_STRL_LIST) - &lt;span&gt;8&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 68&lt;/span&gt;             {&lt;span&gt;'&lt;/span&gt;&lt;span&gt;s&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;t&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;r&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;l&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;},
&lt;/span&gt;&lt;span&gt; 69&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt; 70&lt;/span&gt;                 {&lt;span&gt;'&lt;/span&gt;&lt;span&gt;s&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;t&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;r&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;h&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;},
&lt;/span&gt;&lt;span&gt; 71&lt;/span&gt;                 &lt;span&gt;sizeof&lt;/span&gt;(AVI_STRH_CHUNK) - &lt;span&gt;8&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 72&lt;/span&gt;                 {&lt;span&gt;'&lt;/span&gt;&lt;span&gt;v&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;i&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;d&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;s&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;},
&lt;/span&gt;&lt;span&gt; 73&lt;/span&gt;                 {&lt;span&gt;'&lt;/span&gt;&lt;span&gt;J&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;P&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;E&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;G&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;},
&lt;/span&gt;&lt;span&gt; 74&lt;/span&gt;                 &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;1&lt;/span&gt;, &lt;span&gt;23&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, nframes, &lt;span&gt;100000&lt;/span&gt;, &lt;span&gt;0xFFFFFF&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 75&lt;/span&gt;                 {&lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;&lt;span&gt;, width, height}
&lt;/span&gt;&lt;span&gt; 76&lt;/span&gt; &lt;span&gt;            },
&lt;/span&gt;&lt;span&gt; 77&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt; 78&lt;/span&gt;                 {&lt;span&gt;'&lt;/span&gt;&lt;span&gt;s&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;t&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;r&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;f&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;},
&lt;/span&gt;&lt;span&gt; 79&lt;/span&gt;                 &lt;span&gt;sizeof&lt;/span&gt;(AVI_STRF_CHUNK) - &lt;span&gt;8&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 80&lt;/span&gt;                 &lt;span&gt;sizeof&lt;/span&gt;(AVI_STRF_CHUNK) - &lt;span&gt;8&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 81&lt;/span&gt;                 width, height, &lt;span&gt;1&lt;/span&gt;, &lt;span&gt;24&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 82&lt;/span&gt;                 {&lt;span&gt;'&lt;/span&gt;&lt;span&gt;J&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;P&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;E&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;G&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;},
&lt;/span&gt;&lt;span&gt; 83&lt;/span&gt;                 width * height * &lt;span&gt;3&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;
&lt;span&gt; 84&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt; 85&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 86&lt;/span&gt; &lt;span&gt;    };
&lt;/span&gt;&lt;span&gt; 87&lt;/span&gt; 
&lt;span&gt; 88&lt;/span&gt;     AVI_LIST_HEAD movi_list_head = 
&lt;span&gt; 89&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 90&lt;/span&gt;         {&lt;span&gt;'&lt;/span&gt;&lt;span&gt;L&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;I&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;S&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;T&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;},     
&lt;/span&gt;&lt;span&gt; 91&lt;/span&gt;         &lt;span&gt;4&lt;/span&gt; + nframes * &lt;span&gt;8&lt;/span&gt; +&lt;span&gt; totalsize,           
&lt;/span&gt;&lt;span&gt; 92&lt;/span&gt;         {&lt;span&gt;'&lt;/span&gt;&lt;span&gt;m&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;o&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;v&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;i&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;}    
&lt;/span&gt;&lt;span&gt; 93&lt;/span&gt; &lt;span&gt;    };
&lt;/span&gt;&lt;span&gt; 94&lt;/span&gt; 
&lt;span&gt; 95&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;定位到文件头，回填各块数据&lt;/span&gt;
&lt;span&gt; 96&lt;/span&gt;     fseek(fp, &lt;span&gt;0&lt;/span&gt;&lt;span&gt;, SEEK_SET);
&lt;/span&gt;&lt;span&gt; 97&lt;/span&gt;     fwrite(&amp;amp;riff_head, &lt;span&gt;sizeof&lt;/span&gt;(riff_head), &lt;span&gt;1&lt;/span&gt;&lt;span&gt;, fp);
&lt;/span&gt;&lt;span&gt; 98&lt;/span&gt;     fwrite(&amp;amp;hdrl_list, &lt;span&gt;sizeof&lt;/span&gt;(hdrl_list), &lt;span&gt;1&lt;/span&gt;&lt;span&gt;, fp);
&lt;/span&gt;&lt;span&gt; 99&lt;/span&gt;     fwrite(&amp;amp;movi_list_head, &lt;span&gt;sizeof&lt;/span&gt;(movi_list_head), &lt;span&gt;1&lt;/span&gt;&lt;span&gt;, fp);
&lt;/span&gt;&lt;span&gt;100&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;101&lt;/span&gt; 
&lt;span&gt;102&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; jpeg2avi_start(FILE *&lt;span&gt;fp)
&lt;/span&gt;&lt;span&gt;103&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;104&lt;/span&gt;     &lt;span&gt;int&lt;/span&gt; offset1 = &lt;span&gt;sizeof&lt;/span&gt;(AVI_RIFF_HEAD);  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;riff head大小&lt;/span&gt;
&lt;span&gt;105&lt;/span&gt;     &lt;span&gt;int&lt;/span&gt; offset2 = &lt;span&gt;sizeof&lt;/span&gt;(AVI_HDRL_LIST);  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;hdrl list大小 &lt;/span&gt;
&lt;span&gt;106&lt;/span&gt;     &lt;span&gt;int&lt;/span&gt; offset3 = &lt;span&gt;sizeof&lt;/span&gt;(AVI_LIST_HEAD);  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;movi list head大小
&lt;/span&gt;&lt;span&gt;107&lt;/span&gt; 
&lt;span&gt;108&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;AVI文件偏移量设置到movi list head后，从该位置向后依次写入JPEG数据&lt;/span&gt;
&lt;span&gt;109&lt;/span&gt;     fseek(fp, offset1 + offset2 +&lt;span&gt; offset3, SEEK_SET); 
&lt;/span&gt;&lt;span&gt;110&lt;/span&gt; 
&lt;span&gt;111&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;初始化链表&lt;/span&gt;
&lt;span&gt;112&lt;/span&gt;     list_head_init(&amp;amp;&lt;span&gt;list);
&lt;/span&gt;&lt;span&gt;113&lt;/span&gt; 
&lt;span&gt;114&lt;/span&gt;     nframes = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;115&lt;/span&gt;     totalsize = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;116&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;117&lt;/span&gt; 
&lt;span&gt;118&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; jpeg2avi_add_frame(FILE *fp, &lt;span&gt;void&lt;/span&gt; *data, unsigned &lt;span&gt;int&lt;/span&gt;&lt;span&gt; len)
&lt;/span&gt;&lt;span&gt;119&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;120&lt;/span&gt;     unsigned &lt;span&gt;char&lt;/span&gt; tmp[&lt;span&gt;4&lt;/span&gt;] = {&lt;span&gt;'&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;d&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;c&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;};  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;00dc = 压缩的视频数据&lt;/span&gt;
&lt;span&gt;121&lt;/span&gt;     &lt;span&gt;struct&lt;/span&gt; ListNode *node = (&lt;span&gt;struct&lt;/span&gt; ListNode *)&lt;span&gt;malloc&lt;/span&gt;(&lt;span&gt;sizeof&lt;/span&gt;(&lt;span&gt;struct&lt;/span&gt;&lt;span&gt; ListNode));
&lt;/span&gt;&lt;span&gt;122&lt;/span&gt; 
&lt;span&gt;123&lt;/span&gt;     &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;JPEG图像大小4字节对齐&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;124&lt;/span&gt;     &lt;span&gt;while&lt;/span&gt; (len % &lt;span&gt;4&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;125&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;126&lt;/span&gt;         len++&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;127&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;128&lt;/span&gt; 
&lt;span&gt;129&lt;/span&gt;     fwrite(tmp, &lt;span&gt;4&lt;/span&gt;, &lt;span&gt;1&lt;/span&gt;, fp);    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;写入是否是压缩的视频数据信息    &lt;/span&gt;
&lt;span&gt;130&lt;/span&gt;     fwrite(&amp;amp;len, &lt;span&gt;4&lt;/span&gt;, &lt;span&gt;1&lt;/span&gt;, fp);   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;写入4字节对齐后的JPEG图像大小&lt;/span&gt;
&lt;span&gt;131&lt;/span&gt;     fwrite(data, len, &lt;span&gt;1&lt;/span&gt;, fp); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;写入真正的JPEG数据&lt;/span&gt;
&lt;span&gt;132&lt;/span&gt; 
&lt;span&gt;133&lt;/span&gt;     nframes += &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;134&lt;/span&gt;     totalsize +=&lt;span&gt; len;
&lt;/span&gt;&lt;span&gt;135&lt;/span&gt; 
&lt;span&gt;136&lt;/span&gt;     &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;将4字节对齐后的JPEG图像大小保存在链表中&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;137&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (node !=&lt;span&gt; NULL)
&lt;/span&gt;&lt;span&gt;138&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;139&lt;/span&gt;         node-&amp;gt;value =&lt;span&gt; len;
&lt;/span&gt;&lt;span&gt;140&lt;/span&gt;         list_add_tail(&amp;amp;node-&amp;gt;head, &amp;amp;&lt;span&gt;list);
&lt;/span&gt;&lt;span&gt;141&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;142&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;143&lt;/span&gt; 
&lt;span&gt;144&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; jpeg2avi_end(FILE *fp, &lt;span&gt;int&lt;/span&gt; width, &lt;span&gt;int&lt;/span&gt; height, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; fps)
&lt;/span&gt;&lt;span&gt;145&lt;/span&gt; &lt;span&gt;{ 
&lt;/span&gt;&lt;span&gt;146&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;写索引块&lt;/span&gt;
&lt;span&gt;147&lt;/span&gt; &lt;span&gt;    write_index_chunk(fp);
&lt;/span&gt;&lt;span&gt;148&lt;/span&gt; 
&lt;span&gt;149&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;从文件头开始，回填各块数据&lt;/span&gt;
&lt;span&gt;150&lt;/span&gt; &lt;span&gt;    back_fill_data(fp, width, height, fps);
&lt;/span&gt;&lt;span&gt;151&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;list.h&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;&lt;img id=&quot;code_img_closed_3863cbef-c8fc-4b7b-8ac1-0c9ea1fcb8c9&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_3863cbef-c8fc-4b7b-8ac1-0c9ea1fcb8c9&quot; class=&quot;code_img_opened&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_3863cbef-c8fc-4b7b-8ac1-0c9ea1fcb8c9&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;73&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;#ifndef _LIST_H_
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;#define&lt;/span&gt; _LIST_H_
&lt;span&gt; 3&lt;/span&gt; 
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;struct&lt;/span&gt;&lt;span&gt; list_head
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;     &lt;span&gt;struct&lt;/span&gt; list_head *&lt;span&gt;next;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;     &lt;span&gt;struct&lt;/span&gt; list_head *&lt;span&gt;prev;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;};
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; 
&lt;span&gt;10&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; list_head_init(&lt;span&gt;struct&lt;/span&gt; list_head *&lt;span&gt;list);
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; list_add_tail(&lt;span&gt;struct&lt;/span&gt; list_head *_new, &lt;span&gt;struct&lt;/span&gt; list_head *&lt;span&gt;head);
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; list_del(&lt;span&gt;struct&lt;/span&gt; list_head *&lt;span&gt;entry);
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; 
&lt;span&gt;14&lt;/span&gt; &lt;span&gt;#ifndef offsetof
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;#define&lt;/span&gt; offsetof(TYPE, MEMBER) \
&lt;span&gt;16&lt;/span&gt;     ((size_t) &amp;amp;((TYPE *)&lt;span&gt;0&lt;/span&gt;)-&amp;gt;&lt;span&gt;MEMBER)
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;#endif&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt; 
&lt;span&gt;19&lt;/span&gt; &lt;span&gt;#ifndef container_of
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;#define&lt;/span&gt; container_of(ptr, type, member) \
&lt;span&gt;21&lt;/span&gt;     ((type *)((&lt;span&gt;char&lt;/span&gt; *)ptr -&lt;span&gt; offsetof(type,member)))
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;#endif&lt;/span&gt;
&lt;span&gt;23&lt;/span&gt; 
&lt;span&gt;24&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; &lt;span&gt; * list_entry - get the struct for this entry
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; &lt;span&gt; * @ptr:    the &amp;amp;struct list_head pointer.
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; &lt;span&gt; * @type:    the type of the struct this is embedded in.
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; &lt;span&gt; * @member:    the name of the list_struct within the struct.
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;  &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;30&lt;/span&gt; &lt;span&gt;#define&lt;/span&gt; list_entry(ptr, type, member) \
&lt;span&gt;31&lt;/span&gt; &lt;span&gt;    container_of(ptr, type, member)
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; 
&lt;span&gt;33&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; &lt;span&gt; * list_for_each_safe - iterate over a list safe against removal of list entry
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt; &lt;span&gt; * @pos:    the &amp;amp;struct list_head to use as a loop cursor.
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt; &lt;span&gt; * @n:        another &amp;amp;struct list_head to use as temporary storage
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt; &lt;span&gt; * @head:    the head for your list.
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt;  &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;39&lt;/span&gt; &lt;span&gt;#define&lt;/span&gt; list_for_each_safe(pos, n, head) \
&lt;span&gt;40&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt; (pos = (head)-&amp;gt;next, n = pos-&amp;gt;next; pos !=&lt;span&gt; (head); \
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt;         pos = n, n = pos-&amp;gt;&lt;span&gt;next)
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt; 
&lt;span&gt;43&lt;/span&gt; &lt;span&gt;#endif&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;_LIST_H_&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;list.c&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;&lt;img id=&quot;code_img_closed_5ee09a52-a071-4f87-b44e-da2693ad9de2&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_5ee09a52-a071-4f87-b44e-da2693ad9de2&quot; class=&quot;code_img_opened&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_5ee09a52-a071-4f87-b44e-da2693ad9de2&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;67&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; #include &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;list.h&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; #include &amp;lt;stdio.h&amp;gt;
&lt;span&gt; 3&lt;/span&gt; 
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; __list_add(&lt;span&gt;struct&lt;/span&gt; list_head *_new, &lt;span&gt;struct&lt;/span&gt; list_head *prev, &lt;span&gt;struct&lt;/span&gt; list_head *&lt;span&gt;next)
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;     next-&amp;gt;prev =&lt;span&gt; _new;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;     _new-&amp;gt;next =&lt;span&gt; next;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;     _new-&amp;gt;prev =&lt;span&gt; prev;
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;     prev-&amp;gt;next =&lt;span&gt; _new;
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; 
&lt;span&gt;12&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; __list_del(&lt;span&gt;struct&lt;/span&gt; list_head *prev, &lt;span&gt;struct&lt;/span&gt; list_head *&lt;span&gt;next)
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;     next-&amp;gt;prev =&lt;span&gt; prev;
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;     prev-&amp;gt;next =&lt;span&gt; next;
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; 
&lt;span&gt;18&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; list_head_init(&lt;span&gt;struct&lt;/span&gt; list_head *&lt;span&gt;list)
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;     list-&amp;gt;next =&lt;span&gt; list;
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;     list-&amp;gt;prev =&lt;span&gt; list;
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; 
&lt;span&gt;24&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; &lt;span&gt; * list_add_tail - insert a new entry before the specified head
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; &lt;span&gt; * @_new: new entry to be added
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; &lt;span&gt; * @head: list head to add it before
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;  &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;29&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; list_add_tail(&lt;span&gt;struct&lt;/span&gt; list_head *_new, &lt;span&gt;struct&lt;/span&gt; list_head *&lt;span&gt;head)
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;     __list_add(_new, head-&amp;gt;&lt;span&gt;prev, head);
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; 
&lt;span&gt;34&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt; &lt;span&gt; * list_del - deletes entry from list.
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt; &lt;span&gt; * @entry: the element to delete from the list.
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt;  &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;38&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; list_del(&lt;span&gt;struct&lt;/span&gt; list_head *&lt;span&gt;entry)
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt;     __list_del(entry-&amp;gt;prev, entry-&amp;gt;&lt;span&gt;next);
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt;     entry-&amp;gt;next =&lt;span&gt; NULL;
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt;     entry-&amp;gt;prev =&lt;span&gt; NULL;
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;main.c&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42.5&quot;&gt;&lt;img id=&quot;code_img_closed_59c943df-681b-4b97-818e-a52676828070&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_59c943df-681b-4b97-818e-a52676828070&quot; class=&quot;code_img_opened&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_59c943df-681b-4b97-818e-a52676828070&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;80&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; #include &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Jpeg2AVI.h&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; #include &amp;lt;&lt;span&gt;string&lt;/span&gt;.h&amp;gt;
&lt;span&gt; 3&lt;/span&gt; 
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;#define&lt;/span&gt; JPEG_MAX_SIZE 100000   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;JPEG图像最大字节数&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;#define&lt;/span&gt; JPEG_NUM 13800         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;JPEG图像数量&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; main()
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;     FILE *&lt;span&gt;fp_jpg;
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;     FILE *&lt;span&gt;fp_avi;  
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;     &lt;span&gt;int&lt;/span&gt;&lt;span&gt; filesize;
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;     unsigned &lt;span&gt;char&lt;/span&gt;&lt;span&gt; jpg_data[JPEG_MAX_SIZE];  
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;     &lt;span&gt;char&lt;/span&gt; filename[&lt;span&gt;10&lt;/span&gt;&lt;span&gt;];   
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;     &lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; 
&lt;span&gt;16&lt;/span&gt;     fp_avi = fopen(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;sample.avi&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;wb&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; 
&lt;span&gt;18&lt;/span&gt; &lt;span&gt;    jpeg2avi_start(fp_avi);
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; 
&lt;span&gt;20&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt; (i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; JPEG_NUM; i++&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;         memset(filename, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;10&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;         memset(jpg_data, &lt;span&gt;0&lt;/span&gt;&lt;span&gt;, JPEG_MAX_SIZE);
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; 
&lt;span&gt;25&lt;/span&gt;         sprintf(filename, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%d.jpg&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, i + &lt;span&gt;1&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;         fp_jpg = fopen(filename, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;rb&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;         
&lt;span&gt;28&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (fp_jpg !=&lt;span&gt; NULL)
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;             &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;获取JPEG数据大小&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;31&lt;/span&gt;             fseek(fp_jpg, &lt;span&gt;0&lt;/span&gt;&lt;span&gt;, SEEK_END);
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;             filesize =&lt;span&gt; ftell(fp_jpg);
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt;             fseek(fp_jpg, &lt;span&gt;0&lt;/span&gt;&lt;span&gt;, SEEK_SET);
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; 
&lt;span&gt;35&lt;/span&gt;             &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;将JPEG数据读到缓冲区&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;36&lt;/span&gt;             fread(jpg_data, filesize, &lt;span&gt;1&lt;/span&gt;&lt;span&gt;, fp_jpg);
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt; 
&lt;span&gt;38&lt;/span&gt;             &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;将JPEG数据写入AVI文件&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;39&lt;/span&gt; &lt;span&gt;            jpeg2avi_add_frame(fp_avi, jpg_data, filesize);
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt; 
&lt;span&gt;42&lt;/span&gt; &lt;span&gt;        fclose(fp_jpg);
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt; 
&lt;span&gt;45&lt;/span&gt;     jpeg2avi_end(fp_avi, &lt;span&gt;1920&lt;/span&gt;, &lt;span&gt;1080&lt;/span&gt;, &lt;span&gt;23&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt; 
&lt;span&gt;47&lt;/span&gt; &lt;span&gt;    fclose(fp_avi);
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt;     printf(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;end\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;49&lt;/span&gt;  
&lt;span&gt;50&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;51&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;

</description>
<pubDate>Mon, 02 Oct 2017 04:59:00 +0000</pubDate>
<dc:creator>原野追逐</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/songhe364826110/p/7619949.html</dc:identifier>
</item>
<item>
<title>【前端】深入浅出Javascript中的数值转换 - 嗨！蜗牛</title>
<link>http://www.cnblogs.com/sxlfzhy/p/7616092.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/sxlfzhy/p/7616092.html</guid>
<description>&lt;p&gt;&lt;span&gt;由于Javascript是一门弱类型的语言，在我们的代码中无时无刻不在发生着类型转换，所以了解Javascript中的类型转换对于了解我们认识Javascript的运行原理至关重要。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;本文主要从数值转换这一维度来剖析在JS中，数值转换会遵循什么样的规则，有哪些用途？&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span&gt;哪些情况下我们会用到js中的数值转换？&lt;/span&gt;&lt;/h2&gt;
&lt;ol&gt;&lt;li&gt;&lt;span&gt;在传统的js中，对元素进行变换、位移、改变大小时，我们经常需要对长度单位进行计算操作；&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;当我们提供了一个通用add函数，此时需要对传入参数的类型进行限制，不能是非数字格式；&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;更多场景请关注知乎问答：&lt;a href=&quot;https://www.zhihu.com/question/27718256&quot;&gt;JavaScript中 Number()函数在哪些场景中用到？&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;h2&gt; Javascript中存在哪些数值转换方式？&lt;/h2&gt;
&lt;p&gt;我们都知道js中存在显式类型转换和隐式类型转换，其中显式类型转换包含：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Number()&lt;/li&gt;
&lt;li&gt;parseInt()&lt;/li&gt;
&lt;li&gt;parseFloat()&lt;/li&gt;
&lt;li&gt;一元加和减操作符&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;隐式类型在js中的体现比较复杂，这里简单罗列以下几种情况：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;位运算符在操作非数值时，会使用Number()来对变量进行转换，然后进行计算；&lt;/li&gt;
&lt;li&gt;乘/除/减法操作符；&lt;/li&gt;
&lt;li&gt;关系操作符（&amp;lt;，&amp;gt;，&amp;lt;=，&amp;gt;=）；&lt;/li&gt;
&lt;li&gt;相等操作符其中一个变量为数值时，会把另一个变量转换为数值进行比较。&lt;/li&gt;
&lt;/ul&gt;&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;由于js的弱类型特性，隐式类型转换其实是相对而言的，如果你了解了一段代码的类型转换方式，那么它对于你而言，就可以被视为显式转换。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;由于Javascript中的隐式类型转换基本都是通过调用Number函数的方式进行的，所以这篇文章主要讨论不同显式类型转换的区别。在讨论之前，我们先看一段代码示例：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;var&lt;/span&gt; a = '+3.14159test'&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; 
&lt;span&gt;3&lt;/span&gt; &lt;span&gt;var&lt;/span&gt; num1 =&lt;span&gt; Number(a); 　　　　　　　　// NaN
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; &lt;span&gt;var&lt;/span&gt; num2 = parseInt(a, 10&lt;span&gt;);　　　　　// 3
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt; &lt;span&gt;var&lt;/span&gt; num3 =&lt;span&gt; parseFloat(a);　　　　　　// 3.14159
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt; &lt;span&gt;var&lt;/span&gt; num4 = +&lt;span&gt;a　　　　　　　　　　　　　// NaN
&lt;/span&gt;&lt;span&gt;7&lt;/span&gt; &lt;span&gt;var&lt;/span&gt; num5 = -a　　　　　　　　　　　　　// NaN
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt; Number函数&lt;/h3&gt;
&lt;h4&gt;特点&lt;/h4&gt;
&lt;p&gt;Number()可以用于转换任何类型。&lt;/p&gt;
&lt;h4&gt;ECMA规范关于Number转换的规则描述：&lt;/h4&gt;
&lt;p&gt;&lt;a title=&quot;https://tc39.github.io/ecma262/#sec-number-objects&quot; href=&quot;https://tc39.github.io/ecma262/#sec-number-objects&quot; target=&quot;_blank&quot;&gt;https://tc39.github.io/ecma262/#sec-number-objects&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;转换规则&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;如果参数是Boolean，则如果为true，返回1；false返回0；&lt;/li&gt;
&lt;li&gt;如果数字类型，直接返回；&lt;/li&gt;
&lt;li&gt;null返回0，undefined返回NaN；&lt;/li&gt;
&lt;li&gt;如果是对象，则首先调用valueOf方法，如果返回值能转换为数值，则返回；否则调用toString方法，然后将返回值按照其他类型规则转换后的内容返回；&lt;/li&gt;
&lt;li&gt;如果是字符串
&lt;ul&gt;&lt;li&gt;如果只包含数字类型，则返回该数字类型的十进制格式；如果前边有-号，则返回负数；&lt;/li&gt;
&lt;li&gt;空字符串返回0；&lt;/li&gt;
&lt;li&gt;十六进制字符串返回十进制数字；如果前边有-号，返回NaN；&lt;/li&gt;
&lt;li&gt;如果非数字，返回NaN；&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;var&lt;/span&gt; num1 = Number(&lt;span&gt;true&lt;/span&gt;);      　　　　&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 1&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;var&lt;/span&gt; num2 = Number(&lt;span&gt;false&lt;/span&gt;);　　　　　　&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 0&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;var&lt;/span&gt; num3 = Number(12);　　　　　　　&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 12&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;var&lt;/span&gt; num4 = Number();　　　　　　　　 &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 0&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;var&lt;/span&gt; num5 = Number(&lt;span&gt;null&lt;/span&gt;);　　　　　　 &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 0&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;var&lt;/span&gt; num6 = Number(undefined);　　　 &lt;span&gt;//&lt;/span&gt;&lt;span&gt; NaN&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;var&lt;/span&gt; num7 = Number('012');　　　　　　&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 12&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;var&lt;/span&gt; num8 = Number('-012');  　　　　   &lt;span&gt;//&lt;/span&gt;&lt;span&gt; -12&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;var&lt;/span&gt; num9 = Number('  0x12');　　　　　  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 18&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt; &lt;span&gt;var&lt;/span&gt; num10 = Number('-0x12');　　　     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; NaN&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt; &lt;span&gt;var&lt;/span&gt; num11 = Number('12test');             &lt;span&gt;//&lt;/span&gt;&lt;span&gt; NaN&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt; &lt;span&gt;var&lt;/span&gt; num12 = Number(　　　　　　　　　 &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 12&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt; &lt;span&gt;　　{
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; 　　　　valueOf: &lt;span&gt;function&lt;/span&gt;&lt;span&gt; (){
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; 　　　　　　&lt;span&gt;return&lt;/span&gt; '012'
&lt;span&gt;16&lt;/span&gt; &lt;span&gt;　　　　},
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;        toString: &lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; 　　　　　　&lt;span&gt;return&lt;/span&gt; '012test'
&lt;span&gt;19&lt;/span&gt; &lt;span&gt;　　　　}
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;　　}
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; )
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;parseInt函数&lt;/h3&gt;
&lt;h4&gt;特点&lt;/h4&gt;
&lt;p&gt;仅用于转换字符串类型，首先会忽略字符串前面的空格。如果字符串一开始是数字或者加减号后边跟数字，则返回该字符串一直到非数字截止。&lt;/p&gt;
&lt;h4&gt;ECMA规范关于parseInt转换的规则描述&lt;/h4&gt;
&lt;p&gt;&lt;a title=&quot;https://tc39.github.io/ecma262/#sec-parseint-string-radix&quot; href=&quot;https://tc39.github.io/ecma262/#sec-parseint-string-radix&quot; target=&quot;_blank&quot;&gt;https://tc39.github.io/ecma262/#sec-parseint-string-radix&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;转换规则&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;如果第一个参数非字符串或数字类型，则返回NaN；&lt;/li&gt;
&lt;li&gt;第一个参数格式正常，第二个参数不传值
&lt;ul&gt;&lt;li&gt;如参数一开始的非空格字符不是非数字且非加减号，则返回NaN&lt;/li&gt;
&lt;li&gt;如参数一以0x开头，则以十六进制来解析字符串，并返回该字符串的十进制格式；&lt;/li&gt;
&lt;li&gt;如参数一以0开头，则在es3标准中按照八进制来解析，es5标准中按照十进制来解析，最终返回十进制格式；（很重要，不了解会导致一些低版本浏览器莫名其妙的问题）&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;第二个参数传值，首先会将参数二进行Number()转换
&lt;ul&gt;&lt;li&gt;如参数二能转换成一个非0数字，则将参数一按照对应进制进行转换&lt;/li&gt;
&lt;li&gt;如参数二不能转换成一个非0数字，则按照参数二为空进行处理&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;var&lt;/span&gt; num1 = parseInt('  0xf');                &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 15   同parseInt('  +0xf')&lt;/span&gt;
&lt;span&gt;2&lt;/span&gt; &lt;span&gt;var&lt;/span&gt; num2 = parseInt('   -0xf');              &lt;span&gt;//&lt;/span&gt;&lt;span&gt; -15&lt;/span&gt;
&lt;span&gt;3&lt;/span&gt; &lt;span&gt;var&lt;/span&gt; num3 = parseInt('  12test');                 &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 12  &lt;/span&gt;
&lt;span&gt;4&lt;/span&gt; &lt;span&gt;var&lt;/span&gt; num4 = parseInt('f');                     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; NaN&lt;/span&gt;
&lt;span&gt;5&lt;/span&gt; &lt;span&gt;var&lt;/span&gt; num5 = parseInt('f', 16);               &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 15&lt;/span&gt;
&lt;span&gt;6&lt;/span&gt; &lt;span&gt;var&lt;/span&gt; num6 = parseInt('015', 8);            &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 13&lt;/span&gt;
&lt;span&gt;7&lt;/span&gt; &lt;span&gt;var&lt;/span&gt; num7 = parseInt('15.34');             &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 15&lt;/span&gt;
&lt;span&gt;8&lt;/span&gt; &lt;span&gt;var&lt;/span&gt; num8 = parseInt('f', '0x10');　　　　　　&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 15&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;parseFloat函数&lt;/h3&gt;
&lt;h4&gt;特点&lt;/h4&gt;
&lt;p&gt;与parseInt类似，但只能接收一个参数，传入字符串只会按照10进制进行解析，会将传入的字符串解析成Double类型数字。&lt;/p&gt;
&lt;h4&gt;ECMA规范关于parseInt转换的规则描述&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;https://tc39.github.io/ecma262/#sec-parsefloat-string&quot; target=&quot;_blank&quot;&gt;https://tc39.github.io/ecma262/#sec-parsefloat-string&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;转换规则&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;如果第一个参数非字符串或数字类型或点字符，则返回NaN；&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;var&lt;/span&gt; num1 = parseFloat('  15.34.43');        &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 15.34&lt;/span&gt;
&lt;span&gt;2&lt;/span&gt; &lt;span&gt;var&lt;/span&gt; num2 = parseFloat('0x123.45');         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 0 因为不支持十六进制&lt;/span&gt;
&lt;span&gt;3&lt;/span&gt; &lt;span&gt;var&lt;/span&gt; num3 = parseFloat('  012.0test');       &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 12&lt;br/&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt; 一元加和减操作符&lt;/h3&gt;
&lt;p&gt;一元加操作符的功能完全和Number()函数一致；一元减操作符是在加操作符的基础上取负值&lt;/p&gt;
&lt;h2&gt;小结&lt;/h2&gt;
&lt;p&gt;当我们可以确定被转换的变量类型是string类型时，推荐优先使用parseFloat，可以当被转换变量为小数的正常使用；当使用parseInt时，推荐使用第二个参数来确定参数一的进制类型，避免因为不同浏览器的兼容问题；&lt;/p&gt;

&lt;p&gt;在写作过程中，越写越发现牵涉到的知识点很多，或许很多地方存在纰漏、误差。如有问题，还请指正！！！&lt;/p&gt;
</description>
<pubDate>Mon, 02 Oct 2017 04:55:00 +0000</pubDate>
<dc:creator>嗨！蜗牛</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/sxlfzhy/p/7616092.html</dc:identifier>
</item>
<item>
<title>设计模式学习笔记 之“多用组合，少用继承” C#代码 - solenovex</title>
<link>http://www.cnblogs.com/cgzl/p/7617762.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/cgzl/p/7617762.html</guid>
<description>&lt;h2&gt;《深入浅出设计模式》学习笔记第一章&lt;/h2&gt;
&lt;h2&gt;原始需求和设计&lt;/h2&gt;
&lt;p&gt;事情是这样开始的，公司需要做一套程序，鸭子，设计如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/986268/201710/986268-20171001201738856-680338036.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;一个鸭子父类，多个派生类，三个可override的方法。&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;我们要会飞的鸭子！！！！！&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;所以我们做了如下的更改：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/986268/201710/986268-20171001201954106-1540208900.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;父类加了fly方法，嗯，所有的鸭子都会飞了，需求实现！&lt;/p&gt;

&lt;p&gt;我们可以在派生类中把父类的fly方法中的内容覆盖掉，那么这个鸭子就不会飞了！&lt;/p&gt;
&lt;p&gt;那么问题又来了，如果再出现几个新型鸭子都不会飞，是不是每个都得覆盖一遍fly方法啊？？？？&lt;/p&gt;

&lt;p&gt;把每个方法都做成接口，如图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/986268/201710/986268-20171001202440340-795009035.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这是超笨的方法，如果一些鸭子的飞行方式发生变化，那么得改多少个类啊。。。&lt;/p&gt;

&lt;p&gt;继承不行，因为鸭子的行为（需求）在子类里面不断变化，而使用接口又无法进行复用。&lt;/p&gt;
&lt;p&gt;幸好，面向对象软件开发有这样一个原则：&lt;/p&gt;

&lt;p&gt;&lt;span&gt;这句话另一种思考方式就是：&lt;span&gt;&lt;strong&gt;把变化的部分取出并封装起来，以便以后可以轻松的改动或扩展，而不影响其他部分&lt;/strong&gt;&lt;/span&gt;。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;所以我们应该把鸭子的行为都提取出来。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;根据需求，我们知道鸭子的fly和quack行为经常发生变化，所以我们现在的设计是这样的：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/986268/201710/986268-20171001203328012-313537955.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;设计原则：&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/986268/201710/986268-20171001203531262-1273694877.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; 这是变化的部分，对于Fly和Quack分别定义接口。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; DesignPatterns.Intro.Bases
{
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt;&lt;span&gt; IFlyBehavior
    {
        &lt;/span&gt;&lt;span&gt;void&lt;/span&gt;&lt;span&gt; Fly();
    }
}

&lt;/span&gt;&lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; DesignPatterns.Intro.Bases
{
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt;&lt;span&gt; IQuackBehavior
    {
        &lt;/span&gt;&lt;span&gt;void&lt;/span&gt;&lt;span&gt; Quack();
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后实现几种类型的Fly和Quack：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; DesignPatterns.Intro.Derives
{
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Squeak: IQuackBehavior
    {
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; Quack()
        {
            Console.WriteLine(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;吱吱&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
        }
    }
}

&lt;/span&gt;&lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; DesignPatterns.Intro.Derives
{
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; NormalQuack: IQuackBehavior
    {
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; Quack()
        {
            Console.WriteLine(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;呱呱&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
        }
    }
}

&lt;/span&gt;&lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; DesignPatterns.Intro.Derives
{
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; MuteQuack: IQuackBehavior
    {
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; Quack()
        {
            Console.WriteLine(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;---------&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
        }
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;让我们来定义鸭子：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/986268/201710/986268-20171002101934599-1804874098.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; ConsoleApp2.Bases
{
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;abstract&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Duck
    {
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;readonly&lt;/span&gt;&lt;span&gt; IFlyBehavior _flyBehavior;
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;readonly&lt;/span&gt;&lt;span&gt; IQuackBehavior _quackBehavior;

        &lt;/span&gt;&lt;span&gt;protected&lt;/span&gt; Duck(IFlyBehavior flyBehavior = &lt;span&gt;null&lt;/span&gt;, IQuackBehavior quackBehavior = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
        {
            _flyBehavior &lt;/span&gt;= flyBehavior ?? &lt;span&gt;new&lt;/span&gt;&lt;span&gt; FlyNoWay();
            _quackBehavior &lt;/span&gt;= quackBehavior ?? &lt;span&gt;new&lt;/span&gt;&lt;span&gt; MuteQuack();
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;abstract&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; Display();

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; PerformFly()
        {
            _flyBehavior.Fly();
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; PerformQuack()
        {
            _quackBehavior.Quack();
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; Swim()
        {
            Console.WriteLine(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;所有的鸭子都会游泳&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
        }
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这是鸭子的抽象类。&lt;/p&gt;
&lt;p&gt;建立实际的鸭子：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; ConsoleApp2.Derives
{
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; MallardDuck: Duck
    {
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; MallardDuck(IFlyBehavior flyBehavior = &lt;span&gt;null&lt;/span&gt;, IQuackBehavior quackBehavior = &lt;span&gt;null&lt;/span&gt;) : &lt;span&gt;base&lt;/span&gt;&lt;span&gt;(flyBehavior, quackBehavior)
        {
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;override&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; Display()
        {
            Console.WriteLine(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;我是个野鸭...&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
        }
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; ConsoleApp2
{
    &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Program
    {
        &lt;/span&gt;&lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; Main(&lt;span&gt;string&lt;/span&gt;&lt;span&gt;[] args)
        {
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; duck = &lt;span&gt;new&lt;/span&gt; MallardDuck(&lt;span&gt;new&lt;/span&gt; FlyNoWay(), &lt;span&gt;new&lt;/span&gt;&lt;span&gt; NormalQuack());
            duck.PerformFly();
            duck.PerformQuack();
            duck.Display();
            Console.ReadLine();
        }
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这时，需求终于完成了！&lt;/p&gt;
&lt;p&gt;我们的鸭子根据传入的Fly和Quack实现类不同而具有不同的效果！&lt;/p&gt;

&lt;p&gt;这时，我们需要&lt;span&gt;动态设定行为，&lt;span&gt;我们只需要加入Set方法即可：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/986268/201710/986268-20171002102656661-353533677.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Duck最新的代码是：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; ConsoleApp2.Bases
{
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;abstract&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Duck
    {
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; IFlyBehavior FlyBehavior { &lt;span&gt;private&lt;/span&gt; &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; IQuackBehavior QuackBehavior { &lt;span&gt;private&lt;/span&gt; &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }

        &lt;/span&gt;&lt;span&gt;protected&lt;/span&gt; Duck(IFlyBehavior flyBehavior = &lt;span&gt;null&lt;/span&gt;, IQuackBehavior quackBehavior = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
        {
            FlyBehavior &lt;/span&gt;= flyBehavior ?? &lt;span&gt;new&lt;/span&gt;&lt;span&gt; FlyNoWay();
            QuackBehavior &lt;/span&gt;= quackBehavior ?? &lt;span&gt;new&lt;/span&gt;&lt;span&gt; MuteQuack();
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;abstract&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; Display();

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; PerformFly()
        {
            FlyBehavior.Fly();
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; PerformQuack()
        {
            QuackBehavior.Quack();
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; Swim()
        {
            Console.WriteLine(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;所有的鸭子都会游泳&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
        }
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;测试效果：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; ConsoleApp2
{
    &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Program
    {
        &lt;/span&gt;&lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; Main(&lt;span&gt;string&lt;/span&gt;&lt;span&gt;[] args)
        {
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; duck = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; MallardDuck();
            duck.PerformFly();
            duck.PerformQuack();
            duck.Display();
            duck.FlyBehavior &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; FlyWithWings();
            duck.QuackBehavior &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Squeak();
            duck.PerformFly();
            duck.PerformQuack();
            Console.ReadLine();
        }
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;需求完成！！！&lt;/p&gt;
&lt;p&gt;最终结构如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/986268/201710/986268-20171002104601865-689553480.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

</description>
<pubDate>Mon, 02 Oct 2017 02:52:00 +0000</pubDate>
<dc:creator>solenovex</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/cgzl/p/7617762.html</dc:identifier>
</item>
<item>
<title>分享ES6中比较常用又强大的新特性 - 不止前端</title>
<link>http://www.cnblogs.com/buzhiqianduan/p/7619752.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/buzhiqianduan/p/7619752.html</guid>
<description>&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;
&lt;p&gt;es6有很多新东西，但是感觉常用的并不是很多，这里学习记录了一些我自己认为非常常用又强大的新特性。&lt;/p&gt;
&lt;h2 id=&quot;scoping&quot;&gt;scoping&lt;/h2&gt;
&lt;p&gt;实用的块级作用域，let x ＝ xxx 可以声明一个块级作用域的局部变量，简单举个例子下面1号函数可以达到正常的效果，而二号则不能，因为变量i是全局的，以往我们可以通过自执行函数解决 不过现在吗就是用let了。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;///1111
let callbacks = []
for (let i = 0; i &amp;lt;= 2; i++) {
    callbacks[i] = function () { return i * 2 }
}

//2222
var callbacks = [];
for (var i = 0; i &amp;lt;= 2; i++) {
   callbacks[i] = function() { return i * 2; }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;除了块级变量还是有块级函数，放个代码。同理，不用再写iife函数去消除作用域问题了。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;{
    function foo () { return 1 }
    foo() === 1
    {
        function foo () { return 2 }
        foo() === 2
    }
    foo() === 1
}

//  only in ES5 with the help of block-scope emulating
//  function scopes and function expressions
(function () {
    var foo = function () { return 1; }
    foo() === 1;
    (function () {
        var foo = function () { return 2; }
        foo() === 2;
    })();
    foo() === 1;
})();
&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;arrow-functions&quot;&gt;Arrow Functions&lt;/h2&gt;
&lt;p&gt;箭头函数简单说就是切换闭包中的this指向，把this指向它的父级作用域，看代码。妈妈也不用担心我用that _this 来替换this指针了。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;///采用箭头函数
this.nums.forEach((v) =&amp;gt; {
    if (v % 5 === 0)
        this.fives.push(v)
})

////传统解决指针问题方法
//  variant 1
var self = this;
this.nums.forEach(function (v) {
    if (v % 5 === 0)
        self.fives.push(v);
});

//  variant 2
this.nums.forEach(function (v) {
    if (v % 5 === 0)
        this.fives.push(v);
}, this);

//  variant 3 (since ECMAScript 5.1 only)
this.nums.forEach(function (v) {
    if (v % 5 === 0)
        this.fives.push(v);
}.bind(this));
&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;extended-parameter-handling&quot;&gt;Extended Parameter Handling&lt;/h2&gt;
&lt;p&gt;函数 rest 操作符：&lt;br/&gt;扩展参数操作，写在参数尾部，表示多余的参数，和新增的spread运算符一样都是三个点(...)，用法如下，后续介绍spread操作符。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;///给参数设定默认参数
function f (x, y = 7, z = 42) {
    return x + y + z
}
&amp;gt;&amp;gt;&amp;gt;  f(1) === 50

／／／ var a = Array.prototype.slice.call(arguments, 2);

function f (x, y, ...a) {
    return (x + y) * a.length
}
&amp;gt;&amp;gt;&amp;gt;  f(1, 2, &quot;hello&quot;, true, 7) === 9  (a = [ &quot;hello&quot;, true, 7])
&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;template-literals&quot;&gt;Template Literals&lt;/h2&gt;
&lt;p&gt;是不是看到那一堆的＋ ‘’ ＋‘’ 要吐了，es6拯救你～&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;var customer = { name: &quot;Foo&quot; }
var card = { amount: 7, product: &quot;Bar&quot;, unitprice: 42 }
var message = `Hello ${customer.name},
want to buy ${card.amount} ${card.product} for
a total of ${card.amount * card.unitprice} bucks?`

get`http://example.com/foo?bar=${bar + baz}&amp;amp;quux=${quux}`
&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;modules&quot;&gt;Modules&lt;/h2&gt;
&lt;p&gt;很常用的方法，react，vue等主流框架经常能看到，可以将js代码模块化，通过export 暴露给其他脚本使用该块代码。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3765249-33e9fae99af5ef9b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;vue-router&quot;/&gt;&lt;br/&gt;以vue－router为例，通过接口暴露了一个router对象&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;//  lib/math.js
export function sum (x, y) { return x + y }
export var pi = 3.141593

//  someApp.js
import * as math from &quot;lib/math&quot;
console.log(&quot;2π = &quot; + math.sum(math.pi, math.pi))

//  otherApp.js
import { sum, pi } from &quot;lib/math&quot;
console.log(&quot;2π = &quot; + sum(pi, pi))&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;classes&quot;&gt;Classes&lt;/h2&gt;
&lt;p&gt;在传统变成语言中定义对象都是基于类，而js生成实例对象则不同。ES6 提供了更接近传统语言的写法，引入了 Class（类）这个概念，作为对象的模板。通过class关键字，可以定义类。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;class Shape {
    constructor (id, x, y) {
        this.id = id
        this.move(x, y)
    }
    move (x, y) {
        this.x = x
        this.y = y
    }
    
  ///传统实例对象
    
    var Shape = function (id, x, y) {
    this.id = id;
    this.move(x, y);
    };
    Shape.prototype.move = function (x, y) {
        this.x = x;
        this.y = y;
    };
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;promises&quot;&gt;Promises&lt;/h2&gt;
&lt;p&gt;ajax神器 这里就不赘述了。大部分项目里基本都在用了。 解决回调地狱的解决方法。es7还有 async 和await 函数 ，需要转换支持。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;function msgAfterTimeout (msg, who, timeout) {
    return new Promise((resolve, reject) =&amp;gt; {
        setTimeout(() =&amp;gt; resolve(`${msg} Hello ${who}!`), timeout)
    })
}
msgAfterTimeout(&quot;&quot;, &quot;Foo&quot;, 100).then((msg) =&amp;gt;
    msgAfterTimeout(msg, &quot;Bar&quot;, 200)
).then((msg) =&amp;gt; {
    console.log(`done after 300ms:${msg}`)
})&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3765249-36a3731783c4fd1c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;promise&quot;/&gt;&lt;/p&gt;
&lt;p&gt;采用promise.all 处理多个异步函数回调&lt;/p&gt;
&lt;h2 id=&quot;new-built-in-methods&quot;&gt;New Built-In Methods&lt;/h2&gt;
&lt;p&gt;es6也对原有的数据类型和原生方法进行了扩展，这里只记录关于数组的扩展，个人感觉比较常用，而且很有用。一些扩展方法可能并不怎么用得到，扩展类型symbol 我现在还想不到什么场景要用。。可能它并不是用来写逻辑的。。而是研究型类型。。。不废话了 开始正文。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;spread / ...运算符&lt;/li&gt;
&lt;li&gt;Array.of() //将一组值转为数组&lt;/li&gt;
&lt;li&gt;Array.from() //用于将类数组（可遍历）对象转为数组&lt;/li&gt;
&lt;li&gt;Array.copyWithin(target, start,end) //复制一段数据到某个target&lt;/li&gt;
&lt;li&gt;Array.find(fn) // 遍历数组寻找条件成员&lt;/li&gt;
&lt;li&gt;Array.findIndex(fn) //同上 返回成员位置&lt;/li&gt;
&lt;li&gt;Array.fill(t,s,e) //填充数组&lt;/li&gt;
&lt;li&gt;Array.includes() //检测数组是否包含某个值&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code&gt;/////实例
//数组去重
var arr = [1,2,3,4,1,2,3]
var res = Array.from(new Set(arr))
&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;  [1,2,3,4]
//查找条件成员

arr.find(function(it) {
return it &amp;gt; 3
})
&amp;gt;&amp;gt;&amp;gt;&amp;gt;  4


///spread用法
arr.push(...[1,2,3])

&amp;gt;&amp;gt;&amp;gt; [1,2,3,4,1,2,3,1,2,3]
&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;总结&quot;&gt;总结&lt;/h2&gt;
&lt;p&gt;掌握一些最新的东西。可以让你事半功倍，知识的深度不容易挖掘但是知识的广度是非常重要的，以前数组去重，以前还能出面试题，现在估计人人都会了。多么的轻松。&lt;br/&gt;如果觉得本文对你有所帮助，就star一下吧～大传送之术！ &lt;a href=&quot;https://github.com/xu455255849/myBlog&quot;&gt;我的博客Github&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Mon, 02 Oct 2017 02:12:00 +0000</pubDate>
<dc:creator>不止前端</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/buzhiqianduan/p/7619752.html</dc:identifier>
</item>
<item>
<title>Jenkins 在声明式 pipeline 中并行执行任务 - sparkdev</title>
<link>http://www.cnblogs.com/sparkdev/p/7617765.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/sparkdev/p/7617765.html</guid>
<description>&lt;p&gt;&lt;span&gt;在持续集成的过程中，并行的执行那些没有依赖关系的任务可以缩短整个执行过程。Jenkins 的 pipeline 功能支持我们用代码来配置持续集成的过程。本文将介绍在 Jenkins 中使用声明式 pipeline 语法完成任务的并行执行。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;在声明式 pipeline 版本 1.2 之前，这是唯一的并行方式，我们看一下代码的写法：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
stage(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;run-parallel&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;) {
  steps {
    parallel(
      a: {
        &lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;task 1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
      },
      b: {
        &lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;task 2&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
      }
    )
  }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;在同一个 stage 内部，我们可以并行的执行多个 step。代码中的 step a 和 b 会在同一台 agent 上并行执行。但是我们可以看到，这种并行执行的方式具有很大的局限性。首先因为 agent 只能在 stage 上设置，所以这种方式不能在不同的 agent 上执行并行的任务。其次并行执行的粒度为 step 级别，执行点小任务还行，但这样的粒度对设计持续集成的流程来说明显过小。所以，我们急需的是 stage 级别的并行执行能力。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;在刚刚发布的声明式 pipeline 版本 1.2中，Jenkins 终于开始支持 stage 级别的并行执行：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/952033/201710/952033-20171001203822309-852622232.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;稍微有一点要求是你的 Jenkins 的版本要大于 2.7：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/952033/201710/952033-20171001203933340-1610927076.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;下面的实例代码描述了如何执行 stage 级别的并行任务：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;pipeline {
    agent any
    stages {
        stage(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Stage1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;) {
            agent { label &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;test1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; }
            steps {
                timestamps {
                    &lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;这是第一个被执行的 stage.&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
                    &lt;span&gt;sleep&lt;/span&gt; &lt;span&gt;5&lt;/span&gt;&lt;span&gt;
                }
            }
        }
        stage(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;并行执行的 Stage&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;) {
            parallel {
                stage(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Stage2.1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;) {
                    agent { label &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;test2&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; }
                    steps {
                        timestamps {
                            &lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;在 agent test2 上执行的并行任务 1.&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
                            &lt;span&gt;sleep&lt;/span&gt; &lt;span&gt;5&lt;/span&gt;
                            &lt;span&gt;echo&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;在 agent test2 上执行的并行任务 1 结束.&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
                        }
                    }
                }
                stage(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Stage2.2&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;) {
                    agent { label &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;test3&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; }
                    steps {
                        timestamps {
                            &lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;在 agent test3 上执行的并行任务 2.&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
                            &lt;span&gt;sleep&lt;/span&gt; &lt;span&gt;10&lt;/span&gt;
                            &lt;span&gt;echo&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;在 agent test3 上执行的并行任务 2 结束.&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
                        }
                    }
                }
            }
        }
        stage(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Stage3&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;) {
            agent { label &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;test1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; }
            steps {
                timestamps {
                    &lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;这是最后一个被执行的 stage.&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
                }
            }
        }
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;上面的代码描述的执行顺序是 Stage1， 并行执行的 Stage 和 Stage3。其中并行执行的 Stage 包含两个并行执行的子 Stage，分别是 Stage2.1 和 Stage2.2，并且这两个 Stage 被指定到了不同的 agent。为了能够在日志中显示步骤执行的时间，我们使用了 Timestamper 插件。所有在 timestamps {} 块中的命令都会在日志中显示执行时间。好了，现在执行上面的配置，然后查看执行日志：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/952033/201710/952033-20171001204030778-83757322.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;从日志中可看到，Stage.21 和 Stage2.2 中的任务在执行时间上是重叠的，并且运行它们的 agent 也不一样。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;Stage 级别的并行任务处理是非常有用的功能，尤其是在我们设计持续集成的流程时。让一些可以并行的任务(比如不同平台上的自动测试)同时执行可以明显缩短整个过程耗费的时间，从而提升持续执行的效能。&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Mon, 02 Oct 2017 01:57:00 +0000</pubDate>
<dc:creator>sparkdev</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/sparkdev/p/7617765.html</dc:identifier>
</item>
<item>
<title>Spring 5：以函数式方式注册 Bean - oopsguy</title>
<link>http://www.cnblogs.com/oopsguy/p/7618492.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/oopsguy/p/7618492.html</guid>
<description>&lt;blockquote readability=&quot;2.1346153846154&quot;&gt;
&lt;p&gt;&lt;a href=&quot;http://www.baeldung.com/spring-5-functional-beans&quot; class=&quot;uri&quot;&gt;http://www.baeldung.com/spring-5-functional-beans&lt;/a&gt;&lt;br/&gt;&lt;strong&gt;作者：&lt;/strong&gt;Loredana Crusoveanu&lt;br/&gt;&lt;strong&gt;译者：&lt;/strong&gt;&lt;a href=&quot;http://oopsguy.com&quot; class=&quot;uri&quot;&gt;http://oopsguy.com&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;概述&quot;&gt;1、概述&lt;/h2&gt;
&lt;p&gt;Spring 5 支持在应用程序上下文中以函数式方式注册 bean。&lt;/p&gt;
&lt;p&gt;简单地说，您可以通过在 &lt;strong&gt;GenericApplicationContext&lt;/strong&gt; 类中定义的一个新 &lt;strong&gt;registerBean()&lt;/strong&gt; 方法重载来完成。&lt;/p&gt;
&lt;p&gt;让我们来为此功能列举一些例子。&lt;/p&gt;
&lt;h2 id=&quot;maven-依赖&quot;&gt;2、Maven 依赖&lt;/h2&gt;
&lt;p&gt;建立 Spring 5 项目的最快方式是将 &lt;strong&gt;spring-boot-start-parent&lt;/strong&gt; 依赖添加到 &lt;strong&gt;pom.xml&lt;/strong&gt; 中来使用 Spring Boot：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode xml&quot;&gt;
&lt;code class=&quot;sourceCode xml&quot;&gt;&lt;span class=&quot;kw&quot;&gt;&amp;lt;parent&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span class=&quot;kw&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-boot-starter-parent&lt;span class=&quot;kw&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;2.0.0.M1&lt;span class=&quot;kw&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;relativePath&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/parent&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;我们的示例需要到 &lt;strong&gt;spring-boot-starter-web&lt;/strong&gt; 和 &lt;strong&gt;spring-boot-starter-test&lt;/strong&gt;，且在 JUnit 测试中需要使用到 WebApplicationContext：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode xml&quot;&gt;
&lt;code class=&quot;sourceCode xml&quot;&gt;&lt;span class=&quot;kw&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span class=&quot;kw&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-boot-starter-web&lt;span class=&quot;kw&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span class=&quot;kw&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-boot-starter-test&lt;span class=&quot;kw&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;scope&amp;gt;&lt;/span&gt;test&lt;span class=&quot;kw&quot;&gt;&amp;lt;/scope&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;当然，使用函数式的方式来注册一个 bean，Spring Boot 并不是必需的。 我们也可以直接添加 &lt;strong&gt;spring-core&lt;/strong&gt; 依赖 [1]：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode xml&quot;&gt;
&lt;code class=&quot;sourceCode xml&quot;&gt;&lt;span class=&quot;kw&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework&lt;span class=&quot;kw&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-core&lt;span class=&quot;kw&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;5.0.0.RC2&lt;span class=&quot;kw&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;由于 &lt;strong&gt;Maven Central&lt;/strong&gt; 仓库中尚未存在这些版本 [1]，我们需要将 &lt;strong&gt;Spring Snapshot Repository&lt;/strong&gt; 添加到 &lt;strong&gt;pom.xml&lt;/strong&gt; 文件中：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode xml&quot;&gt;
&lt;code class=&quot;sourceCode xml&quot;&gt;&lt;span class=&quot;kw&quot;&gt;&amp;lt;repositories&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;repository&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;id&amp;gt;&lt;/span&gt;spring-snapshot&lt;span class=&quot;kw&quot;&gt;&amp;lt;/id&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;name&amp;gt;&lt;/span&gt;Spring Snapshot Repository&lt;span class=&quot;kw&quot;&gt;&amp;lt;/name&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;url&amp;gt;&lt;/span&gt;https://repo.spring.io/snapshot&lt;span class=&quot;kw&quot;&gt;&amp;lt;/url&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;snapshots&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;enabled&amp;gt;&lt;/span&gt;true&lt;span class=&quot;kw&quot;&gt;&amp;lt;/enabled&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;/snapshots&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/repository&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/repositories&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;以函数式形式注册-bean&quot;&gt;3、以函数式形式注册 Bean&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;registerBean() API 可以接收两种类型的函数式接口作为参数：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;用于创建对象的 &lt;strong&gt;Supplier 参数&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;一个 BeanDefinitionCustomizer vararg&lt;/strong&gt;（可变参数），可用于提供一个或多个 lambda 表达式来自定义 &lt;strong&gt;BeanDefinition&lt;/strong&gt;；此接口有一个 &lt;strong&gt;custom()&lt;/strong&gt; 方法&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;首先，我们创建一个非常简单的类，使用它来创建 bean：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; MyService {
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;getRandomNumber&lt;/span&gt;() {
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; Random().&lt;span class=&quot;fu&quot;&gt;nextInt&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;);
    }
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;我们再添加一个 &lt;a href=&quot;mailto:**@SpringBootApplication*&quot;&gt;**@SpringBootApplication*&lt;/a&gt;* 类，可以使用它来运行 &lt;strong&gt;JUnit&lt;/strong&gt; 测试：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;fu&quot;&gt;@SpringBootApplication&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; Spring5Application {
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;main&lt;/span&gt;(String[] args) {
        SpringApplication.&lt;span class=&quot;fu&quot;&gt;run&lt;/span&gt;(Spring5Application.&lt;span class=&quot;fu&quot;&gt;class&lt;/span&gt;, args);
    }
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;接下来，我们可以使用 &lt;a href=&quot;mailto:**@SpringBootTest*&quot;&gt;**@SpringBootTest*&lt;/a&gt;* 注解设置我们的测试类来创建一个 &lt;strong&gt;GenericWebApplicationContext&lt;/strong&gt; 实例：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;fu&quot;&gt;@RunWith&lt;/span&gt;(SpringRunner.&lt;span class=&quot;fu&quot;&gt;class&lt;/span&gt;)
&lt;span class=&quot;fu&quot;&gt;@SpringBootTest&lt;/span&gt;(classes = Spring5Application.&lt;span class=&quot;fu&quot;&gt;class&lt;/span&gt;)
&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; BeanRegistrationTest {
    &lt;span class=&quot;fu&quot;&gt;@Autowired&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; GenericWebApplicationContext context;
    
    &lt;span class=&quot;co&quot;&gt;//...&lt;/span&gt;
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;我们在示例中使用了 &lt;strong&gt;GenericWebApplicationContext&lt;/strong&gt; 类型，但任何类型的 ApplicationContext 都可以以相同的方式来注册一个 bean。&lt;/p&gt;
&lt;p&gt;让我们看看如何&lt;strong&gt;使用 lambda 表达式注册一个 bean 以创建实例&lt;/strong&gt;：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;context.&lt;span class=&quot;fu&quot;&gt;registerBean&lt;/span&gt;(MyService.&lt;span class=&quot;fu&quot;&gt;class&lt;/span&gt;, () -&amp;gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;MyService&lt;/span&gt;());&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;我们来验证一下可不可以检索到该 bean 并使用它：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;MyService myService = (MyService) context.&lt;span class=&quot;fu&quot;&gt;getBean&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;com.baeldung.functional.MyService&quot;&lt;/span&gt;); 
  
&lt;span class=&quot;fu&quot;&gt;assertTrue&lt;/span&gt;(myService.&lt;span class=&quot;fu&quot;&gt;getRandomNumber&lt;/span&gt;() &amp;lt; &lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;);&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在该例子中我们可以看到，如果没有明确定义 bean 的名称，那么它将根据小写的类名来确定。上述方法也可以与一个显式的 bean 名称一起使用：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;context.&lt;span class=&quot;fu&quot;&gt;registerBean&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;mySecondService&quot;&lt;/span&gt;, MyService.&lt;span class=&quot;fu&quot;&gt;class&lt;/span&gt;, () -&amp;gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;MyService&lt;/span&gt;());&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;接下来，让我们来看看&lt;strong&gt;如何通过添加一个 lambda 表达式来自定义注册一个 bean&lt;/strong&gt;：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;context.&lt;span class=&quot;fu&quot;&gt;registerBean&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;myCallbackService&quot;&lt;/span&gt;, MyService.&lt;span class=&quot;fu&quot;&gt;class&lt;/span&gt;, 
  () -&amp;gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;MyService&lt;/span&gt;(), bd -&amp;gt; bd.&lt;span class=&quot;fu&quot;&gt;setAutowireCandidate&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;false&lt;/span&gt;));&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这个参数是一个函数式回调，我们可以使用它来设置 bean 属性，如 &lt;strong&gt;autowire-candidate&lt;/strong&gt; 标志或 &lt;strong&gt;primary&lt;/strong&gt; 标志。&lt;/p&gt;
&lt;h2 id=&quot;结论&quot;&gt;4、结论&lt;/h2&gt;
&lt;p&gt;在本教程中，我们了解了如何以函数式方式来注册一个 bean。&lt;/p&gt;
&lt;p&gt;该示例的源代码可以在 &lt;a href=&quot;https://github.com/eugenp/tutorials/tree/master/spring-5&quot;&gt;GitHub&lt;/a&gt; 上找到。&lt;/p&gt;
&lt;h2 id=&quot;原文示例代码&quot;&gt;原文示例代码&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/eugenp/tutorials/tree/master/spring-5&quot; class=&quot;uri&quot;&gt;https://github.com/eugenp/tutorials/tree/master/spring-5&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;译者注&quot;&gt;译者注&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;[1] 原作者在编写该文时 Spring 5 还没有正式版本。就在不久前，Spring 5 已经发布了，您现在可以直接使用最新的 Spring 5 发行版本。&lt;/li&gt;
&lt;/ul&gt;</description>
<pubDate>Mon, 02 Oct 2017 00:34:00 +0000</pubDate>
<dc:creator>oopsguy</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/oopsguy/p/7618492.html</dc:identifier>
</item>
<item>
<title>上周热点回顾（9.25-10.1） - 博客园团队</title>
<link>http://www.cnblogs.com/cmt/p/7618484.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/cmt/p/7618484.html</guid>
<description>[unable to retrieve full-text content]热点随笔： · 已被.NET基金会认可的弹性和瞬态故障处理库Polly介绍（Jeffcky）· 技术并不是越来越简单的，框架是你的羁绊。（张泰峰）· 腾讯面试经验（Christal_R）· 为什么你需要将代码迁移到ASP.NET Core 2.0？（葡萄城控件技术团队）· Java平台与.Net平台</description>
<pubDate>Mon, 02 Oct 2017 00:29:00 +0000</pubDate>
<dc:creator>博客园团队</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/cmt/p/7618484.html</dc:identifier>
</item>
<item>
<title>配置 VirtualBox backend  - 每天5分钟玩转 Docker 容器技术（75） - CloudMan</title>
<link>http://www.cnblogs.com/CloudMan6/p/7617211.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/CloudMan6/p/7617211.html</guid>
<description>&lt;p&gt;&lt;span&gt;Rexy-Ray 支持多种 backend，上一节我们已经安装配置了 Rex-Ray，今天演示如何配置 VirtualBox backend。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;在 VirtualBox 宿主机，即我的笔记本上启动 vboxwebsrv 服务：&lt;br/&gt;&lt;span&gt;vboxwebsrv -H 0.0.0.0&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img title=&quot;http://7xo6kd.com1.z0.glb.clouddn.com/upload-ueditor-image-20171001-1506829214122097726.png&quot; src=&quot;http://7xo6kd.com1.z0.glb.clouddn.com/upload-ueditor-image-20171001-1506829653371050757.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;&lt;p&gt;执行如下命令关闭 VirtualBox 的登录认证：&lt;br/&gt;&lt;span&gt;VBoxManage setproperty websrvauthlibrary null&lt;/span&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;在关机状态下修改虚拟机 docker1 和 docker2 的 Storage 配置：&lt;/p&gt;
&lt;ol class=&quot; list-paddingleft-2&quot; readability=&quot;-1&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;删除&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;code&gt;&lt;span&gt;IDE&lt;/span&gt;&lt;/code&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;controller。&lt;br/&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;img src=&quot;http://www.cnblogs.com/Users/wanglei/百度云同步盘/容器/images/517.png?v=1506814672913&quot; alt=&quot;&quot;/&gt;&lt;img title=&quot;http://7xo6kd.com1.z0.glb.clouddn.com/upload-ueditor-image-20171001-1506829213877082411.png&quot; src=&quot;http://7xo6kd.com1.z0.glb.clouddn.com/upload-ueditor-image-20171001-1506829653765023884.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;设置&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;code&gt;&lt;span&gt;SATA&lt;/span&gt;&lt;/code&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;controller 的 port 数量为最大值&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;code&gt;&lt;span&gt;30&lt;/span&gt;&lt;/code&gt;。&lt;br/&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;img src=&quot;http://www.cnblogs.com/Users/wanglei/百度云同步盘/容器/images/518.png?v=1506814672913&quot; alt=&quot;&quot;/&gt;&lt;img title=&quot;http://7xo6kd.com1.z0.glb.clouddn.com/upload-ueditor-image-20171001-1506829213931095219.png&quot; src=&quot;http://7xo6kd.com1.z0.glb.clouddn.com/upload-ueditor-image-20171001-1506829654049093873.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;重启 Rex-Ray 服务：&lt;br/&gt;&lt;span&gt;systemctl restart rexray.service&lt;/span&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;运行&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;code&gt;&lt;span&gt;rexray volume ls&lt;/span&gt;&lt;/code&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;测试 Rex-Ray 是否能够正常工作。&lt;/p&gt;
&lt;p&gt;&lt;img title=&quot;http://7xo6kd.com1.z0.glb.clouddn.com/upload-ueditor-image-20171001-1506829214490072484.png&quot; src=&quot;http://7xo6kd.com1.z0.glb.clouddn.com/upload-ueditor-image-20171001-1506829654458049892.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;列表中的 volume 是当前 VirtualBox 所有的虚拟磁盘。准备就绪，当前实验环境如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img title=&quot;http://7xo6kd.com1.z0.glb.clouddn.com/upload-ueditor-image-20171001-1506829214588017541.png&quot; src=&quot;http://7xo6kd.com1.z0.glb.clouddn.com/upload-ueditor-image-20171001-1506829654993024226.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;下一节我们创建 Rex-Ray volume。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;书籍：&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;1.《每天5分钟玩转Docker容器技术》&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;a href=&quot;https://item.jd.com/16936307278.html&quot; target=&quot;_blank&quot;&gt;https://item.jd.com/16936307278.html&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;2.《每天5分钟玩转OpenStack》&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;a href=&quot;https://item.jd.com/12086376.html&quot; target=&quot;_blank&quot;&gt;https://item.jd.com/12086376.html&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;img title=&quot;http://7xo6kd.com1.z0.glb.clouddn.com/upload-ueditor-image-20170926-1506393629819061392.png&quot; src=&quot;http://7xo6kd.com1.z0.glb.clouddn.com/upload-ueditor-image-20171001-1506829655419037856.jpg&quot; alt=&quot;二维码+指纹.png&quot;/&gt;&lt;/p&gt;
</description>
<pubDate>Mon, 02 Oct 2017 00:22:00 +0000</pubDate>
<dc:creator>CloudMan</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/CloudMan6/p/7617211.html</dc:identifier>
</item>
</channel>
</rss>