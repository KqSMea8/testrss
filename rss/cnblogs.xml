<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>css选择器总结 - 一步一步向上爬</title>
<link>http://www.cnblogs.com/z937741304/p/7901086.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/z937741304/p/7901086.html</guid>
<description>&lt;p&gt;　　最近有点忙，所以没有发表博文，现在时间空闲下来了，好好的整理一下知识，今天总结一下css里面的一些选择器。&lt;/p&gt;
&lt;p&gt;　　css里的选择器有好多种，下面我就把我了解到的写一写，如果有不全的或者有误的欢迎留言指正，万分感谢。&lt;/p&gt;
&lt;p&gt;　　一、选择器&lt;/p&gt;
&lt;p&gt;　　1、* 通配符选择器 &lt;/p&gt;
&lt;p&gt;　　　这个选择器是匹配页面中所有的元素，一般用来清除浏览器的默认样式.&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot;&gt;
&lt;pre class=&quot;brush:css;gutter:true;&quot;&gt;
*{margin:0; padding:0}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　2、元素选择器 &lt;/p&gt;
&lt;p&gt;　　　　通过标签名来选择元素。&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:css;gutter:true;&quot;&gt;
div{width:100px; height:100px;}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　3、class选择器&lt;/p&gt;
&lt;p&gt;　　　　　class选择器 / 类选择器 / 用class属性给元素命名，在页面中可以出现很多次，相当于人的名字。&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:css;gutter:true;&quot;&gt;
.box{width:100px; height:100px;}

&amp;lt;div class=&quot;box&quot;&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;p class=&quot;box&quot;&amp;gt;&amp;lt;/p&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　4、 id选择器&lt;/p&gt;
&lt;p&gt;　　　　以id属性来命名，在页面中只能出现一次，具有唯一性，并且权重值最高，相当于一个人的身份证。&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:css;gutter:true;&quot;&gt;
#box{width:100px; height:100px;}

&amp;lt;div id=&quot;box&quot;&amp;gt;&amp;lt;/div&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　二、高级选择器 一　&lt;/p&gt;
&lt;p&gt;　　1、 E F  后代选择器&lt;/p&gt;
&lt;p&gt;　　　　匹配到E元素下面的所有的F元素（包括子、孙），空格隔开。&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:css;gutter:true;&quot;&gt;
div ul li {width:100px; height:100px;}&lt;br/&gt;//匹配到div下面的所有ul，且ul的所有后代li

&amp;lt;div&amp;gt;
　　&amp;lt;ul&amp;gt;
　　　　&amp;lt;li&amp;gt;&amp;lt;/li&amp;gt;
　　　　&amp;lt;li&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;/ul&amp;gt;
&amp;lt;/div&amp;gt;   
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　2、 E,F  多元素选择器&lt;/p&gt;
&lt;p&gt;  　　　　同时匹配到E元素和F元素，用逗号隔开。&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;34&quot;&gt;
&lt;pre class=&quot;brush:css;gutter:true;&quot;&gt;
div,#box{width:100px; height:100px; background:#000;}//同时匹配到下文中的div标签和id为box的p标签

&amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;p id=&quot;box&quot;&amp;gt;&amp;lt;/p&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　3、E&amp;gt;F 子元素选择器&lt;/p&gt;
&lt;p&gt;　　　　选择到E元素的直接子代F，只选择子代。&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:css;gutter:true;&quot; readability=&quot;5&quot;&gt;
ul&amp;gt;li{width:100px; height:100px;}&lt;p&gt;&amp;lt;ul&amp;gt;&lt;br/&gt;　　&amp;lt;li&amp;gt;&lt;br/&gt;　&amp;lt;/li&amp;gt;&lt;br/&gt;&amp;lt;/ul&amp;gt;
&lt;/p&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　4、E+F（毗邻选择器） 相邻兄弟选择器&lt;/p&gt;
&lt;p&gt;　　紧接在E元素后面的同级元素F，相邻兄弟选择器，有相同的父级。&lt;/p&gt;

&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;34&quot;&gt;
&lt;pre class=&quot;brush:css;gutter:true;&quot;&gt;
div+.box{width:100px; height:100px; background:pink;}//这个只能选择到下面第二行的那个p元素  最后一个不满足紧接在div元素后面这个条件

　　&amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;p class=&quot;box&quot;&amp;gt;&amp;lt;/p&amp;gt; 
    &amp;lt;p class=&quot;box&quot;&amp;gt;&amp;lt;/p&amp;gt;
    &amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;p&amp;gt;&amp;lt;/p&amp;gt;
    &amp;lt;p class=&quot;box&quot;&amp;gt;&amp;lt;/p&amp;gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;34&quot;&gt;
&lt;pre class=&quot;brush:css;gutter:true;&quot;&gt;
div p + p{
    width:100px;
    height:100px;
    margin-top:2px;
    background:pink;
}
　　//这个可以选择到下面除了第一个p元素外其他所有的元素。
　　&amp;lt;div&amp;gt;
        &amp;lt;p&amp;gt;&amp;lt;/p&amp;gt;
        &amp;lt;p&amp;gt;&amp;lt;/p&amp;gt;
        &amp;lt;p&amp;gt;&amp;lt;/p&amp;gt;
        &amp;lt;p&amp;gt;&amp;lt;/p&amp;gt;
    &amp;lt;/div&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　三、高级选择器 二       属性选择器&lt;/p&gt;
&lt;p&gt;　　1、 E[attr] 匹配具有attr属性的E元素 　　　&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;34&quot;&gt;
&lt;pre class=&quot;brush:css;gutter:true;&quot;&gt;
div[title]{
    width:100px;
    height:100px;
    margin-top:2px;
    background:pink;
}　　//匹配到下文中的第一个和第三个div元素 因为他们含有title属性
    &amp;lt;div title=&quot;width&quot;&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;div title=&quot;height&quot;&amp;gt;&amp;lt;/div&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　2、E[attr=val]&lt;/p&gt;
&lt;p&gt;　　　　匹配具有attr属性且值只为val的的E元素（注意   属性值要用引号引起来，我自己试了试好像不用括号也可以。）&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:css;gutter:true;&quot;&gt;
div[title=&quot;height&quot;]{
    width:100px;
    height:100px;
    margin-top:2px;
    background:pink;&lt;br/&gt;}  //匹配到下文中的第三个div元素
    &amp;lt;div title=&quot;width&quot;&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;div title=&quot;height&quot;&amp;gt;&amp;lt;/div&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　3、E[attr~=val]&lt;/p&gt;
&lt;p&gt;　　　　匹配属性值为attr，并包含这个值的E元素，用于选取属性值中包含指定词汇的元素。&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;34&quot;&gt;
&lt;pre class=&quot;brush:css;gutter:true;&quot;&gt;
div[class~=&quot;c1&quot;]{
    width:100px;
    height:100px;
    margin-top:2px;
    background:pink;
} //选择到下方第一个和第二个div元素

　　 &amp;lt;div class=&quot;c1&quot;&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;div class=&quot;c1 c2&quot;&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;div class=&quot;c2c1&quot;&amp;gt;&amp;lt;/div&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　4、E[attr|=val]&lt;/p&gt;
&lt;p&gt;　　　　匹配所有属性为attr，值为val或者以 var- 开头的E元素&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;34&quot;&gt;
&lt;pre class=&quot;brush:css;gutter:true;&quot;&gt;
div[class|=&quot;c1&quot;]{
    width:100px;
    height:100px;
    margin-top:2px;
    background:pink;
}//选择到下面当中的第一个和第三个元素

　　 &amp;lt;div class=&quot;c1&quot;&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;div class=&quot;c1cs&quot;&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;div class=&quot;c1-c2&quot;&amp;gt;&amp;lt;/div&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　　5、E[attr][attr2=val]匹配所有 有attr1属性 且有attr2属性，且attr2的值为val的E元素，这个就是写出几个属性选择器，并且都要同时满足他们的条件。　　&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:css;gutter:true;&quot;&gt;
div[title=&quot;width&quot;][class]{
    width:100px;
    height:100px;
    margin-top:2px;
    background:pink;
}    //选择到下面的第一个div元素

    &amp;lt;div title=&quot;width&quot; class=&quot;box&quot;&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;div title=&quot;width&quot;&amp;gt;&amp;lt;/div&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　四、a伪类选择器&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:css;gutter:true;&quot;&gt;
1、 :link    匹配所有未被点击的链接
　　a:link{ color: green; }
2、：hover        匹配鼠标悬停在其上的元素
　　a:hover{ color: gold; }
3、：active       匹配鼠标按下还没有释放的元素
　　a:active{ color: blue; }
4、：visited      匹配所有已经被点击的链接
a:visited{ color: red; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　hover的使用，只是一个选择器，一定是他的后代。&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:css;gutter:true;&quot;&gt;
.box{
    width:100px;
    height: 100px;
    color:#fff;
    background: #000;
}&lt;br/&gt;.box:hover p{
　　color:red;
}//鼠标移动div上，p字体的颜色改变

　　&amp;lt;div class=&quot;box&quot;&amp;gt;
        &amp;lt;p&amp;gt;我的字体&amp;lt;/p&amp;gt;
    &amp;lt;/div&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　2. a伪元素选择器&lt;/p&gt;
&lt;p&gt;　　　　1&amp;gt; ：before  在元素&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:css;gutter:true;&quot;&gt;
div:before{
    content: &quot;before插入的元素&quot;;
}
//在div所有元素的最前面插入这个
&lt;/pre&gt;
&lt;p&gt;　　&amp;lt;div&amp;gt;&lt;br/&gt;　　　　&amp;lt;p&amp;gt;这个是p&amp;lt;/p&amp;gt;&lt;br/&gt;　　　　&amp;lt;ul&amp;gt;&lt;br/&gt;　　　　　　&amp;lt;li&amp;gt;&amp;lt;/li&amp;gt;&lt;br/&gt;　　　　　　&amp;lt;li&amp;gt;&amp;lt;/li&amp;gt;&lt;br/&gt;　　　　　　&amp;lt;li&amp;gt;&amp;lt;/li&amp;gt;&lt;br/&gt;　　　　&amp;lt;/ul&amp;gt;&lt;br/&gt;　　&amp;lt;/div&amp;gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;　　　　2&amp;gt;  :after 在元素后面插入内容，插到最后一个子元素的后面。&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:css;gutter:true;&quot;&gt;
div:after{content:&quot;&quot;;}

&amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;　　css3新增的选择器&lt;/p&gt;
&lt;p&gt;　　　五. 关联选择器&lt;/p&gt;
&lt;p&gt;　　　　E1~E2(选择E1后面的兄弟E2)&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:css;gutter:true;&quot;&gt;
 div~p{
    width:100px;
    height: 100px;
    margin-top: 2px;
    background: #000;
}
　　//div后面的三个p元素都选择到了
    &amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;p&amp;gt;&amp;lt;/p&amp;gt;
    &amp;lt;p&amp;gt;&amp;lt;/p&amp;gt;
    &amp;lt;p&amp;gt;&amp;lt;/p&amp;gt; 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　　六、 属性选择器新增&lt;/p&gt;
&lt;p&gt;　　　　1. [attr^=&quot; ..&quot;] 以....开头的元素&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;34&quot;&gt;
&lt;pre class=&quot;brush:css;gutter:true;&quot;&gt;
div[class^=&quot;de&quot;]{
    width:100px;
    height: 100px;
    margin-top: 2px;
    background: #000;
}　　//选择到了前面三个div元素
    &amp;lt;div class=&quot;de1&quot;&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;div class=&quot;de&quot;&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;div class=&quot;dedkjsfkld&quot;&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;div class=&quot;1fde&quot;&amp;gt;&amp;lt;/div&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　　　2.   [attr$=&quot;... &quot;]　以...结束的元素&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;34&quot;&gt;
&lt;pre class=&quot;brush:css;gutter:true;&quot;&gt;
div[class$=&quot;de&quot;]{
    width:100px;
    height: 100px;
    margin-top: 2px;
    background: #000;
}
　　//选择到了前三个
    &amp;lt;div class=&quot;de1de&quot;&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;div class=&quot;de&quot;&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;div class=&quot;dedkjsfklde&quot;&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;div class=&quot;1f&quot;&amp;gt;&amp;lt;/div&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　　　3. [attr*=&quot;&quot;] 选择到包含值的元素　&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;34&quot;&gt;
&lt;pre class=&quot;brush:css;gutter:true;&quot;&gt;
div[class*=&quot;de&quot;]{
    width:100px;
    height: 100px;
    margin-top: 2px;
    background: #000;
}
　　//选择到下面的  1 2 4 都包含de字母
    &amp;lt;div class=&quot;de1de&quot;&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;div class=&quot;de&quot;&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;div class=&quot;dld&quot;&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;div class=&quot;1def&quot;&amp;gt;&amp;lt;/div&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　七、伪类新增的选择器  下面都用p来举例子，其他的也一样&lt;/p&gt;
&lt;p&gt;　　　下面当中就举一个例子，其他的那些自己去实验一下，可以用这个例子来实验&lt;/p&gt;
&lt;p&gt;　　　　这里是有of的是从p元素当中选p&lt;/p&gt;
&lt;p&gt;　　　1. :first-of-type&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:css;gutter:true;&quot;&gt;
p:first-of-type{
    width:100px;
    height:100px;
    background: #000;
}//父级下面所有p元素的第一个 

    &amp;lt;div&amp;gt;
        &amp;lt;p&amp;gt;&amp;lt;/p&amp;gt;
        &amp;lt;p&amp;gt;&amp;lt;/p&amp;gt;
        &amp;lt;p&amp;gt;&amp;lt;/p&amp;gt;
        &amp;lt;p&amp;gt;&amp;lt;/p&amp;gt;
        &amp;lt;p&amp;gt;&amp;lt;/p&amp;gt;
    &amp;lt;/div&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　2. :last-of-type &lt;/p&gt;
&lt;p&gt;　　p:last-of-type   父级下面所有p元素的最后一个&lt;/p&gt;
&lt;p&gt;　　3. only-of-type&lt;/p&gt;
&lt;p&gt;　　p:only-of-type  父级下面只有一个p元素，其他的元素不能是p，如果有其他元素那么会选不中。&lt;/p&gt;
&lt;p&gt;　　4. ：nth-of-type&lt;/p&gt;
&lt;p&gt;　　p:nth-child(n)   选中父级元素中第n个p&lt;/p&gt;
&lt;p&gt;　　5. ：nth-last-of-type(n)&lt;/p&gt;
&lt;p&gt;　　　　选择p，父级元素中倒数第n个p元素&lt;/p&gt;

&lt;p&gt;下面是没有of的是在子元素中选择&lt;/p&gt;
&lt;p&gt;　　6. :only-child   &lt;/p&gt;
&lt;p&gt;　　　p:only-child  选择p，p必须为他们各自父级的唯一一个子元素&lt;/p&gt;

&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;34&quot;&gt;
&lt;pre class=&quot;brush:css;gutter:true;&quot;&gt;
p:only-child{
    width:100px;
    height: 100px;
    background: #000;
}&lt;br/&gt;　　//下面的这个只能选择到第一个div当中的p

    &amp;lt;div&amp;gt;
        &amp;lt;p&amp;gt;&amp;lt;/p&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;div&amp;gt;
        &amp;lt;p&amp;gt;&amp;lt;/p&amp;gt;
        &amp;lt;span&amp;gt;&amp;lt;/span&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;div&amp;gt;
        &amp;lt;p&amp;gt;&amp;lt;/p&amp;gt;
        &amp;lt;p&amp;gt;&amp;lt;/p&amp;gt;
        &amp;lt;p&amp;gt;&amp;lt;/p&amp;gt;
    &amp;lt;/div&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　7. :last-child&lt;/p&gt;
&lt;p&gt;　　　p:last-child   选择p，p必须为父级的最后一个子元素&lt;/p&gt;
&lt;p&gt;　　8. nth-child（n）&lt;/p&gt;
&lt;p&gt;　　p:nth-child(n)   父元素的第n个元素，叫p元素&lt;/p&gt;
&lt;p&gt;　　9  nth-last-child(n)&lt;/p&gt;
&lt;p&gt;　　　p：nth-last-child(n)　选择p，也就是父级的倒数第n个元素，叫p。&lt;/p&gt;

&lt;p&gt;后面的伪类没有什么规律了，别着急，一个一个慢慢来。&lt;/p&gt;
&lt;p&gt;　　只是举例子，不要以为括号里面的内容是固定的。&lt;/p&gt;
&lt;p&gt;　　1.  ：not（.c1）   选择到class除了c1的p 括号里面的内容还可以是id等&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;34&quot;&gt;
&lt;pre class=&quot;brush:css;gutter:true;&quot;&gt;
p:not(.c1){
    width:100px;
    height: 100px;
    margin-top: 2px;
    background: #000;&lt;br/&gt;}//下面的元素当中除了第一个class为c1的p元素其他的都被选中了。
　　
    &amp;lt;div&amp;gt;
       &amp;lt;p class=&quot;c1&quot;&amp;gt;&amp;lt;/p&amp;gt;
       &amp;lt;p class=&quot;c2&quot;&amp;gt;&amp;lt;/p&amp;gt;
       &amp;lt;p id=&quot;box&quot;&amp;gt;&amp;lt;/p&amp;gt;
       &amp;lt;p&amp;gt;&amp;lt;/p&amp;gt;
       &amp;lt;p&amp;gt;&amp;lt;/p&amp;gt;
   &amp;lt;/div&amp;gt; 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　　2.  :empty　 选择倒标签内容为空的规定元素 &lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:css;gutter:true;&quot;&gt;
p:empty{
    width:100px;
    height: 100px;
    margin-top: 2px;
    background: #000;
}//会选择到下面的第二个p元素，因为他没有内容

    &amp;lt;div&amp;gt;
        &amp;lt;p&amp;gt;11&amp;lt;/p&amp;gt;
        &amp;lt;p&amp;gt;&amp;lt;/p&amp;gt;
        &amp;lt;p&amp;gt;11&amp;lt;/p&amp;gt;
        &amp;lt;p&amp;gt;11&amp;lt;/p&amp;gt;
        &amp;lt;p&amp;gt;1&amp;lt;/p&amp;gt;
    &amp;lt;/div&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　　3.  p:target  选择倒当前被锚点激活的p&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;34&quot;&gt;
&lt;pre class=&quot;brush:css;gutter:true;&quot;&gt;
p:target{
    width:100px;
    height: 100px;
    margin-top: 2px;
    color:#fff;
    background: #000;
}  //点击a的内容，p标签的样式会被选中激活

    &amp;lt;a href=&quot;#a1&quot;&amp;gt;点我&amp;lt;/a&amp;gt;
    &amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;p id=&quot;a1&quot;&amp;gt;p标签的内容&amp;lt;/p&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　4. 　　：：selection 被用户选中的p　这句话什么意思呢，来看下面的截图效果&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:css;gutter:true;&quot;&gt;
p::selection{
    width:100px;
    height: 100px;
    margin-top: 2px;
    color:#fff;
    background: #000;
}

    &amp;lt;p&amp;gt;111&amp;lt;/p&amp;gt;
    &amp;lt;p&amp;gt;222&amp;lt;/p&amp;gt;
    &amp;lt;p&amp;gt;333&amp;lt;/p&amp;gt;
    &amp;lt;p&amp;gt;444&amp;lt;/p&amp;gt;
    &amp;lt;p&amp;gt;555&amp;lt;/p&amp;gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1250927/201711/1250927-20171126233049250-388384141.png&quot; alt=&quot;&quot;/&gt;       &lt;img src=&quot;https://images2018.cnblogs.com/blog/1250927/201711/1250927-20171126233347312-490728450.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; 5. input;disable&lt;/p&gt;
&lt;p&gt;　　选择到不能被操作的input框&lt;/p&gt;
&lt;p&gt;6. input：enable&lt;/p&gt;
&lt;p&gt;　　选择到能被cao操作的input框&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;34&quot;&gt;
&lt;pre class=&quot;brush:css;gutter:true;&quot;&gt;
input:enabled{
    background:yellow;
}
input:disabled{
    background:red;
}
　　//一般可以写内容的都是可以被操作的，加上disabled的属性和disabled的值的是不可以被操作的
    &amp;lt;input type=&quot;text&quot; value=&quot;&quot;&amp;gt;
    &amp;lt;input type=&quot;text&quot;&amp;gt;
    &amp;lt;input type=&quot;text&quot; disabled=&quot;diabled&quot;&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;7. input:checked &lt;/p&gt;
&lt;p&gt;　　选择到被选中的input，一般用于js&lt;/p&gt;

&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:css;gutter:true;&quot;&gt;
input:checked{
    width:40px;
    height:40px;
}//就是框被打上对勾，被选中的元素会被选中
　　　
    &amp;lt;input type=&quot;checkbox&quot; checked=&quot;&quot; value=&quot;&quot;&amp;gt;足球
    &amp;lt;input type=&quot;checkbox&quot; value=&quot;&quot;&amp;gt;篮球
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　我了解到的知识都分享给大家了，如果有不足的地方欢迎来留言指正，如果你通过这篇文章学到了，我会非常开心。&lt;/p&gt;

</description>
<pubDate>Sun, 26 Nov 2017 15:49:00 +0000</pubDate>
<dc:creator>一步一步向上爬</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/z937741304/p/7901086.html</dc:identifier>
</item>
<item>
<title>SDN第一次作业 - linzhenyuyuchen</title>
<link>http://www.cnblogs.com/linzhenyuyuchen/p/7901092.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/linzhenyuyuchen/p/7901092.html</guid>
<description>&lt;p&gt;&amp;#13;
                                    &lt;button type=&quot;button&quot; class=&quot;close&quot; data-dismiss=&quot;modal&quot;&gt;&lt;span aria-hidden=&quot;true&quot;&gt;×&lt;/span&gt;&lt;span class=&quot;sr-only&quot;&gt;Close&lt;/span&gt;&lt;/button&gt;&amp;#13;
                                    &lt;h4 class=&quot;modal-title&quot;&gt;&amp;#13;
                                        请完成人机识别验证&amp;#13;
                                    &lt;/h4&gt;&amp;#13;
                                &lt;/p&gt;
                                &lt;div class=&quot;modal-body&quot; readability=&quot;33&quot;&gt;
                                    
                                    &lt;p&gt;&amp;#13;
                                        &lt;span id=&quot;geetestLoading&quot;&gt; 验证码组件加载中,请稍后...&lt;/span&gt;&amp;#13;
                                    &lt;/p&gt;
                                &lt;/div&gt;
                            </description>
<pubDate>Sun, 26 Nov 2017 15:49:00 +0000</pubDate>
<dc:creator>linzhenyuyuchen</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://passport.cnblogs.com/user/signin?ReturnUrl=http%3A%2F%2Fwww.cnblogs.com%2Flinzhenyuyuchen%2Fp%2F7901092.html&amp;AspxAutoDetectCookieSupport=1</dc:identifier>
</item>
<item>
<title>linux下expect命令实现批量ssh免密 - nfcm</title>
<link>http://www.cnblogs.com/nfcm/p/7899831.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/nfcm/p/7899831.html</guid>
<description>&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;&lt;span&gt;有时候我们需要批量发送ssh命令给服务器，但是有可能有些服务器是新加入的，还没有配置ssh免密，这个时候就会提示我们输入yes/no 或者password等，expect脚本命令就是用于在提示这些的时候，自动为我们输入相应的文字&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;expect脚本&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;先看一段shell脚本，实现了ssh自动连接&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt;!/usr/bin/expect &lt;/span&gt;
spawn ssh  192.168.1.241&lt;span&gt;
expect &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;password&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
send &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;123456\r&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
expect &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;]#&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; {send &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ls -la\r&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;}
interact&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　&lt;span&gt;　&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;注意第一行使用的是&lt;/span&gt;&lt;span&gt;&lt;span&gt;#!/usr/bin/expect&lt;span&gt;而不是普通的bash脚本那样&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;spawn就是用来启动新的进程&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;expect “password&quot;  ,注意这个是expect脚本里面内部的命令，代表用来等待进程反馈，可以接受字符串和正则表达式，这段的意思就是将spawn启动的进程的输出当作expect命令的输入，如果包含password脚本，就会向着标准输出　输出123456\r&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;span&gt;,注意\r代表换行，跟我们输入完一个命令换行是一个道理。&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;send:发送交互值，代替我们手动输入&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;接着我们进入了241的服务器里面，　窗口会输出[root@hadoop01 ~]#  ,跟我们的]# 匹配上了，于是向控制台输出 ls -la命令并且换行。这里我们的expect后面是带了大括号，跟上面的写在两行的效果一直。可以理解为另一种写法。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;&lt;span&gt;interact的作用很特殊，代表等待spawn命令结束，并且停留在241服务端进行继续交互，如果没有这个，那么有可能expect对应的刚匹配上还没执行send就已经结束了。对应的我们可以使用expect eof，替代interact代表等待spawn结束后退出（&lt;/span&gt;&lt;/span&gt;&lt;span&gt;在spawn进程结束后会向expect发送eof&lt;/span&gt;&lt;span&gt;）&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;&lt;span&gt;多分支语法&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;上面的这种expect属于单一分支模式，代表就匹配这一种，如果匹配的不是，那么就要自己输入了，但是我们有可能在第一次有不同的提示，这个时候就需要使用多分支语法&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; expect 只要匹配到aaa 或者password其中的一种就会输出。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt;!/usr/bin/expect&lt;/span&gt;
spawn ssh  192.168.1.241&lt;span&gt;
expect {
 &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;aaa&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; {send &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;bbb\r&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;}
 &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;password&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; { send &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;nf123456\r&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;}
}
expect &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;]#&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; {send &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ls -la\r&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;}
interact&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;expect命令行参数&lt;/h2&gt;
&lt;p&gt;上面的expect脚本功能可能都达到了，为了避免有很多expect脚本，我更推荐使用expect命令&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;!/bin/bash&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; SERVER=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;192.168.1.241&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt; PASSWD=&lt;span&gt;nf123456
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; 
&lt;span&gt; 6&lt;/span&gt; expect -c &lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;        set timeout -1;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;        spawn ssh $SERVER;
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;        expect {
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;                \&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;yes/no\&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; { send \&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;yes\r\&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; ;exp_contine; }
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;                \&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;password:\&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; { send \&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;$PASSWD&lt;/span&gt;\r\&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;; }
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;        };
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; 
&lt;span&gt;14&lt;/span&gt; &lt;span&gt;        expect \&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;]&lt;span&gt;#&lt;/span&gt;&lt;span&gt;\&quot; { send \&quot;ls -la \r\&quot; };&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt;         expect \&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;]#\&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; { send \&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;exit \r\&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; };
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;        expect eof;
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;         &lt;span&gt;&quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;上面的shell功能和expect脚本实现的功能一致，都是通过ssh登录进去后输入，ls -la 命令&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;set timeout -1 设置超时时间&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;expect 后面需要加上-c&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;expect 命令用“双引号包围起来的，这点要注意&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;里面如果有”需要用\&quot;转义。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;第15行代表ls -la 命令结束后发送一个退出命令，一般需要加上，防止阻塞&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;expect eof 匹配spawn结束&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;hr/&gt;
&lt;h2&gt;&lt;span&gt;ssh批量免密demo&lt;/span&gt;&lt;/h2&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt;!/bin/bash&lt;/span&gt;
SERVERS=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;192.168.1.241 192.168.1.242&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
PASSWD&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;123456&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;

&lt;span&gt;function&lt;/span&gt;&lt;span&gt; sshcopyid
{
        expect &lt;/span&gt;-c &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
                set timeout -1;
                spawn ssh-copy-id $1;
                expect {
                        \&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;yes/no\&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; { send \&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;yes\r\&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; ;exp_contine; }
                        \&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;password:\&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; { send \&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;$PASSWD&lt;/span&gt;\r\&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;exp_continue; }
                };
                expect eof;
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
}

&lt;/span&gt;&lt;span&gt;for&lt;/span&gt; server &lt;span&gt;in&lt;/span&gt; &lt;span&gt;$SERVERS&lt;/span&gt;
&lt;span&gt;do&lt;/span&gt;&lt;span&gt;
        sshcopyid &lt;/span&gt;&lt;span&gt;$server&lt;/span&gt;&lt;span&gt;

done&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;



</description>
<pubDate>Sun, 26 Nov 2017 15:41:00 +0000</pubDate>
<dc:creator>nfcm</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/nfcm/p/7899831.html</dc:identifier>
</item>
<item>
<title>T-SQL的进阶:超越基本级别3:构建相关子查询——701小组 - 701</title>
<link>http://www.cnblogs.com/lzy35/p/7900975.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/lzy35/p/7900975.html</guid>
<description>&lt;p class=&quot;tgt&quot; align=&quot;center&quot;&gt;T-SQL的进阶:超越基本级别3:构建相关子查询&lt;/p&gt;
&lt;p class=&quot;tgt&quot;&gt;格雷戈里·拉森,2014/03/05&lt;/p&gt;
&lt;p&gt;原文链接：&lt;/p&gt;
&lt;p&gt;http://www.sqlservercentral.com/articles/Stairway+Series/105972/&lt;/p&gt;

&lt;p class=&quot;tgt&quot;&gt;&lt;strong&gt;该系列&lt;/strong&gt;&lt;/p&gt;
&lt;p class=&quot;tgt&quot;&gt;这篇文章是进阶系列的一部分: t - sql的进阶:超越基础&lt;/p&gt;
&lt;p class=&quot;tgt&quot;&gt;从他的阶梯到T-SQL DML,Gregory Larsen涵盖了T-SQL语言的更高级的方面，如子查询。&lt;/p&gt;
&lt;p class=&quot;tgt&quot;&gt;在这个楼梯的第二层，我讨论了如何在Transact - T-SQL语句中使用子查询。这个楼梯级别将通过讨论一种称为关联子查询的子查询类型来扩展子查询主题。我将探讨什么是相关子查询，以及它与普通子查询的区别。此外，我还将为您提供一些超越基础的Transaction- T-SQL语句示例，并使用关联子查询来帮助识别结果集中返回的行，以满足复杂的业务需求。&lt;/p&gt;
&lt;p class=&quot;tgt&quot;&gt;&lt;strong&gt;什么是相关子查询&lt;/strong&gt;&lt;strong&gt;?&lt;/strong&gt;&lt;/p&gt;
&lt;p class=&quot;tgt&quot;&gt;在这个楼梯的第2级，我们了解到正常的子查询只是在另一个Transact - SQL语句内的一个SELECT语句，在这个语句中子查询如果独立于外部查询而返回结果。关联子查询是子查询的一种形式，它不能独立于外部查询运行，因为它包含来自外部查询的一个或多个列。相关子查询，就像普通的子查询，有时被称为内部查询。如果相关子查询(内部查询)独立于外部查询运行，则它将返回一个错误。因为内部查询的执行依赖于来自外部查询的值，因此它被称为相关子查询。&lt;/p&gt;
&lt;p class=&quot;tgt&quot;&gt;相关子查询可以执行很多次。它将为在外部查询中选择的每个候选行运行一次。每个候选行的列值将用于为关联子查询的每次执行的内部的外部查询列提供值。包含相关子查询的语句的最终结果将基于相关子查询的每次执行的结果。&lt;/p&gt;
&lt;p class=&quot;tgt&quot;&gt;&lt;strong&gt;相关子查询示例的示例数据&lt;/strong&gt;&lt;/p&gt;
&lt;p class=&quot;tgt&quot;&gt;为了演示如何使用相关子查询，我需要一些测试数据。我的所有示例都将使用AdventureWorks2008R2数据库，而不是创建自己的测试数据。如果你想跟随并运行在您的环境中我的例子你可以从这里下载AdventureWorks2008R2数据库:http://msftdbprodsamples.codeplex.com/releases/view/93587&lt;/p&gt;
&lt;p class=&quot;tgt&quot;&gt;&lt;strong&gt;在&lt;/strong&gt;&lt;strong&gt;WHERE&lt;/strong&gt;&lt;strong&gt;子句中关联子查询的示例&lt;/strong&gt;&lt;/p&gt;
&lt;p class=&quot;tgt&quot;&gt;为了演示在WHERE子句中使用关联子查询，我想要确定这些CustomerID在单个订单中购买了超过70个项目。为了达到这个要求，我可以运行清单1中的代码。&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1241987/201711/1241987-20171126230323437-1431468275.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p class=&quot;tgt&quot;&gt;清单1:在WHERE子句中关联子查询&lt;/p&gt;
&lt;p class=&quot;tgt&quot;&gt;当我运行清单1中的代码时，我得到了报告1中的输出。&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1241987/201711/1241987-20171126230340109-1025932289.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p class=&quot;tgt&quot;&gt;报告1:运行清单1中的代码时返回的结果&lt;/p&gt;
&lt;p class=&quot;tgt&quot;&gt;如果您回顾清单1中的代码，您将看到我使用相关子查询限制了我的位置。子查询是圆括号中的代码，我从清单1中提取了相关的子查询代码，并将其放入清单2中。&lt;/p&gt;
&lt;p class=&quot;tgt&quot;&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1241987/201711/1241987-20171126230353046-1890682805.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p class=&quot;tgt&quot;&gt;清单2:清单1中的子查询代码&lt;/p&gt;
&lt;p class=&quot;tgt&quot;&gt;如果我运行清单2中的代码，我将发现在报告2中显示了一个错误。&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1241987/201711/1241987-20171126230538718-1995263952.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p class=&quot;tgt&quot;&gt;报告2:在清单2中运行代码时出错&lt;/p&gt;
&lt;p class=&quot;tgt&quot;&gt;我得到了报告2中显示的错误，因为关联子查询包含对列的引用。SalesOrderID，它是来自外部查询的一列。由于所有相关子查询从外部查询引用一个或多个列，因此不能独立地运行与它关联的外部查询。不能独立于整个Transact - SQL语句运行子查询的事实是将相关子查询与普通子查询区分开来。&lt;/p&gt;
&lt;p class=&quot;tgt&quot;&gt;这里给出的示例是在WHERE子句中使用相关子查询的一个非常简单的例子。希望通过这样一个简单的示例，它很容易理解普通子查询和相关子查询之间的区别。通常，一个相关的子查询可能要复杂得多。此外，请记住，在不使用相关子查询的情况下，可能还有其他方法来满足您的业务需求。&lt;/p&gt;
&lt;p class=&quot;tgt&quot;&gt;正如您所看到的，编写一个相关子查询非常类似于普通子查询，但是您不能独立地运行相关子查询。&lt;/p&gt;
&lt;p class=&quot;tgt&quot;&gt;&lt;strong&gt;在&lt;/strong&gt;&lt;strong&gt;HAVING&lt;/strong&gt;&lt;strong&gt;子句中关联子查询的示例&lt;/strong&gt;&lt;/p&gt;
&lt;p class=&quot;tgt&quot;&gt;有时，您可能想要从外部查询中限制一个有不同值的子句。这时，您可以在您的“有”子句中使用相关子查询。假设您必须编写一个查询，该查询将计算那些在2008年税前购买价值超过15万美元的产品的客户的回扣金额。清单3中的代码通过在HAVING子句中使用关联子查询来计算这些值客户的回扣金额。&lt;/p&gt;
&lt;p class=&quot;tgt&quot;&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1241987/201711/1241987-20171126230601531-1004753776.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p class=&quot;tgt&quot;&gt;清单3:有子句的相关子查询&lt;/p&gt;
&lt;p class=&quot;tgt&quot;&gt;当我运行清单5中的代码时，我得到了报告3中的结果。&lt;/p&gt;
&lt;p class=&quot;tgt&quot;&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1241987/201711/1241987-20171126230621296-920510573.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p class=&quot;tgt&quot;&gt;报告3:运行清单3的结果&lt;/p&gt;
&lt;p class=&quot;tgt&quot;&gt;清单3中的相关子查询代码在关联子查询中的外部查询中使用GROUP BY子句中的CustomerID。关联子查询将对从GROUP BY子句返回的每一行执行一次。这允许“有”子句通过对每个SalesOrderHeader记录的SubTotal列的值求和来计算销售给每个CustomerID的产品总量，其中记录与来自外部查询的CustomerID相关联。清单3中的transact - sql语句只返回了CustomerID已经购买超过15万美元的产品的一行。&lt;/p&gt;
&lt;p class=&quot;tgt&quot;&gt;&lt;strong&gt;包含相关子查询的&lt;/strong&gt;&lt;strong&gt;UPDATE&lt;/strong&gt;&lt;strong&gt;语句的示例&lt;/strong&gt;&lt;/p&gt;
&lt;p class=&quot;tgt&quot;&gt;相关子查询不仅可以使用SELECT语句返回结果集。您还可以使用它们来更新SQL Server表中的数据。为了演示这一点，我首先使用清单4中的代码在tempdb表中生成一些测试数据。&lt;/p&gt;
&lt;p class=&quot;tgt&quot;&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1241987/201711/1241987-20171126230636234-2108999396.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p class=&quot;tgt&quot;&gt;清单4:创建和填充测试表的代码&lt;/p&gt;
&lt;p class=&quot;tgt&quot;&gt;清单4中的代码创建了一个CarInventory表，然后填充了8行，表示当前库存的汽车。&lt;/p&gt;
&lt;p class=&quot;tgt&quot;&gt;销售经理周期性地使用清单5中的查询来查看他的InvoicePriceRatio。&lt;/p&gt;
&lt;p class=&quot;tgt&quot;&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1241987/201711/1241987-20171126230647640-1175750353.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p class=&quot;tgt&quot;&gt;清单5:InvoicePriceRatio查询&lt;/p&gt;
&lt;p class=&quot;tgt&quot;&gt;当经理运行此查询时，她注意到有许多类似的汽车，其发票金额相同，有不同的InvoicePriceRatio值。为了最大限度地提高她的发票价格，她要求她支持编写一个查询，以更新她所有汽车上的StickerPrice，这样每辆车都有相同的CarName值，就有相同的InvoicePriceRatio。她希望IT人员将StickerPrice设置为与CarName的最大价格相同的值。这样，所有具有相同CarName值的汽车将具有相同的StickerPrice值。为了完成CarInventory表的更新，IT人员运行清单6中的Transact - SQLl语句，其中包含一个相关子查询。&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1241987/201711/1241987-20171126230701171-670279358.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p class=&quot;tgt&quot;&gt;清单6:相关子查询，以更新CarInventory以最大价格&lt;/p&gt;
&lt;p class=&quot;tgt&quot;&gt;清单8中的代码使用关联子查询中的外部查询的CarName来标识每个惟一的CarName的最大StickerPrice。然后，在相关子查询中发现的最大StickerPrice值用于更新具有相同名称的每个CarInventory记录的StickerPrice值。&lt;/p&gt;
&lt;p class=&quot;tgt&quot;&gt;&lt;strong&gt;相关子查询的性能考虑&lt;/strong&gt;&lt;/p&gt;
&lt;p class=&quot;tgt&quot;&gt;在编写包含相关子查询的Transact - SQL语句时，应该注意一些性能方面的考虑。当外部查询包含少量行时，性能并不差。但是，当外部查询包含大量的行时，从性能的角度来看，它的伸缩性并不好。这是因为要对外部查询中的每个候选行执行相关的子查询。因此，当外部查询包含越来越多的候选行时，一个相关的子查询必须多次执行，因此Transact - SQL语句将需要更长的时间运行。如果您发现相关子查询Transact - SQL语句的性能不符合您的要求，那么您应该寻找替代解决方案，例如使用内部或外部连接操作的查询，或者从外部查询返回少量候选行的查询。&lt;/p&gt;
&lt;p class=&quot;tgt&quot;&gt;&lt;strong&gt;摘要&lt;/strong&gt;&lt;/p&gt;
&lt;p class=&quot;tgt&quot;&gt;关联子查询是一个内部查询，它包含来自外部查询的一个或多个列。关联子查询对外部查询的每个候选行执行一次。因为关联子查询包含来自外部查询的列，因此它不能独立于外部查询运行。相关子查询有它们的位置，尽管在外部查询中识别出大量候选行时，从性能角度看，它们的伸缩性并不好。&lt;/p&gt;
&lt;p class=&quot;tgt&quot;&gt;&lt;strong&gt;问题和答案&lt;/strong&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;在本节中，您可以通过回答以下问题来回顾您如何理解相关子查询的概念。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;问题1:&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;在编写相关子查询时，需要有___________________。(填入空白)&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;来自内部查询的一个或多个列，用于约束相关子查询的结果。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;在相关子查询的选择列表中使用的内部查询中的一个或多个列。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;来自外部查询的一个或多个列，用于约束相关子查询的结果。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;在相关子查询的选择列表中使用的外部查询的一个或多个列。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;问题2:&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;选择所有关于相关子查询的语句。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;随着候选行的数量增加，包含相关子查询的Transact - SQL语句的性能得到了提高。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;相关子查询将对来自外部查询的每个候选行执行一次。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;相关子查询将引用内部查询中的一个或多个列。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;当在一个拥有子句中使用相关子查询时，将对由GROUP by子句返回的每个候选行执行一次内部查询。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;问题3:&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;相关子查询与普通子查询类似，而相关子查询可以独立于整个Transact - SQL语句(True或False)运行。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;真正的&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;假&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;答案:&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;问题1:&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;正确答案是c .相关子查询需要在相关子查询语句中使用外部查询中的一个或多个列。在执行相关子查询时，这些外部列引用将替换为每个候选行的值。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;问题2:&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;正确的答案是b和d . a是不正确的，因为随着候选行数量的增加，相关子查询的执行次数增加，而Transact - SQL语句性能变得更糟。c是不正确的，因为相关子查询必须包含来自外部查询的一个或多个行，而不是内部查询。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;问题3:&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;正确的答案是b .如果您尝试独立于完整的Transact - SQL语句运行相关子查询，那么相关的子查询语句将会失败。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;这篇文章是T - SQL的进阶的一部分:除了基本的楼梯&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;注册到我们的RSS频道，一旦我们在楼梯上发布一个新的级别，就会得到通知!&lt;/p&gt;
</description>
<pubDate>Sun, 26 Nov 2017 15:08:00 +0000</pubDate>
<dc:creator>701</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/lzy35/p/7900975.html</dc:identifier>
</item>
<item>
<title>Sass学习 - why_not_try</title>
<link>http://www.cnblogs.com/why-not-try/p/7900509.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/why-not-try/p/7900509.html</guid>
<description>&lt;p&gt;&lt;strong&gt;1st 介绍及安装使用：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Sass（Syntactically Awesome StyleSheets）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Sass与Less一样，也是CSS预处理器，有着变量（variables），嵌套（Nested rules），混合（mixins）等功能。使用如Compass的样式库有助于更好的组织管理文件，以及高效开发项目！&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;语法格式：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;有两种写法：1.SCSS（sassy css），这种只是在css语法基础上进行扩展，以.scss格式结尾；2.缩进格式（indented sass），通常称作“sass”。使用的是ruby语法，缩进代替花括号，换行代替分号。这种格式以.sass结尾。（ruby，日本人发明的，前些年与python其名，世界上很多网站是用ruby写的，如早期的Twitter。但是国内环境不是很好，原先我也没怎么接触过这么语言。）&lt;/p&gt;
&lt;p&gt;&lt;span&gt;推荐SCSS写法！与css无痕过渡！&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;使用Sass：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;三种方法使用Sass&lt;/strong&gt;：作为命令行工具；作为独立的Ruby模块（module）；作为Rack-enabled框架的插件（如ruby on rails与Merb）。但是无论哪种方式都需要先安装Sass gem！&lt;/p&gt;
&lt;p&gt;windows系统需要先安装ruby,&lt;a href=&quot;https://rubyinstaller.org/&quot; target=&quot;_blank&quot;&gt;点击链接跳转&lt;/a&gt;。苹果默认已经安装了，Windows系统-----╮(╯▽╰)╭&lt;/p&gt;
&lt;p&gt;&lt;span&gt;安装命令：gem install sass&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1064142/201711/1064142-20171126181942375-1358579720.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;命令行语法可通过&lt;span&gt;sass --help&lt;/span&gt;进行查看！&lt;/p&gt;
&lt;p&gt;运行sass编译文件：&lt;/p&gt;
&lt;p&gt;&lt;span&gt;sass test.scss test.css&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;监视单个sass文件，每次修改保存时自动编译！&lt;/p&gt;
&lt;p&gt;&lt;span&gt;sass --watch test.scss:test.css&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;监视整个文件夹：&lt;/p&gt;
&lt;p&gt;&lt;span&gt;sass --watch app/scss:public/stylesheets&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2nd 快速入门&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.1 变量（variable）：&lt;/strong&gt;使用&lt;strong&gt;$&lt;/strong&gt;符号标识（老版本用!标识）&lt;/p&gt;
&lt;p&gt;示例example.scss：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:css;gutter:true;&quot;&gt;
$testColor:gold;
.test1{
    color:$testColor;
    $width:100px;    
    width: $width;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;sass example.scss example.css编译后：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:css;gutter:true;&quot;&gt;
.test1 {
  color: gold;
  width: 100px; }

/*# sourceMappingURL=example.css.map */
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　注意：1.$testColor变量定义在规则块之外，$width定义在规则块内部，只能在规则块内部应用！　　2.变量定义要在变量使用之前（即$width:100px;在width:$width;前面；否则报错，这与less不同）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.2 嵌套规则（Nested Rules）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;当我们编写如下css时：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:css;gutter:true;&quot;&gt;
.test1 p {
  border: 1px solid goldenrod; }
.test1 .test2 p {
  color: blue; }
.test1 .test2 .test3 h1 {
  background-color: gold; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　结构就显的不是特别清晰了！&lt;/p&gt;
&lt;p&gt;采用sass的嵌套规则，我们可以写成：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:css;gutter:true;&quot;&gt;
.test1{
    p{
        border: 1px solid goldenrod;
    }
    .test2{
        p{
            color: blue;
        }
        .test3{
            h1{
                background-color: gold;
            }
        }
    }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　可读性增强，易于维护！&lt;/p&gt;
&lt;p&gt;编译后产生的css文件，效果是一样的！&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.2.1 父选择器的标识符&amp;amp;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;嵌套在简单的前景下一班可行，但是如果碰到:hover的伪类，就行不通了！这时候就需要用到&amp;amp;。&lt;/p&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:css;gutter:true;&quot;&gt;
.test1{
    background-color: red;
    a{
        color: blue;
        :hover{
            color: goldenrod;
        }
    }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;当编译后，注意红箭头部分！&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1064142/201711/1064142-20171126190750140-1437717574.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这时候.test1 a的所有子元素在被hover后会变色，这与hover在超链接上的得到的效果不符合！&lt;/p&gt;
&lt;p&gt;注意：这里我们可以得出sass每次解开一个嵌套规则后，变化后：父元素+“空格”+子元素！！！&lt;/p&gt;
&lt;p&gt;所以scss文件编写：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1064142/201711/1064142-20171126191539921-1153084919.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; 这时候运行结果：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:css;gutter:true;&quot;&gt;
.test1 {
  background-color: red; }
  .test1 a {
    color: blue; }
    .test1 a:hover {
      color: goldenrod; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　&amp;amp;：对父元素的引用！！！&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.2.2 群组选择器的嵌套：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;37&quot;&gt;
&lt;pre class=&quot;brush:css;gutter:true;&quot;&gt;
.test2, .test3{
    h1,h2,h3{
        background-color: gold;
    }
    h4,h5,h6{
        background-color: blue;
    }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　编译后：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;43&quot;&gt;
&lt;pre class=&quot;brush:css;gutter:true;&quot;&gt;
.test2 h1, .test2 h2, .test2 h3, .test3 h1, .test3 h2, .test3 h3 {
  background-color: gold; }
.test2 h4, .test2 h5, .test2 h6, .test3 h4, .test3 h5, .test3 h6 {
  background-color: blue; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　.test2与h1、.test2与h2、 .test2与h3分别组合，然后组成一个群组选择器；后面组合规则类似。所以编译生成了我们看到的css文件！！！&lt;/p&gt;
&lt;p&gt;相比传统CSS，我们可以看出大大减少了代码量；但是sass看起来文件很小，生成的css文件可能很大，可能对网站性能造成影响！&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.2.3 子组合选择器和同层组合选择器：&amp;gt;、+和~&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这些组合选择器可以放在外层选择器后面，或者里层选择器前面。&lt;/p&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:css;gutter:true;&quot;&gt;
.test4 {
    ~ .test5{border:solid;}
    &amp;gt; .test6{background-color: red;}
    dl &amp;gt;{
        dt{color:blue;}
        dd{color: orange;}
    }
    .test7 + &amp;amp; {margin-top: 5px;}
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　编译后变为：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:css;gutter:true;&quot;&gt;
.test4 ~ .test5 {
  border: solid; }
.test4 &amp;gt; .test6 {
  background-color: red; }
.test4 dl &amp;gt; dt {
  color: blue; }
.test4 dl &amp;gt; dd {
  color: orange; }
.test7 + .test4 {
  margin-top: 5px; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;2.2.4 还支持嵌套属性&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:css;gutter:true;&quot;&gt;
h1{
    border:{
        style:dashed;
        color: black;
    }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　注意：border后面有个“:”号！&lt;/p&gt;
&lt;p&gt;编译后：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:css;gutter:true;&quot;&gt;
h1 {
  border-style: dashed;
  border-color: black; }
&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;　　&lt;em&gt;&lt;strong&gt;个人不建议这种写法！！！&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;3rd 导入sass文件：&lt;/strong&gt;使用sass的@import规则并不需要指定导入文件的后缀名。&lt;strong&gt;即可省略.sass或.scss后缀！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1064142/201711/1064142-20171126203440390-1081948755.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3.1 默认变量值：!important&lt;/strong&gt;。变量申明了值，就用申明的值；没有则用默认值！&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:css;gutter:true;&quot;&gt;
$testHeight:100px;
div{
   width:$testHeight; 
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;3.2 嵌套导入 &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果一个_blue-theme.scss的局部文件：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:css;gutter:true;&quot;&gt;
.test10{
    width: 10px;
    height: 20px;
    border-color: blue;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;example.scss文件：（@import可以省略文件前面的'_'，也可省略后缀！）&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:css;gutter:true;&quot;&gt;
.test12 {@import &quot;blue-theme&quot;};
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;编译后example.css:&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:css;gutter:true;&quot;&gt;
.test12 .test10 {
  width: 10px;
  height: 20px;
  border-color: blue; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;3.3 原生CSS导入&lt;/strong&gt;：由于sass兼容原生的css，所以也支持css@import。会出现在以下情况：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;被导入的文件已.css结尾；&lt;/li&gt;
&lt;li&gt;被导入的文件的名字是css的url()值；&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;strong&gt;4th 静默注释&lt;/strong&gt;：&lt;strong&gt;&lt;span&gt;//&lt;/span&gt;&lt;/strong&gt;开头的注释，不会出现在编译后的css文件中；&lt;strong&gt;&lt;span&gt;/**/&lt;/span&gt;&lt;/strong&gt;注释的内容会出现在编译后的css文件中！&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5th 混合器（mixins）：&lt;/strong&gt;样式可以很好的被重用。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;使用@mixin标识符定义；使用@include调用。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:css;gutter:true;&quot;&gt;
@mixin test100{
    border-style: solid;
    border-color: blue;
    border-width: 10px;
}
div{
    @include test100;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;编译后：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:css;gutter:true;&quot;&gt;
div {
  border-style: solid;
  border-color: blue;
  border-width: 10px; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　&lt;strong&gt;5.1 给混合器传参数&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;37&quot;&gt;
&lt;pre class=&quot;brush:css;gutter:true;&quot;&gt;
@mixin test100($x,$y,$z){
    border-style: $x;
    border-color: $y;
    border-width: $z;
}
div{
    @include test100(solid,blue,10px);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;编译后：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:css;gutter:true;&quot;&gt;
div {
  border-style: solid;
  border-color: blue;
  border-width: 10px; }
&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;　　&lt;strong&gt;注意：参数可以设置默认值；使用$name:defaule-value;的形式！&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;6th 选择器继承：使用@extend实现。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:css;gutter:true;&quot;&gt;
.a{
    color: blue;
    background-color: orange;
}
.b{
    @extend .a;
    font-size: 18px;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;编译后：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:css;gutter:true;&quot;&gt;
.a, .b {
  color: blue;
  background-color: orange; }

.b {
  font-size: 18px; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　即.b继承了所有.a的样式属性！&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;同时.b不仅会继承.a自身的样式，所有与.a有关的组合选择器也会被.b以组合选择器的形式继承！&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:css;gutter:true;&quot;&gt;
.a{
    color: blue;
    background-color: orange;
}
.a div{
    width: 100px;
}
div1.a{
    padding: 3px;
}
.b{
    @extend .a;
    font-size: 18px;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　编译后：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;36&quot;&gt;
&lt;pre class=&quot;brush:css;gutter:true;&quot;&gt;
.a, .b {
  color: blue;
  background-color: orange; }

.a div, .b div {
  width: 100px; }

div1.a, div1.b {
  padding: 3px; }

.b {
  font-size: 18px; }
&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote readability=&quot;9&quot;&gt;
&lt;p&gt;　　注意：1.继承仅仅是重复选择器，不会重复属性；所以使用继承往往比混合器生成的css体积更小！&lt;/p&gt;
&lt;p&gt;　　2.不要在css规则中使用后代继承器去继承css规则。不然，生成css选择器数量会很容易失控！&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;最后：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;更多学习可参考：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://sass-lang.com/install&quot; target=&quot;_blank&quot;&gt;Sass官网&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.sass.hk/guide/&quot; target=&quot;_blank&quot;&gt;Sass中文参考&lt;/a&gt;&lt;/p&gt;


</description>
<pubDate>Sun, 26 Nov 2017 13:23:00 +0000</pubDate>
<dc:creator>why_not_try</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/why-not-try/p/7900509.html</dc:identifier>
</item>
<item>
<title>如何用webgl(three.js)搭建一个3D库房-第一课 - 魂断蓝桥666</title>
<link>http://www.cnblogs.com/yeyunfei/p/7899613.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/yeyunfei/p/7899613.html</guid>
<description>&lt;p&gt;今天我们来讨论一下如何使用当前流行的WebGL技术搭建一个库房并且实现实时有效交互&lt;/p&gt;&lt;p&gt;第一步、搭建一个3D库房首先你得知道库房长啥样，我们先来瞅瞅库房长啥样（这是我在网上找的一个库房图片，百度了“库房”一下，找不到合适的全景，我们也只能窥一斑思全豹了，就它了，特此声明：此图片归原作者所有 非本人所拍，拿来只是给读者做个案例）&lt;/p&gt;&lt;p&gt;下面是我用webgl做出来的3D效果图（当前展示没有货物时的整体模拟）：&lt;/p&gt;&lt;p&gt;        &amp;lt;script src=&quot;/js/jquery-2.2.2.js&quot;&amp;gt;&amp;lt;/script&amp;gt;&lt;br/&gt;　　&amp;lt;script src=&quot;/js/commonFunction.js&quot;&amp;gt;&amp;lt;/script&amp;gt;&lt;br/&gt;　　&amp;lt;script src=&quot;../js/tldesign3D/tl3DLoadData.js&quot;&amp;gt;&amp;lt;/script&amp;gt;&lt;br/&gt;　　&amp;lt;script src=&quot;/js/tldesign3D/tlcoreBSP.js&quot;&amp;gt;&amp;lt;/script&amp;gt;&lt;br/&gt;　　&amp;lt;script src=&quot;/js/tldesign3D/tlcoretween.js&quot;&amp;gt;&amp;lt;/script&amp;gt;&lt;br/&gt;　　&amp;lt;script src=&quot;/js/tldesign3D/sourse/Detector.js&quot;&amp;gt;&amp;lt;/script&amp;gt;&lt;br/&gt;　　&amp;lt;script src=&quot;/js/tldesign3D/sourse/OBJLoader.js&quot;&amp;gt;&amp;lt;/script&amp;gt;&lt;br/&gt;　　&amp;lt;script src=&quot;../js/tldesign3D/sourse/ParticleEngine.min.js&quot;&amp;gt;&amp;lt;/script&amp;gt;&lt;br/&gt;　　&amp;lt;script src=&quot;/js/tldesign3D/tlcoreControls.js&quot;&amp;gt;&amp;lt;/script&amp;gt;&lt;br/&gt;　　&amp;lt;script src=&quot;/js/tldesign3D/TransformControls.js&quot;&amp;gt;&amp;lt;/script&amp;gt;&lt;br/&gt;　　&amp;lt;script src=&quot;/js/tldesign3D/stats.min.js&quot;&amp;gt;&amp;lt;/script&amp;gt;&lt;br/&gt;　　&amp;lt;script src=&quot;/libs/layer/layer.js&quot;&amp;gt;&amp;lt;/script&amp;gt;&lt;/p&gt;&lt;p&gt;　　　　a、搭建场景，要想webGL 3D展示 首先要创建画布，搭建场景&lt;/p&gt;&lt;div readability=&quot;42&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;     tl3dCoreObj = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; tl3DCore();
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;     tl3dCoreBusiness = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; TL3DCoreBusiness();
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;     &lt;span&gt;var&lt;/span&gt; initOption = {&lt;span&gt;//&lt;/span&gt;&lt;span&gt;画布参数&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt;         antialias: &lt;span&gt;true&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;         loadSyn: &lt;span&gt;false&lt;/span&gt;,&lt;span&gt;//&lt;/span&gt;&lt;span&gt;是否启用异步加载&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt;         showHelpGrid: &lt;span&gt;false&lt;/span&gt;,&lt;span&gt;//&lt;/span&gt;&lt;span&gt;是否显示网格线&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt;         clearCoolr: 0x002323&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;         clearColorOp: 1&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;    };
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;     &lt;span&gt;var&lt;/span&gt; Aobjects=[];&lt;span&gt;//&lt;/span&gt;&lt;span&gt;对象列表&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt;     tl3dCoreObj.inittl3DCore('canvas-frame'&lt;span&gt;, initOption, Aobjects);
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;     tl3dCoreObj.start();&lt;span&gt;//&lt;/span&gt;&lt;span&gt;开始吧&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;　　　　　好了 就这么简单 所有需要的3D场景、渲染器、摄像机等等基础已经搭建好了 &lt;/p&gt;&lt;p&gt;　　　　　　先创建地板，分析一下 这个地板主要是绿色地板 加上黄色标线、我们可以让美工先将地板所需要的贴图画好，也可以直接自己画用模型创建，这里我们可以自己画&lt;/p&gt;&lt;div readability=&quot;68&quot;&gt;
&lt;pre&gt;
&lt;span&gt;Aobjects.push({
    &lt;/span&gt;&quot;show&quot;: &lt;span&gt;true&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&quot;uuid&quot;: &quot;&quot;&lt;span&gt;,
    &lt;/span&gt;&quot;name&quot;: &quot;floor&quot;&lt;span&gt;,
    &lt;/span&gt;&quot;objType&quot;: &quot;floor&quot;&lt;span&gt;,
    &lt;/span&gt;&quot;length&quot;: 2000&lt;span&gt;,
    &lt;/span&gt;&quot;width&quot;: 1500&lt;span&gt;,
    &lt;/span&gt;&quot;height&quot;: 10&lt;span&gt;,
    &lt;/span&gt;&quot;x&quot;: 0, &quot;y&quot;: 0, &quot;z&quot;: 0&lt;span&gt;,
    &lt;/span&gt;&quot;style&quot;: { &quot;skinColor&quot;: 16777215, &quot;skin&quot;: { &quot;skin_up&quot;: { &quot;skinColor&quot;: 1529655, &quot;side&quot;: 1, &quot;opacity&quot;: 1&lt;span&gt; } } },
    &lt;/span&gt;&quot;showSortNub&quot;: 4&lt;span&gt;,
    &lt;/span&gt;&quot;animation&quot;: &lt;span&gt;null&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&quot;dbclickEvents&quot;: &lt;span&gt;null&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&quot;scale&quot;: { &quot;x&quot;: 1, &quot;y&quot;: 1, &quot;z&quot;: 1&lt;span&gt; },
});&lt;br/&gt;Aobjects.push({ &quot;show&quot;: true, &quot;uuid&quot;: &quot;&quot;, &quot;name&quot;: &quot;line_5&quot;, &quot;objType&quot;: &quot;line&quot;, &quot;length&quot;: 3, &quot;width&quot;: 40, &quot;height&quot;: 2, &quot;x&quot;: 601.986, &quot;y&quot;: 8.801, &quot;z&quot;: -730.723, &quot;style&quot;: { &quot;skinColor&quot;: 16777215, }, &quot;showSortNub&quot;: 5, })&lt;br/&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;　　　　紧接着我来创建围墙，为了便于用户操控，库房的顶部不用画&lt;/p&gt;&lt;div readability=&quot;145&quot;&gt;
&lt;pre&gt;
&lt;span&gt;Aobjects.push(
 { &lt;/span&gt;&quot;show&quot;: &lt;span&gt;true&lt;/span&gt;, &quot;uuid&quot;&lt;span&gt;: 
&lt;/span&gt;&quot;&quot;, &quot;name&quot;: &quot;wall_16&quot;&lt;span&gt;,
 &lt;/span&gt;&quot;objType&quot;: &quot;holeCube&quot;&lt;span&gt;, 
&lt;/span&gt;&quot;length&quot;: 2000, &quot;width&quot;: 10, &quot;height&quot;: 200&lt;span&gt;,
 &lt;/span&gt;&quot;rotation&quot;: { &quot;0&quot;: { &quot;direction&quot;: &quot;x&quot;, &quot;degree&quot;: 0 }, &quot;1&quot;: { &quot;direction&quot;: &quot;y&quot;, &quot;degree&quot;: 0 }, &quot;2&quot;: { &quot;direction&quot;: &quot;z&quot;, &quot;degree&quot;: 0 } }, &quot;x&quot;: 0, &quot;y&quot;: 100, &quot;z&quot;: -755&lt;span&gt;, 
&lt;/span&gt;&quot;style&quot;: { &quot;skinColor&quot;: 9095650, &quot;skin&quot;: { &quot;skin_up&quot;: { &quot;skinColor&quot;: 14540253 }, &quot;skin_down&quot;: { &quot;skinColor&quot;: 14540253 }, &quot;skin_fore&quot;: { &quot;skinColor&quot;: 14540253 }, &quot;skin_behind&quot;: { &quot;skinColor&quot;: 14540253 }, &quot;skin_left&quot;: { &quot;skinColor&quot;: 14610158 }, &quot;skin_right&quot;: { &quot;skinColor&quot;: 14540253 } } }, &quot;childrens&quot;: [{ &quot;op&quot;: &quot;-&quot;, &quot;show&quot;: &lt;span&gt;true&lt;/span&gt;, &quot;uuid&quot;: &quot;&quot;, &quot;name&quot;: &quot;doorhole1&quot;, &quot;objType&quot;: &quot;cube&quot;, &quot;width&quot;: 10, &quot;height&quot;: 200, &quot;length&quot;: 220, &quot;x&quot;: -500, &quot;y&quot;: 0, &quot;z&quot;: 0, &quot;style&quot;: { &quot;skinColor&quot;: 9095650&lt;span&gt; } },
 { &lt;/span&gt;&quot;op&quot;: &quot;-&quot;, &quot;show&quot;: &lt;span&gt;true&lt;/span&gt;, &quot;uuid&quot;: &quot;&quot;, &quot;name&quot;: &quot;doorhole2&quot;, &quot;objType&quot;: &quot;cube&quot;, &quot;width&quot;: 10, &quot;height&quot;: 200, &quot;length&quot;: 220, &quot;x&quot;: 500, &quot;y&quot;: 0, &quot;z&quot;: 0, &quot;style&quot;: { &quot;skinColor&quot;: 9095650 } }, { &quot;op&quot;: &quot;-&quot;, &quot;show&quot;: &lt;span&gt;true&lt;/span&gt;, &quot;uuid&quot;: &quot;&quot;, &quot;name&quot;: &quot;winhole1&quot;, &quot;objType&quot;: &quot;cube&quot;, &quot;width&quot;: 10, &quot;height&quot;: 120, &quot;length&quot;: 160, &quot;x&quot;: 200, &quot;y&quot;: 20, &quot;z&quot;: 0, &quot;style&quot;: { &quot;skinColor&quot;: 9095650&lt;span&gt; } }, 
{ &lt;/span&gt;&quot;op&quot;: &quot;-&quot;, &quot;show&quot;: &lt;span&gt;true&lt;/span&gt;, &quot;uuid&quot;: &quot;&quot;, &quot;name&quot;: &quot;winhole2&quot;, &quot;objType&quot;: &quot;cube&quot;, &quot;width&quot;: 10, &quot;height&quot;: 120, &quot;length&quot;: 160, &quot;x&quot;: 0, &quot;y&quot;: 20, &quot;z&quot;: 0, &quot;style&quot;: { &quot;skinColor&quot;: 9095650&lt;span&gt; } }, 
{ &lt;/span&gt;&quot;op&quot;: &quot;-&quot;, &quot;show&quot;: &lt;span&gt;true&lt;/span&gt;, &quot;uuid&quot;: &quot;&quot;, &quot;name&quot;: &quot;winhole3&quot;, &quot;objType&quot;: &quot;cube&quot;, &quot;width&quot;: 10, &quot;height&quot;: 120, &quot;length&quot;: 160, &quot;x&quot;: -200, &quot;y&quot;: 20, &quot;z&quot;: 0, &quot;style&quot;: { &quot;skinColor&quot;: 9095650&lt;span&gt; } },
 { &lt;/span&gt;&quot;op&quot;: &quot;-&quot;, &quot;show&quot;: &lt;span&gt;true&lt;/span&gt;, &quot;uuid&quot;: &quot;&quot;, &quot;name&quot;: &quot;winhole4&quot;, &quot;objType&quot;: &quot;cube&quot;, &quot;width&quot;: 10, &quot;height&quot;: 120, &quot;length&quot;: 160, &quot;x&quot;: 800, &quot;y&quot;: 20, &quot;z&quot;: 0, &quot;style&quot;: { &quot;skinColor&quot;: 9095650&lt;span&gt; } }, 
{ &lt;/span&gt;&quot;op&quot;: &quot;-&quot;, &quot;show&quot;: &lt;span&gt;true&lt;/span&gt;, &quot;uuid&quot;: &quot;&quot;, &quot;name&quot;: &quot;winhole5&quot;, &quot;objType&quot;: &quot;cube&quot;, &quot;width&quot;: 10, &quot;height&quot;: 120, &quot;length&quot;: 160, &quot;x&quot;: -800, &quot;y&quot;: 20, &quot;z&quot;: 0, &quot;style&quot;: { &quot;skinColor&quot;: 9095650 } }], &quot;showSortNub&quot;: 16, &quot;scale&quot;: { &quot;x&quot;: 1, &quot;y&quot;: 1, &quot;z&quot;: 1 }})
&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这时候有点样子了 有点感觉了，下面就是细节了 正所谓细节决定成败，即使是个演示，我们也得添加窗户 门 盆栽 窗台 门框什么的&lt;/p&gt;&lt;div readability=&quot;822&quot;&gt;
&lt;pre&gt;
{ &quot;name&quot;: &quot;pot2_3&quot;, &quot;objType&quot;: &quot;cylinder&quot;, &quot;radiusTop&quot;: 16, &quot;radiusBottom&quot;: 8, &quot;height&quot;: 40, &quot;segmentsX&quot;: 2, &quot;segmentsY&quot;: 0, &quot;openEnded&quot;: &lt;span&gt;false&lt;/span&gt;, &quot;position&quot;: { &quot;x&quot;: -104.675, &quot;y&quot;: 41.756, &quot;z&quot;: -735 }, &quot;scale&quot;: { &quot;x&quot;: 1, &quot;y&quot;: 1, &quot;z&quot;: 1 }, &quot;rotation&quot;: [{ &quot;direction&quot;: &quot;x&quot;, &quot;degree&quot;: 0 }, { &quot;direction&quot;: &quot;y&quot;, &quot;degree&quot;: 1.5707963267948966 }, { &quot;direction&quot;: &quot;z&quot;, &quot;degree&quot;: 0 }], &quot;style&quot;: { &quot;skinColor&quot;: 16776960, &quot;skin&quot;: { &quot;skin_up&quot;: { &quot;skinColor&quot;: 16777215, &quot;side&quot;: 1, &quot;opacity&quot;: 1 }, &quot;skin_down&quot;: { &quot;skinColor&quot;: 16777215, &quot;side&quot;: 1, &quot;opacity&quot;: 1 }, &quot;skin_side&quot;: { &quot;skinColor&quot;: 16777215, &quot;opacity&quot;: 1, &quot;imgurl&quot;: &quot;../../img/3dImg/flower.gif&quot; } } }, &quot;showSortNub&quot;: 32, &quot;show&quot;: &lt;span&gt;true&lt;/span&gt;, &quot;customType1&quot;: &quot;&quot;, &quot;customType2&quot;: &quot;&quot;, &quot;animation&quot;: &lt;span&gt;null&lt;/span&gt;, &quot;dbclickEvents&quot;: &lt;span&gt;null&lt;/span&gt;, &quot;BindDevId&quot;: &lt;span&gt;null&lt;/span&gt;, &quot;BindDevName&quot;: &lt;span&gt;null&lt;/span&gt;, &quot;devInfo&quot;: &lt;span&gt;null&lt;/span&gt;, &quot;BindMeteId&quot;: &lt;span&gt;null&lt;/span&gt;, &quot;BindMeteName&quot;: &lt;span&gt;null&lt;/span&gt;&lt;span&gt; },
    { &lt;/span&gt;&quot;name&quot;: &quot;pot3_3&quot;, &quot;objType&quot;: &quot;cylinder&quot;, &quot;radiusTop&quot;: 16, &quot;radiusBottom&quot;: 8, &quot;height&quot;: 40, &quot;segmentsX&quot;: 2, &quot;segmentsY&quot;: 0, &quot;openEnded&quot;: &lt;span&gt;false&lt;/span&gt;, &quot;position&quot;: { &quot;x&quot;: -678.846, &quot;y&quot;: 41.756, &quot;z&quot;: -735 }, &quot;scale&quot;: { &quot;x&quot;: 1, &quot;y&quot;: 1, &quot;z&quot;: 1 }, &quot;rotation&quot;: [{ &quot;direction&quot;: &quot;x&quot;, &quot;degree&quot;: 0 }, { &quot;direction&quot;: &quot;y&quot;, &quot;degree&quot;: 1.5707963267948966 }, { &quot;direction&quot;: &quot;z&quot;, &quot;degree&quot;: 0 }], &quot;style&quot;: { &quot;skinColor&quot;: 16776960, &quot;skin&quot;: { &quot;skin_up&quot;: { &quot;skinColor&quot;: 16777215, &quot;side&quot;: 1, &quot;opacity&quot;: 1 }, &quot;skin_down&quot;: { &quot;skinColor&quot;: 16777215, &quot;side&quot;: 1, &quot;opacity&quot;: 1 }, &quot;skin_side&quot;: { &quot;skinColor&quot;: 16777215, &quot;opacity&quot;: 1, &quot;imgurl&quot;: &quot;../../img/3dImg/flower.gif&quot; } } }, &quot;showSortNub&quot;: 32, &quot;show&quot;: &lt;span&gt;true&lt;/span&gt;, &quot;customType1&quot;: &quot;&quot;, &quot;customType2&quot;: &quot;&quot;, &quot;animation&quot;: &lt;span&gt;null&lt;/span&gt;, &quot;dbclickEvents&quot;: &lt;span&gt;null&lt;/span&gt;, &quot;BindDevId&quot;: &lt;span&gt;null&lt;/span&gt;, &quot;BindDevName&quot;: &lt;span&gt;null&lt;/span&gt;, &quot;devInfo&quot;: &lt;span&gt;null&lt;/span&gt;, &quot;BindMeteId&quot;: &lt;span&gt;null&lt;/span&gt;, &quot;BindMeteName&quot;: &lt;span&gt;null&lt;/span&gt;&lt;span&gt; },
    { &lt;/span&gt;&quot;name&quot;: &quot;pot4_3&quot;, &quot;objType&quot;: &quot;cylinder&quot;, &quot;radiusTop&quot;: 16, &quot;radiusBottom&quot;: 8, &quot;height&quot;: 40, &quot;segmentsX&quot;: 2, &quot;segmentsY&quot;: 0, &quot;openEnded&quot;: &lt;span&gt;false&lt;/span&gt;, &quot;position&quot;: { &quot;x&quot;: 656.887, &quot;y&quot;: 41.756, &quot;z&quot;: -735 }, &quot;scale&quot;: { &quot;x&quot;: 1, &quot;y&quot;: 1, &quot;z&quot;: 1 }, &quot;rotation&quot;: [{ &quot;direction&quot;: &quot;x&quot;, &quot;degree&quot;: 0 }, { &quot;direction&quot;: &quot;y&quot;, &quot;degree&quot;: 1.5707963267948966 }, { &quot;direction&quot;: &quot;z&quot;, &quot;degree&quot;: 0 }], &quot;style&quot;: { &quot;skinColor&quot;: 16776960, &quot;skin&quot;: { &quot;skin_up&quot;: { &quot;skinColor&quot;: 16777215, &quot;side&quot;: 1, &quot;opacity&quot;: 1 }, &quot;skin_down&quot;: { &quot;skinColor&quot;: 16777215, &quot;side&quot;: 1, &quot;opacity&quot;: 1 }, &quot;skin_side&quot;: { &quot;skinColor&quot;: 16777215, &quot;opacity&quot;: 1, &quot;imgurl&quot;: &quot;../../img/3dImg/flower.gif&quot; } } }, &quot;showSortNub&quot;: 32, &quot;show&quot;: &lt;span&gt;true&lt;/span&gt;, &quot;customType1&quot;: &quot;&quot;, &quot;customType2&quot;: &quot;&quot;, &quot;animation&quot;: &lt;span&gt;null&lt;/span&gt;, &quot;dbclickEvents&quot;: &lt;span&gt;null&lt;/span&gt;, &quot;BindDevId&quot;: &lt;span&gt;null&lt;/span&gt;, &quot;BindDevName&quot;: &lt;span&gt;null&lt;/span&gt;, &quot;devInfo&quot;: &lt;span&gt;null&lt;/span&gt;, &quot;BindMeteId&quot;: &lt;span&gt;null&lt;/span&gt;, &quot;BindMeteName&quot;: &lt;span&gt;null&lt;/span&gt;&lt;span&gt; },
    { &lt;/span&gt;&quot;name&quot;: &quot;pot2_2&quot;, &quot;objType&quot;: &quot;cylinder&quot;, &quot;radiusTop&quot;: 16, &quot;radiusBottom&quot;: 8, &quot;height&quot;: 40, &quot;segmentsX&quot;: 2, &quot;segmentsY&quot;: 0, &quot;openEnded&quot;: &lt;span&gt;false&lt;/span&gt;, &quot;position&quot;: { &quot;x&quot;: -104.987, &quot;y&quot;: 41.756, &quot;z&quot;: -735 }, &quot;scale&quot;: { &quot;x&quot;: 1, &quot;y&quot;: 1, &quot;z&quot;: 1 }, &quot;rotation&quot;: [{ &quot;direction&quot;: &quot;x&quot;, &quot;degree&quot;: 0 }, { &quot;direction&quot;: &quot;y&quot;, &quot;degree&quot;: 0 }, { &quot;direction&quot;: &quot;z&quot;, &quot;degree&quot;: 0 }], &quot;style&quot;: { &quot;skinColor&quot;: 16776960, &quot;skin&quot;: { &quot;skin_up&quot;: { &quot;skinColor&quot;: 16777215, &quot;side&quot;: 1, &quot;opacity&quot;: 1 }, &quot;skin_down&quot;: { &quot;skinColor&quot;: 16777215, &quot;side&quot;: 1, &quot;opacity&quot;: 1 }, &quot;skin_side&quot;: { &quot;skinColor&quot;: 16777215, &quot;opacity&quot;: 1, &quot;imgurl&quot;: &quot;../../img/3dImg/flower.gif&quot; } } }, &quot;showSortNub&quot;: 32, &quot;show&quot;: &lt;span&gt;true&lt;/span&gt;, &quot;customType1&quot;: &quot;&quot;, &quot;customType2&quot;: &quot;&quot;, &quot;animation&quot;: &lt;span&gt;null&lt;/span&gt;, &quot;dbclickEvents&quot;: &lt;span&gt;null&lt;/span&gt;, &quot;BindDevId&quot;: &lt;span&gt;null&lt;/span&gt;, &quot;BindDevName&quot;: &lt;span&gt;null&lt;/span&gt;, &quot;devInfo&quot;: &lt;span&gt;null&lt;/span&gt;, &quot;BindMeteId&quot;: &lt;span&gt;null&lt;/span&gt;, &quot;BindMeteName&quot;: &lt;span&gt;null&lt;/span&gt;&lt;span&gt; },
    { &lt;/span&gt;&quot;name&quot;: &quot;pot3_2&quot;, &quot;objType&quot;: &quot;cylinder&quot;, &quot;radiusTop&quot;: 16, &quot;radiusBottom&quot;: 8, &quot;height&quot;: 40, &quot;segmentsX&quot;: 2, &quot;segmentsY&quot;: 0, &quot;openEnded&quot;: &lt;span&gt;false&lt;/span&gt;, &quot;position&quot;: { &quot;x&quot;: -678.595, &quot;y&quot;: 41.756, &quot;z&quot;: -735 }, &quot;scale&quot;: { &quot;x&quot;: 1, &quot;y&quot;: 1, &quot;z&quot;: 1 }, &quot;rotation&quot;: [{ &quot;direction&quot;: &quot;x&quot;, &quot;degree&quot;: 0 }, { &quot;direction&quot;: &quot;y&quot;, &quot;degree&quot;: 0 }, { &quot;direction&quot;: &quot;z&quot;, &quot;degree&quot;: 0 }], &quot;style&quot;: { &quot;skinColor&quot;: 16776960, &quot;skin&quot;: { &quot;skin_up&quot;: { &quot;skinColor&quot;: 16777215, &quot;side&quot;: 1, &quot;opacity&quot;: 1 }, &quot;skin_down&quot;: { &quot;skinColor&quot;: 16777215, &quot;side&quot;: 1, &quot;opacity&quot;: 1 }, &quot;skin_side&quot;: { &quot;skinColor&quot;: 16777215, &quot;opacity&quot;: 1, &quot;imgurl&quot;: &quot;../../img/3dImg/flower.gif&quot; } } }, &quot;showSortNub&quot;: 32, &quot;show&quot;: &lt;span&gt;true&lt;/span&gt;, &quot;customType1&quot;: &quot;&quot;, &quot;customType2&quot;: &quot;&quot;, &quot;animation&quot;: &lt;span&gt;null&lt;/span&gt;, &quot;dbclickEvents&quot;: &lt;span&gt;null&lt;/span&gt;, &quot;BindDevId&quot;: &lt;span&gt;null&lt;/span&gt;, &quot;BindDevName&quot;: &lt;span&gt;null&lt;/span&gt;, &quot;devInfo&quot;: &lt;span&gt;null&lt;/span&gt;, &quot;BindMeteId&quot;: &lt;span&gt;null&lt;/span&gt;, &quot;BindMeteName&quot;: &lt;span&gt;null&lt;/span&gt;&lt;span&gt; },
    { &lt;/span&gt;&quot;name&quot;: &quot;pot4_2&quot;, &quot;objType&quot;: &quot;cylinder&quot;, &quot;radiusTop&quot;: 16, &quot;radiusBottom&quot;: 8, &quot;height&quot;: 40, &quot;segmentsX&quot;: 2, &quot;segmentsY&quot;: 0, &quot;openEnded&quot;: &lt;span&gt;false&lt;/span&gt;, &quot;position&quot;: { &quot;x&quot;: 658.116, &quot;y&quot;: 41.756, &quot;z&quot;: -735 }, &quot;scale&quot;: { &quot;x&quot;: 1, &quot;y&quot;: 1, &quot;z&quot;: 1 }, &quot;rotation&quot;: [{ &quot;direction&quot;: &quot;x&quot;, &quot;degree&quot;: 0 }, { &quot;direction&quot;: &quot;y&quot;, &quot;degree&quot;: 0 }, { &quot;direction&quot;: &quot;z&quot;, &quot;degree&quot;: 0 }], &quot;style&quot;: { &quot;skinColor&quot;: 16776960, &quot;skin&quot;: { &quot;skin_up&quot;: { &quot;skinColor&quot;: 16777215, &quot;side&quot;: 1, &quot;opacity&quot;: 1 }, &quot;skin_down&quot;: { &quot;skinColor&quot;: 16777215, &quot;side&quot;: 1, &quot;opacity&quot;: 1 }, &quot;skin_side&quot;: { &quot;skinColor&quot;: 16777215, &quot;opacity&quot;: 1, &quot;imgurl&quot;: &quot;../../img/3dImg/flower.gif&quot; } } }, &quot;showSortNub&quot;: 32, &quot;show&quot;: &lt;span&gt;true&lt;/span&gt;, &quot;customType1&quot;: &quot;&quot;, &quot;customType2&quot;: &quot;&quot;, &quot;animation&quot;: &lt;span&gt;null&lt;/span&gt;, &quot;dbclickEvents&quot;: &lt;span&gt;null&lt;/span&gt;, &quot;BindDevId&quot;: &lt;span&gt;null&lt;/span&gt;, &quot;BindDevName&quot;: &lt;span&gt;null&lt;/span&gt;, &quot;devInfo&quot;: &lt;span&gt;null&lt;/span&gt;, &quot;BindMeteId&quot;: &lt;span&gt;null&lt;/span&gt;, &quot;BindMeteName&quot;: &lt;span&gt;null&lt;/span&gt;&lt;span&gt; },
    { &lt;/span&gt;&quot;show&quot;: &lt;span&gt;true&lt;/span&gt;, &quot;name&quot;: &quot;doorLeft_44&quot;, &quot;uuid&quot;: &quot;&quot;, &quot;actionSign&quot;: &quot;doorLeft&quot;, &quot;objType&quot;: &quot;cube&quot;, &quot;castShadow&quot;: &lt;span&gt;false&lt;/span&gt;, &quot;width&quot;: 4, &quot;height&quot;: 190, &quot;length&quot;: 104, &quot;x&quot;: 553, &quot;y&quot;: 100, &quot;z&quot;: -755, &quot;style&quot;: { &quot;skinColor&quot;: 9095650, &quot;skin&quot;: { &quot;skin_up&quot;: { &quot;skinColor&quot;: 5325886, &quot;side&quot;: 1, &quot;opacity&quot;: 1 }, &quot;skin_down&quot;: { &quot;skinColor&quot;: 5325886, &quot;side&quot;: 1, &quot;opacity&quot;: 1 }, &quot;skin_fore&quot;: { &quot;skinColor&quot;: 5325886, &quot;side&quot;: 1, &quot;opacity&quot;: 1 }, &quot;skin_behind&quot;: { &quot;skinColor&quot;: 5325886, &quot;side&quot;: 1, &quot;opacity&quot;: 1 }, &quot;skin_left&quot;: { &quot;skinColor&quot;: 5325886, &quot;side&quot;: 1, &quot;opacity&quot;: 1, &quot;imgurl&quot;: &quot;../../img/3dImg/door_left.png&quot; }, &quot;skin_right&quot;: { &quot;skinColor&quot;: 5325886, &quot;side&quot;: 1, &quot;opacity&quot;: 1, &quot;imgurl&quot;: &quot;../../img/3dImg/door_right.png&quot; } } }, &quot;dbclickEvents&quot;: { &quot;obj_eventParamInfo&quot;: [{ &quot;name&quot;: &quot;&quot;, &quot;remark&quot;: &quot;&quot; }], &quot;obj_event&quot;: &quot;openLeftDoor(runobj,function(){});&quot; }, &quot;showSortNub&quot;: 44, &quot;customType1&quot;: &quot;&quot;, &quot;customType2&quot;: &quot;&quot;, &quot;animation&quot;: &lt;span&gt;null&lt;/span&gt;, &quot;rotation&quot;: [{ &quot;direction&quot;: &quot;x&quot;, &quot;degree&quot;: 0 }, { &quot;direction&quot;: &quot;y&quot;, &quot;degree&quot;: 0 }, { &quot;direction&quot;: &quot;z&quot;, &quot;degree&quot;: 0 }], &quot;thick&quot;: &lt;span&gt;null&lt;/span&gt;, &quot;scale&quot;: { &quot;x&quot;: 1, &quot;y&quot;: 1, &quot;z&quot;: 1 }, &quot;BindDevId&quot;: &lt;span&gt;null&lt;/span&gt;, &quot;BindDevName&quot;: &lt;span&gt;null&lt;/span&gt;, &quot;devInfo&quot;: &lt;span&gt;null&lt;/span&gt;, &quot;BindMeteId&quot;: &lt;span&gt;null&lt;/span&gt;, &quot;BindMeteName&quot;: &lt;span&gt;null&lt;/span&gt;&lt;span&gt; },
    { &lt;/span&gt;&quot;show&quot;: &lt;span&gt;true&lt;/span&gt;, &quot;uuid&quot;: &quot;&quot;, &quot;name&quot;: &quot;door_case1&quot;, &quot;objType&quot;: &quot;cube2&quot;, &quot;length&quot;: 15, &quot;width&quot;: 15, &quot;height&quot;: 190, &quot;x&quot;: 388.523, &quot;y&quot;: 100, &quot;z&quot;: -754.724, &quot;style&quot;: { &quot;skinColor&quot;: 16777215, &quot;skin&quot;: { &quot;skin_up&quot;: { &quot;skinColor&quot;: 14540253, &quot;side&quot;: 1, &quot;opacity&quot;: 1 }, &quot;skin_down&quot;: { &quot;skinColor&quot;: 14079702, &quot;side&quot;: 1, &quot;opacity&quot;: 1 }, &quot;skin_fore&quot;: { &quot;skinColor&quot;: 14079702, &quot;side&quot;: 1, &quot;opacity&quot;: 1, &quot;imgurl&quot;: &quot;../../img/images3D/1502887864239_2.jpg&quot; }, &quot;skin_behind&quot;: { &quot;skinColor&quot;: 14079702, &quot;side&quot;: 1, &quot;opacity&quot;: 1, &quot;imgurl&quot;: &quot;../../img/images3D/1502887864239_2.jpg&quot; }, &quot;skin_left&quot;: { &quot;skinColor&quot;: 14079702, &quot;side&quot;: 1, &quot;opacity&quot;: 1, &quot;imgurl&quot;: &quot;../../img/images3D/1502887864239_2.jpg&quot; }, &quot;skin_right&quot;: { &quot;skinColor&quot;: 14079702, &quot;side&quot;: 1, &quot;opacity&quot;: 1, &quot;imgurl&quot;: &quot;../../img/images3D/1502887864239_2.jpg&quot; } } }, &quot;showSortNub&quot;: 46, &quot;customType1&quot;: &quot;&quot;, &quot;customType2&quot;: &quot;&quot;, &quot;animation&quot;: &lt;span&gt;null&lt;/span&gt;, &quot;dbclickEvents&quot;: &lt;span&gt;null&lt;/span&gt;, &quot;rotation&quot;: [{ &quot;direction&quot;: &quot;x&quot;, &quot;degree&quot;: 0 }, { &quot;direction&quot;: &quot;y&quot;, &quot;degree&quot;: 0 }, { &quot;direction&quot;: &quot;z&quot;, &quot;degree&quot;: 0 }], &quot;thick&quot;: &lt;span&gt;null&lt;/span&gt;, &quot;scale&quot;: { &quot;x&quot;: 1, &quot;y&quot;: 1, &quot;z&quot;: 1 }, &quot;BindDevId&quot;: &lt;span&gt;null&lt;/span&gt;, &quot;BindDevName&quot;: &lt;span&gt;null&lt;/span&gt;, &quot;devInfo&quot;: &lt;span&gt;null&lt;/span&gt;, &quot;BindMeteId&quot;: &lt;span&gt;null&lt;/span&gt;, &quot;BindMeteName&quot;: &lt;span&gt;null&lt;/span&gt;&lt;span&gt; },
    { &lt;/span&gt;&quot;show&quot;: &lt;span&gt;true&lt;/span&gt;, &quot;uuid&quot;: &quot;&quot;, &quot;name&quot;: &quot;door_case2&quot;, &quot;objType&quot;: &quot;cube2&quot;, &quot;length&quot;: 15, &quot;width&quot;: 15, &quot;height&quot;: 190, &quot;x&quot;: 612.609, &quot;y&quot;: 100, &quot;z&quot;: -754.724, &quot;style&quot;: { &quot;skinColor&quot;: 16777215, &quot;skin&quot;: { &quot;skin_up&quot;: { &quot;skinColor&quot;: 14540253, &quot;side&quot;: 1, &quot;opacity&quot;: 1 }, &quot;skin_down&quot;: { &quot;skinColor&quot;: 14079702, &quot;side&quot;: 1, &quot;opacity&quot;: 1 }, &quot;skin_fore&quot;: { &quot;skinColor&quot;: 14079702, &quot;side&quot;: 1, &quot;opacity&quot;: 1, &quot;imgurl&quot;: &quot;../../img/images3D/1502887864239_2.jpg&quot; }, &quot;skin_behind&quot;: { &quot;skinColor&quot;: 14079702, &quot;side&quot;: 1, &quot;opacity&quot;: 1, &quot;imgurl&quot;: &quot;../../img/images3D/1502887864239_2.jpg&quot; }, &quot;skin_left&quot;: { &quot;skinColor&quot;: 14079702, &quot;side&quot;: 1, &quot;opacity&quot;: 1, &quot;imgurl&quot;: &quot;../../img/images3D/1502887864239_2.jpg&quot; }, &quot;skin_right&quot;: { &quot;skinColor&quot;: 14079702, &quot;side&quot;: 1, &quot;opacity&quot;: 1, &quot;imgurl&quot;: &quot;../../img/images3D/1502887864239_2.jpg&quot; } } }, &quot;showSortNub&quot;: 46, &quot;customType1&quot;: &quot;&quot;, &quot;customType2&quot;: &quot;&quot;, &quot;animation&quot;: &lt;span&gt;null&lt;/span&gt;, &quot;dbclickEvents&quot;: &lt;span&gt;null&lt;/span&gt;, &quot;rotation&quot;: [{ &quot;direction&quot;: &quot;x&quot;, &quot;degree&quot;: 0 }, { &quot;direction&quot;: &quot;y&quot;, &quot;degree&quot;: 0 }, { &quot;direction&quot;: &quot;z&quot;, &quot;degree&quot;: 0 }], &quot;thick&quot;: &lt;span&gt;null&lt;/span&gt;, &quot;scale&quot;: { &quot;x&quot;: 1, &quot;y&quot;: 1, &quot;z&quot;: 1 }, &quot;BindDevId&quot;: &lt;span&gt;null&lt;/span&gt;, &quot;BindDevName&quot;: &lt;span&gt;null&lt;/span&gt;, &quot;devInfo&quot;: &lt;span&gt;null&lt;/span&gt;, &quot;BindMeteId&quot;: &lt;span&gt;null&lt;/span&gt;, &quot;BindMeteName&quot;: &lt;span&gt;null&lt;/span&gt;&lt;span&gt; },
    { &lt;/span&gt;&quot;show&quot;: &lt;span&gt;true&lt;/span&gt;, &quot;uuid&quot;: &quot;&quot;, &quot;name&quot;: &quot;door_case3&quot;, &quot;objType&quot;: &quot;cube2&quot;, &quot;length&quot;: 240, &quot;width&quot;: 15, &quot;height&quot;: 5, &quot;x&quot;: 500, &quot;y&quot;: 197.5, &quot;z&quot;: -754.724, &quot;style&quot;: { &quot;skinColor&quot;: 16777215, &quot;skin&quot;: { &quot;skin_up&quot;: { &quot;skinColor&quot;: 14540253, &quot;side&quot;: 1, &quot;opacity&quot;: 1 }, &quot;skin_down&quot;: { &quot;skinColor&quot;: 14079702, &quot;side&quot;: 1, &quot;opacity&quot;: 1 }, &quot;skin_fore&quot;: { &quot;skinColor&quot;: 14079702, &quot;side&quot;: 1, &quot;opacity&quot;: 1, &quot;imgurl&quot;: &quot;../../img/images3D/1502887864239_2.jpg&quot; }, &quot;skin_behind&quot;: { &quot;skinColor&quot;: 14079702, &quot;side&quot;: 1, &quot;opacity&quot;: 1, &quot;imgurl&quot;: &quot;../../img/images3D/1502887864239_2.jpg&quot; }, &quot;skin_left&quot;: { &quot;skinColor&quot;: 14079702, &quot;side&quot;: 1, &quot;opacity&quot;: 1, &quot;imgurl&quot;: &quot;../../img/images3D/1502887864239_2.jpg&quot; }, &quot;skin_right&quot;: { &quot;skinColor&quot;: 14079702, &quot;side&quot;: 1, &quot;opacity&quot;: 1, &quot;imgurl&quot;: &quot;../../img/images3D/1502887864239_2.jpg&quot; } } }, &quot;showSortNub&quot;: 46, &quot;customType1&quot;: &quot;&quot;, &quot;customType2&quot;: &quot;&quot;, &quot;animation&quot;: &lt;span&gt;null&lt;/span&gt;, &quot;dbclickEvents&quot;: &lt;span&gt;null&lt;/span&gt;, &quot;rotation&quot;: [{ &quot;direction&quot;: &quot;x&quot;, &quot;degree&quot;: 0 }, { &quot;direction&quot;: &quot;y&quot;, &quot;degree&quot;: 0 }, { &quot;direction&quot;: &quot;z&quot;, &quot;degree&quot;: 0 }], &quot;thick&quot;: &lt;span&gt;null&lt;/span&gt;, &quot;scale&quot;: { &quot;x&quot;: 1, &quot;y&quot;: 1, &quot;z&quot;: 1 }, &quot;BindDevId&quot;: &lt;span&gt;null&lt;/span&gt;, &quot;BindDevName&quot;: &lt;span&gt;null&lt;/span&gt;, &quot;devInfo&quot;: &lt;span&gt;null&lt;/span&gt;, &quot;BindMeteId&quot;: &lt;span&gt;null&lt;/span&gt;, &quot;BindMeteName&quot;: &lt;span&gt;null&lt;/span&gt;&lt;span&gt; }
    ,
    { &lt;/span&gt;&quot;show&quot;: &lt;span&gt;true&lt;/span&gt;, &quot;castShadow&quot;: &lt;span&gt;false&lt;/span&gt;, &quot;name&quot;: &quot;doorRight_45&quot;, &quot;actionSign&quot;: &quot;doorRight&quot;, &quot;uuid&quot;: &quot;&quot;, &quot;objType&quot;: &quot;cube&quot;, &quot;width&quot;: 4, &quot;height&quot;: 190, &quot;length&quot;: 104, &quot;x&quot;: 448, &quot;y&quot;: 100, &quot;z&quot;: -755, &quot;style&quot;: { &quot;skinColor&quot;: 9095650, &quot;skin&quot;: { &quot;skin_up&quot;: { &quot;skinColor&quot;: 5325886, &quot;side&quot;: 1, &quot;opacity&quot;: 1 }, &quot;skin_down&quot;: { &quot;skinColor&quot;: 5325886, &quot;side&quot;: 1, &quot;opacity&quot;: 1 }, &quot;skin_fore&quot;: { &quot;skinColor&quot;: 5325886, &quot;side&quot;: 1, &quot;opacity&quot;: 1 }, &quot;skin_behind&quot;: { &quot;skinColor&quot;: 5325886, &quot;side&quot;: 1, &quot;opacity&quot;: 1 }, &quot;skin_left&quot;: { &quot;skinColor&quot;: 5325886, &quot;side&quot;: 1, &quot;opacity&quot;: 1, &quot;imgurl&quot;: &quot;../../img/3dImg/door_right.png&quot; }, &quot;skin_right&quot;: { &quot;skinColor&quot;: 5325886, &quot;side&quot;: 1, &quot;opacity&quot;: 1, &quot;imgurl&quot;: &quot;../../img/3dImg/door_left.png&quot; } } }, &quot;dbclickEvents&quot;: { &quot;obj_eventParamInfo&quot;: [{ &quot;name&quot;: &quot;&quot;, &quot;remark&quot;: &quot;&quot; }], &quot;obj_event&quot;: &quot;openRightDoor(runobj,function(){});&quot; }, &quot;showSortNub&quot;: 45, &quot;customType1&quot;: &quot;&quot;, &quot;customType2&quot;: &quot;&quot;, &quot;animation&quot;: &lt;span&gt;null&lt;/span&gt;, &quot;rotation&quot;: [{ &quot;direction&quot;: &quot;x&quot;, &quot;degree&quot;: 0 }, { &quot;direction&quot;: &quot;y&quot;, &quot;degree&quot;: 0 }, { &quot;direction&quot;: &quot;z&quot;, &quot;degree&quot;: 0 }], &quot;thick&quot;: &lt;span&gt;null&lt;/span&gt;, &quot;scale&quot;: { &quot;x&quot;: 1, &quot;y&quot;: 1, &quot;z&quot;: 1 }, &quot;BindDevId&quot;: &lt;span&gt;null&lt;/span&gt;, &quot;BindDevName&quot;: &lt;span&gt;null&lt;/span&gt;, &quot;devInfo&quot;: &lt;span&gt;null&lt;/span&gt;, &quot;BindMeteId&quot;: &lt;span&gt;null&lt;/span&gt;, &quot;BindMeteName&quot;: &lt;span&gt;null&lt;/span&gt;&lt;span&gt; },
    { &lt;/span&gt;&quot;show&quot;: &lt;span&gt;true&lt;/span&gt;, &quot;uuid&quot;: &quot;&quot;, &quot;name&quot;: &quot;door_case6&quot;, &quot;objType&quot;: &quot;cube2&quot;, &quot;length&quot;: 240, &quot;width&quot;: 15, &quot;height&quot;: 5, &quot;x&quot;: -500, &quot;y&quot;: 197.5, &quot;z&quot;: -754.724, &quot;style&quot;: { &quot;skinColor&quot;: 16777215, &quot;skin&quot;: { &quot;skin_up&quot;: { &quot;skinColor&quot;: 14540253, &quot;side&quot;: 1, &quot;opacity&quot;: 1 }, &quot;skin_down&quot;: { &quot;skinColor&quot;: 14079702, &quot;side&quot;: 1, &quot;opacity&quot;: 1 }, &quot;skin_fore&quot;: { &quot;skinColor&quot;: 14079702, &quot;side&quot;: 1, &quot;opacity&quot;: 1, &quot;imgurl&quot;: &quot;../../img/images3D/1502887864239_2.jpg&quot; }, &quot;skin_behind&quot;: { &quot;skinColor&quot;: 14079702, &quot;side&quot;: 1, &quot;opacity&quot;: 1, &quot;imgurl&quot;: &quot;../../img/images3D/1502887864239_2.jpg&quot; }, &quot;skin_left&quot;: { &quot;skinColor&quot;: 14079702, &quot;side&quot;: 1, &quot;opacity&quot;: 1, &quot;imgurl&quot;: &quot;../../img/images3D/1502887864239_2.jpg&quot; }, &quot;skin_right&quot;: { &quot;skinColor&quot;: 14079702, &quot;side&quot;: 1, &quot;opacity&quot;: 1, &quot;imgurl&quot;: &quot;../../img/images3D/1502887864239_2.jpg&quot; } } }, &quot;showSortNub&quot;: 46, &quot;customType1&quot;: &quot;&quot;, &quot;customType2&quot;: &quot;&quot;, &quot;animation&quot;: &lt;span&gt;null&lt;/span&gt;, &quot;dbclickEvents&quot;: &lt;span&gt;null&lt;/span&gt;, &quot;rotation&quot;: [{ &quot;direction&quot;: &quot;x&quot;, &quot;degree&quot;: 0 }, { &quot;direction&quot;: &quot;y&quot;, &quot;degree&quot;: 0 }, { &quot;direction&quot;: &quot;z&quot;, &quot;degree&quot;: 0 }], &quot;thick&quot;: &lt;span&gt;null&lt;/span&gt;, &quot;scale&quot;: { &quot;x&quot;: 1, &quot;y&quot;: 1, &quot;z&quot;: 1 }, &quot;BindDevId&quot;: &lt;span&gt;null&lt;/span&gt;, &quot;BindDevName&quot;: &lt;span&gt;null&lt;/span&gt;, &quot;devInfo&quot;: &lt;span&gt;null&lt;/span&gt;, &quot;BindMeteId&quot;: &lt;span&gt;null&lt;/span&gt;, &quot;BindMeteName&quot;: &lt;span&gt;null&lt;/span&gt;&lt;span&gt; },
    { &lt;/span&gt;&quot;show&quot;: &lt;span&gt;true&lt;/span&gt;, &quot;uuid&quot;: &quot;&quot;, &quot;name&quot;: &quot;door_case4&quot;, &quot;objType&quot;: &quot;cube2&quot;, &quot;length&quot;: 15, &quot;width&quot;: 15, &quot;height&quot;: 190, &quot;x&quot;: -388.523, &quot;y&quot;: 100, &quot;z&quot;: -754.724, &quot;style&quot;: { &quot;skinColor&quot;: 16777215, &quot;skin&quot;: { &quot;skin_up&quot;: { &quot;skinColor&quot;: 14540253, &quot;side&quot;: 1, &quot;opacity&quot;: 1 }, &quot;skin_down&quot;: { &quot;skinColor&quot;: 14079702, &quot;side&quot;: 1, &quot;opacity&quot;: 1 }, &quot;skin_fore&quot;: { &quot;skinColor&quot;: 14079702, &quot;side&quot;: 1, &quot;opacity&quot;: 1, &quot;imgurl&quot;: &quot;../../img/images3D/1502887864239_2.jpg&quot; }, &quot;skin_behind&quot;: { &quot;skinColor&quot;: 14079702, &quot;side&quot;: 1, &quot;opacity&quot;: 1, &quot;imgurl&quot;: &quot;../../img/images3D/1502887864239_2.jpg&quot; }, &quot;skin_left&quot;: { &quot;skinColor&quot;: 14079702, &quot;side&quot;: 1, &quot;opacity&quot;: 1, &quot;imgurl&quot;: &quot;../../img/images3D/1502887864239_2.jpg&quot; }, &quot;skin_right&quot;: { &quot;skinColor&quot;: 14079702, &quot;side&quot;: 1, &quot;opacity&quot;: 1, &quot;imgurl&quot;: &quot;../../img/images3D/1502887864239_2.jpg&quot; } } }, &quot;showSortNub&quot;: 46, &quot;customType1&quot;: &quot;&quot;, &quot;customType2&quot;: &quot;&quot;, &quot;animation&quot;: &lt;span&gt;null&lt;/span&gt;, &quot;dbclickEvents&quot;: &lt;span&gt;null&lt;/span&gt;, &quot;rotation&quot;: [{ &quot;direction&quot;: &quot;x&quot;, &quot;degree&quot;: 0 }, { &quot;direction&quot;: &quot;y&quot;, &quot;degree&quot;: 0 }, { &quot;direction&quot;: &quot;z&quot;, &quot;degree&quot;: 0 }], &quot;thick&quot;: &lt;span&gt;null&lt;/span&gt;, &quot;scale&quot;: { &quot;x&quot;: 1, &quot;y&quot;: 1, &quot;z&quot;: 1 }, &quot;BindDevId&quot;: &lt;span&gt;null&lt;/span&gt;, &quot;BindDevName&quot;: &lt;span&gt;null&lt;/span&gt;, &quot;devInfo&quot;: &lt;span&gt;null&lt;/span&gt;, &quot;BindMeteId&quot;: &lt;span&gt;null&lt;/span&gt;, &quot;BindMeteName&quot;: &lt;span&gt;null&lt;/span&gt;&lt;span&gt; },
    { &lt;/span&gt;&quot;show&quot;: &lt;span&gt;true&lt;/span&gt;, &quot;uuid&quot;: &quot;&quot;, &quot;name&quot;: &quot;door_case5&quot;, &quot;objType&quot;: &quot;cube2&quot;, &quot;length&quot;: 15, &quot;width&quot;: 15, &quot;height&quot;: 190, &quot;x&quot;: -612.609, &quot;y&quot;: 100, &quot;z&quot;: -754.724, &quot;style&quot;: { &quot;skinColor&quot;: 16777215, &quot;skin&quot;: { &quot;skin_up&quot;: { &quot;skinColor&quot;: 14540253, &quot;side&quot;: 1, &quot;opacity&quot;: 1 }, &quot;skin_down&quot;: { &quot;skinColor&quot;: 14079702, &quot;side&quot;: 1, &quot;opacity&quot;: 1 }, &quot;skin_fore&quot;: { &quot;skinColor&quot;: 14079702, &quot;side&quot;: 1, &quot;opacity&quot;: 1, &quot;imgurl&quot;: &quot;../../img/images3D/1502887864239_2.jpg&quot; }, &quot;skin_behind&quot;: { &quot;skinColor&quot;: 14079702, &quot;side&quot;: 1, &quot;opacity&quot;: 1, &quot;imgurl&quot;: &quot;../../img/images3D/1502887864239_2.jpg&quot; }, &quot;skin_left&quot;: { &quot;skinColor&quot;: 14079702, &quot;side&quot;: 1, &quot;opacity&quot;: 1, &quot;imgurl&quot;: &quot;../../img/images3D/1502887864239_2.jpg&quot; }, &quot;skin_right&quot;: { &quot;skinColor&quot;: 14079702, &quot;side&quot;: 1, &quot;opacity&quot;: 1, &quot;imgurl&quot;: &quot;../../img/images3D/1502887864239_2.jpg&quot; } } }, &quot;showSortNub&quot;: 46, &quot;customType1&quot;: &quot;&quot;, &quot;customType2&quot;: &quot;&quot;, &quot;animation&quot;: &lt;span&gt;null&lt;/span&gt;, &quot;dbclickEvents&quot;: &lt;span&gt;null&lt;/span&gt;, &quot;rotation&quot;: [{ &quot;direction&quot;: &quot;x&quot;, &quot;degree&quot;: 0 }, { &quot;direction&quot;: &quot;y&quot;, &quot;degree&quot;: 0 }, { &quot;direction&quot;: &quot;z&quot;, &quot;degree&quot;: 0 }], &quot;thick&quot;: &lt;span&gt;null&lt;/span&gt;, &quot;scale&quot;: { &quot;x&quot;: 1, &quot;y&quot;: 1, &quot;z&quot;: 1 }, &quot;BindDevId&quot;: &lt;span&gt;null&lt;/span&gt;, &quot;BindDevName&quot;: &lt;span&gt;null&lt;/span&gt;, &quot;devInfo&quot;: &lt;span&gt;null&lt;/span&gt;, &quot;BindMeteId&quot;: &lt;span&gt;null&lt;/span&gt;, &quot;BindMeteName&quot;: &lt;span&gt;null&lt;/span&gt;&lt;span&gt; },
    { &lt;/span&gt;&quot;show&quot;: &lt;span&gt;true&lt;/span&gt;, &quot;castShadow&quot;: &lt;span&gt;false&lt;/span&gt;, &quot;name&quot;: &quot;doorRight_1&quot;, &quot;actionSign&quot;: &quot;doorRight&quot;, &quot;uuid&quot;: &quot;&quot;, &quot;objType&quot;: &quot;cube&quot;, &quot;width&quot;: 4, &quot;height&quot;: 190, &quot;length&quot;: 104, &quot;x&quot;: -553, &quot;y&quot;: 100, &quot;z&quot;: -755, &quot;style&quot;: { &quot;skinColor&quot;: 9095650, &quot;skin&quot;: { &quot;skin_up&quot;: { &quot;skinColor&quot;: 5325886, &quot;side&quot;: 1, &quot;opacity&quot;: 1 }, &quot;skin_down&quot;: { &quot;skinColor&quot;: 5325886, &quot;side&quot;: 1, &quot;opacity&quot;: 1 }, &quot;skin_fore&quot;: { &quot;skinColor&quot;: 5325886, &quot;side&quot;: 1, &quot;opacity&quot;: 1 }, &quot;skin_behind&quot;: { &quot;skinColor&quot;: 5325886, &quot;side&quot;: 1, &quot;opacity&quot;: 1 }, &quot;skin_left&quot;: { &quot;skinColor&quot;: 5325886, &quot;side&quot;: 1, &quot;opacity&quot;: 1, &quot;imgurl&quot;: &quot;../../img/3dImg/door_right.png&quot; }, &quot;skin_right&quot;: { &quot;skinColor&quot;: 5325886, &quot;side&quot;: 1, &quot;opacity&quot;: 1, &quot;imgurl&quot;: &quot;../../img/3dImg/door_left.png&quot; } } }, &quot;dbclickEvents&quot;: { &quot;obj_eventParamInfo&quot;: [{ &quot;name&quot;: &quot;&quot;, &quot;remark&quot;: &quot;&quot; }], &quot;obj_event&quot;: &quot;openRightDoor(runobj,function(){});&quot; }, &quot;showSortNub&quot;: 45, &quot;customType1&quot;: &quot;&quot;, &quot;customType2&quot;: &quot;&quot;, &quot;animation&quot;: &lt;span&gt;null&lt;/span&gt;, &quot;rotation&quot;: [{ &quot;direction&quot;: &quot;x&quot;, &quot;degree&quot;: 0 }, { &quot;direction&quot;: &quot;y&quot;, &quot;degree&quot;: 0 }, { &quot;direction&quot;: &quot;z&quot;, &quot;degree&quot;: 0 }], &quot;thick&quot;: &lt;span&gt;null&lt;/span&gt;, &quot;scale&quot;: { &quot;x&quot;: 1, &quot;y&quot;: 1, &quot;z&quot;: 1 }, &quot;BindDevId&quot;: &lt;span&gt;null&lt;/span&gt;, &quot;BindDevName&quot;: &lt;span&gt;null&lt;/span&gt;, &quot;devInfo&quot;: &lt;span&gt;null&lt;/span&gt;, &quot;BindMeteId&quot;: &lt;span&gt;null&lt;/span&gt;, &quot;BindMeteName&quot;: &lt;span&gt;null&lt;/span&gt;&lt;span&gt; },
    { &lt;/span&gt;&quot;show&quot;: &lt;span&gt;true&lt;/span&gt;, &quot;name&quot;: &quot;doorLeft_2&quot;, &quot;uuid&quot;: &quot;&quot;, &quot;actionSign&quot;: &quot;doorLeft&quot;, &quot;objType&quot;: &quot;cube&quot;, &quot;castShadow&quot;: &lt;span&gt;false&lt;/span&gt;, &quot;width&quot;: 4, &quot;height&quot;: 190, &quot;length&quot;: 104, &quot;x&quot;: -448, &quot;y&quot;: 100, &quot;z&quot;: -755, &quot;style&quot;: { &quot;skinColor&quot;: 9095650, &quot;skin&quot;: { &quot;skin_up&quot;: { &quot;skinColor&quot;: 5325886, &quot;side&quot;: 1, &quot;opacity&quot;: 1 }, &quot;skin_down&quot;: { &quot;skinColor&quot;: 5325886, &quot;side&quot;: 1, &quot;opacity&quot;: 1 }, &quot;skin_fore&quot;: { &quot;skinColor&quot;: 5325886, &quot;side&quot;: 1, &quot;opacity&quot;: 1 }, &quot;skin_behind&quot;: { &quot;skinColor&quot;: 5325886, &quot;side&quot;: 1, &quot;opacity&quot;: 1 }, &quot;skin_left&quot;: { &quot;skinColor&quot;: 5325886, &quot;side&quot;: 1, &quot;opacity&quot;: 1, &quot;imgurl&quot;: &quot;../../img/3dImg/door_left.png&quot; }, &quot;skin_right&quot;: { &quot;skinColor&quot;: 5325886, &quot;side&quot;: 1, &quot;opacity&quot;: 1, &quot;imgurl&quot;: &quot;../../img/3dImg/door_right.png&quot; } } }, &quot;dbclickEvents&quot;: { &quot;obj_eventParamInfo&quot;: [{ &quot;name&quot;: &quot;&quot;, &quot;remark&quot;: &quot;&quot; }], &quot;obj_event&quot;: &quot;openLeftDoor(runobj,function(){});&quot; }, &quot;showSortNub&quot;: 44, &quot;customType1&quot;: &quot;&quot;, &quot;customType2&quot;: &quot;&quot;, &quot;animation&quot;: &lt;span&gt;null&lt;/span&gt;, &quot;rotation&quot;: [{ &quot;direction&quot;: &quot;x&quot;, &quot;degree&quot;: 0 }, { &quot;direction&quot;: &quot;y&quot;, &quot;degree&quot;: 0 }, { &quot;direction&quot;: &quot;z&quot;, &quot;degree&quot;: 0 }], &quot;thick&quot;: &lt;span&gt;null&lt;/span&gt;, &quot;scale&quot;: { &quot;x&quot;: 1, &quot;y&quot;: 1, &quot;z&quot;: 1 }, &quot;BindDevId&quot;: &lt;span&gt;null&lt;/span&gt;, &quot;BindDevName&quot;: &lt;span&gt;null&lt;/span&gt;, &quot;devInfo&quot;: &lt;span&gt;null&lt;/span&gt;, &quot;BindMeteId&quot;: &lt;span&gt;null&lt;/span&gt;, &quot;BindMeteName&quot;: &lt;span&gt;null&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;添加36个货架之后，整个场景的帧率变成了14帧 这样的体验效果是非常不好的 &lt;/p&gt;&lt;p&gt;&lt;span&gt;　　第二课我们将详细讲解如何添加货物，货架容量管理、以及动态操作货物上下架 、厂房的温湿度 空调 通风 防火 消防定位等操作&lt;/span&gt;&lt;/p&gt;</description>
<pubDate>Sun, 26 Nov 2017 12:36:00 +0000</pubDate>
<dc:creator>魂断蓝桥666</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/yeyunfei/p/7899613.html</dc:identifier>
</item>
<item>
<title>通过出版一本案例方面的图书来包装自己（实施篇） - hsm_computer</title>
<link>http://www.cnblogs.com/JavaArchitect/p/7900218.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/JavaArchitect/p/7900218.html</guid>
<description>&lt;p&gt;    上周我写了一篇博文，&lt;a href=&quot;http://www.cnblogs.com/JavaArchitect/p/7859622.html&quot; target=&quot;_blank&quot;&gt;在著名出版社出版书，你也行——记录我写书出版的经历和体会&lt;/a&gt;，承蒙管理员抬爱，收获了2000+的阅读量，也承蒙大家的厚爱，一度进入“最多推荐”栏。本文将进一步告诉大家如何写出第一本属于自己的图书。&lt;/p&gt;


&lt;p&gt;    要出就找国内比较出名的计算机类出版社，清华出版社，人民邮电出版社，电子工业出版社和机械工业出版社，在上文里，已经给出了如何申请选题的大致步骤。这里要大声说：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1226172/201711/1226172-20171126171016468-901173641.png&quot; alt=&quot;&quot; width=&quot;169&quot; height=&quot;128&quot;/&gt;&lt;/p&gt;
&lt;p&gt;    其实在这些著名出版社出版图书的难度一点也不比在其它出版社高，而且，当大家通过如下形式的邮件表达出想写书的愿望时，编辑一般会联系大家。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1226172/201711/1226172-20171126171601921-1385522105.png&quot; alt=&quot;&quot; width=&quot;311&quot; height=&quot;232&quot;/&gt;&lt;/p&gt;
&lt;p&gt;    我接触过不少人，他们是通过图书公司的人和编辑联系，这也是一条途径，本人也做过。其实和图书公司联系的话，出书的要求并不会降低多少，该做的也一定得做，而且他们可能还会从大家应得的稿酬中抽取一点作为盈利。&lt;/p&gt;
&lt;p&gt;     图书公司对大家的帮助可能就有如下两个，第一，可能他们相关书籍做得很多，如果新手出书，他们可能会起一定的指导作用，比如告诉大家目录该怎么写，文字措辞又该怎么写。第二，如果大家自己联系编辑，可能列的选题未必能和编辑的匹配上，但图书公司认识很多编辑，大家列的选题如果一位编辑不认可，他们还能给其它的编辑。&lt;/p&gt;
&lt;p&gt;    讲那么多了，这里给大家的建议是：&lt;/p&gt;
&lt;p&gt;    1 如果可以，尽可能自己联系编辑，而且是联系比较好的出版社的编辑。本人在工作2年后，以当时的能力和编辑联系时，选题就能通过，所以这个难度不大。&lt;/p&gt;
&lt;p&gt;    2 如果你的选题方向编辑不认可，或者你列的大纲编辑通不过，可以先和编辑沟通协调，因为一般一位编辑认为做不了的选题，其它编辑未必能通过。&lt;/p&gt;
&lt;p&gt;    3 如果你自己和编辑再三协调下来，选题还是没能通过，抱歉可能我直说，你的技术可能达到了出书的能力，但出书的技能有待提高，这时大家可以找个图书公司，把选题报个多位编辑看看。&lt;/p&gt;
&lt;p&gt;    4 出书不要钱，相反出版社会给钱，所以如果大家的能力够，别掏钱出书。&lt;/p&gt;


&lt;p&gt;    对于新手作者而言，建议写本案例类的，比如xx案例指南，这样的形式是代码+说明，相对其它书而言，无需加入过多的对技能的描述，也无需过多引入自己的经验体会，所以这类书难度是最低的。&lt;/p&gt;
&lt;p&gt;    在写书前，编辑会让大家填份选题申请单，格式如下。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1226172/201711/1226172-20171126174021000-806542105.png&quot; alt=&quot;&quot; width=&quot;523&quot; height=&quot;323&quot;/&gt;&lt;/p&gt;
&lt;p&gt;    编辑就凭这个来判断大家所报的选题值不值得写。&lt;/p&gt;
&lt;p&gt;    刚才说了，建议新手作者写案例书，这些书一般可以分十几章，第一章介绍这个技术，包括基本语法，应用背景，开发环境，第二章介绍这个技术的常见用法，比如之前我写过本jsp网络编程方面的书，第一章写的是jsp语法和网络编程的基础知识，第二章写的是jsp连jdbc的常见用法和jsp+javabean+DB等的常规方式。后面就是一章一个案例。&lt;/p&gt;
&lt;p&gt;    为了提升大家图书的出版概率，大家可以选些当前比较热门的技术来写案例书，比如Python，或基于Spring MVC+mybatis的架构，或Spring Boot，我就拿我比较熟悉的领域来举例，请原谅我的孤陋寡闻，大家也可以选择自己熟悉的热门技术。&lt;/p&gt;
&lt;p&gt;    而且，选用的案例中，可以尽量多包含些热门案例，比如抢红包等，也可以尽量多用些比较热门的技术，比如Redis缓存或大数据等，同时尽量少用一些不包含热门技术需求也早被被人做滥的比较low的系统来凑数。&lt;/p&gt;


&lt;p&gt;    在合同里，大家能谈的估计也就这两件事。首先大家别对稿酬抱有太大的希望，一来新手作家写出的书未必有太多的销量，二来这书还未必写完。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1226172/201711/1226172-20171126181150734-189203978.png&quot; alt=&quot;&quot; width=&quot;180&quot; height=&quot;143&quot;/&gt;&lt;/p&gt;
&lt;p&gt;    大家先别惊愕，我当时一个一批志同道合的人（10多人）一起相约写书，最后也就两人成功出版。&lt;/p&gt;
&lt;p&gt;    所以关于稿费，一般来说可以接受销售数量的7%，或者可以用阶梯稿酬的方式。&lt;/p&gt;
&lt;p&gt;    5000册以下7%，5000到10000册部分10%，10000到20000册部分15%，20000以上，20%，这样编辑也能接受，而且也能给自己留个念想。&lt;/p&gt;
&lt;p&gt;    关于交稿时间，一般400页的书最多写8个月，600页的书最多10个月，800页的书最多1年。当然如果抓紧的话，本人有过6个月完成400页书的经历。话说回来，如果超过这个时间书还没写好，这书估计也写不好了。&lt;/p&gt;


&lt;p&gt;    签订好合同后，大家可以通过写一个案例的章节来实践下编辑的要求，具体做法如下。   &lt;/p&gt;
&lt;p&gt;    1 先准备一个案例，大家可以下载一个甚至买一个别人的案例，但千万别就这样用了，一定得在理解的基础上按自己的思路再写一个，要求做到界面美观，具有基本的功能。&lt;/p&gt;
&lt;p&gt;    2 写稿件时，可以采用“分步骤描述”和“总分总”的写作思路，比如在描述实现步骤时，可以写，“我们可以按如下的思路完成哲这个系统，第一步，定义界面，第二步，开发数据库连接模块，第三步，开发xx模块”。&lt;/p&gt;
&lt;p&gt;    在描述代码时，可以先“总体介绍一下”，比如“这段代码实现了xx功能”，再“分步详解”，比如“在xx行，我们实现了xx功能，再后面的xx行，我们又实现了xx功能”，最后再“总结一下”，比如“回顾一下，这段代码里有xx好的技术，xxx”&lt;/p&gt;
&lt;p&gt;    3 如果大家用心写，编辑看了第一个章节不会提出“全盘推翻”性的要求，可能会在措辞和格式上提些要求，至于写作水平，每个作者不一样，只要过了基本底线，编辑一般不会提太多的要求。&lt;/p&gt;
&lt;p&gt;    但在这个阶段是最艰难的，有可能和编辑来来回回地沟通，有些人就因为怕麻烦，然后工作再一忙，看到编辑修改要求又多，就直接放弃了。但过了这关，后继就一马平川了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1226172/201711/1226172-20171126193203609-2087931252.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt;    在之前的文章里，不少朋友回复说没时间写。确实，家庭工作更重要，如果衡量下来确实没时间，那应当以家庭和事业为重。不过话说回来，本人就是靠写书治好了本人的懒癌。&lt;/p&gt;
&lt;p&gt;    我一直是早上8点半出门，晚上一般7，8点到家，有时晚上还得和美国那边开会。所以之前工作之余也就睡了，或者看手机看电视看连续剧。&lt;/p&gt;
&lt;p&gt;    自从我写了&lt;a href=&quot;https://baike.baidu.com/item/Java%20Web%E8%BD%BB%E9%87%8F%E7%BA%A7%E5%BC%80%E5%8F%91%E9%9D%A2%E8%AF%95%E6%95%99%E7%A8%8B/22038502&quot;&gt;java web轻量级开发面试教程&lt;/a&gt;之后，早上也早起了（最晚6点半，一般6点），晚上只要吃得消就写，哪怕就写半小时，周末写一天。我的感受是，只要硬下心开始写，写出兴奋感之后，想停都难，所以本人的懒癌就好了。好了之后，工作生活的感受也都焕然一新了。&lt;/p&gt;
&lt;p&gt;    &lt;img src=&quot;https://images2018.cnblogs.com/blog/1226172/201711/1226172-20171126194149984-917015951.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;    本人最近在写第二本书，在写书途中，我的孩子也出生了，目前估计比大多数人都忙，但依然有时间写书。我的感受是，只要肯做，总能挤出时间，比如上下班途中思考文字，头脑累的时候就做些修改代码的体力活。&lt;/p&gt;
&lt;p&gt;    对于这里推荐给大家写的案例书而言，我们来计算下写作时间。我们先假设一天写半小时，那么5个工作日是2.5小时，周末也2.5小时，一共一周5个小时。其实这个时间不算多，一般我见到的作者一周都能写8个小时。&lt;/p&gt;
&lt;p&gt;    一本书算12个章节，大概500页，两个理论性章节估计1个月能写完，关于案例章节，对于新手作者，刚开始2周找案例并改写，1周写文字，也就是说3周一个章节，编辑来了修改意见可以边写后继章节边改，这样10个章节30周，也就7个半月，其实等写熟练了一月能写2个章节，但就满打满算，最多9个月能完成一本，这还是建立在一周5个小时写作的基础上的。&lt;/p&gt;
&lt;p&gt;    总之，只要开始写了，并坚持下来了，想停都难。只要坚持，就有收获。本人坚持写了几本，最近的&lt;a href=&quot;https://baike.baidu.com/item/Java%20Web%E8%BD%BB%E9%87%8F%E7%BA%A7%E5%BC%80%E5%8F%91%E9%9D%A2%E8%AF%95%E6%95%99%E7%A8%8B/22038502&quot;&gt;java web轻量级开发面试教程&lt;/a&gt;至少有人肯盗版了。&lt;/p&gt;
&lt;p&gt;    &lt;img src=&quot;https://images2018.cnblogs.com/blog/1226172/201711/1226172-20171126195238000-328497275.png&quot; alt=&quot;&quot; width=&quot;240&quot; height=&quot;201&quot;/&gt;&lt;/p&gt;
&lt;p&gt;    被盗版影响到我版权收入，这我很不开心，但话说回来，如果我的书一般，盗版商还懒得盗版我。&lt;/p&gt;
&lt;p&gt;    大家坚持下来，至少能写出“盗版商肯盗版”的图书。&lt;/p&gt;
&lt;p&gt;    &lt;img src=&quot;https://images2018.cnblogs.com/blog/1226172/201711/1226172-20171126195541968-1785897146.png&quot; alt=&quot;&quot; width=&quot;304&quot; height=&quot;157&quot;/&gt;&lt;/p&gt;


&lt;p&gt;    有不少人愿意写书，因为这对找工作帮助很大，但不是每个人都能写完，倒不是能力问题，而是没毅力。这里给大家做个趣味性的测试，如果大家能完成，估计写书就不难了。&lt;/p&gt;
&lt;p&gt;    测试要求，一周在博客园里写两篇原创性文章，文章题材不限，但至少要达到“能申请首页”的水平。真的开始写书后，工作量大概是这的两倍。如果大家能坚持个1个月，估计至少在毅力方面就没问题了。&lt;/p&gt;
&lt;p&gt;    &lt;img src=&quot;https://images2018.cnblogs.com/blog/1226172/201711/1226172-20171126195930468-579548059.png&quot; alt=&quot;&quot; width=&quot;339&quot; height=&quot;315&quot;/&gt;&lt;/p&gt;

&lt;p&gt;最后回答一位朋友关于翻译的问题。&lt;/p&gt;
&lt;p&gt;    最近我也想做翻译，也找了不少出版社，但都没翻译的活了，我也不知道为什么。&lt;/p&gt;
&lt;p&gt;    如果能做，这绝对是个锻炼写作的好机会，因为别人已经把意思写清楚了，我们只要翻译成中文。不过不建议在没出版过书的基础上就做翻译，因为要把原文翻译得活灵活现很难，但如果照直翻译了，可能会造成除了你之外没人能懂的尴尬局面了。这只是我个人的看法。&lt;/p&gt;





</description>
<pubDate>Sun, 26 Nov 2017 12:07:00 +0000</pubDate>
<dc:creator>hsm_computer</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/JavaArchitect/p/7900218.html</dc:identifier>
</item>
<item>
<title>分布式事物管理以及解决方案 - Hi.笨蛋</title>
<link>http://www.cnblogs.com/wchxj/p/7899712.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/wchxj/p/7899712.html</guid>
<description>&lt;h2&gt;1、什么是分布式事务&lt;/h2&gt;
&lt;p&gt;分布式事务就是指事务的参与者、支持事务的服务器、资源服务器以及事务管理器分别位于不同的分布式系统的不同节点之上。以上是百度百科的解释，简单的说，就是一次大的操作由不同的小操作组成，这些小的操作分布在不同的服务器上，且属于不同的应用，分布式事务需要保证这些小操作要么全部成功，要么全部失败。本质上来说，分布式事务就是为了保证不同数据库的数据一致性。&lt;/p&gt;
&lt;h2&gt;2、分布式事务的产生的原因&lt;/h2&gt;
&lt;h3&gt;2.1、数据库分库分表&lt;/h3&gt;
&lt;p&gt;当数据库单表一年产生的数据超过1000W，那么就要考虑分库分表，具体分库分表的原理在此不做解释，以后有空详细说，简单的说就是原来的一个数据库变成了多个数据库。这时候，如果一个操作既访问01库，又访问02库，而且要保证数据的一致性，那么就要用到分布式事务。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2015.cnblogs.com/blog/536593/201612/536593-20161218181125683-304158655.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;2.2、应用SOA化&lt;/h3&gt;
&lt;p&gt;所谓的SOA化，就是业务的服务化。比如原来单机支撑了整个电商网站，现在对整个网站进行拆解，分离出了订单中心、用户中心、库存中心。对于订单中心，有专门的数据库存储订单信息，用户中心也有专门的数据库存储用户信息，库存中心也会有专门的数据库存储库存信息。这时候如果要同时对订单和库存进行操作，那么就会涉及到订单数据库和库存数据库，为了保证数据一致性，就需要用到分布式事务。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2015.cnblogs.com/blog/536593/201612/536593-20161218181147714-950616913.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;以上两种情况表象不同，但是本质相同，都是因为要操作的数据库变多了！&lt;/p&gt;
&lt;h2&gt;3、事务的ACID特性&lt;/h2&gt;
&lt;h3&gt;3.1、原子性（A）&lt;/h3&gt;
&lt;p&gt;所谓的原子性就是说，在整个事务中的所有操作，要么全部完成，要么全部不做，没有中间状态。对于事务在执行中发生错误，所有的操作都会被回滚，整个事务就像从没被执行过一样。&lt;/p&gt;
&lt;h3&gt;3.2、一致性（C）&lt;/h3&gt;
&lt;p&gt;事务的执行必须保证系统的一致性，就拿转账为例，A有500元，B有300元，如果在一个事务里A成功转给B50元，那么不管并发多少，不管发生什么，只要事务执行成功了，那么最后A账户一定是450元，B账户一定是350元。&lt;/p&gt;
&lt;h3&gt;3.3、隔离性（I）&lt;/h3&gt;
&lt;p&gt;所谓的隔离性就是说，事务与事务之间不会互相影响，一个事务的中间状态不会被其他事务感知。&lt;/p&gt;
&lt;h3&gt;3.4、持久性（D）&lt;/h3&gt;
&lt;p&gt;所谓的持久性，就是说一单事务完成了，那么事务对数据所做的变更就完全保存在了数据库中，即使发生停电，系统宕机也是如此。&lt;/p&gt;
&lt;h2&gt;4、分布式事务的应用场景&lt;/h2&gt;
&lt;h3&gt;4.1、支付&lt;/h3&gt;
&lt;p&gt;最经典的场景就是支付了，一笔支付，是对买家账户进行扣款，同时对卖家账户进行加钱，这些操作必须在一个事务里执行，要么全部成功，要么全部失败。而对于买家账户属于买家中心，对应的是买家数据库，而卖家账户属于卖家中心，对应的是卖家数据库，对不同数据库的操作必然需要引入分布式事务。&lt;/p&gt;
&lt;h3&gt;4.2、在线下单&lt;/h3&gt;
&lt;p&gt;买家在电商平台下单，往往会涉及到两个动作，一个是扣库存，第二个是更新订单状态，库存和订单一般属于不同的数据库，需要使用分布式事务保证数据一致性。&lt;/p&gt;
&lt;h2&gt;5、常见的分布式事务解决方案&lt;/h2&gt;
&lt;h3&gt;5.1、基于XA协议的两阶段提交&lt;/h3&gt;
&lt;p&gt;XA是一个分布式事务协议，由Tuxedo提出。XA中大致分为两部分：事务管理器和本地资源管理器。其中本地资源管理器往往由数据库实现，比如Oracle、DB2这些商业数据库都实现了XA接口，而事务管理器作为全局的调度者，负责各个本地资源的提交和回滚。XA实现分布式事务的原理如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2015.cnblogs.com/blog/536593/201612/536593-20161218181211120-902682561.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;总的来说，XA协议比较简单，而且一旦商业数据库实现了XA协议，使用分布式事务的成本也比较低。但是，XA也有致命的缺点，那就是性能不理想，特别是在交易下单链路，往往并发量很高，XA无法满足高并发场景。XA目前在商业数据库支持的比较理想，在mysql数据库中支持的不太理想，mysql的XA实现，没有记录prepare阶段日志，主备切换回导致主库与备库数据不一致。许多nosql也没有支持XA，这让XA的应用场景变得非常狭隘。&lt;/p&gt;
&lt;h3&gt;5.2、消息事务+最终一致性&lt;/h3&gt;
&lt;p&gt;所谓的消息事务就是基于消息中间件的两阶段提交，本质上是对消息中间件的一种特殊利用，它是将本地事务和发消息放在了一个分布式事务里，保证要么本地操作成功成功并且对外发消息成功，要么两者都失败，开源的RocketMQ就支持这一特性，具体原理如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2015.cnblogs.com/blog/536593/201612/536593-20161218181229464-1268501550.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;1、A系统向消息中间件发送一条预备消息&lt;br/&gt;2、消息中间件保存预备消息并返回成功&lt;br/&gt;3、A执行本地事务&lt;br/&gt;4、A发送提交消息给消息中间件&lt;/p&gt;
&lt;p&gt;通过以上4步完成了一个消息事务。对于以上的4个步骤，每个步骤都可能产生错误，下面一一分析：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;步骤一出错，则整个事务失败，不会执行A的本地操作&lt;/li&gt;
&lt;li&gt;步骤二出错，则整个事务失败，不会执行A的本地操作&lt;/li&gt;
&lt;li&gt;步骤三出错，这时候需要回滚预备消息，怎么回滚？答案是A系统实现一个消息中间件的回调接口，消息中间件会去不断执行回调接口，检查A事务执行是否执行成功，如果失败则回滚预备消息&lt;/li&gt;
&lt;li&gt;步骤四出错，这时候A的本地事务是成功的，那么消息中间件要回滚A吗？答案是不需要，其实通过回调接口，消息中间件能够检查到A执行成功了，这时候其实不需要A发提交消息了，消息中间件可以自己对消息进行提交，从而完成整个消息事务&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;基于消息中间件的两阶段提交往往用在高并发场景下，将一个分布式事务拆成一个消息事务（A系统的本地操作+发消息）+B系统的本地操作，其中B系统的操作由消息驱动，只要消息事务成功，那么A操作一定成功，消息也一定发出来了，这时候B会收到消息去执行本地操作，如果本地操作失败，消息会重投，直到B操作成功，这样就变相地实现了A与B的分布式事务。原理如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2015.cnblogs.com/blog/536593/201612/536593-20161218181253136-1621713749.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;虽然上面的方案能够完成A和B的操作，但是A和B并不是严格一致的，而是最终一致的，我们在这里牺牲了一致性，换来了性能的大幅度提升。当然，这种玩法也是有风险的，如果B一直执行不成功，那么一致性会被破坏，具体要不要玩，还是得看业务能够承担多少风险。&lt;/p&gt;
&lt;h3&gt;5.3、TCC编程模式&lt;/h3&gt;
&lt;p&gt;所谓的TCC编程模式，也是两阶段提交的一个变种。TCC提供了一个编程框架，将整个业务逻辑分为三块：Try、Confirm和Cancel三个操作。以在线下单为例，Try阶段会去扣库存，Confirm阶段则是去更新订单状态，如果更新订单失败，则进入Cancel阶段，会去恢复库存。总之，TCC就是通过代码人为实现了两阶段提交，不同的业务场景所写的代码都不一样，复杂度也不一样，因此，这种模式并不能很好地被复用。&lt;/p&gt;
&lt;h2&gt;6、总结&lt;/h2&gt;
&lt;p&gt;分布式事务，本质上是对多个数据库的事务进行统一控制，按照控制力度可以分为：不控制、部分控制和完全控制。不控制就是不引入分布式事务，部分控制就是各种变种的两阶段提交，包括上面提到的消息事务+最终一致性、TCC模式，而完全控制就是完全实现两阶段提交。部分控制的好处是并发量和性能很好，缺点是数据一致性减弱了，完全控制则是牺牲了性能，保障了一致性，具体用哪种方式，最终还是取决于业务场景。作为技术人员，一定不能忘了技术是为业务服务的，不要为了技术而技术，针对不同业务进行技术选型也是一种很重要的能力！&lt;/p&gt;
</description>
<pubDate>Sun, 26 Nov 2017 10:05:00 +0000</pubDate>
<dc:creator>Hi.笨蛋</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/wchxj/p/7899712.html</dc:identifier>
</item>
<item>
<title>如何编写单元测试-基于Spring - atheva</title>
<link>http://www.cnblogs.com/lizo/p/7899706.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/lizo/p/7899706.html</guid>
<description>&lt;p data-source-line=&quot;2&quot;&gt;首先单元测试真的算是一种“脏活累活”，但是我个人感觉还是有必要，至少本人最近开始写单元测试后还是能发现一些“bug”的。&lt;/p&gt;

&lt;p data-source-line=&quot;4&quot;&gt;单元测试的要求...网上很多。下面来分享一下我是如何写单元测试。首先我们项目一般都是MVC分层的，而单元测试主要是在Dao层和Service层上进行编写。从项目结构上来说，Service层是依赖Dao层的，但是从单元测试角度，对某个Service进行单元的时候，他所有依赖的类都应该进行Mock。而Dao层单元测试就比较简单了（下面Dao层就以Jdbc为例子），只依赖数据库中的数据。&lt;/p&gt;

&lt;p data-source-line=&quot;6&quot;&gt;dao层单元测试肯定要是连数据库的，但是不需要本地起一个Mysql，可以使用H2内存数据库来做单测就足够了。&lt;/p&gt;
&lt;h2 id=&quot;实战&quot; data-source-line=&quot;8&quot;&gt;实战&lt;/h2&gt;
&lt;p data-source-line=&quot;9&quot;&gt;首先给一个通用模板吧，就是所有DAO层单元测试都会用到的，注：ORM使用Mybatis&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
@RunWith(SpringRunner.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;)
@ContextConfiguration(classes &lt;/span&gt;= {XXXDaoTest.MybatisScanConfiguration.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;})
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; XXXDaoTest {

    @MapperScan({&lt;/span&gt;&quot;com.xxx.xxx.mapper&quot;&lt;span&gt;})
    @TestConfiguration
    @EnableTransactionManagement
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; MybatisScanConfiguration {

        @Bean
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; XXXDaoTest xxxDao() {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; XXXDaoImpl();
        }

        @Bean
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; DataSource h2DataSource() {

            EmbeddedDatabaseBuilder builder &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; EmbeddedDatabaseBuilder();
            EmbeddedDatabase database &lt;/span&gt;=&lt;span&gt; builder.setType(EmbeddedDatabaseType.H2)
                    .addScript(&lt;/span&gt;&quot;classpath:/xxx/init_table.sql&quot;) &lt;span&gt;//&lt;/span&gt;&lt;span&gt;启动时初始化建表语句&lt;/span&gt;
&lt;span&gt;                    .build();
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; database;
        }

        @Bean
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; SqlSessionFactory sqlSessionFactory(DataSource dataSource) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
            &lt;/span&gt;&lt;span&gt;final&lt;/span&gt; SqlSessionFactoryBean sessionFactory = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; SqlSessionFactoryBean();
            sessionFactory.setDataSource(dataSource);
            PathMatchingResourcePatternResolver resolver &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; PathMatchingResourcePatternResolver();
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;加载所有的sql mapper文件&lt;/span&gt;
            Resource[] mapperLocations = resolver.getResources(&quot;classpath:com/xxx/xxx/XXXXMapper.xml&quot;&lt;span&gt;);
            sessionFactory.setMapperLocations(mapperLocations);
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; sessionFactory.getObject();
        }

        @Bean
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; PlatformTransactionManager platformTransactionManager(DataSource dataSource) {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; DataSourceTransactionManager(dataSource);
        }

        @Bean
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; JdbcTemplate jdbcTemplate(DataSource dataSource) {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; JdbcTemplate(dataSource);
        }
    }
    
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; clearAll() {
        jdbcTemplate.execute(&lt;/span&gt;&quot;DELETE FROM XXX&quot;&lt;span&gt;);
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p data-source-line=&quot;63&quot;&gt;其中的一些需要稍微修改的，我使用“XXX”或者“xxx”，如果配过Spring的肯定知道怎么弄。其中init_table.sql就是用来创建数据库表的，就不列出来的，下面需要注意的地方：&lt;/p&gt;
&lt;ol data-source-line=&quot;64&quot;&gt;&lt;li&gt;H2 DataBase有些语法是不支持的，例如 insert ignore，还有类似在创建数据库时候&quot;CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP&quot;&lt;/li&gt;
&lt;li&gt;如果一些sql是Mapper不提供的，那么可以使用jdbcTemplate来执行，例如上面的clearAll()方法&lt;/li&gt;
&lt;li&gt;每次单元测试执行完后，建议删除当前单元测试中使用到的表&lt;/li&gt;
&lt;li&gt;如果当前dao层存在其他依赖，其实是可以mock的（可以参考后面Service层的单元测试）&lt;/li&gt;
&lt;li&gt;如果你看到奇怪的类或者方法，不要奇怪，是我可能没脱敏&lt;/li&gt;
&lt;/ol&gt;&lt;p data-source-line=&quot;69&quot;&gt;通用模板写好以后，就可以按照不同情况来写单测了，想想是不是很开心啊&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt; @Test
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; testUpdatexxx() {
        clearAll();
        Long testUserId &lt;/span&gt;= 1L&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;1.当数据不存在的时候，返回0&lt;/span&gt;
        &lt;span&gt;int&lt;/span&gt; i = xxxDao.updateXxx(testUserId,1&lt;span&gt;);
        Assert.assertTrue(i &lt;/span&gt;== 0&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2.如果存在记录,状态是已经完成 返回0&lt;/span&gt;
        Domain domain = createBy(testUserId, 0&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;插入一条数据&lt;/span&gt;
&lt;span&gt;        mapper.insertSelective(domain);
        Assert.assertTrue(xxxDao.updateXxx(testUserId,&lt;/span&gt;1) == 0&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;3.如果存在记录,状态是未完成 返回1&lt;/span&gt;
&lt;span&gt;        ....

    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p data-source-line=&quot;89&quot;&gt;说实话，Service层的单测是最麻烦的，特别是那种超级大方法。Service层的单元测试就是主要Mock其他依赖Bean来完成各种逻辑的判断。&lt;/p&gt;
&lt;h2 id=&quot;实战-2&quot; data-source-line=&quot;90&quot;&gt;实战&lt;/h2&gt;
&lt;p data-source-line=&quot;91&quot;&gt;还是先给一个模板&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
@RunWith(SpringRunner.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;)
@ContextConfiguration(classes &lt;/span&gt;= NeedTestService.Config.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; NeedTestServiceTest {

    @TestConfiguration
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Config {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;这里直接创建一个待测试的类&lt;/span&gt;
&lt;span&gt;        @Bean
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; NeedTestService needTestService() {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; NeedTestService();
        }
    }
    
    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;
     * Mock掉依赖的Bean
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    @MockBean
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; X1Dao x1Dao;

    @MockBean
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; X1Service x1Service;

 
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;这里是Autowired需要测试的类&lt;/span&gt;
&lt;span&gt;    @Autowired
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; NeedTestService needTestService;
    
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p data-source-line=&quot;122&quot;&gt;通用模板在上面，当然，遇到恶心的类，Mock十几个Bean也是有可能的。 下面就开始开心的写单元测试的了，例如&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
&lt;span&gt; @Test
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; testCalculateUserClaims1() {
        Long testUserId &lt;/span&gt;= 1L&lt;span&gt;;
        Date transTime &lt;/span&gt;= DateUtil.getStartDate(&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Date());
        given(x1Dao.insertInitIgnore(testUserId, transTime)).willReturn(&lt;/span&gt;1&lt;span&gt;);

        List&lt;/span&gt;&amp;lt;X2&amp;gt; list =&lt;span&gt; Lists.newArrayList();
        list.addAll(createTenderCell(&lt;/span&gt;1L, &quot;100.00&quot;, 10&lt;span&gt;));
        list.addAll(createTenderCell(&lt;/span&gt;2L, &quot;200.00&quot;, 5&lt;span&gt;));
        Collections.shuffle(list);
        given(x1Dao.selectxxx(testUserId, transTime)).willReturn(list);

        
        ... 把改情况下 各种依赖的方法调用返回mock出来，

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;这里直接调用被测试的方法&lt;/span&gt;
        Result result =&lt;span&gt; needTestService.needTestMethod(...)
        Assert.assertTrue(result &lt;/span&gt;!= &lt;span&gt;null&lt;/span&gt;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;... 省略掉各种 Assert.&lt;/span&gt;
&lt;span&gt;       
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p data-source-line=&quot;148&quot;&gt;当然，这仅仅是一种情况，还有各种情况需要您进行测试，good luck！&lt;/p&gt;

&lt;p data-source-line=&quot;150&quot;&gt;我也是最近才开始写单元测试的，虽然很无脑，但是我个人还是觉得有必要的，一些很低级的错误至少能找出来(如果你稍微认真的写，而不是敷衍)。这样总比在Code Review的时候被指出来要好很多吧。而且写单元测试也算是一种休息吧！&lt;/p&gt;
</description>
<pubDate>Sun, 26 Nov 2017 10:04:00 +0000</pubDate>
<dc:creator>atheva</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/lizo/p/7899706.html</dc:identifier>
</item>
<item>
<title>项目实战4—haproxy 负载均衡和ACL控制 - 阿龙along</title>
<link>http://www.cnblogs.com/along21/p/7873998.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/along21/p/7873998.html</guid>
<description>
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1216496/201711/1216496-20171121164523977-1483487077.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; haproxy实现高级负载均衡实战&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　环境：随着公司业务的发展，公司负载均衡服务已经实现四层负载均衡，但业务的复杂程度提升，公司要求把mobile手机站点作为单独的服务提供，不在和pc站点一起提供服务，此时需要做7层规则负载均衡，运维总监要求，能否用一种服务同既能实现七层负载均衡，又能实现四层负载均衡，并且性能高效，配置管理容易，而且还是开源。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;总项目流程图&lt;/strong&gt;，详见&lt;a href=&quot;http://www.cnblogs.com/along21/p/7435612.html&quot; target=&quot;_blank&quot;&gt;http://www.cnblogs.com/along21/p/7435612.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;实验前准备&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;① 两台服务器都使用yum 方式安装haproxy 和 keepalived 服务&lt;/p&gt;
&lt;p&gt;yum -y install haproxy&lt;/p&gt;
&lt;p&gt;yum -y install keepalived&lt;/p&gt;
&lt;p&gt;② iptables -F &amp;amp;&amp;amp; setenforing 清空防火墙策略，关闭selinux&lt;/p&gt;

&lt;h2&gt;&lt;span&gt;实战一：实现基于&lt;span&gt;Haproxy+Keepalived&lt;/span&gt;负载均衡高可用架构&lt;/span&gt;&lt;/h2&gt;
&lt;h3&gt;&lt;span&gt;1、环境准备：&lt;/span&gt;&lt;/h3&gt;
&lt;div&gt; 
&lt;table border=&quot;0&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody readability=&quot;4&quot;&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot;&gt;
&lt;p&gt;机器名称&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;146&quot;&gt;
&lt;p&gt;IP配置&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;85&quot;&gt;
&lt;p&gt;服务角色&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;95&quot;&gt;
&lt;p&gt;备注&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td valign=&quot;top&quot;&gt;
&lt;p&gt;haproxy-server-master&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;146&quot;&gt;
&lt;p&gt;VIP：172.17.100.100&lt;/p&gt;
&lt;p&gt;DIP：172.17.1.6&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;85&quot;&gt;
&lt;p&gt;负载均衡器&lt;/p&gt;
&lt;p&gt;主服务器&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;95&quot;&gt;
&lt;p&gt;配置keepalived&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td valign=&quot;top&quot;&gt;
&lt;p&gt;haproxy-server-backup&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;146&quot;&gt;
&lt;p&gt;VIP：172.17.100.100&lt;/p&gt;
&lt;p&gt;DIP：172.17.11.11&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;85&quot;&gt;
&lt;p&gt;负载服务器&lt;/p&gt;
&lt;p&gt;从服务器&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;95&quot;&gt;
&lt;p&gt;配置keepalived&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot;&gt;
&lt;p&gt;rs01&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;146&quot;&gt;
&lt;p&gt;RIP：172.17.1.7&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;85&quot;&gt;
&lt;p&gt;后端服务器&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;95&quot;&gt;

&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot;&gt;
&lt;p&gt;rs02&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;146&quot;&gt;
&lt;p&gt;RIP：172.17.22.22&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;85&quot;&gt;
&lt;p&gt;后端服务器&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;95&quot;&gt;

&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;

&lt;h3&gt;&lt;span&gt;2、先配置好keepalived的主从&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;（1）在&lt;span&gt;&lt;strong&gt;haproxy-server-master 上&lt;/strong&gt;：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;vim /etc/keepalived/keepalived.conf&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
! Configuration File &lt;span&gt;for&lt;/span&gt;&lt;span&gt; keepalived
global_defs {
   notification_email {
        root@localhost
   }
   notification_email_from root@along.com
   smtp_server &lt;/span&gt;&lt;span&gt;127.0&lt;/span&gt;.&lt;span&gt;0.1&lt;/span&gt;&lt;span&gt;
   smtp_connect_timeout &lt;/span&gt;&lt;span&gt;30&lt;/span&gt;&lt;span&gt;
   router_id keepalived_haproxy
}

vrrp_script chk_haproxy {   #定义一个脚本，发现haproxy服务关闭就降优先级
        script &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;killall -0 haproxy&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        interval &lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;
        fall &lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;
        rise &lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;
        weight &lt;/span&gt;-&lt;span&gt;4&lt;/span&gt;&lt;span&gt;
}

vrrp_instance VI_1 {
    state MASTER
    interface eth0
    virtual_router_id &lt;/span&gt;&lt;span&gt;191&lt;/span&gt;&lt;span&gt;
    priority &lt;/span&gt;&lt;span&gt;100&lt;/span&gt;&lt;span&gt;
    advert_int &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;
    authentication {
        auth_type PASS
        auth_pass along
    }
    virtual_ipaddress {
        &lt;/span&gt;&lt;span&gt;172.17&lt;/span&gt;.&lt;span&gt;100.100&lt;/span&gt;&lt;span&gt;
    }
track_script {   #执行脚本
chk_haproxy
}
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;service keepalived start 开启keepalived服务&lt;/p&gt;
&lt;p&gt;开启服务后可以查看，VIP已经生成&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1216496/201711/1216496-20171121164410196-131987557.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;（2）在&lt;span&gt;&lt;strong&gt;haproxy-server-master 从上&lt;/strong&gt;：只需把主换成从，优先级降低就好&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;vim /etc/keepalived/keepalived.conf&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
! Configuration File &lt;span&gt;for&lt;/span&gt;&lt;span&gt; keepalived
global_defs {
   notification_email {
        root@localhost
   }
   notification_email_from root@along.com
   smtp_server &lt;/span&gt;&lt;span&gt;127.0&lt;/span&gt;.&lt;span&gt;0.1&lt;/span&gt;&lt;span&gt;
   smtp_connect_timeout &lt;/span&gt;&lt;span&gt;30&lt;/span&gt;&lt;span&gt;
   router_id keepalived_haproxy
}


vrrp_instance VI_1 {
    state BACKUP
    interface eth0
    virtual_router_id &lt;/span&gt;&lt;span&gt;191&lt;/span&gt;&lt;span&gt;
    priority &lt;/span&gt;&lt;span&gt;98&lt;/span&gt;&lt;span&gt;
    advert_int &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;
    authentication {
        auth_type PASS
        auth_pass along
    }
    virtual_ipaddress {
        &lt;/span&gt;&lt;span&gt;172.17&lt;/span&gt;.&lt;span&gt;100.100&lt;/span&gt;&lt;span&gt;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;service keepalived start 开启keepalived服务&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;3、配置haproxy ，总共有两大段，和第二大段的4小段，两个haproxy可以配置的一样&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;（1）第一大段：global 全局段&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;global
    log         &lt;/span&gt;&lt;span&gt;127.0&lt;/span&gt;.&lt;span&gt;0.1&lt;/span&gt;&lt;span&gt; local2
    &lt;/span&gt;&lt;span&gt;chroot&lt;/span&gt;      /var/lib/&lt;span&gt;haproxy
    pidfile     &lt;/span&gt;/var/run/&lt;span&gt;haproxy.pid
    maxconn     &lt;/span&gt;&lt;span&gt;40000&lt;/span&gt;&lt;span&gt;
    user        haproxy
    group       haproxy
    daemon
    stats socket &lt;/span&gt;/var/lib/haproxy/stats
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;（2）第二大段：proxies 对代理的设定&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;① defaults 默认参数设置段
defaults
    mode                    http
    log                     global
    option                  httplog
    option                  dontlognull
    option http&lt;/span&gt;-server-&lt;span&gt;close
    option forwardfor       except &lt;/span&gt;&lt;span&gt;127.0&lt;/span&gt;.&lt;span&gt;0.0&lt;/span&gt;/&lt;span&gt;8&lt;/span&gt;&lt;span&gt;
    option                  redispatch
    retries                 &lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt;
    timeout http&lt;/span&gt;-&lt;span&gt;request    10s
    timeout queue           1m
    timeout connect         10s
    timeout client          1m
    timeout server          1m
    timeout http&lt;/span&gt;-keep-&lt;span&gt;alive 10s
    timeout check           10s
    maxconn                 &lt;/span&gt;&lt;span&gt;3000&lt;/span&gt;&lt;span&gt;

② listen 段
listen stats
bind &lt;/span&gt;&lt;span&gt;0.0&lt;/span&gt;.&lt;span&gt;0.0&lt;/span&gt;:&lt;span&gt;1080&lt;/span&gt;&lt;span&gt;
stats enable
stats hide&lt;/span&gt;-&lt;span&gt;version
stats uri &lt;/span&gt;/&lt;span&gt;haproxyadmin
stats auth along:along
stats admin &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; TRUE

③ frontend 与客户端建立连接，打开服务监听端口段
frontend  web
bind :&lt;/span&gt;&lt;span&gt;80&lt;/span&gt;&lt;span&gt;
default_backend         lnmp&lt;/span&gt;-&lt;span&gt;server

④ backend 与后端服务器联系段
backend lnmp&lt;/span&gt;-&lt;span&gt;server
    balance     roundrobin
    option      httpchk GET &lt;/span&gt;/&lt;span&gt;index.html
    server  lnmpserver1 &lt;/span&gt;&lt;span&gt;172.17&lt;/span&gt;.&lt;span&gt;1.7&lt;/span&gt;:&lt;span&gt;80&lt;/span&gt; check inter &lt;span&gt;3000&lt;/span&gt; rise &lt;span&gt;3&lt;/span&gt; fall &lt;span&gt;5&lt;/span&gt;&lt;span&gt;
    server  lnmpserver2 &lt;/span&gt;&lt;span&gt;172.17&lt;/span&gt;.&lt;span&gt;22.22&lt;/span&gt;:&lt;span&gt;80&lt;/span&gt; check inter &lt;span&gt;3000&lt;/span&gt; rise &lt;span&gt;3&lt;/span&gt; fall &lt;span&gt;5&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;开启服务 service haproxy start&lt;/p&gt;

&lt;h3&gt;4、在后端server·打开事先准备好的web server&lt;/h3&gt;
&lt;p&gt;systemctl start nginx&lt;/p&gt;
&lt;p&gt;systemctl start php-fpm&lt;/p&gt;
&lt;p&gt;systemctl start mariadb&lt;/p&gt;

&lt;h3&gt;5、测试&lt;/h3&gt;
&lt;p&gt;（1）网页访问 &lt;span&gt;http://172.17.100.100:1080/haproxyadmin 进入状态监控页面，可以控制自己的后端服务&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1216496/201711/1216496-20171121164411305-1577397550.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;（2）可以坏2台不是一组的机器&lt;/p&gt;
&lt;p&gt;一台后端server宕机，haproxy会调度到另一个server，继续提供服务&lt;/p&gt;
&lt;p&gt;一个主的haproxy宕机，keepalived会把VIP漂移到从上，继续提供服务&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1216496/201711/1216496-20171121164411774-795275222.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h2&gt;实战三：基于ACL控制实现动静分离&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;原理：&lt;/strong&gt;acl：访问控制列表，用于实现&lt;strong&gt;基于请求报文的首部&lt;/strong&gt;、&lt;strong&gt;响应报文的内容&lt;/strong&gt;或&lt;strong&gt;其它&lt;/strong&gt;的环境状态信息来做出转发决策，这大大增强了其配置弹性。其配置法则&lt;strong&gt;通常分为两步&lt;/strong&gt;，首先去&lt;strong&gt;定义ACL&lt;/strong&gt; ，即定义一个测试条件，而后&lt;strong&gt;在条件得到满足时执行某特定的动作&lt;/strong&gt;，如阻止请求或转发至某特定的后端。&lt;/p&gt;
&lt;h3&gt;1、环境准备：&lt;/h3&gt;

&lt;table border=&quot;0&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody readability=&quot;1&quot;&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot;&gt;
&lt;p&gt;机器名称&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;146&quot;&gt;
&lt;p&gt;IP配置&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;85&quot;&gt;
&lt;p&gt;服务角色&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;123&quot;&gt;
&lt;p&gt;备注&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td valign=&quot;top&quot;&gt;
&lt;p&gt;haproxy-server&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;146&quot;&gt;
&lt;p&gt;172.17.2.7&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;85&quot;&gt;
&lt;p&gt;负载均衡器&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;123&quot;&gt;
&lt;p&gt;配置keepalived&lt;/p&gt;
&lt;p&gt;ACL控制&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot;&gt;
&lt;p&gt;rs01&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;146&quot;&gt;
&lt;p&gt;RIP：192.168.30.107&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;85&quot;&gt;
&lt;p&gt;静态服务器&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;123&quot;&gt;
&lt;p&gt; 小米网页&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot;&gt;
&lt;p&gt;rs02&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;146&quot;&gt;
&lt;p&gt;RIP：192.168.30.7&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;85&quot;&gt;
&lt;p&gt;动态服务器&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;123&quot;&gt;
&lt;p&gt; 小米网页&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h3&gt;2、在haproxy 上定义ACL和后端服务器&lt;/h3&gt;
&lt;p&gt;vim /etc/haproxy/haproxy.cfg  前面global 全局段和default 段不用修改&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;① 定义web 监控页面
listen stats
bind &lt;/span&gt;&lt;span&gt;0.0&lt;/span&gt;.&lt;span&gt;0.0&lt;/span&gt;:&lt;span&gt;1080&lt;/span&gt;&lt;span&gt;
stats enable
stats hide&lt;/span&gt;-&lt;span&gt;version
stats uri &lt;/span&gt;/&lt;span&gt;haproxyadmin
stats auth along:along
stats admin &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; TRUE

② 在frontend 段定义ACL
frontend web
        bind :&lt;/span&gt;&lt;span&gt;80&lt;/span&gt;&lt;span&gt;
        acl staticfile path_end .jpg .png .bmp .htm .html .css .js
        acl appfile path_end .php
        use_backend staticsrvs &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; staticfile
        default_backend appsrvs

③ 设置backend 后端集群组
backend staticsrvs
        balance roundrobin
        server staticweb &lt;/span&gt;&lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;30.107&lt;/span&gt;:&lt;span&gt;80&lt;/span&gt; check inter &lt;span&gt;3000&lt;/span&gt; rise &lt;span&gt;3&lt;/span&gt; fall &lt;span&gt;3&lt;/span&gt;&lt;span&gt;

backend appsrvs
        balance roundrobin
        server appweb &lt;/span&gt;&lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;30.7&lt;/span&gt;:&lt;span&gt;80&lt;/span&gt; check inter &lt;span&gt;3000&lt;/span&gt; rise &lt;span&gt;3&lt;/span&gt; fall &lt;span&gt;3&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;3、开启后端web服务&lt;/h3&gt;
&lt;p&gt;systemctl start nginx&lt;/p&gt;
&lt;p&gt;systemctl start php-fpm&lt;/p&gt;
&lt;p&gt;systemctl start mariadb&lt;/p&gt;

&lt;h3&gt;4、测试结果&lt;/h3&gt;
&lt;p&gt;（1）后端服务器正常时&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1216496/201711/1216496-20171126175708390-1296518357.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;web 检测页面，一切正常&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1216496/201711/1216496-20171126175708406-1336310229.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;（2）当后端静态页面服务集群宕机，显示不出静态页面，说明动静分离成功&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1216496/201711/1216496-20171126175708406-306036619.png&quot; alt=&quot;&quot;/&gt; &lt;/p&gt;

&lt;h2&gt;实验四：基于ACL实现权限控制及会话保持&lt;/h2&gt;
&lt;h3&gt;1、环境准备：&lt;/h3&gt;

&lt;table border=&quot;0&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody readability=&quot;1&quot;&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot;&gt;
&lt;p&gt;机器名称&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;146&quot;&gt;
&lt;p&gt;IP配置&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;85&quot;&gt;
&lt;p&gt;服务角色&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;123&quot;&gt;
&lt;p&gt;备注&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td valign=&quot;top&quot;&gt;
&lt;p&gt;haproxy-server&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;146&quot;&gt;
&lt;p&gt;172.17.2.7&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;85&quot;&gt;
&lt;p&gt;负载均衡器&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;123&quot;&gt;
&lt;p&gt;配置keepalived&lt;/p&gt;
&lt;p&gt;ACL控制&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot;&gt;
&lt;p&gt;rs01&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;146&quot;&gt;
&lt;p&gt;RIP：192.168.30.107&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;85&quot;&gt;
&lt;p&gt;后端服务器&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;123&quot;&gt;
&lt;p&gt; 小米网页&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot;&gt;
&lt;p&gt;rs02&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;146&quot;&gt;
&lt;p&gt;RIP：192.168.30.7&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;85&quot;&gt;
&lt;p&gt;后端服务器&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;123&quot;&gt;
&lt;p&gt; 小米网页&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h3&gt;2、这haproxy 上定义ACL和后端服务器&lt;/h3&gt;
&lt;p&gt;vim /etc/haproxy/haproxy.cfg  前面global 全局段和default 段不用修改&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;① 定义web 监控页面
listen stats
bind &lt;/span&gt;&lt;span&gt;0.0&lt;/span&gt;.&lt;span&gt;0.0&lt;/span&gt;:&lt;span&gt;1080&lt;/span&gt;&lt;span&gt;
stats enable
stats hide&lt;/span&gt;-&lt;span&gt;version
stats uri &lt;/span&gt;/&lt;span&gt;haproxyadmin
stats auth along:along
stats admin &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; TRUE

② 在frontend 段定义ACL，用户权限控制
frontend web
        bind :&lt;/span&gt;&lt;span&gt;80&lt;/span&gt;&lt;span&gt;
        acl allow_src src &lt;/span&gt;&lt;span&gt;172.17&lt;/span&gt;.&lt;span&gt;0.0&lt;/span&gt;/&lt;span&gt;16&lt;/span&gt;&lt;span&gt;
        block unless allow_src
        default_backend appsrvs

③ 设置backend 后端集群组，设置cookie，会话保持
backend staticsrvs
        balance roundrobin
        cookie SRV insert nocache
        server appweb1 &lt;/span&gt;&lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;30.107&lt;/span&gt;:&lt;span&gt;80&lt;/span&gt; check inter &lt;span&gt;3000&lt;/span&gt; rise &lt;span&gt;3&lt;/span&gt; fall &lt;span&gt;3&lt;/span&gt;&lt;span&gt; cookie srv1
        server appweb2 &lt;/span&gt;&lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;30.7&lt;/span&gt;:&lt;span&gt;80&lt;/span&gt; check inter &lt;span&gt;3000&lt;/span&gt; rise &lt;span&gt;3&lt;/span&gt; fall &lt;span&gt;3&lt;/span&gt; cookie srv2
&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;3、开启后端web服务&lt;/h3&gt;
&lt;p&gt;systemctl start nginx&lt;/p&gt;
&lt;p&gt;systemctl start php-fpm&lt;/p&gt;
&lt;p&gt;systemctl start mariadb&lt;/p&gt;

&lt;h3&gt;4、检测结果&lt;/h3&gt;
&lt;p&gt;（1）检测权限控制&lt;/p&gt;
&lt;p&gt;① 在172.17.0.0 段的机器访问，正常&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1216496/201711/1216496-20171126175857062-1580940980.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; ② 在这个网段外的机器访问，拒绝&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1216496/201711/1216496-20171126175902640-1805701405.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;（2）检测会话保持&lt;/p&gt;
&lt;p&gt;① 分别在两个后端创建两个测试页面&lt;/p&gt;
&lt;p&gt;vim ../test.html&lt;/p&gt;
&lt;p&gt;server 1/2&lt;/p&gt;
&lt;p&gt;② 测试&lt;/p&gt;
&lt;p&gt;curl 测试需加-b SRV= 指定的对应cookie访问&lt;/p&gt;
&lt;p&gt;curl -b SRV=srv1 172.17.2.7/test.html&lt;/p&gt;
&lt;p&gt;curl -b SRV=srv2 172.17.2.7/test.html&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1216496/201711/1216496-20171126175919781-524720281.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h2&gt;&lt;span&gt;实战四&lt;/span&gt;&lt;span&gt;：实现haproxy的ssl加密&lt;/span&gt;&lt;/h2&gt;
&lt;h3&gt;1、自签生成证书&lt;/h3&gt;
&lt;p&gt;cd /etc/pki/tls/certs&lt;/p&gt;
&lt;p&gt;make /etc/haproxy/haproxy.pem&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1216496/201711/1216496-20171121164412368-342754740.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;ls /etc/haproxy/haproxy.pem 确实生成了证书和秘钥的文件&lt;/p&gt;

&lt;h3&gt;2、在haproxy 中设置&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;frontend  web
        bind :&lt;/span&gt;&lt;span&gt;80&lt;/span&gt;&lt;span&gt;
        bind :&lt;/span&gt;&lt;span&gt;443&lt;/span&gt; ssl crt /etc/haproxy/&lt;span&gt;haproxy.pem   监听443端口，且是ssl加密
        redirect scheme https &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; !{ ssl_fc }    实现302重定向，将80跳转到443端口
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;3、网页访问 &lt;span&gt;https://172.17.11.11/&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1216496/201711/1216496-20171121164412805-1836590846.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

</description>
<pubDate>Sun, 26 Nov 2017 10:03:00 +0000</pubDate>
<dc:creator>阿龙along</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/along21/p/7873998.html</dc:identifier>
</item>
</channel>
</rss>