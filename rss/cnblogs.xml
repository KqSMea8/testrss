<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>从进程组、会话、终端的概念深入理解守护进程 - 肖邦linux</title>
<link>http://www.cnblogs.com/liwei0526vip/p/8972384.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/liwei0526vip/p/8972384.html</guid>
<description>&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;从进程组、会话、终端的概念深入理解守护进程&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;一写在前面&quot;&gt;一、写在前面&lt;/h2&gt;
&lt;p&gt;「守护进程」是 Linux 的一种长期运行的后台服务进程，也有人称它为「精灵进程」。我们常见的 httpd、named、sshd 等服务都是以守护进程 Daemon 方式运行的，通常服务名称以字母ｄ结尾，也就是 Daemon 第一个字母。与普通进程相比它大概有如下特点：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;无需控制终端(不需要与用户交互)&lt;/li&gt;
&lt;li&gt;在后台运行&lt;/li&gt;
&lt;li&gt;生命周期比较长，一般是随系统启动和关闭&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;二守护进程必要性&quot;&gt;二、守护进程必要性&lt;/h2&gt;
&lt;p&gt;为什么要设置为守护进程，普通进程不可以吗？&lt;/p&gt;
&lt;p&gt;当我们在命令行提示符后输入类似&lt;code&gt;./helloworld&lt;/code&gt;程序时，在程序运行时终端被占用，此时无法执行其它操作。即使使用&lt;code&gt;./helloworld &amp;amp;&lt;/code&gt;方式后台运行，当连接终端的网络出现问题，那么也会导致运行程序中断。这些因素对于长期运行的服务来说很不友好，而「守护进程」可以很好的解决这个问题。&lt;/p&gt;
&lt;h2 id=&quot;三对进程组会话终端的理解&quot;&gt;三、对进程组、会话、终端的理解&lt;/h2&gt;
&lt;p&gt;「守护进程」理解起来并不复杂，代码编写上有基本固定的套路。如果想要深入理解「守护进程」基本原理，那么必须要首先理解 Linux 的进程、进程组、会话、终端等概念。&lt;/p&gt;
&lt;h3 id=&quot;进程&quot;&gt;1、进程&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;进程是 Linux 进行资源分配的最小单位&lt;/li&gt;
&lt;li&gt;前台进程，例如这样：&lt;code&gt;$ ./hello&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;后台进程，例如这样：&lt;code&gt;$ ./hello &amp;amp;&lt;/code&gt; 释放对控制终端的占用&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;进程组&quot;&gt;2、进程组&lt;/h3&gt;
&lt;p&gt;每个进程都会属于一个进程组，进程组中可以包含一个或多个进程。进程组中有一个进程组长，组长的进程 ID 是进程组 ID(PGID)&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;sourceCode bash&quot;&gt;
&lt;code class=&quot;sourceCode bash&quot;&gt;$ &lt;span class=&quot;kw&quot;&gt;ps&lt;/span&gt; -o pid,pgid,ppid,comm &lt;span class=&quot;kw&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;cat&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;PID&lt;/span&gt;  PGID  PPID  COMMAND
&lt;span class=&quot;kw&quot;&gt;10179&lt;/span&gt;  10179 10177 bash
&lt;span class=&quot;kw&quot;&gt;10263&lt;/span&gt;  10263 10179 ps
&lt;span class=&quot;kw&quot;&gt;10264&lt;/span&gt;  10263 10179 cat&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;下边通过简单的示例来理解进程组&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;bash：进程和进程组ID都是 10179，父进程其实是 sshd(10177)&lt;/li&gt;
&lt;li&gt;ps：进程和进程组ID都是 10263，父进程是 bash(10179)，因为是在 Shell 上执行的命令&lt;/li&gt;
&lt;li&gt;cat：进程组 ID 与 ps 的进程组 ID 相同，父进程同样是 bash(10179)&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;容易理解 Bash 就是Shell进程，Shell 父进程是 sshd；ps 与 cat 通过管道符号一起运行，属于一个进程组，其父进程都是 Bash；一个进程组也被称为「作业」。&lt;/p&gt;
&lt;h3 id=&quot;会话session&quot;&gt;3、会话(session)&lt;/h3&gt;
&lt;p&gt;多个进程组构成一个「会话」，建立会话的进程是会话的领导进程，该进程 ID 为会话的 SID。会话中的每个进程组称为一个「作业」。会话可以有一个进程组称为会话的「前台作业」，其它进程组为「后台作业」&lt;/p&gt;
&lt;p&gt;一个会话可以有一个控制终端，当控制终端有输入和输出时都会传递给前台进程组，比如&lt;code&gt;Ctrl + Z&lt;/code&gt;。会话的意义在于能将多个作业通过一个终端控制，一个前台操作，其它后台运行。&lt;/p&gt;
&lt;h3 id=&quot;前后台作业相关操作&quot;&gt;4、前后台作业相关操作&lt;/h3&gt;
&lt;p&gt;让作业由进入后台运行：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode bash&quot;&gt;
&lt;code class=&quot;sourceCode bash&quot;&gt;$ &lt;span class=&quot;kw&quot;&gt;ping&lt;/span&gt; localhost &lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;/dev/null &lt;span class=&quot;kw&quot;&gt;&amp;amp;&lt;/span&gt;
[&lt;span class=&quot;kw&quot;&gt;1&lt;/span&gt;] 10269    &lt;span class=&quot;co&quot;&gt;# 终端显示&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;# [1]：作业ID  10269：进程组ID&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;给后台作业发信号 SIGTERM&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode bash&quot;&gt;
&lt;code class=&quot;sourceCode bash&quot;&gt;$ &lt;span class=&quot;kw&quot;&gt;kill&lt;/span&gt; -SIGTERM -10269  &lt;span class=&quot;co&quot;&gt;# 发信号给进程组&lt;/span&gt;
$ &lt;span class=&quot;kw&quot;&gt;kill&lt;/span&gt; -SIGTERM %1      &lt;span class=&quot;co&quot;&gt;# 发信号给作业1&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;让后台进程切换到前台：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode bash&quot;&gt;
&lt;code class=&quot;sourceCode bash&quot;&gt;$ &lt;span class=&quot;kw&quot;&gt;fg&lt;/span&gt; %1
&lt;span class=&quot;co&quot;&gt;# ping 进程重新切到前台&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;四编写守护进程&quot;&gt;四、编写守护进程&lt;/h2&gt;
&lt;p&gt;编写守护进程看似复杂，但实际上也是遵循一个特定的流程。&lt;/p&gt;
&lt;h3 id=&quot;创建子进程父进程退出&quot;&gt;1、创建子进程，父进程退出&lt;/h3&gt;
&lt;p&gt;进程 fork 后，父进程退出。这么做的原因有 2 点：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;如果守护进程是通过 Shell 启动，父进程退出，Shell 就会认为任务执行完毕，这时子进程由 init 收养&lt;/li&gt;
&lt;li&gt;子进程继承父进程的进程组 ID，保证了子进程不是进程组组长，因为后边调用&lt;code&gt;setsid()&lt;/code&gt;要求必须不是进程组长&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;子进程创建新会话&quot;&gt;2、子进程创建新会话&lt;/h3&gt;
&lt;p&gt;调用&lt;code&gt;setsid()&lt;/code&gt;创建一个新的会话，并成为新会话组长。这个步骤主要是要与继承父进程的会话、进程组、终端脱离关系。&lt;/p&gt;
&lt;h3 id=&quot;禁止子进程重新打开终端&quot;&gt;3、禁止子进程重新打开终端&lt;/h3&gt;
&lt;p&gt;此刻子进程是会话组长，为了防止子进程重新打开终端，再次 fork 后退出父进程，也就是此子进程。这时子进程 2 不再是会话组长，无法再打开终端。其实这一步骤不是必须的，不过加上这一步骤会显得更加严谨。&lt;/p&gt;
&lt;h3 id=&quot;设置当前目录为根目录&quot;&gt;4、设置当前目录为根目录&lt;/h3&gt;
&lt;p&gt;如果守护进程的当前工作目录是&lt;code&gt;/usr/home&lt;/code&gt;目录，那么管理员在卸载&lt;code&gt;/usr&lt;/code&gt;分区时会报错的。为了避免这个问题，可以调用&lt;code&gt;chdir()&lt;/code&gt;函数将工作目录设置为根目录&lt;code&gt;/&lt;/code&gt;。&lt;/p&gt;
&lt;h3 id=&quot;设置文件权限掩码&quot;&gt;5、设置文件权限掩码&lt;/h3&gt;
&lt;p&gt;文件权限掩码是指屏蔽掉文件权限中的对应位。由于使用 &lt;code&gt;fork()&lt;/code&gt;函数新建的子进程继承了父进程的文件权限掩码，这就给该子进程使用文件带来了诸多的麻烦。因此，把文件权限掩码设置为 0，可以大大增强该守护进程的灵活性。通常使用方法是&lt;code&gt;umask(0)&lt;/code&gt;。&lt;/p&gt;
&lt;h3 id=&quot;关闭文件描述符&quot;&gt;6、关闭文件描述符&lt;/h3&gt;
&lt;p&gt;子进程会继承已经打开的文件，它们占用系统资源，且可能导致所在文件系统无法卸载。此时守护进程与终端脱离，常说的输入、输出、错误描述符也应该关闭。&lt;/p&gt;
&lt;h2 id=&quot;五守护进程的出错处理&quot;&gt;五、守护进程的出错处理&lt;/h2&gt;
&lt;p&gt;由于守护进程脱离了终端，不能将错误信息输出到控制终端，即使 gdb 也无法正常调试。常用的方法是使用 syslog 服务，将错误信息输入到&lt;code&gt;/var/log/messages&lt;/code&gt;中。&lt;/p&gt;
&lt;p&gt;syslog 是 Linux 中的系统日志管理服务，通过守护进程 syslogd 来维护。该守护进程在启动时会读一个配置文件&lt;code&gt;/etc/syslog.conf&lt;/code&gt;。该文件决定了不同种类的消息会发送向何处。&lt;/p&gt;
&lt;h2 id=&quot;六守护进程编码示例&quot;&gt;六、守护进程编码示例&lt;/h2&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;17&quot;&gt;
&lt;pre class=&quot;sourceCode c&quot;&gt;
&lt;code class=&quot;sourceCode c&quot;&gt;pid_t pid, sid;
&lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; i;
openlog(&lt;span class=&quot;st&quot;&gt;&quot;daemon_syslog&quot;&lt;/span&gt;, LOG_PID, LOG_DAEMON);
pid = fork(); &lt;span class=&quot;co&quot;&gt;// 第1步&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (pid &amp;lt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;) exit(-&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;);
&lt;span class=&quot;kw&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (pid &amp;gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;) exit(&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;);  &lt;span class=&quot;co&quot;&gt;// 父进程第一次退出&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; ((sid = setsid()) &amp;lt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;)   &lt;span class=&quot;co&quot;&gt;// 第2步&lt;/span&gt;
{
    syslog(LOG_ERR, &lt;span class=&quot;st&quot;&gt;&quot;%s&lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&quot;setsid&quot;&lt;/span&gt;);
    exit(-&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;);
}
&lt;span class=&quot;co&quot;&gt;// 第3步 第二次父进程退出&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; ((pid = fork()) &amp;gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;) exit(&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;);
&lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; ((sid = chdir(&lt;span class=&quot;st&quot;&gt;&quot;/&quot;&lt;/span&gt;)) &amp;lt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;) &lt;span class=&quot;co&quot;&gt;// 第4步&lt;/span&gt;
{
    syslog(LOG_ERR, &lt;span class=&quot;st&quot;&gt;&quot;%s&lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&quot;chdir&quot;&lt;/span&gt;);
    exit(-&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;);
}
umask(&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;); &lt;span class=&quot;co&quot;&gt;// 第5步&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;// 第6步：关闭继承的文件描述符&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;for&lt;/span&gt;(i = &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;; i &amp;lt; getdtablesize(); i++)
{
    close(i);
}
&lt;span class=&quot;kw&quot;&gt;while&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;)
{
    do_something();
}
closelog();
exit(&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;);&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;到这里基本上把守护进程的内容全部说清楚了，内容不少，概念比较晦涩，如果希望理解的比较透彻的话，可能需要多看几遍了。&lt;/p&gt;
</description>
<pubDate>Sun, 29 Apr 2018 15:30:00 +0000</pubDate>
<dc:creator>肖邦linux</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/liwei0526vip/p/8972384.html</dc:identifier>
</item>
<item>
<title>ES6(类） - 姜皓</title>
<link>http://www.cnblogs.com/jianghao233/p/8972377.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/jianghao233/p/8972377.html</guid>
<description>&lt;p&gt;&lt;span&gt;类的概念&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1146559/201804/1146559-20180429230823835-612392969.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;1.基本定义&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1146559/201804/1146559-20180429231040352-1776891018.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1146559/201804/1146559-20180429231057350-880189003.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;2.继承&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1146559/201804/1146559-20180429231145932-910624212.png&quot; alt=&quot;&quot;/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1146559/201804/1146559-20180429231202102-349120537.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;继承如何传递参数？（super）&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1146559/201804/1146559-20180429231730709-1925556892.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1146559/201804/1146559-20180429231746417-321162739.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;定义自己属性的时候调用 this 一定要在 super 之后（在继承关系中，子类的构造函数如果用 super 传递参数的过程中，super 一定放在构造函数的第一行）&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1146559/201804/1146559-20180429231801446-1384812202.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1146559/201804/1146559-20180429231826470-270980799.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;有参数则会覆盖&lt;/p&gt;
&lt;p&gt;&lt;span&gt;3.getter 和 setter&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1146559/201804/1146559-20180429232113859-1804969184.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1146559/201804/1146559-20180429232124925-614855350.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;赋值操作&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1146559/201804/1146559-20180429232213487-1202468409.png&quot; alt=&quot;&quot;/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1146559/201804/1146559-20180429232225992-903252261.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;4.静态方法&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1146559/201804/1146559-20180429232436241-822723992.png&quot; alt=&quot;&quot;/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1146559/201804/1146559-20180429232505413-1069519199.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;（通过 类 调用，而不是 类的实例 调用）&lt;/p&gt;
&lt;p&gt;&lt;span&gt;5.静态属性（暂无关键词）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1146559/201804/1146559-20180429232657726-115399642.png&quot; alt=&quot;&quot;/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1146559/201804/1146559-20180429232717362-133640203.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;

</description>
<pubDate>Sun, 29 Apr 2018 15:28:00 +0000</pubDate>
<dc:creator>姜皓</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/jianghao233/p/8972377.html</dc:identifier>
</item>
<item>
<title>POJ 2135 最小费用最大流 - Q1143316492</title>
<link>http://www.cnblogs.com/Q1143316492/p/8972372.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/Q1143316492/p/8972372.html</guid>
<description>&lt;p&gt;&lt;span&gt;　　&lt;a href=&quot;http://poj.org/problem?id=2135&quot;&gt;题目链接&lt;/a&gt;&lt;/span&gt;　　&lt;/p&gt;

&lt;blockquote readability=&quot;18.5&quot;&gt;
&lt;p&gt;&lt;span&gt;Farm Tour&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;plm&quot;&gt;
&lt;table align=&quot;center&quot;&gt;&lt;tbody readability=&quot;1&quot;&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;Time Limit:&lt;/strong&gt; 1000MS&lt;/td&gt;
&lt;td width=&quot;10px&quot;&gt; &lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Memory Limit:&lt;/strong&gt; 65536K&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;&lt;strong&gt;Total Submissions:&lt;/strong&gt; 18961&lt;/td&gt;
&lt;td width=&quot;10px&quot;&gt; &lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Accepted:&lt;/strong&gt; 7326&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;
&lt;p class=&quot;pst&quot;&gt;Description&lt;/p&gt;
&lt;div class=&quot;ptx&quot; lang=&quot;en-US&quot; readability=&quot;21&quot;&gt;When FJ's friends visit him on the farm, he likes to show them around. His farm comprises N (1 &lt;p&gt;To show off his farm in the best way, he walks a tour that starts at his house, potentially travels through some fields, and ends at the barn. Later, he returns (potentially through some fields) back to his house again. &lt;/p&gt;&lt;p&gt;He wants his tour to be as short as possible, however he doesn't want to walk on any given path more than once. Calculate the shortest tour possible. FJ is sure that some tour exists for any given farm.&lt;/p&gt;&lt;/div&gt;
&lt;p class=&quot;pst&quot;&gt;Input&lt;/p&gt;
&lt;div class=&quot;ptx&quot; lang=&quot;en-US&quot; readability=&quot;12&quot;&gt;* Line 1: Two space-separated integers: N and M. &lt;p&gt;* Lines 2..M+1: Three space-separated integers that define a path: The starting field, the end field, and the path's length. &lt;/p&gt;&lt;/div&gt;
&lt;p class=&quot;pst&quot;&gt;Output&lt;/p&gt;
&lt;p&gt;A single line containing the length of the shortest tour. &lt;/p&gt;
&lt;p class=&quot;pst&quot;&gt;Sample Input&lt;/p&gt;
&lt;pre class=&quot;sio&quot;&gt;
4 5
1 2 1
2 3 1
3 4 1
1 3 2
2 4 2
&lt;/pre&gt;
&lt;p class=&quot;pst&quot;&gt;Sample Output&lt;/p&gt;
&lt;pre class=&quot;sio&quot;&gt;
6
&lt;/pre&gt;&lt;/blockquote&gt;
&lt;p&gt; &lt;span&gt;题意：有n个点,m条边，无向图，问你1-&amp;gt;n-&amp;gt;1的最短路径是多少。FJ带朋友参观，想经可能多看几个地方，所以每条边只能走一次。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;思路：把路径长度作为费用，流量为1，这样每条路就只能走一次了。自己建源点s,汇点t。s-&amp;gt;1流量2，n-&amp;gt;t流量2，因为这两条边要走两次。然后直接费用流。水题，改改板子就过了,学会费用流后的第二题。&lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;90&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt; #include &amp;lt;cstdio&amp;gt;
&lt;span&gt;  2&lt;/span&gt; #include &amp;lt;cstring&amp;gt;
&lt;span&gt;  3&lt;/span&gt; #include &amp;lt;iostream&amp;gt;
&lt;span&gt;  4&lt;/span&gt; #include &amp;lt;algorithm&amp;gt;
&lt;span&gt;  5&lt;/span&gt; #include &amp;lt;queue&amp;gt;
&lt;span&gt;  6&lt;/span&gt; 
&lt;span&gt;  7&lt;/span&gt; &lt;span&gt;using&lt;/span&gt; &lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; std;
&lt;/span&gt;&lt;span&gt;  8&lt;/span&gt; &lt;span&gt;const&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; MAXN = &lt;span&gt;5010&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;  9&lt;/span&gt; &lt;span&gt;const&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; MAXM = &lt;span&gt;50010&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 10&lt;/span&gt; &lt;span&gt;const&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; INF = &lt;span&gt;0x7FFFFFFF&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 11&lt;/span&gt; 
&lt;span&gt; 12&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; n, m, first[MAXN], s, t, sign;
&lt;/span&gt;&lt;span&gt; 13&lt;/span&gt; 
&lt;span&gt; 14&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; max_flow, min_cost;
&lt;/span&gt;&lt;span&gt; 15&lt;/span&gt; 
&lt;span&gt; 16&lt;/span&gt; &lt;span&gt;struct&lt;/span&gt;&lt;span&gt; Edge {
&lt;/span&gt;&lt;span&gt; 17&lt;/span&gt;     &lt;span&gt;int&lt;/span&gt;&lt;span&gt; to, cap, cost, next;
&lt;/span&gt;&lt;span&gt; 18&lt;/span&gt; } edge[MAXM * &lt;span&gt;2&lt;/span&gt;&lt;span&gt;];
&lt;/span&gt;&lt;span&gt; 19&lt;/span&gt; 
&lt;span&gt; 20&lt;/span&gt; inline &lt;span&gt;void&lt;/span&gt;&lt;span&gt; init() {
&lt;/span&gt;&lt;span&gt; 21&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt;= n + &lt;span&gt;1&lt;/span&gt;; i++&lt;span&gt; ) {
&lt;/span&gt;&lt;span&gt; 22&lt;/span&gt;         first[i] = -&lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 23&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 24&lt;/span&gt;     sign = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 25&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt; 26&lt;/span&gt; 
&lt;span&gt; 27&lt;/span&gt; inline &lt;span&gt;void&lt;/span&gt; add_edge(&lt;span&gt;int&lt;/span&gt; u, &lt;span&gt;int&lt;/span&gt; v, &lt;span&gt;int&lt;/span&gt; cap, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; cost) {
&lt;/span&gt;&lt;span&gt; 28&lt;/span&gt;     edge[sign].to = v, edge[sign].cap = cap, edge[sign].cost =&lt;span&gt; cost;
&lt;/span&gt;&lt;span&gt; 29&lt;/span&gt;     edge[sign].next = first[u], first[u] = sign ++&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 30&lt;/span&gt;     edge[sign].to = u, edge[sign].cap = &lt;span&gt;0&lt;/span&gt;, edge[sign].cost = -&lt;span&gt;cost;
&lt;/span&gt;&lt;span&gt; 31&lt;/span&gt;     edge[sign].next = first[v], first[v] = sign ++&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 32&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt; 33&lt;/span&gt; 
&lt;span&gt; 34&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; dist[MAXN], inq[MAXN], pre[MAXN], incf[MAXN];
&lt;/span&gt;&lt;span&gt; 35&lt;/span&gt; 
&lt;span&gt; 36&lt;/span&gt; &lt;span&gt;bool&lt;/span&gt; spfa(&lt;span&gt;int&lt;/span&gt; s, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; t) {
&lt;/span&gt;&lt;span&gt; 37&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt;= n + &lt;span&gt;1&lt;/span&gt;; i++&lt;span&gt; ) {
&lt;/span&gt;&lt;span&gt; 38&lt;/span&gt;         dist[i] = INF, inq[i] = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 39&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 40&lt;/span&gt;     queue&amp;lt;&lt;span&gt;int&lt;/span&gt;&amp;gt;&lt;span&gt;que;
&lt;/span&gt;&lt;span&gt; 41&lt;/span&gt;     que.push(s), inq[s] = &lt;span&gt;1&lt;/span&gt;, dist[s] = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 42&lt;/span&gt;     incf[s] = &lt;span&gt;0x3f3f3f3f&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 43&lt;/span&gt;     &lt;span&gt;while&lt;/span&gt;(!&lt;span&gt;que.empty()) {
&lt;/span&gt;&lt;span&gt; 44&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt; now =&lt;span&gt; que.front();
&lt;/span&gt;&lt;span&gt; 45&lt;/span&gt; &lt;span&gt;        que.pop();
&lt;/span&gt;&lt;span&gt; 46&lt;/span&gt;         inq[now] = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 47&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; i = first[now]; ~i; i =&lt;span&gt; edge[i].next) {
&lt;/span&gt;&lt;span&gt; 48&lt;/span&gt;             &lt;span&gt;int&lt;/span&gt; to = edge[i].to, cap = edge[i].cap, cost =&lt;span&gt; edge[i].cost;
&lt;/span&gt;&lt;span&gt; 49&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt;(cap &amp;gt; &lt;span&gt;0&lt;/span&gt; &amp;amp;&amp;amp; dist[to] &amp;gt; dist[now] +&lt;span&gt; cost) {
&lt;/span&gt;&lt;span&gt; 50&lt;/span&gt;                 dist[to] = dist[now] +&lt;span&gt; cost;
&lt;/span&gt;&lt;span&gt; 51&lt;/span&gt;                 incf[to] =&lt;span&gt; min(incf[now], cap);
&lt;/span&gt;&lt;span&gt; 52&lt;/span&gt;                 pre[to] =&lt;span&gt; i;
&lt;/span&gt;&lt;span&gt; 53&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt;(!&lt;span&gt;inq[to]) {
&lt;/span&gt;&lt;span&gt; 54&lt;/span&gt; &lt;span&gt;                    que.push(to);
&lt;/span&gt;&lt;span&gt; 55&lt;/span&gt;                     inq[to] = &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 56&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt; 57&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt; 58&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 59&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 60&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; dist[t] !=&lt;span&gt; INF;
&lt;/span&gt;&lt;span&gt; 61&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt; 62&lt;/span&gt; 
&lt;span&gt; 63&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; update(&lt;span&gt;int&lt;/span&gt; s, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; t) {
&lt;/span&gt;&lt;span&gt; 64&lt;/span&gt;     &lt;span&gt;int&lt;/span&gt; x =&lt;span&gt; t;
&lt;/span&gt;&lt;span&gt; 65&lt;/span&gt;     &lt;span&gt;while&lt;/span&gt;(x !=&lt;span&gt; s) {
&lt;/span&gt;&lt;span&gt; 66&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt; pos =&lt;span&gt; pre[x];
&lt;/span&gt;&lt;span&gt; 67&lt;/span&gt;         edge[pos].cap -=&lt;span&gt; incf[t];
&lt;/span&gt;&lt;span&gt; 68&lt;/span&gt;         edge[pos ^ &lt;span&gt;1&lt;/span&gt;].cap +=&lt;span&gt; incf[t];
&lt;/span&gt;&lt;span&gt; 69&lt;/span&gt;         x = edge[pos ^ &lt;span&gt;1&lt;/span&gt;&lt;span&gt;].to;
&lt;/span&gt;&lt;span&gt; 70&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 71&lt;/span&gt;     max_flow +=&lt;span&gt; incf[t];
&lt;/span&gt;&lt;span&gt; 72&lt;/span&gt;     min_cost += dist[t] *&lt;span&gt; incf[t];
&lt;/span&gt;&lt;span&gt; 73&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt; 74&lt;/span&gt; 
&lt;span&gt; 75&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; minCostMaxFlow(&lt;span&gt;int&lt;/span&gt; s, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; t) {
&lt;/span&gt;&lt;span&gt; 76&lt;/span&gt;     &lt;span&gt;while&lt;/span&gt;&lt;span&gt;(spfa(s, t)) {
&lt;/span&gt;&lt;span&gt; 77&lt;/span&gt; &lt;span&gt;        update(s, t);
&lt;/span&gt;&lt;span&gt; 78&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 79&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt; 80&lt;/span&gt; 
&lt;span&gt; 81&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; main()
&lt;/span&gt;&lt;span&gt; 82&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 83&lt;/span&gt;     &lt;span&gt;while&lt;/span&gt;(~scanf(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%d %d&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &amp;amp;n, &amp;amp;&lt;span&gt;m)) {
&lt;/span&gt;&lt;span&gt; 84&lt;/span&gt;         s = &lt;span&gt;0&lt;/span&gt;, t = n + &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 85&lt;/span&gt; &lt;span&gt;        init();
&lt;/span&gt;&lt;span&gt; 86&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;1&lt;/span&gt;; i &amp;lt;= m; i++&lt;span&gt; ) {
&lt;/span&gt;&lt;span&gt; 87&lt;/span&gt;             &lt;span&gt;int&lt;/span&gt;&lt;span&gt; u, v, cap, cost;
&lt;/span&gt;&lt;span&gt; 88&lt;/span&gt;             scanf(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%d %d %d&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &amp;amp;u, &amp;amp;v, &amp;amp;&lt;span&gt;cost);
&lt;/span&gt;&lt;span&gt; 89&lt;/span&gt;             add_edge(u, v, &lt;span&gt;1&lt;/span&gt;&lt;span&gt;, cost);
&lt;/span&gt;&lt;span&gt; 90&lt;/span&gt;             add_edge(v, u, &lt;span&gt;1&lt;/span&gt;&lt;span&gt;, cost);
&lt;/span&gt;&lt;span&gt; 91&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 92&lt;/span&gt;         add_edge(s, &lt;span&gt;1&lt;/span&gt;, &lt;span&gt;2&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 93&lt;/span&gt;         add_edge(n, t, &lt;span&gt;2&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 94&lt;/span&gt;         max_flow = min_cost = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 95&lt;/span&gt; &lt;span&gt;        minCostMaxFlow(s, t);
&lt;/span&gt;&lt;span&gt; 96&lt;/span&gt;         printf(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%d\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, min_cost);
&lt;/span&gt;&lt;span&gt; 97&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 98&lt;/span&gt; 
&lt;span&gt; 99&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;100&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;

</description>
<pubDate>Sun, 29 Apr 2018 15:27:00 +0000</pubDate>
<dc:creator>Q1143316492</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/Q1143316492/p/8972372.html</dc:identifier>
</item>
<item>
<title>React 系列教程 1：实现 Animate.css 官网效果 - 叙帝利</title>
<link>http://www.cnblogs.com/nzbin/p/8934478.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/nzbin/p/8934478.html</guid>
<description>&lt;h2&gt;前言&lt;/h2&gt;
&lt;p&gt;这是 React 系列教程的第一篇，我们将用 React 实现 &lt;a href=&quot;http://daneden.github.io/animate.css/&quot; target=&quot;_blank&quot;&gt;Animate.css 官网&lt;/a&gt;的效果。对于 Animate.css 官网效果是一个非常简单的例子，原代码使用 jQuery 编写，就是添加类与删除类的操作。这对于学习 React 来说是一个非常简易的例子，但是我并不会在教程中介绍相关的前置知识，比如 JSX、ES6 等，对于小白来说可能还会有一些困惑的地方，所以还要了解一下 React 相关的基础知识。虽然 React 有很多值得深究的知识，但这个系列教程并不会涉及高大深的内容。&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;预告一下，在下一篇教程中，我会使用 React + Redux，编写一个元胞自动机&lt;strong&gt;兰顿蚂蚁&lt;/strong&gt;的程序。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;效果演示&lt;/h2&gt;
&lt;p&gt;本教程以实现 Animate.css 官网效果为主，不会去调整样式细节，所以视觉上略显朴素。以下是最终完成的效果：&lt;/p&gt;
&lt;p class=&quot;codepen&quot; data-height=&quot;350&quot; data-theme-id=&quot;25320&quot; data-slug-hash=&quot;dmxNvN&quot; data-default-tab=&quot;result&quot; data-user=&quot;nzbin&quot; data-embed-version=&quot;2&quot; data-pen-title=&quot;react-animate-css&quot;&gt;See the Pen &lt;a href=&quot;https://codepen.io/nzbin/pen/dmxNvN/&quot;&gt;react-animate-css&lt;/a&gt; by Zongbin (&lt;a href=&quot;https://codepen.io/nzbin&quot;&gt;@nzbin&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;因为这个案例效果非常简单，对于已经熟悉 React 的新手来说，完全可以尝试自己编写实现，甚至略过本篇教程。&lt;/p&gt;
&lt;h2&gt;开始吧&lt;/h2&gt;
&lt;h3&gt;编写 HTML 结构&lt;/h3&gt;
&lt;p&gt;整个教程采用 ES6 语法编写，无法直接在浏览器预览，所以需要使用 Babel 编译一下，大家可以使用官方的 create-react-app 脚手架搭建开发环境。但是对于本教程而言，我推荐大家使用 CodePen 在线平台编写，简单直接，不需要复杂的环境配置。&lt;/p&gt;
&lt;p&gt;啰嗦一句，在现代化的前端编程中，所有的页面 HTML 元素几乎都是写在 JS 中，这确实更有利于 DOM 操作。与传统前端开发一样，我们同样先把 HTML 结构写出来，先看一看基本的雏形，然后再一点一点把事件添加上去。代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;class App extends React.Component{
  
  render (){
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; (
      &lt;/span&gt;&amp;lt;div&amp;gt;
        &amp;lt;h1&amp;gt;Animate.css&amp;lt;/h1&amp;gt;
        &amp;lt;select&amp;gt;
          &amp;lt;optgroup label=&quot;Attention Seekers&quot;&amp;gt;
            &amp;lt;option value=&quot;bounce&quot;&amp;gt;bounce&amp;lt;/option&amp;gt;
            &amp;lt;option value=&quot;flash&quot;&amp;gt;flash&amp;lt;/option&amp;gt;
            &amp;lt;option value=&quot;pulse&quot;&amp;gt;pulse&amp;lt;/option&amp;gt;
            &amp;lt;option value=&quot;rubberBand&quot;&amp;gt;rubberBand&amp;lt;/option&amp;gt;
            &amp;lt;option value=&quot;shake&quot;&amp;gt;shake&amp;lt;/option&amp;gt;
            &amp;lt;option value=&quot;swing&quot;&amp;gt;swing&amp;lt;/option&amp;gt;
            &amp;lt;option value=&quot;tada&quot;&amp;gt;tada&amp;lt;/option&amp;gt;
            &amp;lt;option value=&quot;wobble&quot;&amp;gt;wobble&amp;lt;/option&amp;gt;
            &amp;lt;option value=&quot;jello&quot;&amp;gt;jello&amp;lt;/option&amp;gt;
          &amp;lt;/optgroup&amp;gt;

          &lt;span&gt;//&lt;/span&gt;&lt;span&gt; ...省略其它动画选项&lt;/span&gt;

        &amp;lt;/select&amp;gt;
        &amp;lt;input type=&quot;button&quot; value=&quot;Animate it&quot;/&amp;gt;
      &amp;lt;/div&amp;gt;
&lt;span&gt;    )
  }
}

ReactDOM.render(&lt;/span&gt;&amp;lt;App /&amp;gt;, document.getElementById('container'));
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;对于熟悉 ES6 语法的朋友，上面的写法不难理解，我们写了一个 React 组件以及一个渲染输出语句。&lt;/p&gt;
&lt;h3&gt;关于状态&lt;/h3&gt;
&lt;p&gt;React 和 jQuery（传统前端编程）的最大不同在于 DOM 操作的方式，React 通过状态变化来更新 DOM，而传统方式则使用事件更新 DOM。但是 React 的状态变化简单来说也要依靠事件驱动。所以对于小白来说不要有太多的思想包袱。上一篇文章《&lt;a href=&quot;http://www.cnblogs.com/nzbin/p/8721656.html&quot; target=&quot;_blank&quot;&gt;如何在已有的 Web 应用中使用 ReactJS&lt;/a&gt;》通过更简单的示例介绍了 React 和 jQuery 的不同之处，感兴趣的同学可以详细了解一下。按照 React 官方规范，我们用以下方法添加状态：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;class App extends React.Component{
  constructor(props){
    super(props);
    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.state =&lt;span&gt; {
      selected:&lt;/span&gt;''&lt;span&gt;
    }
  }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;添加事件&lt;/h3&gt;
&lt;p&gt;jQuery 添加事件的方式是获取引用元素，然后绑定事件，而 React 则是通过 JSX（可以简单理解为模板字符串）直接在元素上绑定事件。这种方式和 DOM 0 级绑定事件的方式类似，但是并不相同。&lt;/p&gt;
&lt;p&gt;添加事件之前，我们先看一下需要哪些事件。首先，我们需要给选择框添加 &lt;code&gt;change&lt;/code&gt; 事件，用于在切换动画时添加一个动画类。另外，当动画结束时我们需要把动画类移除，所以需要绑定一个 &lt;code&gt;animationend&lt;/code&gt; 事件。最后，给 &lt;code&gt;Animate it&lt;/code&gt; 按钮添加一个 &lt;code&gt;click&lt;/code&gt; 事件，点击按钮，重新添加动画类。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;class App extends React.Component{
  constructor(props){
    super(props);
    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.state =&lt;span&gt; {
      selected:&lt;/span&gt;''&lt;span&gt;
    }
    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.animationName = 'bounce'&lt;span&gt;;
  }
  
  handleChange &lt;/span&gt;= (e)=&amp;gt;&lt;span&gt;{
    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.setState({
      selected: e.target.value
    });
    
    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.animationName =&lt;span&gt; e.target.value;
  }
  
  handleAnimationEnd &lt;/span&gt;= (e)=&amp;gt;&lt;span&gt;{
    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.setState({
      selected: &lt;/span&gt;''&lt;span&gt;
    });
  }
  
  handleClick &lt;/span&gt;= (e)=&amp;gt;&lt;span&gt;{
    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.setState({
      selected: &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.animationName
    });
  }
  
  render (){
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; (
      &lt;/span&gt;&amp;lt;div&amp;gt;
        &amp;lt;h1 className={`animated ${&lt;span&gt;this&lt;/span&gt;.state.selected}`} onAnimationEnd={&lt;span&gt;this&lt;/span&gt;.handleAnimationEnd}&amp;gt;Animate.css&amp;lt;/h1&amp;gt;
        &amp;lt;select onChange={&lt;span&gt;this&lt;/span&gt;.handleChange} &amp;gt;

          &lt;span&gt;//&lt;/span&gt;&lt;span&gt; ...省略动画选项&lt;/span&gt;
          
        &amp;lt;/select&amp;gt;
        &amp;lt;input type=&quot;button&quot; value=&quot;Animate it&quot; onClick={&lt;span&gt;this&lt;/span&gt;.handleClick}/&amp;gt;
      &amp;lt;/div&amp;gt;
&lt;span&gt;    )
  }
}

ReactDOM.render(&lt;/span&gt;&amp;lt;App /&amp;gt;, document.getElementById('container'));
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;添加完事件之后，整个教程基本就结束了，或许我的代码并不是最好的。对于刚开始接触 React 或者 JS 基础不太扎实的同学，需要重点理解一下事件绑定时 &lt;code&gt;this&lt;/code&gt; 的指代问题，以上代码使用了箭头函数来解决 &lt;code&gt;this&lt;/code&gt; 的指代问题，还可以使用 &lt;code&gt;bind&lt;/code&gt; 方法。对于涉及动画的问题，还要了解 &lt;code&gt;animationend&lt;/code&gt; 和 &lt;code&gt;transitionend&lt;/code&gt; 两个事件。&lt;/p&gt;
&lt;h2&gt;总结&lt;/h2&gt;
&lt;p&gt;本教程属于 React 非常基础的使用独立状态的例子，没有任何其它复杂的概念，所以非常适合新手。强调一点，本人并不精通 React，也是以一个学习者的姿态写这篇教程。因为 React 并不是我现在重点研究的技术，所以现阶段不想花过多的时间与精力去学习，但还是希望这个简易的系列教程可以帮助想要学习 React 的新人。除了原创教程之外，我在之前也翻译过两篇非常优秀的实战教程，感兴趣的同学可以翻出来学习一下。&lt;/p&gt;
</description>
<pubDate>Sun, 29 Apr 2018 15:12:00 +0000</pubDate>
<dc:creator>叙帝利</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/nzbin/p/8934478.html</dc:identifier>
</item>
<item>
<title>用go实现常用算法与数据结构——队列(queue) - DilonWu</title>
<link>http://www.cnblogs.com/DilonWu/p/8972288.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/DilonWu/p/8972288.html</guid>
<description>&lt;h2 id=&quot;queue-简介&quot;&gt;queue 简介&lt;/h2&gt;
&lt;p&gt;队列是一种非常常见的数据结构，日常生活中也能经常看到。一个典型的队列如下图(图片来自 &lt;a href=&quot;https://segmentfault.com/a/1190000011686427&quot;&gt;segmentfault&lt;/a&gt;)：&lt;br/&gt;&lt;img src=&quot;https://segmentfault.com/img/bVXfY1?w=800&amp;amp;h=351&quot; alt=&quot;queue&quot;/&gt;&lt;br/&gt;可以看出队列和我们日常生活中排队是基本一致的。都遵循 FIFO(First In First Out)的原则。&lt;/p&gt;
&lt;h2 id=&quot;实现&quot;&gt;实现&lt;/h2&gt;
&lt;p&gt;队列可以使用链表或者数组实现，使用链表的优点是扩容简单，缺点是无法通过索引定位元素，使用数组则相反，扩容不容易但是可以通过索引定位元素。文章采用双向链表实现。代码放在github：&lt;/p&gt;
&lt;blockquote readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/AceDarkknight/AlgorithmAndDataStructure/tree/master/queue&quot; class=&quot;uri&quot;&gt;https://github.com/AceDarkknight/AlgorithmAndDataStructure/tree/master/queue&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;链表一般有下面这几个基本操作，先定义一个接口，方便开发和测试：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode go&quot;&gt;
&lt;code class=&quot;sourceCode go&quot;&gt;&lt;span class=&quot;kw&quot;&gt;type&lt;/span&gt; Queue &lt;span class=&quot;kw&quot;&gt;interface&lt;/span&gt; {
    &lt;span class=&quot;co&quot;&gt;// 获取当前链表长度。&lt;/span&gt;
    Length() &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt;
    &lt;span class=&quot;co&quot;&gt;// 获取当前链表容量。&lt;/span&gt;
    Capacity() &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt;
    &lt;span class=&quot;co&quot;&gt;// 获取当前链表头结点。&lt;/span&gt;
    Front() *Node
    &lt;span class=&quot;co&quot;&gt;// 获取当前链表尾结点。&lt;/span&gt;
    Rear() *Node
    &lt;span class=&quot;co&quot;&gt;// 入列。&lt;/span&gt;
    Enqueue(value &lt;span class=&quot;kw&quot;&gt;interface&lt;/span&gt;{}) &lt;span class=&quot;dt&quot;&gt;bool&lt;/span&gt;
    &lt;span class=&quot;co&quot;&gt;// 出列。&lt;/span&gt;
    Dequeue() &lt;span class=&quot;kw&quot;&gt;interface&lt;/span&gt;{}
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;笔者的实现中，front 和 rear 节点不保存具体值，只是用来指示真正头尾节点的位置。&lt;/p&gt;
&lt;h3 id=&quot;链表实现的队列&quot;&gt;链表实现的队列&lt;/h3&gt;
&lt;p&gt;入列的实现如下：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;sourceCode go&quot;&gt;
&lt;code class=&quot;sourceCode go&quot;&gt;&lt;span class=&quot;co&quot;&gt;// normalQueue.go&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;func&lt;/span&gt; (q *NormalQueue) Enqueue(value &lt;span class=&quot;kw&quot;&gt;interface&lt;/span&gt;{}) &lt;span class=&quot;dt&quot;&gt;bool&lt;/span&gt; {
    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; q.length == q.capacity || value == &lt;span class=&quot;ot&quot;&gt;nil&lt;/span&gt; {
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;false&lt;/span&gt;
    }

    node := &amp;amp;Node{
        value: value,
    }

    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; q.length == &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt; {
        q.front.next = node
    }

    node.previous = q.rear.previous
    node.next = q.rear
    q.rear.previous.next = node
    q.rear.previous = node
    q.length++

    &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;true&lt;/span&gt;
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;出列的实现：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode go&quot;&gt;
&lt;code class=&quot;sourceCode go&quot;&gt;&lt;span class=&quot;co&quot;&gt;// normalQueue.go&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;func&lt;/span&gt; (q *NormalQueue) Dequeue() &lt;span class=&quot;kw&quot;&gt;interface&lt;/span&gt;{} {
    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; q.length == &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt; {
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;nil&lt;/span&gt;
    }

    result := q.front.next
    q.front.next = result.next
    result.next = &lt;span class=&quot;ot&quot;&gt;nil&lt;/span&gt;
    result.previous = &lt;span class=&quot;ot&quot;&gt;nil&lt;/span&gt;
    q.length--

    &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; result.value
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可以看到，具体实现和链表基本一致，这种方法好处在于不需要考虑数组溢出的问题。但是有时候，我们可能会向 queue 插入相同的元素，我们当前的实现是无法判断数据是否已经存在的，这时我们就需要实现一个无重复元素的 queue。&lt;/p&gt;
&lt;h3 id=&quot;无重复元素的队列&quot;&gt;无重复元素的队列。&lt;/h3&gt;
&lt;p&gt;我们只需要在原来的基础上加一个 Map 存放我们的具体值就可以了。直接上代码：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;12&quot;&gt;
&lt;pre class=&quot;sourceCode go&quot;&gt;
&lt;code class=&quot;sourceCode go&quot;&gt;&lt;span class=&quot;co&quot;&gt;// uniqueQueue.go&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;func&lt;/span&gt; (q *UniqueQueue) Enqueue(value &lt;span class=&quot;kw&quot;&gt;interface&lt;/span&gt;{}) &lt;span class=&quot;dt&quot;&gt;bool&lt;/span&gt; {
    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; q.length == q.capacity || value == &lt;span class=&quot;ot&quot;&gt;nil&lt;/span&gt; {
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;false&lt;/span&gt;
    }

    node := &amp;amp;Node{
        value: value,
    }

    &lt;span class=&quot;co&quot;&gt;// Ignore uncomparable type.&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; kind := reflect.TypeOf(value).Kind(); kind == reflect.Map || kind == reflect.Slice || kind == reflect.Func {
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;false&lt;/span&gt;
    }

    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; v, ok := q.nodeMap[value]; ok || v {
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;false&lt;/span&gt;
    }

    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; q.length == &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt; {
        q.front.next = node
    }

    node.previous = q.rear.previous
    node.next = q.rear
    q.rear.previous.next = node
    q.rear.previous = node

    q.nodeMap[value] = &lt;span class=&quot;ot&quot;&gt;true&lt;/span&gt;

    q.length++

    &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;true&lt;/span&gt;
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;因为在 golang 中，map 的 key 必须是可以比较的，所以我们需要排除 Map、slice、function 这些不可比较的类型。剩下的实现和上面的就差不多了。再看出列操作：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode go&quot;&gt;
&lt;code class=&quot;sourceCode go&quot;&gt;&lt;span class=&quot;co&quot;&gt;// uniqueQueue.go&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;func&lt;/span&gt; (q *UniqueQueue) Dequeue() &lt;span class=&quot;kw&quot;&gt;interface&lt;/span&gt;{} {
    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; q.length == &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt; {
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;nil&lt;/span&gt;
    }

    result := q.front.next

    &lt;span class=&quot;fu&quot;&gt;delete&lt;/span&gt;(q.nodeMap, result.value)

    q.front.next = result.next
    result.next = &lt;span class=&quot;ot&quot;&gt;nil&lt;/span&gt;
    result.previous = &lt;span class=&quot;ot&quot;&gt;nil&lt;/span&gt;

    q.length--

    &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; result.value
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上面两个队列都是基于链表实现的，下面介绍一下基于数组实现的循环队列。&lt;/p&gt;
&lt;h3 id=&quot;循环队列&quot;&gt;循环队列&lt;/h3&gt;
&lt;p&gt;循环队列通过复用数组元素来达到“循环”的效果。简单来说就是如果数组前面有位置，就把元素放进去。具体原理可以看&lt;a href=&quot;https://www.geeksforgeeks.org/queue-set-1introduction-and-array-implementation/&quot;&gt;这里&lt;/a&gt;。入列代码如下：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode go&quot;&gt;
&lt;code class=&quot;sourceCode go&quot;&gt;&lt;span class=&quot;co&quot;&gt;// cyclicQueue.go&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;func&lt;/span&gt; (q *CyclicQueue) Enqueue(value &lt;span class=&quot;kw&quot;&gt;interface&lt;/span&gt;{}) &lt;span class=&quot;dt&quot;&gt;bool&lt;/span&gt; {
    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; q.length == q.capacity || value == &lt;span class=&quot;ot&quot;&gt;nil&lt;/span&gt; {
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;false&lt;/span&gt;
    }

    node := &amp;amp;Node{
        value: value,
    }

    index := (q.rear + &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;) % &lt;span class=&quot;fu&quot;&gt;cap&lt;/span&gt;(q.nodes)
    q.nodes[index] = node
    q.rear = index
    q.length++

    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; q.length == &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt; {
        q.front = index
    }

    &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;true&lt;/span&gt;
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;出列操作也类似：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode go&quot;&gt;
&lt;code class=&quot;sourceCode go&quot;&gt;&lt;span class=&quot;co&quot;&gt;// cyclicQueue.go&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;func&lt;/span&gt; (q *CyclicQueue) Dequeue() &lt;span class=&quot;kw&quot;&gt;interface&lt;/span&gt;{} {
    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; q.length == &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt; {
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;nil&lt;/span&gt;
    }

    result := q.nodes[q.front].value
    q.nodes[q.front] = &lt;span class=&quot;ot&quot;&gt;nil&lt;/span&gt;
    index := (q.front + &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;) % &lt;span class=&quot;fu&quot;&gt;cap&lt;/span&gt;(q.nodes)
    q.front = index
    q.length--

    &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; result
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;reference&quot;&gt;Reference&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://www.geeksforgeeks.org/queue-set-1introduction-and-array-implementation/&quot; class=&quot;uri&quot;&gt;https://www.geeksforgeeks.org/queue-set-1introduction-and-array-implementation/&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Sun, 29 Apr 2018 15:06:00 +0000</pubDate>
<dc:creator>DilonWu</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/DilonWu/p/8972288.html</dc:identifier>
</item>
<item>
<title>webpack 4 + mockjs - 西芹番茄</title>
<link>http://www.cnblogs.com/xiqinfanqie/p/8972258.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/xiqinfanqie/p/8972258.html</guid>
<description>&lt;h2&gt;一、创建项目目录&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1092674/201804/1092674-20180429214853650-848783670.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;二、添加开发依赖( html-webpack-plugin、webpack、webpack-cli、webpack-dev-server、webpack-api-mocker)&lt;/h2&gt;
&lt;p&gt;如下所示位于package.json文件中&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;...
&lt;/span&gt;&quot;devDependencies&quot;&lt;span&gt;: {
    &lt;/span&gt;&quot;html-webpack-plugin&quot;: &quot;^3.2.0&quot;&lt;span&gt;,
    &lt;/span&gt;&quot;webpack&quot;: &quot;^4.6.0&quot;&lt;span&gt;,
    &lt;/span&gt;&quot;webpack-cli&quot;: &quot;^2.0.15&quot;&lt;span&gt;,
    &lt;/span&gt;&quot;webpack-dev-server&quot;: &quot;^3.1.3&quot;&lt;span&gt;,
    &lt;/span&gt;&quot;webpack-api-mocker&quot;: &quot;^1.4.3&quot;&lt;span&gt;
  },
...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;使用npm install 或者 yarn install (推荐，原因你懂的)&lt;/p&gt;
&lt;h2&gt;三、创建 webpack.config.js 文件，编写相关配置&lt;/h2&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;49&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; const path = require('path'&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; const HtmlWebpackPlugin = require('html-webpack-plugin'&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; const apiMocker = require('webpack-api-mocker'&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; 
&lt;span&gt; 5&lt;/span&gt; module.exports =&lt;span&gt; {
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;     mode: 'development', &lt;span&gt;//&lt;/span&gt;&lt;span&gt;当前环境&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt;     entry: { &lt;span&gt;//&lt;/span&gt;&lt;span&gt;程序的启动入口&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt;         app: './src/index.js'
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;    },
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;    devServer: {
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;         &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;***************此处星星多，注意看此处***************************&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;利用webpack-dev-server 的before 方法调用webpack-api-mocker&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; path.resolve('./mocker/index.js') 中的'./mocker/index.js'为mock文件的相对路径&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt;         &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;**************以上只是个人的浅显理解罢了（有不同理解请交流）*****************&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt; &lt;span&gt;        before(app) {
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;             apiMocker(app, path.resolve('./mocker/index.js'&lt;span&gt;), {
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;                 &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 'GET /api/users/list': 'http://localhost:3000',&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt;                 &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 'GET /api/userinfo/:id': 'http://localhost:3000',&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt; &lt;span&gt;            })
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;    },
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;     output: { &lt;span&gt;//&lt;/span&gt;&lt;span&gt;配置文件输出路径&lt;/span&gt;
&lt;span&gt;23&lt;/span&gt;         filename: '[name].bundle.js'&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;         path: path.resolve(__dirname, 'dist'&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; &lt;span&gt;    },
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;     plugins: [ &lt;span&gt;//&lt;/span&gt;&lt;span&gt;利用模板文件生成.html&lt;/span&gt;
&lt;span&gt;27&lt;/span&gt;         &lt;span&gt;new&lt;/span&gt;&lt;span&gt; HtmlWebpackPlugin({
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;             title: 'webpack+react'&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;             template: &quot;./src/entry.ejs&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;             filename: &quot;./index.html&quot;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; &lt;span&gt;        }),
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; &lt;span&gt;    ]
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; };
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;话不多说直接上‘./mocker/index.js’文件&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; module.exports =&lt;span&gt; {
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;     [`GET /api/user`]: (req, res) =&amp;gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;         console.log('----&amp;gt;'&lt;span&gt;, req.params);
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; res.json({
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;             id: 1&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;             username: 'kenny'&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;             sex: 6
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;        });
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;附录1.&lt;/p&gt;
&lt;p&gt;　　webpack.config.js中的entry.ejs文件&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html &lt;/span&gt;&lt;span&gt;lang&lt;/span&gt;&lt;span&gt;=&quot;en&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt; 
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;http-equiv&lt;/span&gt;&lt;span&gt;=&quot;Content-type&quot;&lt;/span&gt;&lt;span&gt; content&lt;/span&gt;&lt;span&gt;=&quot;text/html; charset=utf-8&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt;     &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;看这里，看这里，请看我这里&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt;         &lt;span&gt;&amp;lt;%&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; htmlWebpackPlugin.options.title &lt;/span&gt;&lt;span&gt;%&amp;gt;&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt;     &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 如果不这这样写 html-webpack-plugin 中的title是不生效的哦&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;link &lt;/span&gt;&lt;span&gt;rel&lt;/span&gt;&lt;span&gt;=&quot;stylesheet&quot;&lt;/span&gt;&lt;span&gt; href&lt;/span&gt;&lt;span&gt;=&quot;/favicon.png&quot;&lt;/span&gt;&lt;span&gt; type&lt;/span&gt;&lt;span&gt;=&quot;text/css&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt; 
&lt;span&gt;14&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt;     &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; &amp;lt;div id=&quot;root&quot;&amp;gt;&amp;lt;/div&amp;gt; &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt; &lt;span&gt;    Visit :/mocker/index.js to customize the API Try it?
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;hr&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;name:
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;span &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;name&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;21&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;age:
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;span &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;age&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;23&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;24&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;25&lt;/span&gt; 
&lt;span&gt;26&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　webpack.config.js 配置文件中的 entry下app对应值的index.js文件&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; fetch('/api/user'&lt;span&gt;, {
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;         'Accept': 'application/json'&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;         'Content-Type': 'application/x-www-form-urlencoded'&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;    })
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;     .then((response) =&amp;gt;&lt;span&gt; response.json())
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;     .then(data =&amp;gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;         console.log('data:'&lt;span&gt;, data);
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;         document.getElementById('name').innerHTML =&lt;span&gt; data.username;
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;         document.getElementById('age').innerHTML =&lt;span&gt; data.sex;
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;     })
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;OK！接下来npm start 或者 yarn install 运行下试试吧。&lt;/p&gt;
&lt;p&gt;效果图如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1092674/201804/1092674-20180429225705029-640478487.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;思维重构&lt;/span&gt;：以上方式多个mock文件时不就需要改动webpack.config.js文件？这种事情我是绝不允许的。各位看客请看：&lt;/p&gt;
&lt;p&gt;　　解决方法：编写webpack.mocker.js文件为所有mock文件的总成，启动时自动包装mock(话不多说直接上代码)&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; const mock =&lt;span&gt; {};
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; 
&lt;span&gt;3&lt;/span&gt; require('fs').readdirSync(require('path').join(__dirname + '/mocker')).forEach(&lt;span&gt;function&lt;/span&gt;&lt;span&gt; (file) {
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;     Object.assign(mock, require('./mocker/' +&lt;span&gt; file))
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt; &lt;span&gt;});
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt; module.exports = mock;
&lt;/pre&gt;&lt;/div&gt;

</description>
<pubDate>Sun, 29 Apr 2018 14:59:00 +0000</pubDate>
<dc:creator>西芹番茄</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/xiqinfanqie/p/8972258.html</dc:identifier>
</item>
<item>
<title>任意点~并查集求联通块 - 弃疗大表哥</title>
<link>http://www.cnblogs.com/qldabiaoge/p/8972252.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/qldabiaoge/p/8972252.html</guid>
<description>&lt;p&gt;链接：&lt;a href=&quot;https://www.nowcoder.com/acm/contest/84/C&quot; target=&quot;_blank&quot;&gt;https://www.nowcoder.com/acm/contest/84/C&lt;/a&gt;&lt;br/&gt;来源：牛客网&lt;/p&gt;

&lt;div class=&quot;terminal-topic&quot; readability=&quot;11.5&quot;&gt;
&lt;div class=&quot;subject-question&quot; readability=&quot;8&quot;&gt;
&lt;p&gt;时间限制：C/C++ 1秒，其他语言2秒&lt;br/&gt;空间限制：C/C++ 32768K，其他语言65536K&lt;br/&gt;64bit IO Format: %lld&lt;br/&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;h2 class=&quot;subject-item-title&quot;&gt;题目描述&lt;/h2&gt;
&lt;div class=&quot;subject-describe&quot; readability=&quot;15&quot;&gt;
&lt;p&gt;平面上有若干个点，从每个点出发，你可以往东南西北任意方向走，直到碰到另一个点，然后才可以改变方向。&lt;br/&gt;请问至少需要加多少个点，使得点对之间互相可以到达。&lt;/p&gt;
&lt;h2&gt;输入描述:&lt;/h2&gt;
&lt;pre&gt;
第一行一个整数n表示点数（ 1 &amp;lt;= n &amp;lt;= 100)。&lt;br/&gt;第二行n行，每行两个整数x
&lt;/pre&gt;
&lt;sub&gt;i&lt;/sub&gt;&lt;pre&gt;
, y
&lt;/pre&gt;
&lt;sub&gt;i&lt;/sub&gt;&lt;pre&gt;
表示坐标（ 1 &amp;lt;= x
&lt;/pre&gt;
&lt;sub&gt;i&lt;/sub&gt;&lt;pre&gt;
, y
&lt;/pre&gt;
&lt;sub&gt;i &lt;/sub&gt;&lt;pre&gt;
&amp;lt;= 1000)。&lt;br/&gt;y轴正方向为北，x轴正方形为东。
&lt;/pre&gt;
&lt;h2&gt;输出描述:&lt;/h2&gt;
&lt;pre&gt;
输出一个整数表示最少需要加的点的数目。
&lt;/pre&gt;

&lt;div class=&quot;question-oi&quot;&gt;
&lt;p&gt;示例2&lt;/p&gt;
&lt;div class=&quot;question-oi-bd&quot;&gt;

&lt;div class=&quot;question-oi-mod&quot; readability=&quot;6&quot;&gt;
&lt;h2&gt;输出&lt;/h2&gt;
&lt;div class=&quot;question-oi-cont&quot; readability=&quot;15.5&quot;&gt;
&lt;pre readability=&quot;5&quot;&gt;
0&lt;p&gt;这个就是一个并查集求联通快
&lt;/p&gt;&lt;/pre&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;45&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; #include &amp;lt;cstdio&amp;gt;
&lt;span&gt; 2&lt;/span&gt; #include &amp;lt;algorithm&amp;gt;
&lt;span&gt; 3&lt;/span&gt; #include &amp;lt;vector&amp;gt;
&lt;span&gt; 4&lt;/span&gt; #include &amp;lt;queue&amp;gt;
&lt;span&gt; 5&lt;/span&gt; #include &amp;lt;cstring&amp;gt;
&lt;span&gt; 6&lt;/span&gt; #include &amp;lt;&lt;span&gt;string&lt;/span&gt;&amp;gt;
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;using&lt;/span&gt; &lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; std;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;const&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; maxn = 1e4 + &lt;span&gt;10&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; 
&lt;span&gt;10&lt;/span&gt; typedef &lt;span&gt;long&lt;/span&gt; &lt;span&gt;long&lt;/span&gt;&lt;span&gt; LL ;
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; fa[maxn], x[maxn], y[maxn];
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; 
&lt;span&gt;13&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; init(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; n) {
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt; ; i &amp;lt;= n ; i++&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;         fa[i] =&lt;span&gt; i;
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; find(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; p) {
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;     &lt;span&gt;while&lt;/span&gt;(p != fa[p]) p =&lt;span&gt; fa[p];
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; p;
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; find_set(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; p)
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;     &lt;span&gt;while&lt;/span&gt;(p!=fa[p]) p=&lt;span&gt;fa[p];
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; p;
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; 
&lt;span&gt;28&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; combine(&lt;span&gt;int&lt;/span&gt; p, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; q) {
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;     &lt;span&gt;int&lt;/span&gt; np =&lt;span&gt; find_set(p);
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;     &lt;span&gt;int&lt;/span&gt; nq =&lt;span&gt; find_set(q);
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (np != nq) fa[np] =&lt;span&gt; nq;
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; 
&lt;span&gt;34&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; main() {
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt;     &lt;span&gt;int&lt;/span&gt;&lt;span&gt; n;
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;freopen(&quot;DATA.txt&quot;,&quot;r&quot;,stdin);&lt;/span&gt;
&lt;span&gt;37&lt;/span&gt;     &lt;span&gt;while&lt;/span&gt;(scanf(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%d&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &amp;amp;n) !=&lt;span&gt; EOF) {
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt; &lt;span&gt;        init(n);
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;1&lt;/span&gt; ; i &amp;lt;= n ; i++&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt;             scanf(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%d%d&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &amp;amp;x[i], &amp;amp;&lt;span&gt;y[i]);
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;1&lt;/span&gt; ; i &amp;lt; n ; i++&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt;             &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; j = i + &lt;span&gt;1&lt;/span&gt; ; j &amp;lt;= n ; j++&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt; (x[i] == x[j] || y[i] ==&lt;span&gt; y[j] ) combine(i, j);
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt; ans = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;1&lt;/span&gt; ; i &amp;lt;= n ; i++&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (fa[i] == i) ans++&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt;         printf(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%d\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, ans - &lt;span&gt;1&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;49&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;50&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;51&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
<pubDate>Sun, 29 Apr 2018 14:57:00 +0000</pubDate>
<dc:creator>弃疗大表哥</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/qldabiaoge/p/8972252.html</dc:identifier>
</item>
<item>
<title>delphi 组件安装教程详解 - 晓不得2013</title>
<link>http://www.cnblogs.com/lackey/p/8972221.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/lackey/p/8972221.html</guid>
<description>&lt;p&gt;学习安装组件的最好方法，就是自己编写一个组件并安装一遍，然后就真正明白其中的原理了。&lt;/p&gt;

&lt;p&gt;本例，编写了两个BPL, dclSimpleEdit.bpl 与 SimpleLabel.bpl ,其中，dclSimpleEdit.bpl 依赖 SimpleLabel.bpl ，&lt;/p&gt;
&lt;p&gt;或者说 dclSimpleEdit.bpl 需要 SimpleLabel.bpl 才能运行。这也是多数组件安装问题之典型！&lt;/p&gt;



&lt;p&gt;一、首先在delphi中打开 ComponentStudy 目录中的 ComponetStudy.bpg ,此为工程组文件。&lt;/p&gt;
&lt;div&gt;&lt;img alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;div&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/548100/201804/548100-20180429221945019-1980928644.png&quot; alt=&quot;&quot;/&gt; &lt;/div&gt;
&lt;p&gt;二、然后切换到 Project  Manager (Ctrl + alt +F11 ) 窗口&lt;/p&gt;
&lt;div&gt;&lt;img alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;div&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/548100/201804/548100-20180429221959366-874361480.png&quot; alt=&quot;&quot;/&gt; &lt;/div&gt;
&lt;p&gt;三、在 dclSimpleEditD7.bpl 点右键菜单，选择 Options...&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/548100/201804/548100-20180429222019241-1191925805.png&quot; alt=&quot;&quot;/&gt; &lt;/div&gt;
&lt;div&gt;&lt;img alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;p&gt;按上图设置这两个目录，Output directory 是 xxx.bpl 输出目录。Dcp output directory 是 xxx.dcp 输出目录。&lt;/p&gt;
&lt;p&gt;如果不主动设置这两个目录，它们默认的目录是：C:\Program Files (x86)\Borland\Delphi7\Projects\Bpl&lt;/p&gt;
&lt;p&gt;[在PATH环境变量中，有此目录信息,后面会说到它的作用]&lt;/p&gt;
&lt;p&gt;对 dclSimpleEditD7.bpl 的输出目录，做同样的上述设置(第三步之操作)。&lt;/p&gt;

&lt;p&gt;四、在 SimpleLabel.bpl 上，点右键，选择 Build ,即编译。按同样方式对 dclSimpleEdit.bpl 进行编译。&lt;/p&gt;
&lt;p&gt;因为dclSimpleEdit.bpl 引用了 SimpleLabel.bpl ，所以，要先编译前者。对于组件的安装，需要按顺序编译的原因就在于此。&lt;/p&gt;

&lt;p&gt;五、在 dclSimpleEdit.bpl 点右键，选择 install &lt;/p&gt;
&lt;p&gt;(delphi一般规则是 dcl 开头表示设计时包，设计时包就可以 install 到 delphi ide 中)&lt;/p&gt;
&lt;p&gt;(运行时包，本例中的 SimpleLabel.bpl 则不能 install )&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/548100/201804/548100-20180429222127861-1722950092.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;div&gt;&lt;img alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;p&gt;因为我们在第三步，修改了 BPL 的输出目录，所以，install 时就会出现此错误。(如果是默认目录，不会有此错误)&lt;/p&gt;
&lt;p&gt;当 install 的时候，delphi.exe 加载了 d:\wcp\ComponentStudy\TSimpleEdit\bpl\dclSimpleEdit.bpl 之后,&lt;/p&gt;
&lt;p&gt;dclSimpleEdit.bpl 会立即加载 SimpeLabel.bpl ,因 BPL 与 DLL 相类似，同属于动态动行库，在动态运行库代码中，&lt;/p&gt;
&lt;p&gt;不易获得当前自己目录（不是绝对不能，可以通过其它方法获取到），所以 dclSimpleEdit.bpl 就会从系统 PATH 环境变量&lt;/p&gt;
&lt;p&gt;中的目录去查找 SimpleLabel.bpl ,如果找不到，则报错。解决方法就是在 PATH 环境变量中加上 &lt;/p&gt;
&lt;p&gt;d:\wcp\ComponentStudy\TSimpleEdit\bpl\&lt;/p&gt;

&lt;p&gt;六、以 Win7 64 位为例，演示如何设置 PATH 环境变量&lt;/p&gt;
&lt;p&gt;6.1 选中“计算机”，右键“属性”，再选 “高级系统设置”&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/548100/201804/548100-20180429222150819-158974404.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;div&gt;&lt;img alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;p&gt;6.2 点“编辑”后，在末尾先加上“半角分号”，再输入 d:\wcp\ComponentStudy\bpl\&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/548100/201804/548100-20180429222207969-1221459995.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;div&gt;&lt;img alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;div readability=&quot;7&quot;&gt;6.3 可以这样验证一下&lt;br/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/548100/201804/548100-20180429222235296-127632474.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;div&gt;&lt;img alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;div readability=&quot;7&quot;&gt;6.4 操作完毕之后，重新 delphi ，再 install dclSimpleEdit 就OK了。&lt;br/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/548100/201804/548100-20180429222252113-1504287594.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;div&gt;&lt;img alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;p&gt;6.5 在组件的 SimpleComponent 标签中检查,确认已经安装成功。PATH 环境变量，在任何操作系统，任何软件中都重要，&lt;/p&gt;
&lt;div readability=&quot;7&quot;&gt;如：java 环境安装，andorid 等等，请对其有正确的理解。&lt;img alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;div&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/548100/201804/548100-20180429222330737-321698207.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;p&gt;七，使用此组件。重启 delphi ，打开 ComponentStudy\UseSimpleEdit\UseSimpleEdit.dpr&lt;/p&gt;
&lt;div readability=&quot;8&quot;&gt;并往Form 中拖一个 TSimpleEdit, F9 测试效果。&lt;br/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/548100/201804/548100-20180429222358526-834585283.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;div&gt;&lt;img alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;p&gt;本文的重点是讲组件安装，所写范例代码也比较简单。&lt;/p&gt;

&lt;p&gt;八、关于各种目录的设置问题。&lt;/p&gt;
&lt;div readability=&quot;7&quot;&gt;8.1 菜单 Tools --&amp;gt; Environment Options..&lt;br/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/548100/201804/548100-20180429222415111-325571790.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;div&gt;&lt;img alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;p&gt;8.2 Libray path&lt;/p&gt;
&lt;div&gt;&lt;img alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;div readability=&quot;8&quot;&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/548100/201804/548100-20180429222440819-849089760.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;很明显，已经自动加上了此路径。此路径的作用，可以理解为 pas 文件的搜索路径。&lt;/div&gt;
&lt;p&gt;此路径为全局，对任何工程有效。如果有多个版本的组件共存，可以改变这些目录的顺序，&lt;/p&gt;
&lt;p&gt;来设置当前有效的组件版本。&lt;/p&gt;

&lt;p&gt;8.3 在 exe 工程中，另一处与此功能相同的路径, 菜单 proejct --&amp;gt;Options... (Shift + Ctrl + F11)&lt;/p&gt;
&lt;div&gt;&lt;img alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;div&gt;&lt;img alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;div readability=&quot;8&quot;&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/548100/201804/548100-20180429222507041-758633142.png&quot; alt=&quot;&quot;/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/548100/201804/548100-20180429222519445-1418108872.png&quot; alt=&quot;&quot;/&gt; &lt;br/&gt;此功能为局部，仅属于本工程使用。同样的，此单菜中关于 packages 中的选项，&lt;/div&gt;
&lt;p&gt;亦有“本工程有效BPL”的功效(请自行研究)。这些设置，在多版本组件同时存在于delphi时非常有用。&lt;/p&gt;

&lt;p&gt;九、其它：&lt;/p&gt;
&lt;p&gt;9.1 delphi 安装组件的信息记录在何处,菜单 Component --&amp;gt;Install Package...&lt;/p&gt;
&lt;div&gt;&lt;img alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;div&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/548100/201804/548100-20180429222545319-1037672398.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;div readability=&quot;7&quot;&gt;它实际上存在于注册表中 [HKEY_CURRENT_USER\Software\Borland\Delphi\7.0\Known Packages]&lt;img alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;div readability=&quot;10&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/548100/201804/548100-20180429222604568-357438107.png&quot; alt=&quot;&quot;/&gt; &lt;/p&gt;
&lt;p&gt;9.2 组件自动安装包，实际上就是写注册表，写 PATH 环境变量(libray path 目录信息也是在注册表中)来实现的。&lt;/p&gt;
&lt;p&gt;9.4 多版本组件如何共存。（稍复杂，用处不大，但可行）&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt; a) 要让它们的 BPL 输出在不同的目录中。默认是全部在 C:\Program Files (x86)\Borland\Delphi7\Projects\Bpl ,&lt;/p&gt;
&lt;p&gt;是不行的(bpl同名的问题)，所以各种组件安装教程，让大家先删除掉此目录中的 *xx*.bpl 等操作原因在此。&lt;/p&gt;
&lt;p&gt;(或 PATH 环境变量中所涉及到的目录，如  Windows\System32\ 等，要在这些目录中执行删除 *xx*.bpl 操作)&lt;/p&gt;

&lt;p&gt;b) 不可同时使用，且要使用 8.2 步骤中改变目录顺序。或者用 8.3 菜单中，的 Package 选项，来增减加载的组件。&lt;/p&gt;

&lt;p&gt;十、出错演示，删除掉 PATH 环境变量中的 d:\wcp\ComponentStudy\TSimpleEdit\bpl ，重运行 delphi 结果如下&lt;/p&gt;
&lt;div&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/548100/201804/548100-20180429222715607-190776914.png&quot; alt=&quot;&quot;/&gt;   &lt;/div&gt;
&lt;div&gt;&lt;img alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;div&gt;确定之后&lt;br/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/548100/201804/548100-20180429222724789-1778346952.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;div&gt;&lt;img alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;p&gt;询问是否下一次继续加载。&lt;/p&gt;
&lt;p&gt;此信息的意思是， dclSimpleEditD7.bpl 找不到 SimpleLable.bpl ,是否在下一次&lt;/p&gt;
&lt;div readability=&quot;9&quot;&gt;加载 dclSimpleEditD7.bpl ?

选择是，设置好 PATH 环境变量，重启 delphi 就能正常。&lt;/div&gt;
&lt;p&gt;选择否的结果：&lt;/p&gt;
&lt;div&gt;&lt;img alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;div readability=&quot;8&quot;&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/548100/201804/548100-20180429222742477-334576766.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;已经取消勾选。当然，你设置正确 PATH 变量后，重启后勾上也就可能正常工作了。&lt;/div&gt;
&lt;p&gt;(也可以在这里通过 add 安装组件)&lt;/p&gt;
&lt;p&gt;9.5 如果exe中的组件与安装的版本不相符合时，会出现版本不同，属性不存在等提示，通过学习本教程，&lt;/p&gt;
&lt;p&gt;相信大家就可以解决此类问题了。&lt;/p&gt;

&lt;p&gt;delphi 的组件编写，组件安装，是一套很明晰的规则，而很多人，面对此规则的时候，手忙脚乱，&lt;/p&gt;
&lt;p&gt;到处搜各种秘籍，方法，然而往往解决不到根本问题。&lt;/p&gt;

&lt;p&gt;学习编程知识，一定要从表面现象，洞悉到其原理。这样才能真正掌握。&lt;/p&gt;
&lt;p&gt;又如：delphi各种组件的使用方法，组件千千万，请问谁学得完？&lt;/p&gt;
&lt;p&gt;但是，高手们拿到一个组件，稍加研究，就会使用，这是为什么？&lt;/p&gt;

&lt;p&gt;既要学习“规则，知识小点”，又要上升为“技能，通识”。&lt;/p&gt;














</description>
<pubDate>Sun, 29 Apr 2018 14:52:00 +0000</pubDate>
<dc:creator>晓不得2013</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/lackey/p/8972221.html</dc:identifier>
</item>
<item>
<title>A quike guide teaching you how to use matlab to read netCDF file and plot a figure - 司徒鲜生</title>
<link>http://www.cnblogs.com/stxs/p/8972035.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/stxs/p/8972035.html</guid>
<description>&lt;p class=&quot;Center&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/stxs/p/8972035.html#_Toc512798855&quot;&gt;1.&lt;span&gt;&lt;span&gt;      &lt;/span&gt;&lt;/span&gt; Preparation&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;MsoToc1&quot;&gt;&lt;span class=&quot;MsoHyperlink&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/stxs/p/8972035.html#_Toc512798856&quot;&gt;2.&lt;span&gt;&lt;span&gt;      &lt;/span&gt;&lt;/span&gt; A brief introduce to netCDF&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt; &lt;span&gt;4&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoToc1&quot;&gt;&lt;span class=&quot;MsoHyperlink&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/stxs/p/8972035.html#_Toc512798857&quot;&gt;3.&lt;span&gt;&lt;span&gt;      &lt;/span&gt;&lt;/span&gt; Data Structure&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt; &lt;span&gt;4&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoToc2&quot;&gt;&lt;span class=&quot;MsoHyperlink&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/stxs/p/8972035.html#_Toc512798858&quot;&gt;3.1&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;/span&gt; Attributes&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt; &lt;span&gt;7&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoToc2&quot;&gt;&lt;span class=&quot;MsoHyperlink&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/stxs/p/8972035.html#_Toc512798859&quot;&gt;3.2&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;/span&gt; Dimensions&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt; &lt;span&gt;8&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoToc2&quot;&gt;&lt;span class=&quot;MsoHyperlink&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/stxs/p/8972035.html#_Toc512798860&quot;&gt;3.3&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;/span&gt; Variables&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt; &lt;span&gt;9&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoToc3&quot;&gt;&lt;span class=&quot;MsoHyperlink&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/stxs/p/8972035.html#_Toc512798861&quot;&gt;Classfication&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt; &lt;span&gt;10&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoToc2&quot;&gt;&lt;span class=&quot;MsoHyperlink&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/stxs/p/8972035.html#_Toc512798862&quot;&gt;3.4&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;/span&gt; Groups&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt; &lt;span&gt;11&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoToc1&quot;&gt;&lt;span class=&quot;MsoHyperlink&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/stxs/p/8972035.html#_Toc512798863&quot;&gt;4.&lt;span&gt;&lt;span&gt;      &lt;/span&gt;&lt;/span&gt; Source Code&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt; &lt;span&gt;12&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoToc2&quot;&gt;&lt;span class=&quot;MsoHyperlink&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/stxs/p/8972035.html#_Toc512798864&quot;&gt;4.1&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;/span&gt; Get data from netCDF file&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt; &lt;span&gt;12&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoToc2&quot;&gt;&lt;span class=&quot;MsoHyperlink&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/stxs/p/8972035.html#_Toc512798865&quot;&gt;4.2&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;/span&gt; Get subset data of specified variable&lt;span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt; &lt;span&gt;13&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoToc3&quot;&gt;&lt;span class=&quot;MsoHyperlink&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/stxs/p/8972035.html#_Toc512798866&quot;&gt;Example 1: get the time series of a specified point (lon(11),lat(10))&lt;span&gt;13&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoToc3&quot;&gt;&lt;span class=&quot;MsoHyperlink&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/stxs/p/8972035.html#_Toc512798867&quot;&gt;Example 2: get data of every point at time(0)&lt;span&gt;14&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoToc2&quot;&gt;&lt;span class=&quot;MsoHyperlink&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;a href=&quot;http://www.cnblogs.com/stxs/p/8972035.html#_Toc512798868&quot;&gt;4.3&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;/span&gt; Plot a figure&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt; &lt;/span&gt;&lt;/p&gt;

&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;Software: Matlab 2014a;&lt;/span&gt;&lt;/p&gt;
&lt;div readability=&quot;8&quot;&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;Used netCDF File: example.nc(containd in Matlab Install files), pres.tropp.2015.nc.&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;Instruction/Reference:&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot;&gt;&lt;strong&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;1.&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span lang=&quot;EN-US&quot;&gt;Matlab help documention&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot;&gt;&lt;strong&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1357381/201804/1357381-20180429212746918-510440175.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot;&gt;&lt;strong&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;2. &lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span lang=&quot;EN-US&quot;&gt;NetCDF User's Guide&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;right&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;a href=&quot;https://www.unidata.ucar.edu/software/netcdf/old_docs/docs_4_0_1/&quot;&gt;https://www.unidata.ucar.edu/software/netcdf/old_docs/docs_4_0_1/&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;right&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1357381/201804/1357381-20180429212827506-1375202329.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot;&gt;&lt;strong&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;3. &lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span lang=&quot;EN-US&quot;&gt;NetCDF Documentation&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;right&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;a href=&quot;https://www.unidata.ucar.edu/software/netcdf/docs/index.html&quot;&gt;https://www.unidata.ucar.edu/software/netcdf/docs/index.html&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;right&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1357381/201804/1357381-20180429212843199-1047992684.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;NetCDF is a set of software libraries and self-describing, machine-independent data formats that support the creation, access, and sharing of array-oriented scientific data. NetCDF was developed and is maintained at &lt;a href=&quot;http://www.unidata.ucar.edu/&quot;&gt;Unidata&lt;/a&gt;. Unidata provides data and software tools for use in geoscience education and research.&lt;/span&gt;&lt;/p&gt;
&lt;div align=&quot;center&quot;&gt; 
&lt;p class=&quot;MsoNormal&quot;&gt; &lt;/p&gt;
&lt;table class=&quot;MsoTable15Grid4Accent1&quot; border=&quot;1&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody readability=&quot;2&quot;&gt;&lt;tr&gt;&lt;td width=&quot;183&quot;&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;center&quot;&gt;&lt;strong&gt;&lt;span lang=&quot;EN-US&quot;&gt;Format&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;200&quot;&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;center&quot;&gt;&lt;strong&gt;&lt;span lang=&quot;EN-US&quot;&gt;Model&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;86&quot;&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;center&quot;&gt;&lt;strong&gt;&lt;span lang=&quot;EN-US&quot;&gt;Version&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;137&quot;&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;center&quot;&gt;&lt;strong&gt;&lt;span lang=&quot;EN-US&quot;&gt;Released Year&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;183&quot;&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;strong&gt;&lt;span lang=&quot;EN-US&quot;&gt;Classic format&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td rowspan=&quot;3&quot; width=&quot;200&quot;&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;center&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;classic model&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;86&quot;&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;center&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;1.0~3.5&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;137&quot;&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;center&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;1989~2000&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;183&quot;&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;strong&gt;&lt;span lang=&quot;EN-US&quot;&gt;64-bit offset format&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td rowspan=&quot;2&quot; width=&quot;86&quot;&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;center&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;3.6&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td rowspan=&quot;2&quot; width=&quot;137&quot;&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;center&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;2004&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td rowspan=&quot;2&quot; width=&quot;183&quot;&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;strong&gt;&lt;span lang=&quot;EN-US&quot;&gt;netCDF-4 classic&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;strong&gt;&lt;span lang=&quot;EN-US&quot;&gt;model format&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td rowspan=&quot;2&quot; width=&quot;200&quot;&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;center&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;enhanced model&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;center&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;(netCDF-4 data model)&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td rowspan=&quot;2&quot; width=&quot;86&quot;&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;center&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;4.0&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td rowspan=&quot;2&quot; width=&quot;137&quot;&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;center&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;2008&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td height=&quot;42&quot;&gt; &lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;183&quot;&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;strong&gt;&lt;span lang=&quot;EN-US&quot;&gt;netCDF-4 format&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;
&lt;p class=&quot;MsoListParagraph&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;l&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span lang=&quot;EN-US&quot;&gt;data represented with the classic model can also be represented using the enhanced model;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;l&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span lang=&quot;EN-US&quot;&gt;datasets that use features of the enhanced model, such as user-defined nested data types, cannot be represented with the classic model;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;l&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span lang=&quot;EN-US&quot;&gt;Evolution will continue the commitment to keep the&lt;/span&gt; &lt;span lang=&quot;EN-US&quot;&gt;Backwards Compatibility;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;n&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span lang=&quot;EN-US&quot;&gt;Backwards means the “previous” and Forwards means the “future”;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;l&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span lang=&quot;EN-US&quot;&gt;Knowledge of format details is not required to read or write netCDF datasets, unless you want to understand the performance issues related to disk or server access.&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;l&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span lang=&quot;EN-US&quot;&gt;The netCDF reference library, developed and supported by Unidata, &lt;span&gt;is written in C,with Fortran77, Fortran90, and C++ interfaces. A number of community and commercially supported interfaces to other languages are also available, including IDL, Matlab, Perl,Python, and Ruby.&lt;/span&gt; An independent implementation, also developed and supported by Unidata, is written entirely in Java.&lt;/span&gt;&lt;/p&gt;

&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;By use of the “&lt;strong&gt;ncinfo&lt;/strong&gt;” we can get the structure information of the data source. This information is store in the Workspace. You can also use “&lt;strong&gt;ncdisp&lt;/strong&gt;” to display the contents of the netCDF file in the Command Window.&lt;/span&gt;&lt;/p&gt;
&lt;table class=&quot;MsoTableGrid&quot; border=&quot;1&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody readability=&quot;2&quot;&gt;&lt;tr readability=&quot;6&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;45%&quot; readability=&quot;5&quot;&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;left&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;structure1 = ncinfo(&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;'example.nc'&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;);&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;54%&quot; readability=&quot;5&quot;&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;left&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;structure2 = ncinfo(&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;'pres.tropp.2015.nc'&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;);&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; width=&quot;45%&quot;&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1357381/201804/1357381-20180429212904809-1766328920.png&quot; alt=&quot;&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;54%&quot;&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1357381/201804/1357381-20180429212911473-36100326.png&quot; alt=&quot;&quot;/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;If we sort the data, we can get:&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1357381/201804/1357381-20180429212925581-480666481.png&quot; alt=&quot;&quot; width=&quot;1005&quot; height=&quot;862&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;l&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span lang=&quot;EN-US&quot;&gt;Filename: netCDF file name or URL.&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;l&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span lang=&quot;EN-US&quot;&gt;Name: “/” indicating the full file&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;l&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span lang=&quot;EN-US&quot;&gt;Format: the format of the netCDF file, see section 2.&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;l&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span lang=&quot;EN-US&quot;&gt;Groups: An empty array([]) for all netCDF file format except netCDF-4 format.&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;3.1 &lt;/span&gt;&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;Attributes&lt;/span&gt;&lt;/h2&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span&gt;概述：&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;File&lt;/span&gt;&lt;span&gt;有&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;attributes&lt;/span&gt;&lt;span&gt;，&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;variable&lt;/span&gt;&lt;span&gt;有&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;attributes&lt;/span&gt;&lt;span&gt;；就近原则，描述自己。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;NetCDF attributes are used to store data about the data (ancillary data or metadata(&lt;/span&gt;&lt;span&gt;元数据，描述数据的数据&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;)), we can call them &lt;strong&gt;Global Attributes&lt;/strong&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1357381/201804/1357381-20180429212958470-1285623060.png&quot; alt=&quot;&quot;/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1357381/201804/1357381-20180429213003302-2146062762.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;Most attributes provide information about a specific variable. These are identified by the name (or ID) of that variable, together with the name of the attribute.&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1357381/201804/1357381-20180429213051121-1466169043.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p class=&quot;MsoNormal&quot;&gt; &lt;/p&gt;
&lt;h2&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;3.2 &lt;/span&gt;&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;Dimensions&lt;/span&gt;&lt;/h2&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;A dimension may be used to represent a real physical dimension, for example, time, latitude, longitude, or height. A dimension might also be used to index other quantities, for example station or People.&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;l&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span lang=&quot;EN-US&quot;&gt;Name: the name of the dimension;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;l&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span lang=&quot;EN-US&quot;&gt;Length: number(sample) of values;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;l&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span lang=&quot;EN-US&quot;&gt;Unlimited: Boolean value. Indicates whether this dimension’s length is limited.&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;In a classic or 64-bit offset format dataset you can have at most one UNLIMITED dimension;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;In a netCDF-4 format dataset, multiple UNLIMITED dimensions can be used.&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1357381/201804/1357381-20180429213104087-2001853489.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p class=&quot;Center&quot;&gt; &lt;/p&gt;
&lt;h2&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;3.3 &lt;/span&gt;&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;Variables&lt;/span&gt;&lt;/h2&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;When a variable is defined, its shape is specified as a list of dimensions. These dimensions must already exist.&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;A scalar has no dimension, a vector has one dimension and a matrix has 2 dimensions.&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1357381/201804/1357381-20180429213114693-1439967094.png&quot; alt=&quot;&quot; width=&quot;1256&quot; height=&quot;133&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;l&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span lang=&quot;EN-US&quot;&gt;Dimensions: the same as “independent variables”.&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1357381/201804/1357381-20180429213126591-794218830.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;l&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span lang=&quot;EN-US&quot;&gt;Size: Like the matlab function “size” if the variable is matrix, like the matlab function “length” if the variable is verctor or scalar.&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;l&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span lang=&quot;EN-US&quot;&gt;Attributes: see section 3.1&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;l&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span lang=&quot;EN-US&quot;&gt;ChunkSize: specifying the size of one chunk. If the storage type specified is CONTIGUOUS it is “[]”.&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1357381/201804/1357381-20180429213148288-1491027366.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div readability=&quot;8&quot;&gt;
&lt;p class=&quot;MsoListParagraph&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;l&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span lang=&quot;EN-US&quot;&gt;Fillvalue:Specifies the value to the variable when no other value is specified and use of fill values has been enabled.&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span&gt;最后这两个参数和数据的压缩有关，若数据是压缩过的，则需要解压后才能够读取。不过这些都是由底层的&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;APIs(interface)&lt;/span&gt;&lt;span&gt;实现的，我们可以不用管它。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;l&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span lang=&quot;EN-US&quot;&gt;DeflateLevel:Scalar value between 0 and 9 specifying the amount of compression, where 0 is no compression and 9 is the most compression&lt;/span&gt;&lt;/p&gt;
&lt;div readability=&quot;9&quot;&gt;
&lt;p class=&quot;MsoListParagraph&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;l&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span lang=&quot;EN-US&quot;&gt;Shuffle:Boolean value. True indicates the shuffle filter is enabled for this variable. The shuffle filter can assist with the compression of integer data by changing the byte order in the data stream.&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;h3&gt;&lt;span lang=&quot;EN-US&quot;&gt;Classfication&lt;/span&gt;&lt;/h3&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;strong&gt;&lt;span lang=&quot;EN-US&quot;&gt;Class One:&lt;/span&gt;&lt;/strong&gt; &lt;span lang=&quot;EN-US&quot;&gt;Coordinate variables&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;l&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span lang=&quot;EN-US&quot;&gt;A variable with the same name as a dimension.&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;Center&quot;&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1357381/201804/1357381-20180429213201078-1523111028.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;l&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span lang=&quot;EN-US&quot;&gt;It typically defines a &lt;em&gt;physical coordinate&lt;/em&gt; corresponding to that dimension.&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;n&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span lang=&quot;EN-US&quot;&gt;So that you have alternative means of specifying position along the variable.&lt;/span&gt;&lt;/p&gt;
&lt;table class=&quot;MsoTable15Plain2&quot; border=&quot;1&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody readability=&quot;3&quot;&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; width=&quot;47%&quot;&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;strong&gt;&lt;span lang=&quot;EN-US&quot;&gt;Index (C convention)&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;6%&quot;&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;center&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;0&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;10%&quot;&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;center&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;1&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;6%&quot;&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;center&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;2&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;10%&quot;&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;center&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;3&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;9%&quot;&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;center&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;4&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;7%&quot;&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;center&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;…&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;47%&quot; readability=&quot;5&quot;&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;strong&gt;&lt;span lang=&quot;EN-US&quot;&gt;Index (Fortran convention)&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;6%&quot;&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;center&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;1&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;10%&quot;&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;center&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;2&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;6%&quot;&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;center&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;3&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;10%&quot;&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;center&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;4&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;9%&quot;&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;center&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;5&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;7%&quot;&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;center&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;…&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;6&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;47%&quot; readability=&quot;7&quot;&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;strong&gt;&lt;span lang=&quot;EN-US&quot;&gt;physical coordinate (lat,lon,time etc.)&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;6%&quot;&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;center&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;0&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;10%&quot;&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;center&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;2.5&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;6%&quot;&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;center&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;5&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;10%&quot;&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;center&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;7.5&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;9%&quot;&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;center&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;10&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;7%&quot;&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;center&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;…&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p class=&quot;MsoListParagraph&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;n&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;strong&gt;&lt;span lang=&quot;EN-US&quot;&gt;Matlab netCDF functions adopt C convention such that the counting starts from zero.&lt;/span&gt;&lt;/strong&gt; &lt;span lang=&quot;EN-US&quot;&gt;Diagram below illustrates &lt;strong&gt;the actual index&lt;/strong&gt; that we should use to extract the data using the Matlab functions.&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;center&quot;&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1357381/201804/1357381-20180429213214908-226669052.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;right&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;a href=&quot;http://www.public.asu.edu/~hhuang38/matlab_netcdf_guide.pdf&quot;&gt;http://www.public.asu.edu/~hhuang38/matlab_netcdf_guide.pdf&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;strong&gt;&lt;span lang=&quot;EN-US&quot;&gt;Class Two: Primary variables&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;l&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span lang=&quot;EN-US&quot;&gt;This class can also be devied into two class:the Record variables and the others(just call it Fixed variables here)&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;l&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;strong&gt;&lt;span lang=&quot;EN-US&quot;&gt;Record variables&lt;/span&gt;&lt;/strong&gt;&lt;span lang=&quot;EN-US&quot;&gt;: these variables has the unlimited dimension(like time), their size is variable.&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;l&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;strong&gt;&lt;span lang=&quot;EN-US&quot;&gt;Fixed variables&lt;/span&gt;&lt;/strong&gt;&lt;span lang=&quot;EN-US&quot;&gt;: have a fixed size (number of data values) given by the product(&lt;/span&gt;&lt;span&gt;叉乘、笛卡尔积&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;) of its dimension lengths.&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;3.4 &lt;/span&gt;&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;Groups&lt;/span&gt;&lt;/h2&gt;
&lt;p class=&quot;MsoListParagraph&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;l&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span lang=&quot;EN-US&quot;&gt;Starting with version 4.0, groups can help organize data within a dataset.&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;l&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span lang=&quot;EN-US&quot;&gt;It’s not a type of data. Like a directory structure on a Unix file-system, the grouping feature allows users to organize variables and dimensions into distinct, named, hierarchical areas, called groups.&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;l&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span lang=&quot;EN-US&quot;&gt;Here we use the file “example.nc” to demonstrate the groups’ structure&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1357381/201804/1357381-20180429213239300-74889815.png&quot; alt=&quot;&quot; width=&quot;963&quot; height=&quot;463&quot;/&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;After get know the file structure, we can extract the data of specific “variables”. Here illustrate the step of process.&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;strong&gt;&lt;span lang=&quot;EN-US&quot;&gt;Step 0:&lt;/span&gt;&lt;/strong&gt; &lt;span lang=&quot;EN-US&quot;&gt;use function “ncinfo” or “ncdisp” to check the structure and information of the netCDF file; (this step is unnecessary if you have got known with the data.)&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;strong&gt;&lt;span lang=&quot;EN-US&quot;&gt;Step 1:&lt;/span&gt;&lt;/strong&gt; &lt;span lang=&quot;EN-US&quot;&gt;Open the file;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;strong&gt;&lt;span lang=&quot;EN-US&quot;&gt;Step 2:&lt;/span&gt;&lt;/strong&gt; &lt;span lang=&quot;EN-US&quot;&gt;Extract data from specific “variables”;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;strong&gt;&lt;span lang=&quot;EN-US&quot;&gt;Step 3:&lt;/span&gt;&lt;/strong&gt; &lt;span lang=&quot;EN-US&quot;&gt;close the file;&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;4.1 &lt;/span&gt;&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;Get data from netCDF file&lt;/span&gt;&lt;/h2&gt;
&lt;p class=&quot;code&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;% get information/structure data&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;struct = ncinfo(&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;'pres.tropp.2015.nc'&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;);&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;% open the file(pres.tropp.2015.nc) by Read-only access(NC_NOWRITE)&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;% ncid is a NetCDF file identifier&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;ncid = netcdf.open(&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;'pres.tropp.2015.nc'&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;,&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;'NC_NOWRITE'&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;);&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;% get variable ID(varid) by given its name(pres)&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;varid = netcdf.inqVarID(ncid,&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;'pres'&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;);&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;% get data(pres_data) by specifying the variable ID(varid)&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;pres_data = netcdf.getVar(ncid,varid);&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;% clos the file&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;netcdf.close(ncid);&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;% clear defunct parameters, leave alone the data(pres_data)&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;clear&lt;/span&gt; &lt;span lang=&quot;EN-US&quot;&gt;ncid&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;varid&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;center&quot;&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1357381/201804/1357381-20180429213250655-340601281.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;4.2 &lt;/span&gt;&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;Get subset data of specified variable&lt;/span&gt;&lt;/h2&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;The size of the “pres_data” matrix is 144×73×1460, what if I want to get the sub-matrix of “pres_data”?&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;&lt;span lang=&quot;EN-US&quot;&gt;Example 1: get the time series of a specified point (lon(11),lat(10))&lt;/span&gt;&lt;/h3&gt;
&lt;p class=&quot;code&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;ncid = netcdf.open(&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;'pres.tropp.2015.nc'&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;,&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;'NC_NOWRITE'&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;);&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;varid = netcdf.inqVarID(ncid,&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;'pres'&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;);&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span lang=&quot;EN-US&quot;&gt;series_data = netcdf.getVar(ncid,varid,[10,9,0],[1,1,1460]);&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;   &lt;/span&gt;&lt;/span&gt; &lt;span lang=&quot;EN-US&quot;&gt;% &quot;[10,9,0]&quot; represent the start point (Again, remember that counting starts from zero.)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;   &lt;/span&gt;&lt;/span&gt; &lt;span lang=&quot;EN-US&quot;&gt;% &quot;[1,1,1460]&quot; specifies the amount of the data in each dimension.&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;% plot the data&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;% plot(series_data(:));&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;netcdf.close(ncid);&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;clear&lt;/span&gt; &lt;span lang=&quot;EN-US&quot;&gt;ncid&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;varid&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;series_data is still a 3-dimention matrix, and the first two dimentions’ length is 1. The relation between “series_data” and “pres_data” is below:&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;center&quot;&gt;&lt;strong&gt;&lt;span lang=&quot;EN-US&quot;&gt;series_data(1,1,i) = pres_data(11,10,i),i=1,2,…,1460.&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h3&gt; &lt;/h3&gt;
&lt;h3&gt;&lt;span lang=&quot;EN-US&quot;&gt;Example 2: get data of every point at time(0)&lt;/span&gt;&lt;/h3&gt;
&lt;p class=&quot;code&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;ncid = netcdf.open(&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;'pres.tropp.2015.nc'&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;,&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;'NC_NOWRITE'&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;);&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;varid = netcdf.inqVarID(ncid,&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;'pres'&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;);&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;span&gt;&lt;strong&gt;&lt;span lang=&quot;EN-US&quot;&gt;map_data = netcdf.getVar(ncid,varid,[0,0,0],[144,73,1]);&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;netcdf.close(ncid);&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;clear&lt;/span&gt; &lt;span lang=&quot;EN-US&quot;&gt;ncid&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;varid&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;strong&gt;&lt;span lang=&quot;EN-US&quot;&gt; &lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt;&lt;strong&gt;&lt;span lang=&quot;EN-US&quot;&gt;map_data is a 2-dimention matrix&lt;/span&gt;&lt;/strong&gt;&lt;span lang=&quot;EN-US&quot;&gt;. The relation between “map_data” and “pres_data” is below:&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;center&quot;&gt;&lt;strong&gt;&lt;span lang=&quot;EN-US&quot;&gt;map_data&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span lang=&quot;EN-US&quot;&gt;(i,j) = pres_data(i,j,1),i=1,2,…,144;j=1,2,…,73&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;4.3 &lt;/span&gt;&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;Plot a figure&lt;/span&gt;&lt;/h2&gt;
&lt;p class=&quot;code&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;% open the file&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;ncid = netcdf.open(&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;'pres.tropp.2015.nc'&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;,&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;'NC_NOWRITE'&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;);&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;% get data&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;map_data = netcdf.getVar(ncid,netcdf.inqVarID(ncid,&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;'pres'&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;),[0,0,0],[144,73,1]);&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;longitude = netcdf.getVar(ncid,netcdf.inqVarID(ncid,&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;'lon'&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;));&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;latitude = netcdf.getVar(ncid,netcdf.inqVarID(ncid,&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;'lat'&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;));&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;% Time = netcdf.getVar(ncid,netcdf.inqVarID(ncid,'time'));&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;% clos the file&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;netcdf.close(ncid);&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;% plot the data&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;strong&gt;&lt;span lang=&quot;EN-US&quot;&gt;map_data = map_data';&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/strong&gt; &lt;strong&gt;&lt;span lang=&quot;EN-US&quot;&gt;% map_data must be transposed&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;(see below for details)&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;[x,y]=meshgrid(longitude,latitude);&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;pcolor(x,y,map_data);&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;colorbar(&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;'location'&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;,&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;'eastoutside'&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;);&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;shading&lt;/span&gt; &lt;span lang=&quot;EN-US&quot;&gt;interp&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;;colormap&lt;/span&gt; &lt;span lang=&quot;EN-US&quot;&gt;parula&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;% clear defunct parameters&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;clear&lt;/span&gt; &lt;span lang=&quot;EN-US&quot;&gt;ncid&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;x&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;y&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;code&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1357381/201804/1357381-20180429213315256-1596326108.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;l&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span lang=&quot;EN-US&quot;&gt;Be careful when you plot the figure, the 1&lt;sup&gt;st&lt;/sup&gt; dimension of the “map_data” is longitude, same as row of the matrix.&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;Center&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1357381/201804/1357381-20180429213325671-1797416669.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;l&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span lang=&quot;EN-US&quot;&gt;The y-axis of the figure will be “longitude” if “map_dat” is not transposed.&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;Center&quot;&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1357381/201804/1357381-20180429213336045-1713043215.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
</description>
<pubDate>Sun, 29 Apr 2018 13:39:00 +0000</pubDate>
<dc:creator>司徒鲜生</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/stxs/p/8972035.html</dc:identifier>
</item>
<item>
<title>[JCIP笔记]（五）JDK并发包 - mozi_song</title>
<link>http://www.cnblogs.com/mozi-song/p/8972012.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/mozi-song/p/8972012.html</guid>
<description>&lt;p&gt;这一节来讲一讲java.util.concurrent这个包里的一些重要的线程安全有关类。&lt;/p&gt;
&lt;h2&gt;synchronized容器&lt;/h2&gt;
&lt;p&gt;synchronized容器就是把自己的内部状态封装起来，通过把每一个public方法设置成同步来控制对共享变量的访问的容器。主要包括Vector, Hashtable，以及Collections.synchronizedxxx()方法提供的wrapper。&lt;/p&gt;
&lt;h3&gt;synchronized容器的问题-client locking&lt;/h3&gt;
&lt;p&gt;首先，synchronzied容器虽然是线程安全的，但是要访问容器内部数据的线程只能先拿到容器的内置锁才能访问，实际上相当于串行访问，CPU利用率和效率都不高。&lt;br/&gt;另外还有一个值得注意的地方，就是用户代码使用synchronized容器时，如果需要做一些复合操作，比如put-if-absent，仍然要显式加锁（称为client locking），否则会产生race condition。&lt;br/&gt;比如以下操作：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;public&lt;/span&gt;&lt;span&gt; Object getLast(Vector list){
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; 　　&lt;span&gt;int&lt;/span&gt; last = list.size() - 1; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;
&lt;span&gt;3&lt;/span&gt; 　　&lt;span&gt;return&lt;/span&gt; list.get(last); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;
&lt;span&gt;4&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; removeLast(Vector list){
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt; 　　&lt;span&gt;int&lt;/span&gt; last = list.size() - 1; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;
&lt;span&gt;7&lt;/span&gt; 　　list.remove(last); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;
&lt;span&gt;8&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;以上两个方法都对Vector进行了复合操作，在不加锁的情况下可能产生这样一种场景：线程A调用getLast()，同时线程B调用removeLast()。线程A进行step 1拿到last同时线程B也拿到同样的last；此时由于线程调度上的原因，线程B先执行了step 4删除了最后一个节点，而线程A在此之后才执行step 2， 由于最后一个节点已被删除，线程A这里会报ArrayIndexOutOfBoundsException，而这个错误并不是用户希望看到的。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1154131/201804/1154131-20180429210552496-163537621.png&quot; alt=&quot;&quot; width=&quot;582&quot; height=&quot;144&quot;/&gt;&lt;/p&gt;&lt;p&gt;所以如果要按照类似的方法使用synchronized容器的话还是需要自己加锁。由于这些容器内部的线程安全策略是使用自己的内置锁，所以用户代码加锁的时候需要用到的是容器本身。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;public&lt;/span&gt;&lt;span&gt; Object getLast(Vector list){
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 　　&lt;span&gt;synchronized&lt;/span&gt;&lt;span&gt;(list){
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; 　　　　&lt;span&gt;int&lt;/span&gt; last = list.size() - 1; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt; 　　　　&lt;span&gt;return&lt;/span&gt; list.get(last); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;　　}
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; removeLast(Vector list){
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; 　　&lt;span&gt;synchronized&lt;/span&gt;&lt;span&gt;(list){
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; 　　　　&lt;span&gt;int&lt;/span&gt; last = list.size() - 1; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt; 　　　　list.remove(last); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt; &lt;span&gt;　　}
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;除了这些用户自定义的复合操作之外，其实iteration也算复合操作，所以也应该加锁。此处应注意两点：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt; 容器自带的Iterator本身不支持并发修改，所以它提供了一个所谓的fail-fast的并发修改报错机制，即容器自身维护一个modCount域，Iterator在创建时记录这个modCount的值，如果在用户遍历容器的过程中modCount值发生了改变，则说明有另一个线程对容器做出了修改，那么Iterator马上会抛出ConcurrentModificationException。&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;　　　　这个机制严格意义上并不能够100%地探测到并发修改，因为modCount这个域并不是volatile的，在判断　　　　&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;　　　　if&lt;/span&gt;(modCount == expectedModCount)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　　时也并未加锁。作者描述这个机制是在考虑性能的情况下所做的一个best-effort的努力。总之，不应该对这个机制做过多的依赖。&lt;/p&gt;
&lt;p&gt;　      2.  有一些容器自带的方法看起来很无辜，但内部会用到iterator，所以用户用到这些无辜方法的时候还是要加锁。比如我们常用的toString, for-each语法，hashCode, equals, containsAll, removeAll, retainAll, 以其他容器为参数的构造器，等等。而这些方法有时候也是被隐式调用的，很难检查到，比如：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;　　　　1&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;...add some elements to the set&lt;/span&gt;
　　　　&lt;span&gt;2&lt;/span&gt; System.out.println(&quot;DEBUG: added ten elements to &quot; + set);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　　　这里打印时set.toString()方法被隐式调用了。&lt;/p&gt;
&lt;h3&gt;client locking的问题&lt;/h3&gt;
&lt;p&gt;由于client code尝试使用容器内部的线程安全机制，所以容易导致starvation和deadlock，这是因为任意代码都可以使用容器的内置锁，散落在各处的线程安全机制使得程序很难维护和debug。如果要解决这个问题，可以把容器克隆到线程内部进行使用，但每次使用的时候都要重新克隆，要考虑克隆本身带来的代价。&lt;/p&gt;
&lt;h2&gt;Concurrent容器&lt;/h2&gt;
&lt;p&gt;相比于synchronized容器，Concurrent容器可以提供更高的并发性。&lt;br/&gt;如果需要并发的Map，相比于synchronized Map，可以优先考虑ConcurrentHashMap；同理，相比于synchronized List/Set，可以优先考虑CopyOnWriteArrayList/Set；相比于synchronized SortedMap/Set，可以优先考虑ConcurrentSkipMap/Set。&lt;/p&gt;
&lt;h3&gt;ConcurrentHashMap&lt;/h3&gt;
&lt;p&gt;+ 使用了比Hashtable更细粒度的lock striping线程安全策略，支持多个（有限个）线程同时读写。&lt;br/&gt;+ 提供的Iterator是weakly consistent的，容许并发修改。&lt;br/&gt;- size/isEmpty等方法只提供估算值。&lt;br/&gt;- 由于使用的锁对象是private的，不支持client-side locking。（但是提供put-if-absent等复合操作）&lt;/p&gt;
&lt;h3&gt;CopyOnWriteArrayList&lt;/h3&gt;
&lt;p&gt;+ 每次改动时创建和发布新的collection copy。&lt;br/&gt;+ 内部array是effectively immutable的，因此发布后可以不加锁地安全访问。&lt;br/&gt;+ 适用于iteration &amp;gt;&amp;gt; modification的情况，如listeners。&lt;/p&gt;
&lt;h2&gt;BlockingQueue与生产者-消费者&lt;/h2&gt;
&lt;p&gt;BlockingQueue的最大好处是它不仅是一个简单的容器，它还能提供flow-control，能让程序在消息过多的情况下仍然保持健壮。&lt;/p&gt;
&lt;h3&gt;特殊的BlockingQueue: SynchronousQueue&lt;/h3&gt;
&lt;p&gt;一种很特殊的queue，实际上没有内在的存储，只是用于线程间的交接（rendezvous）。适用于消费者够多的情况，比起BlockingQueue的最大好处是没有交接成本。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; Thread producer = &lt;span&gt;new&lt;/span&gt; Thread(&quot;PRODUCER&quot;&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 　　&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; run() {
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; 　　　　String event = &quot;MY_EVENT&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; 　　　　&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; 　　　　　　queue.put(event); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; thread will block here&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt; 　　　　　　System.out.printf(&quot;[%s] published event : %s %n&quot;&lt;span&gt;, Thread.currentThread().getName(), event);
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; 　　　　} &lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (InterruptedException e) {
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;　　　　　　e.printStackTrace();
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;　　　　}
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;　　}
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;};
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; producer.start(); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; starting publisher thread&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt; 
&lt;span&gt;14&lt;/span&gt; 
&lt;span&gt;15&lt;/span&gt; Thread consumer = &lt;span&gt;new&lt;/span&gt; Thread(&quot;CONSUMER&quot;&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; 　　&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; run() {
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; 　　　　&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; 　　　　　　String event = queue.take(); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; thread will block here&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt; 　　　　　　System.out.printf(&quot;[%s] consumed event : %s %n&quot;&lt;span&gt;, Thread.currentThread().getName(), event);
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; 　　　　} &lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (InterruptedException e) {
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;　　　　　　e.printStackTrace();
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;　　　　}
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;　　}
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; &lt;span&gt;};
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; consumer.start(); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; starting consumer thread&lt;/span&gt;
&lt;span&gt;26&lt;/span&gt; 
&lt;span&gt;27&lt;/span&gt; &lt;span&gt;[PRODUCER] published event : MY_EVENT
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; [CONSUMER] consumed event : MY_EVENT
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Synchronizers&lt;/h2&gt;
&lt;p&gt;所谓的synchronizer，就是能够根据其内部状态调节线程的control flow的对象。&lt;/p&gt;
&lt;h3&gt;CountDownLatch&lt;/h3&gt;
&lt;p&gt;主要方法：&lt;br/&gt;　　- countDown&lt;br/&gt;　　- await&lt;br/&gt;CountDownLatch有如一个阀门，在其达到最终状态前阀门关闭，线程不可通过。达到最终状态时，阀门打开，所有线程通过。打开后的阀门永远打开，状态不再改变。&lt;/p&gt;
&lt;p&gt;适用情景：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;等待所依赖的资源全部加载完成后才继续。　&lt;/li&gt;
&lt;li&gt;初始化顺序中各个service之间的相互等待。 &lt;/li&gt;
&lt;li&gt;等待所有参与的player都准备好才开始游戏。&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;FutureTask&lt;/h3&gt;
&lt;p&gt;主要方法：get&lt;br/&gt;task真正结束前get方法会阻塞，直到task执行结束/被取消/抛异常。&lt;/p&gt;
&lt;h3&gt;Semaphore&lt;/h3&gt;
&lt;p&gt;主要方法：&lt;br/&gt;　　- release&lt;br/&gt;　　- acquire&lt;/p&gt;
&lt;p&gt;有有限多个permit，acquire时如果permit为0会阻塞，但release可以执行无限多次。&lt;/p&gt;
&lt;p&gt;适合：控制可以同时访问某资源的activity数量。可用来实现资源池或将容器设为可以存储有限个元素的容器。&lt;/p&gt;
&lt;h3&gt;CyclicBarrier&lt;/h3&gt;
&lt;p&gt;主要方法：await&lt;/p&gt;&lt;p&gt;必须所有线程到达Barrier时，所有线程才能通过。&lt;/p&gt;&lt;p&gt;Latch用来等待事件；Barrier用来等待其它线程。&lt;/p&gt;&lt;p&gt;适用场景：N等N&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; CellularAutomata {
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt;&lt;span&gt; Board mainBoard;
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt;&lt;span&gt; CyclicBarrier barrier;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt;&lt;span&gt; Worker[] workers;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; 
&lt;span&gt; 6&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; CellularAutomata(Board board) {
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.mainBoard =&lt;span&gt; board;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt; count =&lt;span&gt; Runtime.getRuntime().availableProcessors();
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.barrier = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; CyclicBarrier(count,
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;                 &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Runnable() {
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;                     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; run() {
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;                        mainBoard.commitNewValues();
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;                    }});
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.workers = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Worker[count];
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = 0; i &amp;lt; count; i++&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;             workers[i] = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Worker(mainBoard.getSubBoard(count, i));
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; 
&lt;span&gt;19&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; Worker &lt;span&gt;implements&lt;/span&gt;&lt;span&gt; Runnable {
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;         &lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt;&lt;span&gt; Board board;
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; 
&lt;span&gt;22&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; Worker(Board board) { &lt;span&gt;this&lt;/span&gt;.board =&lt;span&gt; board; }
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; run() {
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;             &lt;span&gt;while&lt;/span&gt; (!&lt;span&gt;board.hasConverged()) {
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;                 &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; x = 0; x &amp;lt; board.getMaxX(); x++&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;                     &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; y = 0; y &amp;lt; board.getMaxY(); y++&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; &lt;span&gt;                        board.setNewValue(x, y, computeValue(x, y));
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;                 &lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; &lt;span&gt;                    barrier.await();
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;                 } &lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (InterruptedException ex) {
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;                     &lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;                 } &lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (BrokenBarrierException ex) {
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt;                     &lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt; 
&lt;span&gt;38&lt;/span&gt;         &lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; computeValue(&lt;span&gt;int&lt;/span&gt; x, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; y) {
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Compute the new value that goes in (x,y)&lt;/span&gt;
&lt;span&gt;40&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; 0&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt; 
&lt;span&gt;44&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; start() {
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = 0; i &amp;lt; workers.length; i++&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt;             &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Thread(workers[i]).start();
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt; &lt;span&gt;        mainBoard.waitForConvergence();
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;49&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;

</description>
<pubDate>Sun, 29 Apr 2018 13:30:00 +0000</pubDate>
<dc:creator>mozi_song</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/mozi-song/p/8972012.html</dc:identifier>
</item>
</channel>
</rss>