<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>Mybatis学习系列（三）动态SQL - 仍是少年</title>
<link>http://www.cnblogs.com/ashleyboy/p/9271597.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/ashleyboy/p/9271597.html</guid>
<description>&lt;p&gt;在mapper配置文件中，有时需要根据查询条件选择不同的SQL语句，或者将一些使用评率高的SQL语句单独配置，在需要使用的地方引用。Mybatis的一个特性:动态SQL，来解决这个问题。&lt;/p&gt;
&lt;p&gt;mybatis动态sql语句是基于OGNL表达式的，主要有以下几类:&lt;/p&gt;
&lt;p&gt;1. if 语句 (简单的条件判断)&lt;/p&gt;
&lt;p&gt;2. choose (when,otherwize) ,相当于java 语言中的 switch ,与 jstl 中的choose 很类似&lt;/p&gt;
&lt;p&gt;3. trim (对包含的内容加上 prefix,或者 suffix 等，前缀，后缀)&lt;/p&gt;
&lt;p&gt;4. where (主要是用来简化sql语句中where条件判断的，能智能的处理 and or ,不必担心多余导致语法错误)、&lt;/p&gt;
&lt;p&gt;5. set (主要用于更新时)&lt;/p&gt;
&lt;p&gt;6. foreach (在实现 mybatis in 语句查询时特别有用)&lt;/p&gt;
&lt;h2&gt;if标签语句&lt;/h2&gt;
&lt;p&gt;if标签用来实现根据条件拼接sql语句，下面示例用来判断参数如果不为null，则拼接sql&lt;/p&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt; &amp;lt;&lt;/span&gt;&lt;span&gt;select &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;ifTest&quot;&lt;/span&gt;&lt;span&gt; resultType&lt;/span&gt;&lt;span&gt;=&quot;com.sl.po.Product&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
        select * from products where 
        &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;if &lt;/span&gt;&lt;span&gt;test&lt;/span&gt;&lt;span&gt;=&quot;ProductName!=null&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
            name like #{ProductName}
        &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;if &lt;/span&gt;&lt;span&gt;test&lt;/span&gt;&lt;span&gt;=&quot;description!=null&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
            and description like CONCAT(CONCAT('%', #{Description, jdbcType=VARCHAR}),'%')
        &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;select&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;当参数ProductName和Description不为null,则正常拼接处sql语句:select * from products where name like ? and description like CONCAT(CONCAT('%', ?),'%')&lt;/p&gt;
&lt;p&gt;但是上面的SQL中如果传入的参数ProductName为null,则解析出错误的语句：select * from products &lt;span&gt;where and&lt;/span&gt; description like CONCAT(CONCAT('%', ?),'%') ，解决这个问题，需要用到where标签&lt;/p&gt;
&lt;h2&gt;where标签语句&lt;/h2&gt;
&lt;p&gt;当 where 中的条件使用的 if 标签较多时，这样的组合可能会导致错误, “where”标签会自动判断如果它包含的标签中有返回值的话，就在sql中插入一个‘where’，如果where标签最后返回的内容是以 and 或者or 开头的，也会被自动移除掉。&lt;/p&gt;
&lt;p&gt;上面的示例用where标签改写后示例如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;select &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;whereTest&quot;&lt;/span&gt;&lt;span&gt; resultType&lt;/span&gt;&lt;span&gt;=&quot;com.sl.po.Product&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
        select * from products&lt;br/&gt;&lt;span&gt;&amp;lt;!-- where标签自动移除第一个and--&amp;gt;
        &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;where&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;if &lt;/span&gt;&lt;span&gt;test&lt;/span&gt;&lt;span&gt;=&quot;Name!=null&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
                and name like #{Name}
                &lt;/span&gt;&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;name like #{Name}&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;if &lt;/span&gt;&lt;span&gt;test&lt;/span&gt;&lt;span&gt;=&quot;description!=null&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
                and description like #{Description}
            &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;where&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;select&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;set标签语句&lt;/h2&gt;
&lt;p&gt;set 标签是用在更新操作的时候，功能和 where 标签元素差不多，主要是在包含的语句前输出一个 set，然后如果包含的语句是以逗号结束的话将会把该逗号忽略，如果 set 标签最终返回的内容为空的话则可能会出错（update table where id=1）&lt;/p&gt;
&lt;p&gt; 使用set标签示例：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; if + set 实现按条件更新&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;update &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;setTest&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
        update products&lt;br/&gt;&lt;span&gt; &amp;lt;!-- set标签将移除最后一个“,” --&amp;gt;
        &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;set&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;if &lt;/span&gt;&lt;span&gt;test&lt;/span&gt;&lt;span&gt;=&quot;cityCode!=null&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
              citycode = #{cityCode} ,
            &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;if &lt;/span&gt;&lt;span&gt;test&lt;/span&gt;&lt;span&gt;=&quot;Name!=null&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
               name = #{Name} ,
            &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;if &lt;/span&gt;&lt;span&gt;test&lt;/span&gt;&lt;span&gt;=&quot;description!=null&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
                description = #{Description} ,
            &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;set&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
        where id =#{id}
&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;update&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;trim标签语句&lt;/h2&gt;
&lt;p&gt;trim 元素的主要功能是可以在自己包含的内容前加上某些前缀，也可以在其后加上某些后缀，与之对应的属性是 prefix 和 suffix；可以把包含内容的首部某些内容覆盖，即忽略，也可以把尾部的某些内容覆盖，对应的属性是 prefixOverrides 和 suffixOverrides；正因为 trim 有这样的功能，它可以用来实现 where 和 set 的效果。&lt;/p&gt;
&lt;p&gt;前面where标签示例，此处使用trim代替：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; if+trim 使用trim代理where&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;select &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;trimwhereTest&quot;&lt;/span&gt;&lt;span&gt; resultType&lt;/span&gt;&lt;span&gt;=&quot;com.sl.po.Product&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
        select * from products
       &lt;/span&gt;&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;
          &amp;lt;where&amp;gt;
            &amp;lt;if test=&quot;Name!=null&quot;&amp;gt;
                and name like #{Name}
                &amp;lt;!--name like #{Name}&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/if&amp;gt;
            &amp;lt;if test=&quot;description!=null&quot;&amp;gt;
                and description like #{Description}
            &amp;lt;/if&amp;gt;
        &amp;lt;/where&amp;gt;
       --&amp;gt;&lt;br/&gt;&amp;lt;!-- 移除首部所有指定在 &lt;em&gt;prefixOverrides&lt;/em&gt; 属性中的内容，并且插入 &lt;em&gt;prefix&lt;/em&gt; 属性中指定的内容--&amp;gt;&lt;br/&gt;&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;trim &lt;/span&gt;&lt;span&gt;prefix&lt;/span&gt;&lt;span&gt;=&quot;WHERE&quot;&lt;/span&gt;&lt;span&gt; prefixOverrides&lt;/span&gt;&lt;span&gt;=&quot;AND |OR&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;if &lt;/span&gt;&lt;span&gt;test&lt;/span&gt;&lt;span&gt;=&quot;Name!=null&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
                and name like #{Name}
            &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;if &lt;/span&gt;&lt;span&gt;test&lt;/span&gt;&lt;span&gt;=&quot;description!=null&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
                and description like #{Description}
            &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;trim&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;select&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;前面set标签示例，此处使用trim代替：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;46&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!--if+trim 代替 使用trime代替set  --&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;update &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;trimsetTest&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
      update products
&lt;/span&gt;&lt;span&gt;    &amp;lt;!--&lt;/span&gt;&lt;span&gt;
     &amp;lt;set&amp;gt;
            &amp;lt;if test=&quot;cityCode!=null&quot;&amp;gt;
              citycode = #{cityCode} ,
            &amp;lt;/if&amp;gt;
            &amp;lt;if test=&quot;Name!=null&quot;&amp;gt;
               name = #{Name} ,
            &amp;lt;/if&amp;gt;
            &amp;lt;if test=&quot;description!=null&quot;&amp;gt;
                description = #{Description}
            &amp;lt;/if&amp;gt;
        &amp;lt;/set&amp;gt;
&lt;/span&gt;&lt;span&gt;   --&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;span&gt; &amp;lt;!-- 移除尾部所有指定在 &lt;em&gt;suffixOverrides&lt;/em&gt; 属性中的内容，并且插入 &lt;em&gt;prefix&lt;/em&gt; 属性中指定的内容--&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;pre&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;trim &lt;/span&gt;&lt;span&gt;prefix&lt;/span&gt;&lt;span&gt;=&quot;set&quot;&lt;/span&gt;&lt;span&gt; suffixOverrides&lt;/span&gt;&lt;span&gt;=&quot;,&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;if &lt;/span&gt;&lt;span&gt;test&lt;/span&gt;&lt;span&gt;=&quot;cityCode!=null and cityCode!=''&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
              citycode = #{cityCode} ,
            &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;if &lt;/span&gt;&lt;span&gt;test&lt;/span&gt;&lt;span&gt;=&quot;Name!=null&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
               name = #{Name} ,
            &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;if &lt;/span&gt;&lt;span&gt;test&lt;/span&gt;&lt;span&gt;=&quot;description!=null&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
                description = #{Description}
            &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;trim&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
        where id=#{id}
    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;update&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;choose (when, otherwise)标签&lt;/h2&gt;
&lt;p&gt;choose标签是按顺序判断其内部when标签中的test条件出否成立，如果有一个成立，则 choose 结束。当 choose 中所有 when 的条件都不满则时，则执行 otherwise 中的sql，类似于sql server语句（case when then）&lt;/p&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; choose + when + otherwise 只能选择一个作为查询条件 作用类似sql case when then &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;select &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;choosewhenotherwiseTest&quot;&lt;/span&gt;&lt;span&gt; resultType&lt;/span&gt;&lt;span&gt;=&quot;com.sl.po.Product&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
        select * from products
&lt;/span&gt;&lt;span&gt;     &amp;lt;&lt;/span&gt;&lt;span&gt;where&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;choose&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;when &lt;/span&gt;&lt;span&gt;test&lt;/span&gt;&lt;span&gt;=&quot;name!=null&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
                and name like #{Name}
            &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;when&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;when &lt;/span&gt;&lt;span&gt;test&lt;/span&gt;&lt;span&gt;=&quot;description!=null&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
                and description like #{Description}
            &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;when&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;otherwise&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
                and unitprice &amp;gt; #{UnitPrice}
            &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;otherwise&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;choose&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;     &amp;lt;/&lt;/span&gt;&lt;span&gt;where&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
   &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;select&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果name!=null，则解析出sql: select * from product where name like ?&lt;/p&gt;
&lt;p&gt;Name==null&amp;amp;&amp;amp; description!=null,则解析出sql: select * from product where description like ?&lt;/p&gt;
&lt;p&gt;否则：select * from product where unitprice &amp;gt;?&lt;/p&gt;
&lt;h2&gt;foreach标签语句&lt;/h2&gt;
&lt;p&gt;mybatis提供foreach标签，用来对一个集合进行遍历，通常是用来构建 IN 条件语句，也可用于其他情况下动态拼接sql语句。&lt;/p&gt;
&lt;p&gt;foreach标签有以下几个属性collection， item，index，open，separator，close。&lt;/p&gt;
&lt;p&gt;1. collection表示需要遍历的集合&lt;/p&gt;
&lt;p&gt;2. item 表示每次遍历时生成的对象名&lt;/p&gt;
&lt;p&gt;3. index表示在迭代过程中，每次迭代到的位置)&lt;/p&gt;
&lt;p&gt;4. open表示开始遍历时要拼接的字符串&lt;/p&gt;
&lt;p&gt;5. separator表示在每次遍历时两个对象直接的连接字符串&lt;/p&gt;
&lt;p&gt;6. close表示结束遍历时要拼接的字符串&lt;/p&gt;
&lt;p&gt;当使用 Map 对象（或者 Map.Entry 对象的集合）时，index 是键，item 是值。&lt;/p&gt;
&lt;p&gt;在使用foreach的时候针对不同的参数类型， collection属性值要分为以下3种情况：&lt;/p&gt;
&lt;p&gt;1.如果传入的是单参数且参数类型是一个List的时候，collection属性值为list&lt;/p&gt;
&lt;p&gt;2.如果传入的是单参数且参数类型是一个array数组的时候，collection的属性值为array&lt;/p&gt;
&lt;p&gt;3.如果传入的参数是多个的时候，我们就需要把它们封装成一个Map或者Object。&lt;/p&gt;
&lt;p&gt; 示例：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 只有一个List参数时它的参数名为list，即collection=&quot;list&quot; ;  如果参数类型时数组object[],则  collection=&quot;array&quot; &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;select &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;foreachTest&quot;&lt;/span&gt;&lt;span&gt; resultType&lt;/span&gt;&lt;span&gt;=&quot;com.sl.po.Product&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
      select * from products 
      &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;where&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;if &lt;/span&gt;&lt;span&gt;test&lt;/span&gt;&lt;span&gt;=&quot;list!=null&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
          &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;foreach &lt;/span&gt;&lt;span&gt;item&lt;/span&gt;&lt;span&gt;=&quot;id&quot;&lt;/span&gt;&lt;span&gt; index&lt;/span&gt;&lt;span&gt;=&quot;index&quot;&lt;/span&gt;&lt;span&gt;  collection&lt;/span&gt;&lt;span&gt;=&quot;list&quot;&lt;/span&gt;&lt;span&gt; open&lt;/span&gt;&lt;span&gt;=&quot;id in(&quot;&lt;/span&gt;&lt;span&gt; separator&lt;/span&gt;&lt;span&gt;=&quot;,&quot;&lt;/span&gt;&lt;span&gt; close&lt;/span&gt;&lt;span&gt;=&quot;)&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;#{id}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;foreach&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;where&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;select&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 通过pojo传递list, collection值为pojo中对应的属性名&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;select &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;foreachVoTest&quot;&lt;/span&gt;&lt;span&gt; resultType&lt;/span&gt;&lt;span&gt;=&quot;com.sl.po.Product&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
      select * from products 
      &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;where&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;if &lt;/span&gt;&lt;span&gt;test&lt;/span&gt;&lt;span&gt;=&quot;name!=null&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; and name like #{name} &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;if &lt;/span&gt;&lt;span&gt;test&lt;/span&gt;&lt;span&gt;=&quot;ids!=null&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;foreach &lt;/span&gt;&lt;span&gt;item&lt;/span&gt;&lt;span&gt;=&quot;item&quot;&lt;/span&gt;&lt;span&gt; index&lt;/span&gt;&lt;span&gt;=&quot;index&quot;&lt;/span&gt;&lt;span&gt;  collection&lt;/span&gt;&lt;span&gt;=&quot;ids&quot;&lt;/span&gt;&lt;span&gt; open&lt;/span&gt;&lt;span&gt;=&quot;and id in(&quot;&lt;/span&gt;&lt;span&gt; separator&lt;/span&gt;&lt;span&gt;=&quot;,&quot;&lt;/span&gt;&lt;span&gt; close&lt;/span&gt;&lt;span&gt;=&quot;)&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;#{item}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;foreach&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;where&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
 &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;select&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;测试代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('7770fd09-1127-4fd1-85b4-96e8c9f13fc2')&quot; readability=&quot;33.5&quot;&gt;&lt;img id=&quot;code_img_closed_7770fd09-1127-4fd1-85b4-96e8c9f13fc2&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_7770fd09-1127-4fd1-85b4-96e8c9f13fc2&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('7770fd09-1127-4fd1-85b4-96e8c9f13fc2',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_7770fd09-1127-4fd1-85b4-96e8c9f13fc2&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;62&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;@Test&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; testforeachTest() {
            String statement &lt;/span&gt;= &quot;com.sl.mapper.ProductMapper.foreachTest&quot;&lt;span&gt;;
            List&lt;/span&gt;&amp;lt;Integer&amp;gt; list = &lt;span&gt;new&lt;/span&gt; ArrayList&amp;lt;Integer&amp;gt;&lt;span&gt;();
            list.add(&lt;/span&gt;1&lt;span&gt;);
            list.add(&lt;/span&gt;2&lt;span&gt;);
            list.add(&lt;/span&gt;3&lt;span&gt;);
            
            List&lt;/span&gt;&amp;lt;Product&amp;gt; listProduct =&lt;span&gt; session.selectList(statement, list);
            &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt; (Product pro : listProduct) {
                System.out.println(pro);
            }

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 关闭会话&lt;/span&gt;
&lt;span&gt;            session.close();
        }
        
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;@Test&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; testforeachVoTest() {
            String statement &lt;/span&gt;= &quot;com.sl.mapper.ProductMapper.foreachVoTest&quot;&lt;span&gt;;
            ProductVo2 vo2 &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; ProductVo2();
            vo2.setName(&lt;/span&gt;&quot;%国际%&quot;&lt;span&gt;);
            List&lt;/span&gt;&amp;lt;Integer&amp;gt; ids = &lt;span&gt;new&lt;/span&gt; ArrayList&amp;lt;Integer&amp;gt;&lt;span&gt;();
            ids.add(&lt;/span&gt;11&lt;span&gt;);
            ids.add(&lt;/span&gt;12&lt;span&gt;);
            ids.add(&lt;/span&gt;13&lt;span&gt;);
            vo2.setIds(ids);
            
            List&lt;/span&gt;&amp;lt;Product&amp;gt; listProduct =&lt;span&gt; session.selectList(statement, vo2);
            &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt; (Product pro : listProduct) {
                System.out.println(pro);
            }

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 关闭会话&lt;/span&gt;
&lt;span&gt;            session.close();
        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('f2df5dc5-165c-4821-ad01-ba601b2a2477')&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_f2df5dc5-165c-4821-ad01-ba601b2a2477&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_f2df5dc5-165c-4821-ad01-ba601b2a2477&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('f2df5dc5-165c-4821-ad01-ba601b2a2477',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_f2df5dc5-165c-4821-ad01-ba601b2a2477&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.sl.po;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.List;

&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; ProductVo2 {

    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String name;
    
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; List&amp;lt;Integer&amp;gt;&lt;span&gt; ids;
    
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getName() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; name;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setName(String name) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.name =&lt;span&gt; name;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; List&amp;lt;Integer&amp;gt;&lt;span&gt; getIds() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; ids;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; setIds(List&amp;lt;Integer&amp;gt;&lt;span&gt; ids) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.ids =&lt;span&gt; ids;
    }
    
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;h2&gt;Sql片段&lt;/h2&gt;
&lt;p&gt;Sql中可将重复的sql提取出来，使用时用include引用即可，最终达到sql重用的目的&lt;/p&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;select &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;sqlTest&quot;&lt;/span&gt;&lt;span&gt; resultType&lt;/span&gt;&lt;span&gt;=&quot;com.sl.po.Product&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
        select * from products
        &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;where&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;br/&gt;&lt;/span&gt;        &lt;span&gt;&amp;lt;!-- 引用sql片段 --&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;include &lt;/span&gt;&lt;span&gt;refid&lt;/span&gt;&lt;span&gt;=&quot;sqltemp&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
          &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 提取sql片段
            &amp;lt;if test=&quot;cityCode!=null&quot;&amp;gt;
               and citycode = #{cityCode}
            &amp;lt;/if&amp;gt;
            &amp;lt;if test=&quot;Name!=null&quot;&amp;gt;
                and name like #{Name}
            &amp;lt;/if&amp;gt;
            &amp;lt;if test=&quot;description!=null&quot;&amp;gt;
                and description like #{Description}
            &amp;lt;/if&amp;gt;
             &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;where&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;select&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 定义sql片段 ：将where条件提取 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;sql &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;sqltemp&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;if &lt;/span&gt;&lt;span&gt;test&lt;/span&gt;&lt;span&gt;=&quot;cityCode!=null&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
               and citycode = #{cityCode}
            &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;if &lt;/span&gt;&lt;span&gt;test&lt;/span&gt;&lt;span&gt;=&quot;Name!=null&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
                and name like #{Name}
            &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;if &lt;/span&gt;&lt;span&gt;test&lt;/span&gt;&lt;span&gt;=&quot;description!=null&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
                and description like #{Description}
            &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;sql&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

</description>
<pubDate>Thu, 05 Jul 2018 17:39:00 +0000</pubDate>
<dc:creator>仍是少年</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/ashleyboy/p/9271597.html</dc:identifier>
</item>
<item>
<title>FreeMarker — 模板开发 - 莫失精诚赤子心</title>
<link>http://www.cnblogs.com/augusduan/p/9271516.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/augusduan/p/9271516.html</guid>
<description>&lt;h2 id=&quot;什么是freemarker&quot;&gt;1 什么是FreeMarker？&lt;/h2&gt;
&lt;p&gt;官方解释：FreeMarker 是一款模板引擎， 即一种基于模板和要改变的数据， 并用来生成输出文本(HTML网页，电子邮件，配置文件，源代码等)的通用工具。&lt;/p&gt;
&lt;p&gt;其实FreeMarker的原理就是：模板+数据模型=输出&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://pab3mrmst.bkt.clouddn.com/blog_free_01.png&quot; alt=&quot;image&quot;/&gt;&lt;/p&gt;
&lt;p&gt;模板编写为FreeMarker Template Language (FTL)，渲染前台界面后需要更改名为 xxx.ftl，同理xxx.jsp&lt;/p&gt;
&lt;p&gt;特点：&lt;br/&gt;轻量级模版引擎，不需要servlet，web容器&lt;br/&gt;其次freemarker是java写的，很多语法很java是有密切联系的&lt;/p&gt;
&lt;h2 id=&quot;freemarker测试环境搭建&quot;&gt;2 FreeMarker测试环境搭建&lt;/h2&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;直接使用IDEA 选择springboot 构建集成环境，勾选上web和freemarker&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;http://pab3mrmst.bkt.clouddn.com/blog_free_02.png&quot; alt=&quot;image&quot;/&gt;&lt;/p&gt;
&lt;p&gt;如果没有选择这这种方法的，在maven里面加入或者引入Jar即可&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;spring-boot-starter-freemarker&amp;lt;/artifactId&amp;gt;
&amp;lt;/dependency&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;用例测试&quot;&gt;用例测试&lt;/h4&gt;
&lt;pre&gt;
&lt;code&gt;// 实体类
public class User {
    private Integer id;
    private String name;
    private String email;
    // ...getter and setter
}&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code&gt;// Controller类，存储值并跳转到index.htl界面
@Controller
@RequestMapping(value = &quot;/index&quot;)
public class IndexController {

    @RequestMapping(value = &quot;/login&quot;)
    public ModelAndView index(ModelAndView modelAndView) {
        List&amp;lt;User&amp;gt; userList=new ArrayList&amp;lt;User&amp;gt;();
        userList.add(new User(1,&quot;augus&quot;,&quot;augu@163.com&quot;));
        userList.add(new User(2,&quot;aili&quot;,&quot;aili@163.com&quot;));
        userList.add(new User(3,&quot;beleng&quot;,&quot;beleng@163.com&quot;));
        modelAndView.addObject(&quot;userList&quot;, userList);
        modelAndView.setViewName(&quot;index&quot;);
        return modelAndView;
    }

}&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code&gt;&amp;lt;!-- 前台--&amp;gt;
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;table border=&quot;1&quot;&amp;gt;
    &amp;lt;tr&amp;gt;
        &amp;lt;th&amp;gt;name&amp;lt;/th&amp;gt;
        &amp;lt;th&amp;gt;email&amp;lt;/th&amp;gt;
    &amp;lt;/tr&amp;gt;
    &amp;lt;!-- 遍历输出--&amp;gt;
    &amp;lt;#list userList as user&amp;gt;
        &amp;lt;tr&amp;gt;
            &amp;lt;th&amp;gt;${user.name}&amp;lt;/th&amp;gt;
            &amp;lt;th&amp;gt;${user.email}&amp;lt;/th&amp;gt;
        &amp;lt;/tr&amp;gt;
    &amp;lt;/#list&amp;gt;
&amp;lt;/table&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;html&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;测试结果&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;后台存储的3个用户，显示在前台界面上&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://pab3mrmst.bkt.clouddn.com/blog_free_03.png&quot; alt=&quot;image&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;freemarker-知识点&quot;&gt;3 FreeMarker 知识点&lt;/h2&gt;
&lt;h4 id=&quot;构成&quot;&gt;构成&lt;/h4&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;模板由文本+插值+FTL标签+注释组成&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;&lt;li&gt;文本：HTML原来的内容&lt;/li&gt;
&lt;li&gt;插值：${}代表的就是插值，一般来说就是后台传过来的值显示在前台用${}表示&lt;/li&gt;
&lt;li&gt;FTL标签：比如&amp;lt;#list&amp;gt;&amp;lt;/#list&amp;gt; 不会显示在界面上，和html标签类似&lt;/li&gt;
&lt;li&gt;注释：&amp;lt;#-- 注释 --&amp;gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;谨记一点，就是插值只能放在文本中，不能放在FTL标签中，不然渲染模板的时候会报错&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;正确的示范
&amp;lt;h2&amp;gt;${user.name}&amp;lt;/h2&amp;gt;
错误的示范
&amp;lt;#if ${user.name} == &quot;augus&quot;&amp;gt;&amp;lt;/#if&amp;gt;
在FTL标签中，直接user.name 即可，不用插值&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;语法&quot;&gt;语法&lt;/h4&gt;
&lt;h5 id=&quot;定义变量&quot;&gt;定义变量&lt;/h5&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;&amp;lt;#assign var = value &amp;gt; 定义变量并初始化&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;
&lt;code&gt;&amp;lt;!--定义字符串--&amp;gt;
&amp;lt;#assign str = &quot;hello world&quot; &amp;gt; 
&amp;lt;!--定义字数值--&amp;gt;
&amp;lt;#assign num = 13.2 &amp;gt; 
&amp;lt;!--定义布尔--&amp;gt;
&amp;lt;#assign flag = true &amp;gt; 
&amp;lt;!--定义数组--&amp;gt;
&amp;lt;#assign arr = [&quot;foo&quot;, &quot;boo&quot;, &quot;get&quot;]/&amp;gt;
&amp;lt;!--定义map--&amp;gt;
&amp;lt;#assign uMap={&quot;name&quot;:&quot;augus&quot;, &quot;email&quot;:&quot;augus@163.com&quot;}&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h5 id=&quot;if标签-判断&quot;&gt;if标签 判断&lt;/h5&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;规范：&amp;lt;#if condition&amp;gt;&amp;lt;#elseif condition&amp;gt;&amp;lt;#else&amp;gt;&amp;lt;/#if&amp;gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;比较运算符：x == y (等于) ，x!=y(不等于) ,x lt y(小于)， x lte y(小于等于)， x gt y(大于)， x gte y (大于等于)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;
&lt;code&gt;&amp;lt;!--定义数值num--&amp;gt;
&amp;lt;#assign num = 13.2 &amp;gt; 
&amp;lt;#if num gt 16&amp;gt;
    &amp;lt;p&amp;gt;num大于16&amp;lt;/p&amp;gt;
&amp;lt;#elseif num lt 12&amp;gt;
    &amp;lt;p&amp;gt;num大于16&amp;lt;/p&amp;gt;
&amp;lt;#else&amp;gt;
    &amp;lt;p&amp;gt;num在12~16的范围中&amp;lt;/p&amp;gt;
&amp;lt;/#if&amp;gt;

输出：
    num在12~16的范围中&lt;/code&gt;
&lt;/pre&gt;
&lt;h5 id=&quot;list标签-循环&quot;&gt;list标签 循环&lt;/h5&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;规范:&amp;lt;#list hash_or_seq as var&amp;gt;&amp;lt;/#list&amp;gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;
&lt;code&gt;&amp;lt;!--定义数组--&amp;gt;
&amp;lt;#assign arrs = [&quot;foo&quot;, &quot;boo&quot;, &quot;get&quot;]/&amp;gt;
&amp;lt;!--循环--&amp;gt;
&amp;lt;#list arr as arr&amp;gt;
    ${arr},
&amp;lt;/#list&amp;gt;

输出:
    foo, boo, get,&lt;/code&gt;
&lt;/pre&gt;
&lt;h5 id=&quot;的空值操作&quot;&gt;! 的空值操作&lt;/h5&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;freemarker 针对防止null有特定的操作符&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;
&lt;code&gt;&amp;lt;p&amp;gt;${&quot;name:&quot;+name!}&amp;lt;p/&amp;gt;
&amp;lt;p&amp;gt;${(maxNumber!)+1}&amp;lt;/p&amp;gt;

输出：
    name:
    1&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;在页面中并未存在 name和maxNumber的，通过加 ！ 可以处理null值的存在，如果上述例子不加 ！操作符，模板加载时会报错 “The following has evaluated to null or missing:”&lt;/p&gt;
&lt;h5 id=&quot;自定义函数和指令&quot;&gt;自定义函数和指令&lt;/h5&gt;
&lt;p&gt;可以在模板中使用function作为自定义函数,类似于js自定义funciton,在必要的时候直接调用即可&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;函数规范：&amp;lt;#function name param1 param2 ... paramN&amp;gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;
&lt;code&gt;&amp;lt;!-- 函数测试 --&amp;gt;
&amp;lt;!-- 定义函数 --&amp;gt;
&amp;lt;#function sum num1 num2&amp;gt;
    &amp;lt;#return num1 + num2&amp;gt;
&amp;lt;/#function&amp;gt;

&amp;lt;!-- 调用函数--&amp;gt;
${sumInt(5, 7)}

输出：
    12&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;在模板中存在多个相同的操作的时候，可以自定义指令，进行重复的操作&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;指令规范：&amp;lt;#macro name param1 param2 ... paramN&amp;gt;&amp;lt;/#macro&amp;gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;
&lt;code&gt;&amp;lt;!-- 指令测试 --&amp;gt;
&amp;lt;#macro prInfo name email&amp;gt;
    &amp;lt;p&amp;gt;姓名：${name}&amp;lt;/p&amp;gt;
    &amp;lt;p&amp;gt;邮箱：${email}&amp;lt;/p&amp;gt;
&amp;lt;/#macro&amp;gt;
&amp;lt;!--调用自定 @操作符--&amp;gt;
&amp;lt;@prInfo &quot;张三&quot; &quot;287159@qq.com&quot;/&amp;gt;
&amp;lt;!-- 前台会将指令区域的值替换后输出HTML--&amp;gt;
输出：
    姓名：张三
    邮箱：287159@qq.com
    &lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;结束&quot;&gt;4 结束&lt;/h3&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;以上内容基本都是FreeMarker的常用知识点，我基本上是参考中文在线手册学习的，这里的FreeMarker知识点都是模板开发，并未涉及到程序开发，如有未涉及的知识点，可以参考FreeMarker中文在线手册，如果有心学习的话，基本上一天之内就可以将FreeMarker学习完&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://freemarker.foofun.cn/&quot;&gt;FreeMarker中文手册地址&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;莫失精诚赤子心&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;原文出处：&lt;/strong&gt; https://www.cnblogs.com/augusduan/p/9271516.html&lt;/p&gt;
</description>
<pubDate>Thu, 05 Jul 2018 16:20:00 +0000</pubDate>
<dc:creator>莫失精诚赤子心</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/augusduan/p/9271516.html</dc:identifier>
</item>
<item>
<title>springMVC中接口参数解析的过程分析 - 007tangtao</title>
<link>http://www.cnblogs.com/007tangtao/p/9251861.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/007tangtao/p/9251861.html</guid>
<description>&lt;p&gt;　　前天工作中遇到了这样一个问题，我在接口的参数封装了一个pojo,这是很常见的，当参数一多，惯性的思维就是封装一个pojo.那么在参数前有很多注解可以添加，比如：@requestParam,@requestBody,@pathvariable等。我的理解是这样的，首先我先申明，我并是没有看过源码，只是凭经验理解。@requestParam试用于get请求，参数在http的header中的URL上,具体放在？后面以key=value的形式存在。@requestBody适用于post请求中参数在http的body中。@pathvariable比较特别是restful的写法，把参数放在URL上，不用问号区分是参数还是URL。也许我这样说不是很准确。但我通常也是这么用的。与此同时，还有一种常见的写法，就是参数前不加注解，比如参数是基本类型的不加@requestParam，参数是bean的不加requestBody，也能被springmvc解析得到。我的接口被小组长看到之后他叫我去掉这个@requestBody，因为后端加上这个之后，前端的ajax请求需要显示的声明content-type:&quot;application/json&quot;，才能被springmvc解析得到，这样似乎多做了一件不必要的事情。虽然我按照他的要求去掉了，但是我觉得我得弄清楚这到底是怎么回事，加与不加到底有什么区别，对性能有什么影响，或者各自的最佳适用场景，除了百度，还得问问大神。&lt;/p&gt;
&lt;p&gt;　　首先我自己慢慢的通过debug研究了一下源码。在不添加任何注解的情况下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1030882/201807/1030882-20180701192656034-1989542312.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1030882/201807/1030882-20180701192950025-502227141.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;在开发的过程中consumes和produces一般都没有加，按道理应该要加上，因为可以减少对接口的查找范围。这是一个简单的demo,我只是需要他来检查springmvc接收请求的流程。&lt;/p&gt;
&lt;p&gt;首先在tomcat启动之后，所有controller类中的请求路径也就是@requestMapping随着Controller这个bean加载到了spring的容器中。页面请求过来之后找到DispatcherServlet这个servlet,请求走到servlet之后大家都知道servlet有两种初始化方式，一种是随着立即加载，一种是延迟加载，但是无论怎样，都是只调用一次init方法，然后再以后每次都会直接调用service方法，当tomcat关闭之后servlet的destroy方法被调用生命周期就结束了。所以springmvc是对servlet的封装就必定要继承service方法，DispatcherServlet也就是doDispatch这个方法。这个方法中通过HttpServletRequest对象获得请求路径也就是/notJson,然后与容器中的所有url对比，最终取得Controller中的接口所在。找到了接口自然就知道了接口的参数，我这里就是Display,为了方便简单，Display中只有两个参数，就是下面ajax请求中的两个。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1030882/201807/1030882-20180701211512088-849476921.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;　　springmvc会通过反射的方式获取到pojo中的属性。在这个过程中首先springmvc会先声明一个数组，这个数组的大小是参数的个数，我这里只有一个，其实我相信很多人会和我遇到相同的问题就是，当参数中同时存在bean和基本类型的参数，springmvc将怎么解析，这个我遇到过几次，在没有看源码的情况下，把基本类型也封装到bean中去了，让前端把属性也写在一个对象中。当然我相信这个不是每个人都能接受的做法，我们都希望搞清楚他究竟是怎样解析的，到时候我们就可以任意摆弄了。下面是反射过程，将我的pojo反射之后获得里面的属性和方法。解析了参数之后，为参数赋值。这里也许是最重要的地方了。究竟是怎么赋值的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1030882/201807/1030882-20180701221148684-1162736608.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1030882/201807/1030882-20180701215810303-713083334.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; 从这个方法debug了解到，name为display,也就是pojo类名的小写，这里不知道为什么springmvc做了这个处理（以后再看）。attribute为带有age和name的对象。不过此时都是null。WebDataBinding用于从Web请求参数到JavaBean对象的数据绑定的特殊DataBinder。接上图bindRequestParameters这个方法，跟进去会发现一个很熟悉的地方就是下图，通过String[] values = request.getParameterValues(paramName);获得参数名，这个是servlet的获取参数方法，那么就可以知道请求的参数的属性名和属性值。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1030882/201807/1030882-20180705230024770-1107930289.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; 接下来可想而知就是把这个参数名name换成bean的属性name，参数名age换成属性名age。再跟到这个地方，这个oragina就是上面serclet拿到的属性名值对，把这个map在这转化成PropertyValue。（PropertyValue是用于保存单个bean属性的信息和值的对象。 在此处使用对象，而不是仅将所有属性存储在由属性名称键入的映射中，允许更灵活，并且能够以优化的方式处理索引属性等。&lt;em id=&quot;__mceDel&quot;&gt;请注意，该值不需要是最终所需的类型：BeanWrapper实现应该处理任何必要的转换，因为此对象不知道它将应用于哪些对象。)，如此一来就有两个PropertyValue对象了。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1030882/201807/1030882-20180705231108104-305838722.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1030882/201807/1030882-20180705234005951-525906389.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;转化的时候会忽略不知道的属性&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1030882/201807/1030882-20180705235903975-2090314798.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1030882/201807/1030882-20180706000406980-415497847.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;上图是具体转化的方法，方法比较长。下面一句直接给bean赋值。从这个过程来看。只要前端的json对象的属性和后端的bean属性一样，ajax不写content-type,用默认的application/x-www-form-urlencoded; charset=UTF-8，就能直接赋值。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1030882/201807/1030882-20180706000705540-767971560.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

</description>
<pubDate>Thu, 05 Jul 2018 16:14:00 +0000</pubDate>
<dc:creator>007tangtao</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/007tangtao/p/9251861.html</dc:identifier>
</item>
<item>
<title>性能测试day03_前端分析调优思路 - ~泪小白~</title>
<link>http://www.cnblogs.com/leixiaobai/p/9265557.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/leixiaobai/p/9265557.html</guid>
<description>&lt;p&gt;　　刚刚看到有人支持我写的博客，表示还是比较感动的，发现热心的用户在我的博客留言说“一个系统每天有200万在线用户，问我怎么设计性能场景？”，其实这个问题呢就属于业务没理清，这个问题就像我问你，一个城市一天有一百万人出行，请帮我找出交通压力哪里最大？这个问题一问你便知道无从下手了。&lt;/p&gt;
&lt;p&gt;　　好了，我们接着来学习今天的内容，之前说了后端协议的知识，今天来说说前端的分析，在讲述前端分析之前，大家可以先去看一本书《高性能网址建设指南》，虽然书是十年前的，但是思想还是可以的，我在这先给大家列一下书里面的主要思想。&lt;/p&gt;
&lt;p&gt;　　《高性能网址建设指南》书中有个关于前端优化的黄金原则：只有10%~20%最终用户响应时间花在了下载HTML文档上，其余80%~90%时间花在了下载页面的所有组件上。并提出了14个对应的规则，接下来我简单提一下这14个规则，详细的可以去找书看下。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;规则1---减少HTTP请求（1.多个图片可以转换成图片地图；2.css sprintes 合并图片；3.使用data:url模式内联图片；4.合并脚本和样式表）&lt;/li&gt;
&lt;li&gt;规则2---使用内容分发网络CDN&lt;/li&gt;
&lt;li&gt;规则3---添加Expires头（完整缓存）&lt;/li&gt;
&lt;li&gt;规则4---压缩组件（gzip压缩方式，图片和PDF不应该压缩，其余可以压缩）&lt;/li&gt;
&lt;li&gt;规则5---将样式表放在顶部（避免无样式内容闪烁-&amp;gt;使用link标签将其放在head头部）&lt;/li&gt;
&lt;li&gt;规则6---将脚本放在底部（放在顶部会阻塞下载，产生白屏现象）&lt;/li&gt;
&lt;li&gt;规则7---避免CSS表达式（用事件处理器来为特定的事件提供所期望的动态行为）&lt;/li&gt;
&lt;li&gt;规则8---使用外部的JS和CSS（内联无法缓存，外置的可以缓存，而且组件可以重用，同时降低了耦合度）&lt;/li&gt;
&lt;li&gt;规则9---减少DNS查找（通过Keep-alive和较少的域名）&lt;/li&gt;
&lt;li&gt;规则10---精简Javascript和css（从代码移除不必要的字符（注释、换行、空格等），css可以合并相同类，移除不使用的类）&lt;/li&gt;
&lt;li&gt;规则11---避免重定向（重定向时的第一个HTTP请求会阻塞后面html文档的加载）&lt;/li&gt;
&lt;li&gt;规则12---移除重复脚本（不必要的HTTP请求和执行javascript所浪费的时间）&lt;/li&gt;
&lt;li&gt;规则13---配置ETag（服务器检测缓存组件和原始服务器组件匹配的方式）&lt;/li&gt;
&lt;li&gt;规则14---使Ajax可缓存（确保Ajax请求遵守性能指导，尤其应具有长久的Expires头）&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;　上面说了那么多，我想要不举个实例给大家看看吧，既然现在腾讯这么有钱，我们就去看看腾讯的网站吧，我们用谷歌去访问下www.qq.com看一下qq官网的性能如何。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1064304/201807/1064304-20180705220035780-1553220779.png&quot; alt=&quot;&quot; width=&quot;949&quot; height=&quot;462&quot;/&gt;&lt;/p&gt;
&lt;p&gt;我们从这个点可以看得出来，访问qq首页有215个请求，大小为3.1M，总共耗时15.44秒，当然可能有个别不重要的请求拖慢了速度，我们可以看到大部分请求完成是在6秒左右，但是这也说明了qq的网站可能还是存在一些前端性能问题的，我们来具体看几个请求，从上往下来看：&lt;/p&gt;
&lt;p&gt;第一个请求如下：从第一个请求来看，总共花了158.76ms，虽然不是很大但是这个是个什么请求我们不太清楚，因为我没看到具体返回，有可能是将用户信息发送给服务端吧。&lt;/p&gt;
&lt;p&gt;我先说下耗时的组成和具体含义：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Stalled：这个是TCP连接检测过程（如果过长可能是丢包导致，有可能是网络或者服务端的问题）&lt;/li&gt;
&lt;li&gt;Request sent：发送时间（取决于上行带宽和服务器带宽）&lt;/li&gt;
&lt;li&gt;Waiting：等待时间（服务器处理时间）&lt;/li&gt;
&lt;li&gt;Content Download：接收时间（取决于下行带宽和服务器带宽）&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;接着我们看第二个主要的请求：可以看到这个请求的返回是标准的html和内嵌了css和js，并未进行压缩，而且也是混写的，所以其实这个返回是可以进行优化的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1064304/201807/1064304-20180705220516370-203773849.png&quot; alt=&quot;&quot; width=&quot;982&quot; height=&quot;281&quot;/&gt;&lt;/p&gt;
&lt;p&gt;接着我们可以去看，基本上一半的请求都是下载图片，我想这么图片的请求是不是又可以再进行优化呢（一个页面200多个请求个人感觉是很多的，因为每一个请求就是一次交互过程，如果一台服务器总的hps（hit per second）是固定的，请求数越少是不是就意味着能支持的并发数就会越多呢？尤其是对腾讯大公司而言，假设首页减少10个请求，100w的用户的访问，那么就可以减少总共1000w的请求呢，那么这个是不是就意味着可以减少上百台甚至更多的服务器了呢？所以我感觉qq的性能估计是服务器累出来的，但这个能省的钱是不是还能再省一点呢？比如请一个好一点的性能专家呢？哈哈哈，开个玩笑哈！）？我相信qq的首页前端还是有一定的优化空间的（当前访问qq慢也有个人网速不是太好的原因，不要太计较哈，嘻嘻）。&lt;/p&gt;
&lt;p&gt;好了，我们接着来学习吧，在性能测试的时候，我想最重要的应该还是“分析思路”，猜测（根据监控和经验（所以说要很广的知识面））-&amp;gt;测试-&amp;gt;验证-&amp;gt;确认，这四个过程不断循环，这就是性能的分析思路。&lt;/p&gt;
&lt;p&gt;这里提一点，大部分性能问题来源于数据库喔！&lt;/p&gt;
&lt;p&gt;一直说性能需要很广的知识面，这个是必然的，别人写一个东西，如果你不清楚别人怎么写的而且知道怎么写才更好，又怎么能帮助别人调优呢？所以具备开发、监控、网络、数据库、配置等能力都是必不可少的，当然还得有编写报告和一定的逻辑思维能力喔！&lt;/p&gt;
&lt;p&gt; 　　今天的最后我们来说一下性能调优的一些思路：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;化点播为广播：相当于服务器主动push资源给客户端，而不用每个客户端主动去请求（电台广播和1对1的电话交流的区别）&lt;/li&gt;
&lt;li&gt;化同步为异步：异步就相当于用户请求后先记录过一段时间再给服务器然后返回，减轻服务器压力（就像我们发微信朋友圈，有可能发了一段时间后系统会提示我们发送失败，所以是一个异步过程，当然这个发朋友圈也是一个广播的过程）&lt;/li&gt;
&lt;li&gt;化实时计算为预算：点播后异步静态化广播（像我们评论，这个点播计算后通过异步然后静态化给中间件服务器再广播给客户端）&lt;/li&gt;
&lt;li&gt;层层降级：像秒杀这类操作，整个过程就是1.前端先挡一部分（过滤99%的请求）；2.后台web端服务器挡一部分（再次过滤99%的请求）；3.然后在代码中对一个数据类型进行存放，获取能存入的记录；4.对这个数据类型一次性写数据库&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;前三天的课程我们已经将性能的整体思路给大家理了下，接下来的几天我会跟大家讲解下性能的又一大难点---&amp;gt;性能监控，可能需要有一定的linux基础，可以提前学习下喔！&lt;/p&gt;
</description>
<pubDate>Thu, 05 Jul 2018 16:07:00 +0000</pubDate>
<dc:creator>~泪小白~</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/leixiaobai/p/9265557.html</dc:identifier>
</item>
<item>
<title>我所鄙视的程序员 - 前程明亮</title>
<link>http://www.cnblogs.com/0zcl/p/9164028.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/0zcl/p/9164028.html</guid>
<description>&lt;p&gt;&lt;span&gt;　　3月底从互联网公司离职返校，已经过了三个月了。&lt;span&gt;基本上这三个月没写过代码，技术上并没啥提高&lt;/span&gt;。更多的是了解了很多除写代码以外的赚钱门路，还有感情的积累。毕竟很多程序员工作很拼，工资收入基本占自己收入的110%，感情方面，代码写多了，就算像我这样骚的人，也难免会变得闷骚。情感小白难免被女人牵着走，傻傻开心地当一部分女人的钱包。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　从17年7月，开始实习。自己认为是开始工作了。&lt;span&gt;实习工资不高，钱还是缺的&lt;/span&gt;。到现在也快一年了，也对程序员这个职业有很多感想，在这里，我还是想写一些我对程序员的看法。可能有人有意见，没关系，可以交流一下。在这里我想写一些关于程序员这个职业所造成的无趣生活习惯，各位看看就好，认真就输了=_=&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;&lt;span&gt;一、下班时间总想着工作的问题&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;　　&lt;span&gt;技术上的问题，学无止境，只要你想干，不吃不唱，一天24小时也可以&lt;/span&gt;。而且工作上总是会遇到一些至少当时觉得奇葩的BUG，等到下班后，本该愉快地玩耍，却习惯性、不自主地去思考这些BUG。给别的小伙伴一种闷骚的感觉。好几个月前就意识到这个问题了，但真的很难改掉“下班后不想着工作的问题”。就像《男人来自火星，女人来自金星》，说的，我会走入属于自己的一个“黑洞”，在里面静静地思考问题，等到想出如何解决了（90%情况是无疾而终），&lt;span&gt;走出“黑洞”时，却会发现自己早已不是人群中发光的点&lt;/span&gt;，当别人知道你是程序员（小哥哥），其实早已在心中打下“闷骚”的标签。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　如何解决呢？每个人情况不同，由于职业影响，我觉得基本无法摆脱这个习惯。现在我是在出去和朋友玩的时间，聚餐、旅游、逛街、酒吧。都不去想工作上遗留的问题。等第二天工作，或晚上回去有时间再试着解决下。和女票出去玩，中途遇到工作上的事，久而久之，女票难免会有意见~~，感情方面的不多说。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　程序员基本出自寒门，有的人事业心很强，当然我事业心也很强，去你妈的，谁想一辈子打工呀。有些管理或者事业心很强的人，可不像我这样，生活重心基本都在工作上，我也没啥反对的。希望你对未来几年，至少两年，有明确的职业规划，把生活与工作合理的分配。当然，我只是一个刚毕业领着税后9k多的IT民工，不会一直把下班后的大部分时间花在工作上。过去三个月处于无业游民的状态，不过还是遇到蛮多有意思的东西。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1038183/201807/1038183-20180705222533309-268984699.png&quot; alt=&quot;&quot; width=&quot;625&quot; height=&quot;351&quot;/&gt;&lt;/p&gt;


&lt;h3&gt;二、太宅了&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;　　并没有说全部，只是说身边的大多数都是。当我去&lt;span&gt;到一个陌生的城市工作，也会遇到一个问题，就是周末去哪玩呀&lt;/span&gt;! 当然有女票的自然去陪女票，开开房，过美好的性生活，有老婆孩子的自然也回家了，毕竟有些一周才在家待2天，996的只能待一天，不多回家陪陪老婆，还真有点怕头顶一片草原。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;那这个问题就可以简化成单身狗如何不那么宅。特别是你来到一个较陌生的城市工作，周围朋友不那么多。我是&lt;span&gt;强迫自己每个周末至少去玩一天&lt;/span&gt;，看电影，看展会，清吧，餐吧走起(我是酒量不行，喜欢喝酒的奇葩)。如果经济允许，周末两天一夜，我会去短期旅游，&lt;span&gt;一两个月会去一次短期旅游&lt;/span&gt;。像澳门，香港，惠洲，广州等等。穷游自由行的话，计划好花费也不高，大概600左右，两天一夜。报团的话会更便宜些，我是&lt;span&gt;更喜欢自由行的，说走就走&lt;/span&gt;。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　上面是周末如何不那么宅，短期旅游的话，每次和谁去，也是个问题，和同事吧，一群程序员，说句不好听的，嗯，有点无趣。所以平时多和产品、运营的妹子聊聊，有机会就约出来玩了。当然有个女票，不仅解决了这个问题，也能解决大部分工作日晚上和谁玩的问题。&lt;span&gt;每周工作日晚上的话，会花1~2次和朋友聚餐&lt;/span&gt;，公司的同事，新认识的朋友，一些有资源的朋友也会请下吃饭。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1038183/201807/1038183-20180705220314168-1450813538.png&quot; alt=&quot;&quot; width=&quot;562&quot; height=&quot;422&quot;/&gt; &lt;/p&gt;
&lt;p&gt;澳门的伪巴黎铁塔   &lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1038183/201807/1038183-20180705220413801-860620782.png&quot; alt=&quot;&quot; width=&quot;563&quot; height=&quot;361&quot;/&gt;&lt;/p&gt;
&lt;p&gt;澳门威尼斯人&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　对广州还是有特别的感觉的，毕竟大学四年都在大学城读书。丫的不爽的一点就是学校位置在一不小心就会与世隔绝的番禺。毕业工作后我想还是会偶尔会广州的，因为这边朋友比较多，早茶美食也多。这些是我实习期留的一部分钱去旅游的，因为钱不够，朋友叫我去泰国芭提雅浪一浪，艳遇之都丽江，也没去哈哈。预备&lt;span&gt;留一场泰国之旅&lt;/span&gt;。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1038183/201807/1038183-20180705221123846-338640093.png&quot; alt=&quot;&quot; width=&quot;553&quot; height=&quot;415&quot;/&gt;&lt;/p&gt;
&lt;p&gt;珠江啊，多美 &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1038183/201807/1038183-20180705221208859-1456253395.png&quot; alt=&quot;&quot; width=&quot;557&quot; height=&quot;418&quot;/&gt;&lt;/p&gt;
&lt;p&gt;植物园，有点像宠物小精灵里面某个宠物呀&lt;/p&gt;

&lt;h3&gt;三、很闷骚&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;　　并没有说全部，只是说身边的大多数都是。这算职业对性格影响最直接最快的。&lt;span&gt;如果你是开发员工，只需要三个月，不管之前多么地话唠，不变得闷骚，我多少是不信的&lt;/span&gt;。工作要求程序员大部分对着电脑，无声无息的解决问题，记录问题，写代码写注释。发现自己的这个问题是和产品的朋友出来玩，一直说我闷骚，你大爷的，劳资肯定怼他啊，劳资不闷骚，劳资就是骚。3月底离职回学校了，到这个时间点为止，我自然是否认自己闷骚的。让我承认的转折点，是我去做了一段时间的销售。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;span&gt;程序员去做销售？大多数人都想笑，同事都不相信&lt;/span&gt;。发现貌似一部分搞技术的同学并不是很看得起销售这个岗位，觉得就靠吹牛逼，会啥呀？殊不知把牛逼吹好，把产品推给客户，也是一种本事。其实做销售的人，是很机灵的，反应很快，人也很有趣，放得开。并不认为职业有啥看得起看不起的，岗位工资即代表着这个岗位。销售是底薪+提成，月总收入1w，和做程序员1w，有啥区别，我是觉得区别不大。干完一段时间销售后，对自己成长很大，之后又去干一段时间会展，关于这些经历，之后再写博客来讲讲。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　做完一段时间销售后，回首一看，才发现之前闷骚的自己，也很无奈。如何让程序员变得不闷骚？这TM难倒我了。只能强迫自己去交朋友，不仅仅是程序员的朋友。多接触不同的圈子后，发现程序员的圈子和其它圈子很不一样的。&lt;span&gt;玩酒吧的，健身的，旅游的，互联网非技术的，网络赚钱项目的，微商的，卖小黄片的，约炮圈，商家合作的。。。找个女票一起开开心心聊聊天，，也能告别闷骚&lt;/span&gt;。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1038183/201807/1038183-20180705221918604-1149489917.png&quot; alt=&quot;&quot; width=&quot;581&quot; height=&quot;376&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;这是个某APP上截的图，刚看到多少有点不爽。黑得多了，也就习惯。过去三个月，我不算程序员，我基本不写代码。然后&lt;span&gt;我感觉贴子说的越来越有道理，很真实&lt;/span&gt;。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;如何让程序员不闷骚？大家可以交流下&lt;/span&gt;&lt;/p&gt;


&lt;h3&gt;四、不够大胆&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;　　什么时候该说话，不该说话，这是情商问题。&lt;span&gt;没人会承认别人说自己情商低，最算是最好的朋友说你的&lt;/span&gt;。只有你自己会承认。回首几年前的自己，近点说，一年前的自己，都会感觉自己是个傻逼，这就是成长吧。抽象了，一不小心又装逼了。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;这里想说的不够大胆，是做完销售给我的感悟。进入销售这个圈子，刚开始真是太TM不适应了，有点经验的，能感觉到气场，说话交流也能感到很果断，自信。&lt;span&gt;不够大胆，我这里说的是对有感觉的妹子。工作时间长了，也会发现性欲降低了不少，看到街上的靓妹，竟然TM很佛系，不会去勾搭，给她微信发句邀约，竟然花光了所有的勇气，真TM笑死人&lt;/span&gt;。这是之前的我，说句实话，还不是从心，怂了。然而，这是妹子鄙视的。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　如何判断一个男的对你有感觉呀？看眼神呗，要是一直盯着你看的话，那是真的被妹子你好看的皮囊吸引了。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　最能直接表现出男生自信与勇气的，我想街搭是一种很好的方式。&lt;span&gt;你去勾搭，至少是确认过眼神的靓妹&lt;/span&gt;。自古搭汕多渣男是没错，但渣男也要看脸的好不？有时看下自己的发型，穿衣搭配，气质身材，问下自己，我配当渣男不。反正我不配哈哈。并不是说街搭就怎样怎样好吧，只是我和你确认过眼神，想认识一下你，你愿意的话，就加下微信，也许我们就会有故事。不愿意的话，我就说句谢谢，很高兴认识你，从销售角度来看，这属于非目标客户，强求不来。失败的打击多少会有，习惯就好。一个人我就觉得很难撑过这些挫败感，所以这时候带个僚机助攻下，或者带个胆大的朋友一起，朋友在旁边说句：“前面有位漂亮的小姐姐，不去勾搭下？” 你也就上了。还年轻吧，我相信所有的遇见皆是缘分。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1038183/201807/1038183-20180705233014464-2035786845.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1038183/201807/1038183-20180705235055881-215481476.jpg&quot; alt=&quot;&quot; width=&quot;459&quot; height=&quot;689&quot;/&gt;&lt;/p&gt;
&lt;p&gt;大佬随意&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1038183/201807/1038183-20180705235216512-609812726.jpg&quot; alt=&quot;&quot; width=&quot;467&quot; height=&quot;621&quot;/&gt;&lt;/p&gt;
&lt;p&gt;可以交个朋友哈哈&lt;/p&gt;



</description>
<pubDate>Thu, 05 Jul 2018 16:05:00 +0000</pubDate>
<dc:creator>前程明亮</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/0zcl/p/9164028.html</dc:identifier>
</item>
<item>
<title>python3进阶开发-第一个仿博客园的项目（1） - 天王盖地虎宝塔镇河妖</title>
<link>http://www.cnblogs.com/ManyQian/p/9271324.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/ManyQian/p/9271324.html</guid>
<description>&lt;p&gt;首先我们要设计一下表结构：&lt;/p&gt;
&lt;p&gt;UserInfo(用户信息表) --------》一对一    -----------》Blog(博客信息表)&lt;/p&gt;
&lt;p&gt;UserInfo(用户信息表) ---------》一对多    -----------》Article UpDown(点赞表)&lt;/p&gt;
&lt;p&gt;UserInfo(用户信息表) ---------》一对多    -----------》Article Comment(评论表)&lt;/p&gt;
&lt;p&gt;UserInfo(用户信息表)----------》一对多    -----------》Article(文章)&lt;/p&gt;
&lt;p&gt;Blog(博客信息表)    ----------------》 一对多   -----------》Category(个人博客文章分类表) &lt;/p&gt;
&lt;p&gt;Blog(博客信息表)    ----------------》一对多   ------------》Tag(标签表)&lt;/p&gt;
&lt;p&gt;Category(个人博客文章分类表)--》 一对多 -------------》Article(文章表)&lt;/p&gt;
&lt;p&gt;Tag(标签表)  --------------------------》多对多  -------------》Article(文章表)&lt;/p&gt;
&lt;p&gt;Article(文章表) ------------------------》一对一  -------------》ArticleDetail(文章详情表)&lt;/p&gt;
&lt;p&gt;Article(文章表) ------------------------》一对多  --------------》Article UpDown(点赞表)&lt;/p&gt;
&lt;p&gt;Article(文章表) ------------------------》一对多 ---------------》Article Comment(评论表)&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;63&quot;&gt;
&lt;pre&gt;
&lt;span&gt;from&lt;/span&gt; django.db &lt;span&gt;import&lt;/span&gt;&lt;span&gt; models

&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; Create your models here.&lt;/span&gt;
&lt;span&gt;from&lt;/span&gt; django.contrib.auth.models &lt;span&gt;import&lt;/span&gt;&lt;span&gt; AbstractUser

&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; UserInfo(AbstractUser):
    &lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;
    用户信息表
    &lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;
    nid &lt;/span&gt;= models.AutoField(primary_key=&lt;span&gt;True)
    phone &lt;/span&gt;= models.CharField(max_length=11, null=True, unique=&lt;span&gt;True)
    avatar &lt;/span&gt;= models.FileField(upload_to=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;avatars/&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, default=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;avatars/default.png&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)

    blog &lt;/span&gt;= models.OneToOneField(to=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Blog&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, to_field=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;nid&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, null=&lt;span&gt;True)

    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;__str__&lt;/span&gt;&lt;span&gt;(self):
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; self.username

    &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Meta:
        verbose_name &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;用户信息&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        verbose_name_plural &lt;/span&gt;=&lt;span&gt; verbose_name


&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Blog(models.Model):
    &lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;
    博客信息
    &lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;
    nid &lt;/span&gt;= models.AutoField(primary_key=&lt;span&gt;True)
    title &lt;/span&gt;= models.CharField(max_length=64)  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 个人博客标题&lt;/span&gt;
    theme = models.CharField(max_length=32)  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 博客主题&lt;/span&gt;

    &lt;span&gt;def&lt;/span&gt; &lt;span&gt;__str__&lt;/span&gt;&lt;span&gt;(self):
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; self.title

    &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Meta:
        verbose_name &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;博客&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        verbose_name_plural &lt;/span&gt;=&lt;span&gt; verbose_name


&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Category(models.Model):
    &lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;
    个人博客文章分类
    &lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;
    nid &lt;/span&gt;= models.AutoField(primary_key=&lt;span&gt;True)
    title &lt;/span&gt;= models.CharField(max_length=32)  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 分类标题&lt;/span&gt;
    blog = models.ForeignKey(to=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Blog&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, to_field=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;nid&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;)  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 外键关联博客，一个博客站点可以有多个分类&lt;/span&gt;

    &lt;span&gt;def&lt;/span&gt; &lt;span&gt;__str__&lt;/span&gt;&lt;span&gt;(self):
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;{}-{}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;.format(self.blog.title, self.title)

    &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Meta:
        verbose_name &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;文章分类&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        verbose_name_plural &lt;/span&gt;=&lt;span&gt; verbose_name


&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Tag(models.Model):
    &lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;
    标签
    &lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;
    nid &lt;/span&gt;= models.AutoField(primary_key=&lt;span&gt;True)
    title &lt;/span&gt;= models.CharField(max_length=32)  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 标签名&lt;/span&gt;
    blog = models.ForeignKey(to=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Blog&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, to_field=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;nid&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;)  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 所属博客&lt;/span&gt;

    &lt;span&gt;def&lt;/span&gt; &lt;span&gt;__str__&lt;/span&gt;&lt;span&gt;(self):
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; self.title

    &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Meta:
        verbose_name &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;标签&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        verbose_name_plural &lt;/span&gt;=&lt;span&gt; verbose_name


&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Article(models.Model):
    &lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;
    文章
    &lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;
    nid &lt;/span&gt;= models.AutoField(primary_key=&lt;span&gt;True)
    title &lt;/span&gt;= models.CharField(max_length=50)  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 文章标题&lt;/span&gt;
    desc = models.CharField(max_length=255)  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 文章描述&lt;/span&gt;
    create_time = models.DateTimeField(auto_now_add=True)  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 创建时间&lt;/span&gt;
    category = models.ForeignKey(to=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Category&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, to_field=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;nid&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, null=&lt;span&gt;True)

    user &lt;/span&gt;= models.ForeignKey(to=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;UserInfo&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, to_field=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;nid&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)

    tags &lt;/span&gt;=&lt;span&gt; models.ManyToManyField(
        to&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Tag&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
        through&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Article2Tag&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
        through_fields&lt;/span&gt;=(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;article&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;tag&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;),
    )

    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;__str__&lt;/span&gt;&lt;span&gt;(self):
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; self.title

    &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Meta:
        verbose_name &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;文章&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        verbose_name_plural &lt;/span&gt;=&lt;span&gt; verbose_name


&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; ArticleDetail(models.Model):
    &lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;
    文章详情表
    &lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;
    nid &lt;/span&gt;= models.AutoField(primary_key=&lt;span&gt;True)
    content &lt;/span&gt;=&lt;span&gt; models.TextField()
    article &lt;/span&gt;= models.OneToOneField(to=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Article&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, to_field=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;nid&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)

    &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Meta:
        verbose_name &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;文章详情&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        verbose_name_plural &lt;/span&gt;=&lt;span&gt; verbose_name


&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Article2Tag(models.Model):
    &lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;
    文章和标签的多对多关系表
    &lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;
    nid &lt;/span&gt;= models.AutoField(primary_key=&lt;span&gt;True)
    article &lt;/span&gt;= models.ForeignKey(to=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Article&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, to_field=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;nid&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
    tag &lt;/span&gt;= models.ForeignKey(to=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Tag&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, to_field=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;nid&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)

    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;__str__&lt;/span&gt;&lt;span&gt;(self):
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;{}-{}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;.format(self.article, self.tag)

    &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Meta:
        unique_together &lt;/span&gt;= ((&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;article&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;tag&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;),)
        verbose_name &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;文章-标签&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        verbose_name_plural &lt;/span&gt;=&lt;span&gt; verbose_name


&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; ArticleUpDown(models.Model):
    &lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;
    点赞表
    &lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;
    nid &lt;/span&gt;= models.AutoField(primary_key=&lt;span&gt;True)
    user &lt;/span&gt;= models.ForeignKey(to=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;UserInfo&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, null=&lt;span&gt;True)
    article &lt;/span&gt;= models.ForeignKey(to=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Article&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, null=&lt;span&gt;True)
    is_up &lt;/span&gt;= models.BooleanField(default=&lt;span&gt;True)

    &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Meta:
        unique_together &lt;/span&gt;= ((&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;article&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;user&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;),)
        verbose_name &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;点赞&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        verbose_name_plural &lt;/span&gt;=&lt;span&gt; verbose_name


&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Comment(models.Model):
    &lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;
    评论表
    &lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;
    nid &lt;/span&gt;= models.AutoField(primary_key=&lt;span&gt;True)
    article &lt;/span&gt;= models.ForeignKey(to=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Article&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, to_field=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;nid&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
    user &lt;/span&gt;= models.ForeignKey(to=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;UserInfo&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, to_field=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;nid&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
    content &lt;/span&gt;= models.CharField(max_length=255)  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 评论内容&lt;/span&gt;
    create_time = models.DateTimeField(auto_now_add=&lt;span&gt;True)
    parent_comment &lt;/span&gt;= models.ForeignKey(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;self&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, null=&lt;span&gt;True)

    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;__str__&lt;/span&gt;&lt;span&gt;(self):
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; self.content

    &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Meta:
        verbose_name &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;评论&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        verbose_name_plural &lt;/span&gt;= verbose_name
&lt;/pre&gt;&lt;/div&gt;

</description>
<pubDate>Thu, 05 Jul 2018 15:15:00 +0000</pubDate>
<dc:creator>天王盖地虎宝塔镇河妖</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/ManyQian/p/9271324.html</dc:identifier>
</item>
<item>
<title>TensorFlow学习笔记（七）Tonser Board - 左手十字</title>
<link>http://www.cnblogs.com/zuoshoushizi/p/9265993.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/zuoshoushizi/p/9265993.html</guid>
<description>&lt;p&gt;　　为了更好的管理、调试和优化神经网络的训练过程，TensorFlow提供了一个可视化工具TensorBoard。TensorBoard可以有效的展示TensorFlow在运行过程中的计算图。、各种指标随着时间变化的趋势以及训练中使用到的腿昂等信息&lt;/p&gt;
&lt;h3&gt;　  一、TensorBoard简介&lt;/h3&gt;
&lt;h3&gt;　　二、TensorBoard计算图可视化&lt;/h3&gt;
&lt;h3&gt;　　　　1、命名空间与TensorBoard图上节点&lt;/h3&gt;
&lt;h3&gt;　　　　2、节点信息&lt;/h3&gt;
&lt;h3&gt;　　　　3、监控指标可视化&lt;/h3&gt;

&lt;p&gt;　　　TensorBoard是 TensorFlow的可视化工具，它可以通过TensorFlow程序运行过程中输出的日志文件可视化TensorFlow的运行状态。TB与TF跑在不同分进程中。TB自动读取最新的TF日志文件，呈现当前TF的最新状态。&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; tensorflow as tf

&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;定义一个简单的计算图，实现向量的加法&lt;/span&gt;
input1 = tf.constant([1.0,2.0,3.0],name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;input1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
input2 &lt;/span&gt;= tf.Variable(tf.random_uniform([3]),name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;input2&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
output &lt;/span&gt;= tf.add_n([input1,input2],name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;output&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;生成一个写日志的writer，并将当前TF计算图写入日志&lt;/span&gt;
writer = tf.summary.FileWriter(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;path/to/log&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,graph=&lt;span&gt;tf.get_default_graph())
writer.close()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;通过命令tensorboard --logdir=path/to/log 来启动tensorboard&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1224905/201807/1224905-20180705111218671-1602078338.png&quot; alt=&quot;&quot; width=&quot;965&quot; height=&quot;520&quot;/&gt;&lt;/p&gt;



&lt;h2&gt;　　　　1、命名空间与TensorBoard图上节点&lt;/h2&gt;
&lt;p&gt;　　　为了更好的组织可视化效果图上的计算节点，TB支持通过TF命名空间来整理可视化效果图上的节点。TensorFlow提供了两个命名空间函数tf.variable_scope和tf.name_scope。两者基本是等价的。唯一的区别是在使用tf.get_variable上有所不同。&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; tensorflow as tf

with tf.variable_scope(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;foo&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;):
    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;在命名空间foo下，获取变量“bar”。得到变量 foo/bar&lt;/span&gt;
    a = tf.get_variable(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;bar&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,[1&lt;span&gt;])
    &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(a.name)

with tf.variable_scope(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;bar&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;):
    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;在命名空间foo下，获取变量“bar”。得到变量 bar/bar.此时bar/bar和foo/bar并不冲突&lt;/span&gt;
    b = tf.get_variable(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;bar&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,[1&lt;span&gt;])
    &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(b.name)

with tf.name_scope(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;):
    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;使用tf.Variable 会受到tf.name_scope影响。变量名为“b_1/Variable:0”&lt;/span&gt;
    a = tf.Variable([1&lt;span&gt;])
    &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(a.name)
    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;使用tf.get_variable 不会受到tf.name_scope影响。变量名为“b:0”，没有加上name_scope的前缀&lt;/span&gt;
    b = tf.get_variable(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;b&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,[1&lt;span&gt;])
    &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(b.name)
with tf.name_scope(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;b&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;):
    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;使用tf.Variable 会受到tf.name_scope影响。变量名为“b/Variable:0”&lt;/span&gt;
    a = tf.Variable([1&lt;span&gt;])
    &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(a.name)
    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;使用tf.get_variable 不会受到tf.name_scope影响。变量名也为“b:0”，没有加上name_scope的前缀&lt;/span&gt;
    &lt;span&gt;#&lt;/span&gt;&lt;span&gt;会报错重复声明&lt;/span&gt;
    b = tf.get_variable(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;b&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,[1&lt;span&gt;])
    &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(b.name)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;改进上一节的样例代码&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; tensorflow as tf

with tf.name_scope(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;inout1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;):
    input1 &lt;/span&gt;= tf.constant([1.0,2.0,3.0],name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;input1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
with tf.name_scope(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;input2&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;):
    intput2 &lt;/span&gt;= tf.Variable(tf.random_uniform([3]),name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;input2&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
output &lt;/span&gt;= tf.add_n([input1,intput2],name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;add&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)

writer &lt;/span&gt;= tf.summary.FileWriter(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;path/to/log&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,tf.get_default_graph())
writer.close()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可视化TensorFlow（五）中的样例程序&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;66&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt; -*- coding:utf-8 -*-&lt;/span&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; os
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; tensorflow as tf
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; tensorflow.examples.tutorials.mnist &lt;span&gt;import&lt;/span&gt;&lt;span&gt; input_data
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;加载mnsit_inference.py中定义的变量和函数&lt;/span&gt;
&lt;span&gt;from&lt;/span&gt; integerad_mnist &lt;span&gt;import&lt;/span&gt;&lt;span&gt; mnsit_inference1
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; numpy as np

&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;配置神经网络的参数&lt;/span&gt;
BATCH_SIZE = 100&lt;span&gt;
LR_BASE &lt;/span&gt;= 0.8&lt;span&gt;
LR_DECAY &lt;/span&gt;= 0.99&lt;span&gt;
REGULARAZTION_RATE &lt;/span&gt;= 0.0001&lt;span&gt;
TRANING_STEPS &lt;/span&gt;= 30000&lt;span&gt;
MOVING_AVERAGE_DECAY &lt;/span&gt;= 0.99
&lt;span&gt;#&lt;/span&gt;&lt;span&gt;模型保存的文件名和路径&lt;/span&gt;
MODEL_SAVE_PATH = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;path/to/model/&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
MODEL_SAVE_NAME &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;model.ckpt&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;


INPUT_NODE &lt;/span&gt;= 784&lt;span&gt;
OUTPUT_NODE &lt;/span&gt;=10&lt;span&gt;
LAYER_NODE &lt;/span&gt;= 500

&lt;span&gt;def&lt;/span&gt;&lt;span&gt; train(mnsit):
    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;定义输入和输出的placeholder,将处理输入数据的计算都放在“input”&lt;/span&gt;
    with tf.name_scope(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;input&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;):
        x &lt;/span&gt;= tf.placeholder(tf.float32,shape=[None,mnsit_inference1.INPUT_NODE],name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;x_input&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
        y_ &lt;/span&gt;= tf.placeholder(tf.float32,shape=[None,mnsit_inference1.OUTPUT_NODE],name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;y_input&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
    regularizer &lt;/span&gt;=&lt;span&gt; tf.contrib.layers.l2_regularizer(REGULARAZTION_RATE)
    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;直接使用mnsit_inference中定义的前向传播过程&lt;/span&gt;
    y =&lt;span&gt; mnsit_inference1.inference(x,regularizer)
    global_step &lt;/span&gt;= tf.Variable(0,trainable=&lt;span&gt;False)
    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;将处理滑动平均相关的计算都放在moving_average命名空间下&lt;/span&gt;
    with tf.name_scope(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;moving_average&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;):
        variable_average &lt;/span&gt;=&lt;span&gt; tf.train.ExponentialMovingAverage(MOVING_AVERAGE_DECAY,global_step)
        variable_average_op &lt;/span&gt;=&lt;span&gt; variable_average.apply(tf.trainable_variables())
    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;将计算loss相关的计算都放在loss_func命名空间下&lt;/span&gt;
    with tf.name_scope(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;loss_func&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;):
        cross_entropy &lt;/span&gt;= tf.nn.sparse_softmax_cross_entropy_with_logits(labels=tf.argmax(y_,1),logits=&lt;span&gt;y)
        cross_entropy_mean &lt;/span&gt;=&lt;span&gt; tf.reduce_mean(cross_entropy)
        loss &lt;/span&gt;= cross_entropy_mean + tf.add_n(tf.get_collection(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;losses&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;))
    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;定义学习率、优化方法等放在“train_step”下&lt;/span&gt;
    with tf.name_scope(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;train_step&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;):
        learning_rate &lt;/span&gt;= tf.train.exponential_decay(LR_BASE,global_step,mnsit.train.num_examples/&lt;span&gt;BATCH_SIZE,LR_DECAY)
        train_step &lt;/span&gt;= tf.train.GradientDescentOptimizer(learning_rate).minimize(loss,global_step=&lt;span&gt;global_step)
        with tf.control_dependencies([train_step,variable_average_op]):
            train_op &lt;/span&gt;= tf.no_op(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;train&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;初始化TF的持久化类&lt;/span&gt;
    saver =&lt;span&gt; tf.train.Saver()
    with tf.Session() as sess:
        tf.initialize_all_variables().run()
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; i &lt;span&gt;in&lt;/span&gt;&lt;span&gt; range(TRANING_STEPS):
            xs,ys &lt;/span&gt;=&lt;span&gt; mnsit.train.next_batch(BATCH_SIZE)
            _,loss_value,step &lt;/span&gt;= sess.run([train_op,loss,global_step],feed_dict=&lt;span&gt;{x:xs,y_:ys})
            &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;每1000轮保存一次模型&lt;/span&gt;
            &lt;span&gt;if&lt;/span&gt; i % 1000 ==&lt;span&gt; 0:
                &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;After {0} training steps,loss on training batch is {1}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;.format(step,loss_value))
                saver.save(sess,os.path.join(MODEL_SAVE_PATH,MODEL_SAVE_NAME),global_step&lt;/span&gt;=&lt;span&gt;global_step)
    writer &lt;/span&gt;= tf.summary.FileWriter(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;path/to/log&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,tf.get_default_graph())
    writer.close()
&lt;/span&gt;&lt;span&gt;def&lt;/span&gt; main(argv =&lt;span&gt; None):
    mnsit &lt;/span&gt;= input_data.read_data_sets(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;mnist_set&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,one_hot=&lt;span&gt;True)
    train(mnsit)
&lt;/span&gt;&lt;span&gt;if&lt;/span&gt; &lt;span&gt;__name__&lt;/span&gt; == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__main__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
    tf.app.run()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;生成的TB可视化&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1224905/201807/1224905-20180705204916795-1075388752.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; 　　　　除了手动的通过TensorFlow的命名空间来调整TensorBoard的可视化效果图，TensorFlow也会智能的调整可视化效果图上的节点。TB将TF分成了主图和辅助图。左侧的Graph为主图，右侧的Auxiliary Nodes为辅助图。TF会主动把连接表较多的点列出来放在辅助图中。&lt;/p&gt;
&lt;p&gt;　　　　除了自动的方式，TF也支持手动的方式来调整可视化效果。&lt;/p&gt;

&lt;h2&gt;　　　　2、节点信息&lt;/h2&gt;
&lt;p&gt;　　除了展示TF计算图的结构，TB还可以展示TF计算图上每个节点的基本信息以及运行是所消耗的时间以及空间。&lt;/p&gt;
&lt;p&gt;　　调整上面代码中迭代训练的部分，展示每次迭代TF计算节点运行时间和消耗的内存。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt;    with tf.Session() as sess:
        tf.initialize_all_variables().run()
        writer &lt;/span&gt;= tf.summary.FileWriter(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;path/to/log&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,tf.get_default_graph())
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; i &lt;span&gt;in&lt;/span&gt;&lt;span&gt; range(TRANING_STEPS):

            xs,ys &lt;/span&gt;=&lt;span&gt; mnsit.train.next_batch(BATCH_SIZE)
            _,loss_value,step &lt;/span&gt;= sess.run([train_op,loss,global_step],feed_dict=&lt;span&gt;{x:xs,y_:ys})
            &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;每1000轮记录一次运行状态&lt;/span&gt;
            &lt;span&gt;if&lt;/span&gt; i % 1000 ==&lt;span&gt; 0:
                &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;配置运行是需要记录的信息&lt;/span&gt;
                run_options =tf.RunOptions(trace_level =&lt;span&gt; tf.RunOptions.FULL_TRACE)
                run_metadata &lt;/span&gt;=&lt;span&gt; tf.RunMetadata()
                &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;将配置信息和记录运行是的元信息传入运行过程&lt;/span&gt;
                _,loss_value,step = sess.run([train_op,loss,global_step],feed_dict={x:xs,y_:ys},options=run_options,run_metadata=&lt;span&gt;run_metadata)
                &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;将节点在运行是的信息写入日志&lt;/span&gt;
                writer.add_run_metadata(run_metadata,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;step-%s&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;%&lt;span&gt;i)
                &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;After {0} training steps,loss on training batch is {1}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;.format(step,loss_value))
            &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;:
                 _,loss_value,step &lt;/span&gt;= sess.run([train_op,loss,global_step],feed_dict=&lt;span&gt;{x:xs,y_:ys})
    writer.close()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;　　　　3、监控指标可视化&lt;/h2&gt;
&lt;p&gt;　　TB除了可视化TF的计算图，还可以可视化TF运行程序中各种有助于了解运行程序状态的监控指标。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;84&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; tensorflow as tf
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; tensorflow.examples.tutorials.mnist &lt;span&gt;import&lt;/span&gt;&lt;span&gt; input_data
SUMMARY_DIR &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;path/to/log&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
BATCH_SIZE &lt;/span&gt;=100&lt;span&gt;
TRAIN_STEPS &lt;/span&gt;=30000

&lt;span&gt;def&lt;/span&gt;&lt;span&gt; variable_summaries(var,name):
    with tf.name_scope(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;summaries&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;):
        tf.summary.histogram(name,var)
        mean &lt;/span&gt;=&lt;span&gt; tf.reduce_mean(var)
        tf.summary.scalar(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;mean/&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;+&lt;span&gt;name,mean)
        stddev &lt;/span&gt;= tf.sqrt(tf.reduce_mean(tf.square(var-&lt;span&gt;mean)))
        tf.summary.scalar(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;stddev/&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;+&lt;span&gt;name,stddev)

&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;生成一层全连接层神经网络&lt;/span&gt;
&lt;span&gt;def&lt;/span&gt; nn_layer(input_tensor,input_dim,output_dim,layer_name,act=&lt;span&gt; tf.nn.relu):
    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;将同一层神经网络放在一个统一的空间&lt;/span&gt;
&lt;span&gt;    with tf.name_scope(layer_name):
        with tf.name_scope(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;weights&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;):
            weights &lt;/span&gt;= tf.Variable(tf.truncated_normal([input_dim,output_dim],stddev=0.1&lt;span&gt;))
            variable_summaries(weights,layer_name&lt;/span&gt;+&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/weights&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
        with tf.name_scope(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;biases&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;):
            biases &lt;/span&gt;= tf.Variable(tf.constant(0.0,shape=&lt;span&gt;[output_dim]))
            variable_summaries(biases,layer_name&lt;/span&gt;+&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/biases&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
        with tf.name_scope(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Wx_plus_b&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;):
            preactivate &lt;/span&gt;= tf.matmul(input_tensor,weights)+&lt;span&gt;biases
            tf.summary.histogram(layer_name&lt;/span&gt;+&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/pre_activations&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,preactivate)
            activations &lt;/span&gt;=&lt;span&gt; act(preactivate)
            tf.summary.histogram(layer_name&lt;/span&gt;+&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/activations&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,activations)
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; activations
&lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; main(_):
    mnsit &lt;/span&gt;= input_data.read_data_sets(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;mnist_set&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,one_hot=&lt;span&gt;True)
    with tf.name_scope(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;input&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;):
        x &lt;/span&gt;= tf.placeholder(tf.float32,shape=[None,784],name=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;x_input&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
        y_ &lt;/span&gt;= tf.placeholder(tf.float32,shape=[None,10],name=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;y_input&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
    with tf.name_scope(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;input_reshape&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;):
        image_shaped_input &lt;/span&gt;= tf.reshape(x,[-1,28,28,1&lt;span&gt;])
        tf.summary.image(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;input&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,image_shaped_input,10&lt;span&gt;)
    hidden1 &lt;/span&gt;= nn_layer(x,784,500,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;layer1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
    y &lt;/span&gt;= nn_layer(hidden1,500,10,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;layer2&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
    with tf.name_scope(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;cross_entropy&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;):
        cross_entropy &lt;/span&gt;= tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(labels=y_,logits=&lt;span&gt;y))
        tf.summary.scalar(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;cross_entropy&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,cross_entropy)
    with tf.name_scope(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;train&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;):
        train_op &lt;/span&gt;= tf.train.AdamOptimizer(0.001&lt;span&gt;).minimize(cross_entropy)
    with tf.name_scope(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;accuracy&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;):
        with tf.name_scope(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;correct_prediction&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;):
            correct_prediction &lt;/span&gt;= tf.equal(tf.arg_max(y,1),tf.argmax(y_,1&lt;span&gt;))
        with tf.name_scope(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;accuracy&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;):
            accuracy &lt;/span&gt;=&lt;span&gt; tf.reduce_mean(tf.cast(correct_prediction,tf.float32))
            tf.summary.scalar(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;accuracy&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,accuracy)
    merged &lt;/span&gt;=&lt;span&gt; tf.summary.merge_all()

    with tf.Session() as sess :
        summary_writer &lt;/span&gt;=&lt;span&gt; tf.summary.FileWriter(SUMMARY_DIR,sess.graph)
        tf.global_variables_initializer().run()
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; i &lt;span&gt;in&lt;/span&gt;&lt;span&gt; range(TRAIN_STEPS):
            xs,ys &lt;/span&gt;=&lt;span&gt; mnsit.train.next_batch(BATCH_SIZE)
            summary,_ &lt;/span&gt;= sess.run([merged,train_op],feed_dict=&lt;span&gt;{x:xs,y_:ys})
            summary_writer.add_summary(summary,i)
    summary_writer.close()

&lt;/span&gt;&lt;span&gt;if&lt;/span&gt; &lt;span&gt;__name__&lt;/span&gt; == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__main__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
    tf.app.run()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1224905/201807/1224905-20180705223132596-659682278.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

</description>
<pubDate>Thu, 05 Jul 2018 14:39:00 +0000</pubDate>
<dc:creator>左手十字</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/zuoshoushizi/p/9265993.html</dc:identifier>
</item>
<item>
<title>CentOS7.5之MongoDB4.0安装与CRUD基本操作 - FrankDeng</title>
<link>http://www.cnblogs.com/frankdeng/p/9158075.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/frankdeng/p/9158075.html</guid>
<description>&lt;h2&gt;一 MongoDB简介&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;MongoDB 是一个基于分布式文件存储的数据库。由 C++ 语言编写。旨在为 WEB 应用提供可扩展的高性能数据存储解决方案。&lt;/li&gt;
&lt;li&gt;&lt;span&gt;&lt;span&gt;MongoDB 是一个介于关系数据库和非关系数据库之间的产品，是非关系数据库当中功能最丰富，最像关系数据库的。&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;MongoDB中的记录是一个文档，它是由字段和值对组成的数据结构。&lt;/span&gt;&lt;span&gt;MongoDB文档类似于JSON对象。&lt;/span&gt;&lt;span&gt;字段的值可以包括其他文档，数组和文档数组。&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;二 MongoDB下载安装&lt;/h2&gt;
&lt;h3&gt;2.1 下载地址：&lt;/h3&gt;
&lt;p&gt;      &lt;a href=&quot;https://www.mongodb.com/download-center?jmp=nav#community&quot; target=&quot;_blank&quot;&gt;https://www.mongodb.com/download-center?jmp=nav#community&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;MongoDB的版本偶数版本为稳定版，奇数版本为开发版。&lt;/li&gt;
&lt;li&gt;MongoDB对于32位系统支持不佳，所以3.2版本以后没有再对32位系统的支持。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1385722/201807/1385722-20180705102348397-2028161543.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;2.2 下载安装&lt;/h3&gt;
&lt;p&gt;下载完安装包，并解压 &lt;strong&gt;tgz&lt;/strong&gt;（以下演示的是 64 位 Linux上的安装） 。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
curl -O https:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;fastdl.mongodb.org/linux/mongodb-linux-x86_64-rhel70-4.0.0.tgz    # 下载&lt;/span&gt;
tar -zxvf mongodb-linux-x86_64-rhel70-&lt;span&gt;4.0&lt;/span&gt;.&lt;span&gt;0&lt;/span&gt;&lt;span&gt;.tgz                                   # 解压
mv  mongodb&lt;/span&gt;-linux-x86_64-rhel70-&lt;span&gt;4.0&lt;/span&gt;.&lt;span&gt;0&lt;/span&gt; /usr/local/mongodb                          # 将解压包拷贝到指定目录
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; MongoDB 的可执行文件位于 bin 目录下，所以可以将其添加到 &lt;strong&gt;PATH&lt;/strong&gt; 路径中：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
export PATH=&amp;lt;mongodb-install-directory&amp;gt;/bin:$PATH
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;&amp;lt;mongodb-install-directory&amp;gt;&lt;/strong&gt; 为你 MongoDB 的安装路径。如本文的 &lt;strong&gt;/usr/local/mongodb&lt;/strong&gt; 。&lt;/p&gt;
&lt;h3&gt;2.3 bin目录结构&lt;/h3&gt;
&lt;p&gt;bsondump: binary-json,二进制文件,选择性导出bson文件&lt;/p&gt;
&lt;p&gt;mongo: 客户端&lt;/p&gt;
&lt;p&gt;mongod: 服务端&lt;/p&gt;
&lt;p&gt;mongodump: 整体导出数据库（二进制）&lt;/p&gt;
&lt;p&gt;mongoexport：导出易识别的json文档&lt;/p&gt;
&lt;p&gt;mongoimport：导入json文档&lt;/p&gt;
&lt;p&gt;mongorestore：数据库整体导入&lt;/p&gt;
&lt;p&gt;mongos&lt;span&gt;：&lt;/span&gt; &lt;span&gt;路由器（分片）&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;2.4 创建数据库目录&lt;/h3&gt;
&lt;p&gt;MongoDB的数据存储在data目录的db目录下，但是这个目录在安装过程不会自动创建，所以你需要手动创建data目录，并在data目录中创建db目录。&lt;/p&gt;
&lt;p&gt;以下实例中我们将data目录创建于MongoDB安装目录下。&lt;/p&gt;
&lt;p&gt;注意：/data/db 是 MongoDB 默认的启动的数据库路径(--dbpath)。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
[root@node21 mongodb]$  mkdir -p data&lt;span&gt;
[root@node21 mongodb]$  mkdir &lt;/span&gt;-p log/mongodb.log
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;span&gt;2.5 运行 MongoDB 服务&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;你可以再命令行中执行mongo安装目录中的bin目录执行mongod命令来启动mongdb服务。     注意：如果你的数据库目录不是/data/db，可以通过 --dbpath 来指定。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;[root@node21 mongodb]$ ./bin/mongod --dbpath ./data/  --logpath ./log/mongodb.log --port 27017 --fork&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;参数解释:       dbpath 数据存储目录           logpath 日志存储文件          port 运行端口(默认27017)          fork 后台静默运行&lt;/p&gt;
&lt;p&gt;查看MongoDB运行进程&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
[root@node21 mongodb]# ps aux |grep mongod
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;2.6 后台管理 Shell&lt;/h3&gt;
&lt;p&gt;如果你需要进入MongoDB后台管理，你需要先打开mongodb装目录的下的bin目录，然后执行mongo命令文件。MongoDB Shell是MongoDB自带的交互式Javascript shell,用来对MongoDB进行操作和管理的交互式环境。当你进入mongoDB后台后，它默认会链接到 test 文档（数据库）：   &lt;span class=&quot;pln&quot;&gt;$ cd &lt;span class=&quot;pun&quot;&gt;/&lt;span class=&quot;pln&quot;&gt;usr&lt;span class=&quot;pun&quot;&gt;/&lt;span class=&quot;kwd&quot;&gt;local&lt;span class=&quot;pun&quot;&gt;/&lt;span class=&quot;pln&quot;&gt;mongodb&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;pre class=&quot;prettyprint prettyprinted&quot;&gt;
&lt;/pre&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
[root@node21 mongodb]# ./bin/&lt;span&gt;mongo
MongoDB shell version v4.&lt;/span&gt;&lt;span&gt;0.0&lt;/span&gt;&lt;span&gt;
connecting to: mongodb:&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;127.0.0.1:27017&lt;/span&gt;
MongoDB server version: &lt;span&gt;4.0&lt;/span&gt;.&lt;span&gt;0&lt;/span&gt;&lt;span&gt;
Welcome to the MongoDB shell.&lt;br/&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;2.7 基本概念解释&lt;/h3&gt;
&lt;div class=&quot;Section0&quot;&gt;
&lt;table border=&quot;1&quot; cellspacing=&quot;0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; width=&quot;124&quot;&gt;
&lt;p class=&quot;15&quot;&gt;&lt;strong&gt;MongoDB&lt;/strong&gt;术语&lt;strong&gt;/&lt;/strong&gt;概念&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;216&quot;&gt;
&lt;p class=&quot;15&quot; align=&quot;center&quot;&gt;解释&lt;strong&gt;/&lt;/strong&gt;说明&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; width=&quot;124&quot;&gt;
&lt;p class=&quot;15&quot;&gt;database&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;216&quot;&gt;
&lt;p class=&quot;15&quot;&gt;数据库&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;
&lt;table border=&quot;1&quot; cellspacing=&quot;0&quot;&gt;&lt;tbody readability=&quot;1.5&quot;&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; width=&quot;124&quot;&gt;
&lt;p class=&quot;15&quot;&gt;collection&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;216&quot;&gt;
&lt;p class=&quot;15&quot;&gt;数据库表/集合&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; width=&quot;124&quot;&gt;
&lt;p class=&quot;15&quot;&gt;document&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;216&quot;&gt;
&lt;p class=&quot;15&quot;&gt;数据记录行/文档&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; width=&quot;124&quot;&gt;
&lt;p class=&quot;15&quot;&gt;field&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;216&quot;&gt;
&lt;p class=&quot;15&quot;&gt;数据字段/域&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; width=&quot;124&quot;&gt;
&lt;p class=&quot;15&quot;&gt;index&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;216&quot;&gt;
&lt;p class=&quot;15&quot;&gt;索引&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4.5&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;124&quot;&gt;
&lt;p class=&quot;15&quot;&gt;primary key&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;216&quot; readability=&quot;6&quot;&gt;
&lt;p class=&quot;15&quot;&gt;主键,MongoDB自动将_id字段设置为主键&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h3&gt;2.8 Shell help 帮助解释&lt;/h3&gt;
&lt;table border=&quot;1&quot; cellspacing=&quot;0&quot;&gt;&lt;tbody readability=&quot;11&quot;&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; width=&quot;332&quot;&gt;
&lt;p class=&quot;15&quot;&gt;参数&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;492&quot;&gt;
&lt;p class=&quot;15&quot;&gt;说明&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;332&quot;&gt;
&lt;p class=&quot;15&quot;&gt;--help –h&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;492&quot; readability=&quot;5&quot;&gt;
&lt;p class=&quot;15&quot;&gt;返回基本帮助和用法文本&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; width=&quot;332&quot;&gt;
&lt;p class=&quot;15&quot;&gt;--version&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;492&quot;&gt;
&lt;p class=&quot;15&quot;&gt;返回MongoDB的版本&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;6&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;332&quot; readability=&quot;5&quot;&gt;
&lt;p class=&quot;15&quot;&gt;--config&amp;lt;文件名&amp;gt; -f&amp;lt;文件名&amp;gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;492&quot; readability=&quot;5&quot;&gt;
&lt;p class=&quot;15&quot;&gt;指定包含运行时配置的配置文件&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;332&quot;&gt;
&lt;p class=&quot;15&quot;&gt;--verbose -v&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;492&quot; readability=&quot;5&quot;&gt;
&lt;p class=&quot;15&quot;&gt;增加发送到控制台日志的数量&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;332&quot;&gt;
&lt;p class=&quot;15&quot;&gt;--quiet&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;492&quot; readability=&quot;5&quot;&gt;
&lt;p class=&quot;15&quot;&gt;减少发送到控制台日志的数量&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;332&quot;&gt;
&lt;p class=&quot;15&quot;&gt;--port&amp;lt;端口&amp;gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;492&quot; readability=&quot;5&quot;&gt;
&lt;p class=&quot;15&quot;&gt;指定mongod的端口，默认27017&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; width=&quot;332&quot;&gt;
&lt;p class=&quot;15&quot;&gt;--bind_ip&amp;lt;端口&amp;gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;492&quot;&gt;
&lt;p class=&quot;15&quot;&gt;指定id地址&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; width=&quot;332&quot;&gt;
&lt;p class=&quot;15&quot;&gt;--maxConns&amp;lt;编号&amp;gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;492&quot;&gt;
&lt;p class=&quot;15&quot;&gt;指定链接的最大数&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;332&quot;&gt;
&lt;p class=&quot;15&quot;&gt;--logpath&amp;lt;路径&amp;gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;492&quot; readability=&quot;5&quot;&gt;
&lt;p class=&quot;15&quot;&gt;指定日志文件的路径&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;332&quot;&gt;
&lt;p class=&quot;15&quot;&gt;--auth&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;492&quot; readability=&quot;5&quot;&gt;
&lt;p class=&quot;15&quot;&gt;启用远程主机的身份验证&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;332&quot;&gt;
&lt;p class=&quot;15&quot;&gt;--dbpath&amp;lt;路径&amp;gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;492&quot; readability=&quot;5&quot;&gt;
&lt;p class=&quot;15&quot;&gt;指定数据库实例的路径&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; width=&quot;332&quot;&gt;
&lt;p class=&quot;15&quot;&gt;--nohttpinterface&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;492&quot;&gt;
&lt;p class=&quot;15&quot;&gt;禁用HTTP接口&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; width=&quot;332&quot;&gt;
&lt;p class=&quot;15&quot;&gt;--nojournal&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;492&quot;&gt;
&lt;p class=&quot;15&quot;&gt;禁用日志&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;332&quot;&gt;
&lt;p class=&quot;15&quot;&gt;--noprealloc&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;492&quot; readability=&quot;5&quot;&gt;
&lt;p class=&quot;15&quot;&gt;禁止预分配数据文件&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;332&quot;&gt;
&lt;p class=&quot;15&quot;&gt;--repair&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;492&quot; readability=&quot;5&quot;&gt;
&lt;p class=&quot;15&quot;&gt;在所有数据库上运行修复程序&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;h3&gt;2.9 MongoDB 数据类型&lt;/h3&gt;
&lt;p&gt;下表为MongoDB中常用的几种数据类型。&lt;/p&gt;
&lt;table class=&quot;reference&quot;&gt;&lt;tbody readability=&quot;14.5&quot;&gt;&lt;tr&gt;&lt;th&gt;数据类型&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td&gt;String&lt;/td&gt;
&lt;td&gt;字符串。存储数据常用的数据类型。在 MongoDB 中，UTF-8 编码的字符串才是合法的。&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;Integer&lt;/td&gt;
&lt;td&gt;整型数值。用于存储数值。根据你所采用的服务器，可分为 32 位或 64 位。&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;Boolean&lt;/td&gt;
&lt;td&gt;布尔值。用于存储布尔值（真/假）。&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;Double&lt;/td&gt;
&lt;td&gt;双精度浮点值。用于存储浮点值。&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;Min/Max keys&lt;/td&gt;
&lt;td&gt;将一个值与 BSON（二进制的 JSON）元素的最低值和最高值相对比。&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;Array&lt;/td&gt;
&lt;td&gt;用于将数组或列表或多个值存储为一个键。&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;Timestamp&lt;/td&gt;
&lt;td&gt;时间戳。记录文档修改或添加的具体时间。&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Object&lt;/td&gt;
&lt;td&gt;用于内嵌文档。&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Null&lt;/td&gt;
&lt;td&gt;用于创建空值。&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td&gt;Symbol&lt;/td&gt;
&lt;td&gt;符号。该数据类型基本上等同于字符串类型，但不同的是，它一般用于采用特殊符号类型的语言。&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td&gt;Date&lt;/td&gt;
&lt;td&gt;日期时间。用 UNIX 时间格式来存储当前日期或时间。你可以指定自己的日期时间：创建 Date 对象，传入年月日信息。&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;Object ID&lt;/td&gt;
&lt;td&gt;对象 ID。用于创建文档的 ID。&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;Binary Data&lt;/td&gt;
&lt;td&gt;二进制数据。用于存储二进制数据。&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;Code&lt;/td&gt;
&lt;td&gt;代码类型。用于在文档中存储 JavaScript 代码。&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;Regular expression&lt;/td&gt;
&lt;td&gt;正则表达式类型。用于存储正则表达式。&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;br/&gt;ObjectId&lt;/strong&gt;&lt;/span&gt; 类似唯一主键，可以很快的去生成和排序，包含 12 bytes，含义是：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;前 4 个字节表示创建 &lt;strong&gt;unix&lt;/strong&gt;时间戳,格林尼治时间 &lt;strong&gt;UTC&lt;/strong&gt; 时间，比北京时间早了 8 个小时&lt;/li&gt;
&lt;li&gt;接下来的 3 个字节是机器标识码&lt;/li&gt;
&lt;li&gt;紧接的两个字节由进程 id 组成 PID&lt;/li&gt;
&lt;li&gt;最后三个字节是随机数&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;http://www.runoob.com/wp-content/uploads/2013/10/2875754375-5a19268f0fd9b_articlex.jpeg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;MongoDB 中存储的文档必须有一个 _id 键。这个键的值可以是任何类型的，默认是个 ObjectId 对象&lt;/p&gt;
&lt;p&gt;由于 ObjectId 中保存了创建的时间戳，所以你不需要为你的文档保存时间戳字段，你可以通过 getTimestamp 函数来获取文档的创建时间:&lt;/p&gt;
&lt;pre class=&quot;prettyprint prettyprinted&quot;&gt;
&lt;span class=&quot;pun&quot;&gt;&amp;gt;&lt;span class=&quot;pln&quot;&gt; &lt;span class=&quot;kwd&quot;&gt;var&lt;span class=&quot;pln&quot;&gt; newObject &lt;span class=&quot;pun&quot;&gt;=&lt;span class=&quot;pln&quot;&gt; &lt;span class=&quot;typ&quot;&gt;ObjectId&lt;span class=&quot;pun&quot;&gt;()&lt;span class=&quot;pln&quot;&gt;
&lt;span class=&quot;pun&quot;&gt;&amp;gt;&lt;span class=&quot;pln&quot;&gt; newObject&lt;span class=&quot;pun&quot;&gt;.&lt;span class=&quot;pln&quot;&gt;getTimestamp&lt;span class=&quot;pun&quot;&gt;()&lt;span class=&quot;pln&quot;&gt;
&lt;span class=&quot;typ&quot;&gt;ISODate&lt;span class=&quot;pun&quot;&gt;(&lt;span class=&quot;str&quot;&gt;&quot;2018-07-05T07:21:10Z&quot;&lt;span class=&quot;pun&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;ObjectId 转为字符串&lt;/p&gt;
&lt;pre class=&quot;prettyprint prettyprinted&quot;&gt;
&lt;span class=&quot;pun&quot;&gt;&amp;gt;&lt;span class=&quot;pln&quot;&gt; newObject&lt;span class=&quot;pun&quot;&gt;.&lt;span class=&quot;pln&quot;&gt;str
&lt;span class=&quot;lit&quot;&gt;5a1919e63df83ce79df8b38f&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;h2&gt;&lt;strong&gt;三 Mongodb&lt;/strong&gt;入门命令&lt;/h2&gt;
&lt;h3&gt;3.1 基本查看命令&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;show dbs 查看当前的数据库
use databaseName 选库
show tables/collections 查看当前库下的collection&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;Section0&quot; readability=&quot;12&quot;&gt;
&lt;h3 class=&quot;15&quot;&gt;3.2 库和&lt;strong&gt;集合&lt;/strong&gt;的操作&lt;/h3&gt;
&lt;p&gt;db    查看当前所处的数据库，在mongodb中,库是隐式创建,你可以use 一个不存在的库, 然后在该库下创建collection,即可创建库&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;Section1&quot; readability=&quot;9&quot;&gt;
&lt;p&gt;db.dropDatabase();    删除database，&lt;span&gt;把当前所用的库给删除了&lt;/span&gt;, &lt;span&gt;即使里面有数据也会删除&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;Section2&quot; readability=&quot;68&quot;&gt;
&lt;p&gt;db.createCollection(‘collectionName’)，  创建collection，collection也是允许隐式创建的&lt;/p&gt;
&lt;p&gt;db.collectionName.insert(document); 在集合(表)中插入具体数据的时候会自动创建&lt;/p&gt;
&lt;p&gt;db.collectionName.drop() ,   删除collection&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;测试隐式创建&lt;/span&gt;：往不存在的students表中插入数据&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&amp;gt;&lt;span&gt; show dbs
admin &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;.000GB
config &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;.000GB
local &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;.000GB
&lt;/span&gt;&amp;gt;&lt;span&gt; use admin
 switched to db admin
&lt;/span&gt;&amp;gt; db.students.insert({name:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;zhangsan&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,age:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;})
WriteResult({ &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;nInserted&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; : &lt;span&gt;1&lt;/span&gt;&lt;span&gt; })
&lt;/span&gt;&amp;gt;&lt;span&gt; show tables
students&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;删除当前库里的students表&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&amp;gt; db. students. drop()  &lt;br/&gt;true
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;span&gt;四&lt;/span&gt; &lt;strong&gt;Mongodb&lt;/strong&gt;基本增删改查&lt;/h2&gt;
&lt;h3&gt;4.1 增加数据&lt;/h3&gt;
&lt;p&gt;mongodb存储的是文档,文档是json格式的对象,我们向数据库存储数据的时候可以使用insert方法,数据格式要以js对象格式进行存储:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;语法&lt;/strong&gt;：&lt;span&gt;db.collectionName.insert(document);&lt;/span&gt;&lt;/p&gt;
&lt;pre&gt;
db.students.insert({name:'zhangsan',age:'20'&lt;span&gt;})   &lt;/span&gt;&lt;span&gt;向当前&lt;/span&gt;students&lt;span&gt;表里插入数据&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;我们可以以多种方法对文档进行存储:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4.1.2 增加单篇文档 &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;语法：&lt;/strong&gt;&lt;span&gt;db.collectionName.insert({title:&quot;nice  day&quot;});&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;15&quot;&gt;&lt;strong&gt;4.1.3 增加单个文档,并且指定_id&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;语法：&lt;/strong&gt;&lt;span&gt;db.collectionName.insert({_id:8,age:78,name:&quot;lisi&quot;});&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;_id 是我们在插入数据的时候,mongodb自动给文档添加的一个属性,如果我们不需要系统分配_id ,可以在添加数据的时候手动设置,覆盖原有_id ,虽然_id 的类型可以自由指定,但是在同一个集合当中必须唯一,如果插入重复的值,系统会抛出异常.&lt;/p&gt;
&lt;p&gt;这个_id 的名称是固定的,它可以是Mongodb支持的任何数据类型,默认是ObjectId,在关系型数据库中,主键通常是数值型的,并且可以设置自增,而Mongodb的主键,原生不支持自增主键.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;Section3&quot; readability=&quot;31.5&quot;&gt;
&lt;p&gt;&lt;strong&gt;4.1.4 增加多个文档 &lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;db.students.insert( [{time:&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;friday&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,value:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;mongodb&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;},{_id:&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;,gender:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;male&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,name:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;QQ&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;}])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可以以数组的方式,一次性向集合插入多个数据;  同时应该注意的是,由于mongodb采用的是&lt;span&gt;J&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;v&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;S&lt;/span&gt;&lt;span&gt;c&lt;/span&gt;&lt;span&gt;r&lt;/span&gt;&lt;span&gt;i&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;t&lt;/span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;S&lt;/span&gt;&lt;span&gt;he&lt;/span&gt;&lt;span&gt;l&lt;/span&gt;&lt;span&gt;l&lt;/span&gt;,所以我们可以根据js特性,将文档作为值赋给变量然后进行操作:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
j = {name : 'isi'}; &lt;br/&gt;t = {name : 'wangwu’&lt;span&gt;};
db.students.insert([j,t]);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p class=&quot;15&quot;&gt;&lt;strong&gt;4.1.5 save和insert的区别&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;save和insert都可以进行数据的插入和增加,但是也有一些异同:&lt;/p&gt;
&lt;p&gt;对于已存在数据&lt;span&gt;{ &lt;/span&gt;_id:1,  &quot;name&quot;:&quot;n1&quot; }，再次进行插入操作时，insert({_id  :  1,  &quot;name&quot;  :&quot;n2&quot;}) 会报主键重复的错误提示 save({  _id:1,  &quot;  name  &quot;:&quot;n2&quot;}) &lt;span&gt;会把&lt;/span&gt;n1&lt;span&gt;修改为&lt;/span&gt;n2&lt;span&gt;。&lt;/span&gt; &lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;Section4&quot; readability=&quot;9&quot;&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;相同点：&lt;/span&gt;&lt;span&gt;若新增的数据中没有主键时，会增加一条记录。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;不同点：&lt;span&gt;主键冲突时&lt;/span&gt;:insert 会报错，save会自增_i d 主键插入&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;4.2 查询操作&lt;/h3&gt;
&lt;p class=&quot;15&quot;&gt;&lt;strong&gt;4.2.1 find()&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;Section5&quot; readability=&quot;40.5&quot;&gt;
&lt;p&gt;无条件的普通查询方式很简单,可以直接使用&lt;/p&gt;
&lt;p&gt;db.collectionName.find(&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;一次可以查出指定集合中的所有数据 &lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;for&lt;/span&gt;(&lt;span&gt;var &lt;/span&gt;i = &lt;span&gt;1&lt;/span&gt;;&lt;span&gt;1&lt;/span&gt;&amp;lt;&lt;span&gt;5&lt;/span&gt;;i++) { db.students.save({x:&lt;span&gt;i&lt;/span&gt;,y:&lt;span&gt;i+1&lt;/span&gt;&lt;span&gt;}) }  
db.students.find();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果出现显示不全的现象,可以使用&quot;it&quot;命令,继续显示下面的数据. 当然,我们还可以按照条件进行查询操作&lt;/p&gt;
&lt;p&gt;语法: db.collection.find(&lt;span&gt;查询表达式&lt;/span&gt;,&lt;span&gt;查询的列&lt;/span&gt;)&lt;span&gt;;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;例1:  db.students.find({},{gendre:1})&lt;/p&gt;
&lt;p&gt;查询所有文档,的gender&lt;span&gt;属性&lt;/span&gt; (_id属性默认总是查出来)&lt;/p&gt;
&lt;p&gt;例2:  db.students.find({},{gender:1,  _id:0})&lt;/p&gt;
&lt;p&gt;查询所有文档的gender属性,且不查询_id属性&lt;/p&gt;
&lt;p&gt;此处的0表示的是false,不查询   &lt;/p&gt;
&lt;p&gt;例3: db.students.find({gender:’male’},{name:1,_id:0&lt;span&gt;}&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;Section6&quot; readability=&quot;78.5&quot;&gt;
&lt;p&gt;查询所有gender属性值为male的文档中的name属性&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4.2.2 findOne()&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;findOne()和find()函数一样,只是findOne()返回的是查询结果中的第一条数据,或者返回null. &lt;/p&gt;
&lt;h3&gt;4.3 删除操作&lt;/h3&gt;
&lt;p&gt;语法: db.collectionName.remove(&lt;span&gt;查询表达式&lt;/span&gt;,  &lt;span&gt;选项&lt;/span&gt;);&lt;/p&gt;
&lt;p&gt;选项是指 &lt;span&gt;{&lt;/span&gt;justOne:true/false},是否只删一行, 默认为false   &lt;span&gt;注意&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;1: 查询表达式依然是个json对象&lt;/p&gt;
&lt;p&gt;2: 查询表达式匹配的行,将被删掉.&lt;/p&gt;
&lt;p&gt;3: 如果查询表达式为空对象{},collections中的所有文档将被删掉. &lt;/p&gt;
&lt;p&gt;例1： db.students.remove({sn:'001'});&lt;/p&gt;
&lt;p&gt;删除stu表中sn属性值为'001'的文档 &lt;/p&gt;
&lt;p&gt;例2：  db.students.remove({gender:'m'},true);&lt;/p&gt;
&lt;p&gt;删除stu表中gender属性为m的文档,只删除1行.&lt;/p&gt;
&lt;h3&gt;4.4 修改操作&lt;/h3&gt;
&lt;p&gt;语法: db.collection.update(&lt;span&gt;查询表达式&lt;/span&gt;,&lt;span&gt;新值&lt;/span&gt;,&lt;span&gt;选项&lt;/span&gt;); &lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
*改哪几行? ---&lt;span&gt; 查询表达式
&lt;/span&gt;*改成什么样? --&lt;span&gt; 新值 或 赋值表达式
&lt;/span&gt;*操作选项 -----&lt;span&gt; 可选参数
 upsert:如果要更新的那条记录没有找到，是否插入一条新纪录，默认为false&lt;br/&gt;multi  :是否更新满足条件的多条的记录,默认为false&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;multi :是否更新满足条件的多条的记录，false：只更新第一条，true:更新多条，默认为false &lt;/p&gt;
&lt;p&gt;例：db.news.update({name:'QQ'},{name:'MSN'});&lt;/p&gt;
&lt;p&gt;是指选中news表中,name值为QQ的文档,并把其文档值改为{name:&quot;MSN&quot;},&lt;/p&gt;
&lt;p&gt;结果: 文档中的其他列也不见了,改后只有_id和name列了.即是新文档直接覆盖了旧文档,而不是修改.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4.4.1 修改操作中的关键字&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果是想修改文档的某列,可以用$set关键字 &lt;/p&gt;
&lt;p&gt;例：db.collectionName.update(query,{$set:{name:’QQ’}})&lt;/p&gt;
&lt;p&gt;修改时的赋值表达式&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;$set 修改某列的值&lt;/li&gt;
&lt;li&gt;$unset 删除某个列&lt;/li&gt;
&lt;li&gt;$inc 增长某个列&lt;/li&gt;
&lt;li&gt;$rename 重新命名某列&lt;/li&gt;
&lt;li&gt;$setOnInsert 当upsert为true时,并且发生了insert操作时,可以补充的字段.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;$inc&lt;/strong&gt;实例&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;按照指定的步长增长某个列;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;44&quot;&gt;
&lt;pre&gt;
&amp;gt;  db.students.insert({&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;uid&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;201203&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,size:&lt;span&gt;10&lt;/span&gt;&lt;span&gt;})
&lt;/span&gt;&amp;gt;&lt;span&gt;  db.students.find()
{  &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;_id&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;  :  ObjectId(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;5003b6135af21ff428dafbe6&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;),  &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;uid&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;  :  &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;201203&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,  &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;  :  &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;size&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;  :  &lt;span&gt;10&lt;/span&gt;&lt;span&gt;  }
&lt;/span&gt;&amp;gt;  db.students.update({&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;uid&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;  :  &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;201203&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;},{&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;$inc&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:{&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;size&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;  :  &lt;span&gt;2&lt;/span&gt;&lt;span&gt;}})
&lt;/span&gt;&amp;gt;&lt;span&gt;  db.stdentsu.find()
{  &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;_id&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;  :  ObjectId(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;5003b6135af21ff428dafbe6&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;),  &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;uid&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;  :  &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;201203&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,  &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;  :  &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;size&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;  :  &lt;span&gt;12&lt;/span&gt;  }
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;Section7&quot; readability=&quot;64.5&quot;&gt;
&lt;p&gt;&lt;strong&gt;$unset&lt;/strong&gt;实例 &lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
&amp;gt;db.students.find({_id:&lt;span&gt;3&lt;/span&gt;&lt;span&gt;})
{&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;_id&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;  :  &lt;span&gt;3&lt;/span&gt;  ,  &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;age&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;  :  &lt;span&gt;18&lt;/span&gt;&lt;span&gt;}
&lt;/span&gt;&amp;gt;  db.students.update({_id:&lt;span&gt;3&lt;/span&gt;},{$unset:{age:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;sss&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;}})
WriteResult({  &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;nMatched&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;  :  &lt;span&gt;0&lt;/span&gt;,  &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;nUpserted&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;  :  &lt;span&gt;0&lt;/span&gt;,  &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;nModified&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;  :  &lt;span&gt;0&lt;/span&gt;&lt;span&gt;  })
&lt;/span&gt;&amp;gt;  db.students.update({_id:&lt;span&gt;3&lt;/span&gt;},{$unset:{age:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;sss&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;}})
WriteResult({  &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;nMatched&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;  :  &lt;span&gt;1&lt;/span&gt;,  &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;nUpserted&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;  :  &lt;span&gt;0&lt;/span&gt;,  &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;nModified&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;  :  &lt;span&gt;1&lt;/span&gt;&lt;span&gt;  })
&lt;/span&gt;&amp;gt;  db.students.find({_id:&lt;span&gt;3&lt;/span&gt;&lt;span&gt;})
{  &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;_id&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;  :  &lt;span&gt;3&lt;/span&gt;  }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;$rename&lt;/strong&gt;实例&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
-&amp;gt;db.students.insert({name:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;lisi&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,age:&lt;span&gt;12&lt;/span&gt;,sex:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;male&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,height:&lt;span&gt;123&lt;/span&gt;,area:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;haidian&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;});
&lt;/span&gt;-&amp;gt;db.students.update({name:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;lisi&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;},{$&lt;span&gt;set&lt;/span&gt;:{area:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;chaoyang&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;},$unset:{height:&lt;span&gt;1&lt;/span&gt;},$inc:{age:&lt;span&gt;1&lt;/span&gt;},$rename:{sex:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;gender&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;}});
&lt;/pre&gt;&lt;/div&gt;
&lt;p class=&quot;15&quot;&gt;&lt;strong&gt;4.4.2 Option选项的作用&lt;br/&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;语法： {upsert:true/false,multi:true/false}&lt;/p&gt;
&lt;p&gt;upsert:是指没有匹配的行,则直接插入该行 &lt;/p&gt;
&lt;p&gt;例:db.stu.update({name:'wuyong'},{$set:{name:'junshiwuyong'}},{upsert:true});&lt;/p&gt;
&lt;p&gt;如果有name='wuyong'的文档,将被修改,如果没有,将添加此新文档&lt;/p&gt;
&lt;p&gt;例:db.news.update({_id:99},{x:123,y:234},{upsert:true});&lt;/p&gt;
&lt;p&gt;没有_id=99的文档被修改,因此直接插入该文档&lt;/p&gt;
&lt;p&gt;multi: 是指修改多行(即使查询表达式命中多行,默认也只改1行,如果想改多行,可以用此选项) &lt;/p&gt;
&lt;p&gt;例:db.news.update({age:21},{$set:{age:22}},{multi:true});&lt;/p&gt;
&lt;p&gt;则把news中所有age=21的文档,都修改&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;4.5 &lt;/strong&gt;查询表达式&lt;/h3&gt;
&lt;p&gt;我们无论在修改删除还是查询的过程中,都需要传入查询表达式对目标数据进行查询,表达式有很多种&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt;&lt;span&gt;:  最简单的查询表达式
{filed:value}  ,是指查询field列的值为value的文档

&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;:  $ne：!=&lt;span&gt;
{field:{$ne:value}} db.stu.find({age:{$ne:&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;}}) 作用--&lt;span&gt;查age列的值 不等于16的文档

&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt;:$gt:大于
$lt:小于
$gte:大于或等于
$lte:小于或等于

&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;:  $&lt;span&gt;in&lt;/span&gt;&lt;span&gt;：[]
查询某列的值在范围内的文档
db.goods.find({cat_id:{$&lt;/span&gt;&lt;span&gt;in&lt;/span&gt;:[&lt;span&gt;2&lt;/span&gt;,&lt;span&gt;8&lt;/span&gt;&lt;span&gt;]}}

&lt;/span&gt;&lt;span&gt;5&lt;/span&gt;:  $nin：not  &lt;span&gt;in&lt;/span&gt;&lt;span&gt;
查询某列不在范围内的文档
$nin:[&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;,&lt;span&gt;3&lt;/span&gt;,&lt;span&gt;5&lt;/span&gt;&lt;span&gt;]

&lt;/span&gt;&lt;span&gt;6&lt;/span&gt;&lt;span&gt;:  $exists
语法:  {field:{$exists:&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;}}
作用:  查询出含有field字段的文档

&lt;/span&gt;&lt;span&gt;7&lt;/span&gt;&lt;span&gt;:用正则表达式查询  以”诺基亚”开头的商品
例:db.goods.find({goods_name:&lt;/span&gt;/诺基亚.*/},{goods_name:&lt;span&gt;1&lt;/span&gt;});
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;Section8&quot; readability=&quot;58.5&quot;&gt;
&lt;h2&gt;&lt;span&gt;五&lt;/span&gt; &lt;span&gt;游标操作&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;通俗的说,游标不是查询结果,而是查询的返回资源,或者接口，通过这个接口,&lt;span&gt;你可以逐条对数据进行读取；&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;声明游标&lt;/span&gt;:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt;  cursor  =  db.collectioName.find(query,projection); &lt;br/&gt;cursor.hasNext()  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;判断游标是否已经取到尽头  &lt;br/&gt;cursor.next()  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;取出游标的下1个单元&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;用while来循环游标 &lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&amp;gt;  &lt;span&gt;var&lt;/span&gt;  mycursor  =  db.bar.find({_id:{$lte:&lt;span&gt;5&lt;/span&gt;&lt;span&gt;}})
&lt;/span&gt;&amp;gt;  &lt;span&gt;while&lt;/span&gt;&lt;span&gt;(mycursor.hasNext())  { printjson(mycursor.next());}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;游标还有一个迭代函数,允许我们自定义回调函数来逐个处理每个单元. &lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;cursor.forEach(回调函数);
&lt;/span&gt;&amp;gt;  &lt;span&gt;var&lt;/span&gt;  gettitle  =&lt;span&gt;  function(obj)  {print(obj.goods_name)}
&lt;/span&gt;&amp;gt;  &lt;span&gt;var&lt;/span&gt;  cursor  =&lt;span&gt;  db.goods.find();
&lt;/span&gt;&amp;gt;  cursor.forEach(gettitle);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;游标在分页中的应用&lt;/p&gt;
&lt;p&gt;比如查到10000行,跳过100页,取10行,一般地,我们假设每页N行, 当前是page页,&lt;span&gt;就需要跳过前&lt;/span&gt; (page-1)*N 行, 再取N行.&lt;/p&gt;
&lt;p&gt;在mongo中,分页是用skip(), limit()函数来实现的&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;查询结果中,跳过前9995行&lt;/span&gt;
&lt;span&gt;var&lt;/span&gt;  mycursor  =  db.bar.find().skip(&lt;span&gt;9995&lt;/span&gt;&lt;span&gt;);

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;查询第901页,每页10条&lt;/span&gt;
则是  &lt;span&gt;var&lt;/span&gt;  mytcursor  =  db.bar.find().skip(&lt;span&gt;9000&lt;/span&gt;).limit(&lt;span&gt;10&lt;/span&gt;);
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;span&gt;六&lt;/span&gt; &lt;strong&gt;group&lt;/strong&gt;分组&lt;/h2&gt;
&lt;p&gt;mongodb支持聚合运算;&lt;/p&gt;
&lt;p&gt;在goods表中插入数据 &lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;48&quot;&gt;
&lt;pre&gt;
&lt;span&gt;db.goods.insert([
{&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;_id&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;3&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;cat_id&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;6&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;price&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;29&lt;/span&gt;&lt;span&gt;},
{&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;_id&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;4&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;cat_id&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;7&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;price&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;30&lt;/span&gt;&lt;span&gt;},
{&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;_id&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;5&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;cat_id&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;6&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;price&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;31&lt;/span&gt;&lt;span&gt;},
{&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;_id&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;6&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;cat_id&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;7&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;price&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;32&lt;/span&gt;&lt;span&gt;},
{&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;_id&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;7&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;cat_id&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;7&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;price&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;28&lt;/span&gt;&lt;span&gt;},
])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果我们所处的是mysql数据库,我们可以这样查询每个类下面的商品平均价格 &lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;select&lt;/span&gt;  avg(price)  &lt;span&gt;from&lt;/span&gt;  goods  group  by  cat_id;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;Section9&quot; readability=&quot;54.025362318841&quot;&gt;
&lt;p&gt;但如果在mongodb下,我们如何查询分组内的平均值呢? 我们需要使用mongodb的聚合运算   &lt;a href=&quot;https://docs.mongodb.com/manual/aggregation/%20&quot; target=&quot;_blank&quot;&gt;https://docs.mongodb.com/manual/aggregation/&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;db.goods.aggregate([
{$match:{}},
{$group:{_id:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;$cat_id&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,avg:{$avg:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;$price&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;}}}
]);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;其中,$match表示匹配的条件,$group表示分组的条件,$avg表示求平均值. 当然,指令还有很多,我们还可以使用limit,sort等操作 &lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;db.goods.aggregate([
{$match:{}},
{$group:{_id:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;$cat_id&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,avg:{$avg:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;$price&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;}}},
{$limit:&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;}
]);

db.goods.aggregate([
{$match:{}},
{$sort:{price:&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;&lt;span&gt;}}
]);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;span&gt;七&lt;/span&gt; &lt;strong&gt;MapReduce&lt;/strong&gt;&lt;/h2&gt;
&lt;h3 class=&quot;15&quot;&gt;7.1 &lt;strong&gt;MapReduce&lt;/strong&gt;原理&lt;/h3&gt;
&lt;p&gt;随着大数据兴起,MapReduce的概念也越来越火,通常的概念是用于大规模数据集(1TB)的并行运算,实际上就是传统关系型数据库的group概念的延伸.&lt;/p&gt;
&lt;p&gt;MapReduce之所以能够流行,是因为数据的大,当数据过大的时候,单个服务器无法承载,facebook,微软等等的数据中心都是分布在世界各地的,&lt;span&gt;我们所需&lt;/span&gt;        要的数据很可能分布在不同的服务器甚至世界各地.在这时候,我们就无法使用group操作了.&lt;/p&gt;
&lt;p&gt;MapReduce通俗的讲,最大的优点就是可以支持分布式的group &lt;/p&gt;
&lt;p&gt;而MapReduce的操作即分为map和reduce两步;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
map ---&amp;gt;&lt;span&gt; 映 射
reduce &lt;/span&gt;---&amp;gt; 减少,规约,回归
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 class=&quot;15&quot;&gt;7.2 &lt;strong&gt;MapReduce&lt;/strong&gt;统计价格&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;按照cat_id  分配  price,把price数据映射到一个数组上 var  map  =  function(){&lt;/span&gt;
emit(&lt;span&gt;this&lt;/span&gt;.cat_id  ,  &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.price)
}

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;将映射好的数组进行操作&lt;/span&gt;
&lt;span&gt;var&lt;/span&gt;  reduce  =  function(cat_id,number){ &lt;span&gt;return&lt;/span&gt;&lt;span&gt;  Array.avg(number)
}

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;将统计的数据映射到res表当中db.goods.mapReduce(map,reduce,{out:'res'})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;接下来我们使用mapReduce功能实现地震数据的统计&lt;/p&gt;
&lt;/div&gt;
&lt;h3&gt;7.3 下载并导入地震信息&lt;/h3&gt;
&lt;p&gt;在国家地震科学数据共享中心下载过去一年的地震数据  &lt;a href=&quot;http://data.earthquake.cn/sjfw/index.html?PAGEID=datasourcelist&amp;amp;dt=40280d0453e414e40153e44861dd0003&quot; target=&quot;_blank&quot;&gt;http://data.earthquake.cn/sjfw/index.html?PAGEID=datasourcelist&amp;amp;dt=40280d0453e414e40153e44861dd0003&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;将数据保存为csv格式,导入到mongodb数据库中，使用mongoimport&lt;/p&gt;
&lt;p&gt;-d : 指明导入文件存放在哪个数据库&lt;/p&gt;
&lt;p&gt;-c : 指明导入文件存放在哪个集合&lt;/p&gt;
&lt;p&gt;--type：指明要导入的文件格式。&lt;/p&gt;
&lt;p&gt;--headerline：指明不导入第一行，csv格式的文件第一行为列名。&lt;/p&gt;
&lt;p&gt;--file：指明要导入的文件路径。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
./bin/mongoimport  -d  test  -c  dz  --type  csv  --file  /usr/local/src/dz.csv  --headerline
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;7.4 按照经纬度统计数据&lt;/h3&gt;
&lt;p&gt;我们规约的时候按照经纬度的5*5方格进行分组,如果在此方格内存在地震,则地震+1 &lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt;  map  =&lt;span&gt;  function(){
&lt;/span&gt;&lt;span&gt;var&lt;/span&gt;  jd  =  parseInt(&lt;span&gt;this&lt;/span&gt;.jd/&lt;span&gt;5&lt;/span&gt;)*&lt;span&gt;5&lt;/span&gt;; &lt;span&gt;var&lt;/span&gt;  wd  =  parseInt(&lt;span&gt;this&lt;/span&gt;.wd/&lt;span&gt;5&lt;/span&gt;)*&lt;span&gt;5&lt;/span&gt;; &lt;span&gt;var&lt;/span&gt;  area  =  jd  +  &lt;span&gt;'&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;  +&lt;span&gt;  wd;
emit(area,&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果该区域有地震,则统计为1&lt;/span&gt;
&lt;span&gt;}

&lt;/span&gt;&lt;span&gt;var&lt;/span&gt;  reduce  =  function(area,nums){ &lt;span&gt;return&lt;/span&gt;&lt;span&gt;  Array.sum(nums);
}
db.dz.mapReduce(map,reduce,{&lt;/span&gt;&lt;span&gt;out&lt;/span&gt;:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;dzrs&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;});
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;成功获取区间范围内的地震次数,此时我们要将数据导出为json,做成热力图;&lt;/p&gt;
&lt;h3&gt;7.5 热力图&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;使&lt;/span&gt;&lt;span&gt;用&lt;/span&gt;&lt;span&gt;百&lt;/span&gt;&lt;span&gt;度&lt;/span&gt;&lt;span&gt;地&lt;/span&gt;&lt;span&gt;图&lt;/span&gt;&lt;span&gt;开&lt;/span&gt;&lt;span&gt;放&lt;/span&gt;&lt;span&gt;平&lt;/span&gt;&lt;span&gt;台&lt;/span&gt;&lt;span&gt;的&lt;/span&gt;&lt;span&gt;热&lt;/span&gt;&lt;span&gt;力&lt;/span&gt;&lt;span&gt;图&lt;/span&gt;api   &lt;a href=&quot;http://lbsyun.baidu.com/index.php?title=jspopular&quot; target=&quot;_blank&quot;&gt;http://lbsyun.baidu.com/index.php?title=jspopular&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;填入密钥,生成热力图&lt;/p&gt;
&lt;h3&gt;7.6 展示地震数据&lt;/h3&gt;
&lt;p&gt;转化地震数据为规定的json格式 &lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt;  course  =  db.dzrs.find(); &lt;br/&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt;  row; &lt;br/&gt;course.forEach(function(obj){
     row  &lt;/span&gt;=  obj._id.split(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;);&lt;br/&gt;db.reli.insert({lng:parseInt(row[&lt;span&gt;1&lt;/span&gt;])+&lt;span&gt;2.5&lt;/span&gt;,lat:parseInt(row[&lt;span&gt;0&lt;/span&gt;])+&lt;span&gt;2.5&lt;/span&gt;&lt;span&gt;,count:obj.value})
})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;导出json &lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
./bin/mongoexport  -d  test  -c  reli  -o  /usr/local/src/reli.json
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;将json数据放入热力图当中并配置热力图相关选项.&lt;/p&gt;
</description>
<pubDate>Thu, 05 Jul 2018 14:37:00 +0000</pubDate>
<dc:creator>FrankDeng</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/frankdeng/p/9158075.html</dc:identifier>
</item>
<item>
<title>.Net Core开发日志——Peachpie - Ken.W</title>
<link>http://www.cnblogs.com/kenwoo/p/9270680.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/kenwoo/p/9270680.html</guid>
<description>&lt;p&gt;.Net Core的生态圈随着开源社区的力量不断注入至其中，正在变得越来越强盛，并且不时得就出现些有意思的项目，比如Peachpie，它使得PHP的代码迁移到.Net Core项目变得可能。&lt;/p&gt;
&lt;p&gt;从创建简单的入门程序开始可以更容易地体会其特性。&lt;/p&gt;
&lt;p&gt;首先安装Peachpie的模板：&lt;/p&gt;
&lt;pre class=&quot;ps&quot;&gt;
&lt;code&gt;dotnet new -i Peachpie.Templates::*&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;接着创建项目：&lt;/p&gt;
&lt;pre class=&quot;ps&quot;&gt;
&lt;code&gt;dotnet new web -lang PHP -o helloPHP&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;然后切换目录至Server文件夹运行程序：&lt;/p&gt;
&lt;pre class=&quot;ps&quot;&gt;
&lt;code&gt;cd Server
dotnet run&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;最后通过浏览器访问http://localhost:5004/：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/991496/201807/991496-20180705214519038-296612311.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Peachpie的运行机制很简单，将PHP文件编译成.Net平台的dll文件，这样就可以如同普通的.Net代码库一般被其它程序调用。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/991496/201807/991496-20180705215119925-53573476.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;它包含三个部分：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;编译器(peach.exe或者Peachpie.NET.Sdk)，将PHP文件编译成.Net程序集&lt;/li&gt;
&lt;li&gt;运行时(Peachpie.Runtime.dll)，提供程序运行时所需的功能&lt;/li&gt;
&lt;li&gt;代码库(Peachpie.Library.dll)，包含PHP的函数，类及其它的实现&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;再回到开始的入门程序代码探究一番，可以发现关键点在于Website目录下的Website.msbuildproj文件中：&lt;/p&gt;
&lt;pre class=&quot;msbuild&quot;&gt;
&lt;code&gt;&amp;lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&amp;gt;

  &amp;lt;PropertyGroup&amp;gt;
    &amp;lt;OutputType&amp;gt;Library&amp;lt;/OutputType&amp;gt;
    &amp;lt;TargetFramework&amp;gt;netstandard2.0&amp;lt;/TargetFramework&amp;gt;
    &amp;lt;AssemblyName&amp;gt;helloPHP&amp;lt;/AssemblyName&amp;gt;
  &amp;lt;/PropertyGroup&amp;gt;

  &amp;lt;ItemGroup&amp;gt;
    &amp;lt;Compile Include=&quot;**/*.php&quot; /&amp;gt;
  &amp;lt;/ItemGroup&amp;gt;

  &amp;lt;ItemGroup&amp;gt;
    &amp;lt;DotNetCliToolReference Include=&quot;Peachpie.Compiler.Tools&quot; Version=&quot;0.9.0-*&quot; /&amp;gt;
    &amp;lt;PackageReference Include=&quot;Peachpie.NET.Sdk&quot; Version=&quot;0.9.0-*&quot; PrivateAssets=&quot;Build&quot; /&amp;gt;
  &amp;lt;/ItemGroup&amp;gt;
&amp;lt;/Project&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;在Peachpie.Compiler.Tools与Peachpie.NET.Sdk两者的作用下，包含index.php文件在内的所有PHP文件都最终会被编译成一个dll文件。&lt;/p&gt;
&lt;p&gt;用使用这个dll文件也很简单，在Startup类的Configure方法里这样调用一下：&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;app.UsePhp(new PhpRequestOptions(scriptAssemblyName: &quot;helloPHP&quot;));&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;运行在ASP.Net中的PHP站点便诞生了。&lt;/p&gt;
&lt;p&gt;Peachpie项目整体还在开发阶段，但不影响其已经能完成些惊人的工作，例如，其&lt;a href=&quot;https://www.peachpie.io/&quot;&gt;官方网站&lt;/a&gt;虽是构建在WordPress上，但已经被Peachpie编译成可以在ASP.NET中运行。仅凭以下的图你一定不会想到这个网站是PHP写成的：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/991496/201807/991496-20180705221720714-198852985.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;在它的&lt;a href=&quot;https://www.peachpie.io/2018/03/peachpie-on-peachpie.html&quot;&gt;博客&lt;/a&gt;中可以看到关于此事的更详细信息。&lt;/p&gt;
&lt;p&gt;如果你对PHP代码迁移到.Net平台这件事感兴趣的话，可以访问其在Github上的&lt;a href=&quot;https://github.com/peachpiecompiler/peachpie&quot;&gt;仓库&lt;/a&gt;，若是能为它添砖加瓦的话，那是再好不过了。&lt;/p&gt;
</description>
<pubDate>Thu, 05 Jul 2018 14:27:00 +0000</pubDate>
<dc:creator>Ken.W</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/kenwoo/p/9270680.html</dc:identifier>
</item>
<item>
<title>常见的web攻击手段 - 智享</title>
<link>http://www.cnblogs.com/zhixiang-org-cn/p/9270831.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/zhixiang-org-cn/p/9270831.html</guid>
<description>

&lt;h2&gt;-典型实例为：&lt;/h2&gt;
&lt;p&gt;当用户在表达输入一段数据后，提交给服务端进行持久化。如果此用户输入的是一段脚本语言，而服务端&lt;/p&gt;
&lt;p&gt;用户输入的数据没有经过转码、校验等就存入了数据库，在其他页面需要展示此数据时，就会执行此用户输入的语言。简单来说，JS的强大不用我来解释吧&lt;/p&gt;
&lt;h2&gt;-推荐防御措施：&lt;/h2&gt;
&lt;p&gt;对用户输入的信息进行转义，例如&amp;lt;&amp;gt;'等等特殊字符。当然，其实很多前端框架也支持这么做，快查一查你使用的框架支持么。&lt;/p&gt;



&lt;h2&gt;-典型实例为：&lt;/h2&gt;
&lt;p&gt;如果A银行存在CRSF漏洞，有用户在登陆完A银行后没有退出，A银行的cookie信息保存在浏览器。然后呢，用户不小心进入了恶意网站，&lt;/p&gt;
&lt;p&gt;此网站识别出了用户客户端存在A银行的信息，那么恶意网站就可以根据此cookie去请求A银行的转账接口，那么A银行会误认为是用户进行操作从而使恶意网站得逞。&lt;/p&gt;

&lt;h2&gt;-推荐防御措施：&lt;/h2&gt;
&lt;p&gt;假如我们的网站是A银行，为了防止用户信息泄露，我们应该做这三件事：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;将cookie设置为HttpOnly，让恶意网站无法通过脚本获取到cookie&lt;/li&gt;
&lt;li&gt;所有增删改以及需要验证权限的请求都应该携带token&lt;/li&gt;
&lt;li&gt;Http头中有一个Referer属性，此属性表示请求Url地址，验证每一个请求的Referer是不是由自己系统发起的&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;-典型实例为：&lt;/h2&gt;
&lt;p&gt;用户输入的信息带有 delete 、drop等危害性十足的sql，就像用户登录时输入了用户名 “aaa;drop table user”,那么在我们没有任何防御措施的情况下就会变为“select * from user where username='aaa';drop table user”。然后呢，表就没了，你说尴不尴尬？&lt;/p&gt;
&lt;h2&gt;-推荐防御措施：&lt;/h2&gt;

&lt;ol&gt;&lt;li&gt;使用原生jdbc时要使用PreparedStatement 而不要使用Statement，&lt;/li&gt;
&lt;li&gt;使用orm框架，像MyBatis、Hibernate等框架都对sql注入进行了很好的预防&lt;/li&gt;
&lt;li&gt;密码任何时候都不要使用明文存放，避免攻击者直接获取用户信息&lt;/li&gt;
&lt;li&gt;后台发生错误时不要直接返回异常信息，避免对服务器信息的泄露。建议对异常进行封装，返回可控的异常信息。&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;-典型实例为：&lt;/h2&gt;
&lt;p&gt;没有对用户上传的文件做校验，恶意用户长时间上传超大文件占用系统资源，上传可执行脚本获取获取服务器信息&lt;/p&gt;
&lt;h2&gt;-推荐防御措施：&lt;/h2&gt;

&lt;ol&gt;&lt;li&gt;对用户上传做限流，每个用户每天最多上传多少内容。&lt;/li&gt;
&lt;li&gt;对文件类型进行判断，不能通过后缀名判断，而要通过判断魔数（文件起始的几个字节）来判断，很多文件类型的魔数是不变的。&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;-典型实例为：&lt;/h2&gt;
&lt;p&gt;1.攻击者提前控制大量计算机，并在某一时刻指挥大量计算机同时对某一服务器进行访问来达到瘫痪主机的目的。&lt;/p&gt;
&lt;p&gt;2.相信大家都知道TCP三次握手的机制，（如不了解请参考文章底部补充）攻击者利用此机制对服务器返回的ACK确认包不回应，这样服务器就会存在大量的等待列表，不断重试，等待队列满了以后不再接受TCP连接，从而阻挡了正常用户的使用&lt;/p&gt;
&lt;p&gt;3.攻击者向DNS服务器发送海量的域名解析请求，DNS首先查缓存，如果缓存不存在的话会去递归调用上级服务器查询，直到查询到全球13台根服务器为止，当解析请求过多时正常用户访问就会出现DNS解析超时问题&lt;/p&gt;
&lt;h2&gt;-推荐防御措施：&lt;/h2&gt;
&lt;p&gt;使用缓存，当缓存中存在时就直接取出，不要频繁的连接数据库。&lt;/p&gt;
&lt;p&gt;缩短 SYN Timeout时间，即缩短从接受到SYN报文到确定这个报文无效并丢弃该连接的时间。&lt;/p&gt;
&lt;p&gt;限制源ip每秒发起的DNS请求等&lt;/p&gt;



&lt;p&gt;首先，请求端（客户端）发送一个包含SYN标志的TCP报文，SYN即同步（Synchronize），同步报文会指明客户端使用的端口以及TCP连接的初始序号；&lt;/p&gt;
&lt;p&gt;第二步，服务器在收到客户端的SYN报文，将返回一个SYN+ACK的报文，表示客户端的请求被接受，同时TCP序号被加一，ACK即确认（Acknowledgment）。&lt;/p&gt;
&lt;p&gt;第三步，客户端也返回一个确认报文ACK给服务器端，同样TCP序列号被加一，到此一个TCP连接完成。&lt;/p&gt;



&lt;p&gt;写这篇文章的目的呢，其实不是说让大家通过这篇文章成为一个安全高手或者怎么的，只是想让大家了解一下这些常见的攻击手段。当你知道了这些攻击手段后看一下你手中的项目是否需要预防一下，毕竟未雨绸缪总是比临阵磨枪好的多，不是吗？&lt;/p&gt;


&lt;p&gt;本文出自&lt;a href=&quot;https://zhixiang.org.cn/#/blog/read/132e85fd-c3bf-4e78-acfd-0c73523f95a3&quot; target=&quot;_blank&quot;&gt;https://zhixiang.org.cn/#/blog/read/132e85fd-c3bf-4e78-acfd-0c73523f95a3&lt;/a&gt;,转载请保留。&lt;/p&gt;
</description>
<pubDate>Thu, 05 Jul 2018 14:21:00 +0000</pubDate>
<dc:creator>智享</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/zhixiang-org-cn/p/9270831.html</dc:identifier>
</item>
</channel>
</rss>