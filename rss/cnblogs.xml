<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>Redis进阶实践之九 独立封装的RedisClient客户端工具类 - PatrickLiu</title>
<link>http://www.cnblogs.com/PatrickLiu/p/8417734.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/PatrickLiu/p/8417734.html</guid>
<description>&lt;p&gt;&lt;span&gt;&lt;strong&gt;一、引言&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;        今天开始有关Redis学习的第九篇文章了，以后肯定会大量系统使用Redis作为缓存介质，为了更好的更好的Redis，自己写了两个工具类，但是这两个工具类，没有提供一致的接口，是为了使用的独立性。测试已经完毕，可以正常访问Windows和Linux版本上的Redis服务，各种操作也没问题。今天就把主要代码贴出来，因为有一部分是需要配置文件的，我自己独立写了一套配置系统，这套配置系统就不贴出来，大家可以根据自己的理解来写这个部分的内容，好了，开始我们今天的写作吧。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;二、简介&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;        我写了两个工具类，第一个是以【StackExchange.Redis】为实现技术的Redis的客户端工具类，另一个是以【ServiceStack.Redis】为实现技术的Redis客户端工具类。【ServiceStack.Redis】的官网主页：&lt;a href=&quot;https://servicestack.net/redis&quot; target=&quot;_blank&quot;&gt;https://servicestack.net/redis&lt;/a&gt;，【ServiceStack.Redis】在github上的主页：&lt;a href=&quot;https://github.com/ServiceStack/ServiceStack.Redis&quot; target=&quot;_blank&quot;&gt;https://github.com/ServiceStack/ServiceStack.Redis&lt;/a&gt;，【ServiceStack.Redis】和Visual Studio 2015整个也很方便，微软在这块做的的很不过，我们可以通过命令直接安装：&lt;code class=&quot;hljs mathematica has-numbering&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;Install-Package ServiceStack.Redis&lt;/span&gt;&lt;/code&gt;，当然我们也可以通过NuGet来安装，安装完成，在您项目的【引用】里面会生成四个dll，分别是：ServiceStack.Common，ServiceStack.Interfaces，ServiceStack.Redis，ServiceStack.Client 四个程序集，然后在项目中使用Using引入就可以正常使用了。【ServiceStack.Redis】是Redis官方推荐的C#客户端，性能非常优越，使用也很方便，但是从v4版本已经逐渐商业化了，目的可以想而知，嗨，都是钱惹的祸。&lt;/p&gt;
&lt;p&gt;       上面我说道了，【ServiceStack.Redis】后来就商业化了，我想了想光靠他也是不行了，还要在写一个版本的工具类，所以就选择了【StackExchange.Redis】，【StackExchange.Redis】也是开源的，到目前，一直都是开源的，它的地址是：&lt;a href=&quot;https://github.com/StackExchange/StackExchange.Redis&quot; target=&quot;_blank&quot;&gt;https://github.com/StackExchange/StackExchange.Redis&lt;/a&gt;，我使用的是.net 4.5，工具采用 vs2015， StackExchange.Redis版本是1.0.488。工具类还会在持续的使用过程中，我还会更新和修改的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;三、实例代码&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt; &lt;br/&gt;         这是Redis客户端的配置文件的格式，格式很简单，可以分开配置，也可以合在一起配置。&lt;strong&gt;&lt;span&gt;代码中标红的是和我的配置系统有关的代码，大家请注意。&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&amp;lt;configuration&amp;gt;
  &amp;lt;configSections&amp;gt;
    &amp;lt;section name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Framework&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Enterprise.Framework.Configuration.ConfigurationFrameworkSectionHandler,Enterprise.Framework.Configuration&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; /&amp;gt;
  &amp;lt;/configSections&amp;gt;

  &amp;lt;Framework type=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Enterprise.Framework.Configuration.ConfigurationFrameworkManager,Enterprise.Framework.Configuration&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
    &amp;lt;Enterprise.Framework.NoSQL&amp;gt;
      &amp;lt;RedisClients&amp;gt;
          &amp;lt;RedisClient name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ServiceStack&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; technology=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ServiceStack.Redis&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
            &amp;lt;readWriteHosts&amp;gt;&lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;3.11&lt;/span&gt;:&lt;span&gt;6379&lt;/span&gt;,&lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;3.11&lt;/span&gt;:&lt;span&gt;6380&lt;/span&gt;&amp;lt;/readWriteHosts&amp;gt;
            &amp;lt;!--&amp;lt;readOnlyHosts&amp;gt;可以省略该项&amp;lt;/readOnlyHosts&amp;gt;--&amp;gt;
            &amp;lt;!--&amp;lt;maxWritePoolSize&amp;gt;可以省略该项&amp;lt;/maxWritePoolSize&amp;gt;--&amp;gt;
            &amp;lt;!--&amp;lt;maxReadPoolSize&amp;gt;可以省略该项&amp;lt;/maxReadPoolSize&amp;gt;--&amp;gt;
            &amp;lt;!--&amp;lt;password&amp;gt;可以省略该项&amp;lt;/password&amp;gt;--&amp;gt;
            &amp;lt;!--&amp;lt;autoStart&amp;gt;可以省略该项&amp;lt;/autoStart&amp;gt;--&amp;gt;
          &amp;lt;/RedisClient&amp;gt;
          &amp;lt;RedisClient name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;StackExchange&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; technology=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;StackExchange.Redis&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
            &amp;lt;host&amp;gt;&lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;131.1&lt;/span&gt;:&lt;span&gt;6379&lt;/span&gt;&amp;lt;/host&amp;gt;
            &amp;lt;!--&amp;lt;password&amp;gt;可以省略该项&amp;lt;/password&amp;gt;--&amp;gt;
          &amp;lt;/RedisClient&amp;gt;
      &amp;lt;/RedisClients&amp;gt;
    &amp;lt;/Enterprise.Framework.NoSQL&amp;gt;
  &amp;lt;/Framework&amp;gt;
&amp;lt;/configuration&amp;gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;        1、这是以【ServiceStack.Redis】为实现技术的工具类，对外界的访问接口提供了2个，第一个是以配置文件中自定义的名称参数的，红色代码是和我独立的配置系统相关联的，另一个访问接口是以配置实体类参数的，代码很简单，不多说了。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;      工具类：ServiceStackRedisClientProvider.cs&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;49&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt; &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span&gt;  2&lt;/span&gt;     &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 通过ServiceStack.Redis实现的Redis的客户端操作类型
&lt;/span&gt;&lt;span&gt;  3&lt;/span&gt;     &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span&gt;  4&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;sealed&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; ServiceStackRedisClientProvider
&lt;/span&gt;&lt;span&gt;  5&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;  6&lt;/span&gt;         &lt;span&gt;#region&lt;/span&gt; 私有变量
&lt;span&gt;  7&lt;/span&gt; 
&lt;span&gt;  8&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;线程同步变量&lt;/span&gt;
&lt;span&gt;  9&lt;/span&gt;         &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;readonly&lt;/span&gt; &lt;span&gt;object&lt;/span&gt; lockObject = &lt;span&gt;new&lt;/span&gt; &lt;span&gt;object&lt;/span&gt;&lt;span&gt;();
&lt;/span&gt;&lt;span&gt; 10&lt;/span&gt; 
&lt;span&gt; 11&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;redis链接池管理对象&lt;/span&gt;
&lt;span&gt; 12&lt;/span&gt;         &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;volatile&lt;/span&gt; PooledRedisClientManager _instance = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 13&lt;/span&gt; 
&lt;span&gt; 14&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;配置文件里面的ServiceStack详细配置设置&lt;/span&gt;
&lt;span&gt; 15&lt;/span&gt;         &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt;&lt;span&gt; ServiceStackDetails _serviceStackDetails;
&lt;/span&gt;&lt;span&gt; 16&lt;/span&gt; 
&lt;span&gt; 17&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;可以自行配置ServiceStack的配置对象&lt;/span&gt;
&lt;span&gt; 18&lt;/span&gt;         &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt;&lt;span&gt; ServiceStackConfigEntry _serviceStackConfigEntry;
&lt;/span&gt;&lt;span&gt; 19&lt;/span&gt; 
&lt;span&gt; 20&lt;/span&gt;         &lt;span&gt;#endregion&lt;/span&gt;
&lt;span&gt; 21&lt;/span&gt; 
&lt;span&gt; 22&lt;/span&gt;         &lt;span&gt;#region&lt;/span&gt; 私有构造函数
&lt;span&gt; 23&lt;/span&gt; 
&lt;span&gt; 24&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span&gt; 25&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 私有构造函数，禁止外部通过new关键字来创建该对象实例
&lt;/span&gt;&lt;span&gt; 26&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span&gt; 27&lt;/span&gt;         &lt;span&gt;private&lt;/span&gt;&lt;span&gt; ServiceStackRedisClientProvider() { }
&lt;/span&gt;&lt;span&gt; 28&lt;/span&gt; 
&lt;span&gt; 29&lt;/span&gt;         &lt;span&gt;#endregion&lt;/span&gt;
&lt;span&gt; 30&lt;/span&gt; 
&lt;span&gt; 31&lt;/span&gt;         &lt;span&gt;#region&lt;/span&gt; 获取PooledRedisClientManager实例的方法
&lt;span&gt; 32&lt;/span&gt; 
&lt;span&gt; 33&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span&gt; 34&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 获取redis链接池管理对象实例
&lt;/span&gt;&lt;span&gt; 35&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 实例发生变化的集中情况：
&lt;/span&gt;&lt;span&gt; 36&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 1.实例为空
&lt;/span&gt;&lt;span&gt; 37&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 2.配置文件发生变化
&lt;/span&gt;&lt;span&gt; 38&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span&gt; 39&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;startByConfigFile&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;这是一个布尔值，true表示根据配置文件的配置启动，false表示是根据配置对象启动&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;span&gt; 40&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&lt;/span&gt;&lt;span&gt;返回PooledRedisClientManager类型的对象实例&lt;/span&gt;&lt;span&gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
&lt;span&gt; 41&lt;/span&gt;         &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; PooledRedisClientManager GetInstance(&lt;span&gt;bool&lt;/span&gt;&lt;span&gt; startByConfigFile)
&lt;/span&gt;&lt;span&gt; 42&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 43&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (_instance == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 44&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt; 45&lt;/span&gt;                 &lt;span&gt;lock&lt;/span&gt;&lt;span&gt; (lockObject)
&lt;/span&gt;&lt;span&gt; 46&lt;/span&gt; &lt;span&gt;                {
&lt;/span&gt;&lt;span&gt; 47&lt;/span&gt;                     &lt;span&gt;if&lt;/span&gt; (_instance == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 48&lt;/span&gt; &lt;span&gt;                    {
&lt;/span&gt;&lt;span&gt; 49&lt;/span&gt;                         &lt;span&gt;string&lt;/span&gt;[] readWriteServerList=&lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 50&lt;/span&gt;                         &lt;span&gt;string&lt;/span&gt;[] readOnlyServerList=&lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 51&lt;/span&gt;                         RedisClientManagerConfig managerConfig=&lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 52&lt;/span&gt; 
&lt;span&gt; 53&lt;/span&gt;                         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;根据我们配置文件中数据来设置启动信息（app.config或者web.config）&lt;/span&gt;
&lt;span&gt; 54&lt;/span&gt;                         &lt;span&gt;if&lt;/span&gt; (startByConfigFile &amp;amp;&amp;amp; (_serviceStackDetails != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;))
&lt;/span&gt;&lt;span&gt; 55&lt;/span&gt; &lt;span&gt;                        {
&lt;/span&gt;&lt;span&gt; 56&lt;/span&gt;                             managerConfig = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; RedisClientManagerConfig()
&lt;/span&gt;&lt;span&gt; 57&lt;/span&gt; &lt;span&gt;                            {
&lt;/span&gt;&lt;span&gt; 58&lt;/span&gt;                                 AutoStart =&lt;span&gt; _serviceStackDetails.AutoStart,
&lt;/span&gt;&lt;span&gt; 59&lt;/span&gt;                                 MaxReadPoolSize =&lt;span&gt; _serviceStackDetails.MaxReadPoolSize,
&lt;/span&gt;&lt;span&gt; 60&lt;/span&gt;                                 MaxWritePoolSize =&lt;span&gt; _serviceStackDetails.MaxWritePoolSize,
&lt;/span&gt;&lt;span&gt; 61&lt;/span&gt; &lt;span&gt;                            };
&lt;/span&gt;&lt;span&gt; 62&lt;/span&gt; 
&lt;span&gt; 63&lt;/span&gt;                             readWriteServerList =&lt;span&gt; GetRedisHosts(_serviceStackDetails.ReadWriteHosts);
&lt;/span&gt;&lt;span&gt; 64&lt;/span&gt;                             readOnlyServerList =&lt;span&gt; GetRedisHosts(_serviceStackDetails.ReadOnlyHosts);
&lt;/span&gt;&lt;span&gt; 65&lt;/span&gt; &lt;span&gt;                        }
&lt;/span&gt;&lt;span&gt; 66&lt;/span&gt;                         &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (!startByConfigFile &amp;amp;&amp;amp; (_serviceStackConfigEntry != &lt;span&gt;null&lt;/span&gt;))&lt;span&gt;//&lt;/span&gt;&lt;span&gt;根据配置对象来设置启动信息(ServiceStackConfigEntry)&lt;/span&gt;
&lt;span&gt; 67&lt;/span&gt; &lt;span&gt;                        {
&lt;/span&gt;&lt;span&gt; 68&lt;/span&gt;                             managerConfig = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; RedisClientManagerConfig()
&lt;/span&gt;&lt;span&gt; 69&lt;/span&gt; &lt;span&gt;                            {
&lt;/span&gt;&lt;span&gt; 70&lt;/span&gt;                                 AutoStart =&lt;span&gt; _serviceStackConfigEntry.AutoStart,
&lt;/span&gt;&lt;span&gt; 71&lt;/span&gt;                                 MaxReadPoolSize =&lt;span&gt; _serviceStackConfigEntry.MaxReadPoolSize,
&lt;/span&gt;&lt;span&gt; 72&lt;/span&gt;                                 MaxWritePoolSize =&lt;span&gt; _serviceStackConfigEntry.MaxWritePoolSize,
&lt;/span&gt;&lt;span&gt; 73&lt;/span&gt; &lt;span&gt;                            };
&lt;/span&gt;&lt;span&gt; 74&lt;/span&gt; 
&lt;span&gt; 75&lt;/span&gt;                             readWriteServerList =&lt;span&gt; GetRedisHosts(_serviceStackConfigEntry.ReadWriteHosts);
&lt;/span&gt;&lt;span&gt; 76&lt;/span&gt;                             readOnlyServerList =&lt;span&gt; GetRedisHosts(_serviceStackConfigEntry.ReadOnlyHosts);
&lt;/span&gt;&lt;span&gt; 77&lt;/span&gt; &lt;span&gt;                        }
&lt;/span&gt;&lt;span&gt; 78&lt;/span&gt;                         &lt;span&gt;else&lt;/span&gt;
&lt;span&gt; 79&lt;/span&gt; &lt;span&gt;                        {
&lt;/span&gt;&lt;span&gt; 80&lt;/span&gt;                             &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; InvalidOperationException(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Redis客户端初始化配置失败！&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 81&lt;/span&gt; &lt;span&gt;                        }
&lt;/span&gt;&lt;span&gt; 82&lt;/span&gt; 
&lt;span&gt; 83&lt;/span&gt;                         &lt;span&gt;if&lt;/span&gt; ((readWriteServerList != &lt;span&gt;null&lt;/span&gt; &amp;amp;&amp;amp; readWriteServerList.Length &amp;gt; &lt;span&gt;0&lt;/span&gt;)&amp;amp;&amp;amp;(readOnlyServerList != &lt;span&gt;null&lt;/span&gt; &amp;amp;&amp;amp; readOnlyServerList.Length &amp;lt;= &lt;span&gt;0&lt;/span&gt;&lt;span&gt;))
&lt;/span&gt;&lt;span&gt; 84&lt;/span&gt; &lt;span&gt;                        {
&lt;/span&gt;&lt;span&gt; 85&lt;/span&gt;                             _instance = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; PooledRedisClientManager(readWriteServerList);
&lt;/span&gt;&lt;span&gt; 86&lt;/span&gt; &lt;span&gt;                        }
&lt;/span&gt;&lt;span&gt; 87&lt;/span&gt; 
&lt;span&gt; 88&lt;/span&gt;                         &lt;span&gt;if&lt;/span&gt; ((readWriteServerList != &lt;span&gt;null&lt;/span&gt; &amp;amp;&amp;amp; readWriteServerList.Length &amp;gt; &lt;span&gt;0&lt;/span&gt;) &amp;amp;&amp;amp; (readOnlyServerList != &lt;span&gt;null&lt;/span&gt; &amp;amp;&amp;amp; readOnlyServerList.Length &amp;gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;))
&lt;/span&gt;&lt;span&gt; 89&lt;/span&gt; &lt;span&gt;                        {
&lt;/span&gt;&lt;span&gt; 90&lt;/span&gt;                             _instance = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; PooledRedisClientManager(readWriteServerList, readOnlyServerList, managerConfig);
&lt;/span&gt;&lt;span&gt; 91&lt;/span&gt; &lt;span&gt;                        }
&lt;/span&gt;&lt;span&gt; 92&lt;/span&gt; &lt;span&gt;                    }
&lt;/span&gt;&lt;span&gt; 93&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt; 94&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt; 95&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt; _instance;
&lt;/span&gt;&lt;span&gt; 96&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 97&lt;/span&gt; 
&lt;span&gt; 98&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span&gt; 99&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 解析Redis服务器列表，该列表格式IP[:Port]
&lt;/span&gt;&lt;span&gt;100&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span&gt;101&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;redisHosts&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;包含一个或者多个Redis服务器地址的字符串列表，以逗号做为分隔符&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;span&gt;102&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&lt;/span&gt;&lt;span&gt;返回Redis服务器地址列表&lt;/span&gt;&lt;span&gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
&lt;span&gt;103&lt;/span&gt;         &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;[] GetRedisHosts(&lt;span&gt;string&lt;/span&gt;&lt;span&gt; redisHosts)
&lt;/span&gt;&lt;span&gt;104&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;105&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (&lt;span&gt;string&lt;/span&gt;.IsNullOrWhiteSpace(redisHosts) || &lt;span&gt;string&lt;/span&gt;&lt;span&gt;.IsNullOrEmpty(redisHosts))
&lt;/span&gt;&lt;span&gt;106&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;107&lt;/span&gt;                 &lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;&lt;span&gt;[] { };
&lt;/span&gt;&lt;span&gt;108&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;109&lt;/span&gt;             &lt;span&gt;var&lt;/span&gt; hosts=redisHosts.Split(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;110&lt;/span&gt;             &lt;span&gt;foreach&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; host &lt;span&gt;in&lt;/span&gt;&lt;span&gt; hosts)
&lt;/span&gt;&lt;span&gt;111&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;112&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt; (!Regex.IsMatch(host, &lt;span&gt;@&quot;&lt;/span&gt;&lt;span&gt;^(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9])\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9]|0)\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9]|0)\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[0-9]):\d{3,4}$&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;))
&lt;/span&gt;&lt;span&gt;113&lt;/span&gt; &lt;span&gt;                {
&lt;/span&gt;&lt;span&gt;114&lt;/span&gt;                     &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; InvalidOperationException(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Redis服务器地址格式不正确！&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;115&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;116&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;117&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt; hosts;
&lt;/span&gt;&lt;span&gt;118&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;119&lt;/span&gt; 
&lt;span&gt;120&lt;/span&gt;         &lt;span&gt;#endregion&lt;/span&gt;
&lt;span&gt;121&lt;/span&gt; 
&lt;span&gt;122&lt;/span&gt;         &lt;span&gt;#region&lt;/span&gt; 提供对外访问接口
&lt;span&gt;123&lt;/span&gt; 
&lt;span&gt;124&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span&gt;125&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 获取Redis客户端对象实例
&lt;/span&gt;&lt;span&gt;126&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span&gt;127&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;redisClientName&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;在配置文件中，Redis客户端的名称&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;span&gt;128&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;databaseIndex&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;redis逻辑分为16个数据库，排序为：0-15，我们默认使用的是0号数据库，数据库当前的索引值&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;span&gt;129&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&lt;/span&gt;&lt;span&gt;返回IRedisClient对象实例&lt;/span&gt;&lt;span&gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
&lt;span&gt;130&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; IRedisClient GetRedisClient(&lt;span&gt;string&lt;/span&gt; redisClientName,&lt;span&gt;int&lt;/span&gt; databaseIndex = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;131&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;132&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取配置数据&lt;/span&gt;
&lt;span&gt;133&lt;/span&gt;             ParameterValidityChecker.RequiredParameterStringNotNullOrWhiteSpace(redisClientName, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Redis客户端的名称不能为空！&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;134&lt;/span&gt;             &lt;span&gt;var&lt;/span&gt; &lt;span&gt;_configurationManager = (ConfigurationFrameworkManager)ConfigurationManager.GetSection(&quot;Framework&quot;);
&lt;/span&gt;&lt;span&gt;135&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (&lt;span&gt;_configurationManager&lt;/span&gt; != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;136&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;137&lt;/span&gt;                 &lt;span&gt;_serviceStackDetails = _configurationManager.RedisClientConfiguration.GetServiceStackDetails(redisClientName);
&lt;/span&gt;&lt;span&gt;138&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt; (_serviceStackDetails == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;139&lt;/span&gt; &lt;span&gt;                {
&lt;/span&gt;&lt;span&gt;140&lt;/span&gt;                     &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; InvalidOperationException(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;以ServiceStack.Redis为实现技术的Redis客户端的配置有误！&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;141&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;142&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;143&lt;/span&gt;             &lt;span&gt;else&lt;/span&gt;
&lt;span&gt;144&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;145&lt;/span&gt;                 &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; InvalidOperationException(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;以ServiceStack.Redis为实现技术的Redis客户端的配置有误！&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;146&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;147&lt;/span&gt; 
&lt;span&gt;148&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;实例化Redis客户端实例对象&lt;/span&gt;
&lt;span&gt;149&lt;/span&gt;             &lt;span&gt;var&lt;/span&gt; pooledRedisClientManager = GetInstance(&lt;span&gt;true&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;150&lt;/span&gt;             &lt;span&gt;var&lt;/span&gt; redisClient =&lt;span&gt; pooledRedisClientManager.GetClient();
&lt;/span&gt;&lt;span&gt;151&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;string&lt;/span&gt;&lt;span&gt;.IsNullOrEmpty(_serviceStackDetails.Password))
&lt;/span&gt;&lt;span&gt;152&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;153&lt;/span&gt;                 redisClient.Password =&lt;span&gt; _serviceStackDetails.Password;
&lt;/span&gt;&lt;span&gt;154&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;155&lt;/span&gt;             redisClient.Db =&lt;span&gt; databaseIndex;
&lt;/span&gt;&lt;span&gt;156&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt; redisClient;
&lt;/span&gt;&lt;span&gt;157&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;158&lt;/span&gt; 
&lt;span&gt;159&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span&gt;160&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 获取Redis客户端对象实例
&lt;/span&gt;&lt;span&gt;161&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span&gt;162&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;serviceStackConfigEntry&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;在配置文件中，Redis客户端的名称&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;span&gt;163&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;databaseIndex&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;redis逻辑分为16个数据库，排序为：0-15，我们默认使用的是0号数据库，数据库当前的索引值&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;span&gt;164&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&lt;/span&gt;&lt;span&gt;返回IRedisClient对象实例&lt;/span&gt;&lt;span&gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
&lt;span&gt;165&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; IRedisClient GetRedisClient(ServiceStackConfigEntry serviceStackConfigEntry, &lt;span&gt;int&lt;/span&gt; databaseIndex = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;166&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;167&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取配置数据&lt;/span&gt;
&lt;span&gt;168&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (serviceStackConfigEntry == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;169&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;170&lt;/span&gt;                 &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; ArgumentNullException(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;以ServiceStack.Redis为实现技术的Redis客户端的配置对象不能为空！&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;171&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;172&lt;/span&gt;             &lt;span&gt;else&lt;/span&gt;
&lt;span&gt;173&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;174&lt;/span&gt;                 _serviceStackConfigEntry =&lt;span&gt; serviceStackConfigEntry;
&lt;/span&gt;&lt;span&gt;175&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;176&lt;/span&gt; 
&lt;span&gt;177&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (&lt;span&gt;string&lt;/span&gt;.IsNullOrEmpty(_serviceStackConfigEntry.ReadWriteHosts) || &lt;span&gt;string&lt;/span&gt;&lt;span&gt;.IsNullOrWhiteSpace(_serviceStackConfigEntry.ReadWriteHosts))
&lt;/span&gt;&lt;span&gt;178&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;179&lt;/span&gt;                 &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; InvalidOperationException(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;【ReadWriteHosts】必须设置其值！&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;180&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;181&lt;/span&gt; 
&lt;span&gt;182&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;实例化Redis客户端实例对象&lt;/span&gt;
&lt;span&gt;183&lt;/span&gt;             &lt;span&gt;var&lt;/span&gt; pooledRedisClientManager = GetInstance(&lt;span&gt;false&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;184&lt;/span&gt;             &lt;span&gt;var&lt;/span&gt; redisClient =&lt;span&gt; pooledRedisClientManager.GetClient();
&lt;/span&gt;&lt;span&gt;185&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;string&lt;/span&gt;.IsNullOrEmpty(_serviceStackConfigEntry.Password)&amp;amp;&amp;amp;!&lt;span&gt;string&lt;/span&gt;&lt;span&gt;.IsNullOrWhiteSpace(_serviceStackConfigEntry.Password))
&lt;/span&gt;&lt;span&gt;186&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;187&lt;/span&gt;                 redisClient.Password =&lt;span&gt; _serviceStackConfigEntry.Password;
&lt;/span&gt;&lt;span&gt;188&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;189&lt;/span&gt;             redisClient.Db =&lt;span&gt; databaseIndex;
&lt;/span&gt;&lt;span&gt;190&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt; redisClient;
&lt;/span&gt;&lt;span&gt;191&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;192&lt;/span&gt; 
&lt;span&gt;193&lt;/span&gt;         &lt;span&gt;#endregion&lt;/span&gt;
&lt;span&gt;194&lt;/span&gt;     }
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;     配置实体类&lt;/strong&gt; &lt;span&gt;&lt;strong&gt;ServiceStackConfigEntry.cs的代码：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt;     &lt;span&gt;///&lt;/span&gt;&lt;span&gt;  配置文件中，以ServiceStack.Redis为实现技术的配置Redis的详情
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;     &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;sealed&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; ServiceStackConfigEntry
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;         &lt;span&gt;#region&lt;/span&gt; 构造函数
&lt;span&gt; 7&lt;/span&gt; 
&lt;span&gt; 8&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 给配置参数初始化默认值
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt;&lt;span&gt; ServiceStackConfigEntry()
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;             ReadWriteHosts = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;127.0.0.1:6379&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;             ReadOnlyHosts = &lt;span&gt;string&lt;/span&gt;&lt;span&gt;.Empty;
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;             MaxWritePoolSize = &lt;span&gt;200&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;             MaxReadPoolSize = &lt;span&gt;200&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;             Password = &lt;span&gt;string&lt;/span&gt;&lt;span&gt;.Empty;
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;             AutoStart = &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; 
&lt;span&gt;21&lt;/span&gt;         &lt;span&gt;#endregion&lt;/span&gt;
&lt;span&gt;22&lt;/span&gt; 
&lt;span&gt;23&lt;/span&gt;         &lt;span&gt;#region&lt;/span&gt; 配置属性
&lt;span&gt;24&lt;/span&gt; 
&lt;span&gt;25&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span&gt;26&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 可读可写的Redis服务器地址，多个地址以逗号分隔，例如：192.168.127.11:6379,192.168.127.128:6380
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span&gt;28&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; ReadWriteHosts { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; 
&lt;span&gt;30&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span&gt;31&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 只能读的Redis服务器地址，多个地址以逗号分隔，例如：192.168.127.11:6379,192.168.127.128:6380
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span&gt;33&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; ReadOnlyHosts { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; 
&lt;span&gt;35&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span&gt;36&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 最大写链接数
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span&gt;38&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; MaxWritePoolSize { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt; 
&lt;span&gt;40&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span&gt;41&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 最大读链接数
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span&gt;43&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; MaxReadPoolSize { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt; 
&lt;span&gt;45&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span&gt;46&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 登陆Redis服务器的密码
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span&gt;48&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; Password { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
&lt;/span&gt;&lt;span&gt;49&lt;/span&gt; 
&lt;span&gt;50&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span&gt;51&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 是否自动启动
&lt;/span&gt;&lt;span&gt;52&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span&gt;53&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;bool&lt;/span&gt; AutoStart { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
&lt;/span&gt;&lt;span&gt;54&lt;/span&gt; 
&lt;span&gt;55&lt;/span&gt;         &lt;span&gt;#endregion&lt;/span&gt;
&lt;span&gt;56&lt;/span&gt;     }
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;      获取配置文件详情的类型：&lt;span&gt;ServiceStackDetails.cs&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;    &lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
    &lt;span&gt;///&lt;/span&gt;&lt;span&gt;  配置文件中，以ServiceStack.Redis为实现技术的配置Redis的详情
    &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;sealed&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; ServiceStackDetails
    {
        &lt;/span&gt;&lt;span&gt;#region&lt;/span&gt; 构造函数

        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 给配置参数初始化默认值
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt;&lt;span&gt; ServiceStackDetails()
        {
            ReadWriteHosts &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;127.0.0.1:6379&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
            ReadOnlyHosts &lt;/span&gt;= &lt;span&gt;string&lt;/span&gt;&lt;span&gt;.Empty;
            MaxWritePoolSize &lt;/span&gt;= &lt;span&gt;200&lt;/span&gt;&lt;span&gt;;
            MaxReadPoolSize &lt;/span&gt;= &lt;span&gt;200&lt;/span&gt;&lt;span&gt;;
            Password &lt;/span&gt;= &lt;span&gt;string&lt;/span&gt;&lt;span&gt;.Empty;
            AutoStart &lt;/span&gt;= &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
        }

        &lt;/span&gt;&lt;span&gt;#endregion&lt;/span&gt;

        &lt;span&gt;#region&lt;/span&gt; 配置属性

        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 可读可写的Redis服务器地址，多个地址以逗号分隔，例如：192.168.127.11:6379,192.168.127.128:6380
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; ReadWriteHosts { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;internal&lt;/span&gt; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }

        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 只能读的Redis服务器地址，多个地址以逗号分隔，例如：192.168.127.11:6379,192.168.127.128:6380
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; ReadOnlyHosts { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;internal&lt;/span&gt; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }

        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 最大写链接数
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; MaxWritePoolSize { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;internal&lt;/span&gt; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }

        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 最大读链接数
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; MaxReadPoolSize { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;internal&lt;/span&gt; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }

        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 登陆Redis服务器的密码
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; Password { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;internal&lt;/span&gt; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }

        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 是否自动启动
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;bool&lt;/span&gt; AutoStart { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;internal&lt;/span&gt; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }

        &lt;/span&gt;&lt;span&gt;#endregion&lt;/span&gt;&lt;span&gt;
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;       &lt;span&gt;&lt;strong&gt;   2、这是以【StackExchange.Redis】为实现技术的工具类，对外界的访问接口提供了2个，第一个是以配置文件中自定义的名称参数的，红色代码是和我独立的配置系统相关联的，另一个访问接口是以配置实体类参数的，代码很简单，不多说了。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;       工具类： StackExchangeRedisClientProvider.cs&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt; &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span&gt;  2&lt;/span&gt;     &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 通过StackExchange.Redis实现的Redis的客户端操作类型
&lt;/span&gt;&lt;span&gt;  3&lt;/span&gt;     &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span&gt;  4&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;sealed&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; StackExchangeRedisClientProvider
&lt;/span&gt;&lt;span&gt;  5&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;  6&lt;/span&gt;         &lt;span&gt;#region&lt;/span&gt; 私有字段
&lt;span&gt;  7&lt;/span&gt; 
&lt;span&gt;  8&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span&gt;  9&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 线程同步变量
&lt;/span&gt;&lt;span&gt; 10&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span&gt; 11&lt;/span&gt;         &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;readonly&lt;/span&gt; &lt;span&gt;object&lt;/span&gt; lockObject = &lt;span&gt;new&lt;/span&gt; &lt;span&gt;object&lt;/span&gt;&lt;span&gt;();
&lt;/span&gt;&lt;span&gt; 12&lt;/span&gt; 
&lt;span&gt; 13&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span&gt; 14&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt;&lt;span&gt; redis链接池管理对象
&lt;/span&gt;&lt;span&gt; 15&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span&gt; 16&lt;/span&gt;         &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;volatile&lt;/span&gt;&lt;span&gt; ConnectionMultiplexer _instance;
&lt;/span&gt;&lt;span&gt; 17&lt;/span&gt; 
&lt;span&gt; 18&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span&gt; 19&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 日志记录器
&lt;/span&gt;&lt;span&gt; 20&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span&gt; 21&lt;/span&gt;         &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;readonly&lt;/span&gt; ILog _log = LogManager.GetLogger(&lt;span&gt;typeof&lt;/span&gt;&lt;span&gt;(StackExchangeRedisClientProvider));
&lt;/span&gt;&lt;span&gt; 22&lt;/span&gt; 
&lt;span&gt; 23&lt;/span&gt;         &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt;&lt;span&gt; StackExchangeDetails _stackExchangeDetails;
&lt;/span&gt;&lt;span&gt; 24&lt;/span&gt; 
&lt;span&gt; 25&lt;/span&gt;         &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt;&lt;span&gt; StackExchangeConfigEntry _stackExchangeConfigEntry;
&lt;/span&gt;&lt;span&gt; 26&lt;/span&gt; 
&lt;span&gt; 27&lt;/span&gt;         &lt;span&gt;#endregion&lt;/span&gt;
&lt;span&gt; 28&lt;/span&gt; 
&lt;span&gt; 29&lt;/span&gt;         &lt;span&gt;#region&lt;/span&gt; 私有构造函数
&lt;span&gt; 30&lt;/span&gt; 
&lt;span&gt; 31&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span&gt; 32&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 私有构造函数，禁止不允许通过new 来实例化该对象
&lt;/span&gt;&lt;span&gt; 33&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span&gt; 34&lt;/span&gt;         &lt;span&gt;private&lt;/span&gt;&lt;span&gt; StackExchangeRedisClientProvider() { }
&lt;/span&gt;&lt;span&gt; 35&lt;/span&gt; 
&lt;span&gt; 36&lt;/span&gt;         &lt;span&gt;#endregion&lt;/span&gt;
&lt;span&gt; 37&lt;/span&gt; 
&lt;span&gt; 38&lt;/span&gt;         &lt;span&gt;#region&lt;/span&gt; 获取Redis客户端实例
&lt;span&gt; 39&lt;/span&gt; 
&lt;span&gt; 40&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span&gt; 41&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 使用一个静态属性来返回已连接的实例
&lt;/span&gt;&lt;span&gt; 42&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 实例发生变化的几种情况：
&lt;/span&gt;&lt;span&gt; 43&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 1.实例为空
&lt;/span&gt;&lt;span&gt; 44&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 2.连接关闭
&lt;/span&gt;&lt;span&gt; 45&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 3.文件发生变化时
&lt;/span&gt;&lt;span&gt; 46&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span&gt; 47&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;startByConfigFile&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;这是一个布尔值，true表示根据配置文件的配置启动，false表示是根据配置对象启动&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;span&gt; 48&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&lt;/span&gt;&lt;span&gt;返回ConnectionMultiplexer类型的对象实例&lt;/span&gt;&lt;span&gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
&lt;span&gt; 49&lt;/span&gt;         &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; ConnectionMultiplexer GetInstance(&lt;span&gt;bool&lt;/span&gt;&lt;span&gt; startByConfigFile)
&lt;/span&gt;&lt;span&gt; 50&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 51&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (startByConfigFile)
&lt;/span&gt;&lt;span&gt; 52&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt; 53&lt;/span&gt; &lt;span&gt;                GetRedisHosts(_stackExchangeDetails.Hosts);
&lt;/span&gt;&lt;span&gt; 54&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt; 55&lt;/span&gt;             &lt;span&gt;else&lt;/span&gt;
&lt;span&gt; 56&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt; 57&lt;/span&gt; &lt;span&gt;                GetRedisHosts(_stackExchangeConfigEntry.Hosts);
&lt;/span&gt;&lt;span&gt; 58&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt; 59&lt;/span&gt;             
&lt;span&gt; 60&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (_instance == &lt;span&gt;null&lt;/span&gt; || !&lt;span&gt;_instance.IsConnected)
&lt;/span&gt;&lt;span&gt; 61&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt; 62&lt;/span&gt;                 &lt;span&gt;lock&lt;/span&gt;&lt;span&gt; (lockObject)
&lt;/span&gt;&lt;span&gt; 63&lt;/span&gt; &lt;span&gt;                {
&lt;/span&gt;&lt;span&gt; 64&lt;/span&gt;                     &lt;span&gt;if&lt;/span&gt; (_instance == &lt;span&gt;null&lt;/span&gt; || !&lt;span&gt;_instance.IsConnected)
&lt;/span&gt;&lt;span&gt; 65&lt;/span&gt; &lt;span&gt;                    {
&lt;/span&gt;&lt;span&gt; 66&lt;/span&gt;                         &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (startByConfigFile)
&lt;/span&gt;&lt;span&gt; 67&lt;/span&gt; &lt;span&gt;                        {
&lt;/span&gt;&lt;span&gt; 68&lt;/span&gt;                             _instance =&lt;span&gt; ConnectionMultiplexer.Connect(_stackExchangeDetails.Hosts);
&lt;/span&gt;&lt;span&gt; 69&lt;/span&gt; &lt;span&gt;                        }
&lt;/span&gt;&lt;span&gt; 70&lt;/span&gt;                         &lt;span&gt;else&lt;/span&gt;
&lt;span&gt; 71&lt;/span&gt; &lt;span&gt;                        {
&lt;/span&gt;&lt;span&gt; 72&lt;/span&gt;                             _instance =&lt;span&gt; ConnectionMultiplexer.Connect(_stackExchangeConfigEntry.Hosts);
&lt;/span&gt;&lt;span&gt; 73&lt;/span&gt; &lt;span&gt;                        }
&lt;/span&gt;&lt;span&gt; 74&lt;/span&gt; &lt;span&gt;                    }
&lt;/span&gt;&lt;span&gt; 75&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt; 76&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt; 77&lt;/span&gt;             _instance.ErrorMessage +=&lt;span&gt; MuxerErrorMessage;
&lt;/span&gt;&lt;span&gt; 78&lt;/span&gt;             _instance.HashSlotMoved +=&lt;span&gt; MuxerHashSlotMoved;
&lt;/span&gt;&lt;span&gt; 79&lt;/span&gt;             _instance.InternalError +=&lt;span&gt; MuxerInternalError;
&lt;/span&gt;&lt;span&gt; 80&lt;/span&gt;             _instance.ConnectionFailed +=&lt;span&gt; MuxerConnectionFailed;
&lt;/span&gt;&lt;span&gt; 81&lt;/span&gt;             _instance.ConnectionRestored +=&lt;span&gt; MuxerConnectionRestored;
&lt;/span&gt;&lt;span&gt; 82&lt;/span&gt;             _instance.ConfigurationChanged +=&lt;span&gt; MuxerConfigurationChanged;
&lt;/span&gt;&lt;span&gt; 83&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt; _instance;
&lt;/span&gt;&lt;span&gt; 84&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 85&lt;/span&gt; 
&lt;span&gt; 86&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span&gt; 87&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 解析Redis服务器列表，该列表格式IP:Port
&lt;/span&gt;&lt;span&gt; 88&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span&gt; 89&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;redisHosts&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;包含一个或者多个Redis服务器地址的字符串列表，以逗号做为分隔符&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;span&gt; 90&lt;/span&gt;         &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; GetRedisHosts(&lt;span&gt;string&lt;/span&gt;&lt;span&gt; redisHosts)
&lt;/span&gt;&lt;span&gt; 91&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 92&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (&lt;span&gt;string&lt;/span&gt;.IsNullOrWhiteSpace(redisHosts) || &lt;span&gt;string&lt;/span&gt;&lt;span&gt;.IsNullOrEmpty(redisHosts))
&lt;/span&gt;&lt;span&gt; 93&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt; 94&lt;/span&gt;                 &lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 95&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt; 96&lt;/span&gt;             &lt;span&gt;var&lt;/span&gt; hosts = redisHosts.Split(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 97&lt;/span&gt;             &lt;span&gt;foreach&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; host &lt;span&gt;in&lt;/span&gt;&lt;span&gt; hosts)
&lt;/span&gt;&lt;span&gt; 98&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt; 99&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt; (!Regex.IsMatch(host, &lt;span&gt;@&quot;&lt;/span&gt;&lt;span&gt;^(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9])\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9]|0)\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9]|0)\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[0-9]):\d{3,4}$&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;))
&lt;/span&gt;&lt;span&gt;100&lt;/span&gt; &lt;span&gt;                {
&lt;/span&gt;&lt;span&gt;101&lt;/span&gt;                     &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; InvalidOperationException(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Redis服务器地址格式不正确！&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;102&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;103&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;104&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;105&lt;/span&gt; 
&lt;span&gt;106&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span&gt;107&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 获取Redis客户端对象实例
&lt;/span&gt;&lt;span&gt;108&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span&gt;109&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;redisClientName&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;在配置文件中，Redis客户端的名称&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;span&gt;110&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;databaseIndex&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;redis逻辑分为16个数据库，排序为：0-15，我们默认使用的是0号数据库，数据库当前的索引值&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;span&gt;111&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
&lt;span&gt;112&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; IDatabase GetRedisClient(&lt;span&gt;string&lt;/span&gt; redisClientName, &lt;span&gt;int&lt;/span&gt; databaseIndex =&lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;113&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;114&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取配置数据&lt;/span&gt;
&lt;span&gt;115&lt;/span&gt;             ParameterValidityChecker.RequiredParameterStringNotNullOrWhiteSpace(redisClientName, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Redis客户端的名称不能为空！&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;116&lt;/span&gt;             &lt;span&gt;var&lt;/span&gt; &lt;span&gt;_configurationManager = (ConfigurationFrameworkManager)ConfigurationManager.GetSection(&quot;Framework&quot;);
&lt;/span&gt;&lt;span&gt;117&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (&lt;span&gt;_configurationManager&lt;/span&gt; != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;118&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;119&lt;/span&gt;                 _stackExchangeDetails =&lt;span&gt;&lt;span&gt; _configurationManager.RedisClientConfiguration.GetStackExchangeDetails(redisClientName)&lt;/span&gt;;
&lt;/span&gt;&lt;span&gt;120&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt; (_stackExchangeDetails == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;121&lt;/span&gt; &lt;span&gt;                {
&lt;/span&gt;&lt;span&gt;122&lt;/span&gt;                     &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; InvalidOperationException(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;以StackExchange.Redis为实现技术的Redis客户端的配置有误！&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;123&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;124&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;125&lt;/span&gt;             &lt;span&gt;else&lt;/span&gt;
&lt;span&gt;126&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;127&lt;/span&gt;                 &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; InvalidOperationException(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;以StackExchange.Redis为实现技术的Redis客户端的配置有误！&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;128&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;129&lt;/span&gt; 
&lt;span&gt;130&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;实例化Redis客户端实例对象&lt;/span&gt;
&lt;span&gt;131&lt;/span&gt;             &lt;span&gt;var&lt;/span&gt; instance = GetInstance(&lt;span&gt;true&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;132&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt; instance.GetDatabase(databaseIndex);
&lt;/span&gt;&lt;span&gt;133&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;134&lt;/span&gt; 
&lt;span&gt;135&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span&gt;136&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 获取Redis客户端对象实例
&lt;/span&gt;&lt;span&gt;137&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span&gt;138&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;stackExchangeConfigEntry&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;StackExchange配置对象&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;span&gt;139&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;databaseIndex&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;redis逻辑分为16个数据库，排序为：0-15，我们默认使用的是0号数据库，数据库当前的索引值&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;span&gt;140&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
&lt;span&gt;141&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; IDatabase GetRedisClient(StackExchangeConfigEntry stackExchangeConfigEntry, &lt;span&gt;int&lt;/span&gt; databaseIndex =&lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;142&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;143&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取配置数据&lt;/span&gt;
&lt;span&gt;144&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (stackExchangeConfigEntry == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;145&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;146&lt;/span&gt;                 &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; ArgumentNullException(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;以StackExchange.Redis为实现技术的Redis客户端的配置对象不能为空！&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;147&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;148&lt;/span&gt;             &lt;span&gt;else&lt;/span&gt;
&lt;span&gt;149&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;150&lt;/span&gt;                 _stackExchangeConfigEntry =&lt;span&gt; stackExchangeConfigEntry;
&lt;/span&gt;&lt;span&gt;151&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;152&lt;/span&gt; 
&lt;span&gt;153&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (&lt;span&gt;string&lt;/span&gt;.IsNullOrEmpty(_stackExchangeConfigEntry.Hosts) || &lt;span&gt;string&lt;/span&gt;&lt;span&gt;.IsNullOrWhiteSpace(_stackExchangeConfigEntry.Hosts))
&lt;/span&gt;&lt;span&gt;154&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;155&lt;/span&gt;                 &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; InvalidOperationException(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;【Hosts】必须设置其值！&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;156&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;157&lt;/span&gt; 
&lt;span&gt;158&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;实例化Redis客户端实例对象&lt;/span&gt;
&lt;span&gt;159&lt;/span&gt;             &lt;span&gt;var&lt;/span&gt; instance = GetInstance(&lt;span&gt;false&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;160&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt; instance.GetDatabase(databaseIndex);
&lt;/span&gt;&lt;span&gt;161&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;162&lt;/span&gt; 
&lt;span&gt;163&lt;/span&gt;         &lt;span&gt;#endregion&lt;/span&gt;
&lt;span&gt;164&lt;/span&gt;     }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;br/&gt;  &lt;span&gt;   配置实体类：StackExchangeConfigEntry.cs&lt;/span&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt;     &lt;span&gt;///&lt;/span&gt;&lt;span&gt;  配置文件中，以StackExchange.Redis为实现技术的配置Redis的详情
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;     &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;sealed&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; StackExchangeConfigEntry
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;         &lt;span&gt;#region&lt;/span&gt; 构造函数
&lt;span&gt; 7&lt;/span&gt; 
&lt;span&gt; 8&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 给配置参数初始化默认值
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt;&lt;span&gt; StackExchangeConfigEntry()
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;             Hosts = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;127.0.0.1:6379&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;             Password = &lt;span&gt;string&lt;/span&gt;&lt;span&gt;.Empty;
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; 
&lt;span&gt;17&lt;/span&gt;         &lt;span&gt;#endregion&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt; 
&lt;span&gt;19&lt;/span&gt;         &lt;span&gt;#region&lt;/span&gt; 配置属性
&lt;span&gt;20&lt;/span&gt; 
&lt;span&gt;21&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span&gt;22&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt;&lt;span&gt; Redis服务器地址，多个地址以逗号分隔，例如：192.168.127.11:6379,192.168.127.128:6380
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span&gt;24&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; Hosts { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; 
&lt;span&gt;26&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span&gt;27&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 登陆Redis服务器的密码
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span&gt;29&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; Password { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; 
&lt;span&gt;31&lt;/span&gt;         &lt;span&gt;#endregion&lt;/span&gt;
&lt;span&gt;32&lt;/span&gt;     }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt; &lt;br/&gt;   根据配置信息获取数据的类型：&lt;span&gt;StackExchangeDetails&lt;/span&gt;.cs&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt;     &lt;span&gt;///&lt;/span&gt;&lt;span&gt;  配置文件中，以StackExchange.Redis为实现技术的配置Redis的详情
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;     &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;sealed&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; StackExchangeDetails
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;         &lt;span&gt;#region&lt;/span&gt; 构造函数
&lt;span&gt; 7&lt;/span&gt; 
&lt;span&gt; 8&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 给配置参数初始化默认值
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt;&lt;span&gt; StackExchangeDetails()
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;             Hosts = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;127.0.0.1:6379&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;             Password = &lt;span&gt;string&lt;/span&gt;&lt;span&gt;.Empty;
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; 
&lt;span&gt;17&lt;/span&gt;         &lt;span&gt;#endregion&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt; 
&lt;span&gt;19&lt;/span&gt;         &lt;span&gt;#region&lt;/span&gt; 配置属性
&lt;span&gt;20&lt;/span&gt; 
&lt;span&gt;21&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span&gt;22&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt;&lt;span&gt; Redis服务器的主机地址，如果多个地址则以逗号分隔，格式：127.0.0.1:6379,127.0.0.1:6380
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span&gt;24&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; Hosts{ &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;internal&lt;/span&gt; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; 
&lt;span&gt;26&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span&gt;27&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 登陆Redis服务器的密码
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span&gt;29&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; Password { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;internal&lt;/span&gt; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; 
&lt;span&gt;31&lt;/span&gt;         &lt;span&gt;#endregion&lt;/span&gt;
&lt;span&gt;32&lt;/span&gt;     }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt; &lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;四、结束&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;       好了，今天就写到这里了，先说明一下，这两个类暂时没有提供统一的接口，看以后的需要吧，如果有需要，我在重构。StackExchangeDetails 和 ServiceStackDetails 这两个类在这个 Enterprise.Framework.Configuration 命名空间，配置的系统暂时就不贴代码了，代码很多，其他的类型都在 Enterprise.Framework.NoSQL.RedisClient 这个命名空间下边。&lt;/p&gt;

</description>
<pubDate>Mon, 05 Feb 2018 07:17:00 +0000</pubDate>
<dc:creator>PatrickLiu</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/PatrickLiu/p/8417734.html</dc:identifier>
</item>
<item>
<title>jQuery动画详解 - 生命壹号</title>
<link>http://www.cnblogs.com/smyhvae/p/8417728.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/smyhvae/p/8417728.html</guid>
<description>&lt;blockquote readability=&quot;5.375&quot;&gt;
&lt;p&gt;本文最初发表于&lt;a href=&quot;http://www.cnblogs.com/smyhvae/p/8417728.html&quot;&gt;博客园&lt;/a&gt;，并在&lt;a href=&quot;https://github.com/smyhvae/Web&quot;&gt;GitHub&lt;/a&gt;上持续更新&lt;strong&gt;前端的系列文章&lt;/strong&gt;。欢迎在GitHub上关注我，一起入门和进阶前端。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;以下是正文。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;
&lt;p&gt;jQuery提供的一组网页中常见的动画效果，这些动画是标准的、有规律的效果；同时还提供给我们了自定义动画的功能。&lt;/p&gt;
&lt;h2 id=&quot;显示动画&quot;&gt;显示动画&lt;/h2&gt;
&lt;p&gt;方式一：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;    &lt;span class=&quot;at&quot;&gt;$&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;div&quot;&lt;/span&gt;).&lt;span class=&quot;at&quot;&gt;show&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;解释：无参数，表示让指定的元素直接显示出来。其实这个方法的底层就是通过&lt;code&gt;display: block;&lt;/code&gt;实现的。&lt;/p&gt;
&lt;p&gt;方式二：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;    &lt;span class=&quot;at&quot;&gt;$&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;div&quot;&lt;/span&gt;).&lt;span class=&quot;at&quot;&gt;show&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;2000&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;解释：通过控制元素的宽高、透明度、display属性，逐渐显示，2秒后显示完毕。&lt;/p&gt;
&lt;p&gt;效果如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.smyhvae.com/20180205_1358.gif&quot;/&gt;&lt;/p&gt;
&lt;p&gt;方式三：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;    &lt;span class=&quot;at&quot;&gt;$&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;div&quot;&lt;/span&gt;).&lt;span class=&quot;at&quot;&gt;show&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;slow&quot;&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;参数可以是：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;
&lt;p&gt;slow 慢：600ms&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;normal 正常：400ms&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;fast 快：200ms&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;解释：和方式二类似，也是通过控制元素的宽高、透明度、display属性，逐渐显示。&lt;/p&gt;
&lt;p&gt;方式四：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;    &lt;span class=&quot;co&quot;&gt;//show(毫秒值，回调函数;&lt;/span&gt;
    &lt;span class=&quot;at&quot;&gt;$&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;div&quot;&lt;/span&gt;).&lt;span class=&quot;at&quot;&gt;show&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;5000&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; () &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;at&quot;&gt;alert&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;动画执行完毕！&quot;&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;解释：动画执行完后，立即执行回调函数。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;总结：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;上面的四种方式几乎一致：参数可以有两个，第一个是动画的执行时长，第二个是动画结束后执行的回调函数。&lt;/p&gt;
&lt;h2 id=&quot;隐藏动画&quot;&gt;隐藏动画&lt;/h2&gt;
&lt;p&gt;方式参照上面的show()方法的方式。如下：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;    &lt;span class=&quot;at&quot;&gt;$&lt;/span&gt;(selector).&lt;span class=&quot;at&quot;&gt;hide&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;at&quot;&gt;$&lt;/span&gt;(selector).&lt;span class=&quot;at&quot;&gt;hide&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;1000&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt; 

    &lt;span class=&quot;at&quot;&gt;$&lt;/span&gt;(selector).&lt;span class=&quot;at&quot;&gt;hide&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;slow&quot;&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;at&quot;&gt;$&lt;/span&gt;(selector).&lt;span class=&quot;at&quot;&gt;hide&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;{}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;显示和隐藏的来回切换：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;显示和隐藏的来回切换采用的是toggle()方法：就是先执行show()，再执行hide()。&lt;/p&gt;
&lt;p&gt;同样是四种方式：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;at&quot;&gt;$&lt;/span&gt;(selector).&lt;span class=&quot;at&quot;&gt;toggle&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;滑入和滑出&quot;&gt;滑入和滑出&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;1、滑入动画效果&lt;/strong&gt;：（类似于生活中的卷帘门）&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;    &lt;span class=&quot;at&quot;&gt;$&lt;/span&gt;(selector).&lt;span class=&quot;at&quot;&gt;slideDown&lt;/span&gt;(speed&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; 回调函数)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;解释：下拉动画，显示元素。&lt;/p&gt;
&lt;p&gt;注意：省略参数或者传入不合法的字符串，那么则使用默认值：400毫秒（同样适用于fadeIn/slideDown/slideUp）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2 滑出动画效果：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;    &lt;span class=&quot;at&quot;&gt;$&lt;/span&gt;(selector).&lt;span class=&quot;at&quot;&gt;slideUp&lt;/span&gt;(speed&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; 回调函数)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;解释：上拉动画，隐藏元素。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3、滑入滑出切换动画效果：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;    &lt;span class=&quot;at&quot;&gt;$&lt;/span&gt;(selector).&lt;span class=&quot;at&quot;&gt;slideToggle&lt;/span&gt;(speed&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; 回调函数)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;参数解释同show()方法。&lt;/p&gt;
&lt;p&gt;举例：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;12&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;&lt;span class=&quot;dt&quot;&gt;&amp;lt;!DOCTYPE &lt;/span&gt;html&lt;span class=&quot;dt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;head&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; lang=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;en&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;meta&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; charset=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;title&amp;gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
        div &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;width:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;300px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;height:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;300px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;display:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;none&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;background-color:&lt;/span&gt; pink&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;kw&quot;&gt;&amp;lt;script&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; src=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;jquery-1.11.1.js&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;at&quot;&gt;$&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; () &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;co&quot;&gt;//点击按钮后产生动画&lt;/span&gt;
            &lt;span class=&quot;at&quot;&gt;$&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;button:eq(0)&quot;&lt;/span&gt;).&lt;span class=&quot;at&quot;&gt;click&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; () &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;

                &lt;span class=&quot;co&quot;&gt;//滑入动画： slideDown(毫秒值，回调函数[显示完毕执行什么]);&lt;/span&gt;
                &lt;span class=&quot;at&quot;&gt;$&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;div&quot;&lt;/span&gt;).&lt;span class=&quot;at&quot;&gt;slideDown&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;2000&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; () &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;at&quot;&gt;alert&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;动画执行完毕！&quot;&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)

            &lt;span class=&quot;co&quot;&gt;//滑出动画&lt;/span&gt;
            &lt;span class=&quot;at&quot;&gt;$&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;button:eq(1)&quot;&lt;/span&gt;).&lt;span class=&quot;at&quot;&gt;click&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; () &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;

                &lt;span class=&quot;co&quot;&gt;//滑出动画：slideUp(毫秒值，回调函数[显示完毕后执行什么]);&lt;/span&gt;
                &lt;span class=&quot;at&quot;&gt;$&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;div&quot;&lt;/span&gt;).&lt;span class=&quot;at&quot;&gt;slideUp&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;2000&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; () &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;at&quot;&gt;alert&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;动画执行完毕！&quot;&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)

            &lt;span class=&quot;at&quot;&gt;$&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;button:eq(2)&quot;&lt;/span&gt;).&lt;span class=&quot;at&quot;&gt;click&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; () &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;co&quot;&gt;//滑入滑出切换（同样有四种用法）&lt;/span&gt;
                &lt;span class=&quot;at&quot;&gt;$&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;div&quot;&lt;/span&gt;).&lt;span class=&quot;at&quot;&gt;slideToggle&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;1000&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)

        &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)
    &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;&amp;lt;/head&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;body&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;button&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;滑入&lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/button&amp;gt;&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;&amp;lt;button&amp;gt;滑出&amp;lt;/button&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;button&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;切换&lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/button&amp;gt;&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;&amp;lt;div&amp;gt;&amp;lt;/div&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;&amp;lt;/html&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;http://img.smyhvae.com/20180205_1420.gif&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;淡入淡出动画&quot;&gt;淡入淡出动画&lt;/h2&gt;
&lt;p&gt;1、淡入动画效果：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;    &lt;span class=&quot;at&quot;&gt;$&lt;/span&gt;(selector).&lt;span class=&quot;at&quot;&gt;fadeIn&lt;/span&gt;(speed&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; callback)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;作用：让元素以淡淡的进入视线的方式展示出来。&lt;/p&gt;
&lt;p&gt;2、淡出动画效果：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;    &lt;span class=&quot;at&quot;&gt;$&lt;/span&gt;(selector).&lt;span class=&quot;at&quot;&gt;fadeOut&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;1000&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;作用：让元素以渐渐消失的方式隐藏起来&lt;/p&gt;
&lt;p&gt;3、淡入淡出切换动画效果：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;    &lt;span class=&quot;at&quot;&gt;$&lt;/span&gt;(selector).&lt;span class=&quot;at&quot;&gt;fadeToggle&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'fast'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; callback)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;作用：通过改变透明度，切换匹配元素的显示或隐藏状态。&lt;/p&gt;
&lt;p&gt;参数的含义同show()方法。&lt;/p&gt;
&lt;p&gt;代码举例：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;14&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;&lt;span class=&quot;dt&quot;&gt;&amp;lt;!DOCTYPE &lt;/span&gt;html&lt;span class=&quot;dt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;head&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; lang=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;en&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;meta&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; charset=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;title&amp;gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
        div &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;width:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;300px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;height:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;300px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;display:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;none&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;co&quot;&gt;/*opacity: 1;*/&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;background-color:&lt;/span&gt; pink&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;kw&quot;&gt;&amp;lt;script&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; src=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;jquery-1.11.1.js&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;at&quot;&gt;$&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; () &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;co&quot;&gt;//点击按钮后产生动画&lt;/span&gt;
            &lt;span class=&quot;at&quot;&gt;$&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;button:eq(0)&quot;&lt;/span&gt;).&lt;span class=&quot;at&quot;&gt;click&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; () &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;//                //淡入动画用法1:   fadeIn();   不加参数&lt;/span&gt;
                &lt;span class=&quot;at&quot;&gt;$&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;div&quot;&lt;/span&gt;).&lt;span class=&quot;at&quot;&gt;fadeIn&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;co&quot;&gt;//                //淡入动画用法2:   fadeIn(2000);   毫秒值&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;//                $(&quot;div&quot;).fadeIn(2000);&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;//                //通过控制  透明度和display&lt;/span&gt;

                &lt;span class=&quot;co&quot;&gt;//淡入动画用法3:   fadeIn(字符串);   slow慢：600ms   normal正常:400ms   fast快：200ms&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;//                $(&quot;div&quot;).fadeIn(&quot;slow&quot;);&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;//                $(&quot;div&quot;).fadeIn(&quot;fast&quot;);&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;//                $(&quot;div&quot;).fadeIn(&quot;normal&quot;);&lt;/span&gt;

                &lt;span class=&quot;co&quot;&gt;//淡入动画用法4:   fadeIn(毫秒值，回调函数[显示完毕执行什么]);&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;//                $(&quot;div&quot;).fadeIn(5000,function () {&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;//                    alert(&quot;动画执行完毕！&quot;);&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;//                });&lt;/span&gt;
            &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)

            &lt;span class=&quot;co&quot;&gt;//滑出动画&lt;/span&gt;
            &lt;span class=&quot;at&quot;&gt;$&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;button:eq(1)&quot;&lt;/span&gt;).&lt;span class=&quot;at&quot;&gt;click&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; () &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;//                //滑出动画用法1:   fadeOut();   不加参数&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;//                $(&quot;div&quot;).fadeOut();&lt;/span&gt;

&lt;span class=&quot;co&quot;&gt;//                //滑出动画用法2:   fadeOut(2000);   毫秒值&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;//                $(&quot;div&quot;).fadeOut(2000);  //通过这个方法实现的：display: none;&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;//                //通过控制  透明度和display&lt;/span&gt;

                &lt;span class=&quot;co&quot;&gt;//滑出动画用法3:   fadeOut(字符串);   slow慢：600ms   normal正常:400ms   fast快：200ms&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;//                $(&quot;div&quot;).fadeOut(&quot;slow&quot;);&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;//                $(&quot;div&quot;).fadeOut(&quot;fast&quot;);&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;//                $(&quot;div&quot;).fadeOut(&quot;normal&quot;);&lt;/span&gt;

                &lt;span class=&quot;co&quot;&gt;//滑出动画用法1:   fadeOut(毫秒值，回调函数[显示完毕执行什么]);&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;//                $(&quot;div&quot;).fadeOut(2000,function () {&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;//                    alert(&quot;动画执行完毕！&quot;);&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;//                });&lt;/span&gt;
            &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)

            &lt;span class=&quot;at&quot;&gt;$&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;button:eq(2)&quot;&lt;/span&gt;).&lt;span class=&quot;at&quot;&gt;click&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; () &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;co&quot;&gt;//滑入滑出切换&lt;/span&gt;
                &lt;span class=&quot;co&quot;&gt;//同样有四种用法&lt;/span&gt;
                &lt;span class=&quot;at&quot;&gt;$&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;div&quot;&lt;/span&gt;).&lt;span class=&quot;at&quot;&gt;fadeToggle&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;1000&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)

            &lt;span class=&quot;at&quot;&gt;$&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;button:eq(3)&quot;&lt;/span&gt;).&lt;span class=&quot;at&quot;&gt;click&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; () &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;co&quot;&gt;//改透明度&lt;/span&gt;
                &lt;span class=&quot;co&quot;&gt;//同样有四种用法&lt;/span&gt;
                &lt;span class=&quot;at&quot;&gt;$&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;div&quot;&lt;/span&gt;).&lt;span class=&quot;at&quot;&gt;fadeTo&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;fl&quot;&gt;0.5&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; () &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;at&quot;&gt;alert&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)
        &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)
    &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;&amp;lt;/head&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;body&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;button&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;淡入&lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/button&amp;gt;&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;&amp;lt;button&amp;gt;淡出&amp;lt;/button&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;button&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;切换&lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/button&amp;gt;&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;&amp;lt;button&amp;gt;改透明度为0.5&amp;lt;/button&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;span class=&quot;op&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/div&amp;gt;&lt;/span&gt;

&lt;span class=&quot;ss&quot;&gt;&amp;lt;/body&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/html&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;自定义动画&quot;&gt;自定义动画&lt;/h2&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;    &lt;span class=&quot;at&quot;&gt;$&lt;/span&gt;(selector).&lt;span class=&quot;at&quot;&gt;animate&lt;/span&gt;(&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;params&lt;span class=&quot;op&quot;&gt;},&lt;/span&gt; speed&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; callback)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;作用：执行一组CSS属性的自定义动画。&lt;/p&gt;
&lt;ul readability=&quot;0&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;第一个参数表示：要执行动画的CSS属性（必选）&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;第二个参数表示：执行动画时长（可选）&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;第三个参数表示：动画执行完后，立即执行的回调函数（可选）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;代码举例：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;23&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;&lt;span class=&quot;dt&quot;&gt;&amp;lt;!DOCTYPE &lt;/span&gt;html&lt;span class=&quot;dt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;head&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; lang=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;en&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;meta&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; charset=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;title&amp;gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
        div &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;position:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;absolute&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;left:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;20px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;top:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;30px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;width:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;100px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;height:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;100px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;background-color:&lt;/span&gt; pink&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;script&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; src=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;jquery-1.11.1.js&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;at&quot;&gt;jQuery&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; () &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;at&quot;&gt;$&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;button&quot;&lt;/span&gt;).&lt;span class=&quot;at&quot;&gt;click&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; () &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; json &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;width&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;height&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;left&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;300&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;top&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;300&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;border-radius&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;};&lt;/span&gt;
                &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; json2 &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;st&quot;&gt;&quot;width&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
                    &lt;span class=&quot;st&quot;&gt;&quot;height&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
                    &lt;span class=&quot;st&quot;&gt;&quot;left&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
                    &lt;span class=&quot;st&quot;&gt;&quot;top&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
                    &lt;span class=&quot;st&quot;&gt;&quot;border-radius&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
                    &lt;span class=&quot;st&quot;&gt;&quot;background-color&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;red&quot;&lt;/span&gt;
                &lt;span class=&quot;op&quot;&gt;};&lt;/span&gt;

                &lt;span class=&quot;co&quot;&gt;//自定义动画&lt;/span&gt;
                &lt;span class=&quot;at&quot;&gt;$&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;div&quot;&lt;/span&gt;).&lt;span class=&quot;at&quot;&gt;animate&lt;/span&gt;(json&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; () &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;at&quot;&gt;$&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;div&quot;&lt;/span&gt;).&lt;span class=&quot;at&quot;&gt;animate&lt;/span&gt;(json2&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; () &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                        &lt;span class=&quot;at&quot;&gt;alert&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;动画执行完毕！&quot;&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

            &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)
        &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)
    &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;&amp;lt;/head&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;body&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;button&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;自定义动画&lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/button&amp;gt;&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;&amp;lt;div&amp;gt;&amp;lt;/div&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;&amp;lt;/html&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;停止动画&quot;&gt;停止动画&lt;/h2&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;    &lt;span class=&quot;at&quot;&gt;$&lt;/span&gt;(selector).&lt;span class=&quot;at&quot;&gt;stop&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;false&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;里面的两个参数，有不同的含义。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;第一个参数：&lt;/p&gt;
&lt;p&gt;第二个参数：&lt;/p&gt;
&lt;p&gt;PS：参数如果都不写，默认两个都是false。实际工作中，直接写stop()用的多。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;效果演示：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;当第二个参数为true时，效果如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.smyhvae.com/20180205_1445.gif&quot;/&gt;&lt;/p&gt;
&lt;p&gt;当第二个参数为false时，效果如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.smyhvae.com/20180205_1450.gif&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这个&lt;strong&gt;后续动画&lt;/strong&gt;我们要好好理解，来看个例子。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;案例：鼠标悬停时，弹出下拉菜单（下拉时带动画）&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;&lt;span class=&quot;dt&quot;&gt;&amp;lt;!DOCTYPE &lt;/span&gt;html&lt;span class=&quot;dt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;head&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; lang=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;en&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;meta&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; charset=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;title&amp;gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;style&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; type=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;text/css&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
        * &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;margin:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;padding:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;

        ul &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;list-style:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;none&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;fl&quot;&gt;.wrap&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;width:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;330px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;height:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;30px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;margin:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;100px&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;padding-left:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;10px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;background-color:&lt;/span&gt; pink&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;fl&quot;&gt;.wrap&lt;/span&gt; li &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;background-color:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;green&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;fl&quot;&gt;.wrap&lt;/span&gt; &amp;gt; ul &amp;gt; li &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;float:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;margin-right:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;10px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;position:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;relative&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;fl&quot;&gt;.wrap&lt;/span&gt; a &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;display:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;height:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;30px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;width:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;100px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;text-decoration:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;none&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;color:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;#000&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;line-height:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;30px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;text-align:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;center&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;fl&quot;&gt;.wrap&lt;/span&gt; li ul &lt;span class=&quot;kw&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;position:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;absolute&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;top:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;30px&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;display:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;none&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;script&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; src=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;jquery-1.11.1.js&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;co&quot;&gt;//入口函数&lt;/span&gt;
        &lt;span class=&quot;at&quot;&gt;$&lt;/span&gt;(document).&lt;span class=&quot;at&quot;&gt;ready&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; () &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;co&quot;&gt;//需求：鼠标放入一级li中，让他里面的ul显示。移开隐藏。&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; jqli &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;$&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;.wrap&amp;gt;ul&amp;gt;li&quot;&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

            &lt;span class=&quot;co&quot;&gt;//绑定事件&lt;/span&gt;
            &lt;span class=&quot;va&quot;&gt;jqli&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;mouseenter&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; () &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;at&quot;&gt;$&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;).&lt;span class=&quot;at&quot;&gt;children&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;ul&quot;&lt;/span&gt;).&lt;span class=&quot;at&quot;&gt;stop&lt;/span&gt;().&lt;span class=&quot;at&quot;&gt;slideDown&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;1000&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

            &lt;span class=&quot;co&quot;&gt;//绑定事件(移开隐藏)&lt;/span&gt;
            &lt;span class=&quot;va&quot;&gt;jqli&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;mouseleave&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; () &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;at&quot;&gt;$&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;).&lt;span class=&quot;at&quot;&gt;children&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;ul&quot;&lt;/span&gt;).&lt;span class=&quot;at&quot;&gt;stop&lt;/span&gt;().&lt;span class=&quot;at&quot;&gt;slideUp&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;1000&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/script&amp;gt;&lt;/span&gt;

&lt;span class=&quot;ss&quot;&gt;&amp;lt;/head&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;body&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;div &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;wrap&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;ul&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;li&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;a href&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;javascript:void(0);&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;一级菜单&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/a&amp;gt;&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;            &amp;lt;ul&amp;gt;&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;                &amp;lt;li&amp;gt;&amp;lt;a href=&quot;javascript:void&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;;&quot;&amp;gt;二级菜单1&amp;lt;/a&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/li&amp;gt;&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;                &amp;lt;li&amp;gt;&amp;lt;a href=&quot;javascript:void&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;;&quot;&amp;gt;二级菜单2&amp;lt;/a&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/li&amp;gt;&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;                &amp;lt;li&amp;gt;&amp;lt;a href=&quot;javascript:void&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;;&quot;&amp;gt;二级菜单3&amp;lt;/a&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/li&amp;gt;&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;            &amp;lt;/ul&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/li&amp;gt;&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;        &amp;lt;li&amp;gt;&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;            &amp;lt;a href=&quot;javascript:void&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;;&quot;&amp;gt;一级菜单1&amp;lt;/a&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;ul&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;li&lt;span class=&quot;op&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;a href&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;javascript:void(0);&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;二级菜单&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/a&amp;gt;&amp;lt;/li&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;li&lt;span class=&quot;op&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;a href&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;javascript:void(0);&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;二级菜单&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/a&amp;gt;&amp;lt;/li&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;li&lt;span class=&quot;op&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;a href&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;javascript:void(0);&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;二级菜单&lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/a&amp;gt;&amp;lt;/li&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/ul&amp;gt;&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;        &amp;lt;/li&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;li&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;a href&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;javascript:void(0);&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;一级菜单&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/a&amp;gt;&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;            &amp;lt;ul&amp;gt;&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;                &amp;lt;li&amp;gt;&amp;lt;a href=&quot;javascript:void&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;;&quot;&amp;gt;二级菜单1&amp;lt;/a&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/li&amp;gt;&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;                &amp;lt;li&amp;gt;&amp;lt;a href=&quot;javascript:void&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;;&quot;&amp;gt;二级菜单2&amp;lt;/a&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/li&amp;gt;&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;                &amp;lt;li&amp;gt;&amp;lt;a href=&quot;javascript:void&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;;&quot;&amp;gt;二级菜单3&amp;lt;/a&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/li&amp;gt;&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;            &amp;lt;/ul&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/li&amp;gt;&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;    &amp;lt;/ul&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;&amp;lt;/body&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/html&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;效果如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.smyhvae.com/20180205_1500.gif&quot;/&gt;&lt;/p&gt;
&lt;p&gt;上方代码中，关键的地方在于，用了stop函数，再执行动画前，先停掉之前的动画。&lt;/p&gt;
&lt;p&gt;如果去掉stop()函数，效果如下：（不是我们期望的效果）&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.smyhvae.com/20180205_1505.gif&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;stop方法的总结&quot;&gt;stop方法的总结&lt;/h3&gt;
&lt;p&gt;当调用stop()方法后，队列里面的下一个动画将会立即开始。&lt;br/&gt;但是，如果参数clearQueue被设置为true，那么队列面剩余的动画就被删除了，并且永远也不会执行。&lt;/p&gt;
&lt;p&gt;如果参数jumpToEnd被设置为true，那么当前动画会停止，但是参与动画的每一个CSS属性将被立即设置为它们的目标值。比如：slideUp()方法，那么元素会立即隐藏掉。如果存在回调函数，那么回调函数也会立即执行。&lt;/p&gt;
&lt;p&gt;注意：如果元素动画还没有执行完，此时调用sotp()方法，那么动画将会停止。并且动画没有执行完成，那么回调函数也不会被执行。&lt;/p&gt;
&lt;h2 id=&quot;我的公众号&quot;&gt;我的公众号&lt;/h2&gt;
&lt;p&gt;想学习&lt;span&gt;&lt;strong&gt;代码之外的软技能&lt;/strong&gt;&lt;/span&gt;？不妨关注我的微信公众号：&lt;strong&gt;生命团队&lt;/strong&gt;（id：&lt;code&gt;vitateam&lt;/code&gt;）。&lt;/p&gt;
&lt;p&gt;扫一扫，你将发现另一个全新的世界，而这将是一场美丽的意外：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.smyhvae.com/2016040102.jpg&quot;/&gt;&lt;/p&gt;
</description>
<pubDate>Mon, 05 Feb 2018 07:16:00 +0000</pubDate>
<dc:creator>生命壹号</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/smyhvae/p/8417728.html</dc:identifier>
</item>
<item>
<title>多对多中间表详解  -- Django从入门到精通系列教程 - 刘江liujiangblog.com</title>
<link>http://www.cnblogs.com/feixuelove1009/p/8417714.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/feixuelove1009/p/8417714.html</guid>
<description>&lt;h3 id=&quot;该系列教程系个人原创并完整发布在个人官网刘江的博客和教程&quot;&gt;该系列教程系个人原创，并完整发布在个人官网&lt;a href=&quot;http://www.liujiangblog.com&quot;&gt;刘江的博客和教程&lt;/a&gt;&lt;/h3&gt;
&lt;h3 id=&quot;所有转载本文者需在顶部显著位置注明原作者及www.liujiangblog.com官网地址&quot;&gt;所有转载本文者，需在顶部显著位置注明原作者及www.liujiangblog.com官网地址。&lt;/h3&gt;
&lt;h3 id=&quot;python及django学习qq群453131687&quot;&gt;Python及Django学习QQ群：453131687&lt;/h3&gt;
&lt;hr/&gt;&lt;p&gt;我们都知道对于ManyToMany字段，Django采用的是第三张中间表的方式。通过这第三张表，来关联ManyToMany的双方。下面我们根据一个具体的例子，详细解说中间表的使用。&lt;/p&gt;
&lt;h2 id=&quot;一默认中间表&quot;&gt;一、默认中间表&lt;/h2&gt;
&lt;p&gt;首先，模型是这样的：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; Person(models.Model):
    name &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; models.CharField(max_length&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;128&lt;/span&gt;)

    &lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;__str__&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;):
        &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.name


&lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; Group(models.Model):
    name &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; models.CharField(max_length&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;128&lt;/span&gt;)
    members &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; models.ManyToManyField(Person)

    &lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;__str__&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;):
        &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.name&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在Group模型中，通过members字段，以ManyToMany方式与Person模型建立了关系。&lt;/p&gt;
&lt;p&gt;让我们到数据库内看一下实际的内容，Django为我们创建了三张数据表，其中的app1是应用名。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://static.zybuluo.com/feixuelove1009/ce9q6hq63vz6769bg5qe85id/image.png&quot; alt=&quot;image.png-6.4kB&quot;/&gt;&lt;/p&gt;
&lt;p&gt;然后我在数据库中添加了下面的Person对象：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://static.zybuluo.com/feixuelove1009/ygwped2iv1l14jm1mlz3otsd/image.png&quot; alt=&quot;image.png-16.7kB&quot;/&gt;&lt;/p&gt;
&lt;p&gt;再添加下面的Group对象：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://static.zybuluo.com/feixuelove1009/9dhr7a33ixgyl8qimq5reyth/image.png&quot; alt=&quot;image.png-13.9kB&quot;/&gt;&lt;/p&gt;
&lt;p&gt;让我们来看看，中间表是个什么样子的：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://static.zybuluo.com/feixuelove1009/s02nszzgk1h824gg32qg7zok/image.png&quot; alt=&quot;image.png-23.7kB&quot;/&gt;&lt;/p&gt;
&lt;p&gt;首先有一列id，这是Django默认添加的，没什么好说的。然后是Group和Person的id列，这是默认情况下，Django关联两张表的方式。如果你要设置关联的列，可以使用to_field参数。&lt;/p&gt;
&lt;p&gt;可见在中间表中，并不是将两张表的数据都保存在一起，而是通过id的关联进行映射。&lt;/p&gt;
&lt;h2 id=&quot;二自定义中间表&quot;&gt;二、自定义中间表&lt;/h2&gt;
&lt;p&gt;一般情况，普通的多对多已经够用，无需自己创建第三张关系表。但是某些情况可能更复杂一点，比如如果你想保存某个人加入某个分组的时间呢？想保存进组的原因呢？&lt;/p&gt;
&lt;p&gt;Django提供了一个&lt;code&gt;through&lt;/code&gt;参数，用于指定中间模型，你可以将类似进组时间，邀请原因等其他字段放在这个中间模型内。例子如下：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;13&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; django.db &lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; models

&lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; Person(models.Model):
    name &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; models.CharField(max_length&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;128&lt;/span&gt;)
    &lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;__str__&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;): 
        &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.name
        
&lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; Group(models.Model):
    name &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; models.CharField(max_length&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;128&lt;/span&gt;)
    members &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; models.ManyToManyField(Person, through&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'Membership'&lt;/span&gt;)
    &lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;__str__&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;): 
        &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.name

&lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; Membership(models.Model):
    person &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; models.ForeignKey(Person, on_delete&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;models.CASCADE)
    group &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; models.ForeignKey(Group, on_delete&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;models.CASCADE)
    date_joined &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; models.DateField()        &lt;span class=&quot;co&quot;&gt;# 进组时间&lt;/span&gt;
    invite_reason &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; models.CharField(max_length&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;64&lt;/span&gt;)  &lt;span class=&quot;co&quot;&gt;# 邀请原因&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在中间表中，我们至少要编写两个外键字段，分别指向关联的两个模型。在本例中就是‘Person’和‘group’。&lt;br/&gt;这里，我们额外增加了‘date_joined’字段，用于保存人员进组的时间，‘invite_reason’字段用于保存邀请进组的原因。&lt;/p&gt;
&lt;p&gt;下面我们依然在数据库中实际查看一下（应用名为app2）：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://static.zybuluo.com/feixuelove1009/93oeamp9p6cybhwke0nnhtr7/image.png&quot; alt=&quot;image.png-3.8kB&quot;/&gt;&lt;/p&gt;
&lt;p&gt;注意中间表的名字已经变成“app2_membership”了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://static.zybuluo.com/feixuelove1009/5tmg0nekzfc2gv4dteixw6ja/image.png&quot; alt=&quot;image.png-16.5kB&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://static.zybuluo.com/feixuelove1009/o2mr6uco7xnsyvoq0bq40m83/image.png&quot; alt=&quot;image.png-13.8kB&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Person和Group没有变化。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://static.zybuluo.com/feixuelove1009/wqzlms0kni4hz91x8bxjcou3/image.png&quot; alt=&quot;image.png-42.6kB&quot;/&gt;&lt;/p&gt;
&lt;p&gt;但是中间表就截然不同了！它完美的保存了我们需要的内容。&lt;/p&gt;
&lt;h2 id=&quot;三使用中间表&quot;&gt;三、使用中间表&lt;/h2&gt;
&lt;p&gt;针对上面的中间表，下面是一些使用例子（以欧洲著名的甲壳虫乐队成员为例）：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;21&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; ringo &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; Person.objects.create(name&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;Ringo Starr&quot;&lt;/span&gt;)
&lt;span class=&quot;op&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; paul &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; Person.objects.create(name&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;Paul McCartney&quot;&lt;/span&gt;)
&lt;span class=&quot;op&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; beatles &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; Group.objects.create(name&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;The Beatles&quot;&lt;/span&gt;)
&lt;span class=&quot;op&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; m1 &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; Membership(person&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;ringo, group&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;beatles,
... date_joined&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;date(&lt;span class=&quot;dv&quot;&gt;1962&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;8&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;16&lt;/span&gt;),
... invite_reason&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;Needed a new drummer.&quot;&lt;/span&gt;)
&lt;span class=&quot;op&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; m1.save()
&lt;span class=&quot;op&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; beatles.members.&lt;span class=&quot;bu&quot;&gt;all&lt;/span&gt;()
&lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;QuerySet [&lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;Person: Ringo Starr&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;]&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; ringo.group_set.&lt;span class=&quot;bu&quot;&gt;all&lt;/span&gt;()
&lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;QuerySet [&lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;Group: The Beatles&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;]&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; m2 &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; Membership.objects.create(person&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;paul, group&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;beatles,
... date_joined&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;date(&lt;span class=&quot;dv&quot;&gt;1960&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;8&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;),
... invite_reason&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;Wanted to form a band.&quot;&lt;/span&gt;)
&lt;span class=&quot;op&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; beatles.members.&lt;span class=&quot;bu&quot;&gt;all&lt;/span&gt;()
&lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;QuerySet [&lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;Person: Ringo Starr&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;, &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;Person: Paul McCartney&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;]&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;与普通的多对多不一样，使用自定义中间表的多对多不能使用add(), create(),remove(),和set()方法来创建、删除关系，看下面：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; # 无效
&amp;gt;&amp;gt;&amp;gt; beatles.members.add(john)
&amp;gt;&amp;gt;&amp;gt; # 无效
&amp;gt;&amp;gt;&amp;gt; beatles.members.create(name=&quot;George Harrison&quot;)
&amp;gt;&amp;gt;&amp;gt; # 无效
&amp;gt;&amp;gt;&amp;gt; beatles.members.set([john, paul, ringo, george])&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;为什么？因为上面的方法无法提供加入时间、邀请原因等中间模型需要的字段内容。唯一的办法只能是通过创建中间模型的实例来创建这种类型的多对多关联。但是，clear()方法是有效的，它能清空所有的多对多关系。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; # 甲壳虫乐队解散了
&amp;gt;&amp;gt;&amp;gt; beatles.members.clear()
&amp;gt;&amp;gt;&amp;gt; # 删除了中间模型的对象
&amp;gt;&amp;gt;&amp;gt; Membership.objects.all()
&amp;lt;QuerySet []&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;一旦你通过创建中间模型实例的方法建立了多对多的关联，你立刻就可以像普通的多对多那样进行查询操作：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;# 查找组内有Paul这个人的所有的组（以Paul开头的名字）
&amp;gt;&amp;gt;&amp;gt; Group.objects.filter(members__name__startswith='Paul')
&amp;lt;QuerySet [&amp;lt;Group: The Beatles&amp;gt;]&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;可以使用中间模型的属性进行查询：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;# 查找甲壳虫乐队中加入日期在1961年1月1日之后的成员
&amp;gt;&amp;gt;&amp;gt; Person.objects.filter(
... group__name='The Beatles',
... membership__date_joined__gt=date(1961,1,1))
&amp;lt;QuerySet [&amp;lt;Person: Ringo Starr]&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;可以像普通模型一样使用中间模型：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; ringos_membership = Membership.objects.get(group=beatles, person=ringo)
&amp;gt;&amp;gt;&amp;gt; ringos_membership.date_joined
datetime.date(1962, 8, 16)
&amp;gt;&amp;gt;&amp;gt; ringos_membership.invite_reason
'Needed a new drummer.'
&amp;gt;&amp;gt;&amp;gt; ringos_membership = ringo.membership_set.get(group=beatles)
&amp;gt;&amp;gt;&amp;gt; ringos_membership.date_joined
datetime.date(1962, 8, 16)
&amp;gt;&amp;gt;&amp;gt; ringos_membership.invite_reason
'Needed a new drummer.'&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这一部分内容，需要结合后面的模型query，如果暂时看不懂，没有关系。&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;对于中间表，有一点要注意（在前面章节已经介绍过，再次重申一下），默认情况下，中间模型只能包含一个指向源模型的外键关系，上面例子中，也就是在Membership中只能有Person和Group外键关系各一个，不能多。否则，你必须显式的通过&lt;code&gt;ManyToManyField.through_fields&lt;/code&gt;参数指定关联的对象。参考下面的例子：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;19&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; django.db &lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; models

&lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; Person(models.Model):
    name &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; models.CharField(max_length&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;50&lt;/span&gt;)

&lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; Group(models.Model):
    name &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; models.CharField(max_length&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;128&lt;/span&gt;)
    members &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; models.ManyToManyField(
    Person,
    through&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'Membership'&lt;/span&gt;,
    through_fields&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'group'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'person'&lt;/span&gt;),
    )

&lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; Membership(models.Model):
    group &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; models.ForeignKey(Group, on_delete&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;models.CASCADE)
    person &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; models.ForeignKey(Person, on_delete&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;models.CASCADE)
    inviter &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; models.ForeignKey(
    Person,
    on_delete&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;models.CASCADE,
    related_name&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;membership_invites&quot;&lt;/span&gt;,
    )
    invite_reason &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; models.CharField(max_length&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;64&lt;/span&gt;)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
</description>
<pubDate>Mon, 05 Feb 2018 07:14:00 +0000</pubDate>
<dc:creator>刘江liujiangblog.com</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/feixuelove1009/p/8417714.html</dc:identifier>
</item>
<item>
<title>Asp.net Core 入门实战 2.请求流程 - 故土难离</title>
<link>http://www.cnblogs.com/gutun/p/pipeline.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/gutun/p/pipeline.html</guid>
<description>&lt;p&gt;&lt;a href=&quot;https://gitee.com/defa/aspnetcore2.0.1&quot;&gt;Asp.net Core官网的一个源码合集,方便一次性Clone&lt;/a&gt;,喜欢的(Star),本系列持续更新，也可以通过&lt;a href=&quot;http://www.netgos.com/&quot;&gt;我的网站&lt;/a&gt;访问,欢迎探讨交流&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/gutun/p/aspnetcore_in_action.html&quot;&gt;接上一篇&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;

&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/748773/201802/748773-20180205144804279-1793181060.png&quot;/&gt;&lt;br/&gt;asp.net core实现了一个跨平台的宿主和web服务器. 一旦你调用了WebHost对象的Start方法,你就运行了一个监听Http请求的Web服务器,它可以运行在32位的linux系统甚至是树莓派上.然而在生产环境还是建议你使用一些反向代理工具,如Nginx,IIs,Apache等.为什么需要反向代理,因为Kestrel只是一个简单的Web服务器,其他语言像java,python,nodejs,ruby,你会看到一些Web服务器PM2或者Passenger结合反向代理工具使用.这些Web服务器提供了监控,日志,负载均衡和流程管理功能,对于一个成熟的Web服务器而言.在Windows平台,你可以使用IIS反向代理,在linux服务器使用nginx/apache来实现反向代理.&lt;/p&gt;
&lt;h2 id=&quot;宿主&quot;&gt;宿主&lt;/h2&gt;
&lt;p&gt;宿主WebHost用来配置服务器和处理请求管道.&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;public interface IWebHost:IDisposable
{
    //从Server加载Http功能接口列表
    IFeatureCollection ServerFeatures { get; }
    //服务容器
    IServiceProvider Services { get; }
    // 开始监听端口
    void Start();
    //启动主机
    Task StartAsync(CancellationToken cancellationToken = default(CancellationToken));
    //尝试停止主机
    Task StopAsync(CancellationToken cancellationToken = default(CancellationToken));
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;web服务器&quot;&gt;Web服务器&lt;/h2&gt;
&lt;p&gt;Kestrel 是跨平台 HTTP 服务器，它基于 libuv(一个跨平台异步 I/O 库). Web Server实现了IServer接口,实现了Http服务器.&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;public interface IServer
{
    //Http功能接口列表
    IFeatureCollection Features { get; }
    //开始处理请求
    Task StartAsync&amp;lt;TContext&amp;gt;(IHttpApplication&amp;lt;TContext&amp;gt; application, CancellationToken cancellationToken);
    // 停止请求处理，关闭服务器，尽可能的不是强制结束，而是等待请求处理结束后再停止
    Task StopAsync(CancellationToken cancellationToken);
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;请求委托&quot;&gt;请求委托&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/748773/201802/748773-20180205144818935-1127825303.png&quot;/&gt;&lt;br/&gt;Asp.net Core包含了一组请求委托(RequestDelegate),请求委托处理Http请求, 这一组请求委托组成了请求管道.(Pipeline)&lt;/p&gt;
&lt;h2 id=&quot;中间件middleware&quot;&gt;中间件(Middleware)&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;为请求委托指定匿名方法,通过 Run、Map 和 Use 扩展方法来配置.&lt;/li&gt;
&lt;li&gt;为请求委托指定命名方法,通过UseMiddleware&amp;lt;类名称&amp;gt;来配置,通过反射生成类的实例,再调用实例的Invoke方法或者InvokeAsync方法来实例化委托.&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;http功能接口&quot;&gt;HTTP功能接口&lt;/h2&gt;
&lt;ul readability=&quot;0.5&quot;&gt;&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;Web Server的功能接口集合, 服务器定义的Http 功能接口和相应的中间件.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;请求上下文(Context)的功能接口集合,中间件可以更改该功能集合并添加新的HttpFeature接口支持.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;迷你的代码示例&quot;&gt;迷你的代码示例&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://gitee.com/defa/aspnetcore_study&quot;&gt;middleware/Demo&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;以上内容有任何错误或不准确的地方请大家指正，不喜勿喷！ 本文版权归作者和博客园共有，欢迎转载，但未经作者同意必须保留此段声明，且在文章页面明显位置给出原文连接，否则保留追究法律责任的权利。如果觉得还有帮助的话，可以点一下右下角的【推荐】，希望能够持续的为大家带来好的技术文章！想跟我一起进步么？那就【关注】我吧。&lt;/p&gt;
</description>
<pubDate>Mon, 05 Feb 2018 07:13:00 +0000</pubDate>
<dc:creator>故土难离</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/gutun/p/pipeline.html</dc:identifier>
</item>
<item>
<title>Hyperledger Fabric Chaincode for Operators——实操智能合约 - Aberic</title>
<link>http://www.cnblogs.com/aberic/p/8394714.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/aberic/p/8394714.html</guid>
<description>&lt;p&gt;&lt;span&gt;&lt;strong&gt;什么是Chaincode（智能合约）？&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;tgt&quot; data-group=&quot;0-0&quot;&gt;chaincode是一个程序，它是使用Go语言编写的，最终在Java等其他编程语言中实现了指定的接口。chaincode运行&lt;span class=&quot;tgt&quot; data-group=&quot;0-1&quot;&gt;在一个被背书peer进程独立出来的安全的Docker容器中。chaincode&lt;span class=&quot;tgt&quot; data-group=&quot;0-2&quot;&gt;通过应用程序提交的事务初始化和管理账本状态。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;tgt&quot; data-group=&quot;0-0&quot;&gt;&lt;span class=&quot;tgt&quot; data-group=&quot;0-1&quot;&gt;&lt;span class=&quot;tgt&quot; data-group=&quot;0-2&quot;&gt;&lt;span class=&quot;tgt&quot; data-group=&quot;0-0&quot;&gt;chaincode通常处理被网络成员认可的业务逻辑，因此它被认为是一种“智能合约”。&lt;span class=&quot;tgt&quot; data-group=&quot;0-1&quot;&gt;由chaincode创建的状态只作用于该chaincode，而不能通过另一个chaincode直接访问。&lt;span class=&quot;tgt highlight&quot; data-group=&quot;0-2&quot;&gt;但是，在同一个网络中，给定适当的权限，chaincode可以调用另一个chaincode来访问它的状态。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;tgt&quot; data-group=&quot;0-0&quot;&gt;&lt;span class=&quot;tgt&quot; data-group=&quot;0-1&quot;&gt;&lt;span class=&quot;tgt&quot; data-group=&quot;0-2&quot;&gt;&lt;span class=&quot;tgt&quot; data-group=&quot;0-0&quot;&gt;&lt;span class=&quot;tgt&quot; data-group=&quot;0-1&quot;&gt;&lt;span class=&quot;tgt highlight&quot; data-group=&quot;0-2&quot;&gt;&lt;span class=&quot;tgt&quot; data-group=&quot;0-0&quot;&gt;在下面的部分中，我们将通过区块链通信产品应用方案供应商诺亚的视角来探索chaincode。&lt;span class=&quot;tgt&quot; data-group=&quot;0-1&quot;&gt;我们的兴趣将更加关注诺亚对于chaincode生命周期的操作；&lt;span class=&quot;tgt&quot; data-group=&quot;0-2&quot;&gt;在区块链网络中，打包、安装、实例化和升级chaincode的过程，是chaincode的操作生命周期的一个功能。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;智能合约生命周期&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Hyperledger Fabric的API支持与区块链网络中的各个节点进行交互——peers、orderers和MSPs——它还允许其中一个在支持的背书节点上打包、安装、实例化和升级chaincode。尽管Hyperledger Fabric可以用来管理chaincode的生命周期，但它还是提供了特定语言的sdk抽象了Hyperledger Fabric API的细节，以促进应用程序的开发。另外，可以通过CLI直接访问Hyperledger Fabric API，我们将在此文档中使用它。&lt;/p&gt;
&lt;p&gt; 官方提供了四个命令来管理一个chaincode的生命周期：&lt;span class=&quot;Apple-converted-space&quot;&gt; package、install、instantiate和upgrade&lt;/span&gt;。在未来的版本中，官方也正在考虑添加stop和start命令操作事务来禁用和重新启用chaincode，而不必实际卸载它。在成功安装并实例化了一个chaincode之后，chaincode就处于活跃中（正在运行），并且可以通过调用事务处理事务。在安装完毕后，也可以在任何时间都对chaincode进行升级。&lt;/p&gt;

&lt;h2&gt;&lt;span&gt;&lt;strong&gt;Packaging（包）&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;chaincode包由3部分组成：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span class=&quot;tgt&quot; data-group=&quot;0-0&quot;&gt;chaincode由chaincode部署规范（ChaincodeDeploymentSpec）或CDS定义。&lt;span class=&quot;tgt&quot; data-group=&quot;0-1&quot;&gt;CDS是根据代码和其他属性（如名称和版本）定义了chaincode包。&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&quot;tgt&quot; data-group=&quot;0-0&quot;&gt;&lt;span class=&quot;tgt&quot; data-group=&quot;0-1&quot;&gt;一个可选的实例化策略，它可以在策略上用相同的策略来描述，用于支持和在背书策略中描述。参考&lt;a href=&quot;http://www.cnblogs.com/aberic/p/8399168.html&quot; target=&quot;_blank&quot;&gt;Hyperledger Fabric Endorsement policies——背书策略&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&quot;tgt&quot; data-group=&quot;0-0&quot;&gt;&lt;span class=&quot;tgt&quot; data-group=&quot;0-1&quot;&gt;由“拥有”chaincode的实体的一组签名。&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;这些签名有以下目的：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;为了建立chaincode的所有权；&lt;/li&gt;
&lt;li&gt;允许对包的内容进行验证；&lt;/li&gt;
&lt;li&gt;允许检测包是否篡改&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;一个channel上的chaincode实例化事务的创建者是通过chaincode的实例化策略来验证的。&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;创建package（包）&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;tgt&quot; data-group=&quot;0-0&quot;&gt;打包chaincode有两种方法。&lt;span class=&quot;tgt&quot; data-group=&quot;0-1&quot;&gt;一种是当想要一个chaincode拥有多个所有者时，需要使用多个身份标识为该chaincode签名。&lt;span class=&quot;tgt&quot; data-group=&quot;0-2&quot;&gt;这个工作流程需要我们首先创建一个已签名的chaincode（一个签署的CDS），然后通过序列的方式将其传递给其他所有者来签署。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;更简单的工作流程是正在发行安装事务的节点的身份签名时部署已签署的CDS。&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;tgt&quot; data-group=&quot;0-0&quot;&gt;首先将处理更复杂的情况。&lt;span class=&quot;tgt&quot; data-group=&quot;0-1&quot;&gt;但是，如果不需要担心多个所有者，那么可以跳过下面的安装chaincode部分。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; 要创建一个已签名的chaincode包，请使用以下命令：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
peer chaincode package -n mycc -p github.com/hyperledger/fabric/examples/chaincode/go/chaincode_example02 -v &lt;span&gt;0&lt;/span&gt; -s -S -i &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;AND('OrgA.admin')&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; ccpack.out
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;-s参数是指可以创建一个由多个所有者签署的包，而不是简单地创建一个未处理/修饰过的CDS。当指定了-s时，如果其他所有者需要签名，也必须指定-s参数。否则，这个进程会创建一个除了CDS实例化策略之外的已签署CDS。&lt;/p&gt;
&lt;p&gt;-S参数使用在core.yaml中由localMspid属性值标识的MSP来指示该程序的签名。&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;tgt&quot; data-group=&quot;0-0&quot;&gt;-S参数是可选的。&lt;span class=&quot;tgt&quot; data-group=&quot;0-1&quot;&gt;但是，如果一个包是在没有签名的情况下创建的，那么它就不能由任何其他所有者使用signpackage命令来签署。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; -i参数是可选的，即指定chaincode实例化策略。实例化策略与背书策略具有相同的格式，并指定哪些id可以实例化chaincode。在上面的示例中，只允许使用OrgA的admin实例化链代码。如果没有提供策略，则使用默认策略，这将只允许peer中MSP的admin身份来实例化chaincode。&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;包签名（Package signing）&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;一个已经被签名的chaincode包在被创建时候可以交由其它所有者检查并签名，这个工作流程支持chaincode包带外签署。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/hyperledger/fabric/blob/master/protos/peer/chaincode.proto#L78&quot; target=&quot;_blank&quot;&gt;ChaincodeDeploymentSpec&lt;/a&gt;视需要也许会有共同的全部所有者签名去创建一个&lt;a href=&quot;https://github.com/hyperledger/fabric/blob/master/protos/peer/signed_cc_dep_spec.proto#L26&quot; target=&quot;_blank&quot;&gt;SignedChaincodeDeploymentSpec&lt;/a&gt;（或SignedCDS），SignedCDS包含了3个元素：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;CDS包含了chaincode的源码、名称和版本信息。&lt;/li&gt;
&lt;li&gt;chaincode的实例化策略，即表示背书策略。&lt;/li&gt;
&lt;li&gt;chaincode的所有者列表，以&lt;a href=&quot;https://github.com/hyperledger/fabric/blob/master/protos/peer/proposal_response.proto#L111&quot; target=&quot;_blank&quot;&gt;背书&lt;/a&gt;的方式定义。&lt;/li&gt;
&lt;/ol&gt;&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;&lt;span class=&quot;tgt&quot; data-group=&quot;0-0&quot;&gt;注意：当chaincode在某些channel上实例化时，此背书策略是由带外决定的，以提供适当的MSP原则。&lt;span class=&quot;tgt&quot; data-group=&quot;0-1&quot;&gt;如果没有指定实例化策略，则默认策略是channel的任何MSP的admin。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;每个所有者通过将其与所有者的身份（例如证书）相结合，并签署结合后的结果来为ChaincodeDeploymentSpec背书。&lt;/p&gt;
&lt;p&gt;一个chaincode所有者可以使用下面的命令来签署一个以前创建的签名包：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
peer chaincode signpackage ccpack.out signedccpack.out
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ccpack.out和signedccpack.out分别是输入和输出包。signedccpack.out包含了使用本地MSP签名的包的附加签名。&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;安装chaincode&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;安装事务将chaincode的源代码打包成一种指定的格式，称为ChaincodeDeploymentSpec（chaincode部署规范或CDS），并将其安装到运行该chaincode的peer节点上。&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;注意：必须在channel中的每个背书节点上安装chaincode，以运行chaincode。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt; 当安装API被简单地给出一个ChaincodeDeploymentSpec时，它将默认实例化策略，并包含一个空的所有者列表。&lt;/p&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt; 注意：chaincode&lt;span class=&quot;tgt&quot; data-group=&quot;0-0&quot;&gt;只应该安装在对chaincode拥有的成员的背书peer节点上，以保护网络中其他成员的chaincode逻辑的机密性。&lt;span class=&quot;tgt&quot; data-group=&quot;0-1&quot;&gt;那些没有chaincode的成员，不能成为chaincode交易的背书人；&lt;span class=&quot;tgt&quot; data-group=&quot;0-2&quot;&gt;也就是说，它们不能执行chaincode。&lt;span class=&quot;tgt&quot; data-group=&quot;0-3&quot;&gt;但是，它们仍然可以验证并将事务提交到账本上。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt; &lt;span class=&quot;tgt&quot; data-group=&quot;0-0&quot;&gt;要安装一个chaincode，请将一个签署的提案发送到system&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;chaincode（系统智能合约）其中被描述为生命周期系统智能合约（&lt;span class=&quot;Apple-converted-space&quot;&gt; lifecycle system chaincode —— &lt;/span&gt;LSCC）的部分。&lt;span class=&quot;tgt&quot; data-group=&quot;0-1&quot;&gt;例如，要安装使用CLI的简单资产chaincode中描述的sacc示例chaincode，该命令将如下所示：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
peer chaincode &lt;span&gt;install&lt;/span&gt; -n asset_mgmt -v &lt;span&gt;1.0&lt;/span&gt; -p sacc
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;CLI容器内执行创建的SignedChaincodeDeploymentSpec sacc，并将其发送给本地peer，本地peer会调用LSCC上的安装方法。对-p选项的参数指定了chaincode的路径，它必须位于用户的GOPATH的源码树中，例如$GOPATH/src/sacc。有关命令选项的完整描述，后面将会讲到。&lt;/p&gt;
&lt;p&gt; 要注意一点，为了在peer上安装，签署的提案的签名必须来自peer的本地MSP管理员的一个签名。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;strong&gt;chaincode&lt;/strong&gt;实例化&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;实例化事务调用生命周期系统chaincode(LSCC)来创建和初始化一个channel上的chaincode。这是一个chaincode-channel绑定过程：chaincode可以绑定到任意数量的channel，并分别在每个channel上独立操作。换句话说，不管chaincode安装和实例化了多少个其他channel，状态都被隔离到一个事务提交的channel上。&lt;/p&gt;
&lt;p&gt;实例化事务的创建者必须满足在SignedCDS中包含的chaincode的实例化策略，并且该创建者作为创建该channel配置信息的一部分，也必须是channel上的一个写入者。这对于channel的安全性来说是非常重要的，它可以防止恶意实体部署chaincode或欺骗成员在一个未绑定的channel上执行chaincode。&lt;/p&gt;
&lt;p&gt;例如，默认的实例化策略是任何channel上的MSP管理员，因此一个chaincode实例化事务的创建者必须是channel管理员的成员。&lt;span class=&quot;tgt&quot; data-group=&quot;0-1&quot;&gt;当事务提案到达背书人（节点）的时候，它将验证创建者的签名与实例化策略。并且&lt;span class=&quot;tgt&quot; data-group=&quot;0-2&quot;&gt;在将其提交给账本之前，在事务验证期间再次执行此操作。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;tgt&quot; data-group=&quot;0-1&quot;&gt;&lt;span class=&quot;tgt&quot; data-group=&quot;0-2&quot;&gt;&lt;span class=&quot;tgt&quot; data-group=&quot;0-0&quot;&gt;实例化事务还为channel上的chaincode设置了背书策略。&lt;span class=&quot;tgt&quot; data-group=&quot;0-1&quot;&gt;背书策略描述了交易结果的认证要求，被该channel的所有成员所接受。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;例如，使用CLI实例化sacc chaincode，并使用john和0初始化状态，命令将如下所示：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
peer chaincode instantiate -n sacc -v &lt;span&gt;1.0&lt;/span&gt; -c &lt;span&gt;'&lt;/span&gt;&lt;span&gt;{&quot;Args&quot;:[&quot;john&quot;,&quot;0&quot;]}&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; -P &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;OR ('Org1.member','Org2.member')&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote readability=&quot;12&quot;&gt;
&lt;p&gt;&lt;span class=&quot;tgt&quot; data-group=&quot;0-0&quot;&gt;注意：签注策略（CLI使用波兰表示法），它需要来自Org1或Org2的任意成员的支持，以支持所有的事务到sacc。&lt;span class=&quot;tgt&quot; data-group=&quot;0-1&quot;&gt;也就是说，无论是Org1或Org2都必须签署在sacc上执行调用的结果，以使事务是有效的。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;tgt&quot; data-group=&quot;0-0&quot;&gt;&lt;span class=&quot;tgt&quot; data-group=&quot;0-1&quot;&gt;【波兰表示法（Polish notation，或波兰记法），是一种逻辑、算术和代数表示方法，其特点是操作符置于操作数的前面，因此也称做前缀表示法。如果操作符的元数（arity）是固定的，则语法上不需要括号仍然能被无歧义地解析。波兰记法是波兰数学家扬·武卡谢维奇1920年代引入的，用于简化命题逻辑。】&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt; &lt;span class=&quot;tgt&quot; data-group=&quot;0-0&quot;&gt;在chaincode成功实例化之后，chaincode在channel上进入活跃状态，并准备处理任何背书事务类型支持的事务协议。&lt;span class=&quot;tgt&quot; data-group=&quot;0-1&quot;&gt;这些事务是并发处理的，因为它们到达了背书peer。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;chaincode升级&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;tgt&quot; data-group=&quot;0-0&quot;&gt;任何时候，chaincode都可以通过更改其版本来进行升级，这是SignedCDS的一部分。&lt;span class=&quot;tgt&quot; data-group=&quot;0-1&quot;&gt;其他部分，例如所有者和实例化策略是可选的。&lt;span class=&quot;tgt&quot; data-group=&quot;0-2&quot;&gt;但是，chaincode的名称必须是相同的，&lt;span class=&quot;tgt&quot; data-group=&quot;0-3&quot;&gt;否则，它将被视为完全不同的chaincode。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;tgt&quot; data-group=&quot;0-0&quot;&gt;&lt;span class=&quot;tgt&quot; data-group=&quot;0-1&quot;&gt;&lt;span class=&quot;tgt&quot; data-group=&quot;0-2&quot;&gt;&lt;span class=&quot;tgt&quot; data-group=&quot;0-3&quot;&gt;&lt;span class=&quot;tgt&quot; data-group=&quot;0-0&quot;&gt;在升级之前，必须将chaincode的新版本安装在需要的背书peer上。&lt;span class=&quot;tgt&quot; data-group=&quot;0-1&quot;&gt;升级是一个类似于实例化事务的事务，它将chaincode的新版本绑定到channel。其他channels所绑定的旧版本chaincode将会继续运行旧版本chaincode&lt;span class=&quot;tgt&quot; data-group=&quot;0-2&quot;&gt;。&lt;span class=&quot;tgt&quot; data-group=&quot;0-3&quot;&gt;换句话说，升级事务只会一次影响一个channel，即提交事务的channel。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;&lt;span class=&quot;tgt&quot; data-group=&quot;0-0&quot;&gt;&lt;span class=&quot;tgt&quot; data-group=&quot;0-1&quot;&gt;&lt;span class=&quot;tgt&quot; data-group=&quot;0-2&quot;&gt;&lt;span class=&quot;tgt&quot; data-group=&quot;0-3&quot;&gt;&lt;span class=&quot;tgt&quot; data-group=&quot;0-0&quot;&gt;&lt;span class=&quot;tgt&quot; data-group=&quot;0-1&quot;&gt;&lt;span class=&quot;tgt&quot; data-group=&quot;0-2&quot;&gt;&lt;span class=&quot;tgt&quot; data-group=&quot;0-3&quot;&gt;注意：由于chaincode的多个版本可能同时处于活跃状态，所以升级过程不会自动删除旧版本，因此用户必须暂时管理这个版本。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span class=&quot;tgt&quot; data-group=&quot;0-0&quot;&gt;&lt;span class=&quot;tgt&quot; data-group=&quot;0-1&quot;&gt;&lt;span class=&quot;tgt&quot; data-group=&quot;0-2&quot;&gt;&lt;span class=&quot;tgt&quot; data-group=&quot;0-3&quot;&gt;&lt;span class=&quot;tgt&quot; data-group=&quot;0-0&quot;&gt;&lt;span class=&quot;tgt&quot; data-group=&quot;0-1&quot;&gt;&lt;span class=&quot;tgt&quot; data-group=&quot;0-2&quot;&gt;&lt;span class=&quot;tgt&quot; data-group=&quot;0-3&quot;&gt;&lt;span class=&quot;tgt&quot; data-group=&quot;0-0&quot;&gt;与实例化事务有一个微妙的区别：升级事务是根据当前的chaincode实例化策略检查的，而不是新策略（如果指定的话）。&lt;span class=&quot;tgt&quot; data-group=&quot;0-1&quot;&gt;这是为了确保在当前的实例化策略中指定的现有成员可以升级chaincode。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;&lt;span class=&quot;tgt&quot; data-group=&quot;0-0&quot;&gt;&lt;span class=&quot;tgt&quot; data-group=&quot;0-1&quot;&gt;&lt;span class=&quot;tgt&quot; data-group=&quot;0-2&quot;&gt;&lt;span class=&quot;tgt&quot; data-group=&quot;0-3&quot;&gt;&lt;span class=&quot;tgt&quot; data-group=&quot;0-0&quot;&gt;&lt;span class=&quot;tgt&quot; data-group=&quot;0-1&quot;&gt;&lt;span class=&quot;tgt&quot; data-group=&quot;0-2&quot;&gt;&lt;span class=&quot;tgt&quot; data-group=&quot;0-3&quot;&gt;&lt;span class=&quot;tgt&quot; data-group=&quot;0-0&quot;&gt;&lt;span class=&quot;tgt&quot; data-group=&quot;0-1&quot;&gt;注意：在升级过程中，调用chaincode Init函数来执行任何与数据相关的更新或重新初始化它，因此在升级chaincode时必须注意避免重新设置状态。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;停止和启动chaincode&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;tgt highlight&quot; data-group=&quot;0-0&quot;&gt;注意，停止和启动生命周期事务还没有实现。&lt;span class=&quot;tgt&quot; data-group=&quot;0-1&quot;&gt;但是，可以通过从每个背书人中删除chaincode容器和SignedCDS包来手动停止chaincode。&lt;span class=&quot;tgt&quot; data-group=&quot;0-2&quot;&gt;这是通过在背书peer节点运行的每个主机或虚拟机上删除chaincode的容器来完成的，然后从每个背书peer节点上删除SignedCDS。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;&lt;span class=&quot;tgt highlight&quot; data-group=&quot;0-0&quot;&gt;&lt;span class=&quot;tgt&quot; data-group=&quot;0-1&quot;&gt;&lt;span class=&quot;tgt&quot; data-group=&quot;0-2&quot;&gt;&lt;span class=&quot;tgt&quot; data-group=&quot;0-0&quot;&gt;TODO-为了从peer节点删除CDS，首先需要进入peer节点的容器。&lt;span class=&quot;tgt&quot; data-group=&quot;0-1&quot;&gt;我们确实需要提供一个能够执行此功能的实用程序脚本。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
docker &lt;span&gt;rm&lt;/span&gt; -f &amp;lt;container &lt;span&gt;id&lt;/span&gt;&amp;gt;
&lt;span&gt;rm&lt;/span&gt; /var/hyperledger/production/chaincodes/&amp;lt;ccname&amp;gt;:&amp;lt;ccversion&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Stop在工作流程中是有用的，可以在控制方式上进行升级，在进行升级之前，可以在所有peer上停止一个chaincode。&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;CLI（客户端）&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;&lt;span class=&quot;tgt&quot; data-group=&quot;0-0&quot;&gt;官方正在评估为Hyperledger Fabric peer二进制文件分发特定平台的二进制文件的需求。&lt;span class=&quot;tgt&quot; data-group=&quot;0-1&quot;&gt;目前，可以简单地从运行的docker容器中调用命令。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt; 要查看当前可用的CLI命令，请在运行的fabric-peer Docker容器中执行以下命令：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
docker run -it hyperledger/fabric-&lt;span&gt;peer bash
# peer chaincode &lt;/span&gt;--help
&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;注意：可使用docker exec -it cli（容器名） bash命令进入cli&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这显示了与下面示例相似的输出：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;Usage:
  peer chaincode [command]

Available Commands:
  &lt;/span&gt;&lt;span&gt;install&lt;/span&gt;     Package the specified chaincode into a deployment spec and save it on the peer&lt;span&gt;'&lt;/span&gt;&lt;span&gt;s path.&lt;/span&gt;
&lt;span&gt;  instantiate Deploy the specified chaincode to the network.
  invoke      Invoke the specified chaincode.
  list        Get the instantiated chaincodes on a channel or installed chaincodes on a peer.
  package     Package the specified chaincode into a deployment spec.
  query       Query using the specified chaincode.
  signpackage Sign the specified chaincode package
  upgrade     Upgrade chaincode.

Flags:
    &lt;/span&gt;--cafile &lt;span&gt;string&lt;/span&gt;      Path to &lt;span&gt;file&lt;/span&gt; containing PEM-encoded trusted certificate(s) &lt;span&gt;for&lt;/span&gt;&lt;span&gt; the ordering endpoint
&lt;/span&gt;-h, --help               help &lt;span&gt;for&lt;/span&gt;&lt;span&gt; chaincode
&lt;/span&gt;-o, --orderer &lt;span&gt;string&lt;/span&gt;&lt;span&gt;     Ordering service endpoint
    &lt;/span&gt;--&lt;span&gt;tls                Use TLS when communicating with the orderer endpoint
    &lt;/span&gt;--transient &lt;span&gt;string&lt;/span&gt;   Transient map of arguments &lt;span&gt;in&lt;/span&gt; JSON encoding
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;全局flags：--logging-level &lt;var&gt;string&lt;/var&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;tgt&quot; data-group=&quot;0-0&quot;&gt;默认的日志记录level和overrides，参见core.&lt;span class=&quot;tgt&quot; data-group=&quot;0-1&quot;&gt;yaml的完整语法。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;tgt&quot; data-group=&quot;0-0&quot;&gt;&lt;span class=&quot;tgt&quot; data-group=&quot;0-1&quot;&gt;&lt;span class=&quot;src&quot; data-group=&quot;0-0&quot;&gt;–test.&lt;span class=&quot;src&quot; data-group=&quot;0-1&quot;&gt;coverprofile string Done (default “coverage.cov”)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;-v, –version&lt;/p&gt;
&lt;p&gt;使用“peer chaincode [command] –help”获取更多关于命令的信息。&lt;/p&gt;
&lt;p&gt;为了方便在脚本化的应用程序中使用，peer命令总是在发生命令失败时生成非零返回代码。&lt;/p&gt;
&lt;p&gt;chaincode命令的例子：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
peer chaincode &lt;span&gt;install&lt;/span&gt; -n mycc -v &lt;span&gt;0&lt;/span&gt; -p path/to/my/chaincode/&lt;span&gt;v0
peer chaincode instantiate &lt;/span&gt;-n mycc -v &lt;span&gt;0&lt;/span&gt; -c &lt;span&gt;'&lt;/span&gt;&lt;span&gt;{&quot;Args&quot;:[&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]}&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; -&lt;span&gt;C mychannel
peer chaincode &lt;/span&gt;&lt;span&gt;install&lt;/span&gt; -n mycc -v &lt;span&gt;1&lt;/span&gt; -p path/to/my/chaincode/&lt;span&gt;v1
peer chaincode upgrade &lt;/span&gt;-n mycc -v &lt;span&gt;1&lt;/span&gt; -c &lt;span&gt;'&lt;/span&gt;&lt;span&gt;{&quot;Args&quot;:[&quot;d&quot;, &quot;e&quot;, &quot;f&quot;]}&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; -&lt;span&gt;C mychannel
peer chaincode query &lt;/span&gt;-C mychannel -n mycc -c &lt;span&gt;'&lt;/span&gt;&lt;span&gt;{&quot;Args&quot;:[&quot;query&quot;,&quot;e&quot;]}&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
peer chaincode invoke &lt;/span&gt;-o orderer.example.com:&lt;span&gt;7050&lt;/span&gt;  --tls --cafile $ORDERER_CA -C mychannel -n mycc -c &lt;span&gt;'&lt;/span&gt;&lt;span&gt;{&quot;Args&quot;:[&quot;invoke&quot;,&quot;a&quot;,&quot;b&quot;,&quot;10&quot;]}&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;系统智能合约（System chaincode）&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;tgt&quot; data-group=&quot;0-0&quot;&gt;系统chaincode具有相同的编程模型，除了它在peer进程中运行，而不是像普通的chaincode那样在一个单独的容器中运行。&lt;span class=&quot;tgt&quot; data-group=&quot;0-1&quot;&gt;因此，系统chaincode被构建到peer的可执行文件中，并且不遵循上面描述的相同的生命周期。&lt;span class=&quot;tgt&quot; data-group=&quot;0-2&quot;&gt;特别是安装、实例化和升级并不适用于系统chaincode。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;tgt&quot; data-group=&quot;0-0&quot;&gt;系统chaincode的目的是为了在peer和chaincode之间减少gRPC的通信成本，并权衡管理的灵活性。&lt;span class=&quot;tgt&quot; data-group=&quot;0-1&quot;&gt;例如，系统chaincode只能用peer二进制进行升级。&lt;span class=&quot;tgt&quot; data-group=&quot;0-2&quot;&gt;它还必须注册一个固定的&lt;a href=&quot;https://github.com/hyperledger/fabric/blob/master/core/scc/importsysccs.go&quot; target=&quot;_blank&quot;&gt;参数集&lt;/a&gt;，并且没有背书策略或背书策略功能。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;tgt&quot; data-group=&quot;0-0&quot;&gt;系统chaincode用于Hyperledger Fabric以实现许多系统行为，使它们可以被系统集成商所取代或修改。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;tgt&quot; data-group=&quot;0-0&quot;&gt;当前的系统chaincode列表：&lt;/span&gt;&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;&lt;span class=&quot;tgt&quot; data-group=&quot;0-0&quot;&gt;LSCC（ Lifecycle system chaincode ）：生命周期系统chaincode处理上面描述的生命周期请求。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&quot;tgt&quot; data-group=&quot;0-0&quot;&gt;CSCC（Configuration system chaincode）：配置系统chaincode在peer端处理channel配置。&lt;span class=&quot;Apple-converted-space&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&quot;tgt&quot; data-group=&quot;0-0&quot;&gt;QSCC（Query system chaincode）：查询系统chaincode提供了分类查询api，例如获取块和事务。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&quot;tgt&quot; data-group=&quot;0-0&quot;&gt;ESCC（Endorsement system chaincode）：背书系统chaincode通过签署事务提案响应来处理支持。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&quot;tgt&quot; data-group=&quot;0-0&quot;&gt;VSCC（Validation system chaincode）：验证系统chaincode处理事务验证，包括检查背书策略和多版本并发控制。&lt;/span&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;span class=&quot;tgt&quot; data-group=&quot;0-0&quot;&gt;&lt;span class=&quot;tgt&quot; data-group=&quot;0-0&quot;&gt;在修改或替换这些系统chaincode时必须注意，特别是LSCC、ESCC和VSCC，因为它们在主事务执行路径中。&lt;span class=&quot;tgt&quot; data-group=&quot;0-1&quot;&gt;值得注意的是，当VSCC在将其提交到账本之前验证一个块，重要的是，channel中的所有peer节点都要计算相同的验证，以避免账本差异（非确定性）。&lt;span class=&quot;tgt&quot; data-group=&quot;0-2&quot;&gt;因此，如果VSCC被修改或替换，就需要特别的处理和维护。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Mon, 05 Feb 2018 06:23:00 +0000</pubDate>
<dc:creator>Aberic</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/aberic/p/8394714.html</dc:identifier>
</item>
<item>
<title>docker挂载NVIDIA显卡运行pytorch - 负赑屃</title>
<link>http://www.cnblogs.com/mar-q/p/8417184.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/mar-q/p/8417184.html</guid>
<description>&lt;p&gt;本文为作者原创，转载请注明出处（http://www.cnblogs.com/mar-q/）by 负赑屃&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;写在前面：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　请参考之前的文章安装好CentOS、NVIDIA相关驱动及软件、docker及加速镜像。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　主机运行环境&lt;/span&gt;&lt;/p&gt;
&lt;div readability=&quot;7.5&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
$ &lt;span&gt;uname&lt;/span&gt; -&lt;span&gt;a
Linux CentOS &lt;/span&gt;&lt;span&gt;3.10&lt;/span&gt;.&lt;span&gt;0&lt;/span&gt;-&lt;span&gt;514.26&lt;/span&gt;.&lt;span&gt;2&lt;/span&gt;.el7.x86_64 #&lt;span&gt;1&lt;/span&gt; SMP Tue Jul &lt;span&gt;4&lt;/span&gt; &lt;span&gt;15&lt;/span&gt;:&lt;span&gt;04&lt;/span&gt;:&lt;span&gt;05&lt;/span&gt; UTC &lt;span&gt;2017&lt;/span&gt; x86_64 x86_64 x86_64 GNU/&lt;span&gt;Linux
$ &lt;/span&gt;&lt;span&gt;cat&lt;/span&gt; /usr/local/cuda/&lt;span&gt;version.txt
CUDA Version &lt;/span&gt;&lt;span&gt;8.0&lt;/span&gt;.&lt;span&gt;61&lt;/span&gt;&lt;span&gt;
$ &lt;/span&gt;&lt;span&gt;cat&lt;/span&gt; /usr/local/cuda/include/cudnn.h | &lt;span&gt;grep&lt;/span&gt; CUDNN_MAJOR -A &lt;span&gt;2&lt;/span&gt;
&lt;span&gt;#define&lt;/span&gt; CUDNN_MAJOR      6
&lt;span&gt;#define&lt;/span&gt; CUDNN_MINOR      0
&lt;span&gt;#define&lt;/span&gt; CUDNN_PATCHLEVEL 21
&lt;span&gt;#define&lt;/span&gt; CUDNN_VERSION    (CUDNN_MAJOR * 1000 + CUDNN_MINOR * 100 + CUDNN_PATCHLEVEL)&lt;span&gt;
#include &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;driver_types.h&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
# NVIDIA 1080ti&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;一、关于GPU的挂载&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;1. 在docker运行时指定device挂载&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　先查看一下有哪些相关设备&lt;/span&gt;&lt;/p&gt;
&lt;div readability=&quot;14.5&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
$ &lt;span&gt;ls&lt;/span&gt; -la /dev | &lt;span&gt;grep&lt;/span&gt;&lt;span&gt; nvidia
crw&lt;/span&gt;-rw-rw-   &lt;span&gt;1&lt;/span&gt; root root    &lt;span&gt;195&lt;/span&gt;,   &lt;span&gt;0&lt;/span&gt; Nov &lt;span&gt;15&lt;/span&gt; &lt;span&gt;13&lt;/span&gt;:&lt;span&gt;41&lt;/span&gt;&lt;span&gt; nvidia0
crw&lt;/span&gt;-rw-rw-   &lt;span&gt;1&lt;/span&gt; root root    &lt;span&gt;195&lt;/span&gt;,   &lt;span&gt;1&lt;/span&gt; Nov &lt;span&gt;15&lt;/span&gt; &lt;span&gt;13&lt;/span&gt;:&lt;span&gt;41&lt;/span&gt;&lt;span&gt; nvidia1
crw&lt;/span&gt;-rw-rw-   &lt;span&gt;1&lt;/span&gt; root root    &lt;span&gt;195&lt;/span&gt;, &lt;span&gt;255&lt;/span&gt; Nov &lt;span&gt;15&lt;/span&gt; &lt;span&gt;13&lt;/span&gt;:&lt;span&gt;41&lt;/span&gt;&lt;span&gt; nvidiactl
crw&lt;/span&gt;-rw-rw-   &lt;span&gt;1&lt;/span&gt; root root    &lt;span&gt;242&lt;/span&gt;,   &lt;span&gt;0&lt;/span&gt; Nov &lt;span&gt;15&lt;/span&gt; &lt;span&gt;13&lt;/span&gt;:&lt;span&gt;41&lt;/span&gt; nvidia-&lt;span&gt;uvm
crw&lt;/span&gt;-rw-rw-   &lt;span&gt;1&lt;/span&gt; root root    &lt;span&gt;242&lt;/span&gt;,   &lt;span&gt;1&lt;/span&gt; Nov &lt;span&gt;15&lt;/span&gt; &lt;span&gt;13&lt;/span&gt;:&lt;span&gt;41&lt;/span&gt; nvidia-uvm-tools
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　电脑上装了两个显卡。我需要运行pytorch，dockerhub中pytorch官方镜像没有gpu支持，所以只能先pull一个anaconda镜像试试，后面可以编排成Dockerfile。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
$ docker run -it -d --&lt;span&gt;rm&lt;/span&gt; --name pytorch -v /home/qiyafei/pytorch:/mnt/home --privileged=&lt;span&gt;true&lt;/span&gt; --device /dev/nvidia-uvm:/dev/nvidia-uvm --device /dev/nvidia1:/dev/nvidia1 --device /dev/nvidiactl:/dev/nvidiactl okwrtdsh/anaconda3 bash
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　okwrtdsh的镜像似乎是针对他们实验室GPU环境的，有点过大了，不过勉强运行一下还是可以的。&lt;/span&gt;&lt;span&gt;在容器内部还需要安装pytorch：&lt;/span&gt;&lt;/p&gt;
&lt;div readability=&quot;6&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
$ conda &lt;span&gt;install&lt;/span&gt; pytorch torchvision -c pytorch
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　这里运行torch成功，但是加载显卡失败了，可能还是因为驱动不匹配的原因吧，&lt;/span&gt;&lt;span&gt;&lt;span&gt;需要重新安装驱动，暂时不做此尝试；&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;二、通过nvidia-docker在docker内使用显卡&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div&gt;&lt;span&gt;&lt;img src=&quot;https://cloud.githubusercontent.com/assets/3028125/12213714/5b208976-b632-11e5-8406-38d379ec46aa.png&quot; alt=&quot;&quot; width=&quot;423&quot; height=&quot;299&quot;/&gt;&lt;/span&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;（1）安装nvidia-docker&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　nvidia-docker其实是docker引擎的一个应用插件，专门面向NVIDIA GPU，因为docker引擎是不支持NVIDIA驱动的，安装插件后可以在用户层上直接使用cuda。具体看上图。这个图很形象，docker引擎的运行机制也表现出来了，就是在系统内核之上通过cgroup和namespace虚拟出一个容器OS的用户空间，我不清楚这是否运行在ring0上，但是cuda和应用确实可以使用了（虚拟化的问题，如果关心此类问题可以了解一些关于docker、kvm等等虚拟化的实现方式，目前是系统类比较火热的话题）&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;　　这里也可以通过添加apt或者yum sourcelist的方式进行安装，但是我没有root权限，而且update容易引起docker重启，如果不是实验室的个人环境不推荐这么做，防止破坏别人正在运行的程序（之前公司一个小伙子就是在阿里云上进行了yum update，结果导致公司部分业务停了一个上午）。&lt;/span&gt;&lt;/p&gt;
&lt;div readability=&quot;6.5&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
$ &lt;span&gt;sudo&lt;/span&gt; rpm -i nvidia-docker-&lt;span&gt;1.0&lt;/span&gt;.&lt;span&gt;1&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;.x86_64.rpm &amp;amp;&amp;amp; &lt;span&gt;rm&lt;/span&gt; nvidia-docker-&lt;span&gt;1.0&lt;/span&gt;.&lt;span&gt;1&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;&lt;span&gt;.x86_64.rpm
$ &lt;/span&gt;&lt;span&gt;sudo&lt;/span&gt; systemctl start nvidia-docker
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;span&gt;（2）容器测试&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　我们还需要NVIDIA官方提供的docker容器nvidia/cuda，里面已经编译安装了CUDA和CUDNN，或者直接run，缺少image的会自动pull。&lt;/span&gt;&lt;/p&gt;
&lt;div readability=&quot;6&quot;&gt;
&lt;div readability=&quot;8&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
$ docker pull nvidia/&lt;span&gt;cuda
$ nvidia&lt;/span&gt;-docker run --&lt;span&gt;rm&lt;/span&gt; nvidia/cuda nvidia-smi
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 　　在容器内测试是可以成功使用nvidia显卡的：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1035124/201802/1035124-20180205131523748-248364087.png&quot; alt=&quot;&quot; width=&quot;436&quot; height=&quot;233&quot;/&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;span&gt;（3）合适的镜像或者自制dockerfile&lt;/span&gt;&lt;/p&gt;
&lt;div&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;合适的镜像：这里推荐Floydhub的pytorch，注意对应的cuda和cudnn版本。&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;div readability=&quot;6.5&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
docker pull floydhub/pytorch:&lt;span&gt;0.3&lt;/span&gt;.&lt;span&gt;0&lt;/span&gt;-gpu.cuda8cudnn6-py3.&lt;span&gt;22&lt;/span&gt;&lt;span&gt;
nvidia&lt;/span&gt;-docker run -ti -d --&lt;span&gt;rm&lt;/span&gt; floydhub/pytorch:&lt;span&gt;0.3&lt;/span&gt;.&lt;span&gt;0&lt;/span&gt;-gpu.cuda8cudnn6-py3.&lt;span&gt;22&lt;/span&gt; bash
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;&lt;span&gt;&lt;span&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1035124/201802/1035124-20180205130848279-571417297.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;&lt;span&gt;&lt;img alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;自制dockerfile&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;span&gt;　　首先，我们需要把要装的东西想清楚：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　1. 基础镜像肯定是NVIDIA官方提供的啦，最省事，不用装cuda和cudnn了；&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　2. vim、git、lrzsz、ssh这些肯定要啦；&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　3. anaconda、pytorch肯定要啦；&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　所以需要准备好国内源source.list，否则安装速度很慢。&lt;/span&gt;&lt;/p&gt;
&lt;div readability=&quot;7.5&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
deb-src http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;archive.ubuntu.com/ubuntu xenial main restricted #Added by software-properties&lt;/span&gt;
deb http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;mirrors.aliyun.com/ubuntu/ xenial main restricted&lt;/span&gt;
deb-src http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;mirrors.aliyun.com/ubuntu/ xenial main restricted multiverse universe #Added by software-properties&lt;/span&gt;
deb http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;mirrors.aliyun.com/ubuntu/ xenial-updates main restricted&lt;/span&gt;
deb-src http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;mirrors.aliyun.com/ubuntu/ xenial-updates main restricted multiverse universe #Added by software-properties&lt;/span&gt;
deb http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;mirrors.aliyun.com/ubuntu/ xenial universe&lt;/span&gt;
deb http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;mirrors.aliyun.com/ubuntu/ xenial-updates universe&lt;/span&gt;
deb http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;mirrors.aliyun.com/ubuntu/ xenial multiverse&lt;/span&gt;
deb http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;mirrors.aliyun.com/ubuntu/ xenial-updates multiverse&lt;/span&gt;
deb http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;mirrors.aliyun.com/ubuntu/ xenial-backports main restricted universe multiverse&lt;/span&gt;
deb-src http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;mirrors.aliyun.com/ubuntu/ xenial-backports main restricted universe multiverse #Added by software-properties&lt;/span&gt;
deb http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;archive.canonical.com/ubuntu xenial partner&lt;/span&gt;
deb-src http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;archive.canonical.com/ubuntu xenial partner&lt;/span&gt;
deb http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;mirrors.aliyun.com/ubuntu/ xenial-security main restricted&lt;/span&gt;
deb-src http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;mirrors.aliyun.com/ubuntu/ xenial-security main restricted multiverse universe #Added by software-properties&lt;/span&gt;
deb http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;mirrors.aliyun.com/ubuntu/ xenial-security universe&lt;/span&gt;
deb http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;mirrors.aliyun.com/ubuntu/ xenial-security multiverse&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div readability=&quot;8&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre readability=&quot;9&quot;&gt;
$ vim Dockerfile&lt;p&gt;FROM nvidia/&lt;span&gt;cuda
LABEL author&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;qyf&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
ENV PYTHONIOENCODING&lt;/span&gt;=utf-&lt;span&gt;8&lt;/span&gt;&lt;span&gt;
RUN &lt;/span&gt;&lt;span&gt;mv&lt;/span&gt; /etc/apt/sources.list /etc/apt/&lt;span&gt;sources.list.bak
ADD $PWD&lt;/span&gt;/sources.list /etc/apt/&lt;span&gt;sources.list
RUN apt&lt;/span&gt;-get update --fix-missing &amp;amp;&amp;amp;&lt;span&gt; \
    apt&lt;/span&gt;-get &lt;span&gt;install&lt;/span&gt; -y vim net-tools curl &lt;span&gt;wget&lt;/span&gt; git &lt;span&gt;bzip2&lt;/span&gt; ca-certificates libglib2.&lt;span&gt;0&lt;/span&gt;-&lt;span&gt;0&lt;/span&gt; libxext6 libsm6 libxrender1 mercurial subversion apt-transport-https software-properties-&lt;span&gt;common
RUN apt&lt;/span&gt;-get &lt;span&gt;install&lt;/span&gt; -y openssh-server -&lt;span&gt;y
RUN &lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;root:passwd&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; |&lt;span&gt; chpasswd
RUN &lt;/span&gt;&lt;span&gt;sed&lt;/span&gt; -i &lt;span&gt;'&lt;/span&gt;&lt;span&gt;s/PermitRootLogin prohibit-password/PermitRootLogin yes/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; /etc/&lt;span&gt;ssh&lt;/span&gt;/&lt;span&gt;sshd_config
RUN &lt;/span&gt;&lt;span&gt;sed&lt;/span&gt; -i &lt;span&gt;'&lt;/span&gt;&lt;span&gt;s/#PasswordAuthentication yes/PasswordAuthentication yes/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; /etc/&lt;span&gt;ssh&lt;/span&gt;/&lt;span&gt;sshd_config
RUN &lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;export PATH=/opt/conda/bin:$PATH&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; &amp;gt; /etc/profile.d/conda.&lt;span&gt;sh&lt;/span&gt; &amp;amp;&amp;amp; &lt;span&gt;wget&lt;/span&gt; --quiet https:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;repo.continuum.io/archive/Anaconda3-5.0.1-Linux-x86_64.sh -O ~/anaconda.sh &amp;amp;&amp;amp; /bin/bash ~/anaconda.sh -b -p /opt/conda &amp;amp;&amp;amp; rm ~/anaconda.sh&lt;/span&gt;
RUN apt-get &lt;span&gt;install&lt;/span&gt; -y &lt;span&gt;grep&lt;/span&gt; &lt;span&gt;sed&lt;/span&gt; dpkg &amp;amp;&amp;amp;&lt;span&gt; \
    TINI_VERSION&lt;/span&gt;=`curl https:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;github.com/krallin/tini/releases/latest | grep -o &quot;/v.*\&quot;&quot; | sed 's:^..\(.*\).$:\1:'` &amp;amp;&amp;amp; \&lt;/span&gt;
    curl -L &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;https://github.com/krallin/tini/releases/download/v${TINI_VERSION}/tini_${TINI_VERSION}.deb&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;; &amp;gt; tini.deb &amp;amp;&amp;amp;&lt;span&gt; \
    dpkg &lt;/span&gt;-i tini.deb &amp;amp;&amp;amp;&lt;span&gt; \
    &lt;/span&gt;&lt;span&gt;rm&lt;/span&gt; tini.deb &amp;amp;&amp;amp;&lt;span&gt; \
    apt&lt;/span&gt;-&lt;span&gt;get clean
ENV PATH &lt;/span&gt;/opt/conda/&lt;span&gt;bin:$PATH
RUN conda &lt;/span&gt;&lt;span&gt;install&lt;/span&gt; pytorch torchvision -c pytorch -&lt;span&gt;y
ENTRYPOINT [ &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/usr/bin/tini&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; ]
CMD [ &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/bin/bash&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; ]
&lt;/p&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　通过docker build构造镜像:&lt;/span&gt;&lt;/p&gt;
&lt;div readability=&quot;6&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
docker build -t pytorch/cuda8 ./
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　运行成功调用cuda。&lt;/span&gt;&lt;/p&gt;
&lt;div&gt;&lt;span&gt;&lt;img alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span&gt;&lt;span&gt; &lt;img src=&quot;https://images2017.cnblogs.com/blog/1035124/201802/1035124-20180205130912623-421307234.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;三、关于一些bug&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　这里有部分debian的配置，我照着dockerhub上anaconda镜像抄的，这里就不再配置了，反正跑起来后有镜像也可以用。系统随后可能会出现错误：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;kernel:unregister_netdevice: waiting for lo to become free. Usage count = 1&lt;/span&gt;&lt;/p&gt;
&lt;div&gt;&lt;span&gt;&lt;span&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1035124/201802/1035124-20180205130937857-949499076.png&quot; alt=&quot;&quot; width=&quot;592&quot; height=&quot;323&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span&gt;&lt;img alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　这是一个Ubuntu的内核错误，截止到到目前为止似乎还没完全解决。&lt;/span&gt;&lt;/p&gt;
&lt;div&gt;&lt;span&gt;&lt;span&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1035124/201802/1035124-20180205130947576-1871492279.png&quot; alt=&quot;&quot; width=&quot;568&quot; height=&quot;153&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span&gt;&lt;img alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span&gt;　　这个小哥给出了一个解决方案，至少他给出的错误原因我是相信的：是由内核的TCP套接字错误引发的。这里我给出一些思考，关于上面的结构图，在显卡上，通过nvidia-docker，docker之上的容器可以使用到底层显卡（驱动显然是在docker之下的），而TCP套接字，我猜测也是这种使用方法，而虚拟出来的dockerOS，应该是没有权限来访问宿主机内核的，至少内核限制了部分权限。这位小哥给出了测试内核，如果有兴趣可以去帮他测试一下：&lt;a href=&quot;https://bugs.launchpad.net/ubuntu/+source/linux/+bug/1711407/comments/46&quot;&gt;https://bugs.launchpad.net/ubuntu/+source/linux/+bug/1711407/comments/46&lt;/a&gt;。&lt;/span&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;　　&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Mon, 05 Feb 2018 05:25:00 +0000</pubDate>
<dc:creator>负赑屃</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/mar-q/p/8417184.html</dc:identifier>
</item>
<item>
<title>一步一步从原理跟我学邮件收取及发送 9.多行结果与socket的阻塞 - clq</title>
<link>http://www.cnblogs.com/-clq/p/8417136.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/-clq/p/8417136.html</guid>
<description>&lt;p&gt;    前几篇的文章发表后，有网友留言说没有涉及到阻塞的问题吗？在 socket 的编程当中，这确实是个很重要的问题。结合目前我们文章的内容进度，我们来看看为什么说阻塞概念很重要。&lt;/p&gt;&lt;p&gt;    接着上篇的内容，当我们发送了 ehlo 命令之后就要接收服务器的返回了。这个地方是&lt;strong&gt;一个很容易出错的位置&lt;/strong&gt;，一般的网络命令都是发送一条命令接收一条回复，这很容易让初学好者以为每个命令都是一行内容，进而在代码中进行了错误的处理。而&lt;strong&gt;实际上无论是命令还是对命令的应答都是有多行的情况&lt;/strong&gt;，如果对 socket 机制不了解，那就会说：那就读取完所有的行呗。但&lt;span&gt;&lt;strong&gt;在实际情况中“读取所有的行”是不可能完成的任务&lt;/strong&gt;&lt;/span&gt;，因为我们前面已经说过了 socket 实际上是字节流，并没有一个行结束或者一个数据包结束了的概念（当然底层实现会有 ip 包）。所以在网络编程中有一个重要的事情，那就是怎样定义一个数据包算是结束了？这是每个通讯协议都要解决的问题（我个人认为是每个协议中最为重要的内容），在每个通讯协议中做法都不同，而且方法那是五花八门，用现在的话来说成是脑洞大开都不为过。我印象最深的是前几个月写的一个公司的专有 http 包转发服务器时意外发现的一个 http 包的结束表示方法，很惭愧地说，我接触 http 协议很多年了，甚至写过好几个真正能用的 http 服务器实现，却不知道这个方法 ... 这也不能怪我，加上这个方法我都数不清 http 到底有多少种表示一个包结束的方式了(是 http 中的 Transfer-Encoding chunked，以后有机会再给大家详细介绍)。&lt;/p&gt;&lt;p&gt;    回到 smtp 协议上来，前面的文章中其实我们已经提到过 ehlo 命令的响应是怎样处理的。它的回应类似于这样：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;250&lt;/span&gt;-&lt;span&gt;Eemail server
&lt;/span&gt;&lt;span&gt;250&lt;/span&gt; AUTH LOGIN
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;    在 rfc 文档中就有说明，读取到有 250 而且没跟的 &quot;-&quot; 符号时就可以了。如果我们没有正确处理一直读取下去，那么就会触发 socket 中一个著名的问题：阻塞。就是程序整个不动弹了，除了把它的进程杀死以外没有别的任何办法。可以用以下 java 代码模拟(基于上一篇的代码)：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
        &lt;span&gt;//&lt;/span&gt;&lt;span&gt;发送一个命令
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;SendLine(&quot;EHLO&quot;); &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;163 这样是不行的,一定要有 domain
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;SendLine(&quot;EHLO&quot; + &quot; &quot; + domain); &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;domain 要求其实来自 HELO 命令&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;HELO &amp;lt;SP&amp;gt; &amp;lt;domain&amp;gt; &amp;lt;CRLF&amp;gt;
        
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;收取一行&lt;/span&gt;
        line =&lt;span&gt; RecvLine();
        System.out.println(&lt;/span&gt;&quot;recv:&quot; +&lt;span&gt; line);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;收取一行&lt;/span&gt;
        line =&lt;span&gt; RecvLine();
        System.out.println(&lt;/span&gt;&quot;recv:&quot; + line);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;    这里我们设想，先尝试读取 100 行数据，当没有行内容的情况下就提前跳出，想是服务器的响应内容读取完了。这个思想是没问题的，可惜现实下是行不通的。原因就是 socket 的读取函数默认情况下会一直等待，一直到有数据为止，如果一直没有数据呢？那就一直在等，&lt;strong&gt;整个程序就停止响应了&lt;/strong&gt;，除非对方主动把连接给断开了，或者是网络断线了。这就是为什么安卓程序现在不允许在主线程中直接调用 socket 的最主要原因：因为很多初学者处理不好这个问题，常常会让程序卡死，那干脆就强制不让他们放在主线程了。&lt;/p&gt;&lt;p&gt;    要解决这个问题，java 中只需要在连接后多加一个函数调用：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
            socket = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Socket(host, port);
            socket.setSoTimeout(&lt;/span&gt;10000);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置超时,单位为毫秒&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;    以原始 socket 方式处理的话，传统上则有好几种做法：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
1&lt;span&gt;.是设置 socket 的超时；
&lt;/span&gt;2&lt;span&gt;.接收前使用 select 函数判断是否可以收发数据；
&lt;/span&gt;3&lt;span&gt;.使用非阻塞的 socket；
&lt;/span&gt;4.使用线程。
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;    其中第一种方法最简单，连接后简单的调用一下相关函数就一了百了（上面的 java 代码就是如此），不过有些简化版本的 socket 环境不一定支持；而 select 函数则最传统，可以在决大多数环境下使用；前两种都要配合线程使用才好，而非阻塞 socket 的方式则完全不会阻塞主线程，不过编程的复杂度会直线上升级，不适合初学者。所以我们这里简单地使用 select 函数来完成超时判断，实现代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;是否可读取,时间&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;超时返回,单位为秒&lt;/span&gt;
&lt;span&gt;int&lt;/span&gt; SelectRead_Timeout(SOCKET so, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; sec)
{
  fd_set fd_read; &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;fd_read:TFDSet;&lt;/span&gt;
  &lt;span&gt;struct&lt;/span&gt; timeval timeout; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; : TTimeVal;&lt;/span&gt;

  &lt;span&gt;int&lt;/span&gt; Result = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;

  FD_ZERO( &lt;/span&gt;&amp;amp;&lt;span&gt;fd_read );
  FD_SET(so, &lt;/span&gt;&amp;amp;fd_read ); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;个数受限于 FD_SETSIZE

  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;timeout.tv_sec = 0; &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;秒&lt;/span&gt;
  timeout.tv_sec = sec; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;秒

  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;linux 第一个参数一定要赋值&lt;/span&gt;
  &lt;span&gt;if&lt;/span&gt; (_select( so+&lt;span&gt;1&lt;/span&gt;, &amp;amp;fd_read, NULL, NULL, &amp;amp;timeout ) &amp;gt; &lt;span&gt;0&lt;/span&gt;) &lt;span&gt;//&lt;/span&gt;&lt;span&gt;至少有1个等待Accept的connection&lt;/span&gt;
    Result = &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
    

  &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; Result;    

}&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这里要注意的是 &lt;span&gt;windows 的写法和 linux 的写法是小有差异&lt;/span&gt;，大家一定要小心。&lt;/p&gt;&lt;p&gt;顺便介绍一下其他几种方法的实现吧。&lt;/p&gt;&lt;p&gt;前面 java 代码的超时本质就是用 setsockopt 来实现的，对于 C 语言来说类似于这样：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置发送超时&lt;/span&gt;
setsockopt(socket，SOL_SOCKET,SO_SNDTIMEO， (&lt;span&gt;char&lt;/span&gt; *)&amp;amp;timeout,&lt;span&gt;sizeof&lt;/span&gt;(&lt;span&gt;struct&lt;/span&gt;&lt;span&gt; timeval));
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置接收超时&lt;/span&gt;
setsockopt(socket，SOL_SOCKET,SO_RCVTIMEO， (&lt;span&gt;char&lt;/span&gt; *)&amp;amp;timeout,&lt;span&gt;sizeof&lt;/span&gt;(&lt;span&gt;struct&lt;/span&gt; timeval));
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;br/&gt;其 jdk 实现代码为:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     *  Enable/disable SO_TIMEOUT with the specified timeout, in
     *  milliseconds.  With this option set to a non-zero timeout,
     *  a read() call on the InputStream associated with this Socket
     *  will block for only this amount of time.  If the timeout expires,
     *  a &amp;lt;B&amp;gt;java.net.SocketTimeoutException&amp;lt;/B&amp;gt; is raised, though the
     *  Socket is still valid. The option &amp;lt;B&amp;gt;must&amp;lt;/B&amp;gt; be enabled
     *  prior to entering the blocking operation to have effect. The
     *  timeout must be &amp;gt; 0.
     *  A timeout of zero is interpreted as an infinite timeout.
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; timeout the specified timeout, in milliseconds.
     * &lt;/span&gt;&lt;span&gt;@exception&lt;/span&gt;&lt;span&gt; SocketException if there is an error
     * in the underlying protocol, such as a TCP error.
     * &lt;/span&gt;&lt;span&gt;@since&lt;/span&gt;&lt;span&gt;   JDK 1.1
     * &lt;/span&gt;&lt;span&gt;@see&lt;/span&gt;&lt;span&gt; #getSoTimeout()
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;synchronized&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; setSoTimeout(&lt;span&gt;int&lt;/span&gt; timeout) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; SocketException {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (isClosed())
            &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; SocketException(&quot;Socket is closed&quot;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (timeout &amp;lt; 0&lt;span&gt;)
          &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; IllegalArgumentException(&quot;timeout can't be negative&quot;&lt;span&gt;);

        getImpl().setOption(SocketOptions.SO_TIMEOUT, &lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Integer(timeout));
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;br/&gt;多线程的相关文章汗牛充栋，我们就不重复了。&lt;/p&gt;&lt;p&gt;而非阻塞的 socket 方法则类似于这样：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
ioctlsocket(so, FIONBIO, &amp;amp;arg);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;    我又不得不说，我很惭愧非阻塞的 socket 概念我是工作好几年以后才听说的。准确的说是毕业不久后就知道了，不过一直以为只是 windows 下的一种扩展，因为 windows 对 socket 的扩展很多所以也并没有多在意。后来到了一家公司面试，说他们主要用非阻塞的 socket 时才知道还能实用...... 在以后的工作当中渐渐的发现，有些工作环境下没有非阻塞 socket 还真不好实现。所以现在非阻塞的 socket 基本上也是各个平台都支持了的。不过非阻塞的实现难度基本上是直接上升，我们这里暂时就不给出示例了。这种方法的特点是 socket 被设置为非阻塞后，所有的接收和发送都会立即返回，不管是否成功。&lt;/p&gt;&lt;p&gt;根据以上思想修改后的 C 语言代码多了1个函数:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;读取多行结果&lt;/span&gt;
lstring * RecvMCmd(SOCKET so, &lt;span&gt;struct&lt;/span&gt; MemPool * pool, lstring **&lt;span&gt; _buf)
{
    &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; index = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; count = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
    lstring &lt;/span&gt;*&lt;span&gt; rs;
    &lt;/span&gt;&lt;span&gt;char&lt;/span&gt; c4 = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;\0&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;判断第4个字符&lt;/span&gt;
&lt;span&gt;    
    lstring &lt;/span&gt;* mline = NewString(&lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;, pool);

    
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (i=&lt;span&gt;0&lt;/span&gt;; i&amp;lt;&lt;span&gt;50&lt;/span&gt;; i++&lt;span&gt;)
    {
        rs &lt;/span&gt;= RecvLine(so, pool, _buf); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;只收取一行&lt;/span&gt;
&lt;span&gt;        
        mline&lt;/span&gt;-&amp;gt;&lt;span&gt;Append(mline, rs);
        LString_AppendConst(mline, &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;\r\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
        
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;printf(&quot;\r\nRecvMCmd:%s\r\n&quot;, rs-&amp;gt;str);&lt;/span&gt;
            
        &lt;span&gt;if&lt;/span&gt; (rs-&amp;gt;len&amp;lt;&lt;span&gt;4&lt;/span&gt;) &lt;span&gt;break&lt;/span&gt;; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;长度要足够&lt;/span&gt;
        c4 = rs-&amp;gt;str[&lt;span&gt;4&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;]; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;第4个字符
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;if ('\x20' == c4) break; &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;&quot;\xhh&quot; 任意字符 二位十六进制&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;其实现在的转义符已经扩展得相当复杂，不建议用这个表示空格&lt;/span&gt;
        &lt;span&gt;if&lt;/span&gt; (&lt;span&gt;'&lt;/span&gt; &lt;span&gt;'&lt;/span&gt; == c4) &lt;span&gt;break&lt;/span&gt;; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;第4个字符是空格就表示读取完了&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;也可以判断 &quot;250[空格]&quot;&lt;/span&gt;
&lt;span&gt;    
        
    }&lt;/span&gt;&lt;span&gt;//
&lt;/span&gt;
    &lt;span&gt;return&lt;/span&gt;&lt;span&gt; mline;
}&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;另外 RecvLine 函数中也多了几行内容:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
        canread = SelectRead_Timeout(so, &lt;span&gt;3&lt;/span&gt;);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;是否可读取,时间&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;超时返回,单位为秒&lt;/span&gt;
        &lt;span&gt;if&lt;/span&gt; (&lt;span&gt;0&lt;/span&gt; == canread) &lt;span&gt;break&lt;/span&gt;;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;    具体代码有点多，仿照才惯例，请大家到以下 github 地址下载吧:&lt;br/&gt;&lt;a href=&quot;https://github.com/clqsrc/c_lib_lstring/tree/master/email_book/book_9&quot; target=&quot;_blank&quot;&gt;https://github.com/clqsrc/c_lib_lstring/tree/master/email_book/book_9&lt;/a&gt;&lt;/p&gt;&lt;p&gt;    另外，虽然这个系列的文章说的是邮件发送和收取，不过其中涉及到的知识都会应用于其他的网络通讯协议，了解了邮件相关的，象什么 ftp、http 等协议其实也基本上贯通了。其实我个人也是打算将自己所了解的网络编程相关的知识都放到这系列的文章中来，因为象邮件涉及到的 base64、mime 编码这样的内容其实都是在其他协议中广泛使用的。大家看完这系列的文章后写个 http 程序也完全不是问题。所以请大家多多关注吧！&lt;/p&gt;
&lt;p&gt;    有了前面这几篇的文章和代码,大家其实已经可以用程序写出完整的邮件发送代码了.这和真实的邮件客户闻风而动发送过程也差不多了(还差的主要是两点: base64 编码和 mime 过程,我们会在后面的文章详细说明).&lt;br/&gt;--------------------------------------------------&lt;/p&gt;
&lt;p&gt;版权声明:&lt;/p&gt;
&lt;p&gt;本系列文章已授权百家号 &quot;clq的程序员学前班&quot; . 文章编排上略有差异. 百家号目前对文章中的代码转换得很厉害,因此推荐大家在博客园这边查看原始的代码.&lt;/p&gt;

</description>
<pubDate>Mon, 05 Feb 2018 05:00:00 +0000</pubDate>
<dc:creator>clq</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/-clq/p/8417136.html</dc:identifier>
</item>
<item>
<title>如何规避适配风险？以《乱世王者》为例，探秘手游兼容性测试之路 - 云加社区</title>
<link>http://www.cnblogs.com/qcloud1001/p/8416899.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/qcloud1001/p/8416899.html</guid>
<description>&lt;p&gt;欢迎大家前往&lt;a href=&quot;https://cloud.tencent.com/developer&quot; target=&quot;_blank&quot;&gt;云+社区&lt;/a&gt;，获取更多腾讯海量技术实践干货哦~&lt;/p&gt;
&lt;blockquote readability=&quot;6.1393442622951&quot;&gt;
&lt;p&gt;作者：Lane Li，腾讯适配测试负责人、WeTest专家兼容测试负责人&lt;/p&gt;
&lt;p&gt;由 &lt;a href=&quot;https://cloud.tencent.com/developer/user/1024461/activities&quot; target=&quot;_blank&quot;&gt;腾讯游戏云&lt;/a&gt; 发布在云+社区&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;项目背景&lt;/h2&gt;
&lt;p&gt;《乱世王者》是一款历史架空背景的战争策略手游，最大程度的还原策略游戏的精髓的同时加入了RPG元素。作为腾讯首款战争策略手游，无论游戏性以及品质都达到了一个令人满意的程度，在正式上线一周内便成功达到iOS畅销排行前三的佳绩。传统的策略游戏中融入RPG、主播引导、AR互动等模式，将其完美的糅合在一起，同时三国名将悉数登场、名城复古重现以及各个经典战役元素，使得游戏策略性、代入感和可玩性都更加吸引人。《乱世王者》在同类SLG游戏中位于佼佼者，它的成功取决于紧密的游戏逻辑、精细的游戏画面以及优秀的游戏品质。&lt;/p&gt;
&lt;p&gt;游戏品质离不开质量控制，《乱世王者》也一样，游戏的每个部分都进行专业测试，在兼容性测试的部分，为了保证兼容性方面的质量，从轻测版本到运营上线做了数十次全量兼容测试，目的就是保证产品在兼容性方面的质量。本文就将阐述腾讯WeTest如何为该游戏进行兼容性测试。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ask.qcloudimg.com/draft/1024461/p9nx0a12mg.jpg?imageView2/0/w/1620&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;测试过程&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;特殊机型纳入测试范围&lt;/strong&gt;：除了正常的按照腾讯大数据平台排名选取的Android TOP100和iOS 全机型泛覆盖之外，还加入了新上市的热门机型，如三星 S8系列以及苹果的120帧数iPad Pro系列。从使用人群和机型热度方面入手，扩大硬件的覆盖范围。三星S8是属于大分辨率机型，此前市场上该分辨率机型较少，基于多年测试手游兼容性的经验，我们认为这种特殊的分辨率可能会导致很多游戏产生兼容性问题因此在正常的机型列表之外，特别加入S8的测试，例如S8系列手机上高分辨率导致的UI显示不全以及画面超框的问题。在游戏上线前，提前修复可能产生的兼容问题，保障产品质量。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ask.qcloudimg.com/draft/1024461/wmmeehig6t.png?imageView2/0/w/1620&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;游戏功能覆盖策略&lt;/strong&gt;：丰富的游戏内容带来的便是庞大的测试对象，随着内容不断丰富和完善，只能针对性的制定个性化的用例，进行某一模块及机型的测试，从游戏功能部分进行拆分，例如：游戏中九鼎之战、联盟神兽系统、名城争夺战等游戏特色之处进行分模块话测试，更是将界面UI、社交功能如好友、分享等进行分别测试，将兼容性测试化整为零，使得测试覆盖面更加完善。&lt;/p&gt;
&lt;div class=&quot;table-wrapper&quot;&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1112679/201802/1112679-20180205113945373-1313351340.png&quot; alt=&quot;&quot;/&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;系统版本&lt;/strong&gt;：系统版本不兼容导致游戏问题影响比较致命，一般是无法安装或者无法运行，针对这个现象兼容性测试中心专门配有低系统版本以及最新发布的系统版本机型号，低版本例如iOS 6.X系统、安卓Android 4.X系统，新发布系统如iOS 11beta、Android 8.0。&lt;/p&gt;
&lt;p&gt;在iOS 11系统正式版本还没有上线之前，兼容性测试中心已经将手机系统提前升至iOS 11 beta版并投入到测试中，提前将iOS11.0系统在游戏中所遇到兼容的问题如横屏不匹配、话音不同步等反馈给项目组，进行优化调整修复。以便iOS 11系统上线后，&lt;strong&gt;保障&lt;/strong&gt;用户对游戏的体验。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ask.qcloudimg.com/draft/1024461/ktms18jr1m.jpg?imageView2/0/w/1620&quot; alt=&quot;&quot;/&gt;iOS 11（图片来自网络）&lt;/p&gt;
&lt;p&gt;除了iOS 11系统，还有google新推出的Android 8.0系统，目前只有小部分机型才可以升级安卓8.0系统，但是，这些小部分机型也在兼容测试中心的测试机型列表上，足以看出兼容性测试为用户的游戏体验创造了良好的环境，规避了用户体验差的风险。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ask.qcloudimg.com/draft/1024461/v5v7hay1t9.png?imageView2/0/w/1620&quot; alt=&quot;&quot;/&gt;Android 8.0（奥利奥…图片来自网络）&lt;/p&gt;
&lt;h2&gt;兼容性典型问题&lt;/h2&gt;
&lt;p&gt;经历了多个版本测试后，兼容性的问题基本都以及得到了修复，较明显且通用的问题如下：&lt;/p&gt;
&lt;p&gt;1、&lt;strong&gt;虚拟键盘机型问题&lt;/strong&gt;。在虚拟键盘关闭后，游戏不能自适应恢复屏幕画面。导致虚拟键盘收起位置被空白占据，整个画面上移压缩引起画面UI显示异常&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ask.qcloudimg.com/draft/1024461/o016e5tpw3.png?imageView2/0/w/1620&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;2、&lt;strong&gt;游戏特有的AR系统兼容问题&lt;/strong&gt;。小部分机型出现背景花屏且AR无法定位到活动人物，导致部分用户无法参与该活动。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ask.qcloudimg.com/draft/1024461/zewl3vegmv.png?imageView2/0/w/1620&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;3 、&lt;strong&gt;低配机型的性能问题&lt;/strong&gt;。尽管游戏容量较大，在运行时候需要的性能资源还是有一定要求，但都能在测试机型上正常进行游戏，部分1G内存机型会出现切换后台时被Android系统优先前台程序模式将进程终止，由于是Android系统优化自身的一个机制，所以也是大部分大型游戏在低配机型上难以避免的情况。&lt;/p&gt;
&lt;h2&gt;最终效果&lt;/h2&gt;
&lt;p&gt;在项目测试阶段，腾讯WeTest累积为《乱世王者》挖掘出了171个兼容性问题，其中102个严重及以上问题，将APK Crash、无响应、UI问题等揭露出来，提前进行修复或对问题进行评估，规避了适配风险，为游戏正式开启不删档运营，为用户良好的游戏环境提供了坚实的支持和保障，唯兼容性测试不可或缺也。&lt;/p&gt;
&lt;p&gt;测试服务WeTest已正式登陆腾讯云，为广大游戏厂商开发者提供服务，详细信息可浏览：&lt;a href=&quot;https://cloud.tencent.com/product/MGCT?idx=3&quot; target=&quot;_blank&quot;&gt;https://cloud.tencent.com/product/MGCT?idx=3&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;相关阅读&lt;/h2&gt;
&lt;p class=&quot;col-article-title&quot;&gt;&lt;a href=&quot;https://cloud.tencent.com/developer/article/1029932&quot; target=&quot;_blank&quot;&gt;大数据产品-腾讯信鸽之手游流失预测&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;col-article-title&quot;&gt;&lt;a href=&quot;https://cloud.tencent.com/developer/article/1004458&quot; target=&quot;_blank&quot;&gt;腾讯手游如何提早揭露游戏外挂风险？&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;col-article-title&quot;&gt;&lt;a href=&quot;https://cloud.tencent.com/developer/article/1005891&quot; target=&quot;_blank&quot;&gt;为测试赋能，腾讯 WeTest 探索手游 AI 自动化测试之路&lt;/a&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;p class=&quot;col-article-title&quot;&gt;此文已由作者授权腾讯云技术社区发布，转载请注明&lt;a href=&quot;https://cloud.tencent.com/developer/article/1036070&quot; target=&quot;_blank&quot;&gt;文章出处&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Mon, 05 Feb 2018 03:38:00 +0000</pubDate>
<dc:creator>云加社区</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/qcloud1001/p/8416899.html</dc:identifier>
</item>
<item>
<title>Django 部署到Nginx - 金色旭光</title>
<link>http://www.cnblogs.com/goldsunshine/p/8405310.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/goldsunshine/p/8405310.html</guid>
<description>&lt;p&gt;&lt;span&gt;在网上搜了很多篇Django+uwsgi+Nginx的部署文章，忙了一下午头昏脑胀，最终完成了部署。部署文章流程讲解都很好，但在细节上或许缺乏一些注意力，导致我多篇文章来回切换在字里行间寻找蛛丝马迹。既然我完成了部署，那我何不写下自己的流程和心得，让后来人有一些参考？&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;原理&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Django+uwsgi+Nginx的工作模式如下图所示，三个服务各司其职，分别为：&lt;/span&gt;&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;&lt;span&gt;Nginx负责接收浏览器的连接，静态文件Nginx能够自己处理，有诸如查询数据库，判断输入数据等，调用uwsgi。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;uwsgi为web网关服务网关接口，起到桥梁的作用，连接Django应用和Nginx。对于Nginx的调用，会发回给Django应用。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;Django实际的生产者，处理业务逻辑，读写数据库，流程判断等，实现网站具体的功能。&lt;/span&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1060878/201802/1060878-20180205104731466-1117655284.png&quot; alt=&quot;&quot; width=&quot;563&quot; height=&quot;402&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;部署流程&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;一、完成的Django项目&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;首先，要有一个完成的Django项目，通过浏览器能打开。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; 在我的服务器上有一个tutotial的Django项目，是个博客的学习项目。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1060878/201802/1060878-20180202142209640-1540591093.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; 使用python manager.py runserver 0.0.0.0:8000能够运行。通过浏览器访问是正常的。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1060878/201802/1060878-20180205105421732-773864168.png&quot; alt=&quot;&quot; width=&quot;703&quot; height=&quot;460&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt; 二、安装uwsgi并配置&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;2.1 安装uswgi。&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;使用pip工具安装uswgi，pip install  uswgi&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1060878/201802/1060878-20180202144525125-1443922292.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;使用一个测试程序来测试uswgi能否正常运行。新建一个test.py，内容如下。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;test.py&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1060878/201802/1060878-20180202144558093-460856575.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;使用命令：uwsgi --http  :8002 --wsgi-file test.py，开启一个uswgi的服务。--http指访问端口为8002，--wsgi-file 指uwsgi的请求处理函数为test.py。如下图所示，为开启之后正常的输出项&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2017.cnblogs.com/blog/1060878/201802/1060878-20180205111528123-386560395.png&quot; alt=&quot;&quot; width=&quot;691&quot; height=&quot;408&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;通过浏览器能够访问到该服务。当访问端口8002时，处理函数为test.py中的application，返回一个text，格式为html，内容是“hello world”。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1060878/201802/1060878-20180205111441810-1982602956.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;2.2 配置uswgi文件&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;使用uswgi作为nginx和django之间的搬运工，要将服务长久化就必须写一个配置文件。如下配置文件,路径在django主目录，是对上一步骤的命令行中命令的文件化。其中我们熟悉的配置项：&lt;/span&gt;&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;&lt;span&gt;对外端口  http:9000，指定服务的开启端口&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;wsgi-flie   tutorial/wsgi.py 指定请求的处理文件，在django项目中自动创建的文件。位于tutorial/tutorial/wsgi.py&lt;/span&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;span&gt;除此之外还有：&lt;/span&gt;&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;&lt;span&gt;chdir django的主目录&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;socket 和nginx交互的端口。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;daemonize 让程序后台运行。默认开启程序时如上图中会在终端中输出连接信息，开启该项配置关闭输出信息。&lt;/span&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;span&gt;uwsgi起到一个桥梁的作用，具体体现在：wsgi-file连接django项目，socket连接Nginx。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;uwsgi.ini&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;[uwsgi]
# 对外提供 http 服务的端口
http &lt;/span&gt;= :&lt;span&gt;9000&lt;/span&gt;&lt;span&gt;

#the local unix socket file than commnuincate to Nginx   用于和 nginx 进行数据交互的端口
socket &lt;/span&gt;= &lt;span&gt;127.0&lt;/span&gt;.&lt;span&gt;0.1&lt;/span&gt;:&lt;span&gt;8001&lt;/span&gt;&lt;span&gt;

# the &lt;/span&gt;&lt;span&gt;base&lt;/span&gt;&lt;span&gt; directory (full path)  django 程序的主目录
chdir &lt;/span&gt;= /home/ccf/code/django_learn/&lt;span&gt;tutorial

# Django&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;s wsgi file&lt;/span&gt;
wsgi-file = tutorial/&lt;span&gt;wsgi.py

# maximum number of worker processes
processes &lt;/span&gt;= &lt;span&gt;4&lt;/span&gt;&lt;span&gt;

#thread numbers startched &lt;/span&gt;&lt;span&gt;in&lt;/span&gt;&lt;span&gt; each worker process
threads &lt;/span&gt;= &lt;span&gt;2&lt;/span&gt;&lt;span&gt;

#monitor uwsgi status  通过该端口可以监控 uwsgi 的负载情况
stats &lt;/span&gt;= &lt;span&gt;127.0&lt;/span&gt;.&lt;span&gt;0.1&lt;/span&gt;:&lt;span&gt;9191&lt;/span&gt;&lt;span&gt;


# clear environment on exit
vacuum          &lt;/span&gt;= &lt;span&gt;true&lt;/span&gt;&lt;span&gt;
&lt;br/&gt;# 后台运行,并输出日志
daemonize &lt;/span&gt;= /&lt;span&gt;var&lt;/span&gt;/log/uwsgi.log
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;2.3 运行uwsgi&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;使用uwsgi可执行文件，载入uwsgi.ini配置文件。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1060878/201802/1060878-20180205095137685-1209493735.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1060878/201802/1060878-20180205095218982-1429582584.png&quot; alt=&quot;&quot; width=&quot;699&quot; height=&quot;162&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;当程序运行之后，有两个端口可以访问到：&lt;/span&gt;&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;&lt;span&gt;http：9000 能够通过端口9000访问&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;socket 预留给Nginx访问。&lt;/span&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;span&gt;如下使用9000端口，访问到django的项目。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2017.cnblogs.com/blog/1060878/201802/1060878-20180202145930984-656663019.png&quot; alt=&quot;&quot; width=&quot;693&quot; height=&quot;443&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;三、安装Nginx服务器&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;3.1 安装Nginx&lt;/span&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;使用apt-get install nginx,一键安装nginx。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2017.cnblogs.com/blog/1060878/201802/1060878-20180202150134968-384044096.png&quot; alt=&quot;&quot; width=&quot;1020&quot; height=&quot;416&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;3.2 配置nginx&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;上面的配置中，uswgi已经连接到django，大桥的一端已经通车，剩下的就nginx和uwsgi合龙。nginx的配置项路径为：/etc/nginx/nginx.conf。如下是nginx的完整配置文件，修改如下蓝色字体。在http的配置项中增加了一个server配置项，该server就是连接uwsgi服务的配置。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;/etc/nginx/nginx.conf&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;strong&gt;&lt;span&gt;&lt;span&gt;user root;&lt;/span&gt;
worker_processes auto;
pid &lt;/span&gt;/run/&lt;span&gt;nginx.pid;

events {&lt;/span&gt;
    worker_connections &lt;span&gt;768&lt;/span&gt;;
    # multi_accept on;&lt;span&gt;
}

http {

    ##
    # Basic Settings
    ##

    sendfile on;
    tcp_nopush on;
    tcp_nodelay&lt;/span&gt; on;&lt;span&gt;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    # server_tokens off;

    # server_names_hash_bucket_size 64;&lt;/span&gt;
    # server_name_in_redirect off;&lt;span&gt;

    include &lt;/span&gt;/etc/nginx/&lt;span&gt;mime.types;
    default_type application&lt;/span&gt;/octet-&lt;span&gt;stream;

    ##
    # SSL Settings
    ##&lt;/span&gt;
&lt;span&gt;
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2; # Dropping SSLv3, ref: POODLE&lt;/span&gt;
    ssl_prefer_server_ciphers on;

    ##
    # Logging Settings
    ##

  &lt;span&gt;  access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log;&lt;/span&gt;&lt;span&gt;

    ##
    # Gzip Settings
    ##&lt;/span&gt;

    gzip on;
    gzip_disable &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;msie6&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;;

    # gzip_vary on;
    # gzip_proxied any;
    # gzip_comp_level &lt;span&gt;6&lt;/span&gt;;
    # gzip_buffers &lt;span&gt;16&lt;/span&gt; 8k;
    # gzip_http_version &lt;span&gt;1.1&lt;/span&gt;;&lt;span&gt;
    # gzip_types text&lt;/span&gt;/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/&lt;span&gt;javascript;

    ##
    # Virtual Host Configs
    ##
&lt;/span&gt;&lt;span&gt;
    include /etc/nginx/conf.d/*&lt;/span&gt;&lt;span&gt;&lt;span&gt;.conf;&lt;/span&gt;
   &lt;span&gt; include /etc/nginx/sites-enabled/*;
&lt;span&gt;&lt;span&gt;server {
        #这里是访问时用到的端口
        listen       8000;
        server_name  127.0.0.1;
        charset UTF-8;
        #这块存让日志文件
        access_log  /var/log/nginx/SchoolBuy_access.log;
        error_log   /var/log/nginx/SchoolBuy_error.log;
        client_max_body_size 75M;
        location / {&lt;br/&gt;#一定要有该配置项
            include uwsgi_params;
            #同uwsgi内容，连接uwsgi的socket。
            uwsgi_pass 127.0.0.1:8001;
            #链接超时时间
            uwsgi_read_timeout 30;
        }

          location /static/ {
               autoindex on;
               #这里的路径一定要到达静态文件的文件夹。即collectedstatic/,重点在最后的横杠。不然会报错
               alias /home/ccf/code/django_learn/tutorial/collectedstatic/; 
               }

          location /media/ {
                  autoindex on;
                alias /home/ccf/code/django_learn/tutorial/media/;
          }
&lt;/span&gt;}
}

&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;#mail {
#    # See sample authentication script at:
&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;#    #&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;http://wiki.nginx.org/ImapAuthenticateWithApachePhpScript&lt;/span&gt;
# 
#    # auth_http localhost/auth.php;
#    # pop3_capabilities &quot;TOP&quot; &quot;USER&quot;;
#    # imap_capabilities &quot;IMAP4rev1&quot; &quot;UIDPLUS&quot;;
# 
#    server {
#        listen     8088;
#        protocol   pop3;
#        proxy      on;
#    }
# 
#    server {
#        listen     localhost:143;
#        protocol   imap;
#        proxy      on;
#    }
#}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;listen                                      nginx监听的端口&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;include uwsgi_params           必填项&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;uwsgi_pass 127.0.0.1:8001  连接uwsgi的socket的端口。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;其中稍难理解的是&lt;/span&gt;&lt;span&gt;&lt;span&gt;location/staic 和 location/media。简单来讲，在一个完整的django项目中，为了便于django发布应用，就是部署到web服务器，会将所有的静态文件和图形图像文件放在一个指定的文件夹中，这样Nginx收到请求之后就不用再去询问django，而是直接去指定的静态文件夹中获取。该方法极大的增加了并发的数量。static和media就是django的两个静态文件夹，在我的环境中如下：&lt;/span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1060878/201802/1060878-20180205102259982-1009088639.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;media文件根据django项目而定是否有，如果没有collectedstatic文件夹要执行如下两步：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;1、配置&lt;/span&gt;setting.py文件，添加STATIC_ROOT配置项，指定静态文件的收集文件夹当前路径下的collectedstatic/，当前路径指django主项目路径。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1060878/201802/1060878-20180205130839388-1647938391.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;2、执行 &lt;span&gt;python manage.py collectstatic，收集所有的静态文件。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2017.cnblogs.com/blog/1060878/201802/1060878-20180205131442904-1341807211.png&quot; alt=&quot;&quot; width=&quot;700&quot; height=&quot;193&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;3、可以查看在django主目录下出现了collectedstatic，内容如下，为admin的后台的css，js等文件和blog项目的静态文件。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1060878/201802/1060878-20180205131640748-1408000345.png&quot; alt=&quot;&quot; width=&quot;714&quot; height=&quot;370&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;3.3 使配置生效&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;Nginx检查配置文件&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;nginx -t 是nginx检查配置文件是否有错误的命令，如果正常，输出如下：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1060878/201802/1060878-20180202152821343-630165147.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;使配置文件生效&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;nginx -s  reload 是nginx重新载入配置文件的命令，可以让配置项生效。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1060878/201802/1060878-20180202152845234-1057933006.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;3.4 浏览器访问&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;浏览器能够正常访问，部署成功。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1060878/201802/1060878-20180205102806029-2064977042.png&quot; alt=&quot;&quot; width=&quot;888&quot; height=&quot;598&quot;/&gt;&lt;/p&gt;

&lt;p&gt;在部署中每个人都会遇到自己的问题，我的经验也不适用于所有人。参考我的过程，如果遇到问题，欢迎留言交流。&lt;/p&gt;
</description>
<pubDate>Mon, 05 Feb 2018 03:24:00 +0000</pubDate>
<dc:creator>金色旭光</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/goldsunshine/p/8405310.html</dc:identifier>
</item>
<item>
<title>SpringMVC源码之Controller查找原理 - 卧颜沉默</title>
<link>http://www.cnblogs.com/w-y-c-m/p/8416630.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/w-y-c-m/p/8416630.html</guid>
<description>&lt;h2 id=&quot;摘要&quot;&gt;摘要&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;本文从源码层面简单讲解SpringMVC的处理器映射环节，也就是查找Controller详细过程。&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;springmvc请求流程&quot;&gt;SpringMVC请求流程&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1133483/201802/1133483-20180205104744466-2081267679.png&quot;/&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Controller查找在上图中对应的步骤1至2的过程&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;springmvc初始化过程&quot;&gt;SpringMVC初始化过程&lt;/h2&gt;
&lt;h4 id=&quot;理解初始化过程之前先认识两个类&quot;&gt;理解初始化过程之前，先认识两个类&lt;/h4&gt;
&lt;ol&gt;&lt;li&gt;RequestMappingInfo类，对RequestMapping注解封装。里面包含http请求头的相关信息。如uri、method、params、header等参数。一个对象对应一个RequestMapping注解&lt;/li&gt;
&lt;li&gt;HandlerMethod类，是对Controller的处理请求方法的封装。里面包含了该方法所属的bean对象、该方法对应的method对象、该方法的参数等。&lt;br/&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1133483/201802/1133483-20180205104811248-601768711.png&quot;/&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;ul readability=&quot;35&quot;&gt;&lt;li readability=&quot;8&quot;&gt;
&lt;p&gt;上图是RequestMappingHandlerMapping的继承关系。在SpringMVC初始化的时候，首先执行RequestMappingHandlerMapping中的afterPropertiesSet方法，然后会进入AbstractHandlerMethodMapping的afterPropertiesSet方法(line:93)，这个方法会进入当前类的initHandlerMethods方法（line:103）。这个方法的职责便是从applicationContext中扫描beans，然后从bean中查找并注册处理器方法，代码如下。&lt;br/&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;protected void initHandlerMethods() {
  if (logger.isDebugEnabled()) {
  logger.debug(&quot;Looking for request mappings in application context: &quot; + getApplicationContext());
  }
  //获取applicationContext中所有的bean name
  String[] beanNames = (this.detectHandlerMethodsInAncestorContexts ?
    BeanFactoryUtils.beanNamesForTypeIncludingAncestors(getApplicationContext(), Object.class) :
    getApplicationContext().getBeanNamesForType(Object.class));
  //遍历beanName数组
  for (String beanName : beanNames) {
  //isHandler会根据bean来判断bean定义中是否带有Controller注解或RequestMapping注解
  if (isHandler(getApplicationContext().getType(beanName))){
    detectHandlerMethods(beanName);
  }
  }
  handlerMethodsInitialized(getHandlerMethods());
}&lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li readability=&quot;5&quot;&gt;
&lt;p&gt;isHandler方法其实很简单，如下&lt;br/&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;@Override
protected boolean isHandler(Class&amp;lt;?&amp;gt; beanType) {
  return ((AnnotationUtils.findAnnotation(beanType, Controller.class) != null) ||
    (AnnotationUtils.findAnnotation(beanType, RequestMapping.class) != null));
}&lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li readability=&quot;12&quot;&gt;
&lt;p&gt;就是判断当前bean定义是否带有Controlller注解或RequestMapping注解，看了这里逻辑可能会想如果只有RequestMapping会生效吗？答案是不会的，因为在这种情况下Spring初始化的时候不会把该类注册为Spring bean，遍历beanNames时不会遍历到这个类，所以这里把Controller换成Compoent注解也是可以，不过一般不会这么做。当确定bean为handlers后，便会从该bean中查找出具体的handler方法（也就是我们通常定义的Controller类下的具体定义的请求处理方法），查找代码如下&lt;br/&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;protected void detectHandlerMethods(final Object handler) {
  //获取到当前Controller bean的class对象
  Class&amp;lt;?&amp;gt; handlerType = (handler instanceof String) ?
    getApplicationContext().getType((String) handler) : handler.getClass();
  //同上，也是该Controller bean的class对象
  final Class&amp;lt;?&amp;gt; userType = ClassUtils.getUserClass(handlerType);
  //获取当前bean的所有handler method。这里查找的依据便是根据method定义是否带有RequestMapping注解。如果有根据注解创建RequestMappingInfo对象
  Set&amp;lt;Method&amp;gt; methods = HandlerMethodSelector.selectMethods(userType, new MethodFilter() {
  public boolean matches(Method method) {
    return getMappingForMethod(method, userType) != null;
  }
  });
  //遍历并注册当前bean的所有handler method
  for (Method method : methods) {
  T mapping = getMappingForMethod(method, userType);
  //注册handler method，进入以下方法
  registerHandlerMethod(handler, method, mapping);
  }
}&lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li readability=&quot;9&quot;&gt;
&lt;p&gt;以上代码有两个地方有调用了getMappingForMethod方法&lt;br/&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;protected RequestMappingInfo getMappingForMethod(Method method, Class&amp;lt;?&amp;gt; handlerType) {
  RequestMappingInfo info = null;
   //获取method的@RequestMapping注解
  RequestMapping methodAnnotation = AnnotationUtils.findAnnotation(method, RequestMapping.class);
  if (methodAnnotation != null) {
  RequestCondition&amp;lt;?&amp;gt; methodCondition = getCustomMethodCondition(method);
  info = createRequestMappingInfo(methodAnnotation, methodCondition);
   //获取method所属bean的@RequtestMapping注解
  RequestMapping typeAnnotation = AnnotationUtils.findAnnotation(handlerType, RequestMapping.class);
  if (typeAnnotation != null) {
    RequestCondition&amp;lt;?&amp;gt; typeCondition = getCustomTypeCondition(handlerType);
    //合并两个@RequestMapping注解
    info = createRequestMappingInfo(typeAnnotation, typeCondition).combine(info);
  }
  }
  return info;
}&lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li readability=&quot;12&quot;&gt;
&lt;p&gt;这个方法的作用就是根据handler method方法创建RequestMappingInfo对象。首先判断该mehtod是否含有RequestMpping注解。如果有则直接根据该注解的内容创建RequestMappingInfo对象。创建以后判断当前method所属的bean是否也含有RequestMapping注解。如果含有该注解则会根据该类上的注解创建一个RequestMappingInfo对象。然后在合并method上的RequestMappingInfo对象，最后返回合并后的对象。现在回过去看detectHandlerMethods方法，有两处调用了getMappingForMethod方法，个人觉得这里是可以优化的，在第一处判断method时否为handler时，创建的RequestMappingInfo对象可以保存起来，直接拿来后面使用，就少了一次创建RequestMappingInfo对象的过程。然后紧接着进入registerHandlerMehtod方法，如下&lt;br/&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;protected void registerHandlerMethod(Object handler, Method method, T mapping) {
  //创建HandlerMethod
  HandlerMethod newHandlerMethod = createHandlerMethod(handler, method);
  HandlerMethod oldHandlerMethod = handlerMethods.get(mapping);
  //检查配置是否存在歧义性
  if (oldHandlerMethod != null &amp;amp;&amp;amp; !oldHandlerMethod.equals(newHandlerMethod)) {
  throw new IllegalStateException(&quot;Ambiguous mapping found. Cannot map '&quot; + newHandlerMethod.getBean()
        + &quot;' bean method \n&quot; + newHandlerMethod + &quot;\nto &quot; + mapping + &quot;: There is already '&quot;
        + oldHandlerMethod.getBean() + &quot;' bean method\n&quot; + oldHandlerMethod + &quot; mapped.&quot;);
  }
  this.handlerMethods.put(mapping, newHandlerMethod);
  if (logger.isInfoEnabled()) {
  logger.info(&quot;Mapped \&quot;&quot; + mapping + &quot;\&quot; onto &quot; + newHandlerMethod);
  }
  //获取@RequestMapping注解的value，然后添加value-&amp;gt;RequestMappingInfo映射记录至urlMap中
  Set&amp;lt;String&amp;gt; patterns = getMappingPathPatterns(mapping);
  for (String pattern : patterns) {
  if (!getPathMatcher().isPattern(pattern)) {
    this.urlMap.add(pattern, mapping);
  }
  }
}&lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li readability=&quot;7&quot;&gt;
&lt;p&gt;这里T的类型是RequestMappingInfo。这个对象就是封装的具体Controller下的方法的RequestMapping注解的相关信息。一个RequestMapping注解对应一个RequestMappingInfo对象。HandlerMethod和RequestMappingInfo类似，是对Controlelr下具体处理方法的封装。先看方法的第一行,根据handler和mehthod创建HandlerMethod对象。第二行通过handlerMethods map来获取当前mapping对应的HandlerMethod。然后判断是否存在相同的RequestMapping配置。如下这种配置就会导致此处抛&lt;br/&gt;&lt;code&gt;Invocation of init method failed; nested exception is java.lang.IllegalStateException: Ambiguous mapping found. Cannot map...&lt;/code&gt;&lt;br/&gt;异常&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;@Controller
@RequestMapping(&quot;/AmbiguousTest&quot;)
public class AmbiguousTestController {
@RequestMapping(value = &quot;/test1&quot;)
@ResponseBody
public String test1(){
    return &quot;method test1&quot;;
}

@RequestMapping(value = &quot;/test1&quot;)
@ResponseBody
public String test2(){
    return &quot;method test2&quot;;
}
}&lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;在SpingMVC启动（初始化）阶段检查RequestMapping配置是否有歧义，这是其中一处检查歧义的（后面还会提到一个在运行时检查歧义性的地方）。然后确认配置正常以后会把该RequestMappingInfo和HandlerMethod对象添加至handlerMethods（LinkedHashMap&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;h5 id=&quot;registerhandlermethod方法简单总结&quot;&gt;registerHandlerMethod方法简单总结&lt;/h5&gt;
&lt;p&gt;该方法的主要有3个职责&lt;/p&gt;
&lt;ol readability=&quot;1&quot;&gt;&lt;li&gt;检查RequestMapping注解配置是否有歧义。&lt;/li&gt;
&lt;li&gt;构建RequestMappingInfo到HandlerMethod的映射map。该map便是AbstractHandlerMethodMapping的成员变量handlerMethods。LinkedHashMap&lt;/li&gt;
&lt;li readability=&quot;5&quot;&gt;
&lt;p&gt;构建AbstractHandlerMethodMapping的成员变量urlMap，MultiValueMap&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;@Controller
@RequestMapping(&quot;/UrlMap&quot;)
public class UrlMapController {

@RequestMapping(value = &quot;/test1&quot;, method = RequestMethod.GET)
@ResponseBody
public String test1(){
    return &quot;method test1&quot;;
}

@RequestMapping(value = &quot;/test1&quot;)
@ResponseBody
public String test2(){
    return &quot;method test2&quot;;
}

@RequestMapping(value = &quot;/test3&quot;)
@ResponseBody
public String test3(){
    return &quot;method test3&quot;;
}
}&lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;ul readability=&quot;42.650245549417&quot;&gt;&lt;li&gt;初始化完成后，对应AbstractHandlerMethodMapping的urlMap的结构如下&lt;br/&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1133483/201802/1133483-20180205104829029-1142770633.png&quot;/&gt;&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;以上便是SpringMVC初始化的主要过程&lt;/p&gt;
&lt;h2 id=&quot;查找过程&quot;&gt;查找过程&lt;/h2&gt;
&lt;/li&gt;
&lt;li readability=&quot;7&quot;&gt;
&lt;p&gt;为了理解查找流程，带着一个问题来看，现有如下Controller&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;@Controller
@RequestMapping(&quot;/LookupTest&quot;)
public class LookupTestController {

@RequestMapping(value = &quot;/test1&quot;, method = RequestMethod.GET)
@ResponseBody
public String test1(){
    return &quot;method test1&quot;;
}

@RequestMapping(value = &quot;/test1&quot;, headers = &quot;Referer=https://www.baidu.com&quot;)
@ResponseBody
public String test2(){
    return &quot;method test2&quot;;
}

@RequestMapping(value = &quot;/test1&quot;, params = &quot;id=1&quot;)
@ResponseBody
public String test3(){
    return &quot;method test3&quot;;
}

@RequestMapping(value = &quot;/*&quot;)
@ResponseBody
public String test4(){
    return &quot;method test4&quot;;
}
}&lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;有如下请求&lt;br/&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1133483/201802/1133483-20180205104835795-1096995550.png&quot;/&gt;&lt;/li&gt;
&lt;li&gt;这个请求会进入哪一个方法？&lt;/li&gt;
&lt;li readability=&quot;19&quot;&gt;
&lt;p&gt;web容器（Tomcat、jetty）接收请求后，交给DispatcherServlet处理。FrameworkServlet调用对应请求方法（eg:get调用doGet），然后调用processRequest方法。进入processRequest方法后，一系列处理后，在line:936进入doService方法。然后在Line856进入doDispatch方法。在line:896获取当前请求的处理器handler。然后进入AbstractHandlerMethodMapping的lookupHandlerMethod方法。代码如下&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;protected HandlerMethod lookupHandlerMethod(String lookupPath, HttpServletRequest request) throws Exception {
  List&amp;lt;Match&amp;gt; matches = new ArrayList&amp;lt;Match&amp;gt;();
   //根据uri获取直接匹配的RequestMappingInfos
  List&amp;lt;T&amp;gt; directPathMatches = this.urlMap.get(lookupPath);
  if (directPathMatches != null) {
  addMatchingMappings(directPathMatches, matches, request);
  }
  //不存在直接匹配的RequetMappingInfo，遍历所有RequestMappingInfo
  if (matches.isEmpty()) {
  // No choice but to go through all mappings
  addMatchingMappings(this.handlerMethods.keySet(), matches, request);
  }
   //获取最佳匹配的RequestMappingInfo对应的HandlerMethod
  if (!matches.isEmpty()) {
  Comparator&amp;lt;Match&amp;gt; comparator = new MatchComparator(getMappingComparator(request));
  Collections.sort(matches, comparator);

  if (logger.isTraceEnabled()) {
    logger.trace(&quot;Found &quot; + matches.size() + &quot; matching mapping(s) for [&quot; + lookupPath + &quot;] : &quot; + matches);
  }
  //再一次检查配置的歧义性
  Match bestMatch = matches.get(0);
  if (matches.size() &amp;gt; 1) {
    Match secondBestMatch = matches.get(1);
    if (comparator.compare(bestMatch, secondBestMatch) == 0) {
        Method m1 = bestMatch.handlerMethod.getMethod();
        Method m2 = secondBestMatch.handlerMethod.getMethod();
        throw new IllegalStateException(
              &quot;Ambiguous handler methods mapped for HTTP path '&quot; + request.getRequestURL() + &quot;': {&quot; +
              m1 + &quot;, &quot; + m2 + &quot;}&quot;);
    }
  }

  handleMatch(bestMatch.mapping, lookupPath, request);
  return bestMatch.handlerMethod;
  }
  else {
  return handleNoMatch(handlerMethods.keySet(), lookupPath, request);
  }
}&lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;进入lookupHandlerMethod方法，其中lookupPath=&quot;/LookupTest/test1&quot;,根据lookupPath，也就是请求的uri。直接查找urlMap，获取直接匹配的RequestMappingInfo list。这里会匹配到3个RequestMappingInfo。如下&lt;br/&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1133483/201802/1133483-20180205104850263-2097431257.png&quot;/&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;7&quot;&gt;
&lt;p&gt;然后进入addMatchingMappings方法&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;private void addMatchingMappings(Collection&amp;lt;T&amp;gt; mappings, List&amp;lt;Match&amp;gt; matches, HttpServletRequest request) {
  for (T mapping : mappings) {
  T match = getMatchingMapping(mapping, request);
  if (match != null) {
    matches.add(new Match(match, handlerMethods.get(mapping)));
  }
  }
}&lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li readability=&quot;15&quot;&gt;
&lt;p&gt;这个方法的职责是遍历当前请求的uri和mappings中的RequestMappingInfo能否匹配上，如果能匹配上，创建一个相同的RequestMappingInfo对象。再获取RequestMappingInfo对应的handlerMethod。然后创建一个Match对象添加至matches list中。执行完addMatchingMappings方法，回到lookupHandlerMethod。这时候matches还有3个能匹配上的RequestMappingInfo对象。接下来的处理便是对matchers列表进行排序，然后获取列表的第一个元素作为最佳匹配。返回Match的HandlerMethod。这里进入RequestMappingInfo的compareTo方法，看一下具体的排序逻辑。代码如下&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;public int compareTo(RequestMappingInfo other, HttpServletRequest request) {
  int result = patternsCondition.compareTo(other.getPatternsCondition(), request);
  if (result != 0) {
  return result;
  }
  result = paramsCondition.compareTo(other.getParamsCondition(), request);
  if (result != 0) {
  return result;
  }
  result = headersCondition.compareTo(other.getHeadersCondition(), request);
  if (result != 0) {
  return result;
  }
  result = consumesCondition.compareTo(other.getConsumesCondition(), request);
  if (result != 0) {
  return result;
  }
  result = producesCondition.compareTo(other.getProducesCondition(), request);
  if (result != 0) {
  return result;
  }
  result = methodsCondition.compareTo(other.getMethodsCondition(), request);
  if (result != 0) {
  return result;
  }
  result = customConditionHolder.compareTo(other.customConditionHolder, request);
  if (result != 0) {
  return result;
  }
  return 0;
}&lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li readability=&quot;10&quot;&gt;
&lt;p&gt;代码里可以看出，匹配的先后顺序是value&amp;gt;params&amp;gt;headers&amp;gt;consumes&amp;gt;produces&amp;gt;methods&amp;gt;custom，看到这里，前面的问题就能轻易得出答案了。在value相同的情况，params更能先匹配。所以那个请求会进入test3()方法。再回到lookupHandlerMethod，在找到HandlerMethod。SpringMVC还会这里再一次检查配置的歧义性，这里检查的原理是通过比较匹配度最高的两个RequestMappingInfo进行比较。此处可能会有疑问在初始化SpringMVC有检查配置的歧义性，这里为什么还会检查一次。假如现在Controller中有如下两个方法，以下配置是能通过初始化歧义性检查的。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;@RequestMapping(value = &quot;/test5&quot;, method = {RequestMethod.GET, RequestMethod.POST})
@ResponseBody
public String test5(){
return &quot;method test5&quot;;
}
@RequestMapping(value = &quot;/test5&quot;, method = {RequestMethod.GET, RequestMethod.DELETE})
@ResponseBody
public String test6(){
return &quot;method test6&quot;;
}&lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li readability=&quot;5.3801169590643&quot;&gt;
&lt;p&gt;现在执行 &lt;a href=&quot;http://localhost:8080/SpringMVC-Demo/LookupTest/test5&quot; class=&quot;uri&quot;&gt;http://localhost:8080/SpringMVC-Demo/LookupTest/test5&lt;/a&gt; 请求，便会在lookupHandlerMethod方法中抛&lt;br/&gt;&lt;code&gt;java.lang.IllegalStateException: Ambiguous handler methods mapped for HTTP path 'http://localhost:8080/SpringMVC-Demo/LookupTest/test5'&lt;/code&gt;异常。这里抛该异常是因为RequestMethodsRequestCondition的compareTo方法是比较的method数。代码如下&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;public int compareTo(RequestMethodsRequestCondition other, HttpServletRequest request) {
  return other.methods.size() - this.methods.size();
}&lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;什么时候匹配通配符？当通过urlMap获取不到直接匹配value的RequestMappingInfo时才会走通配符匹配进入addMatchingMappings方法。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;总结&quot;&gt;总结&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;解析所使用代码已上传至github，&lt;a href=&quot;https://github.com/wycm/SpringMVC-Demo&quot; class=&quot;uri&quot;&gt;https://github.com/wycm/SpringMVC-Demo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;以上源码是基于SpringMVC 3.2.2.RELEASE版本。以上便是SpringMVC请求查找的主要过程，希望对大家有帮助。本文可能有错误，希望读者能够指出来。&lt;/li&gt;
&lt;/ul&gt;</description>
<pubDate>Mon, 05 Feb 2018 03:05:00 +0000</pubDate>
<dc:creator>卧颜沉默</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/w-y-c-m/p/8416630.html</dc:identifier>
</item>
</channel>
</rss>