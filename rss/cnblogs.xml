<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>Entity Framework Core 2.1 Preview 1 新增功能简介 - Sweet-Tang</title>
<link>http://www.cnblogs.com/tdfblog/p/entity-framework-core-2-1-preview-1.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/tdfblog/p/entity-framework-core-2-1-preview-1.html</guid>
<description>&lt;p&gt;两个星期前，微软发布了&lt;a href=&quot;https://blogs.msdn.microsoft.com/dotnet/2018/02/27/announcing-entity-framework-core-2-1-preview-1/&quot;&gt;EF Core 2.1 Preview 1&lt;/a&gt;，同时还发布了&lt;a href=&quot;https://blogs.msdn.microsoft.com/dotnet/2018/02/27/announcing-net-core-2-1-preview-1/&quot;&gt;.NET Core 2.1 Preview 1&lt;/a&gt;和&lt;a href=&quot;https://blogs.msdn.microsoft.com/webdev/2018/02/27/asp-net-core-2-1-0-preview1-now-available/&quot;&gt;ASP.NET Core 2.1 Preview 1&lt;/a&gt;；EF Core 2.1 Preview 1 除了&lt;a href=&quot;https://github.com/aspnet/EntityFrameworkCore/issues?q=is%3Aissue+milestone%3A2.1.0-preview1+is%3Aclosed+label%3Aclosed-fixed&quot;&gt;许多小改进和超过100种产品错误修复之外&lt;/a&gt;，还包括几个常用的新功能，今天我为您详细介绍这些新功能的部分内容。&lt;/p&gt;
&lt;h2 id=&quot;实体构造函数参数&quot;&gt;实体构造函数参数&lt;/h2&gt;
&lt;p&gt;EF.Core 2.1开始支持在实体的构造函数的实体中转入参数，目前支持的类型如下：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;实体属性&lt;/li&gt;
&lt;li&gt;IOC容器中注册的服务&lt;/li&gt;
&lt;li&gt;当前的DbContext&lt;/li&gt;
&lt;li&gt;当前实体的元数据&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;实体属性&quot;&gt;实体属性&lt;/h3&gt;
&lt;p&gt;在某些情况下为了保证数据的安全性，将属性改为只读，在构造函数中传递属性的值，框架通过参数与属性匹配关系，将数据行中属性的值作为参数传递给构造函数。&lt;/p&gt;
&lt;p&gt;例如下面的实体：&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;    public class Order
    {
        public Order(int orderID, string customerID, DateTime? orderDate)
        {
            OrderID = orderID;
            CustomerID = customerID;
            OrderDate = orderDate;
        }

        public int OrderID { get; }
        
        public string CustomerID { get; }

        public DateTime? OrderDate { get; }

    }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;其中参数与属性的配置规则如下：&lt;/p&gt;
&lt;p&gt;具体的匹配规则可以见Github上面的源代码：&lt;a href=&quot;https://github.com/aspnet/EntityFrameworkCore/blob/8965f0b91cf89e36abca8636d58420cbd26c22fd/src/EFCore/Metadata/Internal/PropertyParameterBindingFactory.cs#L37-L45&quot; class=&quot;uri&quot;&gt;https://github.com/aspnet/EntityFrameworkCore/blob/8965f0b91cf89e36abca8636d58420cbd26c22fd/src/EFCore/Metadata/Internal/PropertyParameterBindingFactory.cs#L37-L45&lt;/a&gt;&lt;br/&gt;不过我认识后面四种模式有待斟酌的，在.Net开发规范，应该没有人将公有的属性名使用 &lt;strong&gt;_&lt;/strong&gt;、&lt;strong&gt;m_&lt;/strong&gt;作为前缀。&lt;/p&gt;
&lt;h3 id=&quot;ioc容器中注册的服务&quot;&gt;IOC容器中注册的服务&lt;/h3&gt;
&lt;p&gt;在实体的构造函数的中，可以将注册的服务作为参数。&lt;/p&gt;
&lt;p&gt;示例代码：&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;    public class Order
    {
        private ILazyLoader _lazyLoader;

        public Order(ILazyLoader lazyLoader)
        {
            this._lazyLoader = lazyLoader;
        }

        public int OrderID { get; set; }
        
        public string CustomerID { get; set; }

        private ICollection&amp;lt;OrderDetail&amp;gt; _orderDetails;

        public ICollection&amp;lt;OrderDetail&amp;gt; OrderDetails
        {
            get =&amp;gt; _lazyLoader.Load(this, ref _orderDetails);
            set =&amp;gt; _orderDetails = value;
        }
    }

}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;其中&lt;code&gt;ILazyLoader&lt;/code&gt;是EF Core框架在容器中注册的一个服务，通过实体的构造函数中传入，实现导航属性的赖加载（关于&lt;code&gt;ILazyLoader&lt;/code&gt;的具体使用方式在本章的下一节中讲解）。&lt;/p&gt;
&lt;h3 id=&quot;当前的dbcontext&quot;&gt;当前的DbContext&lt;/h3&gt;
&lt;p&gt;在实体的构造函数的参数中，将当前的&lt;code&gt;DbContext&lt;/code&gt;作为参数。&lt;/p&gt;
&lt;p&gt;示例代码：&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;    public class Order
    {
        private NorthwindContext _northwindContext;

        public Order(NorthwindContext northwindContext)
        {
            this._northwindContext = northwindContext;
        }

        public int OrderID { get; set; }
        
        public string CustomerID { get; set; }

        private ICollection&amp;lt;OrderDetail&amp;gt; _orderDetails;

        [NotMapped]
        public ICollection&amp;lt;OrderDetail&amp;gt; OrderDetails
        {
            get
            {
                if (this._orderDetails == null)
                    this._orderDetails = this._northwindContext.Set&amp;lt;OrderDetail&amp;gt;()
                        .Where(item =&amp;gt; item.OrderID == this.OrderID).ToList();
                return this._orderDetails;
            }
            set =&amp;gt; _orderDetails = value;
        }
    }
&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;当前实体的元数据&quot;&gt;当前实体的元数据&lt;/h3&gt;
&lt;p&gt;在实体的构造函数的参数中，将当前实体的的&lt;code&gt;IEntityType&lt;/code&gt;作为参数。&lt;/p&gt;
&lt;p&gt;示例代码：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;    public class Order
    {

        private IEntityType _entityType;

        public Order(IEntityType entityType)
        {
            this._entityType = entityType;
        }

        public int OrderID { get; set; }
        
        public string CustomerID { get; set; }

        [NotMapped]
        public IEntityType EntityType
        {
            get { return this._entityType; }
        }

    }&lt;/code&gt;
&lt;/pre&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;如果实体存在多个构造函数，框架会选择参数个数最多的那个；如果按参数个数优先选择后，依然存在多个构造函数，则会抛异常。在当前体验版本中，暂时无法直接支持自定义参数，不过在下一个发布版本中，会提供解决方案。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;懒加载&quot;&gt;懒加载&lt;/h2&gt;
&lt;p&gt;懒加载是一个非常有争论的功能激烈争论的功能。虽然有些人认为它会导致性能下降或出现意想不到的Bug，但是不影响有些开发人员依旧喜欢它。EF Core 2.1 Preview 1增加了懒加载，提供了两种实现方式。&lt;/p&gt;
&lt;h3 id=&quot;使用ilazyloader接口实现懒加载&quot;&gt;使用ILazyLoader接口实现懒加载&lt;/h3&gt;
&lt;p&gt;在实体的构造函数中传入&lt;code&gt;ILazyLoader&lt;/code&gt;，在导航属性中，使用接口的&lt;code&gt;Load&lt;/code&gt;方法，实现导航属性的数据加载。&lt;/p&gt;
&lt;p&gt;示例代码：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;    public class Order
    {
        private ILazyLoader _lazyLoader;


        public Order(ILazyLoader lazyLoader)
        {
            this._lazyLoader = lazyLoader;
        }

        public int OrderID { get; set; }
        
        public string CustomerID { get; set; }

        public DateTime? OrderDate { get; set; }
   
        private ICollection&amp;lt;OrderDetail&amp;gt; _orderDetails;

        public ICollection&amp;lt;OrderDetail&amp;gt; OrderDetails
        {
            get =&amp;gt; this._lazyLoader.Load(this, ref _orderDetails);
            set =&amp;gt; _orderDetails = value;
        }
    }
&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;通过代理类实现懒加载&quot;&gt;通过代理类实现懒加载&lt;/h3&gt;
&lt;p&gt;这种方式，需要单独安装 &lt;code&gt;Microsoft.EntityFrameworkCore.Proxies Nuget&lt;/code&gt; 包，它通过 &lt;a href=&quot;https://github.com/castleproject/Core&quot;&gt;Castle.Core&lt;/a&gt; 框架来生成代理类来实现对导航属性的延迟加载。&lt;/p&gt;
&lt;p&gt;启用懒加载需要注意以下两点：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;在配置中启用懒加载；&lt;/li&gt;
&lt;li&gt;实体类不能是封闭（sealed）类，导航属性必须是虚（virtual）属性。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;这种方式，在以前的博客我已经分享过，只不过当时还没有发布，原文地址：&lt;a href=&quot;http://www.cnblogs.com/tdfblog/p/entity-framework-lazy-loading.html&quot;&gt;Entity Framework Core 懒加载&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&quot;值转换&quot;&gt;值转换&lt;/h2&gt;
&lt;p&gt;EF Core 2.1 允许您将插入数据库的值自定义转换逻辑。例如：将属性的值进行加密与解密。&lt;/p&gt;
&lt;p&gt;示例，将插入的值进行Base64编码，在查询的时候进行Base64解码。&lt;/p&gt;
&lt;p&gt;定义的&lt;code&gt;UserInfo&lt;/code&gt;实体，用于保存用户信息，属性&lt;code&gt;PhoneNumber&lt;/code&gt;表示用户的手机号码；为了用户信息安全，需要将手机号码进行加密后再保存到数据库，只是为了达到演示的目的，我们采用Base64进行编码。&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;     public class UserInfo
     {
         public int Id { get; set; }

         public string PhoneNumber { get; set; }
     }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;Base64ValueConverter&lt;/code&gt;表示进行值转换的具体逻辑，继承自泛型&lt;code&gt;ValueConverter&amp;lt;string, string&amp;gt;&lt;/code&gt;，具体的逻辑非常简单，不再叙述。&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;    public class Base64ValueConverter : ValueConverter&amp;lt;string, string&amp;gt;
    {
        public Base64ValueConverter() : base((v) =&amp;gt; ToBase64(v), (v) =&amp;gt; FromBase64(v))
        {
        }
        private static string ToBase64(string input)
        {
            if (string.IsNullOrEmpty(input))
                return input;

            var bytes = Encoding.UTF8.GetBytes(input);
            return Convert.ToBase64String(bytes);
        }

        private static string FromBase64(string input)
        {
            if (string.IsNullOrEmpty(input))
                return input;

            var bytes = Convert.FromBase64String(input);
            return Encoding.UTF8.GetString(bytes);
        }
    }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;SampleDbContext&lt;/code&gt;表示数据上下文，在&lt;code&gt;OnModelCreating&lt;/code&gt;方法中，定义&lt;code&gt;UserInfo&lt;/code&gt;实体的&lt;code&gt;PhoneNumber&lt;/code&gt;属性需要使用&lt;code&gt;Base64&lt;/code&gt;进行值转换。&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;    public class SampleDbContext : DbContext
    {

        public DbSet&amp;lt;UserInfo&amp;gt; Users { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            var sqlConnectionStringBuilder = new SqlConnectionStringBuilder
            {
                DataSource = &quot;*******&quot;,
                InitialCatalog = &quot;ValueConverterTest&quot;,
                UserID = &quot;sa&quot;,
                Password = &quot;sa&quot;
            };
            optionsBuilder.UseSqlServer(sqlConnectionStringBuilder.ConnectionString);

            base.OnConfiguring(optionsBuilder);
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity&amp;lt;UserInfo&amp;gt;().Property(e =&amp;gt; e.PhoneNumber).HasConversion(new Base64ValueConverter());
        }
    }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;下面的代码是对预期的结果进行单测。&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;    [Fact]
    public async void ValueConverter_Test()
    {
        string phoneNumber = &quot;13658556925&quot;;

        using (SampleDbContext dbContext = new SampleDbContext())
        {
            await dbContext.Database.EnsureDeletedAsync();

            await dbContext.Database.EnsureCreatedAsync();

            dbContext.Users.Add(new UserInfo()
            {
                PhoneNumber = phoneNumber
            });

            await dbContext.SaveChangesAsync();
        }

        UserInfo user;

        using (SampleDbContext dbContext = new SampleDbContext())
        {
            user = dbContext.Users.Single();
        }

        Assert.NotNull(user);
        Assert.Equal(phoneNumber, user.PhoneNumber);
    }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;运行后，查询数据库中保存的结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/162090/201803/162090-20180309152145274-1699658175.jpg&quot;/&gt;&lt;/p&gt;
&lt;p&gt;手机号码 &lt;em&gt;13658556925&lt;/em&gt; 在数据库保存的值是 &lt;em&gt;MTM2NTg1NTY5MjU=&lt;/em&gt;。&lt;/p&gt;
&lt;p&gt;使用值转换的另一个常用场景是将枚举的值存储为字符串类型，默认情况下，枚举的值保存到数据库中是通过整数表示的，如果需要在值存储为字符串类型。&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;   public enum CategoryName
   {
       Clothing,
       Footwear,
       Accessories
   }
   public class Category
   {
       public int Id { get; set; }
 
       public CategoryName Name { get; set; }
   }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;实体&lt;code&gt;Category&lt;/code&gt;的&lt;code&gt;Name&lt;/code&gt;属性是用枚举表示的，如果在存储时用字符串类型表示，我们可以在&lt;code&gt;DbContext&lt;/code&gt;的&lt;code&gt;OnModelCreating&lt;/code&gt;方法中使用如下代码，&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity&amp;lt;Category&amp;gt;().Property(e =&amp;gt; e.Name).HasConversion&amp;lt;string&amp;gt;();
    }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;EF Core 默认提供常用类型的转换，我们只需指定存储的类型即可，框架默认支持的类型转换映射表如下：&lt;/p&gt;
&lt;table&gt;&lt;thead/&gt;&lt;tbody readability=&quot;5&quot;&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td&gt;&lt;code&gt;enum&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;int&lt;/code&gt;、&lt;code&gt;short&lt;/code&gt;、&lt;code&gt;long&lt;/code&gt;、&lt;code&gt;sbyte&lt;/code&gt;、&lt;code&gt;uint&lt;/code&gt;、&lt;code&gt;ushort&lt;/code&gt;、&lt;code&gt;ulong&lt;/code&gt;、&lt;code&gt;byte&lt;/code&gt;、&lt;code&gt;decimal&lt;/code&gt;、&lt;code&gt;double&lt;/code&gt;、&lt;code&gt;float&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;2&quot;&gt;&lt;td&gt;&lt;code&gt;bool&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;int&lt;/code&gt;、&lt;code&gt;short&lt;/code&gt;、&lt;code&gt;long&lt;/code&gt;、&lt;code&gt;sbyte&lt;/code&gt;、&lt;code&gt;uint&lt;/code&gt;、&lt;code&gt;ushort&lt;/code&gt;、&lt;code&gt;ulong&lt;/code&gt;、&lt;code&gt;byte&lt;/code&gt;、&lt;code&gt;decimal&lt;/code&gt;、&lt;code&gt;double&lt;/code&gt;、&lt;code&gt;float&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;&lt;code&gt;bool&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;&lt;code&gt;bool&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;byte[]&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;&lt;code&gt;char&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;2&quot;&gt;&lt;td&gt;&lt;code&gt;char&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;int&lt;/code&gt;、&lt;code&gt;short&lt;/code&gt;、&lt;code&gt;long&lt;/code&gt;、&lt;code&gt;sbyte&lt;/code&gt;、&lt;code&gt;uint&lt;/code&gt;、&lt;code&gt;ushort&lt;/code&gt;、&lt;code&gt;ulong&lt;/code&gt;、&lt;code&gt;byte&lt;/code&gt;、&lt;code&gt;decimal&lt;/code&gt;、&lt;code&gt;double&lt;/code&gt;、&lt;code&gt;float&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;&lt;code&gt;char&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;byte[]&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;&lt;code&gt;Guid&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;byte[]&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;&lt;code&gt;Guid&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;&lt;code&gt;byte[]&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;byte[]&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;2&quot;&gt;&lt;td&gt;&lt;code&gt;DateTime&lt;/code&gt;、&lt;code&gt;DateTimeOffset&lt;/code&gt;、&lt;code&gt;TimeSpan&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;string&lt;/code&gt;、&lt;code&gt;long&lt;/code&gt;、&lt;code&gt;byte[]&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td&gt;&lt;code&gt;int&lt;/code&gt;、&lt;code&gt;short&lt;/code&gt;、&lt;code&gt;long&lt;/code&gt;、&lt;code&gt;sbyte&lt;/code&gt;、&lt;code&gt;uint&lt;/code&gt;、&lt;code&gt;ushort&lt;/code&gt;、&lt;code&gt;ulong&lt;/code&gt;、&lt;code&gt;byte&lt;/code&gt;、&lt;code&gt;decimal&lt;/code&gt;、&lt;code&gt;double&lt;/code&gt;、&lt;code&gt;float&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;string&lt;/code&gt;、&lt;code&gt;byte[]&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h2 id=&quot;linq-groupby-解析&quot;&gt;LINQ GroupBy 解析&lt;/h2&gt;
&lt;p&gt;在版本2.1之前，在EF Core中，&lt;code&gt;GroupBy&lt;/code&gt; 表达式运算符总是在内存中进行计算的。现在支持在大多数情况下将其转换为SQL &lt;code&gt;GROUP BY&lt;/code&gt;子句。&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;var query = context.Orders
    .GroupBy(o =&amp;gt; new { o.CustomerId, o.EmployeeId })
    .Select(g =&amp;gt; new
        {
          g.Key.CustomerId,
          g.Key.EmployeeId,
          Sum = g.Sum(o =&amp;gt; o.Amount),
          Min = g.Min(o =&amp;gt; o.Amount),
          Max = g.Max(o =&amp;gt; o.Amount),
          Avg = g.Average(o =&amp;gt; Amount)
        });&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;相应的SQL解析如下所示：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;14&quot;&gt;
&lt;pre class=&quot;sourceCode sql&quot;&gt;
&lt;code class=&quot;sourceCode sql&quot;&gt;&lt;span class=&quot;kw&quot;&gt;SELECT&lt;/span&gt; [o].[CustomerId], [o].[EmployeeId],
    &lt;span class=&quot;fu&quot;&gt;SUM&lt;/span&gt;([o].[Amount]), &lt;span class=&quot;fu&quot;&gt;MIN&lt;/span&gt;([o].[Amount]), &lt;span class=&quot;fu&quot;&gt;MAX&lt;/span&gt;([o].[Amount]), &lt;span class=&quot;fu&quot;&gt;AVG&lt;/span&gt;([o].[Amount])
&lt;span class=&quot;kw&quot;&gt;FROM&lt;/span&gt; [Orders] &lt;span class=&quot;kw&quot;&gt;AS&lt;/span&gt; [o]
&lt;span class=&quot;kw&quot;&gt;GROUP&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;BY&lt;/span&gt; [o].[CustomerId], [o].[EmployeeId];&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;查询类型&quot;&gt;查询类型&lt;/h2&gt;
&lt;p&gt;EF Core 模型现在可以包含查询类型。与实体类型不同，查询类型没有定义主键，也不能插入、删除或更新操作（即它们是只读的），但它们可以直接由查询返回。查询类型的一些使用场景：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;映射到没有主键的视图&lt;/li&gt;
&lt;li&gt;映射到没有主键的表&lt;/li&gt;
&lt;li&gt;映射到模型中定义的查询&lt;/li&gt;
&lt;li&gt;作为&lt;code&gt;FromSql()&lt;/code&gt;查询的返回类型&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;示例，定义一个简单的&lt;code&gt;Blog&lt;/code&gt;和&lt;code&gt;Post&lt;/code&gt;模型：&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;    public class Blog
    {
        public int BlogId { get; set; }
        public string Name { get; set; }
        public string Url { get; set; }
        public ICollection&amp;lt;Post&amp;gt; Posts { get; set; }
    }
    
    public class Post
    {
        public int PostId { get; set; }
        public string Title { get; set; }
        public string Content { get; set; }
        public int BlogId { get; set; }
    }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;定义一个简单的数据库视图，能够查询每博客与文章数：&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;    db.Database.ExecuteSqlCommand(
        @&quot;CREATE VIEW View_BlogPostCounts AS 
            SELECT Name, Count(p.PostId) as PostCount from Blogs b
            JOIN Posts p on p.BlogId = b.BlogId
            GROUP BY b.Name&quot;);&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;定义一个类映射的数据库视图的结果：&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;    public class BlogPostsCount
    {
        public string BlogName { get; set; }
        public int PostCount { get; set; }
    }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;在&lt;code&gt;DbContext&lt;/code&gt;类的&lt;code&gt;OnModelCreating&lt;/code&gt;使用&lt;code&gt;modelBuilder.Query&amp;lt;T&amp;gt;&lt;/code&gt;API。 我们可以使用标准 fluent 配置 Api 来配置查询类型的映射：&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;    public class SampleDbContext : DbContext
    {
        public DbQuery&amp;lt;BlogPostsCount&amp;gt; BlogPostCounts { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder
                .Query&amp;lt;BlogPostsCount&amp;gt;().ToTable(&quot;View_BlogPostCounts&quot;)
                .Property(v =&amp;gt; v.BlogName).HasColumnName(&quot;Name&quot;);
        }
    }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;查询数据库视图中的标准方式：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;    var postCounts = db.BlogPostCounts.ToList();
    
    foreach (var postCount in postCounts)
    {
        Console.WriteLine($&quot;{postCount.BlogName} has {postCount.PostCount} posts.&quot;);
        Console.WriteLine();
    }&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;最后&quot;&gt;最后&lt;/h2&gt;
&lt;p&gt;EF Core 2.1 Preview1 新增功能的部分内容已经介绍完了，希望对您有帮助。如果文章中描述的功能存在遗漏或错误，请在评论中留言，谢谢！&lt;/p&gt;
</description>
<pubDate>Sun, 11 Mar 2018 22:38:00 +0000</pubDate>
<dc:creator>Sweet-Tang</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/tdfblog/p/entity-framework-core-2-1-preview-1.html</dc:identifier>
</item>
<item>
<title>Rolling Update - 每天5分钟玩转 Docker 容器技术（140） - CloudMan</title>
<link>http://www.cnblogs.com/CloudMan6/p/8543006.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/CloudMan6/p/8543006.html</guid>
<description>&lt;p&gt;&lt;span&gt;滚动更新是一次只更新一小部分副本，成功后，再更新更多的副本，最终完成所有副本的更新。滚动更新的最大的好处是零停机，整个更新过程始终有副本在运行，从而保证了业务的连续性。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;下面我们部署三副本应用，初始镜像为 httpd:2.2.31，然后将其更新到 httpd:2.2.32。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;httpd:2.2.31 的配置文件如下：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/775365/201803/775365-20180311063542455-145915125.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;通过 &lt;/span&gt;&lt;code&gt;&lt;span&gt;kubectl apply&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 部署。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/775365/201803/775365-20180311063557557-887173559.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;部署过程如下：&lt;/span&gt;&lt;/p&gt;
&lt;ol class=&quot; list-paddingleft-2&quot; readability=&quot;-1&quot;&gt;&lt;li&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;创建 Deployment &lt;/span&gt;&lt;code&gt;&lt;span&gt;httpd&lt;/span&gt;&lt;/code&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;创建 ReplicaSet &lt;/span&gt;&lt;code&gt;&lt;span&gt;httpd-551879778&lt;/span&gt;&lt;/code&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;创建三个 Pod&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;当前镜像为 &lt;/span&gt;&lt;code&gt;&lt;span&gt;httpd:2.2.31&lt;/span&gt;&lt;/code&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;将配置文件中 &lt;/span&gt;&lt;code&gt;&lt;span&gt;httpd:2.2.31&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 替换为 &lt;/span&gt;&lt;code&gt;&lt;span&gt;httpd:2.2.32&lt;/span&gt;&lt;/code&gt;&lt;span&gt;，再次执行 &lt;/span&gt;&lt;code&gt;&lt;span&gt;kubectl apply&lt;/span&gt;&lt;/code&gt;&lt;span&gt;。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/775365/201803/775365-20180311063613409-1357523286.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;我们发现了如下变化：&lt;/span&gt;&lt;/p&gt;
&lt;ol class=&quot; list-paddingleft-2&quot; readability=&quot;0.5&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;Deployment &lt;/span&gt;&lt;code&gt;&lt;span&gt;httpd&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 的镜像更新为 &lt;/span&gt;&lt;code&gt;&lt;span&gt;httpd:2.2.32&lt;/span&gt;&lt;/code&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;新创建了 ReplicaSet &lt;/span&gt;&lt;code&gt;&lt;span&gt;httpd-1276601241&lt;/span&gt;&lt;/code&gt;&lt;span&gt;，镜像为 &lt;/span&gt;&lt;code&gt;&lt;span&gt;httpd:2.2.32&lt;/span&gt;&lt;/code&gt;&lt;span&gt;，并且管理了三个新的 Pod。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;之前的 ReplicaSet &lt;/span&gt;&lt;code&gt;&lt;span&gt;httpd-551879778&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 里面已经没有任何 Pod。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;结论是：ReplicaSet &lt;/span&gt;&lt;code&gt;&lt;span&gt;httpd-551879778&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 的三个 &lt;/span&gt;&lt;code&gt;&lt;span&gt;httpd:2.2.31&lt;/span&gt;&lt;/code&gt;&lt;span&gt; Pod 已经被 ReplicaSet &lt;/span&gt;&lt;code&gt;&lt;span&gt;httpd-1276601241&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 的三个 &lt;/span&gt;&lt;code&gt;&lt;span&gt;httpd:2.2.32&lt;/span&gt;&lt;/code&gt;&lt;span&gt; Pod 替换了。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;具体过程可以通过 &lt;/span&gt;&lt;code&gt;&lt;span&gt;kubectl describe deployment httpd&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 查看。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/775365/201803/775365-20180311063631945-183144683.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;每次只更新替换一个 Pod&lt;/span&gt;：&lt;/span&gt;&lt;/p&gt;
&lt;ol class=&quot; list-paddingleft-2&quot; readability=&quot;3&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;ReplicaSet &lt;/span&gt;&lt;code&gt;&lt;span&gt;httpd-1276601241&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 增加一个 Pod，总数为 1。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;ReplicaSet &lt;/span&gt;&lt;code&gt;&lt;span&gt;httpd-551879778&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 减少一个 Pod，总数为 2。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;ReplicaSet &lt;/span&gt;&lt;code&gt;&lt;span&gt;httpd-1276601241&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 增加一个 Pod，总数为 2。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;ReplicaSet &lt;/span&gt;&lt;code&gt;&lt;span&gt;httpd-551879778&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 减少一个 Pod，总数为 1。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;ReplicaSet &lt;/span&gt;&lt;code&gt;&lt;span&gt;httpd-1276601241&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 增加一个 Pod，总数为 3。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;ReplicaSet &lt;/span&gt;&lt;code&gt;&lt;span&gt;httpd-551879778&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 减少一个 Pod，总数为 0。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;每次替换的 Pod 数量是可以定制的。Kubernetes 提供了两个参数 &lt;/span&gt;&lt;code&gt;&lt;span&gt;maxSurge&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 和 &lt;/span&gt;&lt;code&gt;&lt;span&gt;maxUnavailable&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 来精细控制 Pod 的替换数量，我们将在后面结合 Health Check 特性一起讨论。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;下一节我们讨论如何回滚。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;书籍：&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;1.《每天5分钟玩转Docker容器技术》&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;a href=&quot;https://item.jd.com/16936307278.html&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;https://item.jd.com/16936307278.html&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;2.《每天5分钟玩转OpenStack》&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;a href=&quot;https://item.jd.com/12086376.html&quot; target=&quot;_blank&quot;&gt;https://item.jd.com/12086376.html&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img title=&quot;https://i.imgsafe.org/68/68da21ce15.png&quot; src=&quot;https://i.imgsafe.org/68/68da21ce15.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Sun, 11 Mar 2018 21:51:00 +0000</pubDate>
<dc:creator>CloudMan</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/CloudMan6/p/8543006.html</dc:identifier>
</item>
<item>
<title>redis和spring整合使用 - 侠客夜莺</title>
<link>http://www.cnblogs.com/yeyingyx/p/8547286.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/yeyingyx/p/8547286.html</guid>
<description>&lt;p&gt;第一步，在项目中加入redis的pom代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &amp;lt;dependency&amp;gt;
&lt;span&gt;2&lt;/span&gt;     &amp;lt;groupId&amp;gt;redis.clients&amp;lt;/groupId&amp;gt;
&lt;span&gt;3&lt;/span&gt;     &amp;lt;artifactId&amp;gt;jedis&amp;lt;/artifactId&amp;gt;
&lt;span&gt;4&lt;/span&gt;     &amp;lt;version&amp;gt;2.6.0&amp;lt;/version&amp;gt;
&lt;span&gt;5&lt;/span&gt;  &amp;lt;/dependency&amp;gt;　
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;第二步，spring中加载redis配置文件：applicationContext-redis.xml，内容如下&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&amp;lt;bean id=&quot;poolConfig&quot; &lt;span&gt;class&lt;/span&gt;=&quot;redis.clients.jedis.JedisPoolConfig&quot;&amp;gt;
    &amp;lt;property name=&quot;maxTotal&quot; value=&quot;${redis.maxTotal}&quot; /&amp;gt;
&amp;lt;/bean&amp;gt;
    
    &amp;lt;bean &lt;span&gt;class&lt;/span&gt;=&quot;redis.clients.jedis.ShardedJedisPool&quot;&amp;gt;
        &amp;lt;constructor-arg index=&quot;0&quot; ref=&quot;poolConfig&quot; /&amp;gt;
        &amp;lt;constructor-arg index=&quot;1&quot;&amp;gt;
            &amp;lt;list&amp;gt;
                &amp;lt;bean &lt;span&gt;class&lt;/span&gt;=&quot;redis.clients.jedis.JedisShardInfo&quot;&amp;gt;
                    &amp;lt;constructor-arg index=&quot;0&quot; value=&quot;${redis.node1.host}&quot; /&amp;gt;
                    &amp;lt;constructor-arg index=&quot;1&quot; value=&quot;${redis.node1.port}&quot; /&amp;gt;
                &amp;lt;/bean&amp;gt;
            &amp;lt;/list&amp;gt;
        &amp;lt;/constructor-arg&amp;gt;
    &amp;lt;/bean&amp;gt;
&amp;lt;/beans&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;第三步，编写连接redis服务端的属性文件：redis.properties&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
redis.maxTotal=100&lt;span&gt;
redis.node1.host&lt;/span&gt;=127.0.0.1&lt;span&gt;
redis.node1.port&lt;/span&gt;=6379
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;第四步，编写redis的相关操作方法类，Function类和RedisService类：&lt;/p&gt;
&lt;p&gt;Funcrion类:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; xx.service;

&lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * 为了抽取相同的操作代码
 * &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; yeying
 *&amp;lt;p&amp;gt;Description:&amp;lt;/p&amp;gt;
 *&amp;lt;p&amp;gt;Company:&amp;lt;/p&amp;gt;
 * @date:2017年12月5日 下午9:02:44
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt; Function&amp;lt;T,E&amp;gt;&lt;span&gt; {

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; T callback(E e);
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;RedisService类:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;49&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.taotao.common.service;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.beans.factory.annotation.Autowired;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.stereotype.Service;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; redis.clients.jedis.ShardedJedis;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; redis.clients.jedis.ShardedJedisPool;

&lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * redis的相关操作
 * &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; yeying
 *&amp;lt;p&amp;gt;Description:&amp;lt;/p&amp;gt;
 *&amp;lt;p&amp;gt;Company:&amp;lt;/p&amp;gt;
 * @date:2017年12月3日 下午2:11:47
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
@Service
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; RedisService {

    @Autowired(required&lt;/span&gt;=&lt;span&gt;false&lt;/span&gt;) &lt;span&gt;//&lt;/span&gt;&lt;span&gt;需要再注入进去&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt;&lt;span&gt; ShardedJedisPool shardedJedisPool;

    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &amp;lt;T&amp;gt; T execute(Function&amp;lt;T, ShardedJedis&amp;gt;&lt;span&gt; fun){
        ShardedJedis shardedJedis &lt;/span&gt;= &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 从连接池中获取到jedis分片对象&lt;/span&gt;
            shardedJedis =&lt;span&gt; shardedJedisPool.getResource();
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 从redis中获取数据&lt;/span&gt;
            &lt;span&gt;return&lt;/span&gt;&lt;span&gt; fun.callback(shardedJedis);
        } &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception e) {
            e.printStackTrace();
        } &lt;/span&gt;&lt;span&gt;finally&lt;/span&gt;&lt;span&gt; {
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (&lt;span&gt;null&lt;/span&gt; !=&lt;span&gt; shardedJedis) {
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 关闭，检测连接是否有效，有效则放回到连接池中，无效则重置状态&lt;/span&gt;
&lt;span&gt;                shardedJedis.close();
            }
        }
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
    }

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 执行set操作
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; key
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; value
     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;
     &lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; String set(&lt;span&gt;final&lt;/span&gt; String key,&lt;span&gt;final&lt;/span&gt;&lt;span&gt; String value){
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;.execute(&lt;span&gt;new&lt;/span&gt; Function&amp;lt;String, ShardedJedis&amp;gt;&lt;span&gt;() {
            @Override
            &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String callback(ShardedJedis e) {
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; e.set(key, value);
            }
        });
    }

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 执行set操作，并设置生存时间，单位为秒
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; key
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; value
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; seconds
     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;
     &lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; String set(&lt;span&gt;final&lt;/span&gt; String key,&lt;span&gt;final&lt;/span&gt; String value,&lt;span&gt;final&lt;/span&gt;&lt;span&gt; Integer seconds){
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;.execute(&lt;span&gt;new&lt;/span&gt; Function&amp;lt;String, ShardedJedis&amp;gt;&lt;span&gt;() {
            @Override
            &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String callback(ShardedJedis e) {
                String str &lt;/span&gt;=&lt;span&gt;e.set(key, value);
                e.expire(key, seconds);
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; str;
            }
        });
    }

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 执行get操作
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; key
     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;
     &lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; String get(&lt;span&gt;final&lt;/span&gt;&lt;span&gt; String key){
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;.execute(&lt;span&gt;new&lt;/span&gt; Function&amp;lt;String, ShardedJedis&amp;gt;&lt;span&gt;() {
            @Override
            &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String callback(ShardedJedis e) {
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; e.get(key);
            }
        });
    }

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 执行set操作
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; key
     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;
     &lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; Long del(&lt;span&gt;final&lt;/span&gt;&lt;span&gt; String key){
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;.execute(&lt;span&gt;new&lt;/span&gt; Function&amp;lt;Long, ShardedJedis&amp;gt;&lt;span&gt;() {
            @Override
            &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; Long callback(ShardedJedis e) {
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; e.del(key);
            }
        });
    }

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 设置生存时间，单位为秒
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; key
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; seconds
     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;
     &lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; Long expire(&lt;span&gt;final&lt;/span&gt; String key, &lt;span&gt;final&lt;/span&gt;&lt;span&gt; Integer seconds) {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;.execute(&lt;span&gt;new&lt;/span&gt; Function&amp;lt;Long, ShardedJedis&amp;gt;&lt;span&gt;() {
            @Override
            &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; Long callback(ShardedJedis e) {
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; e.expire(key, seconds);
            }
        });
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;第五步，启动redis服务，redis-server.exe,双击打开：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1152210/201803/1152210-20180312014953353-1272997527.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

</description>
<pubDate>Sun, 11 Mar 2018 17:51:00 +0000</pubDate>
<dc:creator>侠客夜莺</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/yeyingyx/p/8547286.html</dc:identifier>
</item>
<item>
<title>有关容器的六大误区和八大正确场景 - popsuper1982</title>
<link>http://www.cnblogs.com/popsuper1982/p/8547251.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/popsuper1982/p/8547251.html</guid>
<description>&lt;p&gt;做容器的研究和容器化几年了，从最初对于容器的初步认识，到积攒了大量的容器迁移经验，并和客户解释了容器技术之后，发现原来对于容器的理解有大量的误解，而且容器并非虚拟机的替代，而是有十分具体的应用场景的。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;第一部分：容器的理解误区&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;误区一：容器启动速度快，秒级启动&lt;/span&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;这是很多人布道容器的时候经常说的一句话，往往人们会启动一个nginx之类的应用，的确很快就能够启动起来了。&lt;/p&gt;

&lt;p&gt;容器为啥启动快，一是没有内核，二是镜像比较小。&lt;/p&gt;

&lt;p&gt;然而容器是有主进程的，也即Entrypoint，只有主进程完全启动起来了，容器才算真正的启动起来，一个比喻是&lt;span&gt;&lt;strong&gt;容器更像人的衣服，人站起来了，衣服才站起来，人躺下了，衣服也躺下了。衣服有一定的隔离性，但是隔离性没那么好。衣服没有根(内核)，但是衣服可以随着人到处走。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;所以按照一个nginx来评判一个容器的启动速度有意义么？对于Java应用，里面安装的是tomcat，而tomcat的启动，加载war，并且真正的应用启动起来，如果你盯着tomcat的日志看的话，还是需要一些时间的，根本不是秒级。如果应用启动起来要一两分钟，仅仅谈容器的秒级启动是没有意义的。&lt;/p&gt;

&lt;p&gt;现在OpenStack中的VM的启动速度也优化的越来越快了，启动一个VM的时候&lt;/p&gt;
&lt;p&gt;，原来需要从Glance下载虚拟机镜像，后来有了一个技术，是的Glance和系统盘共享Ceph存储的情况下，虚拟机镜像无需下载，启动速度就快很多。&lt;/p&gt;

&lt;p&gt;而且容器之所以启动速度快，往往建议使用一个非常小的镜像，例如alpine，里面很多东西都裁剪掉了，启动的速度就更快了。&lt;/p&gt;

&lt;p&gt;OpenStack的虚拟机镜像也可以经过大量的裁剪，实现快速的启动&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/635909/201803/635909-20180311232145856-1649234901.jpg&quot; alt=&quot;&quot;/&gt; &lt;/p&gt;
&lt;p&gt;我们可以精细的衡量虚拟机启动的每一个步骤，裁剪掉相应的模块和启动的过程，大大降低虚拟机的启动时间。&lt;/p&gt;

&lt;p&gt;例如在UnitedStack的一篇博客里面https://www.ustack.com/blog/build-block-storage-service，我们可以看到这样的实现和描述&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/635909/201803/635909-20180311232332619-583714572.jpg&quot; alt=&quot;&quot; width=&quot;649&quot; height=&quot;439&quot;/&gt;&lt;/p&gt;

&lt;p&gt;“使用原生的OpenStack创建虚拟机需要1~3分钟，而使用改造后的OpenStack仅需要不到10秒钟时间。这是因为nova-compute不再需要通过HTTP下载整个镜像，虚拟机可以通过直接读取Ceph中的镜像数据进行启动。”&lt;/p&gt;

&lt;p&gt;所以对于虚拟机的整体启动时间，现在优化的不错的情况下，一般能够做到十几秒到半分钟以内。这个时间和Tomcat的启动时间相比较，其实不算是负担，和容器的启动速度相比，没有质的差别，可能有人会说启动速度快一点也是快，尤其是对于在线环境的挂掉自修复来讲，不是分秒必争么？关于自修复的问题，我们下面另外说。&lt;/p&gt;

&lt;p&gt;然而虚拟机有一个好处，就是隔离性好，如果容器是衣服，&lt;span&gt;&lt;strong&gt;虚拟机就是房子，房子立在那里，里面的人无论站着还是躺着，房子总是站着的，房子也不会跟着人走。使用虚拟机就像人们住在公寓里面一样，每人一间，互补干扰，使用容器像大家穿着衣服挤在公交车里面，看似隔离，谁把公交弄坏了，谁都走不了。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;综上所述，&lt;span&gt;&lt;strong&gt;容器的启动速度不足以构成对OpenStack虚拟机的明显优势，然而虚拟机的隔离性，则秒杀容器。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;误区二：容器轻量级，每个主机会运行成百上千个容器&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;很多人会做实验，甚至会跟客户说，容器平台多么多么牛，你看我们一台机器上可以运行成百上千个容器，虚拟机根本做不到这一点。&lt;/p&gt;

&lt;p&gt;但是一个机器运行成百上千个容器，有这种真实的应用场景么？对于容器来讲，重要的是里面的应用，应用的核心在于稳定性和高并发支撑，而不在于密度。&lt;/p&gt;

&lt;p&gt;我在很多演讲的会议上遇到了很多知名的处理双十一和618的讲师，普遍反馈当前的Java应用基本上4核8G是标配，如果遇见容量不足的情况，少部分通过纵向扩容的方式进行，大部分采用横向扩容的方式进行。&lt;/p&gt;

&lt;p&gt;如果4核8G是标配，不到20个服务就可以占满一台物理服务器，一台机器跑成百上千个nginx有意思么？ 这不是一个严肃的使用场景。&lt;/p&gt;

&lt;p&gt;当然现在有一个很火的Serverless无服务架构，在无服务器架构中，所有自定义代码作为孤立的、独立的、常常细粒度的函数来编写和执行，这些函数在例如AWS Lambda之类的无状态计算服务中运行。这些计算服务可以是虚拟机，也可以是容器。对于无状态的函数来讲，需要快速的创建可删除，而且很可能执行一个函数的时间本身就非常短，在这种情况下容器相比于虚拟机还是有一定优势的。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/635909/201803/635909-20180311233124982-1085950368.png&quot; alt=&quot;&quot;/&gt; &lt;/p&gt;

&lt;p&gt;目前无服务架构比较适用于运行一些任务型批量操作，利用进程级别的横向弹性能力来抵消进程创建和销毁带来的较大的代价。&lt;/p&gt;

&lt;p&gt;在spark和mesos的集成中，有一个Fine-Grained模式，同通常大数据的执行的时候，任务的执行进程早就申请好了资源，等在那里分配资源不同，这种模式是当任务分配到的时候才分配资源，好处就是对于资源的弹性申请和释放的能力，坏处是进程的创建和销毁还是粒度太大，所以这种模式下spark运行的性能会差一些。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/635909/201803/635909-20180311234147123-327254313.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt;spark的这种做法思想类似无服务架构，你会发现我们原来学操作系统的时候，说进程粒度太大，每次都创建和销毁进程会速度太慢，为了高并发，后来有了线程，线程的创建和销毁轻量级的多，当然还是觉得慢，于是有了线程池，事先创建在了那里，用的时候不用现创建，不用的时候交回去就行，后来还是觉得慢，因为线程的创建也需要在内核中完成，所以后来有了协程，全部在用户态进行线程切换，例如AKKA，Go都使用了协程，你会发现趋势是为了高并发，粒度是越来越细的，现在很多情况又需要进程级别的，有种风水轮流转的感觉。&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;误区三：容器有镜像，可以保持版本号，可以升级和回滚&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;容器有两个特性，一个是封装，一个是标准。有了容器镜像，就可以将应用的各种配置，文件路径，权限封装起来，然后像孙悟空说“定”,就定在了封装好的那一刻。镜像是标准的，无论在哪个容器运行环境，将同样的镜像运行起来，都能还原当时的那一刻。&lt;/p&gt;

&lt;p&gt;容器的镜像还有版本号，我们可以根据容器的版本号进行升级，一旦升级有错，可以根据版本号进行回滚，回滚完毕则能够保证容器内部还是原来的状态。&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/635909/201803/635909-20180312002842777-1747475733.png&quot; alt=&quot;&quot; width=&quot;346&quot; height=&quot;326&quot;/&gt;&lt;/p&gt;
&lt;p&gt;但是OpenStack虚拟机也是有镜像的，虚拟机镜像也是可以打snapshot的，打snapshot的时候，也会保存当时的那一刻所有的状态，而且snapshot也可以有版本号，也可以升级和回滚。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/635909/201803/635909-20180312002820801-1052907784.png&quot; alt=&quot;&quot; width=&quot;968&quot; height=&quot;57&quot;/&gt;&lt;/p&gt;


&lt;p&gt;似乎容器有的这些特性OpenStack虚拟机都有，二者有什么不同呢？&lt;/p&gt;

&lt;p&gt;虚拟机镜像大，而容器镜像小。虚拟机镜像动不动就几十个G甚至上百G，而容器镜像多几百M。&lt;/p&gt;

&lt;p&gt;虚拟机镜像不适合跨环境迁移。例如开发环境在本地，测试环境在一个OpenStack上，开发环境在另一个OpenStack上，虚拟机的镜像的迁移非常困难，需要拷贝非常大的文件。而容器就好的多，因为镜像小，可以很快的从不同的环境之间迁移。&lt;/p&gt;

&lt;p&gt;虚拟机镜像不适合跨云迁移。当前没有一个公有云平台支持虚拟机镜像的下载和上传(安全的原因，盗版的原因)，因而一个镜像在不同的云之间，或者同一个云不同的region直接，无法进行迁移，只能重新做一个镜像，这样环境的一致性就得不到保障。而容器的镜像中心是独立于云之外的，只要能够连上镜像中心，到哪个云上都可以下载，并且因为镜像小，下载速度快，并且镜像是分层的，每次只需要下载差异的部分。&lt;/p&gt;

&lt;p&gt;OpenStack对于镜像方面的优化，基本上还是在一个云里面起作用，一旦跨多个环境，镜像方便的多。&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;误区四：容器可以使用容器平台管理自动重启实现自修复&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;容器的自修复功能是经常被吹嘘的。因为容器是衣服，人躺下了，衣服也躺下了，容器平台能够马上发现人躺下了，于是可以迅速将人重新唤醒工作。而虚拟机是房子，人躺下了，房子还站着，因而虚拟机管理平台不知道里面的人能不能工作，所以容器挂了会被自动重启，而虚拟机里面的应用挂了，只要虚拟机不挂，很可能没人知道。&lt;/p&gt;

&lt;p&gt;这些说法都没错，但是人们慢慢发现了另外的场景，就是容器里面的应用没有挂，所以容器看起来还启动着，但是应用以及不工作没有反应了。当启动容器的时候，虽然容器的状态起来了，但是里面的应用还需要一段时间才能提供服务。所以针对这种场景，容器平台会提供对于容器里面应用的health check，不光看容器在不在，还要看里面的应用能不能用，如果不能，可自动重启。&lt;/p&gt;

&lt;p&gt;一旦引入了health check，和虚拟机的差别也不大了，因为有了health check，虚拟机也能看里面的应用是否工作了，不工作也可以重启应用。&lt;/p&gt;

&lt;p&gt;还要就是容器的启动速度快，秒级启动，如果能够自动重启修复，那就是秒级修复，所以应用更加高可用。&lt;/p&gt;

&lt;p&gt;这个观点当然不正确，应用的高可用性和重启的速度没有直接关系。高可用性一定要通过多个副本来实现，在任何一个挂掉之后，不能通过这一个应用快速重启来解决，而是应该靠挂掉的期间，其他的副本马上把任务接过来进行解决。虚拟机和容器都可以有多副本，在有多个副本的情况下，重启是一秒还是20秒，就没那么重要了，重要的是挂掉的这段时间内，程序做了什么，如果程序做的是无关紧要的操作，那么挂了20秒，也没啥关系，如果程序正在进行一个交易和支付，那挂掉一秒也不行，也必须能够修复回来。所以应用的高可用性要靠应用层的重试，幂等去解决，而不应该靠基础设施层重启的快不快来解决。&lt;/p&gt;

&lt;p&gt;对于无状态服务，在做好重试的机制的情况下，通过自动重启修复是没有问题的，因为无状态的服务不会保存非常重要的操作。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/635909/201803/635909-20180312003309408-1449050614.png&quot; alt=&quot;&quot; width=&quot;641&quot; height=&quot;338&quot;/&gt;&lt;/p&gt;


&lt;p&gt;对于有状态服务，容器的重启不但不是推荐的，而且可能是灾难的开始。一个服务有状态，例如数据库，在高并发场景下，一旦挂了，哪怕只有一秒，我们必须要弄清楚这一秒都发生了什么，哪些数据保存了，哪些数据丢了，而不能盲目的重启，否则会很可能造成数据的不一致性，后期修都没法修。例如高频交易下的数据库挂了，按说DBA应该严格审核丢了哪些数据，而不是在DBA不知情的情况下，盲目的重启了，DBA还觉得没什么事情发生，最终很久才能发现问题。&lt;/p&gt;

&lt;p&gt;所以容器比较适合部署无状态服务的，随便重启都可以。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/635909/201803/635909-20180312003505429-431263702.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt;而容器部署有状态容器不是不能，而是要非常小心，甚至都是不推荐的。虽然很多的容器平台都支持有状态容器，然而平台往往解决不了数据问题，除非你对容器里面的应用非常非常非常熟悉，当容器挂了，你能够准确的知道丢了哪些，哪些要紧，哪些不要紧，而且要写代码处理这些情况，然后才能支持重启。网易这面的数据库主备同步的情况下，是通过修改mysql源代码，保证主备之间数据完全同步，才敢在主挂了的情况下，备自动切换主。&lt;/p&gt;

&lt;p&gt;而宣传有状态容器的自动重启，对于服务客户来讲是很不经济的行为，因为客户往往没有那么清楚应用的逻辑，甚至应用都是买的，如果使用有状态容器，任凭自动重启，最终客户发现数据丢失的时候，还是会怪到你的头上。&lt;/p&gt;

&lt;p&gt;所以有状态的服务自动重启不是不可用，需要足够专业才行。&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;误区五：容器可以使用容器平台进行服务发现&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;容器平台swarm, kubernetes，mesos都是支持服务发现的，当一个服务访问另一个服务，都会有服务名转化为VIP，然后访问具体的容器。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/635909/201803/635909-20180312003601412-2074790102.png&quot; alt=&quot;&quot; width=&quot;818&quot; height=&quot;161&quot;/&gt;&lt;/p&gt;


&lt;p&gt;然而人们会发现，基于Java写的应用，服务之间的调用多不会用容器平台的服务发现，而是用Dubbo或者spring cloud的服务发现。因为容器平台层的服务发现，还是做的比较基础，基本是一个域名映射的过程，对于熔断，限流，降级都没有很好的支持，然而既然使用服务发现，还是希望服务发现中间件能够做到这一点，因而服务之间的服务发现之间使用容器平台的少，越是需要高并发的应用，越是如此。&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/635909/201803/635909-20180312003721919-2023530382.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;那容器平台的服务发现没有用了么？不是，慢慢你会发现，内部的服务发现是一方面，这些Dubbo和spring cloud能够搞定，而外部的服务发现就不同了，比如访问数据库，缓存等，到底是应该配置一个数据库服务的名称，还是IP地址呢？如果使用IP地址，会造成配置十分复杂，因为很多应用配置之所以复杂，就是依赖了太多的外部应用，也是最难管理的一方面。如果有了外部的服务发现，配置就会简单很多，也只需要配置外部服务的名称就可以了，如果外部服务地址变了，可以很灵活的改变外部的服务发现。&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;误区六：容器可以基于镜像进行弹性伸缩&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;在容器平台上，容器有副本数的，只要将副本数从5改到10，容器就基于镜像进行了弹性伸缩。其实这一点虚拟机也能做到，AWS的Autoscaling就是基于虚拟机镜像的，如果在同一个云里面，就没有区别。&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/635909/201803/635909-20180312004331412-1317975117.png&quot; alt=&quot;&quot; width=&quot;490&quot; height=&quot;373&quot;/&gt;&lt;/p&gt;
&lt;p&gt;当然如果跨云无状态容器的弹性伸缩，容器方便很多，可以实现混合云模式，当高并发场景下，将无状态容器扩容到公有云，这一点虚拟机是做不到的。&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/635909/201803/635909-20180312004343449-50341795.png&quot; alt=&quot;&quot; width=&quot;617&quot; height=&quot;347&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;容器理解误区总结&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/635909/201803/635909-20180312005031773-1635855506.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;如图，左面是经常挂在嘴边的所谓容器的优势，但是虚拟机都能一一怼回去。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;如果部署的是一个传统的应用，这个应用启动速度慢，进程数量少，基本不更新，那么虚拟机完全能够满足需求。&lt;/strong&gt;&lt;/p&gt;

&lt;ul class=&quot;list-paddingleft-2&quot; readability=&quot;3.5&quot;&gt;&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;应用启动慢：应用启动15分钟，容器本身秒级，虚拟机很多平台能优化到十几秒，两者几乎看不出差别&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;内存占用大：动不动32G，64G内存，一台机器跑不了几个。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;基本不更新：半年更新一次，虚拟机镜像照样能够升级和回滚&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;应用有状态：停机会丢数据，如果不知道丢了啥，就算秒级启动有啥用，照样恢复不了，而且还有可能因为丢数据，在没有修复的情况下，盲目重启带来数据混乱。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;进程数量少：两三个进程相互配置一下，不用服务发现，配置不麻烦&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果是一个传统应用，根本没有必要花费精去容器化，因为白花了力气，享受不到好处。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;第二部分：容器化，微服务，DevOps三位一体&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/635909/201803/635909-20180312005411965-1281057057.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;什么情况下，才应该考虑做一些改变呢？&lt;/p&gt;

&lt;p&gt;传统业务突然被互联网业务冲击了，应用老是变，三天两头要更新，而且流量增大了，原来支付系统是取钱刷卡的，现在要互联网支付了，流量扩大了N倍。&lt;/p&gt;

&lt;p&gt;没办法，一个字：拆&lt;/p&gt;

&lt;p&gt;拆开了，每个子模块独自变化，少相互影响。&lt;/p&gt;
&lt;p&gt;拆开了，原来一个进程扛流量，现在多个进程一起扛。&lt;/p&gt;

&lt;p&gt;所以称为&lt;strong&gt;微服务&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/635909/201803/635909-20180312005425730-463620338.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;微服务场景下，进程多，更新快，于是出现100个进程，每天一个镜像。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;容器乐了，每个容器镜像小，没啥问题，虚拟机哭了，因为虚拟机每个镜像太大了。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;所以微服务场景下，可以开始考虑用容器了。&lt;/strong&gt;&lt;/p&gt;


&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/635909/201803/635909-20180312005440927-939641532.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;虚拟机怒了，老子不用容器了，微服务拆分之后，用Ansible自动部署是一样的。&lt;/p&gt;

&lt;p&gt;这样说从技术角度来讲没有任何问题。&lt;/p&gt;

&lt;p&gt;然而问题是从组织角度出现的。&lt;/p&gt;

&lt;p&gt;一般的公司，开发会比运维多的多，开发写完代码就不用管了，环境的部署完全是运维负责，运维为了自动化，写Ansible脚本来解决问题。&lt;/p&gt;

&lt;p&gt;然而这么多进程，又拆又合并的，更新这么快，配置总是变，Ansible脚本也要常改，每天都上线，不得累死运维。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;所以这如此大的工作量情况下，运维很容易出错，哪怕通过自动化脚本。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;这个时候，容器就可以作为一个非常好的工具运用起来。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;除了容器从技术角度，能够使得大部分的内部配置可以放在镜像里面之外，更重要的是从流程角度，将环境配置这件事情，往前推了，推到了开发这里，要求开发完毕之后，就需要考虑环境部署的问题，而不能当甩手掌柜。&lt;/p&gt;

&lt;p&gt;这样做的好处就是，虽然进程多，配置变化多，更新频繁，但是对于某个模块的开发团队来讲，这个量是很小的，因为5-10个人专门维护这个模块的配置和更新，不容易出错。&lt;/p&gt;

&lt;p&gt;如果这些工作量全交给少数的运维团队，不但信息传递会使得环境配置不一致，部署量会大非常多。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;容器是一个非常好的工具，就是让每个开发仅仅多做5%的工作，就能够节约运维200%的工作，并且不容易出错。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;然而本来原来运维该做的事情开发做了，开发的老大愿意么？开发的老大会投诉运维的老大么？&lt;/p&gt;

&lt;p&gt;这就不是技术问题了，其实这就是DevOps，DevOps不是不区分开发和运维，而是公司从组织到流程，能够打通，看如何合作，边界如何划分，对系统的稳定性更有好处。&lt;/p&gt;


&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/635909/201803/635909-20180312005514286-709259076.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;所以微服务，DevOps，容器是相辅相成，不可分割的。&lt;/p&gt;

&lt;p&gt;不是微服务，根本不需要容器，虚拟机就能搞定，不需要DevOps，一年部署一次，开发和运维沟通再慢都能搞定。&lt;/p&gt;

&lt;p&gt;所以，&lt;strong&gt;容器的本质是基于镜像的跨环境迁移。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;镜像是容器的根本性发明，是封装和运行的标准，其他什么namespace，cgroup，早就有了。这是技术方面。&lt;/p&gt;

&lt;p&gt;在流程方面，镜像是DevOps的良好工具。&lt;/p&gt;

&lt;p&gt;容器是为了跨环境迁移的，第一种迁移的场景是开发，测试，生产环境之间的迁移。如果不需要迁移，或者迁移不频繁，虚拟机镜像也行，但是总是要迁移，带着几百G的虚拟机镜像，太大了。&lt;/p&gt;

&lt;p&gt;第二种迁移的场景是跨云迁移，跨公有云，跨Region，跨两个OpenStack的虚拟机迁移都是非常麻烦，甚至不可能的，因为公有云不提供虚拟机镜像的下载和上传功能，而且虚拟机镜像太大了，一传传一天。&lt;/p&gt;

&lt;p&gt;所以跨云场景下，混合云场景下，容器也是很好的使用场景。这也同时解决了仅仅私有云资源不足，扛不住流量的问题。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;第三部分：容器的正确使用场景&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;根据以上的分析，我们发现容器推荐使用在下面的场景下。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. 部署无状态服务，同虚拟机互补使用，实现隔离性&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2. 如果要部署有状态服务，需要对里面的应用十分的了解&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3. 作为持续集成的重要工具，可以顺利在开发，测试，生产之间迁移&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4. 适合部署跨云，跨Region，跨数据中心，混合云场景下的应用部署和弹性伸缩&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5. 以容器作为应用的交付物，保持环境一致性，树立不可变更基础设施的理念&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;6. 运行进程基本的任务类型的程序&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;7. 用于管理变更，变更频繁的应用使用容器镜像和版本号，轻量级方便的多&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;8. 使用容器一定要管理好应用，进行health check和容错的设计&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;欢迎关注微信公众号&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/635909/201803/635909-20180312005720548-893285116.jpg&quot; alt=&quot;&quot;/&gt;&lt;/strong&gt;&lt;/p&gt;
</description>
<pubDate>Sun, 11 Mar 2018 16:58:00 +0000</pubDate>
<dc:creator>popsuper1982</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/popsuper1982/p/8547251.html</dc:identifier>
</item>
<item>
<title>Maven 搭建 SSM 项目 （oracle） - 筱月</title>
<link>http://www.cnblogs.com/ainyi/p/8547106.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/ainyi/p/8547106.html</guid>
<description>&lt;p&gt;简单谈一下maven搭建 ssm 项目 （使用数据库oracle，比 mysql 难，所以这里谈一下）&lt;/p&gt;
&lt;p&gt;在创建maven 的web项目时，常常会缺了main/java ， main/test 两个文件夹。&lt;/p&gt;
&lt;p&gt;解决方法：&lt;/p&gt;
&lt;p&gt;① ： 在项目上右键选择properties，然后点击java build path，在Librarys下，编辑JRE System Library，选择workspace default jre就可以了。 （推荐使用这种）&lt;/p&gt;
&lt;p&gt;② ：手动创建 目录。切换视图采用Navigator视图，直接在src/main目录下建立 Java目录。&lt;/p&gt;

&lt;h2&gt;项目目录结构：&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1344447/201803/1344447-20180311233623086-901869948.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h2&gt;重要的配置文件：&lt;/h2&gt;
&lt;p&gt;对象模型配置文件： pom.xml&lt;/p&gt;
&lt;p&gt;Spring的配置文件：applicationContext.xml&lt;/p&gt;
&lt;p&gt;spring MVC配置文件： springmvc.xml &lt;/p&gt;
&lt;p&gt;数据库配置文件： jdbc.properties&lt;/p&gt;
&lt;p&gt;日志配置文件： log4j.properties&lt;/p&gt;
&lt;p&gt;mybatis配置文件： mybatis-config.xml&lt;/p&gt;
&lt;p&gt;网络程序配置文件：web.xml&lt;/p&gt;

&lt;h2&gt;首先配置pom.xml&lt;/h2&gt;
&lt;p&gt;pom.xml 主要描述了项目的maven坐标，依赖关系，自动引入jar包&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;project &lt;/span&gt;&lt;span&gt;xmlns&lt;/span&gt;&lt;span&gt;=&quot;http://maven.apache.org/POM/4.0.0&quot;&lt;/span&gt;&lt;span&gt; xmlns:xsi&lt;/span&gt;&lt;span&gt;=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt;
&lt;span&gt;  2&lt;/span&gt; &lt;span&gt;    xsi:schemaLocation&lt;/span&gt;&lt;span&gt;=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;  3&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;modelVersion&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;4.0.0&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;modelVersion&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;  4&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;com.krry&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;  5&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;maven_SSM&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;  6&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;0.0.1-SNAPSHOT&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;  7&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;maven_SSM&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;  8&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;url&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;http://maven.apache.org&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;url&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;  9&lt;/span&gt; 
&lt;span&gt; 10&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependencies&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 11&lt;/span&gt;         &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;引入junit  &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 12&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 13&lt;/span&gt;           &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;junit&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 14&lt;/span&gt;           &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;junit&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 15&lt;/span&gt;           &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;4.11&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 16&lt;/span&gt;           &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;scope&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;test&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;scope&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 17&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 18&lt;/span&gt;         &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;引入servlet  &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 19&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 20&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;javax.servlet&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 21&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;servlet-api&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 22&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;3.0-alpha-1&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 23&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;scope&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;provided&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;scope&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 24&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 25&lt;/span&gt;         &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;引入jstl的包  &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 26&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 27&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;jstl&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 28&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;jstl&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 29&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;1.2&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 30&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;scope&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;provided&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;scope&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 31&lt;/span&gt;          &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 32&lt;/span&gt;          
&lt;span&gt; 33&lt;/span&gt;          &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;引入jsp的编译依赖  &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 34&lt;/span&gt;          &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 35&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;javax.servlet.jsp&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 36&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;jsp-api&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 37&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;2.2&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 38&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;scope&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;provided&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;scope&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 39&lt;/span&gt;          &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 40&lt;/span&gt;          
&lt;span&gt; 41&lt;/span&gt;          &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;引入log4j  &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 42&lt;/span&gt;          &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 43&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;log4j&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 44&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;log4j&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 45&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;1.2.17&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 46&lt;/span&gt;           &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 47&lt;/span&gt;          
&lt;span&gt; 48&lt;/span&gt;          &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;spring springmvc mybatis  &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 49&lt;/span&gt;          &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; spring和springmvc相关的构建  jar &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;    
&lt;span&gt; 50&lt;/span&gt;          &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 51&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 52&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-context&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 53&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;4.2.1.RELEASE&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 54&lt;/span&gt;           &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 55&lt;/span&gt;           
&lt;span&gt; 56&lt;/span&gt;           &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 57&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 58&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-jdbc&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 59&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;4.2.1.RELEASE&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 60&lt;/span&gt;           &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 61&lt;/span&gt;                
&lt;span&gt; 62&lt;/span&gt;           &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; springmvc相关 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 63&lt;/span&gt;          &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 64&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 65&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-webmvc&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 66&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;4.2.1.RELEASE&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 67&lt;/span&gt;           &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 68&lt;/span&gt;           
&lt;span&gt; 69&lt;/span&gt;           &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;springmvc需要用到json的转换包 jackson  &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 70&lt;/span&gt;          &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 71&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;com.fasterxml.jackson.core&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 72&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;jackson-core&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 73&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;2.5.4&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 74&lt;/span&gt;           &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 75&lt;/span&gt;           
&lt;span&gt; 76&lt;/span&gt;           &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 77&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;com.fasterxml.jackson.core&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 78&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;jackson-annotations&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 79&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;2.5.4&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 80&lt;/span&gt;           &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 81&lt;/span&gt;          
&lt;span&gt; 82&lt;/span&gt;          &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 83&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;com.fasterxml.jackson.core&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 84&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;jackson-databind&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 85&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;2.5.4&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 86&lt;/span&gt;           &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 87&lt;/span&gt;           
&lt;span&gt; 88&lt;/span&gt;           &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;JSR303 后台校验 hibernate validator &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;     
&lt;span&gt; 89&lt;/span&gt;          &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 90&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.hibernate&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 91&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;hibernate-validator&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 92&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;5.1.1.Final&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 93&lt;/span&gt;           &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 94&lt;/span&gt;          
&lt;span&gt; 95&lt;/span&gt;          &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;上传文件相关的jar包  &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 96&lt;/span&gt;          &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 97&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;commons-io&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 98&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;commons-io&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 99&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;2.4&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;100&lt;/span&gt;           &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;101&lt;/span&gt;           
&lt;span&gt;102&lt;/span&gt;           &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;103&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;commons-fileupload&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;104&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;commons-fileupload&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;105&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;1.3.1&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;106&lt;/span&gt;           &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;107&lt;/span&gt;           
&lt;span&gt;108&lt;/span&gt;           &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;109&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.apache.commons&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;110&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;commons-lang3&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;111&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;3.3.2&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;112&lt;/span&gt;           &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;113&lt;/span&gt;           
&lt;span&gt;114&lt;/span&gt;           &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;跟加密算法相关的codeC  &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;115&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;116&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;commons-codec&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;117&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;commons-codec&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;118&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;1.9&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;119&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;120&lt;/span&gt;          
&lt;span&gt;121&lt;/span&gt;          &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;orm或者jdbc组件需要用到的jar包 mybatis  &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;122&lt;/span&gt;         &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;oracle数据库驱动  &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;123&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;124&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;com.oracle&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;    
&lt;span&gt;125&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;ojdbc6&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;    
&lt;span&gt;126&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;12.1.0.2.0&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;127&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;128&lt;/span&gt;         
&lt;span&gt;129&lt;/span&gt;         &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; proxool连接池 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;130&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;131&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;com.cloudhopper.proxool&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;132&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;proxool&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;133&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;0.9.1&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;134&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;135&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;136&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;com.cloudhopper.proxool&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;137&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;proxool-cglib&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;138&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;0.9.1&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;139&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;140&lt;/span&gt; 
&lt;span&gt;141&lt;/span&gt; 
&lt;span&gt;142&lt;/span&gt; 
&lt;span&gt;143&lt;/span&gt;          
&lt;span&gt;144&lt;/span&gt;          &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;引入mybatis需要的jar包  &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;145&lt;/span&gt;          &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;146&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.mybatis&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;147&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;mybatis&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;148&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;3.3.1&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;149&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;150&lt;/span&gt;         
&lt;span&gt;151&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;152&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.mybatis&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;153&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;mybatis-spring&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;154&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;1.2.4&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;155&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;156&lt;/span&gt;         
&lt;span&gt;157&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;158&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;com.github.pagehelper&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;159&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;pagehelper&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;160&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;4.2.1&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;161&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;162&lt;/span&gt;         
&lt;span&gt;163&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependencies&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;164&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;build&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;165&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;plugins&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;  
&lt;span&gt;166&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;plugin&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;  
&lt;span&gt;167&lt;/span&gt;                 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;maven-compiler-plugin&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;  
&lt;span&gt;168&lt;/span&gt;                 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;configuration&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;  
&lt;span&gt;169&lt;/span&gt;                     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;source&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;1.7&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;source&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;  
&lt;span&gt;170&lt;/span&gt;                     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;target&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;1.7&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;target&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;  
&lt;span&gt;171&lt;/span&gt;                 &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;configuration&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;  
&lt;span&gt;172&lt;/span&gt;             &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;plugin&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;  
&lt;span&gt;173&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;plugin&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;  
&lt;span&gt;174&lt;/span&gt;                 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;maven-war-plugin&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;  
&lt;span&gt;175&lt;/span&gt;                 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;2.4&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;  
&lt;span&gt;176&lt;/span&gt;                 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;configuration&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;  
&lt;span&gt;177&lt;/span&gt;                     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;3.0&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;  
&lt;span&gt;178&lt;/span&gt;                 &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;configuration&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;  
&lt;span&gt;179&lt;/span&gt;             &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;plugin&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;  
&lt;span&gt;180&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;plugins&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;  
&lt;span&gt;181&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;finalName&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;maven_SSM&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;finalName&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;  
&lt;span&gt;182&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;build&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;  
&lt;span&gt;183&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;project&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这里说一下maven工程利用pom.xml导入oracle驱动包的问题：&lt;/p&gt;
&lt;p&gt;由于Oracle授权问题，Maven不提供Oracle JDBC driver，为了在Maven项目中应用Oracle JDBC driver，必须手动添加到本地仓库。&lt;/p&gt;
&lt;p&gt;如果电脑中已经装有Oracle数据库，则在安装路径下有数据库的驱动程序，可以直接用。D:\Oracle\oraclexe\app\oracle\product\10.2.0\server\jdbc\lib&lt;/p&gt;
&lt;p&gt;也可以直接到Oracle官网上下载Oracle数据库驱动， 使用SQL语句查询数据库驱动的版本： SELECT * FROM v$instance&lt;/p&gt;
&lt;p&gt;然后确定版本下载：&lt;a href=&quot;http://www.oracle.com/technetwork/database/features/jdbc/default-2280470.html&quot; target=&quot;_blank&quot;&gt;http://www.oracle.com/technetwork/database/features/jdbc/default-2280470.html&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;打开windows的命令行界面，进入驱动包ojdbc6的目录，然后运行：&lt;br/&gt;mvn install:install-file -DgroupId=com.oracle -DartifactId=ojdbc6 -Dversion=12.1.0.2.0 -Dpackaging=jar -Dfile=ojdbc6.jar&lt;br/&gt;显示&quot;BUILD SUCCESS&quot; 成功&lt;/p&gt;&lt;p&gt;然后就可以在maven项目里添加dependency，各坐标对应上面这个命令的个元素，如下：&lt;br/&gt;    &amp;lt;dependency&amp;gt;      &lt;br/&gt;      &amp;lt;groupId&amp;gt;com.oracle&amp;lt;/groupId&amp;gt;      &lt;br/&gt;      &amp;lt;artifactId&amp;gt;ojdbc6&amp;lt;/artifactId&amp;gt;      &lt;br/&gt;      &amp;lt;version&amp;gt;12.1.0.2.0&amp;lt;/version&amp;gt;&lt;br/&gt;    &amp;lt;/dependency&amp;gt;  &lt;/p&gt;

&lt;h2&gt;Spring的配置文件：applicationContext.xml&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;&amp;lt;?&lt;/span&gt;&lt;span&gt;xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;?&amp;gt;&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;beans &lt;/span&gt;&lt;span&gt;xmlns&lt;/span&gt;&lt;span&gt;=&quot;http://www.springframework.org/schema/beans&quot;&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;    xmlns:xsi&lt;/span&gt;&lt;span&gt;=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt;&lt;span&gt; xmlns:aop&lt;/span&gt;&lt;span&gt;=&quot;http://www.springframework.org/schema/aop&quot;&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;    xmlns:context&lt;/span&gt;&lt;span&gt;=&quot;http://www.springframework.org/schema/context&quot;&lt;/span&gt;&lt;span&gt; xmlns:tx&lt;/span&gt;&lt;span&gt;=&quot;http://www.springframework.org/schema/tx&quot;&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;    xmlns:util&lt;/span&gt;&lt;span&gt;=&quot;http://www.springframework.org/schema/util&quot;&lt;/span&gt;&lt;span&gt; xmlns:p&lt;/span&gt;&lt;span&gt;=&quot;http://www.springframework.org/schema/p&quot;&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;    xsi:schemaLocation&lt;/span&gt;&lt;span&gt;=&quot;http://www.springframework.org/schema/beans   
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;  http://www.springframework.org/schema/beans/spring-beans.xsd  
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;  http://www.springframework.org/schema/aop   
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;  http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;  http://www.springframework.org/schema/tx   
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;  http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;  http://www.springframework.org/schema/context   
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;  http://www.springframework.org/schema/context/spring-context-3.0.xsd
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;  http://www.springframework.org/schema/util   
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;  http://www.springframework.org/schema/util/spring-util-3.0.xsd
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;  &quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt;     
&lt;span&gt;18&lt;/span&gt;     
&lt;span&gt;19&lt;/span&gt;     &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 配置包扫描 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;context:component-scan &lt;/span&gt;&lt;span&gt;base-package&lt;/span&gt;&lt;span&gt;=&quot;com.krry&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;context:component-scan&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;21&lt;/span&gt;         
&lt;span&gt;22&lt;/span&gt;     &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 导入外部资源文件 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;23&lt;/span&gt;     &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; &amp;lt;context:property-placeholder location=&quot;classpath:jdbc.properties&quot; /&amp;gt;  &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;24&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;bean &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;com.krry.core.des.EncryptPropertyPlaceholderConfigurer&quot;&lt;/span&gt;
&lt;span&gt;25&lt;/span&gt; &lt;span&gt;        p:location&lt;/span&gt;&lt;span&gt;=&quot;classpath:jdbc.properties&quot;&lt;/span&gt;&lt;span&gt; p:fileEncoding&lt;/span&gt;&lt;span&gt;=&quot;utf-8&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;26&lt;/span&gt;         
&lt;span&gt;27&lt;/span&gt;     &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; proxool连接池 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;28&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;bean &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;dataSource&quot;&lt;/span&gt;&lt;span&gt; class&lt;/span&gt;&lt;span&gt;=&quot;org.logicalcobwebs.proxool.ProxoolDataSource&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;29&lt;/span&gt;         &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 驱动的名字，mysql &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;30&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;driver&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;${db.driver}&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;31&lt;/span&gt;         &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;proxool 的 url连接串，这个必须确定用户名和密码 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;32&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;driverUrl&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;${db.url}&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;33&lt;/span&gt;         &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 用户名(proxool没有使用，但是不能没有) &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;34&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;user&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;${db.username}&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;35&lt;/span&gt;         &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 密码(proxool没有使用，但是不能没有) &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;36&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;password&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;${db.password}&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;37&lt;/span&gt;         &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; proxool自动侦察各个连接状态的时间间隔(毫秒),侦察到空闲的连接就马上回收,超时的销毁 现在设置为4秒） &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;38&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;houseKeepingSleepTime&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;3000&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 自动检查连接是否断掉开关 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;39&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;testBeforeUse&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;true&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;40&lt;/span&gt;         &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;  如果发现了空闲的数据库连接.house keeper 将会用这个语句来测试.这个语句最好非常快的被执行.如果没有定义,测试过程将会被忽略 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;41&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;houseKeepingTestSql&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;SELECT count(1) from dual&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;42&lt;/span&gt;         &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;  如果housekeeper 检测到某个线程的活动时间大于这个数值.它将会杀掉这个线程.所以确认一下你的服务器的带宽.然后定一个合适的值.默认是5分钟. 现在设置 10 秒&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt; 
&lt;span&gt;43&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;maximumActiveTime&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;10000&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;44&lt;/span&gt;         &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 最少保持的空闲连接数 （现在设置20个） &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;45&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;prototypeCount&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;20&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;46&lt;/span&gt;         &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 最大连接数 （现在设置100个） &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;47&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;maximumConnectionCount&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;200&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;48&lt;/span&gt;         &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 最小连接数 （现在设置50个） &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;49&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;minimumConnectionCount&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;50&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;50&lt;/span&gt;         &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 如果为true,那么每个被执行的SQL语句将会在执行期被log记录(DEBUG LEVEL).你也可以注册一个ConnectionListener (参看ProxoolFacade)得到这些信息. &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;51&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;trace&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;false&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;52&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;verbose&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;true&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;53&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;bean&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;54&lt;/span&gt;     
&lt;span&gt;55&lt;/span&gt;     &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 注册事务管理器 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;56&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;bean &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;txMgr&quot;&lt;/span&gt;
&lt;span&gt;57&lt;/span&gt; &lt;span&gt;        class&lt;/span&gt;&lt;span&gt;=&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;58&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;dataSource&quot;&lt;/span&gt;&lt;span&gt; ref&lt;/span&gt;&lt;span&gt;=&quot;dataSource&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;59&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;bean&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;60&lt;/span&gt; 
&lt;span&gt;61&lt;/span&gt;     &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 开启事务注解驱动 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;62&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;tx:annotation-driven &lt;/span&gt;&lt;span&gt;transaction-manager&lt;/span&gt;&lt;span&gt;=&quot;txMgr&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;63&lt;/span&gt;     
&lt;span&gt;64&lt;/span&gt;     &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 配置mybatis的sqlSessionFactory &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;65&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;bean &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;sqlSessionFactory&quot;&lt;/span&gt;&lt;span&gt; class&lt;/span&gt;&lt;span&gt;=&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;66&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;dataSource&quot;&lt;/span&gt;&lt;span&gt; ref&lt;/span&gt;&lt;span&gt;=&quot;dataSource&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;67&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;configLocation&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;classpath:mybatis-config.xml&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;68&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;bean&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;69&lt;/span&gt;     
&lt;span&gt;70&lt;/span&gt;     &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 配置可以整体扫描Mapper的一个扫描器 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;71&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;bean &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;72&lt;/span&gt;         &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;如果有多个报路径,用逗号分开即可  &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;73&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;basePackage&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;com.krry.mapper&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;74&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;sqlSessionFactoryBeanName&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;sqlSessionFactory&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;75&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;bean&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;76&lt;/span&gt;     
&lt;span&gt;77&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;beans&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;spring MVC配置文件：springmvc.xml&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt; &lt;span&gt;&amp;lt;?&lt;/span&gt;&lt;span&gt;xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; &lt;/span&gt;&lt;span&gt;?&amp;gt;&lt;/span&gt;
&lt;span&gt;  2&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;beans &lt;/span&gt;&lt;span&gt;xmlns&lt;/span&gt;&lt;span&gt;=&quot;http://www.springframework.org/schema/beans&quot;&lt;/span&gt;
&lt;span&gt;  3&lt;/span&gt; &lt;span&gt;    xmlns:xsi&lt;/span&gt;&lt;span&gt;=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt; 
&lt;span&gt;  4&lt;/span&gt; &lt;span&gt;    xmlns:p&lt;/span&gt;&lt;span&gt;=&quot;http://www.springframework.org/schema/p&quot;&lt;/span&gt;
&lt;span&gt;  5&lt;/span&gt; &lt;span&gt;    xmlns:context&lt;/span&gt;&lt;span&gt;=&quot;http://www.springframework.org/schema/context&quot;&lt;/span&gt;
&lt;span&gt;  6&lt;/span&gt; &lt;span&gt;    xmlns:util&lt;/span&gt;&lt;span&gt;=&quot;http://www.springframework.org/schema/util&quot;&lt;/span&gt; 
&lt;span&gt;  7&lt;/span&gt; &lt;span&gt;    xmlns:mvc&lt;/span&gt;&lt;span&gt;=&quot;http://www.springframework.org/schema/mvc&quot;&lt;/span&gt;
&lt;span&gt;  8&lt;/span&gt; &lt;span&gt;    xsi:schemaLocation&lt;/span&gt;&lt;span&gt;=&quot;http://www.springframework.org/schema/beans
&lt;/span&gt;&lt;span&gt;  9&lt;/span&gt; &lt;span&gt;       http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
&lt;/span&gt;&lt;span&gt; 10&lt;/span&gt; &lt;span&gt;       http://www.springframework.org/schema/context 
&lt;/span&gt;&lt;span&gt; 11&lt;/span&gt; &lt;span&gt;       http://www.springframework.org/schema/context/spring-context-3.0.xsd
&lt;/span&gt;&lt;span&gt; 12&lt;/span&gt; &lt;span&gt;       http://www.springframework.org/schema/util 
&lt;/span&gt;&lt;span&gt; 13&lt;/span&gt; &lt;span&gt;       http://www.springframework.org/schema/util/spring-util-3.0.xsd 
&lt;/span&gt;&lt;span&gt; 14&lt;/span&gt; &lt;span&gt;       http://www.springframework.org/schema/mvc 
&lt;/span&gt;&lt;span&gt; 15&lt;/span&gt; &lt;span&gt;       http://www.springframework.org/schema/mvc/spring-mvc.xsd
&lt;/span&gt;&lt;span&gt; 16&lt;/span&gt; &lt;span&gt;      &quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 17&lt;/span&gt;    
&lt;span&gt; 18&lt;/span&gt;          &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 开启注解模式驱动 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;    
&lt;span&gt; 19&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;bean &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt; 
&lt;span&gt; 20&lt;/span&gt;         &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 开启mvc的注解模式 user 还会注册一个ConversionService 子类FormattingConversionServiceFactoryBean&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 21&lt;/span&gt;          &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;mvc:annotation-driven&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 22&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;mvc:message-converters &lt;/span&gt;&lt;span&gt;register-defaults&lt;/span&gt;&lt;span&gt;=&quot;true&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 23&lt;/span&gt;                 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;bean &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;com.krry.core.UTF8StringHttpMessageConverter&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 24&lt;/span&gt;                     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;supportedMediaTypes&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 25&lt;/span&gt;                         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;list&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;  
&lt;span&gt; 26&lt;/span&gt;                             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;text/plain;charset=UTF-8&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;  
&lt;span&gt; 27&lt;/span&gt;                             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;text/html;charset=UTF-8&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;  
&lt;span&gt; 28&lt;/span&gt;                         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;list&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;  
&lt;span&gt; 29&lt;/span&gt;                     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 30&lt;/span&gt;                 &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;bean&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; 
&lt;span&gt; 31&lt;/span&gt;                 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;bean &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;org.springframework.http.converter.BufferedImageHttpMessageConverter&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt; 32&lt;/span&gt;                 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;bean &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;org.springframework.http.converter.ByteArrayHttpMessageConverter&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt; 
&lt;span&gt; 33&lt;/span&gt;                 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;bean &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;org.springframework.http.converter.json.MappingJackson2HttpMessageConverter&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 34&lt;/span&gt;                     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;prefixJson&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;false&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt; 35&lt;/span&gt;                     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;objectMapper&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 36&lt;/span&gt;                          &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;bean &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;com.fasterxml.jackson.databind.ObjectMapper&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 37&lt;/span&gt;                                &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 处理responseBody 里面日期类型 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt; 
&lt;span&gt; 38&lt;/span&gt;                                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;dateFormat&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;  
&lt;span&gt; 39&lt;/span&gt;                                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;bean &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;java.text.SimpleDateFormat&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;  
&lt;span&gt; 40&lt;/span&gt;                                        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;constructor-arg &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;java.lang.String&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;yyyy-MM-dd HH:mm:ss&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;  
&lt;span&gt; 41&lt;/span&gt;                                    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;bean&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;  
&lt;span&gt; 42&lt;/span&gt;                                &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; 
&lt;span&gt; 43&lt;/span&gt;                                &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 为null字段时不显示 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 44&lt;/span&gt;                                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;serializationInclusion&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 45&lt;/span&gt;                                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;com.fasterxml.jackson.annotation.JsonInclude.Include&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;NON_NULL&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 46&lt;/span&gt;                                &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; 
&lt;span&gt; 47&lt;/span&gt;                            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;bean&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;  
&lt;span&gt; 48&lt;/span&gt;                     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 49&lt;/span&gt;                      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;supportedMediaTypes&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;  
&lt;span&gt; 50&lt;/span&gt;                         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;list&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;  
&lt;span&gt; 51&lt;/span&gt;                             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;application/json;charset=UTF-8&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;  
&lt;span&gt; 52&lt;/span&gt;                             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;application/x-www-form-urlencoded;charset=UTF-8&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;  
&lt;span&gt; 53&lt;/span&gt;                         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;list&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;  
&lt;span&gt; 54&lt;/span&gt;                     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 55&lt;/span&gt;                 &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;bean&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 56&lt;/span&gt;                 &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;mvc:message-converters&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; 
&lt;span&gt; 57&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;mvc:annotation-driven&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 58&lt;/span&gt;         
&lt;span&gt; 59&lt;/span&gt;          &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 扫包 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 60&lt;/span&gt;          &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;context:component-scan &lt;/span&gt;&lt;span&gt;base-package&lt;/span&gt;&lt;span&gt;=&quot;com.krry.controller&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;context:component-scan&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 61&lt;/span&gt;          
&lt;span&gt; 62&lt;/span&gt;          &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;对静态资源文件的访问  必须要设置，因为在springmvc的配置中配置了/匹配所有请求，
&lt;/span&gt;&lt;span&gt; 63&lt;/span&gt; &lt;span&gt;        此工程所有的请求(.do ,addUser,js/image/css)都会被springmvc解析,
&lt;/span&gt;&lt;span&gt; 64&lt;/span&gt; &lt;span&gt;        必须对所有的静态资源文件进行过滤放行 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 65&lt;/span&gt;       &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 静态资源过滤  下面二选一&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 66&lt;/span&gt;       &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;&amp;lt;mvc:default-servlet-handler/&amp;gt; &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 67&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;mvc:resources &lt;/span&gt;&lt;span&gt;mapping&lt;/span&gt;&lt;span&gt;=&quot;/resourse/**&quot;&lt;/span&gt;&lt;span&gt; location&lt;/span&gt;&lt;span&gt;=&quot;/resourse/&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt; 68&lt;/span&gt;       
&lt;span&gt; 69&lt;/span&gt;       &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 拦截器定义 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 70&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;mvc:interceptors&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;    
&lt;span&gt; 71&lt;/span&gt;           &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;mvc:interceptor&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 72&lt;/span&gt;              &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 个人中心也需要登陆  以admin开头的配置都会进行拦截&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 73&lt;/span&gt;                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;mvc:mapping &lt;/span&gt;&lt;span&gt;path&lt;/span&gt;&lt;span&gt;=&quot;/admin/**&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;mvc:mapping&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; 
&lt;span&gt; 74&lt;/span&gt;                    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 这个是设置不会进入拦截器的路径 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 75&lt;/span&gt;                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;mvc:exclude-mapping &lt;/span&gt;&lt;span&gt;path&lt;/span&gt;&lt;span&gt;=&quot;/resourse/**&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt; 76&lt;/span&gt;             &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 拦截器进入的类，返回false表示不会进入输入的路径 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 77&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;bean &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;com.krry.core.filter.LoginInterceptor&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;       
&lt;span&gt; 78&lt;/span&gt;           &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;mvc:interceptor&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 79&lt;/span&gt;       &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;mvc:interceptors&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 80&lt;/span&gt;        
&lt;span&gt; 81&lt;/span&gt;            &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 配置文件解析器 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 82&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;bean &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;multipartResolver&quot;&lt;/span&gt;
&lt;span&gt; 83&lt;/span&gt; &lt;span&gt;            class&lt;/span&gt;&lt;span&gt;=&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;&lt;/span&gt;
&lt;span&gt; 84&lt;/span&gt; &lt;span&gt;            p:defaultEncoding&lt;/span&gt;&lt;span&gt;=&quot;utf-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 85&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;uploadTempDir&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;/temp&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 86&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;maxUploadSize&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 87&lt;/span&gt;                 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;209715200&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 200MB &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 88&lt;/span&gt;             &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 89&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;maxInMemorySize&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 90&lt;/span&gt;                 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;4096&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 4KB大小读写 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 91&lt;/span&gt;             &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 92&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;bean&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 93&lt;/span&gt;            
&lt;span&gt; 94&lt;/span&gt;    
&lt;span&gt; 95&lt;/span&gt;        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 视图渲染 jsp/freemaker/velocity&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 96&lt;/span&gt;        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;bean &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 97&lt;/span&gt;                &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 制定页面存放的路径 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 98&lt;/span&gt;                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;prefix&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;/WEB-INF/pages/&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 99&lt;/span&gt;                &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 文件的后缀 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;100&lt;/span&gt;                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;suffix&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;.jsp&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;101&lt;/span&gt;        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;bean&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; 
&lt;span&gt;102&lt;/span&gt;     
&lt;span&gt;103&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;beans&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;数据库配置文件： jdbc.properties&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;db.driver=oracle.jdbc.OracleDriver
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; &lt;span&gt;db.url=jdbc:oracle:thin:@127.0.0.1:1521:orcl
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; &lt;span&gt;db.username=4m+la23KCA4=
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; db.password=WWijcIyMPaU\=
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;我这里使用了加密算法&lt;/p&gt;

&lt;h2&gt;日志配置文件： log4j.properties&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;log4j.rootLogger=DEBUG, CONSOLE, FILE
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;log4j.appender.CONSOLE=org.apache.log4j.ConsoleAppender
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;log4j.appender.CONSOLE.layout=org.apache.log4j.PatternLayout
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;log4j.appender.CONSOLE.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss} %-5p [%t] %10l - %m%n
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;log4j.appender.FILE=org.apache.log4j.RollingFileAppender
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;log4j.appender.FILE.File=D:/logs/log4j.log
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;log4j.appender.FILE.MaxFileSize=1MB
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;log4j.appender.FILE.Append = true
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;log4j.appender.FILE.layout=org.apache.log4j.PatternLayout
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; log4j.appender.FILE.layout.ConversionPattern=%d{yyyy/MM/dd/HH:mm:ss} %-5p [%t] %10l - %m%n
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;mybatis配置文件： mybatis-config.xml&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;&amp;lt;?&lt;/span&gt;&lt;span&gt;xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;?&amp;gt;&lt;/span&gt;  
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE configuration   
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;  
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;  
&lt;span&gt; 5&lt;/span&gt; 
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;configuration&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;settings&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;  
&lt;span&gt; 8&lt;/span&gt;          &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 全局映射器启用缓存 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;  
&lt;span&gt; 9&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;setting &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;cacheEnabled&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;true&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;  
&lt;span&gt;10&lt;/span&gt;          &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 查询时，关闭关联对象即时加载以提高性能 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;  
&lt;span&gt;11&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;setting &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;lazyLoadingEnabled&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;true&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;  
&lt;span&gt;12&lt;/span&gt;         &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 设置关联对象加载的形态，此处为按需加载字段(加载字段由SQL指              定)，不会加载关联表的所有字段，以提高性能 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;  
&lt;span&gt;13&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;setting &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;aggressiveLazyLoading&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;false&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;  
&lt;span&gt;14&lt;/span&gt;         &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 对于未知的SQL查询，允许返回不同的结果集以达到通用的效果 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;  
&lt;span&gt;15&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;setting &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;multipleResultSetsEnabled&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;true&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;  
&lt;span&gt;16&lt;/span&gt;         &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 允许使用列标签代替列名 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;  
&lt;span&gt;17&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;setting &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;useColumnLabel&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;true&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;  
&lt;span&gt;18&lt;/span&gt;         &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 允许使用自定义的主键值(比如由程序生成的UUID 32位编码作为键值)，数据表的PK生成策略将被覆盖 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;  
&lt;span&gt;19&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;setting &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;useGeneratedKeys&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;true&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;  
&lt;span&gt;20&lt;/span&gt;          &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 给予被嵌套的resultMap以字段-属性的映射支持 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;  
&lt;span&gt;21&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;setting &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;autoMappingBehavior&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;FULL&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;  
&lt;span&gt;22&lt;/span&gt;         &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 对于批量更新操作缓存SQL以提高性能  &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;  
&lt;span&gt;23&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;setting &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;defaultExecutorType&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;BATCH&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;  
&lt;span&gt;24&lt;/span&gt;          &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 数据库超过25000秒仍未响应则超时 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;  
&lt;span&gt;25&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;setting &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;defaultStatementTimeout&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;25&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;  
&lt;span&gt;26&lt;/span&gt;          &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;setting &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;lazyLoadTriggerMethods&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;equals,clone,hashCode,toString&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;27&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;settings&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;  
&lt;span&gt;28&lt;/span&gt;     
&lt;span&gt;29&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;typeAliases&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;30&lt;/span&gt;         &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;自定义user对象的别名  &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;31&lt;/span&gt;         &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; &amp;lt;typeAlias type=&quot;com.krry.mybatis.sysmanage.entity.User&quot; alias=&quot;user&quot;/&amp;gt; &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;32&lt;/span&gt;         &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 批量定义别名 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;33&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;package &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;com.krry.entity&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;34&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;typeAliases&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;35&lt;/span&gt;     
&lt;span&gt;36&lt;/span&gt;     
&lt;span&gt;37&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;configuration&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;网络程序配置文件：web.xml&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;&amp;lt;?&lt;/span&gt;&lt;span&gt;xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;?&amp;gt;&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;web-app &lt;/span&gt;&lt;span&gt;xmlns:xsi&lt;/span&gt;&lt;span&gt;=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt;&lt;span&gt; xmlns&lt;/span&gt;&lt;span&gt;=&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;&lt;/span&gt;&lt;span&gt; xsi:schemaLocation&lt;/span&gt;&lt;span&gt;=&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd&quot;&lt;/span&gt;&lt;span&gt; id&lt;/span&gt;&lt;span&gt;=&quot;WebApp_ID&quot;&lt;/span&gt;&lt;span&gt; version&lt;/span&gt;&lt;span&gt;=&quot;3.1&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt;   
&lt;span&gt; 4&lt;/span&gt;   &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;display-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;maven_SSM&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;display-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt;   
&lt;span&gt; 6&lt;/span&gt;   &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;welcome-file-list&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;welcome-file&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;index&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;welcome-file&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt;   &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;welcome-file-list&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt;   
&lt;span&gt;10&lt;/span&gt;   &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 加载Spring IOC容器 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt;   &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;context-param&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;param-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;contextConfigLocation&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;param-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;param-value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;classpath:applicationContext.xml&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;param-value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt;   &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;context-param&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt;   
&lt;span&gt;16&lt;/span&gt;   &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; spring上下文监听器 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt;   &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;listener&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;listener-class&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.web.context.ContextLoaderListener&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;listener-class&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt;   &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;listener&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt;   
&lt;span&gt;21&lt;/span&gt;   &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; Introspector缓存清除监听器 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;22&lt;/span&gt;   &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;listener&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;23&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;listener-class&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.web.util.IntrospectorCleanupListener&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;listener-class&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;24&lt;/span&gt;   &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;listener&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;25&lt;/span&gt;   
&lt;span&gt;26&lt;/span&gt;   &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;filter&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;27&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;filter-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;encoding&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;filter-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;28&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;filter-class&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.web.filter.CharacterEncodingFilter&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;filter-class&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;29&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;init-param&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;30&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;param-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;encoding&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;param-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;31&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;param-value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;UTF-8&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;param-value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;32&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;init-param&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;33&lt;/span&gt;   &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;filter&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;34&lt;/span&gt;   
&lt;span&gt;35&lt;/span&gt;   &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;filter-mapping&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;36&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;filter-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;encoding&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;filter-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;37&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;url-pattern&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;/*&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;url-pattern&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;38&lt;/span&gt;   &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;filter-mapping&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;39&lt;/span&gt;   
&lt;span&gt;40&lt;/span&gt;   &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 配置DispatcherServlet &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;41&lt;/span&gt;   &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;servlet&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;42&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;servlet-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;maven_SSM&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;servlet-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;43&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;servlet-class&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.web.servlet.DispatcherServlet&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;servlet-class&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;44&lt;/span&gt;     &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 配置springMVC的配置文件 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;45&lt;/span&gt;     &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 如果不配置下面选项，系统默认加载classpath下面名为[servlet-name]-servlet.xml的文件 springmvc01-servlet.xml &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;46&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;init-param&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;47&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;param-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;contextConfigLocation&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;param-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;48&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;param-value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;classpath:springmvc.xml&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;param-value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;49&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;init-param&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;50&lt;/span&gt;   &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;servlet&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;51&lt;/span&gt;   
&lt;span&gt;52&lt;/span&gt;   &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;servlet-mapping&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;  
&lt;span&gt;53&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;servlet-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;maven_SSM&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;servlet-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;  
&lt;span&gt;54&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;url-pattern&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;/index&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;url-pattern&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;  
&lt;span&gt;55&lt;/span&gt;   &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;servlet-mapping&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;56&lt;/span&gt;   
&lt;span&gt;57&lt;/span&gt;   &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 可以配*.do, *.action(了解) / (重点): 所有的请求都会被spring mvc解析，但必须对静态资源文件进行过滤放行，建议大家使用这种方式 
&lt;/span&gt;&lt;span&gt;58&lt;/span&gt; &lt;span&gt;        /* : 不建议大家使用  &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;59&lt;/span&gt;   &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;servlet-mapping&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;60&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;servlet-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;maven_SSM&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;servlet-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;61&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;url-pattern&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;/&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;url-pattern&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;62&lt;/span&gt;   &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;servlet-mapping&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;63&lt;/span&gt;  
&lt;span&gt;64&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;web-app&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;到这里，基本配置全部完成，jar包也自动依赖。就进行测试和编写后续 java 的代码&lt;/p&gt;

</description>
<pubDate>Sun, 11 Mar 2018 16:06:00 +0000</pubDate>
<dc:creator>筱月</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/ainyi/p/8547106.html</dc:identifier>
</item>
<item>
<title>Python机器学习中文版 - aibbtcom</title>
<link>http://www.cnblogs.com/aibbt/p/8547102.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/aibbt/p/8547102.html</guid>
<description>[unable to retrieve full-text content]Python机器学习简介 第一章 让计算机从数据中学习 将数据转化为知识 三类机器学习算法 第二章 训练机器学习分类算法 透过人工神经元一窥早期机器学习历史 使用Python实现感知机算法 基于Iris数据集训练感知机模型 自适应线性神经元及收敛问题 Python实现自适应线性神经元 大规模机器学习...</description>
<pubDate>Sun, 11 Mar 2018 16:04:00 +0000</pubDate>
<dc:creator>aibbtcom</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/aibbt/p/8547102.html</dc:identifier>
</item>
<item>
<title>结合实例分析Android MVP的实现 - huansky</title>
<link>http://www.cnblogs.com/huansky/p/8545734.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/huansky/p/8545734.html</guid>
<description>&lt;p&gt;　　最近阅读项目的源码，发现项目中有MVP的痕迹，但是自己却不能很好地理解相关的代码实现逻辑。主要原因是自己对于MVP的理解过于概念话，还没有真正操作过。本文打算分析一个MVP的简单实例，帮助自己更好的理解MVP的内在思想。&lt;/p&gt;
&lt;p&gt;　　对于什么是MVP，MVP和MVC的区别，MVP的有点，大家可以参考这篇文章：&lt;a href=&quot;http://kaedea.com/2015/10/11/android-mvp-pattern/&quot; target=&quot;_blank&quot;&gt;MVP 模式简单易懂的介绍方式&lt;/a&gt;。文章里面还有demo，可以帮助大家更好的理解。&lt;/p&gt;
&lt;p&gt;　　今天分析的是一个别人写的 demo，其实作者也有写文章来介绍（&lt;a href=&quot;http://blog.csdn.net/u011504118/article/details/49871211&quot; target=&quot;_blank&quot;&gt;Android MVP with Fragment and RecyclerView&lt;/a&gt;），那我为何还要自己来分析一遍呢？其实我已经仿照这个 demo 将 MVP 的思想用到了自己写的一个 demo 上。但是，时间长了，又忘记了，所以打算梳理下。当然，文章肯定不会跟作者的文章一样，得提出自己的思想。并且还对 demo 进行改造优化，使其更加符合MVP的思想。&lt;/p&gt;
&lt;p&gt;　　推荐先看前面两篇文章，再来看本文，这样能更好的理解文章的内容。&lt;/p&gt;
&lt;h2&gt;代码结构简析&lt;/h2&gt;
&lt;p&gt;　　首先我们来看代码的结构图。 从中可以看到有6个文件夹，与 MVP 模式相关的是后面三个文件夹。model 中存放的是与数据相关的类。Picture 是数据 model，其他几个类是负责下载Picture获取数据的。Presenter 中会引入 model 和 view 的引用，以此来控制 model 和 view。View中只有一个 PictureView 类，但是严格说来，应该把 PictureFragment 和 PictureAdapter 也放在文件夹 view 中，但是这样放也是可以的。&lt;img src=&quot;https://images2018.cnblogs.com/blog/916005/201803/916005-20180311163808569-2050228548.png&quot; alt=&quot;&quot; width=&quot;231&quot; height=&quot;302&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;实现逻辑&lt;/h2&gt;
&lt;h3&gt;  总体概要&lt;/h3&gt;
&lt;p&gt;　　这个项目要做的事情很简单，就是从网络下载图片，显示在手机上，点击图片，弹出一个 Toast。&lt;/p&gt;
&lt;h3&gt;  思路分析&lt;/h3&gt;
&lt;p&gt;　　MVP ？在这里 M 不就是图片，所以肯定会有一个 Picture 实体类。图片需要下载，因此，还要建立一个类用来控制，但是最终的调用下载是在 P 中。&lt;/p&gt;
&lt;p&gt;　　那 V ？就是 Fragment 啦，由 recyclerView 和 ProgressBar 构成的。PictureView 是一个接口，用于控制图片的展示等。但是也是在 P 中调用。&lt;/p&gt;
&lt;p&gt;　　最后就是 P 啦，封装了对 M, V 的操作，即 PicturePresenterImpl 这个类。&lt;/p&gt;
&lt;h3&gt;  代码实现&lt;/h3&gt;
&lt;p&gt;　　M的实现（只贴重要的代码）：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;55&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; PictureInteractorImpl &lt;span&gt;implements&lt;/span&gt;&lt;span&gt; PictureInteractor {

    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; String[] pictureNames =&lt;span&gt; {
            &lt;/span&gt;&quot;Rocket in the universe&quot;&lt;span&gt;,
            &lt;/span&gt;&quot;A scene in London&quot;&lt;span&gt;,
            &lt;/span&gt;&quot;Moon over mountains&quot;&lt;span&gt;,
            &lt;/span&gt;&quot;A simple moon&quot;&lt;span&gt;,
            &lt;/span&gt;&quot;Sun and volcano&quot;&lt;span&gt;,
            &lt;/span&gt;&quot;A collection of mountains&quot;&lt;span&gt;,
            &lt;/span&gt;&quot;River between mountains&quot;&lt;span&gt;,
            &lt;/span&gt;&quot;Some pine trees&quot;&lt;span&gt;,
            &lt;/span&gt;&quot;On Small Town&quot;&lt;span&gt;,
            &lt;/span&gt;&quot;Volcanos reflection&quot;&lt;span&gt;
    };


    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;  pictureImages[] =&lt;span&gt; {
            R.drawable.cohete_flat,
            R.drawable.london_flat,
            R.drawable.material_flat,
            R.drawable.moon_flat,
            R.drawable.mountain_flat,
            R.drawable.mountain_mo_flat,
            R.drawable.moutain_go_flat,
            R.drawable.pine_flat,
            R.drawable.towers_flat,
            R.drawable.vulcan_flat
    };

    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; loadPictures(&lt;span&gt;final&lt;/span&gt;&lt;span&gt; LoaderListener listener) {
        &lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Handler(Looper.getMainLooper())
                .postDelayed(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Runnable() {
                    @Override
                    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; run() {
                        listener.onFinish(createPictures());
                    }
                }, &lt;/span&gt;2000&lt;span&gt;);
    }

    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; List&amp;lt;Picture&amp;gt;&lt;span&gt; createPictures() {
        ArrayList&lt;/span&gt;&amp;lt;Picture&amp;gt; pictures = &lt;span&gt;new&lt;/span&gt; ArrayList&amp;lt;&amp;gt;&lt;span&gt;();
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = 0; i &amp;lt; pictureNames.length; i++&lt;span&gt;) {
            pictures.add(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Picture(pictureNames[i], pictureImages[i]));
        }
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; pictures;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;大家看上面的代码，只有 loadPictures 是来自于接口的，为啥 createPictures 方法不写在接口里呢？主要是因为写在接口的方法是要在 P 中调用的。如果不需要外部调用，就没必要接口里面了。&lt;/p&gt;

&lt;p&gt;　　V 的实现（只贴重要的代码）：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt;&lt;span&gt; PictureView {
    &lt;/span&gt;&lt;span&gt;void&lt;/span&gt;&lt;span&gt; showProgressBar();

    &lt;/span&gt;&lt;span&gt;void&lt;/span&gt;&lt;span&gt; hideProgressBar();

    &lt;/span&gt;&lt;span&gt;void&lt;/span&gt;&lt;span&gt; showMsg(String msg);

    &lt;/span&gt;&lt;span&gt;void&lt;/span&gt; showPictures(List&amp;lt;Picture&amp;gt;&lt;span&gt; pictures);
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　虽然 View  中只有 PictureView 一个类，但是从这个类可以对 view 要做的事一清二楚。&lt;/p&gt;
&lt;p&gt;　　P 的实现（只贴重要的代码）：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; PicturePresenterImpl &lt;span&gt;implements&lt;/span&gt;&lt;span&gt; PicturePresenter, LoaderListener {

    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; PictureView mPictureView;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; PictureInteractor mInteractor;

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; PicturePresenterImpl(PictureView pictureView) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.mPictureView =&lt;span&gt; pictureView;
        mInteractor &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; PictureInteractorImpl();
    }

    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; onResume() {
        mPictureView.showProgressBar();
        mInteractor.loadPictures(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;);
    }

    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; onDestroy() {
        mPictureView &lt;/span&gt;= &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
    }

    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; onItemClick(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; pos) {
        mPictureView.showMsg(String.valueOf(pos));
    }

    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; onFinish(List&amp;lt;Picture&amp;gt;&lt;span&gt; pictures) {
        mPictureView.hideProgressBar();
        mPictureView.showPictures(pictures);
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 　　可以看出来，P 中其实就是对 M，V 的逻辑进行了封装，统一由其来掌控。&lt;/p&gt;
&lt;p&gt;　　最后来讲讲 fragment，内部引入了 P 。主要是由于 P 无法控制生命周期，所以需要借用 fragment 的生命周期来对整个过程进行控制。&lt;/p&gt;
&lt;h2&gt;疑问？&lt;/h2&gt;
&lt;p&gt;　　大家看了上面的demo，不觉得在 fragment 中，即夹杂着 V， 又有 P，这样其实不利于维护，尤其是后期当 view 越来越多的时候，那时候，还要把 view 的初始化等等都写在 fragment 中嘛？所以接下去要对 fragment 内容进行瘦身。那怎么瘦身呢？具体请看下文。&lt;/p&gt;
&lt;h2&gt;改造&lt;/h2&gt;
&lt;p&gt;　　改造后的结构，只在 view 中新建了一个 BasePageView 来处理 view 的初始化和控制逻辑。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/916005/201803/916005-20180311232713215-895367961.png&quot; alt=&quot;&quot; width=&quot;176&quot; height=&quot;241&quot;/&gt;&lt;/p&gt;
&lt;p&gt;其代码具体如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;47&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; BasePageView &lt;span&gt;extends&lt;/span&gt; FrameLayout &lt;span&gt;implements&lt;/span&gt;&lt;span&gt; PictureView {

    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; RecyclerView mRecyclerView;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; ProgressBar mProgress;

    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; PictureAdapter mAdapter;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; PicturePresenter mPresenter;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; Context mContext;

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 构造函数。
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt;&lt;span&gt; BasePageView(Context context){
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;(context, &lt;span&gt;null&lt;/span&gt;&lt;span&gt;);
    };

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; BasePageView(Context context, AttributeSet attributeSet) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;(context, attributeSet, 0&lt;span&gt;);
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; BasePageView(Context context, AttributeSet attributeSet, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; defStyleAttr){
        &lt;/span&gt;&lt;span&gt;super&lt;/span&gt;&lt;span&gt;(context, attributeSet, defStyleAttr);
        init(context);
    }

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 初始化
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; init(Context context) {
        mContext &lt;/span&gt;=&lt;span&gt; context;
        inflate(mContext, R.layout.base_view_layout, &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;);
        mRecyclerView &lt;/span&gt;=&lt;span&gt; (RecyclerView) findViewById(R.id.recycler_view);
        mProgress &lt;/span&gt;=&lt;span&gt; (ProgressBar) findViewById(R.id.progress_bar);
        mRecyclerView.setLayoutManager(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; LinearLayoutManager(mContext));
    }

    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; showProgressBar() {
        mProgress.setVisibility(View.VISIBLE);
        mRecyclerView.setVisibility(View.INVISIBLE);
    }

    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; hideProgressBar() {
        mProgress.setVisibility(View.INVISIBLE);
        mRecyclerView.setVisibility(View.VISIBLE);
    }

    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; showMsg(String msg) {
        Toast.makeText(mContext, msg, Toast.LENGTH_LONG).show();
    }

    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; showPictures(List&amp;lt;Picture&amp;gt;&lt;span&gt; pictures) {
        mAdapter &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; PictureAdapter(pictures);
        mAdapter.setRecyclerItemClickListener(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; OnRecyclerItemClickListener() {
            @Override
            &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; onItemClick(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; pos) {
                mPresenter.onItemClick(pos);
            }
        });
        mRecyclerView.setAdapter(mAdapter);
    }

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 这样当需要对视图进行更改的时候，只需要更改这个类就可以了，不用在跑到 fragment 中去了。&lt;/p&gt;
&lt;p&gt;于此同时，fragment 也瘦身成功了：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; PictureFragment &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; Fragment{

    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; PicturePresenter mPresenter;

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt;&lt;span&gt; PictureFragment newInstance() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; PictureFragment();
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; PictureFragment() {
    }

    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; onCreate(Bundle savedInstanceState) {
        &lt;/span&gt;&lt;span&gt;super&lt;/span&gt;&lt;span&gt;.onCreate(savedInstanceState);
    }

    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; View onCreateView(LayoutInflater inflater, ViewGroup container,
                             Bundle savedInstanceState) {
        View view &lt;/span&gt;= inflater.inflate(R.layout.fragment_picture, container, &lt;span&gt;false&lt;/span&gt;&lt;span&gt;);
       BasePageView basePageView &lt;/span&gt;=&lt;span&gt; (BasePageView) view.findViewById(R.id.baseView);
        mPresenter &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; PicturePresenterImpl(basePageView);
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; view;
    }

    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; onResume() {
        &lt;/span&gt;&lt;span&gt;super&lt;/span&gt;&lt;span&gt;.onResume();
        mPresenter.onResume();
    }

    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; onDestroy() {
        &lt;/span&gt;&lt;span&gt;super&lt;/span&gt;&lt;span&gt;.onDestroy();
        mPresenter.onDestroy();
    }

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　改造之后，是不是更好理解了啊。当我们需要对某一部分需要修改的时候，能够轻松定位要修改的地方。&lt;/p&gt;
&lt;p&gt;　　好了，通过改造之后，相信大家对 MVP 的理解也就更加深刻了。&lt;/p&gt;
&lt;p&gt;　　希望这篇文章对大家有所帮助。&lt;/p&gt;
</description>
<pubDate>Sun, 11 Mar 2018 15:49:00 +0000</pubDate>
<dc:creator>huansky</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/huansky/p/8545734.html</dc:identifier>
</item>
<item>
<title>SpringMVC 框架系列之组件概述与配置详解 - compassblog</title>
<link>http://www.cnblogs.com/compassblog/p/8547047.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/compassblog/p/8547047.html</guid>
<description>&lt;p&gt;&lt;span&gt;在上一篇文章 &lt;/span&gt;&lt;span&gt;&lt;a title=&quot;SpringMVC 框架系列之初识与入门实例&quot; href=&quot;http://www.cnblogs.com/compassblog/p/8537008.html&quot;&gt;SpringMVC 框架系列之初识与入门实例&lt;/a&gt; &lt;/span&gt;&lt;span&gt;的实例中，我们已经知道，SpringMVC 框架是一个 web 层的框架，本篇文章就详细解释一下 SpringMVC 框架具体文件的配置以及相关组件的作用。&lt;/span&gt;&lt;/p&gt;
&lt;h4 id=&quot;h1springmvc&quot;&gt;&lt;span&gt;1、SpringMVC 架构详解&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;&lt;span&gt;（1）、SpringMVC 框架结构：&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1322792/201803/1322792-20180311234330539-96266592.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;（2）、SpringMVC 框架结构执行流程&lt;/span&gt;&lt;/p&gt;
&lt;ul readability=&quot;8.5&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;用户发送请求至前端控制器 DispatcherServlet&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;DispatcherServlet 收到请求调用 HandlerMapping 处理器映射器&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;span&gt;处理器映射器根据请求 url 找到具体的处理器，生成处理器对象及处理器拦截器(如果有则生成)一并返回给 DispatcherServlet&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;DispatcherServlet 通过 HandlerAdapter 处理器适配器调用处理器&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;执行处理器(Controller，也叫后端控制器)&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;Controller 执行完成返回 ModelAndView&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;HandlerAdapter 将 controller 执行结果 ModelAndView 返回给 DispatcherServlet&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;DispatcherServlet 将 ModelAndView 传给 ViewReslover 视图解析器&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;ViewReslover 解析后返回具体 View&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;DispatcherServlet 对 View 进行渲染视图（即将模型数据填充至视图中）&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;DispatcherServlet 响应用户&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;h4 id=&quot;h2springmvc&quot;&gt;&lt;span&gt;2、SpringMVC 框架组件概述&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;&lt;span&gt;在 SpringMVC 的各个组件中，处理器映射器、处理器适配器、视图解析器称为 SpringMVC 的三大组件。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;（1）、DispatcherServlet：前端控制器&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;用户请求到达前端控制器，它就相当于 MVC 模式中的 C 层，DispatcherServlet 是整个流程控制的中心，由它调用其它组件处理用户的请求，DispatcherServlet 的存在降低了组件之间的耦合性。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;（2）、HandlerMapping：处理器映射器&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;HandlerMapping 负责根据用户请求 url 找到 Handler 处理器，SpringMVC 提供了不同的映射器实现不同的映射方式，如配置文件方式、实现接口方式、注解方式等。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;（3）、Handler：处理器&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Handler 是继 DispatcherServlet 前端控制器的后端控制器，在 DispatcherServlet 的控制下 Handler 对具体的用户请求进行处理。由于 Handler 涉及到具体的用户业务请求，所以一般情况需要程序员根据业务需求开发 Handler 。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;（4）、HandlAdapter：处理器适配器&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;通过 HandlerAdapter 对处理器进行执行，这是适配器模式的应用，通过扩展适配器可以对更多类型的处理器进行执行。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;（5）、ViewResolver：视图解析器&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;View Resolver 负责将处理结果生成 View 视图，View Resolver 首先根据逻辑视图名解析成物理视图名即具体的页面地址，再生成View 视图对象，最后对View进行渲染将处理结果通过页面展示给用户。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;（6）、View：视图&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;SpringMVC 框架提供了很多的 View 视图类型的支持，w而我们开发中最常用的视图是 jsp 。&lt;/span&gt;&lt;/p&gt;
&lt;h4 id=&quot;h3springmvc&quot;&gt;&lt;span&gt;3、SpringMVC 配置详解&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;&lt;span&gt;&lt;code&gt;springmvc.xml&lt;/code&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;（1）、配置组件扫描器&lt;/span&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;span&gt;&lt;code class=&quot;xml language-xml hljs&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;context:component-scan &lt;span class=&quot;hljs-attr&quot;&gt;base-package=&lt;span class=&quot;hljs-string&quot;&gt;&quot;com.springmvc.controller&quot; /&amp;gt;&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;span&gt;（2）、配置处理器映射器&lt;/span&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;span&gt;&lt;code class=&quot;xml language-xml hljs&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;bean &lt;span class=&quot;hljs-attr&quot;&gt;class=&lt;span class=&quot;hljs-string&quot;&gt;&quot;org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping&quot; /&amp;gt;&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;span&gt;（3）、配置处理器适配器&lt;/span&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;span&gt;&lt;code class=&quot;xml language-xml hljs&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;bean &lt;span class=&quot;hljs-attr&quot;&gt;class=&lt;span class=&quot;hljs-string&quot;&gt;&quot;org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter&quot; /&amp;gt;&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;span&gt;（4）、配置注解驱动&lt;/span&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;span&gt;&lt;code class=&quot;xml language-xml hljs&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;mvc:annotation-driven /&amp;gt;&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;span&gt;（5）、配置视图解析器&lt;/span&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;span&gt;&lt;code class=&quot;xml language-xml hljs&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;bean&lt;br/&gt;&lt;span class=&quot;hljs-attr&quot;&gt;class=&lt;span class=&quot;hljs-string&quot;&gt;&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;&amp;gt;&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;span&gt;最终 jsp 物理地址：前缀 + 逻辑视图名 + 后缀&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;注：部分知识源于网络，侵权联删。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;扫描关注微信公众号，了解更多&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1322792/201803/1322792-20180311234443461-1163116054.jpg&quot; alt=&quot;&quot;/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Sun, 11 Mar 2018 15:45:00 +0000</pubDate>
<dc:creator>compassblog</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/compassblog/p/8547047.html</dc:identifier>
</item>
<item>
<title>C#多线程编程（5）--线程安全1 - JAZzzzzzzz</title>
<link>http://www.cnblogs.com/jazzpop/p/8547015.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/jazzpop/p/8547015.html</guid>
<description>&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;当你需要2个线程读写同一个数据时，就需要数据同步。线程同步的办法有：（1）原子操作；（2）锁。原子操作能够保证该操作在CPU内核中不会被“拆分”，锁能够保证只有一个线程访问该数据，其他线程在尝试获得有锁的数据时，会被拒绝，直到当前获得数据的线程将锁释放，其他线程才能够获得数据。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;&lt;li&gt;为什么要线程同步？&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;　　我们先看一个需要数据同步的例子，&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; Main(&lt;span&gt;string&lt;/span&gt;&lt;span&gt;[] args){
    &lt;/span&gt;&lt;span&gt;bool&lt;/span&gt; flag = &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
    var t1 = &lt;/span&gt;&lt;span&gt;new&lt;/span&gt; Thread(() =&amp;gt; { &lt;span&gt;if&lt;/span&gt; (flag) Console.WriteLine(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Flag&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;); });
    var t2 = &lt;/span&gt;&lt;span&gt;new&lt;/span&gt; Thread(() =&amp;gt; { flag = &lt;span&gt;true&lt;/span&gt;&lt;span&gt;; });&lt;br/&gt;　　t1.Start();&lt;br/&gt;　　t2.Start();
    Console.ReadLine();
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　上述例子中，t2线程将flag置为true，有可能发生：当t2打算执行flag = true时，t1执行了if(flag)语句，这造成了不可知的情况。此时就需要在t2执行时，若t1想要获取flag的值，要等到flag=true执行完成后，再执行，这就是所谓的“线程同步”，一个线程要等待另一个线程执行到某段代码后，再执行。线程同步能保证程序的执行符合“预想”--若t2没有执行，则flag为false，t2若已执行，则flag=true。线程同步是为了防止t2正在执行flag=true的时候，t1开始执行，此时flag应该是true，因为t2已经开始执行了，但是实际上flag=false，因为t2的flag=true没有执行完。解决的办法就是当t2执行flag=true时，将任何尝试读取flag的线程都阻塞，直到flag=true执行结束后，其他线程再执行。类似下面的代码。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; m_lock =&lt;span&gt; GetSomeLock();&lt;br/&gt;pulick void Go(){&lt;br/&gt;　　var t1 = new Thread(()=&amp;gt;Go1());&lt;br/&gt;　　var t2 = new Thread(()=&amp;gt;Go2());&lt;br/&gt;　　t1.Star();&lt;br/&gt;　　t2.Start();&lt;br/&gt;}
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; Go1(){
    m_lock.&lt;/span&gt;&lt;span&gt;lock&lt;/span&gt;&lt;span&gt;();
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (flag) 
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;dosomething;　　&lt;/span&gt;
&lt;span&gt;    Console.WriteLine(flag);&lt;br/&gt;　　 m_lock.Unlock();
}
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; Go2(){
    m_lock.&lt;/span&gt;&lt;span&gt;lock&lt;/span&gt;&lt;span&gt;();
    flag &lt;/span&gt;= &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
    m_lock.Unlock();
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在flag=true和if(flag)外面添加m_lock.lock()和m_lock.Unlock()就是为了保证线程同步。但是这样的同步带来的问题就是性能的下降，还有可能造成死锁。摘要中说过，线程同步有2个手段，上面介绍了锁，还有原子操作我没有介绍。在介绍原子操作之前，我介绍下关键字volatile。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;关键字volatile&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;　　该关键字能够作用在变量前，其意义是对该变量的读写操作都是原子操作，这种特性被称作“易变性”。&lt;/p&gt;
&lt;p&gt;　　编译器在编译过程中，会根据代码的具体情况进行适当“优化”，例如：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; Go(){
    &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; value = &lt;span&gt;100&lt;/span&gt; * &lt;span&gt;1&lt;/span&gt; - &lt;span&gt;50&lt;/span&gt; * &lt;span&gt;2&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; value; i++&lt;span&gt;)
        Console.WriteLine(i);
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;编译器在看到有地方调用该方法，会跳过其中的语句，因为这段语句毫无意义，这当然是好的，编译器弥补了我们的错误。但是有的时候这种优化会造成我们不想要的效果。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;bool&lt;/span&gt; s_stopWorker = &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; Main(&lt;span&gt;string&lt;/span&gt;&lt;span&gt;[] args){
    Console.WriteLine(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Main:letting worker run for 5s&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; t = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Thread(Worker);
    t.Start();
    Thread.Sleep(&lt;/span&gt;&lt;span&gt;5000&lt;/span&gt;&lt;span&gt;);
    s_stopWorker &lt;/span&gt;= &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
    Console.WriteLine(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Main: waiting for worker to stop.&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
    t.Join();
}
&lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; Worker(&lt;span&gt;object&lt;/span&gt;&lt;span&gt; o){
    &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; x = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;while&lt;/span&gt; (s_stopWorker) x++&lt;span&gt;;
    Console.WriteLine(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Worker: stopped when x = {0}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, x);
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;该段代码中，主线程阻塞5秒，然后s_stopWorker=true，本意是要中断t线程，让其显示数到的数后返回。但实际上编译器在看到while(s_stopWorker)时，又看到s_stopWorker在Worker方法中没有任何改变，因此该方法中对s_stopWorker的判断只会在最开始判断一次，若s_stopWorker=true，则进入死循环，若是false，则显示Worker stopped when x = 0之后该线程就返回了。若想实际看到运行效果，需要将改短代码放在.cs文件中，利用命令行编译该段代码。利用命令行编译代码要添加环境变量，变量的路径是C:\Windows\Microsoft.NET\Framework\v4.0.30319。然后就可以在命令行中编译该文件，注意要打开/platform:x86，其意义在《CLR via C#》29章中有解释，x86编译器比x64编译器更成熟，优化也更大胆。在命令行中输入 csc /platform:x86  你的cs文件的路径，之后在输入Program.exe（假设你的文件名字叫Program.cs），之后你会看到程序一直卡死在Main: waiting for worker to stop.之后一直没有出现数到的数字。&lt;/p&gt;
&lt;p&gt;　　下面来讨论如何解决这个问题。在System.Threading.Volatile中提供了2个静态方法，&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Volatile{
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;bool&lt;/span&gt; Read(&lt;span&gt;ref&lt;/span&gt; &lt;span&gt;bool&lt;/span&gt;&lt;span&gt; location);
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;bool&lt;/span&gt; Write(&lt;span&gt;ref&lt;/span&gt; &lt;span&gt;bool&lt;/span&gt; location,  &lt;span&gt;bool&lt;/span&gt;&lt;span&gt; value);
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这两个方法能够阻止编译器对读和写进行优化，修改后的代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;bool&lt;/span&gt; s_stopWorker = &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; Main(&lt;span&gt;string&lt;/span&gt;&lt;span&gt;[] args){
    Console.WriteLine(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Main:letting worker run for 5s&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; t = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Thread(Worker);
    t.Start();
    Thread.Sleep(&lt;/span&gt;&lt;span&gt;5000&lt;/span&gt;&lt;span&gt;);
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;防止优化&lt;/span&gt;
    Volatile.Write(&lt;span&gt;ref&lt;/span&gt; s_stopWorker, &lt;span&gt;true&lt;/span&gt;&lt;span&gt;);
    Console.WriteLine(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Main: waiting for worker to stop.&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
    t.Join();
    Console.Read();
}
&lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; Worker(&lt;span&gt;object&lt;/span&gt;&lt;span&gt; o){
    &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; x = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;防止优化&lt;/span&gt;
    &lt;span&gt;while&lt;/span&gt; (Volatile.Read(&lt;span&gt;ref&lt;/span&gt; s_stopWorker)) x++&lt;span&gt;;
    Console.WriteLine(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Worker: stopped when x = {0}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, x);
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在s_stopWorker的读写处，都改用了Volatile类中的Read和Write方法。再次利用命令行编译该代码，会发现运行正常。很多时候我们搞不清到底该什么时候调用Volatile中的读写，什么时候该正常读写，于是C#提供了volatile关键字，该关键字能够保证对该变量的读写都是原子的，并且能够阻止对该方法进行优化。由于为了提高CPU的运行效率，现在的程序都是乱序执行，但是volatile能够保证该关键字之前的代码会在该关键字的变量读写时已经执行完成，该关键字修饰的变量以后的代码一定会在之后执行，而不会因乱序优化而在之前执行。我们去掉Volatile.Write和Read，然后将s_stopWorker前加上volatile关键字，运行上述代码，会发现结果正确。&lt;/p&gt;
&lt;p&gt;　　volatile关键字能够保证变量的线程安全，但是其缺点也是很明显的，将变量的每次读写都变成易变的读写，是对性能的浪费，因为这种情况极少发生。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;volatile&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; m = &lt;span&gt;5&lt;/span&gt;&lt;span&gt;;
m&lt;/span&gt;=m+m;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;volatile会阻止优化&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;通常，将一个变量增大一倍，只需要将该变量左移一位，就可以，但是volatile会阻止该优化。CPU会将m读入一个寄存器，然后读入另一个寄存器，然后在执行add，再将结果写入m。如果m不是int类型，而是更大的类型，则造成更大的浪费，如果在循环中，那真是杯具。&lt;/p&gt;
&lt;p&gt;另外C#不支持将有volatile修饰的变量以引用的形式传入方法，如Int32.TryParse(&quot;123&quot;, m);会得到一个警告，对volatile字段的引用将不被视为volatile。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;变量捕获（闭包）&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;　　第一段代码中，flag变量被lamda表达式包含。程序并没有在主线程中执行，而是在t1和t2中执行，该变量已经脱离了它的作用域，为了保证flag变量能够生效，编译器负责延长flag的生命周期，以保证在t1和t2线程执行时，该变量能够被访问，这就是变量捕获，也叫“闭包”，可以利用IL反编译器查看上述代码的IL指令来验证。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1336022/201803/1336022-20180311201153943-439834566.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　上图可以看到为了保证flag的生命周期编译器将2个lamda表达式（b_0和b_1）和flag用一个类包了起来，这样这3个的生命周期就一致了。这很好，因为不需要我们去关心在t1和t2获取flag值时，flag是否有效，编译器已经帮我们全做了。&lt;/p&gt;
&lt;p&gt;　　本文讲了线程安全的必要性以及线程安全的手段之一：volatile（易变性），还简单介绍了变量捕获。线程安全的内容还没讲完，预计分3-4篇博客来讲线程安全。欢迎小伙伴在评论区与我交流。&lt;/p&gt;
</description>
<pubDate>Sun, 11 Mar 2018 15:35:00 +0000</pubDate>
<dc:creator>JAZzzzzzzz</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/jazzpop/p/8547015.html</dc:identifier>
</item>
<item>
<title>Delphi基础-数据类型 - 舞动的代码</title>
<link>http://www.cnblogs.com/coder163/p/8546956.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/coder163/p/8546956.html</guid>
<description>&lt;h5 id=&quot;枚举类型&quot;&gt;枚举类型&lt;/h5&gt;
&lt;p&gt;　　Pascal程序不仅用于数值处理，还更广泛地用于处理非数值的数据。例如，性别、月份、星期几、颜色、单位名、学历、职业等。&lt;br/&gt;​&lt;/p&gt;
&lt;h6 id=&quot;枚举类型的定义&quot;&gt;1. 枚举类型的定义&lt;/h6&gt;
&lt;p&gt;格式:　type 枚举类型标识符=(标识符1,标识符2,…,标识符n)&lt;/p&gt;
&lt;h6 id=&quot;枚举类型特点&quot;&gt;2. 枚举类型特点&lt;/h6&gt;
&lt;ul&gt;&lt;li&gt;枚举元素只能是标识符； 定义枚举类型时列出的所有枚举元素构成了这种枚举类型的值域（取值范围）。例如，下列类型定义是合法的：&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;18&quot;&gt;
&lt;pre class=&quot;sourceCode pascal&quot;&gt;
&lt;code class=&quot;sourceCode pascal&quot;&gt; &lt;span class=&quot;kw&quot;&gt;type&lt;/span&gt;  
  days=(sun,mon,tue,wed,thu,fri,sat);  
  colors=(red,yellow,blue,white,black,green);&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　 而下列类型定义是错误的:&lt;/p&gt;
&lt;p&gt;`&lt;code&gt;Pascal type colortype=('red','yellow','blue','white'); numbers=(1,3,5,7,9);&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;枚举类型属于顺序类型&lt;br/&gt;根据定义类型时各枚举元素的排列顺序确定它们的序号，且序号从0开始。例如，定义type days=(sun,mon,tue,wed,thu,fri,sat); 则， ord(sun)=0,ord(mon)=1,……，以此类推。枚举类型中的第一个元素无前趋，最后一个元素无后继。pred(sat)=fri; succ(sun)=mon; ord(sat)=6;&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;同一个枚举元素不能出现在两个或两个以上的枚举类型定义中。如下列定义是错误的:&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;12&quot;&gt;
&lt;pre class=&quot;sourceCode pascal&quot;&gt;
&lt;code class=&quot;sourceCode pascal&quot;&gt;  &lt;span class=&quot;kw&quot;&gt;type&lt;/span&gt; color1=(red,yellow,white);  
  color2=(blue,red,black);　
  &lt;span class=&quot;co&quot;&gt;// 因为red属于枚举类型color1和 color2  &lt;/span&gt;
  &lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;枚举类型变量只能进行赋值运算和关系运算，不能进行算术运算和逻辑运算.　在枚举元素比较时，实际上是对其序号的比较。&lt;br/&gt;例如定义如下：&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;21&quot;&gt;
&lt;pre class=&quot;sourceCode pascal&quot;&gt;
&lt;code class=&quot;sourceCode pascal&quot;&gt;    &lt;span class=&quot;kw&quot;&gt;type&lt;/span&gt; 
        days=(sun,mon,tue,wed,thu,fri,sat);  
    　　colors=(red,yellow,blue,white,black,green);  
    &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; 
        color:colors;  
    　　 weekday:days;  
    　&lt;span class=&quot;co&quot;&gt;//则下面语句是合法的:  &lt;/span&gt;
    　weekday:=mon;  
    　if weekday=sun &lt;span class=&quot;kw&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;write&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'rest'&lt;/span&gt;);  
    　&lt;span class=&quot;co&quot;&gt;//而下面语句是不合法的:  &lt;/span&gt;
        mon:=&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;;           &lt;span class=&quot;co&quot;&gt;//错把枚举值当成变量名；  &lt;/span&gt;
        weekday:=blue；   &lt;span class=&quot;co&quot;&gt;//枚举值blue不属于枚举变量weekday的值域；  &lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;read&lt;/span&gt;(color);      &lt;span class=&quot;co&quot;&gt;//枚举类型变量 不能用读语句进行赋值；  &lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;write&lt;/span&gt;(weekday); writeln(blue);&lt;span class=&quot;co&quot;&gt;//不能通过写语句输出枚举类型的变量值和枚举值。  &lt;/span&gt;
   
 &lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;可以把变量的说明与类型的定义合并在一起，如:&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;20&quot;&gt;
&lt;pre class=&quot;sourceCode pascal&quot;&gt;
&lt;code class=&quot;sourceCode pascal&quot;&gt;  　　var 
  　　    holiday,workday:(sun,mon,tue,wed,thu,fri,sat);  
  　　　   color:(red,yellow,blue,white,black,green); 
 
 &lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;
&lt;code&gt;对枚举数据的输入与输出可通过间接方式进行。输入时，一般可输入一个代码，通过程序进行转换，输出时，也只是打印出与枚举元素相对应的字符串。这在后面的例题中将有使用示例。  &lt;/code&gt;
&lt;/pre&gt;
&lt;h6 id=&quot;应用实例&quot;&gt;3. 应用实例&lt;/h6&gt;
&lt;ul&gt;&lt;li&gt;例1、输入今天是星期几的序号，输出明天是星期几的英文单词（星期天序号为0）。&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;17&quot;&gt;
&lt;pre class=&quot;sourceCode pascal&quot;&gt;
&lt;code class=&quot;sourceCode pascal&quot;&gt;  　　type weekday=(sun,mon,tue,wed,thu,fri,sat);  
  　　 &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; i : &lt;span class=&quot;dt&quot;&gt;integer&lt;/span&gt;;  
  　　　　 today,tomorrow : weekday;  
  　　&lt;span class=&quot;kw&quot;&gt;begin&lt;/span&gt;  
  　　　writeln(&lt;span class=&quot;st&quot;&gt;'What date is it'&lt;/span&gt;); readln(i);  
  　　　&lt;span class=&quot;kw&quot;&gt;case&lt;/span&gt; i &lt;span class=&quot;kw&quot;&gt;of&lt;/span&gt;                              &lt;span class=&quot;co&quot;&gt;{ 根据输入转换成枚举型 }&lt;/span&gt;  
  　　　　&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;:today:=sun;  
  　　　　&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;:today:=mon;  
  　　　　&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;:today:=tue;  
  　　　　&lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;:today:=wed;  
  　　　　&lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;:today:=thu;  
  　　　　&lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;:today:=fri;  
  　　　　&lt;span class=&quot;dv&quot;&gt;6&lt;/span&gt;:today:=sat;  
  　　　&lt;span class=&quot;kw&quot;&gt;end&lt;/span&gt;;  
  　　　if (today=sat) &lt;span class=&quot;kw&quot;&gt;then&lt;/span&gt; tomorrow:=sun  &lt;span class=&quot;kw&quot;&gt;else&lt;/span&gt; tomorrow:=succ(today);  
  　　  &lt;span class=&quot;kw&quot;&gt;write&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'The tomorrow is '&lt;/span&gt;);      
  　　　&lt;span class=&quot;kw&quot;&gt;case&lt;/span&gt; tomorrow &lt;span class=&quot;kw&quot;&gt;of&lt;/span&gt;  
  　　　　sun:writeln(&lt;span class=&quot;st&quot;&gt;'sunday'&lt;/span&gt;);  
  　　　　mon:writeln(&lt;span class=&quot;st&quot;&gt;'monday'&lt;/span&gt;);  
  　　　　tue:writeln(&lt;span class=&quot;st&quot;&gt;'tuesday'&lt;/span&gt;);  
  　　　　wed:writeln(&lt;span class=&quot;st&quot;&gt;'wednesay'&lt;/span&gt;);  
  　　　　thu:writeln(&lt;span class=&quot;st&quot;&gt;'thursday'&lt;/span&gt;);  
  　　　　fri:writeln(&lt;span class=&quot;st&quot;&gt;'friday'&lt;/span&gt;);  
  　　　　sat:writeln(&lt;span class=&quot;st&quot;&gt;'saturday'&lt;/span&gt;);  
  　　　&lt;span class=&quot;kw&quot;&gt;end&lt;/span&gt;;  
  　　&lt;span class=&quot;kw&quot;&gt;end&lt;/span&gt;.
 &lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;PS: 枚举类型是一种有序类型，所以枚举类型的变量可以作为循环变量。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id=&quot;子界类型&quot;&gt;子界类型&lt;/h5&gt;
&lt;ul readability=&quot;0.5&quot;&gt;&lt;li&gt;如果我们定义一个变量为integer型，那么它的取值范围一般为-32768～32767。而事实上，每个程序中所用的变量的值都有一个确定的范围。 例如，人的年龄一般为1到120岁，一年中的月数为1到12月，一月中的天数为1到31天等等。&lt;br/&gt;&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;如果能在程序中对所用的变量的值域作具体规定，就便于检查出那些不合法的数据，这就能更好地保证程序运行的正确性且在一定程度上节省内存空间。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;子界类型能很好解决上面的问题。此外，在数组的定义中，常用到子界类型，以规定数组下标的范围。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;h6 id=&quot;定义格式&quot;&gt;1. 定义格式&lt;/h6&gt;
&lt;p&gt;type 子界类型标识符=常量1..常量2&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt; 常量1称为子界的下界，常量2称为子界的上界；  &lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;注意事项：&lt;br/&gt;​&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;下界和上界必须是同一顺序类型（该类型称为子界类型的基类型），且上界的序号必须大于下界的序号。&lt;br/&gt;例如　type age=1..100;&lt;br/&gt;　　　 letter='a' ..'z';&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;可以直接在变量说明中定义子界类型。如：&lt;br/&gt;type letter='a'..' z ';&lt;br/&gt;　　　　　var ch1,ch2:letter;&lt;br/&gt;　　可以合并成:&lt;br/&gt;　　 var ch1,ch2:'a'..'d';&lt;/li&gt;
&lt;/ol&gt;&lt;h6 id=&quot;运算规则&quot;&gt;2. 运算规则&lt;/h6&gt;
&lt;ul readability=&quot;1&quot;&gt;&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;凡可使用基类型的运算规则同样适用该类型的子界类型。&lt;br/&gt;例如，可以使用整型变量的地方，也可以使用以整型为基类型的子界类型数据。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;对基类型的运算规则同样适用于该类型的子界类型。&lt;br/&gt;例如，div，mod要求参加运算的数据为整, 因而也可以为整型的任何子界类型数据。&lt;br/&gt;&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;基类型相同的不同子界类型数据可以进行混合运算。&lt;br/&gt;例如：设有如下说明：&lt;br/&gt;　　var x:1..100;&lt;br/&gt;　　　　 y:1..500;&lt;br/&gt;　　　　 z:1..1000;&lt;br/&gt;　　　 a:integer;&lt;br/&gt;　　则下列语句是合法的： a:=Sqr(x)+y+z; z:=x+y&lt;br/&gt;　　下列语句: y:=x+z+a; 当x+y+a的值在1～500范围内时是合法的，否则会出错。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;h6 id=&quot;应用举例&quot;&gt;3. 应用举例&lt;/h6&gt;
&lt;ul&gt;&lt;li&gt;例1、使用子界型情况语句，当输入月、日、年(10 30 1986)，输出30 Oct 1986。&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;12&quot;&gt;
&lt;pre class=&quot;sourceCode pascal&quot;&gt;
&lt;code class=&quot;sourceCode pascal&quot;&gt;  &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt;
    month: &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;..&lt;span class=&quot;dv&quot;&gt;12&lt;/span&gt;;
    day: &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;..&lt;span class=&quot;dv&quot;&gt;31&lt;/span&gt;;
    year: &lt;span class=&quot;dv&quot;&gt;1900&lt;/span&gt;..&lt;span class=&quot;dv&quot;&gt;2003&lt;/span&gt;;

  &lt;span class=&quot;kw&quot;&gt;begin&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;write&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'Enter date(mm dd yy):'&lt;/span&gt;);
    readln(month, day, year);
    &lt;span class=&quot;kw&quot;&gt;write&lt;/span&gt;(day);
    &lt;span class=&quot;kw&quot;&gt;case&lt;/span&gt; month &lt;span class=&quot;kw&quot;&gt;of&lt;/span&gt;
      &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;:
        &lt;span class=&quot;kw&quot;&gt;write&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'Jan'&lt;/span&gt;);
      &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;:
        &lt;span class=&quot;kw&quot;&gt;Write&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'Feb'&lt;/span&gt;);
      &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;:
        &lt;span class=&quot;kw&quot;&gt;write&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'Mar'&lt;/span&gt;);
      &lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;:
        &lt;span class=&quot;kw&quot;&gt;write&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'Apr'&lt;/span&gt;);
      &lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;:
        &lt;span class=&quot;kw&quot;&gt;write&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'May'&lt;/span&gt;);
      &lt;span class=&quot;dv&quot;&gt;6&lt;/span&gt;:
        &lt;span class=&quot;kw&quot;&gt;write&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'Jun'&lt;/span&gt;);
      &lt;span class=&quot;dv&quot;&gt;7&lt;/span&gt;:
        &lt;span class=&quot;kw&quot;&gt;write&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'Jul'&lt;/span&gt;);
      &lt;span class=&quot;dv&quot;&gt;8&lt;/span&gt;:
        &lt;span class=&quot;kw&quot;&gt;write&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'Aug'&lt;/span&gt;);
      &lt;span class=&quot;dv&quot;&gt;9&lt;/span&gt;:
        &lt;span class=&quot;kw&quot;&gt;write&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'Sep'&lt;/span&gt;);
      &lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;:
        &lt;span class=&quot;kw&quot;&gt;write&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'Oct'&lt;/span&gt;);
      &lt;span class=&quot;dv&quot;&gt;11&lt;/span&gt;:
        &lt;span class=&quot;kw&quot;&gt;write&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'Nov'&lt;/span&gt;);
      &lt;span class=&quot;dv&quot;&gt;12&lt;/span&gt;:
        &lt;span class=&quot;kw&quot;&gt;write&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'Dec'&lt;/span&gt;);
    &lt;span class=&quot;kw&quot;&gt;end&lt;/span&gt;;
 &lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;例2、将一个四位的十六进制数转换成十进制数。&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;19&quot;&gt;
&lt;pre class=&quot;sourceCode pascal&quot;&gt;
&lt;code class=&quot;sourceCode pascal&quot;&gt;    &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt;
      ch: &lt;span class=&quot;dt&quot;&gt;char&lt;/span&gt;;
      n: &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;..&lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;;
      d1, d2, d3, d4, t: &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;..&lt;span class=&quot;dv&quot;&gt;15&lt;/span&gt;;
      s: &lt;span class=&quot;dt&quot;&gt;real&lt;/span&gt;;

    &lt;span class=&quot;kw&quot;&gt;begin&lt;/span&gt;
      &lt;span class=&quot;kw&quot;&gt;Write&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'The hex number is '&lt;/span&gt;);
      &lt;span class=&quot;kw&quot;&gt;for&lt;/span&gt; n := &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;kw&quot;&gt;begin&lt;/span&gt;                    &lt;span class=&quot;co&quot;&gt;{ 把四位的十六进制数分四次作为字符读入 }&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;Read&lt;/span&gt;(ch);
        &lt;span class=&quot;kw&quot;&gt;write&lt;/span&gt;(ch);   &lt;span class=&quot;co&quot;&gt;{ 分别转换为十进制的数d1,d2,d3,d4, }&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (ch &amp;gt;= &lt;span class=&quot;st&quot;&gt;'0'&lt;/span&gt;) &lt;span class=&quot;kw&quot;&gt;and&lt;/span&gt; (ch &amp;lt;= &lt;span class=&quot;st&quot;&gt;'9'&lt;/span&gt;) &lt;span class=&quot;kw&quot;&gt;then&lt;/span&gt;
          t := ord(ch) - &lt;span class=&quot;dv&quot;&gt;48&lt;/span&gt;;
        &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (ch &amp;gt;= &lt;span class=&quot;st&quot;&gt;'a'&lt;/span&gt;) &lt;span class=&quot;kw&quot;&gt;and&lt;/span&gt; (ch &amp;lt;= &lt;span class=&quot;st&quot;&gt;'z'&lt;/span&gt;) &lt;span class=&quot;kw&quot;&gt;then&lt;/span&gt;
          t := ord(ch) - &lt;span class=&quot;dv&quot;&gt;87&lt;/span&gt;;
        &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (ch &amp;gt;= &lt;span class=&quot;st&quot;&gt;'A'&lt;/span&gt;) &lt;span class=&quot;kw&quot;&gt;and&lt;/span&gt; (ch &amp;lt;= &lt;span class=&quot;st&quot;&gt;'Z'&lt;/span&gt;) &lt;span class=&quot;kw&quot;&gt;then&lt;/span&gt;
          t := ord(ch) - &lt;span class=&quot;dv&quot;&gt;55&lt;/span&gt;;
        &lt;span class=&quot;kw&quot;&gt;case&lt;/span&gt; n &lt;span class=&quot;kw&quot;&gt;of&lt;/span&gt;
          &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;:
            di := t;
          &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;:
            d2 := t;
          &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;:
            d3 := t;
          &lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;:
            d4 := t;
        &lt;span class=&quot;kw&quot;&gt;end&lt;/span&gt;
      &lt;span class=&quot;kw&quot;&gt;end&lt;/span&gt;;
      s := d1 * &lt;span class=&quot;dv&quot;&gt;16&lt;/span&gt; * &lt;span class=&quot;dv&quot;&gt;16&lt;/span&gt; * &lt;span class=&quot;dv&quot;&gt;16&lt;/span&gt; + d2 * &lt;span class=&quot;dv&quot;&gt;16&lt;/span&gt; * &lt;span class=&quot;dv&quot;&gt;16&lt;/span&gt; + d3 * &lt;span class=&quot;dv&quot;&gt;16&lt;/span&gt; + d4;
      writeln(&lt;span class=&quot;st&quot;&gt;'dec:'&lt;/span&gt;, s)
    &lt;span class=&quot;kw&quot;&gt;end&lt;/span&gt;.
 &lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h5 id=&quot;集合类型&quot;&gt;集合类型&lt;/h5&gt;
&lt;p&gt;集合是由具有某些共同特征的元素构成的一个整体。在pascal中，一个集合是由具有同一有序类型的一组数据元素所组成，这一有序类型称为该集合的基类型。。&lt;/p&gt;
&lt;h6 id=&quot;集合类型的定义和变量的说明&quot;&gt;1. 集合类型的定义和变量的说明&lt;/h6&gt;
&lt;ul&gt;&lt;li&gt;集合类型的一般形式为： set of 基类型;&lt;/li&gt;
&lt;li&gt;基类型可以是任意顺序类型, 而不能是实型或其它构造类型。同时，基类型的数据的序号不得超过255。例如下列说明是合法的:&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;14&quot;&gt;
&lt;pre class=&quot;sourceCode pascal&quot;&gt;
&lt;code class=&quot;sourceCode pascal&quot;&gt;  &lt;span class=&quot;kw&quot;&gt;type&lt;/span&gt;
    numbers = &lt;span class=&quot;kw&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;..&lt;span class=&quot;dv&quot;&gt;9&lt;/span&gt;;
    ch = &lt;span class=&quot;kw&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;char&lt;/span&gt;;
    day = (sun, mon, tue, wed, thu, fri, sat);
  &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt;
    s: numbers;
    c: ch;
    weekday: day;
 
 &lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;可以将类型说明与变量说明合并在一起，如:&lt;br/&gt;```pascal&lt;br/&gt;var s:set of 0..9; { 子界型 }&lt;br/&gt;c:set of char;&lt;br/&gt;weekday: (sun,mon,tue,wed,thu,fri,sat); { 枚举型 }&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;```&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;ps 注意：集合的元素个数不超过256个，因此 var s:set of integer; 是错误的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h6 id=&quot;集合的值&quot;&gt;2. 集合的值&lt;/h6&gt;
&lt;ol readability=&quot;11.5&quot;&gt;&lt;li readability=&quot;4&quot;&gt;
&lt;p&gt;集合的值放在一对方括号中，中间各元素之间用逗号隔开。如：[1,2,5] 和 ['a','e','i'] 都是集合。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;在集合中可以没有任何元素，这样的集合称为空集。[] 空集&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;在集合中，如果元素的值是连续的，则可用子界型的表示方法表示。例如：　　&lt;br/&gt;［1,2,3,4,5, 10,15］　可以表示成： ［1..5,10,15］&lt;/li&gt;
&lt;li readability=&quot;4&quot;&gt;
&lt;p&gt;集合的值与方括号内元素出现的次序无关。例如［1,5,8 ］和［5,1,8］的值相等。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;6&quot;&gt;
&lt;p&gt;在集合中同一元素的重复出现对集合的值没有影响。例如，［1,8,5,1,8］与［1,5,8］的值相等。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;每个元素可用基类型所允许的表达式来表示。如 ［1,1+2,4］、［succ(ch)］&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;h6 id=&quot;集合的运算&quot;&gt;3. 集合的运算&lt;/h6&gt;
&lt;p&gt;集合类型变量不能进行算术运算，集合是无序的，不能使用ord、pred、succ等函数。&lt;/p&gt;
&lt;ol readability=&quot;4&quot;&gt;&lt;li readability=&quot;11&quot;&gt;
&lt;p&gt;赋值运算:只能通过赋值语句给集合变量赋值，不能通过读语句赋值，也不能通过写语句直接输出集合变量的值。如：&lt;br/&gt;集合变量赋值: c:=['2']; i:=[5]; w:=[];&lt;br/&gt;集合变量赋子界值: c:=['a'..'z']; i:=[1..7];&lt;br/&gt;集合变量赋枚举值: c:=['a','b','d','m']; i:=[2,4,6,8,10];&lt;br/&gt;函数赋值操作：&lt;br/&gt;添加一个集合元素 Include(s, 1);&lt;br/&gt;删除一个集合元素 Exclude(s, 1);&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;集合的并、交、差运算&lt;br/&gt;可以对集合进行并(＋)、交(＊)、差 (－)三种运算，每种运算只有一个运算符、两个运算对象，运算结果仍为集合。注意它们与算术运算的区别。&lt;/li&gt;
&lt;/ol&gt;&lt;ul&gt;&lt;li&gt;并运算 （关系代数运算符∪）&lt;br/&gt;A，B为两个集合，由集合A中的元素加上集合B中的与A不重复的所有元素组成的集合，称为集合A和B的并。即A+B，如：&lt;br/&gt;[X，Y，Z]+[X] 为 [X，Y，Z] { 两个集合中不重复的所有元素 }&lt;br/&gt;[1]+[4] 为[1，4]&lt;/li&gt;
&lt;li&gt;交运算 （关系代数运算符∩）&lt;br/&gt;A，B为两个集合，由既属于集合A中的元素又属于集合B中的所有元素组成的集合，称为集合A和B的交。即A&lt;em&gt;B，如：&lt;br/&gt;[X，Y，Z]&lt;/em&gt;[X] 为 [X] { 两个集合中的相同元素 }&lt;br/&gt;[X，Y，Z]*[M] 为 []&lt;/li&gt;
&lt;li&gt;差运算 （关系代数运算符-）&lt;br/&gt;A，B为两个集合，由集合A中的元素除去集合B中与A相同的元素组成的集合，称为集合A和B的差。即AB，如：&lt;br/&gt;[X，Y，Z]-[X] 为 [Y，Z ] { 在集合A中又不在集合B中的所有元素 }&lt;br/&gt;[X，Y，Z]-[M] 为 [X，Y，Z]&lt;br/&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;ol&gt;&lt;li&gt;集合的关系运算： 运算结果为布尔值&lt;/li&gt;
&lt;/ol&gt;&lt;ul&gt;&lt;li&gt;关系运算符：= 相等、 &amp;lt;&amp;gt; 不相等 &amp;gt;= 包含，表示前者蕴含后者，相当于集合论中的 &amp;lt;= 包含于，表示前者蕴含于后者，相当于集合论中的 。&lt;br/&gt;例如：[a,b,c]=[b,c,a] 为true，元素个数相同，内容相同，不管排列顺序如何。&lt;br/&gt;[a,b,c]&amp;gt;=[a] 为true；&lt;br/&gt;[a,b]&amp;lt;=[a,b,c] 为true。&lt;/li&gt;
&lt;/ul&gt;&lt;ol&gt;&lt;li&gt;in运算：in的右边为集合，左边为与集合基类型相同的表达式，为布尔值。in测试一个元素是否在集合中。相当于集合论中的∈。它们都是二目运算，且前４个运算符的运算对象都是相容　　的集合类型。例如：a in［b,c］ 为false。&lt;/li&gt;
&lt;/ol&gt;&lt;ul&gt;&lt;li&gt;设集合a:=[1..10]； x 为integer，如x在集合a中即删除a中的元素x，否则把元素x添加到集合a中。程序段如下：&lt;br/&gt;if x in a then a:=a-[x] else a:=a+[x]&lt;/li&gt;
&lt;/ul&gt;</description>
<pubDate>Sun, 11 Mar 2018 15:19:00 +0000</pubDate>
<dc:creator>舞动的代码</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/coder163/p/8546956.html</dc:identifier>
</item>
</channel>
</rss>