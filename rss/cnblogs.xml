<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>我对CSS选择器的认识 - Paykan</title>
<link>http://www.cnblogs.com/MPK-dev/p/9515465.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/MPK-dev/p/9515465.html</guid>
<description>&lt;h2&gt;一、简述　　&lt;/h2&gt;
&lt;p&gt;　　CSS选择器是对HTML元素进行选择的筛选条件，大概可以分为两类：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;特征选择器——根据元素自身所具有的某种特征进行筛选，比如名称、ID、属性等；&lt;/li&gt;
&lt;li&gt;关系选择器——根据元素与其他元素的关系进行筛选，比如子元素、兄弟元素等；&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;　　在真正使用的时候，几个简单的选择器可以组合成更复杂的选择器，所以谁也说不上CSS选择器有多少。还有两个选择器是功能性的，它们可以给元素已有内容之前或之后添加新内容。　&lt;/p&gt;
&lt;p&gt;　　我做了一个项目，里面包含一个测试CSS选择器的小功能，&lt;a href=&quot;https://github.com/BarneyRoos/myPortfolio&quot; target=&quot;_blank&quot;&gt;请看这里&lt;/a&gt;。&lt;/p&gt;
&lt;h2&gt;二、归纳&lt;/h2&gt;
&lt;p&gt;　　下文中所有的 &lt;span class=&quot;cnblogs_code&quot;&gt;&lt;span&gt;SELECTOR&lt;/span&gt;&lt;/span&gt; 都代表任何一个有效的选择器。&lt;/p&gt;
&lt;h3&gt;　　1. 特征选择器：&lt;/h3&gt;
&lt;table border=&quot;1&quot;&gt;&lt;tbody readability=&quot;28&quot;&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;描述&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;选择器&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;备注&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;1. 无论有什么特征——即全部&lt;/td&gt;
&lt;td&gt; &lt;span class=&quot;cnblogs_code&quot;&gt;&lt;span&gt;*&lt;/span&gt; { }&lt;/span&gt; &lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;2. 元素名称是 &quot;element&quot;&lt;/td&gt;
&lt;td&gt; &lt;span class=&quot;cnblogs_code&quot;&gt;&lt;span&gt;element&lt;/span&gt; { }&lt;/span&gt; &lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;3. 具有类名 &quot;className&quot;&lt;/td&gt;
&lt;td&gt; &lt;span class=&quot;cnblogs_code&quot;&gt;&lt;span&gt;.className&lt;/span&gt; { }&lt;/span&gt; &lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;4. 具有id名 &quot;someID&quot;&lt;/td&gt;
&lt;td&gt; &lt;span class=&quot;cnblogs_code&quot;&gt;&lt;span&gt;#someID&lt;/span&gt; { }&lt;/span&gt; &lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;5. 带有属性  attr&lt;/td&gt;
&lt;td&gt; &lt;span class=&quot;cnblogs_code&quot;&gt;&lt;span&gt;SELECTOR[attr]&lt;/span&gt; { }&lt;/span&gt; &lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td&gt;6. 带有属性 attr，且属性值为 &quot;value&quot;&lt;/td&gt;
&lt;td&gt; &lt;span class=&quot;cnblogs_code&quot;&gt;&lt;span&gt;SELECTOR[attr=&quot;value&quot;]&lt;/span&gt; { }&lt;/span&gt; &lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td&gt;7. 带有属性 attr，且其若干个属性值中有一个是 &quot;value&quot;&lt;/td&gt;
&lt;td&gt; &lt;span class=&quot;cnblogs_code&quot;&gt;&lt;span&gt;SELECTOR[attr~=&quot;value&quot;] { }&lt;/span&gt;&lt;/span&gt; &lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td&gt;8. 带有属性 attr，且其属性值包含字符串 &quot;str&quot;&lt;/td&gt;
&lt;td&gt; &lt;span class=&quot;cnblogs_code&quot;&gt;&lt;span&gt;SELECTOR[attr*=&quot;str&quot;] { }&lt;/span&gt;&lt;/span&gt; &lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;9. 鼠标正位于其上方&lt;/td&gt;
&lt;td&gt; &lt;span class=&quot;cnblogs_code&quot;&gt;&lt;span&gt;SELECTOR:hover&lt;/span&gt; { }&lt;/span&gt; &lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td&gt;10. 目标是个独生子——它的父元素只有它这一个子元素&lt;/td&gt;
&lt;td&gt; &lt;span class=&quot;cnblogs_code&quot;&gt;&lt;span&gt;SELECTOR:only-child&lt;/span&gt; { }&lt;/span&gt; &lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;11. 目标内部是真空——连空格都没有&lt;/td&gt;
&lt;td&gt; &lt;span class=&quot;cnblogs_code&quot;&gt;&lt;span&gt;SELECTOR:empty&lt;/span&gt; { }&lt;/span&gt; &lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td&gt;12. 目标被某个链接锚定了，而且该链接被点击了&lt;/td&gt;
&lt;td&gt; &lt;span class=&quot;cnblogs_code&quot;&gt;&lt;span&gt;SELECTOR:target { }&lt;/span&gt;&lt;/span&gt; &lt;/td&gt;
&lt;td&gt;&lt;span class=&quot;cnblogs_code&quot;&gt;&lt;span class=&quot;cnblogs_code&quot;&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;a&lt;/span&gt; &lt;span&gt;href&lt;/span&gt;&lt;span&gt;=&quot;#topic&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;跳转到 SELECTOR 处&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td&gt;13. 目标中被用户通过鼠标拖动选中的内容&lt;/td&gt;
&lt;td&gt; &lt;span class=&quot;cnblogs_code&quot;&gt;&lt;span&gt;SELECTOR::selection&lt;/span&gt; { }&lt;/span&gt; &lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td colspan=&quot;3&quot;&gt;&lt;strong&gt;链接专有的特征&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;14. 未被访问的链接&lt;/td&gt;
&lt;td&gt; &lt;span class=&quot;cnblogs_code&quot;&gt;&lt;span&gt;a:link&lt;/span&gt; { }&lt;/span&gt; &lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;15. 已被访问的链接&lt;/td&gt;
&lt;td&gt; &lt;span class=&quot;cnblogs_code&quot;&gt;&lt;span&gt;a:visited&lt;/span&gt; { }&lt;/span&gt; &lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;16. 正在被点击的链接&lt;/td&gt;
&lt;td&gt; &lt;span class=&quot;cnblogs_code&quot;&gt;&lt;span&gt;a:active&lt;/span&gt; { }&lt;/span&gt; &lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td colspan=&quot;3&quot;&gt;&lt;strong&gt;表格元素专有的特征&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;17. 目标是启用的&lt;/td&gt;
&lt;td&gt; &lt;span class=&quot;cnblogs_code&quot;&gt;&lt;span&gt;SELECTOR:enabled { }&lt;/span&gt;&lt;/span&gt; &lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;18. 目标是禁用的&lt;/td&gt;
&lt;td&gt; &lt;span class=&quot;cnblogs_code&quot;&gt;&lt;span&gt;SELECTOR:disabled &lt;/span&gt;{ }&lt;/span&gt; &lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td&gt;19. 目标是被选中的（单选框、复选框）&lt;/td&gt;
&lt;td&gt; &lt;span class=&quot;cnblogs_code&quot;&gt;&lt;span&gt;SELECTOR:checked &lt;/span&gt;{ }&lt;/span&gt; &lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td&gt;20. 目标获得了焦点&lt;/td&gt;
&lt;td&gt; &lt;span class=&quot;cnblogs_code&quot;&gt;&lt;span&gt;SELECTOR:focus&lt;/span&gt; { }&lt;/span&gt; &lt;/td&gt;
&lt;td&gt;能接收用户输入的元素，当它正在接收时，就获得了焦点。&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td colspan=&quot;3&quot;&gt;&lt;strong&gt;两个功能性选择器&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;21. 给 SELECTOR 的内容之前加上些东西&lt;/td&gt;
&lt;td&gt; &lt;span class=&quot;cnblogs_code&quot;&gt;&lt;span&gt;SELECTOR:before&lt;/span&gt; { }&lt;/span&gt; &lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;22. 给 SELECTOR 内容之后加上些东西&lt;/td&gt;
&lt;td&gt; &lt;span class=&quot;cnblogs_code&quot;&gt;&lt;span&gt;SELECTOR:after&lt;/span&gt; { }&lt;/span&gt; &lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h3&gt;　　关系选择器&lt;/h3&gt;
&lt;table border=&quot;1&quot;&gt;&lt;tbody readability=&quot;21.5&quot;&gt;&lt;tr&gt;&lt;td&gt;描述&lt;/td&gt;
&lt;td&gt;选择器&lt;/td&gt;
&lt;td&gt;备注&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;5&quot;&gt;&lt;td&gt;1. SELECTOR1 和 SELECTOR2&lt;/td&gt;
&lt;td&gt; &lt;span class=&quot;cnblogs_code&quot;&gt;&lt;span&gt;SELECTOR1, SELECTOR2&lt;/span&gt; { }&lt;/span&gt; &lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td&gt;2. 位于 SELECTOR1 之后的所有兄弟元素 SELECTOR2&lt;/td&gt;
&lt;td&gt; &lt;span class=&quot;cnblogs_code&quot;&gt;&lt;span&gt;SELECTOR1~SELECTOR2&lt;/span&gt; { }&lt;/span&gt; &lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td&gt;3. 与 SELECTOR1 紧邻着的 SELECTOR2 元素&lt;/td&gt;
&lt;td&gt; &lt;span class=&quot;cnblogs_code&quot;&gt;&lt;span&gt;selector1+selector2&lt;/span&gt; { }&lt;/span&gt; &lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;6&quot;&gt;&lt;td&gt;4. SELECTOR 的首字母&lt;/td&gt;
&lt;td&gt; &lt;span class=&quot;cnblogs_code&quot;&gt;&lt;span&gt;selector:first-letter&lt;/span&gt; { }&lt;/span&gt; &lt;/td&gt;
&lt;td&gt;类似的还有  &lt;span class=&quot;cnblogs_code&quot;&gt;&lt;span&gt;SELECTOR:first-line&lt;/span&gt; { }&lt;/span&gt; &lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td&gt;5. SELECTOR1 的所有子元素 SELECTOR2&lt;/td&gt;
&lt;td&gt; &lt;span class=&quot;cnblogs_code&quot;&gt;&lt;span&gt;selector1&amp;gt;selector2&lt;/span&gt; { }&lt;/span&gt; &lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td&gt;6. SELECTOR1 的所有后代元素 SELECTOR2&lt;/td&gt;
&lt;td&gt; &lt;span class=&quot;cnblogs_code&quot;&gt;&lt;span&gt;selector1 selector2&lt;/span&gt; { }&lt;/span&gt; &lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td&gt;7. SELECTOR 的第一个子元素&lt;/td&gt;
&lt;td&gt; &lt;span class=&quot;cnblogs_code&quot;&gt;&lt;span&gt;selector:first-child&lt;/span&gt; { }&lt;/span&gt; &lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td&gt;8. SELECTOR 的第N个子元素&lt;/td&gt;
&lt;td&gt; &lt;span class=&quot;cnblogs_code&quot;&gt;&lt;span&gt;selector:nth-child(N)&lt;/span&gt; { }&lt;/span&gt; &lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td&gt;9. SELECTOR 的最后一个子元素&lt;/td&gt;
&lt;td&gt; &lt;span class=&quot;cnblogs_code&quot;&gt;&lt;span&gt;selector:last-child&lt;/span&gt; { }&lt;/span&gt; &lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td&gt;10. SELECTOR1 中除了 SELECTOR2 之外的所有元素&lt;/td&gt;
&lt;td&gt; &lt;span class=&quot;cnblogs_code&quot;&gt;&lt;span&gt;SELECTOR1:not(SELECTOR2)&lt;/span&gt; { }&lt;/span&gt; &lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;　　个人浅薄之见，肯定有不到之处，希望得到有心之人指正，谢谢！&lt;/p&gt;
</description>
<pubDate>Tue, 21 Aug 2018 20:28:00 +0000</pubDate>
<dc:creator>Paykan</dc:creator>
<og:description>我对CSS选择器的认识 一、简述 CSS选择器是对HTML元素进行选择的筛选条件，大概可以分为两类： 在真正使用的时候，几个简单的选择器可以组合成更复杂的选择器，所以谁也说不上CSS选择器有多少。还有</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/MPK-dev/p/9515465.html</dc:identifier>
</item>
<item>
<title>【DP】树形DP - 1366365447WKY</title>
<link>http://www.cnblogs.com/wky1366365447/p/9515379.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/wky1366365447/p/9515379.html</guid>
<description>&lt;p&gt;&lt;span&gt;&lt;strong&gt;在树上发生的状态转移，一般来说，状态第一维是以i为根的子树。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;在Dfs的回溯部分状态转移。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h2&gt;&lt;strong&gt;一、树&lt;span&gt;的直径&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;在树上随便找一点w,以w为根作Dfs或Bfs，保存距离w结点u的编号及其距离。&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;再以那个节点u为根，作Dfs或Bfs，找到距离u最远的结点v。&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;此时，u-v为树的一条直径。&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;POJ1985 Cow Marathon&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;这道题给出N个点，M-1条边(字符是没有用的),然后求出直径。&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('56a92693-88b4-4d0e-b798-76b0676d6c34')&quot; readability=&quot;48&quot;&gt;&lt;img id=&quot;code_img_closed_56a92693-88b4-4d0e-b798-76b0676d6c34&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_56a92693-88b4-4d0e-b798-76b0676d6c34&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('56a92693-88b4-4d0e-b798-76b0676d6c34',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_56a92693-88b4-4d0e-b798-76b0676d6c34&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;91&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; #include&amp;lt;iostream&amp;gt;
&lt;span&gt; 2&lt;/span&gt; #include&amp;lt;cstdio&amp;gt;
&lt;span&gt; 3&lt;/span&gt; #include&amp;lt;cstdlib&amp;gt;
&lt;span&gt; 4&lt;/span&gt; #include&amp;lt;cstring&amp;gt;
&lt;span&gt; 5&lt;/span&gt; #include&amp;lt;queue&amp;gt; 
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;using&lt;/span&gt; &lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; std;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;#define&lt;/span&gt; MAX_N 40010
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;struct&lt;/span&gt;&lt;span&gt; Edge{
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;     &lt;span&gt;int&lt;/span&gt;&lt;span&gt; to,next,value;
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; }edge[MAX_N*&lt;span&gt;2&lt;/span&gt;&lt;span&gt;];
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; head[MAX_N];
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; N,M,cnt,ans,node;
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; Add(&lt;span&gt;int&lt;/span&gt; u,&lt;span&gt;int&lt;/span&gt; v,&lt;span&gt;int&lt;/span&gt;&lt;span&gt; w){
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;     edge[++cnt].to=&lt;span&gt;v;
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;     edge[cnt].value=&lt;span&gt;w;
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;     edge[cnt].next=&lt;span&gt;head[u];
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;     head[u]=&lt;span&gt;cnt;
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; Bfs(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; u){
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;     queue&amp;lt;&lt;span&gt;int&lt;/span&gt;&amp;gt;&lt;span&gt;Q;
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;     &lt;span&gt;bool&lt;/span&gt; vis[MAX_N];memset(vis,&lt;span&gt;false&lt;/span&gt;,&lt;span&gt;sizeof&lt;/span&gt;&lt;span&gt;(vis));
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;     &lt;span&gt;int&lt;/span&gt; dis[MAX_N];memset(dis,&lt;span&gt;0&lt;/span&gt;,&lt;span&gt;sizeof&lt;/span&gt;&lt;span&gt;(dis));
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;    Q.push(u);
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;     vis[u]=&lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;     ans=&lt;span&gt;0&lt;/span&gt;,node=&lt;span&gt;u;
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;     &lt;span&gt;while&lt;/span&gt;(!&lt;span&gt;Q.empty()){
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt; x=&lt;span&gt;Q.front();Q.pop();
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; i=head[x];~i;i=&lt;span&gt;edge[i].next){
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;             &lt;span&gt;int&lt;/span&gt; v=edge[i].to,w=&lt;span&gt;edge[i].value;
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt;(!vis[v]&amp;amp;&amp;amp;dis[v]&amp;lt;dis[x]+&lt;span&gt;w){
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;                 dis[v]=dis[x]+&lt;span&gt;w;
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;                 vis[v]=&lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt;(ans&amp;lt;&lt;span&gt;dis[v]){
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt;                     ans=&lt;span&gt;dis[v];
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt;                     node=&lt;span&gt;v;
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt; &lt;span&gt;                Q.push(v);
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; main(){
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt;     &lt;span&gt;while&lt;/span&gt;(~scanf(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%d%d&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&amp;amp;N,&amp;amp;&lt;span&gt;M)){
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt;         memset(head,-&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;sizeof&lt;/span&gt;&lt;span&gt;(head));
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt;         memset(edge,&lt;span&gt;0&lt;/span&gt;,&lt;span&gt;sizeof&lt;/span&gt;&lt;span&gt;(edge));
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt;         &lt;span&gt;char&lt;/span&gt; str[&lt;span&gt;5&lt;/span&gt;&lt;span&gt;];
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt;         cnt=&lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; i=&lt;span&gt;1&lt;/span&gt;;i&amp;lt;=M;i++&lt;span&gt;){
&lt;/span&gt;&lt;span&gt;49&lt;/span&gt;             &lt;span&gt;int&lt;/span&gt; u,v,w;scanf(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%d%d%d%s&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&amp;amp;u,&amp;amp;v,&amp;amp;&lt;span&gt;w,str);
&lt;/span&gt;&lt;span&gt;50&lt;/span&gt; &lt;span&gt;            Add(u,v,w);
&lt;/span&gt;&lt;span&gt;51&lt;/span&gt; &lt;span&gt;            Add(v,u,w);
&lt;/span&gt;&lt;span&gt;52&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;53&lt;/span&gt;         Bfs(&lt;span&gt;1&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;54&lt;/span&gt; &lt;span&gt;        Bfs(node);
&lt;/span&gt;&lt;span&gt;55&lt;/span&gt;         printf(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%d\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,ans);
&lt;/span&gt;&lt;span&gt;56&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;57&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;58&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;Bfs&lt;/span&gt;&lt;/div&gt;



&lt;h2&gt; 二、树的最大独立集&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;给一棵N个结点的子树，要求选出尽量多的点，使它们两两不相邻。&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;用树形DP的思路：状态dp(i,j)表示以i为根的子树,i结点是否被选取。&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1464960/201808/1464960-20180822005106734-322925512.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;对于这颗树，dp(i,0)代表不选i这个结点，可以得出dp(i,0)=sum(max(dp(k,0),dp(k,1)))。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1464960/201808/1464960-20180822010205509-1785229174.png&quot; alt=&quot;&quot;/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;可以写出代码。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;Luogu1352没有上司的舞会&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;这道题需要记录每个v结点的入度，入度为0的结点就是根节点。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('efa5b1eb-2287-423d-bb41-5e55777ac3e7')&quot; readability=&quot;41.5&quot;&gt;&lt;img id=&quot;code_img_closed_efa5b1eb-2287-423d-bb41-5e55777ac3e7&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_efa5b1eb-2287-423d-bb41-5e55777ac3e7&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('efa5b1eb-2287-423d-bb41-5e55777ac3e7',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_efa5b1eb-2287-423d-bb41-5e55777ac3e7&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;78&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; #include&amp;lt;iostream&amp;gt;
&lt;span&gt; 2&lt;/span&gt; #include&amp;lt;cstdio&amp;gt;
&lt;span&gt; 3&lt;/span&gt; #include&amp;lt;cstring&amp;gt;
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;using&lt;/span&gt; &lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; std;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;#define&lt;/span&gt; MAX_N 6010
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;struct&lt;/span&gt;&lt;span&gt; Edge{
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;     &lt;span&gt;int&lt;/span&gt;&lt;span&gt; to,next;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; }edge[MAX_N*&lt;span&gt;2&lt;/span&gt;&lt;span&gt;];
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; head[MAX_N],R[MAX_N],dp[MAX_N][&lt;span&gt;2&lt;/span&gt;&lt;span&gt;],_index[MAX_N];
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; N,cnt;
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; Add(&lt;span&gt;int&lt;/span&gt; u,&lt;span&gt;int&lt;/span&gt;&lt;span&gt; v){
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;     edge[++cnt].to=&lt;span&gt;v;
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;     edge[cnt].next=&lt;span&gt;head[u];
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;     head[u]=&lt;span&gt;cnt;
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; Dfs(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; u){
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;     dp[u][&lt;span&gt;0&lt;/span&gt;]=&lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;     dp[u][&lt;span&gt;1&lt;/span&gt;]=&lt;span&gt;R[u];
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; i=head[u];~i;i=&lt;span&gt;edge[i].next){
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt; v=&lt;span&gt;edge[i].to;
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;        Dfs(v);
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;         dp[u][&lt;span&gt;0&lt;/span&gt;]+=max(dp[v][&lt;span&gt;0&lt;/span&gt;],dp[v][&lt;span&gt;1&lt;/span&gt;&lt;span&gt;]);
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;         dp[u][&lt;span&gt;1&lt;/span&gt;]+=dp[v][&lt;span&gt;0&lt;/span&gt;&lt;span&gt;];
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; main(){
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;     memset(head,-&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;sizeof&lt;/span&gt;&lt;span&gt;(head));
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;     scanf(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%d&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&amp;amp;&lt;span&gt;N);
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; i=&lt;span&gt;1&lt;/span&gt;;i&amp;lt;=N;i++)scanf(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%d&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&amp;amp;&lt;span&gt;R[i]);
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; i=&lt;span&gt;1&lt;/span&gt;;i&amp;lt;N;i++&lt;span&gt;){
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt; u,v;scanf(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%d%d&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&amp;amp;v,&amp;amp;&lt;span&gt;u);
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; &lt;span&gt;        Add(u,v);
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt;         _index[v]++&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt;     &lt;span&gt;int&lt;/span&gt; root=&lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; i=&lt;span&gt;1&lt;/span&gt;;i&amp;lt;=N;i++&lt;span&gt;){
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;(!&lt;span&gt;_index[i]){
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt;             root=&lt;span&gt;i;
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt;             &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt; &lt;span&gt;    Dfs(root);
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt;     &lt;span&gt;int&lt;/span&gt; Max=-&lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; i=&lt;span&gt;1&lt;/span&gt;;i&amp;lt;=N;i++&lt;span&gt;){
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt;         Max=max(Max,max(dp[i][&lt;span&gt;0&lt;/span&gt;],dp[i][&lt;span&gt;1&lt;/span&gt;&lt;span&gt;])); 
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt;     printf(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%d&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,Max);
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;49&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;Luogu1352&lt;/span&gt;&lt;/div&gt;

&lt;h2&gt;三、树形dp+01背包&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;只是在Dfs的回溯过程中加入了01背包的实现。&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;Luogu2014选课&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;值得注意的是，会有很多个根节点，所以把0号结点默认为根节点，所以此时的M要加1，因为0号结点是必选的。&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('ed81a156-9a13-4653-b8f8-06c2cd15bd3c')&quot; readability=&quot;40.5&quot;&gt;&lt;img id=&quot;code_img_closed_ed81a156-9a13-4653-b8f8-06c2cd15bd3c&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_ed81a156-9a13-4653-b8f8-06c2cd15bd3c&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('ed81a156-9a13-4653-b8f8-06c2cd15bd3c',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_ed81a156-9a13-4653-b8f8-06c2cd15bd3c&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;76&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; #include&amp;lt;iostream&amp;gt;
&lt;span&gt; 2&lt;/span&gt; #include&amp;lt;cstdio&amp;gt;
&lt;span&gt; 3&lt;/span&gt; #include&amp;lt;cstring&amp;gt;
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;using&lt;/span&gt; &lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; std;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;#define&lt;/span&gt; MAX_N 310
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;struct&lt;/span&gt;&lt;span&gt; Edge{
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;     &lt;span&gt;int&lt;/span&gt;&lt;span&gt; to,next;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; }edge[MAX_N*&lt;span&gt;2&lt;/span&gt;&lt;span&gt;];
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; cost[MAX_N],dp[MAX_N][MAX_N],head[MAX_N];
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; N,M,cnt;
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; Add(&lt;span&gt;int&lt;/span&gt; u,&lt;span&gt;int&lt;/span&gt;&lt;span&gt; v){
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;     edge[++cnt].to=&lt;span&gt;v;
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;     edge[cnt].next=&lt;span&gt;head[u];
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;     head[u]=&lt;span&gt;cnt;
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;} 
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; Dfs(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; u){
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;     dp[u][&lt;span&gt;1&lt;/span&gt;]=&lt;span&gt;cost[u];
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; i=head[u];~i;i=&lt;span&gt;edge[i].next){
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt; v=&lt;span&gt;edge[i].to;
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;        Dfs(v);
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; i=M+&lt;span&gt;1&lt;/span&gt;;i&amp;gt;=&lt;span&gt;1&lt;/span&gt;;i--&lt;span&gt;){
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;             &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; j=i-&lt;span&gt;1&lt;/span&gt;;j&amp;gt;=&lt;span&gt;1&lt;/span&gt;;j--&lt;span&gt;){
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;                 dp[u][i]=max(dp[u][i],dp[u][i-j]+&lt;span&gt;dp[v][j]);
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;         
&lt;span&gt;27&lt;/span&gt; &lt;span&gt;    } 
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; main(){
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;     memset(head,-&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;sizeof&lt;/span&gt;&lt;span&gt;(head));
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;     scanf(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%d%d&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&amp;amp;N,&amp;amp;&lt;span&gt;M);
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; i=&lt;span&gt;1&lt;/span&gt;;i&amp;lt;=N;i++&lt;span&gt;){
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt; s,k;scanf(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%d%d&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&amp;amp;k,&amp;amp;&lt;span&gt;s);
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; &lt;span&gt;        Add(k,i);
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt;         cost[i]=&lt;span&gt;s;
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt;      Dfs(&lt;span&gt;0&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt;      printf(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%d&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,dp[&lt;span&gt;0&lt;/span&gt;][M+&lt;span&gt;1&lt;/span&gt;&lt;span&gt;]);
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;Luou2014&lt;/span&gt;&lt;/div&gt;


&lt;h2&gt;四、树上次长路径&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;可以考虑到在一棵树上，会有一条或多条直径，所以只需要判断在当前树上，是否存在一条且仅有一条直径。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;如果有，那么次长路径为直径-1，相反，路径就是直径。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;需要三遍Bfs或Dfs，最后一遍是验证。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Tue, 21 Aug 2018 17:26:00 +0000</pubDate>
<dc:creator>1366365447WKY</dc:creator>
<og:description>树形DP 在树上发生的状态转移，一般来说，状态第一维是以i为根的子树。 在Dfs的回溯部分状态转移。 一、树的直径 在树上随便找一点w,以w为根作Dfs或Bfs，保存距离w结点u的编号及其距离。 再以</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/wky1366365447/p/9515379.html</dc:identifier>
</item>
<item>
<title>D06——C语言基础学PYTHON - m1racle</title>
<link>http://www.cnblogs.com/zhangkanghui/p/9510287.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/zhangkanghui/p/9510287.html</guid>
<description>&lt;p&gt;&lt;span&gt;&lt;strong&gt;C语言基础学习PYTHON——基础学习D06&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;20180821内容纲要：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　面向对象初级学习&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　　　1 面向对象&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　　　2 类&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　　　　　（1）封装&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　　　　　（2）继承&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　　　　　（3）多态&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　　　3 小结&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　　　4 练习：选课系统&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　　　5 课外拓展：答题系统&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;1 面向对象&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;先说什么是面向过程编程(procedural programm)。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;procedural programm uses a list of institutions to tell the computer what to do step by step.&lt;br/&gt;基本设计思路就是程序一开始幺解决一个大问题，然后把一个大问题分解成很多小问题，继续分解直至简单到可以一步解决的问题。&lt;br/&gt;不方便修改和维护，如果需要不断地迭代且各部分之间相互依赖。面向过程可能就没那么简单了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;再说什么是面向对象编程（Object Orientation Programming）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;利用类和对象来创建各种模型来实现对真实世界的描述。面向对象更加容易理解代码逻辑。&lt;br/&gt;方便程序的维护和扩展变得简单，并且大大提高程序的考法效率。&lt;/p&gt;

&lt;p&gt;其实我觉得面向过程其实就是简单的一次性的脚本，而面向对象是一种经过封装的结构化程序，更加规范。面向对象的主要优势就是对于后续的维护和更新会更加便捷！&lt;/p&gt;
&lt;p&gt;所以我们一般认为， 如果你只是写一些简单的脚本，去做一些一次性任务，用面向过程的方式是极好的，但如果你要处理的任务是复杂的，且需要不断迭代和维护 的， 那还是用面向对象最方便了。&lt;/p&gt;
&lt;p&gt;说的这么神奇，那就来看看吧~相信大家都打过CS游戏吧，我们就自己开发一个简单版的CS来玩一玩。 &lt;/p&gt;
&lt;p&gt;暂不考虑开发场地等复杂的东西，我们先从人物角色下手， 角色很简单，就俩个，恐怖份子、警察，他们除了角色不同，其它基本都 一样，每个人都有生命值、武器等。&lt;/p&gt;
&lt;p&gt;用OOP的方式写出游戏的基本角色 &lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42.5&quot;&gt;&lt;img id=&quot;code_img_closed_87d6dc87-44b5-4d66-98bb-54af23f0b41d&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_87d6dc87-44b5-4d66-98bb-54af23f0b41d&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_87d6dc87-44b5-4d66-98bb-54af23f0b41d&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;80&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;Author：ZhangKanghui&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Role:
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;     n =123  &lt;span&gt;#&lt;/span&gt;&lt;span&gt;类变量&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt;     n_list =&lt;span&gt;[]
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;     name =&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;嘿嘿&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt; &lt;span&gt;__init__&lt;/span&gt;(self, name, role, weapon, life_value=100, money=10000&lt;span&gt;):
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt;构造函数，在实例化时做类的初始化&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt;         self.name = name            &lt;span&gt;#&lt;/span&gt;&lt;span&gt;实例变量（又叫静态属性），作用域就是实例本身&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt;         self.role = role            &lt;span&gt;#&lt;/span&gt;&lt;span&gt;相当于r1.role = role&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt;         self.weapon =&lt;span&gt; weapon
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;         self.life_value =&lt;span&gt; life_value
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;         self.money =&lt;span&gt; money
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; 
&lt;span&gt;15&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt; shoot(self):            &lt;span&gt;#&lt;/span&gt;&lt;span&gt;类的方法，功能（动态属性）&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt;         &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;shooting&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt;&lt;span&gt; get_shot(self):
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;         &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ah... i got shot&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt;&lt;span&gt; buy_gun(self,gun_name):
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;         &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%s just bought %s&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; %&lt;span&gt; (self.name, gun_name))
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; 
&lt;span&gt;22&lt;/span&gt; 
&lt;span&gt;23&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(Role.n)
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;把一个类变成一个具体的对象的过程叫实例化&lt;/span&gt;
&lt;span&gt;25&lt;/span&gt; r1 =Role(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;ersha&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;police&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;AK47&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)           &lt;span&gt;#&lt;/span&gt;&lt;span&gt;这个过程就是类的实例化   r1就是Role这个类的实例。&lt;/span&gt;
&lt;span&gt;26&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 在这里可以改名，即修改属性&lt;/span&gt;
&lt;span&gt;27&lt;/span&gt; r1.name =&lt;span&gt;'&lt;/span&gt;&lt;span&gt;习大大&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;span&gt;28&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;在这里添加一个属性可以吗？当然没问题。即添加属性&lt;/span&gt;
&lt;span&gt;29&lt;/span&gt; r1.bullet =&lt;span&gt;True
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;当然还有删除属性&lt;/span&gt;
&lt;span&gt;31&lt;/span&gt; &lt;span&gt;del&lt;/span&gt;&lt;span&gt; r1.weapon
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;print(r1.weapon)           看看是不是删掉了&lt;/span&gt;
&lt;span&gt;33&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 有实例变量优先使用实例变量，没有采用类变量。在实例中可以查到类变量。那么能不能修改类变量呢？&lt;/span&gt;
&lt;span&gt;34&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(r1.n,r1.name)
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;来看看能不能‘修改’类变量。r1，r2会有不同吗？&lt;/span&gt;
&lt;span&gt;36&lt;/span&gt; r1.n =&lt;span&gt;'&lt;/span&gt;&lt;span&gt;修改类变量&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;           &lt;span&gt;#&lt;/span&gt;&lt;span&gt;相当于在r1的实例中创建一个实例变量n，并非修改&lt;/span&gt;
&lt;span&gt;37&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;r1:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, r1.name,r1.n)
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt; 
&lt;span&gt;39&lt;/span&gt; r2 =Role(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;dasha&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;terrorist&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;B22&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt; 
&lt;span&gt;41&lt;/span&gt; r1.buy_gun(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;AK47&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt; Role(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;sansha&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;police&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;98K&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;).get_shot()
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;r2:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, r2.name,r2.n)
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt; 
&lt;span&gt;45&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;那么，此时我再修改类变量，再次输出r1.n，r2.n会是什么样呢？&lt;/span&gt;
&lt;span&gt;46&lt;/span&gt; Role.n =&lt;span&gt;'&lt;/span&gt;&lt;span&gt;ABC&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;span&gt;47&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;(r1.n,r2.n)        &lt;span&gt;#&lt;/span&gt;&lt;span&gt;发现r1.n并没有改变，而r2.n变了。这是因为在r1有了实例变量n，而r2没有。&lt;/span&gt;
&lt;span&gt;48&lt;/span&gt; 
&lt;span&gt;49&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;那么。接下来问题再次升级。如果是一个列表。会有什么不一样呢。&lt;/span&gt;
&lt;span&gt;50&lt;/span&gt; r1.n_list.append(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;from r1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;51&lt;/span&gt; r2.n_list.append(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;from r2&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;52&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(r1.n_list,r2.n_list)
&lt;/span&gt;&lt;span&gt;53&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(Role.n_list)
&lt;/span&gt;&lt;span&gt;54&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;这个时候你会发现他们三个共用同一个内存地址。所以无论怎么修改都是一样的。&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;简易版cs&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;没看懂？下面分解来看看~&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;2 类&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;先来介绍两个概念：&lt;/p&gt;
&lt;p&gt;　　&lt;strong&gt;（1）类class：&lt;/strong&gt;一类具有相同属性的对象的抽象、蓝图、原型。&lt;/p&gt;
&lt;p&gt;　　&lt;strong&gt;（2）对象object：&lt;/strong&gt;一个类的实例化后的实例。一个类必须经过实例化后方可在程序中调用，一个类可以实例化多个对象。&lt;/p&gt;
&lt;p&gt;那什么是类呢？&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_5bbda935-e227-4b09-a958-aab6c018abc6&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_5bbda935-e227-4b09-a958-aab6c018abc6&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_5bbda935-e227-4b09-a958-aab6c018abc6&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Dog(object):
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;  
&lt;span&gt;3&lt;/span&gt;     &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;hello,I am a dog!&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;  
&lt;span&gt;5&lt;/span&gt;  
&lt;span&gt;6&lt;/span&gt; d = Dog() &lt;span&gt;#&lt;/span&gt;&lt;span&gt;实例化这个类，&lt;/span&gt;
&lt;span&gt;7&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;此时的d就是类Dog的实例化对象&lt;/span&gt;
&lt;span&gt;8&lt;/span&gt;  
&lt;span&gt;9&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;实例化，其实就是以Dog类为模版，在内存里开辟一块空间，存上数据，赋值成一个变量名&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;类的语法&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_5338454d-5bd6-471c-aa34-ebc123d80d50&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_5338454d-5bd6-471c-aa34-ebc123d80d50&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_5338454d-5bd6-471c-aa34-ebc123d80d50&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;Author：ZhangKanghui&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; dog:
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt; &lt;span&gt;__init__&lt;/span&gt;&lt;span&gt;(self,name):
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;         self.name =&lt;span&gt; name
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt;&lt;span&gt; bulk(self):
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;         &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%s :喵喵喵&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; %&lt;span&gt;self.name)
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; 
&lt;span&gt;10&lt;/span&gt; d1 =dog(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;二炮&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; d2 =dog(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;三炮&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; d3 =dog(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;老炮&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; 
&lt;span&gt;14&lt;/span&gt; &lt;span&gt;d1.bulk()
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;d2.bulk()
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; d3.bulk()
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;类的初识&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;通过类的初识（__inint__(self)是什么鬼？）那先来一个新的名词叫析构函数。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;析构函数：&lt;/strong&gt;在实例释放、销毁的时候执行的，通常做一些扫尾工作，比如关闭一些数据库链接。打开的临时文件。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;&lt;img id=&quot;code_img_closed_f62486e9-fe59-4e9f-92a9-ff0ce8ed13f5&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_f62486e9-fe59-4e9f-92a9-ff0ce8ed13f5&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_f62486e9-fe59-4e9f-92a9-ff0ce8ed13f5&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;71&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;Author：ZhangKanghui&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Role:
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;     n =123  &lt;span&gt;#&lt;/span&gt;&lt;span&gt;类变量&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt;     n_list =&lt;span&gt;[]
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;     name =&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;嘿嘿&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt; &lt;span&gt;__init__&lt;/span&gt;(self, name, role, weapon, life_value=100, money=10000&lt;span&gt;):
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt;构造函数，在实例化时做类的初始化&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt;         self.name = name            &lt;span&gt;#&lt;/span&gt;&lt;span&gt;实例变量（又叫静态属性），作用域就是实例本身&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt;         self.role = role            &lt;span&gt;#&lt;/span&gt;&lt;span&gt;相当于r1.role = role&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt;         self.weapon =&lt;span&gt; weapon
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;         self.life_value =&lt;span&gt; life_value
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;         self.money =&lt;span&gt; money
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; 
&lt;span&gt;15&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt; shoot(self):            &lt;span&gt;#&lt;/span&gt;&lt;span&gt;类的方法，功能（动态属性）&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt;         &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;shooting&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt;&lt;span&gt; get_shot(self):
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;         &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ah... i got shot&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt;&lt;span&gt; buy_gun(self,gun_name):
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;         &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%s just bought %s&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; %&lt;span&gt; (self.name, gun_name))
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; 
&lt;span&gt;22&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt; &lt;span&gt;__del__&lt;/span&gt;&lt;span&gt;(self):
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;         &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%s is Game Over&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;%&lt;span&gt; self.name)
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; r1 =Role(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;ersha&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;police&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;AK47&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;刚实例化生成一个对象还什么都没干就结束了？那先操作一下呢&lt;/span&gt;
&lt;span&gt;26&lt;/span&gt; r1.buy_gun(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;AK47&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; &lt;span&gt;r1.get_shot()
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;##### del r1&lt;/span&gt;
&lt;span&gt;29&lt;/span&gt; 
&lt;span&gt;30&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;最后还是game over，那再生成一个角色&lt;/span&gt;
&lt;span&gt;31&lt;/span&gt; r2 =Role(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;dasha&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;terrorist&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;B22&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; &lt;span&gt;r2.get_shot()
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;这个时候发现正产顺序依次执行之后，都会gg&lt;/span&gt;
&lt;span&gt;34&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;del在实例释放或销毁的时候执行，所以最后执行。&lt;/span&gt;
&lt;span&gt;35&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;那么如果我在实例释放之前就把他删除会怎么样呢？那就在r1最后添加del r1、看一下执行结果。&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;析构函数&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;这个__init__()叫做初始化方法(或构造方法)， 在类被调用时，这个方法(虽然它是函数形式，但在类中就不叫函数了,叫方法)会自动执行，进行一些初始化的动作。&lt;/p&gt;
&lt;p&gt;认识了类。那就来看看关于类的一些常识。&lt;/p&gt;
&lt;p&gt;　　a.类变量：大家共有的属性，对于共有属性和默认参数，能够节省内存。节约成本&lt;/p&gt;
&lt;p&gt;　　b.实例变量&lt;/p&gt;
&lt;p&gt;　　c.经典类&lt;/p&gt;
&lt;p&gt;　　d.新式类&lt;/p&gt;
&lt;p&gt;　　e.私有方法&lt;/p&gt;
&lt;p&gt;　　f.私有属性&lt;/p&gt;
&lt;p&gt;经典类和新式类对于我们的不同之处就是多继承。&lt;/p&gt;

&lt;p&gt;这些都是什么意思呢？直接上代码~看一下&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;&lt;img id=&quot;code_img_closed_85f4a499-2e59-4d87-896d-aecb1050deee&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_85f4a499-2e59-4d87-896d-aecb1050deee&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_85f4a499-2e59-4d87-896d-aecb1050deee&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;71&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;Author：ZhangKanghui&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Role:
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;     n =123  &lt;span&gt;#&lt;/span&gt;&lt;span&gt;类变量&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt;     n_list =&lt;span&gt;[]
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;     name =&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;嘿嘿&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt; &lt;span&gt;__init__&lt;/span&gt;(self, name, role, weapon, life_value=100, money=10000&lt;span&gt;):
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt;构造函数，在实例化时做类的初始化&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt;         self.name = name            &lt;span&gt;#&lt;/span&gt;&lt;span&gt;实例变量（又叫静态属性），作用域就是实例本身&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt;         self.role = role            &lt;span&gt;#&lt;/span&gt;&lt;span&gt;相当于r1.role = role&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt;         self.weapon =&lt;span&gt; weapon
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;         self.&lt;span&gt;__life_value&lt;/span&gt; =&lt;span&gt; life_value
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;         self.money =&lt;span&gt; money
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; 
&lt;span&gt;15&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt; &lt;span&gt;__shoot&lt;/span&gt;(self):  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 类的方法，功能（动态属性）&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt;         &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;shooting&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; 
&lt;span&gt;18&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt;&lt;span&gt; get_shot(self):
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;         self.&lt;span&gt;__life_value&lt;/span&gt; -=50
&lt;span&gt;20&lt;/span&gt;         &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ah... i got shot&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; 
&lt;span&gt;22&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt;&lt;span&gt; buy_gun(self, gun_name):
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;         &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%s just bought %s&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; %&lt;span&gt; (self.name, gun_name))
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; 
&lt;span&gt;25&lt;/span&gt; 
&lt;span&gt;26&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt;&lt;span&gt; show_status(self):
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;         &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;name:%s weapon :%s life_value:%s &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;%(self.name,self.weapon,self.&lt;span&gt;__life_value&lt;/span&gt;&lt;span&gt;))
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;私有属性。如何把生命值设置私有属性呢？两个下划线&lt;/span&gt;
&lt;span&gt;29&lt;/span&gt; r1 =Role(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;ersha&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;police&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;AK47&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; r1.buy_gun(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;AK47&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; &lt;span&gt;r1.get_shot()
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;print(r1.__life_value)             没有这个属性。这个时候完全不能访问了，不能被修改，但是至少能显示血量还剩多少不过分吧&lt;/span&gt;
&lt;span&gt;33&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;定义一个方法&lt;/span&gt;
&lt;span&gt;34&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(r1.show_status())
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt; 
&lt;span&gt;36&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;那么有私有属性。有没有私有方法呢？&lt;/span&gt;
&lt;span&gt;37&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;r1.__shoot()           AttributeError: 'Role' object has no attribute '__shoot'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;关于类的一些小概念&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;接下来介绍类的三种特性：&lt;/p&gt;
&lt;p&gt;　　&lt;strong&gt;（1）封装Encapsulation：&lt;/strong&gt;在类中对数据进行赋值，内部调用对外部是透明的。里面包含着类的数据和方法。封装可以隐藏实现的细节，使代码模块化。&lt;/p&gt;
&lt;p&gt;　　&lt;strong&gt;（2）继承Inheritance：&lt;/strong&gt;一个类可以派生出子类。在这个父类里定义的属性、方法自动被子类继承。继承可以扩展代码模块（类）。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　（3）多态Polymorphism：&lt;/strong&gt;一个接口，多种实现。指一个基类中派生出了不同的子类，且每个子类在继承了同样方法名的同时又对父类的方法做了不同的实现。&lt;/p&gt;
&lt;p&gt;看过这些代码大概能明白是封装了吧。&lt;strong&gt;封装，&lt;/strong&gt;其实就是使用构造方法将内容封装到某个具体对象中，然后通过对象直接或者self间接获取被封装的内容，不知道那就接着看什么是继承。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;&lt;img id=&quot;code_img_closed_4eae84f7-af87-4b69-bd72-6df9d182aec9&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_4eae84f7-af87-4b69-bd72-6df9d182aec9&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_4eae84f7-af87-4b69-bd72-6df9d182aec9&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;59&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; 多态的作用就是在类的继承和派生的同时，保证使用家谱中任一类的实例的某一属性时的正确调用。python中没有直接的语法支持多态但是可以间接实现。
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;继承&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;&lt;img id=&quot;code_img_closed_684f7127-079c-4d50-af64-c624e20d83e7&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_684f7127-079c-4d50-af64-c624e20d83e7&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_684f7127-079c-4d50-af64-c624e20d83e7&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;61&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;Author：ZhangKanghui&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; A:
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt; &lt;span&gt;__init__&lt;/span&gt;&lt;span&gt;(self):
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;         &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;A&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; B(A):
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;     &lt;span&gt;pass&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; def __init__(self):&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt;     print(&quot;B&quot;)&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; C(A):
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;     &lt;span&gt;pass&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; def __init__(self):&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt;     print(&quot;C&quot;)&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; D(B,C):
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;     &lt;span&gt;pass&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt; 
&lt;span&gt;17&lt;/span&gt; obj =D()        &lt;span&gt;#&lt;/span&gt;&lt;span&gt;多继承按顺序寻址，先B后C，所以输出B&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;这个时候把B中的构造函数注释掉。看一下执行结果。一定是C&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;那么这个时候如果C里面也没有呢？是不是找A呀&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;多继承&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;多继承是顺序继承，也就是说如果两个父类中有相同属性方法等，按顺序寻址，如果第一个父类有，那第二个就不会执行。&lt;/p&gt;
&lt;p&gt;python2经典类是按深度优先继承的；新式类是按广度优先来继承的。python3中经典类和新式类统一按广度优先继承的。&lt;/p&gt;
&lt;p&gt;看完这些，那就来个实例小试牛刀吧~&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;59&quot;&gt;&lt;img id=&quot;code_img_closed_a36fbe17-f559-48fd-8fba-3ed3741fa3d7&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_a36fbe17-f559-48fd-8fba-3ed3741fa3d7&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_a36fbe17-f559-48fd-8fba-3ed3741fa3d7&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;113&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;Author：ZhangKanghui&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; School(object):
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt; &lt;span&gt;__init__&lt;/span&gt;&lt;span&gt;(self,name,addr):
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;         self.name =&lt;span&gt; name
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;         self.addr =&lt;span&gt; addr
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;         self.students =&lt;span&gt; []
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;         self.staffs =&lt;span&gt; []
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt;&lt;span&gt; enroll(self,stu_obj):
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;         &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;welcome %s to shcool&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; %&lt;span&gt; stu_obj.name)
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;        self.students.append(stu_obj)
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt;&lt;span&gt; hire(self,staff_obj):
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;         &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;welcome %s to shcool&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; %&lt;span&gt; staff_obj.name)
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;        self.staffs.append(staff_obj)
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; 
&lt;span&gt;16&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; SchoolMember(object):
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt; &lt;span&gt;__init__&lt;/span&gt;&lt;span&gt;(self,name,age,sex):
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;         self.name =&lt;span&gt; name
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;         self.age =&lt;span&gt; age
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;         self.sex =&lt;span&gt;sex
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt;&lt;span&gt; info(self):
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;         &lt;span&gt;pass&lt;/span&gt;
&lt;span&gt;23&lt;/span&gt; 
&lt;span&gt;24&lt;/span&gt; 
&lt;span&gt;25&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Teacher(SchoolMember):
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt; &lt;span&gt;__init__&lt;/span&gt;&lt;span&gt;(self,name,age,sex,salary,course):
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;         super(Teacher,self).&lt;span&gt;__init__&lt;/span&gt;&lt;span&gt;(name,age,sex)
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;         self.salary =&lt;span&gt; salary
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;         self.course =&lt;span&gt; course
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt;&lt;span&gt; info(self):
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;         &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'''&lt;/span&gt;
&lt;span&gt;32&lt;/span&gt; &lt;span&gt;        ------info of Teacher:%s-------
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; &lt;span&gt;        Name:%s
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; &lt;span&gt;        Age:%s
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt; &lt;span&gt;        sex:%s
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt; &lt;span&gt;        salary:%s
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt; &lt;span&gt;        course:%s
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt;         &lt;span&gt;'''&lt;/span&gt;%&lt;span&gt;(self.name,self.name,self.age,self.sex,self.salary,self.course))
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt;&lt;span&gt; teach(self):
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt;         &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%s is teaching course [%s]&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;%&lt;span&gt;(self.name,self.course))
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt; 
&lt;span&gt;42&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Student(SchoolMember):
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt; &lt;span&gt;__init__&lt;/span&gt;&lt;span&gt;(self,name,age,sex,stu_id,grade):
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt;         super(Student,self).&lt;span&gt;__init__&lt;/span&gt;&lt;span&gt;(name,age,sex)
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt;         self.stu_id =&lt;span&gt; stu_id
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt;         self.grade =&lt;span&gt; grade
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt;&lt;span&gt; info(self):
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt;         &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'''&lt;/span&gt;
&lt;span&gt;49&lt;/span&gt; &lt;span&gt;        ------info of Student:%s-------
&lt;/span&gt;&lt;span&gt;50&lt;/span&gt; &lt;span&gt;        Name:%s
&lt;/span&gt;&lt;span&gt;51&lt;/span&gt; &lt;span&gt;        Age:%s
&lt;/span&gt;&lt;span&gt;52&lt;/span&gt; &lt;span&gt;        sex:%s
&lt;/span&gt;&lt;span&gt;53&lt;/span&gt; &lt;span&gt;        stu_id:%s
&lt;/span&gt;&lt;span&gt;54&lt;/span&gt; &lt;span&gt;        grade:%s
&lt;/span&gt;&lt;span&gt;55&lt;/span&gt;         &lt;span&gt;'''&lt;/span&gt;%&lt;span&gt;(self.name,self.name,self.age,self.sex,self.stu_id,self.grade))
&lt;/span&gt;&lt;span&gt;56&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt;&lt;span&gt; pay_fee(self,amount):
&lt;/span&gt;&lt;span&gt;57&lt;/span&gt;         &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%s had paid fee for $[%s]&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;%&lt;span&gt;(self.name,amount))
&lt;/span&gt;&lt;span&gt;58&lt;/span&gt; 
&lt;span&gt;59&lt;/span&gt; school = School(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;清北&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;北平&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;60&lt;/span&gt; 
&lt;span&gt;61&lt;/span&gt; t1 =Teacher(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Sol&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,30,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Boy&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,10000,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;English&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;62&lt;/span&gt; t2 =Teacher(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Crystal_Lan&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,30,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Girl&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,10000,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;English&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;63&lt;/span&gt; s1 =Student(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Kanghui&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,20,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Boy&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;001&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Python&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;64&lt;/span&gt; s2 =Student(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Ruixin&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,30,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Boy&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;002&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Yixue&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;65&lt;/span&gt; 
&lt;span&gt;66&lt;/span&gt; &lt;span&gt;t1.info()
&lt;/span&gt;&lt;span&gt;67&lt;/span&gt; &lt;span&gt;s1.info()
&lt;/span&gt;&lt;span&gt;68&lt;/span&gt; 
&lt;span&gt;69&lt;/span&gt; &lt;span&gt;school.hire(t1)
&lt;/span&gt;&lt;span&gt;70&lt;/span&gt; &lt;span&gt;school.enroll(s1)
&lt;/span&gt;&lt;span&gt;71&lt;/span&gt; &lt;span&gt;school.enroll(s2)
&lt;/span&gt;&lt;span&gt;72&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(school.students)
&lt;/span&gt;&lt;span&gt;73&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(school.staffs)
&lt;/span&gt;&lt;span&gt;74&lt;/span&gt; &lt;span&gt;school.staffs[0].teach()
&lt;/span&gt;&lt;span&gt;75&lt;/span&gt; 
&lt;span&gt;76&lt;/span&gt; &lt;span&gt;for&lt;/span&gt; stu &lt;span&gt;in&lt;/span&gt;&lt;span&gt; school.students:
&lt;/span&gt;&lt;span&gt;77&lt;/span&gt;    stu.pay_fee(5000)
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;继承实例-学校&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;最后看看什么是多态，其实python中没有直接的语法支持多态，但是可以通过间接的方式实现。&lt;/p&gt;
&lt;p&gt;多态的作用就是在类的继承和派生的同时，保证使用家谱中任一类的实例的某一属性时的正确调用。python中没有直接的语法支持多态但是可以间接实现。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;&lt;img id=&quot;code_img_closed_d98c24e4-4530-4207-a67a-152f91454d00&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_d98c24e4-4530-4207-a67a-152f91454d00&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_d98c24e4-4530-4207-a67a-152f91454d00&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;61&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;Author：ZhangKanghui&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Animal(object):
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt; &lt;span&gt;__init__&lt;/span&gt;&lt;span&gt;(self,name):
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;         self.name =&lt;span&gt; name
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt;&lt;span&gt; bark(self):
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;         &lt;span&gt;pass&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;    @staticmethod
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt;&lt;span&gt; animal_bark(obj):
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;        obj.bark()
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; 
&lt;span&gt;13&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Cat(Animal):
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt;&lt;span&gt; bark(self):
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;         &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;miao miao miao&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; 
&lt;span&gt;17&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Dog(Animal):
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt;&lt;span&gt; bark(self):
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;         &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;wang wang wang&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; 
&lt;span&gt;21&lt;/span&gt; c =Cat(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;小狗&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; d =Dog(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;小猫&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; c.bark()&lt;/span&gt;
&lt;span&gt;24&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; d.bark()&lt;/span&gt;
&lt;span&gt;25&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;这样虽然实现了各功能，但是每种动物叫的调用都不同，能不能用同一种调用方式呢？那先把上面注释掉&lt;/span&gt;
&lt;span&gt;26&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;试试这样&lt;/span&gt;
&lt;span&gt;27&lt;/span&gt; 
&lt;span&gt;28&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; def animal_bark(obj):&lt;/span&gt;
&lt;span&gt;29&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;     obj.bark()&lt;/span&gt;
&lt;span&gt;30&lt;/span&gt; &lt;span&gt;#
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; animal_bark(c)&lt;/span&gt;
&lt;span&gt;32&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; animal_bark(d)&lt;/span&gt;
&lt;span&gt;33&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;现在好像就可以实现一种接口多种实现了。那么我们把他放进父类里。把上面注释掉&lt;/span&gt;
&lt;span&gt;34&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;在父类里添加&lt;/span&gt;
&lt;span&gt;35&lt;/span&gt; 
&lt;span&gt;36&lt;/span&gt; &lt;span&gt;Animal.animal_bark(c)
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt; &lt;span&gt;Animal.animal_bark(d)
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;这样就能实现一种接口多种实现了.这就是多态.这就实现了接口的重用.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;多态实例&lt;/span&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt; 3 小结&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;面向对象设计的由来：&lt;a href=&quot;http://www.cnblogs.com/linhaifeng/articles/6428835.html&quot; target=&quot;_blank&quot;&gt;http://www.cnblogs.com/linhaifeng/articles/6428835.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这个内容有点多，有点懵逼。可我总觉得有一天我都会。不知道哪来的自信。大概是梁静茹给的勇气吧~！！！&lt;/p&gt;
&lt;p&gt;主要还是练得少。多看多写多思考！！！多动手~！！！&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;4 练习&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;角色:学校、学员、课程、讲师&lt;br/&gt;要求:&lt;br/&gt;1. 创建北京、上海 2 所学校&lt;br/&gt;2. 创建linux , python , go 3个课程 ， linux\py 在北京开， go 在上海开&lt;br/&gt;3. 课程包含，周期，价格，通过学校创建课程 &lt;br/&gt;4. 通过学校创建班级， 班级关联课程、讲师&lt;br/&gt;5. 创建学员时，选择学校，关联班级&lt;br/&gt;5. 创建讲师角色时要关联学校， &lt;br/&gt;6. 提供两个角色接口&lt;br/&gt;　　6.1 学员视图， 可以注册， 交学费， 选择班级，&lt;br/&gt;　　6.2 讲师视图， 讲师可管理自己的班级， 上课时选择班级， 查看班级学员列表 ， 修改所管理的学员的成绩 &lt;br/&gt;　　6.3 管理视图，创建讲师， 创建班级，创建课程&lt;/p&gt;
&lt;p&gt;7. 上面的操作产生的数据都通过pickle序列化保存到文件里&lt;/p&gt;

&lt;p&gt;第一步：选课系统用例&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_431c1edb-fa54-4094-a8a0-9c83fcae485f&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_431c1edb-fa54-4094-a8a0-9c83fcae485f&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_431c1edb-fa54-4094-a8a0-9c83fcae485f&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;用例名称&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;选课
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;场景&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;who：学生，老师，管理员
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;where：老男孩
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;when：任意时间
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; 
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;用例描述（用户怎么做，或者说用户想怎么用）：&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt; 1&lt;span&gt;. 管理员创建学校：北京和上海两个校区
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; 2&lt;span&gt;. 管理员创建课程：python，go，linux
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; 3&lt;span&gt;. 管理员创建班级：python周末18期，python脱产7期，linux架构35期
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; 4&lt;span&gt;. 管理员创建学员：小晴，花野真衣，川岛芳子
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; 5&lt;span&gt;. 管理员创建讲师：alex，egon，wupeiqi，yuanhao
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; 6&lt;span&gt;. 讲师创建上课记录：python周末班18期day7
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; 7&lt;span&gt;. 讲师为day7这节课所有学生批改作业，为每个学生打分
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; 8&lt;span&gt;. 学员杨磊查看自己的详细信息：所在学校，报名课程，所在班级
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; 9&lt;span&gt;. 学员杨磊在python18期day7提交了作业
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; 10&lt;span&gt;.学员杨磊查看了自己在day7作业的成绩列表，然后自杀了
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; 11&lt;span&gt;.学员小晴跟egon表白了，当天下午就去领了结婚证
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; 
&lt;span&gt;21&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;用例价值&lt;/span&gt;
&lt;span&gt;22&lt;/span&gt; 
&lt;span&gt;23&lt;/span&gt; &lt;span&gt;帮老男孩解决课程管理问题
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;约束&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;选课系统用例&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;第二步：找名词&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_7631cd3d-20aa-4224-9cb3-fee796a8587a&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_7631cd3d-20aa-4224-9cb3-fee796a8587a&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_7631cd3d-20aa-4224-9cb3-fee796a8587a&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;管理员，学校，课程，班级，学员讲师，上课记录，作业，分数，学员详细信息，成绩列表，结婚证
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; &lt;span&gt;筛选：去掉与行业或者说领域无关的名词
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; 管理员，学校，课程，班级，学员，讲师，上课记录，作业，分数，学员详细信息，成绩列表
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;名词&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;第三步：加属性&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_98845bb2-3ddf-4a7f-94e0-16d358c06721&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_98845bb2-3ddf-4a7f-94e0-16d358c06721&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_98845bb2-3ddf-4a7f-94e0-16d358c06721&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;名字                属性      备注
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; &lt;span&gt;管理员             NA        具备所有权限，对于选课系统来说，并不需要管理员的属性，因此在领域模型中，管理员是没有属性的
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; &lt;span&gt;学校               学校名，地址，课程列表，班级列表
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; &lt;span&gt;课程               课程名，周期，价钱，大纲
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt; &lt;span&gt;班级               班级名，所属学校，课程
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt; &lt;span&gt;学员               学员名，
&lt;/span&gt;&lt;span&gt;7&lt;/span&gt; &lt;span&gt;讲师               讲师名
&lt;/span&gt;&lt;span&gt;8&lt;/span&gt; 上课记录          班级，课程节次，日期
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;属性&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;第四步：连关系&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1435523/201808/1435523-20180822001209984-138653748.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;第五步：写代码&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/lianzhilei/p/5832691.html&quot; target=&quot;_blank&quot;&gt;https://www.cnblogs.com/lianzhilei/p/5832691.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/lianzhilei/p/5985333.html&quot; target=&quot;_blank&quot;&gt;http://www.cnblogs.com/lianzhilei/p/5985333.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;说好的以后要看？我真的会看嘛？&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;5 课外拓展：答题系统案例&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;第一步：需求分析（写用例）&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_5fd1962f-da34-4442-be9f-14e9029e2a51&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_5fd1962f-da34-4442-be9f-14e9029e2a51&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_5fd1962f-da34-4442-be9f-14e9029e2a51&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;用例名&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;    答题系统
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; 
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;场景：&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt;     when：8&lt;span&gt;.10开始
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;    where：老男孩
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;    who：linux学院，网络客户
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; 
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;用例描述：&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt;     1&lt;span&gt; linux学院提供50道题
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;     2&lt;span&gt; 每个客户无需输入任何个人信息就可以参与答题，随机选择20道题，给客户回答，每道题5分，
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;     3&lt;span&gt;.答题结束后，输入手机号，提交，算总分
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;     4 60分参与抽奖，&amp;lt;&lt;span&gt;60分赠送基础视频
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; 
&lt;span&gt;15&lt;/span&gt; 
&lt;span&gt;16&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;用户价值：&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt; &lt;span&gt;    答题有奖，答题提交时输入自己的手机号获取成绩，获得潜在客户的联系方式，为后期将客户转成学员做准备
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; 
&lt;span&gt;19&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;约束：&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt;     暂无
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;需求分析&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;第二步：领域模型（找名词，加属性，连关系=&amp;gt;出图）&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;31.5&quot;&gt;&lt;img id=&quot;code_img_closed_79a422cf-cd9b-4eac-8dae-1d8f51588b61&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_79a422cf-cd9b-4eac-8dae-1d8f51588b61&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_79a422cf-cd9b-4eac-8dae-1d8f51588b61&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;58&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;找名词：&lt;/span&gt;
&lt;span&gt;2&lt;/span&gt; &lt;span&gt;linux学院，题，客户，得分，奖，视频
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;筛选：去掉与领域无关的名词。视频应该算作一种奖品&lt;/span&gt;
&lt;span&gt;4&lt;/span&gt; linux学院，题，客户，得分，奖
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;找名词&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_0c946e10-58e0-4fec-95fb-3bff63adf671&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_0c946e10-58e0-4fec-95fb-3bff63adf671&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_0c946e10-58e0-4fec-95fb-3bff63adf671&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;加属性&lt;/span&gt;
&lt;span&gt;2&lt;/span&gt; &lt;span&gt;加属性
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; &lt;span&gt;名词         属性                        备注
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; &lt;span&gt;linux学院    NA                       对于答题系统来说，并不需要linux学院的属性，因此在领域模型中，linux学院是没有属性的
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt; &lt;span&gt;题          题目编号，题目类型，题目描述，答题选项，正确答案，分数
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt; &lt;span&gt;客户        客户编号，姓名，性别，年龄，手机号
&lt;/span&gt;&lt;span&gt;7&lt;/span&gt; &lt;span&gt;答题记录     记录编号，客户编号，题目编号列表，总分数，时间     通过答题记录就可以知道用户是谁，以及用户答过的题目
&lt;/span&gt;&lt;span&gt;8&lt;/span&gt; 奖品        奖品编号，奖品名字  
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;加属性&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;&lt;img id=&quot;code_img_closed_76f9b42f-92f0-48e4-abfe-9782160144c3&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_76f9b42f-92f0-48e4-abfe-9782160144c3&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_76f9b42f-92f0-48e4-abfe-9782160144c3&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;59&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt;连关系：画图&lt;/span&gt;
&lt;span&gt;2&lt;/span&gt; 1&lt;span&gt;：答题记录是客户与题的关系类，而客户与奖品之间可以建一个关系类，这样以后单查关系类就可以知道谁得了什么奖品
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; 2&lt;span&gt;：找动词：
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; &lt;span&gt;    创建题目
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt; &lt;span&gt;    随机选择题目
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt; &lt;span&gt;    答题
&lt;/span&gt;&lt;span&gt;7&lt;/span&gt; &lt;span&gt;    提交
&lt;/span&gt;&lt;span&gt;8&lt;/span&gt; &lt;span&gt;    算总分
&lt;/span&gt;&lt;span&gt;9&lt;/span&gt;     抽奖
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;连关系&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1435523/201808/1435523-20180822001645428-1220311340.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;最后看代码：&lt;/p&gt;
&lt;p&gt;链接：&lt;a href=&quot;https://pan.baidu.com/s/1qyy7Gdsziwfcy_C8OFrAFg&quot; target=&quot;_blank&quot;&gt;https://pan.baidu.com/s/1qyy7Gdsziwfcy_C8OFrAFg&lt;/a&gt; 密码：rrjf&lt;/p&gt;

&lt;p&gt;还有个面向对象的小练习，有兴趣可以点进来看看~基于面向对象设计一个对战小游戏~！！！&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/linhaifeng/articles/7340497.html&quot; target=&quot;_blank&quot;&gt;http://www.cnblogs.com/linhaifeng/articles/7340497.html&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;&lt;strong&gt;我是尾巴~&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;推荐一些小工具，彻底解放电脑桌面：&lt;/p&gt;

&lt;p&gt;虽不才，才要坚持~！&lt;/p&gt;
</description>
<pubDate>Tue, 21 Aug 2018 16:38:00 +0000</pubDate>
<dc:creator>m1racle</dc:creator>
<og:description>C语言基础学习PYTHON——基础学习D06 20180821内容纲要： 面向对象初级学习 1 面向对象 2 类 （1）封装 （2）继承 （3）多态 3 小结 4 练习：选课系统 5 课外拓展：答题系</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/zhangkanghui/p/9510287.html</dc:identifier>
</item>
<item>
<title>Python全栈 MongoDB 数据库（数据的修改） - ParisGabriel</title>
<link>http://www.cnblogs.com/ParisGabriel/p/9515335.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/ParisGabriel/p/9515335.html</guid>
<description>&lt;p&gt;修改操作符的使用&lt;/p&gt;

&lt;p&gt;$set&lt;/p&gt;
&lt;p&gt;修改一个域的值，增加一个域&lt;/p&gt;

&lt;p&gt;阿哲年龄修改为33&lt;/p&gt;
&lt;p&gt;db.class1.update({name:'阿哲'},{$set:{age:33}})&lt;/p&gt;

&lt;p&gt;如果sex域不存在则会添加这个域&lt;/p&gt;
&lt;p&gt;db.class1.update({name:'阿蓉'},{$set:{sex:'w'}})&lt;/p&gt;

&lt;p&gt;$unset&lt;/p&gt;
&lt;p&gt;删除一个域&lt;/p&gt;

&lt;p&gt;删除sex域&lt;/p&gt;
&lt;p&gt;db.class1.update({name:'小陈'},{$unset:{sex:''}})&lt;/p&gt;

&lt;p&gt;* 每个操作符可以同时操作多项&lt;/p&gt;
&lt;p&gt;db.class1.update({name:'陈'},{$set:{age:36,sex:'m'}})&lt;/p&gt;

&lt;p&gt;* 一次修改可以同时使用多个操作符&lt;/p&gt;
&lt;p&gt;db.class1.update({name:'阿宝'},{$set:{name:'老王'},$unset:{sex:''}})&lt;/p&gt;

&lt;p&gt;$rename&lt;/p&gt;
&lt;p&gt;修改域名&lt;/p&gt;

&lt;p&gt;将sex域名改为gender&lt;/p&gt;
&lt;p&gt;db.class1.update({sex:{$exists:true}},{$rename:{sex:'gender'}},false,true)&lt;/p&gt;

&lt;p&gt;$setOnInsert&lt;/p&gt;
&lt;p&gt;如果第三个参数为true且插入数据，则表示插入文档的补充内容。如果不插入文档则不起作用&lt;/p&gt;

&lt;p&gt;如果插入新文档则setOnInsert中键值对也作为文档内容&lt;/p&gt;
&lt;p&gt;db.class1.update({name:'阿文'},{$set:{age:32},$setOnInsert:{gender:'m'}},true)&lt;/p&gt;

&lt;p&gt;$inc&lt;/p&gt;
&lt;p&gt;加减修改器&lt;/p&gt;
&lt;p&gt;db.class1.update({},{$inc:{age:-1}},false,true)&lt;/p&gt;

&lt;p&gt;$mul&lt;/p&gt;
&lt;p&gt;乘法修改器&lt;/p&gt;
&lt;p&gt;db.class2.update({},{$mul:{age:2}},false,true)&lt;/p&gt;

&lt;p&gt;* $inc   $mul  参数可以使整数小数正数负数&lt;/p&gt;

&lt;p&gt;$min &lt;/p&gt;
&lt;p&gt;如果筛选文档指定域的值小于min值则不修改，大于min值则修改为min值&lt;/p&gt;

&lt;p&gt;如果age大于18则修改为18&lt;/p&gt;
&lt;p&gt;db.class2.update({},{$min:{age:18}},false,true)&lt;/p&gt;

&lt;p&gt;$max&lt;/p&gt;
&lt;p&gt;如果筛选文档指定域的值大于max值则不修改，小于max值则修改为max值&lt;/p&gt;

&lt;p&gt;将年龄不到30的修改为30&lt;/p&gt;
&lt;p&gt;db.class1.update({},{$max:{age:30}},false,true)&lt;/p&gt;


&lt;p&gt;数组修改器&lt;/p&gt;

&lt;p&gt;$push&lt;/p&gt;
&lt;p&gt;向数组中添加一项&lt;/p&gt;

&lt;p&gt;向score数组中添加一项&lt;/p&gt;
&lt;p&gt;db.class2.update({name:'小亮'},{$push:{score:91}})&lt;/p&gt;

&lt;p&gt;$pushAll&lt;/p&gt;
&lt;p&gt;向数组中添加多项&lt;/p&gt;
&lt;p&gt;db.class2.update({name:'小明'},{$pushAll:{score:[5,10]}})&lt;/p&gt;

&lt;p&gt;$pull&lt;/p&gt;
&lt;p&gt;从数组中删除一项&lt;/p&gt;
&lt;p&gt;db.class2.update({name:'小明'},{$pull:{score:10}})&lt;/p&gt;

&lt;p&gt;$pullAll&lt;/p&gt;
&lt;p&gt;从数组中删除多项&lt;/p&gt;
&lt;p&gt;db.class2.update({name:'小明'},{$pullAll:{score:[58,5]}})&lt;/p&gt;

&lt;p&gt;$each  &lt;/p&gt;
&lt;p&gt;对多个值进行逐一操作&lt;/p&gt;
&lt;p&gt;db.class2.update({name:'小明'},{$push:{score:{$each:[60,10]}}})&lt;/p&gt;

&lt;p&gt;$position  &lt;/p&gt;
&lt;p&gt;指定插入位置&lt;/p&gt;

&lt;p&gt;配合each使用将数据插入到指定位置&lt;/p&gt;
&lt;p&gt; db.class2.update({name:'小红'},{$push:{score:{$each:[5],$position:1}}})&lt;/p&gt;

&lt;p&gt;$sort  &lt;/p&gt;
&lt;p&gt;对数组进行排序&lt;/p&gt;

&lt;p&gt;对数组进行排序&lt;/p&gt;
&lt;p&gt;db.class2.update({name:'小明'},{$push:{score:{$each:[],$sort:1}}})&lt;/p&gt;

&lt;p&gt;$pop &lt;/p&gt;
&lt;p&gt;弹出一项&lt;/p&gt;

&lt;p&gt;1表示弹出数组中最后一项，-1表示弹出第一项&lt;/p&gt;
&lt;p&gt;db.class2.update({name:'小明'},{$pop:{score:-1}})&lt;/p&gt;

&lt;p&gt;$addToSet&lt;/p&gt;
&lt;p&gt;向数组中添加一项，但是不允许添加重复内容&lt;/p&gt;

&lt;p&gt;如果数组中没有80则添加80&lt;/p&gt;
&lt;p&gt;db.class2.update({name:'小红'},{$addToSet:{score:80}})&lt;/p&gt;

&lt;p&gt;时间类型&lt;/p&gt;

&lt;p&gt;mongodb 中支持时间格式 ： ISODate()&lt;/p&gt;

&lt;p&gt;1. 使用new Date() 自动生成当前时间&lt;/p&gt;
&lt;p&gt;db.class0.insert({book:'Python入门',date:new Date()})&lt;/p&gt;

&lt;p&gt;2. 使用 ISODate() 生成当前时间&lt;/p&gt;
&lt;p&gt;db.class0.insert({book:'Python精通',date:ISODate()})&lt;/p&gt;

&lt;p&gt;3. 获取计算机时间生成时间格式字符串 Date()&lt;/p&gt;
&lt;p&gt;db.class0.insert({book:'Python疯狂',date:Date()})&lt;/p&gt;
&lt;p&gt;指定时间：&lt;/p&gt;
&lt;p&gt;ISODate()&lt;/p&gt;
&lt;p&gt;功能： 生成mongodb时间存储类型&lt;/p&gt;
&lt;p&gt;参数： 不加参数生成当前时间&lt;/p&gt;
&lt;p&gt;       指定时间格式参数:&lt;/p&gt;
&lt;p&gt;       &quot;2018-01-01 12:12:12&quot;&lt;/p&gt;
&lt;p&gt;       &quot;20180101 12:12:12&quot;&lt;/p&gt;
&lt;p&gt;       &quot;20180101&quot;&lt;/p&gt;
&lt;p&gt;db.class0.insert({book:'Python崩溃',date:ISODate(&quot;2018-07-13 11:23:36&quot;)})&lt;/p&gt;

&lt;p&gt;时间戳：&lt;/p&gt;
&lt;p&gt;通过当前的时间生成的一个时间节点标志&lt;/p&gt;

&lt;p&gt;valueOf()&lt;/p&gt;
&lt;p&gt;生成某个标准时间的时间戳&lt;/p&gt;
&lt;p&gt;db.class0.insert({book:'Python重生',date:ISODate().valueOf()})&lt;/p&gt;

&lt;p&gt;Null 类型：&lt;/p&gt;

&lt;p&gt;值 ： null  &lt;/p&gt;

&lt;p&gt;1. 如果某个域存在却没有值可以设置为null&lt;/p&gt;

&lt;p&gt;表示date没有实际意义的值&lt;/p&gt;
&lt;p&gt;db.class0.insert({book:'Python编程',date:null})&lt;/p&gt;

&lt;p&gt;2. 在查找时可以找到值为null或者不存在某个域的文档&lt;/p&gt;

&lt;p&gt;查找到date值为null或者不存在date域的文档&lt;/p&gt;
&lt;p&gt; db.class0.find({date:null},{_id:0})&lt;/p&gt;

&lt;p&gt;数组的下标操作方式：&lt;/p&gt;
&lt;p&gt;可以通过  域名.下标  的方式具体操作数组的某一项&lt;/p&gt;

&lt;p&gt;查找数组 0 项大于90的文档&lt;/p&gt;
&lt;p&gt;db.class2.find({'score.0':{$gt:90}},{_id:0})&lt;/p&gt;

&lt;p&gt;将score 第1项改为10&lt;/p&gt;
&lt;p&gt;db.class2.update({name:'小红'},{$set:{'score.1':10}})&lt;/p&gt;


&lt;p&gt;内部文档操作（Object）：&lt;/p&gt;
&lt;p&gt;文档内部某个域的值还是一个文档，则这个文档称为内部文档类型数据&lt;/p&gt;

&lt;p&gt;* 通过  外部域.内部文档域  的方式引用内部文档中某个域的值进行操作&lt;/p&gt;
&lt;p&gt;db.class3.find({'books.title':'狂人日记'},{_id:0})&lt;/p&gt;

&lt;p&gt;db.class3.update({&quot;books.title&quot;:'骆驼祥子'},{$set:{&quot;books.price&quot;:48.6}})&lt;/p&gt;

&lt;p&gt;查找结果的下标引用&lt;/p&gt;
&lt;p&gt;可以通过下标的方式获取查找结果的某一项&lt;/p&gt;

&lt;p&gt;获取查找结果的 第 2 项&lt;/p&gt;
&lt;p&gt;db.class1.find({},{_id:0})[2]&lt;/p&gt;


&lt;p&gt;综合示例 ： &lt;/p&gt;
&lt;p&gt;使用之前的grade数据库&lt;/p&gt;

&lt;p&gt;1.将小红年龄改为8岁，兴趣爱好变为跳舞画画&lt;/p&gt;
&lt;p&gt;db.class.update({$set:{age:8,hobby:['dance','draw']}})&lt;/p&gt;

&lt;p&gt;2. 追加小明兴趣爱好 唱歌&lt;/p&gt;
&lt;p&gt;db.class.update({$push:{hobby:'sing'}})&lt;/p&gt;

&lt;p&gt;3. 追加小王兴趣爱好，吹牛，打篮球&lt;/p&gt;
&lt;p&gt;db.class.update({$pushAll:{hobby:['吹牛','basketball']}})&lt;/p&gt;

&lt;p&gt;4. 小李兴趣多了跑步唱歌，但是要确保不和以前的重复&lt;/p&gt;
&lt;p&gt;db.class.update({$addToSet:{hobby:{$each:['running','sing']}}})&lt;/p&gt;

&lt;p&gt;5. 将该班所有同学年龄加1&lt;/p&gt;
&lt;p&gt;&lt;span data-spm-anchor-id=&quot;a2c4e.11153940.blogcont626784.i2.2bb11efeWB6Nwl&quot;&gt;db.class.update({},{$inc:{age:1}},false,ture)&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;6. 删除小明的sex属性&lt;/p&gt;
&lt;p&gt;db.class.update({$unset:{sex:''}})&lt;/p&gt;

&lt;p&gt;7.删除小李兴趣中的第一项&lt;/p&gt;
&lt;p&gt;db.class.update({$pop:{hobby:-1}})&lt;/p&gt;

&lt;p&gt;8，删除小红兴趣中的画画和唱歌&lt;/p&gt;
&lt;p&gt;db.class.update({$pullAll:{hobby:['draw','sing']}})&lt;/p&gt;

&lt;p&gt;9. 为小红增加一个域，为  score：{english：93，chinese：92，match：78}&lt;/p&gt;
&lt;p&gt;db.class.update({$set:{score：{english：93，chinese：92，match：78}}})&lt;/p&gt;

&lt;p&gt;10. 给小红数学成绩加5分&lt;/p&gt;
&lt;p&gt;db.class.update({$inc:{'score.math':5}})&lt;/p&gt;

&lt;p&gt;11. 小明的第一爱好改为computer&lt;/p&gt;
&lt;p&gt;db.class.update({$set:{'hobby.0':'computer'}})&lt;/p&gt;


&lt;p&gt;索引：&lt;/p&gt;
&lt;p&gt;指建立指定键值及所在文档中存储位置的对照清单，&lt;/p&gt;
&lt;p&gt;使用索引可以方便我们进行快速查找，减少数据遍历次数，从而提高查找效率&lt;/p&gt;

&lt;p&gt;Mongodb创建索引：&lt;/p&gt;
&lt;p&gt;ensureIndex()&lt;/p&gt;
&lt;p&gt;功能 ： &lt;/p&gt;
&lt;p&gt;创建索引&lt;/p&gt;
&lt;p&gt;参数 ： &lt;/p&gt;
&lt;p&gt;第一个为对哪个域创建索引&lt;/p&gt;
&lt;p&gt;第二个为索引的选项&lt;/p&gt;
&lt;p&gt;对name域创建索引&lt;/p&gt;
&lt;p&gt;db.class1.ensureIndex({name:1})&lt;/p&gt;
&lt;p&gt;* 1表示正向索引  -1表示逆向索引&lt;/p&gt;

&lt;p&gt;查看某个集合中的索引：&lt;/p&gt;
&lt;p&gt;db.class1.getIndexes()&lt;/p&gt;
&lt;p&gt;* _id是系统为每个集合自动创建的索引&lt;/p&gt;

&lt;p&gt;自定义索引名称&lt;/p&gt;
&lt;p&gt;通过第二个参数传入索引选项实现&lt;/p&gt;
&lt;p&gt;db.class1.ensureIndex({age:1},{name:'ageIndex'})&lt;/p&gt;
&lt;p&gt;* 同一个域不能重复创建相同的索引，一个集合中索引名也不要相同&lt;/p&gt;

&lt;p&gt;删除索引：&lt;/p&gt;
&lt;p&gt;dropIndex()&lt;/p&gt;
&lt;p&gt;功能： &lt;/p&gt;
&lt;p&gt;删除一个索引&lt;/p&gt;
&lt;p&gt;参数： &lt;/p&gt;
&lt;p&gt;索引名或者索引键值对&lt;/p&gt;

&lt;p&gt;db.class1.dropIndex({name:-1})&lt;/p&gt;
&lt;p&gt;db.class1.dropIndex(&quot;ageIndex&quot;)&lt;/p&gt;

&lt;p&gt;dropIndexes()&lt;/p&gt;
&lt;p&gt;功能：&lt;/p&gt;
&lt;p&gt;删除所有索引&lt;/p&gt;

&lt;p&gt;删除class1中所有索引，但是不会删除_id索引&lt;/p&gt;
&lt;p&gt;db.class1.dropIndexes()&lt;/p&gt;

&lt;p&gt;其他索引类型：&lt;/p&gt;

&lt;p&gt;复合索引：&lt;/p&gt;
&lt;p&gt;同时根据多个域创建一个索引&lt;/p&gt;

&lt;p&gt;根据name和age域查询都为索引查询，比单独创建两个索引表更节省空间&lt;/p&gt;
&lt;p&gt;db.class1.ensureIndex({name:1,age:-1})&lt;/p&gt;


&lt;p&gt;数组和子文档索引：&lt;/p&gt;
&lt;p&gt;如果对某个数组和子文档域创建索引，那么根据数组和子文档的查找均为索引查找&lt;/p&gt;

&lt;p&gt;如果对score域创建索引则 下面的查找也是索引查找&lt;/p&gt;
&lt;p&gt; db.class2.find({'score.0':60},{_id:0})&lt;/p&gt;

&lt;p&gt;覆盖索引：&lt;/p&gt;
&lt;p&gt;查找操作需要获取的域，只有索引域没有其他域。&lt;/p&gt;
&lt;p&gt;此时索引表可以直接提供给用户想要的内容，提高查找效率&lt;/p&gt;

&lt;p&gt;唯一索引：&lt;/p&gt;
&lt;p&gt;创建的索引，索引域值无重复，此时可以创建唯一索引&lt;/p&gt;
&lt;p&gt;唯一索引数据结构更加便于查找&lt;/p&gt;

&lt;p&gt;对name创建唯一索引，name值不能有重复&lt;/p&gt;
&lt;p&gt;db.class1.ensureIndex({name:1},{unique:true})&lt;/p&gt;

&lt;p&gt;* 当对某个域创建唯一索引，该域就不能再插入重复数据&lt;/p&gt;

&lt;p&gt;稀疏索引：&lt;/p&gt;
&lt;p&gt;只针对有指定域的文档创建索引表，如果某个文档没有该域则不会插入到索引表中&lt;/p&gt;

&lt;p&gt;对age创建稀疏索引&lt;/p&gt;
&lt;p&gt;db.class1.ensureIndex({age:1},{sparse:true})&lt;/p&gt;

&lt;p&gt;索引约束：&lt;/p&gt;
&lt;p&gt;1. 索引表也需要占用一定的磁盘空间&lt;/p&gt;
&lt;p&gt;2. 当数据发生更新时索引表也要随之更新&lt;/p&gt;

&lt;p&gt;综上： &lt;/p&gt;
&lt;p&gt;1. 数据量比较大时更适合创建索引，数据量较小时没有必要付出索引代价&lt;/p&gt;
&lt;p&gt;2. 频繁进行查找操作而不是更新删除插入操作，此时更适合使用索引&lt;/p&gt;


&lt;p&gt;固定集合：&lt;/p&gt;
&lt;p&gt;mongodb中可以创建大小固定的集合，称之为固定集合。&lt;/p&gt;

&lt;p&gt;特点：  &lt;/p&gt;
&lt;p&gt;1.插入速度更快，顺序查找更快&lt;/p&gt;
&lt;p&gt;                2.可以控制集合的空间大小&lt;/p&gt;
&lt;p&gt;3.能够自动淘汰早期数据&lt;/p&gt;

&lt;p&gt;使用： &lt;/p&gt;
&lt;p&gt;日志处理&lt;/p&gt;
&lt;p&gt;                临时缓存&lt;/p&gt;

&lt;p&gt;创建：&lt;/p&gt;
&lt;p&gt;db.createCollection(collection,{capped:true,size:10000,max:1000})&lt;/p&gt;
&lt;p&gt;参数：&lt;/p&gt;
&lt;p&gt;capped:true：&lt;/p&gt;
&lt;p&gt;创建固定集合&lt;/p&gt;
&lt;p&gt;size：10000：&lt;/p&gt;
&lt;p&gt;    固定集合的大小  字节数&lt;/p&gt;
&lt;p&gt;max ：1000：&lt;/p&gt;
&lt;p&gt;    表示最多多少条文档&lt;/p&gt;

&lt;p&gt;创建一个固定集合&lt;/p&gt;
&lt;p&gt;db.createCollection('log',{capped:true,size:10000,max:3})&lt;/p&gt;
</description>
<pubDate>Tue, 21 Aug 2018 16:34:00 +0000</pubDate>
<dc:creator>ParisGabriel</dc:creator>
<og:description>修改操作符的使用 $set 修改一个域的值，增加一个域 阿哲年龄修改为33 db.class1.update({name:'阿哲'},{$set:{age:33}}) 如果sex域不存</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/ParisGabriel/p/9515335.html</dc:identifier>
</item>
<item>
<title>爬虫（三）解析js，抓取优酷免费视频的真实播放地址 - Alexisbusy</title>
<link>http://www.cnblogs.com/Alexisbusyblog/p/9515319.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/Alexisbusyblog/p/9515319.html</guid>
<description>&lt;p&gt;&lt;span&gt;&lt;strong&gt;工具&lt;/strong&gt;&lt;/span&gt;：&lt;span&gt;google浏览器 + fiddler抓包工具&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;说明：这里不贴代码，【只讲思路！！！】&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;原始url = https://v.youku.com/v_show/id_XMzIwNjgyMDgwOA==.html? 【随便找的一部电影链接】称它为原始url&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;开始分析：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;打开 fiddler ，然后打开google，输入url，按F12.得到下图 ： &lt;img src=&quot;https://images2018.cnblogs.com/blog/1358638/201808/1358638-20180821221537852-1224676500.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;分析上图内容： 首先通过fiddler抓包得知真实播放地址是一段一段的，就如上图标号3，然后将其中一小段播放地址复制到浏览器打开，得到403error，由此可知，该链接需要重构一些东西，然后才能通过代码发送请求，否则是会被拒绝的。因此，来到上图标号4，分析请求url。首先先分析不同视频段之间的url区别，对比发现仅仅是【ts_seg_no】参数不同，而且该参数是从0开始逐渐+1，但是末尾是多少尚未可知。然后分析当不同时间打开原始url时，视频真实地址的请求url有哪些区别。老方法，将原始url在新建标签页再打开一次，对比两次打开的请求url。请求url参数的对比过程省略，参数对比的结果如下图：&lt;img src=&quot;https://images2018.cnblogs.com/blog/1358638/201808/1358638-20180821223035793-1771880549.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;可以看到每次打开，psid 和 vkey 这两个参数都是在变的，并且代表什么尚未可知。同次打开时的不同视频段的请求url在 ts_start 、 ts_end、ts_seg_no 参数上也有变化，虽然变化规律已知，但是并不能确定这三个参数的在什么时间结尾，因此也是尚未可知。分析到这里，可以确定的是在分段视频链接之前肯定还有链接或者js文件加载了这些未知的参数或者这些未知的请求url链接。于是在  network 中尝试地搜索了psid、vkey两个值，链接的一部分长这样【pl-ali.youku.com/playlist/m3u8?】，然后点开查看响应，如下图：&lt;img src=&quot;https://images2018.cnblogs.com/blog/1358638/201808/1358638-20180821225712856-1626721447.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;正好，响应的内容刚好是视频分段的请求链接。所以现在就不用去重构视频分段的请求链接了，把重点放在上图中的url链接上【暂且叫它播放url】，只要能弄到播放url，那么这次任务就算完成。&lt;/p&gt;
&lt;p&gt;然后开始分析播放url，它的模样如下图：&lt;img src=&quot;https://images2018.cnblogs.com/blog/1358638/201808/1358638-20180821230237676-1794748839.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;看上去有点复杂，所以就采用之前对比分析url的方法，得到播放url参数区别，区别如下图：&lt;img src=&quot;https://images2018.cnblogs.com/blog/1358638/201808/1358638-20180821231017362-1729243595.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;分析这个链接，得到链接中需要重构的参数只有 psid、ups_key 。所以要开始分析这两个参数的来源。&lt;/p&gt;
&lt;p&gt;因此在google  network 中ctrl+f 搜索 psid 、ups_key，发现两个参数出现在链接叫【https://acs.youku.com/h5/mtop.youku.play.ups.appinfo.get】中，这个链接【叫它js链接】如下图;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1358638/201808/1358638-20180821224437068-524197685.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这个js链接是一个js文件。点开后，查看响应，发现响应是一个json格式的js函数，如下图：&lt;img src=&quot;https://images2018.cnblogs.com/blog/1358638/201808/1358638-20180821231719065-2138085069.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;接着在响应中搜索psid、ups_key的值，居然找到了之前的播放链接，给个图：&lt;img src=&quot;https://images2018.cnblogs.com/blog/1358638/201808/1358638-20180821232009969-1656064760.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;ok！ 现在一切都很明朗了，只要能获取到这个js链接的响应信息，将m3u8_url 提取出来再请求，并提取响应【这个响应里面就是真实的视频播放地址】。因此现在要想办法怎么才能获取这个js链接，&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;问题的出现&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;嗯。。。？（猜想中...）从响应中可以看到  json  格式是在mtopjsonp1() 这个里面，那么这个mtopjsonp1()是什么呢？他是一个js函数吗？如果是一个js函数的话，那么可以尝试搜索一下看看【尝试过，并没有看到完全一样的函数】，难道尝试着去请求这个js链接吗？【这个链接也看了看，特别~特别的长，看起来好复杂，这条路先不考虑】，如果前面两个都不考虑的话，那么又要开始考虑重构那个 播放url 了，毕竟 播放url 只要找出psid、ups_key两个参数就ok。于是开始思考：这两个如果有其他路径存在的话，那它应该是在某个js函数里面，所以开始在 network 中search 两个参数 psid 、ups_key。嗯，发现了  psid 参数的痕迹。如下图：&lt;img src=&quot;https://images2018.cnblogs.com/blog/1358638/201808/1358638-20180821234103683-1417407335.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;确实在另一个js文件中发现了 psid ，但是又不太像，而且就算是的话，js不怎么熟的我也是找不出  psid  是怎么生成的，所以呢，这个变量先放着，接着搜一下 ups_key，很遗憾，没有在js文件中找到这个变量，因此需要回到猜想【如何想办法来请求那个很长很复杂的 js链接 】，为什么说它复杂呢？ 看下图就知道了：&lt;img src=&quot;https://images2018.cnblogs.com/blog/1358638/201808/1358638-20180821235007450-28390697.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;而且还是 GET 请求，发送 Data 的链接 ，下图是链接的参数（先绝望一下）：&lt;img src=&quot;https://images2018.cnblogs.com/blog/1358638/201808/1358638-20180821235208760-1093287960.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;说心里话，看到这样的链接，实在不想弄了。&lt;/p&gt;
&lt;p&gt;但是还是得花时间把它给摸透了，不然我得爬虫技术就是到此为止咯。（弄还是要弄的，不过想到爬虫方面的问题又无人可问，不由十分悲伤，技术瓶颈只能靠自己用未知的时间去堆出来）再接着弄吧。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;写在结尾 &lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我现在在爬虫破解js方向上出现了技术瓶颈，上一次那个破解检索网站也是万事具备就差一个由js加密的参数，因为没法解决js加密，最后又失败了。想来想去，这个技术瓶颈只能是现在开始学习js，自己也学着来做下js加密数据。如此翻来覆去，想必js破解指日可待。等以后js学成后，我要自己加密自己破解。&lt;/p&gt;
&lt;p&gt;另外文中所写完全是我个人的思路。可能是正确的，可能是错误的，可能某部分偏了等等，如果你不幸看到我的随笔，还不幸看到这个地方的话，十分真诚地希望你可以指正错误。&lt;/p&gt;
&lt;p&gt;另外，如果后续破解成功，这篇文章还会更新的。&lt;/p&gt;
</description>
<pubDate>Tue, 21 Aug 2018 16:19:00 +0000</pubDate>
<dc:creator>Alexisbusy</dc:creator>
<og:description>工具：google浏览器 + fiddler抓包工具 说明：这里不贴代码，【只讲思路！！！】 原始url = https://v.youku.com/v_show/id_XMzIwNjgyM</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/Alexisbusyblog/p/9515319.html</dc:identifier>
</item>
<item>
<title>8.0 TochAction各种用法 - 佬贰</title>
<link>http://www.cnblogs.com/pythontest/p/9515316.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/pythontest/p/9515316.html</guid>
<description>&lt;p&gt;1.&lt;span&gt;滑动&lt;/span&gt;&lt;span&gt;---TouchAction  &lt;/span&gt;&lt;span&gt;支持相对坐标、绝对坐标、&lt;/span&gt;&lt;span&gt;Element&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;  注意看顶部的导入TouchAction这个库..&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1226638/201808/1226638-20180821235718408-1138452753.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt;实例化&lt;/span&gt;
action =&lt;span&gt; TouchAction(driver)
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;press  其实位置   wait从起点滑动到终点的滑动时间  move_to终点位置   release滑动完成&lt;/span&gt;
action.press(x=0.5,y=0.7).wait(ms=5000).move_to(x=0.5,y=0.1&lt;span&gt;).release()
action.perform()  &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;完成&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;TouchAction&lt;span&gt;支持相对坐标和绝对坐标上下两种都是可行的，&lt;/span&gt;或者：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt;实例化&lt;/span&gt;
action =&lt;span&gt; TouchAction(driver)
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;press  起点位置   wait从起点到终点的滑动时间  move_to终点位置   release滑动完成&lt;/span&gt;
action.press(x=346,y=985).wait(ms=5000).move_to(x=346,y=200&lt;span&gt;).release()
action.perform()  &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;完成&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; &lt;span&gt;那么：如果是类似解锁九宫格的滑动呢&lt;/span&gt;...so ez&lt;span&gt;啦，&lt;span&gt;把第一个终点当成起点继续给我滑就&lt;/span&gt;O&lt;span&gt;了！&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt;实例化&lt;/span&gt;
action =&lt;span&gt; TouchAction(driver)
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;press  起点位置   wait从起点到终点的滑动时间  move_to终点位置   release滑动完成&lt;/span&gt;
action.press(x=346,y=985).wait(ms=5000).move_to(x=346,y=200).wait(ms=500).move_to(xxx).wait(ms=500).move_to(xxx).wait(ms=500&lt;span&gt;).move_to(xxx).release()
action.perform()  &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;完成&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;2.&lt;/span&gt;&lt;span&gt;长按元素两种方式&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　&lt;/span&gt;&lt;span&gt;直接修改上面代码，既然是长按&lt;/span&gt;--&lt;span&gt;那么就是说&lt;/span&gt;&lt;span&gt;---&lt;/span&gt;&lt;span&gt;起点坐标等于终点坐标所以：&lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt;实例化&lt;/span&gt;
action =&lt;span&gt; TouchAction(driver)
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;press  其实位置   wait从起点滑动到终点的滑动时间  move_to终点位置   release滑动完成&lt;/span&gt;
action.press(x=0.5,y=0.7).wait(ms=5000).move_to(x=0.5,y=0.7&lt;span&gt;).release()
action.perform()  &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;完成发送指令到服务器&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt; 　　　　&lt;span&gt;那么在深入理解一下&lt;/span&gt;---&lt;span&gt;既然是长按&lt;/span&gt;&lt;span&gt;----&lt;/span&gt;&lt;span&gt;那么只有起点坐标&lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;和滑动时间&lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;不给他终点时间呢&lt;/span&gt;&lt;span&gt;----&lt;/span&gt;&lt;span&gt;是不是说就是按下去之后&lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;等着就可以了&lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;所以不给终点坐标也是&lt;/span&gt;&lt;span&gt;OK&lt;/span&gt;&lt;span&gt;的！&lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt;实例化&lt;/span&gt;
action =&lt;span&gt; TouchAction(driver)
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;press  其实位置   wait从起点滑动到终点的滑动时间  move_to终点位置   release滑动完成&lt;/span&gt;
action.press(x=0.5,y=0.7).wait(ms=5000&lt;span&gt;)..release()
action.perform()  &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;完成&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;span&gt;3.单击&lt;/span&gt;  tap&lt;span&gt;——也支持相对坐标和绝对坐标&lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt;实例化&lt;/span&gt;
action =&lt;span&gt; TouchAction(driver)
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;press  其实位置   wait从起点滑动到终点的滑动时间  move_to终点位置   release滑动完成&lt;/span&gt;
action.tap([(100,100&lt;span&gt;)]).release()
action.perform()  &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;完成&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;span&gt;结果：如下图所示，很明显凉了啊&lt;/span&gt;  &lt;span&gt;兄碟&lt;/span&gt;---&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1226638/201808/1226638-20180822000555154-1471960794.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;提示&lt;/span&gt;：&lt;span&gt;没有属性&lt;/span&gt;id ，感觉这个报错有点骚--看的不是太懂，但是讲道理应该是可以的&lt;span&gt;，so....我看了一波源码&lt;/span&gt;&lt;span&gt;---&lt;/span&gt;&lt;span&gt;发现，如下图所示，，，很明显是支持的&lt;/span&gt;&lt;span&gt;...&lt;/span&gt;&lt;span&gt;但是需要给出&lt;/span&gt;&lt;span&gt;x&lt;/span&gt;&lt;span&gt;和&lt;/span&gt;&lt;span&gt;y&lt;/span&gt;&lt;span&gt;坐标的&lt;/span&gt;&lt;span&gt;key----so-----tap&lt;/span&gt;&lt;span&gt;在&lt;/span&gt;&lt;span&gt;TouchAction&lt;/span&gt;&lt;span&gt;下的用法和直接用是不一样的，&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1226638/201808/1226638-20180822000703572-1224757662.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Too  so  &lt;span&gt;：&lt;/span&gt;&lt;span&gt;TouchAction+tap&lt;/span&gt;&lt;span&gt;点击改一下语法，给出&lt;/span&gt;&lt;span&gt;X&lt;/span&gt;&lt;span&gt;，&lt;/span&gt;&lt;span&gt;Y&lt;/span&gt;&lt;span&gt;坐标的&lt;/span&gt;&lt;span&gt;key&lt;/span&gt;&lt;span&gt;，如下所示&lt;/span&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1226638/201808/1226638-20180822000739097-783073034.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;结果：很舒服--OK的&lt;/p&gt;
&lt;p&gt;代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt;实例化&lt;/span&gt;
action =&lt;span&gt; TouchAction(driver)
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;press  其实位置   wait从起点滑动到终点的滑动时间  move_to终点位置   release滑动完成&lt;/span&gt;
action.tap(x=0.13,y=0.31&lt;span&gt;).release()
action.perform()  &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;完成&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;span&gt;那么问题又来了&lt;/span&gt;--&lt;span&gt;这个可以单击，那么搞一个&lt;/span&gt;&lt;span&gt;tow&lt;/span&gt;&lt;span&gt;击可以不&lt;/span&gt;？&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1226638/201808/1226638-20180822000933631-205807939.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;结果：还是很明显可以的--&lt;/p&gt;
&lt;p&gt;备注：有位大兄弟问我，他是按照这个写的，但是一直点击......我这里是写的点击二十次...是为了把指针打开之后方便看到效果.....&lt;/p&gt;

&lt;p&gt;所以：TouchAction用法&lt;/p&gt;
&lt;p&gt;滑动：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt;实例化&lt;/span&gt;
action =&lt;span&gt; TouchAction(driver)
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;press  其实位置   wait从起点滑动到终点的滑动时间  move_to终点位置   release滑动完成&lt;/span&gt;
action.press(x=0.5,y=0.7).wait(ms=5000).move_to(x=0.5,y=0.1&lt;span&gt;).release()
action.perform()  &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;完成&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;长按：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt;实例化&lt;/span&gt;
action =&lt;span&gt; TouchAction(driver)
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;press  其实位置   wait从起点滑动到终点的滑动时间  move_to终点位置   release滑动完成&lt;/span&gt;
action.press(x=0.5,y=0.7).wait(ms=5000&lt;span&gt;)..release()
action.perform()  &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;完成&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;点击：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt;实例化&lt;/span&gt;
action =&lt;span&gt; TouchAction(driver)
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;press  其实位置   wait从起点滑动到终点的滑动时间  move_to终点位置   release滑动完成&lt;/span&gt;
action.tap(x=0.13,y=0.31&lt;span&gt;).release()
action.perform()  &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;完成&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;双击：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt;实例化&lt;/span&gt;
action =&lt;span&gt; TouchAction(driver)
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;press  其实位置   wait从起点滑动到终点的滑动时间  move_to终点位置   release滑动完成&lt;/span&gt;
action.tap(x=0.13,y=0.31,count=20&lt;span&gt;).release()
action.perform()  &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;完成&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;备注：再次建议新手打开开发者选项里面的  指针位置，打开之后点击屏幕会出现如图所示的坐标，后续的手机操作，你可以直接看到代码是否执行...&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1226638/201808/1226638-20180822001631368-254848446.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;



&lt;p&gt;&lt;span&gt;那么&lt;/span&gt;TouchAction&lt;span&gt;的用法还有其他吗&lt;/span&gt;&lt;span&gt;......&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;事实上真的还以用来搞点事情：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;比如&lt;/span&gt;---appium&lt;span&gt;自带的那个 叫啥来着&lt;/span&gt; &lt;span&gt;scroollIntoview....&lt;/span&gt;&lt;span&gt;好像是这么拼的&lt;/span&gt;&lt;span&gt;..&lt;/span&gt;&lt;span&gt;就是一个滑动查找元素的方法&lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;不知道其他人用这个是否稳定&lt;/span&gt;&lt;span&gt;...&lt;/span&gt;&lt;span&gt;反正我第一点是记不住这个单词&lt;/span&gt;&lt;span&gt;...&lt;/span&gt;&lt;span&gt;第二点是感觉滑动起来不太稳定&lt;/span&gt;&lt;span&gt;..&lt;/span&gt;&lt;span&gt;所以我自己用&lt;/span&gt;&lt;span&gt;TouchAction&lt;/span&gt;&lt;span&gt;封装了一个简单粗暴的滑动查找元素的方法&lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;后面应该会讲到滑动查找元素&lt;/span&gt;&lt;span&gt;...&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Tue, 21 Aug 2018 16:17:00 +0000</pubDate>
<dc:creator>佬贰</dc:creator>
<og:description>1.滑动 TouchAction 支持相对坐标、绝对坐标、Element 注意看顶部的导入TouchAction这个库.. TouchAction支持相对坐标和绝对坐标上下两种都是可行的，或者： 那么</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/pythontest/p/9515316.html</dc:identifier>
</item>
<item>
<title>你需要知道的缓存击穿/穿透/雪崩 - WeihanLi</title>
<link>http://www.cnblogs.com/weihanli/p/9515302.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/weihanli/p/9515302.html</guid>
<description>&lt;h2 id=&quot;intro&quot;&gt;Intro&lt;/h2&gt;
&lt;p&gt;使用缓存需要了解几个缓存问题，缓存击穿、缓存穿透以及缓存雪崩，需要了解它们产生的原因以及怎么避免，尤其是当你打算设计自己的缓存框架的时候需要考虑如何处理这些问题。&lt;/p&gt;
&lt;h2 id=&quot;缓存击穿&quot;&gt;缓存击穿&lt;/h2&gt;
&lt;p&gt;一般的缓存系统，都是按照 key 去缓存查询，如果不存在对应的 value ，就应该去后端系统查找（比如数据库）。如果 key 对应的 value 是一定不存在的，并且对该 key 并发请求量很大，就会对后端系统就会造成很大的压力。&lt;/p&gt;
&lt;p&gt;在高并发下,多线程同时查询同一个资源,如果缓存中没有这个资源,那么这些线程都会去后端服务或数据库查找,对数据库造成极大压力,缓存也就失去存在的意义。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;缓存击穿解决方案&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;导致缓存击穿的问题在于高并发多线程情景下，许多请求一下子都到后端服务和数据库，导致后端服务与数据库的压力骤增。&lt;/p&gt;
&lt;p&gt;处理这个问题，在多线程请求同一个 key 的时候，进行排队，这样第一次请求后端服务和数据库之后更新缓存的值，下一个请求从缓存中取数据的时候就会拿到缓存数据，不会再请求后端服务和数据库。&lt;/p&gt;
&lt;h2 id=&quot;缓存穿透&quot;&gt;缓存穿透&lt;/h2&gt;
&lt;p&gt;缓存穿透是指用户查询数据，在数据库没有，自然在缓存中也不会有。这样就导致用户查询的时候，在缓存中找不到，每次都要去数据库中查询，从而失去了缓存的意义而且相比直接查询数据库还增加了每次都去查缓存。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;缓存穿透解决方案&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;导致问题出现的原因在于请求一个不存在的数据从而使得缓存始终不存在进而导致后端系统（主要是数据库）要承受很大的压力，所以想要解决这个问题，就势必就在缓存这里拦截住大量的请求，使得最终走到后端系统，查询数据库的请求尽可能的少。&lt;/p&gt;
&lt;p&gt;一般处理这个问题，缓存不存在的时候会在缓存中设置一个时间较短的内容为空的缓存，从而减少实际请求到后端和进行数据库查询的次数。&lt;/p&gt;
&lt;p&gt;复杂一些的解决方案有 布隆过滤器，基本原理是设置一个 list，查询缓存的时候从 list 里进行判断，这里不做多介绍。&lt;/p&gt;
&lt;blockquote readability=&quot;9&quot;&gt;
&lt;p&gt;布隆过滤器（Bloom Filter）是1970年由布隆提出的。它实际上是一个很长的二进制向量和一系列随机映射函数。布隆过滤器可以用于检索一个元素是否在一个集合中。它的优点是空间效率和查询时间都远远超过一般的算法，缺点是有一定的误识别率和删除困难&lt;br/&gt;如果想要判断一个元素是不是在一个集合里，一般想到的是将所有元素保存起来，然后通过比较确定。链表，树等等数据结构都是这种思路. 但是随着集合中元素的增加，我们需要的存储空间越来越大，检索速度也越来越慢(O(n),O(logn))。不过世界上还有一种叫作散列表（又叫哈希表，Hash table）的数据结构。它可以通过一个Hash函数将一个元素映射成一个位阵列（Bit array）中的一个点。这样一来，我们只要看看这个点是不是1就可以知道集合中有没有它了。这就是布隆过滤器的基本思想。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;缓存雪崩&quot;&gt;缓存雪崩&lt;/h2&gt;
&lt;p&gt;当缓存服务器重启或者大量缓存集中在某一个时间失效，这样在失效的时候，也会给后端系统和数据库带来很大压力.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;缓存雪崩解决方案&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;导致出现缓存雪崩的根本原因在于缓存大量失效，从而导致大量请求没有命中缓存，大量请求走到后端服务和数据库，造成压力。&lt;/p&gt;
&lt;p&gt;如果系统启动就依赖很多缓存，那可以通过其它服务进行缓存预热，提前把需要的数据放到缓存中，避免系统启动大量请求直接请求到后端服务和数据库。&lt;/p&gt;
&lt;p&gt;既然是由于同一时间缓存大量失效，我们也可以着手从缓存的失效时间上，做一些优化，让缓存不要在同一时间点失效。&lt;br/&gt;具体的实施办法，你可以在设置失效时间的时候随机加几秒过期时间，避免同一时间点缓存大量失效。&lt;/p&gt;
&lt;h2 id=&quot;reference&quot;&gt;Reference&lt;/h2&gt;

&lt;p&gt;Contact me: &lt;a href=&quot;mailto:weihanli@outlook.com&quot;&gt;weihanli@outlook.com&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Tue, 21 Aug 2018 16:09:00 +0000</pubDate>
<dc:creator>WeihanLi</dc:creator>
<og:description>缓存击穿/穿透/雪崩 Intro 使用缓存需要了解几个缓存问题，缓存击穿、缓存穿透以及缓存雪崩，需要了解它们产生的原因以及怎么避免，尤其是当你打算设计自己的缓存框架的时候需要考虑如何处理这些问题。 缓</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/weihanli/p/9515302.html</dc:identifier>
</item>
<item>
<title>学习逆向知识之用于游戏外挂的实现.第三讲,通过游戏外挂.分析红色警戒金钱基址.以及确定基址小技巧. - iBinary</title>
<link>http://www.cnblogs.com/iBinary/p/9515304.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/iBinary/p/9515304.html</guid>
<description>&lt;p&gt;　　　　　　　　　　　　　　　　　　　　　　　　　　分析红色警戒金钱基址.以及确定基址小技巧.&lt;/p&gt;
&lt;h2&gt;一丶基址简介&lt;/h2&gt;
&lt;p&gt;　　通过第二讲.我们寻找植物大战僵尸无限阳光.学习到了相关的逆向知识.以及认识了基址.动态地址. 静态地址的区别.现在我们拿红色警戒这款单击游戏进行练手.&lt;/p&gt;
&lt;p&gt;PS: 主要目的是分析数据.学习逆向知识.并为之所用.并不是教大家如何制作外挂.&lt;/p&gt;
&lt;p&gt;1.怎么确定我们寻找到的是基址?&lt;/p&gt;
&lt;p&gt;有三种方法.&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;CE&lt;span&gt;中绿色表示基址&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;黑色表示内存地址&lt;/span&gt;&lt;span&gt;.一般绿色的很有可能是基址(当然不一定是.不过大部分是)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;退出游戏重新进入游戏&lt;/span&gt;.&lt;span&gt;地址不会改变&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;其值的内容也不会改变&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;搜索指针&lt;/span&gt;.&lt;span&gt;找不到&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;那么基址的上一级地址就是指针地址&lt;/span&gt;&lt;span&gt;. 这段话可能有点难以理解. 意思就是如果我们找到基址了.再看访问.如果没有地址保存这个基址指针.那么这个基址指针就是我们要寻找的基址指针了&lt;/span&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;h2&gt;&lt;span&gt;二丶运行红警进行金钱的查找.&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;　　红色警戒我们可以在网络上下载.也可以在网盘中下载.都会打包上传.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;CE使用方法:&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　1.附加Game.exe&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　2.搜索金钱.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　3.改变金钱数值.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　4.CE点击再次扫描.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;如果执行完上面四步那么剩下的就是我们要找的地址了.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1197364/201808/1197364-20180821234806568-322897293.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;我们说过.绿色的可能表示基址.我们可以一个一个尝试.&lt;/p&gt;
&lt;p&gt;PS: 不一一尝试了.其中步骤略过.经过尝试.前两个绿色的并不是我们要找的基址.最后一个修改我们游戏中才会进行修改.&lt;/p&gt;
&lt;p&gt;所以我们找到了动态地址.如下图所示&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1197364/201808/1197364-20180821235011029-1216183812.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; 所以我们要找什么改写了这个地址.通过第二节课内容.寻找我们的基址. 如下图所示&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1197364/201808/1197364-20180821235116657-316575876.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;通过上图.我们得出了汇编指令&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
mov [ebx + &lt;span&gt;0x24c&lt;/span&gt;],eax
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;由此得出.一级偏移是24c&lt;/p&gt;
&lt;p&gt;那么我们继续寻找ebx指针. 看看是谁保存了ebx指针 如下图所示&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1197364/201808/1197364-20180821235259320-1095229097.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;通过查找.我们找出了三个绿色基址.但是根据第一次查找.我们会发现0x0084开头的有可能不是.不过我们也不确定.所以三个都要尝试.&lt;/p&gt;
&lt;p&gt;PS: 已经进行过尝试了. 基址指针是 0x00A1E0C4&lt;/p&gt;
&lt;p&gt;尝试的时候.使用CE的手动添加地址.尝试. 如下图所示&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1197364/201808/1197364-20180821235519048-1335555151.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;所以我们根据我们找基址的三种方法进行尝试.&lt;/p&gt;
&lt;p&gt;可以得出确定我们要找的基址就是我们的找的地址了.&lt;/p&gt;
&lt;h3&gt;三丶通过编程实现修改金钱.&lt;/h3&gt;
&lt;p&gt;通过上面我们可以得出.  [0xA1E0C4] + 0X24C = 金钱的地址&lt;/p&gt;
&lt;p&gt;　　　　　　　　　　   [[0xA1E0C4] + 0x24c] = 金钱的值.&lt;/p&gt;
&lt;p&gt;所以我们可以使用易语言编写简单的修改金钱辅助.&lt;/p&gt;
&lt;p&gt;当然C++一样可以修改. 具体API可以参考上一篇文章.&lt;/p&gt;
&lt;p&gt;因为易语言好实现.所以使用易语言编写.&lt;/p&gt;
&lt;p&gt; 成品:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1197364/201808/1197364-20180822000541690-633612396.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; 课堂代码以及游戏:   链接：&lt;a href=&quot;https://pan.baidu.com/s/1T56c20QIcADoAGc6lhD8Lg&quot; target=&quot;_blank&quot;&gt;https://pan.baidu.com/s/1T56c20QIcADoAGc6lhD8Lg&lt;/a&gt; 密码：pf5d&lt;/p&gt;

</description>
<pubDate>Tue, 21 Aug 2018 16:09:00 +0000</pubDate>
<dc:creator>iBinary</dc:creator>
<og:description>分析红色警戒金钱基址.以及确定基址小技巧. 一丶基址简介 通过第二讲.我们寻找植物大战僵尸无限阳光.学习到了相关的逆向知识.以及认识了基址.动态地址. 静态地址的区别.现在我们拿红色警戒这款单击游戏进</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/iBinary/p/9515304.html</dc:identifier>
</item>
<item>
<title>分布式事务一致性解决方案 - 尜尜人物</title>
<link>http://www.cnblogs.com/littlecharacter/p/9341804.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/littlecharacter/p/9341804.html</guid>
<description>&lt;p&gt;&lt;span&gt;　　一致性问题，“万恶之源”是数据冗余和分布并通过网络交互+网络异常是常态。&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span&gt;1、数据一致性的情形&lt;/span&gt;&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;&lt;strong&gt;主库、从库和缓存数据一致性&lt;/strong&gt;，相同数据冗余，关系数据库，为保证关据库的高可用和高性能，一般会采用主从（备）架构并引入缓存。其中数据不一致性存在于数据冗余的时间窗口内。常用的解决方案见&lt;strong&gt;&lt;a href=&quot;https://www.cnblogs.com/littlecharacter/p/9084291.html&quot; target=&quot;_blank&quot;&gt;数据库之架构&lt;/a&gt;&lt;/strong&gt;。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;&lt;strong&gt;多副本数据之间的数据一致性&lt;/strong&gt;，相同数据副本，大数据领域，一份数据会有多个副本并存储到不同的节点上。客户端可以访问任何一个节点进行读写操作。常用的解决方案是基于Paxos、ZAB、Raft、Quorum、Gossip等&lt;/span&gt;&lt;span&gt;的开源实现。这里只是一提，暂不探讨。感兴趣可以自行谷歌或百度。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;&lt;strong&gt;分布式服务之间的数据一致性&lt;/strong&gt;，相关数据分布，分布式服务，不同的服务操作不同的库（表），而且库（表）间要保持一致。常用的解决方案是&lt;strong&gt;&lt;a href=&quot;http://www.cnblogs.com/littlecharacter/p/9341804.html#fbssw&quot;&gt;分布式事务一致性解决方案&lt;/a&gt;&lt;/strong&gt;。这也是本文要探讨的内容。&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;&lt;span&gt;2、数据一致性的概念&lt;/span&gt;&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;强一致性&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;弱一致性&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;最终一致性&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;&lt;span&gt;3、数据一致性的原理&lt;/span&gt;&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;ACID&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;CAP&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;BASE&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;&lt;span&gt;4、数据一致性的协议&lt;/span&gt;&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;两阶段提交协议&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;三阶段提交协议&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;TCC协议&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;Paxos协议&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;ZAB协议&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;Raft协议&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;Quorum协议&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;Gossip协议&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span&gt;　　&lt;/span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/955136/201808/955136-20180814214554762-615914341.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　所谓分布式服务，就是把之前通过本地接口交互的模块，拆分成单独的应用独立部署，并通过远程接口和网络消息交互。且不管这样说严不严密，正不正确，理解就好。本文的重点也不是这个话题。简单画一张图辅助理解，如图。&lt;/span&gt;&lt;span&gt;集中式架构，要想保证订单表和库存表的一致性，只要一个本地事务（ACID）就能保证两者的强一致性。分布式架构，订单表由订单服务操作，库存表由库存服务操作。要想保证订单表和库存表的一致性，那么就必须保证订单服务对订单表的操作和库存服务对库存表的操作同事成功。之前的一个本地事务就变成了一个分布式事务。由于服务之间通过网络交互+网络异常是常态，就会产生服务间数据不一致的情况。这就涉及一个分布式事务一致性的问题。&lt;/span&gt;&lt;/p&gt;


&lt;h2&gt;&lt;span&gt;1、接口同步调用模式与一致性解决方案&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/955136/201808/955136-20180816221813949-915611550.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;模式分析&lt;/strong&gt;：A服务同步调用B服务的接口并等待结果返回，后续的流程会依赖B服务的返回结果。这种交互模式下，A服务得到的结果细分有三种情况。&lt;/span&gt;&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;&lt;span&gt;请求发起阶段网络超时或异常，此时，B服务未收到请求，未作出相应的处理；&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;结果返回阶段网络超时或异常，此时，B服务已收到请求，并作出相应的处理；&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;正常结果返回（明确的成功或失败）。&lt;/span&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;业务场景&lt;/strong&gt;：适用于大规模、高并发的&lt;strong&gt;短小操作且依赖返回值&lt;/strong&gt;的场景。例如，交易服务和库存服务（卡券服务、红包服务等）的交互、用户登录和准入服务的交互等。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;解决方案&lt;/strong&gt;：方案一，&lt;strong&gt;服务调用方&lt;/strong&gt;查询重试方案；方案二，&lt;strong&gt;TCC&lt;/strong&gt;方案。&lt;/span&gt;&lt;/p&gt;
&lt;ol readability=&quot;1.9704918032787&quot;&gt;&lt;li readability=&quot;4&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;服务调用方&lt;/strong&gt;查询重试方案，适合一个从业务服务场景。&lt;/span&gt;&lt;/span&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('5732c953-fdcf-426b-b47f-cba5d667a86a')&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_5732c953-fdcf-426b-b47f-cba5d667a86a&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_5732c953-fdcf-426b-b47f-cba5d667a86a&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('5732c953-fdcf-426b-b47f-cba5d667a86a',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_5732c953-fdcf-426b-b47f-cba5d667a86a&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;下单减库存方法() {
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 1.准备操作
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2.重试调用B服务&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt;     result =&lt;span&gt; RetryUtil {
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;         &lt;span&gt;while&lt;/span&gt;(重试次数 &amp;lt;&lt;span&gt; 最大重试次数) {
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;             &lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt; (重试次数 != 0&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;                     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; case1：网络超时或异常（catch分支）
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;                     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; case2：查询到扣减库存操作，result=成功（return）
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;                     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; case3：查不到扣减库存操作，result=失败（继续下面操作）&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt;                     result =&lt;span&gt; rpc.查询扣减库存是否成功();
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;                     &lt;span&gt;if&lt;/span&gt; (result ==&lt;span&gt; 成功) {
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;                         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; result;
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;                    }
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;                 &lt;span&gt;//&lt;/span&gt;&lt;span&gt; case1：网络超时或异常（catch分支）
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;                 &lt;span&gt;//&lt;/span&gt;&lt;span&gt; case2：扣减库存成功，result=成功（return）
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;                 &lt;span&gt;//&lt;/span&gt;&lt;span&gt; case3：扣减库存失败，result=失败（return）&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt;                 &lt;span&gt;return&lt;/span&gt;&lt;span&gt; rpc.扣减库存();
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;             } &lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception e) {
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt; (重试次数 =&lt;span&gt; 最大重试次数) {
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;                     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 报警，人工处理或者（近实时）对账系统自动校准
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;                     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 抛出异常，中断后续流程&lt;/span&gt;
&lt;span&gt;24&lt;/span&gt;                     &lt;span&gt;throw&lt;/span&gt; 自定义异常; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;或者result封装异常&lt;/span&gt;
&lt;span&gt;25&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; &lt;span&gt;    };
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 3.后续操作&lt;/span&gt;
&lt;span&gt;30&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;注&lt;/strong&gt;：1) 查询重试后依然失败（极少），报警，人工处理或者准实时对账系统自动校准；&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　2) 重试次数不宜多，甚至只重试一次；&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　3) B服务处理请求要做幂等。&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;TCC&lt;/strong&gt;方案，适合多个从业务服务场景。&lt;strong&gt;&lt;a href=&quot;https://www.cloud.alipay.com/docs/2/69655&quot; target=&quot;_blank&quot;&gt;TCC&lt;/a&gt;&lt;/strong&gt;是阿里在二阶段提交协议的基础上提出的一种解决分布式事务一致性的协议，&lt;strong&gt;&lt;a href=&quot;https://www.cloud.alipay.com/docs/2/46885&quot; target=&quot;_blank&quot;&gt;原理&lt;/a&gt;&lt;/strong&gt;图如下。其对应的产品是&lt;strong&gt;&lt;a href=&quot;https://www.cloud.alipay.com/docs/2/56495&quot; target=&quot;_blank&quot;&gt;DTX&lt;/a&gt;&lt;/strong&gt;（老版是&lt;strong&gt;&lt;a href=&quot;https://www.cloud.alipay.com/docs/2/46887&quot; target=&quot;_blank&quot;&gt;DTS&lt;/a&gt;&lt;/strong&gt;）。DTS中有个&lt;strong&gt;&lt;a href=&quot;https://www.cloud.alipay.com/docs/2/46886&quot; target=&quot;_blank&quot;&gt;快速开始&lt;/a&gt;&lt;/strong&gt;的例子看明白了，TCC就基本OK了。在蚂蚁金服内部被广泛地应用于交易、转账、红包等核心资金链路，服务于亿级用户的资金操作。&lt;br/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/955136/201808/955136-20180821220253681-2056374938.png&quot; alt=&quot;&quot; width=&quot;448&quot; height=&quot;404&quot;/&gt;&lt;/span&gt;&lt;/span&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;注&lt;/strong&gt;：&lt;/span&gt;&lt;span&gt;关于TCC，个人认为，理解原理很重要。工作中遇到吻合的场景可以根据原理自行实现，满足业务即可。&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;h2&gt;&lt;span&gt;2、接口异步调用模式与一致性解决方案&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/955136/201808/955136-20180816224208077-1003486452.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;模式分析&lt;/strong&gt;：A服务调用B服务，B服务先受理请求并落库，状态是&lt;strong&gt;待处理&lt;/strong&gt;。B服务处理请求很耗时，或者要依赖其他的服务。B服务处理完后通知A服务或者A服务定时去查询B服务的处理结果。这种交互模式下，对于CASE-1，第1步和第2步同&lt;strong&gt;&lt;a href=&quot;http://www.cnblogs.com/littlecharacter/p/9341804.html#jktbdyms&quot;&gt;接口同步调用模式&lt;/a&gt;&lt;/strong&gt;，第3步同&lt;strong&gt;&lt;a href=&quot;http://www.cnblogs.com/littlecharacter/p/9341804.html#xxybclms&quot;&gt;消息异步处理模式&lt;/a&gt;&lt;/strong&gt;；对于CASE-2，相当于两次&lt;strong&gt;&lt;a href=&quot;http://www.cnblogs.com/littlecharacter/p/9341804.html#jktbdyms&quot;&gt;接口同步调用模式&lt;/a&gt;&lt;/strong&gt;。&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;业务场景&lt;/strong&gt;：适用于非核心链路上负载较高的处理环节，这个环节经常耗时较长，并且对时效性要求不高。例如，用户提现时，账户系统和提现系统的交互（CASE-1）；提现系统和三方系统（银行系统或者三方托管系统）的交互（CASE-2）。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;解决方案&lt;/strong&gt;：&lt;strong&gt;服务被调方&lt;/strong&gt;最大努力处理方案。由于B服务中请求有落库，所以可以用定时任务不断重试尽最大努力将请求处理出结果。处理后，将请求状态设置成对应的结果落库。然后再通知A服务或者A服务异步主动查询。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('425505d0-0a77-451d-8ef6-5abab9d4b358')&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_425505d0-0a77-451d-8ef6-5abab9d4b358&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_425505d0-0a77-451d-8ef6-5abab9d4b358&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('425505d0-0a77-451d-8ef6-5abab9d4b358',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_425505d0-0a77-451d-8ef6-5abab9d4b358&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;受理请求方法() {
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 1.请求落库，状态为待处理
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2.返回受理结果&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (落库成功) {
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 返回受理成功&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt;     } &lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 返回受理失败&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; 
&lt;span&gt;11&lt;/span&gt; &lt;span&gt;定时任务处理请求方法() {
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 1.扫描待处理请求&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt;     &lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2.处理请求&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (处理成功) {
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 设置请求处理状态为处理成功&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt; &lt;span&gt;        } eles {
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;  设置请求处理状态为处理失败&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;     } &lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception e) {
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 不做任何操作，请求状态依旧为待处理&lt;/span&gt;
&lt;span&gt;22&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 3.消息通知A服务处理结果或者等待A服务查询处理结果&lt;/span&gt;
&lt;span&gt;24&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;注&lt;/strong&gt;：1) B服务通常都是接受请求并持久化后才返回A服务受理成功。避免服务进程被杀掉而导致请求丢失。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　2) 不管是第（1,2）两步还是CASE-2中的第（3,4）两步，如果查询重试失败，可以落库，用定时任务处理，知道成功。反正不像&lt;strong&gt;&lt;a href=&quot;http://www.cnblogs.com/littlecharacter/p/9341804.html#jktbdyms&quot;&gt;接口同步调用模式&lt;/a&gt;&lt;/strong&gt;，A服务不需要实时的结果。&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span&gt;3、消息异步处理模式与一致性解决方案&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/955136/201808/955136-20180817204711754-72043733.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;模式分析&lt;/strong&gt;：A服务将B服务需要的信息通过消息中间件传递给B服务，A服务无需知道B服务的处理结果。这种交互模式下，消息生产者要确保消息发送成功；消息消费者要确保消息消费成功。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;业务场景&lt;/strong&gt;：消息异步处理模式与接口异步调用模式类似，多应用于非核心链路上负载较高的处理环节中，井且服务的上游不关心下游的处理结果，下游也不需要向上游返回处理结果。例如，在电商系统中，用户下订单支付且交易成功后，发送消息给物流系统或者账务系统进行后续的处理。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;解决方案&lt;/strong&gt;：&lt;strong&gt;生产者&lt;/strong&gt;最大努力通知+&lt;strong&gt;消费者&lt;/strong&gt;最大努力处理方案。&lt;/span&gt;&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;非事务消息&lt;/strong&gt;，生产者先执行本地事务并将消息落库，状态标记为待发送，然后发送消息。如果发送成功，则将消息改为发送成功。定时任务定时从数据库捞取在一定时间内待发送的消息并将消息发送。通过定时任务来保证消息的发送。为确保消息一定能消费，消费者一般采用手动ACK机制，那么消息服务器必然会重发未ACK的消息，这就要求消息消费者做好幂等。&lt;br/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/955136/201808/955136-20180817232709672-1429262355.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('226e94c2-7de4-4c5d-be80-a18ee799fe6b')&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_226e94c2-7de4-4c5d-be80-a18ee799fe6b&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_226e94c2-7de4-4c5d-be80-a18ee799fe6b&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('226e94c2-7de4-4c5d-be80-a18ee799fe6b',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_226e94c2-7de4-4c5d-be80-a18ee799fe6b&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;交易完成发消息方法() {
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 1.设置交易状态为已完成
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2.消息落库，状态为待发送
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 可异步发送，也建议异步发送&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt;     &lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 3.发送消息&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (发送成功) {
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 设置消息状态为发送成功&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;     } &lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception e) {
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 不做任何操作，消息状态依旧为待发送&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; 
&lt;span&gt;15&lt;/span&gt; &lt;span&gt;定时任务发送消息方法() {
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 1.扫描待发送消息&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt;     &lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2.发送消息&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (发送成功) {
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 设置消息状态为发送成功&lt;/span&gt;
&lt;span&gt;21&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;     } &lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception e) {
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 不做任何操作，消息状态依旧为待发送&lt;/span&gt;
&lt;span&gt;24&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;事务消息&lt;/strong&gt;，以RocketMQ为例，下图是RocketMQ事务消息的流程。官网有&lt;strong&gt;&lt;a href=&quot;https://rocketmq.apache.org/docs/transaction-example&quot; target=&quot;_blank&quot;&gt;示例代码&lt;/a&gt;&lt;/strong&gt;。和不支持事务的消息中间相比，只是消息发送的时候，保证了和本地事务的一致。消费者实现还是不变。&lt;br/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/955136/201808/955136-20180817230805783-443259620.png&quot; alt=&quot;&quot; width=&quot;790&quot; height=&quot;199&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;注&lt;/strong&gt;：1) 定时任务重试发送消息和消息服务器重发未ACK的消息一般都是时间阶梯式的（2&lt;sup&gt;n&lt;/sup&gt;*时间间隔）；&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　2) 支持事务消息中间件之RocketMQ：&lt;a href=&quot;https://rocketmq.apache.org/docs/quick-start&quot; target=&quot;_blank&quot;&gt;https://rocketmq.apache.org/docs/quick-start&lt;/a&gt;。&lt;/span&gt;&lt;/p&gt;

&lt;ol&gt;&lt;li&gt;&lt;span&gt;有业务状态，业务逻辑来保证幂等。比如接到支付成功的消息订单状态变成支付完成，如果当前状态是支付完成，则再收到一个支付成功的消息则说明消息重复了，直接作为消息成功处理。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;无业务状态，业务唯一ID保证幂等。增加一个去重表（或分布式缓存）来记录有业务唯一ID的操作。比如调用充值接口，当请求过来时，会根据唯一充值ID去查充值流水表，若已经存在，则直接返回；否则继续进行充值操作。&lt;/span&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;注&lt;/strong&gt;：保证幂等性的方法很多，根据具体的业务场景，总能很容易找到保证幂等性的方法。&lt;/span&gt;&lt;/p&gt;

&lt;ol&gt;&lt;li&gt;&lt;span&gt;接口同步调用模式，&lt;strong&gt;服务调用方&lt;/strong&gt;查询重试方案和&lt;strong&gt;TCC&lt;/strong&gt;方案。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;接口异步调用模式，&lt;strong&gt;服务被调方&lt;/strong&gt;最大努力处理方案。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;消息异步处理模式，&lt;strong&gt;生产者&lt;/strong&gt;最大努力通知+&lt;strong&gt;消费者&lt;/strong&gt;最大努力处理方案。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;任何服务操作都需要提供一个查询接口，用来向外部输出操作执行的状态。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;永远不要在本地事务中调用远程服务，在这种场景下如果远程服务出现了问题，则会拖长事务，导致应用服务器占用太多的数据库连接，让服务器负载迅速攀升，在严重情况下会压垮数据库。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;最后一道防线 - 对账系统。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;同步和异步的抉择：&lt;/span&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;可以异步的地方，就应该异步实现。如果业务逻辑允许，则我们可以将一些耗时较长的、用户对响应没有特别要求的操作异步化，以此来减少核心链路的层级，释放系统的压力。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;能用同步解决的问题，不要引入异步。如果性能不是问题，或者所处理的操作是短小的轻量级处理逻辑，那么同步调用方式是最理想不过的，因为这样不需要引入异步化的复杂处理流程。&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;最后，来思考下，垂直分库情况的数据一致性问题，相信你已经有答案了。&lt;/span&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;注：如果，以上场景和解决方案，没能包含您工作中遇到的场景，欢迎交流，并共同讨论解决方案。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Tue, 21 Aug 2018 16:05:00 +0000</pubDate>
<dc:creator>尜尜人物</dc:creator>
<og:description>一、从数据一致性谈起 一致性问题，“万恶之源”是数据冗余和分布并通过网络交互+网络异常是常态。 1、数据一致性的情形 主库、从库和缓存数据一致性，相同数据冗余，关系数据库，为保证关据库的高可用和高性能</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/littlecharacter/p/9341804.html</dc:identifier>
</item>
<item>
<title>IDEA中module之间相互引用，必须要install到本地的解决方案 - 李国威</title>
<link>http://www.cnblogs.com/somewhater/p/9515279.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/somewhater/p/9515279.html</guid>
<description>&lt;p&gt;CSDN昨晚打不开了，搞了好久也没弄明白，很多搜索引擎查到的方案都试过了，都有问题，我用的是idea2018-1旗舰版。&lt;/p&gt;
&lt;p&gt;这个问题现在依旧没有解决，但是我另一台电脑上有一个2016版本，装过了之后发现不必执行任何maven命令，也不会依赖本地库的jar包。&lt;/p&gt;
&lt;p&gt;希望能够解决搜索到这个文章的人的问题，因为我也弄了好久也没解决，换低版本就行了。&lt;/p&gt;
&lt;p&gt;神马ignore掉了啊，没有在pom中加项目依赖，很多方案我都试过了，相信大多数人的问题也都一样。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/778685/201808/778685-20180822000141680-435324104.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

</description>
<pubDate>Tue, 21 Aug 2018 16:04:00 +0000</pubDate>
<dc:creator>李国威</dc:creator>
<og:description>CSDN昨晚打不开了，搞了好久也没弄明白，很多搜索引擎查到的方案都试过了，都有问题，我用的是idea2018-1旗舰版。 这个问题现在依旧没有解决，但是我另一台电脑上有一个2016版本，装过了之后发现</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/somewhater/p/9515279.html</dc:identifier>
</item>
</channel>
</rss>