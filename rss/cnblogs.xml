<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>leetcode#42 Trapping rain water的五种解法详解 - logosG</title>
<link>http://www.cnblogs.com/logosG/p/7979690.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/logosG/p/7979690.html</guid>
<description>&lt;p&gt;这道题十分有意思，可以用很多方法做出来，每种方法的思想都值得让人细细体会。&lt;/p&gt;
&lt;p&gt;42. Trapping Rain Water&lt;br/&gt;Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it is able to trap after raining.&lt;/p&gt;
&lt;p&gt;For example,&lt;br/&gt;Given [0,1,0,2,1,0,1,3,2,1,2,1], return 6.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1274342/201712/1274342-20171204224518222-58048584.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; &lt;span&gt;Solution 1:&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;通过分别计算每一坐标i上有多少水，进而将其相加得到答案。&lt;/p&gt;
&lt;p&gt;问题是我们如何知道每一坐标i上有多少水呢？仔细思考，其实只有出现&lt;span&gt;“两高夹一矮”&lt;/span&gt;才可能会存到水，如下图所示。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1274342/201712/1274342-20171204224756722-1205856865.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;进而，我们可以想到：每一坐标i上存多少水是由 1.其自身高度 2.它左边的最高高度&lt;span&gt;left_most&lt;/span&gt; 3.它右边的最高高度&lt;span&gt;right_most&lt;/span&gt;三种因素决定的。&lt;/p&gt;
&lt;p&gt;当 min{ left_most, right_most} 小于或等于其自身高度时，它能存的水就是0，比如array[1]=1,其left_most= array[0]=0, 其right_most=array[7]=3, min{left_most, right_most}=left_most=0&amp;lt; height= array[1]=1，这也就是说坐标1 存不了水。&lt;/p&gt;
&lt;p&gt;当min{ left_most,right_most} 大于其自身高度时，这时这三者间出现了“两高夹一矮”的情况，故其能存水，而且其存水数= min{left_most,right_most} - height。&lt;/p&gt;
&lt;p&gt;我们分别来对一些坐标进行验证：&lt;/p&gt;
&lt;h4&gt;坐标1，存水数=0.//正确&lt;/h4&gt;
&lt;h4&gt;坐标2，leff_most=1,right_most=3，存水数=left_most-height=1-0=1.//正确&lt;/h4&gt;
&lt;h4&gt;坐标3，left_most=1,right_most=3,min{left_most,right_most}=1=height，存水数=0.//正确&lt;/h4&gt;
&lt;p&gt;读者可以对每个坐标进行验证，会发现以上结论皆是正确的。所以，现在我们的solution就出来了，我们只需要求出每个坐标对应的left_most和right_most，再把存水数相加，就是总的存水数了。&lt;/p&gt;
&lt;p&gt;所以，很朴素自然的一个想法就是，遍历一遍数组，对每个数组元素遍历左边一次求出left_most，遍历右边一次求出right_most。&lt;/p&gt;
&lt;p&gt;代码如下，&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;

&lt;p&gt;//29ms 6.36%&lt;br/&gt;//complexity: O(N^2)&lt;br/&gt;int trap(vector&amp;lt;int&amp;gt;&amp;amp; height)&lt;br/&gt;{&lt;br/&gt;int ans = 0;&lt;br/&gt;int size = height.size();&lt;br/&gt;for (int i = 1; i &amp;lt; size - 1; i++) {&lt;br/&gt;int max_left = 0, max_right = 0;&lt;br/&gt;for (int j = i; j &amp;gt;= 0; j--) { //Search the left part for max bar size&lt;br/&gt;max_left = max(max_left, height[j]);&lt;br/&gt;}&lt;br/&gt;for (int j = i; j &amp;lt; size; j++) { //Search the right part for max bar size&lt;br/&gt;max_right = max(max_right, height[j]);&lt;br/&gt;}&lt;br/&gt;ans += min(max_left, max_right) - height[i];&lt;br/&gt;}&lt;br/&gt;return ans;&lt;br/&gt;}&lt;/p&gt;
&lt;/div&gt;

&lt;h2&gt;Solution 2：&lt;/h2&gt;
&lt;p&gt;在solution 1里，我们已经知道只要求出left_most和right_most，就可以求出答案，那能不能&lt;span&gt;优化&lt;/span&gt;一下求这两个数的过程呢？当然是可以的，我们只需要左遍历一次数组，右遍历一次数组，即可得到left_most和right_most。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;Solution2: 上一种方法其实有优化的空间
通过两次for循环可分别求得left_most和right_most，第三次for循环即可求得sum，
complexity: O(n)
&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;int&lt;/span&gt; trap(vector&amp;lt;&lt;span&gt;int&lt;/span&gt;&amp;gt;&amp;amp;&lt;span&gt; height)
{
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(height == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; ans = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; size =&lt;span&gt; height.size();
    vector&lt;/span&gt;&amp;lt;&lt;span&gt;int&lt;/span&gt;&amp;gt;&lt;span&gt; left_max(size), right_max(size);
    left_max[&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;] = height[&lt;span&gt;0&lt;/span&gt;&lt;span&gt;];
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;1&lt;/span&gt;; i &amp;lt; size; i++&lt;span&gt;) {
        left_max[i] &lt;/span&gt;= max(height[i], left_max[i - &lt;span&gt;1&lt;/span&gt;&lt;span&gt;]);
    }
    right_max[size &lt;/span&gt;- &lt;span&gt;1&lt;/span&gt;] = height[size - &lt;span&gt;1&lt;/span&gt;&lt;span&gt;];
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = size - &lt;span&gt;2&lt;/span&gt;; i &amp;gt;= &lt;span&gt;0&lt;/span&gt;; i--&lt;span&gt;) {
        right_max[i] &lt;/span&gt;= max(height[i], right_max[i + &lt;span&gt;1&lt;/span&gt;&lt;span&gt;]);
    }
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;1&lt;/span&gt;; i &amp;lt; size - &lt;span&gt;1&lt;/span&gt;; i++&lt;span&gt;) {
        ans &lt;/span&gt;+= min(left_max[i], right_max[i]) -&lt;span&gt; height[i];
    }
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; ans;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Solution 3：&lt;/h2&gt;
&lt;p&gt;这里再介绍一种优化方法，双指针法，在数组首尾分别创建一个指针，两指针相见时结束循环。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;int&lt;/span&gt; trap(vector&amp;lt;&lt;span&gt;int&lt;/span&gt;&amp;gt;&amp;amp;&lt;span&gt; height)
{
    &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; left = &lt;span&gt;0&lt;/span&gt;, right = height.size() - &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; ans = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; left_max = &lt;span&gt;0&lt;/span&gt;, right_max = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;while&lt;/span&gt; (left &amp;lt;&lt;span&gt; right) {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (height[left] &amp;lt;&lt;span&gt; height[right]) {
            height[left] &lt;/span&gt;&amp;gt;= left_max ? (left_max = height[left]) : ans += (left_max -&lt;span&gt; height[left]);
            &lt;/span&gt;++&lt;span&gt;left;
        }
        &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
            height[right] &lt;/span&gt;&amp;gt;= right_max ? (right_max = height[right]) : ans += (right_max -&lt;span&gt; height[right]);
            &lt;/span&gt;--&lt;span&gt;right;
        }
    }
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; ans;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Solution 4：&lt;/h2&gt;
&lt;p&gt;既然可以&lt;span&gt;纵向&lt;/span&gt;的求存水数，那我们能不能一层一层的求存水数呢？&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1274342/201712/1274342-20171204231206863-1793005679.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这是第一层，当我们遇到一个空的，且不在边界，存水数+1，所以第一层我们在i=2,i=5 时分别+1.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1274342/201712/1274342-20171204231359831-1049419346.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;第二层，存水数+4，依次类推，最终可以求出答案。&lt;/p&gt;
&lt;p&gt;代码笔者就不给了，读者有兴趣的可以自己写来试试。&lt;/p&gt;

&lt;h2&gt;Soluton 5：&lt;/h2&gt;
&lt;p&gt;这是在leetcode中solution给出的一种很新颖的解法，利用了栈的结构，通过维护一个&lt;span&gt;非递增栈&lt;/span&gt;来得到答案。&lt;/p&gt;
&lt;p&gt;本质思想还是利用了要存水必须是&lt;span&gt;“两高夹一矮”&lt;/span&gt;这个特点，只不过这里是用非递增栈来实现。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1274342/201712/1274342-20171204232328784-992954239.png&quot; alt=&quot;&quot; width=&quot;729&quot; height=&quot;300&quot;/&gt;&lt;/p&gt;
&lt;p&gt;下面定义一些符号以便理解：&lt;/p&gt;
&lt;p&gt;stack[-1] 栈顶元素&lt;/p&gt;
&lt;p&gt;stack[-2] 栈顶的下面一个元素（即倒数第二个元素）&lt;/p&gt;
&lt;p&gt;solution4的整个算法是这么实现的：遍历数组，遇到一个元素时，将其与栈顶元素比较，如果其小于等于栈顶元素，直接压栈，将其放入栈中（为维护非递增栈的结构,不能将比栈顶元素大的元素压栈），&lt;/p&gt;
&lt;p&gt;若是其大于栈顶元素，此时一定形成了一个“两高夹一矮”局面，因为栈是非递增栈，所以 stack[-1]&amp;lt;stack[-2],又 current&amp;gt;stack[-1],所以是一个“两高夹一矮”局面，此时算完存水数后栈顶元素出栈，继续判断，&lt;/p&gt;
&lt;p&gt;递归处理即可。&lt;/p&gt;
&lt;p&gt;在上例中整个过程是这样的。&lt;/p&gt;
&lt;h4&gt;step0: 0不入栈&lt;/h4&gt;
&lt;h4&gt;step1: 1&amp;gt;0 array[1] 入栈 栈：[1]&lt;/h4&gt;
&lt;h4&gt;step2: 0&amp;lt;stack[-1]=1 入栈 栈：[1,0]&lt;/h4&gt;
&lt;h4&gt;step3: 2&amp;gt;stack[-1]=0 存水数+1，0出栈，2&amp;gt;stack[-1]=1, 此时stack内元素不足2，不足以形成“两高夹一矮”局面, 1出栈，2入栈 栈：[2]&lt;/h4&gt;
&lt;h4&gt;step4: 1&amp;lt;stack[-1]=2 1入栈 栈：[2,1]&lt;/h4&gt;
&lt;h4&gt;step5: 0&amp;lt;stack[-1]=1 0入栈 栈：[2,1,0]&lt;/h4&gt;
&lt;h4&gt;step6: 1&amp;gt;stack[-1]=0 存水数+1，0出栈 1=stack[-1] 1入栈 栈：[2,1,1] &lt;/h4&gt;
&lt;h4&gt;step7: 3&amp;gt;stack[-1]=1 存水数+0，1出栈 3&amp;gt;stack[-1]=1 存水数+3,1出栈 3&amp;gt;stack[-1]=2 存水数+0 2出栈 3入栈 栈：[3]&lt;/h4&gt;
&lt;h4&gt;step8: 2&amp;lt;stack[-1] 2入栈 栈：[3,2]&lt;/h4&gt;
&lt;h4&gt;step9: 1&amp;lt;stack[-1] 1入栈 栈：[3,2,1]&lt;/h4&gt;
&lt;h4&gt;step10: 2&amp;gt;stack[-1] 存水数+1 1出栈 2入栈 栈：[3,2,2]&lt;/h4&gt;
&lt;h4&gt;step 11:1&amp;lt;stack[-1] 入栈 栈：[3,2,2,1] &lt;/h4&gt;
&lt;h4&gt;done&lt;/h4&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;Solution4
Stack solution
这个solution利用了栈结构，通过维护一个非递增栈，一步一步算出ans
&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;

&lt;span&gt;int&lt;/span&gt; trap(vector&amp;lt;&lt;span&gt;int&lt;/span&gt;&amp;gt;&amp;amp;&lt;span&gt; height)
{
    &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; ans = &lt;span&gt;0&lt;/span&gt;, current = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
    stack&lt;/span&gt;&amp;lt;&lt;span&gt;int&lt;/span&gt;&amp;gt;&lt;span&gt; st;
    &lt;/span&gt;&lt;span&gt;while&lt;/span&gt; (current &amp;lt;&lt;span&gt; height.size()) {
        &lt;/span&gt;&lt;span&gt;while&lt;/span&gt; (!st.empty() &amp;amp;&amp;amp; height[current] &amp;gt;&lt;span&gt; height[st.top()]) {
            &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; top =&lt;span&gt; st.top();
            st.pop();
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (st.empty())
                &lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; distance = current - st.top() - &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; bounded_height = min(height[current], height[st.top()]) -&lt;span&gt; height[top];
            ans &lt;/span&gt;+= distance *&lt;span&gt; bounded_height;
        }
        st.push(current&lt;/span&gt;++&lt;span&gt;);
    }
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; ans;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

</description>
<pubDate>Mon, 04 Dec 2017 15:47:00 +0000</pubDate>
<dc:creator>logosG</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/logosG/p/7979690.html</dc:identifier>
</item>
<item>
<title>Go基础之--位操作中你所不知道的用法 - python修行路</title>
<link>http://www.cnblogs.com/zhaof/p/7979651.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/zhaof/p/7979651.html</guid>
<description>&lt;p&gt;之前一直忽略的就是所有语言中关于位操作，觉得用处并不多，可能用到也非常简单的用法，但是其实一直忽略的是它们的用处还是非常大的，下面先回顾一下位操作符的基础&lt;/p&gt;
&lt;h2 id=&quot;toc_1&quot;&gt;位操作符&lt;/h2&gt;
&lt;p&gt;与操作：&amp;amp;&lt;br/&gt;1 &amp;amp; 1 = 1&lt;br/&gt;1 &amp;amp; 0 = 0&lt;br/&gt;0 &amp;amp; 1 = 0&lt;br/&gt;0 &amp;amp; 0 = 0&lt;/p&gt;
&lt;p&gt;或操作：！&lt;br/&gt;1 | 1 = 1&lt;br/&gt;1 | 0 = 1&lt;br/&gt;0 | 1 = 1&lt;br/&gt;0 &amp;amp; 0 = 0&lt;/p&gt;
&lt;p&gt;异或：^&lt;br/&gt;1 ^ 1 = 0&lt;br/&gt;1 ^ 0 = 1&lt;br/&gt;0 ^ 1 = 1&lt;br/&gt;0 ^ 0 = 0&lt;/p&gt;
&lt;p&gt;左移：&amp;lt;&amp;lt;&lt;br/&gt;1 &amp;lt;&amp;lt; 10 = 1024&lt;br/&gt;1 &amp;lt;&amp;lt; 20 = 1M&lt;br/&gt;1 &amp;lt;&amp;lt; 30 = 1G&lt;/p&gt;
&lt;p&gt;右移：&amp;gt;&amp;gt;&lt;br/&gt;1024 &amp;gt;&amp;gt; 10 = 1&lt;br/&gt;1024 &amp;gt;&amp;gt;1 = 512&lt;br/&gt;1024 &amp;gt;&amp;gt;2 = 256&lt;/p&gt;

&lt;h2 id=&quot;toc_2&quot;&gt;关于上述知识的一个应用实例&lt;/h2&gt;
&lt;p&gt;可能这个例子在实际中用并不是特别严谨，但是也提供了我们写代码的一种思路&lt;/p&gt;
&lt;p&gt;这里拿微博或者qq用户的特权为例子：&lt;br/&gt;一个qq号可以用VIP会员，SVIP超级会员，蓝钻用户，黄钻用户，红钻用户....&lt;br/&gt;我们通常的想法可能是如果数据库中存储自己会给用户存这个字段表示这个用户开通了哪些特权&lt;br/&gt;我们在代码中的写法可能也是如下所示：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;package main
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;import (
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;     &quot;fmt&quot;
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;type users struct {
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;    name   string
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;    flag   uint8
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;    vip    bool
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;    svip   bool
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;    blue   bool
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;    red    bool
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;    yellow bool
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; 
&lt;span&gt;17&lt;/span&gt; &lt;span&gt;func setVip(user users) users {
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;     user.vip = &lt;span&gt;true&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt; &lt;span&gt;    return user
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; 
&lt;span&gt;22&lt;/span&gt; &lt;span&gt;func isVip(user users) {
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt;&lt;span&gt; user.vip {
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;         fmt.Println(&quot;user is vip&quot;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; &lt;span&gt;    } else {
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;         fmt.Println(&quot;user is not vip&quot;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; 
&lt;span&gt;30&lt;/span&gt; &lt;span&gt;func binaryTest() {
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; &lt;span&gt;    var user users
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;     user.name = &quot;test01&quot;
&lt;span&gt;33&lt;/span&gt;     user.vip = &lt;span&gt;true&lt;/span&gt;
&lt;span&gt;34&lt;/span&gt; &lt;span&gt;    isVip(user)
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt;     user.vip = &lt;span&gt;false&lt;/span&gt;
&lt;span&gt;36&lt;/span&gt; &lt;span&gt;    isVip(user)
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt; 
&lt;span&gt;39&lt;/span&gt; &lt;span&gt;func main() {
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt; &lt;span&gt;    binaryTest()
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt; 
&lt;span&gt;42&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这种实现方式也可以，但是明显我们需要为每个类型都做操作，并且如果以后又有更多的各种各样的会员和钻有需要添加新的，所以并不是最佳方法，下面我们通过位操作来实现上述的功能，代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;53&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;package main
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;import (
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;     &quot;fmt&quot;
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;type users struct {
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;    name string
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;    flag uint8
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; 
&lt;span&gt;12&lt;/span&gt; //&lt;span&gt; 这里通过位移的方式默认00000 从左边一次为vip,svip,blue,red,yellow
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;const (
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;     vip   = 1
&lt;span&gt;15&lt;/span&gt;     svip  = (1 &amp;lt;&amp;lt; 1&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;     blue  = (1 &amp;lt;&amp;lt; 2&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;     red   = (1 &amp;lt;&amp;lt; 3&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;     yello = (1 &amp;lt;&amp;lt; 4&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;)
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; 
&lt;span&gt;21&lt;/span&gt; //&lt;span&gt; setFlag 用于设置用户开通了哪些特权
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;func setFlag(user users, isSet bool, typeFlag uint8) users {
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; isSet == &lt;span&gt;true&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;         user.flag = user.flag |&lt;span&gt; typeFlag
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; &lt;span&gt;    } else {
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;         user.flag = user.flag ^&lt;span&gt; typeFlag
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; &lt;span&gt;    return user
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; 
&lt;span&gt;31&lt;/span&gt; //&lt;span&gt;isFlag 用于判断用户是否开通某项特权
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; &lt;span&gt;func isFlag(user users, typeFlag uint8) bool {
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt;     result := user.flag &amp;amp;&lt;span&gt; typeFlag
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt;     return result ==&lt;span&gt; typeFlag
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt; 
&lt;span&gt;37&lt;/span&gt; &lt;span&gt;func binaryTest() {
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt; &lt;span&gt;    var user users
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt;     user.name = &quot;coder&quot;
&lt;span&gt;40&lt;/span&gt;     user.flag = 0
&lt;span&gt;41&lt;/span&gt; 
&lt;span&gt;42&lt;/span&gt;     //&lt;span&gt;判断用户是否是vip
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt;     result :=&lt;span&gt; isFlag(user, vip)
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt;     fmt.Printf(&quot;user is Vip:%t\n&quot;&lt;span&gt;, result)
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt; 
&lt;span&gt;46&lt;/span&gt;     //&lt;span&gt;给用户开通vip,并看用户是否开通vip
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt;     user = setFlag(user, &lt;span&gt;true&lt;/span&gt;&lt;span&gt;, vip)
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt;     result =&lt;span&gt; isFlag(user, vip)
&lt;/span&gt;&lt;span&gt;49&lt;/span&gt;     fmt.Printf(&quot;user is Vip:%t\n&quot;&lt;span&gt;, result)
&lt;/span&gt;&lt;span&gt;50&lt;/span&gt; 
&lt;span&gt;51&lt;/span&gt;     //&lt;span&gt;取消用户的vip，并查看用户是否还是vip
&lt;/span&gt;&lt;span&gt;52&lt;/span&gt;     user = setFlag(user, &lt;span&gt;false&lt;/span&gt;&lt;span&gt;, vip)
&lt;/span&gt;&lt;span&gt;53&lt;/span&gt;     result =&lt;span&gt; isFlag(user, vip)
&lt;/span&gt;&lt;span&gt;54&lt;/span&gt;     fmt.Printf(&quot;user is Vip:%t\n&quot;&lt;span&gt;, result)
&lt;/span&gt;&lt;span&gt;55&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;56&lt;/span&gt; 
&lt;span&gt;57&lt;/span&gt; &lt;span&gt;func main() {
&lt;/span&gt;&lt;span&gt;58&lt;/span&gt; &lt;span&gt;    binaryTest()
&lt;/span&gt;&lt;span&gt;59&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上面代码就是一种位运算一种非常巧妙的用法，当新添加各种特权的时候只需要在最开始定义的常亮那里添加一行代码即可，就可以直接实现对这种特权的设置和取消，以及查看是否开通。&lt;/p&gt;
</description>
<pubDate>Mon, 04 Dec 2017 15:35:00 +0000</pubDate>
<dc:creator>python修行路</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/zhaof/p/7979651.html</dc:identifier>
</item>
<item>
<title>Mysql第一周 - 前程明亮</title>
<link>http://www.cnblogs.com/0zcl/p/7968099.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/0zcl/p/7968099.html</guid>
<description>&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;前言&lt;/span&gt;&lt;/strong&gt;：好久不见，我又来写博客拉。上个月只写了几篇django-rest-framework的，而且还是根据官网的英文写的。干货不多，内心还是有点羞耻的……&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;简单说下我11月去干嘛了。11月初美图给我发offer了，当时面试我也说了11月底可以去实习。感觉美图也是蛮有名气的嘛，就拿了这个offer了，现在我也是在厦门的美图公司实习，刚入职几天，正在疯狂打杂中。拿了offer后，内心那种不安全感，源于一个问题，“你行不行？”。面试时我当然自信地表现出I CAN DO IT咯，但有些东西得入职后才知道……所以我就去学django-rest-framework，官网还有一些没看完，真是垃圾……之后觉得我在MYSQL数据库这方面实在是没有什么底气，就去看MYSQL的官网，看了两天，看着看着，发现两个问题：&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;深不见底，很多东西我有听过的，但没用过。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;我记忆力不行，命令啥的看了就忘&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;span&gt;为了解决这两个问题，并且能更好地与面试官撕逼，我决定报一个班。这是我第一次报培训班，当时没啥钱，还是凑出来的，感谢投资我的人儿，爱你们。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1038183/201712/1038183-20171203233034976-455083502.png&quot; alt=&quot;&quot; width=&quot;734&quot; height=&quot;401&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;20号左右我就回家了，回家干嘛呢？拔智齿!! 我拔了一颗，还有三颗没拔，在家休养了一个星期。我流了很多血，很伤身体，在此和各位大哥女神们提个醒，以后有小孩了，10几岁就得隔几个月定期带小孩去看牙医。28号，我从揭阳坐高铁到厦门，不争气地说，这是我第一次出省。扯蛋的话稍后再说，这篇博客主要写MYSQL的基础知识，毕竟老子花了钱的，明天又要打杂了，现在周日晚上不写，怕是又没机会咯。&lt;/span&gt;&lt;/p&gt;

&lt;h3&gt;&lt;span&gt;一、术语&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;1、数据库管理系统dbms----database management system&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;2、关系型数据管理系统rdbms----relational dbms&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;3、实例instance&lt;/span&gt;&lt;br/&gt;&lt;span&gt;数据库管理软件安装之后在服务器上启动起来就称为启动了一个实例，通常一个服务器上只启动一个数据库实例，但也有启动多个实例的，一个实例可以包含多个数据库。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;4、数据库对象database object&lt;/span&gt;&lt;br/&gt;&lt;span&gt;数据库中创建的用来存储，操作数据的对象，比如表，字段，索引，存储过程等&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;备份时要把所有数据库对象备份出来，而不是简单地备份数据库表。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;5、存储过程sp----stored procedure&lt;/span&gt;&lt;br/&gt;&lt;span&gt;在数据库内部创建的具有一系列数据处理逻辑的方法&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;6、触发器trigger&lt;/span&gt;&lt;br/&gt;&lt;span&gt;当数据库表发生修改操作时自动触发某些数据处理的方法。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;如：触发修改用户最近一次登陆时间&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;7、主键primary key&lt;/span&gt;&lt;br/&gt;&lt;span&gt;数据表中定义的用来唯一确定表中各行数据的一个或几个字段&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;8、唯一键unique（可创建多个）&lt;/span&gt;&lt;br/&gt;&lt;span&gt;Primary key 和unique index都可以作为约束表中这一列或几列的数据不重复&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;9、外键foreign key&lt;/span&gt;&lt;br/&gt;&lt;span&gt;当数据表中的某一个或几个字段的值来源于某个父表时，则可以创建两个表之间的数据映射关系。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;10、性能performance 调优tuning&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;11、备份backup&lt;/span&gt;&lt;br/&gt;&lt;span&gt;将数据库中所有数据和对象或者指定的数据和对象导出成文件形式存储&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;12、恢复restore&lt;/span&gt;&lt;br/&gt;&lt;span&gt;利用之前的备份文件将数据库中的指定对象和库还原到备份文件中的状态&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;13、授权grant&lt;/span&gt;&lt;br/&gt;&lt;span&gt;授予某个数据库用户某个权限的动作&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;14、回收revoke&lt;/span&gt;&lt;br/&gt;&lt;span&gt;将某个数据库用户的某个权限回收的动作&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;15、权限privilege&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;16、数据库架构database architecture&lt;/span&gt;&lt;br/&gt;&lt;span&gt;指数据库设计工作中对数据库一个或多个实例的部署，之间的数据协同，高可用性，并发性等特性所做的统一规划。&lt;/span&gt;&lt;/p&gt;

&lt;h3&gt;&lt;span&gt;二、安装MYSQL&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;安装数据库是很重要的，我之前10月30号写了一篇&lt;a id=&quot;ArchiveMonth1_Days_ctl00_Entries_TitleUrl_0&quot; class=&quot;entrylistItemTitle&quot; href=&quot;http://www.cnblogs.com/0zcl/p/7752306.html&quot;&gt;Linux上安装二进制文件MySQL详解&lt;/a&gt;。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;如果你的系统是windows，可以参考&lt;a href=&quot;http://blog.csdn.net/qq_35134075/article/details/78361124&quot; target=&quot;_blank&quot;&gt;MySQL5.7.20安装&lt;/a&gt;，生成随机密码登陆请看&lt;a href=&quot;http://blog.csdn.net/wxyfennie/article/details/50656457&quot; target=&quot;_blank&quot;&gt;http://blog.csdn.net/wxyfennie/article/details/50656457&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;安装这块不多说了，看我之前的博客，建议还是尝试用二进制安装下mysql，这样会显得自己更牛逼。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1038183/201712/1038183-20171204001044319-396038874.png&quot; alt=&quot;&quot; width=&quot;580&quot; height=&quot;316&quot;/&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;root@iz2zeezp920l8adg80sf0pz mysql-files&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;# ls
auto.cnf        ib_logfile0  iz2zeezp920l8adg80sf0pz.err  sys
chengliang      ib_logfile1  iz2zeezp920l8adg80sf0pz.pid  test
ib_buffer_pool  ib_logfile2  mysql
ibdata1         ibtmp1       performance_schema
&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;root@iz2zeezp920l8adg80sf0pz mysql-files&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;#&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;Mysql-files目录为初始化的数据文件存放路径，为每一个数据库创建了一个文件夹&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Lbdata1和ib_logfile0/1为三个专为innodb存放数据和日志的共享文件&lt;/span&gt;&lt;/p&gt;
&lt;table border=&quot;0&quot;&gt;&lt;tbody readability=&quot;14&quot;&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;basedir=/usr/local/mysql&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt;代表Mysql安装路径&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td&gt;&lt;span&gt;datadir=/usr/local/mysql/mysql-files&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt;代表Mysql的数据文件路径&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td&gt;&lt;span&gt;log-error=/usr/local/mysql/mysql-files/M00006.err&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt;记录Mysql启动日志和运行错误日志&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;&lt;span&gt;character-set-server&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt;指定Mysql的字符集，默认是latin1&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;&lt;span&gt;collation-server&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt;指定Mysql的排序规则(是否容许A=a)，默认是latin1_swedish_ci&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;&lt;span&gt;default-storage-engine&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt;指定Mysql的存储引擎，默认是innoDB&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;&lt;span&gt;default-time-zone&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt;指定时区，如果没指定则和系统默认时区一致&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td&gt;&lt;span&gt;open-files-limit(默认5000)&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt;指定Mysqld运行过程中可以打开的文件数，避免出现&quot;Too many open files&quot;报错&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td&gt;&lt;span&gt; pid-file=/usr/local/mysql/data/M00006.pid&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt;指定Mysqld进程对应的程序ID文件，默认在数据文件目录里&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;&lt;span&gt;skip-grant-tables&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt;指定避开Mysql内部的权限表启动服务&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;&lt;span&gt;tmpdir&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt;指定临时表文件的存放路径&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1038183/201712/1038183-20171204220202316-932514027.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;h3&gt;&lt;span&gt;三、远程连接阿里云数据库&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;因为我的服务器在阿里云，我想通过CRT或者xshell啥的，直接在我本地PC连接上数据库就好。这需求很简单吧，也不过分呀。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1038183/201712/1038183-20171203235611132-723352330.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;看上面的sql语名，我创建了一个chengliang用户，但是通过CRT或者mysql客户端就是登不上数据库，用root用户可以。这我就懵比了。于是上网搜些资料，按以下进行排查：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;1、已经给数据库添加权限了，远程主机按理是可以连接上的呀&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;mysql&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;select&lt;/span&gt; host,&lt;span&gt;user&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; &lt;span&gt;user&lt;/span&gt;&lt;span&gt;;                 
&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;---------+---------------+&lt;/span&gt;
&lt;span&gt;|&lt;/span&gt; host      &lt;span&gt;|&lt;/span&gt; &lt;span&gt;user&lt;/span&gt;          &lt;span&gt;|&lt;/span&gt;
&lt;span&gt;+&lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;---------+---------------+&lt;/span&gt;
&lt;span&gt;|&lt;/span&gt; &lt;span&gt;%&lt;/span&gt;         &lt;span&gt;|&lt;/span&gt; chengliang    &lt;span&gt;|&lt;/span&gt;
&lt;span&gt;|&lt;/span&gt; localhost &lt;span&gt;|&lt;/span&gt; mysql.session &lt;span&gt;|&lt;/span&gt;
&lt;span&gt;|&lt;/span&gt; localhost &lt;span&gt;|&lt;/span&gt; mysql.sys     &lt;span&gt;|&lt;/span&gt;
&lt;span&gt;|&lt;/span&gt; localhost &lt;span&gt;|&lt;/span&gt; root          &lt;span&gt;|&lt;/span&gt;
&lt;span&gt;+&lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;---------+---------------+&lt;/span&gt;
&lt;span&gt;4&lt;/span&gt; rows &lt;span&gt;in&lt;/span&gt; &lt;span&gt;set&lt;/span&gt; (&lt;span&gt;0.00&lt;/span&gt;&lt;span&gt; sec)

mysql&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; FLUSH &lt;span&gt;PRIVILEGES&lt;/span&gt;&lt;span&gt;; 
Query OK, &lt;/span&gt;&lt;span&gt;0&lt;/span&gt; rows affected (&lt;span&gt;0.00&lt;/span&gt;&lt;span&gt; sec)

mysql&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;2、难道是端口没开？&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;root@iz2zeezp920l8adg80sf0pz mysql&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;# netstat &lt;span&gt;-&lt;/span&gt;ntlp &lt;span&gt;|&lt;/span&gt;&lt;span&gt; grep mysql
tcp6       &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;      &lt;span&gt;0&lt;/span&gt; :::&lt;span&gt;3306&lt;/span&gt;                 :::&lt;span&gt;*&lt;/span&gt;                    LISTEN      &lt;span&gt;27909&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;mysqld        
&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;root@iz2zeezp920l8adg80sf0pz mysql&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;#&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;3306端口明明有开呀!!&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;3、用telnet试下&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;root@iz2zeezp920l8adg80sf0pz mysql&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;# telnet &lt;span&gt;101.200&lt;/span&gt;.&lt;span&gt;48.238&lt;/span&gt; &lt;span&gt;22&lt;/span&gt;&lt;span&gt;
Trying &lt;/span&gt;&lt;span&gt;101.200&lt;/span&gt;.&lt;span&gt;48.238&lt;/span&gt;&lt;span&gt;...
Connected &lt;/span&gt;&lt;span&gt;to&lt;/span&gt; &lt;span&gt;101.200&lt;/span&gt;.&lt;span&gt;48.238&lt;/span&gt;&lt;span&gt;.
&lt;/span&gt;&lt;span&gt;Escape&lt;/span&gt; &lt;span&gt;character&lt;/span&gt; &lt;span&gt;is&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;^]&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;.
SSH&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;2.0&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;OpenSSH_6.&lt;span&gt;6.1&lt;/span&gt;&lt;span&gt;

Protocol mismatch.
Connection closed &lt;/span&gt;&lt;span&gt;by&lt;/span&gt; &lt;span&gt;foreign&lt;/span&gt;&lt;span&gt; host.
&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;root@iz2zeezp920l8adg80sf0pz mysql&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;# telnet &lt;span&gt;101.200&lt;/span&gt;.&lt;span&gt;48.238&lt;/span&gt; &lt;span&gt;3306&lt;/span&gt;&lt;span&gt;
Trying &lt;/span&gt;&lt;span&gt;101.200&lt;/span&gt;.&lt;span&gt;48.238&lt;/span&gt;&lt;span&gt;…

&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;root@iz2zeezp920l8adg80sf0pz mysql&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;#&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;天呐，3306端口telnet不通!! 这是为啥？明明通过netstat -ntlp查看已经开通了3306了呀!!莫非是阿里云限制了端口的访问？&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;上网查下资料先：&lt;a href=&quot;http://www.cnblogs.com/hyyq/p/6884548.html&quot; target=&quot;_blank&quot;&gt;解决阿里云服务器3306端口无法访问的问题（windows server 2008r2）&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;4、根据别人博客写的，我下载了一个端口扫描工具，扫下我的服务器。感觉我的阿里云服务器可以只开通22号端口？&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1038183/201712/1038183-20171204000527444-1802625777.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;果然，3306没开通呀！此时我心里已经默默长草了。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;span&gt;5、在阿里云的云服务器管理控制台添加安全组规则（端口3306）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1038183/201712/1038183-20171204000721007-120307105.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;顺便吐槽下阿里云，上面这个页面我找了超久，用户体验太差了吧&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;root@iz2zeezp920l8adg80sf0pz mysql&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;# telnet &lt;span&gt;101.200&lt;/span&gt;.&lt;span&gt;48.238&lt;/span&gt; &lt;span&gt;3306&lt;/span&gt;&lt;span&gt;
Trying &lt;/span&gt;&lt;span&gt;101.200&lt;/span&gt;.&lt;span&gt;48.238&lt;/span&gt;&lt;span&gt;...
Connected &lt;/span&gt;&lt;span&gt;to&lt;/span&gt; &lt;span&gt;101.200&lt;/span&gt;.&lt;span&gt;48.238&lt;/span&gt;&lt;span&gt;.
&lt;/span&gt;&lt;span&gt;Escape&lt;/span&gt; &lt;span&gt;character&lt;/span&gt; &lt;span&gt;is&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;^]&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;.
J
&lt;/span&gt;&lt;span&gt;5.7&lt;/span&gt;.&lt;span&gt;20&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;pK,_TG=!tb0:!KQc{7ymysql_native_password

!#08S01Got packets out of orderConnection closed by foreign host.
[root@iz2zeezp920l8adg80sf0pz mysql]#&lt;/span&gt; &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;连接成功！Mysql客户端也可以连接上了。&lt;/span&gt;&lt;/p&gt;

&lt;h3&gt;&lt;span&gt;四、权限系统介绍&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1038183/201712/1038183-20171204220325206-1679775246.png&quot; alt=&quot;&quot; width=&quot;648&quot; height=&quot;325&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1038183/201712/1038183-20171204220407003-561081904.png&quot; alt=&quot;&quot; width=&quot;649&quot; height=&quot;176&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;1、查看mysql实例默认root用户的权限（来自localhost）&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;mysql&lt;span&gt;&amp;gt;&lt;/span&gt; show grants &lt;span&gt;for&lt;/span&gt; root&lt;span&gt;@localhost&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;-------------------------------------------------------------------+&lt;/span&gt;
&lt;span&gt;|&lt;/span&gt; Grants &lt;span&gt;for&lt;/span&gt; root&lt;span&gt;@localhost&lt;/span&gt;                                           &lt;span&gt;|&lt;/span&gt;
&lt;span&gt;+&lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;-------------------------------------------------------------------+&lt;/span&gt;
&lt;span&gt;|&lt;/span&gt; &lt;span&gt;GRANT&lt;/span&gt; &lt;span&gt;ALL&lt;/span&gt; &lt;span&gt;PRIVILEGES&lt;/span&gt; &lt;span&gt;ON&lt;/span&gt; &lt;span&gt;*&lt;/span&gt;.&lt;span&gt;*&lt;/span&gt; &lt;span&gt;TO&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;root&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;@&lt;span&gt;'&lt;/span&gt;&lt;span&gt;localhost&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; &lt;span&gt;WITH&lt;/span&gt; &lt;span&gt;GRANT&lt;/span&gt; &lt;span&gt;OPTION&lt;/span&gt; &lt;span&gt;|&lt;/span&gt;
&lt;span&gt;|&lt;/span&gt; &lt;span&gt;GRANT&lt;/span&gt; PROXY &lt;span&gt;ON&lt;/span&gt; &lt;span&gt;''&lt;/span&gt;@&lt;span&gt;''&lt;/span&gt; &lt;span&gt;TO&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;root&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;@&lt;span&gt;'&lt;/span&gt;&lt;span&gt;localhost&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; &lt;span&gt;WITH&lt;/span&gt; &lt;span&gt;GRANT&lt;/span&gt; &lt;span&gt;OPTION&lt;/span&gt;        &lt;span&gt;|&lt;/span&gt;
&lt;span&gt;+&lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;-----------------------------------------&lt;/span&gt;&lt;span&gt;
--&lt;/span&gt;&lt;span&gt;------------------------+&lt;/span&gt;
&lt;span&gt;2&lt;/span&gt; rows &lt;span&gt;in&lt;/span&gt; &lt;span&gt;set&lt;/span&gt; (&lt;span&gt;0.00&lt;/span&gt; sec)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;2、root用户已经有全局权限，故不用在db里面再写入权限了。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;mysql&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;select&lt;/span&gt; &lt;span&gt;*&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; db &lt;span&gt;where&lt;/span&gt; &lt;span&gt;user&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;root&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; &lt;span&gt;and&lt;/span&gt; host&lt;span&gt;=&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;localhost&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;     # 数据库权限
Empty &lt;/span&gt;&lt;span&gt;set&lt;/span&gt; (&lt;span&gt;0.00&lt;/span&gt;&lt;span&gt; sec)

mysql&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt; 
mysql&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;select&lt;/span&gt; &lt;span&gt;*&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; tables_priv &lt;span&gt;where&lt;/span&gt; &lt;span&gt;user&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;root&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; &lt;span&gt;and&lt;/span&gt; host&lt;span&gt;=&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;localhost&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;　#表权限
Empty &lt;/span&gt;&lt;span&gt;set&lt;/span&gt; (&lt;span&gt;0.00&lt;/span&gt;&lt;span&gt; sec)

mysql&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;select&lt;/span&gt; &lt;span&gt;*&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; procs_priv &lt;span&gt;where&lt;/span&gt; &lt;span&gt;user&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;root&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; &lt;span&gt;and&lt;/span&gt; host&lt;span&gt;=&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;localhost&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;      #存储过程权限
Empty &lt;/span&gt;&lt;span&gt;set&lt;/span&gt; (&lt;span&gt;0.00&lt;/span&gt; sec)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/1038183/201712/1038183-20171204221509613-687270953.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1038183/201712/1038183-20171204221609284-1157884191.png&quot; alt=&quot;&quot; width=&quot;608&quot; height=&quot;310&quot;/&gt;&lt;/p&gt;

&lt;p&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/1038183/201712/1038183-20171204221722503-2083586457.png&quot; alt=&quot;&quot; width=&quot;642&quot; height=&quot;274&quot;/&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;mysql&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;create&lt;/span&gt; &lt;span&gt;user&lt;/span&gt; zcl_test&lt;span&gt;@localhost&lt;/span&gt;&lt;span&gt;;
Query OK, &lt;/span&gt;&lt;span&gt;0&lt;/span&gt; rows affected (&lt;span&gt;0.00&lt;/span&gt;&lt;span&gt; sec)

mysql&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;create&lt;/span&gt; &lt;span&gt;user&lt;/span&gt; zcl_test&lt;span&gt;@localhost&lt;/span&gt;&lt;span&gt;;
ERROR &lt;/span&gt;&lt;span&gt;1396&lt;/span&gt; (HY000): Operation &lt;span&gt;CREATE&lt;/span&gt; &lt;span&gt;USER&lt;/span&gt; failed &lt;span&gt;for&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;zcl_test&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;@&lt;span&gt;'&lt;/span&gt;&lt;span&gt;localhost&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
mysql&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt; 
mysql&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;create&lt;/span&gt; &lt;span&gt;user&lt;/span&gt; Zcl_test&lt;span&gt;@localhost&lt;/span&gt;&lt;span&gt;; 
Query OK, &lt;/span&gt;&lt;span&gt;0&lt;/span&gt; rows affected (&lt;span&gt;0.00&lt;/span&gt;&lt;span&gt; sec)

mysql&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt; 
mysql&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;create&lt;/span&gt; &lt;span&gt;user&lt;/span&gt; Zcl_test&lt;span&gt;@Localhost&lt;/span&gt;&lt;span&gt;; 
ERROR &lt;/span&gt;&lt;span&gt;1396&lt;/span&gt; (HY000): Operation &lt;span&gt;CREATE&lt;/span&gt; &lt;span&gt;USER&lt;/span&gt; failed &lt;span&gt;for&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Zcl_test&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;@&lt;span&gt;'&lt;/span&gt;&lt;span&gt;localhost&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
mysql&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;&lt;span&gt;五、用户授权&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1038183/201712/1038183-20171204222155519-1696843414.png&quot; alt=&quot;&quot; width=&quot;644&quot; height=&quot;290&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;1、创建新用户&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;mysql&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;create&lt;/span&gt; &lt;span&gt;user&lt;/span&gt; cdq&lt;span&gt;@localhost&lt;/span&gt; identified &lt;span&gt;by&lt;/span&gt;&lt;span&gt; &quot;mysql&quot;; 
Query OK, &lt;/span&gt;&lt;span&gt;0&lt;/span&gt; rows affected (&lt;span&gt;0.00&lt;/span&gt;&lt;span&gt; sec)

mysql&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;2、cdq用户可以登陆&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;root@iz2zeezp920l8adg80sf0pz ~&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;# mysql &lt;span&gt;-&lt;/span&gt;u cdq &lt;span&gt;-&lt;/span&gt;&lt;span&gt;p
Enter password: 
Welcome &lt;/span&gt;&lt;span&gt;to&lt;/span&gt; the MySQL monitor.  Commands &lt;span&gt;end&lt;/span&gt; &lt;span&gt;with&lt;/span&gt; ; &lt;span&gt;or&lt;/span&gt;&lt;span&gt; \g.

mysql&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;use&lt;/span&gt;&lt;span&gt; mysql;　# 没有权限
ERROR &lt;/span&gt;&lt;span&gt;1044&lt;/span&gt; (&lt;span&gt;42000&lt;/span&gt;): Access denied &lt;span&gt;for&lt;/span&gt; &lt;span&gt;user&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;cdq&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;@&lt;span&gt;'&lt;/span&gt;&lt;span&gt;localhost&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; &lt;span&gt;to&lt;/span&gt; &lt;span&gt;database&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;mysql&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
mysql&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt; 
mysql&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; show grants &lt;span&gt;for&lt;/span&gt; cdq&lt;span&gt;@localhost&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;---------------------------------------+&lt;/span&gt;
&lt;span&gt;|&lt;/span&gt; Grants &lt;span&gt;for&lt;/span&gt; cdq&lt;span&gt;@localhost&lt;/span&gt;                &lt;span&gt;|&lt;/span&gt;
&lt;span&gt;+&lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;---------------------------------------+&lt;/span&gt;
&lt;span&gt;|&lt;/span&gt; &lt;span&gt;GRANT&lt;/span&gt; USAGE &lt;span&gt;ON&lt;/span&gt; &lt;span&gt;*&lt;/span&gt;.&lt;span&gt;*&lt;/span&gt; &lt;span&gt;TO&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;cdq&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;@&lt;span&gt;'&lt;/span&gt;&lt;span&gt;localhost&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; &lt;span&gt;|&lt;/span&gt;
&lt;span&gt;+&lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;---------------------------------------+&lt;/span&gt;
&lt;span&gt;1&lt;/span&gt; row &lt;span&gt;in&lt;/span&gt; &lt;span&gt;set&lt;/span&gt; (&lt;span&gt;0.00&lt;/span&gt;&lt;span&gt; sec)

mysql&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt; show databases;
&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;------------------+&lt;/span&gt;
&lt;span&gt;|&lt;/span&gt; &lt;span&gt;Database&lt;/span&gt;           &lt;span&gt;|&lt;/span&gt;
&lt;span&gt;+&lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;------------------+&lt;/span&gt;
&lt;span&gt;|&lt;/span&gt; information_schema &lt;span&gt;|&lt;/span&gt;
&lt;span&gt;+&lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;------------------+&lt;/span&gt;
&lt;span&gt;1&lt;/span&gt; row &lt;span&gt;in&lt;/span&gt; &lt;span&gt;set&lt;/span&gt; (&lt;span&gt;0.00&lt;/span&gt; sec)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;Usage权限是创建一个用户之后的默认权限，其本身代表连接登录权限&lt;/span&gt;。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;3、给cdq用户添加权限：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;mysql&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;grant&lt;/span&gt; &lt;span&gt;select&lt;/span&gt; &lt;span&gt;on&lt;/span&gt; test.&lt;span&gt;*&lt;/span&gt; &lt;span&gt;to&lt;/span&gt; cdq&lt;span&gt;@localhost&lt;/span&gt;&lt;span&gt;;
Query OK, &lt;/span&gt;&lt;span&gt;0&lt;/span&gt; rows affected (&lt;span&gt;0.00&lt;/span&gt;&lt;span&gt; sec)


mysql&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; show grants &lt;span&gt;for&lt;/span&gt; cdq&lt;span&gt;@localhost&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;---------------------------------------------+&lt;/span&gt;
&lt;span&gt;|&lt;/span&gt; Grants &lt;span&gt;for&lt;/span&gt; cdq&lt;span&gt;@localhost&lt;/span&gt;                      &lt;span&gt;|&lt;/span&gt;
&lt;span&gt;+&lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;---------------------------------------------+&lt;/span&gt;
&lt;span&gt;|&lt;/span&gt; &lt;span&gt;GRANT&lt;/span&gt; USAGE &lt;span&gt;ON&lt;/span&gt; &lt;span&gt;*&lt;/span&gt;.&lt;span&gt;*&lt;/span&gt; &lt;span&gt;TO&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;cdq&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;@&lt;span&gt;'&lt;/span&gt;&lt;span&gt;localhost&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;       &lt;span&gt;|&lt;/span&gt;
&lt;span&gt;|&lt;/span&gt; &lt;span&gt;GRANT&lt;/span&gt; &lt;span&gt;SELECT&lt;/span&gt; &lt;span&gt;ON&lt;/span&gt; `test`.&lt;span&gt;*&lt;/span&gt; &lt;span&gt;TO&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;cdq&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;@&lt;span&gt;'&lt;/span&gt;&lt;span&gt;localhost&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; &lt;span&gt;|&lt;/span&gt;
&lt;span&gt;+&lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;---------------------------------------------+&lt;/span&gt;
&lt;span&gt;2&lt;/span&gt; rows &lt;span&gt;in&lt;/span&gt; &lt;span&gt;set&lt;/span&gt; (&lt;span&gt;0.00&lt;/span&gt;&lt;span&gt; sec)

mysql&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;use&lt;/span&gt;&lt;span&gt; test;
&lt;/span&gt;&lt;span&gt;Database&lt;/span&gt;&lt;span&gt; changed
mysql&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt; show tables;
&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;--------------+&lt;/span&gt;
&lt;span&gt;|&lt;/span&gt; Tables_in_test &lt;span&gt;|&lt;/span&gt;
&lt;span&gt;+&lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;--------------+&lt;/span&gt;
&lt;span&gt;|&lt;/span&gt; animals        &lt;span&gt;|&lt;/span&gt;
&lt;span&gt;|&lt;/span&gt; person         &lt;span&gt;|&lt;/span&gt;
&lt;span&gt;|&lt;/span&gt; shirt          &lt;span&gt;|&lt;/span&gt;
&lt;span&gt;|&lt;/span&gt; shop           &lt;span&gt;|&lt;/span&gt;
&lt;span&gt;|&lt;/span&gt; t1             &lt;span&gt;|&lt;/span&gt;
&lt;span&gt;+&lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;--------------+&lt;/span&gt;
&lt;span&gt;5&lt;/span&gt; rows &lt;span&gt;in&lt;/span&gt; &lt;span&gt;set&lt;/span&gt; (&lt;span&gt;0.00&lt;/span&gt;&lt;span&gt; sec)

mysql&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;select&lt;/span&gt; &lt;span&gt;*&lt;/span&gt; &lt;span&gt;from&lt;/span&gt;&lt;span&gt; animals;　# 有select权限
&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;--+---------+&lt;/span&gt;
&lt;span&gt;|&lt;/span&gt; id &lt;span&gt;|&lt;/span&gt; name    &lt;span&gt;|&lt;/span&gt;
&lt;span&gt;+&lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;--+---------+&lt;/span&gt;
&lt;span&gt;|&lt;/span&gt;  &lt;span&gt;1&lt;/span&gt; &lt;span&gt;|&lt;/span&gt; dog     &lt;span&gt;|&lt;/span&gt;
&lt;span&gt;|&lt;/span&gt;  &lt;span&gt;2&lt;/span&gt; &lt;span&gt;|&lt;/span&gt; cat     &lt;span&gt;|&lt;/span&gt;
&lt;span&gt;|&lt;/span&gt;  &lt;span&gt;3&lt;/span&gt; &lt;span&gt;|&lt;/span&gt; penguin &lt;span&gt;|&lt;/span&gt;
&lt;span&gt;|&lt;/span&gt;  &lt;span&gt;4&lt;/span&gt; &lt;span&gt;|&lt;/span&gt; lax     &lt;span&gt;|&lt;/span&gt;
&lt;span&gt;|&lt;/span&gt;  &lt;span&gt;5&lt;/span&gt; &lt;span&gt;|&lt;/span&gt; whale   &lt;span&gt;|&lt;/span&gt;
&lt;span&gt;|&lt;/span&gt;  &lt;span&gt;6&lt;/span&gt; &lt;span&gt;|&lt;/span&gt; ostrich &lt;span&gt;|&lt;/span&gt;
&lt;span&gt;+&lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;--+---------+&lt;/span&gt;
&lt;span&gt;6&lt;/span&gt; rows &lt;span&gt;in&lt;/span&gt; &lt;span&gt;set&lt;/span&gt; (&lt;span&gt;0.01&lt;/span&gt; sec)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt; 没有insert权限，同理，需要添加insert权限：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;mysql&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;insert&lt;/span&gt; &lt;span&gt;into&lt;/span&gt; animals &lt;span&gt;values&lt;/span&gt;(&lt;span&gt;7&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;bird&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
ERROR &lt;/span&gt;&lt;span&gt;1142&lt;/span&gt; (&lt;span&gt;42000&lt;/span&gt;): &lt;span&gt;INSERT&lt;/span&gt; command denied &lt;span&gt;to&lt;/span&gt; &lt;span&gt;user&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;cdq&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;@&lt;span&gt;'&lt;/span&gt;&lt;span&gt;localhost&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; &lt;span&gt;for&lt;/span&gt; &lt;span&gt;table&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;animals&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
mysql&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;4、也可以用更改权限表的方式，来添加权限：（但一般不用）&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;mysql&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;update&lt;/span&gt; mysql.db &lt;span&gt;set&lt;/span&gt; Insert_priv&lt;span&gt;=&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Y&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; &lt;span&gt;where&lt;/span&gt; &lt;span&gt;user&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;cdq&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; &lt;span&gt;and&lt;/span&gt; host&lt;span&gt;=&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;localhost&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
Query OK, &lt;/span&gt;&lt;span&gt;1&lt;/span&gt; row affected (&lt;span&gt;0.00&lt;/span&gt;&lt;span&gt; sec)
Rows matched: &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;  Changed: &lt;span&gt;1&lt;/span&gt;  Warnings: &lt;span&gt;0&lt;/span&gt;&lt;span&gt;

mysql&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;  &lt;span&gt;select&lt;/span&gt; &lt;span&gt;*&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; mysql.db &lt;span&gt;where&lt;/span&gt; &lt;span&gt;user&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;cdq&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; &lt;span&gt;and&lt;/span&gt; host&lt;span&gt;=&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;localhost&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;            
&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;---------+------+------+-------------+-------------+-------------+-------------+-------------+-----------+------------+-----------------+------------+------------+-----------------------+------------------+------------------+----------------+---------------------+--------------------+--------------+------------+--------------+&lt;/span&gt;
&lt;span&gt;|&lt;/span&gt; Host      &lt;span&gt;|&lt;/span&gt; Db   &lt;span&gt;|&lt;/span&gt; &lt;span&gt;User&lt;/span&gt; &lt;span&gt;|&lt;/span&gt; Select_priv &lt;span&gt;|&lt;/span&gt; Insert_priv &lt;span&gt;|&lt;/span&gt; Update_priv &lt;span&gt;|&lt;/span&gt; Delete_priv &lt;span&gt;|&lt;/span&gt; Create_priv &lt;span&gt;|&lt;/span&gt; Drop_priv &lt;span&gt;|&lt;/span&gt; Grant_priv &lt;span&gt;|&lt;/span&gt; References_priv &lt;span&gt;|&lt;/span&gt; Index_priv &lt;span&gt;|&lt;/span&gt; Alter_priv &lt;span&gt;|&lt;/span&gt; Create_tmp_table_priv &lt;span&gt;|&lt;/span&gt; Lock_tables_priv &lt;span&gt;|&lt;/span&gt; Create_view_priv &lt;span&gt;|&lt;/span&gt; Show_view_priv &lt;span&gt;|&lt;/span&gt; Create_routine_priv &lt;span&gt;|&lt;/span&gt; Alter_routine_priv &lt;span&gt;|&lt;/span&gt; Execute_priv &lt;span&gt;|&lt;/span&gt; Event_priv &lt;span&gt;|&lt;/span&gt; Trigger_priv &lt;span&gt;|&lt;/span&gt;
&lt;span&gt;+&lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;---------+------+------+-------------+-------------+-------------+-------------+-------------+-----------+------------+-----------------+------------+------------+-----------------------+------------------+------------------+----------------+---------------------+--------------------+--------------+------------+--------------+&lt;/span&gt;
&lt;span&gt;|&lt;/span&gt; localhost &lt;span&gt;|&lt;/span&gt; test &lt;span&gt;|&lt;/span&gt; cdq  &lt;span&gt;|&lt;/span&gt; Y           &lt;span&gt;|&lt;/span&gt; Y           &lt;span&gt;|&lt;/span&gt; N           &lt;span&gt;|&lt;/span&gt; N           &lt;span&gt;|&lt;/span&gt; N           &lt;span&gt;|&lt;/span&gt; N         &lt;span&gt;|&lt;/span&gt; N          &lt;span&gt;|&lt;/span&gt; N               &lt;span&gt;|&lt;/span&gt; N          &lt;span&gt;|&lt;/span&gt; N          &lt;span&gt;|&lt;/span&gt; N                     &lt;span&gt;|&lt;/span&gt; N                &lt;span&gt;|&lt;/span&gt; N                &lt;span&gt;|&lt;/span&gt; N              &lt;span&gt;|&lt;/span&gt; N                   &lt;span&gt;|&lt;/span&gt; N                  &lt;span&gt;|&lt;/span&gt; N            &lt;span&gt;|&lt;/span&gt; N          &lt;span&gt;|&lt;/span&gt; N            &lt;span&gt;|&lt;/span&gt;
&lt;span&gt;+&lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;---------+------+------+-------------+-------------+-------------+-------------+-------------+-----------+------------+-----------------+------------+------------+-----------------------+------------------+------------------+----------------+---------------------+--------------------+--------------+------------+--------------+&lt;/span&gt;
&lt;span&gt;1&lt;/span&gt; row &lt;span&gt;in&lt;/span&gt; &lt;span&gt;set&lt;/span&gt; (&lt;span&gt;0.00&lt;/span&gt;&lt;span&gt; sec)

mysql&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt; 
mysql&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt; 
mysql&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; flush &lt;span&gt;privileges&lt;/span&gt;&lt;span&gt;;
Query OK, &lt;/span&gt;&lt;span&gt;0&lt;/span&gt; rows affected (&lt;span&gt;0.00&lt;/span&gt;&lt;span&gt; sec)

mysql&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;&lt;span&gt;六、用户连接&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;除了平时的交互式登陆连接外，还有以下方法(下面的xxx为登陆密码)：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;root@iz2zeezp920l8adg80sf0pz ~&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;# mysql &lt;span&gt;-&lt;/span&gt;u root &lt;span&gt;-&lt;/span&gt;&lt;span&gt;p&lt;span&gt;xxx&lt;/span&gt; mysql
mysql: &lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;Warning&lt;/span&gt;&lt;span&gt;]&lt;/span&gt; Using a password &lt;span&gt;on&lt;/span&gt;&lt;span&gt; the command line interface can be insecure.
Welcome &lt;/span&gt;&lt;span&gt;to&lt;/span&gt; the MySQL monitor.  Commands &lt;span&gt;end&lt;/span&gt; &lt;span&gt;with&lt;/span&gt; ; &lt;span&gt;or&lt;/span&gt;&lt;span&gt; \g.
Your MySQL connection id &lt;/span&gt;&lt;span&gt;is&lt;/span&gt; &lt;span&gt;343&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1038183/201712/1038183-20171204222838972-1107769592.png&quot; alt=&quot;&quot; width=&quot;641&quot; height=&quot;155&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;免交互登陆，&lt;span&gt;可以用于写shell脚本&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h3&gt;&lt;span&gt;七、修改密码&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;方法一：修改本身连接用户的密码(只能修改当前连接用户)：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;mysql&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;set&lt;/span&gt; password&lt;span&gt;=&lt;/span&gt;&lt;span&gt;password(&quot;password&quot;);
Query OK, &lt;/span&gt;&lt;span&gt;0&lt;/span&gt; rows affected, &lt;span&gt;1&lt;/span&gt; warning (&lt;span&gt;0.00&lt;/span&gt;&lt;span&gt; sec)

mysql&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;exit&lt;/span&gt;&lt;span&gt;
Bye
&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;root@iz2zeezp920l8adg80sf0pz ~&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;# mysql &lt;span&gt;-&lt;/span&gt;u cdq2 &lt;span&gt;-&lt;/span&gt;&lt;span&gt;p
Enter password: 
ERROR &lt;/span&gt;&lt;span&gt;1045&lt;/span&gt; (&lt;span&gt;28000&lt;/span&gt;): Access denied &lt;span&gt;for&lt;/span&gt; &lt;span&gt;user&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;cdq2&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;@&lt;span&gt;'&lt;/span&gt;&lt;span&gt;localhost&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt; (using password: YES)
#密码已经被修改
&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;root@iz2zeezp920l8adg80sf0pz ~&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;# mysql &lt;span&gt;-&lt;/span&gt;u cdq2 &lt;span&gt;-&lt;/span&gt;&lt;span&gt;p
Enter password: 
Welcome &lt;/span&gt;&lt;span&gt;to&lt;/span&gt; the MySQL monitor.  Commands &lt;span&gt;end&lt;/span&gt; &lt;span&gt;with&lt;/span&gt; ; &lt;span&gt;or&lt;/span&gt;&lt;span&gt; \g.
Your MySQL connection id &lt;/span&gt;&lt;span&gt;is&lt;/span&gt; &lt;span&gt;630&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;方法二：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;mysql&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;alter&lt;/span&gt; &lt;span&gt;user&lt;/span&gt; cdq2&lt;span&gt;@localhost&lt;/span&gt; identified &lt;span&gt;by&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;mysql&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
Query OK, &lt;/span&gt;&lt;span&gt;0&lt;/span&gt; rows affected (&lt;span&gt;0.00&lt;/span&gt;&lt;span&gt; sec)

mysql&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;exit&lt;/span&gt;&lt;span&gt;
Bye
&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;root@iz2zeezp920l8adg80sf0pz ~&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;# mysql &lt;span&gt;-&lt;/span&gt;u cdq2 &lt;span&gt;-&lt;/span&gt;&lt;span&gt;p
Enter password: 
Welcome &lt;/span&gt;&lt;span&gt;to&lt;/span&gt; the MySQL monitor.  Commands &lt;span&gt;end&lt;/span&gt; &lt;span&gt;with&lt;/span&gt; ; &lt;span&gt;or&lt;/span&gt;&lt;span&gt; \g.
Your MySQL connection id &lt;/span&gt;&lt;span&gt;is&lt;/span&gt; &lt;span&gt;631&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;&lt;span&gt;八、MySQL用户资源限制&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1038183/201712/1038183-20171204223308503-1015428327.png&quot; alt=&quot;&quot; width=&quot;657&quot; height=&quot;319&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;最大连接数为2：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;mysql&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;alter&lt;/span&gt; &lt;span&gt;user&lt;/span&gt; cdq2&lt;span&gt;@localhost&lt;/span&gt; &lt;span&gt;with&lt;/span&gt; max_user_connections &lt;span&gt;2&lt;/span&gt;&lt;span&gt;;
Query OK, &lt;/span&gt;&lt;span&gt;0&lt;/span&gt; rows affected (&lt;span&gt;0.00&lt;/span&gt;&lt;span&gt; sec)


&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;root@iz2zeezp920l8adg80sf0pz ~&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;# mysql &lt;span&gt;-&lt;/span&gt;u cdq2 &lt;span&gt;-&lt;/span&gt;&lt;span&gt;p
Enter password: 
ERROR &lt;/span&gt;&lt;span&gt;1226&lt;/span&gt; (&lt;span&gt;42000&lt;/span&gt;): &lt;span&gt;User&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;cdq2&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; has exceeded the &lt;span&gt;'&lt;/span&gt;&lt;span&gt;max_user_connections&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; resource (&lt;span&gt;current&lt;/span&gt; value: &lt;span&gt;2&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;root@iz2zeezp920l8adg80sf0pz ~&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;# 

mysql&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;select&lt;/span&gt; &lt;span&gt;*&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; mysql.&lt;span&gt;user&lt;/span&gt; &lt;span&gt;where&lt;/span&gt; &lt;span&gt;user&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;cdq2&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;/span&gt;;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt; 查看数据库连接状态：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;mysql&lt;span&gt;&amp;gt;&lt;/span&gt; show &lt;span&gt;full&lt;/span&gt;&lt;span&gt; processlist;
&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;---+------+-----------+------+---------+------+----------+-----------------------+&lt;/span&gt;
&lt;span&gt;|&lt;/span&gt; Id  &lt;span&gt;|&lt;/span&gt; &lt;span&gt;User&lt;/span&gt; &lt;span&gt;|&lt;/span&gt; Host      &lt;span&gt;|&lt;/span&gt; db   &lt;span&gt;|&lt;/span&gt; Command &lt;span&gt;|&lt;/span&gt; Time &lt;span&gt;|&lt;/span&gt; State    &lt;span&gt;|&lt;/span&gt; Info                  &lt;span&gt;|&lt;/span&gt;
&lt;span&gt;+&lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;---+------+-----------+------+---------+------+----------+-----------------------+&lt;/span&gt;
&lt;span&gt;|&lt;/span&gt; &lt;span&gt;624&lt;/span&gt; &lt;span&gt;|&lt;/span&gt; cdq2 &lt;span&gt;|&lt;/span&gt; localhost &lt;span&gt;|&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt; &lt;span&gt;|&lt;/span&gt; Sleep   &lt;span&gt;|&lt;/span&gt;    &lt;span&gt;3&lt;/span&gt; &lt;span&gt;|&lt;/span&gt;          &lt;span&gt;|&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt;                  &lt;span&gt;|&lt;/span&gt;
&lt;span&gt;|&lt;/span&gt; &lt;span&gt;628&lt;/span&gt; &lt;span&gt;|&lt;/span&gt; root &lt;span&gt;|&lt;/span&gt; localhost &lt;span&gt;|&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt; &lt;span&gt;|&lt;/span&gt; Query   &lt;span&gt;|&lt;/span&gt;    &lt;span&gt;0&lt;/span&gt; &lt;span&gt;|&lt;/span&gt; starting &lt;span&gt;|&lt;/span&gt; show &lt;span&gt;full&lt;/span&gt; processlist &lt;span&gt;|&lt;/span&gt;
&lt;span&gt;+&lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;---+------+-----------+------+---------+------+----------+-----------------------+&lt;/span&gt;
&lt;span&gt;2&lt;/span&gt; rows &lt;span&gt;in&lt;/span&gt; &lt;span&gt;set&lt;/span&gt; (&lt;span&gt;0.00&lt;/span&gt;&lt;span&gt; sec)

mysql&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;&lt;span&gt;九、用户密码过期策略&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1038183/201712/1038183-20171204223538472-1859169652.png&quot; alt=&quot;&quot; width=&quot;673&quot; height=&quot;144&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;1、root用户设置cdq2用户密码过期：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;mysql&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;alter&lt;/span&gt; &lt;span&gt;user&lt;/span&gt; cdq2&lt;span&gt;@localhost&lt;/span&gt;&lt;span&gt; password expire;
Query OK, &lt;/span&gt;&lt;span&gt;0&lt;/span&gt; rows affected (&lt;span&gt;0.00&lt;/span&gt;&lt;span&gt; sec)

mysql&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;2、cdq2密码过期，必须先重置：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;mysql&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt; show databases;
ERROR &lt;/span&gt;&lt;span&gt;1820&lt;/span&gt; (HY000): You must reset your password using &lt;span&gt;ALTER&lt;/span&gt; &lt;span&gt;USER&lt;/span&gt;&lt;span&gt; statement before executing this statement.　　# 必须先重置密码
mysql&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;set&lt;/span&gt; password&lt;span&gt;=&lt;/span&gt;&lt;span&gt;password(&quot;mysql&quot;);
Query OK, &lt;/span&gt;&lt;span&gt;0&lt;/span&gt; rows affected, &lt;span&gt;1&lt;/span&gt; warning (&lt;span&gt;0.00&lt;/span&gt;&lt;span&gt; sec)

mysql&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt; show databases;
&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;------------------+&lt;/span&gt;
&lt;span&gt;|&lt;/span&gt; &lt;span&gt;Database&lt;/span&gt;           &lt;span&gt;|&lt;/span&gt;
&lt;span&gt;+&lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;------------------+&lt;/span&gt;
&lt;span&gt;|&lt;/span&gt; information_schema &lt;span&gt;|&lt;/span&gt;
&lt;span&gt;|&lt;/span&gt; test               &lt;span&gt;|&lt;/span&gt;
&lt;span&gt;+&lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;------------------+&lt;/span&gt;
&lt;span&gt;2&lt;/span&gt; rows &lt;span&gt;in&lt;/span&gt; &lt;span&gt;set&lt;/span&gt; (&lt;span&gt;0.00&lt;/span&gt;&lt;span&gt; sec)

mysql&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;&lt;span&gt;十、锁定用户lock&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;1、root用户把cdq2锁住：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
m&lt;span&gt;ysql&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;alter&lt;/span&gt; &lt;span&gt;user&lt;/span&gt; cdq2&lt;span&gt;@localhost&lt;/span&gt;&lt;span&gt; account lock;
Query OK, &lt;/span&gt;&lt;span&gt;0&lt;/span&gt; rows affected (&lt;span&gt;0.00&lt;/span&gt;&lt;span&gt; sec)

mysql&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt; 
mysql&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;select&lt;/span&gt; &lt;span&gt;*&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; mysql.&lt;span&gt;user&lt;/span&gt; &lt;span&gt;where&lt;/span&gt; &lt;span&gt;user&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;cdq2&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;2、cdq2无法登陆&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;root@iz2zeezp920l8adg80sf0pz ~&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;# mysql &lt;span&gt;-&lt;/span&gt;u cdq2 &lt;span&gt;-&lt;/span&gt;&lt;span&gt;p
Enter password: 
ERROR &lt;/span&gt;&lt;span&gt;3118&lt;/span&gt; (HY000): Access denied &lt;span&gt;for&lt;/span&gt; &lt;span&gt;user&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;cdq2&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;@&lt;span&gt;'&lt;/span&gt;&lt;span&gt;localhost&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;. Account &lt;span&gt;is&lt;/span&gt;&lt;span&gt; locked.
&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;root@iz2zeezp920l8adg80sf0pz ~&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;# &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;span&gt;第一周大概就这样了，以后争取每周写一篇mysql，有点难，因为在新公司实习有好多要学的呀。不过我会尽量的哈哈&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;之前一个人来厦门感觉很寂寞，周围好多同学都去留在广州或者深圳了，而我老爸老妈也有意让我留广东的。加上自己已经到了发春的年龄，心理还真是不好受，作为一个男的，真是太幼稚了。算了，太感性的话不说……&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;现在感觉打工并不能赚什么钱，就算一个月税前2/3w，so what？打工不能发家，小小生意却可以，最近比较有体会。明白这个道理，现在在工作不免有一丝悲观，但我还是选择工作呗，因为目前还是多认识些人，接触多点资源吧。&lt;/span&gt;&lt;/p&gt;

</description>
<pubDate>Mon, 04 Dec 2017 15:08:00 +0000</pubDate>
<dc:creator>前程明亮</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/0zcl/p/7968099.html</dc:identifier>
</item>
<item>
<title>javascript面向对象系列第三篇——实现继承的3种形式 - 小火柴的蓝色理想</title>
<link>http://www.cnblogs.com/xiaohuochai/p/7978752.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/xiaohuochai/p/7978752.html</guid>
<description>&lt;h2&gt;前面的话&lt;/h2&gt;
&lt;p&gt;　　学习如何&lt;a href=&quot;http://www.cnblogs.com/xiaohuochai/p/5754243.html&quot; target=&quot;_blank&quot;&gt;创建对象&lt;/a&gt;是理解面向对象编程的第一步，第二步是理解继承。开宗明义，继承是指在原有对象的基础上，略作修改，得到一个新的对象。javascript主要包括类式继承、原型继承和拷贝继承这三种继承方式。本文是javascript面向对象系列第三篇——实现继承的3种形式&lt;/p&gt;

&lt;h3&gt;类式继承&lt;/h3&gt;
&lt;p&gt;　　大多数面向对象的编程语言都支持类和类继承的特性，而JS却不支持这些特性，只能通过其他方法定义并关联多个相似的对象，如new和instanceof。不过在后来的ES6中新增了一些元素，比如class关键字，但这并不意味着javascript中是有类的，class只是构造函数的语法糖而已&lt;/p&gt;
&lt;p&gt;　　类式继承的主要思路是，通过构造函数实例化对象，通过原型链将实例对象关联起来。下面将对类式继承进行详细解释&lt;/p&gt;
&lt;p&gt;【原型链继承】&lt;/p&gt;
&lt;p&gt;　　javascript使用原型链作为实现继承的主要方法，实现的本质是重写&lt;a href=&quot;http://www.cnblogs.com/xiaohuochai/p/5753952.html&quot; target=&quot;_blank&quot;&gt;原型对象&lt;/a&gt;，代之以一个新类型的实例。下面的代码中，原来存在于SuperType的实例对象中的属性和方法，现在也存在于SubType.prototype中了&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;function Super(){
    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.value = &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
}
Super.prototype.getValue &lt;/span&gt;=&lt;span&gt; function(){
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.value;
};
function Sub(){}
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;Sub继承了Super&lt;/span&gt;
Sub.prototype = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Super();
Sub.prototype.constructor &lt;/span&gt;=&lt;span&gt; Sub;

&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; instance = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Sub();
console.log(instance.getValue());&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　原型链最主要的问题在于包含引用类型值的原型属性会被所有实例共享，而这也正是为什么要在构造函数中，而不是在原型对象中定义属性的原因。在通过原型来实现继承时，原型实际上会变成另一个类型的实例。于是，原先的实例属性也就顺理成章地变成了现在的原型属性了&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
&lt;span&gt;function Super(){
    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.colors = [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;red&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;blue&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;green&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;];
}
function Sub(){};
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;Sub继承了Super&lt;/span&gt;
Sub.prototype = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Super();
&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; instance1 = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Sub();
instance1.colors.push(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;black&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
console.log(instance1.colors);&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;'red,blue,green,black'&lt;/span&gt;
&lt;span&gt;var&lt;/span&gt; instance2 = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Sub();
console.log(instance2.colors);&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;'red,blue,green,black'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　原型链的第二个问题是，在创建子类型的实例时， 不能向超类型的构造函数中传递参数。实际上，应该说是没有办法在不影响所有对象实例的情况下，给超类型的构造函数传递参数。再加上包含引用类型值的原型属性会被所有实例共享的问题，在实践中很少会单独使用原型链继承&lt;/p&gt;
&lt;p&gt;【借用构造函数继承】&lt;/p&gt;
&lt;p&gt;　　借用&lt;a href=&quot;http://www.cnblogs.com/xiaohuochai/p/5753952.html#anchor1&quot; target=&quot;_blank&quot;&gt;构造函数&lt;/a&gt;(constructor stealing)的技术(有时候也叫做伪类继承或经典继承)。基本思想相当简单，即在子类型构造函数的内部调用超类型构造函数，通过使用apply()和call()方法在新创建的对象上执行构造函数&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
&lt;span&gt;function Super(){
    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.colors = [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;red&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;blue&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;green&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;];
}
function Sub(){
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;继承了Super&lt;/span&gt;
    Super.call(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;);
}
&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; instance1 = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Sub();
instance1.colors.push(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;black&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
console.log(instance1.colors);&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; ['red','blue','green','black']&lt;/span&gt;
&lt;span&gt;var&lt;/span&gt; instance2 = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Sub();
console.log(instance2.colors);&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; ['red','blue','green']&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　相对于原型链而言，借用构造函数有一个很大的优势，即可以在子类型构造函数中向超类型构造函数传递参数&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;function Super(name){
    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.name =&lt;span&gt; name;
}
function Sub(){
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;继承了Super，同时还传递了参数&lt;/span&gt;
    Super.call(&lt;span&gt;this&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;bai&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;实例属性&lt;/span&gt;
    &lt;span&gt;this&lt;/span&gt;.age = &lt;span&gt;29&lt;/span&gt;&lt;span&gt;;
}
&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; instance = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Sub();
console.log(instance.name);&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;&quot;bai&quot;&lt;/span&gt;
console.log(instance.age);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;29  &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　但是，如果仅仅是借用构造函数，那么也将无法避免构造函数模式存在的问题——方法都在构造函数中定义，因此函数复用就无从谈起了&lt;/p&gt;
&lt;p&gt;【组合继承】&lt;/p&gt;
&lt;p&gt;　　组合继承(combination inheritance)有时也叫伪经典继承，指的是将原型链和借用构造函数的技术组合到一块，从而发挥二者之长的一种继承模式。其背后的思路是使用原型链实现对原型属性和方法的继承，而通过借用构造函数来实现对实例属性的继承。这样，既通过在原型上定义方法实现了函数复用，又能够保证每个实例都有它自己的属性&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;46&quot;&gt;
&lt;pre&gt;
&lt;span&gt;function Super(name){
    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.name =&lt;span&gt; name;
    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.colors = [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;red&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;blue&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;green&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;];
}
Super.prototype.sayName &lt;/span&gt;=&lt;span&gt; function(){
    console.log(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.name);
};
function Sub(name,age){
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;继承属性&lt;/span&gt;
    Super.call(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;,name);
    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.age =&lt;span&gt; age;
}
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;继承方法&lt;/span&gt;
Sub.prototype = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Super();
Sub.prototype.constructor &lt;/span&gt;=&lt;span&gt; Sub;
Sub.prototype.sayAge &lt;/span&gt;=&lt;span&gt; function(){
    console.log(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.age);
}
&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; instance1 = &lt;span&gt;new&lt;/span&gt; Sub(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;bai&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;29&lt;/span&gt;&lt;span&gt;);
instance1.colors.push(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;black&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
console.log(instance1.colors);&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;['red','blue','green','black']&lt;/span&gt;
instance1.sayName();&lt;span&gt;//&lt;/span&gt;&lt;span&gt;&quot;bai&quot;&lt;/span&gt;
instance1.sayAge();&lt;span&gt;//&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;

&lt;span&gt;var&lt;/span&gt; instance2 = &lt;span&gt;new&lt;/span&gt; Sub(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;hu&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;27&lt;/span&gt;&lt;span&gt;);
console.log(instance2.colors);&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;['red','blue','green']&lt;/span&gt;
instance2.sayName();&lt;span&gt;//&lt;/span&gt;&lt;span&gt;&quot;hu&quot;&lt;/span&gt;
instance2.sayAge();&lt;span&gt;//&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　组合继承有它自己的问题。那就是无论什么情况下，都会调用两次父类型构造函数：一次是在创建子类型原型的时候，另一次是在子类型构造函数内部。子类型最终会包含父类型对象的全部实例属性，但不得不在调用子类型构造函数时重写这些属性&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;function Super(name){
    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.name =&lt;span&gt; name;
    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.colors = [&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;red&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;blue&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;green&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;];
}
Super.prototype.sayName &lt;/span&gt;=&lt;span&gt; function(){
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.name;
};
function Sub(name,age){
     &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 第二次调用Super()，Sub.prototype又得到了name和colors两个属性，并对上次得到的属性值进行了覆盖&lt;/span&gt;
    Super.call(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;,name);
    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.age =&lt;span&gt; age;
}
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;第一次调用Super()，Sub.prototype得到了name和colors两个属性&lt;/span&gt;
Sub.prototype = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Super(); 
Sub.prototype.constructor &lt;/span&gt;=&lt;span&gt; Sub;
Sub.prototype.sayAge &lt;/span&gt;=&lt;span&gt; function(){
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.age;
};  &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;【寄生组合继承】&lt;/p&gt;
&lt;p&gt;　　解决两次调用的方法是使用寄生组合式继承。寄生组合式继承与组合继承相似，都是通过借用构造函数来继承不可共享的属性，通过原型链的混成形式来继承方法和可共享的属性。只不过把原型继承的形式变成了寄生式继承。使用寄生组合式继承可以不必为了指定子类型的原型而调用父类型的构造函数，从而寄生式继承只继承了父类型的原型属性，而父类型的实例属性是通过借用构造函数的方式来得到的&lt;/p&gt;
&lt;p&gt;　　[注意]下方中会对寄生继承进行详细说明&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;46&quot;&gt;
&lt;pre&gt;
&lt;span&gt;function Super(name){
    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.name =&lt;span&gt; name;
    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.colors = [&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;red&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;blue&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;green&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;];
}
Super.prototype.sayName &lt;/span&gt;=&lt;span&gt; function(){
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.name;
};

function Sub(name,age){
    Super.call(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;,name);
    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.age =&lt;span&gt; age;
}
&lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(!&lt;span&gt;Object.create){
　　Object.create &lt;/span&gt;=&lt;span&gt; function(proto){
　　　　function F(){};
　　　　F.prototype &lt;/span&gt;=&lt;span&gt; proto;
　　　　&lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; F;
　　}
}
Sub.prototype &lt;/span&gt;=&lt;span&gt; Object.create(Super.prototype);
Sub.prototype.constructor &lt;/span&gt;=&lt;span&gt; Sub;

&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; instance1 = &lt;span&gt;new&lt;/span&gt; Sub(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;bai&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;29&lt;/span&gt;&lt;span&gt;);
instance1.colors.push(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;black&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
console.log(instance1.colors);&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;['red','blue','green','black']&lt;/span&gt;
instance1.sayName();&lt;span&gt;//&lt;/span&gt;&lt;span&gt;&quot;bai&quot;&lt;/span&gt;

&lt;span&gt;var&lt;/span&gt; instance2 = &lt;span&gt;new&lt;/span&gt; Sub(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;hu&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;27&lt;/span&gt;&lt;span&gt;);
console.log(instance2.colors);&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;['red','blue','green']&lt;/span&gt;
instance2.sayName();&lt;span&gt;//&lt;/span&gt;&lt;span&gt;&quot;hu&quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　这个例子的高效率体现在它只调用了一次Super构造函数，并且因此避免了在Sub.prototype上面创建不必要的、多余的属性。与此同时，原型链还保持不变&lt;/p&gt;
&lt;p&gt;　　因此，开发人员普遍认为寄生组合式继承是引用类型最理想的继承范式，YUI的YAHOO.lang.extend()方法就采用了这种继承模式&lt;/p&gt;
&lt;p&gt;【ES6中的class】&lt;/p&gt;
&lt;p&gt;　　如果使用ES6中的class语法，则上面代码修改如下&lt;/p&gt;
&lt;p&gt;　　[注意]关于关于ES6中的class语法，详细情况&lt;a href=&quot;http://www.cnblogs.com/xiaohuochai/p/7256843.html&quot; target=&quot;_blank&quot;&gt;移步至此&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;45&quot;&gt;
&lt;pre&gt;
&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Super {
  constructor(name){
    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.name =&lt;span&gt; name;
    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.colors = [&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;red&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;blue&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;green&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;];
  }
  sayName(){
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.name;
  }
}

&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Sub extends Super{
  constructor(name,age){
    super(name);
    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.age =&lt;span&gt; age;
  }
}

&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; instance1 = &lt;span&gt;new&lt;/span&gt; Sub(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;bai&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;29&lt;/span&gt;&lt;span&gt;);
instance1.colors.push(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;black&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
console.log(instance1.colors);&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;['red','blue','green','black']&lt;/span&gt;
instance1.sayName();&lt;span&gt;//&lt;/span&gt;&lt;span&gt;&quot;bai&quot;&lt;/span&gt;

&lt;span&gt;var&lt;/span&gt; instance2 = &lt;span&gt;new&lt;/span&gt; Sub(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;hu&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;27&lt;/span&gt;&lt;span&gt;);
console.log(instance2.colors);&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;['red','blue','green']&lt;/span&gt;
instance2.sayName();&lt;span&gt;//&lt;/span&gt;&lt;span&gt;&quot;hu&quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　ES6的class语法糖隐藏了许多技术细节，在实现同样功能的前提下，代码却优雅不少&lt;/p&gt;

&lt;h3&gt;原型继承&lt;/h3&gt;
&lt;p&gt;【原型继承】&lt;/p&gt;
&lt;p&gt;　　原型继承，在《你不知道的javascript》中被翻译为委托继承&lt;/p&gt;
&lt;p&gt;　　道格拉斯·克罗克福德(Douglas Crockford)在2006年写了一篇文章，《javascript中的原型式继承》。在这篇文章中，他介绍了一种实现继承的方式，这种方式并没有使用严格意义上的构造函数。他的想法是借助原型可以基于已有的对象来创建新对象，同时不必因此创建自定义类型&lt;/p&gt;
&lt;p&gt;　　原型继承的基础函数如下所示&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
function &lt;span&gt;object&lt;/span&gt;&lt;span&gt;(o){
    function F(){};
    F.prototype &lt;/span&gt;=&lt;span&gt; o;
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; F();
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　在object()函数内部，先创建了一个临时性的构造函数，然后将传入的对象作为这个构造函数的原型，最后返回了这个临时类型的一个新实例。从本质上讲，object()对传入其中的对象执行了一次浅复制&lt;/p&gt;
&lt;p&gt;　　下面是一个例子&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; superObj =&lt;span&gt; {
  init: function(value){
    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.value =&lt;span&gt; value;
  },
  getValue: function(){
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.value;
  }
}

&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; subObj =&lt;span&gt; object(superObj);
subObj.init(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;sub&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
console.log(subObj.getValue());&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;'sub'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　ES5通过新增Object.create()方法规范化了原型式继承&lt;/p&gt;
&lt;p&gt;　　[注意]关于Object.create()方法的详细内容&lt;a href=&quot;http://www.cnblogs.com/xiaohuochai/p/5741616.html#anchor2&quot; target=&quot;_blank&quot;&gt;移步至此&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; superObj =&lt;span&gt; {
  init: function(value){
    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.value =&lt;span&gt; value;
  },
  getValue: function(){
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.value;
  }
}

&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; subObj =&lt;span&gt; Object.create(superObj);
subObj.init(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;sub&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
console.log(subObj.getValue());&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;'sub'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;【与原型链继承的关系】&lt;/p&gt;
&lt;p&gt;　　原型继承虽然只是看上去将原型链继承的一些程序性步骤包裹在函数里而已。但是，它们的一个重要区别是父类型的实例对象不再作为子类型的原型对象&lt;/p&gt;
&lt;p&gt;　　1、使用原型链继承&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;function Super(){
    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.value = &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
}
Super.prototype.value &lt;/span&gt;= &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
function Sub(){};
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;将父类型的实例对象作为子类型的原型对象&lt;/span&gt;
Sub.prototype = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Super();
Sub.prototype.constructor &lt;/span&gt;=&lt;span&gt; Sub;

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;创建子类型的实例对象&lt;/span&gt;
&lt;span&gt;var&lt;/span&gt; instance = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Sub;
console.log(instance.value);&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　2、使用原型继承&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;function Super(){
    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.value = &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
}
Super.prototype.value &lt;/span&gt;= &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
function Sub(){};

Sub.prototype &lt;/span&gt;=&lt;span&gt; Object.create(Super.prototype);
Sub.prototype.constructor &lt;/span&gt;=&lt;span&gt; Sub;

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;创建子类型的实例对象&lt;/span&gt;
&lt;span&gt;var&lt;/span&gt; instance = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Sub;
console.log(instance.value);&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　上面的Object.create函数一行代码Sub.prototype = Object.create(Super.prototype)可以分解为&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;function F(){};
F.prototype &lt;/span&gt;=&lt;span&gt; Super.prototype;
Sub.prototype &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; F();
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　由上面代码看出，子类的原型对象是临时类F的实例对象，而临时类F的原型对象又指向父类的原型对象；所以，实际上，子类可以继承父类的原型上的属性，但不可以继承父类的实例上的属性&lt;/p&gt;
&lt;p&gt;　　原型继承与原型链继承都存在着子例共享父例引用类型值的问题&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;45&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; superObj =&lt;span&gt; {
    colors: [&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;red&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;blue&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;green&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]
};
&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; subObj1 = &lt;span&gt;object&lt;/span&gt;&lt;span&gt;(superObj);
subObj1.colors.push(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;black&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);

&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; subObj2 = &lt;span&gt;object&lt;/span&gt;&lt;span&gt;(superObj);
subObj2.colors.push(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;white&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);

console.log(superObj.colors);&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;[&quot;red&quot;, &quot;blue&quot;, &quot;green&quot;, &quot;black&quot;, &quot;white&quot;]&lt;/span&gt;
console.log(subObj1.colors);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;[&quot;red&quot;, &quot;blue&quot;, &quot;green&quot;, &quot;black&quot;, &quot;white&quot;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;【寄生式继承】&lt;/p&gt;
&lt;p&gt;　　寄生式继承(parasitic)是与原型继承紧密相关的一种思路，并且同样是由道格拉斯·克罗克福德推而广之的。寄生式继承的思路与寄生构造函数和工厂模式类似，即创建一个仅用于封装继承过程的函数，该函数内部以某种方式来增强对象，最后再返回对象&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;45&quot;&gt;
&lt;pre&gt;
&lt;span&gt;function parasite(original){
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; clone = Object.create(original);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;通过调用函数创建一个新对象&lt;/span&gt;
    clone.sayHi = function(){ &lt;span&gt;//&lt;/span&gt;&lt;span&gt;以某种方式来增强这个对象&lt;/span&gt;
        console.log(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;hi&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
    };
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; clone;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;返回这个对象&lt;/span&gt;
&lt;span&gt;}
&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; superObj =&lt;span&gt; {
    colors: [&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;red&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;blue&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;green&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]
};
&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; subObj1 =&lt;span&gt; parasite(superObj);
subObj1.colors.push(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;black&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; subObj2 =&lt;span&gt; parasite(superObj);
subObj2.colors.push(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;white&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);

console.log(superObj.colors);&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;[&quot;red&quot;, &quot;blue&quot;, &quot;green&quot;, &quot;black&quot;, &quot;white&quot;]&lt;/span&gt;
console.log(subObj1.colors);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;[&quot;red&quot;, &quot;blue&quot;, &quot;green&quot;, &quot;black&quot;, &quot;white&quot;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 　　由于原型继承存在着引用类型的值被共享的问题，所以使用得并不很多，只在一些简单应用场景下使用。如果需要解决该问题，则需要借用构造函数，与原型继承的初衷相违背，相当于使用了类式继承的终极写法——寄生组合继承&lt;/p&gt;

&lt;h3&gt;拷贝继承&lt;/h3&gt;
&lt;p&gt;　　拷贝继承在《javascript面向对象摘要》中翻译为混入继承，jQuery使用的就是拷贝继承&lt;/p&gt;
&lt;p&gt;　　拷贝继承不需要改变原型链，通过拷贝函数将父例的属性和方法拷贝到子例即可&lt;/p&gt;
&lt;p&gt;　　[注意]关于对象拷贝的详细信息&lt;a href=&quot;http://www.cnblogs.com/xiaohuochai/p/6354166.html&quot; target=&quot;_blank&quot;&gt;移步至此&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;【拷贝函数】&lt;/p&gt;
&lt;p&gt;　　下面是一个深拷贝的拷贝函数&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;50&quot;&gt;
&lt;pre&gt;
&lt;span&gt;function extend(obj,cloneObj){
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(&lt;span&gt;typeof&lt;/span&gt; obj != &lt;span&gt;'&lt;/span&gt;&lt;span&gt;object&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;){
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
    }
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; cloneObj = cloneObj ||&lt;span&gt; {};
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(&lt;span&gt;var&lt;/span&gt; i &lt;span&gt;in&lt;/span&gt;&lt;span&gt; obj){
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(&lt;span&gt;typeof&lt;/span&gt; obj[i] === &lt;span&gt;'&lt;/span&gt;&lt;span&gt;object&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;){
            cloneObj[i] &lt;/span&gt;= (obj[i] instanceof Array) ?&lt;span&gt; [] : {};
            arguments.callee(obj[i],cloneObj[i]);
        }&lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;{
            cloneObj[i] &lt;/span&gt;=&lt;span&gt; obj[i]; 
        }  
    }
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; cloneObj;
}

&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; obj1={a:&lt;span&gt;1&lt;/span&gt;,b:&lt;span&gt;2&lt;/span&gt;,c:[&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;2&lt;/span&gt;,&lt;span&gt;3&lt;/span&gt;&lt;span&gt;]};
&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; obj2=&lt;span&gt;extend(obj1);
console.log(obj1.c); &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;[1,2,3]&lt;/span&gt;
console.log(obj2.c); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;[1,2,3]&lt;/span&gt;
obj2.c.push(&lt;span&gt;4&lt;/span&gt;&lt;span&gt;);
console.log(obj2.c); &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;[1,2,3,4]&lt;/span&gt;
console.log(obj1.c); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;[1,2,3]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;【对象间的拷贝继承】&lt;/p&gt;
&lt;p&gt;　　由于拷贝继承解决了引用类型值共享的问题，所以其完全可以脱离构造函数实现对象间的继承&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;46&quot;&gt;
&lt;pre&gt;
&lt;span&gt;function extend(obj,cloneObj){
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(&lt;span&gt;typeof&lt;/span&gt; obj != &lt;span&gt;'&lt;/span&gt;&lt;span&gt;object&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;){
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
    }
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; cloneObj = cloneObj ||&lt;span&gt; {};
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(&lt;span&gt;var&lt;/span&gt; i &lt;span&gt;in&lt;/span&gt;&lt;span&gt; obj){
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(&lt;span&gt;typeof&lt;/span&gt; obj[i] === &lt;span&gt;'&lt;/span&gt;&lt;span&gt;object&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;){
            cloneObj[i] &lt;/span&gt;= (obj[i] instanceof Array) ?&lt;span&gt; [] : {};
            arguments.callee(obj[i],cloneObj[i]);
        }&lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;{
            cloneObj[i] &lt;/span&gt;=&lt;span&gt; obj[i]; 
        }  
    }
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; cloneObj;
}

&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; superObj =&lt;span&gt; {
  arrayValue:[&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;2&lt;/span&gt;,&lt;span&gt;3&lt;/span&gt;&lt;span&gt;],
  init: function(value){
    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.value =&lt;span&gt; value;
  },
  getValue: function(){
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.value;
  }
}
&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; subObj =&lt;span&gt; extend(superObj);
subObj.arrayValue.push(&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;&lt;span&gt;);
console.log(subObj.arrayValue);&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;[1,2,3,4]&lt;/span&gt;
console.log(superObj.arrayValue);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;[1,2,3]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;【使用构造函数的拷贝组合继承】&lt;/p&gt;
&lt;p&gt;　　如果要使用构造函数，则属性可以使用借用构造函数的方法，而引用类型属性和方法使用拷贝继承。相当于不再通过原型链来建立对象之间的联系，而通过复制来得到对象的属性和方法&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;48&quot;&gt;
&lt;pre&gt;
&lt;span&gt;function extend(obj,cloneObj){
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(&lt;span&gt;typeof&lt;/span&gt; obj != &lt;span&gt;'&lt;/span&gt;&lt;span&gt;object&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;){
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
    }
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; cloneObj = cloneObj ||&lt;span&gt; {};
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(&lt;span&gt;var&lt;/span&gt; i &lt;span&gt;in&lt;/span&gt;&lt;span&gt; obj){
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(&lt;span&gt;typeof&lt;/span&gt; obj[i] === &lt;span&gt;'&lt;/span&gt;&lt;span&gt;object&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;){
            cloneObj[i] &lt;/span&gt;= (obj[i] instanceof Array) ?&lt;span&gt; [] : {};
            arguments.callee(obj[i],cloneObj[i]);
        }&lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;{
            cloneObj[i] &lt;/span&gt;=&lt;span&gt; obj[i]; 
        }  
    }
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; cloneObj;
}
function Super(name){
    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.name =&lt;span&gt; name;
    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.colors = [&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;red&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;blue&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;green&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;];
}
Super.prototype.sayName &lt;/span&gt;=&lt;span&gt; function(){
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.name;
};
function Sub(name,age){
    Super.call(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;,name);
    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.age =&lt;span&gt; age;
}
Sub.prototype &lt;/span&gt;=&lt;span&gt; extend(Super.prototype);
&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; instance1 = &lt;span&gt;new&lt;/span&gt; Sub(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;bai&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;29&lt;/span&gt;&lt;span&gt;);
instance1.colors.push(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;black&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
console.log(instance1.colors);&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;['red','blue','green','black']&lt;/span&gt;
instance1.sayName();&lt;span&gt;//&lt;/span&gt;&lt;span&gt;&quot;bai&quot;&lt;/span&gt;

&lt;span&gt;var&lt;/span&gt; instance2 = &lt;span&gt;new&lt;/span&gt; Sub(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;hu&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;27&lt;/span&gt;&lt;span&gt;);
console.log(instance2.colors);&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;['red','blue','green']&lt;/span&gt;
instance2.sayName();&lt;span&gt;//&lt;/span&gt;&lt;span&gt;&quot;hu&quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;总结&lt;/h2&gt;
&lt;p&gt;　　本文介绍的类式继承、原型继承和拷贝继承这三种继承方式中，类式继承用的最普遍，由于ES6中的class的语法糖，使其代码复杂度大大降低；原型继承由于无法处理引用类型值共享的问题，使用较少，但由原型继承引申出的寄生组合继承是类式继承的范式方法；拷贝继承使用范围最广泛，不仅可以实现原型之间的继承，也可以脱离构造函数，直接实现对象间的继承&lt;/p&gt;
&lt;p&gt;　　总之，继承主要就是处理父例和子例之间的两个问题，即是否使用构造函数，及如何建立联系&lt;/p&gt;
&lt;p&gt;　　类式继承的核心就是使用构造函数，通过原型链来建立联系&lt;/p&gt;
&lt;p&gt;　　原型继承不使用构造函数，通过Object.create()来建立联系&lt;/p&gt;
&lt;p&gt;　　拷贝继承使不使用构造函数都可以，通过复制来建立联系&lt;/p&gt;

</description>
<pubDate>Mon, 04 Dec 2017 14:58:00 +0000</pubDate>
<dc:creator>小火柴的蓝色理想</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/xiaohuochai/p/7978752.html</dc:identifier>
</item>
<item>
<title>技术债务与程序员的信用 - mindwind</title>
<link>http://www.cnblogs.com/mindwind/p/7979454.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/mindwind/p/7979454.html</guid>
<description>&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/815275/201712/815275-20171204221117753-280731309.jpg&quot;/&gt;&lt;/p&gt;
&lt;p&gt;当我们在埋怨上一个程序员留下的系统时，是在埋怨什么？是债务，技术债务。我在曾经的文章里写过，代码既是资产也是债务，资产的部分属于公司，债务的部分属于我们。&lt;/p&gt;
&lt;h2 id=&quot;债务&quot;&gt;债务&lt;/h2&gt;
&lt;p&gt;技术债务来自于对金融债务的比喻，它指的是在程序设计与开发过程中，做出的错误或不理想的技术决策，由此带来的后果，逐步累积，就像债务一样。&lt;/p&gt;
&lt;p&gt;技术债务的产生，可能是有意的，也可能是无意的。有意产生的债务，一般是根据实际项目情况（资源与期限）做出的妥协。而无意产生的债务，一般就都是经验缺乏引入的。不管怎么说，只要程序员在不断的生产代码，他们就是在同时创造资产与债务。&lt;/p&gt;
&lt;p&gt;那如何知道技术债务已经积累到了需要去警示并着手计划进行还债的阶段了？一般来说，我们直觉都是知道的。举个例子，好几年前我们接手继续开发并维护一个系统，系统的业务开始发展很快，不停的添加功能， 每周都要上好几次线。一年后，还是每周都要上好几次线，但每次上线的时间越来越长，回归测试的工作量越来越大。再后来，系统迎来了更多的新业务，我们不得不复制了整个系统的代码去修改再重新部署，以免影响现有线上系统的正常运行...&lt;/p&gt;
&lt;p&gt;到了这样的状况，每个人都知道，债务在报警了，债主找上门了。一次重大的还债行动计划开始了，还债的名声不太好听，所以我们喜欢叫：架构升级。架构升级除了还债，还是为未来铺路 —— 当然，前提是要有未来，如果未来还能迎来更大的业务爆发增长，架构升级就是为了在那时能消化更多的长短期债务。&lt;/p&gt;
&lt;p&gt;之前看过一篇写技术债务的文章，也是一个老码农写的，名字就叫《老码农看技术债务》，文中把技术债务分成了好几类，大概记得如下：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;战略债务&lt;/li&gt;
&lt;li&gt;战术债务&lt;/li&gt;
&lt;li&gt;疏忽债务&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;战略债务，老码农说是为了战略利益故意为之，并长期存在。我理解就是在公司或业务高速发展的阶段，主动放弃了一些技术上的完备与完美性，而保持快速的迭代与试错性。这个阶段公司的战略利益是业务的抢占，所以这个阶段的公司都有一些类似的口号，比如：先完成，再完美；优雅的接口，狗屎的实现。战略债务的特点是，负债时间长，但利息不算高且稳定，只要保持长期“付息”，不还本金也能维持下去。&lt;/p&gt;
&lt;p&gt;战术债务，一般是为了应对短期紧急情况采取的折衷方法。这种债务的特点就是高息，说高利贷也不为过。举个例子，曾经做电信项目时，系统处理工单，主流程上有缺陷，对某一类工单处理会卡住。这时又不太方便停机更新程序，就基于系统的动态脚本能力去写了个脚本临时处理这类工单，可以应对当时业务经营的连续性，缺陷是资源开销大，当超过一定量时 CPU 也就满了。这样的技术方案就属于战术债务的应用，当天半夜的业务低谷，就重新修复了程序，归还了这笔短期临时债务。&lt;/p&gt;
&lt;p&gt;疏忽债务，这类债务一般都是无意识的。从某种意义上来说，这就是程序员的成长性债务，随着知识、技能与经验的积累，这类债务会逐步减少。&lt;/p&gt;
&lt;p&gt;对于不同的角色，关注的债务分类与形态也不太一样，比如架构师关注的更多是战略债务，保持系统能够健康长期演进的债务平衡。作为架构师，就像 CFO，需要长期持续的关注系统的资产负债表。战略债务可能更多体现为架构、设计与交互方面的形态。而具体某个功能实现层面的代码债务，则更多落在相关开发工程师的关注范围内。测试工程师，会关注质量方面的债务，而一到交接时，各种文档债务就冒出来了。&lt;/p&gt;
&lt;p&gt;分析了这么多关于技术债务的方方面面，那么程序员该如何面对技术债务，该怎么还债？&lt;/p&gt;
&lt;h2 id=&quot;信用&quot;&gt;信用&lt;/h2&gt;
&lt;p&gt;拥有债务，并不代表信用差。而一个程序员的信用体现在面对技术债务的态度与方法。&lt;/p&gt;
&lt;p&gt;现实生活中，债务依附于借债的主体方，比如金融债务依附于个体或组织，但如果个体死亡或组织破产了，债务就失去了依附体（此类情况不考虑担保，担保是一种依附的转移），自然也就消失了。&lt;/p&gt;
&lt;p&gt;而技术债务的依附体，并不是程序员，而是依附于程序构造的产品或系统，所以当产品或系统的生命周期结束，相应的技术债务也会消失。因而，此种情况下，程序员是有充足的理由不还技术债的，这是技术决策的一种，并不会降低程序员的信用。&lt;/p&gt;
&lt;p&gt;任何一个程序系统或其一部分都会与某一个程序员建立关联，这个程序员此时就负责这部分系统。那么程序员在此基础上继续创造代码时，既增加了资产也可能引入了新的债务，那么他的一个重要职责就是，维持好资产与债务的平衡关系，如果在此期间，系统的债务失衡导致“破产”（需要被迫大规模重构或重写），那么这个程序员的信用必将受到关联伤害。&lt;/p&gt;
&lt;p&gt;所以，我们才需要谨慎且持续的关注与管理程序系统的技术债务问题。&lt;/p&gt;
&lt;p&gt;对于战略债务，长期来说都是持续付利。就像现实中一些大企业从银行借钱经营发展，每年按期付息，但基本不还本金。支持公司快速发展到了一定阶段，基本进入成熟期后（市场大局已定），再主动降低负债风险和经营成本。创业公司从小到大的发展过程中，技术上的战略债务与之类似。&lt;/p&gt;
&lt;p&gt;而疏忽债务，作为有信用的程序员，需要坚持成长性归还策略。一旦发现过去的自己写下了愚蠢的代码，就需要主动积极的确认并计划归还。&lt;/p&gt;
&lt;p&gt;如上，我们首先要认识理解技术债务，还要有效识别技术债务，最后就是合理的还债计划了。&lt;/p&gt;
&lt;h2 id=&quot;还债&quot;&gt;还债&lt;/h2&gt;
&lt;p&gt;在产品突进，四处攻城略地时，还需要配合周期性的还债，保持债务平衡，才能保证整体健康的快速发展。&lt;/p&gt;
&lt;p&gt;还债时，我们主要考虑债务的大小和还债的时机，在不同的时间还债也许研发成本相差不大，但机会成本相差很大。而按不同债务按大小，又可以分为大债务和小债务。一般，我把需要以周为单位计算的债务算作大债务，而只需一个程序员几天时间归还的债务算作小债务，所以这不是一个精确的定义。&lt;/p&gt;
&lt;p&gt;小债务的归还，基本都属于日常的重构活动，局限在局部区域（模块、子服务）的实现层面。而大债务 —— 架构升级还的一般都是大债务 ——的归还，需要仔细的考虑和分析机会成本与潜在收益，所以大债务归还要分三步走：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;规划：代表愿景，分析哪些债务需要在什么时间还，机会成本的损失与预期收益&lt;/li&gt;
&lt;li&gt;计划：代表路径，细致的债务分期偿还计划&lt;/li&gt;
&lt;li&gt;跟踪：真正上路了，确认债务的偿还质量与到位情况&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;如今微服务架构的流行，基本把小债务锁定在了一个或几个微服务体内。即使碰上没有信用的程序员把自己负责的微服务搞烂了，形成债务破产，这时的还债方式无非就是完全重写一个，在微服务拆分合理的情况下，一个服务的重写成本是完全可预期和可控的。&lt;/p&gt;
&lt;p&gt;做一个有信用的程序员的关键是：知道何时引入债务解决紧急情况，之后立刻还债；无意识引入的负债，当时看不见，也许多年后你成长了，看见了，但别假装看不到啊。&lt;/p&gt;
&lt;p&gt;...&lt;/p&gt;
&lt;p&gt;再有代码洁癖的人也没法写出无债务的代码，写出无债务的代码可能是一种极限，我们一直在追求与接近，却很难达到。而无债务的系统也不存在，其实负债高的系统往往活力还比较强。就像人一样，年轻时可以适当战略负债，等老了，债也还得差不多了，负债的意义也不大了。&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;写点文字，画点画儿，记录成长瞬间。&lt;br/&gt;微信公众号「瞬息之间」，既然遇见，不如同行。&lt;br/&gt;&lt;img src=&quot;http://images2015.cnblogs.com/blog/815275/201602/815275-20160216164606173-1251141402.jpg&quot;/&gt;&lt;/p&gt;
</description>
<pubDate>Mon, 04 Dec 2017 14:52:00 +0000</pubDate>
<dc:creator>mindwind</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/mindwind/p/7979454.html</dc:identifier>
</item>
<item>
<title>弄明白python reduce 函数 - Panda Fang</title>
<link>http://www.cnblogs.com/lonkiss/p/understanding-python-reduce-function.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/lonkiss/p/understanding-python-reduce-function.html</guid>
<description>&lt;blockquote readability=&quot;4.2736842105263&quot;&gt;
&lt;p&gt;作者:Panda Fang&lt;/p&gt;
&lt;p&gt;出处:&lt;a href=&quot;http://www.cnblogs.com/lonkiss/p/understanding-python-reduce-function.html&quot; target=&quot;_blank&quot;&gt;http://www.cnblogs.com/lonkiss/p/understanding-python-reduce-function.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;原创文章，转载请注明作者和出处，未经允许不可用于商业营利活动&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;reduce() 函数在 python 2 是内置函数， 从python 3 开始移到了 functools 模块。&lt;/p&gt;
&lt;p&gt;官方文档是这样介绍的&lt;/p&gt;
&lt;blockquote readability=&quot;37&quot;&gt;
&lt;p&gt;reduce(...)&lt;br/&gt;reduce(function, sequence[, initial]) -&amp;gt; value&lt;/p&gt;
&lt;p&gt;Apply a function of two arguments cumulatively to the items of a sequence,&lt;br/&gt;from left to right, so as to reduce the sequence to a single value.&lt;br/&gt;For example, reduce(lambda x, y: x+y, [1, 2, 3, 4, 5]) calculates&lt;br/&gt;((((1+2)+3)+4)+5). If initial is present, it is placed before the items&lt;br/&gt;of the sequence in the calculation, and serves as a default when the&lt;br/&gt;sequence is empty.&lt;/p&gt;
&lt;p&gt;从左到右对一个序列的项累计地应用有两个参数的函数，以此合并序列到一个单一值。&lt;/p&gt;
&lt;p&gt;例如，reduce(lambda x, y: x+y, [1, 2, 3, 4, 5])  计算的就是((((1+2)+3)+4)+5)。&lt;/p&gt;
&lt;p&gt;如果提供了 initial 参数，计算时它将被放在序列的所有项前面，如果序列是空的，它也就是计算的默认结果值了&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;嗯， 这个文档其实不好理解。看了还是不懂。 序列 其实就是python中 tuple  list  dictionary string  以及其他可迭代物，别的编程语言可能有数组。&lt;/p&gt;
&lt;p&gt;reduce 有 三个参数&lt;/p&gt;
&lt;table border=&quot;0&quot;&gt;&lt;tbody readability=&quot;3&quot;&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;function&lt;/td&gt;
&lt;td&gt;有两个参数的函数， 必需参数&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;sequence&lt;/td&gt;
&lt;td&gt;tuple ，list ，dictionary， string等可迭代物，必需参数&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;initial&lt;/td&gt;
&lt;td&gt;初始值， 可选参数&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;reduce的工作过程是 ：在迭代sequence(tuple ，list ，dictionary， string等可迭代物)的过程中，首先把 前两个元素传给 函数参数，函数加工后，然后把得到的结果和第三个元素作为两个参数传给函数参数， 函数加工后得到的结果又和第四个元素作为两个参数传给函数参数，依次类推。 如果传入了 initial 值， 那么首先传的就不是 sequence 的第一个和第二个元素，而是 initial值和 第一个元素。经过这样的累计计算之后合并序列到一个单一返回值&lt;/p&gt;

&lt;p&gt;reduce 代码举例，使用REPL演示&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&amp;gt;&amp;gt;&amp;gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; add(x, y):
...     &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; x+&lt;span&gt;y
...
&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; &lt;span&gt;from&lt;/span&gt; functools &lt;span&gt;import&lt;/span&gt;&lt;span&gt; reduce
&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; reduce(add, [1,2,3,4&lt;span&gt;])
&lt;/span&gt;10
&amp;gt;&amp;gt;&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div readability=&quot;8&quot;&gt;
&lt;p&gt;上面这段 reduce 代码，其实就相当于 1 + 2 + 3 + 4 = 10， 如果把加号改成乘号， 就成了阶乘了&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;当然 仅仅是求和的话还有更简单的方法，如下&lt;/p&gt;
&lt;div readability=&quot;28.5&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&amp;gt;&amp;gt;&amp;gt; sum([1,2,3,4&lt;span&gt;])
&lt;/span&gt;10
&amp;gt;&amp;gt;&amp;gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;很多教程只讲了一个加法求和，太简单了，对新手加深理解还不够。下面讲点更深入的例子&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;还可以把一个整数列表拼成整数，如下&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&amp;gt;&amp;gt;&amp;gt; &lt;span&gt;from&lt;/span&gt; functools &lt;span&gt;import&lt;/span&gt;&lt;span&gt; reduce
&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; reduce(&lt;span&gt;lambda&lt;/span&gt; x, y: x * 10 + y, [1 , 2, 3, 4, 5&lt;span&gt;])
&lt;/span&gt;12345
&amp;gt;&amp;gt;&amp;gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;对一个复杂的sequence使用reduce ，看下面代码，更多的代码不再使用REPL， 使用编辑器编写&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;44&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; functools &lt;span&gt;import&lt;/span&gt;&lt;span&gt; reduce
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; scientists =({&lt;span&gt;'&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Alan Turing&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;age&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:105&lt;span&gt;},
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;              {&lt;span&gt;'&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Dennis Ritchie&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;age&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:76&lt;span&gt;},
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;              {&lt;span&gt;'&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;John von Neumann&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;age&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:114&lt;span&gt;},
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;              {&lt;span&gt;'&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Guido van Rossum&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;age&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:61&lt;span&gt;})
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; reducer(accumulator , value):
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;     sum = accumulator[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;age&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] + value[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;age&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; sum
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; total_age =&lt;span&gt; reduce(reducer, scientists)
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;(total_age)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这段代码会出错，看下图的执行过程&lt;/p&gt;

&lt;div&gt;
&lt;div&gt;&lt;img src=&quot;file:///C:/Users/panda/Documents/My%20Knowledge/temp/f6fe95f9-2045-4511-8339-ce813fa5a177/128/index_files/7e1fb69e-b15b-452a-9797-c4fed14b8a15.png&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;div&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/363499/201712/363499-20171204223139113-695909825.png&quot; alt=&quot;&quot;/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;所以代码需要修改&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;49&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; functools &lt;span&gt;import&lt;/span&gt;&lt;span&gt; reduce
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; scientists =({&lt;span&gt;'&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Alan Turing&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;age&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:105, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;gender&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;male&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;},
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;              {&lt;span&gt;'&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Dennis Ritchie&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;age&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:76, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;gender&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;male&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;},
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;              {&lt;span&gt;'&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Ada Lovelace&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;age&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:202, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;gender&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;female&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;},
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;              {&lt;span&gt;'&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Frances E. Allen&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;age&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:84, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;gender&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;female&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;})
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; reducer(accumulator , value):
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;     sum = &lt;span&gt;accumulator&lt;/span&gt; + value[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;age&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; sum
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; total_age =&lt;span&gt; reduce(reducer, scientists&lt;span&gt;, 0&lt;/span&gt;)
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;(total_age)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;7， 9 行 红色部分就是修改 部分。 通过 help(reduce) 查看 文档，&lt;/p&gt;
&lt;p&gt;reduce 有三个参数， 第三个参数是初始值的意思，是可有可无的参数。&lt;/p&gt;

&lt;p&gt;修改之后就不出错了，流程如下&lt;/p&gt;
&lt;div readability=&quot;7&quot;&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/363499/201712/363499-20171204223307956-1158015276.png&quot; alt=&quot;&quot;/&gt;
&lt;p&gt;这个仍然也可以用 sum 来更简单的完成&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
sum([x[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;age&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] &lt;span&gt;for&lt;/span&gt; x &lt;span&gt;in&lt;/span&gt; scientists ])
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;做点更高级的事情，按性别分组&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;50&quot;&gt;
&lt;pre&gt;
&lt;span&gt;from&lt;/span&gt; functools &lt;span&gt;import&lt;/span&gt;&lt;span&gt; reduce
scientists &lt;/span&gt;=({&lt;span&gt;'&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Alan Turing&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;age&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:105, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;gender&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;male&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;},
             {&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Dennis Ritchie&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;age&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:76, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;gender&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;male&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;},
             {&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Ada Lovelace&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;age&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:202, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;gender&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;female&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;},
             {&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Frances E. Allen&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;age&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:84, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;gender&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;female&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;})
&lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; group_by_gender(accumulator , value):
    accumulator[value[&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;gender&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;]].append(value[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;])
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; accumulator
grouped &lt;/span&gt;= reduce(group_by_gender, scientists, {&lt;span&gt;'&lt;/span&gt;&lt;span&gt;male&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:[], &lt;span&gt;'&lt;/span&gt;&lt;span&gt;female&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:[]})
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(grouped)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;输出&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
{&lt;span&gt;'&lt;/span&gt;&lt;span&gt;male&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Alan Turing&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Dennis Ritchie&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;], &lt;span&gt;'&lt;/span&gt;&lt;span&gt;female&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Ada Lovelace&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Frances E. Allen&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;]}
&lt;/pre&gt;&lt;/div&gt;
&lt;div readability=&quot;8&quot;&gt;
&lt;p&gt;可以看到，在 reduce 的初始值参数传入了一个dictionary，， 但是这样写 key 可能出错，还能再进一步自动化，运行时动态插入key&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;修改代码如下&lt;/p&gt;
&lt;div readability=&quot;9&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
grouped = reduce(group_by_gender, scientists, collections.defaultdict(list))
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;当然 先要 import  collections 模块&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;这当然也能用 pythonic way 去解决&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;47&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt;  itertools
scientists &lt;/span&gt;=({&lt;span&gt;'&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Alan Turing&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;age&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:105, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;gender&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;male&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;},
             {&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Dennis Ritchie&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;age&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:76, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;gender&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;male&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;},
             {&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Ada Lovelace&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;age&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:202, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;gender&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;female&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;},
             {&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Frances E. Allen&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;age&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:84, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;gender&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;female&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;})
grouped &lt;/span&gt;= {item[0]:list(item[1&lt;span&gt;])
           &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; item &lt;span&gt;in&lt;/span&gt; itertools.groupby(scientists, &lt;span&gt;lambda&lt;/span&gt; x: x[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;gender&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;])}
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(grouped)
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;再来一个更晦涩难懂的玩法。工作中要与其他人协作的话，不建议这么用，与上面的例子做同样的事，看不懂无所谓。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;51&quot;&gt;
&lt;pre&gt;
&lt;span&gt;from&lt;/span&gt; functools &lt;span&gt;import&lt;/span&gt;&lt;span&gt; reduce
scientists &lt;/span&gt;=({&lt;span&gt;'&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Alan Turing&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;age&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:105, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;gender&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;male&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;},
             {&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Dennis Ritchie&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;age&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:76, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;gender&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;male&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;},
             {&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Ada Lovelace&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;age&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:202, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;gender&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;female&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;},
             {&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Frances E. Allen&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;age&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:84, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;gender&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;female&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;})
grouped &lt;/span&gt;= reduce(&lt;span&gt;lambda&lt;/span&gt; acc, val: {**acc, **{val[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;gender&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;]: acc[val[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;gender&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;]]+ [val[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;]]}}, scientists, {&lt;span&gt;'&lt;/span&gt;&lt;span&gt;male&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:[], &lt;span&gt;'&lt;/span&gt;&lt;span&gt;female&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:[]})
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(grouped)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;**acc， **{val['gneder']...   这里使用了 dictionary merge syntax ,  从 python 3.5 开始引入， 详情请看 &lt;a href=&quot;https://docs.python.org/3/whatsnew/3.5.html#whatsnew-pep-448&quot;&gt;PEP 448 - Additional Unpacking Generalizations&lt;/a&gt;  怎么使用可以参考这个&lt;a href=&quot;https://stackoverflow.com/questions/38987/how-to-merge-two-dictionaries-in-a-single-expression&quot;&gt; python - How to merge two dictionaries in a single expression? - Stack Overflow&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;python 社区推荐写可读性好的代码，有更好的选择时不建议用reduce，所以 python 2 中内置的reduce 函数 移到了 functools模块中&lt;/p&gt;

</description>
<pubDate>Mon, 04 Dec 2017 14:49:00 +0000</pubDate>
<dc:creator>Panda Fang</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/lonkiss/p/understanding-python-reduce-function.html</dc:identifier>
</item>
<item>
<title>深入浅出多线程——ReentrantLock (二) - 行者悟空</title>
<link>http://www.cnblogs.com/itunic/p/java-reentrant-lock2.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/itunic/p/java-reentrant-lock2.html</guid>
<description>
&lt;p class=&quot;postTitle&quot;&gt; 　　&lt;a id=&quot;cb_post_title_url&quot; class=&quot;postTitle2&quot; href=&quot;http://www.cnblogs.com/itunic/p/java-reentrant-lock1.html&quot;&gt;深入浅出多线程——ReentrantLock (一)&lt;/a&gt;文章中介绍了该类的基本使用，以及在源码的角度分析lock()、unlock()方法。这次打算在此基础上介绍另一个极为重要的方法newCondition()，其实这类已经不属于ReentrantLock的范畴了，是java.util.concurrent.locks.Condition接口的一个实现，位于AbstractQueuedSynchronizer（简称：AQS）中的内部类ConditionObject。&lt;/p&gt;
&lt;p class=&quot;postTitle&quot;&gt; &lt;/p&gt;
&lt;p class=&quot;postTitle&quot;&gt;　　该类提供了await*()、signal*()等方法。本次只对await()、signal()方法在源码的角度进行解析。&lt;/p&gt;
&lt;h3&gt;原理分析&lt;/h3&gt;
&lt;h4&gt;await()方法分析&lt;/h4&gt;
&lt;h5&gt;ConditionObject.await()&lt;/h5&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; await() &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; InterruptedException {
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (Thread.interrupted())
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;                 &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; InterruptedException();
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;             Node node =&lt;span&gt; addConditionWaiter();
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;             &lt;span&gt;int&lt;/span&gt; savedState =&lt;span&gt; fullyRelease(node);
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;             &lt;span&gt;int&lt;/span&gt; interruptMode = 0&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;             &lt;span&gt;while&lt;/span&gt; (!&lt;span&gt;isOnSyncQueue(node)) {
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;                 LockSupport.park(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt; ((interruptMode = checkInterruptWhileWaiting(node)) != 0&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;                     &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (acquireQueued(node, savedState) &amp;amp;&amp;amp; interruptMode !=&lt;span&gt; THROW_IE)
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;                 interruptMode =&lt;span&gt; REINTERRUPT;
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (node.nextWaiter != &lt;span&gt;null&lt;/span&gt;) &lt;span&gt;//&lt;/span&gt;&lt;span&gt; clean up if cancelled&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt; &lt;span&gt;                unlinkCancelledWaiters();
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (interruptMode != 0&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;                reportInterruptAfterWait(interruptMode);
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;         }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　1、判断线程是否被中断，如果被中断则抛出 InterruptedException。&lt;/p&gt;
&lt;p&gt;　　2、调用了addConditionWaiter()方法，将当前线程添加到等待队列中。&lt;/p&gt;
&lt;p&gt;　　3、第5行，调用fullyRelease(Node)方法，尝试释放当前线程并返回释放前的state值。&lt;/p&gt;
&lt;p&gt;　　4、第7行，while循环条件为isOnSyncQueue(Node) 取反，也就是说该方法必须返回false才能进入循环体。进入后调用LockSupport.park()挂起当前线程。&lt;/p&gt;
&lt;p&gt;　　5、等待调用signal()方法，将其加入同步队列等待调度到。调度到后，线程接着往下走，因为此时已经在同步队列中，while循环跳出。&lt;/p&gt;
&lt;p&gt;　　6、来到第12行，尝试将state的值还原到await之前，如果还原成功，则线程继续往下走。如果不成功说明再此期间，已经被其他线程占用，则继续等待。&lt;/p&gt;
&lt;p&gt;　　7、如果当前等待的节点有下游等待节点，在进行清理被取消的等待节点。&lt;/p&gt;
&lt;p&gt;　　8、方法执行完毕后，则继续执行线程的业务，直至调用到unlock()。&lt;/p&gt;
&lt;h5&gt;ConditionObject.addConditionWaiter()&lt;/h5&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;         &lt;span&gt;private&lt;/span&gt;&lt;span&gt; Node addConditionWaiter() {
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;             Node t =&lt;span&gt; lastWaiter;
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt; If lastWaiter is cancelled, clean out.&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (t != &lt;span&gt;null&lt;/span&gt; &amp;amp;&amp;amp; t.waitStatus !=&lt;span&gt; Node.CONDITION) {
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;                unlinkCancelledWaiters();
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;                 t =&lt;span&gt; lastWaiter;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;             Node node = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Node(Thread.currentThread(), Node.CONDITION);
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (t == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;                 firstWaiter =&lt;span&gt; node;
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;             &lt;span&gt;else&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt;                 t.nextWaiter =&lt;span&gt; node;
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;             lastWaiter =&lt;span&gt; node;
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt; node;
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;         }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　1、判断lastWaiter是否为有效状态，如果无效，执行unlinkCancelledWaiters()方法，将其无效的节点清理掉。将当前线程设置为一个node，waitStatus值为-2。&lt;/p&gt;
&lt;p&gt;　　2、判断lastWaiter是否为null，如果为null代表队列为空，那么将创建的node赋值到队列的firstWaiter属性上，如果不为null，则链接到队列最后一个node的下游（因为第一次调用await()方法，此时lastWaiter肯定为空）。然后将队列的lastWaiter属性设置为新建的node。&lt;/p&gt;
&lt;h5&gt;Condition.fullyRelease(Node)&lt;/h5&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;final&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; fullyRelease(Node node) {
        &lt;/span&gt;&lt;span&gt;boolean&lt;/span&gt; failed = &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
            &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; savedState =&lt;span&gt; getState();
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (release(savedState)) {
                failed &lt;/span&gt;= &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; savedState;
            } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
                &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; IllegalMonitorStateException();
            }
        } &lt;/span&gt;&lt;span&gt;finally&lt;/span&gt;&lt;span&gt; {
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (failed)
                node.waitStatus &lt;/span&gt;=&lt;span&gt; Node.CANCELLED;
        }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　1、获取当前线程的state值、然后调用AQS.release(int)尝试释放当前线程，如果释放成功则返回线程state。&lt;br/&gt;有关AQS.relase(int)方法的分析，已经在前一篇文章中进行详细说明。如需查看请点击&lt;/p&gt;
&lt;p&gt;　　2、如果没有释放成功，则抛出异常 IllegalMonitorStateException，并且将node.waitStatus状态设置为取消。&lt;/p&gt;
&lt;h5&gt;AbstractQueuedSynchronizer.isOnSyncQueue(Node)&lt;/h5&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt;     &lt;span&gt;final&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt;&lt;span&gt; isOnSyncQueue(Node node) {
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (node.waitStatus == Node.CONDITION || node.prev == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (node.next != &lt;span&gt;null&lt;/span&gt;) &lt;span&gt;//&lt;/span&gt;&lt;span&gt; If has successor, it must be on queue&lt;/span&gt;
&lt;span&gt;5&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt; 
&lt;span&gt;7&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; findNodeFromTail(node);
&lt;/span&gt;&lt;span&gt;8&lt;/span&gt;     }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　这个方法从字面意思为当前节点是否在同步列队中，如果在则返回true。这个地方个人表示挺难理解的，在这里我尽量用通俗易懂的方式进行阐述。&lt;/p&gt;
&lt;p&gt;　　1、第2行，判断当前node的waitStatus值是否为-2（await()）或者node.prev是否为null，两者满足其一就返回false。判断node的waitStatus的值是否为-2很好理解，调用了await后，第一次来到这个方法，肯定是成立的。判断node.prev是否为null，这个地方是比价绕的，第一次进来同样为null。在什么时候这个条件不成立呢？当时看的时候就有点头晕，于是就开启联想模式，终于有了点思路，就是说调用await()方法的线程一定处于同步列队的head，此时他的prev一定是null，在看过signal()方法后，看到线程被其唤醒时需要重新加入同步队列。这时只能放到队列的末尾，node.prev就被指向了他的上游节点。&lt;/p&gt;
&lt;p&gt;　　2，当第一个判断全部不成立时，接着执行了第二个判断，node.next是否为null，不为null则返回true。这个地方是他已经处于了同步队列，并且已经有了下游节点。&lt;/p&gt;
&lt;p&gt;　　3，前两个判断都不满足的情况下直接调用了findNodeFromTail(node)，字面意思是从队列的末尾查找node，什么情况下会调用到这个方法呢？node本身就处于末尾时调用。&lt;/p&gt;
&lt;h4&gt; signal()方法分析&lt;/h4&gt;
&lt;h5&gt;ConditionObject.signal()&lt;/h5&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; signal() {
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;isHeldExclusively())
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;                 &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; IllegalMonitorStateException();
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;             Node first =&lt;span&gt; firstWaiter;
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (first != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt; &lt;span&gt;                doSignal(first);
&lt;/span&gt;&lt;span&gt;7&lt;/span&gt;         }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 　　获取到第一个等待者，如果不为null则执行doSignal(Node)&lt;/p&gt;
&lt;h5&gt;ConditionObject.doSignal(Node)&lt;/h5&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt;         &lt;span&gt;private&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; doSignal(Node first) {
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;             &lt;span&gt;do&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt; ( (firstWaiter = first.nextWaiter) == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;                     lastWaiter = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt;                 first.nextWaiter = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt;             } &lt;span&gt;while&lt;/span&gt; (!transferForSignal(first) &amp;amp;&amp;amp;
&lt;span&gt;7&lt;/span&gt;                      (first = firstWaiter) != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;8&lt;/span&gt;         }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 　　1、进入do-while循环体，判断first.nextWaiter是否为null，如果为null则将lastWaiter置为null。&lt;/p&gt;
&lt;p&gt;　　 2、紧接着进入while条件，继续循环的条件为调用transferForSignal(Node)返回false，并且firstWaiter不为null。&lt;/p&gt;
&lt;h5&gt;AbstractQueuedSynchronizer.transferForSignal(Node)&lt;/h5&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;     &lt;span&gt;final&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt;&lt;span&gt; transferForSignal(Node node) {
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (!compareAndSetWaitStatus(node, Node.CONDITION, 0&lt;span&gt;))
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; 
&lt;span&gt; 6&lt;/span&gt;         Node p =&lt;span&gt; enq(node);
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt; ws =&lt;span&gt; p.waitStatus;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (ws &amp;gt; 0 || !&lt;span&gt;compareAndSetWaitStatus(p, ws, Node.SIGNAL))
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;            LockSupport.unpark(node.thread);
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;     }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　1、首先将当前node的waitStatus的值由-2设置为0，并判断是否返回false。如果返回false，则说明该线程被取消。&lt;/p&gt;
&lt;p&gt;　　2、调用熟悉的enq(Node)方法，把当前node拼接到同步列队中并返回node上游节点p。&lt;/p&gt;
&lt;p&gt;　　3、此时p的waitStatus等于0。所以直接进入第二个判断条件，将p的waitStatus从0设置为-1。如果此时设置失败后，将直接当前node解锁。设置失败的前提个人理解为：p处于运行中，也就是说调用了LockSupport.unpark(p.thread)，还有一种情况就是线程被取消。&lt;/p&gt;
&lt;h3&gt;　总结&lt;/h3&gt;
&lt;p&gt;　　　1、Condition提供了一套线程等待及唤醒机制，与之匹配为Object.wait/notify等方法。但后者的使用条件为synchronized，不能直接在ReentrantLock中应用。&lt;/p&gt;
&lt;p&gt;　　　2、Condition可以在一个lock对象中存在多个，灵活方便。&lt;/p&gt;
&lt;p&gt;　　　3、ConditionObject类中也存在了大量的AQS操作，同样说明AQS是同步框架的基础框架。&lt;/p&gt;

</description>
<pubDate>Mon, 04 Dec 2017 14:05:00 +0000</pubDate>
<dc:creator>行者悟空</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/itunic/p/java-reentrant-lock2.html</dc:identifier>
</item>
<item>
<title>MongoDB中聚合工具Aggregate等的介绍与使用 - 踏雪无痕SS</title>
<link>http://www.cnblogs.com/chenpingzhao/p/7978905.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/chenpingzhao/p/7978905.html</guid>
<description>&lt;p&gt;&lt;span&gt;Aggregate是MongoDB提供的众多工具中的比较重要的一个，类似于SQL语句中的&lt;code&gt;GROUP BY&lt;/code&gt;。聚合工具可以让开发人员直接使用MongoDB原生的命令操作数据库中的数据，并且按照要求进行聚合。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;MongoDB提供了三种执行聚合的方法：Aggregation Pipleline，map-reduce功能和 Single Purpose Aggregation Operations&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;其中用来做聚合操作的几个函数是&lt;/span&gt;&lt;/p&gt;
&lt;ul readability=&quot;4&quot;&gt;&lt;li readability=&quot;3&quot;&gt;
&lt;p&gt;&lt;span&gt;&lt;code&gt;aggregate(pipeline,options)&lt;/code&gt; 指定 group 的 keys, 通过操作符 &lt;code&gt;$push/$addToSet/$sum&lt;/code&gt; 等实现简单的 reduce, 不支持函数/自定义变量&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;span&gt;&lt;code&gt;group({ key, reduce, initial [, keyf] [, cond] [, finalize] })&lt;/code&gt; 支持函数(&lt;code&gt;keyf&lt;/code&gt;) &lt;code&gt;mapReduce&lt;/code&gt; 的阉割版本&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;&lt;code&gt;mapReduce&lt;/code&gt; &lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;&lt;code&gt;count(query)&lt;/code&gt; &lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;&lt;code&gt;distinct(field,query)&lt;/code&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;&lt;span&gt;1、Aggregation Pipleline&lt;/span&gt;&lt;/h3&gt;
&lt;blockquote readability=&quot;5.3262032085561&quot;&gt;
&lt;p&gt;&lt;span&gt;MongoDB’s &lt;a class=&quot;reference internal&quot; href=&quot;https://docs.mongodb.com/manual/core/aggregation-pipeline/&quot;&gt;&lt;span class=&quot;doc&quot;&gt;aggregation framework&lt;/span&gt;&lt;/a&gt; is modeled on the concept of data processing pipelines. Documents enter a multi-stage pipeline that transforms the documents into an aggregated result.&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span&gt;管道在*nix中将上一个命令输出的数据作为下一个命令的参数。MongoDB中的管道聚合非常实用，提供高效的数据聚合，并且是MongoDB中数据聚合的首选方法&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;官方给的图：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/268981/201712/268981-20171204201516159-1664857611.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;34&quot;&gt;
&lt;pre class=&quot;brush:javascript;gutter:true;&quot;&gt;
&lt;span&gt;[
    {$match: {status: &quot;A&quot;}},
    {$group: {_id: &quot;$cust_id&quot;, total: {$sum: &quot;$amount&quot;}}}
]
&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;aggreagte是一个数组，其中包含多个对象（命令），通过遍历Pipleline数组对collection中的数据进行操作。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;code&gt;$match&lt;/code&gt;：查询条件&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;code&gt;$group&lt;/code&gt;：聚合的配置&lt;/span&gt;&lt;/p&gt;
&lt;ul readability=&quot;1.4672727272727&quot;&gt;&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;span&gt;&lt;code&gt;_id&lt;/code&gt;代表你想聚合的数据的主键，上述数据中，你想聚合所有&lt;code&gt;cust_id&lt;/code&gt;相同的条目的&lt;code&gt;amount&lt;/code&gt;的总和，那&lt;code&gt;_id&lt;/code&gt;即被设置为&lt;code&gt;cust_id&lt;/code&gt;。&lt;code&gt;_id&lt;/code&gt;为&lt;strong&gt;必须&lt;/strong&gt;，你可以填写一个空值。&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;&lt;code&gt;total&lt;/code&gt;代表你最后想输出的数据之一，这里&lt;code&gt;total&lt;/code&gt;是每条结果中&lt;code&gt;amount&lt;/code&gt;的总和。&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0.95330739299611&quot;&gt;
&lt;p&gt;&lt;span&gt;&lt;code&gt;$sum&lt;/code&gt;是一个聚合的操作符，另外的操作符你可以在&lt;a href=&quot;https://docs.mongodb.org/manual/reference/operator/aggregation-group/&quot;&gt;官方文档&lt;/a&gt;中找到。上图中的命令表示对相同主键（_id）下的&lt;code&gt;amount&lt;/code&gt;进行求和。如果你想要计算主键出现的次数，可以把命令写成如下的形式  &lt;code class=&quot;sourceCode javascript hljs&quot;&gt;&lt;span class=&quot;op&quot;&gt;{&lt;span class=&quot;dt&quot;&gt;$sum&lt;span class=&quot;op&quot;&gt;: &lt;span class=&quot;dv&quot;&gt;1&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;h4 id=&quot;聚合的过程&quot;&gt;&lt;span&gt;聚合的过程&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;&lt;span&gt;看一下图例，所有的数据先经过&lt;code&gt;$match&lt;/code&gt;命令，只留下了&lt;code&gt;status&lt;/code&gt;为A的数据，接着，对筛选出的数据进行聚合操作，对相同cust_id的数据进行计算&lt;code&gt;amount&lt;/code&gt;总和的操作，最后输出结果。&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&quot;aggregate&quot;&gt;&lt;span&gt;二、aggregate具体介绍&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;接受两个参数 &lt;code&gt;pipeline&lt;/code&gt;/&lt;code&gt;options&lt;/code&gt;, &lt;code&gt;pipeline&lt;/code&gt; 是 array, 相同的 operator 可以多次使用&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;pipeline 支持的方法&lt;/span&gt;&lt;/p&gt;
&lt;ul readability=&quot;3.5&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;&lt;code&gt;$geoNear&lt;/code&gt; geoNear命令可以在查询结果中返回每个点距离查询点的距离&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;span&gt;&lt;code&gt;$group&lt;/code&gt; 指定 group 的 &lt;code&gt;_id&lt;/code&gt;(key/keys) &lt;span&gt;和基于操作符(&lt;code&gt;$push&lt;/code&gt;/&lt;code&gt;$sum/$addToSet/&lt;/code&gt;...) 的累加运算&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;&lt;code&gt;$limit&lt;/code&gt; 限制条件&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;&lt;code&gt;$match&lt;/code&gt; 输入过滤条件&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;&lt;code&gt;$out&lt;/code&gt; 将输出结果保存到 &lt;code&gt;collection&lt;/code&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;&lt;code&gt;$project&lt;/code&gt; 修改数据流中的文档结构&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;&lt;code&gt;$redact&lt;/code&gt; 是 &lt;code&gt;$project&lt;/code&gt;/&lt;code&gt;$match&lt;/code&gt; 功能的合并&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;&lt;code&gt;$skip 跳过&lt;/code&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;&lt;code&gt;$sort&lt;/code&gt; 对结果排序&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span&gt;&lt;code&gt;$unwind&lt;/code&gt; 拆解数据&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;span&gt;&lt;code&gt;$group&lt;/code&gt; 允许用的累加操作符 &lt;code&gt;$addToSet&lt;/code&gt;/&lt;code&gt;$avg&lt;/code&gt;/&lt;code&gt;$first&lt;/code&gt;/&lt;code&gt;$last&lt;/code&gt;/&lt;code&gt;$max&lt;/code&gt;/&lt;code&gt;$min&lt;/code&gt;/&lt;code&gt;$push&lt;/code&gt;/&lt;code&gt;$sum，不被允许的累加操作符&lt;/code&gt;$each&lt;/span&gt;... ,默认最多可以用 100MB RAM, 增加&lt;code&gt;allowDiskUse&lt;/code&gt;可以让&lt;code&gt;$group&lt;/code&gt;操作更多的数据&lt;/p&gt;
&lt;p&gt;&lt;span&gt;下面是aggregate的用法&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;66&quot;&gt;
&lt;pre class=&quot;brush:javascript;gutter:true;&quot;&gt;
&lt;span&gt;db.newtest.aggregate([
    {$match: {}},
    {$skip: 10}, // 跳过 collection 的前 10 行
    {$project: {group: 1, datetime: 1, category: 1, count: 1}},
    // 如果不选择 {count: 1} 最后的结果中 count_all/count_avg = 0
    {$redact: { // redact 简单用法 过滤 group != 'A' 的行
        $cond: [{$eq: [&quot;$group&quot;, &quot;A&quot;]}, &quot;$$DESCEND&quot;, &quot;$$PRUNE&quot;]
    }},
    {$group: {
        _id: {year: {$year: &quot;$datetime&quot;}, month: {$month: &quot;$datetime&quot;}, day: {$dayOfMonth: &quot;$datetime&quot;}},
        group_unique: {$addToSet: &quot;$group&quot;},
        category_first: {$first: &quot;$category&quot;},
        category_last: {$last: &quot;$category&quot;},
        count_all: {$sum: &quot;$count&quot;},
        count_avg: {$avg: &quot;$count&quot;},
        rows: {$sum: 1}
    }},
    // 拆分 group_unique 如果开启这个选项, 会导致 _id 重复而无法写入 out 指定的 collection, 除非再 $group 一次
    // {$unwind: &quot;$group_unique&quot;},
    // 只保留这两个字段
    {$project: {group_unique: 1, rows: 1}},
    // 结果按照 _id 排序
    {$sort: {&quot;_id&quot;: 1}},
    // 只保留 50 条结果
    // {$limit: 50},
    // 结果另存
    {$out: &quot;data_agg_out&quot;},
], {
    explain: true,
    allowDiskUse: true,
    cursor: {batchSize: 0}
})
db.data_agg_out.find()
db.data_agg_out.aggregate([
    {$group: {
        _id: null,
        rows: {$sum: '$rows'}
    }}
])
db.data_agg_out.drop()
&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul readability=&quot;8.5&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;&lt;code&gt;$match&lt;/code&gt; 聚合前数据筛选&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;&lt;span&gt;&lt;code&gt;$skip&lt;/code&gt; 跳过聚合前数据集的 n 行, 如果 &lt;code&gt;{$skip: 10}&lt;/code&gt;, 最后 &lt;code&gt;rows = 5000000 - 10&lt;/code&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;span&gt;&lt;code&gt;$project&lt;/code&gt; 之选择需要的字段, 除了 &lt;code&gt;_id&lt;/code&gt; 之外其他的字段的值只能为 1&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;span&gt;&lt;code&gt;$redact&lt;/code&gt; 看了文档不明其实际使用场景, 这里只是简单筛选聚合前的数据&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;&lt;code&gt;$group&lt;/code&gt; 指定各字段的累加方法&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;span&gt;&lt;code&gt;$unwind&lt;/code&gt; 拆分 array 字段的值, 这样会导致 &lt;code&gt;_id&lt;/code&gt; 重复&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;&lt;code&gt;$project&lt;/code&gt; 可重复使用多次 最后用来过滤想要存储的字段&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;&lt;code&gt;$out&lt;/code&gt; 如果 &lt;code&gt;$group&lt;/code&gt;/&lt;code&gt;$project&lt;/code&gt;/&lt;code&gt;$redact&lt;/code&gt; 的 &lt;code&gt;_id&lt;/code&gt; 没有重复就不会报错&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;span&gt;以上方法中 &lt;code&gt;$project&lt;/code&gt;/&lt;code&gt;$redact&lt;/code&gt;/&lt;code&gt;$group&lt;/code&gt;/&lt;code&gt;$unwind&lt;/code&gt; 可以使用多次&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;group&quot;&gt;&lt;span&gt;二、group&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;&lt;code&gt;group&lt;/code&gt; 比 &lt;code&gt;aggregate&lt;/code&gt; 好的一个地方是 &lt;code&gt;map/reduce&lt;/code&gt; 都支持用 &lt;code&gt;function&lt;/code&gt; 定义, 下面是支持的选项&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;&lt;code&gt;ns&lt;/code&gt; 如果用 &lt;code&gt;db.runCommand({group: {}})&lt;/code&gt; 方式调用, 需要 &lt;code&gt;ns&lt;/code&gt; 指定 collection&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;&lt;code&gt;cond&lt;/code&gt; 聚合前筛选&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;&lt;code&gt;key&lt;/code&gt; 聚合的 key&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;&lt;code&gt;initial&lt;/code&gt; 初始化 累加 结果&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;&lt;code&gt;$reduce&lt;/code&gt; 接受 &lt;code&gt;(curr, result)&lt;/code&gt; 参数, 将 &lt;code&gt;curr&lt;/code&gt; 累加到 &lt;code&gt;result&lt;/code&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;&lt;code&gt;keyf&lt;/code&gt; 代替 &lt;code&gt;key&lt;/code&gt; 用函数生成聚合用的主键&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;&lt;code&gt;finalize&lt;/code&gt; 结果处理&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;span&gt;需要保证输出结果小于 16MB 因为 &lt;code&gt;group&lt;/code&gt; 没有提供转存选项&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;45&quot;&gt;
&lt;pre class=&quot;brush:javascript;gutter:true;&quot;&gt;
&lt;span&gt;db.data.group({
    cond: {'group': 'A'},
    // key: {'group': 1, 'category': 1},
    keyf: function(doc) {
        var dt = new Date(doc.created);
        // or
        // var dt = doc.datetime;
        return {
            year: doc.datetime.getFullYear(),
            month: doc.datetime.getMonth() + 1,
            day: doc.datetime.getDate()
        }
    },
    initial: {count: 0, category: []},
    $reduce: function(curr, result) {
        result.count += curr.count;
        if (result.category.indexOf(curr.category) == -1) {
            result.category.push(curr.category);
        }
    },
    finalize: function(result) {
        result.category = result.category.join();
    }
})
&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;如果要求聚合大量数据, 就需要用到 &lt;code&gt;mapReduce&lt;/code&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&quot;mapreduce&quot;&gt;&lt;span&gt;三、mapReduce&lt;/span&gt;&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;&lt;code&gt;query&lt;/code&gt; 聚合前筛选&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;&lt;code&gt;sort&lt;/code&gt; 对聚合前的数据排序 用来优化 reduce&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;&lt;code&gt;limit&lt;/code&gt; 限制进入 map 的数据&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;&lt;code&gt;map&lt;/code&gt;(function) emit(key, value) 在函数中指定聚合的 K/V&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;&lt;code&gt;reduce&lt;/code&gt;(function) 参数 &lt;code&gt;(key, values)&lt;/code&gt; &lt;code&gt;key&lt;/code&gt; 在 map 中定义了, &lt;code&gt;values&lt;/code&gt; 是在这个 K 下的所有 V 数组&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;&lt;code&gt;finalize&lt;/code&gt; 处理最后结果&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;&lt;code&gt;out&lt;/code&gt; 结果转存 可以选择另外一个 db&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;&lt;code&gt;scope&lt;/code&gt; 设置全局变量&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;&lt;code&gt;jdMode&lt;/code&gt;(false) 是否(默认是)把 map/reduce 中间结果转为 BSON 格式, BSON 格式可以利用磁盘空间, 这样就可以处理大规模的数据集&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;&lt;code&gt;verbose&lt;/code&gt;(true) 详细信息&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;span&gt;如果设 &lt;code&gt;jsMode&lt;/code&gt; 为 true 不进行 BSON 转换, 可以优化 reduce 的执行速度, 但是由于内存限制最大在 emit 数量小于 500,000 时使用&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;写 mapReduce 时需要注意&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;59&quot;&gt;
&lt;pre class=&quot;brush:javascript;gutter:true;&quot;&gt;
&lt;span&gt;db.data.mapReduce(function() {
    var d = this.datetime;
    var key = {
        year: d.getFullYear(),
        month: d.getMonth() + 1,
        day: d.getDate(),
    };
    var value = {
        count: this.count,
        rows: 1,
        groups: [this.group],
    }
    emit(key, value);
}, function(key, vals) {
    var reducedVal = {
        count: 0,
        groups: [],
        rows: 0,
    };
    for(var i = 0; i &amp;lt; vals.length; i++) {
        var v = vals[i];
        reducedVal.count += v.count;
        reducedVal.rows += v.rows;
        for(var j = 0; j &amp;lt; v.groups.length; j ++) {
            if (reducedVal.groups.indexOf(v.groups[j]) == -1) {
                reducedVal.groups.push(v.groups[j]);
            }
        }
    }
    return reducedVal;
}, {
    query: {},
    sort: {datetime: 1},    // 需要索引 否则结果返回空
    limit: 50000,
    finalize: function(key, reducedVal) {
        reducedVal.avg = reducedVal.count / reducedVal.rows;
        return reducedVal;
    },
    out: {
        inline: 1,
        // replace: &quot;&quot;,
        // merge: &quot;&quot;,
        // reduce: &quot;&quot;,
    },
    scope: {},
    jsMode: true
})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;span&gt;测试数据：&lt;/span&gt;&lt;/h4&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;95&quot;&gt;
&lt;pre class=&quot;brush:javascript;gutter:true;&quot;&gt;
&amp;gt; db.newtest.find()
{ &quot;_id&quot; : ObjectId(&quot;5a2544352ba57ccba824d7bf&quot;), &quot;group&quot; : &quot;E&quot;, &quot;created&quot; : 1402764223, &quot;count&quot; : 63, &quot;datetime&quot; : 1512391126, &quot;title&quot; : &quot;aa&quot;, &quot;category&quot; : &quot;C8&quot; }
{ &quot;_id&quot; : ObjectId(&quot;5a2544512ba57ccba824d7c0&quot;), &quot;group&quot; : &quot;I&quot;, &quot;created&quot; : 1413086660, &quot;count&quot; : 93, &quot;datetime&quot; : 1512391261, &quot;title&quot; : &quot;bb&quot;, &quot;category&quot; : &quot;C10&quot; }
{ &quot;_id&quot; : ObjectId(&quot;5a2544562ba57ccba824d7c1&quot;), &quot;group&quot; : &quot;H&quot;, &quot;created&quot; : 1440750343, &quot;count&quot; : 41, &quot;datetime&quot; : 1512391111, &quot;title&quot; : &quot;cc&quot;, &quot;category&quot; : &quot;C1&quot; }
{ &quot;_id&quot; : ObjectId(&quot;5a2544562ba57ccba824d7c2&quot;), &quot;group&quot; : &quot;S&quot;, &quot;created&quot; : 1437710373, &quot;count&quot; : 14, &quot;datetime&quot; : 1512392136, &quot;title&quot; : &quot;dd&quot;, &quot;category&quot; : &quot;C10&quot; }
{ &quot;_id&quot; : ObjectId(&quot;5a2544562ba57ccba824d7c3&quot;), &quot;group&quot; : &quot;Z&quot;, &quot;created&quot; : 1428307315, &quot;count&quot; : 78, &quot;datetime&quot; : 1512391166, &quot;title&quot; : &quot;ee&quot;, &quot;category&quot; : &quot;C5&quot; }
{ &quot;_id&quot; : ObjectId(&quot;5a2544562ba57ccba824d7c4&quot;), &quot;group&quot; : &quot;R&quot;, &quot;created&quot; : 1402809274, &quot;count&quot; : 74, &quot;datetime&quot; : 1512391162, &quot;title&quot; : &quot;ff&quot;, &quot;category&quot; : &quot;C9&quot; }
{ &quot;_id&quot; : ObjectId(&quot;5a2544562ba57ccba824d7c5&quot;), &quot;group&quot; : &quot;Y&quot;, &quot;created&quot; : 1400571321, &quot;count&quot; : 66, &quot;datetime&quot; : 1512139164, &quot;title&quot; : &quot;gg&quot;, &quot;category&quot; : &quot;C2&quot; }
{ &quot;_id&quot; : ObjectId(&quot;5a2544562ba57ccba824d7c6&quot;), &quot;group&quot; : &quot;L&quot;, &quot;created&quot; : 1416562128, &quot;count&quot; : 5, &quot;datetime&quot; : 1512393165, &quot;title&quot; : &quot;hh&quot;, &quot;category&quot; : &quot;C1&quot; }
{ &quot;_id&quot; : ObjectId(&quot;5a2544562ba57ccba824d7c7&quot;), &quot;group&quot; : &quot;E&quot;, &quot;created&quot; : 1414057884, &quot;count&quot; : 12, &quot;datetime&quot; : 1512391165, &quot;title&quot; : &quot;ii&quot;, &quot;category&quot; : &quot;C3&quot; }
{ &quot;_id&quot; : ObjectId(&quot;5a2544572ba57ccba824d7c8&quot;), &quot;group&quot; : &quot;L&quot;, &quot;created&quot; : 1418879346, &quot;count&quot; : 67, &quot;datetime&quot; : 1512391167, &quot;title&quot; : &quot;gg&quot;, &quot;category&quot; : &quot;C3&quot; }
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;总结&quot;&gt;&lt;span&gt;四、总结&lt;/span&gt;&lt;/h3&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;&lt;span&gt;method&lt;/span&gt;&lt;/th&gt;
&lt;th&gt;&lt;span&gt;allowDiskUse&lt;/span&gt;&lt;/th&gt;
&lt;th&gt;&lt;span&gt;out&lt;/span&gt;&lt;/th&gt;
&lt;th&gt;&lt;span&gt;function&lt;/span&gt;&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;aggregate&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt;true&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt;pipeline/collection&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt;false&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;group&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt;false&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt;pipeline&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt;true&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span&gt;mapReduce&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt;jsMode&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt;pipeline/collection&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt;true&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;ul&gt;&lt;li&gt;&lt;span&gt;&lt;code&gt;aggregate&lt;/code&gt; 基于累加操作的的聚合 可以重复利用 &lt;code&gt;$project&lt;/code&gt;/&lt;code&gt;$group&lt;/code&gt; 一层一层聚合数据, 可以用于大量数据(单输出结果小于 16MB) 不可用于分片数据&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;&lt;code&gt;mapReduce&lt;/code&gt; 可以处理超大数据集 需要严格遵守 mapReduce 中的结构一致/幂等 写法, 可增量输出/合并, 见 &lt;code&gt;out&lt;/code&gt; options&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;&lt;code&gt;group&lt;/code&gt; RDB 中的 &lt;code&gt;group by&lt;/code&gt; 简单需求可用(只有 inline 输出) 会产生 &lt;code&gt;read lock&lt;/code&gt;&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
<pubDate>Mon, 04 Dec 2017 13:16:00 +0000</pubDate>
<dc:creator>踏雪无痕SS</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/chenpingzhao/p/7978905.html</dc:identifier>
</item>
<item>
<title>开始你的第一个npm脚本工具 - beidan</title>
<link>http://www.cnblogs.com/beidan/p/6856461.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/beidan/p/6856461.html</guid>
<description>&lt;p&gt;在实际开发中，一般刚开始一个项目或者刚接手一个项目，我们会运行 npm install 下载安装所有依赖， 在实际开发中，可能也会使用各种命令行…… 来提高我们开发的效率。&lt;/p&gt;
&lt;p&gt;与它相处了这么久，你真的了解 npm 这些东西吗？&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;本篇文章会分别介绍下面几个内容：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;&lt;strong&gt;package.json&lt;/strong&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;&lt;strong&gt;解析命令行参数&lt;/strong&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;&lt;strong&gt;丰富终端交互体验&lt;/strong&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;&lt;strong&gt;发布 npm 包&lt;/strong&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;&lt;strong&gt;实战--开发小程序脚手架&lt;/strong&gt;&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div readability=&quot;32.198608964451&quot;&gt;

&lt;div readability=&quot;13&quot;&gt;项目背景：每次新建小程序页面要生成四个文件名相同的文件 ( .wxml、.wxss、.json  和 .js )，并且要在 app.json 的 pages 字段自动添加新页面路径, 在 .json 中写上当前页面的名字，非常的麻烦，所以～ 自己动手做一个 npm 脚本工具，一键生成重复性的文件，解放双手。
&lt;p&gt;最终，我们希望实现一个这样的效果：&lt;/p&gt;
&lt;/div&gt;
&lt;div readability=&quot;8&quot;&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/910706/201711/910706-20171122151556508-1991020765.png&quot; alt=&quot;&quot; width=&quot;394&quot; height=&quot;97&quot;/&gt;&lt;p&gt;在工作目录下就会有对应的文件，并且 app.json 的 pages 字段自动添加新页面路径， 对应的 .json 也有当前页面的名字.&lt;/p&gt;

&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;package.json &lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;第一步，相信大家都知道，npm init 之后，就会生成一个 package.json&lt;/p&gt;
&lt;p&gt;我们会在 package.json 中添加以下代码&lt;/p&gt;
&lt;div readability=&quot;34.33879093199&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&quot;repository&quot;&lt;span&gt;: {
  &lt;/span&gt;&quot;type&quot;: &quot;git&quot;&lt;span&gt;,
  &lt;/span&gt;&quot;url&quot;: &quot;https://github.com/beidan/nsp&quot;&lt;span&gt;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这样可以指明我的代码被托管在何处，用户可以使用 npm docs 命令打开该项目。但是如果 url 类型与 type类型不一致的话，那只会默认打开该包的 name&lt;/p&gt;
&lt;p&gt;类似于一些简单的字段意思，我将不会详细说明，具体的规范可以在 &lt;a href=&quot;http://zoucz.com/blog/2016/02/17/npm-package/&quot; target=&quot;_blank&quot;&gt;package.json 规范&lt;/a&gt; 中查看。&lt;/p&gt;
&lt;p&gt;在有些项目的 package.json 中，我们可能会看到下面这样的代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;{
  &lt;/span&gt;&quot;bin&quot;&lt;span&gt;: {
   &lt;/span&gt;&quot;nsp&quot;: &quot;./bin/index.js&quot;&lt;span&gt;
  },
  &lt;/span&gt;&quot;scripts&quot;&lt;span&gt;: {
   &lt;/span&gt;&quot;precommit&quot;: &quot;./hooks/pre-commit.js&quot;&lt;span&gt;,
   &lt;/span&gt;&quot;prepush&quot;: &quot;./hooks/pre-push&quot;&lt;span&gt;
  }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;bin 字段可以用来存放一个可执行的文件&lt;/p&gt;
&lt;p&gt;执行 npm link 命令，它将会把 nsp 这个字段复制到 npm 的全局模块安装文件夹 node_modules 内，并创建符号链接（symbolic link，软链接），也就是将 nsp 的路径加入环境变量 PATH。就可以直接在命令行中使用 nsp …… &lt;/p&gt;
&lt;p&gt;scripts 在每个命令前都会执行对应命令的 pre+scriptname 脚本，每个命令结束后会执行对应买了的 post+scriptname 脚本。如果没有定义，则不会执行对应的pre ，post命令。&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;解析命令行参数&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;为了实现功能，我们必然需要获取到用户命令行的一些参数，比如它希望新建页面，还是新建模块…然后处理获取到的数据。那么，要怎么获取到用户输入的数据？&lt;/p&gt;
&lt;p&gt;我们可以使用 process.argv 拿到序列化的参数，当然，原生的处理方法都是比较麻烦的，nodejs社区里边已经有了比较成熟的命令行管理工具，比如 &lt;a href=&quot;https://www.npmjs.com/package/commander&quot; target=&quot;_blank&quot;&gt;commander &lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div readability=&quot;12&quot;&gt;

&lt;p&gt;好的，我们找到文章上面 bin 字段对应的可执行文件，在文件开始，我们需要告诉 shell 使用何种解释器来执行代码&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
#!/usr/bin/env node   //使用env来找到node，并使用node来作为程序的解释程序。
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;usr/bin/env 是一个程序，usr/bin/env node 会找到当前 PATH 中的 node 来解释后面的代码。&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;接下来，我们对 命令行 进行一些处理&lt;/p&gt;
&lt;div readability=&quot;8&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;program
    .usage(&lt;/span&gt;'[command] [options]')  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;在help中告诉用户如何使用&lt;/span&gt;
    .command('page [pageName]')  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;定义命令行指令&lt;/span&gt;
    .alias('pa')                 &lt;span&gt;//&lt;/span&gt;&lt;span&gt;重命名，定义一个更短的指令&lt;/span&gt;
    .description('新建页面')      &lt;span&gt;//&lt;/span&gt;&lt;span&gt;描述&lt;/span&gt;
    .action((pageName) =&amp;gt;&lt;span&gt; {
       console.log(pageName);
    })
 &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 自定义帮助信息&lt;/span&gt;
   .on('--help', &lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
        console.log(&lt;/span&gt;'  Examples:'&lt;span&gt;);
        console.log(&lt;/span&gt;''&lt;span&gt;);
        console.log(&lt;/span&gt;'    $ nsp page index'&lt;span&gt;);
        console.log(&lt;/span&gt;'    $ nsp pa index'&lt;span&gt;);
        console.log();
});

program.parse(process.argv);  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;解析命令行&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;丰富终端交互体验&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;好了，通过上面的代码，我们可以正常地获取到用户输入的内容了，但是，我们在开始某些命令之前，希望先询问下用户该页面的名称，方便写入每个页面对应的 json 里面。或者，我们希望他在做一些重要决定的时候，可以让我们控制，选择输入 y 还是 n。&lt;/p&gt;
&lt;p&gt;我们可以借助 &lt;a href=&quot;https://github.com/SBoudrias/Inquirer.js&quot; target=&quot;_blank&quot;&gt;inquire&lt;/a&gt; 这个模块轻松实现，代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;47&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; questions =&lt;span&gt; [
    {
        type: &lt;/span&gt;'input',    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; input, confirm, list, rawlist, expand, checkbox, password, editor&lt;/span&gt;
        name: 'selection',     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;可以在answer用这个值获取输入的值&lt;/span&gt;
        message: '这个页面是做什么的？',   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;命令行中询问用户&lt;/span&gt;
        &lt;span&gt;default&lt;/span&gt;： &lt;span&gt;false&lt;/span&gt;,  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置默认值，一般来说，会出现在选择中&lt;/span&gt;
&lt;span&gt;    }
];

inquirer.prompt(questions).then((answers, input)&lt;/span&gt;=&amp;gt; { })  //解析问题
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;非常容易理解，我们先创建一个 questions ，这个 questions 可以是单选，多选，密码类型… 然后解析问题，进行处理。&lt;/p&gt;
&lt;p&gt;emmm…… 总感觉还少了一点什么，再用 &lt;a href=&quot;https://github.com/chalk/chalk&quot; target=&quot;_blank&quot;&gt;chalk&lt;/a&gt; 这个美化命令行的模块。&lt;/p&gt;
&lt;p&gt;看官方文档非常地直观了，可以让命令行变得色彩斑斓，就不赘述了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/910706/201711/910706-20171121170259368-1093453787.png&quot; alt=&quot;&quot; width=&quot;676&quot; height=&quot;94&quot;/&gt;&lt;/p&gt;


&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;发布 npm 包&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;理所当然，我们需要有仓库账号才允许将包发布到仓库中，可以直接去 &lt;a href=&quot;https://www.npmjs.com/search&quot; target=&quot;_blank&quot;&gt;npm&lt;/a&gt; 上注册。要FQ。&lt;/p&gt;
&lt;p&gt;如果已经注册了账号，可以用 npm login 登陆即可，使用命令行证明是否登陆成功。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
&lt;span&gt;$ npm who i am
beidan&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;登陆成功之后，就可以发布 npm 包了 &lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
$ npm publish
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;发布的时候，一般会有以下几个错误，可以选择性地阅读。&lt;/p&gt;
&lt;p&gt;1. 没有将 registry 切回最初的源。&lt;/p&gt;
&lt;p&gt;最初的 http://registry.npmjs.org 这个源国内用户访问非常慢，所以一开始很多人可能换成了国内淘宝的镜像：http://registry.npm.taobao.org。但是淘宝这个镜像没有开放上传的权限，因此会报这样的错误：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/910706/201711/910706-20171121171835008-249438929.png&quot; alt=&quot;&quot; width=&quot;720&quot; height=&quot;65&quot;/&gt;&lt;/p&gt;
&lt;p&gt;解决方法，在命令行改变源&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
npm set registry http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;registry.npmjs.org  &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;2. 每次发布都需要增加 package.json 中的 version 的版本号，更新的版本号上传的版本要大于上次。&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;实战--开发小程序脚手架&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;下面贴相关的代码 &lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;46&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; writeFile = &lt;span&gt;function&lt;/span&gt;&lt;span&gt; (path, name, tit) {
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;在 app.json 中注册页面&lt;/span&gt;
&lt;span&gt;    util.setAppInfo(appConfig);

    fileType.map((item) &lt;/span&gt;=&amp;gt;&lt;span&gt; {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (item == '.json'&lt;span&gt;) {
            let content &lt;/span&gt;= '{&quot;navigationBarTitleText&quot;: &quot;' + tit + '&quot;}'&lt;span&gt;;
            fs.writeFile(basePath &lt;/span&gt;+ item, content, (err)=&amp;gt;&lt;span&gt; {
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (err) {
                    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; console.log(err);
                }
            });
        } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
            fs.writeFile(basePath &lt;/span&gt;+ item, '' ,(err)=&amp;gt;&lt;span&gt; {
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (err) {
                    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; console.log(err);
                }
            });
        }
    })
}


&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; creatApp = &lt;span&gt;function&lt;/span&gt;&lt;span&gt; (path, name, tit) {
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;判断是否存在该目录&lt;/span&gt;
    &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (fs.existsSync(path)) {
        console.log(chalk.red(&lt;/span&gt;'该项目已存在，换个名字试试？'&lt;span&gt;))
    } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
        fs.mkdir(path, &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; (err) {
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (err) {
                console.log(err);
                &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt;&lt;span&gt; err;
            }
        })
        writeFile(path, name, tit)
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;为了优化体验，用户可能没有在指定目录下执行相关的命令，那么我们应该有个友好提示。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
process.cwd()     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;当前执行 node 命令时候的文件夹地址 &lt;/span&gt;
__dirname          &lt;span&gt;//&lt;/span&gt;&lt;span&gt;被执行的 js 文件的地址 ——文件所在目录&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;那我们可以这样判断用户是否在指定目录下&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; isCorrect  = &lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; baseUrl = path.resolve(__dirname, '../../'&lt;span&gt;),
        curUrl &lt;/span&gt;=&lt;span&gt; process.cwd();

    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(baseUrl !==&lt;span&gt; curUrl) {
        console.log(chalk.red(&lt;/span&gt;'  请在根目录下进行'&lt;span&gt;));
        process.exit();
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;




&lt;p&gt;参考资料：&lt;/p&gt;


</description>
<pubDate>Mon, 04 Dec 2017 12:55:00 +0000</pubDate>
<dc:creator>beidan</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/beidan/p/6856461.html</dc:identifier>
</item>
<item>
<title>多线程编程 - PHP 实现 - 枕边书</title>
<link>http://www.cnblogs.com/zhenbianshu/p/7978835.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/zhenbianshu/p/7978835.html</guid>
<description>&lt;p&gt;前些天帮同事查一个问题，第一次接触到了 PHP 的多线程，原以为 PHP 普遍都是单线程模型，并不适合多线程领域，花些时间翻了几个多线程的项目源码之后，发现 PHP 的多线程也颇有可取之处，活用起来，用来解决某些问题竟然非常适合。&lt;/p&gt;
&lt;p&gt;于是找了几篇文章看了下 PHP 多线程 &lt;code&gt;TSRM&lt;/code&gt; 机制的实现，也有所收获，详情可以查看下面的参考文章。本文对比多进程介绍了下多线程的优势和适用场景，提出了一种巧用方案，并使用 PHP 代码实现了多线程的常见用法。&lt;/p&gt;
&lt;p&gt;文章欢迎转载，但请注明来源：http://www.cnblogs.com/zhenbianshu/p/7978835.html， 谢谢。&lt;/p&gt;
&lt;hr/&gt;
&lt;h3 id=&quot;toc_2&quot;&gt;线程&lt;/h3&gt;
&lt;p&gt;首先说下线程：&lt;/p&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;线程(thread) 是操作系统能够进行运算调度的最小单位。它被包含在进程之中，是进程中的实际运作单位。一条线程指的是进程中一个单一顺序的控制流，一个进程中可以并发多个线程，每条线程并行执行不同的任务.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;使用多线程主要是因为它在执行效率上有很大优势。由于&lt;code&gt;线程是操作系统能够进行调度的最小单位&lt;/code&gt;：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;一个多线程程序比单线程程序被操作系统调度的概率更大，所以多线程程序一般会比单线程程序更高效；&lt;/li&gt;
&lt;li&gt;多线程程序的多个线程可以在多核 CPU 的多个核心同时运行，可以将完全发挥机器多核的优势；&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;同时对比多进程程序，多线程有以下特点：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;线程的创建和切换的系统开销都比进程要小，所以一定程度上会比多进程更高效；&lt;/li&gt;
&lt;li&gt;线程天生的共享内存空间，线程间的通信更简单，避免了进程IPC引入新的复杂度。&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;toc_3&quot;&gt;适用场景&lt;/h3&gt;
&lt;p&gt;多线程的优化是很多，可是无脑使用多线程并不能提升程序的执行效率，因为线程的创建和销毁、上下文切换、线程同步等也是有性能损耗的，耗费时间可能比顺序执行的代码还多。如：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sumSmall&lt;/code&gt;是一个从1累加到50000的函数。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/819496/201712/819496-20171204201938144-1089972248.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;上图是在主线程内执行了三次 sumSmall 和三个线程分别执行 sumSmall ，再将结果同步到一个线程的时间对比，我们会发现只在主线程执行的时间反而更短，三个线程创建、切换、同步的时间远远大过了线程异步执行节省的时间。&lt;/p&gt;
&lt;p&gt;而函数 sumLarge 从1累加到5000000，下图同一线程执行三次和三个线程执行的耗时：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/819496/201712/819496-20171204201957191-1553396658.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这次，多线程终于有效率优势了。&lt;/p&gt;
&lt;p&gt;是否使用多线程还需要根据具体需求而定，一般考虑以下两种情况：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;I/O 阻塞会使操作系统发生任务调度，阻塞当前任务，所以代码中 I/O 多的情况下，使用多线程时可以将代码并行。例如多次读整块的文件，或请求多个网络资源。&lt;/li&gt;
&lt;li&gt;多线程能充分利用 CPU，所以有多处大计算量代码时，也可以使用多线程使他们并行执行，例如上文中后一个例子。&lt;/li&gt;
&lt;/ul&gt;&lt;hr/&gt;
&lt;p&gt;PHP 默认并不支持多线程，要使用多线程需要安装 pthread 扩展，而要安装 pthread 扩展，必须使用 &lt;code&gt;--enable-maintainer-zts&lt;/code&gt; 参数重新编译 PHP，这个参数是指定编译 PHP 时使用线程安全方式。&lt;/p&gt;
&lt;h3 id=&quot;toc_5&quot;&gt;线程安全&lt;/h3&gt;
&lt;p&gt;多线程是让程序变得不安分的一个因素，在使用多线程之前，首先要考虑线程安全问题：&lt;/p&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;线程安全：线程安全是编程中的术语，指某个函数、函数库在多线程环境中被调用时，能够正确地处理多个线程之间的共享变量，使程序功能正确完成。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在传统多线程中，由于多个线程共享变量，所以可能会导致出现如下问题：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;存在一个全局数组&lt;code&gt;$arr = array('a');&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;A 线程获取数组长度为1;&lt;/li&gt;
&lt;li&gt;B 线程获取数组长度为1;&lt;/li&gt;
&lt;li&gt;A 线程 pop 出数组元素 &lt;code&gt;$a = array_pop($arr); $a = 'a';&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;B 线程也 pop 数组元素 &lt;code&gt;$b = array_pop($arr); $a = null;&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;此时 B 线程内就出现了灵异事件，明明数组长度大于0，或没有 pop 出东西;&lt;/li&gt;
&lt;/ol&gt;&lt;h3 id=&quot;toc_6&quot;&gt;PHP 实现&lt;/h3&gt;
&lt;p&gt;PHP 实现的线程安全主要是使用 &lt;code&gt;TSRM&lt;/code&gt; 机制对 &lt;code&gt;全局变量和静态变量进行了隔离&lt;/code&gt;，将全局变量和静态变量 给每个线程都复制了一份，各线程使用的都是主线程的一个备份，从而避免了变量冲突，也就不会出现线程安全问题。&lt;/p&gt;
&lt;p&gt;PHP 对多线程的封装保证了线程安全，程序员不用考虑对全局变量加各种锁来避免读写冲突了，同时也减少了出错的机会，写出的代码更加安全。&lt;/p&gt;
&lt;p&gt;但由此导致的是，子线程一旦开始运行，主线程便无法再对子线程运行细节进行调整了，线程一定程度上失去了线程之间通过全局变量进行消息传递的能力。&lt;/p&gt;
&lt;p&gt;同时 PHP 开启线程安全选项后，使用 &lt;code&gt;TSRM&lt;/code&gt; 机制分配和使用变量时也会有额外的损耗，所以在不需要多线程的 PHP 环境中，使用 PHP 的 ZTS （非线程安全） 版本就好。&lt;/p&gt;
&lt;h3 id=&quot;toc_7&quot;&gt;类和方法&lt;/h3&gt;
&lt;p&gt;PHP 将线程 封装成了 &lt;code&gt;Thread&lt;/code&gt; 类，线程的创建通过实例化一个线程对象来实现，由于类的封装性，变量的使用只能通过构造函数传入，而线程运算结果也需要通过类变量传出。&lt;/p&gt;
&lt;p&gt;下面介绍几个常用的 Thread 类方法：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;run()&lt;/code&gt;：此方法是一个抽象方法，每个线程都要实现此方法，线程开始运行后，此方法中的代码会自动执行；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;start()&lt;/code&gt;：在主线程内调用此方法以开始运行一个线程；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;join()&lt;/code&gt;：各个线程相对于主线程都是异步执行，调用此方法会等待线程执行结束；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;kill()&lt;/code&gt;：强制线程结束；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;isRunning()&lt;/code&gt;：返回线程的运行状态，线程正在执行&lt;code&gt;run()&lt;/code&gt;方法的代码时会返回 true；&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;因为线程安全的实现，PHP 的多线程开始运行后，无法再通过共享内存空间通信，线程也无法通过线程间通信复用，所以我认为 PHP 的“线程池”并没有什么意义。扩展内自带的&lt;code&gt;Pool&lt;/code&gt; 类是一个对多线程分配管理的类，这里也不再多介绍了。&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;下面是一个线程类，用来请求某一接口。接下来根据它写两个多线程的应用实例：&lt;/p&gt;
&lt;div readability=&quot;8&quot;&gt;
&lt;pre class=&quot;line-numbers&quot;&gt;
&lt;code class=&quot;language-php&quot;&gt;class Request extends Thread {
    public $url;
    public $response;
    public function __construct($url) {
        $this-&amp;gt;url = $url;
    }
    public function run() {
        $this-&amp;gt;response = file_get_contents($this-&amp;gt;url);
    }
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;toc_9&quot;&gt;异步请求&lt;/h3&gt;
&lt;p&gt;将同步的请求拆分为多个线程异步调用，以提升程序的运行效率。&lt;/p&gt;
&lt;div readability=&quot;8&quot;&gt;
&lt;pre class=&quot;line-numbers&quot;&gt;
&lt;code class=&quot;language-php&quot;&gt;$chG = new Request(&quot;www.google.com&quot;);
$chB = new Request(&quot;www.baidu.com&quot;);
$chG -&amp;gt;start();
$chB -&amp;gt;start();
$chG-&amp;gt;join();
$chB-&amp;gt;join();

$gl = $chG-&amp;gt;response;
$bd = $chB-&amp;gt;response;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;toc_10&quot;&gt;超时控制&lt;/h3&gt;
&lt;p&gt;偶然间发现公司网站某一网页上的一块内容时有时无，不知道具体实现，但这给了我使用多线程的灵感：利用线程异步实现快速失败和超时控制。&lt;/p&gt;
&lt;p&gt;我们在使用 curl 请求某个地址时，可以通过 &lt;code&gt;CURLOPT_CONNECTTIMEOUT / CURLOPT_TIMEOUT&lt;/code&gt; 参数分别设置 curl 的连接超时时间和读取数据超时时间，但总的超时时间不好控制。而且在进行数据库查询时的超时时间无法设置（鸟哥博客：&lt;a href=&quot;http://www.laruence.com/2011/04/27/1995.html&quot;&gt;为MySQL设置查询超时&lt;/a&gt;）。&lt;/p&gt;
&lt;p&gt;这时我们便可以借用多线程来实现此功能：在执行线程类的 &lt;code&gt;start()&lt;/code&gt; 方法后，不调用 &lt;code&gt;join()&lt;/code&gt; 方法，使线程一直处于异步状态，不阻塞主线程的执行。&lt;/p&gt;
&lt;p&gt;此时主线程相当于旗舰，而各子线程相当于巡航舰，旗舰到达某地后不必要一直等待巡航舰也归来，等待一段时间后离开即可，从而避免巡航舰意外时旗舰白白空等。&lt;/p&gt;
&lt;p&gt;代码：&lt;/p&gt;
&lt;div readability=&quot;10&quot;&gt;
&lt;pre class=&quot;line-numbers&quot;&gt;
&lt;code class=&quot;language-php&quot;&gt;$chG = new Request(&quot;www.google.com&quot;);
$chB = new Request(&quot;www.baidu.com&quot;);
$chG-&amp;gt;start();
$chB-&amp;gt;start();
$chB-&amp;gt;join();
// 此处不对chG执行join方法

sleep(1); // sleep一个能接受的超时时间
$gl = $chG-&amp;gt;response;
$bd = $chB-&amp;gt;response;
$bd-&amp;gt;kill();
if (!$gl) {
    $gl = &quot;&quot;; // 处理异常，或在线程类内给$gl一个默认值
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;hr/&gt;&lt;h3 id=&quot;toc_11&quot;&gt;总结&lt;/h3&gt;
&lt;p&gt;PHP 对多线程进行的封(yan)装(ge)，让人用线程用得非常不尽兴。虽然安全，也保持 PHP 简单易用的一贯风格，却无法完全发挥多线程的能力。不过各个语言各有特色和侧重点，也不必强求，爱她就要包容她 =_=。&lt;/p&gt;
&lt;p&gt;最近在重学操作系统和 Linux 内核方面的知识，对程序的认知有了很大提升，感觉非常有必要总结一下，敬请期待。&lt;/p&gt;
&lt;p&gt;关于本文有什么问题可以在下面留言交流，如果您觉得本文对您有帮助，可以点击下面的 &lt;strong&gt;&lt;code&gt;推荐&lt;/code&gt;&lt;/strong&gt; 支持一下我，博客一直在更新，欢迎 &lt;strong&gt;&lt;code&gt;关注&lt;/code&gt;&lt;/strong&gt; 。&lt;/p&gt;
&lt;p&gt;参考：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.codinglabs.org/articles/zend-thread-safety.html&quot;&gt;深入研究PHP及Zend Engine的线程安全模型&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.netkiller.cn/journal/php.thread.html&quot;&gt;PHP高级编程之多线程&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Mon, 04 Dec 2017 12:23:00 +0000</pubDate>
<dc:creator>枕边书</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/zhenbianshu/p/7978835.html</dc:identifier>
</item>
</channel>
</rss>