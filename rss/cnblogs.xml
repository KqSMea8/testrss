<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>javascript设计模式——职责链模式 - 小火柴的蓝色理想</title>
<link>http://www.cnblogs.com/xiaohuochai/p/8040195.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/xiaohuochai/p/8040195.html</guid>
<description>&lt;h2&gt;前面的话&lt;/h2&gt;
&lt;p&gt;　　职责链模式的定义是使多个对象都有机会处理请求，从而避免请求的发送者和接收者之间的耦合关系，将这些对象连成一条链，并沿着这条链传递该请求，直到有一个对象处理它为止。职责链模式的名字非常形象，一系列可能会处理请求的对象被连接成一条链，请求在这些对象之间依次传递，直到遇到一个可以处理它的对象，把这些对象称为链中的节点。本文将详细介绍职责链模式&lt;/p&gt;

&lt;h3&gt;电商订单&lt;/h3&gt;
&lt;p&gt;　　职责链模式的例子在现实中并不难找到，以下就是两个常见的跟职责链模式有关的场景&lt;/p&gt;
&lt;p&gt;　　如果早高峰能顺利挤上公交车的话，那么估计这一天都会过得很开心。因为公交车上人实在太多了，经常上车后却找不到售票员在哪，所以只好把两块钱硬币往前面递。除非运气够好，站在前面的第一个人就是售票员，否则，硬币通常要在N个人手上传递，才能最终到达售票员的手里&lt;/p&gt;
&lt;p&gt;　　中学时代的期末考试，如果平时不太老实，考试时就会被安排在第一个位置。遇到不会答的题目，就把题目编号写在小纸条上往后传递，坐在后面的同学如果也不会答，他就会把这张小纸条继续递给他后面的人&lt;/p&gt;
&lt;p&gt;　　从这两个例子中，很容易找到职责链模式的最大优点：请求发送者只需要知道链中的第一个节点，从而弱化了发送者和一组接收者之间的强联系。如果不使用职责链模式，那么在公交车上，就得先搞清楚谁是售票员，才能把硬币递给他。同样，在期末考试中，也许就要先了解同学中有哪些可以解答这道题&lt;/p&gt;
&lt;p&gt;　　假设负责一个售卖手机的电商网站，经过分别交纳500元定金和200元定金的两轮预定后（订单已在此时生成），现在已经到了正式购买的阶段。公司针对支付过定金的用户有一定的优惠政策。在正式购买后，已经支付过500元定金的用户会收到100元的商城优惠券，200元定金的用户可以收到50元的优惠券，而之前没有支付定金的用户只能进入普通购买模式，也就是没有优惠券，且在库存有限的情况下不一定保证能买到&lt;/p&gt;
&lt;p&gt;　　订单页面是PHP吐出的模板，在页面加载之初，PHP会传递给页面几个字段&lt;/p&gt;
&lt;p&gt;　　1、orderType：表示订单类型（定金用户或者普通购买用户），code的值为1的时候是500元定金用户，为2的时候是200元定金用户，为3的时候是普通购买用户&lt;/p&gt;
&lt;p&gt;　　2、pay：表示用户是否已经支付定金，值为true或者false。虽然用户已经下过500元定金的订单，但如果他一直没有支付定金，现在只能降级进入普通购买模式&lt;/p&gt;
&lt;p&gt;　　3、stock：表示当前用于普通购买的手机库存数量，已经支付过500元或者200元定金的用户不受此限制&lt;/p&gt;
&lt;p&gt;　　下面把这个流程写成代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;45&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; order =&lt;span&gt; function( orderType, pay, stock ){
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; ( orderType === &lt;span&gt;1&lt;/span&gt; ){ &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 500 元定金购买模式&lt;/span&gt;
        &lt;span&gt;if&lt;/span&gt; ( pay === &lt;span&gt;true&lt;/span&gt; ){ &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 已支付定金&lt;/span&gt;
            console.log( &lt;span&gt;'&lt;/span&gt;&lt;span&gt;500 元定金预购, 得到100 优惠券&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt; );
        }&lt;/span&gt;&lt;span&gt;else&lt;/span&gt;{ &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 未支付定金，降级到普通购买模式&lt;/span&gt;
            &lt;span&gt;if&lt;/span&gt; ( stock &amp;gt; &lt;span&gt;0&lt;/span&gt; ){ &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 用于普通购买的手机还有库存&lt;/span&gt;
                console.log( &lt;span&gt;'&lt;/span&gt;&lt;span&gt;普通购买, 无优惠券&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt; );

            }&lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;{
                console.log( &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;手机库存不足&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt; );
            }
        }
    }
    &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; ( orderType === &lt;span&gt;2&lt;/span&gt; ){ &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 200 元定金购买模式&lt;/span&gt;
        &lt;span&gt;if&lt;/span&gt; ( pay === &lt;span&gt;true&lt;/span&gt;&lt;span&gt; ){
            console.log( &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;200 元定金预购, 得到50 优惠券&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt; );
        }&lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;{
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; ( stock &amp;gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt; ){
                console.log( &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;普通购买, 无优惠券&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt; );
            }&lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;{
                console.log( &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;手机库存不足&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt; );
            }
        }
    }
    &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; ( orderType === &lt;span&gt;3&lt;/span&gt;&lt;span&gt; ){
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; ( stock &amp;gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt; ){
            console.log( &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;普通购买, 无优惠券&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt; );
        }&lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;{
            console.log( &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;手机库存不足&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt; );
        }
    }
};
order( &lt;/span&gt;&lt;span&gt;1&lt;/span&gt; , &lt;span&gt;true&lt;/span&gt;, &lt;span&gt;500&lt;/span&gt;); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 输出： 500 元定金预购, 得到100 优惠券&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　虽然得到了意料中的运行结果，但这远远算不上一段值得夸奖的代码。order函数不仅巨大到难以阅读，而且需要经常进行修改。虽然目前项目能正常运行，但接下来的维护工作无疑是个梦魇&lt;/p&gt;

&lt;h3&gt;职责链模式重构&lt;/h3&gt;
&lt;p&gt;　　现在我们职责链模式重构这段代码，先把500元订单、200元订单以及普通购买分成3个函数。接下来把orderType、pay、stock这3个字段当作参数传递给500元订单函数，如果该函数不符合处理条件，则把这个请求传递给后面的200元订单函数，如果200元订单函数依然不能处理该请求，则继续传递请求给普通购买函数，代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;62&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; order500 =&lt;span&gt; function( orderType, pay, stock ){
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; ( orderType === &lt;span&gt;1&lt;/span&gt; &amp;amp;&amp;amp; pay === &lt;span&gt;true&lt;/span&gt;&lt;span&gt; ){
        console.log( &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;500 元定金预购, 得到100 优惠券&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt; );
    }&lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;{
        order200( orderType, pay, stock ); &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 将请求传递给200 元订单&lt;/span&gt;
&lt;span&gt;    }
};
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 200 元订单&lt;/span&gt;
&lt;span&gt;var&lt;/span&gt; order200 =&lt;span&gt; function( orderType, pay, stock ){
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; ( orderType === &lt;span&gt;2&lt;/span&gt; &amp;amp;&amp;amp; pay === &lt;span&gt;true&lt;/span&gt;&lt;span&gt; ){
        console.log( &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;200 元定金预购, 得到50 优惠券&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt; );
    }&lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;{
        orderNormal( orderType, pay, stock ); &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 将请求传递给普通订单&lt;/span&gt;
&lt;span&gt;    }
};
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 普通购买订单&lt;/span&gt;
&lt;span&gt;var&lt;/span&gt; orderNormal =&lt;span&gt; function( orderType, pay, stock ){
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; ( stock &amp;gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt; ){
        console.log( &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;普通购买, 无优惠券&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt; );
    }&lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;{
        console.log( &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;手机库存不足&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt; );
    }
};

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 测试结果：&lt;/span&gt;
order500( &lt;span&gt;1&lt;/span&gt; , &lt;span&gt;true&lt;/span&gt;, &lt;span&gt;500&lt;/span&gt;); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 输出：500 元定金预购, 得到100 优惠券&lt;/span&gt;
order500( &lt;span&gt;1&lt;/span&gt;, &lt;span&gt;false&lt;/span&gt;, &lt;span&gt;500&lt;/span&gt; ); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 输出：普通购买, 无优惠券&lt;/span&gt;
order500( &lt;span&gt;2&lt;/span&gt;, &lt;span&gt;true&lt;/span&gt;, &lt;span&gt;500&lt;/span&gt; ); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 输出：200 元定金预购, 得到500 优惠券&lt;/span&gt;
order500( &lt;span&gt;3&lt;/span&gt;, &lt;span&gt;false&lt;/span&gt;, &lt;span&gt;500&lt;/span&gt; ); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 输出：普通购买, 无优惠券&lt;/span&gt;
order500( &lt;span&gt;3&lt;/span&gt;, &lt;span&gt;false&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt; ); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 输出：手机库存不足&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　可以看到，执行结果和前面那个巨大的order函数完全一样，但是代码的结构已经清晰了很多，把一个大函数拆分了3个小函数，去掉了许多嵌套的条件分支语句&lt;/p&gt;
&lt;p&gt;　　虽然已经把大函数拆分成了互不影响的3个小函数，但可以看到，请求在链条传递中的顺序非常僵硬，传递请求的代码被耦合在了业务函数之中：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; order500 =&lt;span&gt; function( orderType, pay, stock ){
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; ( orderType === &lt;span&gt;1&lt;/span&gt; &amp;amp;&amp;amp; pay === &lt;span&gt;true&lt;/span&gt;&lt;span&gt; ){
        console.log( &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;500 元定金预购, 得到100 优惠券&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt; );
    }&lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;{
        order200( orderType, pay, stock ); &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 将请求传递给200 元订单&lt;/span&gt;
&lt;span&gt;    }
};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　这依然是违反开放——封闭原则的，如果有天要增加300元预订或者去掉200元预订，意味着就必须改动这些业务函数内部。就像一根环环相扣打了死结的链条，如果要增加、拆除或者移动一个节点，就必须得先砸烂这根链条&lt;/p&gt;
&lt;p&gt;【灵活可拆分的职责链节点】&lt;/p&gt;
&lt;p&gt;　　下面采用一种更灵活的方式，来改进上面的职责链模式，目标是让链中的各个节点可以灵活拆分和重组&lt;/p&gt;
&lt;p&gt;　　首先需要改写一下分别表示3种购买模式的节点函数，约定如果某个节点不能处理请求，则返回一个特定的字符串'nextSuccessor'来表示该请求需要继续往后面传递：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; order500 =&lt;span&gt; function( orderType, pay, stock ){
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; ( orderType === &lt;span&gt;1&lt;/span&gt; &amp;amp;&amp;amp; pay === &lt;span&gt;true&lt;/span&gt;&lt;span&gt; ){
        console.log( &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;500 元定金预购，得到100 优惠券&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt; );
    }&lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;{
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;nextSuccessor&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 我不知道下一个节点是谁，反正把请求往后面传递&lt;/span&gt;
&lt;span&gt;    }
};

&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; order200 =&lt;span&gt; function( orderType, pay, stock ){
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; ( orderType === &lt;span&gt;2&lt;/span&gt; &amp;amp;&amp;amp; pay === &lt;span&gt;true&lt;/span&gt;&lt;span&gt; ){
        console.log( &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;200 元定金预购，得到50 优惠券&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt; );
    }&lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;{
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;nextSuccessor&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 我不知道下一个节点是谁，反正把请求往后面传递&lt;/span&gt;
&lt;span&gt;    }
};

&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; orderNormal =&lt;span&gt; function( orderType, pay, stock ){
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; ( stock &amp;gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt; ){
        console.log( &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;普通购买，无优惠券&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt; );
    }&lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;{
        console.log( &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;手机库存不足&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt; );
    }
};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　接下来需要把函数包装进职责链节点，定义一个构造函数Chain，在new Chain的时候传递的参数即为需要被包装的函数，同时它还拥有一个实例属性this.successor，表示在链中的下一个节点。此外Chain的prototype中还有两个函数，它们的作用如下所示：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;Chain.prototype.setNextSuccessor 指定在链中的下一个节点
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;Chain.prototype.passRequest 传递请求给某个节点&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; Chain =&lt;span&gt; function( fn ){
    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.fn =&lt;span&gt; fn;
    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.successor = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
};

Chain.prototype.setNextSuccessor &lt;/span&gt;=&lt;span&gt; function( successor ){
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;.successor =&lt;span&gt; successor;
};

Chain.prototype.passRequest &lt;/span&gt;=&lt;span&gt; function(){

    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; ret = &lt;span&gt;this&lt;/span&gt;.fn.apply( &lt;span&gt;this&lt;/span&gt;&lt;span&gt;, arguments );
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; ( ret === &lt;span&gt;'&lt;/span&gt;&lt;span&gt;nextSuccessor&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt; ){
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;.successor &amp;amp;&amp;amp; &lt;span&gt;this&lt;/span&gt;.successor.passRequest.apply( &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.successor, arguments );
    }
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; ret;
};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　现在把3个订单函数分别包装成职责链的节点：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; chainOrder500 = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Chain( order500 );
&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; chainOrder200 = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Chain( order200 );
&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; chainOrderNormal = &lt;span&gt;new&lt;/span&gt; Chain( orderNormal );
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　然后指定节点在职责链中的顺序：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;chainOrder500.setNextSuccessor( chainOrder200 );
chainOrder200.setNextSuccessor( chainOrderNormal );&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　最后把请求传递给第一个节点：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
chainOrder500.passRequest( &lt;span&gt;1&lt;/span&gt;, &lt;span&gt;true&lt;/span&gt;, &lt;span&gt;500&lt;/span&gt; ); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 输出：500 元定金预购，得到100 优惠券&lt;/span&gt;
chainOrder500.passRequest( &lt;span&gt;2&lt;/span&gt;, &lt;span&gt;true&lt;/span&gt;, &lt;span&gt;500&lt;/span&gt; ); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 输出：200 元定金预购，得到50 优惠券&lt;/span&gt;
chainOrder500.passRequest( &lt;span&gt;3&lt;/span&gt;, &lt;span&gt;true&lt;/span&gt;, &lt;span&gt;500&lt;/span&gt; ); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 输出：普通购买，无优惠券&lt;/span&gt;
chainOrder500.passRequest( &lt;span&gt;1&lt;/span&gt;, &lt;span&gt;false&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt; ); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 输出：手机库存不足&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　通过改进，可以自由灵活地增加、移除和修改链中的节点顺序，假如某天网站运营人员又想出了支持300元定金购买，那就在该链中增加一个节点即可：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
varorder300=&lt;span&gt;function(){
　　&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;具体实现略&lt;/span&gt;
&lt;span&gt;};

chainOrder300&lt;/span&gt;=&lt;span&gt;newChain(order300);
chainOrder500.setNextSuccessor(chainOrder300);
chainOrder300.setNextSuccessor(chainOrder200);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;【异步的职责链】&lt;/p&gt;
&lt;p&gt;　　上面的职责链模式中，让每个节点函数同步返回一个特定的值&quot;nextSuccessor&quot;，来表示是否把请求传递给下一个节点。而在现实开发中，经常会遇到一些异步的问题，比如要在节点函数中发起一个ajax异步请求，异步请求返回的结果才能决定是否继续在职责链中passRequet&lt;/p&gt;
&lt;p&gt;　　这时候让节点函数同步返回&quot;nextSuccessor&quot;已经没有意义了，所以要给Chain类再增加一个原型方法Chain.prototype.next，表示手动传递请求给职责链中的下一个节点：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
Chain.prototype.next=&lt;span&gt;function(){
  &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;.successor&amp;amp;&amp;amp;&lt;span&gt;this&lt;/span&gt;.successor.passRequest.apply(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.successor,arguments);
};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　下面是一个异步职责链的例子：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; fn1 = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Chain(function(){ 
  console.log( &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt; );
  &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;nextSuccessor&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
});

&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; fn2 = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Chain(function(){ 
  console.log( &lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt; );
  &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; self = &lt;span&gt;this&lt;/span&gt;&lt;span&gt;;
  setTimeout(function(){ 
    self.next();
  }, &lt;/span&gt;&lt;span&gt;1000&lt;/span&gt;&lt;span&gt; );
});

&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; fn3 = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Chain(function(){ 
  console.log( &lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt; );
});

fn1.setNextSuccessor( fn2 ).setNextSuccessor( fn3 ); 
fn1.passRequest();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　现在得到了一个特殊的链条，请求在链中的节点里传递，但节点有权利决定什么时候把请求交给下一个节点。可以想象，异步的职责链加上命令模式，可以很方便地创建一个异步ajax队列库&lt;/p&gt;
&lt;p&gt;【优缺点】&lt;/p&gt;
&lt;p&gt;　　职责链模式的最大优点就是解耦了请求发送者和N个接收者之间的复杂关系，由于不知道链中的哪个节点可以处理发出的请求，所以只需把请求传递给第一个节点即可&lt;/p&gt;
&lt;p&gt;　　在手机商城的例子中，本来要被迫维护一个充斥着条件分支语句的巨大的函数，在例子里的购买过程中只打印了一条log语句。其实在现实开发中，这里要做更多事情，比如根据订单种类弹出不同的浮层提示、渲染不同的UI节点、组合不同的参数发送给不同的cgi等。用了职责链模式之后，每种订单都有各自的处理函数而互不影响&lt;/p&gt;
&lt;p&gt;　　其次，使用了职责链模式之后，链中的节点对象可以灵活地拆分重组。增加或者删除一个节点，或者改变节点在链中的位置都是轻而易举的事情&lt;/p&gt;
&lt;p&gt;　　职责链模式还有一个优点，那就是可以手动指定起始节点，请求并不是非得从链中的第一个节点开始传递。比如在公交车的例子中，如果明确在前面的第一个人不是售票员，那当然可以越过他把公交卡递给他前面的人，这样可以减少请求在链中的传递次数，更快地找到合适的请求接受者。这在普通的条件分支语句下是做不到的，没有办法让请求越过某一个if判断&lt;/p&gt;
&lt;p&gt;　　拿代码来证明这一点，假设某一天网站中支付过定金的订单已经全部结束购买流程，在接下来的时间里只需要处理普通购买订单，所以可以直接把请求交给普通购买订单节点：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
orderNormal.passRequest(&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;false&lt;/span&gt;,&lt;span&gt;500&lt;/span&gt;); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;普通购买,无优惠券&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　如果运用得当，职责链模式可以很好地帮助我们组织代码，但这种模式也并非没有弊端，首先不能保证某个请求一定会被链中的节点处理。比如在期末考试的例子中，小纸条上的题目也许没有任何一个同学知道如何解答，此时的请求就得不到答复，而是径直从链尾离开，或者抛出一个错误异常。在这种情况下，可以在链尾增加一个保底的接受者节点来处理这种即将离开链尾的请求&lt;/p&gt;
&lt;p&gt;　　另外，职责链模式使得程序中多了一些节点对象，可能在某一次的请求传递过程中，大部分节点并没有起到实质性的作用，它们的作用仅仅是让请求传递下去，从性能方面考虑，要避免过长的职责链带来的性能损耗&lt;/p&gt;

&lt;h3&gt;AOP&lt;/h3&gt;
&lt;p&gt;　　在之前的职责链实现中，利用了一个Chain类来把普通函数包装成职责链的节点。其实利用javascript的函数式特性，有一种更加方便的方法来创建职责链&lt;/p&gt;
&lt;p&gt;　　下面改写一下Function.prototype.after函数，使得第一个函数返回'nextSuccessor'时，将请求继续传递给下一个函数，无论是返回字符串'nextSuccessor'或者false都只是一个约定，当然在这里也可以让函数返回false表示传递请求，选择'nextSuccessor'字符串是因为它看起来更能表达我们的目的，代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
Function.prototype.after =&lt;span&gt; function( fn ){
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; self = &lt;span&gt;this&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; function(){
        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; ret = self.apply( &lt;span&gt;this&lt;/span&gt;&lt;span&gt;, arguments );
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; ( ret === &lt;span&gt;'&lt;/span&gt;&lt;span&gt;nextSuccessor&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt; ){
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; fn.apply( &lt;span&gt;this&lt;/span&gt;&lt;span&gt;, arguments );
        }
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; ret;
    }
};

&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; order =&lt;span&gt; order500yuan.after( order200yuan ).after( orderNormal );
order( &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;, &lt;span&gt;true&lt;/span&gt;, &lt;span&gt;500&lt;/span&gt; ); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 输出：500 元定金预购，得到100 优惠券&lt;/span&gt;
order( &lt;span&gt;2&lt;/span&gt;, &lt;span&gt;true&lt;/span&gt;, &lt;span&gt;500&lt;/span&gt; ); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 输出：200 元定金预购，得到50 优惠券&lt;/span&gt;
order( &lt;span&gt;1&lt;/span&gt;, &lt;span&gt;false&lt;/span&gt;, &lt;span&gt;500&lt;/span&gt; ); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 输出：普通购买，无优惠券&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　用AOP来实现职责链既简单又巧妙，但这种把函数叠在一起的方式，同时也叠加了函数的作用域，如果链条太长的话，也会对性能有较大的影响&lt;/p&gt;

&lt;h3&gt;文件上传&lt;/h3&gt;
&lt;p&gt;　　&lt;a href=&quot;http://www.cnblogs.com/xiaohuochai/p/8030802.html#anchor6&quot; target=&quot;_blank&quot;&gt;迭代器模式&lt;/a&gt;中，有一个获取文件上传对象的例子：当时创建了一个迭代器来迭代获取合适的文件上传对象，其实用职责链模式可以更简单，完全不用创建这个多余的迭代器，完整代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; getActiveUploadObj =&lt;span&gt; function(){ 
  &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt;{
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; ActiveXObject(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;TXFTNActiveX.FTNUpload&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;);    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; IE 上传控件&lt;/span&gt;
  }&lt;span&gt;catch&lt;/span&gt;&lt;span&gt;(e){
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;nextSuccessor&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt; ;
  }
};

&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; getFlashUploadObj =&lt;span&gt; function(){ 
  &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; ( supportFlash() ){
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; str = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;&amp;lt;object type=&quot;application/x-shockwave-flash&quot;&amp;gt;&amp;lt;/object&amp;gt;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;; 
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; $( str ).appendTo( $(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;) );
  }
  &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;nextSuccessor&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt; ;
};
 

&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; getFormUpladObj =&lt;span&gt; function(){
  &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; $( &lt;span&gt;'&lt;/span&gt;&lt;span&gt;&amp;lt;form&amp;gt;&amp;lt;input name=&quot;file&quot; type=&quot;file&quot;/&amp;gt;&amp;lt;/form&amp;gt;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; ).appendTo( $(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;) );
};

&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; getUploadObj =&lt;span&gt; getActiveUploadObj.after( getFlashUploadObj ).after( getFormUpladObj ); 
console.log( getUploadObj() );&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　在javascript开发中，职责链模式是最容易被忽视的模式之一。实际上只要运用得当，职责链模式可以很好地帮助我们管理代码，降低发起请求的对象和处理请求的对象之间的耦合性。职责链中的节点数量和顺序是可以自由变化的，可以在运行时决定链中包含哪些节点&lt;/p&gt;
&lt;p&gt;　　无论是作用域链、原型链，还是DOM节点中的事件冒泡，都能从中找到职责链模式的影子。职责链模式还可以和组合模式结合在一起，用来连接部件和父部件，或是提高组合对象的效率&lt;/p&gt;

</description>
<pubDate>Fri, 15 Dec 2017 22:48:00 +0000</pubDate>
<dc:creator>小火柴的蓝色理想</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/xiaohuochai/p/8040195.html</dc:identifier>
</item>
<item>
<title>大数据学习（1）Hadoop安装 - 胡桥</title>
<link>http://www.cnblogs.com/huqiaoblog/p/8042205.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/huqiaoblog/p/8042205.html</guid>
<description>&lt;p&gt;Hadoop的安装其实就是HDFS和YARN集群的配置，从下面的架构图可以看出，HDFS的每一个DataNode都需要配置NameNode的位置。同理YARN中的每一个NodeManager都需要配置ResourceManager的位置。&lt;/p&gt;
&lt;blockquote readability=&quot;5.5&quot;&gt;
&lt;p&gt;NameNode和ResourceManager的作用如此重要，在集群环境下，他们存在单点问题吗？在Hadoop1.0中确实存在，不过在2.0中已经得到解决，具体参考：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://hadoop.apache.org/docs/stable/hadoop-project-dist/hadoop-hdfs/HDFSHighAvailabilityWithNFS.html&quot; target=&quot;_blank&quot;&gt;https://hadoop.apache.org/docs/stable/hadoop-project-dist/hadoop-hdfs/HDFSHighAvailabilityWithNFS.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.ibm.com/developerworks/cn/opensource/os-cn-hadoop-name-node/index.html&quot; target=&quot;_blank&quot;&gt;https://www.ibm.com/developerworks/cn/opensource/os-cn-hadoop-name-node/index.html&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/271197/201712/271197-20171216010706543-1243716039.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;




&lt;p&gt;因为每台机器上的配置都是一样的，所以配置时一般是配置好一台服务器，然后复制到其他服务器上。&lt;/p&gt;
&lt;h3&gt;JAVA_HOME&lt;/h3&gt;
&lt;p&gt;在hadoop-env.sh文件中配置JAVA_HOME.&lt;/p&gt;
&lt;h3&gt;core-site.xml&lt;/h3&gt;
&lt;p&gt;配置hdfs文件系统，通过fs.defaultFS配置hdfs的NameNode节点。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;fs.defaultFS&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;hdfs://{&lt;span&gt;hdfs-name-node-server-host}&lt;/span&gt;:9000&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;通过hadoop.tmp.dir配置hadoop运行时产生文件的存储目录&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;hadoop.tmp.dir&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;/usr/local/hadoop-data/tmp&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;hdfs-site.xml&lt;/h3&gt;
&lt;p&gt;配置文件副本数量和&lt;a href=&quot;http://blog.madhukaraphatak.com/secondary-namenode---what-it-really-do/&quot; target=&quot;_blank&quot;&gt;second namenode&lt;/a&gt;：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;dfs.replication&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;1&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;dfs.secondary.http.address&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;{second-namenode-host}&lt;/span&gt;:50090&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;yarn-site.xml&lt;/h3&gt;
&lt;p&gt;配置YARN的ResourceManager：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;yarn.resourcemanager.hostname&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;{resource-manager-host}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;和reducer获取数据的方式：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;yarn.nodemanager.aux-services&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;mapreduce_shuffle&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;最后记得把hadoop的bin和sbin目录添加到环境变量中：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
export HADOOP_HOME=/user/local/hadoop-&lt;span&gt;2.6.5&lt;/span&gt;&lt;span&gt;
export PATH&lt;/span&gt;=$PATH:$JAVA_HOME/bin:$HADOOP_HOME/bin:$HADOOP_HOME/sbin
&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;格式化namenode&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
hdfs namenode -format (hadoop namenode -format)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;先启动HDFS的NameNode：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
 hadoop-daemon.&lt;span&gt;sh&lt;/span&gt; start datanode
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在集群的DataNode上启动DataNode：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
 hadoop-daemon.&lt;span&gt;sh&lt;/span&gt; start datanode
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;查看启动结果&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
[root@server1 ~&lt;span&gt;]# jps
&lt;/span&gt;&lt;span&gt;2111&lt;/span&gt;&lt;span&gt; Jps
&lt;/span&gt;&lt;span&gt;2077&lt;/span&gt; NameNode
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果启动成功，通过http://server1:50070，可以看到类似下面的页面：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/271197/201712/271197-20171216003003996-1513431210.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;br/&gt;再启动YARN&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
[root@vcentos1 sbin]# start-yarn.&lt;span&gt;sh&lt;/span&gt;&lt;span&gt;
starting yarn daemons
starting resourcemanager, logging to &lt;/span&gt;/usr/local/hadoop-&lt;span&gt;2.6&lt;/span&gt;.&lt;span&gt;5&lt;/span&gt;/logs/yarn-root-resourcemanager-&lt;span&gt;vcentos1.out
vcentos3: starting nodemanager, logging to &lt;/span&gt;/usr/local/hadoop-&lt;span&gt;2.6&lt;/span&gt;.&lt;span&gt;5&lt;/span&gt;/logs/yarn-root-nodemanager-&lt;span&gt;vcentos3.out
vcentos2: starting nodemanager, logging to &lt;/span&gt;/usr/local/hadoop-&lt;span&gt;2.6&lt;/span&gt;.&lt;span&gt;5&lt;/span&gt;/logs/yarn-root-nodemanager-&lt;span&gt;vcentos2.out
[root@server1 sbin]# jps
&lt;/span&gt;&lt;span&gt;2450&lt;/span&gt;&lt;span&gt; ResourceManager
&lt;/span&gt;&lt;span&gt;2516&lt;/span&gt;&lt;span&gt; Jps
&lt;/span&gt;&lt;span&gt;2077&lt;/span&gt; NameNode
&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote readability=&quot;18&quot;&gt;
&lt;p&gt;&lt;strong&gt;hadoop下的sbin目录下的文件是用来管理hadoop服务的：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;hadoop-dameon.sh：用来单独启动namenode或datanode；&lt;/p&gt;
&lt;p&gt;start/stop-dfs.sh：配合/etc/hadoop/slaves，可以批量启动/关闭NameNode和集群中的其他DataNode；&lt;/p&gt;
&lt;p&gt;start/stop-yarn.sh：配合/etc/hadoop/slaves，可以批量启动/关闭ResourceManager和集群中的其他NodeManager；&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;bin目录下的文件可以提供hdfs、yarn和mapreduce服务：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;[root@server1 bin]# hadoop fs 
Usage: hadoop fs [generic options]
        [&lt;/span&gt;-appendToFile &amp;lt;localsrc&amp;gt; ... &amp;lt;dst&amp;gt;&lt;span&gt;]
        [&lt;/span&gt;-&lt;span&gt;cat&lt;/span&gt; [-ignoreCrc] &amp;lt;src&amp;gt;&lt;span&gt; ...]
        [&lt;/span&gt;-checksum &amp;lt;src&amp;gt;&lt;span&gt; ...]
        [&lt;/span&gt;-&lt;span&gt;chgrp&lt;/span&gt; [-&lt;span&gt;R] GROUP PATH...]
        [&lt;/span&gt;-&lt;span&gt;chmod&lt;/span&gt; [-R] &amp;lt;MODE[,MODE]... | OCTALMODE&amp;gt;&lt;span&gt; PATH...]
        [&lt;/span&gt;-&lt;span&gt;chown&lt;/span&gt; [-&lt;span&gt;R] [OWNER][:[GROUP]] PATH...]
        [&lt;/span&gt;-copyFromLocal [-f] [-p] [-l] &amp;lt;localsrc&amp;gt; ... &amp;lt;dst&amp;gt;&lt;span&gt;]
        [&lt;/span&gt;-copyToLocal [-p] [-ignoreCrc] [-crc] &amp;lt;src&amp;gt; ... &amp;lt;localdst&amp;gt;&lt;span&gt;]
        [&lt;/span&gt;-count [-q] [-h] &amp;lt;path&amp;gt;&lt;span&gt; ...]
        [&lt;/span&gt;-&lt;span&gt;cp&lt;/span&gt; [-f] [-p | -p[topax]] &amp;lt;src&amp;gt; ... &amp;lt;dst&amp;gt;&lt;span&gt;]
        [&lt;/span&gt;-createSnapshot &amp;lt;snapshotDir&amp;gt; [&amp;lt;snapshotName&amp;gt;&lt;span&gt;]]
        [&lt;/span&gt;-deleteSnapshot &amp;lt;snapshotDir&amp;gt; &amp;lt;snapshotName&amp;gt;&lt;span&gt;]
        [&lt;/span&gt;-&lt;span&gt;df&lt;/span&gt; [-h] [&amp;lt;path&amp;gt;&lt;span&gt; ...]]
        [&lt;/span&gt;-&lt;span&gt;du&lt;/span&gt; [-s] [-h] &amp;lt;path&amp;gt;&lt;span&gt; ...]
        [&lt;/span&gt;-&lt;span&gt;expunge]
        [&lt;/span&gt;-get [-p] [-ignoreCrc] [-crc] &amp;lt;src&amp;gt; ... &amp;lt;localdst&amp;gt;&lt;span&gt;]
        [&lt;/span&gt;-getfacl [-R] &amp;lt;path&amp;gt;&lt;span&gt;]
        [&lt;/span&gt;-getfattr [-R] {-n name | -d} [-e en] &amp;lt;path&amp;gt;&lt;span&gt;]
        [&lt;/span&gt;-getmerge [-&lt;span&gt;nl&lt;/span&gt;] &amp;lt;src&amp;gt; &amp;lt;localdst&amp;gt;&lt;span&gt;]
        [&lt;/span&gt;-&lt;span&gt;help [cmd ...]]
        [&lt;/span&gt;-&lt;span&gt;ls&lt;/span&gt; [-d] [-h] [-R] [&amp;lt;path&amp;gt;&lt;span&gt; ...]]
        [&lt;/span&gt;-&lt;span&gt;mkdir&lt;/span&gt; [-p] &amp;lt;path&amp;gt;&lt;span&gt; ...]
        [&lt;/span&gt;-moveFromLocal &amp;lt;localsrc&amp;gt; ... &amp;lt;dst&amp;gt;&lt;span&gt;]
        [&lt;/span&gt;-moveToLocal &amp;lt;src&amp;gt; &amp;lt;localdst&amp;gt;&lt;span&gt;]
        [&lt;/span&gt;-&lt;span&gt;mv&lt;/span&gt; &amp;lt;src&amp;gt; ... &amp;lt;dst&amp;gt;&lt;span&gt;]
        [&lt;/span&gt;-put [-f] [-p] [-l] &amp;lt;localsrc&amp;gt; ... &amp;lt;dst&amp;gt;&lt;span&gt;]
        [&lt;/span&gt;-renameSnapshot &amp;lt;snapshotDir&amp;gt; &amp;lt;oldName&amp;gt; &amp;lt;newName&amp;gt;&lt;span&gt;]
        [&lt;/span&gt;-&lt;span&gt;rm&lt;/span&gt; [-f] [-r|-R] [-skipTrash] &amp;lt;src&amp;gt;&lt;span&gt; ...]
        [&lt;/span&gt;-&lt;span&gt;rmdir&lt;/span&gt; [--ignore-fail-on-non-empty] &amp;lt;&lt;span&gt;dir&lt;/span&gt;&amp;gt;&lt;span&gt; ...]
        [&lt;/span&gt;-setfacl [-R] [{-b|-k} {-m|-x &amp;lt;acl_spec&amp;gt;} &amp;lt;path&amp;gt;]|[--set &amp;lt;acl_spec&amp;gt; &amp;lt;path&amp;gt;&lt;span&gt;]]
        [&lt;/span&gt;-setfattr {-n name [-v value] | -x name} &amp;lt;path&amp;gt;&lt;span&gt;]
        [&lt;/span&gt;-setrep [-R] [-&lt;span&gt;w&lt;/span&gt;] &amp;lt;rep&amp;gt; &amp;lt;path&amp;gt;&lt;span&gt; ...]
        [&lt;/span&gt;-&lt;span&gt;stat&lt;/span&gt; [format] &amp;lt;path&amp;gt;&lt;span&gt; ...]
        [&lt;/span&gt;-&lt;span&gt;tail&lt;/span&gt; [-f] &amp;lt;&lt;span&gt;file&lt;/span&gt;&amp;gt;&lt;span&gt;]
        [&lt;/span&gt;-test -[defsz] &amp;lt;path&amp;gt;&lt;span&gt;]
        [&lt;/span&gt;-text [-ignoreCrc] &amp;lt;src&amp;gt;&lt;span&gt; ...]
        [&lt;/span&gt;-touchz &amp;lt;path&amp;gt;&lt;span&gt; ...]
        [&lt;/span&gt;-usage [cmd ...]]
&lt;/pre&gt;&lt;/div&gt;

&lt;/blockquote&gt;

&lt;hr/&gt;
&lt;p&gt;参考：&lt;/p&gt;
&lt;p&gt;最新安装文档：&lt;a href=&quot;http://hadoop.apache.org/docs/current/hadoop-project-dist/hadoop-common/ClusterSetup.html&quot; target=&quot;_blank&quot;&gt;http://hadoop.apache.org/docs/current/hadoop-project-dist/hadoop-common/ClusterSetup.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;2.6.5安装文档：&lt;a href=&quot;http://hadoop.apache.org/docs/r2.6.5/hadoop-project-dist/hadoop-common/SingleCluster.html&quot; target=&quot;_blank&quot;&gt;http://hadoop.apache.org/docs/r2.6.5/hadoop-project-dist/hadoop-common/SingleCluster.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Secondary Namenode：&lt;a href=&quot;http://blog.madhukaraphatak.com/secondary-namenode---what-it-really-do/&quot; target=&quot;_blank&quot;&gt;http://blog.madhukaraphatak.com/secondary-namenode---what-it-really-do/&lt;/a&gt;&lt;/p&gt;

</description>
<pubDate>Fri, 15 Dec 2017 17:08:00 +0000</pubDate>
<dc:creator>胡桥</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/huqiaoblog/p/8042205.html</dc:identifier>
</item>
<item>
<title>NOIP2017普及组解题报告 - Persevering_For_NOIP</title>
<link>http://www.cnblogs.com/noipzylfromxj/p/NOIP2017puji.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/noipzylfromxj/p/NOIP2017puji.html</guid>
<description>&lt;p&gt;刚参加完NOIP2017普及，只考了210，于是心生不爽，写下了这篇解题报告。。。（逃&lt;/p&gt;
&lt;p&gt;第一次写博，望dalao们多多指导啊（膜&lt;/p&gt;
&lt;p&gt;第一题score，学完helloworld的人也应该都会吧，之前好多人0分或60分据说是精度炸了，后面不是又重测了么233&lt;/p&gt;
&lt;p&gt;直接给代码&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
#include &amp;lt;stdio.h&amp;gt;
&lt;span&gt;int&lt;/span&gt;&lt;span&gt; a,b,c;
&lt;/span&gt;&lt;span&gt;double&lt;/span&gt;&lt;span&gt; a1,b1,c1;
&lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt; main()
{
    scanf(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%d %d %d&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&amp;amp;a,&amp;amp;b,&amp;amp;&lt;span&gt;c);
    a1&lt;/span&gt;=a*&lt;span&gt;0.2&lt;/span&gt;&lt;span&gt;;
    b1&lt;/span&gt;=b*&lt;span&gt;0.3&lt;/span&gt;&lt;span&gt;;
    c1&lt;/span&gt;=c*&lt;span&gt;0.5&lt;/span&gt;&lt;span&gt;;
    printf(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%.lf&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,a1+b1+&lt;span&gt;c1);
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
}&lt;br/&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;许多人不会像我这么写而是除以10再去乘，毕竟都是是的整数倍&lt;/p&gt;

&lt;p&gt;第二题librarian，这道题简单分析就考了个排序+取余，没什么技术含量，可是由于这个万恶的单词，有个原本265的大佬没拼对然后就gg到165，身边还有一个dalao第三题写了好多却只有十五分，然后第二题多打了个0然后内存就炸了。。。还有某位-1没有打\n。。。（同情&lt;/p&gt;
&lt;p&gt;也是直接给代码吧&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;49&quot;&gt;
&lt;pre&gt;
#include&amp;lt;stdio.h&amp;gt;&lt;span&gt;
#include&lt;/span&gt;&amp;lt;algorithm&amp;gt;&lt;span&gt;
#include&lt;/span&gt;&amp;lt;iostream&amp;gt;
&lt;span&gt;using&lt;/span&gt; &lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; std; 
&lt;/span&gt;&lt;span&gt;int&lt;/span&gt; a[&lt;span&gt;1005&lt;/span&gt;&lt;span&gt;];
&lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt; main()
{
    &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; n,q,b,c,i,j,s=&lt;span&gt;1&lt;/span&gt;,ss=&lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
    scanf(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%d%d&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&amp;amp;n,&amp;amp;&lt;span&gt;q);
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(i=&lt;span&gt;0&lt;/span&gt;;i&amp;lt;n;i++&lt;span&gt;)
        scanf(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%d&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&amp;amp;&lt;span&gt;a[i]);
        sort(a,a&lt;/span&gt;+&lt;span&gt;n);
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(i=&lt;span&gt;0&lt;/span&gt;;i&amp;lt;q;i++&lt;span&gt;)
    {
        scanf(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%d %d&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&amp;amp;b,&amp;amp;&lt;span&gt;c);
        s&lt;/span&gt;=&lt;span&gt;1&lt;/span&gt;;ss=&lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(j=&lt;span&gt;1&lt;/span&gt;;j&amp;lt;=b;j++&lt;span&gt;)
            s&lt;/span&gt;=s*&lt;span&gt;10&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(j=&lt;span&gt;0&lt;/span&gt;;j&amp;lt;n;j++&lt;span&gt;)
        {
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(a[j]%s==&lt;span&gt;c)
            {
                printf(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%d\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,a[j]);
                ss&lt;/span&gt;=&lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
                &lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
            }    
        }
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(ss==&lt;span&gt;0&lt;/span&gt;)printf(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;-1\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
    }
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
}&lt;br/&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;第三题...先给题目吧&lt;/p&gt;


&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1214726/201712/1214726-20171215232143480-1671227981.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1214726/201712/1214726-20171215232244230-1967462907.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1214726/201712/1214726-20171215232252715-1117563111.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;




&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1214726/201712/1214726-20171215232303152-896722063.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/1214726/201712/1214726-20171215232406965-2001749369.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这道题当我看题目时感觉挺简单的，只是觉得是一个普通的dfs+剪枝，可是当真正写的时候就不知道从何写，如何剪枝，然后调试了1小时。。。未果，注释矣。。。&lt;/p&gt;
&lt;p&gt;之后，我写了一个单纯的dfs，纯搜，然后水了65分，代码如下&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;96&quot;&gt;
&lt;pre&gt;
#include &amp;lt;stdio.h&amp;gt;
&lt;span&gt;int&lt;/span&gt; m,n,i,sign=&lt;span&gt;false&lt;/span&gt;,a[&lt;span&gt;1001&lt;/span&gt;][&lt;span&gt;1001&lt;/span&gt;&lt;span&gt;],x,y,color;
&lt;/span&gt;&lt;span&gt;long&lt;/span&gt; &lt;span&gt;long&lt;/span&gt; ans=&lt;span&gt;23333333333333&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;void&lt;/span&gt; dfs(&lt;span&gt;int&lt;/span&gt; x1,&lt;span&gt;int&lt;/span&gt; y1,&lt;span&gt;int&lt;/span&gt; magic,&lt;span&gt;int&lt;/span&gt; money,&lt;span&gt;int&lt;/span&gt; w_i_c)&lt;span&gt;//&lt;/span&gt;&lt;span&gt;w_i_c=What is the color?&lt;/span&gt;
&lt;span&gt;{
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(x1==m&amp;amp;&amp;amp;y1==&lt;span&gt;m)
    {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(money&amp;lt;ans) ans=&lt;span&gt;money;
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; ;
    }
    &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;
    {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(!magic)&lt;span&gt;//&lt;/span&gt;&lt;span&gt;当未施展魔法时 &lt;/span&gt;
&lt;span&gt;        {
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(x1+&lt;span&gt;1&lt;/span&gt;&amp;lt;=m)&lt;span&gt;//&lt;/span&gt;&lt;span&gt;判边界条件 &lt;/span&gt;
&lt;span&gt;            {
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(a[x1+&lt;span&gt;1&lt;/span&gt;][y1]&amp;gt;&lt;span&gt;0&lt;/span&gt;)&lt;span&gt;//&lt;/span&gt;&lt;span&gt;当有颜色时 &lt;/span&gt;
&lt;span&gt;                {
                    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(a[x1][y1]==a[x1+&lt;span&gt;1&lt;/span&gt;][y1]) dfs(x1+&lt;span&gt;1&lt;/span&gt;,y1,&lt;span&gt;0&lt;/span&gt;,money,-&lt;span&gt;1&lt;/span&gt;&lt;span&gt;);
                    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(a[x1][y1]!=a[x1+&lt;span&gt;1&lt;/span&gt;][y1]) dfs(x1+&lt;span&gt;1&lt;/span&gt;,y1,&lt;span&gt;0&lt;/span&gt;,money+&lt;span&gt;1&lt;/span&gt;,-&lt;span&gt;1&lt;/span&gt;&lt;span&gt;);
                }&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;只需考虑颜色的变换 &lt;/span&gt;
                &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;(a[x1+&lt;span&gt;1&lt;/span&gt;][y1]==&lt;span&gt;0&lt;/span&gt;) dfs(x1+&lt;span&gt;1&lt;/span&gt;,y1,&lt;span&gt;1&lt;/span&gt;,money+&lt;span&gt;2&lt;/span&gt;&lt;span&gt;,a[x1][y1]);
            }
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(y1+&lt;span&gt;1&lt;/span&gt;&amp;lt;=&lt;span&gt;m)
            {
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(a[x1][y1+&lt;span&gt;1&lt;/span&gt;]&amp;gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
                {
                    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(a[x1][y1]==a[x1][y1+&lt;span&gt;1&lt;/span&gt;]) dfs(x1,y1+&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;0&lt;/span&gt;,money,-&lt;span&gt;1&lt;/span&gt;&lt;span&gt;);
                    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(a[x1][y1]!=a[x1][y1+&lt;span&gt;1&lt;/span&gt;]) dfs(x1,y1+&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;0&lt;/span&gt;,money+&lt;span&gt;1&lt;/span&gt;,-&lt;span&gt;1&lt;/span&gt;&lt;span&gt;);
                }
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(a[x1][y1+&lt;span&gt;1&lt;/span&gt;]==&lt;span&gt;0&lt;/span&gt;) dfs(x1,y1+&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;1&lt;/span&gt;,money+&lt;span&gt;2&lt;/span&gt;,a[x1][y1]);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;颜色就为上一个的颜色 &lt;/span&gt;
            }&lt;span&gt;//&lt;/span&gt;&lt;span&gt;同上 &lt;/span&gt;
&lt;span&gt;        }
        &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;当施展过魔法 &lt;/span&gt;
&lt;span&gt;        {
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(a[x1+&lt;span&gt;1&lt;/span&gt;][y1]!=&lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
            {
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(a[x1+&lt;span&gt;1&lt;/span&gt;][y1]==w_i_c) dfs(x1+&lt;span&gt;1&lt;/span&gt;,y1,&lt;span&gt;0&lt;/span&gt;,money,-&lt;span&gt;1&lt;/span&gt;&lt;span&gt;);
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(a[x1+&lt;span&gt;1&lt;/span&gt;][y1]!=w_i_c) dfs(x1+&lt;span&gt;1&lt;/span&gt;,y1,&lt;span&gt;0&lt;/span&gt;,money+&lt;span&gt;1&lt;/span&gt;,-&lt;span&gt;1&lt;/span&gt;&lt;span&gt;);
            }
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(a[x1][y1+&lt;span&gt;1&lt;/span&gt;]!=&lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
            {
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(a[x1][y1+&lt;span&gt;1&lt;/span&gt;]==w_i_c) dfs(x1,y1+&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;0&lt;/span&gt;,money,-&lt;span&gt;1&lt;/span&gt;&lt;span&gt;);
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(a[x1][y1+&lt;span&gt;1&lt;/span&gt;]!=w_i_c) dfs(x1,y1+&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;0&lt;/span&gt;,money+&lt;span&gt;1&lt;/span&gt;,-&lt;span&gt;1&lt;/span&gt;&lt;span&gt;);
            }
        }
    }
}
&lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt; main()
{
    scanf(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%d %d&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&amp;amp;m,&amp;amp;&lt;span&gt;n);
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; i=&lt;span&gt;1&lt;/span&gt;;i&amp;lt;=n;i++&lt;span&gt;)
    {
        scanf(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%d %d %d&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&amp;amp;x,&amp;amp;y,&amp;amp;&lt;span&gt;color);
        a[x][y]&lt;/span&gt;=color+&lt;span&gt;1&lt;/span&gt;;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;其余为0表示无色，+1保证非负性 &lt;/span&gt;
&lt;span&gt;    }
    dfs(&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;0&lt;/span&gt;,&lt;span&gt;0&lt;/span&gt;,-&lt;span&gt;1&lt;/span&gt;);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;分别代表横坐标，纵坐标，是否施展♂过魔♂法，钱，颜色；-1是一个特殊值 &lt;/span&gt;
    &lt;span&gt;if&lt;/span&gt;(ans==&lt;span&gt;23333333333333&lt;/span&gt;) printf(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;-1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果达到这个值就代表ans没有改变，说明到不了终点 &lt;/span&gt;
    &lt;span&gt;else&lt;/span&gt; printf(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%d&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,ans);
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;第四题说实话没怎么看懂...&lt;/p&gt;
&lt;p&gt;粘上一个小学生20分的代码吧。。。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;50&quot;&gt;
&lt;pre&gt;
#include&amp;lt;stdio.h&amp;gt;
&lt;span&gt;int&lt;/span&gt; sco[&lt;span&gt;500001&lt;/span&gt;]={&lt;span&gt;0&lt;/span&gt;},dis[&lt;span&gt;500001&lt;/span&gt;]={&lt;span&gt;0&lt;/span&gt;&lt;span&gt;};
&lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt; main()
{
    &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; i,j,k,n,d,ans=&lt;span&gt;0&lt;/span&gt;&lt;span&gt;,flag,start;
    scanf(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%d%d%d&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&amp;amp;n,&amp;amp;d,&amp;amp;&lt;span&gt;k);
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(i=&lt;span&gt;1&lt;/span&gt;;i&amp;lt;=n;i++&lt;span&gt;)
    {
        scanf(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%d%d&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&amp;amp;dis[i],&amp;amp;&lt;span&gt;sco[i]);
    }
    &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; sum=&lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(i=&lt;span&gt;1&lt;/span&gt;;i&amp;lt;=n;i++&lt;span&gt;)
    {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(sco[i]&amp;gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
        {
            sum&lt;/span&gt;+=&lt;span&gt;sco[i];
        }
    }
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(sum&amp;lt;&lt;span&gt;k)
    {
        printf(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;-1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
    }
    flag&lt;/span&gt;=&lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;while&lt;/span&gt;(&lt;span&gt;1&lt;/span&gt;&lt;span&gt;)
    {
        sum&lt;/span&gt;=&lt;span&gt;0&lt;/span&gt;;start=&lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
        ans&lt;/span&gt;++&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(ans&amp;lt;&lt;span&gt;d)
        {
            &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(i=&lt;span&gt;1&lt;/span&gt;;i&amp;lt;=n;i++&lt;span&gt;)
            {
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(sco[i]&amp;gt;&lt;span&gt;0&lt;/span&gt;&amp;amp;&amp;amp;dis[i]-start&amp;gt;=d-ans&amp;amp;&amp;amp;dis[i]-start&amp;lt;=d+&lt;span&gt;ans)
                {
                    sum&lt;/span&gt;+=&lt;span&gt;sco[i];
                    start&lt;/span&gt;=&lt;span&gt;dis[i];
                    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(sum&amp;gt;=&lt;span&gt;k)
                    {
                        printf(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%d&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,ans);
                        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
                    }
                }
            }
        }
        &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;
        {
            &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(i=&lt;span&gt;1&lt;/span&gt;;i&amp;lt;=n;i++&lt;span&gt;)
            {
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(sco[i]&amp;gt;&lt;span&gt;0&lt;/span&gt;&amp;amp;&amp;amp;dis[i]-start&amp;gt;=&lt;span&gt;1&lt;/span&gt;&amp;amp;&amp;amp;dis[i]-start&amp;lt;=d+&lt;span&gt;ans)
                {
                    sum&lt;/span&gt;+=&lt;span&gt;sco[i];
                    start&lt;/span&gt;=&lt;span&gt;dis[i];
                    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(sum&amp;gt;=&lt;span&gt;k)
                    {
                        printf(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%d&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,ans);
                        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
                    }
                }
            }
        }
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;今天就到这里，以后我会多多写博，把自己的意见与大家分享，有不解或志同道合者可以加qq：2396389683，再见&lt;/p&gt;

</description>
<pubDate>Fri, 15 Dec 2017 16:49:00 +0000</pubDate>
<dc:creator>Persevering_For_NOIP</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/noipzylfromxj/p/NOIP2017puji.html</dc:identifier>
</item>
<item>
<title>Guice之IOC教程 - xdecode</title>
<link>http://www.cnblogs.com/xdecode/p/8045292.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/xdecode/p/8045292.html</guid>
<description>&lt;h3&gt;Guice&lt;/h3&gt;
&lt;p&gt;在上一篇&lt;a href=&quot;http://www.cnblogs.com/xdecode/p/7933951.html&quot; target=&quot;_blank&quot;&gt;博客&lt;/a&gt;中, 我们讲解了Spring中的IOC示例与实现, 本文着重介绍Guice注入以及与Spring中的差异.&lt;/p&gt;
&lt;p&gt;Guice是Google开发的, 一个轻量级的依赖注入框架, 跟Spring最大的区别在于脱离xml配置, &lt;/p&gt;
&lt;p&gt;大量使用Annotation来实现注入, 支持属性, 构造器, setter等多种方式注入对象.&lt;/p&gt;
&lt;p&gt;Guice 2.0支持 jdk 1.6, 3.0需要1.7以上, 不然会报错ClassNotFoundException: javax.inject.Provider.&lt;/p&gt;
&lt;h3&gt;Module容器&lt;/h3&gt;
&lt;p&gt;Guice中容器即Module, 用于绑定接口 : 实现类, 类似于Spring中的applicationContext.xml.&lt;/p&gt;
&lt;p&gt;Module像是一个Map，根据一个Key获取其Value，清楚明了的逻辑. &lt;/p&gt;
&lt;p&gt;以下代码实现了一个简单的注入&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt;         Injector ij = Guice.createInjector(&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Module() {
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; &lt;span&gt;            @Override
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;             &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; configure(Binder binder) {
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;                 binder.bind(TestService.&lt;span&gt;class&lt;/span&gt;).to(ServiceImpl.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt; &lt;span&gt;        });
&lt;/span&gt;&lt;span&gt;7&lt;/span&gt;         ij.getInstance(TestService.&lt;span&gt;class&lt;/span&gt;).test();
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 支持绕过Module, 用默认配置, &lt;strong&gt;直接实例化&lt;/strong&gt;对象,&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt;         Injector ij2 =&lt;span&gt; Guice.createInjector();
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;         ij2.getInstance(&lt;strong&gt;ServiceImpl&lt;/strong&gt;.&lt;span&gt;class&lt;/span&gt;).test();
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;当然也可以使用注解的方式来声明接口的实现类, 然后Injector 从&lt;strong&gt;接口&lt;/strong&gt;中获取对象&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; @ImplementedBy(ServiceImpl.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt;&lt;span&gt; TestService {
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; 
&lt;span&gt; 4&lt;/span&gt;     &lt;span&gt;void&lt;/span&gt;&lt;span&gt; test();
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt; ---------------------------------------
&lt;span&gt; 8&lt;/span&gt; 
&lt;span&gt; 9&lt;/span&gt; Injector ij3 =&lt;span&gt; Guice.createInjector();
&lt;/span&gt;&lt;span&gt;10 &lt;/span&gt;ij3.getInstance(&lt;strong&gt;TestService&lt;/strong&gt;.&lt;span&gt;class&lt;/span&gt;).test();
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;strong&gt;@Inject属性注入&lt;/strong&gt;&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; GuiceObjectDemo {
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;strong&gt;&lt;span&gt;    @Inject
&lt;/span&gt;&lt;/strong&gt;&lt;span&gt; 4&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt;&lt;span&gt; TestService service1;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;strong&gt;&lt;span&gt;    @Inject
&lt;/span&gt;&lt;/strong&gt;&lt;span&gt; 6&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt;&lt;span&gt; TestService service2;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; 
&lt;span&gt; 8&lt;/span&gt; ---------------------------------------
&lt;span&gt; 9&lt;/span&gt; 
&lt;span&gt;10&lt;/span&gt;         GuiceObjectDemo demo = Guice.createInjector().getInstance(GuiceObjectDemo.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;        System.out.println(demo.getService());
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;         System.out.println(demo.getService2());
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;属性注入的时候, 必须通过Guice.createInjector().getInstance(GuiceObjectDemo.class);来获取实现类, 如果直接new的话, 会inject失败, 打印出两个null.&lt;/p&gt;
&lt;p&gt;这是因为如果对象不属于Guice托管, 那么他也无法得到Guice注入.&lt;/p&gt;
&lt;p&gt;如果一定要new GuiceObjectDemo()呢? 没关系, 还有另外一种写法可以满足.&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt;         GuiceObjectDemo demo1 = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; GuiceObjectDemo();
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; &lt;strong&gt;&lt;span&gt;        Guice.createInjector().injectMembers(demo1);
&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;3&lt;/span&gt;         System.out.println(demo1.getService());
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;静态属性注入&lt;/h3&gt;
&lt;p&gt;调用binder.requestStaticInjection&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt;         Guice.createInjector(&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Module() {
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; &lt;span&gt;            @Override
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;             &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; configure(Binder binder) {
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;                &lt;strong&gt; binder.requestStaticInjection(GuiceObjectDemo.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;5&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt; &lt;span&gt;        });
&lt;/span&gt;&lt;span&gt;7&lt;/span&gt;         System.out.println(GuiceObjectDemo.getService3());
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;普通属性也可以通过该方法注入, 只要把binder那边改成requestInjection即可.&lt;/p&gt;
&lt;h3&gt;构造函数注入&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;strong&gt;&lt;span&gt;    @Inject
&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;2&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; GuiceObjectDemo(TestService service1, TestService service2) {
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.service1 =&lt;span&gt; service1;
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.service2 =&lt;span&gt; service2;
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt;     }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;构造函数会自动注入多个参数, 因此只要写一个@Inject即可&lt;/p&gt;
&lt;p&gt;同理Setter注入, 只要在setXX方法上加上@Inject标签即可实现赋值.&lt;/p&gt;
&lt;h3&gt;有多个实现类的接口&lt;/h3&gt;
&lt;p&gt;此时通过上文直接写单个@Inject或者Module都无法实现, 需要引入自定义注解, 或者Names方法.&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; GuiceObjectDemo {
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;    @Inject
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;     @Named(&quot;A&quot;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt;&lt;span&gt; TestService service1;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;    @Inject
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;     @Named(&quot;B&quot;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt;&lt;span&gt; TestService service2;
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; 
&lt;span&gt;10&lt;/span&gt; ---------------------------------------
&lt;span&gt;11&lt;/span&gt; 
&lt;span&gt;12&lt;/span&gt;         &lt;span&gt;final&lt;/span&gt; GuiceObjectDemo demo1 = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; GuiceObjectDemo();
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;         Guice.createInjector(&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Module() {
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;            @Override
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;             &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; configure(Binder binder) {
&lt;/span&gt;&lt;strong&gt;&lt;span&gt;16&lt;/span&gt;                 binder.bind(TestService.&lt;span&gt;class&lt;/span&gt;).annotatedWith(Names.named(&quot;A&quot;)).to(ServiceImplA.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;                 binder.bind(TestService.&lt;span&gt;class&lt;/span&gt;).annotatedWith(Names.named(&quot;B&quot;)).to(ServiceImplB.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;                binder.requestInjection(demo1);
&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;        });
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;        System.out.println(demo1.getService());
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;         System.out.println(demo1.getService2());
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 如果不用Named注解, 则可以通过自定义注解, 其他写法都一样&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt;                  binder.bind(TestService.&lt;span&gt;class&lt;/span&gt;).annotatedWith(&lt;strong&gt;ImplA&lt;/strong&gt;.&lt;span&gt;class&lt;/span&gt;).to(ServiceImplA.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;                  binder.bind(TestService.&lt;span&gt;class&lt;/span&gt;).annotatedWith(&lt;strong&gt;ImplB&lt;/strong&gt;.&lt;span&gt;class&lt;/span&gt;).to(ServiceImplB.&lt;span&gt;class&lt;/span&gt;);
&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Provider注入 &lt;/h3&gt;
&lt;p&gt;其实就是类似于工厂注入,  对象不是直接new接口的实现类, 而是由工厂提供. &lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; &lt;strong&gt;ServiceFactory&lt;/strong&gt; &lt;span&gt;implements&lt;/span&gt; Provider&amp;lt;TestService&amp;gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;    @Override
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; TestService get() {
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; ServiceImpl();
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; 
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; 
&lt;span&gt;10&lt;/span&gt; ---------------------------------------
&lt;span&gt;11&lt;/span&gt; 
&lt;span&gt;12&lt;/span&gt; @&lt;strong&gt;ProvidedBy&lt;/strong&gt;(ServiceFactory.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt;&lt;span&gt; TestService {
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; 
&lt;span&gt;15&lt;/span&gt;     &lt;span&gt;void&lt;/span&gt;&lt;span&gt; test();
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; 
&lt;span&gt;18&lt;/span&gt; ---------------------------------------
&lt;span&gt;19&lt;/span&gt; 
&lt;span&gt;20&lt;/span&gt;         GuiceObjectDemo demo = Guice.createInjector().getInstance(GuiceObjectDemo.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;         System.out.println(demo.getService());
&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Scope&lt;/h3&gt;
&lt;p&gt;可以通过在impl类上加@Singleton来实现单例, 也可在module中管理&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt;  binder.bind(TestService.&lt;span&gt;class&lt;/span&gt;).to(ServiceImpl.&lt;span&gt;class&lt;/span&gt;).in(Scopes.&lt;strong&gt;SINGLETON&lt;/strong&gt;);
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;默认单例模式的对象, 是在第一次使用的时候才初始化, 也可以通过设置asEagerSingleton, 注入到容器后立刻初始化.&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;         Injector in = Guice.createInjector(&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Module() {
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;            @Override
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;             &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; configure(Binder binder) {
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;                 &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 调用getInstance才初始化impl&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt;                 binder.bind(ServiceImpl.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;                 &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 注入到容器后立刻初始化impl
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;                binder.bind(ServiceImpl.class).&lt;strong&gt;asEagerSingleton&lt;/strong&gt;();&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;        });
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;         Thread.sleep(3000&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;         in.getInstance(ServiceImpl.&lt;span&gt;class&lt;/span&gt;).test();
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 到这边就结束了, 通过上面的案例不难看出, , 相比于Spring IOC, Guice是一个非常轻量灵活的注入实现, 0 xml.&lt;/p&gt;

</description>
<pubDate>Fri, 15 Dec 2017 16:24:00 +0000</pubDate>
<dc:creator>xdecode</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/xdecode/p/8045292.html</dc:identifier>
</item>
<item>
<title>javascript设计模式——享元模式 - 小火柴的蓝色理想</title>
<link>http://www.cnblogs.com/xiaohuochai/p/8039957.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/xiaohuochai/p/8039957.html</guid>
<description>&lt;h2&gt;前面的话&lt;/h2&gt;
&lt;p&gt;　　享元（flyweight）模式是一种用于性能优化的模式，“fly”在这里是苍蝇的意思，意为蝇量级。享元模式的核心是运用共享技术来有效支持大量细粒度的对象。如果系统中因为创建了大量类似的对象而导致内存占用过高，享元模式就非常有用了。在javascript中，浏览器特别是移动端的浏览器分配的内存并不算多，如何节省内存就成了一件非常有意义的事情。本文将详细介绍享元模式&lt;/p&gt;

&lt;h3&gt;享元模式初识&lt;/h3&gt;
&lt;p&gt;　　假设有个内衣工厂，目前的产品有50种男式内衣和50种女士内衣，为了推销产品，工厂决定生产一些塑料模特来穿上他们的内衣拍成广告照片。正常情况下需要50个男模特和50个女模特，然后让他们每人分别穿上一件内衣来拍照。不使用享元模式的情况下，在程序里也许会这样写：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; Model =&lt;span&gt; function( sex, underwear){
    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.sex =&lt;span&gt; sex;
    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.underwear=&lt;span&gt; underwear;
};
Model.prototype.takePhoto &lt;/span&gt;=&lt;span&gt; function(){
    console.log( &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;sex= &lt;/span&gt;&lt;span&gt;'&lt;/span&gt; + &lt;span&gt;this&lt;/span&gt;.sex + &lt;span&gt;'&lt;/span&gt;&lt;span&gt; underwear=&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; + &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.underwear);
};
&lt;/span&gt;&lt;span&gt;for&lt;/span&gt; ( &lt;span&gt;var&lt;/span&gt; i = &lt;span&gt;1&lt;/span&gt;; i &amp;lt;= &lt;span&gt;50&lt;/span&gt;; i++&lt;span&gt; ){
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; maleModel = &lt;span&gt;new&lt;/span&gt; Model( &lt;span&gt;'&lt;/span&gt;&lt;span&gt;male&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;underwear&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; +&lt;span&gt; i );
    maleModel.takePhoto();
};
&lt;/span&gt;&lt;span&gt;for&lt;/span&gt; ( &lt;span&gt;var&lt;/span&gt; j = &lt;span&gt;1&lt;/span&gt;; j &amp;lt;= &lt;span&gt;50&lt;/span&gt;; j++&lt;span&gt; ){
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; femaleModel= &lt;span&gt;new&lt;/span&gt; Model( &lt;span&gt;'&lt;/span&gt;&lt;span&gt;female&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;underwear&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; +&lt;span&gt; j );
    femaleModel.takePhoto();
};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　要得到一张照片，每次都需要传入sex和underwear参数，如上所述，现在一共有50种男内衣和50种女内衣，所以一共会产生100个对象。如果将来生产了10000种内衣，那这个程序可能会因为存在如此多的对象已经提前崩溃&lt;/p&gt;
&lt;p&gt;　　下面来考虑一下如何优化这个场景。虽然有100种内衣，但很显然并不需要50个男模特和50个女模特。其实男模特和女模特各自有一个就足够了，他们可以分别穿上不同的内衣来拍照&lt;/p&gt;
&lt;p&gt;　　现在来改写一下代码，既然只需要区别男女模特，那先把underwear参数从构造函数中移除，构造函数只接收sex参数：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; Model =&lt;span&gt; function( sex ){
    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.sex =&lt;span&gt; sex;
};
Model.prototype.takePhoto &lt;/span&gt;=&lt;span&gt; function(){
    console.log( &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;sex= &lt;/span&gt;&lt;span&gt;'&lt;/span&gt; + &lt;span&gt;this&lt;/span&gt;.sex + &lt;span&gt;'&lt;/span&gt;&lt;span&gt; underwear=&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; + &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.underwear);
};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　分别创建一个男模特对象和一个女模特对象：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; maleModel = &lt;span&gt;new&lt;/span&gt; Model( &lt;span&gt;'&lt;/span&gt;&lt;span&gt;male&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt; ),
femaleModel &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; Model( &lt;span&gt;'&lt;/span&gt;&lt;span&gt;female&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; );
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　给男模特依次穿上所有的男装，并进行拍照：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;for&lt;/span&gt; ( &lt;span&gt;var&lt;/span&gt; i = &lt;span&gt;1&lt;/span&gt;; i &amp;lt;= &lt;span&gt;50&lt;/span&gt;; i++&lt;span&gt; ){
    maleModel.underwear &lt;/span&gt;= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;underwear&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; +&lt;span&gt; i;
    maleModel.takePhoto();
};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　同样，给女模特依次穿上所有的女装，并进行拍照：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;for&lt;/span&gt; ( &lt;span&gt;var&lt;/span&gt; j = &lt;span&gt;1&lt;/span&gt;; j &amp;lt;= &lt;span&gt;50&lt;/span&gt;; j++&lt;span&gt; ){
    femaleModel.underwear &lt;/span&gt;= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;underwear&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; +&lt;span&gt; j;
    femaleModel.takePhoto();
};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　可以看到，改进之后的代码，只需要两个对象便完成了同样的功能&lt;/p&gt;
&lt;p&gt;【内部状态与外部状态】&lt;/p&gt;
&lt;p&gt;　　上面的这个例子便是享元模式的雏形，享元模式要求将对象的属性划分为内部状态与外部状态（状态在这里通常指属性）。享元模式的目标是尽量减少共享对象的数量，关于如何划分内部状态和外部状态，下面的几条经验提供了一些指引&lt;/p&gt;
&lt;p&gt;　　1、内部状态存储于对象内部。&lt;/p&gt;
&lt;p&gt;　　2、内部状态可以被一些对象共享。&lt;/p&gt;
&lt;p&gt;　　3、内部状态独立于具体的场景，通常不会改变。&lt;/p&gt;
&lt;p&gt;　　4、外部状态取决于具体的场景，并根据场景而变化，外部状态不能被共享&lt;/p&gt;
&lt;p&gt;　　这样一来，便可以把所有内部状态相同的对象都指定为同一个共享的对象。而外部状态可以从对象身上剥离出来，并储存在外部&lt;/p&gt;
&lt;p&gt;　　剥离了外部状态的对象成为共享对象，外部状态在必要时被传入共享对象来组装成一个完整的对象。虽然组装外部状态成为一个完整对象的过程需要花费一定的时间，但却可以大大减少系统中的对象数量，相比之下，这点时间或许是微不足道的。因此，享元模式是一种用时间换空间的优化模式&lt;/p&gt;
&lt;p&gt;　　在上面的例子中，性别是内部状态，内衣是外部状态，通过区分这两种状态，大大减少了系统中的对象数量。通常来讲，内部状态有多少种组合，系统中便最多存在多少个对象，因为性别通常只有男女两种，所以该内衣厂商最多只需要2个对象&lt;/p&gt;
&lt;p&gt;　　使用享元模式的关键是如何区别内部状态和外部状态。可以被对象共享的属性通常被划分为内部状态，如同不管什么样式的衣服，都可以按照性别不同，穿在同一个男模特或者女模特身上，模特的性别就可以作为内部状态储存在共享对象的内部。而外部状态取决于具体的场景，并根据场景而变化，就像例子中每件衣服都是不同的，它们不能被一些对象共享，因此只能被划分为外部状态&lt;/p&gt;
&lt;p&gt;　　上面的例子还不是一个完整的享元模式，存在以下两个问题&lt;/p&gt;
&lt;p&gt;　　1、通过构造函数显式new出了男女两个model对象，在其他系统中，也许并不是一开始就需要所有的共享对象&lt;/p&gt;
&lt;p&gt;　　2、给model对象手动设置了underwear外部状态，在更复杂的系统中，这不是一个最好的方式，因为外部状态可能会相当复杂，它们与共享对象的联系会变得困难&lt;/p&gt;
&lt;p&gt;　　通过一个对象工厂来解决第一个问题，只有当某种共享对象被真正需要时，它才从工厂中被创建出来。对于第二个问题，可以用一个管理器来记录对象相关的外部状态，使这些外部状态通过某个钩子和共享对象联系起来&lt;/p&gt;

&lt;h3&gt;文件上传&lt;/h3&gt;
&lt;p&gt;【基本版本】&lt;/p&gt;
&lt;p&gt;　　在文件上传模块的开发中，文件上传功能虽然可以选择依照队列，一个一个地排队上传，但也支持同时选择2000个文件。每一个文件都对应着一个javascript上传对象的创建，往程序里同时new了2000个upload对象，结果可想而知，Chrome中还勉强能够支撑，IE下直接进入假死状态&lt;/p&gt;
&lt;p&gt;　　文件支持好几种上传方式，比如浏览器插件、Flash和表单上传等，为了简化例子，先假设只有插件和Flash这两种。不论是插件上传，还是Flash上传，原理都是一样的，当用户选择了文件之后，插件和Flash都会通知调用Window下的一个全局javascript函数，它的名字是startUpload，用户选择的文件列表被组合成一个数组files塞进该函数的参数列表里，代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; id = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
window.startUpload &lt;/span&gt;= function( uploadType, files ){ &lt;span&gt;//&lt;/span&gt;&lt;span&gt; uploadType 区分是控件还是flash&lt;/span&gt;
    &lt;span&gt;for&lt;/span&gt; ( &lt;span&gt;var&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;, file; file = files[ i++&lt;span&gt; ]; ){
        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; uploadObj = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Upload( uploadType, file.fileName, file.fileSize );
        uploadObj.init( id&lt;/span&gt;++ ); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 给upload 对象设置一个唯一的id&lt;/span&gt;
&lt;span&gt;    }
};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　当用户选择完文件之后，startUpload函数会遍历files数组来创建对应的upload对象。接下来定义Upload构造函数，它接受3个参数，分别是插件类型、文件名和文件大小。这些信息都已经被插件组装在files数组里返回，代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; Upload =&lt;span&gt; function( uploadType, fileName, fileSize ){
    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.uploadType =&lt;span&gt; uploadType;
    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.fileName =&lt;span&gt; fileName;
    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.fileSize =&lt;span&gt; fileSize;
    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.dom= &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
};
Upload.prototype.init &lt;/span&gt;=&lt;span&gt; function( id ){
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; that = &lt;span&gt;this&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.id =&lt;span&gt; id;
    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.dom = document.createElement( &lt;span&gt;'&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt; );
    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.dom.innerHTML =
    &lt;span&gt;'&lt;/span&gt;&lt;span&gt;&amp;lt;span&amp;gt;文件名称:&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;+ &lt;span&gt;this&lt;/span&gt;.fileName +&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, 文件大小: &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;+ &lt;span&gt;this&lt;/span&gt;.fileSize +&lt;span&gt;'&lt;/span&gt;&lt;span&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; +
    &lt;span&gt;'&lt;/span&gt;&lt;span&gt;&amp;lt;button class=&quot;delFile&quot;&amp;gt;删除&amp;lt;/button&amp;gt;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.dom.querySelector( &lt;span&gt;'&lt;/span&gt;&lt;span&gt;.delFile&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; ).onclick =&lt;span&gt; function(){
        that.delFile();
    }
    document.body.appendChild( &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.dom );
};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　为了简化示例，暂且去掉了upload对象的其他功能，只保留删除文件的功能，对应的方法是Upload.prototype.delFile。该方法中有一个逻辑：当被删除的文件小于3000KB时，该文件将被直接删除。否则页面中会弹出一个提示框，提示用户是否确认要删除该文件，代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
Upload.prototype.delFile =&lt;span&gt; function(){
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; ( &lt;span&gt;this&lt;/span&gt;.fileSize &amp;lt; &lt;span&gt;3000&lt;/span&gt;&lt;span&gt; ){
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;.dom.parentNode.removeChild( &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.dom );
    }
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; ( window.confirm( &lt;span&gt;'&lt;/span&gt;&lt;span&gt;确定要删除该文件吗? &lt;/span&gt;&lt;span&gt;'&lt;/span&gt; + &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.fileName ) ){
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;.dom.parentNode.removeChild( &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.dom );
    }
};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　接下来分别创建3个插件上传对象和3个Flash上传对象：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;46&quot;&gt;
&lt;pre&gt;
startUpload( &lt;span&gt;'&lt;/span&gt;&lt;span&gt;plugin&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, [
{
    fileName: &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;1.txt&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
    fileSize: &lt;/span&gt;&lt;span&gt;1000&lt;/span&gt;&lt;span&gt;
},
{
    fileName: &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;2.html&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
    fileSize: &lt;/span&gt;&lt;span&gt;3000&lt;/span&gt;&lt;span&gt;
},
{
    fileName: &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;3.txt&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
    fileSize: &lt;/span&gt;&lt;span&gt;5000&lt;/span&gt;&lt;span&gt;
}
]);
startUpload( &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;flash&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, [
{
    fileName: &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;4.txt&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
    fileSize: &lt;/span&gt;&lt;span&gt;1000&lt;/span&gt;&lt;span&gt;
},
{
    fileName: &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;5.html&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
    fileSize: &lt;/span&gt;&lt;span&gt;3000&lt;/span&gt;&lt;span&gt;
},
{
    fileName: &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;6.txt&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
    fileSize: &lt;/span&gt;&lt;span&gt;5000&lt;/span&gt;&lt;span&gt;
}
]);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;【享元模式重构】&lt;/p&gt;
&lt;p&gt;　　上一节的代码是第一版的文件上传，在这段代码里有多少个需要上传的文件，就一共创建了多少个upload对象，接下来用享元模式重构它&lt;/p&gt;
&lt;p&gt;　　首先，需要确认插件类型uploadType是内部状态，那为什么单单uploadType是内部状态呢？在文件上传的例子里，upload对象必须依赖uploadType属性才能工作，这是因为插件上传、Flash上传、表单上传的实际工作原理有很大的区别，它们各自调用的接口也是完全不一样的，必须在对象创建之初就明确它是什么类型的插件，才可以在程序的运行过程中，让它们分别调用各自的start、pause、cancel、del等方法&lt;/p&gt;
&lt;p&gt;　　一旦明确了uploadType，无论使用什么方式上传，这个上传对象都是可以被任何文件共用的。而fileName和fileSize是根据场景而变化的，每个文件的fileName和fileSize都不一样，fileName和fileSize没有办法被共享，它们只能被划分为外部状态&lt;/p&gt;
&lt;p&gt;　　明确了uploadType作为内部状态之后，再把其他的外部状态从构造函数中抽离出来，Upload构造函数中只保留uploadType参数：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; Upload =&lt;span&gt; function( uploadType){
    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.uploadType =&lt;span&gt; uploadType;
};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　Upload.prototype.init函数也不再需要，因为upload对象初始化的工作被放在了upload-Manager.add函数里面，接下来只需要定义Upload.prototype.del函数即可：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
Upload.prototype.delFile =&lt;span&gt; function( id ){
    uploadManager.setExternalState( id, &lt;/span&gt;&lt;span&gt;this&lt;/span&gt; ); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; (1)&lt;/span&gt;
    &lt;span&gt;if&lt;/span&gt; ( &lt;span&gt;this&lt;/span&gt;.fileSize &amp;lt; &lt;span&gt;3000&lt;/span&gt;&lt;span&gt; ){
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;.dom.parentNode.removeChild( &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.dom );
    }
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; ( window.confirm( &lt;span&gt;'&lt;/span&gt;&lt;span&gt;确定要删除该文件吗? &lt;/span&gt;&lt;span&gt;'&lt;/span&gt; + &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.fileName ) ){
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;.dom.parentNode.removeChild( &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.dom );
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　在开始删除文件之前，需要读取文件的实际大小，而文件的实际大小被储存在外部管理器uploadManager中，所以在这里需要通过uploadManager.setExternalState方法给共享对象设置正确的fileSize，上段代码中的(1)处表示把当前id对应的对象的外部状态都组装到共享对象中&lt;/p&gt;
&lt;p&gt;　　接下来定义一个工厂来创建upload对象，如果某种内部状态对应的共享对象已经被创建过，那么直接返回这个对象，否则创建一个新的对象：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; UploadFactory =&lt;span&gt; (function(){
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; createdFlyWeightObjs =&lt;span&gt; {};
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; {
        create: function( uploadType){
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; ( createdFlyWeightObjs [ uploadType] ){
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; createdFlyWeightObjs [ uploadType];
            }
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; createdFlyWeightObjs [ uploadType] = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Upload( uploadType);
        }
    }
})();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　现在来完善前面提到的uploadManager对象，它负责向UploadFactory提交创建对象的请求，并用一个uploadDatabase对象保存所有upload对象的外部状态，以便在程序运行过程中给upload共享对象设置外部状态，代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; uploadManager =&lt;span&gt; (function(){
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; uploadDatabase =&lt;span&gt; {};
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; {
        add: function( id, uploadType, fileName, fileSize ){
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; flyWeightObj =&lt;span&gt; UploadFactory.create( uploadType );
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; dom = document.createElement( &lt;span&gt;'&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt; );
            dom.innerHTML &lt;/span&gt;=
            &lt;span&gt;'&lt;/span&gt;&lt;span&gt;&amp;lt;span&amp;gt;文件名称:&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;+ fileName +&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, 文件大小: &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;+ fileSize +&lt;span&gt;'&lt;/span&gt;&lt;span&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; +
            &lt;span&gt;'&lt;/span&gt;&lt;span&gt;&amp;lt;button class=&quot;delFile&quot;&amp;gt;删除&amp;lt;/button&amp;gt;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
            dom.querySelector( &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;.delFile&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; ).onclick =&lt;span&gt; function(){
                flyWeightObj.delFile( id );
            }

            document.body.appendChild( dom );
            uploadDatabase[ id ] &lt;/span&gt;=&lt;span&gt; {
                fileName: fileName,
                fileSize: fileSize,
                dom: dom
            };
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; flyWeightObj ;
        },
        setExternalState: function( id, flyWeightObj ){
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; uploadData =&lt;span&gt; uploadDatabase[ id ];
            &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; ( &lt;span&gt;var&lt;/span&gt; i &lt;span&gt;in&lt;/span&gt;&lt;span&gt; uploadData ){
                flyWeightObj[ i ] &lt;/span&gt;=&lt;span&gt; uploadData[ i ];
            }
        }
    }
})();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　然后是开始触发上传动作的startUpload函数：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; id = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
window.startUpload &lt;/span&gt;=&lt;span&gt; function( uploadType, files ){
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; ( &lt;span&gt;var&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;, file; file = files[ i++&lt;span&gt; ]; ){
        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; uploadObj = uploadManager.add( ++&lt;span&gt;id, uploadType, file.fileName, file.fileSize );
    }
};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　最后是测试时间，运行下面的代码后，可以发现运行结果跟用享元模式重构之前一致：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;46&quot;&gt;
&lt;pre&gt;
startUpload( &lt;span&gt;'&lt;/span&gt;&lt;span&gt;plugin&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, [
{
    fileName: &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;1.txt&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
    fileSize: &lt;/span&gt;&lt;span&gt;1000&lt;/span&gt;&lt;span&gt;
},
{
    fileName: &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;2.html&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
    fileSize: &lt;/span&gt;&lt;span&gt;3000&lt;/span&gt;&lt;span&gt;
},
{
    fileName: &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;3.txt&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
    fileSize: &lt;/span&gt;&lt;span&gt;5000&lt;/span&gt;&lt;span&gt;
}
]);
startUpload( &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;flash&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, [
{
    fileName: &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;4.txt&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
    fileSize: &lt;/span&gt;&lt;span&gt;1000&lt;/span&gt;&lt;span&gt;
},
{
    fileName: &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;5.html&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
    fileSize: &lt;/span&gt;&lt;span&gt;3000&lt;/span&gt;&lt;span&gt;
},
{
    fileName: &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;6.txt&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,

    fileSize: &lt;/span&gt;&lt;span&gt;5000&lt;/span&gt;&lt;span&gt;
}
]);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　享元模式重构之前的代码里一共创建了6个upload对象，而通过享元模式重构之后，对象的数量减少为2，更幸运的是，就算现在同时上传2000个文件，需要创建的upload对象数量依然是2&lt;/p&gt;

&lt;h3&gt;适用性&lt;/h3&gt;
&lt;p&gt;　　享元模式是一种很好的性能优化方案，但它也会带来一些复杂性的问题，从前面两组代码的比较可以看到，使用了享元模式之后，需要分别多维护一个factory对象和一个manager对象，在大部分不必要使用享元模式的环境下，这些开销是可以避免的&lt;/p&gt;
&lt;p&gt;　　享元模式带来的好处很大程度上取决于如何使用以及何时使用，一般来说，以下情况发生时便可以使用享元模式&lt;/p&gt;
&lt;p&gt;　　1、一个程序中使用了大量的相似对象&lt;/p&gt;
&lt;p&gt;　　2、由于使用了大量对象，造成很大的内存开销&lt;/p&gt;
&lt;p&gt;　　3、对象的大多数状态都可以变为外部状态&lt;/p&gt;
&lt;p&gt;　　4、剥离出对象的外部状态之后，可以用相对较少的共享对象取代大量对象。可以看到，文件上传的例子完全符合这四点&lt;/p&gt;
&lt;p&gt;　　实现享元模式的关键是把内部状态和外部状态分离开来。有多少种内部状态的组合，系统中便最多存在多少个共享对象，而外部状态储存在共享对象的外部，在必要时被传入共享对象来组装成一个完整的对象。现在来考虑两种极端的情况，即对象没有外部状态和没有内部状态的时候&lt;/p&gt;
&lt;p&gt;【没有内部状态的享元】&lt;/p&gt;
&lt;p&gt;　　在文件上传的例子中，分别进行过插件调用和Flash调用，即startUpload('plugin',[])和startUpload(flash,[])，导致程序中创建了内部状态不同的两个共享对象。在文件上传程序里，一般都会提前通过特性检测来选择一种上传方式，如果浏览器支持插件就用插件上传，如果不支持插件，就用Flash上传。那么，什么情况下既需要插件上传又需要Flash上传呢？&lt;/p&gt;
&lt;p&gt;　　实际上这个需求是存在的，很多网盘都提供了极速上传（控件）与普通上传（Flash）两种模式，如果极速上传不好使（可能是没有安装控件或者控件损坏），用户还可以随时切换到普通上传模式，所以这里确实是需要同时存在两个不同的upload共享对象&lt;/p&gt;
&lt;p&gt;　　但不是每个网站都必须做得如此复杂，很多小一些的网站就只支持单一的上传方式。假设我们是这个网站的开发者，不需要考虑极速上传与普通上传之间的切换，这意味着在之前的代码中作为内部状态的uploadType属性是可以删除掉的&lt;/p&gt;
&lt;p&gt;　　在继续使用享元模式的前提下，构造函数Upload就变成了无参数的形式：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; Upload = function(){};
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　其他属性如fileName、fileSize、dom依然可以作为外部状态保存在共享对象外部。在uploadType作为内部状态的时候，它可能为控件，也可能为Flash，所以当时最多可以组合出两个共享对象。而现在已经没有了内部状态，这意味着只需要唯一的一个共享对象。现在要改写创建享元对象的工厂，代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; UploadFactory =&lt;span&gt; (function(){ 
  &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; uploadObj;
  &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; {
   create: function(){ 
     &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; ( uploadObj ){
      &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; uploadObj;
    }
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; uploadObj = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Upload();
    })();
  }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　管理器部分的代码不需要改动，还是负责剥离和组装外部状态。可以看到，当对象没有内部状态的时候，生产共享对象的工厂实际上变成了一个单例工厂。虽然这时候的共享对象没有内部状态的区分，但还是有剥离外部状态的过程，依然倾向于称之为享元模式&lt;/p&gt;

&lt;h3&gt;对象池&lt;/h3&gt;
&lt;p&gt;　　对象池维护一个装载空闲对象的池子，如果需要对象的时候，不是直接new，而是转从对象池里获取。如果对象池里没有空闲对象，则创建一个新的对象，当获取出的对象完成它的职责之后，再进入池子等待被下次获取&lt;/p&gt;
&lt;p&gt;　　对象池的原理很好理解，比如我们组人手一本《javascript权威指南》，从节约的角度来讲，这并不是很划算，因为大部分时间这些书都被闲置在各自的书架上，所以我们一开始就只买一本，或者一起建立一个小型图书馆（对象池），需要看书的时候就从图书馆里借，看完了之后再把书还回图书馆。如果同时有三个人要看这本书，而现在图书馆里只有两本，那我们再马上去书店买一本放入图书馆&lt;/p&gt;
&lt;p&gt;　　对象池技术的应用非常广泛，HTTP连接池和数据库连接池都是其代表应用。在Web前端开发中，对象池使用最多的场景大概就是跟DOM有关的操作。很多空间和时间都消耗在了DOM节点上，如何避免频繁地创建和删除DOM节点就成了一个有意义的话题&lt;/p&gt;
&lt;p&gt;　　假设开发一个地图应用，地图上经常会出现一些标志地名的小气泡，叫它toolTip。在搜索附近地图的时候，页面里出现了2个小气泡。当再搜索附近的兰州拉面馆时，页面中出现了6个小气泡。按照对象池的思想，在第二次搜索开始之前，并不会把第一次创建的2个小气泡删除掉，而是把它们放进对象池。这样在第二次的搜索结果页面里，只需要再创建4个小气泡而不是6个&lt;/p&gt;
&lt;p&gt;　　先定义一个获取小气泡节点的工厂，作为对象池的数组成为私有属性被包含在工厂闭包里，这个工厂有两个暴露对外的方法，create表示获取一个div节点，recover表示回收一个div节点：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; toolTipFactory =&lt;span&gt; (function(){
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; toolTipPool = []; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; toolTip 对象池&lt;/span&gt;
    &lt;span&gt;return&lt;/span&gt;&lt;span&gt; {
        create: function(){
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; ( toolTipPool.length === &lt;span&gt;0&lt;/span&gt; ){ &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 如果对象池为空&lt;/span&gt;
                &lt;span&gt;var&lt;/span&gt; div = document.createElement( &lt;span&gt;'&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; ); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 创建一个dom&lt;/span&gt;
&lt;span&gt;                document.body.appendChild( div );
                recovereturn div;
            }&lt;/span&gt;&lt;span&gt;else&lt;/span&gt;{ &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 如果对象池里不为空&lt;/span&gt;
                &lt;span&gt;return&lt;/span&gt; toolTipPool.shift(); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 则从对象池中取出一个dom&lt;/span&gt;
&lt;span&gt;            }
        },
        recover: function( tooltipDom ){
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; toolTipPool.push( tooltipDom ); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 对象池回收dom&lt;/span&gt;
&lt;span&gt;        }
    }
})();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　现在把时钟拨回进行第一次搜索的时刻，目前需要创建2个小气泡节点，为了方便回收，用一个数组ary来记录它们：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; ary =&lt;span&gt; [];
&lt;/span&gt;&lt;span&gt;for&lt;/span&gt; ( &lt;span&gt;var&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;, str; str = [ &lt;span&gt;'&lt;/span&gt;&lt;span&gt;A&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;B&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; ][ i++&lt;span&gt; ]; ){
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; toolTip =&lt;span&gt; toolTipFactory.create();
    toolTip.innerHTML &lt;/span&gt;=&lt;span&gt; str;
    ary.push( toolTip );
};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　接下来假设地图需要开始重新绘制，在此之前要把这两个节点回收进对象池：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;for&lt;/span&gt; ( &lt;span&gt;var&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;, toolTip; toolTip = ary[ i++&lt;span&gt; ]; ){
    toolTipFactory.recover( toolTip );
};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　再创建6个小气泡：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;for&lt;/span&gt; ( &lt;span&gt;var&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;, str; str = [ &lt;span&gt;'&lt;/span&gt;&lt;span&gt;A&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;B&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;C&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;D&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;E&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;F&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; ][ i++&lt;span&gt; ]; ){
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; toolTip =&lt;span&gt; toolTipFactory.create();
    toolTip.innerHTML &lt;/span&gt;=&lt;span&gt; str;
};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　页面中出现了内容分别为A、B、C、D、E、F的6个节点，上一次创建好的节点被共享给了下一次操作。对象池跟享元模式的思想有点相似，虽然innerHTML的值A、B、C、D等也可以看成节点的外部状态，但在这里并没有主动分离内部状态和外部状态的过程&lt;/p&gt;
&lt;p&gt;【通用对象池实现】&lt;/p&gt;
&lt;p&gt;　　还可以在对象池工厂里，把创建对象的具体过程封装起来，实现一个通用的对象池：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; objectPoolFactory =&lt;span&gt; function( createObjFn ){
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; objectPool =&lt;span&gt; [];
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; {
        create: function(){
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; obj = objectPool.length === &lt;span&gt;0&lt;/span&gt; ?&lt;span&gt;
            createObjFn.apply( &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;, arguments ) : objectPool.shift();
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; obj;
        },
        recover: function( obj ){
            objectPool.push( obj );

        }
    }
};

&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; iframeFactory =&lt;span&gt; objectPoolFactory( function(){
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; iframe = document.createElement( &lt;span&gt;'&lt;/span&gt;&lt;span&gt;iframe&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt; );
    document.body.appendChild( iframe );
    iframe.onload &lt;/span&gt;=&lt;span&gt; function(){
        iframe.onload &lt;/span&gt;= &lt;span&gt;null&lt;/span&gt;; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 防止iframe 重复加载的bug&lt;/span&gt;
        iframeFactory.recover( iframe ); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; iframe 加载完成之后回收节点&lt;/span&gt;
&lt;span&gt;    }
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; iframe;
});

&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; iframe1 =&lt;span&gt; iframeFactory.create();
iframe1.src &lt;/span&gt;= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;http:// baidu.com&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; iframe2 =&lt;span&gt; iframeFactory.create();
iframe2.src &lt;/span&gt;= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;http:// QQ.com&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
setTimeout(function(){
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; iframe3 =&lt;span&gt; iframeFactory.create();
    iframe3.src &lt;/span&gt;= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;http:// 163.com&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
}, &lt;/span&gt;&lt;span&gt;3000&lt;/span&gt; );
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　对象池是另外一种性能优化方案，它跟享元模式有一些相似之处，但没有分离内部状态和外部状态这个过程。文件上传的程序其实也可以用对象池+事件委托来代替实现&lt;/p&gt;
&lt;p&gt;　　享元模式是为解决性能问题而生的模式，这跟大部分模式的诞生原因都不一样。在一个存在大量相似对象的系统中，享元模式可以很好地解决大量对象带来的性能问题&lt;/p&gt;

</description>
<pubDate>Fri, 15 Dec 2017 16:22:00 +0000</pubDate>
<dc:creator>小火柴的蓝色理想</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/xiaohuochai/p/8039957.html</dc:identifier>
</item>
<item>
<title>浅谈时间复杂度 - 呼呼呼呼呼65</title>
<link>http://www.cnblogs.com/huhu1203/p/8045263.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/huhu1203/p/8045263.html</guid>
<description>&lt;p&gt;&lt;span&gt;1.时间复杂度是什么？&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;有人说，这还不简单，不就是在给定输入规模时，求所执行的基本操作数量吗？如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;int&lt;/span&gt; n=10&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;int&lt;/span&gt; count=0&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; i=0;i&amp;lt;n;i++&lt;span&gt;){//循环次数
     &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; j=0;j&amp;lt;n;j++&lt;span&gt;){//执行深度
         count&lt;/span&gt;++&lt;span&gt;;
   }
 }&lt;br/&gt;//count=100&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;看到这个，时间复杂度无疑是O(n^2)，再看看下面的&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;int&lt;/span&gt; n=10&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;int&lt;/span&gt; count=0&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; i=0;i&amp;lt;n;i++&lt;span&gt;){
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; j=0;j&amp;lt;i;j++&lt;span&gt;){
       count&lt;/span&gt;++&lt;span&gt;;
   }
 }&lt;br/&gt;&lt;/span&gt;&lt;span&gt;//count=45&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;看到这个，时间复杂度也是O(n^2)，这里要出来一个概念，次数和时间复杂度的区别：&lt;/p&gt;
&lt;p&gt;第一个程序运行的次数是100（n*n=n^2），第二个程序运行的次数是45（0+1+2+3+4+...........+n-1=n*(n-1)/2），时间复杂度一样的原因是：当n趋于无穷大时可忽略常数，-1，/2可忽略。但是时间复杂度是在次数的基础上计算出来的。而次数就是循环次数*执行深度。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;2.什么是大O？&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;比如我说一个变量x,并且有x在[a,b]这个区间,就表示了上界是a下界是b，对于变量x的取值范围来说，最大不超过b,最小不小于a。在算法中，上界就是对于一种资源的限制最大不大于的值，下界就是对于这种资源的限制最小不小于的值。这里的资源可以是时间、空间、带宽……&lt;/p&gt;
&lt;p&gt;所以当n趋于无穷时，O(2n^2)=O(n^2)，O(n*(n-1)/2)=O(n^2)，O(5n)=O(n)，O(5)=O(1)。&lt;/p&gt;
&lt;p&gt;总结来说，大O表示算法执行的最低上界。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;3.为什么要进行计算时间复杂度？&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;我们先来看张图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/959267/201712/959267-20171215225047168-109895993.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;如果老板给你一个任务，让你对公司的账单从大到小进行排序，你可能会直接使用数据库自带的语句order by，的确，这是个好办法。如果你细致了解数据库，数据库的底层使用了B+树为数据建立了索引，时间复杂度明显降低。换个简单例子，如果老板让你把一堆数字进行排序，你可能最先想到选择排序，每次选择最小的数。老板说，这个太耗时了，你又会想到快速排序，选择一个基准数进行比较。老板又说，我给你的这些数基本有序，你又会想到插入排序，因为插入排序在基本有序的时候，算法复杂度接近O(n)。老板说，我还想快点，你想到了快速排序与插入排序的结合，等到快速排序排到很有序的时候，插入排序就有作用了。老板又说，我想在这些排序好的数字找到中间的数，这时候你可能想到，我直接数组[(0+n)/2]输出就行了，对的，因为数组本身就是一种很快的数据结构，相当于给每个数建立了索引，就可以直接取出数来，时间复杂度复杂度O(1)。&lt;/p&gt;
&lt;p&gt;梳理一下：时间复杂度分别向O(n^2)，O(nlogn)，O(n)，O(nlogn)+O(n)，O(1)演变&lt;/p&gt;
&lt;table border=&quot;1&quot; align=&quot;center&quot;&gt;&lt;tbody readability=&quot;10&quot;&gt;&lt;tr align=&quot;left&quot; valign=&quot;middle&quot;&gt;&lt;td scope=&quot;col&quot; align=&quot;left&quot; valign=&quot;middle&quot;&gt;&lt;strong&gt;复杂度&lt;/strong&gt;&lt;/td&gt;
&lt;td scope=&quot;col&quot; align=&quot;left&quot; valign=&quot;middle&quot;&gt;&lt;strong&gt;标记符号&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;描述&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr align=&quot;left&quot; valign=&quot;middle&quot; readability=&quot;7&quot;&gt;&lt;td scope=&quot;col&quot; align=&quot;left&quot; valign=&quot;middle&quot;&gt;常量（Constant）&lt;/td&gt;
&lt;td&gt;
&lt;p&gt; O(1) &lt;/p&gt;
&lt;/td&gt;
&lt;td readability=&quot;9&quot;&gt;
&lt;p&gt;操作的数量为常数，与输入的数据的规模无关。&lt;/p&gt;
&lt;p&gt;n = 1,000,000 -&amp;gt; 1-2 operations &lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr align=&quot;left&quot; valign=&quot;middle&quot; readability=&quot;7&quot;&gt;&lt;td scope=&quot;col&quot; align=&quot;left&quot; valign=&quot;middle&quot;&gt;对数（Logarithmic）&lt;/td&gt;
&lt;td&gt;
&lt;p&gt; O(log&lt;sub&gt;2&lt;/sub&gt; n) &lt;/p&gt;
&lt;/td&gt;
&lt;td readability=&quot;9&quot;&gt;
&lt;p&gt;操作的数量与输入数据的规模 n 的比例是 log&lt;sub&gt;2&lt;/sub&gt; (n)。&lt;/p&gt;
&lt;p&gt;n = 1,000,000 -&amp;gt; 30 operations&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr align=&quot;left&quot; valign=&quot;middle&quot; readability=&quot;5.5&quot;&gt;&lt;td scope=&quot;col&quot; align=&quot;left&quot; valign=&quot;middle&quot;&gt;线性（Linear）&lt;/td&gt;
&lt;td&gt; O(n)&lt;/td&gt;
&lt;td readability=&quot;8&quot;&gt;
&lt;p&gt;操作的数量与输入数据的规模 n 成正比。&lt;/p&gt;
&lt;p&gt;n = 10,000 -&amp;gt; 10000 operations&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr align=&quot;left&quot; valign=&quot;middle&quot; readability=&quot;5.5&quot;&gt;&lt;td scope=&quot;col&quot; align=&quot;left&quot; valign=&quot;middle&quot;&gt;平方（Quadratic）&lt;/td&gt;
&lt;td&gt; O(n&lt;sup&gt;2&lt;/sup&gt;)&lt;/td&gt;
&lt;td readability=&quot;8&quot;&gt;
&lt;p&gt;操作的数量与输入数据的规模 n 的比例为二次平方。&lt;/p&gt;
&lt;p&gt;n = 500 -&amp;gt; 250,000 operations&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr align=&quot;left&quot; valign=&quot;middle&quot; readability=&quot;7&quot;&gt;&lt;td scope=&quot;col&quot; align=&quot;left&quot; valign=&quot;middle&quot;&gt;立方（Cubic）&lt;/td&gt;
&lt;td&gt; O(n&lt;sup&gt;3&lt;/sup&gt;)&lt;/td&gt;
&lt;td readability=&quot;9&quot;&gt;
&lt;p&gt;操作的数量与输入数据的规模 n 的比例为三次方。&lt;/p&gt;
&lt;p&gt;n = 200 -&amp;gt; 8,000,000 operations&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr align=&quot;left&quot; valign=&quot;middle&quot; readability=&quot;4&quot;&gt;&lt;td scope=&quot;col&quot; align=&quot;left&quot; valign=&quot;middle&quot;&gt;指数（Exponential）&lt;/td&gt;
&lt;td&gt;
&lt;p&gt; O(2&lt;sup&gt;n&lt;/sup&gt;)&lt;/p&gt;
&lt;p&gt; O(k&lt;sup&gt;n&lt;/sup&gt;)&lt;/p&gt;
&lt;p&gt; O(n!)&lt;/p&gt;
&lt;/td&gt;
&lt;td readability=&quot;7&quot;&gt;
&lt;p&gt;指数级的操作，快速的增长。&lt;/p&gt;
&lt;p&gt;n = 20 -&amp;gt; 1048576 operations&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;为什么要这样演变呢？&lt;/p&gt;
&lt;p&gt;时间复杂度的演变，就是为了更快更好的解决问题，使其效率越来越高。&lt;/p&gt;
&lt;p&gt;另外贴出问题规模与执行时间之间的关系图：&lt;/p&gt;
&lt;table border=&quot;1&quot; align=&quot;center&quot;&gt;&lt;tbody&gt;&lt;tr align=&quot;left&quot; valign=&quot;middle&quot;&gt;&lt;td&gt;&lt;strong&gt;复杂度&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;10&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;20&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;50&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;100&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;1000&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;10000&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;100000&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr align=&quot;left&quot; valign=&quot;middle&quot;&gt;&lt;td scope=&quot;col&quot; align=&quot;left&quot; valign=&quot;middle&quot;&gt;O(1)&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&amp;lt;1s&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&amp;lt;1s&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&amp;lt;1s&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&amp;lt;1s&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&amp;lt;1s&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&amp;lt;1s&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&amp;lt;1s&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr align=&quot;left&quot; valign=&quot;middle&quot;&gt;&lt;td scope=&quot;col&quot; align=&quot;left&quot; valign=&quot;middle&quot;&gt;O(log&lt;sub&gt;2&lt;/sub&gt;(n))&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&amp;lt;1s&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&amp;lt;1s&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&amp;lt;1s&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&amp;lt;1s&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&amp;lt;1s&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&amp;lt;1s&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&amp;lt;1s&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr align=&quot;left&quot; valign=&quot;middle&quot;&gt;&lt;td scope=&quot;col&quot; align=&quot;left&quot; valign=&quot;middle&quot;&gt;O(n)&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&amp;lt;1s&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&amp;lt;1s&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&amp;lt;1s&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&amp;lt;1s&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&amp;lt;1s&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&amp;lt;1s&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&amp;lt;1s&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr align=&quot;left&quot; valign=&quot;middle&quot;&gt;&lt;td scope=&quot;col&quot; align=&quot;left&quot; valign=&quot;middle&quot;&gt;O(n*log&lt;sub&gt;2&lt;/sub&gt;(n))&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&amp;lt;1s&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&amp;lt;1s&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&amp;lt;1s&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&amp;lt;1s&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&amp;lt;1s&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&amp;lt;1s&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&amp;lt;1s&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr align=&quot;left&quot; valign=&quot;middle&quot;&gt;&lt;td scope=&quot;col&quot; align=&quot;left&quot; valign=&quot;middle&quot;&gt;O(n&lt;sup&gt;2&lt;/sup&gt;)&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&amp;lt;1s&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&amp;lt;1s&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&amp;lt;1s&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&amp;lt;1s&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&amp;lt;1s&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;2s&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;3-4 min&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr align=&quot;left&quot; valign=&quot;middle&quot;&gt;&lt;td scope=&quot;col&quot; align=&quot;left&quot; valign=&quot;middle&quot;&gt;O(n&lt;sup&gt;3&lt;/sup&gt;)&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&amp;lt;1s&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&amp;lt;1s&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&amp;lt;1s&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&amp;lt;1s&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;20s&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt; 5 hours &lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt; 231 days &lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr align=&quot;left&quot; valign=&quot;middle&quot;&gt;&lt;td scope=&quot;col&quot; align=&quot;left&quot; valign=&quot;middle&quot;&gt;O(2&lt;sup&gt;n&lt;/sup&gt;)&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&amp;lt;1s&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&amp;lt;1s&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt; 260 days &lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt; hangs &lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt; hangs &lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;hangs&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;hangs&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr align=&quot;left&quot; valign=&quot;middle&quot;&gt;&lt;td scope=&quot;col&quot; align=&quot;left&quot; valign=&quot;middle&quot;&gt;O(n!)&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&amp;lt;1s&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt; hangs &lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;hangs&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt; hangs &lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;hangs&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;hangs&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;hangs&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr align=&quot;left&quot; valign=&quot;middle&quot;&gt;&lt;td scope=&quot;col&quot; align=&quot;left&quot; valign=&quot;middle&quot;&gt;O(n&lt;sup&gt;n&lt;/sup&gt;)&lt;/td&gt;
&lt;td&gt;
&lt;p&gt; 3-4 min &lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;hangs&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;hangs&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt; hangs &lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;hangs&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;hangs&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;hangs&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;上面关于排序的优化的文章我在前面已经做出Java代码的演示，地址：&lt;a href=&quot;http://www.cnblogs.com/huhu1203/p/7725948.html&quot;&gt;从优化的角度谈谈排序&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;谢谢大家的阅读，博客不易，转载请注明地址。&lt;/p&gt;

</description>
<pubDate>Fri, 15 Dec 2017 15:51:00 +0000</pubDate>
<dc:creator>呼呼呼呼呼65</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/huhu1203/p/8045263.html</dc:identifier>
</item>
<item>
<title>斐波那契与尾递归 - ---dgw博客</title>
<link>http://www.cnblogs.com/dgwblog/p/8045236.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/dgwblog/p/8045236.html</guid>
<description>&lt;h4 id=&quot;尾递归wiki解释如下&quot;&gt;尾递归wiki解释如下：&lt;/h4&gt;
&lt;ul readability=&quot;1.5&quot;&gt;&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;尾部递归是一种编程技巧。递归函数是指一些会在函数内调用自己的函数，如果在递归函数中，递归调用返回的结果总被直接返回，则称为尾部递归。尾部递归的函数有助将算法转化成函数编程语言，而且从编译器角度来说，亦容易优化成为普通循环。这是因为从电脑的基本面来说，所有的循环都是利用重复移跳到代码的开头来实现的。如果有尾部归递，就只需要叠套一个堆栈，因为电脑只需要将函数的参数改变再重新调用一次。利用尾部递归最主要的目的是要优化，例如在Scheme语言中，明确规定必须针对尾部递归作优化。可见尾部递归的作用，是非常依赖于具体实现的。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;我们还是从简单的斐波那契开始了解尾递归吧。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;用普通的递归计算Fibonacci数列：&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code&gt;#include &quot;stdio.h&quot;
#include &quot;math.h&quot;

int factorial(int n);

int main(void)
{
    int i, n, rs;

    printf(&quot;请输入斐波那契数n：&quot;);
    scanf(&quot;%d&quot;,&amp;amp;n);

    rs = factorial(n);
    printf(&quot;%d \n&quot;, rs);

    return 0;
}

// 递归
int factorial(int n)
{
    if(n &amp;lt;= 2)
    {
        return 1;
    }
    else
    {
        return factorial(n-1) + factorial(n-2);
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;程序员运行结果如下：&lt;/p&gt;
&lt;p&gt;请输入斐波那契数n：20&lt;br/&gt;6765&lt;/p&gt;
&lt;p&gt;Process returned 0 (0x0) execution time : 3.502 s&lt;br/&gt;Press any key to continue.&lt;br/&gt;在i5的CPU下也要花费 3.502 秒的时间。&lt;/p&gt;
&lt;h3 id=&quot;下面我们看看如何用尾递归实现斐波那契数&quot;&gt;下面我们看看如何用尾递归实现斐波那契数。&lt;/h3&gt;
&lt;pre&gt;
&lt;code&gt;/#include &quot;stdio.h&quot;
/#include &quot;math.h&quot;

int factorial(int n);

int main(void)
{
    int i, n, rs;

    printf(&quot;请输入斐波那契数n：&quot;);
    scanf(&quot;%d&quot;,&amp;amp;n);

    rs = factorial_tail(n, 1, 1);
    printf(&quot;%d &quot;, rs);

    return 0;
}

int factorial_tail(int n,int acc1,int acc2)
{
    if (n &amp;lt; 2)
    {
        return acc1;
    }
    else
    {
        return factorial_tail(n-1,acc2,acc1+acc2);
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;程序员运行结果如下：&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;请输入斐波那契数n：20&lt;br/&gt;6765&lt;br/&gt;Process returned 0 (0x0) execution time : 1.460 s&lt;br/&gt;Press any key to continue.&lt;br/&gt;快了一倍有多。当然这是不完全统计，有兴趣的话可以自行计算大规模的值，这里只是介绍尾递归而已。&lt;/p&gt;
&lt;p&gt;我们可以打印一下程序的执行过程，函数加入下面的打印语句：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;int factorial_tail(int n,int acc1,int acc2)
{
    if (n &amp;lt; 2)
    {
        return acc1;
    }
    else
    {
        printf(&quot;factorial_tail(%d, %d, %d) \n&quot;,n-1,acc2,acc1+acc2);
        return factorial_tail(n-1,acc2,acc1+acc2);
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;程序运行结果：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;请输入斐波那契数n：10
factorial_tail(9, 1, 2)
factorial_tail(8, 2, 3)
factorial_tail(7, 3, 5)
factorial_tail(6, 5, 8)
factorial_tail(5, 8, 13)
factorial_tail(4, 13, 21)
factorial_tail(3, 21, 34)
factorial_tail(2, 34, 55)
factorial_tail(1, 55, 89)
55
Process returned 0 (0x0)   execution time : 1.393 s
Press any key to continue.
从上面的调试就可以很清晰地看出尾递归的计算过程了。acc1就是第n个数，而acc2就是第n与第n+1个数的和，这就是我们前面讲到的“迭代”的精髓，计算结果参与到下一次的计算，从而减少很多重复计算量。&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;fibonacci(n-1,acc2,acc1+acc2)真是神来之笔，原本朴素的递归产生的栈的层次像二叉树一样，以指数级增长，但是现在栈的层次却像是数组，变成线性增长了，实在是奇妙，总结起来也很简单，原本栈是先扩展开，然后边收拢边计算结果，现在却变成在调用自身的同时通过参数来计算。&lt;/p&gt;
</description>
<pubDate>Fri, 15 Dec 2017 15:40:00 +0000</pubDate>
<dc:creator>---dgw博客</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/dgwblog/p/8045236.html</dc:identifier>
</item>
<item>
<title>google guava cache缓存基本使用讲解 - vikde</title>
<link>http://www.cnblogs.com/vikde/p/8045226.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/vikde/p/8045226.html</guid>
<description>&lt;p&gt;代码地址：https://github.com/vikde/demo-guava-cache&lt;/p&gt;
&lt;h2&gt;一、简介&lt;/h2&gt;
&lt;p&gt;guava cache是google guava中的一个内存缓存模块,用于将数据缓存到JVM内存中.实际项目开发中经常将一些比较公共或者常用的数据缓存起来方便快速访问.&lt;/p&gt;
&lt;p&gt;内存缓存最常见的就是基于HashMap实现的缓存,为了解决并发问题也可能也会用到ConcurrentHashMap等并发集合,但是内存缓存需要考虑很多问题,包括并发问题、缓存过期机制、缓存移除机制、缓存命中统计率等.&lt;/p&gt;
&lt;p&gt;guava cache已经考虑到这些问题,可以上手即用.通过CacheBuilder创建缓存、然后设置缓存的相关参数、设置缓存的加载方法等.本例子主要讲解guava cache的基本用法,详细的说明已在代码中说明.&lt;/p&gt;

&lt;h2&gt;二、代码示例&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;47&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.vikde.demo.guava.cache;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.google.common.cache.CacheBuilder;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.google.common.cache.CacheLoader;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.google.common.cache.LoadingCache;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.text.SimpleDateFormat;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.Date;
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.Random;
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.concurrent.TimeUnit;
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; 
&lt;span&gt;12&lt;/span&gt; &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt; &lt;span&gt; * google guava cache 缓存demo
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt; *
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt; * &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; vikde
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt; * @date 2017/12/14
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;  &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; DemoGuavaCache {
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; main(String[] args) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;         LoadingCache&amp;lt;Integer, String&amp;gt; cache =&lt;span&gt; CacheBuilder.newBuilder()
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;                                                           &lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置并发级别为8，并发级别是指可以同时写缓存的线程数&lt;/span&gt;
&lt;span&gt;22&lt;/span&gt;                                                           .concurrencyLevel(8&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;                                                           &lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置缓存容器的初始容量为10&lt;/span&gt;
&lt;span&gt;24&lt;/span&gt;                                                           .initialCapacity(10&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;                                                           &lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置缓存最大容量为100，超过100之后就会按照LRU最近虽少使用算法来移除缓存项&lt;/span&gt;
&lt;span&gt;26&lt;/span&gt;                                                           .maximumSize(100&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;                                                           &lt;span&gt;//&lt;/span&gt;&lt;span&gt;是否需要统计缓存情况,该操作消耗一定的性能,生产环境应该去除&lt;/span&gt;
&lt;span&gt;28&lt;/span&gt; &lt;span&gt;                                                          .recordStats()
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;                                                           &lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置写缓存后n秒钟过期&lt;/span&gt;
&lt;span&gt;30&lt;/span&gt;                                                           .expireAfterWrite(17&lt;span&gt;, TimeUnit.SECONDS)
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;                                                           &lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置读写缓存后n秒钟过期,实际很少用到,类似于expireAfterWrite
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;                                                           &lt;span&gt;//&lt;/span&gt;&lt;span&gt;.expireAfterAccess(17, TimeUnit.SECONDS)
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt;                                                           &lt;span&gt;//&lt;/span&gt;&lt;span&gt;只阻塞当前数据加载线程，其他线程返回旧值
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt;                                                           &lt;span&gt;//&lt;/span&gt;&lt;span&gt;.refreshAfterWrite(13, TimeUnit.SECONDS)
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt;                                                           &lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置缓存的移除通知&lt;/span&gt;
&lt;span&gt;36&lt;/span&gt;                                                           .removalListener(notification -&amp;gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt;                                                               System.out.println(notification.getKey() + &quot; &quot; + notification.getValue() + &quot; 被移除,原因:&quot; +&lt;span&gt; notification.getCause());
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt; &lt;span&gt;                                                          })
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt;                                                           &lt;span&gt;//&lt;/span&gt;&lt;span&gt;build方法中可以指定CacheLoader，在缓存不存在时通过CacheLoader的实现自动加载缓存&lt;/span&gt;
&lt;span&gt;40&lt;/span&gt;                                                           .build(&lt;span&gt;new&lt;/span&gt;&lt;span&gt; DemoCacheLoader());
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt; 
&lt;span&gt;42&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;模拟线程并发&lt;/span&gt;
&lt;span&gt;43&lt;/span&gt;         &lt;span&gt;new&lt;/span&gt; Thread(() -&amp;gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;非线程安全的时间格式化工具&lt;/span&gt;
&lt;span&gt;45&lt;/span&gt;             SimpleDateFormat simpleDateFormat = &lt;span&gt;new&lt;/span&gt; SimpleDateFormat(&quot;HH:mm:ss&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt;             &lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt;                 &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = 0; i &amp;lt; 15; i++&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt;                     String value = cache.get(1&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;49&lt;/span&gt;                     System.out.println(Thread.currentThread().getName() + &quot; &quot; + simpleDateFormat.format(&lt;span&gt;new&lt;/span&gt; Date()) + &quot; &quot; +&lt;span&gt; value);
&lt;/span&gt;&lt;span&gt;50&lt;/span&gt;                     TimeUnit.SECONDS.sleep(3&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;51&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;52&lt;/span&gt;             } &lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception ignored) {
&lt;/span&gt;&lt;span&gt;53&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;54&lt;/span&gt; &lt;span&gt;        }).start();
&lt;/span&gt;&lt;span&gt;55&lt;/span&gt; 
&lt;span&gt;56&lt;/span&gt;         &lt;span&gt;new&lt;/span&gt; Thread(() -&amp;gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;57&lt;/span&gt;             SimpleDateFormat simpleDateFormat = &lt;span&gt;new&lt;/span&gt; SimpleDateFormat(&quot;HH:mm:ss&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;58&lt;/span&gt;             &lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;59&lt;/span&gt;                 &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = 0; i &amp;lt; 10; i++&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;60&lt;/span&gt;                     String value = cache.get(1&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;61&lt;/span&gt;                     System.out.println(Thread.currentThread().getName() + &quot; &quot; + simpleDateFormat.format(&lt;span&gt;new&lt;/span&gt; Date()) + &quot; &quot; +&lt;span&gt; value);
&lt;/span&gt;&lt;span&gt;62&lt;/span&gt;                     TimeUnit.SECONDS.sleep(5&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;63&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;64&lt;/span&gt;             } &lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception ignored) {
&lt;/span&gt;&lt;span&gt;65&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;66&lt;/span&gt; &lt;span&gt;        }).start();
&lt;/span&gt;&lt;span&gt;67&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;缓存状态查看&lt;/span&gt;
&lt;span&gt;68&lt;/span&gt; &lt;span&gt;        System.out.println(cache.stats().toString());
&lt;/span&gt;&lt;span&gt;69&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;70&lt;/span&gt; 
&lt;span&gt;71&lt;/span&gt;     &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt;72&lt;/span&gt; &lt;span&gt;     * 随机缓存加载,实际使用时应实现业务的缓存加载逻辑,例如从数据库获取数据
&lt;/span&gt;&lt;span&gt;73&lt;/span&gt;      &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;74&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; DemoCacheLoader &lt;span&gt;extends&lt;/span&gt; CacheLoader&amp;lt;Integer, String&amp;gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;75&lt;/span&gt; &lt;span&gt;        @Override
&lt;/span&gt;&lt;span&gt;76&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; String load(Integer key) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
&lt;/span&gt;&lt;span&gt;77&lt;/span&gt;             System.out.println(Thread.currentThread().getName() + &quot; 加载数据开始&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;78&lt;/span&gt;             TimeUnit.SECONDS.sleep(8&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;79&lt;/span&gt;             Random random = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Random();
&lt;/span&gt;&lt;span&gt;80&lt;/span&gt;             System.out.println(Thread.currentThread().getName() + &quot; 加载数据结束&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;81&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; &quot;value:&quot; + random.nextInt(10000&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;82&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;83&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;84&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;三、策略分析&lt;/h2&gt;
&lt;pre&gt;
&lt;code&gt;expireAfterWrite 写缓存后多久过期
expireAfterAccess 读写缓存后多久过期
refreshAfterWrite 写入数据后多久过期,只阻塞当前数据加载线程,其他线程返回旧值

这几个策略时间可以单独设置,也可以组合配置
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;expireAfterWrite与refreshAfterWrite单独使用与混合使用的策略分析&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;已知配置条件:
Thread-1 每 3 秒获取一次缓存id=1的数据
Thread-2 每 5 秒获取一次缓存id=1的数据
加载一次缓存加载数据耗时 8 秒
&lt;/code&gt;
&lt;/pre&gt;
&lt;h3&gt;1、expireAfterWrite单独使用&lt;/h3&gt;
&lt;p&gt;expireAfterWrite=17&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Thread-2 加载数据开始
Thread-2 加载数据结束
Thread-1 01:04:07 value:6798
Thread-2 01:04:07 value:6798
Thread-1 01:04:10 value:6798
Thread-2 01:04:12 value:6798
Thread-1 01:04:13 value:6798
Thread-1 01:04:16 value:6798
Thread-2 01:04:17 value:6798
Thread-1 01:04:19 value:6798
Thread-1 01:04:22 value:6798
Thread-2 01:04:22 value:6798
1 value:6798 被移除,原因:EXPIRED
Thread-1 加载数据开始
Thread-1 加载数据结束
Thread-1 01:04:33 value:7836
Thread-2 01:04:33 value:7836
Thread-1 01:04:36 value:7836
Thread-2 01:04:38 value:7836
Thread-1 01:04:39 value:7836
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;说明:&lt;/p&gt;
&lt;p&gt;启动时Thread-2加载数据,此时缓存中无数据,Thread-1阻塞等待Thread-2加载完成数据. 在设置的时间数据过期后Thread-1加载数据,Thread-2本应该01:04:22后的5秒加载数据,但是Thread-1等待3秒后加载,数据加载耗时8秒,所以Thread-2在01:04:33时加载数据成功.&lt;/p&gt;
&lt;p&gt;结论:&lt;/p&gt;
&lt;p&gt;当其他线程在加载数据的时候,当前线程会一直阻塞等待其他线程加载数据完成.&lt;/p&gt;
&lt;h3&gt;2、refreshAfterWrite单独使用&lt;/h3&gt;
&lt;p&gt;refreshAfterWrite=17&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Thread-2 加载数据开始
Thread-2 加载数据结束
Thread-1 01:13:32 value:551
Thread-2 01:13:32 value:551
Thread-1 01:13:35 value:551
Thread-2 01:13:37 value:551
Thread-1 01:13:38 value:551
Thread-1 01:13:41 value:551
Thread-2 01:13:42 value:551
Thread-1 01:13:44 value:551
Thread-1 01:13:47 value:551
Thread-2 01:13:47 value:551
Thread-1 加载数据开始
Thread-2 01:13:52 value:551
Thread-2 01:13:57 value:551
Thread-1 加载数据结束
1 value:551 被移除,原因:REPLACED
Thread-1 01:13:58 value:827
Thread-1 01:14:01 value:827
Thread-2 01:14:02 value:827
Thread-1 01:14:04 value:827
Thread-2 01:14:07 value:827
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;说明:&lt;/p&gt;
&lt;p&gt;启动时Thread-2加载数据,此时缓存中无数据,Thread-1阻塞等待Thread-2加载完成数据. 在设置的时间数据过期后Thread-1加载数据,Thread-2仍然按照策略获取到旧数据成功.&lt;/p&gt;
&lt;p&gt;结论:&lt;/p&gt;
&lt;p&gt;当没有数据的时候,其他线程在加载数据的时候,当前线程会一直阻塞等待其他线程加载数据完成;如果有数据的情况下其他线程正在加载数据,当前线程返回旧数据.&lt;/p&gt;
&lt;h3&gt;3、expireAfterWrite与refreshAfterWrite一起使用情况一&lt;/h3&gt;
&lt;p&gt;expireAfterWrite=13&lt;/p&gt;
&lt;p&gt;refreshAfterWrite=17&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Thread-2 加载数据开始
Thread-2 加载数据结束
Thread-1 01:18:32 value:5901
Thread-2 01:18:32 value:5901
Thread-1 01:18:35 value:5901
Thread-2 01:18:37 value:5901
Thread-1 01:18:38 value:5901
Thread-1 01:18:41 value:5901
Thread-2 01:18:42 value:5901
Thread-1 01:18:44 value:5901
1 value:5901 被移除,原因:EXPIRED
Thread-1 加载数据开始
Thread-1 加载数据结束
Thread-2 01:18:55 value:1300
Thread-1 01:18:55 value:1300
Thread-1 01:18:58 value:1300
Thread-2 01:19:00 value:1300
Thread-1 01:19:01 value:1300
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;说明:&lt;/p&gt;
&lt;p&gt;启动时Thread-2加载数据,此时缓存中无数据,Thread-1阻塞等待Thread-2加载完成数据. 在设置的时间数据过期后Thread-1加载数据,Thread-2本应该01:18:42后的5秒加载数据,但是Thread-1等待3秒后加载,数据加载耗时8秒,所以Thread-2在01:18:55时加载数据成功.&lt;/p&gt;
&lt;p&gt;结论:&lt;/p&gt;
&lt;p&gt;当其他线程在加载数据的时候,当前线程会一直阻塞等待其他线程加载数据完成,与单独使用expireAfterWrite一样的效果.&lt;/p&gt;
&lt;h3&gt;4、expireAfterWrite与refreshAfterWrite一起使用情况二&lt;/h3&gt;
&lt;p&gt;expireAfterWrite=17&lt;/p&gt;
&lt;p&gt;refreshAfterWrite=13&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Thread-2 加载数据开始
Thread-2 加载数据结束
Thread-1 01:20:25 value:1595
Thread-2 01:20:25 value:1595
Thread-1 01:20:28 value:1595
Thread-2 01:20:30 value:1595
Thread-1 01:20:31 value:1595
Thread-1 01:20:34 value:1595
Thread-2 01:20:35 value:1595
Thread-1 01:20:37 value:1595
Thread-2 加载数据开始
Thread-1 01:20:40 value:1595
Thread-2 加载数据结束
Thread-1 01:20:48 value:2277
1 value:1595 被移除,原因:EXPIRED
Thread-2 01:20:48 value:2277
Thread-1 01:20:51 value:2277
Thread-2 01:20:53 value:2277
Thread-1 01:20:54 value:2277
Thread-1 01:20:57 value:2277
Thread-2 01:20:58 value:2277
Thread-1 01:21:00 value:2277
Thread-1 加载数据开始
Thread-2 01:21:03 value:2277
Thread-1 加载数据结束
Thread-2 01:21:11 value:3750
1 value:2277 被移除,原因:EXPIRED
Thread-1 01:21:11 value:3750
Thread-1 01:21:14 value:3750
Thread-2 01:21:16 value:3750
Thread-1 01:21:17 value:3750
Thread-1 01:21:20 value:3750
Thread-2 01:21:21 value:3750
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;说明:&lt;/p&gt;
&lt;p&gt;启动时Thread-2加载数据,此时缓存中无数据,Thread-1阻塞等待Thread-2加载完成数据. 在设置的时间数据过期后Thread-2加载数据,Thread-1仍然按照策略在01:20:40获取到旧数据成功,但是本应该01:20:45继续获取一次数据但是等到01:20:48才获取成功.&lt;/p&gt;
&lt;p&gt;结论:&lt;/p&gt;
&lt;p&gt;当没有数据的时候,其他线程在加载数据的时候,当前线程会一直阻塞等待其他线程加载数据完成; 如果有数据的情况下其他线程正在加载数据,已经超过refreshAfterWrite设置时间但是没有超过expireAfterWrite设置的时间时当前线程返回旧数据. 如果有数据的情况下其他线程正在加载数据,已经超过expireAfterWrite设置的时间时当前线程阻塞等待其他线程加载数据完成. 这种情况适合与设置一个加载缓冲区的情况,既能保证过期后加载数据,又能保证长时间没访问多个线程并发时获取到过期旧数据的情况.&lt;/p&gt;
</description>
<pubDate>Fri, 15 Dec 2017 15:35:00 +0000</pubDate>
<dc:creator>vikde</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/vikde/p/8045226.html</dc:identifier>
</item>
<item>
<title>Maven - Maven基础 - Anliven</title>
<link>http://www.cnblogs.com/anliven/p/7956581.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/anliven/p/7956581.html</guid>
<description>&lt;h2 id=&quot;maven---项目管理利器&quot;&gt;1.1 - Maven - 项目管理利器&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://maven.apache.org/&quot; class=&quot;uri&quot;&gt;http://maven.apache.org/&lt;/a&gt;&lt;br/&gt;Apache组织的开源项目。&lt;br/&gt;Maven是一个基于POM(Project Object Model, 项目对象模型)的项目构建和管理工具。&lt;br/&gt;可以通过一小段描述信息来管理项目的构建、报告和文档，有助于开发者快速完成项目的配置，快速建立开发环境，从而提高开发效率。&lt;/p&gt;
&lt;p&gt;常用项目管理和构建工具：&lt;/p&gt;
&lt;h2 id=&quot;maven的下载及安装&quot;&gt;1.2 - Maven的下载及安装&lt;/h2&gt;
&lt;p&gt;以windows系统为例：&lt;/p&gt;
&lt;ol readability=&quot;-1.5&quot;&gt;&lt;li&gt;确认已安装JDK并配置系统变量JAVA_HOME&lt;/li&gt;
&lt;li&gt;安装Maven（解压安装包，例如：apache-maven-3.5.0-bin.zip）&lt;/li&gt;
&lt;li&gt;配置系统变量M2_HOME，指向maven的安装目录(例如&quot;D:\DownLoadFiles\apache-maven-3.5.0&quot;), 并将maven的安装目录的bin目录添加到系统path（例如&quot;%M2_HOME%\bin&quot;，注意前后的分号）&lt;/li&gt;
&lt;li readability=&quot;5&quot;&gt;
&lt;p&gt;运行&quot;mvn -version&quot;命令测试是否安装成功，如果安装成功则显示Maven、Java、OS等相关版本信息：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;15&quot;&gt;
&lt;pre class=&quot;sourceCode bash&quot;&gt;
&lt;code class=&quot;sourceCode bash&quot;&gt;$ &lt;span class=&quot;kw&quot;&gt;mvn&lt;/span&gt; -version
&lt;span class=&quot;kw&quot;&gt;Apache&lt;/span&gt; Maven 3.5.0 (ff8f5e7444045639af65f6095c62210b5713f426&lt;span class=&quot;kw&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;2017-04-04T03&lt;/span&gt;:39:06+08:00)
&lt;span class=&quot;kw&quot;&gt;Maven&lt;/span&gt; home: D:\DownLoadFiles\apache-maven-3.5.0
&lt;span class=&quot;kw&quot;&gt;Java&lt;/span&gt; version: 1.8.0_101, vendor: Oracle Corporation
&lt;span class=&quot;kw&quot;&gt;Java&lt;/span&gt; home: C:\Program Files\Java\jdk1.8.0_101\jre
&lt;span class=&quot;kw&quot;&gt;Default&lt;/span&gt; locale: en_US, platform encoding: GBK
&lt;span class=&quot;kw&quot;&gt;OS&lt;/span&gt; name: &lt;span class=&quot;st&quot;&gt;&quot;windows 7&quot;&lt;/span&gt;, version: &lt;span class=&quot;st&quot;&gt;&quot;6.1&quot;&lt;/span&gt;, arch: &lt;span class=&quot;st&quot;&gt;&quot;amd64&quot;&lt;/span&gt;, family: &lt;span class=&quot;st&quot;&gt;&quot;windows&quot;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;安装后的目录结构:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;- bin/  ： 包含mvn的运行脚本
- boot/ ： 包含一个类加载器的框架
- conf/ ： 配置文件目录，例如经常用到的settings.xml文件
- lib/  ： maven运行时用到的所有类库（包括maven自身和第三方的类库）
- LICENSE  : 许可信息
- NOTICE  ：版权信息
- README.txt  ：使用说明及其他信息&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;maven项目的默认目录结构&quot;&gt;1.3 - Maven项目的默认目录结构&lt;/h2&gt;
&lt;pre&gt;
&lt;code&gt;pom.xml　　　　        Maven项目的核心配置文件，位于项目根目录

src                    源代码目录
  - src/main/java/ 　　　　    源文件（不包含测试）目录，存放主代码
  - src/main/resources/ 　    资源文件目录
  - src/test/java/　　  　    测试源文件目录，存放测试代码
  - src/test/resources/　　    测试资源文件目录

target    　　　　　    构建过程中的默认生成的临时目录
  - target/classes/            存放src/main/java目录下源文件编译出来的字节码文件（.class）
  - target/maven-archiver/
  - target/maven-status/
  - target/surefire-reports/  存放生成的测试报告
  - target/test-classes/      存放src/test/java目录下源文件编译出来的字节码文件（.class）
  - target/xxx-y.y.y-zzz.jar  生成的jar包&lt;/code&gt;
&lt;/pre&gt;

&lt;h2 id=&quot;maven坐标&quot;&gt;2.1 - Maven坐标&lt;/h2&gt;
&lt;p&gt;在Maven中任何一个依赖、插件、项目构建的输出都可以被称为构件&lt;br/&gt;所有构件通过坐标所为其唯一的标识&lt;/p&gt;
&lt;p&gt;示例：一个基本坐标&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode xml&quot;&gt;
&lt;code class=&quot;sourceCode xml&quot;&gt;        &lt;span class=&quot;kw&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;anliven.testmaven02&lt;span class=&quot;kw&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;testmaven02&lt;span class=&quot;kw&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;0.0.1-SNAPSHOT&lt;span class=&quot;kw&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;maven资源仓库&quot;&gt;2.2 - Maven资源仓库&lt;/h2&gt;
&lt;p&gt;Maven资源库为依赖包提供来源。&lt;br/&gt;如果本地仓库中的没有相应的依赖包，默认继续在中央或远程仓库查找，下载后会放到本地仓库。如果都没有查找到，将提示报错。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;中央仓库（central）：Maven官方维护的仓库，例如“&lt;a href=&quot;http://central.maven.org/maven2/&quot; class=&quot;uri&quot;&gt;http://central.maven.org/maven2/&lt;/a&gt;”。&lt;/li&gt;
&lt;li&gt;远程仓库：在远程服务器上建立的私有性质仓库，本质类似于中央仓库，可通过setting.xml文件设置。&lt;/li&gt;
&lt;li&gt;本地仓库：包含下载的所有依赖包，默认位于用户目录（例如windows系统：C:\Users&amp;lt;username&amp;gt;.m2\repository），可通过setting.xml文件设置。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;官方资源仓库&lt;/p&gt;
&lt;p&gt;阿里云资源仓库&lt;br/&gt;Nexus ： &lt;a href=&quot;http://maven.aliyun.com/nexus/&quot; class=&quot;uri&quot;&gt;http://maven.aliyun.com/nexus/&lt;/a&gt;&lt;br/&gt;Repositories： repositories &lt;a href=&quot;http://maven.aliyun.com/nexus/#view-repositories&quot; class=&quot;uri&quot;&gt;http://maven.aliyun.com/nexus/#view-repositories&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;查找jar包信息&lt;/p&gt;
&lt;p&gt;其他资源仓库&lt;/p&gt;
&lt;h2 id=&quot;设置本地maven仓库&quot;&gt;2.3 - 设置本地Maven仓库&lt;/h2&gt;
&lt;p&gt;本地仓库包含下载的所有依赖包，默认位于用户目录（例如windows系统：C:\Users&amp;lt;username&amp;gt;.m2\repository），可通过setting.xml文件设置。&lt;br/&gt;示例：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode xml&quot;&gt;
&lt;code class=&quot;sourceCode xml&quot;&gt;&lt;span class=&quot;kw&quot;&gt;&amp;lt;localRepository&amp;gt;&lt;/span&gt;D:\DownLoadFiles\apache-maven-repo&lt;span class=&quot;kw&quot;&gt;&amp;lt;/localRepository&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;设置镜像仓库&quot;&gt;2.4 - 设置镜像仓库&lt;/h2&gt;
&lt;p&gt;通过设置多个远程和中央仓库的镜像地址可以避免访问缓慢或无法访问的问题。&lt;br/&gt;示例：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode xml&quot;&gt;
&lt;code class=&quot;sourceCode xml&quot;&gt;   &lt;span class=&quot;kw&quot;&gt;&amp;lt;mirrors&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;co&quot;&gt;&amp;lt;!-- 中央仓库 --&amp;gt;&lt;/span&gt;    
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;mirror&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;id&amp;gt;&lt;/span&gt;central&lt;span class=&quot;kw&quot;&gt;&amp;lt;/id&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;mirrorOf&amp;gt;&lt;/span&gt;*&lt;span class=&quot;kw&quot;&gt;&amp;lt;/mirrorOf&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;name&amp;gt;&lt;/span&gt;central&lt;span class=&quot;kw&quot;&gt;&amp;lt;/name&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;url&amp;gt;&lt;/span&gt;http://central.maven.org/maven2/&lt;span class=&quot;kw&quot;&gt;&amp;lt;/url&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;/mirror&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;co&quot;&gt;&amp;lt;!-- 中央仓库1 --&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;mirror&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;id&amp;gt;&lt;/span&gt;repo1&lt;span class=&quot;kw&quot;&gt;&amp;lt;/id&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;mirrorOf&amp;gt;&lt;/span&gt;central&lt;span class=&quot;kw&quot;&gt;&amp;lt;/mirrorOf&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;name&amp;gt;&lt;/span&gt;Human Readable Name for this Mirror.&lt;span class=&quot;kw&quot;&gt;&amp;lt;/name&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;url&amp;gt;&lt;/span&gt;http://repo1.maven.org/maven2/&lt;span class=&quot;kw&quot;&gt;&amp;lt;/url&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;/mirror&amp;gt;&lt;/span&gt;  
        &lt;span class=&quot;co&quot;&gt;&amp;lt;!-- 中央仓库2 --&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;mirror&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;id&amp;gt;&lt;/span&gt;repo2&lt;span class=&quot;kw&quot;&gt;&amp;lt;/id&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;mirrorOf&amp;gt;&lt;/span&gt;central&lt;span class=&quot;kw&quot;&gt;&amp;lt;/mirrorOf&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;name&amp;gt;&lt;/span&gt;Human Readable Name for this Mirror.&lt;span class=&quot;kw&quot;&gt;&amp;lt;/name&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;url&amp;gt;&lt;/span&gt;http://repo2.maven.org/maven2/&lt;span class=&quot;kw&quot;&gt;&amp;lt;/url&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;/mirror&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;co&quot;&gt;&amp;lt;!-- 阿里云仓库 --&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;mirror&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;id&amp;gt;&lt;/span&gt;alimaven&lt;span class=&quot;kw&quot;&gt;&amp;lt;/id&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;mirrorOf&amp;gt;&lt;/span&gt;central&lt;span class=&quot;kw&quot;&gt;&amp;lt;/mirrorOf&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;name&amp;gt;&lt;/span&gt;aliyun maven&lt;span class=&quot;kw&quot;&gt;&amp;lt;/name&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;url&amp;gt;&lt;/span&gt;http://maven.aliyun.com/nexus/content/repositories/central/&lt;span class=&quot;kw&quot;&gt;&amp;lt;/url&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;/mirror&amp;gt;&lt;/span&gt;    
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/mirrors&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;pom&quot;&gt;3.1 - POM&lt;/h2&gt;
&lt;p&gt;POM文件是Maven项目中的核心配置和管理文件，也被称为Maven描述文件。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;POM(Project Object Model,项目对象模型)是描述项目构建信息的XML格式文件，位于项目的根目录。&lt;/li&gt;
&lt;li&gt;统一管理项目构建的关键信息，包括：开发规范、开发工具、项目代码、测试代码、资源、依赖的包等。&lt;/li&gt;
&lt;li&gt;pom之间实际上存在三种关系：继承、依赖、聚合。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;官网参考信息：&lt;a href=&quot;http://maven.apache.org/ref/3.5.0/maven-model/maven.html&quot; class=&quot;uri&quot;&gt;http://maven.apache.org/ref/3.5.0/maven-model/maven.html&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;解读pom.xml&quot;&gt;3.2 - 解读pom.xml&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;project POM文件的根元素，包含约束信息&lt;/li&gt;
&lt;li&gt;modelVersion 指定当前Maven模型的版本号，对于Maven2和Maven3只能设置为4.0.0&lt;/li&gt;
&lt;li&gt;groupId 项目的全球唯一标识符（整个系统的名称），一般是域名的反写&lt;/li&gt;
&lt;li&gt;artifactId 构件标识符（子模块名称），和groupId一起唯一标识一个构件，可以使用&quot;项目名-子模块名&quot;的命名方式&lt;/li&gt;
&lt;li&gt;version 项目当前版本，格式为:主版本.次版本.增量版本-限定版本号；限定版本号可以设置为SNAPSHOT（开发），Laest（最新），Alpha（内部测试），Release（稳定），Beta（公测），GA（正式发布）等&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;重要：groupId、artifactId、version三个元素构成基本坐标，可以唯一标识一个Maven项目。&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;packaging 项目产生的构件类型（项目打包的类型），可以取值为jar、war、rar、ear、pom，也可以创建新类型；如果不设置，默认为jar&lt;/li&gt;
&lt;li&gt;name 项目的名称, Maven产生的文档用&lt;/li&gt;
&lt;li&gt;url 项目主页的URL, Maven产生的文档用&lt;/li&gt;
&lt;li&gt;description 项目的详细描述, Maven 产生的文档用&lt;/li&gt;
&lt;li&gt;developers 项目开发人员信息&lt;/li&gt;
&lt;li&gt;licenses 许可信息&lt;/li&gt;
&lt;li&gt;organization 组织信息&lt;/li&gt;
&lt;li&gt;dependencies 项目相关的所有依赖（dependency 包含一个依赖包的坐标信息）&lt;/li&gt;
&lt;li&gt;properties 定义配置属性，例如设置project.build.sourceEncoding为UTF-8，防止中文乱码&lt;/li&gt;
&lt;li&gt;build 定义构建项目需要的信息&lt;/li&gt;
&lt;li&gt;resources 描述项目相关或测试相关的所有资源路径&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;parent---继承&quot;&gt;3.3 - parent - 继承&lt;/h2&gt;
&lt;p&gt;应用在子项目中。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode xml&quot;&gt;
&lt;code class=&quot;sourceCode xml&quot;&gt;    &lt;span class=&quot;co&quot;&gt;&amp;lt;!-- 父项目的坐标。如果项目中没有规定某个元素的值，那么父项目中的对应值即为项目的默认值。坐标包括group ID，artifact ID和 version。 --&amp;gt;&lt;/span&gt; 
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;parent&amp;gt;&lt;/span&gt; 
        &lt;span class=&quot;co&quot;&gt;&amp;lt;!-- 被继承的父项目的构件标识符 --&amp;gt;&lt;/span&gt; 
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;xxx&lt;span class=&quot;kw&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;co&quot;&gt;&amp;lt;!-- 被继承的父项目的全球唯一标识符 --&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;xxx&lt;span class=&quot;kw&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt; 
        &lt;span class=&quot;co&quot;&gt;&amp;lt;!-- 被继承的父项目的版本 --&amp;gt;&lt;/span&gt; 
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;xxx&lt;span class=&quot;kw&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;co&quot;&gt;&amp;lt;!-- 父项目的pom.xml文件的相对路径。默认值是../pom.xml。Maven首先在构建当前项目的地方寻找父项目的pom，其次在文件系统的这个位置（relativePath位置），然后在本地仓库，最后在远程仓库寻找父项目的pom。 --&amp;gt;&lt;/span&gt; 
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;relativePath&amp;gt;&lt;/span&gt;xxx&lt;span class=&quot;kw&quot;&gt;&amp;lt;/relativePath&amp;gt;&lt;/span&gt; 
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/parent&amp;gt;&lt;/span&gt; &lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;dependencies---依赖&quot;&gt;3.4 - dependencies - 依赖&lt;/h2&gt;
&lt;p&gt;官网信息：Dependency Scope&lt;br/&gt;&lt;a href=&quot;http://maven.apache.org/guides/introduction/introduction-to-dependency-mechanism.html#Dependency_Scope&quot; class=&quot;uri&quot;&gt;http://maven.apache.org/guides/introduction/introduction-to-dependency-mechanism.html#Dependency_Scope&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;groupId 依赖项的groupId&lt;/li&gt;
&lt;li&gt;artifactId 依赖项的artifactId&lt;/li&gt;
&lt;li&gt;version 依赖项的版本&lt;/li&gt;
&lt;li&gt;exclusions 排除项目中的依赖冲突时使用。&lt;/li&gt;
&lt;li&gt;scope 依赖项的适用范围：
&lt;ul&gt;&lt;li&gt;compile，缺省值，适用于所有阶段，会随着项目一起发布。&lt;/li&gt;
&lt;li&gt;provided，类似compile，期望JDK、容器或使用者会提供这个依赖。如servlet.jar。&lt;/li&gt;
&lt;li&gt;runtime，只在运行时使用，如JDBC驱动，适用运行和测试阶段。&lt;/li&gt;
&lt;li&gt;test，只在测试时使用，用于编译和运行测试代码。不会随项目发布。&lt;/li&gt;
&lt;li&gt;system，类似provided，与本机系统相关联，可移植性差，需要显式提供包含依赖的jar，Maven不会在Repository中查找它。&lt;/li&gt;
&lt;li&gt;import，导入的范围，只使用在dependencyManagement中，表示从其它的pom中导入dependecy的配置&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;sourceCode xml&quot;&gt;
&lt;code class=&quot;sourceCode xml&quot;&gt;    &lt;span class=&quot;co&quot;&gt;&amp;lt;!-- 该元素描述了项目相关的所有依赖。 这些依赖组成了项目构建过程中的一个个环节。它们自动从项目定义的仓库中下载。 --&amp;gt;&lt;/span&gt;         
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;dependencies&amp;gt;&lt;/span&gt; 
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt; 
            &lt;span class=&quot;co&quot;&gt;&amp;lt;!-- 依赖的group ID --&amp;gt;&lt;/span&gt; 
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt; org.apache.maven &lt;span class=&quot;kw&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt; 
            &lt;span class=&quot;co&quot;&gt;&amp;lt;!-- 依赖的artifact ID --&amp;gt;&lt;/span&gt; 
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt; maven-artifact &lt;span class=&quot;kw&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt; 
            &lt;span class=&quot;co&quot;&gt;&amp;lt;!-- 依赖的版本号。 在Maven 2里, 也可以配置成版本号的范围。 --&amp;gt;&lt;/span&gt; 
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt; 3.8.1 &lt;span class=&quot;kw&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt; 
            &lt;span class=&quot;co&quot;&gt;&amp;lt;!-- 依赖类型，默认类型是jar。它通常表示依赖的文件的扩展名，但也有例外。一个类型可以被映射成另外一个扩展名或分类器。类型经常和使用的打包方式对应，尽管这也有例外。一些类型的例子：jar，war，ejb-client和test-jar。--&amp;gt;&lt;/span&gt; 
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;type&amp;gt;&lt;/span&gt; jar &lt;span class=&quot;kw&quot;&gt;&amp;lt;/type&amp;gt;&lt;/span&gt; 
            &lt;span class=&quot;co&quot;&gt;&amp;lt;!-- 依赖的分类器。分类器可以区分属于同一个POM，但不同构建方式的构件。分类器名被附加到文件名的版本号后面。例如，如果你想要构建两个单独的构件成JAR，一个使用Java 1.4编译器，另一个使用Java 6编译器，你就可以使用分类器来生成两个单独的JAR构件。 --&amp;gt;&lt;/span&gt; 
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;classifier&amp;gt;&amp;lt;/classifier&amp;gt;&lt;/span&gt; 
            &lt;span class=&quot;co&quot;&gt;&amp;lt;!-- 依赖范围。在项目发布过程中，帮助决定哪些构件被包括进来。欲知详情请参考依赖机制。 &lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;                - compile ：默认范围，用于编译 &lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;                - provided：类似于编译，但支持你期待jdk或者容器提供，类似于classpath &lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;                - runtime: 在执行时需要使用 &lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;                - test: 用于test任务时使用 &lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;                - system: 需要外在提供相应的元素。通过systemPath来取得 &lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;                - systemPath: 仅用于范围为system。提供相应的路径 &lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;                - optional: 当项目自身被依赖时，标注依赖是否传递。用于连续依赖时使用 --&amp;gt;&lt;/span&gt; 
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;scope&amp;gt;&lt;/span&gt; test &lt;span class=&quot;kw&quot;&gt;&amp;lt;/scope&amp;gt;&lt;/span&gt; 
            &lt;span class=&quot;co&quot;&gt;&amp;lt;!-- 仅供system范围使用。注意，不鼓励使用这个元素，并且在新的版本中该元素可能被覆盖掉。该元素为依赖规定了文件&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;                 系统上的路径。需要绝对路径而不是相对路径。推荐使用属性匹配绝对路径，例如${java.home}。 --&amp;gt;&lt;/span&gt; 
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;systemPath&amp;gt;&amp;lt;/systemPath&amp;gt;&lt;/span&gt; 
            &lt;span class=&quot;co&quot;&gt;&amp;lt;!-- 排除依赖列表，不依赖项目的依赖。此元素主要用于解决版本冲突问题 --&amp;gt;&lt;/span&gt; 
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;exclusions&amp;gt;&lt;/span&gt; 
                &lt;span class=&quot;kw&quot;&gt;&amp;lt;exclusion&amp;gt;&lt;/span&gt; 
                    &lt;span class=&quot;kw&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt; spring-core &lt;span class=&quot;kw&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt; 
                    &lt;span class=&quot;kw&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt; org.springframework &lt;span class=&quot;kw&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt; 
                &lt;span class=&quot;kw&quot;&gt;&amp;lt;/exclusion&amp;gt;&lt;/span&gt; 
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;/exclusions&amp;gt;&lt;/span&gt; 
            &lt;span class=&quot;co&quot;&gt;&amp;lt;!-- 可选依赖，如果在项目B中声明C依赖为可选，那么需要在依赖于B的项目A中显式的引用对C的依赖。可选依赖阻断依赖的传递性。 --&amp;gt;&lt;/span&gt; 
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;optional&amp;gt;&lt;/span&gt; true &lt;span class=&quot;kw&quot;&gt;&amp;lt;/optional&amp;gt;&lt;/span&gt; 
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt; 
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/dependencies&amp;gt;&lt;/span&gt; &lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;dependencyManagement&lt;/strong&gt;&lt;br/&gt;依赖管理。其中定义的多个依赖，并不会实际引入。&lt;br/&gt;应用在父模块中，供子模块所继承使用。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;sourceCode xml&quot;&gt;
&lt;code class=&quot;sourceCode xml&quot;&gt;&lt;span class=&quot;co&quot;&gt;&amp;lt;!-- 继承自该项目的所有子项目的默认依赖信息。这部分的依赖信息不会被立即解析,而是当子项目声明一个依赖（必须描述group ID和artifact ID信息），&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;如果group ID和artifact ID以外的一些信息没有描述，则通过group ID和artifact ID匹配到这里的依赖，并使用这里的依赖信息。 --&amp;gt;&lt;/span&gt; 
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;dependencyManagement&amp;gt;&lt;/span&gt; 
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;dependencies&amp;gt;&lt;/span&gt; 
            &lt;span class=&quot;co&quot;&gt;&amp;lt;!-- 参见dependencies/dependency元素 --&amp;gt;&lt;/span&gt; 
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;dependency&amp;gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt; 
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;/dependencies&amp;gt;&lt;/span&gt; 
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/dependencyManagement&amp;gt;&lt;/span&gt; &lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;modules---聚合&quot;&gt;3.5 - modules - 聚合&lt;/h2&gt;
&lt;p&gt;可以通过一个大的项目来整合各个小的模块&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode xml&quot;&gt;
&lt;code class=&quot;sourceCode xml&quot;&gt; &lt;span class=&quot;co&quot;&gt;&amp;lt;!-- 模块（有时称作子项目） 被构建成项目的一部分。列出的每个模块元素是指向该模块的目录的相对路径 --&amp;gt;&lt;/span&gt; 
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;modules&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;co&quot;&gt;&amp;lt;!--子项目相对路径--&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;module&amp;gt;&amp;lt;/module&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/modules&amp;gt;&lt;/span&gt; &lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;同时需要将packaging设置为pom&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode xml&quot;&gt;
&lt;code class=&quot;sourceCode xml&quot;&gt;  &lt;span class=&quot;kw&quot;&gt;&amp;lt;packaging&amp;gt;&lt;/span&gt;pom&lt;span class=&quot;kw&quot;&gt;&amp;lt;/packaging&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;pluginmanagement&quot;&gt;3.6 - pluginManagement&lt;/h2&gt;
&lt;p&gt;Plugin的配置，应用在父项目。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode xml&quot;&gt;
&lt;code class=&quot;sourceCode xml&quot;&gt;    &lt;span class=&quot;co&quot;&gt;&amp;lt;!-- 子项目可以引用的默认插件信息。该插件配置项直到被引用时才会被解析或绑定到生命周期。给定插件的任何本地配置都会覆盖这里的配置 --&amp;gt;&lt;/span&gt; 
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;pluginManagement&amp;gt;&lt;/span&gt; 
         &lt;span class=&quot;co&quot;&gt;&amp;lt;!-- 使用的插件列表 。 --&amp;gt;&lt;/span&gt; 
         &lt;span class=&quot;kw&quot;&gt;&amp;lt;plugins&amp;gt;&lt;/span&gt; 
             &lt;span class=&quot;co&quot;&gt;&amp;lt;!-- plugin元素包含描述插件所需要的信息。 --&amp;gt;&lt;/span&gt; 
             &lt;span class=&quot;kw&quot;&gt;&amp;lt;plugin&amp;gt;&lt;/span&gt; 
                 &lt;span class=&quot;co&quot;&gt;&amp;lt;!-- 插件在仓库里的group ID --&amp;gt;&lt;/span&gt; 
                 &lt;span class=&quot;kw&quot;&gt;&amp;lt;groupId&amp;gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt; 
                 &lt;span class=&quot;co&quot;&gt;&amp;lt;!-- 插件在仓库里的artifact ID --&amp;gt;&lt;/span&gt; 
                 &lt;span class=&quot;kw&quot;&gt;&amp;lt;artifactId&amp;gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt; 
                 &lt;span class=&quot;co&quot;&gt;&amp;lt;!-- 被使用的插件的版本（或版本范围） --&amp;gt;&lt;/span&gt; 
                 &lt;span class=&quot;kw&quot;&gt;&amp;lt;version&amp;gt;&amp;lt;/version&amp;gt;&lt;/span&gt; 
                 &lt;span class=&quot;co&quot;&gt;&amp;lt;!-- 是否从该插件下载Maven扩展（例如打包和类型处理器），由于性能原因，只有在真需要下载时，该元素才被设置成enabled。 --&amp;gt;&lt;/span&gt; 
                 &lt;span class=&quot;kw&quot;&gt;&amp;lt;extensions&amp;gt;&lt;/span&gt;true/false&lt;span class=&quot;kw&quot;&gt;&amp;lt;/extensions&amp;gt;&lt;/span&gt;
                
                 &lt;span class=&quot;co&quot;&gt;&amp;lt;!-- 在构建生命周期中执行一组目标的配置。每个目标可能有不同的配置。 --&amp;gt;&lt;/span&gt; 
                 &lt;span class=&quot;kw&quot;&gt;&amp;lt;executions&amp;gt;&lt;/span&gt; 
                     &lt;span class=&quot;co&quot;&gt;&amp;lt;!-- execution元素包含了插件执行需要的信息 --&amp;gt;&lt;/span&gt; 
                     &lt;span class=&quot;kw&quot;&gt;&amp;lt;execution&amp;gt;&lt;/span&gt; 
                         &lt;span class=&quot;co&quot;&gt;&amp;lt;!-- 执行目标的标识符，用于标识构建过程中的目标，或者匹配继承过程中需要合并的执行目标 --&amp;gt;&lt;/span&gt; 
                         &lt;span class=&quot;kw&quot;&gt;&amp;lt;id&amp;gt;&amp;lt;/id&amp;gt;&lt;/span&gt;
                         &lt;span class=&quot;co&quot;&gt;&amp;lt;!-- 绑定了目标的构建生命周期阶段，如果省略，目标会被绑定到源数据里配置的默认阶段 --&amp;gt;&lt;/span&gt; 
                         &lt;span class=&quot;kw&quot;&gt;&amp;lt;phase&amp;gt;&amp;lt;/phase&amp;gt;&lt;/span&gt;
                         &lt;span class=&quot;co&quot;&gt;&amp;lt;!-- 配置的执行目标 --&amp;gt;&lt;/span&gt; 
                         &lt;span class=&quot;kw&quot;&gt;&amp;lt;goals&amp;gt;&amp;lt;/goals&amp;gt;&lt;/span&gt; 
                         &lt;span class=&quot;co&quot;&gt;&amp;lt;!-- 配置是否被传播到子POM --&amp;gt;&lt;/span&gt; 
                         &lt;span class=&quot;kw&quot;&gt;&amp;lt;inherited&amp;gt;&lt;/span&gt;true/false&lt;span class=&quot;kw&quot;&gt;&amp;lt;/inherited&amp;gt;&lt;/span&gt; 
                         &lt;span class=&quot;co&quot;&gt;&amp;lt;!-- 作为DOM对象的配置 --&amp;gt;&lt;/span&gt; 
                         &lt;span class=&quot;kw&quot;&gt;&amp;lt;configuration&amp;gt;&amp;lt;/configuration&amp;gt;&lt;/span&gt;
                     &lt;span class=&quot;kw&quot;&gt;&amp;lt;/execution&amp;gt;&lt;/span&gt; 
                 &lt;span class=&quot;kw&quot;&gt;&amp;lt;/executions&amp;gt;&lt;/span&gt; 
                 
                 &lt;span class=&quot;co&quot;&gt;&amp;lt;!-- 项目引入插件所需要的额外依赖 --&amp;gt;&lt;/span&gt; 
                 &lt;span class=&quot;kw&quot;&gt;&amp;lt;dependencies&amp;gt;&lt;/span&gt;
                     &lt;span class=&quot;co&quot;&gt;&amp;lt;!-- 参见dependencies/dependency元素 --&amp;gt;&lt;/span&gt; 
                     &lt;span class=&quot;kw&quot;&gt;&amp;lt;dependency&amp;gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt; 
                 &lt;span class=&quot;kw&quot;&gt;&amp;lt;/dependencies&amp;gt;&lt;/span&gt; 

                 &lt;span class=&quot;co&quot;&gt;&amp;lt;!-- 任何配置是否被传播到子项目 --&amp;gt;&lt;/span&gt; 
                 &lt;span class=&quot;kw&quot;&gt;&amp;lt;inherited&amp;gt;&lt;/span&gt;true/false&lt;span class=&quot;kw&quot;&gt;&amp;lt;/inherited&amp;gt;&lt;/span&gt;
                 &lt;span class=&quot;co&quot;&gt;&amp;lt;!-- 作为DOM对象的配置 --&amp;gt;&lt;/span&gt; 
                 &lt;span class=&quot;kw&quot;&gt;&amp;lt;configuration&amp;gt;&amp;lt;/configuration&amp;gt;&lt;/span&gt;
             &lt;span class=&quot;kw&quot;&gt;&amp;lt;/plugin&amp;gt;&lt;/span&gt; 
         &lt;span class=&quot;kw&quot;&gt;&amp;lt;/plugins&amp;gt;&lt;/span&gt; 
     &lt;span class=&quot;kw&quot;&gt;&amp;lt;/pluginManagement&amp;gt;&lt;/span&gt; &lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;resources&quot;&gt;3.7 - resources&lt;/h2&gt;
&lt;p&gt;Build时需要的资源文件&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode xml&quot;&gt;
&lt;code class=&quot;sourceCode xml&quot;&gt;        &lt;span class=&quot;co&quot;&gt;&amp;lt;!-- 这个元素描述了项目相关的所有资源路径列表，例如和项目相关的属性文件，这些资源被包含在最终的打包文件里。 --&amp;gt;&lt;/span&gt; 
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;resources&amp;gt;&lt;/span&gt; 
            &lt;span class=&quot;co&quot;&gt;&amp;lt;!-- 这个元素描述了项目相关或测试相关的所有资源路径 --&amp;gt;&lt;/span&gt; 
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;resource&amp;gt;&lt;/span&gt; 
                &lt;span class=&quot;co&quot;&gt;&amp;lt;!-- 描述了资源的相对路径（相对target/classes目录）。如果只是想把资源放到源码目录结构里，就不需要该配置。 --&amp;gt;&lt;/span&gt; 
                &lt;span class=&quot;kw&quot;&gt;&amp;lt;targetPath&amp;gt;&amp;lt;/targetPath&amp;gt;&lt;/span&gt; 
                &lt;span class=&quot;co&quot;&gt;&amp;lt;!-- 是否使用参数值代替参数名。参数值取自properties元素或者文件里配置的属性，文件在filters元素里列出。 --&amp;gt;&lt;/span&gt; 
                &lt;span class=&quot;kw&quot;&gt;&amp;lt;filtering&amp;gt;&amp;lt;/filtering&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;co&quot;&gt;&amp;lt;!-- 描述存放资源的目录，该路径相对POM路径 --&amp;gt;&lt;/span&gt; 
                &lt;span class=&quot;kw&quot;&gt;&amp;lt;directory&amp;gt;&amp;lt;/directory&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;co&quot;&gt;&amp;lt;!-- 包含的模式列表，例如**/*.xml. --&amp;gt;&lt;/span&gt; 
                &lt;span class=&quot;kw&quot;&gt;&amp;lt;includes&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;kw&quot;&gt;&amp;lt;include&amp;gt;&amp;lt;/include&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;kw&quot;&gt;&amp;lt;/includes&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;co&quot;&gt;&amp;lt;!-- 排除的模式列表，例如**/*.xml --&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;kw&quot;&gt;&amp;lt;excludes&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;kw&quot;&gt;&amp;lt;exclude&amp;gt;&amp;lt;/exclude&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;kw&quot;&gt;&amp;lt;/excludes&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;/resource&amp;gt;&lt;/span&gt; 
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;/resources&amp;gt;&lt;/span&gt; &lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;生命周期-1&quot;&gt;4.1 - 生命周期&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;clean 清理项目&lt;/li&gt;
&lt;li&gt;default 构建项目&lt;/li&gt;
&lt;li&gt;site 生成项目站点&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;完整的项目构建过程&quot;&gt;4.2 - 完整的项目构建过程&lt;/h2&gt;
&lt;p&gt;清理、编译、测试、打包、集成测试、验证、部署&lt;br/&gt;clean、compile、test、package、install&lt;br/&gt;注意：执行某个阶段时，其前面的阶段会顺序执行，但不会触发其他生命周期的另外阶段。&lt;/p&gt;
&lt;h2 id=&quot;clean的阶段&quot;&gt;4.3 - clean的阶段&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;pre-clean 执行清理前的工作&lt;/li&gt;
&lt;li&gt;clean 清理上一次构建生成的所有文件&lt;/li&gt;
&lt;li&gt;post-clean 执行清理后的文件&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;default构建项目最核心&quot;&gt;4.4 - default构建项目（最核心）&lt;/h2&gt;
&lt;p&gt;compile、test、package、install&lt;/p&gt;
&lt;h2 id=&quot;site的阶段&quot;&gt;4.5 - site的阶段&lt;/h2&gt;
&lt;p&gt;根据pom文件中信息自动生成站点&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;pre-site 在生成项目站点前要完成的工作&lt;/li&gt;
&lt;li&gt;site 生成项目的站点文档&lt;/li&gt;
&lt;li&gt;post-site 在生成项目站点后要完成的工作&lt;/li&gt;
&lt;li&gt;site-deploy 发布&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;查看帮助信息&quot;&gt;5.1 - 查看帮助信息&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;mvn --help/-h&lt;/li&gt;
&lt;li&gt;mvn help:help 显示help插件的帮助信息&lt;/li&gt;
&lt;li&gt;mvn help:help -Ddetail=true 显示help插件的详细帮助信息&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code&gt;guowli@5CG450158J MINGW64 /d/Anliven-Running/Zen/EclipseProjects/TestMaven02
$ mvn help:help
[INFO] Scanning for projects...
[INFO]
[INFO] ------------------------------------------------------------------------
[INFO] Building testmaven02 0.0.1-SNAPSHOT
[INFO] ------------------------------------------------------------------------
[INFO]
[INFO] --- maven-help-plugin:2.2:help (default-cli) @ testmaven02 ---
[INFO] Maven Help Plugin 2.2
  The Maven Help plugin provides goals aimed at helping to make sense out of the
  build environment. It includes the ability to view the effective POM and
  settings files, after inheritance and active profiles have been applied, as
  well as a describe a particular plugin goal to give usage information.

This plugin has 9 goals:

help:active-profiles
  Displays a list of the profiles which are currently active for this build.

help:all-profiles
  Displays a list of available profiles under the current project.
  Note: it will list all profiles for a project. If a profile comes up with a
  status inactive then there might be a need to set profile activation
  switches/property.

help:describe
  Displays a list of the attributes for a Maven Plugin and/or goals (aka Mojo -
  Maven plain Old Java Object).

help:effective-pom
  Displays the effective POM as an XML for this build, with the active profiles
  factored in.

help:effective-settings
  Displays the calculated settings as XML for this project, given any profile
  enhancement and the inheritance of the global settings into the user-level
  settings.

help:evaluate
  Evaluates Maven expressions given by the user in an interactive mode.

help:expressions
  Displays the supported Plugin expressions used by Maven.

help:help
  Display help information on maven-help-plugin.
  Call mvn help:help -Ddetail=true -Dgoal=&amp;lt;goal-name&amp;gt; to display parameter
  details.

help:system
  Displays a list of the platform details like system properties and environment
  variables.


[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 1.409 s
[INFO] Finished at: 2017-10-24T14:43:49+08:00
[INFO] Final Memory: 11M/309M
[INFO] ------------------------------------------------------------------------

guowli@5CG450158J MINGW64 /d/Anliven-Running/Zen/EclipseProjects/TestMaven02
$&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;查看插件的帮助信息&quot;&gt;5.2 - 查看插件的帮助信息：&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;mvn &amp;lt;plug-in&amp;gt;:help&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;示例：mvn dependency:help&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;使用maven-help-插件&quot;&gt;5.3 - 使用Maven Help 插件&lt;/h2&gt;
&lt;p&gt;mvn help:describe命令可以显示某个插件的信息&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;-Dplugin=pluginName&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;-Dgoal(或-Dmojo)=goalName&lt;/li&gt;
&lt;li&gt;-Ddetail=true&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code&gt;mvn help:describe -Dplugin=help    # 使用help插件的describe目标来显示Maven Help插件的信息
mvn help:describe -Dplugin=help -Dfull    # 显示Maven Help插件所有可用目标
mvn help:describe -Dplugin=exec -Dfull    # 显示Maven Exec插件所有可用目标
mvn help:describe -Dplugin=compiler -Dmojo=compile -Dfull    # 获取单个目标的信息,显示Maven Compiler插件的compile目标信息
mvn help:effective-pom    # 查看实际pom信息&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;常用命令-1&quot;&gt;5.4 - 常用命令&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;mvn -version/-v 查看maven版本&lt;/li&gt;
&lt;li&gt;mvn compile 编译源代码&lt;/li&gt;
&lt;li&gt;mvn test 运行测试&lt;/li&gt;
&lt;li&gt;mvn test-compile 编译测试代码&lt;/li&gt;
&lt;li&gt;mvn test -skipping compile -skipping test-compile # 只测试，不编译，也不测试编译；&lt;/li&gt;
&lt;li&gt;mvn package 打包（生成target目录，编译、测试代码，生成测试报告，生成jar/war文件）&lt;/li&gt;
&lt;li&gt;mvn package -Dmaven.test.skip=ture 打包时跳过测试&lt;/li&gt;
&lt;li&gt;mvn install 安装jar到本地Repository中&lt;/li&gt;
&lt;li&gt;mvn install -X 打开 Maven 的调试标记查看完整的依赖踪迹（包含被拒绝引入的构件）&lt;/li&gt;
&lt;li&gt;mvn clean 清除产生的项目（删除target目录及文件）&lt;/li&gt;
&lt;li&gt;mvn clean install 先清除，然后编译安装到本地仓库&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code&gt;mvn -e    # 显示详细错误信息
mvn validate    # 验证工程是否正确，所有需要的资源是否可用
mvn verify    # 运行任何检查，验证包是否有效且达到质量标准

mvn archetype:create -DgroupId=packageName -DartifactId=projectName    # 创建Maven的普通Java项目
mvn archetype:generate    # 反向生成maven项目的骨架（建议使用，简洁方便，根据提示操作即可）

mvn eclipse:eclipse    # 生成eclipse项目结构（将项目转化为Eclipse项目）
mvn eclipse:clean    # 清除Eclipse项目结构
mvn idea:idea    # 生成idea项目结构

mvn site    # 生成站点目录: 
mvn site-deploy    # 生成站点目录并发布

mvn deploy    # 上传到私有服务器

mvn jar:jar    # 只打jar包
mvn -Dtest package    # 只打包不测试
mvn source:jar    # 源码打包
mvn source:jar-no-fork    # 源码打包

mvn dependency:list    # 显示当前项目已被解析的依赖
mvn dependency:resolve    # 显示已解决依赖的列表
mvn dependency:tree    # 显示整个依赖树
mvn dependency:analyze    # 分析项目的依赖信息，作用等同于mvn dependency:tree&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;一些示例&quot;&gt;5.5 - 一些示例&lt;/h2&gt;
&lt;h3 id=&quot;mvn-compile-编译&quot;&gt;mvn compile 编译&lt;/h3&gt;
&lt;p&gt;如果是第一次运行mvn compile等命令时，将会下载很多的第三方和maven所依赖的jar包。&lt;br/&gt;在Maven项目根目录下，默认生成target目录：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;target    　　　　　    构建过程中的默认生成的临时目录
  target/classes/            存放src/main/java目录下源文件编译出来的字节码文件（.class）
  target/maven-status/&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code&gt;guowli@5CG450158J MINGW64 /d/Anliven-Running/Zen/EclipseProjects/TestMaven
$ mvn compile
[INFO] Scanning for projects...
[INFO]
[INFO] ------------------------------------------------------------------------
[INFO] Building testmaven 0.0.1-SNAPSHOT
[INFO] ------------------------------------------------------------------------
[INFO]
[INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ testmaven ---
[WARNING] Using platform encoding (GBK actually) to copy filtered resources, i.e. build is platform dependent!
[INFO] skip non existing resourceDirectory D:\Anliven-Running\Zen\EclipseProjects\TestMaven\src\main\resources
[INFO]
[INFO] --- maven-compiler-plugin:3.1:compile (default-compile) @ testmaven ---
[INFO] Changes detected - recompiling the module!
[WARNING] File encoding has not been set, using platform encoding GBK, i.e. build is platform dependent!
[INFO] Compiling 1 source file to D:\Anliven-Running\Zen\EclipseProjects\TestMaven\target\classes
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 2.064 s
[INFO] Finished at: 2017-10-20T10:56:12+08:00
[INFO] Final Memory: 15M/292M
[INFO] ------------------------------------------------------------------------

guowli@5CG450158J MINGW64 /d/Anliven-Running/Zen/EclipseProjects/TestMaven
$ ls -l
total 1
-rw-r--r-- 1 guowli 1049089 561 Oct 19 17:44 pom.xml
drwxr-xr-x 1 guowli 1049089   0 Oct 19 13:21 src/
drwxr-xr-x 1 guowli 1049089   0 Oct 20 10:56 target/

guowli@5CG450158J MINGW64 /d/Anliven-Running/Zen/EclipseProjects/TestMaven
$ ls -l target/
total 0
drwxr-xr-x 1 guowli 1049089 0 Oct 20 10:56 classes/
drwxr-xr-x 1 guowli 1049089 0 Oct 20 10:56 maven-status/

guowli@5CG450158J MINGW64 /d/Anliven-Running/Zen/EclipseProjects/TestMaven
$ls -l target/classes/anliven/testmaven01/HelloMaven.class
-rw-r--r-- 1 guowli 1049089 406 Oct 20 10:56 target/classes/anliven/testmaven01/HelloMaven.class&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;mvn-test-测试&quot;&gt;mvn test 测试&lt;/h3&gt;
&lt;p&gt;生成如下目录：&lt;br/&gt;target/surefire-reports/ 存放生成的测试报告&lt;br/&gt;target/test-classes/ 存放src/test/java目录下源文件编译出来的字节码文件（.class）&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;guowli@5CG450158J MINGW64 /d/Anliven-Running/Zen/EclipseProjects/TestMaven
$ ls -l target/
total 0
drwxr-xr-x 1 guowli 1049089 0 Oct 20 10:56 classes/
drwxr-xr-x 1 guowli 1049089 0 Oct 20 10:56 maven-status/

guowli@5CG450158J MINGW64 /d/Anliven-Running/Zen/EclipseProjects/TestMaven
$ mvn test
[INFO] Scanning for projects...
[INFO]
[INFO] ------------------------------------------------------------------------
[INFO] Building testmaven 0.0.1-SNAPSHOT
[INFO] ------------------------------------------------------------------------
[INFO]
[INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ testmaven ---
[WARNING] Using platform encoding (GBK actually) to copy filtered resources, i.e. build is platform dependent!
[INFO] skip non existing resourceDirectory D:\Anliven-Running\Zen\EclipseProjects\TestMaven\src\main\resources
[INFO]
[INFO] --- maven-compiler-plugin:3.1:compile (default-compile) @ testmaven ---
[INFO] Nothing to compile - all classes are up to date
[INFO]
[INFO] --- maven-resources-plugin:2.6:testResources (default-testResources) @ testmaven ---
[WARNING] Using platform encoding (GBK actually) to copy filtered resources, i.e. build is platform dependent!
[INFO] skip non existing resourceDirectory D:\Anliven-Running\Zen\EclipseProjects\TestMaven\src\test\resources
[INFO]
[INFO] --- maven-compiler-plugin:3.1:testCompile (default-testCompile) @ testmaven ---
[INFO] Changes detected - recompiling the module!
[WARNING] File encoding has not been set, using platform encoding GBK, i.e. build is platform dependent!
[INFO] Compiling 1 source file to D:\Anliven-Running\Zen\EclipseProjects\TestMaven\target\test-classes
[INFO]
[INFO] --- maven-surefire-plugin:2.12.4:test (default-test) @ testmaven ---
[INFO] Surefire report directory: D:\Anliven-Running\Zen\EclipseProjects\TestMaven\target\surefire-reports

-------------------------------------------------------
 T E S T S
-------------------------------------------------------
Running anliven.testmaven01.HelloMavenTest
Run test!
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.064 sec

Results :

Tests run: 1, Failures: 0, Errors: 0, Skipped: 0

[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 3.286 s
[INFO] Finished at: 2017-10-20T11:01:06+08:00
[INFO] Final Memory: 16M/291M
[INFO] ------------------------------------------------------------------------

guowli@5CG450158J MINGW64 /d/Anliven-Running/Zen/EclipseProjects/TestMaven
$ ls -l target/
total 0
drwxr-xr-x 1 guowli 1049089 0 Oct 20 10:56 classes/
drwxr-xr-x 1 guowli 1049089 0 Oct 20 10:56 maven-status/
drwxr-xr-x 1 guowli 1049089 0 Oct 20 11:01 surefire-reports/
drwxr-xr-x 1 guowli 1049089 0 Oct 20 11:01 test-classes/

guowli@5CG450158J MINGW64 /d/Anliven-Running/Zen/EclipseProjects/TestMaven
$ ls -l target/surefire-reports/
total 9
-rw-r--r-- 1 guowli 1049089  282 Oct 20 11:01 anliven.testmaven01.HelloMavenTest.txt
-rw-r--r-- 1 guowli 1049089 6398 Oct 20 11:01 TEST-anliven.testmaven01.HelloMavenTest.xml&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;mvn-package-打包&quot;&gt;mvn package 打包&lt;/h3&gt;
&lt;p&gt;生成如下目录及文件：&lt;br/&gt;target/maven-archiver/&lt;br/&gt;target/xxx-y.y.y-zzz.jar 生成的jar包&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;guowli@5CG450158J MINGW64 /d/Anliven-Running/Zen/EclipseProjects/TestMaven
$ ls -l target/
total 0
drwxr-xr-x 1 guowli 1049089 0 Oct 20 10:56 classes/
drwxr-xr-x 1 guowli 1049089 0 Oct 20 10:56 maven-status/
drwxr-xr-x 1 guowli 1049089 0 Oct 20 11:01 surefire-reports/
drwxr-xr-x 1 guowli 1049089 0 Oct 20 11:01 test-classes/

guowli@5CG450158J MINGW64 /d/Anliven-Running/Zen/EclipseProjects/TestMaven
$ mvn package
[INFO] Scanning for projects...
[INFO]
[INFO] ------------------------------------------------------------------------
[INFO] Building testmaven 0.0.1-SNAPSHOT
[INFO] ------------------------------------------------------------------------
[INFO]
[INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ testmaven ---
[WARNING] Using platform encoding (GBK actually) to copy filtered resources, i.e. build is platform dependent!
[INFO] skip non existing resourceDirectory D:\Anliven-Running\Zen\EclipseProjects\TestMaven\src\main\resources
[INFO]
[INFO] --- maven-compiler-plugin:3.1:compile (default-compile) @ testmaven ---
[INFO] Nothing to compile - all classes are up to date
[INFO]
[INFO] --- maven-resources-plugin:2.6:testResources (default-testResources) @ testmaven ---
[WARNING] Using platform encoding (GBK actually) to copy filtered resources, i.e. build is platform dependent!
[INFO] skip non existing resourceDirectory D:\Anliven-Running\Zen\EclipseProjects\TestMaven\src\test\resources
[INFO]
[INFO] --- maven-compiler-plugin:3.1:testCompile (default-testCompile) @ testmaven ---
[INFO] Changes detected - recompiling the module!
[WARNING] File encoding has not been set, using platform encoding GBK, i.e. build is platform dependent!
[INFO] Compiling 1 source file to D:\Anliven-Running\Zen\EclipseProjects\TestMaven\target\test-classes
[INFO]
[INFO] --- maven-surefire-plugin:2.12.4:test (default-test) @ testmaven ---
[INFO] Surefire report directory: D:\Anliven-Running\Zen\EclipseProjects\TestMaven\target\surefire-reports

-------------------------------------------------------
 T E S T S
-------------------------------------------------------
Running anliven.testmaven01.HelloMavenTest
Run test!
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.065 sec

Results :

Tests run: 1, Failures: 0, Errors: 0, Skipped: 0

[INFO]
[INFO] --- maven-jar-plugin:2.4:jar (default-jar) @ testmaven ---
[INFO] Building jar: D:\Anliven-Running\Zen\EclipseProjects\TestMaven\target\testmaven-0.0.1-SNAPSHOT.jar
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 3.437 s
[INFO] Finished at: 2017-10-20T11:13:48+08:00
[INFO] Final Memory: 16M/213M
[INFO] ------------------------------------------------------------------------

guowli@5CG450158J MINGW64 /d/Anliven-Running/Zen/EclipseProjects/TestMaven
$ ls -l target/
total 4
drwxr-xr-x 1 guowli 1049089    0 Oct 20 10:56 classes/
drwxr-xr-x 1 guowli 1049089    0 Oct 20 11:13 maven-archiver/
drwxr-xr-x 1 guowli 1049089    0 Oct 20 10:56 maven-status/
drwxr-xr-x 1 guowli 1049089    0 Oct 20 11:01 surefire-reports/
drwxr-xr-x 1 guowli 1049089    0 Oct 20 11:01 test-classes/
-rw-r--r-- 1 guowli 1049089 2151 Oct 20 11:13 testmaven-0.0.1-SNAPSHOT.jar&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;mvn-clean-删除target目录及文件&quot;&gt;mvn clean 删除target目录及文件&lt;/h3&gt;
&lt;pre&gt;
&lt;code&gt;guowli@5CG450158J MINGW64 /d/Anliven-Running/Zen/EclipseProjects/TestMaven
$ ll
total 5
-rw-r--r-- 1 guowli 1049089 561 Oct 19 17:44 pom.xml
drwxr-xr-x 1 guowli 1049089   0 Oct 19 13:21 src/
drwxr-xr-x 1 guowli 1049089   0 Oct 20 11:13 target/

guowli@5CG450158J MINGW64 /d/Anliven-Running/Zen/EclipseProjects/TestMaven
$ mvn clean
[INFO] Scanning for projects...
[INFO]
[INFO] ------------------------------------------------------------------------
[INFO] Building testmaven 0.0.1-SNAPSHOT
[INFO] ------------------------------------------------------------------------
Downloading: http://central.maven.org/maven2/org/apache/maven/plugins/maven-clean-plugin/2.5/maven-clean-plugin-2.5.pom
Downloaded: http://central.maven.org/maven2/org/apache/maven/plugins/maven-clean-plugin/2.5/maven-clean-plugin-2.5.pom (0 B at 0 B/s)
Downloading: http://central.maven.org/maven2/org/apache/maven/plugins/maven-clean-plugin/2.5/maven-clean-plugin-2.5.jar
Downloaded: http://central.maven.org/maven2/org/apache/maven/plugins/maven-clean-plugin/2.5/maven-clean-plugin-2.5.jar (0 B at 0 B/s)
[INFO]
[INFO] --- maven-clean-plugin:2.5:clean (default-clean) @ testmaven ---
[INFO] Deleting D:\Anliven-Running\Zen\EclipseProjects\TestMaven\target
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 3.072 s
[INFO] Finished at: 2017-10-20T17:13:51+08:00
[INFO] Final Memory: 11M/245M
[INFO] ------------------------------------------------------------------------

guowli@5CG450158J MINGW64 /d/Anliven-Running/Zen/EclipseProjects/TestMaven
$ ls -l
total 1
-rw-r--r-- 1 guowli 1049089 561 Oct 19 17:44 pom.xml
drwxr-xr-x 1 guowli 1049089   0 Oct 19 13:21 src/

guowli@5CG450158J MINGW64 /d/Anliven-Running/Zen/EclipseProjects/TestMaven
$&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;mvn-install-安装jar包到本地仓库中&quot;&gt;mvn install 安装jar包到本地仓库中&lt;/h3&gt;
&lt;pre&gt;
&lt;code&gt;guowli@5CG450158J MINGW64 /d/Anliven-Running/Zen/EclipseProjects/TestMaven
$ mvn install
[INFO] Scanning for projects...
[INFO]
[INFO] ------------------------------------------------------------------------
[INFO] Building testmaven 0.0.1-SNAPSHOT
[INFO] ------------------------------------------------------------------------
Downloading: http://central.maven.org/maven2/org/apache/maven/plugins/maven-install-plugin/2.4/maven-install-plugin-2.4.pom
Downloaded: http://central.maven.org/maven2/org/apache/maven/plugins/maven-install-plugin/2.4/maven-install-plugin-2.4.pom (0 B at 0 B/s)
Downloading: http://central.maven.org/maven2/org/apache/maven/plugins/maven-install-plugin/2.4/maven-install-plugin-2.4.jar
Downloaded: http://central.maven.org/maven2/org/apache/maven/plugins/maven-install-plugin/2.4/maven-install-plugin-2.4.jar (0 B at 0 B/s)
[INFO]
[INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ testmaven ---
[WARNING] Using platform encoding (GBK actually) to copy filtered resources, i.e. build is platform dependent!
[INFO] skip non existing resourceDirectory D:\Anliven-Running\Zen\EclipseProjects\TestMaven\src\main\resources
[INFO]
[INFO] --- maven-compiler-plugin:3.1:compile (default-compile) @ testmaven ---
[INFO] Changes detected - recompiling the module!
[WARNING] File encoding has not been set, using platform encoding GBK, i.e. build is platform dependent!
[INFO] Compiling 1 source file to D:\Anliven-Running\Zen\EclipseProjects\TestMaven\target\classes
[INFO]
[INFO] --- maven-resources-plugin:2.6:testResources (default-testResources) @ testmaven ---
[WARNING] Using platform encoding (GBK actually) to copy filtered resources, i.e. build is platform dependent!
[INFO] skip non existing resourceDirectory D:\Anliven-Running\Zen\EclipseProjects\TestMaven\src\test\resources
[INFO]
[INFO] --- maven-compiler-plugin:3.1:testCompile (default-testCompile) @ testmaven ---
[INFO] Changes detected - recompiling the module!
[WARNING] File encoding has not been set, using platform encoding GBK, i.e. build is platform dependent!
[INFO] Compiling 1 source file to D:\Anliven-Running\Zen\EclipseProjects\TestMaven\target\test-classes
[INFO]
[INFO] --- maven-surefire-plugin:2.12.4:test (default-test) @ testmaven ---
[INFO] Surefire report directory: D:\Anliven-Running\Zen\EclipseProjects\TestMaven\target\surefire-reports

-------------------------------------------------------
 T E S T S
-------------------------------------------------------
Running anliven.testmaven01.HelloMavenTest
Run test!
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.057 sec

Results :

Tests run: 1, Failures: 0, Errors: 0, Skipped: 0

[INFO]
[INFO] --- maven-jar-plugin:2.4:jar (default-jar) @ testmaven ---
[INFO] Building jar: D:\Anliven-Running\Zen\EclipseProjects\TestMaven\target\testmaven-0.0.1-SNAPSHOT.jar
[INFO]
[INFO] --- maven-install-plugin:2.4:install (default-install) @ testmaven ---
Downloading: http://central.maven.org/maven2/org/codehaus/plexus/plexus-utils/3.0.5/plexus-utils-3.0.5.pom
Downloaded: http://central.maven.org/maven2/org/codehaus/plexus/plexus-utils/3.0.5/plexus-utils-3.0.5.pom (2.5 kB at 4.7 kB/s)
Downloading: http://central.maven.org/maven2/org/codehaus/plexus/plexus/3.1/plexus-3.1.pom
Downloaded: http://central.maven.org/maven2/org/codehaus/plexus/plexus/3.1/plexus-3.1.pom (19 kB at 24 kB/s)
Downloading: http://central.maven.org/maven2/org/codehaus/plexus/plexus-digest/1.0/plexus-digest-1.0.pom
Downloaded: http://central.maven.org/maven2/org/codehaus/plexus/plexus-digest/1.0/plexus-digest-1.0.pom (1.1 kB at 1.9 kB/s)
Downloading: http://central.maven.org/maven2/org/codehaus/plexus/plexus-components/1.1.7/plexus-components-1.1.7.pom
Downloaded: http://central.maven.org/maven2/org/codehaus/plexus/plexus-components/1.1.7/plexus-components-1.1.7.pom (5.0 kB at 8.9 kB/s)
Downloading: http://central.maven.org/maven2/org/codehaus/plexus/plexus/1.0.8/plexus-1.0.8.pom
Downloaded: http://central.maven.org/maven2/org/codehaus/plexus/plexus/1.0.8/plexus-1.0.8.pom (7.2 kB at 13 kB/s)
Downloading: http://central.maven.org/maven2/org/codehaus/plexus/plexus-container-default/1.0-alpha-8/plexus-container-default-1.0-alpha-8.pom
Downloaded: http://central.maven.org/maven2/org/codehaus/plexus/plexus-container-default/1.0-alpha-8/plexus-container-default-1.0-alpha-8.pom (7.3 kB at 13 kB/s)
Downloading: http://central.maven.org/maven2/org/codehaus/plexus/plexus-utils/3.0.5/plexus-utils-3.0.5.jar
Downloading: http://central.maven.org/maven2/org/codehaus/plexus/plexus-digest/1.0/plexus-digest-1.0.jar
Downloaded: http://central.maven.org/maven2/org/codehaus/plexus/plexus-digest/1.0/plexus-digest-1.0.jar (12 kB at 9.8 kB/s)
Downloaded: http://central.maven.org/maven2/org/codehaus/plexus/plexus-utils/3.0.5/plexus-utils-3.0.5.jar (230 kB at 179 kB/s)
[INFO] Installing D:\Anliven-Running\Zen\EclipseProjects\TestMaven\target\testmaven-0.0.1-SNAPSHOT.jar to D:\DownLoadFiles\apache-maven-repo\anliven\testmaven01\testmaven\0.0.1-SNAPSHOT\testmaven-0.0.1-SNAPSHOT.jar
[INFO] Installing D:\Anliven-Running\Zen\EclipseProjects\TestMaven\pom.xml to D:\DownLoadFiles\apache-maven-repo\anliven\testmaven01\testmaven\0.0.1-SNAPSHOT\testmaven-0.0.1-SNAPSHOT.pom
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 9.602 s
[INFO] Finished at: 2017-10-20T17:14:19+08:00
[INFO] Final Memory: 18M/210M
[INFO] ------------------------------------------------------------------------

guowli@5CG450158J MINGW64 /d/Anliven-Running/Zen/EclipseProjects/TestMaven
$ ls -l
total 5
-rw-r--r-- 1 guowli 1049089 561 Oct 19 17:44 pom.xml
drwxr-xr-x 1 guowli 1049089   0 Oct 19 13:21 src/
drwxr-xr-x 1 guowli 1049089   0 Oct 20 17:14 target/

guowli@5CG450158J MINGW64 /d/Anliven-Running/Zen/EclipseProjects/TestMaven
$ ls -l target/
total 4
drwxr-xr-x 1 guowli 1049089    0 Oct 20 17:14 classes/
drwxr-xr-x 1 guowli 1049089    0 Oct 20 17:14 maven-archiver/
drwxr-xr-x 1 guowli 1049089    0 Oct 20 17:14 maven-status/
drwxr-xr-x 1 guowli 1049089    0 Oct 20 17:14 surefire-reports/
drwxr-xr-x 1 guowli 1049089    0 Oct 20 17:14 test-classes/
-rw-r--r-- 1 guowli 1049089 2150 Oct 20 17:14 testmaven-0.0.1-SNAPSHOT.jar

guowli@5CG450158J MINGW64 /d/Anliven-Running/Zen/EclipseProjects/TestMaven
$&lt;/code&gt;
&lt;/pre&gt;</description>
<pubDate>Fri, 15 Dec 2017 15:20:00 +0000</pubDate>
<dc:creator>Anliven</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/anliven/p/7956581.html</dc:identifier>
</item>
<item>
<title>41.Linux应用调试-修改内核来打印用户态的oops - LifeYx</title>
<link>http://www.cnblogs.com/lifexy/p/8045191.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/lifexy/p/8045191.html</guid>
<description>&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;1&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;.在之前&lt;span&gt;&lt;a href=&quot;http://www.cnblogs.com/lifexy/p/8006748.html&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;第36章&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;里,我们学习了通过驱动的oops定位错误代码行&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;a href=&quot;http://www.cnblogs.com/lifexy/p/8006748.html&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;第36章的oops代码&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;如下所示:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
Unable to handle kernel paging request at &lt;span&gt;virtual&lt;/span&gt; address &lt;span&gt;56000050&lt;/span&gt;
　　　　　　&lt;span&gt;//&lt;/span&gt;&lt;span&gt;无法处理内核页面请求的虚拟地址56000050&lt;/span&gt;&lt;span&gt;
pgd &lt;/span&gt;=&lt;span&gt; c3850000
[&lt;/span&gt;&lt;span&gt;56000050&lt;/span&gt;] *pgd=&lt;span&gt;00000000&lt;/span&gt;&lt;span&gt;
Internal error: Oops: &lt;/span&gt;&lt;span&gt;5&lt;/span&gt; [#&lt;span&gt;1&lt;/span&gt;&lt;span&gt;]
　　　　　　　　&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;内部错误oops&lt;/span&gt;&lt;span&gt;
Modules linked &lt;/span&gt;&lt;span&gt;in&lt;/span&gt;&lt;span&gt;: 26th_segmentfault
　　　　　　　　&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;表示内部错误发生在26th_segmentfault.ko驱动模块里&lt;/span&gt;&lt;span&gt;
CPU: &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;    Not tainted  (&lt;span&gt;2.6&lt;/span&gt;.&lt;span&gt;22.6&lt;/span&gt; #&lt;span&gt;2&lt;/span&gt;&lt;span&gt;)
PC &lt;/span&gt;&lt;span&gt;is&lt;/span&gt; at first_drv_open+&lt;span&gt;0x78&lt;/span&gt;/&lt;span&gt;0x12c&lt;/span&gt;&lt;span&gt; [26th_segmentfault]
　　　　　　　　&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;PC值:程序运行成功的最后一次地址,位于first_drv_open()函数里,偏移值0x78,该函数总大小0x12c&lt;/span&gt;&lt;span&gt;
LR &lt;/span&gt;&lt;span&gt;is&lt;/span&gt; at &lt;span&gt;0xc0365ed8&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;LR值&lt;/span&gt;

&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;发生错误时的各个寄存器值&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
pc : [&lt;/span&gt;&amp;lt;bf000078&amp;gt;]    lr : [&amp;lt;c0365ed8&amp;gt;]    psr: &lt;span&gt;80000013&lt;/span&gt;&lt;span&gt;
sp : c3fcbe80  ip : c0365ed8  fp : c3fcbe94
r10: &lt;/span&gt;&lt;span&gt;00000000&lt;/span&gt;&lt;span&gt;  r9 : c3fca000  r8 : c04df960
r7 : &lt;/span&gt;&lt;span&gt;00000000&lt;/span&gt;  r6 : &lt;span&gt;00000000&lt;/span&gt;  r5 : bf000de4  r4 : &lt;span&gt;00000000&lt;/span&gt;&lt;span&gt;
r3 : &lt;/span&gt;&lt;span&gt;00000000&lt;/span&gt;  r2 : &lt;span&gt;56000050&lt;/span&gt;  r1 : &lt;span&gt;00000001&lt;/span&gt;  r0 : &lt;span&gt;00000052&lt;/span&gt;&lt;span&gt;

Flags: Nzcv  IRQs on  FIQs on  Mode SVC_32  Segment user
Control: c000717f  Table: &lt;/span&gt;&lt;span&gt;33850000&lt;/span&gt;  DAC: &lt;span&gt;00000015&lt;/span&gt;&lt;span&gt;
Process 26th_segmentfau (pid: &lt;/span&gt;&lt;span&gt;813&lt;/span&gt;, stack limit = &lt;span&gt;0xc3fca258&lt;/span&gt;&lt;span&gt;)
　　　　　　　　　　　　&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;发生错误时,进程名称为26th_segmentfault&lt;/span&gt;
&lt;span&gt;
Stack: (&lt;/span&gt;&lt;span&gt;0xc3fcbe80&lt;/span&gt; to &lt;span&gt;0xc3fcc000&lt;/span&gt;)        &lt;span&gt;//&lt;/span&gt;&lt;span&gt;栈信息,从栈底0xc3fcbe80到栈顶0xc3fcc000&lt;/span&gt;&lt;span&gt;
be80: c06d7660 c3e880c0 c3fcbebc c3fcbe98 c008d888 bf000010 &lt;/span&gt;&lt;span&gt;00000000&lt;/span&gt;&lt;span&gt; c04df960
bea0: c3e880c0 c008d73c c0474e20 c3fb9534 c3fcbee4 c3fcbec0 c0089e48 c008d74c
bec0: c04df960 c3fcbf04 &lt;/span&gt;&lt;span&gt;00000003&lt;/span&gt;&lt;span&gt; ffffff9c c002c044 c380a000 c3fcbefc c3fcbee8
bee0: c0089f64 c0089d58 &lt;/span&gt;&lt;span&gt;00000000&lt;/span&gt; &lt;span&gt;00000002&lt;/span&gt;&lt;span&gt; c3fcbf68 c3fcbf00 c0089fb8 c0089f40
bf00: c3fcbf04 c3fb9534 c0474e20 &lt;/span&gt;&lt;span&gt;00000000&lt;/span&gt; &lt;span&gt;00000000&lt;/span&gt; c3851000 &lt;span&gt;00000101&lt;/span&gt; &lt;span&gt;00000001&lt;/span&gt;&lt;span&gt;
bf20: &lt;/span&gt;&lt;span&gt;00000000&lt;/span&gt;&lt;span&gt; c3fca000 c04c90a8 c04c90a0 ffffffe8 c380a000 c3fcbf68 c3fcbf48
bf40: c008a16c c009fc70 &lt;/span&gt;&lt;span&gt;00000003&lt;/span&gt; &lt;span&gt;00000000&lt;/span&gt; c04df960 &lt;span&gt;00000002&lt;/span&gt;&lt;span&gt; be84ce38 c3fcbf94
bf60: c3fcbf6c c008a2f4 c0089f88 &lt;/span&gt;&lt;span&gt;00008588&lt;/span&gt; be84ce84 &lt;span&gt;00008718&lt;/span&gt; 0000877c &lt;span&gt;00000005&lt;/span&gt;&lt;span&gt;
bf80: c002c044 4013365c c3fcbfa4 c3fcbf98 c008a3a8 c008a2b0 &lt;/span&gt;&lt;span&gt;00000000&lt;/span&gt;&lt;span&gt; c3fcbfa8
bfa0: c002bea0 c008a394 be84ce84 &lt;/span&gt;&lt;span&gt;00008718&lt;/span&gt; be84ce30 &lt;span&gt;00000002&lt;/span&gt;&lt;span&gt; be84ce38 be84ce30
bfc0: be84ce84 &lt;/span&gt;&lt;span&gt;00008718&lt;/span&gt; 0000877c &lt;span&gt;00000003&lt;/span&gt; &lt;span&gt;00008588&lt;/span&gt; &lt;span&gt;00000000&lt;/span&gt;&lt;span&gt; 4013365c be84ce58
bfe0: &lt;/span&gt;&lt;span&gt;00000000&lt;/span&gt; be84ce28 0000266c 400c98e0 &lt;span&gt;60000010&lt;/span&gt; be84ce30 &lt;span&gt;30002031&lt;/span&gt; &lt;span&gt;30002431&lt;/span&gt;&lt;span&gt;

Backtrace:                                        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;回溯信息&lt;/span&gt;
&lt;span&gt;[&lt;/span&gt;&amp;lt;bf000000&amp;gt;] (first_drv_open+&lt;span&gt;0x0&lt;/span&gt;/&lt;span&gt;0x12c&lt;/span&gt; [26th_segmentfault]) &lt;span&gt;from&lt;/span&gt; [&amp;lt;c008d888&amp;gt;] (chrdev_open+&lt;span&gt;0x14c&lt;/span&gt;/&lt;span&gt;0x164&lt;/span&gt;&lt;span&gt;)
 r5:c3e880c0 r4:c06d7660
[&lt;/span&gt;&amp;lt;c008d73c&amp;gt;] (chrdev_open+&lt;span&gt;0x0&lt;/span&gt;/&lt;span&gt;0x164&lt;/span&gt;) &lt;span&gt;from&lt;/span&gt; [&amp;lt;c0089e48&amp;gt;] (__dentry_open+&lt;span&gt;0x100&lt;/span&gt;/&lt;span&gt;0x1e8&lt;/span&gt;&lt;span&gt;)
 r8:c3fb9534 r7:c0474e20 r6:c008d73c r5:c3e880c0 r4:c04df960
[&lt;/span&gt;&amp;lt;c0089d48&amp;gt;] (__dentry_open+&lt;span&gt;0x0&lt;/span&gt;/&lt;span&gt;0x1e8&lt;/span&gt;) &lt;span&gt;from&lt;/span&gt; [&amp;lt;c0089f64&amp;gt;] (nameidata_to_filp+&lt;span&gt;0x34&lt;/span&gt;/&lt;span&gt;0x48&lt;/span&gt;&lt;span&gt;)
[&lt;/span&gt;&amp;lt;c0089f30&amp;gt;] (nameidata_to_filp+&lt;span&gt;0x0&lt;/span&gt;/&lt;span&gt;0x48&lt;/span&gt;) &lt;span&gt;from&lt;/span&gt; [&amp;lt;c0089fb8&amp;gt;] (do_filp_open+&lt;span&gt;0x40&lt;/span&gt;/&lt;span&gt;0x48&lt;/span&gt;&lt;span&gt;)
 r4:&lt;/span&gt;&lt;span&gt;00000002&lt;/span&gt;&lt;span&gt;
[&lt;/span&gt;&amp;lt;c0089f78&amp;gt;] (do_filp_open+&lt;span&gt;0x0&lt;/span&gt;/&lt;span&gt;0x48&lt;/span&gt;) &lt;span&gt;from&lt;/span&gt; [&amp;lt;c008a2f4&amp;gt;] (do_sys_open+&lt;span&gt;0x54&lt;/span&gt;/&lt;span&gt;0xe4&lt;/span&gt;&lt;span&gt;)
 r5:be84ce38 r4:&lt;/span&gt;&lt;span&gt;00000002&lt;/span&gt;&lt;span&gt;
[&lt;/span&gt;&amp;lt;c008a2a0&amp;gt;] (do_sys_open+&lt;span&gt;0x0&lt;/span&gt;/&lt;span&gt;0xe4&lt;/span&gt;) &lt;span&gt;from&lt;/span&gt; [&amp;lt;c008a3a8&amp;gt;] (sys_open+&lt;span&gt;0x24&lt;/span&gt;/&lt;span&gt;0x28&lt;/span&gt;&lt;span&gt;)
[&lt;/span&gt;&amp;lt;c008a384&amp;gt;] (sys_open+&lt;span&gt;0x0&lt;/span&gt;/&lt;span&gt;0x28&lt;/span&gt;) &lt;span&gt;from&lt;/span&gt; [&amp;lt;c002bea0&amp;gt;] (ret_fast_syscall+&lt;span&gt;0x0&lt;/span&gt;/&lt;span&gt;0x2c&lt;/span&gt;&lt;span&gt;)
Code: bf000094 bf0000b4 bf0000d4 e5952000 (e5923000)

Segmentation fault &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;1.1那为什么在&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;&lt;a href=&quot;http://www.cnblogs.com/lifexy/p/8034277.html&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;上一章&lt;/span&gt;&lt;/a&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;,我们用错误的应用程序,却没有打印oops,如下图所示:&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1182576/201712/1182576-20171215225201043-1067535292.png&quot; alt=&quot;&quot; width=&quot;388&quot; height=&quot;81&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;接下来,我们便来配置内核,从而打印应用程序的oops&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;2.首先来搜索oops里的&lt;span&gt;:Unable to handle kernel&lt;/span&gt;打印语句,看在哪个函数打印的&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;如下图所示,找到位于&lt;span&gt;__do_kernel_fault()&lt;/span&gt;函数中:&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/1182576/201712/1182576-20171215225208168-131107228.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;3.继续找,发现__do_kernel_fault()被&lt;span&gt;do_bad_area()&lt;/span&gt;调用&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/1182576/201712/1182576-20171215225216824-1483387364.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;do_bad_area()&lt;/span&gt;函数,从字面上分析,表示代码执行到错误段位置&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;其中&lt;span&gt;user_mode(regs)&lt;/span&gt;函数,通过判断CPSR寄存器若是用户模式则返回0,否则返回正数.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;所以我们上一章的错误的应用程序便会调用&lt;span&gt;__do_user_fault()函数&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;4.&lt;span&gt;__do_user_fault()&lt;/span&gt;函数如下所示:&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/1182576/201712/1182576-20171215225224824-5682509.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;从上图来看,要想打印应用程序的错误信息,还需要:&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;3.1配置内核,设置宏CONFIG_DEBUG_USER&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;(只要宏是以&lt;strong&gt;&quot;CONFIG_&quot;&lt;/strong&gt;开头,都是与配置相关)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;1)&lt;/strong&gt;&lt;/span&gt;在&lt;span&gt;make menuconfig&lt;/span&gt;里搜索&lt;span&gt;DEBUG_USER&lt;/span&gt;,如下图所示:&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/1182576/201712/1182576-20171215225231652-1474023201.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;所以将&lt;span&gt;Kernel hacking-&amp;gt; Verbose user fault messages&lt;/span&gt; 置为Y,并重新烧内核&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;3.2使if (user_debug &amp;amp; UDBG_SEGV)为真&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;1)&lt;/strong&gt;&lt;/span&gt;其中&lt;span&gt;user_debug&lt;/span&gt;定义如下所示:&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/1182576/201712/1182576-20171215225238761-402972935.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;显然当uboot传递进来的命令行字符里含有&lt;span&gt;&quot;user_debug=&quot;&lt;/span&gt;时,便会调用user_debug_setup()-&amp;gt;&lt;span&gt;get_option()&lt;/span&gt;,最终会将&quot;user_debug=&quot;后面带的字符串提取给user_debug变量.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;比如:当命令行字符里含有&lt;span&gt;&quot;user_debug=0xff&quot;&lt;/span&gt;时,则user_debug变量等于0xff&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;2)&lt;/span&gt;&lt;/strong&gt;其中&lt;span&gt;UDBG_SEGV&lt;/span&gt;定义如下所示:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#define&lt;/span&gt; UDBG_UNDEFINED  (1 &amp;lt;&amp;lt; 0)        &lt;span&gt;//&lt;/span&gt;&lt;span&gt;用户态的代码出现未定义指令(UNDEFINED)&lt;/span&gt;

&lt;span&gt;#define&lt;/span&gt; UDBG_SYSCALL (1 &amp;lt;&amp;lt; 1)           &lt;span&gt;//&lt;/span&gt;&lt;span&gt;用户态系统调用已过时(SYSCALL)     &lt;/span&gt;

&lt;span&gt;#define&lt;/span&gt; UDBG_BADABORT    (1 &amp;lt;&amp;lt; 2)       &lt;span&gt;//&lt;/span&gt;&lt;span&gt;用户态数据错误已中止(BADABORT) &lt;/span&gt;

&lt;span&gt;#define&lt;/span&gt; UDBG_SEGV     (1 &amp;lt;&amp;lt; 3)         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;用户态的代码出现段错误(SEGV)&lt;/span&gt;

&lt;span&gt;#define&lt;/span&gt; UDBG_BUS       (1 &amp;lt;&amp;lt; 4)        &lt;span&gt;//&lt;/span&gt;&lt;span&gt;用户态访问忙(BUS)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;从上面的定义分析得出,我们只需要将user_debug设为0xff,上面的所有条件就都成立.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;比如:当用户态的代码出现未定义指令时,由于user_debug最低位=1,所以打印出oops.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;所以,进入uboot,在uboot命令行里添加: &lt;span&gt;&quot;user_debug=0xff&quot;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;4. 启动内核,试验&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;如下图所示,执行错误的应用程序,只打印了各个寄存器值,以及函数调用关系,而没有栈信息:&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/1182576/201712/1182576-20171215225304277-5123471.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;5.接下来,继续修改内核,使应用程序的oops也打印栈信息出来&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;在驱动的oops里有&quot;Stack: &quot;这个字段,搜索&lt;span&gt;&quot;Stack: &quot;&lt;/span&gt;看看,位于哪个函数&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;5.1如下图所示, 找到位于__die()函数中:&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/1182576/201712/1182576-20171215225312386-733910600.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;这个__die()会被die()调用,die()又会被&lt;span&gt;__do_kernel_fault()&lt;/span&gt;调用,而我们应用程序调用的&lt;span&gt;__do_user_fault()&lt;/span&gt;里没有die()函数,所以没有打印出Stack栈信息。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;上图里&lt;strong&gt;&lt;span&gt;dump_mem():&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
dump_mem(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Stack: &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, regs-&amp;gt;ARM_sp,THREAD_SIZE + (unsigned &lt;span&gt;long&lt;/span&gt;)task_stack_page(tsk));　　　　//打印stack栈信息
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; &lt;span&gt;主要是通过sp寄存器里存的栈地址,每打印一个栈地址里的32位数据, 栈地址便加4(一个地址存8位,所以加4)。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;接下来我们便通过这个原理&lt;/strong&gt;,来修改应用程序调用的&lt;span&gt;__do_user_fault()&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;5.2 在__do_user_fault(),添加以下&lt;/span&gt;&lt;span&gt;带红色的字:&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;static void  __do_user_fault(struct task_struct *tsk, unsigned long addr,&lt;/span&gt;&lt;span&gt;unsigned int fsr, unsignedint sig, int code,struct pt_regs *regs)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;{&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;       struct siginfo si;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;      &lt;span&gt; unsigned long val ;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;       int i=0;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;#ifdef CONFIG_DEBUG_USER&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;       if (user_debug &amp;amp; UDBG_SEGV) {&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;              printk(KERN_DEBUG &quot;%s: unhandled page fault (%d) at 0x%08lx, code 0x%03x\n&quot;,&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;                     tsk-&amp;gt;comm, sig, addr, fsr);&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;              show_pte(tsk-&amp;gt;mm, addr);&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;              show_regs(regs);&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;       &lt;span&gt; printk(&quot;Stack: \n&quot;);&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;        while(i&amp;lt;1024)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;        {&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;               &lt;span&gt;/* copy_from_user(): 检测该地址是否有效,如有效,便获取地址数据,否则break */&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;           if(copy_from_user(&amp;amp;val, (const void __user *)(regs-&amp;gt;ARM_sp+i*4), 4))&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;           break;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;            printk(&quot;%08x &quot;,val);&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;            i++;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;            if(i%8==0)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;            printk(&quot;\n&quot;);&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;        }&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;        printk(&quot;\n END of Stack\n&quot;);&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;  &lt;span&gt;     }&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;#endif&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;       tsk-&amp;gt;thread.address = addr;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;       tsk-&amp;gt;thread.error_code = fsr;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;       tsk-&amp;gt;thread.trap_no = 14;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;       si.si_signo = sig;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;       si.si_errno = 0;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;       si.si_code = code;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;       si.si_addr = (void __user *)addr;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;       force_sig_info(sig, &amp;amp;si, tsk);&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;}&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;6.重新烧写内核,试验&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;如下图所示:&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/1182576/201712/1182576-20171215225326043-310610831.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;接下来,便来分析&lt;span&gt;PC值,Stack栈&lt;/span&gt;,到底如何调用的&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;7.首先来分析PC值,确定错误的代码&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;1)生成反汇编：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
arm-linux-objdump -D test_debug &amp;gt; test_debug.dis
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;2)搜索PC值&lt;span&gt;84ac&lt;/span&gt;,如下图所示:&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1182576/201712/1182576-20171215225337683-1890094857.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;从上面看出,主要是将0x12(r3)放入地址0x00(r2)中&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;而0x00是个非法地址,所以出错&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;8.分析Stack栈信息,确定函数调用过程&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;参考: &lt;span&gt;&lt;span&gt;&lt;a href=&quot;http://www.cnblogs.com/lifexy/p/8011966.html&quot;&gt;&lt;span&gt;&lt;strong&gt;37.Linux&lt;/strong&gt;&lt;strong&gt;驱动调试&lt;/strong&gt;&lt;strong&gt;-&lt;/strong&gt;&lt;strong&gt;根据&lt;/strong&gt;&lt;strong&gt;oops&lt;/strong&gt;&lt;strong&gt;的栈信息&lt;/strong&gt;&lt;strong&gt;,&lt;/strong&gt;&lt;strong&gt;确定函数调用过程&lt;/strong&gt;&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;8.1分析过程中,遇到main()函数的返回地址为:LR=40034f14&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;内核的虚拟地址是&lt;span&gt;c0004000~c03cebf4&lt;/span&gt;,而反汇编里也没有该地址,所以这是个&lt;span&gt;动态库的地址&lt;/span&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;需要用到&lt;span&gt;静态链接方法&lt;/span&gt;,接下来重新编译,反汇编,运行:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
#arm-linux-gcc -o -&lt;span&gt;static&lt;/span&gt;&lt;span&gt;  test_debug test_debug.c
&lt;/span&gt;&lt;span&gt;          //&lt;/span&gt;&lt;span&gt;-static   静态链接,生成的文件会非常大, 好处在于不需要动态链接库,也可以运行&lt;/span&gt;&lt;span&gt;
#arm&lt;/span&gt;-linux-objdump -D test_debug &amp;gt; test_debug.dis
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;8.2最终, 找到main()函数的返回地址在__lobc_start_main()里&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;所以函数出错时的调用过程:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
 __lobc_start_main()-&amp;gt;&lt;span&gt;
    main()&lt;/span&gt;-&amp;gt;&lt;span&gt;
　　  A()&lt;/span&gt;-&amp;gt;&lt;span&gt;
        B()&lt;/span&gt;-&amp;gt;&lt;span&gt;
            C()  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;将0x12(r3)放入地址0x00(r2)中&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Fri, 15 Dec 2017 15:14:00 +0000</pubDate>
<dc:creator>LifeYx</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/lifexy/p/8045191.html</dc:identifier>
</item>
</channel>
</rss>