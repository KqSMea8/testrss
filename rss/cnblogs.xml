<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>django的CMS系统（内容管理系统） - 左手十字</title>
<link>http://www.cnblogs.com/zuoshoushizi/p/8120576.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/zuoshoushizi/p/8120576.html</guid>
<description>&lt;h2&gt;一、什么是CMS系统&lt;/h2&gt;
&lt;p&gt;CMS具有许多基于模板的优秀设计，可以减少开发的成本。&lt;/p&gt;
&lt;div class=&quot;para&quot; readability=&quot;8.2265625&quot;&gt;CMS的功能并不只限于文本处理，它也可以处理图片、&lt;a href=&quot;https://baike.baidu.com/item/Flash%E5%8A%A8%E7%94%BB&quot; target=&quot;_blank&quot;&gt;Flash动画&lt;/a&gt;、声像流、图像甚至电子邮件档案。&lt;/div&gt;
&lt;p&gt;CMS还分各个平台脚本种类的。&lt;/p&gt;
&lt;div class=&quot;para&quot; readability=&quot;6.4477611940299&quot;&gt;&lt;a href=&quot;https://baike.baidu.com/item/%E5%86%85%E5%AE%B9%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F&quot; target=&quot;_blank&quot;&gt;内容管理系统&lt;/a&gt;是&lt;a href=&quot;https://baike.baidu.com/item/%E4%BC%81%E4%B8%9A%E4%BF%A1%E6%81%AF%E5%8C%96%E5%BB%BA%E8%AE%BE&quot; target=&quot;_blank&quot;&gt;企业信息化建设&lt;/a&gt;和电子政务的新宠，也是一个相对较新的市场，对于内容管理，业界还没有一个统一的定义，不同的机构有不同的理解：&lt;/div&gt;
&lt;div class=&quot;para&quot; readability=&quot;10.592375366569&quot;&gt;Gartner Group 认为内容管理从内涵上应该包括企业内部内容管理、Web内容管理、电子商务交易内容管理和企业外部网(Extranet)信息共享内容管理（如&lt;a href=&quot;https://baike.baidu.com/item/CRM&quot; target=&quot;_blank&quot;&gt;CRM&lt;/a&gt;和 SCM等），Web内容管理是当前的重点，&lt;a href=&quot;https://baike.baidu.com/item/e-business&quot; target=&quot;_blank&quot;&gt;e-business&lt;/a&gt;和&lt;a href=&quot;https://baike.baidu.com/item/XML&quot; target=&quot;_blank&quot;&gt;XML&lt;/a&gt;（&lt;a href=&quot;https://baike.baidu.com/item/%E6%A0%87%E5%87%86%E9%80%9A%E7%94%A8%E6%A0%87%E8%AE%B0%E8%AF%AD%E8%A8%80&quot; target=&quot;_blank&quot;&gt;标准通用标记语言&lt;/a&gt;的子集）是推动内容管理发展的源动力。&lt;/div&gt;
&lt;div class=&quot;para&quot; readability=&quot;12.5125&quot;&gt;Merrill Lynch的分析师认为内容管理侧重于企业员工、企业用户、合作伙伴和供应商方便获得&lt;a href=&quot;https://baike.baidu.com/item/%E9%9D%9E%E7%BB%93%E6%9E%84%E5%8C%96%E4%BF%A1%E6%81%AF&quot; target=&quot;_blank&quot;&gt;非结构化信息&lt;/a&gt;的处理过程。内容管理的目的是把非结构化信息出版到intranets， extranets和ITE(Internet Trading Exchanges)， 从而使用户可以检索、使用、分析和共享。商业智能系统 (BI)侧重于结构化数据的价值提取，而内容管理则侧重于企业内部和外部非结构化资源的战略价值提取。&lt;/div&gt;
&lt;p&gt;Giga Group 认为作为电子商务引擎，内容管理解决方案必须和电子商务服务器紧密集成，从而形成内容生产(Production)、传递(Delivery)以及电子商务端到端系统。&lt;/p&gt;
&lt;div class=&quot;para&quot; readability=&quot;9.7260273972603&quot;&gt;我们认为&lt;a href=&quot;https://baike.baidu.com/item/%E5%86%85%E5%AE%B9%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F&quot; target=&quot;_blank&quot;&gt;内容管理系统&lt;/a&gt;是一种位于WEB前端（Web 服务器）和后端办公系统或流程（内容创作、编辑）之间的软件系统。内容管理解决方案重点解决各种非结构化或半结构化的数字资源的采集、管理、利用、传递和增值，并能有机集成到结构化数据的商业智能环境中，如OA，CRM等。内容的创作人员、编辑人员、发布人员使用内容管理系统来提交、修改、审批、发布内容。这里指的&quot;内容&quot;可能包括文件、表格、图片、数据库中的数据甚至视频等一切你想要发布到 Internet、Intranet以及Extranet网站的信息。&lt;/div&gt;
&lt;h2 class=&quot;para&quot;&gt; &lt;/h2&gt;
&lt;h2 class=&quot;para&quot;&gt;二、Django自带的CMS---faltpages&lt;/h2&gt;

&lt;p&gt;优点：   1、不需要自己动手写代码&lt;/p&gt;
&lt;p&gt;　　　　2、不需要维护代码&lt;/p&gt;
&lt;p&gt;　　　　3、url在admin中维护，不需要专门去编写URLconf&lt;/p&gt;
&lt;p&gt;缺点：　1、所有拥有flatpages应用的管理员都可以修改flatpages的任何界面，用户不能拥有单独的界面&lt;/p&gt;
&lt;p&gt;　　　　2、flatpages的功能有限，除了title和content，以及url外，几乎没有其他的功能。例如创建时间等。&lt;/p&gt;
&lt;p&gt;　　　　3、由于石油django的contrib提供的，没办法轻易对其进行属性和方法的修改&lt;/p&gt;

&lt;p&gt;激活flatpages&lt;/p&gt;
&lt;p&gt;　　步骤：&lt;/p&gt;
&lt;p&gt;　　1、创建一个django的project ，fuck这不是废话吗，不会的请自行百度。&lt;/p&gt;
&lt;p&gt;　　2、添加中间件&lt;/p&gt;
&lt;div class=&quot;para&quot; readability=&quot;12&quot;&gt;　　　
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
MIDDLEWARE =&lt;span&gt; [
    &lt;/span&gt;&lt;span&gt;#
&lt;/span&gt;    &lt;span&gt;'&lt;/span&gt;&lt;span&gt;django.contrib.flatpages.middleware&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,　　&lt;/span&gt;
&lt;/pre&gt;
&lt;pre&gt;
　　'django.contrib.sites.middleware.CurrentSiteMiddleware',
&lt;/pre&gt;
&lt;pre&gt;
&lt;span&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　3、注册app&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
INSTALLED_APPS =&lt;span&gt; [
    'django.contrib.admin'&lt;span&gt;,
     #
    'django.contrib.flatpages'&lt;span&gt;,&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;pre&gt;
　　'django.contrib.sitemaps',&lt;br/&gt;　　'django.contrib.sites',
&lt;/pre&gt;
&lt;pre&gt;
&lt;span&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;3、更新数据库&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;　 　　python  manage.py　makemigrations&lt;/p&gt;
&lt;p&gt;　　　python  manage.py　migrate&lt;/p&gt;
&lt;p&gt;4、创建一个admin账户&lt;/p&gt;
&lt;div class=&quot;para&quot; readability=&quot;14.5&quot;&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1224905/201712/1224905-20171226225614166-1436204311.png&quot; alt=&quot;&quot;/&gt;&lt;p&gt;5、在admin中编辑platpages&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1224905/201712/1224905-20171226225825963-1339548893.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; 6、创建HTML模板&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;en&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;meta charset=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;UTF-8&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
    &amp;lt;title&amp;gt;Title&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
    &amp;lt;h1&amp;gt;{{ flatpage.title }}&amp;lt;/h1&amp;gt;
    &amp;lt;hr&amp;gt;    
    &amp;lt;p&amp;gt;{{ flatpage.content }}&amp;lt;/p&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;访问你刚才添加的flatpage对象的url：http://127.0.0.1:8000/about/&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1224905/201712/1224905-20171226230802526-2004138203.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; oh了，是不是很简单！！！&lt;/p&gt;
&lt;p&gt;今天很晚了，有时间的话，给大家整理一自定义cms吧&lt;/p&gt;

&lt;/div&gt;
</description>
<pubDate>Tue, 26 Dec 2017 15:27:00 +0000</pubDate>
<dc:creator>左手十字</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/zuoshoushizi/p/8120576.html</dc:identifier>
</item>
<item>
<title>用keras做SQL注入攻击的判断 - McKay</title>
<link>http://www.cnblogs.com/aarond/p/sql_inject.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/aarond/p/sql_inject.html</guid>
<description>&lt;p&gt;本文是通过深度学习框架keras来做SQL注入特征识别， 不过虽然用了keras，但是大部分还是普通的神经网络，只是外加了一些规则化、dropout层（随着深度学习出现的层）。&lt;/p&gt;
&lt;p&gt;基本思路就是喂入一堆数据（INT型）、通过神经网络计算（正向、反向）、SOFTMAX多分类概率计算得出各个类的概率，注意：这里只要2个类别：0-正常的文本；1-包含SQL注入的文本&lt;/p&gt;
&lt;p&gt;文件分割上，做成了4个python文件：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;util类，用来将char转换成int（NN要的都是数字类型的，其他任何类型都要转换成int/float这些才能喂入，又称为feed） &lt;/li&gt;
&lt;li&gt;data类，用来获取训练数据，验证数据的类，由于这里的训练是有监督训练，因此此时需要返回的是个元组(x, y)&lt;/li&gt;
&lt;li&gt;trainer类，keras的网络模型建模在这里，包括损失函数、训练epoch次数等&lt;/li&gt;
&lt;li&gt;predict类，获取几个测试数据，看看效果的预测类&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;先放trainer类代码，网络定义在这里，最重要的一个，和数据格式一样重要（呵呵，数据格式可是非常重要的，在这种程序中）&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;54&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
import SQL注入Data
import numpy as np
import keras
from keras.models import Sequential
from keras.layers import Dense, Dropout, Activation
from keras.layers.normalization import BatchNormalization
from keras.optimizers import SGD

x, y=SQL注入Data.loadSQLInjectData()
availableVectorSize=15
x=keras.preprocessing.sequence.pad_sequences(x, padding='post', maxlen=availableVectorSize)
y=keras.utils.to_categorical(y, num_classes=2)


model = Sequential()
model.add(Dense(64, activation='relu', input_dim=availableVectorSize))
model.add(BatchNormalization())
model.add(Dropout(0.3))
model.add(Dense(64, activation='relu'))
model.add(Dropout(0.3))
model.add(Dense(2, activation='softmax'))

sgd = SGD(lr=0.001, momentum=0.9)
model.compile(loss='mse',
              optimizer=sgd,
              metrics=['accuracy'])

history=model.fit(x, y,epochs=500,batch_size=16)

model.save('E:\\sql_checker\\models\\trained_models.h5')
print(&quot;DONE, model saved in path--&amp;gt;E:\\sql_checker\\models\\trained_models.h5&quot;)

import matplotlib.pyplot as plt
plt.plot(history.history['loss'])
plt.title('model loss')
plt.ylabel('loss')
plt.xlabel('epoch')
plt.legend(['train', 'test'], loc='upper left')
plt.show()
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;先来解释上面这段plt的代码，因为最容易解释，这段代码是用来把每次epoch的训练的损失loss value用折线图表示出来：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/68230/201712/68230-20171226230957166-468943907.png&quot; alt=&quot;&quot;/&gt;　　&lt;/p&gt;
&lt;p&gt;何为训练？何为损失loss value？&lt;/p&gt;
&lt;p&gt;训练的目的是为了想让网络最终计算出来的分类数据和我们给出的y一致，那不一致怎么算？不一致就是有损失，也就是说训练的目的是要一致，也就是要损失最小化&lt;/p&gt;
&lt;p&gt;怎么让损失最小化？梯度下降，这里用的是SGD优化算法：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;36&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
from keras.optimizers import SGD

sgd = SGD(lr=0.001, momentum=0.9)
model.compile(loss='mse',
              optimizer=sgd,
              metrics=['accuracy'])
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上面这段代码的loss='mse'就是定义了用那种损失函数，还有好几种损失函数，大家自己参考啊。&lt;/p&gt;
&lt;p&gt;optimizer=sgd就是优化算法用哪个了，不同的optimizer有不同的参数&lt;/p&gt;
&lt;p&gt;由于此处用的是全连接NN，因此是需要固定的输入size的，这个函数就是用来固定（不够会补0） 特征向量size的：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;34&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
x=keras.preprocessing.sequence.pad_sequences(x, padding='post', maxlen=availableVectorSize)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;再来看看最终的分类输出，是one hot的，这个one hot大家自己查查，很容易的定义，就是比较浪费空间，分类间没有关联性，不过用在这里很方便&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
y=keras.utils.to_categorical(y, num_classes=2)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;然后再说说预测部分代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;38&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
import SQL注入Data
import Converter


import numpy as np
import keras
from keras.models import load_model

print(&quot;predict....&quot;)

x=SQL注入Data.loadTestSQLInjectData()
x=keras.preprocessing.sequence.pad_sequences(x, padding='post', maxlen=15)

model=load_model('E:\\sql_checker\\models\\trained_models.h5')
result=model.predict_classes(x, batch_size=len(x))
result=Converter.convert2label(result)
print(result)


print(&quot;DONE&quot;)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这部分代码很容易理解，并且连y都没有　　&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/68230/201712/68230-20171226232145682-1240806914.png&quot; alt=&quot;&quot;/&gt;　　&lt;/p&gt;
&lt;p&gt; 好了，似乎有那么点意思了吧。&lt;/p&gt;
&lt;p&gt;下面把另外几个工具类、数据类代码放出来：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;34&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
def toints(sentence):
    base=ord('0')
    ary=[]
    for c in sentence:
        ary.append(ord(c)-base)
    return ary


def convert2label(vector):
    string_array=[]
    for v in vector:
        if v==1:
            string_array.append('SQL注入')
        else:
            string_array.append('正常文本')
    return string_array
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;53&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
import Converter
import numpy as np

def loadSQLInjectData():
    x=[]
    x.append(Converter.toints(&quot;100&quot;))
    x.append(Converter.toints(&quot;150&quot;))
    x.append(Converter.toints(&quot;1&quot;))
    x.append(Converter.toints(&quot;3&quot;))
    x.append(Converter.toints(&quot;19&quot;))
    x.append(Converter.toints(&quot;37&quot;))
    x.append(Converter.toints(&quot;1'--&quot;))
    x.append(Converter.toints(&quot;1' or 1=1;--&quot;))
    x.append(Converter.toints(&quot;updatable&quot;))
    x.append(Converter.toints(&quot;update tbl&quot;))
    x.append(Converter.toints(&quot;update someb&quot;))
    x.append(Converter.toints(&quot;update&quot;))
    x.append(Converter.toints(&quot;updat&quot;))
    x.append(Converter.toints(&quot;update a&quot;))
    x.append(Converter.toints(&quot;'--&quot;))
    x.append(Converter.toints(&quot;' or 1=1;--&quot;))
    x.append(Converter.toints(&quot;aupdatable&quot;))
    x.append(Converter.toints(&quot;hello world&quot;))

    y=[[0],[0],[0],[0],[0],[0],[1],[1],[0],[1],[1],[0],[0],[1],[1],[1],[0],[0]]

    x=np.asarray(x)
    y=np.asarray(y)

    return x, y


def loadTestSQLInjectData():    
    x=[]
    x.append(Converter.toints(&quot;some value&quot;))
    x.append(Converter.toints(&quot;-1&quot;))
    x.append(Converter.toints(&quot;' or 1=1;--&quot;))
    x.append(Converter.toints(&quot;noupdate&quot;))
    x.append(Converter.toints(&quot;update &quot;))
    x.append(Converter.toints(&quot;update&quot;))
    x.append(Converter.toints(&quot;update z&quot;))
    x=np.asarray(x)
    return x
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;最后，祝大家元旦快乐。&lt;/p&gt;

</description>
<pubDate>Tue, 26 Dec 2017 15:25:00 +0000</pubDate>
<dc:creator>McKay</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/aarond/p/sql_inject.html</dc:identifier>
</item>
<item>
<title>项目实战12.2—企业级监控工具应用实战-zabbix操作进阶 - 阿龙along</title>
<link>http://www.cnblogs.com/along21/p/8119088.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/along21/p/8119088.html</guid>
<description>&lt;p&gt;&lt;span&gt;无监控，不运维。好了，废话不多说，下面都是干货。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;流量党勿入，图片太多！！！&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　项目实战系列，总架构图&lt;/strong&gt; &lt;a href=&quot;http://www.cnblogs.com/along21/p/8000812.html&quot; target=&quot;_blank&quot;&gt;http://www.cnblogs.com/along21/p/8000812.html&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span&gt;一、User parameters 用户参数&lt;/span&gt;&lt;/h2&gt;
&lt;h3&gt;&lt;span&gt;1、介绍和用法&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;① 介绍&lt;/p&gt;
&lt;p&gt;自定义用户参数，也就是自定义key&lt;/p&gt;
&lt;p&gt;有时，你可能想要运行一个代理检查，而不是Zabbix的预定义&lt;/p&gt;
&lt;p&gt;你可以&lt;strong&gt;编写一个命令&lt;/strong&gt;来&lt;strong&gt;检索需要的数据&lt;/strong&gt;，并将其包含在代理配置文件(&quot;UserParameter&quot;配置参数)的&lt;strong&gt;用户参数&lt;/strong&gt;中&lt;/p&gt;
&lt;p&gt;② 用法格式 syntax&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;UserParameter&lt;/span&gt;=&lt;span&gt;&amp;lt;key&amp;gt;,&amp;lt;command&amp;gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　A user parameter also contains a key　　一个用户参数也包含一个键&lt;/p&gt;
&lt;p&gt;　　The key will be necessary when configuring an item 　　在配置监控项时，key是必需的&lt;/p&gt;
&lt;p&gt;　　Note: Need to restart the agent 　　注意:需要重新启动agent 服务&lt;/p&gt;

&lt;h3&gt;&lt;span&gt;2、用法展示&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;（1）修改agent 端的配置，设置用户参数&lt;/p&gt;
&lt;p&gt;① free | awk '/^Mem/{print $3}' 自己需要查找的参数的命令&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1216496/201712/1216496-20171226171855010-665295523.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;② 修改配置文件，把查找参数的命令设为用户参数&lt;/p&gt;
&lt;p&gt;cd /etc/zabbix/zabbix_agentd.d/&lt;/p&gt;
&lt;p&gt;vim &lt;strong&gt;memory_usage.conf&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;UserParameter=memory.used,free | awk '/^Mem/{print $3}'&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;③ systemctl restart zabbix-agent.service 重启agent 服务&lt;/p&gt;

&lt;p&gt;（2）在zabbix-server 端，查询&lt;/p&gt;
&lt;p&gt;zabbix_get -s 192.168.30.7 -p 10050 -k &quot;memory.used&quot;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1216496/201712/1216496-20171226172647557-2133137319.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;（3）在监控上，设置一个item监控项，使用这个用户参数&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1216496/201712/1216496-20171226172026041-1695073569.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;（4）查询graph 图形&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1216496/201712/1216496-20171226172026463-839175044.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h3&gt;&lt;span&gt;3、用法升级&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;（1）修改agent 端的配置，设置用户参数&lt;/p&gt;
&lt;p&gt;① 命令行查询参数的命令&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1216496/201712/1216496-20171226172026698-1464978164.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;② 修改配置文件，把查找参数的命令设为用户参数&lt;/p&gt;
&lt;p&gt;UserParameter=&lt;span&gt;&lt;strong&gt;memory.stats[*]&lt;/strong&gt;&lt;/span&gt;,cat /proc/meminfo | awk &lt;span&gt;&lt;strong&gt;'/^$1/{print $$2}&lt;/strong&gt;&lt;/span&gt;'&lt;/p&gt;
&lt;p&gt;分析：$$2：表示不是前边调位置参数的$2 ，而是awk 的参数$2&lt;/p&gt;
&lt;p&gt;注意：$1是调用前边的[*]，位置参数，第一个参数&lt;/p&gt;

&lt;p&gt;（2）在zabbix-server 端，查询使用这个用户参数的key&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1216496/201712/1216496-20171226172026932-1905881550.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;（3）在监控上，设置一个item监控项，使用这个用户参数&lt;/p&gt;
&lt;p&gt;① 添加Memory Total 的item监控项，使用&lt;strong&gt;memory.stats[MemTotal]&lt;/strong&gt; 的用户参数&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1216496/201712/1216496-20171226172027260-1446706159.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;在进程中定义倍数，规定单位&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1216496/201712/1216496-20171226172027729-143163327.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;② clone 克隆Memory Total 创建Memory Free 的监控项&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;memory.stats[MemFree]&lt;/strong&gt; 用户参数&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1216496/201712/1216496-20171226172028120-539441659.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;③ 创建Memory Buffers 的item 监控项，使用 &lt;strong&gt;memory.stats[Buffers]&lt;/strong&gt; 的key&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1216496/201712/1216496-20171226172028448-41169528.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;（4）上面3个监控项的graph 图形&lt;/p&gt;
&lt;p&gt;① memory total&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1216496/201712/1216496-20171226172028745-1274821835.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;② memory free&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1216496/201712/1216496-20171226172029088-1142382464.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;③ buffers&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1216496/201712/1216496-20171226172029338-158312847.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h3&gt;&lt;span&gt;4、使用用户参数监控php-fpm 服务的状态&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;在agent 端：&lt;/p&gt;
&lt;p&gt;（1）下载，设置php-fpm&lt;/p&gt;
&lt;p&gt;① yum -y install php-fpm&lt;/p&gt;
&lt;p&gt;② vim /etc/php-fpm.d/www.conf 打开php-fpm的状态页面&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
user =&lt;span&gt; nginx
group &lt;/span&gt;=&lt;span&gt; nginx
pm.status_path &lt;/span&gt;= /php-fpm-status    #php-&lt;span&gt;fpm 的状态监测页面
&lt;/span&gt;&lt;span&gt;ping&lt;/span&gt;.path = /&lt;span&gt;ping&lt;/span&gt;      #&lt;span&gt;ping&lt;/span&gt;&lt;span&gt; 接口，存活状态是否ok
&lt;/span&gt;&lt;span&gt;ping&lt;/span&gt;.response = pong    #响应内容pong
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;③ systemctl start php-fpm 开启服务&lt;/p&gt;

&lt;p&gt;（2）设置nginx ，设置代理php，和php-fpm的状态页面匹配&lt;/p&gt;
&lt;p&gt;① vim /etc/nginx/nginx.conf&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
location ~&lt;span&gt; \.php$ {
            fastcgi_pass   &lt;/span&gt;&lt;span&gt;127.0&lt;/span&gt;.&lt;span&gt;0.1&lt;/span&gt;:&lt;span&gt;9000&lt;/span&gt;&lt;span&gt;;
            fastcgi_index  index.php;
            fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;
            include        fastcgi_params;
}
location &lt;/span&gt;~* /(php-fpm-status|&lt;span&gt;ping&lt;/span&gt;&lt;span&gt;) {
            fastcgi_pass   &lt;/span&gt;&lt;span&gt;127.0&lt;/span&gt;.&lt;span&gt;0.1&lt;/span&gt;:&lt;span&gt;9000&lt;/span&gt;&lt;span&gt;;
            fastcgi_index  index.php;
            fastcgi_param  SCRIPT_FILENAME  $fastcgi_script_name;
            include        fastcgi_params;

            allow &lt;/span&gt;&lt;span&gt;127.0&lt;/span&gt;.&lt;span&gt;0.1&lt;/span&gt;&lt;span&gt;;   #因为这个页面很重要，所有需加访问控制
            deny all;

            access_log off;   #访问这个页面就不用记录日志了
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1216496/201712/1216496-20171226172029791-156116121.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;② systemctl start nginx 开启nginx服务&lt;/p&gt;

&lt;p&gt;（3）在agent 端，设置用户参数&lt;/p&gt;
&lt;p&gt;① 查询 curl 192.168.30.7/php-fpm-status&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1216496/201712/1216496-20171226172030088-1020205629.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;② 设置&lt;/p&gt;
&lt;p&gt;cd /etc/&lt;strong&gt;zabbix/zabbix_agentd.d/&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;vim php_status.conf&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;UserParameter=php-fpm.stats[*]&lt;/strong&gt;,&lt;span&gt;&lt;strong&gt;curl -s http://127.0.0.1/php-fpm-status | awk '/^$1/{print $$NF}'&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;分析：设置用户参数为php-fpm.stats[*]，$1为第一个参数；$$NF为awk中的参数，倒数第一列&lt;/p&gt;

&lt;p&gt;③ 重启服务&lt;/p&gt;
&lt;p&gt;systemctl restart zabbix-agent&lt;/p&gt;

&lt;p&gt;（4）在zabbix-server 端，查询使用这个用户参数的key&lt;/p&gt;
&lt;p&gt;zabbix_get -s 192.168.30.7 -p 10050 -k &quot;php-fpm.stats[idle]&quot;&lt;/p&gt;
&lt;p&gt;zabbix_get -s 192.168.30.7 -p 10050 -k &quot;php-fpm.stats[active]&quot;&lt;/p&gt;
&lt;p&gt;zabbix_get -s 192.168.30.7 -p 10050 -k &quot;php-fpm.stats[max active]&quot;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1216496/201712/1216496-20171226172030323-150229024.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;（5）创建一个模板，在模板上创建4个item监控项，使用定义的用户参数&lt;/p&gt;
&lt;p&gt;① 创建一个模板&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1216496/201712/1216496-20171226172030682-152674187.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;② 在模板上配置items 监控项，使用刚定义的用户参数&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;fpm.stats[total processes]&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1216496/201712/1216496-20171226172031120-396201427.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;③ 再clone克隆几个items监控项&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;fpm.stats[active processes]&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1216496/201712/1216496-20171226172031495-1001452204.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;④ &lt;strong&gt;fpm.stats[max active processes]&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1216496/201712/1216496-20171226172031807-398956119.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;⑤ &lt;strong&gt;fpm.stats[idle processes]&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1216496/201712/1216496-20171226172032120-165244744.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;（6）host主机链接模板&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1216496/201712/1216496-20171226172032495-2030001112.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;（7）查看graph 图形&lt;/p&gt;
&lt;p&gt;① php-fpm total processes&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1216496/201712/1216496-20171226172032760-1387400769.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;② php-fpm active processes&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1216496/201712/1216496-20171226172033276-1849464959.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;③ php-fpm max active processes&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1216496/201712/1216496-20171226172033573-911796042.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;④ php-fpm idle processes&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1216496/201712/1216496-20171226172034198-1450005062.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;（8）把模板导出，可以给别人使用&lt;/p&gt;
&lt;p&gt;① 导出模板&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1216496/201712/1216496-20171226172034682-1229092767.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;最下面有导出&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1216496/201712/1216496-20171226172035088-116185645.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;② 自己定义用户参数的文件，也不要忘记导出&lt;/p&gt;
&lt;p&gt;/etc/zabbix/zabbix_agentd.d/php_status.conf&lt;/p&gt;

&lt;h2&gt;&lt;span&gt;二、Network discovery 网络发现&lt;/span&gt;&lt;/h2&gt;
&lt;h3&gt;&lt;span&gt;1、介绍&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;（1）介绍&lt;/p&gt;
&lt;p&gt;网络发现：zabbix server&lt;strong&gt;扫描指定网络范围内的主机&lt;/strong&gt;；&lt;/p&gt;
&lt;p&gt;网络发现是zabbix 最具特色的功能之一，它能够根据用户&lt;strong&gt;事先定义的规则自动添加监控的主机或服务&lt;/strong&gt;等&lt;/p&gt;
&lt;p&gt;优点：&lt;/p&gt;
&lt;p&gt;　　加快Zabbix部署&lt;/p&gt;
&lt;p&gt;　　简化管理&lt;/p&gt;
&lt;p&gt;在快速变化的环境中使用Zabbix，而不需要过度管理&lt;/p&gt;

&lt;p&gt;（2）发现方式：&lt;/p&gt;
&lt;p&gt;ip地址范围；&lt;/p&gt;
&lt;p&gt;　　可用服务（ftp, ssh, http, ...）&lt;/p&gt;
&lt;p&gt;　　zabbix_agent的响应；&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　snmp&lt;/strong&gt;_agent的响应；&lt;/p&gt;

&lt;p&gt;（3）网络发现通常包含两个阶段：discovery发现 和actions动作&lt;/p&gt;
&lt;p&gt;① discovery：&lt;/p&gt;
&lt;p&gt;Zabbix定期扫描网络发现规则中定义的IP范围；检查的频率对于每个规则都是可配置的&lt;/p&gt;
&lt;p&gt;每个规则都有一组用于为IP范围执行的服务检查&lt;/p&gt;
&lt;p&gt;由网络发现模块执行的服务和主机(IP)的每个检查都会生成一个发现事件&lt;/p&gt;
&lt;p&gt;8种响应事件&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1216496/201712/1216496-20171226172035479-1598541190.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;② actions：网络发现中的事件可以触发action，从而自动执行指定的操作，把discvery events当作前提条件；&lt;/p&gt;
&lt;p&gt;　　Sending notifications 发送通知&lt;/p&gt;
&lt;p&gt;　　Adding/removing hosts 添加/删除主机&lt;/p&gt;
&lt;p&gt;　　Enabling/disabling hosts 启用/禁用host&lt;/p&gt;
&lt;p&gt;　　Adding hosts to a group 向组中添加主机&lt;/p&gt;
&lt;p&gt;　　Removing hosts from a group 移除组中的主机&lt;/p&gt;
&lt;p&gt;　　Linking hosts to/unlinking from a template 从模板链接主机或取消链接&lt;/p&gt;
&lt;p&gt;　　Executing remote scripts 执行远程脚本&lt;/p&gt;
&lt;p&gt;这些事件的配置还可以基于设备的类型、IP 、状态、上线/ 离线等进行配置&lt;/p&gt;

&lt;p&gt;（4）网络发现：接口添加&lt;/p&gt;
&lt;p&gt;网络发现中添加主机时会自动创建interface 接口&lt;/p&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;p&gt;　　如果基于SNMP 检测成功，则会创建SNMP 接口&lt;/p&gt;
&lt;p&gt;　　如果某服务同时响应给了agent 和SNMP ，则&lt;strong&gt;两种接口都会创建&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　如果同一种发现机制( 如agent) 返回了非惟一数据，则&lt;strong&gt;第一个接口被识别为默认，其它的为额外接口&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　即便是某主机开始时只有agent 接口，后来又通过snmp 发现了它，同样会为其添加额外的snmp 接口&lt;/p&gt;
&lt;p&gt;　　不同的主机如果返回了相同的数据，则第一个主机将被添加，余下的主机会被当作第一个主机的额外接口&lt;/p&gt;

&lt;h3&gt;&lt;span&gt;2、配置网络发现Network discovery&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;（1）准备一台可被扫描发现的主机&lt;/p&gt;
&lt;p&gt;① 安装agent 段的包&lt;/p&gt;
&lt;p&gt;yum -y install zabbix-agent zabbix-sender&lt;/p&gt;
&lt;p&gt;② 设置agent 配置，可以把之前设置好的node1的配置传过来&lt;/p&gt;
&lt;p&gt;vim /etc/zabbix/zabbix_agentd.conf&lt;/p&gt;
&lt;p&gt;Hostname=node2.along.com #只需修改hostname&lt;/p&gt;
&lt;p&gt;③ visudo 修改sudo的配置&lt;/p&gt;
&lt;p&gt;#Defaults !visiblepw&lt;/p&gt;
&lt;p&gt;zabbix ALL=(ALL) NOPASSWD: ALL&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1216496/201712/1216496-20171226172036745-511117378.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;④ 开启服务&lt;/p&gt;
&lt;p&gt;systemctl start zabbix-agent&lt;/p&gt;

&lt;p&gt;（2）设置自动发现规则discovery&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1216496/201712/1216496-20171226172037370-800415726.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;注释：&lt;/p&gt;
&lt;p&gt;① key：zabbix_get -s 192.168.30.2 -p 10050 -k &quot;system.hostname&quot;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1216496/201712/1216496-20171226172037635-349059993.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;② 更新间隔：1h就好，不要扫描太过频繁，扫描整个网段，太废资源；这里为了实验，设为1m&lt;/p&gt;

&lt;p&gt;（3）自动发现成功&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1216496/201712/1216496-20171226172037948-2146168679.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;（4）设置自动发现discovery 的动作action&lt;/p&gt;
&lt;p&gt;a) 创建&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1216496/201712/1216496-20171226172038182-11402625.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;b) 设置action动作&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1216496/201712/1216496-20171226172038541-1323988067.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;① 设置A条件，自动发现规则=test.net&lt;/p&gt;
&lt;p&gt;② 设置B条件，自动发现状态=up&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1216496/201712/1216496-20171226172038823-1466028368.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;③ 要做什么操作&lt;/p&gt;
&lt;p&gt;添加主机到监控&lt;/p&gt;
&lt;p&gt;自动链接Template OS Linux 到此host&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1216496/201712/1216496-20171226172039213-1479221797.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;c) 配置action 完成，默认是disabled 停用的&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1216496/201712/1216496-20171226172039526-1399823520.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;d) 启用动作，查看效果&lt;/p&gt;
&lt;p&gt;确实已经生效，添加主机成功，模板链接成功&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1216496/201712/1216496-20171226172039979-1033265636.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;（5）如果自己需要添加的主机已经扫描添加完成，就可以关闭网络扫描了，因为太耗资源&lt;/p&gt;

&lt;h2&gt;&lt;span&gt;三、web监控&lt;/span&gt;&lt;/h2&gt;
&lt;h3&gt;&lt;span&gt;1、介绍&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;（1）介绍&lt;/p&gt;
&lt;p&gt;① Web监控：监控指定的站点的&lt;strong&gt;资源下载速度&lt;/strong&gt;，及&lt;strong&gt;页面响应时间&lt;/strong&gt;，还有&lt;strong&gt;响应代码&lt;/strong&gt;；&lt;/p&gt;
&lt;p&gt;② 术语：&lt;/p&gt;
&lt;p&gt;　　web Scenario： web场景（站点）&lt;/p&gt;
&lt;p&gt;　　web page ：web页面，一个场景有多个页面&lt;/p&gt;
&lt;p&gt;　　內建key：要测一个页面，要测三个步骤（下边3个內建key）&lt;/p&gt;
&lt;p&gt;③ 内建key：&lt;/p&gt;
&lt;p&gt;　　 web.test.in[Scenario,Step,bps]：传输速率&lt;/p&gt;
&lt;p&gt;　　 web.test.time[Scenario,Step]： 响应时长&lt;/p&gt;
&lt;p&gt;　　 web.test.rspcode[Scenario,Step]：响应码&lt;/p&gt;

&lt;h3&gt;&lt;span&gt;2、创建设置web场景&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;（1）创建&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1216496/201712/1216496-20171226172040229-465393880.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;（2）配置web 监测&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1216496/201712/1216496-20171226172040588-1557305887.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;① 点击步骤，设置web page web页面&lt;/p&gt;
&lt;p&gt;a) 设置名为home page，URL为&lt;span&gt;http://192.168.30.7/index.html 的web页面&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1216496/201712/1216496-20171226172040885-1526168288.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;b) 设置名为fpm status，URL为&lt;span&gt;http://192.168.30.7/fpm-status 的web页面&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1216496/201712/1216496-20171226172041291-925383434.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;c) 设置2个web页面成功&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1216496/201712/1216496-20171226172041870-962857372.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;② 如果有特殊认证，也可以添加&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1216496/201712/1216496-20171226172042166-1660206125.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h3&gt;&lt;span&gt;3、查看测试&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1216496/201712/1216496-20171226172042510-1962638311.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h2&gt;&lt;span&gt;四、主动/被动 监控&lt;/span&gt;&lt;/h2&gt;
&lt;h3&gt;&lt;span&gt;1、介绍&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;（1）主动/被动介绍&lt;/p&gt;
&lt;p&gt;　　被动检测：相对于agent而言；agent, &lt;strong&gt;server向agent请求获取配置的各监控项相关的数据&lt;/strong&gt;，agent接收请求、获取数据并响应给server；&lt;/p&gt;
&lt;p&gt;　　主动检测：相对于agent而言；agent(active),&lt;strong&gt;agent向server请求与自己相关监控项配置&lt;/strong&gt;，主动地将server配置的监控项相关的数据发送给server；&lt;/p&gt;
&lt;p&gt;　　主动监控能极大节约监控server 的资源。&lt;/p&gt;
&lt;p&gt;（2）zabbix_sender发送数据：实现人工生成数据，发给server端&lt;/p&gt;
&lt;p&gt;① zabbix server上的某主机上，直接定义Item时随便定义一个不与其它已有key冲突的key即可，即item type为&quot;zabbix trapper&quot;；&lt;/p&gt;
&lt;p&gt;② 用法选项：&lt;/p&gt;
&lt;p&gt;zabbix_sender&lt;/p&gt;
&lt;p&gt;　　-z zabbix_server_ip&lt;/p&gt;
&lt;p&gt;　　-p zabbix_server_port&lt;/p&gt;
&lt;p&gt;　　-s zabbix_agent_hostname&lt;/p&gt;
&lt;p&gt;　　-k key&lt;/p&gt;
&lt;p&gt;　　-o value 值&lt;/p&gt;

&lt;h3&gt;&lt;span&gt;2、设置一个通过內建key发送数据的主动监控&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;（1）agent端所需要基本配置：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
ServerActive=&lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;30.107&lt;/span&gt;&lt;span&gt;   给哪个监控server 发送数据
Hostname&lt;/span&gt;=&lt;span&gt;node1.along.com   自己的主机名，假设主机定死了，不设置下一项
#HostnameItem&lt;/span&gt;=   如果自己的主机名易变动，这一项相当于key一样去匹配
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注意：若后两项同时启用，下边一个选择生效&lt;/p&gt;

&lt;p&gt;（2）设置一个主动监测&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1216496/201712/1216496-20171226172042870-1427172290.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;① 选择进程，每秒更改，&lt;/p&gt;
&lt;p&gt;因为key：system.cpu.switches ：上下文的数量进行切换，它返回一个整数值。为了监控效果，选择下一秒减上一秒的值作为监控&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1216496/201712/1216496-20171226172043120-1810882608.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;（3）已经有啦graph图形&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1216496/201712/1216496-20171226172043526-25418384.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h3&gt;&lt;span&gt;3、设置一个通过命令zabbix_sender发送数据的主动监控&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;（1）配置一个zabbix traper(采集器) 的item 监控项&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1216496/201712/1216496-20171226172043838-1551635865.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;（2）agent 端手动发送数据&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1216496/201712/1216496-20171226172044120-1117751325.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;（3）监控到数据的变化&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1216496/201712/1216496-20171226172044682-2050320416.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h2&gt;&lt;span&gt;五、基于SNMP监控（了解）&lt;/span&gt;&lt;/h2&gt;
&lt;h3&gt;&lt;span&gt;1、介绍&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;（1）介绍&lt;/p&gt;
&lt;p&gt;SNMP：&lt;strong&gt;简单&lt;/strong&gt;网络管理协议；（非常古老的协议）&lt;/p&gt;
&lt;p&gt;三种通信方式：读（get, getnext）、写（set）、trap（陷阱）；&lt;/p&gt;
&lt;p&gt;端口：&lt;/p&gt;
&lt;p&gt;　　161/udp&lt;/p&gt;
&lt;p&gt;　　162/udp&lt;/p&gt;
&lt;p&gt;SNMP协议：年代久远&lt;/p&gt;
&lt;p&gt;　　v1: 1989&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　v2c&lt;/strong&gt;: 1993&lt;/p&gt;
&lt;p&gt;　　v3: 1998&lt;/p&gt;
&lt;p&gt;监控网络设备：交换机、路由器&lt;/p&gt;
&lt;p&gt;MIB：Management Information Base 信息管理基础&lt;/p&gt;
&lt;p&gt;OID：Object ID 对象ID&lt;/p&gt;

&lt;p&gt;（2）Linux启用snmp的方法：&lt;/p&gt;
&lt;p&gt;yum install net-snmp net-snmp-utils&lt;/p&gt;
&lt;p&gt;配置文件：定义ACL&lt;/p&gt;
&lt;p&gt;　　/etc/snmp/snmpd.conf&lt;/p&gt;
&lt;p&gt;启动服务：&lt;/p&gt;
&lt;p&gt;　　systemctl start snmpd 被监控端开启的服务&lt;/p&gt;
&lt;p&gt;　　 systemctl start snmptrapd    监控端开启的服务（如果允许被监控端启动主动监控时启用）&lt;/p&gt;

&lt;p&gt;（3）配置文件的介绍&lt;/p&gt;
&lt;p&gt;开放数据：4步&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1216496/201712/1216496-20171226172045276-679726746.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;① 定义认证符，将社区名称&quot;public&quot;映射为&quot;安全名称&quot;&lt;/p&gt;
&lt;p&gt;② 将安全名称映射到一个组名&lt;/p&gt;
&lt;p&gt;③ 为我们创建一个视图，让我们的团队有权利&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;掩码：&lt;/strong&gt;我列出一些注释，有很多，可以再网上查询&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;.1.3.6.1.2.&lt;/span&gt;1.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　 1.1.0：系统描述信息，SysDesc&lt;/p&gt;
&lt;p&gt;　　 1.3.0：监控时间， SysUptime&lt;/p&gt;
&lt;p&gt;　　 1.5.0：主机名，SysName&lt;/p&gt;
&lt;p&gt;　　 1.7.0：主机提供的服务，SysService&lt;/p&gt;
&lt;p&gt;.1.3.6.1.2.2.&lt;/p&gt;
&lt;p&gt;　　 2.1.0：网络接口数目&lt;/p&gt;
&lt;p&gt;　　 2.2.1.2:网络接口的描述信息&lt;/p&gt;
&lt;p&gt;　　 2.2.1.3:网络接口类型&lt;/p&gt;
&lt;p&gt;　　 ……&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1216496/201712/1216496-20171226172045604-1497693285.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;④ 授予对systemview视图的只读访问权&lt;/p&gt;

&lt;p&gt;（4）测试工具：&lt;/p&gt;
&lt;p&gt;    # &lt;strong&gt;snmpget&lt;/strong&gt; -v 2c -c public HOST OID&lt;/p&gt;
&lt;p&gt;    # &lt;strong&gt;snmpwalk&lt;/strong&gt; -v 2c -c public HOST OID 通过这个端口查询到的数据，全列出了&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1216496/201712/1216496-20171226172045948-698976544.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h3&gt;&lt;span&gt;2、配置SNMP监控&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;（1）下载，修改配置文件&lt;/p&gt;
&lt;p&gt;vim /etc&lt;strong&gt;/snmp/snmpd.conf&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
view    systemview    included   .&lt;span&gt;1.3&lt;/span&gt;.&lt;span&gt;6.1&lt;/span&gt;.&lt;span&gt;2.1&lt;/span&gt;.&lt;span&gt;1&lt;/span&gt;&lt;span&gt;
view    systemview    included   .&lt;/span&gt;&lt;span&gt;1.3&lt;/span&gt;.&lt;span&gt;6.1&lt;/span&gt;.&lt;span&gt;2.1&lt;/span&gt;.&lt;span&gt;2&lt;/span&gt;&lt;span&gt;   # 网络接口的相关数据
view    systemview    included   .&lt;/span&gt;&lt;span&gt;1.3&lt;/span&gt;.&lt;span&gt;6.1&lt;/span&gt;.&lt;span&gt;4.1&lt;/span&gt;.&lt;span&gt;2021&lt;/span&gt;&lt;span&gt;   # 系统资源负载，memory, disk io, cpu load 
view    systemview    included   .&lt;/span&gt;&lt;span&gt;1.3&lt;/span&gt;.&lt;span&gt;6.1&lt;/span&gt;.&lt;span&gt;2.1&lt;/span&gt;.&lt;span&gt;25&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;（2）在agent 上测试&lt;/p&gt;
&lt;p&gt;snmpget -v 2c -c public 192.168.30.2 .1.3.6.1.2.1.1.3.0&lt;/p&gt;
&lt;p&gt;snmpget -v 2c -c public 192.168.30.2 .1.3.6.1.2.1.1.5.0&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1216496/201712/1216496-20171226172046245-1946753487.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;（3）在监控页面，给node2加一个snmp的接口&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1216496/201712/1216496-20171226172046541-990434657.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;（4）在node2上加一个 &lt;span&gt;Template OS Linux SNMPv2 模板&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1216496/201712/1216496-20171226172046854-1430722762.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;模板添加成功，生成一系列东西&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1216496/201712/1216496-20171226172047151-639977143.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;点开一个item 看一下&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1216496/201712/1216496-20171226172047463-1455547608.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;（5）生成一些最新数据的图形graph了&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1216496/201712/1216496-20171226172047729-481410869.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h3&gt;&lt;span&gt;3、设置入站出站packets 的SNMP监控&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;（1）监控网络设备：交换机、路由器的步骤：&lt;/p&gt;
&lt;p&gt;① 把交换机、路由器的SNMP 把对应的OID的分支启用起来&lt;/p&gt;
&lt;p&gt;② 了解这些分支下有哪些OID，他们分别表示什么意义&lt;/p&gt;
&lt;p&gt;③ 我们要监控的某一数据：如交换机的某一个接口流量、报文，发送、传入传出的报文数有多少个；传入传出的字节数有多少个，把OID取出来，保存&lt;/p&gt;

&lt;p&gt;（2）定义入站出站的item监控项&lt;/p&gt;
&lt;p&gt;interface traffic packets(in)&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1216496/201712/1216496-20171226172048182-394941521.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;interface traffic packets(out)&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1216496/201712/1216496-20171226172048510-973935048.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h2&gt;&lt;span&gt;六、JMX接口&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1216496/201712/1216496-20171226172048698-2048639928.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;&lt;span&gt;1、介绍&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;（1）介绍&lt;/p&gt;
&lt;p&gt;Java虚拟机(JVM)具有内置的插装，使您能够使用JMX监视和管理它。您还可以使用JMX监视工具化的应用程序。&lt;/p&gt;
&lt;p&gt;（2）配置设置介绍&lt;/p&gt;
&lt;p&gt;① zabbix-java-gateway主机设置：&lt;/p&gt;
&lt;p&gt;　　安装 zabbix-java-gateway程序包，启动服务；&lt;/p&gt;
&lt;p&gt;　　yum -y install zabbix-java-gateway&lt;/p&gt;
&lt;p&gt;② zabbix-server端设置（需要重启服务）：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　JavaGateway=&lt;/strong&gt;172.16.0.70&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　JavaGatewayPort=&lt;/strong&gt;10052&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　StartJavaPollers=&lt;/strong&gt;5 #监控项&lt;/p&gt;
&lt;p&gt;③ tomcat主机设置：&lt;/p&gt;
&lt;p&gt;　　 监控tomcat：&lt;/p&gt;
&lt;p&gt;　　　　 /etc/sysconfig/tomcat，添加&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　CATALINA_OPTS&lt;/strong&gt;=&quot;-Djava.rmi.server.hostname=TOMCAT_SERVER_IP -Djavax.management.builder.initial= -Dcom.sun.management.jmxremote=true -Dcom.sun.management.jmxremote.port=12345 -Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.authenticate=false&quot;   #启用JVM接口，默认没有启用&lt;/p&gt;

&lt;p&gt;　　添加监控项：&lt;/p&gt;
&lt;p&gt;　　　　jmx[object_name,attribute_name]&lt;/p&gt;
&lt;p&gt;　　　　　　object name - 它代表MBean的对象名称&lt;/p&gt;
&lt;p&gt;　　　　　　attribute name - 一个MBean属性名称，可选的复合数据字段名称以点分隔&lt;/p&gt;
&lt;p&gt;　　　　示例：&lt;/p&gt;
&lt;p&gt;　　　　　　 jmx[&quot;java.lang:type=Memory&quot;,&quot;HeapMemoryUsage.used&quot;]&lt;/p&gt;

&lt;p&gt;④ jmx的详细文档：https://docs.oracle.com/javase/1.5.0/docs/guide/management/agent.html&lt;/p&gt;

&lt;h3&gt;&lt;span&gt;2、配置JVM接口监控&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;（1）安装配置tomcat&lt;/p&gt;
&lt;p&gt;① 下载安装tomcat，主要是用JVM&lt;/p&gt;
&lt;p&gt;yum -y install &lt;strong&gt;java-1.8.0-openjdk-devel tomcat-admin-webapps tomcat-docs-webapp&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;② 加CATALINA_OPTS= #启用JVM接口，默认没有启用&lt;/p&gt;
&lt;p&gt;vim /etc/sysconfig/tomcat&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
CATALINA_OPTS=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;-Djava.rmi.server.hostname=192.168.30.2 -Djavax.management.builder.initial= -Dcom.sun.management.jmxremote=true   -Dcom.sun.management.jmxremote.port=12345  -Dcom.sun.management.jmxremote.ssl=false  -Dcom.sun.management.jmxremote.authenticate=false&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;③ 开启服务&lt;/p&gt;
&lt;p&gt;systemctl start tomcat&lt;/p&gt;

&lt;p&gt;（2）在&lt;strong&gt;zabbix-server 端&lt;/strong&gt;，安装配置java-gateway&lt;/p&gt;
&lt;p&gt;① 安装配置java-gateway&lt;/p&gt;
&lt;p&gt;yum -y install zabbix-java-gateway&lt;/p&gt;
&lt;p&gt;/etc/zabbix/zabbix_java_gateway.conf 安装完后，会生成一个java_gateway 的配置文件&lt;/p&gt;
&lt;p&gt;systemctl start zabbix-java-gateway.service 不用修改，直接开启服务&lt;/p&gt;

&lt;p&gt;② 修改server 配置，开启java-gateway的配置&lt;/p&gt;
&lt;p&gt;vim /etc/zabbix/&lt;strong&gt;zabbix_server.conf&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
JavaGateway=&lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;30.107&lt;/span&gt;&lt;span&gt;  
JavaGatewayPort&lt;/span&gt;=&lt;span&gt;10052&lt;/span&gt;&lt;span&gt;
StartJavaPollers&lt;/span&gt;=&lt;span&gt;5&lt;/span&gt;    #打开5个监控项
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;③ systemctl restart zabbix-server 重启zabbix-server 服务&lt;/p&gt;

&lt;p&gt;（3）在node2 主机上添加JMX接口，实验模板&lt;/p&gt;
&lt;p&gt;① 添加JMX接口&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1216496/201712/1216496-20171226172049182-664693382.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;② 在node2 上连接tomcat JMX 模板&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1216496/201712/1216496-20171226172049541-701630088.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;③ 随便查看一个监控项item&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1216496/201712/1216496-20171226172050010-1062166097.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;（4）自己定义一个堆内存使用的监控项，基于JVM接口（没必要，使用模板就好）&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1216496/201712/1216496-20171226172050479-619246539.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h2&gt;&lt;span&gt;七、分布式监控&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1216496/201712/1216496-20171226172050995-2135249770.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;&lt;span&gt;1、介绍&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;（1）介绍&lt;/p&gt;
&lt;p&gt;分布式监控概述&lt;/p&gt;
&lt;p&gt;　　proxy and node&lt;/p&gt;
&lt;p&gt;Zabbix 的三种架构&lt;/p&gt;
&lt;p&gt;　　Server-agent&lt;/p&gt;
&lt;p&gt;　　Server-Node-agent&lt;/p&gt;
&lt;p&gt;　　Server-Proxy-agent&lt;/p&gt;
&lt;p&gt;监控Zabbix&lt;/p&gt;

&lt;p&gt;（2）配置介绍&lt;/p&gt;
&lt;p&gt;Zabbix Proxy的配置：&lt;/p&gt;
&lt;p&gt;　　server-node-agent&lt;/p&gt;
&lt;p&gt;　　server-proxy-agent&lt;/p&gt;
&lt;p&gt;a) 配置proxy主机：&lt;/p&gt;
&lt;p&gt;(1) 安装程序包&lt;/p&gt;
&lt;p&gt;    zabbix-proxy-mysql zabbix-get&lt;/p&gt;
&lt;p&gt;    zabbix-agent zabbix-sender&lt;/p&gt;
&lt;p&gt;(2) 准备数据库&lt;/p&gt;
&lt;p&gt;　　创建、授权用户、导入schema.sql；&lt;/p&gt;
&lt;p&gt;(3) 修改配置文件&lt;/p&gt;
&lt;p&gt;　　Server=&lt;/p&gt;
&lt;p&gt;　　　　zabbix server主机地址；&lt;/p&gt;
&lt;p&gt;　　Hostname=&lt;/p&gt;
&lt;p&gt;　　　　当前代理服务器的名称；在server添加proxy时，必须使用此处指定的名称；&lt;/p&gt;
&lt;p&gt;　　　　=需要事先确保server能解析此名称；&lt;/p&gt;
&lt;p&gt;　　DBHost=&lt;/p&gt;
&lt;p&gt;　　DBName=&lt;/p&gt;
&lt;p&gt;　　DBUser=&lt;/p&gt;
&lt;p&gt;　　DBPassword=&lt;/p&gt;

&lt;p&gt;　　ConfigFrequency=10&lt;/p&gt;
&lt;p&gt;　　DataSenderFrequency=1&lt;/p&gt;

&lt;p&gt;b) 在server端添加此Porxy&lt;/p&gt;
&lt;p&gt;    Administration --&amp;gt; Proxies&lt;/p&gt;

&lt;p&gt;c) 在Server端配置通过此Proxy监控的主机；&lt;/p&gt;
&lt;p&gt;注意：zabbix agent端要允许zabbix proxy主机执行数据采集操作：&lt;/p&gt;

&lt;h3&gt;&lt;span&gt;2、实现分布式zabbix proxy监控&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;实验前准备：&lt;/p&gt;
&lt;p&gt;① ntpdate 172.168.30.1 同步时间&lt;/p&gt;
&lt;p&gt;② 关闭防火墙，selinux&lt;/p&gt;
&lt;p&gt;③ 设置主机名 hostnamectl set-hostname zbproxy.along.com&lt;/p&gt;
&lt;p&gt;④ vim /etc/hosts 每个机器都设置hosts，以解析主机名；DNS也行&lt;/p&gt;
&lt;p&gt;192.168.30.107 server.along.com&lt;/p&gt;
&lt;p&gt;192.168.30.7 node1.along.com&lt;/p&gt;
&lt;p&gt;192.168.30.2 node2.along.com&lt;/p&gt;
&lt;p&gt;192.168.30.3 node3.along.com zbproxy.along.com&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1216496/201712/1216496-20171226172051276-274670232.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;（1）环境配置（4台主机）&lt;/p&gt;
&lt;table border=&quot;1&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; width=&quot;113&quot;&gt;
&lt;p&gt;机器名称&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;120&quot;&gt;
&lt;p&gt;IP配置&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;124&quot;&gt;
&lt;p&gt;服务角色&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; width=&quot;113&quot;&gt;
&lt;p&gt;zabbix-server&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;120&quot;&gt;
&lt;p&gt;192.168.30.107&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;124&quot;&gt;
&lt;p&gt;监控&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; width=&quot;113&quot;&gt;
&lt;p&gt;agent-node1&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;120&quot;&gt;
&lt;p&gt;192.168.30.7&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;124&quot;&gt;
&lt;p&gt;被监控端&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; width=&quot;113&quot;&gt;
&lt;p&gt;agent-node2&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;120&quot;&gt;
&lt;p&gt;192.168.30.2&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;124&quot;&gt;
&lt;p&gt;被监控端&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; width=&quot;113&quot;&gt;
&lt;p&gt;node3&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;120&quot;&gt;
&lt;p&gt;192.168.30.3&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;124&quot;&gt;
&lt;p&gt;代理proxy&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;zabbix-server 直接监控一台主机node1&lt;/p&gt;
&lt;p&gt;zabbix-server 通过代理node3 监控node2&lt;/p&gt;

&lt;p&gt;（2）在node3 上配置mysql&lt;/p&gt;
&lt;p&gt;① 创建配置mysql&lt;/p&gt;
&lt;p&gt;vim /etc/my.cnf.d/server.cnf&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;[server]
skip_name_resolve &lt;/span&gt;=&lt;span&gt; on
innodb_file_per_table &lt;/span&gt;=&lt;span&gt; on
innodb_buffer_pool_size &lt;/span&gt;=&lt;span&gt; 256M
max_connections &lt;/span&gt;= &lt;span&gt;2000&lt;/span&gt;&lt;span&gt;
log&lt;/span&gt;-bin = master-log
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;② systemctl start mariadb 开启服务&lt;/p&gt;
&lt;p&gt;③ 创建数据库 和 授权用户&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
MariaDB [(none)]&amp;gt; create database zbxproxydb character set &lt;span&gt;'&lt;/span&gt;&lt;span&gt;utf8&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
MariaDB [(none)]&lt;/span&gt;&amp;gt; grant all on zbxproxydb.* to &lt;span&gt;'&lt;/span&gt;&lt;span&gt;zbxproxyuser&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;@&lt;span&gt;'&lt;/span&gt;&lt;span&gt;192.168.30.%&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; identified by &lt;span&gt;'&lt;/span&gt;&lt;span&gt;zbxproxypass&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
MariaDB [(none)]&lt;/span&gt;&amp;gt; flush privileges;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;（3）在node3 上下载zabbix 相关的包，主要是代理proxy的包&lt;/p&gt;
&lt;p&gt;yum -y install &lt;strong&gt;zabbix-proxy-mysql&lt;/strong&gt; zabbix-get zabbix-agent zabbix-sender&lt;/p&gt;

&lt;p&gt;a) &lt;strong&gt;初始化数据库&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;zabbix-proxy-mysql 包里带有，导入数据的文件&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1216496/201712/1216496-20171226172052791-1016956277.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;cp /usr/share/doc/zabbix-proxy-mysql-3.4.4/schema.sql.gz ./ 复制&lt;/p&gt;
&lt;p&gt;gzip -d schema.sql.gz 解包&lt;/p&gt;
&lt;p&gt;mysql -root -p zbxproxydb &amp;lt; schema.sql 导入数据&lt;/p&gt;

&lt;p&gt;b) 查看数据已经生成&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1216496/201712/1216496-20171226172053276-1712858671.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;（4）配置proxy端&lt;/p&gt;
&lt;p&gt;① vim /etc/zabbix/zabbix_proxy.conf&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1216496/201712/1216496-20171226172053682-47495044.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
Server=&lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;30.107&lt;/span&gt;&lt;span&gt;   #server 的IP
ServerPort&lt;/span&gt;=&lt;span&gt;10051&lt;/span&gt;&lt;span&gt;   #server 的端口

Hostname&lt;/span&gt;=&lt;span&gt;zbxproxy.along.com   #主机名
ListenPort&lt;/span&gt;=&lt;span&gt;10051&lt;/span&gt;&lt;span&gt;    #proxy自己的监听端口
EnableRemoteCommands&lt;/span&gt;=&lt;span&gt;1&lt;/span&gt;&lt;span&gt;    #允许远程命令
LogRemoteCommands&lt;/span&gt;=&lt;span&gt;1&lt;/span&gt;&lt;span&gt;    #记录远程命令的日志

数据的配置
DBHost&lt;/span&gt;=&lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;30.3&lt;/span&gt;&lt;span&gt;
DBName&lt;/span&gt;=&lt;span&gt;zbxproxydb  
DBUser&lt;/span&gt;=&lt;span&gt;zbxproxyuser
DBPassword&lt;/span&gt;=&lt;span&gt;zbxproxypass

ConfigFrequency&lt;/span&gt;=&lt;span&gt;30&lt;/span&gt;&lt;span&gt;    #多长时间，去服务端拖一次有自己监控的操作配置；为了实验更快的生效，这里设置30秒，默认3600s
DataSenderFrequency&lt;/span&gt;=&lt;span&gt;1&lt;/span&gt;   #每一秒向server 端发一次数据，发送频度
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;② systemctl start zabbix-proxy 开启服务&lt;/p&gt;

&lt;p&gt;（5）配置node2端，允许proxy代理监控&lt;/p&gt;
&lt;p&gt;vim /etc/zabbix/zabbix_agentd.conf&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
Server=&lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;30.107&lt;/span&gt;,&lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;30.3&lt;/span&gt;&lt;span&gt;
ServerActive&lt;/span&gt;=&lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;30.107&lt;/span&gt;,&lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;30.3&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;systemctl restart zabbix-agent 启动服务&lt;/p&gt;

&lt;p&gt;（6）把代理加入监控server，创建配置agent 代理&lt;/p&gt;
&lt;p&gt;① 创建agent 代理&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1216496/201712/1216496-20171226172053932-978486530.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;② 配置&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1216496/201712/1216496-20171226172054213-335809349.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;（7）创建node2 主机，并采用代理监控&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1216496/201712/1216496-20171226172054682-1009619727.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;设置代理成功&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1216496/201712/1216496-20171226172055307-1060200173.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;（8）创建item监控项&lt;/p&gt;
&lt;p&gt;① 为了实验，随便创一个监控项 CPU Switches&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1216496/201712/1216496-20171226172055698-1128474710.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;② 进程里设置每秒更改&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1216496/201712/1216496-20171226172055932-1067681793.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;③ 成功，graph 图形生成&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1216496/201712/1216496-20171226172056416-1575771036.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h2&gt;&lt;span&gt;八、查询使用网上模板监控&lt;/span&gt;&lt;/h2&gt;
&lt;h3&gt;&lt;span&gt;1、找官方的share 分享网站&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://cn.bing.com/&quot;&gt;&lt;span&gt;https://cn.bing.com/&lt;/span&gt;&lt;/a&gt; 搜索 zabbix share&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1216496/201712/1216496-20171226172057120-1262251161.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;例如：我们要实现监控Nginx ，我们查找一个模板&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1216496/201712/1216496-20171226172057635-1089716709.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;就以这个模板为例&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1216496/201712/1216496-20171226172058182-128310444.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h3&gt;2、在node1 上使用此模板&lt;/h3&gt;
&lt;p&gt;（1）安装配置 nginx&lt;/p&gt;
&lt;p&gt;① yum -y install nginx&lt;/p&gt;
&lt;p&gt;vim /etc/nginx/nginx.conf 按照网页的操作指示&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
location /&lt;span&gt;stub_status {
        stub_status on;
        access_log off;
    #    allow &lt;/span&gt;&lt;span&gt;127.0&lt;/span&gt;.&lt;span&gt;0.1&lt;/span&gt;&lt;span&gt;;   #为了操作方便，我取消的访问控制
    #    deny all;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1216496/201712/1216496-20171226172058510-1149178016.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;② 启动服务&lt;/p&gt;
&lt;p&gt;systemctl restart nginx&lt;/p&gt;

&lt;p&gt;（2）下载模板所依赖的脚本&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1216496/201712/1216496-20171226172058823-57198051.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;mkdir -p /srv/zabbix/libexec/&lt;/p&gt;
&lt;p&gt;cd /srv/zabbix/libexec/&lt;/p&gt;
&lt;p&gt;wget https://raw.githubusercontent.com/oscm/zabbix/master/nginx/nginx.sh 从网页上获取脚本&lt;/p&gt;
&lt;p&gt;chmod +x nginx.sh 加执行权限&lt;/p&gt;

&lt;p&gt;（3）配置agent 的用户参数UserParameter&lt;/p&gt;
&lt;p&gt;cd /etc/zabbix/zabbix_agentd.d/&lt;/p&gt;
&lt;p&gt;wget &lt;span&gt;https://raw.githubusercontent.com/oscm/zabbix/master/nginx/userparameter_nginx.conf 很短，自己写也行&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1216496/201712/1216496-20171226172059073-397108138.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;（4）在windows 上下载模板，并导入这server 的模板中&lt;/p&gt;
&lt;p&gt;&lt;span&gt;wget https://raw.githubusercontent.com/oscm/zabbix/master/nginx/zbx_export_templates.xml 可以现在linux上下载，再sz 导出到windows上&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1216496/201712/1216496-20171226172059291-1133694346.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;① 导入下载的模板&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1216496/201712/1216496-20171226172059635-1317185355.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;② 主机node1 链接这个模板&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1216496/201712/1216496-20171226172100041-1015144646.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;③ 模板生效&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1216496/201712/1216496-20171226172100323-635966866.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h2&gt;&lt;span&gt;九、zabbix-server 监控自己，数据库，nginx&lt;/span&gt;&lt;/h2&gt;
&lt;h3&gt;1、下载安装，配置agent&lt;/h3&gt;
&lt;p&gt;vim /etc/zabbix/zabbix_agentd.conf 配置agent&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
EnableRemoteCommands=&lt;span&gt;1&lt;/span&gt;&lt;span&gt;    允许远程命令
LogRemoteCommands&lt;/span&gt;=&lt;span&gt;1&lt;/span&gt;&lt;span&gt;    记录远程命令
Server&lt;/span&gt;=&lt;span&gt;127.0&lt;/span&gt;.&lt;span&gt;0.1&lt;/span&gt;&lt;span&gt;
ServerActive&lt;/span&gt;=&lt;span&gt;127.0&lt;/span&gt;.&lt;span&gt;0.1&lt;/span&gt;&lt;span&gt;
Hostname&lt;/span&gt;=server.along.com
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;2、自动生成Zabbix server 的主机&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1216496/201712/1216496-20171226172101526-749330259.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;3、在主机中添加模板&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1216496/201712/1216496-20171226172101885-2112581492.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;4、启用Zabbix server&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1216496/201712/1216496-20171226172102370-823261452.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;5、监控到数据&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1216496/201712/1216496-20171226172102698-926445046.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h2&gt;&lt;span&gt;十、调优&lt;/span&gt;&lt;/h2&gt;
&lt;h3&gt;&lt;span&gt;1、调优&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;① Database：&lt;/p&gt;
&lt;p&gt;　　历史数据不要保存太长时长；&lt;/p&gt;
&lt;p&gt;　　尽量让数据缓存在数据库服务器的内存中；&lt;/p&gt;
&lt;p&gt;② 触发器表达式：&lt;strong&gt;减少使用聚合函数&lt;/strong&gt; min(), max(), avg()；尽量使用last()，nodata()；&lt;/p&gt;
&lt;p&gt;　　因为聚合函数，要运算&lt;/p&gt;
&lt;p&gt;③ 数据收集：polling较慢(减少使用SNMP/agentless/agent）；&lt;strong&gt;尽量使用trapping（agent(active）主动监控）；&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;④ 数据类型：文本型数据处理速度较慢；&lt;strong&gt;尽量少&lt;/strong&gt;收集类型为&lt;strong&gt;文本&lt;/strong&gt; text或string类型的数据；&lt;strong&gt;多使用&lt;/strong&gt;类型为numeric &lt;strong&gt;数值型数据&lt;/strong&gt; 的；&lt;/p&gt;

&lt;h3&gt;&lt;span&gt;2、zabbix服务器的进程&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;(1) 服务器组件的数量；&lt;/p&gt;
&lt;p&gt;　　alerter, discoverer, escalator, http poller, hourekeeper, icmp pinger, ipmi polller, poller, trapper, configration syncer, ...&lt;/p&gt;

&lt;p&gt;　　StartPollers=60&lt;/p&gt;
&lt;p&gt;　　StartPingers=10&lt;/p&gt;
&lt;p&gt;　　...&lt;/p&gt;
&lt;p&gt;　　StartDBSyncer=5&lt;/p&gt;
&lt;p&gt;　　...&lt;/p&gt;

&lt;p&gt;(2) 设定合理的缓存大小&lt;/p&gt;
&lt;p&gt;　　 CacheSize=8M&lt;/p&gt;
&lt;p&gt;　　 HistoryCacheSize=16M&lt;/p&gt;
&lt;p&gt;　　 HistoryIndexCacheSize=4M&lt;/p&gt;
&lt;p&gt;　　 TrendCacheSize=4M&lt;/p&gt;
&lt;p&gt;　　 ValueCacheSize=4M&lt;/p&gt;

&lt;p&gt;(3) 数据库优化&lt;/p&gt;
&lt;p&gt;　　分表：&lt;/p&gt;
&lt;p&gt;　　　　history_*&lt;/p&gt;
&lt;p&gt;　　　　trends*&lt;/p&gt;
&lt;p&gt;　　　　events*&lt;/p&gt;

&lt;h3&gt;&lt;span&gt;3、其它解决方案&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt; grafana：展示&lt;/p&gt;
&lt;p&gt; collectd：收集&lt;/p&gt;
&lt;p&gt; influxdb：存储&lt;/p&gt;

&lt;p&gt; grafana+collectd+influxdb&lt;/p&gt;

&lt;p&gt; prometheus：&lt;/p&gt;
&lt;p&gt;　　 exporter：收集&lt;/p&gt;
&lt;p&gt;　　 alertmanager:&lt;/p&gt;
&lt;p&gt; grafana：展示&lt;/p&gt;

&lt;p&gt;openfalcon&lt;/p&gt;
</description>
<pubDate>Tue, 26 Dec 2017 15:00:00 +0000</pubDate>
<dc:creator>阿龙along</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/along21/p/8119088.html</dc:identifier>
</item>
<item>
<title>代码重构的必要性分析及实施建议 - 飞鸿踏雪2018</title>
<link>http://www.cnblogs.com/toothlou/p/8120466.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/toothlou/p/8120466.html</guid>
<description>&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;代码重构在软件开发过程中，是一项重要非紧急的工作。但大多数情况下，人们都会因为其非紧急，而忽略其重要性。等到代码重构演变成重要且紧急的工作时，一般就只有放弃了，因为由于长期的技术欠债，此时代码已经变得无法扩展，成为一堆僵死的代码。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;代码重构是为了使代码具有很好的可读性、可维护性、可扩展性、可重用性。&lt;/p&gt;

&lt;p&gt;代码在演化过程中，会由于各种不同的原因，不断产生bad smell。如果不及时清理，bad smell会不断积累，代码逐渐腐化，最终导致代码不可用。&lt;/p&gt;

&lt;ol&gt;&lt;li&gt;为了赶进度，开发人员牺牲了质量。&lt;/li&gt;
&lt;li&gt;业务分析不透彻、技术设计不深入。&lt;/li&gt;
&lt;li&gt;开发人员经验和意识欠缺。&lt;/li&gt;
&lt;li&gt;对设计方案的评审和代码走查重视不够，或者根本就没有这个环节。&lt;/li&gt;
&lt;li&gt;没有专人从业务、技术、人员等各方面拉通全盘考虑。&lt;/li&gt;
&lt;li&gt;前期无法预测后面所有的变化。&lt;/li&gt;
&lt;li&gt;技术团队对使用的相关技术掌握得不够，无法最优化地使用。&lt;/li&gt;
&lt;li&gt;由于软件开发本身的客观规律，代码腐化本身就不可避免。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;开发人员应该具有随时重构的意识，只要发现bad smell，就应该尝试重构。如果因为有其它原因，暂时无法重构的，我的建议是不超过两个月进行一次系统的重构。&lt;/p&gt;

&lt;h2 id=&quot;开发人员&quot;&gt;开发人员&lt;/h2&gt;
&lt;p&gt;开发人员是重构的具体执行者，需要具备很高的素质，才能做好重构工作。个人认为，比较重要的素质包括以下几方面：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;1.技能&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;包括技术敏感度、重构的套路方法、系统思考的能力等。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;2.责任心&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;要有很好的质量意识，随时保持对代码出现bad smell的警惕。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;3.稳定的情绪&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这应该是属于管理层面的问题。如果开发人员的情绪出现的波动，就不会就主动将工作做得更好。&lt;/p&gt;
&lt;h2 id=&quot;测试人员&quot;&gt;测试人员&lt;/h2&gt;
&lt;p&gt;测试人员要与开发人员配合，通过各种测试手段和测试用例，降低或避免因重构而引入新的bug。&lt;/p&gt;
&lt;h2 id=&quot;需求分析人员&quot;&gt;需求分析人员&lt;/h2&gt;
&lt;p&gt;需求分析人员除了理清基本的业务逻辑之外，还要能够将各业务进行拆分，理清业务的本质和各业务之间的相互关系。&lt;br/&gt;当有新的需求引入，而导致之前的业务关系有变化时，尤其要重视。此时需求分析人员要与设计、开发、测试人员共同讨论，理清可能会对之前的代码产生哪些冲击，可能会带来哪方面的问题。&lt;/p&gt;
&lt;h2 id=&quot;系统设计人员&quot;&gt;系统设计人员&lt;/h2&gt;
&lt;p&gt;系统设计人员要有非常强的系统思维，同时对业务和技术都能够掌控，这样才能将各功能划分的更清晰、更合理。&lt;/p&gt;
&lt;h2 id=&quot;上级主管&quot;&gt;上级主管&lt;/h2&gt;
&lt;p&gt;上级主管不会直接参与重构，但如果上级主管不能够理解重构的重要性，则重构的工作开展到什么程度，完全由开发人员自己的经验、责任心来决定。&lt;br/&gt;虽然重构是非常重要的，但由于重构的效果是偏隐性和长期的，如果重构工作得不到上级主管的认同，则开发人员的重构积极性会被严重挫伤。&lt;br/&gt;等到代码不断腐化以至僵死，开发人员可能就会选择拍屁股走人，这时上级主管也会受到伤害。&lt;/p&gt;

&lt;p&gt;这是我个人的感受，不代表所有情况。就我个人的经验，有以下原因：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;1.人的惰性&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;虽然很多时候，开发人员都已经知道了该怎么重构，才能让代码具有更好的扩展性和重用性，但不重构而直接拷贝之前的代码再作简单的修改这样更省事。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;2.能力的限制&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;重构这个概念大家都知道，但真正要能够及时识别出代码中的重构点，并采用最优的方法进行重构，则对能力的要求非常高。不同水平的人，体现在重构上的差别非常大。&lt;br/&gt;这种能力的提升，主要是需要开发人员对自己的代码质量有很高的要求，并不断修炼。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;3.没有合适的主导人员&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;合适的主导人员，在技术上要能够识别出重构点和重构时机，并能自己或者指导开发人员进行有效的重构。在沟通协调上，要能够争取到上级主管的支持和其它业务部门的谅解。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;4.缺乏制度的保证&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果能够在制度上，将重构工作常态化，并配以合理的考核机制和主导人员，则我们开发出的软件产品将具有更高的质量、更长的生命周期、带来更大的价值。&lt;/p&gt;
</description>
<pubDate>Tue, 26 Dec 2017 14:59:00 +0000</pubDate>
<dc:creator>飞鸿踏雪2018</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/toothlou/p/8120466.html</dc:identifier>
</item>
<item>
<title>Python爬虫Scrapy(二)_入门案例 - 小破孩92</title>
<link>http://www.cnblogs.com/miqi1992/p/8120215.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/miqi1992/p/8120215.html</guid>
<description>&lt;blockquote readability=&quot;4.0217391304348&quot;&gt;
&lt;p&gt;本章将从案例开始介绍python scrapy框架，更多内容请参考:&lt;a href=&quot;http://www.cnblogs.com/miqi1992/p/8120215.html&quot;&gt;python学习指南&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;学习目标&quot;&gt;学习目标&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;创建一个Scrapy项目&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;定义提取的结构化数据(Item)&lt;/li&gt;
&lt;li&gt;编写爬取网站的Spider并提取出结构化数据(Item)&lt;/li&gt;
&lt;li&gt;编写Item Pipelines来存储提取到的Item(即结构化数据)&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;一新建项目scrapy-startproject&quot;&gt;一、新建项目(scrapy startproject)&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;在开始爬取之前，必须创建一个新的Scrapy项目。进入自定义的项目目录中，运行下列命令：&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;scrapy startproject cnblogSpider&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;其中，cnblogSpider为项目名称，可以看到将会创建一个cnblogSpider文件夹，目录结构大致如下：&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;http://oyl9rg5dr.bkt.clouddn.com/image/Spider_tree.png&quot; alt=&quot;scrapy目录结构&quot;/&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;scrapy.cfg:项目部署文件&lt;br/&gt;cnblogSpider/: 该项目的python模块，之后可以在此加入代码&lt;br/&gt;cnblogSpider/items.py: 项目中的item文件。&lt;br/&gt;cnblogSpider/pipelines.py: 项目中的Pipelines文件。&lt;br/&gt;cnblogSpider/settings.py: 项目的配置文件。&lt;br/&gt;cnblogSpider/spiders/: 放置Spider代码的目录。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;二明确目标myspideritems.py&quot;&gt;二、明确目标(mySpider/items.py)&lt;/h2&gt;
&lt;p&gt;我们打算抓取：&quot;&lt;a href=&quot;http://www.cnblogs.com/miqi1992/default.html?page=2&quot; class=&quot;uri&quot;&gt;http://www.cnblogs.com/miqi1992/default.html?page=2&lt;/a&gt;&quot; 网站里博客地址、标题、创建时间、文本。&lt;/p&gt;
&lt;ol readability=&quot;2.5&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;打开cnblogSpider目录下的items.py&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;item定义结构化数据字段，用来保存爬取到的数据，有点像Python中的dict,但是提供了一些额外的保护减少错误。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;可以通过创建一个scrapy.item类，并且定义类型为scrapy.Field的类属性来定义一个Item(可以理解成类似于ORM的映射关系)。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;接下来，创建一个CnblogspiderItem类，和模型item模型(model)。&lt;br/&gt;```python&lt;br/&gt;import scrapy&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;class CnblogspiderItem(scrapy.Item):&lt;br/&gt;# define the fields for your item here like:&lt;br/&gt;url = scrapy.Field()&lt;br/&gt;time = scrapy.Field()&lt;br/&gt;title = scrapy.Field()&lt;br/&gt;content = scrapy.Field()&lt;br/&gt;```&lt;/p&gt;
&lt;h2 id=&quot;三制作爬虫spiderscnblogsspider.py&quot;&gt;三、制作爬虫(spiders/cnblogsSpider.py)&lt;/h2&gt;
&lt;p&gt;爬虫功能主要分两步：&lt;/p&gt;
&lt;h4 id=&quot;爬数据&quot;&gt;1. 爬数据&lt;/h4&gt;
&lt;ul readability=&quot;-0.5&quot;&gt;&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;在当前目录下输入命令，将在&lt;code&gt;cnblogSpider/spiders&lt;/code&gt;目录下创建一个名为&lt;code&gt;cnblog&lt;/code&gt;的爬虫，并制定爬取域的范围：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;scrapy genspider cnblog &lt;span class=&quot;st&quot;&gt;&quot;cnblogs.com&quot;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;打开&lt;code&gt;cnblogSpider/spiders&lt;/code&gt;目录下的&lt;code&gt;cnblog&lt;/code&gt;，默认增加了下列代码：&lt;br/&gt;```python&lt;/p&gt;

&lt;p&gt;import scrapy&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;class CnblogSpider(scrapy.Spider):&lt;br/&gt;name = 'cnblog'&lt;br/&gt;allowed_domains = ['cnblogs.com']&lt;br/&gt;start_urls = ['&lt;a href=&quot;http://cnblogs.com/&quot; class=&quot;uri&quot;&gt;http://cnblogs.com/&lt;/a&gt;']&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;def parse(self, response):
    pass&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;```&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;其实也可以由我们自行创建cnblog.py并编写上面的代码，只不过使用命令可以免去编写固定代码的麻烦&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;要建立一个Spider,你必须用scrapy.Spider类创建一个子类，并确定了三个强制的属性和一个方法。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;name = &quot;&quot;&lt;/code&gt;: 这个爬虫的识别名称，必须是唯一的，在不同的爬虫必须定义不同的名字。&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;allow_domains=[]&lt;/code&gt;: 是搜索的域名范围，也就是爬虫的约束区域，规定爬虫只爬取这个域名下的网页，不存在的URL会被忽略。&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;start_urls=()&lt;/code&gt;:爬取的URL元祖/列表。爬虫从这里开始爬取数据，所以，第一次下载的数据将会从这些urls开始。其他子URL将会从这些起始URL中继承性生成。&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;parse(self, response)&lt;/code&gt;:解析的方法，每个初始URL完成下载后将被调用，调用的时候传入从每一个URL传回的Response对象来作为唯一参数，主要作用如下：
&lt;ol&gt;&lt;li&gt;负责解析返回的网页数据(respose.body),提取结构化数据(生成item)&lt;/li&gt;
&lt;li&gt;生成需要下一页的URL请求&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;将start_urls的值改为需要爬取的第一个url&lt;/strong&gt;：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;start_urls&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;http://www.cnblogs.com/miqi1992/default.html?page=2&quot;&lt;/span&gt;)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;修改parse()方法&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; parse(&lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;, response):
    filename &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;cnblog.html&quot;&lt;/span&gt;
    &lt;span class=&quot;cf&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;bu&quot;&gt;open&lt;/span&gt;(filename, &lt;span class=&quot;st&quot;&gt;'w'&lt;/span&gt;) &lt;span class=&quot;im&quot;&gt;as&lt;/span&gt; f:
        f.write(response.body)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后运行一下看看，在cnblogSpider目录下运行：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;scrapy crawl cnblog&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;是的，就是cnblog,看上面代码，它是CnblogSpider类的name属性，也就是&lt;code&gt;scrapy genspider&lt;/code&gt;命令的唯一爬虫名。&lt;/p&gt;
&lt;p&gt;运行之后，如果打印的日志出现&lt;code&gt;[scrapy]INFO: Spider closed(finished)&lt;/code&gt;，代表执行完成。之后当前文件夹中就出现了一个cnblog.html文件，里面就是我们刚刚要爬取的网页的全部源代码信息。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;co&quot;&gt;#注意，Python2.x默认编码环境是ASCII，当和取回的数据编码格式不一致时，可能会造成乱码;&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;#我们可以指定保存内容的编码格式，一般情况下，我们可以在代码最上方添加：&lt;/span&gt;
&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; os
&lt;span class=&quot;bu&quot;&gt;reload&lt;/span&gt;(sys)
sys.setdefaultencoding(&lt;span class=&quot;st&quot;&gt;'utf-8'&lt;/span&gt;)
&lt;span class=&quot;co&quot;&gt;#这三行代码是Python2.x里面解决中文编码的万能钥匙，警告这么多年的吐槽后Python3学乖了，默认编码是Unicode了&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;爬数据-1&quot;&gt;2.爬数据&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;爬取整个网页完毕，接下来就是取过程了，首先观察页面源码：&lt;br/&gt;&lt;img src=&quot;http://oyl9rg5dr.bkt.clouddn.com/image/beautiful_yuanma.png&quot; alt=&quot;页面结构&quot;/&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode html&quot;&gt;
&lt;code class=&quot;sourceCode html&quot;&gt;&lt;span class=&quot;kw&quot;&gt;&amp;lt;div&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; class=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;day&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;div&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; class=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;dayTitle&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;...&lt;span class=&quot;kw&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;div&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; class=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;postTitle&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;...&lt;span class=&quot;kw&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;div&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; class=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;postCon&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;...&lt;span class=&quot;kw&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;XPath表达式如下：
&lt;ul&gt;&lt;li&gt;所有文章：.//*[@class='day']&lt;/li&gt;
&lt;li&gt;文章发表时间：.//*[@class='dayTitle']/a/text()&lt;/li&gt;
&lt;li&gt;文章标题内容：.//*[@class='postTitle']/a/text()&lt;/li&gt;
&lt;li&gt;文章摘要内容：.//*[@class='postCon']/div/text()&lt;/li&gt;
&lt;li&gt;文章链接：.//*[@class='postTitle']&lt;a href=&quot;mailto:/a/@href&quot;&gt;/a/@href&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;是不是一目了然？直接上XPath开始提取数据吧。&lt;/strong&gt;&lt;/p&gt;
&lt;ul readability=&quot;-0.5&quot;&gt;&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;我们之前在cnblogSpider/items.py里定义了一个CnblogItem类。这里引入进来&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; cnblogSpider.items &lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; CnblogspiderItem&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;然后将我们得到的数据封装到一个&lt;code&gt;CnblogspiderItem&lt;/code&gt;对象中，可以保存每个博客的属性：&lt;br/&gt;```python&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;form cnblogSpider.items import CnblogspiderItem&lt;/p&gt;
&lt;p&gt;def parse(self, response):&lt;br/&gt;# print(response.body)&lt;br/&gt;# filename = &quot;cnblog.html&quot;&lt;br/&gt;# with open(filename, 'w') as f:&lt;br/&gt;# f.write(response.body)&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;    #存放博客的集合
    items = []

    for each in response.xpath(&quot;.//*[@class='day']&quot;):
        item = CnblogspiderItem()
        url = each.xpath('.//*[@class=&quot;postTitle&quot;]/a/@href').extract()[0]
        title = each.xpath('.//*[@class=&quot;postTitle&quot;]/a/text()').extract()[0]
        time = each.xpath('.//*[@class=&quot;dayTitle&quot;]/a/text()').extract()[0]
        content = each.xpath('.//*[@class=&quot;postCon&quot;]/div/text()').extract()[0]

        item['url'] = url
        item['title'] = title
        item['time'] = time
        item['content'] = content 
        
        items.append(item)

    #直接返回最后数据
    return items&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;```&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;我们暂时先不处理管道，后面会详细介绍。&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;保存数据&quot;&gt;保存数据&lt;/h3&gt;
&lt;p&gt;scrapy保存信息的最简单的方法主要有四种， -o 输出指定格式的文件，命令如下：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;co&quot;&gt;#json格式，默认为Unicode编码&lt;/span&gt;
scrapy crawl cnblog &lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;o cnblog.json

&lt;span class=&quot;co&quot;&gt;#json lines格式，默认为Unicode编码&lt;/span&gt;
scrapy crawl cnblog &lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;o cnblog.jsonl

&lt;span class=&quot;co&quot;&gt;#csv逗号表达式，可用excel打开&lt;/span&gt;
scrapy crawl cnblog &lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;o cnblog.csv

&lt;span class=&quot;co&quot;&gt;#xml格式&lt;/span&gt;
scrapy crawl cnblog &lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;o cnblog.xml&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;思考&quot;&gt;思考&lt;/h2&gt;
&lt;h4 id=&quot;如果将代码改成下面形式结果完全一样&quot;&gt;如果将代码改成下面形式，结果完全一样&lt;/h4&gt;
&lt;h4 id=&quot;请思考yield在这里的作用&quot;&gt;请思考yield在这里的作用：&lt;/h4&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;13&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;form cnblogSpider.items &lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; CnblogspiderItem

&lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; parse(&lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;, response):
        &lt;span class=&quot;co&quot;&gt;# print(response.body)&lt;/span&gt;
        &lt;span class=&quot;co&quot;&gt;# filename = &quot;cnblog.html&quot;&lt;/span&gt;
        &lt;span class=&quot;co&quot;&gt;# with open(filename, 'w') as f:&lt;/span&gt;
        &lt;span class=&quot;co&quot;&gt;#     f.write(response.body)&lt;/span&gt;

        &lt;span class=&quot;co&quot;&gt;#存放博客的集合&lt;/span&gt;
        &lt;span class=&quot;co&quot;&gt;# items = []&lt;/span&gt;

        &lt;span class=&quot;cf&quot;&gt;for&lt;/span&gt; each &lt;span class=&quot;op&quot;&gt;in&lt;/span&gt; response.xpath(&lt;span class=&quot;st&quot;&gt;&quot;.//*[@class='day']&quot;&lt;/span&gt;):
            item &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; CnblogspiderItem()
            url &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; each.xpath(&lt;span class=&quot;st&quot;&gt;'.//*[@class=&quot;postTitle&quot;]/a/@href'&lt;/span&gt;).extract()[&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;]
            title &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; each.xpath(&lt;span class=&quot;st&quot;&gt;'.//*[@class=&quot;postTitle&quot;]/a/text()'&lt;/span&gt;).extract()[&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;]
            time &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; each.xpath(&lt;span class=&quot;st&quot;&gt;'.//*[@class=&quot;dayTitle&quot;]/a/text()'&lt;/span&gt;).extract()[&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;]
            content &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; each.xpath(&lt;span class=&quot;st&quot;&gt;'.//*[@class=&quot;postCon&quot;]/div/text()'&lt;/span&gt;).extract()[&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;]

            item[&lt;span class=&quot;st&quot;&gt;'url'&lt;/span&gt;] &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; url
            item[&lt;span class=&quot;st&quot;&gt;'title'&lt;/span&gt;] &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; title
            item[&lt;span class=&quot;st&quot;&gt;'time'&lt;/span&gt;] &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; time
            item[&lt;span class=&quot;st&quot;&gt;'content'&lt;/span&gt;] &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; content 
            
            &lt;span class=&quot;co&quot;&gt;# items.append(item)&lt;/span&gt;
            &lt;span class=&quot;co&quot;&gt;#将获取到的数据交给pipelines&lt;/span&gt;
            &lt;span class=&quot;cf&quot;&gt;yield&lt;/span&gt; item

        &lt;span class=&quot;co&quot;&gt;#直接返回最后数据,不经过pipelines&lt;/span&gt;
        &lt;span class=&quot;co&quot;&gt;#return items&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;参考&quot;&gt;参考：&lt;/h2&gt;
&lt;ol&gt;&lt;li&gt;&lt;a href=&quot;https://scrapy-chs.readthedocs.io/zh_CN/1.0/intro/overview.html&quot;&gt;Python参考手册&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</description>
<pubDate>Tue, 26 Dec 2017 13:54:00 +0000</pubDate>
<dc:creator>小破孩92</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/miqi1992/p/8120215.html</dc:identifier>
</item>
<item>
<title>IdentityServer（12）- 使用 ASP.NET Core Identity - 晓晨Master</title>
<link>http://www.cnblogs.com/stulzq/p/8120129.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/stulzq/p/8120129.html</guid>
<description>&lt;p&gt;IdentityServer具有非常好的扩展性，其中用户及其数据（包括密码）部分你可以使用任何想要的数据库进行持久化。 如果需要一个新的用户数据库，那么ASP.NET Core Identity是你的一个选择。 本快速入门介绍了如何将ASP.NET Core Identity 和 IdentityServer4一起使用。&lt;/p&gt;
&lt;p&gt;在阅读这篇文章是，希望你能把前面的文章全部看一遍，了解基本使用和相关的理论。 这个快速入门使用ASP.NET Core Identity的方法是从Visual Studio中的ASP.NET Core Identity模板创建一个新项目。 这个新的项目将取代之前在之前的快速入门中从头开始构建的IdentityServer项目。 此解决方案中的所有其他项目（对于客户端和API）将保持不变。&lt;/p&gt;

&lt;p&gt;第一步是为您的解决方案添加一个ASP.NET Core Identity的新项目。 鉴于ASP.NET Core Identity需要大量代码，因此使用Visual Studio中的模板是最好的。 你最终将删除IdentityServer的旧项目，但有几个项目需要迁移（或按照之前的快速入门所述从头开始重新编写）。&lt;/p&gt;
&lt;p&gt;创建一个ASP.NET Core Web应用程序&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/668104/201712/668104-20171226205953088-1433623312.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;然后选择Web应用程序（MVC）&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/668104/201712/668104-20171226210100995-162278411.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;然后点击“更改身份验证”按钮，选择“个人用户账户”&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/668104/201712/668104-20171226210144338-1217407085.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;最后，你的设置应该是和下图一样：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/668104/201712/668104-20171226210240010-431521790.png&quot;/&gt;&lt;/p&gt;

&lt;p&gt;不要忘记修改hosting以在端口5000上运行。这非常重要，这将关系到继续使用现有的客户端和API项目。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/668104/201712/668104-20171226210734885-688139973.png&quot;/&gt;&lt;/p&gt;

&lt;p&gt;添加&lt;code&gt;IdentityServer4.AspNetIdentity&lt;/code&gt; NuGet包。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/668104/201712/668104-20171226211033385-277601723.png&quot;/&gt;&lt;/p&gt;

&lt;p&gt;尽管这是IdentityServer的一个新项目，但我们仍然需要与之前的快速入门一样的配置Scopes 和 Clients。 将之前快速入门的配置类（在Config.cs中）复制到此新项目中。&lt;/p&gt;
&lt;p&gt;对于现在的配置需要改变的是禁用MVC客户端的许可。 我们还没有复制之前的IdentityServer项目的许可代码，所以现在对MVC客户端进行一次修改，并设置&lt;code&gt;RequireConsent = false&lt;/code&gt;：&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;new Client
{
    ClientId = &quot;mvc&quot;,
    ClientName = &quot;MVC Client&quot;,
    AllowedGrantTypes = GrantTypes.HybridAndClientCredentials,

    RequireConsent = false,

    ClientSecrets =
    {
        new Secret(&quot;secret&quot;.Sha256())
    },

    RedirectUris           = { &quot;http://localhost:5002/signin-oidc&quot; },
    PostLogoutRedirectUris = { &quot;http://localhost:5002/signout-callback-oidc&quot; },

    AllowedScopes =
    {
        IdentityServerConstants.StandardScopes.OpenId,
        IdentityServerConstants.StandardScopes.Profile,
        &quot;api1&quot;
    },
    AllowOfflineAccess = true
}&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;和以前一样，IdentityServer需要在Startup.cs的ConfigureServices和Configure中进行配置。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;ConfigureServices&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;以前我们使用&lt;code&gt;AddTestUsers&lt;/code&gt;扩展方法用于注册用户，但在这种现在的解决方案下，我们用&lt;code&gt;AddAspNetIdentity&lt;/code&gt;替换该扩展方法来使用ASP.NET Identity用户。&lt;code&gt;AddAspNetIdentity&lt;/code&gt;扩展方法需要一个通用参数，它是你的ASP.NET Ientity用户类型（与模板中的AddIdentity方法一样）&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;public void ConfigureServices(IServiceCollection services)
{
    services.AddDbContext&amp;lt;ApplicationDbContext&amp;gt;(options =&amp;gt;
        options.UseSqlServer(Configuration.GetConnectionString(&quot;DefaultConnection&quot;)));

    services.AddIdentity&amp;lt;ApplicationUser, IdentityRole&amp;gt;()
        .AddEntityFrameworkStores&amp;lt;ApplicationDbContext&amp;gt;()
        .AddDefaultTokenProviders();

    // Add application services.
    services.AddTransient&amp;lt;IEmailSender, EmailSender&amp;gt;();

    services.AddMvc();

    // configure identity server with in-memory stores, keys, clients and scopes
    services.AddIdentityServer()
        .AddDeveloperSigningCredential()
        .AddInMemoryPersistedGrants()
        .AddInMemoryIdentityResources(Config.GetIdentityResources())
        .AddInMemoryApiResources(Config.GetApiResources())
        .AddInMemoryClients(Config.GetClients())
        .AddAspNetIdentity&amp;lt;ApplicationUser&amp;gt;();
}&lt;/code&gt;
&lt;/pre&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;我们在将Asp.Net Identity添加到DI容器中时，一定要把注册IdentityServer放在Asp.Net Identity之后，因为注册IdentityServer会覆盖Asp.Net Identity的一些配置，这个非常重要。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Configure&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;使用UseIdentityServer代替了对UseIdentity的调用&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;public void Configure(IApplicationBuilder app, IHostingEnvironment env)
{
    if (env.IsDevelopment())
    {
        app.UseDeveloperExceptionPage();
        app.UseBrowserLink();
        app.UseDatabaseErrorPage();
    }
    else
    {
        app.UseExceptionHandler(&quot;/Home/Error&quot;);
    }

    app.UseStaticFiles();

    // app.UseAuthentication(); // not needed, since UseIdentityServer adds the authentication middleware
    app.UseIdentityServer();

    app.UseMvc(routes =&amp;gt;
    {
        routes.MapRoute(
            name: &quot;default&quot;,
            template: &quot;{controller=Home}/{action=Index}/{id?}&quot;);
    });
}&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;鉴于这是一个新的ASP.NET Identity项目，您将需要创建数据库。 您可以通过从项目目录运行命令提示符并运行&lt;code&gt;dotnet ef database update -c ApplicationDbContext&lt;/code&gt;来完成此操作:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/668104/201712/668104-20171226213405010-370800566.png&quot;/&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;在VS程序包控制台使用命令也是一样的&lt;code&gt;Update-Database&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;此时，您应该能够运行项目并在数据库中创建/注册用户。 启动应用程序，并从主页点击“Register”链接：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/668104/201712/668104-20171226213702807-2007565345.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;并在注册页面上创建一个新的用户帐户：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/668104/201712/668104-20171226213725604-1924127843.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;现在你有一个用户帐户，你应该可以登录，使用客户端，并调用API。&lt;/p&gt;

&lt;p&gt;启动MVC客户端应用程序，你应该能够点击“Secure”链接登录。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/668104/201712/668104-20171226213849713-558450627.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;您应该被重定向到ASP.NET Identity登录页面。 用新创建的用户登录：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/668104/201712/668104-20171226213920120-1485123099.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;登录后，您应该跳过同意页面（给出我们上面所做的更改），并立即重定向到MVC客户端应用程序，会显示你的用户信息。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/668104/201712/668104-20171226214107323-1298549854.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;您还应该能够单击“Call API using application identity”来调用API：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/668104/201712/668104-20171226214203916-1254810901.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;现在，您已经从ASP.NET Ientity的用户登录。&lt;/p&gt;
&lt;p&gt;本文代码：&lt;a href=&quot;https://github.com/IdentityServer/IdentityServer4.Samples/tree/release/Quickstarts/6_AspNetIdentity&quot; class=&quot;uri&quot;&gt;https://github.com/IdentityServer/IdentityServer4.Samples/tree/release/Quickstarts/6_AspNetIdentity&lt;/a&gt;&lt;br/&gt;原文：&lt;a href=&quot;https://identityserver4.readthedocs.io/en/release/quickstarts/6_aspnet_identity.html&quot; class=&quot;uri&quot;&gt;https://identityserver4.readthedocs.io/en/release/quickstarts/6_aspnet_identity.html&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Tue, 26 Dec 2017 13:43:00 +0000</pubDate>
<dc:creator>晓晨Master</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/stulzq/p/8120129.html</dc:identifier>
</item>
<item>
<title>ServerSuperIO Designer IDE 发布，打造物联网通讯大脑，随心而联。附：C#驱动源代码。 - 唯笑志在</title>
<link>http://www.cnblogs.com/lsjwq/p/8120023.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/lsjwq/p/8120023.html</guid>
<description>&lt;p&gt;&lt;strong&gt;&lt;span&gt;1.概况&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt; &lt;span&gt;     &lt;strong&gt;注：ServerSuperIO Designer IDE 同行业网友随便使用，不涉及到软件使用限制的问题。&lt;/strong&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;     从2015年到现在的将近两年的时间，一直在开发、完善ServerSuperIO（SSIO）的基础框架，包括：多通讯机制、稳定性、扩展性等，没有太多时间把工作放在UI的设计与开发上，从二次开发者角度来讲易用性是短板。为了增补短板，在SSIO核心框架的基础上开发ServerSuperIO Designer IDE工具，希望能够帮助二次开发者快速上手。另外，从框架的健壮性和扩展性来讲，在Designer IDE的基础上开发HMI交互也是很容易的事，但是后期不会以这个方案开发C/S结构的人机对话组态界面，取而代之的是SSIO与SuperView的Web组态无缝对接。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;      对于物联网体系建设，通讯始终是核心部分，涉及到多种设备、多种协议、多种通讯机制、多种数据，加之5G标准的实施，通讯层需要进行改造与完善。有的组态或scada的相关产品已经不能适应日益变化的市场需求、场景需求，例如：把IO通讯的读写操作放到设备驱动或插件内部，一是本身框架的执行效率受到影响，二是不能支持多种通讯场景以及高并发的要求，三是不能进行多设备复用同一IO资源，四是底层通讯层的扩展性受到制约。SSIO充分考虑到应用场景，进行顶层框架设计，实现接口的解耦而达到整体融合，目标是实现物联网通讯层的大脑。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;      我们谈物联网、大数据、云平台等，首先就是实现节点之间互联以及解决数据的实时流通，在每个节点上逐步加入业务功能，从而实现整个系统有续扩展。流通的数据好比身体流淌的血液，业务功能好比身体的肌肉。&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/279374/201712/279374-20171226205837760-608686096.png&quot; alt=&quot;&quot;/&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt; &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;2.ServerSuperIO及Designer IDE的特点&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;ul&gt;&lt;li&gt;&lt;span&gt;轻型高性能通信框架，适用多种应用场：轮询模式、自控模式、并发模式和单例模式。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;支持协议驱动器，可以按规范写标准协议和自定义协议。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;支持发送数据缓存器，支持命令缓存重发和按优先级别发送。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;支持协议过滤器，按规则筛选数据，并且可以承继接口，自定义过滤方式。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;支持接收数据缓存器，可以缓存不符合过滤器的数据，和下次接收数据进行拼接。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;支持按设备命令优先级别进行调度设备，保证有高级别命令的驱动及时发送。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;支持一个设备驱动，同时适配串口和网络两种通讯方式，可以监视IO通道数据。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;支持一个设备驱动，在网络通讯时适配TCP Server和TCP Client两种工作模式。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;支持WebSocket，进行数据采集与转发。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;支持多设备共享同一个IO通道进行通讯。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;支持定时清理超时的网络IO通道。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;支持显示视图接口，满足不同人机对话的需求。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;支持服务组件接口，例如：4-20mA输出、LED大屏显示、短信服务、以及多功能网关服务。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;设备驱动与设备驱动，设备驱动与服务器（云端）可以实时双向交互，上传数据和指令下发。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;支持OPC Server和OPC Client。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;支持创建多服务实例，完成不同业务的拆分。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;支持跨平台部署，可以运行在Linux和Windows系统。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;支持SuperRTDB、eDna和CoreRT实时数据库。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;支持mysql、oracle、sqlserver和sqlite数据库。&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;span&gt;      Designer IDE是在ServerSuperIO基础开发的，&lt;strong&gt;支持挂载设备驱动和服务驱动、&lt;/strong&gt;&lt;strong&gt;OPC Server/Client&lt;/strong&gt;&lt;strong&gt;、数据转发客户端/&lt;/strong&gt;&lt;strong&gt;服务端、支持标准的Modbus&lt;/strong&gt;&lt;strong&gt;协议驱动&lt;/strong&gt;等。Designer IDE使整个框架操作更简单、易用。基于ServerSuperIO开发的设备驱动或服务驱动，可以挂载到IDE下运行。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/279374/201712/279374-20171226210006088-1906235299.png&quot; alt=&quot;&quot; width=&quot;1000&quot; height=&quot;600&quot;/&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;3.软件部署&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt; &lt;span&gt;      ServerSuperIO 4.0以前版本采用文件方式存储配置信息，ServerSuperIO 4.0及以后版本采用mysql存储数据，以后开发Web管理系统方便行进在线管理。部署说明，如下：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;   （1）在mysql中创建数据库实例，例如数据库名称为：ServerSuperIO&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;   （2） 在数据库实例中运行“数据库脚本\serversuperio 4.0.sql”，初始化数据表。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;   （3） 在“ServerSuperIO Designer IDE 4.0\ServerSuperIO\ SourceConfig.cfg”配置mysql的数据库实例信息。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;   （4） 运行“ServerSuperIO.Designer.exe“应用程序即可。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;4.管理设备驱动和服务驱动&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt; &lt;span&gt;       基于SSIO 4.0版本开发的设备驱动和服务驱动，可以在IDE下进行管理和运行。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;设备驱动源代码：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;a href=&quot;https://github.com/wxzz/ServerSuperIO.Driver&quot;&gt;https://github.com/wxzz/ServerSuperIO.Driver&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;服务驱动源代码：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/wxzz/ServerSuperIO.Service&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;https://github.com/wxzz/ServerSuperIO.Service&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Modbus 操作类库源代码：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;a href=&quot;https://github.com/wxzz/ServerSuperIO.Modbus&quot;&gt;https://github.com/wxzz/ServerSuperIO.Modbus&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;测试驱动源代码：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;a href=&quot;https://github.com/wxzz/TestDeviceDriver&quot;&gt;https://github.com/wxzz/TestDeviceDriver&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;模拟终端源代码：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;a href=&quot;https://github.com/wxzz/TestDevice&quot;&gt;https://github.com/wxzz/TestDevice&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;      操作界面，如下图：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/279374/201712/279374-20171226210245166-1228000914.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/279374/201712/279374-20171226210309307-1889527187.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;        服务驱动加载类型分为GlobalServer（全局服务）和InternalServer（内部服务），全局服务面向所有服务实例的设备驱动，以及之间进行数据交互；内部服务只面向同一服务实例内部的服务，以及之间进行数据交互。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;5.服务实例&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt; &lt;span&gt;      服务实例相当于容器，可以在一个服务实例中运行串口设备驱动、网络设备驱动、服务驱动以及视图驱动（IDE还没有集成视图部分）。并且在一个服务实例中支持四大通讯机制：（1）轮询模式，队列方式向设备发送请求数据命令，并且等待设备返回数据；（2）自控模式，驱动可以周期定时向设备发送请求数据命令，也可以不主动请求，被动接收数据；（3）并发模式，集中异步向所有设备发送请求数据命令，异步等待所有设备返回的数据。（4）单例模式，一个设备驱动对应所有物理设备，相当于一个单纯的通讯框架。增加服务实例，如下图：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/279374/201712/279374-20171226210650682-981401681.png&quot; alt=&quot;&quot; width=&quot;1200&quot; height=&quot;500&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;6.增加设备驱动&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt; &lt;span&gt;       在一个服务实例中可以增加N个串口设备驱动和网络设备驱动，SSIO负责整体管理与调度，以保证在通讯IO和通讯机制方面稳定运行。控制分组，当网络通讯模式下，每个设备驱动设置不同的分组，相当于每个设备驱动在独立的容器中运行，以到达到高效运行。增加设备驱动，如下图： &lt;img src=&quot;https://images2018.cnblogs.com/blog/279374/201712/279374-20171226210738604-1625298810.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;7.增加设备驱动的数据监测点&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt; &lt;span&gt;       每个设备驱动可以增加N个监测点标签（Tag），支持Modbus RTU/ASCII/TCP协议，以保证监测数据在SSIO框架内的流程与交互，后期会增加对监测点的管理工具。增加标签，如下图：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/279374/201712/279374-20171226210815651-1690189674.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;8.OPC客户端&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt; &lt;span&gt;         OPC客户端仅支持DA模式，可以读取远程OPC Server的数据信息，并保存到本地以及现次通过数据转发服务传递给其他节点。如下图：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/279374/201712/279374-20171226212323057-737759640.png&quot; alt=&quot;&quot;/&gt;  &lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;9.OPC服务端&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt; &lt;span&gt;        把设备驱动或OPC Client读上来的数据，通过OPC Server为其他系统提供可访问的接口，可以选择输出数据的设备点表或OPC Client点表。如下图： &lt;img src=&quot;https://images2018.cnblogs.com/blog/279374/201712/279374-20171226211023041-321162748.png&quot; alt=&quot;&quot; width=&quot;1000&quot; height=&quot;500&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt; &lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;10.数据转发（客户端）&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt; &lt;span&gt;      可以增加转发任务，主动连接其他服务器端，并且根据设备点表和OPC Client点表配置要转发的数据，可以实现物联网建设的级联以及直接连接云端。可以填写“站点编号”，把本机当作站点，方便云端进行管理。如下图： &lt;img src=&quot;https://images2017.cnblogs.com/blog/279374/201712/279374-20171226211359463-1703240374.png&quot; alt=&quot;&quot; width=&quot;1000&quot; height=&quot;500&quot;/&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;11.数据转发（服务端）&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt; &lt;span&gt;     支持远程客户端主动连接ServerSuperIO，并针对已经连接的终端设备（PC机、手机、Web(Socket)业务系统等）转发设备点表和OPC Client点表的数据，实现数据向终端的分发。如下图： &lt;img src=&quot;https://images2017.cnblogs.com/blog/279374/201712/279374-20171226211505604-139626458.png&quot; alt=&quot;&quot; width=&quot;1000&quot; height=&quot;408&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;12.展望&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt; &lt;span&gt;    下一篇文章已经写好《助力中小企业级连云端，促进工业互联网平台蓬勃发展，全套解决方案》，将来一体化智能网关、ServerSuperIO 4.0、实时数据库、Web组态整体进行方案介绍，实现基础技术体系化应用。&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt; &lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;&lt;span&gt;物联网&amp;amp;集成技术(.NET) QQ群：&lt;span&gt;54256083 &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;ServerSuperIO 3.0 开源地址：&lt;a href=&quot;https://github.com/wxzz/ServerSuperIO&quot; target=&quot;_blank&quot;&gt;https://github.com/wxzz/ServerSuperIO&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;

</description>
<pubDate>Tue, 26 Dec 2017 13:31:00 +0000</pubDate>
<dc:creator>唯笑志在</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/lsjwq/p/8120023.html</dc:identifier>
</item>
<item>
<title>从一篇ICLR'2017被拒论文谈起：行走在GAN的Latent Space - 達聞西</title>
<link>http://www.cnblogs.com/frombeijingwithlove/p/8120028.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/frombeijingwithlove/p/8120028.html</guid>
<description>&lt;p&gt;同步自我的知乎专栏文章：&lt;a href=&quot;https://zhuanlan.zhihu.com/p/32135185&quot; target=&quot;_blank&quot;&gt;https://zhuanlan.zhihu.com/p/32135185&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;span data-offset-key=&quot;88opg-0-0&quot;&gt;从Slerp说起&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;Editable-unstyled&quot; data-block=&quot;true&quot; data-editor=&quot;b88ib&quot; data-offset-key=&quot;481vj-0-0&quot;&gt;
&lt;div class=&quot;public-DraftStyleDefault-block public-DraftStyleDefault-ltr&quot; data-offset-key=&quot;481vj-0-0&quot;&gt;&lt;span data-offset-key=&quot;481vj-0-0&quot;&gt;ICLR'2017的投稿里，有一篇很有意思但被拒掉的投稿《&lt;a class=&quot;Link&quot; href=&quot;https://openreview.net/forum?id=SypU81Ole&quot; target=&quot;_blank&quot; data-offset-key=&quot;481vj-1-0&quot; data-editable=&quot;true&quot;&gt;&lt;span data-offset-key=&quot;481vj-1-0&quot;&gt;&lt;span data-text=&quot;true&quot;&gt;Sampling Generative Networks&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;span data-offset-key=&quot;481vj-2-0&quot;&gt;》 by &lt;a class=&quot;Link&quot; href=&quot;https://www.victoria.ac.nz/design/about/staff/tom-white&quot; target=&quot;_blank&quot; data-offset-key=&quot;481vj-3-0&quot; data-editable=&quot;true&quot;&gt;&lt;span data-offset-key=&quot;481vj-3-0&quot;&gt;&lt;span data-text=&quot;true&quot;&gt;Tom White&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;span data-offset-key=&quot;481vj-4-0&quot;&gt;。文章比较松散地讲了一些在latent space挺有用的采样和可视化技巧，其中一个重要的点是指出在GAN的latent space中，比起常用的线性插值，沿着两个采样点之间的“弧”进行插值是更合理的办法。实现的方法就是图形学里的&lt;a class=&quot;Link&quot; href=&quot;http://run.usc.edu/cs520-s12/assign2/p245-shoemake.pdf&quot; target=&quot;_blank&quot; data-offset-key=&quot;481vj-5-0&quot; data-editable=&quot;true&quot;&gt;&lt;span data-offset-key=&quot;481vj-5-0&quot;&gt;&lt;span data-text=&quot;true&quot;&gt;Slerp(spherical linear interpolation)&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;span data-offset-key=&quot;481vj-6-0&quot;&gt;在高维空间中的延伸：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;Editable-unstyled&quot; data-block=&quot;true&quot; data-editor=&quot;b88ib&quot; data-offset-key=&quot;7h504-0-0&quot;&gt;
&lt;div class=&quot;public-DraftStyleDefault-block public-DraftStyleDefault-ltr&quot; data-offset-key=&quot;7h504-0-0&quot;&gt;&lt;span class=&quot;Formula isEditable&quot;&gt;&lt;img class=&quot;Formula-image&quot; src=&quot;https://www.zhihu.com/equation?tex=%5Ctext%20%7BSlerp%7D%20(p_0%2Cp_1%3Bt)%3D%5Cfrac%7Bsin((1-t)%5COmega)%7D%7Bsin(%5COmega)%7D%20p_0%2B%5Cfrac%7Bsin(t%5COmega)%7D%7Bsin(%5COmega)%7D%20p_1&quot; alt=&quot;\text {Slerp} (p_0,p_1;t)=\frac{sin((1-t)\Omega)}{sin(\Omega)} p_0+\frac{sin(t\Omega)}{sin(\Omega)} p_1&quot; data-eeimg=&quot;true&quot;/&gt;&lt;span class=&quot;Formula-placeholder&quot; data-paste-ignore=&quot;true&quot;&gt;&lt;span data-offset-key=&quot;7h504-0-0&quot;&gt;&lt;span data-text=&quot;true&quot;&gt;\text {Slerp} (p_0,p_1;t)=\frac{sin((1-t)\Omega)}{sin(\Omega)} p_0+\frac{sin(t\Omega)}{sin(\Omega)} p_1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;Editable-unstyled&quot; data-block=&quot;true&quot; data-editor=&quot;b88ib&quot; data-offset-key=&quot;3l0mf-0-0&quot; readability=&quot;7&quot;&gt;
&lt;p&gt;&lt;span data-offset-key=&quot;3l0mf-0-0&quot;&gt;形象理解并不难，以wiki上的图为例：&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;div&gt;&lt;img class=&quot;Image FocusPlugin--unfocused Image--isBlock&quot; src=&quot;https://pic3.zhimg.com/v2-ceb75827e97b87d397a48e9033276a0d_b.jpg&quot; alt=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1024&quot; data-rawheight=&quot;650&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;Editable-unstyled&quot; data-block=&quot;true&quot; data-editor=&quot;b88ib&quot; data-offset-key=&quot;5qc74-0-0&quot; readability=&quot;7&quot;&gt;
&lt;p&gt;&lt;span data-offset-key=&quot;5qc74-0-0&quot;&gt;使用Slerp比起纯线性插值的好处在哪里呢？作者原文这样解释：&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;Editable-unstyled&quot; data-block=&quot;true&quot; data-editor=&quot;b88ib&quot; data-offset-key=&quot;67rjf-0-0&quot; readability=&quot;16&quot;&gt;
&lt;p&gt;&lt;span data-offset-key=&quot;67rjf-0-0&quot;&gt;&quot;&lt;span data-offset-key=&quot;67rjf-0-1&quot;&gt;Frequently linear interpolation is used, which is easily understood and implemented. But this is often inappropriate as the latent spaces of most generative models are high dimensional (&amp;gt; 50 dimensions) with a Gaussian or uniform prior. In such a space, linear interpolation traverses locations that are extremely unlikely given the prior. As a concrete example, consider a 100 dimensional space with the Gaussian prior µ=0, σ=1. Here all random vectors will generally a length very close to 10 (standard deviation &amp;lt; 1). However, linearly interpolating between any two will usually result in a &quot;tent-pole&quot; effect as the magnitude of the vector decreases from roughly 10 to 7 at the midpoint, which is over 4 standard deviations away from the expected length.&lt;span data-offset-key=&quot;67rjf-0-2&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;Editable-unstyled&quot; data-block=&quot;true&quot; data-editor=&quot;b88ib&quot; data-offset-key=&quot;fm2g4-0-0&quot; readability=&quot;8&quot;&gt;
&lt;p&gt;&lt;span data-offset-key=&quot;fm2g4-0-0&quot;&gt;就是说在高维(&amp;gt;50)的空间里做线性插值，会路过一些不太可能路过的位置，就好像数据都分布在帐篷布上，但是线性插值走的是帐篷杆。&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;Editable-unstyled&quot; data-block=&quot;true&quot; data-editor=&quot;b88ib&quot; data-offset-key=&quot;bjmrt-0-0&quot;&gt;
&lt;div class=&quot;public-DraftStyleDefault-block public-DraftStyleDefault-ltr&quot; data-offset-key=&quot;bjmrt-0-0&quot;&gt;&lt;span data-offset-key=&quot;bjmrt-0-0&quot;&gt;要更具体理解这个现象，还要从GAN中常用的prior distribution说起。在GAN中，最常用的是uniform和Gaussian（感觉现在Gaussian居多）。不管是哪种prior，对于一个n维样本 &lt;span class=&quot;Formula isEditable&quot;&gt;&lt;img class=&quot;Formula-image&quot; src=&quot;https://www.zhihu.com/equation?tex=%5Cleft(%20x_1%2Cx_2%2C%5Cdots%2Cx_n%20%5Cright)&quot; alt=&quot;\left( x_1,x_2,\dots,x_n \right)&quot; data-eeimg=&quot;true&quot;/&gt;&lt;span class=&quot;Formula-placeholder&quot; data-paste-ignore=&quot;true&quot;&gt;&lt;span data-offset-key=&quot;bjmrt-1-0&quot;&gt;&lt;span data-text=&quot;true&quot;&gt;\left( x_1,x_2,\dots,x_n \right) &lt;span data-offset-key=&quot;bjmrt-2-0&quot;&gt;，到中心的欧式距离为：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;Editable-unstyled&quot; data-block=&quot;true&quot; data-editor=&quot;b88ib&quot; data-offset-key=&quot;cf7ph-0-0&quot;&gt;
&lt;div class=&quot;public-DraftStyleDefault-block public-DraftStyleDefault-ltr&quot; data-offset-key=&quot;cf7ph-0-0&quot;&gt;&lt;span class=&quot;Formula isEditable&quot;&gt;&lt;img class=&quot;Formula-image&quot; src=&quot;https://www.zhihu.com/equation?tex=d%3D%5Csqrt%7Bx_1%5E2%2Bx_2%5E2%2B%5Cdots%2Bx_n%5E2%7D&quot; alt=&quot;d=\sqrt{x_1^2+x_2^2+\dots+x_n^2}&quot; data-eeimg=&quot;true&quot;/&gt;&lt;span class=&quot;Formula-placeholder&quot; data-paste-ignore=&quot;true&quot;&gt;&lt;span data-offset-key=&quot;cf7ph-0-0&quot;&gt;&lt;span data-text=&quot;true&quot;&gt;d=\sqrt{x_1^2+x_2^2+\dots+x_n^2}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;Editable-unstyled&quot; data-block=&quot;true&quot; data-editor=&quot;b88ib&quot; data-offset-key=&quot;7gpoi-0-0&quot;&gt;
&lt;div class=&quot;public-DraftStyleDefault-block public-DraftStyleDefault-ltr&quot; data-offset-key=&quot;7gpoi-0-0&quot;&gt;&lt;span data-offset-key=&quot;7gpoi-0-0&quot;&gt;而通常GAN的采样空间维度还算高，这个时候我们把d的平方看作是一连串n个独立同分布的随机变量 &lt;span class=&quot;Formula isEditable&quot;&gt;&lt;img class=&quot;Formula-image&quot; src=&quot;https://www.zhihu.com/equation?tex=x_1%5E2%2Cx_2%5E2%2C%5Cdots%2Cx_n%5E2&quot; alt=&quot;x_1^2,x_2^2,\dots,x_n^2&quot; data-eeimg=&quot;true&quot;/&gt;&lt;span class=&quot;Formula-placeholder&quot; data-paste-ignore=&quot;true&quot;&gt;&lt;span data-offset-key=&quot;7gpoi-1-0&quot;&gt;&lt;span data-text=&quot;true&quot;&gt;x_1^2,x_2^2,\dots,x_n^2 &lt;span data-offset-key=&quot;7gpoi-2-0&quot;&gt;的和，则由&lt;a class=&quot;Link&quot; href=&quot;https://en.wikipedia.org/wiki/Central_limit_theorem&quot; target=&quot;_blank&quot; data-offset-key=&quot;7gpoi-3-0&quot; data-editable=&quot;true&quot;&gt;&lt;span data-offset-key=&quot;7gpoi-3-0&quot;&gt;&lt;span data-text=&quot;true&quot;&gt;中心极限定理&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;span data-offset-key=&quot;7gpoi-4-0&quot;&gt;可知d的平方近似服从正态分布（实际上是&lt;a class=&quot;Link&quot; href=&quot;https://zh.wikipedia.org/wiki/%E5%8D%A1%E6%96%B9%E5%88%86%E4%BD%88&quot; target=&quot;_blank&quot; data-offset-key=&quot;7gpoi-5-0&quot; data-editable=&quot;true&quot;&gt;&lt;span data-offset-key=&quot;7gpoi-5-0&quot;&gt;&lt;span data-text=&quot;true&quot;&gt;Chi-square分布&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;span data-offset-key=&quot;7gpoi-6-0&quot;&gt;）：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;Editable-unstyled&quot; data-block=&quot;true&quot; data-editor=&quot;b88ib&quot; data-offset-key=&quot;bgq8b-0-0&quot;&gt;
&lt;div class=&quot;public-DraftStyleDefault-block public-DraftStyleDefault-ltr&quot; data-offset-key=&quot;bgq8b-0-0&quot;&gt;&lt;span class=&quot;Formula isEditable&quot;&gt;&lt;img class=&quot;Formula-image&quot; src=&quot;https://www.zhihu.com/equation?tex=N%5Cleft(%20n%5Cmu%2C%20n%5Csigma%5E2%20%5Cright)&quot; alt=&quot;N\left( n\mu, n\sigma^2 \right)&quot; data-eeimg=&quot;true&quot;/&gt;&lt;span class=&quot;Formula-placeholder&quot; data-paste-ignore=&quot;true&quot;&gt;&lt;span data-offset-key=&quot;bgq8b-0-0&quot;&gt;&lt;span data-text=&quot;true&quot;&gt;N\left( n\mu, n\sigma^2 \right)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;Editable-unstyled&quot; data-block=&quot;true&quot; data-editor=&quot;b88ib&quot; data-offset-key=&quot;chp9d-0-0&quot;&gt;
&lt;div class=&quot;public-DraftStyleDefault-block public-DraftStyleDefault-ltr&quot; data-offset-key=&quot;chp9d-0-0&quot;&gt;&lt;span data-offset-key=&quot;chp9d-0-0&quot;&gt;考虑很常见的100维标准正态分布作为prior的情况，平方之后就是k=1的Chi-square分布，均值为1，方差为2。所以每个样本到原点的距离的平方近似服从N(100, 200)，标准差~14.14，如果认为 &lt;span class=&quot;Formula isEditable&quot;&gt;&lt;img class=&quot;Formula-image&quot; src=&quot;https://www.zhihu.com/equation?tex=%5Cdelta&quot; alt=&quot;\delta&quot; data-eeimg=&quot;true&quot;/&gt;&lt;span class=&quot;Formula-placeholder&quot; data-paste-ignore=&quot;true&quot;&gt;&lt;span data-offset-key=&quot;chp9d-1-0&quot;&gt;&lt;span data-text=&quot;true&quot;&gt;\delta &lt;span data-offset-key=&quot;chp9d-2-0&quot;&gt;=14.14/100已经足够小，使 &lt;span class=&quot;Formula isEditable&quot;&gt;&lt;img class=&quot;Formula-image&quot; src=&quot;https://www.zhihu.com/equation?tex=%5Csqrt%7B1%2B%5Cdelta%7D%5Capprox1%2B%5Cfrac%201%202%5Cdelta&quot; alt=&quot;\sqrt{1+\delta}\approx1+\frac 1 2\delta&quot; data-eeimg=&quot;true&quot;/&gt;&lt;span class=&quot;Formula-placeholder&quot; data-paste-ignore=&quot;true&quot;&gt;&lt;span data-offset-key=&quot;chp9d-3-0&quot;&gt;&lt;span data-text=&quot;true&quot;&gt;\sqrt{1+\delta}\approx1+\frac 1 2\delta &lt;span data-offset-key=&quot;chp9d-4-0&quot;&gt;，则d也可以近似看作是一个高斯分布（实际上是&lt;a class=&quot;Link&quot; href=&quot;https://en.wikipedia.org/wiki/Chi_distribution&quot; target=&quot;_blank&quot; data-offset-key=&quot;chp9d-5-0&quot; data-editable=&quot;true&quot;&gt;&lt;span data-offset-key=&quot;chp9d-5-0&quot;&gt;&lt;span data-text=&quot;true&quot;&gt;Chi分布&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;span data-offset-key=&quot;chp9d-6-0&quot;&gt;），均值为10，标准差为0.707，就是作者在原文中说的情况。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;Editable-unstyled&quot; data-block=&quot;true&quot; data-editor=&quot;b88ib&quot; data-offset-key=&quot;bro2l-0-0&quot; readability=&quot;11&quot;&gt;
&lt;p&gt;&lt;span data-offset-key=&quot;bro2l-0-0&quot;&gt;uniform prior的情况也类似，不过更加复杂，因为均匀分布并非各向同性。在高维空间中，一个超立方体形状如果脑补一下就是一个球周边长了很多尖刺，每个尖刺就是象限中的一个极端值。具体推导我不会，不过写个程序很容易模拟。采10万个样本得到的结果是100维，每个维度[-1, 1]的均匀分布的prior，样本到中心的距离平均值约为5.77，标准差约0.258。所以无论是哪种情况，高维空间里的样本都有一个特点：远离中心，且集中分布在均值附近。所以线性插值就会像在帐篷杆上插值一样，路过真实样本出现概率极低的区域。&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;Editable-unstyled&quot; data-block=&quot;true&quot; data-editor=&quot;b88ib&quot; data-offset-key=&quot;3kkpi-0-0&quot; readability=&quot;10&quot;&gt;
&lt;p&gt;&lt;span data-offset-key=&quot;3kkpi-0-0&quot;&gt;原文还提到了在100维Gaussian prior的情况下，线性插值取到的点到中心的距离会从10到7，这怎么理解呢？我的数学水平脑补不了这件事，定性来看随机采两个样本，这两个样本趋于垂直的倾向会很高，因为要趋于同向或者反向需要每一维的距离都足够近或足够远，这个概率会很低。定量的话可以写个程序模拟：&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;public-DraftStyleDefault-block public-DraftStyleDefault-ltr&quot; data-offset-key=&quot;cik76-0-0&quot; readability=&quot;18&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;56&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; numpy
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; matplotlib &lt;span&gt;import&lt;/span&gt;&lt;span&gt; pyplot


&lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; dist_o2l(p1, p2):
    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; distance from origin to the line defined by (p1, p2)&lt;/span&gt;
    p12 = p2 -&lt;span&gt; p1
    u12 &lt;/span&gt;= p12 /&lt;span&gt; numpy.linalg.norm(p12)
    l_pp &lt;/span&gt;= numpy.dot(-&lt;span&gt;p1, u12)
    pp &lt;/span&gt;= l_pp*u12 +&lt;span&gt; p1
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; numpy.linalg.norm(pp)

dim &lt;/span&gt;= 100&lt;span&gt;
N &lt;/span&gt;= 100000&lt;span&gt;

rvs &lt;/span&gt;=&lt;span&gt; []
dists2l &lt;/span&gt;=&lt;span&gt; []
&lt;/span&gt;&lt;span&gt;for&lt;/span&gt; i &lt;span&gt;in&lt;/span&gt;&lt;span&gt; range(N):
    u &lt;/span&gt;=&lt;span&gt; numpy.random.randn(dim)
    v &lt;/span&gt;=&lt;span&gt; numpy.random.randn(dim)
    rvs.extend([u, v])
    dists2l.append(dist_o2l(u, v))

dists &lt;/span&gt;= [numpy.linalg.norm(x) &lt;span&gt;for&lt;/span&gt; x &lt;span&gt;in&lt;/span&gt;&lt;span&gt; rvs]

&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Distances to samples, mean: {}, std: {}&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;.format(numpy.mean(dists), numpy.std(dists)))
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Distances to lines, mean: {}, std: {}&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;.format(numpy.mean(dists2l), numpy.std(dists2l)))

fig, (ax0, ax1) &lt;/span&gt;= pyplot.subplots(ncols=2, figsize=(11, 5&lt;span&gt;))
ax0.hist(dists, &lt;/span&gt;100, normed=1, color=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;g&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
ax1.hist(dists2l, &lt;/span&gt;100, normed=1, color=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;b&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
pyplot.show()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;结果如下：&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;div&gt;&lt;img class=&quot;Image FocusPlugin--unfocused Image--isBlock&quot; src=&quot;https://pic3.zhimg.com/v2-90a0d82093c2a56f65870ce1029ef7db_b.jpg&quot; alt=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;928&quot; data-rawheight=&quot;457&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;Editable-unstyled&quot; data-block=&quot;true&quot; data-editor=&quot;b88ib&quot; data-offset-key=&quot;5430k-0-0&quot;&gt;
&lt;div class=&quot;public-DraftStyleDefault-block public-DraftStyleDefault-ltr&quot; data-offset-key=&quot;5430k-0-0&quot;&gt;&lt;span data-offset-key=&quot;5430k-0-0&quot;&gt;左边是在latent space里随机采样的样本到中心距离的分布，右边是原点在随机采样的两个样本所在直线上的投影点到中心距离的分布，也就是线性插值中到中心最近点的距离的分布。可以看到随机采样并进行线性插值的办法还真的是容易路过样本几乎不可能出现的区域（距原点距离5~7.5）。可是《&lt;a class=&quot;Link&quot; href=&quot;https://openreview.net/forum?id=SypU81Ole&quot; target=&quot;_blank&quot; data-offset-key=&quot;5430k-1-0&quot; data-editable=&quot;true&quot;&gt;&lt;span data-offset-key=&quot;5430k-1-0&quot;&gt;&lt;span data-text=&quot;true&quot;&gt;Sampling Generative Networks&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;span data-offset-key=&quot;5430k-2-0&quot;&gt;》被拒的comment里有一句：&quot;neither the reviewers nor I were convinced that spherical interpolation makes more sense than linear interpolation&quot;。就这一点来说，感觉Tom White有些冤枉，虽然确实不是什么眼前一亮的大改进，但是有理有据。那为什么reviewer们没觉得比线性插值好多少呢？原因可能就是：&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;span data-offset-key=&quot;a401p-0-0&quot;&gt;基于ReLU网络的线性&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;Editable-unstyled&quot; data-block=&quot;true&quot; data-editor=&quot;b88ib&quot; data-offset-key=&quot;37sr5-0-0&quot;&gt;
&lt;div class=&quot;public-DraftStyleDefault-block public-DraftStyleDefault-ltr&quot; data-offset-key=&quot;37sr5-0-0&quot;&gt;&lt;span data-offset-key=&quot;37sr5-0-0&quot;&gt;CNN在12年的时候一鸣惊人，应该说ReLU一系的激活函数扮演了一个至关重要的角色：让深层网络可训练。后续的无论是LeakyReLU、ELU还是Swish等等，大于0的部分都是非常线性的。所以虽然非线性变换（激活函数）是神经网络作为&lt;a class=&quot;Link&quot; href=&quot;http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.441.7873&amp;amp;rep=rep1&amp;amp;type=pdf&quot; target=&quot;_blank&quot; data-offset-key=&quot;37sr5-1-0&quot; data-editable=&quot;true&quot;&gt;&lt;span data-offset-key=&quot;37sr5-1-0&quot;&gt;&lt;span data-text=&quot;true&quot;&gt;universal approximator&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;span data-offset-key=&quot;37sr5-2-0&quot;&gt;的基础，但基于ReLU系的神经网络其实是线性程度很高的。对于常见判别式网络，Ian Goodfellow认为这种线性再加上Distributed Representation的超强表达能力是使得网络容易被对抗样本攻击的基础（详见&lt;a class=&quot;Link&quot; href=&quot;https://arxiv.org/abs/1412.6572&quot; target=&quot;_blank&quot; data-offset-key=&quot;37sr5-3-0&quot; data-editable=&quot;true&quot;&gt;&lt;span data-offset-key=&quot;37sr5-3-0&quot;&gt;&lt;span data-text=&quot;true&quot;&gt;这篇&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;span data-offset-key=&quot;37sr5-4-0&quot;&gt;），并据此发明了Fast Gradient Sign方法快速生成对抗样本。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;Editable-unstyled&quot; data-block=&quot;true&quot; data-editor=&quot;b88ib&quot; data-offset-key=&quot;3cr7h-0-0&quot; readability=&quot;8&quot;&gt;
&lt;p&gt;&lt;span data-offset-key=&quot;3cr7h-0-0&quot;&gt;那么基于ReLU的CNN的线性有多强呢？先来看生成式网络，以DCGAN为例，示意图如下&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;div&gt;&lt;img class=&quot;Image FocusPlugin--unfocused Image--isBlock&quot; src=&quot;https://pic3.zhimg.com/v2-a7918aa3ee3b7adb8e6c24ae126c7502_b.jpg&quot; alt=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;600&quot; data-rawheight=&quot;250&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;Editable-unstyled&quot; data-block=&quot;true&quot; data-editor=&quot;b88ib&quot; data-offset-key=&quot;bdtal-0-0&quot; readability=&quot;10&quot;&gt;
&lt;p&gt;&lt;span data-offset-key=&quot;bdtal-0-0&quot;&gt;从结构上来看，DCGAN比常见的判别式网络更加线性，因为连max pooling都没了，不那么线性的部分就只有最后输出图片的Tanh。尤其是从latent space到第一组feature map这一步，常见的实现方法是把100维的噪声看成是100个channel，1x1的feature map，然后直接用没有bias的transposed convolution上采样，是一个纯线性变换！定性来看，如果整个后续的网络部分线性程度也足够高，则在latent space的任意样本，同时对所有维度进行缩放的话，得到的图像应该差不多就是同一幅图不同的对比度。&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;div&gt;&lt;img class=&quot;Image FocusPlugin--unfocused Image--isBlock&quot; src=&quot;https://pic3.zhimg.com/v2-3704932f71294ced882779871935f990_b.jpg&quot; alt=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;768&quot; data-rawheight=&quot;64&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;div&gt;&lt;img class=&quot;Image FocusPlugin--unfocused Image--isBlock&quot; src=&quot;https://pic1.zhimg.com/v2-7e8a202c859cd43662601f9c5b2a7059_b.jpg&quot; alt=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;768&quot; data-rawheight=&quot;64&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;div&gt;&lt;img class=&quot;Image FocusPlugin--unfocused Image--isBlock&quot; src=&quot;https://pic1.zhimg.com/v2-94c450980c1034b61a7b65af49b8b191_b.jpg&quot; alt=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;768&quot; data-rawheight=&quot;64&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;div&gt;&lt;img class=&quot;Image FocusPlugin--unfocused Image--isBlock&quot; src=&quot;https://pic3.zhimg.com/v2-d880cb08e74223680d759363d52ac943_b.jpg&quot; alt=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;768&quot; data-rawheight=&quot;64&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;div&gt;&lt;img class=&quot;Image FocusPlugin--unfocused Image--isBlock&quot; src=&quot;https://pic2.zhimg.com/v2-76a31a6c0bc99a1be36cc273278d260b_b.jpg&quot; alt=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;768&quot; data-rawheight=&quot;64&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;div&gt;&lt;img class=&quot;Image FocusPlugin--unfocused Image--isBlock&quot; src=&quot;https://pic1.zhimg.com/v2-a1f6bd993672699f2827dedebd774c6b_b.jpg&quot; alt=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;768&quot; data-rawheight=&quot;64&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;Editable-unstyled&quot; data-block=&quot;true&quot; data-editor=&quot;b88ib&quot; data-offset-key=&quot;assq3-0-0&quot; readability=&quot;10&quot;&gt;
&lt;p&gt;&lt;span data-offset-key=&quot;assq3-0-0&quot;&gt;1、3、5行是线性插值的结果，2、4、6是Slerp结果，仔细看的话会发现线性插值结果的中间部分和Slerp相比，颜色淡了那么一点点，除此以外差别微乎其微。也难怪Reviewer会觉得Tom White的结论不令人信服，如果没有对比，线性插值的结果看起来很好。并且由于高维空间中样本远离中心的特性，所以线性插值的均匀性和Slerp也差不多。不过有了上面的分析，再回过头来看DCGAN原文中的线性插值结果，好像中间部分看起来颜色还真是有点淡……&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;div&gt;&lt;img class=&quot;Image FocusPlugin--unfocused Image--isBlock&quot; src=&quot;https://pic1.zhimg.com/v2-6af91cd0367bf5231ec9dfa4484e4ccf_b.jpg&quot; alt=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;532&quot; data-rawheight=&quot;536&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;Editable-unstyled&quot; data-block=&quot;true&quot; data-editor=&quot;b88ib&quot; data-offset-key=&quot;12i1n-0-0&quot; readability=&quot;8&quot;&gt;
&lt;p&gt;&lt;span data-offset-key=&quot;12i1n-0-0&quot;&gt;直接对比Slerp和线性插值并不是很有说服力，我们可以做一个更暴力的实验，让样本沿着一个随机方向从原点出发一直到距离原点20的位置，结果如下：&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;div&gt;&lt;img class=&quot;Image FocusPlugin--unfocused Image--isBlock&quot; src=&quot;https://pic1.zhimg.com/v2-943b494e7350195481b7cfef21ecbb6e_b.jpg&quot; alt=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;768&quot; data-rawheight=&quot;64&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;div&gt;&lt;img class=&quot;Image FocusPlugin--unfocused Image--isBlock&quot; src=&quot;https://pic2.zhimg.com/v2-4bf2f93d13d642741eb6e2cc83801ece_b.jpg&quot; alt=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;768&quot; data-rawheight=&quot;64&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;div&gt;&lt;img class=&quot;Image FocusPlugin--unfocused Image--isBlock&quot; src=&quot;https://pic2.zhimg.com/v2-4bdd375b349513cfd220d83ab09f702f_b.jpg&quot; alt=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;768&quot; data-rawheight=&quot;64&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;Editable-unstyled&quot; data-block=&quot;true&quot; data-editor=&quot;b88ib&quot; data-offset-key=&quot;epog2-0-0&quot; readability=&quot;10&quot;&gt;
&lt;p&gt;&lt;span data-offset-key=&quot;epog2-0-0&quot;&gt;还是挺一目了然的，随着latent sample渐渐远离原点，图像的变化基本上是对比度越来越高，直至饱和。起码就人眼来说，这是很线性的。那么实际上呢？如果去掉Tanh层，随机取一些样本和输出图像随机位置的值，画出随着latent sample距中心距离变化的趋势，大概是下面这样：&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;div&gt;&lt;img class=&quot;Image FocusPlugin--unfocused Image--isBlock&quot; src=&quot;https://pic3.zhimg.com/v2-0b7d6610fd16b90bad4548368b8b938b_b.jpg&quot; alt=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1013&quot; data-rawheight=&quot;675&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;Editable-unstyled&quot; data-block=&quot;true&quot; data-editor=&quot;b88ib&quot; data-offset-key=&quot;ajnsc-0-0&quot; readability=&quot;9&quot;&gt;
&lt;p&gt;&lt;span data-offset-key=&quot;ajnsc-0-0&quot;&gt;可以看到，只有在距离中心很远的时候，线性才比较明显，这和Goodfellow论文中的图性质一致。在样本最集中的10附近，线性程度一般般，甚至有些输出都不是单调的。&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;Editable-unstyled&quot; data-block=&quot;true&quot; data-editor=&quot;b88ib&quot; data-offset-key=&quot;3ccke-0-0&quot; readability=&quot;8&quot;&gt;
&lt;p&gt;&lt;span data-offset-key=&quot;3ccke-0-0&quot;&gt;那么更进一步，如果latent sample只产生在超球面上呢？或是到原点距离均匀分布呢？不妨试一试，结果如下：&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;Editable-unstyled&quot; data-block=&quot;true&quot; data-editor=&quot;b88ib&quot; data-offset-key=&quot;crcfa-0-0&quot; readability=&quot;7&quot;&gt;
&lt;p&gt;&lt;span data-offset-key=&quot;crcfa-0-0&quot;&gt;1) 在到原点距离为10的超球面上产生latent sample&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;div&gt;&lt;img class=&quot;Image FocusPlugin--unfocused Image--isBlock&quot; src=&quot;https://pic4.zhimg.com/v2-4567a4611e392382a3bac127837c0e9c_b.jpg&quot; alt=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;768&quot; data-rawheight=&quot;64&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;div&gt;&lt;img class=&quot;Image FocusPlugin--unfocused Image--isBlock&quot; src=&quot;https://pic4.zhimg.com/v2-a0af1732a9174c0c6e1a72554ffb62c9_b.jpg&quot; alt=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;768&quot; data-rawheight=&quot;64&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;div&gt;&lt;img class=&quot;Image FocusPlugin--unfocused Image--isBlock&quot; src=&quot;https://pic3.zhimg.com/v2-bae6626390f4ace5b5bb91a5567f3efb_b.jpg&quot; alt=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;768&quot; data-rawheight=&quot;64&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;div&gt;&lt;img class=&quot;Image FocusPlugin--unfocused Image--isBlock&quot; src=&quot;https://pic4.zhimg.com/v2-02e6494f61e7ac9ccf9759f2a46add49_b.jpg&quot; alt=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;990&quot; data-rawheight=&quot;668&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;Editable-unstyled&quot; data-block=&quot;true&quot; data-editor=&quot;b88ib&quot; data-offset-key=&quot;bb6a-0-0&quot; readability=&quot;8&quot;&gt;
&lt;p&gt;&lt;span data-offset-key=&quot;bb6a-0-0&quot;&gt;肉眼看上去还是很线性，输出曲线的结果看上去和直接Gaussian采样差别也不大。&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;Editable-unstyled&quot; data-block=&quot;true&quot; data-editor=&quot;b88ib&quot; data-offset-key=&quot;at4tn-0-0&quot; readability=&quot;7&quot;&gt;
&lt;p&gt;&lt;span data-offset-key=&quot;at4tn-0-0&quot;&gt;2) latent sample到原点距离从0到10均匀分布&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;div&gt;&lt;img class=&quot;Image FocusPlugin--unfocused Image--isBlock&quot; src=&quot;https://pic4.zhimg.com/v2-d5a6abc84fb7017d57bfe2e56ddcc97c_b.jpg&quot; alt=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;768&quot; data-rawheight=&quot;64&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;div&gt;&lt;img class=&quot;Image FocusPlugin--unfocused Image--isBlock&quot; src=&quot;https://pic1.zhimg.com/v2-e4ff2112ec39cf7de1460dba100a0c61_b.jpg&quot; alt=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;768&quot; data-rawheight=&quot;64&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;div&gt;&lt;img class=&quot;Image FocusPlugin--unfocused Image--isBlock&quot; src=&quot;https://pic1.zhimg.com/v2-c71f018c9bdea1b5f99b60136c39e0dc_b.jpg&quot; alt=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;768&quot; data-rawheight=&quot;64&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;div&gt;&lt;img class=&quot;Image FocusPlugin--unfocused Image--isBlock&quot; src=&quot;https://pic4.zhimg.com/v2-971514176aa0b22eba6c92cb5f3cce9c_b.jpg&quot; alt=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;984&quot; data-rawheight=&quot;667&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;Editable-unstyled&quot; data-block=&quot;true&quot; data-editor=&quot;b88ib&quot; data-offset-key=&quot;fktpb-0-0&quot; readability=&quot;9&quot;&gt;
&lt;p&gt;&lt;span data-offset-key=&quot;fktpb-0-0&quot;&gt;从曲线来看和前两种情况明显不一样了，生成图像质量也下降了一些。但是从产生的图片来看线性仍然较强，至少到中心距离&amp;lt;10的部分，图片“身份”无区分度的结论还是基本成立。&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;Editable-unstyled&quot; data-block=&quot;true&quot; data-editor=&quot;b88ib&quot; data-offset-key=&quot;2busb-0-0&quot; readability=&quot;10&quot;&gt;
&lt;p&gt;&lt;span data-offset-key=&quot;2busb-0-0&quot;&gt;这是个很有趣的现象，无论是Gaussian采样，还是1)和2)的情况，对人眼来说，这种很粗略程度的线性已经足够让沿着某个方向上的latent sample产生从“身份”角度看上去无差别的样本了。不管怎么样，基于这个现象，得到一个粗略的推论：&lt;span data-offset-key=&quot;2busb-0-1&quot;&gt;GAN的Latent Space只有沿着超球面的变化才是有区分力的&lt;span data-offset-key=&quot;2busb-0-2&quot;&gt;。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;span data-offset-key=&quot;ddf67-0-0&quot;&gt;在Great Circle上行走&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;Editable-unstyled&quot; data-block=&quot;true&quot; data-editor=&quot;b88ib&quot; data-offset-key=&quot;d37v8-0-0&quot;&gt;
&lt;div class=&quot;public-DraftStyleDefault-block public-DraftStyleDefault-ltr&quot; data-offset-key=&quot;d37v8-0-0&quot;&gt;&lt;span data-offset-key=&quot;d37v8-0-0&quot;&gt;经过一番分析，得到了一个好像也没什么用的结论。再回来看最初的问题，线性插值会路过低概率区域（虽然并没有什么影响），Slerp比线性插值也没什么视觉上的本质提高，那么有没有什么更优雅地行走在latent space的方法呢？我觉得是：&lt;a class=&quot;Link&quot; href=&quot;https://en.wikipedia.org/wiki/Great_circle&quot; target=&quot;_blank&quot; data-offset-key=&quot;d37v8-1-0&quot; data-editable=&quot;true&quot;&gt;&lt;span data-offset-key=&quot;d37v8-1-0&quot;&gt;&lt;span data-text=&quot;true&quot;&gt;Great Circle&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;span data-offset-key=&quot;d37v8-2-0&quot;&gt;。比起Slerp，Greate Circle通常要经过多3倍的距离，虽然这和Slerp其实也没什么本质区别，但是感觉上要更屌，而且沿着great circle走起点和终点是同一个点，这感觉更屌。&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;Editable-unstyled&quot; data-block=&quot;true&quot; data-editor=&quot;b88ib&quot; data-offset-key=&quot;43u4c-0-0&quot; readability=&quot;10&quot;&gt;
&lt;p&gt;&lt;span data-offset-key=&quot;43u4c-0-0&quot;&gt;产生great circle路径比Slerp要简单得多：1）根据所使用分布产生一个超球面半径r（按前面讨论，Gaussian的话就是chi分布，或者Gaussian近似）；2）产生一个随机向量u和一个与u垂直的随机向量v，然后把u和v所在平面作为great circle所在平面；3）u和v等效于一个坐标系的两轴，所以great circle上任一点就用在u和v上的投影表示就可以，最后在乘上r就得到了行走在great circle上的采样。代码如下：&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;public-DraftStyleDefault-block public-DraftStyleDefault-ltr&quot; data-offset-key=&quot;fiejt-0-0&quot; readability=&quot;24&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;68&quot;&gt;
&lt;pre&gt;
&lt;span&gt;from&lt;/span&gt; &lt;span&gt;__future__&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; print_function
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; argparse
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; os
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; numpy
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; scipy.stats &lt;span&gt;import&lt;/span&gt;&lt;span&gt; chi
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; torch.utils.data
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; torch.autograd &lt;span&gt;import&lt;/span&gt;&lt;span&gt; Variable
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; networks &lt;span&gt;import&lt;/span&gt;&lt;span&gt; NetG
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; PIL &lt;span&gt;import&lt;/span&gt;&lt;span&gt; Image

parser &lt;/span&gt;=&lt;span&gt; argparse.ArgumentParser()
parser.add_argument(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;--nz&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, type=int, default=100, help=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;size of the latent z vector&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
parser.add_argument(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;--niter&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, type=int, default=10, help=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;how many paths&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
parser.add_argument(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;--n_steps&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, type=int, default=23, help=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;steps to walk&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
parser.add_argument(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;--ngf&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, type=int, default=64&lt;span&gt;)
parser.add_argument(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;--ngpu&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, type=int, default=1, help=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;number of GPUs to use&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
parser.add_argument(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;--netG&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, default=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;netG_epoch_49.pth&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, help=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;trained params for G&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)

opt &lt;/span&gt;=&lt;span&gt; parser.parse_args()
output_dir &lt;/span&gt;= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;gcircle-walk&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
os.system(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;mkdir -p {}&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;.format(output_dir))
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(opt)

ngpu &lt;/span&gt;=&lt;span&gt; int(opt.ngpu)
nz &lt;/span&gt;=&lt;span&gt; int(opt.nz)
ngf &lt;/span&gt;=&lt;span&gt; int(opt.ngf)
nc &lt;/span&gt;= 3&lt;span&gt;

netG &lt;/span&gt;=&lt;span&gt; NetG(ngf, nz, nc, ngpu)
netG.load_state_dict(torch.load(opt.netG, map_location&lt;/span&gt;=&lt;span&gt;lambda&lt;/span&gt;&lt;span&gt; storage, loc: storage))
netG.eval()
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(netG)

&lt;/span&gt;&lt;span&gt;for&lt;/span&gt; j &lt;span&gt;in&lt;/span&gt;&lt;span&gt; range(opt.niter):
    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; step 1&lt;/span&gt;
    r = chi.rvs(df=100&lt;span&gt;)

    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; step 2&lt;/span&gt;
    u = numpy.random.normal(0, 1&lt;span&gt;, nz)
    w &lt;/span&gt;= numpy.random.normal(0, 1&lt;span&gt;, nz)
    u &lt;/span&gt;/=&lt;span&gt; numpy.linalg.norm(u)
    w &lt;/span&gt;/=&lt;span&gt; numpy.linalg.norm(w)

    v &lt;/span&gt;= w - numpy.dot(u, w) *&lt;span&gt; u
    v &lt;/span&gt;/=&lt;span&gt; numpy.linalg.norm(v)

    ndimgs &lt;/span&gt;=&lt;span&gt; []
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; i &lt;span&gt;in&lt;/span&gt;&lt;span&gt; range(opt.n_steps):
        t &lt;/span&gt;= float(i) /&lt;span&gt; float(opt.n_steps)
        &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; step 3&lt;/span&gt;
        z = numpy.cos(t * 2 * numpy.pi) * u + numpy.sin(t * 2 * numpy.pi) *&lt;span&gt; v
        z &lt;/span&gt;*=&lt;span&gt; r

        noise_t &lt;/span&gt;= z.reshape((1, nz, 1, 1&lt;span&gt;))
        noise_t &lt;/span&gt;=&lt;span&gt; torch.FloatTensor(noise_t)
        noisev &lt;/span&gt;=&lt;span&gt; Variable(noise_t)
        fake &lt;/span&gt;=&lt;span&gt; netG(noisev)
        timg &lt;/span&gt;=&lt;span&gt; fake[0]
        timg &lt;/span&gt;=&lt;span&gt; timg.data

        timg.add_(&lt;/span&gt;1).div_(2&lt;span&gt;)
        ndimg &lt;/span&gt;= timg.mul(255).clamp(0, 255).byte().permute(1, 2&lt;span&gt;, 0).numpy()
        ndimgs.append(ndimg)

    &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;exporting {} ...&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;.format(j))
    ndimg &lt;/span&gt;=&lt;span&gt; numpy.hstack(ndimgs)

    im &lt;/span&gt;=&lt;span&gt; Image.fromarray(ndimg)
    filename &lt;/span&gt;= os.sep.join([output_dir, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;gc-{:0&amp;gt;6d}.png&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;.format(j)])
    im.save(filename)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;结果如下：&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;div&gt;&lt;img class=&quot;Image FocusPlugin--unfocused Image--isBlock&quot; src=&quot;https://pic4.zhimg.com/v2-2909d4e3dc2bddef46e08c87fbedb33c_b.jpg&quot; alt=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1472&quot; data-rawheight=&quot;64&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;div&gt;&lt;img class=&quot;Image FocusPlugin--unfocused Image--isBlock&quot; src=&quot;https://pic1.zhimg.com/v2-644fe01567a23d7e0131a85fba00eebd_b.jpg&quot; alt=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1472&quot; data-rawheight=&quot;64&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;div&gt;&lt;img class=&quot;Image FocusPlugin--unfocused Image--isBlock&quot; src=&quot;https://pic3.zhimg.com/v2-5adb40e9c81065b7354e3450cb0e94f4_b.jpg&quot; alt=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1472&quot; data-rawheight=&quot;64&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;div&gt;&lt;img class=&quot;Image FocusPlugin--unfocused Image--isBlock&quot; src=&quot;https://pic1.zhimg.com/v2-3085837cb193773dacf46e775b76c4eb_b.jpg&quot; alt=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1472&quot; data-rawheight=&quot;64&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;div&gt;&lt;img class=&quot;Image FocusPlugin--unfocused Image--isBlock&quot; src=&quot;https://pic2.zhimg.com/v2-42459eff4e544c224d2f471de055bacc_b.jpg&quot; alt=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1472&quot; data-rawheight=&quot;64&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;div&gt;&lt;img class=&quot;Image FocusPlugin--unfocused Image--isBlock&quot; src=&quot;https://pic3.zhimg.com/v2-7ea0201e9956d5b3126784359687e470_b.jpg&quot; alt=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1472&quot; data-rawheight=&quot;64&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;div&gt;&lt;img class=&quot;Image FocusPlugin--unfocused Image--isBlock&quot; src=&quot;https://pic1.zhimg.com/v2-a088473ce1c57ad8fd077220838fc95e_b.jpg&quot; alt=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1472&quot; data-rawheight=&quot;64&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;div&gt;&lt;img class=&quot;Image FocusPlugin--unfocused Image--isBlock&quot; src=&quot;https://pic4.zhimg.com/v2-18e47d4ca4d667861831fd24e7e872da_b.jpg&quot; alt=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1472&quot; data-rawheight=&quot;64&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


</description>
<pubDate>Tue, 26 Dec 2017 13:07:00 +0000</pubDate>
<dc:creator>達聞西</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/frombeijingwithlove/p/8120028.html</dc:identifier>
</item>
<item>
<title>Tomcat配置(二)：tomcat配置文件server.xml详解和部署简介 - 骏马金龙</title>
<link>http://www.cnblogs.com/f-ck-need-u/p/8120008.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/f-ck-need-u/p/8120008.html</guid>
<description>&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;a&gt;&lt;span&gt;本文目录：&lt;/span&gt;&lt;/a&gt;&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;a href=&quot;http://www.cnblogs.com/f-ck-need-u/p/8120008.html#blog1&quot;&gt;&lt;span&gt;1. 入门示例：虚拟主机提供web服务&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;a href=&quot;http://www.cnblogs.com/f-ck-need-u/p/8120008.html#blog2&quot;&gt;&lt;span&gt;2. tomcat体系结构基本说明&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;a href=&quot;http://www.cnblogs.com/f-ck-need-u/p/8120008.html#blog3&quot;&gt;&lt;span&gt;3. tomcat的appBase和docBase详细说明&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;a href=&quot;http://www.cnblogs.com/f-ck-need-u/p/8120008.html#blog4&quot;&gt;&lt;span&gt;4. webapp体系结构&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;a href=&quot;http://www.cnblogs.com/f-ck-need-u/p/8120008.html#blog5&quot;&gt;&lt;span&gt;5. tomcat进阶：tomcat配置文件server.xml详解&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　&lt;a href=&quot;http://www.cnblogs.com/f-ck-need-u/p/8120008.html#blog5.1&quot;&gt;&lt;span&gt;5.1 顶级元素server&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　&lt;a href=&quot;http://www.cnblogs.com/f-ck-need-u/p/8120008.html#blog5.2&quot;&gt;&lt;span&gt;5.2 顶级元素service&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　&lt;a href=&quot;http://www.cnblogs.com/f-ck-need-u/p/8120008.html#blog5.3&quot;&gt;&lt;span&gt;5.3 执行器executor&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　&lt;a href=&quot;http://www.cnblogs.com/f-ck-need-u/p/8120008.html#blog5.4&quot;&gt;&lt;span&gt;5.4 连接器connector&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　&lt;a href=&quot;http://www.cnblogs.com/f-ck-need-u/p/8120008.html#blog5.5&quot;&gt;&lt;span&gt;5.5 容器类engine&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　&lt;a href=&quot;http://www.cnblogs.com/f-ck-need-u/p/8120008.html#blog5.6&quot;&gt;&lt;span&gt;5.6 容器类host&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　&lt;a href=&quot;http://www.cnblogs.com/f-ck-need-u/p/8120008.html#blog5.7&quot;&gt;&lt;span&gt;5.7 容器类context&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　&lt;a href=&quot;http://www.cnblogs.com/f-ck-need-u/p/8120008.html#blog5.8&quot;&gt;&lt;span&gt;5.8 被嵌套类realm&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　&lt;a href=&quot;http://www.cnblogs.com/f-ck-need-u/p/8120008.html#blog5.9&quot;&gt;&lt;span&gt;5.9 被嵌套类valve&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;


&lt;p&gt;该示例通过设置虚拟主机来提供web服务，因为是入门示例，所以设置极其简单，只需修改$CATALINA_HOME/conf/server.xml文件为如下内容即可。其中大部分都采用了默认设置，只是在engine容器中添加了两个Host容器。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&lt;span class=&quot;hljs-pi&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;Server&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;port&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;8005&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;shutdown&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;SHUTDOWN&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;Listener&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;className&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;org.apache.catalina.startup.VersionLoggerListener&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;Listener&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;className&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;org.apache.catalina.core.AprLifecycleListener&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;SSLEngine&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;on&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;Listener&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;className&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;org.apache.catalina.core.JreMemoryLeakPreventionListener&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;Listener&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;className&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;org.apache.catalina.mbeans.GlobalResourcesLifecycleListener&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;Listener&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;className&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;org.apache.catalina.core.ThreadLocalLeakPreventionListener&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;GlobalNamingResources&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;Resource&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;UserDatabase&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;auth&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;Container&quot;&lt;/span&gt;
              &lt;span class=&quot;hljs-attribute&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;org.apache.catalina.UserDatabase&quot;&lt;/span&gt;
              &lt;span class=&quot;hljs-attribute&quot;&gt;description&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;User database that can be updated and saved&quot;&lt;/span&gt;
              &lt;span class=&quot;hljs-attribute&quot;&gt;factory&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;org.apache.catalina.users.MemoryUserDatabaseFactory&quot;&lt;/span&gt;
              &lt;span class=&quot;hljs-attribute&quot;&gt;pathname&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;conf/tomcat-users.xml&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;GlobalNamingResources&lt;/span&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;Service&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;Catalina&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;Connector&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;port&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;8080&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;protocol&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;HTTP/1.1&quot;&lt;/span&gt;
               &lt;span class=&quot;hljs-attribute&quot;&gt;connectionTimeout&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;20000&quot;&lt;/span&gt;
               &lt;span class=&quot;hljs-attribute&quot;&gt;redirectPort&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;8443&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;enableLookups&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;false&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;Connector&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;port&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;8009&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;protocol&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;AJP/1.3&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;redirectPort&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;8443&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;
   &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;Engine&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;Catalina&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;defaultHost&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;localhost&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;
     &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;Realm&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;className&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;org.apache.catalina.realm.LockOutRealm&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;Realm&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;className&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;org.apache.catalina.realm.UserDatabaseRealm&quot;&lt;/span&gt;
               &lt;span class=&quot;hljs-attribute&quot;&gt;resourceName&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;UserDatabase&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;Realm&lt;/span&gt;&amp;gt;&lt;/span&gt;


      &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;Host&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;www.longshuai.com&quot;&lt;/span&gt;  &lt;span class=&quot;hljs-attribute&quot;&gt;appBase&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;/www/longshuai&quot;&lt;/span&gt;
            &lt;span class=&quot;hljs-attribute&quot;&gt;unpackWARs&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;true&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;autoDeploy&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;true&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;Context&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;path&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;docBase&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;/www/longshuai&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;reloadable&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;true&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;Context&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;path&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;/xuexi&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;docBase&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;xuexi&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;reloadable&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;true&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;Valve&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;className&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;org.apache.catalina.valves.AccessLogValve&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;directory&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;logs&quot;&lt;/span&gt;
               &lt;span class=&quot;hljs-attribute&quot;&gt;prefix&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;longshuai_access_log&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;suffix&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;.txt&quot;&lt;/span&gt;
               &lt;span class=&quot;hljs-attribute&quot;&gt;pattern&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;%h %l %u %t &amp;amp;quot;%r&amp;amp;quot; %s %b&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;Host&lt;/span&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;Host&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;www.xiaofang.com&quot;&lt;/span&gt;  &lt;span class=&quot;hljs-attribute&quot;&gt;appBase&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;/www/xiaofang&quot;&lt;/span&gt;
            &lt;span class=&quot;hljs-attribute&quot;&gt;unpackWARs&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;true&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;autoDeploy&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;true&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;Context&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;path&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;docBase&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;/www/xiaofang&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;reloadable&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;true&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;Context&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;path&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;/xuexi&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;docBase&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;xuexi&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;reloadable&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;true&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;Valve&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;className&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;org.apache.catalina.valves.AccessLogValve&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;directory&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;logs&quot;&lt;/span&gt;
               &lt;span class=&quot;hljs-attribute&quot;&gt;prefix&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;xiaofang_access_log&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;suffix&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;.txt&quot;&lt;/span&gt;
               &lt;span class=&quot;hljs-attribute&quot;&gt;pattern&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;%h %l %u %t &amp;amp;quot;%r&amp;amp;quot; %s %b&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;Host&lt;/span&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;Host&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;localhost&quot;&lt;/span&gt;  &lt;span class=&quot;hljs-attribute&quot;&gt;appBase&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;webapps&quot;&lt;/span&gt;
            &lt;span class=&quot;hljs-attribute&quot;&gt;unpackWARs&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;true&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;autoDeploy&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;true&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;Valve&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;className&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;org.apache.catalina.valves.AccessLogValve&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;directory&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;logs&quot;&lt;/span&gt;
               &lt;span class=&quot;hljs-attribute&quot;&gt;prefix&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;localhost_access_log&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;suffix&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;.txt&quot;&lt;/span&gt;
               &lt;span class=&quot;hljs-attribute&quot;&gt;pattern&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;%h %l %u %t &amp;amp;quot;%r&amp;amp;quot; %s %b&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;Host&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;Engine&lt;/span&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;Service&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;Server&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;除了engine中定义的默认localhost虚拟主机，另外布置了两个虚拟主机www.longshuai.com和www.xiaofang.com，它们的程序目录分别为/www/longshuai和/www/xiaofang，所以需要提前建立好这两个目录。另外，在context中定义了docBase，对于uri路径/xuexi，它的文件系统路径为/www/{longshuai,xiaofang}/xuexi目录，所以也要在上面两个程序根目录中定义好xuexi目录。除此之外，还分别为这3个虚拟主机定义了日志，它们的路径为相对路径logs，相对于$CATALINA_HOME。&lt;/p&gt;
&lt;p&gt;再提供appBase目录和docBase目录。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;mkdir&lt;/span&gt; -p /www/{longshuai,xiaofang}/xuexi
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;再提供测试用的index.jsp文件。内容大致如下，分别复制到/www/{longshuai,xiaofang}/和/www/{longshuai,xiaofang}/xuexi/下，并将out.println的输出内容分别稍作修改，使能够区分读取的是哪个index.jsp。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;%@&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;page&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;language&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;java&quot;&lt;/span&gt; %&amp;gt;&lt;/span&gt;
&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;%@&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;page&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;import&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;java.util.*&quot;&lt;/span&gt; %&amp;gt;&lt;/span&gt;
&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;out.println&lt;/span&gt;(&quot;&lt;span class=&quot;hljs-attribute&quot;&gt;hello&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;world&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;longshuai&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;Root&lt;/span&gt;&quot;); %&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;最后重启catalina。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;catalina.sh &lt;span class=&quot;hljs-operator&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;stop&lt;/span&gt;
catalina.sh &lt;span class=&quot;hljs-keyword&quot;&gt;start&lt;/span&gt;&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;再测试主机上添加www.{longshuai,xiaofang}.com的host记录。例如在windows上，在C:\Windows\System32\drivers\etc\hosts中添加如下记录：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;192.168.100.22 www.longshuai.com www.xiaofang.com
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;在浏览器中进行测试，结果如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/733013/201710/733013-20171024165317223-249472817.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt;如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/733013/201710/733013-20171023161736816-1039069357.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;tomcat高度模块化，各个模块之间有嵌套的父子关系。如果使用配置文件来描述，可以大致简化为如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;server&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;service&lt;/span&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;connector&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;PORT&lt;/span&gt; /&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;engine&lt;/span&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;host&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;www.a.com&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;appBase&lt;/span&gt;=/&lt;span class=&quot;hljs-attribute&quot;&gt;www&lt;/span&gt;/&lt;span class=&quot;hljs-attribute&quot;&gt;a&lt;/span&gt; &amp;gt;&lt;/span&gt;
                &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;path&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;docBase&lt;/span&gt;=/&lt;span class=&quot;hljs-attribute&quot;&gt;www&lt;/span&gt;/&lt;span class=&quot;hljs-attribute&quot;&gt;a&lt;/span&gt; /&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;path&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;/xuexi&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;docBase&lt;/span&gt;=/&lt;span class=&quot;hljs-attribute&quot;&gt;www&lt;/span&gt;/&lt;span class=&quot;hljs-attribute&quot;&gt;a&lt;/span&gt;/&lt;span class=&quot;hljs-attribute&quot;&gt;xuexi&lt;/span&gt; /&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;host&lt;/span&gt;&amp;gt;&lt;/span&gt;

            &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;host&lt;/span&gt;&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;context&lt;/span&gt; /&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;host&lt;/span&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;engine&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;service&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;server&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;其中： &lt;strong&gt;server&lt;/strong&gt;组件是工作在后台管理tomcat实例的组件，可以监听一个端口，从此端口上可以远程向该实例发送shutdown关闭命令。&lt;br/&gt;&lt;strong&gt;service&lt;/strong&gt;组件是一个逻辑组件，绑定connector和containor，有了service表示可以向外提供服务，就像是一般的daemon类服务的service。&lt;br/&gt;&lt;strong&gt;connector&lt;/strong&gt;组件是服务监听组件，用于监听外界请求并建立TCP连接，然后将连接交给containor，之后可以从此连接传输数据，例如接收http请求，发送http响应等。&lt;br/&gt;&lt;strong&gt;containor&lt;/strong&gt;是容器，在配置文件中没有体现出来，它包含4个容器类组件：engine容器、host容器、context容器和wrapper容器。&lt;br/&gt;&lt;strong&gt;engine&lt;/strong&gt;容器用于从connector组件处接收已建立的TCP连接，还用于接收客户端发送的http请求并分析请求，然后按照分析的结果将相关参数传递给匹配出的虚拟主机。engine还用于指定默认的虚拟主机。&lt;br/&gt;&lt;strong&gt;host&lt;/strong&gt;容器定义虚拟主机，由于tomcat主要是作为servlet容器的，所以为每个web应用程序指定了它们的根目录appBase。&lt;br/&gt;&lt;strong&gt;context&lt;/strong&gt;容器对应servlet容器的处理过程。还可以指定相关的wrapper容器类，当然一般都采用默认的标准wrapper类。&lt;/p&gt;
&lt;p&gt;最后当请求处理完毕后，context将响应数据返回给host，再返回给engine，再返回给connector，最后返回给客户端。&lt;/p&gt;
&lt;p&gt;撇开tomcat作为servlet容器的行为。它和apache、nginx的功能大致都能对应上。例如以nginx为例，以下是nginx提供web服务时的配置结构：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&lt;span class=&quot;hljs-title&quot;&gt;server&lt;/span&gt; {
    &lt;span class=&quot;hljs-title&quot;&gt;listen&lt;/span&gt; PORT;
    &lt;span class=&quot;hljs-title&quot;&gt;server_name&lt;/span&gt; www.a.com;   
    &lt;span class=&quot;hljs-title&quot;&gt;location&lt;/span&gt; / {             
            &lt;span class=&quot;hljs-title&quot;&gt;root&lt;/span&gt;   html;     
        }
    &lt;span class=&quot;hljs-title&quot;&gt;location&lt;/span&gt; /xuexi {        
            &lt;span class=&quot;hljs-title&quot;&gt;root&lt;/span&gt;   html/xuexi;
        }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;connetcor组件类似于nginx的listen指令。host容器类似于nginx的server指令，host容器中的name属性相当于nginx的server_name指令。engine组件则没有对应配置项，不过在nginx同样有engine的功能，例如默认的虚拟主机，分析URL来判断请求交给哪个虚拟主机处理等。context容器相当于location指令，context容器的path属性相当于location的uri匹配路径，docBase相当于location的中的root指令，即DocumentRoot。&lt;/p&gt;
&lt;p&gt;tomcat作为简单的web服务程序大致如此，但它的核心毕竟是处理servlet和jsp，它必须得管理好每个webapp。因此，对于tomcat来说，必须要掌握部署webapp的方式。在tomcat上部署webapp时，必须要理解context的概念。对于tomcat而言，&lt;strong&gt;每个context都应该算是一个webapp，其路径由docBase决定，该目录存放的是归档的war文件或未归档的webapp相关文件，而host容器中的appBase则是虚拟主机整理webapp的地方，一个appBase下可以有多个webapp，即多个context&lt;/strong&gt;。&lt;/p&gt;


&lt;p&gt;这两货虽然意义很明确，但&quot;潜规则&quot;很严重。以下面的配置为例。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;host&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;www.a.com&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;appBase&lt;/span&gt;=/&lt;span class=&quot;hljs-attribute&quot;&gt;www&lt;/span&gt;/&lt;span class=&quot;hljs-attribute&quot;&gt;a&lt;/span&gt; &amp;gt;&lt;/span&gt;
    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;path&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;docBase&lt;/span&gt;=/&lt;span class=&quot;hljs-attribute&quot;&gt;www&lt;/span&gt;/&lt;span class=&quot;hljs-attribute&quot;&gt;a&lt;/span&gt; /&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;path&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;/xuexi&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;docBase&lt;/span&gt;=/&lt;span class=&quot;hljs-attribute&quot;&gt;www&lt;/span&gt;/&lt;span class=&quot;hljs-attribute&quot;&gt;a&lt;/span&gt;/&lt;span class=&quot;hljs-attribute&quot;&gt;xuexi&lt;/span&gt; /&amp;gt;&lt;/span&gt;
&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;host&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;appBase是虚拟主机存放webapp的目录，它可以是相对路径，也可以是绝对路径。如果是相对路径，则相对于&lt;strong&gt;$CATALINA_HOME&lt;/strong&gt;，严格并准确地说是$CATALINA_BASE。&lt;/p&gt;
&lt;p&gt;path是URI的匹配路径，相当于nginx的location后的路径。tomcat要求每个虚拟主机&lt;strong&gt;必须配置一个空字符串的path&lt;/strong&gt;，该条context作为URI无法被明确匹配时的默认context，它相当于nginx中&lt;code&gt;location / {}&lt;/code&gt;的作用。&lt;/p&gt;
&lt;p&gt;docBase则是每个webapp的存放目录(或者是已归档的war文件)，它可以是相对路径，也可以是绝对路径，提供相对路径时它相对于appBase。该目录一般在appBase的目录下，但并不规定一定要放在appBase下。对于web服务来说，它相当于nginx的root指令，但对于webapp来说，一个context就相当于一个webapp，而docBase正是webapp的路径。&lt;/p&gt;
&lt;p&gt;&quot;潜规则&quot;在于默认的context如何提供。有以下几种情况：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;明确定义了&lt;code&gt;&amp;lt;context path=&quot;&quot; docBase=webappPATH&amp;gt;&lt;/code&gt;，此时默认context的处理路径为webappPATH。&lt;/li&gt;
&lt;li&gt;明确定义了&lt;code&gt;&amp;lt;context path=&quot;&quot;&amp;gt;&lt;/code&gt;，但却没给定docBase属性，此时该默认context处理路径为appBase/ROOT目录，注意ROOT为大写。&lt;/li&gt;
&lt;li&gt;完全没有定义&lt;code&gt;path=&quot;&quot;&lt;/code&gt;的context时，即host容器中没有明确的path=&quot;&quot;，此时将隐式定义一个默认context，处理路径为appBase/ROOT目录。&lt;/li&gt;
&lt;li&gt;定义了path但没有定义docBase属性时，docBase将根据path推断出它的路径。推断的规则如下：(注：此时推断的不是默认context，而是对应context的docbase)&lt;/li&gt;
&lt;/ol&gt;&lt;pre&gt;
&lt;code&gt;context path    context name    推断出的docBase路径
--------------------------------------------------
&lt;span class=&quot;hljs-regexp&quot;&gt;/foo            /&lt;/span&gt;foo            foo    
/foo/bar        /foo/bar        foo/bar
Empty &lt;span class=&quot;hljs-built_in&quot;&gt;String&lt;/span&gt;    Empty &lt;span class=&quot;hljs-built_in&quot;&gt;String&lt;/span&gt;    ROOT
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;显然，没有给定path=&quot;&quot;或缺少docbase时，都以ROOT作为目录。以下是几个定义示例：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;# 虚拟主机中没有定义任何context，将以appBase下的ROOT作为默认处理路径
&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;Host&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;appBase&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;webapps&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;Host&lt;/span&gt;&amp;gt;&lt;/span&gt;

# 没有定义path=&quot;&quot;的context，但定义了path非空的context，也将以ROOT作为默认处理路径
# 如果下面的Context容器中省略docBase属性，则推断出该context的docBase路径为appBase/xuexi
&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;Host&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;appBase&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;webapps&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;Context&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;path&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;/xuexi&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;docBase&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;webappPATH&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;
&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;Host&lt;/span&gt;&amp;gt;&lt;/span&gt;

# 某个context定义了path=&quot;&quot;，该context将作为默认context
# 但该默认context如果没有定义docBase，将推断出其docBase路径为appBase/ROOT
&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;Host&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;appBase&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;webapps&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;Context&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;path&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;docBase&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;webappPATH&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;
&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;Host&lt;/span&gt;&amp;gt;&lt;/span&gt;

# 某个context定义了path=&quot;&quot;，该context将作为默认context
# 下面的默认context明确定义了docBase
&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;Host&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;appBase&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;webapps&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;Context&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;path&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;docBase&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;webappPATH&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;
&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;Host&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;


&lt;p&gt;webapp有特定的组织格式，是一种层次型目录结构，通常包含了servlet代码文件、jsp页面文件、类文件、部署描述符文件等等。&lt;/p&gt;
&lt;p&gt;这些文件可能是以目录的形式存放，也可能会打包成各种归档格式的文件，如jar、war等。但jsp有规定，在web应用程序的根目录下，一般要有下面几个目录：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;/WEB-INF：此webapp的私有资源目录，从浏览器上是无法访问此目录资源的，通常web.xml和context.xml均放置于此目录&lt;/li&gt;
&lt;li&gt;/WEB-INF/classes：此webapp自有的类&lt;/li&gt;
&lt;li&gt;/WEB-INF/lib：此webapp自有能够打包为jar格式的类&lt;/li&gt;
&lt;li&gt;/META-INF：并非标准的webapp目录，有的应用程序才有。当该应用程序想独立定义自己的context.xml时可放入此目录，也是私有目录。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;每个webapp要想被tomcat加载，一种方法是程序目录放在$catalina.home/webapps下，另一种方式是配置该webapp相关的context配置，使tomcat能找到此webapp。之所以可以直接放在$catalina.home/webapps下，是因为默认的localhost虚拟主机的appBase=&quot;webapps&quot;，该目录下的所有内容它都可以自动查找，不过要注意，此时要想访问此webapp只能通过虚拟主机是localhost。&lt;/p&gt;
&lt;p&gt;简单部署示例：&lt;/p&gt;
&lt;p&gt;(1)对于war类归档程序：将归档文件复制到$CATALINA_BASE/webapps/目录中，并重启tomcat即可，tomcat会自动展开war归档。例如官方提供了一个sample.war作为tomcat学习初级示例( &lt;span&gt;&lt;a href=&quot;https://tomcat.apache.org/tomcat-8.5-doc/appdev/sample/sample.war&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;https://tomcat.apache.org/tomcat-8.5-doc/appdev/sample/sample.war&lt;/span&gt;&lt;/a&gt;&lt;/span&gt; )，下载后只需将其放入webapps下即可。&lt;/p&gt;
&lt;p&gt;(2)在程序的开发过程中，很多时候是未归档程序，这时可以手动创建目录来实现部署。需要创建的目录有webapps/yourapp，此目录下还要创建WEB-INF目录，在WEB-INF目录中还要创建classes和lib目录。然后将jsp文件放在对应目录下即可，如写一个测试的index.jsp放在yourapp目录下。&lt;/p&gt;


&lt;p&gt;tomcat配置文件中配置的是各个组件的属性，&lt;strong&gt;全局&lt;/strong&gt;配置文件为$CATALINA_HOME/conf/server.xml，主要的组件有以下几项：Server,Service,Connector,Engine,Host,Alias,Context,Valve等。配置完配置文件后需要重启tomcat，但在启动后一定要检查tomcat是否启动成功，因为即使出错，很多时候它都不会报错，可从监听端口判断。&lt;/p&gt;
&lt;p&gt;配置方法见&lt;span&gt;&lt;a href=&quot;http://tomcat.apache.org/tomcat-8.5-doc/config/index.html&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;官方手册&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;，在页面的左边有各个组件的链接。&lt;/p&gt;
&lt;p&gt;tomcat的配置文件都是xml文件，以下是xml文件的常见规则：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;文件第一行设置xml标识，表示该文件是xml格式的文件。例如&lt;code&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;xml文件的注释方法为&lt;code&gt;&amp;lt;!-- XXX --&amp;gt;&lt;/code&gt;，这可以是单行注释，也可以多行注释，只要前后注释符号能对应上，中间的内容都是注释。&lt;/li&gt;
&lt;li&gt;定义属性时有两种方式：单行定义和多行定义。例如：&lt;/li&gt;
&lt;/ol&gt;&lt;pre&gt;
&lt;code&gt;
&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;NAME&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;key&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;value&lt;/span&gt; /&amp;gt;&lt;/span&gt;


&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;NAME&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;key&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;value&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;NAME&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;下面个组件的配置中有些地方使用了相对于$CATALINA_BASE的相对路径，它和$CATALINA_HOME小有区别。如果只有一个tomcat实例，则它们是等价的，都是tomcat的安装路径。如果有多个tomcat实例，则$CATALINA_HOME表示的是安装路径，而$CATALINA_BASE表示的是各实例所在根目录。关于tomcat多实例，见&lt;span&gt;&lt;a href=&quot;http://tomcat.apache.org/tomcat-8.5-doc/RUNNING.txt&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;running.txt&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;中对应的说明。&lt;/p&gt;

&lt;h2 id=&quot;5-1-server&quot;&gt;5.1 顶级元素server&lt;/h2&gt;
&lt;p&gt;server组件定义的是一个tomcat实例。默认定义如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;Server&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;port&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;8005&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;shutdown&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;SHUTDOWN&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;Server&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;它默认监听在8005端口以接收shutdown命令。要启用多个tomcat实例，将它们监听在不同的端口即可。这个端口的定义为管理员提供一个关闭实例的便捷途径，可以直接telnet至此端口使用SHUTDOWN命令关闭此实例。不过基于安全角度的考虑，通常不允许远程进行。&lt;/p&gt;
&lt;p&gt;Server的相关属性：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;className&lt;/code&gt;：用于实现此组件的java类的名称，这个类必须实现接口org.apache.catalina.Server。不给定该属性时将采用默认的标准类org.apache.catalina.core.StandardServer；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;address&lt;/code&gt;：监听端口绑定的地址。如不指定，则默认为Localhost，即只能在localhost上发送SHUTDOWN命令；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;port&lt;/code&gt;：接收shutdown指令的端口，默认仅允许通过本机访问，默认为8005；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;shutdown&lt;/code&gt;：通过TCP/IP连接发往此Server用于实现关闭tomcat实例的命令字符串。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;在server组件中可嵌套一个或多个service组件。&lt;/p&gt;

&lt;h2 id=&quot;5-2-service&quot;&gt;5.2 顶级元素service&lt;/h2&gt;
&lt;p&gt;定义了service就能提供服务了。service组件中封装connector和containor，它同时也表示将此service中的connector和containor绑定起来，即由它们组成一个service向外提供服务。默认定义如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;Service&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;Catalina&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;Service&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Service相关的属性：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;className&lt;/code&gt;：用于实现service的类名，这个类必须实现org.apache.catalina.Service接口。不给定该属性时将采用默认的标准类org.apache.catalina.core.StandardService。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;name&lt;/code&gt;：此service的显示名称，该名称主要用于在日志中进行标识service。一般来说无关紧要，默认为Catalina。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;5-3-executor&quot;&gt;5.3 执行器executor&lt;/h2&gt;
&lt;p&gt;执行器定义tomcat各组件之间共享的线程池。在以前，每个connector都会独自创建自己的线程池，但现在，可以定义一个线程池，各组件都可以共享该线程池，不过主要是为各connector之间提供共享。注意，&lt;strong&gt;executor创建的是共享线程池，如果某个connector不引用executor创建的线程池，那么该connector仍会根据自己指定的属性创建它们自己的线程池&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;连接器必须要实现org.apache.catalina.Executor接口。它是一个嵌套在service组件中的元素，为了挑选所使用的connector，该元素还必须定义在connector元素之前。&lt;/p&gt;
&lt;p&gt;默认的定义如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;Executor&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;tomcatThreadPool&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;namePrefix&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;catalina-exec-&quot;&lt;/span&gt;
    &lt;span class=&quot;hljs-attribute&quot;&gt;maxThreads&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;150&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;minSpareThreads&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;4&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;其中该组件的属性有：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;className&lt;/code&gt;：用于实现此组件的java类的名称，这个类必须实现接口org.apache.catalina.Executor。不给定该属性时将采用默认的标准类org.apache.catalina.core.StandardThreadExecutor；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;name&lt;/code&gt;：该线程池的名称，其他组件需要使用该名称引用该线程池。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;标准类的属性包括：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;threadPriority&lt;/code&gt;：线程优先级，默认值为5。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;daemon&lt;/code&gt;：线程是否以daemon的方式运行，默认值为true。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;namePrefix&lt;/code&gt;：执行器创建每个线程时的名称前缀，最终线程的名称为:namePrefix+threadNumber。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;maxThreads&lt;/code&gt;：线程池激活的最大线程数量。默认值为200。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;minSpareThreads&lt;/code&gt;：线程池中最少空闲的线程数量。默认值为25。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;maxIdleTime&lt;/code&gt;：在空闲线程关闭前的毫秒数。除非激活的线程数量小于或等于minSpareThreads的值，否则会有空闲线程的出现。默认值为60000，即空闲线程需要保留1分钟的空闲时间才被杀掉。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;maxQueueSize&lt;/code&gt;：可执行任务的最大队列数，达到队列上限时的连接请求将被拒绝。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;prestartminSpareThreads&lt;/code&gt;：在启动executor时是否立即创建minSpareThreads个线程数，默认为false，即在需要时才创建线程。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;例如在connector中指定所使用的线程池，方式如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;Connector&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;executor&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;tomcatThreadPool&quot;&lt;/span&gt;
           &lt;span class=&quot;hljs-attribute&quot;&gt;port&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;8080&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;protocol&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;HTTP/1.1&quot;&lt;/span&gt;
           &lt;span class=&quot;hljs-attribute&quot;&gt;connectionTimeout&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;20000&quot;&lt;/span&gt;
           &lt;span class=&quot;hljs-attribute&quot;&gt;redirectPort&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;8443&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;

&lt;h2 id=&quot;5-4-connector&quot;&gt;5.4 连接器connector&lt;/h2&gt;
&lt;p&gt;连接器用于&lt;strong&gt;接收客户端发送的请求并返回响应给客户端&lt;/strong&gt;。一个service中可以有多个connector。有多种connector，常见的为http/1.1,http/2和ajp(apache jserv protocol)。在tomcat中，ajp连接协议类型专用于tomcat前端是apache反向代理的情况下。&lt;/p&gt;
&lt;p&gt;因此tomcat可以扮演两种角色：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Tomcat仅作为应用程序服务器：请求来自于前端的web服务器，这可能是Apache, IIS, Nginx等；&lt;/li&gt;
&lt;li&gt;Tomcat既作为web服务器，也作为应用程序服务器：请求来自于浏览器。&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;Tomcat应该考虑工作情形并为相应情形下的请求&lt;strong&gt;分别定义&lt;/strong&gt;好需要的连接器才能正确接收来自于客户端的请求。&lt;/p&gt;
&lt;p&gt;此处暂先介绍HTTP/1.1连接器的属性设置。ajp后文再做介绍。&lt;/p&gt;
&lt;p&gt;HTTP连接器表示支持HTTP/1.1协议的组件。设置了该连接器就表示catalina启用它的独立web服务功能，当然，肯定也提供它必须的servlets和jsp执行功能。在一个service中可以配置一个或多个连接器，每个连接器都可以将请求转发给它们相关联的engine以处理请求、创建响应。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;每个流入的请求都需要一个独立的线程来接收&lt;/strong&gt;。当并发请求数量超出maxThreads指定的值时，多出的请求将被堆叠在套接字中，直到超出acceptCount指定的值。超出accpetCount的请求将以&quot;connection refused&quot;错误进行拒绝。&lt;/p&gt;
&lt;p&gt;默认的定义如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;Connector&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;port&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;8080&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;protocol&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;HTTP/1.1&quot;&lt;/span&gt;
           &lt;span class=&quot;hljs-attribute&quot;&gt;connectionTimeout&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;20000&quot;&lt;/span&gt;
           &lt;span class=&quot;hljs-attribute&quot;&gt;redirectPort&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;8443&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;HTTP连接器的属性实在太多，详细配置方法见&lt;span&gt;&lt;a href=&quot;http://tomcat.apache.org/tomcat-8.5-doc/config/http.html&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;官方手册&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;。通常定义HTTP连接器时必须定义的属性只有&quot;port&quot;。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;address&lt;/code&gt;：指定连接器监听的地址，默认为所有地址，即0.0.0.0。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;maxThreads&lt;/code&gt;：支持的最大并发连接数，默认为200；如果引用了executor创建的共享线程池，则该属性被忽略。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;acceptCount&lt;/code&gt;：设置等待队列的最大长度；通常在tomcat所有处理线程均处于繁忙状态时，新发来的请求将被放置于等待队列中；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;maxConnections&lt;/code&gt;：允许建立的最大连接数。acceptCount和maxThreads是接受连接的最大线程数。存在一种情况，maxConnections小于acceptCount时，超出maxConnections的连接请求将被接收，但不会与之建立连接。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;port&lt;/code&gt;：监听的端口，默认为0，此时表示随机选一个端口，通常都应该显式指定监听端口。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;protocol&lt;/code&gt;：连接器使用的协议，用于处理对应的请求。默认为HTTP/1.1，此时它会自动在基于Java NIO或APR/native连接器之间进行切换。定义AJP协议时通常为AJP/1.3。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;redirectPort&lt;/code&gt;：如果某连接器支持的协议是HTTP，当接收客户端发来的HTTPS请求时，则转发至此属性定义的端口。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;connectionTimeout&lt;/code&gt;：等待客户端发送请求的超时时间，单位为毫秒，默认为60000，即1分钟；注意，这时候连接已经建立。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;keepAliveTimeout&lt;/code&gt;：长连接状态的超时时间。超出该值时，长连接将关闭。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;enableLookups&lt;/code&gt;：是否通过request.getRemoteHost()进行DNS查询以获取客户端的主机名；默认为true，应设置为false防止反解客户端主机；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;compression&lt;/code&gt;：是否压缩数据。默认为off。设置为on时表示只压缩text文本，设置为force时表示压缩所有内容。应该在压缩和sendfile之间做个权衡。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;useSendfile&lt;/code&gt;：该属性为NIO的属性，表示是否启用sendfile的功能。默认为true，启用该属性将会禁止compression属性。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;当协议指定为HTTP/1.1时，默认会自动在NIO/APR协议处理方式上进行按需切换。如要显式指定协议，方式如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;connector&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;port&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;8080&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;protocol&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;HTTP/1.1&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;connector&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;port&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;8080&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;protocol&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;org.apache.coyote.http11.Http11NioProtocol&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;connector&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;port&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;8080&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;protocol&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;org.apache.coyote.http11.Http11Nio2Protocol&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;connector&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;port&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;8080&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;protocol&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;org.apache.coyote.http11.Http11AprProtocol&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;其中NIO是C/C++的非阻塞IO复用模型在JAVA中的IO实现，NIO2即AIO是异步NIO，即异步非阻塞IO：&lt;br/&gt;NioProtocol ：non blocking Java NIO connector&lt;br/&gt;Nio2Protocol：non blocking Java NIO2 connector&lt;br/&gt;AprProtocol ：the APR/native connector&lt;br/&gt;它们之间的异同点如下表所示：&lt;/p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt; &lt;/th&gt;
&lt;th&gt;Java Nio Connector&lt;/th&gt;
&lt;th&gt;Java Nio2 Connector&lt;/th&gt;
&lt;th&gt;APR/native Connector&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody readability=&quot;1&quot;&gt;&lt;tr&gt;&lt;td&gt;Classname&lt;/td&gt;
&lt;td&gt;Http11NioProtocol&lt;/td&gt;
&lt;td&gt;Http11Nio2Protocol&lt;/td&gt;
&lt;td&gt;Http11AprProtocol&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Tomcat Version&lt;/td&gt;
&lt;td&gt;6.x onwards&lt;/td&gt;
&lt;td&gt;8.x onwards&lt;/td&gt;
&lt;td&gt;5.5.x onwards&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Support Polling&lt;/td&gt;
&lt;td&gt;YES&lt;/td&gt;
&lt;td&gt;YES&lt;/td&gt;
&lt;td&gt;YES&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Polling Size&lt;/td&gt;
&lt;td&gt;maxConnections&lt;/td&gt;
&lt;td&gt;maxConnections&lt;/td&gt;
&lt;td&gt;maxConnections&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Read Request Headers&lt;/td&gt;
&lt;td&gt;Non Blocking&lt;/td&gt;
&lt;td&gt;Non Blocking&lt;/td&gt;
&lt;td&gt;Non Blocking&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Read Request Body&lt;/td&gt;
&lt;td&gt;Blocking&lt;/td&gt;
&lt;td&gt;Blocking&lt;/td&gt;
&lt;td&gt;Blocking&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;Write Response Headers and Body&lt;/td&gt;
&lt;td&gt;Blocking&lt;/td&gt;
&lt;td&gt;Blocking&lt;/td&gt;
&lt;td&gt;Blocking&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Wait for next Request&lt;/td&gt;
&lt;td&gt;Non Blocking&lt;/td&gt;
&lt;td&gt;Non Blocking&lt;/td&gt;
&lt;td&gt;Non Blocking&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;SSL Support&lt;/td&gt;
&lt;td&gt;Java SSL or OpenSSL&lt;/td&gt;
&lt;td&gt;Java SSL or OpenSSL&lt;/td&gt;
&lt;td&gt;OpenSSL&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;SSL Handshake&lt;/td&gt;
&lt;td&gt;Non blocking&lt;/td&gt;
&lt;td&gt;Non blocking&lt;/td&gt;
&lt;td&gt;Blocking&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Max Connections&lt;/td&gt;
&lt;td&gt;maxConnections&lt;/td&gt;
&lt;td&gt;maxConnections&lt;/td&gt;
&lt;td&gt;maxConnections&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;下面是一个定义了多个属性的SSL连接器：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;Connector&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;port&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;8443&quot;&lt;/span&gt;
    &lt;span class=&quot;hljs-attribute&quot;&gt;maxThreads&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;150&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;minSpareThreads&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;25&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;maxSpareThreads&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;75&quot;&lt;/span&gt;
    &lt;span class=&quot;hljs-attribute&quot;&gt;enableLookups&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;false&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;acceptCount&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;100&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;debug&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;0&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;scheme&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;https&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;secure&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;true&quot;&lt;/span&gt;
    &lt;span class=&quot;hljs-attribute&quot;&gt;clientAuth&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;false&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;sslProtocol&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;TLS&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;

&lt;h2 id=&quot;5-5-engine&quot;&gt;5.5 容器类engine&lt;/h2&gt;
&lt;p&gt;engine是service组件中用来分析协议的引擎机器，&lt;strong&gt;它从一个或多个connector上接收请求，并将请求交给对应的虚拟主机进行处理，最后返回完整的响应数据给connector，通过connector将响应数据返回给客户端。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;只有一个engine元素必须嵌套在每个service中，且engine必须在其所需要关联的connector之后，这样在engine前面的connector都可以被此engine关联，而在engine后面的connector则被忽略，因为一个service中只允许有一个engine。&lt;/p&gt;
&lt;p&gt;定义方式大致如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;Engine&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;Catalina&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;defaultHost&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;localhost&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;Engine&lt;/span&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;Engine&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;Standalone&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;defaultHost&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;localhost&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;jvmRoute&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;TomcatA&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;Engine&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;常用的engine属性有：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;className&lt;/code&gt;：实现engine的类，该类必须实现org.apache.catalina.Engine接口。不给定该属性时将采用默认的标准类org.apache.catalina.core.StandardEngine。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;defaultHost&lt;/code&gt;：指定处理请求的默认虚拟主机。在Engine中定义的多个虚拟主机的主机名称中至少有一个跟defaultHost定义的主机名称同名。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;name&lt;/code&gt;：Engine组件的名称，用于记录日志和错误信息，无关紧要的属性，可随意给定。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;jvmRoute&lt;/code&gt;：在启用session粘性时指定使用哪种负载均衡的标识符。所有的tomcat server实例中该标识符必须唯一，它会追加在session标识符的尾部，因此能让前端代理总是将特定的session转发至同一个tomcat实例上。&lt;br/&gt;注意，jvmRoute同样可以使用jvmRoute的系统属性来设置。如果此处设置了jvmRoute，则覆盖jvmRoute系统属性。关于jvmRoute的使用，在后面tomcat ajp负载均衡的文章中介绍。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;engine是容器中的顶级子容器，其内可以嵌套一个或多个Host作为虚拟主机，且至少一个host要和engine中的默认虚拟主机名称对应。除了host，还可以嵌套releam和valve组件。&lt;/p&gt;

&lt;h2 id=&quot;5-6-host&quot;&gt;5.6 容器类host&lt;/h2&gt;
&lt;p&gt;host容器用来定义虚拟主机。engine从connector接收到请求进行分析后，会将相关的属性参数传递给对应的(筛选方式是从请求首部的host字段和虚拟主机名称进行匹配)虚拟host进行处理。如果没有合适的虚拟主机，则传递给默认虚拟主机。因此每个容器中必须至少定义一个虚拟主机，且必须有一个虚拟主机和engine容器中定义的默认虚拟主机名称相同。&lt;/p&gt;
&lt;p&gt;大致定义方式如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;Host&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;localhost&quot;&lt;/span&gt;  &lt;span class=&quot;hljs-attribute&quot;&gt;appBase&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;webapps&quot;&lt;/span&gt;
            &lt;span class=&quot;hljs-attribute&quot;&gt;unpackWARs&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;true&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;autoDeploy&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;true&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;Host&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;常用属性说明：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;className&lt;/code&gt;：实现host容器的类，该类必须实现org.apache.catalina.Host接口。不给定该属性时将采用默认的标准类org.apache.catalina.core.StandardHost。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;name&lt;/code&gt;：虚拟主机的主机名，忽略大小写(初始化时会自动转换为小写)。可以使用前缀星号通配符，如&quot;*.a.com&quot;。使用了星号前缀的虚拟主机的匹配优先级低于精确名称的虚拟主机。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;appBase&lt;/code&gt;：此Host的webapps目录，即webapp部署在此虚拟主机上时的存放目录。包括非归档的web应用程序目录和归档后的WAR文件的目录。使用相对路径时基于$CATALINA_BASE。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xmlBase&lt;/code&gt;：部署在此虚拟主机上的context xml目录。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;startStopThreads&lt;/code&gt;：启动context容器时的并行线程数。如果使用了自动部署功能，则再次部署或更新时使用相同的线程池。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;autoDeploy&lt;/code&gt;：在Tomcat处于运行状态时放置于appBase目录中的应用程序文件是否自动进行deploy或自动更新部署状态。这等于同时开启了deployOnStartup属性和reload/redeploy webapp的功能。触发自动更新时将默认重载该webapp。默认为true。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;unpackWars&lt;/code&gt;：在执行此webapps时是否先对归档格式的WAR文件解压再运行，设置为false时则直接执行WAR文件；默认为true。设置为false时会损耗性能。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;workDir&lt;/code&gt;：该虚拟主机的工作目录。每个webapp都有自己的临时IO目录，默认该工作目录为$CATALINA_BASE/work。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;大多数时候都只需设置虚拟主机名称name和webBase属性即可，其余采用默认，默认时会自动部署webapp。有时候还需要管理多个站点名称，即主机别名。可以使用Alias为Host指定的主机名定义主机别名。如：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;Host&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;web.a.com&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;appBase&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;webapps&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;unpackWARs&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;true&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;Alias&lt;/span&gt;&amp;gt;&lt;/span&gt;www.a.com&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;Alias&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;Host&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;自动部署指的是自动装载webapp以提供相关webapp的服务。&lt;/p&gt;

&lt;h2 id=&quot;5-7-context&quot;&gt;5.7 容器类context&lt;/h2&gt;
&lt;p&gt;connector和containor是整个tomcat的心脏，而context则是containor的心脏，更是tomcat心脏的心脏。它是真正管理servlet的地方，它的配置影响了servlet的工作方式。&lt;/p&gt;
&lt;p&gt;一个context代表一个webapp。servlet中规定，每个webapp都必须基于已归档的WAR(WEB application archive)文件或基于非归档相关内容所在目录。&lt;/p&gt;
&lt;p&gt;catalina基于对请求URI与context中定义的path进行最大匹配前缀的规则进行挑选，从中选出使用哪个context来处理该HTTP请求。这相当于nginx的location容器，catalina的path就相当于location的path，它们的作用是相同的。&lt;/p&gt;
&lt;p&gt;每个context都必须在虚拟主机容器host中有一个唯一的context name。context的path不需要唯一，因为允许同一个webapp不同版本的共存部署。此外，必须要有一个context的path为0长度的字符串(如&lt;code&gt;&amp;lt;Context path=&quot;&quot; docBase=&quot;ROOT&quot;/&amp;gt;&lt;/code&gt;)，该context是该虚拟主机的默认webapp，用于处理所有无法被虚拟主机中所有context path匹配的请求(当然，不定义也可以，此时将自动隐式提供，见前文所述)。&lt;/p&gt;
&lt;p&gt;关于context name，它是从context path推断出来的，不仅如此，其余几个属性如context basefile name也是由此推断出来的。规则如下：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;如果path不为空，则context name等于context path，basefile name取path中去除前缀&quot;/&quot;后的路径，且所有&quot;/&quot;替换为&quot;#&quot;。&lt;/li&gt;
&lt;li&gt;如果path为空，则context name也为空，而basefile为ROOT(注意是大写)。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;例如：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;context path    context name    basefile name     deploy examples
-----------------------------------------------------------------
&lt;span class=&quot;hljs-regexp&quot;&gt;/foo            /&lt;/span&gt;foo            foo               foo.xml,foo.war,foo
/foo/bar        /foo/bar        foo#bar           foo#bar.xml,foo#bar.war,foo#bar
Empty &lt;span class=&quot;hljs-built_in&quot;&gt;String&lt;/span&gt;    Empty &lt;span class=&quot;hljs-built_in&quot;&gt;String&lt;/span&gt;    ROOT              ROOT.xml,ROOT.war,ROOT
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;配置context时，强烈建议不要定义在server.xml中，因为定义在conf/server.xml中时，只能通过重启tomcat来重载生效，也就是说无法自动部署应用程序了。&lt;strong&gt;虽说官方如此推荐，但大多数人出于习惯和方便，还是会直接写在server.xml中，这并没有什么问题，无非是重启一下而已。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;可以考虑定义在/META-INF/context.xml中，如果此时设置了copyXML属性，在部署时会将此context.xml复制到$CATALINA_BASE/conf/enginename/hostname/下，并重命名为&quot;basefile name.xml&quot;。也可以直接定义在$CATALINA_BASE/conf/enginename/hostname/下的.xml文件中，该路径的xml优先级高于/META-INF/context.xml。&lt;/p&gt;
&lt;p&gt;还可以定义默认的context.xml文件，包括两种：(1)定义在$CATALINA_BASE/conf/context.xml中，该默认context对所有webapp都生效；(2)定义在$CATALINA_BASE/conf/[enginename]/[hostname]/context.xml.default中，该默认context只对该虚拟主机中的所有webapp生效。&lt;/p&gt;
&lt;p&gt;定义方式大致如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;Host&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;www.a.com&quot;&lt;/span&gt;  &lt;span class=&quot;hljs-attribute&quot;&gt;appBase&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;webapps&quot;&lt;/span&gt;
            &lt;span class=&quot;hljs-attribute&quot;&gt;unpackWARs&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;true&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;autoDeploy&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;true&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;Context&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;path&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;docBase&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;ROOT&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;Context&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;path&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;/bbs&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;docBase&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;web/bbs&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;reloadable&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;true&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;Host&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;其中第一个context的path为空字符串，表示它是默认的context。当浏览器中输入www.a.com时，由于无法匹配第二个context，所以被默认即第一个context处理，当浏览器中输入www.a.com/bbs时，将被第二个context处理，它将执行web/bbs所对应的webapp，并返回相关内容。&lt;/p&gt;
&lt;p&gt;在context容器中可以定义非常多的属性，详细内容见&lt;span&gt;&lt;a href=&quot;http://tomcat.apache.org/tomcat-8.5-doc/config/context.html#Attributes&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;官方手册&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;，以下是常见的几个属性：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;className&lt;/code&gt;：实现host容器的类，该类必须实现org.apache.catalina.Context接口。不给定该属性时将采用默认的标准类org.apache.catalina.core.StandardContext。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cookies&lt;/code&gt;：默认为true，表示启用cookie来标识session。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docBase&lt;/code&gt;：即DocumentRoot，是该webapp的context root，即归档WAR文件所在目录或非归档内容所在目录。可以是绝对路径，也可以是相对于该webapp appBase的相对路径。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;path&lt;/code&gt;：定义webapp path。注意，当path=&quot;&quot;时，表示默认的context；另外只有在server.xml中才需要定义该属性，其他所有情况下都不能定义该属性，因为会根据docBase和context的xml文件名推断出path。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;reloadable&lt;/code&gt;：是否监控/WEB-INF/class和/WEB-INF/lib两个目录中文件的变化，变化时将自动重载。在测试环境下该属性很好，但在真实生产环境部署应用时不应该设置该属性，因为监控会大幅增加负载，因此该属性的默认值为false。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;wrapperClass&lt;/code&gt;：实现wrapper容器的类，wrapper用于管理该context中的servlet，该类必须实现org.apache.catalina.Wrapper接口，如果不指定该属性则采用默认的标准类。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xmlNamespaceAware&lt;/code&gt;：和web.xml的解析方式有关。默认为true，设置为false可以提升性能。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xmlValidation&lt;/code&gt;：和web.xml的解析方式有关。默认为true，设置为false可以提升性能。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;5-8-realm&quot;&gt;5.8 被嵌套类realm&lt;/h2&gt;
&lt;p&gt;realm定义的是一个安全上下文，就像是以哪种方式存储认证时的用户和组相关的数据库。有多种方式可以实现数据存放：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;JAASRealm：基于Java Authintication and Authorization Service实现用户认证；&lt;/li&gt;
&lt;li&gt;JDBCRealm：通过JDBC访问某关系型数据库表实现用户认证；&lt;/li&gt;
&lt;li&gt;JNDIRealm：基于JNDI使用目录服务实现认证信息的获取；&lt;/li&gt;
&lt;li&gt;MemoryRealm：查找tomcat-user.xml文件实现用户信息的获取；&lt;/li&gt;
&lt;li&gt;UserDatabaseRealm：基于UserDatabase文件(通常是tomcat-user.xml)实现用户认证，它实现是一个完全可更新和持久有效的MemoryRealm，因此能够跟标准的MemoryRealm兼容；它通过JNDI实现；&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;下面是一个常见的使用UserDatabase的配置：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;Realm&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;className&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;org.apache.catalina.realm.UserDatabaseRealm&quot;&lt;/span&gt;
  &lt;span class=&quot;hljs-attribute&quot;&gt;resourceName&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;UserDatabase&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;下面是一个使用JDBC方式获取用户认证信息的配置：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;Realm&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;className&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;org.apache.catalina.realm.JDBCRealm&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;debug&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;99&quot;&lt;/span&gt;
  &lt;span class=&quot;hljs-attribute&quot;&gt;driverName&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;org.gjt.mm.mysql.Driver&quot;&lt;/span&gt;
  &lt;span class=&quot;hljs-attribute&quot;&gt;connectionURL&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;jdbc:mysql://localhost/authority&quot;&lt;/span&gt;
  &lt;span class=&quot;hljs-attribute&quot;&gt;connectionName&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;test&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;connectionPassword&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;test&quot;&lt;/span&gt;
  &lt;span class=&quot;hljs-attribute&quot;&gt;userTable&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;users&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;userNameCol&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;user_name&quot;&lt;/span&gt;
  &lt;span class=&quot;hljs-attribute&quot;&gt;userCredCol&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;user_pass&quot;&lt;/span&gt;
  &lt;span class=&quot;hljs-attribute&quot;&gt;userRoleTable&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;user_roles&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;roleNameCol&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;role_name&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;

&lt;h2 id=&quot;5-9-valve&quot;&gt;5.9 被嵌套类valve&lt;/h2&gt;
&lt;p&gt;Valve中文意思是阀门，类似于过滤器，它可以工作于Engine和Host/Context之间、Host和Context之间以及Context和Web应用程序的某资源之间。一个容器内可以建立多个Valve，而且Valve定义的次序也决定了它们生效的次序。&lt;/p&gt;
&lt;p&gt;有多种不同的Valve：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;AccessLogValve：&lt;strong&gt;访问日志Valve&lt;/strong&gt;；&lt;/li&gt;
&lt;li&gt;ExtendedAccessValve：扩展功能的访问日志Valve；&lt;/li&gt;
&lt;li&gt;JDBCAccessLogValve：通过JDBC将访问日志信息发送到数据库中；&lt;/li&gt;
&lt;li&gt;RequestDumperValve：请求转储Valve；&lt;/li&gt;
&lt;li&gt;RemoteAddrValve：&lt;strong&gt;基于远程地址的访问控制&lt;/strong&gt;；&lt;/li&gt;
&lt;li&gt;RemoteHostValve：&lt;strong&gt;基于远程主机名称的访问控制&lt;/strong&gt;；&lt;/li&gt;
&lt;li&gt;SemaphoreValve：用于控制Tomcat主机上任何容器上的并发访问数量；&lt;/li&gt;
&lt;li&gt;JvmRouteBinderValve：在配置多个Tomcat为以Apache通过mod_proxy或mod_jk作为前端的集群架构中，当期望停止某节点时，可以通过此Valve将用记请求定向至备用节点；使用此Valve，必须使用JvmRouteSessionIDBinderListener；&lt;/li&gt;
&lt;li&gt;ReplicationValve：专用于Tomcat集群架构中，可以在某个请求的session信息发生更改时触发session数据在各节点间进行复制；&lt;/li&gt;
&lt;li&gt;SingleSignOn：将两个或多个需要对用户进行认证webapp在认证用户时连接在一起，即一次认证即可访问所有连接在一起的webapp；&lt;/li&gt;
&lt;li&gt;ClusterSingleSingOn：对SingleSignOn的扩展，专用于Tomcat集群当中，需要结合ClusterSingleSignOnListener进行工作；&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;其中RemoteHostValve和RemoteAddrValve可以分别用来实现基于主机名称和基于IP地址的访问控制，控制本身可以通过allow或deny来进行定义，这有点类似于Apache的访问控制功能。如下面的Valve实现了仅允许本机访问/probe：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;Context&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;privileged&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;true&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;path&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;/probe&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;docBase&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;probe&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;Valve&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;className&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;org.apache.catalina.valves.RemoteAddrValve&quot;&lt;/span&gt;
  &lt;span class=&quot;hljs-attribute&quot;&gt;allow&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;127\.0\.0\.1&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;Context&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;其中相关属性定义有:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;className：在对应位置的后缀上加上&quot;.valves.RemoteHostValve&quot;或&quot;.valves.RemoteAddrValve&quot;；&lt;/li&gt;
&lt;li&gt;allow：以逗号分开的允许访问的IP地址列表，支持正则，点号“.”用于IP地址时需要转义；仅定义allow项时，非明确allow的地址均被deny；&lt;/li&gt;
&lt;li&gt;deny: 以逗号分开的禁止访问的IP地址列表，支持正则；使用方式同allow；仅定义deny项时，非明确deny的地址均被allow；&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;另外一个常用的Valve为AccessLogValve，定义方式大致如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;lt;Valve className=&lt;span class=&quot;hljs-string&quot;&gt;&quot;org.apache.catalina.valves.AccessLogValve&quot;&lt;/span&gt; directory=&lt;span class=&quot;hljs-string&quot;&gt;&quot;logs&quot;&lt;/span&gt;
               prefix=&lt;span class=&quot;hljs-string&quot;&gt;&quot;localhost_access_log&quot;&lt;/span&gt; suffix=&lt;span class=&quot;hljs-string&quot;&gt;&quot;.txt&quot;&lt;/span&gt;
               pattern=&lt;span class=&quot;hljs-string&quot;&gt;&quot;&lt;span class=&quot;hljs-variable&quot;&gt;%h&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;%l&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;%u&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;%t&lt;/span&gt; &amp;amp;quot;&lt;span class=&quot;hljs-variable&quot;&gt;%r&lt;/span&gt;&amp;amp;quot; &lt;span class=&quot;hljs-variable&quot;&gt;%s&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;%b&lt;/span&gt;&quot;&lt;/span&gt; /&amp;gt;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;其中prefix和suffix表示日志文件的前缀名称和后缀名称。pattern表示记录日志时的信息和格式。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;a href=&quot;http://www.cnblogs.com/f-ck-need-u/p/7048359.html&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;回到Linux系列文章大纲：http://www.cnblogs.com/f-ck-need-u/p/7048359.html&lt;/span&gt;&lt;/a&gt;&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;strong&gt;&lt;a href=&quot;http://www.cnblogs.com/f-ck-need-u/p/7576137.html&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;回到网站架构系列文章大纲：http://www.cnblogs.com/f-ck-need-u/p/7576137.html&lt;/span&gt;&lt;/a&gt;&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;strong&gt;&lt;a href=&quot;http://www.cnblogs.com/f-ck-need-u/p/7586194.html&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;回到数据库系列文章大纲：http://www.cnblogs.com/f-ck-need-u/p/7586194.html&lt;/span&gt;&lt;/a&gt;&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;strong&gt;&lt;a href=&quot;http://www.cnblogs.com/f-ck-need-u/p/8120008.html&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;转载请注明出处：http://www.cnblogs.com/f-ck-need-u/p/8120008.html&lt;/span&gt;&lt;/a&gt;&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;注：若您觉得这篇文章还不错请点击右下角推荐，您的支持能激发作者更大的写作热情，非常感谢！&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Tue, 26 Dec 2017 13:01:00 +0000</pubDate>
<dc:creator>骏马金龙</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/f-ck-need-u/p/8120008.html</dc:identifier>
</item>
<item>
<title>TCP/IP、HTTP、HTTPS、HTTP2.0 - ZepheryWen</title>
<link>http://www.cnblogs.com/w1570631036/p/8119747.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/w1570631036/p/8119747.html</guid>
<description>&lt;p&gt;HTTP，全称超文本传输协议（HTTP，HyperText Transfer Protocol)，是一个客户端和服务器端请求和应答的标准（TCP），互联网上应用最为广泛的一种网络协议。客户端是终端用户，服务器端是网站。通过使用Web浏览器、网络爬虫或者其它的工具，客户端发起一个到服务器上指定端口（默认端口为80）的HTTP请求。&lt;/p&gt;
&lt;p&gt;HTTPS，即加密后的HTTP。HTTP协议传输的数据都是未加密的，也就是明文的，因此使用HTTP协议传输隐私信息非常不安全。HTTPS都是用的TLS协议，但是由于SSL出现的时间比较早，并且依旧被现在浏览器所支持，因此SSL依然是HTTPS的代名词，但无论是TLS还是SSL都是上个世纪的事情，SSL最后一个版本是3.0，今后TLS将会继承SSL优良血统继续为我们进行加密服务。目前TLS的版本是1.2，定义在RFC 5246中，暂时还没有被广泛的使用。&lt;/p&gt;
&lt;p&gt;HTTP2.0，下一代的HTTP协议。相比于HTTP1.x，大幅度的提升了web性能，进一步减少了网络延时和拥塞。&lt;br/&gt;&lt;/p&gt;
&lt;div align=&quot;center&quot;&gt;&lt;img src=&quot;http://image.wenzhihuai.com/images/20171224034237.png&quot;/&gt;&lt;/div&gt;
&lt;p&gt;各自的RFC相关文档自己去搜吧，&lt;a href=&quot;https://www.rfc-editor.org/&quot; class=&quot;uri&quot;&gt;https://www.rfc-editor.org/&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;为了了解HTTP，有必要先理解一下TCP/IP。目前，存在两种划分模型的方法，OSI七层模型和TCP/IP模型，具体的区别不在阐述。HTTP是建立在TCP协议之上，所以HTTP协议的瓶颈及其优化技巧都是基于TCP协议本身的特性，例如tcp建立连接的3次握手和断开连接的4次挥手以及每次建立连接带来的RTT延迟时间。&lt;br/&gt;&lt;/p&gt;
&lt;div align=&quot;center&quot;&gt;&lt;img src=&quot;http://image.wenzhihuai.com/images/20171221101751.png&quot;/&gt;&lt;/div&gt;
&lt;p&gt;TCP三次握手四次挥手的原理，由于篇幅关系，具体请看&lt;a href=&quot;http://uule.iteye.com/blog/2213562&quot;&gt;TCP协议的三次握手和四次挥手&lt;/a&gt;，&lt;/p&gt;

&lt;p&gt;超文本传输协议(HyperText Transfer Protocol) 是伴随着计算机网络和浏览器而诞生，&lt;a href=&quot;http://www.ifanr.com/550613&quot;&gt;在浏览器出现之前，人们是怎么使用网络的？&lt;/a&gt;，不管怎么说，那个时代对于现在的我们，有点难以想象。。。之后，网景发布了Netscape Navigator浏览器，才慢慢打开了互联网的幕布。如果根据OSI来划分的话，HTML属于表示层，而HTTP属于应用层。HTTP发展至今，经过了HTTP0.9、HTTP1.0、HTTP1.1、HTTP2.0的时代，虽然2.0很久之前就正式提出标准，大多浏览器也支持了，但是网络支持HTTP2.0的却很少。&lt;/p&gt;
&lt;h2 id=&quot;http报文分析&quot;&gt;2.1 HTTP报文分析&lt;/h2&gt;
&lt;p&gt;报文，是网络中交换和传输的基本单元，即一次性发送的数据块。HTTP的报文是由一行一行组成的，纯文本，而且是明文，即：如果能监听你的网络，那么你发送的所有账号密码都是可以看见的，为了保障数据隐秘性，HTTPS随之而生。&lt;/p&gt;
&lt;h3 id=&quot;请求报文&quot;&gt;2.1.1 请求报文：&lt;/h3&gt;
&lt;p&gt;为了形象点，我们把报文标准和实际的结合起来看。&lt;br/&gt;&lt;/p&gt;
&lt;div align=&quot;center&quot;&gt;&lt;img src=&quot;http://image.wenzhihuai.com/images/20171221111615.png&quot;/&gt;&lt;/div&gt;
&lt;p&gt;下面是实际报文，以访问自己的网站(&lt;a href=&quot;http://www.wenzhihuai.com&quot; class=&quot;uri&quot;&gt;http://www.wenzhihuai.com&lt;/a&gt;)中的一个链接为例。&lt;br/&gt;&lt;/p&gt;
&lt;div align=&quot;center&quot;&gt;&lt;img src=&quot;http://image.wenzhihuai.com/images/20171221043103.png&quot;/&gt;&lt;/div&gt;
&lt;h4 id=&quot;请求行&quot;&gt;请求行&lt;/h4&gt;
&lt;p&gt;请求行由方法字段、URL 字段 和HTTP 协议版本字段 3 个部分组成，他们之间使用空格隔开。常用的 HTTP 请求方法有 GET、POST、HEAD、PUT、DELETE、OPTIONS、TRACE、CONNECT，这里我们使用的是GET方法，访问的是/biaoqianyun.do，协议使用的是HTTP/1.1。&lt;br/&gt;&lt;strong&gt;GET&lt;/strong&gt;：当客户端要从服务器中读取某个资源时，使用GET 方法。如果需要加传参数的话，需要在URL之后加个&quot;?&quot;，然后把参数名字和值用=连接起来，传递参数长度受限制，通常IE8的为4076，Chrome的为7675。例如，/index.jsp?id=100&amp;amp;op=bind。&lt;br/&gt;&lt;strong&gt;POST&lt;/strong&gt;：当客户端给服务器提供信息较多时可以使用POST 方法，POST 方法向服务器提交数据，比如完成表单数据的提交，将数据提交给服务器处理。GET 一般用于获取/查询资源信息，POST 会附带用户数据，一般用于更新资源信息。POST 方法将请求参数封装在HTTP 请求数据中，以名称/值的形式出现，可以传输大量数据;&lt;/p&gt;
&lt;h4 id=&quot;请求头部&quot;&gt;请求头部&lt;/h4&gt;
&lt;p&gt;请求头部由关键字/值对组成，每行一对，关键字和值用英文冒号“:”分隔。请求头部通知服务器有关于客户端请求的信息，典型的请求头有：&lt;br/&gt;&lt;strong&gt;User-Agent&lt;/strong&gt;：产生请求的浏览器类型;&lt;br/&gt;&lt;strong&gt;Accept&lt;/strong&gt;：客户端可识别的响应内容类型列表;星号 “ * ” 用于按范围将类型分组，用 “ &lt;em&gt;/&lt;/em&gt; ” 指示可接受全部类型，用“ type/* ”指示可接受 type 类型的所有子类型;&lt;br/&gt;&lt;strong&gt;Accept-Language&lt;/strong&gt;：客户端可接受的自然语言;&lt;br/&gt;&lt;strong&gt;Accept-Encoding&lt;/strong&gt;：客户端可接受的编码压缩格式;&lt;br/&gt;&lt;strong&gt;Accept-Charset&lt;/strong&gt;：可接受的应答的字符集;&lt;br/&gt;&lt;strong&gt;Host&lt;/strong&gt;：请求的主机名，允许多个域名同处一个IP 地址，即虚拟主机;&lt;br/&gt;&lt;strong&gt;connection&lt;/strong&gt;：连接方式(close 或 keepalive)，如果是close的话就需要进行TCP四次挥手关闭连接，如果是keepalive，表明还能继续使用，这是HTTP1.1对1.0的新增，加快了网络传输，默认是keepalive;&lt;br/&gt;&lt;strong&gt;Cookie&lt;/strong&gt;：存储于客户端扩展字段，向同一域名的服务端发送属于该域的cookie;&lt;/p&gt;
&lt;h5 id=&quot;空行&quot;&gt;空行&lt;/h5&gt;
&lt;p&gt;最后一个请求头之后是一个空行，发送回车符和换行符，通知服务器以下不再有请求头;&lt;/p&gt;
&lt;h4 id=&quot;请求包体&quot;&gt;请求包体&lt;/h4&gt;
&lt;p&gt;请求包体不在 GET 方法中使用，而是在POST 方法中使用。POST 方法适用于需要客户填写表单的场合。与请求包体相关的最常使用的是包体类型 Content-Type 和包体长度 Content-Length;&lt;/p&gt;
&lt;h3 id=&quot;响应报文&quot;&gt;2.1.2 响应报文&lt;/h3&gt;
&lt;p&gt;同样，先粘贴报文标准。&lt;br/&gt;&lt;/p&gt;
&lt;div align=&quot;center&quot;&gt;&lt;img src=&quot;http://image.wenzhihuai.com/images/20171224035755.png&quot;/&gt;&lt;/div&gt;
&lt;p&gt;抓包，以访问(&lt;a href=&quot;http://www.wenzhihuai.com&quot; class=&quot;uri&quot;&gt;http://www.wenzhihuai.com&lt;/a&gt;)为例。&lt;br/&gt;&lt;/p&gt;
&lt;div align=&quot;center&quot;&gt;&lt;img src=&quot;http://image.wenzhihuai.com/images/20171224035850.png&quot;/&gt;&lt;/div&gt;
&lt;h4 id=&quot;状态行&quot;&gt;状态行&lt;/h4&gt;
&lt;p&gt;状态行由 HTTP 协议版本字段、状态码和状态码的描述文本 3 个部分组成，他们之间使用空格隔开，描述文本一般不显示;&lt;br/&gt;&lt;strong&gt;状态码&lt;/strong&gt;：由三位数字组成，第一位数字表示响应的类型，常用的状态码有五大类如下所示：&lt;br/&gt;1xx：服务器已接收，但客户端可能仍要继续发送;&lt;br/&gt;2xx：成功;&lt;br/&gt;3xx：重定向;&lt;br/&gt;4xx：请求非法，或者请求不可达;&lt;br/&gt;5xx：服务器内部错误;&lt;/p&gt;
&lt;h4 id=&quot;响应头部响应头可能包括&quot;&gt;响应头部：响应头可能包括：&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;Location&lt;/strong&gt;：Location响应报头域用于重定向接受者到一个新的位置。例如：客户端所请求的页面已不存在原先的位置，为了让客户端重定向到这个页面新的位置，服务器端可以发回Location响应报头后使用重定向语句，让客户端去访问新的域名所对应的服务器上的资源;&lt;br/&gt;&lt;strong&gt;Server&lt;/strong&gt;：Server 响应报头域包含了服务器用来处理请求的软件信息及其版本。它和 User-Agent 请求报头域是相对应的，前者发送服务器端软件的信息，后者发送客户端软件(浏览器)和操作系统的信息。&lt;br/&gt;&lt;strong&gt;Vary&lt;/strong&gt;：指示不可缓存的请求头列表;&lt;br/&gt;&lt;strong&gt;Connection&lt;/strong&gt;：连接方式，这个跟rquest的类似。&lt;br/&gt;&lt;strong&gt;空行&lt;/strong&gt;：最后一个响应头部之后是一个空行，发送回车符和换行符，通知服务器以下不再有响应头部。&lt;br/&gt;&lt;strong&gt;响应包体&lt;/strong&gt;：服务器返回给客户端的文本信息;&lt;/p&gt;
&lt;h2 id=&quot;http特性&quot;&gt;2.2 HTTP特性&lt;/h2&gt;
&lt;p&gt;HTTP的主要特点主要能概括如下：&lt;/p&gt;
&lt;h3 id=&quot;无状态性&quot;&gt;2.2.1 无状态性&lt;/h3&gt;
&lt;p&gt;即，当客户端访问完一次服务器再次访问的时候，服务器是无法知道这个客户端之前是否已经访问过了。优点是不需要先前的信息，能够更快的应答，缺点是每次连接传送的数据量增大。这种做法不利于信息的交互，随后，Cookie和Session就应运而生，至于它俩有什么区别，可以看看&lt;a href=&quot;https://www.zhihu.com/question/19786827&quot;&gt;COOKIE和SESSION有什么区别？&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&quot;持久连接&quot;&gt;2.2.2 持久连接&lt;/h3&gt;
&lt;p&gt;HTTP1.1 使用持久连接keepalive，所谓持久连接，就是服务器在发送响应后仍然在一段时间内保持这条连接，允许在同一个连接中存在多次数据请求和响应，即在持久连接情况下，服务器在发送完响应后并不关闭TCP连接，客户端可以通过这个连接继续请求其他对象。&lt;/p&gt;
&lt;h3 id=&quot;其他&quot;&gt;2.2.3 其他&lt;/h3&gt;
&lt;p&gt;支持客户/服务器模式、简单快速（请求方法简单Get和POST）、灵活（数据对象任意）&lt;/p&gt;
&lt;h2 id=&quot;影响http的因素&quot;&gt;2.3 影响HTTP的因素&lt;/h2&gt;
&lt;p&gt;影响HTTP请求的因素：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;带宽&lt;br/&gt;好像只要上网这个因素是一直都有的。。。即使再快的网络，也会有偶尔网络慢的时候。。。&lt;/li&gt;
&lt;li&gt;延迟&lt;br/&gt;（1） 浏览器阻塞&lt;br/&gt;一个浏览器对于同一个域名，&lt;strong&gt;同时&lt;/strong&gt;只能有4个链接（根据不同浏览器），如果超了后面的会被阻塞。&lt;br/&gt;常用浏览器阻塞数量看下图。&lt;br/&gt;&lt;div align=&quot;center&quot;&gt;&lt;img src=&quot;http://image.wenzhihuai.com/images/20171226081508.png&quot;/&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;（2） DNS查询&lt;br/&gt;浏览器建立连接是需要知道服务器的IP的，DNS用来将域名解析为IP地址，这个可以通过刷新DNS缓存来加快速度。&lt;br/&gt;（3） 建立连接&lt;br/&gt;由之前第一章的就可以看出，HTTP是基于TCP协议的，即使网络、浏览器再快也要进行TCP的三次握手，在高延迟的场景下影响比较明显，慢启动则对文件请求影响较大。&lt;/p&gt;
&lt;h3 id=&quot;缺陷&quot;&gt;2.4 缺陷&lt;/h3&gt;
&lt;ol&gt;&lt;li&gt;耗时：传输数据每次都要建立连接；&lt;/li&gt;
&lt;li&gt;不安全：HTTP是明文传输的，只要在路由器或者交换机上截取，所有东西（账号密码）都是可见的；&lt;/li&gt;
&lt;li&gt;Header内容过大：通常，客户端的请求header变化较小，但是每次都要携带大量的header信息，导致传输成本增大；&lt;/li&gt;
&lt;li&gt;keepalive压力过大：持久连接虽然有一点的优点，但同时也会给服务器造成大量的性能压力，特别是传输图片的时候。&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;BTW：明文传输有多危险，可以去试试，下面是某个政府网站，采用wireshark抓包，身份证、电话号码、住址什么的全暴露出来，所以，，，只要在路由器做点小动作，你的信息是全部能拿得到的，毕竟政府。&lt;br/&gt;&lt;/p&gt;
&lt;div align=&quot;center&quot;&gt;&lt;img src=&quot;http://image.wenzhihuai.com/images/20171224044825.png&quot;/&gt;&lt;/div&gt;
&lt;p&gt;由于涉及的隐私太多，打了马赛克&lt;/p&gt;

&lt;p&gt;由于HTTP报文的不安全性，网景在1994年就创建了HTTPS，并用在浏览器中。最初HTTPS是和SSL一起使用，然后演化为TLS。SSL／TLS在OSI模型中都是表示层的协议。SSL使 用40 位关键字作为RC4流加密算法，这对于商业信息的加密是合适的。&lt;/p&gt;
&lt;h2 id=&quot;ssltls&quot;&gt;3.1 SSL/TLS&lt;/h2&gt;
&lt;p&gt;SSL(Secure Sockets Layer)，简称安全套接入层，最初由上世纪90年代由网景公司设计。开启 SSL 会增加内存、CPU、网络带宽的开销，后二者跟你使用的 cipher suite 密切相关，其中参数很多，很难一概而论。开启 SSL 的前提是你的 cert 和 key 必须放在 TCP endpoint，你是否信得过那台设备。&lt;br/&gt;TLS(Transport Layer Security)，简称安全传输层协议，该协议由两层组成： TLS 记录协议（TLS Record）和 TLS 握手协议（TLS Handshake）。较低的层为 TLS 记录协议，位于某个可靠的传输协议（例如 TCP）上面，与具体的应用无关，所以，一般把TLS协议归为传输层安全协议。&lt;br/&gt;由于本人在加密算法上面知识匮乏，就不误人子弟了，有兴趣可以看看百度百科里的资料，&lt;a href=&quot;%5BSSL%5D%EF%BC%88https://baike.baidu.com/item/ssl/320778?fr=aladdin&quot;&gt;SSL&lt;/a&gt;,&lt;a href=&quot;https://baike.baidu.com/item/TLS&quot;&gt;TLS&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;spdy&quot;&gt;3.2 SPDY&lt;/h2&gt;
&lt;p&gt;2012年google提出了SPDY的方案，大家才开始从正面看待和解决老版本HTTP协议本身的问题，SPDY可以说是综合了HTTPS和HTTP两者有点于一体的传输协议，主要解决：&lt;br/&gt;&lt;strong&gt;降低延迟&lt;/strong&gt;，针对HTTP高延迟的问题，SPDY优雅的采取了多路复用（multiplexing）。多路复用通过多个请求stream共享一个tcp连接的方式，解决了HOL blocking的问题，降低了延迟同时提高了带宽的利用率。&lt;br/&gt;&lt;strong&gt;请求优先级（request prioritization）&lt;/strong&gt;。多路复用带来一个新的问题是，在连接共享的基础之上有可能会导致关键请求被阻塞。SPDY允许给每个request设置优先级，这样重要的请求就会优先得到响应。比如浏览器加载首页，首页的html内容应该优先展示，之后才是各种静态资源文件，脚本文件等加载，这样可以保证用户能第一时间看到网页内容。&lt;br/&gt;&lt;strong&gt;header压缩&lt;/strong&gt;。前面提到HTTP1.x的header很多时候都是重复多余的。选择合适的压缩算法可以减小包的大小和数量。&lt;br/&gt;基于HTTPS的加密协议传输，大大提高了传输数据的可靠性。&lt;br/&gt;&lt;strong&gt;服务端推送（server push）&lt;/strong&gt;，采用了SPDY的网页，例如我的网页有一个sytle.css的请求，在客户端收到sytle.css数据的同时，服务端会将sytle.js的文件推送给客户端，当客户端再次尝试获取sytle.js时就可以直接从缓存中获取到，不用再发请求了。SPDY构成图。&lt;br/&gt;&lt;/p&gt;
&lt;div align=&quot;center&quot;&gt;&lt;img src=&quot;http://image.wenzhihuai.com/images/20171226042016.png&quot;/&gt;&lt;/div&gt;
&lt;h2 id=&quot;https报文分析&quot;&gt;3.3 HTTPS报文分析&lt;/h2&gt;
&lt;p&gt;跟之前的报文分析一样，我们使用wireshark来抓包分析，以在百度上搜索点东西为例。&lt;br/&gt;&lt;/p&gt;
&lt;div align=&quot;center&quot;&gt;&lt;img src=&quot;http://image.wenzhihuai.com/images/20171226044521.png&quot;/&gt;&lt;/div&gt;
&lt;p&gt;192.168.1.103为本地电脑的ip地址，14.215.177.39为百度服务器地址。下面是步骤：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;客户端通过发送 Client Hello 报文开始 SSL 通信。报文中包含客户端支持的 SSL 的指定版本、加密组件（Cipher Suite）列表（所使用的加密算法及密钥长度等）。&lt;/li&gt;
&lt;li&gt;服务器可进行 SSL 通信时，会以 Server Hello 报文作为应答。和客户端一样，在报文中包含 SSL 版本以及加密组件。服务器的加密组件内容是从接收到的客户端加密组件内筛选出来的。之后服务器发送 Certificate 报文。报文中包含公开密钥证书。最后服务器发送 Server Hello Done 报文通知客户端，最初阶段的SSL握手协商部分结束。&lt;/li&gt;
&lt;li&gt;SSL 第一次握手结束之后，客户端以 Client Key Exchange 报文作为回应。接着客户端继续发送 Change Cipher Spec 报文。该报文会提示服务器，在此报文之后的通信会采用 Pre-master secret 密钥加密。客户端发送 Finished 报文。该报文包含连接至今全部报文的整体校验值。&lt;/li&gt;
&lt;li&gt;服务器同样发送 Change Cipher Spec 报文。 服务器同样发送 Finished 报文。&lt;/li&gt;
&lt;li&gt;服务器和客户端的 Finished 报文交换完毕之后，SSL 连接就算建立完成。当然，通信会受到 SSL 的保护。从此处开始进行应用层协议的通信，即发送 HTTP请求。 应用层协议通信，即发送 HTTP 响应。&lt;br/&gt;&lt;strong&gt;当然，用一张图更容易解释&lt;/strong&gt;&lt;br/&gt;简单地说就是下面。&lt;br/&gt;&lt;div align=&quot;center&quot;&gt;&lt;img src=&quot;http://image.wenzhihuai.com/images/20171226044137.png&quot;/&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;当我们追踪流的数据的时候，可以看到，基本上都是乱码，经过加密，数据是看不到，如果需要在wireshark上看到，则需要在wireshark中配置ssl。&lt;br/&gt;&lt;/p&gt;
&lt;div align=&quot;center&quot;&gt;&lt;img src=&quot;http://image.wenzhihuai.com/images/20171226045845.png&quot;/&gt;&lt;/div&gt;
&lt;h2 id=&quot;https全站化&quot;&gt;3.4 HTTPS全站化&lt;/h2&gt;
&lt;p&gt;现今，感觉只要和商业利益有关的，就不得不涉及到加密这类东西。淘宝、京东、唯品会这些电商可谓是最早推行全站https的，这类电商是离用户金钱最近的企业。截止今年底，基本所有商业网站也基本实现了HTTPS。。。。至于小站点，比如个人网站，玩玩还是可以的。如果一个网站需要由HTTP全部变为HTTPS，那么需要关注下面几点：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;CA证书，大部分证书都是需要收费的，当然，自己在服务器上用openssl也可以，不过浏览器会提示当前私密连接不安全这个警告，普通人看到这种信息是不会继续浏览的，所以，想使用HTTPS，可以使用&lt;a href=&quot;https://letsencrypt.org/&quot;&gt;Let's Encrypt&lt;/a&gt;，由谷歌等公司推行。&lt;/li&gt;
&lt;li&gt;HTTPS性能优化，SSL握手，HTTPS 对速度会有一定程度的降低，但是只要经过合理优化和部署，HTTPS 对速度的影响完全可以接受。&lt;/li&gt;
&lt;li&gt;CPU计算压力，HTTPS中大量的秘钥算法计算，对CPU的压力可想而知。&lt;br/&gt;至于我自己的&lt;a href=&quot;http://www.wenzhihuai.com&quot;&gt;个人网站&lt;/a&gt;，之前实现了https，用的免费证书，但是由于HTTPS下的网站，所有子链都要使用HTTPS，使用了七牛云的CDN，如果要使用HTTPS加速，是要收费的，所以只能放弃。。。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;HTTP2.0，相较于HTTP1.x，大幅度的提升了web性能。在与HTTP/1.1完全语义兼容的基础上，进一步减少了网络延迟和传输的安全性。HTTP2.0可以说是SPDY的升级版（基于SPDY设计的），但是依然存在一些不同点：HTTP2.0支持明文传输，而SPDY强制使用HTTPS；HTTP2.0消息头的压缩算法采用HPACK，而非SPDY采用的DEFLATE。&lt;/p&gt;
&lt;h2 id=&quot;历史&quot;&gt;4.1 历史&lt;/h2&gt;
&lt;p&gt;HTTP 2.0在2013年8月进行首次合作共事性测试。在开放互联网上HTTP 2.0将只用于https://网址，而 &lt;a href=&quot;http://%E7%BD%91%E5%9D%80%E5%B0%86%E7%BB%A7%E7%BB%AD%E4%BD%BF%E7%94%A8HTTP/1%EF%BC%8C%E7%9B%AE%E7%9A%84%E6%98%AF%E5%9C%A8%E5%BC%80%E6%94%BE%E4%BA%92%E8%81%94%E7%BD%91%E4%B8%8A%E5%A2%9E%E5%8A%A0%E4%BD%BF%E7%94%A8%E5%8A%A0%E5%AF%86%E6%8A%80%E6%9C%AF%EF%BC%8C%E4%BB%A5%E6%8F%90%E4%BE%9B%E5%BC%BA%E6%9C%89%E5%8A%9B%E7%9A%84%E4%BF%9D%E6%8A%A4%E5%8E%BB%E9%81%8F%E5%88%B6%E4%B8%BB%E5%8A%A8%E6%94%BB%E5%87%BB%E3%80%82HTTP&quot; class=&quot;uri&quot;&gt;http://网址将继续使用HTTP/1，目的是在开放互联网上增加使用加密技术，以提供强有力的保护去遏制主动攻击。HTTP&lt;/a&gt; 2.0是在SPDY（An experimental protocol for a faster web, The Chromium Projects）基础上形成的下一代互联网通信协议。HTTP/2 的目的是通过支持请求与响应的多路复用来较少延迟，通过压缩HTTPS首部字段将协议开销降低，同时增加请求优先级和服务器端推送的支持。&lt;/p&gt;
&lt;h2 id=&quot;http2.0新特性&quot;&gt;4.2 HTTP2.0新特性&lt;/h2&gt;
&lt;p&gt;相较于HTTP1.1，HTTP2.0的主要优点有采用二进制帧封装，传输变成多路复用，流量控制算法优化，服务器端推送，首部压缩，优先级等特点。&lt;/p&gt;
&lt;h3 id=&quot;二进制帧&quot;&gt;4.2.1 二进制帧&lt;/h3&gt;
&lt;p&gt;HTTP1.x的解析是基于文本的，基于文本协议的格式解析存在天然缺陷，文本的表现形式有多样性，要做到健壮性考虑的场景必然很多。而HTTP/2会将所有传输的信息分割为更小的消息和帧，然后采用二进制的格式进行编码，HTTP1.x的头部信息会被封装到HEADER frame，而相应的Request Body则封装到DATA frame里面。不改动HTTP的语义，使用二进制编码，实现方便且健壮。&lt;br/&gt;&lt;/p&gt;
&lt;div align=&quot;center&quot;&gt;&lt;img src=&quot;http://image.wenzhihuai.com/images/20171226103043.png&quot;/&gt;&lt;/div&gt;
&lt;h3 id=&quot;多路复用&quot;&gt;4.2.2 多路复用&lt;/h3&gt;
&lt;p&gt;所有的请求都是通过一个 TCP 连接并发完成。HTTP/1.x 虽然通过 pipeline 也能并发请求，但是多个请求之间的响应会被阻塞的，所以 pipeline 至今也没有被普及应用，而 HTTP/2 做到了真正的并发请求。同时，流还支持优先级和流量控制。当流并发时，就会涉及到流的优先级和依赖。即：HTTP2.0对于同一域名下所有请求都是基于流的，不管对于同一域名访问多少文件，也只建立一路连接。优先级高的流会被优先发送。图片请求的优先级要低于 CSS 和 SCRIPT，这个设计可以确保重要的东西可以被优先加载完。&lt;/p&gt;
&lt;h3 id=&quot;流量控制&quot;&gt;4.2.3 流量控制&lt;/h3&gt;
&lt;p&gt;TCP协议通过sliding window的算法来做流量控制。发送方有个sending window，接收方有receive window。http2.0的flow control是类似receive window的做法，数据的接收方通过告知对方自己的flow window大小表明自己还能接收多少数据。只有Data类型的frame才有flow control的功能。对于flow control，如果接收方在flow window为零的情况下依然更多的frame，则会返回block类型的frame，这张场景一般表明http2.0的部署出了问题。&lt;/p&gt;
&lt;h3 id=&quot;服务器端推送&quot;&gt;4.2.4 服务器端推送&lt;/h3&gt;
&lt;p&gt;服务器端的推送，就是服务器可以对一个客户端请求发送多个响应。除了对最初请求的响应外，服务器还可以额外向客户端推送资源，而无需客户端明确地请求。当浏览器请求一个html，服务器其实大概知道你是接下来要请求资源了，而不需要等待浏览器得到html后解析页面再发送资源请求。&lt;br/&gt;&lt;/p&gt;
&lt;div align=&quot;center&quot;&gt;&lt;img src=&quot;http://image.wenzhihuai.com/images/20171226105514.png&quot;/&gt;&lt;/div&gt;
&lt;h3 id=&quot;首部压缩&quot;&gt;4.2.5 首部压缩&lt;/h3&gt;
&lt;p&gt;HTTP 2.0 在客户端和服务器端使用“首部表”来跟踪和存储之前发送的键-值对，对于相同的数据，不再通过每次请求和响应发送;通信期间几乎不会改变的通用键-值对(用户代理、可接受的媒体类型,等等)只 需发送一次。事实上,如果请求中不包含首部(例如对同一资源的轮询请求),那么 首部开销就是零字节。此时所有首部都自动使用之前请求发送的首部。&lt;br/&gt;如果首部发生变化了，那么只需要发送变化了数据在Headers帧里面，新增或修改的首部帧会被追加到“首部表”。首部表在 HTTP 2.0 的连接存续期内始终存在,由客户端和服务器共同渐进地更新 。本质上，当然是为了减少请求啦，通过多个js或css合并成一个文件，多张小图片拼合成Sprite图，可以让多个HTTP请求减少为一个，减少额外的协议开销，而提升性能。当然，一个HTTP的请求的body太大也是不合理的，有个度。文件的合并也会牺牲模块化和缓存粒度，可以把“稳定”的代码or 小图 合并为一个文件or一张Sprite，让其充分地缓存起来，从而区分开迭代快的文件。&lt;/p&gt;
&lt;h2 id=&quot;http1.1与http2.0的对比&quot;&gt;4.3 HTTP1.1与HTTP2.0的对比&lt;/h2&gt;
&lt;p&gt;以访问https://http2.akamai.com/demo为例。&lt;br/&gt;&lt;/p&gt;
&lt;div align=&quot;center&quot;&gt;&lt;img src=&quot;http://image.wenzhihuai.com/images/20171226051221.png&quot;/&gt;&lt;/div&gt;
&lt;h2 id=&quot;报文&quot;&gt;4.4 报文&lt;/h2&gt;
&lt;p&gt;访问&lt;a href=&quot;https://http2.akamai.com/demo&quot; class=&quot;uri&quot;&gt;https://http2.akamai.com/demo&lt;/a&gt;，谷歌浏览器的报文没有显示出协议，此处使用火狐浏览器。&lt;br/&gt;响应头部分如下。&lt;br/&gt;&lt;/p&gt;
&lt;div align=&quot;center&quot;&gt;&lt;img src=&quot;http://image.wenzhihuai.com/images/20171226071845.png&quot;/&gt;&lt;/div&gt;
&lt;p&gt;请求头如下。&lt;br/&gt;&lt;/p&gt;
&lt;div align=&quot;center&quot;&gt;&lt;img src=&quot;http://image.wenzhihuai.com/images/20171226075106.png&quot;/&gt;&lt;/div&gt;
&lt;p&gt;采用淘宝网站为例，淘宝目前采用主站使用HTTP1.1，资源使用HTTP2.0，少些使用SPDY协议。目前也是业界比较流行的做法。&lt;br/&gt;&lt;/p&gt;
&lt;div align=&quot;center&quot;&gt;&lt;img src=&quot;http://image.wenzhihuai.com/images/20171226065216.png&quot;/&gt;&lt;/div&gt;

&lt;ol&gt;&lt;li&gt;&lt;a href=&quot;https://www.guokr.com/post/114121&quot;&gt;HTTPS那些事&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/25935872&quot;&gt;如何搭建一个HTTP2.0的网站&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.zhihu.com/question/34074946&quot;&gt;HTTP/2.0 相比1.0有哪些重大改进？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://http2.akamai.com/demo&quot;&gt;HTTP2.0 demo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.cnblogs.com/wujiaolong/p/5172e1f7e9924644172b64cb2c41fc58.html&quot;&gt;Http、Https、Http2前身&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://network.51cto.com/art/201501/464513.htm&quot;&gt;HTTP报文&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.cnblogs.com/wujiaolong/p/5172e1f7e9924644172b64cb2c41fc58.html&quot;&gt;HTTP、HTTP2.0、SPDY、HTTPS 你应该知道的一些事&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.ituring.com.cn/book/tupubarticle/11134&quot;&gt;HTTPS权威指南&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.alloyteam.com/2015/03/http2-0-di-qi-miao-ri-chang/&quot;&gt;HTTP2.0的奇妙日常&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://segmentfault.com/a/1190000004553963&quot;&gt;curl 支持 HTTP2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://velocity.oreilly.com.cn/2015/ppts/lizhenyu.pdf&quot;&gt;淘宝HTTPS探索&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.csdn.net/ituling/article/details/52541585&quot;&gt;HTTPS完全协议详解&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;欢迎访问我的个人网站。&lt;a href=&quot;http://www.wenzhihuai.com&quot; class=&quot;uri&quot;&gt;http://www.wenzhihuai.com&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Tue, 26 Dec 2017 12:53:00 +0000</pubDate>
<dc:creator>ZepheryWen</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/w1570631036/p/8119747.html</dc:identifier>
</item>
</channel>
</rss>