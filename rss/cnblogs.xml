<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>关于tomcat启动时的警告 ：Property maxActive is not used in DBCP2, use maxTotal instead. 和  Property maxWait is not used in DBCP2 , use maxWaitMillis instead. - 黑泽明军</title>
<link>http://www.cnblogs.com/chenmingjun/p/9268641.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/chenmingjun/p/9268641.html</guid>
<description>&lt;p&gt;我们现在用的tomcat大概都是8.5 或是9.0，这些版本的tomcat内置的DBCP2，和以前老版本如tomcat 7的连接池不一样，7.0等老版本用的是DBCP。&lt;/p&gt;
&lt;p&gt;tomcat 7等老版本中，内置连接池时 &lt;strong&gt;context.xml文件&lt;/strong&gt; 的默认配置示例：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;?&lt;/span&gt;&lt;span&gt;xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;?&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Context&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Resource &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;jdbc/day28&quot;&lt;/span&gt;&lt;span&gt; auth&lt;/span&gt;&lt;span&gt;=&quot;Container&quot;&lt;/span&gt;&lt;span&gt; type&lt;/span&gt;&lt;span&gt;=&quot;javax.sql.DataSource&quot;&lt;/span&gt;&lt;strong&gt;&lt;span&gt;
               maxActive&lt;/span&gt;&lt;span&gt;=&quot;100&quot;&lt;/span&gt;&lt;/strong&gt;&lt;span&gt; maxIdle&lt;/span&gt;&lt;span&gt;=&quot;30&quot;&lt;/span&gt;&lt;strong&gt;&lt;span&gt; maxWaitMillis&lt;/span&gt;&lt;span&gt;=&quot;10000&quot;&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;
               username&lt;/span&gt;&lt;span&gt;=&quot;root&quot;&lt;/span&gt;&lt;span&gt; password&lt;/span&gt;&lt;span&gt;=&quot;root&quot;&lt;/span&gt;&lt;span&gt; driverClassName&lt;/span&gt;&lt;span&gt;=&quot;com.mysql.jdbc.Driver&quot;&lt;/span&gt;&lt;span&gt;
               url&lt;/span&gt;&lt;span&gt;=&quot;jdbc:mysql://localhost:3306/day28&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Context&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在老版本的tomcat里面关于允许的&lt;strong&gt;最大连接数用maxActive&lt;/strong&gt;来表示，&lt;strong&gt;最大等待延用&lt;/strong&gt;&lt;span id=&quot;result_box&quot; class=&quot;short_text&quot; lang=&quot;zh-CN&quot;&gt;&lt;span title=&quot;max Wait Millis&quot;&gt;&lt;strong&gt;maxWait&lt;/strong&gt;来表示&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;我们现在用的是新版本的tomcat，&lt;strong&gt;新版本内置的连接池&lt;/strong&gt;已经升级了，所以如果我们继续使用这个配置就会出现如下图所示警告：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/841693/201807/841693-20180705151239267-1265203636.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;警告原文如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;45&quot;&gt;
&lt;pre&gt;
七月 05, 2018 1:55:06&lt;span&gt; 下午 org.apache.catalina.startup.HostConfig deployDirectory
信息: Deploying web application directory [D:\learn\JavaWeb\apache&lt;/span&gt;-tomcat\apache-tomcat-9.0.7&lt;span&gt;\webapps\day28_struts2_final]
七月 &lt;/span&gt;05, 2018 1:55:06&lt;span&gt; 下午 org.apache.tomcat.dbcp.dbcp2.BasicDataSourceFactory getObjectInstance
&lt;strong&gt;警告: Name &lt;/strong&gt;&lt;/span&gt;&lt;strong&gt;= day28 Property maxActive is not used in DBCP2, &lt;span&gt;use maxTotal instead.&lt;/span&gt; maxTotal &lt;span&gt;default&lt;/span&gt; value is 8. You have set value of &quot;100&quot; &lt;span&gt;for&lt;/span&gt; &quot;maxActive&quot;&lt;/strong&gt;&lt;span&gt;&lt;strong&gt; property, which is being ignored.&lt;/strong&gt;
七月 &lt;/span&gt;05, 2018 1:55:06&lt;span&gt; 下午 org.apache.tomcat.dbcp.dbcp2.BasicDataSourceFactory getObjectInstance
&lt;strong&gt;警告: Name &lt;/strong&gt;&lt;/span&gt;&lt;strong&gt;= day28 Property maxWait is not used in DBCP2 , &lt;span&gt;use maxWaitMillis instead.&lt;/span&gt; maxWaitMillis &lt;span&gt;default&lt;/span&gt; value is -1. You have set value of &quot;10000&quot; &lt;span&gt;for&lt;/span&gt; &quot;maxWait&quot;&lt;/strong&gt;&lt;span&gt;&lt;strong&gt; property, which is being ignored.&lt;/strong&gt;
七月 &lt;/span&gt;05, 2018 1:55:06&lt;span&gt; 下午 org.apache.jasper.servlet.TldScanner scanJars
信息: At least one JAR was scanned &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; TLDs yet contained no TLDs. Enable debug logging &lt;span&gt;for&lt;/span&gt; &lt;span&gt;this&lt;/span&gt; logger &lt;span&gt;for&lt;/span&gt;&lt;span&gt; a complete list of JARs that were scanned but no TLDs were found in them. Skipping unneeded JARs during scanning can improve startup time and JSP compilation time.
七月 &lt;/span&gt;05, 2018 1:55:07&lt;span&gt; 下午 org.apache.catalina.startup.HostConfig deployDirectory
信息: Deployment of web application directory [D:\learn\JavaWeb\apache&lt;/span&gt;-tomcat\apache-tomcat-9.0.7\webapps\day28_struts2_final] has finished in [1,469] ms
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这个警告其实已经把话说的很明白了，既然8.5，9.0tomcat内置的是DBCP2，已经使用 &lt;strong&gt;maxTotal来取代maxActive&lt;/strong&gt;、使用&lt;strong&gt; &lt;/strong&gt;maxWaitMillis来取代maxWait，&lt;/p&gt;
&lt;p&gt;因此我们只需要将自己的配置文件中的&lt;strong&gt;maxActive替换成maxTotal&lt;/strong&gt;、&lt;strong&gt;maxWait替换成maxWaitMillis&lt;/strong&gt;即可。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;?&lt;/span&gt;&lt;span&gt;xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;?&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Context&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Resource &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;jdbc/day28&quot;&lt;/span&gt;&lt;span&gt; auth&lt;/span&gt;&lt;span&gt;=&quot;Container&quot;&lt;/span&gt;&lt;span&gt; type&lt;/span&gt;&lt;span&gt;=&quot;javax.sql.DataSource&quot;&lt;/span&gt;&lt;strong&gt;&lt;span&gt;
               maxTotal&lt;/span&gt;&lt;span&gt;=&quot;100&quot;&lt;/span&gt;&lt;/strong&gt;&lt;span&gt; maxIdle&lt;/span&gt;&lt;span&gt;=&quot;30&quot;&lt;/span&gt;&lt;strong&gt;&lt;span&gt; maxWaitMillis&lt;/span&gt;&lt;span&gt;=&quot;10000&quot;&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;
               username&lt;/span&gt;&lt;span&gt;=&quot;root&quot;&lt;/span&gt;&lt;span&gt; password&lt;/span&gt;&lt;span&gt;=&quot;root&quot;&lt;/span&gt;&lt;span&gt; driverClassName&lt;/span&gt;&lt;span&gt;=&quot;com.mysql.jdbc.Driver&quot;&lt;/span&gt;&lt;span&gt;
               url&lt;/span&gt;&lt;span&gt;=&quot;jdbc:mysql://localhost:3306/day28&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Context&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;警告消失了：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
七月 05, 2018 3:26:15&lt;span&gt; 下午 org.apache.catalina.startup.HostConfig undeploy
信息: Undeploying context [&lt;/span&gt;/&lt;span&gt;day28_struts2_final]
七月 &lt;/span&gt;05, 2018 3:26:15&lt;span&gt; 下午 org.apache.catalina.startup.HostConfig deployDirectory
信息: Deploying web application directory [D:\learn\JavaWeb\apache&lt;/span&gt;-tomcat\apache-tomcat-9.0.7&lt;span&gt;\webapps\day28_struts2_final]
七月 &lt;/span&gt;05, 2018 3:26:16&lt;span&gt; 下午 org.apache.jasper.servlet.TldScanner scanJars
信息: At least one JAR was scanned &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; TLDs yet contained no TLDs. Enable debug logging &lt;span&gt;for&lt;/span&gt; &lt;span&gt;this&lt;/span&gt; logger &lt;span&gt;for&lt;/span&gt;&lt;span&gt; a complete list of JARs that were scanned but no TLDs were found in them. Skipping unneeded JARs during scanning can improve startup time and JSP compilation time.
七月 &lt;/span&gt;05, 2018 3:26:16&lt;span&gt; 下午 org.apache.catalina.startup.HostConfig deployDirectory
信息: Deployment of web application directory [D:\learn\JavaWeb\apache&lt;/span&gt;-tomcat\apache-tomcat-9.0.7\webapps\day28_struts2_final] has finished in [1,087] ms
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;附上：DBCP2中配置参数详解链接：&lt;a href=&quot;http://bsr1983.iteye.com/blog/2092467&quot; target=&quot;_blank&quot;&gt;http://bsr1983.iteye.com/blog/2092467&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;本文参考链接如下：&lt;a href=&quot;https://blog.csdn.net/vr_jia/article/details/74530389&quot; target=&quot;_blank&quot;&gt;https://blog.csdn.net/vr_jia/article/details/74530389&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Thu, 05 Jul 2018 07:39:00 +0000</pubDate>
<dc:creator>黑泽明军</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/chenmingjun/p/9268641.html</dc:identifier>
</item>
<item>
<title>hadoop伪分布式安装 - 天行者之眼</title>
<link>http://www.cnblogs.com/zengfa/p/9268607.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/zengfa/p/9268607.html</guid>
<description>&lt;p&gt;hadoop有三种运行模式：&lt;/p&gt;
&lt;p&gt;1，本地运行模式：hadoop的默认模式，没有守护进程，所有的程序都在同一个jvm里运行，在该模式下调试MR程序非常方便。&lt;/p&gt;
&lt;p&gt;2，伪分布式模式，所有进程运行在一台服务器，效果跟分布式模式一样。&lt;/p&gt;
&lt;p&gt;3，分布式模式：进程运行在多台服务器上。&lt;/p&gt;

&lt;p&gt;&lt;span&gt;一、本地运行模式&lt;span&gt;：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;这是hadoop的默认工作模式，不需要进行其它配置，例如运行单词统计例子，直接运行命令：&lt;/p&gt;
&lt;div readability=&quot;8.5&quot;&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
./bin/hadoop jar ./share/hadoop/mapreduce/hadoop-mapreduce-examples-2.6.1.jar wordcount /root/test/input/ /root/test/output
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　注意：/root/test目录不要创建，运行前确保Java已安装。&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1367698/201807/1367698-20180705151945209-1685109953.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;

&lt;div&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1367698/201807/1367698-20180705152038321-810255624.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;p&gt;运行完后在/root/test/output可看到输出文件&lt;/p&gt;
&lt;div&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1367698/201807/1367698-20180705152124084-1629920140.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;p&gt;输出的内容在part-r-00000文件里，_SUCCESS文件为空，只是成功标识，查看part-r-00000文件内容：cat part-r-00000&lt;/p&gt;
&lt;div&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1367698/201807/1367698-20180705152222124-2065221789.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;二、伪分布式模式&lt;span&gt;：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Hadoop 可以在单节点上以伪分布式的方式运行，Hadoop 进程以分离的 Java 进程来运行，节点既作为 NameNode 也作为 DataNode，同时，读取的是 HDFS 中的文件。&lt;/p&gt;
&lt;p&gt;1，安装ssh，如果已经安装过则跳过。&lt;/p&gt;
&lt;p&gt;yum install openssh-clients&lt;/p&gt;
&lt;p&gt;2，上传解压&lt;/p&gt;
&lt;p&gt;window环境下在官网下载hadoop压缩包hadoop-2.6.1.tar.gz，上传到centos服务器，把文件解压到/usr/local/下。&lt;/p&gt;
&lt;div&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1367698/201807/1367698-20180705152306796-126107392.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;

&lt;div&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1367698/201807/1367698-20180705152342775-1228536859.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;p&gt;3，配置环境变量&lt;/p&gt;
&lt;p&gt;修改家目录下的.bashrc文件，添加hadoop环境变量：&lt;/p&gt;
&lt;p&gt;export JAVA_HOME=/usr/local/jdk&lt;/p&gt;
&lt;p&gt;export HADOOP_HOME=/usr/local/hadoop&lt;/p&gt;
&lt;p&gt;export PATH=$PATH:$HADOOP_HOME/sbin:$HADOOP_HOME/bin&lt;/p&gt;

&lt;div&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1367698/201807/1367698-20180705152422485-549493359.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;p&gt;然后加载环境变量：source ~/.bashrc&lt;/p&gt;
&lt;p&gt;4，修改配置文件&lt;/p&gt;
&lt;p&gt;伪分布式需要修改2个配置文件 &lt;span&gt;core-site.xml 和 &lt;span&gt;hdfs-site.xml，配置文件在/usr/local/hadoop/etc/hadoop/中&lt;span&gt;。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1367698/201807/1367698-20180705152458949-1475348388.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;p&gt;修改配置文件 &lt;span&gt;core-site.xml，修改为：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;34&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
&amp;lt;configuration&amp;gt;
        &amp;lt;property&amp;gt;
                &amp;lt;name&amp;gt;hadoop.tmp.dir&amp;lt;/name&amp;gt;
                &amp;lt;value&amp;gt;file:/usr/local/hadoop/tmp&amp;lt;/value&amp;gt;
                &amp;lt;description&amp;gt;Abase for other temporary directories.&amp;lt;/description&amp;gt;
        &amp;lt;/property&amp;gt;
        &amp;lt;property&amp;gt;
                &amp;lt;name&amp;gt;fs.defaultFS&amp;lt;/name&amp;gt;
                &amp;lt;value&amp;gt;hdfs://localhost:9000&amp;lt;/value&amp;gt;
        &amp;lt;/property&amp;gt;
&amp;lt;/configuration&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;修改配置文件 &lt;span&gt;hdfs-site.xml，修改为：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
&amp;lt;configuration&amp;gt;
        &amp;lt;property&amp;gt;
                &amp;lt;name&amp;gt;dfs.replication&amp;lt;/name&amp;gt;
                &amp;lt;value&amp;gt;1&amp;lt;/value&amp;gt;
        &amp;lt;/property&amp;gt;
        &amp;lt;property&amp;gt;
                &amp;lt;name&amp;gt;dfs.namenode.name.dir&amp;lt;/name&amp;gt;
                &amp;lt;value&amp;gt;file:/usr/local/hadoop/tmp/dfs/name&amp;lt;/value&amp;gt;
        &amp;lt;/property&amp;gt;
        &amp;lt;property&amp;gt;
                &amp;lt;name&amp;gt;dfs.datanode.data.dir&amp;lt;/name&amp;gt;
                &amp;lt;value&amp;gt;file:/usr/local/hadoop/tmp/dfs/data&amp;lt;/value&amp;gt;
        &amp;lt;/property&amp;gt;
&amp;lt;/configuration&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;5，格式化，配置完后要格式化才能启动。&lt;/p&gt;
&lt;div readability=&quot;6&quot;&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
./bin/hdfs namenode -format
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1367698/201807/1367698-20180705152641294-673357655.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;p&gt;6，启动hdfs&lt;/p&gt;
&lt;p&gt;./sbin/start-dfs.sh&lt;/p&gt;
&lt;div&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1367698/201807/1367698-20180705152738979-1203017230.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;p&gt;用jps查看进程&lt;/p&gt;
&lt;div&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1367698/201807/1367698-20180705152811916-160148532.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;

&lt;div&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1367698/201807/1367698-20180705152848943-2123928012.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;至此hadoop启动成功！&lt;/span&gt;&lt;/p&gt;



&lt;p&gt;&lt;span&gt;问题1：没有安装ssh&lt;/span&gt;&lt;/p&gt;
&lt;div&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1367698/201807/1367698-20180705152922249-174013342.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;p&gt;提示ssh: command not found，需要安装ssh客户端：&lt;/p&gt;
&lt;div readability=&quot;6&quot;&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
yum install openssh-clients
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;span&gt;问题2：JAVA_HOME没有配置&lt;/span&gt;&lt;/p&gt;
&lt;div&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1367698/201807/1367698-20180705153032988-854781073.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;

&lt;p&gt;要添加JAVA_HOME变量，vi ~/.bashrc ，添加export JAVA_HOME=/usr/local/jdk&lt;/p&gt;
&lt;div&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1367698/201807/1367698-20180705153107016-454150877.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;问题3：SSH免密登入&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;在上面启动hdfs中需要手动输入密码，可配置SSH免密登入，这样启动过程中就不需要输入密码了。&lt;/p&gt;
&lt;div&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1367698/201807/1367698-20180705153139032-1765074371.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;p&gt;1）ssh-keygen，然后一直回车&lt;/p&gt;
&lt;p&gt;2），将生成的公匙加入到授权列表中&lt;/p&gt;
&lt;p&gt;cat id_rsa.pub &amp;gt;&amp;gt; authorized_keys&lt;/p&gt;
&lt;div&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1367698/201807/1367698-20180705153210799-699234660.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;











</description>
<pubDate>Thu, 05 Jul 2018 07:34:00 +0000</pubDate>
<dc:creator>天行者之眼</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/zengfa/p/9268607.html</dc:identifier>
</item>
<item>
<title>Jquery中$.ajax()方法参数详解 - BruceLee1123</title>
<link>http://www.cnblogs.com/lichunting/p/9268326.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/lichunting/p/9268326.html</guid>
<description>&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;AJAX即“Asynchronous Javascript And XML”（异步JavaScript和XML），是指一种创建交互式网页应用的网页开发技术。本文跟大家介绍JQuery中$.ajax()方法参数详解。&lt;/strong&gt;&lt;/span&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;1.url: &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　要求为String类型的参数，（默认为当前页地址）发送请求的地址。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.type: &lt;br/&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　要求为String类型的参数，请求方式（post或get）默认为get。注意其他http请求方法，例如put和delete也可以使用，但仅部分浏览器支持。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3.timeout: &lt;br/&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　要求为Number类型的参数，设置请求超时时间（毫秒）。此设置将覆盖$.ajaxSetup()方法的全局设置。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4.async: &lt;br/&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　要求为Boolean类型的参数，默认设置为true，所有请求均为异步请求。如果需要发送同步请求，请将此选项设置为false。注意，同步请求将锁住浏览器，用户其他操作必须等待请求完成才可以执行。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5.cache: &lt;br/&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　要求为Boolean类型的参数，默认为true（当dataType为script时，默认为false），设置为false将不会从浏览器缓存中加载请求信息。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;6.data: &lt;br/&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　要求为Object或String类型的参数，发送到服务器的数据。如果已经不是字符串，将自动转换为字符串格式。get请求中将附加在url后。防止这种自动转换，可以查看&lt;span&gt;&lt;strong&gt;processData&lt;/strong&gt;&lt;/span&gt;选项。对象必须为key/value格式，例如{foo1:&quot;bar1&quot;,foo2:&quot;bar2&quot;}转换为&amp;amp;foo1=bar1&amp;amp;foo2=bar2。如果是数组，JQuery将自动为不同值对应同一个名称。例如{foo:[&quot;bar1&quot;,&quot;bar2&quot;]}转换为&amp;amp;foo=bar1&amp;amp;foo=bar2。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;7.dataType: &lt;br/&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　要求为String类型的参数，预期服务器返回的数据类型。如果不指定，JQuery将自动根据http包mime信息返回responseXML或responseText，并作为回调函数参数传递。可用的类型如下：&lt;/p&gt;
&lt;p&gt;　　xml：返回XML文档，可用JQuery处理。&lt;/p&gt;
&lt;p&gt;　　html：返回纯文本HTML信息；包含的script标签会在插入DOM时执行。&lt;/p&gt;
&lt;p&gt;　　script：返回纯文本JavaScript代码。不会自动缓存结果。除非设置了cache参数。注意在远程请求时（不在同一个域下），所有post请求都将转为get请求。&lt;/p&gt;
&lt;p&gt;　　json：返回JSON数据。&lt;/p&gt;
&lt;p&gt;　　jsonp：JSONP格式。使用SONP形式调用函数时，例如myurl?callback=?，JQuery将自动替换后一个“?”为正确的函数名，以执行回调函数。&lt;/p&gt;
&lt;p&gt;　　text：返回纯文本字符串。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;8.beforeSend：&lt;br/&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　要求为Function类型的参数，发送请求前可以修改XMLHttpRequest对象的函数，例如添加自定义HTTP头。在beforeSend中如果返回false可以取消本次ajax请求。XMLHttpRequest对象是惟一的参数。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;function&lt;/span&gt;&lt;span&gt;(XMLHttpRequest){
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; 　　&lt;span&gt;this&lt;/span&gt;;  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;调用本次ajax请求时传递的options参数&lt;/span&gt;
&lt;span&gt;3&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;9.complete：&lt;br/&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　要求为Function类型的参数，请求完成后调用的回调函数（请求成功或失败时均调用）。参数：XMLHttpRequest对象和一个描述成功请求类型的字符串。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;function&lt;/span&gt;&lt;span&gt;(XMLHttpRequest, textStatus){
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;     &lt;span&gt;this&lt;/span&gt;;  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;调用本次ajax请求时传递的options参数&lt;/span&gt;
&lt;span&gt;3&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;10.success：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　要求为Function类型的参数，请求成功后调用的回调函数，有两个参数。&lt;/p&gt;
&lt;p&gt;        　　(1)由服务器返回，并根据dataType参数进行处理后的数据。&lt;/p&gt;
&lt;p&gt;         　  (2)描述状态的字符串。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;function&lt;/span&gt;&lt;span&gt;(data, textStatus){
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;data可能是xmlDoc、jsonObj、html、text等等&lt;/span&gt;
&lt;span&gt;3&lt;/span&gt;     &lt;span&gt;this&lt;/span&gt;; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;调用本次ajax请求时传递的options参数&lt;/span&gt;
&lt;span&gt;4&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;11.error:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　要求为Function类型的参数，请求失败时被调用的函数。该函数有3个参数，即XMLHttpRequest对象、错误信息、捕获的错误对象(可选)。&lt;/p&gt;
&lt;p&gt;ajax事件函数如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;function&lt;/span&gt;&lt;span&gt;(XMLHttpRequest, textStatus, errorThrown){
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;通常情况下textStatus和errorThrown只有其中一个包含信息&lt;/span&gt;
&lt;span&gt;3&lt;/span&gt;     &lt;span&gt;this&lt;/span&gt;;  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;调用本次ajax请求时传递的options参数&lt;/span&gt;
&lt;span&gt;4&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;12.contentType：&lt;br/&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　要求为String类型的参数，当发送信息至服务器时，内容编码类型默认为&quot;application/x-www-form-urlencoded&quot;。该默认值适合大多数应用场合。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;13.dataFilter：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　要求为Function类型的参数，给Ajax返回的原始数据进行预处理的函数。提供data和type两个参数。data是Ajax返回的原始数据，type是调用jQuery.ajax时提供的dataType参数。函数返回的值将由jQuery进一步处理。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;function&lt;/span&gt;&lt;span&gt;(data, type){
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;返回处理后的数据&lt;/span&gt;
&lt;span&gt;3&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; data;
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;14.global：&lt;br/&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　要求为Boolean类型的参数，默认为true。表示是否触发全局ajax事件。设置为false将不会触发全局ajax事件，ajaxStart或ajaxStop可用于控制各种ajax事件。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;15.ifModified：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　要求为Boolean类型的参数，默认为false。仅在服务器数据改变时获取新数据。服务器数据改变判断的依据是Last-Modified头信息。默认值是false，即忽略头信息。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;16.jsonp：&lt;br/&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　要求为String类型的参数，在一个jsonp请求中重写回调函数的名字。该值用来替代在&quot;callback=?&quot;这种GET或POST请求中URL参数里的&quot;callback&quot;部分，例如{jsonp:'onJsonPLoad'}会导致将&quot;onJsonPLoad=?&quot;传给服务器。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;17.username：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　要求为String类型的参数，用于响应HTTP访问认证请求的用户名。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;18.password：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　要求为String类型的参数，用于响应HTTP访问认证请求的密码。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;19.processData：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　要求为Boolean类型的参数，默认为true。默认情况下，发送的数据将被转换为对象（从技术角度来讲并非字符串）以配合默认内容类型&quot;application/x-www-form-urlencoded&quot;。如果要发送DOM树信息或者其他不希望转换的信息，请设置为false。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;20.scriptCharset：&lt;br/&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　要求为String类型的参数，只有当请求时dataType为&quot;jsonp&quot;或者&quot;script&quot;，并且type是GET时才会用于强制修改字符集(charset)。通常在本地和远程的内容编码不同时使用。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;案例代码：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;$.ajax({
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;     type: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;GET&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;     url: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;test.json&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;    data: {
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; 　　　　username:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;admin&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, 
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; 　　　　userpwd:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;1234&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt; 　},
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;     dataType: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;json&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;    success: function(data){
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;           alert(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;登录成功&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)        
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; });
&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;$.ajax({
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;     type: 'POST'&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;     url: '/XXX/XXX/XXX'&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;    data: myUitls.serializeObject(f),
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;     dataType: 'json'&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;     cache: &lt;span&gt;false&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;     success: &lt;span&gt;function&lt;/span&gt;&lt;span&gt; (jsonData) {
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;XXXX                            &lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; });
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;参考资料&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　&lt;a href=&quot;https://www.jb51.net/article/73052.htm&quot; target=&quot;_blank&quot;&gt;https://www.jb51.net/article/73052.htm&lt;/a&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Thu, 05 Jul 2018 07:32:00 +0000</pubDate>
<dc:creator>BruceLee1123</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/lichunting/p/9268326.html</dc:identifier>
</item>
<item>
<title>Number浮点数运算详解 - 街边微凉小悲伤</title>
<link>http://www.cnblogs.com/yqx0605xi/p/9268583.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/yqx0605xi/p/9268583.html</guid>
<description>&lt;h2&gt;文章来自我的 &lt;a href=&quot;https://github.com/webproblem/Blog/issues&quot; target=&quot;_blank&quot;&gt;github 博客&lt;/a&gt;，包括技术输出和学习笔记，欢迎star。&lt;/h2&gt;
&lt;h2&gt;一道题&lt;/h2&gt;
&lt;p&gt;0.1 + 0.2 = ?&lt;/p&gt;
&lt;p&gt;在浏览器中测试下计算结果，得到的结果是 0.30000000000000004，并不是理想中的 0.3 结果值。为什么会存在这样的误差呢？&lt;/p&gt;
&lt;h2&gt;存在的问题&lt;/h2&gt;
&lt;p&gt;数值运算会存在精度丢失的问题&lt;/p&gt;
&lt;h2&gt;为什么&lt;/h2&gt;
&lt;p&gt;想要弄清这个问题，得先了解计算机是何如存储数值的。&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Number数值会被转换成对应的二进制数值，并用科学计数法表示&lt;/li&gt;
&lt;li&gt;把数值通过 IEEE754 的格式表示成存储的计算机内存中的值&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;javascript 中的 Number 类型值可以是十进制，八进制以及十六进制的数值，在进行算数运算时，所有的八进制和十六进制的数值最终都将会被转换成十进制数值。而对于编程语言来说，所有的程序都会经过解释，编译等操作转换成 CPU 所能识别的语言才能运行，对于 CPU 来说只能识别二进制的数值，所以所有的数值都将会被转换成二进制数值存储的计算机内存中。所以，javascript 在算数运算过程中的顺序应该是这样的，如果存在八进制或者十六进制数值 -&amp;gt; 转换成十进制数值 -&amp;gt; 转换成二进制数值 -&amp;gt; 表示成 IEEE754形式的值存储的内存 中 -&amp;gt; 运算 -&amp;gt; 将结果转成十进制数值。&lt;/p&gt;
&lt;h2&gt;IEEE754 标准&lt;/h2&gt;
&lt;p&gt;IEEE754 标准规定了32位单精度浮点数在计算机存储中表示用1位表示数字的符号，用8位表示指数，用23位来表示尾数，而64位双精度浮点数则是用1位表示数字的符号，用11位表示指数，用52位表示尾数。&lt;/p&gt;
&lt;p&gt;在 javascript 中，Number 类型的数值都是双精度64位浮点数，那么就符合 IEEE754 标准的双精度浮点数规则，结构如下：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://user-images.githubusercontent.com/20440496/39559164-c5c8a252-4ec6-11e8-9655-753e68bcef01.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/20440496/39559164-c5c8a252-4ec6-11e8-9655-753e68bcef01.png&quot; alt=&quot;IEEE754结构&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;从结构图中可以看出，存储的尾数的长度是52位有效数字，二进制的第一位有效数字必定是1，所以这个值不会被存储在64位中，节省了一个存储空间，所以尾数的最长长度应该是53位有效数字。&lt;/p&gt;
&lt;h2&gt;精度丢失&lt;/h2&gt;
&lt;p&gt;回到刚才的问题，按照正常的流程是会先将 0.1 和 0.2 转换成二进制数值。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://user-images.githubusercontent.com/20440496/39559177-ddb3c7ca-4ec6-11e8-9678-db03ab90eee3.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/20440496/39559177-ddb3c7ca-4ec6-11e8-9678-db03ab90eee3.png&quot; alt=&quot;0.1转换二进制&quot; width=&quot;581&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://user-images.githubusercontent.com/20440496/39559185-e7a40ce0-4ec6-11e8-873a-dd244dffd1b1.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/20440496/39559185-e7a40ce0-4ec6-11e8-873a-dd244dffd1b1.png&quot; alt=&quot;0.2转换二进制&quot; width=&quot;574&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;十进制的 0.1 和 0.2 转换成二进制数值都会是无限循环的值&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-js&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-c1&quot;&gt;0.1 &lt;span class=&quot;pl-k&quot;&gt;-&lt;span class=&quot;pl-k&quot;&gt;&amp;gt; &lt;span class=&quot;pl-c1&quot;&gt;0.0001100110011001&lt;span class=&quot;pl-k&quot;&gt;...(无限)
&lt;span class=&quot;pl-c1&quot;&gt;0.2 &lt;span class=&quot;pl-k&quot;&gt;-&lt;span class=&quot;pl-k&quot;&gt;&amp;gt; &lt;span class=&quot;pl-c1&quot;&gt;0.0011001100110011&lt;span class=&quot;pl-k&quot;&gt;...(无限)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;而根据 IEEE754 标准，尾数最多能存储53位有效数字，那么就必须在特定的位置进行四舍五入处理，得到的结果分别是：&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-js&quot; readability=&quot;8&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-c1&quot;&gt;0.1 &lt;span class=&quot;pl-k&quot;&gt;-&lt;span class=&quot;pl-k&quot;&gt;&amp;gt; &lt;span class=&quot;pl-c1&quot;&gt;0.0001100110011001100110011001100110011001100110011001101
&lt;span class=&quot;pl-c1&quot;&gt;0.2 &lt;span class=&quot;pl-k&quot;&gt;-&lt;span class=&quot;pl-k&quot;&gt;&amp;gt; &lt;span class=&quot;pl-c1&quot;&gt;0.001100110011001100110011001100110011001100110011001101&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;所以，相加得到的二进制结果为：&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-js&quot; readability=&quot;8&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-c1&quot;&gt;0.0001100110011001100110011001100110011001100110011001101 &lt;span class=&quot;pl-k&quot;&gt;+ 
&lt;span class=&quot;pl-c1&quot;&gt;0.001100110011001100110011001100110011001100110011001101 
&lt;span class=&quot;pl-k&quot;&gt;= &lt;span class=&quot;pl-c1&quot;&gt;0.0100110011001100110011001100110011001100110011001100111&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;二进制结果转换成十进制就是 0.30000000000000004。&lt;/p&gt;
&lt;h2&gt;小结&lt;/h2&gt;
&lt;p&gt;数值运算会存在精度丢失的问题的原因是，十进制的数值会先转成二进制数值存储在内存中，但是大多数十进制浮点数转换成二进制是一个无限循环的值，而计算机中存储的二进制值的尾数最多只能53位，那么就会进行四舍五入处理，这样处理的结果就会导致精度丢失。&lt;/p&gt;
&lt;h2&gt;解决方案&lt;/h2&gt;
&lt;p&gt;既然知道在运算过程中会存在精度丢失的情况导致计算不准确，那么应该如何处理这种问题？&lt;/p&gt;
&lt;p&gt;可以在网上搜索一些成熟完善的插件，例如 &lt;a href=&quot;https://github.com/josdejong/mathjs&quot;&gt;mathjs&lt;/a&gt;。当然在简单的场景下，也可以自己来处理这类问题。&lt;/p&gt;
&lt;p&gt;研究过 iview 和 element UI 的 InputNumber 计数器组件源码，大致的解决思路就是，两个数进行相加或者相减运算时，如果两个数中至少一个是小数值，那么就先将这两个数扩大10的n次方倍数进行运算，再将运算结果去除以扩大的倍数，得到最终的结果值，扩大的倍数由小数值的小数位数决定。如果只存在一个小数值，那么n的值就是小数的小数位长度，如果两个值都是小数，那么就先比较下哪个值的小数位长度较长，n的值就取较长的小数位长度。&lt;/p&gt;
&lt;p&gt;用 Vue 来实现下这种解决方案。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;app&quot;&lt;/span&gt;&lt;span&gt; class&lt;/span&gt;&lt;span&gt;=&quot;demo&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;add-main&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;number&quot;&lt;/span&gt;&lt;span&gt; v-model&lt;/span&gt;&lt;span&gt;=&quot;add_num1&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;input&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt; + 
        &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;number&quot;&lt;/span&gt;&lt;span&gt; v-model&lt;/span&gt;&lt;span&gt;=&quot;add_num2&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;input&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; 
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;i-button &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;primary&quot;&lt;/span&gt;&lt;span&gt; @click&lt;/span&gt;&lt;span&gt;=&quot;getReault&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;计算结果&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;i-button&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
        = {{ result }}
    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;highlight highlight-text-html-basic&quot; readability=&quot;37.5&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;45&quot;&gt;
&lt;pre&gt;
&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Vue({
    el: &lt;/span&gt;'#app'&lt;span&gt;,
    data: {
        add_num1: &lt;/span&gt;0&lt;span&gt;,
        add_num2: &lt;/span&gt;0&lt;span&gt;,
        result: &lt;/span&gt;0&lt;span&gt;
    },
    methods: {
        toPrecision: &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(data, maxPrecision) {
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (maxPrecision === undefined) maxPrecision = 0&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; parseFloat(parseFloat(Number(data).toFixed(maxPrecision)));
        },
        getDecimalLen: &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(val) {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; val.toString().split(&quot;.&quot;)[1] ? val.toString().split(&quot;.&quot;)[1].length : 0&lt;span&gt;;
        },
        getReault: &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;() {
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; vm = &lt;span&gt;this&lt;/span&gt;&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; expandPrecision = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; decimal_num1 =&lt;span&gt; vm.getDecimalLen(parseFloat(vm.add_num1));
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; decimal_num2 =&lt;span&gt; vm.getDecimalLen(parseFloat(vm.add_num2));
            let maxPrecision &lt;/span&gt;=&lt;span&gt; Math.max(decimal_num1, decimal_num2);
            expandPrecision &lt;/span&gt;= Math.pow(10&lt;span&gt;, maxPrecision);
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;简单写法&lt;/span&gt;
            &lt;span&gt;//&lt;/span&gt;&lt;span&gt; vm.result = (vm.add_num1 * expandPrecision + vm.add_num2 * expandPrecision) / expandPrecision;&lt;/span&gt;

            &lt;span&gt;//&lt;/span&gt;&lt;span&gt;严谨写法&lt;/span&gt;
            vm.result = vm.toPrecision((vm.add_num1 * expandPrecision + vm.add_num2 * expandPrecision) /&lt;span&gt; expandPrecision, maxPrecision);
        }
    }
})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;p&gt;这种方案只适用于简单的运用场景，在涉及金额等复杂的运算场景中，最好是选择第三方完善的插件。&lt;/p&gt;
&lt;h2&gt;参考资料&lt;/h2&gt;
</description>
<pubDate>Thu, 05 Jul 2018 07:31:00 +0000</pubDate>
<dc:creator>街边微凉小悲伤</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/yqx0605xi/p/9268583.html</dc:identifier>
</item>
<item>
<title>PHP基础4--函数-数组 - young67</title>
<link>http://www.cnblogs.com/yangp67/p/9267040.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/yangp67/p/9267040.html</guid>
<description>&lt;p&gt;主要&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;函数&lt;/li&gt;
&lt;li&gt;数组&lt;/li&gt;
&lt;li&gt;常用系统函数&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;a onclick=&quot;window.open('https://images2018.cnblogs.com/blog/1254673/201807/1254673-20180705151525336-146490910.png','','scrollbars=yes,left='+(screen.availWidth/2-0)+',top='+(screen.availHeight/2-0)+'');return false;&quot; href=&quot;https://images2018.cnblogs.com/blog/1254673/201807/1254673-20180705151525336-146490910.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1254673/201807/1254673-20180705151525336-146490910.png&quot; alt=&quot;&quot; width=&quot;738&quot; height=&quot;304&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;&lt;a onclick=&quot;window.open('https://images2018.cnblogs.com/blog/1254673/201807/1254673-20180705151810067-1987213904.png','','scrollbars=yes,left='+(screen.availWidth/2-0)+',top='+(screen.availHeight/2-0)+'');return false;&quot; href=&quot;https://images2018.cnblogs.com/blog/1254673/201807/1254673-20180705151810067-1987213904.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1254673/201807/1254673-20180705151810067-1987213904.png&quot; alt=&quot;&quot; width=&quot;737&quot; height=&quot;441&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1254673/201807/1254673-20180705152127437-960178185.png&quot; alt=&quot;&quot; width=&quot;736&quot; height=&quot;496&quot;/&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;h2&gt;函数&lt;/h2&gt;
&lt;h3&gt;&lt;span&gt;　　基础&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;　　1）定义&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('548dbde0-8c06-4937-8396-f9bcc4878f53')&quot; readability=&quot;31&quot;&gt;&lt;img id=&quot;code_img_closed_548dbde0-8c06-4937-8396-f9bcc4878f53&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_548dbde0-8c06-4937-8396-f9bcc4878f53&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('548dbde0-8c06-4937-8396-f9bcc4878f53',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_548dbde0-8c06-4937-8396-f9bcc4878f53&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;57&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;function&lt;/span&gt; 函数名(【&lt;span&gt;$形参1&lt;/span&gt;】，【&lt;span&gt;$形参2&lt;/span&gt;】，.....&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;       &lt;span&gt;//&lt;/span&gt;&lt;span&gt;函数体  &lt;/span&gt;
&lt;span&gt;3&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;点击查看函数定义形式&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;　　2） 调用&lt;/p&gt;
&lt;p&gt;　　　　函数名([$实参1][，$实参2]....) ;   //一般要与定义中形参一一对应，个数一致&lt;/p&gt;
&lt;p&gt;　　3）调用过程&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('de419c63-e2b9-4341-bd2f-4e9850ab7b40')&quot; readability=&quot;32&quot;&gt;&lt;img id=&quot;code_img_closed_de419c63-e2b9-4341-bd2f-4e9850ab7b40&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_de419c63-e2b9-4341-bd2f-4e9850ab7b40&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('de419c63-e2b9-4341-bd2f-4e9850ab7b40',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_de419c63-e2b9-4341-bd2f-4e9850ab7b40&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;59&quot;&gt;
&lt;pre&gt;
step 1: 将函数调用的实参数据，传递给函数的形参
step 2: 程序进入到函数内部
step 3: 在函数内部，按正常的流程顺序执行里面的代码
step 4: 如果函数结束或遇到return，返回到原来调用函数的位置，继续执行后续的代码
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;函数调用过程分析&lt;/span&gt;&lt;/div&gt;
&lt;h3&gt;&lt;span&gt;　　函数的参数&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;　　1）形参的默认值&lt;/p&gt;
&lt;p&gt;　　　　定义函数时，可以赋一个默认值。 如 function add($x=100, $y=200) {.....}  形参$x,$y设置默认值&lt;/p&gt;
&lt;p&gt;　　　　如果是部分形参设置默认值，则设置默认值的形参必须放在后边。 如 function f($a, $b, $c=4){.....}  函数中$c&lt;/p&gt;
&lt;p&gt;　　2）形参传值&lt;/p&gt;
&lt;p&gt;　　　　实参变量传值给形参变量。两种传值方式&lt;/p&gt;
&lt;p&gt;　　　　　　值传递： 默认。一般参数传值都是值传递&lt;/p&gt;
&lt;p&gt;　　　　　　引用传递： 需要在形参前面加 “&amp;amp;”符号。 如 function f($a, &amp;amp;$b){....}  中 $b就是引用传递&lt;/p&gt;
&lt;p&gt;　　　　　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1254673/201807/1254673-20180705104856008-1070602118.png&quot; alt=&quot;&quot; width=&quot;568&quot; height=&quot;124&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　3） 参数的数量&lt;/p&gt;
&lt;p&gt;　　　　一般实参数量与形参数量一致。当形参有默认值，可以省略有默认值的实参。但只能从右边往左省略&lt;/p&gt;
&lt;p&gt;　　　　特殊情形： 不定义形参，实参任意给出。  如 系统函数 var_dump($v1,$v2,...)&lt;/p&gt;
&lt;p&gt;　　　　　　依赖于3个系统函数：&lt;/p&gt;
&lt;p&gt;　　　　　　　　&lt;span&gt;&lt;strong&gt;func_get_args() : &lt;/strong&gt;&lt;/span&gt;    获取实参列表，存入数组。 结果返回一个包含实参列表的数组&lt;/p&gt;
&lt;p&gt;　　　　　　　　&lt;span&gt;&lt;strong&gt;func_get_args($i) :&lt;/strong&gt;&lt;/span&gt;  获取第 $i 个实参数据。 $I 从0开始， 返回实参列表的指定项&lt;/p&gt;
&lt;p&gt;　　　　　　　　&lt;span&gt;&lt;strong&gt;func_num_args():&lt;/strong&gt;&lt;/span&gt;   获取实参的数量(个数)&lt;/p&gt;
&lt;p&gt;　　　　　　&lt;a onclick=&quot;window.open('https://images2018.cnblogs.com/blog/1254673/201807/1254673-20180705111819329-1367278878.png','','scrollbars=yes,resizable=yes,left='+(screen.availWidth/2-0)+',top='+(screen.availHeight/2-0)+'');return false;&quot; href=&quot;https://images2018.cnblogs.com/blog/1254673/201807/1254673-20180705111819329-1367278878.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1254673/201807/1254673-20180705111819329-1367278878.png&quot; alt=&quot;&quot; width=&quot;596&quot; height=&quot;269&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;&lt;span&gt;　　函数的返回值&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;　　可以返回数据，也可以不返回&lt;/p&gt;
&lt;p&gt;　　　　返回数据：  return 数据或变量&lt;/p&gt;
&lt;p&gt;　　　　不返回数据： 没有return语句，或有 return 但其后面不接任何数据     &lt;/p&gt;
&lt;p&gt;　　函数中遇到return语句，自动终止函数的执行，返回到调用函数的位置继续执行后续代码&lt;/p&gt;
&lt;h3&gt;&lt;span&gt;　　函数的形式&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;　　1） 常规形式  如 function f(..) {...}&lt;/p&gt;
&lt;p&gt;　　2)    可变函数&lt;/p&gt;
&lt;p&gt;　　　　　　可变变量： 如 $a= &quot;b&quot;;  $b=2;  echo  $$a;  //2     &lt;/p&gt;
&lt;p&gt;　　　　　　可变函数：函数名是一个变量。 如：  function f() {.....}       $v = &quot;f&quot;;     $v();//可变函数 $v() 既 f()&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('795ff150-4091-4353-9bc4-39a553b25778')&quot; readability=&quot;34.5&quot;&gt;&lt;img id=&quot;code_img_closed_795ff150-4091-4353-9bc4-39a553b25778&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_795ff150-4091-4353-9bc4-39a553b25778&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('795ff150-4091-4353-9bc4-39a553b25778',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_795ff150-4091-4353-9bc4-39a553b25778&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;64&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &amp;lt;?&lt;span&gt;php
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;可变函数
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;    //声明了三个函数&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt;     &lt;span&gt;function&lt;/span&gt; jpg() { &lt;span&gt;echo&lt;/span&gt; &quot;&amp;lt;br /&amp;gt; 这是jpg图片&amp;lt;br /&amp;gt;&quot;&lt;span&gt;; }
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;     &lt;span&gt;function&lt;/span&gt; png() { &lt;span&gt;echo&lt;/span&gt; &quot;&amp;lt;br /&amp;gt; 这是png图片&amp;lt;br /&amp;gt;&quot;&lt;span&gt;; }
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;     &lt;span&gt;function&lt;/span&gt; gif() { &lt;span&gt;echo&lt;/span&gt; &quot;&amp;lt;br /&amp;gt; 这是gif图片&amp;lt;br /&amp;gt;&quot;&lt;span&gt;; }
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; 
&lt;span&gt; 9&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;模拟上传的文件名&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt;     &lt;span&gt;$file&lt;/span&gt; = &quot;abc.1.2.png&quot;;   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;用户上传的图片  其后缀可能是png,jpg,gif等
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; 
&lt;span&gt;12&lt;/span&gt; &lt;span&gt;    //strrchr(字符串，指定字符) : 查找指定字符在字符串中最后一次出现直到结尾（包含指定字符）&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt;     &lt;span&gt;$postfix&lt;/span&gt; = &lt;span&gt;strrchr&lt;/span&gt;(&lt;span&gt;$file&lt;/span&gt;,&quot;.&quot;);     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取字符串$file中最后一次出现的“.”之后的所有字符串（包含.）&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt;     &lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$postfix&lt;/span&gt;;  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;结果 .png
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; 
&lt;span&gt;16&lt;/span&gt; &lt;span&gt;    //substr(字符串，开始位置[，长度]) : 返回字符串从开始位置到指定长度的子字符串&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt;     &lt;span&gt;$postfix&lt;/span&gt; = &lt;span&gt;substr&lt;/span&gt;(&lt;span&gt;$postfix&lt;/span&gt;,1);   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;获得该字符串从位置1开始之后的所有字符串  既 png&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt;     &lt;span&gt;$postfix&lt;/span&gt;();   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;可变函数  调用png()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;可变函数Demo&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;　　3）  匿名函数&lt;/p&gt;
&lt;p&gt;　　　　匿名函数： 没有名字的函数。有两种形式的匿名函数&lt;/p&gt;
&lt;p&gt;　　　　　　形式1： 将一个匿名函数 赋值  给一个变量。  该变量就代表该匿名函数&lt;/p&gt;
&lt;p&gt;　　　　　　　　如：＄var  = function() { //函数体  };    $var(); //调用匿名函数，类似可变函数&lt;/p&gt;
&lt;p&gt;　　　　　　形式2： 将匿名函数作为 “实参” 来使用&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('8947a5bd-21f1-4e8e-9779-413c3da7a41c')&quot; readability=&quot;35.5&quot;&gt;&lt;img id=&quot;code_img_closed_8947a5bd-21f1-4e8e-9779-413c3da7a41c&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_8947a5bd-21f1-4e8e-9779-413c3da7a41c&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('8947a5bd-21f1-4e8e-9779-413c3da7a41c',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_8947a5bd-21f1-4e8e-9779-413c3da7a41c&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;66&quot;&gt;
&lt;pre&gt;
&lt;span&gt;function&lt;/span&gt; add(&lt;span&gt;$x&lt;/span&gt;,&lt;span&gt;$y&lt;/span&gt;,&lt;span&gt;$z&lt;/span&gt;&lt;span&gt;){
    &lt;/span&gt;&lt;span&gt;$sum&lt;/span&gt; = &lt;span&gt;$x&lt;/span&gt; + &lt;span&gt;$y&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;$diff&lt;/span&gt; = &lt;span&gt;$x&lt;/span&gt;-&lt;span&gt;$y&lt;/span&gt;&lt;span&gt;;        
    &lt;/span&gt;&lt;span&gt;$z&lt;/span&gt;( &lt;span&gt;$sum&lt;/span&gt;,&lt;span&gt;$diff&lt;/span&gt;);   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;可变函数&lt;/span&gt;
&lt;span&gt;}
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;调用add函数&lt;/span&gt;
add(8,5, &lt;span&gt;function&lt;/span&gt;(&lt;span&gt;$x&lt;/span&gt;,&lt;span&gt;$y&lt;/span&gt;&lt;span&gt;){
    &lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &quot;x=&lt;span&gt;$x&lt;/span&gt;, y=&lt;span&gt;$y&lt;/span&gt;&quot;;  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;x=13 , y=3&lt;/span&gt;
});
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;匿名函数形式2Demo&lt;/span&gt;&lt;/div&gt;
&lt;h3&gt;&lt;span&gt;　　作用域&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;　　php中变量的作用域有3个：&lt;/p&gt;
&lt;p&gt;　　　　1） 局部作用域： 函数内部的变量&lt;/p&gt;
&lt;p&gt;　　　　2） 全局作用域： 对所有代码范围。 系统预定的超全局数组，如 $_GET, $_POST, $_COOKIE,....&lt;/p&gt;
&lt;p&gt;　　　　3） 超全局作用域:  函数外部的变量&lt;/p&gt;
&lt;h3&gt;&lt;span&gt;　　访问限制：&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;　　　　1） &lt;strong&gt;局部范围&lt;/strong&gt;  不能访问   &lt;strong&gt;全局变量&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('4603f37a-67cb-43a0-964b-b52ead94c585')&quot; readability=&quot;31.5&quot;&gt;&lt;img id=&quot;code_img_closed_4603f37a-67cb-43a0-964b-b52ead94c585&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_4603f37a-67cb-43a0-964b-b52ead94c585&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('4603f37a-67cb-43a0-964b-b52ead94c585',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_4603f37a-67cb-43a0-964b-b52ead94c585&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;58&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;$v1&lt;/span&gt; = 1;  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;全局变量&lt;/span&gt;
&lt;span&gt;2&lt;/span&gt; &lt;span&gt;function&lt;/span&gt;&lt;span&gt; f1() { 
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;     &lt;span&gt;echo&lt;/span&gt; &quot;&amp;lt;br /&amp;gt;在函数内部访问外部：v1 =&quot;.&lt;span&gt;$v1&lt;/span&gt;;   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;局部范围不能访问全局变量&lt;/span&gt;
&lt;span&gt;4&lt;/span&gt; &lt;span&gt;} 
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt; f1();    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;报错   Notice: Undefined variable: v1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;局部范围不能访问全局变量Demo&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;　　　　2）全局范围 不能访问 局部作用域的变量&lt;/p&gt;
&lt;p&gt;　　　　　　函数内部的变量，通常调用结束，就被销毁了&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('dda72c2b-9b99-4777-9087-e003759f079a')&quot; readability=&quot;32&quot;&gt;&lt;img id=&quot;code_img_closed_dda72c2b-9b99-4777-9087-e003759f079a&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_dda72c2b-9b99-4777-9087-e003759f079a&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('dda72c2b-9b99-4777-9087-e003759f079a',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_dda72c2b-9b99-4777-9087-e003759f079a&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;59&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;2-全局范围不能访问局部变量    &lt;/span&gt;
&lt;span&gt;2&lt;/span&gt; &lt;span&gt;function&lt;/span&gt;&lt;span&gt; f2() {
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;     &lt;span&gt;$v2&lt;/span&gt; = 1;    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;局部变量&lt;/span&gt;
&lt;span&gt;4&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; &lt;span&gt;$v2&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt; &lt;span&gt;$res&lt;/span&gt; =&lt;span&gt; f2(); 
&lt;/span&gt;&lt;span&gt;7&lt;/span&gt; &lt;span&gt;echo&lt;/span&gt; &quot;在函数外部访问局部变量：v2 =&quot;.&lt;span&gt;$v2&lt;/span&gt;;  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;Notice: Undefined variable: v2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;全局范围不能访问局部变量Demo&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;　　　　3） 特殊的局部变量： 静态变量&lt;/p&gt;
&lt;p&gt;　　　　　　局部范围中静态变量：函数调用后一直存在。&lt;/p&gt;
&lt;p&gt;　　　　　　&lt;strong&gt;在函数内部赋予初值，只会执行一次&lt;/strong&gt;（赋值语句只执行一次）。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('8ae33aef-258a-47da-afdd-5b8b0b250a89')&quot; readability=&quot;33&quot;&gt;&lt;img id=&quot;code_img_closed_8ae33aef-258a-47da-afdd-5b8b0b250a89&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_8ae33aef-258a-47da-afdd-5b8b0b250a89&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('8ae33aef-258a-47da-afdd-5b8b0b250a89',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_8ae33aef-258a-47da-afdd-5b8b0b250a89&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;61&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &amp;lt;?&lt;span&gt;php
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt; * 函数中的静态变量特点：
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt; *   1.函数调用结束不会被销毁
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt; *   2.不管调用几次，函数中的静态变量的赋初值只执行1次，后面的调用会使用函数上次的值
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;  &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt;     &lt;span&gt;function&lt;/span&gt;&lt;span&gt; f () {
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;         &lt;span&gt;static&lt;/span&gt; &lt;span&gt;$c&lt;/span&gt; = 0;   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;静态局部变量， 值会保留&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt;         &lt;span&gt;$c&lt;/span&gt;++;            &lt;span&gt;//&lt;/span&gt;&lt;span&gt;此数据会持续保留&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt;         &lt;span&gt;$d&lt;/span&gt; = 0;  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;普通局部变量，调用结束就会销毁&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt;         &lt;span&gt;$d&lt;/span&gt;++&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;         &lt;span&gt;echo&lt;/span&gt; &quot;&amp;lt;br /&amp;gt;c = &lt;span&gt;$c&lt;/span&gt;, d = &lt;span&gt;$d&lt;/span&gt;  &quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;         &lt;span&gt;echo&lt;/span&gt; &quot;&amp;lt;br /&amp;gt;此函数调用的次数： &lt;span&gt;$c&lt;/span&gt;&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;    f();
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;    f();
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;     f();  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;d值永远不变是1，$c每次调用累加&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;静态变量demo&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;　　　　4) 局部范围  使用  全局变量 方法&lt;/p&gt;
&lt;p&gt;　　　　　　方式1： 使用global关键字&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('240bd89e-288c-42a8-9cef-3a18946fae7d')&quot; readability=&quot;33&quot;&gt;&lt;img id=&quot;code_img_closed_240bd89e-288c-42a8-9cef-3a18946fae7d&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_240bd89e-288c-42a8-9cef-3a18946fae7d&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('240bd89e-288c-42a8-9cef-3a18946fae7d',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_240bd89e-288c-42a8-9cef-3a18946fae7d&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;61&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt; *  在局部环境使用全局变量有2种方式：
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt; *     方式1： global 全局变量名同名的变量
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt; *     方式2： $GLOBALS['全局变量名']
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt; *     两者有细微的区别：  $GLOBALS指代的就是全局变量，
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt; *         而用global声明的，相当于在函数内部声明了一个同名变量，指向全局变量值的地址，如果unset，只是删除了引用
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;  &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt; 
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;方式1： global 全局变量名同名的变量&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt;     &lt;span&gt;$v4&lt;/span&gt; = 4;   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;全局变量&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt;     &lt;span&gt;function&lt;/span&gt;&lt;span&gt; f4() {
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;在函数中使用global来声明一个要使用的全局变量的同名局部变量&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt;         &lt;span&gt;global&lt;/span&gt; &lt;span&gt;$v4&lt;/span&gt;; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;$v4是局部变量，只是跟全局的$v4同名
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;                    //实际情况是： 此时外部v4变量跟内部的v4变量,
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;                    //共同指向一个数据区--引用关系&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt;         &lt;span&gt;echo&lt;/span&gt; &quot;&amp;lt;br /&amp;gt;在局部访问全局变量v4 = &quot;.&lt;span&gt;$v4&lt;/span&gt;;   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;4 可以直接调用了&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt;         &lt;span&gt;$v4&lt;/span&gt; = 100; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;改变全局变量的值&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt;         &lt;span&gt;unset&lt;/span&gt;(&lt;span&gt;$v4&lt;/span&gt;);  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;释放函数内部的引用，实际全局变量仍然存在&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;    f4();
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;     &lt;span&gt;echo&lt;/span&gt; &quot;&amp;lt;br /&amp;gt;在全局再次访问v4=&quot;.&lt;span&gt;$v4&lt;/span&gt;;  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;在函数内部被改变了&lt;/span&gt;
&lt;span&gt;22&lt;/span&gt;     &lt;span&gt;echo&lt;/span&gt; &quot;&amp;lt;hr /&amp;gt;&quot;;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;global方式demo&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;　　　　　　方式2： 使用超全局数组变量$GLOBALS&lt;/p&gt;
&lt;p&gt;　　　　　　　　如果对$GLOBALS变量的某个单元进行unset. 如 unset($GLOBALS['var']); 则其对应销毁该变量（$var）&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('2bd0b8a4-1840-4432-adea-e3f210b26d48')&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_2bd0b8a4-1840-4432-adea-e3f210b26d48&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_2bd0b8a4-1840-4432-adea-e3f210b26d48&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('2bd0b8a4-1840-4432-adea-e3f210b26d48',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_2bd0b8a4-1840-4432-adea-e3f210b26d48&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;方式2： $GLOBALS['全局变量名']
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;//使用$GLOBALS超全局变量&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt;     &lt;span&gt;$v5&lt;/span&gt; = 4;   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;全局变量&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt;     &lt;span&gt;function&lt;/span&gt;&lt;span&gt; f() {
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;         &lt;span&gt;echo&lt;/span&gt; &quot;在局部访问全局变量v5 = &quot;.&lt;span&gt;$GLOBALS&lt;/span&gt;[&quot;v5&quot;];   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;在局部访问全局变量v5 = 4&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt;         &lt;span&gt;$GLOBALS&lt;/span&gt;[&quot;v5&quot;] = 100&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;    f();
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;     &lt;span&gt;echo&lt;/span&gt; &quot;&amp;lt;br /&amp;gt;在全局再次访问v5=&quot;.&lt;span&gt;$v5&lt;/span&gt;;  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;v5=100&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt;     &lt;span&gt;echo&lt;/span&gt; &quot;&amp;lt;br /&amp;gt;在全局再次访问v5=&quot;.&lt;span&gt;$GLOBALS&lt;/span&gt;[&quot;v5&quot;];  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;v5=100&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;$GLOBALS方式Demo&lt;/span&gt;&lt;/div&gt;
&lt;h3&gt;&lt;span&gt;　　函数编程思想&lt;/span&gt;&lt;/h3&gt;
&lt;h4&gt;&lt;span&gt;　　递归思想&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;　　　　递归（迭代）函数： 在函数内部调用自己的函数&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('b9e3dba5-8e9b-4a0d-8a1e-1f24caa6a098')&quot; readability=&quot;31.5&quot;&gt;&lt;img id=&quot;code_img_closed_b9e3dba5-8e9b-4a0d-8a1e-1f24caa6a098&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_b9e3dba5-8e9b-4a0d-8a1e-1f24caa6a098&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('b9e3dba5-8e9b-4a0d-8a1e-1f24caa6a098',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_b9e3dba5-8e9b-4a0d-8a1e-1f24caa6a098&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;58&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;function&lt;/span&gt; recursion(&lt;span&gt;$n&lt;/span&gt;&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;(最小一级){   &lt;span&gt;return&lt;/span&gt;&lt;span&gt;   已知的答案  }
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;        &lt;span&gt;$result&lt;/span&gt; = 对recursion(&lt;span&gt;$n&lt;/span&gt;-1&lt;span&gt;)进行简单运算
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;$result&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt; }        
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;基本模式&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;               &lt;img src=&quot;https://images2018.cnblogs.com/blog/1254673/201807/1254673-20180705124919886-410129212.png&quot; alt=&quot;&quot; width=&quot;564&quot; height=&quot;328&quot;/&gt;&lt;/p&gt;
&lt;h4&gt;&lt;span&gt;　　递推思想&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;　　　　 前一个答案，推出后一个答案&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('b6ea5a23-92a2-47ac-816e-9f7740e544ff')&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_b6ea5a23-92a2-47ac-816e-9f7740e544ff&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_b6ea5a23-92a2-47ac-816e-9f7740e544ff&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('b6ea5a23-92a2-47ac-816e-9f7740e544ff',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_b6ea5a23-92a2-47ac-816e-9f7740e544ff&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &amp;lt;?&lt;span&gt;php
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 求5的阶乘
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;//1-初步&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;$recursion1&lt;/span&gt; = 1; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;表示1的阶乘(已知)&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;$recursion2&lt;/span&gt; = &lt;span&gt;$recursion1&lt;/span&gt; * 2; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;2的阶乘&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;$recursion3&lt;/span&gt; = &lt;span&gt;$recursion2&lt;/span&gt; * 3; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;3的阶乘&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;$recursion4&lt;/span&gt; = &lt;span&gt;$recursion3&lt;/span&gt; * 4; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;4的阶乘&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;$recursion5&lt;/span&gt; = &lt;span&gt;$recursion4&lt;/span&gt; * 5; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;5的阶乘
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; 
&lt;span&gt;11&lt;/span&gt; &lt;span&gt;//2-使用一个变量实现&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt; &lt;span&gt;$recursion&lt;/span&gt; = 1;  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;表示1的阶乘(已知)&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt; &lt;span&gt;$recursion&lt;/span&gt; = &lt;span&gt;$recursion&lt;/span&gt; * 2; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;2的阶乘&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt; &lt;span&gt;$recursion&lt;/span&gt; = &lt;span&gt;$recursion&lt;/span&gt; * 3; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;3的阶乘&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt; &lt;span&gt;$recursion&lt;/span&gt; = &lt;span&gt;$recursion&lt;/span&gt; * 4; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;4的阶乘&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt; &lt;span&gt;$recursion&lt;/span&gt; = &lt;span&gt;$recursion&lt;/span&gt; * 5; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;5的阶乘
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; 
&lt;span&gt;18&lt;/span&gt; &lt;span&gt;//3-上述递推的规律&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt; &lt;span&gt;$recursion&lt;/span&gt; = 1;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;表示1的阶乘(已知)&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt; &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;$i&lt;/span&gt;=2; &lt;span&gt;$i&lt;/span&gt;&amp;lt;=5;++&lt;span&gt;$i&lt;/span&gt;&lt;span&gt;){
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;     &lt;span&gt;$recursion&lt;/span&gt; = &lt;span&gt;$recursion&lt;/span&gt; * &lt;span&gt;$i&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; 
&lt;span&gt;24&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;4-通过上述思路，进一步转换  ==》 前一个答案，推出后一个答案&lt;/span&gt;
&lt;span&gt;25&lt;/span&gt;     &lt;span&gt;$pre&lt;/span&gt; = 1;  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;前一个已知的答案： 这是第一个，1的阶乘&lt;/span&gt;
&lt;span&gt;26&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;$i&lt;/span&gt; = 2; &lt;span&gt;$i&lt;/span&gt; &amp;lt;= 5; ++&lt;span&gt;$i&lt;/span&gt;) {  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;意图求得从2到5的“每一个阶乘”&lt;/span&gt;
&lt;span&gt;27&lt;/span&gt;         &lt;span&gt;$next&lt;/span&gt; = &lt;span&gt;$pre&lt;/span&gt; * &lt;span&gt;$i&lt;/span&gt;;   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;要求的结果是“前一个结果”经过简单乘法运算而得到&lt;/span&gt;
&lt;span&gt;28&lt;/span&gt;         &lt;span&gt;echo&lt;/span&gt; &quot;&amp;lt;br /&amp;gt;{&lt;span&gt;$i&lt;/span&gt;}的阶乘是{&lt;span&gt;$next&lt;/span&gt;}&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;         &lt;span&gt;$pre&lt;/span&gt; = &lt;span&gt;$next&lt;/span&gt;;   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;将当前求得的“结果”，又当成“前一个”，以供下一次使用&lt;/span&gt;
&lt;span&gt;30&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;     &lt;span&gt;echo&lt;/span&gt; &quot;&amp;lt;br /&amp;gt;结果为： &quot;.&lt;span&gt;$next&lt;/span&gt;;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;递推求阶乘demo&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;　　　既能使用递归算法解决，又能使用递推算法解决，则因该使用递推算法&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('a928fa00-7e92-4671-8abe-bea56fdfe961')&quot; readability=&quot;35.5&quot;&gt;&lt;img id=&quot;code_img_closed_a928fa00-7e92-4671-8abe-bea56fdfe961&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_a928fa00-7e92-4671-8abe-bea56fdfe961&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('a928fa00-7e92-4671-8abe-bea56fdfe961',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_a928fa00-7e92-4671-8abe-bea56fdfe961&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;66&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;     &amp;lt;?&lt;span&gt;php
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 数列 1,1,2,3,5,8,13，……
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;        说明：
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;            第1项是1，第2项是1 (都是已知)
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;            其他项，是其前两项的和
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;        求： 第20项：
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;1-递推规律&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;$pre1&lt;/span&gt; = &lt;span&gt;$pre2&lt;/span&gt; = 1&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;$result&lt;/span&gt; = &lt;span&gt;$pre1&lt;/span&gt; + &lt;span&gt;$pre2&lt;/span&gt;;  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;第3项 = 第1项 + 第2项&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt;     &lt;span&gt;$pre1&lt;/span&gt; = &lt;span&gt;$pre2&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;     &lt;span&gt;$pre2&lt;/span&gt; = &lt;span&gt;$result&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;$result&lt;/span&gt; = &lt;span&gt;$pre1&lt;/span&gt; + &lt;span&gt;$pre2&lt;/span&gt;;   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;第4项= 第2项 + 第3项&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt;     &lt;span&gt;$pre1&lt;/span&gt; = &lt;span&gt;$pre2&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;     &lt;span&gt;$pre2&lt;/span&gt; = &lt;span&gt;$result&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;$result&lt;/span&gt; = &lt;span&gt;$pre1&lt;/span&gt; + &lt;span&gt;$pre2&lt;/span&gt;;   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;第5项= 第3项 + 第4项
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; 
&lt;span&gt;18&lt;/span&gt; &lt;span&gt;//根据上述规律简化&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt; &lt;span&gt;$t1&lt;/span&gt; = &lt;span&gt;microtime&lt;/span&gt;(&lt;span&gt;true&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;$pre1&lt;/span&gt; = 1&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;$pre2&lt;/span&gt; = 1&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;$i&lt;/span&gt; = 3; &lt;span&gt;$i&lt;/span&gt; &amp;lt;= 20; &lt;span&gt;$i&lt;/span&gt;++&lt;span&gt;){
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;     &lt;span&gt;$result&lt;/span&gt; = &lt;span&gt;$pre1&lt;/span&gt; + &lt;span&gt;$pre2&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;     &lt;span&gt;$pre1&lt;/span&gt; = &lt;span&gt;$pre2&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;     &lt;span&gt;$pre2&lt;/span&gt; = &lt;span&gt;$result&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; &lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$result&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; &lt;span&gt;$t2&lt;/span&gt; = &lt;span&gt;microtime&lt;/span&gt;(&lt;span&gt;true&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; &lt;span&gt;echo&lt;/span&gt; &quot;&amp;lt;br/&amp;gt;采用递推思想实现耗时：&quot;.(&lt;span&gt;$t2&lt;/span&gt;-&lt;span&gt;$t1&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; 
&lt;span&gt;31&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*递归思想实现*&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;32&lt;/span&gt; &lt;span&gt;echo&lt;/span&gt; &quot;&amp;lt;hr&amp;gt;&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; &lt;span&gt;function&lt;/span&gt;  shulie(&lt;span&gt;$n&lt;/span&gt;&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt;((&lt;span&gt;$n&lt;/span&gt; == 2) || (&lt;span&gt;$n&lt;/span&gt; == 1&lt;span&gt;)) {
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; 1&lt;span&gt;; 
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt;     &lt;span&gt;$result&lt;/span&gt; = shulie(&lt;span&gt;$n&lt;/span&gt;-2) + shulie(&lt;span&gt;$n&lt;/span&gt;-1&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; &lt;span&gt;$result&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt; &lt;span&gt;$t1&lt;/span&gt; = &lt;span&gt;microtime&lt;/span&gt;(&lt;span&gt;true&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt; &lt;span&gt;$v1&lt;/span&gt; = shulie(20&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt; &lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$v1&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt; &lt;span&gt;$t2&lt;/span&gt; = &lt;span&gt;microtime&lt;/span&gt;(&lt;span&gt;true&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt; &lt;span&gt;echo&lt;/span&gt; &quot;&amp;lt;br/&amp;gt;采用递归思想实现耗时：&quot;.(&lt;span&gt;$t2&lt;/span&gt;-&lt;span&gt;$t1&lt;/span&gt;);
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;递归与递推耗时比较&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1254673/201807/1254673-20180705131717061-1369171452.png&quot; alt=&quot;&quot; width=&quot;375&quot; height=&quot;153&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;数组&lt;/h2&gt;
&lt;h3&gt;&lt;span&gt;　　基础&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;　　1） PHP中的数组单元的顺序，与下标无关, 是由其放入的顺序决定。&lt;/p&gt;
&lt;p&gt;　　2） 定义赋值：&lt;/p&gt;
&lt;p&gt;　　　　不写下标，则使用默认下标， 从0开始的整数  如：  $arr = array(1,3,5,7);&lt;/p&gt;
&lt;p&gt;　　　　关联数组，下标是字符串。 如：　＄arr(&quot;a&quot;=&amp;gt;3, &quot;b&quot;=&amp;gt;4);&lt;/p&gt;
&lt;p&gt;　　　　下标： 可以任意设定，可以是数字和字符串混合使用。 如果下标重复，后面覆盖前面&lt;/p&gt;
&lt;p&gt;　　　　　　可以指定下标，不指定则会采用自动下标。 &lt;/p&gt;
&lt;p&gt;　　　　　　自动下标： 其值为之前所有用过的整数下标的最大值+1&lt;/p&gt;
&lt;p&gt;　　　　数组内最后一个逗号可有可无。 如 $arr = array(1,2,3,);&lt;/p&gt;
&lt;p&gt;　　　　&lt;strong&gt;非常规情况的下标的自动转换&lt;/strong&gt;：7.7 = &amp;gt;  7   true =&amp;gt; 1   false =&amp;gt; 0&lt;/p&gt;
&lt;p&gt;　　3） 数组的取值：　如　$val = $arr[1];&lt;/p&gt;
&lt;p&gt;　　4） 数组的分类：　&lt;/p&gt;
&lt;p&gt;　　　　　　按健值分：索引数组， 关联数组， 混合数组&lt;/p&gt;
&lt;p&gt;　　　　　　按数组的维度分：一维，二维，．．．．．　　　&lt;/p&gt;
&lt;p&gt;　　　　　　　　如：$a = array( array(1,2,3), array(4,5,6));&lt;/p&gt;
&lt;p&gt;　　5) 使用&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('578deef9-e59e-4e65-9a91-e283a12fb201')&quot; readability=&quot;34&quot;&gt;&lt;img id=&quot;code_img_closed_578deef9-e59e-4e65-9a91-e283a12fb201&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_578deef9-e59e-4e65-9a91-e283a12fb201&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('578deef9-e59e-4e65-9a91-e283a12fb201',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_578deef9-e59e-4e65-9a91-e283a12fb201&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;63&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &amp;lt;?&lt;span&gt;php
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt; * 求一个一维数组的平均值: 总和/长度
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;  &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt;         &lt;span&gt;$arr&lt;/span&gt; = &lt;span&gt;array&lt;/span&gt;(1,11,111,1111&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;         &lt;span&gt;$len&lt;/span&gt; = &lt;span&gt;count&lt;/span&gt;(&lt;span&gt;$arr&lt;/span&gt;);    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;数组的长度&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt;         &lt;span&gt;$sum&lt;/span&gt; = 0;   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;用于存储总和&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;$i&lt;/span&gt; = 0; &lt;span&gt;$i&lt;/span&gt; &amp;lt; &lt;span&gt;$len&lt;/span&gt;; ++&lt;span&gt;$i&lt;/span&gt;&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;             &lt;span&gt;$sum&lt;/span&gt; += &lt;span&gt;$arr&lt;/span&gt;[&lt;span&gt;$i&lt;/span&gt;&lt;span&gt;];
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;         &lt;span&gt;echo&lt;/span&gt; &quot;&amp;lt;br /&amp;gt;平均值为： &quot;.(&lt;span&gt;$sum&lt;/span&gt;/&lt;span&gt;$len&lt;/span&gt;);  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;平均值为： 308.5&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;求一维数组的平均值&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('78cbfa62-0070-465d-a440-2b4da0a8d8ac')&quot; readability=&quot;38&quot;&gt;&lt;img id=&quot;code_img_closed_78cbfa62-0070-465d-a440-2b4da0a8d8ac&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_78cbfa62-0070-465d-a440-2b4da0a8d8ac&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('78cbfa62-0070-465d-a440-2b4da0a8d8ac',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_78cbfa62-0070-465d-a440-2b4da0a8d8ac&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;71&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt; * 求一个二维数组的平均值: 首先变为一维数组，再求和
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;  &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;$arr&lt;/span&gt; = &lt;span&gt;array&lt;/span&gt;(   &lt;span&gt;array&lt;/span&gt;(1,11,111),
&lt;span&gt; 5&lt;/span&gt;                 &lt;span&gt;array&lt;/span&gt;(2,22,222,2222),
&lt;span&gt; 6&lt;/span&gt;                 &lt;span&gt;array&lt;/span&gt;(3,33,333,3333,33333&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;        );
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;$len&lt;/span&gt; = &lt;span&gt;count&lt;/span&gt;(&lt;span&gt;$arr&lt;/span&gt;);    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 二维数组的长度 其实就是行数&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;$sum&lt;/span&gt; = 0;   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;用于存储总和&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt; &lt;span&gt;$c&lt;/span&gt; = 0;  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;计数&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt; &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;$i&lt;/span&gt; = 0; &lt;span&gt;$i&lt;/span&gt; &amp;lt; &lt;span&gt;$len&lt;/span&gt;; ++&lt;span&gt;$i&lt;/span&gt;&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;     &lt;span&gt;$temp&lt;/span&gt; = &lt;span&gt;array&lt;/span&gt;&lt;span&gt;();
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;     &lt;span&gt;$temp&lt;/span&gt; = &lt;span&gt;$arr&lt;/span&gt;[&lt;span&gt;$i&lt;/span&gt;];   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;存储一维数组&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt;     &lt;span&gt;$len_temp&lt;/span&gt; = &lt;span&gt;count&lt;/span&gt;(&lt;span&gt;$temp&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;$j&lt;/span&gt; = 0; &lt;span&gt;$j&lt;/span&gt; &amp;lt; &lt;span&gt;$len_temp&lt;/span&gt;; ++&lt;span&gt;$j&lt;/span&gt;&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;         &lt;span&gt;$sum&lt;/span&gt; += &lt;span&gt;$temp&lt;/span&gt;[&lt;span&gt;$j&lt;/span&gt;];   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;累加&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt;         ++&lt;span&gt;$c&lt;/span&gt;;    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;计数&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;echo&lt;/span&gt; &quot;&amp;lt;br /&amp;gt;平均值为： &quot;.(&lt;span&gt;$sum&lt;/span&gt;/&lt;span&gt;$c&lt;/span&gt;);   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;平均值为： 3302.1666666667&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;求二维数组的平均值&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('30e38da0-fe52-4932-9e6e-1b4bbc594e86')&quot; readability=&quot;35&quot;&gt;&lt;img id=&quot;code_img_closed_30e38da0-fe52-4932-9e6e-1b4bbc594e86&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_30e38da0-fe52-4932-9e6e-1b4bbc594e86&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('30e38da0-fe52-4932-9e6e-1b4bbc594e86',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_30e38da0-fe52-4932-9e6e-1b4bbc594e86&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;65&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &amp;lt;?&lt;span&gt;php
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt; * 求一个一维数组的最大值： 先假设第一个数组元素是最大值，然后逐个比较得到最大值
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;  &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;$arr&lt;/span&gt; = &lt;span&gt;array&lt;/span&gt;(13,8,5,11,22,2&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;$max&lt;/span&gt; = &lt;span&gt;$arr&lt;/span&gt;[0];   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;将第一项放入$max中，用该变量来存储数组中的最大值&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;$key&lt;/span&gt; = 0;  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;存储最大值的下标&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;$len&lt;/span&gt; = &lt;span&gt;count&lt;/span&gt;(&lt;span&gt;$arr&lt;/span&gt;);   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;数组长度&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;$i&lt;/span&gt; = 0; &lt;span&gt;$i&lt;/span&gt; &amp;lt; &lt;span&gt;$len&lt;/span&gt;; ++&lt;span&gt;$i&lt;/span&gt;&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt;(&lt;span&gt;$arr&lt;/span&gt;[&lt;span&gt;$i&lt;/span&gt;] &amp;gt; &lt;span&gt;$max&lt;/span&gt;&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;         &lt;span&gt;$max&lt;/span&gt; = &lt;span&gt;$arr&lt;/span&gt;[&lt;span&gt;$i&lt;/span&gt;&lt;span&gt;];
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;         &lt;span&gt;$key&lt;/span&gt; = &lt;span&gt;$i&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;echo&lt;/span&gt; &quot;&amp;lt;br /&amp;gt;最大值为: &quot;.&lt;span&gt;$max&lt;/span&gt;.&quot; 最大下标是： &quot;.&lt;span&gt;$key&lt;/span&gt;;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;求一维数组的最大值&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('8eec1d07-30be-4cb9-a42a-aee416f4d085')&quot; readability=&quot;35&quot;&gt;&lt;img id=&quot;code_img_closed_8eec1d07-30be-4cb9-a42a-aee416f4d085&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_8eec1d07-30be-4cb9-a42a-aee416f4d085&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('8eec1d07-30be-4cb9-a42a-aee416f4d085',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_8eec1d07-30be-4cb9-a42a-aee416f4d085&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;65&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &amp;lt;?&lt;span&gt;php
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt; * 求交换一个一维数组的最大值和最小值的位置
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt; * 假设第一个数组元素是最大值==》得到值$max和下标$maxIndex
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt; * 假设第一个数组元素是最小值==》得到值$min和下标$minIndex
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt; * 循环比较，只要比$max大的值，就将大值放到$max中。最小值也是同样形式的处理
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt; * 此时就可以得到最大值，最小值及对应索引，交换位置则只需要一个临时变量就可以实现
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;  &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt;         &lt;span&gt;$arr&lt;/span&gt; = &lt;span&gt;array&lt;/span&gt;(13,8,5,11,22,2&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;      &lt;span&gt;echo&lt;/span&gt; &quot;&amp;lt;br /&amp;gt;交换之前： &quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;      &lt;span&gt;print_r&lt;/span&gt;(&lt;span&gt;$arr&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;         &lt;span&gt;$max&lt;/span&gt; = &lt;span&gt;$arr&lt;/span&gt;[0];   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;将第一项放入$max中，用该变量来存储数组中的最大值&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt;         &lt;span&gt;$key_max&lt;/span&gt; = 0;  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;存储最大值的下标&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt;         &lt;span&gt;$min&lt;/span&gt; = &lt;span&gt;$arr&lt;/span&gt;[0];  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;存储数组最小值&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt;         &lt;span&gt;$key_min&lt;/span&gt; = 0;    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;最小值对应的健值&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt;         &lt;span&gt;$len&lt;/span&gt; = &lt;span&gt;count&lt;/span&gt;(&lt;span&gt;$arr&lt;/span&gt;);   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;数组长度&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;$i&lt;/span&gt; = 0; &lt;span&gt;$i&lt;/span&gt; &amp;lt; &lt;span&gt;$len&lt;/span&gt;; ++&lt;span&gt;$i&lt;/span&gt;&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt;(&lt;span&gt;$arr&lt;/span&gt;[&lt;span&gt;$i&lt;/span&gt;] &amp;gt; &lt;span&gt;$max&lt;/span&gt;&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;                 &lt;span&gt;$max&lt;/span&gt; = &lt;span&gt;$arr&lt;/span&gt;[&lt;span&gt;$i&lt;/span&gt;&lt;span&gt;];
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;                 &lt;span&gt;$key_max&lt;/span&gt; = &lt;span&gt;$i&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt;(&lt;span&gt;$arr&lt;/span&gt;[&lt;span&gt;$i&lt;/span&gt;] &amp;lt; &lt;span&gt;$min&lt;/span&gt;&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;                 &lt;span&gt;$min&lt;/span&gt; = &lt;span&gt;$arr&lt;/span&gt;[&lt;span&gt;$i&lt;/span&gt;&lt;span&gt;];
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;                 &lt;span&gt;$key_min&lt;/span&gt; = &lt;span&gt;$i&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;         &lt;span&gt;echo&lt;/span&gt; &quot;&amp;lt;br /&amp;gt;最大值为: &quot;.&lt;span&gt;$max&lt;/span&gt;.&quot; 最大下标是： &quot;.&lt;span&gt;$key_max&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;         &lt;span&gt;echo&lt;/span&gt; &quot;&amp;lt;br /&amp;gt;最小值为: &quot;.&lt;span&gt;$min&lt;/span&gt;.&quot; 最大下标是： &quot;.&lt;span&gt;$key_min&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;          &lt;span&gt;echo&lt;/span&gt; &quot;&amp;lt;br /&amp;gt;交换之后： &quot;&lt;span&gt;; 
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;           &lt;span&gt;$tmp&lt;/span&gt; = &lt;span&gt;$arr&lt;/span&gt;[&lt;span&gt;$key_max&lt;/span&gt;&lt;span&gt;];
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;           &lt;span&gt;$arr&lt;/span&gt;[&lt;span&gt;$key_max&lt;/span&gt;] = &lt;span&gt;$arr&lt;/span&gt;[&lt;span&gt;$key_min&lt;/span&gt;&lt;span&gt;];
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;           &lt;span&gt;$arr&lt;/span&gt;[&lt;span&gt;$key_min&lt;/span&gt;] = &lt;span&gt;$tmp&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt;          &lt;span&gt;print_r&lt;/span&gt;(&lt;span&gt;$arr&lt;/span&gt;);
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;交换一个一维数组的最大值和最小值的位置&lt;/span&gt;&lt;/div&gt;
&lt;h3&gt;　　遍历数组&lt;/h3&gt;
&lt;h4&gt;&lt;span&gt; 　　foreach 遍历数组&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;　　　　1) foreach中可以使用break 和 continue&lt;/p&gt;
&lt;p&gt;　　　　2) 遍历过程中 值变量 默认的传值方式： 值传递&lt;/p&gt;
&lt;p&gt;　　　　3）遍历过程也可以使用引用传递。  如 foreac($arr as $key=&amp;gt; &amp;amp; $value){....}  &lt;/p&gt;
&lt;p&gt;　　　　　　$key不能使用引用方式&lt;/p&gt;
&lt;p&gt;　　　　4） foreach 默认是在原数组上进行遍历。 如果遍历过程中对数组进行了某种修改或某种指针性操作，则会复制数组后在复制的数组上继续遍历循环（原数组保持不变）&lt;/p&gt;
&lt;p&gt;　　　　5)  foreach中如果值变量是引用传递， 则都是在原数组上进行遍历&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('b047ea29-7895-4df9-adfd-fb1a0181e224')&quot; readability=&quot;32&quot;&gt;&lt;img id=&quot;code_img_closed_b047ea29-7895-4df9-adfd-fb1a0181e224&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_b047ea29-7895-4df9-adfd-fb1a0181e224&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('b047ea29-7895-4df9-adfd-fb1a0181e224',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_b047ea29-7895-4df9-adfd-fb1a0181e224&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;59&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;foreach&lt;/span&gt;(&lt;span&gt;$数组变量名&lt;/span&gt;  &lt;span&gt;as&lt;/span&gt;  [&lt;span&gt;$key&lt;/span&gt; =&amp;gt;]&lt;span&gt;$value&lt;/span&gt;&lt;span&gt; ) {
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;      &lt;span&gt;//&lt;/span&gt;&lt;span&gt;循环体；  这里可以去使用$key 和 $value
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; &lt;span&gt;     //$key 和 $value 就是该遍历语句一次次取得的该数组的每一个单元（项）的下标和对应值。
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; &lt;span&gt;     //且，它总是从数组的开头往后顺序取数据&lt;/span&gt;
&lt;span&gt;5&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;foreach形式&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('38dfa48c-5e72-4c30-bc97-a35cd7d7be0c')&quot; readability=&quot;34.5&quot;&gt;&lt;img id=&quot;code_img_closed_38dfa48c-5e72-4c30-bc97-a35cd7d7be0c&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_38dfa48c-5e72-4c30-bc97-a35cd7d7be0c&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('38dfa48c-5e72-4c30-bc97-a35cd7d7be0c',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_38dfa48c-5e72-4c30-bc97-a35cd7d7be0c&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;64&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt; * foreach遍历流程
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;  &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;$arr&lt;/span&gt; = &lt;span&gt;array&lt;/span&gt;(1=&amp;gt;3, 'a1'=&amp;gt;11, 3=&amp;gt;5, 'mn'=&amp;gt;18, 88=&amp;gt;2&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;foreach&lt;/span&gt;(&lt;span&gt;$arr&lt;/span&gt; &lt;span&gt;as&lt;/span&gt; &lt;span&gt;$key&lt;/span&gt; =&amp;gt; &lt;span&gt;$value&lt;/span&gt;&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;     &lt;span&gt;echo&lt;/span&gt; &quot;&amp;lt;br/&amp;gt;&quot;.&lt;span&gt;$key&lt;/span&gt;.&quot;=&amp;gt;&quot;.&lt;span&gt;$value&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;遍历完成后，此时数组指针位置---超出数组范围&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;$end_key&lt;/span&gt; = &lt;span&gt;key&lt;/span&gt;(&lt;span&gt;$arr&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;$end_value&lt;/span&gt; = &lt;span&gt;current&lt;/span&gt;(&lt;span&gt;$arr&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;echo&lt;/span&gt; &quot;&amp;lt;br /&amp;gt;此时end_key（键）为： &quot;;&lt;span&gt;var_dump&lt;/span&gt;(&lt;span&gt;$end_key&lt;/span&gt;);               &lt;span&gt;//&lt;/span&gt;&lt;span&gt;  null&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt;  &lt;span&gt;echo&lt;/span&gt; &quot;&amp;lt;br /&amp;gt;此时end_value（值）为： &quot;;&lt;span&gt;var_dump&lt;/span&gt;(&lt;span&gt;$end_value&lt;/span&gt;);      &lt;span&gt;//&lt;/span&gt;&lt;span&gt;bool值 false&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;foreach遍历Demo&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('da2a1c25-5959-4f40-9454-2e408b365285')&quot; readability=&quot;36.5&quot;&gt;&lt;img id=&quot;code_img_closed_da2a1c25-5959-4f40-9454-2e408b365285&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_da2a1c25-5959-4f40-9454-2e408b365285&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('da2a1c25-5959-4f40-9454-2e408b365285',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_da2a1c25-5959-4f40-9454-2e408b365285&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;68&quot;&gt;
&lt;pre&gt;
&amp;lt;?&lt;span&gt;php
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;在foreach循环中，”修改数组“--修改不影响遍历的”本来过程“&lt;/span&gt;
  &lt;span&gt;$arr&lt;/span&gt; = &lt;span&gt;array&lt;/span&gt;(1=&amp;gt;3, 'a1'=&amp;gt;11, 3=&amp;gt;5, 'mn'=&amp;gt;18, 88=&amp;gt;2&lt;span&gt;);
  &lt;/span&gt;&lt;span&gt;foreach&lt;/span&gt;(&lt;span&gt;$arr&lt;/span&gt; &lt;span&gt;as&lt;/span&gt; &lt;span&gt;$key&lt;/span&gt; =&amp;gt; &lt;span&gt;$value&lt;/span&gt;&lt;span&gt;) {   
    &lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &quot;&amp;lt;br /&amp;gt; &lt;span&gt;$key&lt;/span&gt; : &lt;span&gt;$value&lt;/span&gt;&quot;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(&lt;span&gt;$key&lt;/span&gt; === 3&lt;span&gt;) {
        &lt;/span&gt;&lt;span&gt;$arr&lt;/span&gt;[99] = &quot;新的数据项&quot;;   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;循环进入此时，对该数组添加了一项，而且是添加到数组的末尾&lt;/span&gt;
&lt;span&gt;    }
  }
  &lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &quot;&amp;lt;br /&amp;gt;此时，数组新的项已经添加进去了 &amp;lt;br /&amp;gt;&quot;&lt;span&gt;;
  &lt;/span&gt;&lt;span&gt;print_r&lt;/span&gt;(&lt;span&gt;$arr&lt;/span&gt;&lt;span&gt;);

  &lt;/span&gt;&lt;span&gt;$value&lt;/span&gt; = &lt;span&gt;current&lt;/span&gt;(&lt;span&gt;$arr&lt;/span&gt;);   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;指向'mn'=&amp;gt;18&lt;/span&gt;
  &lt;span&gt;$key&lt;/span&gt; = &lt;span&gt;key&lt;/span&gt;(&lt;span&gt;$arr&lt;/span&gt;&lt;span&gt;);
  &lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &quot;&amp;lt;br /&amp;gt; 此时数组指针指向的单元为： &lt;span&gt;$key&lt;/span&gt; =&amp;gt; &lt;span&gt;$value&lt;/span&gt;&quot;;   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;'mn'=&amp;gt;18&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; &quot;&amp;lt;hr/&amp;gt;&quot;&lt;span&gt;;


  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;在foreach使用引用传递，则是在原数组上进行
//值变量使用”引用传递“ 则无论如何都是在原数组中进行&lt;/span&gt;
  &lt;span&gt;$arr&lt;/span&gt; = &lt;span&gt;array&lt;/span&gt;(1=&amp;gt;3, 'a1'=&amp;gt;11, 3=&amp;gt;5, 'mn'=&amp;gt;18, 88=&amp;gt;2&lt;span&gt;);
  &lt;/span&gt;&lt;span&gt;foreach&lt;/span&gt;(&lt;span&gt;$arr&lt;/span&gt; &lt;span&gt;as&lt;/span&gt; &lt;span&gt;$key&lt;/span&gt; =&amp;gt; &amp;amp;&lt;span&gt;$value&lt;/span&gt;&lt;span&gt;) {   
    &lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &quot;&amp;lt;br /&amp;gt; &lt;span&gt;$key&lt;/span&gt; : &lt;span&gt;$value&lt;/span&gt;&quot;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(&lt;span&gt;$key&lt;/span&gt; === 3&lt;span&gt;) {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;使用的引用传递，所以也会遍历出来&lt;/span&gt;
        &lt;span&gt;$arr&lt;/span&gt;[99] = &quot;新的数据项&quot;;   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;循环进入此时，对该数组添加了一项，而且是添加到数组的末尾&lt;/span&gt;
&lt;span&gt;    }
  }
  &lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &quot;&amp;lt;br /&amp;gt;遍历后也能看出来：  &amp;lt;br /&amp;gt;&quot;&lt;span&gt;;
  &lt;/span&gt;&lt;span&gt;print_r&lt;/span&gt;(&lt;span&gt;$arr&lt;/span&gt;&lt;span&gt;);
  &lt;/span&gt;&lt;span&gt;$value&lt;/span&gt; = &lt;span&gt;current&lt;/span&gt;(&lt;span&gt;$arr&lt;/span&gt;&lt;span&gt;);   
  &lt;/span&gt;&lt;span&gt;$key&lt;/span&gt; = &lt;span&gt;key&lt;/span&gt;(&lt;span&gt;$arr&lt;/span&gt;&lt;span&gt;);
  &lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &quot;&amp;lt;br /&amp;gt; 此时数组指针指向的单元为： &lt;span&gt;$key&lt;/span&gt; =&amp;gt; &lt;span&gt;$value&lt;/span&gt;&quot;;  
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;遍历过程位置比较Demo&lt;/span&gt;&lt;/div&gt;
&lt;h4&gt;&lt;span&gt;　for+next()遍历数组&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;　　　　对PHP数组，往往不能单纯使用for循环进行遍历。&lt;/p&gt;
&lt;p&gt;　　　　for循环只能循环&quot;下标为连续的整数的数组&quot;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('6d56dc14-b46b-44fd-8872-4d2baf9e2883')&quot; readability=&quot;35&quot;&gt;&lt;img id=&quot;code_img_closed_6d56dc14-b46b-44fd-8872-4d2baf9e2883&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_6d56dc14-b46b-44fd-8872-4d2baf9e2883&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('6d56dc14-b46b-44fd-8872-4d2baf9e2883',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_6d56dc14-b46b-44fd-8872-4d2baf9e2883&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;65&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &amp;lt;?&lt;span&gt;php
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt; * for+next遍历数组
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;  &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;使用for循环和next函数，遍历以下数组&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;$arr&lt;/span&gt; = &lt;span&gt;array&lt;/span&gt;(1=&amp;gt;3, 'a1'=&amp;gt;11, 3=&amp;gt;5, 'mn'=&amp;gt;18, 88=&amp;gt;2&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;$i&lt;/span&gt; = 0; &lt;span&gt;$i&lt;/span&gt; &amp;lt; &lt;span&gt;count&lt;/span&gt;(&lt;span&gt;$arr&lt;/span&gt;); ++&lt;span&gt;$i&lt;/span&gt;) {  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;控制循环次数&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt;     &lt;span&gt;$key&lt;/span&gt; = &lt;span&gt;key&lt;/span&gt;(&lt;span&gt;$arr&lt;/span&gt;);       &lt;span&gt;//&lt;/span&gt;&lt;span&gt;取得当前的键&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt;     &lt;span&gt;$value&lt;/span&gt; = &lt;span&gt;current&lt;/span&gt;(&lt;span&gt;$arr&lt;/span&gt;); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;取得当前的值&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt;     &lt;span&gt;echo&lt;/span&gt; &quot;&amp;lt;br /&amp;gt; &lt;span&gt;$key&lt;/span&gt; =&amp;gt; &lt;span&gt;$value&lt;/span&gt; &quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;     &lt;span&gt;next&lt;/span&gt;(&lt;span&gt;$arr&lt;/span&gt;);   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;数据处理完毕后，将数组指针后移动一位&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果只使用for,则只能针对连续的索引数组有效&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;for+next遍历数组Demo&lt;/span&gt;&lt;/div&gt;
&lt;h4&gt;&lt;span&gt;　   while+each()+list() 遍历数组&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;　　　　each():  先取得一个数组的”当前单元”的下标和值（并放入一个数组），然后将指针移动到下一个单元&lt;/p&gt;
&lt;p&gt;　　　　list():  用于&lt;span&gt;&lt;strong&gt;一次性取得一个数组中从0开始的数字下标的多个单元的值&lt;/strong&gt;&lt;/span&gt;！&lt;br/&gt;　　　　　　形式：   list($变量1，$变量2， $变量3， .....) = $数组&lt;br/&gt;　　　　　　作用：上述代码想当于  $变量1 = $数组[0];$变量2 = $数组[1];$变量3 = $数组[2];..........&lt;br/&gt;　　　　　　注意： &lt;strong&gt;变量的个数，要跟该数组的数字下标的单元对应&lt;/strong&gt;，如果某个变量对应的该数组下标不存在，就会报错&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('4a065fa1-b62b-46af-9a0d-e8babecdf475')&quot; readability=&quot;34.5&quot;&gt;&lt;img id=&quot;code_img_closed_4a065fa1-b62b-46af-9a0d-e8babecdf475&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_4a065fa1-b62b-46af-9a0d-e8babecdf475&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('4a065fa1-b62b-46af-9a0d-e8babecdf475',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_4a065fa1-b62b-46af-9a0d-e8babecdf475&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;64&quot;&gt;
&lt;pre&gt;
&amp;lt;?&lt;span&gt;php
&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
 * each()函数理解
 * 获得的结果是： 0,1索引  key,value关联
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;each的含义和使用方法&lt;/span&gt;
&lt;span&gt;$arr&lt;/span&gt; = &lt;span&gt;array&lt;/span&gt;(1 =&amp;gt; 3, 'a1' =&amp;gt; 11, 3 =&amp;gt; 5&lt;span&gt; );
&lt;/span&gt;&lt;span&gt;$result&lt;/span&gt; = &lt;span&gt;each&lt;/span&gt;(&lt;span&gt;$arr&lt;/span&gt;);    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;取得 1=&amp;gt;3这项，  结果是一个数组&lt;/span&gt;&lt;span&gt;
/*&lt;/span&gt;&lt;span&gt;*
 * Array ( 
 *     [1] =&amp;gt; 3 
 *     [value] =&amp;gt; 3 
 *     [0] =&amp;gt; 1 
 *     [key] =&amp;gt; 1 
 *   ) 
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; &quot;&amp;lt;br /&amp;gt;result为： &quot;; &lt;span&gt;print_r&lt;/span&gt;(&lt;span&gt;$result&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;$result2&lt;/span&gt; = &lt;span&gt;each&lt;/span&gt;(&lt;span&gt;$arr&lt;/span&gt;);    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;取得 a1=&amp;gt;11这项，  结果是一个数组&lt;/span&gt;
&lt;span&gt;echo&lt;/span&gt; &quot;&amp;lt;br /&amp;gt;result为： &quot;; &lt;span&gt;print_r&lt;/span&gt;(&lt;span&gt;$result2&lt;/span&gt;);
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;each()函数Demo&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('6710cb0b-a863-43e7-bd15-25e3aa9565e1')&quot; readability=&quot;41.5&quot;&gt;&lt;img id=&quot;code_img_closed_6710cb0b-a863-43e7-bd15-25e3aa9565e1&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_6710cb0b-a863-43e7-bd15-25e3aa9565e1&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('6710cb0b-a863-43e7-bd15-25e3aa9565e1',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_6710cb0b-a863-43e7-bd15-25e3aa9565e1&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;78&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &amp;lt;?&lt;span&gt;php
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt; * list()函数理解
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt; * 
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;  &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;list()函数&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;$c&lt;/span&gt; = &lt;span&gt;array&lt;/span&gt;(0=&amp;gt;0, 1=&amp;gt;11, 3=&amp;gt;33, 2=&amp;gt;22&lt;span&gt;); 
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; 
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;获得数组第0项的值&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt; &lt;span&gt;list&lt;/span&gt;(&lt;span&gt;$v1&lt;/span&gt;) = &lt;span&gt;$c&lt;/span&gt;;               &lt;span&gt;//&lt;/span&gt;&lt;span&gt;将数组下标为0的项赋值给v1&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt; &lt;span&gt;echo&lt;/span&gt; &quot;&amp;lt;br /&amp;gt;v1 = &lt;span&gt;$v1&lt;/span&gt;&quot;;                        &lt;span&gt;//&lt;/span&gt;&lt;span&gt;v1 = 0
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; 
&lt;span&gt;13&lt;/span&gt; &lt;span&gt;//获得数组第0，1项的值&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt; &lt;span&gt;list&lt;/span&gt;(&lt;span&gt;$s1&lt;/span&gt;,&lt;span&gt;$s2&lt;/span&gt;) = &lt;span&gt;$c&lt;/span&gt;;           &lt;span&gt;//&lt;/span&gt;&lt;span&gt;将数组下标为0,1的项赋值给s1,s2&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt; &lt;span&gt;echo&lt;/span&gt; &quot;&amp;lt;br /&amp;gt;s1 = &lt;span&gt;$s1&lt;/span&gt;, s2 = &lt;span&gt;$s2&lt;/span&gt;&quot;;              &lt;span&gt;//&lt;/span&gt;&lt;span&gt;s1 = 0, s2 = 11
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; 
&lt;span&gt;17&lt;/span&gt; &lt;span&gt;//获得数组第0，1，2项的值&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt; &lt;span&gt;list&lt;/span&gt;(&lt;span&gt;$m1&lt;/span&gt;,&lt;span&gt;$m2&lt;/span&gt;,&lt;span&gt;$m3&lt;/span&gt;) = &lt;span&gt;$c&lt;/span&gt;;       &lt;span&gt;//&lt;/span&gt;&lt;span&gt;将数组下标为0,1,2的项赋值给m1,m2,m3&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt; &lt;span&gt;echo&lt;/span&gt; &quot;&amp;lt;br /&amp;gt;m1 = &lt;span&gt;$m1&lt;/span&gt;, m2 = &lt;span&gt;$m2&lt;/span&gt;, m3 = &lt;span&gt;$m3&lt;/span&gt;&quot;;    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;m1 = 0, m2 = 11, m3 = 22&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;list()函数Demo&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('9c1271a3-5697-40bc-a765-d823b486f463')&quot; readability=&quot;35.5&quot;&gt;&lt;img id=&quot;code_img_closed_9c1271a3-5697-40bc-a765-d823b486f463&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_9c1271a3-5697-40bc-a765-d823b486f463&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('9c1271a3-5697-40bc-a765-d823b486f463',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_9c1271a3-5697-40bc-a765-d823b486f463&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;66&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &amp;lt;?&lt;span&gt;php
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt; * list()函数理解
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt; * 下面数组中没有索引为1的数组元素，使用list取出2个值时会报错
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;  &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;list()函数&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt; 
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;$arr&lt;/span&gt; = &lt;span&gt;array&lt;/span&gt;('value'=&amp;gt;5, 0=&amp;gt;1, 'key'=&amp;gt;1); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;此时该数组中没有下标1的数组元素
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; 
&lt;span&gt;10&lt;/span&gt; &lt;span&gt;//Notice: Undefined offset: 1 &lt;/span&gt;
&lt;span&gt;11&lt;/span&gt; &lt;span&gt;list&lt;/span&gt;(&lt;span&gt;$key&lt;/span&gt;, &lt;span&gt;$value&lt;/span&gt;) = &lt;span&gt;$arr&lt;/span&gt;;  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;分别取得下标为0,1的数据        下标为1的是没有的&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt; 
&lt;span&gt;13&lt;/span&gt; &lt;span&gt;echo&lt;/span&gt; &quot;&amp;lt;br /&amp;gt;key = &lt;span&gt;$key&lt;/span&gt;, value = &lt;span&gt;$value&lt;/span&gt;&quot;;    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;  key = 1, value =  &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;list只能取得连续索引数组的值&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('db89dcd1-03c0-4d3f-86b4-4b0d8c96695b')&quot; readability=&quot;38&quot;&gt;&lt;img id=&quot;code_img_closed_db89dcd1-03c0-4d3f-86b4-4b0d8c96695b&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_db89dcd1-03c0-4d3f-86b4-4b0d8c96695b&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('db89dcd1-03c0-4d3f-86b4-4b0d8c96695b',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_db89dcd1-03c0-4d3f-86b4-4b0d8c96695b&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;71&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &amp;lt;?&lt;span&gt;php
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt; * while+each+list 遍历数组
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;  &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;while+each+list方式遍历
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;//根据list只能遍历索引数组的特点,使用each取出数组的值，each既能得到数组元素每一项的关联数组也能得到索引数组&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt;  &lt;span&gt;$arr&lt;/span&gt; = &lt;span&gt;array&lt;/span&gt;(1=&amp;gt;3, 'a1'=&amp;gt;11, 3=&amp;gt;5, 'mn'=&amp;gt;18, 88=&amp;gt;2&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;while&lt;/span&gt;(&lt;span&gt;list&lt;/span&gt;(&lt;span&gt;$key&lt;/span&gt;,&lt;span&gt;$value&lt;/span&gt;) = &lt;span&gt;each&lt;/span&gt;(&lt;span&gt;$arr&lt;/span&gt;)) {  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;模式化的写法&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt;     &lt;span&gt;echo&lt;/span&gt; &lt;span&gt;$key&lt;/span&gt;,&quot;=&amp;gt;&quot;.&lt;span&gt;$value&lt;/span&gt;.&quot;&amp;lt;br/&amp;gt;&quot;;   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;输出 1=&amp;gt;3, a1=&amp;gt;11, 3=&amp;gt;5, mn=&amp;gt;18, 88=&amp;gt;2&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;while+each+list遍历数组Demo&lt;/span&gt;&lt;/div&gt;
&lt;h3&gt;&lt;span&gt;　　排序　　&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt; 　　1) sort()：   值排序，键重新索引&lt;/p&gt;
&lt;p&gt;　     2) asort():  值排序，键保留　&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('5eb5a6a8-d5d1-460e-8d4f-ff738243c39d')&quot; readability=&quot;37.5&quot;&gt;&lt;img id=&quot;code_img_closed_5eb5a6a8-d5d1-460e-8d4f-ff738243c39d&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_5eb5a6a8-d5d1-460e-8d4f-ff738243c39d&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('5eb5a6a8-d5d1-460e-8d4f-ff738243c39d',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_5eb5a6a8-d5d1-460e-8d4f-ff738243c39d&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;70&quot;&gt;
&lt;pre&gt;
&amp;lt;?php
header(&quot;Content-type:text/html;charset=utf-8&quot;);
/**
 * 数组排序
 *     sort($arr): 对数组排序
 *         bool sort ( array &amp;amp;$array [, int $sort_flags = SORT_REGULAR ] )
 *         数组单元按升序排序
 *         参数2： 排序类型标记，可以设置作为数值或字符串进行比较
 *         注意：此函数为 array 中的元素赋与新的键名。这将删除原有的键名，而不是仅仅将键名重新排序。
 *    asort: 对数组进行排序并保持索引关系
 *        bool asort ( array &amp;amp;$array [, int $sort_flags = SORT_REGULAR ] )
 *        
 */
//sort排序
    //值是排序了，但健值却丢了
        $arr = array(1=&amp;gt;3, 'a1'=&amp;gt;11, 3=&amp;gt;5, 'mn'=&amp;gt;18, 88=&amp;gt;2);
        echo &quot;&amp;lt;br /&amp;gt;排序前; &quot;; print_r($arr);
        sort($arr);
        echo &quot;&amp;lt;br /&amp;gt;排序后; &quot;; print_r($arr);

//asort排序
        //值排序，健值保留
        $arr = array(1=&amp;gt;3, 'a1'=&amp;gt;11, 3=&amp;gt;5, 'mn'=&amp;gt;18, 88=&amp;gt;2);
        echo &quot;&amp;lt;br /&amp;gt;排序前; &quot;; print_r($arr);
        asort($arr);
        echo &quot;&amp;lt;br /&amp;gt;排序后; &quot;; print_r($arr);
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;sort与 asort排序Demo&lt;/span&gt;&lt;/div&gt;
&lt;h3&gt;　&lt;span&gt;　数组操作算法&lt;/span&gt;&lt;/h3&gt;
&lt;h4&gt;&lt;span&gt;　　冒泡排序&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;　　　　冒泡排序算法: 一趟趟从左往右进行相邻单元的两两比较，凡是2个元素的顺序不是目标顺序，就将他们进行交换。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('6f1b3ce7-6b97-4e23-be97-36edc846b02a')&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_6f1b3ce7-6b97-4e23-be97-36edc846b02a&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_6f1b3ce7-6b97-4e23-be97-36edc846b02a&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('6f1b3ce7-6b97-4e23-be97-36edc846b02a',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_6f1b3ce7-6b97-4e23-be97-36edc846b02a&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
1) 从数组的左边开始，依次两两比较相邻的2个数据的大小。

2)      如果发现左边的比右边的大，则将他们进行交换。

3)      这样进行”一趟“之后，必然可以确定最大的一个数据放在最右边

4)      按此方式”对剩余数据“继续进行下一趟，则会确定这些剩余数据的最大值放在剩余位置的最右边
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;冒泡排序的过程&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('aaf73d95-72ed-4a38-878d-9fb7da46edc7')&quot; readability=&quot;63.5&quot;&gt;&lt;img id=&quot;code_img_closed_aaf73d95-72ed-4a38-878d-9fb7da46edc7&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_aaf73d95-72ed-4a38-878d-9fb7da46edc7&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('aaf73d95-72ed-4a38-878d-9fb7da46edc7',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_aaf73d95-72ed-4a38-878d-9fb7da46edc7&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;122&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &amp;lt;?&lt;span&gt;php
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;header&lt;/span&gt;(&quot;Content-type:text/html;charset=utf-8&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt; * 冒泡排序算法
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt; *     思路：
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt; *         从数组的左边开始，依次相邻两两元素比较，左边大则交换位置，一趟下来，最大值到了最右边
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt; *         剩下数据按上述方式继续比较
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt; *         
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt; *     规律总结：（ 如假设： $arr= (4,3,1,5);）
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt; *         $arr的长度为n（数组有n个元素）      ---此时有4个元素
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt; *         比较的趟数： n-1趟                  ---比较3趟
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt; *         每一趟比上一趟数据少一个。第一趟比较次数： n-1次      ---第一次比较3次   
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt; *         左边大于右边则进行位置交换
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;  &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;冒泡法排序：&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt; &lt;span&gt;$arr&lt;/span&gt; = &lt;span&gt;array&lt;/span&gt;(9,3,5,8,2,7);  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;长度是6 ==》 比较的趟数是5，比较的次数：5,4,3,2,1 既$len-1-$i&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt; &lt;span&gt;echo&lt;/span&gt; &quot;&amp;lt;br /&amp;gt;排序之前： &quot;; &lt;span&gt;print_r&lt;/span&gt;(&lt;span&gt;$arr&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;$len&lt;/span&gt; = &lt;span&gt;count&lt;/span&gt;(&lt;span&gt;$arr&lt;/span&gt;);   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;统计数组的长度&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt; &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;$i&lt;/span&gt; = 0; &lt;span&gt;$i&lt;/span&gt; &amp;lt; &lt;span&gt;$len&lt;/span&gt; -1; ++&lt;span&gt;$i&lt;/span&gt;) {   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;比较的趟数&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;$j&lt;/span&gt; = 0; &lt;span&gt;$j&lt;/span&gt; &amp;lt; &lt;span&gt;$len&lt;/span&gt; -1 - &lt;span&gt;$i&lt;/span&gt;; ++&lt;span&gt;$j&lt;/span&gt;) {   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;每趟比较的次数 $j当作下标使用&lt;/span&gt;
&lt;span&gt;21&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;(&lt;span&gt;$arr&lt;/span&gt;[&lt;span&gt;$j&lt;/span&gt;] &amp;gt; &lt;span&gt;$arr&lt;/span&gt;[&lt;span&gt;$j&lt;/span&gt; + 1&lt;span&gt;]) {
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;进行交换&lt;/span&gt;
&lt;span&gt;23&lt;/span&gt;             &lt;span&gt;$t&lt;/span&gt; = &lt;span&gt;$arr&lt;/span&gt;[&lt;span&gt;$j&lt;/span&gt;&lt;span&gt;];
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;             &lt;span&gt;$arr&lt;/span&gt;[&lt;span&gt;$j&lt;/span&gt;] = &lt;span&gt;$arr&lt;/span&gt;[&lt;span&gt;$j&lt;/span&gt; + 1&lt;span&gt;];
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;             &lt;span&gt;$arr&lt;/span&gt;[&lt;span&gt;$j&lt;/span&gt; + 1] = &lt;span&gt;$t&lt;/span&gt;&lt;span&gt; ;
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; &lt;span&gt;echo&lt;/span&gt; &quot;&amp;lt;br /&amp;gt;排序之后： &quot;; &lt;span&gt;print_r&lt;/span&gt;(&lt;span&gt;$arr&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; &lt;span&gt; *  for($i = 0; $i &amp;lt; 5; ++$i)  //趟数
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; &lt;span&gt; *      for($j = 0; $j &amp;lt; 5 - $i; ++$j) //每一趟比较的次数
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; &lt;span&gt; *          if($arr[$j] &amp;gt; $arr[$j + 1]) {..}
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; &lt;span&gt; *  第1趟：  9,3,5,8,2,7  =》 3,5,8,2,7,9
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt; &lt;span&gt; *  第2趟    3,5,8,2,7,9  =》 3,5,2,7,8,9
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt; &lt;span&gt; *  第3趟    3,5,2,7,8,9  =》 3,5,2,7,8,9
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt; &lt;span&gt; *  第4趟    3,5,2,7,8,9  =》 3,2,5,7,8,9
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt; &lt;span&gt; *  第5趟    3,2,5,7,8,9  =》 2,3,5,7,8,9
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt;  &lt;span&gt;*/&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;冒泡排序Demo分析&lt;br/&gt;&lt;/span&gt;&lt;/div&gt;
&lt;h4&gt;&lt;span&gt;　　选择排序&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;　　   选择排序：一趟趟从“现有剩余数据”中找出最大的单元，并每一趟之后将该单元，跟这一趟中 最后一个单元进行交换。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('2f6e5c71-fcdc-442c-b34a-f65216287288')&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_2f6e5c71-fcdc-442c-b34a-f65216287288&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_2f6e5c71-fcdc-442c-b34a-f65216287288&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('2f6e5c71-fcdc-442c-b34a-f65216287288',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_2f6e5c71-fcdc-442c-b34a-f65216287288&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; 1&lt;span&gt;， 求得一个数组的最大值的下标，并将这个最大值下标的单元跟最后一个单元进行交换
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; 2，继续从剩余数据中取得最最大值的下标，并将这个最大值下标的单元跟剩余的最后一个单元交换，以此类推，直到只剩一个数据，就不用找了
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;选择排序过程&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('b26b1650-458a-4fef-971c-4e358d245838')&quot; readability=&quot;62&quot;&gt;&lt;img id=&quot;code_img_closed_b26b1650-458a-4fef-971c-4e358d245838&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_b26b1650-458a-4fef-971c-4e358d245838&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('b26b1650-458a-4fef-971c-4e358d245838',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_b26b1650-458a-4fef-971c-4e358d245838&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;119&quot;&gt;
&lt;pre&gt;
&amp;lt;?&lt;span&gt;php
&lt;/span&gt;&lt;span&gt;header&lt;/span&gt;(&quot;Content-type:text/html;charset=utf-8&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
 * 选择排序算法
 *     思路：
 *         找到所有数组元素中的最大值，与最后一个元素位置进行交换--确定最后一个元素
 *         除最后一个元素找剩下的所有元素的最大值，与此时的最后一个元素位置交换（既数组倒数第2个元素）    
 *         至到最后一个元素后就结束了
 *     规律总结：（ 如假设： $arr= (4,3,1,5);）
 *         $arr的长度为n（数组有n个元素）      ---此时有4个元素
 *         第1趟得到最大值，第2趟得到次大值，。。总共的趟数： n-1   ---此时应进行3趟
 *         每趟找最大值，后一趟会少一个值。第1趟数据是n个，第2趟数据是n-1,... 第i趟 :n-i
 *         每次找到的最大值进行交换位置
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;选择排序&lt;/span&gt;
&lt;span&gt;$arr&lt;/span&gt; = &lt;span&gt;array&lt;/span&gt;(9,3,5,8,2,7&lt;span&gt;);
  &lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &quot;&amp;lt;br /&amp;gt;排序之前： &quot;; &lt;span&gt;print_r&lt;/span&gt;(&lt;span&gt;$arr&lt;/span&gt;&lt;span&gt;);
  &lt;/span&gt;&lt;span&gt;$len&lt;/span&gt; = &lt;span&gt;count&lt;/span&gt;(&lt;span&gt;$arr&lt;/span&gt;);   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;统计数组的长度&lt;/span&gt;
  &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;$i&lt;/span&gt; = 0; &lt;span&gt;$i&lt;/span&gt; &amp;lt; &lt;span&gt;$len&lt;/span&gt; -1; ++&lt;span&gt;$i&lt;/span&gt;) {   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;比较的趟数
      //每一趟开始找最大值&lt;/span&gt;
       &lt;span&gt;$max&lt;/span&gt; = &lt;span&gt;$arr&lt;/span&gt;[0];   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;找最大值的下标，要取得第1项的值&lt;/span&gt;
       &lt;span&gt;$key&lt;/span&gt; = 0;      &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 最大值的下标，也要先取得第一项的下标&lt;/span&gt;
        &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;$j&lt;/span&gt; = 0; &lt;span&gt;$j&lt;/span&gt; &amp;lt; &lt;span&gt;$len&lt;/span&gt; - &lt;span&gt;$i&lt;/span&gt;; ++&lt;span&gt;$j&lt;/span&gt;&lt;span&gt;) {  
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;找到最大值， k也可以理解为下标&lt;/span&gt;
          &lt;span&gt;if&lt;/span&gt;(&lt;span&gt;$max&lt;/span&gt; &amp;lt; &lt;span&gt;$arr&lt;/span&gt;[&lt;span&gt;$j&lt;/span&gt;&lt;span&gt;]) {
            &lt;/span&gt;&lt;span&gt;$max&lt;/span&gt; = &lt;span&gt;$arr&lt;/span&gt;[&lt;span&gt;$j&lt;/span&gt;&lt;span&gt;];
            &lt;/span&gt;&lt;span&gt;$key&lt;/span&gt; = &lt;span&gt;$j&lt;/span&gt;&lt;span&gt;;
          }
        }
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;前面一定可以获得最大值及其所在的下标：即最大值单元
        // 然后开始进行交换&lt;/span&gt;
        &lt;span&gt;$t&lt;/span&gt; = &lt;span&gt;$arr&lt;/span&gt;[&lt;span&gt;$key&lt;/span&gt;&lt;span&gt;];
        &lt;/span&gt;&lt;span&gt;$arr&lt;/span&gt;[&lt;span&gt;$key&lt;/span&gt;] = &lt;span&gt;$arr&lt;/span&gt;[&lt;span&gt;$len&lt;/span&gt;-1-&lt;span&gt;$i&lt;/span&gt;];  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;$len-1-$i 表示最后一个单元&lt;/span&gt;
        &lt;span&gt;$arr&lt;/span&gt;[&lt;span&gt;$len&lt;/span&gt;-1-&lt;span&gt;$i&lt;/span&gt;] = &lt;span&gt;$t&lt;/span&gt;&lt;span&gt;;
  }
  &lt;/span&gt;&lt;span&gt;echo&lt;/span&gt; &quot;&amp;lt;br /&amp;gt;排序之后： &quot;; &lt;span&gt;print_r&lt;/span&gt;(&lt;span&gt;$arr&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
 *  for($i = 0; $i &amp;lt; 5; ++$i)  //趟数
 *      $max = $arr[0];
 *      $key = 0;
 *      for($j = 0; $j &amp;lt; 5 - $i; ++$j) //每一趟比较的次数
 *          if($max &amp;lt; $arr[$j]) {..}
 *  第1趟：  9,3,5,8,2,7  =》 7,3,5,8,2,9
 *  第2趟    7,3,5,8,2,9  =》 7,3,5,2,8,9
 *  第3趟    7,3,5,2,8,9  =》 2,3,5,7,8,9
 *  第4趟    2,3,5,7,8,9  =》 2,3,5,7,8,9
 *  第5趟    2,3,5,7,8,9  =》 2,3,5,7,8,9
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;选择排序Demo分析&lt;/span&gt;&lt;/div&gt;
&lt;h4&gt;&lt;span&gt;　　二分查找&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;　　　　二分查找算法的前提：  &lt;strong&gt;针对的是索引数组；针对的是已经排好序的数组&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('f468c5fc-4802-482c-9a72-28b2ca960853')&quot; readability=&quot;31.5&quot;&gt;&lt;img id=&quot;code_img_closed_f468c5fc-4802-482c-9a72-28b2ca960853&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_f468c5fc-4802-482c-9a72-28b2ca960853&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('f468c5fc-4802-482c-9a72-28b2ca960853',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_f468c5fc-4802-482c-9a72-28b2ca960853&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;58&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1000个数据，约10次找出 

100万个数据，约20次找出

10亿个数据，约30次找出

40亿个数据，约32次找出&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;二分查找算法的效率&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('68487f2a-3412-41ce-b894-2b9e4a511074')&quot; readability=&quot;50.5&quot;&gt;&lt;img id=&quot;code_img_closed_68487f2a-3412-41ce-b894-2b9e4a511074&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_68487f2a-3412-41ce-b894-2b9e4a511074&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('68487f2a-3412-41ce-b894-2b9e4a511074',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_68487f2a-3412-41ce-b894-2b9e4a511074&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;96&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &amp;lt;?&lt;span&gt;php
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt; * 需求： 请找出该数组中是否有22？  
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt; * 二分查找前提： 针对索引数组，且是排好序的数组
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;  &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;二分查找算法&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;$arr&lt;/span&gt; = &lt;span&gt;array&lt;/span&gt;(1,3,11,18,19,22,25,33,34,38,44,55,56,58,60,61,66,70,77,88,90,91,93,95,98&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;$search&lt;/span&gt; = 22; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;要找的数据&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;$len&lt;/span&gt; = &lt;span&gt;count&lt;/span&gt;(&lt;span&gt;$arr&lt;/span&gt;);   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;数组的长度，最大下标为len-1&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt; &lt;span&gt;$c2&lt;/span&gt; = 0;   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;计数
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; 
&lt;span&gt;12&lt;/span&gt; &lt;span&gt;//函数功能： 从数组$arr中的位置$begin开始到位置$end之间找数据$target&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt; &lt;span&gt;function&lt;/span&gt; binary_search(&lt;span&gt;$arr&lt;/span&gt;,&lt;span&gt;$target&lt;/span&gt;,&lt;span&gt;$begin&lt;/span&gt;,&lt;span&gt;$end&lt;/span&gt;&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;   &lt;span&gt;$GLOBALS&lt;/span&gt;['c2']++&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt;(&lt;span&gt;$end&lt;/span&gt; &amp;lt; &lt;span&gt;$begin&lt;/span&gt;) { &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;; }
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;     &lt;span&gt;$midKey&lt;/span&gt; = &lt;span&gt;floor&lt;/span&gt;((&lt;span&gt;$begin&lt;/span&gt; + &lt;span&gt;$end&lt;/span&gt;)/2);   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;定位中间的位置&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt;     &lt;span&gt;$midValue&lt;/span&gt; = &lt;span&gt;$arr&lt;/span&gt;[&lt;span&gt;$midKey&lt;/span&gt;];    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;取得中间项值&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt; 
&lt;span&gt;19&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt;(&lt;span&gt;$midValue&lt;/span&gt; == &lt;span&gt;$target&lt;/span&gt;) {   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;找的值恰好就是中间的那个&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;; 
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;     } &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;(&lt;span&gt;$midValue&lt;/span&gt; &amp;gt; &lt;span&gt;$target&lt;/span&gt;) {  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;中间项要比找的$target大，就去左边找&lt;/span&gt;
&lt;span&gt;22&lt;/span&gt;         &lt;span&gt;$result&lt;/span&gt; = binary_search(&lt;span&gt;$arr&lt;/span&gt;,&lt;span&gt;$target&lt;/span&gt;,&lt;span&gt;$begin&lt;/span&gt;,&lt;span&gt;$midKey&lt;/span&gt; - 1&lt;span&gt;); 
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;     } &lt;span&gt;else&lt;/span&gt; {  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;中间项要比找的$target小，就去右边找&lt;/span&gt;
&lt;span&gt;24&lt;/span&gt;         &lt;span&gt;$result&lt;/span&gt; = binary_search(&lt;span&gt;$arr&lt;/span&gt;,&lt;span&gt;$target&lt;/span&gt;,&lt;span&gt;$midKey&lt;/span&gt; + 1,&lt;span&gt;$end&lt;/span&gt;&lt;span&gt;); 
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; &lt;span&gt;$result&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; 
&lt;span&gt;29&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;使用binary_search（）函数从$arr中的0到$len-1位置找$search&lt;/span&gt;
&lt;span&gt;30&lt;/span&gt; &lt;span&gt;$v2&lt;/span&gt; = binary_search(&lt;span&gt;$arr&lt;/span&gt;, &lt;span&gt;$search&lt;/span&gt;, 0, &lt;span&gt;$len&lt;/span&gt; -1&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; &lt;span&gt;echo&lt;/span&gt; &quot;结果是： &quot;; &lt;span&gt;var_dump&lt;/span&gt;(&lt;span&gt;$v2&lt;/span&gt;);  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;bool(true) &lt;/span&gt;
&lt;span&gt;32&lt;/span&gt; &lt;span&gt;echo&lt;/span&gt; &quot;&amp;lt;br&amp;gt;查询次数：&quot;.&lt;span&gt;$c2&lt;/span&gt;;  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;二分查找算法Demo&lt;/span&gt;&lt;/div&gt;
&lt;h2&gt; 常用系统函数&lt;/h2&gt;
&lt;h3&gt;&lt;span&gt;　　字符串函数&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;　　1)字符串截取&lt;/p&gt;
&lt;p&gt;　　　　strrch()  substr()  strchr()&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('aa1dfad1-9c4b-4a19-b199-276e61f6d573')&quot; readability=&quot;32&quot;&gt;&lt;img id=&quot;code_img_closed_aa1dfad1-9c4b-4a19-b199-276e61f6d573&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_aa1dfad1-9c4b-4a19-b199-276e61f6d573&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('aa1dfad1-9c4b-4a19-b199-276e61f6d573',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_aa1dfad1-9c4b-4a19-b199-276e61f6d573&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;59&quot;&gt;
&lt;pre&gt;
&lt;span&gt;strrchr&lt;/span&gt;(&lt;span&gt;$str&lt;/span&gt;，&lt;span&gt;$char&lt;/span&gt;) :       查找指定字符&lt;span&gt;$char在&lt;/span&gt; 字符串&lt;span&gt;$str&lt;/span&gt;&lt;span&gt;  中最后一次出现直至结尾（包含指定字符）

&lt;/span&gt;&lt;span&gt;substr&lt;/span&gt;(&lt;span&gt;$str&lt;/span&gt;，&lt;span&gt;$start&lt;/span&gt;[，&lt;span&gt;$length&lt;/span&gt;]) : 返回字符串&lt;span&gt;$str&lt;/span&gt;  从开始位置&lt;span&gt;$start&lt;/span&gt; 到指定长度&lt;span&gt;$length的子字符串&lt;/span&gt;

&lt;span&gt;strchr&lt;/span&gt;() 查找字符串的首次出现  别名: &lt;span&gt;strstr&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;字符串截取函数说明&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;　　2) 输出与格式化&lt;/p&gt;
&lt;p&gt;　　　　echo , print, printf,  print_r,  var_dump&lt;/p&gt;
&lt;p&gt;　　3) 字符串去除与填充&lt;/p&gt;
&lt;p&gt;　　　　trim()  ltrim()  rtrim()  str_pad()&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('da1344d9-72e3-4887-9ff6-59b12614815e')&quot; readability=&quot;36&quot;&gt;&lt;img id=&quot;code_img_closed_da1344d9-72e3-4887-9ff6-59b12614815e&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_da1344d9-72e3-4887-9ff6-59b12614815e&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('da1344d9-72e3-4887-9ff6-59b12614815e',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_da1344d9-72e3-4887-9ff6-59b12614815e&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;67&quot;&gt;
&lt;pre&gt;
&lt;span&gt;trim&lt;/span&gt;&lt;span&gt;()  去除两边的空白

&lt;/span&gt;&lt;span&gt;ltrim&lt;/span&gt;&lt;span&gt;()  去除左边的空白

&lt;/span&gt;&lt;span&gt;rtrim&lt;/span&gt;&lt;span&gt;() 去除右边的空白

&lt;/span&gt;&lt;span&gt;str_pad&lt;/span&gt;(&lt;span&gt;$str&lt;/span&gt;, &lt;span&gt;$length&lt;/span&gt;, &lt;span&gt;$str2&lt;/span&gt;, &lt;span&gt;$location&lt;/span&gt;)  将指定字符串&lt;span&gt;$str&lt;/span&gt;, 用字符串 &lt;span&gt;$str2填充到指定的长度$length&lt;/span&gt;, 可以指定填充的位置； &lt;span&gt;$location表示填充的方向&lt;/span&gt;，左边填充或右边填充。取值： STR_PAD_RIGHT , STR_PAD_LEFT, STR_PAD_BOTH
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;字符串去除与填充&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;　　4）字符串连接与分割&lt;/p&gt;
&lt;p&gt;　　　　implode(),  join(),  explode(),  str_split()&lt;/p&gt;
&lt;p&gt;　　5) 字符串替换&lt;/p&gt;
&lt;p&gt;　　　　str_replace()  &lt;span class=&quot;dc-title&quot;&gt;子字符串替换&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;  　　　 substr_replace() &lt;span class=&quot;dc-title&quot;&gt;替换字符串的子串&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　6) 字符串长度与位置&lt;/p&gt;
&lt;p&gt;　　　　strlen() &lt;/p&gt;
&lt;p&gt;　　　　strpos()  &lt;span class=&quot;dc-title&quot;&gt;查找字符串首次出现的位置&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　　　strrpos() &lt;span class=&quot;dc-title&quot;&gt;&lt;span class=&quot;dc-title&quot;&gt;查找&lt;/span&gt;指定字符串在目标字符串中最后一次出现的位置&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;dc-title&quot;&gt;　　7) 字符串转换&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;dc-title&quot;&gt;　　　　strtolower()  strtoupper()  lcfirst()  ucfirst() ucwords()&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('ca77be71-cf50-4a79-928e-d9a05bf1bb1b')&quot; readability=&quot;32&quot;&gt;&lt;img id=&quot;code_img_closed_ca77be71-cf50-4a79-928e-d9a05bf1bb1b&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_ca77be71-cf50-4a79-928e-d9a05bf1bb1b&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('ca77be71-cf50-4a79-928e-d9a05bf1bb1b',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_ca77be71-cf50-4a79-928e-d9a05bf1bb1b&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;59&quot;&gt;
&lt;pre&gt;
&lt;span&gt;strtolower&lt;/span&gt;&lt;span&gt;() 转换为小写

&lt;/span&gt;&lt;span&gt;strtoupper&lt;/span&gt;&lt;span&gt;() 转换为大写

lcfirst() 使一个字符串的第一个字符小写

&lt;/span&gt;&lt;span&gt;ucfirst&lt;/span&gt;&lt;span&gt;() 将字符串的首字母转换为大写

&lt;/span&gt;&lt;span&gt;ucwords&lt;/span&gt;() 将字符串中每个单词的首字母转换为大写
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;字符串转换&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;span class=&quot;dc-title&quot;&gt;　　8) 特殊字符处理&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;dc-title&quot;&gt;　　　　nl2br()   addslashes()  htmlspecialchars()  htmlspecialchars_decode()&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;&lt;span&gt;　　有关函数的系统函数&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;　　　　&lt;strong&gt;function_exists():&lt;/strong&gt; 判断一个函数是否定义过&lt;/p&gt;
&lt;p&gt;　　　&lt;strong&gt;　function_get_args(): &lt;/strong&gt; 获取传递给函数实参数列表的数组&lt;/p&gt;
&lt;p&gt;　　　　&lt;strong&gt;function_get_arg($i):&lt;/strong&gt; 获取传递给函数的第$i个实参&lt;/p&gt;
&lt;p&gt;　　　　&lt;strong&gt;function_num_args(): &lt;/strong&gt; 获取传递给函数的实参数量&lt;/p&gt;
&lt;h3&gt;&lt;span&gt;　　时间函数&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;　　time()  microtime()  mktime()  date()  idate()  strtotime()  date_add()   date_diff()  date_default_timezone_set()  date_default_timezone_get()&lt;/p&gt;
&lt;h3&gt;&lt;span&gt;　　数学函数&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;　　max()  min() round()  ceil()  floor()  abs() sqrt()  pow()  rand()&lt;/p&gt;
&lt;h3&gt;&lt;span&gt;　　数组函数&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;　　　　1）指针操作函数&lt;/p&gt;
&lt;p&gt;　　　　　　current()   key()    next()   prev()   end()    reset()    each()　　&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('26a9ad88-7803-444b-b2ed-45bec238dad0')&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_26a9ad88-7803-444b-b2ed-45bec238dad0&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_26a9ad88-7803-444b-b2ed-45bec238dad0&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('26a9ad88-7803-444b-b2ed-45bec238dad0',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_26a9ad88-7803-444b-b2ed-45bec238dad0&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;$v&lt;/span&gt; = &lt;span&gt;current&lt;/span&gt;(&lt;span&gt;$数组&lt;/span&gt;);    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;获得数组的当前指针所在的单元的“值”&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;$v&lt;/span&gt; = &lt;span&gt;key&lt;/span&gt;(&lt;span&gt;$数组&lt;/span&gt;);    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;获得数组的当前指针所在的单元的“健”（下标）&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt; 
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;$v&lt;/span&gt; = &lt;span&gt;next&lt;/span&gt;(&lt;span&gt;$数组&lt;/span&gt;);    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;先将数组的指针移向下一个单元，然后取得该新单元的值。&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;$v&lt;/span&gt; = &lt;span&gt;prev&lt;/span&gt;(&lt;span&gt;$数组&lt;/span&gt;);    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;先将数组的指针移向前一个单元，然后取得该单元的值。&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt; 
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;$v&lt;/span&gt; = &lt;span&gt;end&lt;/span&gt;(&lt;span&gt;$数组&lt;/span&gt;);    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;先将数组的指针直接移向最后一个单元，  然后取得该单元的值。&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt; 
&lt;span&gt;11&lt;/span&gt; &lt;span&gt;$v&lt;/span&gt; = &lt;span&gt;reset&lt;/span&gt;(&lt;span&gt;$数组&lt;/span&gt;);    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;先将数组的指针直接移向第一个单元，  然后取得该单元的值。&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;指针操作函数&lt;/span&gt;&lt;/div&gt;
&lt;p&gt; 　　　　2）单元操作函数&lt;/p&gt;
&lt;p&gt;　　　　　　array_pop()  array_push()   array_shift()  array_slice()   array_splice()&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('64a3cfc2-33e0-43ee-af84-96c9cf0b4c7b')&quot; readability=&quot;34.5&quot;&gt;&lt;img id=&quot;code_img_closed_64a3cfc2-33e0-43ee-af84-96c9cf0b4c7b&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_64a3cfc2-33e0-43ee-af84-96c9cf0b4c7b&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('64a3cfc2-33e0-43ee-af84-96c9cf0b4c7b',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_64a3cfc2-33e0-43ee-af84-96c9cf0b4c7b&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;64&quot;&gt;
&lt;pre&gt;
 &lt;span&gt;array_pop&lt;/span&gt;(&lt;span&gt;$arr&lt;/span&gt;&lt;span&gt;) 将数组最后一个单元弹出，数组长度减1

&lt;/span&gt;&lt;span&gt;array_push&lt;/span&gt;(&lt;span&gt;$arr&lt;/span&gt;,&lt;span&gt;$var&lt;/span&gt;,..&lt;span&gt;) 将1个或多个单元压入数组的末尾   

&lt;/span&gt;&lt;span&gt;array_shift&lt;/span&gt;(&lt;span&gt;$arr&lt;/span&gt;&lt;span&gt;)   将数组开头的单元移出数组

&lt;/span&gt;&lt;span&gt;array_unshift&lt;/span&gt;(&lt;span&gt;$arr&lt;/span&gt;,&lt;span&gt;$var&lt;/span&gt;,..&lt;span&gt;) 将1个或多个单元压入数组的开始

 &lt;/span&gt;&lt;span&gt;array_slice&lt;/span&gt;&lt;span&gt;()  从数组中取出一段   （参数类型substr函数）默认重新排序并重置数字索引。可以通过第3个参数设置为true改变该行为

&lt;/span&gt;&lt;span&gt;array_splice&lt;/span&gt;() 把数组的一部分去掉并用其他值代替 （不设置第4个参数，其实就类似array_slice函数）
&lt;/pre&gt;&lt;/div&gt;
单元操作函数&lt;/div&gt;
&lt;p&gt;　　　　3)  排序函数&lt;/p&gt;
&lt;p&gt;　　　　　　sort()   asort()  ksort()   usort()  rsort()  arsort()   ksort()  shuffle()&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('e14e79af-cf03-4342-b799-a40cfd48ce0c')&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_e14e79af-cf03-4342-b799-a40cfd48ce0c&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_e14e79af-cf03-4342-b799-a40cfd48ce0c&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('e14e79af-cf03-4342-b799-a40cfd48ce0c',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_e14e79af-cf03-4342-b799-a40cfd48ce0c&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;sort&lt;/span&gt;&lt;span&gt;()： 默认按升序排序，删除键值重新赋予索引健值
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;asort&lt;/span&gt;():&lt;span&gt; 默认升序排序，保留原来的健值对
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; 
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;ksort&lt;/span&gt;():&lt;span&gt; 对数组按键名排序
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;usort&lt;/span&gt;&lt;span&gt;()：使用用户自定义的比较函数对数组中的值进行排序
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; 
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;rsort&lt;/span&gt;():&lt;span&gt; 数组逆向排序 
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; 
&lt;span&gt;11&lt;/span&gt; &lt;span&gt;arsort&lt;/span&gt;():&lt;span&gt; 保留健值对的逆向排序
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; 
&lt;span&gt;13&lt;/span&gt; &lt;span&gt;krsort&lt;/span&gt;():&lt;span&gt; 键逆向排序
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; 
&lt;span&gt;15&lt;/span&gt; &lt;span&gt;shuffle&lt;/span&gt;()  将数组打乱
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;排序函数&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;　　　　4) 查找函数&lt;/p&gt;
&lt;p&gt;　　　　　　in_array()   array_key_exists()   key_exists()  array_search()&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('ff8a9af1-96fe-41d7-882a-c513ff620659')&quot; readability=&quot;32&quot;&gt;&lt;img id=&quot;code_img_closed_ff8a9af1-96fe-41d7-882a-c513ff620659&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_ff8a9af1-96fe-41d7-882a-c513ff620659&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('ff8a9af1-96fe-41d7-882a-c513ff620659',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_ff8a9af1-96fe-41d7-882a-c513ff620659&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;59&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;in_array&lt;/span&gt;():&lt;span&gt; 检查数组中是否存在某个值
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; &lt;span&gt;array_key_exists&lt;/span&gt;():&lt;span&gt;给定的键名是否存在于数组中
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; &lt;span&gt;key_exists&lt;/span&gt;&lt;span&gt;()： 是array_key_exists的别名
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; &lt;span&gt;array_search&lt;/span&gt;();在数组中搜索给定的值，成功则返回相应的键名
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;查找函数&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;　　　　5) 其他相关&lt;/p&gt;
&lt;p&gt;　　　　　　count()  array_reverse()   array_merge()   array_sum()  array_keys()   array_values()  array_map()  array_walk()  range()&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('ed93bcd2-0510-435a-b16d-98a04f9237d4')&quot; readability=&quot;35&quot;&gt;&lt;img id=&quot;code_img_closed_ed93bcd2-0510-435a-b16d-98a04f9237d4&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_ed93bcd2-0510-435a-b16d-98a04f9237d4&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('ed93bcd2-0510-435a-b16d-98a04f9237d4',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_ed93bcd2-0510-435a-b16d-98a04f9237d4&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;61&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;count&lt;/span&gt;(): 别名sizeof,&lt;span&gt;数组单元的数目
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;array_reverse&lt;/span&gt;():&lt;span&gt;  返回一个单元顺序相反的数组 
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; 
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;array_merge&lt;/span&gt;():&lt;span&gt; 数组合并
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;array_sum&lt;/span&gt;():&lt;span&gt; 计算数组中所有值的和
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; 
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;array_keys&lt;/span&gt;():&lt;span&gt; 返回数组中部分或所有的键名
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; 
&lt;span&gt;11&lt;/span&gt; &lt;span&gt;array_values&lt;/span&gt;&lt;span&gt;()：返回数组中所有的值
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; 
&lt;span&gt;13&lt;/span&gt; &lt;span&gt;array_map&lt;/span&gt;&lt;span&gt;()： 将回调函数作用域给定的数组单元上
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; 
&lt;span&gt;15&lt;/span&gt;  &lt;span&gt;array_walk&lt;/span&gt;():&lt;span&gt;使用用户自定义函数对数组中的每个元素做回调处理
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; 
&lt;span&gt;17&lt;/span&gt; &lt;span&gt;range&lt;/span&gt;()：建立一个包含指定范围单元的数组 
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;其他相关说明&lt;/span&gt;　　　　　　　　　　&lt;/div&gt;
</description>
<pubDate>Thu, 05 Jul 2018 07:27:00 +0000</pubDate>
<dc:creator>young67</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/yangp67/p/9267040.html</dc:identifier>
</item>
<item>
<title>搭建HBase的本地模式、伪分布式、全分布式和HA模式 - 李金泽AllenLi</title>
<link>http://www.cnblogs.com/lijinze-tsinghua/p/9268455.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/lijinze-tsinghua/p/9268455.html</guid>
<description>&lt;h2 class=&quot;md-end-block md-heading md-focus&quot;&gt;&lt;span class=&quot;md-expand&quot;&gt;一、安装HBase：&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span class=&quot;md-line md-end-block&quot;&gt;我这里选择的是hbase-1.3.1-bin.tar.gz版本&lt;span class=&quot;md-line md-end-block&quot;&gt;解压HBase：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
&lt;span&gt;tar -zxvf hbase-1.3.1-bin.tar.gz -C ~/training&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span class=&quot;md-line md-end-block&quot;&gt;配置HBase的环境变量:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
&lt;span&gt;export HBASE_HOME=/root/training/hbase-1.3.1
​
export PATH=$HBASE_HOME/bin:$PATH&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span class=&quot;md-line md-end-block&quot;&gt;生效环境变量：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
&lt;span&gt;source ~/.bash_profile
&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2 class=&quot;md-end-block md-heading&quot;&gt;&lt;span&gt;二、HBase的安装模式：&lt;/span&gt;&lt;/h2&gt;
&lt;h3 class=&quot;md-end-block md-heading&quot;&gt;&lt;span&gt;1、本地模式：&lt;/span&gt;&lt;/h3&gt;
&lt;h5 class=&quot;md-end-block md-heading&quot;&gt;&lt;strong&gt;&lt;span&gt;特点：只有HMaster ，没有Hregionserver&lt;/span&gt;&lt;/strong&gt;&lt;/h5&gt;
&lt;h4 class=&quot;md-end-block md-heading&quot;&gt;&lt;strong&gt;&lt;span&gt;修改两个配置文件：&lt;/span&gt;&lt;/strong&gt;&lt;/h4&gt;
&lt;h5 class=&quot;md-end-block md-heading&quot;&gt;&lt;span&gt;1）hbase-env.sh&lt;/span&gt;&lt;/h5&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
&lt;span&gt;export JAVA_HOME=/root/training/jdk1.8.0_144　&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h5 class=&quot;md-end-block md-heading&quot;&gt;&lt;span&gt;2）hbase-site.xml&lt;/span&gt;&lt;/h5&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
&lt;span&gt;&amp;lt;configuration&amp;gt;
&amp;lt;!--配置HBase在本地磁盘中数据存放路径--&amp;gt;
&amp;lt;property&amp;gt;
&amp;lt;name&amp;gt;hbase.rootdir&amp;lt;/name&amp;gt;
&amp;lt;value&amp;gt;file:///root/training/hbase-1.3.1/data&amp;lt;/value&amp;gt;
&amp;lt;/property&amp;gt;
&amp;lt;/configuration&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 class=&quot;md-end-block md-heading&quot;&gt;&lt;span&gt;2、伪分布式模式：&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;&lt;span class=&quot;md-line md-end-block&quot;&gt;特点：具备HBase的所有功能&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h4 class=&quot;md-end-block md-heading&quot;&gt;&lt;span&gt;修改两个配置文件：&lt;/span&gt;&lt;/h4&gt;
&lt;h5 class=&quot;md-end-block md-heading&quot;&gt;&lt;span&gt;1）hbase-env.sh&lt;/span&gt;&lt;/h5&gt;
&lt;p&gt;&lt;span class=&quot;md-line md-end-block&quot;&gt;添加java环境变量：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
&lt;span&gt;export JAVA_HOME=/root/training/jdk1.8.0_144&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span class=&quot;md-line md-end-block&quot;&gt;配置HBase管理Zookeeper的方式：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
&lt;span&gt;&lt;span&gt;HBASE_MANAGES_ZK=true 　&lt;/span&gt;　&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span class=&quot;md-line md-end-block&quot;&gt;注：默认使用HBase自带的一个zookeeper&lt;/span&gt;&lt;/p&gt;
&lt;h5 class=&quot;md-end-block md-heading&quot;&gt;&lt;span&gt;2）hbase-site.xml&lt;/span&gt;&lt;/h5&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
&lt;span&gt;&amp;lt;property&amp;gt;
&amp;lt;name&amp;gt;hbase.rootdir&amp;lt;/name&amp;gt;
&amp;lt;value&amp;gt;hdfs://bigdata11:9000/hbase&amp;lt;/value&amp;gt;
&amp;lt;/property&amp;gt;
​
&amp;lt;!--配置HBase在HDFS中数据备份的个数--&amp;gt;
&amp;lt;property&amp;gt;
&amp;lt;name&amp;gt;dfs.replication&amp;lt;/name&amp;gt;
&amp;lt;value&amp;gt;1&amp;lt;/value&amp;gt;
&amp;lt;/property&amp;gt;
​
&amp;lt;!--配置HBase集群分布式模式--&amp;gt;
&amp;lt;property&amp;gt;
&amp;lt;name&amp;gt;hbase.cluster.distributed&amp;lt;/name&amp;gt;
&amp;lt;value&amp;gt;true&amp;lt;/value&amp;gt;
&amp;lt;/property&amp;gt;
​
&amp;lt;!--配置HBase的zookeeper地址--&amp;gt;
&amp;lt;property&amp;gt;
&amp;lt;name&amp;gt;hbase.zookeeper.quorum&amp;lt;/name&amp;gt;
&amp;lt;value&amp;gt;localhost&amp;lt;/value&amp;gt;
​
&amp;lt;!--配置HBase的zookeeper数据存放路径--&amp;gt;
&amp;lt;property&amp;gt;
&amp;lt;name&amp;gt;hbase.zookeeper.property.dataDir&amp;lt;/name&amp;gt;
&amp;lt;value&amp;gt;/home/zk&amp;lt;/value&amp;gt;
&amp;lt;/property&amp;gt;　&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 class=&quot;md-end-block md-heading&quot;&gt;&lt;span&gt;3、全分布式模式：&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span class=&quot;md-line md-end-block&quot;&gt;特点：至少三台机器以上 原因：主从架构&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h4 class=&quot;md-end-block md-heading&quot;&gt;&lt;span&gt;修改三个配置文件：&lt;/span&gt;&lt;/h4&gt;
&lt;h5 class=&quot;md-end-block md-heading&quot;&gt;&lt;span&gt;1）hbase-env.sh&lt;/span&gt;&lt;/h5&gt;
&lt;p&gt;&lt;span class=&quot;md-line md-end-block&quot;&gt;添加java环境变量：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
&lt;span&gt;export JAVA_HOME=/root/training/jdk1.8.0_144　　&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span class=&quot;md-line md-end-block&quot;&gt;配置HBase管理Zookeeper的方式：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
&lt;span&gt;HBASE_MANAGES_ZK=true &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span class=&quot;md-line md-end-block&quot;&gt;注：默认使用HBase自带的一个zookeeper&lt;/span&gt;&lt;/p&gt;
&lt;h5 class=&quot;md-end-block md-heading&quot;&gt;&lt;span&gt;2）hbase-site.xml&lt;/span&gt;&lt;/h5&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
&lt;span&gt;&amp;lt;!--配置HBase在HDFS中数据存放路径--&amp;gt;
&amp;lt;property&amp;gt;
&amp;lt;name&amp;gt;hbase.rootdir&amp;lt;/name&amp;gt;
&amp;lt;value&amp;gt;hdfs://bigdata12:9000/hbase&amp;lt;/value&amp;gt;
&amp;lt;/property&amp;gt;
​
&amp;lt;!--配置HBase在HDFS中数据备份的个数--&amp;gt;
&amp;lt;property&amp;gt;
&amp;lt;name&amp;gt;dfs.replication&amp;lt;/name&amp;gt;
&amp;lt;value&amp;gt;2&amp;lt;/value&amp;gt;
&amp;lt;/property&amp;gt;
​
&amp;lt;!--配置HBase集群分布式模式--&amp;gt;
&amp;lt;property&amp;gt;
&amp;lt;name&amp;gt;hbase.cluster.distributed&amp;lt;/name&amp;gt;
&amp;lt;value&amp;gt;true&amp;lt;/value&amp;gt;
&amp;lt;/property&amp;gt;
​
&amp;lt;!--配置HBase的zookeeper地址--&amp;gt;
&amp;lt;property&amp;gt;
&amp;lt;name&amp;gt;hbase.zookeeper.quorum&amp;lt;/name&amp;gt;
&amp;lt;value&amp;gt;bigdata12&amp;lt;/value&amp;gt;
&amp;lt;/property&amp;gt;
​
&amp;lt;!--配置HBase主节点最大时钟偏离--&amp;gt;
&amp;lt;property&amp;gt;
&amp;lt;name&amp;gt;hbase.master.maxclockskew&amp;lt;/name&amp;gt;
&amp;lt;value&amp;gt;180000&amp;lt;/value&amp;gt;
&amp;lt;/property&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h5 class=&quot;md-end-block md-heading&quot;&gt;&lt;span&gt;3）slaves：配置从节点的地址&lt;/span&gt;&lt;/h5&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
&lt;span&gt;bigdata13
bigdata14&lt;/span&gt;　
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 class=&quot;md-end-block md-heading&quot;&gt;&lt;span&gt;4、HA模式：&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;&lt;span class=&quot;md-line md-end-block&quot;&gt;特点：添加一个新的HMaster&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;md-line md-end-block&quot;&gt;HA的思想：多几个主节点&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;md-line md-end-block&quot;&gt;在HBase的全分布式模式安装完成以后，再在某一个从节点上：bigdata13/bigdata14手动启动一个Hmaster&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
&lt;span&gt;hbase-daemon.sh start master&lt;/span&gt;　
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 class=&quot;md-end-block md-heading&quot;&gt;&lt;span&gt;三、操作HBase：&lt;/span&gt;&lt;/h2&gt;
&lt;h5 class=&quot;md-end-block md-heading&quot;&gt;&lt;span&gt;hbase shell:Hbase的命令行工具：一种客户端&lt;/span&gt;&lt;/h5&gt;
&lt;p&gt;&lt;span class=&quot;md-line md-end-block&quot;&gt;创建HBase表：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;34&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
&lt;span&gt;create 'students','info','grade'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span class=&quot;md-line md-end-block&quot;&gt;添加数据：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;49&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
&lt;span&gt;put 'students','stu001','info:name','Tom'           
put 'students','stu001','info:age','18' 
put 'students','stu001','info:gender','M'
put 'students','stu002','info:name','Mary'
put 'students','stu002','info:boy friend','Peter'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span class=&quot;md-line md-end-block&quot;&gt;查看stu001的所有信息：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
&lt;span&gt;get 'students','stu001'&lt;/span&gt;　　
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span class=&quot;md-line md-end-block&quot;&gt;&lt;span&gt;版权声明：本文为博主原创文章，未经博主允许不得转载。&lt;span&gt;&lt;a href=&quot;http://www.cnblogs.com/lijinze-tsinghua/&quot;&gt;http://www.cnblogs.com/lijinze-tsinghua/&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Thu, 05 Jul 2018 07:13:00 +0000</pubDate>
<dc:creator>李金泽AllenLi</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/lijinze-tsinghua/p/9268455.html</dc:identifier>
</item>
<item>
<title>Identity Server 4 - Hybrid Flow - Claims - solenovex</title>
<link>http://www.cnblogs.com/cgzl/p/9268371.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/cgzl/p/9268371.html</guid>
<description>
&lt;p&gt;前一篇 Identity Server 4 - Hybrid Flow - MVC客户端身份验证: &lt;a href=&quot;https://www.cnblogs.com/cgzl/p/9253667.html&quot; target=&quot;_blank&quot;&gt;https://www.cnblogs.com/cgzl/p/9253667.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;我不知道怎么样翻译这个词比较好, 所以我一般就不翻译了.&lt;/p&gt;
&lt;p&gt;在前一篇文章里, MVC客户端配置身份认证的时候有这么一句话(Startup的ConfigureServices):&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/986268/201807/986268-20180705134757395-589951250.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;JwtSecurityTokenHandler.DefaultInboundClaimTypeMap.Clear();&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;官方文档是这样介绍的: “我们关闭了JWT的Claim 类型映射, 以便允许well-known claims.”&lt;/p&gt;
&lt;p&gt;如果我把这句话删掉, 然后再看看User.Claims的类型和值:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/986268/201807/986268-20180705135022090-348857883.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;现在有些claim的类型与ID Token里面的类型名称是不一样, 也有一些claim不见了:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/986268/201807/986268-20180705135341320-1271827117.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;而加上这句话之后, 现在User claim类型的名字就和ID Token里面一样了:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/986268/201807/986268-20180705135129285-2095269108.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;再看一下ID Token:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/986268/201807/986268-20180705135341320-1271827117.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;有一些claims并没有出现在User.Claims里面. 这是因为这个中间件默认情况下会过滤掉一些它认为我们不需要的claim, 例如nbf, amr等.&lt;/p&gt;
&lt;p&gt;就先看下面这两种情况吧:&lt;/p&gt;
&lt;h3&gt;1. 避免claims被默认过滤掉&lt;/h3&gt;
&lt;p&gt;如果我想让中间件不要过滤掉nbf和, 也就是把nbf和amr从被过滤掉集合里移除, 就可以使用这个方法:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/986268/201807/986268-20180705140214688-190574393.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;然后再看About页面打印的UserClaims:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/986268/201807/986268-20180705140333934-373945931.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这样nbf和amr就不会被过滤掉了(从过滤掉的集合移除了).&lt;/p&gt;

&lt;h3&gt;2. 删除某些Claims&lt;/h3&gt;
&lt;p&gt;假如说我这个MVC客户端不需要sid和idp, 那么我可以使用下面的方法:&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/986268/201807/986268-20180705140838249-114077653.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这是一个扩展方法, 一定要注意它和Remove方法的区别.........&lt;/p&gt;

&lt;p&gt;再次操作后, 可以看到这些Claims不见了:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/986268/201807/986268-20180705140820431-351348882.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;ClaimActions还有其他几个方法, 请自行探索.&lt;/p&gt;

&lt;h2&gt;用户信息端点 UserInfo Endpoint &lt;/h2&gt;
&lt;p&gt;尽管ID Token里面可以包含很多用户的claims, 但是尽量让ID Token小一点比较好. 所以当MVC客户端需要更多用户信息的时候可以手动请求用户信息端点, 这样做也可以获得用户最新的其他信息.&lt;/p&gt;
&lt;p&gt;UserInfo Endpoint的官方文档在这: &lt;a href=&quot;http://openid.net/specs/openid-connect-core-1_0.html#UserInfo&quot; target=&quot;_blank&quot;&gt;http://openid.net/specs/openid-connect-core-1_0.html#UserInfo&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;它要求使用GET或者POST进行请求, 但建议使用GET. 此外请求还需要使用Access Token.&lt;/p&gt;
&lt;p&gt;这是一个例子:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/986268/201807/986268-20180705141746404-1429231012.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;成功请求的响应结果是一个JSON对象.&lt;/p&gt;

&lt;p&gt;首先在IDP里面再添加一个email scope:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/986268/201807/986268-20180705142437943-74054625.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;然后在配置的Client里面添加这个scope:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/986268/201807/986268-20180705142550057-103926371.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;最后为TestUser添加email的claim:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/986268/201807/986268-20180705142715100-589814464.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;回到MVC客户端的Startup, 这里也需要添加email这个scope,&lt;/p&gt;
&lt;p&gt;而且还要保证这个email不会出现在claims Identity里面, 这样我在请求用户信息端点的时候才会得到email而不是从User.Claims里面得到:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/986268/201807/986268-20180705143047389-2018652039.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;再次操作后, 可以看到User.Claims里没有出现email:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/986268/201807/986268-20180705143425105-1767901253.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;下面我需要手动发送请求到用户信息端点来获取其他信息:&lt;/p&gt;
&lt;p&gt;identity sever 4的这部分文档在: &lt;a href=&quot;https://identityserver4.readthedocs.io/en/release/endpoints/userinfo.html#identitymodel&quot; target=&quot;_blank&quot;&gt;https://identityserver4.readthedocs.io/en/release/endpoints/userinfo.html#identitymodel&lt;/a&gt;, &lt;a href=&quot;https://github.com/IdentityModel/IdentityModel2&quot; target=&quot;_blank&quot;&gt;https://github.com/IdentityModel/IdentityModel2&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;文档提到, 需要为MVC客户端安装IdentityModel这个库:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
dotnet add package IdentityModel
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;随后, 我把获取用户email的代码还是放在About Action里:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/986268/201807/986268-20180705145606060-371100726.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;首先通过IDP的URI获得discovery document, 然后从中取出UserInfo端点, 从Cookie里得到access token, 并用access token从用户信息端点获得claims, 从这些claims里面取得email并传递到About.cshtml.&lt;/p&gt;
&lt;p&gt;相应的修改一下About.html:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/986268/201807/986268-20180705150007921-2136899347.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;重新操作后看About页面:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/986268/201807/986268-20180705150147785-1209370380.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;代码: &lt;a href=&quot;https://github.com/solenovex/Identity-Server-4-Tutorial-Code&quot; target=&quot;_blank&quot;&gt;https://github.com/solenovex/Identity-Server-4-Tutorial-Code&lt;/a&gt; 02部分&lt;/p&gt;
</description>
<pubDate>Thu, 05 Jul 2018 07:04:00 +0000</pubDate>
<dc:creator>solenovex</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/cgzl/p/9268371.html</dc:identifier>
</item>
<item>
<title>数据结构与算法(1)——数组与链表 - 我没有三颗心脏</title>
<link>http://www.cnblogs.com/wmyskxz/p/9268313.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/wmyskxz/p/9268313.html</guid>
<description>&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/7896890-480a564d371c7a02.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot;/&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;前言：终于到了疯狂学习数据结构的时候，换个好看的题图，开始吧..&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;什么是数组&quot;&gt;什么是数组？&lt;/h2&gt;
&lt;p&gt;数组简单来说就是将所有的数据排成一排存放在系统分配的一个内存块上，通过使用特定元素的索引作为数组的下标，可以在&lt;strong&gt;常数时间内访问数组元素&lt;/strong&gt;的这么一个结构；&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/7896890-f231eddbde281632.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;为什么能在常数时间内访问数组元素&quot;&gt;为什么能在常数时间内访问数组元素？&lt;/h3&gt;
&lt;p&gt;为了访问一个数组元素，该元素的内存地址需要计算其距离数组基地址的偏移量。需要用一个乘法计算偏移量，再加上基地址，就可以获得某个元素的内存地址。首先计算元素数据类型的&lt;strong&gt;存储大小&lt;/strong&gt;，然后将它&lt;strong&gt;乘以元素在数组中的索引&lt;/strong&gt;，最后&lt;strong&gt;加上基地址&lt;/strong&gt;，就可以计算出该索引位置元素的地址了；整个过程可以看到需要&lt;strong&gt;一次乘法&lt;/strong&gt;和&lt;strong&gt;一次加法&lt;/strong&gt;就完成了，而这两个运算的执行时间都是常数时间，所以可以认为数组访问操作能在常数时间内完成；&lt;/p&gt;
&lt;h3 id=&quot;数组的优点&quot;&gt;数组的优点&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;简单且易用；&lt;/li&gt;
&lt;li&gt;访问元素快（常数时间）；&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;数组的缺点&quot;&gt;数组的缺点&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;大小固定：&lt;/strong&gt;数组的大小是静态的（在使用前必须制定数组的大小）；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;分配一个连续空间块：&lt;/strong&gt;数组初始分配空间时，有时候无法分配能存储整个数组的内存空间（当数组规模太大时）；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;基于位置的插入操作实现复杂：&lt;/strong&gt;如果要在数组中的给定位置插入元素，那么可能就会需要移动存储在数组中的其他元素，这样才能腾出指定的位置来放插入的新元素；而如果在数组的开始位置插入元素，那么这样的移动操作开销就会很大。&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;关于数组的一些问题思考&quot;&gt;关于数组的一些问题思考&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;1）在索引没有语义的情况下如何表示没有的元素？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我们创建的数组的&lt;strong&gt;索引可以有语义也可以没有语义&lt;/strong&gt;，比如我现在只是单纯的想存放100，98，96这三个数字，那么它们保存在索引为0，1，2的这几个地方或者其他地方都可以，无论它们之间的顺序怎样我都不关心，因为它们的索引是没有语义的我只是想把它们存起来而已；但是如果它们变成了学号为1，2，3这几个同学对应的成绩，那么它们的索引就有了语义，索引0对应了学号为1的同学的成绩，索引1对应了学号2的同学，索引2对应了学号3的同学，因为数组的最大的优点是访问元素是在常数时间，所以我们使用数组&lt;strong&gt;最好就是在索引有语义的情况下；&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/7896890-7452a486e629a947.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot;/&gt;&lt;/p&gt;
&lt;p&gt;好了，那么如果在索引没有语义的情况下，我们如何表示没有的元素呢？例如上图中，对于用户而言，访问索引为3和4的数组元素是违法的，因为它们根本就不存在，我们如何表示没有的元素呢？&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;表示为0或者-1？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2）如何添加元素和删除元素呢？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我们知道，数组的明显缺点是在创建之前需要提前声明好要使用的空间，那么当我们空间满了该如何处理呢？又该如何删除元素呢？在Java中提供给我们的默认数组是不支持这些功能的，我们需要开发属于自己的数组类才行；&lt;/p&gt;
&lt;h2 id=&quot;使用泛型封装自己的数组类&quot;&gt;使用泛型封装自己的数组类&lt;/h2&gt;
&lt;p&gt;我们需要自己创建一个Array类，并实现一些增删改查的功能，大体的结构如下：&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;public class Array&amp;lt;E&amp;gt;{
    private E[] data;
    private int size;
    /* 一些成员方法 */
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;我们需要一个成员变量来保存我们的数据，这里是&lt;code&gt;data&lt;/code&gt;，然后需要一个&lt;code&gt;int类型&lt;/code&gt;来存放我们的有效元素的个数，在这里我们没有必要再多定义一个表示数组空间的变量，因为这里的空间大小就是&lt;code&gt;data.length&lt;/code&gt;；&lt;/p&gt;
&lt;h3 id=&quot;默认的构造函数&quot;&gt;默认的构造函数&lt;/h3&gt;
&lt;p&gt;我们需要创建一些方法来初始化我们的数组，那肯定是需要传一个&lt;code&gt;capacity&lt;/code&gt;来表示数组的容量嘛：&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;// 构造函数，传入数组的容量capacity构造Array
public Array(int capacity) {
    data = (E[]) new Object[capacity];
    size = 0;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;当然我们也需要创建一个默认的构造函数来为不知道初始该定义多少的用户一个默认大小的数组：&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;// 无参数的构造函数，默认数组的容量capacity=10
public Array() {
    this(10);
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这里演示的话给个10差不多了，实际可能会更复杂一些...&lt;/p&gt;
&lt;h3 id=&quot;成员方法&quot;&gt;成员方法&lt;/h3&gt;
&lt;p&gt;就是增删改查嘛，不过这里需要注意的是，为了实现我们自己的动态数组，在增加和删除中，我们对临界值进行了判断，动态的增加或者缩小数组的大小，而且提供了一些常用友好的方法给用户；&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;// 获取数组的容量
public int getCapacity() {
    return data.length;
}

// 获取数组中的元素个数
public int getSize() {
    return size;
}

// 返回数组是否为空
public boolean isEmpty() {
    return size == 0;
}

// 在index索引的位置插入一个新元素e
public void add(int index, E e) {

    if (index &amp;lt; 0 || index &amp;gt; size)
        throw new IllegalArgumentException(&quot;Add failed. Require index &amp;gt;= 0 and index &amp;lt;= size.&quot;);

    if (size == data.length)
        resize(2 * data.length);

    for (int i = size - 1; i &amp;gt;= index; i--)
        data[i + 1] = data[i];

    data[index] = e;

    size++;
}

// 向所有元素后添加一个新元素
public void addLast(E e) {
    add(size, e);
}

// 在所有元素前添加一个新元素
public void addFirst(E e) {
    add(0, e);
}

// 获取index索引位置的元素
public E get(int index) {
    if (index &amp;lt; 0 || index &amp;gt;= size)
        throw new IllegalArgumentException(&quot;Get failed. Index is illegal.&quot;);
    return data[index];
}

// 修改index索引位置的元素为e
public void set(int index, E e) {
    if (index &amp;lt; 0 || index &amp;gt;= size)
        throw new IllegalArgumentException(&quot;Set failed. Index is illegal.&quot;);
    data[index] = e;
}

// 查找数组中是否有元素e
public boolean contains(E e) {
    for (int i = 0; i &amp;lt; size; i++) {
        if (data[i].equals(e))
            return true;
    }
    return false;
}

// 查找数组中元素e所在的索引，如果不存在元素e，则返回-1
public int find(E e) {
    for (int i = 0; i &amp;lt; size; i++) {
        if (data[i].equals(e))
            return i;
    }
    return -1;
}

// 从数组中删除index位置的元素, 返回删除的元素
public E remove(int index) {
    if (index &amp;lt; 0 || index &amp;gt;= size)
        throw new IllegalArgumentException(&quot;Remove failed. Index is illegal.&quot;);

    E ret = data[index];
    for (int i = index + 1; i &amp;lt; size; i++)
        data[i - 1] = data[i];
    size--;
    data[size] = null; // loitering objects != memory leak

    if (size == data.length / 4 &amp;amp;&amp;amp; data.length / 2 != 0)
        resize(data.length / 2);
    return ret;
}

// 从数组中删除第一个元素, 返回删除的元素
public E removeFirst() {
    return remove(0);
}

// 从数组中删除最后一个元素, 返回删除的元素
public E removeLast() {
    return remove(size - 1);
}

// 从数组中删除元素e
public void removeElement(E e) {
    int index = find(e);
    if (index != -1)
        remove(index);
}

@Override
public String toString() {

    StringBuilder res = new StringBuilder();
    res.append(String.format(&quot;Array: size = %d , capacity = %d\n&quot;, size, data.length));
    res.append('[');
    for (int i = 0; i &amp;lt; size; i++) {
        res.append(data[i]);
        if (i != size - 1)
            res.append(&quot;, &quot;);
    }
    res.append(']');
    return res.toString();
}

// 将数组空间的容量变成newCapacity大小
private void resize(int newCapacity) {

    E[] newData = (E[]) new Object[newCapacity];
    for (int i = 0; i &amp;lt; size; i++)
        newData[i] = data[i];
    data = newData;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;注意：&lt;/strong&gt;为了更好的展示代码而不太浪费空间，所以这里使用&lt;code&gt;//&lt;/code&gt;的风格来注释代码；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;特别注意：&lt;/strong&gt;在&lt;code&gt;remove&lt;/code&gt;方法中，缩小数组的判断条件为&lt;code&gt;size == data.length / 4 &amp;amp;&amp;amp; data.length / 2 != 0&lt;/code&gt;，这是为了防止复杂度抖动和安全性；&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;简单时间复杂度分析&quot;&gt;简单时间复杂度分析&lt;/h2&gt;
&lt;h3 id=&quot;添加操作&quot;&gt;添加操作&lt;/h3&gt;
&lt;p&gt;在添加操作中，我们可以明显看到，&lt;code&gt;addLast()&lt;/code&gt;方法是与n无关的，所以为O(1)复杂度；而&lt;code&gt;addFirst()&lt;/code&gt;和&lt;code&gt;add()&lt;/code&gt;方法都涉及到挪动数组元素，所以都是O(n)复杂度，包括&lt;code&gt;resize()&lt;/code&gt;方法；综合起来&lt;strong&gt;添加操作的复杂度就是O(n)&lt;/strong&gt;；&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/7896890-94fc7ccf66aa5d2f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;删除操作&quot;&gt;删除操作&lt;/h3&gt;
&lt;p&gt;在删除操作中，与添加操作同理，综合来看&lt;strong&gt;删除操作的复杂度就是O(n)&lt;/strong&gt;；&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/7896890-8eb2707c49e0a2be.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;修改操作&quot;&gt;修改操作&lt;/h3&gt;
&lt;p&gt;在修改操作中，如果我们知道了需要修改元素的索引，那么我们就可以在常数时间内找到元素并进行修改操作，所以很容易的知道这个操作时一个复杂度为O(1)的操作，所以&lt;strong&gt;修改操作的复杂度就是O(1)&lt;/strong&gt;；但另外一种情况是我们不知道元素的索引，那么我们就需要先去查询这个元素，我把这归结到查询操作中去；&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/7896890-bfb6eaf74d69f97b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;查询操作&quot;&gt;查询操作&lt;/h3&gt;
&lt;p&gt;在查询操作中，如果我们已知索引，那么复杂度为O(1)；如果未知索引，我们需要遍历整个数组，那么复杂度为O(n)级别；&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/7896890-3c42c6c0cd550165.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;总结&quot;&gt;总结&lt;/h3&gt;
&lt;p&gt;以上我们简单分析了我们自己创建的数组类的复杂度：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;增加：O(n)；&lt;/li&gt;
&lt;li&gt;删除：O(n)；&lt;/li&gt;
&lt;li&gt;修改：已知索引 O(1)；未知索引 O(n)；&lt;/li&gt;
&lt;li&gt;查询：已知索引 O(1)；未知索引 O(n)；&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;均摊复杂度&quot;&gt;均摊复杂度&lt;/h3&gt;
&lt;p&gt;如果细心的同学应该可以注意到，在增加和删除的复杂度分析中，如果我们都只是对最后一个元素进行相应的操作的话，那么对应的O(n)的复杂度显然是不合理的，我们之所以将他们的复杂度定义为O(n)，就是因为在我们通常的复杂度分析中我们需要考虑最坏的情况，也就是对应的需要使用&lt;code&gt;resize()&lt;/code&gt;方法扩容的情况，但是这样的情况并不是每一次都出现，所以我们需要更加合理的来分析我们的复杂度，这里提出的概念就是：&lt;strong&gt;均摊复杂度&lt;/strong&gt;；&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/7896890-a854a3c6d6eff4cf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot;/&gt;&lt;/p&gt;
&lt;p&gt;假设我们现在的&lt;code&gt;capacity&lt;/code&gt;为&lt;code&gt;5&lt;/code&gt;，并且每一次的添加操作都使用&lt;code&gt;addLast()&lt;/code&gt;方法，那么我们在使用了五次&lt;code&gt;addLast()&lt;/code&gt;方法之后就会触发一次&lt;code&gt;resize()&lt;/code&gt;方法，在前五次的&lt;code&gt;addLast()&lt;/code&gt;方法中我们总共进行了五次基本操作，也就是给数组的末尾添加上一个元素，在进行第六次&lt;code&gt;addLast()&lt;/code&gt;方法的时候，触发&lt;code&gt;resize()&lt;/code&gt;方法，就需要进行一次元素的转移，共5次操作（转移五个元素嘛），然后再在末尾加上一个元素，也就是&lt;strong&gt;总共进行了11次操作&lt;/strong&gt;；&lt;/p&gt;
&lt;p&gt;也就是说：&lt;strong&gt;6次&lt;code&gt;addLast()&lt;/code&gt;操作，触发&lt;code&gt;resize()&lt;/code&gt;方法，总共进行了11次操作&lt;/strong&gt;，平均下来，每次&lt;code&gt;addLast()&lt;/code&gt;操作，进行了&lt;strong&gt;2次基本操作&lt;/strong&gt;（约等于）；那么依照上面的假设我们可以进一步推广为：假设&lt;code&gt;capacity&lt;/code&gt;为&lt;code&gt;n&lt;/code&gt;，&lt;code&gt;n+1&lt;/code&gt;次&lt;code&gt;addLast()&lt;/code&gt;操作，触发&lt;code&gt;resize()&lt;/code&gt;方法，总共进行了&lt;code&gt;2n+1&lt;/code&gt;次基本操作，平均来讲，每次&lt;code&gt;addLast()&lt;/code&gt;操作，进行了&lt;code&gt;2&lt;/code&gt;次基本操作，这样也就意味着，均摊下来的&lt;code&gt;addLast()&lt;/code&gt;方法的复杂度为O(1)，而不是之前分析的O(n)，这样的均摊复杂度显然比最坏复杂度来得更有意义，因为不是每一次的操作都是最坏的情况！&lt;/p&gt;
&lt;p&gt;同理，我们看&lt;code&gt;removeLast()&lt;/code&gt;对应的均摊复杂度也为O(1)；&lt;/p&gt;
&lt;h3 id=&quot;复杂度震荡&quot;&gt;复杂度震荡&lt;/h3&gt;
&lt;p&gt;在我们的&lt;code&gt;remove&lt;/code&gt;方法中，我们判断缩小容量的条件为&lt;code&gt;size == data.length / 4 &amp;amp;&amp;amp; data.length / 2 != 0&lt;/code&gt;，这样是为了防止复杂度震荡和安全性&lt;em&gt;（因为缩小到一定的时候容量可能为1）&lt;/em&gt;，这又是怎么一回事呢？我们考虑一下将条件改为&lt;code&gt;size == data.length / 2&lt;/code&gt;的时候，出现的如下图这样的情况：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/7896890-598064f4fc846e48.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot;/&gt;&lt;/p&gt;
&lt;p&gt;当我们数组已经满元素的情况下，使用一次&lt;code&gt;addLast&lt;/code&gt;方法，因为触发&lt;code&gt;resize&lt;/code&gt;，数组容量扩容为当前的两倍，所以此时复杂度为O(n)；这时候我们立即使用&lt;code&gt;removeLast&lt;/code&gt;，因为此时的容量等于&lt;code&gt;n/2&lt;/code&gt;，所以会马上产生缩小容量的操作，此时复杂度为O(n)；我们之前明明通过均摊复杂度分析出我们的两个操作都为O(1)，而此时却产生了震荡，为了避免这样的操作，我们需要&lt;strong&gt;懒操作&lt;/strong&gt;一下，也就是在&lt;code&gt;remove&lt;/code&gt;的时候不要立即缩容，而是等到&lt;code&gt;size == capacity / 4&lt;/code&gt;的时候再缩小一半，这样就有效的解决了复杂度震荡的问题；&lt;/p&gt;
&lt;h2 id=&quot;java中的arraylist的扩容&quot;&gt;Java中的ArrayList的扩容&lt;/h2&gt;
&lt;p&gt;上面我们已经实现了自己的数组类，我们也顺便看看Java中的ArrayList是怎么写的，其他的方法可以自己去看看，这里提出来一个&lt;code&gt;grow()&lt;/code&gt;的方法，来看看ArrayList是怎么实现动态扩容的：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/7896890-b8e31208feac356a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot;/&gt;&lt;/p&gt;
&lt;p&gt;从上面的源码我们可以看到ArrayList默认增容是增加当前容量的0.5倍（&lt;code&gt;&amp;gt;&amp;gt; 1&lt;/code&gt;即乘以0.5）&lt;/p&gt;
&lt;hr/&gt;
&lt;h2 id=&quot;什么是链表&quot;&gt;什么是链表&lt;/h2&gt;
&lt;p&gt;链表是一种用于存储数据集合的数据结构，它是最简单的动态数据结构，我们在上面虽然实现了动态数组，但这仅仅是对于用户而言，其实底层还是维护的一个静态的数组，它之所以是动态的是因为我们在add和remove的时候进行了相应判断动态扩容或缩容而已，而链表则是真正意义上动态的数据结构；&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/7896890-68f7627d1579ab83.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;链表的优点&quot;&gt;链表的优点&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;真正的动态，不需要处理固定容量的问题；&lt;/li&gt;
&lt;li&gt;能够在常数时间内扩展容量；&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;对比我们的数组，当创建数组时，我们必须分配能存储一定数量元素的内存，如果向数组中添加更多的元素，那么必须创建一个新的数组，然后把原数组中的元素复制到新数组中去，这将花费大量的时间；当然也可以通过给数组预先设定一个足够大的空间来防止上述时间的发生，但是这个方法可能会因为分配超过用户需要的空间而造成很大的内存浪费；而对于链表，初始时仅需要分配一个元素的存储空间，并且添加新的元素也很容易，不需要做任何内存复制和重新分配的操作；&lt;/p&gt;
&lt;h3 id=&quot;链表的缺点&quot;&gt;链表的缺点&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;丧失了随机访问的能力；&lt;/li&gt;
&lt;li&gt;链表中的额外指针引用需要浪费内存；&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;链表有许多不足。链表的&lt;strong&gt;主要缺点在于访问单个元素的时间开销问题&lt;/strong&gt;；数组是随时存取的，即存取数组中任一元素的时间开销为O(1)，而链表在最差情况下访问一个元素的开销为O(n)；数组在存取时间方面的另一个优点是内存的空间局部性，由于数组定义为连续的内存块，所以任何数组元素与其邻居是物理相邻的，这极大得益于现代CPU的缓存模式；&lt;/p&gt;
&lt;h3 id=&quot;链表和数组的简单对比&quot;&gt;链表和数组的简单对比&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;数组最好用于索引有语意的情况，最大的优点：&lt;strong&gt;支持快速查询&lt;/strong&gt;；&lt;/li&gt;
&lt;li&gt;链表不适用于索引有语意的情况，最大的优点：&lt;strong&gt;动态&lt;/strong&gt;；&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;实现自己的链表类&quot;&gt;实现自己的链表类&lt;/h2&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;public class LinkedList&amp;lt;E&amp;gt; {

    private class Node {
        public E e;
        public Node next;

        public Node(E e, Node next) {
            this.e = e;
            this.next = next;
        }

        public Node(E e) {
            this(e, null);
        }

        public Node() {
            this(null, null);
        }

        @Override
        public String toString() {
            return e.toString();
        }
    }

    private Node dummyHead;
    private int size;

    public LinkedList() {
        dummyHead = new Node();
        size = 0;
    }

    // 获取链表中的元素个数
    public int getSize() {
        return size;
    }

    // 返回链表是否为空
    public boolean isEmpty() {
        return size == 0;
    }

    // 在链表的index(0-based)位置添加新的元素e
    // 在链表中不是一个常用的操作，练习用：）
    public void add(int index, E e) {

        if (index &amp;lt; 0 || index &amp;gt; size)
            throw new IllegalArgumentException(&quot;Add failed. Illegal index.&quot;);

        Node prev = dummyHead;
        for (int i = 0; i &amp;lt; index; i++)
            prev = prev.next;

        prev.next = new Node(e, prev.next);
        size++;
    }

    // 在链表头添加新的元素e
    public void addFirst(E e) {
        add(0, e);
    }

    // 在链表末尾添加新的元素e
    public void addLast(E e) {
        add(size, e);
    }

    // 获得链表的第index(0-based)个位置的元素
    // 在链表中不是一个常用的操作，练习用：）
    public E get(int index) {

        if (index &amp;lt; 0 || index &amp;gt;= size)
            throw new IllegalArgumentException(&quot;Get failed. Illegal index.&quot;);

        Node cur = dummyHead.next;
        for (int i = 0; i &amp;lt; index; i++)
            cur = cur.next;
        return cur.e;
    }

    // 获得链表的第一个元素
    public E getFirst() {
        return get(0);
    }

    // 获得链表的最后一个元素
    public E getLast() {
        return get(size - 1);
    }

    // 修改链表的第index(0-based)个位置的元素为e
    // 在链表中不是一个常用的操作，练习用：）
    public void set(int index, E e) {
        if (index &amp;lt; 0 || index &amp;gt;= size)
            throw new IllegalArgumentException(&quot;Update failed. Illegal index.&quot;);

        Node cur = dummyHead.next;
        for (int i = 0; i &amp;lt; index; i++)
            cur = cur.next;
        cur.e = e;
    }

    // 查找链表中是否有元素e
    public boolean contains(E e) {
        Node cur = dummyHead.next;
        while (cur != null) {
            if (cur.e.equals(e))
                return true;
            cur = cur.next;
        }
        return false;
    }

    // 从链表中删除index(0-based)位置的元素, 返回删除的元素
    // 在链表中不是一个常用的操作，练习用：）
    public E remove(int index) {
        if (index &amp;lt; 0 || index &amp;gt;= size)
            throw new IllegalArgumentException(&quot;Remove failed. Index is illegal.&quot;);

        // E ret = findNode(index).e; // 两次遍历

        Node prev = dummyHead;
        for (int i = 0; i &amp;lt; index; i++)
            prev = prev.next;

        Node retNode = prev.next;
        prev.next = retNode.next;
        retNode.next = null;
        size--;

        return retNode.e;
    }

    // 从链表中删除第一个元素, 返回删除的元素
    public E removeFirst() {
        return remove(0);
    }

    // 从链表中删除最后一个元素, 返回删除的元素
    public E removeLast() {
        return remove(size - 1);
    }

    // 从链表中删除元素e
    public void removeElement(E e) {

        Node prev = dummyHead;
        while (prev.next != null) {
            if (prev.next.e.equals(e))
                break;
            prev = prev.next;
        }

        if (prev.next != null) {
            Node delNode = prev.next;
            prev.next = delNode.next;
            delNode.next = null;
        }
    }

    @Override
    public String toString() {
        StringBuilder res = new StringBuilder();

        Node cur = dummyHead.next;
        while (cur != null) {
            res.append(cur + &quot;-&amp;gt;&quot;);
            cur = cur.next;
        }
        res.append(&quot;NULL&quot;);

        return res.toString();
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;链表虚拟头结点的作用&quot;&gt;链表虚拟头结点的作用&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;为了屏蔽掉链表头结点的特殊性；&lt;br/&gt;因为头结点是没有前序结点的，所以我们不管是删除还是增加操作都要对头结点进行单独的判断，为了我们编写逻辑的方便，引入了一个虚拟头结点的概念；&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;简单复杂度分析&quot;&gt;简单复杂度分析&lt;/h2&gt;
&lt;p&gt;我们从链表的操作中可以很容易的看出，对于增删改查这几个操作的复杂度都是O(n)的，但是如果我们只是对链表头进行增/删/查的操作的话，那么它的复杂度就是O(1)的，这里也可以看出来我们的链表适合干的事情了..&lt;/p&gt;
&lt;hr/&gt;
&lt;h2 id=&quot;两数之和&quot;&gt;1.两数之和&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/7896890-4787948cfe291205.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;参考答案：&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;class Solution {
    public int[] twoSum(int[] numbers, int target) {
        int [] res = new int[2];
        if(numbers==null||numbers.length&amp;lt;2)
            return res;
        HashMap&amp;lt;Integer,Integer&amp;gt; map = new HashMap&amp;lt;Integer,Integer&amp;gt;();
        for(int i = 0; i &amp;lt; numbers.length; i++){
            if(!map.containsKey(target-numbers[i])){
                map.put(numbers[i],i);
            }else{
                res[0]= map.get(target-numbers[i]);
                res[1]= i;
                break;
            }
        }
        return res;
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;两数相加&quot;&gt;2.两数相加&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/7896890-329e7c2581e2826a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;参考答案：&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
    ListNode dummyHead = new ListNode(0);
    ListNode p = l1, q = l2, curr = dummyHead;
    int carry = 0;
    while (p != null || q != null) {
        int x = (p != null) ? p.val : 0;
        int y = (q != null) ? q.val : 0;
        int sum = carry + x + y;
        carry = sum / 10;
        curr.next = new ListNode(sum % 10);
        curr = curr.next;
        if (p != null) p = p.next;
        if (q != null) q = q.next;
    }
    if (carry &amp;gt; 0) {
        curr.next = new ListNode(carry);
    }
    return dummyHead.next;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;删除链表的倒数第n个节点剑指offer面试题22&quot;&gt;19.删除链表的倒数第N个节点（剑指Offer面试题22）&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/7896890-21ba125d7bf80a21.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;我的答案：（13ms）&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;public ListNode removeNthFromEnd(ListNode head, int n) {
    // 正确性判断
    if (null == head || null == head.next) {
        return null;
    }

    int num = 0;

    // 定义一个虚拟头结点方便遍历链表
    ListNode dummyHead = new ListNode(-1);
    dummyHead.next = head;

    ListNode prev = dummyHead;
    // 一次遍历找到链表的总数
    while (null != prev.next) {
        num++;
        prev = prev.next;
    }

    // 二次遍历删除对应的节点
    prev = dummyHead;
    for (int i = 0; i &amp;lt; num - n; i++) {
        prev = prev.next;
    }// end for:找到了删除节点的前序节点
    ListNode delNode = prev.next;
    prev.next = prev.next.next;
    delNode.next = null;

    // 返回头结点
    return dummyHead.next;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;我的答案2：（16ms）&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;public ListNode removeNthFromEnd(ListNode head, int n) {
    // 正确性判断
    if (null == head || null == head.next) {
        return null;
    }

    HashMap&amp;lt;Integer, ListNode&amp;gt; map = new HashMap&amp;lt;&amp;gt;();

    // 定义一个虚拟头结点方便遍历链表
    ListNode dummyHead = new ListNode(-1);
    dummyHead.next = head;

    ListNode prev = dummyHead;
    map.put(0, dummyHead);
    // 一次遍历，将序号与ListNode对应存入map中
    for (int i = 1; null != prev.next; i++, prev = prev.next) {
        map.put(i, prev.next);
    }
    // 删除对应的节点
    int delNodeNum = map.size() - n;
    ListNode delNode = map.get(delNodeNum);
    prev = map.get(delNodeNum - 1);
    prev.next = prev.next.next;
    delNode.next = null;// help GC

    // 返回头结点
    return dummyHead.next;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;参考答案：（26ms）&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;public ListNode removeNthFromEnd(ListNode head, int n) {
    // 正确性判断
    if (null == head || null == head.next) {
        return null;
    }

    // 定义虚拟头结点方便遍历
    ListNode dummyHead = new ListNode(-1);
    dummyHead.next = head;

    // 定义快慢两个节点
    ListNode fast = dummyHead;
    ListNode slow = dummyHead;

    // 让fast先跑到第n个位置
    for (int i = 0; i &amp;lt;= n; i++) {
        fast = fast.next;
    }

    // 再让两个一起移动，当fast为尾节点时slow的位置即删除元素的位置
    while (null != fast) {
        fast = fast.next;
        slow = slow.next;
    }

    ListNode delNode = slow.next;
    slow.next = slow.next.next;
    delNode.next = null;// help GC.

    return dummyHead.next;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;合并两个有序链表剑指offer面试题25&quot;&gt;21.合并两个有序链表（剑指Offer面试题25）&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/7896890-15f46dd3a2ab0bc4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;我的答案：（13ms）&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;public ListNode mergeTwoLists(ListNode l1, ListNode l2) {

    // 正确性判断
    if (null == l1) {
        return l2;
    }
    if (null == l2) {
        return l1;
    }

    // 定义一个虚拟头结点方便遍历
    ListNode dummyHead = new ListNode(-1);
    dummyHead.next = l1;
    ListNode pre = dummyHead;

    // 遍历l1链表
    int len1 = 0;
    while (null != pre.next) {
        len1++;
        pre = pre.next;
    }

    int[] nums1 = new int[len1];

    // 保存l1链表的数据
    pre = dummyHead;
    for (int i = 0; i &amp;lt; len1; i++) {
        nums1[i] = pre.next.val;
        pre = pre.next;
    }

    // 遍历l2链表
    int len2 = 0;
    dummyHead.next = l2;
    pre = dummyHead;
    while (null != pre.next) {
        len2++;
        pre = pre.next;
    }

    int[] nums2 = new int[len2];

    // 保存l2链表的数据
    pre = dummyHead;
    for (int i = 0; i &amp;lt; len2; i++) {
        nums2[i] = pre.next.val;
        pre = pre.next;
    }

    int[] nums = new int[len1 + len2];
    // 将两个链表的数据整合并排序
    System.arraycopy(nums1, 0, nums, 0, len1);
    System.arraycopy(nums2, 0, nums, len1, len2);
    Arrays.sort(nums);

    // 拼接一个链表
    ListNode dummy = new ListNode(-1);
    pre = dummy;
    for (int i = 0; i &amp;lt; nums.length; i++) {
        ListNode node = new ListNode(nums[i]);
        pre.next = node;
        pre = pre.next;
    }

    return dummy.next;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;参考答案：（15ms）&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;public ListNode mergeTwoLists(ListNode l1, ListNode l2) {
    if (l1 == null) {
        return l2;
    }
    if (l2 == null) {
        return l1;
    }
    ListNode head = null;
    if (l1.val &amp;lt; l2.val) {
        head = l1;
        head.next = mergeTwoLists(l1.next, l2);
    } else {
        head = l2;
        head.next = mergeTwoLists(l1, l2.next);
    }
    return head;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;搜索二维矩阵剑指offer面试题4&quot;&gt;74.搜索二维矩阵（剑指Offer面试题4）&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/7896890-4b6bf08639ab1964.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;参考答案：（8ms）&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;public boolean searchMatrix(int[][] matrix, int target) {

    // 正确性判断
    if (null == matrix || 0 == matrix.length) {
        return false;
    }
    if (null == matrix[0] || 0 == matrix[0].length) {
        return false;
    }

    int row = matrix.length;
    int col = matrix[0].length;

    int start = 0, end = row * col - 1;
    while (start &amp;lt;= end) {
        int mid = start + (end - start) / 2;
        int number = matrix[mid / col][mid % col];
        if (number == target) {
            return true;
        } else if (number &amp;gt; target) {
            end = mid - 1;
        } else {
            start = mid + 1;
        }
    }

    return false;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;环形链表&quot;&gt;141.环形链表&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/7896890-c87b040c793e4d97.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;我的答案：（14ms）&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;public boolean hasCycle(ListNode head) {

    // 正确条件判断
    if (null == head || null == head.next) {
        return false;
    }

    // 引入虚拟头结点
    ListNode dummyHead = new ListNode(-1);
    dummyHead.next = head;

    HashMap&amp;lt;ListNode, Integer&amp;gt; map = new HashMap&amp;lt;&amp;gt;();
    ListNode prev = dummyHead;
    // 遍历链表
    while (null != prev.next) {
        if (map.containsKey(prev.next)) {
            return true;
        } else {
            map.put(prev.next, prev.next.val);
            prev = prev.next;
        }
    }
    // 如果遍历到了链表尾巴都没找到则返回false
    return false;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;参考答案：（3ms）&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;public boolean hasCycle(ListNode head) {
    ListNode fast = head;
    ListNode slow = head;
    while(fast != null &amp;amp;&amp;amp; fast.next != null){
        // move 2 steps
        fast = fast.next.next;

        // move 1 step
        slow = slow.next;

        if(fast == slow)
            return true;
    }
    return false;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;对链表进行插入排序&quot;&gt;147.对链表进行插入排序&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/7896890-1e037c45b7a012e0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;参考答案：（38ms）&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;public ListNode insertionSortList(ListNode head) {

    // 正确性判断
    if (null == head || null == head.next) {
        return head;
    }

    // 定义一个新的节点，这个节点的作用是一个一个把head开头的链表插入到dummy开头的链表里
    ListNode dummy = new ListNode(-1);

    // 类似于冒泡排序法的遍历整个链表
    while (null != head) {
        ListNode pre = dummy;
        while (null != pre.next &amp;amp;&amp;amp; pre.next.val &amp;lt; head.val) {
            pre = pre.next;
        }
        ListNode temp = head.next;
        head.next = pre.next;
        pre.next = head;
        head = temp;
    }

    return dummy.next;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;排序链表&quot;&gt;148.排序链表&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/7896890-d9a20d68c883a1fa.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;我的答案：（829ms）&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;public ListNode sortList(ListNode head) {

    // 正确性判断
    if (null == head || null == head.next) {
        return head;
    }

    // 引入虚拟头结点方便遍历
    ListNode dummyHead = new ListNode(-1);
    dummyHead.next = head;

    List&amp;lt;Integer&amp;gt; vals = new ArrayList&amp;lt;&amp;gt;();
    ListNode prev = dummyHead;

    // 遍历一遍数组，将数据存入排好序存入vals集合中
    while (null != prev.next) {
        // 每一次都将val值插入到正确的地方
        int index = 0;
        for (int i = 0; i &amp;lt; vals.size(); i++) {
            if (prev.next.val &amp;gt;= vals.get(i)) {
                index = i + 1;
            }
        }
        vals.add(index, prev.next.val);
        prev = prev.next;
    }

    // 连接链表
    prev = dummyHead;
    for (int i = 0; i &amp;lt; vals.size(); i++) {
        ListNode node = new ListNode(vals.get(i));
        prev.next = node;
        prev = prev.next;
    }

    return dummyHead.next;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;参考答案：（4ms）&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;public ListNode sortList(ListNode head) {

    // 正确性判断
    if (null == head || null == head.next) {
        return head;
    }

    // 第一次遍历：找到链表长度
    int len = 0;
    ListNode cur = head;
    while (null != cur) {
        len++;
        cur = cur.next;
    }

    // 第二次遍历：保存链表的值
    int[] nums = new int[len];
    cur = head;
    for (int i = 0; i &amp;lt; len; i++) {
        nums[i] = cur.val;
        cur = cur.next;
    }

    // 第三次遍历：改变链表的值
    Arrays.sort(nums);
    cur = head;
    for (int i = 0; i &amp;lt; len; i++) {
        cur.val = nums[i];
        cur = cur.next;
    }

    return head;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;这里想吐槽一下：因为上面的算法遍历了三次链表，我想着使用ArrayList来少一次遍历结果发现运算速度达到了20ms左右..时间好像都花在了ArrayList转数组这个操作上了...这或许就是传说中的负优化吧...&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;删除链表中的节点剑指offer面试题18&quot;&gt;203.删除链表中的节点（剑指Offer面试题18）&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/7896890-9e4da2d5903dc05e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;参考答案：&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public ListNode removeElements(ListNode head, int val) {
        // 定义一个虚拟头结点
        ListNode dummyHead = new ListNode(-1);
        dummyHead.next = head;

        ListNode prev = dummyHead;
        while (prev.next != null) {
            if (prev.next.val == val) {
                prev.next = prev.next.next;
            } else {
                prev = prev.next;
            }
        }

        return dummyHead.next;
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;反转链表剑指offer面试题6面试题24&quot;&gt;206.反转链表（剑指Offer面试题6、面试题24）&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/7896890-634e89b6ea3074ec.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;我的答案：（7ms）&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;public ListNode reverseList(ListNode head) {

    // 正确性判断
    if (null == head || null == head.next) {
        return head;
    }

    // 定义一个虚拟头结点
    ListNode dummyHead = new ListNode(-1);
    dummyHead.next = head;

    HashMap&amp;lt;Integer, ListNode&amp;gt; map = new HashMap&amp;lt;&amp;gt;();
    ListNode prev = dummyHead;
    // 存储节点顺序信息
    for (int i = 0; null != prev.next; i++) {
        map.put(i, prev.next);
        prev = prev.next;
    }
    int listSize = map.size();
    // 反转链表
    for (int i = listSize - 1; i &amp;gt; 0; i--) {
        map.get(i).next = map.get(i - 1);
    }
    map.get(0).next = null;

    // 返回头结点
    return map.get(listSize - 1);
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;参考答案：（0ms）&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;public ListNode reverseList(ListNode head) {
    ListNode pre = null;
    while (null != head) {
        ListNode temp = head;
        head = head.next;
        temp.next = pre;
        pre = temp;
    }

    return pre;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;数组中重复的数据剑指offer面试题3&quot;&gt;442.数组中重复的数据（剑指Offer面试题3）&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/7896890-93475e5c566cad3e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;我的答案：（56ms）&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;public List&amp;lt;Integer&amp;gt; findDuplicates(int[] nums) {
    List&amp;lt;Integer&amp;gt; result = new ArrayList&amp;lt;&amp;gt;();

    // 正确性判断
    if (null == nums || 0 == nums.length) {
        return result;
    }

    // 创建一个HashMap，K值存位置，V值存数据
    HashMap&amp;lt;Integer, Integer&amp;gt; map = new HashMap&amp;lt;&amp;gt;();
    for (int i = 0; i &amp;lt; nums.length; i++) {
        // 如果存在重复的V值那么则有重复的元素存在
        if (map.containsKey(nums[i])) {
            result.add(nums[i]);
        }
        map.put(nums[i], i);
    }
    return result;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;参考答案：（14ms）&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;public List&amp;lt;Integer&amp;gt; findDuplicates(int[] nums) {
    List&amp;lt;Integer&amp;gt; res = new ArrayList&amp;lt;&amp;gt;();
    if (nums == null || nums.length == 0) return res;
    for (int i = 0; i &amp;lt; nums.length; i++) {
        int index = Math.abs(nums[i]) - 1;
        if (nums[index] &amp;gt; 0) nums[index] *= -1;
        else {
            res.add(index + 1);
        }
    }
    return res;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;上面这个方法我DEBUG了一会儿终于搞懂了，如果有两个重复的数字，那么nums[index]位置的数字一定是一个复数，但是如果这个index值超过了nums.length，就会报错啊..这个只能算一个巧解吧...&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr/&gt;&lt;h3 id=&quot;简单总结&quot;&gt;简单总结&lt;/h3&gt;
&lt;p&gt;刷题还是挺有成就感的，像这样复习一遍下来感觉自己还是挺有收获的，特别是在算法方面有了一些神奇的体验，然后呢数据结构这方面也通过刷题有了不一样的理解和见解，就希望自己能抓紧点儿时间吧，加油；&lt;/p&gt;
&lt;blockquote readability=&quot;5.985&quot;&gt;
&lt;p&gt;欢迎转载，转载请注明出处！&lt;br/&gt;简书ID：&lt;a href=&quot;https://www.jianshu.com/u/a40d61a49221&quot;&gt;@我没有三颗心脏&lt;/a&gt;&lt;br/&gt;github：&lt;a href=&quot;https://github.com/wmyskxz/&quot;&gt;wmyskxz&lt;/a&gt;&lt;br/&gt;欢迎关注公众微信号：wmyskxz_javaweb&lt;br/&gt;分享自己的Java Web学习之路以及各种Java学习资料&lt;/p&gt;
&lt;/blockquote&gt;
</description>
<pubDate>Thu, 05 Jul 2018 06:54:00 +0000</pubDate>
<dc:creator>我没有三颗心脏</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/wmyskxz/p/9268313.html</dc:identifier>
</item>
<item>
<title>【原创】一种将文本编码为图片格式的方法 - 道木先生</title>
<link>http://www.cnblogs.com/mrtiny/p/9268033.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/mrtiny/p/9268033.html</guid>
<description>&lt;p&gt;世界上的文字可以被四个字节完全覆盖，也就是UTF-32，其他都是变长的格式。而恰好ARGB加起来四个字节，于是完全可以把一个字符映射为一个像素点嘛！&lt;/p&gt;
&lt;p&gt;并且图片上的字节可以再次加密，非常好玩！我仅演示的超级无敌简单的取反操作。&lt;/p&gt;

&lt;p&gt;我自己习惯看方形的图片，于是开平方取整，如果字符数量不足就从字符本身随机取一段，这是为了图片尾部不会几个像素留白，炒鸡不美观，以白色(0xFFFFFFFF)作为终止字符。&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;49&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
static Bitmap ArgbTextEncode(string input)
        {
            var x = 0;
            var y = 0;
            var lenth = input.Length;
            var yValue = (int)(Math.Sqrt(input.Length) + 1);
            var fill = (yValue * yValue) % (Encoding.Unicode.GetByteCount(input) / 4);
            input += input.Substring(Rnd.random.Next(input.Length - fill - 1), fill);
            var image = new Bitmap(yValue, yValue);

            //fill
            for (int i = 0; i &amp;lt; yValue * yValue; i++)
            {
                if (i == lenth - 1)
                {
                    image.SetPixel(x, y, Color.White);
                }
                else
                {
                    byte[] bytes = Encoding.Unicode.GetBytes(input[i].ToString());
                    var prefix = 4 - bytes.Length;
                    bytes = Enumerable.Repeat&amp;lt;byte&amp;gt;(0, prefix).Concat(bytes).ToArray();
                    Encrypt(bytes);
                    image.SetPixel(x, y, Color.FromArgb(bytes[0], bytes[1], bytes[2], bytes[3]));
                }
                //Console.WriteLine(&quot;{0},{1} = {2}&quot;, x, y, input[i]);
                x++;
                if (x % yValue == 0)
                {
                    x = 0;
                    y++;
                }
            }
            return image;
        }
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;找了一个日志文本，看看效果&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/340208/201807/340208-20180705140423367-1448107435.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt;解码函数&lt;/p&gt;

&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;43&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
static string DecodeTextFromArgb(Bitmap image)
        {
            //ComplexImage comp = ComplexImage.FromBitmap(image);
            //comp.BackwardFourierTransform();
            var str = &quot;&quot;;
            for (int i = 0; i &amp;lt; image.Height; i++)
            {
                for (int j = 0; j &amp;lt; image.Width; j++)
                {
                    var color = image.GetPixel(j, i);
                    if (color.A == 255 &amp;amp;&amp;amp; color.R == 255 &amp;amp;&amp;amp; color.G == 255 &amp;amp;&amp;amp; color.B == 255)
                        return str;
                    var bytes = new byte[] { color.A, color.R, color.G, color.B };
                    Decrypt(bytes);
                    int skip = 0;
                    if (bytes[0] == 0)
                    {
                        if (bytes[1] == 0)
                        {
                            skip = 2;
                        }
                        else
                        {
                            skip = 1;
                        }
                    }
                    else
                    {
                        skip = 0;
                    }
                    var t = Encoding.Unicode.GetString(bytes.Skip(skip).ToArray());
                    //Console.WriteLine(&quot;{0},{1} = {2}&quot;, j, i, t);
                    str += t;
                }
            }
            return str;
        }
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;里面用到的Encrypt和Decrypt是取反的，不然图片一片漆黑，啥看不见。这句是我刚想到真的用取反操作符来，实际我是用的255去减的。&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
unchecked((byte)~(byte)value)
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Encrypt和Decrypt，其实一样的。。哈哈&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;34&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
static byte[] Encrypt(byte[] values)
        {
            for (int i = 0; i &amp;lt; values.Length; i++)
            {
                values[i] = (byte)(255 - values[i]);
            }
            return values;
        }
        static byte[] Decrypt(byte[] values)
        {
            for (int i = 0; i &amp;lt; values.Length; i++)
            {
                values[i] = (byte)(255 - values[i]);
            }
            return values;
        }
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;本程序完整代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;68&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
class Program
    {
        static void Main(string[] args)
        {
            if (!args.Any())
            {
                return;
            }
            else if (args[0].EndsWith(&quot;.txt&quot;, StringComparison.OrdinalIgnoreCase))
            {
                var textRaw = File.ReadAllText(args[0], Encoding.Unicode);
                var image = ArgbTextEncode(textRaw);
                var imagePath = Path.ChangeExtension(args[0], &quot;.png&quot;);
                image.Save(imagePath, ImageFormat.Png);
                image.Dispose();
                Console.WriteLine(&quot;TXT-&amp;gt;PNG, &quot; + imagePath);
                try
                {
                    Process.Start(imagePath);
                }
                catch
                {
                }
            }
            else if (args[0].EndsWith(&quot;.png&quot;, StringComparison.OrdinalIgnoreCase))
            {
                var image = (Bitmap)Bitmap.FromFile(args[0]);
                string text = &quot;&quot;;
                try
                {
                    text = DecodeTextFromArgb(image);

                }
                catch (Exception ex)
                {
                    Console.WriteLine(&quot;PNG-&amp;gt;TXT, 转换失败&quot;);
                    return;
                }
                var txtPath = Path.ChangeExtension(args[0], &quot;.txt&quot;);
                File.WriteAllText(txtPath, text, Encoding.Unicode);
                Console.WriteLine(&quot;PNG-&amp;gt;TXT, &quot; + txtPath);
                try
                {
                    Process.Start(txtPath);
                }
                catch
                {
                }
            }
            else
            {
                Console.WriteLine(&quot;只支持TXT和PNG文件&quot;);
            }
        }

        static Bitmap ArgbTextEncode(string input)
        {
            var x = 0;
            var y = 0;
            var lenth = input.Length;
            var yValue = (int)(Math.Sqrt(input.Length) + 1);
            var fill = (yValue * yValue) % (Encoding.Unicode.GetByteCount(input) / 4);
            input += input.Substring(Rnd.random.Next(input.Length - fill - 1), fill);
            var image = new Bitmap(yValue, yValue);

            //fill
            for (int i = 0; i &amp;lt; yValue * yValue; i++)
            {
                if (i == lenth - 1)
                {
                    image.SetPixel(x, y, Color.White);
                }
                else
                {
                    byte[] bytes = Encoding.Unicode.GetBytes(input[i].ToString());
                    var prefix = 4 - bytes.Length;
                    bytes = Enumerable.Repeat&amp;lt;byte&amp;gt;(0, prefix).Concat(bytes).ToArray();
                    Encrypt(bytes);
                    image.SetPixel(x, y, Color.FromArgb(bytes[0], bytes[1], bytes[2], bytes[3]));
                }
                //Console.WriteLine(&quot;{0},{1} = {2}&quot;, x, y, input[i]);
                x++;
                if (x % yValue == 0)
                {
                    x = 0;
                    y++;
                }
            }
            return image;
        }

        static byte[] Encrypt(byte[] values)
        {
            for (int i = 0; i &amp;lt; values.Length; i++)
            {
                values[i] = (byte)(255 - values[i]);
            }
            return values;
        }
        static byte[] Decrypt(byte[] values)
        {
            for (int i = 0; i &amp;lt; values.Length; i++)
            {
                values[i] = (byte)(255 - values[i]);
            }
            return values;
        }

        static string DecodeTextFromArgb(Bitmap image)
        {
            //ComplexImage comp = ComplexImage.FromBitmap(image);
            //comp.BackwardFourierTransform();
            var str = &quot;&quot;;
            for (int i = 0; i &amp;lt; image.Height; i++)
            {
                for (int j = 0; j &amp;lt; image.Width; j++)
                {
                    var color = image.GetPixel(j, i);
                    if (color.A == 255 &amp;amp;&amp;amp; color.R == 255 &amp;amp;&amp;amp; color.G == 255 &amp;amp;&amp;amp; color.B == 255)
                        return str;
                    var bytes = new byte[] { color.A, color.R, color.G, color.B };
                    Decrypt(bytes);
                    int skip = 0;
                    if (bytes[0] == 0)
                    {
                        if (bytes[1] == 0)
                        {
                            skip = 2;
                        }
                        else
                        {
                            skip = 1;
                        }
                    }
                    else
                    {
                        skip = 0;
                    }
                    var t = Encoding.Unicode.GetString(bytes.Skip(skip).ToArray());
                    //Console.WriteLine(&quot;{0},{1} = {2}&quot;, j, i, t);
                    str += t;
                }
            }
            return str;
        }
    }
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt; 源码地址：https://gitee.com/kstudio/ArgbText&lt;/p&gt;
</description>
<pubDate>Thu, 05 Jul 2018 06:12:00 +0000</pubDate>
<dc:creator>道木先生</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/mrtiny/p/9268033.html</dc:identifier>
</item>
<item>
<title>Java基础（三）面向对象（下） - python修行路</title>
<link>http://www.cnblogs.com/zhaof/p/9267774.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/zhaof/p/9267774.html</guid>
<description>&lt;h2 id=&quot;接口&quot; data-source-line=&quot;3&quot;&gt;接口&lt;/h2&gt;
&lt;p data-source-line=&quot;5&quot;&gt;接口中成员修饰符是固定的：&lt;/p&gt;
&lt;p data-source-line=&quot;7&quot;&gt;成员常量：public static final 成员函数：public abstract&lt;/p&gt;
&lt;p data-source-line=&quot;11&quot;&gt;通过接口间接实现了多重继承&lt;/p&gt;
&lt;h3 id=&quot;接口的特点&quot; data-source-line=&quot;13&quot;&gt;接口的特点&lt;/h3&gt;
&lt;p data-source-line=&quot;15&quot;&gt;接口是对外暴露的规则 接口是程序的工功能扩展 接口的出现降低耦合性 接口可以用来多实现 类与接口之间是实现关系，而且类可以继承一个类的同时实现多个接口 接口与接口之间可以有继承关系&lt;/p&gt;
&lt;h3 id=&quot;接口与抽象类&quot; data-source-line=&quot;23&quot;&gt;接口与抽象类&lt;/h3&gt;
&lt;p data-source-line=&quot;25&quot;&gt;抽象类体现继承关系，一个类只能单继承 接口体现实现关系，一个类可以多实现&lt;/p&gt;
&lt;p data-source-line=&quot;28&quot;&gt;抽象类中可以定义非抽象方法，供子类直接使用 接口的方法都是抽象，接口中的成员都有固定修饰符&lt;/p&gt;
&lt;p data-source-line=&quot;32&quot;&gt;一个简单的实现例子：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; study_java.ex7;

&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; InterfaceDemo1 {
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args){
        PC pc &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; PC();
        Mouse m &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Mouse();
        Iphone ip &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Iphone();
        pc.insertUSB(m);
        pc.insertUSB(ip);
    }
}

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 定义接口&lt;/span&gt;
&lt;span&gt;interface&lt;/span&gt;&lt;span&gt; USB{
    &lt;/span&gt;&lt;span&gt;void&lt;/span&gt;&lt;span&gt; connect();
}

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 类实现了接口&lt;/span&gt;
&lt;span&gt;class&lt;/span&gt; Mouse &lt;span&gt;implements&lt;/span&gt;&lt;span&gt; USB{
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; connect(){
        System.out.println(&lt;/span&gt;&quot;我是鼠标&quot;&lt;span&gt;);
    }
}

&lt;/span&gt;&lt;span&gt;class&lt;/span&gt; Iphone &lt;span&gt;implements&lt;/span&gt;&lt;span&gt; USB{
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; connect(){
        System.out.println(&lt;/span&gt;&quot;我是Iphone&quot;&lt;span&gt;);
    }
}

&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; PC {
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; insertUSB(USB usb){
        System.out.println(&lt;/span&gt;&quot;插入了usb设备&quot;&lt;span&gt;);
        usb.connect();
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果有多个接口，并且接口存在继承的时候，代码例子如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; study_java.ex7;

&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; InterfaceDemo2 {
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args){
        TuHao th &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; TuHao();
        WomanStar ws &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; WomanStar();
        th.marry(ws);
    }
}

&lt;/span&gt;&lt;span&gt;interface&lt;/span&gt;&lt;span&gt; White{
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; white();
}

&lt;/span&gt;&lt;span&gt;interface&lt;/span&gt;&lt;span&gt; Rich{
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; rich();
}

&lt;/span&gt;&lt;span&gt;interface&lt;/span&gt;&lt;span&gt;  Beautiful{
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; beautiful();
}

&lt;/span&gt;&lt;span&gt;interface&lt;/span&gt; BFM &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; White,Rich,Beautiful{

}

&lt;/span&gt;&lt;span&gt;class&lt;/span&gt; WomanStar &lt;span&gt;implements&lt;/span&gt;&lt;span&gt; BFM{
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; white(){
        System.out.println(&lt;/span&gt;&quot;我很白&quot;&lt;span&gt;);
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; rich(){
        System.out.println(&lt;/span&gt;&quot;我很有钱&quot;&lt;span&gt;);
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; beautiful(){
        System.out.println(&lt;/span&gt;&quot;我很有漂亮&quot;&lt;span&gt;);
    }
}


&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; TuHao{
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; marry(BFM bfm){
        bfm.white();
        bfm.rich();
        bfm.beautiful();
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;多态&quot; data-source-line=&quot;126&quot;&gt;多态&lt;/h2&gt;
&lt;p data-source-line=&quot;128&quot;&gt;定义：某一类事物的多种存在形态&lt;/p&gt;
&lt;p data-source-line=&quot;130&quot;&gt;多态的特点：&lt;/p&gt;
&lt;p data-source-line=&quot;130&quot;&gt;成员函数 编译时：要查看引用变量所属类中是否有所调用的成员&lt;/p&gt;
&lt;p data-source-line=&quot;130&quot;&gt;在运行时：要查看对象所属类是否有所调用的成员 成员变量 只看引用变量所属的类&lt;/p&gt;
&lt;p data-source-line=&quot;137&quot;&gt;关于多态的一个代码例子：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; study_java.ex7;

&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; MutilstateDemo1 {
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args){
        Jing8 jing8 &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Jing8();
        jing8.meng();
        jing8.cry();

        Dog dog &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Jing8();
        dog.cry();
        dog.watch();



        Animal a &lt;/span&gt;=&lt;span&gt; dog;
        a.cry();

        Pet pet &lt;/span&gt;=&lt;span&gt; (Pet) a;
        pet.meng();


    }
}


&lt;/span&gt;&lt;span&gt;abstract&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Animal{
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; cry(){
        System.out.println(&lt;/span&gt;&quot;crying...&quot;&lt;span&gt;);
    }
}

&lt;/span&gt;&lt;span&gt;class&lt;/span&gt; Dog &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; Animal{
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; watch(){
        System.out.println(&lt;/span&gt;&quot;来人了&quot;&lt;span&gt;);
    }
}

&lt;/span&gt;&lt;span&gt;class&lt;/span&gt; Jing8 &lt;span&gt;extends&lt;/span&gt; Dog &lt;span&gt;implements&lt;/span&gt;&lt;span&gt; Pet{
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; meng(){
        System.out.println(&lt;/span&gt;&quot;么么哒&quot;&lt;span&gt;);
    }
}

&lt;/span&gt;&lt;span&gt;interface&lt;/span&gt;&lt;span&gt; Pet{
    &lt;/span&gt;&lt;span&gt;void&lt;/span&gt;&lt;span&gt; meng();
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p data-source-line=&quot;186&quot;&gt;继承中方法可以被覆盖，但是成员变量不能被覆盖&lt;/p&gt;
&lt;p data-source-line=&quot;188&quot;&gt;代码例子：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; study_java.ex7;

&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; MultiStatDemo2 {
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args){
        Jing8 j &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Jing8();
        j.cry();

        Dog dog &lt;/span&gt;=&lt;span&gt; j;
        dog.cry();
        System.out.println(j.name);
        System.out.println(dog.name);
    }
}

&lt;/span&gt;&lt;span&gt;abstract&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Animal{
    &lt;/span&gt;&lt;span&gt;abstract&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; cry();
}

&lt;/span&gt;&lt;span&gt;class&lt;/span&gt; Dog &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; Animal{
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; String name = &quot;大黄&quot;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; cry(){
        System.out.println(&lt;/span&gt;&quot;旺旺&quot;&lt;span&gt;);
    }
}

&lt;/span&gt;&lt;span&gt;class&lt;/span&gt; Jing8 &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; Dog{
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; String name = &quot;小黄&quot;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; cry(){
        System.out.println(&lt;/span&gt;&quot;嘿嘿&quot;&lt;span&gt;);
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;异常&quot; data-source-line=&quot;222&quot;&gt;异常&lt;/h2&gt;
&lt;p data-source-line=&quot;224&quot;&gt;异常的体系： Throwable: Error:通常出现重大问题如：运行的类不存在或者内存溢出，不编写代码针对处理 Exception:运行时出现的一些情况，可以通过try catch finally&lt;/p&gt;
&lt;p data-source-line=&quot;229&quot;&gt;Exception 和Error的子类名都是以父类名作为后缀的&lt;/p&gt;
&lt;h3 id=&quot;trowable中的方法&quot; data-source-line=&quot;231&quot;&gt;Trowable中的方法&lt;/h3&gt;
&lt;p data-source-line=&quot;233&quot;&gt;getMessage():获取异常信息，返回字符串&lt;/p&gt;
&lt;p data-source-line=&quot;235&quot;&gt;toString():获取异常信息和异常类名，返回字符串&lt;/p&gt;
&lt;p data-source-line=&quot;237&quot;&gt;printStackTrace():获取异常类名和异常信息，以及异常出现在程序中的位置，返回值void&lt;/p&gt;
&lt;p data-source-line=&quot;239&quot;&gt;printStackTrace(printStram s):通常用该方法将异常内容保存在日志文件中&lt;/p&gt;
&lt;h3 id=&quot;throws和throw&quot; data-source-line=&quot;241&quot;&gt;throws和throw&lt;/h3&gt;
&lt;p data-source-line=&quot;243&quot;&gt;throws用于标识函数暴露出的异常 throw用于抛出异常对象 throws和throw的区别： throws用在函数上，后面跟异常类名，声明抛出异常时使用的关键字 throw用在函数内，后面跟异常对象，抛出异常的语句&lt;/p&gt;
&lt;h3 id=&quot;异常处理&quot; data-source-line=&quot;249&quot;&gt;异常处理&lt;/h3&gt;
&lt;p data-source-line=&quot;251&quot;&gt;try { 需要检测的代码 } catch { 异常处理代码 } finally { 一定会执行的代码 }&lt;/p&gt;
&lt;p data-source-line=&quot;264&quot;&gt;Finally代码只有一种情况不会被执行，就是在之前执行了System.exit(0)&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; study_java.ex8;

&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; ThrowableDemo1 {
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args){
        &lt;/span&gt;&lt;span&gt;float&lt;/span&gt; r = divide(4,0&lt;span&gt;);
        System.out.println(r);
        &lt;/span&gt;&lt;span&gt;int&lt;/span&gt;[] arr = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;int&lt;/span&gt;[] arr2 = &lt;span&gt;new&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;[4&lt;span&gt;];
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;        System.out.println(getLength(arr2));&lt;/span&gt;
&lt;span&gt;        System.out.println(getLength(arr));
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;float&lt;/span&gt; divide(&lt;span&gt;int&lt;/span&gt; a, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; b){
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; (&lt;span&gt;float&lt;/span&gt;) a /&lt;span&gt; b;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; getLength(&lt;span&gt;int&lt;/span&gt;&lt;span&gt;[] arr){
        &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; len = -1&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
            len &lt;/span&gt;=&lt;span&gt;  arr.length;
        }
        &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception e){
            System.out.println(&lt;/span&gt;&quot;出错了&quot;+&lt;span&gt; e.getMessage());
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; return -2; 这里一般也不会加return&lt;/span&gt;
&lt;span&gt;        }
        &lt;/span&gt;&lt;span&gt;finally&lt;/span&gt;&lt;span&gt; {
            len &lt;/span&gt;+= 1&lt;span&gt;;
            System.out.println(&lt;/span&gt;&quot;程序执行完了&quot;&lt;span&gt;);
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; return len; 这里一般不会加return&lt;/span&gt;
&lt;span&gt;        }
       &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; len;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;自定义异常&quot; data-source-line=&quot;306&quot;&gt;自定义异常&lt;/h3&gt;
&lt;p data-source-line=&quot;308&quot;&gt;自定义类继承Exception或者其子类&lt;/p&gt;
&lt;p data-source-line=&quot;310&quot;&gt;通过构造函数定义异常信息&lt;/p&gt;
&lt;p data-source-line=&quot;312&quot;&gt;通过throw将自定义异常抛出&lt;/p&gt;
&lt;p data-source-line=&quot;314&quot;&gt;一个简单的例子：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; study_java.ex7;

&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; ExceptionDemo1 {
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args){
        Person p &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Person();
        &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt;{
            p.setAge(&lt;/span&gt;1000&lt;span&gt;);
        }
        &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception e){
            ((AgeTooBigException)e).printlnError();
        }

    }
}

&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Person{
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; age;
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; getAge(){
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; age;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; setAge(&lt;span&gt;int&lt;/span&gt; age) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt;  AgeTooBigException {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (age &amp;gt; 200&lt;span&gt;) {
            &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; AgeTooBigException();
        }
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.age =&lt;span&gt; age;
    }
}


&lt;/span&gt;&lt;span&gt;class&lt;/span&gt; AgeTooBigException &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; Exception{
   &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String info;
   &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; AgeTooBigException(String info){
       &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.info=&lt;span&gt;info;
   }
   &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; AgeTooBigException(){
       &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;(&quot;年龄太大了&quot;&lt;span&gt;);
   }
   &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; printlnError(){
       System.out.println(info);
   }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;一个稍微复杂的例子：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; study_java.ex7;

&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; ExceptionDemo1 {
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args){
        Person p &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Person();
        &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt;{
            p.setAge(&lt;/span&gt;-10&lt;span&gt;);
        }
        &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (AgeTooBigException e){
            e.printlnError();
        }
        &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (AgeTooSmallException e){
            e.printlnError();
        }
        &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (AgeInvalidException e){
            e.printlnError();
        }

    }
}

&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Person{
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; age;
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; getAge(){
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; age;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; setAge(&lt;span&gt;int&lt;/span&gt; age) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; AgeTooBigException,
                                       AgeTooSmallException,
                                       AgeInvalidException {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (age &amp;gt; 200&lt;span&gt;) {
            &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; AgeTooBigException();
        }
        &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (age &amp;lt;10 &amp;amp;&amp;amp; age &amp;gt; 0&lt;span&gt;){
            &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; AgeTooSmallException();
        }
        &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (age &amp;lt; 0&lt;span&gt;){
            &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; AgeInvalidException(&quot;年龄非法&quot;&lt;span&gt;);
        }
        &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;{
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.age =&lt;span&gt; age;
        }

    }
}

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 年龄非法异常&lt;/span&gt;
&lt;span&gt;class&lt;/span&gt; AgeInvalidException &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; Exception{
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String info;
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; AgeInvalidException(String info){
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.info =&lt;span&gt; info;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; printlnError(){
        System.out.println(info);
    }
}

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 年龄太大异常&lt;/span&gt;
&lt;span&gt;class&lt;/span&gt; AgeTooBigException &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; AgeInvalidException{
   &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; AgeTooBigException(String info){
       &lt;/span&gt;&lt;span&gt;super&lt;/span&gt;&lt;span&gt;(info);
   }
   &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; AgeTooBigException(){
       &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;(&quot;年龄太大了&quot;&lt;span&gt;);
   }
}

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 年龄太小异常&lt;/span&gt;
&lt;span&gt;class&lt;/span&gt; AgeTooSmallException &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; AgeInvalidException{
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; AgeTooSmallException(String info){
        &lt;/span&gt;&lt;span&gt;super&lt;/span&gt;&lt;span&gt;(info);
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; AgeTooSmallException(){
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;(&quot;年龄太小了&quot;&lt;span&gt;);
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果我们不处理异常而是直接抛出可以直接在man函数里抛出异常，这样就将异常抛给了java虚拟机&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; study_java.ex8;

&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; ExceptionDemo1 {
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; main(String[] args) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
        Person p &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Person();
        p.setAge(&lt;/span&gt;-10&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 处理异常&lt;/span&gt;
        &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;
        try{
            p.setAge(2);
        }
        catch (AgeTooSmallException e){
            e.printlnError();
        }
        catch (AgeTooBigException e){
            e.printlnError();
        }
        catch (AgeInvalidException e){
            e.printlnError();
        }
        &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    }
}

&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Person{
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; age;
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; getAge(){
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; age;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; setAge(&lt;span&gt;int&lt;/span&gt; age) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; AgeTooBigException,
                                       AgeTooSmallException,
                                       AgeInvalidException{
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (age&amp;gt; 200&lt;span&gt;){
            &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; AgeTooBigException();
        }
        &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (age &amp;lt; 10 &amp;amp;&amp;amp; age &amp;gt; 0&lt;span&gt;){
            &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; AgeTooSmallException();
        }
        &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (age &amp;lt; 0&lt;span&gt;){
            &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; AgeInvalidException(&quot;年龄不合法&quot;&lt;span&gt;);
        }
        &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.age =&lt;span&gt; age;
        }

    }
}

&lt;/span&gt;&lt;span&gt;class&lt;/span&gt; AgeInvalidException &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; Exception{
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String info;

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; AgeInvalidException(String info){
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.info =&lt;span&gt; info;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; printlnError(){
        System.out.println(info);
    }
}

&lt;/span&gt;&lt;span&gt;class&lt;/span&gt; AgeTooBigException &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; AgeInvalidException{
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; AgeTooBigException(String info){
        &lt;/span&gt;&lt;span&gt;super&lt;/span&gt;&lt;span&gt;(info);
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; AgeTooBigException(){
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;(&quot;年龄太大了&quot;&lt;span&gt;);
    }
}

&lt;/span&gt;&lt;span&gt;class&lt;/span&gt; AgeTooSmallException &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; AgeInvalidException{
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; AgeTooSmallException(String info){
        &lt;/span&gt;&lt;span&gt;super&lt;/span&gt;&lt;span&gt;(info);
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; AgeTooSmallException(){
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;(&quot;年龄太小了&quot;&lt;span&gt;);
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p data-source-line=&quot;529&quot;&gt;关于异常处理的细节：&lt;/p&gt;
&lt;p data-source-line=&quot;531&quot;&gt;RuntimeException 以及其子类如果在函数中被throw抛出，可以不用再函数上声明抛出语句，也不是必须用try catch语句处理 一个方法被覆盖时，覆盖它的方法必须抛出相同的异常或者异常的子类 如果父类抛出多个异常，那么重写（覆盖）方法必须抛出那些异常的一个子集，不能抛出新的异常&lt;/p&gt;
&lt;p data-source-line=&quot;536&quot;&gt;CheckedException 待检异常，也就是非运行时异常，必须使用try catch语句处理&lt;/p&gt;
&lt;h2 id=&quot;包的概念&quot; data-source-line=&quot;539&quot;&gt;包的概念&lt;/h2&gt;
&lt;p data-source-line=&quot;541&quot;&gt;对类文件进行分类管理 给类提供多层命名空间 卸载程序文件的第一行 类名的全称的是包名.类名 包也是一种封装方式&lt;/p&gt;
&lt;p data-source-line=&quot;547&quot;&gt;如： javac -d classes PackageDemo1.java 编译java源文件，制定存放目录 java -cp classes com.zhaofan.java.PackageDemo1 运行程序，类全限定名&lt;/p&gt;
&lt;p data-source-line=&quot;552&quot;&gt;包之间的访问： 被访问的包中的类权限必须是public 类中的成员权限：public 或者protected protected是为其他包中的子类提供的一种权限&lt;/p&gt;
&lt;p data-source-line=&quot;558&quot;&gt;如果一个类是public 文件名必须是类名&lt;/p&gt;
&lt;p data-source-line=&quot;561&quot;&gt;这里顺便整理一下常见的几种权限在java中：&lt;/p&gt;
&lt;p data-source-line=&quot;561&quot;&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/997599/201807/997599-20180705131500040-32504841.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h3 id=&quot;import导入&quot; data-source-line=&quot;566&quot;&gt;import导入&lt;/h3&gt;
&lt;p data-source-line=&quot;568&quot;&gt;一个程序文件中只有一个package,可以有多个import 用来导包的类，不导入包中的包&lt;/p&gt;
&lt;p data-source-line=&quot;571&quot;&gt;小结：&lt;/p&gt;
&lt;p data-source-line=&quot;571&quot;&gt;private 私有的不能继承&lt;/p&gt;
&lt;p data-source-line=&quot;571&quot;&gt;public&lt;/p&gt;
&lt;p data-source-line=&quot;571&quot;&gt;protected 受保护的，针对其他包中的子类&lt;/p&gt;
&lt;p data-source-line=&quot;571&quot;&gt;default 默认，不写，不同包不能继承&lt;/p&gt;
&lt;p data-source-line=&quot;32&quot;&gt; &lt;/p&gt;
</description>
<pubDate>Thu, 05 Jul 2018 05:16:00 +0000</pubDate>
<dc:creator>python修行路</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/zhaof/p/9267774.html</dc:identifier>
</item>
</channel>
</rss>