<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>gradlew在Travis CI没可执行权限 permission denied - Ryan.Miao</title>
<link>http://www.cnblogs.com/woshimrf/p/gradlew-permission-denied-on-travis.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/woshimrf/p/gradlew-permission-denied-on-travis.html</guid>
<description>&lt;h2 id=&quot;问题的来源&quot;&gt;问题的来源&lt;/h2&gt;
&lt;p&gt;我给一个gradlew项目添加Travis CI的时候遇到一个问题，gradlew没有可执行权限。具体错误如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;/home/travis/build.sh: line 45: ./gradlew: Permission denied&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;显然，gradlew没有可执行权限。&lt;/p&gt;
&lt;h2 id=&quot;解决&quot;&gt;解决&lt;/h2&gt;
&lt;p&gt;首先查看权限，&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;ls -la | grep gradlew&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;或者使用git&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;git ls-tree HEAD &lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;结果&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;100644 blob 39e33cd9155a732f8a4df3d105463af5af0051c5    build.gradle&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;644没有执行权限。所以，添加x权限&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;chmod 755 gradlew&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;或者用git&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;git update-index --chmod=+x gradlew&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这时候查看git status发现有文件改变，提交就好。&lt;br/&gt;github显示变更记录为&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;0  gradlew 100644 → 100755&lt;/code&gt;
&lt;/pre&gt;</description>
<pubDate>Thu, 19 Apr 2018 07:50:00 +0000</pubDate>
<dc:creator>Ryan.Miao</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/woshimrf/p/gradlew-permission-denied-on-travis.html</dc:identifier>
</item>
<item>
<title>JavaScript 和 TypeScript 中的 class - misaky</title>
<link>http://www.cnblogs.com/onlymisaky/p/8883513.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/onlymisaky/p/8883513.html</guid>
<description>&lt;p&gt;对于一个前端开发者来说，很少用到 class ，因为在 JavaScript 中更多的是 &lt;code&gt;函数式&lt;/code&gt; 编程，抬手就是一个 &lt;code&gt;function&lt;/code&gt;，几乎不见 class 或 new 的踪影。所以 &lt;code&gt;设计模式&lt;/code&gt; 也是大多数前端开发者的一个短板。&lt;/p&gt;
&lt;p&gt;最近在学习 &lt;a href=&quot;https://www.angular.cn/&quot;&gt;Angular&lt;/a&gt; 的过程中发现其大量的运用了 class，不得不佩服，Angular 确实是一个优秀的、值得深入研究的 &lt;strong&gt;框架&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;本文将简单的介绍一下 &lt;code&gt;JavaScript&lt;/code&gt; 和 &lt;code&gt;TypeScript&lt;/code&gt; 中的 class。&lt;/p&gt;
&lt;h2 id=&quot;基本概念&quot;&gt;基本概念&lt;/h2&gt;
&lt;p&gt;在介绍 class 之前，要先介绍一些基本的概念。&lt;/p&gt;
&lt;ol readability=&quot;9.5&quot;&gt;&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;静态成员&lt;/p&gt;
&lt;p&gt;类自身的成员，可以继承，但实例无法访问，一般多见于工具类，比如在jQuery时代最常见的 &lt;code&gt;$.ajax&lt;/code&gt; ，&lt;code&gt;ajax&lt;/code&gt; 便是 &lt;code&gt;$&lt;/code&gt; 的静态方法，使用方便，不需要再通过 &lt;code&gt;new&lt;/code&gt; 或者函数调用的得到一个新实例。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;私有成员&lt;/p&gt;
&lt;p&gt;类内部的成员，一般是不能继承的，只能在内部使用，实例无法访问，有一点点像闭包内部的变量，但是还是一定的差别，目前 JavaScript 无法直接定义私有成员，只能通过其它方式辅助实现。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;getter/setter&lt;/p&gt;
&lt;p&gt;存取器属性，当我们访问或者修改一个实例的属性的时候，我们可通过存取器属性拦截这两个操作，从而做一些其它的事情，&lt;code&gt;vue&lt;/code&gt;正是通过这个api来实现对数据变化的追踪。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;实例成员&lt;/p&gt;
&lt;p&gt;指 &lt;code&gt;new&lt;/code&gt; 出来的实例所具有的成员，可以被继承，也是通过这个特性实现了代码的复用。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;7&quot;&gt;
&lt;p&gt;抽象类，抽象方法&lt;/p&gt;
&lt;p&gt;抽象类指不可以被实例化的类，通过 &lt;code&gt;new&lt;/code&gt; 关键字调用会报错，一般都被设计成父类。&lt;/p&gt;
&lt;p&gt;抽象方法，只提供方法的名称，参数和返回值，不负责实现，具体的实现由子类去完成，如果一个子类继承于抽象类，那么这个子类必须实现父类所有的抽象方法，否则会报错。&lt;/p&gt;
&lt;p&gt;这两个概念在 JavaScript 都无法直接实现，但在 TypeScript 或 其它面向对象语言中可以轻松实现，另外这个特性也是用于实现 &lt;code&gt;多态&lt;/code&gt; 的重要手段。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;h2 id=&quot;案例介绍&quot;&gt;案例介绍&lt;/h2&gt;
&lt;p&gt;为了更好的介绍 class，本文将采用三个 &lt;code&gt;类&lt;/code&gt; 来做例子，分别是 &lt;code&gt;Person&lt;/code&gt;、&lt;code&gt;Chinese&lt;/code&gt;、&lt;code&gt;American&lt;/code&gt;。从字面上可以很快的知道： Person 是 &lt;code&gt;父类(基类)&lt;/code&gt; ，Chinese 和 American 是 &lt;code&gt;子类(派生类)&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;Person 有 name、age、gender 三个属性，sayHello 方法和 fullName 存取器属性。同时 Person 还有一些 &lt;code&gt;静态成员&lt;/code&gt; 和 &lt;code&gt;私有成员&lt;/code&gt; ，由于实在太难想例子了，所以就用 foo、bar、x、y、z 这些来代替吧。&lt;/p&gt;
&lt;p&gt;作为子类的 Chinese 和 American 继承了 Person 的实例成员和静态成员。同时它们自身也有一些自己的方法和属性:&lt;/p&gt;
&lt;p&gt;Chinese 有 kungfu 属性，会习武 martial。&lt;/p&gt;
&lt;p&gt;American 有 twitter，还可以 sendTwitter。&lt;/p&gt;
&lt;p&gt;接下来我们就分别使用 JavaScript 和 TypeScript 来实现这个案例。&lt;/p&gt;
&lt;h2 id=&quot;javascript-中的-class&quot;&gt;JavaScript 中的 class&lt;/h2&gt;
&lt;p&gt;JavaScript 中的 class 要分开说，在 &lt;code&gt;ES6&lt;/code&gt; 中提供了两个关键字 &lt;code&gt;class&lt;/code&gt; 和 &lt;code&gt;extends&lt;/code&gt; ，虽然它们只是语法糖，底层还是再利用 &lt;code&gt;prototype&lt;/code&gt; 实现继承的，但是不能否认，这中写法确实让代码更清晰，更易读。&lt;/p&gt;
&lt;h3 id=&quot;es6-中的-class&quot;&gt;ES6 中的 class&lt;/h3&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;13&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; Person &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;co&quot;&gt;// #x = '私有属性x';&lt;/span&gt;
    &lt;span class=&quot;co&quot;&gt;// static x = '静态属性x';&lt;/span&gt;
    &lt;span class=&quot;co&quot;&gt;// name;&lt;/span&gt;
    &lt;span class=&quot;co&quot;&gt;// age;&lt;/span&gt;
    &lt;span class=&quot;co&quot;&gt;// gender;&lt;/span&gt;

    &lt;span class=&quot;co&quot;&gt;// 上面的写法还在提案中，并没有成为正式标准，不过变化的可能性已经不大了。&lt;/span&gt;
    &lt;span class=&quot;co&quot;&gt;// 顺便吐槽一下，用 # 表示私有成员，真的是很无语.&lt;/span&gt;

    &lt;span class=&quot;co&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     * Person的静态方法，可以被子类继承&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     * 可以通过 this 访问静态成员&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     */&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;foo&lt;/span&gt;() &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;vs&quot;&gt;`类 &lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;vs&quot;&gt; 有一个 &lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;vs&quot;&gt;`&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;at&quot;&gt;constructor&lt;/span&gt;(name&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; age&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; gender) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; name&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; age&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;gender&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; gender&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;co&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     * 数据存储器，可以访问实例成员，子类的实例可以继承&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     * 以通过 this 访问实例成员&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     */&lt;/span&gt;
    get &lt;span class=&quot;at&quot;&gt;fullName&lt;/span&gt;() &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; suffix &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;gender&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'男'&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'先生'&lt;/span&gt; : &lt;span class=&quot;st&quot;&gt;'女士'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; suffix&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

    set &lt;span class=&quot;at&quot;&gt;fullName&lt;/span&gt;(value) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;vs&quot;&gt;`你已改名为 &lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;${&lt;/span&gt;value&lt;span class=&quot;sc&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;vs&quot;&gt; `&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;co&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     * Person的实例方法，可以被子类的实例继承&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     * 可以通过 this 访问实例成员&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     */&lt;/span&gt;
    &lt;span class=&quot;at&quot;&gt;sayHello&lt;/span&gt;() &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;vs&quot;&gt;`你好我是 &lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;fullName&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;vs&quot;&gt; ,我 &lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;vs&quot;&gt; 岁了`&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;va&quot;&gt;Person&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'静态属性x'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;14&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; Chinese &lt;span class=&quot;kw&quot;&gt;extends&lt;/span&gt; Person &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kw&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;bar&lt;/span&gt;() &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;vs&quot;&gt;`类 &lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;vs&quot;&gt; 的父类是 &lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;super&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;vs&quot;&gt;`&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;super&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;foo&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;at&quot;&gt;constructor&lt;/span&gt;(name&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; age&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; gender&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; kungfu) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;super&lt;/span&gt;(name&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; age&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; gender)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;kungfu&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; kungfu&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;at&quot;&gt;martial&lt;/span&gt;() &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;vs&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;vs&quot;&gt; 正在修炼 &lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;kungfu&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;vs&quot;&gt; `&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;15&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; American &lt;span class=&quot;kw&quot;&gt;extends&lt;/span&gt; Person &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;co&quot;&gt;// static y = '静态属性y';&lt;/span&gt;

    &lt;span class=&quot;kw&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;bar&lt;/span&gt;() &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;vs&quot;&gt;`类 &lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;vs&quot;&gt; 有自己的 &lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;vs&quot;&gt; ，还继承了父类 &lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;super&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;vs&quot;&gt; 的 &lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;super&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;vs&quot;&gt;`&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;at&quot;&gt;constructor&lt;/span&gt;(name&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; age&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; gender&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; twitter) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;super&lt;/span&gt;(name&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; age&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; gender)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;twitter&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; twitter&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;at&quot;&gt;sendTwitter&lt;/span&gt;(msg) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;vs&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;vs&quot;&gt; : `&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;vs&quot;&gt;`  &lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;${&lt;/span&gt;msg&lt;span class=&quot;sc&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;vs&quot;&gt;`&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;va&quot;&gt;American&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'静态属性y'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;20&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;va&quot;&gt;Person&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;       &lt;span class=&quot;co&quot;&gt;// 静态属性x&lt;/span&gt;
&lt;span class=&quot;va&quot;&gt;Person&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;foo&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;   &lt;span class=&quot;co&quot;&gt;// 类 Person 有一个 静态属性x&lt;/span&gt;

&lt;span class=&quot;va&quot;&gt;Chinese&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;      &lt;span class=&quot;co&quot;&gt;// 静态属性x&lt;/span&gt;
&lt;span class=&quot;va&quot;&gt;Chinese&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;foo&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;co&quot;&gt;// 类 Chinese 有一个 静态属性x&lt;/span&gt;
&lt;span class=&quot;va&quot;&gt;Chinese&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;bar&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;co&quot;&gt;// 类 Chinese 的父类是 Person&lt;/span&gt;

&lt;span class=&quot;va&quot;&gt;American&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;     &lt;span class=&quot;co&quot;&gt;// 静态属性x&lt;/span&gt;
&lt;span class=&quot;va&quot;&gt;American&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;     &lt;span class=&quot;co&quot;&gt;// '静态属性y&lt;/span&gt;
&lt;span class=&quot;va&quot;&gt;American&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;foo&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;// 类 American 有一个 静态属性x&lt;/span&gt;
&lt;span class=&quot;va&quot;&gt;American&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;bar&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;// 类 American 有自己的 静态属性y ，还继承了父类 Person 的 静态属性x&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; p &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;Person&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'Lucy'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'女'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; c &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;Chinese&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'韩梅梅'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;18&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'女'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'咏春拳'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; a &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;American&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'特朗普'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;72&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'男'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'Donald J. Trump'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;va&quot;&gt;c&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;sayHello&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;   &lt;span class=&quot;co&quot;&gt;// 你好我是 韩梅梅女士 ,我 18 岁了&lt;/span&gt;
&lt;span class=&quot;va&quot;&gt;c&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;martial&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;    &lt;span class=&quot;co&quot;&gt;// 韩梅梅 正在修炼 咏春拳 &lt;/span&gt;
&lt;span class=&quot;va&quot;&gt;a&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;sayHello&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;   &lt;span class=&quot;co&quot;&gt;// 你好我是 特朗普先生 ,我 72 岁了&lt;/span&gt;
&lt;span class=&quot;va&quot;&gt;a&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;sendTwitter&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'推特治国'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;co&quot;&gt;// 特朗普 : 推特治国&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;es6-之前的-class&quot;&gt;ES6 之前的 class&lt;/h3&gt;
&lt;p&gt;ES5 的继承，实质是先创造子类的实例对象 this，&lt;/p&gt;
&lt;p&gt;然后再将父类的方法添加到 this 上面 Parent.apply(this) 。&lt;/p&gt;
&lt;p&gt;ES6 的继承机制完全不同，实质是先创造父类的实例对象 this，所以必须先调用 super 方法，&lt;/p&gt;
&lt;p&gt;然后再用子类的构造函数修改this。&lt;/p&gt;
&lt;p&gt;为了实现继承，我们需要先实现一个 &lt;code&gt;extendsClass&lt;/code&gt; 函数，它的作用是让子类继承父类的静态成员和实例成员。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;extendsClass&lt;/span&gt;(parent&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; child) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;co&quot;&gt;// 防止子类和父类相同名称的成员被父类覆盖&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; flag &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;co&quot;&gt;// 继承静态成员&lt;/span&gt;
    &lt;span class=&quot;cf&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; k &lt;span class=&quot;kw&quot;&gt;in&lt;/span&gt; parent) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        flag &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; k &lt;span class=&quot;kw&quot;&gt;in&lt;/span&gt; child&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;!&lt;/span&gt;flag) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
            child[k] &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; parent[k]&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;co&quot;&gt;// 继承父类prototype上的成员&lt;/span&gt;
    &lt;span class=&quot;co&quot;&gt;// 用一个新的构造函数切断父类和子类之间的数据共享&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; F &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; () &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;va&quot;&gt;F&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;prototype&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;parent&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;prototype&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; o &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;F&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;cf&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; k &lt;span class=&quot;kw&quot;&gt;in&lt;/span&gt; o) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        flag &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; k &lt;span class=&quot;kw&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;child&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;prototype&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;!&lt;/span&gt;flag) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;va&quot;&gt;child&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;prototype&lt;/span&gt;[k] &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; o[k]&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;21&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;Person&lt;/span&gt;(name&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; age&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; gender) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; name&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; age&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;gender&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;gender&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;co&quot;&gt;// 如果将 getter/setter 写在 prototype 会获取不到&lt;/span&gt;
    &lt;span class=&quot;va&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;defineProperty&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'fullName'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; () &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; suffix &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;gender&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'男'&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'先生'&lt;/span&gt; : &lt;span class=&quot;st&quot;&gt;'女士'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; suffix&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; () &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'你已改名为 '&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; value &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;' '&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;va&quot;&gt;Person&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'静态属性x'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;va&quot;&gt;Person&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;foo&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; () &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'类 '&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;' 有一个 '&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;x&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;va&quot;&gt;Person&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;prototype&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; Person&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;co&quot;&gt;// get fullName() { },&lt;/span&gt;
    &lt;span class=&quot;co&quot;&gt;// set fullName(value) { },&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;sayHello&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; () &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'你好我是 '&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;fullName&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;' ,我 '&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;' 了'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;};&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;18&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;Chinese&lt;/span&gt;(name&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; age&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; gender&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; kungfu) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;co&quot;&gt;// 用call改变this指向，实现继承父类的实例属性&lt;/span&gt;
    &lt;span class=&quot;va&quot;&gt;Person&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;call&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; name&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; age&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; gender)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;kungfu&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; kungfu&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;va&quot;&gt;Chinese&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;bar&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; () &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'类 '&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;' 的父类是 '&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;Person&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;name&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;va&quot;&gt;Person&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;foo&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;va&quot;&gt;Chinese&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;prototype&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; Chinese&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;martial&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; () &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;' 正在修炼 '&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;kungfu&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;' '&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;at&quot;&gt;extendsClass&lt;/span&gt;(Person&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; Chinese)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;18&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;American&lt;/span&gt;(name&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; age&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; gender&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; twitter) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;va&quot;&gt;Person&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;call&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; name&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; age&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; gender)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;twitter&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; twitter&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;va&quot;&gt;American&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'静态属性y'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;va&quot;&gt;American&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;bar&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; () &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'类 '&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;' 有自己的 '&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;' ，还继承了父类 '&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;Person&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;' 的 '&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;Person&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;x&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;va&quot;&gt;American&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;prototype&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; American&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;sendTwitter&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; (msg) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;' : '&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'  '&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; msg)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;at&quot;&gt;extendsClass&lt;/span&gt;(Person&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; American)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;typescript-中的-class&quot;&gt;TypeScript 中的 class&lt;/h2&gt;
&lt;p&gt;讲完了 JavaScript 中的类，还是没有用到 抽象类，抽象方法，私有方法这三个概念，由于 JavaScript 语言的局限性，想要实现这三种概念是很困难的，但是在 TypeScript 可以轻松的实现这一特性。&lt;/p&gt;
&lt;p&gt;首先我们稍微修改一下例子中的描述，&lt;strong&gt;Person 是抽象类&lt;/strong&gt;，因为一个正常的人肯定是有国籍的，Person 的 sayHello 方法是抽象方法，因为每个国家打招呼的方式不一样。另外一个人的性别是只能读取，不能修改的，且是确定的是，不是男生就是女生，所以还要借助一下枚举。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;kw&quot;&gt;enum&lt;/span&gt; Gender &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    female &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
    male &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;};&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;12&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;abstract &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; Person &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; string &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'私有属性x，子类和实例都无法访问'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kw&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; string &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'私有属性y，子类可以访问，实例无法访问'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;dt&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; string&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; number&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; readonly &lt;span class=&quot;dt&quot;&gt;gender&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; Gender&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;// 用关键字 readonly 表明这是一个只读属性&lt;/span&gt;

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; string &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'静态属性x'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;foo&lt;/span&gt;() &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;vs&quot;&gt;`类 &lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;vs&quot;&gt; 有一个 &lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;vs&quot;&gt;`&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;at&quot;&gt;constructor&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; string&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; number&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;gender&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; Gender) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; name&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; age&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;gender&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; gender&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

    get &lt;span class=&quot;at&quot;&gt;fullName&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; string &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; suffix &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;gender&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'先生'&lt;/span&gt; : &lt;span class=&quot;st&quot;&gt;'女士'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; suffix&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

    set &lt;span class=&quot;at&quot;&gt;FullName&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; string) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;vs&quot;&gt;`你已改名为 &lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;${&lt;/span&gt;value&lt;span class=&quot;sc&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;vs&quot;&gt; `&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;co&quot;&gt;// 抽象方法，具体实现交由子类完成&lt;/span&gt;
    abstract &lt;span class=&quot;at&quot;&gt;sayHello&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;16&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; Chinese &lt;span class=&quot;kw&quot;&gt;extends&lt;/span&gt; Person &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;kungfu&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; string&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;bar&lt;/span&gt;() &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;vs&quot;&gt;`类 &lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;vs&quot;&gt; 的父类是 &lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;super&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;vs&quot;&gt;`&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;super&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;foo&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;constructor&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; string&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; number&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;gender&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; Gender&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;kungfu&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; string) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;super&lt;/span&gt;(name&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; age&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; gender)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;kungfu&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; kungfu&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;sayHello&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;vs&quot;&gt;`你好我是 &lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;fullName&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;vs&quot;&gt; ,我 &lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;vs&quot;&gt; 岁了`&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;martial&lt;/span&gt;() &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;vs&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;vs&quot;&gt; 正在修炼 &lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;kungfu&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;vs&quot;&gt; `&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;17&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; American &lt;span class=&quot;kw&quot;&gt;extends&lt;/span&gt; Person &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kw&quot;&gt;static&lt;/span&gt; y &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'静态属性y'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;bar&lt;/span&gt;() &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;vs&quot;&gt;`类 &lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;vs&quot;&gt; 有自己的 &lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;vs&quot;&gt; ，还继承了父类 &lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;super&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;vs&quot;&gt; 的 &lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;super&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;vs&quot;&gt;`&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;twitter&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; string&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;constructor&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; string&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; number&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;gender&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; Gender&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;twitter&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; string) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;super&lt;/span&gt;(name&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; age&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; gender)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;twitter&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; twitter&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;sayHello&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;vs&quot;&gt;`Hello, I am &lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;fullName&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;vs&quot;&gt; , I'm &lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;vs&quot;&gt; years old`&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;sendTwitter&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; string)&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;vs&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;vs&quot;&gt; : `&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;vs&quot;&gt;`  &lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;${&lt;/span&gt;msg&lt;span class=&quot;sc&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;vs&quot;&gt;`&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;19&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;va&quot;&gt;Person&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;       &lt;span class=&quot;co&quot;&gt;// 静态属性x&lt;/span&gt;
&lt;span class=&quot;va&quot;&gt;Person&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;foo&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;   &lt;span class=&quot;co&quot;&gt;// 类 Person 有一个 静态属性x&lt;/span&gt;

&lt;span class=&quot;va&quot;&gt;Chinese&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;      &lt;span class=&quot;co&quot;&gt;// 静态属性x&lt;/span&gt;
&lt;span class=&quot;va&quot;&gt;Chinese&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;foo&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;co&quot;&gt;// 类 Chinese 有一个 静态属性x&lt;/span&gt;
&lt;span class=&quot;va&quot;&gt;Chinese&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;bar&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;co&quot;&gt;// 类 Chinese 的父类是 Person&lt;/span&gt;

&lt;span class=&quot;va&quot;&gt;American&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;     &lt;span class=&quot;co&quot;&gt;// 静态属性x&lt;/span&gt;
&lt;span class=&quot;va&quot;&gt;American&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;     &lt;span class=&quot;co&quot;&gt;// '静态属性y&lt;/span&gt;
&lt;span class=&quot;va&quot;&gt;American&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;foo&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;// 类 American 有一个 静态属性x&lt;/span&gt;
&lt;span class=&quot;va&quot;&gt;American&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;bar&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;// 类 American 有自己的 静态属性y ，还继承了父类 Person 的 静态属性x&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; c&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; Chinese &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;Chinese&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'韩梅梅'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;18&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;Gender&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;female&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'咏春拳'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; a&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; American &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;American&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'特朗普'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;72&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;Gender&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;male&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'Donald J. Trump'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;va&quot;&gt;c&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;sayHello&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;   &lt;span class=&quot;co&quot;&gt;// 你好我是 韩梅梅女士 ,我 18 岁了&lt;/span&gt;
&lt;span class=&quot;va&quot;&gt;c&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;martial&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;    &lt;span class=&quot;co&quot;&gt;// 韩梅梅 正在修炼 咏春拳 &lt;/span&gt;
&lt;span class=&quot;va&quot;&gt;a&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;sayHello&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;   &lt;span class=&quot;co&quot;&gt;// Hello, I am 特朗普先生 , I'm 72 years old&lt;/span&gt;
&lt;span class=&quot;va&quot;&gt;a&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;sendTwitter&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'推特治国'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;co&quot;&gt;// 特朗普 : 推特治国&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
</description>
<pubDate>Thu, 19 Apr 2018 07:49:00 +0000</pubDate>
<dc:creator>misaky</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/onlymisaky/p/8883513.html</dc:identifier>
</item>
<item>
<title>重拾Python(5):数据读取 - hbsygfz</title>
<link>http://www.cnblogs.com/hbsygfz/p/8883410.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/hbsygfz/p/8883410.html</guid>
<description>&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;&lt;span&gt;本文主要对Python如何读取数据进行总结梳理，涵盖从文本文件，尤其是excel文件（用于离线数据探索分析），以及结构化数据库（以Mysql为例）中读取数据等内容。&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;约定：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;import numpy as np
import pandas as pd&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;从文本文件中读取&quot;&gt;1、从文本文件中读取&lt;/h2&gt;
&lt;h3 id=&quot;使用python标准库中的readreadlinereadlines方法读取&quot;&gt;（1）使用Python标准库中的read、readline、readlines方法读取&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;a. 一般流程：&lt;/strong&gt;&lt;br/&gt;step1: 通过open方法创建一个文件对象&lt;br/&gt;setp2: 通过read、readline、readlines方法读取文件内容&lt;br/&gt;step3: 通过close方法关闭文件对象&lt;br/&gt;&lt;strong&gt;b. 区别：&lt;/strong&gt;&lt;br/&gt;示例：test.txt&lt;br/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/554583/201804/554583-20180419153540754-1430851568.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;read方法：&lt;/strong&gt;读取全部数据，结果为一个字符串（所有行合并为一个字符串）&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;#打开文件
f = open('/labcenter/python/pandas/test.txt')
#使用read方法读取文件
data1 = f.read()
print data1
type(data1)
#关闭文件
f.close()&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;结果：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;col1    col2    col3
101 20  0.68
102 30  0.79
103 50  0.72
104 60  0.64
105 70  0.55
str&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;readline方法：&lt;/strong&gt;读取一行数据，结果为一个字符串，需要seek\next等指针操作方法配合实现所有记录的遍历。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;#打开文件
f = open('/labcenter/python/pandas/test.txt')
#使用readline方法读取文件
data2 = f.readline()
print data2
type(data2)
#关闭文件
f.close()&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;结果：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;col1    col2    col3
str&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;readlines方法：&lt;/strong&gt;读取全部数据，结构为一个列表（一行为列表中的一个元素）&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;#打开文件
f = open('/labcenter/python/pandas/test.txt')
#使用readlines方法读取文件
data3 = f.readlines()
print data3
type(data3)
for line in data3:
    print line
#关闭文件
f.close()&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;结果：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;['col1    col2    col3\r\n', '101 20  0.68\r\n', '102 30  0.79\r\n', '103 50  0.72\r\n', '104 60  0.64\r\n', '105 70  0.55']
list
col1    col2    col3
101 20  0.68
102 30  0.79
103 50  0.72
104 60  0.64
105 70  0.55&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;c. 支持文件范围：&lt;/strong&gt;&lt;br/&gt;txt\csv\tsv及所有以固定分隔符分隔的文本文件。&lt;/p&gt;
&lt;h3 id=&quot;使用numpy库中的loadtxtloadfromfile方法读取&quot;&gt;（2）使用Numpy库中的loadtxt、load、fromfile方法读取&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;a. loadtxt方法&lt;/strong&gt;&lt;br/&gt;从txt文本文件中读取，返回一个数组。&lt;br/&gt;np.loadtxt('/labcenter/python/pandas/test.txt',skiprows=1)&lt;br/&gt;Out[413]:&lt;br/&gt;array([[ 101. , 20. , 0.68],&lt;br/&gt;[ 102. , 30. , 0.79],&lt;br/&gt;[ 103. , 50. , 0.72],&lt;br/&gt;[ 104. , 60. , 0.64],&lt;br/&gt;[ 105. , 70. , 0.55]])&lt;br/&gt;&lt;strong&gt;b. load方法&lt;/strong&gt;&lt;br/&gt;读取Numpy专用的二进制数据文件，该文件通常基于Numpy的save或savez方法生成。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;write = np.array([[1,2,3,4],[5,6,7,8]])
np.save('output',write)
data = np.load('output.npy')
print data
type(data)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;结果：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;[[1 2 3 4]
[5 6 7 8]]
numpy.ndarray&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;c. fromfile方法&lt;/strong&gt;&lt;br/&gt;读取简单的文本文件和二进制文件，该文件通常基于Numpy的&lt;strong&gt;tofile方法&lt;/strong&gt;生成。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;write = np.array([[1,2,3,4],[5,6,7,8]])
write.tofile('output')
data = np.fromfile('output',dtype='float32')
print data
type(data)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;结果：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;[  1.40129846e-45   0.00000000e+00   2.80259693e-45 ...,   0.00000000e+00
   1.12103877e-44   0.00000000e+00]
numpy.ndarray&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;使用pandas库中的read_csvread_tableread_excel等方法读取&quot;&gt;（3）使用Pandas库中的read_csv、read_table、read_excel等方法读取&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;a. read_csv方法&lt;/strong&gt;&lt;br/&gt;读取csv文件，返回一个DataFrame对象或TextParser对象。&lt;br/&gt;示例：&lt;br/&gt;test.csv&lt;br/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/554583/201804/554583-20180419153801036-481920033.png&quot;/&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;data = pd.read_csv('/labcenter/python/pandas/test.csv')
print data
type(data)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;结果：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;   col1  col2  col3
0   101    20  0.68
1   102    30  0.79
2   103    50  0.72
3   104    60  0.64
4   105    70  0.55
pandas.core.frame.DataFrame&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;b. read_table方法&lt;/strong&gt;&lt;br/&gt;读取通用分隔符分隔的文本文件，返回一个DataFrame对象或TextParser对象。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;data = pd.read_table('/labcenter/python/pandas/test.csv',sep=',')
print data
type(data)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;结果：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;   col1  col2  col3
0   101    20  0.68
1   102    30  0.79
2   103    50  0.72
3   104    60  0.64
4   105    70  0.55
pandas.core.frame.DataFrame&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;c. read_excel方法&lt;/strong&gt;&lt;br/&gt;读取excel文件，返回一个DataFrame对象或TextParser对象。&lt;br/&gt;示例：&lt;br/&gt;test.xlsx&lt;br/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/554583/201804/554583-20180419153910510-1291120319.png&quot;/&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;data = pd.read_excel('/labcenter/python/pandas/test.xlsx')
print data
type(data)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;结果：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;   col1  col2  col3
0   101    21  22.6
1   102    31  31.2
2   103    41  32.7
3   104    51  28.2
4   105    61  18.9
pandas.core.frame.DataFrame&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;d. 其他方法&lt;/strong&gt;&lt;br/&gt;read_sql方法：读取sql请求或者数据库中的表。&lt;br/&gt;read_json方法：读取json文件。&lt;/p&gt;
&lt;h3 id=&quot;如何选择&quot;&gt;（4）如何选择？&lt;/h3&gt;
&lt;p&gt;a. 选取自己最熟悉的方法。&lt;/p&gt;
&lt;p&gt;b. 根据场景选择：&lt;br/&gt;① 对纯文本、非结构化的数据：标准库的三种方法&lt;br/&gt;② 对结构化、数值型，并且要用于矩阵计算、数据建模的：Numpy的loadtxt方法&lt;br/&gt;③ 对于二进制数据：Numpy的load和fromfile方法&lt;br/&gt;④ 对于结构化的数据，并且要用于数据探索分析的：Pandas方法&lt;/p&gt;
&lt;h2 id=&quot;从excel文件中读取&quot;&gt;2、从Excel文件中读取&lt;/h2&gt;
&lt;p&gt;excel往往是在进行离线数据探索分析时提供的数据文件格式，因此这里单独拿出来多总结一下。&lt;/p&gt;
&lt;h3 id=&quot;使用pandas库的read_excel方法&quot;&gt;（1）使用Pandas库的read_excel方法&lt;/h3&gt;
&lt;p&gt;见上文1.3.c内容。&lt;/p&gt;
&lt;h3 id=&quot;使用其他第三方库&quot;&gt;（2）使用其他第三方库&lt;/h3&gt;
&lt;p&gt;以xlrd库为例， xlrd模块实现对excel文件内容读取。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;import xlrd
#打开一个excel文件
xlsx=xlrd.open_workbook('/labcenter/python/pandas/test.xlsx')
#读取sheet清单
sheets=xlsx.sheet_names()
sheets
#获取一个sheet数据
sheet1=xlsx.sheets()[0]
#获取指定sheet的名称
sheet1.name
#获取指定sheet的行数
sheet1.nrows
#获取指定sheet的列数
sheet1.ncols
#获取指定sheet某行的数据
sheet1.row_values(1)
#获取指定sheet某列的数据
sheet1.col_values(1)
#获取指定sheet某单元格的数据
sheet1.row(1)[2].value
sheet1.cell_value(1,2)
#逐行获取指定sheet的数据
for i in range(sheet1.nrows):
    print sheet1.row_values(i)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;结果：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;[u'Sheet1', u'Sheet2']
u'Sheet1'
6
3
[101.0, 21.0, 22.6]
[u'col2', 21.0, 31.0, 41.0, 51.0, 61.0]
22.6
22.6
[u'col1', u'col2', u'col3']
[101.0, 21.0, 22.6]
[102.0, 31.0, 31.2]
[103.0, 41.0, 32.7]
[104.0, 51.0, 28.2]
[105.0, 61.0, 18.9]&lt;/code&gt;
&lt;/pre&gt;

&lt;h2 id=&quot;从结构化数据库中读取&quot;&gt;3、从结构化数据库中读取&lt;/h2&gt;
&lt;p&gt;根据数据库选择相应的库，如：mysql数据库使用MySQLdb库，oracle数据库使用cx_Oracle库，teradata数据库使用teradata库，等等。&lt;br/&gt;一般流程：&lt;br/&gt;step1: 建立数据库连接&lt;br/&gt;step2: cursor方法获取游标&lt;br/&gt;step3: execute方法执行SQL语句&lt;br/&gt;step4: fetchall方法获取返回的记录&lt;br/&gt;step5: close方法关闭游标&lt;br/&gt;step6: close方法断开数据库连接&lt;br/&gt;示例：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;import MySQLdb
#建立数据库连接
conn = MySQLdb.connect(&quot;localhost&quot;, &quot;root&quot;, &quot;root&quot;, &quot;testdb&quot;, charset='utf8')
#获取游标
cursor = conn.cursor()
#执行SQL语句
cursor.execute(&quot;select * from mytab1;&quot;)
#获取返回的记录
results = cursor.fetchall()
#逐行打印
for result in results:
    print result
#关闭游标
cursor.close()
#断开数据库连接
conn.close()&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;结果：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;(1L, u'aaa')
(2L, u'bbb')
(3L, u'ccc')
(4L, u'ddd')
(5L, u'eee')&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;可通过命令&lt;code&gt;pip install MySql-Python&lt;/code&gt;安装库MySQLdb。&lt;/p&gt;
&lt;h2 id=&quot;参考与感谢&quot;&gt;4.参考与感谢&lt;/h2&gt;
&lt;p&gt;[1] &lt;a href=&quot;https://book.douban.com/subject/27608466/&quot;&gt;Python数据分析与数据化运营&lt;/a&gt;&lt;/p&gt;

</description>
<pubDate>Thu, 19 Apr 2018 07:45:00 +0000</pubDate>
<dc:creator>hbsygfz</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/hbsygfz/p/8883410.html</dc:identifier>
</item>
<item>
<title>python3全栈开发-socket编程 - 天王盖地虎宝塔镇河妖</title>
<link>http://www.cnblogs.com/ManyQian/p/8883425.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/ManyQian/p/8883425.html</guid>
<description>&lt;h2&gt;一、 客户端/服务器架构&lt;/h2&gt;
&lt;p&gt;1.硬件C/S架构(打印机)&lt;/p&gt;
&lt;p&gt;2.软件C/S架构&lt;/p&gt;
&lt;p&gt;&lt;em&gt;　　&lt;/em&gt;互联网中处处是C/S架构&lt;/p&gt;
&lt;p&gt;　　如黄色网站是服务端，你的浏览器是客户端（B/S架构也是C/S架构的一种）&lt;/p&gt;
&lt;p&gt;　　腾讯作为服务端为你提供视频，你得下个腾讯视频客户端才能看它的视频）&lt;/p&gt;
&lt;div class=&quot;page&quot; title=&quot;Page 659&quot;&gt;
&lt;div class=&quot;layoutArea&quot; readability=&quot;20.69935111752&quot;&gt;
&lt;div class=&quot;column&quot; readability=&quot;36.694304253785&quot;&gt;
&lt;p&gt;C/S架构与socket的关系：&lt;/p&gt;
&lt;p&gt;我们学习socket就是为了完成C/S架构的开发&lt;/p&gt;
&lt;h2&gt;二、 osi七层&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;引子：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　须知一个完整的计算机系统是由硬件、操作系统、应用软件三者组成,具备了这三个条件，一台计算机系统就可以自己跟自己玩了（打个单机游戏，玩个扫雷啥的）&lt;/p&gt;
&lt;p&gt;如果你要跟别人一起玩，那你就需要上网了，什么是互联网？&lt;/p&gt;
&lt;p&gt;互联网的核心就是由一堆协议组成，协议就是标准，比如全世界人通信的标准是英语&lt;/p&gt;
&lt;p&gt;如果把计算机比作人，互联网协议就是计算机界的英语。所有的计算机都学会了互联网协议，那所有的计算机都就可以按照统一的标准去收发信息从而完成通信了。&lt;/p&gt;
&lt;p&gt;人们按照分工不同把互联网协议从逻辑上划分了层级，&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/linhaifeng/articles/5937962.html&quot; target=&quot;_blank&quot;&gt;详见网络通信原理：http://www.cnblogs.com/linhaifeng/articles/5937962.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;为何学习socket一定要先学习互联网协议：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1.首先：本节课程的目标就是教会你如何基于socket编程，来开发一款自己的C/S架构软件&lt;/p&gt;
&lt;p&gt;2.其次：C/S架构的软件（软件属于应用层）是基于网络进行通信的&lt;/p&gt;
&lt;p&gt;3.然后：网络的核心即一堆协议，协议即标准，你想开发一款基于网络通信的软件，就必须遵循这些标准。&lt;/p&gt;
&lt;p&gt;4.最后：就让我们从这些标准开始研究，开启我们的socket编程之旅&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;span lang=&quot;EN-US&quot;&gt;                                                                              &lt;br/&gt;&lt;img src=&quot;https://images.cnblogs.com/cnblogs_com/goodcandle/socket1.jpg&quot; alt=&quot;&quot; width=&quot;596&quot; height=&quot;448&quot; hspace=&quot;0&quot;/&gt;&lt;br/&gt;&lt;span lang=&quot;EN-US&quot;&gt;                                                           图&lt;span lang=&quot;EN-US&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;三 、socket层&lt;/h2&gt;
&lt;p&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;在图&lt;span lang=&quot;EN-US&quot;&gt;1中，我们没有看到&lt;span lang=&quot;EN-US&quot;&gt;Socket的影子，那么它到底在哪里呢？还是用图来说话，一目了然。 &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;br/&gt;&lt;img src=&quot;https://images.cnblogs.com/cnblogs_com/goodcandle/socket2.jpg&quot; alt=&quot;&quot; width=&quot;542&quot; height=&quot;476&quot; hspace=&quot;0&quot;/&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt; 图2&lt;/p&gt;
&lt;h2&gt;四 、socket是什么&lt;/h2&gt;
&lt;p&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;Socket是应用层与&lt;span lang=&quot;EN-US&quot;&gt;TCP/IP协议族通信的中间软件抽象层，它是一组接口。在设计模式中，&lt;span lang=&quot;EN-US&quot;&gt;Socket其实就是一个门面模式，它把复杂的&lt;span lang=&quot;EN-US&quot;&gt;TCP/IP协议族隐藏在&lt;span lang=&quot;EN-US&quot;&gt;Socket接口后面，对用户来说，一组简单的接口就是全部，让&lt;span lang=&quot;EN-US&quot;&gt;Socket去组织数据，以符合指定的协议。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span lang=&quot;EN-US&quot;&gt;所以，我们无需深入理解tcp/udp协议，socket已经为我们封装好了，我们只需要遵循socket的规定去编程，写出的程序自然就是遵循tcp/udp标准的。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('8bc49ae5-d024-4ce9-a67f-b3885a6267af')&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_8bc49ae5-d024-4ce9-a67f-b3885a6267af&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_8bc49ae5-d024-4ce9-a67f-b3885a6267af&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('8bc49ae5-d024-4ce9-a67f-b3885a6267af',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_8bc49ae5-d024-4ce9-a67f-b3885a6267af&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
也有人将socket说成ip+&lt;span&gt;port，ip是用来标识互联网中的一台主机的位置，而port是用来标识这台机器上的一个应用程序，ip地址是配置到网卡上的，而port是应用程序开启的，ip与port的绑定就标识了互联网中独一无二的一个应用程序

而程序的pid是同一台机器上不同进程或者线程的标识&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;扫盲区&lt;/span&gt;&lt;/div&gt;
&lt;h2&gt;五、 套接字发展史及分类&lt;/h2&gt;
&lt;div class=&quot;page&quot; title=&quot;Page 659&quot;&gt;
&lt;div class=&quot;layoutArea&quot; readability=&quot;17&quot;&gt;
&lt;div class=&quot;column&quot; readability=&quot;29&quot;&gt;
&lt;p&gt;套接字起源于 20 世纪 70 年代加利福尼亚大学伯克利分校版本的 Unix,即人们所说的 BSD Unix。 因此,有时人们也把套接字称为“伯克利套接字”或“BSD 套接字”。一开始,套接字被设计用在同 一台主机上多个应用程序之间的通讯。这也被称进程间通讯,或 IPC。套接字有两种（或者称为有两个种族）,分别是基于文件型的和基于网络型的。 &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;基于文件类型的套接字家族&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;套接字家族的名字：AF_UNIX&lt;/p&gt;
&lt;p&gt;unix一切皆文件，基于文件的套接字调用的就是底层的文件系统来取数据，两个套接字进程运行在同一机器，可以通过访问同一个文件系统间接完成通信&lt;/p&gt;
&lt;strong&gt;基于网络类型的套接字家族&lt;/strong&gt;
&lt;p&gt;套接字家族的名字：AF_INET&lt;/p&gt;
&lt;p&gt;(还有AF_INET6被用于ipv6，还有一些其他的地址家族，不过，他们要么是只用于某个平台，要么就是已经被废弃，或者是很少被使用，或者是根本没有实现，所有地址家族中，AF_INET是使用最广泛的一个，python支持很多种地址家族，但是由于我们只关心网络编程，所以大部分时候我么只使用AF_INET)&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h2&gt;&lt;span lang=&quot;EN-US&quot;&gt;六 、套接字工作流程&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;       一个生活中的场景。你要打电话给一个朋友，先拨号，朋友听到电话铃声后提起电话，这时你和你的朋友就建立起了连接，就可以讲话了。等交流结束，挂断电话结束此次交谈。&lt;span lang=&quot;EN-US&quot;&gt; 生活中的场景就解释了这工作原理。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;img src=&quot;https://images.cnblogs.com/cnblogs_com/goodcandle/socket3.jpg&quot; alt=&quot;&quot; width=&quot;478&quot; height=&quot;491&quot; hspace=&quot;0&quot;/&gt;      &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span lang=&quot;EN-US&quot;&gt;                                           图3       &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span lang=&quot;EN-US&quot;&gt;先从服务器端说起。服务器端先初始化&lt;span lang=&quot;EN-US&quot;&gt;Socket，然后与端口绑定&lt;span lang=&quot;EN-US&quot;&gt;(bind)，对端口进行监听&lt;span lang=&quot;EN-US&quot;&gt;(listen)，调用&lt;span lang=&quot;EN-US&quot;&gt;accept阻塞，等待客户端连接。在这时如果有个客户端初始化一个&lt;span lang=&quot;EN-US&quot;&gt;Socket，然后连接服务器&lt;span lang=&quot;EN-US&quot;&gt;(connect)，如果连接成功，这时客户端与服务器端的连接就建立了。客户端发送数据请求，服务器端接收请求并处理请求，然后把回应数据发送给客户端，客户端读取数据，最后关闭连接，一次交互结束&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span lang=&quot;EN-US&quot;&gt;socket()模块函数用法&lt;/span&gt;&lt;/p&gt;
&lt;pre readability=&quot;24&quot;&gt;
&lt;strong&gt;服务端套接字函数&lt;/strong&gt;&lt;br/&gt;s.bind()    绑定(主机,端口号)到套接字&lt;br/&gt;s.listen()  开始TCP监听&lt;br/&gt;s.accept()  被动接受TCP客户的连接,(阻塞式)等待连接的到来&lt;p&gt;&lt;strong&gt;客户端套接字函数&lt;/strong&gt;&lt;br/&gt;s.connect()     主动初始化TCP服务器连接&lt;br/&gt;s.connect_ex()  connect()函数的扩展版本,出错时返回出错码,而不是抛出异常&lt;/p&gt;&lt;p&gt;&lt;strong&gt;公共用途的套接字函数&lt;/strong&gt;&lt;br/&gt;s.recv()            接收TCP数据&lt;br/&gt;s.send()            发送TCP数据(send在待发送数据量大于己端缓存区剩余空间时,数据丢失,不会发完)&lt;br/&gt;s.sendall()         发送完整的TCP数据(本质就是循环调用send,sendall在待发送数据量大于己端缓存区剩余空间时,数据不丢失,循环调用send直到发完)&lt;br/&gt;s.recvfrom()        接收UDP数据&lt;br/&gt;s.sendto()          发送UDP数据&lt;br/&gt;s.getpeername()     连接到当前套接字的远端的地址&lt;br/&gt;s.getsockname()     当前套接字的地址&lt;br/&gt;s.getsockopt()      返回指定套接字的参数&lt;br/&gt;s.setsockopt()      设置指定套接字的参数&lt;br/&gt;s.close()           关闭套接字&lt;/p&gt;&lt;p&gt;&lt;strong&gt;面向锁的套接字方法&lt;/strong&gt;&lt;br/&gt;s.setblocking()     设置套接字的阻塞与非阻塞模式&lt;br/&gt;s.settimeout()      设置阻塞套接字操作的超时时间&lt;br/&gt;s.gettimeout()      得到阻塞套接字操作的超时时间&lt;/p&gt;&lt;p&gt;&lt;strong&gt;面向文件的套接字的函数&lt;/strong&gt;&lt;br/&gt;s.fileno()          套接字的文件描述符&lt;br/&gt;s.makefile()        创建一个与该套接字相关的文件&lt;/p&gt;&lt;/pre&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('acf5e319-01a8-4db4-9c94-ac9fc214bc03')&quot; readability=&quot;35.5&quot;&gt;&lt;img id=&quot;code_img_closed_acf5e319-01a8-4db4-9c94-ac9fc214bc03&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_acf5e319-01a8-4db4-9c94-ac9fc214bc03&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('acf5e319-01a8-4db4-9c94-ac9fc214bc03',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_acf5e319-01a8-4db4-9c94-ac9fc214bc03&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;66&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; socket
ip_port&lt;/span&gt;=(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;自己电脑的IP&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,9000)  &lt;span&gt;#&lt;/span&gt;&lt;span&gt;电话卡&lt;/span&gt;
BUFSIZE=1024                &lt;span&gt;#&lt;/span&gt;&lt;span&gt;收发消息的尺寸&lt;/span&gt;
s=socket.socket(socket.AF_INET,socket.SOCK_STREAM) &lt;span&gt;#&lt;/span&gt;&lt;span&gt;买手机&lt;/span&gt;
s.bind(ip_port) &lt;span&gt;#&lt;/span&gt;&lt;span&gt;手机插卡&lt;/span&gt;
s.listen(5)     &lt;span&gt;#&lt;/span&gt;&lt;span&gt;手机待机&lt;/span&gt;
&lt;span&gt;

conn,addr&lt;/span&gt;=s.accept()            &lt;span&gt;#&lt;/span&gt;&lt;span&gt;手机接电话&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt; print(conn)&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt; print(addr)&lt;/span&gt;
&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;接到来自%s的电话&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; %&lt;span&gt;addr[0])

msg&lt;/span&gt;=conn.recv(BUFSIZE)             &lt;span&gt;#&lt;/span&gt;&lt;span&gt;听消息,听话&lt;/span&gt;
&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(msg,type(msg))

conn.send(msg.upper())          &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;发消息,说话&lt;/span&gt;
&lt;span&gt;
conn.close()                    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;挂电话&lt;/span&gt;
&lt;span&gt;
s.close()                       &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;手机关机&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;服务端&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('d99f9fab-7aa9-475d-be77-d88e72530f13')&quot; readability=&quot;34.5&quot;&gt;&lt;img id=&quot;code_img_closed_d99f9fab-7aa9-475d-be77-d88e72530f13&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_d99f9fab-7aa9-475d-be77-d88e72530f13&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('d99f9fab-7aa9-475d-be77-d88e72530f13',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_d99f9fab-7aa9-475d-be77-d88e72530f13&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;64&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; socket
ip_port&lt;/span&gt;=(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;自己电脑的ip&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,9000&lt;span&gt;)
BUFSIZE&lt;/span&gt;=1024&lt;span&gt;
s&lt;/span&gt;=&lt;span&gt;socket.socket(socket.AF_INET,socket.SOCK_STREAM)

s.connect_ex(ip_port)           &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;拨电话&lt;/span&gt;
&lt;span&gt;
s.send(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;duoduo nb&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;.encode(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;utf-8&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;))         &lt;span&gt;#&lt;/span&gt;&lt;span&gt;发消息,说话(只能发送字节类型)&lt;/span&gt;
&lt;span&gt;
feedback&lt;/span&gt;=s.recv(BUFSIZE)                           &lt;span&gt;#&lt;/span&gt;&lt;span&gt;收消息,听话&lt;/span&gt;
&lt;span&gt;print&lt;/span&gt;(feedback.decode(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;utf-8&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;))

s.close()                                       &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;挂电话&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;客户端&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;加上链接循环与通信循环&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('9b21b26c-cea9-4844-9d2f-9c5b1eb20093')&quot; readability=&quot;38.5&quot;&gt;&lt;img id=&quot;code_img_closed_9b21b26c-cea9-4844-9d2f-9c5b1eb20093&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_9b21b26c-cea9-4844-9d2f-9c5b1eb20093&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('9b21b26c-cea9-4844-9d2f-9c5b1eb20093',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_9b21b26c-cea9-4844-9d2f-9c5b1eb20093&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;72&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; socket
ip_port&lt;/span&gt;=(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;IP地址&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,8081)&lt;span&gt;#&lt;/span&gt;&lt;span&gt;电话卡&lt;/span&gt;
BUFSIZE=1024&lt;span&gt;
s&lt;/span&gt;=socket.socket(socket.AF_INET,socket.SOCK_STREAM) &lt;span&gt;#&lt;/span&gt;&lt;span&gt;买手机&lt;/span&gt;
s.bind(ip_port) &lt;span&gt;#&lt;/span&gt;&lt;span&gt;手机插卡&lt;/span&gt;
s.listen(5)     &lt;span&gt;#&lt;/span&gt;&lt;span&gt;手机待机&lt;/span&gt;


&lt;span&gt;while&lt;/span&gt; True:                         &lt;span&gt;#&lt;/span&gt;&lt;span&gt;新增接收链接循环,可以不停的接电话&lt;/span&gt;
    conn,addr=s.accept()            &lt;span&gt;#&lt;/span&gt;&lt;span&gt;手机接电话&lt;/span&gt;
    &lt;span&gt;#&lt;/span&gt;&lt;span&gt; print(conn)&lt;/span&gt;
    &lt;span&gt;#&lt;/span&gt;&lt;span&gt; print(addr)&lt;/span&gt;
    &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;接到来自%s的电话&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; %&lt;span&gt;addr[0])
    &lt;/span&gt;&lt;span&gt;while&lt;/span&gt; True:                         &lt;span&gt;#&lt;/span&gt;&lt;span&gt;新增通信循环,可以不断的通信,收发消息&lt;/span&gt;
        msg=conn.recv(BUFSIZE)             &lt;span&gt;#&lt;/span&gt;&lt;span&gt;听消息,听话&lt;/span&gt;

        &lt;span&gt;#&lt;/span&gt;&lt;span&gt; if len(msg) == 0:break        #如果不加,那么正在链接的客户端突然断开,recv便不再阻塞,死循环发生&lt;/span&gt;

        &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(msg,type(msg))

        conn.send(msg.upper())          &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;发消息,说话&lt;/span&gt;
&lt;span&gt;
    conn.close()                    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;挂电话&lt;/span&gt;
&lt;span&gt;
s.close()                       &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;手机关机&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;优化服务端&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('131da35c-9b55-4755-a49e-ce19d351ffa8')&quot; readability=&quot;35&quot;&gt;&lt;img id=&quot;code_img_closed_131da35c-9b55-4755-a49e-ce19d351ffa8&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_131da35c-9b55-4755-a49e-ce19d351ffa8&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('131da35c-9b55-4755-a49e-ce19d351ffa8',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_131da35c-9b55-4755-a49e-ce19d351ffa8&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;65&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; socket
ip_port&lt;/span&gt;=(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;127.0.0.1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,8081&lt;span&gt;)
BUFSIZE&lt;/span&gt;=1024&lt;span&gt;
s&lt;/span&gt;=&lt;span&gt;socket.socket(socket.AF_INET,socket.SOCK_STREAM)

s.connect_ex(ip_port)           &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;拨电话&lt;/span&gt;

&lt;span&gt;while&lt;/span&gt; True:                             &lt;span&gt;#&lt;/span&gt;&lt;span&gt;新增通信循环,客户端可以不断发收消息&lt;/span&gt;
    msg=input(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;gt;: &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;).strip()
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; len(msg) == 0:&lt;span&gt;continue&lt;/span&gt;&lt;span&gt;
    s.send(msg.encode(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;utf-8&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;))         &lt;span&gt;#&lt;/span&gt;&lt;span&gt;发消息,说话(只能发送字节类型)&lt;/span&gt;
&lt;span&gt;
    feedback&lt;/span&gt;=s.recv(BUFSIZE)                           &lt;span&gt;#&lt;/span&gt;&lt;span&gt;收消息,听话&lt;/span&gt;
    &lt;span&gt;print&lt;/span&gt;(feedback.decode(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;utf-8&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;))

s.close()                                       &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;挂电话&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;优化客户端&lt;/span&gt;&lt;/div&gt;

</description>
<pubDate>Thu, 19 Apr 2018 07:40:00 +0000</pubDate>
<dc:creator>天王盖地虎宝塔镇河妖</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/ManyQian/p/8883425.html</dc:identifier>
</item>
<item>
<title>第一次面试且失败的经历 - bgzyy</title>
<link>http://www.cnblogs.com/bgzyy/p/8883411.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/bgzyy/p/8883411.html</guid>
<description>&lt;p&gt;大三第二学期了，想着暑假找一个实习工作，然后呢在网上看到差不多的就投出去等待 Boss 们的回应，刚开始没太在意所以第二天进 App 也没想太多，可是进去竟然有未读消息！！！很是欣喜，然后点了之后竟然还是阿里的，更是激动，看到消息说是要简历，哈哈我没简历 SO 当场找了个模版改了一下发过去了，然后开始了漫长的等待……&lt;br/&gt;　　&lt;br/&gt;　　&lt;/p&gt;
&lt;p&gt;　　等我第二天进去的时候收到一个内推链接，说实话当时很激动，自己以前对于内推的概念就是有很牛逼，一般人不会有机会被内推吧，然后觉得自己算是得到了阿里技术人员对于实习生要求的简单认可，对自己算是一种鼓励吧，让自己知道了自己的方向应该没有走的太偏，所以在此谢谢回应我的阿里技术人员！&lt;/p&gt;
&lt;p&gt;　　第一次吧算是，点进去内推连接看到阿里标志的页面很是开心，不管最后啥结果！开心之后便开始网申测试，我以为会是什么算法、概念之类的题，出乎意料的不是那些，而是类似于评判逻辑力之类的题是真的不好答，还限时！整个过程看那些题处于一个懵的状态，每个题就那几十秒的时间有时候题目还没理解透彻就得选答案了（苦笑）！!&lt;img src=&quot;https://i.imgur.com/CidXPhI.jpg&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　接下来的题目就相对轻松一点，类似于问卷吧，可能是当时紧张的状态还没放松下来接下来的编程测试没做当时，还是第二天进官网看审批进度的时候发现自己编程测试还没做，哈哈，傻逼了！早上第一节逃课来图书馆抱着电脑做编程测试，点进去啊，不出所料，算法编程！懵逼脸。限时半个小时设计一个等额本息算法保留两位小数，半个小时很快的过去了基本没有一点点眉目，没时间了就每个月每个月的列了一大堆式子，最笨的最蠢的办法，还算的有偏差，提交之后只能唉一声，接着深呼吸等审批进度。。。&lt;/p&gt;
&lt;p&gt;　　当天晚上的时候才看到邮件（以前基本不用邮件，所以很少去关注，现在起得有这习惯了），是阿里达摩院的问有时间接受一个电话面试吗，自己百度了一下达摩院是搞人工智能的一个部门，当时想了想自己报的 Java 实习，达摩院咋会发呢，想着先试一下吧，就回复了邮件，然后双方约好时间，直到面试电话打来，期间一直期待中夹杂着紧张！&lt;/p&gt;
&lt;p&gt;　　到了约定时间的那一刻，当秒表从59到了整点那一刻手机立马就响了，不得不佩服是真的准时！然后呢就开始所谓的电话面试，自己的第一次也就这样断送了，哈哈。首先就是让你自己简单说一下自己的情况，接着就是对照着你的简历中所说的项目会问到一些技术的细节，比如 Ajax 是由哪些技术构成？再次懵逼，我就思考了一会说我不太了解，但是对于他的应用还是很熟练。接着问了我一下对于分布式的理解，再次尴尬，不了解，没学到！唉！！接下来问了我一个算法题目说是如何在一百万个数中找到前 100 个，算法啊，头疼啊，想了想说我会用排序。接着问你会用什么排序法？我就说我对冒泡排序最熟练。对方接着说冒泡排序的时间复杂度太高，我就迎合着说了句“嗯，对”！对方就问那你知道是多少吗？我说不知道！现在想想我就基本一直在说不知道！最后他说基本差不多了你还有什么要问的，我就问了句我要是通过面试将会干什么？然后对方就简单的介绍了一下达摩院，我就说那我应该就是没啥问的了！那么第一次面试就这样结束了，对于这个过程我的表现我也就没抱有多大的希望！不出所料第二天进度上就划上了“已回绝”仨字！&lt;img src=&quot;https://i.imgur.com/eh9n485.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　电话面试之前没有做任何相关的准备，其实也不知道做啥准备，那么结果也就这样了！说是有啥经验吧只有懵逼俩字体会到最深！这也告诉自己还需更多的努力和经历去迎接下一次面试。那么就继续自己的自学路吧！加油！&lt;/p&gt;
</description>
<pubDate>Thu, 19 Apr 2018 07:39:00 +0000</pubDate>
<dc:creator>bgzyy</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/bgzyy/p/8883411.html</dc:identifier>
</item>
<item>
<title>一个web程序员的年终总结 - 铁柱成针</title>
<link>http://www.cnblogs.com/zgh-blog/p/2017_end_summary.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/zgh-blog/p/2017_end_summary.html</guid>
<description>&lt;p&gt;　　2017年年终总结(就是一个程序员的瞎叨叨)：&lt;br/&gt;　　从来到中科院到现在，很开心可以在这留下来。毕竟对于我来说，这里符合我对自己毕业后前两年的规划。我是一个很慢的人，特别是对于我想做好的事情，我会非常认真仔细的思考，不愿意放过任何一个漏洞。而对于我的专业来说，对于前端，我当时也是知之甚少。我愿意花费更多的时间去补充自己的知识，我非常乐意学习新的知识，新的内容，以及了解所有我不知道的，意料之外的现象。了解他们形成的原理，去避开，或使用他们。但是我不愿意自己在没有很牢固的基础时，去大量的学习内容，我觉得这是一个表面现象，或者说这不是我想要的，想成为的人。我希望自己对所学的一切都知其然知其所以然，不仅会用，更能理解，解决，创造。这大概是我当时的想法吧。&lt;br/&gt;　　对于前端，可能很多人都觉得简单，甚至上手非常的快，或者觉得html和css基本不需要学习，js也只用jquery就可以了。最近也在面试一些同学，可能他们也抱着这样的心态，我觉得这是不正确的，我并不觉得一切都很简单，对于html的关注，和css的关注，应丝毫不亚于对js的关注，我不得不承认我当时对js的关注也多于其他两项，我正在调整，去花更多的时间关注他们。这些都是在工作和学习中，时常会感到对这些的理解不够深刻，只是用，很少去想为什么用。在这一年中，我觉得自己的基础在逐渐的牢固。在工作和学习的过程中，也遇到了许多问题，产生了许多想法。使用了更多的库，包括学习深度比较深的像cesium,three,arcgis等，使用了sass,less，gulp,grunt,等内容。写了几篇博客（比较遗憾，没有多抽出时间来写），但是总结了几百个页面甚至更多的知识。使用java，并且优化了自己的代码，别人的代码，进行了重构，自己的前端后台代码也在不断的成长。照着书敲了800多页的内容。等等还有非常多的内容。在这里，所有的问题，都需要自己解决，所有的想法都要自己判断，自己处理。像代码的优化方式，重构都是看书和别人的总结，自己在过程中逐渐认知的内容。总体来说，就是自己一点点的累积和总结，达成了今天的自己。&lt;br/&gt;　　接下来总结我现在能想到的一些问题：（这点也是没有进行良好的总结导致，以后还是要多多总结，全面总结）:&lt;/p&gt;
&lt;p&gt;　　第一个是跨域的问题：做项目时，服务端用的python，我在自己的编辑器写web。请求调试时跨域。当时解决方法，使用CROS进行跨域。因为服务器也是可以控制的。所以很顺利。后续给组里写的项目，都是自己需要写后台的，所以基本没有这个问题。直到有一次，需要去调用一个视频流，当时我们有三种格式的，由于某些原因，获取放到了前端。那次真的是尝试了10多种跨域方式，最终通过webscoket解决。也帮助我总结了基本上所有的跨域方式，以及我了解到的他们的特点。&lt;/p&gt;
&lt;p&gt;　　第二个是转html转pdf，word文档。这个当时在百度和chrome上，都没有现成的，或者说晚上的解决方式，主要是对于内容，格式，图片，表格等导出控制，没有一体化的库或者说一个比较规范的方式。所以我是去发现现有的可能的方式，然后去总结比较，包括结合来达到我想要的结果。这个问题也教会了我当我遇到的问题，可能网上没有答案，或者没有合适的方案时，我自己要怎么思考，怎么分块处理，怎么整合在一起。最终完美解决。只放了word的代码，因为pdf还是有一个比较合适的库，又加上后来没有去放代码。这个在博客和github上都有。&lt;br/&gt;　　第三个是重拾java，写前端的同时，写后台的代码。这个主要是心理上的问题，当时我感觉自己是想要吧前端做的更加好，觉得自己有许多要学习的前端的内容，不想花费时间在后台上。但是后来还是接受了，而且在这个过程中学到了许多。比如调整自己的心态，虽然之前在学校也学过，但后来基本丢的差不多了，但是会非常容易理解一种语言，也总结了学习语言的方法。我愿意花时间去看一本springboot的书。所以一切就会变得简单，后来甚至会重构之前的同事们写的后台代码，能发现哪些方法是好的，哪些是不合适的，比如前端列表的获取不应该由后台controller定义。我觉得这是我一开始没有想到的。也感觉代码到一定程度，其实设计应该是相同的。&lt;br/&gt;　　第四个是通过不断的写系统，从刚开始的缓慢到后来的速度，自己对系统的设计和组织能力，在不断的提升。知道如何入手，知道要考虑哪些方面的内容，要思考什么样的方式去实现。另外，也懂得与人协作可能会存在的问题。这个只能说是实践出真知。去年大概完成了五个系统。也学习了，修改了别人的系统。&lt;br/&gt;　　第五个是数据流展示，这个其实不算什么问题。本来是准备使用原生的websocket，但是之前的同事们采用了一个框架socketjs，所以本着遵循他们的逻辑，后台要求仍然用这种方式，所以就用了。但后来，又增加了两个数据流后，发现后台给的接口，并不能确定数据流的类型，因为是通过rid进行区别的，但是websocket的路径中并没有带rid，所以会发生串流的现象。后来采用了原生的方式进行重写。这个主要是前后端约定方式的问题。教会了我思考扩展问题，思考现存的方式是否合适，以及是否有更好的方式可以代替。　&lt;/p&gt;
&lt;p&gt;　　第六个也不算是什么问题，当我们决定使用3d地图的时候，自己研究了学习了cesium地球，还有threejs，并且可以实现我们的需求，后来因为我们之前用的平面地图是arcgis，我们也买了arcgis的服务，也参加了arcgis的全球大会，所以改为使用arcgis3d地球。在这个过程中，一直是一个学习的过程，遇到的问题其实都是自己对该库了解不够多，另外还有学习方法的问题。对于问题，其实只要你花时间去解决，基本就能解决。对于库的使用，我觉得只要是库能做到的，我们开发人员就基本应该做到，这没什么特别困难的事。对于学习一个新的，具有深度的库也有了自己的理解。我们应该有正确的方法，比如从类到方法，到属性的去学习。一步步的根据我们的要求学习这个库。如果我们主攻这个库，我建议采取的不是为了要求，而是我们对于每一块自己能理解到的程度去学习。这样会更加有深度，也许可以提出或者创造一些没有的东西。但这个一般对于库的开发人员来说，就像我们对于js一样，能多深，就多深。&lt;br/&gt;　　第七个是在写动画的过程中，使用的方式就不说了。主要是在js精准控制动画过程中，产生的问题。由于界面需要的交互动画较多，会导致一些延迟动画在快速操作的过程中，没有进行及时的添加移除，包括延时后产生的各种效应等。教会了我许多对于动画的设计，和控制动画的起始，包括了解了js的高精度计时，以及js的延时操作不可靠。也在处理threejs过程中接触到了大量动画渲染卡顿的问题。也了解了dom树的渲染和利用gpu去解决js的计算问题。包括界面上的盒子。以及脱离文档流后的部分重绘将会节约时间。等等，并不深刻，有待深入了解总结。&lt;/p&gt;
&lt;p&gt;其实还有许多问题，没有进行好的总结，所以或许一时想不起来，像vertical-align和line-height之间的关系，像transform的matrix。等等，当我遇到的时候可能就会想起来了，这里就不把几百页的内容列举出来献丑了。&lt;br/&gt;总结一下学到的知识吧：&lt;br/&gt;1.跨域&lt;br/&gt;2.webStorage&lt;br/&gt;3.各种各样的插件使用。&lt;br/&gt;3.html content 转world，pdf。&lt;br/&gt;4.java springboot&lt;br/&gt;5.sass, less&lt;br/&gt;6.gulp, grunt&lt;br/&gt;7. websocket&lt;br/&gt;8.flex布局&lt;br/&gt;9.canvas&lt;br/&gt;10.svg&lt;br/&gt;11.播放各种格式的视频流&lt;br/&gt;12.cesium,arcgis&lt;br/&gt;13.three.js&lt;br/&gt;14.动画&lt;br/&gt;15.看并敲了七八百页的基础书。&lt;br/&gt;16.写了几篇博客&lt;br/&gt;17.看了半本设计模式&lt;br/&gt;18.看了半本算法。&lt;br/&gt;19.学习了es6&lt;br/&gt;....&lt;br/&gt;等等许多css和html，js细节的内容就不说了，实在是临时想，很尴尬。。&lt;/p&gt;
&lt;p&gt;总结展望：&lt;br/&gt;1.总结：学习了大量的内容，巩固了自己的基础知识。也使用了很多的插件和框架，对于基础，对于html，css，js都有了自己的理解。对于插件和库有了自己的学习和使用方法。也依靠自己解决了许多问题，对于问题，能形成良好的思路。缺乏总结整理。对于知识的掌握缺少深入思考和联系，对于前端的架构了解较少，对于算法数据结构，设计模式使用较少。看书较少。总体还算可以吧（我夸自己一下）。&lt;br/&gt;2.展望:今年要对基础进行更加深刻的理解，争取能够成为真正意义上的精通。其次，多多思考学习方法，学习管理自己。多读一些书，还是有整体上的许多内容需要进一步学习。多多使用算法数据结构和设计模式的思想。学习vue和react，webpack。了解angular.js。多多学习源码。任重道远，砥砺前行。&lt;/p&gt;
</description>
<pubDate>Thu, 19 Apr 2018 07:30:00 +0000</pubDate>
<dc:creator>铁柱成针</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/zgh-blog/p/2017_end_summary.html</dc:identifier>
</item>
<item>
<title>Headless Chrome：服务端渲染JS站点的一个方案【上篇】【翻译】 - JerremyZhang</title>
<link>http://www.cnblogs.com/Johnzhang/p/8883157.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/Johnzhang/p/8883157.html</guid>
<description>&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;原文链接：https://developers.google.com/web/tools/puppeteer/articles/ssr&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;注：由于英文水平有限，没有逐字翻译，可以选择直接阅读原文&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;tips:Headless浏览器完全可以作为服务端渲染的一个替代方案，在服务端转化js 站点为静态html页面；在webserver 上运行Headless 浏览器完全可以预渲染现代js 模式的应用，增加响应速度，对SEO也更加友好&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;本篇涉及到的技术展示了如何通过Google Headless 框架（puppteer）向一个Express web server 添加服务端渲染能力，对应用对友好的是，基本上不需要修改任何代码；所有的工作基本都有puppteer承担，通过简单的几行代码你就可以在服务端渲染几乎所有页面。&lt;/p&gt;
&lt;p&gt;下面是将要涉及到的一小段代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; import puppeteer from 'puppeteer'&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; async &lt;span&gt;function&lt;/span&gt;&lt;span&gt; ssr(url) {
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;   const browser = await puppeteer.launch({headless: &lt;span&gt;true&lt;/span&gt;&lt;span&gt;});
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;   const page =&lt;span&gt; await browser.newPage();
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;   await page.goto(url, {waitUntil: 'networkidle0'&lt;span&gt;});
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;   const html = await page.content(); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 页面的html内容&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;  await browser.close();
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;   &lt;span&gt;return&lt;/span&gt;&lt;span&gt; html;
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;注意：本篇文章代码基于es modules，需要node 8.5+ 并开启--experimental-modules&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;介绍&lt;/h2&gt;
&lt;p&gt;      如果你需要seo，你登录进来阅读这篇文章无外乎两种原因：第一，你已创建了一个web 应用，但是它没有被搜索引擎索引到，你的应用可能是一个SPA、PWA应用。或者其实技术栈创建的应用，实际上你使用的技术栈也无关重要；重要的是，你花费了大量的时间创建了很棒应用，但是用户却无法发现它。第二，你可能是从其它网站注意到服务端渲染能提高一定的性能。你在这可以可以收获如何减少javascript 启动成本以及如何提高首屏渲染。&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;tips:一些框架如（Preact）已经支持服务端渲染了，如果你使用的框架有服务端渲染的解决方案，那么坚持使用就好了，没有必要引入一个新的工具。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;modern&quot;&gt;爬取现代web应用&lt;/h3&gt;
&lt;p&gt;    搜索引擎主要是爬取静态html标签来工作，但是现代的web 应用已经进化的比较复杂了。基于Javascript的应用，内容对网络爬虫来说是透明的，因为其内容多是在客户端通过js渲染的。一些爬虫比如google的爬虫也开始变得聪明了，google的爬虫使用Chrome41 执行Javascript 来得到最终页面，但是这种方案还是不太成熟、完美。比如，比如一些ES6的新特性在旧的浏览器中还是会引起Js error的。对于其他的搜索引擎，鬼知道他们怎么做的？O(∩_∩)O哈！&lt;/p&gt;
&lt;h2 id=&quot;headless&quot;&gt;Headless Chrome 预渲染页面&lt;/h2&gt;
&lt;p&gt;    所有爬虫都理解HTML，所以我们需要解决的是如何执行JS，来生成HTML。如果我告诉你有这样一个工具，你觉得如何？&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;   这个工具知道如何运行所有类型的Javascript，然后产出静态的html&lt;/li&gt;
&lt;li&gt;   这个工具随着web添加新特性会持续更新&lt;/li&gt;
&lt;li&gt;   修改少量设置不需要修改任何代码，你可以快速把这个工具应用到已有应用之上&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;听起来很不错吧？这个工具就是浏览器！&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;&lt;span&gt;Headless Chrome 不关心使用什么库、框架、或者工具链；它早饭吃进去Javascript，午饭就会吐出来静态的HTML。当然我们希望会比这个过程快很多--Eric&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果你使用Node，Puppteer是一种比较简单的方式来操作headless Chrome.它提供的API 是一个客户端应用支持服务端渲染功能。下面是一个简单的例子。&lt;/p&gt;
&lt;h3 id=&quot;1_example_js_app&quot;&gt;1.JS应用&lt;/h3&gt;
&lt;p&gt;我们以一个通过js动态生成HTML的动态页面的例子开始:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;public/index.html&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt;   &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;container&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt;     &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; Populated by the JS below. &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt;   &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;function&lt;/span&gt;&lt;span&gt; renderPosts(posts, container) {
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;  const html &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; posts.reduce((html, post) &lt;/span&gt;&lt;span&gt;=&amp;gt;&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; `${html}
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;li class&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;post&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;h2&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;${post.title}&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;h2&amp;gt;&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div class&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;summary&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;${post.summary}&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;div&amp;gt;&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;${post.content}&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;p&amp;gt;&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;li&amp;gt;`;&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt; &lt;span&gt;  }, &lt;/span&gt;&lt;span&gt;''&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; 
&lt;span&gt;18&lt;/span&gt;   &lt;span&gt;//&lt;/span&gt;&lt;span&gt; CAREFUL: assumes html is sanitized.&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt; &lt;span&gt;  container.innerHTML &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; `&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;ul id&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;posts&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;${html}&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;ul&amp;gt;`;&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; 
&lt;span&gt;22&lt;/span&gt; &lt;span&gt;(async() &lt;/span&gt;&lt;span&gt;=&amp;gt;&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;  const container &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; document.querySelector(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;#container&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; &lt;span&gt;  const posts &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; await fetch(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/posts&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;).then(resp &lt;/span&gt;&lt;span&gt;=&amp;gt;&lt;/span&gt;&lt;span&gt; resp.json());
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; &lt;span&gt;  renderPosts(posts, container);
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; &lt;span&gt;})();
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;28&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;2.SSR （Server Side Render）方法&lt;/h3&gt;
&lt;p&gt;接下来，简单实现一下ssr方法&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;ssr.mjs&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
import puppeteer from 'puppeteer'&lt;span&gt;;

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;内存缓存，key：url value：html内容&lt;/span&gt;
const RENDER_CACHE = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Map();

async &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; ssr(url) {
  &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (RENDER_CACHE.has(url)) {
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; {html: RENDER_CACHE.get(url), ttRenderMs: 0&lt;span&gt;};
  }

  const start &lt;/span&gt;=&lt;span&gt; Date.now();

  const browser &lt;/span&gt;=&lt;span&gt; await puppeteer.launch();
  const page &lt;/span&gt;=&lt;span&gt; await browser.newPage();
  &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; networkidle0 waits 500ms 没有其他请求时.&lt;/span&gt;
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; The page's JS has likely produced markup by this point, but wait longer&lt;/span&gt;
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; if your site lazy loads, etc.&lt;/span&gt;
    await page.goto(url, {waitUntil: 'networkidle0'&lt;span&gt;});
    await page.waitForSelector(&lt;/span&gt;'#posts'); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;等待并确认 #posts 已经存在于dom中，如果已经存在，则立即执行.&lt;/span&gt;
  } &lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (err) {
    console.error(err);
    &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; Error('page.goto/waitForSelector timed out.'&lt;span&gt;);
  }

  const html &lt;/span&gt;= await page.content(); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 被序列化后的HTML内容&lt;/span&gt;
&lt;span&gt;  await browser.close();

  const ttRenderMs &lt;/span&gt;= Date.now() -&lt;span&gt; start;
  console.info(`Headless rendered page &lt;/span&gt;&lt;span&gt;in&lt;/span&gt;&lt;span&gt;: ${ttRenderMs}ms`);

  RENDER_CACHE.set(url, html); &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; cache rendered page.&lt;/span&gt;

  &lt;span&gt;return&lt;/span&gt;&lt;span&gt; {html, ttRenderMs};
}

export {ssr as &lt;/span&gt;&lt;span&gt;default&lt;/span&gt;};
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;主要代码逻辑：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;添加缓存。缓存渲染后的HTML是提高响应的最有效方法，当你再次请求的时候，避免再次运行headless chrome。后续会讨论其他方面的优化。&lt;/li&gt;
&lt;li&gt;对页面加载超时添加异常处理&lt;/li&gt;
&lt;li&gt;调用&lt;code&gt;page.waitForSelector('#posts')方法，确保id为posts的元素在后续操作之前已经存在于DOM中（有多中waitForxxx方法）&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;添加计量统计，计算Headless渲染页面时间&lt;/li&gt;
&lt;/ol&gt;&lt;h3&gt;3.WebServer 端代码&lt;/h3&gt;
&lt;p&gt;最后，通过一个Express server 把所有内容联系到一起。哎直接看代码吧，代码中加了注释。&lt;/p&gt;
&lt;p&gt;server.mjs&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
import express from 'express'&lt;span&gt;;
import ssr from &lt;/span&gt;'./ssr.mjs'&lt;span&gt;;

const app &lt;/span&gt;=&lt;span&gt; express();

app.get(&lt;/span&gt;'/', async (req, res, next) =&amp;gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;调用上面写好的ssr方法，传入url，通过headless chrome 渲染完毕后把渲染结果返回&lt;/span&gt;
  const {html, ttRenderMs} = await ssr(`${req.protocol}:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;${req.get('host')}/index.html`);&lt;/span&gt;
  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Add Server-Timing! See https://w3c.github.io/server-timing/.&lt;/span&gt;
  res.set('Server-Timing', `Prerender;dur=${ttRenderMs};desc=&quot;Headless render time (ms)&quot;&lt;span&gt;`);
  &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; res.status(200).send(html); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Serve prerendered page as response.&lt;/span&gt;
&lt;span&gt;});

app.listen(&lt;/span&gt;8080, () =&amp;gt; console.log('Server started. Press Ctrl+C to quit'));
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;那么，得到的响应HTML应该是这样的：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&amp;lt;html&amp;gt;
&amp;lt;body&amp;gt;
  &amp;lt;div id=&quot;container&quot;&amp;gt;
    &amp;lt;ul id=&quot;posts&quot;&amp;gt;
      &amp;lt;li class=&quot;post&quot;&amp;gt;
        &amp;lt;h2&amp;gt;Title 1&amp;lt;/h2&amp;gt;
        &amp;lt;div class=&quot;summary&quot;&amp;gt;Summary 1&amp;lt;/div&amp;gt;
        &amp;lt;p&amp;gt;post content 1&amp;lt;/p&amp;gt;
      &amp;lt;/li&amp;gt;
      &amp;lt;li class=&quot;post&quot;&amp;gt;
        &amp;lt;h2&amp;gt;Title 2&amp;lt;/h2&amp;gt;
        &amp;lt;div class=&quot;summary&quot;&amp;gt;Summary 2&amp;lt;/div&amp;gt;
        &amp;lt;p&amp;gt;post content 2&amp;lt;/p&amp;gt;
      &amp;lt;/li&amp;gt;
&lt;span&gt;      ...
    &lt;/span&gt;&amp;lt;/ul&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;script&amp;gt;&lt;span&gt;
...
&lt;/span&gt;&amp;lt;/script&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;上篇结束，后续中篇 和 下篇 请继续关注&lt;/p&gt;
</description>
<pubDate>Thu, 19 Apr 2018 07:19:00 +0000</pubDate>
<dc:creator>JerremyZhang</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/Johnzhang/p/8883157.html</dc:identifier>
</item>
<item>
<title>MySQL 并行复制从库发生自动重启分析 - Jia-Xin</title>
<link>http://www.cnblogs.com/YangJiaXin/p/8882508.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/YangJiaXin/p/8882508.html</guid>
<description>&lt;h3 id=&quot;并行复制从库发生自动重启分析&quot;&gt;&lt;strong&gt;并行复制从库发生自动重启分析&lt;/strong&gt;&lt;/h3&gt;
&lt;h4 id=&quot;背景&quot;&gt;背景&lt;/h4&gt;
&lt;p&gt;半同步复制从库在晚上凌晨2点半发生自动重启，另一个异步复制从库在第二天凌晨3点也发生了自动重启。&lt;/p&gt;
&lt;h4 id=&quot;分析&quot;&gt;分析&lt;/h4&gt;
&lt;p&gt;版本mysql 5.7.16&lt;br/&gt;mysql&amp;gt; show variables like '%slave_para%';&lt;br/&gt;+------------------------+---------------+&lt;br/&gt;| Variable_name | Value |&lt;br/&gt;+------------------------+---------------+&lt;br/&gt;| slave_parallel_type | LOGICAL_CLOCK |&lt;br/&gt;| slave_parallel_workers | 16 |&lt;br/&gt;+------------------------+---------------+&lt;/p&gt;
&lt;ol readability=&quot;0&quot;&gt;&lt;li&gt;mysqld服务在以mysqld_safe守护进程启动的情况下，在发生mysqld异常情况（比如OOM）会自动拉起mysqld服务，但已确认两个从库实例messages中无与OOM相关的日志。&lt;/li&gt;
&lt;li&gt;从监控中发现，两个从库与Seconds_Behind_Master没有很高的异常上升。&lt;/li&gt;
&lt;li readability=&quot;0.90847457627119&quot;&gt;
&lt;p&gt;参数slave_pending_jobs_size_max 在多线程复制时，在队列中Pending的事件所占用的最大内存，默认为16M，如果内存富余，或者延迟较大时，可以适当调大;注意这个值要比主库的max_allowed_packet大。&lt;br/&gt;参考官方文档：&lt;a href=&quot;https://dev.mysql.com/doc/refman/5.7/en/replication-options-slave.html&quot;&gt;slave_pending_jobs_size_max&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;两个发生自动重启的从库日志中都出现了ibuf record inserted to page x:x ，通过查看space_id发现都是对应的同一张表(anytxn.join_acct_flow)，疑是晚上的定时任务对这张表做了大事务的操作。从库的并行复制只有对并发提交的事务才会进行并行应用，对一个大事务，只有一个线程进行应用。&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;分析在从库发生自动重启的时间段里发现，产生了大事务&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;blockquote readability=&quot;9&quot;&gt;
&lt;p&gt;mysqlbinlog -v -v --base64-output=decode-rows&lt;br/&gt;--start-datetime='2018-04-03 02:47:22' --stop-datetime='2018-04-03 02:48:26' /data/mysql/mysql-bin.003446 | awk&lt;br/&gt;'/###/{if($0~/UPDATE|INSERT|DELETE/)count[$2&quot;&quot;$NF]++}END{for(i in&lt;br/&gt;count)print i,&quot;\t&quot;,count[i]}' | column -t | sort -k3nr | more&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;DELETE&lt;code&gt;xxxx&lt;/code&gt;.&lt;code&gt;xxxxw&lt;/code&gt; 565330&lt;br/&gt;DELETE&lt;code&gt;xxxx&lt;/code&gt;.&lt;code&gt;xxxx&lt;/code&gt; 23595&lt;br/&gt;DELETE&lt;code&gt;xxxx&lt;/code&gt;.&lt;code&gt;xxxxail&lt;/code&gt; 24156&lt;br/&gt;DELETE&lt;code&gt;xxxx&lt;/code&gt;.&lt;code&gt;xxxx&lt;/code&gt; 18475&lt;br/&gt;INSERT&lt;code&gt;xxxx&lt;/code&gt;.&lt;code&gt;xxxxw_his&lt;/code&gt; 576265&lt;br/&gt;INSERT&lt;code&gt;xxxx&lt;/code&gt;.&lt;code&gt;xxxx_his&lt;/code&gt; 23829&lt;br/&gt;INSERT&lt;code&gt;xxxx&lt;/code&gt;.&lt;code&gt;xxxxail_his&lt;/code&gt; 24539&lt;br/&gt;INSERT&lt;code&gt;xxxx&lt;/code&gt;.&lt;code&gt;xxxxhis&lt;/code&gt; 18709&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;6.向看源码的朋友请教了下，得到了MySQL自动重启的Stack Trace&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;nm -D -n /usr/local/mysql/bin/mysqld&amp;gt;/tmp/mysqld.sym

resolve_stack_dump -s /tmp/mysqld.sym -n /tmp/err.log |c++filt | less

0xf1dff5 my_print_stacktrace + 53
0x79d3b4 handle_fatal_signal + 1188
0x358c00f7e0 _end + -1978652160
0x358bc325e5 _end + -1982703611
0x358bc33dc5 _end + -1982697499
0x1159d65 ut_dbg_assertion_failed(char const*, char const*, unsigned long) + 170
0x115e8b3 ib::fatal::~fatal() + 179
0x102b4d1 ibuf_print(_IO_FILE*) + 881
0x102f531 ibuf_update_free_bits_low(buf_block_t const*, unsigned long, mtr_t*) + 3905
0x1033b29 ibuf_merge_or_delete_for_page(buf_block_t*, page_id_t const&amp;amp;, page_size_t const*, unsigned long) + 2825
0x11a59a1 buf_page_io_complete(buf_page_t*, bool) + 1249
0x1200afb fil_aio_wait(unsigned long) + 347
0x110db48 io_handler_thread + 200
0x358c007aa1 _end + -1978684223
0x358bce8aad _end + -1981956915&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;测试&quot;&gt;测试&lt;/h4&gt;
&lt;p&gt;主库模拟一个大事务，看从库是否有异常出现&lt;br/&gt;环境&lt;br/&gt;centos 7.4&lt;br/&gt;mysql5.7.19&lt;br/&gt;从库并行复制线程 8&lt;br/&gt;从库slave_pending_jobs_size_max 设置比主库 max_allowed_packet大&lt;/p&gt;
&lt;p&gt;主库&lt;/p&gt;
&lt;pre class=&quot;stylus&quot;&gt;
&lt;code&gt;mysql&amp;gt; desc sbtest1;
+-----+-----------+-----+-----+------+----------------+
|  id |   int(11) |  NO | PRI | NULL | auto_increment |
|   k |   int(11) |  NO | MUL |    0 |                |
|   c | char(120) |  NO |     |      |                |
| pad |  char(60) |  NO |     |      |                |
| id3 |   int(11) | YES |     | NULL |                |
| id5 |   int(11) | YES |     | NULL |                |
+-----+-----------+-----+-----+------+----------------+

select count(*) from sbtest1;

mysql&amp;gt; show variables like 'max_allowed_packet%';
+--------------------+----------+
| max_allowed_packet | 16777216 | 16M
+--------------------+----------+&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;从库&lt;/p&gt;
&lt;pre class=&quot;asciidoc&quot;&gt;
&lt;code&gt;mysql&amp;gt; show variables like '%slave_para%';
+------------------------+---------------+
| Variable_name          | Value         |
+------------------------+---------------+
| slave_parallel_type    | LOGICAL_CLOCK |
| slave_parallel_workers | 8             |
+------------------------+---------------+
mysql&amp;gt; show variables like '%slave_pending_jobs%';
+-----------------------------+----------+
| Variable_name               | Value    |
+-----------------------------+----------+
| slave_pending_jobs_size_max | 67108864 | 64M
+-----------------------------+----------+&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;主库执行&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode sql&quot;&gt;
&lt;code class=&quot;sourceCode sql&quot;&gt;&lt;span class=&quot;kw&quot;&gt;UPDATE&lt;/span&gt; sbtest1 &lt;span class=&quot;kw&quot;&gt;SET&lt;/span&gt; c=REPEAT(UUID(),&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;) &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt; id&amp;lt;&lt;span class=&quot;dv&quot;&gt;100000&lt;/span&gt;;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;从库出现大量类似生产环境中的日志，但没有模拟出从库自动重启的情况&lt;/p&gt;
&lt;pre class=&quot;stylus&quot;&gt;
&lt;code&gt;Note] Multi-threaded slave: Coordinator has waited 208341 times hitting slave_pending_jobs_size_max; current event size = 8044
Note] Multi-threaded slave: Coordinator has waited 208351 times hitting slave_pending_jobs_size_max; current event size = 8044
Note] Multi-threaded slave: Coordinator has waited 208361 times hitting slave_pending_jobs_size_max; current event size = 8044
Note] Multi-threaded slave: Coordinator has waited 208371 times hitting slave_pending_jobs_size_max; current event size = 8044
Note] Multi-threaded slave: Coordinator has waited 208381 times hitting slave_pending_jobs_size_max; current event&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;结论&quot;&gt;结论&lt;/h4&gt;
&lt;p&gt;从库开启并行复制，主库执行大事务，从库日志会出现大量中 Coordinator has waited。但没有复现出从库发生自动重启的情况，不知道对join_acct_flow这张表在重启时间段的具体操作是怎样的，相关binlog已经被清理了。&lt;br/&gt;建议：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;尽量减少大事务的执行，拆分为小事务&lt;/li&gt;
&lt;li&gt;从库slave_pending_jobs_size_max 变量设置比主库max_allowed_packet大些&lt;/li&gt;
&lt;li&gt;可设置binlog_rows_query_log_events = 1（可以动态开启），DDL,DML会以语句形式在binlog中记录，方便分析binlog&lt;/li&gt;
&lt;li&gt;crash问题后续可以多保留一些日志，再次复现时好分析些&lt;/li&gt;
&lt;li&gt;已给官方提了bug了，链接地址为 &lt;a href=&quot;http://bugs.mysql.com/90342&quot; class=&quot;uri&quot;&gt;http://bugs.mysql.com/90342&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</description>
<pubDate>Thu, 19 Apr 2018 07:15:00 +0000</pubDate>
<dc:creator>Jia-Xin</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/YangJiaXin/p/8882508.html</dc:identifier>
</item>
<item>
<title>二 Djano模型层之模型字段选项 - 持＆恒</title>
<link>http://www.cnblogs.com/lfxiao/p/8872200.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/lfxiao/p/8872200.html</guid>
<description>&lt;p&gt;&lt;span&gt;字段选项&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;以下参数是全部字段类型都可用的，而且是可选的&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;null&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;如果为True，Django将在数据库中将空值存储为NULL。默认值为False&lt;/p&gt;
&lt;p&gt;对于字符串字段，如果设置了null=True意味着“无数据”有两个可能的值，NULL和空字符串，在大多数情况下，我们在数据库中存储无数据的字符串时，不会区分到底是NULL还是空字符串，如果存储了两个值势必会增加操作数据的难度。django的惯例是使用空字符串，所以我们在创建字符串字段（如：CharField、TextField）尽量不要设置null=True。null属性对于字符串字段也并非没有用处，比如这种情况就必须设置null=True，如当CharField同时具有blank=True和unique=True属性是，在这种情况下，需要设置null=True，以便在数据库中使用NULL保存对个对象，从而达到唯一性（NULL!=NULL）&lt;/p&gt;
&lt;p&gt;如果希望BooleanField接受null值，请使用NULLBolleanField类来代替&lt;/p&gt;
&lt;p&gt;注意：在使用Oracle数据库时，数据库使用NULL来表示空字符串，与null这个属性无关&lt;/p&gt;
&lt;p&gt;&lt;span&gt; blank&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;如果为True，字段允许为空，默认False&lt;/p&gt;
&lt;p&gt;与null不同，null纯粹是数据库范畴，blank是数据验证范畴，如果blank=True，字段可为空，否则为必填字段&lt;/p&gt;
&lt;p&gt;&lt;span&gt;choices&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;它是一个可迭代的结构（如列表、元组），由可迭代的二元元组表示，用来给字段提供选项&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span id=&quot;yiyi-42&quot; class=&quot;yiyi-st&quot;&gt;每个元组中的第一个元素，是存储在数据库中的值；第二个元素是使人容易理解的描述。 &lt;span id=&quot;yiyi-43&quot; class=&quot;yiyi-st&quot;&gt;比如：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
YEAR_IN_SCHOOL_CHOICES =&lt;span&gt; (
    (&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;FR&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Freshman&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;),
    (&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;SO&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Sophomore&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;),
    (&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;JR&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Junior&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;),
    (&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;SR&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Senior&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;),
)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;一般来说，最好给每个值定义一个合适名字的常量，然后再在模型类内部定义choices：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;47&quot;&gt;
&lt;pre&gt;
&lt;span&gt;from&lt;/span&gt;&lt;span&gt; django.db import models

&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Student(models.Model):
    FRESHMAN &lt;/span&gt;= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;FR&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
    SOPHOMORE &lt;/span&gt;= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;SO&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
    JUNIOR &lt;/span&gt;= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;JR&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
    SENIOR &lt;/span&gt;= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;SR&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
    YEAR_IN_SCHOOL_CHOICES &lt;/span&gt;=&lt;span&gt; (
        (FRESHMAN, &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Freshman&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;),
        (SOPHOMORE, &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Sophomore&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;),
        (JUNIOR, &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Junior&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;),
        (SENIOR, &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Senior&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;),
    )
    year_in_school &lt;/span&gt;=&lt;span&gt; models.CharField(
        max_length&lt;/span&gt;=&lt;span&gt;2&lt;/span&gt;&lt;span&gt;,
        choices&lt;/span&gt;=&lt;span&gt;YEAR_IN_SCHOOL_CHOICES,
        &lt;/span&gt;&lt;span&gt;default&lt;/span&gt;=&lt;span&gt;FRESHMAN,
    )

    def is_upperclass(self):
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; self.year_in_school &lt;span&gt;in&lt;/span&gt; (self.JUNIOR, self.SENIOR)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这样做的好处是使得choices更容易被引用，例如， &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;Student.SOPHOMORE&lt;/span&gt;&lt;/code&gt; 可以在任何引入&lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;Student&lt;/span&gt;&lt;/code&gt; 模型的位置生效&lt;/p&gt;
&lt;p&gt;你也可以归类choices：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;47&quot;&gt;
&lt;pre&gt;
MEDIA_CHOICES =&lt;span&gt; (
    (&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Audio&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, (
            (&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;vinyl&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Vinyl&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;),
            (&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;cd&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;CD&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;),
        )
    ),
    (&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Video&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, (
            (&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;vhs&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;VHS Tape&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;),
            (&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;dvd&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;DVD&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;),
        )
    ),
    (&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;unknown&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Unknown&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;),
)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span id=&quot;yiyi-98&quot; class=&quot;yiyi-st&quot;&gt;对于有&lt;code class=&quot;xref py py-attr docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;choices&lt;/span&gt;&lt;/code&gt;属性的模型字段, Django 使用&lt;code class=&quot;xref py py-meth docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;get_FOO_display()&lt;/span&gt;&lt;/code&gt;方法来获取当前字段值的易于理解的名称&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;yiyi-st&quot;&gt;注意：choices可以是任何可迭代的对象 ， 不是必须是列表或者元组。 &lt;span id=&quot;yiyi-101&quot; class=&quot;yiyi-st&quot;&gt;这一点使你可以动态的构建choices。 &lt;span id=&quot;yiyi-102&quot; class=&quot;yiyi-st&quot;&gt;但是如果你发现你自己搞不定动态的&lt;code class=&quot;xref py py-attr docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;choices&lt;/span&gt;&lt;/code&gt;，你最好还是使用&lt;code class=&quot;xref py py-class docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;ForeignKey&lt;/span&gt;&lt;/code&gt;来构建一个合适的数据库表。&lt;span id=&quot;yiyi-103&quot; class=&quot;yiyi-st&quot;&gt;&lt;code class=&quot;xref py py-attr docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;choices&lt;/span&gt;&lt;/code&gt;更适合那些变动不多的静态数据。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;yiyi-st&quot;&gt;&lt;span class=&quot;yiyi-st&quot;&gt;&lt;span class=&quot;yiyi-st&quot;&gt;&lt;span class=&quot;yiyi-st&quot;&gt;&lt;span id=&quot;yiyi-104&quot; class=&quot;yiyi-st&quot;&gt;除非&lt;code class=&quot;xref py py-attr docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;blank=False&lt;/span&gt;&lt;/code&gt;和&lt;code class=&quot;xref py py-attr docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;default&lt;/span&gt;&lt;/code&gt;一起在字段中被设置，否则，可选择菜单将会有&lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;&quot;---------&quot;&lt;/span&gt;&lt;/code&gt; 的标签。 &lt;span id=&quot;yiyi-105&quot; class=&quot;yiyi-st&quot;&gt;要重写这个行为, 需要加入一个包含&lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;None&lt;/span&gt;&lt;/code&gt;的元组到 &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;choices&lt;/span&gt;&lt;/code&gt;里面; 例如 &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;(None, &lt;span class=&quot;pre&quot;&gt;'Your &lt;span class=&quot;pre&quot;&gt;String &lt;span class=&quot;pre&quot;&gt;For &lt;span class=&quot;pre&quot;&gt;Display'),对于字符串字段也可以&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;span id=&quot;yiyi-106&quot; class=&quot;yiyi-st&quot;&gt;用一个空字符串代替&lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;None&lt;/span&gt;&lt;/code&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;yiyi-st&quot;&gt;&lt;span class=&quot;yiyi-st&quot;&gt;&lt;span class=&quot;yiyi-st&quot;&gt;&lt;span class=&quot;yiyi-st&quot;&gt;&lt;span class=&quot;yiyi-st&quot;&gt;&lt;span class=&quot;yiyi-st&quot;&gt;&lt;span class=&quot;yiyi-st&quot;&gt;db_index&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;yiyi-st&quot;&gt;&lt;span class=&quot;yiyi-st&quot;&gt;&lt;span class=&quot;yiyi-st&quot;&gt;&lt;span class=&quot;yiyi-st&quot;&gt;&lt;span class=&quot;yiyi-st&quot;&gt;&lt;span class=&quot;yiyi-st&quot;&gt;&lt;span class=&quot;yiyi-st&quot;&gt;如果&lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;True&lt;/span&gt;&lt;/code&gt;，将为该字段创建一个数据库索引。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;yiyi-st&quot;&gt;&lt;span class=&quot;yiyi-st&quot;&gt;&lt;span class=&quot;yiyi-st&quot;&gt;&lt;span class=&quot;yiyi-st&quot;&gt;&lt;span class=&quot;yiyi-st&quot;&gt;&lt;span class=&quot;yiyi-st&quot;&gt;&lt;span class=&quot;yiyi-st&quot;&gt;db_column&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span id=&quot;yiyi-113&quot; class=&quot;yiyi-st&quot;&gt;用来表示数据库中该字段的列名称。 &lt;span id=&quot;yiyi-114&quot; class=&quot;yiyi-st&quot;&gt;如果未指定，那么Django将会使用字段名作为列名.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;yiyi-st&quot;&gt;&lt;span class=&quot;yiyi-st&quot;&gt;&lt;span class=&quot;yiyi-st&quot;&gt;&lt;span class=&quot;yiyi-st&quot;&gt;&lt;span class=&quot;yiyi-st&quot;&gt;&lt;span class=&quot;yiyi-st&quot;&gt;&lt;span class=&quot;yiyi-st&quot;&gt;default&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;yiyi-st&quot;&gt;&lt;span class=&quot;yiyi-st&quot;&gt;&lt;span class=&quot;yiyi-st&quot;&gt;&lt;span class=&quot;yiyi-st&quot;&gt;&lt;span class=&quot;yiyi-st&quot;&gt;&lt;span class=&quot;yiyi-st&quot;&gt;&lt;span class=&quot;yiyi-st&quot;&gt;字段的默认值，可以是一个值或一个不可变对象，如果非要用个字典（可变对象）做默认值，可以这样操作：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;def contact_default():
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; {&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;email&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;to1@example.com&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;}

contact_info &lt;/span&gt;= JSONField(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ContactInfo&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;default&lt;/span&gt;=contact_default)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span id=&quot;yiyi-146&quot; class=&quot;yiyi-st&quot;&gt;&lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;匿名函数&lt;/span&gt;&lt;/code&gt;不能用于&lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;default&lt;/span&gt;&lt;/code&gt;的字段选项&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;yiyi-st&quot;&gt;&lt;span id=&quot;yiyi-149&quot; class=&quot;yiyi-st&quot;&gt;默认值会在新实例创建并且没有给该字段提供值时使用。 &lt;span id=&quot;yiyi-150&quot; class=&quot;yiyi-st&quot;&gt;如果字段为主键且值为None时，将会使用默认值&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;yiyi-st&quot;&gt;&lt;span class=&quot;yiyi-st&quot;&gt;&lt;span class=&quot;yiyi-st&quot;&gt;&lt;span class=&quot;yiyi-st&quot;&gt;&lt;span class=&quot;yiyi-st&quot;&gt;&lt;span class=&quot;yiyi-st&quot;&gt;&lt;span class=&quot;yiyi-st&quot;&gt;editable&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;如果设置为false，将不会出现在admin和modelForm中，默认为True&lt;/p&gt;
&lt;p&gt;&lt;span&gt;error_messages&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span id=&quot;yiyi-160&quot; class=&quot;yiyi-st&quot;&gt;&lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;error_messages&lt;/span&gt;&lt;/code&gt; 参数能够让你重写抛出的默认错误信息。 &lt;span id=&quot;yiyi-161&quot; class=&quot;yiyi-st&quot;&gt;通过关键字，在字典中匹配你要重写的错误信息。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span id=&quot;yiyi-162&quot; class=&quot;yiyi-st&quot;&gt;error_messages 的 key 值包括 &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;unique&lt;/span&gt;&lt;/code&gt;, &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;unique_for_date&lt;/span&gt;&lt;/code&gt;, &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;invalid&lt;/span&gt;&lt;/code&gt;, &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;blank&lt;/span&gt;&lt;/code&gt;, &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;null&lt;/span&gt;&lt;/code&gt;, 和 &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;invalid_choice&lt;/span&gt;&lt;/code&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;yiyi-st&quot;&gt;&lt;span class=&quot;yiyi-st&quot;&gt;&lt;span class=&quot;yiyi-st&quot;&gt;&lt;span class=&quot;yiyi-st&quot;&gt;&lt;span class=&quot;yiyi-st&quot;&gt;&lt;span class=&quot;yiyi-st&quot;&gt;&lt;span class=&quot;yiyi-st&quot;&gt;help_text&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; 对字段的帮助说明，会显示在表单中，注意在自动生成的表单中，这个值不会进行HTML转义，如果需要使用HTML标签渲染，应该在help_text中包含html：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
help_text=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Please use the following format: &amp;lt;em&amp;gt;YYYY-MM-DD&amp;lt;/em&amp;gt;.&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;primary_key&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; 如果为true，则该字段会成为模型的主键字段&lt;/p&gt;
&lt;p&gt;如果没有指定该字段，django会自动添加一个AutoField字段来充当主键&lt;/p&gt;
&lt;p&gt;主键字段时只读的。如果你改变了一个已经存在的对象的主键，会创建一个新的对象，而不是覆盖旧的&lt;/p&gt;
&lt;p&gt;&lt;span&gt;unique&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; 如果为true，该字段值再表中必须是唯一的&lt;/p&gt;
&lt;p&gt;此选项对除ManyToMany和OneToOneField之外的所有字段有效&lt;/p&gt;
&lt;p&gt;当设置了unique为true后，你不再需要设置db_index，因为unique本身就以为着一个索引的创建&lt;/p&gt;
&lt;p&gt;&lt;span&gt;unique_for_date &lt;/span&gt;&lt;/p&gt;
&lt;p&gt; 当它设置为一个DeteField或DateTimeField字段的名称时，表示该字段的值相对于unique_for_date指定的字段的日期值是唯一的&lt;/p&gt;
&lt;p&gt; 当设置为DateTimeField字段名称时，只会考虑其日期部分，&lt;/p&gt;
&lt;p&gt;&lt;span&gt;unique_for_year &lt;/span&gt;   &lt;span&gt;unique_for_month&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;类似于unique_for_date，只不过是要求字段对于月份、年份是唯一的&lt;/p&gt;
&lt;p&gt;&lt;span&gt;verbose_name&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; 一个字段的可读性更高的名称，如果没有给定自述名，dango将会根据字段名称，将下划线转换为空格自动创建它&lt;/p&gt;
&lt;p&gt;&lt;span&gt;validators&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;指示该字段验证时要执行的validator列表&lt;/p&gt;
&lt;p&gt;&lt;span&gt;字段类型&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;AutoField&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;一个根据实际ID自动增长的IntegerField，通常不需要直接使用它&lt;/p&gt;
&lt;p&gt;&lt;span&gt;BigAutoField&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;一个64位整数，类似于AutoField&lt;/p&gt;
&lt;p&gt;&lt;span&gt;BigIntegerField&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;一个64位整数，非常像IntegerField，这个字段默认的表单组件是一个TextInput&lt;/p&gt;
&lt;p&gt;&lt;span&gt;BinaryField&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;一个用来存储二进制码的Field，只支持bytes赋值&lt;/p&gt;
&lt;p&gt;这个Field的功能很有限，不大可能在一个二进制数据上进行查询数据，在ModelForm中也不太可能使用BinaryField&lt;/p&gt;
&lt;p&gt;你可能想使用数据库来存储你的文件，但是%99的情况下这都是一个不好的设计&lt;/p&gt;
&lt;p&gt;&lt;span&gt;BooleanField&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;表示true/false的字段，默认的表单组件是CheckboxInput&lt;/p&gt;
&lt;p&gt;如果需要设置为null值，应该使用NullBooleanField来代替BooleanField&lt;/p&gt;
&lt;p&gt;如果没有指定default，该字段的默认值是None&lt;/p&gt;
&lt;p&gt;&lt;span&gt;CharField&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;一个用来存储各种长度的字符串的地方，默认的表单组件是TextInput，该字段必须接受一个额外参数：max_length，该参数将在数据库层和Django表单验证中起作用，用来限定长度&lt;/p&gt;
&lt;p&gt;如果是巨大的文本类型，可用TextField&lt;/p&gt;
&lt;p&gt;&lt;span&gt;DateField&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;一个用来表示日期的字段，使用python的datetime.date实例来表示日期，默认的表单组件是TextInput，有几个额外的参数：&lt;/p&gt;
&lt;p&gt;auto_now：每次保存对象时，自动设置该字段为当前时间，注意：只用调用了modle.save()是该子段的值才会自动更新，当以其他方式更新字段（如QuerySet.update()）时,该字段不会更新&lt;/p&gt;
&lt;p&gt;auto_now_add：当对象第一次被创建时自动设置为当前时间，即使在创建对象时为此字段设置了一个值，也将被忽略。若是要让此字段在创建时可以为该字段提供一个值，如下能实现：&lt;/p&gt;
&lt;ul&gt;&lt;li id=&quot;yiyi-306&quot; class=&quot;yiyi-st&quot;&gt;对于&lt;code class=&quot;xref py py-class docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;DateField&lt;/span&gt;&lt;/code&gt;：&lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;default=date.today&lt;/span&gt;&lt;/code&gt;    # &lt;code class=&quot;xref py py-meth docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;datetime.date.today()&lt;/span&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li id=&quot;yiyi-307&quot; class=&quot;yiyi-st&quot;&gt;对于&lt;code class=&quot;xref py py-class docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;DateTimeField&lt;/span&gt;&lt;/code&gt;：&lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;default=timezone.now&lt;/span&gt;&lt;/code&gt;    #&lt;code class=&quot;xref py py-func docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;django.utils.timezone.now()&lt;/span&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;注意：default、auto_now、auto_now_add这些设置都是互斥的&lt;/p&gt;
&lt;p&gt;在目前的实现中，设置了auto_now、auto_now_add为True时，django会自动为该字段设置editable=False和blank=True&lt;/p&gt;
&lt;p&gt;&lt;span&gt;DateTimeField&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;同DateField&lt;/p&gt;
&lt;p&gt;&lt;span&gt;DecimalField&lt;/span&gt; &lt;/p&gt;
&lt;p&gt; 一个表示浮点数的字段，用python中Decimal的一个实例来表示该字段的值，有两个必须的参数&lt;/p&gt;
&lt;ol&gt;&lt;li&gt; max_digits：该浮点数的总位数，包括小数点前后的位数&lt;/li&gt;
&lt;li&gt;decimal_places：小数点后的位数&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt; &lt;span&gt;EmialField&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; 相当于CharField，用来检查输入的email地址是否合法，使用EmailValidator来验证输入的合法性&lt;/p&gt;
&lt;p&gt; &lt;span&gt;FileField&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; 用于上传文件的字段，不支持primary_key参数&lt;/p&gt;
&lt;p&gt; &lt;span&gt;FloatField&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; 表示一个浮点数，使用python的float实例来表示&lt;/p&gt;
&lt;p&gt;&lt;span&gt;IntegerField&lt;/span&gt; &lt;/p&gt;
&lt;p&gt; 表示一个整数，&lt;span id=&quot;yiyi-595&quot; class=&quot;yiyi-st&quot;&gt;当&lt;code class=&quot;xref py py-attr docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;localize&lt;/span&gt;&lt;/code&gt;为&lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;False&lt;/span&gt;&lt;/code&gt;或&lt;code class=&quot;xref py py-class docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;TextInput&lt;/span&gt;&lt;/code&gt;时，该字段的默认表单小部件是&lt;code class=&quot;xref py py-class docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;NumberInput&lt;/span&gt;&lt;/code&gt;。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;span&gt;NullBooleanField&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;span id=&quot;yiyi-619&quot; class=&quot;yiyi-st&quot;&gt;类似&lt;code class=&quot;xref py py-class docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;BooleanField&lt;/span&gt;&lt;/code&gt;, 但是允许 &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;NULL&lt;/span&gt;&lt;/code&gt; 作为一个选项. &lt;span id=&quot;yiyi-620&quot; class=&quot;yiyi-st&quot;&gt;使用该字段代替&lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;null=True&lt;/span&gt;&lt;/code&gt;的&lt;code class=&quot;xref py py-class docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;BooleanField字段&lt;/span&gt;&lt;/code&gt;。 &lt;span id=&quot;yiyi-621&quot; class=&quot;yiyi-st&quot;&gt;此字段的默认表单widget为&lt;code class=&quot;xref py py-class docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;NullBooleanSelect&lt;/span&gt;&lt;/code&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;span&gt;PositivIntegerField&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; 类似IntegerField，但值必须是正数或0&lt;/p&gt;
&lt;p&gt;&lt;span&gt;SmallIntegerField&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;类似IntegerField，该值范围视数据库而定，一版对django而言，该值在-32768到32767之间对于所有支持的数据库都是安全的&lt;/p&gt;
&lt;p&gt;&lt;span&gt;TextField&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;表示大文本字段，默认表单组件是Textarea&lt;/p&gt;
&lt;p&gt; &lt;span&gt;TimeField&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; 表示时间的字段，默认表单组件TextInput使用python datetime.time的实例来表示该字段值，接受与DateField相同的自动填充选项&lt;/p&gt;
&lt;p&gt;&lt;span&gt;关联关系字段&lt;/span&gt; &lt;/p&gt;
&lt;p&gt; &lt;span&gt;ForignKeyField&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; 多对一关系，两个必填参数，模型相关类和on_delete选项&lt;/p&gt;
&lt;p&gt;如果需要创建递归关联关系，一个对象与自身具有多对一的关系，使用 ‘self’字符串左右模型相关的类&lt;/p&gt;
&lt;p&gt;如果需要关联到一个还未创建的模型，你可以使用模型的名字而不用 模型对象本身（使用场景：模型继承），子类化模型时，将会在子类所在模块查找相对应的模型相关类：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
#products/&lt;span&gt;models.py

&lt;/span&gt;&lt;span&gt;from&lt;/span&gt;&lt;span&gt; django.db import models

&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; AbstractCar(models.Model):
    manufacturer &lt;/span&gt;= models.ForeignKey(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Manufacturer&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, on_delete=&lt;span&gt;models.CASCADE)

    &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Meta:
        &lt;/span&gt;&lt;span&gt;abstract&lt;/span&gt; = True
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
#production/&lt;span&gt;models.py

&lt;/span&gt;&lt;span&gt;from&lt;/span&gt;&lt;span&gt; django.db import models
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt;&lt;span&gt; products.models import AbstractCar

&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Manufacturer(models.Model):
    pass

&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Car(AbstractCar):
    pass

# Car.manufacturer将指向这里的`production.Manufacturer`。&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　若要引用其他应用中的模型，可以使用app_label.modelname来应用，如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Car(models.Model):
    manufacturer &lt;/span&gt;=&lt;span&gt; models.ForeignKey(
        &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;production.Manufacturer&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
        on_delete&lt;/span&gt;=&lt;span&gt;models.CASCADE,
    )&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　这称为懒惰关系的引用，在解决两个应用之间循环导入时很有用&lt;/p&gt;
&lt;p&gt;ForignKey会自动创建数据库索引，可以通过db_Index=False来取消&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;数据库表示&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Django会在字段名上添加“_id”来创建数据库的列名称，也可以通过db_column来修改，但是，除非你编写自定义SQL，否则不要修改数据库列名称。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;参数&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;on_delete &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;当删除由ForignKey引用的对象时，Djanog将模拟由on_delete参数指定的SQL约束行为&lt;/span&gt;&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;&lt;span&gt;SET_NULL()：表示外键关联到的表的数据被删除时，外键字段置为空。models.ForeignKey(AuthModel, null=&lt;span class=&quot;hljs-keyword&quot;&gt;True, blank=&lt;span class=&quot;hljs-keyword&quot;&gt;True, on_delete=models.SET_NULL)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;CASCADE：级联删除，一并删除包含ForignKey的对象&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;PROTECT：会抛出protectedError，阻止被引用对象的删除，&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SET_DEFAULT()：删除引用对象后，将设置的默认值左右该外键值&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;SET()：引用表数据删除后，将传递给SET()的值作为外键值，如果传入了一个可调用对象，则为调用后的结果&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;DO_NOTHING：不采取任何动作&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;span&gt;　　limit_choices_to&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　当ForignKey字段被admin或ModelForm渲染时，为该字段选项设置条件类过滤选项。它可以是字典、Q对象，或者一个返回字典或Q对象的可调用对象，如：&lt;span&gt;　　&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
staff_member =&lt;span&gt; models.ForeignKey(
    User,
    on_delete&lt;/span&gt;=&lt;span&gt;models.CASCADE,
    limit_choices_to&lt;/span&gt;={&lt;span&gt;'&lt;/span&gt;&lt;span&gt;is_staff&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;: True},
)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　这将使得ModelForm对应的字段只列出User的is_staff=True的成员&lt;/p&gt;
&lt;p&gt;&lt;span&gt; related_name&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;这个名称用于让关联对象反查到源对象。它还是releated_query_name的默认值（关联模型进行反向过滤时使用的名称）&lt;/li&gt;
&lt;li&gt;如果未指定该属性，默认情况下使用FOO_set来反查原模型，FOO是源模型的小写名称&lt;/li&gt;
&lt;li&gt;如果不想创建一个反向关联，将该属性设置为“+”，此时关联模型不能反向查找到源模型&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;span&gt;related_query_name&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; 用于目标模型的反向过滤。如果未设置该属性和related_name 则默认为模型名称，如果该属性未设置，设置了related_name ，则使用related_name，如果该属性设置了值，则使用该属性值：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;# Declare the ForeignKey with related_query_name
&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Tag(models.Model):
    article &lt;/span&gt;=&lt;span&gt; models.ForeignKey(
        Article,
        on_delete&lt;/span&gt;=&lt;span&gt;models.CASCADE,
        related_name&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;tags&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
        related_query_name&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;tag&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
    )
    name &lt;/span&gt;= models.CharField(max_length=&lt;span&gt;255&lt;/span&gt;&lt;span&gt;)

# That&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;s now the name of the reverse filter&lt;/span&gt;
Article.objects.filter(tag__name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;important&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;to_field&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; 关联到的关联对象的字段名称，默认使用关联对象的主键列。如果要关联到其他字段，那个字段应该具有unique=True&lt;/p&gt;
&lt;p&gt;&lt;span&gt;ManyToManyField&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; 多对多关联关系，要求一个关键字参数，与该模型关联的类&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;数据库表示&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; 在幕后，Django创建一个中间表来表示多对多关系。默认情况下该中间表的名称使用多对多字段名称和多对多字段所在表的名称组成。你也可以使用db_table选项提供中间表的名称&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; 参数&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; &lt;span&gt;related_name  related_query_name  limit_choices_to&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; 与ForignKeyField一样，注意：&lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;ManyToManyField&lt;/span&gt;&lt;/code&gt; 对于使用&lt;code class=&quot;xref py py-attr docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;through&lt;/span&gt;&lt;/code&gt; 参数自定义中间表的&lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;limit_choices_to&lt;/span&gt;&lt;/code&gt; 不生效&lt;/p&gt;
&lt;p&gt;&lt;span&gt; through&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;span id=&quot;yiyi-1038&quot; class=&quot;yiyi-st&quot;&gt;Django 会自动创建一个表来管理多对多关系。 &lt;span id=&quot;yiyi-1039&quot; class=&quot;yiyi-st&quot;&gt;不过，如果你希望手动指定中介表，可以使用&lt;code class=&quot;xref py py-attr docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;through&lt;/span&gt;&lt;/code&gt; 选项来指定Django 模型来表示你想要使用的中介表。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; 这个选项最常见的使用场景是当你想要关联&lt;span class=&quot;std std-ref&quot;&gt;更多的数据到关联关系&lt;/span&gt;的时候。&lt;/p&gt;

&lt;p&gt;&lt;span id=&quot;yiyi-1041&quot; class=&quot;yiyi-st&quot;&gt;如果你没有显式指定&lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;through&lt;/span&gt;&lt;/code&gt; 的模型，仍然会有一个隐式的&lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;through&lt;/span&gt;&lt;/code&gt; 模型类，你可以用它来直接访问对应的表示关联关系的数据库表。 &lt;span id=&quot;yiyi-1042&quot; class=&quot;yiyi-st&quot;&gt;它由三个字段来链接模型。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p id=&quot;yiyi-1043&quot; class=&quot;yiyi-st&quot;&gt;如果源模型和目标不同，则生成以下字段：&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;&lt;li&gt;
&lt;ul&gt;&lt;li id=&quot;yiyi-1044&quot; class=&quot;yiyi-st&quot;&gt;&lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;id&lt;/span&gt;&lt;/code&gt;：关系的主键。&lt;/li&gt;
&lt;li id=&quot;yiyi-1045&quot; class=&quot;yiyi-st&quot;&gt;&lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;&amp;lt;containing_model&amp;gt;_id&lt;/span&gt;&lt;/code&gt;：声明了&lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;ManyToManyField&lt;/span&gt;&lt;/code&gt;的模型的&lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;id&lt;/span&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li id=&quot;yiyi-1046&quot; class=&quot;yiyi-st&quot;&gt;&lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;&amp;lt;other_model&amp;gt;_id&lt;/span&gt;&lt;/code&gt;: 被&lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;ManyToManyField&lt;/span&gt;&lt;/code&gt;所指向的模型的&lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;id&lt;/span&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p id=&quot;yiyi-1047&quot; class=&quot;yiyi-st&quot;&gt;如果&lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;ManyToManyField&lt;/span&gt;&lt;/code&gt; 的源模型和目标模型相同，则生成以下字段：&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;&lt;li&gt;
&lt;ul&gt;&lt;li id=&quot;yiyi-1048&quot; class=&quot;yiyi-st&quot;&gt;&lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;id&lt;/span&gt;&lt;/code&gt;：关系的主键。&lt;/li&gt;
&lt;li id=&quot;yiyi-1049&quot; class=&quot;yiyi-st&quot;&gt;&lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;from_&amp;lt;model&amp;gt;_id&lt;/span&gt;&lt;/code&gt;：源模型实例的&lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;id&lt;/span&gt;&lt;/code&gt;。&lt;/li&gt;
&lt;li id=&quot;yiyi-1050&quot; class=&quot;yiyi-st&quot;&gt;&lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;to_&amp;lt;model&amp;gt;_id&lt;/span&gt;&lt;/code&gt;：目标模型实例的&lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;id&lt;/span&gt;&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt; &lt;span&gt;through_fields&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;44&quot;&gt;
&lt;pre&gt;
&lt;span&gt;from&lt;/span&gt;&lt;span&gt; django.db import models

&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Person(models.Model):
    name &lt;/span&gt;= models.CharField(max_length=&lt;span&gt;50&lt;/span&gt;&lt;span&gt;)

&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Group(models.Model):
    name &lt;/span&gt;= models.CharField(max_length=&lt;span&gt;128&lt;/span&gt;&lt;span&gt;)
    members &lt;/span&gt;=&lt;span&gt; models.ManyToManyField(
        Person,
        through&lt;/span&gt;=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Membership&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
        through_fields&lt;/span&gt;=(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;group&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;person&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;),
    )

&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Membership(models.Model):
    group &lt;/span&gt;= models.ForeignKey(Group, on_delete=&lt;span&gt;models.CASCADE)
    person &lt;/span&gt;= models.ForeignKey(Person, on_delete=&lt;span&gt;models.CASCADE)
    inviter &lt;/span&gt;=&lt;span&gt; models.ForeignKey(
        Person,
        on_delete&lt;/span&gt;=&lt;span&gt;models.CASCADE,
        related_name&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;membership_invites&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
    )
    invite_reason &lt;/span&gt;= models.CharField(max_length=&lt;span&gt;64&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上文示例中Membership 有两个外键指向Person (person 和inviter)，这使得关联关系含混不清并让Django 不知道使用哪一个。&lt;/p&gt;
&lt;p&gt;在这种情况下，必须使用through_fields 明确指定Django 应该使用哪些外键&lt;/p&gt;
&lt;p&gt;through_fields 接收一个二元组('field1', 'field2')，其中field1 为指向定义ManyToManyField 字段的模型的外键名称(本例中为group)，field2 为指向目标模型的外键的名称(本例中为person).&lt;/p&gt;
&lt;p&gt;&lt;span&gt;db_table&lt;/span&gt; &lt;/p&gt;
&lt;p&gt;默认情况下,关联表的名称使用多对多字段的名称和包含这张表的模型的名称以及Hash值生成,如:&lt;code&gt;memberShip_person_3c1f5.若要想要手动指定表的名称,可以使用&lt;/code&gt;db_table关键字参数指定.&lt;/p&gt;
&lt;p&gt; &lt;span&gt;OneToOneField&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; 一对一关系，相当于在ForignKey上设置了unique=True&lt;/p&gt;
&lt;p&gt;当一个模型要扩展时，这很有用。例如多表继承是通过将一个隐式一对一关系添加到模型中来实现的&lt;/p&gt;
&lt;p&gt;需要一个参数，与该模型关联的类&lt;/p&gt;

&lt;p&gt; &lt;span&gt;字段API参考&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;span&gt;Field&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; 是一个抽象类，用来代表数据库中的一列，具有以下属性&lt;/p&gt;
&lt;p&gt; &lt;span&gt;db_type：&lt;span&gt;返回该字段在数据库中的类型，例如你自定义了一个时间类型，那么对应在MySQL中就是datetime类型。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; rel_db_type：&lt;/span&gt;&lt;span&gt;返回字段的Field类型，如：&lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;ForeignKeyField&lt;/span&gt;&lt;/code&gt;和&lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;OneToOneField&lt;/span&gt;&lt;/code&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p id=&quot;yiyi-1261&quot; class=&quot;yiyi-st&quot;&gt;有三种主要情况，Django需要与数据库后端字段交互：&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;&lt;li&gt;
&lt;ul&gt;&lt;li id=&quot;yiyi-1262&quot; class=&quot;yiyi-st&quot;&gt;当它查询数据库（Python值 转为 数据库后端值）&lt;/li&gt;
&lt;li id=&quot;yiyi-1263&quot; class=&quot;yiyi-st&quot;&gt;当它从数据库加载数据（数据库后端值 转为 Python值）&lt;/li&gt;
&lt;li id=&quot;yiyi-1264&quot; class=&quot;yiyi-st&quot;&gt;当它保存到数据库（Python值 转为 数据库后端值）&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt; 　　&lt;span&gt;get_prep_value（）：&lt;span&gt;将python值转换为数据库查询参数值&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; 　　&lt;span&gt;get_db_prep_value（）：&lt;span&gt;将查询值转换为数据库值&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; 　　&lt;span&gt;from_db_&lt;/span&gt;&lt;span&gt;value（）：&lt;span&gt;将数据库值转换为python值，它与get_prep_value作用相反&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;span&gt;get_db_prep_save()：&lt;/span&gt;&lt;span&gt;在保存数据库是会调用此方法，默认实现是返回get_db_prep_value()&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;span&gt;prep_save()：&lt;span&gt;在get_db_pre-save前调用&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;span&gt;to_python()：&lt;span&gt;将一个值转换为正确的python对象。是value_to_string的反向操作会在clean中调用&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;span&gt;value_to_string()：&lt;span&gt;将obj转换为字符串，用于序列化字段的值。字段经常会接收不同类型的值，这时就需要序列化。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;span&gt;字段的属性&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;span&gt;auto_create：&lt;span&gt;布尔标识，指示字段时否时自动创建&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;span&gt;concreate&lt;/span&gt;：布尔标志，指示字段是否具有与其相关联的数据列&lt;/p&gt;
&lt;p&gt; &lt;span&gt;mode&lt;/span&gt;l：返回定义字段的模型类，如果在模型类的超类上定义了字段，则返回超类&lt;/p&gt;

























</description>
<pubDate>Thu, 19 Apr 2018 07:12:00 +0000</pubDate>
<dc:creator>持＆恒</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/lfxiao/p/8872200.html</dc:identifier>
</item>
<item>
<title>angualar2——八大组成 - 风随心动*</title>
<link>http://www.cnblogs.com/husfBK/p/8883010.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/husfBK/p/8883010.html</guid>
<description>&lt;p&gt;                                                                                                                                           Angular2&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1363775/201804/1363775-20180419145938744-476005008.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h2 align=&quot;justify&quot;&gt;理解：&lt;/h2&gt;
&lt;p&gt;Angular 应用是模块化的，并且 Angular 有自己的模块系统，它被称为 Angular 模块或 NgModules。&lt;/p&gt;
&lt;div align=&quot;justify&quot;&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1363775/201804/1363775-20180419150046372-1179680482.png&quot; alt=&quot;&quot;/&gt;
&lt;/div&gt;


&lt;p&gt;组件是一个项目主干，一个模块由多个组件构成&lt;/p&gt;
&lt;div align=&quot;justify&quot;&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1363775/201804/1363775-20180419150114751-496141847.png&quot; alt=&quot;&quot;/&gt;
&lt;p&gt;模板是一个html，&lt;/p&gt;
&lt;div align=&quot;justify&quot;&gt;

&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1363775/201804/1363775-20180419150209435-1054517856.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;


&lt;h2 align=&quot;justify&quot;&gt;理解：&lt;/h2&gt;
&lt;p&gt;元数据告诉 Angular 如何处理一个类。&lt;/p&gt;
&lt;p&gt;一个类只有加了元数据才能算一个组件&lt;/p&gt;
&lt;p&gt;selector： CSS 选择器，它告诉 Angular 在父级 HTML 中查找&amp;lt;hero-list&amp;gt;标签，创建并插入该组件。 例如，如果应用的 HTML 包含&amp;lt;hero-list&amp;gt;&amp;lt;/hero-list&amp;gt;， Angular 就会把HeroListComponent的一个实例插入到这个标签中。&lt;/p&gt;
&lt;p&gt;templateUrl：组件 HTML 模板的模块相对地址。&lt;/p&gt;
&lt;p&gt;providers - 组件所需服务的依赖注入提供商数组。 这是在告诉 Angular：该组件的构造函数需要一个HeroService服务，这样组件就可以从服务中获得数据。&lt;/p&gt;


&lt;div align=&quot;justify&quot;&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1363775/201804/1363775-20180419150246694-1510814539.png&quot; alt=&quot;&quot;/&gt;
&lt;/div&gt;

&lt;div align=&quot;justify&quot;&gt; 

&lt;h2 align=&quot;justify&quot;&gt;分析图：&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1363775/201804/1363775-20180419150312628-581428675.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;div align=&quot;justify&quot; readability=&quot;7&quot;&gt; 

&lt;h2 align=&quot;justify&quot;&gt;1：自定义（组件型）指令&lt;/h2&gt;
&lt;p&gt;也可以理解为组件其实就是指令的一种，如下图就是轮播图的组件&lt;/p&gt;
&lt;/div&gt;
&lt;div align=&quot;justify&quot; readability=&quot;19&quot;&gt; 
&lt;h2 align=&quot;justify&quot;&gt;2：属性型指令&lt;/h2&gt;
&lt;p&gt;属性型指令用于改变一个 DOM 元素的外观或行为。&lt;/p&gt;
&lt;p&gt;&amp;lt;input [(ngModel)]=&quot;hero.name&quot;&amp;gt;&lt;/p&gt;
&lt;p&gt;ngModel就是典型的属性型指令，修改了参数的属性值。&lt;/p&gt;
&lt;h2 align=&quot;justify&quot;&gt;3：结构型指令&lt;/h2&gt;
&lt;p&gt;&amp;lt;li *ngFor=&quot;let hero of heroes&quot;&amp;gt;&amp;lt;/li&amp;gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;app-hero-detail *ngIf=&quot;selectedHero&quot;&amp;gt;&amp;lt;/app-hero-detail&amp;gt;&lt;/p&gt;
&lt;p&gt;NgFor,ngIf,ngClass等等都属于结构型指令&lt;/p&gt;
&lt;/div&gt;
&lt;div align=&quot;justify&quot; readability=&quot;31&quot;&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1363775/201804/1363775-20180419150335994-1800383285.png&quot; alt=&quot;&quot;/&gt;

&lt;h2 align=&quot;justify&quot;&gt;理解：&lt;/h2&gt;
&lt;p&gt;它是一种编程模式，可以让类从外部源中获得它的依赖，而不必亲自创建它们（相当于java中的new）。&lt;/p&gt;
&lt;p&gt;“依赖注入”是提供类的新实例的一种方式，还负责处理好类所需的全部依赖。大多数依赖都是服务。 Angular 使用依赖注入来提供新组件以及组件所需的服务。&lt;/p&gt;
&lt;p&gt;Angular 通过查看构造函数的参数类型得知组件需要哪些服务&lt;/p&gt;
&lt;p&gt;注入器维护了一个服务实例的容器，存放着以前创建的实例。 如果所请求的服务实例不在容器中，&lt;/p&gt;
&lt;p&gt;注入器就会创建一个服务实例，并且添加到容器中，然后把这个服务返回给 Angular。 当所有请求的服务都被解析完并返回时，&lt;/p&gt;
&lt;p&gt;Angular 会以这些服务为参数去调用组件的构造函数。 这就是依赖注入 。&lt;/p&gt;

&lt;h2 align=&quot;justify&quot;&gt;理解：&lt;/h2&gt;
&lt;p&gt;每个应用开始的时候差不多都是一些简单任务：获取数据、转换它们，然后把它们显示给用户&lt;/p&gt;
&lt;h2 align=&quot;justify&quot;&gt;内置管道：&lt;/h2&gt;
&lt;p&gt;Angular内置了一些管道，比如DatePipe、UpperCasePipe、LowerCasePipe、CurrencyPipe和PercentPipe。 它们全都可以直接用在任何模板中。&lt;/p&gt;
&lt;h2 align=&quot;justify&quot;&gt;自定义管道：&lt;/h2&gt;
&lt;p&gt;需求：在html中把静态的字符串抽取出来，放到json中，方便修改，需要用到自定义的管道来转化字符串。&lt;/p&gt;

&lt;div align=&quot;justify&quot;&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1363775/201804/1363775-20180419150421404-1438460713.png&quot; alt=&quot;&quot;/&gt;
&lt;/div&gt;
&lt;div align=&quot;justify&quot;&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1363775/201804/1363775-20180419150433832-853263429.png&quot; alt=&quot;&quot;/&gt;
&lt;/div&gt;


&lt;/div&gt;
</description>
<pubDate>Thu, 19 Apr 2018 07:05:00 +0000</pubDate>
<dc:creator>风随心动*</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/husfBK/p/8883010.html</dc:identifier>
</item>
</channel>
</rss>