<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>html 中 div 盒子并排展示 - bg1024</title>
<link>http://www.cnblogs.com/nzplearnSite/p/10014123.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/nzplearnSite/p/10014123.html</guid>
<description>&lt;p&gt;在项目中，遇到一个前端问题，觉得小问题就别去找前端工程师解决了，还是自己动动手吧。&lt;/p&gt;
&lt;p&gt;相信不管小问题，大问题 都应该先自己尝试解决，google 、度娘查查资料，这绝对是增加理解和记忆的好机会。&lt;/p&gt;
&lt;p&gt;##问题描述：&lt;/p&gt;
&lt;p&gt;　　　　　将两个img图片 并排展示&lt;/p&gt;
&lt;p&gt; 解决思路如下：&lt;/p&gt;
&lt;p&gt;1、先画一个盒子 div ，在页面中规划出展示内容的区域位置(ps：width、height 这两个是必要的)，如果需要水平居中于浏览器、推荐使用样式即可。（ps：这样可使浏览器更加兼容）&lt;/p&gt;
&lt;p&gt;　例如：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;.div-levelCenter&lt;/span&gt;{
&lt;span&gt;2&lt;/span&gt; &lt;span&gt;    margin&lt;/span&gt;:&lt;span&gt;0 auto&lt;/span&gt;; 
&lt;span&gt;3&lt;/span&gt; &lt;span&gt;    width&lt;/span&gt;:&lt;span&gt;525px&lt;/span&gt;; 
&lt;span&gt;4&lt;/span&gt; &lt;span&gt;    height&lt;/span&gt;:&lt;span&gt;300px&lt;/span&gt;;
&lt;span&gt;5&lt;/span&gt;     &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; border:1px solid #F00; 能标记出在页面中的位置和区域 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt; 
&lt;span&gt;6&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;效果如下（ps：为了能更清楚看见盒子的位置及内容区域，用红色边框标记）&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/843782/201811/843782-20181124225940830-2056264494.png&quot; alt=&quot;&quot; width=&quot;814&quot; height=&quot;230&quot;/&gt;&lt;/p&gt;

&lt;p&gt;　　2、在这个盒子里，再规划出两个div盒子，这两盒子是用来放图片内容的，盒子大小是根据盒子里的内容来决定的，只要设置两个图片的width、height即可。（ps：这两个盒子要并排展示）&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;.div-levelCenter .img-div &lt;/span&gt;{
&lt;span&gt;2&lt;/span&gt; &lt;span&gt;    display&lt;/span&gt;:&lt;span&gt;inline&lt;/span&gt;;
&lt;span&gt;3&lt;/span&gt; &lt;span&gt;    float&lt;/span&gt;:&lt;span&gt;left&lt;/span&gt;;
&lt;span&gt;4&lt;/span&gt; &lt;span&gt;    padding&lt;/span&gt;:&lt;span&gt;5px&lt;/span&gt;;
&lt;span&gt;5&lt;/span&gt; &lt;span&gt;        border&lt;/span&gt;:&lt;span&gt;1px solid #009A61&lt;/span&gt;;
&lt;span&gt;6&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;效果如下（ps：为了能更清楚看见盒子的位置及内容区域，用绿色边框标记）&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/843782/201811/843782-20181124230820978-1559089564.png&quot; alt=&quot;&quot; width=&quot;814&quot; height=&quot;250&quot;/&gt;&lt;/p&gt;
&lt;p&gt;3、这两个绿色边框盒子就是用来放图片内容的，设置图片width、height在最外层div盒子尺寸内&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;.div-levelCenter .img-div .img-div-imgSize &lt;/span&gt;{
&lt;span&gt;2&lt;/span&gt; &lt;span&gt;    width&lt;/span&gt;:&lt;span&gt;250px&lt;/span&gt;;
&lt;span&gt;3&lt;/span&gt; &lt;span&gt;    height&lt;/span&gt;:&lt;span&gt;250px&lt;/span&gt;;
&lt;span&gt;4&lt;/span&gt;         
&lt;span&gt;5&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;效果如下（ps：直接使用黑、绿背景色来充当图片）&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/843782/201811/843782-20181124231955757-469884507.png&quot; alt=&quot;&quot; width=&quot;646&quot; height=&quot;341&quot;/&gt;&lt;/p&gt;
&lt;p&gt;黑色、绿色背景就是图片展示的内容区域。&lt;/p&gt;
&lt;p&gt;整体html 及 css 代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE HTML&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt; 
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt; 
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;style &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;text/css&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt; 
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;.div-levelCenter&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;    margin&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;0 auto&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; 
&lt;span&gt;10&lt;/span&gt; &lt;span&gt;    width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;525px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; 
&lt;span&gt;11&lt;/span&gt; &lt;span&gt;    height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;300px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt; &lt;span&gt;   border&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;1px solid #F00&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;能标记出在页面中的位置和区域 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt; 
&lt;span&gt;13&lt;/span&gt;  &lt;span&gt;}&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt; 
&lt;span&gt;15&lt;/span&gt; &lt;span&gt;.div-levelCenter .img-div &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt; &lt;span&gt;    display&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;inline&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt; &lt;span&gt;    float&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;left&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt; &lt;span&gt;    padding&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;5px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt; &lt;span&gt;        border&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;1px solid #009A61&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt; &lt;span&gt;}&lt;/span&gt;
&lt;span&gt;21&lt;/span&gt; 
&lt;span&gt;22&lt;/span&gt; &lt;span&gt;.div-levelCenter .img-div .img-div-imgSize &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;
&lt;span&gt;23&lt;/span&gt; &lt;span&gt;    width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;250px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;24&lt;/span&gt; &lt;span&gt;    height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;250px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;25&lt;/span&gt;         
&lt;span&gt;26&lt;/span&gt; &lt;span&gt;}&lt;/span&gt;
&lt;span&gt;27&lt;/span&gt; 
&lt;span&gt;28&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;29&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;30&lt;/span&gt; 
&lt;span&gt;31&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;32&lt;/span&gt; 
&lt;span&gt;33&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;div-levelCenter&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;34&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;img-div&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;35&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;img &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;img-div-imgSize&quot;&lt;/span&gt;&lt;span&gt; style&lt;/span&gt;&lt;span&gt;=&quot;background-color: #000&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;36&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;37&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;img-div&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;38&lt;/span&gt;        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;img &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;img-div-imgSize&quot;&lt;/span&gt;&lt;span&gt; style&lt;/span&gt;&lt;span&gt;=&quot;background-color: #00ff00&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;39&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;40&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;41&lt;/span&gt; 
&lt;span&gt;42&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;43&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;记录实现效果，只是为了回顾当时解决问题的方式。&lt;/p&gt;

</description>
<pubDate>Sat, 24 Nov 2018 15:28:00 +0000</pubDate>
<dc:creator>bg1024</dc:creator>
<og:description>在项目中，遇到一个前端问题，觉得小问题就别去找前端工程师解决了，还是自己动动手吧。 相信不管小问题，大问题 都应该先自己尝试解决，google 、度娘查查资料，这绝对是增加理解和记忆的好机会。 ##问</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/nzplearnSite/p/10014123.html</dc:identifier>
</item>
<item>
<title>itext实现pdf自动定位合同签订 - 天尘·云烟</title>
<link>http://www.cnblogs.com/sky-chen/p/10014081.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/sky-chen/p/10014081.html</guid>
<description>&lt;h2 id=&quot;需求&quot;&gt;需求&lt;/h2&gt;
&lt;ol&gt;&lt;li&gt;需要实现如下效果（最终效果）&lt;br/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/751560/201811/751560-20181124223028744-1702791158.png&quot;/&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;h2 id=&quot;思考&quot;&gt;思考&lt;/h2&gt;
&lt;ol&gt;&lt;li&gt;需求方的要求就是实现签订合同，实现方法不限，但过程中又提出需要在签章的过程中把签订日期的文字也打上去，这就有点坑了~&lt;/li&gt;
&lt;li&gt;一开始的想法是想办法定位需要签名的位置，事实上同类app实现方式就是这样，在前端实现签名位置定位，把位置信息发给后端，后端就可以很方便把印章放上去。&lt;/li&gt;
&lt;li&gt;但现实是现在前端不靠谱，暂时不能提供这样的功能；而且日期信息的填写也需要定位，这怎么办？用户不会手动去定位日期的位置，最多会调整下签名的位置才合理&lt;/li&gt;
&lt;li&gt;然后我研究了下itext的api，并讨论决定尾部签名部分我们自己做。也就是上图中的下半部分的所有内容，包括甲方乙方，日期，签章等都通过程序自动定位上去&lt;/li&gt;
&lt;li&gt;这样的想法遇到的难点，首先是y轴的定位问题。首先要找到文档的尾行在哪，在适当的距离进行文字的填写。&lt;strong&gt;我没有找到可以直接在文档末尾添加文字的api，如果各位知道麻烦指教一下&lt;/strong&gt;。&lt;/li&gt;
&lt;/ol&gt;&lt;h2 id=&quot;步骤&quot;&gt;步骤&lt;/h2&gt;
&lt;ol&gt;&lt;li&gt;因为有上述的问题，我首先考虑要找到尾行的文字才会考虑写代码。通过api研究，可以通过itext的监听器遍历文本拿到尾行文字等信息&lt;/li&gt;
&lt;li&gt;x周位置根据页面宽度调整&lt;/li&gt;
&lt;li&gt;文字大小和字体类型问题。字体类型是我现在也没解决的，&lt;strong&gt;我没找到获取pdf文档字体类型和大小的api，请指教&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;因为没找到api所以我用的最笨的方法，通过获取字体的高度来确定字体大小，这样的文字写出来差别不会太大。至于字体，只能认为规定，合同字体统一宋体。&lt;/li&gt;
&lt;li&gt;过程中还遇到的问题就是字体左边距对齐问题，很明显甲乙方在一行上，中间用空格来分割的话会很不标准。所以我最终决定用table，且左右边签名和文字分开进行写入。也就是&lt;strong&gt;甲签的时候写左半部分，乙签的时候写右半部分&lt;/strong&gt;。当签完后就是上图的效果&lt;/li&gt;
&lt;li&gt;说了这么多接下来直接上工具代码吧，如果要使用，直接把几个类代码复制过去，把字体路径换成自己的，文件路径改下就可以在main方法运行测试了&lt;/li&gt;
&lt;/ol&gt;&lt;h2 id=&quot;上代码&quot;&gt;上代码&lt;/h2&gt;
&lt;ol&gt;&lt;li&gt;PdfParser类，主要实现类，包含了main方法&lt;/li&gt;
&lt;/ol&gt;&lt;pre&gt;
&lt;code&gt;package com.zhiyis.framework.util.itext;

import com.itextpdf.io.font.PdfEncodings;
import com.itextpdf.kernel.font.PdfFont;
import com.itextpdf.kernel.font.PdfFontFactory;
import com.itextpdf.kernel.geom.Rectangle;
import com.itextpdf.kernel.geom.Vector;
import com.itextpdf.kernel.pdf.PdfDocument;
import com.itextpdf.kernel.pdf.PdfReader;
import com.itextpdf.kernel.pdf.PdfWriter;
import com.itextpdf.kernel.pdf.canvas.parser.EventType;
import com.itextpdf.kernel.pdf.canvas.parser.PdfDocumentContentParser;
import com.itextpdf.kernel.pdf.canvas.parser.data.IEventData;
import com.itextpdf.kernel.pdf.canvas.parser.data.TextRenderInfo;
import com.itextpdf.kernel.pdf.canvas.parser.listener.IEventListener;
import com.itextpdf.layout.Document;
import com.itextpdf.layout.borders.Border;
import com.itextpdf.layout.element.Cell;
import com.itextpdf.layout.element.Paragraph;
import com.itextpdf.layout.element.Table;
import com.zhiyis.common.utils.DateUtil;
import com.zhiyis.common.utils.Sysconfig;
import com.zhiyis.framework.util.FileUtil;
import com.zhiyis.framework.util.SignPdf;
import lombok.extern.slf4j.Slf4j;

import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.util.*;


/**
 * @author laoliangliang
 * @date 2018/11/23 15:03
 */
@Slf4j
public class PdfParser {

    private Sysconfig sysconfig;

    public PdfParser() {
    }

    public PdfParser(Sysconfig sysconfig) {
        this.sysconfig = sysconfig;
    }

    public enum SignType {
        //甲签
        SIGN_A(1),
        //乙签
        SIGN_B(2);
        private Integer type;

        SignType(Integer type) {
            this.type = type;
        }

        public Integer getType() {
            return type;
        }
    }

    public static void main(String[] args) {
        List&amp;lt;String&amp;gt; contents = new ArrayList&amp;lt;&amp;gt;();
        contents.add(&quot;甲方法定代表人：&quot;);
        contents.add(&quot;联系电话：&quot;);
        contents.add(&quot;身份证号码：&quot;);
        contents.add(DateUtil.format2str(&quot;yyyy 年  MM 月  dd 日&quot;));
        String input = &quot;/Users/laoliangliang/Downloads/合同模板 (1).pdf&quot;;
        String tempPath = &quot;/Users/laoliangliang/Downloads/合同模板_signed.pdf&quot;;

        String filePath = &quot;/Users/laoliangliang/Downloads/31.png&quot;;
        String fileOut = &quot;/Users/laoliangliang/Downloads/合同模板_signed_signed_signed.pdf&quot;;
        PdfParser pdfParser = new PdfParser();
//        pdfParser.startSign(input, input, fileOut, filePath, SignType.SIGN_A, contents, false);
        pdfParser.startSign(input, fileOut, tempPath, filePath, SignType.SIGN_B, contents, true);
    }

    /**
     * 甲乙方签名方法
     *
     * @param rootPath 初始合同pdf路径
     * @param tempPath 基于哪份合同签章，比如甲方先签，这里填的就是初始合同地址；若是乙方签，这里填的就是甲方签过生成的合同地址
     * @param outPath  输出的合同地址，包含文件名
     * @param imgPath  签章图片地址
     * @param signType 甲方签章还是乙方签章，输入枚举类型
     * @param contents 签章处文本内容
     * @param already  理论上甲签的时候是false，表示没有签过，乙签的时候是true，表示甲已经签过，就算下面高度不够也不会新增页面
     *                 若需求改动，可以乙先签，那逻辑控制，先签的false，后签的true；
     *                 该项错误可能导致第二方签章时新启一页签章
     */
    public void startSign(String rootPath, String tempPath, String outPath, String imgPath, SignType signType, List&amp;lt;String&amp;gt; contents, boolean already) {
        String tempRootPath = &quot;&quot;;
        try {
            //读取文章尾部位置
            MyRectangle myRectangle = getLastWordRectangle(rootPath);
            //还没签印的，临时文件路径
            tempRootPath = rootPath.substring(0, rootPath.length() - 4) + &quot;_temp.pdf&quot;;
            //添加尾部内容
            SignPosition signPosition = addTailSign(myRectangle, tempPath, tempRootPath, signType.getType(), contents, already);
            InputStream in = PdfParser.class.getClassLoader().getResourceAsStream(&quot;keystore.p12&quot;);
            byte[] fileData = SignPdf.sign(&quot;123456&quot;, in, tempRootPath, imgPath, signPosition.getX(), signPosition.getY(), signPosition.getPageNum());
            FileUtil.uploadFile(fileData, outPath);
        } catch (Exception e) {
            log.error(&quot;签名出错&quot;, e);
        } finally {
            File file = new File(tempRootPath);
            if (file.exists()) {
                boolean flag = file.delete();
                if (flag) {
                    log.debug(&quot;临时文件删除成功&quot;);
                }
            }
        }
    }

    /**
     * 添加尾部签名部分(不含签名或印章)
     *
     * @param myRectangle 文档末尾位置和大致信息
     * @param input       输入文档路径
     * @param output      输出文档路径
     * @param type        1-甲签 2-乙签
     * @param content     填写内容
     * @param already     理论上甲签的时候是false，表示没有签过，乙签的时候是true，表示甲已经签过，就算下面高度不够也不会新增页面
     *                    若需求改动，可以乙先签，那逻辑控制，先签的false，后签的true
     * @throws Exception
     */
    private SignPosition addTailSign(MyRectangle myRectangle, String input, String output, Integer type, List&amp;lt;String&amp;gt; content, boolean already) throws Exception {

        PdfReader reader = new PdfReader(input);
        PdfWriter writer = new PdfWriter(output);
        PdfDocument pdf = new PdfDocument(reader, writer);
        int numberOfPages = pdf.getNumberOfPages();

        Document doc = new Document(pdf);
        String dateFontPath;
        if (sysconfig == null) {
            dateFontPath = &quot;/Library/Fonts/simsun.ttc&quot;;
        }else{
            dateFontPath = sysconfig.getProperties().getProperty(&quot;date_font_path&quot;);
        }
        PdfFont font = PdfFontFactory.createFont(dateFontPath + &quot;,1&quot;, PdfEncodings.IDENTITY_H, true);
        //判断签名高度是否够
        int size = content.size();
        float maxRecHeight = myRectangle.getMinlineHeight() * size;
        float v = myRectangle.getBottom() - maxRecHeight;
        boolean isNewPage = false;
        if (v &amp;lt;= myRectangle.getMinlineHeight() * 3) {
            isNewPage = true;
            if (!already) {
                pdf.addNewPage();
                numberOfPages++;
            }
            myRectangle.setBottom(myRectangle.getTop() * 2 - maxRecHeight * 2);
        }
        Table table = new Table(1);
        table.setPageNumber(numberOfPages);
        float bottom = (myRectangle.getBottom() - maxRecHeight) / 2;
        float left1;
        left1 = myRectangle.getLeft() + 30f;
        if (type == 2) {
            left1 = left1 + myRectangle.getWidth() / 2 - 15;
        }
        myRectangle.setLeft(left1);
        table.setFixedPosition(left1, bottom, 200);
        table.setBorder(Border.NO_BORDER);


        for (String text : content) {
            Paragraph paragraph = new Paragraph();
            paragraph.add(text).setFont(font).setFontSize(myRectangle.getHeight());
            Cell cell = new Cell();
            cell.add(paragraph);
            cell.setBorder(Border.NO_BORDER);
            table.addCell(cell);
        }

        doc.add(table);
        doc.flush();
        pdf.close();
        return getSignPosition(myRectangle, content, bottom, numberOfPages, isNewPage);
    }

    private SignPosition getSignPosition(MyRectangle myRectangle, List&amp;lt;String&amp;gt; content, float bottom, int numberOfPages, boolean isNewPage) {
        SignPosition signPosition = new SignPosition();
        //y轴位置，底部
        if (isNewPage) {
            signPosition.setY(bottom + (content.size() - 2) * myRectangle.getMinlineHeight());
        } else {
            signPosition.setY(bottom + (content.size() - 3) * myRectangle.getMinlineHeight());
        }
        //x轴位置，文字宽度+偏移量
        signPosition.setX(myRectangle.getLeft() + content.get(0).length() * myRectangle.getHeight() - 15f);
        signPosition.setPageNum(numberOfPages);
        return signPosition;
    }

    /**
     * 拿到文章末尾参数
     */
    private MyRectangle getLastWordRectangle(String input) throws IOException {
        PdfDocument pdfDocument = new PdfDocument(new PdfReader(input));
        MyEventListener myEventListener = new MyEventListener();
        PdfDocumentContentParser parser = new PdfDocumentContentParser(pdfDocument);
        parser.processContent(pdfDocument.getNumberOfPages(), myEventListener);
        List&amp;lt;Rectangle&amp;gt; rectangles = myEventListener.getRectangles();
        float left = 100000;
        float right = 0;
        float bottom = 100000;
        boolean isTop = true;
        Rectangle tempRec = null;
        float minV = 1000;
        MyRectangle myRectangle = new MyRectangle();
        //拿到文本最左最下和最右位置
        for (Rectangle rectangle : rectangles) {
            if (isTop) {
                myRectangle.setTop(rectangle.getY());
                isTop = false;
            }
            if (tempRec != null) {
                float v = tempRec.getY() - rectangle.getY();
                if (v &amp;lt; minV &amp;amp;&amp;amp; v &amp;gt; 5f) {
                    minV = v;
                }
            }
            tempRec = rectangle;
            float lt = rectangle.getLeft();
            float rt = rectangle.getRight();
            float y = rectangle.getBottom();
            if (lt &amp;lt; left) {
                left = lt;
            }
            if (rt &amp;gt; right) {
                right = rt;
            }
            if (y &amp;lt; bottom) {
                bottom = y;
            }

        }
        Rectangle rectangle = rectangles.get(rectangles.size() - 1);
        float height = rectangle.getHeight();
        myRectangle.setHeight(height);
        myRectangle.setLeft(left);
        myRectangle.setRight(right);
        myRectangle.setBottom(bottom);
        myRectangle.setMinlineHeight(minV);
        myRectangle.setLineSpace(minV - height);
        myRectangle.setWidth(right - left);
        pdfDocument.close();
        return myRectangle;
    }


    static class MyEventListener implements IEventListener {
        private List&amp;lt;Rectangle&amp;gt; rectangles = new ArrayList&amp;lt;&amp;gt;();

        @Override
        public void eventOccurred(IEventData data, EventType type) {
            if (type == EventType.RENDER_TEXT) {
                TextRenderInfo renderInfo = (TextRenderInfo) data;
                if (&quot;&quot;.equals(renderInfo.getText().trim())) {
                    return;
                }
                Vector startPoint = renderInfo.getDescentLine().getStartPoint();
                Vector endPoint = renderInfo.getAscentLine().getEndPoint();
                float x1 = Math.min(startPoint.get(0), endPoint.get(0));
                float x2 = Math.max(startPoint.get(0), endPoint.get(0));
                float y1 = Math.min(startPoint.get(1), endPoint.get(1));
                float y2 = Math.max(startPoint.get(1), endPoint.get(1));
                rectangles.add(new Rectangle(x1, y1, x2 - x1, y2 - y1));
            }
        }

        @Override
        public Set&amp;lt;EventType&amp;gt; getSupportedEvents() {
            return new LinkedHashSet&amp;lt;&amp;gt;(Collections.singletonList(EventType.RENDER_TEXT));
        }

        public List&amp;lt;Rectangle&amp;gt; getRectangles() {
            return rectangles;
        }

        public void clear() {
            rectangles.clear();
        }
    }

}
&lt;/code&gt;
&lt;/pre&gt;
&lt;ol&gt;&lt;li&gt;MyRectangle 用来存文档尾部数据的实体类&lt;/li&gt;
&lt;/ol&gt;&lt;pre&gt;
&lt;code&gt;package com.zhiyis.framework.util.itext;

/**
 * @author laoliangliang
 * @date 2018/11/23 16:11
 */
public class MyRectangle {

    private float width;
    private float left;
    private float right;
    private float bottom;
    private float top;
    private float height;
    /**
     * 行间间隔
     */
    private float lineSpace;
    /**
     * 最小行间距，从上一行底部到下一行底部的距离
     */
    private float minlineHeight;
    public float getWidth() {
        return width;
    }

    public void setWidth(float width) {
        this.width = width;
    }
    public float getLeft() {
        return left;
    }

    public void setLeft(float left) {
        this.left = left;
    }

    public float getRight() {
        return right;
    }

    public void setRight(float right) {
        this.right = right;
    }

    public float getBottom() {
        return bottom;
    }

    public void setBottom(float bottom) {
        this.bottom = bottom;
    }

    public float getHeight() {
        return height;
    }

    public void setHeight(float height) {
        this.height = height;
    }

    public float getLineSpace() {
        return lineSpace;
    }

    public void setLineSpace(float lineSpace) {
        this.lineSpace = lineSpace;
    }

    public float getMinlineHeight() {
        return minlineHeight;
    }

    public void setMinlineHeight(float minlineHeight) {
        this.minlineHeight = minlineHeight;
    }

    public float getTop() {
        return top;
    }

    public void setTop(float top) {
        this.top = top;
    }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;ol&gt;&lt;li&gt;SignPosition 签章位置类&lt;/li&gt;
&lt;/ol&gt;&lt;pre&gt;
&lt;code&gt;package com.zhiyis.framework.util.itext;

/**
 * 签章位置类
 * @author laoliangliang
 * @date 18/11/24 下午1:43
 */
public class SignPosition {

    private float x;

    private float y;

    private float width;

    private float height;

    private Integer pageNum;

    public Integer getPageNum() {
        return pageNum;
    }

    public void setPageNum(Integer pageNum) {
        this.pageNum = pageNum;
    }

    public float getX() {
        return x;
    }

    public void setX(float x) {
        this.x = x;
    }

    public float getY() {
        return y;
    }

    public void setY(float y) {
        this.y = y;
    }

    public float getWidth() {
        return width;
    }

    public void setWidth(float width) {
        this.width = width;
    }

    public float getHeight() {
        return height;
    }

    public void setHeight(float height) {
        this.height = height;
    }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;ol&gt;&lt;li&gt;SignPdf 签章类&lt;/li&gt;
&lt;/ol&gt;&lt;pre&gt;
&lt;code&gt;package com.zhiyis.framework.util;

import com.itextpdf.text.Image;
import com.itextpdf.text.Rectangle;
import com.itextpdf.text.pdf.PdfReader;
import com.itextpdf.text.pdf.PdfSignatureAppearance;
import com.itextpdf.text.pdf.PdfSignatureAppearance.RenderingMode;
import com.itextpdf.text.pdf.PdfStamper;
import com.itextpdf.text.pdf.security.*;
import com.itextpdf.text.pdf.security.MakeSignature.CryptoStandard;
import org.bouncycastle.jce.provider.BouncyCastleProvider;

import java.io.*;
import java.security.KeyStore;
import java.security.PrivateKey;
import java.security.Security;
import java.security.cert.Certificate;
import java.util.UUID;

/**
 * 签印
 */
public class SignPdf {
    /**
     * @param password     秘钥密码
     * @param inputStream  秘钥文件
     * @param signPdfSrc   签名的PDF文件
     * @param signImage    签名图片文件
     * @param x            x坐标
     * @param y            y坐标
     * @return
     */
    public static byte[] sign(String password, InputStream inputStream, String signPdfSrc, String signImage,
                              float x, float y,int page) {
        File signPdfSrcFile = new File(signPdfSrc);
        PdfReader reader = null;
        ByteArrayOutputStream signPDFData = null;
        PdfStamper stp = null;
        try {
            BouncyCastleProvider provider = new BouncyCastleProvider();
            Security.addProvider(provider);
            KeyStore ks = KeyStore.getInstance(&quot;PKCS12&quot;, new BouncyCastleProvider());
            // 私钥密码 为Pkcs生成证书是的私钥密码 123456
            ks.load(inputStream, password.toCharArray());
            String alias = (String) ks.aliases().nextElement();
            PrivateKey key = (PrivateKey) ks.getKey(alias, password.toCharArray());
            Certificate[] chain = ks.getCertificateChain(alias);
            reader = new PdfReader(signPdfSrc);
            signPDFData = new ByteArrayOutputStream();
            // 临时pdf文件
            File temp = new File(signPdfSrcFile.getParent(), System.currentTimeMillis() + &quot;.pdf&quot;);
            stp = PdfStamper.createSignature(reader, signPDFData, '\0', temp, true);
            stp.setFullCompression();
            PdfSignatureAppearance sap = stp.getSignatureAppearance();
            sap.setReason(&quot;数字签名，不可改变&quot;);
            // 使用png格式透明图片
            Image image = Image.getInstance(signImage);
            sap.setImageScale(0);
            sap.setSignatureGraphic(image);
            sap.setRenderingMode(RenderingMode.GRAPHIC);
            int size = 120;
            // 是对应x轴和y轴坐标
            float lly = y;
            sap.setVisibleSignature(new Rectangle(x, lly, x + size, lly+size), page,
                    UUID.randomUUID().toString().replaceAll(&quot;-&quot;, &quot;&quot;));
            stp.getWriter().setCompressionLevel(5);
            ExternalDigest digest = new BouncyCastleDigest();
            ExternalSignature signature = new PrivateKeySignature(key, DigestAlgorithms.SHA512, provider.getName());
            MakeSignature.signDetached(sap, digest, signature, chain, null, null, null, 0, CryptoStandard.CADES);
            stp.close();
            reader.close();
            return signPDFData.toByteArray();
        } catch (Exception e) {
            e.printStackTrace();
        } finally {

            if (signPDFData != null) {
                try {
                    signPDFData.close();
                } catch (IOException e) {
                }
            }

            if (inputStream != null) {
                try {
                    inputStream.close();
                } catch (IOException e) {
                }
            }
        }
        return null;
    }

}
&lt;/code&gt;
&lt;/pre&gt;
&lt;ol&gt;&lt;li&gt;工具方法&lt;/li&gt;
&lt;/ol&gt;&lt;pre&gt;
&lt;code&gt;public static boolean uploadFile(byte[] file, String filePath) throws Exception {
    String tempPath = filePath.substring(0,filePath.lastIndexOf(&quot;/&quot;));
    File targetFile = new File(tempPath);
    if(!targetFile.exists()) {
        boolean out = targetFile.mkdirs();
        if(out) {
            log.info(filePath + &quot; create success&quot;);
        } else {
            log.info(filePath + &quot; create fail&quot;);
        }
    }

    FileOutputStream out1 = new FileOutputStream(filePath);
    out1.write(file);
    out1.flush();
    out1.close();
    File f = new File(filePath);
    return f.exists();
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;总结&quot;&gt;总结&lt;/h2&gt;
&lt;ol&gt;&lt;li&gt;公私钥的生成网上很多就自己去生成吧&lt;/li&gt;
&lt;li&gt;如果想要测试效果的可以把签章部分先去掉也可以运行&lt;/li&gt;
&lt;li&gt;我觉得这篇博客是我最有含金量的一篇了~我找了很多博客定位pdf签章的没有靠谱的，很多技术实现都很复杂，我最初版本，也就是前面有一篇博客实现就是改编自网上一篇博客的，但是有很多问题，代码也过于复杂难懂，弯弯绕绕且难以修改增强。&lt;/li&gt;
&lt;li&gt;我研究了官方最新代码结合自己脑洞大开的思路，精简出了很简单的三个类，其实排除实体类，真正实现功能就一个PdfParser&lt;/li&gt;
&lt;li&gt;**如果觉得有用给我点个赞哦^_^**&lt;/li&gt;
&lt;/ol&gt;</description>
<pubDate>Sat, 24 Nov 2018 15:13:00 +0000</pubDate>
<dc:creator>天尘&amp;#183;云烟</dc:creator>
<og:description>需求 1. 需要实现如下效果（最终效果） 思考 1. 需求方的要求就是实现签订合同，实现方法不限，但过程中又提出需要在签章的过程中把签订日期的文字也打上去，这就有点坑了~ 2. 一开始的想法是想办法定</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/sky-chen/p/10014081.html</dc:identifier>
</item>
<item>
<title>.NET Core实战项目之CMS 第四章 入门篇-Git的快速入门及实战演练 - 依乐祝</title>
<link>http://www.cnblogs.com/yilezhu/p/10014027.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/yilezhu/p/10014027.html</guid>
<description>&lt;h2 id=&quot;写在前面&quot;&gt;写在前面&lt;/h2&gt;
&lt;p&gt;上篇文章我带着大家通过分析了一遍ASP.NET Core的源码了解了它的启动过程，然后又带着大家熟悉了一遍配置文件的加载方式，最后引出了依赖注入以及控制反转的概念！如果大家把前面几张都理解了，那么你也就入了ASP.NET Core的大门了。但是我们还需要一个版本控制工具来提高我们的编码效率。因此这篇文章我将带着大家了解下Git这个版本控制工具以及为什么选择它。&lt;br/&gt;下面我们将通过故事的形式从Git的历史谈起，并讲述Git的强大之处。然后通过实战演练教你如何在Github以及码云上托管我们的代码并进行代码的版本控制。&lt;br/&gt;这里还想说一句，这篇文章本来昨天就能发出来的，奈何出现了一点状况，所以今天才来写，为了不浪费大家的时间我会在文章的最后再来讲述原因，这里给大家说声抱歉了。&lt;br/&gt;本篇文章已经收入&lt;a href=&quot;https://www.cnblogs.com/yilezhu/p/9977862.html&quot;&gt;.NET Core实战项目之CMS 第一章 入门篇-开篇及总体规划&lt;/a&gt; 有兴趣的朋友可以加入.NET Core项目实战交流群637326624 进行交流。&lt;/p&gt;
&lt;blockquote readability=&quot;4.6206896551724&quot;&gt;
&lt;p&gt;本文已收录至&lt;strong&gt;&lt;a href=&quot;https://www.cnblogs.com/yilezhu/p/9977862.html&quot;&gt;.NET Core实战项目之CMS 第一章 入门篇-开篇及总体规划&lt;/a&gt;&lt;/strong&gt; 点击可以查看更多教程。&lt;br/&gt;作者：依乐祝&lt;br/&gt;原本地址：https://www.cnblogs.com/yilezhu/p/10014027.html&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;git快速入门&quot;&gt;Git快速入门&lt;/h2&gt;
&lt;p&gt;本部分我会先通过故事的形式讲解下Git的诞生，及其强大的分布式版本控制的能力。然后再给大家介绍一下我们在实际的项目开发过程中经常用到的git命令，让大家能够快速入门Git。当然我不会给你介绍八百年也不会用一次的命令，感觉很高级的命令，毕竟实用才是硬道理。还有不要指望通过这篇文章你就能成为Git专家，这篇文章只会让你在实际项目中能够迎刃有余的使用Git&lt;/p&gt;
&lt;h3 id=&quot;关于git你不得不知的故事&quot;&gt;关于Git你不得不知的故事&lt;/h3&gt;
&lt;p&gt;（没错，这部分参考自廖雪峰大神的文章，因为有必要让大伙了解这些）很多人都知道，Linus在1991年创建了开源的Linux，从此，Linux系统不断发展，已经成为最大的服务器系统软件了。&lt;/p&gt;
&lt;p&gt;Linus虽然创建了Linux，但Linux的壮大是靠全世界热心的志愿者参与的，这么多人在世界各地为Linux编写代码，那Linux的代码是如何管理的呢？&lt;/p&gt;
&lt;p&gt;事实是，在2002年以前，世界各地的志愿者把源代码文件通过diff的方式发给Linus，然后由Linus本人通过手工方式合并代码！&lt;/p&gt;
&lt;p&gt;你也许会想，为什么Linus不把Linux代码放到版本控制系统里呢？不是有CVS、SVN这些免费的版本控制系统吗？因为Linus坚定地反对CVS和SVN，这些集中式的版本控制系统不但速度慢，而且必须联网才能使用。有一些商用的版本控制系统，虽然比CVS、SVN好用，但那是付费的，和Linux的开源精神不符。&lt;/p&gt;
&lt;p&gt;不过，到了2002年，Linux系统已经发展了十年了，代码库之大让Linus很难继续通过手工方式管理了，社区的弟兄们也对这种方式表达了强烈不满，于是Linus选择了一个商业的版本控制系统BitKeeper，BitKeeper的东家BitMover公司出于人道主义精神，授权Linux社区免费使用这个版本控制系统。&lt;/p&gt;
&lt;p&gt;安定团结的大好局面在2005年就被打破了，原因是Linux社区牛人聚集，不免沾染了一些梁山好汉的江湖习气。开发Samba的Andrew试图破解BitKeeper的协议（这么干的其实也不只他一个），被BitMover公司发现了（监控工作做得不错！），于是BitMover公司怒了，要收回Linux社区的免费使用权。&lt;/p&gt;
&lt;p&gt;Linus可以向BitMover公司道个歉，保证以后严格管教弟兄们，嗯，这是不可能的。实际情况是这样的：&lt;/p&gt;
&lt;p&gt;Linus花了两周时间自己用C写了一个分布式版本控制系统，这就是Git！一个月之内，Linux系统的源码已经由Git管理了！牛是怎么定义的呢？大家可以体会一下。&lt;/p&gt;
&lt;p&gt;Git迅速成为最流行的分布式版本控制系统，尤其是2008年，GitHub网站上线了，它为开源项目免费提供Git存储，无数开源项目开始迁移至GitHub，包括jQuery，PHP，Ruby等等。如今GitHub更是被微软收购，ASP.NET Core的的全套源码以及.NET Core的源码也都是在GitHub上开源。&lt;/p&gt;
&lt;p&gt;历史就是这么偶然，如果不是当年BitMover公司威胁Linux社区，可能现在我们就没有免费而超级好用的Git了。&lt;/p&gt;
&lt;h3 id=&quot;git的优势&quot;&gt;Git的优势&lt;/h3&gt;
&lt;p&gt;看了Git的的故事是不是心潮澎湃呢？但是你又在想了Git到底有什么优势能够让那么多的大名鼎鼎的项目都是用Git进行代码管理呢？别急，这部分就为你解答。&lt;/p&gt;
&lt;ol readability=&quot;5.4712793733681&quot;&gt;&lt;li readability=&quot;3&quot;&gt;
&lt;p&gt;适合分布式开发，强调个体,可以离线工作。 分布式版本控制系统根本没有“中央服务器”，每个人的电脑上都是一个完整的版本库，这样，你工作的时候，就不需要联网了，因为版本库就在你自己的电脑上。既然每个人电脑上都有一个完整的版本库，那多个人如何协作呢？比方说你在自己电脑上改了文件A，你的同事也在他的电脑上改了文件A，这时，你们俩之间只需把各自的修改推送给对方，就可以互相看到对方的修改了。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;安全性要高很多，因为每个人电脑里都有完整的版本库，某一个人的电脑坏掉了不要紧，随便从其他人那里复制一个就可以了。而集中式版本控制系统的中央服务器要是出了问题，所有人都没法干活了。因此公共服务器压力和数据量都不会太大。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;速度快、灵活。 强大的分支管理能力，无论创建、切换和删除分支，Git在1秒钟之内就能完成！无论你的版本库是1个文件还是1万个文件，想想svn是不是头疼啊。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-0.8695652173913&quot;&gt;
&lt;p&gt;暂存区概念，具体的点击&lt;a href=&quot;https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/0013745374151782eb658c5a5ca454eaa451661275886c6000&quot;&gt;这里&lt;/a&gt; 查看&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;这个优缺点Git的优势想的头疼，说太多就感觉枯燥了，只有你真正使用了才能体会到！话不多说，让我们快速入门Git吧。&lt;/p&gt;
&lt;h3 id=&quot;git安装&quot;&gt;Git安装&lt;/h3&gt;
&lt;ol readability=&quot;4.8978723404255&quot;&gt;&lt;li readability=&quot;0.91176470588235&quot;&gt;
&lt;p&gt;你可以点击&lt;a href=&quot;https://git-scm.com/downloads&quot;&gt;这里&lt;/a&gt; 到官网进行下载,可能官网下载比较忙，所以你可以点击&lt;a href=&quot;https://pc.qq.com/detail/13/detail_22693.html&quot;&gt;这里&lt;/a&gt; 到腾讯软件中心进行下载.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;Windows系统的安装很简单，软件下载好之后一步一步的安装就行了，至于Linux和MacOS你可以点&lt;a href=&quot;https://git-scm.com/book/zh/v1/%E8%B5%B7%E6%AD%A5-%E5%AE%89%E8%A3%85-Git&quot;&gt;这里&lt;/a&gt; 查看官网的安装教程.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;6.5&quot;&gt;
&lt;p&gt;安装完成之后，需要进行相关的配置，在命令行输入以下命令进行全局的配置：&lt;/p&gt;
&lt;pre class=&quot;c#&quot;&gt;
&lt;code&gt;$ git config --global user.name &quot;yilezhu&quot;
$ git config --global user.email &quot;1015657114@qq.com&quot;&lt;/code&gt;
&lt;/pre&gt;
&lt;blockquote readability=&quot;12&quot;&gt;
&lt;p&gt;注：因为Git是分布式版本控制系统，所以，每台机器都必须自报家门：你的名字和Email地址（上面双引号里面的内容）。你也许会担心，如果有人故意冒充别人怎么办？这个不必担心，首先我们相信大家都是善良无知的群众，其次，真的有冒充的也是有办法可查的。&lt;/p&gt;
&lt;p&gt;注意&lt;code&gt;git config&lt;/code&gt;命令的&lt;code&gt;--global&lt;/code&gt;参数，用了这个参数，表示你这台机器上所有的Git仓库都会使用这个配置，当然也可以对某个仓库指定不同的用户名和Email地址。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li readability=&quot;0.95275590551181&quot;&gt;
&lt;p&gt;点击&lt;a href=&quot;https://tortoisegit.org/&quot;&gt;这里&lt;/a&gt; ，下载并安装TortoiseGit图形化工具,安装后可以通过鼠标进行Git命令的操作。如下所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1377250/201811/1377250-20181124225642536-1232449279.png&quot; alt=&quot;1543061444748&quot;/&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;h3 id=&quot;git结合github进行实战演练&quot;&gt;Git结合Github进行实战演练&lt;/h3&gt;
&lt;h4 id=&quot;git本地仓库与github远程仓库关联并获取最新的代码&quot;&gt;Git本地仓库与GitHub远程仓库关联并获取最新的代码&lt;/h4&gt;
&lt;p&gt;这部分我们就进行Git的实战吧，正好前面几篇文章已经为大家演示了几个例子，那么我们就把前面几个例子为例，使用Git把他们托管到GitHub上面吧。&lt;/p&gt;
&lt;ol readability=&quot;17.948251078103&quot;&gt;&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;假设你已经有了GitHub账号，没有的话自己去注册。点击&lt;a href=&quot;https://github.com/login&quot;&gt;这里&lt;/a&gt; 登录GitHub,&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;自报家门，配置你是谁（如果你在上面的Git安装）里面已经按照下面进行了配置，这里就无需再配置。首先鼠标右键按照下图所示打开Git Bash 然后按照下图所示进行配置：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1377250/201811/1377250-20181124225641645-1039852644.png&quot; alt=&quot;1543063300748&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1377250/201811/1377250-20181124225640681-1933234906.png&quot; alt=&quot;1543063525086&quot;/&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;生成ssh key 在git bash上面输入&lt;code&gt;ssh-keygen -t rsa -C &quot;你的邮箱&quot;&lt;/code&gt; 它会有三次等待你输入，直接回车即可。下面的图是因为我已经生成了，询问我是否覆盖，我输入y选择了是重新生成了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1377250/201811/1377250-20181124225640062-491784336.png&quot; alt=&quot;1543063686083&quot;/&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;将生成的ssh key拷贝到剪贴板，执行 &lt;code&gt;clip &amp;lt; ~/.ssh/id_rsa.pub&lt;/code&gt; （或者到上图提示的路径里去打开文件并复制）：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1377250/201811/1377250-20181124225639380-1503707165.png&quot; alt=&quot;1543064147452&quot;/&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;打开github并按照如下图所示打开Settings&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1377250/201811/1377250-20181124225638680-1053892084.png&quot; alt=&quot;1543064363837&quot;/&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;点击左边的&lt;code&gt;SSH and GPG keys&lt;/code&gt; 然后在右边点击 &lt;code&gt;New SSH key&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1377250/201811/1377250-20181124225637686-149620396.png&quot; alt=&quot;1543064336071&quot;/&gt;&lt;/p&gt;
&lt;p&gt;将ssh key粘贴到右边的Key里面。Title随便命名即可。这时候GitHub会给你发送一封邮件&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1377250/201811/1377250-20181124225636697-1714937195.png&quot; alt=&quot;1543064246038&quot;/&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;执行 &lt;code&gt;ssh -T git@github.com&lt;/code&gt;测试结果如下说明GitHub配置成功。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1377250/201811/1377250-20181124225635684-1782910026.png&quot; alt=&quot;1543064535854&quot;/&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;GitHub上创建一个新的项目,项目名称为&lt;code&gt;Czar.Cms&lt;/code&gt;，这个仓库将作为我们后面CMS系统的GitHub上的远程仓库
&lt;ul&gt;&lt;li&gt;首先是在右上角“+”进入创建界面&lt;br/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1377250/201811/1377250-20181124225634705-1991539998.png&quot; alt=&quot;1543065344474&quot;/&gt;&lt;/li&gt;
&lt;li&gt;接着按照如下所示输入项目名称，然后点击&lt;code&gt;Create repository&lt;/code&gt; 就创建好了。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1377250/201811/1377250-20181124225633685-1240301408.png&quot; alt=&quot;1543065764512&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这里我们有选择以Readme初始化项目。所以生成后的结构如下所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1377250/201811/1377250-20181124225632680-1075694170.png&quot; alt=&quot;1543065918196&quot;/&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;下面我们就在本地初始化一个仓库，然后与GitHub的远程仓库关联起来吧。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;我们在我们的工作文件夹中，打开Git Bash，然后输入如下命令&lt;code&gt;git init&lt;/code&gt;来初始化一个本地仓库。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1377250/201811/1377250-20181124225631686-705259541.png&quot; alt=&quot;1543066727823&quot;/&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;3&quot;&gt;
&lt;p&gt;然后输入&lt;code&gt;git remote&lt;/code&gt; 查看下远程仓库，正常的话应该有0个，现在就让我们添加下我们刚才建立的GitHub上的远程仓库吧.然后再看下远程仓库列表，发现已经有一个了，名字为&lt;code&gt;github&lt;/code&gt;&lt;br/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1377250/201811/1377250-20181124225630691-1261659851.png&quot; alt=&quot;1543067824895&quot;/&gt;&lt;/p&gt;
&lt;pre class=&quot;c#&quot;&gt;
&lt;code&gt;git remote add github github远程仓库的地址
&lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;然后输入&lt;code&gt;git pull github master&lt;/code&gt; 就会从刚才我们配置的远程仓库拉取master分支的代码。如下所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1377250/201811/1377250-20181124225629645-1823975492.png&quot; alt=&quot;1543067968316&quot;/&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;获取之后然后看下我么的项目文件夹，如下所示：已经从GitHub上获取到了最新的代码：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1377250/201811/1377250-20181124225628674-1307751402.png&quot; alt=&quot;1543068120750&quot;/&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;h4 id=&quot;把上篇文章的源码上传到github的sample02分支上&quot;&gt;把上篇文章的源码上传到GitHub的Sample02分支上&lt;/h4&gt;
&lt;ol readability=&quot;9&quot;&gt;&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;在我们的本地仓库文件夹打开git bash 然后输入&lt;code&gt;git checkout -b Sample02&lt;/code&gt; 命令创建并切换到&lt;code&gt;Sample02&lt;/code&gt; 这个分支，然后把我们上篇文章的代码拷贝到这个文件夹，如下图所示&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1377250/201811/1377250-20181124225627697-1685439615.png&quot; alt=&quot;1543068715835&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1377250/201811/1377250-20181124225626691-1703348067.png&quot; alt=&quot;1543068674449&quot;/&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;输入&lt;code&gt;git status&lt;/code&gt; 查看当前仓库有哪些文件做了修改，如下图所示，红色部分表示已经发生了修改&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1377250/201811/1377250-20181124225625687-2095319386.png&quot; alt=&quot;1543069027605&quot;/&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;输入&lt;code&gt;git add Sample02/&lt;/code&gt; 把Sample02文件夹下面所有的已经发生了修改的文件都放进'暂存区' 然后输入&lt;code&gt;git status&lt;/code&gt; 查看一下当前的状态，都变成了绿色，说明Sample02文件夹下面的修改内容都加入了暂存区&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1377250/201811/1377250-20181124225624773-2139813378.png&quot; alt=&quot;1543069251735&quot;/&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;接着输入&lt;code&gt;git commit -m '注释内容'&lt;/code&gt;命令把我们暂存区的代码提交到我们的本地仓库&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1377250/201811/1377250-20181124225623665-449189153.png&quot; alt=&quot;1543069360089&quot;/&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;然后输入&lt;code&gt;git status&lt;/code&gt; 查看一下，发现所有的修改都已经提交成功了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1377250/201811/1377250-20181124225622716-1314411146.png&quot; alt=&quot;1543069432593&quot;/&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1.5&quot;&gt;
&lt;p&gt;输入如下命令&lt;code&gt;git push github Sample02&lt;/code&gt;把我们的本地代码提交到远程仓库的'Sample02分支'吧&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1377250/201811/1377250-20181124225621908-1048211604.png&quot; alt=&quot;1543069575141&quot;/&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;注意，这里时提交到Github上的Sample02分支上，而我们的GitHub上没有这个分支，所以会自动帮我们创建这个分支。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;这里第三篇的事例代码就上传到Github上了。大家可以去查看下，顺便给个Star哦，因为后面的CMS的代码我也会放到这个仓库，只不过是不同的分支而已。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;下面就让我们切换回master分支，并结束这个部分吧。输入&lt;code&gt;git checkout master&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;h2 id=&quot;github源码地址&quot;&gt;GitHub源码地址&lt;/h2&gt;
&lt;p&gt;这个时候可以上GitHub的地址了，后面所有的事例代码都会放到这个分支上，所以大伙可以先去看一下上一篇的事例代码&lt;br/&gt;https://github.com/yilezhu/Czar.Cms&lt;/p&gt;
&lt;h2 id=&quot;迟更的原因&quot;&gt;迟更的原因&lt;/h2&gt;
&lt;p&gt;非常抱歉，本来这篇文章应该昨天写的，奈何昨天中午我老婆给我打电话带着哭腔的说她的爷爷奶奶生病了，问我这个周末加不加班，如果不加班陪她回家看下。我说，你先别着急，我马上请假陪你回去。然后中午的时候就请假，然后开了四个多小时的车带着我老婆以及我女儿（大名：依乐，小名：可乐）回我老婆的老家了。然后第二天，也就是今天早上就带着我的爷爷奶奶去县城里面的人民医院做检查，还好检查结果没什么大的问题。这是万幸了！最后回到家都四五点钟了。然后才开始写“昨天的文章”，这一写就写到了现在。再次给大家说声抱歉。以后我尽量两天一更，最少也得一星期三更。再次感谢大家的支持。&lt;/p&gt;
&lt;h2 id=&quot;总结&quot;&gt;总结&lt;/h2&gt;
&lt;p&gt;本文从Git的诞生开始说起，然后给大家讲了Git的优势。接着我们通过一个GitHub的实战，手把手的在GitHub上新建了一个远程仓库并跟我本地的代码进行管理，并且把我的上篇文章的事例代码给上传到了GitHub上。希望对大家使用Git有所帮助。下面再次罗列常用的Git命令&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;git init ：初始化本地仓库&lt;/li&gt;
&lt;li&gt;git remote ：查看关联的远程仓库连接&lt;/li&gt;
&lt;li&gt;git remote add github github远程仓库地址 ：创建一个远程仓库连接&lt;/li&gt;
&lt;li&gt;git pull github master ：从github命名的远程仓库拉取master分支内容&lt;/li&gt;
&lt;li&gt;git checkout -b Sample02 ：创建并切换到Sample02这个分支上&lt;/li&gt;
&lt;li&gt;git branch ：查看当前的所有分支&lt;/li&gt;
&lt;li&gt;git add Sample02/ ：把Sample02文件夹下面的所有修改文件添加到暂存区&lt;/li&gt;
&lt;li&gt;git commit -m &quot;注释&quot; ：把暂存区所有修改提交到本地仓库，并给本体提交写一个注释方便查看日志&lt;/li&gt;
&lt;li&gt;git log --graph ：查看修改日志&lt;/li&gt;
&lt;li&gt;git push github Sample02 ：把当前仓库中得当前分支的内容推送到github这个远程仓库的Sample02分支上，如果分支不存在则自动创建&lt;/li&gt;
&lt;li&gt;git merge --no-ff -m &quot;注释&quot; Sample02 :在当前分支合并&lt;code&gt;Sample02&lt;/code&gt;这个分支的修改到当前分支，并给这次合并添加注释&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;好了，今天就给大家介绍到这，主要是给大家介绍平时实际项目中常用的命令，对于不常用的命令没有介绍，因为毕竟是实战，所以以实用为主。下篇文章我会给大家介绍一下Dapper的使用（玩数据库了）来为后面我们的CMS系列课程打下基础，毕竟要照顾一些新手朋友。如果大家有什么问题的话可以加.NET Core项目实战交流群637326624跟大家交流。&lt;/p&gt;
</description>
<pubDate>Sat, 24 Nov 2018 14:59:00 +0000</pubDate>
<dc:creator>依乐祝</dc:creator>
<og:description>﻿ 写在前面 上篇文章我带着大家通过分析了一遍ASP.NET Core的源码了解了它的启动过程，然后又带着大家熟悉了一遍配置文件的加载方式，最后引出了依赖注入以及控制反转的概念！如果大家把前面几张都理</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/yilezhu/p/10014027.html</dc:identifier>
</item>
<item>
<title>简明依赖注入(Dependency Injection) - racaljk</title>
<link>http://www.cnblogs.com/racaljk/p/10014031.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/racaljk/p/10014031.html</guid>
<description>&lt;p&gt;这是因特奈特上面不知道第几万篇讲依赖注入(Dependency Injection)的文章，但是说明白的却寥寥无几，这篇文章尝试控制字数同时不做大多数。&lt;/p&gt;
&lt;p&gt;首先，依赖注入的是一件很简单的事情。&lt;/p&gt;

&lt;p&gt;然后，假设我们有一个汽车Car，一个引擎接口Engine，两个引擎具体实现&lt;code&gt;Level4Engine&lt;/code&gt;,&lt;code&gt;Level5Engine&lt;/code&gt;。汽车可以长这样：&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;public class Car{
    private Engine e;
    public Car(){
        e = new Level4Engine();
    }
    public void ignite(){
        System.out.println()
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;现在要让汽车点火，简单：&lt;/p&gt;
&lt;pre class=&quot;cpp&quot;&gt;
&lt;code&gt;public static void main(String[] args) {
    Car c = new Car();
    c.ignite();
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;但是假如我们想要换一个更高级的引擎，我们不得不修改&lt;code&gt;Car&lt;/code&gt;的构造函数:&lt;br/&gt;~~ &lt;code&gt;e = new Level4Engine();&lt;/code&gt; ~~&lt;br/&gt;&lt;code&gt;e = new Level5Engine();&lt;/code&gt;&lt;br/&gt;然后重新编译。这就是代码的耦合，一方面假如需求不会经常改变，这个汽车只会使用&lt;code&gt;Level4Engine&lt;/code&gt;，那没问题，这个代码很完美。但另一方面，假如引擎有多个，需求会经常改变，我们发现&lt;code&gt;Level4Engine&lt;/code&gt;还不行，需要更高级的，而且新引擎还需要进行一系列复杂配置，那这个耦合就是灾难了。只是装配汽车的血汗工人，懂不了那么多的。&lt;/p&gt;

&lt;p&gt;依赖注入就是为了解决上述问题而生的。用依赖注入的写法解决上面的问题：&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;public class Car{
    private Engine e;
    public Car(Engine e){
        this.e = e;
    }
    public void ignite(){
        System.out.println()
    }
}

// 也可以使用xml进行配置
@Confignuration
public CarFactory{
    @Bean
    public Engine engine(){
        var e = new Level5Engine();
        e.complexConfig();
        return e;
    }
    @Bean
    public Car car(Engine e){
        return new Car(e);
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这里Car对Engine的&lt;strong&gt;依赖&lt;/strong&gt;被抽了出去。Car不负责创建Engine，也不负责/无能力配置Enging。那么Engine抽出到了哪？又由谁&lt;strong&gt;注入&lt;/strong&gt;给Car？总不能让Car对着一个壳子(Engine接口)点火吧。&lt;/p&gt;
&lt;p&gt;答案当然是spring。spring把它们抽象为&lt;strong&gt;Bean&lt;/strong&gt;，每个&lt;code&gt;@Bean&lt;/code&gt;都通知spring&lt;br/&gt;&lt;strong&gt;嘿我要给你一个新的bean，以后就交给你来管理了。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;这样既解决了上述&quot;汽车装配工需要引擎配置知识&quot;的问题，也解决了&quot;更改引擎非常困难&quot;的问题：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;引擎制造者只关注如何制造出引擎，当现在生产条件不成熟就提供&lt;code&gt;Level4Engine&lt;/code&gt;，反之就提供&lt;code&gt;Level5Engine&lt;/code&gt;，可以随时更改并对其进行配置&lt;/li&gt;
&lt;li&gt;汽车装配工只关注装配工作，而不需要配置引擎。&lt;/li&gt;
&lt;li&gt;每次引擎更改后只需要对这个配置类进行编译，如果使用xml连编译也不需要了。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;这真的就是依赖注入的全部内容了，不过围绕依赖注入相关还有很多话题可以讨论，下面扩展就是两个。&lt;/p&gt;

&lt;p&gt;演示了在&lt;code&gt;CarFactory&lt;/code&gt;中手动car，还没完，spring还能更聪明一些，它可以通过自动装配完成这个配置工作：&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;@Component
public class Car{
    private Engine e;

    @Autowired
    public Car(Engine e){
        this.e = e;
    }

    public void ignite(){
        System.out.println()
    }
}

@Component
public class Level5Engine{
    public void complexConfig(){
        System.out.println(&quot;really complex stuff...&quot;);
    }
}

@Confignuration
@ComponentScan
public class CarFactory{}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;CarFactory&lt;/code&gt;的&lt;code&gt;@ComponentScan&lt;/code&gt;告诉spring扫描当前类所在包下面的所有类，如果找到&lt;code&gt;@Component&lt;/code&gt;注解就加入spring bean容器。这里明显Car和Level5Engine加入了容器(默认会类名首字母小写，所以加入的是&lt;code&gt;car&lt;/code&gt;和&lt;code&gt;level5Engine&lt;/code&gt;)。然后&lt;code&gt;@Autowired&lt;/code&gt;在当前容器中查找，如果找到需要注入的类型就自动注入：&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;    @Autowired
    public Car(Engine e){
        this.e = e;
    }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Car的装配需要一个引擎，spring容器刚好有一个实现了Engine的Level5Engine引擎，所以这里自动注入。&lt;/p&gt;

&lt;p&gt;最后一个不常见的问题，假如我们把两个引擎都标注了&lt;code&gt;@Component&lt;/code&gt;会怎么样：&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;@Component
public class Level5Engine{
}
@Component
public class Level4Engine{
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;spring不知道用哪一个注入给car，所以抛出&lt;code&gt;NoUniqueBeanDefinitionException&lt;/code&gt;，表示有多个候选注入对象，需要我们手动缩小范围(&lt;code&gt;@Qualifier&lt;/code&gt;,&lt;code&gt;@Component value&lt;/code&gt;,&lt;code&gt;@Primary&lt;/code&gt;)，关于这部分内容可以参见其他文章。&lt;/p&gt;
</description>
<pubDate>Sat, 24 Nov 2018 14:59:00 +0000</pubDate>
<dc:creator>racaljk</dc:creator>
<og:description>前言 这是因特奈特上面不知道第几万篇讲依赖注入(Dependency Injection)的文章，但是说明白的却寥寥无几，这篇文章尝试控制字数同时不做大多数。 首先，依赖注入的是一件很简单的事情。 为</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/racaljk/p/10014031.html</dc:identifier>
</item>
<item>
<title>Codeforces Round #524 (Div. 2) C. Masha and two friends 思路 - FanJiaming</title>
<link>http://www.cnblogs.com/fan-jiaming/p/10014009.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/fan-jiaming/p/10014009.html</guid>
<description>&lt;p&gt;题目：&lt;a href=&quot;http://codeforces.com/contest/1080/problem/C&quot; target=&quot;_blank&quot;&gt;题目链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;思路：直接计数显然是不好处理的，但分情况讨论只要不写错这题是一定可以出的，但这样基本做完这个题就没时间做其他题了，但当时我就这么蠢的这样做了，比赛一个半小时的时候突然发现一个似乎可行的规律，但因为时间问题没有证，当时那个思路已经快写完了也没有换思路写，就杯具了，最后那个写了一坨的代码耗了我所有时间还错到了第四组样例。比赛结束用不到二十分钟证明并写出了那个规律的思路。最后赛后交题收获一发AC。&lt;/p&gt;
&lt;p&gt;　　首先没有涂色时白色和黑色数量我们可以直接算出，然后只考虑涂白色时，我们算这个区域内黑色方块数量，更新白色和黑色方块数量，然后只考虑涂黑色方块，我们计算不考虑上次涂白色的情况下有多少白色被更新为黑色，最后考虑黑白重合的区域，对于这个区域，我们计算有多少最开始是黑色，然后被涂成白色，然后被涂成黑色并且没有在上一步计数的方块数量，这个区域坐标为(max(x1, x3)，max(y1, y3))，(min(x2, x4), min(y2, y4))。&lt;/p&gt;
&lt;p&gt;　　自己还是心态太差了，做题很容易紧张，尤其当时间很紧迫时，组队赛甚至因为时间问题吼过队友，，，回想自己在时间紧迫时太容易急躁了，不只是在比赛方面，生活各方面都是这样，明知道急躁时没用的还是很难改，这个题当时静下来想一下当时是可以直接换思路过的，要改呀。&lt;/p&gt;
&lt;p&gt;AC代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;57&quot;&gt;
&lt;pre&gt;
#include &amp;lt;iostream&amp;gt;&lt;span&gt;
#include &lt;/span&gt;&amp;lt;cstdio&amp;gt;&lt;span&gt;
#include &lt;/span&gt;&amp;lt;algorithm&amp;gt;&lt;span&gt;
#include &lt;/span&gt;&amp;lt;cstring&amp;gt;&lt;span&gt;
#include &lt;/span&gt;&amp;lt;&lt;span&gt;string&lt;/span&gt;&amp;gt;&lt;span&gt;
#include &lt;/span&gt;&amp;lt;vector&amp;gt;&lt;span&gt;
#include &lt;/span&gt;&amp;lt;&lt;span&gt;set&lt;/span&gt;&amp;gt;&lt;span&gt;
#include &lt;/span&gt;&amp;lt;map&amp;gt;&lt;span&gt;
#include &lt;/span&gt;&amp;lt;unordered_set&amp;gt;&lt;span&gt;
#include &lt;/span&gt;&amp;lt;unordered_map&amp;gt;&lt;span&gt;
#include &lt;/span&gt;&amp;lt;queue&amp;gt;&lt;span&gt;
#include &lt;/span&gt;&amp;lt;cmath&amp;gt;&lt;span&gt;
#include &lt;/span&gt;&amp;lt;&lt;span&gt;set&lt;/span&gt;&amp;gt;

&lt;span&gt;#define&lt;/span&gt; INF 0x3f3f3f3f

&lt;span&gt;#define&lt;/span&gt; FRER() freopen(&quot;in.txt&quot;, &quot;r&quot;, stdin);
&lt;span&gt;#define&lt;/span&gt; FREW() freopen(&quot;out.txt&quot;, &quot;w&quot;, stdout);

&lt;span&gt;using&lt;/span&gt; &lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; std;

&lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt; main()
{
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;FRER();&lt;/span&gt;
    &lt;span&gt;int&lt;/span&gt;&lt;span&gt; t;
    cin &lt;/span&gt;&amp;gt;&amp;gt;&lt;span&gt; t;
    &lt;/span&gt;&lt;span&gt;long&lt;/span&gt; &lt;span&gt;long&lt;/span&gt;&lt;span&gt; n, m, black, white, x1, y1, x2, y2, x3, y3, x4, y4;
    &lt;/span&gt;&lt;span&gt;while&lt;/span&gt;(t--&lt;span&gt;) {
        cin &lt;/span&gt;&amp;gt;&amp;gt; n &amp;gt;&amp;gt;&lt;span&gt; m;
        cin &lt;/span&gt;&amp;gt;&amp;gt; x1 &amp;gt;&amp;gt; y1 &amp;gt;&amp;gt; x2 &amp;gt;&amp;gt; y2 &amp;gt;&amp;gt; x3 &amp;gt;&amp;gt; y3 &amp;gt;&amp;gt; x4 &amp;gt;&amp;gt;&lt;span&gt; y4;
        black &lt;/span&gt;= n * m / &lt;span&gt;2&lt;/span&gt;&lt;span&gt;;
        white &lt;/span&gt;= n * m -&lt;span&gt; black;

        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;((x1 + y1) &amp;amp; &lt;span&gt;1&lt;/span&gt;&lt;span&gt;) {
            white &lt;/span&gt;+= ((x2 - x1 + &lt;span&gt;1&lt;/span&gt;) * (y2 - y1 + &lt;span&gt;1&lt;/span&gt;) + &lt;span&gt;1&lt;/span&gt;) / &lt;span&gt;2&lt;/span&gt;&lt;span&gt;;
            black &lt;/span&gt;-= ((x2 - x1 + &lt;span&gt;1&lt;/span&gt;) * (y2 - y1 + &lt;span&gt;1&lt;/span&gt;) + &lt;span&gt;1&lt;/span&gt;) / &lt;span&gt;2&lt;/span&gt;&lt;span&gt;;
        }
        &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
            white &lt;/span&gt;+= ((x2 - x1 + &lt;span&gt;1&lt;/span&gt;) * (y2 - y1 + &lt;span&gt;1&lt;/span&gt;)) / &lt;span&gt;2&lt;/span&gt;&lt;span&gt;;
            black &lt;/span&gt;-= ((x2 - x1 + &lt;span&gt;1&lt;/span&gt;) * (y2 - y1 + &lt;span&gt;1&lt;/span&gt;)) / &lt;span&gt;2&lt;/span&gt;&lt;span&gt;;
        }

        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;((x3 + y3) &amp;amp; &lt;span&gt;1&lt;/span&gt;&lt;span&gt;) {
            black &lt;/span&gt;+= (x4 - x3 + &lt;span&gt;1&lt;/span&gt;) * (y4 - y3 + &lt;span&gt;1&lt;/span&gt;) / &lt;span&gt;2&lt;/span&gt;&lt;span&gt;;
            white &lt;/span&gt;-= (x4 - x3 + &lt;span&gt;1&lt;/span&gt;) * (y4 - y3 + &lt;span&gt;1&lt;/span&gt;) / &lt;span&gt;2&lt;/span&gt;&lt;span&gt;;
        }
        &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
            black &lt;/span&gt;+= ((x4 - x3 + &lt;span&gt;1&lt;/span&gt;) * (y4 - y3 + &lt;span&gt;1&lt;/span&gt;) + &lt;span&gt;1&lt;/span&gt;) / &lt;span&gt;2&lt;/span&gt;&lt;span&gt;;
            white &lt;/span&gt;-= ((x4 - x3 + &lt;span&gt;1&lt;/span&gt;) * (y4 - y3 + &lt;span&gt;1&lt;/span&gt;) + &lt;span&gt;1&lt;/span&gt;) / &lt;span&gt;2&lt;/span&gt;&lt;span&gt;;
        }

        &lt;/span&gt;&lt;span&gt;long&lt;/span&gt; &lt;span&gt;long&lt;/span&gt; x5 = max(x1, x3), y5 = max(y1, y3), x6 = min(x2, x4), y6 =&lt;span&gt; min(y2, y4);
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(x6 &amp;gt;= x5 &amp;amp;&amp;amp; y6 &amp;gt;=&lt;span&gt; y5) {
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;((x5 + y5) &amp;amp; &lt;span&gt;1&lt;/span&gt;&lt;span&gt;) {
                black &lt;/span&gt;+= ((x6 - x5 + &lt;span&gt;1&lt;/span&gt;) * (y6 - y5 + &lt;span&gt;1&lt;/span&gt;) + &lt;span&gt;1&lt;/span&gt;) / &lt;span&gt;2&lt;/span&gt;&lt;span&gt;;
                white &lt;/span&gt;-= ((x6 - x5 + &lt;span&gt;1&lt;/span&gt;) * (y6 - y5 + &lt;span&gt;1&lt;/span&gt;) + &lt;span&gt;1&lt;/span&gt;) / &lt;span&gt;2&lt;/span&gt;&lt;span&gt;;
            }
            &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
                black &lt;/span&gt;+= ((x6 - x5 + &lt;span&gt;1&lt;/span&gt;) * (y6 - y5 + &lt;span&gt;1&lt;/span&gt;)) / &lt;span&gt;2&lt;/span&gt;&lt;span&gt;;
                white &lt;/span&gt;-= ((x6 - x5 + &lt;span&gt;1&lt;/span&gt;) * (y6 - y5 + &lt;span&gt;1&lt;/span&gt;)) / &lt;span&gt;2&lt;/span&gt;&lt;span&gt;;
            }
        }
        cout &lt;/span&gt;&amp;lt;&amp;lt; white &amp;lt;&amp;lt; &lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt; &amp;lt;&amp;lt; black &amp;lt;&amp;lt;&lt;span&gt; endl;
    }
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

</description>
<pubDate>Sat, 24 Nov 2018 14:53:00 +0000</pubDate>
<dc:creator>FanJiaming</dc:creator>
<og:description>题目：题目链接 思路：直接计数显然是不好处理的，但分情况讨论只要不写错这题是一定可以出的，但这样基本做完这个题就没时间做其他题了，但当时我就这么蠢的这样做了，比赛一个半小时的时候突然发现一个似乎可行的</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/fan-jiaming/p/10014009.html</dc:identifier>
</item>
<item>
<title>Spring Boot 终极清单 - 王磊的博客</title>
<link>http://www.cnblogs.com/vipstone/p/10013913.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/vipstone/p/10013913.html</guid>
<description>&lt;p&gt;我上学那会主要学的是 Java 和 .Net 两种语言，当时对于语言分类这事儿没什么概念，恰好在2009年毕业那会阴差阳错的先找到了 .Net 的工作，此后就开始了漫长的 .Net 编程之旅，说实话最初的“编程思想”的形成和确立都是在头几年做 .Net 的时候慢慢培养起来的。&lt;/p&gt;
&lt;p&gt;后来在2015年之后就开启了“百花齐放”的模式，那时候 Nodejs、Vue、Golang 在程序界开始暂露头脚并逐渐流行，而作为类游戏公司出身的我和我的老领导，在新系统开发中大量使用了大量的新技术元素，那时候 Nodejs、Golang 作为我们首选的主要的开发语言，进而取代了之前一直使用的 .Net，这个经历对我的影响非常大，我会开始尝试更多的开发语言和框架，甚至到后来的手机开发也开始越做越顺手，当然手机的框架我们也用了很多，踩了很多坑，从最开始的 DCloud 到 Xamarin 再到 React Native，我们是一边实践一边用于生产坏境，所幸由于领导的体谅和我们的努力，让我们能很顺利的走过那段“艰难”岁月，一直到后来的技术逐渐稳定。&lt;/p&gt;
&lt;p&gt;说了辣么多，和我们本节的主题“为什么会诞生 Spring Boot 系列文章”有毛关系？&lt;/p&gt;
&lt;p&gt;客观莫慌，待老衲如实道来。&lt;/p&gt;
&lt;p&gt;是这样子，虽然我们这一路似乎走的还算平稳，那为什么导致我后来用 Java 和 Spring Boot 的诞生呢？原因其实也挺简单，新技术的使用会带来几个问题？&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;新技术的使用增加了人员招聘的成本，通常招不到更多的人（在业务高速发展的阶段会影响项目的进度）；&lt;/li&gt;
&lt;li&gt;新技术使用成本很高，通常有更多的坑和更少的解决方案；&lt;/li&gt;
&lt;li&gt;新技术可控性更差，有些问题可能是致命性，存在不能修复的风险；&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;所以经过这些事之后，让我明白一件事，那就是“顺势而为”，Java 作为国内最流行的语言，处理 BAT 还有很多名不见经传的大小中公司都在使用，而且有很成熟的解决方案和人员优势，我们干嘛要做吃力不讨好的事情。当然这也不是教育我们不要尝试新的事物，而是要循序渐进深入思考的使用和应用新技术，要明白所有的事情不是一蹴而就的，凡事都有一个过程，新技术是一定要学的，但用于生产环境一定要结合自身情况去深入思考。当然我更鼓励大家去学习新技术，但不要迷恋新技术，凡事都与利弊的，要做一件事情一定要深入思考。&lt;/p&gt;
&lt;p&gt;有了这个想法之后，要很好的使用 Java，Spring Boot 当时逃不掉了，这是此系列诞生主要的原因，当然学 Spring Boot 可以自己闷头去学也是没有问题的，那 Spring Boot 系列诞生的原因还有那些呢？&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;会用一种技术和给别人讲明白一种技术是两码事情，想通过给别让讲明白这件事，驱动自己更深层次的理解和探寻这门技术；&lt;/li&gt;
&lt;li&gt;照本宣科的学习一种技术，是一件简单事情，但要理解技术内在的联系，把你理解的技术转述给别人，引导别人从浅到深平滑的思维过度，以及按照某种规律，建立起更加牢固的记忆和更容易理解的文章，是一件非常不易的事儿，而要搞懂这种内在的联系（或者说是内在的规律），首先你要把这项技术理解的非常深刻才行，这是一种良性互动的驱动力，提供优质的文章=&amp;gt;积极的反馈=&amp;gt;改善，提供更优质的文章=&amp;gt;更积极的反馈；&lt;/li&gt;
&lt;li&gt;大部分类似的文章比较旧，更新不够及时；&lt;/li&gt;
&lt;li&gt;大部分类似的文章千篇一律，人云亦云，没有自己的独立思考与实践；&lt;/li&gt;
&lt;li&gt;大部分类似的文章在功能使用上过于简单，想要深层次的挖掘一些更本质、更不一样的东西；&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;说了这么多那就开始一边实践，一边总结经验来汇报给各位看官老爷喽。&lt;/p&gt;

&lt;p&gt;如您阅读的是微信公众号，因规定不能访问外部链接，请点击文末“查看原文”进行阅读。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/vipstone/p/9530870.html&quot;&gt;Spring Boot （一）快速入门&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/vipstone/p/9540325.html&quot;&gt;Spring Boot （二）集成Jsp与生产环境部署&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/vipstone/p/9559052.html&quot;&gt;Spring Boot （三）模板引擎FreeMarker集成&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/vipstone/p/9594092.html&quot;&gt;Spring Boot （四）模板引擎Thymeleaf集成&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/vipstone/p/9602866.html&quot;&gt;Spring Boot （五）Spring Data JPA 操作 MySQL 8&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/vipstone/p/9636678.html&quot;&gt;Spring Boot（六）集成 MyBatis 操作 MySQL 8&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/vipstone/p/9728244.html&quot;&gt;Spring Boot （七）MyBatis代码自动生成和辅助插件&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/vipstone/p/9752623.html&quot;&gt;Spring Boot （八）MyBatis + Docker + MongoDB 4.x&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/vipstone/p/9841716.html&quot;&gt;Spring Boot（九）Swagger2自动生成接口文档和Mock模拟数据&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/vipstone/p/9878862.html&quot;&gt;Spring Boot（十）Logback和Log4j2集成与日志发展史&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/vipstone/p/9900257.html&quot;&gt;Spring Boot（十一）Redis集成从Docker安装到分布式Session共享&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/vipstone/p/9908545.html&quot;&gt;Spring Boot（十二）单元测试JUnit&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/vipstone/p/9950434.html&quot;&gt;Spring Boot（十三）RabbitMQ安装与集成&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/vipstone/p/9967649.html&quot;&gt;Spring Boot（十四）RabbitMQ延迟队列&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;以上几乎包含了 Spring Boot 使用中，要涉及的方方面面了，后期根据工作中使用的情况，可能会做其他补充。&lt;/p&gt;

&lt;p&gt;当然以上这些实践总结，不是凭空想出来的，一定参考了很多技术文章加上我自己的思考产生的心得体会，不保证一定是对的，但都是我的深思熟虑之后的所得所想，这里重点感谢几位老哥的资料：&lt;/p&gt;
&lt;p&gt;纯洁的微笑：&lt;a href=&quot;http://www.ityouknow.com/spring-boot.html&quot; class=&quot;uri&quot;&gt;http://www.ityouknow.com/spring-boot.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;battcn：&lt;a href=&quot;https://blog.battcn.com/categories/SpringBoot/&quot; class=&quot;uri&quot;&gt;https://blog.battcn.com/categories/SpringBoot/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;程序猿DD：&lt;a href=&quot;http://blog.didispace.com/categories/Spring-Boot/&quot; class=&quot;uri&quot;&gt;http://blog.didispace.com/categories/Spring-Boot/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;最后，推荐给大家一个非常不错的付费课程：&lt;a href=&quot;http://t.cn/ELwd1MM&quot;&gt;《精通 Spring Boot 42 讲》&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://icdn.apigo.cn/myinfo/springboot3.png&quot;/&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;关注作者二维码，查看更多动态：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://icdn.apigo.cn/myinfo/gognzhonghao.jpg&quot;/&gt;&lt;/p&gt;
</description>
<pubDate>Sat, 24 Nov 2018 14:31:00 +0000</pubDate>
<dc:creator>王磊的博客</dc:creator>
<og:description>一、Spring Boot 终极清单诞生原因 我上学那会主要学的是 Java 和 .Net 两种语言，当时对于语言分类这事儿没什么概念，恰好在2009年毕业那会阴差阳错的先找到了 .Net 的工作，此</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/vipstone/p/10013913.html</dc:identifier>
</item>
<item>
<title>系统学习 Java IO (十三)----字符读写 Reader/Writer 及其常用子类 - czwbig</title>
<link>http://www.cnblogs.com/czwbig/p/10013920.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/czwbig/p/10013920.html</guid>
<description>&lt;p&gt;目录：&lt;a href=&quot;https://www.cnblogs.com/czwbig/p/10007201.html&quot;&gt;系统学习 Java IO---- 目录，概览&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;reader&quot;&gt;Reader&lt;/h3&gt;
&lt;p&gt;Reader 类是 Java IO API 中所有 Reader 子类的基类。 Reader 类似于 InputStream ，除了它是基于字符而不是基于字节的。 换句话说，Java Reader 用于读取文本，而 InputStream 用于读取原始字节。&lt;/p&gt;
&lt;h3 id=&quot;writer&quot;&gt;Writer&lt;/h3&gt;
&lt;p&gt;Writer 类是 Java IO API 中所有 Writer 子类的基类。 Writer 就像一个 OutputStream ，除了它是基于字符而不是基于字节的。 换句话说，Writer 用于写入文本，而 OutputStream 用于写入原始字节。&lt;br/&gt;Writer 通常连接到某些数据目标，如文件，字符数组，网络套接字等。&lt;/p&gt;
&lt;h5 id=&quot;unicode中的字符&quot;&gt;Unicode中的字符&lt;/h5&gt;
&lt;p&gt;许多应用程序使用 UTF（UTF-8或UTF-16）来存储文本数据。 可能需要一个或多个字节来表示 UTF-8 中的单个字符。 在 UTF-16 中，每个字符需要 2 个字节来表示。 因此，在读取或写入文本数据时，数据中的单个字节可能与 UTF 中的一个字符不对应。 如果只是通过 InputStream 一次读取或写入 UTF-8 数据的一个字节，并尝试将每个字节转换为字符，可能不会得到正确的文本。&lt;/p&gt;
&lt;p&gt;Reader 类能够将字节解码为字符。 只需要告诉Reader要解码的字符集。 这是在实例化 Reader 时执行的（当实例化其中一个子类时）。 通常会直接使用 Reader 子类而不是 Reader。Writer 同理。&lt;/p&gt;
&lt;h5 id=&quot;读取&quot;&gt;读取&lt;/h5&gt;
&lt;p&gt;部分方法如下:&lt;br/&gt;|方法|描述|&lt;br/&gt;|-|-|&lt;br/&gt;| void mark(int readAheadLimit) | 标记流中的当前位置。&lt;br/&gt;| int read() | 读取单个字符。&lt;br/&gt;| int read(char[] cbuf) |将字符读入数组。&lt;br/&gt;|abstract int read(char[] cbuf, int off, int len) | 将字符读入数组的某一部分。&lt;br/&gt;| int read(CharBuffer target) | 试图将字符读入指定的字符缓冲区。&lt;br/&gt;|boolean ready() | 判断是否准备读取此流。&lt;/p&gt;
&lt;p&gt;具体的使用需要参考对应的子类。&lt;/p&gt;
&lt;p&gt;和 InputStream 类似，如果 read() 方法返回 -1 ，则 Reader 中没有更多数据要读取，并且可以关闭它。-1 作为 int 值，而不是-1作为byte或char值。&lt;/p&gt;

&lt;h3 id=&quot;inputstreamreade&quot;&gt;InputStreamReade&lt;/h3&gt;
&lt;p&gt;InputStreamReade 类用于包装 InputStream ，从而将基于字节的输入流转换为基于字符的 Reader 。 换句话说，InputStreamReader 将 InputStream 的字节解释为文本而不是数字数据，是字节流通向字符流的桥梁。&lt;br/&gt;为了达到最高效率，可要考虑在 BufferedReader 内包装 InputStreamReader。例如：&lt;br/&gt;&lt;code&gt;BufferedReader in = new BufferedReader(new InputStreamReader(System.in));&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;通常用于从文件（或网络连接）中读取字符，其中字节表示文本。 例如，一个文本文件，其中字符编码为 UTF-8 。 可以使用InputStreamReader 来包装 FileInputStream 以读取此类文件。&lt;br/&gt;一个示例如下：&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt; InputStream inputStream = new FileInputStream(&quot;D:\\test\\1.txt&quot;);
        Reader inputStreamReader = new InputStreamReader(inputStream);

        int data = inputStreamReader.read();
        while (data != -1) {
            char c = (char) data;
            System.out.print(c);
            data = inputStreamReader.read();
        }
        inputStreamReader.close();&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;首先创建一个 FileInputStream ，然后将其包装在 InputStreamReader 中。 其次，该示例通过InputStreamReader 从文件中读取所有字符.&lt;br/&gt;注意：为清楚起见，此处已跳过正确的异常处理。 要了解有关正确异常处理的更多信息，请转至目录的 Java IO 异常处理。&lt;/p&gt;
&lt;h5 id=&quot;指定字符集&quot;&gt;指定字符集&lt;/h5&gt;
&lt;p&gt;底层 InputStream 中的字符将使用某些字符编码进行编码。 此字符编码称为字符集，Charset。 两种常用字符集是 ASCII 和 UTF8（在某些情况下为UTF-16）。&lt;/p&gt;
&lt;p&gt;默认字符集可能因为环境不同而不同，所以建议告诉 InputStreamReader 实例 InputStream 中的字符用什么字符集进行编码。 这可以在 InputStreamReader 构造函数中指定，可以只提供字符集的名字字符串，在底层会调用&lt;code&gt;Charset.forName(&quot;UTF-8&quot;)&lt;/code&gt;进行转换的。 以下是设置Java InputStreamReader使用的字符集的示例：&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;InputStream inputStream = new FileInputStream(&quot;D:\\test\\1.txt&quot;);
Reader inputStreamReader = new InputStreamReader(inputStream, &quot;UTF-8&quot;);&lt;/code&gt;
&lt;/pre&gt;
&lt;h5 id=&quot;关闭-inputstreamreader&quot;&gt;关闭 InputStreamReader&lt;/h5&gt;
&lt;p&gt;同样建议使用 Java try with resources 来关闭流。&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;try(InputStreamReader inputStreamReader =
    new InputStreamReader(input)){
    int data = inputStreamReader.read();
    while(data != -) {
        System.out.print((char) data));
        data = inputStreamReader.read();
    } 
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;outputstreamwriter&quot;&gt;OutputStreamWriter&lt;/h3&gt;
&lt;p&gt;OutputStreamWriter 类用于包装 OutputStream ，从而将基于字节的输出流转换为基于字符的 Writer 。&lt;/p&gt;
&lt;p&gt;如果需要将字符写入文件，OutputStreamWriter 非常有用，例如编码为 UTF-8或UTF-16。 然后可以将字符（char值）写入 OutputStreamWriter ，它将正确编码它们并将编码的字节写入底层的 OutputStream 。&lt;br/&gt;一个简单的示例如下：&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;OutputStream outputStream = new FileOutputStream(&quot;D:\\test\\1.txt&quot;);
Writer outputStreamWriter = new OutputStreamWriter(outputStream);
outputStreamWriter.write(&quot;Hello OutputStreamWriter&quot;);
outputStreamWriter.close();&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;注意：为清楚起见，此处已跳过正确的异常处理。 要了解有关正确异常处理的更多信息，请转至目录的 Java IO 异常处理。&lt;/p&gt;
&lt;p&gt;同 InputStreamReader，OutputStreamWriter 也可以使用指定的字符集输出，如：&lt;br/&gt;&lt;code&gt;Writer outputStreamWriter = new OutputStreamWriter(outputStream, &quot;UTF-8&quot;);&lt;/code&gt;&lt;/p&gt;
&lt;h5 id=&quot;关闭-outputstreamreader&quot;&gt;关闭 OutputStreamReader&lt;/h5&gt;
&lt;p&gt;参考关闭 InputStreamReader 或 Java IO 异常处理。&lt;/p&gt;

&lt;h5 id=&quot;filereader&quot;&gt;FileReader&lt;/h5&gt;
&lt;p&gt;FileReader类使得可以将文件的内容作为字符流读取。 它的工作方式与 FileInputStream 非常相似，只是 FileInputStream 读取字节，而 FileReader 读取字符。 换句话说，FileReader 旨在读取文本。 取决于字符编码方案，一个字符可以对应于一个或多个字节。&lt;/p&gt;
&lt;p&gt;FileReader 假定您要使用运行应用程序的计算机的默认字符编码来解码文件中的字节。 这可能并不总是你想要的，但是不能改变它！&lt;br/&gt;如果要指定其他字符解码方案，请不要使用 FileReader 。 而是在 FileInputStream 上使用 InputStreamReader 。 InputStreamReader 允许您指定在读取基础文件中的字节时使用的字符编码方案。&lt;/p&gt;
&lt;h5 id=&quot;filewriter&quot;&gt;FileWriter&lt;/h5&gt;
&lt;p&gt;FileWriter 类可以将字符写入文件。 在这方面它的工作原理与 FileOutputStream 非常相似，只是 FileOutputStream 是基于字节的，而 FileWriter 是基于字符的。 换句话说，FileWriter 用于写文本。 一个字符可以对应于一个或多个字节，这取决于使用的字符编码方案。&lt;br/&gt;创建 FileWriter 时，可以决定是否要覆盖具有相同名称的任何现有文件，或者只是要追加内容到现有文件。 可以通过选择使用的 FileWriter 构造函数来决定。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;FileWriter(File file, boolean append)&lt;/code&gt; :根据给定的 File 对象构造一个 FileWriter 对象。 示例如下：&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;Writer fileWriter = new FileWriter(&quot;c:\\data\\output.txt&quot;, true);  // 追加模式
Writer fileWriter = new FileWriter(&quot;c:\\data\\output.txt&quot;, false); // 默认情况，直接覆盖原文件&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;注意，只要成功 new 了一个 FileWriter 对象，没有指定是追加模式的话，那不管有没有调用 write() 方法，都会清空文件内容。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;下面是一个读和写的例子：&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;public class FileRW {
    public static void main(String[] args) throws IOException {
        // 默认是覆盖模式
        File file = new File(&quot;D:\\test\\1.txt&quot;);
        Writer writer1 = new FileWriter(file);
        writer1.write(&quot;string from writer1, &quot;);
        writer1.close();

        Writer writer2 = new FileWriter(file, true);
        writer2.write(&quot;append content from writer2&quot;);
        writer2.close();


        Reader reader = new FileReader(file);
        int data = reader.read();
        while (data != -1) {
            // 将会输出 string from writer1, append content from writer2
            System.out.print((char) data);
            data = reader.read();
        }
        reader.close();
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;注意：为清楚起见，此处已跳过正确的异常处理。 要了解有关正确异常处理的更多信息，请转至Java IO异常处理。&lt;/p&gt;
&lt;p&gt;其他行为和 InputStreamReader 差不多，就不展开讲了。&lt;/p&gt;

&lt;h3 id=&quot;读写管道-pipedreader-和-pipedwriter&quot;&gt;读写管道 PipedReader 和 PipedWriter&lt;/h3&gt;
&lt;p&gt;PipedReader 类使得可以将管道的内容作为字符流读取。 因此它的工作方式与 PipedInputStream 非常相似，只是PipedInputStream 是基于字节的，而不是基于字符的。 换句话说，PipedReader 旨在读取文本。PipedWriter 同理。&lt;/p&gt;
&lt;h5 id=&quot;构造器&quot;&gt;构造器&lt;/h5&gt;
&lt;table&gt;&lt;thead/&gt;&lt;tbody readability=&quot;11&quot;&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td&gt;PipedReader()&lt;/td&gt;
&lt;td&gt;创建尚未连接的 PipedReader。&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;4&quot;&gt;&lt;td&gt;PipedReader(int pipeSize)&lt;/td&gt;
&lt;td&gt;创建一个尚未连接的 PipedReader，并对管道缓冲区使用指定的管道大小。&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;4&quot;&gt;&lt;td&gt;PipedReader(PipedWriter src)&lt;/td&gt;
&lt;td&gt;创建直接连接到传送 PipedWriter src 的 PipedReader。&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;6&quot;&gt;&lt;td&gt;PipedReader(PipedWriter src, int pipeSize)&lt;/td&gt;
&lt;td&gt;创建一个 PipedReader，使其连接到管道 writer src，并对管道缓冲区使用指定的管道大小。&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td&gt;PipedWriter()&lt;/td&gt;
&lt;td&gt;创建一个尚未连接到传送 reader 的传送 writer。&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;4&quot;&gt;&lt;td&gt;PipedWriter(PipedReader snk)&lt;/td&gt;
&lt;td&gt;创建传送 writer，使其连接到指定的传送 reader。&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h5 id=&quot;读写之前必须先建立连接&quot;&gt;读写之前，必须先建立连接&lt;/h5&gt;
&lt;p&gt;PipedReader 必须连接到 PipedWriter 才可以读 ，PipedWriter 也必须始终连接到 PipedReader 才可以写。就是说读写之前，必须先建立连接，有两种方式可以建立连接。&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;通过构造器创建，伪代码如 &lt;code&gt;Piped piped1 = new Piped(piped2);&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;调用其中一个的 connect() 方法，伪代码如 &lt;code&gt;Piped1.connect(Piped2);&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;并且通常，PipedReader 和 PipedWriter 由不同的线程使用。 注意只有一个 PipedReader 可以连接到同一个 PipedWriter 。&lt;br/&gt;一个示例如下：&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;PipedWriter writer = new PipedWriter();
PipedReader reader = new PipedReader(writer);

writer.write(&quot;string form pipedwriter&quot;);
writer.close();

int data = reader.read();
while (data != -1) {
        System.out.print((char) data); // string form pipedwriter
        data = reader.read();
    }
reader.close();&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;注意：为清楚起见，这里忽略了正确的 IO 异常处理，并且没有使用不同线程，不同线程操作请参考 PipedInputStream 。&lt;/p&gt;
&lt;p&gt;正如在上面的示例中所看到的，PipedReader 需要连接到 PipedWriter 。 当这两个字符流连接时，它们形成一个管道。 要了解有关 Java IO 管道的更多信息，请参考 管道流 PipedInputStream 部分。&lt;/p&gt;

&lt;p&gt;ByteArrayInputStream/ByteArrayOutputStream 是对字节数组处理，CharArrayReader/CharArrayWriter 则是对字符数组进行处理，其用法是基本一致的，所以这里略微带过。&lt;/p&gt;
&lt;h3 id=&quot;chararrayreader&quot;&gt;CharArrayReader&lt;/h3&gt;
&lt;p&gt;CharArrayReader 类可以将 char 数组的内容作为字符流读取。&lt;br/&gt;只需将 char 数组包装在 CharArrayReader 中就可以很方便的生成一个 Reader 对象。&lt;/p&gt;
&lt;h3 id=&quot;chararraywriter&quot;&gt;CharArrayWriter&lt;/h3&gt;
&lt;p&gt;CharArrayWriter 类可以通过 Writer 方法（CharArrayWriter是Writer的子类）编写字符，并将写入的字符转换为 char 数组。&lt;br/&gt;在写入所有字符时，CharArrayWriter 上调用 toCharArray() 能很方便的生成一个字符数组。&lt;/p&gt;
&lt;h5 id=&quot;两个类的构造函数&quot;&gt;两个类的构造函数：&lt;/h5&gt;
&lt;table&gt;&lt;thead/&gt;&lt;tbody readability=&quot;8&quot;&gt;&lt;tr class=&quot;odd&quot; readability=&quot;4&quot;&gt;&lt;td&gt;CharArrayReader(char[] buf)&lt;/td&gt;
&lt;td&gt;根据指定的 char 数组创建一个 CharArrayReader&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;6&quot;&gt;&lt;td&gt;CharArrayReader(char[] buf, int offset, int length)&lt;/td&gt;
&lt;td&gt;根据指定的 char 数组创建一个 CharArrayReader&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td&gt;CharArrayWriter()&lt;/td&gt;
&lt;td&gt;创建一个新的 CharArrayWriter ，默认缓冲区大小为 32&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;4&quot;&gt;&lt;td&gt;CharArrayWriter(int initialSize)&lt;/td&gt;
&lt;td&gt;创建一个具有指定初始缓冲区大小的新 CharArrayWriter&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;注意：设置初始大小不会阻止 CharArrayWriter 存储比初始大小更多的字符。 如果写入的字符数超过了初始 char 数组的大小，则会创建一个新的更大的 char 数组，并将所有字符复制到新数组中。&lt;/p&gt;
&lt;p&gt;一个使用实例如下：&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;CharArrayWriter writer = new CharArrayWriter();
writer.append('H');
writer.write(&quot;ello &quot;.toCharArray());
writer.write(&quot;World&quot;);
char[] chars = writer.toCharArray();
writer.close();

CharArrayReader reader = new CharArrayReader(chars);
int data = reader.read();
while (data != -1) {
    System.out.print((char) data); // Hello World
    data = reader.read();
}
reader.close();&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;注意：为清楚起见，此处已跳过正确的异常处理。 要了解有关正确异常处理的更多信息，请转至 Java IO 异常处理。&lt;/p&gt;
</description>
<pubDate>Sat, 24 Nov 2018 14:31:00 +0000</pubDate>
<dc:creator>czwbig</dc:creator>
<og:description>目录：</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/czwbig/p/10013920.html</dc:identifier>
</item>
<item>
<title>Vue+Koa2移动电商实战 （五）mock数据使用和布局 - 花生奶糖</title>
<link>http://www.cnblogs.com/yang656/p/10013802.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/yang656/p/10013802.html</guid>
<description>&lt;p&gt;前面我们已经获取到了数据，这节我们就好把它用到我们的项目中来。这节课我们主要是使用flex布局和for循环是我们的type_bar展示出来。&lt;/p&gt;
&lt;p&gt;关于flex布局的话如果还不是很了解的小伙伴儿可以查阅下阮一峰大神的博客(http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;首页商品分类栏的布局&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;HTML：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;38&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot; readability=&quot;7&quot;&gt;
  我们采用v-for的方式将商品分类栏循环出来，并给了每个图片百分之九十的宽度，我这里因为第一张图片格式不对，多以单独添加了宽度的&lt;p&gt;&amp;lt;div class=&quot;type_bar&quot;&amp;gt;
        &amp;lt;div v-for=&quot;(item,index) in category&quot; :key=&quot;index&quot;&amp;gt;
            &amp;lt;img v-lazy=&quot;item.image&quot; width=&quot;90%&quot;&amp;gt;
            &amp;lt;span&amp;gt;{{item.mallCategoryName}}&amp;lt;/span&amp;gt;
        &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
&lt;/p&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　&lt;strong&gt;CSS：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;34&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
/* type_bar*/
.type_bar{
    background: #fff;
    margin: 0.3rem .3rem .3rem;
    border-radius: .3rem;
    font-size: 14px;
    display: flex;
    display: -webkit-flex;
    justify-content: space-between;
}
.type_bar&amp;gt;div{
    padding: .3rem;
    font-size: 12px;
    text-align: center
}
.type_bar&amp;gt;div&amp;gt;img:nth-child(1){
    width: 3.3rem;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　&lt;strong&gt;javascript：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
        .then(Response =&amp;gt; { /*我们的方法都写在这里*/
          console.log(Response)
          if (Response.status == 200) {
            this.category = Response.data.data.category
            console.log(this.category)
          }
        })
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　在这里我们需要注意一点的是我们是这里使用的 this.category 的category需要在我们的return里面注册，后面我们使用的对象参数也是同样的道理&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1165828/201811/1165828-20181124214128418-25166122.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;广告栏&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;37&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot; readability=&quot;5&quot;&gt;
   &amp;lt;!-- advertes Picture --&amp;gt;
    &amp;lt;div class=&quot;advertes_picture&quot;&amp;gt;
        &amp;lt;img v-lazy='advertesPicture.PICTURE_ADDRESS' width=&quot;100%&quot;&amp;gt;
    &amp;lt;/div&amp;gt;&lt;p&gt;//js我就直接写在这里了  主要就是从服务端获取到，然后渲染到我们前端
&lt;/p&gt;&lt;/pre&gt;
&lt;p&gt;　　this.advertesPicture = Response.data.data.advertesPicture&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;改写我们的swiper轮播组件&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;37&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
    &amp;lt;!-- swiper area --&amp;gt;
    &amp;lt;div class=&quot;swiper_area&quot;&amp;gt;
      &amp;lt;van-swipe :autoplay=&quot;3000&quot;&amp;gt;
        &amp;lt;van-swipe-item v-for=&quot;(banner, index) in slides&quot; :key=&quot;index&quot;&amp;gt;
          &amp;lt;img v-lazy=&quot;banner.image&quot; width=&quot;100%&quot; height=&quot;167px&quot;&amp;gt;
        &amp;lt;/van-swipe-item&amp;gt;
      &amp;lt;/van-swipe&amp;gt;
    &amp;lt;/div&amp;gt;&lt;p&gt;js:
&lt;/p&gt;&lt;/pre&gt;
&lt;p&gt;　　this.slides = Response.data.data.slides;   //获取到图片&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;在HTML中我们只需要修改我们原来自己添加的假数据换成我们从mock获取到的数据就好啦。这样我们就完成了这节的内容，mock数据的获取&lt;/p&gt;
&lt;p&gt;使用flex布局进行分类栏的布局以及我们的swipe的改造。很高兴又学完了一节   简直美滋滋&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1165828/201811/1165828-20181124220324509-928142061.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

</description>
<pubDate>Sat, 24 Nov 2018 14:05:00 +0000</pubDate>
<dc:creator>花生奶糖</dc:creator>
<og:description>前面我们已经获取到了数据，这节我们就好把它用到我们的项目中来。这节课我们主要是使用flex布局和for循环是我们的type_bar展示出来。 关于flex布局的话如果还不是很了解的小伙伴儿可以查阅下阮</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/yang656/p/10013802.html</dc:identifier>
</item>
<item>
<title>【原创】自己手写实现Boost序列化简易版 - 划时代</title>
<link>http://www.cnblogs.com/churen/p/10013742.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/churen/p/10013742.html</guid>
<description>&lt;p&gt;&lt;span&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;#include &amp;lt;sstream&amp;gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;#include &amp;lt;map&amp;gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;#include &amp;lt;vector&amp;gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;#include &amp;lt;stdint.h&amp;gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;using&lt;/strong&gt; &lt;span&gt;&lt;span&gt;&lt;strong&gt;namespace&lt;/strong&gt; &lt;span&gt;std&lt;span&gt;&lt;strong&gt;;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;template&lt;span&gt;&lt;strong&gt;&amp;lt;&lt;/strong&gt;&lt;span&gt;typename &lt;span&gt;T&lt;span&gt;&lt;strong&gt;&amp;gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;struct &lt;span&gt;is_class_imp&lt;span&gt;&lt;strong&gt;{&lt;/strong&gt; &lt;span&gt;&lt;span&gt;//&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;采用&lt;/span&gt;&lt;span&gt;&lt;span&gt;boost&lt;/span&gt;&lt;span&gt;的&lt;/span&gt;&lt;span&gt;type_traits&lt;/span&gt;&lt;span&gt;的方式判断，判断一个类型是否是一个类类型&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;typedef&lt;/strong&gt; &lt;span&gt;&lt;span&gt;char &lt;span&gt;class_type&lt;span&gt;&lt;strong&gt;;&lt;/strong&gt; &lt;span&gt;&lt;span&gt;//&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;一个字节&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;typedef&lt;/strong&gt; &lt;span&gt;&lt;span&gt;int32_t &lt;span&gt;non_class_type&lt;span&gt;&lt;strong&gt;;&lt;/strong&gt; &lt;span&gt;&lt;span&gt;//&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;四个字节&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;template&lt;span&gt;&lt;strong&gt;&amp;lt;&lt;/strong&gt;&lt;span&gt;typename &lt;span&gt;C&lt;span&gt;&lt;strong&gt;&amp;gt;&lt;/strong&gt; &lt;span&gt;&lt;span&gt;static &lt;span&gt;class_type is_class_check&lt;span&gt;&lt;strong&gt;(&lt;/strong&gt;&lt;span&gt;void&lt;span&gt;&lt;strong&gt;(&lt;/strong&gt;&lt;span&gt;C&lt;span&gt;&lt;strong&gt;::*)(&lt;/strong&gt;&lt;span&gt;void&lt;span&gt;&lt;strong&gt;));&lt;/strong&gt; &lt;span&gt;&lt;span&gt;//&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;类类型匹配到的模板函数&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;template&lt;span&gt;&lt;strong&gt;&amp;lt;&lt;/strong&gt;&lt;span&gt;typename &lt;span&gt;C&lt;span&gt;&lt;strong&gt;&amp;gt;&lt;/strong&gt; &lt;span&gt;&lt;span&gt;static &lt;span&gt;non_class_type is_class_check&lt;span&gt;&lt;strong&gt;(...);&lt;/strong&gt; &lt;span&gt;&lt;span&gt;//&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;基础类型匹配到的模板函数&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;static &lt;span&gt;&lt;span&gt;const &lt;span&gt;&lt;span&gt;bool &lt;span&gt;value &lt;span&gt;&lt;strong&gt;=&lt;/strong&gt; &lt;span&gt;&lt;span&gt;&lt;strong&gt;(&lt;span&gt;sizeof&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;is_class_check&lt;span&gt;&lt;strong&gt;&amp;lt;&lt;/strong&gt;&lt;span&gt;T&lt;span&gt;&lt;strong&gt;&amp;gt;(&lt;/strong&gt;&lt;span&gt;0&lt;span&gt;&lt;strong&gt;))&lt;/strong&gt; &lt;span&gt;&lt;span&gt;&lt;strong&gt;==&lt;/strong&gt; &lt;span&gt;&lt;span&gt;&lt;strong&gt;sizeof&lt;span&gt;(&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;class_type&lt;span&gt;&lt;strong&gt;));&lt;/strong&gt; &lt;span&gt;&lt;span&gt;//value&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;的值在编译期决定&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;};&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;template&lt;span&gt;&lt;strong&gt;&amp;lt;&amp;gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;struct &lt;span&gt;is_class_imp&lt;span&gt;&lt;strong&gt;&amp;lt;&lt;/strong&gt;&lt;span&gt;string&lt;span&gt;&lt;strong&gt;&amp;gt;{&lt;/strong&gt; &lt;span&gt;&lt;span&gt;//&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;模板特化，&lt;/span&gt;&lt;span&gt;&lt;span&gt;string&lt;/span&gt;&lt;span&gt;可以作为基础类型处理，其实是类类型&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;static &lt;span&gt;&lt;span&gt;const &lt;span&gt;&lt;span&gt;bool &lt;span&gt;value &lt;span&gt;&lt;strong&gt;=&lt;/strong&gt; &lt;span&gt;&lt;span&gt;&lt;strong&gt;false&lt;span&gt;;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;};&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;template&lt;span&gt;&lt;strong&gt;&amp;lt;&lt;/strong&gt;&lt;span&gt;typename &lt;span&gt;T&lt;span&gt;&lt;strong&gt;&amp;gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;struct &lt;span&gt;is_class &lt;span&gt;&lt;strong&gt;:&lt;/strong&gt; &lt;span&gt;is_class_imp&lt;span&gt;&lt;strong&gt;&amp;lt;&lt;/strong&gt;&lt;span&gt;T&lt;span&gt;&lt;strong&gt;&amp;gt;{};&lt;/strong&gt; &lt;span&gt;&lt;span&gt;//&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;继承&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;template&lt;span&gt;&lt;strong&gt;&amp;lt;&lt;/strong&gt;&lt;span&gt;bool &lt;span&gt;C_&lt;span&gt;&lt;strong&gt;&amp;gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;struct &lt;span&gt;bool_plt&lt;span&gt;&lt;strong&gt;{};&lt;/strong&gt; &lt;span&gt;&lt;span&gt;//&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;用于编译期条件判断的模板，&lt;/span&gt;&lt;span&gt;&lt;span&gt;bool_plt&amp;lt;true&amp;gt;&lt;/span&gt;&lt;span&gt;和&lt;/span&gt;&lt;span&gt;bool_plt&amp;lt;false&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;span&gt;template&lt;span&gt;&lt;strong&gt;&amp;lt;&lt;/strong&gt;&lt;span&gt;typename &lt;span&gt;C_&lt;span&gt;&lt;strong&gt;,&lt;/strong&gt; &lt;span&gt;&lt;span&gt;typename &lt;span&gt;F1&lt;span&gt;&lt;strong&gt;,&lt;/strong&gt; &lt;span&gt;&lt;span&gt;typename &lt;span&gt;F2&lt;span&gt;&lt;strong&gt;&amp;gt;&lt;/strong&gt; &lt;span&gt;&lt;span&gt;//C_&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;编译期的条件，依据条件判断，动态定义类型&lt;/span&gt;&lt;span&gt;&lt;span&gt;F1&lt;/span&gt;&lt;span&gt;或&lt;/span&gt;&lt;span&gt;F2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;struct &lt;span&gt;eval_if&lt;span&gt;&lt;strong&gt;{};&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;template&lt;span&gt;&lt;strong&gt;&amp;lt;&lt;/strong&gt;&lt;span&gt;typename &lt;span&gt;F1&lt;span&gt;&lt;strong&gt;,&lt;/strong&gt; &lt;span&gt;&lt;span&gt;typename &lt;span&gt;F2&lt;span&gt;&lt;strong&gt;&amp;gt;&lt;/strong&gt; &lt;span&gt;&lt;span&gt;//&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;模板偏特化，&lt;/span&gt;&lt;span&gt;typename C_&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;struct &lt;span&gt;eval_if&lt;span&gt;&lt;strong&gt;&amp;lt;&lt;/strong&gt;&lt;span&gt;bool_plt&lt;span&gt;&lt;strong&gt;&amp;lt;&lt;span&gt;true&lt;span&gt;&amp;gt;,&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt; &lt;span&gt;F1&lt;span&gt;&lt;strong&gt;,&lt;/strong&gt; &lt;span&gt;F2&lt;span&gt;&lt;strong&gt;&amp;gt;{&lt;/strong&gt; &lt;span&gt;&lt;span&gt;//&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;当&lt;/span&gt;&lt;span&gt;&lt;span&gt;C_&lt;/span&gt;&lt;span&gt;编译期条件为&lt;/span&gt;&lt;span&gt;bool_plt&amp;lt;true&amp;gt;&lt;/span&gt;&lt;span&gt;时，定义类型&lt;/span&gt;&lt;span&gt;F1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;typedef&lt;/strong&gt; &lt;span&gt;F1 type&lt;span&gt;&lt;strong&gt;;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;};&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;template&lt;span&gt;&lt;strong&gt;&amp;lt;&lt;/strong&gt;&lt;span&gt;typename &lt;span&gt;F1&lt;span&gt;&lt;strong&gt;,&lt;/strong&gt; &lt;span&gt;&lt;span&gt;typename &lt;span&gt;F2&lt;span&gt;&lt;strong&gt;&amp;gt;&lt;/strong&gt; &lt;span&gt;&lt;span&gt;//&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;模板偏特化，&lt;/span&gt;&lt;span&gt;typename C_&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;struct &lt;span&gt;eval_if&lt;span&gt;&lt;strong&gt;&amp;lt;&lt;/strong&gt;&lt;span&gt;bool_plt&lt;span&gt;&lt;strong&gt;&amp;lt;&lt;span&gt;false&lt;span&gt;&amp;gt;,&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt; &lt;span&gt;F1&lt;span&gt;&lt;strong&gt;,&lt;/strong&gt; &lt;span&gt;F2&lt;span&gt;&lt;strong&gt;&amp;gt;{&lt;/strong&gt; &lt;span&gt;&lt;span&gt;//&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;当&lt;/span&gt;&lt;span&gt;&lt;span&gt;C_&lt;/span&gt;&lt;span&gt;编译期条件为&lt;/span&gt;&lt;span&gt;bool_plt&amp;lt;false&amp;gt;&lt;/span&gt;&lt;span&gt;时，定义类型&lt;/span&gt;&lt;span&gt;F2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;typedef&lt;/strong&gt; &lt;span&gt;F2 type&lt;span&gt;&lt;strong&gt;;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;};&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;template&lt;span&gt;&lt;strong&gt;&amp;lt;&lt;/strong&gt;&lt;span&gt;typename &lt;span&gt;Archive&lt;span&gt;&lt;strong&gt;,&lt;/strong&gt; &lt;span&gt;&lt;span&gt;typename &lt;span&gt;T&lt;span&gt;&lt;strong&gt;&amp;gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;class &lt;span&gt;CAccess &lt;span&gt;//&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;对类类型对象，应该序列化还是反序列化的控制函数&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;{&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;public&lt;span&gt;&lt;strong&gt;:&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;static &lt;span&gt;&lt;span&gt;void &lt;span&gt;serialize&lt;span&gt;&lt;strong&gt;(&lt;/strong&gt;&lt;span&gt;Archive&lt;span&gt;&lt;strong&gt;&amp;amp;&lt;/strong&gt; &lt;span&gt;ar&lt;span&gt;&lt;strong&gt;,&lt;/strong&gt; &lt;span&gt;T&lt;span&gt;&lt;strong&gt;&amp;amp;&lt;/strong&gt; &lt;span&gt;t&lt;span&gt;&lt;strong&gt;){&lt;/strong&gt; &lt;span&gt;&lt;span&gt;//&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;调用类类型对象的&lt;/span&gt;&lt;span&gt;&lt;span&gt;serialize&lt;/span&gt;&lt;span&gt;函数，序列化还是反序列化由&lt;/span&gt;&lt;span&gt;ar&lt;/span&gt;&lt;span&gt;参数决定&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;t&lt;span&gt;&lt;strong&gt;.&lt;/strong&gt;&lt;span&gt;serialize&lt;span&gt;&lt;strong&gt;(&lt;/strong&gt;&lt;span&gt;ar&lt;span&gt;&lt;strong&gt;);&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;}&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;};&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;template&lt;span&gt;&lt;strong&gt;&amp;lt;&lt;/strong&gt;&lt;span&gt;typename &lt;span&gt;Archive&lt;span&gt;&lt;strong&gt;,&lt;/strong&gt; &lt;span&gt;&lt;span&gt;typename &lt;span&gt;T&lt;span&gt;&lt;strong&gt;&amp;gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;struct &lt;span&gt;CFreeMarshall&lt;span&gt;&lt;strong&gt;{&lt;/strong&gt; &lt;span&gt;&lt;span&gt;//&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;序列化结构体类型&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;static &lt;span&gt;&lt;span&gt;void &lt;span&gt;invoke&lt;span&gt;&lt;strong&gt;(&lt;/strong&gt;&lt;span&gt;Archive&lt;span&gt;&lt;strong&gt;&amp;amp;&lt;/strong&gt; &lt;span&gt;ar&lt;span&gt;&lt;strong&gt;,&lt;/strong&gt; &lt;span&gt;&lt;span&gt;const &lt;span&gt;T&lt;span&gt;&lt;strong&gt;&amp;amp;&lt;/strong&gt; &lt;span&gt;t&lt;span&gt;&lt;strong&gt;){&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;CAccess&lt;span&gt;&lt;strong&gt;&amp;lt;&lt;/strong&gt;&lt;span&gt;Archive&lt;span&gt;&lt;strong&gt;,&lt;/strong&gt; &lt;span&gt;T&lt;span&gt;&lt;strong&gt;&amp;gt;::&lt;/strong&gt;&lt;span&gt;marshall&lt;span&gt;&lt;strong&gt;(&lt;/strong&gt;&lt;span&gt;ar&lt;span&gt;&lt;strong&gt;,&lt;/strong&gt; &lt;span&gt;t&lt;span&gt;&lt;strong&gt;);&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;}&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;};&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;template&lt;span&gt;&lt;strong&gt;&amp;lt;&lt;/strong&gt;&lt;span&gt;typename &lt;span&gt;Archive&lt;span&gt;&lt;strong&gt;,&lt;/strong&gt; &lt;span&gt;&lt;span&gt;typename &lt;span&gt;T&lt;span&gt;&lt;strong&gt;&amp;gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;struct &lt;span&gt;CFreeDemarshall&lt;span&gt;&lt;strong&gt;{&lt;/strong&gt; &lt;span&gt;&lt;span&gt;//&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;反序列化结构体类型&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;static &lt;span&gt;&lt;span&gt;void &lt;span&gt;invoke&lt;span&gt;&lt;strong&gt;(&lt;/strong&gt;&lt;span&gt;Archive&lt;span&gt;&lt;strong&gt;&amp;amp;&lt;/strong&gt; &lt;span&gt;ar&lt;span&gt;&lt;strong&gt;,&lt;/strong&gt; &lt;span&gt;T&lt;span&gt;&lt;strong&gt;&amp;amp;&lt;/strong&gt; &lt;span&gt;t&lt;span&gt;&lt;strong&gt;){&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;CAccess&lt;span&gt;&lt;strong&gt;&amp;lt;&lt;/strong&gt;&lt;span&gt;Archive&lt;span&gt;&lt;strong&gt;,&lt;/strong&gt; &lt;span&gt;T&lt;span&gt;&lt;strong&gt;&amp;gt;::&lt;/strong&gt;&lt;span&gt;demarshall&lt;span&gt;&lt;strong&gt;(&lt;/strong&gt;&lt;span&gt;ar&lt;span&gt;&lt;strong&gt;,&lt;/strong&gt; &lt;span&gt;t&lt;span&gt;&lt;strong&gt;);&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;}&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;};&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;template&lt;span&gt;&lt;strong&gt;&amp;lt;&lt;/strong&gt;&lt;span&gt;typename &lt;span&gt;Archive&lt;span&gt;&lt;strong&gt;,&lt;/strong&gt; &lt;span&gt;&lt;span&gt;typename &lt;span&gt;T&lt;span&gt;&lt;strong&gt;&amp;gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;struct &lt;span&gt;CFreeInvoke&lt;span&gt;&lt;strong&gt;{&lt;/strong&gt; &lt;span&gt;&lt;span&gt;//&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;序列化和反序列化统一调用模版函数，在编译期决定调用其一&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;static &lt;span&gt;&lt;span&gt;void &lt;span&gt;invoke&lt;span&gt;&lt;strong&gt;(&lt;/strong&gt;&lt;span&gt;Archive&lt;span&gt;&lt;strong&gt;&amp;amp;&lt;/strong&gt; &lt;span&gt;ar&lt;span&gt;&lt;strong&gt;,&lt;/strong&gt; &lt;span&gt;T&lt;span&gt;&lt;strong&gt;&amp;amp;&lt;/strong&gt; &lt;span&gt;t&lt;span&gt;&lt;strong&gt;){&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;typedef&lt;/strong&gt; &lt;span&gt;&lt;span&gt;typename &lt;span&gt;eval_if&lt;span&gt;&lt;strong&gt;&amp;lt;&lt;/strong&gt;&lt;span&gt;typename &lt;span&gt;Archive&lt;span&gt;&lt;strong&gt;::&lt;/strong&gt;&lt;span&gt;is_marshall&lt;span&gt;&lt;strong&gt;,&lt;/strong&gt; &lt;span&gt;&lt;span&gt;//&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;假如&lt;/span&gt;&lt;span&gt;&lt;span&gt;ar&lt;/span&gt;&lt;span&gt;对象是序列化对象&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;CFreeMarshall&lt;span&gt;&lt;strong&gt;&amp;lt;&lt;/strong&gt;&lt;span&gt;Archive&lt;span&gt;&lt;strong&gt;,&lt;/strong&gt; &lt;span&gt;T&lt;span&gt;&lt;strong&gt;&amp;gt;,&lt;/strong&gt; &lt;span&gt;&lt;span&gt;//&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;定义序列化类型&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;CFreeDemarshall&lt;span&gt;&lt;strong&gt;&amp;lt;&lt;/strong&gt;&lt;span&gt;Archive&lt;span&gt;&lt;strong&gt;,&lt;/strong&gt; &lt;span&gt;T&lt;span&gt;&lt;strong&gt;&amp;gt;&lt;/strong&gt; &lt;span&gt;&lt;span&gt;&lt;strong&gt;&amp;gt;::&lt;/strong&gt;&lt;span&gt;type typex&lt;span&gt;&lt;strong&gt;;&lt;/strong&gt; &lt;span&gt;&lt;span&gt;//&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;否则定义反序列化类型&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;typex&lt;span&gt;&lt;strong&gt;::&lt;/strong&gt;&lt;span&gt;invoke&lt;span&gt;&lt;strong&gt;(&lt;/strong&gt;&lt;span&gt;ar&lt;span&gt;&lt;strong&gt;,&lt;/strong&gt; &lt;span&gt;t&lt;span&gt;&lt;strong&gt;);&lt;/strong&gt; &lt;span&gt;&lt;span&gt;//&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;调用序列化或反序列化函数，在编译期动态判断决定&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;}&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;};&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;template&lt;span&gt;&lt;strong&gt;&amp;lt;&lt;/strong&gt;&lt;span&gt;typename &lt;span&gt;Archive&lt;span&gt;&lt;strong&gt;,&lt;/strong&gt; &lt;span&gt;&lt;span&gt;typename &lt;span&gt;T&lt;span&gt;&lt;strong&gt;&amp;gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;class &lt;span&gt;CAccess&lt;span&gt;&lt;strong&gt;&amp;lt;&lt;/strong&gt;&lt;span&gt;Archive&lt;span&gt;&lt;strong&gt;,&lt;/strong&gt; &lt;span&gt;vector&lt;span&gt;&lt;strong&gt;&amp;lt;&lt;/strong&gt;&lt;span&gt;T&lt;span&gt;&lt;strong&gt;&amp;gt;&lt;/strong&gt; &lt;span&gt;&lt;span&gt;&lt;strong&gt;&amp;gt;&lt;/strong&gt; &lt;span&gt;&lt;span&gt;//&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;模板偏特化，实现&lt;/span&gt;&lt;span&gt;&lt;span&gt;vector&lt;/span&gt;&lt;span&gt;容器的序列化和反序列化&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;{&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;public&lt;span&gt;&lt;strong&gt;:&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;static &lt;span&gt;&lt;span&gt;void &lt;span&gt;serialize&lt;span&gt;&lt;strong&gt;(&lt;/strong&gt;&lt;span&gt;Archive&lt;span&gt;&lt;strong&gt;&amp;amp;&lt;/strong&gt; &lt;span&gt;ar&lt;span&gt;&lt;strong&gt;,&lt;/strong&gt; &lt;span&gt;vector&lt;span&gt;&lt;strong&gt;&amp;lt;&lt;/strong&gt;&lt;span&gt;T&lt;span&gt;&lt;strong&gt;&amp;gt;&amp;amp;&lt;/strong&gt; &lt;span&gt;t&lt;span&gt;&lt;strong&gt;)&lt;/strong&gt; &lt;span&gt;&lt;span&gt;//&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;调用序&lt;span&gt;列化或反序列化函数，在编译期动态判断决定&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;{&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;CFreeInvoke&lt;span&gt;&lt;strong&gt;&amp;lt;&lt;/strong&gt;&lt;span&gt;Archive&lt;span&gt;&lt;strong&gt;,&lt;/strong&gt; &lt;span&gt;vector&lt;span&gt;&lt;strong&gt;&amp;lt;&lt;/strong&gt;&lt;span&gt;T&lt;span&gt;&lt;strong&gt;&amp;gt;&lt;/strong&gt; &lt;span&gt;&lt;span&gt;&lt;strong&gt;&amp;gt;::&lt;/strong&gt;&lt;span&gt;invoke&lt;span&gt;&lt;strong&gt;(&lt;/strong&gt;&lt;span&gt;ar&lt;span&gt;&lt;strong&gt;,&lt;/strong&gt; &lt;span&gt;t&lt;span&gt;&lt;strong&gt;);&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;}&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;static &lt;span&gt;&lt;span&gt;void &lt;span&gt;marshall&lt;span&gt;&lt;strong&gt;(&lt;/strong&gt;&lt;span&gt;Archive&lt;span&gt;&lt;strong&gt;&amp;amp;&lt;/strong&gt; &lt;span&gt;ar&lt;span&gt;&lt;strong&gt;,&lt;/strong&gt; &lt;span&gt;&lt;span&gt;const &lt;span&gt;vector&lt;span&gt;&lt;strong&gt;&amp;lt;&lt;/strong&gt;&lt;span&gt;T&lt;span&gt;&lt;strong&gt;&amp;gt;&amp;amp;&lt;/strong&gt; &lt;span&gt;t&lt;span&gt;&lt;strong&gt;)&lt;/strong&gt; &lt;span&gt;&lt;span&gt;//&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;序列化&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;{&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;int &lt;span&gt;len &lt;span&gt;&lt;strong&gt;=&lt;/strong&gt; &lt;span&gt;t&lt;span&gt;&lt;strong&gt;.&lt;/strong&gt;&lt;span&gt;size&lt;span&gt;&lt;strong&gt;();&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;ar &lt;span&gt;&lt;strong&gt;&amp;lt;&amp;lt;&lt;/strong&gt; &lt;span&gt;len &lt;span&gt;&lt;strong&gt;&amp;lt;&amp;lt;&lt;/strong&gt; &lt;span&gt;&lt;span&gt;&quot; &quot;&lt;span&gt;&lt;strong&gt;;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;for&lt;/strong&gt; &lt;span&gt;&lt;span&gt;&lt;strong&gt;(&lt;/strong&gt;&lt;span&gt;int &lt;span&gt;i &lt;span&gt;&lt;strong&gt;=&lt;/strong&gt; &lt;span&gt;&lt;span&gt;0&lt;span&gt;&lt;strong&gt;;&lt;/strong&gt; &lt;span&gt;i &lt;span&gt;&lt;strong&gt;&amp;lt;&lt;/strong&gt; &lt;span&gt;len&lt;span&gt;&lt;strong&gt;;&lt;/strong&gt; &lt;span&gt;i&lt;span&gt;&lt;strong&gt;++)&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;{&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;ar &lt;span&gt;&lt;strong&gt;&amp;lt;&amp;lt;&lt;/strong&gt; &lt;span&gt;t&lt;span&gt;&lt;strong&gt;[&lt;/strong&gt;&lt;span&gt;i&lt;span&gt;&lt;strong&gt;]&lt;/strong&gt; &lt;span&gt;&lt;span&gt;&lt;strong&gt;&amp;lt;&amp;lt;&lt;/strong&gt; &lt;span&gt;&lt;span&gt;&quot; &quot;&lt;span&gt;&lt;strong&gt;;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;}&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;}&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;static &lt;span&gt;&lt;span&gt;void &lt;span&gt;demarshall&lt;span&gt;&lt;strong&gt;(&lt;/strong&gt;&lt;span&gt;Archive&lt;span&gt;&lt;strong&gt;&amp;amp;&lt;/strong&gt; &lt;span&gt;ar&lt;span&gt;&lt;strong&gt;,&lt;/strong&gt; &lt;span&gt;vector&lt;span&gt;&lt;strong&gt;&amp;lt;&lt;/strong&gt;&lt;span&gt;T&lt;span&gt;&lt;strong&gt;&amp;gt;&amp;amp;&lt;/strong&gt; &lt;span&gt;t&lt;span&gt;&lt;strong&gt;)&lt;/strong&gt; &lt;span&gt;&lt;span&gt;//&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;反序&lt;span&gt;列化&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;{&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;int &lt;span&gt;len &lt;span&gt;&lt;strong&gt;=&lt;/strong&gt; &lt;span&gt;&lt;span&gt;0&lt;span&gt;&lt;strong&gt;;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;ar &lt;span&gt;&lt;strong&gt;&amp;gt;&amp;gt;&lt;/strong&gt; &lt;span&gt;len&lt;span&gt;&lt;strong&gt;;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;t&lt;span&gt;&lt;strong&gt;.&lt;/strong&gt;&lt;span&gt;clear&lt;span&gt;&lt;strong&gt;();&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;for&lt;/strong&gt; &lt;span&gt;&lt;span&gt;&lt;strong&gt;(&lt;/strong&gt;&lt;span&gt;int &lt;span&gt;i &lt;span&gt;&lt;strong&gt;=&lt;/strong&gt; &lt;span&gt;&lt;span&gt;0&lt;span&gt;&lt;strong&gt;;&lt;/strong&gt; &lt;span&gt;i &lt;span&gt;&lt;strong&gt;&amp;lt;&lt;/strong&gt; &lt;span&gt;len&lt;span&gt;&lt;strong&gt;;&lt;/strong&gt; &lt;span&gt;i&lt;span&gt;&lt;strong&gt;++)&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;{&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;T tmp&lt;span&gt;&lt;strong&gt;;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;ar &lt;span&gt;&lt;strong&gt;&amp;gt;&amp;gt;&lt;/strong&gt; &lt;span&gt;tmp&lt;span&gt;&lt;strong&gt;;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;t&lt;span&gt;&lt;strong&gt;.&lt;/strong&gt;&lt;span&gt;push_back&lt;span&gt;&lt;strong&gt;(&lt;/strong&gt;&lt;span&gt;tmp&lt;span&gt;&lt;strong&gt;);&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;}&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;}&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;};&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;template&lt;span&gt;&lt;strong&gt;&amp;lt;&lt;/strong&gt;&lt;span&gt;typename &lt;span&gt;Archive&lt;span&gt;&lt;strong&gt;,&lt;/strong&gt; &lt;span&gt;&lt;span&gt;typename &lt;span&gt;K&lt;span&gt;&lt;strong&gt;,&lt;/strong&gt; &lt;span&gt;&lt;span&gt;typename &lt;span&gt;V&lt;span&gt;&lt;strong&gt;&amp;gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;class &lt;span&gt;CAccess&lt;span&gt;&lt;strong&gt;&amp;lt;&lt;/strong&gt;&lt;span&gt;Archive&lt;span&gt;&lt;strong&gt;,&lt;/strong&gt; &lt;span&gt;map&lt;span&gt;&lt;strong&gt;&amp;lt;&lt;/strong&gt;&lt;span&gt;K&lt;span&gt;&lt;strong&gt;,&lt;/strong&gt;&lt;span&gt;V&lt;span&gt;&lt;strong&gt;&amp;gt;&lt;/strong&gt; &lt;span&gt;&lt;span&gt;&lt;strong&gt;&amp;gt;&lt;/strong&gt; &lt;span&gt;&lt;span&gt;//&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;模板偏特化，实现&lt;/span&gt;&lt;span&gt;&lt;span&gt;map&lt;/span&gt;&lt;span&gt;容器的序列化和反序列化&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;{&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;public&lt;span&gt;&lt;strong&gt;:&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;static &lt;span&gt;&lt;span&gt;void &lt;span&gt;serialize&lt;span&gt;&lt;strong&gt;(&lt;/strong&gt;&lt;span&gt;Archive&lt;span&gt;&lt;strong&gt;&amp;amp;&lt;/strong&gt; &lt;span&gt;ar&lt;span&gt;&lt;strong&gt;,&lt;/strong&gt; &lt;span&gt;map&lt;span&gt;&lt;strong&gt;&amp;lt;&lt;/strong&gt;&lt;span&gt;K&lt;span&gt;&lt;strong&gt;,&lt;/strong&gt;&lt;span&gt;V&lt;span&gt;&lt;strong&gt;&amp;gt;&amp;amp;&lt;/strong&gt; &lt;span&gt;t&lt;span&gt;&lt;strong&gt;)&lt;/strong&gt; &lt;span&gt;&lt;span&gt;//&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;调用序列化或反序列化函数，在编译期动态判断决定&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;{&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;CFreeInvoke&lt;span&gt;&lt;strong&gt;&amp;lt;&lt;/strong&gt;&lt;span&gt;Archive&lt;span&gt;&lt;strong&gt;,&lt;/strong&gt; &lt;span&gt;map&lt;span&gt;&lt;strong&gt;&amp;lt;&lt;/strong&gt;&lt;span&gt;K&lt;span&gt;&lt;strong&gt;,&lt;/strong&gt;&lt;span&gt;V&lt;span&gt;&lt;strong&gt;&amp;gt;&lt;/strong&gt; &lt;span&gt;&lt;span&gt;&lt;strong&gt;&amp;gt;::&lt;/strong&gt;&lt;span&gt;invoke&lt;span&gt;&lt;strong&gt;(&lt;/strong&gt;&lt;span&gt;ar&lt;span&gt;&lt;strong&gt;,&lt;/strong&gt; &lt;span&gt;t&lt;span&gt;&lt;strong&gt;);&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;}&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;static &lt;span&gt;&lt;span&gt;void &lt;span&gt;marshall&lt;span&gt;&lt;strong&gt;(&lt;/strong&gt;&lt;span&gt;Archive&lt;span&gt;&lt;strong&gt;&amp;amp;&lt;/strong&gt; &lt;span&gt;ar&lt;span&gt;&lt;strong&gt;,&lt;/strong&gt; &lt;span&gt;&lt;span&gt;const &lt;span&gt;map&lt;span&gt;&lt;strong&gt;&amp;lt;&lt;/strong&gt;&lt;span&gt;K&lt;span&gt;&lt;strong&gt;,&lt;/strong&gt;&lt;span&gt;V&lt;span&gt;&lt;strong&gt;&amp;gt;&amp;amp;&lt;/strong&gt; &lt;span&gt;t&lt;span&gt;&lt;strong&gt;)&lt;/strong&gt; &lt;span&gt;&lt;span&gt;//&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;序列化&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;{&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;int &lt;span&gt;len &lt;span&gt;&lt;strong&gt;=&lt;/strong&gt; &lt;span&gt;t&lt;span&gt;&lt;strong&gt;.&lt;/strong&gt;&lt;span&gt;size&lt;span&gt;&lt;strong&gt;();&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;ar &lt;span&gt;&lt;strong&gt;&amp;lt;&amp;lt;&lt;/strong&gt; &lt;span&gt;len &lt;span&gt;&lt;strong&gt;&amp;lt;&amp;lt;&lt;/strong&gt; &lt;span&gt;&lt;span&gt;&quot; &quot;&lt;span&gt;&lt;strong&gt;;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;typename &lt;span&gt;map&lt;span&gt;&lt;strong&gt;&amp;lt;&lt;/strong&gt;&lt;span&gt;K&lt;span&gt;&lt;strong&gt;,&lt;/strong&gt;&lt;span&gt;V&lt;span&gt;&lt;strong&gt;&amp;gt;::&lt;/strong&gt;&lt;span&gt;const_iterator iter&lt;span&gt;&lt;strong&gt;;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;for&lt;/strong&gt; &lt;span&gt;&lt;span&gt;&lt;strong&gt;(&lt;/strong&gt;&lt;span&gt;iter &lt;span&gt;&lt;strong&gt;=&lt;/strong&gt; &lt;span&gt;t&lt;span&gt;&lt;strong&gt;.&lt;/strong&gt;&lt;span&gt;begin&lt;span&gt;&lt;strong&gt;();&lt;/strong&gt; &lt;span&gt;iter &lt;span&gt;&lt;strong&gt;!=&lt;/strong&gt; &lt;span&gt;t&lt;span&gt;&lt;strong&gt;.&lt;/strong&gt;&lt;span&gt;end&lt;span&gt;&lt;strong&gt;();&lt;/strong&gt; &lt;span&gt;&lt;span&gt;&lt;strong&gt;++&lt;/strong&gt;&lt;span&gt;iter&lt;span&gt;&lt;strong&gt;)&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;ar &lt;span&gt;&lt;strong&gt;&amp;lt;&amp;lt;&lt;/strong&gt; &lt;span&gt;iter&lt;span&gt;&lt;strong&gt;-&amp;gt;&lt;/strong&gt;&lt;span&gt;first &lt;span&gt;&lt;strong&gt;&amp;lt;&amp;lt;&lt;/strong&gt; &lt;span&gt;&lt;span&gt;&quot; &quot; &lt;span&gt;&lt;span&gt;&lt;strong&gt;&amp;lt;&amp;lt;&lt;/strong&gt; &lt;span&gt;iter&lt;span&gt;&lt;strong&gt;-&amp;gt;&lt;/strong&gt;&lt;span&gt;second &lt;span&gt;&lt;strong&gt;&amp;lt;&amp;lt;&lt;/strong&gt; &lt;span&gt;&lt;span&gt;&quot; &quot;&lt;span&gt;&lt;strong&gt;;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;}&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;static &lt;span&gt;&lt;span&gt;void &lt;span&gt;demarshall&lt;span&gt;&lt;strong&gt;(&lt;/strong&gt;&lt;span&gt;Archive&lt;span&gt;&lt;strong&gt;&amp;amp;&lt;/strong&gt; &lt;span&gt;ar&lt;span&gt;&lt;strong&gt;,&lt;/strong&gt; &lt;span&gt;map&lt;span&gt;&lt;strong&gt;&amp;lt;&lt;/strong&gt;&lt;span&gt;K&lt;span&gt;&lt;strong&gt;,&lt;/strong&gt;&lt;span&gt;V&lt;span&gt;&lt;strong&gt;&amp;gt;&amp;amp;&lt;/strong&gt; &lt;span&gt;t&lt;span&gt;&lt;strong&gt;)&lt;/strong&gt; &lt;span&gt;&lt;span&gt;//&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;反序列化&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;{&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;int &lt;span&gt;len &lt;span&gt;&lt;strong&gt;=&lt;/strong&gt; &lt;span&gt;&lt;span&gt;0&lt;span&gt;&lt;strong&gt;;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;ar &lt;span&gt;&lt;strong&gt;&amp;gt;&amp;gt;&lt;/strong&gt; &lt;span&gt;len&lt;span&gt;&lt;strong&gt;;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;t&lt;span&gt;&lt;strong&gt;.&lt;/strong&gt;&lt;span&gt;clear&lt;span&gt;&lt;strong&gt;();&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;for&lt;/strong&gt; &lt;span&gt;&lt;span&gt;&lt;strong&gt;(&lt;/strong&gt;&lt;span&gt;int &lt;span&gt;i &lt;span&gt;&lt;strong&gt;=&lt;/strong&gt; &lt;span&gt;&lt;span&gt;0&lt;span&gt;&lt;strong&gt;;&lt;/strong&gt; &lt;span&gt;i &lt;span&gt;&lt;strong&gt;&amp;lt;&lt;/strong&gt; &lt;span&gt;len&lt;span&gt;&lt;strong&gt;;&lt;/strong&gt; &lt;span&gt;i&lt;span&gt;&lt;strong&gt;++)&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;{&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;K key&lt;span&gt;&lt;strong&gt;;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;V val&lt;span&gt;&lt;strong&gt;;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;ar &lt;span&gt;&lt;strong&gt;&amp;gt;&amp;gt;&lt;/strong&gt; &lt;span&gt;key &lt;span&gt;&lt;strong&gt;&amp;gt;&amp;gt;&lt;/strong&gt; &lt;span&gt;val&lt;span&gt;&lt;strong&gt;;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;t&lt;span&gt;&lt;strong&gt;[&lt;/strong&gt;&lt;span&gt;key&lt;span&gt;&lt;strong&gt;]&lt;/strong&gt; &lt;span&gt;&lt;span&gt;&lt;strong&gt;=&lt;/strong&gt; &lt;span&gt;val&lt;span&gt;&lt;strong&gt;;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;}&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;}&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;};&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;span&gt;class &lt;span&gt;CTextSerialize &lt;span&gt;//&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;序列化和协议实现类&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;{&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;public&lt;span&gt;&lt;strong&gt;:&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;typedef&lt;/strong&gt; &lt;span&gt;bool_plt&lt;span&gt;&lt;strong&gt;&amp;lt;&lt;span&gt;true&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt; &lt;span&gt;is_marshall&lt;span&gt;&lt;strong&gt;;&lt;/strong&gt; &lt;span&gt;&lt;span&gt;//&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;该类定义为序列化类&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;typedef&lt;/strong&gt; &lt;span&gt;bool_plt&lt;span&gt;&lt;strong&gt;&amp;lt;&lt;span&gt;false&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt; &lt;span&gt;is_demarshall&lt;span&gt;&lt;strong&gt;;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;CTextSerialize&lt;span&gt;&lt;strong&gt;(&lt;/strong&gt;&lt;span&gt;ostream&lt;span&gt;&lt;strong&gt;&amp;amp;&lt;/strong&gt; &lt;span&gt;o&lt;span&gt;&lt;strong&gt;):&lt;/strong&gt;&lt;span&gt;os&lt;span&gt;&lt;strong&gt;(&lt;/strong&gt;&lt;span&gt;o&lt;span&gt;&lt;strong&gt;){}&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;span&gt;template&lt;span&gt;&lt;strong&gt;&amp;lt;&lt;/strong&gt;&lt;span&gt;typename &lt;span&gt;T&lt;span&gt;&lt;strong&gt;&amp;gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;void &lt;span&gt;serialize&lt;span&gt;&lt;strong&gt;(&lt;/strong&gt;&lt;span&gt;const &lt;span&gt;T&lt;span&gt;&lt;strong&gt;&amp;amp;&lt;/strong&gt; &lt;span&gt;t&lt;span&gt;&lt;strong&gt;,&lt;/strong&gt; &lt;span&gt;bool_plt&lt;span&gt;&lt;strong&gt;&amp;lt;&lt;span&gt;false&lt;span&gt;&amp;gt;&amp;amp;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt; &lt;span&gt;b&lt;span&gt;&lt;strong&gt;)&lt;/strong&gt; &lt;span&gt;&lt;span&gt;//&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;基础类型序列化模板函数&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;{&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;os &lt;span&gt;&lt;strong&gt;&amp;lt;&amp;lt;&lt;/strong&gt; &lt;span&gt;t &lt;span&gt;&lt;strong&gt;&amp;lt;&amp;lt;&lt;/strong&gt; &lt;span&gt;&lt;span&gt;&quot; &quot;&lt;span&gt;&lt;strong&gt;;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;}&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;template&lt;span&gt;&lt;strong&gt;&amp;lt;&lt;/strong&gt;&lt;span&gt;typename &lt;span&gt;T&lt;span&gt;&lt;strong&gt;&amp;gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;void &lt;span&gt;serialize&lt;span&gt;&lt;strong&gt;(&lt;/strong&gt;&lt;span&gt;const &lt;span&gt;T&lt;span&gt;&lt;strong&gt;&amp;amp;&lt;/strong&gt; &lt;span&gt;t&lt;span&gt;&lt;strong&gt;,&lt;/strong&gt; &lt;span&gt;bool_plt&lt;span&gt;&lt;strong&gt;&amp;lt;&lt;span&gt;true&lt;span&gt;&amp;gt;&amp;amp;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt; &lt;span&gt;b&lt;span&gt;&lt;strong&gt;)&lt;/strong&gt; &lt;span&gt;&lt;span&gt;//&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;类类型序列化模板函数&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;{&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;CAccess&lt;span&gt;&lt;strong&gt;&amp;lt;&lt;/strong&gt;&lt;span&gt;CTextSerialize&lt;span&gt;&lt;strong&gt;,&lt;/strong&gt; &lt;span&gt;T&lt;span&gt;&lt;strong&gt;&amp;gt;::&lt;/strong&gt;&lt;span&gt;serialize&lt;span&gt;&lt;strong&gt;(*&lt;span&gt;this&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt; &lt;span&gt;&lt;span&gt;&lt;strong&gt;const_cast&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;T&lt;span&gt;&lt;strong&gt;&amp;amp;&amp;gt;(&lt;/strong&gt;&lt;span&gt;t&lt;span&gt;&lt;strong&gt;));&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;}&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;template&lt;span&gt;&lt;strong&gt;&amp;lt;&lt;/strong&gt;&lt;span&gt;typename &lt;span&gt;T&lt;span&gt;&lt;strong&gt;&amp;gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;CTextSerialize&lt;span&gt;&lt;strong&gt;&amp;amp;&lt;/strong&gt; &lt;span&gt;&lt;span&gt;&lt;strong&gt;operator&lt;span&gt;&amp;lt;&amp;lt;(&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;const &lt;span&gt;T&lt;span&gt;&lt;strong&gt;&amp;amp;&lt;/strong&gt; &lt;span&gt;t&lt;span&gt;&lt;strong&gt;)&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;{&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;bool_plt&lt;span&gt;&lt;strong&gt;&amp;lt;&lt;/strong&gt;&lt;span&gt;is_class&lt;span&gt;&lt;strong&gt;&amp;lt;&lt;/strong&gt;&lt;span&gt;T&lt;span&gt;&lt;strong&gt;&amp;gt;::&lt;/strong&gt;&lt;span&gt;value&lt;span&gt;&lt;strong&gt;&amp;gt;&lt;/strong&gt; &lt;span&gt;type&lt;span&gt;&lt;strong&gt;;&lt;/strong&gt; &lt;span&gt;&lt;span&gt;//type&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;在编译期确定，&lt;/span&gt;&lt;span&gt;&lt;span&gt;T&lt;/span&gt;&lt;span&gt;是否是类类型&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;serialize&lt;span&gt;&lt;strong&gt;(&lt;/strong&gt;&lt;span&gt;t&lt;span&gt;&lt;strong&gt;,&lt;/strong&gt; &lt;span&gt;type&lt;span&gt;&lt;strong&gt;);&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;return&lt;/strong&gt; &lt;span&gt;&lt;span&gt;&lt;strong&gt;*&lt;span&gt;this&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;}&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;span&gt;template&lt;span&gt;&lt;strong&gt;&amp;lt;&lt;/strong&gt;&lt;span&gt;typename &lt;span&gt;T&lt;span&gt;&lt;strong&gt;&amp;gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;CTextSerialize&lt;span&gt;&lt;strong&gt;&amp;amp;&lt;/strong&gt; &lt;span&gt;&lt;span&gt;&lt;strong&gt;operator&lt;span&gt;&amp;amp;(&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;const &lt;span&gt;T&lt;span&gt;&lt;strong&gt;&amp;amp;&lt;/strong&gt; &lt;span&gt;t&lt;span&gt;&lt;strong&gt;)&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;{&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;bool_plt&lt;span&gt;&lt;strong&gt;&amp;lt;&lt;/strong&gt;&lt;span&gt;is_class&lt;span&gt;&lt;strong&gt;&amp;lt;&lt;/strong&gt;&lt;span&gt;T&lt;span&gt;&lt;strong&gt;&amp;gt;::&lt;/strong&gt;&lt;span&gt;value&lt;span&gt;&lt;strong&gt;&amp;gt;&lt;/strong&gt; &lt;span&gt;type&lt;span&gt;&lt;strong&gt;;&lt;/strong&gt; &lt;span&gt;&lt;span&gt;//type&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;在编译期确定，&lt;/span&gt;&lt;span&gt;&lt;span&gt;T&lt;/span&gt;&lt;span&gt;是否是类类型&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;serialize&lt;span&gt;&lt;strong&gt;(&lt;/strong&gt;&lt;span&gt;t&lt;span&gt;&lt;strong&gt;,&lt;/strong&gt; &lt;span&gt;type&lt;span&gt;&lt;strong&gt;);&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;return&lt;/strong&gt; &lt;span&gt;&lt;span&gt;&lt;strong&gt;*&lt;span&gt;this&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;}&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;private&lt;span&gt;&lt;strong&gt;:&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;ostream&lt;span&gt;&lt;strong&gt;&amp;amp;&lt;/strong&gt; &lt;span&gt;os&lt;span&gt;&lt;strong&gt;;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;};&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;span&gt;class &lt;span&gt;CTextDeserialize &lt;span&gt;//&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;反序列化和协议实现类&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;{&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;public&lt;span&gt;&lt;strong&gt;:&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;typedef&lt;/strong&gt; &lt;span&gt;bool_plt&lt;span&gt;&lt;strong&gt;&amp;lt;&lt;span&gt;false&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt; &lt;span&gt;is_marshall&lt;span&gt;&lt;strong&gt;;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;typedef&lt;/strong&gt; &lt;span&gt;bool_plt&lt;span&gt;&lt;strong&gt;&amp;lt;&lt;span&gt;true&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt; &lt;span&gt;is_demarshall&lt;span&gt;&lt;strong&gt;;&lt;/strong&gt; &lt;span&gt;&lt;span&gt;//&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;该类定义为反序列化类&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;CTextDeserialize&lt;span&gt;&lt;strong&gt;(&lt;/strong&gt;&lt;span&gt;istream&lt;span&gt;&lt;strong&gt;&amp;amp;&lt;/strong&gt; &lt;span&gt;i&lt;span&gt;&lt;strong&gt;):&lt;/strong&gt;&lt;span&gt;is&lt;span&gt;&lt;strong&gt;(&lt;/strong&gt;&lt;span&gt;i&lt;span&gt;&lt;strong&gt;){}&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;span&gt;template&lt;span&gt;&lt;strong&gt;&amp;lt;&lt;/strong&gt;&lt;span&gt;typename &lt;span&gt;T&lt;span&gt;&lt;strong&gt;&amp;gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;void &lt;span&gt;deserialize&lt;span&gt;&lt;strong&gt;(&lt;/strong&gt;&lt;span&gt;T&lt;span&gt;&lt;strong&gt;&amp;amp;&lt;/strong&gt; &lt;span&gt;t&lt;span&gt;&lt;strong&gt;,&lt;/strong&gt; &lt;span&gt;bool_plt&lt;span&gt;&lt;strong&gt;&amp;lt;&lt;span&gt;false&lt;span&gt;&amp;gt;&amp;amp;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt; &lt;span&gt;b&lt;span&gt;&lt;strong&gt;)&lt;/strong&gt; &lt;span&gt;&lt;span&gt;//&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;基础类型反序列化模板函数&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;{&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;is &lt;span&gt;&lt;strong&gt;&amp;gt;&amp;gt;&lt;/strong&gt; &lt;span&gt;t&lt;span&gt;&lt;strong&gt;;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;}&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;template&lt;span&gt;&lt;strong&gt;&amp;lt;&lt;/strong&gt;&lt;span&gt;typename &lt;span&gt;T&lt;span&gt;&lt;strong&gt;&amp;gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;void &lt;span&gt;deserialize&lt;span&gt;&lt;strong&gt;(&lt;/strong&gt;&lt;span&gt;T&lt;span&gt;&lt;strong&gt;&amp;amp;&lt;/strong&gt; &lt;span&gt;t&lt;span&gt;&lt;strong&gt;,&lt;/strong&gt; &lt;span&gt;bool_plt&lt;span&gt;&lt;strong&gt;&amp;lt;&lt;span&gt;true&lt;span&gt;&amp;gt;&amp;amp;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt; &lt;span&gt;b&lt;span&gt;&lt;strong&gt;)&lt;/strong&gt; &lt;span&gt;&lt;span&gt;//&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;类类型反序列化模板函数&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;{&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;CAccess&lt;span&gt;&lt;strong&gt;&amp;lt;&lt;/strong&gt;&lt;span&gt;CTextDeserialize&lt;span&gt;&lt;strong&gt;,&lt;/strong&gt; &lt;span&gt;T&lt;span&gt;&lt;strong&gt;&amp;gt;::&lt;/strong&gt;&lt;span&gt;serialize&lt;span&gt;&lt;strong&gt;(*&lt;span&gt;this&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt; &lt;span&gt;t&lt;span&gt;&lt;strong&gt;);&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;}&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;template&lt;span&gt;&lt;strong&gt;&amp;lt;&lt;/strong&gt;&lt;span&gt;typename &lt;span&gt;T&lt;span&gt;&lt;strong&gt;&amp;gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;CTextDeserialize&lt;span&gt;&lt;strong&gt;&amp;amp;&lt;/strong&gt; &lt;span&gt;&lt;span&gt;&lt;strong&gt;operator&lt;span&gt;&amp;gt;&amp;gt;(&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;T&lt;span&gt;&lt;strong&gt;&amp;amp;&lt;/strong&gt; &lt;span&gt;t&lt;span&gt;&lt;strong&gt;)&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;{&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;bool_plt&lt;span&gt;&lt;strong&gt;&amp;lt;&lt;/strong&gt;&lt;span&gt;is_class&lt;span&gt;&lt;strong&gt;&amp;lt;&lt;/strong&gt;&lt;span&gt;T&lt;span&gt;&lt;strong&gt;&amp;gt;::&lt;/strong&gt;&lt;span&gt;value&lt;span&gt;&lt;strong&gt;&amp;gt;&lt;/strong&gt; &lt;span&gt;type&lt;span&gt;&lt;strong&gt;;&lt;/strong&gt; &lt;span&gt;&lt;span&gt;//type&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;在编译期确定，&lt;/span&gt;&lt;span&gt;&lt;span&gt;T&lt;/span&gt;&lt;span&gt;是否是类类型&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;deserialize&lt;span&gt;&lt;strong&gt;(&lt;/strong&gt;&lt;span&gt;t&lt;span&gt;&lt;strong&gt;,&lt;/strong&gt; &lt;span&gt;type&lt;span&gt;&lt;strong&gt;);&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;return&lt;/strong&gt; &lt;span&gt;&lt;span&gt;&lt;strong&gt;*&lt;span&gt;this&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;}&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;span&gt;template&lt;span&gt;&lt;strong&gt;&amp;lt;&lt;/strong&gt;&lt;span&gt;typename &lt;span&gt;T&lt;span&gt;&lt;strong&gt;&amp;gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;CTextDeserialize&lt;span&gt;&lt;strong&gt;&amp;amp;&lt;/strong&gt; &lt;span&gt;&lt;span&gt;&lt;strong&gt;operator&lt;span&gt;&amp;amp;(&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;T&lt;span&gt;&lt;strong&gt;&amp;amp;&lt;/strong&gt; &lt;span&gt;t&lt;span&gt;&lt;strong&gt;)&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;{&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;bool_plt&lt;span&gt;&lt;strong&gt;&amp;lt;&lt;/strong&gt;&lt;span&gt;is_class&lt;span&gt;&lt;strong&gt;&amp;lt;&lt;/strong&gt;&lt;span&gt;T&lt;span&gt;&lt;strong&gt;&amp;gt;::&lt;/strong&gt;&lt;span&gt;value&lt;span&gt;&lt;strong&gt;&amp;gt;&lt;/strong&gt; &lt;span&gt;type&lt;span&gt;&lt;strong&gt;;&lt;/strong&gt; &lt;span&gt;&lt;span&gt;//type&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;在编译期确定，&lt;/span&gt;&lt;span&gt;&lt;span&gt;T&lt;/span&gt;&lt;span&gt;是否是类类型&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;deserialize&lt;span&gt;&lt;strong&gt;(&lt;/strong&gt;&lt;span&gt;t&lt;span&gt;&lt;strong&gt;,&lt;/strong&gt; &lt;span&gt;type&lt;span&gt;&lt;strong&gt;);&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;return&lt;/strong&gt; &lt;span&gt;&lt;span&gt;&lt;strong&gt;*&lt;span&gt;this&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;}&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;private&lt;span&gt;&lt;strong&gt;:&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;istream&lt;span&gt;&lt;strong&gt;&amp;amp;&lt;/strong&gt; &lt;span&gt;is&lt;span&gt;&lt;strong&gt;;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;};&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;enum &lt;span&gt;EName&lt;span&gt;&lt;strong&gt;{};&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;struct &lt;span&gt;SData&lt;span&gt;&lt;strong&gt;{};&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;span&gt;class &lt;span&gt;CData &lt;span&gt;//&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;支持序列化和反序列化的类实现&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;{&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;private&lt;span&gt;&lt;strong&gt;:&lt;/strong&gt; &lt;span&gt;&lt;span&gt;//&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;待序列化的成员变量&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;uint32_t &lt;span&gt;ver&lt;span&gt;&lt;strong&gt;;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;int &lt;span&gt;i&lt;span&gt;&lt;strong&gt;;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;bool &lt;span&gt;b&lt;span&gt;&lt;strong&gt;;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;long &lt;span&gt;l&lt;span&gt;&lt;strong&gt;;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;double &lt;span&gt;d&lt;span&gt;&lt;strong&gt;;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;string s&lt;span&gt;&lt;strong&gt;;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;vector&lt;span&gt;&lt;strong&gt;&amp;lt;&lt;/strong&gt;&lt;span&gt;string&lt;span&gt;&lt;strong&gt;&amp;gt;&lt;/strong&gt; &lt;span&gt;vecStr&lt;span&gt;&lt;strong&gt;;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;map&lt;span&gt;&lt;strong&gt;&amp;lt;&lt;/strong&gt;&lt;span&gt;int&lt;span&gt;&lt;strong&gt;,&lt;/strong&gt; &lt;span&gt;string&lt;span&gt;&lt;strong&gt;&amp;gt;&lt;/strong&gt; &lt;span&gt;mapInfo&lt;span&gt;&lt;strong&gt;;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;public&lt;span&gt;&lt;strong&gt;:&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;CData&lt;span&gt;&lt;strong&gt;():&lt;/strong&gt;&lt;span&gt;ver&lt;span&gt;&lt;strong&gt;(&lt;/strong&gt;&lt;span&gt;0&lt;span&gt;&lt;strong&gt;),&lt;/strong&gt;&lt;span&gt;i&lt;span&gt;&lt;strong&gt;(&lt;/strong&gt;&lt;span&gt;0&lt;span&gt;&lt;strong&gt;),&lt;/strong&gt;&lt;span&gt;b&lt;span&gt;&lt;strong&gt;(&lt;span&gt;false&lt;span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;l&lt;span&gt;&lt;strong&gt;(&lt;/strong&gt;&lt;span&gt;0&lt;span&gt;&lt;strong&gt;),&lt;/strong&gt;&lt;span&gt;d&lt;span&gt;&lt;strong&gt;(&lt;/strong&gt;&lt;span&gt;0&lt;span&gt;&lt;strong&gt;){}&lt;/strong&gt; &lt;span&gt;&lt;span&gt;//&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;数据初始化&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;void &lt;span&gt;init&lt;span&gt;&lt;strong&gt;(&lt;/strong&gt;&lt;span&gt;uint32_t &lt;span&gt;ver&lt;span&gt;&lt;strong&gt;,&lt;/strong&gt; &lt;span&gt;&lt;span&gt;int &lt;span&gt;i&lt;span&gt;&lt;strong&gt;,&lt;/strong&gt; &lt;span&gt;&lt;span&gt;bool &lt;span&gt;b&lt;span&gt;&lt;strong&gt;,&lt;/strong&gt; &lt;span&gt;&lt;span&gt;long &lt;span&gt;l&lt;span&gt;&lt;strong&gt;,&lt;/strong&gt; &lt;span&gt;&lt;span&gt;double &lt;span&gt;d&lt;span&gt;&lt;strong&gt;,&lt;/strong&gt; &lt;span&gt;string s&lt;span&gt;&lt;strong&gt;,&lt;/strong&gt; &lt;span&gt;string arr&lt;span&gt;&lt;strong&gt;[],&lt;/strong&gt; &lt;span&gt;&lt;span&gt;int &lt;span&gt;len&lt;span&gt;&lt;strong&gt;)&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;{&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;this&lt;span&gt;-&amp;gt;&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;ver &lt;span&gt;&lt;strong&gt;=&lt;/strong&gt; &lt;span&gt;ver&lt;span&gt;&lt;strong&gt;;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;this&lt;span&gt;-&amp;gt;&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;i &lt;span&gt;&lt;strong&gt;=&lt;/strong&gt; &lt;span&gt;i&lt;span&gt;&lt;strong&gt;;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;this&lt;span&gt;-&amp;gt;&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;b &lt;span&gt;&lt;strong&gt;=&lt;/strong&gt; &lt;span&gt;b&lt;span&gt;&lt;strong&gt;;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;this&lt;span&gt;-&amp;gt;&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;l &lt;span&gt;&lt;strong&gt;=&lt;/strong&gt; &lt;span&gt;l&lt;span&gt;&lt;strong&gt;;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;this&lt;span&gt;-&amp;gt;&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;d &lt;span&gt;&lt;strong&gt;=&lt;/strong&gt; &lt;span&gt;d&lt;span&gt;&lt;strong&gt;;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;this&lt;span&gt;-&amp;gt;&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;s &lt;span&gt;&lt;strong&gt;=&lt;/strong&gt; &lt;span&gt;s&lt;span&gt;&lt;strong&gt;;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;this&lt;span&gt;-&amp;gt;&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;vecStr&lt;span&gt;&lt;strong&gt;.&lt;/strong&gt;&lt;span&gt;assign&lt;span&gt;&lt;strong&gt;(&lt;/strong&gt;&lt;span&gt;arr&lt;span&gt;&lt;strong&gt;,&lt;/strong&gt; &lt;span&gt;arr &lt;span&gt;&lt;strong&gt;+&lt;/strong&gt; &lt;span&gt;len&lt;span&gt;&lt;strong&gt;);&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;for&lt;/strong&gt; &lt;span&gt;&lt;span&gt;&lt;strong&gt;(&lt;/strong&gt;&lt;span&gt;int &lt;span&gt;j &lt;span&gt;&lt;strong&gt;=&lt;/strong&gt; &lt;span&gt;&lt;span&gt;0&lt;span&gt;&lt;strong&gt;;&lt;/strong&gt; &lt;span&gt;j &lt;span&gt;&lt;strong&gt;&amp;lt;&lt;/strong&gt; &lt;span&gt;len&lt;span&gt;&lt;strong&gt;;&lt;/strong&gt; &lt;span&gt;j&lt;span&gt;&lt;strong&gt;++)&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;mapInfo&lt;span&gt;&lt;strong&gt;[&lt;/strong&gt;&lt;span&gt;j&lt;span&gt;&lt;strong&gt;]&lt;/strong&gt; &lt;span&gt;&lt;span&gt;&lt;strong&gt;=&lt;/strong&gt; &lt;span&gt;arr&lt;span&gt;&lt;strong&gt;[&lt;/strong&gt;&lt;span&gt;j&lt;span&gt;&lt;strong&gt;];&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;}&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;template&lt;span&gt;&lt;strong&gt;&amp;lt;&lt;/strong&gt;&lt;span&gt;typename &lt;span&gt;Archive&lt;span&gt;&lt;strong&gt;&amp;gt;&lt;/strong&gt; &lt;span&gt;&lt;span&gt;//&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;模板多态，&lt;/span&gt;&lt;span&gt;&lt;span&gt;Archive&lt;/span&gt;&lt;span&gt;可以实现多种序列化协议&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;Archive&lt;span&gt;&lt;strong&gt;&amp;amp;&lt;/strong&gt; &lt;span&gt;serialize&lt;span&gt;&lt;strong&gt;(&lt;/strong&gt;&lt;span&gt;Archive&lt;span&gt;&lt;strong&gt;&amp;amp;&lt;/strong&gt; &lt;span&gt;ar&lt;span&gt;&lt;strong&gt;)&lt;/strong&gt; &lt;span&gt;&lt;span&gt;//&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;序列化和反序列化都调用这个模板函数&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;{&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;ar &lt;span&gt;&lt;strong&gt;&amp;amp;&lt;/strong&gt; &lt;span&gt;ver&lt;span&gt;&lt;strong&gt;;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;ar &lt;span&gt;&lt;strong&gt;&amp;amp;&lt;/strong&gt; &lt;span&gt;i&lt;span&gt;&lt;strong&gt;;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;ar &lt;span&gt;&lt;strong&gt;&amp;amp;&lt;/strong&gt; &lt;span&gt;b&lt;span&gt;&lt;strong&gt;;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;ar &lt;span&gt;&lt;strong&gt;&amp;amp;&lt;/strong&gt; &lt;span&gt;l&lt;span&gt;&lt;strong&gt;;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;ar &lt;span&gt;&lt;strong&gt;&amp;amp;&lt;/strong&gt; &lt;span&gt;d&lt;span&gt;&lt;strong&gt;;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;ar &lt;span&gt;&lt;strong&gt;&amp;amp;&lt;/strong&gt; &lt;span&gt;s&lt;span&gt;&lt;strong&gt;;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;ar &lt;span&gt;&lt;strong&gt;&amp;amp;&lt;/strong&gt; &lt;span&gt;vecStr&lt;span&gt;&lt;strong&gt;;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;ar &lt;span&gt;&lt;strong&gt;&amp;amp;&lt;/strong&gt; &lt;span&gt;mapInfo&lt;span&gt;&lt;strong&gt;;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;return&lt;/strong&gt; &lt;span&gt;ar&lt;span&gt;&lt;strong&gt;;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;}&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;span&gt;string tostr&lt;span&gt;&lt;strong&gt;(&lt;/strong&gt;&lt;span&gt;void&lt;span&gt;&lt;strong&gt;)&lt;/strong&gt; &lt;span&gt;&lt;span&gt;//&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;便于类对象打印输出&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;{&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;stringstream ss&lt;span&gt;&lt;strong&gt;;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;ss &lt;span&gt;&lt;strong&gt;&amp;lt;&amp;lt;&lt;/strong&gt; &lt;span&gt;&lt;span&gt;&quot; ver &quot; &lt;span&gt;&lt;span&gt;&lt;strong&gt;&amp;lt;&amp;lt;&lt;/strong&gt; &lt;span&gt;ver&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&amp;lt;&amp;lt;&lt;/strong&gt; &lt;span&gt;&lt;span&gt;&quot; int:&quot; &lt;span&gt;&lt;span&gt;&lt;strong&gt;&amp;lt;&amp;lt;&lt;/strong&gt; &lt;span&gt;i &lt;span&gt;&lt;strong&gt;&amp;lt;&amp;lt;&lt;/strong&gt; &lt;span&gt;&lt;span&gt;&quot; bool:&quot; &lt;span&gt;&lt;span&gt;&lt;strong&gt;&amp;lt;&amp;lt;&lt;/strong&gt; &lt;span&gt;&lt;span&gt;&lt;strong&gt;(&lt;span&gt;true&lt;span&gt;==&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;b &lt;span&gt;&lt;strong&gt;?&lt;/strong&gt; &lt;span&gt;&lt;span&gt;&quot;true&quot; &lt;span&gt;&lt;span&gt;&lt;strong&gt;:&lt;/strong&gt; &lt;span&gt;&lt;span&gt;&quot;false&quot;&lt;span&gt;&lt;strong&gt;)&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&amp;lt;&amp;lt;&lt;/strong&gt; &lt;span&gt;&lt;span&gt;&quot; long:&quot; &lt;span&gt;&lt;span&gt;&lt;strong&gt;&amp;lt;&amp;lt;&lt;/strong&gt; &lt;span&gt;l &lt;span&gt;&lt;strong&gt;&amp;lt;&amp;lt;&lt;/strong&gt; &lt;span&gt;&lt;span&gt;&quot; double:&quot; &lt;span&gt;&lt;span&gt;&lt;strong&gt;&amp;lt;&amp;lt;&lt;/strong&gt; &lt;span&gt;d &lt;span&gt;&lt;strong&gt;&amp;lt;&amp;lt;&lt;/strong&gt; &lt;span&gt;&lt;span&gt;&quot; string:&quot; &lt;span&gt;&lt;span&gt;&lt;strong&gt;&amp;lt;&amp;lt;&lt;/strong&gt; &lt;span&gt;s&lt;span&gt;&lt;strong&gt;;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;int &lt;span&gt;len &lt;span&gt;&lt;strong&gt;=&lt;/strong&gt; &lt;span&gt;vecStr&lt;span&gt;&lt;strong&gt;.&lt;/strong&gt;&lt;span&gt;size&lt;span&gt;&lt;strong&gt;();&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;ss &lt;span&gt;&lt;strong&gt;&amp;lt;&amp;lt;&lt;/strong&gt; &lt;span&gt;&lt;span&gt;&quot; vector:&quot; &lt;span&gt;&lt;span&gt;&lt;strong&gt;&amp;lt;&amp;lt;&lt;/strong&gt; &lt;span&gt;len &lt;span&gt;&lt;strong&gt;&amp;lt;&amp;lt;&lt;/strong&gt; &lt;span&gt;&lt;span&gt;&quot; &quot;&lt;span&gt;&lt;strong&gt;;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;for&lt;/strong&gt; &lt;span&gt;&lt;span&gt;&lt;strong&gt;(&lt;/strong&gt;&lt;span&gt;int &lt;span&gt;j &lt;span&gt;&lt;strong&gt;=&lt;/strong&gt; &lt;span&gt;&lt;span&gt;0&lt;span&gt;&lt;strong&gt;;&lt;/strong&gt; &lt;span&gt;j &lt;span&gt;&lt;strong&gt;&amp;lt;&lt;/strong&gt; &lt;span&gt;len&lt;span&gt;&lt;strong&gt;;&lt;/strong&gt; &lt;span&gt;j&lt;span&gt;&lt;strong&gt;++)&lt;/strong&gt; &lt;span&gt;ss &lt;span&gt;&lt;strong&gt;&amp;lt;&amp;lt;&lt;/strong&gt; &lt;span&gt;vecStr&lt;span&gt;&lt;strong&gt;[&lt;/strong&gt;&lt;span&gt;j&lt;span&gt;&lt;strong&gt;]&lt;/strong&gt; &lt;span&gt;&lt;span&gt;&lt;strong&gt;&amp;lt;&amp;lt;&lt;/strong&gt; &lt;span&gt;&lt;span&gt;&quot; &quot;&lt;span&gt;&lt;strong&gt;;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;ss &lt;span&gt;&lt;strong&gt;&amp;lt;&amp;lt;&lt;/strong&gt; &lt;span&gt;&lt;span&gt;&quot; map:&quot; &lt;span&gt;&lt;span&gt;&lt;strong&gt;&amp;lt;&amp;lt;&lt;/strong&gt; &lt;span&gt;len &lt;span&gt;&lt;strong&gt;&amp;lt;&amp;lt;&lt;/strong&gt; &lt;span&gt;&lt;span&gt;&quot; &quot;&lt;span&gt;&lt;strong&gt;;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;for&lt;/strong&gt; &lt;span&gt;&lt;span&gt;&lt;strong&gt;(&lt;/strong&gt;&lt;span&gt;int &lt;span&gt;j &lt;span&gt;&lt;strong&gt;=&lt;/strong&gt; &lt;span&gt;&lt;span&gt;0&lt;span&gt;&lt;strong&gt;;&lt;/strong&gt; &lt;span&gt;j &lt;span&gt;&lt;strong&gt;&amp;lt;&lt;/strong&gt; &lt;span&gt;len&lt;span&gt;&lt;strong&gt;;&lt;/strong&gt; &lt;span&gt;j&lt;span&gt;&lt;strong&gt;++)&lt;/strong&gt; &lt;span&gt;ss &lt;span&gt;&lt;strong&gt;&amp;lt;&amp;lt;&lt;/strong&gt; &lt;span&gt;j &lt;span&gt;&lt;strong&gt;&amp;lt;&amp;lt;&lt;/strong&gt; &lt;span&gt;&lt;span&gt;&quot; &quot; &lt;span&gt;&lt;span&gt;&lt;strong&gt;&amp;lt;&amp;lt;&lt;/strong&gt; &lt;span&gt;mapInfo&lt;span&gt;&lt;strong&gt;[&lt;/strong&gt;&lt;span&gt;j&lt;span&gt;&lt;strong&gt;]&lt;/strong&gt; &lt;span&gt;&lt;span&gt;&lt;strong&gt;&amp;lt;&amp;lt;&lt;/strong&gt; &lt;span&gt;&lt;span&gt;&quot; &quot;&lt;span&gt;&lt;strong&gt;;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;return&lt;/strong&gt; &lt;span&gt;ss&lt;span&gt;&lt;strong&gt;.&lt;/strong&gt;&lt;span&gt;str&lt;span&gt;&lt;strong&gt;();&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;}&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;};&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;int &lt;span&gt;main&lt;span&gt;&lt;strong&gt;(&lt;/strong&gt;&lt;span&gt;void&lt;span&gt;&lt;strong&gt;)&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;{&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;{&lt;/strong&gt;&lt;span&gt;//&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;将数据存入流中，将数据从流中取出；空格做为数据分隔符，简单的数据存储格式&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;stringstream ss&lt;span&gt;&lt;strong&gt;;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;span&gt;int &lt;span&gt;a &lt;span&gt;&lt;strong&gt;=&lt;/strong&gt; &lt;span&gt;&lt;span&gt;1&lt;span&gt;&lt;strong&gt;;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;double &lt;span&gt;b &lt;span&gt;&lt;strong&gt;=&lt;/strong&gt; &lt;span&gt;&lt;span&gt;2.1&lt;span&gt;&lt;strong&gt;;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;string c &lt;span&gt;&lt;strong&gt;=&lt;/strong&gt; &lt;span&gt;&lt;span&gt;&quot;abc&quot;&lt;span&gt;&lt;strong&gt;;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;ss &lt;span&gt;&lt;strong&gt;&amp;lt;&amp;lt;&lt;/strong&gt; &lt;span&gt;a &lt;span&gt;&lt;strong&gt;&amp;lt;&amp;lt;&lt;/strong&gt; &lt;span&gt;&lt;span&gt;&quot; &quot; &lt;span&gt;&lt;span&gt;&lt;strong&gt;&amp;lt;&amp;lt;&lt;/strong&gt; &lt;span&gt;b &lt;span&gt;&lt;strong&gt;&amp;lt;&amp;lt;&lt;/strong&gt; &lt;span&gt;&lt;span&gt;&quot; &quot; &lt;span&gt;&lt;span&gt;&lt;strong&gt;&amp;lt;&amp;lt;&lt;/strong&gt; &lt;span&gt;c&lt;span&gt;&lt;strong&gt;;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;int &lt;span&gt;A &lt;span&gt;&lt;strong&gt;=&lt;/strong&gt; &lt;span&gt;&lt;span&gt;0&lt;span&gt;&lt;strong&gt;;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;double &lt;span&gt;B &lt;span&gt;&lt;strong&gt;=&lt;/strong&gt; &lt;span&gt;&lt;span&gt;0&lt;span&gt;&lt;strong&gt;;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;string C&lt;span&gt;&lt;strong&gt;;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;ss &lt;span&gt;&lt;strong&gt;&amp;gt;&amp;gt;&lt;/strong&gt; &lt;span&gt;A &lt;span&gt;&lt;strong&gt;&amp;gt;&amp;gt;&lt;/strong&gt; &lt;span&gt;B &lt;span&gt;&lt;strong&gt;&amp;gt;&amp;gt;&lt;/strong&gt; &lt;span&gt;C&lt;span&gt;&lt;strong&gt;;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;cout &lt;span&gt;&lt;strong&gt;&amp;lt;&amp;lt;&lt;/strong&gt; &lt;span&gt;ss&lt;span&gt;&lt;strong&gt;.&lt;/strong&gt;&lt;span&gt;str&lt;span&gt;&lt;strong&gt;()&lt;/strong&gt; &lt;span&gt;&lt;span&gt;&lt;strong&gt;&amp;lt;&amp;lt;&lt;/strong&gt; &lt;span&gt;endl&lt;span&gt;&lt;strong&gt;;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;cout &lt;span&gt;&lt;strong&gt;&amp;lt;&amp;lt;&lt;/strong&gt; &lt;span&gt;A &lt;span&gt;&lt;strong&gt;&amp;lt;&amp;lt;&lt;/strong&gt; &lt;span&gt;&lt;span&gt;&quot; &quot; &lt;span&gt;&lt;span&gt;&lt;strong&gt;&amp;lt;&amp;lt;&lt;/strong&gt; &lt;span&gt;B &lt;span&gt;&lt;strong&gt;&amp;lt;&amp;lt;&lt;/strong&gt; &lt;span&gt;&lt;span&gt;&quot; &quot; &lt;span&gt;&lt;span&gt;&lt;strong&gt;&amp;lt;&amp;lt;&lt;/strong&gt; &lt;span&gt;C &lt;span&gt;&lt;strong&gt;&amp;lt;&amp;lt;&lt;/strong&gt; &lt;span&gt;endl &lt;span&gt;&lt;strong&gt;&amp;lt;&amp;lt;&lt;/strong&gt; &lt;span&gt;endl&lt;span&gt;&lt;strong&gt;;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;}&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;{&lt;/strong&gt;&lt;span&gt;//&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;使用&lt;span&gt;模板方式，在编译期判断数据类型，是否是类类型&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;cout &lt;span&gt;&lt;strong&gt;&amp;lt;&amp;lt;&lt;/strong&gt; &lt;span&gt;is_class&lt;span&gt;&lt;strong&gt;&amp;lt;&lt;/strong&gt;&lt;span&gt;int&lt;span&gt;&lt;strong&gt;&amp;gt;::&lt;/strong&gt;&lt;span&gt;value &lt;span&gt;&lt;strong&gt;&amp;lt;&amp;lt;&lt;/strong&gt; &lt;span&gt;endl&lt;span&gt;&lt;strong&gt;;&lt;/strong&gt;&lt;span&gt;//&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;该代码块都是基础数据类型&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;cout &lt;span&gt;&lt;strong&gt;&amp;lt;&amp;lt;&lt;/strong&gt; &lt;span&gt;is_class&lt;span&gt;&lt;strong&gt;&amp;lt;&lt;/strong&gt;&lt;span&gt;double&lt;span&gt;&lt;strong&gt;&amp;gt;::&lt;/strong&gt;&lt;span&gt;value &lt;span&gt;&lt;strong&gt;&amp;lt;&amp;lt;&lt;/strong&gt; &lt;span&gt;endl&lt;span&gt;&lt;strong&gt;;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;cout &lt;span&gt;&lt;strong&gt;&amp;lt;&amp;lt;&lt;/strong&gt; &lt;span&gt;is_class&lt;span&gt;&lt;strong&gt;&amp;lt;&lt;/strong&gt;&lt;span&gt;EName&lt;span&gt;&lt;strong&gt;&amp;gt;::&lt;/strong&gt;&lt;span&gt;value &lt;span&gt;&lt;strong&gt;&amp;lt;&amp;lt;&lt;/strong&gt; &lt;span&gt;endl&lt;span&gt;&lt;strong&gt;;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;cout &lt;span&gt;&lt;strong&gt;&amp;lt;&amp;lt;&lt;/strong&gt; &lt;span&gt;is_class&lt;span&gt;&lt;strong&gt;&amp;lt;&lt;/strong&gt;&lt;span&gt;string&lt;span&gt;&lt;strong&gt;&amp;gt;::&lt;/strong&gt;&lt;span&gt;value &lt;span&gt;&lt;strong&gt;&amp;lt;&amp;lt;&lt;/strong&gt; &lt;span&gt;endl&lt;span&gt;&lt;strong&gt;;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;span&gt;cout &lt;span&gt;&lt;strong&gt;&amp;lt;&amp;lt;&lt;/strong&gt; &lt;span&gt;is_class&lt;span&gt;&lt;strong&gt;&amp;lt;&lt;/strong&gt;&lt;span&gt;CData&lt;span&gt;&lt;strong&gt;&amp;gt;::&lt;/strong&gt;&lt;span&gt;value &lt;span&gt;&lt;strong&gt;&amp;lt;&amp;lt;&lt;/strong&gt; &lt;span&gt;endl&lt;span&gt;&lt;strong&gt;;&lt;/strong&gt;&lt;span&gt;//&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;该代码块都是类类型&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;cout &lt;span&gt;&lt;strong&gt;&amp;lt;&amp;lt;&lt;/strong&gt; &lt;span&gt;is_class&lt;span&gt;&lt;strong&gt;&amp;lt;&lt;/strong&gt;&lt;span&gt;SData&lt;span&gt;&lt;strong&gt;&amp;gt;::&lt;/strong&gt;&lt;span&gt;value &lt;span&gt;&lt;strong&gt;&amp;lt;&amp;lt;&lt;/strong&gt; &lt;span&gt;endl&lt;span&gt;&lt;strong&gt;;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;cout &lt;span&gt;&lt;strong&gt;&amp;lt;&amp;lt;&lt;/strong&gt; &lt;span&gt;is_class&lt;span&gt;&lt;strong&gt;&amp;lt;&lt;/strong&gt;&lt;span&gt;vector&lt;span&gt;&lt;strong&gt;&amp;lt;&lt;/strong&gt;&lt;span&gt;int&lt;span&gt;&lt;strong&gt;&amp;gt;&lt;/strong&gt; &lt;span&gt;&lt;span&gt;&lt;strong&gt;&amp;gt;::&lt;/strong&gt;&lt;span&gt;value &lt;span&gt;&lt;strong&gt;&amp;lt;&amp;lt;&lt;/strong&gt; &lt;span&gt;endl &lt;span&gt;&lt;strong&gt;&amp;lt;&amp;lt;&lt;/strong&gt; &lt;span&gt;endl&lt;span&gt;&lt;strong&gt;;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;}&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;{&lt;/strong&gt;&lt;span&gt;//&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;序列化和反序列化基础数据类型&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;int &lt;span&gt;a &lt;span&gt;&lt;strong&gt;=&lt;/strong&gt; &lt;span&gt;&lt;span&gt;1&lt;span&gt;&lt;strong&gt;;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;double &lt;span&gt;b &lt;span&gt;&lt;strong&gt;=&lt;/strong&gt; &lt;span&gt;&lt;span&gt;2.1&lt;span&gt;&lt;strong&gt;;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;string c &lt;span&gt;&lt;strong&gt;=&lt;/strong&gt; &lt;span&gt;&lt;span&gt;&quot;abc&quot;&lt;span&gt;&lt;strong&gt;;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;std&lt;span&gt;&lt;strong&gt;::&lt;/strong&gt;&lt;span&gt;ostringstream os&lt;span&gt;&lt;strong&gt;;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;CTextSerialize oSer&lt;span&gt;&lt;strong&gt;(&lt;/strong&gt;&lt;span&gt;os&lt;span&gt;&lt;strong&gt;);&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;oSer &lt;span&gt;&lt;strong&gt;&amp;lt;&amp;lt;&lt;/strong&gt; &lt;span&gt;a &lt;span&gt;&lt;strong&gt;&amp;lt;&amp;lt;&lt;/strong&gt; &lt;span&gt;b &lt;span&gt;&lt;strong&gt;&amp;lt;&amp;lt;&lt;/strong&gt; &lt;span&gt;c&lt;span&gt;&lt;strong&gt;;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;cout &lt;span&gt;&lt;strong&gt;&amp;lt;&amp;lt;&lt;/strong&gt; &lt;span&gt;a &lt;span&gt;&lt;strong&gt;&amp;lt;&amp;lt;&lt;/strong&gt; &lt;span&gt;&lt;span&gt;&quot; &quot; &lt;span&gt;&lt;span&gt;&lt;strong&gt;&amp;lt;&amp;lt;&lt;/strong&gt; &lt;span&gt;b &lt;span&gt;&lt;strong&gt;&amp;lt;&amp;lt;&lt;/strong&gt; &lt;span&gt;&lt;span&gt;&quot; &quot; &lt;span&gt;&lt;span&gt;&lt;strong&gt;&amp;lt;&amp;lt;&lt;/strong&gt; &lt;span&gt;c &lt;span&gt;&lt;strong&gt;&amp;lt;&amp;lt;&lt;/strong&gt; &lt;span&gt;endl&lt;span&gt;&lt;strong&gt;;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;span&gt;int &lt;span&gt;A &lt;span&gt;&lt;strong&gt;=&lt;/strong&gt; &lt;span&gt;&lt;span&gt;0&lt;span&gt;&lt;strong&gt;;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;double &lt;span&gt;B &lt;span&gt;&lt;strong&gt;=&lt;/strong&gt; &lt;span&gt;&lt;span&gt;0&lt;span&gt;&lt;strong&gt;;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;string C&lt;span&gt;&lt;strong&gt;;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;std&lt;span&gt;&lt;strong&gt;::&lt;/strong&gt;&lt;span&gt;istringstream is&lt;span&gt;&lt;strong&gt;(&lt;/strong&gt;&lt;span&gt;os&lt;span&gt;&lt;strong&gt;.&lt;/strong&gt;&lt;span&gt;str&lt;span&gt;&lt;strong&gt;());&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;CTextDeserialize iDeser&lt;span&gt;&lt;strong&gt;(&lt;/strong&gt;&lt;span&gt;is&lt;span&gt;&lt;strong&gt;);&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;iDeser &lt;span&gt;&lt;strong&gt;&amp;gt;&amp;gt;&lt;/strong&gt; &lt;span&gt;A &lt;span&gt;&lt;strong&gt;&amp;gt;&amp;gt;&lt;/strong&gt; &lt;span&gt;B &lt;span&gt;&lt;strong&gt;&amp;gt;&amp;gt;&lt;/strong&gt; &lt;span&gt;C&lt;span&gt;&lt;strong&gt;;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;cout &lt;span&gt;&lt;strong&gt;&amp;lt;&amp;lt;&lt;/strong&gt; &lt;span&gt;A &lt;span&gt;&lt;strong&gt;&amp;lt;&amp;lt;&lt;/strong&gt; &lt;span&gt;&lt;span&gt;&quot; &quot; &lt;span&gt;&lt;span&gt;&lt;strong&gt;&amp;lt;&amp;lt;&lt;/strong&gt; &lt;span&gt;B &lt;span&gt;&lt;strong&gt;&amp;lt;&amp;lt;&lt;/strong&gt; &lt;span&gt;&lt;span&gt;&quot; &quot; &lt;span&gt;&lt;span&gt;&lt;strong&gt;&amp;lt;&amp;lt;&lt;/strong&gt; &lt;span&gt;C &lt;span&gt;&lt;strong&gt;&amp;lt;&amp;lt;&lt;/strong&gt; &lt;span&gt;endl &lt;span&gt;&lt;strong&gt;&amp;lt;&amp;lt;&lt;/strong&gt; &lt;span&gt;endl&lt;span&gt;&lt;strong&gt;;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;}&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;{&lt;/strong&gt;&lt;span&gt;//&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;序列化和反序列化类类型&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;string arr&lt;span&gt;&lt;strong&gt;[]&lt;/strong&gt; &lt;span&gt;&lt;span&gt;&lt;strong&gt;=&lt;/strong&gt; &lt;span&gt;&lt;span&gt;&lt;strong&gt;{&lt;/strong&gt;&lt;span&gt;&quot;3a&quot;&lt;span&gt;&lt;strong&gt;,&lt;/strong&gt; &lt;span&gt;&lt;span&gt;&quot;2b&quot;&lt;span&gt;&lt;strong&gt;,&lt;/strong&gt; &lt;span&gt;&lt;span&gt;&quot;1c&quot;&lt;span&gt;&lt;strong&gt;};&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;int &lt;span&gt;len &lt;span&gt;&lt;strong&gt;=&lt;/strong&gt; &lt;span&gt;&lt;span&gt;&lt;strong&gt;sizeof&lt;span&gt;(&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;arr&lt;span&gt;&lt;strong&gt;)/&lt;span&gt;sizeof&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;arr&lt;span&gt;&lt;strong&gt;[&lt;/strong&gt;&lt;span&gt;0&lt;span&gt;&lt;strong&gt;]);&lt;/strong&gt;&lt;span&gt;//C++&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;内存布局与&lt;/span&gt;&lt;span&gt;&lt;span&gt;C&lt;/span&gt;&lt;span&gt;语言兼容&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;CData oData&lt;span&gt;&lt;strong&gt;;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;oData&lt;span&gt;&lt;strong&gt;.&lt;/strong&gt;&lt;span&gt;init&lt;span&gt;&lt;strong&gt;(&lt;/strong&gt;&lt;span&gt;0&lt;span&gt;&lt;strong&gt;,&lt;/strong&gt; &lt;span&gt;&lt;span&gt;11&lt;span&gt;&lt;strong&gt;,&lt;/strong&gt; &lt;span&gt;&lt;span&gt;&lt;strong&gt;true&lt;span&gt;,&lt;/span&gt;&lt;/strong&gt; &lt;span&gt;&lt;span&gt;222&lt;span&gt;&lt;strong&gt;,&lt;/strong&gt; &lt;span&gt;&lt;span&gt;3.30&lt;span&gt;&lt;strong&gt;,&lt;/strong&gt; &lt;span&gt;&lt;span&gt;&quot;string&quot;&lt;span&gt;&lt;strong&gt;,&lt;/strong&gt; &lt;span&gt;arr&lt;span&gt;&lt;strong&gt;,&lt;/strong&gt; &lt;span&gt;len&lt;span&gt;&lt;strong&gt;);&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;std&lt;span&gt;&lt;strong&gt;::&lt;/strong&gt;&lt;span&gt;ostringstream os&lt;span&gt;&lt;strong&gt;;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;CTextSerialize oSer&lt;span&gt;&lt;strong&gt;(&lt;/strong&gt;&lt;span&gt;os&lt;span&gt;&lt;strong&gt;);&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;oSer &lt;span&gt;&lt;strong&gt;&amp;lt;&amp;lt;&lt;/strong&gt; &lt;span&gt;oData&lt;span&gt;&lt;strong&gt;;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;cout &lt;span&gt;&lt;strong&gt;&amp;lt;&amp;lt;&lt;/strong&gt; &lt;span&gt;&lt;span&gt;&quot;oData:&quot; &lt;span&gt;&lt;span&gt;&lt;strong&gt;&amp;lt;&amp;lt;&lt;/strong&gt; &lt;span&gt;oData&lt;span&gt;&lt;strong&gt;.&lt;/strong&gt;&lt;span&gt;tostr&lt;span&gt;&lt;strong&gt;()&lt;/strong&gt; &lt;span&gt;&lt;span&gt;&lt;strong&gt;&amp;lt;&amp;lt;&lt;/strong&gt; &lt;span&gt;endl&lt;span&gt;&lt;strong&gt;;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;CData iData&lt;span&gt;&lt;strong&gt;;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;std&lt;span&gt;&lt;strong&gt;::&lt;/strong&gt;&lt;span&gt;istringstream is&lt;span&gt;&lt;strong&gt;(&lt;/strong&gt;&lt;span&gt;os&lt;span&gt;&lt;strong&gt;.&lt;/strong&gt;&lt;span&gt;str&lt;span&gt;&lt;strong&gt;());&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;CTextDeserialize iDeser&lt;span&gt;&lt;strong&gt;(&lt;/strong&gt;&lt;span&gt;is&lt;span&gt;&lt;strong&gt;);&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;iDeser &lt;span&gt;&lt;strong&gt;&amp;gt;&amp;gt;&lt;/strong&gt; &lt;span&gt;iData&lt;span&gt;&lt;strong&gt;;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;cout &lt;span&gt;&lt;strong&gt;&amp;lt;&amp;lt;&lt;/strong&gt; &lt;span&gt;&lt;span&gt;&quot;iData:&quot; &lt;span&gt;&lt;span&gt;&lt;strong&gt;&amp;lt;&amp;lt;&lt;/strong&gt; &lt;span&gt;iData&lt;span&gt;&lt;strong&gt;.&lt;/strong&gt;&lt;span&gt;tostr&lt;span&gt;&lt;strong&gt;()&lt;/strong&gt; &lt;span&gt;&lt;span&gt;&lt;strong&gt;&amp;lt;&amp;lt;&lt;/strong&gt; &lt;span&gt;endl&lt;span&gt;&lt;strong&gt;;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;}&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;return&lt;/strong&gt; &lt;span&gt;&lt;span&gt;0&lt;span&gt;&lt;strong&gt;;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;}&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Sat, 24 Nov 2018 13:48:00 +0000</pubDate>
<dc:creator>划时代</dc:creator>
<og:description>设计思路 在与多个系统进行网络交互时，序列化是不可缺少的技术。编写一个C++语言的序列化实现，是练习运用模板元编程的绝佳案例，理解C++模板是如何&quot;面向编译期编程&quot;的（业内好像没有</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/churen/p/10013742.html</dc:identifier>
</item>
<item>
<title>进程、线程和协程 - 渔单渠</title>
<link>http://www.cnblogs.com/yudanqu/p/10013049.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/yudanqu/p/10013049.html</guid>
<description>&lt;h2&gt;1、多任务原理&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;　　多任务是指操作系统同时可以运行多个任务。&lt;/span&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;单核CPU实现多任务原理：操作系统轮流让各个任务交替执行；&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;多核CPU实现多任务原理：真正的执行多任务只能在多核CPU上实现，多出来的任务轮流调度到每个核心上执行。&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;并发：看上去一起执行，任务数多于CPU核心数；&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;并行：真正的一起执行，任务数小于等于CPU核心数。&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;span&gt;　　实现多任务的方式：&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　　　1、多进程模式&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　　　2、多线程模式&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　　　3、协程模式&lt;/span&gt;&lt;br/&gt;&lt;span&gt;　　　　4、多进程+多线程模式&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;2、进程&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;　　对于操作系统而言，一个任务就是一个进程；&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　进程是系统中程序执行和资源分配的基本单元，每个进程都有自己的数据段、代码段、堆栈段。&lt;/span&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;&lt;span&gt;　　下面是一小段程序，一个单任务的例子。在其中，有两个输出语句分别在在两个不同的循环当中，单任务的执行方式，也就是最初学习时，当一个循环没有结束的时候，无法执行到下面的程序当中。如果想要让两个循环可以同时在执行，就是在实现多任务，当然不是说同时输出，而是两个循环都在执行着。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; time &lt;span&gt;import&lt;/span&gt;&lt;span&gt; sleep
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 只能执行到那一个循环，执行不了run，所以叫单任务&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; run():
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;     &lt;span&gt;while&lt;/span&gt;&lt;span&gt; True:
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;         &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;amp;&amp;amp;&amp;amp;&amp;amp;&amp;amp;&amp;amp;&amp;amp;&amp;amp;&amp;amp;&amp;amp;&amp;amp;&amp;amp;&amp;amp;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;         sleep(1.2&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; 
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; &lt;span&gt;__name__&lt;/span&gt; == &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;__main__&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;     &lt;span&gt;while&lt;/span&gt;&lt;span&gt; True:
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;         &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;**********&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;         sleep(1&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;     run()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　接下来启用多任务，通过进程来实现。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　multiprocessing库：跨平台版本的多进程模块，提供了一个Process类来代表一个进程对象（fork仅适用于Linux）。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　下面的程序是在一个父进程中创建一个子进程，让父进程和子进程可以都在执行，创建方式程序中已经很简洁了。可以自己把这两段程序复制下来运行一下，看看输出的效果。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; multiprocessing &lt;span&gt;import&lt;/span&gt;&lt;span&gt; Process
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; time &lt;span&gt;import&lt;/span&gt;&lt;span&gt; sleep
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; os
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; 
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; run(str):
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; os.getpid()获取当前进程id号&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; os.getppid()获取当前进程的父进程id号&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt;     &lt;span&gt;while&lt;/span&gt;&lt;span&gt; True:
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;         &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;amp;&amp;amp;&amp;amp;&amp;amp;&amp;amp;&amp;amp;&amp;amp;&amp;amp;&amp;amp;&amp;amp;&amp;amp;&amp;amp;&amp;amp;&amp;amp;&amp;amp;%s--%s--%s&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; %&lt;span&gt; (str, os.getpid(), os.getppid()))
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;         sleep(0.5&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; 
&lt;span&gt;12&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; &lt;span&gt;__name__&lt;/span&gt; == &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;__main__&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;     &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;主（父）进程启动 %s&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; %&lt;span&gt; (os.getpid()))
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 创建子进程&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; target说明进程执行的任务&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt;     p = Process(target=run, args=(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;nice&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,))
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 启动进程&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt; &lt;span&gt;    p.start()
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; 
&lt;span&gt;20&lt;/span&gt;     &lt;span&gt;while&lt;/span&gt;&lt;span&gt; True:
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;         &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;**********&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;         sleep(1)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　&lt;span&gt;我想第一个单任务的程序就不必说了吧，就是一个死循环，一直没有执行到下面的run函数。第二段程序是通过多进程实现的多任务，两个循环都能执行到，我把结果截图放下面，最好自己去试一下。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1279674/201811/1279674-20181124180450819-822950632.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;3、父子进程的先后顺序&lt;/h2&gt;
&lt;p&gt;　　&lt;span&gt;上面的多进程的例子中输出了那么多，我们使用&lt;/span&gt;&lt;span&gt;的时候究竟是先执行哪个后执行哪个呢？根据我们的一般思维来说，我们写的主函数其实就是父进程，在主函数中间，要调用的也就是子进程。&lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; multiprocessing &lt;span&gt;import&lt;/span&gt;&lt;span&gt; Process
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; time &lt;span&gt;import&lt;/span&gt;&lt;span&gt; sleep
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; os
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; 
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; run():
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;     &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;启动子进程&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;     &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;子进程结束&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;     sleep(3&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; 
&lt;span&gt;10&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; &lt;span&gt;__name__&lt;/span&gt; == &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;__main__&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;     &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;父进程启动&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;     p = Process(target=&lt;span&gt;run)
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;    p.start()
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; 
&lt;span&gt;15&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 父进程的结束不能影响子进程，让进程等待子进程结束再执行父进程&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt; &lt;span&gt;    p.join()
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; 
&lt;span&gt;18&lt;/span&gt;     &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;父进程结束&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1279674/201811/1279674-20181124181022751-321689384.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;4、全局变量在多个进程中不能共享 &lt;/h2&gt;
&lt;p&gt;　　&lt;span&gt;在多进程的程序当中定义的全局变量在多个进程中是不能共享的，篇幅较长在这里就不举例子了，可以自己试一下。这个也是和稍后要说的线程的一个区别，在线程中，变量是可以共享的，也因此衍生出一些问题，稍后再说。&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;5、启动多个进程 &lt;/h2&gt;
&lt;p&gt;&lt;span&gt;　　在正常工作使用的时候，当然不止有有个一个两个进程，毕竟这一两个也起不到想要的效果。那么就需要采用更多的进程，这时候需要通过进程池来实现，就是在进程池中放好你要建立的进程，然后执行的时候，把他们都启动起来，就可以同时进行了，在一定的环境下可以大大的提高效率。当然这个也和起初提到的有关，如果你的CPU是单核的，那么多进程也只是起到了让几个任务同时在执行着，并没有提高效率，而且启动进程的时候还要花费一些时间，因此在多核CPU当中更能发挥优势。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　在multiprocessing中有个Pool方法，可以实现进程池。在利用进程池时可以设置要启动几个进程，一般情况下，它默认和你电脑的CPU核数一致，也可以自己设置，如果设置的进程数多于CPU核数，那多出来的进程会轮流调度到每个核心上执行。下面是启动多个进程的过程。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;44&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; multiprocessing &lt;span&gt;import&lt;/span&gt;&lt;span&gt; Pool
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; os
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; time
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; random
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; 
&lt;span&gt; 6&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; run(name):
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;     &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;子进程%s启动--%s&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; %&lt;span&gt; (name, os.getpid()))
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;     start =&lt;span&gt; time.time()
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;     time.sleep(random.choice([1,2,3,4,5&lt;span&gt;]))
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;     end =&lt;span&gt; time.time()
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;     &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;子进程%s结束--%s--耗时%.2f&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; % (name, os.getpid(), end-&lt;span&gt;start))
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; 
&lt;span&gt;14&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; &lt;span&gt;__name__&lt;/span&gt; == &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;__main__&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;     &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;启动父进程&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; 
&lt;span&gt;17&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 创建多个进程&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; Pool 进程池 :括号里的数表示可以同时执行的进程数量&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; Pool()默认大小是CPU核心数&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt;     pp = Pool(4&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt; i &lt;span&gt;in&lt;/span&gt; range(5&lt;span&gt;):
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 创建进程，放入进程池，统一管理&lt;/span&gt;
&lt;span&gt;23&lt;/span&gt;         pp.apply_async(run, args=&lt;span&gt;(i,))
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; 
&lt;span&gt;25&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 在调用join之前必须先调用close，调用close之后就不能再继续添加新的进程了&lt;/span&gt;
&lt;span&gt;26&lt;/span&gt; &lt;span&gt;    pp.close()
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 进程池对象调用join还等待进程池中所有的子进程结束&lt;/span&gt;
&lt;span&gt;28&lt;/span&gt; &lt;span&gt;    pp.join()
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; 
&lt;span&gt;30&lt;/span&gt;     &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;结束父进程&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;6、文件拷贝（单进程与多进程对比）&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;（1）单进程实现&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('5bce594d-1b29-45c9-8e2b-14670d1718f9')&quot; readability=&quot;35.5&quot;&gt;&lt;img id=&quot;code_img_closed_5bce594d-1b29-45c9-8e2b-14670d1718f9&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_5bce594d-1b29-45c9-8e2b-14670d1718f9&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('5bce594d-1b29-45c9-8e2b-14670d1718f9',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_5bce594d-1b29-45c9-8e2b-14670d1718f9&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;66&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; multiprocessing &lt;span&gt;import&lt;/span&gt;&lt;span&gt; Pool
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; time
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; os
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; 
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 实现文件的拷贝&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; copyFile(rPath, wPath):
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;     fr = open(rPath, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;rb&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;     fw = open(wPath, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;wb&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;     context =&lt;span&gt; fr.read()
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;    fw.write(context)
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;    fr.close()
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;    fw.close()
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; 
&lt;span&gt;14&lt;/span&gt; path = r&lt;span&gt;'&lt;/span&gt;&lt;span&gt;F:\python_note\线程、协程&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt; toPath = r&lt;span&gt;'&lt;/span&gt;&lt;span&gt;F:\python_note\test&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt; 
&lt;span&gt;17&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 读取path下的所有文件&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt; filesList =&lt;span&gt; os.listdir(path)
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; 
&lt;span&gt;20&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 启动for循环处理每一个文件&lt;/span&gt;
&lt;span&gt;21&lt;/span&gt; start =&lt;span&gt; time.time()
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;for&lt;/span&gt; fileName &lt;span&gt;in&lt;/span&gt;&lt;span&gt; filesList:
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;    copyFile(os.path.join(path,fileName), os.path.join(toPath,fileName))
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; 
&lt;span&gt;25&lt;/span&gt; end =&lt;span&gt; time.time()
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;总耗时：%.2f&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; % (end-start))
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;（2）多进程实现&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('b3558d5c-6447-4549-ba68-3fe41a189c07')&quot; readability=&quot;36&quot;&gt;&lt;img id=&quot;code_img_closed_b3558d5c-6447-4549-ba68-3fe41a189c07&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_b3558d5c-6447-4549-ba68-3fe41a189c07&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('b3558d5c-6447-4549-ba68-3fe41a189c07',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_b3558d5c-6447-4549-ba68-3fe41a189c07&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;67&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; multiprocessing &lt;span&gt;import&lt;/span&gt;&lt;span&gt; Pool
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; time
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; os
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; 
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 实现文件的拷贝&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; copyFile(rPath, wPath):
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;     fr = open(rPath, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;rb&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;     fw = open(wPath, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;wb&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;     context =&lt;span&gt; fr.read()
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;    fw.write(context)
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;    fr.close()
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;    fw.close()
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; 
&lt;span&gt;14&lt;/span&gt; path = r&lt;span&gt;'&lt;/span&gt;&lt;span&gt;F:\python_note\线程、协程&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt; toPath = r&lt;span&gt;'&lt;/span&gt;&lt;span&gt;F:\python_note\test&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt; 
&lt;span&gt;17&lt;/span&gt; 
&lt;span&gt;18&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; &lt;span&gt;__name__&lt;/span&gt; == &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;__main__&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 读取path下的所有文件&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt;     filesList =&lt;span&gt; os.listdir(path)
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; 
&lt;span&gt;22&lt;/span&gt;     start =&lt;span&gt; time.time()
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;     pp = Pool(4&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt; fileName &lt;span&gt;in&lt;/span&gt;&lt;span&gt; filesList:
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;         pp.apply_async(copyFile, args=&lt;span&gt;(os.path.join(
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; &lt;span&gt;            path, fileName), os.path.join(toPath, fileName)))
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; &lt;span&gt;    pp.close()
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; &lt;span&gt;    pp.join()
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;     end =&lt;span&gt; time.time()
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;     &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;总耗时：%.2f&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; % (end - start))
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　上面两个程序是两种方法实现同一个目标的程序，可以将其中的文件路径更换为你自己的路径，可以看到最后计算出的耗时是多少。也许有人发现并不是多进程的效率就高，说的的确没错，因为创建进程也要花费时间，没准启动进程的时间远多让这一个核心运行所有核心用的时间要多。这个例子也只是演示一下如何使用，在大数据的任务下会有更深刻的体验。&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt; 7、进程对象&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;　　我们知道Python是一个面向对象的语言。而且Python中万物皆对象，进程也可以封装成对象，来方便以后自己使用，只要把他封装的足够丰富，提供清晰的接口，以后使用时会快捷很多，这个就根据自己的需求自己可以试一下，不写了。&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt; 8、进程间通信&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;　　上面提到过进程间的变量是不能共享的，那么如果有需要该怎么办？通过队列的方式进行传递。在父进程中创建队列，然后把队列传到每个子进程当中，他们就可以共同对其进行操作。 &lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; multiprocessing &lt;span&gt;import&lt;/span&gt;&lt;span&gt; Process, Queue
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; os
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; time
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; 
&lt;span&gt; 5&lt;/span&gt; 
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; write(q):
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;     &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;启动写子进程%s&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; %&lt;span&gt; (os.getpid()))
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt; chr &lt;span&gt;in&lt;/span&gt; [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;A&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;B&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;C&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;D&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]:
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;        q.put(chr)
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;         time.sleep(1&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;     &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;结束写子进程%s&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; %&lt;span&gt; (os.getpid()))
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; 
&lt;span&gt;13&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; read(q):
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;     &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;启动读子进程%s&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; %&lt;span&gt; (os.getpid()))
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;     &lt;span&gt;while&lt;/span&gt;&lt;span&gt; True:
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;         value =&lt;span&gt; q.get()
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;         &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;value = &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;+&lt;span&gt;value)
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;     &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;结束读子进程%s&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; %&lt;span&gt; (os.getpid()))
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; 
&lt;span&gt;20&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; &lt;span&gt;__name__&lt;/span&gt; == &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;__main__&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 父进程创建队列，并传递给子进程&lt;/span&gt;
&lt;span&gt;22&lt;/span&gt;     q =&lt;span&gt; Queue()
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;     pw = Process(target=write, args=&lt;span&gt;(q,))
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;     pr = Process(target=read, args=&lt;span&gt;(q,))
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; 
&lt;span&gt;26&lt;/span&gt; &lt;span&gt;    pw.start()
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; &lt;span&gt;    pr.start()
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 写进程结束&lt;/span&gt;
&lt;span&gt;29&lt;/span&gt; &lt;span&gt;    pw.join()
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; pr进程里是个死循环，无法等待期结束，只能强行结束&lt;/span&gt;
&lt;span&gt;31&lt;/span&gt; &lt;span&gt;    pr.terminate()
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;     &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;父进程结束&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;1、线程&lt;/h2&gt;
&lt;blockquote&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;在一个进程内部，要同时干多件事，就需要运行多个&quot;子任务&quot;，我们把进程内的多个&quot;子任务&quot;叫做线程&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;线程通常叫做轻型的进程，线程是共享内存空间，并发执行的多任务，每一个线程都共享一个进程的资源&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;线程是最小的执行单元而进程由至少一个线程组成。如何调度进程和线程，完全由操作系统来决定，程序自己不能决定什么时候执行，执行多长时间&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;&lt;span&gt;模块：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;1、_thread模块 低级模块（更接近底层）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;2、threading模块 高级模块，对_thread进行了封装&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;2、启动一个线程&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;　　同样，先给一个多线程的例子，其中，仍然使用run函数作为其中的一个子线程，主函数为父线程。通过threading的Thread方法创建线程并开启，join来等待子线程。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; threading
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; time
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; 
&lt;span&gt; 4&lt;/span&gt; 
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; run():
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;     &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;子线程(%s)启动&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; %&lt;span&gt; (threading.current_thread().name))
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; 
&lt;span&gt; 8&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 实现线程的功能&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt;     time.sleep(1&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;     &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;打印&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;     time.sleep(2&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; 
&lt;span&gt;13&lt;/span&gt;     &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;子线程(%s)结束&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; %&lt;span&gt; (threading.current_thread().name))
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; 
&lt;span&gt;15&lt;/span&gt; 
&lt;span&gt;16&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; &lt;span&gt;__name__&lt;/span&gt; == &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;__main__&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 任何进程都默认会启动一个线程，称为主线程，主线程可以启动新的子线程&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; current_thread()：返回线程的实例&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt;     &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;主线程(%s)启动&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; %&lt;span&gt; (threading.current_thread().name))
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; 
&lt;span&gt;21&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 创建子线程&lt;/span&gt;
&lt;span&gt;22&lt;/span&gt;     t = threading.Thread(target=run, name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;runThread&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;    t.start()
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; 
&lt;span&gt;25&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 等待线程结束&lt;/span&gt;
&lt;span&gt;26&lt;/span&gt; &lt;span&gt;    t.join()
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; 
&lt;span&gt;28&lt;/span&gt;     &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;主线程(%s)结束&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; % (threading.current_thread().name))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;3、线程间数据共享&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;　　多线程和多进程最大的不同在于，多进程中，同一个变量，各自有一份拷贝存在每个进程中，互不影响。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;/span&gt;&lt;span&gt;而多线程所有变量都由所有线程共享。所以任何一个变量都可以被任何一个线程修改，因此，线程之间共享数据最大的危险在于多个线程同时修改一个变量，容易把内容改乱了。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; threading
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; 
&lt;span&gt; 4&lt;/span&gt; num = 10
&lt;span&gt; 5&lt;/span&gt; 
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; run(n):
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;     &lt;span&gt;global&lt;/span&gt;&lt;span&gt; num
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt; i &lt;span&gt;in&lt;/span&gt; range(10000000&lt;span&gt;):
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;         num = num +&lt;span&gt; n
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;         num = num -&lt;span&gt; n
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; 
&lt;span&gt;12&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; &lt;span&gt;__name__&lt;/span&gt; == &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;__main__&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;     t1 = threading.Thread(target=run, args=(6&lt;span&gt;,))
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;     t2 = threading.Thread(target=run, args=(9&lt;span&gt;,))
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; 
&lt;span&gt;16&lt;/span&gt; &lt;span&gt;    t1.start()
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;    t2.start()
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;    t1.join()
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;    t2.join()
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; 
&lt;span&gt;21&lt;/span&gt;     &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;num = &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,num)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;4、线程锁&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;　　在第三小点中已经提到了，多线程的一个缺点就是数据是共享的，如果有两个线程正同时在修改这个数据，就会出现混乱，它自己也不知道该听谁的了，尤其是在运算比较复杂，次数较多的时候，这种错误的机会会更大。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　当然，解决办法也是有的，那就是利用线程锁。加锁的意思就是在其中一个线程正在对数据进行操作时，让其他线程不得介入。这个加锁和释放锁是由人来确定的。&lt;/span&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;确保了这段代码只能由一个线程从头到尾的完整执行&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;阻止了多线程的并发执行，要比不加锁时候效率低。包含锁的代码段只能以单线程模式执行&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;由于可以存在多个锁，不同线程持有不同的锁，并试图获取其他的锁，可能造成死锁导致多个线程挂起，只能靠操作系统强制终止&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; run(n):
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;     &lt;span&gt;global&lt;/span&gt;&lt;span&gt; num
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt; i &lt;span&gt;in&lt;/span&gt; range(10000000&lt;span&gt;):    
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;        lock.acquire()
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;         &lt;span&gt;try&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;             num = num +&lt;span&gt; n
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;             num = num -&lt;span&gt; n
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;         &lt;span&gt;finally&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;             &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 修改完释放锁&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt; &lt;span&gt;            lock.release()
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; 
&lt;span&gt;12&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; &lt;span&gt;__name__&lt;/span&gt; == &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;__main__&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;     t1 = threading.Thread(target=run, args=(6&lt;span&gt;,))
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;     t2 = threading.Thread(target=run, args=(9&lt;span&gt;,))
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; 
&lt;span&gt;16&lt;/span&gt; &lt;span&gt;    t1.start()
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;    t2.start()
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;    t1.join()
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;    t2.join()
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; 
&lt;span&gt;21&lt;/span&gt;     &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;num = &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,num)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　上面这段程序是循环多次num+n-n+n-n的过程，变量n分别设为6和9是在两个不同的线程当中，程序中已经加了锁，你可以先去掉试一下，当循环次数较小的时候也许还能正确，但次数一旦取的较高就会出现混乱。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　加锁是在循环体当中，依次执行加减法，定义中说到确保一个线程从头到尾的完整执行，也就是在计算途中，不会有其他的线程打扰。你可以想一下，如果一个线程执行完加法，正在执行减法，另一个线程进来了，它要先进行加法时的初始sum值该是多少呢，线程二不一定在线程一的什么时候进来，万一刚进来时候，线程一恰好给sum赋值了，而线程二仍然用的是正准备进来时候的sum值，那从这里开始岂不已经分道扬镳了。所以，运算的次数越多，结果会越离谱。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　这个说完了，还有一个小小的改进。你是否记得读写文件时候书写的一种简便形式，通过with来实现，可以避免我们忘记关闭文件，自动帮我们关闭。当然还有一些其他地方也用到了这个方法。这里也同样适用。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt;1&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 与上面代码功能相同,with lock可以自动上锁与解锁&lt;/span&gt;
&lt;span&gt;2&lt;/span&gt; &lt;span&gt;with lock:
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;     num = num +&lt;span&gt; n
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;     num = num - n&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;5、ThreadLocal&lt;/h2&gt;
&lt;blockquote&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;创建一个全局的ThreadLocal对象&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;每个线程有独立的存储空间&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;每个线程对ThreadLocal对象都可以读写，但是互不影响&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;span&gt;　　根据名字也可以看出，也就是在本地建个连接，所有的操作在本地进行，每个线程之间没有数据的影响。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; threading
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; 
&lt;span&gt; 4&lt;/span&gt; num =&lt;span&gt; 0
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; local =&lt;span&gt; threading.local()
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; run(x, n):
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;     x = x +&lt;span&gt; n
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;     x = x -&lt;span&gt; n
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; 
&lt;span&gt;11&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; func(n):
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 每个线程都有local.x&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt;     local.x =&lt;span&gt; num
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt; i &lt;span&gt;in&lt;/span&gt; range(10000000&lt;span&gt;):
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;        run(local.x, n)
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;     &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%s-%d&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; %&lt;span&gt; (threading.current_thread().name, local.x))
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; 
&lt;span&gt;18&lt;/span&gt; 
&lt;span&gt;19&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; &lt;span&gt;__name__&lt;/span&gt; == &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;__main__&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;     t1 = threading.Thread(target=func, args=(6&lt;span&gt;,))
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;     t2 = threading.Thread(target=func, args=(9&lt;span&gt;,))
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; 
&lt;span&gt;23&lt;/span&gt; &lt;span&gt;    t1.start()
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; &lt;span&gt;    t2.start()
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; &lt;span&gt;    t1.join()
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; &lt;span&gt;    t2.join()
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; 
&lt;span&gt;28&lt;/span&gt;     &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;num = &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,num)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;6、控制线程数量&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;'''&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;控制线程数量是指控制线程同时触发的数量，可以拿下来这段代码运行一下，下面启动了5个线程，但是他们会两个两个的进行
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;'''&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; threading
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; time
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 控制并发执行线程的数量&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt; sem = threading.Semaphore(2&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; 
&lt;span&gt;10&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; run():
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;    with sem:
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt; i &lt;span&gt;in&lt;/span&gt; range(10&lt;span&gt;):
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;             &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%s---%d&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; %&lt;span&gt; (threading.current_thread().name, i))
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;             time.sleep(1&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; 
&lt;span&gt;16&lt;/span&gt; 
&lt;span&gt;17&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; &lt;span&gt;__name__&lt;/span&gt; == &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;__main__&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt; i &lt;span&gt;in&lt;/span&gt; range(5&lt;span&gt;):
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;         threading.Thread(target=run).start()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　上面的程序是有多个线程，但是每次限制同时执行的线程，通俗点说就是限制并发线程的上限；除此之外，也可以限制线程数量的下限，也就是至少达到多少个线程才能触发。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; threading
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; time
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; 
&lt;span&gt; 4&lt;/span&gt; 
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 凑够一定数量的线程才会执行，否则一直等着&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt; bar = threading.Barrier(4&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; 
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; run():
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;     &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%s--start&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; %&lt;span&gt; (threading.current_thread().name))
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;     time.sleep(1&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;    bar.wait()
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;     &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%s--end&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; %&lt;span&gt; (threading.current_thread().name))
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; 
&lt;span&gt;14&lt;/span&gt; 
&lt;span&gt;15&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; &lt;span&gt;__name__&lt;/span&gt; == &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;__main__&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt; i &lt;span&gt;in&lt;/span&gt; range(5&lt;span&gt;):
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;         threading.Thread(target=run).start()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;7、定时线程&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; threading
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; 
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; run():
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;     &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;***********************&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 延时执行线程&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt; t = threading.Timer(5&lt;span&gt;, run)
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;t.start()
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; 
&lt;span&gt;11&lt;/span&gt; &lt;span&gt;t.join()
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;父线程结束&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;8、线程通信&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; threading
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; time
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; 
&lt;span&gt; 4&lt;/span&gt; 
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; func():
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 事件对象&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt;     event =&lt;span&gt; threading.Event()
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt;&lt;span&gt; run():
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt; i &lt;span&gt;in&lt;/span&gt; range(5&lt;span&gt;):
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;             &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 阻塞，等待事件的触发&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt; &lt;span&gt;            event.wait()
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;             &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 重置阻塞，使后面继续阻塞&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt; &lt;span&gt;            event.clear()
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;             &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;**************&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;     t = threading.Thread(target=&lt;span&gt;run).start()
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; event
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; 
&lt;span&gt;18&lt;/span&gt; e =&lt;span&gt; func()
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; 
&lt;span&gt;20&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 触发事件&lt;/span&gt;
&lt;span&gt;21&lt;/span&gt; &lt;span&gt;for&lt;/span&gt; i &lt;span&gt;in&lt;/span&gt; range(5&lt;span&gt;):
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;     time.sleep(2&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;     e.set()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;9、一个小栗子&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;　　这个例子是用了生产者和消费者来模拟，要进行数据通信，还引入了队列。先来理解一下。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;44&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; threading
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; queue
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; time
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; random
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; 
&lt;span&gt; 6&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 生产者&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; product(id, q):
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;     &lt;span&gt;while&lt;/span&gt;&lt;span&gt; True:
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;         num = random.randint(0, 10000&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;        q.put(num)
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;         &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;生产者%d生产了%d数据放入了队列&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; %&lt;span&gt; (id, num))
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;         time.sleep(3&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 任务完成&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt; &lt;span&gt;    q.task_done()
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; 
&lt;span&gt;17&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 消费者&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; customer(id, q):
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;     &lt;span&gt;while&lt;/span&gt;&lt;span&gt; True:
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;         item =&lt;span&gt; q.get()
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; item &lt;span&gt;is&lt;/span&gt;&lt;span&gt; None:
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;             &lt;span&gt;break&lt;/span&gt;
&lt;span&gt;23&lt;/span&gt;         &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;消费者%d消费了%d数据&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; %&lt;span&gt; (id, item))
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;         time.sleep(2&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 任务完成&lt;/span&gt;
&lt;span&gt;26&lt;/span&gt; &lt;span&gt;    q.task_done()
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; 
&lt;span&gt;28&lt;/span&gt; 
&lt;span&gt;29&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; &lt;span&gt;__name__&lt;/span&gt; == &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;__main__&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 消息队列&lt;/span&gt;
&lt;span&gt;31&lt;/span&gt;     q =&lt;span&gt; queue.Queue()
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; 
&lt;span&gt;33&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 启动生产者&lt;/span&gt;
&lt;span&gt;34&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt; i &lt;span&gt;in&lt;/span&gt; range(4&lt;span&gt;):
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt;         threading.Thread(target=product, args=&lt;span&gt;(i, q)).start()
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt; 
&lt;span&gt;37&lt;/span&gt;     &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 启动消费者&lt;/span&gt;
&lt;span&gt;38&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt; i &lt;span&gt;in&lt;/span&gt; range(3&lt;span&gt;):
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt;         threading.Thread(target=customer, args=(i, q)).start()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;10、线程调度&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; threading
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; time
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; 
&lt;span&gt; 4&lt;/span&gt; 
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 线程条件变量&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt; cond =&lt;span&gt; threading.Condition()
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; 
&lt;span&gt; 8&lt;/span&gt; 
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; run():
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;    with cond:
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt; i &lt;span&gt;in&lt;/span&gt; range(0, 10, 2&lt;span&gt;):
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;             &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(threading.current_thread().name, i)
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;             time.sleep(1&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;             cond.wait()  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 阻塞&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt;             cond.notify()  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 告诉另一个线程可以执行&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt; 
&lt;span&gt;17&lt;/span&gt; 
&lt;span&gt;18&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; run2():
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;    with cond:
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt; i &lt;span&gt;in&lt;/span&gt; range(1, 10, 2&lt;span&gt;):
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;             &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(threading.current_thread().name, i)
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;             time.sleep(1&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;            cond.notify()
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; &lt;span&gt;            cond.wait()
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; 
&lt;span&gt;26&lt;/span&gt; 
&lt;span&gt;27&lt;/span&gt; threading.Thread(target=&lt;span&gt;run).start()
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; threading.Thread(target=run2).start()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;1、协程&lt;/h2&gt;
&lt;blockquote&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;子程序/子函数：在所有语言中都是层级调用，比如A调用B，在B执行的工程中又可以调用C，C执行完毕返回，B执行完毕返回最后是A执行完毕。是通过栈实现的，一个线程就是一个子程序，子程序调用总是一个入口，一次返回，调用的顺序是明确的&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;协程：看上去也是子程序，但执行过程中，在子程序的内部可中断，然后转而执行别的子程序，不是函数调用，有点类似CPU中断&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 这是一个子程序的调用&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; C():
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;     &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;C--start&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;     &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;C--end&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; 
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; B():
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;     &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;B--start&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;    C()
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;     &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;B--end&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; 
&lt;span&gt;11&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; A():
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;     &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;A--start&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;    B()
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;     &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;A--end&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; 
&lt;span&gt;16&lt;/span&gt; A()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;协程与子程序调用的结果类似，但不是通过在函数中调用另一个函数&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;协程执行起来有点像线程，但协程的特点在于是一个线程&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;与线程相比的优点：协程的执行效率极高，因为只有一个线程，也不存在同时写变量的冲突，在协程中共享资源不加锁，只需要判断状态&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;h2&gt;2、协程的原理&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; python对协程的支持是通过generator实现的&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; run():
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;     &lt;span&gt;print&lt;/span&gt;(1&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;     &lt;span&gt;yield&lt;/span&gt; 10
&lt;span&gt; 5&lt;/span&gt;     &lt;span&gt;print&lt;/span&gt;(2&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;     &lt;span&gt;yield&lt;/span&gt; 20
&lt;span&gt; 7&lt;/span&gt;     &lt;span&gt;print&lt;/span&gt;(3&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;     &lt;span&gt;yield&lt;/span&gt; 30
&lt;span&gt; 9&lt;/span&gt; 
&lt;span&gt;10&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 协程的最简单风格，控制函数的阶段执行，节约线程或者进程的切换&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 返回值是一个生成器&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt; m =&lt;span&gt; run()
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(next(m))
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(next(m))
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;(next(m))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;3、数据传输&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; python对协程的支持是通过generator实现的&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; run():
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;     &lt;span&gt;print&lt;/span&gt;(1&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;     &lt;span&gt;yield&lt;/span&gt; 10
&lt;span&gt; 5&lt;/span&gt;     &lt;span&gt;print&lt;/span&gt;(2&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;     &lt;span&gt;yield&lt;/span&gt; 20
&lt;span&gt; 7&lt;/span&gt;     &lt;span&gt;print&lt;/span&gt;(3&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;     &lt;span&gt;yield&lt;/span&gt; 30
&lt;span&gt; 9&lt;/span&gt; 
&lt;span&gt;10&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 协程的最简单风格，控制函数的阶段执行，节约线程或者进程的切换&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt; &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 返回值是一个生成器&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt; m =&lt;span&gt; run()
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(next(m))
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(next(m))
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;(next(m))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;4、小栗子&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; product(c):
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;    c.send(None)
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt; i &lt;span&gt;in&lt;/span&gt; range(5&lt;span&gt;):
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;         &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;生产者产生数据%d&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; %&lt;span&gt; (i))
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;         r =&lt;span&gt; c.send(str(i))
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;         &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;消费者消费了数据%s&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; %&lt;span&gt; (r))
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;    c.close()
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; 
&lt;span&gt; 9&lt;/span&gt; 
&lt;span&gt;10&lt;/span&gt; &lt;span&gt;def&lt;/span&gt;&lt;span&gt; customer():
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;     data = &lt;span&gt;&quot;&quot;&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt;     &lt;span&gt;while&lt;/span&gt;&lt;span&gt; True:
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;         n = &lt;span&gt;yield&lt;/span&gt;&lt;span&gt; data
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; &lt;span&gt;not&lt;/span&gt;&lt;span&gt; n:
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt;         &lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;消费者消费了%s&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; %&lt;span&gt; (n))
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;         data = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;200&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt; 
&lt;span&gt;19&lt;/span&gt; 
&lt;span&gt;20&lt;/span&gt; c =&lt;span&gt; customer()
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; product(c)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

</description>
<pubDate>Sat, 24 Nov 2018 13:38:00 +0000</pubDate>
<dc:creator>渔单渠</dc:creator>
<og:description>一、进程 1、多任务原理 多任务是指操作系统同时可以运行多个任务。 单核CPU实现多任务原理：操作系统轮流让各个任务交替执行； 多核CPU实现多任务原理：真正的执行多任务只能在多核CPU上实现，多出来</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/yudanqu/p/10013049.html</dc:identifier>
</item>
</channel>
</rss>