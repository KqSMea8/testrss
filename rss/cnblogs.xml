<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>自己造轮子系列之OOM框架AutoMapper - 7tiny</title>
<link>http://www.cnblogs.com/7tiny/p/8764548.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/7tiny/p/8764548.html</guid>
<description>&lt;h2&gt;【前言】&lt;/h2&gt;
&lt;p&gt;OOM框架想必大家在Web开发中是使用频率非常之高的，如果还不甚了解OOM框架，那么我们对OOM框架稍作讲解。&lt;/p&gt;
&lt;p&gt;OOM顾名思义，Object-Object-Mapping实体间相互转换。常见的使用场景有两个实体要通过DTO对象进行页面的渲染，那么我们就需要通过对DTO对象的一个一个属性进行赋值，最终返回。整个过程是单调又繁琐的，甚至严重影响了代码的整洁性。更有强迫症高度患者可能看着这一坨shi一样的代码阵阵痉挛...因此，我们就想，能不能用一种简介的方法进行自动映射两个，三个甚至更多的对象，避免写这么一些低级乏味的代码。&lt;/p&gt;
&lt;p&gt;于是乎，一大波一大波的自动映射框架悠然而生。业内比较出名的有：AutoMapper，EmitMapper，NLiteMapper，TinyMapper等。在这里，先抛去他们不谈，毕竟未必个人觉得好用，或者我就喜欢造轮子。本篇将讲解一波自己造的轮子OOM框架AutoMapper，并且有造轮子过程中的持续优化，我想，这便是学习的最好过程吧。&lt;/p&gt;
&lt;h2&gt;【实现思路】&lt;/h2&gt;
&lt;p&gt;　　AutoMapper既然是OOM框架，那么就离不开Object，Object必然又涉及到类型。那么，泛型是必不可少的。&lt;/p&gt;
&lt;p&gt;　　框架要简洁易用，并且能兼容多数场景。于是，我们准备从以下几方面进行设计：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;支持自动映射，能通过调用一个方法自动映射实体；&lt;/li&gt;
&lt;li&gt;支持特殊属性特殊处理的扩展功能，特殊处理的部分可以特殊进行赋值；&lt;/li&gt;
&lt;li&gt;有不想进行映射的属性能够进行屏蔽；&lt;/li&gt;
&lt;li&gt;映射的名称要支持配置（有名字不同的场景无法自动映射，手动配置映射关系进行映射）；&lt;/li&gt;
&lt;li&gt;配置不能加配置文件，通过标签的方式（约定优于配置）；&lt;/li&gt;
&lt;li&gt;性能要卓越；&lt;/li&gt;
&lt;li&gt;代码要通用，版本支持度要高（使用.net standard类库，可同时支持.net framework 和 .netcore）；&lt;/li&gt;
&lt;/ol&gt;&lt;h2&gt;【实现过程】&lt;/h2&gt;
&lt;p&gt;　　项目结构：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/998608/201804/998608-20180409212221047-2034510478.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h4&gt;　　依据上面的思路，第一时间想到的便是通过反射获取到第一个对象的属性值，并动态创建第二个对象，遍历属性赋值，再添加细节处理。SoEasy！于是便兴冲冲完成了第一版。&lt;/h4&gt;
&lt;p&gt;　　首先构造了几个特性标签类，用于标注是否要映射，以及映射的自定义别名的配置。&lt;/p&gt;
&lt;p&gt;　　DoNotMapperAttribute：不进行映射该属性&lt;/p&gt;
&lt;p&gt;　　MapperAttribute：添加自定义名称的映射配置&lt;/p&gt;
&lt;p&gt;　　MapperClassAttribute：该类支持映射（目前没有实际应用）&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System;
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; 
&lt;span&gt;3&lt;/span&gt; &lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; SevenTiny.Bantina.AutoMapper
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt;     [AttributeUsage(AttributeTargets.Property, Inherited = &lt;span&gt;true&lt;/span&gt;&lt;span&gt;)]
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; DoNotMapperAttribute :Attribute
&lt;/span&gt;&lt;span&gt;7&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;8&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;9&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Linq;
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Reflection;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; 
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; SevenTiny.Bantina.AutoMapper
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;     [AttributeUsage(AttributeTargets.Property, Inherited = &lt;span&gt;true&lt;/span&gt;&lt;span&gt;)]
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; MapperAttribute : Attribute
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; TargetName { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; 
&lt;span&gt;12&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt;&lt;span&gt; MapperAttribute() { }
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; MapperAttribute(&lt;span&gt;string&lt;/span&gt;&lt;span&gt; targetName)
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;             &lt;span&gt;this&lt;/span&gt;.TargetName =&lt;span&gt; targetName;
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; 
&lt;span&gt;18&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;&lt;span&gt; GetTargetName(PropertyInfo property)
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;             &lt;span&gt;var&lt;/span&gt; attr = property.GetCustomAttributes&amp;lt;MapperAttribute&amp;gt;(&lt;span&gt;true&lt;/span&gt;&lt;span&gt;).FirstOrDefault();
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; attr != &lt;span&gt;null&lt;/span&gt; ? (attr &lt;span&gt;as&lt;/span&gt; MapperAttribute).TargetName ?? &lt;span&gt;default&lt;/span&gt;(&lt;span&gt;string&lt;/span&gt;) : &lt;span&gt;default&lt;/span&gt;(&lt;span&gt;string&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Linq;
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; 
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; SevenTiny.Bantina.AutoMapper
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;     [AttributeUsage(AttributeTargets.Class | AttributeTargets.Field, Inherited = &lt;span&gt;true&lt;/span&gt;&lt;span&gt;)]
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; MapperClassAttribute : Attribute
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; Name { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;&lt;span&gt; GetName(Type type)
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;             &lt;span&gt;var&lt;/span&gt; attr = type.GetCustomAttributes(&lt;span&gt;typeof&lt;/span&gt;(MapperClassAttribute), &lt;span&gt;true&lt;/span&gt;&lt;span&gt;).FirstOrDefault();
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; attr != &lt;span&gt;null&lt;/span&gt; ? (attr &lt;span&gt;as&lt;/span&gt; MapperClassAttribute).Name ?? &lt;span&gt;default&lt;/span&gt;(&lt;span&gt;string&lt;/span&gt;) : &lt;span&gt;default&lt;/span&gt;(&lt;span&gt;string&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; }　
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;第一版反射实现代码：&lt;/h4&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;62&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;sealed&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Mapper
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;         &lt;span&gt;private&lt;/span&gt;&lt;span&gt; Mapper() { }
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt;&lt;span&gt; Init Source Value Dic
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;typeparam name=&quot;TSource&quot;&amp;gt;&amp;lt;/typeparam&amp;gt;&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;source&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt;         &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; Dictionary&amp;lt;&lt;span&gt;string&lt;/span&gt;, &lt;span&gt;object&lt;/span&gt;&amp;gt; Initdic&amp;lt;TSource&amp;gt;&lt;span&gt;(TSource source)
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;             Dictionary&amp;lt;&lt;span&gt;string&lt;/span&gt;, &lt;span&gt;object&lt;/span&gt;&amp;gt; dic = &lt;span&gt;new&lt;/span&gt; Dictionary&amp;lt;&lt;span&gt;string&lt;/span&gt;, &lt;span&gt;object&lt;/span&gt;&amp;gt;&lt;span&gt;();
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;             &lt;span&gt;foreach&lt;/span&gt; (PropertyInfo property &lt;span&gt;in&lt;/span&gt; &lt;span&gt;typeof&lt;/span&gt;&lt;span&gt;(TSource).GetProperties())
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;                 &lt;span&gt;string&lt;/span&gt; targetPropertyName =&lt;span&gt; MapperAttribute.GetTargetName(property);
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;string&lt;/span&gt;&lt;span&gt;.IsNullOrEmpty(targetPropertyName))
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;                {
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;                     &lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;dic.ContainsKey(targetPropertyName))
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;                    {
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;                        dic.Add(targetPropertyName, property.GetValue(source));
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;                    }
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;                 &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;dic.ContainsKey(property.Name))
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; &lt;span&gt;                {
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; &lt;span&gt;                    dic.Add(property.Name, property.GetValue(source));
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt; dic;
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span&gt;31&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt;&lt;span&gt; SetValue from propertyinfo and sourceDictionary
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span&gt;33&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;typeparam name=&quot;TValue&quot;&amp;gt;&amp;lt;/typeparam&amp;gt;&lt;/span&gt;
&lt;span&gt;34&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;value&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;span&gt;35&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;propertyInfos&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;span&gt;36&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;sourceDic&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;span&gt;37&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
&lt;span&gt;38&lt;/span&gt;         &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; TValue SetValue&amp;lt;TValue&amp;gt;(TValue value, PropertyInfo[] propertyInfos, Dictionary&amp;lt;&lt;span&gt;string&lt;/span&gt;, &lt;span&gt;object&lt;/span&gt;&amp;gt; sourceDic, Dictionary&amp;lt;&lt;span&gt;string&lt;/span&gt;, &lt;span&gt;string&lt;/span&gt;&amp;gt; keys) &lt;span&gt;where&lt;/span&gt; TValue : &lt;span&gt;class&lt;/span&gt;
&lt;span&gt;39&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt;             &lt;span&gt;foreach&lt;/span&gt; (PropertyInfo property &lt;span&gt;in&lt;/span&gt;&lt;span&gt; propertyInfos)
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;keys.ContainsKey(property.Name))
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt; &lt;span&gt;                {
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt;                     &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (sourceDic.ContainsKey(property.Name))
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt; &lt;span&gt;                    {
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt;                         &lt;span&gt;try&lt;/span&gt;
&lt;span&gt;47&lt;/span&gt; &lt;span&gt;                        {
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt; &lt;span&gt;                            property.SetValue(value, sourceDic[property.Name]);
&lt;/span&gt;&lt;span&gt;49&lt;/span&gt;                             keys.Add(property.Name, &lt;span&gt;string&lt;/span&gt;&lt;span&gt;.Empty);
&lt;/span&gt;&lt;span&gt;50&lt;/span&gt; &lt;span&gt;                        }
&lt;/span&gt;&lt;span&gt;51&lt;/span&gt;                         &lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception)
&lt;/span&gt;&lt;span&gt;52&lt;/span&gt; &lt;span&gt;                        {
&lt;/span&gt;&lt;span&gt;53&lt;/span&gt;                             property.SetValue(value, &lt;span&gt;null&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;54&lt;/span&gt; &lt;span&gt;                        }
&lt;/span&gt;&lt;span&gt;55&lt;/span&gt; &lt;span&gt;                    }
&lt;/span&gt;&lt;span&gt;56&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;57&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;58&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt; value;
&lt;/span&gt;&lt;span&gt;59&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;60&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span&gt;61&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt;&lt;span&gt; AutoMapper
&lt;/span&gt;&lt;span&gt;62&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span&gt;63&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;typeparam name=&quot;TValue&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;value type&lt;/span&gt;&lt;span&gt;&amp;lt;/typeparam&amp;gt;&lt;/span&gt;
&lt;span&gt;64&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;typeparam name=&quot;TSource&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;source type&lt;/span&gt;&lt;span&gt;&amp;lt;/typeparam&amp;gt;&lt;/span&gt;
&lt;span&gt;65&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;source&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;span&gt;66&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
&lt;span&gt;67&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; TValue AutoMapper&amp;lt;TValue, TSource&amp;gt;(TSource source) &lt;span&gt;where&lt;/span&gt; TValue : &lt;span&gt;class&lt;/span&gt; &lt;span&gt;where&lt;/span&gt; TSource : &lt;span&gt;class&lt;/span&gt;
&lt;span&gt;68&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;69&lt;/span&gt;             TValue value = Activator.CreateInstance&amp;lt;TValue&amp;gt;&lt;span&gt;();
&lt;/span&gt;&lt;span&gt;70&lt;/span&gt;             PropertyInfo[] propertyInfos = &lt;span&gt;typeof&lt;/span&gt;&lt;span&gt;(TValue).GetProperties();
&lt;/span&gt;&lt;span&gt;71&lt;/span&gt;             Dictionary&amp;lt;&lt;span&gt;string&lt;/span&gt;, &lt;span&gt;string&lt;/span&gt;&amp;gt; keys = &lt;span&gt;new&lt;/span&gt; Dictionary&amp;lt;&lt;span&gt;string&lt;/span&gt;, &lt;span&gt;string&lt;/span&gt;&amp;gt;&lt;span&gt;();
&lt;/span&gt;&lt;span&gt;72&lt;/span&gt;             value =&lt;span&gt; SetValue(value, propertyInfos, Initdic(source), keys);
&lt;/span&gt;&lt;span&gt;73&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt; value;
&lt;/span&gt;&lt;span&gt;74&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;75&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span&gt;76&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt;&lt;span&gt; AutoMapper,Support for Use Action to custom special fields.
&lt;/span&gt;&lt;span&gt;77&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span&gt;78&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;typeparam name=&quot;TValue&quot;&amp;gt;&amp;lt;/typeparam&amp;gt;&lt;/span&gt;
&lt;span&gt;79&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;typeparam name=&quot;TSource&quot;&amp;gt;&amp;lt;/typeparam&amp;gt;&lt;/span&gt;
&lt;span&gt;80&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;source&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;span&gt;81&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;action&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;span&gt;82&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
&lt;span&gt;83&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; TValue AutoMapper&amp;lt;TValue, TSource&amp;gt;(TSource source, Action&amp;lt;TValue&amp;gt; action) &lt;span&gt;where&lt;/span&gt; TValue : &lt;span&gt;class&lt;/span&gt; &lt;span&gt;where&lt;/span&gt; TSource : &lt;span&gt;class&lt;/span&gt;
&lt;span&gt;84&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;85&lt;/span&gt;             TValue value = Activator.CreateInstance&amp;lt;TValue&amp;gt;&lt;span&gt;();
&lt;/span&gt;&lt;span&gt;86&lt;/span&gt;             PropertyInfo[] propertyInfos = &lt;span&gt;typeof&lt;/span&gt;&lt;span&gt;(TValue).GetProperties();
&lt;/span&gt;&lt;span&gt;87&lt;/span&gt;             Dictionary&amp;lt;&lt;span&gt;string&lt;/span&gt;, &lt;span&gt;string&lt;/span&gt;&amp;gt; keys = &lt;span&gt;new&lt;/span&gt; Dictionary&amp;lt;&lt;span&gt;string&lt;/span&gt;, &lt;span&gt;string&lt;/span&gt;&amp;gt;&lt;span&gt;();
&lt;/span&gt;&lt;span&gt;88&lt;/span&gt;             value =&lt;span&gt; SetValue(value, propertyInfos, Initdic(source), keys);
&lt;/span&gt;&lt;span&gt;89&lt;/span&gt; &lt;span&gt;            action(value);
&lt;/span&gt;&lt;span&gt;90&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt; value;
&lt;/span&gt;&lt;span&gt;91&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;92&lt;/span&gt;     }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;由于思路清晰，实现起来也是很容易的。&lt;/p&gt;
&lt;p&gt;通过传入两个泛型（一个输入，一个输出），然后获取到其中一个的属性，并遍历另一个的属性，如果相同，则直接赋值（当然有特性标签部分的细节处理）。&lt;/p&gt;
&lt;p&gt;由于有些属性已经赋值过了，再次遇到会重新扫描赋值，降低了性能和影响了逻辑性，这里做了Dictionary的暂时缓存，以便扫描过的值不再进行赋值。&lt;/p&gt;
&lt;p&gt;特殊的值，我们使用了Action&amp;lt;T&amp;gt; action 匿名委托的方式进行赋值，提供了特殊处理的能力。&lt;/p&gt;
&lt;p&gt;我们下面进行一波使用，简单封装一个多次调用的测试方法：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; TimeSpan Caculate(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; executTimes, Action action)
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;    Stopwatch sw = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Stopwatch();
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;   sw.Start();
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;    &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; executTimes; i++&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;   {
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;     action();
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;   }
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;   sw.Stop();
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;    &lt;span&gt;return&lt;/span&gt;&lt;span&gt; sw.Elapsed;
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;简单写一个控制台应用程序，并传入参数100万次调用，并打印执行用时：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; Student1 stu1 = &lt;span&gt;new&lt;/span&gt; Student1 { Uid =&lt;span&gt; Guid.NewGuid() };
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;  Student5 stu5 = &lt;span&gt;new&lt;/span&gt; Student5 { HealthLevel = &lt;span&gt;100&lt;/span&gt;, SchoolClass = &lt;span&gt;new&lt;/span&gt; SchoolClass { Name = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;class1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; } };
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; 
&lt;span&gt;4&lt;/span&gt;  &lt;span&gt;var&lt;/span&gt; test1 = StopwatchHelper.Caculate(&lt;span&gt;10000&lt;/span&gt;, () =&amp;gt;
&lt;span&gt;5&lt;/span&gt; &lt;span&gt; {
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt;     Student stu = Mapper.AutoMapper&amp;lt;Student, Student5&amp;gt;(stu5, t =&amp;gt; t.Name = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;jony&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;7&lt;/span&gt; &lt;span&gt; });
&lt;/span&gt;&lt;span&gt;8&lt;/span&gt;  Console.WriteLine(test1.TotalMilliseconds);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/998608/201804/998608-20180409213508610-1104284381.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h4&gt;执行100w次大概需要3654毫秒，也就是3.6秒。&lt;/h4&gt;
&lt;h4&gt;虽说100万次小程序是可以忽略的，但是对于高并发的场景100万次再平常不过了，这个性能是不能忍受的！&lt;/h4&gt;
&lt;p&gt;再看一眼直接调用的性能：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; Student5 stu5 = &lt;span&gt;new&lt;/span&gt; Student5 { HealthLevel = &lt;span&gt;100&lt;/span&gt;, SchoolClass = &lt;span&gt;new&lt;/span&gt; SchoolClass { Name = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;class1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; } };
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; 
&lt;span&gt;3&lt;/span&gt; &lt;span&gt;var&lt;/span&gt; test1 = StopwatchHelper.Caculate(&lt;span&gt;1000000&lt;/span&gt;, () =&amp;gt;
&lt;span&gt;4&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt;     Student stu = &lt;span&gt;new&lt;/span&gt; Student { HealthLevel = stu5.HealthLevel, SchoolClass =&lt;span&gt; stu5.SchoolClass };
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt; &lt;span&gt;});
&lt;/span&gt;&lt;span&gt;7&lt;/span&gt; Console.WriteLine(test1.TotalMilliseconds);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/998608/201804/998608-20180409213929830-1111932209.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h4&gt;直接最简单New对象赋值的操作耗时是100万次34毫秒，也就是0.034秒的样子差距还是挺大的。&lt;/h4&gt;
&lt;p&gt;可见这样的性能是注定不可能成为一个好用的组件的！更别谈高性能了。&lt;/p&gt;
&lt;p&gt;于是便开始了在茫茫的代码库中淘取黑科技的一波操作。很感谢现代的搜索引擎，让我能在迷失的黑夜中找到一盏明灯。&lt;/p&gt;
&lt;h4&gt;&lt;span&gt;反射造成的性能问题是我迫切要解决的，反射性能的规避通常有以下几种方式进行提升：&lt;/span&gt;&lt;/h4&gt;
&lt;ol&gt;&lt;li&gt;缓存，高并发场景下绝对是要避免每次都去调用反射代码的，将反射部分尽量缓存下来。&lt;/li&gt;
&lt;li&gt;调用C/C++代码库，但是首先要懂C/C++，其次要保证调用dll的时间要将反射的时间换取回来。&lt;/li&gt;
&lt;li&gt;通过Expression Tree的方式构造表达式树，然后将表达式树缓存起来，这样在之后调用的代码都是等价于直接执行代码的。&lt;/li&gt;
&lt;li&gt;通过IL Emit的方式动态构造代码，更为底层的IL代码提供更高的效率。&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;在这四种方案中，我聚焦到了最后两种上。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
Activator.CreateInstance&amp;lt;TValue&amp;gt;()
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;因为反射即便再怎么缓存，上述构建新实例的方法也是很耗费性能的（更别说由于临时工赶.net类库的问题，哈哈哈，太搞笑，可以参考此博文跟随老一辈程序员关于该方法性能的探讨以及源码的剖析&lt;a href=&quot;http://www.cnblogs.com/leven/archive/2009/12/08/instanse_create_comparison.html&quot; target=&quot;_blank&quot;&gt;http://www.cnblogs.com/leven/archive/2009/12/08/instanse_create_comparison.html&lt;/a&gt;），其次还有通过属性去获取值。这些都是难以通过缓存解决的。&lt;/p&gt;
&lt;p&gt;IL Emit的实现方式是比较复杂的，稍一不慎，还容易造成内存泄漏等严重的问题。让我一个半吊子程序员来写这么细致的代码，暂时选择回避。&lt;/p&gt;
&lt;p&gt;我选择了第三种：通过Expression Tree的方式构造表达式树，并且缓存委托方法进行调用的方法。表达式树这里就不进行详细讲解了，会放在其他博文里面单独讲解（也是一大块学问哦）。&lt;/p&gt;
&lt;p&gt;和第一版大同小异，也是通过泛型的思想进行构建。不同的是泛型从方法上传递改为了类上传递，这也是由于缓存Func部分的泛型难以直接传递转换的方式，这个对使用并无太大影响。&lt;/p&gt;
&lt;h4&gt;第二版 Expression Tree 表达式树方式实现代码：&lt;/h4&gt;
&lt;p&gt;为了代码通用，抽取了公共部分构造了一个内部的类进行对表达式树的构建操作：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;45&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;********************************************************
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt; * CopyRight: 7TINY CODE BUILDER. 
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt; * Version: 5.0.0
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt; * Author: 7tiny
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt; * Address: Earth
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt; * Create: 2018-04-09 16:55:16
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt; * Modify: 2018-04-09 16:55:16
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt; * E-mail: dong@7tiny.com | sevenTiny@foxmail.com 
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt; * GitHub: &lt;/span&gt;&lt;span&gt;https://github.com/sevenTiny&lt;/span&gt; 
&lt;span&gt;10&lt;/span&gt; &lt;span&gt; * Personal web site: &lt;/span&gt;&lt;span&gt;http://www.7tiny.com&lt;/span&gt; 
&lt;span&gt;11&lt;/span&gt; &lt;span&gt; * Technical WebSit: &lt;/span&gt;&lt;span&gt;http://www.cnblogs.com/7tiny/&lt;/span&gt; 
&lt;span&gt;12&lt;/span&gt; &lt;span&gt; * Description: 
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt; * Thx , Best Regards ~
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt; ********************************************************&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System;
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Collections.Generic;
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Linq;
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Linq.Expressions;
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Reflection;
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; 
&lt;span&gt;21&lt;/span&gt; &lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; SevenTiny.Bantina.AutoMapper
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;     &lt;span&gt;internal&lt;/span&gt; &lt;span&gt;sealed&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; MapperExpressionCommon
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span&gt;26&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt;&lt;span&gt; structure func
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span&gt;28&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;outType&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;span&gt;29&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;inTypes&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;span&gt;30&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;memberInitExpression&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;span&gt;31&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;parameterExpressionList&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;span&gt;32&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; GetFunc(Type outType, Type[] inTypes, &lt;span&gt;out&lt;/span&gt; MemberInitExpression memberInitExpression, &lt;span&gt;out&lt;/span&gt; List&amp;lt;ParameterExpression&amp;gt;&lt;span&gt; parameterExpressionList)
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt;             parameterExpressionList = &lt;span&gt;new&lt;/span&gt; List&amp;lt;ParameterExpression&amp;gt;&lt;span&gt;();
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt;             List&amp;lt;MemberBinding&amp;gt; memberBindingList = &lt;span&gt;new&lt;/span&gt; List&amp;lt;MemberBinding&amp;gt;&lt;span&gt;();
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt;             PropertyInfo[] propertyInfos =&lt;span&gt; outType.GetProperties();
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt;             Dictionary&amp;lt;&lt;span&gt;string&lt;/span&gt;, PropertyInfo&amp;gt; outPropertyDic = propertyInfos.ToDictionary(t =&amp;gt; t.Name, t =&amp;gt;&lt;span&gt; t);
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt;             &lt;span&gt;foreach&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; inType &lt;span&gt;in&lt;/span&gt;&lt;span&gt; inTypes)
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt;                 ParameterExpression parameterExpression =&lt;span&gt; Expression.Parameter(inType, inType.FullName);
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt;                 PropertyInfo[] inTypePpropertyInfos =&lt;span&gt; inType.GetProperties();
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt;                 &lt;span&gt;foreach&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; inTypeInfo &lt;span&gt;in&lt;/span&gt;&lt;span&gt; inTypePpropertyInfos)
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt; &lt;span&gt;                {
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt;                     &lt;span&gt;if&lt;/span&gt; (inTypeInfo.GetCustomAttribute(&lt;span&gt;typeof&lt;/span&gt;(DoNotMapperAttribute)) == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt; &lt;span&gt;                    {
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt;                         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;first&lt;/span&gt;
&lt;span&gt;47&lt;/span&gt;                         &lt;span&gt;string&lt;/span&gt; outPropertyDicKey =&lt;span&gt; MapperAttribute.GetTargetName(inTypeInfo);
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt;                         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;second&lt;/span&gt;
&lt;span&gt;49&lt;/span&gt;                         &lt;span&gt;if&lt;/span&gt; (&lt;span&gt;string&lt;/span&gt;.IsNullOrEmpty(outPropertyDicKey) &amp;amp;&amp;amp;&lt;span&gt; outPropertyDic.Keys.Contains(inTypeInfo.Name))
&lt;/span&gt;&lt;span&gt;50&lt;/span&gt; &lt;span&gt;                        {
&lt;/span&gt;&lt;span&gt;51&lt;/span&gt;                             outPropertyDicKey =&lt;span&gt; inTypeInfo.Name;
&lt;/span&gt;&lt;span&gt;52&lt;/span&gt; &lt;span&gt;                        }
&lt;/span&gt;&lt;span&gt;53&lt;/span&gt;                         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;third&lt;/span&gt;
&lt;span&gt;54&lt;/span&gt;                         &lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;string&lt;/span&gt;.IsNullOrEmpty(outPropertyDicKey) &amp;amp;&amp;amp;&lt;span&gt; outPropertyDic.Keys.Contains(outPropertyDicKey))
&lt;/span&gt;&lt;span&gt;55&lt;/span&gt; &lt;span&gt;                        {
&lt;/span&gt;&lt;span&gt;56&lt;/span&gt;                             MemberExpression property =&lt;span&gt; Expression.Property(parameterExpression, inTypeInfo);
&lt;/span&gt;&lt;span&gt;57&lt;/span&gt;                             MemberBinding memberBinding =&lt;span&gt; Expression.Bind(outPropertyDic[outPropertyDicKey], property);
&lt;/span&gt;&lt;span&gt;58&lt;/span&gt; &lt;span&gt;                            memberBindingList.Add(memberBinding);
&lt;/span&gt;&lt;span&gt;59&lt;/span&gt;                             outPropertyDic.Remove(outPropertyDicKey);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;remove property if has be valued&lt;/span&gt;
&lt;span&gt;60&lt;/span&gt; &lt;span&gt;                        }
&lt;/span&gt;&lt;span&gt;61&lt;/span&gt; &lt;span&gt;                    }
&lt;/span&gt;&lt;span&gt;62&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;63&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt; (!parameterExpressionList.Exists(t =&amp;gt;&lt;span&gt; t.Name.Equals(parameterExpression.Name)))
&lt;/span&gt;&lt;span&gt;64&lt;/span&gt; &lt;span&gt;                {
&lt;/span&gt;&lt;span&gt;65&lt;/span&gt; &lt;span&gt;                    parameterExpressionList.Add(parameterExpression);
&lt;/span&gt;&lt;span&gt;66&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;67&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;68&lt;/span&gt;             memberInitExpression =&lt;span&gt; Expression.MemberInit(Expression.New(outType), memberBindingList.ToArray());
&lt;/span&gt;&lt;span&gt;69&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;70&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;71&lt;/span&gt; 
&lt;span&gt;72&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在上面的这段代码中：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
 ParameterExpression parameterExpression = Expression.Parameter(inType, inType.FullName); 
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;构建了类似 &lt;span&gt;t&lt;/span&gt; 的结构。&lt;/h4&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
MemberExpression property =&lt;span&gt; Expression.Property(parameterExpression, inTypeInfo);
MemberBinding memberBinding &lt;/span&gt;= Expression.Bind(outPropertyDic[outPropertyDicKey], property);
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;构建了类似 &lt;span&gt;HealthLevel = t.HealthLevel&lt;/span&gt; 的结构。&lt;/h4&gt;
&lt;p&gt; &lt;span class=&quot;cnblogs_code&quot;&gt;&lt;span&gt;1&lt;/span&gt; memberInitExpression = Expression.MemberInit(Expression.New(outType), memberBindingList.ToArray());&lt;/span&gt; &lt;/p&gt;
&lt;h4&gt;构建了类似 &lt;span&gt;new Student() {HealthLevel = t.HealthLevel, SchoolClass = t.SchoolClass}&lt;/span&gt; 的结构。&lt;/h4&gt;
&lt;p&gt;这段逻辑代码的调用方代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;46&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;********************************************************
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt; * CopyRight: 7TINY CODE BUILDER. 
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt; * Version: 5.0.0
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt; * Author: 7tiny
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt; * Address: Earth
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt; * Create: 2018-03-16 10:11:43
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt; * Modify: 2018-4-3 11:35:53
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt; * E-mail: dong@7tiny.com | sevenTiny@foxmail.com 
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt; * GitHub: &lt;/span&gt;&lt;span&gt;https://github.com/sevenTiny&lt;/span&gt; 
&lt;span&gt;10&lt;/span&gt; &lt;span&gt; * Personal web site: &lt;/span&gt;&lt;span&gt;http://www.7tiny.com&lt;/span&gt; 
&lt;span&gt;11&lt;/span&gt; &lt;span&gt; * Technical WebSit: &lt;/span&gt;&lt;span&gt;http://www.cnblogs.com/7tiny/&lt;/span&gt; 
&lt;span&gt;12&lt;/span&gt; &lt;span&gt; * Description: 
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt; * Thx , Best Regards ~
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt; ********************************************************&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System;
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Collections.Generic;
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Linq;
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Linq.Expressions;
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Reflection;
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; 
&lt;span&gt;21&lt;/span&gt; &lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; SevenTiny.Bantina.AutoMapper
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;sealed&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; Mapper&amp;lt;TIn, TOut&amp;gt; &lt;span&gt;where&lt;/span&gt; TOut : &lt;span&gt;class&lt;/span&gt; &lt;span&gt;where&lt;/span&gt; TIn : &lt;span&gt;class&lt;/span&gt;
&lt;span&gt;24&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;         &lt;span&gt;private&lt;/span&gt;&lt;span&gt; Mapper() { }
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;         &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;readonly&lt;/span&gt; Func&amp;lt;TIn, TOut&amp;gt; funcCache =&lt;span&gt; GetFunc();
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt;&lt;span&gt; TOut AutoMapper(TIn tIn)
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt; funcCache(tIn);
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; TOut AutoMapper(TIn tIn, Action&amp;lt;TOut&amp;gt;&lt;span&gt; action)
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt;             TOut outValue =&lt;span&gt; funcCache(tIn);
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; &lt;span&gt;            action(outValue);
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt; outValue;
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt;         &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; Func&amp;lt;TIn, TOut&amp;gt;&lt;span&gt; GetFunc()
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt;             Type[] types = &lt;span&gt;new&lt;/span&gt; Type[] { &lt;span&gt;typeof&lt;/span&gt;&lt;span&gt;(TIn) };
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt; &lt;span&gt;            MemberInitExpression memberInitExpression;
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt;             List&amp;lt;ParameterExpression&amp;gt;&lt;span&gt; parameterExpressionList;
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt;             MapperExpressionCommon.GetFunc(&lt;span&gt;typeof&lt;/span&gt;(TOut), types, &lt;span&gt;out&lt;/span&gt; memberInitExpression, &lt;span&gt;out&lt;/span&gt;&lt;span&gt; parameterExpressionList);
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt;             Expression&amp;lt;Func&amp;lt;TIn, TOut&amp;gt;&amp;gt; lambda = Expression.Lambda&amp;lt;Func&amp;lt;TIn, TOut&amp;gt;&amp;gt;&lt;span&gt;(memberInitExpression, parameterExpressionList);
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt; lambda.Compile();
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在上面这段代码中：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
Expression&amp;lt;Func&amp;lt;TIn, TOut&amp;gt;&amp;gt; lambda = Expression.Lambda&amp;lt;Func&amp;lt;TIn, TOut&amp;gt;&amp;gt;(memberInitExpression, parameterExpressionList);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;使用上面的公共方法out出的参数构建了一个完整的lambda表达式  &lt;span&gt;t =&amp;gt; new Student() {HealthLevel = t.HealthLevel, SchoolClass = t.SchoolClass}&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;从代码断点中也可以看出：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/998608/201804/998608-20180409230605334-932887036.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这里的t由于公共方法中使用的是 type(T).FullName，所以看起来比较长，是Test.SevenTiny.Bantina.Model.Student5，可以看成是一个小写的“t”，这里是等效的。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
lambda.Compile()
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;将上述的表达式执行为Func&amp;lt;TIn,TOut&amp;gt; 的一个匿名委托。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;readonly&lt;/span&gt; Func&amp;lt;TIn, TOut&amp;gt; funcCache = GetFunc();
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;将执行后的结果（匿名委托）缓存起来。&lt;/p&gt;
&lt;p&gt;这样最终的执行结果便转换成了一段代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
Func&amp;lt;Student5,Student&amp;gt; stuFunc = t=&amp;gt;&lt;span&gt;new&lt;/span&gt; Student() {HealthLevel = t.HealthLevel, SchoolClass = t.SchoolClass};
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;调用这段代码和直接实例化方法赋值是等效的，但是调用这段代码可以将很多通用的方法封装成一个公共的方法，提高了代码的重用性。&lt;/p&gt;
&lt;p&gt;这段代码耗时的部分便是通过一定的反射构建出一个Func&amp;lt;T,T2&amp;gt;所耗费的时间，这在数百万次的调用中仅仅调用了一次，而执行部分却是不耗费时间的，在高并发的场景下占有很大的优势。&lt;/p&gt;
&lt;p&gt;下面我们实际测试一下：&lt;/p&gt;
&lt;p&gt;同样的代码，使用了第二版的AutoMapper，执行100万次&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; Student5 stu5 = &lt;span&gt;new&lt;/span&gt; Student5 { HealthLevel = &lt;span&gt;100&lt;/span&gt;, SchoolClass = &lt;span&gt;new&lt;/span&gt; SchoolClass { Name = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;class1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; } };
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; 
&lt;span&gt;3&lt;/span&gt; &lt;span&gt;var&lt;/span&gt; test1 = StopwatchHelper.Caculate(&lt;span&gt;1000000&lt;/span&gt;, () =&amp;gt;
&lt;span&gt;4&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt;     Student stu = Mapper&amp;lt;Student5, Student&amp;gt;.AutoMapper(stu5, t =&amp;gt; t.Name = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;jony&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt; &lt;span&gt;});
&lt;/span&gt;&lt;span&gt;7&lt;/span&gt; Console.WriteLine(test1.TotalMilliseconds);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/998608/201804/998608-20180409231455809-1755389716.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; 我们加大调用的次数再次进行比较：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;44&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; Student5 stu5 = &lt;span&gt;new&lt;/span&gt; Student5 { HealthLevel = &lt;span&gt;100&lt;/span&gt;, SchoolClass = &lt;span&gt;new&lt;/span&gt; SchoolClass { Name = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;class1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; } };
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;var&lt;/span&gt; test0 = StopwatchHelper.Caculate(&lt;span&gt;1000000&lt;/span&gt;, () =&amp;gt;
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;     Student stu = Mapper.AutoMapper&amp;lt;Student,Student5&amp;gt;(stu5, t =&amp;gt; t.Name = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;jony&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;});
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; Console.WriteLine(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;使用反射调用 1 百万次耗时：&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;Console.WriteLine(test0.TotalMilliseconds);
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; 
&lt;span&gt;10&lt;/span&gt; &lt;span&gt;Console.WriteLine();
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; 
&lt;span&gt;12&lt;/span&gt; &lt;span&gt;var&lt;/span&gt; test1 = StopwatchHelper.Caculate(&lt;span&gt;1000000&lt;/span&gt;, () =&amp;gt;
&lt;span&gt;13&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;     Student stu = Mapper&amp;lt;Student5, Student&amp;gt;.AutoMapper(stu5, t =&amp;gt; t.Name = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;jony&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;});
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; Console.WriteLine(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;使用Expression表达式树调用 1 百万次耗时：&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;Console.WriteLine(test1.TotalMilliseconds);
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; 
&lt;span&gt;19&lt;/span&gt; &lt;span&gt;Console.WriteLine();
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; 
&lt;span&gt;21&lt;/span&gt; &lt;span&gt;var&lt;/span&gt; test2 = StopwatchHelper.Caculate(&lt;span&gt;1000000&lt;/span&gt;, () =&amp;gt;
&lt;span&gt;22&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;     Student stu = &lt;span&gt;new&lt;/span&gt; Student { HealthLevel = stu5.HealthLevel, Name = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;jony&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; };
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; &lt;span&gt;});
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; Console.WriteLine(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;使用代码直接构建 1 百万次耗时：&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; Console.WriteLine(test2.TotalMilliseconds);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/998608/201804/998608-20180409233045502-1032682801.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h4&gt;一百万次代码执行，Expression表达式树方式耗时0.084秒，而直接写代码赋值的方式耗时0.022秒，但是使用反射的方式却使用了3.6秒。&lt;/h4&gt;
&lt;h4&gt;执行次数越多，Expression表达式树的性能便越接近直接调用代码的方式。&lt;/h4&gt;
&lt;h2&gt;【总结】&lt;/h2&gt;
&lt;p&gt;通过本次基础组建的完成以及一次优化，我从中学习到了Expression表达式树的实现方法以及突出的性能优势，虽然相比反射的写法更加复杂一些。&lt;/p&gt;
&lt;p&gt;在接下来的优化中，可能会加入对Emit的支持，到时候便是一场Emit和Expression的大战，不过我再次预测结果：应该差距不是很大~ 敬请期待...&lt;/p&gt;
&lt;p&gt;本文的完整代码以在我的github中开源，可以直接clone下来查看验证。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;a href=&quot;https://github.com/sevenTiny/SevenTiny.Bantina&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;https://github.com/sevenTiny/SevenTiny.Bantina&lt;/span&gt;&lt;/a&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;下载下来的项目有多种基础组件，直接查看该组件，当然有对其他组件的意见或建议也可以直接提出来探讨，共同学习哦~&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/998608/201804/998608-20180409233808423-1050386361.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;不便于github查看的同学，我这里提供了完整的代码（是有多个对象映射的重载方法的完整版本）。&lt;/p&gt;
&lt;p&gt;公共Attribute特性标签部分：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('65383f59-0280-429a-abbf-ba8773937527')&quot; readability=&quot;33.5&quot;&gt;&lt;img id=&quot;code_img_closed_65383f59-0280-429a-abbf-ba8773937527&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_65383f59-0280-429a-abbf-ba8773937527&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('65383f59-0280-429a-abbf-ba8773937527',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_65383f59-0280-429a-abbf-ba8773937527&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;62&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;********************************************************
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt; * CopyRight: 7TINY CODE BUILDER. 
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt; * Version: 5.0.0
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt; * Author: 7tiny
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt; * Address: Earth
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt; * Create: 2018-04-09 16:55:16
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt; * Modify: 2018-04-09 16:55:16
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt; * E-mail: dong@7tiny.com | sevenTiny@foxmail.com 
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt; * GitHub: &lt;/span&gt;&lt;span&gt;https://github.com/sevenTiny&lt;/span&gt; 
&lt;span&gt;10&lt;/span&gt; &lt;span&gt; * Personal web site: &lt;/span&gt;&lt;span&gt;http://www.7tiny.com&lt;/span&gt; 
&lt;span&gt;11&lt;/span&gt; &lt;span&gt; * Technical WebSit: &lt;/span&gt;&lt;span&gt;http://www.cnblogs.com/7tiny/&lt;/span&gt; 
&lt;span&gt;12&lt;/span&gt; &lt;span&gt; * Description: 
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt; * Thx , Best Regards ~
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt; ********************************************************&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System;
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; 
&lt;span&gt;17&lt;/span&gt; &lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; SevenTiny.Bantina.AutoMapper
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;     [AttributeUsage(AttributeTargets.Property, Inherited = &lt;span&gt;true&lt;/span&gt;&lt;span&gt;)]
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; DoNotMapperAttribute :Attribute
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('af90f9ee-f2d2-4773-82d9-21079f5f8572')&quot; readability=&quot;33.5&quot;&gt;&lt;img id=&quot;code_img_closed_af90f9ee-f2d2-4773-82d9-21079f5f8572&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_af90f9ee-f2d2-4773-82d9-21079f5f8572&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('af90f9ee-f2d2-4773-82d9-21079f5f8572',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_af90f9ee-f2d2-4773-82d9-21079f5f8572&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;62&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;********************************************************
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt; * CopyRight: 7TINY CODE BUILDER. 
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt; * Version: 5.0.0
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt; * Author: 7tiny
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt; * Address: Earth
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt; * Create: 2018-04-03 13:28:38
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt; * Modify: 2018-04-03 13:28:38
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt; * E-mail: dong@7tiny.com | sevenTiny@foxmail.com 
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt; * GitHub: &lt;/span&gt;&lt;span&gt;https://github.com/sevenTiny&lt;/span&gt; 
&lt;span&gt;10&lt;/span&gt; &lt;span&gt; * Personal web site: &lt;/span&gt;&lt;span&gt;http://www.7tiny.com&lt;/span&gt; 
&lt;span&gt;11&lt;/span&gt; &lt;span&gt; * Technical WebSit: &lt;/span&gt;&lt;span&gt;http://www.cnblogs.com/7tiny/&lt;/span&gt; 
&lt;span&gt;12&lt;/span&gt; &lt;span&gt; * Description: 
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt; * Thx , Best Regards ~
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt; ********************************************************&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System;
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Linq;
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Reflection;
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; 
&lt;span&gt;19&lt;/span&gt; &lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; SevenTiny.Bantina.AutoMapper
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;     [AttributeUsage(AttributeTargets.Property, Inherited = &lt;span&gt;true&lt;/span&gt;&lt;span&gt;)]
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; MapperAttribute : Attribute
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; TargetName { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; 
&lt;span&gt;26&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt;&lt;span&gt; MapperAttribute() { }
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; MapperAttribute(&lt;span&gt;string&lt;/span&gt;&lt;span&gt; targetName)
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;             &lt;span&gt;this&lt;/span&gt;.TargetName =&lt;span&gt; targetName;
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; 
&lt;span&gt;32&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;&lt;span&gt; GetTargetName(PropertyInfo property)
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt;             &lt;span&gt;var&lt;/span&gt; attr = property.GetCustomAttributes&amp;lt;MapperAttribute&amp;gt;(&lt;span&gt;true&lt;/span&gt;&lt;span&gt;).FirstOrDefault();
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; attr != &lt;span&gt;null&lt;/span&gt; ? (attr &lt;span&gt;as&lt;/span&gt; MapperAttribute).TargetName ?? &lt;span&gt;default&lt;/span&gt;(&lt;span&gt;string&lt;/span&gt;) : &lt;span&gt;default&lt;/span&gt;(&lt;span&gt;string&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('4dfc3edb-d527-45f3-a271-b6c400ca509b')&quot; readability=&quot;34&quot;&gt;&lt;img id=&quot;code_img_closed_4dfc3edb-d527-45f3-a271-b6c400ca509b&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_4dfc3edb-d527-45f3-a271-b6c400ca509b&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('4dfc3edb-d527-45f3-a271-b6c400ca509b',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_4dfc3edb-d527-45f3-a271-b6c400ca509b&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;63&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;********************************************************
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt; * CopyRight: 7TINY CODE BUILDER. 
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt; * Version: 5.0.0
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt; * Author: 7tiny
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt; * Address: Earth
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt; * Create: 2018-04-03 13:28:38
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt; * Modify: 2018-04-03 13:28:38
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt; * E-mail: dong@7tiny.com | sevenTiny@foxmail.com 
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt; * GitHub: &lt;/span&gt;&lt;span&gt;https://github.com/sevenTiny&lt;/span&gt; 
&lt;span&gt;10&lt;/span&gt; &lt;span&gt; * Personal web site: &lt;/span&gt;&lt;span&gt;http://www.7tiny.com&lt;/span&gt; 
&lt;span&gt;11&lt;/span&gt; &lt;span&gt; * Technical WebSit: &lt;/span&gt;&lt;span&gt;http://www.cnblogs.com/7tiny/&lt;/span&gt; 
&lt;span&gt;12&lt;/span&gt; &lt;span&gt; * Description: 
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt; * Thx , Best Regards ~
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt; ********************************************************&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System;
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Linq;
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; 
&lt;span&gt;18&lt;/span&gt; &lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; SevenTiny.Bantina.AutoMapper
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;     [AttributeUsage(AttributeTargets.Class | AttributeTargets.Field, Inherited = &lt;span&gt;true&lt;/span&gt;&lt;span&gt;)]
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; MapperClassAttribute : Attribute
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; Name { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;&lt;span&gt; GetName(Type type)
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;             &lt;span&gt;var&lt;/span&gt; attr = type.GetCustomAttributes(&lt;span&gt;typeof&lt;/span&gt;(MapperClassAttribute), &lt;span&gt;true&lt;/span&gt;&lt;span&gt;).FirstOrDefault();
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; attr != &lt;span&gt;null&lt;/span&gt; ? (attr &lt;span&gt;as&lt;/span&gt; MapperClassAttribute).Name ?? &lt;span&gt;default&lt;/span&gt;(&lt;span&gt;string&lt;/span&gt;) : &lt;span&gt;default&lt;/span&gt;(&lt;span&gt;string&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;一、反射版本&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('625e9698-b40f-4048-94f6-79271d926129')&quot; readability=&quot;122.5&quot;&gt;&lt;img id=&quot;code_img_closed_625e9698-b40f-4048-94f6-79271d926129&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_625e9698-b40f-4048-94f6-79271d926129&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('625e9698-b40f-4048-94f6-79271d926129',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_625e9698-b40f-4048-94f6-79271d926129&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;240&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;********************************************************
&lt;/span&gt;&lt;span&gt;  2&lt;/span&gt; &lt;span&gt; * CopyRight: 7TINY CODE BUILDER. 
&lt;/span&gt;&lt;span&gt;  3&lt;/span&gt; &lt;span&gt; * Version: 5.0.0
&lt;/span&gt;&lt;span&gt;  4&lt;/span&gt; &lt;span&gt; * Author: 7tiny
&lt;/span&gt;&lt;span&gt;  5&lt;/span&gt; &lt;span&gt; * Address: Earth
&lt;/span&gt;&lt;span&gt;  6&lt;/span&gt; &lt;span&gt; * Create: 2018-03-16 10:11:43
&lt;/span&gt;&lt;span&gt;  7&lt;/span&gt; &lt;span&gt; * Modify: 2018-4-3 11:35:53
&lt;/span&gt;&lt;span&gt;  8&lt;/span&gt; &lt;span&gt; * E-mail: dong@7tiny.com | sevenTiny@foxmail.com 
&lt;/span&gt;&lt;span&gt;  9&lt;/span&gt; &lt;span&gt; * GitHub: &lt;/span&gt;&lt;span&gt;https://github.com/sevenTiny&lt;/span&gt; 
&lt;span&gt; 10&lt;/span&gt; &lt;span&gt; * Personal web site: &lt;/span&gt;&lt;span&gt;http://www.7tiny.com&lt;/span&gt; 
&lt;span&gt; 11&lt;/span&gt; &lt;span&gt; * Technical WebSit: &lt;/span&gt;&lt;span&gt;http://www.cnblogs.com/7tiny/&lt;/span&gt; 
&lt;span&gt; 12&lt;/span&gt; &lt;span&gt; * Description: 
&lt;/span&gt;&lt;span&gt; 13&lt;/span&gt; &lt;span&gt; * Thx , Best Regards ~
&lt;/span&gt;&lt;span&gt; 14&lt;/span&gt; &lt;span&gt; ********************************************************&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 15&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System;
&lt;/span&gt;&lt;span&gt; 16&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Collections.Generic;
&lt;/span&gt;&lt;span&gt; 17&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Linq;
&lt;/span&gt;&lt;span&gt; 18&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Linq.Expressions;
&lt;/span&gt;&lt;span&gt; 19&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Reflection;
&lt;/span&gt;&lt;span&gt; 20&lt;/span&gt; 
&lt;span&gt; 21&lt;/span&gt; &lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; SevenTiny.Bantina.AutoMapper
&lt;/span&gt;&lt;span&gt; 22&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 23&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;sealed&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Mapper
&lt;/span&gt;&lt;span&gt; 24&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 25&lt;/span&gt;         &lt;span&gt;private&lt;/span&gt;&lt;span&gt; Mapper() { }
&lt;/span&gt;&lt;span&gt; 26&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span&gt; 27&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt;&lt;span&gt; Init Source Value Dic
&lt;/span&gt;&lt;span&gt; 28&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span&gt; 29&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;typeparam name=&quot;TSource&quot;&amp;gt;&amp;lt;/typeparam&amp;gt;&lt;/span&gt;
&lt;span&gt; 30&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;source&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;span&gt; 31&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
&lt;span&gt; 32&lt;/span&gt;         &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; Dictionary&amp;lt;&lt;span&gt;string&lt;/span&gt;, &lt;span&gt;object&lt;/span&gt;&amp;gt; Initdic&amp;lt;TSource&amp;gt;&lt;span&gt;(TSource source)
&lt;/span&gt;&lt;span&gt; 33&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 34&lt;/span&gt;             Dictionary&amp;lt;&lt;span&gt;string&lt;/span&gt;, &lt;span&gt;object&lt;/span&gt;&amp;gt; dic = &lt;span&gt;new&lt;/span&gt; Dictionary&amp;lt;&lt;span&gt;string&lt;/span&gt;, &lt;span&gt;object&lt;/span&gt;&amp;gt;&lt;span&gt;();
&lt;/span&gt;&lt;span&gt; 35&lt;/span&gt;             &lt;span&gt;foreach&lt;/span&gt; (PropertyInfo property &lt;span&gt;in&lt;/span&gt; &lt;span&gt;typeof&lt;/span&gt;&lt;span&gt;(TSource).GetProperties())
&lt;/span&gt;&lt;span&gt; 36&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt; 37&lt;/span&gt;                 &lt;span&gt;string&lt;/span&gt; targetPropertyName =&lt;span&gt; MapperAttribute.GetTargetName(property);
&lt;/span&gt;&lt;span&gt; 38&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;string&lt;/span&gt;&lt;span&gt;.IsNullOrEmpty(targetPropertyName))
&lt;/span&gt;&lt;span&gt; 39&lt;/span&gt; &lt;span&gt;                {
&lt;/span&gt;&lt;span&gt; 40&lt;/span&gt;                     &lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;dic.ContainsKey(targetPropertyName))
&lt;/span&gt;&lt;span&gt; 41&lt;/span&gt; &lt;span&gt;                    {
&lt;/span&gt;&lt;span&gt; 42&lt;/span&gt; &lt;span&gt;                        dic.Add(targetPropertyName, property.GetValue(source));
&lt;/span&gt;&lt;span&gt; 43&lt;/span&gt; &lt;span&gt;                    }
&lt;/span&gt;&lt;span&gt; 44&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt; 45&lt;/span&gt;                 &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;dic.ContainsKey(property.Name))
&lt;/span&gt;&lt;span&gt; 46&lt;/span&gt; &lt;span&gt;                {
&lt;/span&gt;&lt;span&gt; 47&lt;/span&gt; &lt;span&gt;                    dic.Add(property.Name, property.GetValue(source));
&lt;/span&gt;&lt;span&gt; 48&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt; 49&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt; 50&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt; dic;
&lt;/span&gt;&lt;span&gt; 51&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 52&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span&gt; 53&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt;&lt;span&gt; SetValue from propertyinfo and sourceDictionary
&lt;/span&gt;&lt;span&gt; 54&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span&gt; 55&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;typeparam name=&quot;TValue&quot;&amp;gt;&amp;lt;/typeparam&amp;gt;&lt;/span&gt;
&lt;span&gt; 56&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;value&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;span&gt; 57&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;propertyInfos&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;span&gt; 58&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;sourceDic&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;span&gt; 59&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
&lt;span&gt; 60&lt;/span&gt;         &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; TValue SetValue&amp;lt;TValue&amp;gt;(TValue value, PropertyInfo[] propertyInfos, Dictionary&amp;lt;&lt;span&gt;string&lt;/span&gt;, &lt;span&gt;object&lt;/span&gt;&amp;gt; sourceDic, Dictionary&amp;lt;&lt;span&gt;string&lt;/span&gt;, &lt;span&gt;string&lt;/span&gt;&amp;gt; keys) &lt;span&gt;where&lt;/span&gt; TValue : &lt;span&gt;class&lt;/span&gt;
&lt;span&gt; 61&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 62&lt;/span&gt;             &lt;span&gt;foreach&lt;/span&gt; (PropertyInfo property &lt;span&gt;in&lt;/span&gt;&lt;span&gt; propertyInfos)
&lt;/span&gt;&lt;span&gt; 63&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt; 64&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;keys.ContainsKey(property.Name))
&lt;/span&gt;&lt;span&gt; 65&lt;/span&gt; &lt;span&gt;                {
&lt;/span&gt;&lt;span&gt; 66&lt;/span&gt;                     &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (sourceDic.ContainsKey(property.Name))
&lt;/span&gt;&lt;span&gt; 67&lt;/span&gt; &lt;span&gt;                    {
&lt;/span&gt;&lt;span&gt; 68&lt;/span&gt;                         &lt;span&gt;try&lt;/span&gt;
&lt;span&gt; 69&lt;/span&gt; &lt;span&gt;                        {
&lt;/span&gt;&lt;span&gt; 70&lt;/span&gt; &lt;span&gt;                            property.SetValue(value, sourceDic[property.Name]);
&lt;/span&gt;&lt;span&gt; 71&lt;/span&gt;                             keys.Add(property.Name, &lt;span&gt;string&lt;/span&gt;&lt;span&gt;.Empty);
&lt;/span&gt;&lt;span&gt; 72&lt;/span&gt; &lt;span&gt;                        }
&lt;/span&gt;&lt;span&gt; 73&lt;/span&gt;                         &lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception)
&lt;/span&gt;&lt;span&gt; 74&lt;/span&gt; &lt;span&gt;                        {
&lt;/span&gt;&lt;span&gt; 75&lt;/span&gt;                             property.SetValue(value, &lt;span&gt;null&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 76&lt;/span&gt; &lt;span&gt;                        }
&lt;/span&gt;&lt;span&gt; 77&lt;/span&gt; &lt;span&gt;                    }
&lt;/span&gt;&lt;span&gt; 78&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt; 79&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt; 80&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt; value;
&lt;/span&gt;&lt;span&gt; 81&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 82&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span&gt; 83&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt;&lt;span&gt; AutoMapper
&lt;/span&gt;&lt;span&gt; 84&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span&gt; 85&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;typeparam name=&quot;TValue&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;value type&lt;/span&gt;&lt;span&gt;&amp;lt;/typeparam&amp;gt;&lt;/span&gt;
&lt;span&gt; 86&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;typeparam name=&quot;TSource&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;source type&lt;/span&gt;&lt;span&gt;&amp;lt;/typeparam&amp;gt;&lt;/span&gt;
&lt;span&gt; 87&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;source&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;span&gt; 88&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
&lt;span&gt; 89&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; TValue AutoMapper&amp;lt;TValue, TSource&amp;gt;(TSource source) &lt;span&gt;where&lt;/span&gt; TValue : &lt;span&gt;class&lt;/span&gt; &lt;span&gt;where&lt;/span&gt; TSource : &lt;span&gt;class&lt;/span&gt;
&lt;span&gt; 90&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 91&lt;/span&gt;             TValue value = Activator.CreateInstance&amp;lt;TValue&amp;gt;&lt;span&gt;();
&lt;/span&gt;&lt;span&gt; 92&lt;/span&gt;             PropertyInfo[] propertyInfos = &lt;span&gt;typeof&lt;/span&gt;&lt;span&gt;(TValue).GetProperties();
&lt;/span&gt;&lt;span&gt; 93&lt;/span&gt;             Dictionary&amp;lt;&lt;span&gt;string&lt;/span&gt;, &lt;span&gt;string&lt;/span&gt;&amp;gt; keys = &lt;span&gt;new&lt;/span&gt; Dictionary&amp;lt;&lt;span&gt;string&lt;/span&gt;, &lt;span&gt;string&lt;/span&gt;&amp;gt;&lt;span&gt;();
&lt;/span&gt;&lt;span&gt; 94&lt;/span&gt;             value =&lt;span&gt; SetValue(value, propertyInfos, Initdic(source), keys);
&lt;/span&gt;&lt;span&gt; 95&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt; value;
&lt;/span&gt;&lt;span&gt; 96&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 97&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span&gt; 98&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt;&lt;span&gt; AutoMapper,Support for Use Action to custom special fields.
&lt;/span&gt;&lt;span&gt; 99&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span&gt;100&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;typeparam name=&quot;TValue&quot;&amp;gt;&amp;lt;/typeparam&amp;gt;&lt;/span&gt;
&lt;span&gt;101&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;typeparam name=&quot;TSource&quot;&amp;gt;&amp;lt;/typeparam&amp;gt;&lt;/span&gt;
&lt;span&gt;102&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;source&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;span&gt;103&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;action&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;span&gt;104&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
&lt;span&gt;105&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; TValue AutoMapper&amp;lt;TValue, TSource&amp;gt;(TSource source, Action&amp;lt;TValue&amp;gt; action) &lt;span&gt;where&lt;/span&gt; TValue : &lt;span&gt;class&lt;/span&gt; &lt;span&gt;where&lt;/span&gt; TSource : &lt;span&gt;class&lt;/span&gt;
&lt;span&gt;106&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;107&lt;/span&gt;             TValue value = Activator.CreateInstance&amp;lt;TValue&amp;gt;&lt;span&gt;();
&lt;/span&gt;&lt;span&gt;108&lt;/span&gt;             PropertyInfo[] propertyInfos = &lt;span&gt;typeof&lt;/span&gt;&lt;span&gt;(TValue).GetProperties();
&lt;/span&gt;&lt;span&gt;109&lt;/span&gt;             Dictionary&amp;lt;&lt;span&gt;string&lt;/span&gt;, &lt;span&gt;string&lt;/span&gt;&amp;gt; keys = &lt;span&gt;new&lt;/span&gt; Dictionary&amp;lt;&lt;span&gt;string&lt;/span&gt;, &lt;span&gt;string&lt;/span&gt;&amp;gt;&lt;span&gt;();
&lt;/span&gt;&lt;span&gt;110&lt;/span&gt;             value =&lt;span&gt; SetValue(value, propertyInfos, Initdic(source), keys);
&lt;/span&gt;&lt;span&gt;111&lt;/span&gt; &lt;span&gt;            action(value);
&lt;/span&gt;&lt;span&gt;112&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt; value;
&lt;/span&gt;&lt;span&gt;113&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;114&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span&gt;115&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt;&lt;span&gt; AutoMapper with multitype properties.
&lt;/span&gt;&lt;span&gt;116&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span&gt;117&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;typeparam name=&quot;TValue&quot;&amp;gt;&amp;lt;/typeparam&amp;gt;&lt;/span&gt;
&lt;span&gt;118&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;typeparam name=&quot;TSource1&quot;&amp;gt;&amp;lt;/typeparam&amp;gt;&lt;/span&gt;
&lt;span&gt;119&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;typeparam name=&quot;TSource2&quot;&amp;gt;&amp;lt;/typeparam&amp;gt;&lt;/span&gt;
&lt;span&gt;120&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;source1&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;span&gt;121&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;source2&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;span&gt;122&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
&lt;span&gt;123&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; TValue AutoMapper&amp;lt;TValue, TSource1, TSource2&amp;gt;(TSource1 source1, TSource2 source2) &lt;span&gt;where&lt;/span&gt; TValue : &lt;span&gt;class&lt;/span&gt; &lt;span&gt;where&lt;/span&gt; TSource1 : &lt;span&gt;class&lt;/span&gt; &lt;span&gt;where&lt;/span&gt; TSource2 : &lt;span&gt;class&lt;/span&gt;
&lt;span&gt;124&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;125&lt;/span&gt;             TValue value = Activator.CreateInstance&amp;lt;TValue&amp;gt;&lt;span&gt;();
&lt;/span&gt;&lt;span&gt;126&lt;/span&gt;             PropertyInfo[] propertyInfos = &lt;span&gt;typeof&lt;/span&gt;&lt;span&gt;(TValue).GetProperties();
&lt;/span&gt;&lt;span&gt;127&lt;/span&gt;             Dictionary&amp;lt;&lt;span&gt;string&lt;/span&gt;, &lt;span&gt;string&lt;/span&gt;&amp;gt; keys = &lt;span&gt;new&lt;/span&gt; Dictionary&amp;lt;&lt;span&gt;string&lt;/span&gt;, &lt;span&gt;string&lt;/span&gt;&amp;gt;&lt;span&gt;();
&lt;/span&gt;&lt;span&gt;128&lt;/span&gt;             value =&lt;span&gt; SetValue(value, propertyInfos, Initdic(source1), keys);
&lt;/span&gt;&lt;span&gt;129&lt;/span&gt;             value =&lt;span&gt; SetValue(value, propertyInfos, Initdic(source2), keys);
&lt;/span&gt;&lt;span&gt;130&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt; value;
&lt;/span&gt;&lt;span&gt;131&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;132&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span&gt;133&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt;&lt;span&gt; AutoMapper with multitype properties.Support for Use Action to custom special fields.
&lt;/span&gt;&lt;span&gt;134&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span&gt;135&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;typeparam name=&quot;TValue&quot;&amp;gt;&amp;lt;/typeparam&amp;gt;&lt;/span&gt;
&lt;span&gt;136&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;typeparam name=&quot;TSource1&quot;&amp;gt;&amp;lt;/typeparam&amp;gt;&lt;/span&gt;
&lt;span&gt;137&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;typeparam name=&quot;TSource2&quot;&amp;gt;&amp;lt;/typeparam&amp;gt;&lt;/span&gt;
&lt;span&gt;138&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;source1&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;span&gt;139&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;source2&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;span&gt;140&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;action&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;span&gt;141&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
&lt;span&gt;142&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; TValue AutoMapper&amp;lt;TValue, TSource1, TSource2&amp;gt;(TSource1 source1, TSource2 source2, Action&amp;lt;TValue&amp;gt; action) &lt;span&gt;where&lt;/span&gt; TValue : &lt;span&gt;class&lt;/span&gt; &lt;span&gt;where&lt;/span&gt; TSource1 : &lt;span&gt;class&lt;/span&gt; &lt;span&gt;where&lt;/span&gt; TSource2 : &lt;span&gt;class&lt;/span&gt;
&lt;span&gt;143&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;144&lt;/span&gt;             TValue value = Activator.CreateInstance&amp;lt;TValue&amp;gt;&lt;span&gt;();
&lt;/span&gt;&lt;span&gt;145&lt;/span&gt;             PropertyInfo[] propertyInfos = &lt;span&gt;typeof&lt;/span&gt;&lt;span&gt;(TValue).GetProperties();
&lt;/span&gt;&lt;span&gt;146&lt;/span&gt;             Dictionary&amp;lt;&lt;span&gt;string&lt;/span&gt;, &lt;span&gt;string&lt;/span&gt;&amp;gt; keys = &lt;span&gt;new&lt;/span&gt; Dictionary&amp;lt;&lt;span&gt;string&lt;/span&gt;, &lt;span&gt;string&lt;/span&gt;&amp;gt;&lt;span&gt;();
&lt;/span&gt;&lt;span&gt;147&lt;/span&gt;             value =&lt;span&gt; SetValue(value, propertyInfos, Initdic(source1), keys);
&lt;/span&gt;&lt;span&gt;148&lt;/span&gt;             value =&lt;span&gt; SetValue(value, propertyInfos, Initdic(source2), keys);
&lt;/span&gt;&lt;span&gt;149&lt;/span&gt; &lt;span&gt;            action(value);
&lt;/span&gt;&lt;span&gt;150&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt; value;
&lt;/span&gt;&lt;span&gt;151&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;152&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span&gt;153&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt;&lt;span&gt; AutoMapper with multitype properties.
&lt;/span&gt;&lt;span&gt;154&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span&gt;155&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;typeparam name=&quot;TValue&quot;&amp;gt;&amp;lt;/typeparam&amp;gt;&lt;/span&gt;
&lt;span&gt;156&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;typeparam name=&quot;TSource1&quot;&amp;gt;&amp;lt;/typeparam&amp;gt;&lt;/span&gt;
&lt;span&gt;157&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;typeparam name=&quot;TSource2&quot;&amp;gt;&amp;lt;/typeparam&amp;gt;&lt;/span&gt;
&lt;span&gt;158&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;typeparam name=&quot;TSource3&quot;&amp;gt;&amp;lt;/typeparam&amp;gt;&lt;/span&gt;
&lt;span&gt;159&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;source1&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;span&gt;160&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;source2&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;span&gt;161&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;source3&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;span&gt;162&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
&lt;span&gt;163&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; TValue AutoMapper&amp;lt;TValue, TSource1, TSource2, TSource3&amp;gt;(TSource1 source1, TSource2 source2, TSource3 source3) &lt;span&gt;where&lt;/span&gt; TValue : &lt;span&gt;class&lt;/span&gt; &lt;span&gt;where&lt;/span&gt; TSource1 : &lt;span&gt;class&lt;/span&gt; &lt;span&gt;where&lt;/span&gt; TSource2 : &lt;span&gt;class&lt;/span&gt; &lt;span&gt;where&lt;/span&gt; TSource3 : &lt;span&gt;class&lt;/span&gt;
&lt;span&gt;164&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;165&lt;/span&gt;             TValue value = Activator.CreateInstance&amp;lt;TValue&amp;gt;&lt;span&gt;();
&lt;/span&gt;&lt;span&gt;166&lt;/span&gt;             PropertyInfo[] propertyInfos = &lt;span&gt;typeof&lt;/span&gt;&lt;span&gt;(TValue).GetProperties();
&lt;/span&gt;&lt;span&gt;167&lt;/span&gt;             Dictionary&amp;lt;&lt;span&gt;string&lt;/span&gt;, &lt;span&gt;string&lt;/span&gt;&amp;gt; keys = &lt;span&gt;new&lt;/span&gt; Dictionary&amp;lt;&lt;span&gt;string&lt;/span&gt;, &lt;span&gt;string&lt;/span&gt;&amp;gt;&lt;span&gt;();
&lt;/span&gt;&lt;span&gt;168&lt;/span&gt;             value =&lt;span&gt; SetValue(value, propertyInfos, Initdic(source1), keys);
&lt;/span&gt;&lt;span&gt;169&lt;/span&gt;             value =&lt;span&gt; SetValue(value, propertyInfos, Initdic(source2), keys);
&lt;/span&gt;&lt;span&gt;170&lt;/span&gt;             value =&lt;span&gt; SetValue(value, propertyInfos, Initdic(source3), keys);
&lt;/span&gt;&lt;span&gt;171&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt; value;
&lt;/span&gt;&lt;span&gt;172&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;173&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span&gt;174&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt;&lt;span&gt; AutoMapper with multitype properties.Support for Use Action to custom special fields.
&lt;/span&gt;&lt;span&gt;175&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span&gt;176&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;typeparam name=&quot;TValue&quot;&amp;gt;&amp;lt;/typeparam&amp;gt;&lt;/span&gt;
&lt;span&gt;177&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;typeparam name=&quot;TSource1&quot;&amp;gt;&amp;lt;/typeparam&amp;gt;&lt;/span&gt;
&lt;span&gt;178&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;typeparam name=&quot;TSource2&quot;&amp;gt;&amp;lt;/typeparam&amp;gt;&lt;/span&gt;
&lt;span&gt;179&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;typeparam name=&quot;TSource3&quot;&amp;gt;&amp;lt;/typeparam&amp;gt;&lt;/span&gt;
&lt;span&gt;180&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;source1&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;span&gt;181&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;source2&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;span&gt;182&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;source3&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;span&gt;183&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;action&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;span&gt;184&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
&lt;span&gt;185&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; TValue AutoMapper&amp;lt;TValue, TSource1, TSource2, TSource3&amp;gt;(TSource1 source1, TSource2 source2, TSource3 source3, Action&amp;lt;TValue&amp;gt; action) &lt;span&gt;where&lt;/span&gt; TValue : &lt;span&gt;class&lt;/span&gt; &lt;span&gt;where&lt;/span&gt; TSource1 : &lt;span&gt;class&lt;/span&gt; &lt;span&gt;where&lt;/span&gt; TSource2 : &lt;span&gt;class&lt;/span&gt; &lt;span&gt;where&lt;/span&gt; TSource3 : &lt;span&gt;class&lt;/span&gt;
&lt;span&gt;186&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;187&lt;/span&gt;             TValue value = Activator.CreateInstance&amp;lt;TValue&amp;gt;&lt;span&gt;();
&lt;/span&gt;&lt;span&gt;188&lt;/span&gt;             PropertyInfo[] propertyInfos = &lt;span&gt;typeof&lt;/span&gt;&lt;span&gt;(TValue).GetProperties();
&lt;/span&gt;&lt;span&gt;189&lt;/span&gt;             Dictionary&amp;lt;&lt;span&gt;string&lt;/span&gt;, &lt;span&gt;string&lt;/span&gt;&amp;gt; keys = &lt;span&gt;new&lt;/span&gt; Dictionary&amp;lt;&lt;span&gt;string&lt;/span&gt;, &lt;span&gt;string&lt;/span&gt;&amp;gt;&lt;span&gt;();
&lt;/span&gt;&lt;span&gt;190&lt;/span&gt;             value =&lt;span&gt; SetValue(value, propertyInfos, Initdic(source1), keys);
&lt;/span&gt;&lt;span&gt;191&lt;/span&gt;             value =&lt;span&gt; SetValue(value, propertyInfos, Initdic(source2), keys);
&lt;/span&gt;&lt;span&gt;192&lt;/span&gt;             value =&lt;span&gt; SetValue(value, propertyInfos, Initdic(source3), keys);
&lt;/span&gt;&lt;span&gt;193&lt;/span&gt; &lt;span&gt;            action(value);
&lt;/span&gt;&lt;span&gt;194&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt; value;
&lt;/span&gt;&lt;span&gt;195&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;196&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span&gt;197&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt;&lt;span&gt; AutoMapper with multitype properties.
&lt;/span&gt;&lt;span&gt;198&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span&gt;199&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;typeparam name=&quot;TValue&quot;&amp;gt;&amp;lt;/typeparam&amp;gt;&lt;/span&gt;
&lt;span&gt;200&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;typeparam name=&quot;TSource1&quot;&amp;gt;&amp;lt;/typeparam&amp;gt;&lt;/span&gt;
&lt;span&gt;201&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;typeparam name=&quot;TSource2&quot;&amp;gt;&amp;lt;/typeparam&amp;gt;&lt;/span&gt;
&lt;span&gt;202&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;typeparam name=&quot;TSource3&quot;&amp;gt;&amp;lt;/typeparam&amp;gt;&lt;/span&gt;
&lt;span&gt;203&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;typeparam name=&quot;TSource4&quot;&amp;gt;&amp;lt;/typeparam&amp;gt;&lt;/span&gt;
&lt;span&gt;204&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;source1&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;span&gt;205&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;source2&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;span&gt;206&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;source3&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;span&gt;207&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;source4&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;span&gt;208&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
&lt;span&gt;209&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; TValue AutoMapper&amp;lt;TValue, TSource1, TSource2, TSource3, TSource4&amp;gt;(TSource1 source1, TSource2 source2, TSource3 source3, TSource4 source4) &lt;span&gt;where&lt;/span&gt; TValue : &lt;span&gt;class&lt;/span&gt; &lt;span&gt;where&lt;/span&gt; TSource1 : &lt;span&gt;class&lt;/span&gt; &lt;span&gt;where&lt;/span&gt; TSource2 : &lt;span&gt;class&lt;/span&gt; &lt;span&gt;where&lt;/span&gt; TSource3 : &lt;span&gt;class&lt;/span&gt; &lt;span&gt;where&lt;/span&gt; TSource4 : &lt;span&gt;class&lt;/span&gt;
&lt;span&gt;210&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;211&lt;/span&gt;             TValue value = Activator.CreateInstance&amp;lt;TValue&amp;gt;&lt;span&gt;();
&lt;/span&gt;&lt;span&gt;212&lt;/span&gt;             PropertyInfo[] propertyInfos = &lt;span&gt;typeof&lt;/span&gt;&lt;span&gt;(TValue).GetProperties();
&lt;/span&gt;&lt;span&gt;213&lt;/span&gt;             Dictionary&amp;lt;&lt;span&gt;string&lt;/span&gt;, &lt;span&gt;string&lt;/span&gt;&amp;gt; keys = &lt;span&gt;new&lt;/span&gt; Dictionary&amp;lt;&lt;span&gt;string&lt;/span&gt;, &lt;span&gt;string&lt;/span&gt;&amp;gt;&lt;span&gt;();
&lt;/span&gt;&lt;span&gt;214&lt;/span&gt;             value =&lt;span&gt; SetValue(value, propertyInfos, Initdic(source1), keys);
&lt;/span&gt;&lt;span&gt;215&lt;/span&gt;             value =&lt;span&gt; SetValue(value, propertyInfos, Initdic(source2), keys);
&lt;/span&gt;&lt;span&gt;216&lt;/span&gt;             value =&lt;span&gt; SetValue(value, propertyInfos, Initdic(source3), keys);
&lt;/span&gt;&lt;span&gt;217&lt;/span&gt;             value =&lt;span&gt; SetValue(value, propertyInfos, Initdic(source4), keys);
&lt;/span&gt;&lt;span&gt;218&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt; value;
&lt;/span&gt;&lt;span&gt;219&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;220&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span&gt;221&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt;&lt;span&gt; AutoMapper with multitype properties.Support for Use Action to custom special fields.
&lt;/span&gt;&lt;span&gt;222&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span&gt;223&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;typeparam name=&quot;TValue&quot;&amp;gt;&amp;lt;/typeparam&amp;gt;&lt;/span&gt;
&lt;span&gt;224&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;typeparam name=&quot;TSource1&quot;&amp;gt;&amp;lt;/typeparam&amp;gt;&lt;/span&gt;
&lt;span&gt;225&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;typeparam name=&quot;TSource2&quot;&amp;gt;&amp;lt;/typeparam&amp;gt;&lt;/span&gt;
&lt;span&gt;226&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;typeparam name=&quot;TSource3&quot;&amp;gt;&amp;lt;/typeparam&amp;gt;&lt;/span&gt;
&lt;span&gt;227&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;typeparam name=&quot;TSource4&quot;&amp;gt;&amp;lt;/typeparam&amp;gt;&lt;/span&gt;
&lt;span&gt;228&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;source1&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;span&gt;229&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;source2&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;span&gt;230&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;source3&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;span&gt;231&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;source4&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;span&gt;232&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;action&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;span&gt;233&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
&lt;span&gt;234&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; TValue AutoMapper&amp;lt;TValue, TSource1, TSource2, TSource3, TSource4&amp;gt;(TSource1 source1, TSource2 source2, TSource3 source3, TSource4 source4, Action&amp;lt;TValue&amp;gt; action) &lt;span&gt;where&lt;/span&gt; TValue : &lt;span&gt;class&lt;/span&gt; &lt;span&gt;where&lt;/span&gt; TSource1 : &lt;span&gt;class&lt;/span&gt; &lt;span&gt;where&lt;/span&gt; TSource2 : &lt;span&gt;class&lt;/span&gt; &lt;span&gt;where&lt;/span&gt; TSource3 : &lt;span&gt;class&lt;/span&gt; &lt;span&gt;where&lt;/span&gt; TSource4 : &lt;span&gt;class&lt;/span&gt;
&lt;span&gt;235&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;236&lt;/span&gt;             TValue value = Activator.CreateInstance&amp;lt;TValue&amp;gt;&lt;span&gt;();
&lt;/span&gt;&lt;span&gt;237&lt;/span&gt;             PropertyInfo[] propertyInfos = &lt;span&gt;typeof&lt;/span&gt;&lt;span&gt;(TValue).GetProperties();
&lt;/span&gt;&lt;span&gt;238&lt;/span&gt;             Dictionary&amp;lt;&lt;span&gt;string&lt;/span&gt;, &lt;span&gt;string&lt;/span&gt;&amp;gt; keys = &lt;span&gt;new&lt;/span&gt; Dictionary&amp;lt;&lt;span&gt;string&lt;/span&gt;, &lt;span&gt;string&lt;/span&gt;&amp;gt;&lt;span&gt;();
&lt;/span&gt;&lt;span&gt;239&lt;/span&gt;             value =&lt;span&gt; SetValue(value, propertyInfos, Initdic(source1), keys);
&lt;/span&gt;&lt;span&gt;240&lt;/span&gt;             value =&lt;span&gt; SetValue(value, propertyInfos, Initdic(source2), keys);
&lt;/span&gt;&lt;span&gt;241&lt;/span&gt;             value =&lt;span&gt; SetValue(value, propertyInfos, Initdic(source3), keys);
&lt;/span&gt;&lt;span&gt;242&lt;/span&gt;             value =&lt;span&gt; SetValue(value, propertyInfos, Initdic(source4), keys);
&lt;/span&gt;&lt;span&gt;243&lt;/span&gt; &lt;span&gt;            action(value);
&lt;/span&gt;&lt;span&gt;244&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt; value;
&lt;/span&gt;&lt;span&gt;245&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;246&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span&gt;247&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt;&lt;span&gt; AutoMapper with multitype properties.
&lt;/span&gt;&lt;span&gt;248&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span&gt;249&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;typeparam name=&quot;TValue&quot;&amp;gt;&amp;lt;/typeparam&amp;gt;&lt;/span&gt;
&lt;span&gt;250&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;typeparam name=&quot;TSource1&quot;&amp;gt;&amp;lt;/typeparam&amp;gt;&lt;/span&gt;
&lt;span&gt;251&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;typeparam name=&quot;TSource2&quot;&amp;gt;&amp;lt;/typeparam&amp;gt;&lt;/span&gt;
&lt;span&gt;252&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;typeparam name=&quot;TSource3&quot;&amp;gt;&amp;lt;/typeparam&amp;gt;&lt;/span&gt;
&lt;span&gt;253&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;typeparam name=&quot;TSource4&quot;&amp;gt;&amp;lt;/typeparam&amp;gt;&lt;/span&gt;
&lt;span&gt;254&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;typeparam name=&quot;TSource5&quot;&amp;gt;&amp;lt;/typeparam&amp;gt;&lt;/span&gt;
&lt;span&gt;255&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;source1&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;span&gt;256&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;source2&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;span&gt;257&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;source3&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;span&gt;258&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;source4&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;span&gt;259&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;source5&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;span&gt;260&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
&lt;span&gt;261&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; TValue AutoMapper&amp;lt;TValue, TSource1, TSource2, TSource3, TSource4, TSource5&amp;gt;(TSource1 source1, TSource2 source2, TSource3 source3, TSource4 source4, TSource5 source5) &lt;span&gt;where&lt;/span&gt; TValue : &lt;span&gt;class&lt;/span&gt; &lt;span&gt;where&lt;/span&gt; TSource1 : &lt;span&gt;class&lt;/span&gt; &lt;span&gt;where&lt;/span&gt; TSource2 : &lt;span&gt;class&lt;/span&gt; &lt;span&gt;where&lt;/span&gt; TSource3 : &lt;span&gt;class&lt;/span&gt; &lt;span&gt;where&lt;/span&gt; TSource4 : &lt;span&gt;class&lt;/span&gt; &lt;span&gt;where&lt;/span&gt; TSource5 : &lt;span&gt;class&lt;/span&gt;
&lt;span&gt;262&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;263&lt;/span&gt;             TValue value = Activator.CreateInstance&amp;lt;TValue&amp;gt;&lt;span&gt;();
&lt;/span&gt;&lt;span&gt;264&lt;/span&gt;             PropertyInfo[] propertyInfos = &lt;span&gt;typeof&lt;/span&gt;&lt;span&gt;(TValue).GetProperties();
&lt;/span&gt;&lt;span&gt;265&lt;/span&gt;             Dictionary&amp;lt;&lt;span&gt;string&lt;/span&gt;, &lt;span&gt;string&lt;/span&gt;&amp;gt; keys = &lt;span&gt;new&lt;/span&gt; Dictionary&amp;lt;&lt;span&gt;string&lt;/span&gt;, &lt;span&gt;string&lt;/span&gt;&amp;gt;&lt;span&gt;();
&lt;/span&gt;&lt;span&gt;266&lt;/span&gt;             value =&lt;span&gt; SetValue(value, propertyInfos, Initdic(source1), keys);
&lt;/span&gt;&lt;span&gt;267&lt;/span&gt;             value =&lt;span&gt; SetValue(value, propertyInfos, Initdic(source2), keys);
&lt;/span&gt;&lt;span&gt;268&lt;/span&gt;             value =&lt;span&gt; SetValue(value, propertyInfos, Initdic(source3), keys);
&lt;/span&gt;&lt;span&gt;269&lt;/span&gt;             value =&lt;span&gt; SetValue(value, propertyInfos, Initdic(source4), keys);
&lt;/span&gt;&lt;span&gt;270&lt;/span&gt;             value =&lt;span&gt; SetValue(value, propertyInfos, Initdic(source5), keys);
&lt;/span&gt;&lt;span&gt;271&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt; value;
&lt;/span&gt;&lt;span&gt;272&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;273&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span&gt;274&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt;&lt;span&gt; AutoMapper with multitype properties.Support for Use Action to custom special fields.
&lt;/span&gt;&lt;span&gt;275&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span&gt;276&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;typeparam name=&quot;TValue&quot;&amp;gt;&amp;lt;/typeparam&amp;gt;&lt;/span&gt;
&lt;span&gt;277&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;typeparam name=&quot;TSource1&quot;&amp;gt;&amp;lt;/typeparam&amp;gt;&lt;/span&gt;
&lt;span&gt;278&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;typeparam name=&quot;TSource2&quot;&amp;gt;&amp;lt;/typeparam&amp;gt;&lt;/span&gt;
&lt;span&gt;279&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;typeparam name=&quot;TSource3&quot;&amp;gt;&amp;lt;/typeparam&amp;gt;&lt;/span&gt;
&lt;span&gt;280&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;typeparam name=&quot;TSource4&quot;&amp;gt;&amp;lt;/typeparam&amp;gt;&lt;/span&gt;
&lt;span&gt;281&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;typeparam name=&quot;TSource5&quot;&amp;gt;&amp;lt;/typeparam&amp;gt;&lt;/span&gt;
&lt;span&gt;282&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;source1&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;span&gt;283&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;source2&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;span&gt;284&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;source3&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;span&gt;285&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;source4&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;span&gt;286&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;source5&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;span&gt;287&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;action&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;span&gt;288&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
&lt;span&gt;289&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; TValue AutoMapper&amp;lt;TValue, TSource1, TSource2, TSource3, TSource4, TSource5&amp;gt;(TSource1 source1, TSource2 source2, TSource3 source3, TSource4 source4, TSource5 source5, Action&amp;lt;TValue&amp;gt; action) &lt;span&gt;where&lt;/span&gt; TValue : &lt;span&gt;class&lt;/span&gt; &lt;span&gt;where&lt;/span&gt; TSource1 : &lt;span&gt;class&lt;/span&gt; &lt;span&gt;where&lt;/span&gt; TSource2 : &lt;span&gt;class&lt;/span&gt; &lt;span&gt;where&lt;/span&gt; TSource3 : &lt;span&gt;class&lt;/span&gt; &lt;span&gt;where&lt;/span&gt; TSource4 : &lt;span&gt;class&lt;/span&gt; &lt;span&gt;where&lt;/span&gt; TSource5 : &lt;span&gt;class&lt;/span&gt;
&lt;span&gt;290&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;291&lt;/span&gt;             TValue value = Activator.CreateInstance&amp;lt;TValue&amp;gt;&lt;span&gt;();
&lt;/span&gt;&lt;span&gt;292&lt;/span&gt;             PropertyInfo[] propertyInfos = &lt;span&gt;typeof&lt;/span&gt;&lt;span&gt;(TValue).GetProperties();
&lt;/span&gt;&lt;span&gt;293&lt;/span&gt;             Dictionary&amp;lt;&lt;span&gt;string&lt;/span&gt;, &lt;span&gt;string&lt;/span&gt;&amp;gt; keys = &lt;span&gt;new&lt;/span&gt; Dictionary&amp;lt;&lt;span&gt;string&lt;/span&gt;, &lt;span&gt;string&lt;/span&gt;&amp;gt;&lt;span&gt;();
&lt;/span&gt;&lt;span&gt;294&lt;/span&gt;             value =&lt;span&gt; SetValue(value, propertyInfos, Initdic(source1), keys);
&lt;/span&gt;&lt;span&gt;295&lt;/span&gt;             value =&lt;span&gt; SetValue(value, propertyInfos, Initdic(source2), keys);
&lt;/span&gt;&lt;span&gt;296&lt;/span&gt;             value =&lt;span&gt; SetValue(value, propertyInfos, Initdic(source3), keys);
&lt;/span&gt;&lt;span&gt;297&lt;/span&gt;             value =&lt;span&gt; SetValue(value, propertyInfos, Initdic(source4), keys);
&lt;/span&gt;&lt;span&gt;298&lt;/span&gt;             value =&lt;span&gt; SetValue(value, propertyInfos, Initdic(source5), keys);
&lt;/span&gt;&lt;span&gt;299&lt;/span&gt; &lt;span&gt;            action(value);
&lt;/span&gt;&lt;span&gt;300&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt; value;
&lt;/span&gt;&lt;span&gt;301&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;302&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;303&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;二、Expression Tree 表达式树版本&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('6935294f-ae43-4f1d-8a82-ba8126c34379')&quot; readability=&quot;108&quot;&gt;&lt;img id=&quot;code_img_closed_6935294f-ae43-4f1d-8a82-ba8126c34379&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_6935294f-ae43-4f1d-8a82-ba8126c34379&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('6935294f-ae43-4f1d-8a82-ba8126c34379',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_6935294f-ae43-4f1d-8a82-ba8126c34379&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;211&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt; &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;********************************************************
&lt;/span&gt;&lt;span&gt;  2&lt;/span&gt; &lt;span&gt; * CopyRight: 7TINY CODE BUILDER. 
&lt;/span&gt;&lt;span&gt;  3&lt;/span&gt; &lt;span&gt; * Version: 5.0.0
&lt;/span&gt;&lt;span&gt;  4&lt;/span&gt; &lt;span&gt; * Author: 7tiny
&lt;/span&gt;&lt;span&gt;  5&lt;/span&gt; &lt;span&gt; * Address: Earth
&lt;/span&gt;&lt;span&gt;  6&lt;/span&gt; &lt;span&gt; * Create: 2018-03-16 10:11:43
&lt;/span&gt;&lt;span&gt;  7&lt;/span&gt; &lt;span&gt; * Modify: 2018-4-3 11:35:53
&lt;/span&gt;&lt;span&gt;  8&lt;/span&gt; &lt;span&gt; * E-mail: dong@7tiny.com | sevenTiny@foxmail.com 
&lt;/span&gt;&lt;span&gt;  9&lt;/span&gt; &lt;span&gt; * GitHub: &lt;/span&gt;&lt;span&gt;https://github.com/sevenTiny&lt;/span&gt; 
&lt;span&gt; 10&lt;/span&gt; &lt;span&gt; * Personal web site: &lt;/span&gt;&lt;span&gt;http://www.7tiny.com&lt;/span&gt; 
&lt;span&gt; 11&lt;/span&gt; &lt;span&gt; * Technical WebSit: &lt;/span&gt;&lt;span&gt;http://www.cnblogs.com/7tiny/&lt;/span&gt; 
&lt;span&gt; 12&lt;/span&gt; &lt;span&gt; * Description: 
&lt;/span&gt;&lt;span&gt; 13&lt;/span&gt; &lt;span&gt; * Thx , Best Regards ~
&lt;/span&gt;&lt;span&gt; 14&lt;/span&gt; &lt;span&gt; ********************************************************&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 15&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System;
&lt;/span&gt;&lt;span&gt; 16&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Collections.Generic;
&lt;/span&gt;&lt;span&gt; 17&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Linq;
&lt;/span&gt;&lt;span&gt; 18&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Linq.Expressions;
&lt;/span&gt;&lt;span&gt; 19&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Reflection;
&lt;/span&gt;&lt;span&gt; 20&lt;/span&gt; 
&lt;span&gt; 21&lt;/span&gt; &lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; SevenTiny.Bantina.AutoMapper
&lt;/span&gt;&lt;span&gt; 22&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 23&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;sealed&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; Mapper&amp;lt;TIn, TOut&amp;gt; &lt;span&gt;where&lt;/span&gt; TOut : &lt;span&gt;class&lt;/span&gt; &lt;span&gt;where&lt;/span&gt; TIn : &lt;span&gt;class&lt;/span&gt;
&lt;span&gt; 24&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 25&lt;/span&gt;         &lt;span&gt;private&lt;/span&gt;&lt;span&gt; Mapper() { }
&lt;/span&gt;&lt;span&gt; 26&lt;/span&gt;         &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;readonly&lt;/span&gt; Func&amp;lt;TIn, TOut&amp;gt; funcCache =&lt;span&gt; GetFunc();
&lt;/span&gt;&lt;span&gt; 27&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt;&lt;span&gt; TOut AutoMapper(TIn tIn)
&lt;/span&gt;&lt;span&gt; 28&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 29&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt; funcCache(tIn);
&lt;/span&gt;&lt;span&gt; 30&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 31&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; TOut AutoMapper(TIn tIn, Action&amp;lt;TOut&amp;gt;&lt;span&gt; action)
&lt;/span&gt;&lt;span&gt; 32&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 33&lt;/span&gt;             TOut outValue =&lt;span&gt; funcCache(tIn);
&lt;/span&gt;&lt;span&gt; 34&lt;/span&gt; &lt;span&gt;            action(outValue);
&lt;/span&gt;&lt;span&gt; 35&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt; outValue;
&lt;/span&gt;&lt;span&gt; 36&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 37&lt;/span&gt;         &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; Func&amp;lt;TIn, TOut&amp;gt;&lt;span&gt; GetFunc()
&lt;/span&gt;&lt;span&gt; 38&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 39&lt;/span&gt;             Type[] types = &lt;span&gt;new&lt;/span&gt; Type[] { &lt;span&gt;typeof&lt;/span&gt;&lt;span&gt;(TIn) };
&lt;/span&gt;&lt;span&gt; 40&lt;/span&gt; &lt;span&gt;            MemberInitExpression memberInitExpression;
&lt;/span&gt;&lt;span&gt; 41&lt;/span&gt;             List&amp;lt;ParameterExpression&amp;gt;&lt;span&gt; parameterExpressionList;
&lt;/span&gt;&lt;span&gt; 42&lt;/span&gt;             MapperExpressionCommon.GetFunc(&lt;span&gt;typeof&lt;/span&gt;(TOut), types, &lt;span&gt;out&lt;/span&gt; memberInitExpression, &lt;span&gt;out&lt;/span&gt;&lt;span&gt; parameterExpressionList);
&lt;/span&gt;&lt;span&gt; 43&lt;/span&gt;             Expression&amp;lt;Func&amp;lt;TIn, TOut&amp;gt;&amp;gt; lambda = Expression.Lambda&amp;lt;Func&amp;lt;TIn, TOut&amp;gt;&amp;gt;&lt;span&gt;(memberInitExpression, parameterExpressionList);
&lt;/span&gt;&lt;span&gt; 44&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt; lambda.Compile();
&lt;/span&gt;&lt;span&gt; 45&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 46&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 47&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;sealed&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; Mapper&amp;lt;TIn1, TIn2, TOut&amp;gt; &lt;span&gt;where&lt;/span&gt; TOut : &lt;span&gt;class&lt;/span&gt; &lt;span&gt;where&lt;/span&gt; TIn1 : &lt;span&gt;class&lt;/span&gt; &lt;span&gt;where&lt;/span&gt; TIn2 : &lt;span&gt;class&lt;/span&gt;
&lt;span&gt; 48&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 49&lt;/span&gt;         &lt;span&gt;private&lt;/span&gt;&lt;span&gt; Mapper() { }
&lt;/span&gt;&lt;span&gt; 50&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt;&lt;span&gt; TOut AutoMapper(TIn1 tIn1, TIn2 tIn2)
&lt;/span&gt;&lt;span&gt; 51&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 52&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt; funcCache(tIn1, tIn2);
&lt;/span&gt;&lt;span&gt; 53&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 54&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; TOut AutoMapper(TIn1 tIn1, TIn2 tIn2, Action&amp;lt;TOut&amp;gt;&lt;span&gt; action)
&lt;/span&gt;&lt;span&gt; 55&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 56&lt;/span&gt;             TOut outValue =&lt;span&gt; funcCache(tIn1, tIn2);
&lt;/span&gt;&lt;span&gt; 57&lt;/span&gt; &lt;span&gt;            action(outValue);
&lt;/span&gt;&lt;span&gt; 58&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt; outValue;
&lt;/span&gt;&lt;span&gt; 59&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 60&lt;/span&gt;         &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;readonly&lt;/span&gt; Func&amp;lt;TIn1, TIn2, TOut&amp;gt; funcCache =&lt;span&gt; GetFunc();
&lt;/span&gt;&lt;span&gt; 61&lt;/span&gt;         &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; Func&amp;lt;TIn1, TIn2, TOut&amp;gt;&lt;span&gt; GetFunc()
&lt;/span&gt;&lt;span&gt; 62&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 63&lt;/span&gt;             Type[] types = &lt;span&gt;new&lt;/span&gt; Type[] { &lt;span&gt;typeof&lt;/span&gt;(TIn1), &lt;span&gt;typeof&lt;/span&gt;&lt;span&gt;(TIn2) };
&lt;/span&gt;&lt;span&gt; 64&lt;/span&gt; &lt;span&gt;            MemberInitExpression memberInitExpression;
&lt;/span&gt;&lt;span&gt; 65&lt;/span&gt;             List&amp;lt;ParameterExpression&amp;gt;&lt;span&gt; parameterExpressionList;
&lt;/span&gt;&lt;span&gt; 66&lt;/span&gt;             MapperExpressionCommon.GetFunc(&lt;span&gt;typeof&lt;/span&gt;(TOut), types, &lt;span&gt;out&lt;/span&gt; memberInitExpression, &lt;span&gt;out&lt;/span&gt;&lt;span&gt; parameterExpressionList);
&lt;/span&gt;&lt;span&gt; 67&lt;/span&gt;             Expression&amp;lt;Func&amp;lt;TIn1, TIn2, TOut&amp;gt;&amp;gt; lambda = Expression.Lambda&amp;lt;Func&amp;lt;TIn1, TIn2, TOut&amp;gt;&amp;gt;&lt;span&gt;(memberInitExpression, parameterExpressionList);
&lt;/span&gt;&lt;span&gt; 68&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt; lambda.Compile();
&lt;/span&gt;&lt;span&gt; 69&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 70&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 71&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;sealed&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; Mapper&amp;lt;TIn1, TIn2, TIn3, TOut&amp;gt; &lt;span&gt;where&lt;/span&gt; TOut : &lt;span&gt;class&lt;/span&gt; &lt;span&gt;where&lt;/span&gt; TIn1 : &lt;span&gt;class&lt;/span&gt; &lt;span&gt;where&lt;/span&gt; TIn2 : &lt;span&gt;class&lt;/span&gt; &lt;span&gt;where&lt;/span&gt; TIn3 : &lt;span&gt;class&lt;/span&gt;
&lt;span&gt; 72&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 73&lt;/span&gt;         &lt;span&gt;private&lt;/span&gt;&lt;span&gt; Mapper() { }
&lt;/span&gt;&lt;span&gt; 74&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt;&lt;span&gt; TOut AutoMapper(TIn1 tIn1, TIn2 tIn2, TIn3 tIn3)
&lt;/span&gt;&lt;span&gt; 75&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 76&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt; funcCache(tIn1, tIn2, tIn3);
&lt;/span&gt;&lt;span&gt; 77&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 78&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; TOut AutoMapper(TIn1 tIn1, TIn2 tIn2, TIn3 tIn3, Action&amp;lt;TOut&amp;gt;&lt;span&gt; action)
&lt;/span&gt;&lt;span&gt; 79&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 80&lt;/span&gt;             TOut outValue =&lt;span&gt; funcCache(tIn1, tIn2, tIn3);
&lt;/span&gt;&lt;span&gt; 81&lt;/span&gt; &lt;span&gt;            action(outValue);
&lt;/span&gt;&lt;span&gt; 82&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt; outValue;
&lt;/span&gt;&lt;span&gt; 83&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 84&lt;/span&gt;         &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;readonly&lt;/span&gt; Func&amp;lt;TIn1, TIn2, TIn3, TOut&amp;gt; funcCache =&lt;span&gt; GetFunc();
&lt;/span&gt;&lt;span&gt; 85&lt;/span&gt;         &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; Func&amp;lt;TIn1, TIn2, TIn3, TOut&amp;gt;&lt;span&gt; GetFunc()
&lt;/span&gt;&lt;span&gt; 86&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 87&lt;/span&gt;             Type[] types = &lt;span&gt;new&lt;/span&gt; Type[] { &lt;span&gt;typeof&lt;/span&gt;(TIn1), &lt;span&gt;typeof&lt;/span&gt;(TIn2), &lt;span&gt;typeof&lt;/span&gt;&lt;span&gt;(TIn3) };
&lt;/span&gt;&lt;span&gt; 88&lt;/span&gt; &lt;span&gt;            MemberInitExpression memberInitExpression;
&lt;/span&gt;&lt;span&gt; 89&lt;/span&gt;             List&amp;lt;ParameterExpression&amp;gt;&lt;span&gt; parameterExpressionList;
&lt;/span&gt;&lt;span&gt; 90&lt;/span&gt;             MapperExpressionCommon.GetFunc(&lt;span&gt;typeof&lt;/span&gt;(TOut), types, &lt;span&gt;out&lt;/span&gt; memberInitExpression, &lt;span&gt;out&lt;/span&gt;&lt;span&gt; parameterExpressionList);
&lt;/span&gt;&lt;span&gt; 91&lt;/span&gt;             Expression&amp;lt;Func&amp;lt;TIn1, TIn2, TIn3, TOut&amp;gt;&amp;gt; lambda = Expression.Lambda&amp;lt;Func&amp;lt;TIn1, TIn2, TIn3, TOut&amp;gt;&amp;gt;&lt;span&gt;(memberInitExpression, parameterExpressionList);
&lt;/span&gt;&lt;span&gt; 92&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt; lambda.Compile();
&lt;/span&gt;&lt;span&gt; 93&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 94&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 95&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;sealed&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; Mapper&amp;lt;TIn1, TIn2, TIn3, TIn4, TOut&amp;gt; &lt;span&gt;where&lt;/span&gt; TOut : &lt;span&gt;class&lt;/span&gt; &lt;span&gt;where&lt;/span&gt; TIn1 : &lt;span&gt;class&lt;/span&gt; &lt;span&gt;where&lt;/span&gt; TIn2 : &lt;span&gt;class&lt;/span&gt; &lt;span&gt;where&lt;/span&gt; TIn3 : &lt;span&gt;class&lt;/span&gt; &lt;span&gt;where&lt;/span&gt; TIn4 : &lt;span&gt;class&lt;/span&gt;
&lt;span&gt; 96&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 97&lt;/span&gt;         &lt;span&gt;private&lt;/span&gt;&lt;span&gt; Mapper() { }
&lt;/span&gt;&lt;span&gt; 98&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt;&lt;span&gt; TOut AutoMapper(TIn1 tIn1, TIn2 tIn2, TIn3 tIn3, TIn4 tIn4)
&lt;/span&gt;&lt;span&gt; 99&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;100&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt; funcCache(tIn1, tIn2, tIn3, tIn4);
&lt;/span&gt;&lt;span&gt;101&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;102&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; TOut AutoMapper(TIn1 tIn1, TIn2 tIn2, TIn3 tIn3, TIn4 tIn4, Action&amp;lt;TOut&amp;gt;&lt;span&gt; action)
&lt;/span&gt;&lt;span&gt;103&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;104&lt;/span&gt;             TOut outValue =&lt;span&gt; funcCache(tIn1, tIn2, tIn3, tIn4);
&lt;/span&gt;&lt;span&gt;105&lt;/span&gt; &lt;span&gt;            action(outValue);
&lt;/span&gt;&lt;span&gt;106&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt; outValue;
&lt;/span&gt;&lt;span&gt;107&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;108&lt;/span&gt;         &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;readonly&lt;/span&gt; Func&amp;lt;TIn1, TIn2, TIn3, TIn4, TOut&amp;gt; funcCache =&lt;span&gt; GetFunc();
&lt;/span&gt;&lt;span&gt;109&lt;/span&gt;         &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; Func&amp;lt;TIn1, TIn2, TIn3, TIn4, TOut&amp;gt;&lt;span&gt; GetFunc()
&lt;/span&gt;&lt;span&gt;110&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;111&lt;/span&gt;             Type[] types = &lt;span&gt;new&lt;/span&gt; Type[] { &lt;span&gt;typeof&lt;/span&gt;(TIn1), &lt;span&gt;typeof&lt;/span&gt;(TIn2), &lt;span&gt;typeof&lt;/span&gt;(TIn3), &lt;span&gt;typeof&lt;/span&gt;&lt;span&gt;(TIn4) };
&lt;/span&gt;&lt;span&gt;112&lt;/span&gt; &lt;span&gt;            MemberInitExpression memberInitExpression;
&lt;/span&gt;&lt;span&gt;113&lt;/span&gt;             List&amp;lt;ParameterExpression&amp;gt;&lt;span&gt; parameterExpressionList;
&lt;/span&gt;&lt;span&gt;114&lt;/span&gt;             MapperExpressionCommon.GetFunc(&lt;span&gt;typeof&lt;/span&gt;(TOut), types, &lt;span&gt;out&lt;/span&gt; memberInitExpression, &lt;span&gt;out&lt;/span&gt;&lt;span&gt; parameterExpressionList);
&lt;/span&gt;&lt;span&gt;115&lt;/span&gt;             Expression&amp;lt;Func&amp;lt;TIn1, TIn2, TIn3, TIn4, TOut&amp;gt;&amp;gt; lambda = Expression.Lambda&amp;lt;Func&amp;lt;TIn1, TIn2, TIn3, TIn4, TOut&amp;gt;&amp;gt;&lt;span&gt;(memberInitExpression, parameterExpressionList);
&lt;/span&gt;&lt;span&gt;116&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt; lambda.Compile();
&lt;/span&gt;&lt;span&gt;117&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;118&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;119&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;sealed&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; Mapper&amp;lt;TIn1, TIn2, TIn3, TIn4, TIn5, TOut&amp;gt; &lt;span&gt;where&lt;/span&gt; TOut : &lt;span&gt;class&lt;/span&gt; &lt;span&gt;where&lt;/span&gt; TIn1 : &lt;span&gt;class&lt;/span&gt; &lt;span&gt;where&lt;/span&gt; TIn2 : &lt;span&gt;class&lt;/span&gt; &lt;span&gt;where&lt;/span&gt; TIn3 : &lt;span&gt;class&lt;/span&gt; &lt;span&gt;where&lt;/span&gt; TIn4 : &lt;span&gt;class&lt;/span&gt; &lt;span&gt;where&lt;/span&gt; TIn5 : &lt;span&gt;class&lt;/span&gt;
&lt;span&gt;120&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;121&lt;/span&gt;         &lt;span&gt;private&lt;/span&gt;&lt;span&gt; Mapper() { }
&lt;/span&gt;&lt;span&gt;122&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt;&lt;span&gt; TOut AutoMapper(TIn1 tIn1, TIn2 tIn2, TIn3 tIn3, TIn4 tIn4, TIn5 tIn5)
&lt;/span&gt;&lt;span&gt;123&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;124&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt; funcCache(tIn1, tIn2, tIn3, tIn4, tIn5);
&lt;/span&gt;&lt;span&gt;125&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;126&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; TOut AutoMapper(TIn1 tIn1, TIn2 tIn2, TIn3 tIn3, TIn4 tIn4, TIn5 tIn5, Action&amp;lt;TOut&amp;gt;&lt;span&gt; action)
&lt;/span&gt;&lt;span&gt;127&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;128&lt;/span&gt;             TOut outValue =&lt;span&gt; funcCache(tIn1, tIn2, tIn3, tIn4, tIn5);
&lt;/span&gt;&lt;span&gt;129&lt;/span&gt; &lt;span&gt;            action(outValue);
&lt;/span&gt;&lt;span&gt;130&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt; outValue;
&lt;/span&gt;&lt;span&gt;131&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;132&lt;/span&gt;         &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;readonly&lt;/span&gt; Func&amp;lt;TIn1, TIn2, TIn3, TIn4, TIn5, TOut&amp;gt; funcCache =&lt;span&gt; GetFunc();
&lt;/span&gt;&lt;span&gt;133&lt;/span&gt;         &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; Func&amp;lt;TIn1, TIn2, TIn3, TIn4, TIn5, TOut&amp;gt;&lt;span&gt; GetFunc()
&lt;/span&gt;&lt;span&gt;134&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;135&lt;/span&gt;             Type[] types = &lt;span&gt;new&lt;/span&gt; Type[] { &lt;span&gt;typeof&lt;/span&gt;(TIn1), &lt;span&gt;typeof&lt;/span&gt;(TIn2), &lt;span&gt;typeof&lt;/span&gt;(TIn3), &lt;span&gt;typeof&lt;/span&gt;(TIn4), &lt;span&gt;typeof&lt;/span&gt;&lt;span&gt;(TIn5) };
&lt;/span&gt;&lt;span&gt;136&lt;/span&gt; &lt;span&gt;            MemberInitExpression memberInitExpression;
&lt;/span&gt;&lt;span&gt;137&lt;/span&gt;             List&amp;lt;ParameterExpression&amp;gt;&lt;span&gt; parameterExpressionList;
&lt;/span&gt;&lt;span&gt;138&lt;/span&gt;             MapperExpressionCommon.GetFunc(&lt;span&gt;typeof&lt;/span&gt;(TOut), types, &lt;span&gt;out&lt;/span&gt; memberInitExpression, &lt;span&gt;out&lt;/span&gt;&lt;span&gt; parameterExpressionList);
&lt;/span&gt;&lt;span&gt;139&lt;/span&gt;             Expression&amp;lt;Func&amp;lt;TIn1, TIn2, TIn3, TIn4, TIn5, TOut&amp;gt;&amp;gt; lambda = Expression.Lambda&amp;lt;Func&amp;lt;TIn1, TIn2, TIn3, TIn4, TIn5, TOut&amp;gt;&amp;gt;&lt;span&gt;(memberInitExpression, parameterExpressionList);
&lt;/span&gt;&lt;span&gt;140&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt; lambda.Compile();
&lt;/span&gt;&lt;span&gt;141&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;142&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;143&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
</description>
<pubDate>Mon, 09 Apr 2018 15:45:00 +0000</pubDate>
<dc:creator>7tiny</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/7tiny/p/8764548.html</dc:identifier>
</item>
<item>
<title>vue2.0+koa2+mongodb实现注册登录 - zhangzhongjie</title>
<link>http://www.cnblogs.com/zjzhang/p/8764428.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/zjzhang/p/8764428.html</guid>
<description>&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;
&lt;p&gt;前段时间和公司一个由技术转产品的同事探讨他的职业道路，对我说了一句深以为然的话：&lt;/p&gt;
&lt;p&gt;&lt;em&gt;“不要把自己禁锢在某一个领域，技术到产品的转变，首先就是思维上的转变。你一直做前端，数据的交互你只知道怎么进，却不知道里面是怎么出的，这就是局限性。”&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;醍醐灌顶般，刚好学习vue的时候看到有个注册登录的项目，索性我也跟着动手做一个vue项目，引入koa和mongodb，实现客户端（client）提交-服务端（server）接收返回-入数据库全过程。&lt;/p&gt;
&lt;p&gt;本项目基于vue-cli搭建，利用token方式进行用户登录验证，并实现注册入库、读取用户、删除用户等功能。文章默认读者有一定的node和vue基础，基础部分不赘述。&lt;/p&gt;
&lt;p&gt;系统环境：MacOS 10.13.3&lt;/p&gt;
&lt;h4 id=&quot;关于npm安装速度慢或不成功&quot;&gt;关于npm安装速度慢或不成功&lt;/h4&gt;
&lt;p&gt;使用淘宝镜像安装&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;$ npm install -g cnpm --registry=https://registry.npm.taobao.org&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;然后所有的&lt;em&gt;npm install&lt;/em&gt;改为&lt;em&gt;cnpm install&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&quot;项目流程图&quot;&gt;项目流程图&lt;/h2&gt;
&lt;p&gt;为了让项目思路和所选技术更加清晰明了，画了一个图方便理解。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images.vrm.cn/2018/04/09/vue-login.png&quot; alt=&quot;image&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;项目启动&quot;&gt;项目启动&lt;/h2&gt;
&lt;p&gt;0.项目地址&lt;br/&gt;github：&lt;a href=&quot;https://github.com/stzhongjie/vue-login&quot; class=&quot;uri&quot;&gt;https://github.com/stzhongjie/vue-login&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;1.初始化项目&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;$ npm install&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;2.启动项目&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;$ npm run dev&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;3.启动MongoDB&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;$ mongod --dbpath XXX&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;xxx是项目里&lt;em&gt;data&lt;/em&gt;文件夹（也可以另行新建，数据库用于存放数据）的路径，也可直接拖入终端。&lt;/p&gt;
&lt;p&gt;4.启动服务端&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;$ node server.js&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;前端ui&quot;&gt;前端UI&lt;/h2&gt;
&lt;p&gt;vue的首选UI库我是选择了饿了么的Element-UI了，其他诸如&lt;em&gt;iview&lt;/em&gt;、&lt;em&gt;vue-strap&lt;/em&gt;好像没有ele全面。&lt;/p&gt;
&lt;h4 id=&quot;安装element-ui&quot;&gt;安装Element-UI&lt;/h4&gt;
&lt;pre&gt;
&lt;code&gt;$ npm i element-ui -S&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;引入element-ui&quot;&gt;引入Element-UI&lt;/h4&gt;
&lt;pre&gt;
&lt;code&gt;//在项目里的mian.js里增加下列代码
import ElementUI from 'element-ui';
import 'element-ui/lib/theme-chalk/index.css';

Vue.use(ElementUI);&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;利用UI里面的选项卡切换做注册和登录界面的切换，以login组件作为整个登录系统的主界面，register组件作为独立组件切入。Element-UI的组成方式，表单验证等API请查阅官网。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;//login组件
&amp;lt;template&amp;gt;
  &amp;lt;div class=&quot;login&quot;&amp;gt;
    &amp;lt;el-tabs v-model=&quot;activeName&quot; @tab-click=&quot;handleClick&quot;&amp;gt;
      &amp;lt;el-tab-pane label=&quot;登录&quot; name=&quot;first&quot;&amp;gt;
        &amp;lt;el-form :model=&quot;ruleForm&quot; :rules=&quot;rules&quot; ref=&quot;ruleForm&quot; label-width=&quot;100px&quot; class=&quot;demo-ruleForm&quot;&amp;gt;
          &amp;lt;el-form-item label=&quot;名称&quot; prop=&quot;name&quot;&amp;gt;
            &amp;lt;el-input v-model=&quot;ruleForm.name&quot;&amp;gt;&amp;lt;/el-input&amp;gt;
          &amp;lt;/el-form-item&amp;gt;
          &amp;lt;el-form-item label=&quot;密码&quot; prop=&quot;pass&quot;&amp;gt;
            &amp;lt;el-input type=&quot;password&quot; v-model=&quot;ruleForm.pass&quot; auto-complete=&quot;off&quot;&amp;gt;&amp;lt;/el-input&amp;gt;
          &amp;lt;/el-form-item&amp;gt;
          &amp;lt;el-form-item&amp;gt;
            &amp;lt;el-button type=&quot;primary&quot; @click=&quot;submitForm('ruleForm')&quot;&amp;gt;登录&amp;lt;/el-button&amp;gt;
            &amp;lt;el-button @click=&quot;resetForm('ruleForm')&quot;&amp;gt;重置&amp;lt;/el-button&amp;gt;
          &amp;lt;/el-form-item&amp;gt;
        &amp;lt;/el-form&amp;gt;
      &amp;lt;/el-tab-pane&amp;gt;
      &amp;lt;el-tab-pane label=&quot;注册&quot; name=&quot;second&quot;&amp;gt;
        &amp;lt;register&amp;gt;&amp;lt;/register&amp;gt;
      &amp;lt;/el-tab-pane&amp;gt;
    &amp;lt;/el-tabs&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;
&amp;lt;script&amp;gt;
import register from '@/components/register'
export default {
  data() {
    var validatePass = (rule, value, callback) =&amp;gt; {
      if (value === '') {
        callback(new Error('请输入密码'));
      } else {
        if (this.ruleForm.checkPass !== '') {
          this.$refs.ruleForm.validateField('checkPass');
        }
        callback();
      }
    };
    return {
      activeName: 'first',
      ruleForm: {
        name: '',
        pass: '',
        checkPass: '',
      },
      rules: {
        name: [
          { required: true, message: '请输入您的名称', trigger: 'blur' },
          { min: 2, max: 5, message: '长度在 2 到 5 个字符', trigger: 'blur' }
        ],
        pass: [
          { required: true, validator: validatePass, trigger: 'blur' }
        ]
      },

    };
  },
  methods: {
    //选项卡切换
    handleClick(tab, event) {
    },
    //重置表单
    resetForm(formName) {
      this.$refs[formName].resetFields();
    },
    //提交表单
    submitForm(formName) {
      this.$refs[formName].validate((valid) =&amp;gt; {
        if (valid) {
          this.$message({
            type: 'success',
            message: '登录成功'
          });
          this.$router.push('HelloWorld');
        } else {
          console.log('error submit!!');
          return false;
        }
      });
    },
  },
  components: {
    register
  }
}
&amp;lt;/script&amp;gt;
&amp;lt;style rel=&quot;stylesheet/scss&quot; lang=&quot;scss&quot;&amp;gt;
.login {
  width: 400px;
  margin: 0 auto;
}
#app {
  font-family: 'Avenir', Helvetica, Arial, sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  text-align: center;
  color: #2c3e50;
  margin-top: 60px;
}
.el-tabs__item {
  text-align: center;
  width: 60px;
}
&amp;lt;/style&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;接下来是注册组件&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;//register组件
&amp;lt;template&amp;gt;
  &amp;lt;el-form :model=&quot;ruleForm&quot; :rules=&quot;rules&quot; ref=&quot;ruleForm&quot; label-width=&quot;100px&quot; class=&quot;demo-ruleForm&quot;&amp;gt;
    &amp;lt;el-form-item label=&quot;名称&quot; prop=&quot;name&quot;&amp;gt;
      &amp;lt;el-input v-model=&quot;ruleForm.name&quot;&amp;gt;&amp;lt;/el-input&amp;gt;
    &amp;lt;/el-form-item&amp;gt;
    &amp;lt;el-form-item label=&quot;密码&quot; prop=&quot;pass&quot;&amp;gt;
      &amp;lt;el-input type=&quot;password&quot; v-model=&quot;ruleForm.pass&quot; auto-complete=&quot;off&quot;&amp;gt;&amp;lt;/el-input&amp;gt;
    &amp;lt;/el-form-item&amp;gt;
    &amp;lt;el-form-item label=&quot;确认密码&quot; prop=&quot;checkPass&quot;&amp;gt;
      &amp;lt;el-input type=&quot;password&quot; v-model=&quot;ruleForm.checkPass&quot; auto-complete=&quot;off&quot;&amp;gt;&amp;lt;/el-input&amp;gt;
    &amp;lt;/el-form-item&amp;gt;
    &amp;lt;el-form-item&amp;gt;
      &amp;lt;el-button type=&quot;primary&quot; @click=&quot;submitForm('ruleForm')&quot;&amp;gt;注册&amp;lt;/el-button&amp;gt;
      &amp;lt;el-button @click=&quot;resetForm('ruleForm')&quot;&amp;gt;重置&amp;lt;/el-button&amp;gt;
    &amp;lt;/el-form-item&amp;gt;
  &amp;lt;/el-form&amp;gt;
&amp;lt;/template&amp;gt;
&amp;lt;script&amp;gt;
export default {
  data() {
    var validatePass = (rule, value, callback) =&amp;gt; {
      if (value === '') {
        callback(new Error('请输入密码'));
      } else {
        if (this.ruleForm.checkPass !== '') {
          this.$refs.ruleForm.validateField('checkPass');
        }
        callback();
      }
    };
    var validatePass2 = (rule, value, callback) =&amp;gt; {
      if (value === '') {
        callback(new Error('请再次输入密码'));
      } else if (value !== this.ruleForm.pass) {
        callback(new Error('两次输入密码不一致!'));
      } else {
        callback();
      }
    };
    return {
      activeName: 'second',
      ruleForm: {
        name: '',
        pass: '',
        checkPass: '',
      },
      rules: {
        name: [
          { required: true, message: '请输入您的名称', trigger: 'blur' },
          { min: 2, max: 5, message: '长度在 2 到 5 个字符', trigger: 'blur' }
        ],
        pass: [
          { required: true, validator: validatePass, trigger: 'blur' }
        ],
        checkPass: [
          { required: true, validator: validatePass2, trigger: 'blur' }
        ],
      }
    };
  },
  methods: {
    submitForm(formName) {
      this.$refs[formName].validate((valid) =&amp;gt; {
        if (valid) {
          this.$message({
            type: 'success',
            message: '注册成功'
          });
          // this.activeName: 'first',
        } else {
          console.log('error submit!!');
          return false;
        }
      });
    },
    resetForm(formName) {
      this.$refs[formName].resetFields();
    }
  }
}
&amp;lt;/script&amp;gt;
&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;vue-router&quot;&gt;vue-router&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;vue-router&lt;/em&gt;是vue创建单页项目的核心，可以通过组合组件来组成应用程序，我们要做的是将组件(components)映射到路由(routes)，然后告诉&lt;em&gt;vue-router&lt;/em&gt; 在哪里渲染它们。&lt;br/&gt;上面的代码里已有涉及到一些路由切换，我们现在来完善路由：&lt;/p&gt;
&lt;h4 id=&quot;安装&quot;&gt;安装&lt;/h4&gt;
&lt;pre&gt;
&lt;code&gt;$ cnpm i vue-router&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;引入&quot;&gt;引入&lt;/h4&gt;
&lt;pre&gt;
&lt;code&gt;import Router from 'vue-router'
Vue.use(Router)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;在src文件夹下面新建 router（文件夹）/index.js&lt;br/&gt;我们引入了三个组件：&lt;/p&gt;
&lt;p&gt;HelloWorld 登录后的展示页&lt;/p&gt;
&lt;p&gt;login 登录主界面&lt;/p&gt;
&lt;p&gt;register 注册组件&lt;/p&gt;
&lt;h4 id=&quot;路由守卫&quot;&gt;路由守卫&lt;/h4&gt;
&lt;p&gt;利用&lt;em&gt;router.beforeEach&lt;/em&gt;路由守卫设置需要先登录的页面。通过&lt;em&gt;requiresAuth&lt;/em&gt;这个字段来判断该路由是否需要登录权限，需要权限的路由就拦截，然后再判断是否有token(下文会讲到token)，有就直接登录，没有就跳到登录页面。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;import Vue from 'vue'
import Router from 'vue-router'
import HelloWorld from '@/components/HelloWorld'
import login from '@/components/login'
import register from '@/components/register'
Vue.use(Router)

const router = new Router({
  mode: 'history',
  routes: [{
      path: '/',
      name: 'home',
      component: HelloWorld,
      meta: {
        requiresAuth: true
      }
    },
    {
      path: '/HelloWorld',
      name: 'HelloWorld',
      component: HelloWorld,
    },
    {
      path: '/login',
      name: 'login',
      component: login,
    },
    {
      path: '/register',
      name: 'register',
      component: register,
    },
  ]
});

//注册全局钩子用来拦截导航
router.beforeEach((to, from, next) =&amp;gt; {
  //获取store里面的token
  let token = store.state.token;
  //判断要去的路由有没有requiresAuth
  if (to.meta.requiresAuth) {
    if (token) {
      next();
    } else {
      next({
        path: '/login',
        query: { redirect: to.fullPath } // 将刚刚要去的路由path作为参数，方便登录成功后直接跳转到该路由
      });
    }
  } else {
    next(); 
  }
});
export default router;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;我们可以看到路由守卫中token是从store里面获取的，意味着我们是把token的各种状态存放到store里面，并进行获取，更新，删除等操作，这就需要引入vuex状态管理。&lt;/p&gt;
&lt;h2 id=&quot;vuex&quot;&gt;vuex&lt;/h2&gt;
&lt;p&gt;解释一下为什么一个简单的注册登录单页需要用到vuex：项目中我们各个组件的操作基本都需要获取到token进行验证，如果组件A存储了一个token，组件B要获取这个token就涉及到了组件通信，这会非常繁琐。引入vuex，不再是组件间的通信，而是组件和store的通信，简单方便。&lt;/p&gt;
&lt;h4 id=&quot;安装-1&quot;&gt;安装&lt;/h4&gt;
&lt;pre&gt;
&lt;code&gt;$ cnpm i vuex --S&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;引入-1&quot;&gt;引入&lt;/h4&gt;
&lt;p&gt;在main.js引入store，vue实例中也要加入store&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;//引入store
import store from './store'&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;然后在需要使用vuex的组件中引入&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;//store index.js
import Vuex from 'vuex'
Vue.use(Vuex)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;在src文件夹下面新建 store（文件夹）/index.js&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;//store index.js
import Vue from 'vue'
import Vuex from 'vuex'

Vue.use(Vuex);

//初始化时用sessionStore.getItem('token'),这样子刷新页面就无需重新登录
const state = {
    token: window.sessionStorage.getItem('token'),
    username: ''
};

const mutations = {
    LOGIN: (state, data) =&amp;gt; {
        //更改token的值
        state.token = data;
        window.sessionStorage.setItem('token', data);
    },
    LOGOUT: (state) =&amp;gt; {
        //登出的时候要清除token
        state.token = null;
        window.sessionStorage.removeItem('token');
    },
    USERNAME: (state, data) =&amp;gt; {
        //把用户名存起来
        state.username = data;
        window.sessionStorage.setItem('username', data);
    }
};

const actions = {
    UserLogin({ commit }, data){
        commit('LOGIN', data);
    },
    UserLogout({ commit }){
        commit('LOGOUT');
    },
    UserName({ commit }, data){
        commit('USERNAME', data);
    }
};

export default new Vuex.Store({
    state,
    mutations,
    actions
});&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;可以看到我们通过actions提交mutation，进行token的更改、清除以及用户名储存的操作。&lt;/p&gt;
&lt;p&gt;此时启动项目，可以看到初步的注册登录界面，点击注册或登录按钮可以切换到相应界面，并有基础的表单验证，登录后会进入helloworld页面。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images.vrm.cn/2018/04/09/GIF1.gif&quot; alt=&quot;image&quot;/&gt;&lt;/p&gt;
&lt;p&gt;我们写好了基础界面，接下来就是要把表单数据发送到后台并进行一系列处理。现在还没有后端接口没关系，我们先写好前端axios请求。&lt;/p&gt;
&lt;h2 id=&quot;axios&quot;&gt;axios&lt;/h2&gt;
&lt;p&gt;vue的通讯之前使用&lt;em&gt;vue-resource&lt;/em&gt;，有很多坑。直到vue2.0来临，直接抛弃&lt;em&gt;vue-resource&lt;/em&gt;，而使用&lt;em&gt;axios&lt;/em&gt;。&lt;/p&gt;
&lt;h4 id=&quot;用途&quot;&gt;用途：&lt;/h4&gt;
&lt;p&gt;封装ajax，用来发送请求，异步获取数据。以Promise为基础的HTTP客户端，适用于：浏览器和node.js。&lt;/p&gt;
&lt;p&gt;具体API中文说明：&lt;a href=&quot;https://www.kancloud.cn/yunye/axios/234845&quot; class=&quot;uri&quot;&gt;https://www.kancloud.cn/yunye/axios/234845&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;安装-2&quot;&gt;安装&lt;/h4&gt;
&lt;pre&gt;
&lt;code&gt;$ cnpm i -S axios&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;引入-2&quot;&gt;引入&lt;/h4&gt;
&lt;pre&gt;
&lt;code&gt;import axios from 'axios'&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;拦截器&quot;&gt;拦截器&lt;/h4&gt;
&lt;p&gt;在设置vue-router那部分加入了路由守卫拦截需要登录的路由，但这种方式只是简单的前端路由控制，并不能真正阻止用户访问需要登录权限的路由。当token失效了，但token依然保存在本地。这时候你去访问需要登录权限的路由时，实际上应该让用户重新登录。这时候就需要拦截器&lt;em&gt;interceptors&lt;/em&gt; + 后端接口返回的http状态码来判断。&lt;/p&gt;
&lt;p&gt;在src文件夹下面新建axios.js(和App.vue同级)&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;//axios.js
import axios from 'axios'
import store from './store'
import router from './router'

//创建axios实例
var instance = axios.create({
  timeout: 5000, //请求超过5秒即超时返回错误
  headers: { 'Content-Type': 'application/json;charset=UTF-8' },
});

//request拦截器
instance.interceptors.request.use(
  config =&amp;gt; {
    //判断是否存在token，如果存在的话，则每个http header都加上token
    if (store.state.token) {
      config.headers.Authorization = `token ${store.state.token}`;
    }
    return config;
  }
);

//respone拦截器
instance.interceptors.response.use(
  response =&amp;gt; {
    return response;
  },
  error =&amp;gt; { //默认除了2XX之外的都是错误的，就会走这里
    if (error.response) {
      switch (error.response.status) {
        case 401:
          router.replace({ //跳转到登录页面
            path: 'login',
            query: { redirect: router.currentRoute.fullPath } // 将跳转的路由path作为参数，登录成功后跳转到该路由
          });
      }
    }
    return Promise.reject(error.response);
  }
);

export default {
    //用户注册
    userRegister(data){
        return instance.post('/api/register', data);
    },
    //用户登录
    userLogin(data){
        return instance.post('/api/login', data); 
    },
    //获取用户
    getUser(){
        return instance.get('/api/user');
    },
    //删除用户
    delUser(data){
        return instance.post('/api/delUser', data);
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;代码最后暴露了四个请求方法，分别对应注册(register)、登录(login)、获取(user)、删除(delUser)用户，并且都在/api下面，四个请求接口分别是：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;http://localhost:8080/api/login
http://localhost:8080/api/register
http://localhost:8080/api/user
http://localhost:8080/api/delUser&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;后面我们再利用这四个方法写相对应的后台接口。&lt;/p&gt;
&lt;h2 id=&quot;服务端-server&quot;&gt;服务端 server&lt;/h2&gt;
&lt;h3 id=&quot;注意&quot;&gt;注意&lt;/h3&gt;
&lt;p&gt;文章从这里开始进入服务端，由于服务端需要和数据库、http安全通讯（jwt）共同搭建，因此请结合本节和下面的数据库、jwt章节阅读。&lt;/p&gt;
&lt;p&gt;koa2可以使用可以使用async/await语法，免除重复繁琐的回调函数嵌套，并使用ctx来访问Context对象。&lt;/p&gt;
&lt;p&gt;现在我们用koa2写项目的API服务接口。&lt;/p&gt;
&lt;h4 id=&quot;安装-3&quot;&gt;安装&lt;/h4&gt;
&lt;pre&gt;
&lt;code&gt;$ cnpm i koa
$ cnpm i koa-router -S      //koa路由中间件
$ cnpm i koa-bodyparser -S  //处理post请求，并把koa2上下文的表单数据解析到ctx.request.body中&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;引入-3&quot;&gt;引入&lt;/h4&gt;
&lt;pre&gt;
&lt;code&gt;const Koa = require('koa');&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;在项目根目录下面新建server.js，作为整个server端的启动入口。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;//server.js
const Koa = require('koa');
const app = new Koa();

//router
const Router = require('koa-router');

//父路由
const router = new Router();

//bodyparser:该中间件用于post请求的数据
const bodyParser = require('koa-bodyparser');
app.use(bodyParser());

//引入数据库操作方法
const UserController = require('./server/controller/user.js');

//checkToken作为中间件存在
const checkToken = require('./server/token/checkToken.js');

//登录
const loginRouter = new Router();
loginRouter.post('/login', UserController.Login);
//注册
const registerRouter = new Router();
registerRouter.post('/register', UserController.Reg);

//获取所有用户
const userRouter = new Router();
userRouter.get('/user', checkToken, UserController.GetAllUsers);
//删除某个用户
const delUserRouter = new Router();
delUserRouter.post('/delUser', checkToken, UserController.DelUser);

//装载上面四个子路由
router.use('/api',loginRouter.routes(),loginRouter.allowedMethods());
router.use('/api',registerRouter.routes(),registerRouter.allowedMethods());
router.use('/api',userRouter.routes(),userRouter.allowedMethods());
router.use('/api',delUserRouter.routes(),delUserRouter.allowedMethods());

//加载路由中间件
app.use(router.routes()).use(router.allowedMethods());

app.listen(8888, () =&amp;gt; {
    console.log('The server is running at http://localhost:' + 8888);
});
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;代码里可以看到，获取用户和删除用户都需要验证token（详见下文jwt章节），并且我们把四个接口挂在到了/api上，和前面axios的请求路径一致。&lt;/p&gt;
&lt;h4 id=&quot;接口地址配置&quot;&gt;接口地址配置&lt;/h4&gt;
&lt;p&gt;另外由于我们的项目启动端口是8080，koa接口监听的端口是8888，于是需要在config/index.js文件里面，在dev配置里加上：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;proxyTable: {
    '/api': {
        target: 'http://localhost:8888',
        changeOrigin: true
    }
},&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;jsonwebtokenjwt&quot;&gt;jsonwebtoken（JWT）&lt;/h2&gt;
&lt;p&gt;JWT能够在HTTP通信过程中，帮助我们进行身份认证。&lt;/p&gt;
&lt;p&gt;具体API详见：&lt;a href=&quot;https://segmentfault.com/a/1190000009494020&quot; class=&quot;uri&quot;&gt;https://segmentfault.com/a/1190000009494020&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;json-web-token是怎么工作的&quot;&gt;Json Web Token是怎么工作的？&lt;/h4&gt;
&lt;p&gt;1、客户端通过用户名和密码登录服务器；&lt;/p&gt;
&lt;p&gt;2、服务端对客户端身份进行验证；&lt;/p&gt;
&lt;p&gt;3、服务端对该用户生成Token，返回给客户端；&lt;/p&gt;
&lt;p&gt;4、客户端将Token保存到本地浏览器，一般保存到cookie（本文是用sessionStorage，看情况而定）中；&lt;/p&gt;
&lt;p&gt;5、客户端发起请求，需要携带该Token；&lt;/p&gt;
&lt;p&gt;6、服务端收到请求后，首先验证Token，之后返回数据。服务端不需要保存Token，只需要对Token中携带的信息进行验证即可。无论客户端访问后台的哪台服务器，只要可以通过用户信息的验证即可。&lt;/p&gt;
&lt;p&gt;在server文件夹，下面新建/token(文件夹)里面新增checkToken.js和createToken.js，分别放置检查和新增token的方法。&lt;/p&gt;
&lt;h4 id=&quot;安装-4&quot;&gt;安装&lt;/h4&gt;
&lt;pre&gt;
&lt;code&gt;$ cnpm i jsonwebtoken -S&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;createtoken.js&quot;&gt;createToken.js&lt;/h4&gt;
&lt;pre&gt;
&lt;code&gt;const jwt = require('jsonwebtoken');
module.exports = function(user_id){
    const token = jwt.sign({user_id: user_id}, 'zhangzhongjie', {expiresIn: '60s'
    });
    return token;
};
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;创建token时，我们把用户名作为JWT Payload的一个属性，并且把密钥设置为‘zhangzhongjie’,token过期时间设置为60s。意思是登录之后，60s内刷新页面不需要再重新登录。&lt;/p&gt;
&lt;h4 id=&quot;checktoken.js&quot;&gt;checkToken.js&lt;/h4&gt;
&lt;pre&gt;
&lt;code&gt;const jwt = require('jsonwebtoken');
//检查token是否过期
module.exports = async ( ctx, next ) =&amp;gt; {
    //拿到token
    const authorization = ctx.get('Authorization');
    if (authorization === '') {
        ctx.throw(401, 'no token detected in http headerAuthorization');
    }
    const token = authorization.split(' ')[1];
    let tokenContent;
    try {
        tokenContent = await jwt.verify(token, 'zhangzhongjie');//如果token过期或验证失败，将抛出错误
    } catch (err) {
        ctx.throw(401, 'invalid token');
    }
    await next();
};&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;先拿到token再用jwt.verify进行验证，注意此时密钥要对应上createToken.js的密钥‘zhangzhongjie’。如果token为空、过期、验证失败都抛出401错误，要求重新登录。&lt;/p&gt;
&lt;h2 id=&quot;数据库-mongodb&quot;&gt;数据库 mongodb&lt;/h2&gt;
&lt;p&gt;MongoDB是一种文档导向数据库管理系统，旨在为 WEB 应用提供可扩展的高性能数据存储解决方案。用node链接MongoDB非常方便。&lt;/p&gt;
&lt;h4 id=&quot;安装-5&quot;&gt;安装&lt;/h4&gt;
&lt;pre&gt;
&lt;code&gt;$ cnpm i mongoose -S&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;MongoDB的连接有好几种方式，这里我们用connection。connection是mongoose模块的默认引用，返回一个Connetion对象。&lt;/p&gt;
&lt;p&gt;在server文件夹下新建db.js，作为数据库连接入口。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;//db.js
const mongoose = require('mongoose');
mongoose.connect('mongodb://localhost/vue-login');

let db = mongoose.connection;
// 防止Mongoose: mpromise 错误
mongoose.Promise = global.Promise;

db.on('error', function(){
    console.log('数据库连接出错！');
});
db.on('open', function(){
    console.log('数据库连接成功！');
});

//声明schema
const userSchema = mongoose.Schema({
    username: String,
    password: String,
    token: String,
    create_time: Date
});
//根据schema生成model
const User = mongoose.model('User', userSchema)

module.exports = User;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;除了我们用的&lt;em&gt;connetion&lt;/em&gt;，还有&lt;em&gt;connect()&lt;/em&gt;和&lt;em&gt;createConnection()&lt;/em&gt;连接方式。&lt;/p&gt;
&lt;p&gt;Schema定义表的模板，让这一类document在数据库中有一个具体的构成、存储模式。但也仅仅是定义了Document是什么样子的，至于生成document和对document进行各种操作（增删改查）则是通过相对应的model来进行的，那我们就需要把userSchema转换成我们可以使用的model，也就是说model才是我们可以进行操作的handle。&lt;/p&gt;
&lt;p&gt;编译完model我们就得到了一个名为&lt;em&gt;User&lt;/em&gt;的model。&lt;/p&gt;
&lt;p&gt;注意你在这里定义的schema表，后面写注册入库时数据的存储需要对应这个表。&lt;/p&gt;
&lt;p&gt;在server文件夹下新建controller(文件夹)/user.js,存放数据库的操作方法。&lt;/p&gt;
&lt;p&gt;先安装一些功能插件&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;$ cnpm i moment -s                 //用于生成时间
$ cnpm i objectid-to-timestamp -s  //用于生成时间
$ cnpm i sha1 -s                   //安全哈希算法，用于密码加密&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code&gt;//user.js
const User = require('../db.js').User;
//下面这两个包用来生成时间
const moment = require('moment');
const objectIdToTimestamp = require('objectid-to-timestamp');
//用于密码加密
const sha1 = require('sha1');
//createToken
const createToken = require('../token/createToken.js');

//数据库的操作
//根据用户名查找用户
const findUser = (username) =&amp;gt; {
    return new Promise((resolve, reject) =&amp;gt; {
        User.findOne({ username }, (err, doc) =&amp;gt; {
            if(err){
                reject(err);
            }
            resolve(doc);
        });
    });
};
//找到所有用户
const findAllUsers = () =&amp;gt; {
    return new Promise((resolve, reject) =&amp;gt; {
        User.find({}, (err, doc) =&amp;gt; {
            if(err){
                reject(err);
            }
            resolve(doc);
        });
    });
};
//删除某个用户
const delUser = function(id){
    return new Promise(( resolve, reject) =&amp;gt; {
        User.findOneAndRemove({ _id: id }, err =&amp;gt; {
            if(err){
                reject(err);
            }
            console.log('删除用户成功');
            resolve();
        });
    });
};
//登录
const Login = async ( ctx ) =&amp;gt; {
    //拿到账号和密码
    let username = ctx.request.body.name;
    let password = sha1(ctx.request.body.pass);//解密
    let doc = await findUser(username);    
    if(!doc){
        console.log('检查到用户名不存在');
        ctx.status = 200;
        ctx.body = {
            info: false
        }
    }else if(doc.password === password){
        console.log('密码一致!');

         //生成一个新的token,并存到数据库
        let token = createToken(username);
        console.log(token);
        doc.token = token;
        await new Promise((resolve, reject) =&amp;gt; {
            doc.save((err) =&amp;gt; {
                if(err){
                    reject(err);
                }
                resolve();
            });
        });
        ctx.status = 200;
        ctx.body = { 
            success: true,
            username,
            token, //登录成功要创建一个新的token,应该存入数据库
            create_time: doc.create_time
        };
    }else{
        console.log('密码错误!');
        ctx.status = 200;
        ctx.body = {
            success: false
        };
    }
};
//注册
const Reg = async ( ctx ) =&amp;gt; {
    let user = new User({
        username: ctx.request.body.name,
        password: sha1(ctx.request.body.pass), //加密
        token: createToken(this.username), //创建token并存入数据库
        create_time: moment(objectIdToTimestamp(user._id)).format('YYYY-MM-DD HH:mm:ss'),//将objectid转换为用户创建时间
    });
    //将objectid转换为用户创建时间(可以不用)
    user.create_time = moment(objectIdToTimestamp(user._id)).format('YYYY-MM-DD HH:mm:ss');

    let doc = await findUser(user.username);
    if(doc){ 
        console.log('用户名已经存在');
        ctx.status = 200;
        ctx.body = {
            success: false
        };
    }else{
        await new Promise((resolve, reject) =&amp;gt; {
            user.save((err) =&amp;gt; {
                if(err){
                    reject(err);
                }   
                resolve();
            });
        });
        console.log('注册成功');
        ctx.status = 200;
        ctx.body = {
            success: true
        }
    }
};
//获得所有用户信息
const GetAllUsers = async( ctx ) =&amp;gt; {
    //查询所有用户信息
    let doc = await findAllUsers();
    ctx.status = 200;
    ctx.body = {
        succsess: '成功',
        result: doc
    };
};

//删除某个用户
const DelUser = async( ctx ) =&amp;gt; {
    //拿到要删除的用户id
    let id = ctx.request.body.id;
    await delUser(id);
    ctx.status = 200;
    ctx.body = {
        success: '删除成功'
    };
};

module.exports = {
    Login,
    Reg,
    GetAllUsers,
    DelUser
};&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;上面这些方法构成了项目中数据库操作的核心，我们来剖析一下。&lt;/p&gt;
&lt;p&gt;首先定义了公用的三个基础方法：findUser、findAllUsers、delUser。其中findUser需要传入&lt;em&gt;username&lt;/em&gt;参数，delUser需要传入&lt;em&gt;id&lt;/em&gt;参数。&lt;/p&gt;
&lt;h4 id=&quot;注册方法&quot;&gt;注册方法&lt;/h4&gt;
&lt;p&gt;拿到用户post提交的表单信息，new之前按数据库设计好的并编译成model的User，把获取到的用户名，密码（需要用sha1哈希加密），token（利用之前创建好的createToken方法，并把用户名作为jwt的payload参数），生成时间存入。&lt;/p&gt;
&lt;p&gt;此时要先搜索数据库这个用户名是否存在，存在就返回失败，否则把user存入数据库并返回成功。&lt;/p&gt;
&lt;h4 id=&quot;登录方法&quot;&gt;登录方法&lt;/h4&gt;
&lt;p&gt;拿到用户post的表单信息，用户名和密码（注册用了哈希加密，此时要解密）。从数据库搜索该用户名，判断用户名是否存在，不存在返回错误，存在的话判断数据库里存的密码和用户提交的密码是否一致，一致的话给这个用户生成一个新的token，并存入数据库，返回成功。&lt;/p&gt;
&lt;h4 id=&quot;获得所有用户信息&quot;&gt;获得所有用户信息&lt;/h4&gt;
&lt;p&gt;就是把上面公用findAllUsers方法封装了一下并把信息放在result里面，让后面helloworld页面可以获取到这个数据并展示出来。&lt;/p&gt;
&lt;h4 id=&quot;删除某个用户&quot;&gt;删除某个用户&lt;/h4&gt;
&lt;p&gt;注意要先拿到需要删除的用户id，作为参数传入。&lt;/p&gt;
&lt;p&gt;写完这些方法，就可以把前面没有完善的注册登录功能完善了。&lt;/p&gt;
&lt;h4 id=&quot;数据库可视化&quot;&gt;数据库可视化&lt;/h4&gt;
&lt;p&gt;当我们注册完，数据入库，此时我们想查看一下刚才注册入库的数据，要用到数据库可视化工具。我是用&lt;em&gt;MongoBooster&lt;/em&gt;，操作简单。&lt;/p&gt;
&lt;p&gt;由下图可以看到示例中注册的两条数据，包含了id、username、password、token、time。那串长长的密码是由于哈希加密编译而成。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images.vrm.cn/2018/04/09/MongoDB.png&quot; alt=&quot;image&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;整合&quot;&gt;整合&lt;/h2&gt;
&lt;h4 id=&quot;完善注册组件&quot;&gt;完善注册组件&lt;/h4&gt;
&lt;p&gt;在register.vue的表单验证后加上下列代码&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;//register.vue
if (valid) {
  axios.userRegister(this.ruleForm)
    .then(({}) =&amp;gt; {
      if (data.success) {
        this.$message({
          type: 'success',
          message: '注册成功'
        });
      } else {
        this.$message({
          type: 'info',
          message: '用户名已经存在'
        });
      }
    })
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;完善登录组件&quot;&gt;完善登录组件&lt;/h4&gt;
&lt;p&gt;登录组件我们之前没有任何数据提交，现在在验证成功后加入一系列方法完成登录操作：&lt;br/&gt;引入axios&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;import axios from '../axios.js'&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;然后在login.vue的表单验证后加上下列代码&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;//login.vue
if (valid) {
  axios.userLogin(this.ruleForm)
    .then(({ data }) =&amp;gt; {
      //账号不存在
      if (data.info === false) {
        this.$message({
          type: 'info',
          message: '账号不存在'
        });
        return;
      }
      //账号存在
      if (data.success) {
        this.$message({
          type: 'success',
          message: '登录成功'
        });
        //拿到返回的token和username，并存到store
        let token = data.token;
        let username = data.username;
        this.$store.dispatch('UserLogin', token);
        this.$store.dispatch('UserName', username);
        //跳到目标页
        this.$router.push('HelloWorld');
      }
    });
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;将表单数据提交到后台，返回data状态，进行账号存在与否的判断操作。登录成功需要拿到返回的token和username存到store，跳到目标HelloWorld页。&lt;/p&gt;
&lt;h4 id=&quot;完善目标页组件&quot;&gt;完善目标页组件&lt;/h4&gt;
&lt;p&gt;注册登录成功后，终于到了实际的展示页了——helloworld！&lt;/p&gt;
&lt;p&gt;我们来完善这个组件，让它展示出目前所有的已注册用户名，并给出删除按钮。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;//Helloworld.vue
&amp;lt;template&amp;gt;
  &amp;lt;div class=&quot;hello&quot;&amp;gt;
    &amp;lt;ul&amp;gt;
      &amp;lt;li v-for=&quot;(item,index) in users&quot; :key=&quot;item._id&quot;&amp;gt;
        {{ index + 1 }}.{{ item.username }}
        &amp;lt;el-button @click=&quot;del_user(index)&quot;&amp;gt;删除&amp;lt;/el-button&amp;gt;
      &amp;lt;/li&amp;gt;
    &amp;lt;/ul&amp;gt;
    &amp;lt;el-button type=&quot;primary&quot; @click=&quot;logout()&quot;&amp;gt;注销&amp;lt;/el-button&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;

&amp;lt;script&amp;gt;
import axios from '../axios.js'
export default {
  name: 'HelloWorld',
  data () {
    return {
      users:''
    }
  },
  created(){
    axios.getUser().then((response) =&amp;gt; {
      if(response.status === 401){
        //不成功跳转回登录页
        this.$router.push('/login');
        //并且清除掉这个token
        this.$store.dispatch('UserLogout');
      }else{
        //成功了就把data.result里的数据放入users，在页面展示
        this.users = response.data.result;
      }
    })
  },
  methods:{
    del_user(index, event){
      let thisID = {
        id:this.users[index]._id
      }
      axios.delUser(thisID)
        .then(response =&amp;gt; {
          this.$message({
            type: 'success',
            message: '删除成功'
          });
          //移除节点
          this.users.splice(index, 1);
        }).catch((err) =&amp;gt; {
          console.log(err);
      });
    },
    logout(){
      //清除token
      this.$store.dispatch('UserLogout');
      if (!this.$store.state.token) {
        this.$router.push('/login')
        this.$message({
          type: 'success',
          message: '注销成功'
        })
      } else {
        this.$message({
          type: 'info',
          message: '注销失败'
        })
      }
    },
  }
}
&amp;lt;/script&amp;gt;

&amp;lt;style scoped&amp;gt;
h1, h2 {
  font-weight: normal;
}
ul {
  list-style-type: none;
  padding: 0;
}
li {
  display: inline-block;
  margin: 0 10px;
}
a {
  color: #42b983;
}
.hello {
  font-family: 'Avenir', Helvetica, Arial, sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  text-align: center;
  color: #2c3e50;
  width: 400px;
  margin: 60px auto 0 auto;
}
&amp;lt;/style&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;输出页面比较简单，这里说几个要点：&lt;/p&gt;
&lt;p&gt;1.要在实例创建完成后（&lt;em&gt;created()&lt;/em&gt;）立即请求getUser()接口，请求失败要清楚掉token，请求成功要把返回数据放入user以供页面渲染。&lt;/p&gt;
&lt;p&gt;2.&lt;em&gt;thisID&lt;/em&gt;要写成对象格式，否则会报错&lt;/p&gt;
&lt;p&gt;3.注销时要清除掉token&lt;/p&gt;
&lt;h2 id=&quot;总结&quot;&gt;总结&lt;/h2&gt;
&lt;p&gt;人的思维转变确实是最难的。按流程来说，应该是koa先设计出接口，前端再根据这个接口去请求，但我反过来，是先写好前端请求，再根据这个请求去制定接口。&lt;/p&gt;
&lt;p&gt;当然，也遇到了很多困难：当我搞好了前端展示页面，axios也写好了，但在用koa写接口这里卡了很久，完全没有概念，就是前言说的“只知道数据怎么进，不知道怎么出”。然后遇到接口500报错又调试了很久，主要是自己对接口没有调试概念，最后还是公司的琅琊大佬帮忙解决，感谢。&lt;/p&gt;
</description>
<pubDate>Mon, 09 Apr 2018 15:42:00 +0000</pubDate>
<dc:creator>zhangzhongjie</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/zjzhang/p/8764428.html</dc:identifier>
</item>
<item>
<title>[机器学习Lesson3] 梯度下降算法 - mantou叔叔</title>
<link>http://www.cnblogs.com/mantoudev/p/8764439.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/mantoudev/p/8764439.html</guid>
<description>&lt;h2 id=&quot;gradient-descent梯度下降&quot;&gt;1. Gradient Descent（梯度下降）&lt;/h2&gt;
&lt;p&gt;梯度下降算法是很常用的算法，可以将代价函数J最小化。它不仅被用在线性回归上，也被广泛应用于机器学习领域中的众多领域。&lt;/p&gt;
&lt;h3 id=&quot;线性回归问题应用&quot;&gt;1.1 线性回归问题应用&lt;/h3&gt;
&lt;p&gt;我们有一个函数&lt;code&gt;J(θ0,θ1)&lt;/code&gt;，要使其最小化&lt;code&gt;minJ(θ0,θ01)&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://s1.ax2x.com/2018/04/08/IPxlB.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Outline&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;对θ0,θ1开始进行一些猜测&lt;br/&gt;通常将初θ0,θ1初始化为0&lt;/li&gt;
&lt;li&gt;在梯度算法中，要做的就是不停的一点点改变θ0和θ1试图通过这种改变使得J(θ0,θ1)变小，直到找到J的最小值或者局部最小值。&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;梯度算法工作原理&quot;&gt;1.2 梯度算法工作原理&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://s1.ax2x.com/2018/04/08/Ia9VQ.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;现在我们把这个图像想象为一座山，想像类似这样的景色 ：公园中有两座山，想象一下你正站立在山的这一点上 站立在你想象的公园这座红色山上。在梯度下降算法中，我们要做的就是旋转360度，看看我们的周围，并问自己，我要在某个方向上，用小碎步尽快下山。如果我想要下山。如果我想尽快走下山，这些小碎步需要朝什么方向? 如果我们站在山坡上的这一点，你看一下周围，你会发现最佳的下山方向，大约是那个方向。&lt;/p&gt;
&lt;p&gt;现在你在山上的新起点上 你再看看周围 然后再一次想想 我应该从什么方向迈着小碎步下山? 然后你按照自己的判断又迈出一步 往那个方向走了一步 然后重复上面的步骤。从这个新的点，你环顾四周并决定从什么方向将会最快下山。然后又迈进了一小步，并依此类推，直到你接近这里，直到局部最低点的位置。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://s1.ax2x.com/2018/04/08/Ia32E.md.png&quot; alt=&quot;image&quot;/&gt;&lt;/p&gt;
&lt;p&gt;现在想象一下，我们在刚才的右边一些的位置，对梯度下降进行初始化。想象我们在右边高一些的这个点。开始使用梯度下降。如果你重复上述步骤，停留在该点，并环顾四周，往下降最快的方向迈出一小步，然后环顾四周又迈出一步，然后如此往复。如果你从右边不远处开始梯度下降算法将会带你来到这个右边的第二个局部最优处。 如果从刚才的第一个点出发，你会得到这个局部最优解 但如果你的起始点偏移了一些，起始点的位置略有不同 你会得到一个非常不同的局部最优解。这就是梯度下降算法的一个特点。&lt;/p&gt;
&lt;h3 id=&quot;梯度下降算法定义&quot;&gt;1.3 梯度下降算法定义。&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://s1.ax2x.com/2018/04/08/IaHFz.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;:=&lt;/code&gt;：赋值符号（Assignment）.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;α&lt;/code&gt;：这里的α是一个数字，被称为学习速率(learning rate)。在梯度下降算法中，它控制了我们下山时会迈出多大的步子。&lt;/li&gt;
&lt;li&gt;微分项。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;在梯度下降中,我们要更新θ0和θ1。当 j=0 和 j=1 时 会产生更新。所以你将更新J、θ0还有θ1。实现梯度下降算法的微妙之处是，在这个表达式中，如果你要更新这个等式，你需要同时更新 θ0和θ1。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://s1.ax2x.com/2018/04/08/IaTsS.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;θ0和θ1需要同步更新，右侧是非同步更新，错误。&lt;/p&gt;
&lt;h3 id=&quot;梯度下降和代价函数&quot;&gt;1.4 梯度下降和代价函数&lt;/h3&gt;
&lt;p&gt;梯度下降是很常用的算法，它不仅被用在线性回归上 和线性回归模型还有平方误差代价函数。&lt;br/&gt;当具体应用到线性回归的情况下,可以推导出一种新形式的梯度下降法方程：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://s1.ax2x.com/2018/04/09/INpC2.png&quot; alt=&quot;image&quot;/&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;m：训练集的大小&lt;/li&gt;
&lt;li&gt;θ0与θ1同步改变&lt;/li&gt;
&lt;li&gt;xi和yi：给定的训练集的值(数据)。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;我们已经分离出两例θj：θ0和θ1为独立的方程;在θ1中，在推导最后乘以Xi。以下是推导∂/∂θjJ(θ)的一个例子:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://wx2.sinaimg.cn/mw690/0060lm7Tly1fq6tgs5x0bj309s05a3yt.jpg&quot; alt=&quot;image&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这一切的关键是，如果我们从猜测我们的假设开始，然后反复应用这些梯度下降方程，我们的假设将变得越来越精确。&lt;/p&gt;
&lt;p&gt;因此，这只是原始成本函数J的梯度下降。这个方法是在每个步骤的每个训练集中的每一个例子，被称为批量梯度下降。注意，虽然梯度下降一般容易受到局部极小值的影响，但我们在线性回归中所提出的优化问题只有一个全局，没有其他局部最优解，因此梯度下降总是收敛（假定学习率α不是太大）到全局最小值。实际上，j是凸二次函数。这里是一个梯度下降的例子，它是为了最小化二次函数而运行的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://s1.ax1x.com/2018/04/09/CFFmXn.png&quot; alt=&quot;image&quot;/&gt;&lt;/p&gt;
&lt;p&gt;上面所示的椭圆是二次函数的轮廓图。也表明是通过梯度下降的轨迹，它被初始化为（48,30）。X在图（连接的直线）的标志，θ梯度穿过它收敛到最小的连续值。&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;本文资料部分来源于吴恩达 (Andrew Ng) 博士的斯坦福大学机器学习公开课视频教程。&lt;/p&gt;
&lt;p&gt;[1]网易云课堂机器学习课程：&lt;br/&gt;&lt;a href=&quot;http://open.163.com/special/opencourse/machinelearning.html&quot; class=&quot;uri&quot;&gt;http://open.163.com/special/opencourse/machinelearning.html&lt;/a&gt;&lt;br/&gt;[2]coursera课程：&lt;br/&gt;&lt;a href=&quot;https://www.coursera.org/learn/machine-learning/&quot; class=&quot;uri&quot;&gt;https://www.coursera.org/learn/machine-learning/&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Mon, 09 Apr 2018 15:41:00 +0000</pubDate>
<dc:creator>mantou叔叔</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/mantoudev/p/8764439.html</dc:identifier>
</item>
<item>
<title>Mego开发文档 - 从EF6/EFCore迁移到Mego - CarefreeXT</title>
<link>http://www.cnblogs.com/CarefreeXT/p/8763454.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/CarefreeXT/p/8763454.html</guid>
<description>&lt;p&gt;如果您有EntityFragmework6或EntityFragmeworkCore的开发经验，在首次接触Mego框架时会发现这两个框架非常相似，本文将帮忙您了解到两者的差异以及从EF6/EFCore迁移到Mego的方法。&lt;/p&gt;
&lt;p&gt;Mego本身就是基于EF6与EFCore的思想来开发的，因此这两者的很多做法都是相通的，同时为了考虑到易于使用，所以最外层的API我们几乎还是维持了EF6的原样，但是它们毕竟还是两个框架，只是表面相似其实有着本质的不同。这里我们列出几点重要的区别：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Mego中没有EDM模型，我们为了实现对象到数据为表映射的高度灵活，于是省略了这一层的中间模型，我们可以支持任意CLR类型映射到数据库的任何表对象。&lt;/li&gt;
&lt;li&gt;Mego中没有对象更改跟踪，为了节省避免创建出多余的对象提升性能，这一点上我们没有像EF那么便捷，但是我们可以最快速的完成对象与数据库之前的数据往返。&lt;/li&gt;
&lt;li&gt;Mego中数据关系只有逻辑上的关系重数（一对一、一对多及多对多等）概念，在代码实现上我们不关注这一点，这样我们可以最大灵活的创建出我们想要的关系。&lt;/li&gt;
&lt;li&gt;Mego中不需要特定数据库的附加程序集，像EF以及其他众多的ORM框架都会针对每一种数据库的实现一个附加的程序集。在这一点上Mego有别于其他所有的框架我们将统一实现所有支持的数据库，以保证我们对每一种数据库都有一致的实现。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;下面我们将一步步完成的一个从EF迁移到Mego的过程。&lt;/p&gt;
&lt;h2 id=&quot;code-first创建ef&quot;&gt;Code First创建EF&lt;/h2&gt;
&lt;p&gt;首先我们先确定下要操作的数据库结构，如下图所示&lt;br/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1364581/201804/1364581-20180409233500504-1441889178.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;然后我们创建一个控制台项目，并添加&lt;strong&gt;实体数据模型&lt;/strong&gt;，这里我们使用来自数据库的Code First的模式创建，如下图所示。&lt;br/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1364581/201804/1364581-20180409233505859-1069914015.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;在经过一系列设置后就创建了很多代码文件，即完成创建工作，这里我们看下生成的数据上下文对象代码。&lt;/p&gt;
&lt;pre class=&quot;c#&quot;&gt;
&lt;code&gt;using System;
using System.Data.Entity;
using System.ComponentModel.DataAnnotations.Schema;
using System.Linq;

public partial class OrderModel : DbContext
{
    public OrderModel()
        : base(&quot;name=OrderModel&quot;)
    {
    }

    public virtual DbSet&amp;lt;Customer&amp;gt; Customers { get; set; }
    public virtual DbSet&amp;lt;OrderDetail&amp;gt; OrderDetails { get; set; }
    public virtual DbSet&amp;lt;Order&amp;gt; Orders { get; set; }
    public virtual DbSet&amp;lt;Product&amp;gt; Products { get; set; }
    public virtual DbSet&amp;lt;Warehouse&amp;gt; Warehouses { get; set; }

    protected override void OnModelCreating(DbModelBuilder modelBuilder)
    {
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;修改命名空间及注释&quot;&gt;修改命名空间及注释&lt;/h2&gt;
&lt;p&gt;在准备做这一步之前，需要添加对Mego的Nuget包引用。我们需要调整下所有生成代码文件中的命名空间。将如下的命名空间&lt;/p&gt;
&lt;pre class=&quot;c#&quot;&gt;
&lt;code&gt;using System.Data.Entity;
using System.ComponentModel.DataAnnotations.Schema;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;换成&lt;/p&gt;
&lt;pre class=&quot;c#&quot;&gt;
&lt;code&gt;using Caredev.Mego;
using Caredev.Mego.DataAnnotations;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;数据上下文构造函数做下调整&lt;/p&gt;
&lt;pre class=&quot;c#&quot;&gt;
&lt;code&gt;public OrderModel()
    : base(&quot;name=OrderModel&quot;)
{
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;改成&lt;/p&gt;
&lt;pre class=&quot;c#&quot;&gt;
&lt;code&gt;public OrderModel()
    : base(&quot;OrderModel&quot;)
{
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;然后删除OrderModel对象中的OnModelCreating方法。如果需要关系对象，则可以参考关系配置文档的相关信息。&lt;br/&gt;确认下数据对象类名与数据表是否一致，如果不一致需要像如下代码一样加入注释。&lt;/p&gt;
&lt;pre class=&quot;c#&quot;&gt;
&lt;code&gt;[Table(&quot;Customers&quot;)]
public partial class Customer
{
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;演示查询操作&quot;&gt;演示查询操作&lt;/h2&gt;
&lt;p&gt;到这里我们就完成的所有切换工作，现在就可以使用Mego操作数据。&lt;/p&gt;
&lt;pre class=&quot;c#&quot;&gt;
&lt;code&gt;using (var context = new OrderModel())
{
    var list = context.Customers.ToArray();
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;代码生成工具&quot;&gt;代码生成工具&lt;/h2&gt;
&lt;p&gt;为了方便大家日常开发，我们计划开发Mego框架的多个数据库代码生成工具，可以支持命令行调用以及集成到Visual Studio。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/CarefreeXT/p/8747704.html&quot;&gt;[文档目录]&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Mon, 09 Apr 2018 15:39:00 +0000</pubDate>
<dc:creator>CarefreeXT</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/CarefreeXT/p/8763454.html</dc:identifier>
</item>
<item>
<title>QT5.5与MYSQL5.6数据库连接的具体方法与实现 - 半路出家人</title>
<link>http://www.cnblogs.com/xtu-wlf1212/p/8764015.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/xtu-wlf1212/p/8764015.html</guid>
<description>&lt;p&gt;      由于毕设需要用到QT读取数据库中的数据，并将数据保存至数据库中。花了一天的时间，总算实现了从QT中读取数据库中的数据。网上相关资料很多，但是写得不是很全，中间出现了一些问题，解决起来比较麻烦。所以本文从MYSQL下载、安装，QT连接MYSQL尽可能写详细，若有不足，还请见谅。&lt;/p&gt;
&lt;p&gt;    1、QT5.5下载&lt;/p&gt;
&lt;p&gt;        本文使用的 windows32 QT5.5 版本为（qt-opensource-windows-x86-mingw492-5.5.10)，可从我的百度云：https://pan.baidu.com/s/1XsVmgd3Qd-J0BHPVOtMVkA下载&lt;/p&gt;
&lt;p&gt;        若选用高版本，具体安装方法可自行百度。&lt;/p&gt;
&lt;p&gt;    2、MYSQL5.6下载&lt;/p&gt;
&lt;p&gt;        由于QT选用的Windows32位，所以MYSQL也应选择Windows32位版本为mysql-5.6.39-win32.zip。(若QT选择的为Windows64位，则MYSQL应选择Windows64位），&lt;/p&gt;
&lt;p&gt;        可从我的百度云：https://pan.baidu.com/s/1XsVmgd3Qd-J0BHPVOtMVkA下载。&lt;/p&gt;
&lt;p&gt;        若选用高版本，具体下载方法可自行百度。&lt;/p&gt;
&lt;p&gt;   3、MYSQL5.6安装&lt;/p&gt;
&lt;p&gt;        1)将mysql-5.6.39-win32.zip解压至D盘中的MYSQL SERVER,且重命名为mysql-5.6。解压修改后的结果如图1-1所示。&lt;/p&gt;
&lt;p&gt;                                                  &lt;img src=&quot;https://images2018.cnblogs.com/blog/1303811/201804/1303811-20180409204503757-1883877974.png&quot; alt=&quot;&quot; width=&quot;394&quot; height=&quot;205&quot;/&gt;&lt;/p&gt;
&lt;p&gt;                                                                                   图1-1&lt;/p&gt;
&lt;p&gt;    2）修改my-default.ini,修改后如图1-2所示&lt;/p&gt;
&lt;p&gt;                                   &lt;img src=&quot;https://images2018.cnblogs.com/blog/1303811/201804/1303811-20180409204757990-1964021981.png&quot; alt=&quot;&quot; width=&quot;441&quot; height=&quot;332&quot;/&gt;&lt;/p&gt;
&lt;p&gt;                                                           图1-2&lt;/p&gt;
&lt;p&gt;3）增加环境变量。右键我的电脑，点属性，点高级系统设置，点环境变量，在PATH中添加 &lt;strong&gt;;D:\MYSQL SERVER\mysql-5.6\bin&lt;/strong&gt;(分号不要忘了，根据自己的安装目录改写），点击确认就行。&lt;/p&gt;
&lt;p&gt;4）在C盘中找到cmd.exe,并以管理员权限打开。分别执行以下指令:&lt;/p&gt;
&lt;p&gt;   d:&lt;/p&gt;
&lt;p&gt;   cd  MYSQL SERVER\mysql-5.6\bin &lt;/p&gt;
&lt;p&gt;&lt;span&gt;  mysqld -initalize -user=mysql -console&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;  mysqld -install，输入该指令后会打印 Service successfully installed&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;  net start mysql，输入该指令后会打印MySQL服务已经启动成功。至此MYSQL5.6已经安装成功，并且已运行。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; 4、MYSQL登陆与修改密码&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;  1)在cmd.exe软件中，继续输入SQL相关指令:&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;   mysql -u root -p,输入该指令后出现 Enter password:  ,第一次登陆直接回车，进入mysql软件。如图1-3&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;   &lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1303811/201804/1303811-20180409212423923-1223163649.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;                                   图1-3&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; 2）增加root的密码。&lt;/p&gt;
&lt;p&gt;    mysql&amp;gt; set password for root@localhost=password('88888888');&lt;/p&gt;
&lt;p&gt;    输入该指令后ront 的密码变为88888888。（在编写QT程序中需要用到用户名为root和密码为88888888）&lt;/p&gt;
&lt;p&gt;    mysql&amp;gt;exit&lt;/p&gt;
&lt;p&gt;    输入该指令后退出。&lt;/p&gt;
&lt;p&gt;   重新登陆，输入 mysql -u root -p，输入该指令后出现 Enter password: ，输入88888888。若输入密码不是88888888，则会出现报错，如图1-4所示&lt;/p&gt;
&lt;p&gt;                   &lt;img src=&quot;https://images2018.cnblogs.com/blog/1303811/201804/1303811-20180409220438281-1505822332.png&quot; alt=&quot;&quot; width=&quot;597&quot; height=&quot;264&quot;/&gt;&lt;/p&gt;
&lt;p&gt;                                                         图1-4&lt;/p&gt;
&lt;p&gt; 3）添加测试表，在test库中添加student表，并添加一些数据。具体操作如图1-5所示，至此MYSQL部分已经全部完成。(注意是在test库中添加，对应QT应选择test;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1303811/201804/1303811-20180409223311258-1659777547.png&quot; alt=&quot;&quot; width=&quot;876&quot; height=&quot;407&quot;/&gt;&lt;/p&gt;
&lt;p&gt;                                             图1-5&lt;/p&gt;
&lt;p&gt;5、建立QT程序&lt;/p&gt;
&lt;p&gt;1）将mysql-5.6文件lib目录下的libmysql.dll和libmysqld.dll复制到Qt5.5中的mingw493_32的bin文件下。如图1-6所示；&lt;img src=&quot;https://images2018.cnblogs.com/blog/1303811/201804/1303811-20180409224201008-666127858.png&quot; alt=&quot;&quot; width=&quot;853&quot; height=&quot;268&quot;/&gt;&lt;/p&gt;
&lt;p&gt;                                                             图1-6&lt;/p&gt;
&lt;p&gt;2）新建项目，选择QT Console Application。命名项目名为sql_test;&lt;/p&gt;
&lt;p&gt;在sql_test.pro文件中添加 QT +=sql&lt;/p&gt;
&lt;p&gt;main.cpp改为&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; #include &amp;lt;QCoreApplication&amp;gt;
&lt;span&gt; 2&lt;/span&gt; #include &amp;lt;QSqlDatabase&amp;gt;
&lt;span&gt; 3&lt;/span&gt; #include &amp;lt;QSqlQuery&amp;gt;
&lt;span&gt; 4&lt;/span&gt; #include &amp;lt;QSqlError&amp;gt;
&lt;span&gt; 5&lt;/span&gt; #include &amp;lt;QtDebug&amp;gt;
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; connect_mysql()
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;     QSqlDatabase db=QSqlDatabase::addDatabase(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;QMYSQL&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;        db.setHostName(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;127.0.0.1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;);      &lt;span&gt;//&lt;/span&gt;&lt;span&gt;连接数据库主机名，这里需要注意（若填的为”127.0.0.1“，出现不能连接，则改为localhost)&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt;        db.setPort(&lt;span&gt;3306&lt;/span&gt;);                 &lt;span&gt;//&lt;/span&gt;&lt;span&gt;连接数据库端口号，与设置一致&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt;         db.setDatabaseName(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;test&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;);      &lt;span&gt;//&lt;/span&gt;&lt;span&gt;连接数据库名，与设置一致&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt;         db.setUserName(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;root&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;);          &lt;span&gt;//&lt;/span&gt;&lt;span&gt;数据库用户名，与设置一致&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt;         db.setPassword(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;88888888&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;);    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;数据库密码，与设置一致&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt; &lt;span&gt;        db.open();
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;(!&lt;span&gt;db.open())
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;             qDebug()&amp;lt;&amp;lt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;不能连接&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;lt;&amp;lt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;connect to mysql error&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;lt;&amp;lt;&lt;span&gt;db.lastError().text();
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt; ;
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;         &lt;span&gt;else&lt;/span&gt;
&lt;span&gt;21&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;              qDebug()&amp;lt;&amp;lt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;连接成功&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;lt;&amp;lt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;connect to mysql OK&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; &lt;span&gt;        QSqlQuery query(db);
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;         query.exec(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;select * from student&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;         &lt;span&gt;while&lt;/span&gt;&lt;span&gt;(query.next()){
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;             qDebug()&amp;lt;&amp;lt;query.value(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;).toString();
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; main(&lt;span&gt;int&lt;/span&gt; argc,&lt;span&gt;char&lt;/span&gt; *&lt;span&gt;argv[])
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; &lt;span&gt;    QCoreApplication a(argc,argv);
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; &lt;span&gt;    connect_mysql();
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; a.exec();
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;3）测试结果&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1303811/201804/1303811-20180409225907576-921219615.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;                         图1-7&lt;/p&gt;
&lt;p&gt;&lt;span&gt;   结果表明，QT已经成功读取MYSQL中的student表。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;可以在   https://github.com/xtuwang/Qt_stduy.git中下载该项目。&lt;/p&gt;

</description>
<pubDate>Mon, 09 Apr 2018 15:28:00 +0000</pubDate>
<dc:creator>半路出家人</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/xtu-wlf1212/p/8764015.html</dc:identifier>
</item>
<item>
<title>SQL查询语句练习 - KrAchill</title>
<link>http://www.cnblogs.com/xld21/p/8763949.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/xld21/p/8763949.html</guid>
<description>&lt;p class=&quot;p&quot; align=&quot;justify&quot;&gt;&lt;span&gt;最近在学习&lt;/span&gt;SQL嘛,所以各个地方找题目来练手,毕竟现在能离得开数据库么?&lt;/p&gt;
&lt;p&gt;Student(S#,Sname,Sage,Ssex) &lt;span&gt;学生表&lt;/span&gt;&lt;br/&gt;Course(C#,Cname,T#) &lt;span&gt;课程表&lt;/span&gt;&lt;br/&gt;SC(S#,C#,score) &lt;span&gt;成绩表&lt;/span&gt;&lt;br/&gt;Teacher(T#,Tname) &lt;span&gt;教师表&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;问题：&lt;/span&gt;&lt;br/&gt;&lt;strong&gt;1&lt;/strong&gt;&lt;span&gt;、查询&lt;/span&gt;“&lt;strong&gt;001&lt;/strong&gt;”&lt;span&gt;课程比&lt;/span&gt;&lt;span&gt;“&lt;/span&gt;&lt;strong&gt;002&lt;/strong&gt;”&lt;span&gt;课程成绩高的所有学生的学号；&lt;/span&gt;&lt;br/&gt;  select a.S# from (select s#,score from SC where C#='001') a,(select s#,score&lt;br/&gt;  from SC where C#='002') b&lt;br/&gt;  where a.score&amp;gt;b.score and a.s#=b.s#;&lt;br/&gt;&lt;strong&gt;2&lt;/strong&gt;&lt;span&gt;、查询平均成绩大于&lt;/span&gt;60&lt;span&gt;分的同学的学号和平均成绩；&lt;/span&gt;&lt;br/&gt;    select S#,avg(score)&lt;br/&gt;    from sc&lt;br/&gt;    group by S# having avg(score) &amp;gt;&lt;strong&gt;60&lt;/strong&gt;;&lt;br/&gt;&lt;strong&gt;3&lt;/strong&gt;&lt;span&gt;、查询所有同学的学号、姓名、选课数、总成绩；&lt;/span&gt;&lt;br/&gt;  select Student.S#,Student.Sname,count(SC.C#),sum(score)&lt;br/&gt;  from Student left Outer join SC on Student.S#=SC.S#&lt;br/&gt;  group by Student.S#,Sname&lt;br/&gt;&lt;strong&gt;4&lt;/strong&gt;&lt;span&gt;、查询姓&lt;/span&gt;“&lt;span&gt;李&lt;/span&gt;&lt;span&gt;”&lt;/span&gt;&lt;span&gt;的老师的个数；&lt;/span&gt;&lt;br/&gt;  select count(distinct(Tname))&lt;br/&gt;  from Teacher&lt;br/&gt;  where Tname like '&lt;span&gt;李&lt;/span&gt;&lt;span&gt;%'&lt;/span&gt;;&lt;br/&gt;&lt;strong&gt;5&lt;/strong&gt;&lt;span&gt;、查询没学过&lt;/span&gt;“&lt;span&gt;叶平&lt;/span&gt;&lt;span&gt;”&lt;/span&gt;&lt;span&gt;老师课的同学的学号、姓名；&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Student.S#,Student.Sname&lt;br/&gt;    from Student &lt;br/&gt;    where S# not in (select distinct( SC.S#) from SC,Course,Teacher where  SC.C#=Course.C# and Teacher.T#=Course.T# and Teacher.Tname='&lt;span&gt;叶平&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;);&lt;br/&gt;&lt;strong&gt;6&lt;/strong&gt;&lt;span&gt;、查询学过&lt;/span&gt;“&lt;strong&gt;001&lt;/strong&gt;”&lt;span&gt;并且也学过编号&lt;/span&gt;&lt;span&gt;“&lt;/span&gt;&lt;strong&gt;002&lt;/strong&gt;”&lt;span&gt;课程的同学的学号、姓名；&lt;/span&gt;&lt;br/&gt;  select Student.S#,Student.Sname from Student,SC where Student.S#=SC.S# and SC.C#='001'and exists( Select * from SC as SC_2 where SC_2.S#=SC.S# and SC_2.C#='002');&lt;br/&gt;&lt;strong&gt;7&lt;/strong&gt;&lt;span&gt;、查询学过&lt;/span&gt;“&lt;span&gt;叶平&lt;/span&gt;&lt;span&gt;”&lt;/span&gt;&lt;span&gt;老师所教的所有课的同学的学号、姓名；&lt;/span&gt;&lt;br/&gt;  select S#,Sname&lt;br/&gt;  from Student&lt;br/&gt;  where S# in (select S# from SC ,Course ,Teacher where SC.C#=Course.C# and Teacher.T#=Course.T# and Teacher.Tname='&lt;span&gt;叶平&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; group by S# having count(SC.C#)=(select count(C#) from&lt;/p&gt;
&lt;p&gt;Course,Teacher  where Teacher.T#=Course.T# and Tname='&lt;span&gt;叶平&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;));&lt;br/&gt;&lt;strong&gt;8&lt;/strong&gt;&lt;span&gt;、查询课程编号&lt;/span&gt;“&lt;strong&gt;002&lt;/strong&gt;”&lt;span&gt;的成绩比课程编号&lt;/span&gt;&lt;span&gt;“&lt;/span&gt;&lt;strong&gt;001&lt;/strong&gt;”&lt;span&gt;课程低的所有同学的学号、姓名；&lt;/span&gt;&lt;br/&gt;  Select S#,Sname from (select Student.S#,Student.Sname,score ,(select score from SC SC_2 where SC_2.S#=Student.S# and SC_2.C#='002') score2&lt;br/&gt;  from Student,SC where Student.S#=SC.S# and C#='001') S_2 where score2 &amp;lt;score;&lt;br/&gt;&lt;strong&gt;9&lt;/strong&gt;&lt;span&gt;、查询所有课程成绩小于&lt;/span&gt;60&lt;span&gt;分的同学的学号、姓名；&lt;/span&gt;&lt;br/&gt;  select S#,Sname&lt;br/&gt;  from Student&lt;br/&gt;  where S# not in (select Student.S# from Student,SC where S.S#=SC.S# and score&amp;gt;&lt;strong&gt;60&lt;/strong&gt;);&lt;br/&gt;&lt;strong&gt;10&lt;/strong&gt;&lt;span&gt;、查询没有学全所有课的同学的学号、姓名；&lt;/span&gt;&lt;br/&gt;    select Student.S#,Student.Sname&lt;br/&gt;    from Student,SC&lt;br/&gt;    where Student.S#=SC.S# group by  Student.S#,Student.Sname having count(C#) &amp;lt;(select count(C#) from Course);&lt;br/&gt;&lt;strong&gt;11&lt;/strong&gt;&lt;span&gt;、查询至少有一门课与学号为&lt;/span&gt;“&lt;strong&gt;1001&lt;/strong&gt;”&lt;span&gt;的同学所学相同的同学的学号和姓名；&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;select S#,Sname from Student,SC where Student.S#=SC.S# and C# in select C# from SC where S#='1001';&lt;br/&gt;&lt;strong&gt;12&lt;/strong&gt;&lt;span&gt;、查询至少学过学号为&lt;/span&gt;“&lt;strong&gt;001&lt;/strong&gt;”&lt;span&gt;同学所有一门课的其他同学学号和姓名；&lt;/span&gt;&lt;br/&gt;    select distinct SC.S#,Sname&lt;br/&gt;    from Student,SC&lt;br/&gt;    where Student.S#=SC.S# and C# in (select C# from SC where S#='001');&lt;br/&gt;&lt;strong&gt;13&lt;/strong&gt;&lt;span&gt;、把&lt;/span&gt;“SC”&lt;span&gt;表中&lt;/span&gt;&lt;span&gt;“&lt;/span&gt;&lt;span&gt;叶平&lt;/span&gt;&lt;span&gt;”&lt;/span&gt;&lt;span&gt;老师教的课的成绩都更改为此课程的平均成绩；&lt;/span&gt;&lt;br/&gt;    update SC set score=(select avg(SC_2.score)&lt;br/&gt;    from SC SC_2&lt;br/&gt;    where SC_2.C#=SC.C# ) from Course,Teacher where Course.C#=SC.C# and Course.T#=Teacher.T# and Teacher.Tname='&lt;span&gt;叶平&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;);&lt;br/&gt;&lt;strong&gt;14&lt;/strong&gt;&lt;span&gt;、查询和&lt;/span&gt;“&lt;strong&gt;1002&lt;/strong&gt;”&lt;span&gt;号的同学学习的课程完全相同的其他同学学号和姓名；&lt;/span&gt;&lt;br/&gt;    select S# from SC where C# in (select C# from SC where S#='1002')&lt;br/&gt;    group by&lt;/p&gt;
&lt;p&gt;S# having count(*)=(select count(*) from SC where S#='1002');&lt;br/&gt;&lt;strong&gt;15&lt;/strong&gt;&lt;span&gt;、删除学习&lt;/span&gt;“&lt;span&gt;叶平&lt;/span&gt;&lt;span&gt;”&lt;/span&gt;&lt;span&gt;老师课的&lt;/span&gt;&lt;span&gt;SC&lt;/span&gt;&lt;span&gt;表记录；&lt;/span&gt;&lt;br/&gt;    Delect SC&lt;br/&gt;    from course ,Teacher &lt;br/&gt;    where Course.C#=SC.C# and Course.T#= Teacher.T# and Tname='&lt;span&gt;叶平&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;;&lt;br/&gt;&lt;strong&gt;16&lt;/strong&gt;&lt;span&gt;、向&lt;/span&gt;SC&lt;span&gt;表中插入一些记录，这些记录要求符合以下条件：没有上过编号&lt;/span&gt;&lt;span&gt;“&lt;/span&gt;&lt;strong&gt;003&lt;/strong&gt;”&lt;span&gt;课程的同学学号、&lt;/span&gt;&lt;strong&gt;2&lt;/strong&gt;&lt;span&gt;、&lt;/span&gt;&lt;br/&gt;    &lt;span&gt;号课的平均成绩；&lt;/span&gt;&lt;br/&gt;    Insert SC select S#,'002',(Select avg(score)&lt;br/&gt;    from SC where C#='002') from Student where S# not in (Select S# from SC where C#='002');&lt;br/&gt;&lt;strong&gt;17&lt;/strong&gt;&lt;span&gt;、按平均成绩从高到低显示所有学生的&lt;/span&gt;“&lt;span&gt;数据库&lt;/span&gt;&lt;span&gt;”&lt;/span&gt;&lt;span&gt;、&lt;/span&gt;&lt;span&gt;“&lt;/span&gt;&lt;span&gt;企业管理&lt;/span&gt;&lt;span&gt;”&lt;/span&gt;&lt;span&gt;、&lt;/span&gt;&lt;span&gt;“&lt;/span&gt;&lt;span&gt;英语&lt;/span&gt;&lt;span&gt;”&lt;/span&gt;&lt;span&gt;三门的课程成绩，按如下形式显示： 学生&lt;/span&gt;&lt;span&gt;ID,,&lt;/span&gt;&lt;span&gt;数据库&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;企业管理&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;英语&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;有效课程数&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;有效平均分&lt;/span&gt;&lt;br/&gt;    SELECT S# as &lt;span&gt;学生&lt;/span&gt;ID&lt;br/&gt;        ,(SELECT score FROM SC WHERE SC.S#=t.S# AND C#='004') AS &lt;span&gt;数据库&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;,(SELECT score FROM SC WHERE SC.S#=t.S# AND C#='001') AS &lt;span&gt;企业管理&lt;/span&gt;&lt;br/&gt;        ,(SELECT score FROM SC WHERE SC.S#=t.S# AND C#='006') AS &lt;span&gt;英语&lt;/span&gt;&lt;br/&gt;        ,COUNT(*) AS &lt;span&gt;有效课程数&lt;/span&gt;, AVG(t.score) AS &lt;span&gt;平均成绩&lt;/span&gt;&lt;br/&gt;    FROM SC AS t&lt;br/&gt;    GROUP BY S#&lt;br/&gt;    ORDER BY avg(t.score) &lt;br/&gt;&lt;strong&gt;18&lt;/strong&gt;&lt;span&gt;、查询各科成绩最高和最低的分：以如下形式显示：课程&lt;/span&gt;ID&lt;span&gt;，最高分，最低分&lt;/span&gt;&lt;br/&gt;    SELECT L.C# As &lt;span&gt;课程&lt;/span&gt;ID,L.score AS &lt;span&gt;最高分&lt;/span&gt;,R.score AS &lt;span&gt;最低分&lt;/span&gt;&lt;br/&gt;    FROM SC L ,SC AS R&lt;br/&gt;    WHERE L.C# = R.C# and &lt;br/&gt;        L.score = (SELECT MAX(IL.score)&lt;br/&gt;                      FROM SC AS IL,Student AS IM&lt;br/&gt;                      WHERE L.C# = IL.C# and IM.S#=IL.S#&lt;br/&gt;                      GROUP BY IL.C#)&lt;br/&gt;        AND &lt;br/&gt;        R.Score&lt;/p&gt;
&lt;p&gt;= (SELECT MIN(IR.score)&lt;br/&gt;                      FROM SC AS IR&lt;br/&gt;                      WHERE R.C# = IR.C#&lt;br/&gt;                  GROUP BY IR.C#&lt;br/&gt;                    );&lt;br/&gt;&lt;strong&gt;19&lt;/strong&gt;&lt;span&gt;、按各科平均成绩从低到高和及格率的百分数从高到低顺序&lt;/span&gt;&lt;br/&gt;    SELECT t.C# AS &lt;span&gt;课程号&lt;/span&gt;,max(course.Cname)AS &lt;span&gt;课程名&lt;/span&gt;,isnull(AVG(score),&lt;strong&gt;0&lt;/strong&gt;) AS &lt;span&gt;平均成绩&lt;/span&gt;&lt;br/&gt;        ,&lt;strong&gt;100&lt;/strong&gt; * SUM(CASE WHEN  isnull(score,&lt;strong&gt;0&lt;/strong&gt;)&amp;gt;=&lt;strong&gt;60&lt;/strong&gt; THEN &lt;strong&gt;1&lt;/strong&gt; ELSE &lt;strong&gt;0&lt;/strong&gt; END)/COUNT(*) AS &lt;span&gt;及格百分数&lt;/span&gt;&lt;br/&gt;    FROM SC T,Course&lt;br/&gt;    where t.C#=course.C#&lt;br/&gt;    GROUP BY t.C#&lt;br/&gt;    ORDER BY &lt;strong&gt;100&lt;/strong&gt; * SUM(CASE WHEN  isnull(score,&lt;strong&gt;0&lt;/strong&gt;)&amp;gt;=&lt;strong&gt;60&lt;/strong&gt; THEN &lt;strong&gt;1&lt;/strong&gt; ELSE&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;0&lt;/strong&gt; END)/COUNT(*) DESC &lt;br/&gt;&lt;strong&gt;20&lt;/strong&gt;&lt;span&gt;、查询如下课程平均成绩和及格率的百分数&lt;/span&gt;(&lt;span&gt;用&lt;/span&gt;&lt;span&gt;&quot;1&lt;/span&gt;&lt;span&gt;行&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;显示&lt;/span&gt;&lt;span&gt;):&lt;/span&gt; &lt;span&gt;企业管理（&lt;/span&gt;&lt;strong&gt;001&lt;/strong&gt;&lt;span&gt;），马克思（&lt;/span&gt;&lt;strong&gt;002&lt;/strong&gt;&lt;span&gt;），&lt;/span&gt;OO&amp;amp;UML &lt;span&gt;（&lt;/span&gt;&lt;strong&gt;003&lt;/strong&gt;&lt;span&gt;），数据库（&lt;/span&gt;&lt;strong&gt;004&lt;/strong&gt;&lt;span&gt;）&lt;/span&gt;&lt;br/&gt;    SELECT SUM(CASE WHEN C# ='001' THEN score ELSE &lt;strong&gt;0&lt;/strong&gt; END)/SUM(CASE C# WHEN '001' THEN &lt;strong&gt;1&lt;/strong&gt; ELSE &lt;strong&gt;0&lt;/strong&gt; END) AS &lt;span&gt;企业管理平均分&lt;/span&gt;&lt;br/&gt;        ,&lt;strong&gt;100&lt;/strong&gt; * SUM(CASE WHEN C# = '001' AND score &amp;gt;= &lt;strong&gt;60&lt;/strong&gt; THEN &lt;strong&gt;1&lt;/strong&gt; ELSE &lt;strong&gt;0&lt;/strong&gt; END)/SUM(CASE WHEN C# = '001' THEN &lt;strong&gt;1&lt;/strong&gt; ELSE &lt;strong&gt;0&lt;/strong&gt; END&lt;/p&gt;
&lt;p&gt;) AS &lt;span&gt;企业管理及格百分数&lt;/span&gt;&lt;br/&gt;        ,SUM(CASE WHEN C# = '002' THEN score ELSE &lt;strong&gt;0&lt;/strong&gt; END)/SUM(CASE C# WHEN '002' THEN &lt;strong&gt;1&lt;/strong&gt; ELSE &lt;strong&gt;0&lt;/strong&gt; END) AS &lt;span&gt;马克思平均分&lt;/span&gt;&lt;br/&gt;        ,&lt;strong&gt;100&lt;/strong&gt; * SUM(CASE WHEN C# = '002' AND score &amp;gt;= &lt;strong&gt;60&lt;/strong&gt; THEN &lt;strong&gt;1&lt;/strong&gt; ELSE &lt;strong&gt;0&lt;/strong&gt; END)/SUM(CASE WHEN C# = '002' THEN &lt;strong&gt;1&lt;/strong&gt; ELSE &lt;strong&gt;0&lt;/strong&gt; END) AS &lt;span&gt;马克思及格百分数&lt;/span&gt;&lt;br/&gt;        ,SUM(CASE WHEN C# = '003' THEN score ELSE &lt;strong&gt;0&lt;/strong&gt; END)/&lt;/p&gt;
&lt;p&gt;SUM(CASE C# WHEN '003' THEN &lt;strong&gt;1&lt;/strong&gt; ELSE &lt;strong&gt;0&lt;/strong&gt; END) AS UML&lt;span&gt;平均分&lt;/span&gt;&lt;br/&gt;        ,&lt;strong&gt;100&lt;/strong&gt; * SUM(CASE WHEN C# = '003' AND score &amp;gt;= &lt;strong&gt;60&lt;/strong&gt; THEN &lt;strong&gt;1&lt;/strong&gt; ELSE &lt;strong&gt;0&lt;/strong&gt; END)/SUM(CASE WHEN C# = '003' THEN &lt;strong&gt;1&lt;/strong&gt; ELSE &lt;strong&gt;0&lt;/strong&gt; END) AS UML&lt;span&gt;及格百分数&lt;/span&gt;&lt;br/&gt;        ,SUM(CASE WHEN C# = '004' THEN score ELSE &lt;strong&gt;0&lt;/strong&gt; END)/SUM(CASE C# WHEN '004' THEN &lt;strong&gt;1&lt;/strong&gt; ELSE &lt;strong&gt;0&lt;/strong&gt; END) AS &lt;span&gt;数据库平均分&lt;/span&gt;&lt;br/&gt;        ,&lt;strong&gt;100&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;* SUM(CASE WHEN C# = '004' AND score &amp;gt;= &lt;strong&gt;60&lt;/strong&gt; THEN &lt;strong&gt;1&lt;/strong&gt; ELSE &lt;strong&gt;0&lt;/strong&gt; END)/SUM(CASE WHEN C# = '004' THEN &lt;strong&gt;1&lt;/strong&gt; ELSE &lt;strong&gt;0&lt;/strong&gt; END) AS &lt;span&gt;数据库及格百分数&lt;/span&gt;&lt;br/&gt;  FROM SC&lt;br/&gt;&lt;strong&gt;21&lt;/strong&gt;&lt;span&gt;、查询不同老师所教不同课程平均分从高到低显示&lt;/span&gt;&lt;br/&gt;  SELECT max(Z.T#) AS &lt;span&gt;教师&lt;/span&gt;ID,MAX(Z.Tname) AS &lt;span&gt;教师姓名&lt;/span&gt;,C.C# AS &lt;span&gt;课程ＩＤ&lt;/span&gt;,MAX(C.Cname) AS &lt;span&gt;课程名称&lt;/span&gt;,AVG(Score) AS &lt;span&gt;平均成绩&lt;/span&gt;&lt;br/&gt;    FROM SC AS T,Course AS C ,Teacher AS Z&lt;br/&gt;    where T.C#=C.C# and C.T#=Z.T#&lt;br/&gt;  GROUP BY C.C#&lt;br/&gt;  ORDER BY AVG(Score) DESC &lt;br/&gt;&lt;strong&gt;22&lt;/strong&gt;&lt;span&gt;、查询如下课程成绩第&lt;/span&gt; &lt;strong&gt;3&lt;/strong&gt; &lt;span&gt;名到第&lt;/span&gt; &lt;strong&gt;6&lt;/strong&gt; &lt;span&gt;名的学生成绩单：企业管理（&lt;/span&gt;&lt;strong&gt;001&lt;/strong&gt;&lt;span&gt;），马克思（&lt;/span&gt;&lt;strong&gt;002&lt;/strong&gt;&lt;span&gt;），&lt;/span&gt;UML &lt;span&gt;（&lt;/span&gt;&lt;strong&gt;003&lt;/strong&gt;&lt;span&gt;），数据库（&lt;/span&gt;&lt;strong&gt;004&lt;/strong&gt;&lt;span&gt;）&lt;/span&gt;&lt;br/&gt;    [&lt;span&gt;学生&lt;/span&gt;&lt;span&gt;ID]&lt;/span&gt;,[&lt;span&gt;学生姓名&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;,&lt;span&gt;企业管理&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;马克思&lt;/span&gt;&lt;span&gt;,UML,&lt;/span&gt;&lt;span&gt;数据库&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;平均成绩&lt;/span&gt;&lt;br/&gt;    SELECT  DISTINCT top &lt;strong&gt;3&lt;/strong&gt; &lt;br/&gt;      SC.S# As &lt;span&gt;学生学号&lt;/span&gt;,&lt;br/&gt;        Student.Sname AS &lt;span&gt;学生姓名&lt;/span&gt; ,&lt;br/&gt;      T1.score AS &lt;span&gt;企业管理&lt;/span&gt;,&lt;br/&gt;      T2.score AS &lt;span&gt;马克思&lt;/span&gt;,&lt;br/&gt;      T3.score AS UML,&lt;br/&gt;      T4.score AS &lt;span&gt;数据库&lt;/span&gt;,&lt;br/&gt;      ISNULL(T1.score,&lt;strong&gt;0&lt;/strong&gt;) + ISNULL(T2.score,&lt;strong&gt;0&lt;/strong&gt;) + ISNULL(T3.score,&lt;strong&gt;0&lt;/strong&gt;) + ISNULL(T4.score,&lt;strong&gt;0&lt;/strong&gt;) as &lt;span&gt;总分&lt;/span&gt;&lt;br/&gt;      FROM Student,SC  LEFT JOIN SC AS T1&lt;br/&gt;                      ON SC.S# = T1.S# AND T1.C# = '001' &lt;br/&gt;            LEFT JOIN SC AS T2&lt;br/&gt;                      ON SC.S# = T2.S# AND T2.C# = '002' &lt;br/&gt;            LEFT JOIN SC AS T3&lt;br/&gt;                      ON SC.S# =T3.S# AND T3.C# = '003' &lt;br/&gt;            LEFT JOIN SC AS T4&lt;br/&gt;                      ON SC.S# = T4.S# AND T4.C# = '004' &lt;br/&gt;      WHERE student.S#=SC.S# and &lt;br/&gt;      ISNULL(T1.score,&lt;strong&gt;0&lt;/strong&gt;) + ISNULL(T2.score,&lt;strong&gt;0&lt;/strong&gt;) + ISNULL(T3.score,&lt;strong&gt;0&lt;/strong&gt;) + ISNULL(T4.score,&lt;strong&gt;0&lt;/strong&gt;)&lt;br/&gt;      NOT IN &lt;br/&gt;      (SELECT &lt;br/&gt;            DISTINCT &lt;br/&gt;            TOP &lt;strong&gt;15&lt;/strong&gt; WITH TIES&lt;br/&gt;            ISNULL(T1.score,&lt;strong&gt;0&lt;/strong&gt;) + ISNULL(T2.score,&lt;strong&gt;0&lt;/strong&gt;) + ISNULL(T3.score,&lt;strong&gt;0&lt;/strong&gt;) + ISNULL(T4.score,&lt;strong&gt;0&lt;/strong&gt;)&lt;br/&gt;      FROM sc&lt;br/&gt;            LEFT JOIN sc AS T1&lt;br/&gt;                      ON sc.S# = T1.S# AND T1.C#= 'k1' &lt;br/&gt;            LEFT JOIN sc AS T2&lt;br/&gt;                      ON sc.S# = T2.S# AND T2.C# = 'k2' &lt;br/&gt;            LEFT JOIN sc AS T3&lt;br/&gt;                      ON sc.S# = T3.S# AND T3.C# = 'k3' &lt;br/&gt;            LEFT JOIN sc AS T4&lt;br/&gt;                      ON sc.S# = T4.S# AND T4.C# = 'k4' &lt;br/&gt;      ORDER BY ISNULL(T1.score,&lt;strong&gt;0&lt;/strong&gt;) + ISNULL(T2.score,&lt;strong&gt;0&lt;/strong&gt;) + ISNULL(T3.score,&lt;strong&gt;0&lt;/strong&gt;) + ISNULL(T4.score,&lt;strong&gt;0&lt;/strong&gt;) DESC);&lt;/p&gt;&lt;p&gt;&lt;strong&gt;23&lt;/strong&gt;&lt;span&gt;、统计列印各科成绩&lt;/span&gt;,&lt;span&gt;各分数段人数&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;课程&lt;/span&gt;&lt;span&gt;ID,&lt;/span&gt;&lt;span&gt;课程名称&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;[100-85],[85-70],[70-60],[ &amp;lt;60] &lt;br/&gt;    SELECT SC.C# as &lt;span&gt;课程&lt;/span&gt;ID, Cname&lt;/p&gt;
&lt;p&gt;as &lt;span&gt;课程名称&lt;/span&gt;&lt;br/&gt;        ,SUM(CASE WHEN score BETWEEN &lt;strong&gt;85&lt;/strong&gt; AND &lt;strong&gt;100&lt;/strong&gt; THEN &lt;strong&gt;1&lt;/strong&gt; ELSE &lt;strong&gt;0&lt;/strong&gt; END) AS [100 - 85] &lt;br/&gt;        ,SUM(CASE WHEN score BETWEEN &lt;strong&gt;70&lt;/strong&gt; AND &lt;strong&gt;85&lt;/strong&gt; THEN &lt;strong&gt;1&lt;/strong&gt; ELSE &lt;strong&gt;0&lt;/strong&gt; END) AS [85 - 70] &lt;br/&gt;        ,SUM(CASE WHEN score BETWEEN &lt;strong&gt;60&lt;/strong&gt; AND &lt;strong&gt;70&lt;/strong&gt; THEN &lt;strong&gt;1&lt;/strong&gt; ELSE &lt;strong&gt;0&lt;/strong&gt; END) AS [70 - 60] &lt;br/&gt;        ,SUM(CASE WHEN score &amp;lt; &lt;strong&gt;60&lt;/strong&gt; THEN &lt;strong&gt;1&lt;/strong&gt; ELSE &lt;strong&gt;0&lt;/strong&gt; END) AS [60 -] &lt;br/&gt;    FROM SC,Coursewhere SC.C#=Course.C#&lt;br/&gt;    GROUP BY SC.C#,Cname;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;24&lt;/strong&gt;&lt;span&gt;、查询学生平均成绩及其名次&lt;/span&gt;&lt;br/&gt;      SELECT &lt;strong&gt;1&lt;/strong&gt;+(SELECT COUNT( distinct &lt;span&gt;平均成绩&lt;/span&gt;)&lt;br/&gt;              FROM (SELECT S#,AVG(score) AS &lt;span&gt;平均成绩&lt;/span&gt;&lt;br/&gt;                      FROM SC&lt;br/&gt;                  GROUP BY S#&lt;br/&gt;                  ) AS T1&lt;br/&gt;            WHERE &lt;span&gt;平均成绩&lt;/span&gt; &amp;gt; T2.&lt;span&gt;平均成绩&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; as &lt;span&gt;名次&lt;/span&gt;,&lt;br/&gt;      S# as &lt;span&gt;学生学号&lt;/span&gt;,&lt;span&gt;平均成绩&lt;/span&gt;&lt;br/&gt;    FROM (SELECT S#,AVG(score) &lt;span&gt;平均成绩&lt;/span&gt;&lt;br/&gt;            FROM SC&lt;br/&gt;        GROUP BY S#&lt;br/&gt;        ) AS T2&lt;br/&gt;    ORDER BY &lt;span&gt;平均成绩&lt;/span&gt; desc;&lt;br/&gt; &lt;br/&gt;&lt;strong&gt;25&lt;/strong&gt;&lt;span&gt;、查询各科成绩前三名的记录&lt;/span&gt;:(&lt;span&gt;不考虑成绩并列情况&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;br/&gt;      SELECT t1.S# as &lt;span&gt;学生&lt;/span&gt;ID,t1.C# as &lt;span&gt;课程&lt;/span&gt;ID,Score as &lt;span&gt;分数&lt;/span&gt;&lt;br/&gt;      FROM SC t1&lt;br/&gt;      WHERE score IN (SELECT TOP &lt;strong&gt;3&lt;/strong&gt; score&lt;br/&gt;              FROM SC&lt;br/&gt;              WHERE t1.C#= C#     ORDER BY score DESC &lt;br/&gt;              )&lt;br/&gt;      ORDER BY t1.C#;&lt;br/&gt;&lt;strong&gt;26&lt;/strong&gt;&lt;span&gt;、查询每门课程被选修的学生数&lt;/span&gt;&lt;br/&gt;  select c#,count(S#) from sc group by C#;&lt;br/&gt;&lt;strong&gt;27&lt;/strong&gt;&lt;span&gt;、查询出只选修了一门课程的全部学生的学号和姓名&lt;/span&gt;&lt;br/&gt;  select SC.S#,Student.Sname,count(C#) AS &lt;span&gt;选课数&lt;/span&gt;&lt;br/&gt;  from SC ,Student&lt;br/&gt;  where SC.S#=Student.S# group by SC.S# ,Student.Sname having count(C#)=&lt;strong&gt;1&lt;/strong&gt;;&lt;br/&gt;&lt;strong&gt;28&lt;/strong&gt;&lt;span&gt;、查询男生、女生人数&lt;/span&gt;&lt;br/&gt;    Select count(Ssex) as &lt;span&gt;男生人数&lt;/span&gt; from Student group by Ssex having Ssex='&lt;span&gt;男&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;;&lt;br/&gt;    Select count(Ssex) as &lt;span&gt;女生人数&lt;/span&gt; from Student group by Ssex having Ssex='&lt;span&gt;女&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;；&lt;/span&gt;&lt;br/&gt;&lt;strong&gt;29&lt;/strong&gt;&lt;span&gt;、查询姓&lt;/span&gt;“&lt;span&gt;张&lt;/span&gt;&lt;span&gt;”&lt;/span&gt;&lt;span&gt;的学生名单&lt;/span&gt;&lt;br/&gt;    SELECT Sname FROM Student WHERE Sname like '&lt;span&gt;张&lt;/span&gt;&lt;span&gt;%'&lt;/span&gt;;&lt;br/&gt;&lt;strong&gt;30&lt;/strong&gt;&lt;span&gt;、查询同名同性学生名单，并统计同名人数&lt;/span&gt;&lt;br/&gt;  select Sname,count(*) from Studentgroup by Sname having  count(*)&amp;gt;&lt;strong&gt;1&lt;/strong&gt;;;&lt;br/&gt;&lt;strong&gt;31&lt;/strong&gt;&lt;span&gt;、&lt;/span&gt;1981&lt;span&gt;年出生的学生名单&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;注：&lt;/span&gt;&lt;span&gt;Student&lt;/span&gt;&lt;span&gt;表中&lt;/span&gt;&lt;span&gt;Sage&lt;/span&gt;&lt;span&gt;列的类型是&lt;/span&gt;&lt;span&gt;datetime)&lt;/span&gt;&lt;br/&gt;    select Sname,  CONVERT(char (&lt;strong&gt;11&lt;/strong&gt;),DATEPART(year,Sage)) as age&lt;br/&gt;    from student&lt;br/&gt;    where  CONVERT(char(&lt;strong&gt;11&lt;/strong&gt;),DATEPART(year,Sage))='1981';&lt;br/&gt;&lt;strong&gt;32&lt;/strong&gt;&lt;span&gt;、查询每门课程的平均成绩，结果按平均成绩升序排列，平均成绩相同时，按课程号降序排列&lt;/span&gt;&lt;br/&gt;    Select C#,Avg(score) from SC group by C# order by Avg(score),C# DESC ;&lt;br/&gt;&lt;strong&gt;33&lt;/strong&gt;&lt;span&gt;、查询平均成绩大于&lt;/span&gt;85&lt;span&gt;的所有学生的学号、姓名和平均成绩&lt;/span&gt;&lt;br/&gt;    select Sname,SC.S# ,avg(score)&lt;br/&gt;    from Student,SC&lt;br/&gt;    where Student.S#=SC.S# group by SC.S#,Sname having    avg(score)&amp;gt;&lt;strong&gt;85&lt;/strong&gt;;&lt;br/&gt;&lt;strong&gt;34&lt;/strong&gt;&lt;span&gt;、查询课程名称为&lt;/span&gt;“&lt;span&gt;数据库&lt;/span&gt;&lt;span&gt;”&lt;/span&gt;&lt;span&gt;，且分数低于&lt;/span&gt;&lt;span&gt;60&lt;/span&gt;&lt;span&gt;的学生姓名和分数&lt;/span&gt;&lt;br/&gt;    Select Sname,isnull(score,&lt;strong&gt;0&lt;/strong&gt;)&lt;br/&gt;    from Student,SC,Course&lt;br/&gt;    where SC.S#=Student.S# and SC.C#=Course.C#and  Course.Cname='&lt;span&gt;数据库&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;and score &amp;lt;&lt;strong&gt;60&lt;/strong&gt;;&lt;br/&gt;&lt;strong&gt;35&lt;/strong&gt;&lt;span&gt;、查询所有学生的选课情况；&lt;/span&gt;&lt;br/&gt;    SELECT SC.S#,SC.C#,Sname,Cname&lt;br/&gt;    FROM SC,Student,Course&lt;br/&gt;    where SC.S#=Student.S# and SC.C#=Course.C# ;&lt;br/&gt;&lt;strong&gt;36&lt;/strong&gt;&lt;span&gt;、查询任何一门课程成绩在&lt;/span&gt;70&lt;span&gt;分以上的姓名、课程名称和分数；&lt;/span&gt;&lt;br/&gt;    SELECT  distinct student.S#,student.Sname,SC.C#,SC.score&lt;br/&gt;    FROM student,Sc&lt;br/&gt;    WHERE SC.score&amp;gt;=&lt;strong&gt;70&lt;/strong&gt; AND SC.S#=student.S#;&lt;br/&gt;&lt;strong&gt;37&lt;/strong&gt;&lt;span&gt;、查询不及格的课程，并按课程号从大到小排列&lt;/span&gt;&lt;br/&gt;    select c# from sc where scor e &amp;lt;&lt;strong&gt;60&lt;/strong&gt; order by C# ;&lt;br/&gt;&lt;strong&gt;38&lt;/strong&gt;&lt;span&gt;、查询课程编号为&lt;/span&gt;003&lt;span&gt;且课程成绩在&lt;/span&gt;&lt;span&gt;80&lt;/span&gt;&lt;span&gt;分以上的学生的学号和姓名；&lt;/span&gt;&lt;br/&gt;    select SC.S#,Student.Sname from SC,Student where SC.S#=Student.S# and Score&amp;gt;&lt;strong&gt;80&lt;/strong&gt; and C#='003';&lt;br/&gt;&lt;strong&gt;39&lt;/strong&gt;&lt;span&gt;、求选了课程的学生人数&lt;/span&gt;&lt;br/&gt;    select count(*) from sc;&lt;br/&gt;&lt;strong&gt;40&lt;/strong&gt;&lt;span&gt;、查询选修&lt;/span&gt;“&lt;span&gt;叶平&lt;/span&gt;&lt;span&gt;”&lt;/span&gt;&lt;span&gt;老师所授课程的学生中，成绩最高的学生姓名及其成绩&lt;/span&gt;&lt;br/&gt;    select Student.Sname,score&lt;br/&gt;    from Student,SC,Course C,Teacher&lt;br/&gt;    where Student.S#=SC.S# and SC.C#=C.C# and&lt;/p&gt;
&lt;p&gt;C.T#=Teacher.T# and Teacher.Tname='&lt;span&gt;叶平&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; and SC.score=(select max(score)from SC where C#=C.C# );&lt;br/&gt;&lt;strong&gt;41&lt;/strong&gt;&lt;span&gt;、查询各个课程及相应的选修人数&lt;/span&gt;&lt;br/&gt;    select count(*) from sc group by C#;&lt;br/&gt;&lt;strong&gt;42&lt;/strong&gt;&lt;span&gt;、查询不同课程成绩相同的学生的学号、课程号、学生成绩&lt;/span&gt;&lt;br/&gt;  select distinct  A.S#,B.score from SC A  ,SC B where A.Score=B.Score and A.C# &amp;lt;&amp;gt;B.C# ;&lt;br/&gt;&lt;strong&gt;43&lt;/strong&gt;&lt;span&gt;、查询每门功成绩最好的前两名&lt;/span&gt;&lt;br/&gt;    SELECT t1.S# as &lt;span&gt;学生&lt;/span&gt;ID,t1.C# as &lt;span&gt;课程&lt;/span&gt;ID,Score as &lt;span&gt;分数&lt;/span&gt;&lt;br/&gt;      FROM SC t1&lt;br/&gt;      WHERE score IN (SELECT TOP &lt;strong&gt;2&lt;/strong&gt; score&lt;br/&gt;              FROM SC&lt;br/&gt;              WHERE t1.C#= C#&lt;br/&gt;            ORDER BY score DESC &lt;br/&gt;              )&lt;br/&gt;      ORDER BY t1.C#;&lt;br/&gt;&lt;strong&gt;44&lt;/strong&gt;&lt;span&gt;、统计每门课程的学生选修人数（超过&lt;/span&gt;10&lt;span&gt;人的课程才统计）。要求输出课程号和选修人数，查询结果按人数降序排列，查询结果按人数降序排列，若人数相同，按课程号升序排列&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;br/&gt;    select  C# as &lt;span&gt;课程号&lt;/span&gt;,count(*) as &lt;span&gt;人数&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;    from  sc &lt;br/&gt;    group  by  C#&lt;br/&gt;    order  by  count(*) desc,c# &lt;br/&gt;&lt;strong&gt;45&lt;/strong&gt;&lt;span&gt;、检索至少选修两门课程的学生学号&lt;/span&gt;&lt;br/&gt;    select  S# &lt;br/&gt;    from  sc &lt;br/&gt;    group  by  s#&lt;br/&gt;    having  count(*)  &amp;gt;  =  &lt;strong&gt;2&lt;/strong&gt; &lt;br/&gt;&lt;strong&gt;46&lt;/strong&gt;&lt;span&gt;、查询全部学生都选修的课程的课程号和课程名&lt;/span&gt;&lt;br/&gt;    select  C#,Cname &lt;br/&gt;    from  Course &lt;br/&gt;    where  C#  in  (select  c#  from  sc group  by  c#) &lt;br/&gt;&lt;strong&gt;47&lt;/strong&gt;&lt;span&gt;、查询没学过&lt;/span&gt;“&lt;span&gt;叶平&lt;/span&gt;&lt;span&gt;”&lt;/span&gt;&lt;span&gt;老师讲授的任一门课程的学生姓名&lt;/span&gt;&lt;br/&gt;    select Sname from Student where S# not in (select S# from Course,Teacher,SC where Course.T#=Teacher.T# and SC.C#=course.C# and Tname='&lt;span&gt;叶平&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;);&lt;br/&gt;&lt;strong&gt;48&lt;/strong&gt;&lt;span&gt;、查询两门以上不及格课程的同学的学号及其平均成绩&lt;/span&gt;&lt;br/&gt;    select S#,avg(isnull(score,&lt;strong&gt;0&lt;/strong&gt;)) from SC where S# in (select S# from SC where&lt;/p&gt;
&lt;p&gt;score &amp;lt;&lt;strong&gt;60&lt;/strong&gt; group by S# having count(*)&amp;gt;&lt;strong&gt;2&lt;/strong&gt;)group by S#;&lt;br/&gt;&lt;strong&gt;49&lt;/strong&gt;&lt;span&gt;、检索&lt;/span&gt;“&lt;strong&gt;004&lt;/strong&gt;”&lt;span&gt;课程分数小于&lt;/span&gt;&lt;span&gt;60&lt;/span&gt;&lt;span&gt;，按分数降序排列的同学学号&lt;/span&gt;&lt;br/&gt;    select S# from SC where C#='004'and score &amp;lt;&lt;strong&gt;60&lt;/strong&gt; order by score desc;&lt;br/&gt;&lt;strong&gt;50&lt;/strong&gt;&lt;span&gt;、删除&lt;/span&gt;“&lt;strong&gt;002&lt;/strong&gt;”&lt;span&gt;同学的&lt;/span&gt;&lt;span&gt;“&lt;/span&gt;&lt;strong&gt;001&lt;/strong&gt;”&lt;span&gt;课程的成绩&lt;/span&gt;&lt;br/&gt;delete from Sc where S#='001'and C#='001';&lt;/p&gt;

</description>
<pubDate>Mon, 09 Apr 2018 15:26:00 +0000</pubDate>
<dc:creator>KrAchill</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/xld21/p/8763949.html</dc:identifier>
</item>
<item>
<title>Flow简易教程——安装篇 - laden666666</title>
<link>http://www.cnblogs.com/laden666666/p/8763608.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/laden666666/p/8763608.html</guid>
<description>&lt;p class=&quot;mydoc_p&quot;&gt;现在我们就可开始写Flow文件了，我们之前说了，Flow的后缀名也是js，那么Flow是怎么知道一个文件是Flow文件还是JavaScript文件呢？Flow虽然完全兼容JavaScript代码，但是如果JavaScript代码出现了type相关的错误，Flow也会在校验时候提示错误的，而对于JavaScript则是运行时候才去报错。两种虽然都是报错，但是有本质上的区别，因此我们必须让Flow区分出哪些是JavaScript文件，哪些是Flow的文件。&lt;/p&gt;
&lt;p class=&quot;mydoc_p&quot;&gt;Flow区别JavaScript文件的方式非常简单，就是给文件加注解：&lt;/p&gt;
&lt;pre class=&quot;mydoc_code_pre cm-s-eclipse&quot;&gt;


&lt;/pre&gt;
&lt;blockquote class=&quot;mydoc_blockquote&quot; readability=&quot;6&quot;&gt;
&lt;p&gt;注意注解前边的注释不能省，而且注解要放到文件的最上面。除了&lt;strong class=&quot;mydoc_strong&quot;&gt;// @flow&lt;/strong&gt;注解，还可以用&lt;strong class=&quot;mydoc_strong&quot;&gt;/* @flow */&lt;/strong&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p class=&quot;mydoc_p&quot;&gt;加上注解后，Flow的后台进程就会自动监听这些文件的变化，并对其做静态类型校验。&lt;/p&gt;
&lt;p class=&quot;mydoc_p&quot;&gt;到此为止，理论上我们每修改一个文件就应该能够看到文件的校验结果，但实际上并没有出现更改后的校验结果。因为flow status是一个后台进程，所有我们看不到校验结果，如果想要获得当前校验结构需要再执行一下&lt;strong class=&quot;mydoc_strong&quot;&gt;flow status&lt;/strong&gt;，这一次执行速度明显会比第一次快很多。虽然速度快了，但是和我们想要的自动监听并提示还有差距，不过没关系，稍后笔者会告诉大家解决方法。&lt;/p&gt;
&lt;p class=&quot;mydoc_p&quot;&gt;前面介绍的是基于后台进程做自动执行校验，除此之外还可以通过cli命令进行手动校验：&lt;/p&gt;
&lt;pre class=&quot;mydoc_code_pre cm-s-eclipse&quot;&gt;
flow check
&lt;/pre&gt;
&lt;p class=&quot;mydoc_p&quot;&gt;这种方法的执行速度要比后台进程方式慢。&lt;/p&gt;
&lt;p class=&quot;mydoc_p&quot;&gt;通过以上方法我们就实现了静态类型校验的工作，但是想要Flow能够像JavaScript一样运行还需要“编译”一下才行。接下来介绍编译器的安装。&lt;/p&gt;

&lt;p class=&quot;mydoc_p&quot;&gt;Flow需要“编译”为JavaScript才能运行，因此必须选择一个“编译器”。其实将FLow解析为JavaScript的过程称为编译其实并不准确，因为这个“编译”过程仅仅就是把Flow提供的注解语法去除。Flow目前支持两种去除注解的方法——&lt;strong class=&quot;mydoc_strong&quot;&gt;babel&lt;/strong&gt;和&lt;strong class=&quot;mydoc_strong&quot;&gt;flow-remove-types&lt;/strong&gt;&lt;/p&gt;
&lt;p class=&quot;mydoc_p&quot;&gt;flow-remove-types是一个轻量级的专门用于去除Flow注解的命令行工具，而babel大家应该个更加熟悉，它是现在最流行的es6编译工具，而且可以很容易的和webpack等前端自动化工具集成，因此笔者仅介绍基于babel的版本。&lt;/p&gt;
&lt;p class=&quot;mydoc_p&quot;&gt;不过需要注意的是，无论是babel还是flow-remove-types，他们仅是去除Flow的注解，但是并没有进行Flow的静态类型检测。事实上babel已经提供了一个Flow预设插件组（babel-preset-flow），它的会自动集成一个叫&lt;a class=&quot;mydoc_a&quot; href=&quot;https://babeljs.io/docs/plugins/transform-flow-strip-types/&quot;&gt;transform-flow-strip-types&lt;/a&gt;的babel插件来去除Flow注解，但是这个插件并不进行&lt;strong class=&quot;mydoc_strong&quot;&gt;flow check&lt;/strong&gt;。如何想让babel进行Flow的静态类型校验，这就需要手动集成另外一个插件——&lt;a class=&quot;mydoc_a&quot; href=&quot;https://www.npmjs.com/package/babel-plugin-typecheck&quot;&gt;babel-plugin-typecheck&lt;/a&gt;。&lt;/p&gt;
&lt;p class=&quot;mydoc_p&quot;&gt;接下来进行具体的babel集成步骤，首先安装babel、babel-preset-flow、babel-plugin-typecheck，而babel这种工具我们可以安装在全局：&lt;/p&gt;
&lt;pre class=&quot;mydoc_code_pre cm-s-eclipse&quot;&gt;
npm install &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;g babel&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;cli
npm install &lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;save&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;dev babel&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;preset&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;flow babel&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;plugin&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;typecheck
&lt;/pre&gt;
&lt;p class=&quot;mydoc_p&quot;&gt;然后创建babel的配置文件，在根目录下创建&lt;strong class=&quot;mydoc_strong&quot;&gt;.babelrc&lt;/strong&gt;，然后选择Flow的预设插件组（flow），并手动加上babel-plugin-typecheck插件：&lt;/p&gt;
&lt;pre class=&quot;mydoc_code_pre cm-s-eclipse&quot;&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token string&quot;&gt;&quot;presets&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;flow&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token string&quot;&gt;&quot;plugins&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;typecheck&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p class=&quot;mydoc_p&quot;&gt;接着我们就可以使用babel编译我们的Flow代码了，例如我们用Flow开发的源代码在src目录，最终输出在dist目录，只需：&lt;/p&gt;
&lt;pre class=&quot;mydoc_code_pre cm-s-eclipse&quot;&gt;
babel src&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;d dist&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;watch
&lt;/pre&gt;
&lt;p class=&quot;mydoc_p&quot;&gt;这样我就仅需要babel就完成了校验和编译两项工作，从而不需要Flow的初始化和后台进程，而且使用babel的“--watch”功能解决了之前Flow命令行不能同时监听、提示的缺憾。&lt;/p&gt;
&lt;p class=&quot;mydoc_p&quot;&gt;貌似大功告成，但是其实还有个问题，分别使用&lt;strong class=&quot;mydoc_strong&quot;&gt;flow-bin&lt;/strong&gt;和&lt;strong class=&quot;mydoc_strong&quot;&gt;babel&lt;/strong&gt;编译如下代码：&lt;/p&gt;
&lt;pre class=&quot;mydoc_code_pre cm-s-eclipse&quot;&gt;
&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; x &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;     
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Hello, world!&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;p class=&quot;mydoc_p&quot;&gt;flow-bin会报错，错误类型如注释。而babel则顺利编译。笔者推测为&lt;strong class=&quot;mydoc_strong&quot;&gt;babel-plugin-typecheck&lt;/strong&gt;仅会对添加了类型注解的变量做类型检验，而不会对未加注解的变量先做&lt;a class=&quot;mydoc_a&quot; href=&quot;https://flow.org/en/docs/types/&quot;&gt;推断类型&lt;/a&gt;再检验。&lt;/p&gt;

&lt;p class=&quot;mydoc_p&quot;&gt;除了集成到babel外，我们还希望能够将我们的源代码的编译过程集成到webpack中，实现校验、打包、编译、丑化等工作，以便能够达到一个完整的构建工作流。集成到webpack的过程非常简单，其实就是babel集成到webpack的过程。&lt;/p&gt;
&lt;p class=&quot;mydoc_p&quot;&gt;先安装webpack，建议将webpack安装到全局，然后安装babel和Flow的loader。&lt;/p&gt;
&lt;pre class=&quot;mydoc_code_pre cm-s-eclipse&quot;&gt;
npm install &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;g webpack
&lt;/pre&gt;
&lt;p class=&quot;mydoc_p&quot;&gt;并配置好webpack的配置文件webpack.config.js。因为webpack有模块化打包的功能，所有只要给出指定的入口文件，就能将所有依赖的文件打包成一个文件。例如src下的index.js是我们的入口文件，则：&lt;/p&gt;
&lt;pre class=&quot;mydoc_code_pre cm-s-eclipse&quot;&gt;
&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; path &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;'path'&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
module&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;exports &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    entry&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;'./src/index.js'&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    output&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        path&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; path&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;__dirname &lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;'/dist/'&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        filename&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;'[name].js'&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    module&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        loaders&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            test&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token regex&quot;&gt;/.js$/&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
            exclude&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token regex&quot;&gt;/node_modules/&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
            loader&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;'babel-loader'&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p class=&quot;mydoc_p&quot;&gt;最后只要运行&lt;strong class=&quot;mydoc_strong&quot;&gt;webpack&lt;/strong&gt;即可。&lt;/p&gt;
&lt;p class=&quot;mydoc_p&quot;&gt;以上集成仅是个简单例子，我们还需使用webpack做热替换(HMR)交换，并且能够自动刷新页面页面刷新，甚至是和react和vue集成，这些对于熟悉react和vue的朋友都说小case，这里不再具体深入。&lt;/p&gt;
&lt;p class=&quot;mydoc_p&quot;&gt;如果你不想手动修改babel的配置，可以使用&lt;a class=&quot;mydoc_a&quot; href=&quot;https://www.npmjs.com/package/flow-babel-webpack-plugin&quot;&gt;flow-babel-webpack-plugin&lt;/a&gt;这个插件，简化babel对flow的配置。&lt;/p&gt;

&lt;p class=&quot;mydoc_p&quot;&gt;之前的命令行搭配已经很合理了，但是开发时候我们还是更喜欢IDE帮我们提示语法上的错误，事实上Flow可以和几乎所有主流IDE集成，这里仅以webstorm和vscode为例。&lt;/p&gt;
</description>
<pubDate>Mon, 09 Apr 2018 15:20:00 +0000</pubDate>
<dc:creator>laden666666</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/laden666666/p/8763608.html</dc:identifier>
</item>
<item>
<title>分布式服务框架HSF - PaddingtonBear</title>
<link>http://www.cnblogs.com/1112yUan/p/8762043.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/1112yUan/p/8762043.html</guid>
<description>&lt;p&gt;最近在读阿里巴巴中台战略思想与架构这本书，so和大家分享一些我get到的东东。&lt;/p&gt;
&lt;p&gt;HSF是阿里巴巴内部的分布式服务框架，这个大家都很熟悉了，先上一张HSF的工作原理图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/945337/201804/945337-20180409184250798-498713139.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;  这个图说明了HSF框架中每个组件在整个框架中扮演的角色，下面分别介绍下：&lt;/p&gt;
&lt;p&gt;（1).&lt;strong&gt;服务节点对配置服务器列表的获取。&lt;/strong&gt;伴随着web容器的启动，服务提供者和服务调用者向地址服务器获取配置服务器和Diamond服务器的ip列表信息，过程见上图的1、2步骤。&lt;/p&gt;
&lt;p&gt;（2).&lt;strong&gt;服务的注册发布。&lt;/strong&gt;服务提供者获取配置服务器列表后，将服务的相关信息（接口类全名、服务版本等）包含当前服务器的ip地址、端口等信息注册到配置服务器，即上图的3步骤。&lt;/p&gt;
&lt;p&gt;(3).服务的订阅。当服务调用者的应用启动并获取配置服务器列表后，发送服务消费的相关信息（服务接口全名、服务版本等）到配置服务器订阅，然后配置服务器会通过“服务接口全名+服务版本”作为条件在内存中搜索，一旦获取到服务注册信息，就将对应的服务提供者的ip和端口发送到服务调用者的节点上，即上图的4 、5步骤。&lt;/p&gt;
&lt;p&gt;(4).&lt;strong&gt;服务规则推送（如果需要）&lt;/strong&gt;。如果对服务安全管控和流量控制有需求时，可以通过Diamond服务器提供规则设置界面，对指定的服务提供者和服务调用者设置相关规则，规则保存后，会在5秒内推送到与设置相关的服务器节点上。&lt;/p&gt;
&lt;p&gt;(5).&lt;strong&gt;服务交互&lt;/strong&gt;。在应用进行业务请求处理过程中，出现服务调用者对服务提供者的调用时，服务调用者会从已经保存在该应用节点上的服务提供者服务器列表里选择（阿里巴巴内部使用随机模式）其中一台服务进行请求的发送，服务交互期间是调用者和提供者两台服务器间的调用，无需通过中间别的服务器，这就是称为“去中心化”的主要原因，即上图中的步骤7&lt;/p&gt;
&lt;p&gt;接下来具体介绍HSF框架的高效交互、高可用性和扩展能力。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1.HSF框架的采用Netty+Hession数据序列化协议实现服务交互&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;HSF采用网络通信框架Netty+Hession数据序列化协议实现服务间的调用，主要考虑点在大并发量时，服务的交互性达到最佳。这类RPC协议采用多路复用的TCP长连接方式，即在服务调用者和服务提供者之间有多个服务请求同时调用时会共用一个长连接，一个长连接交替传输不同请求的字节块。它既避免了反复建立连接开销，也避免了连接的等待闲置从而减少了系统的连接总数，同时还避免了TCP顺序传输中的线头阻塞问题。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.HSF框架的容错机制&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;为了保证服务的高可用性，在生产环境中相同的服务往往会有很多个应用实例来提供服务，在进行服务调用时，服务调用者端已经保存了它需要调用的服务的服务器列表信。假如有三台服务器提供了相同的服务，当采用随机方式获取其中一台进行服务交互时，不论这台服务器已经发生故障无法回应请求，还是该服务器已经接收了请求，在服务请求处理过程中出现了服务器故障（宕机、网络问题）造成该服务器没有在规定的时间（一般服务调用会设置超时时间）内返回处理结果，则服务调用端会获取服务调用失败的反馈，会立即从剩下的两台机器中选择一台进行服务调用。从而保证了个别服务提供者出现问题，完全不影响该服务提供正常的服务。因为配置服务器是采用长连接的方式与服务器节点进行通信，一旦发现有服务实例出现故障，此时会将这台服务器提供者的信息从服务器的服务列表中删除，然后将更新后的服务列表以推送的方式同步给予该服务相关的所有服务调用者端，这样当下次进行服务调用时，就不会因为随机而对已经停止提供服务的服务器发送请求。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3.HSF框架的线性扩展支持&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;HSF最为重要的一个特性就是服务能力的可扩展性，真正做到某个服务的业务处理能力随着服务器资源的增加得到线性的增长。基于HSF框架的运行机制，面对超级大的服务调用压力时，新增的服务提供实例（即增加一台服务器）可在几秒内（完成服务的注册发布、更新后的服务列表推送到服务调用端）开始进行服务请求处理，达到分担其他服务器实例压力的作用，实现服务能力整体水位恢复到正常的状态。据说双十一的时候阿里的多个服务中心所部署的服务实例节点数量超过2000个，即同一个服务由超过2000个服务实例同时提供负载均衡的服务。w(ﾟДﾟ)ww(ﾟДﾟ)w&lt;/p&gt;
</description>
<pubDate>Mon, 09 Apr 2018 15:02:00 +0000</pubDate>
<dc:creator>PaddingtonBear</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/1112yUan/p/8762043.html</dc:identifier>
</item>
<item>
<title>大型科技企业架构：中台模式的爱与恨 - FerventDesert</title>
<link>http://www.cnblogs.com/buptzym/p/8763490.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/buptzym/p/8763490.html</guid>
<description>&lt;p&gt;大型企业面对快速变化的市场形势，需要有像创业公司一样快速的反应能力。然而由于复杂的人员和层级关系，大企业做到“拥抱变化”是很困难的。&lt;/p&gt;
&lt;p&gt;传统以职能部门分治的树状组织架构，若一个底层员工有个好点子，就不得不自下而上说服管理层，管理层还需发动行政力量推动层层下属，任何一环出了问题就难以进行，其难度可想而知。而各业务线各自有KPI，互相协作非常困难。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/287060/201804/287060-20180409224448728-1115804305.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;(传统的组织架构)&lt;/p&gt;
&lt;p&gt;即使说服老大，克服重重困难，从各部门抽调和招兵买马，成立了新的业务部门。然而市场变化非常快，一旦业务受阻，方向转换，花费巨大精力组成的业务线何去何从？此时部门的发展极大地依赖于老大的决策，底层活力不足。&lt;/p&gt;
&lt;p&gt;大型组织想出各种方式解决这样的问题，例如阿里在2016年提出了“大中台小前台”的战略，将业务共同的工具和技术予以沉淀，成立专门的中台部门。这样新的项目可以重用中台服务而不用重新设计，避免重复功能建设和维护带来的浪费和山头林立。这样做的不只是企业，美军更是设计了新的战斗方式，每3人一个小组，战斗需要时可随时调集后方火力，信息和后勤支援，灵活而成本低廉。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/287060/201804/287060-20180409224502979-1844478327.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;程序员对这些概念更是熟悉，中台类比到编程领域，就是形成可复用的函数库，抽象共性，减少重复开发，提升迭代效率。中台将人力，技术和服务重新组织，例如，数据中台维护底层数据能力，内容中台将各类资讯汇总整理，供给各业务线丰富的资讯资源；推荐营销中台抽象推荐系统的共性，为各种业务提供营销的快速接入能力。这样也方便统一协调，如数据中台可根据业务优先级管理流量和负载分配，这在各部门独立运营时是不可想象的。当然，中台还有一大好处：分担风险，方便分黑锅，你懂的。&lt;/p&gt;
&lt;p&gt;当然，不是所有公司都能实现中台战略，中台要求扁平化的管理模式，没有太多的条条框框。灵活的考勤，没有隔板的工位，统一的基础设施（如数据库和代码库），否则中台就是空中楼阁，实施起来甚为困难。&lt;/p&gt;
&lt;h2 id=&quot;中台模式的困扰&quot;&gt;中台模式的困扰&lt;/h2&gt;
&lt;p&gt;如果中台模式全部都是好处，这篇文章就应该结束了。中台相比于传统模式虽有优势，但实践和理论的隔阂必然存在。中台该做不该做什么，如何与业务方良好协同，如何评估KPI都成了难题。&lt;/p&gt;
&lt;p&gt;我们可以根据中台对业务方的参与度，绘制成下面的一张图。&lt;br/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/287060/201804/287060-20180409224520325-1949515454.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;轴的最左边&lt;/strong&gt;：仅提供工具库和少量答疑维护，不对业务效果负责。绝大多数开源项目，各种数据库，都可以归于这种极端。&lt;br/&gt;&lt;strong&gt;轴的最右边&lt;/strong&gt;：all-in参与业务方的大部分流程，从运营业务，到数据模型，事无巨细。我们戏称其为“&lt;strong&gt;高级外包&lt;/strong&gt;”。&lt;/p&gt;
&lt;p&gt;我们形象地称其为&lt;strong&gt;左倾和右倾&lt;/strong&gt;问题。&lt;/p&gt;
&lt;p&gt;越往左走，工具抽象和通用能力强，赋能业务多，雨露均沾，研发人员能专注于技术本身。但越往左越好么？不一定。越左就无法深入业务场景，无法接受业务滋养，很可能故步自封，甚至为了技术而技术，变得学究派，而过于独立的中台变成了纯后台，更重要的是，如何评估业务产出？&lt;/p&gt;
&lt;p&gt;在最右面则是另一种极端，其优点非常明显：此时中台完全融入业务，有完整的业务sense，非常理解并能快速应对需求，与业务方打成一片，戏称为“高级外包”。但是，该模式的人力一般只能覆盖单一业务，很难对外辐射。由于精力所限，技术人员过分关注业务，中台的技术深度就会相对较差。&lt;/p&gt;
&lt;p&gt;我们要同时警惕这两种极端，但从整体来看，&lt;strong&gt;最容易被忽视的反而是右倾&lt;/strong&gt;。右倾构建了看似美好的中台合作模式，亲密无间的服务，但是人们很容易忽略其问题：由于过分具象和强耦合，中台能力难以沉淀在通用的工具和理论上，当出现其他相关业务时，原有产品并不能支持，应对变化的能力小，一旦业务方向变化就可能前功尽弃。&lt;/p&gt;
&lt;p&gt;此时由于中台容量有限，过重的服务模式导致只能覆盖有限的业务。中台不得不评估前台项目的重要程度，甚至拒绝为低优先级的前台提供支持，挑肥拣瘦。那么前台可能会为自己的业绩考虑去自行组团队完成项目，进而导致中台与前台隔阂。相反的，若事无巨细地参与到业务方，侵入性就会很强，人的问题会成为最大的问题：它可能会架空业务方人员，引起猜疑，甚至可能被并入业务方，导致中台骨干流失。&lt;/p&gt;
&lt;p&gt;那什么才是合理的中台模式呢？&lt;/p&gt;
&lt;h2 id=&quot;合理的中台&quot;&gt;合理的中台&lt;/h2&gt;
&lt;p&gt;最好的服务应该像空气一样，不留意就感受不到存在，但不可或缺。&lt;/p&gt;
&lt;p&gt;首先，中台必须有对应领域过硬的能力积累，例如算法中台需要有扎实的理论基础，搜索中台在搜索能力的积累更是要达到业务方远达不到的程度。打铁还需自身硬，否则被革命掉只是时间问题。&lt;/p&gt;
&lt;p&gt;中台一方面提供服务，另一方面则促进人和人的交流，&lt;strong&gt;推动换位思考&lt;/strong&gt;。原本不同方向的人为了共同的任务在一起工作，能够迅速地学习对方的能力。当任务告一段落后，我们需要关注：&lt;strong&gt;业务方是否能维护，改进甚至优化中台的工作和技术；中台是否能产生对业务的通盘理解和技术沉淀&lt;/strong&gt;。因此，在合作刚开始时，可适当右倾，中台快速熟悉业务，建立共识；随着业务深入，业务方吸收消化，中台逐渐后撤，直到业务方可自行处理大部分问题。&lt;/p&gt;
&lt;p&gt;一般来说，在提供相同服务质量的前提下，对业务问题的抽象能力越好，参与度就能越往左。 例如SQL确实是非常伟大的发明，它将数据处理的需求抽象地如此淋漓尽致，技术人员能够专精于性能优化，业务方能灵活操作数据库，完成业务任务。&lt;/p&gt;
&lt;p&gt;因此，中台有个重要命题应当考虑：&lt;strong&gt;自己的服务和技术应该如何合理抽象，将业务和底层尽可能隔离开来？这套领域特定语言(DSL)应该如何设计，才能让业务方也能看得懂，用得好？  &lt;/strong&gt;Tensorflow和Keras这类深度学习框架成功的一大部分原因，就是设计了非常良好的深度学习原语。越好的抽象和领域原语，就越能发挥前台人员的业务优势和主观能动性，极大地提升了沟通效率。&lt;/p&gt;
&lt;p&gt;同样，业务方也必须能把自己面临的问题予以清晰地描述，&lt;strong&gt;参数，环境和目标至少能明白地写在一张纸上&lt;/strong&gt;。提出模糊的，太过抽象的(比如不管用什么方式，只要能提升KPI)，甚至不切实际的目标，就是业务方的懒政和甩锅，中台不是高级外包。在任务层面上，两边应有清晰的分界和明确的问题，大家都精力有限，应做好分内之事。&lt;/p&gt;
&lt;p&gt;在沟通上，不仅需要主管之间的密切配合，建立紧密沟通机制，如定期参与前端的业务周会；同时还应有清晰的接口人机制。笔者见过不少例子：多个接口人导致信息冗杂，传播不畅，有时不得不十几个人开大会，导致反复沟通，效率很低。接口人需要明确业务问题，熟悉数据链路，沟通能力强，方能事半功倍。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/287060/201804/287060-20180409224546598-546412760.png&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;结语&quot;&gt;结语&lt;/h2&gt;
&lt;p&gt;一切事业都需要由人来推动，大部分问题都是人的问题。组织形式的不同，会导致信息传递效率的极大不同，进而影响事业的成败。“组织架构排名第二的公司，最后在市场上也只能居于老二的位置。”&lt;/p&gt;
&lt;p&gt;本文只是笔者作为某大型公司的基层中台工程师，面对业务合作中遇到问题的一些思考，由于视角限制，肯定有以偏概全甚至偏激之处，还请各位读者老爷海涵。为什么要写这篇文章？&lt;strong&gt;因为研究如何利用零和博弈，组织一帮聪明人，高效地为了同一个目标奋斗是非常有意思的，组织架构的设计很值得思考。&lt;/strong&gt;当然由于篇幅所限，还有很多问题没有讨论，比如如何考核中台绩效？&lt;/p&gt;
&lt;p&gt;拿着 5000 块的工资，操着 5000 亿富豪的心呐。&lt;/p&gt;
</description>
<pubDate>Mon, 09 Apr 2018 14:47:00 +0000</pubDate>
<dc:creator>FerventDesert</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/buptzym/p/8763490.html</dc:identifier>
</item>
<item>
<title>Java设计模式（七）Decorate装饰器模式 - 马洪彪</title>
<link>http://www.cnblogs.com/mahongbiao/p/8763330.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/mahongbiao/p/8763330.html</guid>
<description>&lt;h2&gt;（一）问题&lt;/h2&gt;
&lt;p&gt;系统中最初使用Crystal Report（水晶报表）工具生成报表，并将报表发送给客户端查看，此时定义一CrystalReport工具类即可完成水晶报表的生成工作。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/378857/201804/378857-20180409215608621-681025953.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;后续报表工具增加SSRS报表（SQL Server Report Service），此时可定义SSRSReport工具类完成SSRS报表的生成工作；&lt;/p&gt;
&lt;p&gt;并定义Report接口，重构两报表工具类实现Report接口，客户端通过接口统一调用。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/378857/201804/378857-20180409215641158-1112001280.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;需求接着变更，报表工具需要在发送给客户端（以PDF格式）的同时，可导出一份Word可编辑版本。对此可定义CrystalReportPDF和CrystalReportWord、SSRSReportPDF、SSRSReportWord四个工具类实现相应的功能。&lt;/p&gt;
&lt;p&gt;需求继续变更，报表工具需要在发送给客户端（以Word格式或PDF格式）的同时，可将报表存储到文件服务器（File System）上。对此可定义CrystalReportPDF、CrystalReportPDF2FS、CrystalReportWord、CrystalReportWord2FS……。&lt;/p&gt;
&lt;p&gt;需求仍然在变更，报表工具增加了Fine Report（帆软报表），要求在输出的同时，存储到FTP服务器上、邮件发送给指定用户，输出格式需要Excel……&lt;/p&gt;
&lt;h2&gt;（二）解决方案&lt;/h2&gt;
&lt;p&gt;针对此场景，之前的办法很痛苦（通过定义类实现接口），此时可应用装饰器模式。&lt;/p&gt;
&lt;p&gt;报表工具一共有三种，即Crystal Report、SSRS和Fine Report，因此可定义三个类实现Report接口。&lt;/p&gt;
&lt;p&gt;导出为Word版本、导出为Excel版本、存储到文件系统、存储到FTP服务器上、邮件发送用户等可理解为报表工具的装饰。&lt;/p&gt;
&lt;p&gt;因此可以定义各种ReportGenerator的装饰类，用于给报表工具类（三种中具体的某一种）添加装饰（可以添加多种装饰，并可多次添加）。&lt;/p&gt;
&lt;p&gt;据此定义装饰类父类ReportGenerator，使其持有Report接口对象，并实现Report接口，至此则可对持有的对象添加装饰，并最终将装饰好的方法发布出去。&lt;/p&gt;
&lt;p&gt;接着为不同类型的装饰器定义类，继承父类ReportGenerator，例如定义ExportWordReport类，使其可输出Word格式报告，定义StorageReport2FTP类，使其将报表存储到FTP服务器。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/378857/201804/378857-20180409215851997-755800602.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;调用端，可创建某类型的报表（三种报表服务中的一种），并调用不同的装饰器类组合，实现动态扩展类功能，例如调用ExportWordReport、ExportExcelReport和StorageReport2FTP，则实现将报表输出为Word和Excel，并存储到FTP服务器。&lt;/p&gt;
&lt;p&gt;另外，假设有一装饰功能，发送报告生成通知给用户，发送方式有Email、短信、APP通知等，由于发送时需要对消息进行处理，因此可定义一公用的生成消息装饰类，此时装饰类可定义父子类不断继承。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/378857/201804/378857-20180409220836587-1960929322.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;装饰器的优点是动态的扩展了类功能（相比定义具体的类去实现接口），将装饰功能抽象为装饰类，减少了实现类的数量，降低了复杂度，也更符合对象的自然情况（个人认为区分装饰类与子类的方法是，装饰可以加也可以不加，可以加一个也可以重复添加，而子类则有且仅有一个；比如吃饭时，面条、馒头、米饭作为主食，一般人是选择其中一种，则可实现为子类，而西红柿炒鸡蛋、黄瓜炒木耳等炒菜可以添加两份或三份，甚至可以要两份西红柿炒鸡蛋，因此炒菜可以作为装饰类）。&lt;/p&gt;
&lt;p&gt;装饰器的缺点是由于装饰的层数可以不等，因此在排查问题等方面较复杂，好比一堵墙上添了N层墙纸、刷了N多涂料，现在墙上裂了缝到底是哪里出了问题就有点难排查了。&lt;/p&gt;

&lt;p&gt;接口：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; lims.designpatterndemo.decoratedemo;

&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt;&lt;span&gt; Report {
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String generateReport();
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Crystal Report报表工具类：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; lims.designpatterndemo.decoratedemo;

&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; CrystalReport &lt;span&gt;implements&lt;/span&gt;&lt;span&gt; Report {

    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String generateReport() { 
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &quot;Generate Report using Crystal Report！&quot;&lt;span&gt;;
    }

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;SSRS报表工具类：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; lims.designpatterndemo.decoratedemo;

&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; SSRSReport &lt;span&gt;implements&lt;/span&gt;&lt;span&gt; Report {

    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String generateReport() { 
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &quot;Generate Report using Sql Server Report Service!&quot;&lt;span&gt;;
    } 
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Fine Report报表工具类：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; lims.designpatterndemo.decoratedemo;

&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; FineReport &lt;span&gt;implements&lt;/span&gt;&lt;span&gt; Report {

    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String generateReport() { 
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &quot;Generate Report using Fine Report!&quot;&lt;span&gt;;
    }
    
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;装饰类父类：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; lims.designpatterndemo.decoratedemo;

&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; ReportGenerator &lt;span&gt;implements&lt;/span&gt;&lt;span&gt; Report {
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;持有接口&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt;&lt;span&gt; Report report;
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; ReportGenerator(Report report){
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.report =&lt;span&gt; report;
    }
    
    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String generateReport() { 
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; report.generateReport();
    }
    
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;输出Word报告装饰类：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; lims.designpatterndemo.decoratedemo;

&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; ExportWordReport &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; ReportGenerator{
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; ExportWordReport(Report report) {
        &lt;/span&gt;&lt;span&gt;super&lt;/span&gt;&lt;span&gt;(report); 
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String generateReport() { 
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;super&lt;/span&gt;.generateReport() + &quot; Export to Word Format!&quot;&lt;span&gt;;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;输出Excel报告装饰类：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; lims.designpatterndemo.decoratedemo;

&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; ExportExcelReport &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; ReportGenerator{
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; ExportExcelReport(Report report) {
        &lt;/span&gt;&lt;span&gt;super&lt;/span&gt;&lt;span&gt;(report); 
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String generateReport() { 
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;super&lt;/span&gt;.generateReport() + &quot; Export to Excel Format!&quot;&lt;span&gt;;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;存储报告到FTP服务器装饰类：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; lims.designpatterndemo.decoratedemo;

&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; StorageReport2FTP &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; ReportGenerator{
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; StorageReport2FTP(Report report) {
        &lt;/span&gt;&lt;span&gt;super&lt;/span&gt;&lt;span&gt;(report); 
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String generateReport() { 
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;super&lt;/span&gt;.generateReport() + &quot; Storage Report to FTP Server!&quot;&lt;span&gt;;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;动态调用：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; lims.designpatterndemo.decoratedemo;

&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; DecorateDemo {
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String args[]){
        Report report &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; CrystalReport();  
        report &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; ExportWordReport(report);
        report &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; ExportExcelReport(report);
        report &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; StorageReport2FTP(report); 
        System.out.println(report.generateReport());
    } 
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;输出结果：&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Generate Report using Crystal Report！ Export to Word Format! Export to Excel Format! Storage Report to FTP Server!&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;发送通知消息装饰类：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; lims.designpatterndemo.decoratedemo;

&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; SendReport &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; ReportGenerator {

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; SendReport(Report report) {
        &lt;/span&gt;&lt;span&gt;super&lt;/span&gt;&lt;span&gt;(report); 
    }
    
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String generateReport() { 
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;super&lt;/span&gt;.generateReport() + &quot; Send Report!&quot;&lt;span&gt;;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;发送消息到Email装饰类：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; lims.designpatterndemo.decoratedemo;

&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; SendReport2Email &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; SendReport {

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; SendReport2Email(Report report) {
        &lt;/span&gt;&lt;span&gt;super&lt;/span&gt;&lt;span&gt;(report); 
    }
    
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String generateReport() { 
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;super&lt;/span&gt;.generateReport() + &quot; send to Email!&quot;&lt;span&gt;;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;调用测试：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; lims.designpatterndemo.decoratedemo;

&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; DecorateDemo {
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String args[]){
        Report report &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; CrystalReport();  
        report &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; ExportWordReport(report);
        report &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; ExportExcelReport(report);
        report &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; StorageReport2FTP(report); 
        report &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; SendReport2Email(report);  
        System.out.println(report.generateReport());
    } 
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;输出结果：&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Generate Report using Crystal Report！ Export to Word Format! Export to Excel Format! Storage Report to FTP Server! Send Report! send to Email!&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Mon, 09 Apr 2018 14:13:00 +0000</pubDate>
<dc:creator>马洪彪</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/mahongbiao/p/8763330.html</dc:identifier>
</item>
</channel>
</rss>