<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>含有重复元素的全排列问题 - nullzx</title>
<link>http://www.cnblogs.com/nullzx/p/7712747.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/nullzx/p/7712747.html</guid>
<description>&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;简介&lt;/strong&gt;：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;本文主要介绍基于分治方式（递归）和枚举方式（循环）来构建指定字符串的全排列方法，两种方法都可以解决重复元素的全排列&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;欢迎探讨，如有错误敬请指正&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;如需转载，请注明出处&lt;/span&gt; &lt;a href=&quot;http://www.cnblogs.com/nullzx/&quot;&gt;&lt;span&gt;http://www.cnblogs.com/nullzx/&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;hr align=&quot;center&quot; size=&quot;3&quot; width=&quot;100%&quot;/&gt;&lt;h4&gt;&lt;span&gt;1. 基于分治方式（递归实现）&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;&lt;span&gt;1）一个元素的全排列只有一种&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;2）[A0, A1, A2]的全排列等于下面三个全排列的并集&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;A0开头，拼接上[A1,A2]的所有全排列&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;A1开头，拼接上[A0,A2]的所有全排列&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;A2开头，拼接上[A0,A1]的所有全排列&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;所以，对于[A0, A1, ……，An]的全排列，我们可以将问题转换成n个子问题：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;A0开头，拼接上[A1,A2 ……，An]的所有全排列&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;A1开头，拼接上[A0,A2 ……，An]的所有全排列&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;……&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;An开头，拼接上[A0,A2 ……，A(n-1)]的所有全排列&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;而每个子问题又可以继续向下转化成n-1个子问题，最终可以转化到只有一个元素的全排列问题。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;对于数组中有重复元素的情况，我们只要保证，重复元素只能有一次作为子问题的开头元素，这样我们就可以避免重复计算。&lt;/span&gt;&lt;/p&gt;

&lt;h4&gt;&lt;span&gt;2. 基于枚举方式（循环实现）&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;&lt;span&gt;如果我们将全排列按照大小顺序进行排序，假设我们知道了第i个排列是[A0, A1, A2, A3, ……]，那么第i+1个排列就是比[A0, A1, A2, A3, ……]大，且最小的那个。找到i+1个排列的步骤如下&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;1）从后往前两两比较，找到第一个满足a[i]&amp;lt;a[i+1]的两个元素&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;2）从a[i+1]开始往后找，找到一个大于a[i]中最小的一个元素,这个元素的下标记为j，交换a[i]和a[j]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;3）将[i+1, a.length-1]的元素全部逆序&lt;/span&gt;&lt;/p&gt;

&lt;h4&gt;&lt;span&gt;3. 代码实现&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;&lt;span&gt;下面是java代码的实现&lt;/span&gt;&lt;/p&gt;
&lt;pre class=&quot;brush: java; auto-links: true; collapse: false; first-line: 1; gutter: true; html-script: false; light: false; ruler: false; smart-tabs: true; tab-size: 4; toolbar: true;&quot;&gt;
package interviewquestion;

import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;

public class Permutation {
        
        //返装有回字符串s的全排列的List对象
        public static List&amp;lt;String&amp;gt; byTraverse(String s){
                char[] chArr = s.toCharArray();
                List&amp;lt;String&amp;gt; list = new LinkedList&amp;lt;String&amp;gt;();
                byTraverse0(chArr, 0, list);
                return list;
        }
        
        
        private static void byTraverse0(char[] arr, int left, List&amp;lt;String&amp;gt; list){
                if(left &amp;gt;= arr.length-1){
                        list.add(new String(arr));
                        return;
                }
                
                //用于记录交换到left下标的每一个元素，防止计算重复的排列
                HashSet&amp;lt;Character&amp;gt; hs = new HashSet&amp;lt;Character&amp;gt;();

                for(int i = left; i &amp;lt; arr.length; i++){
                        //arr[left]后面的每一个元素arr[i]都和arr[left]交换
                        swap(arr, left, i);
                        if(!hs.contains(arr[left])){
                                hs.add(arr[left]);
                                byTraverse0(arr, left+1, list);
                        }
                        //将left和i交换回来，防止遗漏，重复
                        //已保证下一个交换到left下标的是未交换过的元素
                        swap(arr, left, i);
                }
        }
        /*=================================================*/
        
        //返装有大于等于字符串s的全排列的List对象
        public static List&amp;lt;String&amp;gt; byNext(String s){
                char[] arr = s.toCharArray();
                List&amp;lt;String&amp;gt; list = new LinkedList&amp;lt;String&amp;gt;();
                list.add(s);
                
                while(next(arr)){
                        list.add(new String(arr));
                }
                return list;
        }
        
        private static boolean next(char[] arr){
                boolean hasNext = false;
                int i;
                for(i = arr.length-2; i &amp;gt;= 0; i--){
                        if(arr[i] &amp;lt; arr[i+1]){
                                hasNext = true;
                                break;
                        }
                }
                
                //如果所有元素是从大到小排列，说明是最大的字符串
                if(!hasNext){
                        return false;
                }
                
                //从i+1的下标往后找（必定是单调递减）,找一个比arr[i]大的集合中最小的一个
                int j;
                for(j = i+1; j &amp;lt; arr.length; j++){
                        if(arr[j] &amp;lt;= arr[i]){
                                break;
                        }
                }
                j--;
                
                //交换这两个元素，然后逆序i+1以后的所有元素
                swap(arr, i, j);
                reverse(arr, i+1, arr.length-1);
                
                return true;
        }
        
        private static void reverse(char[] arr, int from, int to){
                for(int i = from, j = to; i &amp;lt; j; i++, j--){
                        swap(arr, i, j);
                }
        }
        
        /*=================================================*/
        
        private static void swap(char[] chArr, int i, int j){
                char t = chArr[i];
                chArr[i] = chArr[j];
                chArr[j] = t;
        }
        
        public static void main(String[] args){
                List&amp;lt;String&amp;gt; list1 = Permutation.byNext(&quot;1233&quot;);
                System.out.println(list1);
                System.out.println(list1.size());
                
                System.out.println();
                
                List&amp;lt;String&amp;gt; list2 = Permutation.byTraverse(&quot;1233&quot;);
                System.out.println(list2);
                System.out.println(list2.size());
        }
}
&lt;/pre&gt;

&lt;p&gt;&lt;span&gt;运行结果&lt;/span&gt;&lt;/p&gt;
&lt;pre class=&quot;brush: java; auto-links: true; collapse: false; first-line: 1; gutter: true; html-script: false; light: false; ruler: false; smart-tabs: true; tab-size: 4; toolbar: true;&quot;&gt;
[1233, 1323, 1332, 2133, 2313, 2331, 3123, 3132, 3213, 3231, 3312, 3321]
12

[1233, 1323, 1332, 2133, 2313, 2331, 3213, 3231, 3123, 3132, 3312, 3321]
12
&lt;/pre&gt;</description>
<pubDate>Sun, 22 Oct 2017 15:57:00 +0000</pubDate>
<dc:creator>nullzx</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/nullzx/p/7712747.html</dc:identifier>
</item>
<item>
<title>Java8系列之初识 - menghuanzhiwuhen</title>
<link>http://www.cnblogs.com/mhzwh/p/7712737.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/mhzwh/p/7712737.html</guid>
<description>&lt;p&gt;&lt;strong&gt;前言：&lt;/strong&gt;终于有机会在工作中使用高版本的Java8，但是一直没有对java8中添加的新特性进一步了解过，所以趁着这个机会学习一下，能够在编程中熟练的使用。&lt;/p&gt;
&lt;p&gt;一、接口的改变&lt;/p&gt;
&lt;p&gt;       我们知道，在java8版本以前，接口中只能定义静态常量和抽象方法，但是在java8添加了默认方法，也叫扩展方法；&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
public interface DefaultInterface {
        //默认是public static final，也只能是
         public static final int count=0;
         //抽象方法
         void add();
         
         //默认方法==&amp;gt;扩展方法
         default int add(int x,int y ) {
                 return x+y;
         }

}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　这样，实现类不必实现默认方法，只需实现抽象方法，使用时直接调用接口中的方法。（好像和流式的api引入有关）&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
public class DefaultImpl implements DefaultInterface {

        @Override
        public void add() {
                System.out.println(&quot;我是抽象方法的实现&quot;);

        }
        public static void main(String[] args) {
                DefaultInterface di=new DefaultImpl();
                di.add();
                di.add(12, 3);
        }

}
&lt;/pre&gt;&lt;/div&gt;
</description>
<pubDate>Sun, 22 Oct 2017 15:55:00 +0000</pubDate>
<dc:creator>menghuanzhiwuhen</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/mhzwh/p/7712737.html</dc:identifier>
</item>
<item>
<title>二叉树的层次遍历 - cccc_hi</title>
<link>http://www.cnblogs.com/liyuhui-Z/p/7712699.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/liyuhui-Z/p/7712699.html</guid>
<description>&lt;p&gt;&lt;strong&gt;基本思想&lt;/strong&gt;&lt;/p&gt;
&lt;ul readability=&quot;3&quot;&gt;&lt;li&gt;
&lt;p&gt;借助队列来实现&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;首先初始化队列.然后将根结点压入队列&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;然后出队,输出出队元素的值,&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;如果存在左孩子.则左孩子入队&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;如果存在右孩子,则右孩子入队, 循环直到判断条件不成立&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;如果需要将节点从下到上 从左到右输出的话.只需要设置一个辅助栈 然后将数据压入栈中 最后出栈即可&lt;/p&gt;
&lt;p&gt;(下面是从下到上,从左到右的输出)&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1260476/201710/1260476-20171022233959459-1527244513.png&quot;/&gt;&lt;/p&gt;
</description>
<pubDate>Sun, 22 Oct 2017 15:43:00 +0000</pubDate>
<dc:creator>cccc_hi</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/liyuhui-Z/p/7712699.html</dc:identifier>
</item>
<item>
<title>关于时钟模块DS1302的使用心得 - Andrew_qian</title>
<link>http://www.cnblogs.com/qsyll0916/p/7712695.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/qsyll0916/p/7712695.html</guid>
<description>&lt;p&gt;最近在做万年历，用到实时时钟DS1302模块，花了两天时间看资料和写驱动，想记录一下我的学习经过，顺便做一下总结。&lt;/p&gt;
&lt;p&gt;首先就是在图书馆查各种资料，于是查到的大多是这些，主要时硬件方面的资料:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1083998/201710/1083998-20171022225837818-413268826.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1083998/201710/1083998-20171022225814787-1131304821.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;其实能查到很多资料，但是能为我们所用的不是很多。在使用一个芯片时，我一般时按照一下步骤去学习：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1、芯片介绍；&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2、查看引脚定义；&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3、外围电路&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4、分析时序图；&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5、模仿着编写驱动程序，然后自己动手写驱动。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;6、实现功能。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;下面我就按照这个顺序去学习这款芯片；&lt;/p&gt;
&lt;p&gt;一、芯片介绍&lt;/p&gt;
&lt;p&gt;DS1302是DALLAS(达拉斯)公司出的一款涓流充电时钟芯片，2001年DALLAS被MAXIM(美信)收购，因此我们看到的DS1302的数据手册既有DALLAS的标志，又有MAXIM的标志；&lt;br/&gt;DS1302实时时钟芯片广泛应用于电话、传真、便携式仪器等产品领域，他的主要性能指标如下：&lt;br/&gt;1、DS1302是一个实时时钟芯片，可以提供秒、分、小时、日期、月、年等信息，并且还有软年自动调整的能力，可以通过配置AM/PM来决定采用24小时格式还是12小时格式。&lt;br/&gt;2、拥有31字节数据存储RAM。&lt;br/&gt;3、串行I/O通信方式，相对并行来说比较节省IO口的使用。&lt;br/&gt;4、DS1302的工作电压比较宽，大概是2.0V~5.5V都可以正常工作。采用双电源供电，当主电源比备用电源高0.2V时，由主电源供电，否则采用备用电源，一般是一个纽扣电池。&lt;br/&gt;5、DS1302这种时钟芯片功耗一般都很低，它在工作电压2.0V的时候，工作电流小于300nA。&lt;br/&gt;6、DS1302共有8个引脚，有两种封装形式，一种是DIP-8封装，芯片宽度(不含引脚)是300mil，一种是SOP-8封装，有两种宽度，一种是150mil，一种是208mil。&lt;/p&gt;
&lt;p&gt;二、引脚定义&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1083998/201710/1083998-20171022230131459-1977458588.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;三、外围电路&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1083998/201710/1083998-20171022230929412-1683524905.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;一般与单片机IO口相连时要加上拉电阻，提高 IO 口的驱动能力，这样信号比较稳定，计时也比较准确。&lt;/p&gt;
&lt;p&gt;四、分析时序图&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1083998/201710/1083998-20171022231321943-459608670.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这是单字节写入的时序图，可见，先拉高使能端，进行使能选择，然后在时钟上升沿写入一个字节。&lt;/p&gt;
&lt;p&gt;DS1302在进行读写操作时最少读写两个字节，第一个是控制字节，就是一个命令，说明是读还是写操作，第二个时需要读写的数据。&lt;/p&gt;
&lt;p&gt;对于单字节写，只有在SCLK为低电平时才能将 CE 置高电平，所以刚开始将SCLK 置低，CE置高，然后把需要写入的字节送入 IO口，然后跳变SCLK，在SCLK下降沿时，写入数据&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1083998/201710/1083998-20171022231814756-1549643395.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;五、编写驱动程序&lt;/p&gt;
&lt;p&gt;有了 上面的分析，我们就可以学着编写驱动程序了，可以把驱动程序分为几个模块来写，由底层慢慢往上累加，比如，我们先编写单个字节的读写操作，在编写整个数据的读写，&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
#include &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;DS1302.h&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;

&lt;span&gt;//&lt;/span&gt;&lt;span&gt;*******************&lt;/span&gt;
&lt;span&gt;void&lt;/span&gt; ds1302_writebyte(uchar &lt;span&gt;byte&lt;/span&gt;&lt;span&gt;){
    &lt;/span&gt;&lt;span&gt;uint&lt;/span&gt;&lt;span&gt; i;
    &lt;/span&gt;&lt;span&gt;uint&lt;/span&gt; t = &lt;span&gt;0x01&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(i=&lt;span&gt;0&lt;/span&gt;;i&amp;lt;&lt;span&gt;8&lt;/span&gt;;i++&lt;span&gt;){
        SCIO &lt;/span&gt;= &lt;span&gt;byte&lt;/span&gt; &amp;amp;&lt;span&gt; t;        
        t&lt;/span&gt;&amp;lt;&amp;lt;=&lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
        DOWN();       &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;下降沿完成一个位的操作&lt;/span&gt;
&lt;span&gt;    }
    SCIO &lt;/span&gt;= &lt;span&gt;1&lt;/span&gt;;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;确保释放io引脚&lt;/span&gt;
&lt;span&gt;}
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;********************&lt;/span&gt;
&lt;span&gt;void&lt;/span&gt;&lt;span&gt; ds1302_writedata(uchar addr,uchar data_){
    
    CE &lt;/span&gt;= &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;        nop();    
    SCLK &lt;/span&gt;= &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;    nop();    
    CE &lt;/span&gt;= &lt;span&gt;1&lt;/span&gt;;        nop();    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;使能片选信号&lt;/span&gt;
    ds1302_writebyte((addr&amp;lt;&amp;lt;&lt;span&gt;1&lt;/span&gt;)|&lt;span&gt;0x80&lt;/span&gt;);    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;方便后面写入&lt;/span&gt;
&lt;span&gt;    ds1302_writebyte(data_);
    CE &lt;/span&gt;= &lt;span&gt;0&lt;/span&gt;;        nop();&lt;span&gt;//&lt;/span&gt;&lt;span&gt;传送数据结束&lt;/span&gt;
&lt;span&gt;
}
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;*************************&lt;/span&gt;
&lt;span&gt;uchar ds1302_readbyte(){
    &lt;/span&gt;&lt;span&gt;uint&lt;/span&gt;&lt;span&gt; i;
    uchar data_ &lt;/span&gt;= &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;uint&lt;/span&gt; t = &lt;span&gt;0x01&lt;/span&gt;&lt;span&gt;;     
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(i=&lt;span&gt;0&lt;/span&gt;;i&amp;lt;&lt;span&gt;7&lt;/span&gt;;i++){     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;c51好像不支持直接在for循环里面直接定义变量&lt;/span&gt;

        &lt;span&gt;if&lt;/span&gt;&lt;span&gt;(SCIO){

            data_ &lt;/span&gt;= data_ | t;    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;低位在前，逐位读取,刚开始不对，估计是这个的问题&lt;/span&gt;
&lt;span&gt;        }                
        t&lt;/span&gt;&amp;lt;&amp;lt;=&lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
        DOWN();
    }
     &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; data_;
}


&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;************************&lt;/span&gt;
&lt;span&gt;uchar ds1302_readdata(uchar addr){

    uchar data_ &lt;/span&gt;= &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;

    CE &lt;/span&gt;= &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;     nop();
    SCLK &lt;/span&gt;= &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;  nop();
    CE &lt;/span&gt;= &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;      nop();
    ds1302_writebyte((addr&lt;/span&gt;&amp;lt;&amp;lt;&lt;span&gt;1&lt;/span&gt;)|&lt;span&gt;0x81&lt;/span&gt;&lt;span&gt;);
    data_ &lt;/span&gt;=&lt;span&gt; ds1302_readbyte();
    CE &lt;/span&gt;= &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;       nop();
    SCLK &lt;/span&gt;= &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;  nop();
    SCIO &lt;/span&gt;= &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;  nop();
    SCIO &lt;/span&gt;= &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;  nop();

    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; data_;
}

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;*********************&lt;/span&gt;
&lt;span&gt;void&lt;/span&gt;&lt;span&gt; init_ds1302(){

     uchar i;
     CE &lt;/span&gt;= &lt;span&gt;0&lt;/span&gt;;   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;初始化引脚&lt;/span&gt;
     SCLK = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;; 
     i  &lt;/span&gt;= ds1302_readdata(&lt;span&gt;0x00&lt;/span&gt;);  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;读取秒寄存器,秒在最低位&lt;/span&gt;
     &lt;span&gt;if&lt;/span&gt;((i &amp;amp; &lt;span&gt;0x80&lt;/span&gt; != &lt;span&gt;0&lt;/span&gt;&lt;span&gt;)){

         ds1302_writedata(&lt;/span&gt;&lt;span&gt;7&lt;/span&gt;,&lt;span&gt;0x00&lt;/span&gt;); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;撤销写保护，允许写入数据&lt;/span&gt;
        &lt;span&gt;for&lt;/span&gt;(i = &lt;span&gt;0&lt;/span&gt;;i&amp;lt;&lt;span&gt;7&lt;/span&gt;;i++&lt;span&gt;){

            ds1302_writedata(i,init_time[i]);
        }
     }    
}

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;**************&lt;/span&gt;
&lt;span&gt;void&lt;/span&gt; ds1302_readtime(){       &lt;span&gt;//&lt;/span&gt;&lt;span&gt;读取时间&lt;/span&gt;
      &lt;span&gt;uint&lt;/span&gt;&lt;span&gt; i;
      &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(i = &lt;span&gt;0&lt;/span&gt;;i&amp;lt;&lt;span&gt;7&lt;/span&gt;;i++&lt;span&gt;){

             init_time[i] &lt;/span&gt;=&lt;span&gt; ds1302_readdata(i);
      }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;其中头文件为：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#ifndef __DS1302_H
&lt;/span&gt;&lt;span&gt;#define&lt;/span&gt; __DS1302_H&lt;span&gt;

#include &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;reg52.h&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
#include &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;intrins.h&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;


&lt;span&gt;#define&lt;/span&gt; uint unsigned int
&lt;span&gt;#define&lt;/span&gt; uchar unsigned char
&lt;span&gt;#define&lt;/span&gt; nop() _nop_()

&lt;span&gt;#define&lt;/span&gt; UP() {SCLK = 0;nop();SCLK = 1;nop();} &lt;span&gt;//&lt;/span&gt;&lt;span&gt;上升沿  ,使用宏定义函数时最后一定家分号&lt;/span&gt;
&lt;span&gt;#define&lt;/span&gt; DOWN() {SCLK = 1;nop();SCLK = 0;nop();} &lt;span&gt;//&lt;/span&gt;&lt;span&gt;下降沿&lt;/span&gt;

 &lt;span&gt;//&lt;/span&gt;&lt;span&gt;这个模块内没有集成上拉电阻，使用时最好接上2&lt;/span&gt;
sbit CE = P2^&lt;span&gt;5&lt;/span&gt;;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;RET,使能输入引脚，当读写时，置高位&lt;/span&gt;
sbit SCIO = P2^&lt;span&gt;6&lt;/span&gt;;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;IO     ，双向通信引脚，读写数据都是通过这个完成&lt;/span&gt;
sbit SCLK = P2^&lt;span&gt;7&lt;/span&gt;;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;SCLK，时钟信号


&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;为什么有时候好好的，也会出错显示少了分号呢？还气人啊！！！！&lt;/span&gt;

&lt;span&gt;void&lt;/span&gt; ds1302_writebyte(uchar &lt;span&gt;byte&lt;/span&gt;);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;写一个字节; &lt;/span&gt;
&lt;span&gt;void&lt;/span&gt; ds1302_writedata(uchar addr,uchar data_);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;给某地址写数据,data是c51内部的关键字，表示将变量定义在数据存储区，故此处用data_;&lt;/span&gt;
uchar ds1302_readbyte();&lt;span&gt;//&lt;/span&gt;&lt;span&gt;读一个字节&lt;/span&gt;
uchar ds1302_readdata(uchar addr);&lt;span&gt;//&lt;/span&gt;&lt;span&gt;读取某寄存器数据     ;&lt;/span&gt;
&lt;span&gt;void&lt;/span&gt;&lt;span&gt; init_ds1302();
&lt;/span&gt;&lt;span&gt;void&lt;/span&gt;&lt;span&gt; ds1302_readtime();


&lt;/span&gt;&lt;span&gt;extern&lt;/span&gt;&lt;span&gt; uchar init_time[];

&lt;/span&gt;&lt;span&gt;#endif&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;六、功能实现&lt;/p&gt;
&lt;p&gt; 功能实现就简单了，就是加上主函数嘛，然后加上我们可以亲眼看见并感知的模块，比如用数码管显示时间：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;57&quot;&gt;
&lt;pre&gt;
#include &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;DS1302.h&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;

&lt;span&gt;#define&lt;/span&gt; DIG P0&lt;span&gt;
sbit LSA &lt;/span&gt;= P2^&lt;span&gt;2&lt;/span&gt;&lt;span&gt;;
sbit LSB &lt;/span&gt;= P2^&lt;span&gt;3&lt;/span&gt;&lt;span&gt;;
sbit LSC &lt;/span&gt;= P2^&lt;span&gt;4&lt;/span&gt;&lt;span&gt;;



uchar init_time[] &lt;/span&gt;= {&lt;span&gt;0x50&lt;/span&gt;,&lt;span&gt;0x15&lt;/span&gt;,&lt;span&gt;0x14&lt;/span&gt;,&lt;span&gt;0x22&lt;/span&gt;,&lt;span&gt;0x10&lt;/span&gt;,&lt;span&gt;0x06&lt;/span&gt;,&lt;span&gt;0x17&lt;/span&gt;};&lt;span&gt;//&lt;/span&gt;&lt;span&gt;初始化的时间    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;秒 分 时 日 月 周 年 &lt;/span&gt;
uchar code DIG_CODE[&lt;span&gt;10&lt;/span&gt;]={&lt;span&gt;0x3f&lt;/span&gt;,&lt;span&gt;0x06&lt;/span&gt;,&lt;span&gt;0x5b&lt;/span&gt;,&lt;span&gt;0x4f&lt;/span&gt;,&lt;span&gt;0x66&lt;/span&gt;,&lt;span&gt;0x6d&lt;/span&gt;,&lt;span&gt;0x7d&lt;/span&gt;,&lt;span&gt;0x07&lt;/span&gt;,&lt;span&gt;0x7f&lt;/span&gt;,&lt;span&gt;0x6f&lt;/span&gt;}; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;数码管数字表&lt;/span&gt;
&lt;span&gt;uint&lt;/span&gt; disp[&lt;span&gt;8&lt;/span&gt;]={&lt;span&gt;0x3f&lt;/span&gt;,&lt;span&gt;0x3f&lt;/span&gt;,&lt;span&gt;0x3f&lt;/span&gt;,&lt;span&gt;0x3f&lt;/span&gt;,&lt;span&gt;0x3f&lt;/span&gt;,&lt;span&gt;0x3f&lt;/span&gt;,&lt;span&gt;0x3f&lt;/span&gt;,&lt;span&gt;0x3f&lt;/span&gt;};&lt;span&gt;//&lt;/span&gt;&lt;span&gt;把要显示的数字传给他    &lt;/span&gt;
uchar Num=&lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;uint&lt;/span&gt; count_flag = &lt;span&gt;0&lt;/span&gt;;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;中断溢出次数&lt;/span&gt;

&lt;span&gt;void&lt;/span&gt; time0_init();&lt;span&gt;//&lt;/span&gt;&lt;span&gt;定时器0初始化&lt;/span&gt;
&lt;span&gt;void&lt;/span&gt; display();&lt;span&gt;//&lt;/span&gt;&lt;span&gt;数码管显示时间&lt;/span&gt;

&lt;span&gt;void&lt;/span&gt; main(&lt;span&gt;void&lt;/span&gt;&lt;span&gt;){
    
     init_ds1302();     &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;初始化时写入起始时间&lt;/span&gt;
&lt;span&gt;     time0_init();

     &lt;/span&gt;&lt;span&gt;while&lt;/span&gt;(&lt;span&gt;1&lt;/span&gt;&lt;span&gt;){
            display();
     }
}

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;***************&lt;/span&gt;
&lt;span&gt;void&lt;/span&gt;&lt;span&gt; display(){
            
     ds1302_readtime();    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;读取时间&lt;/span&gt;
    disp[&lt;span&gt;7&lt;/span&gt;] = DIG_CODE[init_time[&lt;span&gt;0&lt;/span&gt;]&amp;amp;&lt;span&gt;0x0f&lt;/span&gt;&lt;span&gt;];
    disp[&lt;/span&gt;&lt;span&gt;6&lt;/span&gt;] = DIG_CODE[init_time[&lt;span&gt;0&lt;/span&gt;]&amp;gt;&amp;gt;&lt;span&gt;4&lt;/span&gt;&lt;span&gt;];
    disp[&lt;/span&gt;&lt;span&gt;5&lt;/span&gt;] = &lt;span&gt;0X40&lt;/span&gt;;        &lt;span&gt;//&lt;/span&gt;&lt;span&gt;显示一个横线&lt;/span&gt;
    disp[&lt;span&gt;4&lt;/span&gt;] = DIG_CODE[init_time[&lt;span&gt;1&lt;/span&gt;]&amp;amp;&lt;span&gt;0x0f&lt;/span&gt;&lt;span&gt;];
    disp[&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;] = DIG_CODE[init_time[&lt;span&gt;1&lt;/span&gt;]&amp;gt;&amp;gt;&lt;span&gt;4&lt;/span&gt;&lt;span&gt;];
    disp[&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;] = &lt;span&gt;0X40&lt;/span&gt;&lt;span&gt;;
    disp[&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;] = DIG_CODE[init_time[&lt;span&gt;2&lt;/span&gt;]&amp;amp;&lt;span&gt;0x0f&lt;/span&gt;&lt;span&gt;];
    disp[&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;] = DIG_CODE[init_time[&lt;span&gt;2&lt;/span&gt;]&amp;gt;&amp;gt;&lt;span&gt;4&lt;/span&gt;&lt;span&gt;];
}
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;******************&lt;/span&gt;
&lt;span&gt;void&lt;/span&gt;&lt;span&gt; time0_init(){

    TMOD&lt;/span&gt;=&lt;span&gt;0X02&lt;/span&gt;;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;选择为定时器模式，工作方式2，8位自动重装模式，仅用TRX打开启动。&lt;/span&gt;
    TH0=&lt;span&gt;0X9C&lt;/span&gt;;    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;给定时器赋初值，定时100us，0x9c就是156，就是还需计数100次产生溢出，就是0.1ms&lt;/span&gt;
    TL0=&lt;span&gt;0X9C&lt;/span&gt;&lt;span&gt;;    
    ET0&lt;/span&gt;=&lt;span&gt;1&lt;/span&gt;;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;打开定时器0中断允许&lt;/span&gt;
    EA=&lt;span&gt;1&lt;/span&gt;;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;打开总中断&lt;/span&gt;
    TR0=&lt;span&gt;1&lt;/span&gt;;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;打开定时器&lt;/span&gt;
&lt;span&gt;}

&lt;/span&gt;&lt;span&gt;void&lt;/span&gt; DigDisplay() interrupt &lt;span&gt;1&lt;/span&gt;    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;中断入口函数，扫描以实现动态显示&lt;/span&gt;
&lt;span&gt;{
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;定时器在工作方式二会自动重装初，所以不用在赋值。
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;    TH0=0X9c;&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;给定时器赋初值，定时0.1ms
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;    TL0=0X00;&lt;/span&gt;
&lt;span&gt;
    count_flag&lt;/span&gt;++&lt;span&gt;;    
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(count_flag==&lt;span&gt;1&lt;/span&gt;&lt;span&gt;)
    {
        count_flag &lt;/span&gt;= &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
        DIG&lt;/span&gt;=&lt;span&gt;0&lt;/span&gt;&lt;span&gt;; 
        &lt;/span&gt;&lt;span&gt;switch&lt;/span&gt;(Num)     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;位选，选择点亮的数码管，&lt;/span&gt;
&lt;span&gt;        {
            &lt;/span&gt;&lt;span&gt;case&lt;/span&gt;(&lt;span&gt;7&lt;/span&gt;&lt;span&gt;):
                LSA&lt;/span&gt;=&lt;span&gt;0&lt;/span&gt;;LSB=&lt;span&gt;0&lt;/span&gt;;LSC=&lt;span&gt;0&lt;/span&gt;; &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;case&lt;/span&gt;(&lt;span&gt;6&lt;/span&gt;&lt;span&gt;):
                LSA&lt;/span&gt;=&lt;span&gt;1&lt;/span&gt;;LSB=&lt;span&gt;0&lt;/span&gt;;LSC=&lt;span&gt;0&lt;/span&gt;; &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;case&lt;/span&gt;(&lt;span&gt;5&lt;/span&gt;&lt;span&gt;):
                LSA&lt;/span&gt;=&lt;span&gt;0&lt;/span&gt;;LSB=&lt;span&gt;1&lt;/span&gt;;LSC=&lt;span&gt;0&lt;/span&gt;; &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;case&lt;/span&gt;(&lt;span&gt;4&lt;/span&gt;&lt;span&gt;):
                LSA&lt;/span&gt;=&lt;span&gt;1&lt;/span&gt;;LSB=&lt;span&gt;1&lt;/span&gt;;LSC=&lt;span&gt;0&lt;/span&gt;; &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;case&lt;/span&gt;(&lt;span&gt;3&lt;/span&gt;&lt;span&gt;):
                LSA&lt;/span&gt;=&lt;span&gt;0&lt;/span&gt;;LSB=&lt;span&gt;0&lt;/span&gt;;LSC=&lt;span&gt;1&lt;/span&gt;; &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;case&lt;/span&gt;(&lt;span&gt;2&lt;/span&gt;&lt;span&gt;):
                LSA&lt;/span&gt;=&lt;span&gt;1&lt;/span&gt;;LSB=&lt;span&gt;0&lt;/span&gt;;LSC=&lt;span&gt;1&lt;/span&gt;; &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;case&lt;/span&gt;(&lt;span&gt;1&lt;/span&gt;&lt;span&gt;):
                LSA&lt;/span&gt;=&lt;span&gt;0&lt;/span&gt;;LSB=&lt;span&gt;1&lt;/span&gt;;LSC=&lt;span&gt;1&lt;/span&gt;; &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;case&lt;/span&gt;(&lt;span&gt;0&lt;/span&gt;&lt;span&gt;):
                LSA&lt;/span&gt;=&lt;span&gt;1&lt;/span&gt;;LSB=&lt;span&gt;1&lt;/span&gt;;LSC=&lt;span&gt;1&lt;/span&gt;; &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;    
        }

        DIG&lt;/span&gt;=disp[Num]; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;段选，选择显示的数字。&lt;/span&gt;
        Num++&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(Num&amp;gt;&lt;span&gt;7&lt;/span&gt;&lt;span&gt;)
            Num&lt;/span&gt;=&lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
    }    
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt; 总结一下：&lt;/p&gt;
&lt;p&gt;这个芯片基本上不是很难，但是想要用的灵活，用的上手，还是得多练的，最好是先把上面的驱动程序对着时序图自己分析一遍，然后自己亲手编写一下。&lt;/p&gt;
&lt;p&gt;还有就是看数据手册，一个芯片所能用到的数据，在数据手册上基本都能查到。资料谁都能查到，就看怎么用了。&lt;/p&gt;
</description>
<pubDate>Sun, 22 Oct 2017 15:42:00 +0000</pubDate>
<dc:creator>Andrew_qian</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/qsyll0916/p/7712695.html</dc:identifier>
</item>
<item>
<title>Java数据结构和算法总结-字符串及高频面试题算法 - codingblock</title>
<link>http://www.cnblogs.com/codingblock/p/7712596.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/codingblock/p/7712596.html</guid>
<description>&lt;p&gt;　　&lt;strong&gt;前言：&lt;/strong&gt;周末闲来无事，在七月在线上看了看字符串相关算法的讲解视频，收货颇丰，跟着视频讲解简单做了一下笔记，方便以后翻阅复习同时也很乐意分享给大家。什么字符串在算法中有多重要之类的大路边上的客套话就不多说了，直接上笔记吧。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;一、字符串&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;ul data-source-line=&quot;2&quot; readability=&quot;-0.5&quot;&gt;&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;java：String内置类型，不可更改。（如需更改可考虑：StringBuffer, StringBuilder,char[]等）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p id=&quot;二-归类&quot; data-source-line=&quot;7&quot;&gt;&lt;strong&gt;&lt;span&gt;二、归类&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　字符串涉及到的相关题型通常会是以下几个方面：&lt;/p&gt;
&lt;ul data-source-line=&quot;8&quot;&gt;&lt;li&gt;概念理解：字典序&lt;/li&gt;
&lt;li&gt;简单操作：插入删除字符、旋转&lt;/li&gt;
&lt;li&gt;规则判断（罗马数字转换 是否是合法的整数、浮点数）&lt;/li&gt;
&lt;li&gt;数字运算（大数加法，二进制加法）&lt;/li&gt;
&lt;li&gt;排序、交换&lt;/li&gt;
&lt;li&gt;字符计数：变位词&lt;/li&gt;
&lt;li&gt;匹配（正则表达式、全串匹配、KMP、周期判断）&lt;/li&gt;
&lt;li&gt;动态规划（LCS、编辑距离、最长回文子串）&lt;/li&gt;
&lt;li&gt;搜索（单词变换、排列组合）&lt;/li&gt;
&lt;/ul&gt;&lt;p id=&quot;三-例题&quot; data-source-line=&quot;18&quot;&gt;&lt;span&gt;&lt;strong&gt;三、例题&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h4 id=&quot;1-交换把一个只包含01的串排序可交换任意两个数的位置最少需要多少次交换&quot; data-source-line=&quot;19&quot;&gt;1、交换：把一个只包含01的串排序，可交换任意两个数的位置，最少需要多少次交换？&lt;/h4&gt;
&lt;p data-source-line=&quot;20&quot;&gt;　　思路：从两头往中间扫荡，扫荡过程中在左边遇到1就和右边遇到的0交换位置，直接到左有下标相遇时结束。 具体代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;45&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] strs) {
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt; count = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt;[] arrays = &lt;span&gt;new&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;[] {&lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;1&lt;/span&gt;, &lt;span&gt;1&lt;/span&gt;, &lt;span&gt;1&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;1&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;1&lt;/span&gt;&lt;span&gt;};
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt; left = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt; right = arrays.length - &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;         &lt;span&gt;while&lt;/span&gt; (&lt;span&gt;true&lt;/span&gt;&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;             &lt;span&gt;while&lt;/span&gt; (arrays[left] == &lt;span&gt;0&lt;/span&gt;&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;                 left++&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;             &lt;span&gt;while&lt;/span&gt; (arrays[right] == &lt;span&gt;1&lt;/span&gt;&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;                 right--&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (left &amp;gt;=&lt;span&gt; right) {
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;                 &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;             } &lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;                 &lt;span&gt;int&lt;/span&gt; temp =&lt;span&gt; arrays[left];
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;                 arrays[left] =&lt;span&gt; arrays[right];
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;                 arrays[right] =&lt;span&gt; temp;
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;                 count++&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;         Logger.println(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;交换次数：&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; +&lt;span&gt; count);
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt;&lt;span&gt; array : arrays) {
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;             Logger.print(array + &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p data-source-line=&quot;50&quot;&gt;清晰起见，交换次数和排序后的的字符串输出如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;42&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
交换次数：3
0, 0, 0, 0, 0, 1, 1, 1, 1, 1,
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;2-字符串替换和复制删除一个字符串所有的a并且复制所有的b字符数组足够大&quot; data-source-line=&quot;56&quot;&gt;2、字符串替换和复制：删除一个字符串所有的a，并且复制所有的b（字符数组足够大）&lt;/h4&gt;
&lt;p data-source-line=&quot;57&quot;&gt;　　思路：详细思路见代码注释&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;50&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] strs) {
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;         &lt;span&gt;char&lt;/span&gt;[] input = &lt;span&gt;new&lt;/span&gt; &lt;span&gt;char&lt;/span&gt;[]{'a', 'b', 'c', 'd', 'a', 'f', 'a', 'b', 'c', 'd', 'b', 'b', 'a', 'b'&lt;span&gt;};
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;         &lt;span&gt;char&lt;/span&gt;[] chars = &lt;span&gt;new&lt;/span&gt; &lt;span&gt;char&lt;/span&gt;[50&lt;span&gt;];
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; j = 0; j &amp;lt; input.length; j++&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;             chars[j] =&lt;span&gt; input[j];
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;         Logger.println(&quot;操作前：&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;char&lt;/span&gt;&lt;span&gt; c:chars
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;                ) {
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;             Logger.print(c + &quot;, &quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt; n = 0&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt; countB = 0&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 1、删除a，用n当做新下标，循环遍历数组，凡是不是a的元素都放到新下标的位置，由于新n增长慢，老下标i增长快，所以元素不会被覆盖。
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 并且在删除a时顺便记录b的数量，以便下一步复制b时可以提前确定数组最终的最大的下标。&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = 0; chars[i] != '\u0000' &amp;amp;&amp;amp; i &amp;lt; chars.length; i++&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (chars[i] != 'a'&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;                 chars[n++] =&lt;span&gt; chars[i];
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (chars[i] == 'b'&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;                 countB++&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; 
&lt;span&gt;25&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2、复制b，由于在第一步中就已经知道了字符串中b的个数，这里就能确定最终字符串的最大下标，从最打下表开始倒着复制原字符串，碰到b时复制即可。&lt;/span&gt;
&lt;span&gt;26&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt; newMaxIndex = n + countB - 1&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; k = n - 1; k &amp;gt;= 0; k--&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;             chars[newMaxIndex--] =&lt;span&gt; chars[k];
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (chars[k] == 'b'&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;                 chars[newMaxIndex--] =&lt;span&gt; chars[k];
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; 
&lt;span&gt;34&lt;/span&gt;         Logger.println(&quot;\n操作后：&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;char&lt;/span&gt;&lt;span&gt; c:chars
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt; &lt;span&gt;                ) {
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt;             Logger.print(c + &quot;, &quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;3-交换星号一个字符串只包含-和数字请把它的-都放在开头&quot; data-source-line=&quot;100&quot;&gt;3、交换星号：一个字符串只包含 * 和数字，请把它的 * 都放在开头。&lt;/h4&gt;
&lt;p data-source-line=&quot;101&quot;&gt;　　如：1 * 2 * 4 * 3 =&amp;gt; * * * 1 2 4 3&lt;/p&gt;
&lt;ul data-source-line=&quot;102&quot;&gt;&lt;li&gt;方案一：倒着操作，从最大下标开始向前遍历，遇到非 * 号的元素则加入&quot;新&quot;下标中，遍历完毕后，j即代表 * 号的个数，然后将0-j赋值为 * 即可。（操作后，数字的相对位置不变） 代码如下：&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] strs) {
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;         &lt;span&gt;char&lt;/span&gt;[] chars = &lt;span&gt;new&lt;/span&gt; &lt;span&gt;char&lt;/span&gt;[]{'1', '*', '4', '3', '*', '5', '*'&lt;span&gt;};
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 方案一（操作后，数字的相对位置不变）
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 倒着操作：从最大下标开始向前遍历，遇到非*号的元素则加入&quot;新&quot;下标中，遍历完毕后，j即代表*号的个数，然后将0-j赋值为*即可。&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt; j = chars.length - 1&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = j; i &amp;gt;= 0; i--&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (chars[i] != '*'&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;                 chars[j--] =&lt;span&gt; chars[i];
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;         &lt;span&gt;while&lt;/span&gt; (j &amp;gt;= 0&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;             chars[j--] = '*'&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;char&lt;/span&gt;&lt;span&gt; c:chars
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;                ) {
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;             Logger.print(c + &quot;, &quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p data-source-line=&quot;125&quot;&gt;输出结果如下:&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
*, *, *, 1, 4, 3, 5,
&lt;/pre&gt;&lt;/div&gt;
&lt;ul data-source-line=&quot;130&quot;&gt;&lt;li&gt;方案二（操作后，数组的相对位置会变）快排划分，根据循环不变式（每一步循环之后条件都成立）:如本题[0..i-1]是*,[i..j-1]是数字,[j...n-1]未探测，循环时，随着i和j增加，维护此条件依然不变，代码如下:&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;cnblogs_code&quot; readability=&quot;45&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] strs) {
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;         &lt;span&gt;char&lt;/span&gt;[] chars = &lt;span&gt;new&lt;/span&gt; &lt;span&gt;char&lt;/span&gt;[]{'1', '*', '4', '3', '*', '5', '*'&lt;span&gt;};
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 方案二（操作后，数组的相对位置会变）
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 快排划分，根据循环不变式（每一步循环之后条件都成立）:如本题[0..i-1]是*,[i..j-1]是数字,[j...n-1]未探测，循环时，随着i和j增加，维护此条件依然不变&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = 0, j = 0; j &amp;lt; chars.length; ++&lt;span&gt;j) {
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (chars[j] == '*'&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;                 &lt;span&gt;char&lt;/span&gt; temp =&lt;span&gt; chars[i];
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;                 chars[i] =&lt;span&gt; chars[j];
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;                 chars[j] =&lt;span&gt; temp;
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;                 i++&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;char&lt;/span&gt;&lt;span&gt; c:chars
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;                ) {
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;             Logger.print(c + &quot;, &quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; } 
&lt;/pre&gt;&lt;/div&gt;
&lt;p data-source-line=&quot;151&quot;&gt;输出结果如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
*, *, *, 3, 1, 5, 4,
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;4-单词翻转&quot; data-source-line=&quot;156&quot;&gt;4、单词翻转&lt;/h4&gt;
&lt;p data-source-line=&quot;157&quot;&gt;　　例如：I am a student =》 student a am I&lt;/p&gt;
&lt;p&gt;　　思路：&lt;/p&gt;
&lt;p&gt;　　1、先将整个字符串翻转：&lt;code class=&quot;hljs&quot;&gt;如：I am &lt;span class=&quot;hljs-tag&quot;&gt;a student =》 tneduts &lt;span class=&quot;hljs-tag&quot;&gt;a ma I&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;　　2、通过空格判断出每个单词，然后对每个单词进行翻转&lt;/p&gt;
&lt;p&gt;　　代码如下:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] strs) {
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;         String input = &quot;I am a student&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;         &lt;span&gt;char&lt;/span&gt;[] chars =&lt;span&gt; input.toCharArray();
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt; i = 0&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt; j = chars.length - 1&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;         &lt;span&gt;while&lt;/span&gt; (i &amp;lt;&lt;span&gt; j) {
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;             swap(chars, i++, j--&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt; front = 1&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt; tail = 0&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;         &lt;span&gt;while&lt;/span&gt; (front &amp;lt;&lt;span&gt; chars.length) {
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (chars[front] == ' '&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;                 &lt;span&gt;int&lt;/span&gt; frontTemp = front - 1&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;                 &lt;span&gt;while&lt;/span&gt; (tail &amp;lt;&lt;span&gt; frontTemp) {
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;                     swap(chars, tail++, frontTemp--&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;                 tail = front + 1&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;             front++&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;char&lt;/span&gt;&lt;span&gt; c:chars
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;                ) {
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;            Logger.print(c);
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; 
&lt;span&gt;27&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; swap(&lt;span&gt;char&lt;/span&gt;[] chars, &lt;span&gt;int&lt;/span&gt; index1, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; index2) {
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;         &lt;span&gt;char&lt;/span&gt; temp =&lt;span&gt; chars[index1];
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;         chars[index1] =&lt;span&gt; chars[index2];
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;         chars[index2] =&lt;span&gt; temp;
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p data-source-line=&quot;197&quot;&gt;输出结果如下:&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
student a am I
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;5-子串变位词给定两个串a和b问b是否a的子串变位词&quot; data-source-line=&quot;202&quot;&gt;5、子串变位词：给定两个串a和b，问b是否a的子串变位词。&lt;/h4&gt;
&lt;p data-source-line=&quot;203&quot;&gt;　　例如：a=hello。b=lel，lle，ello都是true；b=elo是false&lt;/p&gt;
&lt;h4 id=&quot;思路&quot; data-source-line=&quot;204&quot;&gt;　　思路：&lt;/h4&gt;
&lt;ul data-source-line=&quot;205&quot;&gt;&lt;li&gt;
&lt;ul&gt;&lt;li&gt;　　一、首先需要了解对两个串是否是变位词的判断：&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;ol data-source-line=&quot;206&quot;&gt;&lt;li&gt;
&lt;ol&gt;&lt;li&gt;　　对两个串按统一规则排序，排序后若相等则是变位词。&lt;/li&gt;
&lt;li&gt;　　对两个串中出现的字母统计，两串中相同的字母出现的次数一致则为变位词。&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;ul data-source-line=&quot;208&quot;&gt;&lt;li&gt;
&lt;ul&gt;&lt;li&gt;　　二、然后从母串的第一个元素遍历，每往后遍历一个元素就把从当前元素开始到加上子串的长度的位置作为一个区间和子串比较是否是变位词。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p data-source-line=&quot;210&quot;&gt;最后一题综合前几个题用到的一些技巧，还是比较有趣的，这里就不贴出代码了，也激发一下大家的动手能力，感兴趣的童鞋不妨试着写一写。&lt;/p&gt;
&lt;p data-source-line=&quot;212&quot;&gt;以上问题如有不同思路欢迎交流。&lt;/p&gt;
</description>
<pubDate>Sun, 22 Oct 2017 15:32:00 +0000</pubDate>
<dc:creator>codingblock</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/codingblock/p/7712596.html</dc:identifier>
</item>
<item>
<title>Django项目搭建和配置总结 - 天宇之游</title>
<link>http://www.cnblogs.com/cwp-bg/p/7712635.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/cwp-bg/p/7712635.html</guid>
<description>&lt;h2 id=&quot;安装和创建虚拟环境&quot;&gt;安装和创建虚拟环境&lt;/h2&gt;
&lt;h2 id=&quot;安装django包&quot;&gt;安装Django包&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;先进入虚拟环境，在联网下执行：&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code&gt;pip install django==1.8.7&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;创建django项目&quot;&gt;创建django项目&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;进入虚拟环境，先创建一个文件用来存放项目，比如在桌面Desktop创建一个myprojects文件。&lt;/li&gt;
&lt;li&gt;进入myprojects文件，执行：&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code&gt;django-admin startproject 项目名称
例：
django-admin startproject mytest&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;会在文件下创建一个mytest的项目，其目录：&lt;br/&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1135090/201710/1135090-20171022232106615-2101051959.png&quot;/&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;
&lt;p&gt;目录说明：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;manage.py：一个命令行工具，可以说Django项目就是从这个文件开始执行的。&lt;/li&gt;
&lt;li&gt;_init _.py：一个空文件，表示mytest应该被看做一个python包；&lt;/li&gt;
&lt;li&gt;settings.py：整个项目的配置参数文件；&lt;/li&gt;
&lt;li&gt;urls.py：项目的URL声明，一般项目的顶级url正则匹配放置在这里；&lt;/li&gt;
&lt;li&gt;wsgi.py：项目与WSGI兼容的Web服务器入口；&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;创建应用&quot;&gt;创建应用&lt;/h2&gt;
&lt;pre&gt;
&lt;code&gt;python manage.py startapp 应用名称
例：
python manage.py startapp myapp
&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;
&lt;p&gt;创建后生成目录：&lt;br/&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1135090/201710/1135090-20171022232134631-530140812.png&quot;/&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;文件：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;admin.py: 模型注册和后台管理相关的文件；&lt;/li&gt;
&lt;li&gt;__init__.py: 应用应该被看做一个Python包；&lt;/li&gt;
&lt;li&gt;migrations: 用来放置应用模型的迁移脚本文件；&lt;/li&gt;
&lt;li&gt;models.py: 定义模型；&lt;/li&gt;
&lt;li&gt;test.py: 放置项目的测试文件；&lt;/li&gt;
&lt;li&gt;viems.py: 定义视图；&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;添加应用&quot;&gt;添加应用&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;由于项目管理着所有的应用，每个应用都要添加到项目的应用列表中；&lt;/li&gt;
&lt;li&gt;打开mytest/settings.py,INSTALLED_APPS下添加：&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1135090/201710/1135090-20171022232204959-1898790178.png&quot;/&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;python manage.py runserver ip:port
例：
python manage.py runserver&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1135090/201710/1135090-20171022232218209-1403842536.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;说明：ip和port可以分别设置服务器的ip和端口；省略不写默认ip为127.0.0.1；端口：8000；&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;打开浏览器输入http://127.0.0.1:8000，得到网页：&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1135090/201710/1135090-20171022232236740-1458733285.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意：当项目文件发生修改时，服务器会自动重启，不需要手动。关闭服务器ctrl+C。&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;配置数据库&quot;&gt;配置数据库&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;Django默认数据库sqlite3，其配置参数在mytest/setting.py文件下：&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1135090/201710/1135090-20171022232329381-512866165.png&quot;/&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;可以修改配置，换成需要连接的数据库：&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;以mysql为例，改成如下代码：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'mytest',  # 数据库的名字
        'USER': 'root',   # 用户名
        'PASSWORD': 'mysql',  # 密码
        'HOST': 'localhost',  # 主机
        'PORT': '3306',  # 端口
    }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;注意：这些参数默认数据库已经创建好，如果还没有数据库，需要登录mysql去创建。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;另外django连接mysql需要pymysql包的支持，所以先安装pymysql：&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code&gt;sudo pip install pymysql&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;安装完毕，需要导入到django中，打开应用mytest/__init__.py文件，加入代码：&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code&gt;import pymysql

pymysql.install_as_MySQLdb()  # 与mysql交互的函数&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;注意：一定要记得导入pymysql，否则无法连接数据库。&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;配置模板&quot;&gt;配置模板&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;直接在项目mytest文件夹下，创建名为templates的文件夹；&lt;/li&gt;
&lt;li&gt;在templates文件下创建与应用名字相同的文件夹myapp；&lt;/li&gt;
&lt;li&gt;这个应用的所有模板将放置在myapp文件夹下；&lt;/li&gt;
&lt;li&gt;将模板加入项目配置，在mytest/setting.py文件下：&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1135090/201710/1135090-20171022232348146-1194618255.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;至此：django项目开发配置基本完成。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;额外说明：如果在pycharm集成环境下创建的django项目，设置了应用和模板后，pycharm会自动添加应用和模板，这两步无需再手动操作。&lt;/strong&gt;&lt;/p&gt;
</description>
<pubDate>Sun, 22 Oct 2017 15:30:00 +0000</pubDate>
<dc:creator>天宇之游</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/cwp-bg/p/7712635.html</dc:identifier>
</item>
<item>
<title>js的解析顺序 作用域 严格模式 - 一步一步向上爬</title>
<link>http://www.cnblogs.com/z937741304/p/7712646.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/z937741304/p/7712646.html</guid>
<description>&lt;p&gt;一、javascript的解析顺序&lt;/p&gt;
&lt;p&gt;　　我们大家所理解的代码的执行顺序都是从上到下的，但是实际上确不是这样的。我们看一下下面的代码。&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
1&lt;span&gt; alert(a);
&lt;/span&gt;2 &lt;span&gt;var&lt;/span&gt; a = 1;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　如果执行顺序是从上到下的，在上面弹出一个a，浏览器会认为从上到下执行的，那么当它alert（a）的时候，他就会发现没有这个东西，那么他就会报错，但是实际上他弹出来的结果是undefined。返回值是undefined说明a没有被定义也就是没有赋值。下面我来讲解一下javascript的解析顺序。&lt;/p&gt;
&lt;p&gt;　　1.ES5中有声明意义的关键字&lt;/p&gt;
&lt;p&gt;　　　　var 　　会存在变量提升&lt;/p&gt;
&lt;p&gt;　　　　function　　也有声明变量的的作用。&lt;/p&gt;
&lt;p&gt;　　2.解析顺序&lt;/p&gt;
&lt;p&gt;　　　　1.找声明  var、function   声明：只是声明变量，而不包括赋值。&lt;/p&gt;
&lt;p&gt;　　　　2. 执行&lt;/p&gt;
&lt;p&gt;　　　　注意：以上两步 都遵循从上至下，执行的时候遇到等号，先看等号的右边。&lt;/p&gt;
&lt;p&gt;　　　　注意：当function声明的变量和var声明的变量重名时，function的变量权重会比var声明的要高。&lt;/p&gt;
&lt;p&gt;　　下面多来几个例子解析一下就清楚许多了，但是看例子之前要知道一下什么叫作用域。&lt;/p&gt;
&lt;p&gt;二、作用域&lt;/p&gt;
&lt;p&gt;　　作用域就是：起作用的范围分为下面两种&lt;/p&gt;
&lt;p&gt;　　1.全局作用域&lt;/p&gt;
&lt;p&gt;　　2.函数作用域&lt;/p&gt;
&lt;p&gt;　　　　他们两个的区别看下面的例子仔细分析。&lt;/p&gt;
&lt;p&gt;三、看几个例子解析一下执行顺序的步骤&lt;/p&gt;
&lt;p&gt;　1.　第一个例子：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; x = 5&lt;span&gt;;
    a();
    &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; a(){
        alert(x);
        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; x = 10&lt;span&gt;;
    }
alert(x);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　解析过程&lt;/p&gt;
&lt;p&gt;　　1,.寻找声明   (看全局作用域)&lt;/p&gt;
&lt;p&gt;　　　　var x;&lt;/p&gt;
&lt;p&gt;　　　　function a(){} &lt;/p&gt;
&lt;p&gt;　　2.执行&lt;/p&gt;
&lt;p&gt;　　　　x = 5;&lt;/p&gt;
&lt;p&gt;　　　　a()  -------------&amp;gt;执行到这个函数的过程中在重新进行以上两步&lt;/p&gt;
&lt;p&gt;　　　　　　　　　　　　1,寻找声明　var x;　　（函数作用域）&lt;/p&gt;
&lt;p&gt;　　　　　　　　　　　　2. 执行&lt;/p&gt;
&lt;p&gt;　　　　　　　　　　　　　　alert(x);  这个x在函数作用域中存在，并且还没有执行到赋值的那一步,那么弹出的东西就是undefined;&lt;/p&gt;
&lt;p&gt;　　　　　　　　　　　　　　x = 10;&lt;/p&gt;
&lt;p&gt;　　　　alert(x)    这里弹窗是全局变量  5；    &lt;/p&gt;
&lt;p&gt;　　所以浏览器弹窗的内容是   undefined  5&lt;/p&gt;
&lt;p&gt;　2.　第二个例子&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt; a()
 &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; a(){
    alert(x);
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; x = 10&lt;span&gt;;
 }
alert(x);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　解析过程 按照上面的例子一样分析&lt;/p&gt;
&lt;p&gt;　　1. 寻找声明&lt;/p&gt;
&lt;p&gt;　　　function a(){}&lt;/p&gt;
&lt;p&gt;　　2.执行&lt;/p&gt;
&lt;p&gt;　　　a()-------------------------&amp;gt;函数&lt;/p&gt;
&lt;p&gt;　　　　　　　　　　　　1.寻找声明&lt;/p&gt;
&lt;p&gt;　　　　　　　　　　　　　　var x;&lt;/p&gt;
&lt;p&gt;　　　　　　　　　　　　2.执行&lt;/p&gt;
&lt;p&gt;　　　　　　　　　　　　　　alert(x)    弹出未定义&lt;/p&gt;
&lt;p&gt;　　　　　　　　　　　　　　x = 10；&lt;/p&gt;
&lt;p&gt;　　alert(x);  这里的x会从全局中寻找x，但是发现并没有x，所 以浏览器会 报错     x is not  defined x没有被定义&lt;/p&gt;
&lt;p&gt;　　所以浏览器的弹出的内容是  undefined  报错&lt;/p&gt;

&lt;p&gt;　　我相信看了这两个例子的人都对这个解析过程都有了清除的了解，如果还是不太了解，建议重新看一次。&lt;/p&gt;
&lt;p&gt;　　下面介绍几个需要注意的地方， 直接上例子&lt;/p&gt;
&lt;p&gt;　3. 第三个例子&lt;/p&gt;
&lt;p&gt;　　前面讲到了当function声明的变量和var声明的变量重名时，function的变量权重会比var声明的要高。来一个例子证明一下&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;alert(a)

&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; a() {
    alert(&lt;/span&gt;&quot;函数&quot;&lt;span&gt;)
}

&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; a = 1&lt;span&gt;;  
alert(a)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　解析过程&lt;/p&gt;
&lt;p&gt;　　1.寻找声明&lt;/p&gt;
&lt;p&gt;　　　function a(){}&lt;/p&gt;
&lt;p&gt;　　　var a;&lt;/p&gt;
&lt;p&gt;　　2. 执行&lt;/p&gt;
&lt;p&gt;　　　　alert（a） 前面说到了function的声明比var声明的权重高，所有执行这个的时候他会弹出这个 函数块（函数体）&lt;/p&gt;
&lt;p&gt;　　　　a = 1;&lt;/p&gt;
&lt;p&gt;　　　　alert(a);     这里弹出的就是 1 了&lt;/p&gt;
&lt;p&gt;　　所以最后的结果就是 函数块 1；&lt;/p&gt;
&lt;p&gt;　4.第四个例子&lt;/p&gt;
&lt;p&gt;　　子作用域可以向父级作用域找变量，直到全局作用域为止，反之不行。 如果子作用域有同样的变量，那么他就会使用自己的，不会去找爸爸要。&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; a = 5&lt;span&gt;;

&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; fn() {
    alert(a)
}

fn()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　解析过程&lt;/p&gt;
&lt;p&gt;　　1.寻找声明&lt;/p&gt;
&lt;p&gt;　　　　var a;&lt;/p&gt;
&lt;p&gt;　　　　function fn(){}&lt;/p&gt;
&lt;p&gt;　　2.执行&lt;/p&gt;
&lt;p&gt;　　　　a = 5;&lt;/p&gt;
&lt;p&gt;　　　　fn()--------------------------------------&amp;gt; 函数&lt;/p&gt;
&lt;p&gt;　　　　　　　　　　　　　　　　　　　　1.找声明&lt;/p&gt;
&lt;p&gt;　　　　　　　　　　　　　　　　　　　　2.执行&lt;/p&gt;
&lt;p&gt;　　　　　　　　　　　　　　　　　　　　　alert(a);  他这里没有a 所以去找爸爸要。  a = 5；   所以弹窗是  5&lt;/p&gt;
&lt;p&gt;　　所以最后结果为  弹窗5&lt;/p&gt;
&lt;p&gt;　　下面看一下爸爸会不会去找儿子要东西&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;function&lt;/span&gt;&lt;span&gt; fn(){
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; b = 5&lt;span&gt;; 
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; b;    
}
fn();
alert(b);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　1.寻找声明&lt;/p&gt;
&lt;p&gt;　　　　function fn(){}&lt;/p&gt;
&lt;p&gt;　　2. 执行&lt;/p&gt;
&lt;p&gt;　　　　fn（）----------------------------------------&amp;gt; 函数&lt;/p&gt;
&lt;p&gt;　　　　　　　　　　　　　　　　　　　　　　1.寻找声明&lt;/p&gt;
&lt;p&gt;　　　　　　　　　　　　　　　　　　　　　　　　1.var b;&lt;/p&gt;
&lt;p&gt;　　　　　　　　　　　　　　　　　　　　　　2.执行&lt;/p&gt;
&lt;p&gt;　　　　　　　　　　　　　　　　　　　　　　　　return b;&lt;/p&gt;
&lt;p&gt;　　alert(b);   //我们看一下返回值是多少   b is not defined   他说b没有被定义，说明父作用域不可以向自作用域去寻找变量。&lt;/p&gt;

&lt;p&gt;　5. 第五个例子&lt;/p&gt;
&lt;p&gt;　　当一个变量无中生有时，不管从哪个作用域出来的，统统归到window下，下面看两个例子&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  fn();
  alert(a);
  &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; a = 0&lt;span&gt;;
  alert(a);
  &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; fn(){
     &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; a = 1&lt;span&gt;;
  }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这一个例子应该可以自己分析了  最后的结果是  undefined   0&lt;/p&gt;
&lt;p&gt;我们再来看一下下面这个你会很吃惊&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  fn()
  alert(a)
  &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; a = 0&lt;span&gt;;
  alert(a);
  &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; fn(){
      a &lt;/span&gt;= 1&lt;span&gt;;
  }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　明明都一样，我吃惊什么 返回值不是还是 undefined 和 0 吗&lt;/p&gt;
&lt;p&gt;　　但是你有没有发现倒数第二行 上面的声明了 下面的没有声明，来解析一波&lt;/p&gt;
&lt;p&gt;　　1.寻找变量&lt;/p&gt;
&lt;p&gt;　　　　var a;&lt;/p&gt;
&lt;p&gt;　　　　function fn(){}&lt;/p&gt;
&lt;p&gt;　　2.fn()----------------------------&amp;gt;函数&lt;/p&gt;
&lt;p&gt;　　　　　　　　　　a = 1;  这个时候就说到了那一点，无中生有的变量，统统归到window下面&lt;/p&gt;
&lt;p&gt;　　所以下面的执行过程&lt;/p&gt;
&lt;p&gt;　　alert(a)    这里的弹窗就是  1 了&lt;/p&gt;
&lt;p&gt;　　 a = 0;&lt;/p&gt;
&lt;p&gt;    　alert(a)   弹出 0&lt;/p&gt;
&lt;p&gt;　　所以最后的结果是   1       0 &lt;/p&gt;
&lt;p&gt;四、严格模式&lt;/p&gt;
&lt;p&gt;　　严格模式下的代码执行时，非常严格&lt;/p&gt;
&lt;p&gt;　　变量不允许无中生有&lt;/p&gt;
&lt;p&gt;　　意义：规范代码开发的流畅，逻辑&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&quot;use strict&quot;&lt;span&gt;
a &lt;/span&gt;= 1&lt;span&gt;；
alert(a);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;当我们写后面两句代码的时候不会报错和出现问题，但是当我们加上第一句代码的时候，我们在这样写的时候就会报错了。所以我们还是按照规范的标准来,提高自己的能力&lt;/p&gt;
&lt;p&gt;五、可能好多人做了上面的例子感觉不太过瘾，下面我再给出几个例子，可以自己去分析分析，我会在最后面给出答案。&lt;/p&gt;
&lt;p&gt;1.　第一个例子　   //  10 报错&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; a = 10&lt;span&gt;;
alert(a);
a()
&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; a(){
    alert(&lt;/span&gt;20&lt;span&gt;);
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;2.第二个例子   undefined 1 0&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; a = 0&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; fn(){
        alert(a);
        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; a = 1&lt;span&gt;;
        alert(a);
    }
    fn();
    alert(a);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;3.第三个例子 当同样的声明同样的名字重复时，后面写的会覆盖前面写的  //2  1  1  3&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt; a()
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; a = &lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
        alert(&lt;/span&gt;1&lt;span&gt;)
    }
    a();
    &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; a(){
        alert(&lt;/span&gt;2&lt;span&gt;);
    }
    a();
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; a = &lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
        alert(&lt;/span&gt;3&lt;span&gt;);
    }
    a()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 如果你看到我的文章可以收获一些知识，那么我会非常高兴的。&lt;/p&gt;

</description>
<pubDate>Sun, 22 Oct 2017 15:27:00 +0000</pubDate>
<dc:creator>一步一步向上爬</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/z937741304/p/7712646.html</dc:identifier>
</item>
<item>
<title>C#使用互斥量(Mutex)实现多进程并发操作时多进程间线程同步操作(进程同步)的简单示例代码及使用方法 - 弎吩锺熱℃</title>
<link>http://www.cnblogs.com/Tench/p/7710994.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/Tench/p/7710994.html</guid>
<description>&lt;h2&gt;&lt;span&gt;&lt;strong&gt;本文主要是实现操作系统级别的多进程间线程同步(进程同步)的示例代码及测试结果。代码经过测试，可供参考，也可直接使用。&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;承接上一篇博客的业务场景[&lt;a title=&quot;C#使用读写锁三行代码简单解决多线程并发写入文件时线程同步的问题&quot; href=&quot;http://www.cnblogs.com/Tench/p/CSharpSimpleFileWriteLock.html&quot; target=&quot;_blank&quot;&gt;C#使用读写锁三行代码简单解决多线程并发写入文件时线程同步的问题&lt;/a&gt;]。&lt;/p&gt;
&lt;p&gt;随着服务进程的增多，光凭&lt;strong&gt;进程内的线程同步已经不能满足现在的需求&lt;/strong&gt;，导致&lt;strong&gt;多进程同时&lt;/strong&gt;写入同一个文件时，一样提示文件被占用的问题。&lt;/p&gt;
&lt;p&gt;在这种场景下，&lt;strong&gt;跨进程级的锁&lt;/strong&gt;是不可避免的。在&lt;a title=&quot;线程处理对象和功能&quot; href=&quot;https://msdn.microsoft.com/zh-cn/library/9xyf641a(v=vs.100).aspx&quot; target=&quot;_blank&quot;&gt;.NET提供的参考&lt;/a&gt;中，进程锁都继承了&lt;a title=&quot;封装等待对共享资源的独占访问的操作系统特定的对象。&quot; href=&quot;https://msdn.microsoft.com/zh-cn/library/system.threading.waithandle(v=vs.100).aspx&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;System.Threading.WaitHandle类&lt;/strong&gt;&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;而在本文中针对单个文件&lt;strong&gt;同一时间仅允许单个进程（线程）操作&lt;/strong&gt;的场景，&lt;a title=&quot;一个同步基元，也可用于进程间同步。&quot; href=&quot;https://msdn.microsoft.com/zh-cn/library/system.threading.mutex(v=vs.100).aspx&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;System.Threading.Mutex类&lt;/strong&gt;&lt;/a&gt;&lt;span&gt;无疑是最简单也是最合适的选择&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;该类型的对象&lt;strong&gt;可以使用命名(字符串)互斥量实现当前会话级&lt;/strong&gt;&lt;strong&gt;或操作系统级&lt;/strong&gt;&lt;strong&gt;的同步需求&lt;/strong&gt;。我选择了操作系统级别的同步编写示例，因为覆盖面更广。&lt;/p&gt;



&lt;div class=&quot;cnblogs_code&quot; readability=&quot;61&quot;&gt;
&lt;pre&gt;
&lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; WaitHandleExample
{
    &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Program
    {
        &lt;/span&gt;&lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; Main(&lt;span&gt;string&lt;/span&gt;&lt;span&gt;[] args)
        {
            &lt;/span&gt;&lt;span&gt;#region&lt;/span&gt; 简单使用
            &lt;span&gt;//&lt;/span&gt;&lt;span&gt;var mutexKey = MutexExample.GetFilePathMutexKey(&quot;文件路径&quot;);
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;MutexExample.MutexExec(mutexKey, () =&amp;gt;
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;{
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;    Console.WriteLine(&quot;需要进程同步执行的代码&quot;);
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;});&lt;/span&gt;
            &lt;span&gt;#endregion&lt;/span&gt;

            &lt;span&gt;#region&lt;/span&gt; 测试代码
            &lt;span&gt;var&lt;/span&gt; filePath = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;test.log&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;).ToUpper();
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; mutexKey =&lt;span&gt; MutexExample.GetFilePathMutexKey(filePath);

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;同时开启N个写入线程&lt;/span&gt;
            Parallel.For(&lt;span&gt;0&lt;/span&gt;, LogCount, e =&amp;gt;&lt;span&gt;
            {
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;没使用互斥锁操作写入，大量写入错误；FileStream包含FileShare的构造函数也仅实现了进程内的线程同步，多进程同时写入时也会出错
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;WriteLog(filePath);

                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;使用互斥锁操作写入，由于同一时间仅有一个线程操作，所以不会出错&lt;/span&gt;
                MutexExample.MutexExec(mutexKey, () =&amp;gt;&lt;span&gt;
                {
                    WriteLog(filePath);
                });
            });

            Console.WriteLine(&lt;/span&gt;&lt;span&gt;string&lt;/span&gt;.Format(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Log Count:{0}.\t\tWrited Count:{1}.\tFailed Count:{2}.&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, LogCount.ToString(), WritedCount.ToString(), FailedCount.ToString()));
            Console.Read();
            &lt;/span&gt;&lt;span&gt;#endregion&lt;/span&gt;&lt;span&gt;
        }


        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; C#互斥量使用示例代码
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;remarks&amp;gt;&lt;/span&gt;&lt;span&gt;已在经过测试并上线运行，可直接使用&lt;/span&gt;&lt;span&gt;&amp;lt;/remarks&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; MutexExample
        {
            &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
            &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 进程间同步执行的简单例子
            &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
            &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;action&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;同步处理代码&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
            &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;mutexKey&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;操作系统级的同步键
            &lt;/span&gt;&lt;span&gt;///&lt;/span&gt;&lt;span&gt; (如果将 name 指定为 null 或空字符串，则创建一个局部互斥体。 
            &lt;/span&gt;&lt;span&gt;///&lt;/span&gt;&lt;span&gt; 如果名称以前缀“Global\”开头，则 mutex 在所有终端服务器会话中均为可见。 
            &lt;/span&gt;&lt;span&gt;///&lt;/span&gt;&lt;span&gt; 如果名称以前缀“Local\”开头，则 mutex 仅在创建它的终端服务器会话中可见。 
            &lt;/span&gt;&lt;span&gt;///&lt;/span&gt;&lt;span&gt; 如果创建已命名 mutex 时不指定前缀，则它将采用前缀“Local\”。)&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
            &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;remarks&amp;gt;&lt;/span&gt;&lt;span&gt;不重试且不考虑异常情况处理的简单例子&lt;/span&gt;&lt;span&gt;&amp;lt;/remarks&amp;gt;&lt;/span&gt;
            [Obsolete(error: &lt;span&gt;false&lt;/span&gt;, message: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;请使用MutexExec&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)]
            &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; MutexExecEasy(&lt;span&gt;string&lt;/span&gt;&lt;span&gt; mutexKey, Action action)
            {
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;声明一个已命名的互斥体，实现进程间同步；该命名互斥体不存在则自动创建，已存在则直接获取&lt;/span&gt;
                &lt;span&gt;using&lt;/span&gt; (Mutex mut = &lt;span&gt;new&lt;/span&gt; Mutex(&lt;span&gt;false&lt;/span&gt;&lt;span&gt;, mutexKey))
                {
                    &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt;
                    {
                        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;上锁，其他线程需等待释放锁之后才能执行处理；若其他线程已经上锁或优先上锁，则先等待其他线程执行完毕&lt;/span&gt;
&lt;span&gt;                        mut.WaitOne();
                        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;执行处理代码（在调用WaitHandle.WaitOne至WaitHandle.ReleaseMutex的时间段里，只有一个线程处理，其他线程都得等待释放锁后才能执行该代码段）&lt;/span&gt;
&lt;span&gt;                        action();
                    }
                    &lt;/span&gt;&lt;span&gt;finally&lt;/span&gt;&lt;span&gt;
                    {
                        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;释放锁，让其他进程(或线程)得以继续执行&lt;/span&gt;
&lt;span&gt;                        mut.ReleaseMutex();
                    }
                }
            }


            &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
            &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 获取文件名对应的进程同步键
            &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
            &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;filePath&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;文件路径(请注意大小写及空格)&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
            &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&lt;/span&gt;&lt;span&gt;进程同步键(互斥体名称)&lt;/span&gt;&lt;span&gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
            &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; GetFilePathMutexKey(&lt;span&gt;string&lt;/span&gt;&lt;span&gt; filePath)
            {
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;生成文件对应的同步键，可自定义格式（互斥体名称对特殊字符支持不友好，遂转换为BASE64格式字符串）&lt;/span&gt;
                &lt;span&gt;var&lt;/span&gt; fileKey = Convert.ToBase64String(Encoding.Default.GetBytes(&lt;span&gt;string&lt;/span&gt;.Format(&lt;span&gt;@&quot;&lt;/span&gt;&lt;span&gt;FILE\{0}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, filePath)));
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;转换为操作系统级的同步键&lt;/span&gt;
                &lt;span&gt;var&lt;/span&gt; mutexKey = &lt;span&gt;string&lt;/span&gt;.Format(&lt;span&gt;@&quot;&lt;/span&gt;&lt;span&gt;Global\{0}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, fileKey);
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; mutexKey;
            }

            &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
            &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 进程间同步执行
            &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
            &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;mutexKey&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;操作系统级的同步键
            &lt;/span&gt;&lt;span&gt;///&lt;/span&gt;&lt;span&gt; (如果将 name 指定为 null 或空字符串，则创建一个局部互斥体。 
            &lt;/span&gt;&lt;span&gt;///&lt;/span&gt;&lt;span&gt; 如果名称以前缀“Global\”开头，则 mutex 在所有终端服务器会话中均为可见。 
            &lt;/span&gt;&lt;span&gt;///&lt;/span&gt;&lt;span&gt; 如果名称以前缀“Local\”开头，则 mutex 仅在创建它的终端服务器会话中可见。 
            &lt;/span&gt;&lt;span&gt;///&lt;/span&gt;&lt;span&gt; 如果创建已命名 mutex 时不指定前缀，则它将采用前缀“Local\”。)&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
            &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;action&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;同步处理操作&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
            &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; MutexExec(&lt;span&gt;string&lt;/span&gt;&lt;span&gt; mutexKey, Action action)
            {
                MutexExec(mutexKey: mutexKey, action: action, recursive: &lt;/span&gt;&lt;span&gt;false&lt;/span&gt;&lt;span&gt;);
            }

            &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
            &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 进程间同步执行
            &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
            &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;mutexKey&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;操作系统级的同步键
            &lt;/span&gt;&lt;span&gt;///&lt;/span&gt;&lt;span&gt; (如果将 name 指定为 null 或空字符串，则创建一个局部互斥体。 
            &lt;/span&gt;&lt;span&gt;///&lt;/span&gt;&lt;span&gt; 如果名称以前缀“Global\”开头，则 mutex 在所有终端服务器会话中均为可见。 
            &lt;/span&gt;&lt;span&gt;///&lt;/span&gt;&lt;span&gt; 如果名称以前缀“Local\”开头，则 mutex 仅在创建它的终端服务器会话中可见。 
            &lt;/span&gt;&lt;span&gt;///&lt;/span&gt;&lt;span&gt; 如果创建已命名 mutex 时不指定前缀，则它将采用前缀“Local\”。)&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
            &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;action&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;同步处理操作&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
            &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;recursive&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;指示当前调用是否为递归处理，递归处理时检测到异常则抛出异常，避免进入无限递归&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
            &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; MutexExec(&lt;span&gt;string&lt;/span&gt; mutexKey, Action action, &lt;span&gt;bool&lt;/span&gt;&lt;span&gt; recursive)
            {
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;声明一个已命名的互斥体，实现进程间同步；该命名互斥体不存在则自动创建，已存在则直接获取
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;initiallyOwned: false：默认当前线程并不拥有已存在互斥体的所属权，即默认本线程并非为首次创建该命名互斥体的线程
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;注意：并发声明同名的命名互斥体时，若间隔时间过短，则可能同时声明了多个名称相同的互斥体，并且同名的多个互斥体之间并不同步，高并发用户请另行处理&lt;/span&gt;
                &lt;span&gt;using&lt;/span&gt; (Mutex mut = &lt;span&gt;new&lt;/span&gt; Mutex(initiallyOwned: &lt;span&gt;false&lt;/span&gt;&lt;span&gt;, name: mutexKey))
                {
                    &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt;
                    {
                        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;上锁，其他线程需等待释放锁之后才能执行处理；若其他线程已经上锁或优先上锁，则先等待其他线程执行完毕&lt;/span&gt;
&lt;span&gt;                        mut.WaitOne();
                        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;执行处理代码（在调用WaitHandle.WaitOne至WaitHandle.ReleaseMutex的时间段里，只有一个线程处理，其他线程都得等待释放锁后才能执行该代码段）&lt;/span&gt;
&lt;span&gt;                        action();
                    }
                    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;当其他进程已上锁且没有正常释放互斥锁时(譬如进程忽然关闭或退出)，则会抛出AbandonedMutexException异常&lt;/span&gt;
                    &lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (AbandonedMutexException ex)
                    {
                        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;避免进入无限递归&lt;/span&gt;
                        &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (recursive)
                            &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt;&lt;span&gt; ex;

                        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;非递归调用，由其他进程抛出互斥锁解锁异常时，重试执行&lt;/span&gt;
                        MutexExec(mutexKey: mutexKey, action: action, recursive: &lt;span&gt;true&lt;/span&gt;&lt;span&gt;);
                    }
                    &lt;/span&gt;&lt;span&gt;finally&lt;/span&gt;&lt;span&gt;
                    {
                        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;释放锁，让其他进程(或线程)得以继续执行&lt;/span&gt;
&lt;span&gt;                        mut.ReleaseMutex();
                    }
                }
            }
        }


        &lt;/span&gt;&lt;span&gt;#region&lt;/span&gt; 测试写文件的代码
        &lt;span&gt;static&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; LogCount = &lt;span&gt;500&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;static&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; WritedCount = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;static&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; FailedCount = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; WriteLog(&lt;span&gt;string&lt;/span&gt;&lt;span&gt; logFilePath)
        {
            &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt;
            {
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; now =&lt;span&gt; DateTime.Now;
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; logContent = &lt;span&gt;string&lt;/span&gt;.Format(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Tid: {0}{1} {2}.{3}\r\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, Thread.CurrentThread.ManagedThreadId.ToString().PadRight(&lt;span&gt;4&lt;/span&gt;&lt;span&gt;), now.ToLongDateString(), now.ToLongTimeString(), now.Millisecond.ToString());
                File.AppendAllText(logFilePath, logContent);
                WritedCount&lt;/span&gt;++&lt;span&gt;;
            }
            &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception ex)
            {
                Console.WriteLine(ex.Message);
                FailedCount&lt;/span&gt;++&lt;span&gt;;
            }
        }
        &lt;/span&gt;&lt;span&gt;#endregion&lt;/span&gt;&lt;span&gt;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;&lt;span&gt;测试不使用进程同步，多进程多线程同时写入文件：&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/445916/201710/445916-20171022213656334-1090052964.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/445916/201710/445916-20171022213749615-104082233.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;测试结果：&lt;strong&gt;6个进程同时进行3000次写入请求，仅成功写入277次&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h2&gt;&lt;span&gt;测试使用互斥量进行进程同步，多进程多线程同时写入文件：&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/445916/201710/445916-20171022213939646-1268625168.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/445916/201710/445916-20171022213949834-2022182249.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;测试结果：&lt;strong&gt;6个进程同时进行&lt;/strong&gt;&lt;strong&gt;3000次写入请求，全部成功写入&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h2&gt;&lt;strong&gt;&lt;span&gt;补充：&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;进程同步的资源消耗及效率比线程同步要差得多，请根据实际场景合理使用。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;本文虽然是用写入文件作为示例，但进程同步的代码使用场景与文件操作无关。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;a title=&quot;限制可同时访问某一资源或资源池的线程数。&quot; href=&quot;https://msdn.microsoft.com/zh-cn/library/system.threading.semaphore(v=vs.100).aspx&quot; target=&quot;_blank&quot;&gt;Semaphore类&lt;/a&gt;(信号灯)虽然可以限制同时操作的线程数，甚至把最大同时操作数设置为1时，行为与&lt;a title=&quot;一个同步基元，也可用于进程间同步。&quot; href=&quot;http://www.cnblogs.com/Tench/p/封装等待对共享资源的独占访问的操作系统特定的对象。&quot; target=&quot;_blank&quot;&gt;Mutex类&lt;/a&gt;(互斥量)类似；但是由于信号灯在其他进程中出现异常退出时并不能接收到异常通知，只能通过等待超时触发异常，并不适合现在的场景，所以并没讲述。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;关于进程同步的其他深入了解及应用，请参阅&lt;a title=&quot;线程处理对象和功能&quot; href=&quot;https://msdn.microsoft.com/zh-cn/library/9xyf641a(v=vs.100).aspx&quot; target=&quot;_blank&quot;&gt;其他资料&lt;/a&gt;。&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Sun, 22 Oct 2017 14:15:00 +0000</pubDate>
<dc:creator>弎吩锺熱℃</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/Tench/p/7710994.html</dc:identifier>
</item>
<item>
<title>shell编程/字库裁剪(2)——编程过程 - 窗户</title>
<link>http://www.cnblogs.com/Colin-Cai/p/7704085.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/Colin-Cai/p/7704085.html</guid>
<description>&lt;p&gt;&lt;span&gt;　　之所以想用shell实现，是因为shell是UNIX/LINUX的工作语言，可以实现很强大的功能，所以借此话题顺带讲一下shell编程的思路。可是现实是，很多人在搞linux的同时，却写不出一个稍微复杂那么一点点的shell程序，甚至包括一些运维人员。在chinaunix的shell版里，基本会成周期性的问一些相同的简单问题，我们称之位月经贴。我实在不知道，难道是这个世界变化了，我们以前所遵守的一些东西已经过时了？从我的经验来，学习一些shell还是很有必要的，我验证很多时候都使用shell，因为方便。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;　　shell是&lt;span&gt;&lt;strong&gt;&lt;span&gt;胶水语言&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;，里面按理可以用其他所有的程序做零件，但传统上来说，我们还是使用POSIX下定义的一些工具，这些算传统的工具。就嵌入的编程语言来说，awk/sed/bc这些算是shell“本家”的，而python/perl这些，不太像是shell本家的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;　　我们构思我们的shell的功能，首先要准备的基本材料有如下：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;　　以上的准备材料应该已经基本充足，但有的时候会要涉及到多种字体乃至多种尺寸，可在本文所给出程序的基础上扩展。另外，第三个文件我当时使用的时候是直接对于显示所用的C语言文件处理所得，截取两个双引号之间的部分即可，之所以不选择C语言文件里所有的GB2312编码汉字，是因为可能会包含注释。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;　　那么处理出来应该是一个完整的C语言文件，我们根据第一节中的讨论，自然也可以想的出来这个C语言文件中包含了：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;　　(5)给出一个函数，取给定汉字的字体的首地址，使用二分查找法。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;　　其中，(2)、(3)两个数组用结构体的方式合为一个数组，C语言的可读性更强一些。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;　　那么，和其他的编程一样，我们先确定这个程序的框架：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;　　&lt;span&gt;最开始定义一堆变量，当然，也可以采用命令行的方式，可能更加灵活一些，不过写的复杂了一些。最后三行就是产生C语言代码的，其中第二行是产生ASCII字符字体数组，相对简单一些，最后一行是生成那两个C语言函数，这基本上是C语言是什么样，这个地方就差不多长什么样，当然如果二分法不懂，或者写个半天写不出来，建议应该回头补一补数据结构，它是基础 。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;　　第一行是产生汉字编码、字体数组的，这个过程会比较复杂一些，我希望code_and_offset ${chinese_example}从提取出我所希望的汉字，并且编码从小到大，以便后面处理。比如加入我希望裁剪的汉字文本是“人工智能真厉害”，那么这个的输出应该是&lt;/span&gt;&lt;span&gt;　　&lt;/span&gt;&lt;/p&gt;&lt;p&gt;flag 185 164 2259&lt;br/&gt;flag 186 166 2355&lt;br/&gt;flag 192 247 3000&lt;br/&gt;flag 196 220 3349&lt;br/&gt;flag 200 203 3708&lt;br/&gt;flag 213 230 4957&lt;br/&gt;flag 214 199 5020&lt;/p&gt;&lt;p&gt;&lt;span&gt;　　前面加一个flag是为了和print_font输出区分开来，以便过管道处理的时候可以方便的区分输入的意思。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;　　printt_font是想把整个字库文件变成可见字符，然后切割成一个完整的汉字字体一行。这个用od单条命令就可以很方便的生成如下格式：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;...&lt;/p&gt;&lt;p&gt;00 00 18 00 18 00 18 00 18 00 18 00 18 00 18 00 18 00 18 00 18 00 00 00 18 00 18 00 00 00 00 00&lt;br/&gt;00 00 02 40 02 40 02 40 02 40 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00&lt;br/&gt;00 00 02 20 02 20 02 20 02 20 3f fc 04 40 04 40 04 40 04 40 3f fc 08 80 08 80 08 80 08 80 00 00&lt;br/&gt;00 00 38 38 10 10 08 20 04 40 02 80 02 80 01 00 01 00 0f e0 01 00 01 00 01 00 01 00 03 80 00 00&lt;br/&gt;00 00 18 04 24 08 24 10 24 20 24 40 24 80 19 00 02 60 04 90 08 90 10 90 20 90 40 90 00 60 00 00&lt;br/&gt;00 00 06 00 09 00 10 80 10 80 09 00 0a 00 04 00 1c 00 22 70 41 20 40 a0 40 44 21 a4 1e 18 00 00&lt;br/&gt;00 00 10 00 10 00 10 00 20 00 20 00 40 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00&lt;br/&gt;00 0c 00 10 00 20 00 40 00 40 00 80 00 80 00 80 00 80 00 80 00 80 00 40 00 40 00 20 00 10 00 0c&lt;br/&gt;60 00 10 00 08 00 04 00 04 00 02 00 02 00 02 00 02 00 02 00 02 00 04 00 04 00 08 00 10 00 60 00&lt;br/&gt;00 00 01 00 01 00 01 00 21 08 11 10 09 20 05 40 03 80 02 80 04 40 08 20 10 10 00 00 00 00 00 00&lt;/p&gt;&lt;p&gt;...&lt;/p&gt;&lt;p&gt;&lt;span&gt;　　然后这两者的输出过一个管道，处理成每一行都是一个不同的所需要的汉字，filter做了这样一个过滤。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;185 164 00 00 00 08 7f fc 01 00 01 00 01 00 01 00 01 00 01 00 01 00 01 00 01 00 01 04 ff fe 00 00 00 00&lt;br/&gt;186 166 02 00 01 00 7f fe 41 02 9f f4 01 00 1f f0 01 00 7f fc 01 00 1f f0 10 10 10 10 10 10 1f f0 10 10&lt;br/&gt;192 247 00 08 3f fc 20 00 20 04 3f fe 22 00 22 08 23 fc 22 08 22 08 22 08 22 08 44 08 44 88 88 50 10 20&lt;br/&gt;196 220 10 80 10 88 24 98 44 a0 fe c0 02 84 7c 84 44 7c 44 00 7c 88 44 98 44 a0 7c c0 44 82 54 82 48 7e&lt;br/&gt;200 203 01 00 01 00 01 00 01 00 01 00 01 00 01 00 02 80 02 80 02 80 04 40 04 40 08 20 10 10 20 0e 40 04&lt;br/&gt;213 230 01 00 01 08 7f fc 01 00 1f f0 10 10 1f f0 10 10 1f f0 10 10 1f f0 10 10 ff fe 08 20 10 18 20 08&lt;br/&gt;214 199 20 00 22 04 3f 7e 48 44 08 44 ff c4 10 44 14 7c 22 44 42 10 9f f8 10 10 1f f0 10 10 1f f0 10 10&lt;/p&gt;&lt;p&gt;&lt;span&gt;　　最近回头再想想管道的思维，觉得这才是一个很关键的分解，mapreduce虽然google已经不太好意思谈它了，我们也未必要觉得这是大数据的经典，一个这么粗糙的模型却被吹了十来年，感觉像浮夸风。但mapreduce这样的思想其实早已伴随我们几十年，其实这里面也有管道流的思想。甚至有次在论坛上看到有人提出，并行基本就两种基本手段，一种流水线，另一种mapreduce，想想似乎也有点道理。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;　　扯远了，先分了块之后，再为每个函数填上代码，反复测试，这也是一个有点复杂的过程，我程序中使用了大量的awk，因为它处理文本的确很方便。代码不重要，过程中的想法才重要。&lt;/span&gt;&lt;/p&gt;&lt;div readability=&quot;1795&quot;&gt;
&lt;pre&gt;
typedef &lt;span&gt;struct&lt;/span&gt;&lt;span&gt;{
        unsigned &lt;/span&gt;&lt;span&gt;char&lt;/span&gt;&lt;span&gt; GBH;
        unsigned &lt;/span&gt;&lt;span&gt;char&lt;/span&gt;&lt;span&gt; GBL;
        unsigned &lt;/span&gt;&lt;span&gt;char&lt;/span&gt; font[&lt;span&gt;32&lt;/span&gt;&lt;span&gt;];
} chinese_font_t;

&lt;/span&gt;&lt;span&gt;static&lt;/span&gt; &lt;span&gt;const&lt;/span&gt; chinese_font_t chinese_font[] =&lt;span&gt; {
        { &lt;/span&gt;&lt;span&gt;0xb9&lt;/span&gt;, &lt;span&gt;0xa4&lt;/span&gt;, { &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x08&lt;/span&gt;, &lt;span&gt;0x7f&lt;/span&gt;, &lt;span&gt;0xfc&lt;/span&gt;, &lt;span&gt;0x01&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x01&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x01&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x01&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x01&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x01&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x01&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x01&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x01&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x01&lt;/span&gt;, &lt;span&gt;0x04&lt;/span&gt;, &lt;span&gt;0xff&lt;/span&gt;, &lt;span&gt;0xfe&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;&lt;span&gt;}},
        { &lt;/span&gt;&lt;span&gt;0xba&lt;/span&gt;, &lt;span&gt;0xa6&lt;/span&gt;, { &lt;span&gt;0x02&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x01&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x7f&lt;/span&gt;, &lt;span&gt;0xfe&lt;/span&gt;, &lt;span&gt;0x41&lt;/span&gt;, &lt;span&gt;0x02&lt;/span&gt;, &lt;span&gt;0x9f&lt;/span&gt;, &lt;span&gt;0xf4&lt;/span&gt;, &lt;span&gt;0x01&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x1f&lt;/span&gt;, &lt;span&gt;0xf0&lt;/span&gt;, &lt;span&gt;0x01&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x7f&lt;/span&gt;, &lt;span&gt;0xfc&lt;/span&gt;, &lt;span&gt;0x01&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x1f&lt;/span&gt;, &lt;span&gt;0xf0&lt;/span&gt;, &lt;span&gt;0x10&lt;/span&gt;, &lt;span&gt;0x10&lt;/span&gt;, &lt;span&gt;0x10&lt;/span&gt;, &lt;span&gt;0x10&lt;/span&gt;, &lt;span&gt;0x10&lt;/span&gt;, &lt;span&gt;0x10&lt;/span&gt;, &lt;span&gt;0x1f&lt;/span&gt;, &lt;span&gt;0xf0&lt;/span&gt;, &lt;span&gt;0x10&lt;/span&gt;, &lt;span&gt;0x10&lt;/span&gt;&lt;span&gt;}},
        { &lt;/span&gt;&lt;span&gt;0xc0&lt;/span&gt;, &lt;span&gt;0xf7&lt;/span&gt;, { &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x08&lt;/span&gt;, &lt;span&gt;0x3f&lt;/span&gt;, &lt;span&gt;0xfc&lt;/span&gt;, &lt;span&gt;0x20&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x20&lt;/span&gt;, &lt;span&gt;0x04&lt;/span&gt;, &lt;span&gt;0x3f&lt;/span&gt;, &lt;span&gt;0xfe&lt;/span&gt;, &lt;span&gt;0x22&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x22&lt;/span&gt;, &lt;span&gt;0x08&lt;/span&gt;, &lt;span&gt;0x23&lt;/span&gt;, &lt;span&gt;0xfc&lt;/span&gt;, &lt;span&gt;0x22&lt;/span&gt;, &lt;span&gt;0x08&lt;/span&gt;, &lt;span&gt;0x22&lt;/span&gt;, &lt;span&gt;0x08&lt;/span&gt;, &lt;span&gt;0x22&lt;/span&gt;, &lt;span&gt;0x08&lt;/span&gt;, &lt;span&gt;0x22&lt;/span&gt;, &lt;span&gt;0x08&lt;/span&gt;, &lt;span&gt;0x44&lt;/span&gt;, &lt;span&gt;0x08&lt;/span&gt;, &lt;span&gt;0x44&lt;/span&gt;, &lt;span&gt;0x88&lt;/span&gt;, &lt;span&gt;0x88&lt;/span&gt;, &lt;span&gt;0x50&lt;/span&gt;, &lt;span&gt;0x10&lt;/span&gt;, &lt;span&gt;0x20&lt;/span&gt;&lt;span&gt;}},
        { &lt;/span&gt;&lt;span&gt;0xc4&lt;/span&gt;, &lt;span&gt;0xdc&lt;/span&gt;, { &lt;span&gt;0x10&lt;/span&gt;, &lt;span&gt;0x80&lt;/span&gt;, &lt;span&gt;0x10&lt;/span&gt;, &lt;span&gt;0x88&lt;/span&gt;, &lt;span&gt;0x24&lt;/span&gt;, &lt;span&gt;0x98&lt;/span&gt;, &lt;span&gt;0x44&lt;/span&gt;, &lt;span&gt;0xa0&lt;/span&gt;, &lt;span&gt;0xfe&lt;/span&gt;, &lt;span&gt;0xc0&lt;/span&gt;, &lt;span&gt;0x02&lt;/span&gt;, &lt;span&gt;0x84&lt;/span&gt;, &lt;span&gt;0x7c&lt;/span&gt;, &lt;span&gt;0x84&lt;/span&gt;, &lt;span&gt;0x44&lt;/span&gt;, &lt;span&gt;0x7c&lt;/span&gt;, &lt;span&gt;0x44&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x7c&lt;/span&gt;, &lt;span&gt;0x88&lt;/span&gt;, &lt;span&gt;0x44&lt;/span&gt;, &lt;span&gt;0x98&lt;/span&gt;, &lt;span&gt;0x44&lt;/span&gt;, &lt;span&gt;0xa0&lt;/span&gt;, &lt;span&gt;0x7c&lt;/span&gt;, &lt;span&gt;0xc0&lt;/span&gt;, &lt;span&gt;0x44&lt;/span&gt;, &lt;span&gt;0x82&lt;/span&gt;, &lt;span&gt;0x54&lt;/span&gt;, &lt;span&gt;0x82&lt;/span&gt;, &lt;span&gt;0x48&lt;/span&gt;, &lt;span&gt;0x7e&lt;/span&gt;&lt;span&gt;}},
        { &lt;/span&gt;&lt;span&gt;0xc8&lt;/span&gt;, &lt;span&gt;0xcb&lt;/span&gt;, { &lt;span&gt;0x01&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x01&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x01&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x01&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x01&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x01&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x01&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x02&lt;/span&gt;, &lt;span&gt;0x80&lt;/span&gt;, &lt;span&gt;0x02&lt;/span&gt;, &lt;span&gt;0x80&lt;/span&gt;, &lt;span&gt;0x02&lt;/span&gt;, &lt;span&gt;0x80&lt;/span&gt;, &lt;span&gt;0x04&lt;/span&gt;, &lt;span&gt;0x40&lt;/span&gt;, &lt;span&gt;0x04&lt;/span&gt;, &lt;span&gt;0x40&lt;/span&gt;, &lt;span&gt;0x08&lt;/span&gt;, &lt;span&gt;0x20&lt;/span&gt;, &lt;span&gt;0x10&lt;/span&gt;, &lt;span&gt;0x10&lt;/span&gt;, &lt;span&gt;0x20&lt;/span&gt;, &lt;span&gt;0x0e&lt;/span&gt;, &lt;span&gt;0x40&lt;/span&gt;, &lt;span&gt;0x04&lt;/span&gt;&lt;span&gt;}},
        { &lt;/span&gt;&lt;span&gt;0xd5&lt;/span&gt;, &lt;span&gt;0xe6&lt;/span&gt;, { &lt;span&gt;0x01&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x01&lt;/span&gt;, &lt;span&gt;0x08&lt;/span&gt;, &lt;span&gt;0x7f&lt;/span&gt;, &lt;span&gt;0xfc&lt;/span&gt;, &lt;span&gt;0x01&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x1f&lt;/span&gt;, &lt;span&gt;0xf0&lt;/span&gt;, &lt;span&gt;0x10&lt;/span&gt;, &lt;span&gt;0x10&lt;/span&gt;, &lt;span&gt;0x1f&lt;/span&gt;, &lt;span&gt;0xf0&lt;/span&gt;, &lt;span&gt;0x10&lt;/span&gt;, &lt;span&gt;0x10&lt;/span&gt;, &lt;span&gt;0x1f&lt;/span&gt;, &lt;span&gt;0xf0&lt;/span&gt;, &lt;span&gt;0x10&lt;/span&gt;, &lt;span&gt;0x10&lt;/span&gt;, &lt;span&gt;0x1f&lt;/span&gt;, &lt;span&gt;0xf0&lt;/span&gt;, &lt;span&gt;0x10&lt;/span&gt;, &lt;span&gt;0x10&lt;/span&gt;, &lt;span&gt;0xff&lt;/span&gt;, &lt;span&gt;0xfe&lt;/span&gt;, &lt;span&gt;0x08&lt;/span&gt;, &lt;span&gt;0x20&lt;/span&gt;, &lt;span&gt;0x10&lt;/span&gt;, &lt;span&gt;0x18&lt;/span&gt;, &lt;span&gt;0x20&lt;/span&gt;, &lt;span&gt;0x08&lt;/span&gt;&lt;span&gt;}},
        { &lt;/span&gt;&lt;span&gt;0xd6&lt;/span&gt;, &lt;span&gt;0xc7&lt;/span&gt;, { &lt;span&gt;0x20&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x22&lt;/span&gt;, &lt;span&gt;0x04&lt;/span&gt;, &lt;span&gt;0x3f&lt;/span&gt;, &lt;span&gt;0x7e&lt;/span&gt;, &lt;span&gt;0x48&lt;/span&gt;, &lt;span&gt;0x44&lt;/span&gt;, &lt;span&gt;0x08&lt;/span&gt;, &lt;span&gt;0x44&lt;/span&gt;, &lt;span&gt;0xff&lt;/span&gt;, &lt;span&gt;0xc4&lt;/span&gt;, &lt;span&gt;0x10&lt;/span&gt;, &lt;span&gt;0x44&lt;/span&gt;, &lt;span&gt;0x14&lt;/span&gt;, &lt;span&gt;0x7c&lt;/span&gt;, &lt;span&gt;0x22&lt;/span&gt;, &lt;span&gt;0x44&lt;/span&gt;, &lt;span&gt;0x42&lt;/span&gt;, &lt;span&gt;0x10&lt;/span&gt;, &lt;span&gt;0x9f&lt;/span&gt;, &lt;span&gt;0xf8&lt;/span&gt;, &lt;span&gt;0x10&lt;/span&gt;, &lt;span&gt;0x10&lt;/span&gt;, &lt;span&gt;0x1f&lt;/span&gt;, &lt;span&gt;0xf0&lt;/span&gt;, &lt;span&gt;0x10&lt;/span&gt;, &lt;span&gt;0x10&lt;/span&gt;, &lt;span&gt;0x1f&lt;/span&gt;, &lt;span&gt;0xf0&lt;/span&gt;, &lt;span&gt;0x10&lt;/span&gt;, &lt;span&gt;0x10&lt;/span&gt;&lt;span&gt;}}
};

&lt;/span&gt;&lt;span&gt;static&lt;/span&gt; &lt;span&gt;const&lt;/span&gt; unsigned &lt;span&gt;char&lt;/span&gt; ascii_font[] =&lt;span&gt; {
        &lt;/span&gt;&lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x18&lt;/span&gt;, &lt;span&gt;0x3c&lt;/span&gt;, &lt;span&gt;0x3c&lt;/span&gt;, &lt;span&gt;0x3c&lt;/span&gt;, &lt;span&gt;0x18&lt;/span&gt;, &lt;span&gt;0x18&lt;/span&gt;, &lt;span&gt;0x18&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x18&lt;/span&gt;, &lt;span&gt;0x18&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x66&lt;/span&gt;, &lt;span&gt;0x66&lt;/span&gt;, &lt;span&gt;0x66&lt;/span&gt;, &lt;span&gt;0x24&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x6c&lt;/span&gt;, &lt;span&gt;0x6c&lt;/span&gt;, &lt;span&gt;0xfe&lt;/span&gt;, &lt;span&gt;0x6c&lt;/span&gt;, &lt;span&gt;0x6c&lt;/span&gt;, &lt;span&gt;0x6c&lt;/span&gt;, &lt;span&gt;0xfe&lt;/span&gt;, &lt;span&gt;0x6c&lt;/span&gt;, &lt;span&gt;0x6c&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;0x18&lt;/span&gt;, &lt;span&gt;0x18&lt;/span&gt;, &lt;span&gt;0x7c&lt;/span&gt;, &lt;span&gt;0xc6&lt;/span&gt;, &lt;span&gt;0xc2&lt;/span&gt;, &lt;span&gt;0xc0&lt;/span&gt;, &lt;span&gt;0x7c&lt;/span&gt;, &lt;span&gt;0x06&lt;/span&gt;, &lt;span&gt;0x06&lt;/span&gt;, &lt;span&gt;0x86&lt;/span&gt;, &lt;span&gt;0xc6&lt;/span&gt;, &lt;span&gt;0x7c&lt;/span&gt;, &lt;span&gt;0x18&lt;/span&gt;, &lt;span&gt;0x18&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0xc2&lt;/span&gt;, &lt;span&gt;0xc6&lt;/span&gt;, &lt;span&gt;0x0c&lt;/span&gt;, &lt;span&gt;0x18&lt;/span&gt;, &lt;span&gt;0x30&lt;/span&gt;, &lt;span&gt;0x60&lt;/span&gt;, &lt;span&gt;0xc6&lt;/span&gt;, &lt;span&gt;0x86&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x38&lt;/span&gt;, &lt;span&gt;0x6c&lt;/span&gt;, &lt;span&gt;0x6c&lt;/span&gt;, &lt;span&gt;0x38&lt;/span&gt;, &lt;span&gt;0x76&lt;/span&gt;, &lt;span&gt;0xdc&lt;/span&gt;, &lt;span&gt;0xcc&lt;/span&gt;, &lt;span&gt;0xcc&lt;/span&gt;, &lt;span&gt;0xcc&lt;/span&gt;, &lt;span&gt;0x76&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x30&lt;/span&gt;, &lt;span&gt;0x30&lt;/span&gt;, &lt;span&gt;0x30&lt;/span&gt;, &lt;span&gt;0x60&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x0c&lt;/span&gt;, &lt;span&gt;0x18&lt;/span&gt;, &lt;span&gt;0x30&lt;/span&gt;, &lt;span&gt;0x30&lt;/span&gt;, &lt;span&gt;0x30&lt;/span&gt;, &lt;span&gt;0x30&lt;/span&gt;, &lt;span&gt;0x30&lt;/span&gt;, &lt;span&gt;0x30&lt;/span&gt;, &lt;span&gt;0x18&lt;/span&gt;, &lt;span&gt;0x0c&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x30&lt;/span&gt;, &lt;span&gt;0x18&lt;/span&gt;, &lt;span&gt;0x0c&lt;/span&gt;, &lt;span&gt;0x0c&lt;/span&gt;, &lt;span&gt;0x0c&lt;/span&gt;, &lt;span&gt;0x0c&lt;/span&gt;, &lt;span&gt;0x0c&lt;/span&gt;, &lt;span&gt;0x0c&lt;/span&gt;, &lt;span&gt;0x18&lt;/span&gt;, &lt;span&gt;0x30&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x66&lt;/span&gt;, &lt;span&gt;0x3c&lt;/span&gt;, &lt;span&gt;0xff&lt;/span&gt;, &lt;span&gt;0x3c&lt;/span&gt;, &lt;span&gt;0x66&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x18&lt;/span&gt;, &lt;span&gt;0x18&lt;/span&gt;, &lt;span&gt;0x7e&lt;/span&gt;, &lt;span&gt;0x18&lt;/span&gt;, &lt;span&gt;0x18&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x18&lt;/span&gt;, &lt;span&gt;0x18&lt;/span&gt;, &lt;span&gt;0x18&lt;/span&gt;, &lt;span&gt;0x30&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0xfe&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x18&lt;/span&gt;, &lt;span&gt;0x18&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x02&lt;/span&gt;, &lt;span&gt;0x06&lt;/span&gt;, &lt;span&gt;0x0c&lt;/span&gt;, &lt;span&gt;0x18&lt;/span&gt;, &lt;span&gt;0x30&lt;/span&gt;, &lt;span&gt;0x60&lt;/span&gt;, &lt;span&gt;0xc0&lt;/span&gt;, &lt;span&gt;0x80&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x38&lt;/span&gt;, &lt;span&gt;0x6c&lt;/span&gt;, &lt;span&gt;0xc6&lt;/span&gt;, &lt;span&gt;0xc6&lt;/span&gt;, &lt;span&gt;0xd6&lt;/span&gt;, &lt;span&gt;0xd6&lt;/span&gt;, &lt;span&gt;0xc6&lt;/span&gt;, &lt;span&gt;0xc6&lt;/span&gt;, &lt;span&gt;0x6c&lt;/span&gt;, &lt;span&gt;0x38&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x18&lt;/span&gt;, &lt;span&gt;0x38&lt;/span&gt;, &lt;span&gt;0x78&lt;/span&gt;, &lt;span&gt;0x18&lt;/span&gt;, &lt;span&gt;0x18&lt;/span&gt;, &lt;span&gt;0x18&lt;/span&gt;, &lt;span&gt;0x18&lt;/span&gt;, &lt;span&gt;0x18&lt;/span&gt;, &lt;span&gt;0x18&lt;/span&gt;, &lt;span&gt;0x7e&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x7c&lt;/span&gt;, &lt;span&gt;0xc6&lt;/span&gt;, &lt;span&gt;0x06&lt;/span&gt;, &lt;span&gt;0x0c&lt;/span&gt;, &lt;span&gt;0x18&lt;/span&gt;, &lt;span&gt;0x30&lt;/span&gt;, &lt;span&gt;0x60&lt;/span&gt;, &lt;span&gt;0xc0&lt;/span&gt;, &lt;span&gt;0xc6&lt;/span&gt;, &lt;span&gt;0xfe&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x7c&lt;/span&gt;, &lt;span&gt;0xc6&lt;/span&gt;, &lt;span&gt;0x06&lt;/span&gt;, &lt;span&gt;0x06&lt;/span&gt;, &lt;span&gt;0x3c&lt;/span&gt;, &lt;span&gt;0x06&lt;/span&gt;, &lt;span&gt;0x06&lt;/span&gt;, &lt;span&gt;0x06&lt;/span&gt;, &lt;span&gt;0xc6&lt;/span&gt;, &lt;span&gt;0x7c&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x0c&lt;/span&gt;, &lt;span&gt;0x1c&lt;/span&gt;, &lt;span&gt;0x3c&lt;/span&gt;, &lt;span&gt;0x6c&lt;/span&gt;, &lt;span&gt;0xcc&lt;/span&gt;, &lt;span&gt;0xfe&lt;/span&gt;, &lt;span&gt;0x0c&lt;/span&gt;, &lt;span&gt;0x0c&lt;/span&gt;, &lt;span&gt;0x0c&lt;/span&gt;, &lt;span&gt;0x1e&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0xfe&lt;/span&gt;, &lt;span&gt;0xc0&lt;/span&gt;, &lt;span&gt;0xc0&lt;/span&gt;, &lt;span&gt;0xc0&lt;/span&gt;, &lt;span&gt;0xfc&lt;/span&gt;, &lt;span&gt;0x06&lt;/span&gt;, &lt;span&gt;0x06&lt;/span&gt;, &lt;span&gt;0x06&lt;/span&gt;, &lt;span&gt;0xc6&lt;/span&gt;, &lt;span&gt;0x7c&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x38&lt;/span&gt;, &lt;span&gt;0x60&lt;/span&gt;, &lt;span&gt;0xc0&lt;/span&gt;, &lt;span&gt;0xc0&lt;/span&gt;, &lt;span&gt;0xfc&lt;/span&gt;, &lt;span&gt;0xc6&lt;/span&gt;, &lt;span&gt;0xc6&lt;/span&gt;, &lt;span&gt;0xc6&lt;/span&gt;, &lt;span&gt;0xc6&lt;/span&gt;, &lt;span&gt;0x7c&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0xfe&lt;/span&gt;, &lt;span&gt;0xc6&lt;/span&gt;, &lt;span&gt;0x06&lt;/span&gt;, &lt;span&gt;0x06&lt;/span&gt;, &lt;span&gt;0x0c&lt;/span&gt;, &lt;span&gt;0x18&lt;/span&gt;, &lt;span&gt;0x30&lt;/span&gt;, &lt;span&gt;0x30&lt;/span&gt;, &lt;span&gt;0x30&lt;/span&gt;, &lt;span&gt;0x30&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x7c&lt;/span&gt;, &lt;span&gt;0xc6&lt;/span&gt;, &lt;span&gt;0xc6&lt;/span&gt;, &lt;span&gt;0xc6&lt;/span&gt;, &lt;span&gt;0x7c&lt;/span&gt;, &lt;span&gt;0xc6&lt;/span&gt;, &lt;span&gt;0xc6&lt;/span&gt;, &lt;span&gt;0xc6&lt;/span&gt;, &lt;span&gt;0xc6&lt;/span&gt;, &lt;span&gt;0x7c&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x7c&lt;/span&gt;, &lt;span&gt;0xc6&lt;/span&gt;, &lt;span&gt;0xc6&lt;/span&gt;, &lt;span&gt;0xc6&lt;/span&gt;, &lt;span&gt;0x7e&lt;/span&gt;, &lt;span&gt;0x06&lt;/span&gt;, &lt;span&gt;0x06&lt;/span&gt;, &lt;span&gt;0x06&lt;/span&gt;, &lt;span&gt;0x0c&lt;/span&gt;, &lt;span&gt;0x78&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x18&lt;/span&gt;, &lt;span&gt;0x18&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x18&lt;/span&gt;, &lt;span&gt;0x18&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x18&lt;/span&gt;, &lt;span&gt;0x18&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x18&lt;/span&gt;, &lt;span&gt;0x18&lt;/span&gt;, &lt;span&gt;0x30&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x06&lt;/span&gt;, &lt;span&gt;0x0c&lt;/span&gt;, &lt;span&gt;0x18&lt;/span&gt;, &lt;span&gt;0x30&lt;/span&gt;, &lt;span&gt;0x60&lt;/span&gt;, &lt;span&gt;0x30&lt;/span&gt;, &lt;span&gt;0x18&lt;/span&gt;, &lt;span&gt;0x0c&lt;/span&gt;, &lt;span&gt;0x06&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x7e&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x7e&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x60&lt;/span&gt;, &lt;span&gt;0x30&lt;/span&gt;, &lt;span&gt;0x18&lt;/span&gt;, &lt;span&gt;0x0c&lt;/span&gt;, &lt;span&gt;0x06&lt;/span&gt;, &lt;span&gt;0x0c&lt;/span&gt;, &lt;span&gt;0x18&lt;/span&gt;, &lt;span&gt;0x30&lt;/span&gt;, &lt;span&gt;0x60&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x7c&lt;/span&gt;, &lt;span&gt;0xc6&lt;/span&gt;, &lt;span&gt;0xc6&lt;/span&gt;, &lt;span&gt;0x0c&lt;/span&gt;, &lt;span&gt;0x18&lt;/span&gt;, &lt;span&gt;0x18&lt;/span&gt;, &lt;span&gt;0x18&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x18&lt;/span&gt;, &lt;span&gt;0x18&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x7c&lt;/span&gt;, &lt;span&gt;0xc6&lt;/span&gt;, &lt;span&gt;0xc6&lt;/span&gt;, &lt;span&gt;0xde&lt;/span&gt;, &lt;span&gt;0xde&lt;/span&gt;, &lt;span&gt;0xde&lt;/span&gt;, &lt;span&gt;0xdc&lt;/span&gt;, &lt;span&gt;0xc0&lt;/span&gt;, &lt;span&gt;0x7c&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x10&lt;/span&gt;, &lt;span&gt;0x38&lt;/span&gt;, &lt;span&gt;0x6c&lt;/span&gt;, &lt;span&gt;0xc6&lt;/span&gt;, &lt;span&gt;0xc6&lt;/span&gt;, &lt;span&gt;0xfe&lt;/span&gt;, &lt;span&gt;0xc6&lt;/span&gt;, &lt;span&gt;0xc6&lt;/span&gt;, &lt;span&gt;0xc6&lt;/span&gt;, &lt;span&gt;0xc6&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0xfc&lt;/span&gt;, &lt;span&gt;0x66&lt;/span&gt;, &lt;span&gt;0x66&lt;/span&gt;, &lt;span&gt;0x66&lt;/span&gt;, &lt;span&gt;0x7c&lt;/span&gt;, &lt;span&gt;0x66&lt;/span&gt;, &lt;span&gt;0x66&lt;/span&gt;, &lt;span&gt;0x66&lt;/span&gt;, &lt;span&gt;0x66&lt;/span&gt;, &lt;span&gt;0xfc&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x3c&lt;/span&gt;, &lt;span&gt;0x66&lt;/span&gt;, &lt;span&gt;0xc2&lt;/span&gt;, &lt;span&gt;0xc0&lt;/span&gt;, &lt;span&gt;0xc0&lt;/span&gt;, &lt;span&gt;0xc0&lt;/span&gt;, &lt;span&gt;0xc0&lt;/span&gt;, &lt;span&gt;0xc2&lt;/span&gt;, &lt;span&gt;0x66&lt;/span&gt;, &lt;span&gt;0x3c&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0xf8&lt;/span&gt;, &lt;span&gt;0x6c&lt;/span&gt;, &lt;span&gt;0x66&lt;/span&gt;, &lt;span&gt;0x66&lt;/span&gt;, &lt;span&gt;0x66&lt;/span&gt;, &lt;span&gt;0x66&lt;/span&gt;, &lt;span&gt;0x66&lt;/span&gt;, &lt;span&gt;0x66&lt;/span&gt;, &lt;span&gt;0x6c&lt;/span&gt;, &lt;span&gt;0xf8&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0xfe&lt;/span&gt;, &lt;span&gt;0x66&lt;/span&gt;, &lt;span&gt;0x62&lt;/span&gt;, &lt;span&gt;0x68&lt;/span&gt;, &lt;span&gt;0x78&lt;/span&gt;, &lt;span&gt;0x68&lt;/span&gt;, &lt;span&gt;0x60&lt;/span&gt;, &lt;span&gt;0x62&lt;/span&gt;, &lt;span&gt;0x66&lt;/span&gt;, &lt;span&gt;0xfe&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0xfe&lt;/span&gt;, &lt;span&gt;0x66&lt;/span&gt;, &lt;span&gt;0x62&lt;/span&gt;, &lt;span&gt;0x68&lt;/span&gt;, &lt;span&gt;0x78&lt;/span&gt;, &lt;span&gt;0x68&lt;/span&gt;, &lt;span&gt;0x60&lt;/span&gt;, &lt;span&gt;0x60&lt;/span&gt;, &lt;span&gt;0x60&lt;/span&gt;, &lt;span&gt;0xf0&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x3c&lt;/span&gt;, &lt;span&gt;0x66&lt;/span&gt;, &lt;span&gt;0xc2&lt;/span&gt;, &lt;span&gt;0xc0&lt;/span&gt;, &lt;span&gt;0xc0&lt;/span&gt;, &lt;span&gt;0xde&lt;/span&gt;, &lt;span&gt;0xc6&lt;/span&gt;, &lt;span&gt;0xc6&lt;/span&gt;, &lt;span&gt;0x66&lt;/span&gt;, &lt;span&gt;0x3a&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0xc6&lt;/span&gt;, &lt;span&gt;0xc6&lt;/span&gt;, &lt;span&gt;0xc6&lt;/span&gt;, &lt;span&gt;0xc6&lt;/span&gt;, &lt;span&gt;0xfe&lt;/span&gt;, &lt;span&gt;0xc6&lt;/span&gt;, &lt;span&gt;0xc6&lt;/span&gt;, &lt;span&gt;0xc6&lt;/span&gt;, &lt;span&gt;0xc6&lt;/span&gt;, &lt;span&gt;0xc6&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x3c&lt;/span&gt;, &lt;span&gt;0x18&lt;/span&gt;, &lt;span&gt;0x18&lt;/span&gt;, &lt;span&gt;0x18&lt;/span&gt;, &lt;span&gt;0x18&lt;/span&gt;, &lt;span&gt;0x18&lt;/span&gt;, &lt;span&gt;0x18&lt;/span&gt;, &lt;span&gt;0x18&lt;/span&gt;, &lt;span&gt;0x18&lt;/span&gt;, &lt;span&gt;0x3c&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x1e&lt;/span&gt;, &lt;span&gt;0x0c&lt;/span&gt;, &lt;span&gt;0x0c&lt;/span&gt;, &lt;span&gt;0x0c&lt;/span&gt;, &lt;span&gt;0x0c&lt;/span&gt;, &lt;span&gt;0x0c&lt;/span&gt;, &lt;span&gt;0xcc&lt;/span&gt;, &lt;span&gt;0xcc&lt;/span&gt;, &lt;span&gt;0xcc&lt;/span&gt;, &lt;span&gt;0x78&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0xe6&lt;/span&gt;, &lt;span&gt;0x66&lt;/span&gt;, &lt;span&gt;0x66&lt;/span&gt;, &lt;span&gt;0x6c&lt;/span&gt;, &lt;span&gt;0x78&lt;/span&gt;, &lt;span&gt;0x78&lt;/span&gt;, &lt;span&gt;0x6c&lt;/span&gt;, &lt;span&gt;0x66&lt;/span&gt;, &lt;span&gt;0x66&lt;/span&gt;, &lt;span&gt;0xe6&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0xf0&lt;/span&gt;, &lt;span&gt;0x60&lt;/span&gt;, &lt;span&gt;0x60&lt;/span&gt;, &lt;span&gt;0x60&lt;/span&gt;, &lt;span&gt;0x60&lt;/span&gt;, &lt;span&gt;0x60&lt;/span&gt;, &lt;span&gt;0x60&lt;/span&gt;, &lt;span&gt;0x62&lt;/span&gt;, &lt;span&gt;0x66&lt;/span&gt;, &lt;span&gt;0xfe&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0xc6&lt;/span&gt;, &lt;span&gt;0xee&lt;/span&gt;, &lt;span&gt;0xfe&lt;/span&gt;, &lt;span&gt;0xfe&lt;/span&gt;, &lt;span&gt;0xd6&lt;/span&gt;, &lt;span&gt;0xc6&lt;/span&gt;, &lt;span&gt;0xc6&lt;/span&gt;, &lt;span&gt;0xc6&lt;/span&gt;, &lt;span&gt;0xc6&lt;/span&gt;, &lt;span&gt;0xc6&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0xc6&lt;/span&gt;, &lt;span&gt;0xe6&lt;/span&gt;, &lt;span&gt;0xf6&lt;/span&gt;, &lt;span&gt;0xfe&lt;/span&gt;, &lt;span&gt;0xde&lt;/span&gt;, &lt;span&gt;0xce&lt;/span&gt;, &lt;span&gt;0xc6&lt;/span&gt;, &lt;span&gt;0xc6&lt;/span&gt;, &lt;span&gt;0xc6&lt;/span&gt;, &lt;span&gt;0xc6&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x7c&lt;/span&gt;, &lt;span&gt;0xc6&lt;/span&gt;, &lt;span&gt;0xc6&lt;/span&gt;, &lt;span&gt;0xc6&lt;/span&gt;, &lt;span&gt;0xc6&lt;/span&gt;, &lt;span&gt;0xc6&lt;/span&gt;, &lt;span&gt;0xc6&lt;/span&gt;, &lt;span&gt;0xc6&lt;/span&gt;, &lt;span&gt;0xc6&lt;/span&gt;, &lt;span&gt;0x7c&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0xfc&lt;/span&gt;, &lt;span&gt;0x66&lt;/span&gt;, &lt;span&gt;0x66&lt;/span&gt;, &lt;span&gt;0x66&lt;/span&gt;, &lt;span&gt;0x7c&lt;/span&gt;, &lt;span&gt;0x60&lt;/span&gt;, &lt;span&gt;0x60&lt;/span&gt;, &lt;span&gt;0x60&lt;/span&gt;, &lt;span&gt;0x60&lt;/span&gt;, &lt;span&gt;0xf0&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x7c&lt;/span&gt;, &lt;span&gt;0xc6&lt;/span&gt;, &lt;span&gt;0xc6&lt;/span&gt;, &lt;span&gt;0xc6&lt;/span&gt;, &lt;span&gt;0xc6&lt;/span&gt;, &lt;span&gt;0xc6&lt;/span&gt;, &lt;span&gt;0xc6&lt;/span&gt;, &lt;span&gt;0xd6&lt;/span&gt;, &lt;span&gt;0xde&lt;/span&gt;, &lt;span&gt;0x7c&lt;/span&gt;, &lt;span&gt;0x0c&lt;/span&gt;, &lt;span&gt;0x0e&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0xfc&lt;/span&gt;, &lt;span&gt;0x66&lt;/span&gt;, &lt;span&gt;0x66&lt;/span&gt;, &lt;span&gt;0x66&lt;/span&gt;, &lt;span&gt;0x7c&lt;/span&gt;, &lt;span&gt;0x6c&lt;/span&gt;, &lt;span&gt;0x66&lt;/span&gt;, &lt;span&gt;0x66&lt;/span&gt;, &lt;span&gt;0x66&lt;/span&gt;, &lt;span&gt;0xe6&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x7c&lt;/span&gt;, &lt;span&gt;0xc6&lt;/span&gt;, &lt;span&gt;0xc6&lt;/span&gt;, &lt;span&gt;0x60&lt;/span&gt;, &lt;span&gt;0x38&lt;/span&gt;, &lt;span&gt;0x0c&lt;/span&gt;, &lt;span&gt;0x06&lt;/span&gt;, &lt;span&gt;0xc6&lt;/span&gt;, &lt;span&gt;0xc6&lt;/span&gt;, &lt;span&gt;0x7c&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x7e&lt;/span&gt;, &lt;span&gt;0x7e&lt;/span&gt;, &lt;span&gt;0x5a&lt;/span&gt;, &lt;span&gt;0x18&lt;/span&gt;, &lt;span&gt;0x18&lt;/span&gt;, &lt;span&gt;0x18&lt;/span&gt;, &lt;span&gt;0x18&lt;/span&gt;, &lt;span&gt;0x18&lt;/span&gt;, &lt;span&gt;0x18&lt;/span&gt;, &lt;span&gt;0x3c&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0xc6&lt;/span&gt;, &lt;span&gt;0xc6&lt;/span&gt;, &lt;span&gt;0xc6&lt;/span&gt;, &lt;span&gt;0xc6&lt;/span&gt;, &lt;span&gt;0xc6&lt;/span&gt;, &lt;span&gt;0xc6&lt;/span&gt;, &lt;span&gt;0xc6&lt;/span&gt;, &lt;span&gt;0xc6&lt;/span&gt;, &lt;span&gt;0xc6&lt;/span&gt;, &lt;span&gt;0x7c&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0xc6&lt;/span&gt;, &lt;span&gt;0xc6&lt;/span&gt;, &lt;span&gt;0xc6&lt;/span&gt;, &lt;span&gt;0xc6&lt;/span&gt;, &lt;span&gt;0xc6&lt;/span&gt;, &lt;span&gt;0xc6&lt;/span&gt;, &lt;span&gt;0xc6&lt;/span&gt;, &lt;span&gt;0x6c&lt;/span&gt;, &lt;span&gt;0x38&lt;/span&gt;, &lt;span&gt;0x10&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0xc6&lt;/span&gt;, &lt;span&gt;0xc6&lt;/span&gt;, &lt;span&gt;0xc6&lt;/span&gt;, &lt;span&gt;0xc6&lt;/span&gt;, &lt;span&gt;0xd6&lt;/span&gt;, &lt;span&gt;0xd6&lt;/span&gt;, &lt;span&gt;0xd6&lt;/span&gt;, &lt;span&gt;0xfe&lt;/span&gt;, &lt;span&gt;0xee&lt;/span&gt;, &lt;span&gt;0x6c&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0xc6&lt;/span&gt;, &lt;span&gt;0xc6&lt;/span&gt;, &lt;span&gt;0x6c&lt;/span&gt;, &lt;span&gt;0x7c&lt;/span&gt;, &lt;span&gt;0x38&lt;/span&gt;, &lt;span&gt;0x38&lt;/span&gt;, &lt;span&gt;0x7c&lt;/span&gt;, &lt;span&gt;0x6c&lt;/span&gt;, &lt;span&gt;0xc6&lt;/span&gt;, &lt;span&gt;0xc6&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x66&lt;/span&gt;, &lt;span&gt;0x66&lt;/span&gt;, &lt;span&gt;0x66&lt;/span&gt;, &lt;span&gt;0x66&lt;/span&gt;, &lt;span&gt;0x3c&lt;/span&gt;, &lt;span&gt;0x18&lt;/span&gt;, &lt;span&gt;0x18&lt;/span&gt;, &lt;span&gt;0x18&lt;/span&gt;, &lt;span&gt;0x18&lt;/span&gt;, &lt;span&gt;0x3c&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0xfe&lt;/span&gt;, &lt;span&gt;0xc6&lt;/span&gt;, &lt;span&gt;0x86&lt;/span&gt;, &lt;span&gt;0x0c&lt;/span&gt;, &lt;span&gt;0x18&lt;/span&gt;, &lt;span&gt;0x30&lt;/span&gt;, &lt;span&gt;0x60&lt;/span&gt;, &lt;span&gt;0xc2&lt;/span&gt;, &lt;span&gt;0xc6&lt;/span&gt;, &lt;span&gt;0xfe&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x3c&lt;/span&gt;, &lt;span&gt;0x30&lt;/span&gt;, &lt;span&gt;0x30&lt;/span&gt;, &lt;span&gt;0x30&lt;/span&gt;, &lt;span&gt;0x30&lt;/span&gt;, &lt;span&gt;0x30&lt;/span&gt;, &lt;span&gt;0x30&lt;/span&gt;, &lt;span&gt;0x30&lt;/span&gt;, &lt;span&gt;0x30&lt;/span&gt;, &lt;span&gt;0x3c&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x80&lt;/span&gt;, &lt;span&gt;0xc0&lt;/span&gt;, &lt;span&gt;0xe0&lt;/span&gt;, &lt;span&gt;0x70&lt;/span&gt;, &lt;span&gt;0x38&lt;/span&gt;, &lt;span&gt;0x1c&lt;/span&gt;, &lt;span&gt;0x0e&lt;/span&gt;, &lt;span&gt;0x06&lt;/span&gt;, &lt;span&gt;0x02&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x3c&lt;/span&gt;, &lt;span&gt;0x0c&lt;/span&gt;, &lt;span&gt;0x0c&lt;/span&gt;, &lt;span&gt;0x0c&lt;/span&gt;, &lt;span&gt;0x0c&lt;/span&gt;, &lt;span&gt;0x0c&lt;/span&gt;, &lt;span&gt;0x0c&lt;/span&gt;, &lt;span&gt;0x0c&lt;/span&gt;, &lt;span&gt;0x0c&lt;/span&gt;, &lt;span&gt;0x3c&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;0x10&lt;/span&gt;, &lt;span&gt;0x38&lt;/span&gt;, &lt;span&gt;0x6c&lt;/span&gt;, &lt;span&gt;0xc6&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0xff&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;0x30&lt;/span&gt;, &lt;span&gt;0x30&lt;/span&gt;, &lt;span&gt;0x18&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x78&lt;/span&gt;, &lt;span&gt;0x0c&lt;/span&gt;, &lt;span&gt;0x7c&lt;/span&gt;, &lt;span&gt;0xcc&lt;/span&gt;, &lt;span&gt;0xcc&lt;/span&gt;, &lt;span&gt;0xcc&lt;/span&gt;, &lt;span&gt;0x76&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0xe0&lt;/span&gt;, &lt;span&gt;0x60&lt;/span&gt;, &lt;span&gt;0x60&lt;/span&gt;, &lt;span&gt;0x78&lt;/span&gt;, &lt;span&gt;0x6c&lt;/span&gt;, &lt;span&gt;0x66&lt;/span&gt;, &lt;span&gt;0x66&lt;/span&gt;, &lt;span&gt;0x66&lt;/span&gt;, &lt;span&gt;0x66&lt;/span&gt;, &lt;span&gt;0x7c&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x7c&lt;/span&gt;, &lt;span&gt;0xc6&lt;/span&gt;, &lt;span&gt;0xc0&lt;/span&gt;, &lt;span&gt;0xc0&lt;/span&gt;, &lt;span&gt;0xc0&lt;/span&gt;, &lt;span&gt;0xc6&lt;/span&gt;, &lt;span&gt;0x7c&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x1c&lt;/span&gt;, &lt;span&gt;0x0c&lt;/span&gt;, &lt;span&gt;0x0c&lt;/span&gt;, &lt;span&gt;0x3c&lt;/span&gt;, &lt;span&gt;0x6c&lt;/span&gt;, &lt;span&gt;0xcc&lt;/span&gt;, &lt;span&gt;0xcc&lt;/span&gt;, &lt;span&gt;0xcc&lt;/span&gt;, &lt;span&gt;0xcc&lt;/span&gt;, &lt;span&gt;0x76&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x7c&lt;/span&gt;, &lt;span&gt;0xc6&lt;/span&gt;, &lt;span&gt;0xfe&lt;/span&gt;, &lt;span&gt;0xc0&lt;/span&gt;, &lt;span&gt;0xc0&lt;/span&gt;, &lt;span&gt;0xc6&lt;/span&gt;, &lt;span&gt;0x7c&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x38&lt;/span&gt;, &lt;span&gt;0x6c&lt;/span&gt;, &lt;span&gt;0x64&lt;/span&gt;, &lt;span&gt;0x60&lt;/span&gt;, &lt;span&gt;0xf0&lt;/span&gt;, &lt;span&gt;0x60&lt;/span&gt;, &lt;span&gt;0x60&lt;/span&gt;, &lt;span&gt;0x60&lt;/span&gt;, &lt;span&gt;0x60&lt;/span&gt;, &lt;span&gt;0xf0&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x76&lt;/span&gt;, &lt;span&gt;0xcc&lt;/span&gt;, &lt;span&gt;0xcc&lt;/span&gt;, &lt;span&gt;0xcc&lt;/span&gt;, &lt;span&gt;0xcc&lt;/span&gt;, &lt;span&gt;0xcc&lt;/span&gt;, &lt;span&gt;0x7c&lt;/span&gt;, &lt;span&gt;0x0c&lt;/span&gt;, &lt;span&gt;0xcc&lt;/span&gt;, &lt;span&gt;0x78&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0xe0&lt;/span&gt;, &lt;span&gt;0x60&lt;/span&gt;, &lt;span&gt;0x60&lt;/span&gt;, &lt;span&gt;0x6c&lt;/span&gt;, &lt;span&gt;0x76&lt;/span&gt;, &lt;span&gt;0x66&lt;/span&gt;, &lt;span&gt;0x66&lt;/span&gt;, &lt;span&gt;0x66&lt;/span&gt;, &lt;span&gt;0x66&lt;/span&gt;, &lt;span&gt;0xe6&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x18&lt;/span&gt;, &lt;span&gt;0x18&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x38&lt;/span&gt;, &lt;span&gt;0x18&lt;/span&gt;, &lt;span&gt;0x18&lt;/span&gt;, &lt;span&gt;0x18&lt;/span&gt;, &lt;span&gt;0x18&lt;/span&gt;, &lt;span&gt;0x18&lt;/span&gt;, &lt;span&gt;0x3c&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x06&lt;/span&gt;, &lt;span&gt;0x06&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x0e&lt;/span&gt;, &lt;span&gt;0x06&lt;/span&gt;, &lt;span&gt;0x06&lt;/span&gt;, &lt;span&gt;0x06&lt;/span&gt;, &lt;span&gt;0x06&lt;/span&gt;, &lt;span&gt;0x06&lt;/span&gt;, &lt;span&gt;0x06&lt;/span&gt;, &lt;span&gt;0x66&lt;/span&gt;, &lt;span&gt;0x66&lt;/span&gt;, &lt;span&gt;0x3c&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0xe0&lt;/span&gt;, &lt;span&gt;0x60&lt;/span&gt;, &lt;span&gt;0x60&lt;/span&gt;, &lt;span&gt;0x66&lt;/span&gt;, &lt;span&gt;0x6c&lt;/span&gt;, &lt;span&gt;0x78&lt;/span&gt;, &lt;span&gt;0x78&lt;/span&gt;, &lt;span&gt;0x6c&lt;/span&gt;, &lt;span&gt;0x66&lt;/span&gt;, &lt;span&gt;0xe6&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x38&lt;/span&gt;, &lt;span&gt;0x18&lt;/span&gt;, &lt;span&gt;0x18&lt;/span&gt;, &lt;span&gt;0x18&lt;/span&gt;, &lt;span&gt;0x18&lt;/span&gt;, &lt;span&gt;0x18&lt;/span&gt;, &lt;span&gt;0x18&lt;/span&gt;, &lt;span&gt;0x18&lt;/span&gt;, &lt;span&gt;0x18&lt;/span&gt;, &lt;span&gt;0x3c&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0xec&lt;/span&gt;, &lt;span&gt;0xfe&lt;/span&gt;, &lt;span&gt;0xd6&lt;/span&gt;, &lt;span&gt;0xd6&lt;/span&gt;, &lt;span&gt;0xd6&lt;/span&gt;, &lt;span&gt;0xd6&lt;/span&gt;, &lt;span&gt;0xc6&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0xdc&lt;/span&gt;, &lt;span&gt;0x66&lt;/span&gt;, &lt;span&gt;0x66&lt;/span&gt;, &lt;span&gt;0x66&lt;/span&gt;, &lt;span&gt;0x66&lt;/span&gt;, &lt;span&gt;0x66&lt;/span&gt;, &lt;span&gt;0x66&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x7c&lt;/span&gt;, &lt;span&gt;0xc6&lt;/span&gt;, &lt;span&gt;0xc6&lt;/span&gt;, &lt;span&gt;0xc6&lt;/span&gt;, &lt;span&gt;0xc6&lt;/span&gt;, &lt;span&gt;0xc6&lt;/span&gt;, &lt;span&gt;0x7c&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0xdc&lt;/span&gt;, &lt;span&gt;0x66&lt;/span&gt;, &lt;span&gt;0x66&lt;/span&gt;, &lt;span&gt;0x66&lt;/span&gt;, &lt;span&gt;0x66&lt;/span&gt;, &lt;span&gt;0x66&lt;/span&gt;, &lt;span&gt;0x7c&lt;/span&gt;, &lt;span&gt;0x60&lt;/span&gt;, &lt;span&gt;0x60&lt;/span&gt;, &lt;span&gt;0xf0&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x76&lt;/span&gt;, &lt;span&gt;0xcc&lt;/span&gt;, &lt;span&gt;0xcc&lt;/span&gt;, &lt;span&gt;0xcc&lt;/span&gt;, &lt;span&gt;0xcc&lt;/span&gt;, &lt;span&gt;0xcc&lt;/span&gt;, &lt;span&gt;0x7c&lt;/span&gt;, &lt;span&gt;0x0c&lt;/span&gt;, &lt;span&gt;0x0c&lt;/span&gt;, &lt;span&gt;0x1e&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0xdc&lt;/span&gt;, &lt;span&gt;0x76&lt;/span&gt;, &lt;span&gt;0x66&lt;/span&gt;, &lt;span&gt;0x60&lt;/span&gt;, &lt;span&gt;0x60&lt;/span&gt;, &lt;span&gt;0x60&lt;/span&gt;, &lt;span&gt;0xf0&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x7c&lt;/span&gt;, &lt;span&gt;0xc6&lt;/span&gt;, &lt;span&gt;0x60&lt;/span&gt;, &lt;span&gt;0x38&lt;/span&gt;, &lt;span&gt;0x0c&lt;/span&gt;, &lt;span&gt;0xc6&lt;/span&gt;, &lt;span&gt;0x7c&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x10&lt;/span&gt;, &lt;span&gt;0x30&lt;/span&gt;, &lt;span&gt;0x30&lt;/span&gt;, &lt;span&gt;0xfc&lt;/span&gt;, &lt;span&gt;0x30&lt;/span&gt;, &lt;span&gt;0x30&lt;/span&gt;, &lt;span&gt;0x30&lt;/span&gt;, &lt;span&gt;0x30&lt;/span&gt;, &lt;span&gt;0x36&lt;/span&gt;, &lt;span&gt;0x1c&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0xcc&lt;/span&gt;, &lt;span&gt;0xcc&lt;/span&gt;, &lt;span&gt;0xcc&lt;/span&gt;, &lt;span&gt;0xcc&lt;/span&gt;, &lt;span&gt;0xcc&lt;/span&gt;, &lt;span&gt;0xcc&lt;/span&gt;, &lt;span&gt;0x76&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x66&lt;/span&gt;, &lt;span&gt;0x66&lt;/span&gt;, &lt;span&gt;0x66&lt;/span&gt;, &lt;span&gt;0x66&lt;/span&gt;, &lt;span&gt;0x66&lt;/span&gt;, &lt;span&gt;0x3c&lt;/span&gt;, &lt;span&gt;0x18&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0xc6&lt;/span&gt;, &lt;span&gt;0xc6&lt;/span&gt;, &lt;span&gt;0xd6&lt;/span&gt;, &lt;span&gt;0xd6&lt;/span&gt;, &lt;span&gt;0xd6&lt;/span&gt;, &lt;span&gt;0xfe&lt;/span&gt;, &lt;span&gt;0x6c&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0xc6&lt;/span&gt;, &lt;span&gt;0x6c&lt;/span&gt;, &lt;span&gt;0x38&lt;/span&gt;, &lt;span&gt;0x38&lt;/span&gt;, &lt;span&gt;0x38&lt;/span&gt;, &lt;span&gt;0x6c&lt;/span&gt;, &lt;span&gt;0xc6&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0xc6&lt;/span&gt;, &lt;span&gt;0xc6&lt;/span&gt;, &lt;span&gt;0xc6&lt;/span&gt;, &lt;span&gt;0xc6&lt;/span&gt;, &lt;span&gt;0xc6&lt;/span&gt;, &lt;span&gt;0xc6&lt;/span&gt;, &lt;span&gt;0x7e&lt;/span&gt;, &lt;span&gt;0x06&lt;/span&gt;, &lt;span&gt;0x0c&lt;/span&gt;, &lt;span&gt;0xf8&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0xfe&lt;/span&gt;, &lt;span&gt;0xcc&lt;/span&gt;, &lt;span&gt;0x18&lt;/span&gt;, &lt;span&gt;0x30&lt;/span&gt;, &lt;span&gt;0x60&lt;/span&gt;, &lt;span&gt;0xc6&lt;/span&gt;, &lt;span&gt;0xfe&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x0e&lt;/span&gt;, &lt;span&gt;0x18&lt;/span&gt;, &lt;span&gt;0x18&lt;/span&gt;, &lt;span&gt;0x18&lt;/span&gt;, &lt;span&gt;0x70&lt;/span&gt;, &lt;span&gt;0x18&lt;/span&gt;, &lt;span&gt;0x18&lt;/span&gt;, &lt;span&gt;0x18&lt;/span&gt;, &lt;span&gt;0x18&lt;/span&gt;, &lt;span&gt;0x0e&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x18&lt;/span&gt;, &lt;span&gt;0x18&lt;/span&gt;, &lt;span&gt;0x18&lt;/span&gt;, &lt;span&gt;0x18&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x18&lt;/span&gt;, &lt;span&gt;0x18&lt;/span&gt;, &lt;span&gt;0x18&lt;/span&gt;, &lt;span&gt;0x18&lt;/span&gt;, &lt;span&gt;0x18&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x70&lt;/span&gt;, &lt;span&gt;0x18&lt;/span&gt;, &lt;span&gt;0x18&lt;/span&gt;, &lt;span&gt;0x18&lt;/span&gt;, &lt;span&gt;0x0e&lt;/span&gt;, &lt;span&gt;0x18&lt;/span&gt;, &lt;span&gt;0x18&lt;/span&gt;, &lt;span&gt;0x18&lt;/span&gt;, &lt;span&gt;0x18&lt;/span&gt;, &lt;span&gt;0x70&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x76&lt;/span&gt;, &lt;span&gt;0xdc&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;, &lt;span&gt;0x00&lt;/span&gt;&lt;span&gt;
};

&lt;/span&gt;&lt;span&gt;#define&lt;/span&gt; NULL ((void*)0)
&lt;span&gt;const&lt;/span&gt; unsigned &lt;span&gt;char&lt;/span&gt; *find_ascii_font(unsigned &lt;span&gt;char&lt;/span&gt;&lt;span&gt; c)
{
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(c&amp;lt;(unsigned &lt;span&gt;char&lt;/span&gt;)&lt;span&gt;32&lt;/span&gt; || c&amp;gt;(unsigned &lt;span&gt;char&lt;/span&gt;)&lt;span&gt;126&lt;/span&gt;&lt;span&gt;)
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; NULL;
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; ascii_font+(&lt;span&gt;int&lt;/span&gt;)(c-&lt;span&gt;32&lt;/span&gt;)*&lt;span&gt;16&lt;/span&gt;&lt;span&gt;;
}

&lt;/span&gt;&lt;span&gt;#define&lt;/span&gt; chinese_cnt (sizeof(chinese_font)/sizeof(chinese_font_t))
&lt;span&gt;const&lt;/span&gt; unsigned &lt;span&gt;char&lt;/span&gt; *find_chinese_font(unsigned &lt;span&gt;char&lt;/span&gt; GBH, unsigned &lt;span&gt;char&lt;/span&gt;&lt;span&gt; GBL)
{
        &lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt; x, y, mid;
        unsigned &lt;/span&gt;&lt;span&gt;short&lt;/span&gt;&lt;span&gt; key, key2;

        key &lt;/span&gt;= (unsigned &lt;span&gt;short&lt;/span&gt;)GBH&amp;lt;&amp;lt;&lt;span&gt;8&lt;/span&gt;&lt;span&gt;;
        key &lt;/span&gt;|= (unsigned &lt;span&gt;short&lt;/span&gt;&lt;span&gt;)GBL;
        x &lt;/span&gt;= &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
        y &lt;/span&gt;=&lt;span&gt; chinese_cnt;
        &lt;/span&gt;&lt;span&gt;while&lt;/span&gt;(x&amp;lt;=&lt;span&gt;y) {
                mid &lt;/span&gt;= (x+y)/&lt;span&gt;2&lt;/span&gt;&lt;span&gt;;
                key2 &lt;/span&gt;=  (unsigned &lt;span&gt;short&lt;/span&gt;)chinese_font[mid].GBH&amp;lt;&amp;lt;&lt;span&gt;8&lt;/span&gt;&lt;span&gt;;
                key2 &lt;/span&gt;|=  (unsigned &lt;span&gt;short&lt;/span&gt;&lt;span&gt;)chinese_font[mid].GBL;
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(key&amp;lt;&lt;span&gt;key2)
                        y &lt;/span&gt;= mid-&lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
                &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;(key&amp;gt;&lt;span&gt;key2)
                        x &lt;/span&gt;= mid+&lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
                &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;
                        &lt;span&gt;return&lt;/span&gt;&lt;span&gt; chinese_font[mid].font;
        }
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; NULL;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</description>
<pubDate>Sun, 22 Oct 2017 14:05:00 +0000</pubDate>
<dc:creator>窗户</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/Colin-Cai/p/7704085.html</dc:identifier>
</item>
<item>
<title>dotweb框架之旅 [四] - 常用对象-HttpContext - 基点项目师</title>
<link>http://www.cnblogs.com/pzrr/p/7712203.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/pzrr/p/7712203.html</guid>
<description>&lt;p&gt;dotweb属于一个Web框架，希望通过框架行为，帮助开发人员快速构建Web应用，提升开发效率，减少不必要的代码臃肿。&lt;/p&gt;
&lt;p&gt;框架地址：&lt;a href=&quot;https://github.com/devfeel/dotweb&quot; target=&quot;_blank&quot;&gt;https://github.com/devfeel/dotweb&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;dotweb包含以下几个常用对象：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;App(dotweb) App容器，为Web请求处理提供必要的容器类功能。&lt;/li&gt;
&lt;li&gt;HttpServer 用于真正处理Web请求的服务模块。&lt;/li&gt;
&lt;li&gt;HttpContext 用于提供单次请求处理中请求信息与响应信息的快捷处理与唯一入口。&lt;/li&gt;
&lt;li&gt;Response 用于从服务器向用户发送输出的结果。&lt;/li&gt;
&lt;li&gt;Request 用于从用户那里取得信息。&lt;/li&gt;
&lt;li&gt;Session 用于存储关于某个连接会话的信息，或者修改相关的设置。目前支持存储本机内存与Redis分布式。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;本章主要对HttpContext对象展开介绍。&lt;/p&gt;
&lt;p&gt;HttpContext实现Context接口，主要承担单次请求处理中请求信息、响应信息、全局对象的快捷功能与唯一入口。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;strong&gt;主要方法&lt;/strong&gt;：&lt;/strong&gt;&lt;/p&gt;
&lt;table border=&quot;0&quot; align=&quot;left&quot;&gt;&lt;tbody readability=&quot;23&quot;&gt;&lt;tr align=&quot;center&quot;&gt;&lt;td&gt;方法&lt;/td&gt;
&lt;td&gt;描述&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;
&lt;pre&gt;
HttpServer()
&lt;/pre&gt;&lt;/td&gt;
&lt;td&gt; 获取当前请求所属HttpServer对象&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;
&lt;pre&gt;
Response()
&lt;/pre&gt;&lt;/td&gt;
&lt;td&gt; 获取当前请求的Response对象&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;
&lt;pre&gt;
Request()
&lt;/pre&gt;&lt;/td&gt;
&lt;td&gt; 获取当前请求的Request对象&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;
&lt;pre&gt;
WebSocket()
&lt;/pre&gt;&lt;/td&gt;
&lt;td&gt; 如果是WebSocket连接，返回WebSocket对象&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;
&lt;pre&gt;
HijackConn()
&lt;/pre&gt;&lt;/td&gt;
&lt;td&gt; 如果是Hijack请求，返回Hijack连接对象&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;
&lt;pre&gt;
AppContext()
&lt;/pre&gt;&lt;/td&gt;
&lt;td&gt; 返回全局对象容器&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;
&lt;pre&gt;
Cache()
&lt;/pre&gt;&lt;/td&gt;
&lt;td&gt; 返回全局缓存对象&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;
&lt;pre&gt;
Items()
&lt;/pre&gt;&lt;/td&gt;
&lt;td&gt; 返回当前请求流程内有效的对象容器&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;
&lt;pre&gt;
ViewData()
&lt;/pre&gt;&lt;/td&gt;
&lt;td&gt; 返回用于模板数据传输的对象容器&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;
&lt;pre&gt;
Session()
&lt;/pre&gt;&lt;/td&gt;
&lt;td&gt; 返回当前请求有效的Session对象&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;
&lt;pre&gt;
Redirect()
&lt;/pre&gt;&lt;/td&gt;
&lt;td&gt; 提供跳转支持，默认建议302跳转&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;
&lt;pre&gt;
QueryString()
&lt;/pre&gt;&lt;/td&gt;
&lt;td&gt; 指定Key查询Get参数的值&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;
&lt;pre&gt;
PostFormValue()
&lt;/pre&gt;&lt;/td&gt;
&lt;td&gt; 指定Key查询Post参数的值&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;
&lt;pre&gt;
GetRouterName()
&lt;/pre&gt;&lt;/td&gt;
&lt;td&gt; 指定Key查询动态路由值&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;
&lt;pre&gt;
ReadCookie()
&lt;/pre&gt;&lt;/td&gt;
&lt;td&gt; 指定Key读取Cookie对象&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;
&lt;pre&gt;
Bind()
&lt;/pre&gt;&lt;/td&gt;
&lt;td&gt; 将&lt;span&gt;Json、Xml、Form提交的属性绑定指定结构体&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;
&lt;pre&gt;
Write()
&lt;/pre&gt;&lt;/td&gt;
&lt;td&gt; 指定状态码输出二进制内容&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;5&quot;&gt;&lt;td readability=&quot;5&quot;&gt;
&lt;pre&gt;
WriteString()\WriteStringC()
&lt;/pre&gt;&lt;/td&gt;
&lt;td&gt; 输出字符串，默认&lt;span&gt;text/plain，其中以C结尾的方法支持设置状态码&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;
&lt;pre&gt;
WriteHtml()\WriteHtmlC()
&lt;/pre&gt;&lt;/td&gt;
&lt;td&gt; 输出Html字符串，默认&lt;span&gt;text/html，其中以C结尾的方法支持设置状态码&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;
&lt;pre&gt;
WriteJson()\WriteJsonC()
&lt;/pre&gt;&lt;/td&gt;
&lt;td&gt; 输出Json字符串，默认&lt;span&gt;application/json，其中以C结尾的方法支持设置状态码&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;
&lt;pre&gt;
WriteJsonp()
&lt;/pre&gt;&lt;/td&gt;
&lt;td&gt; 输出适配Jsonp的字符串&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;
&lt;pre&gt;
View()ViewC()
&lt;/pre&gt;&lt;/td&gt;
&lt;td&gt; 指定模板名称输出Html内容，其中以C结尾的方法支持设置状态码&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;






























&lt;p&gt;&lt;strong&gt;&lt;span&gt;常用功能示例：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1、获取Get参数值&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;func Index(ctx dotweb.Context) error {
    userid :&lt;/span&gt;= ctx.QueryString(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;userid&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
    ctx.WriteString(userid)
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; nil
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 2、获取Post参数值&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;func Index(ctx dotweb.Context) error {
    userid :&lt;/span&gt;= ctx.PostFormValue(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;userid&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
    ctx.WriteString(userid)
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; nil
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 3、获取Post Body&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;func Index(ctx dotweb.Context) error {
    data :&lt;/span&gt;=&lt;span&gt; ctx.Request().PostBody()
    ctx.Write(&lt;/span&gt;&lt;span&gt;200&lt;/span&gt;&lt;span&gt;, data)
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; nil
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 4、获取上传的文件&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;func Index(ctx dotweb.Context) error {
    file, err :&lt;/span&gt;= ctx.Request().FormFile(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;filekey&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; err !=&lt;span&gt; nil {
        ctx.WriteString(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;upload file error:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, err.Error())
    } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
        ctx.WriteString(file.FileName())
    }
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; nil
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 5、读取Cookie&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;func Index(ctx dotweb.Context) error {
    c, err :&lt;/span&gt;= ctx.ReadCookie(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;UserName&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; err!=&lt;span&gt; nil{
        ctx.WriteString(err.Error())
    }&lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
        ctx.WriteString(c.Value)
    }
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; nil
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 6、写入Session值&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;func Index(ctx dotweb.Context) error {
    ctx.Session().Set(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;UserID&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;1&lt;/span&gt;&lt;span&gt;)
    ctx.WriteString(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;set session success&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; nil
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 7、输出字符串（默认200状态码）&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;func Index(ctx dotweb.Context) error {
    ctx.WriteString(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;welcome to dotweb&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; nil
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 8、输出Json字符串（默认200状态码）&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;func Index(ctx dotweb.Context) error {
    type User &lt;/span&gt;&lt;span&gt;struct&lt;/span&gt;&lt;span&gt; {
        UserName &lt;/span&gt;&lt;span&gt;string&lt;/span&gt;&lt;span&gt;
        Age &lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt;
    }
    u:&lt;/span&gt;=&amp;amp;&lt;span&gt;User{
        UserName:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;dotweb&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
        Age:&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;,
    }
    ctx.WriteJson(u)
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; nil
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 9、指定模板名称输出Html字符串&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;45&quot;&gt;
&lt;pre&gt;
type UserInfo &lt;span&gt;struct&lt;/span&gt;&lt;span&gt; {
    UserName &lt;/span&gt;&lt;span&gt;string&lt;/span&gt;&lt;span&gt;
    Sex      &lt;/span&gt;&lt;span&gt;bool&lt;/span&gt;&lt;span&gt;
}

type BookInfo &lt;/span&gt;&lt;span&gt;struct&lt;/span&gt;&lt;span&gt; {
    Name &lt;/span&gt;&lt;span&gt;string&lt;/span&gt;&lt;span&gt;
    Size int64
}

func TestView(ctx dotweb.Context) error {
    ctx.ViewData().Set(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;data&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;图书信息&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
    ctx.ViewData().Set(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;user&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &amp;amp;UserInfo{UserName: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;user1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, Sex: &lt;span&gt;true&lt;/span&gt;&lt;span&gt;})
    m :&lt;/span&gt;= make([]*BookInfo, &lt;span&gt;5&lt;/span&gt;&lt;span&gt;)
    m[&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;] = &amp;amp;BookInfo{Name: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;book0&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, Size: &lt;span&gt;1&lt;/span&gt;&lt;span&gt;}
    m[&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;] = &amp;amp;BookInfo{Name: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;book1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, Size: &lt;span&gt;10&lt;/span&gt;&lt;span&gt;}
    m[&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;] = &amp;amp;BookInfo{Name: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;book2&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, Size: &lt;span&gt;100&lt;/span&gt;&lt;span&gt;}
    m[&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;] = &amp;amp;BookInfo{Name: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;book3&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, Size: &lt;span&gt;1000&lt;/span&gt;&lt;span&gt;}
    m[&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;] = &amp;amp;BookInfo{Name: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;book4&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, Size: &lt;span&gt;10000&lt;/span&gt;&lt;span&gt;}
    ctx.ViewData().Set(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Books&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, m)

    err :&lt;/span&gt;= ctx.View(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;testview.html&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; err
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 10、跳转地址&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;func Redirect(ctx dotweb.Context) error {
    err :&lt;/span&gt;= ctx.Redirect(http.StatusFound, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;http://www.baidu.com&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; err !=&lt;span&gt; nil {
        ctx.WriteString(err)
    }
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; err
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 11、设置Header&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;func Index(ctx dotweb.Context) error {
    ctx.Response().Header().Set(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Content-Type&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text/html; charset=utf-8&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
    ctx.WriteString(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;welcome to dotweb&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; nil
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 以上简单示例，展示了如何通过Context获取请求信息，设置输出信息，使用Session等。&lt;/p&gt;

&lt;p&gt;更多代码可参考 &lt;a href=&quot;https://github.com/devfeel/dotweb-example&quot; target=&quot;_blank&quot;&gt;https://github.com/devfeel/dotweb-example&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;欢迎各位加入我们的go语言QQ群：193409346&lt;/p&gt;

</description>
<pubDate>Sun, 22 Oct 2017 14:03:00 +0000</pubDate>
<dc:creator>基点项目师</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/pzrr/p/7712203.html</dc:identifier>
</item>
</channel>
</rss>