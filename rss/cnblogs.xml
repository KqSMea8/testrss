<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>实现pc端信纸留言板 - Y.zoro</title>
<link>http://www.cnblogs.com/yzoro/p/9051454.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/yzoro/p/9051454.html</guid>
<description>&lt;p&gt;效果如图:&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;img-responsive&quot; src=&quot;https://know.qi-cloud.org/image/show/attachments-2018-01-aqiUQJhq5a4aef7f1b711.png&quot; alt=&quot;attachments-2018-01-aqiUQJhq5a4aef7f1b711.png&quot;/&gt;&lt;/p&gt;

&lt;p&gt;我好像在哪里见过这样的形式，但却从来没有想过怎么实现，有种莫名的兴奋感。怎么控制什么时候换行，怎么控制中间的线条，这些视乎都是CSS无法实现的，我陷入了死局。寻找JS的做法，JS的挺复杂的，大致思路：模拟一个延时模拟一个光标闪动，然后监听客户输入文字数量，通过计算控制换行。难点：中英文的字符长度不一致，你永远不知道客户会输入什么。不足：无论是延时还是计算都太消耗浏览器内存。&lt;br/&gt;以下是我对CSS个人理解:我觉得无论是交互还是布局都应该由CSS来实现，js最多承担开启这些交互的开关。因此这里我决定用CSS解决。只要用文本域就可以轻松解决换行问题，接下来就只需处理行高和线条的问题了。&lt;/p&gt;
&lt;p&gt;html：&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;img-responsive&quot; src=&quot;https://know.qi-cloud.org/image/show/attachments-2018-01-wJOvVM4m5a4b02175043a.png&quot; alt=&quot;attachments-2018-01-wJOvVM4m5a4b02175043a.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;css：&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;img-responsive&quot; src=&quot;https://know.qi-cloud.org/image/show/attachments-2018-01-Nm8cq22l5a4b0501e1eab.png&quot; alt=&quot;attachments-2018-01-Nm8cq22l5a4b0501e1eab.png&quot;/&gt;&lt;/p&gt;

&lt;p&gt;思路：       &lt;/p&gt;
&lt;p&gt;通过设置文本域的行高来控制行高，然后用div做三条线，设置高度与文本域行高度减去1px边框，然后通过maxlength控制输入总字数，然后用letter-spacing控制字符中间的间距填充。&lt;/p&gt;
&lt;p&gt;要注意的地方:&lt;/p&gt;
&lt;p&gt; 我们既可以点文本域，又要看到定位在文本域上div的线，所以我们要把文本域的层级设的比div的线高，然后把文本域的背景设为透明色，这样既可看到线的同时也可以点到文本域。&lt;/p&gt;
&lt;p&gt;优势：         &lt;/p&gt;
&lt;p&gt;减少代码的复杂度，性能更加优化，弥补Js所有的不足。&lt;/p&gt;
&lt;p&gt;不足：           &lt;/p&gt;
&lt;p&gt;通用性不够好，移动端存在光标过长的问题。&lt;/p&gt;
&lt;p&gt;后续：&lt;/p&gt;
&lt;p&gt;关于移动端文本域行高影响到光标长度问题还没有得到解决，css就是这么神奇，有些东西的出现是没有根据可行的，只有不断积累，不断成长，路漫漫其修远兮 吾将上下而求索。&lt;/p&gt;
</description>
<pubDate>Thu, 17 May 2018 07:41:00 +0000</pubDate>
<dc:creator>Y.zoro</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/yzoro/p/9051454.html</dc:identifier>
</item>
<item>
<title>全方位分析web前端如何进行性能优化 - 小苏打00</title>
<link>http://www.cnblogs.com/nana-share/p/9051435.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/nana-share/p/9051435.html</guid>
<description>&lt;h2&gt;前言：&lt;/h2&gt;
&lt;h2&gt;最近刚刚完成项目，空闲一段时间，想起之前有被问起怎么对前端进行性能优化，自己也是脑中零零散散的总不成体系，现特来总结，欢迎补充指教。&lt;/h2&gt;

&lt;p&gt;&lt;span&gt;1、整体资源&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　（1）js、css源码压缩&lt;/p&gt;
&lt;p&gt;　　（2）css文件放到文档顶部，js 文件放到文档底部&lt;/p&gt;
&lt;p&gt;　　　　因为浏览器渲染网页是自上而下的，用户第一眼见到的是页面，先加载页面相关的提高页面加载速度，另外避免js在页面没有完全加载完成操作DOM带来错误&lt;/p&gt;
&lt;p&gt;　　（3）进行CDN托管（具体可参看https://div.io/topic/930）&lt;/p&gt;
&lt;p&gt;　　（4）data缓存&lt;/p&gt;

&lt;p&gt;&lt;span&gt;2、css&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;（1）避免使用css expression (css 表达式) &lt;/p&gt;
&lt;p&gt;        微软在IE5时支持，IE8就不支持了，过老的内核，这个基本没有人会使用&lt;/p&gt;
&lt;p&gt; （2）使用CSS Sprites（图片精灵）&lt;/p&gt;
&lt;p&gt;　　将图片合到一张大图，并且控制图片大小（在满足显示的情况下，过大图片可以进行质量压缩），目的减小体积，减小http访问次数&lt;/p&gt;
&lt;p&gt; （3）js中动态改变元素样式时，使用类名修改，而不是直接在DOM中更改css 属性，避免页面进行重构&lt;/p&gt;

&lt;p&gt;&lt;span&gt;3、image&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;    （1）大型web应用中,可以搭建图片服务器，存放图片以及视频资源（具体实施请自行百度）&lt;/p&gt;

&lt;p&gt;&lt;span&gt;4、js&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;（1）模块化编程，养成封装方法的习惯，提高代码的重复利用率&lt;/p&gt;
&lt;p&gt;（2）减少闭包的使用频率，减少内存占用&lt;/p&gt;

&lt;p&gt;目前想到的是以上，欢迎补充和指教！&lt;/p&gt;
</description>
<pubDate>Thu, 17 May 2018 07:38:00 +0000</pubDate>
<dc:creator>小苏打00</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/nana-share/p/9051435.html</dc:identifier>
</item>
<item>
<title>RabbitMQ入门：认识并安装RabbitMQ（以Windows系统为例） - JAVA开发老菜鸟</title>
<link>http://www.cnblogs.com/sam-uncle/p/9050242.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/sam-uncle/p/9050242.html</guid>
<description>&lt;p&gt;项目需求刚刚递交，新需求还没来。闲下来了，写写博客放松下。&lt;/p&gt;
&lt;p&gt;===========华丽的分割线=================&lt;/p&gt;
&lt;p&gt;最近在学习Spring Cloud，其中消息总线Spring Cloud Bus是必不可少的，但是Spring Cloud Bus目前只支持RabbitMQ和kafka，因此学习RabbitMQ势在必行，今天先从最基本的安装开始。安装之前我们先认识下RabbitMQ。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;一、初识RabbitMQ&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;百度百科有这么一句话：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
MQ是消费-&lt;span&gt;生产者模型的一个典型的代表，一端往消息队列中不断写入消息，
而另一端则可以读取或者订阅队列中的消息。
MQ和JMS类似，但不同的是JMS是SUN JAVA消息中间件服务的一个标准和API定义，
而MQ则是遵循了AMQP协议的具体实现和产品。&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;他的官网中用大大的黑粗字体写着：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
RabbitMQ &lt;span&gt;is&lt;/span&gt; the most widely deployed open source message broker.
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;由此可见，RabbitMQ是一个消息中间件，生产者生成消息，消费者消费消息，它遵循AMQP（高级消息队列协议），是最广泛部署的开源消息代理。&lt;/p&gt;
&lt;p&gt;另外，RabbitMQ是用Erlang语言实现的，它有几个概念：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;    broker：消息队列服务器实体。
　　exchange：消息交换机，它指定消息按什么规则，路由到哪个队列。
　　queue：消息队列，每个消息都会被投入到一个或多个队列。
　　binding：绑定，它的作用就是把exchange和queue按照路由规则绑定起来。
　　routing Key：路由关键字，exchange根据这个关键字进行消息投递。
　　vhost：虚拟主机，一个broker里可以开设多个vhost，用作不同用户的权限分离。
　　producer：消息生产者，就是投递消息的程序。
　　consumer：消息消费者，就是接受消息的程序。
　　channel：消息通道，在客户端的每个连接里，可建立多个channel，每个channel代表一个会话任务。&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;消息队列的使用过程大概如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
（&lt;span&gt;1&lt;/span&gt;&lt;span&gt;）客户端连接到消息队列服务器broker，打开一个channel。
（&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;）客户端声明一个exchange，并设置相关属性。
（&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt;）客户端声明一个queue，并设置相关属性。
（&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;&lt;span&gt;）客户端使用routing key，在exchange和queue之间建立好绑定关系。
（&lt;/span&gt;&lt;span&gt;5&lt;/span&gt;&lt;span&gt;）客户端投递消息到exchange。
（&lt;/span&gt;&lt;span&gt;6&lt;/span&gt;）exchange接收到消息后，就根据消息的key和已经设置的binding，进行消息路由，将消息投递到一个或多个队列里。
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;二、安装RabbitMQ（以Windows为例）&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;由于RabbitMQ是用Erlang语言编写的，因此需要先安装Erlang。&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;通过&lt;a href=&quot;http://www.erlang.org/downloads&quot; target=&quot;_blank&quot;&gt;http://www.erlang.org/downloads&lt;/a&gt;获取对应安装文件进行安装&lt;/li&gt;
&lt;li&gt;增加环境变量ERLANG_HOME=D:\Program Files\erl9.3(这里的目录是我的安装目录，你要换成自己的目录)&lt;/li&gt;
&lt;li&gt;修改环境变量Path，在原来的值后面加上“&lt;span&gt;;%ERLANG_HOME%\bin&lt;/span&gt;”&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;安装完Erlang之后，我们就可以安装RabbitMQ了。&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;到&lt;a href=&quot;http://www.rabbitmq.com/install-windows-manual.html&quot; target=&quot;_blank&quot;&gt;http://www.rabbitmq.com/install-windows-manual.html&lt;/a&gt;下载安装包进行安装&lt;/li&gt;
&lt;li&gt;增加环境变量RABBITMQ_HOEM=D:\Program Files\RabbitMQ Server\rabbitmq_server-3.7.5(这里的目录是我的安装目录，你要换成自己的目录)&lt;/li&gt;
&lt;li&gt;修改环境变量Path，在原来的值后面加上“&lt;span&gt;;%RABBITMQ_HOME%\sbin&lt;/span&gt;”&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;安装好之后，RabbitMQ就作为一个服务按照默认方式进行启动了&lt;img src=&quot;https://images2018.cnblogs.com/blog/1345071/201805/1345071-20180517135403143-708551043.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;三、启动管理页面&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; 我们可以通过Web进行管理RabbitMQ：&lt;/p&gt;
&lt;ol readability=&quot;-1.5&quot;&gt;&lt;li&gt;运行命令rabbitmq-plugins enable rabbitmq_management 开启Web管理插件&lt;img src=&quot;https://images2018.cnblogs.com/blog/1345071/201805/1345071-20180517140829122-354236801.png&quot; alt=&quot;&quot;/&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;通过浏览器访问http://localhost:15672，并通过默认用户guest进行登录，密码也是guest，登录后的页面：&lt;img src=&quot;https://images2018.cnblogs.com/blog/1345071/201805/1345071-20180517140943822-709091716.png&quot; alt=&quot;&quot;/&gt;页面中有我们前面提到的基本概念，比如channels/exchanges/queues等，可以逐个点进去看下详细情况。
&lt;p&gt;如果要添加新用户的话，点击Admin选项卡，进行添加，详细的不再叙述，相信大家一看就能懂。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;就这样，RabbitMQ安装完毕。下一篇随笔将介绍下怎么&lt;a href=&quot;http://www.cnblogs.com/sam-uncle/p/9051231.html&quot; target=&quot;_blank&quot;&gt;通过Spring Boot整合RabbitMQ&lt;/a&gt;。&lt;/p&gt;
</description>
<pubDate>Thu, 17 May 2018 07:35:00 +0000</pubDate>
<dc:creator>JAVA开发老菜鸟</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/sam-uncle/p/9050242.html</dc:identifier>
</item>
<item>
<title>从架构特点到功能缺陷，重新认识分析型分布式数据库 - 海边的Ivan</title>
<link>http://www.cnblogs.com/ivan-uno/p/9051225.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/ivan-uno/p/9051225.html</guid>
<description>&lt;h2 id=&quot;写在前面&quot;&gt;写在前面&lt;/h2&gt;
&lt;p&gt;本文是分布式数据库的总纲文章的第一部分，主要探讨分析性分布式数据库的发展和技术差异；第二部分则是交易性数据库的一些关键特性分析。Ivan开始计划的分布式数据库是不含分析场景的，所以严格来说本篇算是番外篇，后续待条件具备将以独立主题的方式展开。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;特别说明：本文是原创文章，首发在DBAplus社群，转载须获得作者同意。&lt;/strong&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;h2 id=&quot;正文&quot;&gt;正文&lt;/h2&gt;
&lt;p&gt;随着大规模互联网应用的广泛出现，分布式数据库成为近两年的一个热门话题。同样，在银行业主推X86限制主机与小型机的背景下，传统的单机数据库逐渐出现了一些瓶颈，马上会面临是否引入分布式数据库的问题。&lt;/p&gt;
&lt;p&gt;近期，Ivan在个人公众号就“银行引入分布式数据库的必要性”做过一些展望，并收到了一些朋友的反馈，除了对分布式数据库具体技术探讨外，还有一类很有趣的建议，“能不能也讲讲Teradata、Greenplum这类MPP，这些也是分布式数据库，但老板总是认为OLTP场景下的才算数”。&lt;/p&gt;
&lt;p&gt;的确，为了解决OLAP场景需求，其实很早就出现了分布式架构的产品和解决方案，其与目前的OLTP方案有很多共通的地方。而且Ivan相信，今后OLAP和OLTP两个分支技术的发展也必然是交错前行，可以相互借鉴的。&lt;/p&gt;
&lt;p&gt;鉴于此，本文会将OLAP类场景的分布式数据也纳入进来，从两个维度对“分布式数据库”进行拆解，第一部分会横向谈谈不同的“分布式数据库”，把它们分为五类并对其中OLAP场景的三类做概要分析；第二部分结合NoSQL与NewSQL的差异，纵向来谈谈OLTP场景“分布式数据库”实现方案的关键技术要点，是前文的延伸，也是分布式数据库专题文章的一个总纲，其中的要点也都会单独撰文阐述。&lt;/p&gt;
&lt;p&gt;首先，Ivan们从横向谈谈不同的“分布式数据库”：&lt;/p&gt;
&lt;h3 id=&quot;一万法同宗rdbms&quot;&gt;一、万法同宗RDBMS&lt;/h3&gt;
&lt;p&gt;1990年代开始，关系型数据库（RDBMS）成为主流，典型的产品包括Sybase、Oracle、DB2等，同期大约也是国内IT产业的起步阶段。RDBMS的基本特征已有学术上的定义，这里不再赘述。&lt;/p&gt;
&lt;p&gt;但从实际应用的角度看，Ivan认为有两点最受关注：&lt;/p&gt;
&lt;ol readability=&quot;-0.5&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;内部以关系模型存储数据，对外支持ANSI SQL接口；&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;支持事务管理ACID特性，尤其是强一致性（指事务内的修改要么全部失败要么全部成功，不会出现中间状态）。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;而后出现的各种“分布式数据库”，大多都是在这两点上做权衡以交换其他方面的能力。&lt;/p&gt;
&lt;p&gt;“数据库”虽然有经典定义，但很多大数据产品或许是为了标榜对传统数据库部分功能的替代作用，也借用了“数据库”的名号，导致在实践中这个概念被不断放大，边界越来越模糊。本文一个目标是要厘清这些产品与经典数据库的差异与传承，所以不妨先弱化“数据库”，将其放大为“数据存储”。&lt;/p&gt;
&lt;p&gt;那么怎样才算是“分布式数据存储”系统？&lt;/p&gt;
&lt;p&gt;“分布式”是一种架构风格，用其实现“数据存储”，最现实的目的是为了打开数据库产品的性能天花板，并保证系统的高可靠，进一步展开，“分布式数据库”的必要条件有两点：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;支持水平扩展，保证高性能&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;通过增加机器节点的方式提升系统整体处理能力，摆脱对专用设备的依赖，并且突破专用设备方案的性能上限。这里的机器节点，通常是要支持X86服务器。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;廉价设备+软件，保证高可靠&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;在单机可靠性较低的前提下，依靠软件保证系统整体的高可靠，又可以细分为“数据存储的高可靠”和“服务的高可靠”。总之，任何单点的故障，可能会带来短时间、局部的服务水平下降，但不会影响系统整体的正常运转。&lt;/p&gt;
&lt;p&gt;将这两点作为“分布式数据库”的必要条件，Ivan大致归纳了一下，至少有五种不同的“分布式数据库”：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;
&lt;p&gt;NoSQL&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;NewSQL&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;MPP&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Hadoop技术生态&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Like-Mesa&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;注：也许有些同学会提到Kafka、Zookeeper等，这些虽然也是分布式数据存储，但因为具有鲜明的特点和适用场景，无需再纳入“数据库”概念进行探讨。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这五类中，前两类以支持OLTP场景为主，后三类则以OLAP场景为主。Ivan将按照时间线，主要对OLAP场景下的三类进行概要分析。&lt;/p&gt;
&lt;h3 id=&quot;二olap场景下的分布式数据库&quot;&gt;二、OLAP场景下的分布式数据库&lt;/h3&gt;
&lt;p&gt;1990-2000年代，随着应用系统广泛建设与深入使用，数据规模越来越大，国内银行业的“全国大集中”基本都是在这个阶段完成。这期间，RDBMS得到了广泛运用，Oracle也击败Sybase成为数据库领域的王者。&lt;/p&gt;
&lt;p&gt;在满足了基本的交易场景后，数据得到了累积，进一步的分析性需求自然就涌现了出来。单一数据库内同时支持联机交易和分析需求存在很多问题，往往会造成对联机交易的干扰，因此需要新的解决方案。这就为MPP崛起提供了机会。&lt;/p&gt;
&lt;h4 id=&quot;mpp&quot;&gt;1. MPP&lt;/h4&gt;
&lt;p&gt;MPP（Massively Parallel Processing）是指多个处理器（或独立的计算机）并行处理一组协同计算[1]。&lt;/p&gt;
&lt;p&gt;为了保证各节点的独立计算能力，MPP数据库通常采用ShareNothing架构，最为典型的产品是Teradata（简称TD），后来也出现Greenplum（简称GPDB）、Vertica、Netezza等竞争者。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;架构特点：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;MPP是多机可水平扩展的架构，符合“分布式”的基本要求，其中TD采用外置集中存储而GPDB直接使用本地磁盘，从这点来说GPDB是更彻底的Share Nothing架构。&lt;/p&gt;
&lt;p&gt;考虑到TD商业策略上采用一体机方案，不具有开放性，而GPDB具有较高的开源程度，下文中通过分析后者架构特点来分析MPP工作机制。&lt;/p&gt;
&lt;p&gt;GPDB属于主从架构[2]，Slave称为Segment是主要的数据加工节点，是在PostgreSQL基础上的封装和修改，天然具备事务处理的能力，可进行水平扩展；集群内有唯一Active状态的Master节点，除了元数据存储和调度功能外，同时承担一定的工作负载，即所有外部对集群的数据联机访问都要经过Master节点。&lt;/p&gt;
&lt;p&gt;在高可靠设计方面，首先设置了Standby Master节点，在Master节点宕机时接管其任务，其次将Segment节点则细分为两类不同角色Primary和Mirror，后者是前者的备节点，数据提交时在两者间进行强同步，以此保证Primary宕机时，Mirror可以被调度起来接替前者的任务。&lt;br/&gt;&lt;/p&gt;
&lt;div align=&quot;center&quot;&gt;&lt;br/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1314124/201805/1314124-20180517151051952-786766447.png&quot;/&gt;&lt;br/&gt;&lt;/div&gt;
&lt;p&gt;数据分析性需求对IT能力的要求包括：&lt;/p&gt;
&lt;p&gt;MPP较好的实现了对上述能力的支撑，在前大数据时代得到了广泛的应用，但这个时期的数据总量相对仍然有限，普遍在TB级别，对应的集群规模也通常在单集群百节点以下。&lt;/p&gt;
&lt;p&gt;随着数据价值关注度的不断提升，越来越多的数据被纳入企业分析范围；同时实际应用中考虑到数据存储和传输成本，往往倾向于将数据集中在一个或少数几个集群中，这样推动了集群规模的快速增长。&lt;/p&gt;
&lt;p&gt;在大规模集群（几百至上千）的使用上，MPP从批处理和联机访问两个方面都显现了一些不足。以下内容主要借鉴了Pivotal（GPDB原厂）的一篇官方博客[3]。&lt;/p&gt;
&lt;p&gt;注：有位同学给出的译文也具有较好的质量，推荐阅读[4]。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;缺陷：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;MPP架构下，工作负载节点（对GPDB而言是Segment节点）是完全对称的，数据均匀的存储在这些节点，处理过程中每个节点（即该节点上的Executor）使用本地的CPU、内存和磁盘等资源完成本地的数据加工。这个架构虽然提供了较好的扩展性，但隐藏了极大的问题——Straggler，即当某个节点出现问题导致速度比其他节点慢时，该节点会成为Straggler。&lt;/p&gt;
&lt;p&gt;此时，无论集群规模多大，批处理的整体执行速度都由Straggler决定，其他节点上的任务执行完毕后则进入空闲状态等待Straggler，而无法分担其工作。导致节点处理速度降低的原因多数是磁盘等硬件损坏，考虑到磁盘本身的一定故障率（根据Google统计前三个月内2%损坏率，第二年时达到8%）当集群规模达到一定程度时，故障会频繁出现使straggler成为一个常规问题。&lt;/p&gt;
&lt;p&gt;由于MPP的“完全对称性”，即当查询开始执行时，每个节点都在并行的执行完全相同的任务，这意味着MPP支持的并发数和集群的节点数完全无关。根据该文中的测试数据，4个节点的集群和400个节点的集群支持的并发查询数是相同的，随着并发数增加，这二者几乎在相同的时点出现性能骤降。&lt;/p&gt;
&lt;p&gt;传统MPP的联机查询主要面向企业管理层的少数用户，对并发能力的要求较低。而在大数据时代，数据的使用者从战略管理层转向战术执行层乃至一线人员，从孤立的分析场景转向与业务交易场景的融合。对于联机查询的并发能力已经远超MPP时代，成为OLAP场景分布式数据库要考虑的一个重要问题。&lt;/p&gt;
&lt;p&gt;除上述两点以外，GPDB架构中的Master节点承担了一定的工作负载，所有联机查询的数据流都要经过该节点，这样Master也存在一定的性能瓶颈。同时，在实践中GPDB对数据库连接数量的管理也是非常谨慎的。在Ivan曾参与的项目中，Pivotal专家给出了一个建议的最大值且不会随着集群规模扩大而增大。&lt;/p&gt;
&lt;p&gt;综上，大致可以得出结论，MPP（至少是GPDB）在集群规模上是存在一定限制的。&lt;/p&gt;
&lt;p&gt;2000-2010年代，大多数股份制以上银行和少部分城商行都建立了数据仓库或ODS系统，主要采用了MPP产品。可以说，这十余年是MPP产品最辉煌的时代。到目前为止，MPP仍然是银行业建设数据仓库和数据集市类系统的主要技术选择。为了规避MPP并发访问上的缺陷以及批量任务对联机查询的影响，通常会将数据按照应用粒度拆分到不同的单体OLTP数据库中以支持联机查询。&lt;/p&gt;
&lt;h4 id=&quot;hadoop生态体系&quot;&gt;2. Hadoop生态体系&lt;/h4&gt;
&lt;p&gt;MPP在相当长的一段时期内等同于一体机方案（以TD为代表），其价格高昂到普通企业无法承受，多数在银行、电信等行业的头部企业中使用。2010年代，随着大数据时代的开启，Hadoop生态体系以开源优势，获得了蓬勃发展和快速普及。&lt;/p&gt;
&lt;p&gt;Hadoop技术体系大大降低了数据分析类系统的建设成本，数据分析挖掘等工作由此步入“数据民主化”时代。在Hadoop生态体系中，分析需求所需要的能力被拆分为批量加工和联机访问，通过不同的组件搭配实现。批量加工以MapReduce、Tez、Spark等为执行引擎，为了获得友好的语义支持，又增加了Hive、SparkSQL等组件提供SQL访问接口。&lt;/p&gt;
&lt;p&gt;联机访问部分，则从早期Hive过渡到Impala、Hawk以及Kylin、Presto等方案逐渐降低了访问延时。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;架构特点：&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Hadoop生态体系下HDFS、Spark、Hive等组件已经有很多文章介绍，本文不再赘述。总的来说，其架构的着力点在于数据高吞吐处理能力，在事务方面相较MPP更简化，仅提供粗粒度的事务管理。&lt;/p&gt;
&lt;p&gt;Hadoop也有其明显的缺陷，主要是三点：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;批量加工效率较低&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;MPP的拥护者往往会诟病Hadoop计算引擎执行效率低。的确，在同等规模的集群执行相同的数据加工逻辑，即使与Spark对比，MPP所耗费的时间也会明显更少些[3]，其主要的原因在于两者对于数据在磁盘和内存中的组织形式不同。&lt;/p&gt;
&lt;p&gt;MPP从RDBMS而来（例如Vertica和GPDB都是基于PostgreSQL开发），对数据的组织形式更贴近传统方式，按区、段、块等单位组织，对数据进行了预处理工作以提升使用时的效率；Hadoop生态体系以HDFS文件存储为基础，HDFS并不像传统数据库那样独立管理一块连续的磁盘空间，而是将数据表直接映射成不同的数据文件，甚至表分区也以目录、文件等方式体现。&lt;/p&gt;
&lt;p&gt;HDFS最简单的txt格式干脆就是平铺的数据文件，处理过程难免要简单粗暴一些，但随着Avro、ORCFile、Parquet等很多新的存储格式相继被引入，基于HDFS的批处理也更加精细。从整体架构来看，Hadoop更加看重大数据量批量处理的吞吐能力。&lt;/p&gt;
&lt;p&gt;同时，Hadoop具备MPP所缺失的批量任务调整能力，数据的多副本存储使其具有更多“本地化”数据加工的备选节点，而且数据加工处理与数据存储并不绑定，可以根据节点的运行效率动态调整任务分布，从而在大规模部署的情况下具有整体上更稳定的效率。相比之下，MPP在相对较小的数据量下具有更好的执行效率。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;不能无缝衔接EDW实施方法论&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;在长期的实践中，企业级市场的主流集成商针对EDW项目沉淀了一套固定的实施方法，与MPP特性相匹配，但Hadoop并不能与之无缝对接。一个最典型的例子是历史数据的存储，传统方法是采用“拉链表”的形式，即对于当前有效的数据会记录其生效的起始时间，在数据被更改或删除后，在该行记录的另外一列记录失效时间。这样，当前数据即变更为历史数据，通过这种增量的表述方式，节省了大量的存储空间和磁盘IO。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1314124/201805/1314124-20180517151317651-583210483.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;可以看出，拉链表的设计思想其实与基于时间戳的MVCC机制是相同的。&lt;/p&gt;
&lt;p&gt;HDFS作为Hadoop的存储基础，其本身不提供Update操作，这样所有在数据操作层面的Update最终会被转换为文件层面的Delete和Insert操作，效率上显著降低。据Ivan所知，在很多企业实践中会将这种增量存储转换为全量存储，带来大量数据冗余的同时，也造成实施方法上的变更。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;联机查询并发能力不足&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;对于联机查询场景，最常见的是SQL on Hadoop方案，将Impala、HAWQ等MPP引擎架设在HDFS基础上，批量数据与联机查询共用一份数据。MPP引擎借鉴了MPP数据库的设计经验，相对Hive等组件提供了更低的延迟。但存在一个与MPP相同的问题，即并发能力不足。&lt;/p&gt;
&lt;p&gt;通过一些项目测试中，Ivan发现在大体相同的数据量和查询逻辑情况下， Impala并发会低于GPDB。其原因可能是多方面的，不排除存在一些调优空间，但在系统架构层面也有值得探讨的内容。例如在元数据读取上，Impala复用了Hive MetaStore，但后者提供的访问服务延时相对较长，这也限制了Impala的并发能力[7]。&lt;/p&gt;
&lt;h4 id=&quot;like-mesa&quot;&gt;3. Like-Mesa&lt;/h4&gt;
&lt;p&gt;Mesa是Google开发的近实时分析型数据仓库，2014年发布了论文披露其设计思想[5]，其通过预聚合合并Delta文件等方式减少查询的计算量，提升了并发能力。&lt;/p&gt;
&lt;p&gt;Mesa充分利用了现有的Google技术组件，使用BigTable来存储所有持久化的元数据，使用了Colossus (Google的分布式文件系统)来存储数据文件，使用MapReduce来处理连续的数据。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1314124/201805/1314124-20180517151404732-1036633374.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Mesa相关的开源产品为Clickhouse[6]（2016年Yandex开源）和Palo[7]（2017年百度开源）。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;架构特点：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;目前ClickHouse的资料仍以俄语社区为主，为便于大家理解和进一步研究，下面主要以Palo为例进行说明。&lt;/p&gt;
&lt;p&gt;Palo没有完全照搬Mesa的架构设计的思路，其借助了Hadoop的批量处理能力，但将加工结果导入到了Palo自身存储，专注于联机查询场景，在联机查询部分主要借鉴了Impala技术。同时Palo没有复用已有的分布式文件系统和类BigTable系统，而是设计了独立的分布式存储引擎。虽然数据存储上付出了一定的冗余，但在联机查询的低延迟、高并发两方面都得到了很大的改善。&lt;/p&gt;
&lt;p&gt;Palo在事务管理上与Hadoop体系类似，数据更新的原子粒度最小为一个数据加载批次，可以保证多表数据更新的一致性。&lt;/p&gt;
&lt;p&gt;整体架构由Frontend和Backend两部分组成，查询编译、查询执行协调器和存储引擎目录管理被集成到Frontend；查询执行器和数据存储被集成到Backend。Frontend负载较轻，通常配置下，几个节点即可满足要求；而Backend作为工作负载节点会大幅扩展到几十至上百节点。数据处理部分与Mesa相同采用了物化Rollup（上卷表）的方式实现预计算。&lt;br/&gt;&lt;/p&gt;
&lt;div align=&quot;center&quot;&gt;&lt;br/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1314124/201805/1314124-20180517151457949-171072629.jpg&quot;/&gt;&lt;br/&gt;&lt;/div&gt;
&lt;p&gt;Palo和ClickHouse都宣称实现了MPP Data Warehouse，但从架构上看已经与传统的MPP发生很大的变化，几乎完全舍弃了批量处理，专注于联机部分。&lt;/p&gt;
&lt;p&gt;ClickHouse和Palo作为较晚出现的开源项目，还在进一步发展过程中，设定的使用场景以广告业务时序数据分析为主，存在一定局限性，但值得持续关注。&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;文献参考：&lt;/p&gt;
&lt;p&gt;[1] &lt;a href=&quot;http://en.wikipedia.org/wiki/Massively_parallel&quot; class=&quot;uri&quot;&gt;http://en.wikipedia.org/wiki/Massively_parallel&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[2] &lt;a href=&quot;http://greenplum.org/gpdb-sandbox-tutorials/introduction-greenplum-database-architecture/#ffs-tabbed-11&quot; class=&quot;uri&quot;&gt;http://greenplum.org/gpdb-sandbox-tutorials/introduction-greenplum-database-architecture/#ffs-tabbed-11&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[3] Apache HAWQ: Next Step In Massively Parallel Processing,&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://content.pivotal.io/blog/apache-hawq-next-step-in-massively-parallel-processing&quot; class=&quot;uri&quot;&gt;https://content.pivotal.io/blog/apache-hawq-next-step-in-massively-parallel-processing&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[4] 对比MPP计算框架和批处理计算框架，&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.csdn.net/rlnLo2pNEfx9c/article/details/78955006&quot; class=&quot;uri&quot;&gt;http://blog.csdn.net/rlnLo2pNEfx9c/article/details/78955006&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[5] A. Gupta and et al., “Mesa: Geo-replicated, near real-time, scalabledata warehousing,”PVLDB, vol. 7, no. 12, pp. 1259–1270, 2014.&lt;/p&gt;
&lt;p&gt;[6] &lt;a href=&quot;http://clickhouse.yandex/&quot; class=&quot;uri&quot;&gt;http://clickhouse.yandex&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[7] &lt;a href=&quot;http://github.com/baidu/palo&quot; class=&quot;uri&quot;&gt;http://github.com/baidu/palo&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Thu, 17 May 2018 07:30:00 +0000</pubDate>
<dc:creator>海边的Ivan</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/ivan-uno/p/9051225.html</dc:identifier>
</item>
<item>
<title>【Quartz】持久化到数据库【五】 - 深井田蛙</title>
<link>http://www.cnblogs.com/yanbigfeg/p/9050901.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/yanbigfeg/p/9050901.html</guid>
<description>&lt;p&gt;&lt;span&gt;&lt;strong&gt;  前言&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;    我们做到这里已经对Quartz定时器组件已经是学会了基本的使用了。但是我们有没有想过任务开启之后万一断掉了，当机了我们怎么办，你是否还想继续执行原先的任务。我们普通的创建是把任务放在内存中存储，如果内存被释放掉，任务也就&lt;em id=&quot;__mceDel&quot;&gt;消失了，那怎么办哪，不得不说这个组件还是很厉害的。他已经帮我们想过了解方案---就是放到数据库。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt; &lt;/em&gt; &lt;span&gt;&lt;strong&gt;Quartz插一嘴：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;    &lt;span&gt;quartz在任务中分为两种：有状态和无状态执行。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;    有状态：对于同一个 trigger 来说，有状态的 job 不能被并行执行，只有上一次触发的任务被执行完之后，才能触发下一次执行。所有我自己理解为串行的顺序执行（自己怎么好记怎么理解 哈哈）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;   无状态：无状态任务一般指可以并发的任务，即任务之间是独立的，不会互相干扰。就是各自干各自的。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;数据库概貌：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;    首先上一下sql脚本下载地址：&lt;a href=&quot;https://files.cnblogs.com/files/yanbigfeg/Quartz%E6%8C%81%E4%B9%85%E5%8C%96%E6%95%B0%E6%8D%AE%E5%BA%93%E8%84%9A%E6%9C%AC.rar&quot;&gt;sql数据库rar文件下载&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; 表结构瞅一瞅：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/809005/201805/809005-20180517144102072-1809417590.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;下面是表代表的大致意思吧：&lt;/p&gt;

&lt;table border=&quot;0&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;thead&gt;&lt;tr&gt;&lt;td&gt;
&lt;p align=&quot;left&quot;&gt;&lt;strong&gt;表名&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p align=&quot;left&quot;&gt;&lt;strong&gt;描述&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody readability=&quot;11&quot;&gt;&lt;tr readability=&quot;4.5&quot;&gt;&lt;td&gt;
&lt;p align=&quot;left&quot;&gt;QRTZ_BLOB_TRIGGERS&lt;/p&gt;
&lt;/td&gt;
&lt;td readability=&quot;6&quot;&gt;
&lt;p align=&quot;left&quot;&gt;作为 Blob 类型存储(用于 Quartz 用户用 JDBC 创建他们自己定制的 Trigger 类型，JobStore 并不知道如何存储实例的时候)&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td&gt;
&lt;p align=&quot;left&quot;&gt;QRTZ_CALENDARS&lt;/p&gt;
&lt;/td&gt;
&lt;td readability=&quot;5&quot;&gt;
&lt;p align=&quot;left&quot;&gt;以 Blob 类型存储 Quartz 的 Calendar 信息&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td&gt;
&lt;p align=&quot;left&quot;&gt;QRTZ_CRON_TRIGGERS&lt;/p&gt;
&lt;/td&gt;
&lt;td readability=&quot;5&quot;&gt;
&lt;p align=&quot;left&quot;&gt;存储 Cron Trigger，包括 Cron 表达式和时区信息&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td&gt;
&lt;p align=&quot;left&quot;&gt;QRTZ_FIRED_TRIGGERS&lt;/p&gt;
&lt;/td&gt;
&lt;td readability=&quot;5&quot;&gt;
&lt;p align=&quot;left&quot;&gt;存储与已触发的 Trigger 相关的状态信息，以及相联 Job 的执行信息&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td&gt;
&lt;p align=&quot;left&quot;&gt;QRTZ_JOB_DETAILS&lt;/p&gt;
&lt;/td&gt;
&lt;td readability=&quot;5&quot;&gt;
&lt;p align=&quot;left&quot;&gt;存储每一个已配置的 Job 的详细信息&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td&gt;
&lt;p align=&quot;left&quot;&gt;QRTZ_LOCKS&lt;/p&gt;
&lt;/td&gt;
&lt;td readability=&quot;5&quot;&gt;
&lt;p align=&quot;left&quot;&gt;存储程序的非观锁的信息(假如使用了悲观锁)&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td&gt;
&lt;p align=&quot;left&quot;&gt;QRTZ_PAUSED_TRIGGER_GRPS&lt;/p&gt;
&lt;/td&gt;
&lt;td readability=&quot;5&quot;&gt;
&lt;p align=&quot;left&quot;&gt;存储已暂停的 Trigger 组的信息&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4.5&quot;&gt;&lt;td&gt;
&lt;p align=&quot;left&quot;&gt;QRTZ_SCHEDULER_STATE&lt;/p&gt;
&lt;/td&gt;
&lt;td readability=&quot;6&quot;&gt;
&lt;p align=&quot;left&quot;&gt;存储少量的有关 Scheduler 的状态信息，和别的 Scheduler 实例(假如是用于一个集群中)&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td&gt;
&lt;p align=&quot;left&quot;&gt;QRTZ_SIMPLE_TRIGGERS&lt;/p&gt;
&lt;/td&gt;
&lt;td readability=&quot;5&quot;&gt;
&lt;p align=&quot;left&quot;&gt;存储简单的 Trigger，包括重复次数，间隔，以及已触的次数&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
&lt;p align=&quot;left&quot;&gt;QRTZ_SIMPROP_TRIGGERS&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td&gt;
&lt;p align=&quot;left&quot;&gt;QRTZ_TRIGGERS&lt;/p&gt;
&lt;/td&gt;
&lt;td readability=&quot;5&quot;&gt;
&lt;p align=&quot;left&quot;&gt;存储已配置的 Trigger 的信息&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt; &lt;span&gt;&lt;strong&gt;代码部分：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;    工具都有了那就干活吧，既然我上面说了任务分为有状态和无状态，那正好借这个例子一起给介绍一下。首先还是我们的老朋友任务的创建：&lt;/p&gt;
&lt;p&gt;这是一个无状态任务&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
 &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; ServerJob : IJob
    {
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;const&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; Count = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;count&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;virtual&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; Execute(IJobExecutionContext context)
        {
            JobKey jobKey &lt;/span&gt;=&lt;span&gt; context.JobDetail.Key;
            &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt;
            {
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 如果任务是恢复的任务的话&lt;/span&gt;
                &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (context.Recovering)
                {
                    WritTxt.WriteFile(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;serversql&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, jobKey+&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;：恢复打印&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
                }
                &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;
                {
                    WritTxt.WriteFile(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;serversql&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, jobKey+&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;：启动打印&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
                }
                JobDataMap data &lt;/span&gt;=&lt;span&gt; context.JobDetail.JobDataMap;
                &lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt; count;
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (data.ContainsKey(Count))
                {
                    count &lt;/span&gt;=&lt;span&gt; data.GetInt(Count);
                }
                &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;
                {
                    count &lt;/span&gt;= &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
                }
                count&lt;/span&gt;++&lt;span&gt;;
                data.Put(Count, count);

                WritTxt.WriteFile(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;serversql&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;string&lt;/span&gt;.Format(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;结束: {0} done at {1}\n 累计数 #{2}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, jobKey, DateTime.Now.ToString(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;r&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;), count));
            }
            &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception ex)
            {

            }
        }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;下面是一个有状态任务，因为本人比较懒所有就不写新任务了，直接继承了无状态任务事件。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
    [PersistJobDataAfterExecution] &lt;span&gt;//&lt;/span&gt;&lt;span&gt;代表当前任务是否有状态&lt;/span&gt;
    [DisallowConcurrentExecution]&lt;span&gt;//&lt;/span&gt;&lt;span&gt;代表任务不允许并发&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; ServerJobState : ServerJob
    {
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;下面就是我们要说的重点了;数据库配置&lt;/p&gt;
&lt;p&gt;只需要在实例化调度器前把我们的数据库配置传进去就好了。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 持久化属性
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        NameValueCollection properties = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; NameValueCollection();
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; ExampleServer()
        {       
            properties[&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;quartz.scheduler.instanceName&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;] = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;TestScheduler&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
            properties[&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;quartz.scheduler.instanceId&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;] = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;instance_one&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
            properties[&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;quartz.threadPool.type&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;] = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Quartz.Simpl.SimpleThreadPool, Quartz&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
            properties[&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;quartz.threadPool.threadCount&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;] = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;5&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
            properties[&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;quartz.threadPool.threadPriority&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;] = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Normal&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
            properties[&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;quartz.jobStore.misfireThreshold&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;] = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;60000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
            properties[&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;quartz.jobStore.type&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;] = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Quartz.Impl.AdoJobStore.JobStoreTX, Quartz&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
            properties[&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;quartz.jobStore.useProperties&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;] = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;false&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
            properties[&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;quartz.jobStore.dataSource&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;] = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;default&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
            properties[&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;quartz.jobStore.tablePrefix&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;] = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;QRTZ_&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
            properties[&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;quartz.jobStore.clustered&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;] = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
            properties[&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;quartz.jobStore.driverDelegateType&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;] = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Quartz.Impl.AdoJobStore.SqlServerDelegate, Quartz&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;

            properties[&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;quartz.dataSource.default.connectionString&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;] = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Server=(local);Database=quartz;Trusted_Connection=True;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
            properties[&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;quartz.dataSource.default.provider&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;] = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;SqlServer-20&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; First we must get a reference to a scheduler&lt;/span&gt;
            ISchedulerFactory sf = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; StdSchedulerFactory(properties);
            Scheduler &lt;/span&gt;=&lt;span&gt; sf.GetScheduler();
        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后就是运行测试了，这里我用了不同的形式返回了调度器和调度工厂。这样子也挺好用的，可以把以前的那种方法改成这种。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
 &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 调度工厂
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; StdSchedulerFactory SchedulerFactory { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }

        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 调度接口
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; IScheduler Scheduler { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }


        &lt;/span&gt;&lt;span&gt;#region&lt;/span&gt; 0.测试
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; Run()
        {
            &lt;/span&gt;&lt;span&gt;string&lt;/span&gt; schedId =&lt;span&gt; Scheduler.SchedulerInstanceId;
            IJobDetail job &lt;/span&gt;= JobBuilder.Create&amp;lt;ServerJob&amp;gt;&lt;span&gt;()
                           .WithIdentity(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ServerJob&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, schedId)
                           .RequestRecovery()
                           .Build();


            ITrigger trigger &lt;/span&gt;=&lt;span&gt; TriggerBuilder.Create()
                                          .WithIdentity(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;serverTrigger&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, schedId)
                                          .WithCronSchedule(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;0/10 * * * * ?&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;)     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;5秒执行一次&lt;/span&gt;
&lt;span&gt;                                          .Build();
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;已存在就不重复添加&lt;/span&gt;
            &lt;span&gt;try&lt;/span&gt;&lt;span&gt;
            {
                Scheduler.ScheduleJob(job, trigger);
            }
            &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception ex)
            {

            }
            IJobDetail jobState &lt;/span&gt;= JobBuilder.Create&amp;lt;ServerJobState&amp;gt;&lt;span&gt;()
                           .WithIdentity(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ServerJobSatte&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, schedId)
                           .RequestRecovery()
                           .Build();


            ITrigger triggerState &lt;/span&gt;=&lt;span&gt; TriggerBuilder.Create()
                                          .WithIdentity(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;serverTriggerSatte&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, schedId)
                                          .WithCronSchedule(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;0/10 * * * * ?&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;)     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;5秒执行一次&lt;/span&gt;
&lt;span&gt;                                          .Build();
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;已存在就不重复添加&lt;/span&gt;
            &lt;span&gt;try&lt;/span&gt;&lt;span&gt;
            {
                Scheduler.ScheduleJob(jobState, triggerState);
            }
            &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception ex)
            {

            }
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;启动&lt;/span&gt;
&lt;span&gt;            Scheduler.Start();

        }
        &lt;/span&gt;&lt;span&gt;#endregion&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;最后就是大结局了，让我们看下运行结果吧：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/809005/201805/809005-20180517145807737-1798687896.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

</description>
<pubDate>Thu, 17 May 2018 06:59:00 +0000</pubDate>
<dc:creator>深井田蛙</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/yanbigfeg/p/9050901.html</dc:identifier>
</item>
<item>
<title>Go  自带的 http/server.go 的连接解析 与 如何结合 master-worker 并发模式，提高单机并发能力 - 指尖下的幽灵</title>
<link>http://www.cnblogs.com/linguanh/p/9050934.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/linguanh/p/9050934.html</guid>
<description>&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;作者：林冠宏 / 指尖下的幽灵&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote readability=&quot;0.80357142857143&quot;&gt;
&lt;p&gt;掘金：&lt;a href=&quot;https://juejin.im/user/587f0dfe128fe100570ce2d8&quot; class=&quot;uri&quot;&gt;https://juejin.im/user/587f0dfe128fe100570ce2d8&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote readability=&quot;1.0975609756098&quot;&gt;
&lt;p&gt;博客：&lt;a href=&quot;http://www.cnblogs.com/linguanh/&quot; class=&quot;uri&quot;&gt;http://www.cnblogs.com/linguanh/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote readability=&quot;1.3095238095238&quot;&gt;
&lt;p&gt;GitHub ： &lt;a href=&quot;https://github.com/af913337456/&quot; class=&quot;uri&quot;&gt;https://github.com/af913337456/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote readability=&quot;1.2179487179487&quot;&gt;
&lt;p&gt;腾讯云专栏： &lt;a href=&quot;https://cloud.tencent.com/developer/user/1148436/activities&quot; class=&quot;uri&quot;&gt;https://cloud.tencent.com/developer/user/1148436/activities&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr/&gt;&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;关于 &lt;code&gt;server.go&lt;/code&gt; 源码的解析可以去搜下，已经有很多且还不错的文章。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;正文&quot;&gt;正文：&lt;/h2&gt;
&lt;p&gt;从我们启动&lt;code&gt;http.ListenAndServe(port,router)&lt;/code&gt;开始，&lt;code&gt;server.go&lt;/code&gt; 内部最终在一个&lt;code&gt;for&lt;/code&gt; 循环中的 &lt;code&gt;accept&lt;/code&gt; 方法中不停地等待&lt;code&gt;客户端&lt;/code&gt;的连接到来。&lt;/p&gt;
&lt;p&gt;每接收到一个&lt;code&gt;accept&lt;/code&gt; 就启动一个 &lt;code&gt;gorutine&lt;/code&gt; 去处理当前&lt;code&gt;ip&lt;/code&gt;的连接。也就是源码里的&lt;code&gt;go c.serve(ctx)&lt;/code&gt;。这一个步骤在 &lt;code&gt;c.serve(ctx)&lt;/code&gt; 它并不是简单的形式：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;请求--&amp;gt;处理请求--&amp;gt;返回结果--&amp;gt;断开这个连接--&amp;gt;结束当前的 gorutine&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;根据我的调试结果与源码分析显示正确的形式是下面这样的&quot;&gt;根据我的&lt;code&gt;调试结果&lt;/code&gt;与&lt;code&gt;源码分析&lt;/code&gt;显示，正确的形式是下面这样的：&lt;/h4&gt;
&lt;ol readability=&quot;2&quot;&gt;&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;为每一个连接的用户启动了一个长连接，&lt;code&gt;serve&lt;/code&gt; 方法内部有个超时的设置是&lt;code&gt;c.rwc.SetReadDeadline(time.Time{})&lt;/code&gt;，这样子的情况，如果内部不出错，当前的连接断开的条件是&lt;code&gt;客户端&lt;/code&gt;自己断开，或&lt;code&gt;nat&lt;/code&gt;超时。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;这个连接建立后，以&lt;code&gt;ip&lt;/code&gt;为单位，当前的&lt;code&gt;客户端&lt;/code&gt;，此时它的所有&lt;code&gt;http请求&lt;/code&gt;，例如&lt;code&gt;get&lt;/code&gt;，&lt;code&gt;post&lt;/code&gt;，它们都会在这个启动的&lt;code&gt;gorutine&lt;/code&gt; 内进行&lt;code&gt;分发&lt;/code&gt;与&lt;code&gt;被处理&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;也就是说，同一个&lt;code&gt;ip&lt;/code&gt;，多个&lt;code&gt;不同的&lt;/code&gt;请求，这里不会触发另一个 &lt;code&gt;accept&lt;/code&gt;，不会再去启动一个&lt;code&gt;go c.serve(ctx)&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;h4 id=&quot;上述我们得出结论&quot;&gt;上述我们得出结论：&lt;/h4&gt;
&lt;ol readability=&quot;5&quot;&gt;&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;如果有 &lt;code&gt;100万&lt;/code&gt;个 &lt;code&gt;accept&lt;/code&gt;，就证明有&lt;code&gt;100万&lt;/code&gt;个连接，&lt;code&gt;100万&lt;/code&gt;个&lt;code&gt;ip&lt;/code&gt;与当前&lt;code&gt;server&lt;/code&gt;连接。即是我们说的&lt;code&gt;百万连接&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code&gt;百万连接&lt;/code&gt; 不是&lt;code&gt;百万请求&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;每一个连接，它可以进行多个&lt;code&gt;http请求&lt;/code&gt;，它的请求都在当前启动这个连接的&lt;code&gt;gorutine&lt;/code&gt;里面进行。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;&lt;code&gt;c.serve(...)&lt;/code&gt; 源码中的&lt;code&gt;for 死循环&lt;/code&gt;就是负责读取每个请求再分发&lt;/p&gt;
&lt;pre class=&quot;golang&quot;&gt;
&lt;code&gt;for {
w, err := c.readRequest(ctx) // 读取一个 http 请求
//...
ServeHTTP(...)
}&lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;我们的&lt;code&gt;100万&lt;/code&gt; 连接里面，有可能并发更多的请求，例如几百万请求，一个&lt;code&gt;客户端&lt;/code&gt;快速调用多个&lt;code&gt;请求api&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;h3 id=&quot;图解总结&quot;&gt;图解总结&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2018/5/17/1636c104470039d7?w=652&amp;amp;h=462&amp;amp;f=png&amp;amp;s=24811&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2018/5/17/1636c163cefc63f7?w=481&amp;amp;h=449&amp;amp;f=png&amp;amp;s=22712&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;结合-master-worker-并发模式&quot;&gt;结合 master-worker 并发模式&lt;/h3&gt;
&lt;p&gt;根据我们上面的分析，每一个新连接到来，go 就会启动一个 &lt;code&gt;gorutine&lt;/code&gt;，在源码里面也没有看到有一个量级的限制，也就是达到多少连接就不再接收。我们也知道，服务器是有处理瓶颈的。&lt;/p&gt;
&lt;p&gt;所以，在这里插播&lt;code&gt;一个优化点&lt;/code&gt;，就是在&lt;code&gt;server.go&lt;/code&gt; 内部做一个连接数目的限制。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;master-worker&lt;/code&gt; 模式本身是启动多个&lt;code&gt;worker&lt;/code&gt; 线程，去并发&lt;code&gt;读取&lt;/code&gt;有界队列里面的任务，并执行。&lt;/p&gt;
&lt;p&gt;我自身已经实现了一个&lt;code&gt;go版本&lt;/code&gt;的&lt;code&gt;master-worker&lt;/code&gt;，做过下面的尝试：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;在 &lt;code&gt;go c.serve(ctx)&lt;/code&gt; 处做修改，如下。&lt;/li&gt;
&lt;/ol&gt;&lt;pre class=&quot;golang&quot;&gt;
&lt;code&gt;if srv.masterWorkerModel {
    // lgh --- way to execute
    PoolMaster.AddJob(
        masterworker.Job{
            Tag:&quot; http server &quot;,
            Handler: func() {
                c.serve(ctx)
                fmt.Println(&quot;finish job&quot;) // 这一句在当前 ip 断开连接后才会输出
            },
        })
}else{
    go c.serve(ctx)
}

func (m Master) AddJob(job Job)  {
    fmt.Println(&quot;add a job &quot;)
    m.JobQueue &amp;lt;- job // jobQueue 是具备缓冲的
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;pre class=&quot;golang&quot;&gt;
&lt;code&gt;// worker
func (w Worker) startWork(master *Master)  {
    go func() {
        for {
            select {
                case job := &amp;lt;-master.JobQueue:
                    job.doJob(master)
            }
        }
    }()
}&lt;/code&gt;
&lt;/pre&gt;
&lt;pre class=&quot;golang&quot;&gt;
&lt;code&gt;// job
func (j Job) doJob(master *Master) {
    go func() {
        fmt.Println(j.Tag+&quot; --- doing job...&quot;)
        j.Handler()
    }()
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;不难理解它的模式。&lt;/p&gt;
&lt;p&gt;现在我们使用&lt;code&gt;生产者--消费者模式&lt;/code&gt;进行假设，&lt;code&gt;连接的产生&lt;/code&gt;是&lt;code&gt;生产者&lt;/code&gt;，&lt;code&gt;&amp;lt;-master.JobQueue&lt;/code&gt; 是&lt;code&gt;消费者&lt;/code&gt;，因为每一次消费就是启动一个处理的&lt;code&gt;gorutine&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;因为我们在&lt;code&gt;accept&lt;/code&gt; 一个请求到&lt;code&gt;&amp;lt;-master.JobQueue&lt;/code&gt;，管道输出一个的这个过程中，可以说是没有耗时操作的，&lt;code&gt;这个job&lt;/code&gt;，它很快就被输出了管道。也就是说，&lt;code&gt;消费很快&lt;/code&gt;，那么实际的&lt;code&gt;生产环境&lt;/code&gt;中，我们的&lt;code&gt;worker&lt;/code&gt;工作&lt;code&gt;协程&lt;/code&gt;启动&lt;code&gt;5~10&lt;/code&gt;个就有余了。&lt;/p&gt;
&lt;p&gt;考虑如果出现了&lt;code&gt;消费跟不上&lt;/code&gt;的情况，那么多出来的&lt;code&gt;job&lt;/code&gt;将会被缓冲到&lt;code&gt;channel&lt;/code&gt;里面。这种情况可能出现的情景是：&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;短时间十万+级别连接的建立，就会导致&lt;code&gt;worker&lt;/code&gt;读取不过来。不过，即使发生了，也是很快就取完的。因为间中的耗时几乎可以忽略不计！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;也就说，&lt;code&gt;短时间&lt;/code&gt;大量连接的建立，它的瓶颈在&lt;code&gt;队列的缓冲数&lt;/code&gt;。但是即使瓶颈发生了，它又能很快被分发处理掉。所以说：&lt;/p&gt;
&lt;ul&gt;&lt;li readability=&quot;-1.5&quot;&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;我的这个第一点的尝试的意义事实上没有多大的。只不过是换了一种方式去分发&lt;code&gt;go c.serve(ctx)&lt;/code&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;ol&gt;&lt;li&gt;这个是第二种结合方式，把&lt;code&gt;master-worker&lt;/code&gt;放置到&lt;code&gt;ServeHTTP&lt;/code&gt;的分发阶段。例如下面代码，是常见的&lt;code&gt;http handler&lt;/code&gt;写法，我们就可以嵌套进去。&lt;/li&gt;
&lt;/ol&gt;&lt;pre class=&quot;golang&quot;&gt;
&lt;code&gt;func (x XHandler) ServeHTTP(w http.ResponseWriter, r *http.Request)  {
    //...
    if x.MasterWorker {
        poolMaster.AddJob(master_worker.Job{
            Tag:&quot;normal&quot;,
            XContext:xc,
            Handler: func(context model.XContext) {
                x.HandleFunc(w,r)
            },
        })
        return
    }
    x.HandleFunc(w,r)
    //...
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这样的话，我们就能控制所有连接的并发请求最大数。超出的将会进行排队，等待被执行，而不会因为&lt;code&gt;短时间 http 请求数目不受控暴增&lt;/code&gt; 而导致&lt;code&gt;服务器&lt;/code&gt;挂掉。&lt;/p&gt;
&lt;p&gt;此外上述&lt;code&gt;第二种&lt;/code&gt;还存在一个：&lt;code&gt;读，过早关闭问题&lt;/code&gt;，这个留给读者尝试解决。&lt;/p&gt;
</description>
<pubDate>Thu, 17 May 2018 06:35:00 +0000</pubDate>
<dc:creator>指尖下的幽灵</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/linguanh/p/9050934.html</dc:identifier>
</item>
<item>
<title>一个能够在Asp.Net和Asp.NetCore之间能够互相通讯的Rpc - 叶俊权</title>
<link>http://www.cnblogs.com/yjq-code/p/Rpc.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/yjq-code/p/Rpc.html</guid>
<description>&lt;h2&gt;一、特性&lt;/h2&gt;
&lt;p&gt;1、跨平台&lt;/p&gt;
&lt;p&gt;2、提供负载均衡算法&lt;/p&gt;
&lt;p&gt;3、支持ZK服务协调&lt;/p&gt;
&lt;p&gt;4、提供了JSON、BinarySerializer、还有自定义的序列化方式&lt;/p&gt;
&lt;p&gt;5、客户端提供Socket连接池，以便于快速交互，防止类似大文件上传时会阻塞&lt;/p&gt;
&lt;p&gt;6、支持异步方法&lt;/p&gt;
&lt;p&gt;7、支持.net与.netcore之间通信&lt;/p&gt;
&lt;p&gt;8、支持采用MongoDb收集请求信息（采用双缓冲队列，极限的不影响传输速度）&lt;/p&gt;
&lt;p&gt;9、提供请求日志监控后台（还未全部完善）&lt;/p&gt;
&lt;h2&gt;二、项目结构&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/712425/201805/712425-20180517135054003-952116695.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;编译器采用vs2017.&lt;/p&gt;
&lt;p&gt;NRpcItem 是Framework下的NRpc源代码。NetCoreRpcItem是.NetCore下的源代码。NRpcSerializer是自己写的一个序列化方法，速度和json序列化对比稍慢一点，但是速度可以接收。&lt;/p&gt;
&lt;p&gt;值得注意的是NRpcItem 里面采用Autofac来作为IOC容器，服务端的代码都必须要基于Autofac来实现依赖注入。&lt;/p&gt;
&lt;p&gt;NRpc.AdminManage是日志监控后台，目前只有.netCore版本。&lt;/p&gt;
&lt;h2&gt;三、自定义序列化方法性能测试&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/712425/201805/712425-20180517140106001-271326222.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;虽然在执行速度上比json稍慢，但是支持对byte[]类型的序列化，而且客户端不需要任何的标记，方便使用。实现过程中参考csharp-hessian的序列化实现方式，支持跨平台。&lt;/p&gt;
&lt;h2&gt;四、如何使用Rpc&lt;/h2&gt;
&lt;p&gt;1、服务端：&lt;/p&gt;
&lt;p&gt;　　a、参考NetCoreRpc.Application项目，先定义好IStudentApplication以及他的实现类StudentApplication&lt;/p&gt;
&lt;p&gt;　　b、参考NetCoreRpc.ServerTest项目中Program，先绑定好依赖注入信息，如果要使用zk，则加上.UseZK();扩展方法，不然不采用ZK的服务发现&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('2c976867-a496-4159-98b6-ac7816f932aa')&quot; readability=&quot;35&quot;&gt;&lt;img id=&quot;code_img_closed_2c976867-a496-4159-98b6-ac7816f932aa&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_2c976867-a496-4159-98b6-ac7816f932aa&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('2c976867-a496-4159-98b6-ac7816f932aa',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_2c976867-a496-4159-98b6-ac7816f932aa&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;65&quot;&gt;
&lt;pre&gt;
&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt;&lt;span&gt; IServiceProvider BuildDi()
        {
            IServiceCollection services &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; ServiceCollection();

            services.AddSingleton&lt;/span&gt;&amp;lt;ILoggerFactory, LoggerFactory&amp;gt;&lt;span&gt;();
            services.AddSingleton(&lt;/span&gt;&lt;span&gt;typeof&lt;/span&gt;(ILogger&amp;lt;&amp;gt;), &lt;span&gt;typeof&lt;/span&gt;(Logger&amp;lt;&amp;gt;&lt;span&gt;));
            services.AddSingleton&lt;/span&gt;&amp;lt;IStudentApplication, StudentApplication&amp;gt;&lt;span&gt;();
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; str = Configuration.GetValue&amp;lt;&lt;span&gt;string&lt;/span&gt;&amp;gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;MongoDB:Str&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; dbName = Configuration.GetValue&amp;lt;&lt;span&gt;string&lt;/span&gt;&amp;gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;MongoDB:DatabaseName&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            services.UseRpc()
                    .UseMongoDBMonitor(() &lt;/span&gt;=&amp;gt;&lt;span&gt;
                    {

                        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; MonogoDbConfig(str, dbName);
                    });&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;.UseZK();&lt;/span&gt;
            &lt;span&gt;var&lt;/span&gt; serviceProvider =&lt;span&gt; services.BuildServiceProvider();

            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; loggerFactory = serviceProvider.GetRequiredService&amp;lt;ILoggerFactory&amp;gt;&lt;span&gt;();

            loggerFactory.AddNLog(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt; NLogProviderOptions { CaptureMessageTemplates = &lt;span&gt;true&lt;/span&gt;, CaptureMessageProperties = &lt;span&gt;true&lt;/span&gt;&lt;span&gt; });
            loggerFactory.ConfigureNLog(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;NLog.config&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);

            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; serviceProvider;
        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;绑定依赖注入信息&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;　　c、配置文件信息，配置ZK和MongoDb链接配置信息&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;{
  &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;NetCoreRpc&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: {
    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Zookeeper&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: {
      &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Connection&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;192.168.100.34:2181&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
      &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ParentName&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/NetCoreRpc/ClientTest&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
    }
  },
  &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;MongoDB&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: {
    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Str&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;mongodb://root:root@192.168.100.125:27017&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;DatabaseName&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Rpc_Monitor&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
  }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　d、开启监听&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('4fede46a-5767-4d69-b317-f968cf73aca4')&quot; readability=&quot;34.5&quot;&gt;&lt;img id=&quot;code_img_closed_4fede46a-5767-4d69-b317-f968cf73aca4&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_4fede46a-5767-4d69-b317-f968cf73aca4&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('4fede46a-5767-4d69-b317-f968cf73aca4',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_4fede46a-5767-4d69-b317-f968cf73aca4&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;64&quot;&gt;
&lt;pre&gt;
        &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; Main(&lt;span&gt;string&lt;/span&gt;&lt;span&gt;[] args)
        {
            Console.WriteLine(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;请输入监听端口:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; strPort =&lt;span&gt; Console.ReadLine();
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; builder = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; ConfigurationBuilder()
                .SetBasePath(Path.Combine(AppContext.BaseDirectory)).AddJsonFile(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;NetCoreRpc.json&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, optional: &lt;span&gt;true&lt;/span&gt;&lt;span&gt;);
            Configuration &lt;/span&gt;=&lt;span&gt; builder.Build();
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; servicesProvider =&lt;span&gt; BuildDi();
            DependencyManage.SetServiceProvider(servicesProvider, Configuration);
            NRpcServer nrpcServer &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; NRpcServer(&lt;span&gt;int&lt;/span&gt;&lt;span&gt;.Parse(strPort));
            nrpcServer.Start(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;NetCoreRpc.Application&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            Console.WriteLine(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Welcome to use NetCoreRpc!&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            Console.WriteLine(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Input exit to exit&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; str =&lt;span&gt; Console.ReadLine();
            &lt;/span&gt;&lt;span&gt;while&lt;/span&gt; (!&lt;span&gt;string&lt;/span&gt;.Equals(str, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;exit&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, StringComparison.OrdinalIgnoreCase))
            {
                str &lt;/span&gt;=&lt;span&gt; Console.ReadLine();
            }
            nrpcServer.ShutDown();
        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;开启监听&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;2、客户端如何调用&lt;/p&gt;
&lt;p&gt;　　a、参考NetCoreRpc.ClientTest项目先配置一些基础的依赖信息&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('718f7bae-6da6-4b3e-ba08-720a72e1403a')&quot; readability=&quot;34.5&quot;&gt;&lt;img id=&quot;code_img_closed_718f7bae-6da6-4b3e-ba08-720a72e1403a&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_718f7bae-6da6-4b3e-ba08-720a72e1403a&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('718f7bae-6da6-4b3e-ba08-720a72e1403a',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_718f7bae-6da6-4b3e-ba08-720a72e1403a&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;64&quot;&gt;
&lt;pre&gt;
&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt;&lt;span&gt; IServiceProvider BuildDi()
        {
            IServiceCollection services &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; ServiceCollection();
            services.AddOptions();
            services.Configure&lt;/span&gt;&amp;lt;RpcConfig&amp;gt;(Configuration.GetSection(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;NetCoreRpc&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;));
            services.AddSingleton&lt;/span&gt;&amp;lt;ILoggerFactory, LoggerFactory&amp;gt;&lt;span&gt;();
            services.AddSingleton(&lt;/span&gt;&lt;span&gt;typeof&lt;/span&gt;(ILogger&amp;lt;&amp;gt;), &lt;span&gt;typeof&lt;/span&gt;(Logger&amp;lt;&amp;gt;&lt;span&gt;));
            services.UseRpc().UseMongoDBMonitor(() &lt;/span&gt;=&amp;gt;&lt;span&gt;
            {
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; str = Configuration.GetValue&amp;lt;&lt;span&gt;string&lt;/span&gt;&amp;gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;MongoDB:Str&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; dbName = Configuration.GetValue&amp;lt;&lt;span&gt;string&lt;/span&gt;&amp;gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;MongoDB:DatabaseName&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; MonogoDbConfig(str, dbName);
            });&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;.UseZK();&lt;/span&gt;
            &lt;span&gt;var&lt;/span&gt; serviceProvider =&lt;span&gt; services.BuildServiceProvider();

            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; loggerFactory = serviceProvider.GetRequiredService&amp;lt;ILoggerFactory&amp;gt;&lt;span&gt;();

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;configure NLog&lt;/span&gt;
            loggerFactory.AddNLog(&lt;span&gt;new&lt;/span&gt; NLogProviderOptions { CaptureMessageTemplates = &lt;span&gt;true&lt;/span&gt;, CaptureMessageProperties = &lt;span&gt;true&lt;/span&gt;&lt;span&gt; });
            loggerFactory.ConfigureNLog(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;NLog.config&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);

            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; serviceProvider;
        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;配置依赖&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;　　b、配置文件内容&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('5593ff2e-9949-4cc0-8b22-cb91d8cbc54f')&quot; readability=&quot;36&quot;&gt;&lt;img id=&quot;code_img_closed_5593ff2e-9949-4cc0-8b22-cb91d8cbc54f&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_5593ff2e-9949-4cc0-8b22-cb91d8cbc54f&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('5593ff2e-9949-4cc0-8b22-cb91d8cbc54f',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_5593ff2e-9949-4cc0-8b22-cb91d8cbc54f&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;67&quot;&gt;
&lt;pre&gt;
&lt;span&gt;{
  &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;NetCoreRpc&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: {
    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;RequestTimeouMillis&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;10000&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Default&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;192.168.129.117:12345&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;&quot;Group&quot;: [
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;  {
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;    &quot;NameSpace&quot;: &quot;&quot;,
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;    &quot;Address&quot;: &quot;127.0.0.1:12345&quot;
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;  }
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;],&lt;/span&gt;
    &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Zookeeper&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: {
      &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Connection&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;192.168.100.34:2181&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
      &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ParentName&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/NetCoreRpc/ClientTest&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
    }
  },
  &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;MongoDB&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: {
    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Str&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;mongodb://root:root@192.168.100.125:27017&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;DatabaseName&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Rpc_Monitor&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
  }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;配置文件&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;配置服务端地址，也可以根据类的名字来配置服务端地址，因为一个客户端在业务多的时候可能调用了多个服务端，所以提供了根据类型的名字来配置服务端地址&lt;/p&gt;
&lt;p&gt;　　c、如何开始调用&lt;/p&gt;
&lt;p&gt;　　首先接口类和Model类的命名控件必须要与服务端一致，比如例子中的IStudentApplication与TestModel这两个。&lt;/p&gt;
&lt;p&gt;　　然后通过代理类来实例化接口类，然后调用对应的方法即可。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('13d34a62-c17a-4ecc-8231-72f46a7a276b')&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_13d34a62-c17a-4ecc-8231-72f46a7a276b&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_13d34a62-c17a-4ecc-8231-72f46a7a276b&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('13d34a62-c17a-4ecc-8231-72f46a7a276b',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_13d34a62-c17a-4ecc-8231-72f46a7a276b&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
        &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; Send()
        {
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; studentApplication = ProxyFactory.Create&amp;lt;IStudentApplication&amp;gt;&lt;span&gt;();
            Console.WriteLine(studentApplication.Age());
            Console.WriteLine(studentApplication.IsYongPeople(&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;&lt;span&gt;));
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; runTask = studentApplication.RunAsync(&lt;span&gt;111&lt;/span&gt;&lt;span&gt;);
            studentApplication.Say(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Hello world&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            studentApplication.Say(Encoding.UTF8.GetBytes(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Hi!&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;));
            Console.WriteLine(Encoding.UTF8.GetString(studentApplication.Say()));
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; test =&lt;span&gt; studentApplication.Test();
            Console.WriteLine(test.ToString());
            studentApplication.Sleep();
            Console.WriteLine(runTask.Result);
        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;客户端调用&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;framework版本与.netcore版本大同小异，具体的实际使用请参考下各个项目的Test文件。&lt;/p&gt;
&lt;h2&gt;五、调用案例结果&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/712425/201805/712425-20180517141559335-996621972.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;六、服务端监控&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/712425/201805/712425-20180517141659702-987373046.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; 监控应用还没有完善好，后续会完善的，对了监控应用必须基于MongoDB。&lt;/p&gt;
&lt;h2&gt;七、项目开源地址&lt;/h2&gt;
&lt;p&gt;&lt;a title=&quot;源码地址&quot; href=&quot;https://github.com/yjqGitHub/NetCoreRpc&quot; target=&quot;_blank&quot;&gt;https://github.com/yjqGitHub/NetCoreRpc&lt;/a&gt; 欢迎大家来吐槽，提建议，如果有兴趣一起来完善的就更好了。&lt;/p&gt;
&lt;p&gt;还有Nuget上的版本还暂未发布，原先发布的还不是最新代码&lt;/p&gt;
</description>
<pubDate>Thu, 17 May 2018 06:24:00 +0000</pubDate>
<dc:creator>叶俊权</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/yjq-code/p/Rpc.html</dc:identifier>
</item>
<item>
<title>3.python元类编程 - zhang_derek</title>
<link>http://www.cnblogs.com/derek1184405959/p/9043472.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/derek1184405959/p/9043472.html</guid>
<description>&lt;h3&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;1.1.propety动态属性&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;在面向对象编程中，我们一般把名词性的东西映射成属性，动词性的东西映射成方法。在python中他们对应的分别是属性&lt;code&gt;self.xxx&lt;/code&gt;和类方法。但有时我们需要的属性需要根据其他属性动态的计算，此时如果直接使用属性方法处理，会导致数据不同步。下面介绍&lt;code&gt;@property&lt;/code&gt;方法来动态创建类属性。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
&lt;span&gt;from&lt;/span&gt; datetime &lt;span&gt;import&lt;/span&gt;&lt;span&gt; datetime,date

&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; User:
    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;__init__&lt;/span&gt;&lt;span&gt;(self,name,birthday):
        self.name &lt;/span&gt;=&lt;span&gt; name
        self.birthday &lt;/span&gt;=&lt;span&gt; birthday
        self._age &lt;/span&gt;=&lt;span&gt; 0

    @property
    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; age(self):
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; datetime.now().year -&lt;span&gt; self.birthday.year

    @age.setter
    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; age(self,value):
        self._age &lt;/span&gt;=&lt;span&gt; value

&lt;/span&gt;&lt;span&gt;if&lt;/span&gt; &lt;span&gt;__name__&lt;/span&gt; == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__main__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
    user &lt;/span&gt;= User(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;derek&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,date(year=1994,month=11,day=11&lt;span&gt;))
    user.age &lt;/span&gt;= 23
    &lt;span&gt;print&lt;/span&gt;(user._age)   &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 23&lt;/span&gt;
    &lt;span&gt;print&lt;/span&gt;(user.age)    &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 24 ,动态计算出来的&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;1.2.__getattr__和__getattribute__的区别&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;object.__getattr__(self, name) &lt;br/&gt;找不到attribute的时候，会调用getattr，返回一个值或AttributeError异常。 &lt;/p&gt;&lt;p&gt;object.__getattribute__(self, name) &lt;br/&gt;无条件被调用，通过实例访问属性。如果class中定义了__getattr__()，则__getattr__()不会被调用（除非显示调用或引发AttributeError异常）&lt;/p&gt;

&lt;p&gt;（1）调用一个不存在的属性&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;class&lt;/span&gt;&lt;span&gt; User:
    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;__init__&lt;/span&gt;(self,info=&lt;span&gt;{}):
        self.info &lt;/span&gt;=&lt;span&gt; info

    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; def __getattr__(self, item):&lt;/span&gt;
    &lt;span&gt;#&lt;/span&gt;&lt;span&gt;     return self.info[item]&lt;/span&gt;

&lt;span&gt;if&lt;/span&gt; &lt;span&gt;__name__&lt;/span&gt; == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__main__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
    user &lt;/span&gt;= User(info={&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;derek&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;age&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:24&lt;span&gt;})
    &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(user.name)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;会报错&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1299879/201805/1299879-20180515223051506-1862151535.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;（2）加了__getattr__之后就可以调用了&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;class&lt;/span&gt;&lt;span&gt; User:
    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;__init__&lt;/span&gt;(self,info=&lt;span&gt;{}):
        self.info &lt;/span&gt;=&lt;span&gt; info

    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;__getattr__是在查找不到属性的时候调用&lt;/span&gt;
    &lt;span&gt;def&lt;/span&gt; &lt;span&gt;__getattr__&lt;/span&gt;&lt;span&gt;(self, item):
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; self.info[item]

&lt;/span&gt;&lt;span&gt;if&lt;/span&gt; &lt;span&gt;__name__&lt;/span&gt; == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__main__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
    user &lt;/span&gt;= User(info={&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;derek&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;age&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:24&lt;span&gt;})
    &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(user.name)    &lt;span&gt;#&lt;/span&gt;&lt;span&gt;derek&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt; （3）__getattribute__&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;class&lt;/span&gt;&lt;span&gt; User:
    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;__init__&lt;/span&gt;(self,info=&lt;span&gt;{}):
        self.info &lt;/span&gt;=&lt;span&gt; info

    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;__getattr__是在查找不到属性的时候调用&lt;/span&gt;
    &lt;span&gt;def&lt;/span&gt; &lt;span&gt;__getattr__&lt;/span&gt;&lt;span&gt;(self, item):
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; self.info[item]

    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;__getattribute不管属性存不存在，都访问这个&lt;/span&gt;
    &lt;span&gt;def&lt;/span&gt; &lt;span&gt;__getattribute__&lt;/span&gt;&lt;span&gt;(self, item):
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;zhang_derek&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;


&lt;span&gt;if&lt;/span&gt; &lt;span&gt;__name__&lt;/span&gt; == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__main__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
    user &lt;/span&gt;= User(info={&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;derek&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;age&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:24&lt;span&gt;})
    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;不管属性存不存在，都走__getattribute__&lt;/span&gt;
    &lt;span&gt;print&lt;/span&gt;(user.name)    &lt;span&gt;#&lt;/span&gt;&lt;span&gt;zhang_derek     #即使属性存在也走__getattribute__&lt;/span&gt;
    &lt;span&gt;print&lt;/span&gt;(user.test)     &lt;span&gt;#&lt;/span&gt;&lt;span&gt;zhang_derek    #不存在的属性也能打印&lt;/span&gt;
    &lt;span&gt;print&lt;/span&gt;(user.company)   &lt;span&gt;#&lt;/span&gt;&lt;span&gt;zhang_derek   #不存在的属性也能打印&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;1.&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;3.属&lt;/strong&gt;&lt;/span&gt;性描述符&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;验证赋值的时候是不是int类型&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt;属性描述符&lt;/span&gt;

&lt;span&gt;import&lt;/span&gt;&lt;span&gt; numbers

&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;只要一个类实现了下面三种魔法函数中的一种，这个类就是属性描述符&lt;/span&gt;
&lt;span&gt;class&lt;/span&gt;&lt;span&gt; IntField:
    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;__get__&lt;/span&gt;&lt;span&gt;(self, instance, owner):
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; self.value
    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;__set__&lt;/span&gt;&lt;span&gt;(self, instance, value):
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; &lt;span&gt;not&lt;/span&gt;&lt;span&gt; isinstance(value,numbers.Integral):
            &lt;/span&gt;&lt;span&gt;raise&lt;/span&gt; ValueError(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;必须为int&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
        self.value &lt;/span&gt;=&lt;span&gt; value
    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;__delete__&lt;/span&gt;&lt;span&gt;(self, instance):
        &lt;/span&gt;&lt;span&gt;pass&lt;/span&gt;

&lt;span&gt;class&lt;/span&gt;&lt;span&gt; User:
    age &lt;/span&gt;=&lt;span&gt; IntField()

&lt;/span&gt;&lt;span&gt;if&lt;/span&gt; &lt;span&gt;__name__&lt;/span&gt; == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__main__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
    user &lt;/span&gt;=&lt;span&gt; User()
    user.age &lt;/span&gt;= 24
    &lt;span&gt;print&lt;/span&gt;(user.age)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果user.age=24，值是int，可以正常打印  &lt;/p&gt;
&lt;p&gt;如果user.age='test',传一个字符串，则会报错&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1299879/201805/1299879-20180515225400858-256496351.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h3&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;1.4.__new__和__init__的区别&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;（1）__new__方法如果不返回对象，不会执行init方法&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;class&lt;/span&gt;&lt;span&gt; User:
    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;__new__&lt;/span&gt;(cls, *args, **&lt;span&gt;kwargs):
        &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;in new&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)

    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;__init__&lt;/span&gt;&lt;span&gt;(self,name):
        &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;in init&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
        self.name &lt;/span&gt;=&lt;span&gt; name

&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; new是用用来控制对象的生成过程，在对象生成之前&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt; init是用来完善对象的&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt; 如果new方法不返回对象，则不会调用init函数&lt;/span&gt;
&lt;span&gt;if&lt;/span&gt; &lt;span&gt;__name__&lt;/span&gt; == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__main__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
    user &lt;/span&gt;= User(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;derek&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;运行结果：没有调用init方法&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1299879/201805/1299879-20180515231750440-345884228.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; （2）返回对象就会执行init方法&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;class&lt;/span&gt;&lt;span&gt; User:
    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;__new__&lt;/span&gt;(cls, *args, **&lt;span&gt;kwargs):
        &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;in new&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;)         &lt;span&gt;#&lt;/span&gt;&lt;span&gt;in new&lt;/span&gt;
        &lt;span&gt;print&lt;/span&gt;(cls)              &lt;span&gt;#&lt;/span&gt;&lt;span&gt;cls是当前class对象    &amp;lt;class '__main__.User'&amp;gt;&lt;/span&gt;
        &lt;span&gt;print&lt;/span&gt;(type(cls))        &lt;span&gt;#&lt;/span&gt;&lt;span&gt;&amp;lt;class 'type'&amp;gt;&lt;/span&gt;
        &lt;span&gt;return&lt;/span&gt; super().&lt;span&gt;__new__&lt;/span&gt;(cls)   &lt;span&gt;#&lt;/span&gt;&lt;span&gt;必须返回class对象，才会调用__init__方法&lt;/span&gt;

    &lt;span&gt;def&lt;/span&gt; &lt;span&gt;__init__&lt;/span&gt;&lt;span&gt;(self,name):
        &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;in init&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;)        &lt;span&gt;#&lt;/span&gt;&lt;span&gt;in init&lt;/span&gt;
        &lt;span&gt;print&lt;/span&gt;(self)             &lt;span&gt;#&lt;/span&gt;&lt;span&gt;self是class的实例对象      &amp;lt;__main__.User object at 0x00000000021B8780&amp;gt;&lt;/span&gt;
        &lt;span&gt;print&lt;/span&gt;(type(self))       &lt;span&gt;#&lt;/span&gt;&lt;span&gt;&amp;lt;class '__main__.User'&amp;gt;&lt;/span&gt;
        self.name =&lt;span&gt; name

&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; new是用用来控制对象的生成过程，在对象生成之前&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt; init是用来完善对象的&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt; 如果new方法不返回对象，则不会调用init函数&lt;/span&gt;
&lt;span&gt;if&lt;/span&gt; &lt;span&gt;__name__&lt;/span&gt; == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__main__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
    user &lt;/span&gt;= User(name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;derek&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)

&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;总结&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt; __new__ 用来创建实例，在返回的实例上执行__init__，如果不返回实例那么__init__将不会执行&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt; __init__ 用来初始化实例，设置属性什么的&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;1.5.自定义元类&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;（1）前戏：通过传入不同的字符串动态的创建不同的类&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;def&lt;/span&gt;&lt;span&gt; create_class(name):
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; name == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;user&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
        &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; User:
            &lt;/span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;__str__&lt;/span&gt;&lt;span&gt;(self):
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;user&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
        &lt;span&gt;return&lt;/span&gt;&lt;span&gt; User

    &lt;/span&gt;&lt;span&gt;elif&lt;/span&gt; name == &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;company&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;:
        &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Company:
            &lt;/span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;__str__&lt;/span&gt;&lt;span&gt;(self):
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;company&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
        &lt;span&gt;return&lt;/span&gt;&lt;span&gt; Company

&lt;/span&gt;&lt;span&gt;if&lt;/span&gt; &lt;span&gt;__name__&lt;/span&gt; == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__main__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
    Myclass &lt;/span&gt;= create_class(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;user&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
    my_obj &lt;/span&gt;=&lt;span&gt; Myclass()
    &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(my_obj)    &lt;span&gt;#&lt;/span&gt;&lt;span&gt;user&lt;/span&gt;
    &lt;span&gt;print&lt;/span&gt;(type(my_obj))     &lt;span&gt;#&lt;/span&gt;&lt;span&gt;&amp;lt;class '__main__.create_class.&amp;lt;locals&amp;gt;.User'&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;（2）用type创建&lt;/p&gt;
&lt;p&gt;虽然上面的方法能够创建，但很麻烦，下面是type创建类的一个简单实例&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 一个简单type创建类的例子&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt;type(object_or_name, bases, dict)&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt;type里面有三个参数，第一个类名，第二个基类名，第三个是属性&lt;/span&gt;
User = type(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;User&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,(),{&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;derek&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;})

my_obj &lt;/span&gt;=&lt;span&gt; User()
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(my_obj.name)    &lt;span&gt;#&lt;/span&gt;&lt;span&gt;derek&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;（3）不但可以定义属性，还可以定义方法&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;def&lt;/span&gt; say(self):     &lt;span&gt;#&lt;/span&gt;&lt;span&gt;必须加self&lt;/span&gt;
    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;i am derek&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;

User &lt;/span&gt;= type(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;User&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,(),{&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;derek&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;say&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;:say})

my_obj &lt;/span&gt;=&lt;span&gt; User()
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(my_obj.name)     &lt;span&gt;#&lt;/span&gt;&lt;span&gt;derek&lt;/span&gt;
&lt;span&gt;print&lt;/span&gt;(my_obj.say())    &lt;span&gt;#&lt;/span&gt;&lt;span&gt;i am derek&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;（4）让type创建的类继承一个基类&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;def&lt;/span&gt; say(self):     &lt;span&gt;#&lt;/span&gt;&lt;span&gt;必须加self&lt;/span&gt;
    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;i am derek&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;

&lt;span&gt;class&lt;/span&gt;&lt;span&gt; BaseClass:
    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; answer(self):
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;i am baseclass&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;

&lt;span&gt;#&lt;/span&gt;&lt;span&gt;type里面有三个参数，第一个类名，第二个基类名，第三个是属性&lt;/span&gt;
User = type(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;User&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,(BaseClass,),{&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;derek&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;say&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;:say})

&lt;/span&gt;&lt;span&gt;if&lt;/span&gt; &lt;span&gt;__name__&lt;/span&gt; == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__main__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:

    my_obj &lt;/span&gt;=&lt;span&gt; User()
    &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(my_obj.name)          &lt;span&gt;#&lt;/span&gt;&lt;span&gt;d erek&lt;/span&gt;
    &lt;span&gt;print&lt;/span&gt;(my_obj.say())         &lt;span&gt;#&lt;/span&gt;&lt;span&gt; i am derek&lt;/span&gt;
    &lt;span&gt;print&lt;/span&gt;(my_obj.answer())      &lt;span&gt;#&lt;/span&gt;&lt;span&gt; i am baseclass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;什么是元类？&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;元类就是创建类的类，比如上面的type&lt;/p&gt;
&lt;p&gt;在实际编码中，我们一般不直接用type去创建类，而是用元类的写法，自定义一个元类metaclass去创建&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 把User类创建的过程委托给元类去做，这样代码的分离性比较好&lt;/span&gt;

&lt;span&gt;class&lt;/span&gt;&lt;span&gt; MetaClass(type):
    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;__new__&lt;/span&gt;(cls, *args, **&lt;span&gt;kwargs):
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; super().&lt;span&gt;__new__&lt;/span&gt;(cls,*args, **&lt;span&gt;kwargs)

&lt;/span&gt;&lt;span&gt;class&lt;/span&gt; User(metaclass=&lt;span&gt;MetaClass):
    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;__init__&lt;/span&gt;&lt;span&gt;(self,name):
        self.name &lt;/span&gt;=&lt;span&gt; name

    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;__str__&lt;/span&gt;&lt;span&gt;(self):
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;test&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;

&lt;span&gt;if&lt;/span&gt; &lt;span&gt;__name__&lt;/span&gt; == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__main__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;python中类的实例化过程，会首先寻找metaclass，通过metaclass去创建User类&lt;/span&gt;
    my_obj = User(name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;derek&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(my_obj)    &lt;span&gt;#&lt;/span&gt;&lt;span&gt;test&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

</description>
<pubDate>Thu, 17 May 2018 06:09:00 +0000</pubDate>
<dc:creator>zhang_derek</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/derek1184405959/p/9043472.html</dc:identifier>
</item>
<item>
<title>关于后台部分业务重构的思考及实践 - ljmatlight</title>
<link>http://www.cnblogs.com/ljmatlight/p/9050747.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/ljmatlight/p/9050747.html</guid>
<description>&lt;p&gt;作者： ljmatlight&lt;br/&gt;时间： 2017-09-25&lt;/p&gt;
&lt;p&gt;积极主动，想事谋事，敢作敢为，能做能为。&lt;/p&gt;
&lt;hr/&gt;&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;当职以来，随着对公司业务和项目的不断深入，不断梳理业务和公司技术栈。&lt;br/&gt;保证在完成分配开发任务情况下，积极思考优化方案并付诸实践。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;一想法由来&quot;&gt;一、想法由来&lt;/h2&gt;
&lt;p&gt;由于当前我司主要针对各大银行信用卡平台展开相关业务，&lt;br/&gt;故不难看出，各银行信用卡平台虽然有各自的特性，&lt;br/&gt;但其业务相似程度仍然很高，除必要的重复性工作外，仍有很大提升优化空间。&lt;br/&gt;例如： 各个银行平台都需要对账工作、都要安排人力去开发重复类似的功能，&lt;br/&gt;且不能很好地适应新的需求变化，修改耗时费力，可维护性较差。&lt;/p&gt;
&lt;h2 id=&quot;二业务分析&quot;&gt;二、业务分析&lt;/h2&gt;
&lt;p&gt;依托具体业务场景进行分析，每个平台都具有对账功能。&lt;br/&gt;对账业务：&lt;br/&gt;1、主要包括列表分页和导出功能&lt;br/&gt;2、能够按照时间范围搜索&lt;br/&gt;3、列表包括分页、金额统计、状态转换等等&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;优化依据：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;&lt;li&gt;对特性业务进行差异性对待（如导出数据字段，结果转换字段等等），&lt;/li&gt;
&lt;li&gt;充分利用面向对象的思想进行合理的抽象层次建设&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;三技术优化实践&quot;&gt;三、技术优化实践&lt;/h2&gt;
&lt;p&gt;后台技术栈为Jfinal，LayUI。&lt;/p&gt;
&lt;p&gt;关于对账优化整体思路：&lt;/p&gt;
&lt;h3 id=&quot;前端页面发起请求传递响应参数&quot;&gt;1、前端页面发起请求，传递响应参数&lt;/h3&gt;
&lt;p&gt;前端传递参数形式如下图：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;16&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;va&quot;&gt;PH&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;api2&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'#(base)/icbc/mall/compared/pay/list'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;st&quot;&gt;&quot;comparedListBean.orderId&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; orderId&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;st&quot;&gt;&quot;comparedListBean.reqNo&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; reqNo&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;st&quot;&gt;&quot;comparedListBean.startTime&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; startTime&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;st&quot;&gt;&quot;comparedListBean.endTime&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; endTime&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;st&quot;&gt;&quot;comparedListBean.pageNo&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; page&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;st&quot;&gt;&quot;comparedListBean.pageSize&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;20&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt;(res) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;采用bean类首写字母小写，加 ”.” 加 属性名称的形式进行书写。&lt;/p&gt;
&lt;h3 id=&quot;定义dto-进行参数的bean-形式接受&quot;&gt;2、定义dto 进行参数的bean 形式接受&lt;/h3&gt;
&lt;p&gt;由于所有列表，都包含起始搜索时间，当前页，每页显示数量，故定义基础列表dto的Bean 如下图所示：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;
&lt;span class=&quot;co&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * Description： 列表请求参数封装&lt;/span&gt;
&lt;span class=&quot;er&quot;&gt; * &amp;lt;br /&amp;gt; Author： galsang&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; */&lt;/span&gt;
&lt;span class=&quot;fu&quot;&gt;@Data&lt;/span&gt;
&lt;span class=&quot;fu&quot;&gt;@NoArgsConstructor&lt;/span&gt;
&lt;span class=&quot;fu&quot;&gt;@AllArgsConstructor&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; BaseListBean {

    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; String startTime;

    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; String endTime;

    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; pageNo = &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;;

    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; pageSize = &lt;span class=&quot;dv&quot;&gt;20&lt;/span&gt;;

    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; start = (pageNo - &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;) * pageSize;

}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;根据具体业务可以扩展基础列表dto的Bean，&lt;br/&gt;例如需要添加订单号、请求流水号，可创建Bean 继承基础bean进行扩展，如图：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;co&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * Description： 对账 - 列表请求参数封装&lt;/span&gt;
&lt;span class=&quot;er&quot;&gt; * &amp;lt;br /&amp;gt; Author： galsang&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; */&lt;/span&gt;
&lt;span class=&quot;fu&quot;&gt;@Data&lt;/span&gt;
&lt;span class=&quot;fu&quot;&gt;@NoArgsConstructor&lt;/span&gt;
&lt;span class=&quot;fu&quot;&gt;@AllArgsConstructor&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; ComparedListBean &lt;span class=&quot;kw&quot;&gt;extends&lt;/span&gt; BaseListBean {

    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; String orderId;

    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; String reqNo;

}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;后端使用getbean-进行接收根据需要对参数进行验证并将bean转换为map&quot;&gt;3、后端使用getBean 进行接收，根据需要对参数进行验证，并将Bean转换为Map&lt;/h3&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;14&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;co&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * 将接收参数的Bean 转换成 sqlMap&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; *&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;@param modelClass &lt;/span&gt;&lt;span class=&quot;co&quot;&gt;Bean.class&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * @return&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;@throws BeanException&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; */&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; Map&amp;lt;String, Object&amp;gt; &lt;span class=&quot;fu&quot;&gt;sqlMap&lt;/span&gt;(Class&amp;lt;?&amp;gt; modelClass) {
    &lt;span class=&quot;kw&quot;&gt;try&lt;/span&gt; {
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;sqlMapHandler&lt;/span&gt;(BeanUtil.&lt;span class=&quot;fu&quot;&gt;bean2map&lt;/span&gt;(&lt;span class=&quot;fu&quot;&gt;getBean&lt;/span&gt;(modelClass)));
    } &lt;span class=&quot;kw&quot;&gt;catch&lt;/span&gt; (BeanException e) {
        e.&lt;span class=&quot;fu&quot;&gt;printStackTrace&lt;/span&gt;();
    }
    &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;;
}

&lt;span class=&quot;co&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * 处理sql 参数数据&lt;/span&gt;
&lt;span class=&quot;er&quot;&gt; * &amp;lt;br /&amp;gt;&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; *&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;@param sqlMap&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * @return&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; */&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; Map&amp;lt;String, Object&amp;gt; &lt;span class=&quot;fu&quot;&gt;sqlMapHandler&lt;/span&gt;(Map&amp;lt;String, Object&amp;gt; sqlMap) {

    &lt;span class=&quot;co&quot;&gt;// 区别是导出还是列表&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt; == sqlMap.&lt;span class=&quot;fu&quot;&gt;get&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;start&quot;&lt;/span&gt;)){
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; sqlMap;
    }
    &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; pageNo = Integer.&lt;span class=&quot;fu&quot;&gt;parseInt&lt;/span&gt;(String.&lt;span class=&quot;fu&quot;&gt;valueOf&lt;/span&gt;(sqlMap.&lt;span class=&quot;fu&quot;&gt;get&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;pageNo&quot;&lt;/span&gt;)));
    &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; pageSize = Integer.&lt;span class=&quot;fu&quot;&gt;parseInt&lt;/span&gt;(String.&lt;span class=&quot;fu&quot;&gt;valueOf&lt;/span&gt;(sqlMap.&lt;span class=&quot;fu&quot;&gt;get&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;pageSize&quot;&lt;/span&gt;)));
    sqlMap.&lt;span class=&quot;fu&quot;&gt;put&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;start&quot;&lt;/span&gt;, (pageNo - &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;) * pageSize);
    &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; sqlMap;
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果需要对参数进行验证，则可以使用jfinal 验证Bean 的方法创建相应验证Bean。&lt;/p&gt;
&lt;h3 id=&quot;将sql-语句统一写在md文件中&quot;&gt;4、将sql 语句统一写在md文件中&lt;/h3&gt;
&lt;p&gt;对账业务主要用到四种形式的sql， 故定义枚举进行统一的约定。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;18&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;co&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * 定义使用sql命名空间后缀&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; */&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;enum&lt;/span&gt; NameSpaceSqlSuffix {

    &lt;span class=&quot;fu&quot;&gt;LIST&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;查询列表&quot;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&quot;.list&quot;&lt;/span&gt;),
    &lt;span class=&quot;fu&quot;&gt;COUNT&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;查询数量&quot;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&quot;.count&quot;&lt;/span&gt;),
    &lt;span class=&quot;fu&quot;&gt;TOTAL&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;查询统计&quot;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&quot;.total&quot;&lt;/span&gt;),
    &lt;span class=&quot;fu&quot;&gt;EXPORT&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;导出文件&quot;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&quot;.export&quot;&lt;/span&gt;);

    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; String name;

    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; String value;


    &lt;span class=&quot;fu&quot;&gt;NameSpaceSqlSuffix&lt;/span&gt;(String name, String value) {
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;name&lt;/span&gt; = name;
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;value&lt;/span&gt; = value;
    }

}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;命名统一，可以直接定位需要实现或变动的需求，方便维护&lt;/p&gt;
&lt;h3 id=&quot;结果数据转换接口&quot;&gt;5、结果数据转换接口&lt;/h3&gt;
&lt;p&gt;结果数据的的转换主要分为列表数据的转换和单条数据的转换，由于转换数据不一定相同，只要在具体的业务层进行定义内部类实现该接口run方法即可。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;co&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * Description： 结果类型数据转换接口&lt;/span&gt;
&lt;span class=&quot;er&quot;&gt; * &amp;lt;br /&amp;gt; Author： galsang&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; */&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;interface&lt;/span&gt; IConvertResult {

    &lt;span class=&quot;co&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     * 执行列表结果类型转换&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     *&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     * &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;@param records&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     */&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;run&lt;/span&gt;(List&amp;lt;Record&amp;gt; records);

    &lt;span class=&quot;co&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     * 执行单个结果类型转换&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     *&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     * &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;@param record&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     */&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;run&lt;/span&gt;(Record record);

}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;抽象公共方法&quot;&gt;6、抽象公共方法&lt;/h3&gt;
&lt;p&gt;通用查询列表&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;co&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * 查询并转换列表数据&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; *&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;@param sql &lt;/span&gt;&lt;span class=&quot;co&quot;&gt;           查询列表数据sql&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;@param iConvertResult &lt;/span&gt;&lt;span class=&quot;co&quot;&gt;数据转换&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;@return &lt;/span&gt;&lt;span class=&quot;co&quot;&gt;转换后的列表数据&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; */&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; List&amp;lt;Record&amp;gt; &lt;span class=&quot;fu&quot;&gt;doSqlAndResultConvert&lt;/span&gt;(String sql, IConvertResult iConvertResult) {
    List&amp;lt;Record&amp;gt; orders = dbPro.&lt;span class=&quot;fu&quot;&gt;find&lt;/span&gt;(sql);
    iConvertResult.&lt;span class=&quot;fu&quot;&gt;run&lt;/span&gt;(orders);
    &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; orders;
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;通过md命名空间查询列表信息&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;21&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;co&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * 通用查询列表信息&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; *&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;@param nameSpace &lt;/span&gt;&lt;span class=&quot;co&quot;&gt;     sql 文件的命名空间&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;@param sqlMap&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;@param iConvertResult&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * @return&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; */&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; Map&amp;lt;String, Object&amp;gt; &lt;span class=&quot;fu&quot;&gt;listByNameSpace&lt;/span&gt;(String nameSpace, Map&amp;lt;String, Object&amp;gt; sqlMap, IConvertResult iConvertResult) {

    String sqlList = dbPro.&lt;span class=&quot;fu&quot;&gt;getSqlPara&lt;/span&gt;(nameSpace + NameSpaceSqlSuffix.&lt;span class=&quot;fu&quot;&gt;LIST&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;getValue&lt;/span&gt;(), sqlMap).&lt;span class=&quot;fu&quot;&gt;getSql&lt;/span&gt;();
    String sqlCount = dbPro.&lt;span class=&quot;fu&quot;&gt;getSqlPara&lt;/span&gt;(nameSpace + NameSpaceSqlSuffix.&lt;span class=&quot;fu&quot;&gt;COUNT&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;getValue&lt;/span&gt;(), sqlMap).&lt;span class=&quot;fu&quot;&gt;getSql&lt;/span&gt;();
    String sqlTotal = dbPro.&lt;span class=&quot;fu&quot;&gt;getSqlPara&lt;/span&gt;(nameSpace + NameSpaceSqlSuffix.&lt;span class=&quot;fu&quot;&gt;TOTAL&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;getValue&lt;/span&gt;(), sqlMap).&lt;span class=&quot;fu&quot;&gt;getSql&lt;/span&gt;();
    &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; pageSize = Integer.&lt;span class=&quot;fu&quot;&gt;parseInt&lt;/span&gt;(String.&lt;span class=&quot;fu&quot;&gt;valueOf&lt;/span&gt;(sqlMap.&lt;span class=&quot;fu&quot;&gt;get&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;pageSize&quot;&lt;/span&gt;)));

    &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;listBySql&lt;/span&gt;(sqlList, sqlCount, sqlTotal, pageSize, iConvertResult);
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;通过sql查询列表信息&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;23&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;co&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * 通用查询列表信息&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; *&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;@param sql &lt;/span&gt;&lt;span class=&quot;co&quot;&gt;           查询数据列表sql&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;@param countSql &lt;/span&gt;&lt;span class=&quot;co&quot;&gt;      查询统计数量sql&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;@param totalSql &lt;/span&gt;&lt;span class=&quot;co&quot;&gt;      查询统计总计sql&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;@param pageSize &lt;/span&gt;&lt;span class=&quot;co&quot;&gt;      每页显示长度&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;@param iConvertResult &lt;/span&gt;&lt;span class=&quot;co&quot;&gt;结果类型装换实现类&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;@return &lt;/span&gt;&lt;span class=&quot;co&quot;&gt;处理完成的结果数据&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; */&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; Map&amp;lt;String, Object&amp;gt; &lt;span class=&quot;fu&quot;&gt;listBySql&lt;/span&gt;(String sql, String countSql, String totalSql, &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; pageSize, IConvertResult iConvertResult) {

    &lt;span class=&quot;co&quot;&gt;// 查询数据总量&lt;/span&gt;
    Long counts = dbPro.&lt;span class=&quot;fu&quot;&gt;queryLong&lt;/span&gt;(countSql);

    &lt;span class=&quot;co&quot;&gt;// 查询统计数据&lt;/span&gt;
    Record total = &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;;
    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (StringUtil.&lt;span class=&quot;fu&quot;&gt;isNotEmpty&lt;/span&gt;(totalSql)) {
        total = dbPro.&lt;span class=&quot;fu&quot;&gt;findFirst&lt;/span&gt;(totalSql);
        iConvertResult.&lt;span class=&quot;fu&quot;&gt;run&lt;/span&gt;(total);
    }

    &lt;span class=&quot;co&quot;&gt;// 查询列表数据并执行结果转换&lt;/span&gt;
    List&amp;lt;Record&amp;gt; orders = &lt;span class=&quot;fu&quot;&gt;doSqlAndResultConvert&lt;/span&gt;(sql, iConvertResult);

    &lt;span class=&quot;co&quot;&gt;// 响应数据组织&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;float&lt;/span&gt; pages = (&lt;span class=&quot;dt&quot;&gt;float&lt;/span&gt;) counts / pageSize;
    Map&amp;lt;String, Object&amp;gt; resultMap = Maps.&lt;span class=&quot;fu&quot;&gt;newHashMap&lt;/span&gt;();
    resultMap.&lt;span class=&quot;fu&quot;&gt;put&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;errorCode&quot;&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;);
    resultMap.&lt;span class=&quot;fu&quot;&gt;put&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;message&quot;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&quot;操作成功&quot;&lt;/span&gt;);
    resultMap.&lt;span class=&quot;fu&quot;&gt;put&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;data&quot;&lt;/span&gt;, orders);
    resultMap.&lt;span class=&quot;fu&quot;&gt;put&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;totalRow&quot;&lt;/span&gt;, counts);
    resultMap.&lt;span class=&quot;fu&quot;&gt;put&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;pages&quot;&lt;/span&gt;, (&lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt;) Math.&lt;span class=&quot;fu&quot;&gt;ceil&lt;/span&gt;(pages));
    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (StringUtil.&lt;span class=&quot;fu&quot;&gt;isNotEmpty&lt;/span&gt;(totalSql)) {
        resultMap.&lt;span class=&quot;fu&quot;&gt;put&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;total&quot;&lt;/span&gt;, total);
    }
    &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; resultMap;
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;进行数据库查询；&lt;br/&gt;对查询结果数据进行转换；&lt;br/&gt;响应数据的组织。&lt;/p&gt;
&lt;p&gt;查询导出文件数据&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;15&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;co&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * 导出文件&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;@param nameSpace&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;@param sqlMap&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;@param iConvertResult&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * @return&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; */&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; List&amp;lt;Record&amp;gt; &lt;span class=&quot;fu&quot;&gt;exportByNameSpace&lt;/span&gt;(String nameSpace, Map&amp;lt;String, Object&amp;gt; sqlMap, IConvertResult iConvertResult) {
    &lt;span class=&quot;co&quot;&gt;// 要导出的数据信息（已经转换）&lt;/span&gt;
     &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;doSqlAndResultConvert&lt;/span&gt;(dbPro.&lt;span class=&quot;fu&quot;&gt;getSqlPara&lt;/span&gt;(nameSpace + NameSpaceSqlSuffix.&lt;span class=&quot;fu&quot;&gt;EXPORT&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;getValue&lt;/span&gt;(), sqlMap).&lt;span class=&quot;fu&quot;&gt;getSql&lt;/span&gt;(),
            iConvertResult);
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;具体业务层实现&quot;&gt;7、具体业务层实现&lt;/h3&gt;
&lt;p&gt;支付对账业务层&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;14&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;co&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * Description： 对账 - 支付业务层&lt;/span&gt;
&lt;span class=&quot;er&quot;&gt; * &amp;lt;br /&amp;gt; Author： galsang&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; */&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; ComparedPayService &lt;span class=&quot;kw&quot;&gt;extends&lt;/span&gt; BaseService {

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;final&lt;/span&gt; String MARKDOWN_SQL_NAMESPACE = &lt;span class=&quot;st&quot;&gt;&quot;mall_compared_pay&quot;&lt;/span&gt;;

    &lt;span class=&quot;co&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     * 查询信息列表&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     *&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     * &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;@param sqlMap &lt;/span&gt;&lt;span class=&quot;co&quot;&gt;查询条件&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     * &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;@return &lt;/span&gt;&lt;span class=&quot;co&quot;&gt;响应结果数据&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     */&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; Map&amp;lt;String, Object&amp;gt; &lt;span class=&quot;fu&quot;&gt;list&lt;/span&gt;(Map&amp;lt;String, Object&amp;gt; sqlMap) {
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;super&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;listByNameSpace&lt;/span&gt;(MARKDOWN_SQL_NAMESPACE, sqlMap, &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;ComparedPayConvertResult&lt;/span&gt;());
    }&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;继承基础抽象业务BeseService；&lt;br/&gt;定义具体业务层使用的sql命名空间常量；&lt;br/&gt;查询信息列表。&lt;/p&gt;
&lt;p&gt;实现 IConvertResult 接口&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;co&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * 结果类型装换实现类&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; */&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; ComparedPayConvertResult &lt;span class=&quot;kw&quot;&gt;extends&lt;/span&gt; AbstractConvertResult {

}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;由于支付对账和退款对账转换数据相同，故定义抽象转换类&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;24&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;co&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * Description：&lt;/span&gt;
&lt;span class=&quot;er&quot;&gt; * &amp;lt;br /&amp;gt; Author： galsang&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; */&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; AbstractConvertResult &lt;span class=&quot;kw&quot;&gt;implements&lt;/span&gt; IConvertResult {


    List&amp;lt;Record&amp;gt; goodExts = Db.&lt;span class=&quot;fu&quot;&gt;use&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;superfilm&quot;&lt;/span&gt;).&lt;span class=&quot;fu&quot;&gt;find&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot; SELECT id, color FROM mall_good_ext &quot;&lt;/span&gt;);

    &lt;span class=&quot;fu&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;run&lt;/span&gt;(List&amp;lt;Record&amp;gt; orders) {
        orders.&lt;span class=&quot;fu&quot;&gt;forEach&lt;/span&gt;(o -&amp;gt; {
            o.&lt;span class=&quot;fu&quot;&gt;set&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;companyAmt&quot;&lt;/span&gt;, o.&lt;span class=&quot;fu&quot;&gt;getInt&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;amount&quot;&lt;/span&gt;) - o.&lt;span class=&quot;fu&quot;&gt;getInt&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;payAmount&quot;&lt;/span&gt;));
            RecordUtil.&lt;span class=&quot;fu&quot;&gt;sqlToJavaAmount&lt;/span&gt;(o, &lt;span class=&quot;st&quot;&gt;&quot;amount&quot;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&quot;payAmount&quot;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&quot;pointAmt&quot;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&quot;totalDiscAmt&quot;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&quot;companyAmt&quot;&lt;/span&gt;);
            o.&lt;span class=&quot;fu&quot;&gt;set&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;style&quot;&lt;/span&gt;, &lt;span class=&quot;fu&quot;&gt;getStyle&lt;/span&gt;(o.&lt;span class=&quot;fu&quot;&gt;getInt&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;goodExtId&quot;&lt;/span&gt;)));
            o.&lt;span class=&quot;fu&quot;&gt;set&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;statusCN&quot;&lt;/span&gt;, MallOrderStatus.&lt;span class=&quot;fu&quot;&gt;reasonPhraseByStatusCode&lt;/span&gt;(o.&lt;span class=&quot;fu&quot;&gt;getInt&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;status&quot;&lt;/span&gt;)));
        });
    }

    &lt;span class=&quot;fu&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;run&lt;/span&gt;(Record record) {
        record.&lt;span class=&quot;fu&quot;&gt;set&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;totalCompanyAmt&quot;&lt;/span&gt;, record.&lt;span class=&quot;fu&quot;&gt;getInt&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;totalAmount&quot;&lt;/span&gt;) - record.&lt;span class=&quot;fu&quot;&gt;getInt&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;totalPayAmount&quot;&lt;/span&gt;));
        RecordUtil.&lt;span class=&quot;fu&quot;&gt;sqlToJavaAmount&lt;/span&gt;(record, &lt;span class=&quot;st&quot;&gt;&quot;totalAmount&quot;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&quot;totalPayAmount&quot;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&quot;totalPointAmt&quot;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&quot;totalTotalDiscAmt&quot;&lt;/span&gt;);
    }

    &lt;span class=&quot;co&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     * 获取商品规格&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     *&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     * &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;@param goodExtId &lt;/span&gt;&lt;span class=&quot;co&quot;&gt;商品详情id&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     * &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;@return &lt;/span&gt;&lt;span class=&quot;co&quot;&gt;商品规格&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     */&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;fu&quot;&gt;getStyle&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; goodExtId) {
        Iterator&amp;lt;Record&amp;gt; iterator = goodExts.&lt;span class=&quot;fu&quot;&gt;iterator&lt;/span&gt;();
        &lt;span class=&quot;kw&quot;&gt;while&lt;/span&gt; (iterator.&lt;span class=&quot;fu&quot;&gt;hasNext&lt;/span&gt;()) {
            Record record = iterator.&lt;span class=&quot;fu&quot;&gt;next&lt;/span&gt;();
            &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (record.&lt;span class=&quot;fu&quot;&gt;getInt&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;id&quot;&lt;/span&gt;).&lt;span class=&quot;fu&quot;&gt;intValue&lt;/span&gt;() == goodExtId) {
                &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; record.&lt;span class=&quot;fu&quot;&gt;getStr&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;color&quot;&lt;/span&gt;);
            }
        }
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;没有对应规格或已下架&quot;&lt;/span&gt;;
    }
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;生成导出文件&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;19&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;co&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * 生成导出文件&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; *&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;@param sqlMap &lt;/span&gt;&lt;span class=&quot;co&quot;&gt;        查询条件&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;@param fileSuffixName &lt;/span&gt;&lt;span class=&quot;co&quot;&gt;生成文件名称后缀&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;@param sheetName &lt;/span&gt;&lt;span class=&quot;co&quot;&gt;     工作表标题名称&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;@return &lt;/span&gt;&lt;span class=&quot;co&quot;&gt;要导出的文件对象&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;@throws IOException&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;@throws URISyntaxException&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; */&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; File &lt;span class=&quot;fu&quot;&gt;export&lt;/span&gt;(Map&amp;lt;String, Object&amp;gt; sqlMap, String fileSuffixName, String sheetName) &lt;span class=&quot;kw&quot;&gt;throws&lt;/span&gt; IOException, URISyntaxException {

    &lt;span class=&quot;co&quot;&gt;// TODO 需要切换sql 命名空间， 和 结果转换类&lt;/span&gt;
    List&amp;lt;Record&amp;gt; records = &lt;span class=&quot;kw&quot;&gt;super&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;exportByNameSpace&lt;/span&gt;(MARKDOWN_SQL_NAMESPACE, sqlMap, &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;ComparedPayConvertResult&lt;/span&gt;());

    &lt;span class=&quot;co&quot;&gt;// 执行相应的导出操作&lt;/span&gt;
    Workbook wb = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;XSSFWorkbook&lt;/span&gt;();

    &lt;span class=&quot;co&quot;&gt;// TODO 必须定制化操作&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;doSheet&lt;/span&gt;(wb, records, sheetName);

    &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; ExportPoiUtil.&lt;span class=&quot;fu&quot;&gt;createExportFile&lt;/span&gt;(wb, fileSuffixName);
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;由于导出文件字段的差异性，所以必须根据具体业务对相应的字段和数据进行修改。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;31&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;
&lt;span class=&quot;co&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * 填充工作表数据&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; *&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;@param wb &lt;/span&gt;&lt;span class=&quot;co&quot;&gt;        表格对象&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;@param recordList &lt;/span&gt;&lt;span class=&quot;co&quot;&gt;填充列表数据信息&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;@param sheetName &lt;/span&gt;&lt;span class=&quot;co&quot;&gt; 工作表名称&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; */&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;doSheet&lt;/span&gt;(Workbook wb, List&amp;lt;Record&amp;gt; recordList, String sheetName) {
    &lt;span class=&quot;co&quot;&gt;// 创建工作表 - 并制定工作表名称&lt;/span&gt;
    Sheet sheet = wb.&lt;span class=&quot;fu&quot;&gt;createSheet&lt;/span&gt;(WorkbookUtil.&lt;span class=&quot;fu&quot;&gt;createSafeSheetName&lt;/span&gt;(sheetName));
    &lt;span class=&quot;dt&quot;&gt;short&lt;/span&gt; rowNum = &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;;  &lt;span class=&quot;co&quot;&gt;// 设置初始行号&lt;/span&gt;
    Row row = sheet.&lt;span class=&quot;fu&quot;&gt;createRow&lt;/span&gt;(rowNum++); &lt;span class=&quot;co&quot;&gt;// 创建表格标题行&lt;/span&gt;
    ExportPoiUtil.&lt;span class=&quot;fu&quot;&gt;header&lt;/span&gt;(wb, row, &lt;span class=&quot;st&quot;&gt;&quot;序号&quot;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&quot;订单号&quot;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&quot;请求流水号&quot;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&quot;商品&quot;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&quot;商品规格&quot;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&quot;数量&quot;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&quot;总金额&quot;&lt;/span&gt;,
            &lt;span class=&quot;st&quot;&gt;&quot;清算&quot;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&quot;积分抵扣&quot;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&quot;行内优惠&quot;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&quot;公司补贴&quot;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&quot;支付时间&quot;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&quot;状态&quot;&lt;/span&gt;);
    &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; serNo = &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;; &lt;span class=&quot;co&quot;&gt;// 填充表格数据行&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;for&lt;/span&gt; (Record order : recordList) {
        &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; columnNum = &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;;
        JSONObject json = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;JSONObject&lt;/span&gt;();
        json.&lt;span class=&quot;fu&quot;&gt;put&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;amount&quot;&lt;/span&gt;, order.&lt;span class=&quot;fu&quot;&gt;getBigDecimal&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;amount&quot;&lt;/span&gt;));
        json.&lt;span class=&quot;fu&quot;&gt;put&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;payAmount&quot;&lt;/span&gt;, order.&lt;span class=&quot;fu&quot;&gt;getBigDecimal&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;payAmount&quot;&lt;/span&gt;));
        json.&lt;span class=&quot;fu&quot;&gt;put&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;pointAmt&quot;&lt;/span&gt;, order.&lt;span class=&quot;fu&quot;&gt;getBigDecimal&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;pointAmt&quot;&lt;/span&gt;));
        json.&lt;span class=&quot;fu&quot;&gt;put&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;totalDiscAmt&quot;&lt;/span&gt;, order.&lt;span class=&quot;fu&quot;&gt;getBigDecimal&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;totalDiscAmt&quot;&lt;/span&gt;));
        json.&lt;span class=&quot;fu&quot;&gt;put&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;companyAmt&quot;&lt;/span&gt;, order.&lt;span class=&quot;fu&quot;&gt;getBigDecimal&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;amount&quot;&lt;/span&gt;).&lt;span class=&quot;fu&quot;&gt;subtract&lt;/span&gt;(order.&lt;span class=&quot;fu&quot;&gt;getBigDecimal&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;payAmount&quot;&lt;/span&gt;)));

        row = sheet.&lt;span class=&quot;fu&quot;&gt;createRow&lt;/span&gt;(rowNum++);
        row.&lt;span class=&quot;fu&quot;&gt;createCell&lt;/span&gt;(columnNum++).&lt;span class=&quot;fu&quot;&gt;setCellValue&lt;/span&gt;(serNo++);
        row.&lt;span class=&quot;fu&quot;&gt;createCell&lt;/span&gt;(columnNum++).&lt;span class=&quot;fu&quot;&gt;setCellValue&lt;/span&gt;(order.&lt;span class=&quot;fu&quot;&gt;getStr&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;orderId&quot;&lt;/span&gt;));
        row.&lt;span class=&quot;fu&quot;&gt;createCell&lt;/span&gt;(columnNum++).&lt;span class=&quot;fu&quot;&gt;setCellValue&lt;/span&gt;(order.&lt;span class=&quot;fu&quot;&gt;getStr&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;reqNo&quot;&lt;/span&gt;));
        row.&lt;span class=&quot;fu&quot;&gt;createCell&lt;/span&gt;(columnNum++).&lt;span class=&quot;fu&quot;&gt;setCellValue&lt;/span&gt;(order.&lt;span class=&quot;fu&quot;&gt;getStr&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;goodName&quot;&lt;/span&gt;));
        row.&lt;span class=&quot;fu&quot;&gt;createCell&lt;/span&gt;(columnNum++).&lt;span class=&quot;fu&quot;&gt;setCellValue&lt;/span&gt;(order.&lt;span class=&quot;fu&quot;&gt;getStr&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;style&quot;&lt;/span&gt;));
        row.&lt;span class=&quot;fu&quot;&gt;createCell&lt;/span&gt;(columnNum++).&lt;span class=&quot;fu&quot;&gt;setCellValue&lt;/span&gt;(order.&lt;span class=&quot;fu&quot;&gt;getStr&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;count&quot;&lt;/span&gt;));
        row.&lt;span class=&quot;fu&quot;&gt;createCell&lt;/span&gt;(columnNum++).&lt;span class=&quot;fu&quot;&gt;setCellValue&lt;/span&gt;(json.&lt;span class=&quot;fu&quot;&gt;getDouble&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;amount&quot;&lt;/span&gt;));
        row.&lt;span class=&quot;fu&quot;&gt;createCell&lt;/span&gt;(columnNum++).&lt;span class=&quot;fu&quot;&gt;setCellValue&lt;/span&gt;(json.&lt;span class=&quot;fu&quot;&gt;getDouble&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;payAmount&quot;&lt;/span&gt;));
        row.&lt;span class=&quot;fu&quot;&gt;createCell&lt;/span&gt;(columnNum++).&lt;span class=&quot;fu&quot;&gt;setCellValue&lt;/span&gt;(json.&lt;span class=&quot;fu&quot;&gt;getDouble&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;pointAmt&quot;&lt;/span&gt;));
        row.&lt;span class=&quot;fu&quot;&gt;createCell&lt;/span&gt;(columnNum++).&lt;span class=&quot;fu&quot;&gt;setCellValue&lt;/span&gt;(json.&lt;span class=&quot;fu&quot;&gt;getDouble&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;totalDiscAmt&quot;&lt;/span&gt;));
        row.&lt;span class=&quot;fu&quot;&gt;createCell&lt;/span&gt;(columnNum++).&lt;span class=&quot;fu&quot;&gt;setCellValue&lt;/span&gt;(json.&lt;span class=&quot;fu&quot;&gt;getDouble&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;companyAmt&quot;&lt;/span&gt;));
        row.&lt;span class=&quot;fu&quot;&gt;createCell&lt;/span&gt;(columnNum++).&lt;span class=&quot;fu&quot;&gt;setCellValue&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;JDateTime&lt;/span&gt;(order.&lt;span class=&quot;fu&quot;&gt;getDate&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;createdTime&quot;&lt;/span&gt;)).&lt;span class=&quot;fu&quot;&gt;toString&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;YYYY-MM-DD hh:mm:ss&quot;&lt;/span&gt;));
        row.&lt;span class=&quot;fu&quot;&gt;createCell&lt;/span&gt;(columnNum++).&lt;span class=&quot;fu&quot;&gt;setCellValue&lt;/span&gt;(order.&lt;span class=&quot;fu&quot;&gt;getStr&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;statusCN&quot;&lt;/span&gt;));
    }

}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;工具类&quot;&gt;8、工具类&lt;/h3&gt;
&lt;p&gt;由于当前系统精确到分，数据库中以int存储分，但是前端显示的时候要求显示元，故可使用此工具类进行“分”到“元”的转换处理。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;13&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;co&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * Description： 记录对象相关工具类&lt;/span&gt;
&lt;span class=&quot;er&quot;&gt; * &amp;lt;br /&amp;gt; Author： galsang&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; */&lt;/span&gt;
&lt;span class=&quot;fu&quot;&gt;@Slf4j&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; RecordUtil {


    &lt;span class=&quot;co&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     * 数据库中保存的金额（分）转换为金额（元）&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     *&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     * &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;@param record &lt;/span&gt;&lt;span class=&quot;co&quot;&gt;记录对象&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     * &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;@param key &lt;/span&gt;&lt;span class=&quot;co&quot;&gt;   字段索引&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     */&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;sqlToJavaAmount&lt;/span&gt;(Record record, String&lt;span class=&quot;kw&quot;&gt;... &lt;/span&gt;key) {
        &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (record != &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;) {
            &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; keyLength = key.&lt;span class=&quot;fu&quot;&gt;length&lt;/span&gt;;
&lt;span class=&quot;co&quot;&gt;//            log.info(&quot; keyLength ================ &quot; + keyLength);&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;; i &amp;lt; keyLength; i++) {
&lt;span class=&quot;co&quot;&gt;//                log.info(&quot; key[&quot; + i + &quot;] ================ &quot; + key[i]);&lt;/span&gt;
                &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (record.&lt;span class=&quot;fu&quot;&gt;getInt&lt;/span&gt;(key[i]) != &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;) {
                    record.&lt;span class=&quot;fu&quot;&gt;set&lt;/span&gt;(key[i], &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; BigDecimal(record.&lt;span class=&quot;fu&quot;&gt;getInt&lt;/span&gt;(key[i])).&lt;span class=&quot;fu&quot;&gt;divide&lt;/span&gt;(BigDecimal.&lt;span class=&quot;fu&quot;&gt;valueOf&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;100&lt;/span&gt;)));
                }&lt;span class=&quot;kw&quot;&gt;else&lt;/span&gt;{
                    record.&lt;span class=&quot;fu&quot;&gt;set&lt;/span&gt;(key[i], &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; BigDecimal(&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;));
                }
            }
        }
    }

}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;文件导出工具类&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;co&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * @Description: 导出POI文件工具类&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * @Author： galsang&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * @Date： 2017/7/7&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; */&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; ExportPoiUtil &lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;具体代码参见后台对账业务实现。&lt;/p&gt;
&lt;h3 id=&quot;几点约定&quot;&gt;9、几点约定&lt;/h3&gt;
&lt;ol&gt;&lt;li&gt;前端: startTime 、endTime、pageNo、pageSize、&lt;/li&gt;
&lt;li&gt;md – sql命名空间后缀 : list、count、total、export&lt;/li&gt;
&lt;/ol&gt;&lt;h2 id=&quot;四交流提高&quot;&gt;四、交流提高&lt;/h2&gt;
&lt;p&gt;不足之处，还请各位同事多多指教，谢谢。&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;同时经过调整最终形成以下基础业务层代码。&lt;/p&gt;
&lt;p&gt;BaseService 代码如下：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;63&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;

&lt;span class=&quot;co&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * 基础业务层封装&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; *&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;@author &lt;/span&gt;&lt;span class=&quot;co&quot;&gt;ljmatlight&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * @date 2017/10/17&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; */&lt;/span&gt;
&lt;span class=&quot;fu&quot;&gt;@Slf4j&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; BaseService {

    &lt;span class=&quot;co&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     * 由子类提供具体数据源=&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     *&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     * @return&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     */&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;abstract&lt;/span&gt; DbPro &lt;span class=&quot;fu&quot;&gt;dbPro&lt;/span&gt;();
    
    &lt;span class=&quot;co&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     * 由子类提供具体 sql 命名空间&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     *&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     * @return&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     */&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;abstract&lt;/span&gt; String &lt;span class=&quot;fu&quot;&gt;sqlNameSpace&lt;/span&gt;();

    &lt;span class=&quot;co&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     * 由子类提供具体结果数据转换&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     *&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     * @return&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     */&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;abstract&lt;/span&gt; IConvertResult &lt;span class=&quot;fu&quot;&gt;iConvertResult&lt;/span&gt;();

    &lt;span class=&quot;co&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     * 通用查询列表信息&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     *&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     * &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;@param sql &lt;/span&gt;&lt;span class=&quot;co&quot;&gt;           查询数据列表sql&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     * &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;@param countSql &lt;/span&gt;&lt;span class=&quot;co&quot;&gt;      查询统计数量sql&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     * &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;@param totalSql &lt;/span&gt;&lt;span class=&quot;co&quot;&gt;      查询统计总计sql&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     * &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;@param pageSize &lt;/span&gt;&lt;span class=&quot;co&quot;&gt;      每页显示长度&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     * &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;@param iConvertResult &lt;/span&gt;&lt;span class=&quot;co&quot;&gt;结果类型装换实现类&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     * &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;@return &lt;/span&gt;&lt;span class=&quot;co&quot;&gt;处理完成的结果数据&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     */&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; Map&amp;lt;String, Object&amp;gt; &lt;span class=&quot;fu&quot;&gt;listBySql&lt;/span&gt;(String sql, String countSql, String totalSql, &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; pageSize, IConvertResult iConvertResult) {

        &lt;span class=&quot;co&quot;&gt;// 查询数据总量&lt;/span&gt;
        Long counts = &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;dbPro&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;queryLong&lt;/span&gt;(countSql);

        &lt;span class=&quot;co&quot;&gt;// 查询列表数据并执行结果转换&lt;/span&gt;
        List&amp;lt;Record&amp;gt; orders = &lt;span class=&quot;fu&quot;&gt;doSqlAndResultConvert&lt;/span&gt;(sql, iConvertResult);

        &lt;span class=&quot;co&quot;&gt;// 响应数据组织&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;float&lt;/span&gt; pages = (&lt;span class=&quot;dt&quot;&gt;float&lt;/span&gt;) counts / pageSize;
        Map&amp;lt;String, Object&amp;gt; resultMap = Maps.&lt;span class=&quot;fu&quot;&gt;newHashMap&lt;/span&gt;();
        resultMap.&lt;span class=&quot;fu&quot;&gt;put&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;errorCode&quot;&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;);
        resultMap.&lt;span class=&quot;fu&quot;&gt;put&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;message&quot;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&quot;操作成功&quot;&lt;/span&gt;);
        resultMap.&lt;span class=&quot;fu&quot;&gt;put&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;data&quot;&lt;/span&gt;, orders);
        resultMap.&lt;span class=&quot;fu&quot;&gt;put&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;totalRow&quot;&lt;/span&gt;, counts);
        resultMap.&lt;span class=&quot;fu&quot;&gt;put&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;pages&quot;&lt;/span&gt;, (&lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt;) Math.&lt;span class=&quot;fu&quot;&gt;ceil&lt;/span&gt;(pages));

        &lt;span class=&quot;co&quot;&gt;// 查询统计数据&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (StringUtil.&lt;span class=&quot;fu&quot;&gt;isNotEmpty&lt;/span&gt;(totalSql)) {
            Record total = &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;dbPro&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;findFirst&lt;/span&gt;(totalSql);

            &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (iConvertResult != &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;) {
                iConvertResult.&lt;span class=&quot;fu&quot;&gt;run&lt;/span&gt;(total);
            }
            resultMap.&lt;span class=&quot;fu&quot;&gt;put&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;total&quot;&lt;/span&gt;, total);
        }
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; resultMap;
    }

    &lt;span class=&quot;co&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     * 通用查询列表信息&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     *&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     * &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;@param nameSpace &lt;/span&gt;&lt;span class=&quot;co&quot;&gt;     sql 文件的命名空间&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     * &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;@param sqlMap &lt;/span&gt;&lt;span class=&quot;co&quot;&gt;        sql参数&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     * &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;@param iConvertResult&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     * @return&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     */&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;protected&lt;/span&gt; Map&amp;lt;String, Object&amp;gt; &lt;span class=&quot;fu&quot;&gt;listByNameSpace&lt;/span&gt;(String nameSpace, Map&amp;lt;String, Object&amp;gt; sqlMap, IConvertResult iConvertResult) {

        String sqlList = &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;dbPro&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;getSqlPara&lt;/span&gt;(nameSpace + NameSpaceSqlSuffix.&lt;span class=&quot;fu&quot;&gt;LIST&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;getValue&lt;/span&gt;(), sqlMap).&lt;span class=&quot;fu&quot;&gt;getSql&lt;/span&gt;();
        String sqlCount = &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;dbPro&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;getSqlPara&lt;/span&gt;(nameSpace + NameSpaceSqlSuffix.&lt;span class=&quot;fu&quot;&gt;COUNT&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;getValue&lt;/span&gt;(), sqlMap).&lt;span class=&quot;fu&quot;&gt;getSql&lt;/span&gt;();

        String sqlTotal = &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;;

        &lt;span class=&quot;kw&quot;&gt;try&lt;/span&gt; {
            sqlTotal = &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;dbPro&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;getSqlPara&lt;/span&gt;(nameSpace + NameSpaceSqlSuffix.&lt;span class=&quot;fu&quot;&gt;TOTAL&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;getValue&lt;/span&gt;(), sqlMap).&lt;span class=&quot;fu&quot;&gt;getSql&lt;/span&gt;();
        } &lt;span class=&quot;kw&quot;&gt;catch&lt;/span&gt; (Exception e) {
            log.&lt;span class=&quot;fu&quot;&gt;info&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;sqlTotal === 没有统计相关 sql&quot;&lt;/span&gt;);
        }

        &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; pageSize = Integer.&lt;span class=&quot;fu&quot;&gt;parseInt&lt;/span&gt;(String.&lt;span class=&quot;fu&quot;&gt;valueOf&lt;/span&gt;(sqlMap.&lt;span class=&quot;fu&quot;&gt;get&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;pageSize&quot;&lt;/span&gt;)));

        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;listBySql&lt;/span&gt;(sqlList, sqlCount, sqlTotal, pageSize, iConvertResult);
    }

    &lt;span class=&quot;co&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     * 查询并转换列表数据&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     *&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     * &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;@param sql &lt;/span&gt;&lt;span class=&quot;co&quot;&gt;           查询列表数据sql&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     * &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;@param iConvertResult &lt;/span&gt;&lt;span class=&quot;co&quot;&gt;数据转换&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     * &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;@return &lt;/span&gt;&lt;span class=&quot;co&quot;&gt;转换后的列表数据&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     */&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; List&amp;lt;Record&amp;gt; &lt;span class=&quot;fu&quot;&gt;doSqlAndResultConvert&lt;/span&gt;(String sql, IConvertResult iConvertResult) {

        List&amp;lt;Record&amp;gt; orders = &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;dbPro&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;find&lt;/span&gt;(sql);

        &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (iConvertResult != &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;) {
            iConvertResult.&lt;span class=&quot;fu&quot;&gt;run&lt;/span&gt;(orders);
        }

        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; orders;
    }

    &lt;span class=&quot;co&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     * 导出文件&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     *&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     * &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;@param nameSpace&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     * &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;@param sqlMap&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     * &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;@param iConvertResult&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     * @return&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     */&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; List&amp;lt;Record&amp;gt; &lt;span class=&quot;fu&quot;&gt;exportByNameSpace&lt;/span&gt;(String nameSpace, Map&amp;lt;String, Object&amp;gt; sqlMap, IConvertResult iConvertResult) {
        &lt;span class=&quot;co&quot;&gt;// 要导出的数据信息（已经转换）&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;doSqlAndResultConvert&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;dbPro&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;getSqlPara&lt;/span&gt;(nameSpace + NameSpaceSqlSuffix.&lt;span class=&quot;fu&quot;&gt;EXPORT&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;getValue&lt;/span&gt;(), sqlMap).&lt;span class=&quot;fu&quot;&gt;getSql&lt;/span&gt;(),
                iConvertResult);
    }

    &lt;span class=&quot;co&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     * 查询信息列表&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     *&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     * &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;@param sqlMap &lt;/span&gt;&lt;span class=&quot;co&quot;&gt;查询条件&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     * &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;@return &lt;/span&gt;&lt;span class=&quot;co&quot;&gt;响应结果数据&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     */&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; Map&amp;lt;String, Object&amp;gt; &lt;span class=&quot;fu&quot;&gt;list&lt;/span&gt;(Map&amp;lt;String, Object&amp;gt; sqlMap) {
        log.&lt;span class=&quot;fu&quot;&gt;info&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;this.sqlNameSpace() ============= &quot;&lt;/span&gt; + &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;sqlNameSpace&lt;/span&gt;());
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;listByNameSpace&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;sqlNameSpace&lt;/span&gt;(), sqlMap, &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;iConvertResult&lt;/span&gt;());
    }

    &lt;span class=&quot;co&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     * 生成导出文件&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     *&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     * &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;@param sqlMap &lt;/span&gt;&lt;span class=&quot;co&quot;&gt;        查询条件&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     * &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;@param fileSuffixName &lt;/span&gt;&lt;span class=&quot;co&quot;&gt;生成文件名称后缀&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     * &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;@param sheetName &lt;/span&gt;&lt;span class=&quot;co&quot;&gt;     工作表标题名称&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     * &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;@return &lt;/span&gt;&lt;span class=&quot;co&quot;&gt;要导出的文件对象&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     * &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;@throws IOException&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     * &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;@throws URISyntaxException&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     */&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; File &lt;span class=&quot;fu&quot;&gt;export&lt;/span&gt;(Map&amp;lt;String, Object&amp;gt; sqlMap, String fileSuffixName, String sheetName) &lt;span class=&quot;kw&quot;&gt;throws&lt;/span&gt; IOException, URISyntaxException {

        &lt;span class=&quot;co&quot;&gt;// 需要切换sql 命名空间， 和 结果转换类&lt;/span&gt;
        List&amp;lt;Record&amp;gt; records = &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;exportByNameSpace&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;sqlNameSpace&lt;/span&gt;(), sqlMap, &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;iConvertResult&lt;/span&gt;());

        &lt;span class=&quot;co&quot;&gt;// 执行相应的导出操作&lt;/span&gt;
        Workbook wb = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;XSSFWorkbook&lt;/span&gt;();

        &lt;span class=&quot;co&quot;&gt;// 必须定制化操作&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;doSheet&lt;/span&gt;(wb, records, sheetName);

        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; ExportPoiUtil.&lt;span class=&quot;fu&quot;&gt;createExportFile&lt;/span&gt;(wb, fileSuffixName);
    }

    &lt;span class=&quot;co&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     * 由子类提供具体处理装换的数据&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     *&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     * &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;@param wb&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     * &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;@param recordList&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     * &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;@param sheetName&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     */&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;doSheet&lt;/span&gt;(Workbook wb, List&amp;lt;Record&amp;gt; recordList, String sheetName);

    &lt;span class=&quot;co&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     * 定义使用sql命名空间后缀&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     */&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;enum&lt;/span&gt; NameSpaceSqlSuffix {

        &lt;span class=&quot;fu&quot;&gt;LIST&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;查询列表&quot;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&quot;.list&quot;&lt;/span&gt;), &lt;span class=&quot;fu&quot;&gt;COUNT&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;查询数量&quot;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&quot;.count&quot;&lt;/span&gt;), &lt;span class=&quot;fu&quot;&gt;TOTAL&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;查询统计&quot;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&quot;.total&quot;&lt;/span&gt;), &lt;span class=&quot;fu&quot;&gt;EXPORT&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;导出文件&quot;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&quot;.export&quot;&lt;/span&gt;);

        &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; String name;

        &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; String value;

        &lt;span class=&quot;fu&quot;&gt;NameSpaceSqlSuffix&lt;/span&gt;(String name, String value) {
            &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;name&lt;/span&gt; = name;
            &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;value&lt;/span&gt; = value;
        }

        &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;fu&quot;&gt;getName&lt;/span&gt;() {
            &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; name;
        }

        &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;setName&lt;/span&gt;(String name) {
            &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;name&lt;/span&gt; = name;
        }

        &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;fu&quot;&gt;getValue&lt;/span&gt;() {
            &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; value;
        }

        &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;setValue&lt;/span&gt;(String value) {
            &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;value&lt;/span&gt; = value;
        }
    }


}
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;五成绩&quot;&gt;五、成绩&lt;/h2&gt;
&lt;p&gt;在后续业务开展过程中，此基础业务层代码封装发挥了较好的作用，&lt;br/&gt;大大缩短了开发时间，提高了工作效率，同时也提高了程序的易维护性。&lt;/p&gt;
</description>
<pubDate>Thu, 17 May 2018 05:59:00 +0000</pubDate>
<dc:creator>ljmatlight</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/ljmatlight/p/9050747.html</dc:identifier>
</item>
<item>
<title>golang项目中使用条件编译 - yuchen16</title>
<link>http://www.cnblogs.com/ksir16/p/9050721.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/ksir16/p/9050721.html</guid>
<description>&lt;h2 id=&quot;c语言中的条件编译&quot; data-source-line=&quot;3&quot;&gt;C语言中的条件编译&lt;/h2&gt;
&lt;p data-source-line=&quot;5&quot;&gt;golang中没有类似C语言中条件编译的写法，比如在C代码中可以使用如下语法做一些条件编译，结合宏定义来使用可以实现诸如按需编译release和debug版本代码的需求&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#ifndef
&lt;/span&gt;&lt;span&gt;#define&lt;/span&gt;&lt;span&gt;
...

#end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;golang中的条件编译&quot; data-source-line=&quot;16&quot;&gt;golang中的条件编译&lt;/h2&gt;
&lt;blockquote data-source-line=&quot;18&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;golang支持两种条件编译的实现方式&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;build tags&lt;/li&gt;
&lt;li&gt;文件后缀&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;h3 id=&quot;1-通过build-tags实现&quot; data-source-line=&quot;23&quot;&gt;1. 通过Build tags实现&lt;/h3&gt;
&lt;p data-source-line=&quot;25&quot;&gt;build tags 是通过代码注释的形式实现的，要写在文件的最顶端；&lt;/p&gt;
&lt;p data-source-line=&quot;27&quot;&gt;go build指令在编译项目的时候会检查每一个文件的build tags，用来决定是编译还是跳过该文件&lt;/p&gt;
&lt;p data-source-line=&quot;29&quot;&gt;build tags遵循以下规则&lt;/p&gt;
&lt;ol data-source-line=&quot;31&quot;&gt;&lt;li&gt;不同tag域之间用空格区分，他们是OR关系&lt;/li&gt;
&lt;li&gt;同一tag域之内不同的tag用都好区分，他们是AND关系&lt;/li&gt;
&lt;li&gt;每一个tag都由字母和数字构成，！开头表示条件“非”&lt;/li&gt;
&lt;/ol&gt;&lt;p data-source-line=&quot;35&quot;&gt;示例：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; +build darwin freebsd netbsd openbsd&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p data-source-line=&quot;41&quot;&gt;约束此文件只能在支持kqueue的BSD系统上编译&lt;/p&gt;
&lt;p data-source-line=&quot;43&quot;&gt;一个文件可能包含多行条件编译注释，比如：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; +build linux darwin
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; +build 386&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p data-source-line=&quot;50&quot;&gt;约束该文件在linux/386 或 darwin/386平台编译&lt;/p&gt;
&lt;p data-source-line=&quot;52&quot;&gt;需要注意的点&lt;/p&gt;
&lt;p data-source-line=&quot;54&quot;&gt;tag注释和包声明必须用空行隔开，比如下面的写法是错误的，编译器会把第一行作为包说明来处理，而不是build tags&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; +build !linux&lt;/span&gt;
&lt;span&gt;2&lt;/span&gt; package mypkg &lt;span&gt;//&lt;/span&gt;&lt;span&gt; wrong&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p data-source-line=&quot;61&quot;&gt;正确的写法如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; +build !linux&lt;/span&gt;
&lt;span&gt;2&lt;/span&gt; 
&lt;span&gt;3&lt;/span&gt; package mypkg &lt;span&gt;//&lt;/span&gt;&lt;span&gt; correct&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p data-source-line=&quot;69&quot;&gt;&lt;strong&gt;编译方法:&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote data-source-line=&quot;70&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;只需要在go build指令后用-tags指定编译条件即可&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
go build -tags linux
&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;2-通过文件名后缀实现&quot; data-source-line=&quot;69&quot;&gt;2. 通过文件名后缀实现&lt;/h3&gt;
&lt;p data-source-line=&quot;71&quot;&gt;具有&lt;code&gt;_$GOOS.go&lt;/code&gt;后缀的go文件在编译的时候会根据当前平台来判断是否将该文件导入并编译；同样适用于处理器架构判断&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;code&gt;_$GOARCH.go&lt;/code&gt;。&lt;/span&gt;&lt;/p&gt;
&lt;p data-source-line=&quot;73&quot;&gt;两者可以结合起来使用，形式为：&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;code&gt;_$GOOS_$GOARCH.go&lt;/code&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p data-source-line=&quot;75&quot;&gt;示例：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
mypkg_freebsd_arm.go &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 只在 freebsd/arm 编译&lt;/span&gt;
mypkg_plan9.go       &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 只在 plan9 编译&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p data-source-line=&quot;82&quot;&gt;文件名必须提供，如果只由后缀的文件名会被编译器忽略，比如：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;_linux.go
_freebsd_386.go&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p data-source-line=&quot;89&quot;&gt;这两个文件会被编译器忽略，因为以下划线开头的文件都会被忽略&lt;/p&gt;
&lt;h2 id=&quot;参考资料&quot; data-source-line=&quot;93&quot;&gt;参考资料：&lt;/h2&gt;
&lt;ol data-source-line=&quot;95&quot;&gt;&lt;li&gt;&lt;a href=&quot;https://dave.cheney.net/2013/10/12/how-to-use-conditional-compilation-with-the-go-build-tool&quot;&gt;https://dave.cheney.net/2013/10/12/how-to-use-conditional-compilation-with-the-go-build-tool&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</description>
<pubDate>Thu, 17 May 2018 05:54:00 +0000</pubDate>
<dc:creator>yuchen16</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/ksir16/p/9050721.html</dc:identifier>
</item>
</channel>
</rss>