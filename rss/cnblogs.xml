<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>部署 Helm - 每天5分钟玩转 Docker 容器技术（162） - CloudMan</title>
<link>http://www.cnblogs.com/CloudMan6/p/8974338.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/CloudMan6/p/8974338.html</guid>
<description>&lt;p&gt;&lt;span&gt;本节我们将安装和部署 Helm 客户端和 Tiller 服务器。&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;Helm 客户端&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;通常，我们将 Helm 客户端安装在能够执行 &lt;/span&gt;&lt;code&gt;&lt;span&gt;kubectl&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 命令的节点上，只需要下面一条命令：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;span&gt;curl https://raw.githubusercontent.com/kubernetes/helm/master/scripts/get | bash&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/775365/201804/775365-20180430190624736-1310652156.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;执行 &lt;/span&gt;&lt;code&gt;&lt;span&gt;helm version&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 验证。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/775365/201804/775365-20180430190700219-199840165.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;目前只能查看到客户端的版本，服务器还没有安装。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;helm 有很多子命令和参数，为了提高使用命令行的效率，通常建议安装 helm 的 bash 命令补全脚本，方法如下：&lt;/span&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;span&gt;helm completion bash &amp;gt; .helmrcecho &quot;source .helmrc&quot; &amp;gt;&amp;gt; .bashrc&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;重新登录后就可以通过 &lt;/span&gt;&lt;code&gt;&lt;span&gt;Tab&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 键补全 helm 子命令和参数了。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/775365/201804/775365-20180430190711393-604090849.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;Tiller 服务器&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;Tiller 服务器安装非常简单，只需要执行 &lt;/span&gt;&lt;code&gt;&lt;span&gt;helm init&lt;/span&gt;&lt;/code&gt;&lt;span&gt;：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/775365/201804/775365-20180430190723706-712738577.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Tiller 本身也是作为容器化应用运行在 Kubernetes Cluster 中的：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/775365/201804/775365-20180430190737833-421687893.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;可以看到 Tiller 的 Service、Deployment 和 Pod。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;现在， &lt;/span&gt;&lt;code&gt;&lt;span&gt;helm version&lt;/span&gt;&lt;/code&gt;&lt;span&gt; 已经能够查看到服务器的版本信息了。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/775365/201804/775365-20180430190748102-2001308805.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Helm 部署完毕，下一节开始使用 Helm。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;书籍：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;1.《每天5分钟玩转Kubernetes》&lt;br/&gt;&lt;a href=&quot;https://item.jd.com/26225745440.html&quot;&gt;https://item.jd.com/26225745440.html&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;2.《每天5分钟玩转Docker容器技术》&lt;br/&gt;&lt;a href=&quot;https://item.jd.com/16936307278.html&quot;&gt;https://item.jd.com/16936307278.html&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;3.《每天5分钟玩转OpenStack》&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;a href=&quot;https://item.jd.com/12086376.html&quot;&gt;https://item.jd.com/12086376.html&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img title=&quot;https://i.imgsafe.org/68/68da21ce15.png&quot; src=&quot;https://i.imgsafe.org/68/68da21ce15.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Tue, 01 May 2018 22:31:00 +0000</pubDate>
<dc:creator>CloudMan</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/CloudMan6/p/8974338.html</dc:identifier>
</item>
<item>
<title>oo第二阶段总结 - qys1711</title>
<link>http://www.cnblogs.com/lvubyr/p/8978360.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/lvubyr/p/8978360.html</guid>
<description>&lt;p&gt;&lt;span&gt;第五次作业——多线程电梯&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;一、设计策略&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;span&gt;本次作业是我们第一次接触多线程，给程序添加多线程功能后最大的挑战是实现共享数据的安全、避免冲突，由于这次作业是第一次尝试多线程方法，因此采用了将所有方法都加上synchronized修饰符的方法来避免数据冲突。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;二、程序结构&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1347179/201805/1347179-20180502003724177-139603877.jpg&quot; alt=&quot;&quot; width=&quot;925&quot; height=&quot;635&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　&lt;span&gt;　由于本次作业完成的比较匆忙，因此并没有全面的实现多线程的方式，且在测试中出现了较多的bug。由类图可以看出，程序分类较为简单，每个类的功能太过集中，有违oo的设计原则，同时，方法的数目也相对较少，随之而来的是较多的重复代码，这是极为不好的代码风格，同时也违背了oo编程原则。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;三、程序的bug&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;span&gt;本次作业程序的bug主要集中在线程安全控制，程序在运行过程中会随机出现不可控的输出结果，这与刚开始的多线程设计不明确有很大的关系。同时，这次作业并没有采取wait-notifyall模式，这也是使得程序出现bug的一大因素。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;四、心得体会&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;span&gt;多线程较为复杂，且带有随机性，因此会提高debug的难度，这就要求我们在开始设计时就规划好程序运行的方案流程，避免中途或者最后再进行大规模修改，这样反而容易产生更多的bug。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;第六次作业——IFTTT&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;一、设计策略&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　IFTTT主要由监听器和任务组成，因此，程序设计为：为每个监听任务开创一个线程进行监听，每当监听到规定动作后，调用相应方法进行任务响应，线程之间只是调用的方法相同，并不存在数据上的冲突。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;二、程序结构&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1347179/201805/1347179-20180502010039137-193239258.jpg&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　&lt;span&gt;　本次作业已能较为熟练地掌握多线程的使用，并且进行系统性的设计与测试。程序通过Input类读入监听器以及相应的任务，之后创立相应的线程，监听事件的发生，当事件发生后，做出相应的响应。测试者可通过testthread来制造相应的事件来测试程序的相应。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;三、程序的bug&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;span&gt;由于我的测试者并没有测试我的程序，这里只简述我自己尚未解决的bug。这些bug主要是细节方面的问题，比如多层文件夹的监控以及同层文件的监控选择问题，bug出现的原因主要是在方法设计时时间较为紧迫，因此只实现了获取监控文件信息的基本功能，并没有对其进行完整的拓展。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;四、新的体会&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;span&gt;对于成体系的复杂的程序设计，要多尝试，不能因为复杂而望而却步，停滞不前，事实证明，只要着手去做，总会找到解决方案。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;第七次作业——出租车&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;一、设计策略&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;span&gt;此次作业的出租车调动系统由100量出租车和80*80的地图网以及调度器&lt;span&gt;组成&lt;/span&gt;，程序设计为每个出租车开设一个线程，同时为调度器开设线程，监控乘客请求的发出并将信号发送给指定区域内的出租车进行调度。出租车相互独立，无共享数据，而每个出租车线程与调度器线程之间共享乘客请求信息和出租车基本信息（出租车状态、位置、信用值等）。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;二、程序结构&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1347179/201805/1347179-20180502013459010-353218374.jpg&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　程序初始时从文件读入地图信息并建立map类，随后创建100个出租车线程和调度器线程，以模仿出租车运行，随后创建输入线程，以模仿不定时收到乘客请求，之后，便根据实际情况进行输出。本次作业大体上较为完善，实现了几乎全部既定目标。但是，由于事先只专注于对出租车运行的模拟而没有注意相关输出，使得程序的输出与整个程序在设计上有脱节现象，不能一次性将全部信息输出到一个文件中。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;三、程序的bug&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;span&gt;本次程序，测试者并没有指出公测以外的bug。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;四、心得体会&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;span&gt;对于较为庞大的程序设计，一定要事先通读指导书并了解相应要求，尤其要注意一些关键功能的实现，以免日后再对程序进行修改，从而影响工作效率。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

</description>
<pubDate>Tue, 01 May 2018 17:19:00 +0000</pubDate>
<dc:creator>qys1711</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/lvubyr/p/8978360.html</dc:identifier>
</item>
<item>
<title>B+树在磁盘存储中的应用 - nullzx</title>
<link>http://www.cnblogs.com/nullzx/p/8978177.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/nullzx/p/8978177.html</guid>
<description>&lt;p&gt;&lt;span&gt;欢迎探讨，如有错误敬请指正&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;如需转载，请注明出处&lt;/span&gt; &lt;a href=&quot;http://www.cnblogs.com/nullzx/&quot;&gt;&lt;span&gt;http://www.cnblogs.com/nullzx/&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;hr align=&quot;center&quot; size=&quot;3&quot; width=&quot;100%&quot;/&gt;&lt;h4&gt;&lt;span&gt;我们首先提一个问题， B+树比平衡二叉树在索引数据方面要快么？&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;&lt;span&gt;大多数人可能认为肯定还是B+树快，毕竟存储同样多的数据，100阶的B+树肯定比平衡二叉树的高度要低的多。但是别忘了B树在一个结点可能需要比较很多次才能找到下一层的结点，但是平衡二叉树只要比较一次就可以向下走一层。所以综合起来，其实两者索引的速度几乎（甚至说就是）是一样的。最简单的道理，一颗4阶B树就是一颗红黑树，比较的次数完全一样（如果不明白这个道理，请参考我关于&lt;/span&gt;&lt;a href=&quot;http://www.cnblogs.com/nullzx/p/6128416.html&quot;&gt;&lt;span&gt;红黑树的三篇技术博客&lt;/span&gt;&lt;/a&gt;&lt;span&gt;）。那么我们为什么还要使用B+树呢？这是因为上面说索引速度相当的前提是两者的数据结构都位于内存中，当我们要在磁盘上索引一个记录时，将磁盘中的数据传输到内存中才是花费时间的大头，而在内存中的索引过程所花的时间基本是可以忽略不计的。在磁盘中以B+树的形式组织数据就有着天然的优势。要解释这个道理，我们必须先强调一个概念，&lt;strong&gt;主存和磁盘之间的数据交换不是以字节为单位的，而是以n个扇区为单位的（一个扇区有512字节）&lt;/strong&gt;，通常是4KB（8个扇区），8KB（16个扇区），16KB，……64KB为单位的。&lt;strong&gt;假设，我们现在选择4KB作为内存和磁盘之间的传输单位&lt;/strong&gt;，那么我们在设计B+树的时候，&lt;strong&gt;不论是索引结点还是叶子结点都使用4KB作为结点的大小&lt;/strong&gt;。我们这时不妨再假设一个记录的大小是1KB，那么一个叶子结点可以存4个记录。而对于索引结点（大小也是4KB），由于只需要存key值和相应的指针，所以一个索引结点可能可以存储100~150个分支，我们不妨就取100吧。当然这和上面第2节和第三节中的情况不太一样，因为现在索引结点的阶数是100，而叶子结点的阶数是4，两者并不一致，但这并没有什么问题。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://images2018.cnblogs.com/blog/834468/201805/834468-20180502000409838-1786331794.png&quot;&gt;&lt;img title=&quot;clip_image002&quot; border=&quot;0&quot; alt=&quot;clip_image002&quot; src=&quot;https://images2018.cnblogs.com/blog/834468/201805/834468-20180502000413437-1432592065.png&quot; width=&quot;800&quot; height=&quot;212&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;我们考虑如上图所示的B+树，下面的B+树有三层，两层是索引结点，最后一层是叶子结点。那么这个三层的B+树最多可以存400万个记录。如果这个B+树存储到硬盘中，我们怎么根据记录的key找到对应的记录呢？首先我们要读取这个B+树的根结点到内存（花费一个IO的时间）然后在内存中进行索引，然后根据key找到对应的分支，再将这个分支所指向的第二层索引结点读取到内存中（花费第二个IO时间）然后在内存中进行索引，同样根据key找到对应的分支，而这个分支指向的就是叶子结点，我们最后将这个叶子结点读取到内存中（花费的第三个IO时间）判断是否存在这个记录。这样我们只需要通过三次IO时间就从400万个记录中找到了对应的key记录，可以说是非常快了。&lt;strong&gt;快速的原因是，索引结点中不存数据，只存键和指针，所以一个索引结点就可以存储大量的分支，而一个索引结点只需要一次IO即可读取到内存中&lt;/strong&gt;。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;我们现在再考虑一个问题，当记录的大小可变时，叶子结点中记录该如何存储？&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;这个时候有两种极限情况。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;1）假设叶子结点的阶数仍然为4，但每个记录仅仅有100个字节，显然当叶子结点中存满4个记录后，叶子结点中仍然有大量的剩余空间。这个时候我们能不能直接向该叶子结点中插入数据，而不必分裂这个叶子结点（分裂指在磁盘中的分裂）？答案是可以，有人一定会说，这不就违反B+树的定义了么？的确违反了，但是B+树之所以定义阶数的目的是为了平衡（或者说增强）每一个分支的索引效率，不过这个优点仅当整个B+树都位于内存时才能体现出来。当B+树存储在磁盘中的情况时，IO效率才是第一要考虑的因素。CPU在某个结点内部多比较几次或少比较几次和IO花费的时间相比就不值得一提了。而不分裂反而能提升B+树的IO效率，因为分裂需要更多的IO次数。综合起来了说就是，文件系统及数据库中的B+树是不考虑阶数这一个概念的，结点（即包括叶子结点，也包括索引结点）中仅遵行一个规则，如果剩余空间够大那么就存入数据，如果剩余空间不够，只能分裂后再存入。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;2）如果某条记录太大，即使叶子结点中还剩余一多半的空间但仍然存不下怎么办？这个时候MySql称之为行溢出，简单的解决方式就是把记录存储在溢出页（磁盘的其它空闲地方）中，然后叶子结点中存储的是这个记录的指针。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;补充：如果按照key值的大小顺序插入，按照B+树定义的方式进行分裂时，每个叶子结点的存储效率只有50%，为了解决这个问题，我们可以采取这样的分裂方式：原叶子结点中的数据不动，创建一个新的空叶子结点，记录插入到新叶子节点中。这样磁盘的插入效率就很高，而且每个叶子结点的利用率也很高。但这种分裂方式仅仅对按key的大小将记录顺序插入才有效，随机插入条件反而不如50%分裂的方式。&lt;/span&gt;&lt;/p&gt;

&lt;h4&gt;&lt;span&gt;参考内容&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;[1] &lt;a href=&quot;https://www.cnblogs.com/wade-luffy/p/6292784.html&quot;&gt;B+树介绍&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[2] &lt;a href=&quot;http://hedengcheng.com/?p=525&quot;&gt;从MySQL Bug#67718浅谈B+树索引的分裂优化&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[3] &lt;a href=&quot;https://www.jianshu.com/p/6f68d3c118d6&quot;&gt;B+树的几点总结&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Tue, 01 May 2018 16:04:00 +0000</pubDate>
<dc:creator>nullzx</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/nullzx/p/8978177.html</dc:identifier>
</item>
<item>
<title>关于云Linux部署tomcat服务器（Maven的多模块war包） - 左羽</title>
<link>http://www.cnblogs.com/1214804270hacker/p/8978087.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/1214804270hacker/p/8978087.html</guid>
<description>&lt;h2&gt;　　博主的运行环境：&lt;/h2&gt;
&lt;h4&gt;　　电脑系统： 　　Linux mint 18&lt;/h4&gt;
&lt;h4&gt;　　JDK版本：　　java version &quot;1.8.0_171&quot;&lt;/h4&gt;
&lt;h4&gt;　　Maven版本： 　　Apache Maven 3.5.3&lt;/h4&gt;
&lt;h2&gt;一、关于war包的生成：&lt;/h2&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1113894/201805/1113894-20180501221859922-542230996.png&quot; alt=&quot;&quot; width=&quot;262&quot; height=&quot;319&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　如图，这是一个多模块项目，被分为前端和后端，生成的war包将在web部分生成，但是web部分对service部分有依赖，所以我们需要先将service部分的jar包生成才能保证web部分的war包成功生成：&lt;/p&gt;
&lt;p&gt;　　生成service部分的jar包：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1113894/201805/1113894-20180501222520538-2016090372.png&quot; alt=&quot;&quot; width=&quot;364&quot; height=&quot;228&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　看到生成后，成功放置maven仓库：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1113894/201805/1113894-20180501222627547-1966269047.png&quot; alt=&quot;&quot; width=&quot;363&quot; height=&quot;225&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　接下来我们要生成web的war包了：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1113894/201805/1113894-20180501222831334-309641787.png&quot; alt=&quot;&quot; width=&quot;366&quot; height=&quot;231&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　我们可以看到成功生成，且被放置在cn/zuoyu/ssm/ssm-web/下：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1113894/201805/1113894-20180501223026433-1872037977.png&quot; alt=&quot;&quot; width=&quot;369&quot; height=&quot;234&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　那么现在很多新手会问，单单部署web.war包，那么service的项目呢？要知道web对service是有很强的依赖的，我们来打开war包：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1113894/201805/1113894-20180501224101065-1231248360.png&quot; alt=&quot;&quot; width=&quot;370&quot; height=&quot;237&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　清晰看到有四个文件夹&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1113894/201805/1113894-20180501224224911-791298827.png&quot; alt=&quot;&quot; width=&quot;370&quot; height=&quot;230&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　看到WEB-INF目录下有我们想要知道的东西，那么service的class文件会不会在classes目录里呢？我们看看：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1113894/201805/1113894-20180501224401867-1803750367.png&quot; alt=&quot;&quot; width=&quot;357&quot; height=&quot;222&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　这个里面什么也没有，我们看看lib目录里有没有我们想要看到的东西：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1113894/201805/1113894-20180501224515054-1434823656.png&quot; alt=&quot;&quot; width=&quot;365&quot; height=&quot;227&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　仔细看，会看到有ssm-service-0.0.1-SNAPSHOT.jar包，这个就是我们刚刚生成的service的jar包，那么我们看看这个包里面有没有我们想要的东西：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1113894/201805/1113894-20180501224841755-903178640.png&quot; alt=&quot;&quot; width=&quot;372&quot; height=&quot;241&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　看到这里就明了，service的所以内容都在这个jar包里面，所以我们只需要部署这个web.war包即可。&lt;/p&gt;
&lt;h2&gt;二、上传到云Linux服务器：&lt;/h2&gt;
&lt;h4&gt;　　云服务器系统：　　contes 6.5&lt;/h4&gt;
&lt;h4&gt;　　JDK版本：　　java version &quot;1.8.0_112&quot;&lt;/h4&gt;
&lt;h4&gt;　　tomcat版本：　　Apache Tomcat/9.0.0.M15&lt;/h4&gt;
&lt;p&gt;　　首先我们要连接ssh：&lt;/p&gt;
&lt;p&gt;　　格式为#ssh  user@IpAddress&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1113894/201805/1113894-20180501230111796-1256580068.png&quot; alt=&quot;&quot; width=&quot;362&quot; height=&quot;227&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　我们看一下tomcat的地址，并进入：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1113894/201805/1113894-20180501230349525-1371963648.png&quot; alt=&quot;&quot; width=&quot;356&quot; height=&quot;220&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　我们现在看一下webapps目录：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1113894/201805/1113894-20180501230656645-331251226.png&quot; alt=&quot;&quot; width=&quot;360&quot; height=&quot;229&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　空的，除了自带其他都没有。现在我们要将本地的这个war包上传到云服务器这个目录下面（为了方便我将此war包改名为zuoyu.war并放到此目录下：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1113894/201805/1113894-20180501231211074-1356321668.png&quot; alt=&quot;&quot; width=&quot;359&quot; height=&quot;224&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　现在需要将它上传到云服务器：&lt;/p&gt;
&lt;p&gt;　　小插曲，如果我们从服务器上将文件传至本地　　&lt;span&gt;scp username@servername:/path/filename &lt;span&gt;/var/www/local_dir（本地目录）&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　　　　　如果我们本地上传到服务器　　&lt;span&gt;scp /path/filename username@servername:/path&lt;br/&gt;&lt;/span&gt; 　　　　　　如果我们从服务器下载整个目录　　&lt;span&gt;scp -r username@servername:/var/www/remote_dir/（远程目录） /var/www/local_dir（本地目录）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　　　　　如果我们上传目录到服务器　　&lt;span&gt;scp  -r local_dir username@servername:remote_dir&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1113894/201805/1113894-20180501232115736-518761378.png&quot; alt=&quot;&quot; width=&quot;376&quot; height=&quot;234&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　上传成功！我们看一下服务器上有没有：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1113894/201805/1113894-20180501232325534-745814073.png&quot; alt=&quot;&quot; width=&quot;381&quot; height=&quot;240&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　ok，上传成功，现在我们启动服务器！如果成功启动那么它会自动解压这个zuoyu.war包：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1113894/201805/1113894-20180501232559917-2053182989.png&quot; alt=&quot;&quot; width=&quot;386&quot; height=&quot;243&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　我们可以看到tomcat已经启动，我们看一下启动日志：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1113894/201805/1113894-20180501233226969-1028223644.png&quot; alt=&quot;&quot; width=&quot;391&quot; height=&quot;243&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　看一下webapps目录：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1113894/201805/1113894-20180501233508680-2015605126.png&quot; alt=&quot;&quot; width=&quot;378&quot; height=&quot;308&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　很完整，我们浏览器访问一下试试：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1113894/201805/1113894-20180501233653244-260130901.png&quot; alt=&quot;&quot; width=&quot;477&quot; height=&quot;162&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　很完美！&lt;/p&gt;













</description>
<pubDate>Tue, 01 May 2018 15:39:00 +0000</pubDate>
<dc:creator>左羽</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/1214804270hacker/p/8978087.html</dc:identifier>
</item>
<item>
<title>前端技术之_CSS详解第二天 - 我举个栗子</title>
<link>http://www.cnblogs.com/wanghui1234/p/8978003.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/wanghui1234/p/8978003.html</guid>
<description>&lt;p&gt;&lt;span&gt;html负责结构，css负责样式，js负责行为。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;css写在head标签里面，容器style标签。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;先写选择器，然后写大括号，大括号里面是样式。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;    &amp;lt;style type=&quot;text/css&quot;&amp;gt;
        body&lt;/span&gt;{&lt;span&gt;
            background-color&lt;/span&gt;:&lt;span&gt; pink&lt;/span&gt;;
        }&lt;span&gt;
    &amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;常见属性：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;    h1&lt;/span&gt;{&lt;span&gt;
            color&lt;/span&gt;:&lt;span&gt;blue&lt;/span&gt;;&lt;span&gt;
            font-size&lt;/span&gt;:&lt;span&gt; 60px&lt;/span&gt;;&lt;span&gt;
            font-weight&lt;/span&gt;:&lt;span&gt; normal&lt;/span&gt;;&lt;span&gt;
            text-decoration&lt;/span&gt;:&lt;span&gt; underline&lt;/span&gt;;&lt;span&gt;
            font-style&lt;/span&gt;:&lt;span&gt; italic&lt;/span&gt;;
        }    
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;span&gt;&lt;strong&gt;1.1 标签选择器&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;就是用标签名来当做选择器。&lt;/p&gt;
&lt;p&gt;1） 所有标签都能够当做选择器，比如body、h1、dl、ul、span等等&lt;/p&gt;
&lt;p&gt;2） 不管这个标签藏的多深，都能够被选择上。&lt;/p&gt;
&lt;p&gt;3） 选择的是所有的，而不是某一个。所以是共性，而不是特性。&lt;/p&gt;
&lt;p&gt;比如网易，希望页面上所有的超级链接都没有下划线：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;        a&lt;/span&gt;{
            &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;去掉下划线：&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
            text-decoration&lt;/span&gt;:&lt;span&gt; none&lt;/span&gt;; 
        }
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;span&gt;&lt;strong&gt;1.2 id选择器&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;#表示选择id&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1  #lj1&lt;/span&gt;{&lt;span&gt;
2  font-size&lt;/span&gt;:&lt;span&gt; 60px&lt;/span&gt;;&lt;span&gt;
3  font-weight&lt;/span&gt;:&lt;span&gt; bold&lt;/span&gt;;&lt;span&gt;
4  color&lt;/span&gt;:&lt;span&gt;black&lt;/span&gt;;&lt;span&gt;
5  &lt;/span&gt;}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;1）任何的标签都可以有id，id的命名要以字母开头，可以有数字、下划线。大小写严格区别，也就是说mm和MM是两个不同的id。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;2）同一个页面内id不能重复，即使不一样的标签，也不能是相同的id。也就是说，如果有一个&lt;/span&gt;p的id叫做haha，这个页面内，其他所有的元素的id都不能叫做haha。&lt;/p&gt;
&lt;h2&gt;&lt;span&gt;&lt;strong&gt;1.3 类选择器&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&amp;gt;
&amp;lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; xml:lang=&quot;en&quot;&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html;charset=UTF-8&quot;&amp;gt;
    &amp;lt;title&amp;gt;Document&amp;lt;/title&amp;gt;
    &amp;lt;style type=&quot;text/css&quot;&amp;gt;
        .teshu&lt;/span&gt;{&lt;span&gt;
            color&lt;/span&gt;:&lt;span&gt; red&lt;/span&gt;;
        }&lt;span&gt;
        .zhongyao&lt;/span&gt;{&lt;span&gt;
            text-decoration&lt;/span&gt;:&lt;span&gt; underline&lt;/span&gt;;
        }&lt;span&gt;
    &amp;lt;/style&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
    &amp;lt;h3 class=&quot;zhongyao&quot;&amp;gt;我是一个h3啊&amp;lt;/h3&amp;gt;
    &amp;lt;h3 class=&quot;teshu zhongyao&quot;&amp;gt;我是一个h3啊&amp;lt;/h3&amp;gt;
    &amp;lt;h3&amp;gt;我是一个h3啊&amp;lt;/h3&amp;gt;
    &amp;lt;p&amp;gt;我是一个段落啊&amp;lt;/p&amp;gt;
    &amp;lt;p class=&quot;teshu&quot;&amp;gt;我是一个段落啊&amp;lt;/p&amp;gt;
    &amp;lt;p class=&quot;teshu&quot;&amp;gt;我是一个段落啊&amp;lt;/p&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;.就是类的符号&lt;/strong&gt;&lt;span&gt;。类的英语叫做&lt;/span&gt;class。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;所谓的类，就是&lt;/span&gt;class属性，class属性和id非常相似，&lt;strong&gt;&lt;span&gt;任何的标签都可以携带&lt;/span&gt;class属性&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;class属性可以重复，比如，页面上可能有很多标签都有teshu这个类&lt;/strong&gt;：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1  &amp;lt;h3&amp;gt;我是一个h3啊&amp;lt;/h3&amp;gt;
2  &amp;lt;h3 class=&quot;teshu&quot;&amp;gt;我是一个h3啊&amp;lt;/h3&amp;gt;
3  &amp;lt;h3&amp;gt;我是一个h3啊&amp;lt;/h3&amp;gt;
4  &amp;lt;p&amp;gt;我是一个段落啊&amp;lt;/p&amp;gt;
5  &amp;lt;p class=&quot;teshu&quot;&amp;gt;我是一个段落啊&amp;lt;/p&amp;gt;
6  &amp;lt;p class=&quot;teshu&quot;&amp;gt;我是一个段落啊&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;css里面用.来表示类：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1  .teshu&lt;/span&gt;{&lt;span&gt;
2  color&lt;/span&gt;:&lt;span&gt; red&lt;/span&gt;;&lt;span&gt;
3  &lt;/span&gt;}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;同一个标签，可能同时属于多个类，用空格隔开&lt;/strong&gt;：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1 &amp;lt;h3 class=&quot;teshu zhongyao&quot;&amp;gt;我是一个h3啊&amp;lt;/h3&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;这样，这个&lt;/span&gt;h3&lt;strong&gt;&lt;span&gt;就同时属于&lt;/span&gt;teshu类，也同时属于zhongyao类&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;初学者常见的错误，就是写成了两个&lt;/span&gt;class：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1 &amp;lt;h3 class=&quot;teshu&quot; class=&quot;zhongyao&quot;&amp;gt;我是一个h3啊&amp;lt;/h3&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;所以要总结两条：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;1） class可以重复，也就是说，同一个页面上可能有多个标签同时属于某一个类；&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;2） 同一个标签可以同时携带多个类。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;类的使用，能够决定一个人的&lt;/span&gt;css水平。&lt;/p&gt;
&lt;p&gt;1） 不要去试图用一个类名，把某个标签的所有样式写完。这个标签要多携带几个类，共同造成这个标签的样式。&lt;/p&gt;
&lt;p&gt;2） 每一个类要尽可能小，有“公共”的概念，能够让更多的标签使用。&lt;/p&gt;
&lt;p&gt;正确使用公共类：案例&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&amp;gt;
&amp;lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; xml:lang=&quot;en&quot;&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html;charset=UTF-8&quot;&amp;gt;
    &amp;lt;title&amp;gt;Document&amp;lt;/title&amp;gt;
    &amp;lt;style type=&quot;text/css&quot;&amp;gt;
        .lv&lt;/span&gt;{&lt;span&gt;
            color&lt;/span&gt;:&lt;span&gt;green&lt;/span&gt;;
        }&lt;span&gt;
        .da&lt;/span&gt;{&lt;span&gt;
            font-size&lt;/span&gt;:&lt;span&gt; 60px&lt;/span&gt;;
        }&lt;span&gt;
        .xian&lt;/span&gt;{&lt;span&gt;
            text-decoration&lt;/span&gt;:&lt;span&gt; underline&lt;/span&gt;;
        }&lt;span&gt;
    &amp;lt;/style&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
    &amp;lt;p class=&quot;lv da&quot;&amp;gt;段落1&amp;lt;/p&amp;gt;
    &amp;lt;p class=&quot;lv xian&quot;&amp;gt;段落2&amp;lt;/p&amp;gt;
    &amp;lt;p class=&quot;da xian&quot;&amp;gt;段落3&amp;lt;/p&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;span&gt;&lt;span&gt;1.4到底用&lt;/span&gt;id还是用class？&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;答案：尽可能的用&lt;/span&gt;class，除非极特殊的情况可以用id。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;原因：&lt;/span&gt;id是js用的。也就是说，js要通过id属性得到标签，所以我们css层面尽量不用id，要不然js就很别扭。另一层面，我们会认为一个有id的元素，有动态效果。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;就是一个标签，可以同时被多种选择器选择，标签选择器、&lt;/span&gt;id选择器、类选择器。这些选择器都可以选择上同一个标签，从而影响样式，这就是css的cascading“层叠式”的第一层含义。&lt;/p&gt;

&lt;h2&gt;&lt;span&gt;&lt;strong&gt;2.1 后代选择器&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('ff3c292f-1035-4923-a27f-dbcb090c107c')&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_ff3c292f-1035-4923-a27f-dbcb090c107c&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_ff3c292f-1035-4923-a27f-dbcb090c107c&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('ff3c292f-1035-4923-a27f-dbcb090c107c',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_ff3c292f-1035-4923-a27f-dbcb090c107c&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&amp;gt;
&amp;lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; xml:lang=&quot;en&quot;&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html;charset=UTF-8&quot;&amp;gt;
    &amp;lt;title&amp;gt;Document&amp;lt;/title&amp;gt;
    &amp;lt;style type=&quot;text/css&quot;&amp;gt;
         .div1 .li2 p&lt;/span&gt;{&lt;span&gt;
             color&lt;/span&gt;:&lt;span&gt;red&lt;/span&gt;;
         }&lt;span&gt;
    &amp;lt;/style&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
    &amp;lt;div class=&quot;div1&quot;&amp;gt;
        &amp;lt;ul&amp;gt;
            &amp;lt;li&amp;gt;
                &amp;lt;p&amp;gt;段落&amp;lt;/p&amp;gt;
                &amp;lt;p&amp;gt;段落&amp;lt;/p&amp;gt;
                &amp;lt;p&amp;gt;段落&amp;lt;/p&amp;gt;
            &amp;lt;/li&amp;gt;
            &amp;lt;li class=&quot;li2&quot;&amp;gt;
                &amp;lt;p&amp;gt;段落&amp;lt;/p&amp;gt;
                &amp;lt;p&amp;gt;段落&amp;lt;/p&amp;gt;
                &amp;lt;p&amp;gt;段落&amp;lt;/p&amp;gt;
            &amp;lt;/li&amp;gt;
            &amp;lt;li&amp;gt;
                &amp;lt;p&amp;gt;段落&amp;lt;/p&amp;gt;
                &amp;lt;p&amp;gt;段落&amp;lt;/p&amp;gt;
                &amp;lt;p&amp;gt;段落&amp;lt;/p&amp;gt;
            &amp;lt;/li&amp;gt;
        &amp;lt;/ul&amp;gt;
    &amp;lt;/div&amp;gt;

    &amp;lt;div&amp;gt;
        &amp;lt;p&amp;gt;段落&amp;lt;/p&amp;gt;
        &amp;lt;p&amp;gt;段落&amp;lt;/p&amp;gt;
        &amp;lt;p&amp;gt;段落&amp;lt;/p&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1  &amp;lt;style type=&quot;text/css&quot;&amp;gt;
2  .div1 p&lt;/span&gt;{&lt;span&gt;
3  color&lt;/span&gt;:&lt;span&gt;red&lt;/span&gt;;&lt;span&gt;
4  &lt;/span&gt;}&lt;span&gt;
5  &amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;空格就表示后代，&lt;/span&gt;.div1 p 就是.div1的后代所有的p。 &lt;/p&gt;
&lt;p&gt;强调一下，选择的是后代，不一定是儿子。&lt;/p&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1    &amp;lt;div class=&quot;div1&quot;&amp;gt;
2        &amp;lt;ul&amp;gt;
3            &amp;lt;li&amp;gt;
4                &amp;lt;p&amp;gt;段落&amp;lt;/p&amp;gt;
5                &amp;lt;p&amp;gt;段落&amp;lt;/p&amp;gt;
6                &amp;lt;p&amp;gt;段落&amp;lt;/p&amp;gt;
7            &amp;lt;/li&amp;gt;
8        &amp;lt;/ul&amp;gt;
    &amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;后代选择器，就是一种平衡：共性、特性的平衡。当要把某一个部分的所有的什么，进行样式改变，就要想到后代选择器。&lt;/p&gt;
&lt;p&gt;后代选择器，描述的是祖先结构。&lt;/p&gt;
&lt;p&gt;能够被下面的选择器选择上：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1  .div1 p&lt;/span&gt;{&lt;span&gt;

2  color&lt;/span&gt;:&lt;span&gt;red&lt;/span&gt;;

}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;所以，看见这个选择器要知道是后代，而不是儿子。选择的是所有&lt;/span&gt;.div1“中的”p，就是后代p。&lt;/p&gt;
&lt;h2&gt;&lt;span&gt;&lt;strong&gt;2.2 交集选择器&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1322549/201805/1322549-20180501230606432-1366875053.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('2fc83b92-82c7-4368-85eb-c3aef213ff4d')&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_2fc83b92-82c7-4368-85eb-c3aef213ff4d&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_2fc83b92-82c7-4368-85eb-c3aef213ff4d&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('2fc83b92-82c7-4368-85eb-c3aef213ff4d',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_2fc83b92-82c7-4368-85eb-c3aef213ff4d&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&amp;gt;
&amp;lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; xml:lang=&quot;en&quot;&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html;charset=UTF-8&quot;&amp;gt;
    &amp;lt;title&amp;gt;Document&amp;lt;/title&amp;gt;
    &amp;lt;style type=&quot;text/css&quot;&amp;gt;
        h3.special&lt;/span&gt;{&lt;span&gt;
            color&lt;/span&gt;:&lt;span&gt;red&lt;/span&gt;;
        }&lt;span&gt;
    &amp;lt;/style&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
    &amp;lt;h3&amp;gt;我是标题&amp;lt;/h3&amp;gt;
    &amp;lt;h3 class=&quot;special&quot;&amp;gt;我是标题&amp;lt;/h3&amp;gt;
    &amp;lt;h3 class=&quot;special&quot;&amp;gt;我是标题&amp;lt;/h3&amp;gt;
    &amp;lt;p class=&quot;special&quot;&amp;gt;我是段落&amp;lt;/p&amp;gt;
    &amp;lt;p&amp;gt;我是段落&amp;lt;/p&amp;gt;
    &amp;lt;p&amp;gt;我是段落&amp;lt;/p&amp;gt;
    &amp;lt;a href=&quot;&quot; class=&quot;xixi&quot;&amp;gt;aaa&amp;lt;/a&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;选择的元素是同时满足两个条件：必须是&lt;/span&gt;h3标签，然后必须是special标签。&lt;/p&gt;
&lt;p&gt;交集选择器没有空格。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;交集选择器，我们一般都是以标签名开头，比如&lt;/span&gt;div.haha  比如p.special。&lt;/p&gt;
&lt;h2&gt;&lt;span&gt;&lt;strong&gt;2.3 并集选择器（分组选择器）&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('2ce1a97f-2667-467f-90c5-f9064ff5fb8b')&quot; readability=&quot;33&quot;&gt;&lt;img id=&quot;code_img_closed_2ce1a97f-2667-467f-90c5-f9064ff5fb8b&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_2ce1a97f-2667-467f-90c5-f9064ff5fb8b&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('2ce1a97f-2667-467f-90c5-f9064ff5fb8b',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_2ce1a97f-2667-467f-90c5-f9064ff5fb8b&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;61&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&amp;gt;
&amp;lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; xml:lang=&quot;en&quot;&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html;charset=UTF-8&quot;&amp;gt;
    &amp;lt;title&amp;gt;Document&amp;lt;/title&amp;gt;
    &amp;lt;style type=&quot;text/css&quot;&amp;gt;
        h3,li&lt;/span&gt;{&lt;span&gt;
            color&lt;/span&gt;:&lt;span&gt;red&lt;/span&gt;;
        }&lt;span&gt;
    &amp;lt;/style&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
    &amp;lt;h3&amp;gt;我是一个标题&amp;lt;/h3&amp;gt;
    &amp;lt;p&amp;gt;是一个段落&amp;lt;/p&amp;gt;
    &amp;lt;ul&amp;gt;
        &amp;lt;li&amp;gt;我是一个列表&amp;lt;/li&amp;gt;
    &amp;lt;/ul&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1 h3,li&lt;/span&gt;{&lt;span&gt;
2  color&lt;/span&gt;:&lt;span&gt;red&lt;/span&gt;;&lt;span&gt;
3 &lt;/span&gt;}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 用逗号就表示并集。&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;2.4 通配符*&lt;/strong&gt;&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('4416c93f-04f2-498b-b8ee-11ddbf858aac')&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_4416c93f-04f2-498b-b8ee-11ddbf858aac&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_4416c93f-04f2-498b-b8ee-11ddbf858aac&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('4416c93f-04f2-498b-b8ee-11ddbf858aac',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_4416c93f-04f2-498b-b8ee-11ddbf858aac&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&amp;gt;
&amp;lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; xml:lang=&quot;en&quot;&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html;charset=UTF-8&quot;&amp;gt;
    &amp;lt;title&amp;gt;Document&amp;lt;/title&amp;gt;
    &amp;lt;style type=&quot;text/css&quot;&amp;gt;
        h3.*&lt;/span&gt;{&lt;span&gt;
            color&lt;/span&gt;:&lt;span&gt;red&lt;/span&gt;;
        }&lt;span&gt;
    &amp;lt;/style&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
    &amp;lt;p&amp;gt;段落&amp;lt;/p&amp;gt;
    &amp;lt;h3&amp;gt;标题&amp;lt;/h3&amp;gt;
    &amp;lt;ul&amp;gt;
        &amp;lt;li&amp;gt;列表&amp;lt;/li&amp;gt;
        &amp;lt;li&amp;gt;列表&amp;lt;/li&amp;gt;
        &amp;lt;li&amp;gt;列表&amp;lt;/li&amp;gt;
    &amp;lt;/ul&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;*就表示所有元素。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1 *&lt;/span&gt;{&lt;span&gt;
2  color&lt;/span&gt;:&lt;span&gt;red&lt;/span&gt;;&lt;span&gt;
3 &lt;/span&gt;}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;效率不高，如果页面上的标签越多，效率越低，所以页面上不能出现这个选择器。&lt;/p&gt;

&lt;h2&gt;&lt;span&gt;&lt;strong&gt;3.1 兼容问题介绍&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;我们现在给大家介绍一下浏览器：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;IE： 微软的浏览器，随着操作系统安装的。所以每个windows都有IE浏览器。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　windows xp 操作系统安装的IE6&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　windows vista 操作系统安装的IE7&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　windows 7 操作系统安装的IE8&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　windows 8 操作系统安装的IE9&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　windows10 操作系统安装的edge&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;浏览器兼容问题，要出，就基本上就是出在IE6、7身上，这两个浏览器是非常低级的浏览器。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1322549/201805/1322549-20180501231608758-279989842.jpg&quot; alt=&quot;&quot; width=&quot;742&quot; height=&quot;615&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;浏览器的市场占有率：&lt;/span&gt; &lt;a href=&quot;http://tongji.baidu.com/data/&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;http://tongji.baidu.com/data/&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;HTML5浏览器打分：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://html5test.com/results/desktop.html&quot; target=&quot;_blank&quot;&gt;http://html5test.com/results/desktop.html&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span&gt;&lt;strong&gt;3.2 儿子选择器&lt;/strong&gt;&lt;strong&gt;&amp;gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;http://www.ietester.cn/&quot; target=&quot;_blank&quot;&gt;http://www.ietester.cn/&lt;/a&gt;   测试工具&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1 div&amp;gt;p&lt;/span&gt;{&lt;span&gt;
2  color&lt;/span&gt;:&lt;span&gt;red&lt;/span&gt;;&lt;span&gt;
3 &lt;/span&gt;}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;div的儿子p。和div的后代p的截然不同。&lt;/p&gt;
&lt;h2&gt;&lt;span&gt;&lt;strong&gt;3.3 序选择器&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;IE8开始兼容；IE6、7都不兼容&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;选择第&lt;/span&gt;1个li：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1  &amp;lt;style type=&quot;text/css&quot;&amp;gt;
2  ul li:first-child&lt;/span&gt;{&lt;span&gt;
3  color&lt;/span&gt;:&lt;span&gt;red&lt;/span&gt;;&lt;span&gt;
4  &lt;/span&gt;}&lt;span&gt;
5  &amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;选择最后一个&lt;/span&gt;1i：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1  ul li:last-child&lt;/span&gt;{&lt;span&gt;
2  color&lt;/span&gt;:&lt;span&gt;blue&lt;/span&gt;;&lt;span&gt;
3  &lt;/span&gt;}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;由于浏览器的更新需要过程，所以现在如果公司还要求兼容&lt;/span&gt;IE6、7，那么就要自己写类名：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1    &amp;lt;ul&amp;gt;
2        &amp;lt;li class=&quot;first&quot;&amp;gt;项目&amp;lt;/li&amp;gt;
3        &amp;lt;li&amp;gt;项目&amp;lt;/li&amp;gt;
4        &amp;lt;li&amp;gt;项目&amp;lt;/li&amp;gt;
5        &amp;lt;li&amp;gt;项目&amp;lt;/li&amp;gt;
6        &amp;lt;li&amp;gt;项目&amp;lt;/li&amp;gt;
7        &amp;lt;li&amp;gt;项目&amp;lt;/li&amp;gt;
8        &amp;lt;li&amp;gt;项目&amp;lt;/li&amp;gt;
9        &amp;lt;li&amp;gt;项目&amp;lt;/li&amp;gt;
10        &amp;lt;li&amp;gt;项目&amp;lt;/li&amp;gt;
11        &amp;lt;li class=&quot;last&quot;&amp;gt;项目&amp;lt;/li&amp;gt;
    &amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;用类选择器来选择第一个或者最后一个：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1        ul li.first&lt;/span&gt;{&lt;span&gt;
2            color&lt;/span&gt;:&lt;span&gt;red&lt;/span&gt;;&lt;span&gt;
3        &lt;/span&gt;}&lt;span&gt;
4
5        ul li.last&lt;/span&gt;{&lt;span&gt;
6            color&lt;/span&gt;:&lt;span&gt;blue&lt;/span&gt;;
        }
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;span&gt;&lt;strong&gt;3.4 下一个兄弟选择器&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;IE7开始兼容，IE6不兼容。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;+表示选择下一个兄弟&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1    &amp;lt;style type=&quot;text/css&quot;&amp;gt;
2        h3+p&lt;/span&gt;{&lt;span&gt;
3            color&lt;/span&gt;:&lt;span&gt;red&lt;/span&gt;;&lt;span&gt;
4        &lt;/span&gt;}&lt;span&gt;
    &amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;选择上的是&lt;/span&gt;h3元素后面紧挨着的第一个兄弟。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1    &amp;lt;h3&amp;gt;我是一个标题&amp;lt;/h3&amp;gt;
2    &amp;lt;p&amp;gt;我是一个段落&amp;lt;/p&amp;gt;
3    &amp;lt;p&amp;gt;我是一个段落&amp;lt;/p&amp;gt;
4    &amp;lt;p&amp;gt;我是一个段落&amp;lt;/p&amp;gt;
5    &amp;lt;h3&amp;gt;我是一个标题&amp;lt;/h3&amp;gt;
6    &amp;lt;p&amp;gt;我是一个段落&amp;lt;/p&amp;gt;
7    &amp;lt;p&amp;gt;我是一个段落&amp;lt;/p&amp;gt;
8    &amp;lt;p&amp;gt;我是一个段落&amp;lt;/p&amp;gt;
9    &amp;lt;h3&amp;gt;我是一个标题&amp;lt;/h3&amp;gt;
10    &amp;lt;p&amp;gt;我是一个段落&amp;lt;/p&amp;gt;
11    &amp;lt;p&amp;gt;我是一个段落&amp;lt;/p&amp;gt;
12    &amp;lt;p&amp;gt;我是一个段落&amp;lt;/p&amp;gt;
    &amp;lt;h3&amp;gt;我是一个标题&amp;lt;/h3&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;&lt;span&gt;&lt;strong&gt;4.1 继承性&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;有一些属性，当给自己设置的时候，自己的后代都继承上了，这个就是继承性。&lt;/p&gt;
&lt;p&gt;哪些属性能继承？&lt;/p&gt;
&lt;p&gt;color、 text-开头的、line-开头的、font-开头的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;这些关于文字样式的，都能够继承；&lt;/span&gt; &lt;span&gt;所有关于盒子的、定位的、布局的属性都不能继承。&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;所以，如果我们的页面的文字，都是灰色，都是&lt;/span&gt;14px。那么就可以利用继承性：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1 body&lt;/span&gt;{&lt;span&gt;
2     color&lt;/span&gt;:&lt;span&gt;gray&lt;/span&gt;;&lt;span&gt;
3     font-size&lt;/span&gt;:&lt;span&gt;14px&lt;/span&gt;;&lt;span&gt;
4 &lt;/span&gt;}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;继承性是从自己开始，直到最小的元素。&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;5.2 层叠性&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;很多公司如果要笔试，那么一定会考层叠性。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;层叠性：就是&lt;/span&gt;css处理冲突的能力。 所有的权重计算，没有任何兼容问题！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;CSS像艺术家一样优雅，像工程师一样严谨。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;当选择器，选择上了某个元素的时候，那么要这么统计权重：&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;id的数量，类的数量，标签的数量&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1322549/201805/1322549-20180501232559513-1766780518.png&quot; alt=&quot;&quot; width=&quot;685&quot; height=&quot;361&quot;/&gt;&lt;/p&gt;
&lt;p&gt;如果权重一样，那么以后出现的为准：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1322549/201805/1322549-20180501232643969-1993094053.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;如果不能直接选中某个元素，通过继承性影响的话，那么权重是&lt;/span&gt;0。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1322549/201805/1322549-20180501232711773-795142341.png&quot; alt=&quot;&quot; width=&quot;620&quot; height=&quot;446&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;如果大家都是&lt;/strong&gt;&lt;strong&gt;0，那么有一个就近原则：谁描述的近，听谁的。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1322549/201805/1322549-20180501232737429-1123031600.png&quot; alt=&quot;&quot; width=&quot;647&quot; height=&quot;358&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;权重问题大总结：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;1） 先看有没有选中，如果选中了，那么以（id数，类数，标签数）来计权重。谁大听谁的。如果都一样，听后写的为准。&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;2） 如果没有选中，那么权重是0。如果大家都是0，就近原则。&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt; 案例1：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1322549/201805/1322549-20180501232858043-1627387883.png&quot; alt=&quot;&quot; width=&quot;704&quot; height=&quot;371&quot;/&gt;&lt;/p&gt;
&lt;p&gt;案例2：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1322549/201805/1322549-20180501232927768-825895495.png&quot; alt=&quot;&quot; width=&quot;709&quot; height=&quot;440&quot;/&gt;&lt;/p&gt;

&lt;p&gt;案例3：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1322549/201805/1322549-20180501232957097-844495232.png&quot; alt=&quot;&quot; width=&quot;787&quot; height=&quot;461&quot;/&gt;&lt;/p&gt;

&lt;p&gt;案例4：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1322549/201805/1322549-20180501233015982-152651981.png&quot; alt=&quot;&quot; width=&quot;763&quot; height=&quot;437&quot;/&gt;&lt;/p&gt;
&lt;p&gt;总结：&lt;/p&gt;
&lt;p&gt;继承性：好的事儿。继承从上到下，哪些能？哪些不能？&lt;/p&gt;
&lt;p&gt;层叠性：冲突，多个选择器描述了同一个属性，听谁的？&lt;/p&gt;

</description>
<pubDate>Tue, 01 May 2018 15:33:00 +0000</pubDate>
<dc:creator>我举个栗子</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/wanghui1234/p/8978003.html</dc:identifier>
</item>
<item>
<title>“你什么意思”之基于RNN的语义槽填充(Pytorch实现) - llhthinker</title>
<link>http://www.cnblogs.com/llhthinker/p/8978029.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/llhthinker/p/8978029.html</guid>
<description>&lt;h2 id=&quot;任务&quot;&gt;1.1 任务&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;口语理解（Spoken Language Understanding, SLU）&lt;/strong&gt;作为语音识别与自然语言处理之间的一个新兴领域，其目的是为了让计算机从用户的讲话中理解他们的意图。SLU是口语对话系统（&lt;a href=&quot;https://en.wikipedia.org/wiki/Spoken_dialog_systems&quot;&gt;Spoken Dialog Systems&lt;/a&gt;）的一个非常关键的环节。下图展示了口语对话系统的主要流程。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/llhthinker/slot-filling/master/pictures/dialogue_system.png&quot; alt=&quot;img&quot;/&gt;&lt;/p&gt;
&lt;p&gt;SLU主要通过如下三个子任务来理解用户的语言：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;&lt;strong&gt;领域识别(Domain Detection)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;用户意图检测(User Intent Determination)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;语义槽填充(Semantic Slot Filling)&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;例如，用户输入“播放周杰伦的稻香”，首先通过领域识别模块识别为&quot;music&quot;领域，再通过用户意图检测模块识别出用户意图为&quot;play_music&quot;（而不是&quot;find_lyrics&quot; ），最后通过槽填充对将每个词填充到对应的槽中：&quot;播放[O] / 周杰伦[B-singer] / 的[O] / 稻香[B-song]&quot;。&lt;/p&gt;
&lt;p&gt;从上述例子可以看出，通常把领域识别和用户意图检测当做&lt;a href=&quot;http://www.cnblogs.com/llhthinker/p/8127788.html&quot;&gt;&lt;strong&gt;文本分类&lt;/strong&gt;&lt;/a&gt;问题，而把槽填充当做&lt;strong&gt;序列标注(Sequence Tagging)&lt;/strong&gt;问题，也就是把连续序列中每个词赋予相应的语义类别标签。本次实验的任务就是基于&lt;strong&gt;ATIS 数据集&lt;/strong&gt;进行语义槽填充。(&lt;strong&gt;完整代码地址&lt;/strong&gt;：&lt;a href=&quot;https://github.com/llhthinker/slot-filling&quot; class=&quot;uri&quot;&gt;https://github.com/llhthinker/slot-filling&lt;/a&gt;)&lt;/p&gt;
&lt;h2 id=&quot;数据集&quot;&gt;1.2 数据集&lt;/h2&gt;
&lt;p&gt;本次实验基于&lt;strong&gt;ATIS(Airline Travel Information Systems )&lt;/strong&gt;数据集。顾名思义，ATIS数据集的领域为&quot;Airline Travel&quot;。ATIS数据集采取流行的&quot;&lt;strong&gt;in/out/begin(IOB)&lt;/strong&gt;标注法&quot;: &quot;I-xxx&quot;表示该词属于槽xxx，但不是槽xxx中第一个词；&quot;O&quot;表示该词不属于任何语义槽；&quot;B-xxx&quot;表示该词属于槽xxx，并且位于槽xxx的首位。部分ATIS训练数据集如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;what    O
is  O
the O
arrival B-flight_time
time    I-flight_time
in  O
san B-fromloc.city_name
francisco   I-fromloc.city_name
for O
the O
DIGITDIGITDIGIT B-depart_time.time
am  I-depart_time.time
flight  O
leaving O
washington  B-fromloc.city_name&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;ATIS数据集一共有&lt;strong&gt;83&lt;/strong&gt;种语义槽，因此序列标注的标签类别一共有&lt;span class=&quot;math inline&quot;&gt;\(83+83+1=167\)&lt;/span&gt;个。ATIS数据集分为训练集和测试集，数据规模如下表：&lt;/p&gt;
&lt;table&gt;&lt;thead/&gt;&lt;tbody&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td align=&quot;center&quot;&gt;&lt;strong&gt;句子总数&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;4978个&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;893个&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td align=&quot;center&quot;&gt;&lt;strong&gt;词语总数&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;56590个&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;9198个&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td align=&quot;center&quot;&gt;&lt;strong&gt;句子平均词数&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;11.4个&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;10.3个&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;上文中提到，通常把槽填充当做序列标注问题。很多机器学习算法都能够解决序列标注问题，包括HMM/CFG,hidden vector state(HVS)等生成式模型，以及CRF, SVM等判别式模型。本次实验主要参考论文&lt;a href=&quot;https://ieeexplore.ieee.org/abstract/document/6998838/&quot;&gt;《Using Recurrent Neural Networks for Slot Filling in Spoken Language Understanding 》&lt;/a&gt; ，基于RNN来实现语义槽填充。&lt;/p&gt;
&lt;p&gt;RNN可以分为简单RNN(Simple RNN)和门控机制RNN(Gated RNN)，前者的RNN单元完全接收上个时刻的输入；后者基于门控机制，通过学习到的参数自行决定上个时刻的输入量和当前状态的保留量。下面将介绍Elman-RNN, Jordan-RNN, Hybrid-RNN(Elman和Jordan结合)这三种简单RNN，以及经典的门控机制RNN：LSTM。&lt;/p&gt;
&lt;h2 id=&quot;elman-rnn&quot;&gt;2.1 Elman-RNN&lt;/h2&gt;
&lt;p&gt;Elman-RNN将当前时刻的输入&lt;span class=&quot;math inline&quot;&gt;\(x_t\)&lt;/span&gt;和上个时刻的隐状态输出&lt;span class=&quot;math inline&quot;&gt;\(h_{(t-1)}\)&lt;/span&gt;作为输入，具体如下：&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;math display&quot;&gt;\[\begin{split}\begin{array}{ll}h_t = \sigma(W_{ih} x_t + b_{ih} + W_{hh} h_{(t-1)} + b_{hh}) \end{array}\end{split}\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/llhthinker/slot-filling/master/pictures/elman.png&quot; alt=&quot;img&quot;/&gt;&lt;/p&gt;
&lt;p&gt;需要说明的是，&lt;code&gt;Pytorch&lt;/code&gt;默认的&lt;a href=&quot;http://pytorch.org/docs/stable/nn.html#rnn&quot;&gt;RNN&lt;/a&gt;即为Elman-RNN，但是它只支持&lt;span class=&quot;math inline&quot;&gt;\(\tanh\)&lt;/span&gt;和ReLU两种激活函数。本次实验按照论文设置，激活函数均采取sigmoid函数，使用&lt;code&gt;Pytorch&lt;/code&gt;具体实现如下:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;19&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; ElmanRNNCell(nn.Module):
    &lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;__init__&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;, input_size, hidden_size):
        &lt;span class=&quot;bu&quot;&gt;super&lt;/span&gt;(ElmanRNNCell, &lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;).&lt;span class=&quot;fu&quot;&gt;__init__&lt;/span&gt;()
        &lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.hidden_size &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; hidden_size
        &lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.i2h_fc1 &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; nn.Linear(input_size, hidden_size)
        &lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.i2h_fc2 &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; nn.Linear(hidden_size, hidden_size)
        &lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.h2o_fc &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; nn.Linear(hidden_size, hidden_size)

    &lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; forward(&lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;, &lt;span class=&quot;bu&quot;&gt;input&lt;/span&gt;, hidden):
        hidden &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; F.sigmoid(&lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.i2h_fc1(&lt;span class=&quot;bu&quot;&gt;input&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.i2h_fc2(hidden))
        output &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; F.sigmoid(&lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.h2o_fc(hidden))
        &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; output, hidden&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;jordan-rnn&quot;&gt;2.2 Jordan-RNN&lt;/h2&gt;
&lt;p&gt;Jordan-RNN将当前时刻的输入&lt;span class=&quot;math inline&quot;&gt;\(x_t\)&lt;/span&gt;和上个时刻的输出层输出&lt;span class=&quot;math inline&quot;&gt;\(y_{(t-1)}\)&lt;/span&gt;作为输入，具体如下：&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;math display&quot;&gt;\[\begin{split}\begin{array}{ll}h_t = \sigma(W_{ih} x_t + b_{ih} + W_{yh} y_{(t-1)} + b_{yh}) \end{array}\end{split}\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/llhthinker/slot-filling/master/pictures/jordan.png&quot; alt=&quot;img&quot;/&gt;&lt;/p&gt;
&lt;p&gt;使用&lt;code&gt;Pytorch&lt;/code&gt;具体实现如下，其中&lt;span class=&quot;math inline&quot;&gt;\(y_0\)&lt;/span&gt;初始化为可训练的参数:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;21&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; JordanRNNCell(nn.Module):
    &lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;__init__&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;, input_size, hidden_size):
        &lt;span class=&quot;bu&quot;&gt;super&lt;/span&gt;(JordanRNNCell, &lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;).&lt;span class=&quot;fu&quot;&gt;__init__&lt;/span&gt;()
        &lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.hidden_size &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; hidden_size
        &lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.i2h_fc1 &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; nn.Linear(input_size, hidden_size) 
        &lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.i2h_fc2 &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; nn.Linear(hidden_size, hidden_size)
        &lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.h2o_fc &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; nn.Linear(hidden_size, hidden_size)
        &lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.y_0 &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; nn.Parameter(nn.init.xavier_uniform(torch.Tensor(&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;, hidden_size)), requires_grad&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;True&lt;/span&gt;)

    &lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; forward(&lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;, &lt;span class=&quot;bu&quot;&gt;input&lt;/span&gt;, hidden&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;None&lt;/span&gt;):
        &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; hidden &lt;span class=&quot;op&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;None&lt;/span&gt;:
            hidden &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.y_0
        hidden &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; F.sigmoid(&lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.i2h_fc1(&lt;span class=&quot;bu&quot;&gt;input&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.i2h_fc2(hidden))
        output &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; F.sigmoid(&lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.h2o_fc(hidden))
        &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; output, output&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;hybrid-rnn&quot;&gt;2.4 Hybrid-RNN&lt;/h2&gt;
&lt;p&gt;Hybrid-RNN将当前时刻的输入&lt;span class=&quot;math inline&quot;&gt;\(x_t​\)&lt;/span&gt;，上个时刻的隐状态&lt;span class=&quot;math inline&quot;&gt;\(h_{(t-1)}​\)&lt;/span&gt; 以及上个时刻输出层输出&lt;span class=&quot;math inline&quot;&gt;\(y_{(t-1)}​\)&lt;/span&gt;作为输入，具体如下：&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;math display&quot;&gt;\[\begin{split}\begin{array}{ll}h_t = \sigma(W_{ih} x_t + b_{ih} + W_{hh} h_{(t-1)} + b_{hh} + W_{yh} y_{(t-1)} + b_{yh}) \end{array}\end{split}\]&lt;/span&gt; ，并且&lt;span class=&quot;math inline&quot;&gt;\(y_0\)&lt;/span&gt;初始化为可训练的参数。使用&lt;code&gt;Pytorch&lt;/code&gt;具体实现如下:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;23&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; HybridRNNCell(nn.Module):
    &lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;__init__&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;, input_size, hidden_size):
        &lt;span class=&quot;bu&quot;&gt;super&lt;/span&gt;(HybridRNNCell, &lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;).&lt;span class=&quot;fu&quot;&gt;__init__&lt;/span&gt;()
        &lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.hidden_size &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; hidden_size
        &lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.i2h_fc1 &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; nn.Linear(input_size, hidden_size)
        &lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.i2h_fc2 &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; nn.Linear(hidden_size, hidden_size)
        &lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.i2h_fc3 &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; nn.Linear(hidden_size, hidden_size)
        &lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.h2o_fc &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; nn.Linear(hidden_size, hidden_size)
        &lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.y_0 &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; nn.Parameter(nn.init.xavier_uniform(torch.Tensor(&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;, hidden_size)), requires_grad&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;True&lt;/span&gt;)

    &lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; forward(&lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;, &lt;span class=&quot;bu&quot;&gt;input&lt;/span&gt;, hidden, output&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;None&lt;/span&gt;):
        &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; output &lt;span class=&quot;op&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;None&lt;/span&gt;:
            output &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.y_0    
        hidden &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; F.sigmoid(&lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.i2h_fc1(&lt;span class=&quot;bu&quot;&gt;input&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.i2h_fc2(hidden)&lt;span class=&quot;op&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.i2h_fc3(output))
        output &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; F.sigmoid(&lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.h2o_fc(hidden)) 
        &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; output, hidden&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;lstm&quot;&gt;2.5 LSTM&lt;/h2&gt;
&lt;p&gt;LSTM引入了&lt;strong&gt;记忆单元&lt;/strong&gt;&lt;span class=&quot;math inline&quot;&gt;\(c_t\)&lt;/span&gt;和3种控制门，包括&lt;strong&gt;输入门&lt;/strong&gt;(input gate)&lt;span class=&quot;math inline&quot;&gt;\(i_t\)&lt;/span&gt;，&lt;strong&gt;遗忘门&lt;/strong&gt;(forget gate)&lt;span class=&quot;math inline&quot;&gt;\(f_t\)&lt;/span&gt;，&lt;strong&gt;输出门&lt;/strong&gt;(output gate)&lt;span class=&quot;math inline&quot;&gt;\(o_t\)&lt;/span&gt;， 首先，输入层接受当前时刻输入&lt;span class=&quot;math inline&quot;&gt;\(x_t\)&lt;/span&gt;和上个时刻隐状态输出&lt;span class=&quot;math inline&quot;&gt;\(h_{(t-1)}\)&lt;/span&gt;，通过&lt;span class=&quot;math inline&quot;&gt;\(\tanh\)&lt;/span&gt;激活函数得到记忆单元的输入&lt;span class=&quot;math inline&quot;&gt;\(g_t\)&lt;/span&gt;； 然后遗忘门&lt;span class=&quot;math inline&quot;&gt;\(f_t\)&lt;/span&gt;决定上个时刻记忆单元&lt;span class=&quot;math inline&quot;&gt;\(c_{(t-1)}\)&lt;/span&gt;的保留比例，输入门&lt;span class=&quot;math inline&quot;&gt;\(i_t\)&lt;/span&gt;决定当前时刻记忆单元的输入&lt;span class=&quot;math inline&quot;&gt;\(g_t\)&lt;/span&gt;的保留比例，两者相加得到当前的记忆单元&lt;span class=&quot;math inline&quot;&gt;\(c_t\)&lt;/span&gt;； 最后记忆单元&lt;span class=&quot;math inline&quot;&gt;\(c_t\)&lt;/span&gt;通过&lt;span class=&quot;math inline&quot;&gt;\(\tanh\)&lt;/span&gt;激活函数得到的值在输出门&lt;span class=&quot;math inline&quot;&gt;\(o_t\)&lt;/span&gt;的控制下得到最终的当前时刻隐状态&lt;span class=&quot;math inline&quot;&gt;\(h_t\)&lt;/span&gt;， 具体如下：&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;math display&quot;&gt;\[\begin{split}\begin{array}{ll}i_t = \sigma(W_{ii} x_t + b_{ii} + W_{hi} h_{(t-1)} + b_{hi}) \\f_t = \sigma(W_{if} x_t + b_{if} + W_{hf} h_{(t-1)} + b_{hf}) \\g_t = \tanh(W_{ig} x_t + b_{ig} + W_{hg} h_{(t-1)} + b_{hg}) \\o_t = \sigma(W_{io} x_t + b_{io} + W_{ho} h_{(t-1)} + b_{ho}) \\c_t = f_t c_{(t-1)} + i_t g_t \\h_t = o_t \tanh(c_t)\end{array}\end{split}\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Pytorch&lt;/code&gt;已经实现了&lt;a href=&quot;http://pytorch.org/docs/stable/nn.html#lstm&quot;&gt;LSTM&lt;/a&gt;, 只需要调用相应的API即可，调用的代码片段如下:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.rnn &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; nn.LSTM(input_size&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;embedding_dim,
                   hidden_size&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;hidden_size,
                   bidirectional&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;bidirectional,
                   batch_first&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;True&lt;/span&gt;)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;实验设置&quot;&gt;3.1 实验设置&lt;/h2&gt;
&lt;p&gt;实验基于&lt;code&gt;Python 3.6&lt;/code&gt; 和&lt;a href=&quot;http://pytorch.org/&quot;&gt;&lt;code&gt;Pytorch 0.4.0&lt;/code&gt;&lt;/a&gt;，为进行对照实验，下列设置针对所有RNN模型:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;所有RNN模型均只使用单层；&lt;/li&gt;
&lt;li&gt;词向量维度设置为100维，并且随机初始化，在训练过程中进行调整；&lt;/li&gt;
&lt;li&gt;隐状态维度设置为75维;&lt;/li&gt;
&lt;li&gt;采用带动量的随机梯度下降(SGD)，batch size为1，学习率(learning rate)为0.1，动量(momentum)为0.9并保持不变;&lt;/li&gt;
&lt;li&gt;epoch=10；&lt;/li&gt;
&lt;li&gt;每种RNN模型都实现单向(Single)和双向(Bi-Directional)，并分别训练。&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;实验结果&quot;&gt;3.2 实验结果&lt;/h2&gt;
&lt;p&gt;在使用CPU的情况下，不同模型在测试集的&lt;span class=&quot;math inline&quot;&gt;\(F_1\)&lt;/span&gt;得分以及平均一个epoch训练时长的结果如下：&lt;/p&gt;
&lt;table&gt;&lt;thead/&gt;&lt;tbody&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td align=&quot;center&quot;&gt;&lt;strong&gt;Single&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;&lt;strong&gt;87.26&lt;/strong&gt; / &lt;strong&gt;438&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;87.90 / 487&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;88.46 / 494&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;92.16 / 3721&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td align=&quot;center&quot;&gt;&lt;strong&gt;Bi-Directional&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;92.88 / 565&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;90.31 / 580&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;91.85 / 613&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;&lt;strong&gt;93.75&lt;/strong&gt; / &lt;strong&gt;4357&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;从上表中可以看出：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;基于门控机制的LSTM由于其参数和运算步骤的增加，一个epoch的训练时长是另外三种Simple RNN的9倍左右，而&lt;span class=&quot;math inline&quot;&gt;\(F_1\)&lt;/span&gt;得分也比Simple RNN高；&lt;/li&gt;
&lt;li&gt;双向(Bi-Directional)RNN的&lt;span class=&quot;math inline&quot;&gt;\(F_1\)&lt;/span&gt;得分普遍比单向(Single)RNN高，而运行时间也多一些。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;在使用同一块GPU的情况下，不同模型在测试集的&lt;span class=&quot;math inline&quot;&gt;\(F_1\)&lt;/span&gt;得分以及平均一个epoch训练时长的结果如下：&lt;/p&gt;
&lt;table&gt;&lt;thead/&gt;&lt;tbody&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td align=&quot;center&quot;&gt;&lt;strong&gt;Single&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;88.89 / 35.2&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;88.36 / 41.3&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;89.65 / 43.5&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;92.44 / &lt;strong&gt;16.8&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td align=&quot;center&quot;&gt;&lt;strong&gt;Bi-Directional&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;91.78 / 68.0&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;89.82 / 72.2&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;93.61 / 81.6&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;&lt;strong&gt;94.26&lt;/strong&gt; / 18.7&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;从上表中可以看出，即使是随机梯度下降(batch_size=1)，GPU的加速效果仍然相当明显。值得指出的是，虽然LSTM的运算步骤比其他三种Simple-RNN多，但是用时却是最少的，这可能是由于LSTM是直接调用&lt;code&gt;Pytorch&lt;/code&gt;的API，针对GPU有优化，而另外三种的都是自己实现的，GPU加速效果没有&lt;code&gt;Pytorch&lt;/code&gt;好。&lt;/p&gt;

&lt;p&gt;总的来说，将槽填充问题当做序列标注问题是一种有效的做法，而RNN能够较好的对序列进行建模，提取相关的上下文特征。双向RNN的表现优于单向RNN，而LSTM的表现优于Simple RNN。对于Simple RNN而言，Elman的表现不比Jordan差（甚至更好），而用时更少并且实现更简单，这可能是主流深度学习框架（&lt;code&gt;TensorFlow&lt;/code&gt; / &lt;code&gt;Pytorch&lt;/code&gt;等）的simple RNN是基于Elman的原因。而Hybrid作为Elman和Jordan的混合体，其训练时间都多余Elman和Jordan，&lt;span class=&quot;math inline&quot;&gt;\(F_1\)&lt;/span&gt;得分略有提升，但不是特别明显（使用CPU时的双向Elman表现比双向Hybrid好），需要更多实验进行验证。&lt;/p&gt;
&lt;p&gt;从实验设置可以看出，本次实验没有过多的调参。如果想取得更好的结果，可以进行更细致的调参，包括 ：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;改变词向量维度和隐状态维度；&lt;/li&gt;
&lt;li&gt;考虑采用预训练词向量，然后固定或者进行微调；&lt;/li&gt;
&lt;li&gt;采用正则化技术，包括L1/L2, Dropout, Batch Normalization, Layer Normalization等；&lt;/li&gt;
&lt;li&gt;尝试使用不同的优化器(如Adam)，使用mini-batch，调整学习率；&lt;/li&gt;
&lt;li&gt;增加epoch次数。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;此外，可以考虑在输入时融入词性标注和命名实体识别等信息，在输出时使用Viterbi算法进行解码，也可以尝试不同形式的门控RNN（如GRU，LSTM变体等）以及采用多层RNN，并考虑是否使用残差连接等。&lt;/p&gt;

&lt;p&gt;Mesnil G, Dauphin Y, Yao K, et al. Using recurrent neural networks for slot filling in spoken language understanding[J]. IEEE/ACM Transactions on Audio, Speech, and Language Processing, 2015, 23(3): 530-539.&lt;/p&gt;
&lt;p&gt;Wikipedia. Recurrent neural network. &lt;a href=&quot;https://en.wikipedia.org/wiki/Recurrent_neural_network&quot; class=&quot;uri&quot;&gt;https://en.wikipedia.org/wiki/Recurrent_neural_network&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;PyTorch documentation. Recurrent layers. &lt;a href=&quot;http://pytorch.org/docs/stable/nn.html#recurrent-layers&quot; class=&quot;uri&quot;&gt;http://pytorch.org/docs/stable/nn.html#recurrent-layers&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Hung-yi Lee. Machine Learning (2017,Spring). &lt;a href=&quot;http://speech.ee.ntu.edu.tw/~tlkagk/courses/ML_2017/Lecture/RNN.pdf&quot; class=&quot;uri&quot;&gt;http://speech.ee.ntu.edu.tw/~tlkagk/courses/ML_2017/Lecture/RNN.pdf&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;YUN-NUNG (VIVIAN) CHEN. Spring 105 - Intelligent Conversational Bot. &lt;a href=&quot;https://www.csie.ntu.edu.tw/~yvchen/s105-icb/doc/170321_LU.pdf&quot; class=&quot;uri&quot;&gt;https://www.csie.ntu.edu.tw/~yvchen/s105-icb/doc/170321_LU.pdf&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Tue, 01 May 2018 15:26:00 +0000</pubDate>
<dc:creator>llhthinker</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/llhthinker/p/8978029.html</dc:identifier>
</item>
<item>
<title>python3+django2 开发易语言网络验证（上） - 雪落忆海</title>
<link>http://www.cnblogs.com/xuepangzi/p/8978011.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/xuepangzi/p/8978011.html</guid>
<description>&lt;p&gt;　　在某论坛中下载到一套php开发易语言网络验证的教程，照着看下来，花了两天的时间，结果发现教程里开发的网络验证，以及随着教程一起给学员的源码，都存在着根本用不了的bug！我想要看看能不能在原本的基础上修改，却出现了一大堆坑，不是这儿少个$ ，就是那少个 ;  要不就是哪{}包的不对了，擦，不是说php是世界上最好的语言吗？怎么感觉是世界上最坑的语言呢？&lt;/p&gt;
&lt;p&gt;　　也许因为一般的程序员都是从C启蒙，进而C++，后又转Java，忽然见到php，顿时感觉简单明快，好像见到亲人了似的；而我易语言启蒙，进而学python，连用到JavaScript我都神烦其要弄那么多花括号，还要声明变量什么的，简直麻烦透顶，更不用提php了，简直觉得php就是一块儿被烤化了的牛皮糖，黏黏糊糊，一坨代码扑过来，总有些边边角角bug的弄得你浑身难受。&lt;/p&gt;
&lt;p&gt;　　于是，我只好怒而用python，祭出django，开发一个易语言网络验证喽！其实这也是被逼无奈，毕竟，php垃圾是垃圾了点，好在开发完了，部署极为简单，而django项目的上线部署就……一言难尽了。&lt;/p&gt;

&lt;p&gt;（下载安装mysql、下载安装python3、下载安装pycharm注册激活什么的，在这里就不赘述了，就当大家都知道了哈）&lt;/p&gt;
&lt;h2&gt;1.新建数据库：&lt;/h2&gt;
&lt;p&gt;　　1.打开MySQL Command Line Client （windows 桌面→开始→所有程序→MySQL→MySQL Server5.7 目录下）&lt;/p&gt;
&lt;p&gt;　　2.输入数据库密码，进入数据库，然后敲代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
show databases; #看看mysql中已经有的数据库名，新建的数据库别起重名了
create database netauth; #创建数据库 netauth （netauth是数据库名，可以自定义）
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;2.新建django项目：&lt;/h2&gt;
&lt;h3&gt;　　1.新建django项目：打开pycharm→File→New Preject→Django→取个项目名：netauth→More Settings→取个app名：yanzheng&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1282071/201805/1282071-20180501091451635-2064156507.png&quot; alt=&quot;&quot; width=&quot;617&quot; height=&quot;387&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;　　2.新建静态文件目录：static、media、log&lt;/h3&gt;
&lt;p&gt;　　1.新建目录&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1282071/201805/1282071-20180501092406979-2072911543.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　2.在settings.py中配置目录，在settings.py的末尾，找到相关代码，补全为以下代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
STATIC_URL = '/static/'
STATICFILES_DIRS=(os.path.join(BASE_DIR,  'static'),)
TEMPLATE_DIRS = (os.path.join(BASE_DIR,  'templates'),)
MEDIA_URL=&quot;/media/&quot;
MEDIA_ROOT=os.path.join(BASE_DIR,&quot;media&quot;)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　3.在项目netauth目录下的urls.py中配置media路径，增加代码，补全为：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;div class=&quot;cnblogs_code_toolbar&quot;&gt;&lt;span class=&quot;cnblogs_code_copy&quot;&gt;&lt;a title=&quot;复制代码&quot;&gt;&lt;img src=&quot;https://common.cnblogs.com/images/copycode.gif&quot; alt=&quot;复制代码&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;
&lt;pre&gt;
from django.contrib import admin
from django.urls import path

from django.views.static import serve
from netauth.settings import MEDIA_ROOT


urlpatterns = [
    path('admin/', admin.site.urls),
    #配置上传文件的访问处理函数
    path('media/&amp;lt;path:path&amp;gt;',serve,{'document_root':MEDIA_ROOT}),
]
&lt;/pre&gt;
&lt;div class=&quot;cnblogs_code_toolbar&quot;&gt;&lt;span class=&quot;cnblogs_code_copy&quot;&gt;&lt;a title=&quot;复制代码&quot;&gt;&lt;img src=&quot;https://common.cnblogs.com/images/copycode.gif&quot; alt=&quot;复制代码&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;补充：在settings.py中添加模板文件路径：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;&lt;img id=&quot;code_img_closed_72c34337-be8f-4ef5-bfe9-df9e594c0f26&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt; &lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;h3&gt;　　3.建立django项目与mysql数据库链接：&lt;/h3&gt;
&lt;p&gt;　　1.在项目netauth目录下的__init__.py中加入代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
import pymysql
pymysql.install_as_MySQLdb()
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　2.settings.py配置文件中找到DATABASE进行改写：&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;div class=&quot;cnblogs_code_toolbar&quot;&gt;&lt;span class=&quot;cnblogs_code_copy&quot;&gt;&lt;a title=&quot;复制代码&quot;&gt;&lt;img src=&quot;https://common.cnblogs.com/images/copycode.gif&quot; alt=&quot;复制代码&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;
&lt;pre&gt;
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': &quot;netauth&quot;,
        'USER':'root',
        'PASSWORD':'（数据库密码）',
        'HOST':&quot;127.0.0.1&quot;,
        'PORT':'3306',
        'OPTIONS':{'init_command':'SET default_storage_engine=INNODB;'}
    }
}
&lt;/pre&gt;
&lt;div class=&quot;cnblogs_code_toolbar&quot;&gt;&lt;span class=&quot;cnblogs_code_copy&quot;&gt;&lt;a title=&quot;复制代码&quot;&gt;&lt;img src=&quot;https://common.cnblogs.com/images/copycode.gif&quot; alt=&quot;复制代码&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;　　3.打开Terminal 执行更新数据库的两条经典的命令：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
python manage.py makemigrations

python manage.py migrate
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1282071/201805/1282071-20180501094108259-2062356468.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h3&gt;　　4.在pycharm直观的管理数据库（类似于php的phpadmin，然而没有那么难用）：&lt;/h3&gt;
&lt;p&gt;1.点击Database按钮→点击＋号→点击MySQL&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1282071/201805/1282071-20180501095004649-1692640182.png&quot; alt=&quot;&quot; width=&quot;525&quot; height=&quot;397&quot;/&gt;&lt;/p&gt;

&lt;p&gt; 2.输入数据库名、数据库用户名、数据库密码 → 点击Test Connection 按钮，提示Successful代表链接成功，点击ok即可！&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1282071/201805/1282071-20180501095446619-1846432928.png&quot; alt=&quot;&quot; width=&quot;836&quot; height=&quot;451&quot;/&gt;&lt;/p&gt;
&lt;p&gt;3.查看：再点击Database→点击netauth@localhost→点击netauth 即可看到django自动生成的十张表，可以随意点击进去查看，进行增删操作。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1282071/201805/1282071-20180501095908989-1716366498.png&quot; alt=&quot;&quot; width=&quot;560&quot; height=&quot;419&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;　　 5.建立自定制的用户表：&lt;/h3&gt;
&lt;p&gt;1.在yanzheng/models.py中写代码：&lt;span&gt;from&lt;/span&gt; django.db &lt;span&gt;import&lt;/span&gt; &lt;span&gt;models&lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;from&lt;/span&gt; django.db &lt;span&gt;import&lt;/span&gt;&lt;span&gt; models
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; django.contrib.auth.models &lt;span&gt;import&lt;/span&gt;&lt;span&gt; AbstractUser
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; datetime &lt;span&gt;import&lt;/span&gt;&lt;span&gt; datetime
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; Create your models here.&lt;/span&gt;


&lt;span&gt;class&lt;/span&gt;&lt;span&gt; UserProfile(AbstractUser):
    end_time&lt;/span&gt;=models.DateTimeField(default=datetime.now, verbose_name=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;到期时间&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)

    &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Meta:
        verbose_name&lt;/span&gt;=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;用户信息&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
        verbose_name_plural&lt;/span&gt;=&lt;span&gt;verbose_name
    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;__str__&lt;/span&gt;&lt;span&gt;(self):
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; self.username
&lt;/pre&gt;&lt;/div&gt;



&lt;p&gt;2.在settings.py 中加入代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
AUTH_USER_MODEL=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;yanzheng.UserProfile&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;3.开始→所有程序→MySQL→ MySQL Server 5.7→ 打开MySQL Command Line Client.exe 输入密码，进入操作界面，执行以下命令：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt;删除netauth数据库，再重建netauth，两次数据库名必须一样&lt;/span&gt;
&lt;span&gt;drop database netauth;
create database netauth;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;4.回到django项目下，打开Terminal终端，执行经典的更新数据命令：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;python manage.py makemigrations
python manage.py migrate&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;　　6.新建超级用户：&lt;/h3&gt;
&lt;p&gt;1.打开Terminal终端，执行：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;python manage.py createsuperuser

Username:用户名
Email:邮箱
Password：自定义一个不少于8位的密码（密码不显示的）
Password(again):确认密码&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;2.在settings.py找到LANGUAGE_CODE，将相关代码改为使用中文：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
LANGUAGE_CODE = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;zh-hans&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;

TIME_ZONE &lt;/span&gt;= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Asia/Shanghai&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;

USE_I18N &lt;/span&gt;=&lt;span&gt; True

USE_L10N &lt;/span&gt;=&lt;span&gt; True

USE_TZ &lt;/span&gt;= False
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;3.运行django项目：&lt;/p&gt;
&lt;p&gt;方法一：点击pycharm运行按钮&lt;/p&gt;
&lt;p&gt;方法二：执行命令：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
python manage.py runserver
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;运行成功后，只要浏览器访问：http://127.0.0.1:8000/admin就可以来到xadmin的后台管理界面，通过刚刚创建的超级用户账户密码就可以登录。&lt;/p&gt;

&lt;h3&gt;什么是xadmin：&lt;/h3&gt;
&lt;p&gt;　　网上有很多定义和解释，基本上都让不了解xadmin的人看完了更迷糊！既然是解释，就要让读者能一下子明白嘛！&lt;/p&gt;
&lt;p&gt;　　xadmin在python的领域就相当于php领域的dz论坛和WordPress的高度可定制版后台！&lt;/p&gt;
&lt;p&gt;　　更通俗点讲，xadmin就像是你的qq空间，但是比qq空间的可定制化高一千倍，能够方便的管理你的各种数据（类比于你qq空间中的日志、说说、签名、照片……）&lt;/p&gt;
&lt;h2&gt;1.django2下安装xadmin&lt;/h2&gt;
&lt;p&gt; 1.xadmin的django2下载地址：&lt;a href=&quot;https://github.com/sshwsfc/xadmin/tree/django2&quot;&gt;https://github.com/sshwsfc/xadmin/tree/django2&lt;/a&gt;&lt;/p&gt;
&lt;p&gt; 2.打开地址→确认下载的是django2的，点击Clone or download→点击Download ZIP→选择下载到一个没有中文的目录下→点击下载&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1282071/201805/1282071-20180501103101089-154140457.png&quot; alt=&quot;&quot; width=&quot;748&quot; height=&quot;366&quot;/&gt;&lt;/p&gt;

&lt;p&gt;3.打开Terminal执行安装命令：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
pip install --cache-&lt;span&gt;dir
pip install d:&lt;/span&gt;/xadmin-django2.zip
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;4.安装一些必要的库文件：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;pip crispy_forms
pip reversion&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;5.打开settings.py 找到INSTALLED_APPS 追加：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;44&quot;&gt;
&lt;pre&gt;
INSTALLED_APPS =&lt;span&gt; [
    &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;django.contrib.admin&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;django.contrib.auth&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;django.contrib.contenttypes&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;django.contrib.sessions&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;django.contrib.messages&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;django.contrib.staticfiles&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;yanzheng.apps.YanzhengConfig&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
 &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;追加代码:   &lt;/span&gt;
    &lt;span&gt;'&lt;/span&gt;&lt;span&gt;xadmin&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;crispy_forms&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;reversion&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;6.给urls.py中增加两行代码，就算是给xadmin配置路由了：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;from&lt;/span&gt; django.contrib &lt;span&gt;import&lt;/span&gt;&lt;span&gt; admin
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; django.urls &lt;span&gt;import&lt;/span&gt;&lt;span&gt; path
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;引入xadmin&lt;/span&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; xadmin

urlpatterns &lt;/span&gt;=&lt;span&gt; [
    path(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;admin/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, admin.site.urls),
 &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;配置xadmin路由   &lt;/span&gt;
    path(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;xadmin/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, xadmin.site.urls),
]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;7.安装配置好了，不要忘了更新数据库，打开Terminal，执行经典的两条命令：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;python manage.py makemigrations
python manage.py migrate&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;8.重新运行项目，浏览器访问http://127.0.0.1:8000/xadmin/  即可看到xadmin的登录界面（上次登录admin的时候如果没注销登出，因为cookie的缘故，会直接出现已经登录的界面。）&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1282071/201805/1282071-20180501213328586-217679127.png&quot; alt=&quot;&quot; width=&quot;689&quot; height=&quot;354&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1282071/201805/1282071-20180501213906553-1285513933.png&quot; alt=&quot;&quot; width=&quot;762&quot; height=&quot;347&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;2.django2下配置xadmin&lt;/h2&gt;
&lt;h3&gt;1.至此成功登录了，但是由于后面还要自定义一些xadmin的插件（比如一键导出生成的卡密插件），所以要将xadmin导入项目中：&lt;/h3&gt;
&lt;p&gt;1.在项目netauth目录下，新建apps和extra_apps，将yanzheng拖入apps目录下。&lt;/p&gt;
&lt;p&gt;2.在d盘目录下找到下载的xadmin-django2.zip，右键解压文件→确定，解压后的文件夹中，找到xadmin-django2/xadmin-django2目录下的xadmin文件夹，复制到项目中extra_apps目录下，注意Search for reference 和Open moved files in editer 都不要勾选！&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1282071/201805/1282071-20180501112233748-1724394628.png&quot; alt=&quot;&quot; width=&quot;906&quot; height=&quot;457&quot;/&gt;&lt;/p&gt;
&lt;p&gt;3.extra_apps右键→Mark Directory as→Sources Root（&lt;strong&gt;对apps目录也要做同样的事&lt;/strong&gt;）&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1282071/201805/1282071-20180501112735745-636071143.png&quot; alt=&quot;&quot; width=&quot;460&quot; height=&quot;464&quot;/&gt;&lt;/p&gt;
&lt;p&gt;4.在settings.py 中，找到：BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))，import sys 添加补全代码为：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
import os,sys

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
sys.path.insert(0,os.path.join(BASE_DIR,'apps'))
sys.path.insert(1,os.path.join(BASE_DIR,'extra_apps'))
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;.5.打开Terminal终端，卸载最先安装的xadmin&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
&lt;span&gt;pip uninstall xadmin
y&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;不要觉得先安装，又导入，又卸载，这个过程有什么可以省略的，一步也不能少，不然掉到坑里，爬不上来哦。&lt;/h2&gt;

&lt;p&gt;1.在apps/yanzheng/models.py中，将网络验证相关的表建完（其实就俩表，还都很简单）：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;44&quot;&gt;
&lt;pre&gt;
&lt;span&gt;from&lt;/span&gt; django.db &lt;span&gt;import&lt;/span&gt;&lt;span&gt; models
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; django.contrib.auth.models &lt;span&gt;import&lt;/span&gt;&lt;span&gt; AbstractUser
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; datetime &lt;span&gt;import&lt;/span&gt;&lt;span&gt; datetime
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; Create your models here.&lt;/span&gt;


&lt;span&gt;class&lt;/span&gt;&lt;span&gt; UserProfile(AbstractUser):
    is_ban&lt;/span&gt;=models.BooleanField(default=False,verbose_name=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;是否被禁&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
    end_time&lt;/span&gt;=models.DateTimeField(default=datetime.now, verbose_name=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;到期时间&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)

    &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Meta:
        verbose_name&lt;/span&gt;=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;用户信息&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
        verbose_name_plural&lt;/span&gt;=&lt;span&gt;verbose_name
    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;__str__&lt;/span&gt;&lt;span&gt;(self):
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; self.username


&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Cards(models.Model):

    &lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;充值卡&lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;
    user&lt;/span&gt;=models.ForeignKey(UserProfile,verbose_name=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;使用者&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,on_delete=&lt;span&gt;models.CASCADE)
    kacode&lt;/span&gt;=models.CharField(max_length=50,verbose_name=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;卡密&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,default=&lt;span&gt;''&lt;/span&gt;&lt;span&gt;)
    time&lt;/span&gt;=models.IntegerField(default=3600,verbose_name=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;时长&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
    is_used&lt;/span&gt;=models.BooleanField(default=False,verbose_name=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;是否已经使用&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
    add_time&lt;/span&gt;=models.DateTimeField(default=datetime.now,verbose_name=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;生成时间&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Meta:
        verbose_name&lt;/span&gt;=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;卡密&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
        verbose_name_plural&lt;/span&gt;=&lt;span&gt;verbose_name
    &lt;/span&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;__str__&lt;/span&gt;&lt;span&gt;(self):
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; self.kacode
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;打开Terminal，执行数据更新命令：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;python manage.py makemigrations
python manage.py migrate&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;这里有一个坑：&lt;/h2&gt;
&lt;p&gt;　　数据更新的时候，如果数据类中，有DateTimeField字段，只能在第一次创建时，数据更新命令能成功，如果已经执行了数据更新命令，再修改DateTimeField字段的默认值，就会时间格式不对的错误，很烦人！&lt;/p&gt;
&lt;p&gt;　　解决办法：将apps/yanzheng/makemigrations目录下，除了__init__.py以外的文件都删掉，再执行数据更新命令，就可以了。&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1282071/201805/1282071-20180501231836690-512711057.png&quot; alt=&quot;&quot; width=&quot;376&quot; height=&quot;442&quot;/&gt;&lt;/p&gt;






</description>
<pubDate>Tue, 01 May 2018 15:25:00 +0000</pubDate>
<dc:creator>雪落忆海</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/xuepangzi/p/8978011.html</dc:identifier>
</item>
<item>
<title>ABP框架 - 模块系统 - lcyhjx</title>
<link>http://www.cnblogs.com/lcyhjx/p/8978010.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/lcyhjx/p/8978010.html</guid>
<description>&lt;p&gt;ABP提供了基础设施功能来构建模块，并通过组合这些模块来创建应用。一个模块可以依赖于另一个模块。一般来讲，一个程序集被认为和定义成一个模块。如果你的应用包含多个程序集，那么你可以为每一个程序集都定义一个模块。&lt;/p&gt;

&lt;p&gt;ABP中的一个模块是由继承于AbpModule（AbpModule定义在ABP package中）的一个类来定义的。比如我们开发了一个博客模块，可以被不同的应用程序使用，那么一个最简单的博客模块定义如下：&lt;/p&gt;
&lt;pre class=&quot;c#&quot;&gt;
&lt;code&gt;public class MyBlogApplicationModule : AbpModule
{
    public override void Initialize()
    {
        IocManager.RegisterAssemblyByConvention(Assembly.GetExecutingAssembly());
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;定义模块的类有一个职责就是通过依赖注入来注册模块中的类型，如上代码所示:&lt;/p&gt;
&lt;pre class=&quot;c#&quot;&gt;
&lt;code&gt;IocManager.RegisterAssemblyByConvention(Assembly.GetExecutingAssembly());&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;当然，除此之外，它还可以配置应用程序，实现新的功能等等&lt;/p&gt;

&lt;p&gt;当应用程序启动和关闭时，ABP会调用模块中的一组特定方法PreInitialize、Initialize、PostInitialize、Shutdown。你可以重写这些方法来执行特定任务。&lt;/p&gt;
&lt;p&gt;ABP是根据模块之间的依赖顺序来执行模块的这些方法的。例如模块A依赖于模块B，那么模块B就会在模块A之前做初始化。当应用程序启动时，模块A和模块B中这些方法的执行顺序如下：PreInitialize-B--&amp;gt;PreInitialize-A--&amp;gt;Initialize-B--&amp;gt;Initialize-A--&amp;gt;PostInitialize-B--&amp;gt;PostInitialize-A&lt;/p&gt;
&lt;p&gt;当应用程序关闭时，过程与启动类似，只是执行顺序与启动时是相反的。&lt;/p&gt;
&lt;h3 id=&quot;preinitialize&quot;&gt;PreInitialize&lt;/h3&gt;
&lt;p&gt;当启动时，会首先调用PreInitialize方法，它在模块初始化之前执行，所以通常会将框架和模块的配置定义在这里。同时，一些在依赖注入之前执行的代码也会写在这里。例如你定义一个传统的类，那么你需要在这里调用 IocManager.AddConventionalRegisterer 方法来注册它。&lt;/p&gt;
&lt;h3 id=&quot;initialize&quot;&gt;Initialize&lt;/h3&gt;
&lt;p&gt;在Initialize方法中，会通过依赖注入注册模块中定义的类型，一般使用IocManager.RegisterAssemblyByConvention 方法来来注册，当然也可自定义类型注册。&lt;/p&gt;
&lt;h3 id=&quot;postinitialize&quot;&gt;PostInitialize&lt;/h3&gt;
&lt;p&gt;在启动过程中，这是最后一个被调用的方法。在这里可以安全的解析一个依赖。&lt;/p&gt;
&lt;h3 id=&quot;shutdown&quot;&gt;Shutdown&lt;/h3&gt;
&lt;p&gt;在应用关闭时，会调用此方法。&lt;/p&gt;

&lt;p&gt;一个模块可以依赖于另一个模块，你需要使用DependsOn特性来显示的定义模块间的依赖关系，如下所示：&lt;/p&gt;
&lt;pre class=&quot;c#&quot;&gt;
&lt;code&gt;[DependsOn(typeof(MyBlogCoreModule))]
public class MyBlogApplicationModule : AbpModule
{
    public override void Initialize()
    {
        IocManager.RegisterAssemblyByConvention(Assembly.GetExecutingAssembly());
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;在这里，我们定义MyBlogApplicationModule模块依赖于MyBlogCoreModule模块，并且MyBlogCoreModule模块要在MyBlogApplicationModule模块之前进行初始化。&lt;/p&gt;
&lt;p&gt;ABP在启动模块中，自动的解析模块之间的依赖关系并初始化模块。启动模块是最后一个被初始化的模块。&lt;/p&gt;

&lt;p&gt;ABP可以在启动模块中检测、加载模块集，也可以动态的加载模块，这些动态加载的模块就称之为插件模块。&lt;/p&gt;
&lt;p&gt;在动态加载模块时，要指定插件模块的源，在AbpBootstrapper类中定义了一个属性PlugInSources, 就是用来指定插件模块的源。任何一个实现了IPlugInSource接口的类都可以用来定义插件模块的源。&lt;/p&gt;
&lt;p&gt;在ABP中提供了一个默认实现PlugInFolderSource， 用于从指定的文件夹中获取插件模块。&lt;/p&gt;
&lt;h3 id=&quot;asp.net-core&quot;&gt;ASP.NET CORE&lt;/h3&gt;
&lt;p&gt;在ABP ASP.NET Core模块的Startup类中，ABP为AddAbp扩展方法定义了添加插件模块源的选项:&lt;/p&gt;
&lt;pre class=&quot;c#&quot;&gt;
&lt;code&gt;services.AddAbp&amp;lt;MyStartupModule&amp;gt;(options =&amp;gt;
{
    options.PlugInSources.Add(new FolderPlugInSource(@&quot;C:\MyPlugIns&quot;));
});&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;也可以使用AddFolder扩展方法&lt;/p&gt;
&lt;pre class=&quot;c#&quot;&gt;
&lt;code&gt;services.AddAbp&amp;lt;MyStartupModule&amp;gt;(options =&amp;gt;
{
    options.PlugInSources.AddFolder(@&quot;C:\MyPlugIns&quot;);
});&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;asp.net-mvc-web-api&quot;&gt;ASP.NET MVC, Web API&lt;/h3&gt;
&lt;p&gt;如果是ASP.NET MVC应用程序，我们可以重写global.asax中的Application_Start方法来添加插件模块的源:&lt;/p&gt;
&lt;pre class=&quot;c#&quot;&gt;
&lt;code&gt;public class MvcApplication : AbpWebApplication&amp;lt;MyStartupModule&amp;gt;
{
    protected override void Application_Start(object sender, EventArgs e)
    {
        AbpBootstrapper.PlugInSources.AddFolder(@&quot;C:\MyPlugIns&quot;);
        //...
        base.Application_Start(sender, e);
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;插件模块中的controllers&quot;&gt;插件模块中的Controllers&lt;/h3&gt;
&lt;p&gt;如果你在插件模块中定义了MVC / Web API Controllers， ASP.NET将不能检测到这些Controllers, 要解决这个问题，你需要修改global.asax代码文件如下：&lt;/p&gt;
&lt;pre class=&quot;c#&quot;&gt;
&lt;code&gt;using System.Web;
using Abp.PlugIns;
using Abp.Web;
using MyDemoApp.Web;

[assembly: PreApplicationStartMethod(typeof(PreStarter), &quot;Start&quot;)]

namespace MyDemoApp.Web
{
    public class MvcApplication : AbpWebApplication&amp;lt;MyStartupModule&amp;gt;
    {
    }

    public static class PreStarter
    {
        public static void Start()
        {
            //...
            MvcApplication.AbpBootstrapper.PlugInSources.AddFolder(@&quot;C:\MyPlugIns\&quot;);
            MvcApplication.AbpBootstrapper.PlugInSources.AddToBuildManager();
        }
    }
}&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;在ABP中定义了两个接口IAssemblyFinder和ITypeFinder，这两个接口是ABP用来检测应用中的程序中的程序集和类型的。ABP为这两个接口提供了默认实现，在默认实现中，仅仅从上述模块（通过启动模块定义的模块依赖解析出的模块，以及插件模块）中来查找程序集和类型。如果想添加其他程序集，可以重写GetAdditionalAssemblies方法。&lt;/p&gt;

&lt;p&gt;在模块中可以定义自定义方法，模块中的自定义方法可以被其他依赖的模块调用。假设MyModule2模块依赖MyModule1模块，并且想在PreInitialize方法中调用MyModule1模块的自定义方法，如下代码所示：&lt;/p&gt;
&lt;pre class=&quot;c#&quot;&gt;
&lt;code&gt;public class MyModule1 : AbpModule
{
    public override void Initialize()
    {
        IocManager.RegisterAssemblyByConvention(Assembly.GetExecutingAssembly());
    }

    public void MyModuleMethod1()
    {
        //this is a custom method of this module
    }
}

[DependsOn(typeof(MyModule1))]
public class MyModule2 : AbpModule
{
    private readonly MyModule1 _myModule1;

    public MyModule2(MyModule1 myModule1)
    {
        _myModule1 = myModule1;
    }

    public override void PreInitialize()
    {
        _myModule1.MyModuleMethod1(); //Call MyModule1's method
    }

    public override void Initialize()
    {
        IocManager.RegisterAssemblyByConvention(Assembly.GetExecutingAssembly());
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;在这里，我们通过构造函数注入将MyModule1模块注入到MyModule2模块，这样我们就可以在MyModule2模块总调用MyModule1的方法了，但是前提条件是MyModule2模块依赖MyModule1模块。&lt;/p&gt;

&lt;p&gt;ABP中建议使用启动配置(startup configuration)来配置模块&lt;/p&gt;

&lt;p&gt;定义模块的类会被自动注册为单例&lt;/p&gt;
</description>
<pubDate>Tue, 01 May 2018 15:15:00 +0000</pubDate>
<dc:creator>lcyhjx</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/lcyhjx/p/8978010.html</dc:identifier>
</item>
<item>
<title>CRM客户关系管理系统（八） - zhang_derek</title>
<link>http://www.cnblogs.com/derek1184405959/p/8976851.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/derek1184405959/p/8976851.html</guid>
<description>&lt;h2&gt;第八章、只读字段处理和filter_horizontal的实现&lt;/h2&gt;
&lt;h3&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt; 8.1.只读字段的处理&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;（1）kingadmin/admin_base.py&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt; kingadmin/admin_base.py&lt;/span&gt;

&lt;span&gt;class&lt;/span&gt;&lt;span&gt; BaseKingAdmin(object):

    list_display &lt;/span&gt;=&lt;span&gt; []
    list_filter &lt;/span&gt;=&lt;span&gt; []
    search_fields &lt;/span&gt;=&lt;span&gt; []
    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;只读&lt;/span&gt;
    readonly_fields = []
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;（2）crm/kingadmin.py&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1299879/201805/1299879-20180501172156723-768256328.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; （3）kingadmin/form_handle.py&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1299879/201805/1299879-20180501172754645-1290862066.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; （4）table_obj_change_component.html&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1299879/201805/1299879-20180501172941773-266104071.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;{#kingadmin/templates/kingadmin/table_obj_change_component.html#}

{% load kingadmin_tags %}
&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;form &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;form-horizontal&quot;&lt;/span&gt;&lt;span&gt; method&lt;/span&gt;&lt;span&gt;=&quot;post&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
    {% csrf_token %}
    {{ form_obj.errors }}
    {% for field in form_obj %}
    &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;form-group&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;label &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;col-sm-2 control-label&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;{{ field.label }}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;label&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;col-sm-10&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
            {{ field }}
            &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;span &lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;=&quot;color: red;&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;{{ field.errors.0 }}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
    {% endfor %}
    
    {% for field in admin_class.readonly_fields %}
    &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;form-group&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;label &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;col-sm-2 control-label&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;{{ field }}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;label&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;col-sm-10&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;{% get_obj_field_val form_obj field %}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
    {% endfor %}


    &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;form-group&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;col-sm-offset-11 col-sm-10&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
          &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;button &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;submit&quot;&lt;/span&gt;&lt;span&gt; class&lt;/span&gt;&lt;span&gt;=&quot;btn btn-info&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Save&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;button&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;form&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; （5）kingadmin_tags.py&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;@register.simple_tag
&lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; get_obj_field_val(form_obj,field):
    &lt;/span&gt;&lt;span&gt;'''&lt;/span&gt;&lt;span&gt;获取只读字段的值&lt;/span&gt;&lt;span&gt;'''&lt;/span&gt;

    &lt;span&gt;return&lt;/span&gt; getattr(form_obj.instance,field)
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;现在修改的时候没问题，但是在添加的时候会报错（提示那两个只读字段为空，因为设置成了readonly_field，添加的时候确实没有添加值）&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1299879/201805/1299879-20180501173245045-681437408.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;下面解决这个报错，在前后端都添加一个判断&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;（4）kingadmin/views.py&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1299879/201805/1299879-20180501175535934-381970388.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;（5）form_handle.py&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1299879/201805/1299879-20180501175642710-1198422240.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; （6）table_obj_change_component.html&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1299879/201805/1299879-20180501175741557-1708649379.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;现在增加和修改就都没问题了&lt;/p&gt;

&lt;h3&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;8.2.filter_horizontal的实现&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;默认咨询课程后台显示的样子&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1299879/201805/1299879-20180501180508106-395394251.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt; 添加filter_horizontal（数据量大的时候很方便）后显示的样子（可以批量添加，还可以在里面搜索）&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1299879/201805/1299879-20180501180742030-1644558031.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1299879/201805/1299879-20180501180910830-6548210.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; 下面我们在kingadmin中实现这个功能&lt;/p&gt;
&lt;p&gt; （1）kingadmin/admin_base.py&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt; kingadmin/admin_base.py&lt;/span&gt;

&lt;span&gt;class&lt;/span&gt;&lt;span&gt; BaseKingAdmin(object):

    list_display &lt;/span&gt;=&lt;span&gt; []
    list_filter &lt;/span&gt;=&lt;span&gt; []
    search_fields &lt;/span&gt;=&lt;span&gt; []
    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;只读&lt;/span&gt;
    readonly_fields =&lt;span&gt; []
    filter_horizontal &lt;/span&gt;= []
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;（2）crm/kingadmin.py&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1299879/201805/1299879-20180501201317093-1168203418.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; （3）kingadmin/kingadmin_tags.py&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;@register.simple_tag
&lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; get_available_m2m_data(field_name,admin_class):
    &lt;/span&gt;&lt;span&gt;'''&lt;/span&gt;&lt;span&gt;返回的是m2m字段关联表的所有数据&lt;/span&gt;&lt;span&gt;'''&lt;/span&gt;
    &lt;span&gt;#&lt;/span&gt;&lt;span&gt;获取字段的对象&lt;/span&gt;
    field_obj =&lt;span&gt; admin_class.model._meta.get_field(field_name)

    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;consult_courses = models.ManyToManyField('Course',verbose_name='咨询课程')&lt;/span&gt;
    &lt;span&gt;#&lt;/span&gt;&lt;span&gt;consult_courses是一个m2m，通过consult_courses对象获取到Course（也就是获取到所有咨询的课程）&lt;/span&gt;
    obj_list =&lt;span&gt; field_obj.related_model.objects.all()

    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; obj_list
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;（4）table_obj_change_component.html&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt; 在生成field的时候判断在不在filter_horizontal里面，在的话就用我们设置的select下拉框，不在就默认的&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt; {% get_available_m2m_data field.name admin_class as available_m2m_data %}  后面的的 as &lt;span&gt;availavle_m2m_data&lt;/span&gt; 是定义一个变量（里面存了自定义模板标签里面返回的数据 return &lt;span&gt;&lt;strong&gt;&lt;span&gt;obj_list&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;）&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;span&gt;　　　　因为在前端不能直接循环从后台返回的querysets数据（obj_list），所以前端在引用自定用模板标签的时候可以定义一个变量，里面就保存了所有后台传过来的数据&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;{#kingadmin/templates/kingadmin/table_obj_change_component.html#}

{% load kingadmin_tags %}
&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;form &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;form-horizontal&quot;&lt;/span&gt;&lt;span&gt; method&lt;/span&gt;&lt;span&gt;=&quot;post&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
    {% csrf_token %}
    {{ form_obj.errors }}
    {% for field in form_obj %}
    &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;form-group&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;label &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;col-sm-2 control-label&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;{{ field.label }}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;label&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;col-sm-10&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
            {% if field.name in admin_class.filter_horizontal %}
                &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;col-lg-5&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;select &lt;/span&gt;&lt;span&gt;multiple class=&quot;form-control&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
                        {% get_available_m2m_data field.name admin_class as available_m2m_data %}
                        {% for obj in available_m2m_data %}
                            &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;option &lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;=&quot;{{ obj.id }}&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;{{ obj }}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;option&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
                        {% endfor %}
                    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;select&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;col-lg-5&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
            {% else %}
                {{ field }}
            {% endif %}
            &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;span &lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;=&quot;color: red;&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;{{ field.errors.0 }}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
    {% endfor %}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt; 效果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1299879/201805/1299879-20180501202555330-394379228.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt; 右边添加一个select框（存放已选中的）&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; kingadmin_tags.py&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;@register.simple_tag
&lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; get_selected_m2m_data(field_name,form_obj,admin_class):
    &lt;/span&gt;&lt;span&gt;'''&lt;/span&gt;&lt;span&gt;返回已选的m2m数据&lt;/span&gt;&lt;span&gt;'''&lt;/span&gt;
    &lt;span&gt;#&lt;/span&gt;&lt;span&gt;获取被选中的数据&lt;/span&gt;
    selected_data =&lt;span&gt; getattr(form_obj.instance,field_name).all()

    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; selected_data
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;table_obj_change_component.html&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;col-lg-5&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;select &lt;/span&gt;&lt;span&gt;multiple class&lt;/span&gt;&lt;span&gt;=&quot;form-control&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
                        {% get_selected_m2m_data field.name form_obj admin_class as selected_m2m_data %}
                        {% for obj in selected_m2m_data %}
                            &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;option &lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;=&quot;{{ obj.id }}&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;{{ obj }}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;option&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
                        {% endfor %}
                    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;select&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;效果：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;左边不应该显示已被选中的咨询课程了&lt;/li&gt;
&lt;li&gt;右边是已选中的咨询课程&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1299879/201805/1299879-20180501204735828-1902114440.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt;&lt;strong&gt;&lt;span&gt;通过集合求差集过滤出左边已选咨询课程&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1299879/201805/1299879-20180501205622470-1472552357.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; kingadmin_tags.py&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;@register.simple_tag
&lt;/span&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; get_available_m2m_data(field_name,form_obj,admin_class):
    &lt;/span&gt;&lt;span&gt;'''&lt;/span&gt;&lt;span&gt;返回的是m2m字段关联表的所有数据&lt;/span&gt;&lt;span&gt;'''&lt;/span&gt;
    &lt;span&gt;#&lt;/span&gt;&lt;span&gt;获取字段的对象&lt;/span&gt;
    field_obj =&lt;span&gt; admin_class.model._meta.get_field(field_name)
    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;consult_courses = models.ManyToManyField('Course',verbose_name='咨询课程')&lt;/span&gt;
    &lt;span&gt;#&lt;/span&gt;&lt;span&gt;consult_courses是一个m2m，通过consult_courses对象获取到Course（也就是获取到所有咨询的课程）&lt;/span&gt;
    &lt;span&gt;#&lt;/span&gt;&lt;span&gt;所有咨询课程的集合&lt;/span&gt;
    obj_list =&lt;span&gt; set(field_obj.related_model.objects.all())
    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;选中的咨询课程集合&lt;/span&gt;
    selected_data =&lt;span&gt; set(getattr(form_obj.instance, field_name).all())
    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;返回的时候，集合求差集，得到未选中的咨询课程（左边）&lt;/span&gt;
    &lt;span&gt;return&lt;/span&gt; obj_list - selected_data
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;效果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1299879/201805/1299879-20180501210041074-1992895989.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;js触发事件&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;table_obj_change_component.html&lt;/p&gt;
&lt;p&gt;可以通过双击咨询课程，来选择&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;{#kingadmin/templates/kingadmin/table_obj_change_component.html#}

{% load kingadmin_tags %}
&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;form &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;form-horizontal&quot;&lt;/span&gt;&lt;span&gt; method&lt;/span&gt;&lt;span&gt;=&quot;post&quot;&lt;/span&gt;&lt;span&gt; onsubmit&lt;/span&gt;&lt;span&gt;=&quot;VerficationBeforeSubmit()&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
    {% csrf_token %}
    {{ form_obj.errors }}
    {% for field in form_obj %}
    &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;form-group&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;label &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;col-sm-2 control-label&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;{{ field.label }}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;label&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;col-sm-10&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
            {% if field.name in admin_class.filter_horizontal %}
                &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;col-lg-5&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;select &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;id_{{ field.name }}_from&quot;&lt;/span&gt;&lt;span&gt; multiple class&lt;/span&gt;&lt;span&gt;=&quot;form-control&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
                        {% get_available_m2m_data field.name form_obj admin_class as available_m2m_data %}
                        {% for obj in available_m2m_data %}
                            &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;option &lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;=&quot;{{ obj.id }}&quot;&lt;/span&gt;&lt;span&gt; ondblclick&lt;/span&gt;&lt;span&gt;=&quot;MoveSelectedOption(this,'id_{{ field.name }}_to')&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;{{ obj }}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;option&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
                        {% endfor %}
                    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;select&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;col-lg-5&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;select &lt;/span&gt;&lt;span&gt;tag&lt;/span&gt;&lt;span&gt;=&quot;selected_m2m&quot;&lt;/span&gt;&lt;span&gt; id&lt;/span&gt;&lt;span&gt;=&quot;id_{{ field.name }}_to&quot;&lt;/span&gt;&lt;span&gt; multiple class&lt;/span&gt;&lt;span&gt;=&quot;form-control&quot;&lt;/span&gt;&lt;span&gt; name&lt;/span&gt;&lt;span&gt;=&quot;{{ field.name }}&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
                        {% get_selected_m2m_data field.name form_obj admin_class as selected_m2m_data %}
                        {% for obj in selected_m2m_data %}
                            &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;option &lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;=&quot;{{ obj.id }}&quot;&lt;/span&gt;&lt;span&gt; ondblclick&lt;/span&gt;&lt;span&gt;=&quot;MoveSelectedOption(this,'id_{{ field.name }}_fromm')&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;{{ obj }}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;option&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
                        {% endfor %}
                    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;select&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
            {% else %}
                {{ field }}
            {% endif %}
            &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;span &lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;=&quot;color: red;&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;{{ field.errors.0 }}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
    {% endfor %}

    {% if not admin_class.form_add %}     &lt;/span&gt;&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;如果是修改表单&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;&lt;span&gt;
        {% for field in admin_class.readonly_fields %}
        &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;form-group&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;label &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;col-sm-2 control-label&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;{{ field }}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;label&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;col-sm-10&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;{% get_obj_field_val form_obj field %}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
        {% endfor %}
    {% endif %}

    &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;form-group&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;col-sm-offset-11 col-sm-10&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
          &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;button &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;submit&quot;&lt;/span&gt;&lt;span&gt; class&lt;/span&gt;&lt;span&gt;=&quot;btn btn-info&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Save&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;button&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;form&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;function&lt;/span&gt;&lt;span&gt; MoveSelectedOption(ele,target_id){

        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; new_target_id &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; $(ele).parent().attr(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; option &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;lt;option value='&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;+&lt;/span&gt;&lt;span&gt;$(ele).val() &lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;'ondblclick=MoveSelectedOption(this,'&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;new_target_id&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;')&amp;gt;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;+&lt;/span&gt;&lt;span&gt; $(ele).text() &lt;/span&gt;&lt;span&gt;+&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;lt;/option&amp;gt;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
        $(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt; target_id).append(option);
        $(ele).remove();
    }

    &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; VerficationBeforeSubmit() {

        $(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;select[tag] option&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;).prop(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;selected&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;);
    }
&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;现在保存的时候没有问题，但是 添加的时候会报错（因为添加的时候,值都是为空，获取不到filter_horizontal的值所有报错），下一章解决&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1299879/201805/1299879-20180501230616400-185227242.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;代码已同步     &lt;a href=&quot;https://github.com/derek-zhang123/PerfectCRM&quot;&gt;num8 只读字段的处理；filter_horizontal的实现&lt;/a&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

</description>
<pubDate>Tue, 01 May 2018 15:13:00 +0000</pubDate>
<dc:creator>zhang_derek</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/derek1184405959/p/8976851.html</dc:identifier>
</item>
<item>
<title>详解BLE 空中包格式—兼BLE Link layer协议解析 - iini</title>
<link>http://www.cnblogs.com/iini/p/8977806.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/iini/p/8977806.html</guid>
<description>&lt;p&gt;BLE有几种空中包格式？常见的PDU命令有哪些？PDU和MTU的区别是什么？DLE又是什么？BLE怎么实现重传的？BLE ACK机制原理是什么？希望这篇文章能帮你回答以上问题。&lt;/p&gt;

&lt;p&gt;虽然BLE空中包（packet）涉及BLE协议栈link layer，L2CAP，SMP和ATT等各层次，但link layer跟空中包格式关系最紧密，掌握了BLE packet的格式，就很容易理解BLE link layer协议的工作原理，因此文章取名“详解BLE空中包格式—兼BLE link layer协议解析”&lt;/p&gt;
&lt;h2&gt;BLE Packet格式&lt;/h2&gt;
&lt;p&gt;BLE链路层（link layer）只定义了一种packet（空中包）格式，如下所示：&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1366713/201805/1366713-20180501220625616-319688615.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;而且PDU（protocol data unit，协议数据单元）前两个字节固定为LL header（1个字节长）和payload length（1个字节长，又称data length），即上面的Packet可以展开为：&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1366713/201805/1366713-20180501220654580-1307125839.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt; &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;preamble&lt;/strong&gt;&lt;strong&gt;（前导帧）&lt;/strong&gt;为1个字节，根据Access Address第一个Bit，有两种取值情况：0x55或者0xAA（纯PHY层行为），如下所示：&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1366713/201805/1366713-20180501220718420-833878642.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;strong&gt;Access Address&lt;/strong&gt;用来标示接收者ID或者空中包身份，如前所示，BLE只有一种packet格式，根据Access Address的不同，又区分两种Packet类型：广播包和数据包：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;广播包&lt;/strong&gt;&lt;strong&gt;Access Address&lt;/strong&gt; &lt;strong&gt;固定为&lt;/strong&gt;&lt;strong&gt;0x8E89BED6&lt;/strong&gt;，广播包只能在广播信道（channel）上传输，即只能在&lt;strong&gt;37/38/39&lt;/strong&gt;&lt;strong&gt;信道上传输&lt;/strong&gt;。广播包发送给附近所有的observer（扫描者）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;数据包&lt;/strong&gt;&lt;strong&gt;Access Address&lt;/strong&gt;&lt;strong&gt;为一个&lt;/strong&gt;&lt;strong&gt;32bit&lt;/strong&gt;&lt;strong&gt;的随机值，&lt;/strong&gt;由Initiator生成。数据包，其实是数据信道上的空中包的简称，&lt;strong&gt;数据包只在数据信道上传输&lt;/strong&gt;，即除37/38/39之外的其余37信道（BLE总共占用40个信道）。每建立一次连接，重新生成一次Access address。数据包是给连接通信使用的，即用于master和slave之间通信的。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;CRC&lt;/strong&gt;为24bit，初始向量为：&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1366713/201805/1366713-20180501220737366-1372005780.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;蓝牙广播包&lt;/h2&gt;
&lt;p&gt;蓝牙广播包，全名蓝牙广播通道（channel）空中包，即在蓝牙广播通道（37/38/39信道（channel））上传输的空中包，为两种空中包的一种，其具体格式如下所示：&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1366713/201805/1366713-20180501220802861-406803904.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Advertising Header&lt;/strong&gt;即前述的LL header，长度为一个字节，其每bit定义如下所示：&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1366713/201805/1366713-20180501220819948-1931243325.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;PDU Type为3bit，具体定义如下。可以看出&lt;strong&gt;扫描&lt;/strong&gt;&lt;strong&gt;PDU&lt;/strong&gt;&lt;strong&gt;和发起连接PDU&lt;/strong&gt;&lt;strong&gt;都属于广播包。&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1366713/201805/1366713-20180501220837661-1157401939.png&quot; alt=&quot;&quot;/&gt; &lt;/p&gt;
&lt;p&gt;       注：&lt;strong&gt;CONNECT_REQ&lt;/strong&gt;&lt;strong&gt;也可写作CONNECT_IND&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;TxAdd/RxAdd，各占1bit，表示随后的Device Address字段代表的蓝牙MAC地址类型，值0代表Public地址，值1代表Random地址。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;Payload length&lt;/strong&gt;定义如下所示，所以广播包PDU最长37个字节。&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1366713/201805/1366713-20180501220903693-1463482332.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Device Address&lt;/strong&gt;，广播包中的强制字段，&lt;strong&gt;俗称蓝牙&lt;/strong&gt;&lt;strong&gt;MAC&lt;/strong&gt;&lt;strong&gt;地址&lt;/strong&gt;，如果是广播包，则是advertiser的MAC地址；如果是scan包或者连接请求包，则是scanner的MAC地址。蓝牙device address为&lt;strong&gt;6&lt;/strong&gt;&lt;strong&gt;个字节&lt;/strong&gt;，这样Advertising data最长为：&lt;strong&gt;37-6 = 31B&lt;/strong&gt;，这就是&lt;strong&gt;广播包数据最长只能&lt;/strong&gt;&lt;strong&gt;31&lt;/strong&gt;&lt;strong&gt;个字节的由来&lt;/strong&gt;。如前所述，device address分public和random两种，定义如下所示：&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1366713/201805/1366713-20180501221039361-578680930.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Random device address又有三种类型，定义如下所示：&lt;/p&gt;
&lt;p&gt;  &lt;img src=&quot;https://images2018.cnblogs.com/blog/1366713/201805/1366713-20180501221101958-748774067.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Advertising data&lt;/strong&gt;我会另写一篇文章来详述，这里就不再介绍了。&lt;/p&gt;
&lt;p&gt;如下为一个完整的真实的广播包示例，注意：&lt;strong&gt;BLE&lt;/strong&gt;&lt;strong&gt;空中包采用小端模式。&lt;/strong&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1366713/201804/1366713-20180428222348224-876399692.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;AAD6BE898E600E3B75AB2A02E102010504FF5900&lt;strong&gt;53&lt;/strong&gt;8EC7B2
&lt;ul&gt;&lt;li&gt;AA – 前导帧(preamble)&lt;/li&gt;
&lt;li&gt;D6BE898E – 访问地址(access address)&lt;/li&gt;
&lt;li&gt;60 – LL帧头字段(LL header)&lt;/li&gt;
&lt;li&gt;0E – 有效数据包长度(payload length)&lt;/li&gt;
&lt;li&gt;3B75AB2A02E1 – 广播者设备地址(advertiser address)&lt;/li&gt;
&lt;li&gt;02010504FF5900&lt;strong&gt;53 –&lt;/strong&gt; &lt;strong&gt;广播数据&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;8EC7B2 – CRC24值&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;注：上述广播包是蓝牙4.x格式，蓝牙5.0广播包除了包含上述格式外（记住：蓝牙5是跟蓝牙4.x兼容的！），还有一些新的定义，以后我也会写一篇关于蓝牙5广播的文章来专门阐述蓝牙5扩展广播包。&lt;/p&gt;
&lt;h2&gt;蓝牙数据通道空中包（数据包）&lt;/h2&gt;
&lt;p&gt;与蓝牙广播包相对应，蓝牙数据包是另一种BLE packet。蓝牙数据包是蓝牙数据信道空中包的简称，表示空中包只在蓝牙数据信道上传输，即除37/38/39之外的其他37信道。从格式上来说，蓝牙数据包分空包（empty packet）和普通数据包（data packet）两种，空包格式如下。&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1366713/201805/1366713-20180501221137088-2085206158.png&quot; alt=&quot;&quot;/&gt; &lt;/p&gt;
&lt;p&gt;由图可见，空包整个payload为空，故名空包。                      &lt;/p&gt;
&lt;p&gt;普通数据包格式如下所示：&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1366713/201805/1366713-20180501221300497-1341056700.png&quot; alt=&quot;&quot;/&gt; &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Data header&lt;/strong&gt;，即前述的LL header，在数据包中的定义如下所示：&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1366713/201805/1366713-20180501221322522-2083085698.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;&lt;em&gt;LLID&lt;/em&gt;&lt;/strong&gt;（2bits）， link layer ID，对LL PDU进行分类：LL data PDU和LL control PDU。也就是说，普通的数据信道空中包包含LL数据包和LL控制包两种，具体定义如下所示。请大家注意分清data channel packet（数据信道空中包）和LL data packet（LL数据包）的区别，如前所示data channel packet包含LL data packet和LL control packet，LL data packet只是data channel packet的一种。在不引起上下文歧义的时候，我们把他们统一称作“数据包”。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1366713/201805/1366713-20180501221347348-405766457.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Link layer支持如下control PDU：&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1366713/201805/1366713-20180501221403138-138702083.png&quot; alt=&quot;&quot;/&gt; &lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;&lt;em&gt;NESN/SN&lt;/em&gt;&lt;/strong&gt;，NESN和SN各占1bit。SN全称为sequence number，表示当前发送的packet编号。NESN，next expected sequence number，用来告知对方下一个期待的packet的编号。Link layer使用SN来告知对方这个packet是新数据包还是重传包，用NESN来告诉对方你之前发我的包已经收到了（相当于ACK的作用），我现在期待下一个新的数据包了，因此BLE没有专门的ACK包，它是通过NESN/SN来实现ACK和重传双重功能的。请参考如下表格，仔细揣摩NESN和SN是如何编码的，以同时完成ACK和重传功能。&lt;/li&gt;
&lt;/ul&gt;&lt;div align=&quot;center&quot;&gt;
&lt;table border=&quot;1&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; width=&quot;97&quot;&gt;
&lt;p&gt;&lt;strong&gt;空中包编号&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;108&quot;&gt;
&lt;p&gt;&lt;strong&gt;传输方向&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;86&quot;&gt;
&lt;p&gt;&lt;strong&gt;NESN&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;92&quot;&gt;
&lt;p&gt;&lt;strong&gt;SN&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;81&quot;&gt;
&lt;p&gt;&lt;strong&gt;NESN&lt;/strong&gt;&lt;strong&gt;ꞌ&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;71&quot;&gt;
&lt;p&gt;&lt;strong&gt;SN&lt;/strong&gt;&lt;strong&gt;ꞌ&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; width=&quot;97&quot;&gt;
&lt;p&gt;#1&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;108&quot;&gt;
&lt;p&gt;M -&amp;gt; S&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;86&quot;&gt;
&lt;p&gt;1&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;92&quot;&gt;
&lt;p&gt;0&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;81&quot;&gt;

&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;71&quot;&gt;

&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; width=&quot;97&quot;&gt;
&lt;p&gt;#2&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;108&quot;&gt;
&lt;p&gt;S -&amp;gt; M&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;86&quot;&gt;
&lt;p&gt;1&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;92&quot;&gt;
&lt;p&gt;1&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;81&quot;&gt;

&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;71&quot;&gt;

&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; width=&quot;97&quot;&gt;
&lt;p&gt;#3&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;108&quot;&gt;
&lt;p&gt;M -&amp;gt; S&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;86&quot;&gt;
&lt;p&gt;0&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;92&quot;&gt;
&lt;p&gt;1&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;81&quot;&gt;
&lt;p&gt;1&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;71&quot;&gt;
&lt;p&gt;0&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; width=&quot;97&quot;&gt;
&lt;p&gt;#4&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;108&quot;&gt;
&lt;p&gt;S -&amp;gt; M&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;86&quot;&gt;
&lt;p&gt;0&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;92&quot;&gt;
&lt;p&gt;0&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;81&quot;&gt;
&lt;p&gt;1&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;71&quot;&gt;
&lt;p&gt;1&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;
&lt;p&gt;我们来分析#3数据包，#3是master发给slave的，那么#3的NESN和SN是如何确定的呢？其实#3的NESN和SN是通过比较#1和#2的NESN/SN的值来确定的，Master把#1传完之后，会把#1包的NESN和SN记录下来，即表格右边的NESNꞌ和SNꞌ。然后Master会拿SNꞌ跟#2的NESN相比，两者不等，说明slave已经收到了#1包，并期待master发一个新的包给它，此时Master会把SNꞌ增1，形成#3包的SN，表示这个数据包是一个新包，然后发出去；两者相等，说明slave没有收到#1包，此时master需要重传。Master还会拿NESNꞌ跟#2的SN相比，两者相等，说明#2包为新包，然后Master会把NESNꞌ增1，形成#3包的NESN发出去，告诉slave我已经收到#2包了并期待你的下一个包；两者不等，说明#2包为重传包。注意：大家可以从上述表格发现一个规律，就是同一方向相邻的两个数据包，他们的NESN和SN与另一个包的NESN和SN是相反的，比如#3 NESN = #1 #NESN ，#3 SN = #1 #SN ，同样#2和#4 各自的NESN和SN是相互相反的。&lt;/p&gt;
&lt;p&gt;我们可以用下面的流程图来描述上述过程。&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1366713/201805/1366713-20180501221432562-871777355.png&quot; alt=&quot;&quot;/&gt; &lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;&lt;em&gt;MD&lt;/em&gt;&lt;/strong&gt;（1bit），more data，用来指示对方我还有数据包要传，请继续打开射频窗口准备接收。比如Nordic nRF51822一个connection interval可以发6个包或者更多的包（也就是说，一个connection event包含多个数据包交互），用的就是MD来实现的。以notify命令为例，设备（Server）notify第一个数据包并将MD置1，Client（比如手机）收到这个notify命令后，就知道Server还有数据包要传，此时手机可以继续发一个空包给设备，以让设备把第二个notify命令发过来，详情如下所示。注：Master为手机（Client），Slave为设备（Server）。&lt;/li&gt;
&lt;/ul&gt;&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1366713/201805/1366713-20180501221501180-492948652.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt; &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Payload Length or Data Length&lt;/strong&gt;，BT4.0/4.1定义如下所示，这就是蓝牙4.0/4.1一个包只能传20个字节的根源。&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1366713/201805/1366713-20180501221519397-1617265318.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;BT4.2之后，Payload length 8 bits全部用来表示长度，这样的话，payload size最大可达251字节（255 – MIC size）。BLE连接建立之后，可以动态更改data length长度（默认为27字节），这个特性叫做&lt;strong&gt;Data Length Extension&lt;/strong&gt;&lt;strong&gt;（DLE&lt;/strong&gt;&lt;strong&gt;）&lt;/strong&gt;，DLE是通过Link layer命令：LL_LENGTH_REQ和LL_LENGTH_RSP来实现的。Data length直接跟蓝牙芯片的射频能力有关，像Nordic的nRF51822只支持BT4.1的Data length，就是因为PHY层已经做死了，无法扩展，但Nordic最新的nRF52832和nRF52840，就都支持DLE，即data length最大可到251字节。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;L2CAP length&lt;/strong&gt;，2字节长度，表示后面information payload的长度，information payload最大长度除了受这个L2CAP length字段约束，同时还受MTU的限制。MTU，Maximum Transmission Unit，是ATT层与L2CAP层可以交互的最大数据长度，或者说是Client与Server可以交互的最大长度。&lt;/p&gt;
&lt;p&gt;总结一下，蓝牙spec里面定义了2个长度字段：LL data length和L2CAP length，同时ATT层还定义了一个MTU，以限制ATT PDU最大长度。LL data length可以通过LL_LENGTH_REQ和LL_LENGTH_RSP动态改变，MTU size则可以通过后面要讲到的Exchange MTU Request和Exchange MTU Response来改变，而L2CAP length无法动态改变，也就是说不能超过65535。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;L2CAP CID&lt;/strong&gt;，2字节长度，逻辑通道的ID，BLE使用固定的通道编号，定义如下所示：&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1366713/201805/1366713-20180501221542406-1709582830.png&quot; alt=&quot;&quot;/&gt; &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;BLE L2CAP Signaling Channel&lt;/em&gt;&lt;/strong&gt;支持的PDU命令只有三个：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Command reject&lt;/li&gt;
&lt;li&gt;Connection parameter update request，更新连接参数，比如最小连接间隔，最大连接间隔，slave latency等&lt;/li&gt;
&lt;li&gt;Connection parameter update response，接受或者拒绝上面的请求&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;&lt;em&gt;Security Manager Protocol&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;&lt;em&gt;（SMP&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;&lt;em&gt;）&lt;/em&gt;&lt;/strong&gt;用来实现配对和密钥分发的，SMP支持如下PDU命令：&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1366713/201805/1366713-20180501221608472-685507063.png&quot; alt=&quot;&quot;/&gt; &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Attribute Protocol&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;&lt;em&gt;（ATT&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;&lt;em&gt;）&lt;/em&gt;&lt;/strong&gt;，就是我们经常用到的应用层，应用数据就跟在ATT命令后面，ATT支持如下命令列表：&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1366713/201805/1366713-20180501221626184-1521124503.png&quot; alt=&quot;&quot;/&gt; &lt;/p&gt;
&lt;p&gt;如下为一个完整的真实的数据包示例，注意：&lt;strong&gt;BLE&lt;/strong&gt;&lt;strong&gt;空中包采用小端模式。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1366713/201804/1366713-20180428222526803-270666623.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;AAAB5D65501E08040004001B130053D550F6
&lt;ul&gt;&lt;li&gt;AA – 前导帧(preamble)&lt;/li&gt;
&lt;li&gt;0x50655DAB – 访问地址(access address)&lt;/li&gt;
&lt;li&gt;1E – LL帧头字段(LL header)&lt;/li&gt;
&lt;li&gt;08 – 有效数据包长度(payload length)&lt;/li&gt;
&lt;li&gt;04000400 – ATT数据长度，以及L2CAP通道编号&lt;/li&gt;
&lt;li&gt;1B – notify command&lt;/li&gt;
&lt;li&gt;0x0013 – 电量数据handle&lt;/li&gt;
&lt;li&gt;0x53 – 真正要发送的电量数据&lt;/li&gt;
&lt;li&gt;0xF650D5 – CRC24值&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
<pubDate>Tue, 01 May 2018 14:19:00 +0000</pubDate>
<dc:creator>iini</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/iini/p/8977806.html</dc:identifier>
</item>
</channel>
</rss>