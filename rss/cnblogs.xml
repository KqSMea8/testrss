<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>Hibernate框架学习之注解映射实体类 - Single_Yam</title>
<link>http://www.cnblogs.com/yangming1996/p/7826595.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/yangming1996/p/7826595.html</guid>
<description>&lt;p&gt;     前面的相关文章中，我们已经介绍了使用XML配置文件映射实体类及其各种类型的属性的相关知识。然而不论是时代的潮流还是臃肿繁杂的配置代码告诉我们，注解配置才是更人性化的设计，于是学习了基本的映射实体类的基本注解，此处做一点总结，后续文章将陆续更新使用注解的方式管理配置各种映射关联关系。本篇主要涉及以下内容：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;使用最基本的注解映射一个实体类&lt;/li&gt;
&lt;li&gt;使用注解映射属性&lt;/li&gt;
&lt;li&gt;使用注解映射主键&lt;/li&gt;
&lt;li&gt;其他特殊类型的属性映射&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;一、使用最基本的注解映射一个实体类&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;@Entity
@Table(name = &quot;userInfo&quot;)
public class UserInfo {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private int id;
    private String name;
    //省略getter和setter方法
}&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code&gt;//在hibernate.cfg.xml中添加实体类
//这样hibernate就会根据配置文件去查找该实体类并做映射操作
&amp;lt;mapping class=&quot;User_Annotation.UserInfo&quot;/&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这就是映射一个最简单的实体类所用到的最基本的注解。其中，&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;@Entity：指定当前被修饰的类是一个实体类，用于映射到数据库中的表。&lt;/li&gt;
&lt;li&gt;@Table(name = &quot;userInfo&quot;)：详细指定了该类映射到数据库中的哪张表，这里映射到userInfo表。&lt;/li&gt;
&lt;li&gt;@Id：指定被修饰的属性将映射到数据表的主键列。&lt;/li&gt;
&lt;li&gt;@GeneratedValue(strategy = GenerationType.IDENTITY)：该注解指定了主键的生成策略，一般不单独出现，这里指定了主键自增的策略。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20171111112149316?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzUzMjY3MTg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;这里写图片描述&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;二、使用注解映射普通属性&lt;/strong&gt;&lt;br/&gt;对于实体类中属性的映射，&lt;a href=&quot;mailto:一般我们使用@Column进行修饰&quot;&gt;一般我们使用@Column进行修饰&lt;/a&gt;。该注解有很多属性：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;name：指定该属性映射到数据表中对应的名称&lt;/li&gt;
&lt;li&gt;nullable：指定该属性映射的数据表中列是否可以为null，默认为true&lt;/li&gt;
&lt;li&gt;unique：指定该属性映射到数据表中的列是否具有唯一约束&lt;/li&gt;
&lt;li&gt;length：指定该属性映射到数据表中的列所能保存数据的最大长度，默认是255&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;默认情况下，&lt;a href=&quot;mailto:我们不使用@Column修饰属性的时候&quot;&gt;我们不使用@Column修饰属性的时候&lt;/a&gt;，hibernate会自动以该属性的名称映射到数据表中的列。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;mailto:**我们也可以使用注解@Transient修饰属性**&quot;&gt;**我们也可以使用注解@Transient修饰属性**&lt;/a&gt;，它指明了该属性不会被映射到数据表中某一列，而只是作为一个属性被定义在实体类中。例如：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;@Entity
@Table(name = &quot;userInfo&quot;)
public class UserInfo {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private int id;
    private String name;
    @Transient
    private int age;
    //省略getter，setter方法
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;看看hibernate为我们生成的sql语句：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20171111113741343?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzUzMjY3MTg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;这里写图片描述&quot;/&gt;&lt;/p&gt;
&lt;p&gt;显然，我们age属性并没有被映射到userinfo表中。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;对于枚举类型的属性，&lt;a href=&quot;mailto:我们可以使用@Enumerated注解进行修饰&quot;&gt;我们可以使用@Enumerated注解进行修饰&lt;/a&gt;。&lt;/strong&gt;&lt;br/&gt;在某些特殊情况下，有时我们的实体类属性会被定义为枚举类型，那么对于这种数据库中并无法对应的Java类型，该如何映射呢？&lt;a href=&quot;mailto:Hibernate中提供@Enumerated注解来用于我们映射枚举类型&quot;&gt;Hibernate中提供@Enumerated注解来用于我们映射枚举类型&lt;/a&gt;，该注解提供一个value属性，该属性可以取两个值：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;EnumType.STRING：该枚举类型的属性映射到数据表的字段的类型是字符串型&lt;/li&gt;
&lt;li&gt;EnumType.ORDINAL：该枚举类型的属性映射到数据表的字段的类型是整数类型&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;例如：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;//定义一个枚举类型
public enum Season {
    春季, 夏季, 秋季, 冬季
}&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code&gt;@Entity
@Table(name = &quot;userInfo&quot;)
public class UserInfo {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private int id;
    private String name;

    @Enumerated(EnumType.STRING)
    private Season season;
    //省略getter，setter方法
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;看看我们的userinfo表：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20171111152007672?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzUzMjY3MTg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;这里写图片描述&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;mailto:而当我们@Enumerated&quot;&gt;而当我们@Enumerated&lt;/a&gt;(EnumType.ORDINAL)修饰属性的时候，那么Hibernate为我们生成的sql语句是：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20171111211611026?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzUzMjY3MTg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;这里写图片描述&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这两种情况下，数据表中的season字段一种保存的是枚举类型的具体值，一种保存的是枚举值对应的序号。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;mailto:**使用@Temporal注解映射日期时间类型*&quot;&gt;**使用@Temporal注解映射日期时间类型*&lt;/a&gt;*&lt;br/&gt;对于Java来说，表示时间的两个类库，Java.util.Date和java.util.Calendar。而对于数据库而言，表示时间的类型就有很多，例如：date，time，datetime，timestamp等。&lt;a href=&quot;mailto:如何准确的指定最终的映射情况就是我们的@Temporal注解的作用&quot;&gt;如何准确的指定最终的映射情况就是我们的@Temporal注解的作用&lt;/a&gt;。@Temporal有一个value属性，可以取以下的一些值：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;TemporalType.DATE：对应于数据库中的date类型&lt;/li&gt;
&lt;li&gt;TemporalType.TIME：对应于数据库中的time类型&lt;/li&gt;
&lt;li&gt;TemporalType.TIMESTAMP：对应于数据库中的timestamp类型&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;例如：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;@Temporal(TemporalType.DATE)
private Date date;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;上述代码指定了Java.util.Date类型属性映射到数据库中的date类型字段。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;三、使用注解映射主键属性&lt;/strong&gt;&lt;br/&gt;最简单的情况下，&lt;a href=&quot;mailto:我们使用注解@Id标识实体类中的某个属性&quot;&gt;我们使用注解@Id标识实体类中的某个属性&lt;/a&gt;，那么该属性将会被hibernate映射到数据库主键字段，并且无需指定任何属性值。&lt;a href=&quot;mailto:使用使用@GeneratedValue指定主键的生成策略&quot;&gt;使用使用@GeneratedValue指定主键的生成策略&lt;/a&gt;，通过它的strategy属性来指定具体的主键生成方案，该属性可以取如下几个值：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;GenerationType.AUTO：hibernate默认为该值，它指明了hibernate自动根据底层数据库选择适当的生成策略&lt;/li&gt;
&lt;li&gt;GenerationType.IDENTITY：适用于MySQL，SQLserver的主键自增长策略&lt;/li&gt;
&lt;li&gt;GenerationType.SEQUENCE：适用于Oracle的子串策略&lt;/li&gt;
&lt;li&gt;GenerationType.TABLE：基于辅助表的生成主键策略&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;如果不是使用Oracle做数据库的话，一般我们会使用IDENTITY作为默认的主键生成策略。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;mailto:联合主键的映射可以通过多个@Id进行修饰即可&quot;&gt;联合主键的映射可以通过多个@Id进行修饰即可&lt;/a&gt;，但要求该实体类必须继承 java.io.Serializable并尽可能的重写Object的两个方法，hashCode和equals，因为多个属性唯一确定一条记录，自然需要比较属性的值。例如：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;@Entity
@Table(name = &quot;userInfo&quot;)
public class UserInfo implements Serializable {
    @Id
    private int id;
    @Id
    private String name;
    //省略getter，setter方法
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;看看hibernate为我们创建的表结构：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20171112193656354?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzUzMjY3MTg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;这里写图片描述&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;四、特殊属性的映射&lt;/strong&gt;&lt;br/&gt;这里的特殊属性指的是实体类中属性类型非常规的基本类型、包装类型、引用类型，而是类似于集合类型、自定义类型等。我们首先看对于集合类型的属性映射情况。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1、映射集合类型的属性&lt;/strong&gt;&lt;br/&gt;在hibernate中，所有的集合类型属性都会被单独映射到一张表中，无论是List，Set或者Map都会对应于一张新表。首先我们看List的映射，在详细介绍之前，我们先完整的看看list的映射情况。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;@Entity
@Table(name = &quot;userInfo&quot;)
public class UserInfo implements Serializable {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private int id;
    private String name;

    @ElementCollection(targetClass = String.class)
    @CollectionTable(name = &quot;address&quot;,joinColumns = @JoinColumn(name = &quot;user_id&quot;))
    @OrderColumn(name = &quot;list_id&quot;)
    @Column(name = &quot;address&quot;)
    private List address;
    //省略getter，setter方法
}&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code&gt;//通过实体类实例向数据表中插入数据
UserInfo userInfo = new UserInfo();
userInfo.setName(&quot;single&quot;);
List&amp;lt;String&amp;gt; list = new ArrayList&amp;lt;String&amp;gt;();
list.add(&quot;NanJin&quot;);
list.add(&quot;XinJiang&quot;);
list.add(&quot;SiChuan&quot;);
list.add(&quot;ZheJiang&quot;);
list.add(&quot;NanTong&quot;);
userInfo.setAddress(list);

session.save(userInfo);&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;看看两张表：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20171112201732193?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzUzMjY3MTg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;这里写图片描述&quot;/&gt;&lt;/p&gt;
&lt;p&gt;现在，我们再来看看所用到的几个注解。@ElementCollection注解用于修饰一个集合类型的属性，targetClass 指定了该集合类型的对应的泛型类型，我们这里指定了String类型，那么hibernate底层会默认构建一个ArrayList来存放所有的集合元素并且每个元素都限定为String类型。&lt;/p&gt;
&lt;p&gt;@CollectionTable注解用于配置为集合属性生成的那张新表的基本信息，name 指定新表的表名，&lt;a href=&quot;mailto:joinColumns的值是一个注解@JoinColumn&quot;&gt;joinColumns的值是一个注解@JoinColumn&lt;/a&gt;，该注解专门用于配置外键列，这里我们给他命名为user_id，该字段是address表的值依赖于userinfo表的id主键列的值。&lt;/p&gt;
&lt;p&gt;@OrderColumn注解用于配置有序集合的序号，由于list是有序的集合，通过该注解将会在address表中增加一个字段保存各个元素在集合中的序号。&lt;/p&gt;
&lt;p&gt;@Column注解则指向我们集合元素所在的列，可以配置他们列名等。&lt;/p&gt;
&lt;p&gt;总的来说，一旦hibernate发现实体类中有集合类型的属性需要映射，那么就会为集合属性单独映射出一张表，该表至少有两个字段，一个字段依赖于主表的id字段值，在新表中相同该字段值的记录共同组合成为实体类中的集合属性的值，一个字段保存具体的集合元素的值信息。而对于有序集合来说，还应该包含一个字段用于保存每个集合元素在集合中的序号，该序号字段和第一个外键依赖字段组合成新表的联合主键，唯一标识一条记录。&lt;/p&gt;
&lt;p&gt;在hibernate的管理下，当有数据添加进userinfo表的时候，hibernate将拿到该实体类实例的集合属性的值，并连带该实例的id一起插入到新表中。当然，当我们想要获取一个userinfo实例的时候，hibernate也会为我们查询address表，并注入到userinfo实例的集合属性中，默认的注入模式是懒加载。&lt;/p&gt;
&lt;p&gt;接着，我们看Set集合的映射情况。Set是一种无序并不重复的集合。具体的配置如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;@Entity
@Table(name = &quot;userInfo&quot;)
public class UserInfo implements Serializable {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private int id;
    private String name;
    @ElementCollection(targetClass = String.class)
    @CollectionTable(name = &quot;address&quot;,joinColumns = @JoinColumn(name = &quot;user_id&quot;,nullable = false))
    @Column(name = &quot;value&quot;,nullable = false)
    private Set address;
    //省略getter，setter方法
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;相比List，Set由于是无序的，那么自然是没有索引序列，&lt;a href=&quot;mailto:所以无需配置@OrderColumn&quot;&gt;所以无需配置@OrderColumn&lt;/a&gt;，但是它要求所有元素必须不可重复，那么通过制定nullable为false即可。&lt;br/&gt;看看表的生成情况：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20171112210529271?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzUzMjY3MTg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;这里写图片描述&quot;/&gt;&lt;/p&gt;
&lt;p&gt;对于像set一样的无序集合，新表的主键有user_id和value列联合作为主键，可以保证唯一确定一条数据记录。&lt;/p&gt;
&lt;p&gt;最后，我们看看一下Map的映射情况，先看代码：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;@Entity
@Table(name = &quot;userInfo&quot;)
public class UserInfo implements Serializable {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private int id;
    private String name;
    @ElementCollection(targetClass = String.class)
    @MapKeyClass(Integer.class)
    @CollectionTable(name = &quot;address&quot;,joinColumns = @JoinColumn(name = &quot;user_id&quot;))
    @Column(name = &quot;value&quot;)
    private Map map;
    //省略getter，setter方法
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;具体的表生成情况：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20171112211616322?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzUzMjY3MTg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;这里写图片描述&quot;/&gt;&lt;/p&gt;
&lt;p&gt;对于map这种键值对集合，targetClass 用于指定value值的类型，&lt;a href=&quot;mailto:而@MapKeyClass则用于指定key值的类型&quot;&gt;而@MapKeyClass则用于指定key值的类型&lt;/a&gt;，其他的几乎没什么变化，对于map集合映射出来的表，user_id和map的key字段将联合组成此表的主键，唯一确定一条记录。&lt;/p&gt;
&lt;p&gt;对于性能的要求，hibernate不推荐实体类属性使用数组类型，建议优先使用集合类型。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2、组件属性映射&lt;/strong&gt;&lt;br/&gt;所谓的组件类型就是指我们自定义的类类型，在某些情况下，实体类中包含自定类型也是很常见的，那么对于我们自定义的类型该如何来映射到数据表呢？Hibernate的映射策略很简单，对于组件中的每个属性都映射出一个列，也就是相当于把组件给拆解了。例如：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;//首先定义一个组件类
@Embeddable
public class Disposition {
    private String mood;
    private String hobby;
    //省略getter，setter方法
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;我们定义了一个类，&lt;a href=&quot;mailto:Disposition并使用@Embeddable注解修改该类&quot;&gt;Disposition并使用@Embeddable注解修改该类&lt;/a&gt;。当Hibernate对整个类路径进行扫描的时候，就会注册该类为一个组件类型，那么当我们在实体类中引用该类型的时候，hibernate就能找到相应的组件类型。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;@Entity
@Table(name = &quot;userInfo&quot;)
public class UserInfo implements Serializable {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private int id;
    private String name;
    
    private Disposition disposition;
    //省略getter，setter方法
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;最后生成的数据表结构如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20171113111309923?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzUzMjY3MTg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;这里写图片描述&quot;/&gt;&lt;/p&gt;
&lt;p&gt;组件类的每个属性都被映射到userinfo表中了。当我们通过实体类实例向数据表中插入数据的时候，hibernate会将组件类实例拆分出来的各个属性插入到对应的表字段。当我们通过数据表获取userinfo实例的时候，hibernate判断userinfo中有一个组件类属性，于是创建组件类实例并装载相应的数据表中的数值赋值给userinfo的组件类型属性。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3、集合属性为组件类型的表级映射&lt;/strong&gt;&lt;br/&gt;集合中的元素除了可以是基本类型，包装类型以外，还可以是组件类型，也就是复合类型。那么对于他们的映射却稍显不同，例如：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;//定义一个复合类型
@Embeddable
public class Person {
    private String name;
    private int age;
    private String address;
    //省略getter，setter方法
}&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code&gt;@Entity
@Table(name = &quot;userInfo&quot;)
public class UserInfo implements Serializable {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private int id;
    private String name;

    @ElementCollection(targetClass = Person.class)
    @CollectionTable(name = &quot;persons&quot;,joinColumns = @JoinColumn(name = &quot;user_id&quot;))
    @OrderColumn(name = &quot;list_index&quot;)
    private List list;
    //省略getter，setter方法
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;显然，在实体类中的集合类型属性的映射，大体上是一样的。首先我们通过targetClass 属性指定集合中的元素类型，通过CollectionTable配置为集合生成的新表的基本信息，通过OrderColumn指定索引列。当然，这里我们不需要使用Column注解配置集合元素本身在数据表中的字段名，因为数据库中没有相对应的类型存储。Hibernate选择将集合中的复合类型拆分成多个字段，其他的和普通的集合属性映射并没有太大变化。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20171113151608189?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzUzMjY3MTg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;这里写图片描述&quot;/&gt;&lt;/p&gt;
&lt;p&gt;只不过对于普通的集合类型映射来说，图中红色框中内容仅仅是一个字段，而对于复合类型，由于数据库中并没有相对应的类型来存储，所以就需要拆分成基本的字段类型。&lt;/p&gt;
&lt;p&gt;至此，使用注解方法来配置实体类的基本内容已经简单介绍完了，还有很多相对而言并不常用的基于Hibernate自身的注解并没有做介绍，待作者深入使用后再做相关补充，总结不到之处，望指出！&lt;/p&gt;
</description>
<pubDate>Mon, 13 Nov 2017 07:37:00 +0000</pubDate>
<dc:creator>Single_Yam</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/yangming1996/p/7826595.html</dc:identifier>
</item>
<item>
<title>JMeter基础教程3：脚本录制篇 - lovesoo</title>
<link>http://www.cnblogs.com/lovesoo/p/7826330.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/lovesoo/p/7826330.html</guid>
<description>&lt;div readability=&quot;8.9086294416244&quot;&gt;对于一些JMeter初学者来说，录制脚本可能是最容易掌握的技能之一。虽然我不建议录制性能脚本（因为录制的脚本比较混乱，必须要通过二次处理才可正常使用），但有时做总比不做要好，是吧？下面我们详细介绍使用JMeter录制脚本的方法（也可以参考上篇《&lt;a href=&quot;http://www.cnblogs.com/lovesoo/p/7809260.html&quot; target=&quot;_blank&quot;&gt;使用Fiddler录制Jmeter性能测试脚本&lt;/a&gt;》）。&lt;/div&gt;
&lt;p&gt;运行环境为Windows 10，JMeter版本为3.3。&lt;/p&gt;
&lt;p&gt;我们还是以访问百度首页，并完成一次搜索为例。&lt;/p&gt;

&lt;p&gt;JMeter录制脚本原理是配置一个HTTP代理，然后浏览器通过这个代理访问测试页面从而完成脚本录制。&lt;/p&gt;
&lt;h2&gt;1.1 打开JMeter，并新增一个线程组（选中“测试计划”，右键选择“添加” -&amp;gt; “Threads (Users)” -&amp;gt; “线程组”）&lt;/h2&gt;
&lt;div&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/445074/201711/445074-20171113144949656-119242699.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;h2&gt;1.2 添加“HTTP代理服务器”&lt;/h2&gt;
&lt;p&gt;选中“工作台”，右键选择“添加” -&amp;gt; &quot;非测试元件&quot; -&amp;gt; &quot;HTTP代理服务器&quot;&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/445074/201711/445074-20171113144957906-434981996.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;h2&gt;1.3 配置HTTP代理服务器&lt;/h2&gt;
&lt;p&gt;1) 打开新增的HTTP代理服务器，修改目标控制器为”测试计划 &amp;gt; 线程组“&lt;/p&gt;
&lt;p&gt;2) 修改分组为“每个组放入一个新的控制器”&lt;/p&gt;
&lt;p&gt;3) 还根据需要可以修改代理端口号（默认8888）等配置&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/445074/201711/445074-20171113145007187-2131778115.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;p&gt;4) 选择“Requests Filtering”，在“包含模式”中填入“.+(baidu\.com).+”用以过滤非baidu.com的请求&lt;/p&gt;
&lt;p&gt;5) 同时在“排除模式”中填入“(?i).*\.(bmp|css|js|gif|ico|jpe?g|png|swf|woff|woff2|htm|html).”用以过滤js、图片、html等资源文件请求&lt;/p&gt;
&lt;p&gt;6) 最后点击“启动”按钮启动HTTP代理&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/445074/201711/445074-20171113145017999-680972818.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;

&lt;h2&gt;2.1 配置代理&lt;/h2&gt;
&lt;p&gt;打开IE浏览器，点击右上方工具按钮，依次选择“Internet选项” -&amp;gt; “连接” -&amp;gt; “局域网设置” -&amp;gt; “代理服务器”，勾选“为LAN使用代理服务器”，输入本地IP地址127.0.0.1及端口号8888，点击确定保存。&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/445074/201711/445074-20171113145028406-509535666.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;h2&gt;2.2 访问页面&lt;/h2&gt;
&lt;div readability=&quot;9&quot;&gt;使用IE浏览器打开百度首页&lt;a href=&quot;https://www.baidu.com/&quot;&gt;https://www.baidu.com/&lt;/a&gt;，并进行一次搜索（如搜索lovesoo）；若页面提示“此网站的安全证书存在问题”，点击“继续浏览此网站(不推荐) ”即可。&lt;/div&gt;
&lt;div&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/445074/201711/445074-20171113145038562-1265119496.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;

&lt;p&gt;现在我们打开JMeter查看我们刚才录制的脚本，可以看到JMeter录制了整个流程的请求，包括开始的搜索建议，访问首页请求，获取搜索历史及搜索等请求：&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/445074/201711/445074-20171113145047327-2114857011.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;p&gt;此时，我们需要对这些HTTP请求做一些删除操作，只保留访问首页及搜索的请求：&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/445074/201711/445074-20171113145053749-1434091527.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;p&gt;然后，我们添加“查看结果树”及“聚合报告”，点击运行即可查询相应的搜索结果：&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/445074/201711/445074-20171113145100609-1578858423.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;p&gt;最后，我们还可以对接口进行响应的参数化及断言，用以校验HTTP请求返回值是否正确：&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/445074/201711/445074-20171113145128359-1301247802.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;


</description>
<pubDate>Mon, 13 Nov 2017 07:00:00 +0000</pubDate>
<dc:creator>lovesoo</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/lovesoo/p/7826330.html</dc:identifier>
</item>
<item>
<title>canvas图表(1) - 柱状图 - Jeff.Zhong</title>
<link>http://www.cnblogs.com/edwardloveyou/p/7826270.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/edwardloveyou/p/7826270.html</guid>
<description>&lt;p&gt;原文地址：&lt;a href=&quot;http://jeffzhong.space/2017/11/12/chartbar/&quot;&gt;canvas图表(1) - 柱状图&lt;/a&gt;&lt;br/&gt;前几天用到了图表库，其中百度的ECharts，感觉做得最好，看它默认用的是canvas，canvas图表在处理大数据方面比svg要好。那我也用canvas来实现一个图表库吧，感觉不会太难，先实现个简单的柱状图。&lt;/p&gt;
&lt;p&gt;效果请看：&lt;em&gt;&lt;a href=&quot;http://jeffzhong.space/sites/demo/dist/bar.html&quot;&gt;柱状图https://edwardzhong.github.io/sites/demo/dist/bar.html&lt;/a&gt;&lt;/em&gt;&lt;br/&gt;&lt;img src=&quot;http://oncse3u6r.bkt.clouddn.com/bar.jpg&quot; alt=&quot;it&quot;/&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;主要功能点包括：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;文本的绘制&lt;/li&gt;
&lt;li&gt;XY轴的绘制；&lt;/li&gt;
&lt;li&gt;数据分组绘制；&lt;/li&gt;
&lt;li&gt;数据动画的实现；&lt;/li&gt;
&lt;li&gt;鼠标事件的处理。&lt;/li&gt;
&lt;/ol&gt;&lt;h2 id=&quot;使用方式&quot;&gt;使用方式&lt;/h2&gt;
&lt;p&gt;首先我们看一下使用方式，参考了部分ECharts的使用方式，先传入要显示图表的html标签，接着调用init，初始化的同时传入数据。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;80&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;    &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; con&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;getElementById&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'container'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; chart&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;Bar&lt;/span&gt;(con)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;va&quot;&gt;chart&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;init&lt;/span&gt;(&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'全年降雨量柱状图'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;xAxis&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:{&lt;/span&gt;&lt;span class=&quot;co&quot;&gt;// x轴&lt;/span&gt;
            &lt;span class=&quot;dt&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;[&lt;span class=&quot;st&quot;&gt;'1月'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'2月'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'3月'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'4月'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'5月'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'6月'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'7月'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'8月'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'9月'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'10月'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'11月'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'12月'&lt;/span&gt;]
        &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;yAxis&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:{&lt;/span&gt;&lt;span class=&quot;co&quot;&gt;//y轴&lt;/span&gt;
            &lt;span class=&quot;dt&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'水量'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;dt&quot;&gt;formatter&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'{value} ml'&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;series&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;[&lt;span class=&quot;co&quot;&gt;//分组数据&lt;/span&gt;
            &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;dt&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'东部降水量'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;dt&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;[&lt;span class=&quot;dv&quot;&gt;62&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;17&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;45&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;56&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;19&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;38&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;120&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;56&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;130&lt;/span&gt;]
            &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
            &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;dt&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'西部降水量'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;dt&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;[&lt;span class=&quot;dv&quot;&gt;52&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;17&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;25&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;60&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;39&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;19&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;48&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;70&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;56&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;8&lt;/span&gt;]
            &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
            &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;dt&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'南部降水量'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;dt&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;[&lt;span class=&quot;dv&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;17&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;25&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;27&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;39&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;38&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;56&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;90&lt;/span&gt;]
            &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
            &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;dt&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'hsla(270,80%,60%,1)'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;dt&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'北部降水量'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;dt&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;[&lt;span class=&quot;dv&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;17&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;25&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;39&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;49&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;38&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;60&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;56&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;]
            &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
        ]
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;图表基类，我们后面还要写饼图，折线图，所以把公共的部分抽出来。注意canvas.style.width与canvas.width是不一样的，前者会拉伸图形，后者才是我们正常用的，不会拉伸图形。在这里这样写先扩大再缩小是为了解决canvas绘制文字时模糊的问题。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;    &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; Chart&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;at&quot;&gt;constructor&lt;/span&gt;(container)&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;container&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;container&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;canvas&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;createElement&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'canvas'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;canvas&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;getContext&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'2d'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;W&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;H&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;600&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;120&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;paddingTop&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;legend&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;[]&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;series&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;[]&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;co&quot;&gt;//通过缩小一倍，解决字体模糊问题&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;canvas&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;W&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;canvas&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;H&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;canvas&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;style&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;width&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;W&lt;/span&gt;/&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'px'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;canvas&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;style&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;height&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;H&lt;/span&gt;/&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'px'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;柱状图初始化，调用es6中的Object.assign(this,opt)，这个相当于JQ中的extend方法，把属性复制到当前实例。同时还建了个tip属性，这是个html标签，后面显示数据信息用。接着绘制图形，然后绑定鼠标事件。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; Bar &lt;span class=&quot;kw&quot;&gt;extends&lt;/span&gt; Chart&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;at&quot;&gt;constructor&lt;/span&gt;(container)&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;super&lt;/span&gt;(container)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;xAxis&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;={};&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;yAxis&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;[]&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;animateArr&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;[]&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;at&quot;&gt;init&lt;/span&gt;(opt)&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;va&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;assign&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;opt)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;op&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;container&lt;/span&gt;)&lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;container&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;style&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'relative'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;tip&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;createElement&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'div'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;tip&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;style&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;cssText&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'display: none; position: absolute; opacity: 0.5; background: #000; color: #fff; border-radius: 5px; padding: 5px; font-size: 8px; z-index: 99;'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;container&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;appendChild&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;canvas&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;container&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;appendChild&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;tip&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;draw&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;bindEvent&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;at&quot;&gt;draw&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;co&quot;&gt;//绘制&lt;/span&gt;

    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;at&quot;&gt;showInfo&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;co&quot;&gt;//显示信息&lt;/span&gt;

    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;at&quot;&gt;animate&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;co&quot;&gt;//执行动画&lt;/span&gt;

    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;at&quot;&gt;showData&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;co&quot;&gt;//显示数据&lt;/span&gt;

    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;绘制xy轴&quot;&gt;绘制XY轴&lt;/h2&gt;
&lt;p&gt;首先绘制标题，接着XY轴，然后遍历分组数据series，里面有复杂的计算，然后绘制XY轴的刻度，绘制分组标签，最后是绘制数据。数据项series中是分组数据，它跟X轴的xAxis.data一一对应。每个项可以自定义名称和颜色，没有指定的话，名称赋予nunamed和自动生成颜色。这里还用legend属性记录下了标签列表信息，因为后续鼠标点击判断是否点中用的上。&lt;br/&gt;canvas主要知识点：&lt;/p&gt;
&lt;ol readability=&quot;3&quot;&gt;&lt;li&gt;分组标签使用了arcTo方法，这样就能绘制出圆角的效果。&lt;/li&gt;
&lt;li&gt;绘制文本使用了measureText方法，可以用来测量文字所占宽度，这样就可以调整下一次绘制的位置，避免位置冲突。&lt;/li&gt;
&lt;li readability=&quot;73.5&quot;&gt;
&lt;p&gt;translate位移方法，可以放在绘制上下文(save和restore的中间)中，这样可以避免复杂的位置运算。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;92&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;at&quot;&gt;draw&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; that&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
        ctx&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
        canvas&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;canvas&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
        W&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;W&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
        H&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;H&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
        padding&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
        paddingTop&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;paddingTop&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
        xl&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;xs&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;xdis&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;W&lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;padding&lt;span class=&quot;op&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;co&quot;&gt;//x轴单位数，每个单位长度，x轴总长度&lt;/span&gt;
        yl&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;ys&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;ydis&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;H&lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;padding&lt;span class=&quot;op&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;paddingTop&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;co&quot;&gt;//y轴单位数，每个单位长度，y轴总长度&lt;/span&gt;

    &lt;span class=&quot;va&quot;&gt;ctx&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;fillStyle&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'hsla(0,0%,20%,1)'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;va&quot;&gt;ctx&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;strokeStyle&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'hsla(0,0%,10%,1)'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;va&quot;&gt;ctx&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;lineWidth&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;va&quot;&gt;ctx&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;textAlign&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'center'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;va&quot;&gt;ctx&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;textBaseLine&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'middle'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;va&quot;&gt;ctx&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;font&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'24px arial'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;va&quot;&gt;ctx&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;clearRect&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;W&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;H)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;title&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;va&quot;&gt;ctx&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;save&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;va&quot;&gt;ctx&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;textAlign&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'left'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;va&quot;&gt;ctx&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;font&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'bold 40px arial'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;va&quot;&gt;ctx&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;fillText&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;padding&lt;span class=&quot;dv&quot;&gt;-50&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;70&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;va&quot;&gt;ctx&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;restore&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;yAxis&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;yAxis&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;name&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;va&quot;&gt;ctx&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;fillText&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;yAxis&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;padding&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;padding&lt;span class=&quot;op&quot;&gt;+&lt;/span&gt;paddingTop&lt;span class=&quot;dv&quot;&gt;-30&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;co&quot;&gt;// x轴&lt;/span&gt;
    &lt;span class=&quot;va&quot;&gt;ctx&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;save&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;va&quot;&gt;ctx&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;beginPath&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;va&quot;&gt;ctx&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;translate&lt;/span&gt;(padding&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;H&lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;padding)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;va&quot;&gt;ctx&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;moveTo&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;va&quot;&gt;ctx&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;lineTo&lt;/span&gt;(W&lt;span class=&quot;dv&quot;&gt;-2&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;*&lt;/span&gt;padding&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;va&quot;&gt;ctx&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;stroke&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;co&quot;&gt;// x轴刻度&lt;/span&gt;
    &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;xAxis&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;(xl&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;xAxis&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;data&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;length&lt;/span&gt;))&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        xs&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;(W&lt;span class=&quot;dv&quot;&gt;-2&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;*&lt;/span&gt;padding)/xl&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;xAxis&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;data&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;forEach&lt;/span&gt;((obj&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;i)&lt;span class=&quot;op&quot;&gt;=&amp;gt;{&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; x&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;xs&lt;span class=&quot;op&quot;&gt;*&lt;/span&gt;(i&lt;span class=&quot;dv&quot;&gt;+1&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;va&quot;&gt;ctx&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;moveTo&lt;/span&gt;(x&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;va&quot;&gt;ctx&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;lineTo&lt;/span&gt;(x&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;va&quot;&gt;ctx&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;stroke&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;va&quot;&gt;ctx&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;fillText&lt;/span&gt;(obj&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;x&lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;xs/&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;40&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;va&quot;&gt;ctx&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;restore&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;co&quot;&gt;// y轴&lt;/span&gt;
    &lt;span class=&quot;va&quot;&gt;ctx&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;save&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;va&quot;&gt;ctx&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;beginPath&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;va&quot;&gt;ctx&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;strokeStyle&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'hsl(220,100%,50%)'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;va&quot;&gt;ctx&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;translate&lt;/span&gt;(padding&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;H&lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;padding)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;va&quot;&gt;ctx&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;moveTo&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;va&quot;&gt;ctx&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;lineTo&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;*&lt;/span&gt;padding&lt;span class=&quot;op&quot;&gt;+&lt;/span&gt;paddingTop&lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;H)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;va&quot;&gt;ctx&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;stroke&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;va&quot;&gt;ctx&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;restore&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;series&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;length&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;         
        &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; curr&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;txt&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;dim&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;info&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;item&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;tw&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;cf&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; i&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;i&lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;series&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;i&lt;span class=&quot;op&quot;&gt;++&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
            item&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;series&lt;/span&gt;[i]&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;op&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;item&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;||!&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;item&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;data&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;length&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;series&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;splice&lt;/span&gt;(i&lt;span class=&quot;op&quot;&gt;--,&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;cf&quot;&gt;continue&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;co&quot;&gt;// 赋予没有颜色的项&lt;/span&gt;
            &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;op&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;item&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;color&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; hsl&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;i&lt;span class=&quot;op&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;180+20&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;*&lt;/span&gt;i/&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;:&lt;span class=&quot;dv&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;*&lt;/span&gt;(i&lt;span class=&quot;dv&quot;&gt;-1&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;va&quot;&gt;item&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'hsla('&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;+&lt;/span&gt;hsl&lt;span class=&quot;op&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;',70%,60%,1)'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;va&quot;&gt;item&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;item&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;||&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'unnamed'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

            &lt;span class=&quot;co&quot;&gt;// 画分组标签&lt;/span&gt;
            &lt;span class=&quot;va&quot;&gt;ctx&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;save&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;va&quot;&gt;ctx&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;translate&lt;/span&gt;(padding&lt;span class=&quot;op&quot;&gt;+&lt;/span&gt;W/&lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;paddingTop&lt;span class=&quot;dv&quot;&gt;+40&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;va&quot;&gt;that&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;legend&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;push&lt;/span&gt;(&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;dt&quot;&gt;hide&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;item&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;hide&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;||&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;dt&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;item&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;dt&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;item&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;dt&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;padding&lt;span class=&quot;op&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;that&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;W&lt;/span&gt;/&lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;+&lt;/span&gt;i&lt;span class=&quot;op&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;90&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;+&lt;/span&gt;tw&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;dt&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;paddingTop&lt;span class=&quot;dv&quot;&gt;+40&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;dt&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;60&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;dt&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;dt&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;
            &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;va&quot;&gt;ctx&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;textAlign&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'left'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;va&quot;&gt;ctx&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;fillStyle&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;item&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;va&quot;&gt;ctx&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;strokeStyle&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;item&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;at&quot;&gt;roundRect&lt;/span&gt;(ctx&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;i&lt;span class=&quot;op&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;90&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;+&lt;/span&gt;tw&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;60&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;va&quot;&gt;ctx&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;globalAlpha&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;item&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;hide&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;fl&quot;&gt;0.3&lt;/span&gt;:&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;va&quot;&gt;ctx&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;fill&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;va&quot;&gt;ctx&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;fillText&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;item&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;i&lt;span class=&quot;op&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;90&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;+&lt;/span&gt;tw&lt;span class=&quot;dv&quot;&gt;+70&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;26&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            tw&lt;span class=&quot;op&quot;&gt;+=&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;ctx&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;measureText&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;item&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;name&lt;/span&gt;).&lt;span class=&quot;at&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;co&quot;&gt;//计算字符长度&lt;/span&gt;
            &lt;span class=&quot;va&quot;&gt;ctx&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;restore&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

            &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;item&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;hide&lt;/span&gt;)&lt;span class=&quot;cf&quot;&gt;continue&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;co&quot;&gt;//计算数据在Y轴刻度&lt;/span&gt;
            &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;op&quot;&gt;!&lt;/span&gt;info)&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                info&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;at&quot;&gt;calculateY&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;item&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;data&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;slice&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;xl))&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
            curr&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;at&quot;&gt;calculateY&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;item&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;data&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;slice&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;xl))&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;curr&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;info&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;max&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                info&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;curr&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;op&quot;&gt;!&lt;/span&gt;info) &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        yl&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;info&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        ys&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;ydis/yl&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;co&quot;&gt;//画Y轴刻度&lt;/span&gt;
        &lt;span class=&quot;va&quot;&gt;ctx&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;save&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;va&quot;&gt;ctx&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;fillStyle&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'hsl(200,100%,60%)'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;va&quot;&gt;ctx&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;translate&lt;/span&gt;(padding&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;H&lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;padding)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;cf&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; i&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;i&lt;span class=&quot;op&quot;&gt;&amp;lt;=&lt;/span&gt;yl&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;i&lt;span class=&quot;op&quot;&gt;++&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;va&quot;&gt;ctx&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;beginPath&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;va&quot;&gt;ctx&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;strokeStyle&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'hsl(220,100%,50%)'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;va&quot;&gt;ctx&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;moveTo&lt;/span&gt;(&lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,-&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;floor&lt;/span&gt;(ys&lt;span class=&quot;op&quot;&gt;*&lt;/span&gt;i))&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;va&quot;&gt;ctx&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;lineTo&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,-&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;floor&lt;/span&gt;(ys&lt;span class=&quot;op&quot;&gt;*&lt;/span&gt;i))&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;va&quot;&gt;ctx&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;stroke&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

            &lt;span class=&quot;va&quot;&gt;ctx&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;beginPath&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;va&quot;&gt;ctx&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;strokeStyle&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'hsla(0,0%,80%,1)'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;va&quot;&gt;ctx&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;moveTo&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,-&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;floor&lt;/span&gt;(ys&lt;span class=&quot;op&quot;&gt;*&lt;/span&gt;i))&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;va&quot;&gt;ctx&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;lineTo&lt;/span&gt;(xdis&lt;span class=&quot;op&quot;&gt;,-&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;floor&lt;/span&gt;(ys&lt;span class=&quot;op&quot;&gt;*&lt;/span&gt;i))&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;va&quot;&gt;ctx&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;stroke&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

            &lt;span class=&quot;va&quot;&gt;ctx&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;textAlign&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'right'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            dim&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;min&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;floor&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;info&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;step&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;*&lt;/span&gt;i)&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;info&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;max&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            txt&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;yAxis&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;formatter&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;yAxis&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;formatter&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;replace&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'{value}'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;dim):dim&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;va&quot;&gt;ctx&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;fillText&lt;/span&gt;(txt&lt;span class=&quot;op&quot;&gt;,-&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,-&lt;/span&gt;ys&lt;span class=&quot;op&quot;&gt;*&lt;/span&gt;i&lt;span class=&quot;dv&quot;&gt;+10&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;va&quot;&gt;ctx&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;restore&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;co&quot;&gt;//画数据&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;showData&lt;/span&gt;(xl&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;xs&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;info&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;max&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;绘制数据&quot;&gt;绘制数据&lt;/h2&gt;
&lt;p&gt;因为数据项需要后续执行动画和鼠标滑过的时候显示内容，所以把它放进动画队列animateArr中。这里要把分组数据展开，把之前的两次嵌套的数组转为一层，并计算好每个数据项的属性，比如名称，x坐标，y坐标，宽度，速度，颜色。数据组织完毕后，接着执行动画。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;at&quot;&gt;showData&lt;/span&gt;(xl&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;xs&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;max)&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;co&quot;&gt;//画数据&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; that&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
        ctx&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
        ydis&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;H&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;paddingTop&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
        sl&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;series&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;filter&lt;/span&gt;(s&lt;span class=&quot;op&quot;&gt;=&amp;gt;!&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;s&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;hide&lt;/span&gt;).&lt;span class=&quot;at&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
        sp&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;max&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;pow&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;sl&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;)/&lt;span class=&quot;dv&quot;&gt;3-4&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
        w&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;(xs&lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;sp&lt;span class=&quot;op&quot;&gt;*&lt;/span&gt;(sl&lt;span class=&quot;dv&quot;&gt;+1&lt;/span&gt;))/sl&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
        h&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;x&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;index&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;va&quot;&gt;that&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;animateArr&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;co&quot;&gt;// 展开数据项，填入动画队列&lt;/span&gt;
    &lt;span class=&quot;cf&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; i&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;item&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;len&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;series&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;i&lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;len&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;i&lt;span class=&quot;op&quot;&gt;++&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        item&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;series&lt;/span&gt;[i]&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;item&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;hide&lt;/span&gt;)&lt;span class=&quot;cf&quot;&gt;continue&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;va&quot;&gt;item&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;data&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;slice&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;xl).&lt;span class=&quot;at&quot;&gt;forEach&lt;/span&gt;((d&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;j)&lt;span class=&quot;op&quot;&gt;=&amp;gt;{&lt;/span&gt;
            h&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;d/max&lt;span class=&quot;op&quot;&gt;*&lt;/span&gt;ydis&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            x&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;xs&lt;span class=&quot;op&quot;&gt;*&lt;/span&gt;j&lt;span class=&quot;op&quot;&gt;+&lt;/span&gt;w&lt;span class=&quot;op&quot;&gt;*&lt;/span&gt;index&lt;span class=&quot;op&quot;&gt;+&lt;/span&gt;sp&lt;span class=&quot;op&quot;&gt;*&lt;/span&gt;(index&lt;span class=&quot;dv&quot;&gt;+1&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;va&quot;&gt;that&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;animateArr&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;push&lt;/span&gt;(&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;dt&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;i&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;dt&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;item&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;dt&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;d&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;dt&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;round&lt;/span&gt;(x)&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;dt&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;dt&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;round&lt;/span&gt;(w)&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;dt&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;floor&lt;/span&gt;(h&lt;span class=&quot;dv&quot;&gt;+2&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;dt&quot;&gt;vy&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;max&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;300&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;floor&lt;/span&gt;(h&lt;span class=&quot;op&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;))/&lt;span class=&quot;dv&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;dt&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;item&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;color&lt;/span&gt;
            &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        index&lt;span class=&quot;op&quot;&gt;++;&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;animate&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;执行动画&quot;&gt;执行动画&lt;/h2&gt;
&lt;p&gt;执行动画也没啥好说的，里面就是个自执行闭包函数。动画原理就是给y轴依次累加速度值vy。但记得当队列执行完动画后，要停止它，所以有个isStop的标志，每次执行完队列的时候就判断。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;17&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;at&quot;&gt;animate&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; that&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
        ctx&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
        isStop&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    (&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;run&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        isStop&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;cf&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; i&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;item&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;i&lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;that&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;animateArr&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;i&lt;span class=&quot;op&quot;&gt;++&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
            item&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;that&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;animateArr&lt;/span&gt;[i]&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;item&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;item&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;=&lt;/span&gt;&lt;span class=&quot;fl&quot;&gt;0.1&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;va&quot;&gt;item&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;item&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;cf&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;va&quot;&gt;item&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;+=&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;item&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;vy&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;item&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;item&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;h&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;va&quot;&gt;ctx&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;save&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;co&quot;&gt;// ctx.translate(that.padding+item.x,that.H-that.padding);&lt;/span&gt;
                &lt;span class=&quot;va&quot;&gt;ctx&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;fillStyle&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;item&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;va&quot;&gt;ctx&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;fillRect&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;that&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;item&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;that&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;H&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;that&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;item&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;item&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;item&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;y&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;va&quot;&gt;ctx&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;restore&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                isStop&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt;(isStop)&lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;at&quot;&gt;requestAnimationFrame&lt;/span&gt;(run)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;())
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;h2 id=&quot;绑定事件&quot;&gt;绑定事件&lt;/h2&gt;
&lt;p&gt;事件一：mousemove的时候，看看鼠标位置是不是处于分组标签还是数据项上，绘制路径后调用isPointInPath(x,y)，true则canvas.style.cursor='pointer'；如果是数据项的话，还要给把该柱形重新绘制，设置透明度，区分出来。还需要把内容显示出来，这里是一个相对父容器container为绝对定位的div，初始化的时候已经建立为tip属性了。我们把显示部分封装成showInfo方法。&lt;/p&gt;
&lt;p&gt;事件二：mousedown的时候，判断鼠标点击哪个分组标签，然后设置对应分组数据series中的hide属性，如果是true，表示不显示该项，然后调用draw方法，重写渲染绘制，执行动画。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;48&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;    &lt;span class=&quot;at&quot;&gt;bindEvent&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; that&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
            canvas&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;canvas&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
            ctx&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;canvas&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;addEventListener&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'mousemove'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt;(e)&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; isLegend&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;co&quot;&gt;// pos=WindowToCanvas(canvas,e.clientX,e.clientY);&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; box&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;canvas&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;getBoundingClientRect&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; pos &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;dt&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;e&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;clientX&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;box&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;dt&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;e&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;clientY&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;box&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;top&lt;/span&gt;
            &lt;span class=&quot;op&quot;&gt;};&lt;/span&gt;
            &lt;span class=&quot;co&quot;&gt;// 分组标签&lt;/span&gt;
            &lt;span class=&quot;cf&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; i&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;item&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;len&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;that&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;legend&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;i&lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;len&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;i&lt;span class=&quot;op&quot;&gt;++&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                item&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;that&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;legend&lt;/span&gt;[i]&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;va&quot;&gt;ctx&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;save&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;at&quot;&gt;roundRect&lt;/span&gt;(ctx&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;item&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;item&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;item&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;item&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;item&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;r&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;co&quot;&gt;// 因为缩小了一倍，所以坐标要*2&lt;/span&gt;
                &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;ctx&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;isPointInPath&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;pos&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;pos&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;))&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;va&quot;&gt;canvas&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;style&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;cursor&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'pointer'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;va&quot;&gt;ctx&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;restore&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                    isLegend&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;cf&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;va&quot;&gt;canvas&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;style&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;cursor&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'default'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;va&quot;&gt;ctx&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;restore&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

            &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt;(isLegend) &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;co&quot;&gt;//选择数据项&lt;/span&gt;
            &lt;span class=&quot;cf&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; i&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;item&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;len&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;that&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;animateArr&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;i&lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;len&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;i&lt;span class=&quot;op&quot;&gt;++&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                item&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;that&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;animateArr&lt;/span&gt;[i]&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;va&quot;&gt;ctx&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;save&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;va&quot;&gt;ctx&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;fillStyle&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;item&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;va&quot;&gt;ctx&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;beginPath&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;va&quot;&gt;ctx&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;rect&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;that&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;item&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;that&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;H&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;that&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;item&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;item&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;item&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;h&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;ctx&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;isPointInPath&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;pos&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;pos&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;))&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;co&quot;&gt;//清空后再重新绘制透明度为0.5的图形&lt;/span&gt;
                    &lt;span class=&quot;va&quot;&gt;ctx&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;clearRect&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;that&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;item&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;that&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;H&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;that&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;item&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;item&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;item&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;h&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;va&quot;&gt;ctx&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;globalAlpha&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;fl&quot;&gt;0.5&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;va&quot;&gt;ctx&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;fill&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;va&quot;&gt;canvas&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;style&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;cursor&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'pointer'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;va&quot;&gt;that&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;showInfo&lt;/span&gt;(pos&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;item)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;va&quot;&gt;ctx&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;restore&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;cf&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;va&quot;&gt;canvas&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;style&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;cursor&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'default'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;va&quot;&gt;that&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;tip&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;style&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'none'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;va&quot;&gt;ctx&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;globalAlpha&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;va&quot;&gt;ctx&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;fill&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;va&quot;&gt;ctx&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;restore&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
            
        &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;false&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;canvas&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;addEventListener&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'mousedown'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt;(e)&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;va&quot;&gt;e&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;preventDefault&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; box&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;canvas&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;getBoundingClientRect&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; pos &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;dt&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;e&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;clientX&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;box&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;dt&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;e&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;clientY&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;box&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;top&lt;/span&gt;
            &lt;span class=&quot;op&quot;&gt;};&lt;/span&gt;
            &lt;span class=&quot;cf&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; i&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;item&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;len&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;that&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;legend&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;i&lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;len&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;i&lt;span class=&quot;op&quot;&gt;++&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                item&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;that&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;legend&lt;/span&gt;[i]&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;at&quot;&gt;roundRect&lt;/span&gt;(ctx&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;item&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;item&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;item&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;item&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;item&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;r&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;co&quot;&gt;// 因为缩小了一倍，所以坐标要*2&lt;/span&gt;
                &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;ctx&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;isPointInPath&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;pos&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;pos&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;))&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;va&quot;&gt;that&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;series&lt;/span&gt;[i].&lt;span class=&quot;at&quot;&gt;hide&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;=!&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;that&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;series&lt;/span&gt;[i].&lt;span class=&quot;at&quot;&gt;hide&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;va&quot;&gt;that&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;animateArr&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;va&quot;&gt;that&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;draw&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;cf&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;false&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;co&quot;&gt;//显示数据&lt;/span&gt;
    &lt;span class=&quot;at&quot;&gt;showInfo&lt;/span&gt;(pos&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;obj)&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; txt&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;yAxis&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;formatter&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;yAxis&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;formatter&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;replace&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'{value}'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;obj&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;num&lt;/span&gt;):&lt;span class=&quot;va&quot;&gt;obj&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; box&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;canvas&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;getBoundingClientRect&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; con&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;container&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;getBoundingClientRect&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;tip&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;innerHTML&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'&amp;lt;p&amp;gt;'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;obj&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;':'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;+&lt;/span&gt;txt&lt;span class=&quot;op&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'&amp;lt;/p&amp;gt;'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;tip&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;style&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;pos&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;+&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;box&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;con&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;left&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'px'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;tip&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;style&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;pos&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;+&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;box&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;con&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;top&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'px'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;tip&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;style&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'block'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;总结&quot;&gt;总结&lt;/h2&gt;
&lt;p&gt;这里完成的只是个基本的效果，其实还有很多地方要进一步优化，比如响应式的支持，移动端的支持，动画的效果，多y轴的支持，显示内容的效果，同时支持折线功能等。&lt;/p&gt;
</description>
<pubDate>Mon, 13 Nov 2017 06:51:00 +0000</pubDate>
<dc:creator>Jeff.Zhong</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/edwardloveyou/p/7826270.html</dc:identifier>
</item>
<item>
<title>【机器学习实战】第15章 大数据与MapReduce - 片刻</title>
<link>http://www.cnblogs.com/jiangzhonglian/p/7826254.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/jiangzhonglian/p/7826254.html</guid>
<description>&lt;p&gt;&lt;a href=&quot;https://github.com/apachecn/MachineLearning/blob/master/images/15.BigData_MapReduce/mr_headPage.jpg&quot; target=&quot;_blank&quot;&gt;&lt;img title=&quot;大数据与MapReduce首页&quot; src=&quot;https://github.com/apachecn/MachineLearning/raw/master/images/15.BigData_MapReduce/mr_headPage.jpg&quot; alt=&quot;大数据与MapReduce首页&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;大数据 概述&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;大数据: 收集到的数据已经远远超出了我们的处理能力。&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;大数据 场景&lt;/h2&gt;
&lt;pre&gt;
&lt;code&gt;假如你为一家网络购物商店工作，很多用户访问该网站，其中有些人会购买商品，有些人则随意浏览后就离开。
对于你来说，可能很想识别那些有购物意愿的用户。
那么问题就来了，数据集可能会非常大，在单机上训练要运行好几天。
接下来：我们讲讲 MapRedece 如何来解决这样的问题
&lt;/code&gt;
&lt;/pre&gt;
&lt;h2&gt;MapRedece&lt;/h2&gt;
&lt;h3&gt;Hadoop 概述&lt;/h3&gt;
&lt;pre&gt;
&lt;code&gt;Hadoop 是 MapRedece 框架的一个免费开源实现。
MapReduce: 分布式的计算框架，可以将单个计算作业分配给多台计算机执行。
&lt;/code&gt;
&lt;/pre&gt;
&lt;h3&gt;MapRedece 原理&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;MapRedece 工作原理&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;&lt;li&gt;主节点控制 MapReduce 的作业流程&lt;/li&gt;
&lt;li&gt;MapReduce 的作业可以分成map任务和reduce任务&lt;/li&gt;
&lt;li&gt;map 任务之间不做数据交流，reduce 任务也一样&lt;/li&gt;
&lt;li&gt;在 map 和 reduce 阶段中间，有一个 sort 和 combine 阶段&lt;/li&gt;
&lt;li&gt;数据被重复存放在不同的机器上，以防止某个机器失效&lt;/li&gt;
&lt;li&gt;mapper 和 reducer 传输的数据形式为 key/value对&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/apachecn/MachineLearning/blob/master/images/15.BigData_MapReduce/mr_1_cluster.jpg&quot; target=&quot;_blank&quot;&gt;&lt;img title=&quot;MapReduce框架的示意图&quot; src=&quot;https://github.com/apachecn/MachineLearning/raw/master/images/15.BigData_MapReduce/mr_1_cluster.jpg&quot; alt=&quot;MapReduce框架的示意图&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;MapRedece 特点&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;
&lt;code&gt;优点: 使程序以并行的方式执行，可在短时间内完成大量工作。
缺点: 算法必须经过重写，需要对系统工程有一定的理解。
适用数据类型: 数值型和标称型数据。
&lt;/code&gt;
&lt;/pre&gt;
&lt;h3&gt;Hadoop 流(Python 调用)&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;理论简介&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;例如: Hadoop流可以像Linux命令一样执行&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-shell&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
cat inputFile.txt &lt;span class=&quot;pl-k&quot;&gt;| python mapper.py &lt;span class=&quot;pl-k&quot;&gt;| sort &lt;span class=&quot;pl-k&quot;&gt;| python reducer.py &lt;span class=&quot;pl-k&quot;&gt;&amp;gt; outputFile.txt&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;类似的Hadoop流就可以在多台机器上分布式执行，用户可以通过Linux命令来测试Python语言编写的MapReduce脚本。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;实战脚本&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;
&lt;code&gt;# 测试 Mapper
# Linux
cat input/15.BigData_MapReduce/inputFile.txt | python src/python/15.BigData_MapReduce/mrMeanMapper.py
# Window
# python src/python/15.BigData_MapReduce/mrMeanMapper.py &amp;lt; input/15.BigData_MapReduce/inputFile.txt

# 测试 Reducer
# Linux
cat input/15.BigData_MapReduce/inputFile.txt | python src/python/15.BigData_MapReduce/mrMeanMapper.py | python src/python/15.BigData_MapReduce/mrMeanReducer.py
# Window
# python src/python/15.BigData_MapReduce/mrMeanMapper.py &amp;lt; input/15.BigData_MapReduce/inputFile.txt | python src/python/15.BigData_MapReduce/mrMeanReducer.py
&lt;/code&gt;
&lt;/pre&gt;
&lt;h3&gt;MapReduce 机器学习&lt;/h3&gt;
&lt;h4&gt;Mahout in Action&lt;/h4&gt;
&lt;ol&gt;&lt;li&gt;简单贝叶斯：它属于为数不多的可以很自然的使用MapReduce的算法。通过统计在某个类别下某特征的概率。&lt;/li&gt;
&lt;li&gt;k-近邻算法：高维数据下（如文本、图像和视频）流行的近邻查找方法是局部敏感哈希算法。&lt;/li&gt;
&lt;li&gt;支持向量机(SVM)：使用随机梯度下降算法求解，如Pegasos算法。&lt;/li&gt;
&lt;li&gt;奇异值分解：Lanczos算法是一个有效的求解近似特征值的算法。&lt;/li&gt;
&lt;li&gt;k-均值聚类：canopy算法初始化k个簇，然后再运行K-均值求解结果。&lt;/li&gt;
&lt;/ol&gt;&lt;h3&gt;使用 mrjob 库将 MapReduce 自动化&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;理论简介&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;&lt;li&gt;MapReduce 作业流自动化的框架：Cascading 和 Oozie.&lt;/li&gt;
&lt;li&gt;mrjob 是一个不错的学习工具，与2010年底实现了开源，来之于 Yelp(一个餐厅点评网站).&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;highlight highlight-source-shell&quot; readability=&quot;8&quot;&gt;
&lt;pre&gt;
python src/python/15.BigData_MapReduce/mrMean.py &lt;span class=&quot;pl-k&quot;&gt;&amp;lt; input/15.BigData_MapReduce/inputFile.txt &lt;span class=&quot;pl-k&quot;&gt;&amp;gt; input/15.BigData_MapReduce/myOut.txt&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;实战脚本&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;
&lt;code&gt;# 测试 mrjob的案例
# 先测试一下mapper方法
# python src/python/15.BigData_MapReduce/mrMean.py --mapper &amp;lt; input/15.BigData_MapReduce/inputFile.txt
# 运行整个程序，移除 --mapper 就行
python src/python/15.BigData_MapReduce/mrMean.py &amp;lt; input/15.BigData_MapReduce/inputFile.txt
&lt;/code&gt;
&lt;/pre&gt;
&lt;h3&gt;项目案例：分布式 SVM 的 Pegasos 算法&lt;/h3&gt;
&lt;p&gt;Pegasos是指原始估计梯度求解器(Peimal Estimated sub-GrAdient Solver)&lt;/p&gt;
&lt;h4&gt;Pegasos 工作原理&lt;/h4&gt;
&lt;ol&gt;&lt;li&gt;从训练集中随机挑选一些样本点添加到带处理列表中&lt;/li&gt;
&lt;li&gt;按序判断每个样本点是否被正确分类
&lt;ul&gt;&lt;li&gt;如果是则忽略&lt;/li&gt;
&lt;li&gt;如果不是则将其加入到待更新集合。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;批处理完毕后，权重向量按照这些错分的样本进行更新。&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;上述算法伪代码如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;将 回归系数w 初始化为0
对每次批处理
    随机选择 k 个样本点(向量)
    对每个向量
        如果该向量被错分：
            更新权重向量 w
    累加对 w 的更新
&lt;/code&gt;
&lt;/pre&gt;
&lt;h4&gt;开发流程&lt;/h4&gt;
&lt;pre&gt;
&lt;code&gt;收集数据：数据按文本格式存放。
准备数据：输入数据已经是可用的格式，所以不需任何准备工作。如果你需要解析一个大规模的数据集，建议使用 map 作业来完成，从而达到并行处理的目的。
分析数据：无。
训练算法：与普通的 SVM 一样，在分类器训练上仍需花费大量的时间。
测试算法：在二维空间上可视化之后，观察超平面，判断算法是否有效。
使用算法：本例不会展示一个完整的应用，但会展示如何在大数据集上训练SVM。该算法其中一个应用场景就是本文分类，通常在文本分类里可能有大量的文档和成千上万的特征。
&lt;/code&gt;
&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;收集数据&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;文本文件数据格式如下：&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;8&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-c1&quot;&gt;0.365032        &lt;span class=&quot;pl-c1&quot;&gt;2.465645        &lt;span class=&quot;pl-k&quot;&gt;-&lt;span class=&quot;pl-c1&quot;&gt;1
&lt;span class=&quot;pl-k&quot;&gt;-&lt;span class=&quot;pl-c1&quot;&gt;2.494175       &lt;span class=&quot;pl-k&quot;&gt;-&lt;span class=&quot;pl-c1&quot;&gt;0.292380       &lt;span class=&quot;pl-k&quot;&gt;-&lt;span class=&quot;pl-c1&quot;&gt;1
&lt;span class=&quot;pl-k&quot;&gt;-&lt;span class=&quot;pl-c1&quot;&gt;3.039364       &lt;span class=&quot;pl-k&quot;&gt;-&lt;span class=&quot;pl-c1&quot;&gt;0.123108       &lt;span class=&quot;pl-k&quot;&gt;-&lt;span class=&quot;pl-c1&quot;&gt;1
&lt;span class=&quot;pl-c1&quot;&gt;1.348150        &lt;span class=&quot;pl-c1&quot;&gt;0.255696        &lt;span class=&quot;pl-c1&quot;&gt;1
&lt;span class=&quot;pl-c1&quot;&gt;2.768494        &lt;span class=&quot;pl-c1&quot;&gt;1.234954        &lt;span class=&quot;pl-c1&quot;&gt;1
&lt;span class=&quot;pl-c1&quot;&gt;1.232328        &lt;span class=&quot;pl-k&quot;&gt;-&lt;span class=&quot;pl-c1&quot;&gt;0.601198       &lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;准备数据&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;14&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;def &lt;span class=&quot;pl-en&quot;&gt;loadDataSet(&lt;span class=&quot;pl-smi&quot;&gt;fileName):
    dataMat &lt;span class=&quot;pl-k&quot;&gt;= []
    labelMat &lt;span class=&quot;pl-k&quot;&gt;= []
    fr &lt;span class=&quot;pl-k&quot;&gt;= &lt;span class=&quot;pl-c1&quot;&gt;open(fileName)
    &lt;span class=&quot;pl-k&quot;&gt;for line &lt;span class=&quot;pl-k&quot;&gt;in fr.readlines():
        lineArr &lt;span class=&quot;pl-k&quot;&gt;= line.strip().split(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;span class=&quot;pl-cce&quot;&gt;\t&lt;span class=&quot;pl-pds&quot;&gt;')
        &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;# dataMat.append([float(lineArr[0]), float(lineArr[1]), float(lineArr[2])])
        dataMat.append([&lt;span class=&quot;pl-c1&quot;&gt;float(lineArr[&lt;span class=&quot;pl-c1&quot;&gt;0]), &lt;span class=&quot;pl-c1&quot;&gt;float(lineArr[&lt;span class=&quot;pl-c1&quot;&gt;1])])
        labelMat.append(&lt;span class=&quot;pl-c1&quot;&gt;float(lineArr[&lt;span class=&quot;pl-c1&quot;&gt;2]))
    &lt;span class=&quot;pl-k&quot;&gt;return dataMat, labelMat&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;分析数据: 无&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;训练算法&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;23&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;def &lt;span class=&quot;pl-en&quot;&gt;batchPegasos(&lt;span class=&quot;pl-smi&quot;&gt;dataSet, &lt;span class=&quot;pl-smi&quot;&gt;labels, &lt;span class=&quot;pl-smi&quot;&gt;lam, &lt;span class=&quot;pl-smi&quot;&gt;T, &lt;span class=&quot;pl-smi&quot;&gt;k):
    &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&quot;&quot;batchPegasos()
&lt;span class=&quot;pl-s&quot;&gt;
&lt;span class=&quot;pl-s&quot;&gt;    Args:
&lt;span class=&quot;pl-s&quot;&gt;        dataMat    特征集合
&lt;span class=&quot;pl-s&quot;&gt;        labels     分类结果集合
&lt;span class=&quot;pl-s&quot;&gt;        lam        固定值
&lt;span class=&quot;pl-s&quot;&gt;        T          迭代次数
&lt;span class=&quot;pl-s&quot;&gt;        k          待处理列表大小
&lt;span class=&quot;pl-s&quot;&gt;    Returns:
&lt;span class=&quot;pl-s&quot;&gt;        w          回归系数
&lt;span class=&quot;pl-s&quot;&gt;    &lt;span class=&quot;pl-pds&quot;&gt;&quot;&quot;&quot;
    m, n &lt;span class=&quot;pl-k&quot;&gt;= shape(dataSet)
    w &lt;span class=&quot;pl-k&quot;&gt;= zeros(n)  &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;# 回归系数
    dataIndex &lt;span class=&quot;pl-k&quot;&gt;= &lt;span class=&quot;pl-c1&quot;&gt;range(m)
    &lt;span class=&quot;pl-k&quot;&gt;for t &lt;span class=&quot;pl-k&quot;&gt;in &lt;span class=&quot;pl-c1&quot;&gt;range(&lt;span class=&quot;pl-c1&quot;&gt;1, T&lt;span class=&quot;pl-k&quot;&gt;+&lt;span class=&quot;pl-c1&quot;&gt;1):
        wDelta &lt;span class=&quot;pl-k&quot;&gt;= mat(zeros(n))  &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;# 重置 wDelta

        &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;# 它是学习率，代表了权重调整幅度的大小。（也可以理解为随机梯度的步长，使它不断减小，便于拟合）
        &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;# 输入T和K分别设定了迭代次数和待处理列表的大小。在T次迭代过程中，每次需要重新计算eta
        eta &lt;span class=&quot;pl-k&quot;&gt;= &lt;span class=&quot;pl-c1&quot;&gt;1.0&lt;span class=&quot;pl-k&quot;&gt;/(lam&lt;span class=&quot;pl-k&quot;&gt;*t)
        random.shuffle(dataIndex)
        &lt;span class=&quot;pl-k&quot;&gt;for j &lt;span class=&quot;pl-k&quot;&gt;in &lt;span class=&quot;pl-c1&quot;&gt;range(k):      &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;# 全部的训练集  内循环中执行批处理，将分类错误的值全部做累加后更新权重向量
            i &lt;span class=&quot;pl-k&quot;&gt;= dataIndex[j]
            p &lt;span class=&quot;pl-k&quot;&gt;= predict(w, dataSet[i, :])              &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;# mapper 代码

            &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;# 如果预测正确，并且预测结果的绝对值&amp;gt;=1，因为最大间隔为1, 认为没问题。
            &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;# 否则算是预测错误, 通过预测错误的结果，来累计更新w.
            &lt;span class=&quot;pl-k&quot;&gt;if labels[i]&lt;span class=&quot;pl-k&quot;&gt;*p &lt;span class=&quot;pl-k&quot;&gt;&amp;lt; &lt;span class=&quot;pl-c1&quot;&gt;1:                        &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;# mapper 代码
                wDelta &lt;span class=&quot;pl-k&quot;&gt;+= labels[i]&lt;span class=&quot;pl-k&quot;&gt;*dataSet[i, :].A    &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;# 累积变化
        &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;# w通过不断的随机梯度的方式来优化
        w &lt;span class=&quot;pl-k&quot;&gt;= (&lt;span class=&quot;pl-c1&quot;&gt;1.0 &lt;span class=&quot;pl-k&quot;&gt;- &lt;span class=&quot;pl-c1&quot;&gt;1&lt;span class=&quot;pl-k&quot;&gt;/t)&lt;span class=&quot;pl-k&quot;&gt;*w &lt;span class=&quot;pl-k&quot;&gt;+ (eta&lt;span class=&quot;pl-k&quot;&gt;/k)&lt;span class=&quot;pl-k&quot;&gt;*wDelta             &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;# 在每个 T上应用更改
        &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;# print '-----', w
    &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;# print '++++++', w
    &lt;span class=&quot;pl-k&quot;&gt;return w&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/apachecn/MachineLearning/blob/master/src/python/15.BigData_MapReduce/pegasos.py&quot;&gt;完整代码地址&lt;/a&gt;: &lt;a href=&quot;https://github.com/apachecn/MachineLearning/blob/master/src/python/15.BigData_MapReduce/pegasos.py&quot;&gt;https://github.com/apachecn/MachineLearning/blob/master/src/python/15.BigData_MapReduce/pegasos.py&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/apachecn/MachineLearning/blob/master/src/python/15.BigData_MapReduce/mrSVM.py&quot;&gt;MR版本的代码地址&lt;/a&gt;: &lt;a href=&quot;https://github.com/apachecn/MachineLearning/blob/master/src/python/15.BigData_MapReduce/mrSVM.py&quot;&gt;https://github.com/apachecn/MachineLearning/blob/master/src/python/15.BigData_MapReduce/mrSVM.py&lt;/a&gt;&lt;/p&gt;
&lt;hr/&gt;</description>
<pubDate>Mon, 13 Nov 2017 06:43:00 +0000</pubDate>
<dc:creator>片刻</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/jiangzhonglian/p/7826254.html</dc:identifier>
</item>
<item>
<title>ML - 特征选择 - ML小菜鸟</title>
<link>http://www.cnblogs.com/lianyingteng/p/7821256.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/lianyingteng/p/7821256.html</guid>
<description>&lt;h2&gt;1. 决策树中的特征选择&lt;/h2&gt;
&lt;p&gt;　　分类决策树是一种描述对实例进行分类的树型结构，决策树学习本质上就是从训练数据集中归纳出一组分类规则，而二叉决策树类似于if-else规则。决策树的构建也是非常的简单，首先依据某种特征选择手段对每一特征对分类的贡献性大小排序，然后从根节点开始依次取出剩下特征中对分类贡献最大的特征，用其作为当前节点的分类准则，进一步构造其叶子结点，然后重复此过程，直到特征用光或满足了预先设定的要求终止决策树的构建。由此可见，特征选择作为决策树构建的核心技术而存在，那么下面我们就来讨论一下决策树中常用的特征选择技术有哪些：&lt;/p&gt;
&lt;h3&gt;1.1 信息增益与信息增益比&lt;/h3&gt;
&lt;p&gt;　　一个特征所包含的信息量可以通过看这个特征对整体稳定性的影响大小来确定。举个例子，&lt;/p&gt;
&lt;p&gt;　　　　假设我问你：今年冬天会下雪？&lt;/p&gt;
&lt;p&gt;　　　　你会反问：你说的哪呀？南方和北方会一样么？你说的话一点信息量都没有！&lt;/p&gt;
&lt;p&gt;　　　　我又问：海南，今年冬天会下雪么？&lt;/p&gt;
&lt;p&gt;　　　　你会说：那肯定不会下呀，气温都到不了0下！&lt;/p&gt;
&lt;p&gt;从这对话中我们看到，就冬天会不会下雪这个问题开始时会有两个等可能的判断，这时候是最让我们摸不着头脑的，如果我们接着为其添加一个地域的约束也就是上面的A，此时我们的问题就一下子明朗起来，可见地域信息为我们这个问题的判断提供了非常大的信息参考。除了地域这个特征，也许还有其他一些信息会影响我们对下雪这个问题的判断，那么在这个问题我们该如何比较中的各个特征的信息量大小呢？没错，就是信息增益。&lt;strong&gt;　信息增益&lt;/strong&gt;衡量的是在&lt;span&gt;&lt;span&gt;得知某一特征A的信息后而使得类Y的不确定性减少的程度，公式如下：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　　　　　　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/1251096/201711/1251096-20171112104817575-1471498649.png&quot; alt=&quot;&quot; width=&quot;194&quot; height=&quot;26&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这里，&lt;img src=&quot;http://images2017.cnblogs.com/blog/1251096/201711/1251096-20171112105018575-573582382.png&quot; alt=&quot;&quot; width=&quot;44&quot; height=&quot;18&quot;/&gt;表示特征A对类别Y的信息增益，而随机事件的不确定性可以通过熵来衡量，故 &lt;img src=&quot;http://images2017.cnblogs.com/blog/1251096/201711/1251096-20171112105120622-305551911.png&quot; alt=&quot;&quot; width=&quot;39&quot; height=&quot;18&quot;/&gt;表示类别Y的熵（不确定性），&lt;img src=&quot;http://images2017.cnblogs.com/blog/1251096/201711/1251096-20171112105140778-654181561.png&quot; alt=&quot;&quot; width=&quot;58&quot; height=&quot;24&quot;/&gt;表示在得知特征A后类别Y的熵。可见信息增益是基于熵提出的！那么问题来了，熵如何衡量事件不确定性的呢？我们首先从公式说起：&lt;/p&gt;
&lt;p&gt;　　　　　　　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/1251096/201711/1251096-20171112140647341-457307725.png&quot; alt=&quot;&quot; width=&quot;300&quot; height=&quot;59&quot;/&gt;&lt;/p&gt;
&lt;p&gt;用拉格朗日乘子法，我们可以解得当 &lt;img src=&quot;http://images2017.cnblogs.com/blog/1251096/201711/1251096-20171112141800075-1109375698.png&quot; alt=&quot;&quot; width=&quot;92&quot; height=&quot;29&quot;/&gt;时，熵是最大的（证明过程&lt;a href=&quot;https://wenku.baidu.com/view/3d4a8ecb9e3143323968937c.html&quot; target=&quot;_blank&quot;&gt;参见&lt;/a&gt;）。对于一次伯努利实验的结果其熵的分布满足：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/1251096/201711/1251096-20171112142444184-1953785052.png&quot; alt=&quot;&quot; width=&quot;260&quot; height=&quot;30&quot;/&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1251096/201711/1251096-20171112142457513-168853207.png&quot; alt=&quot;&quot; width=&quot;299&quot; height=&quot;154&quot;/&gt;&lt;/p&gt;
&lt;p&gt;可见，在事件最不确定的时候，其熵值最大，也就是说熵是不确定性的单调递增函数。那么问题又来了，为什么熵的公式是这样的？具体参考可以参见&lt;a href=&quot;https://www.zhihu.com/question/30828247&quot; target=&quot;_blank&quot;&gt;知乎问答&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;　　有时候信息增益并不能很好的度量两个特征哪个特征对分类的贡献大。借用一下李航老师统计学习方法中的贷款申请的例子：&lt;/p&gt;
&lt;p&gt;　　　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/1251096/201711/1251096-20171112145907731-397456769.png&quot; alt=&quot;&quot; width=&quot;491&quot; height=&quot;310&quot;/&gt;&lt;/p&gt;
&lt;p&gt;类别有6个“否”、9个“是”，那么数据集D的熵为：&lt;/p&gt;
&lt;p&gt;　　　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/1251096/201711/1251096-20171112150433309-1945965404.png&quot; alt=&quot;&quot; width=&quot;324&quot; height=&quot;40&quot;/&gt;&lt;/p&gt;
&lt;p&gt;而对于四种特征它们的信息增益分别是：&lt;/p&gt;
&lt;p&gt;　　　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/1251096/201711/1251096-20171112151727778-1326076191.png&quot; alt=&quot;&quot; width=&quot;412&quot; height=&quot;164&quot;/&gt;&lt;/p&gt;
&lt;p&gt;到这里看着似乎没什么问题，那么我们将创造一个问题，把ID也当成一个特征，看看它的信息增益是多少：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1251096/201711/1251096-20171112152440091-512378255.png&quot; alt=&quot;&quot; width=&quot;475&quot; height=&quot;62&quot;/&gt;&lt;/p&gt;
&lt;p&gt;到这里我们发现了ID的信息增益最大呀！那ID就是最好的特征么？开玩笑吧！总的来说，&lt;span&gt;信息增益倾向于选择特征取值多的特征&lt;/span&gt;，和上面的例子一样，把ID当作最好的特征，是不是很傻。所以为了克服它的这种缺陷，&lt;strong&gt;信息增益比&lt;/strong&gt;就诞生了。信息增益比相当于对每个特征的信息增益加了一个权值，抵消了特征取值数对信息增益的影响，这样就把信息增益归一到同一量级，更加方便比较它们的大小。&lt;/p&gt;
&lt;p&gt;　　特征A对于训练数据集D的信息增益比定义为：&lt;/p&gt;
&lt;p&gt;　　　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/1251096/201711/1251096-20171112153851138-1398532921.png&quot; alt=&quot;&quot; width=&quot;381&quot; height=&quot;51&quot;/&gt;，其中n为特征A的取值个数。&lt;/p&gt;
&lt;h3&gt;1.2 基尼系数&lt;/h3&gt;
&lt;p&gt; 　　CART分类树中会用到基尼指数作为样本不确定性的度量，同熵代表的含义相同：基尼系数越大，代表了随机变量越不确定，也就是随机变量越随机。分类问题中，假设有K个类，样本属于第k类的概率为&lt;img src=&quot;http://images2017.cnblogs.com/blog/1251096/201711/1251096-20171112160454356-1972652473.png&quot; alt=&quot;&quot; width=&quot;31&quot; height=&quot;24&quot;/&gt;，那么该概率分布的基尼指数为&lt;/p&gt;
&lt;p&gt;　　　　　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/1251096/201711/1251096-20171112160745497-1570467571.png&quot; alt=&quot;&quot; width=&quot;277&quot; height=&quot;62&quot;/&gt;&lt;/p&gt;
&lt;p&gt;CART构造的是一颗二叉分类树，那么一般我们将一特征集切分成两部分，故得到在特征A给定的条件下，集合D的基尼指数定义为&lt;/p&gt;
&lt;p&gt;　　　　　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/1251096/201711/1251096-20171112161315294-2033221906.png&quot; alt=&quot;&quot; width=&quot;319&quot; height=&quot;44&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;2. Sklearn中的特征选择&lt;/h2&gt;
&lt;p&gt;　　特征选择并不只是用于决策树的构建，特征选择也是机器学习中经常用到的一门技术。特征选择技术出现的原因是：我们要知道在一个机器学习任务中，并不是我们获取的所有特征都对模型构建有着积极的影响，即使都有积极的效益，我们可能也要权衡特征项数与建模效率之间的关系。而特征选择可以非常有效的解决这些问题。特征选择技术可以帮助我们筛选出对建模最有用的特征，把可有可无的特征项去除，不仅可以加速我们模型的训练，还可以有效清除噪声特征对模型的影响。下面将简单过一下sklearn中特征选择，然后选一些自己曾经见过的技术，研究一下它的用法：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1251096/201711/1251096-20171112220342903-1156698245.png&quot; alt=&quot;&quot; width=&quot;607&quot; height=&quot;178&quot;/&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1251096/201711/1251096-20171112220415559-922326226.png&quot; alt=&quot;&quot; width=&quot;593&quot; height=&quot;161&quot;/&gt;&lt;/p&gt;
&lt;h3&gt; 2.1 基于卡方统计量的特征选择&lt;/h3&gt;
&lt;p&gt;　　what is 卡方检验统计量：&lt;span&gt;卡方统计量是用于&lt;strong&gt;检验实际分布与理论分布配合程度&lt;/strong&gt;，也可以说成统计样本的&lt;strong&gt;实际观测值与理论推断值之间的偏差程度&lt;/strong&gt;的统计量&lt;/span&gt;。若卡方值越大，说明偏差越大，越不符合实际；而卡方值越小，说明偏差越小，越是符合实际情况；若卡方值为0，说明理论完全符合实际！下面是卡方统计量的公式：&lt;/p&gt;
&lt;p&gt;　　　　　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/1251096/201711/1251096-20171113131254015-1293829473.png&quot; alt=&quot;&quot; width=&quot;149&quot; height=&quot;47&quot;/&gt;&lt;/p&gt;
&lt;p&gt;其中， &lt;img src=&quot;http://images2017.cnblogs.com/blog/1251096/201711/1251096-20171113131322390-493355364.png&quot; alt=&quot;&quot; width=&quot;26&quot; height=&quot;28&quot;/&gt;表示实际观测次数，&lt;img src=&quot;http://images2017.cnblogs.com/blog/1251096/201711/1251096-20171113131410812-1723353784.png&quot; alt=&quot;&quot; width=&quot;30&quot; height=&quot;31&quot;/&gt;表示理论观测次数。因为卡方检验可以用于检测随机变量之间的依赖关系，因此我们可以用它来清除那些最有可能与类别不想关的特征，来减少噪音特征对分类的影响。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;sklearn.feature_selection.chi2(X, y)
&lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;
参数
---
    X: 特征矩阵 （n_samples * n_features_in 维）
    y: 标签向量 （n_samples * 1 维）

返回值
---
    chi2：每个特征的卡方统计量（n_features * 1 维）
    pval ：每个特征的p-value （n_features * 1 维）

算法时间复杂度O(n_samples * n_features_in)
&lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt; 2.2 基于方差分析的特征选择&lt;/h3&gt;
&lt;p&gt;　　方差是描述随机变量离散程度的统计量，其公式为：&lt;/p&gt;
&lt;p&gt;　　　　　　　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/1251096/201711/1251096-20171113134948984-847187131.png&quot; alt=&quot;&quot; width=&quot;293&quot; height=&quot;55&quot;/&gt;&lt;/p&gt;
&lt;p&gt;而分差分析基本思想认为不同特征对分类模型的贡献程度之所以不同，主要源自于各个特征在组内与组间离散程度存在差异，于是F-score就出现了:&lt;/p&gt;
&lt;p&gt;　　　　　　　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/1251096/201711/1251096-20171113141453327-1515710964.png&quot; alt=&quot;&quot; width=&quot;275&quot; height=&quot;192&quot;/&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;sklearn.feature_selection.f_classif(X, y)
&lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;
参数
---
    X: 特征矩阵 （n_samples * n_features_in 维）
    y: 标签向量 （n_samples * 1 维）

返回值
---
    F：每个特征的卡方统计量（n_features * 1 维）
    pval ：每个特征的p-value （n_features * 1 维）

算法时间复杂度O(n_samples * n_features_in)
&lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

</description>
<pubDate>Mon, 13 Nov 2017 06:21:00 +0000</pubDate>
<dc:creator>ML小菜鸟</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/lianyingteng/p/7821256.html</dc:identifier>
</item>
<item>
<title>数据库邮件 - 悦光阴</title>
<link>http://www.cnblogs.com/ljhdo/p/4552683.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/ljhdo/p/4552683.html</guid>
<description>&lt;p&gt;SQL Server数据库邮件使用 SMTP 服务器转发邮件，允许用户配置数据库邮件，并通过存储过程 &lt;span&gt;msdb.dbo.sp_send_dbmail&lt;/span&gt; 向特定的用户发送邮件，邮件的格式可以是文本、Excel、或HTML。数据库邮件的最大用处是向数据库运维人员及时发送异常信息，当数据库出现异常时，数据库系统可以在第一时间发送邮件通知数据库运维人员，这样便于尽快排除数据库运行的异常情况，保证数据库能够正常、持续地提供服务。 &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;一，配置数据库邮件&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;配置数据库邮件时，主要配置两个对象：Account 和 Profile，数据库账户（Account）包含SQL Server用于把邮件发送给SMTP 服务器的信息，包含外发（outgoing）的邮件地址，显示名（Display Name）以及使用SMTP服务器地址；每一个account包含一个SMTP 服务器。数据库邮件配置（Profile）是账户（Account）的有序集合，存储过程 msdb.dbo.sp_send_dbmail 或SQL Server Agent 使用Profile发送邮件，而不是直接使用Account。Profile提供邮件发送服务的自动故障转移（failover），由于一个Profile包含多个Account，当第一个Account出现故障时，Profile自动使用后续的Account发送邮件，实现邮件发送的自动故障转移。当SMTP服务器变更时，DBA只需要修改Account，而不需要修改Profile，使得编程更加灵活和可靠。&lt;/p&gt;
&lt;p&gt;下面的示例图展示数据库邮件的配置：3个Account，2个Profile，每个Profile都包含2个Account，&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/628084/201711/628084-20171113135946468-1678398997.png&quot; alt=&quot;&quot;/&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1，打开配置数据库邮件的向导&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在SSMS的Management目录中，右击“Database Mail”弹出快捷菜单，点击“Configure Database Mail”，打开数据库邮件配置向导 “Database Mail Configuration Wizard”，在向导界面上，选择“Set up Database Mail by performing the following tasks”选项，点击“Next”按钮，开始配置数据库邮件：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/628084/201711/628084-20171110134512903-412623435.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2，创建数据库邮件配置（Profile）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在发送数据库邮件之前，必须创建数据库邮件的配置（Profile），在配置中指定：邮件服务器（SMTP Server）的账户，一个数据库邮件配置可以包含多个SMTP 账户，点击“Add”按钮，添加SMTP Account：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images0.cnblogs.com/blog2015/628084/201506/041833500191469.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3，配置SMTP账户&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;配置新添加的SMTP Account，配置数据库邮件的发送地址（E-mail Address）及其显示名称（Display Name），邮件服务器的地址（在Server Name中填写邮件服务器的URL，在Port Number中填写端口号），和身份验证（SMTP Authentication）信息：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images0.cnblogs.com/blog2015/628084/201506/041837101769715.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;在配置Account时，有三种SMTP验证方式，分别是Windows域账户验证、基本验证（用户名和密码）、匿名验证，大多数STMP服务器都需要账户登陆，很少有匿名验证方式。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4，设置默认的Profile&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果设置了默认的Profile，执行msdb.dbo.sp_send_dbmail 时不需要&lt;strong&gt;@profile_name显式&lt;/strong&gt;指定配置名称：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images0.cnblogs.com/blog2015/628084/201506/041840480041964.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5，发送测试邮件&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;数据库邮件（Database Mail）自带有&quot;Send Test E-Mail&quot;和“View Database Mail Log”的功能，用来查看Database mail的发送情况。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images0.cnblogs.com/blog2015/628084/201506/041846573328295.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; 二，使用TSQL语句发送mail&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1，使用 msdb.dbo.sp_send_dbmail 发送mail，由于设置了default profile，所以不需要显示使用@Profile_Name来指定Profile。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;EXEC&lt;/span&gt;&lt;span&gt; msdb.dbo.sp_send_dbmail
    &lt;/span&gt;&lt;span&gt;@recipients&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;xxx@domainname.com&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
    ,&lt;/span&gt;&lt;span&gt;@subject&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Test email subject&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
    ,&lt;/span&gt;&lt;span&gt;@body&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;test email body&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
    &lt;span&gt;--&lt;/span&gt;&lt;span&gt;,@profile_name='default'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;使用msdb.dbo.sp_send_dbmail也能发送HTML格式的mail，需要在参数&lt;strong&gt;@body_format指定格式。&lt;/strong&gt;&lt;br/&gt;[ &lt;strong&gt;@body_format&lt;/strong&gt;&lt;strong&gt;=&lt;/strong&gt; ] &lt;strong&gt;'&lt;/strong&gt;&lt;em&gt;body_format&lt;/em&gt;&lt;strong&gt;'&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;默认值是Text，表示发送的是邮件正文是text格式；HTML格式，可以使用HTML 标签&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2，发送text格式的邮件&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;EXEC&lt;/span&gt;&lt;span&gt; msdb.dbo.sp_send_dbmail
    &lt;/span&gt;&lt;span&gt;@recipients&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;xxx@domainname.com&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
    ,&lt;/span&gt;&lt;span&gt;@subject&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Test email subject&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
    ,&lt;/span&gt;&lt;span&gt;@body&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;test email body&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
    &lt;span&gt;--&lt;/span&gt;&lt;span&gt;,@profile_name='default_ProfileName'&lt;/span&gt;
    &lt;span&gt;--&lt;/span&gt;&lt;span&gt;,@body_format='text'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;@Body_Format 参数的默认值是Text&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3，发送Html格式的mail&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;declare&lt;/span&gt; &lt;span&gt;@htmlbody&lt;/span&gt; &lt;span&gt;varchar&lt;/span&gt;(&lt;span&gt;max&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;set&lt;/span&gt; &lt;span&gt;@htmlbody&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;&amp;lt;table&amp;gt;
&amp;lt;tr&amp;gt;
    &amp;lt;td&amp;gt;first row&amp;lt;/td&amp;gt;
&amp;lt;/tr&amp;gt;
&amp;lt;tr&amp;gt;
    &amp;lt;td&amp;gt;second row&amp;lt;/td&amp;gt;
&amp;lt;/tr&amp;gt;
&amp;lt;/table&amp;gt;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;

&lt;span&gt;EXEC&lt;/span&gt;&lt;span&gt; msdb.dbo.sp_send_dbmail
    &lt;/span&gt;&lt;span&gt;@recipients&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;xxx@domainname.com&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
    ,&lt;/span&gt;&lt;span&gt;@subject&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Test email subject&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
    ,&lt;/span&gt;&lt;span&gt;@body&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;@htmlbody&lt;/span&gt;
    &lt;span&gt;--&lt;/span&gt;&lt;span&gt;,@profile_name='default_ProfileName'&lt;/span&gt;
    ,&lt;span&gt;@body_format&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Html&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;4，将查询结果作为mail的body&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;存储过程 msdb.dbo.sp_send_dbmail 可以执行一个select 查询子句，并将查询结果作为一个附件发送出去。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;EXEC&lt;/span&gt;&lt;span&gt; msdb.dbo.sp_send_dbmail
    &lt;/span&gt;&lt;span&gt;@recipients&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;xxx@domainname.com&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
    ,&lt;/span&gt;&lt;span&gt;@subject&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Test email subject&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
    &lt;span&gt;--&lt;/span&gt;&lt;span&gt;,@profile_name='default_ProfileName'&lt;/span&gt;
    &lt;span&gt;--&lt;/span&gt;&lt;span&gt;,@body_format='text'&lt;/span&gt;
    ,&lt;span&gt;@query&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;select * from db_study.dbo.test&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
    ,&lt;/span&gt;&lt;span&gt;@attach_query_result_as_file&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;参考文档：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://msdn.microsoft.com/en-sg/library/ms190307(v=sql.110).aspx&quot; target=&quot;_blank&quot;&gt;sp_send_dbmail (Transact-SQL)&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Mon, 13 Nov 2017 06:16:00 +0000</pubDate>
<dc:creator>悦光阴</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/ljhdo/p/4552683.html</dc:identifier>
</item>
<item>
<title>从零开始搭建Vue组件库 VV-UI - MonkeyWang</title>
<link>http://www.cnblogs.com/tiedaweishao/p/7825997.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/tiedaweishao/p/7825997.html</guid>
<description>&lt;h2&gt;前言：&lt;/h2&gt;
&lt;p&gt;前端组件化是当今热议的话题之一，也是我们在开发单页应用经常会碰到的一个问题，现在我们有了功能非常完善的Element-UI。各个大厂也相继宣布开源XXX-UI。但是也会存在一些问题，比如每个公司可能需要的业务组件不尽相同，或者我们想自己开发一套属于自己的组件库，来增强对组件的可控性。那么我们该如何去做呢？&lt;br/&gt;这里记录一下我从零开始搭建起来的组件库的过程，目前只有简单几个组件，不过我也会慢慢更新维护。&lt;/p&gt;
&lt;p&gt;项目github地址：&lt;span&gt;&lt;a class=&quot; wrap external&quot; href=&quot;http://link.zhihu.com/?target=https%3A//github.com/VV-UI/VV-UI&quot; rel=&quot;nofollow noreferrer&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;github&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;br/&gt;项目演示地址： &lt;span&gt;&lt;a class=&quot; wrap external&quot; href=&quot;http://link.zhihu.com/?target=https%3A//vv-ui.github.io/VV-UI&quot; rel=&quot;nofollow noreferrer&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;演示&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;1. 环境准备&lt;/h2&gt;
&lt;p&gt;我们搭建组件库，需要准备一系列环境，首先我们要考虑一下问题：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;脚手架如何搭建&lt;/li&gt;
&lt;li&gt;如何规划目录结构&lt;/li&gt;
&lt;li&gt;如何编写文档&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;首先，对于脚手架环境的问题，目前已经有非常成熟的vue官方的脚手架，我们拿来用就好了&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;6.5&quot;&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
# 全局安装 vue-cli
$ npm install --global vue-cli
# 创建一个基于 webpack 模板的新项目
$ vue init webpack my-project
# 安装依赖，走你
$ cd my-project
$ npm install
$ npm run dev
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;p&gt;接着我们看第二个问题，如何规划好我们组建的目录结构？首先我们需要有一个目录存放组件，有一个目录存放示例。所以我们要对vue-cli 生成的项目结构做一下改造：&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;6.5&quot;&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
.
...
|-- examples      // 原 src 目录，改成 examples 用作示例展示
|-- packages      // 新增 packages 用于编写存放组件
...
. 
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;p&gt;这样的话 我们需要再把我们webpack配置文件稍作一下调整，首先是把原先的编译指向src的目录改成examples，其次为了 &lt;code&gt;npm run build&lt;/code&gt; 能正常编译 packages 我们也需要为 babel-loader 再增加一个编译目录：&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;8.5&quot;&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;37&quot;&gt;
&lt;pre class=&quot;brush:javascript;gutter:true;&quot;&gt;
{
   test: /\.js$/,
   loader: 'babel-loader',
   include: [resolve('examples'), resolve('test'), resolve('packages')]
}
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;p&gt;这样我们搭建起来一个简易的目录结构。&lt;br/&gt;紧接着我们需要考虑如何编写文档。对于文档的编写，自然是markdown最合适不过了，那么怎么让我们在vue下可以去写 markdown 文档呢？答案当然是 &lt;a class=&quot; wrap external&quot; href=&quot;http://link.zhihu.com/?target=https%3A//github.com/QingWei-Li/vue-markdown-loader&quot; rel=&quot;nofollow noreferrer&quot; target=&quot;_blank&quot;&gt;vue-markdown-loader&lt;/a&gt;。然后我们按照文档配置了相关的插件信息：&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;6.5&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;rules: [
   {
     test: &lt;/span&gt;/\.md$/&lt;span&gt;,
     loader: &lt;/span&gt;'vue-markdown-loader'&lt;span&gt;
   }
 ]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;p&gt;好了，我们可以开始尝试写文档了，在 example/docs 目录下新建 test.md。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;language-text&quot;&gt;# test
&amp;gt; Hello World
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;同时创建一个新的路由，指向我们的md文件：&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;8&quot;&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;36&quot;&gt;
&lt;pre class=&quot;brush:javascript;gutter:true;&quot;&gt;
{
  path: '/test',
  name: 'test',
  component: r =&amp;gt; require.ensure([], () =&amp;gt; r(require('../docs/test.md')))
}
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;p&gt;打开我们的浏览器&lt;code&gt;http://localhost:8080/#/test&lt;/code&gt; 哈哈 真的成功了。别高兴的太早.... 问题还在后面：我们期望的文档不仅能编译markdown，而且最好能识别demo代码块一方面做演示，一方面可以显示演示代码最好了，就像这样：&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;origin_image zh-lightbox-thumb lazy&quot; src=&quot;https://pic4.zhimg.com/50/v2-3efef9279f00b17427e2bd6a622ab3cb_hd.jpg&quot; alt=&quot;&quot; width=&quot;799&quot; data-caption=&quot;&quot; data-rawwidth=&quot;799&quot; data-rawheight=&quot;282&quot; data-original=&quot;https://pic4.zhimg.com/v2-3efef9279f00b17427e2bd6a622ab3cb_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-3efef9279f00b17427e2bd6a622ab3cb_b.jpg&quot;/&gt;&lt;/p&gt;
&lt;p&gt;那我们需要怎么做呢？vue-mark-down 功能肯定不止这些！于是我们继续阅读它的文档，发现其实他就是封装了 &lt;a class=&quot; wrap external&quot; href=&quot;http://link.zhihu.com/?target=https%3A//github.com/markdown-it/markdown-it%23init-with-presets-and-options&quot; rel=&quot;nofollow noreferrer&quot; target=&quot;_blank&quot;&gt;markdown-it&lt;/a&gt;，支持 options 选项。这样我们就可以为我们的markdown定义独特的标识符，这里我用 demo 标识需要显示代码块的地方，所以我需要配置options 选项 ：&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;11&quot;&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;42&quot;&gt;
&lt;pre class=&quot;brush:javascript;gutter:true;&quot;&gt;
const vueMarkdown = {
  preprocess: (MarkdownIt, source) =&amp;gt; {
    MarkdownIt.renderer.rules.table_open = function () {
      return '&amp;lt;table class=&quot;table&quot;&amp;gt;'
    }
    MarkdownIt.renderer.rules.fence = utils.wrapCustomClass(MarkdownIt.renderer.rules.fence)
    return source
  },
  use: [
    [MarkdownItContainer, 'demo', {
      // 用于校验包含demo的代码块
      validate: params =&amp;gt; params.trim().match(/^demo\s*(.*)$/),
      render: function(tokens, idx) {
        
        var m = tokens[idx].info.trim().match(/^demo\s*(.*)$/);

        if (tokens[idx].nesting === 1) {
          var desc = tokens[idx + 2].content;
          // 编译成html
          const html = utils.convertHtml(striptags(tokens[idx + 1].content, 'script'))
          // 移除描述，防止被添加到代码块
          tokens[idx + 2].children = [];

          return `&amp;lt;demo-block&amp;gt;
                        &amp;lt;div slot=&quot;desc&quot;&amp;gt;${html}&amp;lt;/div&amp;gt;
                        &amp;lt;div slot=&quot;highlight&quot;&amp;gt;`;
        }
        return '&amp;lt;/div&amp;gt;&amp;lt;/demo-block&amp;gt;\n';
      }
    }]
  ]
}
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;p&gt;这里简单的描述一下这段代码是干什么的：首先把内容里面vue片段编译成html，用于显示，另一方面用highlight来高亮代码块。&lt;code&gt;demo-block&lt;/code&gt;本身是我们定义好的组件：&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;7.5&quot;&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:javascript;gutter:true;&quot;&gt;
&amp;lt;template&amp;gt;
  &amp;lt;div class=&quot;docs-demo-wrapper&quot;&amp;gt;
      &amp;lt;div :style=&quot;{maxHeight: isExpand ? '700px' : '0'}&quot; class=&quot;demo-container&quot;&amp;gt;
        &amp;lt;div span=&quot;14&quot;&amp;gt;
          &amp;lt;div class=&quot;docs-demo docs-demo--expand&quot;&amp;gt;
            &amp;lt;div class=&quot;highlight-wrapper&quot;&amp;gt;
              &amp;lt;slot name=&quot;highlight&quot;&amp;gt;&amp;lt;/slot&amp;gt;
            &amp;lt;/div&amp;gt;
          &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
      &amp;lt;/div&amp;gt;
    &amp;lt;span 
           class=&quot;docs-trans docs-demo__triangle&quot; 
           @click=&quot;toggle&quot;&amp;gt;{{isExpand ? '隐藏代码' : '显示代码'}}&amp;lt;/span&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;p&gt;这样，我们的 test.md 便可以这么去写了：&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;origin_image zh-lightbox-thumb lazy&quot; src=&quot;https://pic1.zhimg.com/50/v2-a61993213a448470ff23a0ef5daeaa10_hd.jpg&quot; alt=&quot;&quot; width=&quot;849&quot; data-caption=&quot;&quot; data-rawwidth=&quot;849&quot; data-rawheight=&quot;358&quot; data-original=&quot;https://pic1.zhimg.com/v2-a61993213a448470ff23a0ef5daeaa10_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-a61993213a448470ff23a0ef5daeaa10_b.jpg&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;2. 如何编写组件&lt;/h2&gt;
&lt;p&gt;环境准备完毕，紧接着要开始编写组件，考虑的是组件库，所以我们竟可能让我们的组件支持全局引入和按需引入，如果全局引入，那么所有的组件需要要注册到Vue component 上，并导出：&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;7&quot;&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;34&quot;&gt;
&lt;pre class=&quot;brush:javascript;gutter:true;&quot;&gt;
const install = function(Vue) {
  if (install.installed) return;
  components.map(component =&amp;gt; Vue.component(component.name, component));
};

export default {
  install
};
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;p&gt;接着要实现按需加载，我们只需要单个导出组件即可：&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;10.5&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
import Button from './button/index.js'&lt;span&gt;;
import Row from &lt;/span&gt;'./row/index'&lt;span&gt;
import Col from &lt;/span&gt;'./col/index'&lt;span&gt;

const components &lt;/span&gt;=&lt;span&gt; [
  Button,
  Row,
  Col
];

const install &lt;/span&gt;= &lt;span&gt;function&lt;/span&gt;&lt;span&gt;(Vue) {
  &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (install.installed) &lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
  components.map(component &lt;/span&gt;=&amp;gt;&lt;span&gt; Vue.component(component.name, component));
};

&lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (&lt;span&gt;typeof&lt;/span&gt; window !== 'undefined' &amp;amp;&amp;amp;&lt;span&gt; window.Vue) {
  install(window.Vue);
}

export &lt;/span&gt;&lt;span&gt;default&lt;/span&gt;&lt;span&gt; {
  install,
  Button,
  Row,
  Col
};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;p&gt;其次，我们还需要考虑一个问题：既然是单页面应用，必然要去解决样式冲突问题，如果组件内使用soped，那么样式就无法从组件内抽离出来，达不到可定制化主题颜色的目的。我们需要一套可以分离处理的样式，可以自行编译，可以相互不污染。这时候css 的BEM规范就显得尤为重要。如果你还不知道什么是BEM 参考： &lt;a class=&quot; external&quot; href=&quot;http://link.zhihu.com/?target=http%3A//www.w3cplus.com/css/css-architecture-1.html&quot; rel=&quot;nofollow noreferrer&quot; target=&quot;_blank&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://www.&lt;span class=&quot;visible&quot;&gt;w3cplus.com/css/css-arc&lt;span class=&quot;invisible&quot;&gt;hitecture-1.html&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;。&lt;br/&gt;说到这里，目前对BEM规范支持较好的插件就是postcss了，他允许我们配置BEM之间的连接符和缩写：&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;9.5&quot;&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;39&quot;&gt;
&lt;pre class=&quot;brush:javascript;gutter:true;&quot;&gt;
{
  &quot;browsers&quot;: [&quot;ie &amp;gt; 8&quot;, &quot;last 2 versions&quot;],
  &quot;features&quot;: {
    &quot;bem&quot;: {
      &quot;shortcuts&quot;: {
        &quot;component&quot;: &quot;b&quot;,
        &quot;modifier&quot;: &quot;m&quot;,
        &quot;descendent&quot;: &quot;e&quot;
      },
      &quot;separators&quot;: {
        &quot;descendent&quot;: &quot;__&quot;,
        &quot;modifier&quot;: &quot;--&quot;
      }
    }
  }
}
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;p&gt;这样我们就可以把样式单独的抽离出来，通过gulp进行打包编译：&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;7&quot;&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;34&quot;&gt;
&lt;pre class=&quot;brush:javascript;gutter:true;&quot;&gt;
gulp.task('compile', function() {
  return gulp.src('./src/*.css')
    .pipe(postcss([salad]))
    .pipe(cssmin())
    .pipe(gulp.dest('./lib'));
});
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;p&gt;最后生成我们的样式代码。&lt;/p&gt;
&lt;p&gt;好了开始我们的测试：&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;6&quot;&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:javascript;gutter:true;&quot;&gt;
import VVUI from '../packages/index'
import '../packages/theme-default/lib/index.css'

Vue.use(VVUI)
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;p&gt;一切显得那么美好....&lt;/p&gt;
&lt;h2&gt;优化与不足&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;组件导出代码暂不支持自动化生成：比如我们的组件index文件，每次添加组件都需要不断地改写，我们2*&lt;br/&gt;可以尝试进行webpack配置，&lt;code&gt;npm run dev&lt;/code&gt; 的时候自动进行组件检测，然后帮我们写好导出代码。&lt;/li&gt;
&lt;li&gt;目录结构划分缺陷：目前所有内容仅支持中文，如果想要做到支持国际化，那么还需要重新调整目录结构。&lt;/li&gt;
&lt;li&gt;发布tag： 需要编写脚本支持tag发布&lt;/li&gt;
&lt;li&gt;组件太少：文档刚写，组件还不是很多，慢慢去维护，相信会越来越多的组件，做业务的过程中也可以把常用的组件加进去，这样更加方便自己以后的维护和学习&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;结语：&lt;/h2&gt;
&lt;p&gt;项目github地址：&lt;span&gt;&lt;a class=&quot; wrap external&quot; href=&quot;http://link.zhihu.com/?target=https%3A//github.com/VV-UI/VV-UI&quot; rel=&quot;nofollow noreferrer&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;github&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;br/&gt;项目演示地址： &lt;span&gt;&lt;a class=&quot; wrap external&quot; href=&quot;http://link.zhihu.com/?target=https%3A//vv-ui.github.io/VV-UI&quot; rel=&quot;nofollow noreferrer&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;演示&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;br/&gt;欢迎 PR 一起维护，欢迎 Star&lt;/p&gt;
&lt;h2&gt;关于&lt;/h2&gt;
&lt;p&gt;作者：monkeyWang&lt;/p&gt;
&lt;p&gt;本人主页：&lt;a class=&quot; wrap external&quot; href=&quot;http://link.zhihu.com/?target=https%3A//monkeywangs.github.io/&quot; rel=&quot;nofollow noreferrer&quot; target=&quot;_blank&quot;&gt;monkeyWang&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;微信公众号：前端知识铺&lt;/p&gt;
</description>
<pubDate>Mon, 13 Nov 2017 05:58:00 +0000</pubDate>
<dc:creator>MonkeyWang</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/tiedaweishao/p/7825997.html</dc:identifier>
</item>
<item>
<title>Hadoop 2.2.0单节点的伪分布集成环境搭建 - 子墨言凉</title>
<link>http://www.cnblogs.com/zimo-jing/p/7822108.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/zimo-jing/p/7822108.html</guid>
<description>&lt;p&gt;&lt;strong&gt;&lt;span&gt;Hadoop版本发展历史&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;span&gt;第一代Hadoop被称为Hadoop 1.0&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　1）0.20.x&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　2）0.21.x&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　3）0.22.x&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　第二代Hadoop被称为Hadoop 2.0（HDFS Federation、YARN）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　1）0.23.x&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　2）2.x&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　3）2.2.0     稳定版本     Namenode     HA&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　4）2.4     ResourceManager    HA&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　5）2.6     稳定版本&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　6）2.7     jdk1.7&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;Hadoop角色部署&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;span&gt;Hadoop的安装模式分为三种：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　1）单机模式：默认的安装模式，占用资源少，不需要修改配置文件，且完全运行于本地，不需要与其它节点进行交互，也不需要使用HDFS文件系统和加载任何守护进程，主要应用于开发调试MapReduce应用程序。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　2）伪分布模式：也即单节点集成模式，其所有守护进程都运行在同一台机器上（比如Namenode、Datanode、Nodemanager、ResourceManger和、SecondaryNamenode等）；这种模式增加了代码的调试功能，可查看内存情况、HDFS的输入和输出、以及其它守护进城之间的交互。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　3）全分布模式：主要用于生产环境，且在实际应用中均使用分布式集群。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　考虑到大家学习时的硬件条件限制，我们将安装第二种伪分布模式并将Namenode、Datanode、Nodemanager、ResourceManger和、SecondaryNamenode配置到同一节点。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;Hadoop环境安装准备&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;span&gt;Centos系统&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　版本：6.5&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　JDK&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　版本：1.7.0&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　Hadoop&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　版本：2.2.0 稳定版本&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　注意：为了避免许多不必要的错误，以上各环境位数应该保持一致，我们选择为64位。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;Hadoop伪分布环境搭建&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;span&gt;安装过程主要分为三步：JDK安装、&lt;span&gt;.SSH无密码访问配置和&lt;/span&gt;&lt;span&gt;Hadoop环境配置&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　&lt;span&gt;　1. JDK安装&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　&lt;span&gt;　首先使用Xshell工具登陆到虚拟机环境下（虚拟机安装及配置点击此处跳转：&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;a id=&quot;cb_post_title_url&quot; class=&quot;postTitle2&quot; href=&quot;http://www.cnblogs.com/zlslch/p/5063709.html&quot;&gt;CentOS 6.5的安装详解&lt;/a&gt;，在此感谢“大数据躺过的坑”博主为我们提供的如此详尽的介绍&lt;span&gt;），首先检查是否已经安装JDK，在命令行下输入java -version命&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;令，结果如下图所示：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1149704/201711/1149704-20171112150257403-1456400656.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　很明显现在我们还没有安装JDK，于是接下来我们就一起来学习如何从零开始搭建我们的JDK环境。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　首先，查看我们Centos系统位数：file /bin/ls；结果如下，我们的Centos系统为64位，所以我们的JDK、SSH和Hadoop也必须保持位数一致。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1149704/201711/1149704-20171112151945856-1196477337.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　我们先在usr目录下创建个java目录作为存放JDK的目录：首先进入根目录cd /，列出目录信息ls，然后进入usr目录，并创建java目录mkdir java，此时java应该为空目录，如图所示：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1149704/201711/1149704-20171112152944919-173759742.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　然后，将本地下载好的jdk1.7.0包放到本地目录，再使用rz命令上传。首先，我们先运行rz命令，检查是否已经安装此命令。结果如图（由于我已经安装过此命令，下图为网上找到错误示例图）：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1149704/201711/1149704-20171112153702809-1585498528.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　很明显，如果第一次使用一定是没有安装的，接下来我们先安装此命令（如果已经安装的则跳过以下rz工具包安装过程）。我们运行在线下载命令即可直接进行安装：yum -y install lrzsz（yum为包管理器，可帮助我们快速实现在线下载，-y命令可在下载后直接安装而跳过其中的询问过程，推荐使用）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1149704/201711/1149704-20171112154433294-2045469863.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　此图显示的即为安装过程，如果出现下图所示信息，则表示安装完成。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1149704/201711/1149704-20171112154554169-265246244.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　接下来，我们使用rz命令上传jdk1.7.0包（前提得先下载好放到本地，可到官网自行下载：http://www.oracle.com/technetwork/java/javase/downloads/index.html），运行日志命令后会弹出以下选择框进行上传文件选择，我们选中下载好的包上传即可。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1149704/201711/1149704-20171112155008106-1479893670.png&quot; alt=&quot;&quot;/&gt;              &lt;img src=&quot;http://images2017.cnblogs.com/blog/1149704/201711/1149704-20171112155041513-1955616628.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　此时，输入ls命令查看即可发现文件已成功上传：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1149704/201711/1149704-20171112155414872-657637059.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　运行tar zxvf jdk-7u79-linux-x64.tar.gz命令进行解压，解压完成后再使用ls命令进行查看，此时可看到已经成功解压出来了，接下来的关键步骤是设置JDK环境变量。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1149704/201711/1149704-20171112155842231-975670049.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　我们依次运行下图中命令即可创建java环境变量的脚本文件&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1149704/201711/1149704-20171112160332419-521193247.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　进入后输入“i“进入编辑模式，在此模式下想文档中写入一下内容：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/1149704/201711/1149704-20171112160755872-229241348.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　输完以上内容之后，先按Esc键退出编辑模式，然后按下Shift+；组合键并输入wq或x保存退出。此时，直接输入java -version命令还是会出错（如下图所以），为什么呢？&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1149704/201711/1149704-20171112161209809-1422465144.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　因为我们此时只是生产了该配置文件，但它还没有生效，所以需要使用source命令使其生效，然后再运行就成功了。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　到此，JDK的安装就已经完成了。肯定很多人会问我为什么不把命令全部输出来，那大家拷贝粘贴多方便，而要采取截屏的方式展示，那我有必要说一下我的想法。首先，截屏能让大家对于我的操作理解得更形象一点，而不会有种云里雾里的感觉；再者，学习本身就是一个实践的过程，如果大家只是复制粘贴，那本博文就没有任何意义了，我希望各位能亲身体会Linux的环境以及操作，这样才能真正起到学习的作用。所以，希望大家不要复制粘贴我的命令，而是自己完完全全敲上一两遍，自己去切身体会一下Linux系统本身，以及各命令的语法和作用机制。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;span&gt;2. SSH无密码访问配置&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;span&gt;首先，我们先修改一下host文件，添加hostname与IP之间的对应关系，以方便我们访问。输入ipconfig命令查看IP配置信息：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1149704/201711/1149704-20171112222230341-588828916.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　然后，输入vi /etc/hosts，进入host文件并在末尾添加一行配置：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1149704/201711/1149704-20171112222143528-1530183812.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　接下来，我们需要创建一个新的用户来安装Hadoop环境。首先，创建用户组；然后，新建Hadoop用户，并添加到Hadoop用户组中。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1149704/201711/1149704-20171112163607528-1705834075.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　注意，在配置Hadoop环境之前，我们需要先关闭防火墙，首先查看防火墙状态：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1149704/201711/1149704-20171112163903903-917428142.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　关闭防火墙：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1149704/201711/1149704-20171112164134106-417145742.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;    &lt;img src=&quot;http://images2017.cnblogs.com/blog/1149704/201711/1149704-20171112164222138-330379201.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　接下来是&lt;strong&gt;SSH无密码验证配置：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　&lt;/strong&gt;我们使用新创建的hadoop用户，并进入根目录下，一次输入一下命令，创建秘钥：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1149704/201711/1149704-20171112164516919-1559599924.png&quot; alt=&quot;&quot;/&gt;  &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1149704/201711/1149704-20171112164852106-1939477949.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1149704/201711/1149704-20171112165206528-2060297536.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　然后将公钥复制到认证文件中去&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1149704/201711/1149704-20171112165445981-1448506527.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　使用vi命令进行查看：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1149704/201711/1149704-20171112165552481-1150867188.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　设置文件权限：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1149704/201711/1149704-20171112165911184-920222296.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　使用ssh访问当前节点，如果出现下图所示内容表示SSH无密码访问配置成功：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1149704/201711/1149704-20171112222511841-439774262.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;strong&gt;3. Hadoop伪分布环境搭建及配置&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; 　&lt;span&gt;　在这里，我选择把Hadoop安装到我们刚开始时创建的java目录里。我们先进入该目录，然后切换到我们的root用户，再使用wget命令实现在线下载：&lt;img src=&quot;http://images2017.cnblogs.com/blog/1149704/201711/1149704-20171113085627421-2096541349.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　由于是第一次使用，所以wget命令并没有安装，于是我们先安装此命令再进行下载：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1149704/201711/1149704-20171113090037890-2015733687.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　安装完成后再次运行命令以下载Hadoop：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1149704/201711/1149704-20171113090407484-1414688268.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　下载完后我们可用ls命令查看下载的安装包，然后解压该文件进行安装：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1149704/201711/1149704-20171113090617499-701688316.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　如图所示，解压成功并修改文件名为hadoop。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1149704/201711/1149704-20171113090907687-1418242484.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　我们查看文件可知Hadoop文件权限为root用户，于是我们需要将文件权限赋给Hadoop用户。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1149704/201711/1149704-20171113091154781-987585093.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　接下来就是创建hadoop的数据目录，并将权限赋给hadoop用户。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1149704/201711/1149704-20171113091910656-2097172053.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　hadoop的环境就基本搭建完毕了，然后我们需要修改一下hadoop的配置文件。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1149704/201711/1149704-20171113092632062-1566887158.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　如上图大方框中所示的都是其配置文件，我们需要修改core-site.xml、hdfs-siteml配置文件（注意：一下所有文件修改都是用过vi+文件名指令进行）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1149704/201711/1149704-20171113094118077-1587895217.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/1149704/201711/1149704-20171113123301859-401361301.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; 　　接下来我们要编译一下文件：mapred-site.xml、yarn-site.xml和slaves文件。编辑mapred-site.xml文件之前我们要先执行cp mapred-site.xml.template mapred-site.xml命令以生成mapred-site.xml配置文件，然后分别用vi/vim命令进行编辑，分别添加一下内容：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1149704/201711/1149704-20171113125459343-977731896.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1149704/201711/1149704-20171113125705312-628998445.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　以下指定DataNode和Namenode在同一节点上：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1149704/201711/1149704-20171113125309109-562387692.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　接下来，我们需要设置hadoop环境变量，此操作必须在root用户下操作，然后在配置文件末尾追加以下内容：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1149704/201711/1149704-20171113130108109-852011580.png&quot; alt=&quot;&quot;/&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/1149704/201711/1149704-20171113130159343-90670280.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　最后，我们使用resource /etc/profile命令使配置生效。到此为止，我们已经完成了hadoop的安装与配置工作。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　&lt;strong&gt;　&lt;span&gt;4. 测试与运行&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　我们先切换到hadoop目录，退到安装目录，然后格式化Namenode。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1149704/201711/1149704-20171113130758562-947648451.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　　　接下来我们启动集群并查看进程（由于我已经启动过，所以内容喝你妹稍有不同，但我们可以看到已经启动了的进程，如大方框所示）：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1149704/201711/1149704-20171113131142906-1417352776.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　到此，hadoop2.2.0单节点伪分布集成环境就搭建完成了。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　然后我们就可以在网页上查看我们的Hadoop环境的情况了！&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1149704/201711/1149704-20171113133812859-230241501.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;/span&gt;&lt;span&gt;为了方便访问，我们可以在Windows下配置hostname到IP地址的对应关系。首先以管理员身份运行记事本，然后打开C:\Windows\System32\drivers\etc下的hosts.txt文件，在文件末尾加入一行配置：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1149704/201711/1149704-20171113132232890-1165898266.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; 　&lt;span&gt;　配置好后就可以用我们的主机名替代IP地址进行访问了。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;　　&lt;span&gt;以上均为博主自己的学习过程，希望能给大家带来一定的指导作用，有用的还望大家点个支持，如果对你没用也望包含，有错误烦请指出，谢谢！&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

























</description>
<pubDate>Mon, 13 Nov 2017 05:40:00 +0000</pubDate>
<dc:creator>子墨言凉</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/zimo-jing/p/7822108.html</dc:identifier>
</item>
<item>
<title>数据结构（二）——树结构模型及应用 - yhthu</title>
<link>http://www.cnblogs.com/younghao/p/7819624.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/younghao/p/7819624.html</guid>
<description>&lt;p&gt;基于树实现的数据结构，具有两个核心特征：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;逻辑结构：数据元素之间具有层次关系；&lt;/li&gt;
&lt;li&gt;数据运算：操作方法具有Log级的平均时间复杂度。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;因此，树在文件系统、编译器、索引以及查找算法中有很广的应用，本节将以&lt;strong&gt;树-二叉树-二叉搜索树-自平衡二叉树&lt;/strong&gt;为线索，对树及其扩展结构进行说明。&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;栈和队列在遍历树结构时的作用&lt;/li&gt;
&lt;li&gt;使用二叉树对表达式进行解析&lt;/li&gt;
&lt;li&gt;二叉搜索树的排序特征&lt;/li&gt;
&lt;li&gt;保证最坏情况时间复杂度&lt;/li&gt;
&lt;li&gt;Java中的红黑树实例&lt;/li&gt;
&lt;/ol&gt;&lt;h2 id=&quot;一栈和队列在遍历树结构时的作用&quot;&gt;一、栈和队列在遍历树结构时的作用&lt;/h2&gt;
&lt;p&gt;软件是通过数据和算法实现对现实世界的抽象，具有层次关系的数据在现实世界中能找到很多实例，比如：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;公司组织架构：董事长-CXO-总监-经理-主管-员工；&lt;/li&gt;
&lt;li&gt;中国行政区域划分：中国-省-市（县）-街道（小区）-门牌号；&lt;/li&gt;
&lt;li&gt;汽车产品库：车-品牌-车系-配置。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;因此，它们均可抽象为树，例如，公司组织架构可以用下图来描述：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3923557-a69f9b22c7a35fb9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/800&quot; alt=&quot;公司组织架构简图&quot;/&gt;&lt;/p&gt;
&lt;p&gt;如果对整个公司的人员进行梳理，那么就涉及到对上述架构树进行遍历。树的遍历指的是按照某种规则，不重复地访问树的所有节点的过程。由于树并非线性数据结构（比如上节所描述的线性表），因此其遍历根据访问节点的顺序，可划分为不同的方式：深度优先遍历和广度优先遍历。两者的区别在于：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;深度优先遍历会沿着树的深度遍历树的节点，尽可能深的搜索树的分支；&lt;/li&gt;
&lt;li&gt;广度优先遍历从根节点开始，沿着树的宽度遍历树的节点。&lt;/li&gt;
&lt;/ul&gt;&lt;h4 id=&quot;栈与深度优先遍历&quot;&gt;1.1 栈与深度优先遍历&lt;/h4&gt;
&lt;p&gt;深度优先遍历可进一步按照根节点与其左右子节点的访问先后顺序划分为前序遍历、中序遍历和后序遍历。根节点放在左节点的左边，称为前序遍历；根节点放在左节点和右节点的中间，称为中序遍历；根节点放在右节点的右边，称为后序遍历。树的定义通常采用递归的方式，即其节点域中包含对自身类的引用，因此树的遍历也常用递归方式来实现，下面通过伪代码对上述遍历方式进行说明。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;private void traversal(TreeNode root) {
    // 终止条件
    if (root == null) {
        return;
    }
    // 1. 前序遍历
    // print(root.getName());
    if (root.getlChild() != null) {
        traversal(root.getlChild());
    }
    //  2. 中序遍历
    // print(root.getName());
    if (root.getrChild() != null) {
        traversal(root.getrChild());
    }
    // 3. 后序遍历
    // print(root.getName());
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;可见，三种遍历方式的差别仅在于对根节点与左右子节点的访问先后顺序。针对上述组织架构图，三种遍历方式的结果分别为（只有一个子节点时，默认为左节点）：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;前序遍历：A0-B0-C0-D0-E0-E1-C1-D1-E2-D2-E3-B1-C2-D3-E4-E5-C3-D4-E6&lt;/li&gt;
&lt;li&gt;中序遍历：E0-D0-E1-C0-B0-E2-D1-C1-E3-D2-A0-E4-D3-E5-C2-B1-E6-D4-C3&lt;/li&gt;
&lt;li&gt;后序遍历：E0-E1-D0-C0-E2-D1-E3-D2-C1-B0-E4-E5-D3-C2-E6-D4-C3-B1-A0&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;递归的本质是通过调用栈实现了局部变量的存储，而通过在代码中实例化栈当然也能实现该功能，所以，深度优先遍历也可采用非递归的实现，下面基于LinkedList的栈特性来实现树的前序遍历：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;private void traversalWithStack(TreeNode root) {
    // 1. 初始化栈并将根节点压栈
    Deque&amp;lt;TreeNode&amp;gt; stack = new LinkedList&amp;lt;&amp;gt;();
    stack.push(root);
    // 2. 循环遍历直到栈为空
    while (!stack.isEmpty()) {
        // 3. 取出栈顶节点，并对其域进行访问
        TreeNode head = stack.pop();
        print(head.getName());
        // 4. 判断右子节点、左子节点是否为空，将其入队
        if (head.getrChild() != null) {
            stack.push(head.getrChild());
        }
        if (head.getlChild() != null) {
            stack.push(head.getlChild());
        }
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;可以看出，递归与非递归的实现方式非常类似，只是前者采用方法的调用栈保存本层方法的局部变量，后者采用代码栈实现（上节已讲到LinkedList实现了Deque接口，其包含了栈和队列的常用操作方法）变量的保存而已。需要注意的是，后者需要先将右子节点进栈再将左子节点进栈。中序遍历与后序遍历也可通过非递归的方式来实现，读者可自行理解。&lt;/p&gt;
&lt;h4 id=&quot;队列与广度优先遍历&quot;&gt;1.2 队列与广度优先遍历&lt;/h4&gt;
&lt;p&gt;树的广度优先遍历也称为按层次遍历，即从根节点开始，一层一层的访问。实现的核心是通过队列的入队和出队操作，具体如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;private void layerTraver(TreeNode root) {
    // 1. 初始化队列并将根节点入队
    Queue&amp;lt;TreeNode&amp;gt; queue = new LinkedList&amp;lt;&amp;gt;();
    queue.offer(root);
    // 2. 循环遍历队列直到队列为空
    while (!queue.isEmpty()) {
        // 3. 取出头结点，并对其域进行访问
        TreeNode head = queue.poll(); 
        print(head.getName());
        // 4. 判断左右子节点是否为空，将其入队
        if (head.getlChild() != null) {
            queue.offer(head.getlChild());
        }
        if (head.getrChild() != null) {
            queue.offer(head.getrChild());
        }
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;因此，采用广度优先遍历上述架构图的顺序为：A0-B0-B1-C0-C1-C2-C3-D0-D1-D2-D3-D4-E0-E1-E2-E3-E4-E5-E6。&lt;/p&gt;
&lt;p&gt;由于树的非线性结构，从给定的某个节点出发，有多个可以前往的下一个节点，所以在顺序计算的情况下，只能推迟对某些节点的访问——即以某种方式保存起来以便稍后再访问。常见的做法是采用栈（LIFO）或队列（FIFO）。在深度优先遍历中，采用了递归的形式来说明三种遍历方式的区别，其实质可以理解为通过调用栈来实现延迟节点的保存，非递归的实现也说明了栈对延迟节点的存储作用；广度优先遍历则采用了队列来保存这些延迟节点。&lt;/p&gt;
&lt;h2 id=&quot;二使用二叉树对表达式进行解析&quot;&gt;二、使用二叉树对表达式进行解析&lt;/h2&gt;
&lt;p&gt;二叉树是编译器设计领域重要的数据结构之一，比如语法分析过程中使用的语法树。表达式是编程中最常见的的语法形式，比如定义一个int变量：int x = 3+6*7-(5+9)/2+4，我们能很轻松的算出x=42，可是编译器是如何计算3+6*7-(5+9)/2+4的呢？&lt;/p&gt;
&lt;p&gt;首先，3+6*7-(5+9)/2+4是一个中缀表达式，相应的前缀表达式和后缀表达式分别为（上节中描述了如何通过栈将中缀表达式转换为后缀表达式以及后缀表达式的计算）：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;前缀表达式：+3-*67+/+5924&lt;/li&gt;
&lt;li&gt;后缀表达式：367*59+2/4+-+&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;实际上，使用二叉树对上述表达式进行解析，就可以得到叶节点为操作数，其他节点为操作符的表达式树。前缀、中缀和后缀表达式分别对应了表达式树的前序、中序和后序遍历。在实际情况中，前缀表达式使用较少，中缀表达式符合人的理解习惯，但对计算机来讲，运算规则复杂，不能从左到右顺序进行，不利于计算机处理，而后缀表达式则更加适合。&lt;/p&gt;
&lt;p&gt;下面演示如何通过后缀表达式来构建表达式树，这里需要用到栈和二叉树两种数据结构，从左到右依次读取后缀表达式367*59+2/4+-+，如果是数字则直接将其压入栈中；如果是操作符，则从栈中弹出两个操作数T1和T2，用该操作符（根节点）和T1（左子树）、T2（右子树）组成一个二叉树，然后将该二叉树压入栈中。&lt;/p&gt;
&lt;ul readability=&quot;6&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;将3、6、7依次压入栈中；&lt;br/&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3923557-1bfe421e6175c856.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Step 1&quot;/&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;乘号入栈，从栈中取出6和7，组成二叉树，并将该树压入栈中；&lt;br/&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3923557-b206eb4dc6f709bf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Step 2&quot;/&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;将5、9依次压入栈中；&lt;br/&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3923557-7342643498e6d926.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Step 3&quot;/&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;加号入栈，从栈中取出5和9，组成二叉树，并将该树压入栈中，其次将2入栈；&lt;br/&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3923557-f1a39ba529a2cf80.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Step 4&quot;/&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;除号入栈，从栈中取出二叉树（5+9）和2，组成新二叉树，并将该树压入栈中，其次将4入栈；&lt;br/&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3923557-166defb9f21e9ce9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Step 5&quot;/&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;加号入栈，从栈中取出二叉树（（5+9）/2）和4，组成新二叉树，并将该树压入栈中；&lt;br/&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3923557-d0bf9ddd6c2f7971.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Step 6&quot;/&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;减号入栈，从栈中取出二叉树（6*7）和（（5+9）/2+4），组成新二叉树，并将该树压入栈中；&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3923557-4ceef16a66384d7c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Step 7&quot;/&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;加号入栈，从栈中取出3和二叉树（6*7-（5+9）/2+4），组成新二叉树，并将该树压入栈中；&lt;br/&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3923557-b0c3503f6b4eb881.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Step 8&quot;/&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;表达式树是将我们原来可以直接由代码编写的逻辑以表达式的方式存储在树状的结构里，从而可以在运行时去解析这个树，然后执行，实现动态的编辑和执行代码。&lt;/p&gt;
&lt;h2 id=&quot;三二叉搜索树的排序特征&quot;&gt;三、二叉搜索树的排序特征&lt;/h2&gt;
&lt;p&gt;相比于普通二叉树，二叉搜索树的关键特征是：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;若任意节点的左子树不空，则左子树上所有节点的值均小于它的根节点的值；&lt;/li&gt;
&lt;li&gt;若任意节点的右子树不空，则右子树上所有节点的值均大于它的根节点的值；&lt;/li&gt;
&lt;li&gt;任意节点的左、右子树也分别为二叉搜索树；&lt;/li&gt;
&lt;li&gt;没有键值相等的节点。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;上述特征意味着二叉搜索树中所有的项都要能够排序，在Java中，可以用Comparable接口来表示这种性质。正是因为这种排序特征，使其查找、插入的时间复杂度较低。&lt;/p&gt;
&lt;h4 id=&quot;查找和插入&quot;&gt;3.1 查找和插入&lt;/h4&gt;
&lt;p&gt;查找过程从根节点开始，比较待查找节点的值与根节点值的大小，如果小于，就递归查找左子树；如果大于，就递归查找右子树；如果等于，则查找过程结束。比如在下列二叉树中搜索32的过程如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3923557-bd47d830aea7efa3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;查找过程&quot;/&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;32 &amp;gt; 23，查找右子树；&lt;/li&gt;
&lt;li&gt;32 &amp;lt; 35，查找左子树；&lt;/li&gt;
&lt;li&gt;32 &amp;gt; 30，查找右子树；&lt;/li&gt;
&lt;li&gt;32 == 32，查找过程结束。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;把这个过程翻译成代码如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;private boolean searchBST(T t, BinaryNode&amp;lt;T&amp;gt; root) {
    // 1.如果被比较节点为空，说明没有找到匹配项，直接返回false
    if (root == null) {
        return false;
    }
    // 2.比较节点值的大小
    int compareResult = compare(t, root.getElement());
    if (compareResult &amp;lt; 0) {
        // 3.如果小于，就递归查找左子树
        return searchBST(t, root.getlChild());
    } else if (compareResult &amp;gt; 0) {
        // 4.如果大于，就递归查找右子树
        return searchBST(t, root.getrChild());
    } else {
        // 5.如果等于，则查找过程结束，返回查找成功
        return true;
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;整个查找过程形成由根节点开始的一直向下的一条路径，假定树的高度为h，那么查找算法的时间复杂度就是O(h)。另外，和遍历一样，除了通过递归实现元素查找外，也可以通过非递归的方式实现，其核心是改变对二叉搜索树中被比较节点的引用。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;private boolean searchBST(T t, BinaryNode&amp;lt;T&amp;gt; root) {
    int compareResult;
    // 1.当被比较节点不为空且没找匹配项时，继续查找
    while (root != null &amp;amp;&amp;amp; (compareResult = compare(t, root.getElement())) != 0) {
        if (compareResult &amp;lt; 0) {
            // 2.如果小于，就引用被比较节点的左子树
            root = root.getlChild();
        } else {
            // 3.如果小于，就引用被比较节点的右子树
            root = root.getrChild();
        }
    }
    // 4.根据被比较节点的最终引用是否为空，判断是否找到匹配项
    return root != null;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;由于二叉搜索树的特性，其最小值位于树的最左侧，最大值位于树的最右侧，因此，也可以使用类似上述查找方法进行最小值和最大值的查找。下面是其非递归实现：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;private BinaryNode&amp;lt;T&amp;gt; findMin(BinaryNode&amp;lt;T&amp;gt; root) {
    if (root != null) {
        // 1.退出条件：该节点没有左节点
        while (root.getlChild() != null) {
            // 2.循环：将该节点引用置为其左子节点
            root = root.getlChild();
        }
    }
    return root;
}

private BinaryNode&amp;lt;T&amp;gt; findMax(BinaryNode&amp;lt;T&amp;gt; root) {
    if (root != null) {
        // 1.退出条件：该节点没有右节点
        while (root.getrChild() != null) {
            // 2.循环：将该节点引用置为其右子节点
            root = root.getrChild();
        }
    }
    return root;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;在设计递归/循环这类算法时，有两个关键点：&lt;br/&gt;1、递归/循环主结构。通过对待求解问题的分解，抽象主问题与子问题之间相同的核心逻辑，这个逻辑就是主结构。以递归实现斐波拉契数列 f(n) = f(n-1) + f(n-2)为例，其核心的主结构即为当前项等数列前面两项的和，比如n=5，那么f(5) = f(4) + f(3) = (f(3) + f(2)) + (f(2) + f(1)) = ……= 5；&lt;br/&gt;2、边界点表现。递归的上升（弹栈）和循环退出是验证算法在边界点表现的依据，比如上述查找过程中的退出递归的点就是边界点。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;插入操作的关键是找到插入点，首先这个插入点一定是叶子节点（相等元素除外），因此，插入就是在查找的基础上，新增一个叶子节点。以在上述二叉查找树中插入节点20为例，下图表示具体的插入过程：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3923557-975de532c9ffdd55.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;插入节点20的过程&quot;/&gt;&lt;/p&gt;
&lt;p&gt;翻译成代码如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;private BinaryNode&amp;lt;T&amp;gt; insert(T t, BinaryNode&amp;lt;T&amp;gt; root) {
    // 1.如果root为空，则说明此处为插入点
    if (root == null) {
        return new BinaryNode&amp;lt;&amp;gt;(t, null, null);
    }
    // 2.比较节点值的大小
    int compareResult = compare(t, root.getElement());
    if (compareResult &amp;lt; 0) {
        // 3.递归调用插入左子树
        root.setlChild(insert(t, root.getlChild()));
    } else if (compareResult &amp;gt; 0) {
        // 4.递归调用插入右子树
        root.setrChild(insert(t, root.getrChild()));
    }
    return root;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;可见，插入与查找的核心区别就是对空节点的处理，查找遇到空节点，表示已经查找结束，没有找到被查节点；插入遇到空节点，表示找到了插入点，于是新增一个节点。&lt;/p&gt;
&lt;h4 id=&quot;删除&quot;&gt;3.2 删除&lt;/h4&gt;
&lt;p&gt;在二叉搜索树中，一个节点的子节点有三种可能：1）无子节点，即该节点为叶子节点；2）有一个子节点；3）有两个子节点。删除节点需要针对这三种情况进行不同的处理：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;首先，删除叶子节点对其它节点没有影响，因此，查找到该节点之后，直接删除；&lt;/li&gt;
&lt;li&gt;对于有一个子节点的情况，删除该节点意味着将父节点对其的引用转接到其子节点上，对此外的节点无影响；&lt;/li&gt;
&lt;li&gt;删除有两个子节点的节点的方法有两种：a) 从该节点的左子树中找到最大的元素；b) 从该节点的右子树中找到最小的元素，并用找到的元素来取代该节点。&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;下图以删除节点35为例，35有两个子节点，从右子树中找到最小的元素48，然后用48来代替35所在的位置。&lt;br/&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3923557-0dadaa33f4ca7389.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;删除节点35&quot;/&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;private BinaryNode&amp;lt;T&amp;gt; remove(T t, BinaryNode&amp;lt;T&amp;gt; root) {
    // 1.如果root为空，则可删除节点为null
    if (root == null) {
        return root;
    }
    // 2.比较节点值的大小
    int compareResult = compare(t, root.getElement());
    if (compareResult &amp;lt; 0) {
        // 3.在左子树上递归删除目标节点
        root.setlChild(remove(t, root.getlChild()));
    } else if (compareResult &amp;gt; 0) {
        // 4.在右子树上递归删除目标节点
        root.setrChild(remove(t, root.getrChild()));
    } else if (root.getlChild() != null &amp;amp;&amp;amp; root.getrChild() != null) {
        // 5.找到该节点，并且该节点左右子树均不空
        // 将该节点的值设为右子树的最小值
        root.setElement(findMin(root.getrChild()).getElement());
        // 因为最小值没有左节点，所有删除操作是前两种情况之一
        root.setrChild(remove(root.getElement(), root.getrChild()));
    } else {
        // 6.前两种情况直接改变引用即可
        root = (root.getlChild() != null) ? root.getlChild() : root.getrChild();
    }
    return root;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;四保证最坏情况时间复杂度&quot;&gt;四、保证最坏情况时间复杂度&lt;/h2&gt;
&lt;p&gt;从上节可知，由N个节点组成的二叉搜索树，其操作方法时间复杂度为O(h)，h为树的高度。树的高度依赖于树的拓扑结构，如果节点均匀分布，则高度为log­N；但是，如果遇到插入节点的值依次减少（或增大），则二叉搜索树退化为链表，高度变为N，那么查找、插入和删除的时间复杂度均为O(N)，就失去了二叉搜索树最核心的时间复杂度优势。&lt;/p&gt;
&lt;p&gt;那么，如何保持二叉搜索树的高度在最坏情况下依然是log­N呢？自平衡二叉树是通过约束所有叶子的深度趋于平衡达到该目的的。具体实现的方法一般是对不平衡二叉搜索的节点进行旋转操作，常见的平衡二叉树类型包括AVL树、伸展树、红黑树、2-3树、AA树等。&lt;/p&gt;
&lt;p&gt;以AVL树为例，要求任何节点的两个子树的高度最大差别为1，保证了树的高度平衡性，因此，查找、插入和删除的时间复杂度始终保持在log­N的水平。在实现上，一般通过对不平衡的树进行旋转，使其重新达到平衡，旋转分为四种场景：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;造成不平衡的节点为其父节点的&lt;strong&gt;左&lt;/strong&gt;子节点，其父节点为其祖父节点的&lt;strong&gt;左&lt;/strong&gt;子节点，简称&lt;strong&gt;左左&lt;/strong&gt;；&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3923557-9b4a80e57378fac2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;右旋&quot;/&gt;&lt;/p&gt;
&lt;p&gt;上图中，节点关系：③ &amp;lt; ② &amp;lt; ①，高度为3。通过&lt;strong&gt;右旋&lt;/strong&gt;，将①变为②的&lt;strong&gt;右子节点&lt;/strong&gt;，同时，将②的右子节点变为①的左子节点（根据二叉搜索树的特征，图中节点B一定小于节点1）。可见，右旋后依然保持了二叉搜索树的排序特征，却使得整体的高度变为2，降低了1。翻译成代码如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;private void rotateRight(Entry&amp;lt;K,V&amp;gt; p) {
    if (p != null) {
        // 获取p节点右子节点l
        Entry&amp;lt;K,V&amp;gt; l = p.left;
        // 将l节点的右子节点设置为p节点的左子节点
        p.left = l.right;
        // 如果l节点的右子节点不为空，设置p节点为其父节点
        if (l.right != null) l.right.parent = p;
        // 将p节点的父节点设置为l节点的父节点
        l.parent = p.parent;
        // p节点的父节点为空，则设置l节点为根节点
        if (p.parent == null)
            root = l;
        // 否则设置p节点的父节点对l节点的引用
        else if (p.parent.right == p)
            p.parent.right = l;
        else p.parent.left = l;
        // 改变p节点和l节点的关系
        l.right = p;
        p.parent = l;
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;ol&gt;&lt;li&gt;造成不平衡的节点为其父节点的&lt;strong&gt;右&lt;/strong&gt;子节点，其父节点为其祖父节点的&lt;strong&gt;右&lt;/strong&gt;子节点，简称&lt;strong&gt;右右&lt;/strong&gt;；&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3923557-263921842e3d6094.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;左旋&quot;/&gt;&lt;/p&gt;
&lt;p&gt;上图中，节点关系：① &amp;lt; ② &amp;lt; ③，高度为3。通过&lt;strong&gt;左旋&lt;/strong&gt;，将①变为②的&lt;strong&gt;左子节点&lt;/strong&gt;，同时，将②的左子节点变为①的右子节点（根据二叉搜索树的特征，图中节点B一定大于节点1）。可见，左旋后依然保持了二叉搜索树的排序特征，却使得整体的高度变为2，降低了1。翻译成代码如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;private void rotateLeft(Entry&amp;lt;K,V&amp;gt; p) {
    if (p != null) {
        // 获取p节点右子节点r
        Entry&amp;lt;K,V&amp;gt; r = p.right;
        // 将r节点的左子节点设置为p节点的右子节点
        p.right = r.left;
        // 如果r节点的左子节点不为空，设置p节点为其父节点
        if (r.left != null) r.left.parent = p;
        // 将p节点的父节点设置为r节点的父节点
        r.parent = p.parent;
        // p节点的父节点为空，则设置r节点为根节点
        if (p.parent == null)
            root = r;
        // 否则设置p节点的父节点对r节点的引用
        else if (p.parent.left == p)
            p.parent.left = r;
        else p.parent.right = r;
        // 改变p节点和r节点的关系
        r.left = p;
        p.parent = r;
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;ol&gt;&lt;li&gt;造成不平衡的节点为其父节点的&lt;strong&gt;左&lt;/strong&gt;子节点，其父节点为其祖父节点的&lt;strong&gt;右&lt;/strong&gt;子节点，简称&lt;strong&gt;左右&lt;/strong&gt;；&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3923557-5be262e78554e41a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;右左双旋&quot;/&gt;&lt;/p&gt;
&lt;p&gt;上图中，节点关系：① &amp;lt; ③ &amp;lt; ②，高度为3。先通过&lt;strong&gt;右旋&lt;/strong&gt;，将②变为③的&lt;strong&gt;右子节点&lt;/strong&gt;，同时，将③的右子节点变为②的左子节点（根据二叉搜索树的特征，图中节点D一定小于节点2）。后通过&lt;strong&gt;左旋&lt;/strong&gt;，将①变为③的&lt;strong&gt;左子节点&lt;/strong&gt;，同时，将③的左子节点变为①的右子节点（根据二叉搜索树的特征，图中节点C一定大于节点1）。可见，右左双旋后依然保持了二叉搜索树的排序特征，却使得整体的高度变为2，降低了1。&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;造成不平衡的节点为其父节点的&lt;strong&gt;右&lt;/strong&gt;子节点，其父节点为其祖父节点的&lt;strong&gt;左&lt;/strong&gt;子节点，简称&lt;strong&gt;右左&lt;/strong&gt;；&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3923557-53bbcf6f23aa7608.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;左右双旋&quot;/&gt;&lt;/p&gt;
&lt;p&gt;上图中，节点关系：② &amp;lt; ③ &amp;lt; ①，高度为3。先通过&lt;strong&gt;左旋&lt;/strong&gt;，将②变为③的&lt;strong&gt;左子节点&lt;/strong&gt;，同时，将③的左子节点变为②的右子节点（根据二叉搜索树的特征，图中节点C一定大于节点2）。后通过&lt;strong&gt;右旋&lt;/strong&gt;，将①变为③的&lt;strong&gt;右子节点&lt;/strong&gt;，同时，将③的右子节点变为①的左子节点（根据二叉搜索树的特征，图中节点D一定小于节点1）。可见，左右双旋后依然保持了二叉搜索树的排序特征，却使得整体的高度变为2，降低了1。&lt;/p&gt;
&lt;p&gt;可见，双旋（左右和右左）其实就是综合左旋和右旋操作，旋转的本质是一种在保持二叉搜索树排序特征的情况下，通过改变节点间的链接关系，降低树的高度的方法。&lt;/p&gt;
&lt;h2 id=&quot;五java中的红黑树实例&quot;&gt;五、Java中的红黑树实例&lt;/h2&gt;
&lt;p&gt;在Java集合框架中，Map和Set分别有基于树的实现和基于散列的实现，其实现类如下表所示。&lt;/p&gt;
&lt;table&gt;&lt;thead/&gt;&lt;tbody&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td align=&quot;center&quot;&gt;Map&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;HashMap&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;TreeMap&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td align=&quot;center&quot;&gt;Set&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;HashSet&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;TreeSet&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;在大多数场景下，基于散列的实现是最好的选择，除非需要强调元素的顺序，才使用基于树的实现。本节将重点说明如何基于红黑树实现TreeMap和TreeSet，HashMap和HashSet将在散列章节中说明。&lt;/p&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;HashMap/HashSet的扩展类LinkedHashMap/LinkedHashSet也能保持元素的顺序，区别在于，TreeMap/TreeSet的顺序是基于红黑树原理对Key比较实现的，而LinkedHashMap/LinkedHashSet是基于链表原理保持元素的插入顺序。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在实现上，TreeMap实现了NavigableMap接口，而NavigableMap直接继承自SortedMap，从字面上就可看出，TreeMap是一种支持节点排序的Map，其排序依据构造方法传入的Comparator比较器。如果Comparator为空，则默认按照按键的自然顺序升序进行排序。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;List sequence = Arrays.asList(&quot;a&quot;, &quot;1&quot;, &quot;A&quot;);
Comparator&amp;lt;String&amp;gt; comparator = new Comparator&amp;lt;String&amp;gt;() {
    @Override
    public int compare(String o1, String o2) {
        return sequence.indexOf(o1) - sequence.indexOf(o2);
    }
};
Map&amp;lt;String, String&amp;gt; treeMap = new TreeMap&amp;lt;&amp;gt;(comparator);
treeMap.put(&quot;A&quot;, &quot;This is A&quot;);
treeMap.put(&quot;1&quot;, &quot;This is 1&quot;);
treeMap.put(&quot;a&quot;, &quot;This is a&quot;);
for (Map.Entry&amp;lt;String, String&amp;gt; entry : treeMap.entrySet()) {
    System.out.println(entry.getKey() + &quot;:&quot; + entry.getValue());
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;上述实例根据字符在线性表中的顺序自定义了比较器，通过是否在TreeMap构造器中使用该比较器，输出结果顺序分为两种：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;使用时的输出顺序：“a”，“1”，“A”&lt;/li&gt;
&lt;li&gt;不使用时的输出顺序：“1”，“A”，“a”&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;可见，使用比较器时，输出按照线性表中字符的顺序，不使用时则按照字符的自然顺序（ASCII码值）升序排序。实现这种顺序区别的关键在于，使用TreeMap的put方法进行对象插入时，如果Comparator不为空，则通过Comparator的compare方法实现比较，否则将key强转为Comparable对象，然后通过其compareTo方法实现比较。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Comparator&amp;lt;? super K&amp;gt; cpr = comparator;
cmp = cpr.compare(key, t.key);&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code&gt;Comparable&amp;lt;? super K&amp;gt; k = (Comparable&amp;lt;? super K&amp;gt;) key;
cmp = k.compareTo(t.key);&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;TreeMap的put方法其余的实现与上述在二叉搜索树中插入节点的原理一致，只是TreeMap基于红黑树，相比于普通二叉搜索树，红黑树的节点增加了颜色属性，且取值为黑色或红色。TreeMap的节点类Entry如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;static final class Entry&amp;lt;K,V&amp;gt; implements Map.Entry&amp;lt;K,V&amp;gt; {
    K key;
    V value;
    Entry&amp;lt;K,V&amp;gt; left;
    Entry&amp;lt;K,V&amp;gt; right;
    Entry&amp;lt;K,V&amp;gt; parent;
    boolean color = BLACK;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;在二叉搜索树的要求之外，红黑树增加了如下的额外要求：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;节点是红色或黑色。&lt;/li&gt;
&lt;li&gt;根是黑色。&lt;/li&gt;
&lt;li&gt;所有叶子都是黑色（叶子是NIL节点）。&lt;/li&gt;
&lt;li&gt;每个红色节点必须有两个黑色的子节点。&lt;/li&gt;
&lt;li&gt;从任一节点到其每个叶子的所有简单路径都包含相同数目的黑色节点。&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;上述要求4保证了从根到叶子节点的所有路径上不能有两个连续的红色节点，因此，结合要前三点要求得出：最短的路径全是黑色节点，最长的路径是红色和黑色交替。然而第5点要求所有简单路径都包含相同数目的黑色节点，所以得出结论：&lt;strong&gt;从根到叶子的最长的可能路径不多于最短的可能路径的两倍长&lt;/strong&gt;。下图是一颗红黑树实例：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3923557-a8924e56f7026f33.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/600&quot; alt=&quot;红黑树实例&quot;/&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;相比于AVL树要求任何节点的两个子树的高度最大差别为1，保证高度平衡性，红黑树只要求部分达到平衡，降低了对旋转的要求，因此，当大量数据需要插入和删除时，AVL树需要重新平衡的频率就更高。&lt;br/&gt;具体来讲，对于插入操作引起的树的不平衡，AVL树和红黑树都需要经过两次旋转，使得树重新平衡；而删除操作引起的不平衡，最坏情况下AVL树可能需要重新平衡从被删除节点到根节点的整个路径，而红黑树最多只需要三次旋转（后续说明），综合起来看，红黑树的统计性能是优于AVL树的。正是基于这一点，TreeMap才基于红黑树实现。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;红黑树是一种自平衡的二叉搜索树，因此，其操作方法（插入和删除）也是在二叉搜索树操作方法的基础上，增加了自平衡修复操作来完成的，在使用TreeMap的put和remove方法插入和删除元素后，分别调用了fixAfterInsertion和fixAfterDeletion，具体包括两步：旋转和重新着色，下面将重点分析其实现原理。&lt;/p&gt;
&lt;h4 id=&quot;插入节点后的修复&quot;&gt;5.1 插入节点后的修复&lt;/h4&gt;
&lt;p&gt;在红黑树中，新插入的节点着色为红色（不增加路径上的黑色节点），根据其位置、父节点着色等条件，需要根据不同情况对红黑树进行修复。为了方便表述，这里对节点名称做如下约定：新插入的节点定义为N节点，N节点的父节点定义为P节点，P节点的兄弟节点定义为U节点，P节点的父节点（N节点的祖父节点）定义为G节点。&lt;/p&gt;
&lt;p&gt;首先，P节点的情况分为三种：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;情形1：无P节点。&lt;/strong&gt;即N节点为根节点，没有父节点。&lt;br/&gt;修复方式：直接将它设置为黑色以满足红黑树性质2。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;情形2：P节点为黑色。&lt;/strong&gt;&lt;br/&gt;修复方式：由于插入节点总会有两个黑色的叶子节点（NIL节点），所以不会破坏红黑树性质4；另外，由于没有增加黑色节点，所以红黑树性质5依然保持。综上，不需要对N节点做额外修复。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;情形3：P节点为红色。且P节点为G节点的左子节点&lt;/strong&gt;&lt;br/&gt;修复方式：由于N、P节点都为红色，所以首先破坏了红黑树性质4，因此需要对其修复。具体的修复方法需要根据U节点和G节点的情况进行细分：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;情形3.a：P节点和U节点都是红色&lt;br/&gt;修复方式：将P节点、U节点都设置为黑色，并将G节点设为红色，以G节点为当前节点，对树进行递归修复。&lt;br/&gt;由于从P节点、U节点到根节点的任何路径都必须通过G节点，通过上述方式修复后，这些路径上的黑节点数目没有改变（原来有叶子和G节点两个黑色节点，现在有叶子和P两个黑色节点）。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3923557-3fcdaf7625c40a10.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/620&quot; alt=&quot;情形3.a&quot;/&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;情形3.b：U节点为黑色（或缺失），N节点为P节点的右子节点&lt;br/&gt;修复方式：将P节点设置为当前节点，对P节点进行一次左旋。&lt;br/&gt;由于N、P节点都为红色，所以旋转不改变红黑树的性质。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3923557-3b2b370f2a31ed88.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/620&quot; alt=&quot;情形3.b&quot;/&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;情形3.c：U节点为黑色（或缺失），N节点为P节点的左子节点&lt;br/&gt;修复方式：将P节点设置为黑色，将G节点设置为红色，然后对G节点进行一次右旋。&lt;br/&gt;因为通过这N、P、G节点的所有路径旋转前都通过G节点，旋转都通过P节点。旋转前后，三个节点中都只有唯一的黑色节点，所以保持了红黑树的性质5。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3923557-b9faf2de128e57c7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/620&quot; alt=&quot;情形3.c&quot;/&gt;&lt;/p&gt;
&lt;p&gt;下面看下在TreeMap中，fixAfterInsertion方法如何对上述分析过程代码化。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;private void fixAfterInsertion(Entry&amp;lt;K,V&amp;gt; x) {
    // 新插入节点着色为红色
    x.color = RED;
    // 循环修复由新插入x节点引起的不平衡，直到根节点，或其父节点为黑色
    while (x != null &amp;amp;&amp;amp; x != root &amp;amp;&amp;amp; x.parent.color == RED) {
        // x节点的父节点为其祖父节点的左子节点
        if (parentOf(x) == leftOf(parentOf(parentOf(x)))) {
            // 获取x节点的叔节点（父节点的兄弟节点）
            Entry&amp;lt;K,V&amp;gt; y = rightOf(parentOf(parentOf(x)));
            // 对应情形3.a：P节点和U节点都是红色
            if (colorOf(y) == RED) {
                // 设置P节点为黑色
                setColor(parentOf(x), BLACK);
                // 设置U节点为黑色
                setColor(y, BLACK);
                // 设置G节点为红色
                setColor(parentOf(parentOf(x)), RED);
                // 以G节点为当前节点
                x = parentOf(parentOf(x));
            } else {
                // 对应情形3.b：P节点为红色，U节点为黑色，且N节点为P节点的右子节点
                if (x == rightOf(parentOf(x))) {
                    // 设置P节点为当前节点
                    x = parentOf(x);
                    // 左旋当前节点
                    rotateLeft(x);
                }
                // 对应情形3.c：P节点为红色，U节点为黑色，且N节点为P节点的左子节点
                // 设置P节点为黑色
                setColor(parentOf(x), BLACK);
                // 设置G节点为红色
                setColor(parentOf(parentOf(x)), RED);
                // 右旋G节点
                rotateRight(parentOf(parentOf(x)));
            }
        // x节点的父节点为其祖父节点的右子节点
        } else {
            // ……
        }
    }
    // 将根节点设置为黑色
    root.color = BLACK;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;从上述情形3.b和情形3.c可以看出，其实就是对不平衡的树进行了一次&lt;strong&gt;左右双旋&lt;/strong&gt;，同样的，当P节点为G节点的右子节点，N节点为P节点的左子节点时，就需要对不平衡的树进行&lt;strong&gt;右左双旋&lt;/strong&gt;。上述代码中else的部分对其进行了实现，由于原理在上节已经阐述过了，这里不再赘述。相比于AVL树需要多次旋转，红黑树通过重新着色来保持相对的平衡。&lt;/p&gt;
&lt;h4 id=&quot;删除节点后的修复&quot;&gt;5.2 删除节点后的修复&lt;/h4&gt;
&lt;p&gt;前面已经分析过，二叉搜索树删除节点分为三种情况：1）无子节点；2）有一个子节点；3）有两个子节点。红黑树加入了颜色属性后，删除节点可能破坏红黑树的性质，因此需要分情况对其进行分析，而由于删除红色节点并不影响红黑树的特性，所以这里重点分析删除黑色节点的情况。&lt;/p&gt;
&lt;p&gt;为了方便表述，这里对节点名称做如下约定：替代被删除的节点位置的新节点定义为N节点（被删除的节点右子树中的最小值节点），N节点的父节点定义为P节点，P节点的兄弟节点定义为U节点，U节点的左、右子节点分别定义为L节点和R节点。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;情形1：N节点为红色&lt;/strong&gt;&lt;br/&gt;修复方式：直接将其着色为黑色，红黑树的性质得到修复；&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;情形2：N节点是黑色，且位于根节点&lt;/strong&gt;&lt;br/&gt;修复方式：无需修复，红黑树性质保留；&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;情形3：N节点为黑色，且不位于根节点&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;情形3.a：U节点为红色，P节点、L节点和R节点均为黑色&lt;br/&gt;修复方式：将U节点设置黑色，P节点设置为红色，左旋P节点，同时将L节点指定为新的U节点。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3923557-0a5566cb71249310.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/550&quot; alt=&quot;情形3.a&quot;/&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;情形3.b：U节点为黑色，P节点为红色，L节点和R节点均为黑色&lt;br/&gt;修复方式：将U节点设为红色，同时指定P节点为新的N节点。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3923557-164b32ac356eced5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/550&quot; alt=&quot;情形3.b&quot;/&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;情形3.c：U节点为黑色，P节点为红色，L节点为红色，R节点为黑色&lt;br/&gt;修复方式：将L节点设为黑色，将U节点设为红色，右旋U节点，同时将L节点指定为新的U节点。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3923557-edb6445442b558c6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/550&quot; alt=&quot;情形3.c&quot;/&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;情形3.d：U节点为黑色，P节点为红色、L节点为任意颜色，R节点为红色&lt;br/&gt;修复方式：将P节点的颜色赋值给U节点，将P节点设为黑色，将R节点的右子节设为黑色，左旋P节点，设置N为根节点。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3923557-58e5b66c94a91202.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700&quot; alt=&quot;情形3.d&quot;/&gt;&lt;/p&gt;
&lt;p&gt;下面看下在TreeMap中，fixAfterDeletion方法如何对上述分析过程代码化。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;private void fixAfterDeletion(Entry&amp;lt;K,V&amp;gt; x) {
    // 循环修复不平衡，直到根节点，或其N节点为红色
    while (x != root &amp;amp;&amp;amp; colorOf(x) == BLACK) {
        // N节点为其父节点的左子节点
        if (x == leftOf(parentOf(x))) {
            // 获取U节点
            Entry&amp;lt;K,V&amp;gt; sib = rightOf(parentOf(x));
            // 对应情形3.a：U节点为红色
            if (colorOf(sib) == RED) {
                // 设置U节点为黑色
                setColor(sib, BLACK);
                // 设置P节点为红色
                setColor(parentOf(x), RED);
                // 左旋父节点
                rotateLeft(parentOf(x));
                // 重新指定U节点
                sib = rightOf(parentOf(x));
            }
            // 对应情形3.b：L节点和R节点均为黑色
            if (colorOf(leftOf(sib))  == BLACK &amp;amp;&amp;amp;
                colorOf(rightOf(sib)) == BLACK) {
                // 设置U节点为红色
                setColor(sib, RED);
                // 指定P节点为N节点
                x = parentOf(x);
            } else {
                // 对应情形3.c：L节点为红色，R节点为黑色
                if (colorOf(rightOf(sib)) == BLACK) {
                    // 设置L节点为黑色
                    setColor(leftOf(sib), BLACK);
                    // 设置U节点为红色
                    setColor(sib, RED);
                    // 右旋U节点
                    rotateRight(sib);
                    // 重新指定U节点
                    sib = rightOf(parentOf(x));
                }
                // 对应情形3.d：L节点为任意颜色，R节点为红色
                // 将U节点着色为P节点的颜色
                setColor(sib, colorOf(parentOf(x)));
                // 将P节点设置为黑色
                setColor(parentOf(x), BLACK);
                // 将R节点设置为黑色
                setColor(rightOf(sib), BLACK);
                // 左旋P节点
                rotateLeft(parentOf(x));
                // 将N节点设置为根节点
                x = root;
            }
        } else {
            // ……
        }
    }
    // 设置N节点为红色
    setColor(x, BLACK);
}&lt;/code&gt;
&lt;/pre&gt;</description>
<pubDate>Mon, 13 Nov 2017 05:03:00 +0000</pubDate>
<dc:creator>yhthu</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/younghao/p/7819624.html</dc:identifier>
</item>
<item>
<title>Erlang Concurrent 并发进阶 - racaljk</title>
<link>http://www.cnblogs.com/racaljk/p/7825809.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/racaljk/p/7825809.html</guid>
<description>&lt;h2&gt;写在前面的话&lt;/h2&gt;

&lt;h2&gt;1. 进程&lt;/h2&gt;
&lt;p&gt;使用Erlang而不是其他函数式编程语言的主要原因之一就是Erlang的并发处理能力和分布式编程。并发意味着程序可以在同一时刻执行多个线程。举个例子，操作系统允许你在同一时刻运行文字处理程序，电子表格程序，邮件客户端，和打印任务。系统中的每个处理器（CPU）有可能只处理一个线程，但是它以一定频率交换这些线程，给我们造成一种多个程序是在同一时刻执行的假象。在一个Erlang程序中很容易创建并行执行（parallel execution）的线程，并且运行这些这些线程互相通信。Erlang中，每个执行线程称之为进程（process）。&lt;/p&gt;
&lt;p&gt;（旁白：术语“进程（process）”通常用于各个执行线程不共享数据，术语‘’线程（thread）”用于当它们以某种方式共享数据。Erlang执行线程不共享数据，这就是为什么它们叫做进程的原因）&lt;/p&gt;
&lt;p&gt;Erlang内置函数spawn用于创建一个新进程：spawn(Module, Exported_Function, List of Arguments)。考虑下面的模块&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;13.5&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;47&quot;&gt;
&lt;pre&gt;
-&lt;span&gt;module&lt;/span&gt;&lt;span&gt;(tut14).

&lt;/span&gt;-&lt;span&gt;export&lt;/span&gt;([start/0, say_something/2&lt;span&gt;]).

say_something(What, &lt;/span&gt;0) -&amp;gt;&lt;span&gt;
    done;
say_something(What, Times) &lt;/span&gt;-&amp;gt;&lt;span&gt;
    io:format(&lt;/span&gt;&quot;~p~n&quot;&lt;span&gt;, [What]),
    say_something(What, Times &lt;/span&gt;- 1&lt;span&gt;).

start() &lt;/span&gt;-&amp;gt;&lt;span&gt;
    spawn(tut14, say_something, [hello, &lt;/span&gt;3&lt;span&gt;]),
    spawn(tut14, say_something, [goodbye, &lt;/span&gt;3]).
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
5&amp;gt;&lt;span&gt; c(tut14).
{ok,tut14}
&lt;/span&gt;6&amp;gt; tut14:say_something(hello, 3&lt;span&gt;).
hello
hello
hello
done&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;如上所示，函数say_something输出第一个参数，输出次数由第二个参数指定。函数start启动两个进程，一个输出“hello”三次，一个输出“goodbye”三次。每个进程都使用say_something函数。注意用spawn这种方式启动一个进程所用到的函数，必须从该模块导出。（即写在模块开头的-export里面）&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;6&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
9&amp;gt;&lt;span&gt; tut14:start().
hello
goodbye
&lt;/span&gt;&amp;lt;0.63.0&amp;gt;&lt;span&gt;
hello
goodbye
hello
goodbye&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;p&gt;注意它没有先输出三次“hello”再输出三次“goodbye”。相反，第一个进程输出“hello”，第二个进程输出“goodbye”，然后第一个进程再输出“hello”，如此继续。但是&amp;lt;0.63.0&amp;gt;从哪里来？一个函数的返回值是最后一行表达式的返回值。在start中最后一个表达式是&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;7.5&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
spawn(tut14, say_something, [goodbye, 3]).
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;p&gt;spawn返回一个进程标识符（process identifier） , 或者说pid, 标明独一无二的进程。所以&amp;lt;0.63.0&amp;gt;是上面spawn函数调用返回的pid。下一个例子展示了怎么使用pid。&lt;/p&gt;
&lt;p&gt;同时还要注意在io:format中用~p代替~w。引用手册的话：“~p和~w以相同的方式输出标准语，但是如果输出表示的项比一行长会合理的折断成多行。它也尝试去检测一个可输出的字符列表并将至以字符串的形式输出。”&lt;/p&gt;
&lt;p&gt;（译注：这里举个例子（数据来源于官方），在shell中输入：&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;41.5&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;103&quot;&gt;
&lt;pre&gt;
4&amp;gt; F = [{attributes,[[{id,age,1.50000},{mode,explicit},{typename,&quot;INTEGER&quot;}], [{id,cho},{mode,explicit},{typename,'Cho'}]]}, {typename,'Person'},{tag,{'PRIVATE',3&lt;span&gt;}},{mode,implicit}].
&lt;/span&gt;5&amp;gt; io:format(&quot;~p&quot;&lt;span&gt;,[F]).
[{attributes,[[{id,age,&lt;/span&gt;1.5},{mode,explicit},{typename,&quot;INTEGER&quot;&lt;span&gt;}],
              [{id,cho},{mode,explicit},{typename,&lt;/span&gt;'Cho'&lt;span&gt;}]]},
 {typename,&lt;/span&gt;'Person'&lt;span&gt;},
 {tag,{&lt;/span&gt;'PRIVATE',3&lt;span&gt;}},
 {mode,implicit}]ok
&lt;/span&gt;6&amp;gt; io:format(&quot;~w&quot;&lt;span&gt;,[F]).
[{attributes,[[{id,age,&lt;/span&gt;1.5},{mode,explicit},{typename,[73,78,84,69,71,69,82]}],[{id,cho},{mode,explicit},{typename,'Cho'}]]},{typename,'Person'},{tag,{'PRIVATE',3}},{mode,implicit}]ok
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;）&lt;/p&gt;

&lt;h2&gt;2. 消息传递&lt;/h2&gt;
&lt;p&gt;在接下来的例子中创建了两个进程，它们互相发送一些消息。&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;19&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;58&quot;&gt;
&lt;pre&gt;
-&lt;span&gt;module&lt;/span&gt;&lt;span&gt;(tut15).

&lt;/span&gt;-&lt;span&gt;export&lt;/span&gt;([start/0, ping/2, pong/0&lt;span&gt;]).

ping(&lt;/span&gt;0, Pong_PID) -&amp;gt;&lt;span&gt;
    Pong_PID &lt;/span&gt;!&lt;span&gt; finished,
    io:format(&lt;/span&gt;&quot;ping finished~n&quot;&lt;span&gt;, []);

ping(N, Pong_PID) &lt;/span&gt;-&amp;gt;&lt;span&gt;
    Pong_PID &lt;/span&gt;!&lt;span&gt; {ping, self()},
    &lt;/span&gt;&lt;span&gt;receive&lt;/span&gt;&lt;span&gt;
        pong &lt;/span&gt;-&amp;gt;&lt;span&gt;
            io:format(&lt;/span&gt;&quot;Ping received pong~n&quot;&lt;span&gt;, [])
    &lt;/span&gt;&lt;span&gt;end&lt;/span&gt;&lt;span&gt;,
    ping(N &lt;/span&gt;- 1&lt;span&gt;, Pong_PID).

pong() &lt;/span&gt;-&amp;gt; &lt;span&gt;receive&lt;/span&gt;&lt;span&gt;
        finished &lt;/span&gt;-&amp;gt;&lt;span&gt;
            io:format(&lt;/span&gt;&quot;Pong finished~n&quot;&lt;span&gt;, []);
        {ping, Ping_PID} &lt;/span&gt;-&amp;gt;&lt;span&gt;
            io:format(&lt;/span&gt;&quot;Pong received ping~n&quot;&lt;span&gt;, []),
            Ping_PID &lt;/span&gt;!&lt;span&gt; pong,
            pong()
    &lt;/span&gt;&lt;span&gt;end&lt;/span&gt;&lt;span&gt;.

start() &lt;/span&gt;-&amp;gt;&lt;span&gt;
    Pong_PID &lt;/span&gt;=&lt;span&gt; spawn(tut15, pong, []),
    spawn(tut15, ping, [&lt;/span&gt;3&lt;span&gt;, Pong_PID]).
 

&lt;/span&gt;1&amp;gt;&lt;span&gt; c(tut15).
{ok,tut15}
&lt;/span&gt;2&amp;gt;&lt;span&gt; tut15: start().
&lt;/span&gt;&amp;lt;0.36.0&amp;gt;&lt;span&gt;
Pong received ping
Ping received pong
Pong received ping
Ping received pong
Pong received ping
Ping received pong
ping finished
Pong finished&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;p&gt;函数start创建了一个进程，让我们把它叫做“pong”：&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;9&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;language-erlang&quot;&gt;&lt;span class=&quot;nv&quot;&gt;&lt;span class=&quot;o&quot;&gt;&lt;span class=&quot;nb&quot;&gt;&lt;span class=&quot;p&quot;&gt;&lt;span class=&quot;n&quot;&gt;&lt;span class=&quot;p&quot;&gt;&lt;span class=&quot;n&quot;&gt;&lt;span class=&quot;p&quot;&gt;&lt;span class=&quot;p&quot;&gt; &lt;span class=&quot;cnblogs_code&quot;&gt;Pong_PID = spawn(tut15, pong, [])&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这个进程执行tut15:pong()。Pong_PID是pong进程的进程标识符。接着创建一个名为“ping”的进程：&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;11&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;language-erlang&quot;&gt;&lt;span class=&quot;nb&quot;&gt;&lt;span class=&quot;p&quot;&gt;&lt;span class=&quot;n&quot;&gt;&lt;span class=&quot;p&quot;&gt;&lt;span class=&quot;n&quot;&gt;&lt;span class=&quot;p&quot;&gt;&lt;span class=&quot;p&quot;&gt;&lt;span class=&quot;mi&quot;&gt;&lt;span class=&quot;p&quot;&gt;&lt;span class=&quot;nv&quot;&gt;&lt;span class=&quot;p&quot;&gt; &lt;span class=&quot;cnblogs_code&quot;&gt;spawn(tut15, ping, [3, Pong_PID]),&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这个进程执行：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;language-erlang&quot;&gt;&lt;span class=&quot;nn&quot;&gt;&lt;span class=&quot;p&quot;&gt;&lt;span class=&quot;nf&quot;&gt;&lt;span class=&quot;p&quot;&gt;&lt;span class=&quot;mi&quot;&gt;&lt;span class=&quot;p&quot;&gt;&lt;span class=&quot;nv&quot;&gt;&lt;span class=&quot;p&quot;&gt; &lt;span class=&quot;cnblogs_code&quot;&gt;tut15:ping(3, Pong_PID)&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&amp;lt;0.36.0&amp;gt;是start函数的返回值。&lt;/p&gt;
&lt;p&gt;“pong”进程现在这样：&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;9&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;receive&lt;/span&gt;&lt;span&gt;
    finished &lt;/span&gt;-&amp;gt;&lt;span&gt;
        io:format(&lt;/span&gt;&quot;Pong finished~n&quot;&lt;span&gt;, []);
    {ping, Ping_PID} &lt;/span&gt;-&amp;gt;&lt;span&gt;
        io:format(&lt;/span&gt;&quot;Pong received ping~n&quot;&lt;span&gt;, []),
        Ping_PID &lt;/span&gt;!&lt;span&gt; pong,
        pong()
&lt;/span&gt;&lt;span&gt;end&lt;/span&gt;.
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;p&gt;receive 结构用于使进程等待另一个进程的消息。它有下面的格式：&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;6&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;receive&lt;/span&gt;&lt;span&gt;
   pattern1 &lt;/span&gt;-&amp;gt;&lt;span&gt;
       actions1;
   pattern2 &lt;/span&gt;-&amp;gt;&lt;span&gt;
       actions2;
   ....
   patternN
       actionsN
&lt;/span&gt;&lt;span&gt;end&lt;/span&gt;.
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;p&gt;注意在end.前面没有“;”&lt;/p&gt;
&lt;p&gt;Erlang进程之间传递的消息简单的被认为是有效的erlang项（term）。也即是说，它们可以是列表，tuple，整数，原子，pid等等。&lt;/p&gt;
&lt;p&gt;每个进程有它自己的消息队列，用于接收消息。当新消息到达时会放入队列的尾部。当一个进程执行一个receive表达式，消息队列第一个接收到的消息（头部）会和receive结构进行模式匹配。如果匹配成功，消息将会移出队列并且执行模式后面指定的action&lt;/p&gt;
&lt;p&gt;然而，如果第一个模式没有匹配，第二个模式将会继续，如果成功就执行它对应的action，如果没有成功，继续匹配第三个模式，如此继续。如果到最后都没有模式匹配成功，第一个消息将会保留在消息队列，然后消息队列的第二个消息（头部下一个）继续进行匹配，如果有任何一个模式匹配成功，相应的action就会执行，然后第二个消息会移出队列（除第二个以外的消息全都保留）。如果第二个消息没有匹配，尝试第三个，如此继续。直到到达消息队列尾部。如果到达队列尾部，进程会阻塞（停止执行）并等待一个新消息到达，然后重复上述过程。&lt;/p&gt;
&lt;p&gt;Erlang的实现是很机智的，在每个receive中它会尽可能的最小化每个消息的模式匹配次数。&lt;/p&gt;
&lt;p&gt;现在回到ping pong的例子。&lt;/p&gt;
&lt;p&gt;&quot;Pong&quot;等待消息。如果接收到原子finished，“pong”就会输出“Pong finished”，然后什么也不做，终止。如果收到一个{ping，Ping_PID}格式的消息，它会输出&quot;Pong received ping&quot; 并向“ping”进程发送一个原子pong消息：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;language-erlang&quot;&gt;&lt;span class=&quot;nv&quot;&gt;&lt;span class=&quot;o&quot;&gt;&lt;span class=&quot;n&quot;&gt; &lt;span class=&quot;cnblogs_code&quot;&gt;Ping_PID ! pong&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注意“！”运算符是如何发送消息的。“！”的语法是：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;language-erlang&quot;&gt;&lt;span class=&quot;nv&quot;&gt;&lt;span class=&quot;o&quot;&gt;&lt;span class=&quot;nv&quot;&gt; &lt;span class=&quot;cnblogs_code&quot;&gt;Pid ! Message&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;即将消息（任何Erlang项）发送到Pid表示的进程。&lt;/p&gt;
&lt;p&gt;在向“ping”进程发送了pong消息后，“pong”函数会调用自身，导致它重新回到receive结构等待另一条消息。&lt;/p&gt;
&lt;p&gt;现在让我们看看“ping”进程。回忆一下它是这样开始的：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;language-erlang&quot;&gt;&lt;span class=&quot;nn&quot;&gt;&lt;span class=&quot;p&quot;&gt;&lt;span class=&quot;nf&quot;&gt;&lt;span class=&quot;p&quot;&gt;&lt;span class=&quot;mi&quot;&gt;&lt;span class=&quot;p&quot;&gt;&lt;span class=&quot;nv&quot;&gt;&lt;span class=&quot;p&quot;&gt; &lt;span class=&quot;cnblogs_code&quot;&gt;tut15:ping(3, Pong_PID)&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;请看函数ping/2，因为第一个参数是3（不是0）（第一个clause是 ping(0,Pong_PID)，第二个clause是ping(N,Pong_PID)，所以N成为3），所以ping/2的第二个clause被执行。&lt;/p&gt;
&lt;p&gt;第二个clause向pong进程发送一条消息：&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;9&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;language-erlang&quot;&gt;&lt;span class=&quot;nv&quot;&gt;&lt;span class=&quot;o&quot;&gt;&lt;span class=&quot;p&quot;&gt;&lt;span class=&quot;n&quot;&gt;&lt;span class=&quot;p&quot;&gt;&lt;span class=&quot;n&quot;&gt;&lt;span class=&quot;p&quot;&gt; &lt;span class=&quot;cnblogs_code&quot;&gt;Pong_PID ! {ping, self()},&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;self()返回执行self()的进程的pid，在这个是“ping”进程的pid。（回忆一下“pong”的代码，self()的值最终会到达之前所说的receive结构中的Ping_PID变量。）&lt;/p&gt;
&lt;p&gt;现在&quot;Ping&quot;等待一个来自“pong”的答复：&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;7&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;receive&lt;/span&gt;&lt;span&gt;
    pong &lt;/span&gt;-&amp;gt;&lt;span&gt;
        io:format(&lt;/span&gt;&quot;Ping received pong~n&quot;&lt;span&gt;, [])
&lt;/span&gt;&lt;span&gt;end&lt;/span&gt;,
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;p&gt;当收到回复时它会输出&quot;Ping received pong&quot;，在这之后ping函数也会调用自己。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
ping(N - 1, Pong_PID)
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;p&gt;N-1使得第一个参数减一，直到它变成零。 当变成零时，ping/2的第一个clause就会被执行：&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;7.5&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
ping(0, Pong_PID) -&amp;gt;&lt;span&gt;
    Pong_PID &lt;/span&gt;!&lt;span&gt;  finished,
    io:format(&lt;/span&gt;&quot;ping finished~n&quot;, []);
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;p&gt;该函数会向pong进程发送原子finished（正如上面描述的这会使得pong结束进程），接着会输 &quot;ping finished&quot;。 然后&quot;Ping&quot;会因为没有事情做而终止。&lt;/p&gt;
&lt;h2&gt;3. 进程名注册&lt;/h2&gt;
&lt;p&gt;在之前的例子中，“pong”进程最先被创建，并将它的进程标识符给接下来创建的“ping”进程作为参数。也即是说，“ping”必须通过某种方式知道“pong”进程才能向它发送消息。有时独立启动的进程需要知道彼此的标识符。鉴于此Erlang提供了一种进程机制来给进程命名而不是在一堆函数中混乱传递PID参数，这种机制是通过内置函数register完成的。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;language-erlang&quot;&gt;&lt;span class=&quot;nb&quot;&gt;&lt;span class=&quot;p&quot;&gt;&lt;span class=&quot;n&quot;&gt;&lt;span class=&quot;p&quot;&gt;&lt;span class=&quot;nv&quot;&gt;&lt;span class=&quot;p&quot;&gt; &lt;span class=&quot;cnblogs_code&quot;&gt;register(some_atom, Pid)&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;现在让我们使用下面的代码来重写ping pong 例子，给“pong”进程一个名字：&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;19&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;54&quot;&gt;
&lt;pre&gt;
-&lt;span&gt;module&lt;/span&gt;&lt;span&gt;(tut16).

&lt;/span&gt;-&lt;span&gt;export&lt;/span&gt;([start/0, ping/1, pong/0&lt;span&gt;]).

ping(&lt;/span&gt;0) -&amp;gt;&lt;span&gt;
    pong &lt;/span&gt;!&lt;span&gt; finished,
    io:format(&lt;/span&gt;&quot;ping finished~n&quot;&lt;span&gt;, []);

ping(N) &lt;/span&gt;-&amp;gt;&lt;span&gt;
    pong &lt;/span&gt;!&lt;span&gt; {ping, self()},
    &lt;/span&gt;&lt;span&gt;receive&lt;/span&gt;&lt;span&gt;
        pong &lt;/span&gt;-&amp;gt;&lt;span&gt;
            io:format(&lt;/span&gt;&quot;Ping received pong~n&quot;&lt;span&gt;, [])
    &lt;/span&gt;&lt;span&gt;end&lt;/span&gt;&lt;span&gt;,
    ping(N &lt;/span&gt;- 1&lt;span&gt;).

pong() &lt;/span&gt;-&amp;gt; &lt;span&gt;receive&lt;/span&gt;&lt;span&gt;
        finished &lt;/span&gt;-&amp;gt;&lt;span&gt;
            io:format(&lt;/span&gt;&quot;Pong finished~n&quot;&lt;span&gt;, []);
        {ping, Ping_PID} &lt;/span&gt;-&amp;gt;&lt;span&gt;
            io:format(&lt;/span&gt;&quot;Pong received ping~n&quot;&lt;span&gt;, []),
            Ping_PID &lt;/span&gt;!&lt;span&gt; pong,
            pong()
    &lt;/span&gt;&lt;span&gt;end&lt;/span&gt;&lt;span&gt;.

start() &lt;/span&gt;-&amp;gt;&lt;span&gt;
    register(pong, spawn(tut16, pong, [])),
    spawn(tut16, ping, [&lt;/span&gt;3]).
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
2&amp;gt;&lt;span&gt; c(tut16).
{ok, tut16}
&lt;/span&gt;3&amp;gt;&lt;span&gt; tut16:start().
&lt;/span&gt;&amp;lt;0.38.0&amp;gt;&lt;span&gt;
Pong received ping
Ping received pong
Pong received ping
Ping received pong
Pong received ping
Ping received pong
ping finished
Pong finished&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;这是start/0函数，&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;11&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;language-erlang&quot;&gt;&lt;span class=&quot;nb&quot;&gt;&lt;span class=&quot;p&quot;&gt;&lt;span class=&quot;n&quot;&gt;&lt;span class=&quot;p&quot;&gt;&lt;span class=&quot;nb&quot;&gt;&lt;span class=&quot;p&quot;&gt;&lt;span class=&quot;n&quot;&gt;&lt;span class=&quot;p&quot;&gt;&lt;span class=&quot;n&quot;&gt;&lt;span class=&quot;p&quot;&gt;&lt;span class=&quot;p&quot;&gt; &lt;span class=&quot;cnblogs_code&quot;&gt;register(pong, spawn(tut16, pong, [])),&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;同时做了启动“pong”线程，给线程命名两件事。在“ping”进程中，可以这样给“pong”进程发送消息：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;language-erlang&quot;&gt;&lt;span class=&quot;n&quot;&gt;&lt;span class=&quot;o&quot;&gt;&lt;span class=&quot;p&quot;&gt;&lt;span class=&quot;n&quot;&gt;&lt;span class=&quot;p&quot;&gt;&lt;span class=&quot;n&quot;&gt;&lt;span class=&quot;p&quot;&gt; &lt;span class=&quot;cnblogs_code&quot;&gt;pong ! {ping, self()},&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ping/2 现在变成了ping/1，省去了Pong_PID参数（避免在各个函数中混乱传递Ping_PID/Pong_PID参数）&lt;/p&gt;
&lt;h2&gt;4. 分布式编程&lt;/h2&gt;
&lt;p&gt;让我们重写ping pong这个例子，使“ping”和“pong”在不同电脑上运行。第一件事是设置。Erlang的分布式实现提供了一个非常基础的验证机制来避免一台电脑不小心连接到Erlang分布式集群。Erlang集群的交流必须有一个相同的magic cookie。要实现这个最简单的方法是通过一个.erlang.cookie文件，将它放置于集群中的各台电脑（译注：即服务器，后文也译做“电脑（computer）”）的home目录，这样它们就能相互通信：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Windows系统上home目录可以由环境变量$HOME指定——你可能需要自行设置一下&lt;/li&gt;
&lt;li&gt;Linux或UNIX可以忽略，只需要在你启动shell并执行cd（不附带任何参数）命令后所显示的目录下创建一个.erlang.cookie文件&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;.erlang.cookie文件包含了一行相同的原子。举个例子，在Linux或UNIX系统shell中&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;$ cd
$ &lt;/span&gt;&lt;span&gt;cat&lt;/span&gt; &amp;gt;&lt;span&gt; .erlang.cookie
this_is_very_secret
$ &lt;/span&gt;&lt;span&gt;chmod&lt;/span&gt; &lt;span&gt;400&lt;/span&gt; .erlang.cookie
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;chmod命令将只允许文件的拥有者访问.erlang.cookie文件。这是需求不是必要。&lt;/p&gt;
&lt;p&gt;当你启动一个Erlang系统，想和另一个Erlang系统通信，你必须给它一个名字，比如：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
$ erl -sname my_name
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;p&gt;在后面我们会讨论更多关于这个的细节。如果你想实验一下分布式Erlang，但是你只有一台电脑，你可以在这台电脑上启动两个独立的Erlang系统，只需要给它们指定不同的名字。每个运行着Erlang系统的电脑叫做Erlang节点（Erlang node）&lt;/p&gt;
&lt;p&gt;(注意: erl -sname假定所有节点都是用相同的IP，如果我们想在不同的IP上运行Erlang系统请使用 -name代替。但是IP地址必须给全。)&lt;/p&gt;
&lt;p&gt;像下面一样修改ping pong例子使之运行在不同的节点：&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;20&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
-&lt;span&gt;module&lt;/span&gt;&lt;span&gt;(tut17).

&lt;/span&gt;-&lt;span&gt;export&lt;/span&gt;([start_ping/1, start_pong/0,  ping/2, pong/0&lt;span&gt;]).

ping(&lt;/span&gt;0, Pong_Node) -&amp;gt;&lt;span&gt;
    {pong, Pong_Node} &lt;/span&gt;!&lt;span&gt; finished,
    io:format(&lt;/span&gt;&quot;ping finished~n&quot;&lt;span&gt;, []);

ping(N, Pong_Node) &lt;/span&gt;-&amp;gt;&lt;span&gt;
    {pong, Pong_Node} &lt;/span&gt;!&lt;span&gt; {ping, self()},
    &lt;/span&gt;&lt;span&gt;receive&lt;/span&gt;&lt;span&gt;
        pong &lt;/span&gt;-&amp;gt;&lt;span&gt;
            io:format(&lt;/span&gt;&quot;Ping received pong~n&quot;&lt;span&gt;, [])
    &lt;/span&gt;&lt;span&gt;end&lt;/span&gt;&lt;span&gt;,
    ping(N &lt;/span&gt;- 1&lt;span&gt;, Pong_Node).

pong() &lt;/span&gt;-&amp;gt; &lt;span&gt;receive&lt;/span&gt;&lt;span&gt;
        finished &lt;/span&gt;-&amp;gt;&lt;span&gt;
            io:format(&lt;/span&gt;&quot;Pong finished~n&quot;&lt;span&gt;, []);
        {ping, Ping_PID} &lt;/span&gt;-&amp;gt;&lt;span&gt;
            io:format(&lt;/span&gt;&quot;Pong received ping~n&quot;&lt;span&gt;, []),
            Ping_PID &lt;/span&gt;!&lt;span&gt; pong,
            pong()
    &lt;/span&gt;&lt;span&gt;end&lt;/span&gt;&lt;span&gt;.

start_pong() &lt;/span&gt;-&amp;gt;&lt;span&gt;
    register(pong, spawn(tut17, pong, [])).

start_ping(Pong_Node) &lt;/span&gt;-&amp;gt;&lt;span&gt;
    spawn(tut17, ping, [&lt;/span&gt;3, Pong_Node]).
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;p&gt;假设这两台电脑叫做gollum和kosken。第一个节点是kosken，启动ping，第二个是gollum，启动pong。&lt;/p&gt;
&lt;p&gt;kosken如下：&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;6.5&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
kosken&amp;gt; erl -sname &lt;span&gt;ping&lt;/span&gt;&lt;span&gt;
Erlang (BEAM) emulator version &lt;/span&gt;&lt;span&gt;5.2&lt;/span&gt;.&lt;span&gt;3.7&lt;/span&gt; [hipe] [threads:&lt;span&gt;0&lt;/span&gt;&lt;span&gt;]

Eshell V5.&lt;/span&gt;&lt;span&gt;2.3&lt;/span&gt;.&lt;span&gt;7&lt;/span&gt;  (abort with ^&lt;span&gt;G)
(&lt;/span&gt;&lt;span&gt;ping&lt;/span&gt;@kosken)&lt;span&gt;1&lt;/span&gt;&amp;gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;p&gt;这是 gollum:&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;6.5&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
gollum&amp;gt; erl -&lt;span&gt;sname pong
Erlang (BEAM) emulator version &lt;/span&gt;&lt;span&gt;5.2&lt;/span&gt;.&lt;span&gt;3.7&lt;/span&gt; [hipe] [threads:&lt;span&gt;0&lt;/span&gt;&lt;span&gt;]

Eshell V5.&lt;/span&gt;&lt;span&gt;2.3&lt;/span&gt;.&lt;span&gt;7&lt;/span&gt;  (abort with ^&lt;span&gt;G)
(pong@gollum)&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&amp;gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;p&gt;接着在gollum上启动pong：&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;6&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
(pong@gollum)&lt;span&gt;1&lt;/span&gt;&amp;gt; tut17:start_pong(). &lt;span&gt;true&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;p&gt;在kosken节点上启动ping进程：&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;6.5&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
(&lt;span&gt;ping&lt;/span&gt;@kosken)&lt;span&gt;1&lt;/span&gt;&amp;gt;&lt;span&gt; tut17:start_ping(pong@gollum).
&lt;/span&gt;&amp;lt;&lt;span&gt;0.37&lt;/span&gt;.&lt;span&gt;0&lt;/span&gt;&amp;gt;&lt;span&gt;
Ping received pong
Ping received pong 
Ping received pong
&lt;/span&gt;&lt;span&gt;ping&lt;/span&gt; finished
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;p&gt;如上所示，ping pong都已经在运行了。在“pong”那边：&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;6.5&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
(pong@gollum)&lt;span&gt;2&lt;/span&gt;&amp;gt;&lt;span&gt;
Pong received &lt;/span&gt;&lt;span&gt;ping&lt;/span&gt;&lt;span&gt;                 
Pong received &lt;/span&gt;&lt;span&gt;ping&lt;/span&gt;&lt;span&gt;                 
Pong received &lt;/span&gt;&lt;span&gt;ping&lt;/span&gt;&lt;span&gt;                 
Pong finished                      
(pong@gollum)&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&amp;gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;p&gt;注意tut17的代码，你会注意到pong函数的代码没有改变，下面的代码也一样，它不关心ping进程所在的节点：&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;8&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
{&lt;span&gt;ping&lt;/span&gt;, Ping_PID} -&amp;gt;&lt;span&gt;
    io:format(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Pong received ping~n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, []),
    Ping_PID &lt;/span&gt;! pong,
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;p&gt;因此，Erlang pid包含了进程在哪执行的信息。如果你知道一个进程的pid，就可以用“！”运算符发送消息，而不用考虑进程在不在相同的节点。&lt;br/&gt;有一点不同是消息怎样发送给另一个节点上已注册的进程：&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;7.5&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
{pong, Pong_Node} ! {ping, self()},
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;一个元组tuple {registered_name,node_name}用来代替 registered_name。&lt;/p&gt;
&lt;p&gt;在钱的例子中，‘’ping”和“pong”由两个独立的Erlang节点的shell中启动，也就是说spawn可以在不同的节点上启动进程。&lt;/p&gt;
&lt;p&gt;下面的例子又是ping pong程序，但是这一次“ping”在另一个节点启动：&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;20.5&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;61&quot;&gt;
&lt;pre&gt;
-&lt;span&gt;module&lt;/span&gt;&lt;span&gt;(tut18).

&lt;/span&gt;-&lt;span&gt;export&lt;/span&gt;([start/1,  ping/2, pong/0&lt;span&gt;]).

ping(&lt;/span&gt;0, Pong_Node) -&amp;gt;&lt;span&gt;
    {pong, Pong_Node} &lt;/span&gt;!&lt;span&gt; finished,
    io:format(&lt;/span&gt;&quot;ping finished~n&quot;&lt;span&gt;, []);

ping(N, Pong_Node) &lt;/span&gt;-&amp;gt;&lt;span&gt;
    {pong, Pong_Node} &lt;/span&gt;!&lt;span&gt; {ping, self()},
    &lt;/span&gt;&lt;span&gt;receive&lt;/span&gt;&lt;span&gt;
        pong &lt;/span&gt;-&amp;gt;&lt;span&gt;
            io:format(&lt;/span&gt;&quot;Ping received pong~n&quot;&lt;span&gt;, [])
    &lt;/span&gt;&lt;span&gt;end&lt;/span&gt;&lt;span&gt;,
    ping(N &lt;/span&gt;- 1&lt;span&gt;, Pong_Node).

pong() &lt;/span&gt;-&amp;gt; &lt;span&gt;receive&lt;/span&gt;&lt;span&gt;
        finished &lt;/span&gt;-&amp;gt;&lt;span&gt;
            io:format(&lt;/span&gt;&quot;Pong finished~n&quot;&lt;span&gt;, []);
        {ping, Ping_PID} &lt;/span&gt;-&amp;gt;&lt;span&gt;
            io:format(&lt;/span&gt;&quot;Pong received ping~n&quot;&lt;span&gt;, []),
            Ping_PID &lt;/span&gt;!&lt;span&gt; pong,
            pong()
    &lt;/span&gt;&lt;span&gt;end&lt;/span&gt;&lt;span&gt;.

start(Ping_Node) &lt;/span&gt;-&amp;gt;&lt;span&gt;
    register(pong, spawn(tut18, pong, [])),
    spawn(Ping_Node, tut18, ping, [&lt;/span&gt;3, node()]).
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;假设在kosken上被名为ping的Erlang系统已经启动，然后在gollum上这样做：&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;6.5&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
(pong@gollum)1&amp;gt;&lt;span&gt; tut18:start(ping@kosken).
&lt;/span&gt;&amp;lt;3934.39.0&amp;gt;&lt;span&gt;
Pong received ping
Ping received pong
Pong received ping
Ping received pong
Pong received ping
Ping received pong
Pong finished
ping finished&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;p&gt;注意gollum接收所有的输出。这是因为I/O系统会找到进程从哪启动，然后在那输出。&lt;/p&gt;

&lt;h2&gt;5. 一个完整的例子&lt;/h2&gt;
&lt;p&gt;现在写一个完整的例子，叫做“messenger”。messenger这个程序运行在不同的Erlang节点上登陆然后互相发送消息（message）。&lt;/p&gt;
&lt;p&gt;在开始前，注意下面几点：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;这个例子只显示了消息传递的逻辑——并不打算提供一个友好的GUI，虽然这也可以用Erlang完成&lt;/li&gt;
&lt;li&gt;这类问题用OTP的一些设施更容易解决，因为它们能提供一些方法进行代码热更新等 (参见 &lt;a class=&quot; wrap external&quot; href=&quot;http://link.zhihu.com/?target=http%3A//erlang.org/doc/design_principles/des_princ.html%23otp%2520design%2520principles&quot; rel=&quot;nofollow noreferrer&quot; target=&quot;_blank&quot;&gt;OTP Design Principles&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;第一个程序有一些缺陷。后续版本会逐步修复它。The first program contains some inadequacies regarding handling of nodes which disappear. These are corrected in a later version of the program.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;messenger允许创建客户端然后连接中央服务器，并服务器会知晓客户端是哪些、它们在哪。也就是说，用户不需要关系当前节点的名字和其他节点在哪就能发送消息。&lt;/p&gt;
&lt;p&gt;messenger.erl文件如下:&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;71&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;162&quot;&gt;
&lt;pre&gt;
&lt;span&gt;%%&lt;/span&gt;&lt;span&gt;% Message passing utility.  &lt;/span&gt;&lt;span&gt;
%%&lt;/span&gt;&lt;span&gt;% User interface:&lt;/span&gt;&lt;span&gt;
%%&lt;/span&gt;&lt;span&gt;% logon(Name)&lt;/span&gt;&lt;span&gt;
%%&lt;/span&gt;&lt;span&gt;%     One user at a time can log in from each Erlang node in the&lt;/span&gt;&lt;span&gt;
%%&lt;/span&gt;&lt;span&gt;%     system messenger: and choose a suitable Name. If the Name&lt;/span&gt;&lt;span&gt;
%%&lt;/span&gt;&lt;span&gt;%     is already logged in at another node or if someone else is&lt;/span&gt;&lt;span&gt;
%%&lt;/span&gt;&lt;span&gt;%     already logged in at the same node, login will be rejected&lt;/span&gt;&lt;span&gt;
%%&lt;/span&gt;&lt;span&gt;%     with a suitable error message.&lt;/span&gt;&lt;span&gt;
%%&lt;/span&gt;&lt;span&gt;% logoff()&lt;/span&gt;&lt;span&gt;
%%&lt;/span&gt;&lt;span&gt;%     Logs off anybody at that node&lt;/span&gt;&lt;span&gt;
%%&lt;/span&gt;&lt;span&gt;% message(ToName, Message)&lt;/span&gt;&lt;span&gt;
%%&lt;/span&gt;&lt;span&gt;%     sends Message to ToName. Error messages if the user of this &lt;/span&gt;&lt;span&gt;
%%&lt;/span&gt;&lt;span&gt;%     function is not logged on or if ToName is not logged on at&lt;/span&gt;&lt;span&gt;
%%&lt;/span&gt;&lt;span&gt;%     any node.&lt;/span&gt;&lt;span&gt;
%%&lt;/span&gt;&lt;span&gt;%&lt;/span&gt;&lt;span&gt;
%%&lt;/span&gt;&lt;span&gt;% One node in the network of Erlang nodes runs a server which maintains&lt;/span&gt;&lt;span&gt;
%%&lt;/span&gt;&lt;span&gt;% data about the logged on users. The server is registered as &quot;messenger&quot;&lt;/span&gt;&lt;span&gt;
%%&lt;/span&gt;&lt;span&gt;% Each node where there is a user logged on runs a client process registered&lt;/span&gt;&lt;span&gt;
%%&lt;/span&gt;&lt;span&gt;% as &quot;mess_client&quot; &lt;/span&gt;&lt;span&gt;
%%&lt;/span&gt;&lt;span&gt;%&lt;/span&gt;&lt;span&gt;
%%&lt;/span&gt;&lt;span&gt;% Protocol between the client processes and the server&lt;/span&gt;&lt;span&gt;
%%&lt;/span&gt;&lt;span&gt;% ----------------------------------------------------&lt;/span&gt;&lt;span&gt;
%%&lt;/span&gt;&lt;span&gt;% &lt;/span&gt;&lt;span&gt;
%%&lt;/span&gt;&lt;span&gt;% To server: {ClientPid, logon, UserName}&lt;/span&gt;&lt;span&gt;
%%&lt;/span&gt;&lt;span&gt;% Reply {messenger, stop, user_exists_at_other_node} stops the client&lt;/span&gt;&lt;span&gt;
%%&lt;/span&gt;&lt;span&gt;% Reply {messenger, logged_on} logon was successful&lt;/span&gt;&lt;span&gt;
%%&lt;/span&gt;&lt;span&gt;%&lt;/span&gt;&lt;span&gt;
%%&lt;/span&gt;&lt;span&gt;% To server: {ClientPid, logoff}&lt;/span&gt;&lt;span&gt;
%%&lt;/span&gt;&lt;span&gt;% Reply: {messenger, logged_off}&lt;/span&gt;&lt;span&gt;
%%&lt;/span&gt;&lt;span&gt;%&lt;/span&gt;&lt;span&gt;
%%&lt;/span&gt;&lt;span&gt;% To server: {ClientPid, logoff}&lt;/span&gt;&lt;span&gt;
%%&lt;/span&gt;&lt;span&gt;% Reply: no reply&lt;/span&gt;&lt;span&gt;
%%&lt;/span&gt;&lt;span&gt;%&lt;/span&gt;&lt;span&gt;
%%&lt;/span&gt;&lt;span&gt;% To server: {ClientPid, message_to, ToName, Message} send a message&lt;/span&gt;&lt;span&gt;
%%&lt;/span&gt;&lt;span&gt;% Reply: {messenger, stop, you_are_not_logged_on} stops the client&lt;/span&gt;&lt;span&gt;
%%&lt;/span&gt;&lt;span&gt;% Reply: {messenger, receiver_not_found} no user with this name logged on&lt;/span&gt;&lt;span&gt;
%%&lt;/span&gt;&lt;span&gt;% Reply: {messenger, sent} Message has been sent (but no guarantee)&lt;/span&gt;&lt;span&gt;
%%&lt;/span&gt;&lt;span&gt;%&lt;/span&gt;&lt;span&gt;
%%&lt;/span&gt;&lt;span&gt;% To client: {message_from, Name, Message},&lt;/span&gt;&lt;span&gt;
%%&lt;/span&gt;&lt;span&gt;%&lt;/span&gt;&lt;span&gt;
%%&lt;/span&gt;&lt;span&gt;% Protocol between the &quot;commands&quot; and the client&lt;/span&gt;&lt;span&gt;
%%&lt;/span&gt;&lt;span&gt;% ----------------------------------------------&lt;/span&gt;&lt;span&gt;
%%&lt;/span&gt;&lt;span&gt;%&lt;/span&gt;&lt;span&gt;
%%&lt;/span&gt;&lt;span&gt;% Started: messenger:client(Server_Node, Name)&lt;/span&gt;&lt;span&gt;
%%&lt;/span&gt;&lt;span&gt;% To client: logoff&lt;/span&gt;&lt;span&gt;
%%&lt;/span&gt;&lt;span&gt;% To client: {message_to, ToName, Message}&lt;/span&gt;&lt;span&gt;
%%&lt;/span&gt;&lt;span&gt;%&lt;/span&gt;&lt;span&gt;
%%&lt;/span&gt;&lt;span&gt;% Configuration: change the server_node() function to return the&lt;/span&gt;&lt;span&gt;
%%&lt;/span&gt;&lt;span&gt;% name of the node where the messenger server runs&lt;/span&gt;

-&lt;span&gt;module&lt;/span&gt;&lt;span&gt;(messenger).
&lt;/span&gt;-&lt;span&gt;export&lt;/span&gt;([start_server/0, server/1, logon/1, logoff/0, message/2, client/2&lt;span&gt;]).

&lt;/span&gt;&lt;span&gt;%%&lt;/span&gt;&lt;span&gt;% Change the function below to return the name of the node where the&lt;/span&gt;&lt;span&gt;
%%&lt;/span&gt;&lt;span&gt;% messenger server runs&lt;/span&gt;
server_node() -&amp;gt;&lt;span&gt;
    messenger@bill.

&lt;/span&gt;&lt;span&gt;%%&lt;/span&gt;&lt;span&gt;% This is the server process for the &quot;messenger&quot;&lt;/span&gt;&lt;span&gt;
%%&lt;/span&gt;&lt;span&gt;% the user list has the format [{ClientPid1, Name1},{ClientPid22, Name2},...]&lt;/span&gt;
server(User_List) -&amp;gt;
    &lt;span&gt;receive&lt;/span&gt;&lt;span&gt;
        {From, logon, Name} &lt;/span&gt;-&amp;gt;&lt;span&gt;
            New_User_List &lt;/span&gt;=&lt;span&gt; server_logon(From, Name, User_List),
            server(New_User_List);
        {From, logoff} &lt;/span&gt;-&amp;gt;&lt;span&gt;
            New_User_List &lt;/span&gt;=&lt;span&gt; server_logoff(From, User_List),
            server(New_User_List);
        {From, message_to, To, Message} &lt;/span&gt;-&amp;gt;&lt;span&gt;
            server_transfer(From, To, Message, User_List),
            io:format(&lt;/span&gt;&quot;list is now: ~p~n&quot;&lt;span&gt;, [User_List]),
            server(User_List)
    &lt;/span&gt;&lt;span&gt;end&lt;/span&gt;&lt;span&gt;.

&lt;/span&gt;&lt;span&gt;%%&lt;/span&gt;&lt;span&gt;% Start the server&lt;/span&gt;
start_server() -&amp;gt;&lt;span&gt;
    register(messenger, spawn(messenger, server, [[]])).


&lt;/span&gt;&lt;span&gt;%%&lt;/span&gt;&lt;span&gt;% Server adds a new user to the user list&lt;/span&gt;
server_logon(From, Name, User_List) -&amp;gt;
    &lt;span&gt;%%&lt;/span&gt;&lt;span&gt; check if logged on anywhere else&lt;/span&gt;
    &lt;span&gt;case&lt;/span&gt; lists:keymember(Name, 2, User_List) &lt;span&gt;of&lt;/span&gt;
        &lt;span&gt;true&lt;/span&gt; -&amp;gt;&lt;span&gt;
            From &lt;/span&gt;! {messenger, stop, user_exists_at_other_node},  %&lt;span&gt;reject logon
            User_List;
        &lt;/span&gt;&lt;span&gt;false&lt;/span&gt; -&amp;gt;&lt;span&gt;
            From &lt;/span&gt;!&lt;span&gt; {messenger, logged_on},
            [{From, Name} &lt;/span&gt;| User_List]        %&lt;span&gt;add user to the list
    &lt;/span&gt;&lt;span&gt;end&lt;/span&gt;&lt;span&gt;.

&lt;/span&gt;&lt;span&gt;%%&lt;/span&gt;&lt;span&gt;% Server deletes a user from the user list&lt;/span&gt;
server_logoff(From, User_List) -&amp;gt;&lt;span&gt;
    lists:keydelete(From, &lt;/span&gt;1&lt;span&gt;, User_List).


&lt;/span&gt;&lt;span&gt;%%&lt;/span&gt;&lt;span&gt;% Server transfers a message between user&lt;/span&gt;
server_transfer(From, To, Message, User_List) -&amp;gt;
    &lt;span&gt;%%&lt;/span&gt;&lt;span&gt; check that the user is logged on and who he is&lt;/span&gt;
    &lt;span&gt;case&lt;/span&gt; lists:keysearch(From, 1, User_List) &lt;span&gt;of&lt;/span&gt;
        &lt;span&gt;false&lt;/span&gt; -&amp;gt;&lt;span&gt;
            From &lt;/span&gt;!&lt;span&gt; {messenger, stop, you_are_not_logged_on};
        {value, {From, Name}} &lt;/span&gt;-&amp;gt;&lt;span&gt;
            server_transfer(From, Name, To, Message, User_List)
    &lt;/span&gt;&lt;span&gt;end&lt;/span&gt;&lt;span&gt;.
&lt;/span&gt;&lt;span&gt;%%&lt;/span&gt;&lt;span&gt;% If the user exists, send the message&lt;/span&gt;
server_transfer(From, Name, To, Message, User_List) -&amp;gt;
    &lt;span&gt;%%&lt;/span&gt;&lt;span&gt; Find the receiver and send the message&lt;/span&gt;
    &lt;span&gt;case&lt;/span&gt; lists:keysearch(To, 2, User_List) &lt;span&gt;of&lt;/span&gt;
        &lt;span&gt;false&lt;/span&gt; -&amp;gt;&lt;span&gt;
            From &lt;/span&gt;!&lt;span&gt; {messenger, receiver_not_found};
        {value, {ToPid, To}} &lt;/span&gt;-&amp;gt;&lt;span&gt;
            ToPid &lt;/span&gt;!&lt;span&gt; {message_from, Name, Message}, 
            From &lt;/span&gt;!&lt;span&gt; {messenger, sent} 
    &lt;/span&gt;&lt;span&gt;end&lt;/span&gt;&lt;span&gt;.


&lt;/span&gt;&lt;span&gt;%%&lt;/span&gt;&lt;span&gt;% User Commands&lt;/span&gt;
logon(Name) -&amp;gt;
    &lt;span&gt;case&lt;/span&gt; whereis(mess_client) &lt;span&gt;of&lt;/span&gt;&lt;span&gt; 
        undefined &lt;/span&gt;-&amp;gt;&lt;span&gt;
            register(mess_client, 
                     spawn(messenger, client, [server_node(), Name]));
        _ &lt;/span&gt;-&amp;gt;&lt;span&gt; already_logged_on
    &lt;/span&gt;&lt;span&gt;end&lt;/span&gt;&lt;span&gt;.

logoff() &lt;/span&gt;-&amp;gt;&lt;span&gt;
    mess_client &lt;/span&gt;!&lt;span&gt; logoff.

message(ToName, Message) &lt;/span&gt;-&amp;gt;
    &lt;span&gt;case&lt;/span&gt; whereis(mess_client) &lt;span&gt;of&lt;/span&gt; % Test &lt;span&gt;if&lt;/span&gt;&lt;span&gt; the client is running
        undefined &lt;/span&gt;-&amp;gt;&lt;span&gt;
            not_logged_on;
        _ &lt;/span&gt;-&amp;gt; mess_client !&lt;span&gt; {message_to, ToName, Message},
             ok
&lt;/span&gt;&lt;span&gt;end&lt;/span&gt;&lt;span&gt;.


&lt;/span&gt;&lt;span&gt;%%&lt;/span&gt;&lt;span&gt;% The client process which runs on each server node&lt;/span&gt;
client(Server_Node, Name) -&amp;gt;&lt;span&gt;
    {messenger, Server_Node} &lt;/span&gt;!&lt;span&gt; {self(), logon, Name},
    await_result(),
    client(Server_Node).

client(Server_Node) &lt;/span&gt;-&amp;gt;
    &lt;span&gt;receive&lt;/span&gt;&lt;span&gt;
        logoff &lt;/span&gt;-&amp;gt;&lt;span&gt;
            {messenger, Server_Node} &lt;/span&gt;!&lt;span&gt; {self(), logoff},
            exit(normal);
        {message_to, ToName, Message} &lt;/span&gt;-&amp;gt;&lt;span&gt;
            {messenger, Server_Node} &lt;/span&gt;!&lt;span&gt; {self(), message_to, ToName, Message},
            await_result();
        {message_from, FromName, Message} &lt;/span&gt;-&amp;gt;&lt;span&gt;
            io:format(&lt;/span&gt;&quot;Message from ~p: ~p~n&quot;&lt;span&gt;, [FromName, Message])
    &lt;/span&gt;&lt;span&gt;end&lt;/span&gt;&lt;span&gt;,
    client(Server_Node).

&lt;/span&gt;&lt;span&gt;%%&lt;/span&gt;&lt;span&gt;% wait for a response from the server&lt;/span&gt;
await_result() -&amp;gt;
    &lt;span&gt;receive&lt;/span&gt;&lt;span&gt;
        {messenger, stop, Why} &lt;/span&gt;-&amp;gt; %&lt;span&gt; Stop the client 
            io:format(&lt;/span&gt;&quot;~p~n&quot;&lt;span&gt;, [Why]),
            exit(normal);
        {messenger, What} &lt;/span&gt;-&amp;gt;  %&lt;span&gt; Normal response
            io:format(&lt;/span&gt;&quot;~p~n&quot;&lt;span&gt;, [What])
    &lt;/span&gt;&lt;span&gt;end&lt;/span&gt;.
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;p&gt;要运行这个程序，你需要：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;配置server_node()函数&lt;/li&gt;
&lt;li&gt;把编译后的字节码 (messenger.beam) 复制到其它电脑，这样它们才能使用这些函数&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;接下来的例子是使用这个程序，在四个不同电脑上启动Erlang节点。如果你没有那么多电脑那么可以考虑在一台机器上启动不同的节点（译注：-sname，具体可以参见前面小结）。&lt;/p&gt;

&lt;p&gt;四个Erlang节点分别是：messenger@super, c1@bilbo, c2@kosken, c3@gollum.&lt;/p&gt;
&lt;p&gt;首先启动服务器节点messenger@supe:&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;language-erlang&quot;&gt;&lt;span class=&quot;p&quot;&gt;&lt;span class=&quot;n&quot;&gt;&lt;span class=&quot;p&quot;&gt;&lt;span class=&quot;n&quot;&gt;&lt;span class=&quot;p&quot;&gt;&lt;span class=&quot;mi&quot;&gt;&lt;span class=&quot;o&quot;&gt;&lt;span class=&quot;nn&quot;&gt;&lt;span class=&quot;p&quot;&gt;&lt;span class=&quot;nf&quot;&gt;&lt;span class=&quot;p&quot;&gt;&lt;span class=&quot;n&quot;&gt; &lt;span class=&quot;cnblogs_code&quot;&gt;(messenger@super)1&amp;gt; messenger:start_server(). &lt;span&gt;true&lt;/span&gt;&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;接着在c1@bilbo上登陆Peter:&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;6&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
(c1@bilbo)1&amp;gt; messenger:logon(peter). &lt;span&gt;true&lt;/span&gt;&lt;span&gt;
logged_on&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;p&gt;在c2@kosken上登陆James:&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;6&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
(c2@kosken)1&amp;gt; messenger:logon(james). &lt;span&gt;true&lt;/span&gt;&lt;span&gt;
logged_on&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;p&gt;Fred在c3@gollum上登陆:&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;6&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
(c3@gollum)1&amp;gt; messenger:logon(fred). &lt;span&gt;true&lt;/span&gt;&lt;span&gt;
logged_on&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;p&gt;现在Peter给Fred发送消息：&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;6.5&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
(c1@bilbo)2&amp;gt; messenger:message(fred, &quot;hello&quot;&lt;span&gt;).
ok
sent&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;p&gt;Fred收到消息并回复Peter一条消息然后注销：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
Message from peter: &quot;hello&quot;&lt;span&gt;
(c3@gollum)&lt;/span&gt;2&amp;gt; messenger:message(peter, &quot;go away, I'm busy&quot;&lt;span&gt;).
ok
sent
(c3@gollum)&lt;/span&gt;3&amp;gt;&lt;span&gt; messenger:logoff().
logoff&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;James现在尝试向Fred发送消息:&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;6.5&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
(c2@kosken)2&amp;gt; messenger:message(fred, &quot;peter doesn't like you&quot;&lt;span&gt;).
ok
receiver_not_found&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;p&gt;但是失败了，因为Fred早就离线了。&lt;/p&gt;
&lt;p&gt;让我们先看看这里引进的新概念。&lt;/p&gt;
&lt;p&gt;有两个版本的server_transfer函数：一个有四个参数(server_transfer/4) 一个有五个参数(server_transfer/5)。Erlang将他们视作不同的函数。&lt;/p&gt;
&lt;p&gt;注意怎样写server函数让它调用自己，通过server(User_List)形成一个循环结构。Erlang编译器很“聪明”，它会进行代码优化，以至于它真的会变成一个循环而不是函数调用。但是这只限于在这个调用后没有其它工作。这会导致进程（译注：的内存占用）在每次循环后变得越来越大。&lt;/p&gt;
&lt;p&gt;也使用了一些lists模块的函数。这是一个非常有用的模块，建议看看它的使用手册（erl -man lists）。lists:keymember(Key,Position,Lists)遍历tuple列表然后检查tuple的Position位置是否和Key匹配，tuple的第一个元素是1.如果寻找成功返回true，否则返回false。&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;19.5&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;59&quot;&gt;
&lt;pre&gt;
3&amp;gt; lists:keymember(a, 2&lt;span&gt;, [{x,y,z},{b,b,b},{b,a,c},{q,r,s}]).
&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;
4&amp;gt; lists:keymember(p, 2&lt;span&gt;, [{x,y,z},{b,b,b},{b,a,c},{q,r,s}]).
&lt;/span&gt;&lt;span&gt;false&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;p&gt;lists:keydelete的工作方式类似，只是如果找到就删除它并返回剩余列表：&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;16.5&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;53&quot;&gt;
&lt;pre&gt;
5&amp;gt; lists:keydelete(a, 2&lt;span&gt;, [{x,y,z},{b,b,b},{b,a,c},{q,r,s}]).
[{x,y,z},{b,b,b},{q,r,s}]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;p&gt;lists:keysearch类似于lists:keymember，但是返回 {value,Tuple_Found}，或者寻找失败返回false原子。&lt;/p&gt;
&lt;p&gt;在lists模块有很多有用的函数。&lt;/p&gt;
&lt;p&gt;一个Erlang进程（概念上的）会一直运行直到它执行receive结构，直到遍历消息队列后没有发现和receive结构中的模式相匹配的消息。之所以说是“概念上的”是因为Erlang系统执行各个进程其实是会共享CPU时间的。&lt;/p&gt;
&lt;p&gt;当一个进程没有事做的时候它会终止，即它调用的最后一个函数简单返回且不再调用其他函数。另一个终止进程的方法是调用exit/1,。exit/1的参数有特别的意义，我们将会在后面讨论。在这个例子中，调用exit(normal)即可，它会进程运行到没有事做再终止是一样的效果。&lt;/p&gt;
&lt;p&gt;内置函数whereis(RegisteredName)检查一个名为RegisteredName的具名进程是否存在。如果存在，返回它的pid，如果不存在， ，返回原子undefined。&lt;/p&gt;
&lt;p&gt;到目前为止你应该已经理解了messenger模块的大部分代码。让我们取一个片段看看它的细节。&lt;/p&gt;
&lt;p&gt;第一个用户“发送”消息：&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;8&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;language-erlang&quot;&gt;&lt;span class=&quot;nn&quot;&gt;&lt;span class=&quot;p&quot;&gt;&lt;span class=&quot;nf&quot;&gt;&lt;span class=&quot;p&quot;&gt;&lt;span class=&quot;n&quot;&gt;&lt;span class=&quot;p&quot;&gt;&lt;span class=&quot;s&quot;&gt;&lt;span class=&quot;p&quot;&gt; &lt;span class=&quot;cnblogs_code&quot;&gt;messenger:message(fred, &quot;hello&quot;)&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在测试了客户端进程存在之后：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;language-erlang&quot;&gt;&lt;span class=&quot;nb&quot;&gt;&lt;span class=&quot;p&quot;&gt;&lt;span class=&quot;n&quot;&gt;&lt;span class=&quot;p&quot;&gt; &lt;span class=&quot;cnblogs_code&quot;&gt;whereis(mess_client) &lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;将会发送一条消息给mess_client：&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;9&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;language-erlang&quot;&gt;&lt;span class=&quot;n&quot;&gt;&lt;span class=&quot;o&quot;&gt;&lt;span class=&quot;p&quot;&gt;&lt;span class=&quot;n&quot;&gt;&lt;span class=&quot;p&quot;&gt;&lt;span class=&quot;n&quot;&gt;&lt;span class=&quot;p&quot;&gt;&lt;span class=&quot;s&quot;&gt;&lt;span class=&quot;p&quot;&gt; &lt;span class=&quot;cnblogs_code&quot;&gt;mess_client ! {message_to, fred, &quot;hello&quot;}&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;它的实现是客户端向服务器发送消息：&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;12&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;language-erlang&quot;&gt;&lt;span class=&quot;p&quot;&gt;&lt;span class=&quot;n&quot;&gt;&lt;span class=&quot;p&quot;&gt;&lt;span class=&quot;n&quot;&gt;&lt;span class=&quot;p&quot;&gt;&lt;span class=&quot;n&quot;&gt;&lt;span class=&quot;p&quot;&gt;&lt;span class=&quot;o&quot;&gt;&lt;span class=&quot;p&quot;&gt;&lt;span class=&quot;n&quot;&gt;&lt;span class=&quot;p&quot;&gt;&lt;span class=&quot;n&quot;&gt;&lt;span class=&quot;p&quot;&gt;&lt;span class=&quot;n&quot;&gt;&lt;span class=&quot;p&quot;&gt;&lt;span class=&quot;s&quot;&gt;&lt;span class=&quot;p&quot;&gt; &lt;span class=&quot;cnblogs_code&quot;&gt;{messenger, messenger@super} ! {self(), message_to, fred, &quot;hello&quot;},&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后等待服务器的回复。&lt;/p&gt;
&lt;p&gt;把目光转向服务器，它收到消息然后调用：&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;11&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;language-erlang&quot;&gt;&lt;span class=&quot;nf&quot;&gt;&lt;span class=&quot;p&quot;&gt;&lt;span class=&quot;nv&quot;&gt;&lt;span class=&quot;p&quot;&gt;&lt;span class=&quot;n&quot;&gt;&lt;span class=&quot;p&quot;&gt;&lt;span class=&quot;s&quot;&gt;&lt;span class=&quot;p&quot;&gt;&lt;span class=&quot;nv&quot;&gt;&lt;span class=&quot;p&quot;&gt; &lt;span class=&quot;cnblogs_code&quot;&gt;server_transfer(From, fred, &quot;hello&quot;, User_List),&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;它检查User_List中的pid:&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;9&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;language-erlang&quot;&gt;&lt;span class=&quot;nn&quot;&gt;&lt;span class=&quot;p&quot;&gt;&lt;span class=&quot;nf&quot;&gt;&lt;span class=&quot;p&quot;&gt;&lt;span class=&quot;nv&quot;&gt;&lt;span class=&quot;p&quot;&gt;&lt;span class=&quot;mi&quot;&gt;&lt;span class=&quot;p&quot;&gt;&lt;span class=&quot;nv&quot;&gt;&lt;span class=&quot;p&quot;&gt; &lt;span class=&quot;cnblogs_code&quot;&gt;lists:keysearch(From, 1, User_List) &lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果keysearch返回原子false，引发错误，服务器会这样回复：&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;9&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;language-erlang&quot;&gt;&lt;span class=&quot;nv&quot;&gt;&lt;span class=&quot;o&quot;&gt;&lt;span class=&quot;p&quot;&gt;&lt;span class=&quot;n&quot;&gt;&lt;span class=&quot;p&quot;&gt;&lt;span class=&quot;n&quot;&gt;&lt;span class=&quot;p&quot;&gt;&lt;span class=&quot;n&quot;&gt;&lt;span class=&quot;p&quot;&gt; &lt;span class=&quot;cnblogs_code&quot;&gt;From ! {messenger, stop, you_are_not_logged_on}&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;它将被客户端收到，然后客户端执行exit(normal)终止。如果keysearch返回{value,{From,Name}}，很明显用户已经登录，他的名字（peter）会被绑定到Name上。&lt;/p&gt;
&lt;p&gt;现在让我们调用：&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;11&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;language-erlang&quot;&gt;&lt;span class=&quot;nf&quot;&gt;&lt;span class=&quot;p&quot;&gt;&lt;span class=&quot;nv&quot;&gt;&lt;span class=&quot;p&quot;&gt;&lt;span class=&quot;n&quot;&gt;&lt;span class=&quot;p&quot;&gt;&lt;span class=&quot;n&quot;&gt;&lt;span class=&quot;p&quot;&gt;&lt;span class=&quot;s&quot;&gt;&lt;span class=&quot;p&quot;&gt;&lt;span class=&quot;nv&quot;&gt;&lt;span class=&quot;p&quot;&gt; &lt;span class=&quot;cnblogs_code&quot;&gt;server_transfer(From, peter, fred, &quot;hello&quot;, User_List)&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注意server_transfer/5，它不同于server_transfer/4。另一个keysearch会在User_List上进行，然后返回fred客户端的pid：&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;9&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;language-erlang&quot;&gt;&lt;span class=&quot;nn&quot;&gt;&lt;span class=&quot;p&quot;&gt;&lt;span class=&quot;nf&quot;&gt;&lt;span class=&quot;p&quot;&gt;&lt;span class=&quot;n&quot;&gt;&lt;span class=&quot;p&quot;&gt;&lt;span class=&quot;mi&quot;&gt;&lt;span class=&quot;p&quot;&gt;&lt;span class=&quot;nv&quot;&gt;&lt;span class=&quot;p&quot;&gt; &lt;span class=&quot;cnblogs_code&quot;&gt;lists:keysearch(fred, 2, User_List)&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这次Position指定为2，也就是tuple的第二个元素和fred进行匹配。如果返回原子false，fred就没有登录然后发送下面的消息：&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;8&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;language-erlang&quot;&gt;&lt;span class=&quot;nv&quot;&gt;&lt;span class=&quot;o&quot;&gt;&lt;span class=&quot;p&quot;&gt;&lt;span class=&quot;n&quot;&gt;&lt;span class=&quot;p&quot;&gt;&lt;span class=&quot;n&quot;&gt;&lt;span class=&quot;p&quot;&gt; &lt;span class=&quot;cnblogs_code&quot;&gt;From ! {messenger, receiver_not_found};&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;客户端会收到该条消息。&lt;/p&gt;
&lt;p&gt;如果keysearch返回：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;language-erlang&quot;&gt;&lt;span class=&quot;p&quot;&gt;&lt;span class=&quot;n&quot;&gt;&lt;span class=&quot;p&quot;&gt;&lt;span class=&quot;p&quot;&gt;&lt;span class=&quot;nv&quot;&gt;&lt;span class=&quot;p&quot;&gt;&lt;span class=&quot;n&quot;&gt;&lt;span class=&quot;p&quot;&gt; &lt;span class=&quot;cnblogs_code&quot;&gt;{value, {ToPid, fred}}&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;会向fred发送：&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;10&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;language-erlang&quot;&gt;&lt;span class=&quot;nv&quot;&gt;&lt;span class=&quot;o&quot;&gt;&lt;span class=&quot;p&quot;&gt;&lt;span class=&quot;n&quot;&gt;&lt;span class=&quot;p&quot;&gt;&lt;span class=&quot;n&quot;&gt;&lt;span class=&quot;p&quot;&gt;&lt;span class=&quot;s&quot;&gt;&lt;span class=&quot;p&quot;&gt; &lt;span class=&quot;cnblogs_code&quot;&gt;ToPid ! {message_from, peter, &quot;hello&quot;}, &lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;向peter发送：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;language-erlang&quot;&gt;&lt;span class=&quot;nv&quot;&gt;&lt;span class=&quot;o&quot;&gt;&lt;span class=&quot;p&quot;&gt;&lt;span class=&quot;n&quot;&gt;&lt;span class=&quot;p&quot;&gt;&lt;span class=&quot;n&quot;&gt;&lt;span class=&quot;p&quot;&gt; &lt;span class=&quot;cnblogs_code&quot;&gt;From ! {messenger, sent} &lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Fred'收到该条消息然后输出：&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;8&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
{message_from, peter, &quot;hello&quot;} -&amp;gt;&lt;span&gt;
    io:format(&lt;/span&gt;&quot;Message from ~p: ~p~n&quot;, [peter, &quot;hello&quot;])
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Peter客户端在await_result函数调用中接收消息。&lt;/p&gt;
</description>
<pubDate>Mon, 13 Nov 2017 04:47:00 +0000</pubDate>
<dc:creator>racaljk</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/racaljk/p/7825809.html</dc:identifier>
</item>
</channel>
</rss>