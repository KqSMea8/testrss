<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>2018/2/14 设计模式学习笔记(一) 自己实现ArrayList,LinkedList和Iterator，以及在此过程中对于面向对象，面向接口，还有抽象类的一些思考感悟 - yangfeiORfeiyang</title>
<link>http://www.cnblogs.com/yangfeiORfeiyang/p/8448430.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/yangfeiORfeiyang/p/8448430.html</guid>
<description>&lt;p&gt;因为本人目前为止学习编程不过七个月，所以后面的感悟对于一些大神来说可能嗤之以鼻，但对于一些刚刚入门的萌新来说在理解面向对象的思想上，以及抽象类和接口应该怎么设计等方面应该还是会有所帮助的&lt;/p&gt;
&lt;p&gt;首先我们定义一个自己的Collection接口:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1313797/201802/1313797-20180214135909984-1772513186.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;创建自己的ArrayList类并实现此接口&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1313797/201802/1313797-20180214140032702-1259085665.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;再创建自己的LinkedList类并实现MyCollection接口&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1313797/201802/1313797-20180214140114437-995373772.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1313797/201802/1313797-20180214140122890-1623334890.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;现在两个类都创建好了，我们开始定义Iterator接口&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1313797/201802/1313797-20180214140347421-480004877.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;在MyArrayList里创建一个内部类实现Iterator并封装，同时开放一个接口让别人获取此内部类的对象&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1313797/201802/1313797-20180214140505015-203432564.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;MyLinkedList相同&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1313797/201802/1313797-20180214140535702-1598783445.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;打完收工；其实ArrayList和LinkedList源码的Iterator都是直接对底层的数组和链表做操作，不过我怕麻烦，所以直接把当前对象传了进去；&lt;/p&gt;
&lt;p&gt;Iterator在设计模式里叫做迭代器模式，其主要定义为，提供一种可以访问容器种各个的方式，但又不暴露该容器的内部细节。这里内部细节的意思就是因为每个容器本身的数据结构不同，如ArrayList底层是一个数组，LinkedList底层则是链表，访问ArrayList的时候你可以使用for，但是如果需要遍历LinkedList则只能使用while。(我代码中之所以都是调用了get，单纯是因为怕麻烦，源码都是直接对数组和链表做的操作)&lt;/p&gt;
&lt;p&gt;而Iterator给我们定义了一个访问容器内元素的一个规范，具体要怎么实现就看你自己，这样一来在别人访问某个容器中元素的时候就不必再先去了解一下此容器的内部细节，直接获得此容器的迭代器对象就行；这也是面向对象编程中让对象帮我们去做事情这种思想的直接体现；&lt;/p&gt;
&lt;p&gt;在此次学习中，我学习到了两个点，一个便是统一规范的重要性，二个便是面向对象思想的更深入了解，也懂得了为什么说面向接口基于面向对象但高于面向对象；&lt;/p&gt;

&lt;p&gt;下面是我在通过Iterator设计模式的学习上举一反三的发散式思考，抛却智商因素，这也是我感觉自己不管学什么都比别人更深更快，同样一个点我能看到面而很多人只能看到点的原因之一；&lt;/p&gt;
&lt;p&gt;首先接口是一个规范，是对一个体某些行为的定义。而与接口的概念最容易混淆的便是抽象类，同样可以定义抽象方法，同样不能有实例，只是抽象类可以实现方法体，并且也拥有构造函数，它与子类的关系也是继承，但他们的区别难道仅仅在于代码级别的体现吗？&lt;/p&gt;
&lt;p&gt;这里说下我的理解，所谓抽象类，应该是一个我们能想到的某个事物，只是它太笼统，抽象，不够具体，但我们知道它能大概干什么，具体怎么干。举一个例子，比如交通工具，这就很抽象了，交通工具可以是汽车，可以是飞机，但是它们都有一个共同点，那就是可以运送我们从一个地方到另一个地方。这个时候这种运送就是交通工具的共同行为，我们就可以将其、&lt;/p&gt;
&lt;p&gt;抽象为一个接口，这个接口的功能就是运送能力。但是汽车是在地上跑的。飞机是在天上跑的，而且汽车和飞机还是太抽象了，汽车可能是大卡车，也可能是小轿车，而飞机也有可能是客机，也可能是直升飞机，它们的启动方式和本身的构造都不相同，所以汽车和飞机虽然我们知道它们的运送行为是一个在地上跑，一个在天上飞。但是它们的&lt;/p&gt;
&lt;p&gt;底下的种类分支太多，所以汽车和飞机都只能定义为抽象类。在这个时候我们可以在抽象类中实现它们一个在地上跑，一个是在天上飞的方法，但具体怎么跑，怎么飞我们则要将其定义为抽象方法，然后让具体的卡车或者汽车或者直升机对象实现它，甚至我们可以在其中定义一些公有属性；这样一来我们就不用去关心每个具体的对象它们怎么跑怎么飞的内部细节，只需要创建具体交通工具对象的人去实现它，我们直接调用即可；下面是代码示例：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1313797/201802/1313797-20180214154030421-2100071900.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1313797/201802/1313797-20180214154113171-768873045.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1313797/201802/1313797-20180214154123906-587284958.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1313797/201802/1313797-20180214154133702-1137453407.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1313797/201802/1313797-20180214154144515-128316940.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1313797/201802/1313797-20180214154153640-214893821.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

</description>
<pubDate>Wed, 14 Feb 2018 07:42:00 +0000</pubDate>
<dc:creator>yangfeiORfeiyang</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/yangfeiORfeiyang/p/8448430.html</dc:identifier>
</item>
<item>
<title>程序猿年终总结：我看了我的这7年 - 小八路</title>
<link>http://www.cnblogs.com/tonymu/p/my-past-seven-years.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/tonymu/p/my-past-seven-years.html</guid>
<description>&lt;p&gt;&lt;strong&gt;&lt;span&gt;1.迷茫了7年&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　春节放假休息中，收到来自公司大卫张“iChange创变研习会”公众号推送的文章“2017，我看了我的这一年”。文中从四个维度Fact、Feeling、Finding、Future回顾了他作为公司CTO的2017年经历和对来年的展望。在我看来，他大概表达了上半年的迷茫、无助和下半年的柳暗花明、“小成就”。迷茫在于独自（不是犊子）做“大事情”的寂寞、收效甚微，如：公司整体业务推进、行业发展趋势、推动公司团队认知升级和成长等；柳暗花明在于和团队成员一起持续做“小事情”的可操作性、成果明显，如：专注产品和运营细节，专注于拿到小结果；同时强调了小改变、关心细节和做小事的重要性。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　相对于老张2017年上半年的迷茫，我就“厉害”多了，自2010年参加工作到2017年这7年中，几乎长期处于迷茫状态。在3家曾经就职过的企业一直重复着增删改查或者稍微更复杂一点的编程工作，大部分时间里从事着基于完成岗位任务的编程工作。一直以来忽略了自己存在的价值：为什么要写编程？能不能更好地编程？所以也就忽略了业务关注、架构设计、高效生产力、高效沟通、优化知识体系等方面的进步。如果去掉这几年积累的一些解决技术问题的经验，我在思维上、认知上其实和一个刚参加工作2到3年的普通人没太大本质的差别，换句话说我后面4年停止了成长。所以，忽然意识到是时候自我分析一下现状、找找原因、设定一些“小目标”（比如先挣它1个亿）、寻求一些“小改变”了，也是时候面对自己存在价值的问题了。希望通过及时矫正自己的成长轨迹，也发现柳暗花明之路并持续取得“小成就”。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;2.学习“如何学习”&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div&gt;&lt;span&gt;　　刚才讲了自己7年职业之路中后4年停止成长这一事实，但我是一个积极的人，夸大点甚至算得上工作狂，我工作也努力，从未放弃学习。为什么就停止了成长呢？从外因来看，有可能是那几年的工作环境没有对自己提出更高的要求，也有可能是缺乏导师引导。但更重的需要从内因找，我认为是自己的学习方法出了问题，虽然时常学习但是效果却大打折扣。2017年，我有幸加入龚老师（公司架构师）的团队。他给我分享了一些学习方法，举个关键的例子，他给我澄清了什么是知识以及如何学习知识：知识是经过自己反复验证的经验，能在大脑中形成长期记忆，学以致用才是好的学习方法。现在回头看，我最近4年中，“学到的知识”大部分没有在实际工作中投入使用，也就不能形成长期的深层记忆，时间久了就淡忘了，不能做到信手拈来，例如：某日早晨我坐在地铁1号线上，看到某技术社区分享的某篇文章介绍了某种技术，看的津津入味，但由于没有将它与具体工作结合起来，所以也就没有成为“自己的知识”，对我而言，那篇文章就像一篇娱乐新闻，只是接受到的一条信息而已，时间久了就忘了。当然，在我意识到学习方法出了问题后，我在网上检索关于如何学习的信息，偶然看到大卫张几年前的一片文章&lt;a href=&quot;http://blog.51cto.com/davidzhang33/1129749&quot; target=&quot;_blank&quot;&gt;《大卫张谈学习》&lt;/a&gt;，里面的前三年效应、刻意训练、为未来学习等观点恰好解答了我的一些疑惑。有意思的是文中的“刻意训练”观点和龚老师介绍的知识的含义是不谋而合的。感谢两位大牛，通过他们的影响，我突然豁然开朗，明白了原来自己之所以和4年前差别不大是因为学习方法不对，觉得自己有很多事情可以去做。&lt;/span&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;3.主动思考：少则是多，慢则是快&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　在导师的影响下，我逐渐开始改变为了编程而编程的理念和习惯，渐渐接触架构思维训练。意识到良好的架构设计，对软件系统而言，在稳定性、可维护性、扩展性上的重要。因为7年的重复练习，我写代码速度很快，拿到需求后，高效地完成了任务。一开始他们说我是快枪手，我以为这是夸奖我，但是到后来我才发现，其实代码不是写的越快越好，而是经过一段时间的前期思考、设计，架构先行，很多宏观的思路理清了，特别是领域模型分析清楚了，追求系统的单一性，再配合一些设计原则和技巧，写出来的代码才有可能是高质量的代码，我理解的高质量代码是指模块设计合理，逻辑清晰，相对精简、抽象的代码。当然，2017年只是有了架构意识，未来还有很长的路要走，需要不断主动思考，需要不断面对挑战以及根据反馈不断持续训练架构思维。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;4.主动承担与推进&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　在之前的经历中，我一直认为上班努力工作，完成好工作任务，就是一名合格的员工。但是最近这个观念发生了改变，特别公司的岗位职级公布后，我明白了完成好任务不一定会成为年终奖高的员工，只有完成好任务的同时继而达成了业务目标，才算得上优秀员工。所以，应该去考虑用户诉求，考虑业务场景，还需要关注外部资源，特别是需要夸团队协作才能达成业务目标时。要做到这一些，需要有足够的责任心去主动承担，以及良好的沟通协调能力和良好的业务推进能力去主动推动业务完成。这些观念在前几年是没有体现在工作中的，若早几年就可以注意，也许现在的境界早已不同（当然也有可能然并卵），争取以后的工作中，能做到主动承担与推进。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;5.总结&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　见贤思齐，天道酬勤，有感于老张的“iChange创变”思想，希望通过对自己现状的分析，对自己有客观的认识，然后用正确的方式去持续学习，持续重构自己的思维和认知，成为更优秀的自己。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　本来本文是一篇笔记，但考虑到有很多朋友可能和我有类似的心境，便发布到博客，愿能帮助到更多的人。祝大家狗年汪汪汪！&lt;/span&gt;&lt;/p&gt;

</description>
<pubDate>Wed, 14 Feb 2018 07:39:00 +0000</pubDate>
<dc:creator>小八路</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/tonymu/p/my-past-seven-years.html</dc:identifier>
</item>
<item>
<title>Windows Azure Virtual Network (12) 虚拟网络之间点对点连接VNet Peering - Lei Zhang的博客</title>
<link>http://www.cnblogs.com/threestone/p/8448127.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/threestone/p/8448127.html</guid>
<description>&lt;p&gt;&lt;strong&gt;　　《&lt;a id=&quot;cb_post_title_url&quot; href=&quot;http://www.cnblogs.com/threestone/archive/2012/01/06/2382322.html&quot;&gt;Windows Azure Platform 系列文章目录&lt;/a&gt;》&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;　　在有些时候，我们需要通过VNet Peering，把两个虚拟网络&lt;strong&gt;通过内网&lt;/strong&gt;互通互联。比如：&lt;/p&gt;
&lt;p&gt;　　1.在订阅A里的Virtual Network，部署了CRM系统&lt;/p&gt;
&lt;p&gt;　　2.在订阅B里的Virtual Network，部署了Order系统&lt;/p&gt;
&lt;p&gt;　　3.需要通过CRM系统，通过内网传输，获取到Order系统里面的订单信息&lt;/p&gt;

&lt;p&gt;　　如果没有VNet Peering的话，我们只能把Order系统里面的虚拟机，设置公网地址，然后通过设置网络安全组(NSG)的IPV4访问白名单，允许CRM系统的公网IP&lt;/p&gt;
&lt;p&gt;　　但是这样的代价也太大了。&lt;/p&gt;

&lt;p&gt;　　通过使用Azure VNet Peering，我们可以：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　1.把同一个订阅里面的两个不同的Virtual Network，通过内网互通互联&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　2.在同一个企业合同(EA)下，把不同订阅的Virtual Network，通过内网互通互联&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　3.跨企业合同(EA)下，把不同订阅的Virtual Network，通过内网互通互联&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　4.请注意：两个需要Peering的Virtual Network，IP Range不能重叠&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;　　在这里笔者介绍Azure Virtual Network Peering的两种使用场景：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　1.不同订阅的Virtual Network之间，内网互通互联。如下图：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2017.cnblogs.com/blog/127213/201802/127213-20180214115531999-1860312416.png&quot; alt=&quot;&quot; width=&quot;800&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;　　2.一边是Virtual Network，一边是Virtual Network和Express Route Gateway&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　Project B通过ER Gateway网关，链接到IDC内网的应用。如下图：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2017.cnblogs.com/blog/127213/201802/127213-20180214120003031-52873717.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　接下来开始演示内容：　&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　一.不同订阅的Virtual Network之间，内网互通互联&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　&lt;img src=&quot;https://images2017.cnblogs.com/blog/127213/201802/127213-20180214115531999-1860312416.png&quot; alt=&quot;&quot; width=&quot;800&quot;/&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　我们先准备以下内容：&lt;/p&gt;
&lt;p&gt;　　1.在A订阅里面，创建Virtual Network, 名称为A-VNet，IP Rang为172.0.0.0/24。图略&lt;/p&gt;
&lt;p&gt;　　2.在B订阅里面，创建Virtual Network, 名称为B-VNet，IP Rang为172.0.1.0/24。图略&lt;/p&gt;
&lt;p&gt;　　3.在上面2个VNet里面，分别创建2台Windows VM。这两台VM的IP分别为172.0.0.4和172.0.1.4。图略&lt;/p&gt;
&lt;p&gt;　　4.我们首先通过远程桌面连接RDP到这2台VM，关闭Windows防火墙。然后分别通过ping命令，ping对方的内网IP地址。肯定是ping不通的。&lt;/p&gt;
&lt;p&gt;　　5.我们首先需要设置，从A-VNet (172.0.0.0/24) 到 B-VNet (172.0.1.0/24)的Peering。&lt;/p&gt;
&lt;p&gt;　　在A-VNet里面，选择Peerings，然后点击下图的Add按钮&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2017.cnblogs.com/blog/127213/201802/127213-20180214142351249-1538954414.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　6.界面跳转，我们设置如下内容：&lt;/p&gt;
&lt;p&gt;　　Name设置Peering的名称，为AtoB-Peering&lt;/p&gt;
&lt;p&gt;　　在Subscription里面选择订阅&lt;/p&gt;
&lt;p&gt;　　在Virtual Network选择需要链接的虚拟网络&lt;/p&gt;
&lt;p&gt;　　在Configuration里面，勾选Allow Forwarded Traffic&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2017.cnblogs.com/blog/127213/201802/127213-20180214142629281-1775395176.png&quot; alt=&quot;&quot; width=&quot;744&quot; height=&quot;465&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　请注意上图中，因为我们是在同一个EA下面的2个订阅，所以可以通过Subscription下拉框选择到相应的订阅&lt;/p&gt;
&lt;p&gt;　　如果我们想跨EA设置VNet Peering。我们可以手动输入需要链接的Virtual Network的资源ID。如下图：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2017.cnblogs.com/blog/127213/201802/127213-20180214142956702-931671432.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;　　7.设置完毕后，从A-VNet到B-VNet的Peering设置成功了。我们还需要设置从B-VNet到A-VNet的Peering。　　&lt;/p&gt;
&lt;p&gt;　　我们在B-VNet里面，选择Peerings，然后点击下图的Add按钮&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2017.cnblogs.com/blog/127213/201802/127213-20180214143232077-1593174801.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;　　8.界面跳转，我们设置如下内容：&lt;/p&gt;
&lt;p&gt;　　Name设置Peering的名称，为BtoA-Peering&lt;/p&gt;
&lt;p&gt;　　在Subscription里面选择订阅&lt;/p&gt;
&lt;p&gt;　　在Virtual Network选择需要链接的虚拟网络&lt;/p&gt;
&lt;p&gt;　　在Configuration里面，勾选Allow Forwarded Traffic&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2017.cnblogs.com/blog/127213/201802/127213-20180214143610031-1283843874.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;　　9.设置成功后，我们查看两台VM的Ping命令。如下图：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2017.cnblogs.com/blog/127213/201802/127213-20180214143647015-1376550353.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　可以看到，已经可以从A VM (192.168.0.4)，ping到B VM(192.168.1.4)。就实现了这2个Virtual Network之间的内网互通互联。&lt;/p&gt;


&lt;p&gt;　　然后我们开始第二部分：&lt;/p&gt;
&lt;p&gt;　　&lt;strong&gt;一边是Virtual Network，一边是Virtual Network和Express Route Gateway&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　Project B通过ER Gateway网关，链接到IDC内网的应用。如下图：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2017.cnblogs.com/blog/127213/201802/127213-20180214120003031-52873717.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　在Project B订阅里面：&lt;/p&gt;
&lt;p&gt;　　1.创建一个Virtual Network，&lt;strong&gt;我们命名为A-VNet&lt;/strong&gt;，和一台VM&lt;/p&gt;
&lt;p&gt;　　&lt;strong&gt;&lt;span&gt;2.请注意：这个订阅里面，不包含Express Route Gateway网关，或者其他VPN网关&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;　　在Shared Gateway订阅里面：&lt;/p&gt;
&lt;p&gt;　　1.创建Virtual Network, &lt;strong&gt;我们命名为ER-VNet&lt;/strong&gt;，Gateway Subnet，Express Route Gateway&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　2.请注意：在这个订阅里面，包含Express Route Gateway网关&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;


&lt;p&gt;　　1.我们在Project B的订阅里面，选择Peerings，然后点击Add按钮。图略&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　&lt;span&gt;　2.从Project B到Express Route Gateway的Peering，请按照下图设置：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　Allow Forwarded Traffic，允许从Project B到&lt;/strong&gt;Express Route Gateway的流量&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;strong&gt;　　Use Remote Gateways，设置Project B使用远端Express Route的Gateway&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2017.cnblogs.com/blog/127213/201802/127213-20180214150548374-2073504025.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;　　3.然后我们在Express Route的订阅里，选择Peerings，然后点击Add按钮。图略&lt;/p&gt;
&lt;p&gt;　　4.从Express Route，到Project B的Peering，请按照下图设置&lt;/p&gt;
&lt;p&gt;　　&lt;span&gt;&lt;strong&gt;Allow Forwarded Traffic，允许从&lt;/strong&gt;Express Route Gateway到&lt;strong&gt;Project B&lt;/strong&gt;的流量&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　Allow Gateway Transit，允许&lt;/strong&gt;&lt;strong&gt;&lt;strong&gt;Project B的流量，从Express Route Gateway穿透&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2017.cnblogs.com/blog/127213/201802/127213-20180214151319671-1198094407.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

</description>
<pubDate>Wed, 14 Feb 2018 07:14:00 +0000</pubDate>
<dc:creator>Lei Zhang的博客</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/threestone/p/8448127.html</dc:identifier>
</item>
<item>
<title>Vue中，父组件向子组件传值 - 木偶娃娃</title>
<link>http://www.cnblogs.com/jan-wen/p/8448339.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/jan-wen/p/8448339.html</guid>
<description>&lt;p&gt;&lt;span&gt;1:在src/components/child/文件夹下，创建一个名为：child.vue的子组件&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1201851/201802/1201851-20180214142432874-1924729289.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;2：在父组件中，设置好需要传递的数据&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1201851/201802/1201851-20180214142918515-1497704795.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;3：在App.vue中引入并注册子组件&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1201851/201802/1201851-20180214143529312-2021050891.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;4：通过v-bind属性绑定并赋值给子组件&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1201851/201802/1201851-20180214144150640-1208304178.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;5:子组件通过 props 接收父组件传递过的数据&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1201851/201802/1201851-20180214144558109-103749779.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;6：查看&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1201851/201802/1201851-20180214144756546-1134929091.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;7：总结：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;子组件在props中创建一个属性，用以接收父组件传过来的值&lt;/li&gt;
&lt;li&gt;父组件中注册子组件&lt;/li&gt;
&lt;li&gt;在子组件标签中添加子组件props中创建的属性&lt;/li&gt;
&lt;li&gt;把需要传给子组件的值赋给该属性&lt;/li&gt;
&lt;/ul&gt;
</description>
<pubDate>Wed, 14 Feb 2018 06:50:00 +0000</pubDate>
<dc:creator>木偶娃娃</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/jan-wen/p/8448339.html</dc:identifier>
</item>
<item>
<title>InnoDB索引 - 不要乱摸</title>
<link>http://www.cnblogs.com/cjsblog/p/8447325.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/cjsblog/p/8447325.html</guid>
<description>&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;名词解释&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;&lt;span&gt;clustered index（聚集索引）&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;对（primary key）主键索引的一种表述。InnoDB表存储是基于primary key列来组织的，这样做可以加快查询和排序速度。为了获得最好的性能，在选择primary key columns的时候要特别小心。因为修改clustered index（聚集索引）列是一个昂贵的操作，所以选择作为primary的列通常都是很少或者从不会被更新的列。&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;&lt;span&gt;primary key（主键）&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;A set of columns（一组列），可以唯一标识表中的每一行。因此，它必须是一个unique index，并且不允许有NULL值。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;InnoDB &lt;span class=&quot;bold&quot;&gt;&lt;span class=&quot;bold&quot;&gt;organizes the table storage based on the column values of the primary key.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;&lt;span&gt;secondary index（辅助索引或二级索引）&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;索引的一种类型。一个InnoDB表可以有0个或者多个secondary index。&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;&lt;span&gt;B-tree&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;tree数据结构在数据库索引中被广泛采用。这种结构总是有序的。可以快速查找，精确匹配（等于）或者范围匹配（比如，大于、小于、BETWEEN等操作）。大多数的存储引擎都是使用的这种结构，比如InnoDB和MyISAM。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;因为B-tree节点可以有许多孩子，一个B-tree和二叉树不一样，二叉树它限制每个结点只能2个孩子。&lt;/span&gt;&lt;/p&gt;


&lt;p&gt;&lt;span&gt;每个InnoDB表都有一个特别的索引叫clustered index。通常，clustered index和primary key是一个意思。&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;为了在查询、插入以及数据库的其它操作时获得最好的性能，你必须理解InnoDB中是怎样使用clustered index优化大多数查询的。&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;当你在表中定义了一个PRIMARY KEY的时候，InnoDB会把它作为clustered index。在你创建每一张表的时候最好定义一个primary key，如果实在没有一个或者一组逻辑唯一并且非空的列，你就添加一个新的auto-increment（自增长）的列，让它的值自动填充。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;如果你没有在你的表中定义PRIMARY KEY，那么MySQL将查找第一个所有值非空的唯一索引列作为clustered index。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;如果表中没有PRIMARY KEY，而且也没有合适的UNIQUE index，那么InnoDB内部将生产一个名字叫GEN_CLUST_INDEX的隐藏clustered index，其值为行ID&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h2 class=&quot;title&quot;&gt;&lt;span&gt;Clustered Index是如何加速查询的&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;通过clustered index来访问一行是非常快的，因为索引检索直接指向数据所在的页。如果一个表很大，clustered index架构通常会节省I/O操作。&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span&gt;Secondary Indexes是如何关联到Clustered Index的&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;除了clustered index之外的其它索引都叫Secondary Indexes。在secondary index中的每一条记录包含那一行的primary key列。InnoDB用这个primary key的值来检索聚集索引中的行。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;如果primary key很长，那么secondary indexes将会占用更多的空间，因此用一个简短的primary key是有好处的。&lt;/span&gt;&lt;/p&gt;


&lt;p&gt;&lt;span&gt;InnoDB indexes are B-tree data structures. Index records are stored in the leaf pages of their B-tree data structure. The default size of an index page is 16KB.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;当一条新记录被插入到InnoDB clustered index中时，InnoDB预留page（页）的1/16的空间以备将来插入或者更新索引记录。如果索引记录是顺序插入的（升序或者降序），那么填满这一页就是剩下的那15/16的空间；如果记录是按照随机顺序插入的，那么填满这一条就是1/2到15/16页。配置项innodb_fill_factor定义每个B-tree page 百分之多少的空间用于存储有序的索引记录，剩下的空间是为以后索引增长而预留的。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;你可以通过innodb_page_size设置InnoDB表空间的page size。支持64KB, 32KB, 16KB (default), 8KB, and 4KB.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;小结&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;1、如果表中没有定义primary key，则查找第一个不为空的唯一索引列作为聚集索引，若找不到，则生成一个隐藏的聚集索引&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;2、插入新记录的时候，预留一页的1/16的空间用于以后的插入或更新&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;参考 https://dev.mysql.com/doc/refman/5.7/en/innodb-indexes.html&lt;/span&gt;&lt;/p&gt;

</description>
<pubDate>Wed, 14 Feb 2018 06:13:00 +0000</pubDate>
<dc:creator>不要乱摸</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/cjsblog/p/8447325.html</dc:identifier>
</item>
<item>
<title>C# 使用 Lotus notes 公共邮箱发送邮件 - Lionel Andrés Messi</title>
<link>http://www.cnblogs.com/LionelMessi/p/8447879.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/LionelMessi/p/8447879.html</guid>
<description>&lt;p&gt;公司的邮件系统用的是反人类的 Lotus notes, 你敢信？&lt;/p&gt;
&lt;p&gt;最近要实现一个功能，邮件提醒功能，就是通过自动发送提醒邮件&lt;/p&gt;
&lt;p&gt; 前前后后这个问题搞了2天，由于公司的诸多条件限制，无法直接调用到公司发送邮件的接口，只有通过类似 Lotus script，VBA 等其他方式来实现。&lt;/p&gt;
&lt;p&gt;用VBA代码实现发送邮件，其实我在n年前就实现过了&lt;/p&gt;
&lt;p&gt;代码如下，网上一搜也一大堆&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('ae6350cd-2f91-45a5-ac17-179c29d4a1a5')&quot; readability=&quot;37.5&quot;&gt;&lt;img id=&quot;code_img_closed_ae6350cd-2f91-45a5-ac17-179c29d4a1a5&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_ae6350cd-2f91-45a5-ac17-179c29d4a1a5&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('ae6350cd-2f91-45a5-ac17-179c29d4a1a5',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_ae6350cd-2f91-45a5-ac17-179c29d4a1a5&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;70&quot;&gt;
&lt;pre&gt;
&lt;span&gt;Function&lt;/span&gt;&lt;span&gt; SendEmailbyNotesWithAttachement_2(Addresses, Attach, cc)
 
    strSubject &lt;/span&gt;= ThisWorkbook.Sheets(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;EMAIL&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;).Range(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;B1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
    strbody &lt;/span&gt;= ThisWorkbook.Sheets(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;EMAIL&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;).Range(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;A1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)

    &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Declare Variables&lt;/span&gt;
     &lt;span&gt;Dim&lt;/span&gt; s &lt;span&gt;As&lt;/span&gt; &lt;span&gt;Object&lt;/span&gt;
     &lt;span&gt;Dim&lt;/span&gt; db &lt;span&gt;As&lt;/span&gt; &lt;span&gt;Object&lt;/span&gt;
     &lt;span&gt;Dim&lt;/span&gt; body &lt;span&gt;As&lt;/span&gt; &lt;span&gt;Object&lt;/span&gt;
     &lt;span&gt;Dim&lt;/span&gt; bodyChild &lt;span&gt;As&lt;/span&gt; &lt;span&gt;Object&lt;/span&gt;
     &lt;span&gt;Dim&lt;/span&gt; header &lt;span&gt;As&lt;/span&gt; &lt;span&gt;Object&lt;/span&gt;
     &lt;span&gt;Dim&lt;/span&gt; stream &lt;span&gt;As&lt;/span&gt; &lt;span&gt;Object&lt;/span&gt;
     &lt;span&gt;Dim&lt;/span&gt; host &lt;span&gt;As&lt;/span&gt; &lt;span&gt;String&lt;/span&gt;
     &lt;span&gt;Dim&lt;/span&gt; message &lt;span&gt;As&lt;/span&gt; &lt;span&gt;Object&lt;/span&gt;
    
     &lt;span&gt;'&lt;/span&gt;&lt;span&gt; Notes variables&lt;/span&gt;
     &lt;span&gt;Set&lt;/span&gt; s = &lt;span&gt;CreateObject&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Notes.NotesSession&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
     &lt;/span&gt;&lt;span&gt;Set&lt;/span&gt; db =&lt;span&gt; s.CURRENTDATABASE
     &lt;/span&gt;&lt;span&gt;Set&lt;/span&gt; stream =&lt;span&gt; s.CreateStream
    
     &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt; Turn off auto conversion to rtf&lt;/span&gt;
     s.ConvertMIME = &lt;span&gt;False&lt;/span&gt;
    
     &lt;span&gt;'&lt;/span&gt;&lt;span&gt; Create message&lt;/span&gt;
     &lt;span&gt;Set&lt;/span&gt; message =&lt;span&gt; db.CREATEDOCUMENT
     message.Form &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;memo&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
     message.Subject &lt;/span&gt;=&lt;span&gt; strSubject
     message.sendTo &lt;/span&gt;= &lt;span&gt;Split&lt;/span&gt;(Addresses, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
     message.CopyTo &lt;/span&gt;=&lt;span&gt; cc
     message.SaveMessageOnSend &lt;/span&gt;= &lt;span&gt;True&lt;/span&gt;
    
     &lt;span&gt;'&lt;/span&gt;&lt;span&gt; Create the body to hold HTML and attachment&lt;/span&gt;
     &lt;span&gt;Set&lt;/span&gt; body =&lt;span&gt; message.CreateMIMEEntity
    
    &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Child mime entity which is going to contain the HTML which we put in the stream&lt;/span&gt;
     &lt;span&gt;Set&lt;/span&gt; bodyChild =&lt;span&gt; body.CreateChildEntity()
     &lt;/span&gt;&lt;span&gt;Call&lt;/span&gt;&lt;span&gt; stream.WriteText(strbody)
     &lt;/span&gt;&lt;span&gt;Call&lt;/span&gt; bodyChild.SetContentFromText(stream, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text/HTML;charset=UTF-8&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, ENC_NONE)
     &lt;/span&gt;&lt;span&gt;Call&lt;/span&gt;&lt;span&gt; stream.Close
     &lt;/span&gt;&lt;span&gt;Call&lt;/span&gt;&lt;span&gt; stream.Truncate
    
     &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt; This will run though an array of attachment paths and add them to the email&lt;/span&gt;
     &lt;span&gt;For&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt; &lt;span&gt;To&lt;/span&gt; &lt;span&gt;UBound&lt;/span&gt;&lt;span&gt;(Attach)
        strAttach &lt;/span&gt;=&lt;span&gt; Attach(i)
        &lt;/span&gt;&lt;span&gt;If&lt;/span&gt; &lt;span&gt;Len&lt;/span&gt;(strAttach) &amp;gt; &lt;span&gt;0&lt;/span&gt; &lt;span&gt;And&lt;/span&gt; &lt;span&gt;Len&lt;/span&gt;(&lt;span&gt;Dir&lt;/span&gt;(strAttach)) &amp;gt; &lt;span&gt;0&lt;/span&gt; &lt;span&gt;Then&lt;/span&gt;
            &lt;span&gt;'&lt;/span&gt;&lt;span&gt; Get the attachment file name&lt;/span&gt;
            pos = &lt;span&gt;InStrRev&lt;/span&gt;(strAttach, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;\&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
            Filename &lt;/span&gt;= &lt;span&gt;Right&lt;/span&gt;(strAttach, &lt;span&gt;Len&lt;/span&gt;(strAttach) -&lt;span&gt; pos)
    
            &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;A new child mime entity to hold a file attachment&lt;/span&gt;
            &lt;span&gt;Set&lt;/span&gt; bodyChild =&lt;span&gt; body.CreateChildEntity()
            &lt;/span&gt;&lt;span&gt;Set&lt;/span&gt; header = bodyChild.CreateHeader(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Content-Type&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
            &lt;/span&gt;&lt;span&gt;Call&lt;/span&gt; header.SetHeaderVal(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;multipart/mixed&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
    
            &lt;/span&gt;&lt;span&gt;Set&lt;/span&gt; header = bodyChild.CreateHeader(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Content-Disposition&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
            &lt;/span&gt;&lt;span&gt;Call&lt;/span&gt; header.SetHeaderVal(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;attachment; filename=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &amp;amp;&lt;span&gt; Filename)
    
            &lt;/span&gt;&lt;span&gt;Set&lt;/span&gt; header = bodyChild.CreateHeader(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Content-ID&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
            &lt;/span&gt;&lt;span&gt;Call&lt;/span&gt;&lt;span&gt; header.SetHeaderVal(Filename)
     
            &lt;/span&gt;&lt;span&gt;Set&lt;/span&gt; stream =&lt;span&gt; s.CreateStream()
            &lt;/span&gt;&lt;span&gt;If&lt;/span&gt; &lt;span&gt;Not&lt;/span&gt; stream.Open(strAttach, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;binary&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;) &lt;span&gt;Then&lt;/span&gt;
                &lt;span&gt;MsgBox&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Open failed&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
            &lt;span&gt;End&lt;/span&gt; &lt;span&gt;If&lt;/span&gt;
            &lt;span&gt;If&lt;/span&gt; stream.Bytes = &lt;span&gt;0&lt;/span&gt; &lt;span&gt;Then&lt;/span&gt;
                &lt;span&gt;MsgBox&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;File has no content&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
            &lt;span&gt;End&lt;/span&gt; &lt;span&gt;If&lt;/span&gt;
    
            &lt;span&gt;Call&lt;/span&gt; bodyChild.SetContentFromBytes(stream, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;application/octet-stream&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, ENC_IDENTITY_BINARY) &lt;span&gt;'&lt;/span&gt;&lt;span&gt; All my attachments are excel this would need changing depensding on your attachments.&lt;/span&gt;
        &lt;span&gt;End&lt;/span&gt; &lt;span&gt;If&lt;/span&gt;
     &lt;span&gt;Next&lt;/span&gt;
    
     &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Send the email&lt;/span&gt;
     &lt;span&gt;Call&lt;/span&gt; message.Send(&lt;span&gt;False&lt;/span&gt;&lt;span&gt;)
    
     s.ConvertMIME &lt;/span&gt;= &lt;span&gt;True&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt; Restore conversion&lt;/span&gt;

&lt;span&gt;End Function&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code VBA&lt;/span&gt;&lt;/div&gt;
&lt;p&gt; 但是现实情况是这样的&lt;/p&gt;
&lt;p&gt;我们需要邮件从公邮发送出去&lt;/p&gt;
&lt;p&gt;何谓公邮：整个Team使用的邮箱，如***admin@email.com 之类的邮箱&lt;/p&gt;
&lt;p&gt;使用过反人类的 Lotus notes 都知道公邮是需要先打开个人邮箱才能进去的 &lt;/p&gt;
&lt;p&gt;于是当我把以上的VBA 代码增加如下代码，设置从公邮里面发送邮件后&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('d6b5a2b7-9de8-40f8-9635-149b92a3c2dc')&quot; readability=&quot;31.5&quot;&gt;&lt;img id=&quot;code_img_closed_d6b5a2b7-9de8-40f8-9635-149b92a3c2dc&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_d6b5a2b7-9de8-40f8-9635-149b92a3c2dc&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('d6b5a2b7-9de8-40f8-9635-149b92a3c2dc',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_d6b5a2b7-9de8-40f8-9635-149b92a3c2dc&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;58&quot;&gt;
&lt;pre&gt;
     Server = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;C***/****r/****&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
     Path &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;****\C*****.nsf&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
     &lt;span&gt;Set&lt;/span&gt; db = s.GetDataBase(Server, Path)
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;邮件确实是从公邮发送出来，但是很遗憾，邮件发送人那显示的是我的个人邮箱，而查看我个人的已发送邮件，是完全查不到，但是在公邮已发送邮件可以看到&lt;/p&gt;
&lt;p&gt;这就无法理解了，于是开启了漫长的2天人类大战反人类Lotus notes战役&lt;/p&gt;
&lt;p&gt;前前后后试过各种VBA代码【表问为什么不直接调接口】&lt;/p&gt;
&lt;p&gt;但要不就是能显示为公邮发送的，但邮件 body 不能Html格式，否则就是相反，总之一句话：二者不可兼得&lt;/p&gt;
&lt;p&gt;期间看遍国内外关于Lotus notes VBA的网站&lt;/p&gt;
&lt;p&gt;最后，实在是忍不了了，开始搜索Python，C#&lt;/p&gt;
&lt;p&gt;一直犹犹豫豫没有写是因为同事告诉我，比如使用C#就需要邮箱密码，而这个东西我们没有也不会有的&lt;/p&gt;
&lt;p&gt;最后的最后，决定赌一把，我先用C#,直接写出来，等报错提示密码没有的时候我再想办法&lt;/p&gt;
&lt;p&gt;于是战战兢兢有了以下代码&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('db078b98-694e-4b95-bb34-d440fa7246d5')&quot; readability=&quot;37&quot;&gt;&lt;img id=&quot;code_img_closed_db078b98-694e-4b95-bb34-d440fa7246d5&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_db078b98-694e-4b95-bb34-d440fa7246d5&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('db078b98-694e-4b95-bb34-d440fa7246d5',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_db078b98-694e-4b95-bb34-d440fa7246d5&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;69&quot;&gt;
&lt;pre&gt;
        /// &amp;lt;summary&amp;gt;
        ///&lt;span&gt; 通过notes发送邮件
        &lt;/span&gt;/// &amp;lt;/summary&amp;gt;
        /// &amp;lt;param name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;mailTo&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;实时数据库&amp;lt;/param&amp;gt;
        /// &amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt;&lt;span&gt; void SendForNotes()
        {

            &lt;/span&gt;&lt;span&gt;string&lt;/span&gt; notesPwd = &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;string&lt;/span&gt; notesServer = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;C***3/C***/***r/***C&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;string&lt;/span&gt; NotesDBName = @&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;M**l\C***to.nsf&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;string&lt;/span&gt; mailTo = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;m****o@c**.***.com&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;string&lt;/span&gt; mailSubject =&lt;span&gt; DateTime.Now.ToString();

            &lt;/span&gt;&lt;span&gt;string&lt;/span&gt; mailBoby = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;lt;html&amp;gt;&amp;lt;body&amp;gt;&amp;lt;table border='1'&amp;gt;&amp;lt;tr&amp;gt;&amp;lt;th&amp;gt;Month&amp;lt;/th&amp;gt;&amp;lt;th&amp;gt;Savings&amp;lt;/th&amp;gt;&amp;lt;/tr&amp;gt;&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;January&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;$100&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;&amp;lt;/table&amp;gt;&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;

            NotesSession ns;
            NotesDatabase db;
            NotesDocument doc;
            &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt;
            {
                ns &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; NotesSession();
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (ns !=&lt;span&gt; null)
                {
                    &lt;/span&gt;//&lt;span&gt;您本机notes的密码
                    ns.Initialize(notesPwd);
                    &lt;/span&gt;//&lt;span&gt;初始化NotesDatabase
                    db &lt;/span&gt;= ns.GetDatabase(notesServer, NotesDBName, &lt;span&gt;false&lt;/span&gt;&lt;span&gt;);
                    doc &lt;/span&gt;=&lt;span&gt; db.CreateDocument();
                    doc.ReplaceItemValue(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Form&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Memo&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
                    doc.ReplaceItemValue(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;SendTo&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, mailTo);
                    doc.ReplaceItemValue(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Subject&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, mailSubject.Replace(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;\r', ' ').Replace('\n', ' '));&lt;/span&gt;
                    doc.AppendItemValue(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Principal&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;C******m&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;);//&lt;span&gt;设置邮件的发件人昵称
                    NotesRichTextItem rt &lt;/span&gt;= doc.CreateRichTextItem(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Body&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
                    var richStyle &lt;/span&gt;=&lt;span&gt; ns.CreateRichTextStyle();
                    richStyle.PassThruHTML &lt;/span&gt;= &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;

                    rt.AppendStyle(richStyle);
                    rt.AppendText(mailBoby);
                    &lt;/span&gt;//&lt;span&gt;发送邮件         
                    &lt;/span&gt;&lt;span&gt;object&lt;/span&gt; obj = doc.GetItemValue(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;SendTo&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
                    doc.Send(&lt;/span&gt;&lt;span&gt;false&lt;/span&gt;&lt;span&gt;, ref obj);
                    doc &lt;/span&gt;=&lt;span&gt; null;
                }
            }
            &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception ex)
            {
                &lt;/span&gt;//   &lt;span&gt;Log&lt;/span&gt;&lt;span&gt;.CreateLog(ex.Message);
            }
            &lt;/span&gt;&lt;span&gt;finally&lt;/span&gt;&lt;span&gt;
            {
                ns &lt;/span&gt;=&lt;span&gt; null;
                db &lt;/span&gt;=&lt;span&gt; null;
                doc &lt;/span&gt;=&lt;span&gt; null;
            }
        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;抱着必死的心态小心翼翼的点击了调试&lt;/p&gt;
&lt;p&gt;WTF!!!!&lt;/p&gt;
&lt;p&gt;居然收到一封有邮件！没有密码啊！不需要密码吗！密码不用也能发送！！！&lt;/p&gt;
&lt;p&gt;再试了一次后，发现真的不需要！！！&lt;/p&gt;
&lt;p&gt;因为我们每天开机打开notes的时候也不需要输入密码！！！这可能是和本机的ID文件有绑定！！！在毕业后的第一家公司中是需要输入密码的！&lt;/p&gt;
&lt;p&gt;于是欣喜若狂&lt;/p&gt;
&lt;p&gt;开始修改代码&lt;/p&gt;
&lt;p&gt;最终版本&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('d5fa03f8-507b-4a4e-9989-cb096431110d')&quot; readability=&quot;38&quot;&gt;&lt;img id=&quot;code_img_closed_d5fa03f8-507b-4a4e-9989-cb096431110d&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_d5fa03f8-507b-4a4e-9989-cb096431110d&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('d5fa03f8-507b-4a4e-9989-cb096431110d',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_d5fa03f8-507b-4a4e-9989-cb096431110d&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;71&quot;&gt;
&lt;pre&gt;
        /// &amp;lt;summary&amp;gt;
        ///&lt;span&gt; 通过notes发送邮件
        &lt;/span&gt;/// &amp;lt;/summary&amp;gt;
        /// &amp;lt;param name=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;mailTo&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;实时数据库/lysh&amp;lt;/param&amp;gt;
        /// &amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt;&lt;span&gt; void SendForNotes2()
        {

            &lt;/span&gt;&lt;span&gt;string&lt;/span&gt; notesPwd = &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;string&lt;/span&gt; notesServer = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;C****3/**/S***/****&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;string&lt;/span&gt; NotesDBName = @&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;****\******.nsf&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;string&lt;/span&gt; mailTo = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;****t**@***.com&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;string&lt;/span&gt; mailSubject =&lt;span&gt; DateTime.Now.ToString();

            &lt;/span&gt;&lt;span&gt;string&lt;/span&gt; mailBoby = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;lt;html&amp;gt;&amp;lt;body&amp;gt;&amp;lt;table border='1'&amp;gt;&amp;lt;tr&amp;gt;&amp;lt;th&amp;gt;Month&amp;lt;/th&amp;gt;&amp;lt;th&amp;gt;Savings&amp;lt;/th&amp;gt;&amp;lt;/tr&amp;gt;&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;January&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;$100&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;&amp;lt;/table&amp;gt;&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;

            NotesSession ns;
            NotesDatabase db;
            NotesDocument doc;
            &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt;
            {
                ns &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; NotesSession();
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (ns !=&lt;span&gt; null)
                {
                    &lt;/span&gt;//&lt;span&gt;您本机notes的密码
                    ns.Initialize(notesPwd);
                    &lt;/span&gt;//&lt;span&gt;初始化NotesDatabase
                    db &lt;/span&gt;= ns.GetDatabase(notesServer, NotesDBName, &lt;span&gt;false&lt;/span&gt;&lt;span&gt;);
                    doc &lt;/span&gt;=&lt;span&gt; db.CreateDocument();
                    doc.ReplaceItemValue(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Form&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Memo&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
                    doc.ReplaceItemValue(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;SendTo&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, mailTo);
                    doc.ReplaceItemValue(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Subject&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, mailSubject.Replace(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;\r', ' ').Replace('\n', ' '));&lt;/span&gt;
&lt;span&gt;
                    doc.SaveMessageOnSend &lt;/span&gt;= &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;

                    NotesStream HtmlBody &lt;/span&gt;=&lt;span&gt; ns.CreateStream();
                    HtmlBody.WriteText(mailBoby);&lt;/span&gt;//&lt;span&gt;构建HTML邮件，可以在头和尾添加公司的logo和系统提醒语
                    NotesMIMEEntity mine &lt;/span&gt;= doc.CreateMIMEEntity(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Body&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;);//&lt;span&gt;构建邮件正文
                    mine.SetContentFromText(HtmlBody, &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text/html;charset=UTF-8&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, Domino.MIME_ENCODING.ENC_IDENTITY_BINARY);

                    doc.AppendItemValue(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Principal&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;C**********am&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;);//&lt;span&gt;设置邮件的发件人昵称
                    &lt;/span&gt;//&lt;span&gt;发送邮件         
                    &lt;/span&gt;&lt;span&gt;object&lt;/span&gt; obj = doc.GetItemValue(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;SendTo&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
                    doc.Send(&lt;/span&gt;&lt;span&gt;false&lt;/span&gt;&lt;span&gt;, ref obj);
                    doc &lt;/span&gt;=&lt;span&gt; null;
                }
            }
            &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception ex)
            {
                &lt;/span&gt;//   &lt;span&gt;Log&lt;/span&gt;&lt;span&gt;.CreateLog(ex.Message);
            }
            &lt;/span&gt;&lt;span&gt;finally&lt;/span&gt;&lt;span&gt;
            {
                ns &lt;/span&gt;=&lt;span&gt; null;
                db &lt;/span&gt;=&lt;span&gt; null;
                doc &lt;/span&gt;=&lt;span&gt; null;
            }
        }    &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;期间还遇到&lt;/p&gt;
&lt;p&gt;由于这句代码放置的位置不对，导致显示不正确&lt;/p&gt;
&lt;p&gt;doc.AppendItemValue(&quot;Principal&quot;, &quot;C**********am&quot;);//设置邮件的发件人昵称&lt;/p&gt;

&lt;p&gt;最终突破的那一刻心情真的很爽，虽然到到现在仍然不知道不要密码的原因，但总归解决了困惑两天的问题，不敢独享&lt;/p&gt;
&lt;p&gt;有时候就是听别人说，这条路走不通，就不走了&lt;/p&gt;
&lt;p&gt;有时候就是听别人说，已经封装好了，直接调吧，就调了而不知如何实现&lt;/p&gt;
&lt;p&gt;有时候就是抄作业，以为自己会了，于是真真用的时候就不知道了&lt;/p&gt;

&lt;p&gt;年前终于开始不那么忙了，欠了那么多，该慢慢补回来了&lt;/p&gt;

</description>
<pubDate>Wed, 14 Feb 2018 06:01:00 +0000</pubDate>
<dc:creator>Lionel Andr&amp;#233;s Messi</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/LionelMessi/p/8447879.html</dc:identifier>
</item>
<item>
<title>Redis服务器启动之后3个警告信息的解决方案 - PatrickLiu</title>
<link>http://www.cnblogs.com/PatrickLiu/p/8448230.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/PatrickLiu/p/8448230.html</guid>
<description>&lt;p&gt;      今天是年前最后一篇文章了，不想写太多的东西，就写一些有关Redis相关问题的解决方案。当我们启动了Redis服务器之后，会看到3个警告，如果没看到，那是很好的，但是我看到了。看到了就不能不管，所以就好好的解决一下。我把这三个警告的信息截图了，大家可以有更直接的感觉。效果截图如下：&lt;/p&gt;&lt;p&gt;                       &lt;img src=&quot;https://images2017.cnblogs.com/blog/1048776/201802/1048776-20180214131943656-1398930643.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;             1）、第一个警告信息提示：&lt;span&gt;The TCP backlog setting of 511 cannot be enforced because /proc/sys/net/core/somaxconn is set to the lower value of 128&lt;/span&gt;&lt;/p&gt;&lt;p&gt;             2）、第二个警告信息提示：&lt;span&gt;WARNING overcommit_memory is set to 0! Background save may fail under low memory condition. To fix this issue add ‘vm.overcommit_memory = 1‘ to /etc/sysctl.conf and then reboot or run the command ‘sysctl vm.overcommit_memory=1‘ for this to take effect.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;               这两个问题的解决方法很简单，晚上也有类似的解决方案。&lt;/p&gt;&lt;p&gt;             &lt;strong&gt;&lt;span&gt;解决：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;         //&lt;/span&gt;&lt;span&gt;针对这两个问题，都要修改/etc/sysctl.conf文件，在文件末尾加入以下两句：&lt;/span&gt;
&lt;span&gt;
         net.core.somaxconn&lt;/span&gt;= &lt;span&gt;1024&lt;/span&gt;&lt;span&gt;
         vm.overcommit_memory &lt;/span&gt;= &lt;span&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;            3）、第三个警告信息提示：&lt;span&gt;WARNING you have Transparent Huge Pages (THP) support enabled in your kernel. This will create latency and memory usage issues with Redis. To fix this issue run the command ‘echo never &amp;gt; /sys/kernel/mm/transparent_hugepage/enabled‘ as root, and add it to your /etc/rc.local in order to retain the setting after a reboot. Redis must be restarted after THP is disabled.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;     　   这个问题不容易解决，我搞了好久才搞定的，所以必须记录下来，否则以后想看看都不容易。&lt;/p&gt;&lt;p&gt;　　    大家想了解跟多情况，可以查看该博客 http://docs.fedoraproject.org/en-US/Fedora/21/html/System_Administrators_Guide/sec-GRUB_2_over_Serial_Console.html#sec-Configuring_GRUB_2 。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;          第一种方式：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;　　        我们开始第三个问题的解决吧，如果你也是grub2的linux系统，请通过以下步骤关闭大内存页面。&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　　　步骤一、 编辑 /etc/default/grub，在GRUB_CMDLINE_LINUX加入选项 transparent_hugepage=never&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;    &lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
　　　　GRUB_TIMEOUT=&lt;span&gt;5&lt;/span&gt;&lt;span&gt;
　　　　GRUB_DISTRIBUTOR&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;$(sed 's, release .*$,,g' /etc/system-release)&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
　　　　GRUB_DEFAULT&lt;/span&gt;=&lt;span&gt;saved
　　　　GRUB_DISABLE_SUBMENU&lt;/span&gt;=&lt;span&gt;true&lt;/span&gt;&lt;span&gt;
　　　　GRUB_TERMINAL_OUTPUT&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;console&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
　　　　GRUB_CMDLINE_LINUX&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;rd.lvm.lv=fedora/swap rd.lvm.lv=fedora/root rhgb quiet &lt;span&gt;transparent_hugepage=never&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
　　　　GRUB_DISABLE_RECOVERY&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;br/&gt;　　　　&lt;strong&gt;&lt;span&gt;步骤二、 重新生成grub配置文件&lt;/span&gt;&lt;/strong&gt;&lt;br/&gt;    &lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
        [root@linux ~]# grub2-mkconfig -o /boot/grub2/grub.cfg
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;br/&gt;&lt;span&gt;&lt;strong&gt;　　　　步骤三、 重启你的系统&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;　　　　　至此大功告成，如果你使用的是grub，请把选项写入grub.conf文件就好了。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;　　　　步骤四、查询hugepage状态&lt;/span&gt;&lt;/strong&gt;&lt;br/&gt;    &lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
       [root@linux ~]# cat /sys/kernel/mm/transparent_hugepage/&lt;span&gt;enabled
        always madvise [never]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;br/&gt;&lt;span&gt;&lt;strong&gt;　　  第二种方式：&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;    &lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
　　 [root@linux ~]$ grep Huge /proc/&lt;span&gt;meminfo
　　  AnonHugePages:         &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt; kB
　　  HugePages_Total:       &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;
　　  HugePages_Free:        &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;
　　  HugePages_Rsvd:        &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;
　　  HugePages_Surp:        &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;
　　  Hugepagesize:       &lt;/span&gt;&lt;span&gt;2048&lt;/span&gt; kB
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;         解决了，还是很高兴的。其实这三个警告信息已经提供了解决办法，有的是临时方法，有的是永久方法，只是第三个警告不是那么直接好解决。好了，今天就到这里，我在这里祝福大家新年快乐，我自己也新年快乐。&lt;/p&gt;
</description>
<pubDate>Wed, 14 Feb 2018 05:35:00 +0000</pubDate>
<dc:creator>PatrickLiu</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/PatrickLiu/p/8448230.html</dc:identifier>
</item>
<item>
<title>.NET Core 实现定时抓取博客园首页文章信息并发送到邮箱 - 晓晨Master</title>
<link>http://www.cnblogs.com/stulzq/p/8448183.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/stulzq/p/8448183.html</guid>
<description>&lt;p&gt;大家好，我是晓晨。许久没有更新博客了，今天给大家带来一篇干货型文章，一个每隔5分钟抓取博客园首页文章信息并在第二天的上午9点发送到你的邮箱的小工具。比如我在2018年2月14日，9点来到公司我就会收到一封邮件，是2018年2月13日的博客园首页的文章信息。写这个小工具的初衷是，一直有看博客的习惯，但是最近由于各种原因吧，可能几天都不会看一下博客，要是中途错过了什么好文可是十分心疼的哈哈。所以做了个工具，每天归档发到邮箱，妈妈再也不会担心我错过好的文章了。为什么只抓取首页？因为博客园首页文章的质量相对来说高一些。&lt;/p&gt;

&lt;p&gt;作为一个持续运行的工具，没有日志记录怎么行，我准备使用的是&lt;code&gt;NLog&lt;/code&gt;来记录日志，它有个日志归档功能非常不错。在http请求中，由于网络问题吧可能会出现失败的情况，这里我使用&lt;code&gt;Polly&lt;/code&gt;来进行Retry。使用&lt;code&gt;HtmlAgilityPack&lt;/code&gt;来解析网页，需要对xpath有一定了解。下面是详细说明：&lt;/p&gt;
&lt;p&gt;有不了解的组件，可以通过访问github获取资料。&lt;/p&gt;
&lt;p&gt;关于发送邮件感谢下面的园友提供的资料：&lt;br/&gt;&lt;a href=&quot;https://www.cnblogs.com/qulianqing/p/7413640.html&quot; class=&quot;uri&quot;&gt;https://www.cnblogs.com/qulianqing/p/7413640.html&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;http://www.cnblogs.com/rocketRobin/p/8337055.html&quot; class=&quot;uri&quot;&gt;http://www.cnblogs.com/rocketRobin/p/8337055.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;我是用的是&lt;code&gt;HttpWebRequest&lt;/code&gt;来进行http请求，下面分享一下我简单封装的类库：&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;using System;
using System.IO;
using System.Net;
using System.Text;

namespace CnBlogSubscribeTool
{
    /// &amp;lt;summary&amp;gt;
    /// Simple Http Request Class
    /// .NET Framework &amp;gt;= 4.0
    /// Author:stulzq
    /// CreatedTime:2017-12-12 15:54:47
    /// &amp;lt;/summary&amp;gt;
    public class HttpUtil
    {
        static HttpUtil()
        {
            //Set connection limit ,Default limit is 2
            ServicePointManager.DefaultConnectionLimit = 1024;
        }

        /// &amp;lt;summary&amp;gt;
        /// Default Timeout 20s
        /// &amp;lt;/summary&amp;gt;
        public static int DefaultTimeout = 20000;

        /// &amp;lt;summary&amp;gt;
        /// Is Auto Redirect
        /// &amp;lt;/summary&amp;gt;
        public static bool DefalutAllowAutoRedirect = true;

        /// &amp;lt;summary&amp;gt;
        /// Default Encoding
        /// &amp;lt;/summary&amp;gt;
        public static Encoding DefaultEncoding = Encoding.UTF8;

        /// &amp;lt;summary&amp;gt;
        /// Default UserAgent
        /// &amp;lt;/summary&amp;gt;
        public static string DefaultUserAgent =
                &quot;Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.94 Safari/537.36&quot;
            ;

        /// &amp;lt;summary&amp;gt;
        /// Default Referer
        /// &amp;lt;/summary&amp;gt;
        public static string DefaultReferer = &quot;&quot;;

        /// &amp;lt;summary&amp;gt;
        /// httpget request
        /// &amp;lt;/summary&amp;gt;
        /// &amp;lt;param name=&quot;url&quot;&amp;gt;Internet Address&amp;lt;/param&amp;gt;
        /// &amp;lt;returns&amp;gt;string&amp;lt;/returns&amp;gt;
        public static string GetString(string url)
        {
            var stream = GetStream(url);
            string result;
            using (StreamReader sr = new StreamReader(stream))
            {
                result = sr.ReadToEnd();
            }
            return result;

        }

        /// &amp;lt;summary&amp;gt;
        /// httppost request
        /// &amp;lt;/summary&amp;gt;
        /// &amp;lt;param name=&quot;url&quot;&amp;gt;Internet Address&amp;lt;/param&amp;gt;
        /// &amp;lt;param name=&quot;postData&quot;&amp;gt;Post request data&amp;lt;/param&amp;gt;
        /// &amp;lt;returns&amp;gt;string&amp;lt;/returns&amp;gt;
        public static string PostString(string url, string postData)
        {
            var stream = PostStream(url, postData);
            string result;
            using (StreamReader sr = new StreamReader(stream))
            {
                result = sr.ReadToEnd();
            }
            return result;

        }

        /// &amp;lt;summary&amp;gt;
        /// Create Response
        /// &amp;lt;/summary&amp;gt;
        /// &amp;lt;param name=&quot;url&quot;&amp;gt;&amp;lt;/param&amp;gt;
        /// &amp;lt;param name=&quot;post&quot;&amp;gt;Is post Request&amp;lt;/param&amp;gt;
        /// &amp;lt;param name=&quot;postData&quot;&amp;gt;Post request data&amp;lt;/param&amp;gt;
        /// &amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;
        public static WebResponse CreateResponse(string url, bool post, string postData = &quot;&quot;)
        {
            var httpWebRequest = WebRequest.CreateHttp(url);
            httpWebRequest.Timeout = DefaultTimeout;
            httpWebRequest.AllowAutoRedirect = DefalutAllowAutoRedirect;
            httpWebRequest.UserAgent = DefaultUserAgent;
            httpWebRequest.Referer = DefaultReferer;
            if (post)
            {

                var data = DefaultEncoding.GetBytes(postData);
                httpWebRequest.Method = &quot;POST&quot;;
                httpWebRequest.ContentType = &quot;application/x-www-form-urlencoded;charset=utf-8&quot;;
                httpWebRequest.ContentLength = data.Length;
                using (var stream = httpWebRequest.GetRequestStream())
                {
                    stream.Write(data, 0, data.Length);
                }
            }

            try
            {
                var response = httpWebRequest.GetResponse();
                return response;
            }
            catch (Exception e)
            {
                throw new Exception(string.Format(&quot;Request error,url:{0},IsPost:{1},Data:{2},Message:{3}&quot;, url, post, postData, e.Message), e);
            }
        }

        /// &amp;lt;summary&amp;gt;
        /// http get request
        /// &amp;lt;/summary&amp;gt;
        /// &amp;lt;param name=&quot;url&quot;&amp;gt;&amp;lt;/param&amp;gt;
        /// &amp;lt;returns&amp;gt;Response Stream&amp;lt;/returns&amp;gt;
        public static Stream GetStream(string url)
        {
            var stream = CreateResponse(url, false).GetResponseStream();
            if (stream == null)
            {

                throw new Exception(&quot;Response error,the response stream is null&quot;);
            }
            else
            {
                return stream;

            }
        }

        /// &amp;lt;summary&amp;gt;
        /// http post request
        /// &amp;lt;/summary&amp;gt;
        /// &amp;lt;param name=&quot;url&quot;&amp;gt;&amp;lt;/param&amp;gt;
        /// &amp;lt;param name=&quot;postData&quot;&amp;gt;post data&amp;lt;/param&amp;gt;
        /// &amp;lt;returns&amp;gt;Response Stream&amp;lt;/returns&amp;gt;
        public static Stream PostStream(string url, string postData)
        {
            var stream = CreateResponse(url, true, postData).GetResponseStream();
            if (stream == null)
            {

                throw new Exception(&quot;Response error,the response stream is null&quot;);
            }
            else
            {
                return stream;

            }
        }


    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;获取首页数据&quot;&gt;获取首页数据&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;string res = HttpUtil.GetString(&quot;https://www.cnblogs.com&quot;);&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/668104/201802/668104-20180214124235468-1450325109.png&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;解析数据&quot;&gt;解析数据&lt;/h3&gt;
&lt;p&gt;我们成功获取到了html，但是怎么提取我们需要的信息（文章标题、地址、摘要、作者、发布时间）呢。这里就亮出了我们的利剑&lt;code&gt;HtmlAgilityPack&lt;/code&gt;，他是一个可以根据xpath来解析网页的组件。&lt;/p&gt;
&lt;p&gt;载入我们前面获取的html：&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;HtmlDocument doc = new HtmlDocument();
doc.LoadHtml(html);&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/668104/201802/668104-20180214124601718-824094795.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;从上图中，我们可以看出，每条文章所有信息都在一个class为post_item的div里，我们先获取所有的class=post_item的div&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;//获取所有文章数据项
var itemBodys = doc.DocumentNode.SelectNodes(&quot;//div[@class='post_item_body']&quot;);&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;我们继续分析，可以看出文章的标题在class=post_item_body的div下面的h3标签下的a标签，摘要信息在class=post_item_summary的p标签里面，发布时间和作者在class=post_item_foot的div里，分析完毕，我们可以取出我们想要的数据了：&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;foreach (var itemBody in itemBodys)
{
    //标题元素
    var titleElem = itemBody.SelectSingleNode(&quot;h3/a&quot;);
    //获取标题
    var title = titleElem?.InnerText;
    //获取url
    var url = titleElem?.Attributes[&quot;href&quot;]?.Value;

    //摘要元素
    var summaryElem = itemBody.SelectSingleNode(&quot;p[@class='post_item_summary']&quot;);
    //获取摘要
    var summary = summaryElem?.InnerText.Replace(&quot;\r\n&quot;, &quot;&quot;).Trim();

    //数据项底部元素
    var footElem = itemBody.SelectSingleNode(&quot;div[@class='post_item_foot']&quot;);
    //获取作者
    var author = footElem?.SelectSingleNode(&quot;a&quot;)?.InnerText;
    //获取文章发布时间
    var publishTime = Regex.Match(footElem?.InnerText, &quot;\\d+-\\d+-\\d+ \\d+:\\d+&quot;).Value;

                   


    Console.WriteLine($&quot;标题：{title}&quot;);
    Console.WriteLine($&quot;网址：{url}&quot;);
    Console.WriteLine($&quot;摘要：{summary}&quot;);
    Console.WriteLine($&quot;作者：{author}&quot;);
    Console.WriteLine($&quot;发布时间：{publishTime}&quot;);
    Console.WriteLine(&quot;--------------华丽的分割线---------------&quot;);
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;运行一下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/668104/201802/668104-20180214125236952-2037767776.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;我们成功的获取了我们想要的信息。现在我们定义一个&lt;code&gt;Blog&lt;/code&gt;对象将它们装起来。&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;public class Blog
{
    /// &amp;lt;summary&amp;gt;
    /// 标题
    /// &amp;lt;/summary&amp;gt;
    public string Title { get; set; }

    /// &amp;lt;summary&amp;gt;
    /// 博文url
    /// &amp;lt;/summary&amp;gt;
    public string Url { get; set; }

    /// &amp;lt;summary&amp;gt;
    /// 摘要
    /// &amp;lt;/summary&amp;gt;
    public string Summary { get; set; }

    /// &amp;lt;summary&amp;gt;
    /// 作者
    /// &amp;lt;/summary&amp;gt;
    public string Author { get; set; }

    /// &amp;lt;summary&amp;gt;
    /// 发布时间
    /// &amp;lt;/summary&amp;gt;
    public DateTime PublishTime { get; set; }
}&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;我们使用&lt;code&gt;Polly&lt;/code&gt;在我们的http请求失败时进行重试，设置为重试3次。&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;//初始化重试器
_retryTwoTimesPolicy =
    Policy
        .Handle&amp;lt;Exception&amp;gt;()
        .Retry(3, (ex, count) =&amp;gt;
        {
            _logger.Error(&quot;Excuted Failed! Retry {0}&quot;, count);
            _logger.Error(&quot;Exeption from {0}&quot;, ex.GetType().Name);
        });&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;测试一下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/668104/201802/668104-20180214125819390-1725893289.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;可以看到当遇到exception是Polly会帮我们重试三次，如果三次重试都失败了那么会放弃。&lt;/p&gt;

&lt;p&gt;使用&lt;code&gt;MailKit&lt;/code&gt;来进行邮件发送，它支持IMAP，POP3和SMTP协议，并且是跨平台的十分优秀。下面是根据前面园友的分享自己封装的一个类库：&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;using System.Collections.Generic;
using CnBlogSubscribeTool.Config;
using MailKit.Net.Smtp;
using MimeKit;

namespace CnBlogSubscribeTool
{
    /// &amp;lt;summary&amp;gt;
    /// send email
    /// &amp;lt;/summary&amp;gt;
    public class MailUtil
    {
        private static bool SendMail(MimeMessage mailMessage,MailConfig config)
        {
            try
            {
                var smtpClient = new SmtpClient();
                smtpClient.Timeout = 10 * 1000;   //设置超时时间
                smtpClient.Connect(config.Host, config.Port, MailKit.Security.SecureSocketOptions.None);//连接到远程smtp服务器
                smtpClient.Authenticate(config.Address, config.Password);
                smtpClient.Send(mailMessage);//发送邮件
                smtpClient.Disconnect(true);
                return true;

            }
            catch
            {
                throw;
            }

        }

        /// &amp;lt;summary&amp;gt;
        ///发送邮件
        /// &amp;lt;/summary&amp;gt;
        /// &amp;lt;param name=&quot;config&quot;&amp;gt;配置&amp;lt;/param&amp;gt;
        /// &amp;lt;param name=&quot;receives&quot;&amp;gt;接收人&amp;lt;/param&amp;gt;
        /// &amp;lt;param name=&quot;sender&quot;&amp;gt;发送人&amp;lt;/param&amp;gt;
        /// &amp;lt;param name=&quot;subject&quot;&amp;gt;标题&amp;lt;/param&amp;gt;
        /// &amp;lt;param name=&quot;body&quot;&amp;gt;内容&amp;lt;/param&amp;gt;
        /// &amp;lt;param name=&quot;attachments&quot;&amp;gt;附件&amp;lt;/param&amp;gt;
        /// &amp;lt;param name=&quot;fileName&quot;&amp;gt;附件名&amp;lt;/param&amp;gt;
        /// &amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;
        public static bool SendMail(MailConfig config,List&amp;lt;string&amp;gt; receives, string sender, string subject, string body, byte[] attachments = null,string fileName=&quot;&quot;)
        {
            var fromMailAddress = new MailboxAddress(config.Name, config.Address);
            
            var mailMessage = new MimeMessage();
            mailMessage.From.Add(fromMailAddress);
            
            foreach (var add in receives)
            {
                var toMailAddress = new MailboxAddress(add);
                mailMessage.To.Add(toMailAddress);
            }
            if (!string.IsNullOrEmpty(sender))
            {
                var replyTo = new MailboxAddress(config.Name, sender);
                mailMessage.ReplyTo.Add(replyTo);
            }
            var bodyBuilder = new BodyBuilder() { HtmlBody = body };

            //附件
            if (attachments != null)
            {
                if (string.IsNullOrEmpty(fileName))
                {
                    fileName = &quot;未命名文件.txt&quot;;
                }
                var attachment = bodyBuilder.Attachments.Add(fileName, attachments);

                //解决中文文件名乱码
                var charset = &quot;GB18030&quot;;
                attachment.ContentType.Parameters.Clear();
                attachment.ContentDisposition.Parameters.Clear();
                attachment.ContentType.Parameters.Add(charset, &quot;name&quot;, fileName);
                attachment.ContentDisposition.Parameters.Add(charset, &quot;filename&quot;, fileName);

                //解决文件名不能超过41字符
                foreach (var param in attachment.ContentDisposition.Parameters)
                    param.EncodingMethod = ParameterEncodingMethod.Rfc2047;
                foreach (var param in attachment.ContentType.Parameters)
                    param.EncodingMethod = ParameterEncodingMethod.Rfc2047;
            }

            mailMessage.Body = bodyBuilder.ToMessageBody();
            mailMessage.Subject = subject;

            return SendMail(mailMessage, config);

        }
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;测试一下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/668104/201802/668104-20180214130913624-1316419987.png&quot;/&gt;&lt;/p&gt;

&lt;p&gt;关于抓取数据和发送邮件的调度，程序异常退出的数据处理等等，在此我就不详细说明了，有兴趣的看源码（文末有github地址）&lt;/p&gt;
&lt;p&gt;抓取数据是增量更新的。不用RSS订阅的原因是RSS更新比较慢。&lt;/p&gt;
&lt;p&gt;完整的程序运行截图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/668104/201802/668104-20180214131350640-2044253364.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;每发送一次邮件，程序就会将记录时间调整到今天的9点，然后每次抓取数据之后就会判断当前时间减去记录时间是否大于等于24小时，如果符合就发送邮件并且更新记录时间。&lt;/p&gt;
&lt;p&gt;收到的邮件截图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/668104/201802/668104-20180214131655796-1664135594.png&quot;/&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;截图中的邮件标题为13日但是邮件内容为14日，是因为我为了演示效果，将今天（14日）的数据copy到了13日的数据里面，不要被误导了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;还提供一个附件便于收集整理：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/668104/201802/668104-20180214131912984-1257791282.png&quot;/&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;好了介绍完毕，我自己已经将这个小工具部署到服务器，想要享受这个服务的可以在评论留下邮箱（手动滑稽）。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote readability=&quot;2.4137931034483&quot;&gt;
&lt;p&gt;&lt;strong&gt;github&lt;/strong&gt;:&lt;a href=&quot;https://github.com/stulzq/CnBlogSubscribeTool&quot; class=&quot;uri&quot;&gt;https://github.com/stulzq/CnBlogSubscribeTool&lt;/a&gt; 如果你喜欢，欢迎来个&lt;strong&gt;star&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
<pubDate>Wed, 14 Feb 2018 05:25:00 +0000</pubDate>
<dc:creator>晓晨Master</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/stulzq/p/8448183.html</dc:identifier>
</item>
<item>
<title>记一次酷狗音乐API的获取，感兴趣的可以自己封装开发自己的音乐播放器 - 周八</title>
<link>http://www.cnblogs.com/apresunday/p/8448126.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/apresunday/p/8448126.html</guid>
<description>&lt;p&gt;&lt;strong&gt;&lt;span&gt;1.本教程仅供个人学习用，禁止用于任何的商业和非法用途，如涉及版权问题请联系笔者删除。&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;2.随笔系作者原创文档，转载请注明文档来源：http://www.cnblogs.com/apresunday/p/8448126.html，谢谢&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;小八这几天正在学习微信小程序的开发，于是想在学的同时能开发出来一个关于音乐的项目，但是问题在于音乐这东西。一方面是数据量太大，第二个方面就是牵扯到很多的版权的问题,所以笔者就想着借助于目前市面上的音乐播放器上的音乐文件，鉴于酷狗音乐上边的歌多而且比较的全面，在此就以酷狗音乐为示例，其它的什么QQ音乐和网易之类的也一样。&lt;/span&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;建议：&lt;/span&gt;用Chrome或者Firefox来进行抓取。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;1.打开Chrome地址栏输入酷狗音乐的官网，进入官网后随便搜索一首歌曲，这里以最近比较火的一首歌曲广东爱情故事为例，搜索后按下键盘的F12或者鼠标右键选择检查来打开开发者神器，然后点击Network(用来调试浏览器和服务器交互的工具)随后再次刷新搜索结果页面，会发现工具中出现很多的链接，其链接都是服务器返回给浏览器的数据，如下图。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1333402/201802/1333402-20180214112403031-201657074.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;2.分析：既然是服务器返回给浏览器的数据，其中必有歌曲的相关信息，我们来查看这些链接来看哪个返回了与歌曲相关的数据。当我们查看到一个song_search的链接后发现它callback了一个jQuery的数据对象，我们点击这个song_search这个链接，然后点击Response这个选项卡来看看它返回了 什么数据，如图：它返回了和歌曲相关的信息&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1333402/201802/1333402-20180214112933562-1819439749.png&quot; alt=&quot;&quot;/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;点击Headers来来查看它详细的信息。如图：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1333402/201802/1333402-20180214113235671-2116680758.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;3.我们发现这个URL很像搜索歌曲的，然后我们复制其到浏览器打开如图：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1333402/201802/1333402-20180214113436515-275750989.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;然后我们多替换keyword为不同的歌曲名称发现它都返回的是歌曲的搜索列表，在此我们已经找到&lt;span&gt;搜索歌曲的链接&lt;/span&gt;：&lt;span&gt;http://songsearch.kugou.com/song_search_v2?callback=jQuery1124006980366032059648_1518578518932&amp;amp;keyword=这里是歌曲名称&amp;amp;page=1&amp;amp;pagesize=30&amp;amp;userid=-1&amp;amp;clientver=&amp;amp;platform=WebFilter&amp;amp;tag=em&amp;amp;filter=2&amp;amp;iscorrection=1&amp;amp;privilege_filter=0&amp;amp;_=1518578518934&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;4.我们来继续播放歌曲，就拿搜索结果的第一个歌来看，地址栏中一个hash就打开了歌曲的所有信息，所以在这我们分析到只要拿到这个hash值就拿到了歌曲的所有播放信息&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1333402/201802/1333402-20180214114204593-430871892.png&quot; alt=&quot;&quot;/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;5.分析刚才搜索返回的数据，我们删除搜索返回数据的最外边的小括号后它其实就是一个json数据，我们来格式化这个json数据，如下：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;{&lt;br/&gt;&quot;status&quot;: 1,&lt;br/&gt;&quot;error_code&quot;: 0,&lt;br/&gt;&quot;data&quot;: {&lt;br/&gt;&quot;page&quot;: 1,&lt;br/&gt;&quot;tab&quot;: &quot;全部&quot;,&lt;br/&gt;&quot;lists&quot;: [{&lt;br/&gt;&quot;SongName&quot;: &quot;&amp;lt;em&amp;gt;广东爱情故事&amp;lt;\/em&amp;gt;&quot;,&lt;br/&gt;&quot;OwnerCount&quot;: 628451,&lt;br/&gt;&quot;MvType&quot;: 2,&lt;br/&gt;&quot;TopicRemark&quot;: &quot;&quot;,&lt;br/&gt;&quot;SQFailProcess&quot;: 0,&lt;br/&gt;&quot;Source&quot;: &quot;&quot;,&lt;br/&gt;&quot;Bitrate&quot;: 128,&lt;br/&gt;&quot;HQExtName&quot;: &quot;mp3&quot;,&lt;br/&gt;&quot;SQFileSize&quot;: 0,&lt;br/&gt;&quot;ResFileSize&quot;: 0,&lt;br/&gt;&quot;Duration&quot;: 214,&lt;br/&gt;&quot;MvTrac&quot;: 3,&lt;br/&gt;&quot;SQDuration&quot;: 0,&lt;br/&gt;&quot;ExtName&quot;: &quot;mp3&quot;,&lt;br/&gt;&quot;Auxiliary&quot;: &quot;&quot;,&lt;br/&gt;&quot;SongLabel&quot;: &quot;&quot;,&lt;br/&gt;&quot;Scid&quot;: 29199917,&lt;br/&gt;&quot;OriSongName&quot;: &quot;&amp;lt;em&amp;gt;广东爱情故事&amp;lt;\/em&amp;gt;&quot;,&lt;br/&gt;&quot;FailProcess&quot;: 0,&lt;br/&gt;&quot;SQBitrate&quot;: 0,&lt;br/&gt;&quot;HQBitrate&quot;: 320,&lt;br/&gt;&quot;Audioid&quot;: 29199917,&lt;br/&gt;&quot;HiFiQuality&quot;: 1,&lt;br/&gt;&quot;Grp&quot;: {},&lt;br/&gt;&quot;OriOtherName&quot;: &quot;&quot;,&lt;br/&gt;&quot;AlbumPrivilege&quot;: 0,&lt;br/&gt;&quot;TopicUrl&quot;: &quot;&quot;,&lt;br/&gt;&quot;SuperFileHash&quot;: &quot;&quot;,&lt;br/&gt;&quot;ASQPrivilege&quot;: 0,&lt;br/&gt;&quot;M4aSize&quot;: 878148,&lt;br/&gt;&quot;AlbumName&quot;: &quot;广东爱情故事&quot;,&lt;br/&gt;&quot;IsOriginal&quot;: 1,&lt;br/&gt;&quot;Privilege&quot;: 0,&lt;br/&gt;&quot;ResBitrate&quot;: 0,&lt;br/&gt;&quot;HQFailProcess&quot;: 0,&lt;br/&gt;&quot;SQPayType&quot;: 0,&lt;br/&gt;&quot;HQPrice&quot;: 0,&lt;br/&gt;&quot;Type&quot;: &quot;audio&quot;,&lt;br/&gt;&quot;SourceID&quot;: 0,&lt;br/&gt;&quot;Publish&quot;: 1,&lt;br/&gt;&quot;ID&quot;: &quot;89975939&quot;,&lt;br/&gt;&quot;SuperFileSize&quot;: 0,&lt;br/&gt;&quot;QualityLevel&quot;: 2,&lt;br/&gt;&quot;SQFileHash&quot;: &quot;00000000000000000000000000000000&quot;,&lt;br/&gt;&quot;A320Privilege&quot;: 0,&lt;br/&gt;&quot;HQPrivilege&quot;: 0,&lt;br/&gt;&quot;SuperBitrate&quot;: 0,&lt;br/&gt;&quot;SuperDuration&quot;: 0,&lt;br/&gt;&quot;AlbumID&quot;: &quot;4162049&quot;,&lt;br/&gt;&quot;ResFileHash&quot;: &quot;&quot;,&lt;br/&gt;&quot;FileSize&quot;: 3429399,&lt;br/&gt;&quot;MixSongID&quot;: &quot;89975939&quot;,&lt;br/&gt;&quot;HQFileHash&quot;: &quot;0127995D50833821451408D8A7F90E15&quot;,&lt;br/&gt;&quot;SuperExtName&quot;: &quot;&quot;,&lt;br/&gt;&quot;FileHash&quot;: &lt;span&gt;&quot;2A25AAFF4B6C84B859B4D77F944DE57A&quot;,&lt;/span&gt;&lt;br/&gt;&quot;AudioCdn&quot;: 100,&lt;br/&gt;&quot;OtherName&quot;: &quot;&quot;,&lt;br/&gt;&quot;SQPkgPrice&quot;: 0,&lt;br/&gt;&quot;PkgPrice&quot;: 0,&lt;br/&gt;&quot;HQFileSize&quot;: 8658421,&lt;br/&gt;&quot;mvTotal&quot;: 4,&lt;br/&gt;&quot;OldCpy&quot;: 1,&lt;br/&gt;&quot;HQPayType&quot;: 0,&lt;br/&gt;&quot;SQPrice&quot;: 0,&lt;br/&gt;&quot;ResDuration&quot;: 0,&lt;br/&gt;&quot;PublishAge&quot;: 255,&lt;br/&gt;&quot;Price&quot;: 0,&lt;br/&gt;&quot;HQPkgPrice&quot;: 0,&lt;br/&gt;&quot;SingerName&quot;: &quot;广东雨神&quot;,&lt;br/&gt;&quot;SQExtName&quot;: &quot;&quot;,&lt;br/&gt;&quot;MvHash&quot;: &quot;421FD51941758456539B5C1EA10A7E2E&quot;,&lt;br/&gt;&quot;SQPrivilege&quot;: 0,&lt;br/&gt;&quot;HQDuration&quot;: 214,&lt;br/&gt;&quot;PayType&quot;: 0,&lt;br/&gt;&quot;HasAlbum&quot;: 1,&lt;br/&gt;&quot;Accompany&quot;: 1,&lt;br/&gt;&quot;FileName&quot;: &quot;广东雨神 - &amp;lt;em&amp;gt;广东爱情故事&amp;lt;\/em&amp;gt;&quot;&lt;br/&gt;},&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;我们在里边找到了歌曲的FileHash和播放页面的hash值是一样的，在这我们就会拿到歌曲的hash值。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;6.用同样的方法在Network中分析播放页面，会发现一个index的链接根据歌曲的hash值返回了歌曲的所有信息，如图：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1333402/201802/1333402-20180214115127249-1706377008.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;我们点击Header来查看具体的URL，如图：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1333402/201802/1333402-20180214115235265-670926802.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;我们复制URL在浏览器地址栏打开,如图&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1333402/201802/1333402-20180214115513874-800202722.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;发现其返回的就是一个json数据，格式化后代码如下：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;{&lt;br/&gt;&quot;status&quot;: 1,&lt;br/&gt;&quot;err_code&quot;: 0,&lt;br/&gt;&quot;data&quot;: {&lt;br/&gt;&quot;hash&quot;: &quot;2A25AAFF4B6C84B859B4D77F944DE57A&quot;,&lt;br/&gt;&quot;timelength&quot;: 214000,&lt;br/&gt;&quot;filesize&quot;: 3429399,&lt;br/&gt;&quot;audio_name&quot;: &quot;广东雨神 - 广东爱情故事&quot;,&lt;br/&gt;&quot;have_album&quot;: 0,&lt;br/&gt;&quot;album_name&quot;: &quot;未知专辑&quot;,&lt;br/&gt;&quot;album_id&quot;: 0,&lt;br/&gt;&quot;img&quot;: &quot;http:\/\/singerimg.kugou.com\/uploadpic\/softhead\/400\/20171222\/20171222112942494.jpg&quot;,&lt;br/&gt;&quot;have_mv&quot;: 1,&lt;br/&gt;&quot;video_id&quot;: &quot;635812&quot;,&lt;br/&gt;&quot;author_name&quot;: &quot;广东雨神&quot;,&lt;br/&gt;&quot;song_name&quot;: &quot;广东爱情故事&quot;,&lt;br/&gt;&quot;lyrics&quot;: &quot;[00:00.03]广东雨神 - 广东爱情故事\r\n[00:02.61]词：广东雨神\r\n[00:03.83]曲：广东雨神\r\n[00:18.87]安静地离去\r\n[00:21.66]和孤单一起\r\n[00:26.47]拥挤的回忆时间抹去\r\n[00:33.26]人在广东已经漂泊十年\r\n[00:36.32]有时也怀念当初一起\r\n[00:38.41]经已改变\r\n[00:40.88]让这天空将你我相连\r\n[00:44.00]怀念你走了云的天空还任性\r\n[00:51.48]是否它相信在乎\r\n[00:53.10]反而容易放弃\r\n[00:55.92]非要最后一无所有\r\n[00:59.01]才无所畏惧\r\n[01:08.94]我知道好多时候\r\n[01:11.88]爱一个人是没任何理由的\r\n[01:15.92]你同其他女子不一样的\r\n[01:18.54]你从来都不问我钟意你什么\r\n[01:21.49]反而我成日都问你\r\n[01:24.96]你究竟钟意我什么\r\n[01:33.79]笑的多一些改变要彻底\r\n[01:41.34]直面这世界真假游戏\r\n[01:48.24]人在广东已经漂泊十年\r\n[01:51.34]有时也怀念当初一起\r\n[01:53.55]经已改变\r\n[01:55.81]让这天空将你我相连\r\n[01:59.23]怀念你走了云的天空还任性\r\n[02:06.41]是否它相信下一次的相遇\r\n[02:10.83]就算最后一无所有\r\n[02:13.83]也无所畏惧\r\n[02:18.78]相信你就如当初一起\r\n[02:22.24]行过广东这十年幸福走了\r\n[02:28.14]唏嘘感慨那当初\r\n[02:33.76]相信你哪怕坚强\r\n[02:36.44]是假装出勇敢的面具\r\n[02:41.33]也不能少活得精彩的勇气\r\n[02:48.34]人在广东已经漂泊十年\r\n[02:51.30]有时也怀念当初一起\r\n[02:53.48]经已改变\r\n[02:55.83]让这天空将你我相连\r\n[02:59.22]怀念你走了云的天空\r\n[03:04.72]还任性是否它相信\r\n[03:07.50]下一次的相遇\r\n[03:10.84]就算最后一无所有\r\n[03:13.78]也无所畏惧\r\n[03:18.50]就算最后一无所有\r\n[03:21.08]我都无所畏惧\r\n&quot;,&lt;br/&gt;&quot;author_id&quot;: &quot;721812&quot;,&lt;br/&gt;&quot;privilege&quot;: 0,&lt;br/&gt;&quot;privilege2&quot;: &quot;0&quot;,&lt;br/&gt;&quot;play_url&quot;: &quot;http:\/\/fs.w.kugou.com\/201802141035\/e668b72ad68914612e8aacf363a34b22\/G114\/M0B\/00\/13\/UpQEAFnocumANGxzADRUF4h4Zks442.mp3&quot;,&lt;br/&gt;&quot;authors&quot;: [{&lt;br/&gt;&quot;is_publish&quot;: &quot;1&quot;,&lt;br/&gt;&quot;author_id&quot;: &quot;721812&quot;,&lt;br/&gt;&quot;avatar&quot;: &quot;20171222112942494.jpg&quot;,&lt;br/&gt;&quot;author_name&quot;: &quot;广东雨神&quot;&lt;br/&gt;}],&lt;br/&gt;&quot;bitrate&quot;: 128&lt;br/&gt;}&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;我们发现歌曲的所有信息都在，包括图片，歌词，歌曲等等，我们来验证下歌曲的url,复制play_url后边的链接，注意去掉转义字符的反斜杠，在浏览器地址栏打开后，如图：熟悉的歌播放。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1333402/201802/1333402-20180214115843671-1075548260.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;总结：&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;1.首先要根据歌曲的名字获取其在酷狗数据库中的唯一索引hash值。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;2.根据hash值来获取歌曲的所有信息&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

</description>
<pubDate>Wed, 14 Feb 2018 04:03:00 +0000</pubDate>
<dc:creator>周八</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/apresunday/p/8448126.html</dc:identifier>
</item>
<item>
<title>踩水坑系列一 - Kampfen</title>
<link>http://www.cnblogs.com/Cloud-king/p/8430235.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/Cloud-king/p/8430235.html</guid>
<description>&lt;p&gt;&lt;strong&gt;1、.2lf确实有四舍五入的功能，只是有浮点误差，如用2lf输出1.825和1.815前者是1.83，后者调试是1.814999999999，最终后者输出就是1.81；&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;*100等扩大范围处理，或化为字符串处理。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;例：牛客常大寒假新生赛H题 &lt;span&gt;https://www.nowcoder.net/acm/contest/78/H&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1282935/201802/1282935-20180208112849295-798949286.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
#include &amp;lt;iostream&amp;gt;&lt;span&gt;
#include &lt;/span&gt;&amp;lt;algorithm&amp;gt;&lt;span&gt;
#include &lt;/span&gt;&amp;lt;cmath&amp;gt;&lt;span&gt;
#include &lt;/span&gt;&amp;lt;cstdio&amp;gt;
&lt;span&gt;#define&lt;/span&gt; eps 0.000000001
&lt;span&gt;using&lt;/span&gt; &lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; std;
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;将数扩大100进行处理
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;int comp(double x)
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;{
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;    if(abs(x-0)&amp;lt;eps)    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;x==0
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;    return 1;
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;    else
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;    return 0;
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;
&lt;span&gt;int&lt;/span&gt;&lt;span&gt; main()
{
    &lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt; t;
    &lt;/span&gt;&lt;span&gt;double&lt;/span&gt;&lt;span&gt; a,b,c,ans;
    //freopen(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Atext.in&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;r&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,stdin);
    cin &lt;/span&gt;&amp;gt;&amp;gt;&lt;span&gt;t;
    &lt;/span&gt;&lt;span&gt;while&lt;/span&gt;(t--&lt;span&gt;)
    {
        cin &lt;/span&gt;&amp;gt;&amp;gt; a &amp;gt;&amp;gt; b &amp;gt;&amp;gt;&lt;span&gt; c;
        ans&lt;/span&gt;=a*c*&lt;span&gt;100.0&lt;/span&gt;/&lt;span&gt;b;
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(ans-(&lt;span&gt;int&lt;/span&gt;)ans&amp;lt;&lt;span&gt;0.499&lt;/span&gt;)      &lt;span&gt;//&lt;/span&gt;&lt;span&gt;第三位为4&lt;/span&gt;
            ans=(&lt;span&gt;int&lt;/span&gt;)ans/&lt;span&gt;100.0&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;(ans-(&lt;span&gt;int&lt;/span&gt;)ans&amp;gt;&lt;span&gt;0.501&lt;/span&gt;)  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;第三位为6或为5后面有有效数字&lt;/span&gt;
            ans=((&lt;span&gt;int&lt;/span&gt;)ans+&lt;span&gt;1&lt;/span&gt;)/&lt;span&gt;100.0&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;
        {
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(((&lt;span&gt;int&lt;/span&gt;)ans)%&lt;span&gt;2&lt;/span&gt;==&lt;span&gt;1&lt;/span&gt;)  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;5前为奇数&lt;/span&gt;
                ans=((&lt;span&gt;int&lt;/span&gt;)ans+&lt;span&gt;1&lt;/span&gt;)/&lt;span&gt;100.0&lt;/span&gt;&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;
                ans&lt;/span&gt;=(&lt;span&gt;int&lt;/span&gt;)ans/&lt;span&gt;100.0&lt;/span&gt;&lt;span&gt;;
        }
        printf(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%.2lf\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,ans);
    }
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;2、cin确实比较慢，上次CF用cin读入一个字符串二维数组，TLE了，改成%s一行行的读入，就对了，毕竟其实OJ测评只看输出结果；&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3、string类如果用scanf得先用a.resize(100)预先分配空间，然后scanf（“%d”,&amp;amp;a[0]），用printf()输出，也得a.c_str();　　string不能用cin读入时接受空格；&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4.getline有两种用法，可接受任意字符并以‘\n’为结束标志；&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;getline(cin , s);　　或getline(cin , s ,' 分割符'）；&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;PAT的ccccL1-025;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;题面：&lt;/strong&gt;&lt;/p&gt;

&lt;div id=&quot;problemContent&quot; readability=&quot;44&quot;&gt;
&lt;p&gt;本题的目标很简单，就是求两个正整数A和B的和，其中A和B都在区间[1,1000]。稍微有点麻烦的是，输入并不保证是两个正整数。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;输入格式：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;输入在一行给出A和B，其间以空格分开。问题是A和B不一定是满足要求的正整数，有时候可能是超出范围的数字、负数、带小数点的实数、甚至是一堆乱码。&lt;/p&gt;
&lt;p&gt;注意：我们把输入中出现的第1个空格认为是A和B的分隔。题目保证至少存在一个空格，并且B不是一个空字符串。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;输出格式：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果输入的确是两个正整数，则按格式“A + B = 和”输出。如果某个输入不合要求，则在相应位置输出“?”，显然此时和也是“?”。&lt;/p&gt;
&lt;strong&gt;输入样例1：&lt;/strong&gt;
&lt;pre&gt;
123 456
&lt;/pre&gt;
&lt;strong&gt;输出样例1：&lt;/strong&gt;
&lt;pre&gt;
123 + 456 = 579
&lt;/pre&gt;
&lt;strong&gt;输入样例2：&lt;/strong&gt;
&lt;pre&gt;
22. 18
&lt;/pre&gt;
&lt;strong&gt;输出样例2：&lt;/strong&gt;
&lt;pre&gt;
? + 18 = ?
&lt;/pre&gt;
&lt;strong&gt;输入样例3：&lt;/strong&gt;
&lt;pre&gt;
-100 blabla bla...33
&lt;/pre&gt;
&lt;strong&gt;输出样例3：&lt;/strong&gt;
&lt;pre&gt;
? + ? = ?
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;48&quot;&gt;
&lt;pre&gt;
#include &amp;lt;iostream&amp;gt;&lt;span&gt;
#include &lt;/span&gt;&amp;lt;algorithm&amp;gt;&lt;span&gt;
#include &lt;/span&gt;&amp;lt;cstdio&amp;gt;&lt;span&gt;
#include &lt;/span&gt;&amp;lt;&lt;span&gt;string&lt;/span&gt;&amp;gt;&lt;span&gt;
#include &lt;/span&gt;&amp;lt;cstring&amp;gt;
&lt;span&gt;const&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; maxn=&lt;span&gt;1005&lt;/span&gt;&lt;span&gt;;

&lt;/span&gt;&lt;span&gt;using&lt;/span&gt; &lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; std;

&lt;/span&gt;&lt;span&gt;int&lt;/span&gt; f(&lt;span&gt;string&lt;/span&gt; &amp;amp;x)                 &lt;span&gt;//&lt;/span&gt;&lt;span&gt;判断正整数&lt;/span&gt;
&lt;span&gt;{
    &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; t,i,flag=&lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
    t&lt;/span&gt;=&lt;span&gt;x.size();
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;cout  &amp;lt;&amp;lt; t &amp;lt;&amp;lt; endl;&lt;/span&gt;
    &lt;span&gt;if&lt;/span&gt;(x==&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;||(t&amp;gt;=&lt;span&gt;4&lt;/span&gt;&amp;amp;&amp;amp;x!=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;1000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;)||t&amp;lt;&lt;span&gt;1&lt;/span&gt;)  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; !!!注意坑点不是长度超1000&lt;/span&gt;
        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;1&lt;/span&gt;;                &lt;span&gt;//&lt;/span&gt;&lt;span&gt;0不是正整数&lt;/span&gt;
    &lt;span&gt;for&lt;/span&gt;(i=&lt;span&gt;0&lt;/span&gt;;i&amp;lt;t;i++&lt;span&gt;)
    {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(x[i]&amp;gt;=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&amp;amp;&amp;amp;x[i]&amp;lt;=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;9&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
            &lt;/span&gt;&lt;span&gt;continue&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;
        {
            flag&lt;/span&gt;=&lt;span&gt;1&lt;/span&gt;;                  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;返1---不是正整数;&lt;/span&gt;
            &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
        }
    }
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; flag;
}
&lt;/span&gt;&lt;span&gt;string&lt;/span&gt; sum(&lt;span&gt;string&lt;/span&gt; &amp;amp;xx,&lt;span&gt;string&lt;/span&gt; &amp;amp;yy)    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;大数和&lt;/span&gt;
&lt;span&gt;{
    &lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt; len1,len2,i,n;
    &lt;/span&gt;&lt;span&gt;string&lt;/span&gt;&lt;span&gt; maxlen;
    len1&lt;/span&gt;=&lt;span&gt;xx.size();
    len2&lt;/span&gt;=&lt;span&gt;yy.size();
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(len1&amp;gt;&lt;span&gt;len2)
        maxlen&lt;/span&gt;=&lt;span&gt;xx;
    &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;
        maxlen&lt;/span&gt;=&lt;span&gt;yy;
    n&lt;/span&gt;=&lt;span&gt;max(len1,len2);
    &lt;/span&gt;&lt;span&gt;while&lt;/span&gt;(len1&amp;gt;&lt;span&gt;0&lt;/span&gt;&amp;amp;&amp;amp;len2&amp;gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
        maxlen[&lt;/span&gt;--n]=xx[--len1]-&lt;span&gt;'&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;+yy[--&lt;span&gt;len2];
    n&lt;/span&gt;=&lt;span&gt;maxlen.size();
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(i=n-&lt;span&gt;1&lt;/span&gt;;i&amp;gt;&lt;span&gt;0&lt;/span&gt;;i--&lt;span&gt;)
    {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(maxlen[i]&amp;gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;9&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;大于9，进位&lt;/span&gt;
&lt;span&gt;        {
             maxlen[i]&lt;/span&gt;-=&lt;span&gt;10&lt;/span&gt;&lt;span&gt;;
             maxlen[i&lt;/span&gt;-&lt;span&gt;1&lt;/span&gt;]+=&lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
        }
    }
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(maxlen[&lt;span&gt;0&lt;/span&gt;]&amp;gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;9&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
    {
        maxlen[&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;]-=&lt;span&gt;10&lt;/span&gt;&lt;span&gt;;
        maxlen&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;+&lt;span&gt;maxlen;
    }
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; maxlen;
}
&lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt; main()
{
    &lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt; m,n;
    &lt;/span&gt;&lt;span&gt;string&lt;/span&gt;&lt;span&gt; a,b;
   &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;a.resize(1000);如果用scanf输入得预先分配空间，printf输出也是&lt;/span&gt;
    getline(cin,a,&lt;span&gt;'&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;);     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;！！！注意坑点，A可能为空字符串&lt;/span&gt;
&lt;span&gt;    getline(cin,b);
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;    cout &amp;lt;&amp;lt; b &amp;lt;&amp;lt; endl;&lt;/span&gt;
    m=&lt;span&gt;f(a);
    n&lt;/span&gt;=&lt;span&gt;f(b);
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(m==&lt;span&gt;1&lt;/span&gt;&amp;amp;&amp;amp;n==&lt;span&gt;1&lt;/span&gt;&lt;span&gt;)
        cout &lt;/span&gt;&amp;lt;&amp;lt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;? + ? = ?&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &amp;lt;&amp;lt;&lt;span&gt; endl;
    &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;(m==&lt;span&gt;1&lt;/span&gt;&amp;amp;&amp;amp;n==&lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
        cout &lt;/span&gt;&amp;lt;&amp;lt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;? + &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &amp;lt;&amp;lt; b &amp;lt;&amp;lt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; = ?&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &amp;lt;&amp;lt;&lt;span&gt; endl;
    &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;(m==&lt;span&gt;0&lt;/span&gt;&amp;amp;&amp;amp;n==&lt;span&gt;1&lt;/span&gt;&lt;span&gt;)
        cout &lt;/span&gt;&amp;lt;&amp;lt; a &amp;lt;&amp;lt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; + ? = ?&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;lt;&amp;lt;&lt;span&gt; endl;
    &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;
    {
        cout &lt;/span&gt;&amp;lt;&amp;lt; a &amp;lt;&amp;lt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; + &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;lt;&amp;lt; b &amp;lt;&amp;lt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; = &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &amp;lt;&amp;lt; sum(a,b) &amp;lt;&amp;lt;&lt;span&gt; endl;
    }
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
}
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;还可以用Java异常处理做;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;strong&gt; 5、（亲测）main函数里的int型数组最多可以开到519100（即5*10^5），栈上一般大小为2M或1M，全局或静态即堆上或动态内存分配一般为2G,最多可以开到409000000（即4*10^8）,但是同时要注意不能超过数组下标的数据范围，数组下标为std：：size_t,32位程序里为unsigned int(4 Bytes)（即2^32-1------4294967295），64位程序为unsigned long（即2^64-1）;二维数组的话最大堆上能开22000*22000（亲测）；&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;例：poj3278&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Catch That Cow&lt;/p&gt;
&lt;div class=&quot;plm&quot;&gt;
&lt;table align=&quot;center&quot;&gt;&lt;tbody readability=&quot;1&quot;&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;Time Limit:&lt;/strong&gt; 2000MS&lt;/td&gt;
&lt;td width=&quot;10px&quot;&gt; &lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Memory Limit:&lt;/strong&gt; 65536K&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;&lt;strong&gt;Total Submissions:&lt;/strong&gt; 105001&lt;/td&gt;
&lt;td width=&quot;10px&quot;&gt; &lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Accepted:&lt;/strong&gt; 32843&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;
&lt;p class=&quot;pst&quot;&gt;Description&lt;/p&gt;
&lt;div class=&quot;ptx&quot; lang=&quot;en-US&quot; readability=&quot;21&quot;&gt;
&lt;p&gt;Farmer John has been informed of the location of a fugitive cow and wants to catch her immediately. He starts at a point &lt;em&gt;N&lt;/em&gt; (0 ≤ &lt;em&gt;N&lt;/em&gt; ≤ 100,000) on a number line and the cow is at a point &lt;em&gt;K&lt;/em&gt; (0 ≤ &lt;em&gt;K&lt;/em&gt; ≤ 100,000) on the same number line. Farmer John has two modes of transportation: walking and teleporting.&lt;/p&gt;
&lt;p&gt;* Walking: FJ can move from any point &lt;em&gt;X&lt;/em&gt; to the points &lt;em&gt;X &lt;/em&gt;- 1 or &lt;em&gt;X &lt;/em&gt;+ 1 in a single minute&lt;br/&gt;* Teleporting: FJ can move from any point &lt;em&gt;X&lt;/em&gt; to the point 2 × &lt;em&gt;X&lt;/em&gt; in a single minute.&lt;/p&gt;
&lt;p&gt;If the cow, unaware of its pursuit, does not move at all, how long does it take for Farmer John to retrieve it?&lt;/p&gt;
&lt;/div&gt;
&lt;p class=&quot;pst&quot;&gt;Input&lt;/p&gt;
&lt;p&gt;Line 1: Two space-separated integers: &lt;em&gt;N&lt;/em&gt; and &lt;em&gt;K&lt;/em&gt;&lt;/p&gt;
&lt;p class=&quot;pst&quot;&gt;Output&lt;/p&gt;
&lt;p&gt;Line 1: The least amount of time, in minutes, it takes for Farmer John to catch the fugitive cow.&lt;/p&gt;
&lt;p class=&quot;pst&quot;&gt;Sample Input&lt;/p&gt;
&lt;pre class=&quot;sio&quot;&gt;
5 17
&lt;/pre&gt;
&lt;p class=&quot;pst&quot;&gt;Sample Output&lt;/p&gt;
&lt;pre class=&quot;sio&quot;&gt;
4
&lt;/pre&gt;
&lt;p class=&quot;pst&quot;&gt;Hint&lt;/p&gt;
&lt;p&gt;The fastest way for Farmer John to reach the fugitive cow is to move along the following path: 5-10-9-18-17, which takes 4 minutes.&lt;/p&gt;
&lt;div class=&quot;ptx&quot; lang=&quot;en-US&quot; readability=&quot;10&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
#include &amp;lt;iostream&amp;gt;&lt;span&gt;
#include &lt;/span&gt;&amp;lt;cstring&amp;gt;&lt;span&gt;
#include &lt;/span&gt;&amp;lt;queue&amp;gt;
&lt;span&gt;const&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; maxn=&lt;span&gt;200003&lt;/span&gt;;  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;RE是因为vis定为100000会数组越界，不是queue内存问题！！！&lt;/span&gt;
&lt;span&gt;using&lt;/span&gt; &lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; std;

&lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt; n,k;
&lt;/span&gt;&lt;span&gt;struct&lt;/span&gt;&lt;span&gt; node{
    &lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt; x,step;
};
&lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt; vis[maxn];
queue&lt;/span&gt;&amp;lt;node&amp;gt;&lt;span&gt; Q;
&lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt; bfs()
{
    node a,next;
    a.x&lt;/span&gt;=n;  a.step=&lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
    Q.push(a);      &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;起点入队首&lt;/span&gt;
    &lt;span&gt;while&lt;/span&gt;(Q.size()) &lt;span&gt;//&lt;/span&gt;&lt;span&gt;队列非空&lt;/span&gt;
&lt;span&gt;    {
        a&lt;/span&gt;=Q.front();&lt;span&gt;//&lt;/span&gt;&lt;span&gt;取队首元素
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;cout &amp;lt;&amp;lt; a.x &amp;lt;&amp;lt; &quot; &quot;;&lt;/span&gt;
&lt;span&gt;        Q.pop();
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(a.x==k)              &lt;span&gt;//&lt;/span&gt;&lt;span&gt;满足条件结束&lt;/span&gt;
            &lt;span&gt;return&lt;/span&gt;&lt;span&gt; a.step;
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; i=&lt;span&gt;0&lt;/span&gt;;i&amp;lt;&lt;span&gt;3&lt;/span&gt;;i++&lt;span&gt;)
        {
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;            if((a.x&amp;lt;=k/2&amp;amp;&amp;amp;i!=2&amp;amp;&amp;amp;a.x!=0)||(a.x&amp;lt;n/2)||a.x&amp;lt;0)&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;不剪枝会RE(no)受了网上的误导
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;                continue;&lt;/span&gt;
            &lt;span&gt;if&lt;/span&gt;(i==&lt;span&gt;0&lt;/span&gt;)            &lt;span&gt;//&lt;/span&gt;&lt;span&gt;三种状态转移&lt;/span&gt;
                next.x=a.x-&lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;(i==&lt;span&gt;1&lt;/span&gt;&lt;span&gt;)
                next.x&lt;/span&gt;=a.x+&lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;(i==&lt;span&gt;2&lt;/span&gt;&lt;span&gt;)
                next.x&lt;/span&gt;=a.x*&lt;span&gt;2&lt;/span&gt;&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(next.x&amp;gt;=&lt;span&gt;0&lt;/span&gt;&amp;amp;&amp;amp;next.x&amp;lt;=&lt;span&gt;100000&lt;/span&gt;&amp;amp;&amp;amp;vis[next.x]==&lt;span&gt;0&lt;/span&gt;)&lt;span&gt;//&lt;/span&gt;&lt;span&gt;满足条件且未被访问&lt;/span&gt;
&lt;span&gt;            {
                next.step&lt;/span&gt;=a.step+&lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
                Q.push(next);
            }
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(next.x&amp;gt;=&lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
                vis[next.x]&lt;/span&gt;=&lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
        }
    }
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
}
&lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt; main()
{
    &lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt; ans;
    cin &lt;/span&gt;&amp;gt;&amp;gt; n &amp;gt;&amp;gt;&lt;span&gt; k;
    memset(vis,&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;,&lt;span&gt;sizeof&lt;/span&gt;&lt;span&gt;(vis));
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(k&amp;lt;=&lt;span&gt;n)
        ans&lt;/span&gt;=n-&lt;span&gt;k;
    &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;
        ans&lt;/span&gt;=&lt;span&gt;bfs();
    cout &lt;/span&gt;&amp;lt;&amp;lt; ans &amp;lt;&amp;lt;&lt;span&gt; endl;
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
</description>
<pubDate>Wed, 14 Feb 2018 03:24:00 +0000</pubDate>
<dc:creator>Kampfen</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/Cloud-king/p/8430235.html</dc:identifier>
</item>
</channel>
</rss>