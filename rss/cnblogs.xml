<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>Webpack打包构建太慢了？试试几个方法 - -渔人码头-</title>
<link>http://www.cnblogs.com/imwtr/p/7801973.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/imwtr/p/7801973.html</guid>
<description>&lt;blockquote readability=&quot;11&quot;&gt;
&lt;p&gt;Webpack是个很流行的打包工具，但其打包速度却一直被吐槽着&lt;/p&gt;
&lt;p&gt;如果不用上一些打包的优化建议，单单打包两三个文件就能花上好几秒，放上几十个入口文件依赖几百上千个包的话，几分钟十几分钟妥妥的&lt;/p&gt;
&lt;p&gt;本文整理了常见的一些方法，部分使用之后就看到了很大改善，部分没什么明显的变化，也可能是项目规模还不够大，先记录一下方法也好&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;&lt;span&gt;一、使用监听模式或热更新热替换&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;webpack支持监听模式，此时需要重新编译时就可以进行增量构建，增量构建是很快的，基本不到一秒或几秒之内就能重新编译好&lt;/p&gt;
&lt;p&gt;注意区分一下开发环境和线上环境，开发环境启用热更新替换&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;44&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 开发环境设置本地服务器，实现热更新&lt;/span&gt;
&lt;span&gt;    devServer: {
        contentBase: path.resolve(__dirname, &lt;/span&gt;'static'&lt;span&gt;),
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 提供给外部访问&lt;/span&gt;
        host: '0.0.0.0'&lt;span&gt;,
        port: &lt;/span&gt;8388&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 允许开发服务器访问本地服务器的包JSON文件，防止跨域&lt;/span&gt;
&lt;span&gt;        headers: {
            &lt;/span&gt;'Access-Control-Allow-Origin': '*'&lt;span&gt;
        },
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 设置热替换&lt;/span&gt;
        hot: &lt;span&gt;true&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 设置页面引入&lt;/span&gt;
        inline: &lt;span&gt;true&lt;/span&gt;&lt;span&gt;
    },

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 文件输出配置&lt;/span&gt;
&lt;span&gt;    output: {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 设置路径，防止访问本地服务器相关资源时，被开发服务器认为是相对其的路径&lt;/span&gt;
        publicPath: 'http://localhost:8188/dist/js/'&lt;span&gt;,
    },


&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 插件配置&lt;/span&gt;
&lt;span&gt;    plugins: [
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 热更新替换&lt;/span&gt;
        &lt;span&gt;new&lt;/span&gt;&lt;span&gt; webpack.HotModuleReplacementPlugin()
    ]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;线上环境的编译，加个 &lt;span&gt;--watch&lt;/span&gt; 参数就可以了&lt;/p&gt;

&lt;h2&gt;&lt;span&gt;二、开发环境不做无意义的操作&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;很多配置，在开发阶段是不需要去做的，我们可以区分出开发和线上的两套配置，这样在需要上线的时候再全量编译即可&lt;/p&gt;
&lt;p&gt;比如说 代码压缩、目录内容清理、计算文件hash、提取CSS文件等&lt;/p&gt;

&lt;h2&gt;&lt;span&gt;三、选择一个合适的devtool属性值&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;配置devtool可以支持使用&lt;span&gt;sourceMap&lt;/span&gt;，但有些是耗时严重的，这个得多试试&lt;/p&gt;

&lt;h2&gt;&lt;span&gt;四、代码压缩用ParallelUglifyPlugin代替自带的 UglifyJsPlugin插件&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;自带的JS压缩插件是单线程执行的，而&lt;span&gt;&lt;span&gt;&lt;a href=&quot;https://github.com/gdborton/webpack-parallel-uglify-plugin&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;webpack-parallel-uglify-plugin&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;可以并行的执行，在我的小demo中使用后，速度直接从25s变成了14s&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
      &lt;span&gt;new&lt;/span&gt;&lt;span&gt; webpack.optimize.UglifyJsPlugin({
            sourceMap: &lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;,
            compress: {
                warnings: &lt;/span&gt;&lt;span&gt;false&lt;/span&gt;&lt;span&gt;
            }
        }),



ParallelUglifyPlugin &lt;/span&gt;= require('webpack-parallel-uglify-plugin'&lt;span&gt;)

&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; ParallelUglifyPlugin({
           cacheDir: &lt;/span&gt;'.cache/'&lt;span&gt;,
           uglifyJS:{
             output: {
               comments: &lt;/span&gt;&lt;span&gt;false&lt;/span&gt;&lt;span&gt;
             },
             compress: {
               warnings: &lt;/span&gt;&lt;span&gt;false&lt;/span&gt;&lt;span&gt;
             }
           }
         }),&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;&lt;span&gt;五、css-loader使用0.15.0以下的版本&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;听闻这个版本以上的速度会慢许多，不过在我的小demo中还没看到明显变化&lt;/p&gt;

&lt;h2&gt;&lt;span&gt;六、使用fast-sass-loader代替sass-loader&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;a href=&quot;https://github.com/yibn2008/fast-sass-loader&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;fast-sass-loader&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;可以并行地处理sass,在提交构建之前会先组织好代码，速度也会快一些&lt;/p&gt;

&lt;h2&gt;&lt;span&gt;七、babel-loader开启缓存&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;babel-loader在执行的时候，可能会产生一些运行期间重复的公共文件，造成代码体积大冗余，同时也会减慢编译效率&lt;/p&gt;
&lt;p&gt;可以加上&lt;span&gt;cacheDirectory&lt;/span&gt;参数或使用 &lt;span&gt;transform-runtime &lt;/span&gt;插件试试&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; webpack.config.js&lt;/span&gt;
&lt;span&gt;use: [{
                loader: &lt;/span&gt;'babel-loader'&lt;span&gt;,
                options: {
                    cacheDirectory: &lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;
                }]


&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; .bablerc&lt;/span&gt;
&lt;span&gt;{
    &lt;/span&gt;&quot;presets&quot;&lt;span&gt;: [
        &lt;/span&gt;&quot;env&quot;&lt;span&gt;,
        &lt;/span&gt;&quot;react&quot;&lt;span&gt;
    ],
    &lt;/span&gt;&quot;plugins&quot;: [&quot;transform-runtime&quot;&lt;span&gt;]
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;&lt;span&gt;八、不需要打包编译的插件库换成全局&amp;lt;script&amp;gt;标签引入的方式&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;比如jQuery插件，react, react-dom等，代码量是很多的，打包起来可能会很耗时&lt;/p&gt;
&lt;p&gt;可以直接用标签引入，然后在webpack配置里使用 &lt;span&gt;expose-loader&lt;/span&gt;  或 &lt;span&gt;externals&lt;/span&gt; 或 &lt;span&gt;ProvidePlugin&lt;/span&gt;  提供给模块内部使用相应的变量&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; @1&lt;/span&gt;
&lt;span&gt;use: [{
                loader: &lt;/span&gt;'expose-loader'&lt;span&gt;,
                options: &lt;/span&gt;'$'&lt;span&gt;
            }, {
                loader: &lt;/span&gt;'expose-loader'&lt;span&gt;,
                options: &lt;/span&gt;'jQuery'&lt;span&gt;
            }]


&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; @2&lt;/span&gt;
&lt;span&gt;externals: {
        jquery: &lt;/span&gt;'jQuery'&lt;span&gt;
    },


&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; @3&lt;/span&gt;
        &lt;span&gt;new&lt;/span&gt;&lt;span&gt; webpack.ProvidePlugin({
            $: &lt;/span&gt;'jquery'&lt;span&gt;,
            jQuery: &lt;/span&gt;'jquery'&lt;span&gt;,
            &lt;/span&gt;'window.jQuery': 'jquery'&lt;span&gt;
        }),&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;&lt;span&gt;九、使用 DllPlugin 和 DllReferencePlugin &lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;这种方式其实和externals是类似的，主要用于有些模块没有可以在&amp;lt;script&amp;gt;标签中引入的资源（纯npm包）&lt;/p&gt;
&lt;p&gt;Dll是动态链接库的意思，实际上就是将这些npm打包生成一个JSON文件，这个文件里包含了npm包的路径对应信息&lt;/p&gt;
&lt;p&gt;这两个插件要一起用&lt;/p&gt;
&lt;p&gt;首先，新建一个&lt;span&gt;dll.config.js&lt;/span&gt;配置文件，先用webpack来打包这个文件&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;49&quot;&gt;
&lt;pre&gt;
const webpack = require('webpack'&lt;span&gt;);
const path &lt;/span&gt;= require('path'&lt;span&gt;);

module.exports &lt;/span&gt;=&lt;span&gt; {
    output: {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 将会生成./ddl/lib.js文件&lt;/span&gt;
        path: path.resolve(__dirname, 'ddl'&lt;span&gt;),
        filename: &lt;/span&gt;'[name].js'&lt;span&gt;,
        library: &lt;/span&gt;'[name]'&lt;span&gt;,
    },
    entry: {
        &lt;/span&gt;&quot;lib&quot;&lt;span&gt;: [
            &lt;/span&gt;'react'&lt;span&gt;,
            &lt;/span&gt;'react-dom'&lt;span&gt;,
            &lt;/span&gt;'jquery'
            &lt;span&gt;//&lt;/span&gt;&lt;span&gt; ...其它库&lt;/span&gt;
&lt;span&gt;        ],
    },
    plugins: [
        &lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; webpack.DllPlugin({
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 生成的映射关系文件&lt;/span&gt;
            path: 'manifest.json'&lt;span&gt;,
            name: &lt;/span&gt;'[name]'&lt;span&gt;,
            context: __dirname,
        }),
    ],
};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/688270/201711/688270-20171107224022778-1120250935.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;在&lt;span&gt;manifest.json&lt;/span&gt;文件中就是相应的包对应的信息&lt;/p&gt;
&lt;p&gt;然后在我们的项目配置文件中配置&lt;span&gt;DllReferencePlugin&lt;/span&gt; 使用这个清单文件&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 插件配置&lt;/span&gt;
&lt;span&gt;    plugins: [
        &lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; webpack.DllReferencePlugin({
            context: __dirname,
            manifest: require(&lt;/span&gt;'./manifest.json'&lt;span&gt;)
        }),&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;&lt;span&gt;十、提取公共代码&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;使用CommonsChunkPlugin提取公共的模块，可以减少文件体积，也有助于浏览器层的文件缓存，还是比较推荐的&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;44&quot;&gt;
&lt;pre&gt;
 &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 提取公共模块文件&lt;/span&gt;
        &lt;span&gt;new&lt;/span&gt;&lt;span&gt; webpack.optimize.CommonsChunkPlugin({
            chunks: [&lt;/span&gt;'home', 'detail'&lt;span&gt;],
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 开发环境下需要使用热更新替换，而此时common用chunkhash会出错，可以直接不用hash&lt;/span&gt;
            filename: '[name].js' + (isProduction ? '?[chunkhash:8]' : ''&lt;span&gt;),
            name: &lt;/span&gt;'common'&lt;span&gt;
        }),




&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 切合公共模块的提取规则，有时后你需要明确指定默认放到公共文件的模块&lt;/span&gt;&lt;span&gt;
//&lt;/span&gt;&lt;span&gt; 文件入口配置&lt;/span&gt;
&lt;span&gt;    entry: {
        home: &lt;/span&gt;'./src/js/home'&lt;span&gt;,
        detail: &lt;/span&gt;'./src/js/detail'&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 提取jquery入公共文件&lt;/span&gt;
        common: ['jquery', 'react', 'react-dom'&lt;span&gt;]
    },&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;&lt;span&gt;十一、使用HappyPack来加速构建&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;a href=&quot;https://github.com/amireh/happypack&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;HappyPack&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;会采用多进程去打包构建，使用方式还是蛮简单的，但并不是支持所有的loader&lt;/p&gt;
&lt;p&gt;首先引入，定义一下这个插件所开启的线程，推荐是四个，其实也可以直接使用默认的就行了&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
HappyPack = require('happypack'&lt;span&gt;),
    os &lt;/span&gt;= require('os'&lt;span&gt;),
    happyThreadPool &lt;/span&gt;= HappyPack.ThreadPool({ size: os.cpus().length });
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后在module的规则里改动一下，引入它，其中 &lt;span&gt;id&lt;/span&gt;是一个标识符&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;{
            test: &lt;/span&gt;/\.jsx?$/&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 编译js或jsx文件，使用babel-loader转换es6为es5&lt;/span&gt;
            exclude: /node_modules/&lt;span&gt;,
            loader: &lt;/span&gt;'HappyPack/loader?id=js'
            &lt;span&gt;//&lt;/span&gt;&lt;span&gt; use: [{&lt;/span&gt;
            &lt;span&gt;//&lt;/span&gt;&lt;span&gt;     loader: 'babel-loader',&lt;/span&gt;
            &lt;span&gt;//&lt;/span&gt;&lt;span&gt;     options: {&lt;/span&gt;

            &lt;span&gt;//&lt;/span&gt;&lt;span&gt;     }&lt;/span&gt;
            &lt;span&gt;//&lt;/span&gt;&lt;span&gt; }]&lt;/span&gt;
        }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后我们调用插件，设置匹配的id，然后相关的配置可以直接把use：的规则部分套在loaders上&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;new&lt;/span&gt;&lt;span&gt; HappyPack({
            id: &lt;/span&gt;'js'&lt;span&gt;,
            loaders: [{
                loader: &lt;/span&gt;'babel-loader'&lt;span&gt;,
                options: {
                    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; cacheDirectory: true&lt;/span&gt;
&lt;span&gt;                }
            }]
        }),&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;要注意的第一点是&lt;/strong&gt;，它对&lt;span&gt;file-loader&lt;/span&gt;和&lt;span&gt;url-loader&lt;/span&gt;支持不好，所以这两个loader就不需要换成happypack了，其他loader可以类似地换一下&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;要注意的第二点是&lt;/strong&gt;，使用&lt;span&gt;ExtractTextWebpackPlugin&lt;/span&gt;提取css文件也不是完全就能转换过来，所以需要小小的改动一下，比如&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;47&quot;&gt;
&lt;pre&gt;
&lt;span&gt;module: {
        rules: [{
            test: &lt;/span&gt;/\.css$/&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; loader: 'HappyPack/loader?id=css'&lt;/span&gt;
            &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 提取CSS文件&lt;/span&gt;
&lt;span&gt;            use: cssExtractor.extract({
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 如果配置成不提取，则此类文件使用style-loader插入到&amp;lt;head&amp;gt;标签中&lt;/span&gt;
                fallback: 'style-loader'&lt;span&gt;,
                use: &lt;/span&gt;'HappyPack/loader?id=css'
                &lt;span&gt;//&lt;/span&gt;&lt;span&gt; use: [{&lt;/span&gt;
                &lt;span&gt;//&lt;/span&gt;&lt;span&gt;         loader: 'css-loader',&lt;/span&gt;
                &lt;span&gt;//&lt;/span&gt;&lt;span&gt;         options: {&lt;/span&gt;
                &lt;span&gt;//&lt;/span&gt;&lt;span&gt;             // url: false,&lt;/span&gt;
                &lt;span&gt;//&lt;/span&gt;&lt;span&gt;             minimize: true&lt;/span&gt;
                &lt;span&gt;//&lt;/span&gt;&lt;span&gt;         }&lt;/span&gt;
                &lt;span&gt;//&lt;/span&gt;&lt;span&gt;     },&lt;/span&gt;
                &lt;span&gt;//&lt;/span&gt;&lt;span&gt;     // 'postcss-loader'&lt;/span&gt;
                &lt;span&gt;//&lt;/span&gt;&lt;span&gt; ]&lt;/span&gt;
&lt;span&gt;            })
        }, {
            test: &lt;/span&gt;/\.scss$/&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; loader: 'HappyPack/loader?id=scss'&lt;/span&gt;
            &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 编译Sass文件 提取CSS文件&lt;/span&gt;
&lt;span&gt;            use: sassExtractor.extract({
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 如果配置成不提取，则此类文件使用style-loader插入到&amp;lt;head&amp;gt;标签中&lt;/span&gt;
                fallback: 'style-loader'&lt;span&gt;,
                use: &lt;/span&gt;'HappyPack/loader?id=scss'
                &lt;span&gt;//&lt;/span&gt;&lt;span&gt; use: [&lt;/span&gt;
                &lt;span&gt;//&lt;/span&gt;&lt;span&gt;     'css-loader',&lt;/span&gt;
                &lt;span&gt;//&lt;/span&gt;&lt;span&gt;     // 'postcss-loader',&lt;/span&gt;
                &lt;span&gt;//&lt;/span&gt;&lt;span&gt;     {&lt;/span&gt;
                &lt;span&gt;//&lt;/span&gt;&lt;span&gt;         loader: 'sass-loader',&lt;/span&gt;
                &lt;span&gt;//&lt;/span&gt;&lt;span&gt;         options: {&lt;/span&gt;
                &lt;span&gt;//&lt;/span&gt;&lt;span&gt;             sourceMap: true,&lt;/span&gt;
                &lt;span&gt;//&lt;/span&gt;&lt;span&gt;             outputStyle: 'compressed'&lt;/span&gt;
                &lt;span&gt;//&lt;/span&gt;&lt;span&gt;         }&lt;/span&gt;
                &lt;span&gt;//&lt;/span&gt;&lt;span&gt;     }&lt;/span&gt;
                &lt;span&gt;//&lt;/span&gt;&lt;span&gt; ]&lt;/span&gt;
&lt;span&gt;            })
        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;因为它是直接函数调用的，我们就放到里层的use规则就行了，然后配置插件即可&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
&lt;span&gt;plugins: [
        &lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; HappyPack({
            id: &lt;/span&gt;'css'&lt;span&gt;,
            loaders: [{
                loader: &lt;/span&gt;'css-loader'&lt;span&gt;,
                options: {
                    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; url: false,&lt;/span&gt;
                    minimize: &lt;span&gt;true&lt;/span&gt;&lt;span&gt;
                }
            }]
        }),
        &lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; HappyPack({
            id: &lt;/span&gt;'scss'&lt;span&gt;,
            loaders: [{
                &lt;/span&gt;'loader': 'css-loader'&lt;span&gt;
            }, {
                loader: &lt;/span&gt;'fast-sass-loader'&lt;span&gt;,
                options: {
                    sourceMap: &lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;,
                    outputStyle: &lt;/span&gt;'compressed'&lt;span&gt;
                }
            }]
        }),&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;&lt;span&gt;十二、优化构建时的搜索路径&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;在webpack打包时，会有各种各样的路径要去查询搜索，我们可以加上一些配置，让它搜索地更快&lt;/p&gt;
&lt;p&gt;比如说，方便改成绝对路径的模块路径就改一下，以纯模块名来引入的可以加上一些目录路径&lt;/p&gt;
&lt;p&gt;还可以善于用下&lt;span&gt;resolve&lt;/span&gt; &lt;span&gt;alias&lt;/span&gt;别名 这个字段来配置&lt;/p&gt;
&lt;p&gt;还有&lt;span&gt;exclude&lt;/span&gt;等的配置，避免多余查找的文件，比如使用babel别忘了剔除不需要遍历的&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;{
            test: &lt;/span&gt;/\.jsx?$/&lt;span&gt;,
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 编译js或jsx文件，使用babel-loader转换es6为es5&lt;/span&gt;
            exclude: /node_modules/&lt;span&gt;,
             use: [{
                 loader: &lt;/span&gt;'babel-loader'&lt;span&gt;,
                 options: {

                 }
             }]
        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;&lt;span&gt;十三、（导出编译JSON文件）理一下打包构建涉及的模块，分析看有哪些包是不需要打包的，只打包需要的模块&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;检查一下代码，看看是不是有不需要引入的模块出现在代码里&lt;/p&gt;
&lt;p&gt;webpack编译时加上参数 &lt;span&gt;--json &amp;gt; stat.json&lt;/span&gt; 后，可以上传到 &lt;span&gt;&lt;span&gt;&lt;a href=&quot;http://webpack.github.io/analyse/&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;webpack-analyse&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt; 、&lt;span&gt;&lt;a href=&quot;https://chrisbateman.github.io/webpack-visualizer/&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;webpack-visualizer&lt;/span&gt;&lt;/a&gt;&lt;/span&gt; 等分析站点上，看看打包的模块信息&lt;/p&gt;

&lt;h2&gt;&lt;span&gt;十四、使用ModuleConcatenationPlugin插件来加快JS执行速度&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;这是webpack3的新特性（&lt;span&gt;Scope Hoisting&lt;/span&gt;），其实是借鉴了Rollup打包工具来的，它将一些有联系的模块，放到一个闭包函数里面去，通过减少闭包函数数量从而加快JS的执行速度&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
 &lt;span&gt;new&lt;/span&gt;&lt;span&gt; webpack.optimize.ModuleConcatenationPlugin({

        })&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;&lt;span&gt;十五、使用noParse&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;webpack打包的时候，有时不需要解析某些模块的依赖（这些模块并没有依赖，或者并根本就没有模块化），我们可以直接加上这个参数，直接跳过这种解析&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;module: {
    noParse: &lt;/span&gt;/node_modules\/(jquey\.js)/&lt;span&gt;
  }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;&lt;span&gt;十六、使用异步的模块加载&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;这个算是可以减小模块的体积吧，在一定程度上也是为用户考虑的，使用&lt;span&gt;require.ensure&lt;/span&gt;来设置哪些模块需要异步加载，webpack会将它打包到一个独立的chunk中，&lt;/p&gt;
&lt;p&gt;在某个时刻（比如用户点击了查看）才异步地加载这个模块来执行&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
$('.bg-input').click(() =&amp;gt;&lt;span&gt; {
    console.log(&lt;/span&gt;'clicked, loading async.js'&lt;span&gt;)

    require.ensure([], require &lt;/span&gt;=&amp;gt;&lt;span&gt; {

        require(&lt;/span&gt;'./components/async2'&lt;span&gt;).log();
        require(&lt;/span&gt;'./components/async1'&lt;span&gt;).log();
        console.log(&lt;/span&gt;'loading async.js done'&lt;span&gt;);
    });
});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;&lt;span&gt;十七、以模块化来引入&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;有些模块是可以以模块化来引入的，就是说可以只引入其中的一部分，比如说lodash&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 原来的引入方式&lt;/span&gt;
 import {debounce} from 'lodash'&lt;span&gt;;

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;按模块化的引入方式&lt;/span&gt;
import debounce from 'lodash/debounce';
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt; 主要是整理过来的，试用了几个方法，首次编译的速度可以从之前半分多钟减小到十秒左右了，当然，开启了热更新替换后简直美不可言&lt;/p&gt;
&lt;p&gt;当然还有很多方法没整理出，这些方法是有使用场景的，并不是每个都需要用，需要在自己的项目中尝试，结合配置它的复杂性和带来的效应来权衡。&lt;/p&gt;
</description>
<pubDate>Tue, 07 Nov 2017 15:37:00 +0000</pubDate>
<dc:creator>-渔人码头-</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/imwtr/p/7801973.html</dc:identifier>
</item>
<item>
<title>密码学那些事———SHA-512及其C++实现 - coding==1？</title>
<link>http://www.cnblogs.com/jake9402/p/7801969.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/jake9402/p/7801969.html</guid>
<description>&lt;p&gt;&lt;span&gt;转载请注明出处&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;一、引言&lt;/h3&gt;
&lt;p&gt;　　相信大家对于哈希压缩加密算法应该不陌生，在我们用微信或者支付宝接口的时候经常会遇到用这类算法加密，以验证数据的完整性。可以说这类算法无处不在，那这些算法的原理是什么呢？&lt;/p&gt;
&lt;p&gt;今天我们以SHA-512为例来说明。&lt;/p&gt;
&lt;h3&gt;二、简单介绍&lt;/h3&gt;
&lt;p&gt;　　SHA (Secure Hash Algorithm，译作&lt;a href=&quot;https://baike.baidu.com/item/%E5%AE%89%E5%85%A8%E6%95%A3%E5%88%97%E7%AE%97%E6%B3%95&quot; target=&quot;_blank&quot;&gt;安全散列算法&lt;/a&gt;) 是美国国家安全局 (NSA) 设计，美国国家标准与技术研究院 (NIST) 发布的一系列密码散列函数。我们将要介绍的SHA-512就是SHA2系列的一种，到目前为止，SHA系列已经发展到SHA3，&lt;/p&gt;
&lt;p&gt;其中SHA1早在2005年就被证明是不安全的，已经有了破解的办法，谷歌也在很多年前就不再使用SHA1，当前主流的是SHA2。&lt;/p&gt;
&lt;p&gt;下图是一些简单的介绍。（转自维基）&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1201753/201711/1201753-20171107223115403-1144649886.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;公式:&lt;/h3&gt;
&lt;h3&gt;h = Hash（message）&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Hash&lt;/strong&gt;:哈希函数&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;message&lt;/strong&gt;:不超过最大消息长度的任意长度消息&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;h&lt;/strong&gt;: 相应位数的密文&lt;/p&gt;
&lt;p&gt;安全哈希算法是一种超损压缩：将一个非常大的数据压缩到固定位长的数据，因而这是一个不可逆的算法。&lt;/p&gt;
&lt;p&gt;为什么不可逆?&lt;/p&gt;
&lt;p&gt;　　在不知算法具体流程的情况下，我们来考虑类似的问题。&lt;/p&gt;
&lt;p&gt;　　123456789abc  =&amp;gt; 123 请问给你123，你怎么推出原字符是什么？&lt;/p&gt;
&lt;p&gt;　　同时你会说一个函数那我们找它逆函数，再映射回去不就好了？那么好我告诉你我们的原函数是:截断后面的bits,只留下开头的3个。那么你现在可以帮我找到原消息了吗？&lt;/p&gt;
&lt;p&gt;　　显然这样有2^n种可能。因而我们认为安全哈希函数是不可逆的。这也就可以保证我们的安全行了。&lt;/p&gt;

&lt;h3&gt;三、算法描述&lt;/h3&gt;
&lt;p&gt;　　&lt;strong&gt;一、处理原文&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　　　1、消息bits（二进制）化，将消息化为二进制（不一定直接一次性转为二进制，在后面我贴的代码里是动态转换的）。&lt;/p&gt;
&lt;p&gt;　　　　2、填充字长：&lt;/p&gt;
&lt;p&gt;　　　　　　（在我们后面的处理过程中，都是以1024bits（512B）为一次操作的最小单位的，因而消息得满足512B对齐）&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;896&lt;/span&gt;&lt;/strong&gt; &lt;strong&gt;= &lt;span&gt;length(message)%1024&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　　　&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;　　　　 　　 &lt;/strong&gt; 也就是&lt;/span&gt;满足填充后消息长度（bits)除1024取余数等于896（1024-128=896）&lt;/p&gt;
&lt;p&gt;　　　　3、填充&lt;/p&gt;
&lt;p&gt;　　　　　　　第一位填充1，其他位填充0,满足除余为896后，还剩下128bits.这个用于存消息长度。（SHA512中为128位,因而此算法最长消息为2^128-1)&lt;/p&gt;
&lt;p&gt;　　&lt;strong&gt;二、设置初始值&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　　　&lt;/strong&gt;SHA512算法的结果长度为512位，按每组64位分成8组，这8组结果是由8个初始值A,B,C,D,E,F,G,H经过不断演变得到的。这8个初始值是:&lt;/p&gt;
&lt;p&gt;　　　　    A = 0x6a09e667f3bcc908ULL;&lt;br/&gt;    　　　　B = 0xbb67ae8584caa73bULL;&lt;br/&gt;   　　　　 C = 0x3c6ef372fe94f82bULL;&lt;br/&gt;   　　　　 D = 0xa54ff53a5f1d36f1ULL;&lt;br/&gt;   　　　　 E = 0x510e527fade682d1ULL;&lt;br/&gt;   　　　　 F = 0x9b05688c2b3e6c1fULL;&lt;br/&gt;   　　　　 G = 0x1f83d9abfb41bd6bULL;&lt;br/&gt;   　　　　 H = 0x5be0cd19137e2179ULL;&lt;/p&gt;
&lt;p&gt;　　&lt;strong&gt;三、循环加工&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　　　&lt;/strong&gt;（这就是算法最核心的地方,我们形象的把它称为哈希工厂)&lt;/p&gt;
&lt;p&gt;　　　　　下面我们看图说话&lt;/p&gt;
&lt;p&gt;　　　　 &lt;img src=&quot;http://images2017.cnblogs.com/blog/1201753/201711/1201753-20171107231325419-1028415318.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　图中A-H哈希的8个分组，每次循环从旧的中产生新的，一共得循环多少次呢？&lt;/p&gt;
&lt;p&gt;　　　　&lt;span&gt;&lt;strong&gt;&lt;span&gt;主循环次数&lt;/span&gt; = 消息长度/1024&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　　　&lt;span&gt;&lt;strong&gt;每次主循环中又保存80次子循环&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;　　　　&lt;/strong&gt;&lt;span&gt;上图就是表达了单次子循环的流程&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;　　　　&lt;strong&gt;主要操作&lt;/strong&gt;：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;　　　　　　　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/1201753/201711/1201753-20171107231857247-1516136813.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　　　　　　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/1201753/201711/1201753-20171107231940575-429187946.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　　　　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/1201753/201711/1201753-20171107231950013-608594124.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　　　　　&lt;img src=&quot;http://images2017.cnblogs.com/blog/1201753/201711/1201753-20171107232021059-1083169241.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　　　　　&amp;gt;&amp;gt;&amp;gt;表示循环右移&lt;/p&gt;
&lt;p&gt;　　　　　　　　&lt;span&gt;田：&lt;span&gt;加法&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;mwe-math-element&quot;&gt;&lt;span class=&quot;mwe-math-mathml-inline mwe-math-mathml-a11y&quot;&gt;⊞ {\displaystyle \color {red}\boxplus } &lt;img class=&quot;mwe-math-fallback-image-inline&quot; src=&quot;https://wikimedia.org/api/rest_v1/media/math/render/svg/234b9f9d061d7f499f6ba215b2cec330613cd332&quot; alt=&quot;\color {red}\boxplus &quot;/&gt;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;mwe-math-element&quot;&gt;&lt;span class=&quot;mwe-math-mathml-inline mwe-math-mathml-a11y&quot;&gt;⊞ {\displaystyle \color {red}\boxplus } &lt;img class=&quot;mwe-math-fallback-image-inline&quot; src=&quot;https://wikimedia.org/api/rest_v1/media/math/render/svg/234b9f9d061d7f499f6ba215b2cec330613cd332&quot; alt=&quot;\color {red}\boxplus &quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　　　　　　　对应C语言表达式子:&lt;/p&gt;
&lt;p&gt;　　　　　　　　　　#define Ch( x, y, z )     (z ^ (x &amp;amp; (y ^ z)))&lt;br/&gt;　　　　　　　　　　#define Maj(x, y, z )     (((x | y) &amp;amp; z) | (x &amp;amp; y))&lt;br/&gt;　　　　　　　　　　#define S( x, n )         ROR64( x, n )&lt;br/&gt;　　　　　　　　　　#define R( x, n )         (((x)&amp;amp;0xFFFFFFFFFFFFFFFFULL)&amp;gt;&amp;gt;((unsigned long long)n))&lt;br/&gt;　　　　　　　　　　#define Sigma0( x )       (S(x, 28) ^ S(x, 34) ^ S(x, 39))&lt;br/&gt;　　　　　　　　　　#define Sigma1( x )       (S(x, 14) ^ S(x, 18) ^ S(x, 41))&lt;br/&gt;　　　　　　　　　　#define Gamma0( x )       (S(x, 1) ^ S(x, 8) ^ R(x, 7))&lt;br/&gt;　　　　　　　　　　#define Gamma1( x )       (S(x, 19) ^ S(x, 61) ^ R(x, 6))&lt;/p&gt;
&lt;p&gt;　　　　　　W，K是两个常量&lt;/p&gt;
&lt;p&gt;　　　　　　其中W是计算出的，具体计算看代码。&lt;/p&gt;
&lt;p&gt;　　　　　　K：预先给出的80个常量&lt;/p&gt;
&lt;p&gt;　　　　　　相信大家有了上图后已经明白了核心操作。要是还不明白建议根据附录中的代码进一步理解。　　　　&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　　　四、拼接结果&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　　　　　&lt;/strong&gt;将最后的8个常量一次拼接则得到结果。&lt;/p&gt;

&lt;p&gt;C语言实现（C++)&lt;/p&gt;
&lt;p&gt;SHA512.h&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;252&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#ifndef SHA512_H
&lt;/span&gt;&lt;span&gt;#define&lt;/span&gt; SHA512_H

&lt;span&gt;/////////////////////////////////////////////////////////&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; SHA512_CB(control block)                             &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; SHA512_CB:SHA512控制块,包含算法运算过程中将用到的信息&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; count[2]:记录128位的数字长度（两个64位）             &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; state[8]:A-H八个初始常量(64bit)                      &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; buffer[128]:用于每次运算的1024bit                      &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;
&lt;span&gt;//&lt;/span&gt;                                                      &lt;span&gt;//
&lt;/span&gt;&lt;span&gt;/////////////////////////////////////////////////////////&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;
typedef &lt;span&gt;struct&lt;/span&gt;&lt;span&gt;
{
    unsigned &lt;/span&gt;&lt;span&gt;long&lt;/span&gt; &lt;span&gt;long&lt;/span&gt; count[&lt;span&gt;2&lt;/span&gt;&lt;span&gt;];
    unsigned &lt;/span&gt;&lt;span&gt;long&lt;/span&gt; &lt;span&gt;long&lt;/span&gt; state[&lt;span&gt;8&lt;/span&gt;&lt;span&gt;];
    unsigned &lt;/span&gt;&lt;span&gt;char&lt;/span&gt; buffer[&lt;span&gt;128&lt;/span&gt;&lt;span&gt;];
} SHA512_CB;

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 用于补齐的数,最多补128字节也就是1024bit&lt;/span&gt;
unsigned &lt;span&gt;char&lt;/span&gt; PADDING[] =&lt;span&gt; {
    &lt;/span&gt;&lt;span&gt;0x80&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;&lt;span&gt;,
};

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 每次子循环中用到的常量
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 后面加ULL表示long long&lt;/span&gt;
&lt;span&gt;static&lt;/span&gt; &lt;span&gt;const&lt;/span&gt; unsigned &lt;span&gt;long&lt;/span&gt; &lt;span&gt;long&lt;/span&gt; K[&lt;span&gt;80&lt;/span&gt;] =&lt;span&gt; {
    0x428a2f98d728ae22ULL, 0x7137449123ef65cdULL, 0xb5c0fbcfec4d3b2fULL, 0xe9b5dba58189dbbcULL,
    0x3956c25bf348b538ULL, 0x59f111f1b605d019ULL, 0x923f82a4af194f9bULL, 0xab1c5ed5da6d8118ULL,
    0xd807aa98a3030242ULL, 0x12835b0145706fbeULL, 0x243185be4ee4b28cULL, 0x550c7dc3d5ffb4e2ULL,
    0x72be5d74f27b896fULL, 0x80deb1fe3b1696b1ULL, 0x9bdc06a725c71235ULL, 0xc19bf174cf692694ULL,
    0xe49b69c19ef14ad2ULL, 0xefbe4786384f25e3ULL, 0x0fc19dc68b8cd5b5ULL, 0x240ca1cc77ac9c65ULL,
    0x2de92c6f592b0275ULL, 0x4a7484aa6ea6e483ULL, 0x5cb0a9dcbd41fbd4ULL, 0x76f988da831153b5ULL,
    0x983e5152ee66dfabULL, 0xa831c66d2db43210ULL, 0xb00327c898fb213fULL, 0xbf597fc7beef0ee4ULL,
    0xc6e00bf33da88fc2ULL, 0xd5a79147930aa725ULL, 0x06ca6351e003826fULL, 0x142929670a0e6e70ULL,
    0x27b70a8546d22ffcULL, 0x2e1b21385c26c926ULL, 0x4d2c6dfc5ac42aedULL, 0x53380d139d95b3dfULL,
    0x650a73548baf63deULL, 0x766a0abb3c77b2a8ULL, 0x81c2c92e47edaee6ULL, 0x92722c851482353bULL,
    0xa2bfe8a14cf10364ULL, 0xa81a664bbc423001ULL, 0xc24b8b70d0f89791ULL, 0xc76c51a30654be30ULL,
    0xd192e819d6ef5218ULL, 0xd69906245565a910ULL, 0xf40e35855771202aULL, 0x106aa07032bbd1b8ULL,
    0x19a4c116b8d2d0c8ULL, 0x1e376c085141ab53ULL, 0x2748774cdf8eeb99ULL, 0x34b0bcb5e19b48a8ULL,
    0x391c0cb3c5c95a63ULL, 0x4ed8aa4ae3418acbULL, 0x5b9cca4f7763e373ULL, 0x682e6ff3d6b2b8a3ULL,
    0x748f82ee5defb2fcULL, 0x78a5636f43172f60ULL, 0x84c87814a1f0ab72ULL, 0x8cc702081a6439ecULL,
    0x90befffa23631e28ULL, 0xa4506cebde82bde9ULL, 0xbef9a3f7b2c67915ULL, 0xc67178f2e372532bULL,
    0xca273eceea26619cULL, 0xd186b8c721c0c207ULL, 0xeada7dd6cde0eb1eULL, 0xf57d4f7fee6ed178ULL,
    0x06f067aa72176fbaULL, 0x0a637dc5a2c898a6ULL, 0x113f9804bef90daeULL, 0x1b710b35131c471bULL,
    0x28db77f523047d84ULL, 0x32caab7b40c72493ULL, 0x3c9ebe0a15c9bebcULL, 0x431d67c49c100d4cULL,
    0x4cc5d4becb3e42b6ULL, 0x597f299cfc657e2aULL, 0x5fcb6fab3ad6faecULL, 0x6c44198c4a475817ULL
};
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 初始化函数，初始化SHA_CB的各个值&lt;/span&gt;
&lt;span&gt;void&lt;/span&gt; SHA512Init(SHA512_CB *&lt;span&gt;context);

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 将数据加入&lt;/span&gt;
&lt;span&gt;void&lt;/span&gt; SHA512Update(SHA512_CB *context, unsigned &lt;span&gt;char&lt;/span&gt; *input, unsigned &lt;span&gt;long&lt;/span&gt; &lt;span&gt;long&lt;/span&gt;&lt;span&gt; inputlen);

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 处理完最后再调用，这个处理尾数&lt;/span&gt;
&lt;span&gt;void&lt;/span&gt; SHA512Final(SHA512_CB *context, unsigned &lt;span&gt;char&lt;/span&gt; digest[&lt;span&gt;32&lt;/span&gt;&lt;span&gt;]);

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 加密处理函数：Hash加密的核心工厂&lt;/span&gt;
&lt;span&gt;void&lt;/span&gt; SHA512Transform(unsigned &lt;span&gt;long&lt;/span&gt; &lt;span&gt;long&lt;/span&gt; state[&lt;span&gt;8&lt;/span&gt;], unsigned &lt;span&gt;char&lt;/span&gt; block[&lt;span&gt;128&lt;/span&gt;&lt;span&gt;]);

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 编码函数：将整型编码转为字符&lt;/span&gt;
&lt;span&gt;void&lt;/span&gt; SHA512Encode(unsigned &lt;span&gt;char&lt;/span&gt; *output, unsigned &lt;span&gt;long&lt;/span&gt; &lt;span&gt;long&lt;/span&gt; *input, unsigned &lt;span&gt;long&lt;/span&gt; &lt;span&gt;long&lt;/span&gt;&lt;span&gt; len);

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 解码函数:将字符数组保存的编码转为整型&lt;/span&gt;
&lt;span&gt;void&lt;/span&gt; SHA512Decode(unsigned &lt;span&gt;long&lt;/span&gt; &lt;span&gt;long&lt;/span&gt; *output, unsigned &lt;span&gt;char&lt;/span&gt; *input, unsigned &lt;span&gt;long&lt;/span&gt; &lt;span&gt;long&lt;/span&gt;&lt;span&gt; len);
&lt;/span&gt;&lt;span&gt;#endif&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;SHA512.c&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;177&quot;&gt;
&lt;pre&gt;
#include &amp;lt;memory.h&amp;gt;&lt;span&gt;
#include &lt;/span&gt;&amp;lt;&lt;span&gt;string&lt;/span&gt;.h&amp;gt;&lt;span&gt;
#include &lt;/span&gt;&amp;lt;stdio.h&amp;gt;&lt;span&gt;
#include &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;SHA512.h&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;



&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 循环右移(64位)&lt;/span&gt;
&lt;span&gt;#define&lt;/span&gt; ROR64( value, bits ) (((value) &amp;gt;&amp;gt; (bits)) | ((value) &amp;lt;&amp;lt; (64 - (bits))))

&lt;span&gt;//////////////////////////////////////////////////////
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;                                                    &lt;span&gt;//&lt;/span&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Ch,:Maj操作                                        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; S:循环右移    R:同2**128除余右移                    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Sigma0:Sigma0函数                                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Sigma1:Sigma2函数                                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Gamma0:Gamma0函数                                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Gamma1:Gamma1函数                                &lt;/span&gt;&lt;span&gt;//
&lt;/span&gt;&lt;span&gt;//////////////////////////////////////////////////////
&lt;/span&gt;
&lt;span&gt;#define&lt;/span&gt; Ch( x, y, z )     (z ^ (x &amp;amp; (y ^ z)))
&lt;span&gt;#define&lt;/span&gt; Maj(x, y, z )     (((x | y) &amp;amp; z) | (x &amp;amp; y))
&lt;span&gt;#define&lt;/span&gt; S( x, n )         ROR64( x, n )
&lt;span&gt;#define&lt;/span&gt; R( x, n )         (((x)&amp;amp;0xFFFFFFFFFFFFFFFFULL)&amp;gt;&amp;gt;((unsigned long long)n))
&lt;span&gt;#define&lt;/span&gt; Sigma0( x )       (S(x, 28) ^ S(x, 34) ^ S(x, 39))
&lt;span&gt;#define&lt;/span&gt; Sigma1( x )       (S(x, 14) ^ S(x, 18) ^ S(x, 41))
&lt;span&gt;#define&lt;/span&gt; Gamma0( x )       (S(x, 1) ^ S(x, 8) ^ R(x, 7))
&lt;span&gt;#define&lt;/span&gt; Gamma1( x )       (S(x, 19) ^ S(x, 61) ^ R(x, 6))

&lt;span&gt;#define&lt;/span&gt; Sha512Round( a, b, c, d, e, f, g, h, i )       \&lt;span&gt;
     t0 &lt;/span&gt;= h + Sigma1(e) + Ch(e, f, g) + K[i] +&lt;span&gt; W[i];   \
     t1 &lt;/span&gt;= Sigma0(a) +&lt;span&gt; Maj(a, b, c);                    \
     d &lt;/span&gt;+=&lt;span&gt; t0;                                          \
     h  &lt;/span&gt;= t0 +&lt;span&gt; t1;

&lt;/span&gt;&lt;span&gt;void&lt;/span&gt; SHA512Init(SHA512_CB *&lt;span&gt;context) {
    context&lt;/span&gt;-&amp;gt;count[&lt;span&gt;0&lt;/span&gt;] = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
    context&lt;/span&gt;-&amp;gt;count[&lt;span&gt;1&lt;/span&gt;] = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
    context&lt;/span&gt;-&amp;gt;state[&lt;span&gt;0&lt;/span&gt;] =&lt;span&gt; 0x6a09e667f3bcc908ULL;
    context&lt;/span&gt;-&amp;gt;state[&lt;span&gt;1&lt;/span&gt;] =&lt;span&gt; 0xbb67ae8584caa73bULL;
    context&lt;/span&gt;-&amp;gt;state[&lt;span&gt;2&lt;/span&gt;] =&lt;span&gt; 0x3c6ef372fe94f82bULL;
    context&lt;/span&gt;-&amp;gt;state[&lt;span&gt;3&lt;/span&gt;] =&lt;span&gt; 0xa54ff53a5f1d36f1ULL;
    context&lt;/span&gt;-&amp;gt;state[&lt;span&gt;4&lt;/span&gt;] =&lt;span&gt; 0x510e527fade682d1ULL;
    context&lt;/span&gt;-&amp;gt;state[&lt;span&gt;5&lt;/span&gt;] =&lt;span&gt; 0x9b05688c2b3e6c1fULL;
    context&lt;/span&gt;-&amp;gt;state[&lt;span&gt;6&lt;/span&gt;] =&lt;span&gt; 0x1f83d9abfb41bd6bULL;
    context&lt;/span&gt;-&amp;gt;state[&lt;span&gt;7&lt;/span&gt;] =&lt;span&gt; 0x5be0cd19137e2179ULL;
}

&lt;/span&gt;&lt;span&gt;void&lt;/span&gt; SHA512Update(SHA512_CB *context, unsigned &lt;span&gt;char&lt;/span&gt; *input, unsigned &lt;span&gt;long&lt;/span&gt; &lt;span&gt;long&lt;/span&gt;&lt;span&gt; inputlen) {
    unsigned &lt;/span&gt;&lt;span&gt;long&lt;/span&gt; &lt;span&gt;long&lt;/span&gt; index = &lt;span&gt;0&lt;/span&gt;, partlen = &lt;span&gt;0&lt;/span&gt;, i = &lt;span&gt;0&lt;/span&gt;; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; i记录input的当前位置（初始为0）&lt;/span&gt;
    index = (context-&amp;gt;count[&lt;span&gt;1&lt;/span&gt;] &amp;gt;&amp;gt; &lt;span&gt;3&lt;/span&gt;) &amp;amp; &lt;span&gt;0x7F&lt;/span&gt;;  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;index:总字长除127(11111111)取余后的余数&lt;/span&gt;
    partlen = &lt;span&gt;128&lt;/span&gt; - index;  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;partlen:同128相差的长度&lt;/span&gt;
    context-&amp;gt;count[&lt;span&gt;1&lt;/span&gt;] += inputlen &amp;lt;&amp;lt; &lt;span&gt;3&lt;/span&gt;;  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;更新count

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 统计字符的bit长度，如果小于说明类型溢出了(64bit)无法装下了
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 由于最后留下128bit填充字符长度，因而必须引入count[1]保存
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 64bit+64bit=128bit&lt;/span&gt;
    &lt;span&gt;if&lt;/span&gt; (context-&amp;gt;count[&lt;span&gt;1&lt;/span&gt;] &amp;lt; (inputlen &amp;lt;&amp;lt; &lt;span&gt;3&lt;/span&gt;&lt;span&gt;))
        context&lt;/span&gt;-&amp;gt;count[&lt;span&gt;0&lt;/span&gt;]++&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;右移动61位后就是count[0]应该记录的值。（左移3位，溢出的就是右移动61位的）&lt;/span&gt;
    context-&amp;gt;count[&lt;span&gt;0&lt;/span&gt;] += inputlen &amp;gt;&amp;gt; &lt;span&gt;61&lt;/span&gt;&lt;span&gt;;

    &lt;/span&gt;&lt;span&gt;/////////////////////////////////////////////////////////&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;
    &lt;span&gt;//&lt;/span&gt;                                                        &lt;span&gt;//&lt;/span&gt;
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;     如果此次更新的长度，大于原长度同128做差的值，    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;     .ie. 加上刚更新的长度满足了128Bytes(1024位)      &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;     因而可以进行一次加密循环                            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;
    &lt;span&gt;//&lt;/span&gt;                                                        &lt;span&gt;//
&lt;/span&gt;    &lt;span&gt;/////////////////////////////////////////////////////////&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;

    &lt;span&gt;if&lt;/span&gt; (inputlen &amp;gt;=&lt;span&gt; partlen)
    {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;将缺的partlen个字节数据加入缓冲区&lt;/span&gt;
        memcpy(&amp;amp;context-&amp;gt;&lt;span&gt;buffer[index], input, partlen);
        SHA512Transform(context&lt;/span&gt;-&amp;gt;state, context-&amp;gt;&lt;span&gt;buffer);

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 如果输入的字，还可以进行（还有整128字的）就继续进行一次加密循环&lt;/span&gt;

        &lt;span&gt;for&lt;/span&gt; (i = partlen; i + &lt;span&gt;128&lt;/span&gt; &amp;lt;= inputlen; i += &lt;span&gt;128&lt;/span&gt;&lt;span&gt;)
            SHA512Transform(context&lt;/span&gt;-&amp;gt;state, &amp;amp;&lt;span&gt;input[i]);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 将当前位置设为0&lt;/span&gt;
        index = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
    }
    &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;
    {
        i &lt;/span&gt;= &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
    }
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 重新设置buffer区（处理过的字被覆盖成新字）&lt;/span&gt;
    memcpy(&amp;amp;context-&amp;gt;buffer[index], &amp;amp;input[i], inputlen -&lt;span&gt; i);
}

&lt;/span&gt;&lt;span&gt;void&lt;/span&gt; SHA512Final(SHA512_CB *context, unsigned &lt;span&gt;char&lt;/span&gt; digest[&lt;span&gt;64&lt;/span&gt;&lt;span&gt;]) {
    unsigned &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; index = &lt;span&gt;0&lt;/span&gt;, padlen = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
    unsigned &lt;/span&gt;&lt;span&gt;char&lt;/span&gt; bits[&lt;span&gt;16&lt;/span&gt;]; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 记录字长信息&lt;/span&gt;
    index = (context-&amp;gt;count[&lt;span&gt;1&lt;/span&gt;] &amp;gt;&amp;gt; &lt;span&gt;3&lt;/span&gt;) &amp;amp; &lt;span&gt;0x7F&lt;/span&gt;; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 字长除127(11111111)取余长度&lt;/span&gt;
    padlen = (index &amp;lt; &lt;span&gt;112&lt;/span&gt;) ? (&lt;span&gt;112&lt;/span&gt; - index) : (&lt;span&gt;240&lt;/span&gt; - index); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 补齐的字长&lt;/span&gt;
    SHA512Encode(bits, context-&amp;gt;count, &lt;span&gt;16&lt;/span&gt;&lt;span&gt;);
    SHA512Update(context, PADDING, padlen);
    SHA512Update(context, bits, &lt;/span&gt;&lt;span&gt;16&lt;/span&gt;&lt;span&gt;);
    SHA512Encode(digest, context&lt;/span&gt;-&amp;gt;state, &lt;span&gt;64&lt;/span&gt;&lt;span&gt;);
}

&lt;/span&gt;&lt;span&gt;void&lt;/span&gt; SHA512Encode(unsigned &lt;span&gt;char&lt;/span&gt; *output, unsigned &lt;span&gt;long&lt;/span&gt; &lt;span&gt;long&lt;/span&gt; *input, unsigned &lt;span&gt;long&lt;/span&gt; &lt;span&gt;long&lt;/span&gt;&lt;span&gt; len) {
    unsigned &lt;/span&gt;&lt;span&gt;long&lt;/span&gt; &lt;span&gt;long&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;, j = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;while&lt;/span&gt; (j &amp;lt;&lt;span&gt; len)
    {
        output[j&lt;/span&gt;+&lt;span&gt;7&lt;/span&gt;] = input[i] &amp;amp; &lt;span&gt;0xFF&lt;/span&gt;&lt;span&gt;;
        output[j &lt;/span&gt;+ &lt;span&gt;6&lt;/span&gt;] = (input[i] &amp;gt;&amp;gt; &lt;span&gt;8&lt;/span&gt;) &amp;amp; &lt;span&gt;0xFF&lt;/span&gt;; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;0xFF:11111111&lt;/span&gt;
        output[j + &lt;span&gt;5&lt;/span&gt;] = (input[i] &amp;gt;&amp;gt; &lt;span&gt;16&lt;/span&gt;) &amp;amp; &lt;span&gt;0xFF&lt;/span&gt;&lt;span&gt;;
        output[j &lt;/span&gt;+ &lt;span&gt;4&lt;/span&gt;] = (input[i] &amp;gt;&amp;gt; &lt;span&gt;24&lt;/span&gt;) &amp;amp; &lt;span&gt;0xFF&lt;/span&gt;&lt;span&gt;;
        output[j &lt;/span&gt;+ &lt;span&gt;3&lt;/span&gt;] = (input[i] &amp;gt;&amp;gt; &lt;span&gt;32&lt;/span&gt;) &amp;amp; &lt;span&gt;0xFF&lt;/span&gt;&lt;span&gt;;
        output[j &lt;/span&gt;+ &lt;span&gt;2&lt;/span&gt;] = (input[i] &amp;gt;&amp;gt; &lt;span&gt;40&lt;/span&gt;) &amp;amp; &lt;span&gt;0xFF&lt;/span&gt;&lt;span&gt;;
        output[j &lt;/span&gt;+ &lt;span&gt;1&lt;/span&gt;] = (input[i] &amp;gt;&amp;gt; &lt;span&gt;48&lt;/span&gt;) &amp;amp; &lt;span&gt;0xFF&lt;/span&gt;&lt;span&gt;;
        output[j] &lt;/span&gt;= (input[i] &amp;gt;&amp;gt; &lt;span&gt;56&lt;/span&gt;) &amp;amp; &lt;span&gt;0xFF&lt;/span&gt;&lt;span&gt;;
        i&lt;/span&gt;++&lt;span&gt;;
        j &lt;/span&gt;+= &lt;span&gt;8&lt;/span&gt;&lt;span&gt;;
    }
}


&lt;/span&gt;&lt;span&gt;void&lt;/span&gt; SHA512Decode(unsigned &lt;span&gt;long&lt;/span&gt; &lt;span&gt;long&lt;/span&gt; *output, unsigned &lt;span&gt;char&lt;/span&gt; *input, unsigned &lt;span&gt;long&lt;/span&gt; &lt;span&gt;long&lt;/span&gt;&lt;span&gt; len) {
    unsigned &lt;/span&gt;&lt;span&gt;long&lt;/span&gt; &lt;span&gt;long&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;, j = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;while&lt;/span&gt; (j &amp;lt;&lt;span&gt; len)
    {
        output[i] &lt;/span&gt;= ((unsigned &lt;span&gt;long&lt;/span&gt; &lt;span&gt;long&lt;/span&gt;)input[j+&lt;span&gt;7&lt;/span&gt;]) |&lt;span&gt;
                    ((unsigned &lt;/span&gt;&lt;span&gt;long&lt;/span&gt; &lt;span&gt;long&lt;/span&gt;)input[j + &lt;span&gt;6&lt;/span&gt;] &amp;lt;&amp;lt; &lt;span&gt;8&lt;/span&gt;) |&lt;span&gt;
                    ((unsigned &lt;/span&gt;&lt;span&gt;long&lt;/span&gt; &lt;span&gt;long&lt;/span&gt;)input[j + &lt;span&gt;5&lt;/span&gt;] &amp;lt;&amp;lt; &lt;span&gt;16&lt;/span&gt;) |&lt;span&gt;
                    ((unsigned &lt;/span&gt;&lt;span&gt;long&lt;/span&gt; &lt;span&gt;long&lt;/span&gt;)input[j + &lt;span&gt;4&lt;/span&gt;] &amp;lt;&amp;lt; &lt;span&gt;24&lt;/span&gt;) |&lt;span&gt;
                    ((unsigned &lt;/span&gt;&lt;span&gt;long&lt;/span&gt; &lt;span&gt;long&lt;/span&gt;)input[j + &lt;span&gt;3&lt;/span&gt;] &amp;lt;&amp;lt; &lt;span&gt;32&lt;/span&gt;) |&lt;span&gt;
                    ((unsigned &lt;/span&gt;&lt;span&gt;long&lt;/span&gt; &lt;span&gt;long&lt;/span&gt;)input[j + &lt;span&gt;2&lt;/span&gt;] &amp;lt;&amp;lt; &lt;span&gt;40&lt;/span&gt;) |&lt;span&gt;
                    ((unsigned &lt;/span&gt;&lt;span&gt;long&lt;/span&gt; &lt;span&gt;long&lt;/span&gt;)input[j + &lt;span&gt;1&lt;/span&gt;] &amp;lt;&amp;lt; &lt;span&gt;48&lt;/span&gt;) |&lt;span&gt;
                    ((unsigned &lt;/span&gt;&lt;span&gt;long&lt;/span&gt; &lt;span&gt;long&lt;/span&gt;)input[j] &amp;lt;&amp;lt; &lt;span&gt;56&lt;/span&gt;&lt;span&gt;);
        i&lt;/span&gt;++&lt;span&gt;;
        j &lt;/span&gt;+= &lt;span&gt;8&lt;/span&gt;&lt;span&gt;;
    }
}

&lt;/span&gt;&lt;span&gt;void&lt;/span&gt; SHA512Transform(unsigned &lt;span&gt;long&lt;/span&gt; &lt;span&gt;long&lt;/span&gt; state[&lt;span&gt;8&lt;/span&gt;], unsigned &lt;span&gt;char&lt;/span&gt; block[&lt;span&gt;128&lt;/span&gt;&lt;span&gt;]) {
    unsigned &lt;/span&gt;&lt;span&gt;long&lt;/span&gt; &lt;span&gt;long&lt;/span&gt; S[&lt;span&gt;8&lt;/span&gt;&lt;span&gt;];
    unsigned &lt;/span&gt;&lt;span&gt;long&lt;/span&gt; &lt;span&gt;long&lt;/span&gt; W[&lt;span&gt;80&lt;/span&gt;&lt;span&gt;];
    unsigned &lt;/span&gt;&lt;span&gt;long&lt;/span&gt; &lt;span&gt;long&lt;/span&gt;&lt;span&gt; t0;
    unsigned &lt;/span&gt;&lt;span&gt;long&lt;/span&gt; &lt;span&gt;long&lt;/span&gt;&lt;span&gt; t1;
    &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
    printf(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;\n填充后(1024bits):\n0x&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; index=&lt;span&gt;0&lt;/span&gt;;index&amp;lt;&lt;span&gt;128&lt;/span&gt;;index++&lt;span&gt;){
        printf(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%02x&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, block[index]);
    }
    printf(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 把state的值复制给S&lt;/span&gt;
    &lt;span&gt;for&lt;/span&gt; ( i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; &lt;span&gt;8&lt;/span&gt;; i++&lt;span&gt; )
    {
        S[i] &lt;/span&gt;=&lt;span&gt; state[i];
    }

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 将字符数组保存的编码转为unsigned long long&lt;/span&gt;
    SHA512Decode(W, block, &lt;span&gt;128&lt;/span&gt;&lt;span&gt;);

    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; ( i = &lt;span&gt;16&lt;/span&gt;; i &amp;lt; &lt;span&gt;80&lt;/span&gt;; i++&lt;span&gt; )
    {
        W[i] &lt;/span&gt;= Gamma1(W[i - &lt;span&gt;2&lt;/span&gt;]) + W[i - &lt;span&gt;7&lt;/span&gt;] + Gamma0(W[i - &lt;span&gt;15&lt;/span&gt;]) + W[i - &lt;span&gt;16&lt;/span&gt;&lt;span&gt;];
    }

    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; ( i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; &lt;span&gt;80&lt;/span&gt;; i += &lt;span&gt;8&lt;/span&gt;&lt;span&gt; )
    {
        Sha512Round(S[&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;], S[&lt;span&gt;1&lt;/span&gt;], S[&lt;span&gt;2&lt;/span&gt;], S[&lt;span&gt;3&lt;/span&gt;], S[&lt;span&gt;4&lt;/span&gt;], S[&lt;span&gt;5&lt;/span&gt;], S[&lt;span&gt;6&lt;/span&gt;], S[&lt;span&gt;7&lt;/span&gt;], i + &lt;span&gt;0&lt;/span&gt;&lt;span&gt;);
        Sha512Round(S[&lt;/span&gt;&lt;span&gt;7&lt;/span&gt;], S[&lt;span&gt;0&lt;/span&gt;], S[&lt;span&gt;1&lt;/span&gt;], S[&lt;span&gt;2&lt;/span&gt;], S[&lt;span&gt;3&lt;/span&gt;], S[&lt;span&gt;4&lt;/span&gt;], S[&lt;span&gt;5&lt;/span&gt;], S[&lt;span&gt;6&lt;/span&gt;], i + &lt;span&gt;1&lt;/span&gt;&lt;span&gt;);
        Sha512Round(S[&lt;/span&gt;&lt;span&gt;6&lt;/span&gt;], S[&lt;span&gt;7&lt;/span&gt;], S[&lt;span&gt;0&lt;/span&gt;], S[&lt;span&gt;1&lt;/span&gt;], S[&lt;span&gt;2&lt;/span&gt;], S[&lt;span&gt;3&lt;/span&gt;], S[&lt;span&gt;4&lt;/span&gt;], S[&lt;span&gt;5&lt;/span&gt;], i + &lt;span&gt;2&lt;/span&gt;&lt;span&gt;);
        Sha512Round(S[&lt;/span&gt;&lt;span&gt;5&lt;/span&gt;], S[&lt;span&gt;6&lt;/span&gt;], S[&lt;span&gt;7&lt;/span&gt;], S[&lt;span&gt;0&lt;/span&gt;], S[&lt;span&gt;1&lt;/span&gt;], S[&lt;span&gt;2&lt;/span&gt;], S[&lt;span&gt;3&lt;/span&gt;], S[&lt;span&gt;4&lt;/span&gt;], i + &lt;span&gt;3&lt;/span&gt;&lt;span&gt;);
        Sha512Round(S[&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;], S[&lt;span&gt;5&lt;/span&gt;], S[&lt;span&gt;6&lt;/span&gt;], S[&lt;span&gt;7&lt;/span&gt;], S[&lt;span&gt;0&lt;/span&gt;], S[&lt;span&gt;1&lt;/span&gt;], S[&lt;span&gt;2&lt;/span&gt;], S[&lt;span&gt;3&lt;/span&gt;], i + &lt;span&gt;4&lt;/span&gt;&lt;span&gt;);
        Sha512Round(S[&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;], S[&lt;span&gt;4&lt;/span&gt;], S[&lt;span&gt;5&lt;/span&gt;], S[&lt;span&gt;6&lt;/span&gt;], S[&lt;span&gt;7&lt;/span&gt;], S[&lt;span&gt;0&lt;/span&gt;], S[&lt;span&gt;1&lt;/span&gt;], S[&lt;span&gt;2&lt;/span&gt;], i + &lt;span&gt;5&lt;/span&gt;&lt;span&gt;);
        Sha512Round(S[&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;], S[&lt;span&gt;3&lt;/span&gt;], S[&lt;span&gt;4&lt;/span&gt;], S[&lt;span&gt;5&lt;/span&gt;], S[&lt;span&gt;6&lt;/span&gt;], S[&lt;span&gt;7&lt;/span&gt;], S[&lt;span&gt;0&lt;/span&gt;], S[&lt;span&gt;1&lt;/span&gt;], i + &lt;span&gt;6&lt;/span&gt;&lt;span&gt;);
        Sha512Round(S[&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;], S[&lt;span&gt;2&lt;/span&gt;], S[&lt;span&gt;3&lt;/span&gt;], S[&lt;span&gt;4&lt;/span&gt;], S[&lt;span&gt;5&lt;/span&gt;], S[&lt;span&gt;6&lt;/span&gt;], S[&lt;span&gt;7&lt;/span&gt;], S[&lt;span&gt;0&lt;/span&gt;], i + &lt;span&gt;7&lt;/span&gt;&lt;span&gt;);
    }
    printf(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
    printf(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;A:%I64u\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, S[&lt;span&gt;0&lt;/span&gt;&lt;span&gt;]);
    printf(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;B:%I64u\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, S[&lt;span&gt;1&lt;/span&gt;&lt;span&gt;]);
    printf(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;C:%I64u\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, S[&lt;span&gt;2&lt;/span&gt;&lt;span&gt;]);
    printf(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;D:%I64u\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, S[&lt;span&gt;3&lt;/span&gt;&lt;span&gt;]);
    printf(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;E:%I64u\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, S[&lt;span&gt;4&lt;/span&gt;&lt;span&gt;]);
    printf(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;F:%I64u\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, S[&lt;span&gt;5&lt;/span&gt;&lt;span&gt;]);
    printf(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;G:%I64u\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, S[&lt;span&gt;6&lt;/span&gt;&lt;span&gt;]);
    printf(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;H:%I64u\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, S[&lt;span&gt;7&lt;/span&gt;&lt;span&gt;]);
    printf(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Feedback&lt;/span&gt;
    &lt;span&gt;for&lt;/span&gt; ( i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; &lt;span&gt;8&lt;/span&gt;; i++&lt;span&gt; )
    {
        state[i] &lt;/span&gt;= state[i] +&lt;span&gt; S[i];
    }
}

&lt;/span&gt;&lt;span&gt;int&lt;/span&gt; main(&lt;span&gt;int&lt;/span&gt; argc, &lt;span&gt;char&lt;/span&gt;*&lt;span&gt; argv[])
{

    &lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt; i;
    unsigned &lt;/span&gt;&lt;span&gt;char&lt;/span&gt; input[] = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;jack&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
    printf(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;输入字符串的十六进制: 0x&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(unsigned &lt;span&gt;int&lt;/span&gt; i=&lt;span&gt;0&lt;/span&gt;;i&amp;lt;strlen((&lt;span&gt;char&lt;/span&gt;*)input);i++&lt;span&gt;){
        printf(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%02x&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, input[i]);
    }
    printf(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);

    unsigned &lt;/span&gt;&lt;span&gt;char&lt;/span&gt; sha512Code[&lt;span&gt;64&lt;/span&gt;&lt;span&gt;];

    SHA512_CB sha512;

    SHA512Init(&lt;/span&gt;&amp;amp;&lt;span&gt;sha512);
    SHA512Update(&lt;/span&gt;&amp;amp;sha512, input, strlen((&lt;span&gt;char&lt;/span&gt; *&lt;span&gt;)input));
    SHA512Final(&lt;/span&gt;&amp;amp;&lt;span&gt;sha512, sha512Code);

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;Md5加密后的32位结果&lt;/span&gt;
    printf(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;\n加密前:%s\n加密后128位:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, input);
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; &lt;span&gt;64&lt;/span&gt;; i++&lt;span&gt;)
    {
        printf(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%02x&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, sha512Code[i]);
    }

    getchar();

    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt; 转载请注明出处。&lt;/p&gt;

</description>
<pubDate>Tue, 07 Nov 2017 15:35:00 +0000</pubDate>
<dc:creator>coding==1？</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/jake9402/p/7801969.html</dc:identifier>
</item>
<item>
<title>React Native填坑之旅 -- 使用react-navigation代替Navigator - Mr 布鲁斯</title>
<link>http://www.cnblogs.com/sunshine-anycall/p/7801671.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/sunshine-anycall/p/7801671.html</guid>
<description>&lt;p&gt;&lt;code&gt;Navigator&lt;/code&gt;已经被React Native废弃了。也许你可以在另外的一个依赖库里&lt;a href=&quot;https://www.npmjs.com/package/react-native-deprecated-custom-components&quot;&gt;&lt;code&gt;react-native-deprecated-custom-components&lt;/code&gt;&lt;/a&gt;里找到。不过既然官方推荐的是&lt;a href=&quot;https://reactnavigation.org/&quot;&gt;&lt;code&gt;react-navigation&lt;/code&gt;&lt;/a&gt;那我们就来看看这个东西到底有什么好的，值不值得用。&lt;/p&gt;
&lt;p&gt;一句话概括的话，&lt;code&gt;react-navigation&lt;/code&gt;非常值得用。之前配置一个&lt;code&gt;Navigator&lt;/code&gt;非常的繁琐，但是使用&lt;code&gt;react-navigation&lt;/code&gt;的任何一个导航组件都非常简单。项目的github地址在&lt;a href=&quot;https://github.com/futurechallenger/react-native-tutorial&quot;&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;react-navigation&lt;/code&gt;包括下面三个Navigator：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;StackNavigator&lt;/code&gt;: 这个组件是用来代替之前的&lt;code&gt;Navigator&lt;/code&gt;的。凡是维持一种“先进后厨”的栈式导航的话就可以用这个。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;TabNavigator&lt;/code&gt;：这个组件和iOS的`TabBarController。看起来是这样的。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DrawerNavigator&lt;/code&gt;：这个组件就是抽屉式的导航菜单。在React Native里只有Android才有：&lt;code&gt;DrawerLayoutAndroid&lt;/code&gt;，在iOS里是没有的。有了&lt;code&gt;DrawerNavigator&lt;/code&gt;，两个平台都可以用了。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;我会在下文里主要介绍&lt;code&gt;StackNavigator&lt;/code&gt;和&lt;code&gt;DrawerNavigator&lt;/code&gt;。对于&lt;code&gt;TabNavigatgor&lt;/code&gt;它的使用非常简单，当你回了前面的两种的时候你就自然可以搞定它了。&lt;/p&gt;
&lt;h2 id=&quot;stack-navigator&quot;&gt;Stack Navigator&lt;/h2&gt;
&lt;p&gt;在&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;react-native init AwesomeProject&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;命令后生成的默认项目里，查看&lt;em&gt;index.js&lt;/em&gt;文件：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; AppRegistry &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'react-native'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; App &lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'./App'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;va&quot;&gt;AppRegistry&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;registerComponent&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'AwesomeProject'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; () &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt; App)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;APP开始执行后运行的就是&lt;code&gt;App&lt;/code&gt;组件。也就是&lt;em&gt;App.js&lt;/em&gt;文件export的是什么组件，App就运行什么组件。&lt;/p&gt;
&lt;p&gt;在&lt;em&gt;App.js&lt;/em&gt;文件中，去掉&lt;code&gt;export default&lt;/code&gt;。就如我们的demo做的一样，添加一个&lt;em&gt;MessageContainer.js&lt;/em&gt;文件，并添加demo中的内容。这样在其中我们已经有了&lt;code&gt;App&lt;/code&gt;、&lt;code&gt;MessageContainer&lt;/code&gt;两个组件。&lt;/p&gt;
&lt;p&gt;下面看下如何配置。&lt;/p&gt;
&lt;p&gt;最简单的：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;12&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;im&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;im&quot;&gt;default&lt;/span&gt; NavHome &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;StackNavigator&lt;/span&gt;(&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;Home&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;screen&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; NavApp&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;Message&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;screen&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; MessageContainer&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;导出&lt;code&gt;StackNavigator&lt;/code&gt;方法生成的组件&lt;code&gt;NavHome&lt;/code&gt;。运行起来之后，理论上就可以导航了。但是会有问题，因为这时还没有能够跳转的触发点。所以，我们还要做如下的修改。&lt;/p&gt;
&lt;p&gt;修改&lt;em&gt;App.js&lt;/em&gt;文件的内容。在其中添加一个按钮，点击之后可以进入到&lt;code&gt;MessageContainer&lt;/code&gt;组件。修改&lt;em&gt;MessageContainer.js&lt;/em&gt;文件，在里面添加一个按钮返回。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;co&quot;&gt;//App.js&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;Button onPress&lt;span class=&quot;op&quot;&gt;={&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;props&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;navigation&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;navigate&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'Message'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt; title&lt;span class=&quot;op&quot;&gt;={&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'To message'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;/&amp;gt;&lt;/span&gt;

&lt;span class=&quot;ss&quot;&gt;//MessageContainer.js&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;&amp;lt;Button onPress={this.props.navigation.goBack&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;} title={'Go Back'} /&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;但是，这样还是demo的水平，离真正的产品级使用还差很多。一般的App，在push到下一个页面的时候会点击navigation bar的回退按钮返回上一页。我们就来实现这个功能。&lt;/p&gt;
&lt;p&gt;使我们首先看一下&lt;code&gt;StackNavigator&lt;/code&gt;的API：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;at&quot;&gt;StackNavigator&lt;/span&gt;(RouteConfigs&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; StackNavigatorConfig)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;通过查看文档，要实现这个功能需要在&lt;code&gt;RouteConfigs&lt;/code&gt;里面增加&lt;code&gt;navigationOptions&lt;/code&gt;来达到。如下：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;18&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;im&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;im&quot;&gt;default&lt;/span&gt; NavHome &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;StackNavigator&lt;/span&gt;(&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;Home&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;screen&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; App&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;navigationOptions&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;navigation&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;dt&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'Home'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;dt&quot;&gt;headerLeft&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;Button onPress&lt;span class=&quot;op&quot;&gt;={&lt;/span&gt;() &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;navigation&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;navigate&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'DrawerToggle'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt; title&lt;span class=&quot;op&quot;&gt;={&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'User'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;      headerRight: &lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;&amp;lt;Button onPress={&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt; =&amp;gt; navigation.navigate&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;'Message'&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;} title={'Message'} /&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)
  &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;Message&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;screen&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; MessageContainer&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;navigationOptions&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;navigation&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;dt&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;Message&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;dt&quot;&gt;headerLeft&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;Button title&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'Back'&lt;/span&gt; onPress&lt;span class=&quot;op&quot;&gt;={&lt;/span&gt;() &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;navigation&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;goBack&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;}}&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;    }&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;  },&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;详细看一下&lt;code&gt;navigationOptions&lt;/code&gt;。&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;title：是导航栏上显示的title。&lt;/li&gt;
&lt;li&gt;headerLeft： 是导航栏左侧的组件。我这里放了一个按钮。更好的是放置一个&lt;code&gt;TouchableOpacity&lt;/code&gt;组件。因为按钮在iOS上还好，但是在Android上就是一个明晃晃的按钮啊，各种边框和阴影。&lt;/li&gt;
&lt;li&gt;headerRight: 是导航栏右侧的组件。&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;在&lt;code&gt;MessageContainer&lt;/code&gt;的导航栏上就只需要一个“返回”按钮，所以只有一个&lt;code&gt;headerLeft&lt;/code&gt;就足够了。在首页上的导航栏的&lt;code&gt;headerLeft&lt;/code&gt;是用来触发稍后讲到的&lt;code&gt;DrawerNavigator&lt;/code&gt;的。&lt;/p&gt;
&lt;p&gt;这样，这个靠谱的导航就完成了。&lt;br/&gt;&lt;/p&gt;
&lt;h2 id=&quot;drawer-navigator&quot;&gt;Drawer Navigator&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;DrawerNavigator&lt;/code&gt;和&lt;code&gt;StackNavigator&lt;/code&gt;的配置很类似。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;13&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; NavApp &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;DrawerNavigator&lt;/span&gt;(&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;Home&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;screen&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; App&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;MyWallet&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;screen&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; MyWalletView&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;MyVoucher&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;screen&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; MyVoucherView&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这个时候看起来是这样的：&lt;br/&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/1453913-3b4e4d4a2f3937ee.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/400&quot; alt=&quot;normal_drawer_nav_top.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;但是我想要的效果是这样的：&lt;br/&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/1453913-be945d8e3daa02d9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/400&quot; alt=&quot;drawer_top.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;显然，文档里提供的一些简单的定制是不能完成这样的效果的。于是，我们查看文档，发现有办法直接替换掉默认的Drawer实现，非常简单：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;17&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; NavApp &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;DrawerNavigator&lt;/span&gt;(&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;Home&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;screen&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; App&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;screen&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; UserContainer&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;MyWallet&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;screen&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; MyWalletView&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;MyVoucher&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;screen&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; MyVoucherView&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;dt&quot;&gt;contentComponent&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; props &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;UserDrawer items&lt;span class=&quot;op&quot;&gt;={&lt;/span&gt;props&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;)&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;看下API：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;at&quot;&gt;DrawerNavigator&lt;/span&gt;(RouteConfigs&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; DrawerNavigatorConfig)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;只要叫上&lt;code&gt;DrawerNavigatorConfig&lt;/code&gt;配置里的&lt;code&gt;contentComponent&lt;/code&gt;配置。也就是上面配置的第二个参数。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;dt&quot;&gt;contentComponent&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; props &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;UserDrawer items&lt;span class=&quot;op&quot;&gt;={&lt;/span&gt;props&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;contentComponent&lt;/code&gt;就是drawer的内容组件。这里我们用的是&lt;code&gt;UserDrawer&lt;/code&gt;组件，并把props传递了进去。&lt;/p&gt;
&lt;p&gt;这样我们想要的抽屉式菜单就实现了。&lt;/p&gt;
&lt;h2 id=&quot;stacknavigator和drawernavigator结合使用&quot;&gt;StackNavigator和DrawerNavigator结合使用&lt;/h2&gt;
&lt;p&gt;现在把这两个组件结合在一起使用。在首页上的导航栏里的两个按钮，左侧的开启drawer导航，右侧的是“message”按钮，使用StackNavigator组件导航。&lt;/p&gt;
&lt;p&gt;如果是在drawer导航里使用&lt;code&gt;StackNavigator&lt;/code&gt;的话，那么只要这样配置：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;24&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;im&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;im&quot;&gt;default&lt;/span&gt; NavHome &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;StackNavigator&lt;/span&gt;(&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;Home&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;screen&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; NavApp&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;navigationOptions&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;navigation&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;dt&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'Home'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;dt&quot;&gt;headerLeft&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;Button onPress&lt;span class=&quot;op&quot;&gt;={&lt;/span&gt;() &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;navigation&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;navigate&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'DrawerToggle'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt; title&lt;span class=&quot;op&quot;&gt;={&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'User'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;      headerRight: &lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;&amp;lt;Button onPress={&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt; =&amp;gt; navigation.navigate&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;'Message'&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;} title={'Message'} /&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)
  &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;dt&quot;&gt;Message&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;screen&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; MessageContainer&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;navigationOptions&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;navigation&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;dt&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;Message&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;dt&quot;&gt;headerLeft&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;Button title&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'Back'&lt;/span&gt; onPress&lt;span class=&quot;op&quot;&gt;={&lt;/span&gt;() &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;navigation&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;goBack&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;}}&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;    }&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;  },&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;ss&quot;&gt;export default NavApp = DrawerNavigator&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;  Home: {&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;    screen: NavHome, // &lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;***&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;  },&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;  MyWallet: {&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;    screen: MyWalletView,&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;  },&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;  MyVoucher: {&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;    screen: MyVoucherView,&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;  }&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;}, {&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;   contentComponent: props =&amp;gt; &lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;&amp;lt;UserDrawer items={props} /&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;)
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;要在Drawer导航里用stack导航，那么就在drawer导航里的某个路由选项里加上&lt;code&gt;screen: NavHome&lt;/code&gt;。这个&lt;code&gt;NavHome&lt;/code&gt;就是stack导航。反之，则是在stack导航里的某个route选项的screen上指定drawer导航。&lt;/p&gt;
&lt;p&gt;但是在使用上还是有一点区别的。如果drawer导航里包含stack导航。那么drawer导航菜单的最高点是在屏幕的最高点。反之，如果drawer导航被stack导航包含的话，drawer导航菜单的最高点是在导航栏的下方的。如图：&lt;br/&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/1453913-e68d4547d28393ab.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/400&quot; alt=&quot;drawer导航包含stack导航&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/1453913-9f3d95ef956724a7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/400&quot; alt=&quot;drawer导航被stack导航包含&quot;/&gt;&lt;/p&gt;
&lt;p&gt;回到正题。从drawer导航菜单跳转到任何的页面后如何跳转回来呢？还是老方法：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;im&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;im&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; MyWalletView &lt;span class=&quot;kw&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;React&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;at&quot;&gt;render&lt;/span&gt;() &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; (
      &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;TouchableOpacity 
        style&lt;span class=&quot;op&quot;&gt;={{&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;flex&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;justifyContent&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'center'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;alignItems&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'center'&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;}}&lt;/span&gt;
        onPress&lt;span class=&quot;op&quot;&gt;={&lt;/span&gt;() &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;props&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;navigation&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;goBack&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;}&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;Text&lt;span class=&quot;op&quot;&gt;&amp;gt;{&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'My Wallet'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;}&amp;lt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;/Text&amp;gt;&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;      &amp;lt;/TouchableOpacity&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;
    )&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;调用props传入的navigation的方法来实现返回：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode js&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;props&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;navigation&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;goBack&lt;/span&gt;()&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;总结&quot;&gt;总结&lt;/h2&gt;
&lt;p&gt;更多请看代码吧。留下来&lt;code&gt;TabNavigator&lt;/code&gt;来给各位读者朋友实践一下练练手吧。其实配置的简单程度比早前React Native里的Navigator已经降低了很多了。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;StackNavigator&lt;/code&gt;里还有除了&lt;code&gt;navigate()&lt;/code&gt;和&lt;code&gt;goBack()&lt;/code&gt;两个方法之外，还有其他的一些方法可以调用。实际的App交互中也并不是只有导航到某一页，然后再从那一页跳转回来这么简单。后面有机会会讲到这方面的内容。&lt;/p&gt;
</description>
<pubDate>Tue, 07 Nov 2017 14:55:00 +0000</pubDate>
<dc:creator>Mr 布鲁斯</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/sunshine-anycall/p/7801671.html</dc:identifier>
</item>
<item>
<title>python正则表达式 - 小破孩92</title>
<link>http://www.cnblogs.com/miqi1992/p/7801662.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/miqi1992/p/7801662.html</guid>
<description>&lt;blockquote readability=&quot;3.5&quot;&gt;
&lt;p&gt;本篇将介绍python正则表达式，更多内容请参考：&lt;a href=&quot;http://www.cnblogs.com/miqi1992/p/7801662.html&quot;&gt;【python正则表达式】&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;什么是正则表达式&quot;&gt;什么是正则表达式&lt;/h3&gt;
&lt;p&gt;正则表达式，又称规则表达式，通常被用来检索、替换那些符合某个模式（规则）的文本。&lt;br/&gt;正则表达式是对字符串操作的一种逻辑公式，就是用事先定义好的一些特定字符、及这些特定字符的组合，组成一个“规则字符串”，这个“规则字符串”用来表达对字符串的一些过滤逻辑。&lt;br/&gt;&lt;strong&gt;给定一个正则表达式和另一个字符串，我们可以达到如下的目的：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;给定的字符串是否符合正则表达式的过滤逻辑(“匹配”)&lt;/li&gt;
&lt;li&gt;通过正则表达式，从文本字符串中获取到我们想要的特定部分（“过滤”）&lt;br/&gt;&lt;img src=&quot;http://oyl9rg5dr.bkt.clouddn.com//image/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E8%BF%87%E7%A8%8B.png&quot; alt=&quot;正则表达式过程&quot;/&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;正则表达式匹配规则&quot;&gt;正则表达式匹配规则&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;http://oyl9rg5dr.bkt.clouddn.com//image/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%8C%B9%E9%85%8D%E8%A7%84%E5%88%99.png&quot; alt=&quot;正则表达式匹配规则&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;python的re模块&quot;&gt;Python的re模块&lt;/h3&gt;
&lt;p&gt;在python中，我们可以使用内置的re模块来使用正则表达式。&lt;br/&gt;有一点需要特别注意的是，正则表达式使用对特殊字符进行转义，所以如果我们要使用原始字符串，只需要一个r前缀，示例：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;co&quot;&gt;r'chuanzhiboke\t\.\tpython'&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;re模块的一般使用步骤如下&quot;&gt;re模块的一般使用步骤如下：&lt;/h3&gt;
&lt;ol&gt;&lt;li&gt;使用&lt;code&gt;compile()&lt;/code&gt;函数将正则表达式的字符串形式编译为一个&lt;code&gt;Pattern&lt;/code&gt;对象&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;通过&lt;code&gt;Pattern&lt;/code&gt;对象提供的一系列方法将文本进行匹配查找，获得匹配结果(一个Match对象)&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;最后使用&lt;code&gt;Match&lt;/code&gt;对象提供的属性和方法获得信息，根据需要进行其他的操作。&lt;/li&gt;
&lt;/ol&gt;&lt;h4 id=&quot;compile对象&quot;&gt;compile对象&lt;/h4&gt;
&lt;p&gt;compile函数用于编译正则表达式，生成一个Pattern对象，它的一般使用形式如下：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; re

&lt;span class=&quot;co&quot;&gt;#将正则表达式编译为Pattern对象&lt;/span&gt;
pattern &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; re.&lt;span class=&quot;bu&quot;&gt;compile&lt;/span&gt;(&lt;span class=&quot;vs&quot;&gt;r'\d+'&lt;/span&gt;)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在上面，我们已将一个正则表达式编译成Pattern对象，接下来，我们就可以利用pattern的一系列方法对文本进行匹配查找了。&lt;br/&gt;Pattern对象的一些常用方法主要有：&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;&lt;li&gt;match对象：从起始位置开始查找，一次匹配。&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;search对象：从任何位置开始查找，一次匹配。&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;findall()对象：全部匹配，返回列表。&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;finditer()对象：全部匹配，返回迭代器。&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;spilt()对象：分割字符串，返回列表&lt;/li&gt;
&lt;li&gt;sub()对象：替换&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;match 方法&lt;/strong&gt;&lt;br/&gt;match方法用于查找字符串的头部(也可以指定起始位置)，它是一次匹配，只要找到了一个匹配的结果返回，而不是查找所有匹配的结果，它的一般使用形式如下：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;match(string[, pos[, endpos]])&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;其中，string是待匹配的字符串，pos和endpos是可选参数，指定字符串的起始和终点位置，默认值分别是0和len(字符串长度)。因此，当你不指定pos和endpos时，match方法默认匹配字符串的头部。&lt;/p&gt;
&lt;p&gt;当匹配成功时，返回一个Match对象，如果没有匹配上，则返回None。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;15&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; re
&lt;span class=&quot;op&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;pattern &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; re.&lt;span class=&quot;bu&quot;&gt;compile&lt;/span&gt;(&lt;span class=&quot;vs&quot;&gt;r'\d+'&lt;/span&gt;)  &lt;span class=&quot;co&quot;&gt;#用于匹配至少一个数字&lt;/span&gt;

&lt;span class=&quot;op&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;m &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; pattern.match(&lt;span class=&quot;st&quot;&gt;'one12twothree34four'&lt;/span&gt;)  &lt;span class=&quot;co&quot;&gt;#查找头部，没有匹配&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(m) &lt;span class=&quot;co&quot;&gt;#如果没有匹配上，就什么也不输出&lt;/span&gt;

&lt;span class=&quot;op&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;m &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; pattern.match(&lt;span class=&quot;st&quot;&gt;'one12twothree34four'&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;) &lt;span class=&quot;co&quot;&gt;#从'e'的位置开始匹配，没有匹配到&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(m)
&lt;span class=&quot;op&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;m &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; pattern.match(&lt;span class=&quot;st&quot;&gt;'one12twothree34four'&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;) &lt;span class=&quot;co&quot;&gt;#从'1' 的位置开始匹配，正好匹配上&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(m)
&lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;_sre.SRE_Match &lt;span class=&quot;bu&quot;&gt;object&lt;/span&gt; at &lt;span class=&quot;bn&quot;&gt;0x10a42aac0&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;m.group(&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;)   &lt;span class=&quot;co&quot;&gt;#可忽略0&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;'12'&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;m.start(&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;)   &lt;span class=&quot;co&quot;&gt;#可忽略0&lt;/span&gt;
&lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;m.end(&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;)    &lt;span class=&quot;co&quot;&gt;#可忽略0&lt;/span&gt;
&lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;m.span(&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;)  &lt;span class=&quot;co&quot;&gt;#可忽略0&lt;/span&gt;
(&lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在上面，当匹配成功时返回一个Match对象，其中：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;group([group1,...])方法用于获得一个或多个分组匹配的字符串，当要获得整个匹配字符串的子串时，可直接使用group()或group(0);&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;start([group])方法用于获取分组匹配的子串在整个字符串中的起始位置（子串第一个字符的索引）,参数默认值为0；&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;end([group])方法用于获取分组匹配的子串在整个字符串中的结束位置（子串最后一个字符的索引+1）,参数默认值是0&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;span([group])方法返回(start[group], end(group))&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;19&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; re
&lt;span class=&quot;op&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;pattern &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; re.&lt;span class=&quot;bu&quot;&gt;compile&lt;/span&gt;(&lt;span class=&quot;vs&quot;&gt;r'([a-z]+) （[a-z]+)'&lt;/span&gt;, re.I) &lt;span class=&quot;co&quot;&gt;#表示忽略大小写&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;m &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; pattern.match(&lt;span class=&quot;st&quot;&gt;'hello world wide web'&lt;/span&gt;)

&lt;span class=&quot;op&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(m)  &lt;span class=&quot;co&quot;&gt;#匹配成功，返回一个Match对象&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;_sre.SRE_Match &lt;span class=&quot;bu&quot;&gt;object&lt;/span&gt; at &lt;span class=&quot;bn&quot;&gt;0x10bea83e8&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;op&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;m.group(&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;)  &lt;span class=&quot;co&quot;&gt;#返回匹配成功的整个子串&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;'Hello World'&lt;/span&gt;

&lt;span class=&quot;op&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;m.span(&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;)   &lt;span class=&quot;co&quot;&gt;#返回匹配成功的整个子串&lt;/span&gt;
(&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;11&lt;/span&gt;)

&lt;span class=&quot;op&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;m.group(&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;)   &lt;span class=&quot;co&quot;&gt;#返回第一个分组匹配成功的子串&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;'Hello'&lt;/span&gt;

&lt;span class=&quot;op&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;m.span(&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;)  &lt;span class=&quot;co&quot;&gt;#返回第一个分组匹配成功&lt;/span&gt;
(&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;)

&lt;span class=&quot;op&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;m.group(&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;)   &lt;span class=&quot;co&quot;&gt;#返回第2个分组匹配成功的子串&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;'World'&lt;/span&gt;

&lt;span class=&quot;op&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;m.span(&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;)     &lt;span class=&quot;co&quot;&gt;#返回第2个分组匹配成功的子串的位置&lt;/span&gt;
(&lt;span class=&quot;dv&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;11&lt;/span&gt;)

&lt;span class=&quot;op&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;m.groups()   &lt;span class=&quot;co&quot;&gt;#等价于(m.group(1), m.group(2), ...)&lt;/span&gt;
(&lt;span class=&quot;st&quot;&gt;'Hello'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'World'&lt;/span&gt;)

&lt;span class=&quot;op&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;m.group(&lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;)   &lt;span class=&quot;co&quot;&gt;#不存在第3个分组&lt;/span&gt;
Traceback (most recent call last):
  File &lt;span class=&quot;st&quot;&gt;&quot;&amp;lt;stdin&amp;gt;&quot;&lt;/span&gt;, line &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;op&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;module&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;pp&quot;&gt;IndexError&lt;/span&gt;: no such group&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;search方法&lt;/strong&gt;&lt;br/&gt;search方法用于查找字符串的任何位置，它也是一次匹配，只要找到了一个匹配的结果就返回，而不是查找所有匹配的结果，它的一般使用形式如下：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;search[string[, pos[, endpos]]]&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;其中，string是待匹配的字符串，pos和endpos是可选参数，指定字符串的起始和终点位置，默认值分别是0和len(字符串长度)。&lt;br/&gt;当匹配成功时，返回一个Match对象，如果没有匹配上，则返回None。&lt;br/&gt;让我们看看例子：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;13&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; re
&lt;span class=&quot;op&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;pattern &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; re.&lt;span class=&quot;bu&quot;&gt;compile&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'\d+'&lt;/span&gt;)
&lt;span class=&quot;op&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;m &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; pattern.search(&lt;span class=&quot;st&quot;&gt;'one12twothree34four'&lt;/span&gt;)  &lt;span class=&quot;co&quot;&gt;#这里如果使用match方法则不匹配&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;m
&lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;_sre.SRE_Match &lt;span class=&quot;bu&quot;&gt;object&lt;/span&gt; at &lt;span class=&quot;bn&quot;&gt;0x10cc03ac0&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;m.group()
&lt;span class=&quot;co&quot;&gt;'12'&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;m &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; pattern.search(&lt;span class=&quot;st&quot;&gt;'one12twothree34four'&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;30&lt;/span&gt;)   &lt;span class=&quot;co&quot;&gt;#指定字符串区间  &lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;m
&lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;_sre.SRE_Match &lt;span class=&quot;bu&quot;&gt;object&lt;/span&gt; at &lt;span class=&quot;bn&quot;&gt;0x10cc03b28&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;m.group()
&lt;span class=&quot;co&quot;&gt;'34'&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;m.span()
(&lt;span class=&quot;dv&quot;&gt;13&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;15&lt;/span&gt;)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在看一个例子：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;12&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;co&quot;&gt;# coding:utf-8&lt;/span&gt;
&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; re
&lt;span class=&quot;co&quot;&gt;#将正则表达式编译成Pattern对象&lt;/span&gt;
pattern &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; re.&lt;span class=&quot;bu&quot;&gt;compile&lt;/span&gt;(&lt;span class=&quot;vs&quot;&gt;r'\d+'&lt;/span&gt;)
&lt;span class=&quot;co&quot;&gt;#使用search()方法查找匹配的字符串，不存在匹配的子串时将不返回&lt;/span&gt;
m &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; pattern.search(&lt;span class=&quot;st&quot;&gt;'hello 123456 789'&lt;/span&gt;)
&lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; m:
    &lt;span class=&quot;co&quot;&gt;#使用Match获得分组信息&lt;/span&gt;
    &lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'matching string：'&lt;/span&gt;,m.group())
    &lt;span class=&quot;co&quot;&gt;#起始位置和结束位置&lt;/span&gt;
    &lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'position: '&lt;/span&gt;,m.span())&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;执行结果：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;matching string: &lt;span class=&quot;dv&quot;&gt;123456&lt;/span&gt;
position:(&lt;span class=&quot;dv&quot;&gt;6&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;12&lt;/span&gt;)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;findall 方法&lt;/strong&gt;&lt;br/&gt;上面的match和search方法都是一次匹配，只要找到了一个匹配的结果就返回。然而，在大多数时候，我们需要搜索整个字符串，获得所有匹配的结果。&lt;br/&gt;findall方法的使用形式如下：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;findall(string[, pos[, endpos]])&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;其中，string是待匹配的字符串，pos和endpos是可选参数，指定字符串的起始和终点位置分别是0和len(字符串长度)。&lt;br/&gt;findall是以列表形式返回全部能匹配到的子串，如果没有匹配，则返回一个空列表。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; re
pattern &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; re.&lt;span class=&quot;bu&quot;&gt;compile&lt;/span&gt;(&lt;span class=&quot;vs&quot;&gt;r'\d+'&lt;/span&gt;)  &lt;span class=&quot;co&quot;&gt;#查找数字&lt;/span&gt;

result1 &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; pattern.findall(&lt;span class=&quot;st&quot;&gt;'hello 123456 789'&lt;/span&gt;)
result2 &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; pattern.findall(&lt;span class=&quot;st&quot;&gt;'one1two2three3four4'&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;)

&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(result1)
&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;执行结果如下：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;[&lt;span class=&quot;st&quot;&gt;'123456'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'789'&lt;/span&gt;]
[&lt;span class=&quot;st&quot;&gt;'1'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'2'&lt;/span&gt;]&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;再来看一个例子：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;13&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; re
&lt;span class=&quot;co&quot;&gt;#re模块提供一个方法叫compile提供，提供我们输入一个匹配的规则&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;#然后返回一个pattern实例，我们根据这个规则去匹配字符串&lt;/span&gt;
pattern &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; re.&lt;span class=&quot;bu&quot;&gt;compile&lt;/span&gt;(&lt;span class=&quot;vs&quot;&gt;r'd+\.\d*'&lt;/span&gt;)

&lt;span class=&quot;co&quot;&gt;#通过pattern.findall()方法能够全部匹配到我们得到的字符串&lt;/span&gt;
result &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; pattern.findall(&lt;span class=&quot;st&quot;&gt;&quot;123.141593, 'bigcat', 232312, 3.15&quot;&lt;/span&gt;)

&lt;span class=&quot;co&quot;&gt;#findall以列表形式 返回全部能匹配到的子串给result&lt;/span&gt;
&lt;span class=&quot;cf&quot;&gt;for&lt;/span&gt; item &lt;span class=&quot;op&quot;&gt;in&lt;/span&gt; result:
    &lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(item)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;运行结果：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;fl&quot;&gt;123.141593&lt;/span&gt;
&lt;span class=&quot;fl&quot;&gt;3.15&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;finditer方法&lt;/strong&gt;&lt;br/&gt;finditer方法的行为跟findall的行为类似，也是搜索整个字符串，获得所有匹配的结果。但它返回一个顺序访问每一个匹配结果(Match对象)的迭代器。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;14&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;co&quot;&gt;#coding:utf-8&lt;/span&gt;
&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; re

pattern &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; re.&lt;span class=&quot;bu&quot;&gt;compile&lt;/span&gt;(&lt;span class=&quot;vs&quot;&gt;r'\d+'&lt;/span&gt;)

result1 &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; pattern.finditer(&lt;span class=&quot;st&quot;&gt;'hello 123456 789'&lt;/span&gt;)
result2 &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; pattern.finditer(&lt;span class=&quot;st&quot;&gt;'one1two2three3four4'&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;)
&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(result1)
&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(result2)
&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'result1....'&lt;/span&gt;)
&lt;span class=&quot;cf&quot;&gt;for&lt;/span&gt; m1 &lt;span class=&quot;op&quot;&gt;in&lt;/span&gt; result1:
    &lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;matching string:{} position:{}&quot;&lt;/span&gt;.&lt;span class=&quot;bu&quot;&gt;format&lt;/span&gt;(m1.group(), m1.span()))

&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'result2....'&lt;/span&gt;)
&lt;span class=&quot;cf&quot;&gt;for&lt;/span&gt; m2 &lt;span class=&quot;op&quot;&gt;in&lt;/span&gt; result2:
    &lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;matching string:{} position:{}&quot;&lt;/span&gt;.&lt;span class=&quot;bu&quot;&gt;format&lt;/span&gt;(m2.group(), m2.span()))&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;执行结果：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;17&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;bu&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'callable-iterator'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;bu&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'callable-iterator'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;
result1.
matching string: &lt;span class=&quot;dv&quot;&gt;123456&lt;/span&gt;, position: (&lt;span class=&quot;dv&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;12&lt;/span&gt;)
matching string: &lt;span class=&quot;dv&quot;&gt;789&lt;/span&gt;, position: (&lt;span class=&quot;dv&quot;&gt;13&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;16&lt;/span&gt;)
result2
matching string: &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;, position: (&lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;)
matching string: &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;, position: (&lt;span class=&quot;dv&quot;&gt;7&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;8&lt;/span&gt;)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;split 方法&lt;/strong&gt;&lt;br/&gt;split方法按照能够匹配的子串将字符串分割后返回列表，它的使用形式如下：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;split(string[, maxsplit])&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;其中，maxsplit用于指导最大分割次数，不知道静全部分割。&lt;br/&gt;看看例子：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; re
p &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; re.&lt;span class=&quot;bu&quot;&gt;compile&lt;/span&gt;(&lt;span class=&quot;vs&quot;&gt;r'[\s\,;]+'&lt;/span&gt;)
&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(p.split(&lt;span class=&quot;st&quot;&gt;'a,b;;c   d'&lt;/span&gt;))&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;执行结果：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;[&lt;span class=&quot;st&quot;&gt;'a'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'b'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'c'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'d'&lt;/span&gt;]&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;sub方法&lt;/strong&gt;&lt;br/&gt;sub方法用于替换。它的使用形式如下：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;sub(repl, string[, count])&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;其中，repl可以是字符串也可以是一函数：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;如果repl是字符串，则会使用repl去替换字符串每一个匹配的子串，并返回替换后的字符串，repl还可以使用id的形式来引用过分组，但不能使用编号0；&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;如果repl是函数，这个方法应当只接受一个参数(Match对象)，并返回一个字符串用于替换(返回的字符串中不能再引用分组)。&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;count用于指导最多替换次数，不指定时全部替换。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;看看例子：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;15&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; re
p &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; re.&lt;span class=&quot;bu&quot;&gt;compile&lt;/span&gt;(&lt;span class=&quot;vs&quot;&gt;r'(\w+) (\w+)'&lt;/span&gt;)  &lt;span class=&quot;co&quot;&gt;#\w=[A-Za-z0-9]&lt;/span&gt;
s &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'hello 123, hello 456'&lt;/span&gt;

&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(p.sub(&lt;span class=&quot;vs&quot;&gt;r'hello world'&lt;/span&gt;, s))   &lt;span class=&quot;co&quot;&gt;#使用'hello world'替换'hello 123'和'hello 456'&lt;/span&gt;
&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(p.sub(&lt;span class=&quot;vs&quot;&gt;r'\2 \1'&lt;/span&gt;, s))

&lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; func(m):
    &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'hi'&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;' '&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; m.group(&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;)

&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(p.sub(func, s))
&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(p.sub(func, s, &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;))&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;执行结果：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;hello world, hello world
&lt;span class=&quot;dv&quot;&gt;123&lt;/span&gt; hello, &lt;span class=&quot;dv&quot;&gt;456&lt;/span&gt; hello
hi &lt;span class=&quot;dv&quot;&gt;123&lt;/span&gt;, hi &lt;span class=&quot;dv&quot;&gt;456&lt;/span&gt;
hi &lt;span class=&quot;dv&quot;&gt;123&lt;/span&gt;, hello &lt;span class=&quot;dv&quot;&gt;456&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;匹配中文&lt;/strong&gt;&lt;br/&gt;在某些情况下，我们想要匹配文本中的汉字，有一点需要注意的是，中文的unicode编码范围主要在[u4e00-u9fa5]，这里说主要是因为这个范围并不完整，比如没有包括全角(中文)标点，不过，在大部分情况下，应该是够用的。&lt;br/&gt;假设现在想把字符串title=u'你好，hello，世界'中的中文提取出来，可以这么做：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; re
title &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;u'你好，hello，世界'&lt;/span&gt;
pattern &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; re.&lt;span class=&quot;bu&quot;&gt;compile&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;u'[\u4e00-\u9fa5]+'&lt;/span&gt;)
result &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; pattern.findall(title)

&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(result)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注意到，我们在正则表达式前面加上了前缀u，u表示unicode字符串。&lt;br/&gt;执行结果：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;[&lt;span class=&quot;st&quot;&gt;'你好'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'世界'&lt;/span&gt;]&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;注意：贪婪模式与非贪婪模式&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;贪婪模式：在整个表达式匹配成功的前提下，尽可能多的匹配(*);&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;非贪婪模式：在整个表达式匹配成功的前提下，尽可能少的匹配(?);&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Python里数量词默认是贪婪的。&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;h4 id=&quot;实例一源字符串abbbc&quot;&gt;实例一：源字符串：&lt;code&gt;abbbc&lt;/code&gt;&lt;/h4&gt;
&lt;ul readability=&quot;-0.5&quot;&gt;&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;使用贪婪的数量词的正则表达式&lt;code&gt;ab+&lt;/code&gt;,匹配结果：abbb。&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;*决定了尽可能多匹配b，所以a后面所有的b都出现了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li readability=&quot;0.5&quot;&gt;
&lt;p&gt;使用非贪婪的数量词的正则表达式&lt;code&gt;ab*?&lt;/code&gt;，匹配结果：a。&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;即使前面有&lt;code&gt;*&lt;/code&gt;,但是&lt;code&gt;?&lt;/code&gt;决定了尽可能少匹配b，所以没有b。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;h4 id=&quot;实例二源字符串aadivtest1divbbdivtest2divcc&quot;&gt;实例二：源字符串：&lt;code&gt;aa&amp;lt;div&amp;gt;test1&amp;lt;/div&amp;gt;bb&amp;lt;div&amp;gt;test2&amp;lt;/div&amp;gt;cc&lt;/code&gt;&lt;/h4&gt;
&lt;h3 id=&quot;参考&quot;&gt;参考&lt;/h3&gt;
&lt;ol&gt;&lt;li&gt;&lt;a href=&quot;http://tool.oschina.net/regex/&quot;&gt;正则表达式测试网址&lt;/a&gt;&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/00143193331387014ccd1040c814dee8b2164bb4f064cff000&quot;&gt;廖雪峰-正则表达式&lt;/a&gt;&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.csdn.net/silence2015/article/details/60321873&quot;&gt;Python正则匹配中文与编码总结&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</description>
<pubDate>Tue, 07 Nov 2017 14:53:00 +0000</pubDate>
<dc:creator>小破孩92</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/miqi1992/p/7801662.html</dc:identifier>
</item>
<item>
<title>让盒子两端对齐小技巧 =&gt; inline-block - queen_live</title>
<link>http://www.cnblogs.com/queen-live/p/7795727.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/queen-live/p/7795727.html</guid>
<description>&lt;div readability=&quot;43&quot;&gt;
&lt;pre&gt;
今天在项目中碰到了设计盒子两端对齐的栗子，咱们用inline-block方法轻松的解决了，下面是我的经验：&lt;br/&gt;　　原理： 利用文字text-align：justify; 操纵inline-block盒子，能够实现盒子两端对齐。&lt;br/&gt;&lt;/pre&gt;
&lt;pre&gt;
　　说明： inline-block元素 会按照基线对齐的方式两列，给这个元素的父盒子设置一个text-align：justify； 即可实现两端对齐的功能
&lt;/pre&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html &lt;/span&gt;&lt;span&gt;lang&lt;/span&gt;&lt;span&gt;=&quot;en&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;=&quot;UTF-8&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;盒子两端对齐&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;style &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;text/css&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;        * &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;            margin&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 0&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt; &lt;span&gt;            padding&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 0&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt;         &lt;span&gt;}&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt; &lt;span&gt;        html,body &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt; &lt;span&gt;            width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 100%&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt; &lt;span&gt;            height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 100%&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt;         &lt;span&gt;}&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt; &lt;span&gt;        .box &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt; &lt;span&gt;            width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 100%&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt; &lt;span&gt;            height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 100%&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt;             &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 设置元素两端对齐 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt; &lt;span&gt;            text-align&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; justify&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;21&lt;/span&gt;         &lt;span&gt;}&lt;/span&gt;
&lt;span&gt;22&lt;/span&gt;         &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 这里的伪元素一定要加上，不然span元素不能两端对齐 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;23&lt;/span&gt; &lt;span&gt;        .box:after &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;
&lt;span&gt;24&lt;/span&gt; &lt;span&gt;            content&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &quot;&quot;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;25&lt;/span&gt; &lt;span&gt;            display&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; inline-block&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;26&lt;/span&gt; &lt;span&gt;            overflow&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; hidden&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;27&lt;/span&gt; &lt;span&gt;            width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 100%&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;28&lt;/span&gt;         &lt;span&gt;}&lt;/span&gt;
&lt;span&gt;29&lt;/span&gt; &lt;span&gt;        .box span &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;
&lt;span&gt;30&lt;/span&gt; &lt;span&gt;            width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 50px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;31&lt;/span&gt; &lt;span&gt;            height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 50px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;32&lt;/span&gt;             &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 设置盒子为行内块 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;33&lt;/span&gt; &lt;span&gt;            display&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; inline-block&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;34&lt;/span&gt; &lt;span&gt;            background-color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; skyblue&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;35&lt;/span&gt;             &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 设置盒子内元素水平居中 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;36&lt;/span&gt; &lt;span&gt;            text-align&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; center&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;37&lt;/span&gt;             &lt;span&gt;/*&lt;/span&gt;&lt;span&gt; 设置盒子内容垂直居中 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;38&lt;/span&gt; &lt;span&gt;            line-height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 50px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
&lt;span&gt;39&lt;/span&gt;         &lt;span&gt;}&lt;/span&gt;
&lt;span&gt;40&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;41&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;42&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;box&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;43&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;1&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;44&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;2&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;45&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;3&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;46&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;4&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;47&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;5&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;48&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;49&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;50&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;pre&gt;
&lt;br/&gt;　　　&lt;br/&gt;&lt;/pre&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt; 
&lt;p&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;br/&gt;&amp;lt;html lang=&quot;en&quot;&amp;gt;&lt;br/&gt;&amp;lt;head&amp;gt;&lt;br/&gt;&amp;lt;meta charset=&quot;UTF-8&quot; /&amp;gt;&lt;br/&gt;&amp;lt;title&amp;gt;盒子两端对齐&amp;lt;/title&amp;gt;&lt;br/&gt;&amp;lt;/head&amp;gt;&lt;br/&gt;&amp;lt;style type=&quot;text/css&quot;&amp;gt;&lt;br/&gt;* {&lt;br/&gt;margin: 0;&lt;br/&gt;padding: 0;&lt;br/&gt;}&lt;br/&gt;html,body {&lt;br/&gt;width: 100%;&lt;br/&gt;height: 100%;&lt;br/&gt;}&lt;br/&gt;.box {&lt;br/&gt;width: 100%;&lt;br/&gt;height: 100%;&lt;br/&gt;/* 设置元素两端对齐 */&lt;br/&gt;text-align: justify;&lt;br/&gt;}&lt;br/&gt;/* 这里的伪元素一定要加上，不然span元素不能两端对齐 */&lt;br/&gt;.box:after {&lt;br/&gt;content: &quot;&quot;;&lt;br/&gt;display: inline-block;&lt;br/&gt;overflow: hidden;&lt;br/&gt;width: 100%;&lt;br/&gt;}&lt;br/&gt;.box span {&lt;br/&gt;width: 50px;&lt;br/&gt;height: 50px;&lt;br/&gt;/* 设置盒子为行内块 */&lt;br/&gt;display: inline-block;&lt;br/&gt;background-color: skyblue;&lt;br/&gt;/* 设置盒子内元素水平居中 */&lt;br/&gt;text-align: center;&lt;br/&gt;/* 设置盒子内容垂直居中 */&lt;br/&gt;line-height: 50px;&lt;br/&gt;}&lt;br/&gt;&amp;lt;/style&amp;gt;&lt;br/&gt;&amp;lt;body&amp;gt;&lt;br/&gt;&amp;lt;div class=&quot;box&quot;&amp;gt;&lt;br/&gt;&amp;lt;span&amp;gt;1&amp;lt;/span&amp;gt;&lt;br/&gt;&amp;lt;span&amp;gt;2&amp;lt;/span&amp;gt;&lt;br/&gt;&amp;lt;span&amp;gt;3&amp;lt;/span&amp;gt;&lt;br/&gt;&amp;lt;span&amp;gt;4&amp;lt;/span&amp;gt;&lt;br/&gt;&amp;lt;span&amp;gt;5&amp;lt;/span&amp;gt;&lt;br/&gt;&amp;lt;/div&amp;gt;&lt;br/&gt;&amp;lt;/body&amp;gt;&lt;br/&gt;&amp;lt;/html&amp;gt;&lt;/p&gt;
&lt;/div&gt;
&lt;pre&gt;
 
&lt;/pre&gt;&lt;/div&gt;&lt;p&gt; 从小就喜欢看科幻片，特别是电影里面几行代码就能够获得，然后解救全世界的神秘的人，当然最感兴趣的就是代码本身了&lt;/p&gt;</description>
<pubDate>Tue, 07 Nov 2017 14:21:00 +0000</pubDate>
<dc:creator>queen_live</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/queen-live/p/7795727.html</dc:identifier>
</item>
<item>
<title>hook in PostgreSQL初探 - 非我在</title>
<link>http://www.cnblogs.com/flying-tiger/p/7801258.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/flying-tiger/p/7801258.html</guid>
<description>&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;
&lt;p&gt;众所周知，PostgreSQL具有很好的扩展性，是一个可以&quot;开发&quot;的数据库。在PostgreSQL里面，你可以定制你自己的Types、Function、Operation，支持各种过程语言等等。还可以依据自己的喜好修改源码增加新功能。为方便扩展，PostgreSQL提供了很多有用的API、头文件扩展文件夹等等。然而其中一个很重要hook机制却不是特别为人所知，今天我们就来学习下PostgreSQL的hook机制。&lt;/p&gt;
&lt;p&gt;hook机制来源于Windows平台。钩子(Hook)，是Windows消息处理机制的一个平台,应用程序可以在上面设置子程以监视指定窗口的某种消息，当消息到达后，在目标窗口处理函数之前处理它。钩子机制允许应用程序截获处理window消息或特定事件。钩子实际上是一个处理消息的程序段，通过系统调用，把它挂入系统。每当特定的消息发出，在没有到达目的窗口前，钩子程序就先捕获该消息，亦即钩子函数先得到控制权。这时钩子函数即可以加工处理（改变）该消息，也可以不作处理而继续传递该消息，还可以强制结束消息的传递。&lt;/p&gt;
&lt;hr/&gt;&lt;h2 id=&quot;常用的hook&quot;&gt;1.常用的hook&lt;/h2&gt;
&lt;p&gt;PostgreSQL中提供了很多种hook，与上面提到的类似，但是更多的是中断和替换操作。更重要的是该机制提供了一种修改PostgreSQL内核功能却不必修改内核代码的手段，且可以轻松的加载和还原。&lt;br/&gt;首先我们还是看下PostgreSQL中都有哪些常用的hook吧。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/579102/201711/579102-20171107215123981-1661015772.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;其他的还有这些：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/579102/201711/579102-20171107215210466-1434757530.png&quot;/&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;h2 id=&quot;内部机制&quot;&gt;2.内部机制&lt;/h2&gt;
&lt;p&gt;所有的hook都和一个全局函数指针相关。在初始时该函数指针被设置为NULL，表示hook未被使用，当PostgreSQL执行到hook处的时候，如果hook为NULL它什么额外的事情也不做，但是如果hook被设置为某个函数的地址时(当然是你增加的那个函数了，通常是做成一个共享库咯)，程序就开始转向你的新增函数中，执行你所期望的各种新功能啦。&lt;/p&gt;
&lt;p&gt;那么问题来了，如何设置hook连接到你设置的共享库呢？PostgreSQL的配置文件中给出了shared_preload_libraries参数来加载你的共享库(当然了，设置完是需要重启的)。那么问题就又回到了：如何写一个被PostgreSQL所接受的共享库呢？&lt;/p&gt;
&lt;p&gt;你至少要实现这三个函数：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;_PG_init()
your_hook_function()
_PG_fini()&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;我们慢慢说。&lt;/p&gt;
&lt;p&gt;首先，当PostgreSQL加载共享库(create extension xxxx)时，它需要把共享库加载到内存中。这时需要你写一个_PG_init函数，这种函数你在PostgreSQL源码的contrib目录下很容易找到，大概就像下面这样：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;_PG_init()
{
    prev_ExecutorRun_hook = ExecutorRun_hook;
    ExecutorRun_hook = your_function_hook;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;保存当前的hook值(保证你移除修改后能够还原)，并将你的hook挂在到PostgreSQL的hook函数指针上。&lt;/p&gt;
&lt;p&gt;那么与之相对应的，你要写一个_PG_fini函数在卸载(drop extension xxxx)的时候使用,也就是移除你的hook并且把它重置为之前的指针值。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;_PG_fini()
{
    ExecutorRun_hook = prev_ExecutorRun_hook;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这两个函数加上你的hook函数（your_hook_function()）就构成了最基础的PostgreSQL的hook了。&lt;/p&gt;
&lt;hr/&gt;&lt;h2 id=&quot;举例说明&quot;&gt;3.举例说明&lt;/h2&gt;
&lt;p&gt;下面我们以上面提到的ClientAuthentication_hook举例说明吧。&lt;br/&gt;这个hook的作用是帮助你在client得到验证之后并且服务端还未给client反馈的时候运行你的代码(contrib目录下的auth_delay和sepgsql使用了这个hook)。&lt;br/&gt;首先，这个hook指针声明在&lt;br/&gt;src/include/libpq/auth.h, line 27&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;/* Hook for plugins to get control in ClientAuthentication() */
typedef void (*ClientAuthentication_hook_type) (Port *, int);
extern PGDLLIMPORT ClientAuthentication_hook_type ClientAuthentication_hook;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;它的调用点，也就是hook所在的位置是：&lt;/p&gt;
&lt;p&gt;src/backend/libpq/auth.c, line 215&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;/*
* This hook allows plugins to get control following client authentication,
* but before the user has been informed about the results. It could be used
* to record login events, insert a delay after failed authentication, etc.
*/
ClientAuthentication_hook_type ClientAuthentication_hook = NULL;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;我们可以看到该hook初始化为NULL。具体到函数里，它出现在：&lt;/p&gt;
&lt;p&gt;src/backend/libpq/auth.c, line 580&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;if (ClientAuthentication_hook)
 (*ClientAuthentication_hook) (port, status);
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这很明显，就是如果你写好了一个ClientAuthentication_hook并且通过我们上面提到的方法把它挂到了ClientAuthentication_hook上，那么你的hook就会在这里被调用。&lt;/p&gt;
&lt;p&gt;对于ClientAuthentication_hook，我们看到他有两个入参，分别是：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;port  PostGreSQL内部的一个Port结构体(定义在include/libpq/libpq-be.h)
Status  是PostgreSQL内部的状态码：STATUS_ERROR, STATUS_OK&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;那么我们写一个完整的extension吧，它的作用是 will deny connections if a specific file is present。&lt;/p&gt;
&lt;p&gt;首先写一个初始化函数初始化hook。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;static ClientAuthentication_hook_type next_client_auth_hook = NULL;
/* Module entry point */
void
_PG_init(void)
{
 next_client_auth_hook = ClientAuthentication_hook;
 ClientAuthentication_hook = my_client_auth;
} &lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;很简单，我们先保存之前的hook值，在设置上我们自己的hook函数。&lt;br/&gt;记住，初始化必须要在_PG_init函数里面做，该函数在PostgreSQL加载你的共享库的时候被调用。&lt;/p&gt;
&lt;p&gt;然后就是咱们的hook函数，在这里你自由发挥，写下你想干的事儿，比如：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;static void my_client_auth(Port *port, int status)
{
 struct stat buf;
 if (next_client_auth_hook)
    (*next_client_auth_hook) (port, status);
 if (status != STATUS_OK)
    return;
 if(!stat(&quot;/tmp/connection.stopped&quot;, &amp;amp;buf))
    ereport(FATAL, (errcode(ERRCODE_INTERNAL_ERROR),
        errmsg(&quot;Connection not authorized!!&quot;)));
} &lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这里，如果之前已经设置过ClientAuthentication_hook的话，我们不妨大方的先让他做完好了，然后如果Client的Authentication都不OK的话(都没通过验证),那我们后面的deny操作不是多余么，那就return吧。最后，我们再做我们事：如果不存在connection.stopped文件，我们拒绝connection。Wow，很cool很上帝。&lt;/p&gt;
&lt;p&gt;最后，你再写一个_PG_fini咯：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;_PG_fini(void)
{
 ClientAuthentication_hook = next_client_auth_hook;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;自此，c文件里面的活我们干完了。剩下的我们写这几个文件&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Makefile
your_extension--1.0.control
your_extension--1.0.sql&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;首先，对于Makefile我们知道是用来编译c程序的。它大概是这样：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;MODULE_big = your_hook
OBJS = your_hook.o
ifdef USE_PGXS
PG_CONFIG = pg_config
PGXS := $(shell $(PG_CONFIG) --pgxs)
include $(PGXS)
else
subdir = contrib/your_hook
top_builddir = ../..
include $(top_builddir)/src/Makefile.global
include $(top_srcdir)/contrib/contrib-global.mk
endif&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;通常你是要在PostgreSQL的源码目录结构中编译它，这样你就要在contrib目录下建立你自己的&lt;br/&gt;目录(这一点可以参考该目录下的其他extension)，然后make。如果你不想在PostgreSQL的源码目录结构中&lt;br/&gt;编译它，of course，你可以使用PGXS选项，它定义在PostgreSQL的pg_config命令里。然后你就执行make USE_PGXS=1 吧。&lt;br/&gt;当然，你需要设置pg_config到你的PATH里面。&lt;br/&gt;编译完了之后，你就make install吧，把你的共享库装载到PostgreSQL的lib目录中去。&lt;/p&gt;
&lt;p&gt;而对于剩下的两个文件最后会被安装到PostgreSQL的share/extension目录下。&lt;/p&gt;
&lt;p&gt;your_extension--1.0.control里面主要是写一些控制信息，&lt;/p&gt;
&lt;p&gt;your_extension--1.0.sql用于创建一些你需要的数据库对象，比如表，触发器，函数等等。&lt;/p&gt;
&lt;p&gt;而这两个文件在这个简单的例子里暂时用不到。我们后面再细说。&lt;/p&gt;
&lt;p&gt;在这之后把你的共享库加入到Postgreql.conf文件的shared_preload_libraries中,重启数据库。&lt;/p&gt;
&lt;p&gt;然后你就尽情的用起来吧。&lt;/p&gt;
&lt;p&gt;这里说的比较简单，敬请期待第二部进阶版+_+&lt;/p&gt;
&lt;p&gt;参考文献：&lt;a href=&quot;http://wiki.postgresql.org/images/e/e3/Hooks_in_postgresql.pdf&quot; class=&quot;uri&quot;&gt;http://wiki.postgresql.org/images/e/e3/Hooks_in_postgresql.pdf&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Tue, 07 Nov 2017 14:21:00 +0000</pubDate>
<dc:creator>非我在</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/flying-tiger/p/7801258.html</dc:identifier>
</item>
<item>
<title>.NET项目从CI到CD-Jenkins_Pipeline的应用 - ofnhkb1</title>
<link>http://www.cnblogs.com/ofnhkb1/p/7801220.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/ofnhkb1/p/7801220.html</guid>
<description>&lt;h2&gt;一、罗里吧嗦&lt;/h2&gt;
&lt;p&gt;最近迁移了服务器，顺道完善下服役了一两年的Jenkins服务，主要是把Slave搭建起来，还有等等。本文只是我对Jenkins Pipeline的一些自己的理解与应用，欢迎指出错误，欢迎交流高级应用&lt;/p&gt;
&lt;h2&gt;二、运行环境&lt;/h2&gt;
&lt;h4&gt;Jenkins：&lt;/h4&gt;
&lt;ol&gt;&lt;li&gt;master：阿里云Windows_2016_x64&lt;/li&gt;
&lt;li&gt;Slave1：京东云Windows_2008_r2_x64&lt;/li&gt;
&lt;li&gt;Slave2：阿里云Windows_2008_r2_x86&lt;/li&gt;
&lt;/ol&gt;&lt;h4&gt;版本管理器：自建的git服务器，使用gogs&lt;/h4&gt;
&lt;h4&gt;.NET项目：使用VS2017新建的一个web mvc项目与一个windows service项目，项目上传至git服务器&lt;/h4&gt;
&lt;h4&gt;一些辅助工具：&lt;/h4&gt;
&lt;ol&gt;&lt;li&gt;7-zip：作为压缩 解压&lt;/li&gt;
&lt;li&gt;ossutil：阿里云oss服务工具&lt;/li&gt;
&lt;li&gt;nuget：还原解决方案引用包&lt;/li&gt;
&lt;li&gt;MSBuild：编译项目&lt;/li&gt;
&lt;/ol&gt;&lt;h3&gt;三、开始&lt;/h3&gt;
&lt;p&gt;首先新建.NET项目，新建一个web项目与windows service项目，步骤略&lt;/p&gt;
&lt;p&gt;其次，在自行安装Jenkins，步骤略&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;新建Jenkins项目，类型选择Pipeline，命名为JenkinsPipelineProject&lt;/p&gt;
&lt;p&gt;整体流程如下&lt;/p&gt;
&lt;p&gt;start-&amp;gt;检出代码-&amp;gt;还原引用包-&amp;gt;编译-&amp;gt;打包-&amp;gt;上传OSS-&amp;gt;分发slave-&amp;gt;发布web-&amp;gt;发布Service-&amp;gt;end&lt;/p&gt;
&lt;h4&gt;各步骤：&lt;/h4&gt;
&lt;p&gt;检出代码：使用内置的工具进行代码的检出，如我使用的是git&lt;/p&gt;
&lt;p&gt;还原引用包：使用nuget.exe对解决方案进行引用包还原，包源可选国内节点，国内节点下载速度框&lt;/p&gt;
&lt;p&gt;编译：此处进行了两次编译，一次编译web，一次编译Service&lt;/p&gt;
&lt;p&gt;打包：并行进行，对编译步骤得到的文件进行打包(使用7zip)，存放于本地路径上，打包时，会删除相关配置文件，配置文件为手动更新&lt;/p&gt;
&lt;p&gt;上传OSS：对刚打包好的更新包进行上传，因两台服务器处于阿里云内网，所以采用阿里云的OSS，更新速度快&lt;/p&gt;
&lt;p&gt;分发Slave：根据配置的节点，进行更新web和service操作&lt;/p&gt;
&lt;p&gt;发布web：首先从OSS下载文件下来， 停止站点(非停止IIS)，使用7zip进行解压文件，更新文件，更新完毕后启动站点，如有多台服务器需要更新，则并行执行，互不干扰&lt;/p&gt;
&lt;p&gt;发布Service：首先从OSS下载文件下来，停止对应的windows服务，卸载对应的windows服务，如若失败，则进行强制删除windows服务，之后使用7zip进行文件的解压更新，更新完毕后安装服务，并启动服务&lt;/p&gt;
&lt;p&gt;以下为具体的Pipeline代码&lt;/p&gt;
&lt;p&gt;注：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;代码中所需的配置为我自己本身项目需要，如若更改，可根据自己项目进行定制&lt;/li&gt;
&lt;li&gt;代码中一些敏感的配置已用xxxx代替&lt;/li&gt;
&lt;li&gt;仅用于参考&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;53&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;编译服务器设置start&lt;/span&gt;
def buildNodeSettings =&lt;span&gt; [:]
buildNodeSettings.node &lt;/span&gt;= '阿里云Windows_2008_r2_x86'&lt;span&gt;//&lt;/span&gt;&lt;span&gt;编译服务器节点设置&lt;/span&gt;
buildNodeSettings.gitUrl = 'https://xxx/JenkinsPipelineProject.git'&lt;span&gt;//&lt;/span&gt;&lt;span&gt;git地址&lt;/span&gt;
buildNodeSettings.gitBarnches = '*/master' &lt;span&gt;//&lt;/span&gt;&lt;span&gt;分支&lt;/span&gt;
buildNodeSettings.slnFile = 'JenkinsPipelineProject.sln' &lt;span&gt;//&lt;/span&gt;&lt;span&gt;Nuget还原解决方案名&lt;/span&gt;
&lt;span&gt;
buildNodeSettings.buildFileForWeb &lt;/span&gt;='JenkinsPipelineProjectWeb\\JenkinsPipelineProjectWeb.csproj' &lt;span&gt;//&lt;/span&gt;&lt;span&gt;msbulid编译文件名 web&lt;/span&gt;
buildNodeSettings.msbuildArgForWeb = '/t:Rebuild /p:Configuration=Release;PublishProfile=FolderProfile;DeployOnBuild=true' &lt;span&gt;//&lt;/span&gt;&lt;span&gt;msbulid参数 web&lt;/span&gt;
buildNodeSettings.publishOutputForWeb = '\\JenkinsPipelineProjectWeb\\bin\\Release\\PublishOutput' &lt;span&gt;//&lt;/span&gt;&lt;span&gt;编译后发布的路径 web&lt;/span&gt;
buildNodeSettings.publishFileNameForWeb = env.JOB_NAME + '/Build-Web-' +env.BUILD_NUMBER + '.7z'  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;文件名 &lt;/span&gt;
buildNodeSettings.delFilesForWeb = [&quot;Web.config&quot;,&quot;Web.Debug.config&quot;,&quot;Web.Release.config&quot;] as String[]  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;需要删除的文件&lt;/span&gt;
&lt;span&gt;
buildNodeSettings.buildFileForService &lt;/span&gt;='JenkinsPipelineProject.sln' &lt;span&gt;//&lt;/span&gt;&lt;span&gt;msbulid编译文件名 Service&lt;/span&gt;
buildNodeSettings.msbuildArgForService = '/t:Rebuild /p:Configuration=Release' &lt;span&gt;//&lt;/span&gt;&lt;span&gt;msbulid参数 Service&lt;/span&gt;
buildNodeSettings.publishOutputForService = '\\JenkinsPipelineProjectWindowsService\\bin\\Release' &lt;span&gt;//&lt;/span&gt;&lt;span&gt;编译后发布的路径 Service&lt;/span&gt;
buildNodeSettings.publishFileNameForService = env.JOB_NAME + '/Build-Service-' +env.BUILD_NUMBER + '.7z'  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;文件名 &lt;/span&gt;
buildNodeSettings.delFilesForService = [&quot;*.config&quot;] as String[]  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;需要删除的文件&lt;/span&gt;
&lt;span&gt;
buildNodeSettings.updateServerPath &lt;/span&gt;= 'D:\\WebRoot\\update\\public_html\\'&lt;span&gt;//&lt;/span&gt;&lt;span&gt;更新服务器存放包地址
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;编译服务器设置end&lt;/span&gt;
&lt;span&gt;
def webNodeSetting &lt;/span&gt;=&lt;span&gt; [:]
webNodeSetting.node &lt;/span&gt;= '阿里云Windows_2008_r2_x86' &lt;span&gt;//&lt;/span&gt;&lt;span&gt;Web服务器节点&lt;/span&gt;
webNodeSetting.downloadPath = 'C:\\Jenkins\\download\\'&lt;span&gt;//&lt;/span&gt;&lt;span&gt;更新包下载地址&lt;/span&gt;
webNodeSetting.publishPath = 'D:\\WebRoot\\JenkinsPipelinePorject\\Web' &lt;span&gt;//&lt;/span&gt;&lt;span&gt;web服务器网站根目录&lt;/span&gt;
webNodeSetting.webApplicationName = 'JenkinsPipelinePorject'&lt;span&gt;//&lt;/span&gt;&lt;span&gt;web站点名称&lt;/span&gt;
&lt;span&gt;
def webNodeSetting2 &lt;/span&gt;=&lt;span&gt; [:]
webNodeSetting2.node &lt;/span&gt;= 'master' &lt;span&gt;//&lt;/span&gt;&lt;span&gt;Web服务器节点&lt;/span&gt;
webNodeSetting2.downloadPath = 'C:\\JenkinsDownload\\'&lt;span&gt;//&lt;/span&gt;&lt;span&gt;更新包下载地址&lt;/span&gt;
webNodeSetting2.publishPath = 'D:\\WebRoot\\JenkinsPipelinePorject\\Web' &lt;span&gt;//&lt;/span&gt;&lt;span&gt;web服务器网站根目录&lt;/span&gt;
webNodeSetting2.webApplicationName = 'JenkinsPipelinePorject'&lt;span&gt;//&lt;/span&gt;&lt;span&gt;web站点名称&lt;/span&gt;
&lt;span&gt;
def webNodeSetting3 &lt;/span&gt;=&lt;span&gt; [:]
webNodeSetting3.node &lt;/span&gt;= '京东云Windows_2008_r2_x64' &lt;span&gt;//&lt;/span&gt;&lt;span&gt;Web服务器节点&lt;/span&gt;
webNodeSetting3.downloadPath = 'C:\\Jenkins\\download\\'&lt;span&gt;//&lt;/span&gt;&lt;span&gt;更新包下载地址&lt;/span&gt;
webNodeSetting3.publishPath = 'C:\\WebRoot\\JenkinsPipelinePorject\\Web' &lt;span&gt;//&lt;/span&gt;&lt;span&gt;web服务器网站根目录&lt;/span&gt;
webNodeSetting3.webApplicationName = 'JenkinsPipelinePorject'&lt;span&gt;//&lt;/span&gt;&lt;span&gt;web站点名称&lt;/span&gt;
&lt;span&gt;
def serviceNodeSetting &lt;/span&gt;=&lt;span&gt; [:]
serviceNodeSetting.node &lt;/span&gt;= '阿里云Windows_2008_r2_x86'&lt;span&gt;
serviceNodeSetting.downloadPath &lt;/span&gt;= 'C:\\Jenkins\\download\\'&lt;span&gt;//&lt;/span&gt;&lt;span&gt;更新包下载地址&lt;/span&gt;
serviceNodeSetting.publishPath = 'D:\\WebRoot\\JenkinsPipelinePorject\\Service' &lt;span&gt;//&lt;/span&gt;&lt;span&gt;Service Windows Service存放路径&lt;/span&gt;
serviceNodeSetting.serviceName = 'JenkinsPipelineProject'&lt;span&gt;//&lt;/span&gt;&lt;span&gt;服务名称&lt;/span&gt;
serviceNodeSetting.serviceFileName = 'JenkinsPipelineProjectWindowsService.exe' &lt;span&gt;//&lt;/span&gt;&lt;span&gt;服务的文件名，相对publishPath的路径&lt;/span&gt;
&lt;span&gt;
def serviceNodeSetting2 &lt;/span&gt;=&lt;span&gt; [:]
serviceNodeSetting2.node &lt;/span&gt;= 'master'&lt;span&gt;
serviceNodeSetting2.downloadPath &lt;/span&gt;= 'C:\\Jenkins\\download\\'&lt;span&gt;//&lt;/span&gt;&lt;span&gt;更新包下载地址&lt;/span&gt;
serviceNodeSetting2.publishPath = 'D:\\WebRoot\\JenkinsPipelinePorject\\Service' &lt;span&gt;//&lt;/span&gt;&lt;span&gt;Service Windows Service存放路径&lt;/span&gt;
serviceNodeSetting2.serviceName = 'JenkinsPipelineProject'&lt;span&gt;//&lt;/span&gt;&lt;span&gt;服务名称&lt;/span&gt;
serviceNodeSetting2.serviceFileName = 'JenkinsPipelineProjectWindowsService.exe' &lt;span&gt;//&lt;/span&gt;&lt;span&gt;服务的文件名，相对publishPath的路径&lt;/span&gt;
&lt;span&gt;
def serviceNodeSetting3 &lt;/span&gt;=&lt;span&gt; [:]
serviceNodeSetting3.node &lt;/span&gt;= '京东云Windows_2008_r2_x64'&lt;span&gt;
serviceNodeSetting3.downloadPath &lt;/span&gt;= 'C:\\Jenkins\\download\\'&lt;span&gt;//&lt;/span&gt;&lt;span&gt;更新包下载地址&lt;/span&gt;
serviceNodeSetting3.publishPath = 'C:\\WebRoot\\JenkinsPipelinePorject\\Service' &lt;span&gt;//&lt;/span&gt;&lt;span&gt;Service Windows Service存放路径&lt;/span&gt;
serviceNodeSetting3.serviceName = 'JenkinsPipelineProject'&lt;span&gt;//&lt;/span&gt;&lt;span&gt;服务名称&lt;/span&gt;
serviceNodeSetting3.serviceFileName = 'JenkinsPipelineProjectWindowsService.exe' &lt;span&gt;//&lt;/span&gt;&lt;span&gt;服务的文件名，相对publishPath的路径&lt;/span&gt;
&lt;span&gt;
node(buildNodeSettings.node) {

    def msbuild&lt;/span&gt;=tool name: 'MSBuildTool V14.0', type: 'msbuild' &lt;span&gt;//&lt;/span&gt;&lt;span&gt;编译工具名称与地址&lt;/span&gt;
    buildNodeSettings.publishOutputForWeb  = env.WORKSPACE +&lt;span&gt; buildNodeSettings.publishOutputForWeb 
    buildNodeSettings.publishOutputForService  &lt;/span&gt;= env.WORKSPACE +&lt;span&gt; buildNodeSettings.publishOutputForService 
    
    stage(&lt;/span&gt;'Check Out'&lt;span&gt;)
    {
        echo &lt;/span&gt;'检出项目'&lt;span&gt;
        checkout([$&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;: 'GitSCM', branches: [[name: buildNodeSettings.gitBarnches]], doGenerateSubmoduleConfigurations: &lt;span&gt;false&lt;/span&gt;, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'xxxxxx'&lt;span&gt;, url: buildNodeSettings.gitUrl]]])
    }
    
    stage(&lt;/span&gt;'Nuget Restore'&lt;span&gt;)
    {
        echo &lt;/span&gt;' 还原nuget '&lt;span&gt;
        echo &lt;/span&gt;'${env.nuget} restore &quot;' + env.WORKSPACE + '/' + buildNodeSettings.slnFile + '&quot; -ConfigFile &quot;' + env.config + '&quot; -NoCache'&lt;span&gt;
        bat env.nuget &lt;/span&gt;+ ' restore &quot;' + env.WORKSPACE + '/' + buildNodeSettings.slnFile + '&quot; -ConfigFile &quot;' + env.config + '&quot; -NoCache'&lt;span&gt;
    }
        
    stage(&lt;/span&gt;'Bulid'&lt;span&gt;)
    {
        echo &lt;/span&gt;' 编译项目'&lt;span&gt;
        echo &lt;/span&gt;'Bulid Web'&lt;span&gt;
        bat &lt;/span&gt;'&quot;' + msbuild + '&quot; ' + buildNodeSettings.msbuildArgForWeb + ' &quot;' + env.WORKSPACE + '/' + buildNodeSettings.buildFileForWeb + '&quot;'&lt;span&gt;
        echo &lt;/span&gt;'Bulid Service'&lt;span&gt;
        bat &lt;/span&gt;'&quot;' + msbuild + '&quot; ' + buildNodeSettings.msbuildArgForService + ' &quot;' + env.WORKSPACE + '/' + buildNodeSettings.buildFileForService + '&quot;'&lt;span&gt;
    }

    stage(&lt;/span&gt;'Pack'&lt;span&gt;) {
        parallel PackWeb:{
            echo &lt;/span&gt;'删除相关配置文件'&lt;span&gt;
            buildNodeSettings.delFilesForWeb.each{
                echo &lt;/span&gt;'删除文件：' +&lt;span&gt; it
                def filepath &lt;/span&gt;='&quot;' + buildNodeSettings.publishOutputForWeb.replace(&quot;/&quot;,&quot;\\&quot;) + '\\' + it + '&quot;'&lt;span&gt;
                bat &lt;/span&gt;'if exist '+ filepath +' del ' +&lt;span&gt; filepath
            }
            echo &lt;/span&gt;' 发布到更新系统'&lt;span&gt;
            bat &lt;/span&gt;'if not exist &quot;' + buildNodeSettings.updateServerPath + env.JOB_NAME + '&quot; md &quot;' + buildNodeSettings.updateServerPath + env.JOB_NAME + '&quot;'&lt;span&gt;
            bat &lt;/span&gt;'&quot;' + env.zip + '&quot;'+ ' a -r &quot;' + buildNodeSettings.updateServerPath + buildNodeSettings.publishFileNameForWeb + '&quot; &quot;' + buildNodeSettings.publishOutputForWeb + '\\*&quot;'&lt;span&gt;
            echo &lt;/span&gt;'压缩完成'&lt;span&gt;
            echo &lt;/span&gt;'上传oss'&lt;span&gt;
            bat env.oss &lt;/span&gt;+ ' -c ' + env.ossconfig + ' cp &quot;' + buildNodeSettings.updateServerPath + buildNodeSettings.publishFileNameForWeb + '&quot; &quot;oss://xxxx/' + buildNodeSettings.publishFileNameForWeb +'&quot;'&lt;span&gt;
        },
        PackService:{
            echo &lt;/span&gt;'删除相关配置文件'&lt;span&gt;
            buildNodeSettings.delFilesForService.each{
                echo &lt;/span&gt;'删除文件：' +&lt;span&gt; it
                def filepath &lt;/span&gt;='&quot;' + buildNodeSettings.publishOutputForService.replace(&quot;/&quot;,&quot;\\&quot;) + '\\' + it + '&quot;'&lt;span&gt;
                bat &lt;/span&gt;'if exist '+ filepath +' del ' +&lt;span&gt; filepath
            }
            echo &lt;/span&gt;' 发布到更新系统'&lt;span&gt;
             bat &lt;/span&gt;'if not exist &quot;' + buildNodeSettings.updateServerPath + env.JOB_NAME + '&quot; md &quot;' + buildNodeSettings.updateServerPath + env.JOB_NAME + '&quot;'&lt;span&gt;
            bat &lt;/span&gt;'&quot;' + env.zip + '&quot;'+ ' a -r &quot;' + buildNodeSettings.updateServerPath + buildNodeSettings.publishFileNameForService + '&quot; &quot;' + buildNodeSettings.publishOutputForService + '\\*&quot;'&lt;span&gt;
            echo &lt;/span&gt;'压缩完成'&lt;span&gt;
            echo &lt;/span&gt;'上传oss'&lt;span&gt;
            bat env.oss &lt;/span&gt;+ ' -c ' + env.ossconfig + ' cp &quot;' + buildNodeSettings.updateServerPath + buildNodeSettings.publishFileNameForService + '&quot; &quot;oss://xxxx/' + buildNodeSettings.publishFileNameForService +'&quot;'&lt;span&gt;
        }
    }

    stage(&lt;/span&gt;'Clear'&lt;span&gt;)
    {
        echo &lt;/span&gt;'清理工作目录'&lt;span&gt;
        deleteDir()
    }
}

stage(&lt;/span&gt;'Publish Web'&lt;span&gt;)
{
    parallel publishWeb1:{
        node(webNodeSetting.node)
        {
            echo &lt;/span&gt;'发布web'&lt;span&gt;
            echo &lt;/span&gt;'更新文件'&lt;span&gt;
            echo &lt;/span&gt;'更新文件下载地址为：http://xxxx/' +&lt;span&gt; buildNodeSettings.publishFileNameForWeb
            echo &lt;/span&gt;'下载文件'&lt;span&gt;
            bat env.oss &lt;/span&gt;+ ' -c ' + env.ossconfig + ' cp  &quot;oss://xxxx/' + buildNodeSettings.publishFileNameForWeb + '&quot; ' +&lt;span&gt; webNodeSetting.downloadPath
            echo &lt;/span&gt;'文件下载完成'&lt;span&gt;
            echo &lt;/span&gt;'停止站点'&lt;span&gt;
            bat &lt;/span&gt;'C:\\Windows\\System32\\inetsrv\\appcmd.exe stop site &quot;' + webNodeSetting.webApplicationName + '&quot;'&lt;span&gt;
            bat &lt;/span&gt;'&quot;' + env.zip + '&quot; x &quot;'+ webNodeSetting.downloadPath + buildNodeSettings.publishFileNameForWeb + '&quot; -y -o&quot;' + webNodeSetting.publishPath + '&quot;'&lt;span&gt;
            echo &lt;/span&gt;'启动站点'&lt;span&gt;
            bat &lt;/span&gt;'C:\\Windows\\System32\\inetsrv\\appcmd.exe start site &quot;' + webNodeSetting.webApplicationName+ '&quot;'&lt;span&gt;
        }
    },
    publishWeb2:{
        node(webNodeSetting2.node)
        {
            echo &lt;/span&gt;'发布web'&lt;span&gt;
            echo &lt;/span&gt;'更新文件'&lt;span&gt;
            echo &lt;/span&gt;'更新文件下载地址为：http://xxxx/' +&lt;span&gt; buildNodeSettings.publishFileNameForWeb
            echo &lt;/span&gt;'下载文件'&lt;span&gt;
            bat env.oss &lt;/span&gt;+ ' -c ' + env.ossconfig + ' cp  &quot;oss://xxxx/' + buildNodeSettings.publishFileNameForWeb + '&quot; ' +&lt;span&gt; webNodeSetting2.downloadPath
            echo &lt;/span&gt;'文件下载完成'&lt;span&gt;
            echo &lt;/span&gt;'停止站点'&lt;span&gt;
            bat &lt;/span&gt;'C:\\Windows\\System32\\inetsrv\\appcmd.exe stop site &quot;' + webNodeSetting2.webApplicationName + '&quot;'&lt;span&gt;
            bat &lt;/span&gt;'&quot;' + env.zip + '&quot; x &quot;'+ webNodeSetting2.downloadPath + buildNodeSettings.publishFileNameForWeb + '&quot; -y -o&quot;' + webNodeSetting2.publishPath + '&quot;'&lt;span&gt;
            echo &lt;/span&gt;'启动站点'&lt;span&gt;
            bat &lt;/span&gt;'C:\\Windows\\System32\\inetsrv\\appcmd.exe start site &quot;' + webNodeSetting2.webApplicationName+ '&quot;'&lt;span&gt;
        }
    },
    publishWeb3:{
        node(webNodeSetting3.node)
        {
            withEnv([&lt;/span&gt;'oss=C:\\Tools\\oss\\ossutil.exe', 'ossconfig=C:\\Tools\\oss\\config']) {&lt;span&gt;//&lt;/span&gt;&lt;span&gt;需要手动设置变量&lt;/span&gt;
                echo '发布web'&lt;span&gt;
                echo &lt;/span&gt;'更新文件'&lt;span&gt;
                echo &lt;/span&gt;'更新文件下载地址为：http://xxxx/' +&lt;span&gt; buildNodeSettings.publishFileNameForWeb
                echo &lt;/span&gt;'下载文件'&lt;span&gt;
                bat env.oss &lt;/span&gt;+ ' -c ' + env.ossconfig + ' cp  &quot;oss://xxxx/' + buildNodeSettings.publishFileNameForWeb + '&quot; ' +&lt;span&gt; webNodeSetting3.downloadPath
                echo &lt;/span&gt;'文件下载完成'&lt;span&gt;
                echo &lt;/span&gt;'停止站点'&lt;span&gt;
                bat &lt;/span&gt;'C:\\Windows\\System32\\inetsrv\\appcmd.exe stop site &quot;' + webNodeSetting3.webApplicationName + '&quot;'&lt;span&gt;
                bat &lt;/span&gt;'&quot;' + env.zip + '&quot; x &quot;'+ webNodeSetting3.downloadPath + buildNodeSettings.publishFileNameForWeb + '&quot; -y -o&quot;' + webNodeSetting3.publishPath + '&quot;'&lt;span&gt;
                echo &lt;/span&gt;'启动站点'&lt;span&gt;
                bat &lt;/span&gt;'C:\\Windows\\System32\\inetsrv\\appcmd.exe start site &quot;' + webNodeSetting3.webApplicationName+ '&quot;'&lt;span&gt;
            }
        }
    }
}

stage(&lt;/span&gt;'Publish Service'&lt;span&gt;)
{
    parallel publishService1:
    {
        node(serviceNodeSetting.node){
            
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;发布windows service&lt;/span&gt;
            echo '发布Service'&lt;span&gt;
            echo &lt;/span&gt;'下载文件'&lt;span&gt;
            bat env.oss &lt;/span&gt;+ ' -c ' + env.ossconfig + ' cp  &quot;oss://xxxx/' + buildNodeSettings.publishFileNameForService + '&quot; ' +&lt;span&gt; serviceNodeSetting.downloadPath
            echo &lt;/span&gt;'卸载Windows Services'
            &lt;span&gt;try&lt;/span&gt;&lt;span&gt;{
                bat &lt;/span&gt;'net stop ' +&lt;span&gt; serviceNodeSetting.serviceName
                bat env.InstallUtil &lt;/span&gt;+ ' -u ' +&lt;span&gt; serviceNodeSetting.serviceName
            }&lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt;(ex)
            {
                echo &lt;/span&gt;'卸载失败：' +&lt;span&gt; ex
                &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt;{
                    bat &lt;/span&gt;'sc delete ' +&lt;span&gt; serviceNodeSetting.serviceName
                }&lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt;(ex2)
                {
                    echo &lt;/span&gt;'强制删除失败：' +&lt;span&gt;ex2
                }
            }
            echo &lt;/span&gt;'解压文件'&lt;span&gt;
            bat &lt;/span&gt;'&quot;' + env.zip + '&quot; x &quot;'+ serviceNodeSetting.downloadPath + buildNodeSettings.publishFileNameForService + '&quot; -y -o&quot;' + serviceNodeSetting.publishPath + '&quot;'&lt;span&gt;
            echo &lt;/span&gt;'服务安装'&lt;span&gt;
            bat env.InstallUtil &lt;/span&gt;+ ' ' + serviceNodeSetting.publishPath + '\\' + serviceNodeSetting.serviceFileName + ' /name='+ serviceNodeSetting.serviceName + ' /display=' + serviceNodeSetting.serviceName + ' /desc=' +&lt;span&gt; serviceNodeSetting.serviceName
            echo &lt;/span&gt;'启动服务'&lt;span&gt;
            bat &lt;/span&gt;'net start ' +&lt;span&gt; serviceNodeSetting.serviceName
            
        }
    },
    publishService2:
    {
        node(serviceNodeSetting2.node){
            
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;发布windows service&lt;/span&gt;
            echo '发布Service'&lt;span&gt;
            echo &lt;/span&gt;'下载文件'&lt;span&gt;
            bat env.oss &lt;/span&gt;+ ' -c ' + env.ossconfig + ' cp  &quot;oss://xxxx/' + buildNodeSettings.publishFileNameForService + '&quot; ' +&lt;span&gt; serviceNodeSetting2.downloadPath
            echo &lt;/span&gt;'卸载Windows Services'
            &lt;span&gt;try&lt;/span&gt;&lt;span&gt;{
                bat &lt;/span&gt;'net stop ' +&lt;span&gt; serviceNodeSetting2.serviceName
                bat env.InstallUtil &lt;/span&gt;+ ' -u ' +&lt;span&gt; serviceNodeSetting2.serviceName
            }&lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt;(ex)
            {
                echo &lt;/span&gt;'卸载失败：' +&lt;span&gt; ex
                &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt;{
                    bat &lt;/span&gt;'sc delete ' +&lt;span&gt; serviceNodeSetting2.serviceName
                }&lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt;(ex2)
                {
                    echo &lt;/span&gt;'强制删除失败：' +&lt;span&gt;ex2
                }
            }
            echo &lt;/span&gt;'解压文件'&lt;span&gt;
            bat &lt;/span&gt;'&quot;' + env.zip + '&quot; x &quot;'+ serviceNodeSetting2.downloadPath + buildNodeSettings.publishFileNameForService + '&quot; -y -o&quot;' + serviceNodeSetting2.publishPath + '&quot;'&lt;span&gt;
            echo &lt;/span&gt;'服务安装'&lt;span&gt;
            bat env.InstallUtil &lt;/span&gt;+ ' ' + serviceNodeSetting2.publishPath + '\\' + serviceNodeSetting2.serviceFileName + ' /name='+ serviceNodeSetting2.serviceName + ' /display=' + serviceNodeSetting2.serviceName + ' /desc=' +&lt;span&gt; serviceNodeSetting2.serviceName
            echo &lt;/span&gt;'启动服务'&lt;span&gt;
            bat &lt;/span&gt;'net start ' +&lt;span&gt; serviceNodeSetting2.serviceName
            
        }
    },
    publishService3:
    {
        node(serviceNodeSetting3.node){
            withEnv([&lt;/span&gt;'oss=C:\\Tools\\oss\\ossutil.exe', 'ossconfig=C:\\Tools\\oss\\config']) {&lt;span&gt;//&lt;/span&gt;&lt;span&gt;需要手动设置变量
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;发布windows service&lt;/span&gt;
                echo '发布Service'&lt;span&gt;
                echo &lt;/span&gt;'下载文件'&lt;span&gt;
                bat env.oss &lt;/span&gt;+ ' -c ' + env.ossconfig + ' cp  &quot;oss://xxxx/' + buildNodeSettings.publishFileNameForService + '&quot; ' +&lt;span&gt; serviceNodeSetting3.downloadPath
                echo &lt;/span&gt;'卸载Windows Services'
                &lt;span&gt;try&lt;/span&gt;&lt;span&gt;{
                    bat &lt;/span&gt;'net stop ' +&lt;span&gt; serviceNodeSetting3.serviceName
                    bat env.InstallUtil &lt;/span&gt;+ ' -u ' +&lt;span&gt; serviceNodeSetting3.serviceName
                }&lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt;(ex)
                {
                    echo &lt;/span&gt;'卸载失败：' +&lt;span&gt; ex
                    &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt;{
                        bat &lt;/span&gt;'sc delete ' +&lt;span&gt; serviceNodeSetting3.serviceName
                    }&lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt;(ex2)
                    {
                        echo &lt;/span&gt;'强制删除失败：' +&lt;span&gt;ex2
                    }
                }
                echo &lt;/span&gt;'解压文件'&lt;span&gt;
                bat &lt;/span&gt;'&quot;' + env.zip + '&quot; x &quot;'+ serviceNodeSetting3.downloadPath + buildNodeSettings.publishFileNameForService + '&quot; -y -o&quot;' + serviceNodeSetting3.publishPath + '&quot;'&lt;span&gt;
                echo &lt;/span&gt;'服务安装'&lt;span&gt;
                bat env.InstallUtil &lt;/span&gt;+ ' ' + serviceNodeSetting3.publishPath + '\\' + serviceNodeSetting3.serviceFileName + ' /name='+ serviceNodeSetting3.serviceName + ' /display=' + serviceNodeSetting3.serviceName + ' /desc=' +&lt;span&gt; serviceNodeSetting3.serviceName
                echo &lt;/span&gt;'启动服务'&lt;span&gt;
                bat &lt;/span&gt;'net start ' +&lt;span&gt; serviceNodeSetting3.serviceName
            }
        }
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;以上代码对三台服务器上的web和service进行了更新操作，两台阿里云内网，一台京东云&lt;/p&gt;
&lt;p&gt;代码说明：&lt;/p&gt;
&lt;div readability=&quot;8&quot;&gt;
&lt;p&gt;node：节点，Slave，表示在哪个节点中运行&lt;/p&gt;
&lt;div readability=&quot;7&quot;&gt;
&lt;p&gt;stage：阶段，表示当前阶段，可定义阶段名称&lt;/p&gt;
&lt;div&gt;
&lt;p&gt;checkout：代码检出&lt;/p&gt;
&lt;div readability=&quot;6&quot;&gt;
&lt;p&gt;echo：输出信息&lt;/p&gt;
&lt;div readability=&quot;8&quot;&gt;
&lt;p&gt;bat：执行cmd命令，linux下命令为sh&lt;/p&gt;
&lt;div readability=&quot;11&quot;&gt;
&lt;p&gt;env：环境变量，有系统定义变量和自定义变量两部分&lt;/p&gt;
&lt;div readability=&quot;18.5&quot;&gt;
&lt;div readability=&quot;16&quot;&gt;
&lt;p&gt;parallel：表示并行执行步骤&lt;/p&gt;
&lt;p&gt;更多详细解释请查看官方文档https://jenkins.io/doc/book/pipeline/&lt;/p&gt;
&lt;h3&gt;四、看看效果&lt;/h3&gt;
&lt;p&gt;我们开始构建刚才新建的项目&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/974239/201711/974239-20171107213443981-1039595422.gif&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;从gif可以看出，整个流程只耗费了一分钟不到，我们去看看这三台服务器&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;alignnone size-large wp-image-322&quot; src=&quot;https://www.ofnhkb1.com/wp-content/uploads/2017/11/4-750x463.png&quot; alt=&quot;&quot; width=&quot;750&quot; height=&quot;463&quot;/&gt;&lt;img class=&quot;alignnone size-large wp-image-323&quot; src=&quot;https://www.ofnhkb1.com/wp-content/uploads/2017/11/3-750x500.png&quot; alt=&quot;&quot; width=&quot;750&quot; height=&quot;500&quot;/&gt;&lt;img class=&quot;alignnone size-large wp-image-324&quot; src=&quot;https://www.ofnhkb1.com/wp-content/uploads/2017/11/2-686x500.png&quot; alt=&quot;&quot; width=&quot;686&quot; height=&quot;500&quot;/&gt;&lt;/p&gt;
&lt;p&gt;三台服务器的文件都已更新，并且服务已经启动，证明我们的pipeline代码是可行的&lt;/p&gt;
&lt;h4&gt;五、补充和改进&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;这篇文章的代码量过大，语言组织能力有待改进&lt;/li&gt;
&lt;li&gt;Slave节点的环境变量不能正确读取到，目前只能使用withEnv进行更改环境变量，具体情况publishService3&lt;/li&gt;
&lt;li&gt;项目的耦合性太高了，目前编译、打包、发布都在同一个项目中，需要进行项目的拆分&lt;/li&gt;
&lt;li&gt;没有加重试机制，一旦某一阶段失败，只能重新运行，有待改进&lt;/li&gt;
&lt;li&gt;失败邮件通知，这个目前没有加入&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;p&gt;如若有写的不好的地方，请指出&lt;/p&gt;
&lt;p&gt;如若有更好的方案，欢迎一起交流&lt;/p&gt;
&lt;p&gt;如若有不懂，欢迎咨询，我会告诉你我知道的&lt;/p&gt;
&lt;p&gt;本文已同步个人博客，欢迎转载&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
<pubDate>Tue, 07 Nov 2017 13:35:00 +0000</pubDate>
<dc:creator>ofnhkb1</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/ofnhkb1/p/7801220.html</dc:identifier>
</item>
<item>
<title>逆向课程第三讲逆向中的优化方式,以及加减乘 - iBinary</title>
<link>http://www.cnblogs.com/iBinary/p/7801091.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/iBinary/p/7801091.html</guid>
<description>

&lt;h2&gt;一丶为什么要熟悉优化方式&lt;/h2&gt;
&lt;p&gt;熟悉优化方式,可以在看高级代码的时候浮现出汇编代码,以及做逆向对抗的时候,了解汇编代码混淆&lt;/p&gt;
&lt;p&gt;优化和混淆是相反的&lt;/p&gt;
&lt;p&gt;优化: 指的是汇编代码越少越好,让程序更快的执行&lt;/p&gt;
&lt;p&gt;混淆: 一条汇编代码变为多条汇编代码,影响逆向人员的破解能力,但是软件的效率大大降低&lt;/p&gt;

&lt;h2&gt;二丶加减乘的常见的几种优化方式&lt;/h2&gt;
&lt;p&gt;优化方式分为:&lt;/p&gt;
&lt;p&gt;1.常量折叠&lt;/p&gt;
&lt;p&gt;2.常量传播&lt;/p&gt;
&lt;p&gt;3.变量去除&lt;/p&gt;
&lt;p&gt;这些优化方式成为窥孔优化 (有10几种后面会一一到来)&lt;/p&gt;
&lt;p&gt;首先了解什么是常量折叠,常量传播,然后最后讲解什么是窥孔优化&lt;/p&gt;
&lt;h3&gt;1.常量折叠&lt;/h3&gt;
&lt;p&gt;介绍常量折叠,首先写一段小程序,举例子说明.&lt;/p&gt;
&lt;p&gt;PS: 优化只有在Release版本下才会优化. Debug版本也会优化,在不影响用户调试的前提下进行优化的.&lt;/p&gt;
&lt;p&gt;程序:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1197364/201711/1197364-20171107014441091-1146477076.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;程序很简单,&lt;/p&gt;
&lt;p&gt;常量+常量&lt;/p&gt;
&lt;p&gt;变量+常量&lt;/p&gt;
&lt;p&gt;变量+变量&lt;/p&gt;
&lt;p&gt;首先常量加常量在优化中的汇编代码表现形式&lt;/p&gt;
&lt;p&gt;我们定位入口点,查看下反汇编&lt;/p&gt;
&lt;p&gt;自己的程序为了快速定位入口点,所以加个int 3断点,触发异常即可.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1197364/201711/1197364-20171107014905747-1166489311.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;可以看出,直接变为push 0xF了,然后调用printf&lt;/p&gt;
&lt;p&gt;这个就叫做常量折叠&lt;/p&gt;
&lt;p&gt;常量折叠: 指的是在编译前遇到的常量,都可以进行计算的,得出一个新的常量值,这样则可以直接变为一个常量去push了&lt;/p&gt;
&lt;h3&gt;2.常量传播 或者叫做常量扩散&lt;/h3&gt;
&lt;p&gt;先看下刚才的所有汇编代码把.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1197364/201711/1197364-20171107015223841-1480678134.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;首先说下这段汇编代码的意思:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;push&lt;/span&gt;&lt;span&gt; 0XF           压栈常量
&lt;/span&gt;&lt;span&gt;push&lt;/span&gt; &lt;span&gt;00406030&lt;/span&gt;&lt;span&gt;  压入格式化符号 %d,下面一样
&lt;/span&gt;&lt;span&gt;call&lt;/span&gt;  &lt;span&gt;00401030&lt;/span&gt;&lt;span&gt;   调用printf        
下面一样,依次类推&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这个时候可能会有疑问了&lt;/p&gt;
&lt;p&gt;我们的变量+常量,  变量加变量,为什么都变成了一个常量去push了&lt;/p&gt;
&lt;p&gt;答:&lt;/p&gt;
&lt;p&gt;　　这个叫做常量传播: 常量传播,指的是变量在写入或者读取的时间内,没有对它做修改,或者传地址,以及重新写入(也可以理解为赋值)的动作,那么在引用这个变量的时候,可以当做常量替换&lt;/p&gt;
&lt;p&gt;可能不太懂:&lt;/p&gt;
&lt;p&gt;　　通俗一点就是说,我用变量+变量,两个变量上面根本就没有修改过,然后也没有传入地址(传入地址代表不确定是否修改,所以不给优化,VS2013 会优化,具体自己看)所以可以用常量代替&lt;/p&gt;
&lt;p&gt;这个时候又有一个新问题了&lt;/p&gt;
&lt;p&gt;我们变量加常量的时候,随便变为了常量传播了,但是用常量替换了&lt;/p&gt;
&lt;p&gt;应该是 把n换成了常量 + 常量的&lt;/p&gt;
&lt;p&gt;就比如:&lt;/p&gt;
&lt;p&gt;n + 6&lt;/p&gt;
&lt;p&gt;n没有修改过,现在是0,因为常量传播的原因,变为了0&lt;/p&gt;
&lt;p&gt;变成了&lt;/p&gt;
&lt;p&gt;0 + 6 才对,那为什么还是push一个常量了,这个就要说下,这个是窥孔优化了.&lt;/p&gt;
&lt;p&gt;&lt;span&gt;请先转到JMP 3窥孔优化查看.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;JMP 回来之后,那么此时看减法和加法一样的. 只不过需要注意的是&lt;/p&gt;
&lt;p&gt;比如我们的高级代码为:&lt;/p&gt;
&lt;p&gt;n - 3&lt;/p&gt;
&lt;p&gt;那么汇编代码可能变为add -3  ,或者直接sub&lt;/p&gt;
&lt;p&gt;当然不影响结果.&lt;/p&gt;
&lt;p&gt;&lt;span&gt;乘法:&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;乘法的优化分为带幂优化和不带幂优化&lt;/p&gt;
&lt;p&gt;带幂优化: 带幂优化则是我在算乘法的时候,我可以左移几位,最终取得我们要的结果&lt;/p&gt;
&lt;p&gt;不带幂优化: 直接指令相乘.&lt;/p&gt;
&lt;p&gt;看下高级代码对应汇编代码:&lt;/p&gt;
&lt;p&gt;高级代码:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1197364/201711/1197364-20171107021103638-242232933.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;对应的汇编代码: &lt;/p&gt;
&lt;p&gt;PS看的是Debug版本,Release版本直接都常量折叠了,push的都是常量&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1197364/201711/1197364-20171107021308059-2117971256.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;可以看出都是有符号的相乘,不带幂的相乘&lt;/p&gt;
&lt;h2&gt;3.窥孔优化&lt;/h2&gt;
&lt;p&gt;窥孔优化,上面我们说了,变量+常量,那么变量没有修改的前提下,可以用常量代替的,&lt;/p&gt;
&lt;p&gt;变为了常量+常量&lt;/p&gt;
&lt;p&gt;但是优化方式是这样的&lt;/p&gt;
&lt;p&gt;首先先看看你的变量+常量是否可以常量传播,现在能常量传播,变为了常量+常量了&lt;/p&gt;
&lt;p&gt;其次,检查源代码有没有改变(或者标志,反正会检查)改变了,继续第二此优化,此时看到了常量+常量,接着常量折叠了.&lt;/p&gt;
&lt;p&gt;优化就是这样的.&lt;/p&gt;
&lt;p&gt;而且看你的变量也没有使用过,也去掉吧.&lt;/p&gt;
&lt;p&gt;比如我们不让它常量传播怎么办,好办,直接写个空函数,然后传入地址即可.因为条件是不能传入地址,因为不确定是否会改变(2013会优化)&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1197364/201711/1197364-20171107020405903-402648403.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;查看汇编代码&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1197364/201711/1197364-20171107020514794-998365559.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;我们上面只要让n和m变成了不常量传播,那么此时n和m则不能常量传播,不能常量传播了,就要老老实实的该怎么做怎么做.&lt;/p&gt;
&lt;p&gt;JMP 回去&lt;/p&gt;

</description>
<pubDate>Tue, 07 Nov 2017 13:03:00 +0000</pubDate>
<dc:creator>iBinary</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/iBinary/p/7801091.html</dc:identifier>
</item>
<item>
<title>DataFrame使用总结1（超实用） - Gssol</title>
<link>http://www.cnblogs.com/gaoss/p/7800899.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/gaoss/p/7800899.html</guid>
<description>&lt;h2 id=&quot;dataframe使用总结1超实用&quot;&gt;DataFrame使用总结1（超实用）：&lt;/h2&gt;
&lt;h3 id=&quot;合并两个表&quot;&gt;1. 合并两个表&lt;/h3&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;frame &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; [df1, df2]
df &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; pd.concat(frame)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;16&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;res &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; pd.merge(df, df1, on&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;[&lt;span class=&quot;st&quot;&gt;'key'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'key1'&lt;/span&gt;], how&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'inner'&lt;/span&gt;)
res &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; pd.merge(df, df1, left_on&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;[&lt;span class=&quot;st&quot;&gt;'key'&lt;/span&gt;], left_on&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;[&lt;span class=&quot;st&quot;&gt;'key1'&lt;/span&gt;], how&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'inner'&lt;/span&gt;)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;合并表的操作(Merge, join, and concatenate)&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://pandas.pydata.org/pandas-docs/stable/merging.html&quot; class=&quot;uri&quot;&gt;http://pandas.pydata.org/pandas-docs/stable/merging.html&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;split-和-strip-函数&quot;&gt;2. split() 和 strip() 函数&lt;/h3&gt;
&lt;p&gt;strip是删除的意思，主要是删除开头和结尾处的字符串&lt;/p&gt;
&lt;p&gt;rm 表示要删除的字符串&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;str.strip(rm) 表示删除开头和结尾，处于rm序列中的字符(需要正确理解)&lt;/li&gt;
&lt;li&gt;str.lstrip(rm) 表示删除开头，处于rm序列中的字符(需要正确理解)&lt;/li&gt;
&lt;li&gt;str.rstrip(rm) 表示删除结尾，处于rm序列中的字符(需要正确理解)&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;当rm为空时，默认删除空白符，包含（'\n', '\r', '\t', ' ')&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;a &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'  1223ss!# '&lt;/span&gt;
a &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; a.strip()
a
&lt;span class=&quot;op&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'1223ss!#'&lt;/span&gt;
b &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; a.strip(&lt;span class=&quot;st&quot;&gt;'12'&lt;/span&gt;)   &lt;span class=&quot;co&quot;&gt;# attention：是将开头和结尾处包含 ‘1’字符和含有‘2’字符的全部删掉&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'3ss!#'&lt;/span&gt; 
b &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; a.strip(&lt;span class=&quot;st&quot;&gt;'21'&lt;/span&gt;) &lt;span class=&quot;co&quot;&gt;# attentionn: 和顺序无关&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'3ss!#'&lt;/span&gt; &lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;split是分割的意思&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;a &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'  1223ss!# pp '&lt;/span&gt;
b &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; a.split(&lt;span class=&quot;st&quot;&gt;'#'&lt;/span&gt;)
b
&lt;span class=&quot;op&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; [&lt;span class=&quot;st&quot;&gt;'  1223ss!'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;' pp '&lt;/span&gt;]
&lt;span class=&quot;co&quot;&gt;# 如果我们想截取到ss，可以这样操作&lt;/span&gt;
b &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; a.split(&lt;span class=&quot;st&quot;&gt;'!'&lt;/span&gt;)[&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;].split(&lt;span class=&quot;st&quot;&gt;'3'&lt;/span&gt;)[&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;]   &lt;span class=&quot;co&quot;&gt;# 多种方法都可以取到，这里只是讲解split的用法&lt;/span&gt;
b
&lt;span class=&quot;op&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'ss'&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;list-转dataframe&quot;&gt;3. list 转DataFrame&lt;/h3&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;19&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; pandas &lt;span class=&quot;im&quot;&gt;as&lt;/span&gt; pd
l &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; [[&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;],[&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;],[&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;]]
pd.DataFrame(l, columns&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;[&lt;span class=&quot;st&quot;&gt;'lie_A'&lt;/span&gt;,&lt;span class=&quot;st&quot;&gt;'lie_B'&lt;/span&gt;,&lt;span class=&quot;st&quot;&gt;'lie_C'&lt;/span&gt;])
&lt;span class=&quot;op&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; lie_A   lie_B   lie_C
  &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;     &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;     &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;      &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;
  &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;     &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;     &lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;      &lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;
  &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;     &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;     &lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;      &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;读取和存储表&quot;&gt;4. 读取和存储表&lt;/h3&gt;
&lt;p&gt;常用的两种表是csv和excel&lt;/p&gt;
&lt;p&gt;读取表为DataFrame结构&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;table1 &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; pd.DataFrame(pd.read_excel(&lt;span class=&quot;st&quot;&gt;'sss.xlsx'&lt;/span&gt;))
table2 &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; pd.read_csv(&lt;span class=&quot;st&quot;&gt;'sss.csv'&lt;/span&gt;)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;存储表&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;table1.to_excel(&lt;span class=&quot;st&quot;&gt;'sss.xlsx'&lt;/span&gt;)
table2.to_csv(&lt;span class=&quot;st&quot;&gt;'sss.csv'&lt;/span&gt;, encoding&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'utf-8'&lt;/span&gt;)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;csv表是以 ‘，’ 为分割符，所以最好保存为csv格式&lt;/p&gt;
&lt;h3 id=&quot;将dataframe转化为arraylist&quot;&gt;5. 将DataFrame转化为array，list&lt;/h3&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;co&quot;&gt;# 将table(DataFrame)的lie &lt;/span&gt;
table1 &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; np.array(table[&lt;span class=&quot;st&quot;&gt;'lie'&lt;/span&gt;])    &lt;span class=&quot;co&quot;&gt;# 转化为array&lt;/span&gt;
table2 &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; table1.tolist()           &lt;span class=&quot;co&quot;&gt;# 转化为list&lt;/span&gt;

&lt;span class=&quot;co&quot;&gt;# 将table(DataFrame)转化为list&lt;/span&gt;
table1 &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; np.array(table)    &lt;span class=&quot;co&quot;&gt;# 转化为array&lt;/span&gt;
table2 &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; table1.tolist()           &lt;span class=&quot;co&quot;&gt;# 转化为list&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;dataframe中最好不要用循环用apply如果只能用循环处理转化为array或者list再做处理&quot;&gt;6. DataFrame中最好不要用循环，用apply，如果只能用循环处理，转化为array或者list再做处理&lt;/h3&gt;
&lt;p&gt;apply 的具体使用方法：&lt;a href=&quot;http://www.cnblogs.com/gaoss/p/7657044.html&quot; class=&quot;uri&quot;&gt;http://www.cnblogs.com/gaoss/p/7657044.html&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; pandas &lt;span class=&quot;im&quot;&gt;as&lt;/span&gt; pd
table1
&lt;span class=&quot;op&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;     index   lie0
    &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;     &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;     kkk
    &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;     &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;     sss
    &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;     &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;     ddd
    &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;     &lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;     ppp
    
&lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; tem(x):
        &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; x&lt;span class=&quot;op&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'_hello'&lt;/span&gt;

table1.lie0 &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; table1.lie0.&lt;span class=&quot;bu&quot;&gt;apply&lt;/span&gt;(tem)
table1
&lt;span class=&quot;op&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;  index      lie0
  &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;     &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;    kkk_hello
  &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;     &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;    sss_hello
  &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;     &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;    ddd_hello
  &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;     &lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;    ppp_hello&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;对dataframe重建索引&quot;&gt;7. 对DataFrame重建索引&lt;/h3&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;table &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; table.reset_index()&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;对dataframe删除列或者增加列&quot;&gt;8. 对DataFrame删除列或者增加列&lt;/h3&gt;
&lt;p&gt;删除列：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;table &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; table.drop([&lt;span class=&quot;st&quot;&gt;'lie0'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'lie1'&lt;/span&gt;], axis&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;增加列：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;table[&lt;span class=&quot;st&quot;&gt;'new_lie'&lt;/span&gt;] &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;''&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;# 新增一个新列，列名为new_lie，值为空&lt;/span&gt;
table[&lt;span class=&quot;st&quot;&gt;'new_lie'&lt;/span&gt;] &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; table[&lt;span class=&quot;st&quot;&gt;'lie0'&lt;/span&gt;].astype(&lt;span class=&quot;st&quot;&gt;'str'&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; table[&lt;span class=&quot;st&quot;&gt;'lie1'&lt;/span&gt;].astype(&lt;span class=&quot;st&quot;&gt;'str'&lt;/span&gt;) &lt;span class=&quot;co&quot;&gt;# 将lie0和lie1的值赋给new_lie&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;筛选数据&quot;&gt;9. 筛选数据&lt;/h3&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;table &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; table.loc[table[&lt;span class=&quot;st&quot;&gt;'lie0'&lt;/span&gt;] &lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;]&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;将table表中lie0 列大于0的数据筛选出来，其他列也会跟随该列变化&lt;/p&gt;
&lt;h3 id=&quot;强制类型转换&quot;&gt;10. 强制类型转换&lt;/h3&gt;
&lt;p&gt;例如 ‘lie0’ 列数据为int，需要将其转化为str，就需要用到强制类型转换&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;table['sku_division_code'].astype('int')&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;对某一列列名进行重命名&quot;&gt;11. 对某一列列名进行重命名&lt;/h3&gt;
&lt;p&gt;将 lie0 替换为 lie1&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;table.rename(columns&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;{&lt;span class=&quot;st&quot;&gt;'lie0'&lt;/span&gt;: &lt;span class=&quot;st&quot;&gt;'lie1'&lt;/span&gt;}, inplace&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;True&lt;/span&gt;)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;get_dummiesone_hot-编码&quot;&gt;12. get_dummies(one_hot 编码)&lt;/h3&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; pandas &lt;span class=&quot;im&quot;&gt;as&lt;/span&gt; pd
table1 &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; pd.DataFrame(pd.read_excel(&lt;span class=&quot;st&quot;&gt;'sss.xlsx'&lt;/span&gt;))
table1
&lt;span class=&quot;op&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; index   lie0
&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;     &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;     kkk
&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;     &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;     sss
&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;     &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;     ddd
&lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;     &lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;     ppp

pd.get_dummies(table1, columns&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;[&lt;span class=&quot;st&quot;&gt;'lie0'&lt;/span&gt;])
&lt;span class=&quot;op&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; index   lie0_ddd    lie0_kkk    lie0_ppp    lie0_sss
&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;    &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;          &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;           &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;           &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;           &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;    &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;          &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;           &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;           &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;           &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;    &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;          &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;           &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;           &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;           &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;    &lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;          &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;           &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;           &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;           &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;处理日期&quot;&gt;13 处理日期&lt;/h3&gt;
&lt;ol&gt;&lt;li&gt;求两个日期中间的所有日期&lt;/li&gt;
&lt;/ol&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;42&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;a &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'2017-08-04'&lt;/span&gt; 
b &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'2017-09-01'&lt;/span&gt;
rng &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; pd.date_range(a,b)
rng
&lt;span class=&quot;op&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; DatetimeIndex([&lt;span class=&quot;st&quot;&gt;'2017-08-04'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'2017-08-05'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'2017-08-06'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'2017-08-07'&lt;/span&gt;,
               &lt;span class=&quot;co&quot;&gt;'2017-08-08'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'2017-08-09'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'2017-08-10'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'2017-08-11'&lt;/span&gt;,
               &lt;span class=&quot;co&quot;&gt;'2017-08-12'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'2017-08-13'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'2017-08-14'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'2017-08-15'&lt;/span&gt;,
               &lt;span class=&quot;co&quot;&gt;'2017-08-16'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'2017-08-17'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'2017-08-18'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'2017-08-19'&lt;/span&gt;,
               &lt;span class=&quot;co&quot;&gt;'2017-08-20'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'2017-08-21'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'2017-08-22'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'2017-08-23'&lt;/span&gt;,
               &lt;span class=&quot;co&quot;&gt;'2017-08-24'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'2017-08-25'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'2017-08-26'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'2017-08-27'&lt;/span&gt;,
               &lt;span class=&quot;co&quot;&gt;'2017-08-28'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'2017-08-29'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'2017-08-30'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'2017-08-31'&lt;/span&gt;,
               &lt;span class=&quot;co&quot;&gt;'2017-09-01'&lt;/span&gt;],
              dtype&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'datetime64[ns]'&lt;/span&gt;, freq&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'D'&lt;/span&gt;)

&lt;span class=&quot;bu&quot;&gt;len&lt;/span&gt;(rng)
&lt;span class=&quot;op&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;29&lt;/span&gt;

rng[&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;]
&lt;span class=&quot;op&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; Timestamp(&lt;span class=&quot;st&quot;&gt;'2017-08-05 00:00:00'&lt;/span&gt;, freq&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'D'&lt;/span&gt;)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ol&gt;&lt;li&gt;将str转化为日期格式&lt;/li&gt;
&lt;/ol&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; pandas &lt;span class=&quot;im&quot;&gt;as&lt;/span&gt; pd
&lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; datetime &lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;*&lt;/span&gt;
a &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'2017-08-04'&lt;/span&gt;

&lt;span class=&quot;bu&quot;&gt;type&lt;/span&gt;(a)
&lt;span class=&quot;op&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;bu&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'str'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;

a &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; datetime.strptime(&lt;span class=&quot;bu&quot;&gt;str&lt;/span&gt;(a), &lt;span class=&quot;st&quot;&gt;'%Y-%m-&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;%d&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'&lt;/span&gt;)
&lt;span class=&quot;bu&quot;&gt;type&lt;/span&gt;(a)
&lt;span class=&quot;op&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; datetime.datetime&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ol&gt;&lt;li&gt;判断一天是星期几&lt;/li&gt;
&lt;/ol&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;a.weekday()
&lt;span class=&quot;op&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;   &lt;span class=&quot;co&quot;&gt;# 0到6代表从星期一到星期日&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ol&gt;&lt;li&gt;计算两个时间之间相差多少秒&lt;/li&gt;
&lt;/ol&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;a &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'08:10:20'&lt;/span&gt; 
b &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'15:34:43'&lt;/span&gt;
time_a &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; datetime.strptime(a, &lt;span class=&quot;st&quot;&gt;'%H:%M:%S'&lt;/span&gt;)
time_b &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; datetime.strptime(b, &lt;span class=&quot;st&quot;&gt;'%H:%M:%S'&lt;/span&gt;)
total &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; (time_b &lt;span class=&quot;op&quot;&gt;-&lt;/span&gt; time_a).seconds
total
&lt;span class=&quot;op&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;26663&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;list-的常见操作&quot;&gt;14. list 的常见操作&lt;/h3&gt;
&lt;p&gt;删除 与 增加元素&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;26&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;lie &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; [&lt;span class=&quot;st&quot;&gt;'1'&lt;/span&gt;,&lt;span class=&quot;st&quot;&gt;'2'&lt;/span&gt;,&lt;span class=&quot;st&quot;&gt;'kk'&lt;/span&gt;,&lt;span class=&quot;st&quot;&gt;'3'&lt;/span&gt;,&lt;span class=&quot;st&quot;&gt;'m'&lt;/span&gt;]

lie.remove(&lt;span class=&quot;st&quot;&gt;'kk'&lt;/span&gt;)
lie
&lt;span class=&quot;op&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; [&lt;span class=&quot;st&quot;&gt;'1'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'2'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'3'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'m'&lt;/span&gt;]

lie.insert(&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'xx'&lt;/span&gt;)
lie
&lt;span class=&quot;op&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; [&lt;span class=&quot;st&quot;&gt;'xx'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'1'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'2'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'3'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'m'&lt;/span&gt;]

lie.append(&lt;span class=&quot;st&quot;&gt;'ten'&lt;/span&gt;)
lie
&lt;span class=&quot;op&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; [&lt;span class=&quot;st&quot;&gt;'xx'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'1'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'2'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'3'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'m'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'ten'&lt;/span&gt;]

&lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'xx'&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;in&lt;/span&gt; lie:   &lt;span class=&quot;co&quot;&gt;# 判断xx在lie这个list中&lt;/span&gt;
  &lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'right'&lt;/span&gt;)
 
&lt;span class=&quot;op&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; right&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;空值的使用&quot;&gt;15. 空值的使用&lt;/h3&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;table1
&lt;span class=&quot;op&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; index   lie0   lie1
&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;    &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;      kkk     p1
&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;    &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;      sss     p2
&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;    &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;      NaN     p3
&lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;    &lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;      ppp     p4

table1[pd.isnull(table1.lie0)] &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'mmm'&lt;/span&gt;
table1
&lt;span class=&quot;op&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; index   lie0   lie1
&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;    &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;      kkk     p1
&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;    &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;      sss     p2
&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;    &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;      mmm     p3
&lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;    &lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;      ppp     p4&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;将表头列名取出来为list&quot;&gt;16 将表头（列名）取出来，为list&lt;/h3&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;12&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;lieming &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bu&quot;&gt;list&lt;/span&gt;(table1.columns.values)
&lt;span class=&quot;op&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; [&lt;span class=&quot;st&quot;&gt;u'index'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;u'lie0'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;u'lie1'&lt;/span&gt;]
lieming &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; table1.columns.values.tolist()
&lt;span class=&quot;op&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; [&lt;span class=&quot;st&quot;&gt;u'index'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;u'lie0'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;u'lie1'&lt;/span&gt;]&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;zfill&quot;&gt;17. zfill()&lt;/h3&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;a &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'301'&lt;/span&gt;    &lt;span class=&quot;co&quot;&gt;# 将字符串填充为4位&lt;/span&gt;
a.zfill(&lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;)
&lt;span class=&quot;op&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'0301'&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;其他&quot;&gt;18. 其他&lt;/h3&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;table1.shape
&lt;span class=&quot;op&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;)
x &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; table1.shape[&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;]
y &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; table1.shape[&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;]
x
&lt;span class=&quot;op&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;
y
&lt;span class=&quot;op&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;

table1.describe()  &lt;span class=&quot;co&quot;&gt;# 显示基础信息 &lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;     index
count   &lt;span class=&quot;fl&quot;&gt;4.000000&lt;/span&gt;
mean    &lt;span class=&quot;fl&quot;&gt;2.500000&lt;/span&gt;
std     &lt;span class=&quot;fl&quot;&gt;1.290994&lt;/span&gt;
&lt;span class=&quot;bu&quot;&gt;min&lt;/span&gt;     &lt;span class=&quot;fl&quot;&gt;1.000000&lt;/span&gt;
&lt;span class=&quot;dv&quot;&gt;25&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;%&lt;/span&gt;     &lt;span class=&quot;fl&quot;&gt;1.750000&lt;/span&gt;
&lt;span class=&quot;dv&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;%&lt;/span&gt;     &lt;span class=&quot;fl&quot;&gt;2.500000&lt;/span&gt;
&lt;span class=&quot;dv&quot;&gt;75&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;%&lt;/span&gt;     &lt;span class=&quot;fl&quot;&gt;3.250000&lt;/span&gt;
&lt;span class=&quot;bu&quot;&gt;max&lt;/span&gt;     &lt;span class=&quot;fl&quot;&gt;4.000000&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
</description>
<pubDate>Tue, 07 Nov 2017 12:24:00 +0000</pubDate>
<dc:creator>Gssol</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/gaoss/p/7800899.html</dc:identifier>
</item>
<item>
<title>ligerUI---ligerGrid中treegrid(表格树)的使用 - 蚊蚊蚊蚊蚊170624</title>
<link>http://www.cnblogs.com/eleven258/p/7800851.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/eleven258/p/7800851.html</guid>
<description>&lt;p&gt;&lt;span&gt;&lt;strong&gt;写在前面:&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;span&gt;表格树是在普通ligerGrid的基础上，做了一点改变，使数据以表格树的形式显示出来，适用于有级别的数据比如菜单(有父菜单,父菜单下面有子菜单)。表格树的显示有两种方法，可以根据自己的项目来选择。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;方法1：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;span&gt;前台页面：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;63&quot;&gt;
&lt;pre&gt;
funcGrid = $(&quot;#funcGrid&quot;&lt;span&gt;).ligerGrid({
                columns : [
                        {display: &lt;/span&gt;'功能编号', name: 'functionId',hide:'true'&lt;span&gt;} ,
                        {id:&lt;/span&gt;'functionName',display: '功能名', name: 'functionName', width: 200&lt;span&gt; } ,
                        { display: &lt;/span&gt;'功能描述', name: 'functionDes', minWidth: 60&lt;span&gt; },
                        {display : &lt;/span&gt;'功能fId', name : 'fId', type : &quot;text&quot;, hide:'true'&lt;span&gt;}
                           ],
                url:&lt;/span&gt;'${baseURL}/getFunctionBySysId.action?systemId='+&lt;span&gt;systemId,
                tree : {
                    columnId : &lt;/span&gt;'functionName', &lt;span&gt;//&lt;/span&gt;&lt;span&gt;以树型显示的字段的id&lt;/span&gt;
                    idField : 'functionId',  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;id字段&lt;/span&gt;
                    parentIDField : 'fId', &lt;span&gt;//&lt;/span&gt;&lt;span&gt;parent  id 字段&lt;/span&gt;
                    isExpand : &lt;span&gt;false&lt;/span&gt;&lt;span&gt;
                },
                width : &lt;/span&gt;'100%'&lt;span&gt;,
                height : &lt;/span&gt;'100%'&lt;span&gt;,
                checkbox : &lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;,
                usePager : &lt;/span&gt;&lt;span&gt;false&lt;/span&gt;&lt;span&gt;,
                frozenRownumbers : &lt;/span&gt;&lt;span&gt;false&lt;/span&gt;&lt;span&gt;,
                frozenCheckbox : &lt;/span&gt;&lt;span&gt;false&lt;/span&gt;&lt;span&gt;,
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;rowHeight : 23,&lt;/span&gt;
                alternatingRow : &lt;span&gt;false&lt;/span&gt;&lt;span&gt;,
                isChecked: f_isChecked,
        });&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　&lt;span&gt;后台代码：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
 &lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getFunctionBySysId(){
        log.info(&lt;/span&gt;&quot;==FunctionAction===getFunctionBySysId=======start=&quot;&lt;span&gt;);

        &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
            List&lt;/span&gt;&amp;lt;Function&amp;gt; functionList =&lt;span&gt; functionService.getAllBySysId(Integer.parseInt(systemId));
            List&lt;/span&gt;&amp;lt;FunctionVO&amp;gt; functionVOList = &lt;span&gt;new&lt;/span&gt; ArrayList&amp;lt;FunctionVO&amp;gt;&lt;span&gt;();
            &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = 0; i &amp;lt; functionList.size(); i++&lt;span&gt;) {
                FunctionVO functionVO&lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; FunctionVO();
                functionVO.setFunctionId(functionList.get(i).getFunctionId());
                functionVO.setFunctionName(functionList.get(i).getFunctionName());
                functionVO.setFunctionDes(functionList.get(i).getFunctionDes());
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;添加fId 使功能表格以树的形式显示&lt;/span&gt;
&lt;span&gt;                functionVO.setfId(functionList.get(i).getfId());

                functionVOList.add(functionVO);
            }
            Map&lt;/span&gt;&amp;lt;String, Object&amp;gt; map = &lt;span&gt;new&lt;/span&gt; HashMap&amp;lt;&amp;gt;&lt;span&gt;();
            map.put(&lt;/span&gt;&quot;Rows&quot;&lt;span&gt;, functionVOList);
            map.put(&lt;/span&gt;&quot;Total&quot;&lt;span&gt;, functionVOList.size());
            JsonConfig jsonConfig &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; JsonConfig();
            jsonConfig.registerJsonValueProcessor(Date.&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;, &lt;span&gt;new&lt;/span&gt;&lt;span&gt; JsonDateValueProcessor());
            jsonObject &lt;/span&gt;=&lt;span&gt; JSONObject.fromObject(map, jsonConfig);

            log.info(&lt;/span&gt;&quot;jsonObject:&quot; +&lt;span&gt; jsonObject);

        } &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception e) {
            &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; BusinessException(&quot;根据systemId查询Function出错&quot;&lt;span&gt;);
        }
        log.info(&lt;/span&gt;&quot;==FunctionAction===getFunctionBySysId=======end=&quot;&lt;span&gt;);

        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &quot;getFunctionBySysId&quot;&lt;span&gt;;

    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;注意：对于前台页面树形表格的显示是指定了parentIDField 为'fId',故后台在传递也应该有对应的fId字段传递过来。然后前台页面如下图，可以自己对比画红框处的字段：&lt;/span&gt;&lt;br/&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1188460/201711/1188460-20171107193956341-1938848326.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;这种方法，比较简单，因为在后台action中无需对数据做过多处理，只需要在前台页面中，指定columnId,idField,parentIDField即可&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;方法2：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;span&gt;前台页面：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;59&quot;&gt;
&lt;pre&gt;
funcGrid = $(&quot;#funcGrid&quot;&lt;span&gt;).ligerGrid({
                columns : [
                        {display: &lt;/span&gt;'功能编号', name: 'functionId',hide:'true'} ,&lt;span&gt;//
&lt;/span&gt;                        {display: '功能名', name: 'functionName', width: 200&lt;span&gt; } ,
                        { display: &lt;/span&gt;'功能描述', name: 'functionDes', minWidth: 60&lt;span&gt; },
                        {display : &lt;/span&gt;'功能fId', name : 'fId', type : &quot;text&quot;, hide:'true'&lt;span&gt;}
                           ],
                url:&lt;/span&gt;'${baseURL}/getFunctionBySysId.action?systemId='+&lt;span&gt;systemId,
            
                tree : {
                    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;要显示为树形的字段name&lt;/span&gt;
                    columnName:'functionName'&lt;span&gt;,
                    isExpand : &lt;/span&gt;&lt;span&gt;false&lt;/span&gt;&lt;span&gt;
                }
                width : &lt;/span&gt;'100%'&lt;span&gt;,
                height : &lt;/span&gt;'100%'&lt;span&gt;,
                checkbox : &lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;,
                usePager : &lt;/span&gt;&lt;span&gt;false&lt;/span&gt;&lt;span&gt;,
                frozenRownumbers : &lt;/span&gt;&lt;span&gt;false&lt;/span&gt;&lt;span&gt;,
                frozenCheckbox : &lt;/span&gt;&lt;span&gt;false&lt;/span&gt;&lt;span&gt;,
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;rowHeight : 23,&lt;/span&gt;
                alternatingRow : &lt;span&gt;false&lt;/span&gt;&lt;span&gt;,
                isChecked: f_isChecked,

        });&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　&lt;span&gt;后台代码：action&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;功能树&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getFunctionBySysId2(){
        log.info(&lt;/span&gt;&quot;==FunctionAction===getFunctionBySysId=======start=&quot;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;1.获取fid为0的function
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;2.根据父function获取子function&lt;/span&gt;
        &lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;List&amp;lt;Function&amp;gt; functionList = functionService.getAllBySysId(Integer.parseInt(systemId));
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取所有的一级function&lt;/span&gt;
            List&amp;lt;Function&amp;gt; functionList =&lt;span&gt; functionService.getAllOneLevelBySysId(Integer.parseInt(systemId));
            List&lt;/span&gt;&amp;lt;FunctionVO22&amp;gt; functionVOList = &lt;span&gt;new&lt;/span&gt; ArrayList&amp;lt;&amp;gt;&lt;span&gt;();
            &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = 0; i &amp;lt; functionList.size(); i++&lt;span&gt;) {
                FunctionVO22 f1 &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; FunctionVO22();
                f1.setFunctionId(functionList.get(i).getFunctionId());
                f1.setFunctionName(functionList.get(i).getFunctionName());
                f1.setFunctionDes(functionList.get(i).getFunctionDes());
                f1.setfId(functionList.get(i).getfId());

                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;根据一级function查询对应的子function&lt;/span&gt;
                List&amp;lt;Function&amp;gt; childrenList =&lt;span&gt; functionService.getAllTwoLevel(functionList.get(i).getFunctionId(),Integer.parseInt(systemId));
                List&lt;/span&gt;&amp;lt;FunctionVO22&amp;gt; functionVOList2 = &lt;span&gt;new&lt;/span&gt; ArrayList&amp;lt;FunctionVO22&amp;gt;&lt;span&gt;();
                &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; i2 = 0; i2 &amp;lt; childrenList.size(); i2++&lt;span&gt;){
                    FunctionVO22 f2 &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; FunctionVO22();
                    f2.setFunctionId(childrenList.get(i2).getFunctionId());
                    f2.setFunctionName(childrenList.get(i2).getFunctionName());
                    f2.setFunctionDes(childrenList.get(i2).getFunctionDes());
                    f2.setfId(childrenList.get(i2).getfId());
                    functionVOList2.add(f2);
                    System.out.println(&lt;/span&gt;&quot;functionVOList2.size==&quot;+&lt;span&gt;functionVOList2.size());
                }
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;将二级function设置到一级function中&lt;/span&gt;
&lt;span&gt;                f1.setChildren(functionVOList2);
                functionVOList.add(f1);
            }
            Map&lt;/span&gt;&amp;lt;String, Object&amp;gt; map = &lt;span&gt;new&lt;/span&gt; HashMap&amp;lt;&amp;gt;&lt;span&gt;();
            map.put(&lt;/span&gt;&quot;Rows&quot;&lt;span&gt;, functionVOList);
            map.put(&lt;/span&gt;&quot;Total&quot;&lt;span&gt;, functionVOList.size());
            JsonConfig jsonConfig &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; JsonConfig();
            jsonConfig.registerJsonValueProcessor(Date.&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;, &lt;span&gt;new&lt;/span&gt;&lt;span&gt; JsonDateValueProcessor());
            jsonObject &lt;/span&gt;=&lt;span&gt; JSONObject.fromObject(map, jsonConfig);
            log.info(&lt;/span&gt;&quot;jsonObject:&quot; +&lt;span&gt; jsonObject);

        } &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception e) {
            e.printStackTrace();
            &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; BusinessException(&quot;根据systemId查询Function出错&quot;&lt;span&gt;);
        }
        log.info(&lt;/span&gt;&quot;==FunctionAction===getFunctionBySysId=======end=&quot;&lt;span&gt;);

        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &quot;getFunctionBySysId&quot;&lt;span&gt;;

    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　&lt;span&gt;涉及到的实体类：FunctionVO22&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.fums.vo;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.List;

&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; FunctionVO22 {
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; Integer functionId;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String functionName;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String functionDes;
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;父功能id&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt;&lt;span&gt; Integer fId;
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;子功能集合&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; List&amp;lt;FunctionVO22&amp;gt;&lt;span&gt; children;


    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; Integer getFunctionId() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; functionId;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setFunctionId(Integer functionId) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.functionId =&lt;span&gt; functionId;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getFunctionName() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; functionName;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setFunctionName(String functionName) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.functionName =&lt;span&gt; functionName;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getFunctionDes() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; functionDes;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setFunctionDes(String functionDes) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.functionDes =&lt;span&gt; functionDes;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; Integer getfId() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; fId;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setfId(Integer fId) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.fId =&lt;span&gt; fId;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; List&amp;lt;FunctionVO22&amp;gt;&lt;span&gt; getChildren() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; children;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; setChildren(List&amp;lt;FunctionVO22&amp;gt;&lt;span&gt; children) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.children =&lt;span&gt; children;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　&lt;span&gt;这里主要对FunctionVO22做代码的展示，因为这是对Function实体类的一个封装类，里面涉及到了需要的一些字段，这里如果要在页面进行树型表格显示，可在Function22中&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;加入一个本身的集合(对象中有一个对象集合的属性)。使其传递过去的数据格式经过json格式的转换变为如下图这样（举例说明拿的api中的demo数据，图中的数据字段可以根据自己的做对应的修改）：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1188460/201711/1188460-20171107200414278-572992406.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;span&gt;虽然这种方法在前台页面只需要指定要显示为树形的字段即可，如下图&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1188460/201711/1188460-20171107200935638-835920516.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;但是却比第一种方法在后台action中对数据的处理要复杂的多，可自行选择。&lt;/p&gt;

&lt;p&gt;&lt;span&gt;成功截图：嘻嘻嘻嘻嘻嘻嘻~~~~~~~~~~~~~~~~~~~~收拾 下班。。&lt;/span&gt;&lt;br/&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1188460/201711/1188460-20171107201119513-901456308.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

</description>
<pubDate>Tue, 07 Nov 2017 12:19:00 +0000</pubDate>
<dc:creator>蚊蚊蚊蚊蚊170624</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/eleven258/p/7800851.html</dc:identifier>
</item>
</channel>
</rss>