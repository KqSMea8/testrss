<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>我们和优秀工程师的差距在哪儿 - BaronZhang</title>
<link>http://www.cnblogs.com/baronzhang/p/8944870.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/baronzhang/p/8944870.html</guid>
<description>&lt;p&gt;&lt;img title=&quot;&quot; src=&quot;http://ocjtywvav.bkt.clouddn.com/blog/other/engineer/pic1.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;关注微信公众号：&lt;strong&gt;BaronTalk&lt;/strong&gt;，获取更多精彩好文。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我相信每个工程师都曾怀揣一个成为技术大牛的梦想，可是真正走向技术大牛这条路的少之又少。工作中我们常常会发现，有些同学工作没几年但成长迅速；很快就能走向团队核心岗位，成为一名优秀的工程师；而有些同学工作几年后却在公司里默默无闻，能力和职位上都没有太大提升，得过且过最终沦为一名普普通通的码农。所以我常常会有感慨，太多人（包括我自己）真的只不过是用一两年的经验在职场上混了五年十年甚至更久。&lt;/p&gt;
&lt;p&gt;那么普通工程师和优秀工程师到底差距在哪儿？那些优秀工程师是怎么一步一步成长起来了的呢？以下就我自己的观察和思考来谈一谈，看看能不能一探究竟，了解通向优秀工程师的法门；然后与大家共勉，一起朝着优秀工程师的方向去努力。&lt;/p&gt;
&lt;h2 id=&quot;h&quot;&gt;差距在哪儿？&lt;/h2&gt;
&lt;p&gt;我们拿吴军老师在得到专栏中讲解的一道 Google 面试题来展开聊一聊，看看面对同样的问题，普通工程师和优秀工程师是如何思考解决问题的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;问题如下：如何设计一个地图功能，找到离当前最近的加油站？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在最近公司的招聘面试过程中，我也拿类似的问题去问过部分候选人，大部分候选人都把问题想的太简单。通常普通工程师给出的解决方案是：根据经纬度算出所有加油站到当前位置的距离，然后对这些加油站按照距离的远近进行排序，选择距离最近的几个加油站。&lt;/p&gt;
&lt;p&gt;可问题是，在路面上行驶，从 A 点通往 B 点，往往不是直线距离。因为无论是驾车还是步行，我们都不可能穿过建筑直达目的地，A 点到 B 点的距离是很多距离片段的组合，这可能会有上千种组合，那么如何从这上千种组合的路线中选择距离最近的一条路线呢？使用动态规划算法能够很好的解决这个问题，在上千种组合中只需几十个步骤就能计算出最短路线。这对部分工程师已经是个门槛了。&lt;/p&gt;
&lt;p&gt;接下来就需要按照距离排序，找到最近的几个加油站。&lt;/p&gt;
&lt;p&gt;绝大部分工程师面对这样的问题都会想到排序，排序当然能够解决问题，但并不是最优方案。就算使用效率最高的快速排序，也需要 N 乘 LogN 的计算量。假设城市里有 1000 个加油站，那么 LogN 约等于 10，也就是说计算的复杂度差不多是 1000，当然 1000 的计算量对于计算机算不上什么，但是考虑到一个城市的路面上可能有上百万辆行驶的汽车，这个计算量的消耗就很可观了。&lt;/p&gt;
&lt;p&gt;假设我们只需要最近的 5 个加油站，如果对所有的加油站排序那显然做了很多无用功。数据结构中有一种叫二叉树的数据结构，在二叉树中有一种更细的分类：“堆”，通过堆排序我们可以只用排出前几名，而不用管后面的名次。通过堆排序排出第一名的时间复杂度是N，排出第二名、第三名、第四名、第五名的时间复杂度都 LogN，比对 1000 个加油站排序要快的多。对于我们的需求：选出最近的 5 个加油站，差不多只需要 1000 的计算量，比快速排序快了近 10 倍。&lt;/p&gt;
&lt;p&gt;到这里你是不是觉得问题已经解决的很完美了？&lt;/p&gt;
&lt;p&gt;我们在解决问题的时候不由自主的做了一个假设，就是整个算法的优化过程是围绕一个使用者的某一次使用来进行的。但是在现实生活中，一个城市里有很多人会同时在不同的地方寻找加油站。类似的，同一个人在不同的时间不同的地点开车时也需要寻找加油站。考虑到这个现实场景，时时刻刻都有很多人在不停的寻找附近的加油站，那么很多计算其实是可以预先算好的，等到提供服务的时候直接把结果调出来就好了，避免重复计算。&lt;/p&gt;
&lt;p&gt;比如我们可以把上海市所有路口点到点的距离事先计算好，当一个人要找加油站的时候，距离的计算就不再需要实时地采用动态规划来计算了，只需要计算从当前位置出发到附近几个路口的距离，再计算下某个加油站到它所在地附近路口的距离，由于各个路口点到点的距离是事先计算好的，因此做几次简单的加法即可，这样计算距离的时间就能省几十倍。这就是对上面的问题进行了全局优化的好处。&lt;/p&gt;
&lt;p&gt;其实面对这样的问题，优秀的工程师并不会遇到问题就直接着手去解决，而是会更全面的去考虑问题。比如会考虑到目前的行车方向，比如在解决问题中其实距离要求并不需要太精准，因为对于开车的人来说 2.5 公里和 2.3 公里其实并没有什么差别，再考虑到道路拥堵的情况，200 米的距离更加可以忽略不计了。但如果是行人要寻找附近的便利店，200 米的距离就不得不考虑了。&lt;/p&gt;
&lt;p&gt;那么从上述这个问题的解决上我们能看出普通工程师和优秀工程师的差距在哪儿呢？&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1. 优秀的工程师必然有着扎实的计算机基础知识，很好的掌握了如数据结构、算法这些工具，能够在工作中借助这些工具帮助自己解决问题；&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2. 优秀的工程师会尽量避免做无用功&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3. 优秀的工程师不会只满足于完成任务，他们会不断的去思考探索最佳的解决方案；&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4. 优秀的工程师不会被思维所局限，考虑问题更加全面，懂得从全局角度优化解决方案。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;从这个例子我们也能看出来，一个优秀工程师解决问题的性能可能是普通工程师的几百上千倍，一个优秀的解决方案甚至能帮助公司节省几百万的服务器费用。&lt;/p&gt;
&lt;p&gt;因此，&lt;strong&gt;在软件工程领域一百个臭皮匠也顶不了一个诸葛亮！&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;h-1&quot;&gt;做为普通工程师的我们如何提升自己？&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;学好数据结构、算法、操作系统原理、计算机体系结构等基本功，打好基础。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果你是天才，面对像上面这样的问题，即使你没有学过计算机理论知识，即使你不知道动态规划、二叉树、堆排序，可能也能依靠智力上的优势解决。但遗憾的是绝大多数人都不是天才，因此在解决问题的时候就需要借助各种工具以便事半功倍。对于开发人员来说，数据结构、算法以及各种数学知识就是我们手上的工具。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;要成为优秀的工程师需要我们静下来，沉下去，老老实实的吃透你所做的项目。做好简单的事，才有机会去做更有挑战的工作。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;很多工程师会抱怨自己一直在做业务，没什么挑战，感觉不到成长。可事实真的是这样吗？往往我们的业务需求就像这道面试题，看似简单其实想要做好，背后需要下很大功夫。就算平时做的业务真的很简单，我们是不是还可以想想，我的代码实现是否有更好的方式？面对类似的业务我的效率是否可以提升？线上出 Bug 了是否可以采集到线上 Log 快速定位并解决问题？你对自己开发的项目中用到的各种框架是否真的理解其原理，是否真的去翻过代码学习过这些优秀框架的实现？就拿 Android 开发来说，各种开源框架如 RxJava、Retrofit、OKHttp、ORM框架、热修复框架、插件化框架等等，如果你真的去认真学习过一遍，我相信已经远超行业里 90% 的工程师了。&lt;/p&gt;
&lt;p&gt;同时在工作中要有不怕吃亏的心态，主动去承担更多的职责；做的更多往往也意味着接受了更多的挑战，获得了更多的锻炼机会。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;利用碎片时间系统化学习&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;很多人反对碎片化学习，但我并不完全认同这种看法。碎片化的时间既可以用来碎片化的学习，也可以用来做系统化的学习。很多人都指望能够有一天，有一大片的时间，好好的、系统化的把计算机知识恶补一遍。所以买了算法导论、深入理解计算机系统等等经典书籍放在家里，等着有一天能够有一大片时间，沐浴更衣、正襟危坐来好好学习。但是学了不久很快又被其它事打断了，结果下一次又重新再来。最后往往只是把一本书的前几十页反复看了好多遍，其实这种才是真正的碎片化学习。&lt;/p&gt;
&lt;p&gt;而所谓的利用碎片化时间系统化的学习是指制定好完善的学习计划，利用好每一个碎片时间，比如上下班的路上、等公交的时间、坐地铁的时间、排队的时间，甚至是蹲马桶的时间来按计划的、体系化的学习提高。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;持续学习，坚持阅读，保持输出&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;技术更新迭代太快，而计算机科学之复杂也远不是在学校的几年学习就能完全学透的，这就要求我们保持持续学习。但往往很多人走出校门后就再也没有正儿八经的学习过、冲过电，这也是为什么我们毕业后会被那些优秀的工程师越甩越远的原因。而我认为最好的持续学习的方式就是坚持阅读了。你们看！优秀的工程师就算是挂着盐水也要坚持阅读的！！！🤣🤣🤣&lt;/p&gt;
&lt;p&gt;&lt;img title=&quot;&quot; src=&quot;http://ocjtywvav.bkt.clouddn.com/blog/other/engineer/pic2.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;另外学过的知识只有输出出来了，才是真正的学到肚子了。向别人讲述知识、写作等都是很好的知识输出方式。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;锻炼自己的综合能力&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;要成为一名优秀的工程师，光有过硬的技术是不够的。出色的完成一项工作往往考研的是一个人的综合能力。良好的表达能力、出色的会议组织能力、事情的推动能力、个人的成熟度等等都是需要我们在工作中去刻意的培养和锻炼的。拿表达能力来说，如果觉得自己表达上有所欠缺，就可以通过写作、主动在团队内做技术分享等等方式来锻炼自己。有时候，不逼自己一把你都不知道自己到底有多棒！&lt;/p&gt;
&lt;h2 id=&quot;h-2&quot;&gt;写在最后&lt;/h2&gt;
&lt;p&gt;作为一个技术上的菜鸟，写这样的文章实在是有点惭愧。且算是给自己定个基调，与大家共勉好了，这样也能督促自己不断进步。&lt;/p&gt;
&lt;p&gt;哦，对了！还有一点！！！优秀的工程师是不会抱着手机抖音一刷一晚上的。🤣🤣🤣&lt;/p&gt;
&lt;blockquote readability=&quot;3.8511627906977&quot;&gt;
&lt;p&gt;如果喜欢我的文章，就关注下我的公众号 &lt;strong&gt;BaronTalk&lt;/strong&gt; 、 &lt;a href=&quot;https://zhuanlan.zhihu.com/baron&quot;&gt;&lt;strong&gt;知乎专栏&lt;/strong&gt;&lt;/a&gt; 或者 &lt;a href=&quot;https://github.com/BaronZ88&quot;&gt;&lt;strong&gt;GitHub&lt;/strong&gt;&lt;/a&gt; 吧！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img title=&quot;&quot; src=&quot;http://ocjtywvav.bkt.clouddn.com/blog/common/qrcode1.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
</description>
<pubDate>Wed, 25 Apr 2018 07:15:00 +0000</pubDate>
<dc:creator>BaronZhang</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/baronzhang/p/8944870.html</dc:identifier>
</item>
<item>
<title>BI之SSIS入门以及最新版Visual Studio调试技巧 - 安与生</title>
<link>http://www.cnblogs.com/anyushengcms/p/8944331.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/anyushengcms/p/8944331.html</guid>
<description>&lt;p&gt;最近公司业务需要用到BI SSIS，网上大多数是以前版本介绍，没有最新版，现在结合公司的培训文档以及网上资料，总结一下入门及调试技巧，附叫常用技术栈,SSIS是什么？“SSIS是Microsoft SQL Server Integration Services的简称，是生成高性能&lt;a href=&quot;https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE%E9%9B%86%E6%88%90&quot;&gt;数据集成&lt;/a&gt;解决方案（包括数据仓库的提取、转换和加载 (ETL) 包）的平台。&lt;br/&gt;”SQL Server Integration Services (SSIS) 提供一系列支持业务&lt;a href=&quot;https://baike.baidu.com/item/%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91&quot;&gt;应用程序开发&lt;/a&gt;的内置任务、容器、转换和数据适配器。您无需编写一行代码，就可以创建 SSIS 解决方案来使用 ETL 和商业智能解决复杂的业务问题，管理 SQL Server 数据库以及在 SQL Server 实例之间复制 SQL Server 对象。&lt;/p&gt;

&lt;p&gt;新建，微软Visual Studio 最近版本新建就不用多说了,如图;&lt;br/&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/6855212-57edc97343483764.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;image.png&quot;/&gt;&lt;/p&gt;

&lt;h2 id=&quot;variables&quot;&gt;2.1，Variables&lt;/h2&gt;
&lt;p&gt;（1） 参数设置，在Package设计页面空白处“右键”选择Variables，点击&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/6855212-a26786189b106f7d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;image.png&quot;/&gt;添加参数&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/6855212-d7a6fadd732b1464.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;image.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;（2）Expression设置，点击&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/6855212-8ac2e5ef33463b67.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;image.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;配置带函数的参数，选择所需要的参数直接拖动即可&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/6855212-424064b7573f343b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;image.png&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;设置数据连接&quot;&gt;2.2，设置数据连接&lt;/h2&gt;
&lt;p&gt;（1）在Connection Managers窗口中“右键”创建各种Connection&lt;br/&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/6855212-8a0219cf99a4c43a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;image.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;（2）配置带参数的数据连接，选中创建的Connection后选择Properties窗口中&lt;/p&gt;
&lt;p&gt;Expressions配置连接参数，参数配置同上&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/6855212-6d97ad273dccf57f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;image.png&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;sequence-container&quot;&gt;2.3，Sequence Container&lt;/h2&gt;
&lt;p&gt;容器控件，用来将相似的tasks分组，一般用来将所有维度表和事实表处理分开&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/6855212-e0706c17ef8a4cf7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;image.png&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;execute-sql-task&quot;&gt;2.4，Execute SQL Task&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/6855212-eee17a91ed3538cc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;image.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;执行SQL任务&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/6855212-e7fcbd2e12479b84.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;image.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;（1）选中控件，选择Edit&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/6855212-6b9f5fa59351af4f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;image.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;SQL Statement栏中配置ConnectionType（数据库类型），Connection（数据库），SQLSourceType&lt;/p&gt;
&lt;p&gt;SQLSourceType有三种类型：&lt;/p&gt;
&lt;ul readability=&quot;0&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;Direct input  ，直接在SQLStatement中输入SQL语句，若需要参数请用“？”代替&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;File connection，File类型连接&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt; Variable，从我们配置的Variables中选择&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;（2）配置SQL语句中需要的参数“？”，选中Parameter Mapping&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/6855212-0bf76b86544ea728.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;image.png&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;script-task&quot;&gt;2.5，Script Task&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/6855212-e067379b2042c054.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;image.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;执行C#代码脚本任务，并返回成功或失败，&lt;/p&gt;
&lt;p&gt;（1）选中，右键Edit&lt;br/&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/6855212-a5a3a64999861f9f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;image.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;选择ReadOnlyVariables，配置需要传入C#代码的参数&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/6855212-fced39d99d40e2f4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;image.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;（2）编辑C#代码，&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/6855212-3e0a0f0bf3a16ef5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;image.png&quot;/&gt;进入代码编辑界面&lt;/p&gt;
&lt;h2 id=&quot;data-flow-task&quot;&gt;2.6，Data Flow Task&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/6855212-bbbd81ea3e9a3135.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;image.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;数据流任务控件，在其编辑中可放入对数据操作的SSIS控件，&lt;/p&gt;
&lt;h2 id=&quot;excel-source-plus&quot;&gt;2.7，Excel Source Plus&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/6855212-80217fac25662198.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;image.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;将Excel数据源导入数据库，在其Edit界面编辑需要导入的Excel数据源，点击[图片上传失败...(image-2c445-1524627024788)]&lt;/p&gt;
&lt;p&gt;添加新的数据源&lt;br/&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/6855212-31abf38c605081df.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;image.png&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;conditional-split&quot;&gt;2.8，Conditional Split&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/6855212-1934fb75cf77e6a2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;image.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;可以根据设置的条件函数处理数据，如对数据进行过滤、合并。在其Edit界面，&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/6855212-d3fa8f8e64361931.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;image.png&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;ole-db-source&quot;&gt;2.9，OLE DB Source&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/6855212-2747ddff7da22df1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;image.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;OLEDB类型数据源，在其Edit界面配置数据源&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/6855212-47833afa04bb3103.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;image.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;New添加新数据库，Data access mode选择数据源获取方式，直接选取或者从Variables参数中选取，或者通过SQL语句获取，若SQL语句需要参数点击&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/6855212-e127bb24c34c018a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;image.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;配置&lt;br/&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/6855212-8c685d233f16b3cd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;image.png&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;derived-column&quot;&gt;2.10，Derived Column&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/6855212-5ec51d9b07c5bf2f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;image.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;向要导入的数据库表中派生列，其Edit界面&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/6855212-93f143c3785204b3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;image.png&quot;/&gt;&lt;/p&gt;
&lt;ul readability=&quot;0&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;Derived Column Name 派生新列的字段名&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;Derived Column 派生列的方式&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt; Expression  新列字段值的表达式&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;lookup-plus&quot;&gt;2.11，Lookup Plus&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/6855212-8703c9fcec554548.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;image.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;将其他数据库表中的字段值插入数据中，其Edit界面&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/6855212-0e31465951cbcca9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;image.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Input Column 数据中要插入数据的字段名&lt;/p&gt;
&lt;p&gt;Reference 需要引用的数据，双击后进入其Edit界面&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/6855212-afccf8faac44dcac.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;image.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;首先编辑其需要引用数据的数据库，选择数据库Table/View作为数据源或者通过SQL语句查询数据，Key Column为两表关联字段，Value Column为要插入的数据字段&lt;/p&gt;
&lt;h2 id=&quot;data-conversion&quot;&gt;2.12，Data Conversion&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/6855212-409c748493564567.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;image.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;数据转换，将数据类型转换为MSSQL的数据类型，在其Edit界面选择需要转换的字段即可&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/6855212-5b763edc6fd49676.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;image.png&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;row-count-source&quot;&gt;2.13，Row Count – Source&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/6855212-4504882f78960ebd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;image.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;数据统计，统计处理的数据量，需要在Variables中定义Int32数据类型的参数来接受统计值&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/6855212-6ca3aba228750117.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;image.png&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;ole-db-destination&quot;&gt;2.14，OLE DB Destination&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/6855212-3ab31695220d2e2c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;image.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;OLE DB目标，数据导入的目标，其Edit界面&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/6855212-170a60230651ecc4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;image.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;配置好需要导入数据的数据库与数据表，若出现&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/6855212-e7ee2de63f22f4f6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;image.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;错误，请点击Mapping仔细检查数据字段匹配是否正确&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/6855212-7f85336d783aaa33.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;image.png&quot;/&gt;&lt;/p&gt;

&lt;h2 id=&quot;第一种调试方法&quot;&gt;3.1 第一种调试方法&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/6855212-855262b5f6243fc9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;image.png&quot;/&gt;&lt;br/&gt;如图，再箭头上直接右键 选中Enable Data Viewer,这样运行到这里会停止，并且能看到详细数据情况如下图，点击继续往下走。&lt;br/&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/6855212-02b2a4fb8d318e06.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;image.png&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;第二种调试方法&quot;&gt;3.2 第二种调试方法&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/6855212-f10c72729fa08a0d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;image.png&quot;/&gt;&lt;br/&gt;如图，在package执行时，会出现一个progress显示执行的进度&lt;/p&gt;
&lt;h2 id=&quot;第三种调试方法&quot;&gt;3.3第三种调试方法&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/6855212-0a27350d73460ff2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;image.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/6855212-b85fad33b5c71782.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;image.png&quot;/&gt;&lt;br/&gt;选中Execute SQL Task，点击右键，选中Edit Breakpoint来设置断点，进行调试。运行到这里会断点&lt;/p&gt;
&lt;h2 id=&quot;第四种调试方法&quot;&gt;3.4第四种调试方法&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/6855212-49894ff8fb204dcc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;image.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;package 事件调试，可以在事件选中指定事件，当错误出现时，发送runtime的错误信息或将错误信息写入文档，方便捉错误信息。&lt;/p&gt;

&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;注意，下面部分来自网上&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;control-flow-控制流程&quot;&gt;Control Flow 控制流程&lt;/h2&gt;
&lt;h4 id=&quot;containers-容器&quot;&gt;Containers 容器&lt;/h4&gt;
&lt;h4 id=&quot;core-task-核心任务&quot;&gt;Core Task 核心任务&lt;/h4&gt;
&lt;h4 id=&quot;other-task-其他任务&quot;&gt;Other Task 其他任务&lt;/h4&gt;
&lt;h3 id=&quot;data-flow-数据流程&quot;&gt;Data Flow 数据流程&lt;/h3&gt;
&lt;h4 id=&quot;transforms-传输&quot;&gt;Transforms 传输&lt;/h4&gt;
&lt;h4 id=&quot;sources-数据源&quot;&gt;Sources 数据源&lt;/h4&gt;
&lt;h4 id=&quot;destination-目标&quot;&gt;Destination 目标&lt;/h4&gt;
</description>
<pubDate>Wed, 25 Apr 2018 06:10:00 +0000</pubDate>
<dc:creator>安与生</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/anyushengcms/p/8944331.html</dc:identifier>
</item>
<item>
<title>开源小工具 - swagger API访问代码生成器（js/typescript） - JadePeng</title>
<link>http://www.cnblogs.com/xiaoqi/p/swagger-2-ts.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/xiaoqi/p/swagger-2-ts.html</guid>
<description>&lt;p&gt;现在流行前后端分离，后端通常会使用swagger生成api文档，提供给前端的同事来调用，一般前端是查看这个文档，根据文档说明编写调用代码。其实，swagger已经提供了足够多的描述信息，我们可以基于swagger直接生成相关的调用代码，节省前端时间。&lt;/p&gt;
&lt;p&gt;开源地址：&lt;a href=&quot;https://github.com/jadepeng/generator-swagger-2-ts&quot;&gt;swagger-2-ts&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;实现原理&quot;&gt;实现原理&lt;/h2&gt;
&lt;p&gt;打开swagger-ui，我们可以看到请求了/v2/api-docs获取api文档信息，其中definitions里是DTO对象定义，paths是API接口列表：&lt;br/&gt;&lt;img src=&quot;http://oyqmmpkcm.bkt.clouddn.com/1524631953796.jpg&quot; title=&quot;1524631953796&quot; alt=&quot;enter description here&quot;/&gt;&lt;/p&gt;
&lt;p&gt;因此，我们将这个api-docs下载下来，解析，就可以生成对应的调用代码了。&lt;/p&gt;
&lt;p&gt;制作代码生成器的方法很多，大部分都是基于模板，这个也不例外。不同的是，这次我们借助 &lt;a href=&quot;http://yeoman.io&quot;&gt;Yeoman&lt;/a&gt; 框架。Yeoman是一个代码生成器脚手架工具，可以访问官网查看具体介绍。&lt;/p&gt;
&lt;p&gt;代码生成器需要用户提供一些参数，比如swagger的地址，代码类型等，Yeoman提供了prompting功能，可以定义prompts，最后可以通过this.props获取用户参数&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;30&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;  &lt;span class=&quot;at&quot;&gt;prompting&lt;/span&gt;() &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;co&quot;&gt;// Have Yeoman greet the user.&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(
      &lt;span class=&quot;at&quot;&gt;yosay&lt;/span&gt;(
        &lt;span class=&quot;vs&quot;&gt;`Welcome to the swagger 2 typescript &lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;chalk&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;red&lt;/span&gt;(
          &lt;span class=&quot;st&quot;&gt;'generator-swagger-2-ts'&lt;/span&gt;
        )&lt;span class=&quot;sc&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;vs&quot;&gt; generator!`&lt;/span&gt;
      )
    )&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; prompts &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; [
      &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'input'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'swaggerUrl'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'please input swagger url,eg:http://localhost:8051/swagger-ui.html'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'http://localhost:8051/swagger-ui.html'&lt;/span&gt;
      &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
      &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'input'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'className'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'please enter class Name of the generated API'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'API'&lt;/span&gt;
      &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
      &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'list'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'type'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'please choose generated API type , js or typescript'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;choices&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; [
          &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;dt&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'typescript'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;dt&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'typescript'&lt;/span&gt;
          &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
          &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;dt&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'javascript'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;dt&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'js'&lt;/span&gt;
          &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
        ]
      &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
      &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'input'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'outPutFile'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'Please enter the API file name'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'api.ts'&lt;/span&gt;
      &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
    ]&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;prompt&lt;/span&gt;(prompts).&lt;span class=&quot;at&quot;&gt;then&lt;/span&gt;(props &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;props&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; props&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;接着就是代码生成，实现writing函数即可：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;下载api-docs，让用户提供swagger-ui地址，然后计算出api-dos路径&lt;/li&gt;
&lt;li&gt;解析json&lt;/li&gt;
&lt;li&gt;根据模板生成class文件，Yeoman的模板是基于&lt;a href=&quot;http://ejs.co/&quot;&gt;ejs&lt;/a&gt;，&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;16&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;at&quot;&gt;writing&lt;/span&gt;() &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; swaggerUrl &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;props&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;swaggerUrl&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;replace&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'swagger-ui.html'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'v2/api-docs'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; clsName &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;props&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;className&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; outPutFile &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;props&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;outPutFile&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; isTypescript &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;props&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;typescript&quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;va&quot;&gt;axios&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;get&lt;/span&gt;(swaggerUrl).&lt;span class=&quot;at&quot;&gt;then&lt;/span&gt;(response &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;va&quot;&gt;response&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;200&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; swagger &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;response&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; swaggerData &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;codegen&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;getViewForSwagger&lt;/span&gt;(
          &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;swagger&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; swagger&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;className&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; clsName &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt;
          &lt;span class=&quot;st&quot;&gt;'typescript'&lt;/span&gt;
        )&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;va&quot;&gt;swaggerData&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;defaultDomain&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;props&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;swaggerUrl&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;replace&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'/swagger-ui.html'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;''&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;fs&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;copyTpl&lt;/span&gt;(
          &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;templatePath&lt;/span&gt;(isTypescript &lt;span class=&quot;op&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'ts.ejs'&lt;/span&gt; : &lt;span class=&quot;st&quot;&gt;'js.ejs'&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;destinationPath&lt;/span&gt;(outPutFile)&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
          swaggerData
        )&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;cf&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;error&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;can't fond swaager api-docs&quot;&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;安装与使用&quot;&gt;安装与使用&lt;/h2&gt;
&lt;p&gt;需要同时安装 &lt;a href=&quot;http://yeoman.io&quot;&gt;Yeoman&lt;/a&gt; 和 &lt;a href=&quot;https://github.com/jadepeng/generator-swagger-2-ts&quot;&gt;swagger-2-ts&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode bash&quot;&gt;
&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span class=&quot;kw&quot;&gt;npm&lt;/span&gt; install -g yo
&lt;span class=&quot;kw&quot;&gt;npm&lt;/span&gt; install -g generator-swagger-2-ts&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后cd到你的工作目录，执行:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot;&gt;
&lt;pre class=&quot;sourceCode bash&quot;&gt;
&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span class=&quot;kw&quot;&gt;yo&lt;/span&gt; swagger-2-ts&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;按提示&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;输入swagger-ui 地址，例如http://192.168.86.8:8051/swagger-ui.html，程序包会自动将这个url地址replace('swagger-ui.html', 'v2/api-docs')得到swagger-api-docs，然后下载后解析，生成api class&lt;/li&gt;
&lt;li&gt;可选生成js 或者 typescript&lt;/li&gt;
&lt;li&gt;可以自定义生成的api class名称、api文件名&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;12&quot;&gt;
&lt;pre class=&quot;sourceCode bash&quot;&gt;
&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span class=&quot;kw&quot;&gt;C&lt;/span&gt;:\Users\Administrator&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;yo swagger-2-ts

     &lt;span class=&quot;kw&quot;&gt;_-----_&lt;/span&gt;     ╭──────────────────────────╮
    &lt;span class=&quot;kw&quot;&gt;|&lt;/span&gt;       &lt;span class=&quot;kw&quot;&gt;|&lt;/span&gt;    │ &lt;span class=&quot;kw&quot;&gt;Welcome&lt;/span&gt; to the swagger 2 │
    &lt;span class=&quot;kw&quot;&gt;|--&lt;/span&gt;(o)&lt;span class=&quot;kw&quot;&gt;--|&lt;/span&gt;    │        &lt;span class=&quot;kw&quot;&gt;typescript&lt;/span&gt;        │
   &lt;span class=&quot;kw&quot;&gt;`---------&lt;/span&gt;´   │  generator-swagger-2-ts  │
    &lt;span class=&quot;kw&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;_&lt;/span&gt;´U&lt;span class=&quot;kw&quot;&gt;`_&lt;/span&gt; )    │        &lt;span class=&quot;kw&quot;&gt;generator&lt;/span&gt;!        │
    &lt;span class=&quot;kw&quot;&gt;/___A___\ &lt;/span&gt;  /╰──────────────────────────╯
     &lt;span class=&quot;kw&quot;&gt;|&lt;/span&gt;  &lt;span class=&quot;kw&quot;&gt;~&lt;/span&gt;  &lt;span class=&quot;kw&quot;&gt;|&lt;/span&gt;
   &lt;span class=&quot;kw&quot;&gt;__&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'.___.'&lt;/span&gt;__
 ´   &lt;span class=&quot;kw&quot;&gt;`&lt;/span&gt;  &lt;span class=&quot;kw&quot;&gt;|&lt;/span&gt;° ´ &lt;span class=&quot;kw&quot;&gt;Y&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;`&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;?&lt;/span&gt; please input swagger url,eg:http://localhost:8051/swagger-ui.html http://localhost:8051/swagger-ui.html
&lt;span class=&quot;kw&quot;&gt;?&lt;/span&gt; please enter class Name of the generated API API
&lt;span class=&quot;kw&quot;&gt;?&lt;/span&gt; please choose generated API type , js or typescript typescript
&lt;span class=&quot;kw&quot;&gt;?&lt;/span&gt; Please enter the API file name api.ts
   &lt;span class=&quot;kw&quot;&gt;create&lt;/span&gt; api.ts&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;生成代码demo&quot;&gt;生成代码demo：&lt;/h2&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;12&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;im&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;im&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; API &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    $defaultDomain &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'http://localhost:8051'&lt;/span&gt;
    &lt;span class=&quot;co&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;    * &lt;/span&gt;@method
&lt;span class=&quot;co&quot;&gt;    * &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;@name&lt;/span&gt;&lt;span class=&quot;co&quot;&gt; &lt;/span&gt;&lt;span class=&quot;st&quot;&gt;API#getSkillsUsingGET&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;    * &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;@param&lt;/span&gt;&lt;span class=&quot;co&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;co&quot;&gt; authorization  &lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;    * &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;@param&lt;/span&gt;&lt;span class=&quot;co&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;$domain&lt;/span&gt;&lt;span class=&quot;co&quot;&gt; &lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;    */&lt;/span&gt;
    &lt;span class=&quot;at&quot;&gt;getSkillsUsingGET&lt;/span&gt; (parameters)&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; 
      &lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; body &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; config &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;baseURL&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;parameters&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;$domain&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;$defaultDomain&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'/api/skill'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;dt&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'GET'&lt;/span&gt;
      &lt;span class=&quot;op&quot;&gt;};&lt;/span&gt;
      &lt;span class=&quot;va&quot;&gt;config&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;headers&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{}&lt;/span&gt;
      &lt;span class=&quot;va&quot;&gt;config&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;headers&lt;/span&gt;[&lt;span class=&quot;st&quot;&gt;'Accept'&lt;/span&gt;] &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'*/*'&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;va&quot;&gt;config&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;headers&lt;/span&gt;[&lt;span class=&quot;st&quot;&gt;'authorization'&lt;/span&gt;] &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;parameters&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;authorization&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;va&quot;&gt;config&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; body
      &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;axios&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;request&lt;/span&gt;( config )&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;使用生成的api-class&quot;&gt;使用生成的API Class&lt;/h2&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode javascript&quot;&gt;
&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; API &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;./api&quot;&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;var&lt;/span&gt; api &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;API&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;http://192.168.86.8:8051&quot;&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;va&quot;&gt;api&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;getSkillsUsingGET&lt;/span&gt;(&lt;span class=&quot;op&quot;&gt;{}&lt;/span&gt;).&lt;span class=&quot;at&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt; (response) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;response&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;data&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;## 参考&lt;/p&gt;
&lt;h2 id=&quot;license&quot;&gt;License&lt;/h2&gt;
&lt;p&gt;Apache-2.0 © &lt;a href=&quot;https://github.com/jadepeng&quot;&gt;jadepeng&lt;/a&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;blockquote readability=&quot;7.3156342182891&quot;&gt;
&lt;p&gt;作者：Jadepeng&lt;br/&gt;出处：jqpeng的技术记事本--&lt;a href=&quot;http://www.cnblogs.com/xiaoqi&quot; class=&quot;uri&quot;&gt;http://www.cnblogs.com/xiaoqi&lt;/a&gt;&lt;br/&gt;您的支持是对博主最大的鼓励，感谢您的认真阅读。&lt;br/&gt;本文版权归作者所有，欢迎转载，但未经作者同意必须保留此段声明，且在文章页面明显位置给出原文连接，否则保留追究法律责任的权利。&lt;/p&gt;
&lt;/blockquote&gt;
</description>
<pubDate>Wed, 25 Apr 2018 05:08:00 +0000</pubDate>
<dc:creator>JadePeng</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/xiaoqi/p/swagger-2-ts.html</dc:identifier>
</item>
<item>
<title>手写JAVA虚拟机（二）——实现java命令行 - 真的是从入门开始</title>
<link>http://www.cnblogs.com/GoForMyDream/p/8863038.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/GoForMyDream/p/8863038.html</guid>
<description>&lt;p&gt;&lt;span&gt;　　&lt;em&gt;查看&lt;span&gt;手写JAVA虚拟机系列&lt;/span&gt;可以进我的博客园主页查看。&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　我们知道，我们编译.java并运行.class文件时，需要一些java命令，如最简单的helloworld程序。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1033862/201804/1033862-20180417105057531-1854454487.jpg&quot; alt=&quot;&quot; width=&quot;738&quot; height=&quot;363&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　这里的&lt;span&gt;程序最好不要加包名&lt;/span&gt;，因为加了包名的话编译和运行需要有所改动。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　看这里的命令。&lt;span&gt;javac为编译命令&lt;/span&gt;，我们知道java的特点是一次编译，到处运行。这里的编译指的就是javac，对于java程序即.java文件，先要用javac编译成&lt;span&gt;字节码&lt;/span&gt;。然后将字节码（.class文件）放到java虚拟机中运行，即上图中的java HelloWorld，java虚拟机把&lt;span&gt;字节码翻译成对应机器上的机器指令&lt;/span&gt;，再由机器来执行具体的机器指令。也就是说java程序员是直接与java虚拟机交互，简介与机器交互。所以虚拟机完成的是java命令，也就是&lt;span&gt;&lt;strong&gt;&lt;span&gt;我们要完成的是java这个指令的功能&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　那么我们把第一个目标定为，&lt;span&gt;实现简单的命令行&lt;/span&gt;。即我们通过命令行可以输入一些内容，虚拟机读取之后可以给一定的反馈。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　GO语言中有两个和命令行相关的包，分别是os和flag（java中以类库即jar文件导入，go中直接以包的形式导入）。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　首先在GOPATH目录下的src里面新建一个jvmgo文件夹作为我们的&lt;span&gt;工作空间目录&lt;/span&gt;，jvmgo里面再新建一个ch01为我们的第一个目标源码文件夹，添加cmd.go文件。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1033862/201804/1033862-20180417111732066-237621438.jpg&quot; alt=&quot;&quot; width=&quot;723&quot; height=&quot;137&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　在cmd.go里面输入如下代码（&lt;span&gt;由于博客园的添加代码方式不支持go语言着色，所以采用C语言着色，高亮可能不太正确&lt;/span&gt;）&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;51&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt;package main

import &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;flag&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
import &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;fmt&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
import &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;os&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;

&lt;span&gt;//&lt;/span&gt;&lt;span&gt;定义Cmd结构体&lt;/span&gt;
type Cmd &lt;span&gt;struct&lt;/span&gt;&lt;span&gt;{
    helpFlag     &lt;/span&gt;&lt;span&gt;bool&lt;/span&gt;&lt;span&gt;
    versionFlag     &lt;/span&gt;&lt;span&gt;bool&lt;/span&gt;&lt;span&gt;
    cpOption     &lt;/span&gt;&lt;span&gt;string&lt;/span&gt;
    &lt;span&gt;class&lt;/span&gt;     &lt;span&gt;string&lt;/span&gt;&lt;span&gt;
    args     []&lt;/span&gt;&lt;span&gt;string&lt;/span&gt;&lt;span&gt;
}

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;解析命令行参数&lt;/span&gt;
func parseCmd() *&lt;span&gt;Cmd {
    cmd:&lt;/span&gt;=&amp;amp;&lt;span&gt;Cmd{}

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;将printUsage函数传给flag.Usage&lt;/span&gt;
    flag.Usage=&lt;span&gt;printUsage
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置各种解析的选项&lt;/span&gt;
    flag.BoolVar(&amp;amp;cmd.helpFlag, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;help&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;false&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;print help message&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
    flag.BoolVar(&lt;/span&gt;&amp;amp;cmd.helpFlag, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;?&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;false&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;print help message&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
    flag.BoolVar(&lt;/span&gt;&amp;amp;cmd.versionFlag, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;false&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;print version and exit&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
    flag.StringVar(&lt;/span&gt;&amp;amp;cmd.cpOption, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;classpath&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;classpath&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
    flag.StringVar(&lt;/span&gt;&amp;amp;cmd.cpOption, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;cp&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;classpath&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;所有选项设置完成后调用flag.Parse解析所有选项，如果Parse失败，则调用flag.Usage打印帮助信息&lt;/span&gt;
&lt;span&gt;    flag.Parse()

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;调用flag.Args函数捕获未被解析的参数，第一个参数为主类名，后面的为传递给主类的参数&lt;/span&gt;
    args:=&lt;span&gt;flag.Args()
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; len(args)&amp;gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;{
        cmd.&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;=args[&lt;span&gt;0&lt;/span&gt;&lt;span&gt;]
        cmd.args&lt;/span&gt;=args[&lt;span&gt;1&lt;/span&gt;&lt;span&gt;:]
    }

    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; cmd
}

func printUsage() {
    fmt.Printf(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Usage:%s[-options] class [args...]\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,os.Args[&lt;span&gt;0&lt;/span&gt;&lt;span&gt;])
}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;　　第一行为包名，main包，接着引入了三个包os，flag，fmt。&lt;span&gt;os和flag都是处理命令行所需的包&lt;/span&gt;，&lt;span&gt;fmt类似于C语言的printf和scanf等格式化IO&lt;/span&gt;。再往下定义了一个结构体Cmd，用来这个数据结构来格式化存储输入的命令行信息。helpFlag参数为命令行是否请求help，versionFlag参数为命令行是否请求version，cpOption为命令行传入的classpath即目标.class文件所在文件夹，class为命令行传入的.class文件名（不包括.class），args为命令行传入的其他参数。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　紧接着是一个&lt;span&gt;parseCmd函数&lt;/span&gt;（go语言有函数和方法之分，方法调用需要receiver，函数调用则不需要 ），返回值为*Cmd，用来解析cmd传过来的参数。该函数里面先声明一个cmd并给这个cmd赋值一个新建的Cmd对象。go语言中的“:=”为声明并赋值，而&quot;=&quot;为赋值。先把printUsage的函数赋值给flag.Usage，然后&lt;span&gt;调用flag设置需要解析的选项&lt;/span&gt;，全部解析完毕，&lt;span&gt;调用Parse函数解析所有选项&lt;/span&gt;。解析成功则结束，解析失败则调用printUsage打印到控制台。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　flag.Args可以捕获其他没有被解析的参数。上面解析成功之后，&lt;span&gt;第一个参数就是主类名&lt;/span&gt;，剩下的就是传给主类的参数。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　工具类编写完成，下一个是主函数。先上主函数代码：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&lt;span&gt;package main

import &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;fmt&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;

func main() {
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;调用parseCmd解析命令行参数&lt;/span&gt;
    cmd:=&lt;span&gt;parseCmd()

    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; cmd.versionFlag{
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;输入了-version选项&lt;/span&gt;
        fmt.Println(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;version 0.0.1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
    }&lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; cmd.helpFlag||cmd.&lt;span&gt;class&lt;/span&gt;==&lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;{
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;输入了-help选项&lt;/span&gt;
&lt;span&gt;        printUsage()
    }&lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;{
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;启动jvm&lt;/span&gt;
&lt;span&gt;        stratJVM(cmd)
    }
}

func stratJVM(cmd &lt;/span&gt;*&lt;span&gt;Cmd){
    fmt.Printf(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;classpath:%s class:%s args:%v\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
        cmd.cpOption,cmd.&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;,cmd.args)
}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　跟java类似，在go里面main是一个特殊的包，go程序的入口就是main函数，但是不接受任何参数，也不能有返回值。main函数先调用parseCmd解析命令行参数，如果是-version则返回版本号，如果是-help则返回帮助信息，如果是其他则启动jvm，这里&lt;span&gt;用一些输出信息“假装”启动了jvm&lt;/span&gt;，真正的jvm代码后面会加上。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　至此，对命令行的解析工作全部完成。先展示一下整个工作目录的结构，不然后面编译运行的时候会出错。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1033862/201804/1033862-20180425124019249-1131457717.png&quot; alt=&quot;&quot; width=&quot;938&quot; height=&quot;184&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　我们的工作目录是D盘下的JVM里的goWorkSpace，再下面src，jvmgo，ch01，ch01里面包含的是我们的go文件。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　来测试一下，打开一命令行，输入&lt;strong&gt;&lt;span&gt;go install jvmgo\ch01&lt;/span&gt;&lt;/strong&gt;。这个命令是使用go.exe来install文件，这个文件存在于GOPATH下面的文件夹（jvmgo\ch01中），结果如图：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1033862/201804/1033862-20180425124459199-1294583829.jpg&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　然后在工作空间（GOPATH）的bin文件夹中就多出了一个ch01.exe。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1033862/201804/1033862-20180425124537000-1245967815.jpg&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　在此处打开命令行。可以进行一些操作：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1033862/201804/1033862-20180425124722491-1298261543.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　到这里，我们的命令行工具就完成了，虽然还没有涉及真正的虚拟机设计，但这也是虚拟机运行的重要一步，后面会逐渐介绍虚拟机的设计。&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Wed, 25 Apr 2018 04:54:00 +0000</pubDate>
<dc:creator>真的是从入门开始</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/GoForMyDream/p/8863038.html</dc:identifier>
</item>
<item>
<title>DDD实战进阶第一波(七)：开发一般业务的大健康行业直销系统（实现产品上下文接口与测试） - 曹剑</title>
<link>http://www.cnblogs.com/malaoko/p/8943149.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/malaoko/p/8943149.html</guid>
<description>&lt;p align=&quot;left&quot;&gt;前一篇文章我们介绍了如何将创建产品的领域逻辑与产品的持久化仓储通过上架产品的用例组织起来，完成了一个功能。在实际的项目中，多种前端的形态比如&lt;span lang=&quot;EN-US&quot;&gt;PC Web、&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;微信小程序、原生&lt;span lang=&quot;EN-US&quot;&gt;APP等要调用后端的功能，通常要将后端的功能包装成&lt;span lang=&quot;EN-US&quot;&gt;RESTFUL风格，这样前端就可以使用&lt;span lang=&quot;EN-US&quot;&gt;Http Get或&lt;span lang=&quot;EN-US&quot;&gt;Post方式调用后端的功能，所以这篇文章我们先来完成后端&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;的&lt;span lang=&quot;EN-US&quot;&gt;Asp.net Core WebApi，通过&lt;span lang=&quot;EN-US&quot;&gt;WebApi将上架产品的功能暴露出去。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;strong&gt;实现上下产品接口：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
[Produces(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;application/json&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)]
    [Route(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;api/Product&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)]
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; ProductController : Controller
    {
        ServiceLocator servicelocator &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; ServiceLocator();
        [HttpPost]
        [Route(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;AddProduct&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)]
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; ResultEntity&amp;lt;&lt;span&gt;bool&lt;/span&gt;&amp;gt;&lt;span&gt; AddProduct([FromBody] AddProductSPUDTO addproductspudto)
        {
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; result = &lt;span&gt;new&lt;/span&gt; ResultEntity&amp;lt;&lt;span&gt;bool&lt;/span&gt;&amp;gt;&lt;span&gt;();
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; productdbcontext = servicelocator.GetService&amp;lt;IProductContext&amp;gt;&lt;span&gt;();
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; irepository = servicelocator.GetService&amp;lt;IRepository&amp;gt;(&lt;span&gt;new&lt;/span&gt; ParameterOverrides { { &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;context&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, productdbcontext } });
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; iproductrepository=servicelocator.GetService&amp;lt;IProductRepository&amp;gt;(&lt;span&gt;new&lt;/span&gt; ParameterOverrides { { &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;context&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, productdbcontext } });
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; addproductspuusecase = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; AddProductSPUUseCase(irepository,iproductrepository);
            &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt;
            {
                result &lt;/span&gt;=&lt;span&gt; addproductspuusecase.AddProduct(addproductspudto);
                result.IsSuccess &lt;/span&gt;= &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
                result.Count &lt;/span&gt;= &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
                result.Msg &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;上架产品成功!&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
            }
            &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt;(Exception error)
            {
                result.ErrorCode &lt;/span&gt;= &lt;span&gt;100&lt;/span&gt;&lt;span&gt;;
                result.Msg &lt;/span&gt;=&lt;span&gt; error.Message;
            }
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; result;
        }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p align=&quot;left&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;1.首先大家看到接口层是非常薄的一层，它并不包含业务逻辑和数据访问，它只是初始化一些对象，然后完成应用服务的调用，返回前端所需要的格式的对象。&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;2.产品数据访问上下文、仓储接口、产品上下文仓储接口等需要通过依赖注入框架来获取特定的实现类，依赖注入框架可以采用&lt;span lang=&quot;EN-US&quot;&gt;Asp.net Core自带的，也可以采用&lt;span lang=&quot;EN-US&quot;&gt;Unity等框架。这里略去了依赖注入框架&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;的具体实现，可以在公众号内查看。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;3.如果在调用应用服务可能抛出异常时，需要详细指明每个&lt;span lang=&quot;EN-US&quot;&gt;catch与抛出的内容。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;当后端接口完成后，作为后端开发人员，我们需要写单元测试来完成对后端接口的调用，并尝试得到期望的结果。我们在这里采用&lt;span lang=&quot;EN-US&quot;&gt;MSTest，你也可以使用&lt;span lang=&quot;EN-US&quot;&gt;XUnit。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;strong&gt;上架产品单元测试：&lt;/strong&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;47&quot;&gt;
&lt;pre&gt;
&lt;span&gt;HttpClient httpclient;       

        [TestMethod]
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; AddProductTest()
        {
            httpclient &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; HttpClient();
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; addproductspudto = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; AddProductSPUDTO();
            addproductspudto.SPUName &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;XXX石榴露&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
            addproductspudto.SPUDesc &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;XXX精华石榴露，用于养生&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
            addproductspudto.SKUSpecs &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; List&amp;lt;&lt;span&gt;string&lt;/span&gt;&amp;gt;&lt;span&gt;();
            addproductspudto.SKUSpecs.Add(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;每瓶50毫升&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            addproductspudto.SKUSpecs.Add(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;每瓶100毫升&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            addproductspudto.SKUUnits &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; List&amp;lt;&lt;span&gt;string&lt;/span&gt;&amp;gt;&lt;span&gt;();
            addproductspudto.SKUUnits.Add(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;瓶&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            addproductspudto.SKUUnits.Add(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;瓶&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            addproductspudto.SKUPvs &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; List&amp;lt;&lt;span&gt;decimal&lt;/span&gt;&amp;gt;&lt;span&gt;();
            addproductspudto.SKUPvs.Add(&lt;/span&gt;&lt;span&gt;120&lt;/span&gt;&lt;span&gt;);
            addproductspudto.SKUPvs.Add(&lt;/span&gt;&lt;span&gt;300&lt;/span&gt;&lt;span&gt;);
            addproductspudto.SKUDealerPrices &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; List&amp;lt;&lt;span&gt;decimal&lt;/span&gt;&amp;gt;&lt;span&gt;();
            addproductspudto.SKUDealerPrices.Add(&lt;/span&gt;&lt;span&gt;3000&lt;/span&gt;&lt;span&gt;);
            addproductspudto.SKUDealerPrices.Add(&lt;/span&gt;&lt;span&gt;4000&lt;/span&gt;&lt;span&gt;);
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; fs = &lt;span&gt;new&lt;/span&gt; FileStream(&lt;span&gt;@&quot;&lt;/span&gt;&lt;span&gt;c:\test.jpg&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, FileMode.Open, FileAccess.Read);
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; imgbytes = &lt;span&gt;new&lt;/span&gt; &lt;span&gt;byte&lt;/span&gt;&lt;span&gt;[fs.Length];
            fs.Read(imgbytes, &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;, Convert.ToInt32(fs.Length));
            fs.Close();
            addproductspudto.SKUImages &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; List&amp;lt;&lt;span&gt;byte&lt;/span&gt;[]&amp;gt;&lt;span&gt;();
            addproductspudto.SKUImages.Add(imgbytes);
            addproductspudto.SKUImages.Add(imgbytes);

            &lt;/span&gt;&lt;span&gt;string&lt;/span&gt; json =&lt;span&gt; JsonConvert.SerializeObject(addproductspudto);
            HttpContent httpcontent &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; StringContent(json);
            httpcontent.Headers.ContentType &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; MediaTypeHeaderValue(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;application/json&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; response = httpclient.PostAsync(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;http://localhost:2209/api/Product/AddProduct&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, httpcontent).Result;
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; responsevalue =&lt;span&gt; response.Content.ReadAsStringAsync().Result;
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; responsemsg = JsonConvert.DeserializeObject&amp;lt;ResultEntity&amp;lt;&lt;span&gt;bool&lt;/span&gt;&amp;gt;&amp;gt;&lt;span&gt;(responsevalue).Msg;
            Assert.AreEqual(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;上架产品成功!&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, responsemsg);
        }
[TestMethod]
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; AddProductTest()
        {
            httpclient &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; HttpClient();
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; addproductspudto = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; AddProductSPUDTO();
            addproductspudto.SPUName &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;XXX面膜&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
            addproductspudto.SPUDesc &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;XXX面膜，用于护肤&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
            addproductspudto.SKUSpecs &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; List&amp;lt;&lt;span&gt;string&lt;/span&gt;&amp;gt;&lt;span&gt;();
            addproductspudto.SKUSpecs.Add(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;每盒5张&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            addproductspudto.SKUSpecs.Add(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;每盒10张&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            addproductspudto.SKUUnits &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; List&amp;lt;&lt;span&gt;string&lt;/span&gt;&amp;gt;&lt;span&gt;();
            addproductspudto.SKUUnits.Add(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;盒&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            addproductspudto.SKUUnits.Add(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;盒&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            addproductspudto.SKUPvs &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; List&amp;lt;&lt;span&gt;decimal&lt;/span&gt;&amp;gt;&lt;span&gt;();
            addproductspudto.SKUPvs.Add(&lt;/span&gt;&lt;span&gt;200&lt;/span&gt;&lt;span&gt;);
            addproductspudto.SKUPvs.Add(&lt;/span&gt;&lt;span&gt;350&lt;/span&gt;&lt;span&gt;);
            addproductspudto.SKUDealerPrices &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; List&amp;lt;&lt;span&gt;decimal&lt;/span&gt;&amp;gt;&lt;span&gt;();
            addproductspudto.SKUDealerPrices.Add(&lt;/span&gt;&lt;span&gt;5000&lt;/span&gt;&lt;span&gt;);
            addproductspudto.SKUDealerPrices.Add(&lt;/span&gt;&lt;span&gt;8000&lt;/span&gt;&lt;span&gt;);
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; fs = &lt;span&gt;new&lt;/span&gt; FileStream(&lt;span&gt;@&quot;&lt;/span&gt;&lt;span&gt;c:\test1.jpg&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, FileMode.Open, FileAccess.Read);
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; imgbytes = &lt;span&gt;new&lt;/span&gt; &lt;span&gt;byte&lt;/span&gt;&lt;span&gt;[fs.Length];
            fs.Read(imgbytes, &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;, Convert.ToInt32(fs.Length));
            fs.Close();
            addproductspudto.SKUImages &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; List&amp;lt;&lt;span&gt;byte&lt;/span&gt;[]&amp;gt;&lt;span&gt;();
            addproductspudto.SKUImages.Add(imgbytes);
            addproductspudto.SKUImages.Add(imgbytes);

            &lt;/span&gt;&lt;span&gt;string&lt;/span&gt; json =&lt;span&gt; JsonConvert.SerializeObject(addproductspudto);
            HttpContent httpcontent &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; StringContent(json);
            httpcontent.Headers.ContentType &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; MediaTypeHeaderValue(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;application/json&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; response = httpclient.PostAsync(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;http://localhost:2209/api/Product/AddProduct&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, httpcontent).Result;
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; responsevalue =&lt;span&gt; response.Content.ReadAsStringAsync().Result;
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; responsemsg = JsonConvert.DeserializeObject&amp;lt;ResultEntity&amp;lt;&lt;span&gt;bool&lt;/span&gt;&amp;gt;&amp;gt;&lt;span&gt;(responsevalue).Msg;
            Assert.AreEqual(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;上架产品成功!&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, responsemsg);
        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span lang=&quot;EN-US&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;有了单元测试，我们后端开发人员就可以验证是否后端接口与整个用例是否是正常的，另外单元测试也可以作为每日自动构建的一部分。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;QQ讨论群：&lt;span lang=&quot;EN-US&quot;&gt;309287205&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;DDD实战进阶视频请关注微信公众号：&lt;img src=&quot;https://images2018.cnblogs.com/blog/56104/201804/56104-20180425123520266-1501735620.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Wed, 25 Apr 2018 04:36:00 +0000</pubDate>
<dc:creator>曹剑</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/malaoko/p/8943149.html</dc:identifier>
</item>
<item>
<title>React Suite v3.0 正式版发布 - 郭小铭</title>
<link>http://www.cnblogs.com/guoxiaoming/p/8942527.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/guoxiaoming/p/8942527.html</guid>
<description>&lt;div class=&quot;article-content&quot; data-v-13f76525=&quot;&quot; readability=&quot;51.010507880911&quot;&gt;
&lt;p&gt;相信很多人会好奇，React Suite 是什么？&lt;/p&gt;
&lt;p&gt;React Suite 是 HYPERS 前端团队和 UX 团队开源的一套基于 React 的 UI 组件库，能够帮助您快速构建一个企业级应用。&lt;/p&gt;
&lt;p&gt;官网访问地址： &lt;a href=&quot;https://link.juejin.im/?target=https%3A%2F%2Frsuitejs.com&quot; rel=&quot;nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;rsuitejs.com&lt;/a&gt;&lt;/p&gt;
&lt;h2 class=&quot;heading&quot; data-id=&quot;heading-0&quot;&gt;为什么选择 React Suite ?&lt;/h2&gt;
&lt;p&gt;我们在服务于很多企业的过程中发现，不管是大企业，还是中小企业都有一套（或者希望有一套）自己的 VI ，其中产品视觉设计就很重要的一部分，这些企业都不希望自己的产品通过某某框架生产出市面上都一样的设计风格。&lt;/p&gt;
&lt;p&gt;在这样一个背景下，我们除了做好功能全面的组件，另外一直在想办法让 React Suite 可以方便的个性化定制。&lt;/p&gt;
&lt;p&gt;我们的目标：就是让所有的企业都可以定制化一套属于自己企业产品风格的组件。&lt;/p&gt;
&lt;p&gt;如果您们公司也在使用 React 技术栈, 也在找一个工具能很好定制成符合自己企业 VI 的产品，不妨试一下 &lt;a href=&quot;https://link.juejin.im/?target=https%3A%2F%2Frsuitejs.com&quot; rel=&quot;nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;React Suite&lt;/a&gt;。&lt;/p&gt;
&lt;h2 class=&quot;heading&quot; data-id=&quot;heading-1&quot;&gt;本次更新内容&lt;/h2&gt;
&lt;p&gt;从 2.0 到 3.0 做了很大改动，为了使用上的便利，我们把各个独立组件统一合并至 rsuite 库，并重新设计并重构了所有代码，在设计与测试上投入了大量的时间。&lt;/p&gt;
&lt;p&gt;希望可以得到大家的支持 &lt;a href=&quot;https://link.juejin.im/?target=https%3A%2F%2Fgithub.com%2Frsuite%2Frsuite&quot; rel=&quot;nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;Star&lt;/a&gt; 。&lt;/p&gt;
&lt;/div&gt;
</description>
<pubDate>Wed, 25 Apr 2018 04:03:00 +0000</pubDate>
<dc:creator>郭小铭</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/guoxiaoming/p/8942527.html</dc:identifier>
</item>
<item>
<title>分布式改造剧集之Redis缓存踩坑记 - Secondworld</title>
<link>http://www.cnblogs.com/Kidezyq/p/8942111.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/Kidezyq/p/8942111.html</guid>
<description>&lt;p&gt;​&lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;
&lt;p&gt;​ 这个其实应该属于分布式改造剧集中的一集（第一集见前面博客:&lt;a href=&quot;http://www.cnblogs.com/Kidezyq/p/8748961.html&quot; class=&quot;uri&quot;&gt;http://www.cnblogs.com/Kidezyq/p/8748961.html&lt;/a&gt;），本来按照顺序来的话，不会这么快发布这篇博客。但是，因为这个坑让我浪费太多时间。这个情形和一年前我在另一个项目中试图优化mybatis时简直完全一致，即使拿出了源码来debug还是解决不了这个问题，网上搜索的方法全部尝试了一遍还是不行。足足浪费了两三天的时间，说想吐血一点都不为过...... 鉴于再次被坑的这么惨，这里先拿出来和大家说道说道，也算是对自己这几天努力的总结。&lt;/p&gt;
&lt;hr/&gt;&lt;h2 id=&quot;爱情来的太快就像龙卷风&quot;&gt;爱情来的太快就像龙卷风&lt;/h2&gt;
&lt;p&gt;​ 为什么会用redis做缓存呢？刚开始我的分布式改造方案只是改进了Ehcache，增加了不同节点之间的同步特性。结果呢，在评审的时候，大家一致决定要引入Redis。当时的感觉真的就像这首龙卷风，终于可以在项目中研究新的技术。要说redis是啥怎么用，我其实还是有一定了解的（再怎么说都是买了两本书看）。但是一直苦于项目中用不到，看完就忘😢 。现在终于觉得英雄有用武之地了，竟然让我使用redis。嘿嘿嘿......&lt;/p&gt;
&lt;hr/&gt;&lt;h2 id=&quot;依葫芦画瓢&quot;&gt;依葫芦画瓢&lt;/h2&gt;
&lt;p&gt;​ 依葫芦画瓢是学习的最基本也是最难的方法。有的人只画出了形，有的人却在画形的过程中悟出了神。好吧，既然第一次在公司项目中使用redis，那我就百度下别人的使用方法。大致的配置如下:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode xml&quot;&gt;
&lt;code class=&quot;sourceCode xml&quot;&gt;  &lt;span class=&quot;co&quot;&gt;&amp;lt;!-- redis缓存配置 --&amp;gt;&lt;/span&gt;
     &lt;span class=&quot;co&quot;&gt;&amp;lt;!-- Jedis线程池 --&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;bean&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; id=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;jedisCachePoolConfig&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; class=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;redis.clients.jedis.JedisPoolConfig&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;property&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;maxIdle&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; value=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;1000&quot;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;property&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;minIdle&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; value=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;0&quot;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;property&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;maxTotal&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; value=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;1000&quot;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;property&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;testOnBorrow&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; value=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;true&quot;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/bean&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;bean&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; id=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;jedisShardInfo&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; class=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;redis.clients.jedis.JedisShardInfo&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;constructor-arg&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; index=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;0&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; value=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;${redis.host}&quot;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;constructor-arg&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; index=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;1&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; value=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;${redis.port}&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; type=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;int&quot;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;property&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;password&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; value=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;${redis.password}&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&amp;lt;/property&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/bean&amp;gt;&lt;/span&gt;
   &lt;span class=&quot;co&quot;&gt;&amp;lt;!--  Redis连接 --&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;bean&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; id=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;jedisConnectionFactory&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;        class=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;org.springframework.data.redis.connection.jedis.JedisConnectionFactory&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;property&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;shardInfo&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; ref=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;jedisShardInfo&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;property&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;poolConfig&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; ref=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;jedisCachePoolConfig&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/bean&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;co&quot;&gt;&amp;lt;!-- 缓存序列化方式 --&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;bean&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; id=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;stringSerializer&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; class=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;org.springframework.data.redis.serializer.StringRedisSerializer&quot;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;bean&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; id=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;jsonSerializer&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; class=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializer&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/bean&amp;gt;&lt;/span&gt;

   &lt;span class=&quot;co&quot;&gt;&amp;lt;!--  redis数据库操作模板 --&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;bean&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; id=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;redisTemplate&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; class=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;org.springframework.data.redis.core.RedisTemplate&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;property&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;connectionFactory&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; ref=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;jedisConnectionFactory&quot;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;property&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;keySerializer&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; ref=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;stringSerializer&quot;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;property&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;valueSerializer&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; ref=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;jsonSerializer&quot;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;property&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;hashKeySerializer&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; ref=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;stringSerializer&quot;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;property&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;hashValueSerializer&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; ref=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;jsonSerializer&quot;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/bean&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;co&quot;&gt;&amp;lt;!-- redis缓存管理器 --&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;bean&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; id=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;cacheManager&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; class=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;org.springframework.data.redis.cache.RedisCacheManager&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;constructor-arg&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; index=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;0&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; ref=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;redisTemplate&quot;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;property&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;defaultExpiration&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; value=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;600&quot;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/bean&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;​ 本来以为可能启动会报各种错，然后需要我一一去解决。实际上没有报任何错，好像太顺利了。&lt;/p&gt;
&lt;hr/&gt;&lt;h2 id=&quot;山雨欲来风满楼&quot;&gt;山雨欲来风满楼&lt;/h2&gt;
&lt;p&gt;​ 验证了下登录还有我自己写的有&lt;code&gt;@Cacheable&lt;/code&gt;注解的方法似乎没什么问题，本以为就可以愉快地使用Redis作缓存了。事实证明我还是Too Young Too Naive。就在我信心满满，准备测试验证主流程缓存使用情况的时候，意料之中地报错了，也就是这个错，拉开了我的采坑填坑之路......&lt;/p&gt;
&lt;hr/&gt;&lt;h2 id=&quot;坑1&quot;&gt;坑1&lt;/h2&gt;
&lt;p&gt;​ 不多废话了，直接给出报错的信息：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;Caused by: com.&lt;span class=&quot;fu&quot;&gt;fasterxml&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;jackson&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;databind&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;JsonMappingException&lt;/span&gt;: (was java.&lt;span class=&quot;fu&quot;&gt;lang&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;NullPointerException&lt;/span&gt;)(through reference chain:....&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;​ 基本报错的情况就是和上面一致的，不同的可能就在后面的reference chain。这个报错倒是直接往百度上一搜一堆答案，但基本都不是我想要的。网上的答案基本都是和这个链接保持一致的&lt;a href=&quot;http://hw1287789687.iteye.com/blog/2255940&quot; class=&quot;uri&quot;&gt;http://hw1287789687.iteye.com/blog/2255940&lt;/a&gt;,并且举的都是Student的例子😭 虽然这个跟我遇到的完全不同，不过也给我找到问题指了一条路。基本原因可以断定是由于属性定义的类型和get方法返回的类型不一致。好吧，那就来看对应的Pojo。报错的Pojo的定义如下：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; BankInfo {
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; Integer bankCode;
    
    &lt;span class=&quot;fu&quot;&gt;@JsonSerialize&lt;/span&gt;(using = IdToNameJsonSerializable.&lt;span class=&quot;fu&quot;&gt;class&lt;/span&gt;)
    &lt;span class=&quot;fu&quot;&gt;@TypeClass&lt;/span&gt;(typeClass = TypeConstants.&lt;span class=&quot;fu&quot;&gt;BANK_CODE&lt;/span&gt;)
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; Integer &lt;span class=&quot;fu&quot;&gt;getBankCode&lt;/span&gt;() {
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;bankCode&lt;/span&gt;;
    }
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;​ 报错信息中的referece chain就是这个BankInfo['bankCode']。初看这个属性的定义类型和get方法的返回值类型完全是一致的，那么为什么还是会报错呢？原因就在于get方法上面的注解，其中&lt;code&gt;@JsonSerialize&lt;/code&gt;注解是jackson自带的，下面的注解是项目自定义的。在我们项目中其实就是希望通过这两个注解将bankCode直接转换成对应的银行名称，直接给界面展示。而这个银行名称必然是字符串了，与属性bankCode的类型不符。好了原因找到了，剩下的就是看如何去掉对Pojo上面注解的解释执行了。&lt;/p&gt;
&lt;p&gt;​ 通过网上搜索资料后得知，jackson底层的序列化和反序列化使用的是&lt;code&gt;ObjectMapper&lt;/code&gt;，而&lt;code&gt;ObjectMapper&lt;/code&gt;在初始化之后可以设置各种各样的属性，通过查看源码发现有一个&lt;code&gt;MapperFeature.USE_ANNOTATIONS&lt;/code&gt;属性，定义如下：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;12&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;co&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;  * Feature that determines whether annotation introspection&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;  * is used for configuration; if enabled, configured&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;  * &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;{@link AnnotationIntrospector}&lt;/span&gt;&lt;span class=&quot;co&quot;&gt; will be used: if disabled,&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;  * no annotations are considered.&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;  *&amp;lt;p&lt;/span&gt;&amp;gt;
&lt;span class=&quot;er&quot;&gt;  * Feature is enabled by default.&lt;/span&gt;
&lt;span class=&quot;er&quot;&gt;  */&lt;/span&gt;
&lt;span class=&quot;fu&quot;&gt;USE_ANNOTATIONS&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;true&lt;/span&gt;),&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;​ 于是我定义了一个自己的ObjectMapper对象实例，大致如下:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; MyObjectMapper &lt;span class=&quot;kw&quot;&gt;extends&lt;/span&gt; ObjectMapper {
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;long&lt;/span&gt; serialVersionUID = 1L;
    
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;CleObjectMapper&lt;/span&gt;() {
        &lt;span class=&quot;kw&quot;&gt;super&lt;/span&gt;();
        &lt;span class=&quot;co&quot;&gt;// 去掉各种类似@JsonSerialize注解的解析&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;configure&lt;/span&gt;(MapperFeature.&lt;span class=&quot;fu&quot;&gt;USE_ANNOTATIONS&lt;/span&gt;, &lt;span class=&quot;kw&quot;&gt;false&lt;/span&gt;);
         &lt;span class=&quot;co&quot;&gt;// 只针对非空的值进行序列化(这个是为了减少json序列化之后所占用的空间)&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;setSerializationInclusion&lt;/span&gt;(Include.&lt;span class=&quot;fu&quot;&gt;NON_NULL&lt;/span&gt;);
    }
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;​ 并且修改xml中&lt;code&gt;jsonSerializer&lt;/code&gt;的定义如下：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode xml&quot;&gt;
&lt;code class=&quot;sourceCode xml&quot;&gt;&lt;span class=&quot;kw&quot;&gt;&amp;lt;bean&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; id=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;myObjectMapper&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; class=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;com.rampage.cache.customized.MyObjectMapper&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&amp;lt;/bean&amp;gt;&lt;/span&gt; 

&lt;span class=&quot;kw&quot;&gt;&amp;lt;bean&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; id=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;jsonSerializer&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; class=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializer&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;constructor-arg&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;mapper&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; ref=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;myObjectMapper&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&amp;lt;/constructor-arg&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/bean&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;​ 重启后试下了下，终于不报前面那个空指针错误了😄&lt;/p&gt;
&lt;hr/&gt;&lt;h2 id=&quot;坑2&quot;&gt;坑2：&lt;/h2&gt;
&lt;p&gt;​ 前面的问题解决后，序列化存入redis好像是没什么问题。然后，当我继续验证的时候发现又报了另种类型的错：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;java.&lt;span class=&quot;fu&quot;&gt;lang&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;ClassCastException&lt;/span&gt;: java.&lt;span class=&quot;fu&quot;&gt;util&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;LinkedHashMap&lt;/span&gt; cannot be cast to com.&lt;span class=&quot;fu&quot;&gt;rampage&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;model&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;BankInfo&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;​ 而且这种错都是一大片一大片的，基本上所有类型都报了这个无法通过HashMap强转得到😢......&lt;/p&gt;
&lt;p&gt;这......怎么从Redis反序列化出来的时候所有对象都变成了LinkedHashMap。这个坑耗费了我将近两天时间。一点点debug class文件还是没有任何进展。最后没辙，只有找以前的同事和我一起试下。最终我们两试了一下午，终于给试出来了。原因参照&lt;a href=&quot;https://blog.csdn.net/pengguojun117/article/details/17339867&quot; class=&quot;uri&quot;&gt;https://blog.csdn.net/pengguojun117/article/details/17339867&lt;/a&gt;。因为我定义的MyObjectMapper没有配置&lt;code&gt;DefaultTyping&lt;/code&gt;属性，jackson将使用简单的数据绑定具体的java类型，其中Object就会在反序列化的时候变成LinkedHashMap......再回过头来看下xml中的json序列化实现类&lt;code&gt;GenericJackson2JsonRedisSerializer&lt;/code&gt;源码：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;12&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;GenericJackson2JsonRedisSerializer&lt;/span&gt;(String classPropertyTypeName) {
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;ObjectMapper&lt;/span&gt;());

        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;mapper&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;registerModule&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;SimpleModule&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;addSerializer&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;NullValueSerializer&lt;/span&gt;(classPropertyTypeName)));

        &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (StringUtils.&lt;span class=&quot;fu&quot;&gt;hasText&lt;/span&gt;(classPropertyTypeName))
            &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;mapper&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;enableDefaultTypingAsProperty&lt;/span&gt;(ObjectMapper.&lt;span class=&quot;fu&quot;&gt;DefaultTyping&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;NON_FINAL&lt;/span&gt;, classPropertyTypeName);
        &lt;span class=&quot;kw&quot;&gt;else&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;mapper&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;enableDefaultTyping&lt;/span&gt;(ObjectMapper.&lt;span class=&quot;fu&quot;&gt;DefaultTyping&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;NON_FINAL&lt;/span&gt;, JsonTypeInfo.&lt;span class=&quot;fu&quot;&gt;As&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;PROPERTY&lt;/span&gt;);
    }&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;​ 特别需要注意&lt;code&gt;this.mapper.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL, JsonTypeInfo.As.PROPERTY);&lt;/code&gt;其中属性值的定义如下:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;22&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;co&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * Method for enabling automatic inclusion of type information, needed&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * for proper deserialization of polymorphic types (unless types&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * have been annotated with &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;{@link com.fasterxml.jackson.annotation.JsonTypeInfo}&lt;/span&gt;&lt;span class=&quot;co&quot;&gt;).&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; *&amp;lt;P&lt;/span&gt;&amp;gt;
&lt;span class=&quot;er&quot;&gt; * NOTE: use of &amp;lt;code&amp;gt;JsonTypeInfo.As#EXTERNAL_PROPERTY&amp;lt;/code&amp;gt; &amp;lt;b&amp;gt;NOT SUPPORTED&amp;lt;/b&amp;gt;;&lt;/span&gt;
&lt;span class=&quot;er&quot;&gt; * and attempts of do so will throw an {@link IllegalArgumentException} to make&lt;/span&gt;
&lt;span class=&quot;er&quot;&gt; * this limitation explicit.&lt;/span&gt;
&lt;span class=&quot;er&quot;&gt; * &lt;/span&gt;
&lt;span class=&quot;er&quot;&gt; * @param applicability Defines kinds of types for which additional type information&lt;/span&gt;
&lt;span class=&quot;er&quot;&gt; *    is added; see {@link DefaultTyping} for more information.&lt;/span&gt;
&lt;span class=&quot;er&quot;&gt; */&lt;/span&gt;
&lt;span class=&quot;er&quot;&gt;public ObjectMapper enableDefaultTyping(DefaultTyping applicability, JsonTypeInfo.As includeAs)&lt;/span&gt;
{
&lt;span class=&quot;er&quot;&gt;    /* 18-Sep-2014, tatu: Let's add explicit check to ensure no one tries to&lt;/span&gt;
&lt;span class=&quot;er&quot;&gt;     *   use &quot;As.EXTERNAL_PROPERTY&quot;, since that will not work (with 2.5+)&lt;/span&gt;
&lt;span class=&quot;er&quot;&gt;     */&lt;/span&gt;
&lt;span class=&quot;er&quot;&gt;    if (includeAs == JsonTypeInfo.As.EXTERNAL_PROPERTY) {&lt;/span&gt;
&lt;span class=&quot;er&quot;&gt;        throw new IllegalArgumentException(&quot;Can not use includeAs of &quot;+includeAs);&lt;/span&gt;
&lt;span class=&quot;er&quot;&gt;    }&lt;/span&gt;
&lt;span class=&quot;er&quot;&gt;    &lt;/span&gt;
&lt;span class=&quot;er&quot;&gt;    TypeResolverBuilder&amp;lt;?&amp;gt; typer = new DefaultTypeResolverBuilder(applicability);&lt;/span&gt;
&lt;span class=&quot;er&quot;&gt;    // we'll always use full class name, when using defaulting&lt;/span&gt;
&lt;span class=&quot;er&quot;&gt;    typer = typer.init(JsonTypeInfo.Id.CLASS, null);&lt;/span&gt;
&lt;span class=&quot;er&quot;&gt;    typer = typer.inclusion(includeAs);&lt;/span&gt;
&lt;span class=&quot;er&quot;&gt;    return setDefaultTyping(typer);&lt;/span&gt;
}

&lt;span class=&quot;co&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * Value that means that default typing will be used for&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * all non-final types, with exception of small number of&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * &quot;natural&quot; types (String, Boolean, Integer, Double), which&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * can be correctly inferred from JSON; as well as for&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * all arrays of non-final types.&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; *&amp;lt;p&lt;/span&gt;&amp;gt;
&lt;span class=&quot;er&quot;&gt; * Since 2.4, this does NOT apply to {@link TreeNode} and its subtypes.&lt;/span&gt;
&lt;span class=&quot;er&quot;&gt; */&lt;/span&gt;
&lt;span class=&quot;er&quot;&gt;NON_FINAL&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;​ 整个方法的意思就是在序列化的时候会将类型信息一起作为属性的一部分序列化，在反序列化的时候会根据对应的类型信息进行转换。最终我修改&lt;code&gt;MyOjectMapper&lt;/code&gt;如下：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;12&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; CleObjectMapper &lt;span class=&quot;kw&quot;&gt;extends&lt;/span&gt; ObjectMapper {
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;long&lt;/span&gt; serialVersionUID = 1L;
    
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;CleObjectMapper&lt;/span&gt;() {
        &lt;span class=&quot;kw&quot;&gt;super&lt;/span&gt;();
        &lt;span class=&quot;co&quot;&gt;// 去掉各种@JsonSerialize注解的解析&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;configure&lt;/span&gt;(MapperFeature.&lt;span class=&quot;fu&quot;&gt;USE_ANNOTATIONS&lt;/span&gt;, &lt;span class=&quot;kw&quot;&gt;false&lt;/span&gt;);
        &lt;span class=&quot;co&quot;&gt;// 只针对非空的值进行序列化&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;setSerializationInclusion&lt;/span&gt;(Include.&lt;span class=&quot;fu&quot;&gt;NON_NULL&lt;/span&gt;);
        &lt;span class=&quot;co&quot;&gt;// 将类型序列化到属性json字符串中&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;enableDefaultTyping&lt;/span&gt;(DefaultTyping.&lt;span class=&quot;fu&quot;&gt;NON_FINAL&lt;/span&gt;, As.&lt;span class=&quot;fu&quot;&gt;PROPERTY&lt;/span&gt;);
        
    }
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;​ 替换之后原来LinkedHashMap转各种对象的错误神奇地消失了~~&lt;/p&gt;
&lt;hr/&gt;&lt;h2 id=&quot;坑3&quot;&gt;坑3：&lt;/h2&gt;
&lt;p&gt;​ 解决完上面两个问题了之后，基本流程是不是可以完全跑通了呢？希望如此吧......&lt;/p&gt;
&lt;p&gt;于是我替换修改的class文件，重新启动开始验证。美好的愿望又被一个报错给打破。具体报错信息如下:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;org.&lt;span class=&quot;fu&quot;&gt;springframework&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;data&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;redis&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;serializer&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;SerializationException&lt;/span&gt;: Could not read JSON: Unrecognized field &lt;span class=&quot;st&quot;&gt;&quot;bankName&quot;&lt;/span&gt; 
at [Source: [B&lt;span class=&quot;fu&quot;&gt;@38176916&lt;/span&gt;; line: &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;, column: &lt;span class=&quot;dv&quot;&gt;444&lt;/span&gt;] (through reference chain: com.&lt;span class=&quot;fu&quot;&gt;rampage&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;model&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;BankInfo&lt;/span&gt;[&lt;span class=&quot;st&quot;&gt;&quot;bankName&quot;&lt;/span&gt;]); &lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;​ 有了前面两个填坑经验之后，我知道肯定先要看下对应的Pojo源码。由于这个报错是在序列化的时候报的，所以应该是get方法存在问题:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; BankInfo {
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; String bankNameCode;
    
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;fu&quot;&gt;getBankName&lt;/span&gt;() {
       &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;bankNameCode&lt;/span&gt;;
    }
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;​ 可以看到，&lt;code&gt;getBankName&lt;/code&gt;并不是返回&lt;code&gt;bankName&lt;/code&gt;属性，实际上&lt;code&gt;BankInfo&lt;/code&gt;对象根本没有&lt;code&gt;bankName&lt;/code&gt;属性 。聪明的人不会在同一个地方绊倒三次😄. 我知道这个肯定又有一个属性设置忽略这种特殊情况报错。最终结合源码和链接&lt;a href=&quot;https://blog.csdn.net/kobejayandy/article/details/45869861&quot; class=&quot;uri&quot;&gt;https://blog.csdn.net/kobejayandy/article/details/45869861&lt;/a&gt;找到属性&lt;code&gt;DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES&lt;/code&gt; :&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;13&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;co&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * Feature that determines whether encountering of unknown&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * properties (ones that do not map to a property, and there is&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * no &quot;any setter&quot; or handler that can handle it)&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * should result in a failure (by throwing a&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;{@link JsonMappingException}&lt;/span&gt;&lt;span class=&quot;co&quot;&gt;) or not.&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * This setting only takes effect after all other handling&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * methods for unknown properties have been tried, and&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * property remains unhandled.&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; *&amp;lt;p&lt;/span&gt;&amp;gt;
&lt;span class=&quot;er&quot;&gt; * Feature is enabled by default (meaning that a&lt;/span&gt;
&lt;span class=&quot;er&quot;&gt; * {@link JsonMappingException} will be thrown if an unknown property&lt;/span&gt;
&lt;span class=&quot;er&quot;&gt; * is encountered).&lt;/span&gt;
&lt;span class=&quot;er&quot;&gt; */&lt;/span&gt;
&lt;span class=&quot;fu&quot;&gt;FAIL_ON_UNKNOWN_PROPERTIES&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;true&lt;/span&gt;),&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;​ 将这个属性设置成false应该就可以解决报错了。最终&lt;code&gt;MyObjectMapper&lt;/code&gt;被修改成了这样:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;14&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; CleObjectMapper &lt;span class=&quot;kw&quot;&gt;extends&lt;/span&gt; ObjectMapper {
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;long&lt;/span&gt; serialVersionUID = 1L;
    
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;CleObjectMapper&lt;/span&gt;() {
        &lt;span class=&quot;kw&quot;&gt;super&lt;/span&gt;();
        &lt;span class=&quot;co&quot;&gt;// 去掉各种@JsonSerialize注解的解析&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;configure&lt;/span&gt;(MapperFeature.&lt;span class=&quot;fu&quot;&gt;USE_ANNOTATIONS&lt;/span&gt;, &lt;span class=&quot;kw&quot;&gt;false&lt;/span&gt;);
        &lt;span class=&quot;co&quot;&gt;// 只针对非空的值进行序列化&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;setSerializationInclusion&lt;/span&gt;(Include.&lt;span class=&quot;fu&quot;&gt;NON_NULL&lt;/span&gt;);
        &lt;span class=&quot;co&quot;&gt;// 将类型序列化到属性json字符串中&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;enableDefaultTyping&lt;/span&gt;(DefaultTyping.&lt;span class=&quot;fu&quot;&gt;NON_FINAL&lt;/span&gt;, As.&lt;span class=&quot;fu&quot;&gt;PROPERTY&lt;/span&gt;);
        &lt;span class=&quot;co&quot;&gt;// 对于找不到匹配属性的时候忽略报错&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;configure&lt;/span&gt;(DeserializationFeature.&lt;span class=&quot;fu&quot;&gt;FAIL_ON_UNKNOWN_PROPERTIES&lt;/span&gt;, &lt;span class=&quot;kw&quot;&gt;false&lt;/span&gt;);
        &lt;span class=&quot;co&quot;&gt;// 不包含任何属性的bean也不报错&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;configure&lt;/span&gt;(SerializationFeature.&lt;span class=&quot;fu&quot;&gt;FAIL_ON_EMPTY_BEANS&lt;/span&gt;, &lt;span class=&quot;kw&quot;&gt;false&lt;/span&gt;);
    }
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;​ 这下基本流程终于终于可以跑通了~ Happy ~~~~~~&lt;/p&gt;
&lt;hr/&gt;&lt;h2 id=&quot;坑4&quot;&gt;坑4&lt;/h2&gt;
&lt;p&gt;​ 本来以为基本流程跑通了之后就大功告成了。事实证明，永远都要去验证程序的异常情况。最终我再验证异常情况的时候，发现竟然又报了个空指针异常。严格地讲这个异常不是因为Redis缓存导致的问题。而是缓存使用方式不对导致的：就是因为以前项目的缓存使用的是Ehcache，所以直接可以往缓存中添加对象，甚至是Spring管理的对象。Redis缓存填了各种坑之后也可以愉快地往缓存中添加对象，但是必须注意是无法缓存Spring管理的对象的（Redis数据库才不会关心对象被不被Spring管理）。如果缓存Spring管理的对象，那么再从缓存取出来后，原来Spring注入的属性都不存在...... 这个空指针就是因为这个问题导致的。 还好机智的我花了不到一分钟就想到了原因迅速解决了。终于可以愉快地使用Redis + Cacheable注解了。&lt;/p&gt;
&lt;hr/&gt;&lt;h2 id=&quot;总结&quot;&gt;总结&lt;/h2&gt;
&lt;p&gt;​ 这次填坑真的是耗费了我很长时间，完全打乱了我各种计划。甚至导致我一段时间不想干任何事，只是觉得好烦，又浪费了这么多时间.......&lt;/p&gt;
&lt;p&gt;​ 当然还是有收获的，具体来说有以下几点:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Jackson与ObjectMapper&lt;/strong&gt;: 基本上Jackson导致的序列化和反序列化问题在无法改动源代码，都是可以通过调整ObjectMapper的相关属性来解决的，遇到问题的时候需要仔细分析具体应该如何改动默认属性&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Redis缓存也不是完全没有劣势的&lt;/strong&gt;: 刚开始的时候觉得Redis作缓存一定比Ehcache高大上，只有优势没有劣势。事实证明并不是：Redis是Key、Value类型的，没法直接存储对象，必须序列化之后存入。Redis无法缓存Spring管理的对象。Redis缓存获取是需要反序列化以及数据IO操作的，效率肯定不及Ehcache，所以才有利用Redis和Ehcache实现多级缓存的实现。总之一句话，新的技术不一定表示是好的技术，而且新的技术可能遇到各种不适用当前历史遗留代码的各种问题。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;架构设计的重要性&lt;/strong&gt;: 各种挖坑填坑之后，我突然觉得：如果项目一开始就引入Redis作缓存，那么很多不规范的写法在开发的时候就会暴露出问题，自然可以规范大家使用缓存的方式。而这种后期引入新的框架，可能由于各种老代码百花齐放的各种写法，出现各种蛋疼问题。后续不仅要解决问题还要兼容丑陋的老代码。这个时间和人力成本是一开始设计好的很多很多倍......还让人特别不爽！&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
</description>
<pubDate>Wed, 25 Apr 2018 03:47:00 +0000</pubDate>
<dc:creator>Secondworld</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/Kidezyq/p/8942111.html</dc:identifier>
</item>
<item>
<title>SCNN车道线检测--(SCNN)Spatial As Deep: Spatial CNN for Traffic Scene Understanding（论文解读） - 郭耀华</title>
<link>http://www.cnblogs.com/guoyaohua/p/8940871.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/guoyaohua/p/8940871.html</guid>
<description>&lt;p&gt;收录：AAAI2018 (AAAI Conference on Artificial Intelligence)&lt;/p&gt;
&lt;p&gt;原文地址：&lt;a href=&quot;https://arxiv.org/pdf/1712.06080.pdf&quot; target=&quot;_blank&quot;&gt;SCNN&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;论文提出了一个新颖网络Spatial CNN，在图片的行和列上做信息传递。可以有效的识别强先验结构的目标。论文提出了一个大型的车道检测数据集，用于进一步推动自动驾驶发展。&lt;/p&gt;
&lt;p&gt;代码:&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;　　现今的CNN模型通常是由卷积块堆叠构建，虽然CNN有强大的特征提取能力，但现存CNN架构没有足够充分探索图像行和列上的空间关系能力。这些关系对于学习强先验形状的对象很重要，尤其是外观(图像像素)连贯性很弱。例如交通线，车道经常会被遮挡，或者压根就没在路上画车道线。如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1192699/201804/1192699-20180425094639634-1554163157.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　本文提出了Spatial CNN(CNN),它将传统的卷积层接层(layer-by-layer)的连接形式的转为feature map中片连片卷积(slice-by-slice)的形式，使得图中像素行和列之间能够传递信息。这特别适用于检测长距离连续形状的目标或大型目标，有着极强的空间关系但是外观线索较差的目标，例如交通线，电线杆和墙。论文在车道检测挑战和CityScapes上评估了SCNN的表现，同时SCNN在TuSimple Benchmark lane Detection challenge获得了第一名，准确率为96.53%。&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;　　自动驾驶中最具挑战的任务之一是交通场景理解，包括计算机视觉任务下的车道检测和语义分割。车道检测帮助指导车辆，语义分割提供更多关于周围环境目标的细节位置。但在实际情况下，因为有许多恶劣条件，这些任务可能非常具有挑战性。对于交通场景理解的另一个挑战是，在许多情况下需要在有强结构先验知识下处理外形线索不多的目标，例如交通线，杆状物等，这些具有长距离连续的形状，常常有很大部分被遮挡。&lt;/p&gt;
&lt;p&gt;　　得益于强大的学习表示能力，CNN将视觉理解推向了一个新的高度。但是这依然不能很好地处理外形线索不多的有强结构先验的目标，而人类可以推断它们的位置并填充遮挡的部分。&lt;/p&gt;
&lt;p&gt;　　为了解决这个问题，论文提出了SCNN，将深度卷积神经网络推广到丰富空间层次。&lt;/p&gt;
&lt;p&gt;　　传统的CNN，任意层接收上层的数据作输入，再作卷积并加激活传给下一层，这个过程是顺序执行的。与之类似的是，&lt;span&gt;SCNN将feature map的行或列也看成layer，也使用卷积加非线性激活，从而实现空间上的深度神经网络。&lt;/span&gt;这使得空间信息能够在同层的神经元上传播，增强空间信息进而对于识别结构化对象特别有效。&lt;/p&gt;
&lt;p&gt;相关工作：&lt;/p&gt;
&lt;p&gt;　　对于车道检测任务，大多数现有的算法都是依赖于低级手工特征，这让模型难以在恶劣条件下工作。2015年有工作尝试使用深度学习方案用于车道检测，但苦于没有大的广泛的数据集(说这个的原因是论文建立了一个大的数据集~)。对于语义分割，基于CNN的方案的已经成为主流并取得了巨大的成功。&lt;/p&gt;
&lt;p&gt;　　对于在深度神经网络中使用空间信息：有工作使用RNN按每列和行传递信息，但每个像素只能接收同一行或列的信息。也有工作使用LSTM变体探索语义分割的上下文信息，但计算消耗较大。也有工作尝试结合CNN和图模型(例如MRF或CRF)，通过大卷积核传递信息。&lt;/p&gt;
&lt;p&gt;与上述方案相比，SCNN有如下几个优势：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;消息传递比传统的MRF/CRF更有计算效率&lt;/li&gt;
&lt;li&gt;消息传递使用的是残差，这更易训练&lt;/li&gt;
&lt;li&gt;SCNN很灵活，适用于多种深度神经网络&lt;/li&gt;
&lt;/ul&gt;&lt;hr/&gt;
&lt;h2 id=&quot;lane-detection-dataset&quot;&gt;Lane Detection Dataset&lt;/h2&gt;
&lt;p&gt;　　本文提出了一个关于交通车道检测的大规模数据集。以前的车道检测数据集(KITTI,CamVid)要不就是太简单，要不就是数据太小。最近的(Caltech,TuSimple)数据集是在交通受限状态下建立的，这样的数据车流量少且路标较为清晰。这些数据集没有包括一些车道线模糊，条件恶劣的情况，而这些情况人类可以推断出来，且这具有很高的实用价值。&lt;/p&gt;
&lt;p&gt;　　论文提出的数据集是由六辆车在北京不同时间录制的，超过55个小时共收集了133,235 张图片，这超过TuSimple 数据集20倍了。论文&lt;span&gt;分成88880张作为训练集, 9675作为验证集，34680做测试集。&lt;/span&gt;图像的大小为&lt;span id=&quot;MathJax-Element-1-Frame&quot; class=&quot;MathJax&quot; data-mathml=&quot;&amp;lt;math xmlns=&amp;quot;http://www.w3.org/1998/Math/MathML&amp;quot;&amp;gt;&amp;lt;mn&amp;gt;1640&amp;lt;/mn&amp;gt;&amp;lt;mo&amp;gt;&amp;amp;#xD7;&amp;lt;/mo&amp;gt;&amp;lt;mn&amp;gt;590&amp;lt;/mn&amp;gt;&amp;lt;/math&amp;gt;&quot;&gt;&lt;span id=&quot;MathJax-Span-1&quot; class=&quot;math&quot;&gt;&lt;span id=&quot;MathJax-Span-2&quot; class=&quot;mrow&quot;&gt;&lt;span id=&quot;MathJax-Span-3&quot; class=&quot;mn&quot;&gt;1640&lt;span id=&quot;MathJax-Span-4&quot; class=&quot;mo&quot;&gt;×&lt;span id=&quot;MathJax-Span-5&quot; class=&quot;mn&quot;&gt;590&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;MJX_Assistive_MathML&quot;&gt;。下图是示例和简介：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1192699/201804/1192699-20180425095404313-928849362.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;　　数据集内包括城市、农村和高速公路等场景，北京作为世界上最大和最拥挤的城市之一，对应的车道检测数据提供了很多具有挑战性的交通场景。论文将测试集分为正常和8个具有挑战性的类别，这对应上图 (a)的9个示例情况。图(b)显示的是挑战性的场景站数据集的比例(共72.3%)。&lt;/p&gt;
&lt;p&gt;　　对于每一张图片，使用三条线注释车道，如前面所述，许多情况下车道是被遮挡的或看不见的。而这在实际情况下是很重要的，车道检测算法需要能够在这种情况下工作。对此，标注工作根据上下文也做了标注，如图(2)(4)所示。对于图(1)的情况我们不对障碍的另一边做标注，将精力集中于最受关注的部分。&lt;/p&gt;
&lt;h2 id=&quot;spatial-cnn&quot;&gt;Spatial CNN&lt;/h2&gt;
&lt;p&gt;　　传统的关于空间关系的建模方法是基于概率图模型的，例如马尔科夫随机场(MRF)或条件随机场(CRF)。最近有工作将概率图与CNN相结合，如图 3(a)所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1192699/201804/1192699-20180425095649996-1701792741.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;CRF可化为平均场，算法可以用神经网络来实现，具体来说，过程分为：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;标准化：CNN的输出作为一元势函数，并通过Softmax操作标准化&lt;/li&gt;
&lt;li&gt;信息传递：可通过大内核的逐通道卷积实现(对于DenseCRF,内核大小将覆盖整张图片，内核权重取决于图片)&lt;/li&gt;
&lt;li&gt;兼容性转换：使用&lt;span id=&quot;MathJax-Element-2-Frame&quot; class=&quot;MathJax&quot; data-mathml=&quot;&amp;lt;math xmlns=&amp;quot;http://www.w3.org/1998/Math/MathML&amp;quot;&amp;gt;&amp;lt;mn&amp;gt;1&amp;lt;/mn&amp;gt;&amp;lt;mo&amp;gt;&amp;amp;#xD7;&amp;lt;/mo&amp;gt;&amp;lt;mn&amp;gt;1&amp;lt;/mn&amp;gt;&amp;lt;/math&amp;gt;&quot;&gt;&lt;span id=&quot;MathJax-Span-6&quot; class=&quot;math&quot;&gt;&lt;span id=&quot;MathJax-Span-7&quot; class=&quot;mrow&quot;&gt;&lt;span id=&quot;MathJax-Span-8&quot; class=&quot;mn&quot;&gt;1&lt;span id=&quot;MathJax-Span-9&quot; class=&quot;mo&quot;&gt;×&lt;span id=&quot;MathJax-Span-10&quot; class=&quot;mn&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;MJX_Assistive_MathML&quot;&gt;的卷积实现&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;添加一元势：整个过程迭代N次得到最终输出&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;　　可以看到传统方法在传递信息时，每个像素点接受来自全图其他像素的信息，这在计算上是非常昂贵的，难以应用于实时系统。且对于MRF的大卷积核权重很难学。这些方法是应用在CNN的输出上的，论文认为CNN的隐藏层，包含了丰富的空间关系，可更好的用于处理空间关系。&lt;/p&gt;
&lt;p&gt;　　论文提出了&lt;span&gt;Spatial CNN，这里的Spatial不是指Spatial Convolution，而是CNN通过特征的设计架构传递空间信息。&lt;/span&gt;SCNN更有效的学习空间关系，能平滑的找出连续的有强先验的结构目标。SCNN的整体架构如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1192699/201804/1192699-20180425095715607-1621853644.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;(图中SCNN的下标有&lt;code&gt;D,U,R,L&lt;/code&gt;，这在结构上是类似的，方向上分别表示为向下，向上，向右，向左)&lt;/p&gt;
&lt;p&gt;先以&lt;code&gt;SCNN_D&lt;/code&gt;分析：&lt;/p&gt;
&lt;p&gt;　　&lt;span&gt;考虑到SCNN应用在三维张量&lt;span id=&quot;MathJax-Element-3-Frame&quot; class=&quot;MathJax&quot; data-mathml=&quot;&amp;lt;math xmlns=&amp;quot;http://www.w3.org/1998/Math/MathML&amp;quot;&amp;gt;&amp;lt;mi&amp;gt;C&amp;lt;/mi&amp;gt;&amp;lt;mo&amp;gt;&amp;amp;#xD7;&amp;lt;/mo&amp;gt;&amp;lt;mi&amp;gt;H&amp;lt;/mi&amp;gt;&amp;lt;mo&amp;gt;&amp;amp;#xD7;&amp;lt;/mo&amp;gt;&amp;lt;mi&amp;gt;W&amp;lt;/mi&amp;gt;&amp;lt;/math&amp;gt;&quot;&gt;&lt;span id=&quot;MathJax-Span-11&quot; class=&quot;math&quot;&gt;&lt;span id=&quot;MathJax-Span-12&quot; class=&quot;mrow&quot;&gt;&lt;span id=&quot;MathJax-Span-13&quot; class=&quot;mi&quot;&gt;C&lt;span id=&quot;MathJax-Span-14&quot; class=&quot;mo&quot;&gt;×&lt;span id=&quot;MathJax-Span-15&quot; class=&quot;mi&quot;&gt;H&lt;span id=&quot;MathJax-Span-16&quot; class=&quot;mo&quot;&gt;×&lt;span id=&quot;MathJax-Span-17&quot; class=&quot;mi&quot;&gt;W&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;MJX_Assistive_MathML&quot;&gt;上，&lt;span id=&quot;MathJax-Element-4-Frame&quot; class=&quot;MathJax&quot; data-mathml=&quot;&amp;lt;math xmlns=&amp;quot;http://www.w3.org/1998/Math/MathML&amp;quot;&amp;gt;&amp;lt;mi&amp;gt;C&amp;lt;/mi&amp;gt;&amp;lt;mo&amp;gt;,&amp;lt;/mo&amp;gt;&amp;lt;mi&amp;gt;H&amp;lt;/mi&amp;gt;&amp;lt;mo&amp;gt;,&amp;lt;/mo&amp;gt;&amp;lt;mi&amp;gt;W&amp;lt;/mi&amp;gt;&amp;lt;/math&amp;gt;&quot;&gt;&lt;span id=&quot;MathJax-Span-18&quot; class=&quot;math&quot;&gt;&lt;span id=&quot;MathJax-Span-19&quot; class=&quot;mrow&quot;&gt;&lt;span id=&quot;MathJax-Span-20&quot; class=&quot;mi&quot;&gt;C&lt;span id=&quot;MathJax-Span-21&quot; class=&quot;mo&quot;&gt;,&lt;span id=&quot;MathJax-Span-22&quot; class=&quot;mi&quot;&gt;H&lt;span id=&quot;MathJax-Span-23&quot; class=&quot;mo&quot;&gt;,&lt;span id=&quot;MathJax-Span-24&quot; class=&quot;mi&quot;&gt;W&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;MJX_Assistive_MathML&quot;&gt;分别代表通道数，长和宽。为了实现空间信息传递，将张量切分成&lt;span id=&quot;MathJax-Element-5-Frame&quot; class=&quot;MathJax&quot; data-mathml=&quot;&amp;lt;math xmlns=&amp;quot;http://www.w3.org/1998/Math/MathML&amp;quot;&amp;gt;&amp;lt;mi&amp;gt;H&amp;lt;/mi&amp;gt;&amp;lt;/math&amp;gt;&quot;&gt;&lt;span id=&quot;MathJax-Span-25&quot; class=&quot;math&quot;&gt;&lt;span id=&quot;MathJax-Span-26&quot; class=&quot;mrow&quot;&gt;&lt;span id=&quot;MathJax-Span-27&quot; class=&quot;mi&quot;&gt;H&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;MJX_Assistive_MathML&quot;&gt;片(slice)，先将第一片送到尺寸为&lt;span id=&quot;MathJax-Element-6-Frame&quot; class=&quot;MathJax&quot; data-mathml=&quot;&amp;lt;math xmlns=&amp;quot;http://www.w3.org/1998/Math/MathML&amp;quot;&amp;gt;&amp;lt;mi&amp;gt;C&amp;lt;/mi&amp;gt;&amp;lt;mo&amp;gt;&amp;amp;#xD7;&amp;lt;/mo&amp;gt;&amp;lt;mi&amp;gt;w&amp;lt;/mi&amp;gt;&amp;lt;/math&amp;gt;&quot;&gt;&lt;span id=&quot;MathJax-Span-28&quot; class=&quot;math&quot;&gt;&lt;span id=&quot;MathJax-Span-29&quot; class=&quot;mrow&quot;&gt;&lt;span id=&quot;MathJax-Span-30&quot; class=&quot;mi&quot;&gt;C&lt;span id=&quot;MathJax-Span-31&quot; class=&quot;mo&quot;&gt;×&lt;span id=&quot;MathJax-Span-32&quot; class=&quot;mi&quot;&gt;w&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;MJX_Assistive_MathML&quot;&gt;的卷积层(&lt;span id=&quot;MathJax-Element-7-Frame&quot; class=&quot;MathJax&quot; data-mathml=&quot;&amp;lt;math xmlns=&amp;quot;http://www.w3.org/1998/Math/MathML&amp;quot;&amp;gt;&amp;lt;mi&amp;gt;w&amp;lt;/mi&amp;gt;&amp;lt;/math&amp;gt;&quot;&gt;&lt;span id=&quot;MathJax-Span-33&quot; class=&quot;math&quot;&gt;&lt;span id=&quot;MathJax-Span-34&quot; class=&quot;mrow&quot;&gt;&lt;span id=&quot;MathJax-Span-35&quot; class=&quot;mi&quot;&gt;w&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;MJX_Assistive_MathML&quot;&gt;为卷积核的宽度)。传统的CNN是将这层的输出传递给下一层，而这里是将这片输出相加到下一片作为新的一片。&lt;strong&gt;&lt;span&gt;接着下一片继续应用卷积(这里卷积核共享)&lt;/span&gt;&lt;/strong&gt;，直到处理完所有片。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span class=&quot;MathJax&quot; data-mathml=&quot;&amp;lt;math xmlns=&amp;quot;http://www.w3.org/1998/Math/MathML&amp;quot;&amp;gt;&amp;lt;mi&amp;gt;C&amp;lt;/mi&amp;gt;&amp;lt;mo&amp;gt;&amp;amp;#xD7;&amp;lt;/mo&amp;gt;&amp;lt;mi&amp;gt;H&amp;lt;/mi&amp;gt;&amp;lt;mo&amp;gt;&amp;amp;#xD7;&amp;lt;/mo&amp;gt;&amp;lt;mi&amp;gt;W&amp;lt;/mi&amp;gt;&amp;lt;/math&amp;gt;&quot;&gt;&lt;span class=&quot;MJX_Assistive_MathML&quot;&gt;&lt;span class=&quot;MathJax&quot; data-mathml=&quot;&amp;lt;math xmlns=&amp;quot;http://www.w3.org/1998/Math/MathML&amp;quot;&amp;gt;&amp;lt;mi&amp;gt;C&amp;lt;/mi&amp;gt;&amp;lt;mo&amp;gt;,&amp;lt;/mo&amp;gt;&amp;lt;mi&amp;gt;H&amp;lt;/mi&amp;gt;&amp;lt;mo&amp;gt;,&amp;lt;/mo&amp;gt;&amp;lt;mi&amp;gt;W&amp;lt;/mi&amp;gt;&amp;lt;/math&amp;gt;&quot;&gt;&lt;span class=&quot;MJX_Assistive_MathML&quot;&gt;&lt;span class=&quot;MathJax&quot; data-mathml=&quot;&amp;lt;math xmlns=&amp;quot;http://www.w3.org/1998/Math/MathML&amp;quot;&amp;gt;&amp;lt;mi&amp;gt;H&amp;lt;/mi&amp;gt;&amp;lt;/math&amp;gt;&quot;&gt;&lt;span class=&quot;MJX_Assistive_MathML&quot;&gt;&lt;span class=&quot;MathJax&quot; data-mathml=&quot;&amp;lt;math xmlns=&amp;quot;http://www.w3.org/1998/Math/MathML&amp;quot;&amp;gt;&amp;lt;mi&amp;gt;C&amp;lt;/mi&amp;gt;&amp;lt;mo&amp;gt;&amp;amp;#xD7;&amp;lt;/mo&amp;gt;&amp;lt;mi&amp;gt;w&amp;lt;/mi&amp;gt;&amp;lt;/math&amp;gt;&quot;&gt;&lt;span class=&quot;MJX_Assistive_MathML&quot;&gt;&lt;span class=&quot;MathJax&quot; data-mathml=&quot;&amp;lt;math xmlns=&amp;quot;http://www.w3.org/1998/Math/MathML&amp;quot;&amp;gt;&amp;lt;mi&amp;gt;w&amp;lt;/mi&amp;gt;&amp;lt;/math&amp;gt;&quot;&gt;&lt;span class=&quot;MJX_Assistive_MathML&quot;&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1192699/201804/1192699-20180425100336748-1081622624.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　具体来讲，假设我们有一个三维的张量&lt;span id=&quot;MathJax-Element-8-Frame&quot; class=&quot;MathJax&quot; data-mathml=&quot;&amp;lt;math xmlns=&amp;quot;http://www.w3.org/1998/Math/MathML&amp;quot;&amp;gt;&amp;lt;mi&amp;gt;K&amp;lt;/mi&amp;gt;&amp;lt;/math&amp;gt;&quot;&gt;&lt;span id=&quot;MathJax-Span-36&quot; class=&quot;math&quot;&gt;&lt;span id=&quot;MathJax-Span-37&quot; class=&quot;mrow&quot;&gt;&lt;span id=&quot;MathJax-Span-38&quot; class=&quot;mi&quot;&gt;K&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;MJX_Assistive_MathML&quot;&gt;，其中&lt;span id=&quot;MathJax-Element-9-Frame&quot; class=&quot;MathJax&quot; data-mathml=&quot;&amp;lt;math xmlns=&amp;quot;http://www.w3.org/1998/Math/MathML&amp;quot;&amp;gt;&amp;lt;msub&amp;gt;&amp;lt;mi&amp;gt;K&amp;lt;/mi&amp;gt;&amp;lt;mrow class=&amp;quot;MJX-TeXAtom-ORD&amp;quot;&amp;gt;&amp;lt;mi&amp;gt;i&amp;lt;/mi&amp;gt;&amp;lt;mo&amp;gt;,&amp;lt;/mo&amp;gt;&amp;lt;mi&amp;gt;j&amp;lt;/mi&amp;gt;&amp;lt;mo&amp;gt;,&amp;lt;/mo&amp;gt;&amp;lt;mi&amp;gt;k&amp;lt;/mi&amp;gt;&amp;lt;/mrow&amp;gt;&amp;lt;/msub&amp;gt;&amp;lt;/math&amp;gt;&quot;&gt;&lt;span id=&quot;MathJax-Span-39&quot; class=&quot;math&quot;&gt;&lt;span id=&quot;MathJax-Span-40&quot; class=&quot;mrow&quot;&gt;&lt;span id=&quot;MathJax-Span-41&quot; class=&quot;msubsup&quot;&gt;&lt;span id=&quot;MathJax-Span-42&quot; class=&quot;mi&quot;&gt;K&lt;sub&gt;&lt;span id=&quot;MathJax-Span-43&quot; class=&quot;texatom&quot;&gt;&lt;span id=&quot;MathJax-Span-44&quot; class=&quot;mrow&quot;&gt;&lt;span id=&quot;MathJax-Span-45&quot; class=&quot;mi&quot;&gt;i&lt;span id=&quot;MathJax-Span-46&quot; class=&quot;mo&quot;&gt;,&lt;span id=&quot;MathJax-Span-47&quot; class=&quot;mi&quot;&gt;j&lt;span id=&quot;MathJax-Span-48&quot; class=&quot;mo&quot;&gt;,&lt;span id=&quot;MathJax-Span-49&quot; class=&quot;mi&quot;&gt;k&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/sub&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;MJX_Assistive_MathML&quot;&gt;记为最后一片中通道&lt;span id=&quot;MathJax-Element-10-Frame&quot; class=&quot;MathJax&quot; data-mathml=&quot;&amp;lt;math xmlns=&amp;quot;http://www.w3.org/1998/Math/MathML&amp;quot;&amp;gt;&amp;lt;mi&amp;gt;i&amp;lt;/mi&amp;gt;&amp;lt;/math&amp;gt;&quot;&gt;&lt;span id=&quot;MathJax-Span-50&quot; class=&quot;math&quot;&gt;&lt;span id=&quot;MathJax-Span-51&quot; class=&quot;mrow&quot;&gt;&lt;span id=&quot;MathJax-Span-52&quot; class=&quot;mi&quot;&gt;i&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;MJX_Assistive_MathML&quot;&gt;的元素和当前片中通道&lt;span id=&quot;MathJax-Element-11-Frame&quot; class=&quot;MathJax&quot; data-mathml=&quot;&amp;lt;math xmlns=&amp;quot;http://www.w3.org/1998/Math/MathML&amp;quot;&amp;gt;&amp;lt;mi&amp;gt;j&amp;lt;/mi&amp;gt;&amp;lt;/math&amp;gt;&quot;&gt;&lt;span id=&quot;MathJax-Span-53&quot; class=&quot;math&quot;&gt;&lt;span id=&quot;MathJax-Span-54&quot; class=&quot;mrow&quot;&gt;&lt;span id=&quot;MathJax-Span-55&quot; class=&quot;mi&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;MJX_Assistive_MathML&quot;&gt;j的元素之间的权重，这两个元素之间偏移为&lt;span id=&quot;MathJax-Element-12-Frame&quot; class=&quot;MathJax&quot; data-mathml=&quot;&amp;lt;math xmlns=&amp;quot;http://www.w3.org/1998/Math/MathML&amp;quot;&amp;gt;&amp;lt;mi&amp;gt;k&amp;lt;/mi&amp;gt;&amp;lt;/math&amp;gt;&quot;&gt;&lt;span id=&quot;MathJax-Span-56&quot; class=&quot;math&quot;&gt;&lt;span id=&quot;MathJax-Span-57&quot; class=&quot;mrow&quot;&gt;&lt;span id=&quot;MathJax-Span-58&quot; class=&quot;mi&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;MJX_Assistive_MathML&quot;&gt;k列。同样的将&lt;span id=&quot;MathJax-Element-13-Frame&quot; class=&quot;MathJax&quot; data-mathml=&quot;&amp;lt;math xmlns=&amp;quot;http://www.w3.org/1998/Math/MathML&amp;quot;&amp;gt;&amp;lt;msub&amp;gt;&amp;lt;mi&amp;gt;X&amp;lt;/mi&amp;gt;&amp;lt;mrow class=&amp;quot;MJX-TeXAtom-ORD&amp;quot;&amp;gt;&amp;lt;mi&amp;gt;i&amp;lt;/mi&amp;gt;&amp;lt;mo&amp;gt;,&amp;lt;/mo&amp;gt;&amp;lt;mi&amp;gt;j&amp;lt;/mi&amp;gt;&amp;lt;mo&amp;gt;,&amp;lt;/mo&amp;gt;&amp;lt;mi&amp;gt;k&amp;lt;/mi&amp;gt;&amp;lt;/mrow&amp;gt;&amp;lt;/msub&amp;gt;&amp;lt;/math&amp;gt;&quot;&gt;&lt;span id=&quot;MathJax-Span-59&quot; class=&quot;math&quot;&gt;&lt;span id=&quot;MathJax-Span-60&quot; class=&quot;mrow&quot;&gt;&lt;span id=&quot;MathJax-Span-61&quot; class=&quot;msubsup&quot;&gt;&lt;span id=&quot;MathJax-Span-62&quot; class=&quot;mi&quot;&gt;X&lt;sub&gt;&lt;span id=&quot;MathJax-Span-63&quot; class=&quot;texatom&quot;&gt;&lt;span id=&quot;MathJax-Span-64&quot; class=&quot;mrow&quot;&gt;&lt;span id=&quot;MathJax-Span-65&quot; class=&quot;mi&quot;&gt;i&lt;span id=&quot;MathJax-Span-66&quot; class=&quot;mo&quot;&gt;,&lt;span id=&quot;MathJax-Span-67&quot; class=&quot;mi&quot;&gt;j&lt;span id=&quot;MathJax-Span-68&quot; class=&quot;mo&quot;&gt;,&lt;span id=&quot;MathJax-Span-69&quot; class=&quot;mi&quot;&gt;k&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/sub&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;MJX_Assistive_MathML&quot;&gt;记录为张量&lt;span id=&quot;MathJax-Element-14-Frame&quot; class=&quot;MathJax&quot; data-mathml=&quot;&amp;lt;math xmlns=&amp;quot;http://www.w3.org/1998/Math/MathML&amp;quot;&amp;gt;&amp;lt;mi&amp;gt;X&amp;lt;/mi&amp;gt;&amp;lt;/math&amp;gt;&quot;&gt;&lt;span id=&quot;MathJax-Span-70&quot; class=&quot;math&quot;&gt;&lt;span id=&quot;MathJax-Span-71&quot; class=&quot;mrow&quot;&gt;&lt;span id=&quot;MathJax-Span-72&quot; class=&quot;mi&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;MJX_Assistive_MathML&quot;&gt;X的元素，其中&lt;span id=&quot;MathJax-Element-15-Frame&quot; class=&quot;MathJax&quot; data-mathml=&quot;&amp;lt;math xmlns=&amp;quot;http://www.w3.org/1998/Math/MathML&amp;quot;&amp;gt;&amp;lt;mi&amp;gt;i&amp;lt;/mi&amp;gt;&amp;lt;mo&amp;gt;,&amp;lt;/mo&amp;gt;&amp;lt;mi&amp;gt;j&amp;lt;/mi&amp;gt;&amp;lt;mo&amp;gt;,&amp;lt;/mo&amp;gt;&amp;lt;mi&amp;gt;k&amp;lt;/mi&amp;gt;&amp;lt;/math&amp;gt;&quot;&gt;&lt;span id=&quot;MathJax-Span-73&quot; class=&quot;math&quot;&gt;&lt;span id=&quot;MathJax-Span-74&quot; class=&quot;mrow&quot;&gt;&lt;span id=&quot;MathJax-Span-75&quot; class=&quot;mi&quot;&gt;i&lt;span id=&quot;MathJax-Span-76&quot; class=&quot;mo&quot;&gt;,&lt;span id=&quot;MathJax-Span-77&quot; class=&quot;mi&quot;&gt;j&lt;span id=&quot;MathJax-Span-78&quot; class=&quot;mo&quot;&gt;,&lt;span id=&quot;MathJax-Span-79&quot; class=&quot;mi&quot;&gt;k&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;MJX_Assistive_MathML&quot;&gt;分别指代通道，行，列. &lt;br/&gt;　　则SCNN的前向计算为： &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;MathJax_Display&quot;&gt;&lt;span class=&quot;MathJax&quot; data-mathml=&quot;&amp;lt;math xmlns=&amp;quot;http://www.w3.org/1998/Math/MathML&amp;quot; display=&amp;quot;block&amp;quot;&amp;gt;&amp;lt;msubsup&amp;gt;&amp;lt;mi&amp;gt;X&amp;lt;/mi&amp;gt;&amp;lt;mrow class=&amp;quot;MJX-TeXAtom-ORD&amp;quot;&amp;gt;&amp;lt;mi&amp;gt;i&amp;lt;/mi&amp;gt;&amp;lt;mo&amp;gt;,&amp;lt;/mo&amp;gt;&amp;lt;mi&amp;gt;j&amp;lt;/mi&amp;gt;&amp;lt;mo&amp;gt;,&amp;lt;/mo&amp;gt;&amp;lt;mi&amp;gt;k&amp;lt;/mi&amp;gt;&amp;lt;/mrow&amp;gt;&amp;lt;mrow class=&amp;quot;MJX-TeXAtom-ORD&amp;quot;&amp;gt;&amp;lt;msup&amp;gt;&amp;lt;mi&amp;gt;&amp;lt;/mi&amp;gt;&amp;lt;mo&amp;gt;&amp;amp;#x2032;&amp;lt;/mo&amp;gt;&amp;lt;/msup&amp;gt;&amp;lt;/mrow&amp;gt;&amp;lt;/msubsup&amp;gt;&amp;lt;mo&amp;gt;=&amp;lt;/mo&amp;gt;&amp;lt;mrow&amp;gt;&amp;lt;mo&amp;gt;{&amp;lt;/mo&amp;gt;&amp;lt;mtable columnalign=&amp;quot;left left&amp;quot; rowspacing=&amp;quot;.2em&amp;quot; columnspacing=&amp;quot;1em&amp;quot; displaystyle=&amp;quot;false&amp;quot;&amp;gt;&amp;lt;mtr&amp;gt;&amp;lt;mtd&amp;gt;&amp;lt;msub&amp;gt;&amp;lt;mi&amp;gt;X&amp;lt;/mi&amp;gt;&amp;lt;mrow class=&amp;quot;MJX-TeXAtom-ORD&amp;quot;&amp;gt;&amp;lt;mi&amp;gt;i&amp;lt;/mi&amp;gt;&amp;lt;mo&amp;gt;,&amp;lt;/mo&amp;gt;&amp;lt;mi&amp;gt;j&amp;lt;/mi&amp;gt;&amp;lt;mo&amp;gt;,&amp;lt;/mo&amp;gt;&amp;lt;mi&amp;gt;k&amp;lt;/mi&amp;gt;&amp;lt;/mrow&amp;gt;&amp;lt;/msub&amp;gt;&amp;lt;/mtd&amp;gt;&amp;lt;mtd&amp;gt;&amp;lt;mtext&amp;gt;if&amp;amp;#xA0;&amp;lt;/mtext&amp;gt;&amp;lt;mi&amp;gt;j&amp;lt;/mi&amp;gt;&amp;lt;mo&amp;gt;=&amp;lt;/mo&amp;gt;&amp;lt;mn&amp;gt;1&amp;lt;/mn&amp;gt;&amp;lt;/mtd&amp;gt;&amp;lt;/mtr&amp;gt;&amp;lt;mtr&amp;gt;&amp;lt;mtd&amp;gt;&amp;lt;msub&amp;gt;&amp;lt;mi&amp;gt;X&amp;lt;/mi&amp;gt;&amp;lt;mrow class=&amp;quot;MJX-TeXAtom-ORD&amp;quot;&amp;gt;&amp;lt;mi&amp;gt;i&amp;lt;/mi&amp;gt;&amp;lt;mo&amp;gt;,&amp;lt;/mo&amp;gt;&amp;lt;mi&amp;gt;j&amp;lt;/mi&amp;gt;&amp;lt;mo&amp;gt;,&amp;lt;/mo&amp;gt;&amp;lt;mi&amp;gt;k&amp;lt;/mi&amp;gt;&amp;lt;/mrow&amp;gt;&amp;lt;/msub&amp;gt;&amp;lt;mo&amp;gt;+&amp;lt;/mo&amp;gt;&amp;lt;mi&amp;gt;f&amp;lt;/mi&amp;gt;&amp;lt;mo stretchy=&amp;quot;false&amp;quot;&amp;gt;(&amp;lt;/mo&amp;gt;&amp;lt;munder&amp;gt;&amp;lt;mo&amp;gt;&amp;amp;#x2211;&amp;lt;/mo&amp;gt;&amp;lt;mi&amp;gt;m&amp;lt;/mi&amp;gt;&amp;lt;/munder&amp;gt;&amp;lt;munder&amp;gt;&amp;lt;mo&amp;gt;&amp;amp;#x2211;&amp;lt;/mo&amp;gt;&amp;lt;mi&amp;gt;n&amp;lt;/mi&amp;gt;&amp;lt;/munder&amp;gt;&amp;lt;msubsup&amp;gt;&amp;lt;mi&amp;gt;X&amp;lt;/mi&amp;gt;&amp;lt;mrow class=&amp;quot;MJX-TeXAtom-ORD&amp;quot;&amp;gt;&amp;lt;mi&amp;gt;m&amp;lt;/mi&amp;gt;&amp;lt;mo&amp;gt;,&amp;lt;/mo&amp;gt;&amp;lt;mi&amp;gt;j&amp;lt;/mi&amp;gt;&amp;lt;mo&amp;gt;&amp;amp;#x2212;&amp;lt;/mo&amp;gt;&amp;lt;mn&amp;gt;1&amp;lt;/mn&amp;gt;&amp;lt;mo&amp;gt;,&amp;lt;/mo&amp;gt;&amp;lt;mi&amp;gt;k&amp;lt;/mi&amp;gt;&amp;lt;mo&amp;gt;+&amp;lt;/mo&amp;gt;&amp;lt;mi&amp;gt;n&amp;lt;/mi&amp;gt;&amp;lt;mo&amp;gt;&amp;amp;#x2212;&amp;lt;/mo&amp;gt;&amp;lt;mn&amp;gt;1&amp;lt;/mn&amp;gt;&amp;lt;/mrow&amp;gt;&amp;lt;mrow class=&amp;quot;MJX-TeXAtom-ORD&amp;quot;&amp;gt;&amp;lt;msup&amp;gt;&amp;lt;mi&amp;gt;&amp;lt;/mi&amp;gt;&amp;lt;mo&amp;gt;&amp;amp;#x2032;&amp;lt;/mo&amp;gt;&amp;lt;/msup&amp;gt;&amp;lt;/mrow&amp;gt;&amp;lt;/msubsup&amp;gt;&amp;lt;mo&amp;gt;&amp;amp;#xD7;&amp;lt;/mo&amp;gt;&amp;lt;msub&amp;gt;&amp;lt;mi&amp;gt;K&amp;lt;/mi&amp;gt;&amp;lt;mrow class=&amp;quot;MJX-TeXAtom-ORD&amp;quot;&amp;gt;&amp;lt;mi&amp;gt;m&amp;lt;/mi&amp;gt;&amp;lt;mo&amp;gt;,&amp;lt;/mo&amp;gt;&amp;lt;mi&amp;gt;i&amp;lt;/mi&amp;gt;&amp;lt;mo&amp;gt;,&amp;lt;/mo&amp;gt;&amp;lt;mi&amp;gt;n&amp;lt;/mi&amp;gt;&amp;lt;/mrow&amp;gt;&amp;lt;/msub&amp;gt;&amp;lt;mo stretchy=&amp;quot;false&amp;quot;&amp;gt;)&amp;lt;/mo&amp;gt;&amp;lt;/mtd&amp;gt;&amp;lt;mtd&amp;gt;&amp;lt;mtext&amp;gt;if&amp;amp;#xA0;&amp;lt;/mtext&amp;gt;&amp;lt;mi&amp;gt;j&amp;lt;/mi&amp;gt;&amp;lt;mo&amp;gt;=&amp;lt;/mo&amp;gt;&amp;lt;mn&amp;gt;2&amp;lt;/mn&amp;gt;&amp;lt;mo&amp;gt;,&amp;lt;/mo&amp;gt;&amp;lt;mn&amp;gt;3&amp;lt;/mn&amp;gt;&amp;lt;mo&amp;gt;,&amp;lt;/mo&amp;gt;&amp;lt;mo&amp;gt;.&amp;lt;/mo&amp;gt;&amp;lt;mo&amp;gt;.&amp;lt;/mo&amp;gt;&amp;lt;mo&amp;gt;,&amp;lt;/mo&amp;gt;&amp;lt;mi&amp;gt;H&amp;lt;/mi&amp;gt;&amp;lt;/mtd&amp;gt;&amp;lt;/mtr&amp;gt;&amp;lt;/mtable&amp;gt;&amp;lt;mo fence=&amp;quot;true&amp;quot; stretchy=&amp;quot;true&amp;quot; symmetric=&amp;quot;true&amp;quot;&amp;gt;&amp;lt;/mo&amp;gt;&amp;lt;/mrow&amp;gt;&amp;lt;/math&amp;gt;&quot;&gt;&lt;span class=&quot;MathJax&quot; data-mathml=&quot;&amp;lt;math xmlns=&amp;quot;http://www.w3.org/1998/Math/MathML&amp;quot; display=&amp;quot;block&amp;quot;&amp;gt;&amp;lt;msubsup&amp;gt;&amp;lt;mi&amp;gt;X&amp;lt;/mi&amp;gt;&amp;lt;mrow class=&amp;quot;MJX-TeXAtom-ORD&amp;quot;&amp;gt;&amp;lt;mi&amp;gt;i&amp;lt;/mi&amp;gt;&amp;lt;mo&amp;gt;,&amp;lt;/mo&amp;gt;&amp;lt;mi&amp;gt;j&amp;lt;/mi&amp;gt;&amp;lt;mo&amp;gt;,&amp;lt;/mo&amp;gt;&amp;lt;mi&amp;gt;k&amp;lt;/mi&amp;gt;&amp;lt;/mrow&amp;gt;&amp;lt;mrow class=&amp;quot;MJX-TeXAtom-ORD&amp;quot;&amp;gt;&amp;lt;msup&amp;gt;&amp;lt;mi&amp;gt;&amp;lt;/mi&amp;gt;&amp;lt;mo&amp;gt;&amp;amp;#x2032;&amp;lt;/mo&amp;gt;&amp;lt;/msup&amp;gt;&amp;lt;/mrow&amp;gt;&amp;lt;/msubsup&amp;gt;&amp;lt;mo&amp;gt;=&amp;lt;/mo&amp;gt;&amp;lt;mrow&amp;gt;&amp;lt;mo&amp;gt;{&amp;lt;/mo&amp;gt;&amp;lt;mtable columnalign=&amp;quot;left left&amp;quot; rowspacing=&amp;quot;.2em&amp;quot; columnspacing=&amp;quot;1em&amp;quot; displaystyle=&amp;quot;false&amp;quot;&amp;gt;&amp;lt;mtr&amp;gt;&amp;lt;mtd&amp;gt;&amp;lt;msub&amp;gt;&amp;lt;mi&amp;gt;X&amp;lt;/mi&amp;gt;&amp;lt;mrow class=&amp;quot;MJX-TeXAtom-ORD&amp;quot;&amp;gt;&amp;lt;mi&amp;gt;i&amp;lt;/mi&amp;gt;&amp;lt;mo&amp;gt;,&amp;lt;/mo&amp;gt;&amp;lt;mi&amp;gt;j&amp;lt;/mi&amp;gt;&amp;lt;mo&amp;gt;,&amp;lt;/mo&amp;gt;&amp;lt;mi&amp;gt;k&amp;lt;/mi&amp;gt;&amp;lt;/mrow&amp;gt;&amp;lt;/msub&amp;gt;&amp;lt;/mtd&amp;gt;&amp;lt;mtd&amp;gt;&amp;lt;mtext&amp;gt;if&amp;amp;#xA0;&amp;lt;/mtext&amp;gt;&amp;lt;mi&amp;gt;j&amp;lt;/mi&amp;gt;&amp;lt;mo&amp;gt;=&amp;lt;/mo&amp;gt;&amp;lt;mn&amp;gt;1&amp;lt;/mn&amp;gt;&amp;lt;/mtd&amp;gt;&amp;lt;/mtr&amp;gt;&amp;lt;mtr&amp;gt;&amp;lt;mtd&amp;gt;&amp;lt;msub&amp;gt;&amp;lt;mi&amp;gt;X&amp;lt;/mi&amp;gt;&amp;lt;mrow class=&amp;quot;MJX-TeXAtom-ORD&amp;quot;&amp;gt;&amp;lt;mi&amp;gt;i&amp;lt;/mi&amp;gt;&amp;lt;mo&amp;gt;,&amp;lt;/mo&amp;gt;&amp;lt;mi&amp;gt;j&amp;lt;/mi&amp;gt;&amp;lt;mo&amp;gt;,&amp;lt;/mo&amp;gt;&amp;lt;mi&amp;gt;k&amp;lt;/mi&amp;gt;&amp;lt;/mrow&amp;gt;&amp;lt;/msub&amp;gt;&amp;lt;mo&amp;gt;+&amp;lt;/mo&amp;gt;&amp;lt;mi&amp;gt;f&amp;lt;/mi&amp;gt;&amp;lt;mo stretchy=&amp;quot;false&amp;quot;&amp;gt;(&amp;lt;/mo&amp;gt;&amp;lt;munder&amp;gt;&amp;lt;mo&amp;gt;&amp;amp;#x2211;&amp;lt;/mo&amp;gt;&amp;lt;mi&amp;gt;m&amp;lt;/mi&amp;gt;&amp;lt;/munder&amp;gt;&amp;lt;munder&amp;gt;&amp;lt;mo&amp;gt;&amp;amp;#x2211;&amp;lt;/mo&amp;gt;&amp;lt;mi&amp;gt;n&amp;lt;/mi&amp;gt;&amp;lt;/munder&amp;gt;&amp;lt;msubsup&amp;gt;&amp;lt;mi&amp;gt;X&amp;lt;/mi&amp;gt;&amp;lt;mrow class=&amp;quot;MJX-TeXAtom-ORD&amp;quot;&amp;gt;&amp;lt;mi&amp;gt;m&amp;lt;/mi&amp;gt;&amp;lt;mo&amp;gt;,&amp;lt;/mo&amp;gt;&amp;lt;mi&amp;gt;j&amp;lt;/mi&amp;gt;&amp;lt;mo&amp;gt;&amp;amp;#x2212;&amp;lt;/mo&amp;gt;&amp;lt;mn&amp;gt;1&amp;lt;/mn&amp;gt;&amp;lt;mo&amp;gt;,&amp;lt;/mo&amp;gt;&amp;lt;mi&amp;gt;k&amp;lt;/mi&amp;gt;&amp;lt;mo&amp;gt;+&amp;lt;/mo&amp;gt;&amp;lt;mi&amp;gt;n&amp;lt;/mi&amp;gt;&amp;lt;mo&amp;gt;&amp;amp;#x2212;&amp;lt;/mo&amp;gt;&amp;lt;mn&amp;gt;1&amp;lt;/mn&amp;gt;&amp;lt;/mrow&amp;gt;&amp;lt;mrow class=&amp;quot;MJX-TeXAtom-ORD&amp;quot;&amp;gt;&amp;lt;msup&amp;gt;&amp;lt;mi&amp;gt;&amp;lt;/mi&amp;gt;&amp;lt;mo&amp;gt;&amp;amp;#x2032;&amp;lt;/mo&amp;gt;&amp;lt;/msup&amp;gt;&amp;lt;/mrow&amp;gt;&amp;lt;/msubsup&amp;gt;&amp;lt;mo&amp;gt;&amp;amp;#xD7;&amp;lt;/mo&amp;gt;&amp;lt;msub&amp;gt;&amp;lt;mi&amp;gt;K&amp;lt;/mi&amp;gt;&amp;lt;mrow class=&amp;quot;MJX-TeXAtom-ORD&amp;quot;&amp;gt;&amp;lt;mi&amp;gt;m&amp;lt;/mi&amp;gt;&amp;lt;mo&amp;gt;,&amp;lt;/mo&amp;gt;&amp;lt;mi&amp;gt;i&amp;lt;/mi&amp;gt;&amp;lt;mo&amp;gt;,&amp;lt;/mo&amp;gt;&amp;lt;mi&amp;gt;n&amp;lt;/mi&amp;gt;&amp;lt;/mrow&amp;gt;&amp;lt;/msub&amp;gt;&amp;lt;mo stretchy=&amp;quot;false&amp;quot;&amp;gt;)&amp;lt;/mo&amp;gt;&amp;lt;/mtd&amp;gt;&amp;lt;mtd&amp;gt;&amp;lt;mtext&amp;gt;if&amp;amp;#xA0;&amp;lt;/mtext&amp;gt;&amp;lt;mi&amp;gt;j&amp;lt;/mi&amp;gt;&amp;lt;mo&amp;gt;=&amp;lt;/mo&amp;gt;&amp;lt;mn&amp;gt;2&amp;lt;/mn&amp;gt;&amp;lt;mo&amp;gt;,&amp;lt;/mo&amp;gt;&amp;lt;mn&amp;gt;3&amp;lt;/mn&amp;gt;&amp;lt;mo&amp;gt;,&amp;lt;/mo&amp;gt;&amp;lt;mo&amp;gt;.&amp;lt;/mo&amp;gt;&amp;lt;mo&amp;gt;.&amp;lt;/mo&amp;gt;&amp;lt;mo&amp;gt;,&amp;lt;/mo&amp;gt;&amp;lt;mi&amp;gt;H&amp;lt;/mi&amp;gt;&amp;lt;/mtd&amp;gt;&amp;lt;/mtr&amp;gt;&amp;lt;/mtable&amp;gt;&amp;lt;mo fence=&amp;quot;true&amp;quot; stretchy=&amp;quot;true&amp;quot; symmetric=&amp;quot;true&amp;quot;&amp;gt;&amp;lt;/mo&amp;gt;&amp;lt;/mrow&amp;gt;&amp;lt;/math&amp;gt;&quot;&gt;&lt;span class=&quot;math&quot;&gt;&lt;span class=&quot;mrow&quot;&gt;&lt;span class=&quot;msubsup&quot;&gt;&lt;span class=&quot;mi&quot;&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1192699/201804/1192699-20180425100451216-1716790267.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;　　其中&lt;span class=&quot;MathJax&quot; data-mathml=&quot;&amp;lt;math xmlns=&amp;quot;http://www.w3.org/1998/Math/MathML&amp;quot;&amp;gt;&amp;lt;mi&amp;gt;f&amp;lt;/mi&amp;gt;&amp;lt;/math&amp;gt;&quot;&gt;&lt;span class=&quot;MathJax&quot; data-mathml=&quot;&amp;lt;math xmlns=&amp;quot;http://www.w3.org/1998/Math/MathML&amp;quot;&amp;gt;&amp;lt;mi&amp;gt;f&amp;lt;/mi&amp;gt;&amp;lt;/math&amp;gt;&quot;&gt;&lt;span id=&quot;MathJax-Span-182&quot; class=&quot;math&quot;&gt;&lt;span id=&quot;MathJax-Span-183&quot; class=&quot;mrow&quot;&gt;&lt;span id=&quot;MathJax-Span-184&quot; class=&quot;mi&quot;&gt;f&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;MJX_Assistive_MathML&quot;&gt;是非线性激活函数&lt;span class=&quot;MathJax&quot; data-mathml=&quot;&amp;lt;math xmlns=&amp;quot;http://www.w3.org/1998/Math/MathML&amp;quot;&amp;gt;&amp;lt;mi&amp;gt;R&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;e&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;L&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;U&amp;lt;/mi&amp;gt;&amp;lt;/math&amp;gt;&quot;&gt;&lt;span id=&quot;MathJax-Span-185&quot; class=&quot;math&quot;&gt;&lt;span id=&quot;MathJax-Span-186&quot; class=&quot;mrow&quot;&gt;&lt;span id=&quot;MathJax-Span-187&quot; class=&quot;mi&quot;&gt;R&lt;span id=&quot;MathJax-Span-188&quot; class=&quot;mi&quot;&gt;e&lt;span id=&quot;MathJax-Span-189&quot; class=&quot;mi&quot;&gt;L&lt;span id=&quot;MathJax-Span-190&quot; class=&quot;mi&quot;&gt;U&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;MJX_Assistive_MathML&quot;&gt;。&lt;span class=&quot;MathJax&quot; data-mathml=&quot;&amp;lt;math xmlns=&amp;quot;http://www.w3.org/1998/Math/MathML&amp;quot;&amp;gt;&amp;lt;mi&amp;gt;X&amp;lt;/mi&amp;gt;&amp;lt;/math&amp;gt;&quot;&gt;&lt;span id=&quot;MathJax-Span-191&quot; class=&quot;math&quot;&gt;&lt;span id=&quot;MathJax-Span-192&quot; class=&quot;mrow&quot;&gt;&lt;span id=&quot;MathJax-Span-193&quot; class=&quot;mi&quot;&gt;X&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;MJX_Assistive_MathML&quot;&gt;加&lt;span class=&quot;MathJax&quot; data-mathml=&quot;&amp;lt;math xmlns=&amp;quot;http://www.w3.org/1998/Math/MathML&amp;quot;&amp;gt;&amp;lt;msup&amp;gt;&amp;lt;mi&amp;gt;&amp;lt;/mi&amp;gt;&amp;lt;mo&amp;gt;&amp;amp;#x2032;&amp;lt;/mo&amp;gt;&amp;lt;/msup&amp;gt;&amp;lt;/math&amp;gt;&quot;&gt;&lt;span id=&quot;MathJax-Span-194&quot; class=&quot;math&quot;&gt;&lt;span id=&quot;MathJax-Span-195&quot; class=&quot;mrow&quot;&gt;&lt;span id=&quot;MathJax-Span-196&quot; class=&quot;msup&quot;&gt;&lt;span id=&quot;MathJax-Span-197&quot; class=&quot;mi&quot;&gt;&lt;span id=&quot;MathJax-Span-198&quot; class=&quot;mo&quot;&gt;′&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;MJX_Assistive_MathML&quot;&gt;′表示更新后的值，注意&lt;span&gt;&lt;strong&gt;所有的片&lt;span&gt;共&lt;/span&gt;享一组卷积核&lt;/strong&gt;&lt;/span&gt;，SCNN是一种RNN。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&quot;analysis&quot;&gt;Analysis&lt;/h2&gt;
&lt;p&gt;SCNN相比于传统方法，有三个优势：&lt;/p&gt;
&lt;h3 id=&quot;计算效率&quot;&gt;计算效率&lt;/h3&gt;
&lt;p&gt;　　SCNN与传统的Dense MRF/CRF相比，在信息传递方向不同，示意图如下所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1192699/201804/1192699-20180425101128664-1022660116.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;图(a)：MRF/CRF中每个像素点会直接接收其他所有像素点的信息(大卷积核实现)，这其中有许多冗余计算。&lt;/li&gt;
&lt;li&gt;图(b)：&lt;span&gt;在SCNN中，信息是顺序传递的。&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;　　假设张量有&lt;span id=&quot;MathJax-Element-21-Frame&quot; class=&quot;MathJax&quot; data-mathml=&quot;&amp;lt;math xmlns=&amp;quot;http://www.w3.org/1998/Math/MathML&amp;quot;&amp;gt;&amp;lt;mi&amp;gt;H&amp;lt;/mi&amp;gt;&amp;lt;/math&amp;gt;&quot;&gt;&lt;span id=&quot;MathJax-Span-199&quot; class=&quot;math&quot;&gt;&lt;span id=&quot;MathJax-Span-200&quot; class=&quot;mrow&quot;&gt;&lt;span id=&quot;MathJax-Span-201&quot; class=&quot;mi&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;MJX_Assistive_MathML&quot;&gt;H行&lt;span id=&quot;MathJax-Element-22-Frame&quot; class=&quot;MathJax&quot; data-mathml=&quot;&amp;lt;math xmlns=&amp;quot;http://www.w3.org/1998/Math/MathML&amp;quot;&amp;gt;&amp;lt;mi&amp;gt;W&amp;lt;/mi&amp;gt;&amp;lt;/math&amp;gt;&quot;&gt;&lt;span id=&quot;MathJax-Span-202&quot; class=&quot;math&quot;&gt;&lt;span id=&quot;MathJax-Span-203&quot; class=&quot;mrow&quot;&gt;&lt;span id=&quot;MathJax-Span-204&quot; class=&quot;mi&quot;&gt;W&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;MJX_Assistive_MathML&quot;&gt;列，对于密集的MRF/CRF来讲，在每两个&lt;span id=&quot;MathJax-Element-23-Frame&quot; class=&quot;MathJax&quot; data-mathml=&quot;&amp;lt;math xmlns=&amp;quot;http://www.w3.org/1998/Math/MathML&amp;quot;&amp;gt;&amp;lt;mi&amp;gt;H&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;W&amp;lt;/mi&amp;gt;&amp;lt;/math&amp;gt;&quot;&gt;&lt;span id=&quot;MathJax-Span-205&quot; class=&quot;math&quot;&gt;&lt;span id=&quot;MathJax-Span-206&quot; class=&quot;mrow&quot;&gt;&lt;span id=&quot;MathJax-Span-207&quot; class=&quot;mi&quot;&gt;H&lt;span id=&quot;MathJax-Span-208&quot; class=&quot;mi&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;MJX_Assistive_MathML&quot;&gt;W像素之间都存在信息传递，对于&lt;span id=&quot;MathJax-Element-24-Frame&quot; class=&quot;MathJax&quot; data-mathml=&quot;&amp;lt;math xmlns=&amp;quot;http://www.w3.org/1998/Math/MathML&amp;quot;&amp;gt;&amp;lt;msub&amp;gt;&amp;lt;mi&amp;gt;n&amp;lt;/mi&amp;gt;&amp;lt;mrow class=&amp;quot;MJX-TeXAtom-ORD&amp;quot;&amp;gt;&amp;lt;mi&amp;gt;i&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;t&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;e&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;r&amp;lt;/mi&amp;gt;&amp;lt;/mrow&amp;gt;&amp;lt;/msub&amp;gt;&amp;lt;/math&amp;gt;&quot;&gt;&lt;span id=&quot;MathJax-Span-209&quot; class=&quot;math&quot;&gt;&lt;span id=&quot;MathJax-Span-210&quot; class=&quot;mrow&quot;&gt;&lt;span id=&quot;MathJax-Span-211&quot; class=&quot;msubsup&quot;&gt;&lt;span id=&quot;MathJax-Span-212&quot; class=&quot;mi&quot;&gt;n&lt;span id=&quot;MathJax-Span-213&quot; class=&quot;texatom&quot;&gt;&lt;span id=&quot;MathJax-Span-214&quot; class=&quot;mrow&quot;&gt;&lt;span id=&quot;MathJax-Span-215&quot; class=&quot;mi&quot;&gt;i&lt;span id=&quot;MathJax-Span-216&quot; class=&quot;mi&quot;&gt;t&lt;span id=&quot;MathJax-Span-217&quot; class=&quot;mi&quot;&gt;e&lt;span id=&quot;MathJax-Span-218&quot; class=&quot;mi&quot;&gt;r&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;MJX_Assistive_MathML&quot;&gt;次迭代，传递了&lt;span id=&quot;MathJax-Element-25-Frame&quot; class=&quot;MathJax&quot; data-mathml=&quot;&amp;lt;math xmlns=&amp;quot;http://www.w3.org/1998/Math/MathML&amp;quot;&amp;gt;&amp;lt;msub&amp;gt;&amp;lt;mi&amp;gt;n&amp;lt;/mi&amp;gt;&amp;lt;mrow class=&amp;quot;MJX-TeXAtom-ORD&amp;quot;&amp;gt;&amp;lt;mi&amp;gt;i&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;t&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;e&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;r&amp;lt;/mi&amp;gt;&amp;lt;/mrow&amp;gt;&amp;lt;/msub&amp;gt;&amp;lt;msup&amp;gt;&amp;lt;mi&amp;gt;W&amp;lt;/mi&amp;gt;&amp;lt;mn&amp;gt;2&amp;lt;/mn&amp;gt;&amp;lt;/msup&amp;gt;&amp;lt;msup&amp;gt;&amp;lt;mi&amp;gt;H&amp;lt;/mi&amp;gt;&amp;lt;mn&amp;gt;2&amp;lt;/mn&amp;gt;&amp;lt;/msup&amp;gt;&amp;lt;/math&amp;gt;&quot;&gt;&lt;span id=&quot;MathJax-Span-219&quot; class=&quot;math&quot;&gt;&lt;span id=&quot;MathJax-Span-220&quot; class=&quot;mrow&quot;&gt;&lt;span id=&quot;MathJax-Span-221&quot; class=&quot;msubsup&quot;&gt;&lt;span id=&quot;MathJax-Span-222&quot; class=&quot;mi&quot;&gt;n&lt;span id=&quot;MathJax-Span-223&quot; class=&quot;texatom&quot;&gt;&lt;span id=&quot;MathJax-Span-224&quot; class=&quot;mrow&quot;&gt;&lt;span id=&quot;MathJax-Span-225&quot; class=&quot;mi&quot;&gt;i&lt;span id=&quot;MathJax-Span-226&quot; class=&quot;mi&quot;&gt;t&lt;span id=&quot;MathJax-Span-227&quot; class=&quot;mi&quot;&gt;e&lt;span id=&quot;MathJax-Span-228&quot; class=&quot;mi&quot;&gt;r&lt;span id=&quot;MathJax-Span-229&quot; class=&quot;msubsup&quot;&gt;&lt;span id=&quot;MathJax-Span-230&quot; class=&quot;mi&quot;&gt;W&lt;span id=&quot;MathJax-Span-231&quot; class=&quot;mn&quot;&gt;2&lt;span id=&quot;MathJax-Span-232&quot; class=&quot;msubsup&quot;&gt;&lt;span id=&quot;MathJax-Span-233&quot; class=&quot;mi&quot;&gt;H&lt;span id=&quot;MathJax-Span-234&quot; class=&quot;mn&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;MJX_Assistive_MathML&quot;&gt;次信息。在SCNN中，每个像素只接受来自&lt;span id=&quot;MathJax-Element-26-Frame&quot; class=&quot;MathJax&quot; data-mathml=&quot;&amp;lt;math xmlns=&amp;quot;http://www.w3.org/1998/Math/MathML&amp;quot;&amp;gt;&amp;lt;mi&amp;gt;w&amp;lt;/mi&amp;gt;&amp;lt;/math&amp;gt;&quot;&gt;&lt;span id=&quot;MathJax-Span-235&quot; class=&quot;math&quot;&gt;&lt;span id=&quot;MathJax-Span-236&quot; class=&quot;mrow&quot;&gt;&lt;span id=&quot;MathJax-Span-237&quot; class=&quot;mi&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;MJX_Assistive_MathML&quot;&gt;w个像素的信息，共传递了&lt;span id=&quot;MathJax-Element-27-Frame&quot; class=&quot;MathJax&quot; data-mathml=&quot;&amp;lt;math xmlns=&amp;quot;http://www.w3.org/1998/Math/MathML&amp;quot;&amp;gt;&amp;lt;msub&amp;gt;&amp;lt;mi&amp;gt;n&amp;lt;/mi&amp;gt;&amp;lt;mrow class=&amp;quot;MJX-TeXAtom-ORD&amp;quot;&amp;gt;&amp;lt;mi&amp;gt;d&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;e&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;r&amp;lt;/mi&amp;gt;&amp;lt;/mrow&amp;gt;&amp;lt;/msub&amp;gt;&amp;lt;mi&amp;gt;W&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;H&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;w&amp;lt;/mi&amp;gt;&amp;lt;/math&amp;gt;&quot;&gt;&lt;span id=&quot;MathJax-Span-238&quot; class=&quot;math&quot;&gt;&lt;span id=&quot;MathJax-Span-239&quot; class=&quot;mrow&quot;&gt;&lt;span id=&quot;MathJax-Span-240&quot; class=&quot;msubsup&quot;&gt;&lt;span id=&quot;MathJax-Span-241&quot; class=&quot;mi&quot;&gt;n&lt;span id=&quot;MathJax-Span-242&quot; class=&quot;texatom&quot;&gt;&lt;span id=&quot;MathJax-Span-243&quot; class=&quot;mrow&quot;&gt;&lt;span id=&quot;MathJax-Span-244&quot; class=&quot;mi&quot;&gt;d&lt;span id=&quot;MathJax-Span-245&quot; class=&quot;mi&quot;&gt;e&lt;span id=&quot;MathJax-Span-246&quot; class=&quot;mi&quot;&gt;r&lt;span id=&quot;MathJax-Span-247&quot; class=&quot;mi&quot;&gt;W&lt;span id=&quot;MathJax-Span-248&quot; class=&quot;mi&quot;&gt;H&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;MJX_Assistive_MathML&quot;&gt;次，其中&lt;span id=&quot;MathJax-Element-28-Frame&quot; class=&quot;MathJax&quot; data-mathml=&quot;&amp;lt;math xmlns=&amp;quot;http://www.w3.org/1998/Math/MathML&amp;quot;&amp;gt;&amp;lt;mi&amp;gt;d&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;e&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;r&amp;lt;/mi&amp;gt;&amp;lt;/math&amp;gt;&quot;&gt;&lt;span id=&quot;MathJax-Span-250&quot; class=&quot;math&quot;&gt;&lt;span id=&quot;MathJax-Span-251&quot; class=&quot;mrow&quot;&gt;&lt;span id=&quot;MathJax-Span-252&quot; class=&quot;mi&quot;&gt;d&lt;span id=&quot;MathJax-Span-253&quot; class=&quot;mi&quot;&gt;e&lt;span id=&quot;MathJax-Span-254&quot; class=&quot;mi&quot;&gt;r&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;MJX_Assistive_MathML&quot;&gt;&lt;span&gt;指代传递信息的方向的数量&lt;/span&gt;，&lt;span id=&quot;MathJax-Element-29-Frame&quot; class=&quot;MathJax&quot; data-mathml=&quot;&amp;lt;math xmlns=&amp;quot;http://www.w3.org/1998/Math/MathML&amp;quot;&amp;gt;&amp;lt;mi&amp;gt;w&amp;lt;/mi&amp;gt;&amp;lt;/math&amp;gt;&quot;&gt;&lt;span class=&quot;MJX_Assistive_MathML&quot;&gt;w为卷积核宽度。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span id=&quot;MathJax-Element-30-Frame&quot; class=&quot;MathJax&quot; data-mathml=&quot;&amp;lt;math xmlns=&amp;quot;http://www.w3.org/1998/Math/MathML&amp;quot;&amp;gt;&amp;lt;msub&amp;gt;&amp;lt;mi&amp;gt;n&amp;lt;/mi&amp;gt;&amp;lt;mrow class=&amp;quot;MJX-TeXAtom-ORD&amp;quot;&amp;gt;&amp;lt;mi&amp;gt;i&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;t&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;e&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;r&amp;lt;/mi&amp;gt;&amp;lt;/mrow&amp;gt;&amp;lt;/msub&amp;gt;&amp;lt;/math&amp;gt;&quot;&gt;&lt;span id=&quot;MathJax-Span-258&quot; class=&quot;math&quot;&gt;&lt;span id=&quot;MathJax-Span-259&quot; class=&quot;mrow&quot;&gt;&lt;span id=&quot;MathJax-Span-260&quot; class=&quot;msubsup&quot;&gt;&lt;span id=&quot;MathJax-Span-261&quot; class=&quot;mi&quot;&gt;n&lt;span id=&quot;MathJax-Span-262&quot; class=&quot;texatom&quot;&gt;&lt;span id=&quot;MathJax-Span-263&quot; class=&quot;mrow&quot;&gt;&lt;span id=&quot;MathJax-Span-264&quot; class=&quot;mi&quot;&gt;i&lt;span id=&quot;MathJax-Span-265&quot; class=&quot;mi&quot;&gt;t&lt;span id=&quot;MathJax-Span-266&quot; class=&quot;mi&quot;&gt;e&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;MJX_Assistive_MathML&quot;&gt;r范围在10到100之间，在本文中&lt;span id=&quot;MathJax-Element-31-Frame&quot; class=&quot;MathJax&quot; data-mathml=&quot;&amp;lt;math xmlns=&amp;quot;http://www.w3.org/1998/Math/MathML&amp;quot;&amp;gt;&amp;lt;msub&amp;gt;&amp;lt;mi&amp;gt;n&amp;lt;/mi&amp;gt;&amp;lt;mrow class=&amp;quot;MJX-TeXAtom-ORD&amp;quot;&amp;gt;&amp;lt;mi&amp;gt;d&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;i&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;r&amp;lt;/mi&amp;gt;&amp;lt;/mrow&amp;gt;&amp;lt;/msub&amp;gt;&amp;lt;/math&amp;gt;&quot;&gt;&lt;span id=&quot;MathJax-Span-268&quot; class=&quot;math&quot;&gt;&lt;span id=&quot;MathJax-Span-269&quot; class=&quot;mrow&quot;&gt;&lt;span id=&quot;MathJax-Span-270&quot; class=&quot;msubsup&quot;&gt;&lt;span id=&quot;MathJax-Span-271&quot; class=&quot;mi&quot;&gt;n&lt;span id=&quot;MathJax-Span-272&quot; class=&quot;texatom&quot;&gt;&lt;span id=&quot;MathJax-Span-273&quot; class=&quot;mrow&quot;&gt;&lt;span id=&quot;MathJax-Span-274&quot; class=&quot;mi&quot;&gt;d&lt;span id=&quot;MathJax-Span-275&quot; class=&quot;mi&quot;&gt;i&lt;span id=&quot;MathJax-Span-276&quot; class=&quot;mi&quot;&gt;r&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;MJX_Assistive_MathML&quot;&gt;设置为4，对应着四个方向。&lt;span id=&quot;MathJax-Element-32-Frame&quot; class=&quot;MathJax&quot; data-mathml=&quot;&amp;lt;math xmlns=&amp;quot;http://www.w3.org/1998/Math/MathML&amp;quot;&amp;gt;&amp;lt;mi&amp;gt;w&amp;lt;/mi&amp;gt;&amp;lt;/math&amp;gt;&quot;&gt;&lt;span id=&quot;MathJax-Span-277&quot; class=&quot;math&quot;&gt;&lt;span id=&quot;MathJax-Span-278&quot; class=&quot;mrow&quot;&gt;&lt;span id=&quot;MathJax-Span-279&quot; class=&quot;mi&quot;&gt;w&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;MJX_Assistive_MathML&quot;&gt;设置通常不超过10(图中设置为3)。&lt;span&gt;对于一张有上千行和列的图片来说，SCNN可大幅度减少计算量，而每个像素点依旧能够接收来所有其他像素传递的信息(4个方向的信息传递)。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&quot;将传递信息作残差&quot;&gt;将传递信息作残差&lt;/h3&gt;
&lt;p&gt;　　密集的MRF/CRF内是通过所有加权像素相加，这样的计算花费很大。而RNN是通过梯度来优化的， 考虑到这么多层和列，依据残差网络的经验，论文也采用残差的方式来学习(计算公式描述的残差学习)。这种残差可认为是对原始神经元的修正。实验证明这样的消息传递比基于LSTM的要好。&lt;/p&gt;
&lt;h3 id=&quot;灵活性&quot;&gt;灵活性&lt;/h3&gt;
&lt;p&gt;　　归功于SCNN的计算效率，它可以很方便的集成到CNN的任何部分。通常 top hidden layer 包含了丰富的语义信息，这是应用SCNN的理想位置。在完整的SCNN模型中我们在顶层的 feature map上用了四个方向的SCNN引入空间信息传递。&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;　　论文在自发布的lane detection dataset 和 CityScapes数据集做了评估。 &lt;br/&gt;　　采用标准的SGD训练器，学习率采用”poly”策略，初始学习率为0.01，power为0.9。batchsize设置为12，动量为0.9，权重衰减为0.0001。迭代次数为60K。模型架构在LargeFOV(DeepLabv2)基础上修改，初始的13层采用的是在ImageNet上预训练的VGG16层。所有的实验使用的工作是Torch7.&lt;/p&gt;
&lt;h2 id=&quot;lane-detection&quot;&gt;Lane Detection&lt;/h2&gt;
&lt;p&gt;　　普通的目标识别只要划分边界,而车道检测需要精准的预测曲线，一个自然的想法是模型输出曲线的概率图，以像素级目标来训练网络，这类似于语义分割任务。我们希望网络能够直接区分不同车道标记，这样鲁棒性更好。共有4中类型的车道线。输出的概率图经过一个小网络预测车道标记是否存在。&lt;/p&gt;
&lt;p&gt;　　在测试期间，同样需要从概率图转为曲线，模型大致示意如下图(b)所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1192699/201804/1192699-20180425102943805-881762674.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　对于存在值大于0.5的车道标记，在对应的概率图每20行搜索以获得最高的响应位置，然后通过三次样条函数连接这些点(cubic splines)。这就是最终的预测。&lt;/p&gt;
&lt;p&gt;上图(a)显示了baseline和LargeFOV之间的差异：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;fc7&lt;/code&gt;输出通道为128&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fc6&lt;/code&gt;扩张卷积的扩张率为4&lt;/li&gt;
&lt;li&gt;每个ReLU层前加了BN层&lt;/li&gt;
&lt;li&gt;添加了一个小型网络用于预测是否存在车道线&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;　训练时，输入和输出的图片分辨率设置为&lt;span id=&quot;MathJax-Element-33-Frame&quot; class=&quot;MathJax&quot; data-mathml=&quot;&amp;lt;math xmlns=&amp;quot;http://www.w3.org/1998/Math/MathML&amp;quot;&amp;gt;&amp;lt;mn&amp;gt;800&amp;lt;/mn&amp;gt;&amp;lt;mo&amp;gt;&amp;amp;#xD7;&amp;lt;/mo&amp;gt;&amp;lt;mn&amp;gt;288&amp;lt;/mn&amp;gt;&amp;lt;/math&amp;gt;&quot;&gt;&lt;span id=&quot;MathJax-Span-280&quot; class=&quot;math&quot;&gt;&lt;span id=&quot;MathJax-Span-281&quot; class=&quot;mrow&quot;&gt;&lt;span id=&quot;MathJax-Span-282&quot; class=&quot;mn&quot;&gt;800&lt;span id=&quot;MathJax-Span-283&quot; class=&quot;mo&quot;&gt;×&lt;span id=&quot;MathJax-Span-284&quot; class=&quot;mn&quot;&gt;288&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;MJX_Assistive_MathML&quot;&gt;(约为原图的二分之一)。目标线的宽度设置为16.考虑背景和车道标记之间的不平衡标签，背景损失乘以0.4。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&quot;评估&quot;&gt;评估&lt;/h3&gt;
&lt;p&gt;　　为了判断车道标记是否正确的检测到，论文将车道标记视为宽度为30像素的线，计算ground truth和预测值之间的IoU.如果预测的IoU大于某个阈值，则认为是true positives (TP). 如下图6所示，这里设置了0.3和0.5作为阈值，分别对应松散和严格的评估。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1192699/201804/1192699-20180425104301123-178503071.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;然后使用&lt;/p&gt;
&lt;div class=&quot;MathJax_Display&quot;&gt;&lt;span class=&quot;MathJax&quot; data-mathml=&quot;&amp;lt;math xmlns=&amp;quot;http://www.w3.org/1998/Math/MathML&amp;quot; display=&amp;quot;block&amp;quot;&amp;gt;&amp;lt;mi&amp;gt;F&amp;lt;/mi&amp;gt;&amp;lt;mo&amp;gt;&amp;amp;#x2212;&amp;lt;/mo&amp;gt;&amp;lt;mi&amp;gt;m&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;e&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;a&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;s&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;u&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;r&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;e&amp;lt;/mi&amp;gt;&amp;lt;mo&amp;gt;=&amp;lt;/mo&amp;gt;&amp;lt;mo stretchy=&amp;quot;false&amp;quot;&amp;gt;(&amp;lt;/mo&amp;gt;&amp;lt;mn&amp;gt;1&amp;lt;/mn&amp;gt;&amp;lt;mo&amp;gt;+&amp;lt;/mo&amp;gt;&amp;lt;msup&amp;gt;&amp;lt;mi&amp;gt;&amp;amp;#x03B2;&amp;lt;/mi&amp;gt;&amp;lt;mn&amp;gt;2&amp;lt;/mn&amp;gt;&amp;lt;/msup&amp;gt;&amp;lt;mo stretchy=&amp;quot;false&amp;quot;&amp;gt;)&amp;lt;/mo&amp;gt;&amp;lt;mfrac&amp;gt;&amp;lt;mrow&amp;gt;&amp;lt;mi&amp;gt;P&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;r&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;e&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;c&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;i&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;s&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;i&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;o&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;n&amp;lt;/mi&amp;gt;&amp;lt;mtext&amp;gt;&amp;amp;#xA0;&amp;lt;/mtext&amp;gt;&amp;lt;mtext&amp;gt;&amp;amp;#xA0;&amp;lt;/mtext&amp;gt;&amp;lt;mi&amp;gt;R&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;e&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;c&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;a&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;l&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;l&amp;lt;/mi&amp;gt;&amp;lt;/mrow&amp;gt;&amp;lt;mrow&amp;gt;&amp;lt;msup&amp;gt;&amp;lt;mi&amp;gt;&amp;amp;#x03B2;&amp;lt;/mi&amp;gt;&amp;lt;mn&amp;gt;2&amp;lt;/mn&amp;gt;&amp;lt;/msup&amp;gt;&amp;lt;mi&amp;gt;P&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;r&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;e&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;c&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;i&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;s&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;i&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;o&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;n&amp;lt;/mi&amp;gt;&amp;lt;mo&amp;gt;+&amp;lt;/mo&amp;gt;&amp;lt;mi&amp;gt;R&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;e&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;c&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;a&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;l&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;l&amp;lt;/mi&amp;gt;&amp;lt;/mrow&amp;gt;&amp;lt;/mfrac&amp;gt;&amp;lt;/math&amp;gt;&quot;&gt;&lt;span class=&quot;MathJax&quot; data-mathml=&quot;&amp;lt;math xmlns=&amp;quot;http://www.w3.org/1998/Math/MathML&amp;quot; display=&amp;quot;block&amp;quot;&amp;gt;&amp;lt;mi&amp;gt;F&amp;lt;/mi&amp;gt;&amp;lt;mo&amp;gt;&amp;amp;#x2212;&amp;lt;/mo&amp;gt;&amp;lt;mi&amp;gt;m&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;e&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;a&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;s&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;u&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;r&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;e&amp;lt;/mi&amp;gt;&amp;lt;mo&amp;gt;=&amp;lt;/mo&amp;gt;&amp;lt;mo stretchy=&amp;quot;false&amp;quot;&amp;gt;(&amp;lt;/mo&amp;gt;&amp;lt;mn&amp;gt;1&amp;lt;/mn&amp;gt;&amp;lt;mo&amp;gt;+&amp;lt;/mo&amp;gt;&amp;lt;msup&amp;gt;&amp;lt;mi&amp;gt;&amp;amp;#x03B2;&amp;lt;/mi&amp;gt;&amp;lt;mn&amp;gt;2&amp;lt;/mn&amp;gt;&amp;lt;/msup&amp;gt;&amp;lt;mo stretchy=&amp;quot;false&amp;quot;&amp;gt;)&amp;lt;/mo&amp;gt;&amp;lt;mfrac&amp;gt;&amp;lt;mrow&amp;gt;&amp;lt;mi&amp;gt;P&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;r&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;e&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;c&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;i&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;s&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;i&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;o&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;n&amp;lt;/mi&amp;gt;&amp;lt;mtext&amp;gt;&amp;amp;#xA0;&amp;lt;/mtext&amp;gt;&amp;lt;mtext&amp;gt;&amp;amp;#xA0;&amp;lt;/mtext&amp;gt;&amp;lt;mi&amp;gt;R&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;e&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;c&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;a&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;l&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;l&amp;lt;/mi&amp;gt;&amp;lt;/mrow&amp;gt;&amp;lt;mrow&amp;gt;&amp;lt;msup&amp;gt;&amp;lt;mi&amp;gt;&amp;amp;#x03B2;&amp;lt;/mi&amp;gt;&amp;lt;mn&amp;gt;2&amp;lt;/mn&amp;gt;&amp;lt;/msup&amp;gt;&amp;lt;mi&amp;gt;P&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;r&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;e&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;c&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;i&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;s&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;i&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;o&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;n&amp;lt;/mi&amp;gt;&amp;lt;mo&amp;gt;+&amp;lt;/mo&amp;gt;&amp;lt;mi&amp;gt;R&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;e&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;c&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;a&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;l&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;l&amp;lt;/mi&amp;gt;&amp;lt;/mrow&amp;gt;&amp;lt;/mfrac&amp;gt;&amp;lt;/math&amp;gt;&quot;&gt;&lt;span class=&quot;math&quot;&gt;&lt;span class=&quot;mrow&quot;&gt;&lt;span class=&quot;mi&quot;&gt;F&lt;span class=&quot;mo&quot;&gt;−&lt;span class=&quot;mi&quot;&gt;m&lt;span class=&quot;mi&quot;&gt;e&lt;span class=&quot;mi&quot;&gt;a&lt;span class=&quot;mi&quot;&gt;s&lt;span class=&quot;mi&quot;&gt;u&lt;span class=&quot;mi&quot;&gt;r&lt;span class=&quot;mi&quot;&gt;e &lt;span class=&quot;mo&quot;&gt;= &lt;img src=&quot;https://images2018.cnblogs.com/blog/1192699/201804/1192699-20180425104337184-237116018.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;span class=&quot;MathJax&quot; data-mathml=&quot;&amp;lt;math xmlns=&amp;quot;http://www.w3.org/1998/Math/MathML&amp;quot;&amp;gt;&amp;lt;mi&amp;gt;f&amp;lt;/mi&amp;gt;&amp;lt;/math&amp;gt;&quot;&gt;&lt;span class=&quot;MathJax&quot; data-mathml=&quot;&amp;lt;math xmlns=&amp;quot;http://www.w3.org/1998/Math/MathML&amp;quot;&amp;gt;&amp;lt;mi&amp;gt;f&amp;lt;/mi&amp;gt;&amp;lt;/math&amp;gt;&quot;&gt;&lt;span class=&quot;MJX_Assistive_MathML&quot;&gt;&lt;span class=&quot;MathJax&quot; data-mathml=&quot;&amp;lt;math xmlns=&amp;quot;http://www.w3.org/1998/Math/MathML&amp;quot;&amp;gt;&amp;lt;mi&amp;gt;R&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;e&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;L&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;U&amp;lt;/mi&amp;gt;&amp;lt;/math&amp;gt;&quot;&gt;&lt;span class=&quot;MJX_Assistive_MathML&quot;&gt;&lt;span class=&quot;MathJax&quot; data-mathml=&quot;&amp;lt;math xmlns=&amp;quot;http://www.w3.org/1998/Math/MathML&amp;quot;&amp;gt;&amp;lt;mi&amp;gt;X&amp;lt;/mi&amp;gt;&amp;lt;/math&amp;gt;&quot;&gt;&lt;span class=&quot;MJX_Assistive_MathML&quot;&gt;&lt;span class=&quot;MathJax&quot; data-mathml=&quot;&amp;lt;math xmlns=&amp;quot;http://www.w3.org/1998/Math/MathML&amp;quot;&amp;gt;&amp;lt;msup&amp;gt;&amp;lt;mi&amp;gt;&amp;lt;/mi&amp;gt;&amp;lt;mo&amp;gt;&amp;amp;#x2032;&amp;lt;/mo&amp;gt;&amp;lt;/msup&amp;gt;&amp;lt;/math&amp;gt;&quot;&gt;&lt;span class=&quot;MJX_Assistive_MathML&quot;&gt;最为最终评价指标，其中&lt;span class=&quot;MathJax&quot; data-mathml=&quot;&amp;lt;math xmlns=&amp;quot;http://www.w3.org/1998/Math/MathML&amp;quot;&amp;gt;&amp;lt;mi&amp;gt;P&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;r&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;e&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;c&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;i&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;s&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;i&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;o&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;n&amp;lt;/mi&amp;gt;&amp;lt;mo&amp;gt;=&amp;lt;/mo&amp;gt;&amp;lt;mfrac&amp;gt;&amp;lt;mrow&amp;gt;&amp;lt;mi&amp;gt;T&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;P&amp;lt;/mi&amp;gt;&amp;lt;/mrow&amp;gt;&amp;lt;mrow&amp;gt;&amp;lt;mi&amp;gt;T&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;P&amp;lt;/mi&amp;gt;&amp;lt;mo&amp;gt;+&amp;lt;/mo&amp;gt;&amp;lt;mi&amp;gt;F&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;P&amp;lt;/mi&amp;gt;&amp;lt;/mrow&amp;gt;&amp;lt;/mfrac&amp;gt;&amp;lt;/math&amp;gt;&quot;&gt;&lt;span id=&quot;MathJax-Span-343&quot; class=&quot;math&quot;&gt;&lt;span id=&quot;MathJax-Span-344&quot; class=&quot;mrow&quot;&gt;&lt;span id=&quot;MathJax-Span-345&quot; class=&quot;mi&quot;&gt;P&lt;span id=&quot;MathJax-Span-346&quot; class=&quot;mi&quot;&gt;r&lt;span id=&quot;MathJax-Span-347&quot; class=&quot;mi&quot;&gt;e&lt;span id=&quot;MathJax-Span-348&quot; class=&quot;mi&quot;&gt;c&lt;span id=&quot;MathJax-Span-349&quot; class=&quot;mi&quot;&gt;i&lt;span id=&quot;MathJax-Span-350&quot; class=&quot;mi&quot;&gt;s&lt;span id=&quot;MathJax-Span-351&quot; class=&quot;mi&quot;&gt;i&lt;span id=&quot;MathJax-Span-352&quot; class=&quot;mi&quot;&gt;o&lt;span id=&quot;MathJax-Span-353&quot; class=&quot;mi&quot;&gt;n&lt;span id=&quot;MathJax-Span-354&quot; class=&quot;mo&quot;&gt;=&lt;span id=&quot;MathJax-Span-355&quot; class=&quot;mfrac&quot;&gt;&lt;span id=&quot;MathJax-Span-356&quot; class=&quot;mrow&quot;&gt;&lt;span id=&quot;MathJax-Span-357&quot; class=&quot;mi&quot;&gt;T&lt;span id=&quot;MathJax-Span-358&quot; class=&quot;mi&quot;&gt;P&lt;span id=&quot;MathJax-Span-359&quot; class=&quot;mrow&quot;&gt;&lt;span id=&quot;MathJax-Span-360&quot; class=&quot;mi&quot;&gt;T&lt;span id=&quot;MathJax-Span-361&quot; class=&quot;mi&quot;&gt;P&lt;span id=&quot;MathJax-Span-362&quot; class=&quot;mo&quot;&gt;+&lt;span id=&quot;MathJax-Span-363&quot; class=&quot;mi&quot;&gt;F&lt;span id=&quot;MathJax-Span-364&quot; class=&quot;mi&quot;&gt;P&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;MJX_Assistive_MathML&quot;&gt;，&lt;span class=&quot;MathJax&quot; data-mathml=&quot;&amp;lt;math xmlns=&amp;quot;http://www.w3.org/1998/Math/MathML&amp;quot;&amp;gt;&amp;lt;mi&amp;gt;R&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;e&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;c&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;a&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;l&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;l&amp;lt;/mi&amp;gt;&amp;lt;mo&amp;gt;=&amp;lt;/mo&amp;gt;&amp;lt;mfrac&amp;gt;&amp;lt;mrow&amp;gt;&amp;lt;mi&amp;gt;T&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;P&amp;lt;/mi&amp;gt;&amp;lt;/mrow&amp;gt;&amp;lt;mrow&amp;gt;&amp;lt;mi&amp;gt;T&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;P&amp;lt;/mi&amp;gt;&amp;lt;mo&amp;gt;+&amp;lt;/mo&amp;gt;&amp;lt;mi&amp;gt;F&amp;lt;/mi&amp;gt;&amp;lt;mi&amp;gt;N&amp;lt;/mi&amp;gt;&amp;lt;/mrow&amp;gt;&amp;lt;/mfrac&amp;gt;&amp;lt;/math&amp;gt;&quot;&gt;&lt;span id=&quot;MathJax-Span-365&quot; class=&quot;math&quot;&gt;&lt;span id=&quot;MathJax-Span-366&quot; class=&quot;mrow&quot;&gt;&lt;span id=&quot;MathJax-Span-367&quot; class=&quot;mi&quot;&gt;R&lt;span id=&quot;MathJax-Span-368&quot; class=&quot;mi&quot;&gt;e&lt;span id=&quot;MathJax-Span-369&quot; class=&quot;mi&quot;&gt;c&lt;span id=&quot;MathJax-Span-370&quot; class=&quot;mi&quot;&gt;a&lt;span id=&quot;MathJax-Span-371&quot; class=&quot;mi&quot;&gt;l&lt;span id=&quot;MathJax-Span-372&quot; class=&quot;mi&quot;&gt;l&lt;span id=&quot;MathJax-Span-373&quot; class=&quot;mo&quot;&gt;=&lt;span id=&quot;MathJax-Span-374&quot; class=&quot;mfrac&quot;&gt;&lt;span id=&quot;MathJax-Span-375&quot; class=&quot;mrow&quot;&gt;&lt;span id=&quot;MathJax-Span-376&quot; class=&quot;mi&quot;&gt;T&lt;span id=&quot;MathJax-Span-377&quot; class=&quot;mi&quot;&gt;P&lt;span id=&quot;MathJax-Span-378&quot; class=&quot;mrow&quot;&gt;&lt;span id=&quot;MathJax-Span-379&quot; class=&quot;mi&quot;&gt;T&lt;span id=&quot;MathJax-Span-380&quot; class=&quot;mi&quot;&gt;P&lt;span id=&quot;MathJax-Span-381&quot; class=&quot;mo&quot;&gt;+&lt;span id=&quot;MathJax-Span-382&quot; class=&quot;mi&quot;&gt;F&lt;span id=&quot;MathJax-Span-383&quot; class=&quot;mi&quot;&gt;N&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;MJX_Assistive_MathML&quot;&gt;。设置&lt;span class=&quot;MathJax&quot; data-mathml=&quot;&amp;lt;math xmlns=&amp;quot;http://www.w3.org/1998/Math/MathML&amp;quot;&amp;gt;&amp;lt;mi&amp;gt;&amp;amp;#x03B2;&amp;lt;/mi&amp;gt;&amp;lt;mo&amp;gt;=&amp;lt;/mo&amp;gt;&amp;lt;mn&amp;gt;1&amp;lt;/mn&amp;gt;&amp;lt;/math&amp;gt;&quot;&gt;&lt;span id=&quot;MathJax-Span-384&quot; class=&quot;math&quot;&gt;&lt;span id=&quot;MathJax-Span-385&quot; class=&quot;mrow&quot;&gt;&lt;span id=&quot;MathJax-Span-386&quot; class=&quot;mi&quot;&gt;β&lt;span id=&quot;MathJax-Span-387&quot; class=&quot;mo&quot;&gt;=&lt;span id=&quot;MathJax-Span-388&quot; class=&quot;mn&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;MJX_Assistive_MathML&quot;&gt;表示调和平均值。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&quot;ablation-study&quot;&gt;Ablation Study&lt;/h3&gt;
&lt;h4 id=&quot;effectiveness-of-multidirectional-scnn&quot;&gt;Effectiveness of multidirectional SCNN&lt;/h4&gt;
&lt;p&gt;首先探究了SCNN里信息传递方向的有效性。对比实验如下表：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1192699/201804/1192699-20180425104515156-1099119910.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　SCNN的核宽度&lt;span id=&quot;MathJax-Element-38-Frame&quot; class=&quot;MathJax&quot; data-mathml=&quot;&amp;lt;math xmlns=&amp;quot;http://www.w3.org/1998/Math/MathML&amp;quot;&amp;gt;&amp;lt;mi&amp;gt;w&amp;lt;/mi&amp;gt;&amp;lt;mo&amp;gt;=&amp;lt;/mo&amp;gt;&amp;lt;mn&amp;gt;5&amp;lt;/mn&amp;gt;&amp;lt;/math&amp;gt;&quot;&gt;&lt;span id=&quot;MathJax-Span-389&quot; class=&quot;math&quot;&gt;&lt;span id=&quot;MathJax-Span-390&quot; class=&quot;mrow&quot;&gt;&lt;span id=&quot;MathJax-Span-391&quot; class=&quot;mi&quot;&gt;w&lt;span id=&quot;MathJax-Span-392&quot; class=&quot;mo&quot;&gt;=&lt;span id=&quot;MathJax-Span-393&quot; class=&quot;mn&quot;&gt;5&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;MJX_Assistive_MathML&quot;&gt;，可以看到随着方向的增加，性能也逐渐增加。 为了证明性能是来源于多方向，而不是参数的增加，在baseline的基础上添加了一个额外的&lt;span id=&quot;MathJax-Element-39-Frame&quot; class=&quot;MathJax&quot; data-mathml=&quot;&amp;lt;math xmlns=&amp;quot;http://www.w3.org/1998/Math/MathML&amp;quot;&amp;gt;&amp;lt;mn&amp;gt;5&amp;lt;/mn&amp;gt;&amp;lt;mo&amp;gt;&amp;amp;#xD7;&amp;lt;/mo&amp;gt;&amp;lt;mn&amp;gt;5&amp;lt;/mn&amp;gt;&amp;lt;/math&amp;gt;&quot;&gt;&lt;span id=&quot;MathJax-Span-394&quot; class=&quot;math&quot;&gt;&lt;span id=&quot;MathJax-Span-395&quot; class=&quot;mrow&quot;&gt;&lt;span id=&quot;MathJax-Span-396&quot; class=&quot;mn&quot;&gt;5&lt;span id=&quot;MathJax-Span-397&quot; class=&quot;mo&quot;&gt;×&lt;span id=&quot;MathJax-Span-398&quot; class=&quot;mn&quot;&gt;5&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;MJX_Assistive_MathML&quot;&gt;的卷积层，可以看到性能只有微弱的提升。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h4 id=&quot;effects-of-kernel-width-w&quot;&gt;Effects of kernel width w&lt;/h4&gt;
&lt;p&gt;　　论文在&lt;code&gt;SCNN_DURL&lt;/code&gt;的基础上测试了不同核宽度对性能的影响，核宽度表示像素可以接收其他像素的信息数量，结果如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1192699/201804/1192699-20180425104553454-1191673022.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　可以看到较大的&lt;span id=&quot;MathJax-Element-40-Frame&quot; class=&quot;MathJax&quot; data-mathml=&quot;&amp;lt;math xmlns=&amp;quot;http://www.w3.org/1998/Math/MathML&amp;quot;&amp;gt;&amp;lt;mi&amp;gt;w&amp;lt;/mi&amp;gt;&amp;lt;/math&amp;gt;&quot;&gt;&lt;span id=&quot;MathJax-Span-399&quot; class=&quot;math&quot;&gt;&lt;span id=&quot;MathJax-Span-400&quot; class=&quot;mrow&quot;&gt;&lt;span id=&quot;MathJax-Span-401&quot; class=&quot;mi&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;MJX_Assistive_MathML&quot;&gt;w表现出的性能较好(计算量也一直上升)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h4 id=&quot;spatial-cnn-on-different-positions&quot;&gt;Spatial CNN on different positions&lt;/h4&gt;
&lt;p&gt;　　SCNN可以添加到模型的任何地方，在图3中，将&lt;code&gt;SCNN_DURL&lt;/code&gt;应用于output上或top hidden layer：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1192699/201804/1192699-20180425104628304-465646379.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　可以看到放置在top hidden layer后效果要出色，这是因为top hidden layer包含更丰富的信息。&lt;/p&gt;
&lt;h4 id=&quot;effectiveness-of-sequential-propagation&quot;&gt;Effectiveness of sequential propagation&lt;/h4&gt;
&lt;p&gt;　　在SCNN中，信息时连续方式传递的，SCNN的一片不会传递信息给下一片，知道它接收到别的片传来的信息。与此做对比的时，使用平行策略(parallel)，即每个片在更新前将信息传递给一下片，一起更新，结果如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1192699/201804/1192699-20180425104721731-1689702384.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　可以看到顺序传递的优势较大，这表明在SCNN中，像素不仅受到邻近像素的影响，也受到更远距离的像素影响。&lt;/p&gt;
&lt;h4 id=&quot;comparison-with-state-of-the-art-methods&quot;&gt;Comparison with state-of-the-art methods&lt;/h4&gt;
&lt;p&gt;论文将SCNN与几个先进模型对比结果如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1192699/201804/1192699-20180425104750251-1025591223.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;基于LSTM的Renet：使用两个ReNet层替换Figure 3中SCNN层&lt;/li&gt;
&lt;li&gt;DenseCRF：采用了10个平均场迭代&lt;/li&gt;
&lt;li&gt;MRFNet：使用Figure 3(a)，迭代10次，内核大小为20&lt;/li&gt;
&lt;li&gt;ResNet：基于与DeepLabv2相同，除了不使用ASPP模块&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;可以看到SCNN的效果很出色~&lt;/p&gt;
&lt;p&gt;可视化结果如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1192699/201804/1192699-20180425104813984-1396214121.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　可以看到SCNN要比大型的ResNet101要好，虽然ResNet101参数多，但是在这种具有挑战性的情况下会产生杂乱或不连续的输出，SCNN相比能够保持平滑性。这表明SCNN相比于传统CNN能够更好的捕捉强先验结构的目标。&lt;/p&gt;
&lt;h4 id=&quot;computational-efficiency-over-other-methods&quot;&gt;Computational efficiency over other methods&lt;/h4&gt;
&lt;p&gt;同时论文给出了与其他模型时间效率上的对比。注意计算时间没有包括网络主干。都是在CPU上跑的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1192699/201804/1192699-20180425104853430-1412387537.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;可以看到SCNN比CRF要快很多，这是因为传递信息策略的改变。&lt;/p&gt;
&lt;h2 id=&quot;semantic-segmentation-on-cityscapes&quot;&gt;Semantic Segmentation on CityScapes&lt;/h2&gt;
&lt;p&gt;论文同时也在CityScapes上做了测试，使用DeepLabv2的LargeFOV和ResNet101作为baseline，在LargeFOV上添加BN层，对于两个模型，top hidden layer的通道数改为128.&lt;/p&gt;
&lt;p&gt;配置SCNN的是SCNN_DURL在&lt;span id=&quot;MathJax-Element-41-Frame&quot; class=&quot;MathJax&quot; data-mathml=&quot;&amp;lt;math xmlns=&amp;quot;http://www.w3.org/1998/Math/MathML&amp;quot;&amp;gt;&amp;lt;mi&amp;gt;w&amp;lt;/mi&amp;gt;&amp;lt;mo&amp;gt;=&amp;lt;/mo&amp;gt;&amp;lt;mn&amp;gt;9&amp;lt;/mn&amp;gt;&amp;lt;/math&amp;gt;&quot;&gt;&lt;span id=&quot;MathJax-Span-402&quot; class=&quot;math&quot;&gt;&lt;span id=&quot;MathJax-Span-403&quot; class=&quot;mrow&quot;&gt;&lt;span id=&quot;MathJax-Span-404&quot; class=&quot;mi&quot;&gt;w&lt;span id=&quot;MathJax-Span-405&quot; class=&quot;mo&quot;&gt;=&lt;span id=&quot;MathJax-Span-406&quot; class=&quot;mn&quot;&gt;9&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;MJX_Assistive_MathML&quot;&gt;w=9，结果如下：&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1192699/201804/1192699-20180425104946249-873549890.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;可以看到配置了SCNN的模型，在墙、杆等类别有着显著的提升，这是因为SCNN能够捕捉这些长距离连续物体。&lt;/p&gt;
&lt;p&gt;可视化结果如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1192699/201804/1192699-20180425105012890-1135659222.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;有一个有意思的地方，汽车的底部在训练期间是不做标记的，在LargeFOV上是缺失的，因为SCNN的信息传递，被分类成道路。&lt;/p&gt;
&lt;p&gt;论文也将SCNN方法与其他方法做了对比，也使用了VGG16为网络主干，结果如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1192699/201804/1192699-20180425105034205-151781894.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;可以看到SCNN效果还是可以的&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;　　论文提出了Spatial CNN，在空间层上实现信息的有效传递。SCNN易于融入到其他深度神经网络中做end-2-end训练。论文在车道检测和语义分割上测试了SCNN，结果表现SCNN可以有效的保持长距离连续结构，在语义分割其扩散效应对识别大型物体有利。&lt;/p&gt;
&lt;p&gt;　　此外，论文提出了一个车道检测的数据集，希望能够推动自动驾驶进一步发展。&lt;/p&gt;
</description>
<pubDate>Wed, 25 Apr 2018 02:52:00 +0000</pubDate>
<dc:creator>郭耀华</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/guoyaohua/p/8940871.html</dc:identifier>
</item>
<item>
<title>JAVAEE——BOS物流项目10：权限概述、常见的权限控制方式、apache shiro框架简介、基于shiro框架进行认证操作 - kent鹏</title>
<link>http://www.cnblogs.com/xieyupeng/p/8940403.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/xieyupeng/p/8940403.html</guid>
<description>&lt;p&gt;&lt;strong&gt;1&lt;span&gt;、演示权限&lt;/span&gt;&lt;span&gt;demo&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2&lt;span&gt;、权限概述&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p class=&quot;17&quot;&gt;n 认证&lt;/p&gt;
&lt;p class=&quot;17&quot;&gt;n 授权&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3&lt;span&gt;、常见的权限控制方式&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p class=&quot;17&quot;&gt;n url&lt;span&gt;拦截权限控制&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;17&quot;&gt;n 方法注解权限控制&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4&lt;span&gt;、创建权限数据模型&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p class=&quot;17&quot;&gt;n 权限表&lt;/p&gt;
&lt;p class=&quot;17&quot;&gt;n 角色表&lt;/p&gt;
&lt;p class=&quot;17&quot;&gt;n 用户表&lt;/p&gt;
&lt;p class=&quot;17&quot;&gt;n 角色权限关系表&lt;/p&gt;
&lt;p class=&quot;17&quot;&gt;n 用户角色关系表&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5&lt;span&gt;、&lt;/span&gt;&lt;span&gt;apache shiro&lt;/span&gt;&lt;span&gt;框架简介&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p class=&quot;17&quot;&gt;n 官网和下载&lt;/p&gt;
&lt;p class=&quot;17&quot;&gt;n 框架核心功能&lt;/p&gt;
&lt;p class=&quot;17&quot;&gt;n 框架调用流程&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;6&lt;span&gt;、基于&lt;/span&gt;&lt;span&gt;shiro&lt;/span&gt;&lt;span&gt;框架进行认证操作&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;



&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1135185/201804/1135185-20180425101039300-892127776.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;如何运行项目：&lt;/p&gt;
&lt;p&gt;&lt;span&gt;第一步：在&lt;/span&gt;eclipse&lt;span&gt;中引入上面的项目&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1135185/201804/1135185-20180425101047565-578711365.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;第二步：创建一个数据库privilegedemo&lt;span&gt;，并执行项目中的&lt;/span&gt;sql&lt;span&gt;脚本&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1135185/201804/1135185-20180425101054983-367508940.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1135185/201804/1135185-20180425101115229-1577029073.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;第三步：启动项目，可以完成自动建表，为&lt;/span&gt;itcast_user&lt;span&gt;表插入一条初始化数据&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1135185/201804/1135185-20180425101122727-1471142958.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt;&lt;span&gt;认证：系统提供的用于识别用户身份的功能，通常登录功能就是认证功能&lt;/span&gt;-----&lt;span&gt;让系统知道你是谁？？&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;授权：系统授予用户可以访问哪些功能的许可（证书）&lt;/span&gt;----&lt;span&gt;让系统知道你能做什么？？&lt;/span&gt;&lt;/p&gt;


&lt;h2&gt;4.1 &lt;strong&gt;URL&lt;span&gt;拦截权限控制&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;底层基于拦截器或者过滤器实现&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1135185/201804/1135185-20180425101146754-99988727.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;4.2 &lt;strong&gt;方法注解权限控制&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;底层基于代理技术实现，为&lt;/span&gt;Action&lt;span&gt;创建代理对象，由代理对象进行权限校验&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1135185/201804/1135185-20180425101159296-1241614245.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p class=&quot;17&quot;&gt;l 权限表&lt;/p&gt;
&lt;p class=&quot;17&quot;&gt;l 角色表&lt;/p&gt;
&lt;p class=&quot;17&quot;&gt;l 用户表&lt;/p&gt;
&lt;p class=&quot;17&quot;&gt;l 角色权限关系表&lt;/p&gt;
&lt;p class=&quot;17&quot;&gt;l 用户角色关系表&lt;/p&gt;

&lt;p&gt;角色就是权限的集合，引入角色表，是为了方便授权&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1135185/201804/1135185-20180425101217801-1373179420.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;



&lt;p&gt;&lt;span&gt;官网：&lt;/span&gt;shiro.apache.org&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1135185/201804/1135185-20180425101228727-1004429424.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p class=&quot;17&quot;&gt;l 下载文件：&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1135185/201804/1135185-20180425101238299-1190661491.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p class=&quot;17&quot;&gt;l shiro&lt;span&gt;框架的核心功能：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;认证&lt;/p&gt;
&lt;p&gt;授权&lt;/p&gt;
&lt;p&gt;会话管理&lt;/p&gt;
&lt;p&gt;加密&lt;/p&gt;

&lt;p class=&quot;17&quot;&gt;l shiro&lt;span&gt;框架认证流程&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1135185/201804/1135185-20180425101246018-718432146.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;Application Code&lt;span&gt;：应用程序代码，由开发人员负责开发的&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Subject&lt;span&gt;：框架提供的接口，代表当前用户对象&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;SecurityManager&lt;span&gt;：框架提供的接口，代表安全管理器对象&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Realm&lt;span&gt;：可以开发人员编写，框架也提供一些，类似于ＤＡＯ，用于访问权限数据&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1135185/201804/1135185-20180425101253227-1228179079.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt;&lt;span&gt;第一步：引入&lt;/span&gt;shiro&lt;span&gt;框架相关的&lt;/span&gt;&lt;span&gt;jar&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 引入shiro框架的依赖 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.apache.shiro&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;shiro-all&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;1.2.2&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;第二步：在&lt;/span&gt;web.xml&lt;span&gt;中配置&lt;/span&gt;&lt;span&gt;spring&lt;/span&gt;&lt;span&gt;框架提供的用于整合&lt;/span&gt;&lt;span&gt;shiro&lt;/span&gt;&lt;span&gt;框架的过滤器&lt;/span&gt;（&lt;strong&gt;&lt;span&gt;记得放在&lt;/span&gt;struct&lt;span&gt;过滤器的上方&lt;/span&gt;&lt;/strong&gt;）&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 配置shiro框架过滤器 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;filter&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;filter-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;shiroFilter&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;filter-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;filter-class&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.web.filter.DelegatingFilterProxy&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;filter-class&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;filter&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;filter-mapping&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;filter-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;shiroFilter&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;filter-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;url-pattern&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;/*&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;url-pattern&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;filter-mapping&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;启动&lt;/span&gt;tomcat&lt;span&gt;服务器，抛出异常：&lt;/span&gt;&lt;span&gt;spring&lt;/span&gt;&lt;span&gt;工厂中不存在一个名称为“&lt;/span&gt;&lt;span&gt;shiroFilter&lt;/span&gt;&lt;span&gt;”的&lt;/span&gt;&lt;span&gt;bean&lt;/span&gt;&lt;span&gt;对象&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1135185/201804/1135185-20180425101431673-81069214.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;第三步：在&lt;/span&gt;spring&lt;span&gt;配置文件中配置&lt;/span&gt;&lt;span&gt;bean&lt;/span&gt;&lt;span&gt;，&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;为&lt;/span&gt;&lt;span&gt;shiroFilter&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 配置shiro过滤器工厂bean &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;bean &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;shiroFilter&quot;&lt;/span&gt;&lt;span&gt; class&lt;/span&gt;&lt;span&gt;=&quot;org.apache.shiro.spring.web.ShiroFilterFactoryBean&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;securityManager&quot;&lt;/span&gt;&lt;span&gt; ref&lt;/span&gt;&lt;span&gt;=&quot;securityManager&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;loginUrl&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;/login.jsp&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;successUrl&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;/index.jsp&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;unauthorizedUrl&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;/unauthorized.jsp&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;filterChainDefinitions&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
                /css/** = anon
                /js/** = anon
                /images/** = anon
                /login.jsp* = anon
                /validatecode.jsp* = anon
                /userAction_login.action = anon
                /page_base_staff.action = perms[&quot;staff&quot;]
                /* = authc
            &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;bean&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;/**的意思是所有文件夹及里面的子文件夹&lt;br/&gt;/*是所有文件夹，不含子文件夹&lt;br/&gt;/是web项目的根目录&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;一级和多级的区别&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;



&lt;p&gt;框架提供的过滤器：anon代表可以匿名访问....&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1135185/201804/1135185-20180425101534259-2128040351.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;第四步：配置安全管理器&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;bean &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;securityManager&quot;&lt;/span&gt;&lt;span&gt; class&lt;/span&gt;&lt;span&gt;=&quot;org.apache.shiro.web.mgt.DefaultWebSecurityManager&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;bean&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;第五步：修改&lt;/span&gt;UserAction&lt;span&gt;中的&lt;/span&gt;&lt;span&gt;login&lt;/span&gt;&lt;span&gt;方法，使用&lt;/span&gt;&lt;span&gt;shiro&lt;/span&gt;&lt;span&gt;提供的方式进行认证操作&lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String login() {
        
        String key &lt;/span&gt;= (String) ServletActionContext.getRequest().getSession().getAttribute(&quot;key&quot;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (StringUtils.isNotBlank(key) &amp;amp;&amp;amp;&lt;span&gt; checkcode.equals(key)) {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 验证码正确&lt;/span&gt;
            Subject subject =&lt;span&gt; SecurityUtils.getSubject();
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;用户密码令牌&lt;/span&gt;
            AuthenticationToken token = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; UsernamePasswordToken(model.getUsername(),MD5Utils.md5(model.getPassword()));
            
            &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt;{
                subject.login(token);
                
                User u &lt;/span&gt;=&lt;span&gt; (User) subject.getPrincipal();
                
                ServletActionContext.getRequest().getSession().setAttribute(&lt;/span&gt;&quot;User&quot;&lt;span&gt;, u);
                
                
            }&lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt;(Exception e){
                e.printStackTrace();
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; LOGIN;
            }
            
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &quot;home&quot;&lt;span&gt;;
        } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 验证码错误&lt;/span&gt;
            &lt;span&gt;this&lt;/span&gt;.addActionError(&quot;输入的验证码错误！&quot;&lt;span&gt;);
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; LOGIN;
        }

    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;第六步：自定义&lt;/span&gt;realm&lt;span&gt;，并注入给安全管理器&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; BOSRealm &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; AuthorizingRealm{
    @Autowired
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; IUserDao userDao;
    
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;认证方法&lt;/span&gt;
    &lt;span&gt;protected&lt;/span&gt; AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken token) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; AuthenticationException {
        System.out.println(&lt;/span&gt;&quot;realm中的认证方法执行了。。。。&quot;&lt;span&gt;);
        UsernamePasswordToken mytoken &lt;/span&gt;=&lt;span&gt; (UsernamePasswordToken)token;
        String username &lt;/span&gt;=&lt;span&gt; mytoken.getUsername();
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;根据用户名查询数据库中的密码&lt;/span&gt;
        User user =&lt;span&gt; userDao.findUserByUserName(username);
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(user == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;){
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;用户名不存在&lt;/span&gt;
            &lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
        }
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果能查询到，再由框架比对数据库中查询到的密码和页面提交的密码是否一致&lt;/span&gt;
        AuthenticationInfo info = &lt;span&gt;new&lt;/span&gt; SimpleAuthenticationInfo(user, user.getPassword(), &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.getName());
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; info;
    }

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;授权方法&lt;/span&gt;
    &lt;span&gt;protected&lt;/span&gt;&lt;span&gt; AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principals) {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; TODO Auto-generated method stub&lt;/span&gt;
        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;最后修改一下spring配置文件里面的securityManger，注入Realm：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;bean &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;securityManager&quot;&lt;/span&gt;&lt;span&gt; class&lt;/span&gt;&lt;span&gt;=&quot;org.apache.shiro.web.mgt.DefaultWebSecurityManager&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;realm&quot;&lt;/span&gt;&lt;span&gt; ref&lt;/span&gt;&lt;span&gt;=&quot;bosRealm&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;bean&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    
    
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;bean &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;bosRealm&quot;&lt;/span&gt;&lt;span&gt; class&lt;/span&gt;&lt;span&gt;=&quot;com.xyp.bos.realm.BOSRealm&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

</description>
<pubDate>Wed, 25 Apr 2018 02:21:00 +0000</pubDate>
<dc:creator>kent鹏</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/xieyupeng/p/8940403.html</dc:identifier>
</item>
<item>
<title>如何为分布式系统优雅的更换RPC - haolujun</title>
<link>http://www.cnblogs.com/haolujun/p/8932778.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/haolujun/p/8932778.html</guid>
<description>&lt;p&gt;很多小伙伴都遇到过需要为分布式系统调用更换RPC的问题，为什么会遇到这种事呢？其实，在系统搭建初期，需求简单，架构简单，最重要的是请求量也少，所以很多系统都采用快速原型开发模式，对rpc的要求不高，随便找一个顺手的或者熟悉的rpc框架套进系统中即可。但是随着业务复杂度增高，系统承载的请求量增高，可能一开始所采用的RPC框架显现出一些致命的问题，比如大扇出问题。我们以Thrift为例。例如随着业务复杂度的增长，我们面临着如下的需求。&lt;br/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/261319/201804/261319-20180424184931827-1700326882.png&quot;/&gt;&lt;br/&gt;如图所示，每一次请求，上游服务都要获取下游A~Z一共26个服务的结果，然后把这26个服务的结果拼装返回给前端服务。有人说，26个服务是不是有些夸张了，我的系统中根本没有遇到过这个情况。这实际一点不夸张，一个业务复杂的系统经过服务拆分，最后拆成一些高内聚低耦合的独立服务，非常容易达到这样一个服务种类数，而且26还远远不是很多。那么遇到这种问题，传统的同步的RPC怎么解决这个问题呢？&lt;/p&gt;
&lt;p&gt;以Thrift为例，如果需要访问26个服务，为了保证请求处理速度，必须要并行访问各个下游服务（不能串行请求，因为这将导致 一次请求的响应时间至少为timeA + timeB + ...... + timeZ），那么我们只能通过多线程进行并发。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/261319/201804/261319-20180424190352479-1178252363.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;通过多线程并发请求，我们基本能够达到处理一次请求至多需要 max(timeA, timeB, ......, timeZ)，但是实际上要比这个稍多。看样子我们必须弄一个请求线程池，可是这个池子要多大呢？假如现在前端请求速率为 P，那么为了保证每个请求处理时间都尽可能快，我们需要一个大小为 26 * P的线程池。虽然，初看起来可能还可以应付，毕竟请求线程在发送网络请求后，会阻塞在IO，它会放弃CPU，从而使得计算线程获得CPU，不会浪费多少CPU的资源，但是当P太大就不好了。比如P为100或者1000，这个时候线程数过多可能就会造成CPU调度开销增大，因为它会增加CPU的线程切换负担。&lt;/p&gt;
&lt;p&gt;所以，我们更换RPC，当且仅当，当前的RPC已经造成了系统负担，对于业务量不大的系统，RPC的更换并没有必要，但是为了技术提升你也可以更换RPC，只不过收益可能不大。&lt;/p&gt;

&lt;p&gt;考虑到Thrift对于大扇出并不合适，我们可能需要下面这样工作模式的RPC。&lt;br/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/261319/201804/261319-20180424200620662-654942593.png&quot;/&gt;&lt;br/&gt;这种反应器模型（只是简单举例子）可以减少请求线程数。这种RPC使用系统的Epoll进行后端服务的请求以及数据的接收，这样无论多少请求，只使用一个线程完成，通过Epoll的机制在数据到来或者可发送的情况下通知用户进程，只不过最后需要把接收到的数据返回给计算线程使用。这种模型其实要比Thrift那种那好一些。我自己也在业余时间实现了一个简单的RPC框架：&lt;a href=&quot;http://www.cnblogs.com/haolujun/p/7527313.html&quot; class=&quot;uri&quot;&gt;http://www.cnblogs.com/haolujun/p/7527313.html&lt;/a&gt; ，比较粗糙但是足够小。&lt;br/&gt;还有有很多开源的RPC框架，fbthrift，GRPC都可以应对大扇出，找到适合你的系统，并且改动量和后期维护成本最低的那个。&lt;/p&gt;

&lt;p&gt;把系统迁移到新的RPC上，除了改动代码外，就是要做到兼容，系统在迁移过程中可能需要在两套RPC框架上运行，并且必须做到平滑迁移。例如，一般的分布式系统可能会长成如下的样子。&lt;br/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/261319/201804/261319-20180424193155532-159897275.png&quot;/&gt;&lt;br/&gt;服务B1~B4把自己的地址写入到ETCD中，但是由于我们一开始并未考虑到RPC的迁移，所以value对应的是服务的地址，没有服务使用的rpc类型等等。&lt;/p&gt;
&lt;h4 id=&quot;方案1-添加新key&quot;&gt;方案1 添加新key&lt;/h4&gt;
&lt;p&gt;对于A1~A2，B1~B4，可以先选择一部分进行平滑过渡，例如我们选择A1，B1~B2进行迁移。&lt;br/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/261319/201804/261319-20180424193609502-712949973.png&quot;/&gt;&lt;br/&gt;上线步骤如下：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;下线A1，B1，B2。&lt;/li&gt;
&lt;li&gt;更新A1配置，使其从新的key：service_new_rpc中读取后端服务列表。&lt;/li&gt;
&lt;li&gt;更新B1,B2配置，使其在新的key：service_new_rpc中注册自己。&lt;/li&gt;
&lt;li&gt;启动B1,B2。&lt;/li&gt;
&lt;li&gt;启动A1。&lt;/li&gt;
&lt;li&gt;对于A2，B3，B4重复如上步骤。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;通过这种方式，我们可以平滑的进行服务迁移。但是它的缺点很明显，需要一个新的key，而且后期还需要一点点把服务挪回到旧的key上。&lt;/p&gt;
&lt;h4 id=&quot;方案2-代码兼容&quot;&gt;方案2 代码兼容&lt;/h4&gt;
&lt;p&gt;这个方案必须更改一些解析代码，使其能够兼容新的ETCD中value的格式，如下图。&lt;br/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/261319/201804/261319-20180424194210269-2107815680.png&quot;/&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;首先改造A代码，使其能够兼容新地址解析格式。新地址格式在每个地址后加上RPC类型标识：T（Thrift），G（GRPC），新格式和旧格式的兼容很容易，只需在解析的时候找一下分割符，并判断分隔符最后一部分是T是G还是什么都没有，没有就默认为T。&lt;/li&gt;
&lt;li&gt;改造A代码，使其能够根据后端服务在ETCD中的RPC类型使用不同的RPC框架调用后端。&lt;/li&gt;
&lt;li&gt;改造B1~B4的配置，在ETCD中注册自己的时候把RPC类型顺便加上。&lt;/li&gt;
&lt;li&gt;改造B1~B2，使用新RPC作为服务端，并且在注册的时候把RPC类型设置为G。&lt;/li&gt;
&lt;li&gt;改造B3~B4，使用新RPC作为服务端，并且在注册的时候把RPC类型设置为G。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;通过这个步骤，我们就能做到RPC的平滑迁移。这个方式的缺点也有：需要同时维护两套RPC框架，直到其中一种RPC彻底下线。但是优点也有，没有增加新key。&lt;/p&gt;

&lt;p&gt;更换RPC并不像想象中的那样困难，只要理清前后逻辑，一点点的迁移，最终你的服务会全部搞定。最重要的问题是你的系统真的达到了非得换RPC的地步了么？&lt;/p&gt;
</description>
<pubDate>Wed, 25 Apr 2018 02:04:00 +0000</pubDate>
<dc:creator>haolujun</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/haolujun/p/8932778.html</dc:identifier>
</item>
</channel>
</rss>