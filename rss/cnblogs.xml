<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>HierarchyID 数据类型用法 - 悦光阴</title>
<link>http://www.cnblogs.com/ljhdo/p/4581349.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/ljhdo/p/4581349.html</guid>
<description>&lt;p&gt;&lt;span class=&quot;input&quot;&gt;树形层次结构（Hierarchy）经常出现在有结构的数据中，T-SQL新增数据类型&lt;/span&gt;&lt;span class=&quot;input&quot;&gt;HierarchyID， 其长度可变，用于存储&lt;span id=&quot;mt2&quot; class=&quot;sentence&quot; data-guid=&quot;92abe496f5464189db77fdc60976e369&quot; data-source=&quot;Use &amp;lt;span class=&amp;quot;input&amp;quot;&amp;gt;hierarchyid to represent position in a hierarchy.&quot;&gt;&lt;span class=&quot;input&quot;&gt;层次结构中的路径。HierarchyID表示的层次结构是树形的，&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;input&quot;&gt;&lt;span id=&quot;mt2&quot; class=&quot;sentence&quot; data-guid=&quot;92abe496f5464189db77fdc60976e369&quot; data-source=&quot;Use &amp;lt;span class=&amp;quot;input&amp;quot;&amp;gt;hierarchyid to represent position in a hierarchy.&quot;&gt;&lt;span id=&quot;mt3&quot; class=&quot;sentence&quot; data-guid=&quot;cba58b8db06eb8e9f0915fc00aae0e02&quot; data-source=&quot;A column of type &amp;lt;span class=&amp;quot;input&amp;quot;&amp;gt;hierarchyid does not automatically represent a tree.&quot;&gt;&lt;span id=&quot;mt4&quot; class=&quot;sentence&quot; data-guid=&quot;18bf0e9a171daa797a20ce6e3245b554&quot; data-source=&quot;It is up to the application to generate and assign &amp;lt;span class=&amp;quot;input&amp;quot;&amp;gt;hierarchyid values in such a way that the desired relationship between rows is reflected in the values.&quot;&gt;由应用程序来生成和分配 &lt;span class=&quot;input&quot;&gt;HierarchyID的&lt;/span&gt;&lt;span class=&quot;input&quot;&gt;值，建立父子节点之间的关系。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;input&quot;&gt;&lt;span class=&quot;sentence&quot; data-guid=&quot;92abe496f5464189db77fdc60976e369&quot; data-source=&quot;Use &amp;lt;span class=&amp;quot;input&amp;quot;&amp;gt;hierarchyid to represent position in a hierarchy.&quot;&gt;&lt;span class=&quot;sentence&quot; data-guid=&quot;cba58b8db06eb8e9f0915fc00aae0e02&quot; data-source=&quot;A column of type &amp;lt;span class=&amp;quot;input&amp;quot;&amp;gt;hierarchyid does not automatically represent a tree.&quot;&gt;&lt;span class=&quot;sentence&quot; data-guid=&quot;18bf0e9a171daa797a20ce6e3245b554&quot; data-source=&quot;It is up to the application to generate and assign &amp;lt;span class=&amp;quot;input&amp;quot;&amp;gt;hierarchyid values in such a way that the desired relationship between rows is reflected in the values.&quot;&gt;&lt;span class=&quot;input&quot;&gt;HierarchyID数据类型支持深度优先顺序的比较，&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;input&quot;&gt;&lt;span class=&quot;sentence&quot; data-guid=&quot;92abe496f5464189db77fdc60976e369&quot; data-source=&quot;Use &amp;lt;span class=&amp;quot;input&amp;quot;&amp;gt;hierarchyid to represent position in a hierarchy.&quot;&gt;&lt;span class=&quot;sentence&quot; data-guid=&quot;cba58b8db06eb8e9f0915fc00aae0e02&quot; data-source=&quot;A column of type &amp;lt;span class=&amp;quot;input&amp;quot;&amp;gt;hierarchyid does not automatically represent a tree.&quot;&gt;&lt;span class=&quot;sentence&quot; data-guid=&quot;18bf0e9a171daa797a20ce6e3245b554&quot; data-source=&quot;It is up to the application to generate and assign &amp;lt;span class=&amp;quot;input&amp;quot;&amp;gt;hierarchyid values in such a way that the desired relationship between rows is reflected in the values.&quot;&gt;&lt;span class=&quot;input&quot;&gt;对于两个HierarchyID值 a和b，a&amp;lt;b意味着，在深度优先遍历时，先遍历到a，后遍历到b，也就是说，值越小，越接近根节点。对Hierarchy数据类型创建索引，是按照深度优先，先左后右的顺序来排序的。左和右是根据节点的值来判断的，在同一深度上，值较小的节点在父节点的左边。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span class=&quot;input&quot;&gt;&lt;span class=&quot;sentence&quot; data-guid=&quot;92abe496f5464189db77fdc60976e369&quot; data-source=&quot;Use &amp;lt;span class=&amp;quot;input&amp;quot;&amp;gt;hierarchyid to represent position in a hierarchy.&quot;&gt;&lt;span class=&quot;sentence&quot; data-guid=&quot;cba58b8db06eb8e9f0915fc00aae0e02&quot; data-source=&quot;A column of type &amp;lt;span class=&amp;quot;input&amp;quot;&amp;gt;hierarchyid does not automatically represent a tree.&quot;&gt;&lt;span class=&quot;sentence&quot; data-guid=&quot;18bf0e9a171daa797a20ce6e3245b554&quot; data-source=&quot;It is up to the application to generate and assign &amp;lt;span class=&amp;quot;input&amp;quot;&amp;gt;hierarchyid values in such a way that the desired relationship between rows is reflected in the values.&quot;&gt;&lt;span class=&quot;input&quot;&gt;一，类型的赋值&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;HierarchyID数据类型存储的是单个节点在树形结构中的路径（Path），路径从根节点（Root Node）开始，根节点是“/”，路径以“/”结尾，使用整数表示一个节点。这意味着HierarchyID的值必须以“/”开头，以“/”结尾，“/”之间使用数值（正整数或正小数）标识一个元素，例如：“/”，“/1/2/”，“/1/2/3/”，&quot;/1/2.1/3&quot;。&lt;/p&gt;
&lt;p&gt;有3种赋值方式，通过字符串赋值，字符串转换和通过整数赋值。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;declare&lt;/span&gt; &lt;span&gt;@ha&lt;/span&gt;&lt;span&gt; HierarchyID
&lt;/span&gt;&lt;span&gt;declare&lt;/span&gt; &lt;span&gt;@hb&lt;/span&gt;&lt;span&gt; HierarchyID
&lt;/span&gt;&lt;span&gt;declare&lt;/span&gt; &lt;span&gt;@hc&lt;/span&gt;&lt;span&gt; HierarchyID

&lt;/span&gt;&lt;span&gt;set&lt;/span&gt; &lt;span&gt;@ha&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/1/2/3/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;span&gt;set&lt;/span&gt; &lt;span&gt;@hb&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;HierarchyID::Parse(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/1/2/3/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;set&lt;/span&gt; &lt;span&gt;@hc&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;0x5B5E&lt;/span&gt;

&lt;span&gt;select&lt;/span&gt; &lt;span&gt;@ha&lt;/span&gt; &lt;span&gt;as&lt;/span&gt; ha,&lt;span&gt;@hb&lt;/span&gt;.ToString() &lt;span&gt;as&lt;/span&gt; hb,&lt;span&gt;@hc&lt;/span&gt;.ToString() &lt;span&gt;as&lt;/span&gt; hc
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/628084/201708/628084-20170826141947136-1234033293.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span class=&quot;input&quot;&gt;&lt;span class=&quot;sentence&quot; data-guid=&quot;92abe496f5464189db77fdc60976e369&quot; data-source=&quot;Use &amp;lt;span class=&amp;quot;input&amp;quot;&amp;gt;hierarchyid to represent position in a hierarchy.&quot;&gt;&lt;span class=&quot;sentence&quot; data-guid=&quot;cba58b8db06eb8e9f0915fc00aae0e02&quot; data-source=&quot;A column of type &amp;lt;span class=&amp;quot;input&amp;quot;&amp;gt;hierarchyid does not automatically represent a tree.&quot;&gt;&lt;span class=&quot;sentence&quot; data-guid=&quot;18bf0e9a171daa797a20ce6e3245b554&quot; data-source=&quot;It is up to the application to generate and assign &amp;lt;span class=&amp;quot;input&amp;quot;&amp;gt;hierarchyid values in such a way that the desired relationship between rows is reflected in the values.&quot;&gt;&lt;span class=&quot;input&quot;&gt;二，&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;按深度优先顺序进行比较 &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;给定两个 hierarchyid 值 a 和 b，a&amp;lt;b 表示在对树进行深度优先遍历时，先找到 a，后找到 b。hierarchyid  数据类型的索引按深度优先顺序排序，在深度优先遍历中相邻的节点的存储位置也相邻。同级别的节点，左边节点小于右边节点，表示左边先被遍历到。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;declare&lt;/span&gt; &lt;span&gt;@ha&lt;/span&gt;&lt;span&gt; HierarchyID
&lt;/span&gt;&lt;span&gt;declare&lt;/span&gt; &lt;span&gt;@hb&lt;/span&gt;&lt;span&gt; HierarchyID
&lt;/span&gt;&lt;span&gt;declare&lt;/span&gt; &lt;span&gt;@hc&lt;/span&gt;&lt;span&gt; HierarchyID

&lt;/span&gt;&lt;span&gt;set&lt;/span&gt; &lt;span&gt;@ha&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;HierarchyID::Parse(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/1/2/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;set&lt;/span&gt; &lt;span&gt;@hb&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;HierarchyID::Parse(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/1/2/3/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;set&lt;/span&gt; &lt;span&gt;@hc&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;HierarchyID::Parse(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/1/2/4/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)

&lt;/span&gt;&lt;span&gt;select&lt;/span&gt; iif(&lt;span&gt;@ha&lt;/span&gt;&lt;span&gt;&amp;gt;=&lt;/span&gt;&lt;span&gt;@hb&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;&amp;gt;=&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;),iif(&lt;span&gt;@hb&lt;/span&gt;&lt;span&gt;&amp;gt;=&lt;/span&gt;&lt;span&gt;@hc&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;&amp;gt;=&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/628084/201708/628084-20170826143009730-1661351369.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;三，用于HierarchyID数据类型的函数&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1，获取当前值的级数（Level）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;调用GetLevel()查看HierarchyID的Level，值是从root节点开始的层数&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;declare&lt;/span&gt; &lt;span&gt;@ha&lt;/span&gt;&lt;span&gt; HierarchyID
&lt;/span&gt;&lt;span&gt;set&lt;/span&gt; &lt;span&gt;@ha&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;HierarchyID::Parse(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/1/2/3/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)

&lt;/span&gt;&lt;span&gt;select&lt;/span&gt; &lt;span&gt;@ha&lt;/span&gt;.GetLevel() &lt;span&gt;as&lt;/span&gt; &lt;span&gt;Level&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;2，获取根节点&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;静态方法GetRoot()，静态方法的调用格式：HierarchyID::GetRoot()&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;select&lt;/span&gt; HierarchyID::GetRoot().ToString() &lt;span&gt;as&lt;/span&gt; TootString,HierarchyID::GetRoot() &lt;span&gt;as&lt;/span&gt; RootHierarchyID
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images0.cnblogs.com/blog2015/628084/201506/171700346076741.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3，返回子节点&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;GetDescendant(childleft,childright)用以返回父级的一个子节点，返回的子节点和child是同level的。&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;declare&lt;/span&gt; &lt;span&gt;@sa&lt;/span&gt; &lt;span&gt;Nvarchar&lt;/span&gt;(&lt;span&gt;100&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;declare&lt;/span&gt; &lt;span&gt;@sb&lt;/span&gt; &lt;span&gt;Nvarchar&lt;/span&gt;(&lt;span&gt;100&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;declare&lt;/span&gt; &lt;span&gt;@sr&lt;/span&gt; &lt;span&gt;Nvarchar&lt;/span&gt;(&lt;span&gt;100&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;declare&lt;/span&gt; &lt;span&gt;@ha&lt;/span&gt;&lt;span&gt; HierarchyID
&lt;/span&gt;&lt;span&gt;declare&lt;/span&gt; &lt;span&gt;@hb&lt;/span&gt;&lt;span&gt; HierarchyID
&lt;/span&gt;&lt;span&gt;declare&lt;/span&gt; &lt;span&gt;@hr&lt;/span&gt;&lt;span&gt; HierarchyID

&lt;/span&gt;&lt;span&gt;set&lt;/span&gt; &lt;span&gt;@sa&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/1/2/3/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;span&gt;set&lt;/span&gt; &lt;span&gt;@sb&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/1/2/6/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;span&gt;set&lt;/span&gt; &lt;span&gt;@sr&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/1/2/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;span&gt;set&lt;/span&gt; &lt;span&gt;@ha&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;HierarchyID::Parse(&lt;span&gt;@sa&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;set&lt;/span&gt; &lt;span&gt;@hb&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;HierarchyID::Parse(&lt;span&gt;@sb&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;set&lt;/span&gt; &lt;span&gt;@hr&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;HierarchyID::Parse(&lt;span&gt;@sr&lt;/span&gt;&lt;span&gt;)

&lt;/span&gt;&lt;span&gt;select&lt;/span&gt;  &lt;span&gt;@hr&lt;/span&gt;.GetDescendant(&lt;span&gt;null&lt;/span&gt;,&lt;span&gt;null&lt;/span&gt;&lt;span&gt;).ToString(),
        &lt;/span&gt;&lt;span&gt;@hr&lt;/span&gt;.GetDescendant(&lt;span&gt;@ha&lt;/span&gt;,&lt;span&gt;null&lt;/span&gt;&lt;span&gt;).ToString(),
        &lt;/span&gt;&lt;span&gt;@hr&lt;/span&gt;.GetDescendant(&lt;span&gt;@ha&lt;/span&gt;,&lt;span&gt;@hb&lt;/span&gt;).ToString()
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images0.cnblogs.com/blog2015/628084/201506/171711082487627.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;如果LeftChild是‘/1/2/3’，RightChild是‘/1/2/4’，需要在这两个节点之间插入一个新的节点，需要如何处理?表示节点的数字，并不一定必须是正整数，小数也可以，如下，NewChild=’/1/2/3.1/‘；&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;declare&lt;/span&gt; &lt;span&gt;@sa&lt;/span&gt; &lt;span&gt;Nvarchar&lt;/span&gt;(&lt;span&gt;100&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;declare&lt;/span&gt; &lt;span&gt;@sb&lt;/span&gt; &lt;span&gt;Nvarchar&lt;/span&gt;(&lt;span&gt;100&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;declare&lt;/span&gt; &lt;span&gt;@sr&lt;/span&gt; &lt;span&gt;Nvarchar&lt;/span&gt;(&lt;span&gt;100&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;declare&lt;/span&gt; &lt;span&gt;@ha&lt;/span&gt;&lt;span&gt; HierarchyID
&lt;/span&gt;&lt;span&gt;declare&lt;/span&gt; &lt;span&gt;@hb&lt;/span&gt;&lt;span&gt; HierarchyID
&lt;/span&gt;&lt;span&gt;declare&lt;/span&gt; &lt;span&gt;@hr&lt;/span&gt;&lt;span&gt; HierarchyID

&lt;/span&gt;&lt;span&gt;set&lt;/span&gt; &lt;span&gt;@sa&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/1/2/3/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;span&gt;set&lt;/span&gt; &lt;span&gt;@sb&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/1/2/4/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;span&gt;set&lt;/span&gt; &lt;span&gt;@sr&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/1/2/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;span&gt;set&lt;/span&gt; &lt;span&gt;@ha&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;HierarchyID::Parse(&lt;span&gt;@sa&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;set&lt;/span&gt; &lt;span&gt;@hb&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;HierarchyID::Parse(&lt;span&gt;@sb&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;set&lt;/span&gt; &lt;span&gt;@hr&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;HierarchyID::Parse(&lt;span&gt;@sr&lt;/span&gt;&lt;span&gt;)

&lt;/span&gt;&lt;span&gt;select&lt;/span&gt;    &lt;span&gt;@hr&lt;/span&gt;.GetDescendant(&lt;span&gt;null&lt;/span&gt;,&lt;span&gt;null&lt;/span&gt;&lt;span&gt;).ToString(),
        &lt;/span&gt;&lt;span&gt;@hr&lt;/span&gt;.GetDescendant(&lt;span&gt;@ha&lt;/span&gt;,&lt;span&gt;null&lt;/span&gt;&lt;span&gt;).ToString(),
        &lt;/span&gt;&lt;span&gt;@hr&lt;/span&gt;.GetDescendant(&lt;span&gt;@ha&lt;/span&gt;,&lt;span&gt;@hb&lt;/span&gt;).ToString()
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images0.cnblogs.com/blog2015/628084/201506/171750548888994.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4，判断两个节点之间的父子关系&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;判断是否是节点的后代，child.IsDescendantOf(parent)，如果是，返回1，如果不是，返回0&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;declare&lt;/span&gt; &lt;span&gt;@sa&lt;/span&gt; &lt;span&gt;Nvarchar&lt;/span&gt;(&lt;span&gt;100&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;declare&lt;/span&gt; &lt;span&gt;@sb&lt;/span&gt; &lt;span&gt;Nvarchar&lt;/span&gt;(&lt;span&gt;100&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;declare&lt;/span&gt; &lt;span&gt;@sr&lt;/span&gt; &lt;span&gt;Nvarchar&lt;/span&gt;(&lt;span&gt;100&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;declare&lt;/span&gt; &lt;span&gt;@ha&lt;/span&gt;&lt;span&gt; HierarchyID
&lt;/span&gt;&lt;span&gt;declare&lt;/span&gt; &lt;span&gt;@hb&lt;/span&gt;&lt;span&gt; HierarchyID
&lt;/span&gt;&lt;span&gt;declare&lt;/span&gt; &lt;span&gt;@hr&lt;/span&gt;&lt;span&gt; HierarchyID

&lt;/span&gt;&lt;span&gt;set&lt;/span&gt; &lt;span&gt;@sa&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/1/2/3/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;span&gt;set&lt;/span&gt; &lt;span&gt;@sb&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/1/2/6/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;span&gt;set&lt;/span&gt; &lt;span&gt;@sr&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/1/2/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;span&gt;set&lt;/span&gt; &lt;span&gt;@ha&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;HierarchyID::Parse(&lt;span&gt;@sa&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;set&lt;/span&gt; &lt;span&gt;@hb&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;HierarchyID::Parse(&lt;span&gt;@sb&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;set&lt;/span&gt; &lt;span&gt;@hr&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;HierarchyID::Parse(&lt;span&gt;@sr&lt;/span&gt;&lt;span&gt;)

&lt;/span&gt;&lt;span&gt;select&lt;/span&gt;    &lt;span&gt;@ha&lt;/span&gt;.IsDescendantOf(&lt;span&gt;@hr&lt;/span&gt;&lt;span&gt;),
        &lt;/span&gt;&lt;span&gt;@hb&lt;/span&gt;.IsDescendantOf(&lt;span&gt;@hr&lt;/span&gt;&lt;span&gt;),
        &lt;/span&gt;&lt;span&gt;@ha&lt;/span&gt;.IsDescendantOf(&lt;span&gt;@hb&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images0.cnblogs.com/blog2015/628084/201506/171714589666940.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;四，HierarchyID的值的更新&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;更新HierarchyID的值，必须级联地更新与该节点相关的子节点的值，这是由于HierarchyID类型自身的局限性导致的。&lt;/p&gt;
&lt;p&gt;HierarchyID数据类型具有以下局限性： &lt;/p&gt;
&lt;ul&gt;&lt;li&gt;类型为 HierarchyID的列不会自动表示树。由应用程序来生成和分配 hierarchyid 值，使行与行之间的所需关系反映在这些值中。 某些应用程序可能具有 hierarchyid 类型的列，该列指示在另一个表中定义的层次结构中的位置。&lt;/li&gt;
&lt;li&gt;由应用程序来管理生成和分配 hierarchyid 值时的并发情况。不能保证列中的 hierarchyid 值是唯一的，除非应用程序使用唯一键约束或应用程序自身通过自己的逻辑来强制实现唯一性。&lt;/li&gt;
&lt;li&gt;由 hierarchyid 值表示的层次结构关系不是像外键关系那样强制实现的。  可能会出现下面这种层次结构关系而且有时这种关系是合理的：A 具有子级 B，然后删除了 A，导致 B 与一条不存在的记录之间存在关系。 如果这种行为不可接受，应用程序在删除父级之前必须先查询其是否有后代&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;1，创建数据源&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;create&lt;/span&gt; &lt;span&gt;table&lt;/span&gt;&lt;span&gt; dbo.emph2
( 
idpath hierarchyid &lt;/span&gt;&lt;span&gt;not&lt;/span&gt; &lt;span&gt;null&lt;/span&gt; &lt;span&gt;primary&lt;/span&gt; &lt;span&gt;key&lt;/span&gt;&lt;span&gt;,
id &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; &lt;span&gt;not&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;,
parentid &lt;/span&gt;&lt;span&gt;as&lt;/span&gt; idpath.GetAncestor(&lt;span&gt;1&lt;/span&gt;) persisted &lt;span&gt;foreign&lt;/span&gt; &lt;span&gt;key&lt;/span&gt; &lt;span&gt;references&lt;/span&gt;&lt;span&gt; dbo.emph2(idpath),
descr &lt;/span&gt;&lt;span&gt;varchar&lt;/span&gt;(&lt;span&gt;100&lt;/span&gt;&lt;span&gt;)
)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images0.cnblogs.com/blog2015/628084/201506/171758594043806.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;idpath=’/1/2/6/‘的子孙节点如下图&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;select&lt;/span&gt; e.idpath.ToString() &lt;span&gt;as&lt;/span&gt; IDPath,e.id,e.parentid.ToString() &lt;span&gt;as&lt;/span&gt;&lt;span&gt; ParentIDPath,e.descr
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt;&lt;span&gt; dbo.emph2 e 
&lt;/span&gt;&lt;span&gt;where&lt;/span&gt; e.idpath.IsDescendantOf(HierarchyID::Parse(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/1/2/6/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;))&lt;span&gt;=&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images0.cnblogs.com/blog2015/628084/201506/171812520763187.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2，把子节点变成另一个节点的父节点&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;例如，把idpath=’/1/2/6/‘ 的节点删除，并将其子节点的父节点变更为idpath=’/1/2/7/‘&lt;/p&gt;
&lt;p&gt;由于存在外键关系，必须先变更子节点的父节点，然后再删除idpath=’/1/2/6/‘ 的节点。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
&lt;span&gt;--&lt;/span&gt;&lt;span&gt;delete child notes&lt;/span&gt;&lt;span&gt;
--&lt;/span&gt;&lt;span&gt;select e.idpath.ToString() as IDPath,e.id,e.parentid.ToString() as ParentIDPath,e.descr&lt;/span&gt;
&lt;span&gt;update&lt;/span&gt; e &lt;span&gt;set&lt;/span&gt; e.idpath&lt;span&gt;=&lt;/span&gt;HierarchyID::Parse(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/1/2/7/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;cast&lt;/span&gt;(e.id &lt;span&gt;as&lt;/span&gt; &lt;span&gt;varchar&lt;/span&gt;)&lt;span&gt;+&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt;&lt;span&gt; dbo.emph2 e
&lt;/span&gt;&lt;span&gt;where&lt;/span&gt; e.idpath.IsDescendantOf(HierarchyID::Parse(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/1/2/6/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;))&lt;span&gt;=&lt;/span&gt;&lt;span&gt;1&lt;/span&gt; &lt;span&gt;and&lt;/span&gt; e.idpath&lt;span&gt;!=&lt;/span&gt;HierarchyID::Parse(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/1/2/6/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)

&lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;delete parent note&lt;/span&gt;
&lt;span&gt;delete&lt;/span&gt; dbo.emph2 &lt;span&gt;where&lt;/span&gt; idpath&lt;span&gt;=&lt;/span&gt;HierarchyID::Parse(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/1/2/6/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)

&lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;check&lt;/span&gt;
&lt;span&gt;select&lt;/span&gt; e.idpath.ToString() &lt;span&gt;as&lt;/span&gt; IDPath,e.id,e.parentid.ToString() &lt;span&gt;as&lt;/span&gt;&lt;span&gt; ParentIDPath,e.descr
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt;&lt;span&gt; dbo.emph2 e
&lt;/span&gt;&lt;span&gt;where&lt;/span&gt; e.idpath.IsDescendantOf(HierarchyID::Parse(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/1/2/7/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;))&lt;span&gt;=&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images0.cnblogs.com/blog2015/628084/201506/171813426233478.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3，变更父节点&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;例如，把idpath=’/1/2/6/‘的节点的父节点变更，其子节点仍然是其子节点。&lt;/p&gt;
&lt;p&gt;思路是新建一个节点，并将子节点都挂在新节点下。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;45&quot;&gt;
&lt;pre&gt;
&lt;span&gt;--&lt;/span&gt;&lt;span&gt;create new node&lt;/span&gt;
&lt;span&gt;insert&lt;/span&gt; &lt;span&gt;into&lt;/span&gt;&lt;span&gt; dbo.emph2(idpath,id,descr)
&lt;/span&gt;&lt;span&gt;select&lt;/span&gt; HierarchyID::Parse(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/1/3/6/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;),id,descr
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt;&lt;span&gt; dbo.emph2 e
&lt;/span&gt;&lt;span&gt;where&lt;/span&gt; e.idpath&lt;span&gt;=&lt;/span&gt;HierarchyID::Parse(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/1/2/6/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)

&lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;delete child notes&lt;/span&gt;&lt;span&gt;
--&lt;/span&gt;&lt;span&gt;select e.idpath.ToString() as IDPath,e.id,e.parentid.ToString() as ParentIDPath,e.descr&lt;/span&gt;
&lt;span&gt;update&lt;/span&gt; e &lt;span&gt;set&lt;/span&gt; e.idpath&lt;span&gt;=&lt;/span&gt;HierarchyID::Parse(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/1/3/6/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;cast&lt;/span&gt;(e.id &lt;span&gt;as&lt;/span&gt; &lt;span&gt;varchar&lt;/span&gt;)&lt;span&gt;+&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt;&lt;span&gt; dbo.emph2 e
&lt;/span&gt;&lt;span&gt;where&lt;/span&gt; e.idpath.IsDescendantOf(HierarchyID::Parse(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/1/2/6/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;))&lt;span&gt;=&lt;/span&gt;&lt;span&gt;1&lt;/span&gt; &lt;span&gt;and&lt;/span&gt; e.idpath&lt;span&gt;!=&lt;/span&gt;HierarchyID::Parse(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/1/2/6/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)

&lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;delete parent note&lt;/span&gt;
&lt;span&gt;delete&lt;/span&gt; dbo.emph2 &lt;span&gt;where&lt;/span&gt; idpath&lt;span&gt;=&lt;/span&gt;HierarchyID::Parse(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/1/2/6/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)

&lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;check&lt;/span&gt;
&lt;span&gt;select&lt;/span&gt; e.idpath.ToString() &lt;span&gt;as&lt;/span&gt; IDPath,e.id,e.parentid.ToString() &lt;span&gt;as&lt;/span&gt;&lt;span&gt; ParentIDPath,e.descr
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt;&lt;span&gt; dbo.emph2 e
&lt;/span&gt;&lt;span&gt;where&lt;/span&gt; e.idpath.IsDescendantOf(HierarchyID::Parse(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/1/3/6/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;))&lt;span&gt;=&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images0.cnblogs.com/blog2015/628084/201506/171827291852691.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4，定向插入新的节点&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;由于节点之间存在先后顺序，使用GetDescendant(ChildLeft,ChildRight)保证顺序。&lt;/p&gt;
&lt;p&gt;在节点 idpath=’/1/2/6/‘ 的子节点 id=15，id=16之间插入一个新的子节点，新的子节点的id=36，descr=‘E1136’，思路是使用GetDescendant(ChildLeft,ChildRight)获取新的IDPath，然后插入到表中。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;declare&lt;/span&gt; &lt;span&gt;@id&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;
&lt;span&gt;declare&lt;/span&gt; &lt;span&gt;@descr&lt;/span&gt; &lt;span&gt;Nvarchar&lt;/span&gt;(&lt;span&gt;100&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;declare&lt;/span&gt; &lt;span&gt;@sa&lt;/span&gt; &lt;span&gt;Nvarchar&lt;/span&gt;(&lt;span&gt;100&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;declare&lt;/span&gt; &lt;span&gt;@sb&lt;/span&gt; &lt;span&gt;Nvarchar&lt;/span&gt;(&lt;span&gt;100&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;declare&lt;/span&gt; &lt;span&gt;@sr&lt;/span&gt; &lt;span&gt;Nvarchar&lt;/span&gt;(&lt;span&gt;100&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;declare&lt;/span&gt; &lt;span&gt;@hnew&lt;/span&gt;&lt;span&gt; HierarchyID

&lt;/span&gt;&lt;span&gt;set&lt;/span&gt; &lt;span&gt;@id&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;36&lt;/span&gt;
&lt;span&gt;set&lt;/span&gt; &lt;span&gt;@descr&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;E1136&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;span&gt;set&lt;/span&gt; &lt;span&gt;@sa&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/1/2/6/15/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;span&gt;set&lt;/span&gt; &lt;span&gt;@sb&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/1/2/6/16/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;span&gt;set&lt;/span&gt; &lt;span&gt;@sr&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/1/2/6/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;

&lt;span&gt;set&lt;/span&gt; &lt;span&gt;@hnew&lt;/span&gt;&lt;span&gt;=&lt;/span&gt; HierarchyID::Parse(&lt;span&gt;@sr&lt;/span&gt;).GetDescendant(HierarchyID::Parse(&lt;span&gt;@sa&lt;/span&gt;),HierarchyID::Parse(&lt;span&gt;@sb&lt;/span&gt;&lt;span&gt;))

&lt;/span&gt;&lt;span&gt;insert&lt;/span&gt; &lt;span&gt;into&lt;/span&gt;&lt;span&gt; dbo.emph2(idpath,id,descr)
&lt;/span&gt;&lt;span&gt;values&lt;/span&gt;(&lt;span&gt;@hnew&lt;/span&gt;,&lt;span&gt;@id&lt;/span&gt;,&lt;span&gt;@descr&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;select&lt;/span&gt; e.idpath.ToString() &lt;span&gt;as&lt;/span&gt; IDPath,e.id,e.parentid.ToString() &lt;span&gt;as&lt;/span&gt;&lt;span&gt; ParentIDPath,e.descr
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt;&lt;span&gt; dbo.emph2 e
&lt;/span&gt;&lt;span&gt;where&lt;/span&gt; e.idpath.IsDescendantOf(HierarchyID::Parse(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/1/2/6/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;))&lt;span&gt;=&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;
&lt;span&gt;order&lt;/span&gt; &lt;span&gt;by&lt;/span&gt; e.idpath
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images0.cnblogs.com/blog2015/628084/201506/171851526381731.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;从排序的结果集中可以看出，id=36的节点，处于id=15和id=16的节点之间，通过GetDescendant(ChildLeft,ChildRight)实现了顺序。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;五， 遍历&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;HierarchyID类型的数据，很容易实现广度优先遍历和深度优先遍历&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1，广度优先遍历是指查询层次结构中相同级别的节点&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;select&lt;/span&gt; idpath.ToString() &lt;span&gt;as&lt;/span&gt; IDPath,id,parentid.ToString() &lt;span&gt;as&lt;/span&gt;&lt;span&gt; ParentIDPath,descr 
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; dbo.emph2 &lt;span&gt;where&lt;/span&gt; idpath.GetLevel()&lt;span&gt;=&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images0.cnblogs.com/blog2015/628084/201506/171909373736383.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2，深度优先遍历是指遍历一个节点的所有子节点&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;select&lt;/span&gt; idpath.ToString() &lt;span&gt;as&lt;/span&gt; IDPath,id,parentid.ToString() &lt;span&gt;as&lt;/span&gt;&lt;span&gt; ParentIDPath,descr 
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt;&lt;span&gt; dbo.emph2 
&lt;/span&gt;&lt;span&gt;where&lt;/span&gt; idpath.IsDescendantOf(HierarchyID::Parse(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/1/2/6/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;))&lt;span&gt;=&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images0.cnblogs.com/blog2015/628084/201506/171911561077765.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;参考文档：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/sql/t-sql/data-types/hierarchyid-data-type-method-reference&quot; target=&quot;_blank&quot;&gt;hierarchyid data type method reference&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Wed, 31 Jan 2018 07:31:00 +0000</pubDate>
<dc:creator>悦光阴</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/ljhdo/p/4581349.html</dc:identifier>
</item>
<item>
<title>selenium+python自动化测试系列(一)：登录 - janehost</title>
<link>http://www.cnblogs.com/LOVEYU/p/8392269.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/LOVEYU/p/8392269.html</guid>
<description>&lt;p&gt;    最近接手商城的项目，针对后台测试，功能比较简单，但是流程比较繁多，涉及到前后台的交叉测试。在对整个项目进行第一轮测试完成之后，考虑以后回归测试任务比较重，为了减轻回归测试的工作量，所以考虑后台可以进行部分自动化测试。&lt;/p&gt;
&lt;p&gt;    之前一个项目使用robotframework进行回归测试，了解了python语言，所以这次就使用python+selenium进行自动化回归测试了。&lt;/p&gt;
&lt;h2 id=&quot;配置环境&quot;&gt;配置环境&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;python2.7&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;运行工具pycharm2017&lt;/p&gt;
&lt;h2 id=&quot;流程说明&quot;&gt;流程说明&lt;/h2&gt;
&lt;p&gt;登录操作步骤说明&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;ol&gt;&lt;li&gt;打开登录url，如http://192.168.10.6/login&lt;/li&gt;
&lt;li&gt;在用户名输入框中输入登录的用户名，如test001&lt;/li&gt;
&lt;li&gt;在密码是输入框中输入密码，如testgood001&lt;/li&gt;
&lt;li&gt;点击登录页面的登录按钮，&lt;/li&gt;
&lt;li&gt;登录成功页面，断言登录成功&lt;/li&gt;
&lt;/ol&gt;&lt;h2 id=&quot;线性操作&quot;&gt;线性操作&lt;/h2&gt;
&lt;p&gt;根据上面的步骤提示下面代码显示登录操作，如下&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;#coding=utf-8
from selenium import webdriver
import unittest
import sys
reload(sys)
sys.setdefaultencoding('utf8')
class TestLogin(unittest.TestCase):
# 指定浏览器
    def setUp(self):
        self.driver = webdriver.Firefox()
    # 打开url
        self.driver.get(&quot;http://192.168.10.6/login&quot;)

    # 登录操作
    def test_login(self):
        title = self.driver.title
        print title
        now_url = self.driver.current_url
        print now_url
        username = &quot;test001&quot;
        password = &quot;testgood001&quot;
        # 执行登录操作
        #用户名的定位
        self.driver.find_element_by_id(&quot;username&quot;).clear()
        self.driver.find_element_by_id(&quot;username&quot;).send_keys(username)
        #密码的定位
        self.driver.find_element_by_id(&quot;password&quot;).clear()
        self.driver.find_element_by_id(&quot;password&quot;).send_keys(password)
        # 点击登录
        self.driver.find_element_by_css_selector(&quot;.btn.btn-success.btn-block&quot;).click()
        # 登录成功断言
        login_name = self.driver.find_element_by_xpath('html/body/div[3]/div[2]/ul/li[1]/a/strong').text
        login_name = login_name.strip('您好：')
        assert login_name == username

    # 关闭浏览器
    def tearDown(self):
            self.driver.quit()


if __name__ == &quot;__main__&quot;:
unittest.main()&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;    上面代码显示的是登录成功的正常用例；实际操作中，针对登录不仅仅有正常用例，还有异常用例，如用户名为空，密码为空，用户名错误，密码错误等；我们不能一个用例编写一个py文件，如果这样操作从本质而言相反增加了工作量。&lt;/p&gt;
&lt;p&gt;    既然问题出来了，那么如何解决这个问题呢？&lt;/p&gt;
&lt;p&gt;    思路：针对登录而言，所有的步骤都是一样的，唯一不同的就是登录的用户名和密码，所以我们可以封装登录步骤，然后只需要专注不同测试用例中的登录的用户名和密码的验证即可。&lt;/p&gt;
&lt;p&gt;    这里为了后续测试的简便，使用了selenium中的po模式，即针对每个功能的操作页面进行封装，而后在针对该页面进行测试用例的编写。如这里的登录页面，我们需要针对登录页面进行封装操作，把登录页面中的用户名、密码和登录按钮的定位进行封装，这样用例中只关注输入不同的用户名和密码进行验证即可。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;说明：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;    这里浏览器的打开和关闭也进行了封装，放在myunit.py中。&lt;/p&gt;
&lt;h2 id=&quot;po模式设计&quot;&gt;po模式设计&lt;/h2&gt;
&lt;p&gt;    整体设计的结构如图所示&lt;br/&gt;&lt;img src=&quot;https://i.imgur.com/Hxq2L3R.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;    models/driver.py中封装了打开浏览器的操作，这里使用的火狐浏览器进行操作。代码如下&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;# -*-coding:utf-8-*-
# _author_ = &quot;janehost&quot;
from selenium.webdriver import Remote
from selenium import webdriver
import sys
# 启动浏览器
reload(sys)
sys.setdefaultencoding('utf8')
def browser():
    driver = webdriver.Firefox()
    return driver


if __name__ == '__main__':
        dr = browser()
        dr.get(&quot;http://192.168.10.6/login&quot;)
        dr.quit()&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;    models/myunit.py中主要封装了浏览器的启动和关闭的操作，代码如下&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;# -*-coding:utf-8-*-
# _author_ = &quot;janehost&quot;
import unittest,sys
from selenium import webdriver
from driver import browser
reload(sys)
sys.setdefaultencoding('utf8')

class MyTest(unittest.TestCase):
        def setUp(self):
            self.driver = browser()
            self.driver.implicitly_wait(10)
            self.driver.maximize_window()

        def tearDown(self):
            self.driver.quit()


if __name__ == '__main__':
        unittest.main()&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;    models/function.py中主要封装了截图的操作方法，代码参考如下&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;# -*-coding:utf-8-*-
# _author_ = &quot;janehost&quot;
from selenium import webdriver
import os,sys
reload(sys)
sys.setdefaultencoding('utf8')
# 截图函数
def insert_img(driver, file_name):
        base_dir = os.path.dirname(os.path.dirname(__file__))
        base_dir = str(base_dir)
        base_dir = base_dir.replace('\\', '/')
        base = base_dir.split('test_case')[0]
        file_path = base + &quot;report/image/&quot; + file_name
        driver.get_screenshot_as_file(file_path)


if __name__ == '__main__':
        driver = webdriver.Firefox()
        driver.get(&quot;http://192.168.10.6/login&quot;)
        insert_img(driver, 'login.jpg')
        driver.quit()&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;    下面就是po模式的重点，针对页面的封装，首先创建一个page页面的基本页面，page_obj\base.py代码如下&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;# -*-coding:utf-8-*-
# _author_ = &quot;janehost&quot;


from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
import sys
reload(sys)
sys.setdefaultencoding('utf8')
class Page(object):

'''
页面基础类，用于所有页面的继承
'''

    base_url = &quot;http://192.168.10.6/login&quot;

    def __init__(self, selenium_driver, base_url=base_url, parent=None):
    self.base_url = base_url
    self.driver = selenium_driver
    self.timeout = 30
    self.parent = parent

def _open(self, url):
    url = self.base_url + url
    self.driver.get(url)
    assert self.on_page(), 'Did not land on %s' % url

def open(self):
    self._open(self.url)

def on_page(self):
    #return (self.driver.current_url).encode('utf-8') == (self.base_url + self.url)
    return self.driver.current_url.encode('utf-8') == (self.base_url + self.url)

def find_element(self, *loc):
    # return self.driver.find_element(*loc)
    try:
    # 确保所有元素是可见的
    # 注意：以下入参为元组的元素，需要加*。python存在这种特性，就是将入参放在元组里。
    #WebDriverWait(self.driver,10).until(lambda driver: driver.find_element(*loc).is_displayed())
    # 注意：以下入参本身是元组，不需要加*
        WebDriverWait(self.driver, 10).until(EC.visibility_of_element_located(loc))
        return self.driver.find_element(*loc)
    except:
        print u&quot;%s 页面中未能找到 %s 元素&quot;%(self, loc)

def find_elements(self, *loc):
    return self.driver.find_elements(*loc)

def script(self, src):
    return self.driver.execute_script(src)

def swtich_frame(self, loc):
    return self.driver.swith_to_frame(loc)

def send_keys(self, loc, value, clear_first=True, click_first=True):
    try:
    # getattr相当于self.loc
        loc = getattr(self, &quot;_%s&quot; % loc)
        if click_first:
            self.find_element(*loc).click()
        if clear_first:
            self.find_element(*loc).clear()
        self.find_element(*loc).send_keys(value)
    except ArithmeticError:
        print u&quot;%s 页面中未能找到 %s 元素&quot; % (self, loc)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;    登录页面元素的封装page_obj\loginPage.py，代码如下&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;# -*-coding:utf-8-*-
# _author_ = &quot;janehost&quot;
&quot;&quot;&quot;
思路：创建登录页面对象，对用户登录页面上的用户名/密码输入框、登录按钮和
提示信息等元素的定位进行封装。
&quot;&quot;&quot;
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.common.by import By
from base import Page
from time import sleep

class login(Page):

    '''
    用户登录界面
    '''
    url = '/'
    # 登录用户名的定位
    login_username_loc = (By.ID, 'username')
    # 登录密码的定位
    login_password_loc = (By.ID,'password')
    # 登录按钮的定位
    login_button_loc = (By.CSS_SELECTOR,'.btn.btn-success.btn-block')
    # 登录错误提示的定位
    login_error_loc = (By.ID,'error_msg')
    # 登录成功用户名信息
    login_user_success_loc = (By.XPATH, 'html/body/div[3]/div[2]/ul/li[1]/a/strong')

    # 登录用户名
    def login_username(self, username):
        self.find_element(*self.login_username_loc).clear()
        self.find_element(*self.login_username_loc).send_keys(username)

    # 登录密码
    def login_password(self, password):
        self.find_element(*self.login_password_loc).clear()
        self.find_element(*self.login_password_loc).send_keys(password)

    # 登录按钮
    def login_button(self):
    self.find_element(*self.login_button_loc).click()

    # 统一登录入口
    def user_login(self, username=&quot;testuser01&quot;, password=&quot;testgood001&quot;):
    # 获取用户名和页面登录
        self.open()
        self.login_username(username)
        self.login_password(password)
        self.login_button()
        sleep(3)

    # 登录错误提示信息
    def login_error_hint(self):
        return self.find_element(*self.login_error_loc).text

    # 登录成功用户名信息
    def login_user_success(self):
        #return self.find_element(*self.login_user_success_loc).text
        username = self.find_element(*self.login_user_success_loc).text
        username = username.strip('您好：')
        return username&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;    登录测试用例信息test_case\login_sta.py，代码如下&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;# -*-coding:utf-8-*-
# _author_ = &quot;janehost&quot;
from time import sleep
import unittest, random, sys
from models import myunit, function
from page_obj.loginPage import login
sys.path.append(&quot;./models&quot;)
sys.path.append(&quot;./page_obj&quot;)
reload(sys)
sys.setdefaultencoding('utf8')
class loginTest(myunit.MyTest):

    '''
    测试用户登录
    '''

    def user_login_verify(self, username=&quot;&quot;, password=&quot;&quot;):
        login(self.driver).user_login(username, password)

    def test_login1(self):
    '''用户名、密码为空登录'''
        self.user_login_verify()
        po = login(self.driver)
        self.assertEqual(po.login_error_hint(), '用户名或密码不能为空')
        function.insert_img(self.driver, &quot;user_pawd_empty.jpg&quot;)

    def test_login2(self):
    '''用户名正确，密码为空登录验证'''
        self.user_login_verify(username=&quot;ces&quot;)
        po = login(self.driver)
        self.assertEqual(po.login_error_hint(), &quot;用户名或密码不能为空&quot;)
        function.insert_img(self.driver,&quot;pawd_empty.jpg&quot;)

    def test_login3(self):
    '''用户名为空，密码正确'''
        self.user_login_verify(password=&quot;12334ddf&quot;)
        po = login(self.driver)
        self.assertEqual(po.login_error_hint(),&quot;用户名或密码不能为空&quot;)
        function.insert_img(self.driver, &quot;user_empty.jpg&quot;)

    def test_login4(self):
    '''用户名和密码不匹配'''
        character = random.choice('abcdefghijklmnopqrstuvwxyz')
        username = &quot;sdw&quot; + character
        self.user_login_verify(username=username, password=&quot;2sdfd&quot;)
        po = login(self.driver)
        self.assertEqual(po.login_error_hint(), &quot;用户名或密码错误&quot;)
        function.insert_img(self.driver, &quot;user_pass_error.jpg&quot;)

    def test_login5(self):
    '''用户名、密码正确'''
        self.user_login_verify(username=&quot;adtest&quot; , password=&quot;4dscsdx&quot;)
        sleep(3)
        po = login(self.driver)
        self.assertEqual(po.login_user_success(), u'adtest')
        function.insert_img(self.driver, &quot;user_pwd_true.jpg&quot;)


if __name__ == '__main__':
    unittest.main()&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;    这样登录的测试用例就完成了。使用po模式之后，如果页面ui发生变化，我们只需要修改元素的定位方法，而不需要改动整个框架，相对而言比较快捷。&lt;/p&gt;
&lt;p&gt;参考：&lt;/p&gt;
&lt;blockquote readability=&quot;1.3432835820896&quot;&gt;
&lt;p&gt;小小的博客 [&lt;a href=&quot;http://www.cnblogs.com/xiaozhiblog/p/5378723.html&quot; class=&quot;uri&quot;&gt;http://www.cnblogs.com/xiaozhiblog/p/5378723.html&lt;/a&gt;]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;selenium2 python自动化测试实战(虫师)&lt;/p&gt;
&lt;/blockquote&gt;
</description>
<pubDate>Wed, 31 Jan 2018 06:57:00 +0000</pubDate>
<dc:creator>janehost</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/LOVEYU/p/8392269.html</dc:identifier>
</item>
<item>
<title>C语言的函数调用过程 - 你好，bigshot</title>
<link>http://www.cnblogs.com/zhonglongbo/p/8392026.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/zhonglongbo/p/8392026.html</guid>
<description>&lt;p&gt;&lt;span&gt;&lt;span&gt;从汇编的角度解析函数调用过程&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;看看下面这个简单函数的调用过程：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; Add(&lt;span&gt;int&lt;/span&gt; x,&lt;span&gt;int&lt;/span&gt;&lt;span&gt; y)
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;     &lt;span&gt;int&lt;/span&gt; sum = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;     sum = x +&lt;span&gt; y;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; sum;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; 
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; main ()
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;     &lt;span&gt;int&lt;/span&gt; a = &lt;span&gt;10&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;     &lt;span&gt;int&lt;/span&gt; b = &lt;span&gt;12&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;     &lt;span&gt;int&lt;/span&gt; ret = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;     ret =&lt;span&gt; Add(a,b);
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;今天主要用汇编代码去讲述这个过程，首先介绍几个寄存器和简单的汇编指令的意思。 &lt;br/&gt;先看几个函数调用过程涉及到的寄存器： &lt;br/&gt;（1）esp：栈指针寄存器(extended stack pointer)，其内存放着一个指针，该指针永远指向系统栈最上面一个栈帧的栈顶。 &lt;br/&gt;（2）ebp：基址指针寄存器(extended base pointer)，其内存放着一个指针，该指针永远指向系统栈最上面一个栈帧的底部。 &lt;br/&gt;（3）eax 是”累加器”(accumulator), 它是很多加法乘法指令的缺省寄存器。 &lt;br/&gt;（4）ebx 是”基地址”(base)寄存器, 在内存寻址时存放基地址。 &lt;br/&gt;（5）ecx 是计数器(counter), 是重复(REP)前缀指令和LOOP指令的内定计数器。 &lt;br/&gt;（6）edx 则总是被用来放整数除法产生的余数。 &lt;br/&gt;（7）esi/edi分别叫做”源/目标索引寄存器”(source/destination index),因为在很多字符串操作指令中, DS:ESI指向源串,而ES:EDI指向目标串. &lt;br/&gt;在32位平台上，ESP每次减少4字节。 &lt;br/&gt;再看几条简单的汇编指令： &lt;br/&gt;mov ：数据传送指令，也是最基本的编程指令，用于将一个数据从源地址传送到目标地址（寄存器间的数据传送本质上也是一样的） &lt;br/&gt;sub：减法指令 &lt;br/&gt;lea：取偏移地址 &lt;br/&gt;push：实现压入操作的指令是PUSH指令 &lt;br/&gt;pop：实现弹出操作的指令 &lt;br/&gt;call：用于保存当前指令的下一条指令并跳转到目标函数。 &lt;br/&gt;这些指令当然能看懂最好，可以让你很深刻的理解函数调用过程，不能看懂就只能通过我的描述去理解了。 &lt;br/&gt;进行分析之前，先来了解下内存地址空间的分布： &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1313477/201801/1313477-20180131141601296-1560416967.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;栈空间是向低地址增长的，主要是用来保存函数栈帧。 栈空间的大小很有限，仅有区区几MB大小 &lt;br/&gt;汇编代码实现： &lt;br/&gt;main函数汇编代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;52&quot;&gt;
&lt;pre&gt;
&lt;span&gt;int&lt;/span&gt;&lt;span&gt; main ()
{
&lt;/span&gt;&lt;span&gt;011B26E0&lt;/span&gt;  &lt;span&gt;push&lt;/span&gt;&lt;span&gt;        ebp  
&lt;/span&gt;&lt;span&gt;011B26E1&lt;/span&gt;  &lt;span&gt;mov&lt;/span&gt;&lt;span&gt;         ebp,esp 
&lt;/span&gt;&lt;span&gt;011B26E3&lt;/span&gt;  &lt;span&gt;sub&lt;/span&gt;&lt;span&gt;         esp,0E4h 
&lt;/span&gt;&lt;span&gt;011B26E9&lt;/span&gt;  &lt;span&gt;push&lt;/span&gt;&lt;span&gt;        ebx  
&lt;/span&gt;&lt;span&gt;011B26EA&lt;/span&gt;  &lt;span&gt;push&lt;/span&gt;&lt;span&gt;        esi  
&lt;/span&gt;&lt;span&gt;011B26EB&lt;/span&gt;  &lt;span&gt;push&lt;/span&gt;&lt;span&gt;        edi  
&lt;/span&gt;&lt;span&gt;011B26EC&lt;/span&gt;  &lt;span&gt;lea&lt;/span&gt;&lt;span&gt;         edi,[ebp-0E4h] 
&lt;/span&gt;&lt;span&gt;011B26F2&lt;/span&gt;  &lt;span&gt;mov&lt;/span&gt;&lt;span&gt;         ecx,39h 
&lt;/span&gt;&lt;span&gt;011B26F7&lt;/span&gt;  &lt;span&gt;mov&lt;/span&gt;&lt;span&gt;         eax,0CCCCCCCCh 
&lt;/span&gt;&lt;span&gt;011B26FC&lt;/span&gt;  &lt;span&gt;rep&lt;/span&gt; stos    dword ptr &lt;span&gt;es:&lt;/span&gt;&lt;span&gt;[edi] 
    &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; a = &lt;span&gt;10&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;011B26FE&lt;/span&gt;  &lt;span&gt;mov&lt;/span&gt;&lt;span&gt;         dword ptr [a],0Ah 
    &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; b = &lt;span&gt;12&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;011B2705&lt;/span&gt;  &lt;span&gt;mov&lt;/span&gt;&lt;span&gt;         dword ptr [b],0Ch 
    &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; &lt;span&gt;ret&lt;/span&gt; = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;011B270C&lt;/span&gt;  &lt;span&gt;mov&lt;/span&gt;         dword ptr [&lt;span&gt;ret&lt;/span&gt;],&lt;span&gt;0&lt;/span&gt; 
    &lt;span&gt;ret&lt;/span&gt; = &lt;span&gt;Add&lt;/span&gt;(a,b)&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;011B2713&lt;/span&gt;  &lt;span&gt;mov&lt;/span&gt;&lt;span&gt;         eax,dword ptr [b] 
&lt;/span&gt;&lt;span&gt;011B2716&lt;/span&gt;  &lt;span&gt;push&lt;/span&gt;&lt;span&gt;        eax  
&lt;/span&gt;&lt;span&gt;011B2717&lt;/span&gt;  &lt;span&gt;mov&lt;/span&gt;&lt;span&gt;         ecx,dword ptr [a] 
&lt;/span&gt;&lt;span&gt;011B271A&lt;/span&gt;  &lt;span&gt;push&lt;/span&gt;&lt;span&gt;        ecx  
&lt;/span&gt;&lt;span&gt;011B271B&lt;/span&gt;  &lt;span&gt;call&lt;/span&gt;        @ILT+&lt;span&gt;640&lt;/span&gt;&lt;span&gt;(_Add) (11B1285h) 
&lt;/span&gt;&lt;span&gt;011B2720&lt;/span&gt;  &lt;span&gt;add&lt;/span&gt;         esp,&lt;span&gt;8&lt;/span&gt; 
&lt;span&gt;011B2723&lt;/span&gt;  &lt;span&gt;mov&lt;/span&gt;         dword ptr [&lt;span&gt;ret&lt;/span&gt;&lt;span&gt;],eax 
    return &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;011B2726&lt;/span&gt;  &lt;span&gt;xor&lt;/span&gt;&lt;span&gt;         eax,eax 
}
&lt;/span&gt;&lt;span&gt;011B2728&lt;/span&gt;  &lt;span&gt;pop&lt;/span&gt;&lt;span&gt;         edi  
&lt;/span&gt;&lt;span&gt;011B2729&lt;/span&gt;  &lt;span&gt;pop&lt;/span&gt;&lt;span&gt;         esi  
&lt;/span&gt;&lt;span&gt;011B272A&lt;/span&gt;  &lt;span&gt;pop&lt;/span&gt;&lt;span&gt;         ebx  
&lt;/span&gt;&lt;span&gt;011B272B&lt;/span&gt;  &lt;span&gt;add&lt;/span&gt;&lt;span&gt;         esp,0E4h 
&lt;/span&gt;&lt;span&gt;011B2731&lt;/span&gt;  &lt;span&gt;cmp&lt;/span&gt;&lt;span&gt;         ebp,esp 
&lt;/span&gt;&lt;span&gt;011B2733&lt;/span&gt;  &lt;span&gt;call&lt;/span&gt;        @ILT+&lt;span&gt;450&lt;/span&gt;&lt;span&gt;(__RTC_CheckEsp) (11B11C7h) 
&lt;/span&gt;&lt;span&gt;011B2738&lt;/span&gt;  &lt;span&gt;mov&lt;/span&gt;&lt;span&gt;         esp,ebp 
&lt;/span&gt;&lt;span&gt;011B273A&lt;/span&gt;  &lt;span&gt;pop&lt;/span&gt;&lt;span&gt;         ebp  
&lt;/span&gt;&lt;span&gt;011B273B&lt;/span&gt;  &lt;span&gt;ret&lt;/span&gt;            
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Add函数汇编代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;47&quot;&gt;
&lt;pre&gt;
&lt;span&gt;int&lt;/span&gt; &lt;span&gt;Add&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; x,&lt;span&gt;int&lt;/span&gt;&lt;span&gt; y)
{
&lt;/span&gt;&lt;span&gt;011B26A0&lt;/span&gt;  &lt;span&gt;push&lt;/span&gt;&lt;span&gt;        ebp  
&lt;/span&gt;&lt;span&gt;011B26A1&lt;/span&gt;  &lt;span&gt;mov&lt;/span&gt;&lt;span&gt;         ebp,esp 
&lt;/span&gt;&lt;span&gt;011B26A3&lt;/span&gt;  &lt;span&gt;sub&lt;/span&gt;&lt;span&gt;         esp,0CCh 
&lt;/span&gt;&lt;span&gt;011B26A9&lt;/span&gt;  &lt;span&gt;push&lt;/span&gt;&lt;span&gt;        ebx  
&lt;/span&gt;&lt;span&gt;011B26AA&lt;/span&gt;  &lt;span&gt;push&lt;/span&gt;&lt;span&gt;        esi  
&lt;/span&gt;&lt;span&gt;011B26AB&lt;/span&gt;  &lt;span&gt;push&lt;/span&gt;&lt;span&gt;        edi  
&lt;/span&gt;&lt;span&gt;011B26AC&lt;/span&gt;  &lt;span&gt;lea&lt;/span&gt;&lt;span&gt;         edi,[ebp-0CCh] 
&lt;/span&gt;&lt;span&gt;011B26B2&lt;/span&gt;  &lt;span&gt;mov&lt;/span&gt;&lt;span&gt;         ecx,33h 
&lt;/span&gt;&lt;span&gt;011B26B7&lt;/span&gt;  &lt;span&gt;mov&lt;/span&gt;&lt;span&gt;         eax,0CCCCCCCCh 
&lt;/span&gt;&lt;span&gt;011B26BC&lt;/span&gt;  &lt;span&gt;rep&lt;/span&gt; stos    dword ptr &lt;span&gt;es:&lt;/span&gt;&lt;span&gt;[edi] 
    &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; sum = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;011B26BE&lt;/span&gt;  &lt;span&gt;mov&lt;/span&gt;         dword ptr [sum],&lt;span&gt;0&lt;/span&gt;&lt;span&gt; 
    sum = x + y&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;011B26C5&lt;/span&gt;  &lt;span&gt;mov&lt;/span&gt;&lt;span&gt;         eax,dword ptr [x] 
&lt;/span&gt;&lt;span&gt;011B26C8&lt;/span&gt;  &lt;span&gt;add&lt;/span&gt;&lt;span&gt;         eax,dword ptr [y] 
&lt;/span&gt;&lt;span&gt;011B26CB&lt;/span&gt;  &lt;span&gt;mov&lt;/span&gt;&lt;span&gt;         dword ptr [sum],eax 
    return sum&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;011B26CE&lt;/span&gt;  &lt;span&gt;mov&lt;/span&gt;&lt;span&gt;         eax,dword ptr [sum] 
}
&lt;/span&gt;&lt;span&gt;011B26D1&lt;/span&gt;  &lt;span&gt;pop&lt;/span&gt;&lt;span&gt;         edi  
&lt;/span&gt;&lt;span&gt;011B26D2&lt;/span&gt;  &lt;span&gt;pop&lt;/span&gt;&lt;span&gt;         esi  
&lt;/span&gt;&lt;span&gt;011B26D3&lt;/span&gt;  &lt;span&gt;pop&lt;/span&gt;&lt;span&gt;         ebx  
&lt;/span&gt;&lt;span&gt;011B26D4&lt;/span&gt;  &lt;span&gt;mov&lt;/span&gt;&lt;span&gt;         esp,ebp 
&lt;/span&gt;&lt;span&gt;011B26D6&lt;/span&gt;  &lt;span&gt;pop&lt;/span&gt;&lt;span&gt;         ebp  
&lt;/span&gt;&lt;span&gt;011B26D7&lt;/span&gt;  &lt;span&gt;ret&lt;/span&gt;              
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;下面图中详细描述了调用过程地址变化（此处所有地址是取自32位windows系统vs编辑器下的调试过程。）： &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1313477/201801/1313477-20180131141947109-219187133.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;过程描述： &lt;br/&gt;1、参数拷贝（参数实例化）。 &lt;br/&gt;2、保存当前指令的下一条指令，并跳转到被调函数。 &lt;br/&gt;&lt;strong&gt;这些操作均在main函数中进行。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;接下来是调用Add函数并执行的一些操作，包括： &lt;br/&gt;1、移动ebp、esp形成新的栈帧结构。 &lt;br/&gt;2、压栈（push）形成临时变量并执行相关操作。 &lt;br/&gt;3、return一个值。 &lt;br/&gt;&lt;strong&gt;这些操作在Add函数中进行。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;被调函数完成相关操作后需返回到原函数中执行下一条指令，操作如下： &lt;br/&gt;1、出栈（pop）。 &lt;br/&gt;2、回复main函数的栈帧结构。（pop ） &lt;br/&gt;3、返回main函数 &lt;br/&gt;&lt;strong&gt;这些操作也在Add函数中进行。&lt;/strong&gt; 至此，在main函数中调用Add函数的整个过程已经完成。 &lt;br/&gt;总结起来整个过程就三步： &lt;br/&gt;1）根据调用的函数名找到函数入口； &lt;br/&gt;2）在栈中审请调用函数中的参数及函数体内定义的变量的内存空间 &lt;br/&gt;3）函数执行完后，释放函数在栈中的审请的参数和变量的空间，最后返回值（如果有的话） &lt;br/&gt;&lt;strong&gt;如果你学了微机原理，你会想到cpu中断处理过程，是的，函数调用过程和中断处理过程一模一样。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;函数调用约定： &lt;br/&gt;这里再补充一下各种调用规定的基本内容。 &lt;br/&gt;_stdcall调用约定&lt;/p&gt;
&lt;p&gt;所有参数按照从右到左压入堆栈，由被调用的子程序清理堆栈&lt;/p&gt;
&lt;p&gt;_cdecl调用约定（The C default calling convention，C调用规定）&lt;/p&gt;
&lt;p&gt;参数也是从右到左压入堆栈，但由调用者清理堆栈。&lt;/p&gt;
&lt;p&gt;_fastcall调用约定&lt;/p&gt;
&lt;p&gt;顾名思义，_fastcall的目的主要是为了更快的调用函数。它主要依靠寄存器传递参数，剩下的参数依然按照从右到左的顺序压入堆栈，并由被调用的子程序清理堆栈。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;本篇博文是按调用约定__stdcall 调用函数。&lt;/strong&gt;&lt;/p&gt;

</description>
<pubDate>Wed, 31 Jan 2018 06:23:00 +0000</pubDate>
<dc:creator>你好，bigshot</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/zhonglongbo/p/8392026.html</dc:identifier>
</item>
<item>
<title>Asp.Net MVC 路由 - JoeSnail</title>
<link>http://www.cnblogs.com/JoeSnail/p/8391812.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/JoeSnail/p/8391812.html</guid>
<description>&lt;p&gt;当用户通过URL访问网站时，要把用户请求的URL映射到正确的应用程序的操作上。那么如何实现这个映射--Routing（路由）。&lt;/p&gt;
&lt;p&gt;路由并不专属于&lt;code&gt;Asp.Net MVC&lt;/code&gt;,而是建立在&lt;code&gt;Asp.Net Framework&lt;/code&gt;之上的一个组件，所以所有依赖&lt;code&gt;Asp.Net Framework&lt;/code&gt;的都可以使用路由。如WebForms,API等,但是Asp.Net MVC 和路由密切相关。&lt;/p&gt;
&lt;p&gt;图：路由关系图&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/691772/201801/691772-20180131134026187-1551738222.png&quot;/&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;h2 id=&quot;路由工作流程&quot;&gt;路由工作流程&lt;/h2&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;Asp.Net是一个管道模型，一个Http请求先经过&lt;code&gt;HttpModule&lt;/code&gt;，再通过&lt;code&gt;HttpHandlerFactory&lt;/code&gt;，创建一个对应的&lt;code&gt;HttpHandler&lt;/code&gt;处理对应的请求。所以对Asp.Net的所有的扩展也是通过注册这些管道事件来实现的。因为路由是建立在&lt;code&gt;Asp.Net Framework&lt;/code&gt;之上的，所以路由也是注册实现了管道事件。但是是通过注册&lt;code&gt;HttpModule&lt;/code&gt;的&lt;code&gt;PostResolveRequestCache&lt;/code&gt;事件来实现的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/691772/201801/691772-20180131134035062-541615819.png&quot;/&gt;&lt;/p&gt;
&lt;h4 id=&quot;为什么不注册httphandler来实现呢&quot;&gt;为什么不注册HttpHandler来实现呢？&lt;/h4&gt;
&lt;p&gt;因为：&lt;/p&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;如果把请求的管道模型比作一个运行的火车的话，&lt;code&gt;HttpHandler&lt;/code&gt;是请求火车的目的地。&lt;code&gt;HttpModule&lt;/code&gt;是一个沿途的站点，要在终点前分析好这个请求是到哪个目的地。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;HttpHandler&lt;/code&gt;多用来处理响应处理。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;HttpModule&lt;/code&gt;多用来处理通用性和响应内容无关的功能。&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;p&gt;小结：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;路由就是一个实现了&lt;code&gt;IHttpModule&lt;/code&gt;接口的&lt;code&gt;UrlRoutingModule&lt;/code&gt;的&lt;code&gt;HttpModule&lt;/code&gt;,在管道事件中拦截请求，分析Url，匹配路由，再交给&lt;code&gt;HttpHandler&lt;/code&gt;处理的过程。&lt;/strong&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;h3 id=&quot;路由如何拦截请求&quot;&gt;路由如何拦截请求&lt;/h3&gt;
&lt;p&gt;上述认识到路由是通过实现了接口&lt;code&gt;IHttpModule&lt;/code&gt;的类--&lt;code&gt;UrlRoutingModule&lt;/code&gt;来注册管道事件，在该类中实现了请求拦截，路由匹配，创建指定HttpHandler。&lt;/p&gt;
&lt;p&gt;所以路由组件中&lt;code&gt;UrlRoutingModule&lt;/code&gt;就是是关键。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://referencesource.microsoft.com/#System.Web/Routing/UrlRoutingModule.cs,9b4115ad16e4f4a1&quot;&gt;UrlRoutingModule源码在线查看&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;通过该类的源代码可以发现。&lt;code&gt;UrlRoutingModule&lt;/code&gt;注册了&lt;code&gt;PostResolveRequestCache&lt;/code&gt;事件。注册该事件，纯粹是因为要在&lt;code&gt;HttpHandler&lt;/code&gt;目的地创建之前执行路由。因为在管道事件中&lt;code&gt;PostMapRequestHandler&lt;/code&gt;事件是把请求交给&lt;code&gt;HttpHandler&lt;/code&gt;来处理。而&lt;code&gt;PostResolveRequestCache&lt;/code&gt;在该事件之前。(&lt;a href=&quot;https://msdn.microsoft.com/en-us/library/ms178473.aspx&quot;&gt;Asp.Net管道事件&lt;/a&gt;)&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;    //UrlRoutingModule源码
 ...
 //注册事件PostResolveRequestCache 
 application.PostResolveRequestCache += OnApplicationPostResolveRequestCache;
 ...
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;查看&lt;code&gt;UrlRoutingModule&lt;/code&gt;代码，发现该类的一个&lt;code&gt;PostResolveRequestCache&lt;/code&gt;方法，实现了路由的工作。&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;    // UrlRoutingModule的本地方法
   public virtual void PostResolveRequestCache(HttpContextBase context) {
            // 根据HttpContext的Url匹配路由对象，该对象包含了Controller，Action和参数
            // Match the incoming URL against the route table
            RouteData routeData = RouteCollection.GetRouteData(context);
 
            // Do nothing if no route found
            if (routeData == null) {
                return;
            }

            //由匹配的路由对象创建一个MVCRouteHandler
            // If a route was found, get an IHttpHandler from the route's RouteHandler
            IRouteHandler routeHandler = routeData.RouteHandler;
            if (routeHandler == null) {
                throw new InvalidOperationException(
                    String.Format(
                        CultureInfo.CurrentCulture,
                        SR.GetString(SR.UrlRoutingModule_NoRouteHandler)));
            }
 
            // This is a special IRouteHandler that tells the routing module to stop processing
            // routes and to let the fallback handler handle the request.
            if (routeHandler is StopRoutingHandler) {
                return;
            }
 
            //封装匹配的路由对象和HttpContext，创建新的RequestContext
            RequestContext requestContext = new RequestContext(context, routeData);
 
            // Dev10 766875 Adding RouteData to HttpContext
            context.Request.RequestContext = requestContext;
            
            //获取MVCHandler
            IHttpHandler httpHandler = routeHandler.GetHttpHandler(requestContext);
            if (httpHandler == null) {
                throw new InvalidOperationException(
                    String.Format(
                        CultureInfo.CurrentUICulture,
                        SR.GetString(SR.UrlRoutingModule_NoHttpHandler),
                        routeHandler.GetType()));
            }
 
            if (httpHandler is UrlAuthFailureHandler) {
                if (FormsAuthenticationModule.FormsAuthRequired) {
                    UrlAuthorizationModule.ReportUrlAuthorizationFailure(HttpContext.Current, this);
                    return;
                }
                else {
                    throw new HttpException(401, SR.GetString(SR.Assess_Denied_Description3));
                }
            }
 
            // Remap IIS7 to our handler
            context.RemapHandler(httpHandler);
        }
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;即：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;根据&lt;code&gt;HttpContext&lt;/code&gt;，路由匹配规则，匹配一个&lt;code&gt;RouteData&lt;/code&gt;对象。&lt;/li&gt;
&lt;li&gt;调用&lt;code&gt;RouteData&lt;/code&gt;对象的&lt;code&gt;RouteHandler&lt;/code&gt;获取&lt;code&gt;IRouteHandler&lt;/code&gt;的&lt;code&gt;MVCRouteHandler&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;由匹配的&lt;code&gt;RouteData&lt;/code&gt;和&lt;code&gt;HttpContext&lt;/code&gt;创建&lt;code&gt;RequestContext&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;由2的&lt;code&gt;MVCRouteHandler&lt;/code&gt;和3的&lt;code&gt;RequestContext&lt;/code&gt;创建&lt;code&gt;IHttpHandler&lt;/code&gt;-&lt;code&gt;MVCHandler&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;HttpHandler&lt;/code&gt;管道事件执行。&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;流程如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/691772/201801/691772-20180131134055687-324463820.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;之后&lt;code&gt;HttpHandler&lt;/code&gt;的运行可以参考如下整个生命周期：&lt;/p&gt;
&lt;p&gt;Asp.Net MVC 生命周期图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/691772/201801/691772-20180131134106921-559485026.png&quot;/&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;h2 id=&quot;路由的使用&quot;&gt;路由的使用&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Global.asax&lt;/code&gt;的&lt;code&gt;MVCApplication&lt;/code&gt;是管理Asp.Net应用程序生命周期的管道事件的类。在类中实现管道事件或方法会在对应的管道事件中调用。&lt;/p&gt;
&lt;hr/&gt;&lt;h4 id=&quot;配置路由&quot;&gt;配置路由&lt;/h4&gt;
&lt;p&gt;在&lt;code&gt;App_Start&lt;/code&gt;文件下，新建&lt;code&gt;RouteConfig.cs&lt;/code&gt;文件里配置路由信息。通过静态方法&lt;code&gt;RouteCollection.MapRoute()&lt;/code&gt;配置路由信息。&lt;/p&gt;
&lt;p&gt;如：&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;public class RouteConfig
{
    public static void RegisterRoutes(RouteCollection routes)
    {
        routes.IgnoreRoute(&quot;{resource}.axd/{*pathInfo}&quot;);//忽略该模式的URL

        routes.MapRoute(
            name: &quot;Default&quot;,//路由名称
            url: &quot;{controller}/{action}/{id}&quot;,//路由模板
            defaults: new { controller = &quot;Home&quot;, action = &quot;Index&quot;, id = UrlParameter.Optional }//路由默认值，参数id可以为空
        );
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;注册路由&quot;&gt;注册路由&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Global.asax&lt;/code&gt;的&lt;code&gt;MVCApplication&lt;/code&gt;继承&lt;code&gt;HttpApplication&lt;/code&gt;。而&lt;code&gt;HttpApplication&lt;/code&gt;则是管理整个管道周期的实例。在该类中通过注册事件，或方法可以在管道事件中被调用。注册路由到应用程序就是在&lt;code&gt;Application_Start()&lt;/code&gt;方法中实现。&lt;/p&gt;
&lt;p&gt;如：&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;public class MvcApplication : System.Web.HttpApplication
{
    protected void Application_Start()
    {
        AreaRegistration.RegisterAllAreas();
        FilterConfig.RegisterGlobalFilters(GlobalFilters.Filters);
        RouteConfig.RegisterRoutes(RouteTable.Routes);//路由注册到应用程序
        BundleConfig.RegisterBundles(BundleTable.Bundles);
    }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;hr/&gt;&lt;h4 id=&quot;url匹配&quot;&gt;URL匹配&lt;/h4&gt;
&lt;p&gt;在配置路由里创建了一个路由名为&lt;code&gt;Default&lt;/code&gt;的路由。该&lt;code&gt;Default&lt;/code&gt;路由由&lt;code&gt;controller&lt;/code&gt;，&lt;code&gt;action&lt;/code&gt;，&lt;code&gt;id&lt;/code&gt;三部分组成，其中&lt;code&gt;id&lt;/code&gt;为可选参数。&lt;/p&gt;
&lt;p&gt;该路由可以匹配如下url：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;xxx.com/home/index/1&lt;/li&gt;
&lt;li&gt;xxx.com/home/index&lt;/li&gt;
&lt;li&gt;xxx.com/home&lt;/li&gt;
&lt;li&gt;xxx.com/&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;这些URL都会映射到如下Action：&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;public class HomeController :Controller
{
    public ActionResult Index()
    {
        return View();
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;或&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;//在路由中id参数是可为空的，所以对于值类型的参数必须是可空的值类型。
public class HomeController :Controller
{
    public ActionResult Index(int? id)
    {
        return View();
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;并且该&lt;code&gt;Action&lt;/code&gt;的参数名称需要和&lt;code&gt;Route&lt;/code&gt;中的参数（id）一致。即也是id。才可以匹配&lt;code&gt;xxx.com/home/index/1&lt;/code&gt;否则只能通过url传参匹配&lt;code&gt;xxx.com/home/index?myparam=1&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;如：如果定义的Action如下&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;public class HomeController :Controller
{
    public ActionResult Index(string str)
    {
        return View();
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;输入&lt;code&gt;xxx.com/home/index/1&lt;/code&gt;时，会认为参数为空，即&lt;code&gt;str&lt;/code&gt;并没有被赋值，但是依然会调用&lt;code&gt;index&lt;/code&gt;方法，只不过是认为&lt;code&gt;str&lt;/code&gt;为空。但是当你通过url传参请求时&lt;code&gt;xxx.com/home/index?str=hello&lt;/code&gt;，是可以匹配到这个&lt;code&gt;Action&lt;/code&gt;，也可以给&lt;code&gt;str&lt;/code&gt;赋值。&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;&lt;strong&gt;在同一个Controller下是不允许有Action重载的&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如：&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;public class HomeController :Controller
{
    public ActionResult Index(int? id)
    {
        return View();
    }
    public ActionResult Index()
    {
        return View();
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;在请求时提示错误：在对控制器类型“HomeController”的操作Index的请求方法不明确。&lt;/code&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;h4 id=&quot;路由顺序和优先级&quot;&gt;路由顺序和优先级&lt;/h4&gt;
&lt;p&gt;路由引擎在定位路由时，会遍历路由集合中的所有路由。只要发现了一个匹配的路由，会立即停止搜索。所以定义路由一定要注意路由的先后循序。一般是越是精确的放在前面。&lt;/p&gt;
&lt;p&gt;如：有一个如下的路由配置&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;routes.MapRoute{
    name:  &quot;one&quot;,
    url:&quot;{site}&quot;,
    defaults:new{controller=&quot;MyControllerOne&quot;,action=&quot;Index&quot;}
}
routes.MapRoute{
    name:&quot;two&quot;,
    url:&quot;Admin&quot;,
    defaults:new {controller=&quot;Admin&quot;,action=&quot;Index&quot;}
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;第一个路由有一个{site}占位符。默认的控制器为&lt;code&gt;MyControllerOne&lt;/code&gt;。第二个路由是一个常量&lt;code&gt;Admin,&lt;/code&gt;默认的控制器为&lt;code&gt;Admin&lt;/code&gt;。这两个都是正确的路由配置。但是当我们输入url&lt;code&gt;xxx.com/admin&lt;/code&gt;时，我们预想的是请求&lt;code&gt;AdminController&lt;/code&gt;下的&lt;code&gt;Index&lt;/code&gt;操作方法。但是根据上面的路由映射，该url会匹配第一个路由，然后就停止了路由查找。此时触发的&lt;code&gt;Controller&lt;/code&gt;为&lt;code&gt;MyControllerOne&lt;/code&gt;。&lt;/p&gt;
&lt;hr/&gt;&lt;h4 id=&quot;路由约束&quot;&gt;路由约束&lt;/h4&gt;
&lt;p&gt;之前的路由配置，都没有url的参数的类型信息。如果我们的Action是一个Int类型，但是url中的参数是个字符串，这样就会导致错误。所以如果有url的类型约束可以规避这个错误的发生。&lt;/p&gt;
&lt;p&gt;在Asp.Net MVC中我们可以通过正则表达式来约束路由。&lt;/p&gt;
&lt;p&gt;如：&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;routes.MapRoute{
    &quot;Default&quot;,
    &quot;{controller}/{action}/{id}&quot;,
    new{controller=&quot;Home&quot;,action=&quot;Index&quot;,id=UrlParameter.Optional},
    new{id=&quot;\d+&quot;}//该id为整数
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;除了使用正则表达式来约束路由，我们还可以通过继承IRouteConstraint接口自定义约束规则&lt;/p&gt;
&lt;p&gt;如：&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;public class MyRouteConstraint : IRouteConstraint
{
    public bool Match(HttpContextBase httpContext, Route route, string parameterName, RouteValueDictionary values, RouteDirection routeDirection)
    {
        //获取id的值
        var id = values[parameterName];

        //id验证方法

        return true;
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;更新路由配置&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;routes.MapRoute{
    &quot;Default&quot;,
    &quot;{controller}/{action}/{id}&quot;,
    new{controller=&quot;Home&quot;,action=&quot;Index&quot;,id=UrlParameter.Optional},
    new{id=new MyRouteConstraint()}
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;That's it&lt;/p&gt;
&lt;p&gt;参考资料：&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;如有不对，请多多指教。&lt;/p&gt;
&lt;hr/&gt;</description>
<pubDate>Wed, 31 Jan 2018 06:14:00 +0000</pubDate>
<dc:creator>JoeSnail</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/JoeSnail/p/8391812.html</dc:identifier>
</item>
<item>
<title>requests关于Exceeded 30 redirects问题得出的结论 - JeffD</title>
<link>http://www.cnblogs.com/Jeffding/p/8391957.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/Jeffding/p/8391957.html</guid>
<description>&lt;p&gt;　　首先说结论，发送requests请求必须带上headers否则无法保持bs之间的会话。从而报上述的错误。&lt;/p&gt;
&lt;p&gt;　　昨天一个朋友在爬网页时出现的一个问题，以及后续我对这个问题进行了简单的测试。&lt;/p&gt;
&lt;p&gt;　　先说出现的问题的简单描述。&lt;/p&gt;
&lt;p&gt;　　首先是使用urllib请求网页：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt;urllib.request发起的请求&lt;/span&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; urllib.request
response &lt;/span&gt;= urllib.request.urlopen(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;https://baike.baidu.com&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
html &lt;/span&gt;= response.read().decode(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;utf8&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(type(html))
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(html)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　结果正常显示了百科的页面信息：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1165242/201801/1165242-20180131105520328-105582736.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　我们使用requests来请求这个https页面&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt;requests发起的请求&lt;/span&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; requests
html &lt;/span&gt;= requests.get(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;https://baike.baidu.com&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(type(html))
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(html)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　然后报错了：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1165242/201801/1165242-20180131110001656-1359451981.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　报错是重定向超过三十个，百度的结果是取消默认允许的重定向。&lt;/p&gt;
&lt;p&gt;　　到这里我们得出第一条结论：&lt;/p&gt;
&lt;p&gt;　　&lt;span&gt;&lt;strong&gt;urllib和requests发送的请求默认会根据响应的location进行重定向。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　百度了一下，根据众网友的一致推荐，我们关闭&lt;/span&gt;allow_redirects这个字段。&lt;/p&gt;
&lt;p&gt;　　看一看源码里默认是允许重定向的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1165242/201801/1165242-20180131111208484-1859756295.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　关闭了重定向以后，页面不再跳转。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt;requests发起的请求，关闭重定向&lt;/span&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; requests
html &lt;/span&gt;= requests.get(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;https://baike.baidu.com&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, allow_redirects=&lt;span&gt;False).text
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(type(html))
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(html)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　禁止了重定向页面必然不能显示正常的百科主页了，这里我们得到的是302的跳转页面。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1165242/201801/1165242-20180131111446875-479367701.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　再次表明一下，百度里总有一些人只解决当前一个问题而不说明解决思路，或者试出来的结果就放上来当作回答的行为是很不负责的。&lt;/p&gt;
&lt;p&gt;　　这里重定向的问题根本不在于页面跳转了，而是页面为什么会多次跳转。&lt;/p&gt;
&lt;p&gt;　　我查到一篇关于请求亚马逊超出重定向限制的文章：http://www.it1352.com/330504.html。&lt;/p&gt;
&lt;p&gt;　　简单来说就是没有与服务器建立会话，页面重定向成了环形的死循环。即你的原始URL重定向一个没有新​​的URL B，其重定向到C，它重定向到B，等​​等。&lt;/p&gt;
&lt;p&gt;　　文章的结尾提到加请求头来保持会话的持久性。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt;requests发起的请求，添加请求头&lt;/span&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; requests
headers &lt;/span&gt;= {&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;User-Agent&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; : &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;User-Agent:Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Trident/5.0;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;}
html &lt;/span&gt;= requests.get(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;https://baike.baidu.com&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, headers=&lt;span&gt;headers).text
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(type(html))
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(html)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　请求的页面应当是正确的，但是却出现了如下乱码：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1165242/201801/1165242-20180131113231125-2141372110.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　本文的第二个结论也出来了：http头部没有编码方式，requests默认使用自己的编码方式。也是很任性，具体关于requests的乱码行为的出现原因及解决方案，在这篇博客有详细介绍，可以看一下。https://www.cnblogs.com/billyzh/p/6148066.html。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt;requests发起的请求，解决乱码问题&lt;/span&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; requests
headers &lt;/span&gt;= {&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;User-Agent&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; : &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;User-Agent:Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Trident/5.0;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;}
html &lt;/span&gt;= requests.get(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;https://baike.baidu.com&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, headers=headers).content.decode(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;utf8&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(type(html))
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(html)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　此时页面显示无异常，正确显示百科的地址。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1165242/201801/1165242-20180131114509640-2018441033.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt;requests发起的请求，加上重定向禁止&lt;/span&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; requests
headers &lt;/span&gt;= {&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;User-Agent&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; : &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;User-Agent:Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Trident/5.0;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;}
html &lt;/span&gt;= requests.get(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;https://baike.baidu.com&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, headers=headers, allow_redirects=False).content.decode(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;utf8&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(type(html))
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(html)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1165242/201801/1165242-20180131114849500-1466009272.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　结果没有影响，所以前面提到的解决重定向问题解决方案，多数人提到的禁止重定向根本无效，根本在于保持会话，防止重定向进入死循环。&lt;/p&gt;
&lt;p&gt;　　本文结论三：多Google少百度（只针对技术性问题）。&lt;/p&gt;
&lt;p&gt;　　到这里我们到底在模拟发送请求时请求头带了哪些东西导致的出现上面的问题呢？只能一步步分析请求头的信息。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt;urllib请求时发送的请求头&lt;/span&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; urllib.request
request &lt;/span&gt;= urllib.request.Request(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;https://baike.baidu.com&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(request.headers)&lt;span&gt;#&lt;/span&gt;&lt;span&gt;{}&lt;/span&gt;
&lt;span&gt;print&lt;/span&gt;(request.get_header(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;User-agent&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;))&lt;span&gt;#&lt;/span&gt;&lt;span&gt;None&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1165242/201801/1165242-20180131115539671-1671249665.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　但实际上肯定是不能发送一个空的请求头的，所以我们抓包获取发送的请求信息。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1165242/201801/1165242-20180131134743625-1710979342.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　urllib的响应头&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt;urllib请求时回应的响应头&lt;/span&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; urllib.request
request &lt;/span&gt;= urllib.request.urlopen(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;https://baike.baidu.com&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(request.headers)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1165242/201801/1165242-20180131120149656-909320485.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　urllib在请求的时候什么也没做，请求头也没东西，然而服务器对他温柔以待，响应了正确的跳转页面。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt;requests请求超出30次重定向，暂时无法得到他的请求头&lt;/span&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; requests
h&lt;/span&gt;=requests.get(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;https://baike.baidu.com&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(h.request.headers)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　同理响应头我也看不到。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt;requests阻止重定向他的请求头&lt;/span&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; requests
h&lt;/span&gt;=requests.get(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;https://baike.baidu.com&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, allow_redirects=&lt;span&gt;False)
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(h.request.headers)
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
{&lt;span&gt;'&lt;/span&gt;&lt;span&gt;User-Agent&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;python-requests/2.18.4&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Accept-Encoding&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;gzip, deflate&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Accept&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;*/*&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Connection&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;keep-alive&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;}
&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;
User-Agent表示了自己是python解释器的请求。
&lt;/pre&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt;requests阻止重定向他的响应头&lt;/span&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; requests
h&lt;/span&gt;=requests.get(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;https://baike.baidu.com&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, allow_redirects=&lt;span&gt;False).headers
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(h)
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;44&quot;&gt;
&lt;pre&gt;
{&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Connection&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;keep-alive&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Content-Length&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;154&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Content-Type&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;text/html&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Date&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Wed, 31 Jan 2018 04:07:32 GMT&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Location&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;https://baike.baidu.com/error.html?status=403&amp;amp;uri=/&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;P3p&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;CP=&quot; OTI DSP COR IVA OUR IND COM &quot;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Server&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Apache&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Set-Cookie&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;BAIDUID=C827DBDDF50E38C0C10F649F1DAAA462:FG=1; expires=Thu, 31-Jan-19 04:07:32 GMT; max-age=31536000; path=/; domain=.baidu.com; version=1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　连接是keep alive，有location显示重定向地址。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt;requests带上自己浏览器信息的请求头&lt;/span&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; requests
headers &lt;/span&gt;= {&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;User-Agent&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; : &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;User-Agent:Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Trident/5.0;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;}
h&lt;/span&gt;=requests.get(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;https://baike.baidu.com&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, allow_redirects=False,headers=&lt;span&gt;headers)
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(h.request.headers)
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
{&lt;span&gt;'&lt;/span&gt;&lt;span&gt;User-Agent&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;User-Agent:Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Trident/5.0;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Accept-Encoding&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;gzip, deflate&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Accept&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;*/*&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Connection&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;keep-alive&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;}
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt;requests带上自己浏览器信息的请求头，默认允许重定向&lt;/span&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; requests
headers &lt;/span&gt;= {&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;User-Agent&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; : &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;User-Agent:Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Trident/5.0;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;}
h&lt;/span&gt;=requests.get(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;https://baike.baidu.com&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,headers=&lt;span&gt;headers)
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(h.request.headers)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　与上面一样，再次验证阻不阻止页面重定向不是解决问题的关键点。&lt;/p&gt;
&lt;p&gt;　　根据上面的测试，我有一个大胆的猜测，urllib请求会被服务器接受并响应了setcookie字段，有了cookie创建一个会话最后保证了重定向的正常请求到一个最终的页面，但是requests不加请求头并不会被服务器返回setcookie，产生环形的重定向，最终无法定位到跳转的页面，而加上请求头User-Agent字段，那么服务器默认会建立会话保证跳转到正常的页面。&lt;/p&gt;
&lt;p&gt;　　补充一点，结论是不加请求头，requests无法保证与服务器之间的会话，每次连接服务器都被当作一条新请求直接让他跳转，不存在重定向环路的问题。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt; #requests带上自己浏览器信息的请求头&lt;/span&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; requests&lt;/span&gt;&lt;span&gt;
h&lt;/span&gt;=requests.get(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;https://baike.baidu.com&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, allow_redirects=False,verify=&lt;span&gt;False)
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(h.request.headers)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　抓到的get的请求包：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1165242/201801/1165242-20180131140709343-1006839971.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt; #requests带上自己浏览器信息的请求头&lt;/span&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; requests
headers &lt;/span&gt;= {&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;User-Agent&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; : &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;User-Agent:Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Trident/5.0;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;}
h&lt;/span&gt;=requests.get(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;https://baike.baidu.com&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, allow_redirects=False,headers=headers,verify=&lt;span&gt;False)
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(h.request.headers)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1165242/201801/1165242-20180131140938171-768963837.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　所以使用requests记得一定加上请求头信息。&lt;/p&gt;
&lt;p&gt;　　希望各位大神如果一不小心看完这篇文章请指出我说的不对的地方，或者哪些方面理解的还不够深刻。谢谢。&lt;/p&gt;
</description>
<pubDate>Wed, 31 Jan 2018 06:13:00 +0000</pubDate>
<dc:creator>JeffD</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/Jeffding/p/8391957.html</dc:identifier>
</item>
<item>
<title>WPF 简易新手引导 - 衆尋</title>
<link>http://www.cnblogs.com/ZXdeveloper/p/8391864.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/ZXdeveloper/p/8391864.html</guid>
<description>&lt;p&gt;这两天不忙，所以，做了一个简易的新手引导小Demo。因为，不是项目上应用，所以，做的很粗糙，也就是给需要的人，一个思路而已。&lt;/p&gt;
&lt;p&gt;新手引导功能的话，就是告诉用户，页面上操作的顺序，第一步要做什么，第二步要做什么，以此类推，然后，最终关闭新手引导页面。&lt;/p&gt;
&lt;p&gt;以我的习惯，还是先给大家看看效果。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/609679/201801/609679-20180131130128656-460421197.gif&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;效果展示的很简单，就是将要告诉用户操作的控件做一个提示。&lt;/p&gt;
&lt;p&gt;要实现这个功能化，那思路就是大概以下几项：&lt;/p&gt;

&lt;p&gt;将主窗体进行遮罩，半透明的效果，常用的做遮罩的话，一般是设置一个底色，然后设置透明度，类似于这篇博客&lt;a href=&quot;http://blog.csdn.net/cmis7645/article/details/7781990&quot; target=&quot;_blank&quot;&gt;http://blog.csdn.net/cmis7645/article/details/7781990&lt;/a&gt;，但是，在实际的操作用就会遇到问题，如果使用正常的半透明方式的话，黄色框部分，是不发透出白色的主窗体内容的，因为已经有底色了，所以，本文使用的半透明方法是Clip的擦除，效果如下图，参考的博客&lt;a href=&quot;http://blog.csdn.net/feitiankoulan/article/details/25201593&quot; target=&quot;_blank&quot;&gt;http://blog.csdn.net/feitiankoulan/article/details/25201593&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;file:///C:/Users/dell/AppData/Roaming/Tencent/Users/196110874/QQ/WinTemp/RichOle/499VQXS%7D2%250Z0P0SMX8S643.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;先设置一个透明的窗体&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Window &lt;/span&gt;&lt;span&gt;x:Class&lt;/span&gt;&lt;span&gt;=&quot;SimpleGuide.GuideWin&quot;&lt;/span&gt;&lt;span&gt; xmlns&lt;/span&gt;&lt;span&gt;=&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;&lt;/span&gt;&lt;span&gt; xmlns:x&lt;/span&gt;&lt;span&gt;=&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;&lt;/span&gt;&lt;span&gt; xmlns:d&lt;/span&gt;&lt;span&gt;=&quot;http://schemas.microsoft.com/expression/blend/2008&quot;&lt;/span&gt;&lt;span&gt; xmlns:mc&lt;/span&gt;&lt;span&gt;=&quot;http://schemas.openxmlformats.org/markup-compatibility/2006&quot;&lt;/span&gt;&lt;span&gt; xmlns:local&lt;/span&gt;&lt;span&gt;=&quot;clr-namespace:SimpleGuide&quot;&lt;/span&gt;&lt;span&gt; mc:Ignorable&lt;/span&gt;&lt;span&gt;=&quot;d&quot;&lt;/span&gt;&lt;span&gt; Title&lt;/span&gt;&lt;span&gt;=&quot;GuideWin&quot;&lt;/span&gt;&lt;span&gt; WindowStyle&lt;/span&gt;&lt;span&gt;=&quot;None&quot;&lt;/span&gt;&lt;span&gt; AllowsTransparency&lt;/span&gt;&lt;span&gt;=&quot;True&quot;&lt;/span&gt;&lt;span&gt; x:Name&lt;/span&gt;&lt;span&gt;=&quot;gw&quot;&lt;/span&gt;&lt;span&gt; Background&lt;/span&gt;&lt;span&gt;=&quot;#01FFFFFF&quot;&lt;/span&gt;&lt;span&gt; ShowInTaskbar&lt;/span&gt;&lt;span&gt;=&quot;False&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Grid&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Border &lt;/span&gt;&lt;span&gt;x:Name&lt;/span&gt;&lt;span&gt;=&quot;bor&quot;&lt;/span&gt;&lt;span&gt; BorderBrush&lt;/span&gt;&lt;span&gt;=&quot;White&quot;&lt;/span&gt;&lt;span&gt; BorderThickness&lt;/span&gt;&lt;span&gt;=&quot;2&quot;&lt;/span&gt;&lt;span&gt; CornerRadius&lt;/span&gt;&lt;span&gt;=&quot;5&quot;&lt;/span&gt;&lt;span&gt; Opacity&lt;/span&gt;&lt;span&gt;=&quot;0.8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Border.Effect&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;DropShadowEffect &lt;/span&gt;&lt;span&gt;ShadowDepth&lt;/span&gt;&lt;span&gt;=&quot;0&quot;&lt;/span&gt;&lt;span&gt; Color&lt;/span&gt;&lt;span&gt;=&quot;#FF414141&quot;&lt;/span&gt;&lt;span&gt; BlurRadius&lt;/span&gt;&lt;span&gt;=&quot;8&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Border.Effect&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Border &lt;/span&gt;&lt;span&gt;Background&lt;/span&gt;&lt;span&gt;=&quot;Black&quot;&lt;/span&gt;&lt;span&gt; Opacity&lt;/span&gt;&lt;span&gt;=&quot;0.5&quot;&lt;/span&gt;&lt;span&gt; Margin&lt;/span&gt;&lt;span&gt;=&quot;0&quot;&lt;/span&gt;&lt;span&gt; CornerRadius&lt;/span&gt;&lt;span&gt;=&quot;5&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Border&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Canvas &lt;/span&gt;&lt;span&gt;x:Name&lt;/span&gt;&lt;span&gt;=&quot;can&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Canvas&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Grid&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Window&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;从XAML的代码中，可以看到Background这个属性没用头“Transparent”而用的是“#01FFFFFF”，因为如果用Transparent的话，那真的就是透明了，可以直接点击到主窗体里的控件，这个是我们所不希望的，所以，设置了“#01FFFFFF”，一个近乎透明的颜色。&lt;/p&gt;

&lt;p&gt;既然要对某个控件进行指引的话，那就要把控件先给圈起来，圈起来的首要任务，就是获得控件在当前窗体的坐标位置。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
Point point = fe.TransformToAncestor(Window.GetWindow(fe)).Transform(&lt;span&gt;new&lt;/span&gt; Point(&lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;));
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;当获取完坐标以后，则需要将控件给圈起来，我的方法，就是取当前的坐标-5，宽和高+10，来绘制一个空白的区域，其实，这个部分应该是指擦除&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
RectangleGeometry rg1 = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; RectangleGeometry();
rg1.Rect &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; Rect(point.X - &lt;span&gt;5&lt;/span&gt;, point.Y - &lt;span&gt;5&lt;/span&gt;, fe.ActualWidth + &lt;span&gt;10&lt;/span&gt;, fe.ActualHeight + &lt;span&gt;10&lt;/span&gt;&lt;span&gt;);
borGeometry &lt;/span&gt;= Geometry.Combine(borGeometry, rg1, GeometryCombineMode.Exclude, &lt;span&gt;null&lt;/span&gt;);
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;指引UC，设计起来就比较方便了，样子其实挺简单的&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;file:///C:/Users/dell/AppData/Roaming/Tencent/Users/196110874/QQ/WinTemp/RichOle/%60UA4PT8R6GOYHX36%601O8O%7BS.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;就是用Path，绘制一个范围，但是虚线框，最开始的想法是用Line去做，但是感觉太费事了，就直接用的StrokeDashArray这个属性，Stroke是Path本身的边框线，当然，真的是边框，所以，又不好设置Margin或者Padding，所以，最后的做法，就是，在外层又绘制了一个区域，只是这个区域不包含边框线而已，填充色相同&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Path &lt;/span&gt;&lt;span&gt;Fill&lt;/span&gt;&lt;span&gt;=&quot;#FF2FBEED&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Path.Data&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;GeometryGroup&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;PathGeometry &lt;/span&gt;&lt;span&gt;Figures&lt;/span&gt;&lt;span&gt;=&quot;M 8,22 A 12,12 0 1 1 22,8 L 102 8 L 102 62 L 8 62 Z&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;GeometryGroup&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Path.Data&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Path&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Path &lt;/span&gt;&lt;span&gt;StrokeThickness&lt;/span&gt;&lt;span&gt;=&quot;1&quot;&lt;/span&gt;&lt;span&gt; Stroke&lt;/span&gt;&lt;span&gt;=&quot;White&quot;&lt;/span&gt;&lt;span&gt; StrokeDashArray&lt;/span&gt;&lt;span&gt;=&quot;2,1&quot;&lt;/span&gt;&lt;span&gt; Fill&lt;/span&gt;&lt;span&gt;=&quot;#FF2FBEED&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Path.Data&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;GeometryGroup&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;PathGeometry &lt;/span&gt;&lt;span&gt;Figures&lt;/span&gt;&lt;span&gt;=&quot;M 10,20 A 10,10 0 1 1 20,10 L 100 10 L 100 60 L 10 60 Z&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;GeometryGroup&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Path.Data&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;Path&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;显示内容的部分是一个Textblock，当时遇到了一个问题，就是换行问题，Textblock必须要有Width，才会换行，但是由于最外层是Viewbox，所以，尝试过获取UC的Width或者ActualWidth，都不行，所以，最后的解决办法是，传入一个窗体的宽度和高度进来，而不是在外部设置此UC的宽和高。&lt;/p&gt;
&lt;div readability=&quot;9&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; HintUC(&lt;span&gt;string&lt;/span&gt; xh, &lt;span&gt;string&lt;/span&gt; content, Visibility vis = Visibility.Visible, &lt;span&gt;int&lt;/span&gt; width = &lt;span&gt;260&lt;/span&gt;, &lt;span&gt;int&lt;/span&gt; height = &lt;span&gt;160&lt;/span&gt;&lt;span&gt;)
{
    InitializeComponent();
    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.Width =&lt;span&gt; width;
    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.Height =&lt;span&gt; height;
    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.tb_nr.Width = width / &lt;span&gt;4&lt;/span&gt;&lt;span&gt;;

    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.tb_xh.Text =&lt;span&gt; xh;
    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.tb_nr.Text =&lt;span&gt; content;
    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.btn_next.Visibility =&lt;span&gt; vis;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;p&gt;触发下一步，相当于是子控件调用主控件的事件，这样的话，就是写一个委托，在主窗体里去实现具体的方法。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;55&quot;&gt;
&lt;pre&gt;
&lt;span&gt;private&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; show(&lt;span&gt;int&lt;/span&gt; xh, FrameworkElement fe, &lt;span&gt;string&lt;/span&gt; con, Visibility vis =&lt;span&gt; Visibility.Visible)
{
    Point point &lt;/span&gt;= fe.TransformToAncestor(Window.GetWindow(fe)).Transform(&lt;span&gt;new&lt;/span&gt; Point(&lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;));&lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取控件坐标点&lt;/span&gt;
&lt;span&gt;
    RectangleGeometry rg &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; RectangleGeometry();
    rg.Rect &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; Rect(&lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;this&lt;/span&gt;.Width, &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.Height);
    borGeometry &lt;/span&gt;= Geometry.Combine(borGeometry, rg, GeometryCombineMode.Union, &lt;span&gt;null&lt;/span&gt;&lt;span&gt;);
    bor.Clip &lt;/span&gt;=&lt;span&gt; borGeometry;

    RectangleGeometry rg1 &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; RectangleGeometry();
    rg1.Rect &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; Rect(point.X - &lt;span&gt;5&lt;/span&gt;, point.Y - &lt;span&gt;5&lt;/span&gt;, fe.ActualWidth + &lt;span&gt;10&lt;/span&gt;, fe.ActualHeight + &lt;span&gt;10&lt;/span&gt;&lt;span&gt;);
    borGeometry &lt;/span&gt;= Geometry.Combine(borGeometry, rg1, GeometryCombineMode.Exclude, &lt;span&gt;null&lt;/span&gt;&lt;span&gt;);

    bor.Clip &lt;/span&gt;=&lt;span&gt; borGeometry;

    HintUC hit &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; HintUC(xh.ToString(), con, vis);
    Canvas.SetLeft(hit, point.X &lt;/span&gt;+ fe.ActualWidth + &lt;span&gt;3&lt;/span&gt;&lt;span&gt;);
    Canvas.SetTop(hit, point.Y &lt;/span&gt;+ fe.ActualHeight + &lt;span&gt;3&lt;/span&gt;&lt;span&gt;);
    hit.nextHintEvent &lt;/span&gt;-=&lt;span&gt; Hit_nextHintEvent;
    hit.nextHintEvent &lt;/span&gt;+=&lt;span&gt; Hit_nextHintEvent;
    can.Children.Add(hit);

    index&lt;/span&gt;++&lt;span&gt;;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;private&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; Hit_nextHintEvent()
{
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (list[index - &lt;span&gt;1&lt;/span&gt;] != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
    {
        can.Children.Clear();
    }
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (index == list.Count - &lt;span&gt;1&lt;/span&gt;&lt;span&gt;)
        show(index &lt;/span&gt;+ &lt;span&gt;1&lt;/span&gt;&lt;span&gt;, list[index].Uc, list[index].Content, Visibility.Collapsed);
    &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;
        show(index &lt;/span&gt;+ &lt;span&gt;1&lt;/span&gt;&lt;span&gt;, list[index].Uc, list[index].Content);
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;我们要在外部声明一个index的变量来记录当前的List集合的索引，首先要判断，当前的内容里，是否不为空，如果是的话，要清除掉，如果不清除的话，就会看到一堆的提示框，然后，判别是否是List集合里的最后一个控件了，如果是的话，那就不再显示“下一步按钮了”。&lt;/p&gt;

&lt;p&gt;由于是一个小Demo，所以发现了一些问题，但是就没有再解决了，例如如果主窗体不是无边框的话，取值定位会有问题。&lt;/p&gt;
&lt;p&gt;这是由于弹出的引导窗体获取了主窗体的大小，但是Point去获取控件坐标位置的时候，主窗体是不包含头部的，由于遮罩没有头部，所以定位出错了，这个我还没有找到好的解决办法，如果有大神知道如何解决的话，请赐教，谢谢了。&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;file:///C:/Users/dell/AppData/Roaming/Tencent/Users/196110874/QQ/WinTemp/RichOle/BV%7B5SZTYF1%5BSNG7H%7BB@~~50.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;p&gt;  显示引导内容的部分，也可以换成一个Grid，这样的话，就可以传入UserControl了，有兴趣的朋友可以自行修改。&lt;/p&gt;
&lt;p&gt; 源码：&lt;a href=&quot;https://files.cnblogs.com/files/ZXdeveloper/SimpleGuide.zip&quot; target=&quot;_blank&quot;&gt;Demo&lt;/a&gt;&lt;/p&gt;

</description>
<pubDate>Wed, 31 Jan 2018 05:56:00 +0000</pubDate>
<dc:creator>衆尋</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/ZXdeveloper/p/8391864.html</dc:identifier>
</item>
<item>
<title>Redis进阶实践之七Redis和Lua初步整合使用 - PatrickLiu</title>
<link>http://www.cnblogs.com/PatrickLiu/p/8391829.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/PatrickLiu/p/8391829.html</guid>
<description>&lt;p&gt;&lt;span&gt;&lt;strong&gt;一、引言&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;        Redis学了一段时间了，基本的东西都没问题了。从今天开始讲写一些redis和lua脚本的相关的东西，lua这个脚本是一个好东西，可以运行在任何平台上，也可以嵌入到大多数语言当中，来扩展其功能。lua脚本是用C语言写的，体积很小，运行速度很快，并且每次的执行都是作为一个原子事务来执行的，我们可以在其中做很多的事情。由于篇幅很多，一次无法概述全部，这个系列可能要通过多篇文章的形式来写，好了，今天我们进入正题吧。&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;二、Lua简介&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;    &lt;br/&gt;        Lua 是一个小巧的脚本语言。是巴西里约热内卢天主教大学（Pontifical Catholic University of Rio de Janeiro）里的一个研究小组，由Roberto Ierusalimschy、Waldemar Celes 和 Luiz Henrique de Figueiredo所组成并于1993年开发。 其设计目的是为了嵌入应用程序中，从而为应用程序提供灵活的扩展和定制功能。Lua由标准C编写而成，几乎在所有操作系统和平台上都可以编译，运行。Lua并没有提供强大的库，这是由它的定位决定的。所以Lua不适合作为开发独立应用程序的语言。Lua 有一个同时进行的JIT项目，提供在特定平台上的即时编译功能。&lt;/p&gt;&lt;p&gt;       Lua脚本可以很容易的被C/C++ 代码调用，也可以反过来调用C/C++的函数，这使得Lua在应用程序中可以被广泛应用。不仅仅作为扩展脚本，也可以作为普通的配置文件，代替XML,ini等文件格式，并且更容易理解和维护。 Lua由标准C编写而成，代码简洁优美，几乎在所有操作系统和平台上都可以编译，运行。一个完整的Lua解释器不过200k，在目前所有脚本引擎中，Lua的速度是最快的。这一切都决定了Lua是作为嵌入式脚本的最佳选择。&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;三、使用Lua脚本的好处&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;       1、减少网络开销：可以将多个请求通过脚本的形式一次发送，减少网络时延和请求次数。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;       2、原子性的操作：Redis会将整个脚本作为一个整体执行，中间不会被其他命令插入。因此在编写脚本的过程中无需担心会出现竞态条件，无需使用事务。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;       3、代码复用：客户端发送的脚步会永久存在redis中，这样，其他客户端可以复用这一脚本来完成相同的逻辑。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;       4、速度快：见 与其它语言的性能比较, 还有一个 JIT编译器可以显著地提高多数任务的性能; 对于那些仍然对性能不满意的人, 可以把关键部分使用C实现, 然后与其集成, 这样还可以享受其它方面的好处。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;       5、可以移植：只要是有ANSI C 编译器的平台都可以编译，你可以看到它可以在几乎所有的平台上运行:从 Windows 到Linux，同样Mac平台也没问题, 再到移动平台、游戏主机，甚至浏览器也可以完美使用 (翻译成JavaScript).&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;       6、源码小巧：20000行C代码，可以编译进182K的可执行文件，加载快，运行快。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;四、redis和lua整合详解&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;      &lt;strong&gt;1、调用Lua脚本的语法：&lt;/strong&gt;&lt;br/&gt;              $ redis-cli --eval path/to/redis.lua KEYS[1] KEYS[2] , ARGV[1] ARGV[2] ...&lt;/p&gt;&lt;p&gt;              --eval，告诉redis-cli读取并运行后面的lua脚本&lt;br/&gt;               path/to/redis.lua，是lua脚本的位置&lt;br/&gt;               KEYS[1] KEYS[2]，是要操作的键，可以指定多个，在lua脚本中通过KEYS[1], KEYS[2]获取&lt;br/&gt;               ARGV[1] ARGV[2]，参数，在lua脚本中通过ARGV[1], ARGV[2]获取。&lt;/p&gt;&lt;p&gt;      &lt;span&gt;&lt;strong&gt;        注意： KEYS和ARGV中间的 ',' 两边的空格，不能省略。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;             &lt;span&gt;&lt;strong&gt;redis支持大部分Lua标准库&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th align=&quot;left&quot;&gt;库名&lt;/th&gt;
&lt;th align=&quot;left&quot;&gt;说明&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody readability=&quot;3&quot;&gt;&lt;tr&gt;&lt;td align=&quot;left&quot;&gt;&lt;span&gt;Base&lt;/span&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;span&gt;提供一些基础函数&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td align=&quot;left&quot;&gt;&lt;span&gt;String&lt;/span&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;span&gt;提供用于字符串操作的函数&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td align=&quot;left&quot;&gt;&lt;span&gt;Table&lt;/span&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;span&gt;提供用于表操作的函数&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td align=&quot;left&quot;&gt;&lt;span&gt;Math&lt;/span&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;span&gt;提供数学计算函数&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td align=&quot;left&quot;&gt;&lt;span&gt;Debug&lt;/span&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;span&gt;提供用于调试的函数&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;&lt;br/&gt;       &lt;strong&gt;2、在脚本中调用redis命令&lt;/strong&gt;&lt;br/&gt;               在脚本中可以使用redis.call函数调用Redis命令&lt;/p&gt;&lt;p&gt;              redis.call('set', 'foo', 'bar')&lt;br/&gt;              local value=redis.call('get', 'foo') --value的值为bar&lt;/p&gt;&lt;p&gt;              redis.call函数的返回值就是Redis命令的执行结果&lt;/p&gt;&lt;p&gt;              Redis命令的返回值有5种类型，redis.call函数会将这5种类型的回复转换成对应的Lua的数据类型，具体的对应规则如下（空结果比较特殊，其对应Lua的false）&lt;/p&gt;
&lt;p&gt;               &lt;span&gt;&lt;strong&gt;redis返回值类型和Lua数据类型转换规则&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th align=&quot;left&quot;&gt;redis返回值类型&lt;/th&gt;
&lt;th align=&quot;left&quot;&gt;Lua数据类型&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody readability=&quot;3&quot;&gt;&lt;tr&gt;&lt;td align=&quot;left&quot;&gt;&lt;span&gt;整数回复&lt;/span&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;span&gt;数字类型&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td align=&quot;left&quot;&gt;&lt;span&gt;字符串回复&lt;/span&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;span&gt;字符串类型&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td align=&quot;left&quot;&gt;&lt;span&gt;多行字符串回复&lt;/span&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;span&gt;table类型(数组形式)&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td align=&quot;left&quot;&gt;&lt;span&gt;状态回复&lt;/span&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;span&gt;table类型(只有一个ok字段存储状态信息)&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td align=&quot;left&quot;&gt;&lt;span&gt;错误回复&lt;/span&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;span&gt;table类型(只有一个err字段存储错误信息)&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;&lt;br/&gt;                  redis还提供了redis.pcall函数，功能与redis.call相同，唯一的区别是当命令执行出错时，redis.pcall会记录错误并继续执行，而redis.call会直接返回错误，不会继续执行。在脚本中可以使用return语句将值返回给客户端，如果没有执行return语句则默认返回nil&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;                  Lua数据类型和redis返回值类型转换规则&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th align=&quot;left&quot;&gt;Lua数据类型&lt;/th&gt;
&lt;th align=&quot;left&quot;&gt;redis返回值类型&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody readability=&quot;4&quot;&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td align=&quot;left&quot;&gt;&lt;span&gt;数字类型&lt;/span&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;span&gt;整数回复(Lua的数字类型会被自动转换成整数)&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td align=&quot;left&quot;&gt;&lt;span&gt;字符串类型&lt;/span&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;span&gt;字符串回复&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td align=&quot;left&quot;&gt;&lt;span&gt;table类型(数组形式)&lt;/span&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;span&gt;多行字符串回复&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td align=&quot;left&quot;&gt;&lt;span&gt;table类型(只有一个ok字段存储状态信息)&lt;/span&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;span&gt;状态回复&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td align=&quot;left&quot;&gt;&lt;span&gt;table类型(只有一个err字段存储错误信息)&lt;/span&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;span&gt;错误回复&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;&lt;br/&gt;        &lt;strong&gt;3、脚本相关命令&lt;/strong&gt;&lt;br/&gt;             &lt;strong&gt;EVAL语法：&lt;/strong&gt; &lt;strong&gt;eval script numkeys key [key ...] arg [arg ...]&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;              通过key和arg这两类参数向脚本传递数据，它们的值在脚本中分别使用KEYS和ARGV两个表类型的全局变量访问。&lt;/p&gt;
&lt;p&gt;              &lt;strong&gt;script&lt;/strong&gt;： 是lua脚本&lt;/p&gt;
&lt;p&gt;              &lt;strong&gt;numkeys&lt;/strong&gt;：表示有几个key，分别是KEYS[1],KEYS[2]...，如果有值，从第numkeys+1个开始就是参数值，ARGV[1],ARGV[2]...&lt;/p&gt;&lt;p&gt;             &lt;span&gt;&lt;strong&gt;注意： EVAL命令依据参数numkeys来将其后面的所有参数分别存入脚本中KEYS和ARGV两个table类型的全局变量。当脚本不需要任何参数时，也不能省略这个参数(设为0)&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;       192.168&lt;/span&gt;.&lt;span&gt;127.128&lt;/span&gt;:&lt;span&gt;6379&lt;/span&gt;&amp;gt;eval &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;return redis.call('set',KEYS[1],ARGV[1])&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;1&lt;/span&gt;&lt;span&gt; name liulei
       OK

       &lt;/span&gt;&lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;127.128&lt;/span&gt;:&lt;span&gt;6379&lt;/span&gt;&amp;gt;&lt;span&gt;get&lt;/span&gt;&lt;span&gt; name
       &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;liulei&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;br/&gt;       &lt;strong&gt;4、 EVALSHA命令&lt;/strong&gt;&lt;br/&gt;              在脚本比较长的情况下，如果每次调用脚本都需要将整个脚本传给Redis会占用较多的带宽。为了解决这个问题，Redis提供了EVALSHA命令，允许开发者通过脚本内容的SHA1摘要来执行脚本，该命令的用法和EVAL一样，只不过是将脚本内容替换成脚本内容的SHA1摘要。&lt;/p&gt;&lt;p&gt;             Redis在执行EVAL命令时会计算脚本的SHA1摘要并记录在脚本缓存中，执行EVALSHA命令时Redis会根据提供的摘要从脚本缓存中查找对应的脚本内容，如果找到了则执行脚本，否则会返回错误：&quot;NOSCRIPT No matching script. Please use EVAL.&quot;&lt;/p&gt;&lt;p&gt;             &lt;span&gt;&lt;strong&gt;在程序中使用EVALSHA命令的一般流程如下。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;                 1）、先计算脚本的SHA1摘要，并使用EVALSHA命令执行脚本。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;                 2）、获得返回值，如果返回“NOSCRIPT”错误则使用EVAL命令重新执行脚本。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;              虽然这一流程略显麻烦，但值得庆幸的是很多编程语言的Redis客户端都会代替开发者完成这一流程。执行EVAL命令时，先尝试执行EVALSHA命令，如果失败了才会执行EVAL命令。&lt;/p&gt;&lt;p&gt;               SCRIPTLOAD &quot;lua-script&quot;  将脚本加入缓存，但不执行， 返回：脚本的SHA1摘要&lt;/p&gt;&lt;p&gt;               SCRIPT EXISTS lua-script-sha1   判断脚本是否已被缓存&lt;/p&gt;&lt;p&gt;       &lt;strong&gt;5、 SCRIPT FLUSH（该命令不区分大小写）&lt;/strong&gt;&lt;br/&gt;               清空脚本缓存，redis将脚本的SHA1摘要加入到脚本缓存后会永久保留，不会删除，但可以手动使用SCRIPT FLUSH命令情况脚本缓存。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;       192.168&lt;/span&gt;.&lt;span&gt;127.128&lt;/span&gt;:&lt;span&gt;6379&lt;/span&gt;&amp;gt;&lt;span&gt;script flush
       OK

       &lt;/span&gt;&lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;127.128&lt;/span&gt;:&lt;span&gt;6379&lt;/span&gt;&amp;gt;&lt;span&gt;SCRIPT FLUSH
       OK&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;br/&gt;       &lt;strong&gt;6、SCRIPT KILL（该命令不区分大小写）&lt;/strong&gt;&lt;br/&gt;              强制终止当前脚本的执行。 但是，如果当前执行的脚步对redis的数据进行了写操作，则SCRIPT KILL命令不会终止脚本的运行，以防止脚本只执行了一部分。脚本中的所有命令，要么都执行，要么都不执行。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;       192.168&lt;/span&gt;.&lt;span&gt;127.128&lt;/span&gt;:&lt;span&gt;6379&lt;/span&gt;&amp;gt;&lt;span&gt;script kill
      (error)NOTBUSY No scripts &lt;/span&gt;&lt;span&gt;in&lt;/span&gt;&lt;span&gt; execution right now

      &lt;/span&gt;&lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;127.128&lt;/span&gt;:&lt;span&gt;6379&lt;/span&gt;&amp;gt;&lt;span&gt;SCRIPT KILL
      (error)NOTBUSY No scripts &lt;/span&gt;&lt;span&gt;in&lt;/span&gt;&lt;span&gt; execution right now
       &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;这是当前没有脚本在执行，所以提示该错误&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;br/&gt;       &lt;strong&gt;7、lua-time-limit 5000（redis.conf配置文件中）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;              为了防止某个脚本执行时间过长导致Redis无法提供服务（比如陷入死循环），Redis提供了lua-time-limit参数限制脚本的最长运行时间，默认为5秒钟。当脚本运行时间超过这一限制后，Redis将开始接受其他命令但不会执行（以确保脚本的原子性，因为此时脚本并没有被终止），而是会返回“BUSY”错误。&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;五、安装和使用Lua脚本&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;       &lt;strong&gt;1、安装lua类库环境&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;              1.1、yum install -y readline&lt;br/&gt;                    &lt;br/&gt;              1.2、yum install -y readline-devel&lt;/p&gt;&lt;p&gt;                     &lt;img src=&quot;https://images2017.cnblogs.com/blog/1048776/201801/1048776-20180131132751453-139834391.png&quot; alt=&quot;&quot; width=&quot;683&quot; height=&quot;610&quot;/&gt;&lt;/p&gt;&lt;p&gt;        &lt;strong&gt;2、下载lua最新的版本安装&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;                &lt;span&gt;&lt;strong&gt;2.1、去官网下载lua，可以直接通过wget下载，地址如下：http://www.lua.org/download.html&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
           [root@lunux~]# wget http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;www.lua.org/ftp/lua-5.3.4.tar.gz /root/software/download/lua/&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;                         &lt;img src=&quot;https://images2017.cnblogs.com/blog/1048776/201801/1048776-20180131133003265-1886184022.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;               &lt;span&gt;&lt;strong&gt;2.2、通过ssh SSH Secure File Transfer Client工具，把软件包上传到Linux服务器上。目录是：/root/software/download/lua/&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
           [root@linux~]# cd ./software/download/lua/&lt;span&gt;

           [root@linux lua]# tar zxvf lua&lt;/span&gt;-&lt;span&gt;5.3&lt;/span&gt;.&lt;span&gt;4&lt;/span&gt;.tar.gz
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;                          &lt;img src=&quot;https://images2017.cnblogs.com/blog/1048776/201801/1048776-20180131133114937-2145892413.png&quot; alt=&quot;&quot; width=&quot;646&quot; height=&quot;574&quot;/&gt;&lt;/p&gt;
&lt;p&gt;                       &lt;br/&gt;              &lt;span&gt;&lt;strong&gt;  2.3、进入到已经解压的目录lua-5.3.4，准备安装文件。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;            [root@linux lua]# ls

            [root@linux lua]# lua&lt;/span&gt;-&lt;span&gt;5.3&lt;/span&gt;.&lt;span&gt;4&lt;/span&gt; lua-&lt;span&gt;5.3&lt;/span&gt;.&lt;span&gt;4&lt;/span&gt;&lt;span&gt;.tar.gz

            [root@linux lua]# cd lua&lt;/span&gt;-&lt;span&gt;5.3&lt;/span&gt;.&lt;span&gt;4&lt;/span&gt;&lt;span&gt;

            [root@linux lua&lt;/span&gt;-&lt;span&gt;5.3&lt;/span&gt;.&lt;span&gt;4&lt;/span&gt;]#
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;br/&gt;             &lt;span&gt;&lt;strong&gt;2.4、准备安装环境，使用make linux命令，当前也是需要gcc命令的支持，事先必须安装，安装gcc命令：yum install gcc。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
            [root@linux lua-&lt;span&gt;5.3&lt;/span&gt;.&lt;span&gt;4&lt;/span&gt;]# make linux
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;br/&gt;                        &lt;img src=&quot;https://images2017.cnblogs.com/blog/1048776/201801/1048776-20180131133356593-1456285171.png&quot; alt=&quot;&quot; width=&quot;667&quot; height=&quot;596&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;            2.5、开始安装lua软件包，使用make install命令&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
            [root@linux lua-&lt;span&gt;5.3&lt;/span&gt;.&lt;span&gt;4&lt;/span&gt;]# make install
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;                        &lt;img src=&quot;https://images2017.cnblogs.com/blog/1048776/201801/1048776-20180131133552859-1652916526.png&quot; alt=&quot;&quot; width=&quot;615&quot; height=&quot;548&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;span&gt;&lt;strong&gt;           2. 6、最后进行测试，进到Linux的命令行，然后输入lua命令，开始测试。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
          [root@linux lua-&lt;span&gt;5.3&lt;/span&gt;.&lt;span&gt;4&lt;/span&gt;&lt;span&gt;]# lua

          &lt;/span&gt;&amp;gt;print(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;lua&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
          lua&lt;br/&gt;&lt;/span&gt;&amp;gt;print(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;lua&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
          lua&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;                    &lt;img src=&quot;https://images2017.cnblogs.com/blog/1048776/201801/1048776-20180131133704640-739646559.png&quot; alt=&quot;&quot; width=&quot;639&quot; height=&quot;570&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;span&gt;&lt;strong&gt;            2.7、按Ctrl+C退出lua命令模式。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
           &amp;gt;^&lt;span&gt;C
          [root@linux lua&lt;/span&gt;-&lt;span&gt;5.3&lt;/span&gt;.&lt;span&gt;4&lt;/span&gt;]# 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;br/&gt;&lt;span&gt;&lt;strong&gt;           2.8、lua脚本文件名必须以.lua后缀名，如果在Linux命令行执行lua脚本，直接lua 脚本名称。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
         [root@linux lua-&lt;span&gt;5.3&lt;/span&gt;.&lt;span&gt;4&lt;/span&gt;]# cd /root/application/program/   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;执行文件都在这个目录里面&lt;/span&gt;
&lt;span&gt;
         [root@linux program]# mkdir luascript  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;创建luaScript脚本目录，存放lua脚本文件&lt;/span&gt;
&lt;span&gt;
         [root@linux program]# cd luascript  

         [root@linux luascript]# lua &lt;/span&gt;&lt;span&gt;01&lt;/span&gt;.lua    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;执行01.lua脚本文件&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;br/&gt;&lt;span&gt;&lt;strong&gt;           2.9、redis与lua脚本结合使用，如果在lua脚本里使用了 redis.call命令来操作Redis，执行lua脚步如下面：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
          &lt;span&gt;//&lt;/span&gt;&lt;span&gt;redis-cli和lua脚本的路径可以是相对路径，也可以是绝对路径
          &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;以下代码就是通过绝对地址来执行

          &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;绝对地址：&lt;/span&gt;
          [root@linux ~]# /root/application/program/redis-tool/redis-cli -h &lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;127.128&lt;/span&gt; -p &lt;span&gt;6379&lt;/span&gt; --eval /root/application/program/luascript/&lt;span&gt;02&lt;/span&gt;&lt;span&gt;.lua

          &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;相对地址：
          &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;当前目录&lt;/span&gt;
          &lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;127.128&lt;/span&gt;:&lt;span&gt;6379&lt;/span&gt;&amp;gt;&lt;span&gt;pwd
          [root@linux redis-tool]&lt;/span&gt;/root/application/program/redis-tool/&lt;span&gt;

          [root@linux redis-tool]# redis&lt;/span&gt;-cli -h &lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;127.128&lt;/span&gt; -p &lt;span&gt;6379&lt;/span&gt; --eval /root/application/program/luascript/&lt;span&gt;02&lt;/span&gt;.lua
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;br/&gt;&lt;span&gt;&lt;strong&gt;            2.10、Redis客户端执行带有参数的lua脚本，脚本文件的名称是：03.lua。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
&lt;span&gt;           //&lt;/span&gt;&lt;span&gt;当前redis 数据库中只有name和age两个key，其他数据已经清空。

           &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;当前所在目录&lt;/span&gt;
           &lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;127.128&lt;/span&gt;:&lt;span&gt;6379&lt;/span&gt;&amp;gt;keys *
           &lt;span&gt;1&lt;/span&gt;)&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
           &lt;span&gt;2&lt;/span&gt;)&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;age&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;

           &lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;127.128&lt;/span&gt;:&lt;span&gt;6379&lt;/span&gt;&amp;gt;&lt;span&gt;get&lt;/span&gt;&lt;span&gt; name
           &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;liulei&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;

           &lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;127.128&lt;/span&gt;:&lt;span&gt;6379&lt;/span&gt;&amp;gt;&lt;span&gt;get&lt;/span&gt;&lt;span&gt; age
           &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
     

          &lt;span&gt;//&lt;/span&gt;&lt;span&gt;03.lua脚本代码如下：&lt;/span&gt;
&lt;span&gt;
           local name&lt;/span&gt;=redis.call(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;get&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,KEYS[&lt;span&gt;1&lt;/span&gt;&lt;span&gt;])

           local age&lt;/span&gt;=redis.call(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;get&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,KEYS[&lt;span&gt;2&lt;/span&gt;&lt;span&gt;])

           &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; name==&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;LLL&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; then

             redis.call(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;set&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,KEYS[&lt;span&gt;1&lt;/span&gt;],ARGV[&lt;span&gt;1&lt;/span&gt;&lt;span&gt;])
 
             redis.call(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;incr&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,KEYS[&lt;span&gt;2&lt;/span&gt;&lt;span&gt;])
            end

          &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;执行改脚本的命令，必须在Linux的命令行，不是在Redis的命令行&lt;/span&gt;
          [root@linux ~]# /root/application/program/redis-tool/redis-cli -h &lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;127.128&lt;/span&gt; -p &lt;span&gt;6379&lt;/span&gt; --eval /root/application/program/luascript/&lt;span&gt;03&lt;/span&gt;&lt;span&gt;.lua name age , patrickLiu

          &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;执行脚本命令后&lt;/span&gt;
          &lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;127.128&lt;/span&gt;:&lt;span&gt;6379&lt;/span&gt;&amp;gt;keys *
          &lt;span&gt;1&lt;/span&gt;)&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
          &lt;span&gt;2&lt;/span&gt;)&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;age&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;

          &lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;127.128&lt;/span&gt;:&lt;span&gt;6379&lt;/span&gt;&amp;gt;&lt;span&gt;get&lt;/span&gt;&lt;span&gt; name
          &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;patrickLiu&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;

          &lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;127.128&lt;/span&gt;:&lt;span&gt;6379&lt;/span&gt;&amp;gt;&lt;span&gt;get&lt;/span&gt;&lt;span&gt; age
          &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;

         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;说明带参数的执行Lua脚本成功&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;br/&gt;&lt;span&gt;&lt;strong&gt;             2.11、Redis客户端执行有参数lua，并返回lua的表类型。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
            &lt;span&gt;//&lt;/span&gt;&lt;span&gt;04.lua文件的源码&lt;/span&gt;
&lt;span&gt;
            local b1&lt;/span&gt;=redis.call(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;hgetall&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,KEYS[&lt;span&gt;1&lt;/span&gt;&lt;span&gt;])
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; b1

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;代码很简单，话不多说

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;清空当前数据库&lt;/span&gt;
            &lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;127.128&lt;/span&gt;:&lt;span&gt;6379&lt;/span&gt;&amp;gt;&lt;span&gt;flushdb

            &lt;/span&gt;&lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;127.128&lt;/span&gt;:&lt;span&gt;6379&lt;/span&gt;&amp;gt;keys *&lt;span&gt;
            (empty list or &lt;/span&gt;&lt;span&gt;set&lt;/span&gt;&lt;span&gt;)

            &lt;/span&gt;&lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;127.128&lt;/span&gt;:&lt;span&gt;6379&lt;/span&gt;&amp;gt;&lt;span&gt;hmset myhash name zhangsan sex nan address hebeibaoding school laiyuanyizhong
            OK

            &lt;/span&gt;&lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;127.128&lt;/span&gt;:&lt;span&gt;6379&lt;/span&gt;&amp;gt;&lt;span&gt;hmget myhash name sex address school
            &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;)&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;zhangsan&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
            &lt;span&gt;2&lt;/span&gt;)&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;nan&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
            &lt;span&gt;3&lt;/span&gt;)&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;hebeibaoding&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
            &lt;span&gt;4&lt;/span&gt;)&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;laiyuanyizhong&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;

            &lt;span&gt;//&lt;/span&gt;&lt;span&gt;我们通过redis客户端获取myhash的结果，进入到redis客户端的当前目录&lt;/span&gt;
&lt;span&gt;
            [root@linux redis&lt;/span&gt;-tool]# redis-cli -h &lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;127.128&lt;/span&gt; -p &lt;span&gt;6379&lt;/span&gt; --eval ../luascript/&lt;span&gt;04&lt;/span&gt;&lt;span&gt;.lua myhash
            &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;)&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
            &lt;span&gt;2&lt;/span&gt;)&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;zhangsan&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
            &lt;span&gt;3&lt;/span&gt;)&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;sex&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
            &lt;span&gt;4&lt;/span&gt;)&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;nan&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
            &lt;span&gt;5&lt;/span&gt;)&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;address&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
            &lt;span&gt;6&lt;/span&gt;)&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;hebeibaoding&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
            &lt;span&gt;7&lt;/span&gt;)&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;school&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
            &lt;span&gt;8&lt;/span&gt;)&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;laiyuanyizhong&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;

          &lt;span&gt;//&lt;/span&gt;&lt;span&gt;成功获取myhash的列表&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;br/&gt;&lt;span&gt;&lt;strong&gt;六、总结&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;   今天就写到这里，还有很多内容要写，一次也写不完，慢慢来吧，我也需要消化一下。如果有时间，下一篇文章或者下某一篇文章准备来单独写一些关于Lua脚本语法的东西，我也是第一次接触这个东西，大家一起学习吧。&lt;/p&gt;
</description>
<pubDate>Wed, 31 Jan 2018 05:46:00 +0000</pubDate>
<dc:creator>PatrickLiu</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/PatrickLiu/p/8391829.html</dc:identifier>
</item>
<item>
<title>Spring Cloud Zuul网关 Filter、熔断、重试、高可用的使用方式。 - 纯洁的微笑</title>
<link>http://www.cnblogs.com/ityouknow/p/8391593.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/ityouknow/p/8391593.html</guid>
<description>&lt;p&gt;时间过的很快，写&lt;a href=&quot;http://www.ityouknow.com/springcloud/2017/06/01/gateway-service-zuul.html&quot;&gt;springcloud(十)：服务网关zuul初级篇&lt;/a&gt;还在半年前，现在已经是2018年了，我们继续探讨Zuul更高级的使用方式。&lt;/p&gt;
&lt;p&gt;上篇文章主要介绍了Zuul网关使用模式，以及自动转发机制，但其实Zuul还有更多的应用场景，比如：鉴权、流量转发、请求统计等等，这些功能都可以使用Zuul来实现。&lt;/p&gt;
&lt;h2 id=&quot;zuul的核心&quot;&gt;Zuul的核心&lt;/h2&gt;
&lt;p&gt;Filter是Zuul的核心，用来实现对外服务的控制。Filter的生命周期有4个，分别是“PRE”、“ROUTING”、“POST”、“ERROR”，整个生命周期可以用下图来表示。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.ityouknow.com/assets/images/2018/springcloud/zuul-core.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Zuul大部分功能都是通过过滤器来实现的，这些过滤器类型对应于请求的典型生命周期。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;PRE：&lt;/strong&gt; 这种过滤器在请求被路由之前调用。我们可利用这种过滤器实现身份验证、在集群中选择请求的微服务、记录调试信息等。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ROUTING：&lt;/strong&gt;这种过滤器将请求路由到微服务。这种过滤器用于构建发送给微服务的请求，并使用Apache HttpClient或Netfilx Ribbon请求微服务。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;POST：&lt;/strong&gt;这种过滤器在路由到微服务以后执行。这种过滤器可用来为响应添加标准的HTTP Header、收集统计信息和指标、将响应从微服务发送给客户端等。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ERROR：&lt;/strong&gt;在其他阶段发生错误时执行该过滤器。&lt;br/&gt;除了默认的过滤器类型，Zuul还允许我们创建自定义的过滤器类型。例如，我们可以定制一种STATIC类型的过滤器，直接在Zuul中生成响应，而不将请求转发到后端的微服务。&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;zuul中默认实现的filter&quot;&gt;Zuul中默认实现的Filter&lt;/h3&gt;
&lt;table&gt;&lt;thead/&gt;&lt;tbody readability=&quot;5&quot;&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td&gt;pre&lt;/td&gt;
&lt;td&gt;-3&lt;/td&gt;
&lt;td&gt;ServletDetectionFilter&lt;/td&gt;
&lt;td&gt;标记处理Servlet的类型&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;2&quot;&gt;&lt;td&gt;pre&lt;/td&gt;
&lt;td&gt;-2&lt;/td&gt;
&lt;td&gt;Servlet30WrapperFilter&lt;/td&gt;
&lt;td&gt;包装HttpServletRequest请求&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;pre&lt;/td&gt;
&lt;td&gt;-1&lt;/td&gt;
&lt;td&gt;FormBodyWrapperFilter&lt;/td&gt;
&lt;td&gt;包装请求体&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;route&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;DebugFilter&lt;/td&gt;
&lt;td&gt;标记调试标志&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td&gt;route&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;PreDecorationFilter&lt;/td&gt;
&lt;td&gt;处理请求上下文供后续使用&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;route&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;RibbonRoutingFilter&lt;/td&gt;
&lt;td&gt;serviceId请求转发&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;route&lt;/td&gt;
&lt;td&gt;100&lt;/td&gt;
&lt;td&gt;SimpleHostRoutingFilter&lt;/td&gt;
&lt;td&gt;url请求转发&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;route&lt;/td&gt;
&lt;td&gt;500&lt;/td&gt;
&lt;td&gt;SendForwardFilter&lt;/td&gt;
&lt;td&gt;forward请求转发&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td&gt;post&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;SendErrorFilter&lt;/td&gt;
&lt;td&gt;处理有错误的请求响应&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;2&quot;&gt;&lt;td&gt;post&lt;/td&gt;
&lt;td&gt;1000&lt;/td&gt;
&lt;td&gt;SendResponseFilter&lt;/td&gt;
&lt;td&gt;处理正常的请求响应&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;&lt;strong&gt;禁用指定的Filter&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;可以在application.yml中配置需要禁用的filter，格式：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode xml&quot;&gt;
&lt;code class=&quot;sourceCode xml&quot;&gt;zuul:
    FormBodyWrapperFilter:
        pre:
            disable: true&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;自定义filter&quot;&gt;自定义Filter&lt;/h2&gt;
&lt;p&gt;实现自定义Filter，需要继承ZuulFilter的类，并覆盖其中的4个方法。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; MyFilter &lt;span class=&quot;kw&quot;&gt;extends&lt;/span&gt; ZuulFilter {
    &lt;span class=&quot;fu&quot;&gt;@Override&lt;/span&gt;
    String &lt;span class=&quot;fu&quot;&gt;filterType&lt;/span&gt;() {
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;pre&quot;&lt;/span&gt;; &lt;span class=&quot;co&quot;&gt;//定义filter的类型，有pre、route、post、error四种&lt;/span&gt;
    }

    &lt;span class=&quot;fu&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;filterOrder&lt;/span&gt;() {
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;; &lt;span class=&quot;co&quot;&gt;//定义filter的顺序，数字越小表示顺序越高，越先执行&lt;/span&gt;
    }

    &lt;span class=&quot;fu&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;shouldFilter&lt;/span&gt;() {
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;true&lt;/span&gt;; &lt;span class=&quot;co&quot;&gt;//表示是否需要执行该filter，true表示执行，false表示不执行&lt;/span&gt;
    }

    &lt;span class=&quot;fu&quot;&gt;@Override&lt;/span&gt;
    Object &lt;span class=&quot;fu&quot;&gt;run&lt;/span&gt;() {
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;; &lt;span class=&quot;co&quot;&gt;//filter需要执行的具体操作&lt;/span&gt;
    }
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;自定义filter示例&quot;&gt;自定义Filter示例&lt;/h2&gt;
&lt;p&gt;我们假设有这样一个场景，因为服务网关应对的是外部的所有请求，为了避免产生安全隐患，我们需要对请求做一定的限制，比如请求中含有Token便让请求继续往下走，如果请求不带Token就直接返回并给出提示。&lt;/p&gt;
&lt;p&gt;首先自定义一个Filter，在run()方法中验证参数是否含有Token。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;16&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; TokenFilter &lt;span class=&quot;kw&quot;&gt;extends&lt;/span&gt; ZuulFilter {

    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;final&lt;/span&gt; Logger logger = LoggerFactory.&lt;span class=&quot;fu&quot;&gt;getLogger&lt;/span&gt;(TokenFilter.&lt;span class=&quot;fu&quot;&gt;class&lt;/span&gt;);

    &lt;span class=&quot;fu&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;fu&quot;&gt;filterType&lt;/span&gt;() {
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;pre&quot;&lt;/span&gt;; &lt;span class=&quot;co&quot;&gt;// 可以在请求被路由之前调用&lt;/span&gt;
    }

    &lt;span class=&quot;fu&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;filterOrder&lt;/span&gt;() {
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;; &lt;span class=&quot;co&quot;&gt;// filter执行顺序，通过数字指定 ,优先级为0，数字越大，优先级越低&lt;/span&gt;
    }

    &lt;span class=&quot;fu&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;shouldFilter&lt;/span&gt;() {
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;true&lt;/span&gt;;&lt;span class=&quot;co&quot;&gt;// 是否执行该过滤器，此处为true，说明需要过滤&lt;/span&gt;
    }

    &lt;span class=&quot;fu&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; Object &lt;span class=&quot;fu&quot;&gt;run&lt;/span&gt;() {
        RequestContext ctx = RequestContext.&lt;span class=&quot;fu&quot;&gt;getCurrentContext&lt;/span&gt;();
        HttpServletRequest request = ctx.&lt;span class=&quot;fu&quot;&gt;getRequest&lt;/span&gt;();

        logger.&lt;span class=&quot;fu&quot;&gt;info&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;---&amp;gt;&amp;gt;&amp;gt; TokenFilter {},{}&quot;&lt;/span&gt;, request.&lt;span class=&quot;fu&quot;&gt;getMethod&lt;/span&gt;(), request.&lt;span class=&quot;fu&quot;&gt;getRequestURL&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;toString&lt;/span&gt;());

        String token = request.&lt;span class=&quot;fu&quot;&gt;getParameter&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;token&quot;&lt;/span&gt;);&lt;span class=&quot;co&quot;&gt;// 获取请求的参数&lt;/span&gt;

        &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (StringUtils.&lt;span class=&quot;fu&quot;&gt;isNotBlank&lt;/span&gt;(token)) {
            ctx.&lt;span class=&quot;fu&quot;&gt;setSendZuulResponse&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;true&lt;/span&gt;); &lt;span class=&quot;co&quot;&gt;//对请求进行路由&lt;/span&gt;
            ctx.&lt;span class=&quot;fu&quot;&gt;setResponseStatusCode&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;200&lt;/span&gt;);
            ctx.&lt;span class=&quot;fu&quot;&gt;set&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;isSuccess&quot;&lt;/span&gt;, &lt;span class=&quot;kw&quot;&gt;true&lt;/span&gt;);
            &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;;
        } &lt;span class=&quot;kw&quot;&gt;else&lt;/span&gt; {
            ctx.&lt;span class=&quot;fu&quot;&gt;setSendZuulResponse&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;false&lt;/span&gt;); &lt;span class=&quot;co&quot;&gt;//不对其进行路由&lt;/span&gt;
            ctx.&lt;span class=&quot;fu&quot;&gt;setResponseStatusCode&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;400&lt;/span&gt;);
            ctx.&lt;span class=&quot;fu&quot;&gt;setResponseBody&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;token is empty&quot;&lt;/span&gt;);
            ctx.&lt;span class=&quot;fu&quot;&gt;set&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;isSuccess&quot;&lt;/span&gt;, &lt;span class=&quot;kw&quot;&gt;false&lt;/span&gt;);
            &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;;
        }
    }

}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;将TokenFilter加入到请求拦截队列，在启动类中添加以下代码：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;fu&quot;&gt;@Bean&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; TokenFilter &lt;span class=&quot;fu&quot;&gt;tokenFilter&lt;/span&gt;() {
    &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;TokenFilter&lt;/span&gt;();
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这样就将我们自定义好的Filter加入到了请求拦截中。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;测试&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我们依次启动示例项目：&lt;code&gt;spring-cloud-eureka&lt;/code&gt;、&lt;code&gt;spring-cloud-producer&lt;/code&gt;、&lt;code&gt;spring-cloud-zuul&lt;/code&gt;，这个三个项目均为上一篇示例项目，&lt;code&gt;spring-cloud-zuul&lt;/code&gt;稍微进行改造。&lt;/p&gt;
&lt;p&gt;访问地址：&lt;code&gt;http://localhost:8888/spring-cloud-producer/hello?name=neo&lt;/code&gt;，返回：token is empty ，请求被拦截返回。&lt;br/&gt;访问地址：&lt;code&gt;http://localhost:8888/spring-cloud-producer/hello?name=neo&amp;amp;token=xx&lt;/code&gt;，返回：hello neo，this is first messge，说明请求正常响应。&lt;/p&gt;
&lt;p&gt;通过上面这例子我们可以看出，我们可以使用“PRE&quot;类型的Filter做很多的验证工作，在实际使用中我们可以结合shiro、oauth2.0等技术去做鉴权、验证。&lt;/p&gt;
&lt;h2 id=&quot;路由熔断&quot;&gt;路由熔断&lt;/h2&gt;
&lt;p&gt;当我们的后端服务出现异常的时候，我们不希望将异常抛出给最外层，期望服务可以自动进行一降级。Zuul给我们提供了这样的支持。当某个服务出现异常时，直接返回我们预设的信息。&lt;/p&gt;
&lt;p&gt;我们通过自定义的fallback方法，并且将其指定给某个route来实现该route访问出问题的熔断处理。主要继承ZuulFallbackProvider接口来实现，ZuulFallbackProvider默认有两个方法，一个用来指明熔断拦截哪个服务，一个定制返回内容。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;interface&lt;/span&gt; ZuulFallbackProvider {
   &lt;span class=&quot;co&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     * The route this fallback will be used for.&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     * &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;@return &lt;/span&gt;&lt;span class=&quot;co&quot;&gt;The route the fallback will be used for.&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     */&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;fu&quot;&gt;getRoute&lt;/span&gt;();

    &lt;span class=&quot;co&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     * Provides a fallback response.&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     * &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;@return &lt;/span&gt;&lt;span class=&quot;co&quot;&gt;The fallback response.&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     */&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; ClientHttpResponse &lt;span class=&quot;fu&quot;&gt;fallbackResponse&lt;/span&gt;();
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;实现类通过实现getRoute方法，告诉Zuul它是负责哪个route定义的熔断。而fallbackResponse方法则是告诉 Zuul 断路出现时，它会提供一个什么返回值来处理请求。&lt;/p&gt;
&lt;p&gt;后来Spring又扩展了此类，丰富了返回方式，在返回的内容中添加了异常信息，因此最新版本建议直接继承类&lt;code&gt;FallbackProvider&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;我们以上面的spring-cloud-producer服务为例，定制它的熔断返回内容。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;fu&quot;&gt;@Component&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; ProducerFallback &lt;span class=&quot;kw&quot;&gt;implements&lt;/span&gt; FallbackProvider {
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;final&lt;/span&gt; Logger logger = LoggerFactory.&lt;span class=&quot;fu&quot;&gt;getLogger&lt;/span&gt;(FallbackProvider.&lt;span class=&quot;fu&quot;&gt;class&lt;/span&gt;);

    &lt;span class=&quot;co&quot;&gt;//指定要处理的 service。&lt;/span&gt;
    &lt;span class=&quot;fu&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;fu&quot;&gt;getRoute&lt;/span&gt;() {
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;spring-cloud-producer&quot;&lt;/span&gt;;
    }

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; ClientHttpResponse &lt;span class=&quot;fu&quot;&gt;fallbackResponse&lt;/span&gt;() {
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;ClientHttpResponse&lt;/span&gt;() {
            &lt;span class=&quot;fu&quot;&gt;@Override&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; HttpStatus &lt;span class=&quot;fu&quot;&gt;getStatusCode&lt;/span&gt;() &lt;span class=&quot;kw&quot;&gt;throws&lt;/span&gt; IOException {
                &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; HttpStatus.&lt;span class=&quot;fu&quot;&gt;OK&lt;/span&gt;;
            }

            &lt;span class=&quot;fu&quot;&gt;@Override&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;getRawStatusCode&lt;/span&gt;() &lt;span class=&quot;kw&quot;&gt;throws&lt;/span&gt; IOException {
                &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;200&lt;/span&gt;;
            }

            &lt;span class=&quot;fu&quot;&gt;@Override&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;fu&quot;&gt;getStatusText&lt;/span&gt;() &lt;span class=&quot;kw&quot;&gt;throws&lt;/span&gt; IOException {
                &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;OK&quot;&lt;/span&gt;;
            }

            &lt;span class=&quot;fu&quot;&gt;@Override&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;close&lt;/span&gt;() {

            }

            &lt;span class=&quot;fu&quot;&gt;@Override&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; InputStream &lt;span class=&quot;fu&quot;&gt;getBody&lt;/span&gt;() &lt;span class=&quot;kw&quot;&gt;throws&lt;/span&gt; IOException {
                &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; ByteArrayInputStream(&lt;span class=&quot;st&quot;&gt;&quot;The service is unavailable.&quot;&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;getBytes&lt;/span&gt;());
            }

            &lt;span class=&quot;fu&quot;&gt;@Override&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; HttpHeaders &lt;span class=&quot;fu&quot;&gt;getHeaders&lt;/span&gt;() {
                HttpHeaders headers = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;HttpHeaders&lt;/span&gt;();
                headers.&lt;span class=&quot;fu&quot;&gt;setContentType&lt;/span&gt;(MediaType.&lt;span class=&quot;fu&quot;&gt;APPLICATION_JSON&lt;/span&gt;);
                &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; headers;
            }
        };
    }

    &lt;span class=&quot;fu&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; ClientHttpResponse &lt;span class=&quot;fu&quot;&gt;fallbackResponse&lt;/span&gt;(Throwable cause) {
        &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (cause != &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt; &amp;amp;&amp;amp; cause.&lt;span class=&quot;fu&quot;&gt;getCause&lt;/span&gt;() != &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;) {
            String reason = cause.&lt;span class=&quot;fu&quot;&gt;getCause&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;getMessage&lt;/span&gt;();
            logger.&lt;span class=&quot;fu&quot;&gt;info&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;Excption {}&quot;&lt;/span&gt;,reason);
        }
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;fallbackResponse&lt;/span&gt;();
    }
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;当服务出现异常时，打印相关异常信息，并返回&quot;The service is unavailable.&quot;。&lt;/p&gt;
&lt;p&gt;启动项目spring-cloud-producer-2，这时候服务中心会有两个spring-cloud-producer项目，我们重启Zuul项目。再手动关闭spring-cloud-producer-2项目，多次访问地址：&lt;code&gt;http://localhost:8888/spring-cloud-producer/hello?name=neo&amp;amp;token=xx&lt;/code&gt;，会交替返回：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;hello neo，this is first messge
The service is unavailable.
...&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;根据返回结果可以看出：spring-cloud-producer-2项目已经启用了熔断，返回:&lt;code&gt;The service is unavailable.&lt;/code&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;Zuul 目前只支持服务级别的熔断，不支持具体到某个URL进行熔断。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;路由重试&quot;&gt;路由重试&lt;/h2&gt;
&lt;p&gt;有时候因为网络或者其它原因，服务可能会暂时的不可用，这个时候我们希望可以再次对服务进行重试，Zuul也帮我们实现了此功能，需要结合Spring Retry 一起来实现。下面我们以上面的项目为例做演示。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;添加Spring Retry依赖&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;首先在spring-cloud-zuul项目中添加Spring Retry依赖。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode xml&quot;&gt;
&lt;code class=&quot;sourceCode xml&quot;&gt;&lt;span class=&quot;kw&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.retry&lt;span class=&quot;kw&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-retry&lt;span class=&quot;kw&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;开启Zuul Retry&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;再配置文件中配置启用Zuul Retry&lt;/p&gt;
&lt;pre class=&quot;properties&quot;&gt;
&lt;code&gt;#是否开启重试功能
zuul.retryable=true
#对当前服务的重试次数
ribbon.MaxAutoRetries=2
#切换相同Server的次数
ribbon.MaxAutoRetriesNextServer=0&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这样我们就开启了Zuul的重试功能。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;测试&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我们对spring-cloud-producer-2进行改造，在hello方法中添加定时，并且在请求的一开始打印参数。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;fu&quot;&gt;@RequestMapping&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;/hello&quot;&lt;/span&gt;)
&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;fu&quot;&gt;index&lt;/span&gt;(&lt;span class=&quot;fu&quot;&gt;@RequestParam&lt;/span&gt; String name) {
    logger.&lt;span class=&quot;fu&quot;&gt;info&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;request two name is &quot;&lt;/span&gt;+name);
    &lt;span class=&quot;kw&quot;&gt;try&lt;/span&gt;{
        Thread.&lt;span class=&quot;fu&quot;&gt;sleep&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;1000000&lt;/span&gt;);
    }&lt;span class=&quot;kw&quot;&gt;catch&lt;/span&gt; ( Exception e){
        logger.&lt;span class=&quot;fu&quot;&gt;error&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot; hello two error&quot;&lt;/span&gt;,e);
    }
    &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;hello &quot;&lt;/span&gt;+name+&lt;span class=&quot;st&quot;&gt;&quot;，this is two messge&quot;&lt;/span&gt;;
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;重启 spring-cloud-producer-2和spring-cloud-zuul项目。&lt;/p&gt;
&lt;p&gt;访问地址：&lt;code&gt;http://localhost:8888/spring-cloud-producer/hello?name=neo&amp;amp;token=xx&lt;/code&gt;，当页面返回：&lt;code&gt;The service is unavailable.&lt;/code&gt;时查看项目spring-cloud-producer-2后台日志如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;2018-01-22 19:50:32.401  INFO 19488 --- [io-9001-exec-14] o.s.c.n.z.f.route.FallbackProvider       : request two name is neo
2018-01-22 19:50:33.402  INFO 19488 --- [io-9001-exec-15] o.s.c.n.z.f.route.FallbackProvider       : request two name is neo
2018-01-22 19:50:34.404  INFO 19488 --- [io-9001-exec-16] o.s.c.n.z.f.route.FallbackProvider       : request two name is neo&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;说明进行了三次的请求，也就是进行了两次的重试。这样也就验证了我们的配置信息，完成了Zuul的重试功能。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;开启重试在某些情况下是有问题的，比如当压力过大，一个实例停止响应时，路由将流量转到另一个实例，很有可能导致最终所有的实例全被压垮。说到底，断路器的其中一个作用就是防止故障或者压力扩散。用了retry，断路器就只有在该服务的所有实例都无法运作的情况下才能起作用。这种时候，断路器的形式更像是提供一种友好的错误信息，或者假装服务正常运行的假象给使用者。&lt;/p&gt;
&lt;p&gt;不用retry，仅使用负载均衡和熔断，就必须考虑到是否能够接受单个服务实例关闭和eureka刷新服务列表之间带来的短时间的熔断。如果可以接受，就无需使用retry。&lt;/p&gt;
&lt;h2 id=&quot;zuul高可用&quot;&gt;Zuul高可用&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;http://www.ityouknow.com/assets/images/2018/springcloud/zuul-case.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;我们实际使用Zuul的方式如上图，不同的客户端使用不同的负载将请求分发到后端的Zuul，Zuul在通过Eureka调用后端服务，最后对外输出。因此为了保证Zuul的高可用性，前端可以同时启动多个Zuul实例进行负载，在Zuul的前端使用Nginx或者F5进行负载转发以达到高可用性。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://github.com/ityouknow/spring-cloud-examples&quot;&gt;示例代码-github&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://gitee.com/ityouknow/spring-cloud-examples&quot;&gt;示例代码-码云&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;参考：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.ymq.io/2017/12/11/spring-cloud-zuul-filter/&quot;&gt;Spring Cloud（七）服务网关 Zuul Filter 使用&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;http://tech.lede.com/2017/05/16/rd/server/SpringCloudZuul/&quot;&gt;Spring Cloud技术分析（4）- spring cloud zuul&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;https://xli1224.github.io/2017/09/09/use-zuul/&quot;&gt;Zuul 路由使用&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Wed, 31 Jan 2018 04:26:00 +0000</pubDate>
<dc:creator>纯洁的微笑</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/ityouknow/p/8391593.html</dc:identifier>
</item>
<item>
<title>Angular19 自定义表单控件 - NeverCtrl_C</title>
<link>http://www.cnblogs.com/NeverCtrl-C/p/8391533.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/NeverCtrl-C/p/8391533.html</guid>
<description>&lt;h2&gt; 1 需求&lt;/h2&gt;
&lt;p&gt;　　当开发者需要一个特定的表单控件时就需要自己开发一个和默认提供的表单控件用法相似的控件来作为表单控件；自定义的表单控件必须考虑模型和视图之间的数据怎么进行交互&lt;/p&gt;


&lt;p&gt;　　Angular为开发者提供了ControlValueAccessor接口来辅助开发者构建自定义的表单控件，开发者只需要在自定义表单控件类中实现ControlValueAccessor接口中的方法就可以实现模型和视图之间的数据交互&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;interface ControlValueAccessor { 
  writeValue(obj: any): &lt;/span&gt;&lt;span&gt;void&lt;/span&gt;&lt;span&gt;
  registerOnChange(fn: any): &lt;/span&gt;&lt;span&gt;void&lt;/span&gt;&lt;span&gt;
  registerOnTouched(fn: any): &lt;/span&gt;&lt;span&gt;void&lt;/span&gt;&lt;span&gt;
  setDisabledState(isDisabled: &lt;/span&gt;&lt;span&gt;boolean&lt;/span&gt;)?: &lt;span&gt;void&lt;/span&gt;&lt;span&gt;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;　　2.1 writeValue　　&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
writeValue(obj: any): &lt;span&gt;void&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　　　该方法用于将值写入到自定义表单控件中的元素；&lt;/p&gt;
&lt;p&gt;　　　　这个参数值（obj）是使用这个自定义表单控件的组件通过模板表单或者响应式表单的数据绑定传过来的；&lt;/p&gt;
&lt;p&gt;　　　　在自定义表单控件的类中只需要将这个值（obj）赋值给一个成员变量即可，自定义表单控件的视图就会通过属性绑定显示出来这个值&lt;/p&gt;
&lt;h3&gt;　　2.2 registerOnChange&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
registerOnChange(fn: any): &lt;span&gt;void&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　　　自定义表单控件的数据发生变化时会触发registerOnChange方法，该方用于如何处理自定义表单控件数据的变化；&lt;/p&gt;
&lt;p&gt;　　　　registerOnChange方法接收的参数（fn）其实是一个方法，该方法负责处理变化的数据&lt;/p&gt;
&lt;p&gt;　　　　当自定义控件数据变化时就会自动调用fn执行的方法，但是通常的做法是自定义一个方法 propagateChange 让自定义的方法指向fn，这样当数据变化时只需要调用 propagateChange 就可以对变化的数据进行处理&lt;/p&gt;
&lt;h3&gt;　　2.3 registerOnTouched&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
registerOnTouched(fn: any): &lt;span&gt;void&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　　　表单控件被触摸时会触发registerOnTouched方法，具体细节待更新......2018-1-31 11:18:33&lt;/p&gt;
&lt;h3&gt;　　2.4 setDisabledState&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
setDisabledState(isDisabled: &lt;span&gt;boolean&lt;/span&gt;)?: &lt;span&gt;void&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　　　待更新......2018-1-31 11:19:30&lt;/p&gt;

&lt;h2&gt;3 编程步骤&lt;/h2&gt;
&lt;h3&gt;　　3.1 创建自定义表单控件组件　　　&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_d2333298-e935-4c85-950e-1cc52bb63d26&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_d2333298-e935-4c85-950e-1cc52bb63d26&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_d2333298-e935-4c85-950e-1cc52bb63d26&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;h4&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;当前计数为：{{countNumber}}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;h4&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;br &lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;button &lt;/span&gt;&lt;span&gt;md-icon-button (click)&lt;/span&gt;&lt;span&gt;=&quot;onIncrease()&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;增加&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;md-icon&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;add&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;md-icon&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;button&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;span &lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;=&quot;margin-left: 30px;&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;button &lt;/span&gt;&lt;span&gt;md-icon-button (click)&lt;/span&gt;&lt;span&gt;=&quot;onDecrease()&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;减少&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;md-icon&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;remove&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;md-icon&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;button&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;HTML&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;&lt;img id=&quot;code_img_closed_4a1d838c-34fb-4d45-bb04-228f7286fd49&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_4a1d838c-34fb-4d45-bb04-228f7286fd49&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_4a1d838c-34fb-4d45-bb04-228f7286fd49&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;63&quot;&gt;
&lt;pre&gt;
import { Component, OnInit } from '@angular/core'&lt;span&gt;;
import { ControlValueAccessor } from &lt;/span&gt;'@angular/forms'&lt;span&gt;;

@Component({
  selector: &lt;/span&gt;'app-counter'&lt;span&gt;,
  templateUrl: &lt;/span&gt;'./counter.component.html'&lt;span&gt;,
  styleUrls: [&lt;/span&gt;'./counter.component.scss'&lt;span&gt;]
})
export class CounterComponent implements OnInit {

  countNumber: number &lt;/span&gt;= 0&lt;span&gt;;

  constructor() { }

  ngOnInit() {
  }

  onIncrease() {
    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.countNumber++&lt;span&gt;;
  }

  onDecrease() {
    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.countNumber--&lt;span&gt;;
  }

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;TS&lt;/span&gt;&lt;/div&gt;
&lt;h4&gt;　　　　3.1.1 功能描述&lt;/h4&gt;
&lt;p&gt;　　　　　　点击增加按钮时当前计数会增加1，点击减少按钮时当前计数会剪1&lt;/p&gt;
&lt;p&gt;　　　　　　&lt;img src=&quot;https://images2017.cnblogs.com/blog/1057762/201801/1057762-20180131112446546-1409626575.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h4&gt;　　　　3.1.2 直接在其他组件中使用时会报错&lt;/h4&gt;
&lt;p&gt;　　　　　　&lt;img src=&quot;https://images2017.cnblogs.com/blog/1057762/201801/1057762-20180131112703812-230730708.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　　　报错信息如下：&lt;/p&gt;
&lt;p&gt;　　　　　　　　&lt;img src=&quot;https://images2017.cnblogs.com/blog/1057762/201801/1057762-20180131112730437-1204743888.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　　　　　错误信息是说我们我们使用的组件&amp;lt;app-counter&amp;gt;还不是一个表单控件&lt;/p&gt;
&lt;h3&gt;　　3.2 如何让&amp;lt;app-counter&amp;gt;组件变成一个表单控件组件&lt;/h3&gt;
&lt;h4&gt;　　　　3.2.1 实现 &lt;span&gt;ControlValueAccessor&lt;/span&gt; 接口&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;　　　　　　&lt;img src=&quot;https://images2017.cnblogs.com/blog/1057762/201801/1057762-20180131113528031-416177836.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;&lt;img id=&quot;code_img_closed_22d357c2-d021-45a3-be5a-cb2ff6e2ab37&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_22d357c2-d021-45a3-be5a-cb2ff6e2ab37&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_22d357c2-d021-45a3-be5a-cb2ff6e2ab37&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;61&quot;&gt;
&lt;pre&gt;
&lt;span&gt;export class CounterComponent implements OnInit, ControlValueAccessor {

  countNumber: number &lt;/span&gt;= 0&lt;span&gt;;

  constructor() { }

  ngOnInit() {
  }

  onIncrease() {
    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.countNumber++&lt;span&gt;;
  }

  onDecrease() {
    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.countNumber--&lt;span&gt;;
  }

    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*将数据从模型传输到视图 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
  writeValue(obj: any): &lt;/span&gt;&lt;span&gt;void&lt;/span&gt;&lt;span&gt; {
  }

  &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*将数据从视图传播到模型 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
  registerOnChange(fn: any): &lt;/span&gt;&lt;span&gt;void&lt;/span&gt;&lt;span&gt; {

  }

  registerOnTouched(fn: any): &lt;/span&gt;&lt;span&gt;void&lt;/span&gt;&lt;span&gt; {

  }

  setDisabledState&lt;/span&gt;?(isDisabled: &lt;span&gt;boolean&lt;/span&gt;): &lt;span&gt;void&lt;/span&gt;&lt;span&gt; {

  }

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;h4&gt;　　　　3.2.2 指定依赖信息providers&lt;/h4&gt;
&lt;p&gt;　　　　　　&lt;img src=&quot;https://images2017.cnblogs.com/blog/1057762/201801/1057762-20180131113503671-1113304520.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;&lt;img id=&quot;code_img_closed_02a80bda-aed0-4b9f-a6a5-113c0d8d954f&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_02a80bda-aed0-4b9f-a6a5-113c0d8d954f&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_02a80bda-aed0-4b9f-a6a5-113c0d8d954f&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;69&quot;&gt;
&lt;pre&gt;
import { Component, OnInit, forwardRef } from '@angular/core'&lt;span&gt;;
import { ControlValueAccessor, NG_VALUE_ACCESSOR } from &lt;/span&gt;'@angular/forms'&lt;span&gt;;

@Component({
  selector: &lt;/span&gt;'app-counter'&lt;span&gt;,
  templateUrl: &lt;/span&gt;'./counter.component.html'&lt;span&gt;,
  styleUrls: [&lt;/span&gt;'./counter.component.scss'&lt;span&gt;],
  providers: [
    {
        provide: NG_VALUE_ACCESSOR,
        useExisting: forwardRef(() &lt;/span&gt;=&amp;gt;&lt;span&gt; CounterComponent),
        multi: &lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;
    }
  ]
})
export class CounterComponent implements OnInit, ControlValueAccessor {

  countNumber: number &lt;/span&gt;= 0&lt;span&gt;;

  constructor() { }

  ngOnInit() {
  }

  onIncrease() {
    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.countNumber++&lt;span&gt;;
  }

  onDecrease() {
    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.countNumber--&lt;span&gt;;
  }

    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*将数据从模型传输到视图 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
  writeValue(obj: any): &lt;/span&gt;&lt;span&gt;void&lt;/span&gt;&lt;span&gt; {
  }

  &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*将数据从视图传播到模型 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
  registerOnChange(fn: any): &lt;/span&gt;&lt;span&gt;void&lt;/span&gt;&lt;span&gt; {

  }

  registerOnTouched(fn: any): &lt;/span&gt;&lt;span&gt;void&lt;/span&gt;&lt;span&gt; {

  }

  setDisabledState&lt;/span&gt;?(isDisabled: &lt;span&gt;boolean&lt;/span&gt;): &lt;span&gt;void&lt;/span&gt;&lt;span&gt; {

  }

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;h4&gt;　　　　3.2.3 待修复bug&lt;/h4&gt;
&lt;p&gt;　　　　　　虽然可以正常运行，但是表单控件中的元素接受不到使用表单控件那个组件中表单模型传过来的数据，表单控件变化的数据也无法回传到使用表单控件那个组件中的表单模型中去；简而言之，就是模型和视图之间无法进行数据交互&lt;/p&gt;
&lt;h3&gt; 　　3.3 实现模型和视图的数据交互&lt;/h3&gt;
&lt;h4&gt;　　　　3.3.1 模型到视图&lt;/h4&gt;
&lt;p&gt;　　　　　　重构自定义表单控件类中的 writeValue 方法&lt;/p&gt;
&lt;p&gt;　　　　　　技巧01：writeValue 方法中的参数是使用自定义表单控件的那个组件通过表单的数据绑定传进来的&lt;/p&gt;
&lt;p&gt;　　　　　　　　&lt;img src=&quot;https://images2017.cnblogs.com/blog/1057762/201801/1057762-20180131114350593-1081814705.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h4&gt;　　　　3.3.2 视图到模型&lt;/h4&gt;
&lt;p&gt;　　　　　　》自定义一个方法来处理自定义表单控件中的变化数据　　　　&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
propagateChange = (_: any) =&amp;gt; {};
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 　　　　　　》重构自定义表单控件类中的 registerOnChange 方法&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
  &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*将数据从视图传播到模型 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
  registerOnChange(fn: any): &lt;/span&gt;&lt;span&gt;void&lt;/span&gt;&lt;span&gt; {
    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.propagateChange =&lt;span&gt; fn;
  }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　　　　　》在数据变化的地方调用那个自定义的方法&lt;/p&gt;
&lt;p&gt;　　　　　　　　&lt;img src=&quot;https://images2017.cnblogs.com/blog/1057762/201801/1057762-20180131114915937-1185766271.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;　　3.4 自定义表单控件组件代码汇总&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_bece73ae-972f-4328-b7f8-c24b8ec0ba72&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_bece73ae-972f-4328-b7f8-c24b8ec0ba72&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_bece73ae-972f-4328-b7f8-c24b8ec0ba72&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;h4&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;当前计数为：{{countNumber}}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;h4&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;br &lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;button &lt;/span&gt;&lt;span&gt;md-icon-button (click)&lt;/span&gt;&lt;span&gt;=&quot;onIncrease()&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;增加&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;md-icon&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;add&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;md-icon&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;button&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;span &lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;=&quot;margin-left: 30px;&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;button &lt;/span&gt;&lt;span&gt;md-icon-button (click)&lt;/span&gt;&lt;span&gt;=&quot;onDecrease()&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;减少&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;md-icon&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;remove&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;md-icon&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;button&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;HTML&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;&lt;img id=&quot;code_img_closed_0929d7ba-89ab-4016-bb51-bcda180aa152&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_0929d7ba-89ab-4016-bb51-bcda180aa152&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_0929d7ba-89ab-4016-bb51-bcda180aa152&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;69&quot;&gt;
&lt;pre&gt;
import { Component, OnInit, forwardRef } from '@angular/core'&lt;span&gt;;
import { ControlValueAccessor, NG_VALUE_ACCESSOR } from &lt;/span&gt;'@angular/forms'&lt;span&gt;;

@Component({
  selector: &lt;/span&gt;'app-counter'&lt;span&gt;,
  templateUrl: &lt;/span&gt;'./counter.component.html'&lt;span&gt;,
  styleUrls: [&lt;/span&gt;'./counter.component.scss'&lt;span&gt;],
  providers: [
    {
        provide: NG_VALUE_ACCESSOR,
        useExisting: forwardRef(() &lt;/span&gt;=&amp;gt;&lt;span&gt; CounterComponent),
        multi: &lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;
    }
  ]
})
export class CounterComponent implements OnInit, ControlValueAccessor {

  countNumber: number &lt;/span&gt;= 0&lt;span&gt;;

  propagateChange &lt;/span&gt;= (_: any) =&amp;gt;&lt;span&gt; {};

  constructor() { }

  ngOnInit() {
  }

  onIncrease() {
    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.countNumber++&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.propagateChange(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.countNumber);
  }

  onDecrease() {
    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.countNumber--&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.propagateChange(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.countNumber);
  }

  &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*将数据从模型传输到视图 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
  writeValue(obj: any): &lt;/span&gt;&lt;span&gt;void&lt;/span&gt;&lt;span&gt; {
    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.countNumber =&lt;span&gt; obj;
  }

  &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*将数据从视图传播到模型 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
  registerOnChange(fn: any): &lt;/span&gt;&lt;span&gt;void&lt;/span&gt;&lt;span&gt; {
    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*fn其实是一个函数，当视图中的数据改变时就会调用fn指向的这个函数，从而达到将数据传播到模型的目的 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;this&lt;/span&gt;.propagateChange = fn;  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 将fn的指向赋值给this.propagateChange，在需要将改变的数据传到模型时只需要调用this.propagateChange方法即可&lt;/span&gt;
&lt;span&gt;  }

  registerOnTouched(fn: any): &lt;/span&gt;&lt;span&gt;void&lt;/span&gt;&lt;span&gt; {

  }

  setDisabledState&lt;/span&gt;?(isDisabled: &lt;span&gt;boolean&lt;/span&gt;): &lt;span&gt;void&lt;/span&gt;&lt;span&gt; {

  }

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;TS&lt;/span&gt;&lt;/div&gt;
&lt;h3&gt;　　3.5 使用自定义表单控件的那个组件的代码汇总&lt;/h3&gt;
&lt;p&gt;　　　　技巧01：如果自定义表单控件和使用自定义表单控件的组件都在不在同一个模块时需要对自定义表单控件对应组件进行导出和导入操作&lt;/p&gt;
&lt;p&gt;　　　　&lt;img src=&quot;https://images2017.cnblogs.com/blog/1057762/201801/1057762-20180131115241031-2020716479.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;&lt;img id=&quot;code_img_closed_a2bc1af0-e02c-4375-b438-fc4134781037&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_a2bc1af0-e02c-4375-b438-fc4134781037&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_a2bc1af0-e02c-4375-b438-fc4134781037&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;63&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;panel panel-primary&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;panel-heading&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;面板模板&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;panel-body&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;h3&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;面板测试内容&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;h3&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;panel-footer&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;2018-1-22 10:22:20&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;panel-primary&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;panel-heading&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;自定义提取表单控件&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;panel-body&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;form &lt;/span&gt;&lt;span&gt;#myForm&lt;/span&gt;&lt;span&gt;=ngForm&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;app-counter &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;counter&quot;&lt;/span&gt;&lt;span&gt; [(ngModel)]&lt;/span&gt;&lt;span&gt;=&quot;countNumber&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;app-counter&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;form&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;h6&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;绿线上是自定义提取的表单控件显示的内容&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;h6&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;hr &lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;=&quot;border: solid green 2px&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;h6&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;绿线下是使用自定义表单控件时表单的实时数据&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;h6&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;h3&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;表单控件的值为：{{myForm.value | json}}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;h3&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;panel-footer&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;2018-1-31 10:09:17&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;panel-primary&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;panel-heading&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;提取表单控件&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;panel-body&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;form &lt;/span&gt;&lt;span&gt;#form&lt;/span&gt;&lt;span&gt;=&quot;ngForm&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;outerCounterValue value: {{outerCounterValue}}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;app-exe-counter &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;counter&quot;&lt;/span&gt;&lt;span&gt; [(ngModel)]&lt;/span&gt;&lt;span&gt;=&quot;outerCounterValue&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;app-exe-counter&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;br &lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;button &lt;/span&gt;&lt;span&gt;md-raised-button type&lt;/span&gt;&lt;span&gt;=&quot;submit&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Submit&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;button&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;br &lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
        {{form.value | json}}
      &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;form&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;panel-footer&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;2018-1-27 21:51:45&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;panel panel-primary&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;panel-heading&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;ngIf指令测试&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;panel-body&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;button &lt;/span&gt;&lt;span&gt;md-rasied-button (click)&lt;/span&gt;&lt;span&gt;=&quot;onChangeNgifValue()&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;改变ngif变量&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;button&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;br &lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;*ngIf&lt;/span&gt;&lt;span&gt;=&quot;ngif; else ngifTrue&quot;&lt;/span&gt; &lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;h4 &lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;=&quot;background-color: red; color: white&quot;&lt;/span&gt; &lt;span&gt;&amp;gt;&lt;/span&gt;ngif变量的值为true&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;h4&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;ng-template &lt;/span&gt;&lt;span&gt;#ngifTrue&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;h4 &lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;=&quot;background-color: black; color: white&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;ngif变量的值为false&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;h4&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;ng-template&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;panel-footer&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;2018-1-27 16:58:17&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;panel panel-primary&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;panel-heading&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;RXJS使用&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;panel-body&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;h4&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;测试内容&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;h4&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;panel-footer&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;2018-1-23 21:14:49&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;panel panel-primary&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;panel-heading&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;自定义验证器&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;panel-body&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;form &lt;/span&gt;&lt;span&gt;(ngSubmit)&lt;/span&gt;&lt;span&gt;=&quot;onTestLogin()&quot;&lt;/span&gt;&lt;span&gt; [formGroup]&lt;/span&gt;&lt;span&gt;=&quot;loginForm&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;md-input-container&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;mdInput placeholder&lt;/span&gt;&lt;span&gt;=&quot;请输入登录名&quot;&lt;/span&gt;&lt;span&gt; formControlName&lt;/span&gt;&lt;span&gt;=&quot;username&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;md-input-container&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;br &lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;md-input-container&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;mdInput placeholder&lt;/span&gt;&lt;span&gt;=&quot;请输入密码&quot;&lt;/span&gt;&lt;span&gt; formControlName&lt;/span&gt;&lt;span&gt;=&quot;userpwd&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;md-input-container&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;br &lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;button &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;submit&quot;&lt;/span&gt;&lt;span&gt; md-raised-button&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;登陆&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;button&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;form&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;panel-footer&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;2018-1-23 11:06:01&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;panel panel-primary&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;panel-heading&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;响应式表单&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;panel-body&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;form &lt;/span&gt;&lt;span&gt;[formGroup]&lt;/span&gt;&lt;span&gt;=&quot;testForm&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;md-input-container&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;mdInput type&lt;/span&gt;&lt;span&gt;=&quot;text&quot;&lt;/span&gt;&lt;span&gt; placeholder&lt;/span&gt;&lt;span&gt;=&quot;请输入邮箱&quot;&lt;/span&gt;&lt;span&gt; formControlName&lt;/span&gt;&lt;span&gt;=&quot;email&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;span &lt;/span&gt;&lt;span&gt;mdSuffix&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;@163.com&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;  
      &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;md-input-container&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;br &lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;md-input-container&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;mdInput type&lt;/span&gt;&lt;span&gt;=&quot;password&quot;&lt;/span&gt;&lt;span&gt; placeholder&lt;/span&gt;&lt;span&gt;=&quot;请输入密码&quot;&lt;/span&gt;&lt;span&gt; formControlName&lt;/span&gt;&lt;span&gt;=&quot;password&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;md-input-container&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;form&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;hr &lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;h2&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;表单整体信息如下：&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;h2&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;h4&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;表单数据有效性：{{testForm.valid}}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;h4&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;h4&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;表单数据为：{{testForm.value | json}}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;h4&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;h4&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;获取单个或多个FormControl：{{testForm.controls['email'] }}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;h4&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;hr &lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;h2&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;email输入框的信息如下：&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;h2&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;h4&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;有效性：{{testForm.get('email').valid}}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;h4&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;h4&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;email输入框的错误信息为：{{testForm.get('email').errors | json}}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;h4&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;h4&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;required验证结果：{{testForm.hasError('required', 'email') | json}}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;h4&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;h4&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;minLength验证结果：{{ testForm.hasError('minLength', 'email') | json }}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;h4&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;h4&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;hello:{{ testForm.controls['email'].errors | json }}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;h4&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;hr &lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;h2&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;password输入框啊的信息如下：&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;h2&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;h4&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;有效性：{{testForm.get('password').valid}}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;h4&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;h4&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;password输入框的错误信息为：{{testForm.get('password').errors | json }}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;h4&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;h4&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;required验证结果：{{testForm.hasError('required', 'password') | json}}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;h4&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;button &lt;/span&gt;&lt;span&gt;nd-rasied-button (click)&lt;/span&gt;&lt;span&gt;=&quot;onTestClick()&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;获取数据&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;button&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;h4&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;data变量：{{data}}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;h4&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;panel-footer&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;2018-1-22 15:58:43&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; 

&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;panel panel-primary&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;panel-heading&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;利用响应式编程实现表单元素双向绑定&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;panel-body&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;md-input-container&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;mdInput  placeholder&lt;/span&gt;&lt;span&gt;=&quot;请输入姓名（响应式双向绑定）：&quot;&lt;/span&gt;&lt;span&gt; [formControl]&lt;/span&gt;&lt;span&gt;=&quot;name&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;md-input-container&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
      姓名为：{{name.value}}
    &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;panel-footer&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;2018-1-22 11:12:35&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt; --&amp;gt;

&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;panel panel-primary&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;panel-heading&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;模板表单&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;panel-body&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;md-input-container&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;mdInput placeholder&lt;/span&gt;&lt;span&gt;=&quot;随便输入点内容&quot;&lt;/span&gt;&lt;span&gt; #a&lt;/span&gt;&lt;span&gt;=&quot;ngModel&quot;&lt;/span&gt;&lt;span&gt; [(ngModel)]&lt;/span&gt;&lt;span&gt;=&quot;desc&quot;&lt;/span&gt;&lt;span&gt; name&lt;/span&gt;&lt;span&gt;=&quot;desc&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;button &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;button&quot;&lt;/span&gt;&lt;span&gt; md-icon-button mdSuffix (click)&lt;/span&gt;&lt;span&gt;=&quot;onTestNgModelClick()&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;md-icon&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;done&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;md-icon&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;button&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;md-input-container&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;h3&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;名为desc的表单控件的值为：{{ a.value }}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;h3&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;panel-footer&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;2018-1-22 10:19:31&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;panel panel-primary&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;panel-heading&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;md-chekbox的使用&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;calss&lt;/span&gt;&lt;span&gt;=&quot;panel-body&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;md-checkbox &lt;/span&gt;&lt;span&gt;#testCheckbox color&lt;/span&gt;&lt;span&gt;=&quot;primary&quot;&lt;/span&gt;&lt;span&gt; checked&lt;/span&gt;&lt;span&gt;=&quot;true&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;测试&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;md-checkbox&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;*ngIf&lt;/span&gt;&lt;span&gt;=&quot;testCheckbox.checked&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;h2&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;测试checkbox被选中啦&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;h2&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;panel-footer&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;2018-1-18 14:02:20&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;  

&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;panel panel-primary&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;panel-heading&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;md-tooltip的使用&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;panel-body&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;span &lt;/span&gt;&lt;span&gt;md-tooltip&lt;/span&gt;&lt;span&gt;=&quot;重庆火锅&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;鼠标放上去&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;panel-footer&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;2018-1-18 14:26:58&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;


&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;panel panel-primary&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;panel-heading&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;md-select的使用&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;panel-body&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;md-select &lt;/span&gt;&lt;span&gt;placeholder&lt;/span&gt;&lt;span&gt;=&quot;请选择目标列表&quot;&lt;/span&gt;&lt;span&gt; class&lt;/span&gt;&lt;span&gt;=&quot;fill-width&quot;&lt;/span&gt;&lt;span&gt; style&lt;/span&gt;&lt;span&gt;=&quot;height: 40px;&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;md-option &lt;/span&gt;&lt;span&gt;*ngFor&lt;/span&gt;&lt;span&gt;=&quot;let taskList of taskLists&quot;&lt;/span&gt;&lt;span&gt; [value]&lt;/span&gt;&lt;span&gt;=&quot;taskList.name&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;{{taskList.name}}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;md-option&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;md-select&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;panel-footer&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;2018-1-18 14:26:58&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;  

&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;panel panel-primary&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;panel-heading&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;ngNonBindable指令的使用&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;panel-body&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;h3&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;描述&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;h3&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;使用了ngNonBindable的标签，会将该标签里面的元素内容全部都看做时纯文本&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;h3&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;例子&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;h3&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;{{taskLists | json }}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;span &lt;/span&gt;&lt;span&gt;ngNonBindable&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;&amp;amp;larr;&lt;/span&gt; 这是{{taskLists | json }}渲染的内容&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;panel-footer&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;2018-1-19 09:34:26&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;HTML&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;　　　　&lt;img src=&quot;https://images2017.cnblogs.com/blog/1057762/201801/1057762-20180131115508125-1332657840.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;47&quot;&gt;&lt;img id=&quot;code_img_closed_f9128c28-c215-4d18-b753-cc92836b2eeb&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_f9128c28-c215-4d18-b753-cc92836b2eeb&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_f9128c28-c215-4d18-b753-cc92836b2eeb&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;89&quot;&gt;
&lt;pre&gt;
import { Component, OnInit, HostListener, Inject} from '@angular/core'&lt;span&gt;;
import { FormControl, FormGroup, FormBuilder, Validators } from &lt;/span&gt;'@angular/forms'&lt;span&gt;;
import { Http } from &lt;/span&gt;'@angular/http'&lt;span&gt;;
import { QuoteService } from &lt;/span&gt;'../../service/quote.service'&lt;span&gt;;

@Component({
  selector: &lt;/span&gt;'app-test01'&lt;span&gt;,
  templateUrl: &lt;/span&gt;'./test01.component.html'&lt;span&gt;,
  styleUrls: [&lt;/span&gt;'./test01.component.scss'&lt;span&gt;]
})
export class Test01Component implements OnInit {

  countNumber: number &lt;/span&gt;= 9&lt;span&gt;;

  outerCounterValue: number &lt;/span&gt;= 5&lt;span&gt;;  

  ngif &lt;/span&gt;= &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;

  loginForm: FormGroup;

  testForm: FormGroup;
  data: any; 

  name: FormControl &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; FormControl();

  desc: string &lt;/span&gt;= 'hello boy'&lt;span&gt;;

  taskLists &lt;/span&gt;=&lt;span&gt; [
    {label: &lt;/span&gt;1, name: '进行中'&lt;span&gt;},
    {label: &lt;/span&gt;2, name: '已完成'&lt;span&gt;}
  ];

  constructor(
    private formBuilder: FormBuilder,
    private http: Http,
    @Inject(&lt;/span&gt;'BASE_CONFIG'&lt;span&gt;) private baseConfig,
    private quoteService: QuoteService
  ) {}

  ngOnInit() {
    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.testForm = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; FormGroup({
      email: &lt;/span&gt;&lt;span&gt;new&lt;/span&gt; FormControl('', [Validators.required, Validators.minLength(4&lt;span&gt;)], []),
      password: &lt;/span&gt;&lt;span&gt;new&lt;/span&gt; FormControl(''&lt;span&gt;, [Validators.required], [])
    });

    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.name.valueChanges
    .debounceTime(&lt;/span&gt;500&lt;span&gt;)
    .subscribe(value &lt;/span&gt;=&amp;gt;&lt;span&gt; alert(value));

    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.loginForm = &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.formBuilder.group({
      username: [&lt;/span&gt;'', [Validators.required, Validators.minLength(4), &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.myValidator], []],
      userpwd: [&lt;/span&gt;'', [Validators.required, Validators.minLength(6&lt;span&gt;)], []]
    });

    &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.quoteService.test()
    .subscribe(resp &lt;/span&gt;=&amp;gt;&lt;span&gt; console.log(resp));

  }

  onChangeNgifValue() {
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (&lt;span&gt;this&lt;/span&gt;.ngif == &lt;span&gt;false&lt;/span&gt;&lt;span&gt;) {
      &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.ngif = &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
    } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
      &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.ngif = &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
    }
  }

  @HostListener(&lt;/span&gt;'keyup.enter'&lt;span&gt;)
  onTestNgModelClick() {
    alert(&lt;/span&gt;'提交'&lt;span&gt;);
    
  }

  onTestClick() {
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; this.data = this.testForm.get('email').value;&lt;/span&gt;
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; console.log(this.testForm.getError);&lt;/span&gt;
    console.log(&lt;span&gt;this&lt;/span&gt;.testForm.controls['email'&lt;span&gt;]);
  }

  onTestLogin() {
    console.log(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.loginForm.value);
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.loginForm.valid) {
      console.log(&lt;/span&gt;'登陆数据合法'&lt;span&gt;);
    } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
      console.log(&lt;/span&gt;'登陆数据不合法'&lt;span&gt;);
      console.log(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.loginForm.controls['username'&lt;span&gt;].errors);
      console.log(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.loginForm.get('userpwd'&lt;span&gt;).errors);
    }
  }

  myValidator(fc: FormControl): {[key: string]: any} {
    const valid &lt;/span&gt;= fc.value === 'admin'&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; valid ? &lt;span&gt;null&lt;/span&gt; : {myValidator: {requiredUsername: 'admin'&lt;span&gt;, actualUsername: fc.value}};
  }

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;TS&lt;/span&gt;&lt;/div&gt;
&lt;h3&gt;　　3.6 初始化效果展示&lt;/h3&gt;
&lt;p&gt;　　　　&lt;img src=&quot;https://images2017.cnblogs.com/blog/1057762/201801/1057762-20180131115903546-88656888.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3&gt; 　　3.7 参考文档&lt;/h3&gt;
&lt;p&gt;　　　　&lt;a href=&quot;https://segmentfault.com/a/1190000009070500&quot; target=&quot;_blank&quot;&gt;点击前往&lt;/a&gt;&lt;/p&gt;


</description>
<pubDate>Wed, 31 Jan 2018 04:00:00 +0000</pubDate>
<dc:creator>NeverCtrl_C</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/NeverCtrl-C/p/8391533.html</dc:identifier>
</item>
<item>
<title>Hyperledger Fabric CouchDB as the State Database——使用CouchDB - Aberic</title>
<link>http://www.cnblogs.com/aberic/p/8384999.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/aberic/p/8384999.html</guid>
<description>&lt;p&gt;&lt;span&gt;&lt;strong&gt;使用CouchDB作为状态数据库&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;状态数据库选项&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;状态数据库包括LevelDB和CouchDB。LevelDB是嵌入在peer进程中的默认键/值状态数据库，&lt;span class=&quot;tgt&quot; data-group=&quot;0-2&quot;&gt;CouchDB是一个可选的外部状态数据库。&lt;span class=&quot;tgt&quot; data-group=&quot;0-3&quot;&gt;与LevelDB键/值存储一样，CouchDB可以存储任何以chaincode建模的二进制数据（CouchDB附件函数在内部用于非json二进制数据）。但是，当chaincode值（例如，资产）被建模为JSON数据时，作为JSON文档存储，CouchDB支持对chaincode数据进行丰富的查询。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;tgt&quot; data-group=&quot;0-2&quot;&gt;&lt;span class=&quot;tgt&quot; data-group=&quot;0-3&quot;&gt;&lt;span class=&quot;tgt&quot; data-group=&quot;0-0&quot;&gt;LevelDB和CouchDB都支持核心chaincode操作，例如获取和设置一个键（资产），并根据键进行查询。&lt;span class=&quot;tgt&quot; data-group=&quot;0-1&quot;&gt;键可以通过范围查询，可以对组合键进行建模，以支持针对多个参数的等价查询。&lt;span class=&quot;tgt&quot; data-group=&quot;0-2&quot;&gt;例如，作为所有者的组合键，资产id可以用于查询某个实体拥有的所有资产。&lt;span class=&quot;tgt&quot; data-group=&quot;0-3&quot;&gt;这些基于key的查询可以用于针对账本的只读查询，以及更新总账的事务。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;tgt&quot; data-group=&quot;0-2&quot;&gt;&lt;span class=&quot;tgt&quot; data-group=&quot;0-3&quot;&gt;如果将资产建模为JSON并使用CouchDB，那么就可以使用chaincode中的CouchDB JSON查询语言对chaincode数据值执行复杂的富查询，这些类型的查询对于理解账本上的内容很有帮助。对于这些类型的查询，事务协议响应通常对客户端应用程序有用，但通常不会作为事务提交到排序服务。事实上，也无法保证结果集在chaincode执行与富查询提交时间之间的稳定性，因此使用富查询的结果去执行最终的事务更新操作是不合适的，除非可以保证结果集在chaincode执行时间与提交时间之间的稳定性，或者可以处理在后续交易中的潜在变化。例如，如果对Alice所拥有的所有资产执行一个富查询并将其传输给Bob，那么一个新的资产可能会被另一个事务分配给Alice，这是在chaincode执行时间和提交时间之间的另一个事务，可能此过程中会错过这个“虚值”。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;tgt&quot; data-group=&quot;0-2&quot;&gt;&lt;span class=&quot;tgt&quot; data-group=&quot;0-3&quot;&gt;CouchDB作为一个独立的数据库进程与peer一起运行，因此在设置、管理和操作方面有额外的考虑。我们&lt;span class=&quot;tgt&quot; data-group=&quot;0-1&quot;&gt;可以考虑从默认的嵌入式LevelDB开始，如果需要额外的复杂的富查询，可以转移到CouchDB。&lt;span class=&quot;tgt&quot; data-group=&quot;0-2&quot;&gt;将chaincode资产数据建模为JSON是一种很好的做法，这样我们就可以在将来执行需要的复杂的富查询。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span class=&quot;tgt&quot; data-group=&quot;0-2&quot;&gt;&lt;span class=&quot;tgt&quot; data-group=&quot;0-3&quot;&gt;使用Chaincode中的&lt;strong&gt;&lt;span class=&quot;tgt&quot; data-group=&quot;0-2&quot;&gt;&lt;span class=&quot;tgt&quot; data-group=&quot;0-3&quot;&gt;CouchDB&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;大多数chaincode的api都可以使用LevelDB或CouchDB状态数据库，例如GetState、PutState、GetStateByRange以及GetStateByPartialCompositeKey等。只有当使用CouchDB作为状态数据库和在chaincode中作为JSON的模型资产时，可以使用GetQueryResult API和传递一个CouchDB查询字符串来对状态数据库中的JSON执行富查询。查询字符串遵循&lt;a href=&quot;http://docs.couchdb.org/en/2.1.1/api/database/find.html&quot; target=&quot;_blank&quot;&gt;CouchDB JSON查询语法&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;fabric项目中的&lt;a href=&quot;https://github.com/hyperledger/fabric-samples/blob/master/chaincode/marbles02/go/marbles_chaincode.go&quot; target=&quot;_blank&quot;&gt;marbles02&lt;/a&gt;示例演示了使用来自chaincode的CouchDB查询。它包括一个getMarblesByOwner()函数，它通过将一个owner id传递给chaincode来演示参数化查询，然后查询与“marble”docType匹配的JSON文档的状态数据，以及owner id使用JSON查询语法：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
{&lt;br/&gt;　　&quot;selector&quot;:{&lt;br/&gt;　　　　&quot;docType&quot;:&quot;marble&quot;,&lt;br/&gt;　　　　&quot;owner&quot;:&amp;lt;OWNER_ID&amp;gt;&lt;br/&gt;　　}&lt;br/&gt;}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;为了使JSON查询更高效，并且对于任何具有排序的JSON查询，都需要使用CouchDB中的索引。索引可以和chaincode一起打包 /META-INF/statedb/couchdb/indexes目录。&lt;span class=&quot;tgt&quot; data-group=&quot;0-2&quot;&gt;每个索引必须在其自己的文本文件中通过扩展&lt;span class=&quot;src highlight&quot; data-group=&quot;0-2&quot;&gt;*.&lt;span class=&quot;src&quot; data-group=&quot;0-3&quot;&gt;json被定义，其中索引定义为JSON格式并引用CouchDB索引JSON语法，例如，为了支持上面的marble查询，提供了一个关于docType和所有者字段的示例索引：&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
{&lt;br/&gt;　　&quot;index&quot;:{&lt;br/&gt;　　　　&quot;fields&quot;:[&lt;br/&gt;　　　　　　&quot;data.docType&quot;,&lt;br/&gt;　　　　　　&quot;data.owner&quot;&lt;br/&gt;　　　　]&lt;br/&gt;　　},&lt;br/&gt;　　&quot;ddoc&quot;:&quot;indexOwnerDoc&quot;, &lt;br/&gt;　　&quot;name&quot;:&quot;indexOwner&quot;,&lt;br/&gt;　　&quot;type&quot;:&quot;json&quot;&lt;br/&gt;}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/hyperledger/fabric-samples/blob/master/chaincode/marbles02/go/META-INF/statedb/couchdb/indexes/indexOwner.json&quot; target=&quot;_blank&quot;&gt;这里&lt;/a&gt;可以找到示例索引。&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;&lt;span class=&quot;tgt&quot; data-group=&quot;0-0&quot;&gt;注意：在1.1 alpha中，必须为索引定义中引用的每个字段指定“数据”封装器。&lt;span class=&quot;tgt&quot; data-group=&quot;0-1&quot;&gt;在随后的版本中，指定“数据”封装器的需求可能会被取消。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt; 在chaincode的META-INF/statedb/couchdb/indexes目录中的任何索引都将与chaincode一起被打包和安装在peer上。当chaincode即安装在peer上，且又在peer的channel上实例化时，该索引将自动部署到peer的channel状态数据库（如果已配置为使用CouchDB）。如果是先安装了chaincode，然后才在channel上实例化该chaincode，那么该索引将会在chaincode实例化的时候进行部署。如果chaincode已经在一个channel上实例化了，然后又在一个peer上安装了这个chaincode，该索引还是会在chaincode实例化的时候进行部署。&lt;/p&gt;
&lt;p&gt;在部署时，索引将自动被chaincode查询利用。&lt;span class=&quot;tgt&quot; data-group=&quot;0-1&quot;&gt;CouchDB可以根据查询中使用的字段自动确定要使用的索引。&lt;span class=&quot;tgt&quot; data-group=&quot;0-2&quot;&gt;或者，在选择器查询中，可以使用use_index关键字指定索引。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;tgt&quot; data-group=&quot;0-0&quot;&gt;在安装的chaincode的后续版本中可能存在相同的索引。&lt;span class=&quot;tgt&quot; data-group=&quot;0-1&quot;&gt;要更改索引，使用相同的索引名称，但要更改索引定义。在安装/实例化，索引定义会重新部署到peer的状态数据库。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;tgt&quot; data-group=&quot;0-0&quot;&gt;&lt;span class=&quot;tgt&quot; data-group=&quot;0-1&quot;&gt;如果所在channle已经拥有大量的数据，并且随后安装了chaincode，那么索引的创建在实例化上可能需要一些时间。类似地，如果channel已经拥有大量的数据并且实例化了后续版本的chaincode，那么创建索引也可能需要一些时间。所以需要尽量避免在这些时间段内调用查询状态数据库的chaincode函数，因为当索引被初始化时，chaincode查询可能会超时。在事务处理期间，因为块被提交给账本总账，所以索引将自动刷新。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span class=&quot;tgt&quot; data-group=&quot;0-0&quot;&gt;&lt;span class=&quot;tgt&quot; data-group=&quot;0-1&quot;&gt;CouchDB配置&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;通过将状态数据库配置选项从goleveldb更改为CouchDB，可以将CouchDB作为状态数据库启用。此外，couchDBAddress需要配置为指向由peer使用的CouchDB。如果将CouchDB配置一个用户名和密码，那么用户名和密码属性应该包含管理员用户名和密码。在couchDBConfig中提供了更多的选项，并在适当的地方进行了记录。在重启peer之后，修改过的&lt;span class=&quot;src&quot; data-group=&quot;0-4&quot;&gt;core.&lt;span class=&quot;src highlight&quot; data-group=&quot;0-5&quot;&gt;yaml将会立即生效。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;tgt&quot; data-group=&quot;0-0&quot;&gt;&lt;span class=&quot;tgt&quot; data-group=&quot;0-1&quot;&gt;&lt;span class=&quot;tgt&quot; data-group=&quot;0-0&quot;&gt;当然还可以通过docker环境变量来覆盖core.&lt;span class=&quot;tgt highlight&quot; data-group=&quot;0-1&quot;&gt;yaml值，例如CORE_LEDGER_STATE_STATEDATABASE和CORE_LEDGER_STATE_COUCHDBCONFIG_COUCHDBADDRESS。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;tgt&quot; data-group=&quot;0-0&quot;&gt;&lt;span class=&quot;tgt&quot; data-group=&quot;0-1&quot;&gt;&lt;span class=&quot;tgt&quot; data-group=&quot;0-0&quot;&gt;&lt;span class=&quot;tgt highlight&quot; data-group=&quot;0-1&quot;&gt;以下是来自core.yaml的状态数据库选项：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;state:
  # stateDatabase - options are &lt;/span&gt;&quot;goleveldb&quot;, &quot;CouchDB&quot;&lt;span&gt;
  # goleveldb - default state database stored in goleveldb.
  # CouchDB - store state database in CouchDB
  stateDatabase: goleveldb
  couchDBConfig:
     # It is recommended to run CouchDB on the same server as the peer, and
     # not map the CouchDB container port to a server port in docker-compose.
     # Otherwise proper security must be provided on the connection between
     # CouchDB client (on the peer) and server.
     couchDBAddress: couchdb:&lt;/span&gt;5984&lt;span&gt;
     # This username must have read and write authority on CouchDB
     username:
     # The password is recommended to pass as an environment variable
     # during start up (e.g. LEDGER_COUCHDBCONFIG_PASSWORD).
     # If it is stored here, the file must be access control protected
     # to prevent unintended users from discovering the password.
     password:
     # Number of retries for CouchDB errors
     maxRetries: &lt;/span&gt;3&lt;span&gt;
     # Number of retries for CouchDB errors during peer startup
     maxRetriesOnStartup: &lt;/span&gt;10&lt;span&gt;
     # CouchDB request timeout (unit: duration, e.g. 20s)
     requestTimeout: 35s
     # Limit on the number of records to return per query
     queryLimit: &lt;/span&gt;10000
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span class=&quot;tgt&quot; data-group=&quot;0-0&quot;&gt;&lt;span class=&quot;tgt&quot; data-group=&quot;0-1&quot;&gt;CouchDB被托管在docker容器中，通过使用Docker Compose脚本来利用Hyperledger Fabric设置CouchDB的username和password的能力，通过已有的环境变量设置，即COUCHDB_USER和COUCHDB_PASSWORD&lt;span class=&quot;Apple-converted-space&quot;&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;环境变量。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;tgt&quot; data-group=&quot;0-0&quot;&gt;&lt;span class=&quot;tgt&quot; data-group=&quot;0-1&quot;&gt;&lt;span class=&quot;tgt&quot; data-group=&quot;0-0&quot;&gt;对于在使用Fabric提供的docker映像之外的CouchDB安装，本地安装。&lt;span class=&quot;tgt&quot; data-group=&quot;0-1&quot;&gt;必须编辑ini文件以设置admin用户名和密码。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Docker Compose脚本只在创建容器时设置用户名和密码。如果要在容器创建后更改用户名或密码，则必须对本地.ini文件进行编辑。&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;注意：在每个peer启动时都读取CouchDB的peer选项。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span class=&quot;tgt&quot; data-group=&quot;0-0&quot;&gt;&lt;span class=&quot;tgt&quot; data-group=&quot;0-1&quot;&gt;补充&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;tgt&quot; data-group=&quot;0-0&quot;&gt;&lt;span class=&quot;tgt&quot; data-group=&quot;0-1&quot;&gt;在&lt;a href=&quot;http://www.cnblogs.com/aberic/p/7772041.html&quot; target=&quot;_blank&quot;&gt;Hyperledger Fabric 1.0 从零开始（九）——Fabric多节点集群生产启动&lt;/a&gt;中已经设置了peer和cli的启动配置，其中没有加入couchdb，这里补充下一个新的peer编写方法，希望对各位有帮助。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;tgt&quot; data-group=&quot;0-0&quot;&gt;&lt;span class=&quot;tgt&quot; data-group=&quot;0-1&quot;&gt;后续在写到ca的时候也会将ca启动部分加入进来。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;# Copyright IBM Corp. All Rights Reserved.
#
# SPDX-License-Identifier: Apache-&lt;/span&gt;2.0&lt;span&gt;
#

version: &lt;/span&gt;'2'&lt;span&gt;

services:

  couchdb:
    container_name: couchdb
    image: hyperledger/fabric-couchdb
    # Comment/Uncomment the port mapping if you want to hide/expose the CouchDB service,
    # for example map it to utilize Fauxton User Interface in dev environments.
    ports:
      - &lt;/span&gt;&quot;5984:5984&quot;&lt;span&gt;

  peer0.xxx.example.com:
    container_name: peer0.xxx.example.com
    image: hyperledger/fabric-peer
    environment:
      - CORE_LEDGER_STATE_STATEDATABASE=CouchDB
      - CORE_LEDGER_STATE_COUCHDBCONFIG_COUCHDBADDRESS=couchdb:&lt;/span&gt;5984&lt;span&gt;

      - CORE_PEER_ID=peer0.xxx.example.com
      - CORE_PEER_NETWORKID=anti
      - CORE_PEER_ADDRESS=peer0.xxx.example.com:&lt;/span&gt;7051&lt;span&gt;
      - CORE_PEER_CHAINCODELISTENADDRESS=peer0.xxx.example.com:&lt;/span&gt;7052&lt;span&gt;
      - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer0.xxx.example.com:&lt;/span&gt;7051&lt;span&gt;
      - CORE_PEER_LOCALMSPID=xxxMSP

      - CORE_VM_ENDPOINT=unix:&lt;/span&gt;&lt;span&gt;///&lt;/span&gt;host/var/run/docker.sock
&lt;span&gt;      # the following setting starts chaincode containers on the same
      # bridge network as the peers
      # https:&lt;/span&gt;//docs.docker.com/compose/networking/
&lt;span&gt;      - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=anti_default
      - CORE_LOGGING_LEVEL=ERROR
      # - CORE_LOGGING_LEVEL=DEBUG
      - CORE_PEER_GOSSIP_SKIPHANDSHAKE=true
      - CORE_PEER_GOSSIP_USELEADERELECTION=true
      - CORE_PEER_GOSSIP_ORGLEADER=false
      - CORE_PEER_PROFILE_ENABLED=false
      - CORE_PEER_TLS_ENABLED=false
      - CORE_PEER_TLS_CERT_FILE=/etc/hyperledger/fabric/tls/server.crt
      - CORE_PEER_TLS_KEY_FILE=/etc/hyperledger/fabric/tls/server.key
      - CORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/fabric/tls/ca.crt
    volumes:
        - /var/run/:/host/var/run/
        - ./crypto-config/peerOrganizations/xxx.example.com/peers/peer0.xxx.example.com/msp:/etc/hyperledger/fabric/msp
        - ./crypto-config/peerOrganizations/xxx.example.com/peers/peer0.xxx.example.com/tls:/etc/hyperledger/fabric/tls
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer
    command: peer node start
    ports:
      - &lt;/span&gt;7051:7051&lt;span&gt;
      - &lt;/span&gt;7052:7052&lt;span&gt;
      - &lt;/span&gt;7053:7053&lt;span&gt;
    depends_on:
      - couchdb
    networks:
      default:
        aliases:
          - anti
    extra_hosts:
     - &lt;/span&gt;&quot;orderer0.example.com:x.x.x.41&quot;&lt;span&gt;
     - &lt;/span&gt;&quot;orderer1.example.com:x.x.x.42&quot;&lt;span&gt;
     - &lt;/span&gt;&quot;orderer2.example.com:x.x.x.43&quot;&lt;span&gt;

  cli:
    container_name: cli
    image: hyperledger/fabric-tools
    tty: true
    environment:
      - GOPATH=/opt/gopath
      - CORE_VM_ENDPOINT=unix:&lt;/span&gt;&lt;span&gt;///&lt;/span&gt;host/var/run/docker.sock
&lt;span&gt;      - CORE_LOGGING_LEVEL=ERROR
      # - CORE_LOGGING_LEVEL=DEBUG
      - CORE_PEER_ID=cli
      - CORE_PEER_ADDRESS=peer0.xxx.example.com:&lt;/span&gt;7051&lt;span&gt;
      - CORE_PEER_LOCALMSPID=xxxMSP
      - CORE_PEER_TLS_ENABLED=false
      - CORE_PEER_TLS_CERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/xxx.example.com/peers/peer0.xxx.example.com/tls/server.crt
      - CORE_PEER_TLS_KEY_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/xxx.example.com/peers/peer0.xxx.example.com/tls/server.key
      - CORE_PEER_TLS_ROOTCERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/xxx.example.com/peers/peer0.xxx.example.com/tls/ca.crt
      - CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/xxx.example.com/users/Admin@xxx.example.com/msp
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer
    volumes:
        - /var/run/:/host/var/run/
        - ./chaincode/go/:/opt/gopath/src/github.com/hyperledger/fabric/antimoth/anti/chaincode/go
        - ./crypto-config:/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/
        - ./scripts:/opt/gopath/src/github.com/hyperledger/fabric/peer/scripts/
        - ./channel-artifacts:/opt/gopath/src/github.com/hyperledger/fabric/peer/channel-artifacts
    depends_on:
      - peer0.xxx.example.com
    extra_hosts:
     - &lt;/span&gt;&quot;orderer0.example.com:x.x.x.41&quot;&lt;span&gt;
     - &lt;/span&gt;&quot;orderer1.example.com:x.x.x.42&quot;&lt;span&gt;
     - &lt;/span&gt;&quot;orderer2.example.com:x.x.x.43&quot;&lt;span&gt;
     - &lt;/span&gt;&quot;peer0.xxxx.example.com:x.x.xx.251&quot;
&lt;/pre&gt;&lt;/div&gt;
</description>
<pubDate>Wed, 31 Jan 2018 03:29:00 +0000</pubDate>
<dc:creator>Aberic</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/aberic/p/8384999.html</dc:identifier>
</item>
</channel>
</rss>