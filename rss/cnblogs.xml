<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>Shodan在渗透测试及漏洞挖掘中的一些用法 - 喵大人-sec</title>
<link>http://www.cnblogs.com/miaodaren/p/7904484.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/miaodaren/p/7904484.html</guid>
<description>&lt;p&gt;         渗透测试中，第一阶段就是信息搜集，这一阶段完成的如何决定了你之后的进行是否顺利，是否更容易。而关于信息收集的文章网上也是有太多。今天我们来通过一些例子来讲解如何正确使用Shodan这一利器。&lt;/p&gt;
&lt;p&gt;         想要利用好这一利器，首先得知道他是什么，Shodan是一款网络空间搜索引擎，和我们常见的百度谷歌不同，他主要搜索的是存在于互联网中的设备，服务器、摄像头、工控设备、智能家居等，都是他的目标。Shodan不仅可以发现这些设备，并且可以识别出其版本，位置，端口，服务等一些信息，并且进行了一些相应分类。&lt;/p&gt;
&lt;p&gt;         Shodan分免费账户和会员账户，免费账户对一些标签的搜索和多标签关联搜索有限制，而会员的话就可以任意进行一些搜索，所以想要搜到自己想要的结果最好还是有一个会员比较方便，Shodan在每个黑色星期五的时候会进行打折（每年11月第四个周五），平时需要49美元的会员活动时只需要5美元，需要的小伙伴可以关注下。&lt;/p&gt;
&lt;p&gt;         一个系统的受攻击面越多，被入侵的风险也就越大，Shodan可以很好的帮你找到其他攻击面。下面开始正式来讲一下如何在平时的渗透测试中利用好Shodan，注意学习思考问题的方法，而不只是简单的搜索语句。&lt;/p&gt;

&lt;p&gt;         场景1：想搜索美国所有的ElasticSearch服务器&lt;/p&gt;
&lt;p&gt;         ElasticSearch是一个基于Lucene的搜索服务器。它提供了一个分布式多用户能力的全文搜索引擎，基于RESTful web接口。设计用于云计算中，能够达到实时搜索，稳定，可靠，快速，安装使用方便。为什么要搜索他，因为他有多个漏洞，未授权访问、目录遍历、任意命令执行等，搜索wooyun镜像也可以看到有不少结果。&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1278074/201711/1278074-20171127150218206-727812272.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　要实现这个场景，首先要了解一些关于ElasticSearch服务器的基本知识，这里可以直接百度。&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1278074/201711/1278074-20171127150308659-2043668499.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　通过百度我们可以了解到ElasticSearch的默认端口是9200，这里会用到一个基础语句&quot;port&quot;，这时我们可以先在Shodan进行相应搜索，看会返回什么。在Shodan中输入”port:9200”来进行搜索，&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1278074/201711/1278074-20171127150644706-1946956971.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;　　可以看到返回，共搜索到215669个结果，重点学习的地方在左边这个分类统计，&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1278074/201711/1278074-20171127150943190-34183851.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　我们想要的是美国的ElasticSearch服务器，可以看到左边的统计中已经对一些常用字段进行了分类统计，有国家、组织、操作系统及产品，这里已经看到了我们所需要的字段，只需要点击相应的标签，即可进行进一步的细化搜索。因为并不是所有的9200端口都是ElasticSearch服务，也有将默认9200端口修改了的。所以这里依次点击TOP PRODUCTS中的&quot;Elastic&quot;和TOP COUNTRIES中United States，并且删掉port:&quot;9200&quot;，注意观察搜索框中的关键字变化：&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1278074/201711/1278074-20171127152241175-2067175873.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1278074/201711/1278074-20171127152258753-1554677228.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;　　到这里我们可以看到已经实现了我们的目的，找到了美国的ElasticSearch服务器，包括默认端口和非默认端口。当搜索结果细化到一定程度时，左边的统计也会有相应的变化，现在可以看到已经变成了对城市、组织、操作系统、和ElasticSearch版本的一个统计。至此我们已经学到了两个新的关键字：&lt;/p&gt;
&lt;p&gt;　　“product”  对某一产品进行搜索&lt;/p&gt;
&lt;p&gt;　　“country”  搜索某个国家的资产，&lt;/p&gt;
&lt;p&gt;　　当我们需要多个词同时搜索时，只需要在每个关键字间加空格分割就行，当不需要某个词时，可以用”-”加上关键词来进行去除，比如不想要Amazon的ElasticSearch服务器，就可以”-org:amazon”，如何知道org这个关键词的？同样是左边的统计，当我们鼠标移动到Amazon时，可以看到他相应的链接，已经给出了关键词&lt;/p&gt;
&lt;p&gt; 　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1278074/201711/1278074-20171127151530925-1569750884.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;         上面是根据已有关键字可以搜到的内容（port）来进行搜索的一个例子，下面我们来看另一个场景。&lt;/p&gt;
&lt;p&gt;         场景2：搜索所有的搭建了Supervisor的服务器&lt;/p&gt;
&lt;p&gt;         Supervisor是一个用Python写的进程管理工具，可以很方便的用来启动、重启、关闭进程。我们为什么要搜索这个东西呢，当然是因为他有问题。今年9月份的时候Supervisor爆出了一个远程代码执行漏洞CVE-2017-11610，我们想要复现一下漏洞（滑稽）。按照上一个场景的经验，当我们想要通过端口来搜索Supervisor时，我们百度发现他并没有默认端口，所以就需要用的另一种更常用的方法。来看我是怎么找的：&lt;/p&gt;
&lt;p&gt;         首先在Shodan中搜索supervisor，看返回什么。&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1278074/201711/1278074-20171127152757300-212356552.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;　　可以看到返回了1363条结果，但是根据右边的返回信息来看，好像有些并不是我们需要的东西，这时候就需要进一步细化搜索结果，来找一个能够精确定位的关键词。这里我们多打开一些服务器，来寻找我们需要的supervisor服务器，这里有一个是我们需要的：&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1278074/201711/1278074-20171127152917644-2068265279.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;　　打开后发现这个就是我们需要的Supervisor服务器，那么我们用什么来定位这类服务器呢，这里就要用到一些新的语法：&lt;/p&gt;
&lt;p&gt;　　“http.title”  根据网站banner搜索&lt;/p&gt;
&lt;p&gt;　　很明显我们可以看到supervisor服务器有个很明显的特征，就是他的title位置是”Supervisor Status”，那我们是不是可以用http.title:&quot;Supervisor Status&quot;来精确定位所有的supervisor服务器？来看返回结果：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1278074/201711/1278074-20171127153012222-166116850.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;　　可以看到返回了44个结果，而且右边的预览相应的也都只剩下下了title为Supervisor Status的服务器，至此我们已经大致找到了我们需要的结果，当然Shodan作为一款搜索引擎，也不一定就能够收录所有的设备，所以有一些遗漏也是正常的。&lt;/p&gt;
&lt;p&gt;         接下来讲一下我们白帽子最喜欢的东西，搜索一个公司相关的服务器。&lt;/p&gt;
&lt;p&gt;         首先我们都知道，一般的网站有自己icon，比如百度、阿里、腾讯等，而一般公司会对其所有网站的title中都加上这个icon，来增加统一性，也方便用户识别，如下如所示：&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1278074/201711/1278074-20171127153059409-367758397.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;　　Shodan针对网站的icon也有自己的搜索关键词，可以搜索到所有带有统一icon的服务器，一般都会是公司自己的资产了，然后大家就可以对这些服务器进行端口扫描等进一步的漏洞挖掘。这里用到的关键字为：”http.favicon.hash”，hash后面为一串独有的数字，因为并不知道Shodan是如何给每个icon分配hash的，所以这里我来说一下我自己的方法。&lt;/p&gt;
&lt;p&gt;         首先要知道在Shodan结果中在哪里寻找这个标记，如下如所示，箭头位置就是这个网页的icon：&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1278074/201711/1278074-20171127153207487-435794432.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;　　因为这个icon只能算是对公司资产的一种标识，所以有些网站可能并没有带有icon，但是有些常用手段收集的服务器可能会漏掉这些，所以这个方法还是有一定的用途，这里拿支付宝举例。&lt;/p&gt;
&lt;p&gt;       我们尝试性的输入一些与支付宝相关的内容来进行搜索，如Alipay，支付宝，www.alipay.com等，当我们搜索到&lt;a href=&quot;http://www.alipay.com/&quot;&gt;www.alipay.com&lt;/a&gt;时，可以看到结果内已经有携带支付宝icon的网站了：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1278074/201711/1278074-20171127153259690-272857583.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt;　　这个时候需要做的就是，点击这个icon图标，就像我们之前细化场景一中的搜索结果一样，然后将输入的&lt;a href=&quot;http://www.alipay.com/&quot;&gt;www.alipay.com&lt;/a&gt;删掉，就可以得到所有携带该icon的网站了。&lt;/p&gt;

&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1278074/201711/1278074-20171127153509581-1949755219.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;　　当然对于公司资产的收集，除了上面的方法，还有其他方法，这里再说一种。一般大型的公司都会购买一个或几个网段来使用，并且会进行等级，那么这里就可以用到我们刚才提到过的”org”语法来进行搜索，这里拿阿里巴巴进行举例。&lt;/p&gt;
&lt;p&gt;　　直接在Shodan中搜索阿里巴巴，看返回什么：&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1278074/201711/1278074-20171127153613315-984100138.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　主意我框起来的地方，这个位置显示的就是他的所属组织，那么根据我们上面讲的，这里我们点击Alibaba，然后将我们刚才输入的alibaba删掉，然后只看中国的服务器，再次搜索，看会得到什么。&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1278074/201711/1278074-20171127153645878-1847645233.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;　　这样就得到了所有阿里巴巴集团网段的服务器，但由于阿里业务巨大，再加上有阿里云业务，所以结果中并不都是阿里自家的东西，这里只是讲一个大致思路，具体怎么进一步利用，还需要自己思考。&lt;/p&gt;
&lt;p&gt;　　当我们得到了我们需要的结果时，如果结果数量巨大，下一步需要考虑可能就是怎么导出结果了，这里说一下，Shodan是自带了数据导出功能的，但是需要付费，当注册成为会员时，会默认送20次，导出成功时会给你邮箱发一封邮件，但是我认为他比较坑，因为有时候导出一个数据可能需要好几天的时间。想到爬虫的同学可以尝试一下。。因为我试过，但是因为有反爬虫并没有成功，当发现为爬虫时，会限制你的搜索到最多20页，不管你是不是会员。我想到的解决办法是将每一页网页都保存在本地，然后在本地进行提取，还怕什么反爬虫。&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1278074/201711/1278074-20171127154845550-1394741500.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;最后在列举一些比较常用的搜索语句来供大家参考，什么时候用什么样的语句，完全取决于你怎么去想。&lt;/p&gt;
&lt;p&gt;　　asn      　　 　　 区域自治编号      &lt;/p&gt;
&lt;p&gt;　　port             　  　端口                           &lt;/p&gt;
&lt;p&gt;　　org       　　        ip所属组织机构&lt;/p&gt;
&lt;p&gt;　　os             　　   操作系统类型&lt;/p&gt;
&lt;p&gt;　　http.html    　　   网页内容&lt;/p&gt;
&lt;p&gt;　　html.title     　　 网页标题&lt;/p&gt;
&lt;p&gt;　　http.server  　　 http请求返回中server的类型&lt;/p&gt;
&lt;p&gt;　　http.status      　 http请求返回响应码的状态&lt;/p&gt;
&lt;p&gt;　　city           　　   城市&lt;/p&gt;
&lt;p&gt;　　country      　　  国家&lt;/p&gt;
&lt;p&gt;　　product               所使用的软件或产品&lt;/p&gt;
&lt;p&gt;　　vuln         　　   CVE漏洞编号，例如：vuln：CVE-2014-0723&lt;/p&gt;
&lt;p&gt;　　net          　　    搜索一个网段，例如：123.23.1.0/24&lt;/p&gt;
&lt;p&gt;　　其实Shodan的关键词还有很多，经纬度、ssl信息、smb版本号、区号、返回码状态等等，只要发挥你的想象力，从结果中寻找结果，学会举一反三，就总能得到你想要的。：)&lt;/p&gt;
</description>
<pubDate>Mon, 27 Nov 2017 07:51:00 +0000</pubDate>
<dc:creator>喵大人-sec</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/miaodaren/p/7904484.html</dc:identifier>
</item>
<item>
<title>China Azure中部署Kubernetes(K8S)集群 - 铭的随记</title>
<link>http://www.cnblogs.com/stonehe/p/7904452.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/stonehe/p/7904452.html</guid>
<description>
&lt;p&gt;目前China Azure还不支持容器服务(ACS)，使用名称“az acs create --orchestrator-type Kubernetes -g zymtest -n kubertest001 --generate-ssh-keys”尝试创建，会提示如下报错：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
C:\Users\Administrator&amp;gt;az acs create --orchestrator-type Kubernetes -g zymtest -n kubertest001 --generate-ssh-&lt;span&gt;keys

Created SSH key files: C:\Users\Administrator\.ssh\id_rsa,C:\Users\Administrator\.ssh\id_rsa.pub

Deployment failed. Correlation ID: df080d87&lt;/span&gt;-80c7-4b89-9f19-42eaf87d5a3c. {00.0000% -&lt;span&gt; Starting ..

  &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;error&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: {

    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;code&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;InvalidResourceNamespace&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,

    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;message&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;The resource namespace 'Microsoft.ContainerService' is invalid.&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;

  }

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;可以采用类似本地部署K8S的方法在Azure平台部署Kubernete，如下为笔者整理的在Azure VM中部署K8S的方法，仅供大家参考：&lt;/p&gt;

&lt;p&gt;1.部署一台Linux虚拟机，如下以Ubuntu16.04为例进行说明  &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1219679/201711/1219679-20171127134459315-1845829499.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;2.需要在该VM上安装Azure CLI 2.0&lt;/p&gt;

&lt;p&gt;3.下载并安装 Azure 容器服务引擎（acs-engine）  【建议在Ubuntu 16.04 中使用acs-engine 0.8.0进行部署，该系统版本是经过测试的较稳定版本】&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;wget&lt;/span&gt; https:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;github.com/Azure/acs-engine/releases/download/v0.8.0/acs-engine-v0.8.0-linux-amd64.tar.gz&lt;/span&gt;
&lt;span&gt;tar&lt;/span&gt; zxvf acs-engine-v0.&lt;span&gt;8.0&lt;/span&gt;-linux-amd64.&lt;span&gt;tar&lt;/span&gt;&lt;span&gt;.gz
cd acs&lt;/span&gt;-engine-v0.&lt;span&gt;8.0&lt;/span&gt;-linux-amd64/
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;4.创建资源组并获取服务主体身份（service principal）&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#设置China Azure环境
az cloud set &lt;/span&gt;-&lt;span&gt;n AzureChinaCloud

#随后输入账户密码
az &lt;/span&gt;&lt;span&gt;login&lt;/span&gt; -u &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;***@***.partner.onmschina.cn&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;

#设置即将操作资源的订阅，该处填写的为订阅ID
az account set &lt;/span&gt;--subscription &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;******&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;

#创建资源组
az group create &lt;/span&gt;-n hlmrgk8sssd02 -&lt;span&gt;l chinanorth

#创建服务主体并将其权限赋予特定的资源组，该资源组将用户创建K8S的所有Azure资源，以下生成的appId是后面“kubernetes.json”模板中的ClientID，password为Secret
az ad sp create&lt;/span&gt;-&lt;span&gt;for&lt;/span&gt;-rbac --role=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Contributor&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; --scopes=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/subscriptions/******/resourceGroups/hlmrgk8sssd02&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
{
&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;appId&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;******&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;displayName&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;azure-cli-2017-11-27-02-24-31&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;http://azure-cli-2017-11-27-02-24-31&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;password&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;******&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;tenant&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;******&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;5.生成模板&lt;/p&gt;
&lt;p&gt;a.下载一个Kubernetes的示例集群模板：wget https://raw.githubusercontent.com/Azure/acs-engine/master/examples/kubernetes.json&lt;/p&gt;
&lt;p&gt;b.编辑下载的模板，以下带有注释行信息需要进行添加或根据实际情况进行修改：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;49&quot;&gt;
&lt;pre&gt;
&lt;span&gt;{
  &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;apiVersion&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;vlabs&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
  &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;location&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;chinanorth&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,  #指定K8S集群节点机器的部署问题，China Azure中的可选项为“chinanorth”或“chinaeast”
  &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;properties&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: {
    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;orchestratorProfile&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: {
      &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;orchestratorType&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Kubernetes&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
      &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;orchestratorRelease&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;1.6&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
    },
    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;masterProfile&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: {
      &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;count&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;1&lt;/span&gt;&lt;span&gt;,  #master节点机器的默认数量
      &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;dnsPrefix&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;hlmnk8s03&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,  #master节点机器的DNS名称前缀，同时也是_output目录下生成新目录的名称
      &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;vmSize&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Standard_DS2&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;  #master节点机器的尺寸大小
    },
    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;agentPoolProfiles&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: [
      {
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;agentpool3&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;count&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;2&lt;/span&gt;&lt;span&gt;,  #agent节点机器的默认数量
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;vmSize&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Standard_DS2_v2&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,  #agent节点机器的尺寸大小
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;availabilityProfile&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;AvailabilitySet&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
      }
    ],
    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;linuxProfile&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: {
      &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;adminUsername&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;hlmstone&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,  #节点机器的登陆用户名
      &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ssh&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: {
        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;publicKeys&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: [
          {
            &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;keyData&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ssh-rsa ******&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;  #连接节点机器的ssh公钥
          }
        ]
      }
    },
    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;servicePrincipalProfile&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: {
      &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;clientId&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;******&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,  #创建服务主体时生产的“appId”
      &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;secret&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;: &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;******&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;  #创建服务主体时生产的“password”
    }
  }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;c.生成Azure模板&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
#确认使用的acs-engine版本是正确的，我们使用的为v0.&lt;span&gt;8.0&lt;/span&gt;&lt;span&gt;
.&lt;/span&gt;/acs-&lt;span&gt;engine version
Version: v0.&lt;/span&gt;&lt;span&gt;8.0&lt;/span&gt;&lt;span&gt;
GitCommit: &lt;/span&gt;&lt;span&gt;79572455&lt;/span&gt;&lt;span&gt;
GitTreeState: clean

#生产Azure模板，执行完成后你会发现一个 _output 目录，其中包括 ARM 模板以及 Kubernetes 的证书，配置文件等。
.&lt;/span&gt;/acs-&lt;span&gt;engine generate kubernetes.json
INFO[&lt;/span&gt;&lt;span&gt;0000&lt;/span&gt;] Generating assets into _output/&lt;span&gt;hlmnk8s03...
cd _output&lt;/span&gt;/hlmnk8s03/
&lt;span&gt;ls&lt;/span&gt;&lt;span&gt;
apimodel.json  apiserver.crt  apiserver.key  azuredeploy.json  azuredeploy.parameters.json  ca.crt  ca.key  client.crt  client.key  kubeconfig  kubectlClient.crt  kubectlClient.key&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;d.编辑修改部分模板参数信息，切换到模板目录_output/yourprefix，编辑azuredeploy.parameters.json。替换其中部分值如下： &lt;/p&gt;
&lt;p&gt;【在笔者测试阶段，为了在Azure中国区部署成功，部分模板参数需要做调整，在后续的开发中，这部分配置可能会被修正】&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
cd _output/hlmnk8s03/
&lt;span&gt;vi&lt;/span&gt;&lt;span&gt; azuredeploy.parameters.json
#修改“kubernetesHyperkubeSpec” 的值为：crproxy.trafficmanager.net:&lt;/span&gt;&lt;span&gt;6000&lt;/span&gt;/google_containers/hyperkube-amd64:v1.&lt;span&gt;6.11&lt;/span&gt;&lt;span&gt;
#修改“dockerEngineDownloadRepo” 的值为：https:&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;mirror.kaiyuanshe.cn/docker-engine/apt/repo&lt;/span&gt;
#修改“kubernetesTillerSpec” 的值为：crproxy.trafficmanager.net:&lt;span&gt;6000&lt;/span&gt;/kubernetes-helm/tiller:v2.&lt;span&gt;6.1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;6.部署Kubernetes集群，该过程大约需要20分钟左右，其中包括创建Azure资源如VNET，负载均衡，自定义路由，虚拟机，存储账号等，并配置虚拟机中kubernetes各组件和服务&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
az group deployment create -g hlmrgk8sssd02_deploy --resource-group hlmrgk8sssd02 --template-&lt;span&gt;file&lt;/span&gt; azuredeploy.json  --parameters azuredeploy.parameters.json
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;7.使用Kubectl工具，设置kubeconfig配置文件，并查看集群节点状态&lt;/p&gt;
&lt;p&gt;a.如果没有安装Kubectl工具，可以运行以下命令进行安装&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
curl -LO https:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;storage.googleapis.com/kubernetes-release/release/$(curl -s &lt;/span&gt;&lt;span&gt;https://storage.googleapis.com/kubernetes-release/release/stable.txt&lt;/span&gt;&lt;span&gt;)/bin/linux/amd64/kubectl&lt;/span&gt;
&lt;span&gt;chmod&lt;/span&gt; +x ./&lt;span&gt;kubectl
&lt;/span&gt;&lt;span&gt;sudo&lt;/span&gt; &lt;span&gt;mv&lt;/span&gt; ./kubectl /usr/local/bin
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;b.设置kubeconfig配置文件，并查看集群节点状态&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
export KUBECONFIG=kubeconfig/&lt;span&gt;kubeconfig.chinaeast.json
kubectl get nodes&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;参考链接：https://school.azure.cn/blog/429&lt;/p&gt;

</description>
<pubDate>Mon, 27 Nov 2017 07:42:00 +0000</pubDate>
<dc:creator>铭的随记</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/stonehe/p/7904452.html</dc:identifier>
</item>
<item>
<title>实战Excel Add-in的三种玩法 - 陈希章</title>
<link>http://www.cnblogs.com/chenxizhang/p/7904401.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/chenxizhang/p/7904401.html</guid>
<description>&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;作者：陈希章 发表于 2017年11月26日&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这个系列文章应该有一阵子没有更新了，原因是一如既往的多，但是根本所在是我对于某些章节其实还没有完全想好怎么写，尤其是对于Office Add-in这块 —— 到底是要每个都去单独写一遍，还是有其他什么好的写法会对读者更有帮助？正如我在 &lt;a href=&quot;https://www.linkedin.com/pulse/%E6%88%91%E5%88%86%E4%BA%AB%E7%BB%99%E5%A4%A7%E5%AE%B6%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%86%99%E4%BD%9C%E7%BB%8F%E9%AA%8C-%E5%B8%8C%E7%AB%A0-%E9%99%88/?trackingId=oVKlHAByFMtC%2FPtv58IMnw%3D%3D&quot;&gt;这篇文章&lt;/a&gt; 分享的一些关于写作的个人经验那样，我为此颇费了一些心思琢磨，直到最近才做出了一个选择：我将不拘泥于每个应用都写一次，而是尝试总结一些共性的操作指南。本文将是一个尝试，以我对于Office Add-in开发的了解，Excel所占的比重相对较高（根据不完全统计，在应用商店所有Office Add-in中，Excel占到40%左右），所以我希望用本文的Excel Add-in的实际案例，给广大的Office Add-in开发人员直观地了解三种不同的开发技术是如何过渡和共存的，以帮助大家做出自己的选择。&lt;/p&gt;
&lt;blockquote readability=&quot;6.7190635451505&quot;&gt;
&lt;p&gt;本文所提到的三种玩法，是指最早的VBA技术，后来的VSTO技术，以及现在更推荐的Web Add-in的技术。如果大家对于这些基本概念以及Office 365的开发还不太熟悉，欢迎阅读我此前写好的 Office 365开发概述和生态环境介绍：&lt;a href=&quot;https://chenxizhang.gitbooks.io/office365devguide/docs/office365dev-overview-1.html&quot;&gt;上篇&lt;/a&gt;，&lt;a href=&quot;https://chenxizhang.gitbooks.io/office365devguide/docs/office365dev-overview-2.html&quot;&gt;下篇&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;我一向鼓励在实践中学习。为了演示如何自定义开发，并且比对不同的技术下面实现方式的差异，本文将以下面的一个需求作为案例展开。假设我们需要为Excel增加一项功能，用户点击一个菜单或者按钮后，可以动态生成一些统计数据，并且根据这些数据生成一个柱状图。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://chenxizhang.gitbooks.io/office365devguide/docs/images/reportgeneration.PNG&quot;/&gt;&lt;/p&gt;

&lt;p&gt;VBA 是我们最早的一个用来扩展Office 应用程序的技术，由于其简单易用且功能强大，在全世界范围内拥有数以亿计的用户。实现上面提到的这样的需求，其实是VBA很擅长的，尤其是数据如果本身就来自于Excel内部的话。&lt;/p&gt;
&lt;p&gt;学习VBA的一个最好起点就是用录制宏。以本案例而言，即便你是VBA的新手，也可以尝试一步一步地输入数据并且生成图表，然后将生成的代码稍作整理和修改后，可能就是下面这样子的。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://chenxizhang.gitbooks.io/office365devguide/docs/images/reportgenerator-vba.PNG&quot;/&gt;&lt;/p&gt;
&lt;p&gt;完整代码可以通过 &lt;a href=&quot;https://gist.github.com/chenxizhang/3bc5e940f59f9e30d13cb88e3a6c8a6a&quot;&gt;https://gist.github.com/chenxizhang/3bc5e940f59f9e30d13cb88e3a6c8a6a&lt;/a&gt; 获取，请在Excel的VBA编辑器中，新建一个模块，然后将这个代码复制进去，最后按下F5运行即可看到效果。&lt;/p&gt;

&lt;p&gt;VSTO是2005年正式引入的，它带来的好处是可以基于功能强大且已经被证明成功的Microsoft .NET平台进行编程，这意味着你可以使用宇宙最强的Visual Studio进行快速开发，同时使用 .NET Framework 的全部功能，可以访问到任何你想要的资源。VSTO的开发语言有VB.NET和C#两种。&lt;/p&gt;
&lt;p&gt;我个人目前用的最多的是C#，以我自己的亲身体会来看，从VBA转到VSTO，短期来说，使用VB.NET可能是最简单的，因为语法绝大部分都是一致的。但长期来看，我还是建议大家学习一下C#这门专门为.NET设计的语言。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://chenxizhang.gitbooks.io/office365devguide/docs/images/vsto-excel-template.PNG&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio 的项目模板非常强大，它会自动生成很多的代码。对于一个VSTO的Add-in来说，我们最常见的做法会为它创建对应的Ribbon工具栏，当用户单击了某个按钮后，再根据当前的上下文进行相关的代码处理。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://chenxizhang.gitbooks.io/office365devguide/docs/images/vsto-ribbon.PNG&quot;/&gt;&lt;/p&gt;
&lt;p&gt;你可以在Ribbon 的设计器中，添加一个按钮，然后将下面的代码复制到按钮的单击事件中,然后按下F5即可进行调试。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://chenxizhang.gitbooks.io/office365devguide/docs/images/vsto-exceladdin.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;完整代码可以通过&lt;a href=&quot;https://gist.github.com/chenxizhang/c249740f63edf8c29d18700fb357474d&quot;&gt;https://gist.github.com/chenxizhang/c249740f63edf8c29d18700fb357474d&lt;/a&gt; 或者 &lt;a href=&quot;https://gist.github.com/chenxizhang/e75b849b1d2ef6eab5d742a9c976527d&quot;&gt;https://gist.github.com/chenxizhang/e75b849b1d2ef6eab5d742a9c976527d&lt;/a&gt; 获取，前者是VB.NET代码，后者是C#代码。&lt;/p&gt;

&lt;p&gt;Web Add-in是从Office 2013开始支持的新的开发模式，它具有划时代的意义，主要在于利用业界标准的Web开发技术来做Add-in开发，同时具有跨平台和设备的先天优势，集中化部署也降低了运维的复杂性。&lt;/p&gt;
&lt;p&gt;不同于VBA到VSTO的平滑过渡，这个新技术对于传统的VBA和VSTO的开发者来说，最大的挑战在于要学习全新的Web开发的技术。Web Add-in包含但不仅限于下面这些主流技术，请大家有一定的心理准备。&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;HTML&lt;/li&gt;
&lt;li&gt;CSS&lt;/li&gt;
&lt;li&gt;Javacript&lt;/li&gt;
&lt;li&gt;Typescript (可选)&lt;/li&gt;
&lt;li&gt;NodeJS （可选）&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;前面三个是基础，如果有兴趣学习，我推荐一个不错的网站 &lt;a href=&quot;http://w3school.com.cn/&quot;&gt;http://w3school.com.cn/&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;后面两个是高级部分，但很可能会成为以后的主流。有兴趣可以通过他们的官方网站进行学习。&lt;/p&gt;
&lt;p&gt;我的范例是使用NodeJS来实现的，所以如果要运行范例，则需要先安装好NodeJS的运行环境，请参考 &lt;a href=&quot;https://nodejs.org/en/&quot;&gt;https://nodejs.org/en/&lt;/a&gt; .&lt;/p&gt;
&lt;p&gt;在开发工具这个方面，Visual Studio仍然提供了非常好用的模板，但Visual Studio Code可能是一个更好的选择，尤其是你准备学习和使用基于NodeJS来开发Office Add-in的话。&lt;/p&gt;
&lt;p&gt;一下子讲了这么多，是不是已经有点头大了？一个好消息是，我们现在有一个有意思的小插件—— Script lab —— 可以在不离开Excel界面的情况下，快速开始学习Web Add-in的开发。这个插件本身就是一个非常典型的Add-in的范例，是由微软内部开发的，它提供了很多样例代码，可以帮助开发者熟悉全新的基于javascript的对象模型。&lt;/p&gt;
&lt;p&gt;只要你拥有Office 365的账号，你就可以免费使用这个插件。具体的操作方式是在顶部的Ribbon工具栏中，找到“Insert”这个选项卡，然后单击里面的“Store”这个按钮，搜索Script lab即可进行安装。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://chenxizhang.gitbooks.io/office365devguide/docs/images/scriptlabsetup.PNG&quot;/&gt;&lt;/p&gt;
&lt;p&gt;安装成功后，顶部的Ribbon工具栏会多出来一个选项卡“Script Lab”，点击“Code”按钮，然后找到Report generation 这个Sample，如下图所示&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://chenxizhang.gitbooks.io/office365devguide/docs/images/scriptlab.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;你现在无需做任何代码的修改，直接Run就可以看到上图的效果了。&lt;/p&gt;
&lt;blockquote readability=&quot;6.3663663663664&quot;&gt;
&lt;p&gt;请注意，官方提供的这个Report Generation的Sample其实有一个小的代码问题，它在设置图表的数据源时没有把标题行包括进去，我已经修改了这个Sample，有需要可以通过 &lt;a href=&quot;https://gist.github.com/chenxizhang/cebfde8cf08c55d54d5cdb336b166cee&quot;&gt;https://gist.github.com/chenxizhang/cebfde8cf08c55d54d5cdb336b166cee&lt;/a&gt; 查看，并且导入到你的Sample库中去。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;关于在Visual Studio Code中如何开发和测试Office Add-in，微软官方也有一篇文章可以参考：&lt;a href=&quot;https://code.visualstudio.com/docs/other/office&quot;&gt;https://code.visualstudio.com/docs/other/office&lt;/a&gt; 。我这里要告诉大家的好消息是，你用Script lab运行成功的代码，几乎可以原封不动地复制粘贴到Visual Studio Code中去，做成一个真正的Add-in，并且通过你的渠道分发出去。（这些内容我后续还会专门的文章展开讲解）。&lt;/p&gt;

&lt;p&gt;虽然我做这方面研究已经有相当长时间了，但真正这三个技术放一起对比讨论，却是直到昨天我在与大中华区两个影响力最大的Office中文技术社区（ExcelHome和ExcelPX）的专家朋友们聚会讨论时才首次展示。我用这个作为例子的主要目的，是希望让大家看到技术的发展路线，理解为什么要这么变化，同时并且通过实例让大家更加有信心，虽然学习新东西会遇到一些挑战的，但大家也能清楚地看到，代码的结构、逻辑其实是相通的。说到底，这也是一个程序员的基本素养 —— 我们从来不会停止探索，而因为我们有编程的思维，所以我们毫无畏惧。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://chenxizhang.gitbooks.io/office365devguide/docs/images/Image_20171126224729.jpg&quot;/&gt;&lt;/p&gt;
&lt;p&gt;关于本次活动，我分享的资料，如有兴趣，也可以通过 &lt;a href=&quot;https://chenxizhang.gitbooks.io/office365devguide/docs/assets/Office%E6%8A%80%E6%9C%AF%E7%A4%BE%E5%8C%BA%E6%96%B0%E8%80%81%E6%9C%8B%E5%8F%8B%E8%A7%81%E9%9D%A2%E4%BC%9A-%E9%99%88%E5%B8%8C%E7%AB%A0.pdf&quot;&gt;这里&lt;/a&gt; 下载到。&lt;/p&gt;
</description>
<pubDate>Mon, 27 Nov 2017 07:33:00 +0000</pubDate>
<dc:creator>陈希章</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/chenxizhang/p/7904401.html</dc:identifier>
</item>
<item>
<title>java 之 工厂模式（大话设计模式） - 红尾巴的猪</title>
<link>http://www.cnblogs.com/zhuxiansheng/p/7904395.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/zhuxiansheng/p/7904395.html</guid>
<description>&lt;p&gt;在以前的文章里面讲述过简单工厂模式，见链接：http://www.cnblogs.com/zhuxiansheng/p/7873161.html&lt;/p&gt;
&lt;p&gt;简单工厂模式解耦了客户端和实现的依赖，不过如果有再次扩展实现的话，我们不得不去修改工厂当中的选择分支，来添加case，然后添加新的实现，这违背了开放-关闭原则。如何解决这个问题，工厂模式给了很好的解答。&lt;/p&gt;
&lt;p&gt;大话设计模式-类图&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1269232/201711/1269232-20171127152212503-1091214314.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;大话设计模式中的例子代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 *  工厂接口
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt;&lt;span&gt; IFactory {

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; LeiFeng createLeiFeng();
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * 父类
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; LeiFeng {

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; sweep() {
        System.out.println(&lt;/span&gt;&quot;扫地&quot;&lt;span&gt;);
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; buyRice() {
        System.out.println(&lt;/span&gt;&quot;买米&quot;&lt;span&gt;);
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; wash() {
        System.out.println(&lt;/span&gt;&quot;洗碗&quot;&lt;span&gt;);
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * 子类
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; Undergraduate &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; LeiFeng{

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * 子类
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; Volunteer &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; LeiFeng{

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * 志愿者工厂
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; UndergraduteFactory &lt;span&gt;implements&lt;/span&gt;&lt;span&gt; IFactory{

    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; LeiFeng createLeiFeng() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Undergraduate();
    }

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * 大学生工厂
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; VolunteerFactory &lt;span&gt;implements&lt;/span&gt;&lt;span&gt; IFactory{

    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; LeiFeng createLeiFeng() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Volunteer();
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * 客户端
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Test {

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
        IFactory volunteerFactory &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; VolunteerFactory();
        LeiFeng leiFeng &lt;/span&gt;=&lt;span&gt; volunteerFactory.createLeiFeng();
        leiFeng.sweep();
        leiFeng.buyRice();
        leiFeng.wash();
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果在添加别的角色，我们只需要添加对应的工厂和角色domain就可以实现在不修改原代码同时添加新的实现，针对工厂符合了开放-关闭原则，不过针对客户端我们还是要修改创建哪个具体工厂的代码。&lt;/p&gt;
&lt;p&gt;回想一下简单工厂模式，如果我们在扩展M的N次方时，我们只需要实现计算工厂接口，然后在添加具体的计算类，就实现了实现的扩展，这是笔者对简单工厂和工厂模式的理解，希望能帮助学习工厂模式的童鞋！&lt;/p&gt;
</description>
<pubDate>Mon, 27 Nov 2017 07:32:00 +0000</pubDate>
<dc:creator>红尾巴的猪</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/zhuxiansheng/p/7904395.html</dc:identifier>
</item>
<item>
<title>csv格式订单下载，完成后伴随邮件通知下载 - 蜗牛。。</title>
<link>http://www.cnblogs.com/wappin/p/7904113.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/wappin/p/7904113.html</guid>
<description>&lt;h2&gt; &lt;/h2&gt;
&lt;h2&gt;前言&lt;/h2&gt;
&lt;p&gt;功能开发中会遇到大量订单下载，而服务器的请求响应时间又配置的很短，导致下载时候请求超时。&lt;/p&gt;
&lt;p&gt;这篇文章主要思路：异步查询数据，生成csv文件，放入email中并发送给用户。（异步部分本文不做介绍，配置个线程池就可以）&lt;/p&gt;
&lt;p&gt;代码亲测可以使用，邮箱的设置稍微需要配置一下 文章底部会说明。&lt;/p&gt;
&lt;p&gt;代码下载地址(包含JavaMail  jar包)：&lt;a href=&quot;https://gitee.com/wangpinpin_595/reservationDownload/attach_files&quot; target=&quot;_blank&quot;&gt;https://gitee.com/wangpinpin_595/reservationDownload/attach_files&lt;/a&gt;&lt;/p&gt;


&lt;h2&gt;正文&lt;/h2&gt;
&lt;p&gt;代码如下：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Main.java&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;51&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import&lt;/span&gt; java.io.*&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt; java.util.*&lt;span&gt;;

&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Main {

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * csv格式订单下载，完成后伴随邮件通知下载
     * 步骤分三部，一步一步的看，其实很简单
     * 封装数据--&amp;gt;规范csv格式及写入文件--&amp;gt;邮件通知
     *
     * &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; wappin
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; main(String[] args) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;封装数据
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;我这里随便写点测试数据，上项目的时候，这里换成数据库读的数据。&lt;/span&gt;
        List&amp;lt;Student&amp;gt; studentList = &lt;span&gt;new&lt;/span&gt; ArrayList&amp;lt;&amp;gt;&lt;span&gt;();
        studentList.add(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt; Student(1, &quot;小明&quot;, &quot;男&quot;, &quot;18011111111&quot;&lt;span&gt;));
        studentList.add(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt; Student(2, &quot;小王&quot;, &quot;男&quot;, &quot;18022222222&quot;&lt;span&gt;));
        studentList.add(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt; Student(3, &quot;小张&quot;, &quot;男&quot;, &quot;18033333333&quot;&lt;span&gt;));
        studentList.add(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt; Student(4, &quot;小红&quot;, &quot;女&quot;, &quot;18044444444&quot;&lt;span&gt;));
        studentList.add(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt; Student(5, &quot;小花&quot;, &quot;女&quot;, &quot;18055555555&quot;&lt;span&gt;));

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;规范csv格式及写入文件&lt;/span&gt;
        File file =&lt;span&gt; Configuring.configuringCsvFormat(studentList);

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;邮件通知&lt;/span&gt;
        SendEmailUtil.sendEmail(&quot;442042162@qq.com&quot;&lt;span&gt;, file);

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;发送结束后删除文件，看个人需求使用
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;file.delete();&lt;/span&gt;
&lt;span&gt;    }
    
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Student.java&lt;br/&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 *　学生实体类
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Student {
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; id;            &lt;span&gt;//&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; String name;       &lt;span&gt;//&lt;/span&gt;&lt;span&gt;姓名&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; String gender;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;性别&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; String phoneNumber;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;电话号码&lt;/span&gt;
&lt;span&gt;
    Student(&lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt; id, String name, String gender, String phoneNumber) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.id =&lt;span&gt; id;
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.name =&lt;span&gt; name;
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.gender =&lt;span&gt; gender;
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.phoneNumber =&lt;span&gt; phoneNumber;
    }

    &lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt; getId() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; id;
    }

    String getName() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; name;
    }

    String getGender() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; gender;
    }

    String getPhoneNumber() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; phoneNumber;
    }

    &lt;/span&gt;&lt;span&gt;void&lt;/span&gt; setId(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; id) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.id =&lt;span&gt; id;
    }

    &lt;/span&gt;&lt;span&gt;void&lt;/span&gt;&lt;span&gt; setName(String name) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.name =&lt;span&gt; name;
    }

    &lt;/span&gt;&lt;span&gt;void&lt;/span&gt;&lt;span&gt; setGender(String gender) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.gender =&lt;span&gt; gender;
    }

    &lt;/span&gt;&lt;span&gt;void&lt;/span&gt;&lt;span&gt; setPhoneNumber(String phoneNumber) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.phoneNumber =&lt;span&gt; phoneNumber;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Configuring.java&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;51&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import&lt;/span&gt; java.io.*&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.ArrayList;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.LinkedHashMap;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.List;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.Map;

&lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * 规范csv格式及写入文件
 * &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; wappin
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Configuring {
    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 配置csv格式
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;static&lt;/span&gt; File configuringCsvFormat(List&amp;lt;Student&amp;gt;&lt;span&gt; studentList) {
        LinkedHashMap&lt;/span&gt;&amp;lt;String, String&amp;gt; superClassMap = &lt;span&gt;new&lt;/span&gt; LinkedHashMap&amp;lt;&amp;gt;&lt;span&gt;();
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;key对应实体类参数，value对应csv标题&lt;/span&gt;
        superClassMap.put(&quot;id&quot;, &quot;编号&quot;&lt;span&gt;);
        superClassMap.put(&lt;/span&gt;&quot;name&quot;, &quot;姓名&quot;&lt;span&gt;);
        superClassMap.put(&lt;/span&gt;&quot;gender&quot;, &quot;性别&quot;&lt;span&gt;);
        superClassMap.put(&lt;/span&gt;&quot;phoneNumber&quot;, &quot;电话号码&quot;&lt;span&gt;);
        List&lt;/span&gt;&amp;lt;String&amp;gt; list = &lt;span&gt;new&lt;/span&gt; ArrayList&amp;lt;&amp;gt;&lt;span&gt;();
        StringBuilder sb &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; StringBuilder();
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt; (Student stu : studentList) {
            sb.append(stu.getId()).append(&lt;/span&gt;&quot;\t,&quot;&lt;span&gt;).
                    append(stu.getName() &lt;/span&gt;!= &lt;span&gt;null&lt;/span&gt; ? stu.getName() : &quot;&quot;).append(&quot;\t,&quot;&lt;span&gt;).
                    append(stu.getGender() &lt;/span&gt;!= &lt;span&gt;null&lt;/span&gt; ? stu.getGender() : &quot;&quot;).append(&quot;\t,&quot;&lt;span&gt;).
                    append(stu.getPhoneNumber() &lt;/span&gt;!= &lt;span&gt;null&lt;/span&gt; ? stu.getPhoneNumber() : &quot;&quot;).append(&quot;\t&quot;&lt;span&gt;);
            list.add(sb.toString());
            sb.delete(&lt;/span&gt;0&lt;span&gt;, sb.length());
        }
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; writeFile(list, superClassMap);
    }

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 写入文件
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &amp;lt;T&amp;gt; File writeFile(List&amp;lt;T&amp;gt; list, LinkedHashMap&amp;lt;String, String&amp;gt;&lt;span&gt; fieldMap) {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;文件存放地址及名称&lt;/span&gt;
        String downCsvForEmailAddress = &quot;E:\\&quot; +&lt;span&gt; System.currentTimeMillis();
        File file &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; File(downCsvForEmailAddress);
        FileOutputStream out;
        OutputStreamWriter osw &lt;/span&gt;= &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
        BufferedWriter bw &lt;/span&gt;= &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
            out &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; FileOutputStream(file);
            osw &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; OutputStreamWriter(out, &quot;GBK&quot;&lt;span&gt;);
            bw &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; BufferedWriter(osw);
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (fieldMap != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
                StringBuilder head &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; StringBuilder();
                &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (Map.Entry&amp;lt;String, String&amp;gt;&lt;span&gt; stringStringEntry : fieldMap.entrySet()) {
                    head.append(&lt;/span&gt;&quot;,&quot;).append(((Map.Entry) stringStringEntry).getValue() != &lt;span&gt;null&lt;/span&gt; ? (String) ((Map.Entry) stringStringEntry).getValue() : &quot;&quot;&lt;span&gt;);
                }
                head &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; StringBuilder(head.substring(1&lt;span&gt;, head.length()));
                bw.append(head.toString()).append(&lt;/span&gt;&quot;\r&quot;&lt;span&gt;);
            }
            &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt; (T aList : list) {
                bw.append(aList.toString()).append(&lt;/span&gt;&quot;\r&quot;&lt;span&gt;);
            }
        } &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception e) {
            e.printStackTrace();
        } &lt;/span&gt;&lt;span&gt;finally&lt;/span&gt;&lt;span&gt; {
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (bw != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
                &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
                    bw.close();
                } &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (IOException e) {
                    e.printStackTrace();
                }
            }
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (osw != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
                &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
                    osw.close();
                } &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (IOException e) {
                    e.printStackTrace();
                }
            }
        }
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; file;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;SendEmailUtil.java&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; javax.activation.DataHandler;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; javax.activation.DataSource;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; javax.activation.FileDataSource;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; javax.mail.BodyPart;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; javax.mail.Multipart;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; javax.mail.Session;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; javax.mail.Transport;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt; javax.mail.internet.*&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.io.File;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.Date;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.Properties;

&lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * JavaMail 版本: 1.6.0
 * JDK 版本: JDK 1.7 以上（必须）
 * 参考文档: &lt;/span&gt;&lt;span&gt;http://blog.csdn.net/xietansheng/article/details/51673073&lt;/span&gt;
 &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; SendEmailUtil {

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;发件人邮箱&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; String myEmailAccount = &quot;自己填&quot;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;授权码 &amp;gt; 独立密码 &amp;gt; 密码（优先级）&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; String myEmailPassword = &quot;自己填&quot;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;SMTP 服务器地址&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; String myEmailSMTPHost = &quot;smtp.qq.com&quot;&lt;span&gt;;


    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 配置收件人及邮件协议信息
     *
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; receiveMailAccount 收件人地址
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; attachment         附件
     * &lt;/span&gt;&lt;span&gt;@throws&lt;/span&gt;&lt;span&gt; Exception
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; sendEmail(String receiveMailAccount, File attachment) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 1. 创建参数配置, 用于连接邮件服务器的参数配置&lt;/span&gt;
        Properties props = &lt;span&gt;new&lt;/span&gt; Properties();                    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 参数配置&lt;/span&gt;
        props.setProperty(&quot;mail.transport.protocol&quot;, &quot;smtp&quot;);   &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 使用的协议（JavaMail规范要求）&lt;/span&gt;
        props.setProperty(&quot;mail.smtp.host&quot;, myEmailSMTPHost);   &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 发件人的邮箱的 SMTP 服务器地址&lt;/span&gt;
        props.setProperty(&quot;mail.smtp.auth&quot;, &quot;true&quot;);            &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 需要请求认证&lt;/span&gt;

        &lt;span&gt;final&lt;/span&gt; String smtpPort = &quot;465&quot;&lt;span&gt;;
        props.setProperty(&lt;/span&gt;&quot;mail.smtp.port&quot;&lt;span&gt;, smtpPort);
        props.setProperty(&lt;/span&gt;&quot;mail.smtp.socketFactory.class&quot;, &quot;javax.net.ssl.SSLSocketFactory&quot;&lt;span&gt;);
        props.setProperty(&lt;/span&gt;&quot;mail.smtp.socketFactory.fallback&quot;, &quot;false&quot;&lt;span&gt;);
        props.setProperty(&lt;/span&gt;&quot;mail.smtp.socketFactory.port&quot;&lt;span&gt;, smtpPort);
        Session session &lt;/span&gt;=&lt;span&gt; Session.getInstance(props);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 设置为debug模式, 可以查看详细的发送 log&lt;/span&gt;
        session.setDebug(&lt;span&gt;false&lt;/span&gt;&lt;span&gt;);

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 3. 创建一封邮件&lt;/span&gt;
        MimeMessage message =&lt;span&gt; createMimeMessage(session, myEmailAccount, receiveMailAccount, attachment);

        Transport transport &lt;/span&gt;=&lt;span&gt; session.getTransport();
        transport.connect(myEmailAccount, myEmailPassword);
        transport.sendMessage(message, message.getAllRecipients());
        transport.close();
    }

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 创建一封只包含文本的简单邮件
     *
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; session     和服务器交互的会话
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; sendMail    发件人邮箱
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; receiveMail 收件人邮箱
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; attachment  附件
     * &lt;/span&gt;&lt;span&gt;@throws&lt;/span&gt;&lt;span&gt; Exception
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; MimeMessage createMimeMessage(Session session, String sendMail, String receiveMail, File attachment) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 1. 创建一封邮件&lt;/span&gt;
        MimeMessage message = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; MimeMessage(session);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2. From: 发件人&lt;/span&gt;
        message.setFrom(&lt;span&gt;new&lt;/span&gt; InternetAddress(sendMail, &quot;&quot;, &quot;UTF-8&quot;&lt;span&gt;));
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 3. To: 收件人（可以增加多个收件人、抄送、密送）&lt;/span&gt;
        message.setRecipient(MimeMessage.RecipientType.TO, &lt;span&gt;new&lt;/span&gt; InternetAddress(receiveMail, &quot;收件人姓名&quot;, &quot;UTF-8&quot;&lt;span&gt;));
        message.addHeader(&lt;/span&gt;&quot;charset&quot;, &quot;UTF-8&quot;&lt;span&gt;);
        message.setSubject(&lt;/span&gt;&quot;主题&quot;&lt;span&gt;);

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;添加正文内容&lt;/span&gt;
        Multipart multipart = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; MimeMultipart();
        BodyPart contentPart &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; MimeBodyPart();
        contentPart.setContent(&lt;/span&gt;&quot;正文内容&quot;, &quot;text/html;charset=UTF-8&quot;&lt;span&gt;);
        multipart.addBodyPart(contentPart);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;附件&lt;/span&gt;
        &lt;span&gt;if&lt;/span&gt; (attachment != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
            BodyPart attachmentBodyPart &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; MimeBodyPart();
            DataSource source &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; FileDataSource(attachment);
            attachmentBodyPart.setDataHandler(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; DataHandler(source));
            attachmentBodyPart.setFileName(MimeUtility.encodeText(&lt;/span&gt;&quot;附件名称.csv&quot;&lt;span&gt;));
            multipart.addBodyPart(attachmentBodyPart);
        }

        message.setContent(multipart);
        message.setSentDate(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Date());
        message.saveChanges();
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; message;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;邮箱配置&lt;/h2&gt;
&lt;p&gt;我用QQ邮箱做的测试，其他邮箱没有试，应该大同小异。&lt;/p&gt;
&lt;p&gt;QQ邮箱服务器地址：smtp.qq.com&lt;/p&gt;
&lt;p&gt;点击设置--帐号，开启POP3/SMTP/IMAP会得到一个授权码（对应myEmailPassword参数），如图：&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1010605/201711/1010605-20171127145325425-894351259.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;如果邮箱配置还有不太懂得可以参考这篇文章，写的很详细：&lt;a href=&quot;http://blog.csdn.net/xietansheng/article/details/51673073&quot; target=&quot;_blank&quot;&gt;http://blog.csdn.net/xietansheng/article/details/51673073&lt;/a&gt;&lt;/p&gt;



</description>
<pubDate>Mon, 27 Nov 2017 07:18:00 +0000</pubDate>
<dc:creator>蜗牛。。</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/wappin/p/7904113.html</dc:identifier>
</item>
<item>
<title>JavaWeb 学习之 JSTL - bgzyy</title>
<link>http://www.cnblogs.com/bgzyy/p/7901137.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/bgzyy/p/7901137.html</guid>
<description>&lt;p&gt;　　上一篇博文我们讲解了 MVC 小案例，案例中包含了基本的增、删、改、查，对这个案例的有兴趣的伙伴可以自己动手实践一下，去复习一下或者说是学点新的知识！如果有已经看过且实践过的伙伴相信对 JSP 页面中的 Java 代码很是烦躁。在 JSP 页面上写 Java 代码不仅影响美观而且对很容易写错我们想写的逻辑代码，我们今天所讲的 JSTL 就可以完美解决在 JSP 页面上写 Java 代码的缺点。在开始讲解 JSTL 之前我们先讲解一下 EL、自定义 JSTL等知识点。&lt;/p&gt;
&lt;p&gt;　　&lt;span&gt;&lt;em&gt;&lt;strong&gt;EL&lt;/strong&gt;&lt;/em&gt;&lt;/span&gt;（Expression Language） 是为了使JSP写起来更加简单。表达式语言的灵感来自于 ECMAScript 和 XPath 表达式语言，它提供了在 JSP 中简化表达式的方法，让Jsp的代码更加简化。&lt;/p&gt;
&lt;p&gt;　　1. 所有的 EL 表达式都是以 &lt;span&gt;&lt;em&gt;&lt;strong&gt;${&lt;/strong&gt;&lt;/em&gt;&lt;/span&gt; 开头，以 &lt;span&gt;&lt;em&gt;&lt;strong&gt;} &lt;/strong&gt;&lt;/em&gt;&lt;/span&gt; 结尾，我们先来举一个例子体会一下 EL 表达式相比于 Java 代码的优势，如： &lt;span class=&quot;cnblogs_code&quot;&gt;${sessionScope.user.sex}&lt;/span&gt; ，表示的是在隐藏域 &lt;em&gt;&lt;strong&gt;session&lt;/strong&gt;&lt;/em&gt; 范围里找 &lt;strong&gt;&lt;em&gt;user&lt;/em&gt;&lt;/strong&gt; 属性，然后在 user 对象中找 &lt;em&gt;&lt;strong&gt;sex&lt;/strong&gt;&lt;/em&gt; 属性，它等同于 JSP 页面中的 Java 代码，如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;User user = (User)session.getAttribute(“user”);
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; String sex = user.getSex();
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;　　2. EL 运算符 &lt;em&gt;&lt;span&gt;&lt;strong&gt;[ ]&lt;/strong&gt;&lt;/span&gt;&lt;/em&gt; 和 &lt;em&gt;&lt;span&gt;&lt;strong&gt;.&lt;/strong&gt;&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;　　　　1). [ ] 等同于 . 运算符，如上面的 EL 表达式等同于   &lt;span class=&quot;cnblogs_code&quot;&gt;${sessionScope.user[“sex”]}&lt;/span&gt; ；&lt;/p&gt;
&lt;p&gt;　　　　2). [ ] 运算符可以结合下标打印数组或者集合的值，如：  &lt;span class=&quot;cnblogs_code&quot;&gt;${sessionScope.shoppingCart[0].price&lt;/span&gt;  表示在 session 属性范围内找到属性 shoppingCart 的集合对象，然后打印其第一行的 price 属性；&lt;/p&gt;
&lt;p&gt;　　　　3). 如果属性名为  &lt;span class=&quot;cnblogs_code&quot;&gt;com.javaweb.el&lt;/span&gt;  那我们就应该使用 [ ] 运算符去操作属性；&lt;/p&gt;
&lt;p&gt;　　　　4). EL 表达式不可以进行遍历数组集合的遍历。&lt;/p&gt;
&lt;p&gt;　　3. EL 表达式的查找顺序&lt;/p&gt;
&lt;p&gt;　　　　- 对于 EL 表达式  &lt;span class=&quot;cnblogs_code&quot;&gt;${userName}&lt;/span&gt;  由于我们没有指定其属性范围，那么 EL 会从 &lt;span&gt;&lt;em&gt;&lt;strong&gt;page、request、session、application&lt;/strong&gt;&lt;/em&gt;&lt;/span&gt; 四个隐藏属性中依次查找属性名为 userName 的属性，如果在哪一个隐藏域中找到就返回不再继续查找，如果找完了还没有找到就返回 &lt;span&gt;&lt;em&gt;&lt;strong&gt;NULL&lt;/strong&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　4. EL 隐含对象&lt;/p&gt;
&lt;p&gt;　　　　1). &lt;em&gt;&lt;span&gt;&lt;strong&gt;param&lt;/strong&gt;&lt;/span&gt;&lt;/em&gt; 获取请求参数&lt;/p&gt;
&lt;p&gt;　　　　2). &lt;span&gt;&lt;em&gt;&lt;strong&gt;paramValues&lt;/strong&gt;&lt;/em&gt;&lt;/span&gt; 获取一组请求参数，返回类型为数组，可以使用 [] 和小标的形式打印其中某一个数据&lt;/p&gt;
&lt;p&gt;　　5. EL 表达式会自动进行强制转换&lt;/p&gt;
&lt;p&gt;　　　　- EL 表达式可以进行自动的强制类型转换，如： &lt;span class=&quot;cnblogs_code&quot;&gt;${param.count + 20}&lt;/span&gt;   就是将获取请求参数 &lt;span&gt;&lt;em&gt;&lt;strong&gt;count&lt;/strong&gt;&lt;/em&gt;&lt;/span&gt; 后加上 20，假如请求参数 count 的值是 10，那么打印结果将会是 &lt;span&gt;&lt;em&gt;&lt;strong&gt;30&lt;/strong&gt;&lt;/em&gt;&lt;/span&gt;，而不是 &lt;span&gt;&lt;em&gt;&lt;strong&gt;1020&lt;/strong&gt;&lt;/em&gt;&lt;/span&gt;，因为 EL 表达式会进行自动的类型转换。&lt;/p&gt;
&lt;p&gt;　　6. . 运算符&lt;/p&gt;
&lt;p&gt;　　　　- EL 表达式获取到结果是对象，并且该对象有&lt;strong&gt;&lt;em&gt;&lt;span&gt;无参的 get 方法&lt;/span&gt;&lt;/em&gt;&lt;/strong&gt;，那么就可以使用 &lt;span&gt;&lt;em&gt;&lt;strong&gt;.&lt;/strong&gt;&lt;/em&gt;&lt;/span&gt; 运算符调用该方法，并且可以一直调用下去，如： &lt;span class=&quot;cnblogs_code&quot;&gt;${sessionScope.time.time}&lt;/span&gt; 等同于　　&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;Session.setAttribute(“time”, new Date() );
new Date.getTime()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;　　7. 其他隐含对象&lt;/p&gt;
&lt;p&gt;　　　　1). initParam 获取当前 WEB 应用的初始化参数&lt;/p&gt;
&lt;p&gt;　　　　2). pageContext 可以用来获取当前 WEB 应用的根路径  &lt;span class=&quot;cnblogs_code&quot;&gt;${pageContext.request.contextPath}&lt;/span&gt; &lt;/p&gt;
&lt;p&gt;　　　　3). Cookie   &lt;span class=&quot;cnblogs_code&quot;&gt;${cookie.JSESSIONID.name} ${cookie.JSESSIONID.value}&lt;/span&gt; &lt;/p&gt;
&lt;p&gt;　　　　4). empty 运算符，如： &lt;span class=&quot;cnblogs_code&quot;&gt;${empty param.name}&lt;/span&gt;  是判断输入框 name 属性是否为空，为空返回 true， 否则返回 false&lt;/p&gt;
&lt;p&gt;　　&lt;strong&gt;自定义 JSTL 标签&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　　　1.  &lt;/strong&gt;自定义标签分为空标签、带内容的标签、带属性的标签、带属性和带内容的标签、带有父标签的标签&lt;/p&gt;
&lt;p&gt;　　　　2. 开发自定义标签的核心就是编写标签处理器&lt;/p&gt;
&lt;p&gt;　　　　3. 步骤&lt;/p&gt;
&lt;p&gt;　　　　　　1). 编写完成标签功能的 Java 类（标签处理器）&lt;/p&gt;
&lt;p&gt;　　　　　　　　a. 编写标签处理器，新建 Java 类，实现 SimpleTag 接口&lt;/p&gt;
&lt;p&gt;　　　　　　　　b. 接口方法介绍：&lt;/p&gt;
&lt;p&gt;　　　　　　　　　　-1. SetJspContext  JSP 引擎将代表页面的 pageContext 对象传递给标签处理器对象 ，JSPContext 是 pageContext 的父类由其可获得其他八个隐含对象&lt;/p&gt;
&lt;p&gt;　　　　　　　　　　-2. setParent JSP 引擎将父标签处理器对象传给当前标签处理器对象，只有存在父标签时 JSP 引擎才回调用该方法&lt;/p&gt;
&lt;p&gt;　　　　　　　　　　-3. SetXxx 设置标签属性，只有定义了属性才回调用该方法&lt;/p&gt;
&lt;p&gt;　　　　　　　　　　-4. setJSPBody 若存在标签体，JSP 引擎把标签体封装为一个 JSPFragment 对象，调用 SetJspBody 方法将 JSPFragment 对象传递给标签处理器，若标签体为空 JSP 引擎则不会调用该方法&lt;/p&gt;
&lt;p&gt;　　　　　　　　　　-5. doTag 此方法是标签执行逻辑代码的主要方法&lt;/p&gt;
&lt;p&gt;　　　　　　2). 编写标签库的描述文件（.tld），在 tld 文件对自定义标签进行描述&lt;/p&gt;
&lt;p&gt;　　　　　　3). 在 JSP 页面导入和使用自定义标签&lt;/p&gt;
&lt;p&gt;　　　　4. 编写带属性的自定义标签（我们自定义一个带有 count 属性和 attr 属性的标签，该标签的功能是将 attr 属性值打印在页面上，并打印 count 次）&lt;/p&gt;
&lt;p&gt;　　　　　　1). 步骤如上所说，代码如下：&lt;/p&gt;
&lt;p&gt;　　　　　　　　a. 标签处理器类&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;package&lt;/span&gt;&lt;span&gt; simple.myself.tag.helloworld;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; javax.servlet.jsp.JspContext;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; javax.servlet.jsp.JspException;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; javax.servlet.jsp.PageContext;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; javax.servlet.jsp.tagext.JspFragment;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; javax.servlet.jsp.tagext.JspTag;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; javax.servlet.jsp.tagext.SimpleTag;
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.io.IOException;
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; 
&lt;span&gt;11&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; SimpleTagHelloWorld &lt;span&gt;implements&lt;/span&gt;&lt;span&gt; SimpleTag {
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; 
&lt;span&gt;13&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;    当设置属性时调用属性名对应的 setXxx 方法；需要首先在 tld 文件中描述其标签属性
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;    建议将所有的属性都声明为 String 类型&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt;&lt;span&gt; String attr;
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt;&lt;span&gt; String count;
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt;&lt;span&gt; PageContext pageContext;
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; 
&lt;span&gt;19&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setAttr(String attr) {
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.attr =&lt;span&gt; attr;
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setCount(String count) {
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.count =&lt;span&gt; count;
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; 
&lt;span&gt;26&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;    标签执行的逻辑代码，每次都会执行的方法&lt;/span&gt;
&lt;span&gt;27&lt;/span&gt; &lt;span&gt;    @Override
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; doTag() &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; JspException, IOException {
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; &lt;span&gt;        System.out.println(attr);
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; &lt;span&gt;        System.out.println(count);
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; 
&lt;span&gt;32&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;        从 url 中获取请求参数 name 的值，并将其打印 count 次&lt;/span&gt;
&lt;span&gt;33&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt;&lt;span&gt; c;
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt;         c =&lt;span&gt; Integer.parseInt(count);
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = 0; i &amp;lt; c; i++&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt;             pageContext.getOut().print(attr + &quot;&amp;lt;br&amp;gt;&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt; 
&lt;span&gt;40&lt;/span&gt; &lt;span&gt;    @Override
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setParent(JspTag jspTag) {
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt;         System.out.println(&quot;setParent&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt; 
&lt;span&gt;45&lt;/span&gt; &lt;span&gt;    @Override
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; JspTag getParent() {
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;49&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;    是 pageContext 的父类，可以获取到其他八个隐含对象，所以凡是 JSP 页面可以做的那么标签处理器都可以做
&lt;/span&gt;&lt;span&gt;50&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;    由 JSP 引擎直接调用&lt;/span&gt;
&lt;span&gt;51&lt;/span&gt; &lt;span&gt;    @Override
&lt;/span&gt;&lt;span&gt;52&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setJspContext(JspContext jspContext) {
&lt;/span&gt;&lt;span&gt;53&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.pageContext =&lt;span&gt; (PageContext) jspContext;
&lt;/span&gt;&lt;span&gt;54&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;55&lt;/span&gt; 
&lt;span&gt;56&lt;/span&gt; &lt;span&gt;    @Override
&lt;/span&gt;&lt;span&gt;57&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setJspBody(JspFragment jspFragment) {
&lt;/span&gt;&lt;span&gt;58&lt;/span&gt;         System.out.println(&quot;setJspBody&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;59&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;60&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;　　　　　　b. .tld 文件（后面的 tld 文件将指贴出 tag 节点，因为其他部分为固定的）&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;&amp;lt;?&lt;/span&gt;&lt;span&gt;xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;?&amp;gt;&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;taglib &lt;/span&gt;&lt;span&gt;xmlns&lt;/span&gt;&lt;span&gt;=&quot;http://java.sun.com/xml/ns/javaee&quot;&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;        xmlns:xsi&lt;/span&gt;&lt;span&gt;=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;        xsi:schemaLocation&lt;/span&gt;&lt;span&gt;=&quot;http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-jsptaglibrary_2_1.xsd&quot;&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;        version&lt;/span&gt;&lt;span&gt;=&quot;2.1&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt; 
&lt;span&gt; 8&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;tlib-version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;1.0&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;tlib-version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt;     &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;在页面所推荐使用的标签开头&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;short-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;hello&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;short-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt;     &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;在页面所要引用的 uri&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;uri&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;http://hello.world.com&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;uri&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt; 
&lt;span&gt;14&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;tag&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt;         &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;标签名&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;world&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt;         &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;标签处理器全类名&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;tag-class&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;simple.myself.tag.helloworld.SimpleTagHelloWorld&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;tag-class&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt;         &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;标签体&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body-content&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;empty&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body-content&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;21&lt;/span&gt;         &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;设置属性&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;22&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;attribute&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;23&lt;/span&gt;             &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;属性名&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;24&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;attr&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;25&lt;/span&gt;             &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;设置是否为必须的属性&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;26&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;required&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;true&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;required&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;27&lt;/span&gt;             &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;runtime expression value, 设置是否可以接受表达式的值，如 EL&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;28&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;rtexprvalue&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;true&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;rtexprvalue&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;29&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;attribute&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;30&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;attribute&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;31&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;count&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;32&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;required&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;false&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;required&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;33&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;rtexprvalue&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;false&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;rtexprvalue&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;34&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;attribute&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;35&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;tag&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;36&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;taglib&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;　　　　　　c. JSP 页面上的使用（其中 attr 属性的值为获取请求参数的 name 属性值，我们可以直接在地址栏加上 name 属性，如 http://.....xxx.jsp?name=java）&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;&amp;lt;%&lt;/span&gt;&lt;span&gt;@ page contentType&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text/html;charset=UTF-8&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; language&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;java&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;%&amp;gt;&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;&amp;lt;%&lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;导入标签库&lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;%&amp;gt;&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;&amp;lt;%&lt;/span&gt;&lt;span&gt;@taglib prefix&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;hello&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; uri&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;http://hello.world.com&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;%&amp;gt;&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;myselfTag&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt;   &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;h3&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;hello:world &lt;/span&gt;&lt;span&gt;attr&lt;/span&gt;&lt;span&gt;=&quot;${param.name}&quot;&lt;/span&gt;&lt;span&gt; count&lt;/span&gt;&lt;span&gt;=&quot;10&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;hello:world&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt;   &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;h3&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;　　　　5. 带属性标签小练习（可以先思考，其代码在最后公布）&lt;/p&gt;
&lt;p&gt;　　　　　　1). 自定义一个标签，带有两个属性 max，min，执行标签将会打印两个属性中的最大值&lt;/p&gt;
&lt;p&gt;　　　　　　2). 自定义一个标签，带有一个属性 src，执行标签将会将文件的内容打印到桌面上&lt;/p&gt;
&lt;p&gt;　　　　6. 带标签体和带属性的标签&lt;/p&gt;
&lt;p&gt;　　　　　　1). 类似于上面，我们这次将标签体的内容打印 times 次，并将标签体的内容转换为大写&lt;/p&gt;
&lt;p&gt;　　　　　　　　a. 标签处理器类（这次我们直接继承 SimpleTagSupport 类，只需要实现 doTag 方法，方便了代码书写）&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;package&lt;/span&gt;&lt;span&gt; simple.myself.tag.helloworld;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; javax.servlet.jsp.JspException;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; javax.servlet.jsp.PageContext;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; javax.servlet.jsp.tagext.JspFragment;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; javax.servlet.jsp.tagext.SimpleTagSupport;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; javax.sql.rowset.JdbcRowSet;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.io.IOException;
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.io.StringWriter;
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; 
&lt;span&gt;11&lt;/span&gt; &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt; &lt;span&gt; * Created by shkstart on 2017/11/21.
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;  &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; Times &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; SimpleTagSupport {
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; 
&lt;span&gt;16&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt;&lt;span&gt; String times;
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; 
&lt;span&gt;18&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setTimes(String times) {
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.times =&lt;span&gt; times;
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; 
&lt;span&gt;22&lt;/span&gt; &lt;span&gt;    @Override
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; doTag() &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; JspException, IOException {
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;         PageContext pageContext =&lt;span&gt; (PageContext) getJspContext();
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 获取标签体，封装为 JSPFragment 对象&lt;/span&gt;
&lt;span&gt;26&lt;/span&gt;         JspFragment jspFragment =&lt;span&gt; getJspBody();
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;         StringWriter stringWriter = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; StringWriter();
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 将标签体输出到 StringWriter，若 invoke 方法参数为 null 则直接输出到页面&lt;/span&gt;
&lt;span&gt;29&lt;/span&gt; &lt;span&gt;        jspFragment.invoke(stringWriter);
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;         String content =&lt;span&gt; stringWriter.toString().toUpperCase();
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; 
&lt;span&gt;32&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt; c =&lt;span&gt; Integer.parseInt(times);
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = 0; i &amp;lt; c; i++&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt;             pageContext.getOut().print(content + &quot;&amp;lt;br&amp;gt;&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　　　　　b. tld 文件&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &amp;lt;tag&amp;gt;
&lt;span&gt;2&lt;/span&gt;         &amp;lt;name&amp;gt;toUpTimes&amp;lt;/name&amp;gt;
&lt;span&gt;3&lt;/span&gt;         &amp;lt;tag-&lt;span&gt;class&lt;/span&gt;&amp;gt;simple.myself.tag.helloworld.Times&amp;lt;/tag-&lt;span&gt;class&lt;/span&gt;&amp;gt;
&lt;span&gt;4&lt;/span&gt;         &amp;lt;body-content&amp;gt;scriptless&amp;lt;/body-content&amp;gt;
&lt;span&gt;5&lt;/span&gt;         &amp;lt;attribute&amp;gt;
&lt;span&gt;6&lt;/span&gt;             &amp;lt;name&amp;gt;times&amp;lt;/name&amp;gt;
&lt;span&gt;7&lt;/span&gt;             &amp;lt;required&amp;gt;&lt;span&gt;true&lt;/span&gt;&amp;lt;/required&amp;gt;
&lt;span&gt;8&lt;/span&gt;         &amp;lt;/attribute&amp;gt;
&lt;span&gt;9&lt;/span&gt; &amp;lt;/tag&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　　　　　c. 标签的使用&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;&amp;lt;%&lt;/span&gt;&lt;span&gt;@ page contentType&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text/html;charset=UTF-8&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; language&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;java&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;%&amp;gt;&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;&amp;lt;%&lt;/span&gt;&lt;span&gt;@taglib prefix&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;hello&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; uri&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;http://hello.world.com&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;%&amp;gt;&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;BodyAttr&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;h3&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;h3&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt;   &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;hello:toUpTimes &lt;/span&gt;&lt;span&gt;times&lt;/span&gt;&lt;span&gt;=&quot;10&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;HelloWorldAgain&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;hello:toUpTimes&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt; 
&lt;span&gt;11&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　　　7. 带父标签的标签&lt;/p&gt;
&lt;p&gt;　　　　　　1. 我们利用父标签实现一个类似于 if ... else if ... else if ... else ... 的标签&lt;/p&gt;
&lt;p&gt;　　　　　　2. 标签包含了 choose（父标签）、when（子标签）、otherwise（子标签），类似于 if ... else if ... else ...&lt;/p&gt;
&lt;p&gt;　　　　　　3. 父标签和子标签只是在标签处理器上有联系（通过 getParent），而在 tld 描述文件上没有联系&lt;/p&gt;
&lt;p&gt;　　　　　　4. 新建三个标签处理器类，如下&lt;/p&gt;
&lt;p&gt;　　　　　　　　a. 标签处理器类 （顺序为 choose --&amp;gt; when --&amp;gt; otherwise）&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;package&lt;/span&gt;&lt;span&gt; simple.myself.tag.helloworld;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; javax.servlet.jsp.JspException;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; javax.servlet.jsp.tagext.SimpleTagSupport;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.io.IOException;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt; * Created by shkstart on 2017/11/21.
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;  &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; Choose &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; SimpleTagSupport {
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; 
&lt;span&gt;12&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;    在父标签中创建一个变量，用于在子标签中的判断&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt; flag = &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; 
&lt;span&gt;15&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; setFlag(&lt;span&gt;boolean&lt;/span&gt;&lt;span&gt; flag) {
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.flag =&lt;span&gt; flag;
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; 
&lt;span&gt;19&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt;&lt;span&gt; isFlag() {
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; flag;
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; 
&lt;span&gt;23&lt;/span&gt; &lt;span&gt;    @Override
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; doTag() &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; JspException, IOException {
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;        对于父标签来说，其标签体为子标签，所以直接打印标签体就是执行子标签&lt;/span&gt;
&lt;span&gt;26&lt;/span&gt;         getJspBody().invoke(&lt;span&gt;null&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;package&lt;/span&gt;&lt;span&gt; simple.myself.tag.helloworld;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; javax.servlet.jsp.JspException;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; javax.servlet.jsp.tagext.JspTag;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; javax.servlet.jsp.tagext.SimpleTagSupport;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.io.IOException;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; 
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt; * Created by shkstart on 2017/11/21.
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;  &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; When &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; SimpleTagSupport {
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; 
&lt;span&gt;13&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt;&lt;span&gt; item;
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; 
&lt;span&gt;15&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; setItem(&lt;span&gt;boolean&lt;/span&gt;&lt;span&gt; item) {
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.item =&lt;span&gt; item;
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; 
&lt;span&gt;19&lt;/span&gt; &lt;span&gt;    @Override
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; doTag() &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; JspException, IOException {
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;         Choose jspTag =&lt;span&gt; (Choose) getParent();
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;         &lt;span&gt;boolean&lt;/span&gt; flag =&lt;span&gt; jspTag.isFlag();
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; 
&lt;span&gt;24&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (item) {
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (flag) {
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;                若父标签的标志为真，且子标签本身也为真，那么就执行子标签的标签的标签体，且将父标签的标志置为 false&lt;/span&gt;
&lt;span&gt;27&lt;/span&gt;                 getJspBody().invoke(&lt;span&gt;null&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;                 jspTag.setFlag(&lt;span&gt;false&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;package&lt;/span&gt;&lt;span&gt; simple.myself.tag.helloworld;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; javax.servlet.jsp.JspException;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; javax.servlet.jsp.tagext.SimpleTagSupport;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.io.IOException;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt; * Created by shkstart on 2017/11/21.
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;  &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; OtherWise &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; SimpleTagSupport {
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; 
&lt;span&gt;12&lt;/span&gt; &lt;span&gt;    @Override
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; doTag() &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; JspException, IOException {
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;         Choose choose =&lt;span&gt; (Choose) getParent();
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;         &lt;span&gt;boolean&lt;/span&gt; flag =&lt;span&gt; choose.isFlag();
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;        只需判断父标签是否为真，若执行了 when 那么就不会执行此操作，因为父标签的标志已经被置为 false&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (flag) {
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;             getJspBody().invoke(&lt;span&gt;null&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　　　　　b. tld 文件&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;tag&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;choose&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;tag-class&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;simple.myself.tag.helloworld.Choose&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;tag-class&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body-content&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;scriptless&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body-content&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;tag&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;tag&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;when&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;tag-class&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;simple.myself.tag.helloworld.When&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;tag-class&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body-content&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;scriptless&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body-content&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;attribute&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;item&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;required&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;true&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;required&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;rtexprvalue&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;true&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;rtexprvalue&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;attribute&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;tag&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;tag&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;otherwise&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;tag-class&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;simple.myself.tag.helloworld.OtherWise&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;tag-class&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body-content&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;scriptless&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body-content&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;tag&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;　　　　　　c. 使用（获取请求参数 age 的值，判断其值若是大于 25 则打印 DX，否则打印 XX），表面上看父标签和子标签没有直接上的联系，但是需要在父标签中新建标识控制子标签的执行与否&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;&amp;lt;%&lt;/span&gt;&lt;span&gt;@ page contentType&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text/html;charset=UTF-8&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; language&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;java&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;%&amp;gt;&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;&amp;lt;%&lt;/span&gt;&lt;span&gt;@ taglib prefix&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;hello&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; uri&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;http://hello.world.com&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;%&amp;gt;&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Choose&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;h3&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;hello:choose&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;hello:when &lt;/span&gt;&lt;span&gt;item&lt;/span&gt;&lt;span&gt;=&quot;${param.age &amp;gt; 25}&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;DX&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;hello:when&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;hello:otherwise&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;XX&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;hello:otherwise&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;hello:choose&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;h3&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;　　　　8. 实现一个自定义的 forEach 标签，实现了对集合的遍历（JSTL 中的 forEach 可以对集合和 Map等进行遍历，这里我们实现对集合的遍历就好）&lt;/p&gt;
&lt;p&gt;　　　　　　1. 其必须包含属性 ietms 获取集合信息&lt;/p&gt;
&lt;p&gt;　　　　　　2. 其必须包含属性 var 存储当期所遍历的信息&lt;/p&gt;
&lt;p&gt;　　　　　　3. 将当前所遍历的集合数据存入域对象 pageContext 中，属性名为 var，值为当前遍历的对象&lt;/p&gt;
&lt;p&gt;　　　　　　4. 在页面上使用的时候不需要去指明其域对象范围，因为默认的便是从 pageContext 中查找&lt;/p&gt;
&lt;p&gt;　　　　　　　　a. 标签处理器类&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;package&lt;/span&gt;&lt;span&gt; simple.myself.tag.helloworld;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; javax.servlet.jsp.JspException;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; javax.servlet.jsp.PageContext;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; javax.servlet.jsp.tagext.JspFragment;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; javax.servlet.jsp.tagext.SimpleTagSupport;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.io.IOException;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.List;
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; 
&lt;span&gt;10&lt;/span&gt; &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt; &lt;span&gt; * Created by shkstart on 2017/11/21.
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;  &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; ForEach &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; SimpleTagSupport {
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; 
&lt;span&gt;15&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; List&amp;lt;Object&amp;gt;&lt;span&gt; items;
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt;&lt;span&gt; String var;
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; 
&lt;span&gt;18&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; setItems(List&amp;lt;Object&amp;gt;&lt;span&gt; items) {
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.items =&lt;span&gt; items;
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; 
&lt;span&gt;22&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setVar(String var) {
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.var =&lt;span&gt; var;
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; 
&lt;span&gt;26&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;    自定义实现 forEach
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;    遍历 items 集合，并将该当前遍历的对象加入到 pageContext 中，键为 var， 值为正在遍历的对象
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;    在页面上若不加范围 默认的便是从 pageContext 开始查找，所以可以省略&lt;/span&gt;
&lt;span&gt;29&lt;/span&gt; &lt;span&gt;    @Override
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; doTag() &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; JspException, IOException {
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;         PageContext pageContext =&lt;span&gt; (PageContext) getJspContext();
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; 
&lt;span&gt;33&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt;&lt;span&gt; (Object obj : items) {
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; &lt;span&gt;            pageContext.setAttribute(var, obj);
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt;             JspFragment jspFragment =&lt;span&gt; getJspBody();
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt;             jspFragment.invoke(&lt;span&gt;null&lt;/span&gt;&lt;span&gt; );
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　　　　　　　b. tld 描述文件&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;tag&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;forEach&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;tag-class&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;simple.myself.tag.helloworld.ForEach&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;tag-class&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body-content&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;scriptless&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body-content&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt; 
&lt;span&gt; 6&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;attribute&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;items&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;required&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;true&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;required&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;rtexprvalue&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;true&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;rtexprvalue&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;attribute&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt; 
&lt;span&gt;12&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;attribute&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;var&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;required&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;true&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;required&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;rtexprvalue&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;false&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;rtexprvalue&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;attribute&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;tag&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;　　　　　　　　c. 页面上的使用（包含了在页面上模仿 Servlet 给集合中添加数据在请求转发到获取页面对其进行遍历）&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;44&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;&amp;lt;%&lt;/span&gt;&lt;span&gt;@ page import&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;com.java.jstl.domain.Customer&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;%&amp;gt;&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;&amp;lt;%&lt;/span&gt;&lt;span&gt;@ page import&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;java.util.List&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;%&amp;gt;&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;&amp;lt;%&lt;/span&gt;&lt;span&gt;@ page import&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;java.util.ArrayList&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;%&amp;gt;&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;&amp;lt;%&lt;/span&gt;&lt;span&gt;@ page contentType&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text/html;charset=UTF-8&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; language&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;java&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;%&amp;gt;&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;Customer&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;h3&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;&amp;lt;%&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt; &lt;span&gt;    List&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Customer&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt; list &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; ArrayList&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Customer&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;();
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;    list.add(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Customer(&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;z&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;x&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;));
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;    list.add(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Customer(&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;v&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;q&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;));
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;    list.add(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Customer(&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;c&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;w&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;));
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;    list.add(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Customer(&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;x&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;e&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;));
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; 
&lt;span&gt;17&lt;/span&gt; &lt;span&gt;    request.setAttribute(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;customer&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, list);
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;%&amp;gt;&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;jsp:forward &lt;/span&gt;&lt;span&gt;page&lt;/span&gt;&lt;span&gt;=&quot;forEach.jsp&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;jsp:forward&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;21&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;&amp;lt;%&lt;/span&gt;&lt;span&gt;@ page contentType&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text/html;charset=UTF-8&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; language&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;java&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;%&amp;gt;&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;&amp;lt;%&lt;/span&gt;&lt;span&gt;@taglib prefix&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;hello&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; uri&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;http://hello.world.com&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;%&amp;gt;&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;ForEachOfMy&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;h3&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt;   &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;hello:forEach &lt;/span&gt;&lt;span&gt;items&lt;/span&gt;&lt;span&gt;=&quot;${requestScope.customer}&quot;&lt;/span&gt;&lt;span&gt; var&lt;/span&gt;&lt;span&gt;=&quot;customer&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt;         ${customer.id}, ${customer.name}, ${customer.address}&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;br&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt;   &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;hello:forEach&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;h3&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;　　　　9. 我们上面要求大家自己去实现思考的自定义标签的代码&lt;/p&gt;
&lt;p&gt;　　　　　　1. 是求两个属性的最大值&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;package&lt;/span&gt;&lt;span&gt; simple.myself.tag.helloworld;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; javax.servlet.jsp.JspContext;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; javax.servlet.jsp.JspException;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; javax.servlet.jsp.PageContext;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; javax.servlet.jsp.tagext.JspFragment;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; javax.servlet.jsp.tagext.JspTag;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; javax.servlet.jsp.tagext.SimpleTag;
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.io.IOException;
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; 
&lt;span&gt;11&lt;/span&gt; &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt; &lt;span&gt; * 此标签的功能是比较两个参数值，并输出比较大的值到页面
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;  &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; MaxMin &lt;span&gt;implements&lt;/span&gt;&lt;span&gt; SimpleTag {
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; 
&lt;span&gt;16&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt;&lt;span&gt; String max;
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt;&lt;span&gt; String min;
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt;&lt;span&gt; PageContext pageContext;
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; 
&lt;span&gt;20&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setMax(String max) {
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.max =&lt;span&gt; max;
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; 
&lt;span&gt;24&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setMin(String min) {
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.min =&lt;span&gt; min;
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; 
&lt;span&gt;28&lt;/span&gt; &lt;span&gt;    @Override
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; doTag() &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; JspException, IOException {
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt;&lt;span&gt; num1, num2;
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;         num1 =&lt;span&gt; Integer.parseInt(max);
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;         num2 =&lt;span&gt; Integer.parseInt(min);
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; 
&lt;span&gt;34&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (num1 &amp;gt;&lt;span&gt; num2) {
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt;             pageContext.getOut().print(num1 + &quot;&amp;lt;br&amp;gt;&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt; &lt;span&gt;         }
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt;         pageContext.getOut().print(num2 + &quot;&amp;lt;br&amp;gt;&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt; 
&lt;span&gt;41&lt;/span&gt; &lt;span&gt;    @Override
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setParent(JspTag jspTag) {
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt; 
&lt;span&gt;44&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt; 
&lt;span&gt;46&lt;/span&gt; &lt;span&gt;    @Override
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; JspTag getParent() {
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;49&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;50&lt;/span&gt; 
&lt;span&gt;51&lt;/span&gt; &lt;span&gt;    @Override
&lt;/span&gt;&lt;span&gt;52&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setJspContext(JspContext jspContext) {
&lt;/span&gt;&lt;span&gt;53&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.pageContext =&lt;span&gt; (PageContext) jspContext;
&lt;/span&gt;&lt;span&gt;54&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;55&lt;/span&gt; 
&lt;span&gt;56&lt;/span&gt; &lt;span&gt;    @Override
&lt;/span&gt;&lt;span&gt;57&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setJspBody(JspFragment jspFragment) {
&lt;/span&gt;&lt;span&gt;58&lt;/span&gt; 
&lt;span&gt;59&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;60&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;tag&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;max&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;tag-class&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;simple.myself.tag.helloworld.MaxMin&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;tag-class&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body-content&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;empty&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body-content&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;attribute&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;max&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;required&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;true&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;required&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;rtexprvalue&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;false&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;rtexprvalue&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;attribute&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;attribute&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;min&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;required&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;true&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;required&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;rtexprvalue&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;false&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;rtexprvalue&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;attribute&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;tag&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;&amp;lt;%&lt;/span&gt;&lt;span&gt;@ page contentType&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text/html;charset=UTF-8&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; language&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;java&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;%&amp;gt;&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;&amp;lt;%&lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;导入标签库&lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;%&amp;gt;&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;&amp;lt;%&lt;/span&gt;&lt;span&gt;@taglib prefix&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;hello&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; uri&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;http://hello.world.com&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;%&amp;gt;&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;myselfTag&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt;   &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;h3&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt;       &lt;span&gt;&amp;lt;%&lt;/span&gt;&lt;span&gt;--&amp;lt;&lt;/span&gt;&lt;span&gt;hello:world attr&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;${param.name}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; count&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;hello:world&lt;/span&gt;&lt;span&gt;&amp;gt;--&lt;/span&gt;&lt;span&gt;%&amp;gt;&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;hello:max &lt;/span&gt;&lt;span&gt;max&lt;/span&gt;&lt;span&gt;=&quot;20&quot;&lt;/span&gt;&lt;span&gt; min&lt;/span&gt;&lt;span&gt;=&quot;50&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;hello:max&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt;   &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;h3&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　　　　　2. 获取本地文件将其打印到页面&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;package simple.myself.tag.helloworld;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;import javax.servlet.jsp.JspException;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;import javax.servlet.jsp.PageContext;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;import javax.servlet.jsp.tagext.SimpleTagSupport;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;import java.io.*;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;import java.util.regex.Pattern;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; 
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;/**
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt; * 此标签的功能是将文件输出到页面，
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;  * 如果要输出的文件中有&lt;span&gt;&amp;lt;&amp;gt;&lt;/span&gt; 就需要利用正则表达式将其替换为 &lt;span&gt;&amp;amp;lt&lt;/span&gt; 和 &lt;span&gt;&amp;amp;gt&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt; &lt;span&gt; */
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;public class IO extends SimpleTagSupport{
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; 
&lt;span&gt;15&lt;/span&gt; &lt;span&gt;    private PageContext pageContext;
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;    private String src;
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; 
&lt;span&gt;18&lt;/span&gt; &lt;span&gt;    public void setSrc(String src) {
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;        this.src = src;
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; 
&lt;span&gt;22&lt;/span&gt; &lt;span&gt;    @Override
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;    public void doTag() throws JspException, IOException {
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; &lt;span&gt;//        利用 Reader 读取字符文件
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; &lt;span&gt;        File file = new File(src);
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; &lt;span&gt;        pageContext = (PageContext) getJspContext();
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; 
&lt;span&gt;28&lt;/span&gt; &lt;span&gt;        Reader reader = new FileReader(file);
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; &lt;span&gt;//        加上缓冲流加快读取速度
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; &lt;span&gt;        BufferedReader bufferedReader = new BufferedReader(reader);
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; &lt;span&gt;        String str;
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; 
&lt;span&gt;33&lt;/span&gt; &lt;span&gt;        while((str = bufferedReader.readLine()) != null) {
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; //            利用正则表达式将 &lt;span&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;span&gt; 转义
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt;             str = Pattern.compile(&quot;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;&quot;).matcher&lt;/span&gt;&lt;span&gt;(str).replaceAll(&quot;&amp;amp;lt&quot;);
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt; &lt;span&gt;            str &lt;/span&gt;&lt;span&gt;= Pattern.compile(&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&quot;).matcher(str).replaceAll(&quot;&lt;span&gt;&amp;amp;gt&lt;/span&gt;&lt;span&gt;&quot;);
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt;             pageContext.getOut().print(str + &quot;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;br&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;&quot;);
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt; 
&lt;span&gt;40&lt;/span&gt; &lt;span&gt;        bufferedReader.close();
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt; &lt;span&gt;        reader.close();
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;tag&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;readFile&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;tag-class&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;simple.myself.tag.helloworld.IO&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;tag-class&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body-content&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;empty&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body-content&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;attribute&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;src&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;required&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;true&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;required&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;rtexprvalue&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;false&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;rtexprvalue&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;attribute&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;tag&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;&amp;lt;%&lt;/span&gt;&lt;span&gt;@ page contentType&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text/html;charset=UTF-8&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; language&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;java&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;%&amp;gt;&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;&amp;lt;%&lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;导入标签库&lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;%&amp;gt;&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;&amp;lt;%&lt;/span&gt;&lt;span&gt;@taglib prefix&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;hello&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; uri&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;http://hello.world.com&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;%&amp;gt;&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;myselfTag&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt;   &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;h3&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt;       &lt;span&gt;&amp;lt;%&lt;/span&gt;&lt;span&gt;--&amp;lt;&lt;/span&gt;&lt;span&gt;hello:world attr&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;${param.name}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; count&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;hello:world&lt;/span&gt;&lt;span&gt;&amp;gt;--&lt;/span&gt;&lt;span&gt;%&amp;gt;&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;hello:max &lt;/span&gt;&lt;span&gt;max&lt;/span&gt;&lt;span&gt;=&quot;20&quot;&lt;/span&gt;&lt;span&gt; min&lt;/span&gt;&lt;span&gt;=&quot;50&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;hello:max&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;hello:readFile &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;C:\Users\lenovo\Desktop\error.txt&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;hello:readFile&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt;   &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;h3&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;　　到这里我们就将自定义简单标签讲完了，掌握了自定义 JSTL 标签那么对于学习 JSTL 就更加简单了，现在我们开始说一下 JSTL 吧。&lt;/p&gt;
&lt;p&gt;　　　　1. JSTL 有许多的标签库，我们最常用是核心标签库，我们在使用之前首先需要将其 jar 包加入到 lib 目录下，对于 IDEA 需要新建 lib 目录；&lt;/p&gt;
&lt;p&gt;　　　　2.  &lt;span class=&quot;cnblogs_code&quot;&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;c:out&lt;/span&gt; &lt;span&gt;value&lt;/span&gt;&lt;span&gt;=&quot;&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;c:out&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;  等同于  &lt;span class=&quot;cnblogs_code&quot;&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;%= %&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt; ，但是 c:out 标签可以对敏感字符进行自动转换，如: &lt;span&gt;&lt;em&gt;&lt;strong&gt;&amp;lt;&amp;gt;&lt;/strong&gt;&lt;/em&gt;&lt;/span&gt;，Value 值可以是 EL 表达式，但单独使用 EL 表达式将不会转换敏感字符&lt;/p&gt;
&lt;p&gt;　　　　3.  &lt;span class=&quot;cnblogs_code&quot;&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;c:set&lt;/span&gt; &lt;span&gt;var&lt;/span&gt;&lt;span&gt;=”属性名”&lt;/span&gt; &lt;span&gt;value&lt;/span&gt;&lt;span&gt;=”属性值”&lt;/span&gt; &lt;span&gt;scope&lt;/span&gt;&lt;span&gt;=””&amp;gt;&amp;lt;/c:set&amp;gt;&lt;/span&gt;&lt;/span&gt;  value 属性值可以使用 EL 表达式赋值，c:set 直接在指定范围放置属性&lt;/p&gt;
&lt;p&gt;　　　　4. c:set 也可以为某域对象的范围内的某 JavaBean 对象赋值 （其中 request 范围内的 cust 属性为某一 JavaBean 对象）&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;c:set &lt;/span&gt;&lt;span&gt;target&lt;/span&gt;&lt;span&gt;=”${requestScope.cust &lt;/span&gt;&lt;span&gt;}” property&lt;/span&gt;&lt;span&gt;=”id” &lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;=”${param.id &lt;/span&gt;&lt;span&gt;}”&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;c:set&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　　　5.  &lt;span class=&quot;cnblogs_code&quot;&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;c:if&lt;/span&gt; &lt;span&gt;test&lt;/span&gt;&lt;span&gt;=&quot;&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;c:if&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;  test 表达式的值若为 true，则打印标签体，我们还可以利用 scope 和 var 属性将 boolean 结果存储到域对象中，以便后面的使用。但是没有对应的 else 标签（我们可以利用 choose when otherwise 实现 if else）&lt;/p&gt;
&lt;p&gt;　　　　6.  &lt;span class=&quot;cnblogs_code&quot;&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;c:forEach&lt;/span&gt; &lt;span&gt;items&lt;/span&gt;&lt;span&gt;=&quot;&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;c:forEach&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt; 可以实现对集合、map、数组进行遍历，其还有属性&lt;span&gt;&lt;em&gt;&lt;strong&gt; begin、 end 、step、 var、 item、varStatus&lt;/strong&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　　　　　1).begin 表示从哪个下标开始（默认从 0 开始）&lt;span&gt;&lt;em&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　　　　　2). end 表示遍历到哪结束&lt;/p&gt;
&lt;p&gt;　　　　　　3). step 表示每次遍历后增加几（默认为 1）&lt;/p&gt;
&lt;p&gt;　　　　　　4). var 将当前查询的数据保存到键为 var 属性的 pageContext 中&lt;/p&gt;
&lt;p&gt;　　　　　　5). item 从域对象中获取结合数据&lt;/p&gt;
&lt;p&gt;　　　　　　6). varStatus 属性还有拥有&lt;span&gt;&lt;em&gt;&lt;strong&gt; index 、count、 first 、last&lt;/strong&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　　　　　　　a. index 表示当前所操作的下标&lt;/p&gt;
&lt;p&gt;　　　　　　　　b. count 表示当前所操作的对象是第几个&lt;/p&gt;
&lt;p&gt;　　　　　　　　c. first 返回 boolean 值，表示当前对象是不是第一个（所操作范围之内，即第一个打印的其值为  true，并不是整个集合的第一个，取决于 begin 的值）&lt;/p&gt;
&lt;p&gt;　　　　　　　　d. last 返回 boolean 值，表示当前对象是不是最后一个（所操作范围之内，即最后一个打印的其值为 true，并不是整个集合的最后一个，取决于 end 的值）&lt;/p&gt;
&lt;p&gt;　　上面的这些就是我们今天所讲的内容，对于 JSTL 的核心标签库我们还没有讲完，更不用说其他的标签库，但是我们给大家讲解了如何自定义 JSTL 标签，所以对自己感兴趣的标签可以去阅读源代码，相信大家掌握了自定义标签应该对阅读源代码没有多大的难点。&lt;/p&gt;
&lt;p&gt;　　谢谢阅读，希望对您有用，有不对的地方或者更好的建议还望指出！&lt;/p&gt;

</description>
<pubDate>Mon, 27 Nov 2017 07:08:00 +0000</pubDate>
<dc:creator>bgzyy</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/bgzyy/p/7901137.html</dc:identifier>
</item>
<item>
<title>javascript面向对象编程（OOP）——汇总 - 陈锦雄</title>
<link>http://www.cnblogs.com/begin-world/p/7902532.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/begin-world/p/7902532.html</guid>
<description>&lt;pre&gt;
&amp;lt;script&amp;gt;
    &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;提示：&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; arguments是每一个函数内部的一个对象
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 可以访问实际传递给函数的参数的信息。
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 声明的时候参数的个数与实际调用时无关&lt;/span&gt;
&lt;span&gt;    
    function add(a,b){
    console.log(add.length);&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 形参的个数&lt;/span&gt;
    console.log(arguments.length);&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 实际传过来的参数&lt;/span&gt;
    var total = 0&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(var i = 0;i&amp;lt; arguments.length;i++&lt;span&gt;){
        total &lt;/span&gt;+=&lt;span&gt; arguments[i];
    }
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; total;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 返回实参的总和&lt;/span&gt;
&lt;span&gt;    }
    
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 调用时传的实参&lt;/span&gt;
    var result = add(1,2,3,4,5&lt;span&gt;);
    var result2 &lt;/span&gt;= add(1,2&lt;span&gt;);
    
    console.log(result);&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 15&lt;/span&gt;
    console.log(result2);&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;
&amp;lt;/script&amp;gt;
&lt;/pre&gt;</description>
<pubDate>Mon, 27 Nov 2017 07:00:00 +0000</pubDate>
<dc:creator>陈锦雄</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/begin-world/p/7902532.html</dc:identifier>
</item>
<item>
<title>C++雾中风景3：const用法的小结 - HappenLee</title>
<link>http://www.cnblogs.com/happenlee/p/7904134.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/happenlee/p/7904134.html</guid>
<description>&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;const作为C与C++共有的关键字，很多使用的方式大同小异。但由于C++是一门面向对象的语言，在类和对象中有更多的使用规则。之前学习C语言的时候就被const这个关键字搅得焦头烂额，正巧也借这篇文章做个完整的小结。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;const关键字&quot;&gt;1.const关键字：&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;const&lt;/strong&gt;关键字，翻译成中文是常量，常数的意思。所以在绝大多数场合之中，const是来定义常量的，定义常量也是好的编程习惯。在C类语言之中，定义常量通常会使用宏定义或const关键字来定义常量。二者的区别就在于：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;1.宏定义是在&lt;strong&gt;预编译&lt;/strong&gt;阶段进行文本替换，而const是在&lt;strong&gt;编译&lt;/strong&gt;阶段进行代码的语义约束。&lt;/li&gt;
&lt;li&gt;2.由于二者所生效的阶段不同，所以能够起的作用也不同。const常量具有具体的类型，会在编译阶段进行类型检查，产生的代码显然会更加安全。（当然宏定义会更加灵活，可以定义代码或字符串，相对来讲如果要进行大量的宏替换，预编译时间会更长。）&lt;/li&gt;
&lt;li&gt;3.宏定义很多时候是展开给立即数，多次替换需要多次分配内存，而const可以通过全局的符号表，仅保存一份copy就完事了。&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;const的用法&quot;&gt;2.const的用法：&lt;/h3&gt;
&lt;p&gt;上面说了const的诸多好处，接下来我们完整的梳理一下const关键字的用法：&lt;/p&gt;
&lt;p&gt;####修饰变量&lt;br/&gt;初级用法比较简单，作为一个修饰符加在变量之前就可以定义一个常量了。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;dt&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; Pi = &lt;span class=&quot;fl&quot;&gt;3.1415926&lt;/span&gt;；
&lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;const&lt;/span&gt; Pi = &lt;span class=&quot;fl&quot;&gt;3.1415926&lt;/span&gt;；&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这里需要强调一下，所谓的常量只是命名符对内存空间的指向被绑定，内存空间上的内容其实不是常量，依旧可以被修改。（好拗口，妈的什么意思嘛～～看代码吧）&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;dt&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; Pi = &lt;span class=&quot;fl&quot;&gt;3.1415926&lt;/span&gt;；
&lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;const&lt;/span&gt; Pi = &lt;span class=&quot;fl&quot;&gt;3.1415926&lt;/span&gt;；&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;####修饰指针&lt;br/&gt;这个用法就比较蛋疼了，需要记住const关键字在变量类型定义时的先后顺序。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;dt&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt;* x = &amp;amp;y；                  &lt;span class=&quot;co&quot;&gt;//变量的指向内容不能做修改&lt;/span&gt;
&lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt;* &lt;span class=&quot;dt&quot;&gt;const&lt;/span&gt; x  = &amp;amp;y；                 &lt;span class=&quot;co&quot;&gt;//指针指向的地址不能做修改&lt;/span&gt;
&lt;span class=&quot;dt&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt;* &lt;span class=&quot;dt&quot;&gt;const&lt;/span&gt; x  = &amp;amp;y；           &lt;span class=&quot;co&quot;&gt;//两者都不能做修改&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;大家简单记住一个口诀吧：&lt;strong&gt;“前限域，后限针。”&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;####修饰引用&lt;br/&gt;这个用法和指针类似，把*号换成&amp;amp;就行了，这里就不赘述了。&lt;/p&gt;
&lt;h4 id=&quot;函数参数修饰&quot;&gt;函数参数修饰&lt;/h4&gt;
&lt;p&gt;这里主要就是应用在地址传递上，在值传递的参数情况下，const没有意义。通过地址传递提高效率，同时使用const关键字来保护传递的内容不被修改。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;Fun&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;const&lt;/span&gt; A *arg);                &lt;span class=&quot;co&quot;&gt;//修饰指针型传入参数&lt;/span&gt;
&lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;Fun&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;const&lt;/span&gt; A &amp;amp;arg);                &lt;span class=&quot;co&quot;&gt;//修饰引用型传入参数&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;类之中的const关键字&quot;&gt;类之中的const关键字&lt;/h4&gt;
&lt;p&gt;这部分内容是C++与C语言区别的部分，Const关键字对类之中的变量与函数都可以修饰，又涉及到之前系列文章反复涉及的权限控制，也就是封装的内容。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;const成员变量&lt;br/&gt;这个const关键字在修饰成员变量时，与上文提及的使用雷同，const变量在初始化列表中赋值，并且不能进行修改。&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;    &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; object
    { 
        …
        &lt;span class=&quot;dt&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; value;         &lt;span class=&quot;co&quot;&gt;//const变量不能被修改 （int const value也可以）&lt;/span&gt;
        …
        &lt;span class=&quot;fu&quot;&gt;object&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; x): &lt;span class=&quot;fu&quot;&gt;value&lt;/span&gt;(x) { } ; &lt;span class=&quot;co&quot;&gt;//构造函数初始化const变量&lt;/span&gt;
     } &lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;const成员函数&lt;br/&gt;const成员函数是让我最感兴趣的编程逻辑，简单来说，这是一个带&lt;strong&gt;函数式编程&lt;/strong&gt;逻辑的一种使用方式。简而言之，const修饰的成员函数没有&lt;strong&gt;副作用&lt;/strong&gt;,不能修改对象的成员内容，如果需要修改，就需要生成新的对象。&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;    &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; object
    { 
        …
        &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; value;        
        …
        &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;test&lt;/span&gt;() &lt;span class=&quot;dt&quot;&gt;const&lt;/span&gt; {
                value = &lt;span class=&quot;dv&quot;&gt;20&lt;/span&gt;; &lt;span class=&quot;co&quot;&gt;//编译错误，const函数不能修改对象之中的成员变量，也不能调用其他非const函数。&lt;/span&gt;
        } &lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;const对象&lt;br/&gt;const关键字可以在对象初始化时候作为修饰，const关键字修饰的对象称之为&lt;strong&gt;常量对象&lt;/strong&gt;。常量对象所有成员默认添加了const修饰字，也就是所有的成员变量都不能进行修改。我们可以认为是关闭了写权限，所以const对象只能调用const成员函数，非const成员函数都有修改成员变量的权限。&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;    &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; object
    { 
        …
        &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; value;        
        …
        &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;test&lt;/span&gt;() &lt;span class=&quot;dt&quot;&gt;const&lt;/span&gt; {
        } 

       &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;main&lt;/span&gt;() {
        &lt;span class=&quot;dt&quot;&gt;const&lt;/span&gt; object obj;  
      }&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;非c语言是怎么解决常量问题的&quot;&gt;3.非C++语言是怎么解决常量问题的：&lt;/h3&gt;
&lt;p&gt;C语言的亲兄弟，const关键字与C与C++基本区别不大，读者可以之行总结。&lt;/p&gt;
</description>
<pubDate>Mon, 27 Nov 2017 06:55:00 +0000</pubDate>
<dc:creator>HappenLee</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/happenlee/p/7904134.html</dc:identifier>
</item>
<item>
<title>基于FPGA的有限状态机浅析 - NingHeChuan</title>
<link>http://www.cnblogs.com/ninghechuan/p/7898297.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/ninghechuan/p/7898297.html</guid>
<description>&lt;p align=&quot;center&quot;&gt;　　前言：状态机大法好，状态机几乎可以实现一切时序逻辑电路。&lt;/p&gt;
&lt;p&gt;有限状态机（Finite State Machine， FSM），根据状态机的输出是否与输入有关，可分为Moore型状态机和Mealy型状态机。Moore型状态机输出仅仅与现态有关和Mealy型状态机不仅与现态有关，也与输入有关，所以会受到输入的干扰，可能会产生毛刺（Glith）的现象，所以我们通常使用的是Moore型状态机。&lt;/p&gt;
&lt;p&gt;         状态机的编码，二进制编码（Binary），格雷码编码（Gray-code），独热码（One-hot）。不同的编码方式是防止在状态转移中发生突变，使得状态转移更为稳定，系统更加可靠，但是通常情况下我们直接采用的是二进制进行编码，除非系统对稳定性和状态编码有特殊要求。&lt;/p&gt;
&lt;p&gt;         状态机的描述，一段式、二段式、三段式。&lt;/p&gt;
&lt;p&gt;一段式状态机，将组合逻辑和时序逻辑混合在一起，这样的写法对于逻辑简单的状态机来说还是可以使用的，但是对于复杂的逻辑就不推荐了，如果状态复杂也会容易出错，而且一个always块中信号太多也不利于维护和修改。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;状态参数声明&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;parameter&lt;/span&gt;     S0    =    &lt;span&gt;4&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;b0000,&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt;             S1    =    &lt;span&gt;4&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;b0001,&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt;             s2    =    &lt;span&gt;4&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;b0010;&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;FSM one segment&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;reg&lt;/span&gt;     [&lt;span&gt;3&lt;/span&gt;:&lt;span&gt;0&lt;/span&gt;&lt;span&gt;]    state;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;always&lt;/span&gt; @(&lt;span&gt;posedge&lt;/span&gt; clk &lt;span&gt;or&lt;/span&gt; &lt;span&gt;negedge&lt;/span&gt; rst_n)&lt;span&gt;begin&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt;(!&lt;span&gt;rst_n)
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;         state &amp;lt;=&lt;span&gt; S0;
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;     &lt;span&gt;else&lt;/span&gt; &lt;span&gt;begin&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt;         &lt;span&gt;case&lt;/span&gt;&lt;span&gt;(state)
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;        S0:
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;        S1:
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;        S2:
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;        .
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;        .
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;        .
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;         &lt;span&gt;default&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;         &lt;span&gt;endcase&lt;/span&gt; 
&lt;span&gt;20&lt;/span&gt;     &lt;span&gt;end&lt;/span&gt;
&lt;span&gt;21&lt;/span&gt; &lt;span&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;两段式状态机也是一种常用的写法，它把组合逻辑和时序逻辑区分出来，第一段负责状态的转移，第二段是组合逻辑赋值，但是这种写法的缺点是，组合逻辑较容易产生毛刺等常见问题，关于组合逻辑较容易产生毛刺原因，下文会提到。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;状态参数声明&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;parameter&lt;/span&gt;     S0    =    &lt;span&gt;4&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;b0000,&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt;             S1    =    &lt;span&gt;4&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;b0001,&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt;             s2    =    &lt;span&gt;4&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;b0010;&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;FSM two segment&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;reg&lt;/span&gt;     [&lt;span&gt;3&lt;/span&gt;:&lt;span&gt;0&lt;/span&gt;&lt;span&gt;]    pre_state;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;reg&lt;/span&gt;     [&lt;span&gt;3&lt;/span&gt;:&lt;span&gt;0&lt;/span&gt;&lt;span&gt;]    next_state;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;--------------------------------------
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;FSM one&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt; &lt;span&gt;always&lt;/span&gt; @(&lt;span&gt;posedge&lt;/span&gt; clk &lt;span&gt;or&lt;/span&gt; &lt;span&gt;negedge&lt;/span&gt; rst_n)&lt;span&gt;begin&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt;(!&lt;span&gt;rst_n)
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;         pre_state &amp;lt;=&lt;span&gt; S0;
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;     &lt;span&gt;else&lt;/span&gt; 
&lt;span&gt;14&lt;/span&gt;         pre_state &amp;lt;=&lt;span&gt; next_state;
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;end&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt; 
&lt;span&gt;17&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;FSM two&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt; &lt;span&gt;always&lt;/span&gt;    @(*)&lt;span&gt;begin&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt;     &lt;span&gt;case&lt;/span&gt;&lt;span&gt;(pre_state)
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;    S0:
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;    S1:
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;    S2:
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;    .
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; &lt;span&gt;    .
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; &lt;span&gt;    .
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;     &lt;span&gt;default&lt;/span&gt;&lt;span&gt;:;
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;     &lt;span&gt;endcase&lt;/span&gt;
&lt;span&gt;28&lt;/span&gt; 
&lt;span&gt;29&lt;/span&gt; &lt;span&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;三段式状态机就可以较好的解决一段二段的不足，我也是比较推荐的写法，第一段采用时序逻辑负责状态转移，第二段组合逻辑负责数据赋值，第三段时序逻辑负责输出，代码层次清晰，容易维护，时序逻辑的输出解决了两段式写法中组合逻辑的毛刺问题。但是资源消耗会多一些，此外，三段式从输入到输出会比一段式和二段式延迟一个时钟周期。在书写状态机的时候，一定要事先设计好状态转移图，将所有的状态都考虑到，避免状态进入死循环，或者跳到偏离态。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;状态参数声明&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;parameter&lt;/span&gt;     S0    =    &lt;span&gt;4&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;b0000,&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt;             S1    =    &lt;span&gt;4&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;b0001,&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt;             s2    =    &lt;span&gt;4&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;b0010;&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;FSM three segment
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;--------------------------------------
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;FSM one&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;always&lt;/span&gt; @(&lt;span&gt;posedge&lt;/span&gt; clk &lt;span&gt;or&lt;/span&gt; &lt;span&gt;negedge&lt;/span&gt; rst_n)&lt;span&gt;begin&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt;(!&lt;span&gt;rst_n)
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;         pre_state &amp;lt;=&lt;span&gt; S0;
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;     &lt;span&gt;else&lt;/span&gt; 
&lt;span&gt;12&lt;/span&gt;         pre_state &amp;lt;=&lt;span&gt; next_state;
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;end&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt; 
&lt;span&gt;15&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;FSM two&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt; &lt;span&gt;always&lt;/span&gt;    @(*)&lt;span&gt;begin&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt;     &lt;span&gt;case&lt;/span&gt;&lt;span&gt;(pre_state)
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;    S0:
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;    S1:
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;    S2:
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;    .
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;    .
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;    .
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;     &lt;span&gt;default&lt;/span&gt;&lt;span&gt;:;
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;     &lt;span&gt;endcase&lt;/span&gt;
&lt;span&gt;26&lt;/span&gt; &lt;span&gt;end&lt;/span&gt;
&lt;span&gt;27&lt;/span&gt; 
&lt;span&gt;28&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;FSM three&lt;/span&gt;
&lt;span&gt;29&lt;/span&gt; &lt;span&gt;always&lt;/span&gt;    @(&lt;span&gt;posedge&lt;/span&gt; clk &lt;span&gt;or&lt;/span&gt; &lt;span&gt;negedge&lt;/span&gt; rst_n)&lt;span&gt;begin&lt;/span&gt;
&lt;span&gt;30&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt;(!&lt;span&gt;rst_n)
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;         dout &amp;lt;= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;b0;&lt;/span&gt;
&lt;span&gt;32&lt;/span&gt;     &lt;span&gt;else&lt;/span&gt; &lt;span&gt;begin&lt;/span&gt;
&lt;span&gt;33&lt;/span&gt;         &lt;span&gt;case&lt;/span&gt;&lt;span&gt;(pre_state)
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; &lt;span&gt;        S0:    
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt; &lt;span&gt;        S1:
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt; &lt;span&gt;        S2:
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt; &lt;span&gt;        .
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt; &lt;span&gt;        .
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt; &lt;span&gt;        .
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt;         &lt;span&gt;default&lt;/span&gt;&lt;span&gt;:;
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt;         &lt;span&gt;endcase&lt;/span&gt;
&lt;span&gt;42&lt;/span&gt;     &lt;span&gt;end&lt;/span&gt;
&lt;span&gt;43&lt;/span&gt; &lt;span&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;         如下图，我通过一个实例来说明一下状态机的使用。下面是一个序列检测状态转移图，检测是的使1101这个序列，我们给这个序列的检测序列是11101 1101这一串数据。在这个序列检测器中，我们允许使用重复位。也就是说，前一个“1101”最后一位的1可以作为后一个“1101”序列的起始位。如果不允许重复为位，只需要将S4到S2的转移替换成S4到S1即可。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1057546/201711/1057546-20171126100004781-1527922416.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;         首先，从输出状态S0开始检测，当S0检测到1时跳到S1，否则跳回S0，S1检测到1状态跳到S2，否则跳回S0，S2检测到0状态跳到S3，否则还停留在S2状态，因为这里我们的检测序列允许重复位，所以S1检测到的1与S2检测到的1保留，不舍弃作为一下组1101的前两位，所以只需要继续检测下一位数据即可。S3、S4的状态一次类推。这里举着个例子是为了说明状态机的状态跳转，在我们实际的设计中这种情况也是会遇到的。&lt;/p&gt;
&lt;p&gt;         在使用状态机来描述时序电路的时候，首先应该做的是画出状态转移图，然后根据状态跳转来描述代码，最后便会事半功倍。这段序列检测的代码我也贴出来。当然这只是序列检测的一个应用了，我前面也说了状态机机会可以实现一切的时序电路。如果你遇到实在不好解决的设计，那么这个时候，你就可以考虑一下使用状态机了。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;module&lt;/span&gt;&lt;span&gt; state(
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;     &lt;span&gt;input&lt;/span&gt;&lt;span&gt;                 mclk, 
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;     &lt;span&gt;input&lt;/span&gt;&lt;span&gt;                rst_n,
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;     &lt;span&gt;input&lt;/span&gt;&lt;span&gt;                din,
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;     &lt;span&gt;output&lt;/span&gt;     &lt;span&gt;reg&lt;/span&gt;&lt;span&gt;         dout;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;    );
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;      
&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;parameter&lt;/span&gt;         s0 = &lt;span&gt;3&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;b000,&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt;                 s1 = &lt;span&gt;3&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;b001,&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt;                 s2 = &lt;span&gt;3&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;b010,&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt;                 s3 = &lt;span&gt;3&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;b011,&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt;                 s4 = &lt;span&gt;3&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;b100;//状态&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;此为三段式状态机，还有一段式状态机，二段式状态机            &lt;/span&gt;
&lt;span&gt;14&lt;/span&gt; &lt;span&gt;reg&lt;/span&gt; [&lt;span&gt;2&lt;/span&gt;:&lt;span&gt;0&lt;/span&gt;&lt;span&gt;] present_state, next_state;
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;用摩尔状态机设计1011序列检测器
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;状态寄存器&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt; &lt;span&gt;always&lt;/span&gt; @(&lt;span&gt;posedge&lt;/span&gt; mclk &lt;span&gt;or&lt;/span&gt; &lt;span&gt;negedge&lt;/span&gt;&lt;span&gt; rst_n)
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;begin&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt;(!&lt;span&gt;rst_n)
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;         present_state &amp;lt;=&lt;span&gt; s0;
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;     &lt;span&gt;else&lt;/span&gt; 
&lt;span&gt;22&lt;/span&gt;         present_state &amp;lt;=&lt;span&gt; next_state;
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;end&lt;/span&gt;
&lt;span&gt;24&lt;/span&gt; 
&lt;span&gt;25&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;状态转换模块&lt;/span&gt;
&lt;span&gt;26&lt;/span&gt; &lt;span&gt;always&lt;/span&gt; @(*&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; &lt;span&gt;begin&lt;/span&gt;
&lt;span&gt;28&lt;/span&gt;     &lt;span&gt;case&lt;/span&gt;&lt;span&gt;(present_state)
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;     s0: &lt;span&gt;if&lt;/span&gt;(din==&lt;span&gt;1&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;             next_state =&lt;span&gt; s1;
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;          &lt;span&gt;else&lt;/span&gt; 
&lt;span&gt;32&lt;/span&gt;             next_state =&lt;span&gt; s0;
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt;     s1: &lt;span&gt;if&lt;/span&gt;(din==&lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt;             next_state =&lt;span&gt; s2;
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt;         &lt;span&gt;else&lt;/span&gt; 
&lt;span&gt;36&lt;/span&gt;             next_state =&lt;span&gt; s1;
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt;     s2: &lt;span&gt;if&lt;/span&gt;(din==&lt;span&gt;1&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt;             next_state =&lt;span&gt; s3;
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt;         &lt;span&gt;else&lt;/span&gt; 
&lt;span&gt;40&lt;/span&gt;             next_state =&lt;span&gt; s0;
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt;     s3: &lt;span&gt;if&lt;/span&gt;(din==&lt;span&gt;1&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt;             next_state =&lt;span&gt; s4;
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt;         &lt;span&gt;else&lt;/span&gt; 
&lt;span&gt;44&lt;/span&gt;             next_state =&lt;span&gt; s2;
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt;     s4: &lt;span&gt;if&lt;/span&gt;(din==&lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt;             next_state =&lt;span&gt; s2;
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt;         &lt;span&gt;else&lt;/span&gt; 
&lt;span&gt;48&lt;/span&gt;             next_state =&lt;span&gt; s1;
&lt;/span&gt;&lt;span&gt;49&lt;/span&gt;     &lt;span&gt;default&lt;/span&gt;: next_state =&lt;span&gt; s0;
&lt;/span&gt;&lt;span&gt;50&lt;/span&gt;     &lt;span&gt;endcase&lt;/span&gt;
&lt;span&gt;51&lt;/span&gt; &lt;span&gt;end&lt;/span&gt;
&lt;span&gt;52&lt;/span&gt; 
&lt;span&gt;53&lt;/span&gt; &lt;span&gt;always&lt;/span&gt; @(&lt;span&gt;posedge&lt;/span&gt; clk &lt;span&gt;or&lt;/span&gt; &lt;span&gt;negedge&lt;/span&gt; rst_n)&lt;span&gt;begin&lt;/span&gt;
&lt;span&gt;54&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt;(!&lt;span&gt;rst_n)
&lt;/span&gt;&lt;span&gt;55&lt;/span&gt;         dout &amp;lt;= &lt;span&gt;1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;b0;&lt;/span&gt;
&lt;span&gt;56&lt;/span&gt;     &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;(present_state ==&lt;span&gt;s4)
&lt;/span&gt;&lt;span&gt;57&lt;/span&gt;         dout &amp;lt;= &lt;span&gt;1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;b1;&lt;/span&gt;
&lt;span&gt;58&lt;/span&gt;     &lt;span&gt;else&lt;/span&gt;
&lt;span&gt;59&lt;/span&gt;         dout &amp;lt;= &lt;span&gt;1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;b0;&lt;/span&gt;
&lt;span&gt;60&lt;/span&gt; &lt;span&gt;end&lt;/span&gt;
&lt;span&gt;61&lt;/span&gt;      
&lt;span&gt;62&lt;/span&gt;
&lt;span&gt;63&lt;/span&gt; &lt;span&gt;endmodule&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;         在状态机的设计中，一段式状态机用时序逻辑，二段式状态机第一段用时序逻辑，第二段用组合逻辑，三段式状态机第一段用时序逻辑，第二段用组合逻辑，第三段用时序逻辑。我在设计的时候，尝试把第二段写成时序逻辑，最终结果并没有影响，时序逻辑随时钟变化，组合逻辑是直接赋值，所以在第三段状态机进行输出时，输出结果肯定是稳定的，但是这样会限制fmax。如果用时序逻辑的主频率过高的话，可能不如第二段组合逻辑赋值来的稳定，这里就还需要考虑到时序分析了，暂且不谈。这里还需要提的是使用三段式状态机相较于一段二段式，会延迟一个时钟周期输出，就是因为第三段使用了时序逻辑的缘故。&lt;/p&gt;
&lt;p&gt;         既然谈状态机的时候，说到了组合逻辑会产生毛刺的现象，那么这里就顺便整理一下，为什么组合逻辑会产生毛刺，组合逻辑的冒险与竞争分析。&lt;/p&gt;
&lt;p&gt;         竞争（Competition）在组合逻辑电路中，某个输入变量通过两条或两条以上的途径传到输出端，由于每条途径延迟时间不同，到达输出门的时间就有先有后，这种现象称为竞争。把不会产生错误输出的竞争的现象称为非临界竞争。把产生暂时性的或永久性错误输出的竞争现象称为临界竞争。&lt;/p&gt;
&lt;p&gt;冒险（risk）信号在器件内部通过连线和逻辑单元时，都有一定的延时。延时的大小与连线的长短和逻辑单元的数目有关，同时还受器件的制造工艺、工作电压、温度等条件的影响。信号的高低电平转换也需要一定的过渡时间。由于存在这两方面因素，多路信号的电平值发生变化时，在信号变化的瞬间，组合逻辑的输出有先后顺序，并不是同时变化，往往会出现一些不正确的尖峰信号，这些尖峰信号称为&quot;毛刺&quot;。如果一个组合逻辑电路中有&quot;毛刺&quot;出现，就说明该电路存在冒险&lt;/p&gt;
&lt;p&gt;竞争冒险(Competition risk)产生原因：由于延迟时间的存在，当一个输入信号经过多条路径传送后又重新会合到某个门上，由于不同路径上门的级数不同，或者门电路延迟时间的差异，导致到达会合点的时间有先有后，从而产生瞬间的错误输出。&lt;/p&gt;
&lt;p&gt;       首先看下面这个电路，使用了两个逻辑门，一个非门和一个与门，本来在理想情况下F的输出应该是一直稳定的0输出，但是实际上每个门电路从输入到输出是一定会有时间延迟的，这个时间通常叫做电路的开关延迟。而且制作工艺、门的种类甚至制造时微小的工艺偏差，都会引起这个开关延迟时间的变化。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1057546/201711/1057546-20171126100018109-650156929.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1057546/201711/1057546-20171126093938687-1425091886.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;         实际上如果算上非门的延迟的话，那么F最后就会产生毛刺。信号由于经由不同路径传输达到某一汇合点的时间有先有后的现象，就称之为竞争，由于竞争现象所引起的电路输出发生瞬间错误的现象，就称之为冒险，所以在设计中我们要注意避免这个现象，最简单的避免方法是尽量使用时序逻辑同步输出。&lt;/p&gt;
&lt;p&gt;      这篇状态机和组合逻辑的冒险竞争就聊到这里，下次我们接着说时序逻辑的冒险竞争。&lt;/p&gt;

&lt;p&gt;参考资料：百度百科，冒险竞争、《FPGA设计技巧与案例开发详解》、《FPGA数字逻辑设计教程——Verilog》、《深入浅出玩转FPGA》等网络文章。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2015.cnblogs.com/blog/1057546/201706/1057546-20170611114905559-478053885.jpg&quot; alt=&quot;&quot; width=&quot;289&quot; height=&quot;289&quot;/&gt;&lt;/p&gt;

&lt;p&gt;转载请注明出处：NingHeChuan（宁河川）&lt;/p&gt;
&lt;p&gt;个人微信订阅号：开源FPGANingHeChuan&lt;/p&gt;
&lt;p&gt;如果你想及时收到个人撰写的博文推送，可以扫描左边二维码（或者长按识别二维码）关注个人微信订阅号&lt;/p&gt;
&lt;p&gt;知乎ID：&lt;a href=&quot;https://www.zhihu.com/people/zhu-he-chuan/activities&quot; target=&quot;_blank&quot;&gt;NingHeChuan&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;微博ID：&lt;a href=&quot;http://weibo.com/6059461073/profile?rightmod=1&amp;amp;wvr=6&amp;amp;mod=personinfo&amp;amp;is_all=1&quot; target=&quot;_blank&quot;&gt;NingHeChuan&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;原文地址：&lt;a id=&quot;Editor_Edit_hlEntryLink&quot; title=&quot;view: 基于FPGA的有限状态机浅析&quot; href=&quot;http://www.cnblogs.com/ninghechuan/p/7898297.html&quot; target=&quot;_blank&quot;&gt;http://www.cnblogs.com/ninghechuan/p/7898297.html&lt;/a&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt; &lt;/p&gt;
</description>
<pubDate>Mon, 27 Nov 2017 06:46:00 +0000</pubDate>
<dc:creator>NingHeChuan</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/ninghechuan/p/7898297.html</dc:identifier>
</item>
<item>
<title>维多利亚的秘密 golang入坑系统 - vikings`s blog</title>
<link>http://www.cnblogs.com/vikings-blog/p/7903970.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/vikings-blog/p/7903970.html</guid>
<description>&lt;p&gt;原文在gitbook，字字原创，版权没有，转载随意。&lt;/p&gt;
&lt;p&gt;在写本文的前一天，2017维密在上海开始了。 为了纪念屌丝界的盛世，特为本节起名维多利亚的秘密。现在的社会，要想出名只有抓眼球。所以写份技术文章，还要蹭一下维密的光。 蹭对了，不出彩。蹭不对了，还要挨骂。昨天就有一位匿名的同学，说我写的罗里吧嗦，重点内容没多少，扯淡话语占半篇。这能怪我吗？ 可能怪我吧。但去百度，google随手一搜，哪种语言没有&amp;lt;21天学会XXX&amp;gt;，&amp;lt;从XXX到XXX&amp;gt;，&lt;/p&gt;
&lt;p&gt;好，言归正传，来一首定场小诗，算是告别维密，拥抱golang。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;隔河看见一锭金，山又高来水又深。
有心过河把金子捡，又恐怕王八咬了脚后跟。
舍了罢来舍了罢，外财不富命穷人。
猛虎虽瘦雄心在，君子身贫志不贫。
穷在街前无人问，富在深山有远亲。&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;下面开始聊golang的函数function&quot;&gt;下面开始聊Golang的函数(Function)&lt;/h4&gt;
&lt;p&gt;在入坑第一式中，我们提到过函数。当时以main函数为例进行的讲解。 那会是为了demo需要，拿来main就用。在此节中，开始详细讲解函数。&lt;/p&gt;
&lt;p&gt;函数，字方法(method)，又名子例程(sub-routine)，别名过程(procedure)。在不同的语言种，有不同的叫法。 但本质都是一样的，都是一组执行不同任务的语句。别的语言暂且不提，下面所说的都是Golang的家规。&lt;/p&gt;
&lt;p&gt;在Golang程序中，每个Go程序都至少有一个main函数。如果你写的是库(package)，那就不需要提供main函数。 在编写代码时可以根据逻辑功能划分出不同的函数。划分的尺度完全掌握在你手中。但是从实际生产环境和代码管理上来说，每个函数尽可能的只完成一件工作。&lt;/p&gt;
&lt;p&gt;在组织函数时，每个函数必须有函数名、返回类型和参数。在函数划分方面，Golang标准库可以作为一个范例。标准库提供了许多内置函数。例如，len()函数接受各种类型的参数，并返回类型的长度。如果将字符串传递给它，函数将以字节的形式返回字符串的长度。如果将数组传递给它，函数将返回数组的长度。我们在编写函数名或者实现函数时，可以参考标准库中的函数定义。&lt;/p&gt;
&lt;p&gt;Golang提供的函数声明语法如下:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;func function_name( [parameter list] ) [return_types]
{
   body of the function
}&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;func 表示这是一个函数。 在此之后的语义块都是函数。&lt;/li&gt;
&lt;li&gt;function_name 函数名。函数名和参数列表共同构成函数签名，而函数签名是用来查找函数的唯一ID.&lt;/li&gt;
&lt;li&gt;parameter 参数列表。参数就像一个占位符。当调用一个函数时，您传递一个值到参数。这个值被称为实际参数或参数(有的场合叫做入参)。参数列表是指函数的参数的类型、顺序和数量。参数是可选的。也就是说，参数可以为空。&lt;/li&gt;
&lt;li&gt;return_type 返回值。函数可以返回一个值列表。return_types是函数返回值的数据类型列表。返回值是可选的，也就是说函数允许不返还任何数据。&lt;/li&gt;
&lt;li&gt;fuction body. 函数体，也就是执行语句。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;比对着下面的例子，我们来看函数的定义:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;func max(num1, num2 int) int {
   result int
   if (num1 &amp;gt; num2) {
      result = num1
   } else {
      result = num2
   }
   return result 
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这个函数，名称是max。 参数有两个，num1, num2都是int类型。 当然你也可以写成 num1 int, num2 int， 同样正确。 Golang里面规定如果参数类型相同，可以简化为 num1,num2 int。 所以使用哪种，看你心情。 高兴就好。&lt;/p&gt;
&lt;p&gt;返回值是一个int类型的值。&lt;/p&gt;
&lt;p&gt;函数只有被调用了，才能体现价值。 好比程序员，只有写代码才能体现价值，如果让程序员去做客服，呵呵，这是让你自行离职的前奏。&lt;/p&gt;
&lt;p&gt;当程序调用一个函数时，程序控制权就会被转移到被调用的函数。只有这个程序结束，或者返回了数值之后，控制权才会回到原程序中。&lt;/p&gt;
&lt;p&gt;要调用max函数，只需要通过函数名，然后传递参数就可以。例如:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;package main

import &quot;fmt&quot;

func main() {
   var a int = 100
   var b int = 200
   var ret int

   ret = max(a, b)

   fmt.Printf( &quot;Max value is : %d\n&quot;, ret )
}

func max(num1, num2 int) int {
   var result int

   if (num1 &amp;gt; num2) {
      result = num1
   } else {
      result = num2
   }
   return result 
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;通过ret保存max返回的数据值。Golang函数允许多值返回(多值返回并非是Golang的独创，也并非所有语言都支持)。如果函数返回多个值时，使用多个变量来保存，例如：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;package main

import &quot;fmt&quot;

func swap(x, y string) (string, string) {
   return y, x
}
func main() {
   a, b := swap(&quot;Mahesh&quot;, &quot;Kumar&quot;)
   fmt.Println(a, b)
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;swap函数返回了两个值，调用时使用a和b分别保存。 如果返回三个值呢？ 那就使用a,b和c来保存。 如果某一个值，不需要保存。例如返回三个值，但第二返回值，不需要处理。 通过&quot;_&quot;来忽略保存。例如:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;package main

import &quot;fmt&quot;

func swap(x, y string) (string, string, string) {
   return y, x,&quot;ok&quot;
}
func main() {
   a, _, c := swap(&quot;Mahesh&quot;, &quot;Kumar&quot;)
   fmt.Println(a, c)
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&quot;_&quot;表示此值不需要保存。 在golang代码中会经常看到这样忽略的情况。&lt;/p&gt;
&lt;h4 id=&quot;函数的变量&quot;&gt;函数的变量&lt;/h4&gt;
&lt;p&gt;函数的变量和其它的变量一样，存在生命周期。 一般来说，在进入函数的时候，会创建变量。在退出函数的时候，会销毁变量。下面是传递参数的两种方法:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;值传递&lt;/li&gt;
&lt;li&gt;引用传递&lt;/li&gt;
&lt;/ul&gt;&lt;h5 id=&quot;值传递&quot;&gt;值传递&lt;/h5&gt;
&lt;p&gt;此时仅仅是将参数的实际值复制到函数参数中。在这种情况下，对函数内部的参数进行的更改不会对参数产生影响。通俗点，就是两个同学A和B。 A告诉了B，他的考试答案，然后B自由发挥随便改。 因为A的答案在自己手中，所以无论B怎么改对A都没有影响。这就是传说中的打小抄。&lt;/p&gt;
&lt;p&gt;以上面的函数为例:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;package main

import &quot;fmt&quot;

func main() {

   var a int = 100
   var b int = 200

   fmt.Printf(&quot;Before swap, value of a : %d\n&quot;, a )
   fmt.Printf(&quot;Before swap, value of b : %d\n&quot;, b )

   swap(a, b)

   fmt.Printf(&quot;After swap, value of a : %d\n&quot;, a )
   fmt.Printf(&quot;After swap, value of b : %d\n&quot;, b )
}
func swap(x, y int) int {
   var temp int

   temp = x 
   x = y    
   y = temp 

   return temp;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;看似是把a和b给了swap函数，但swap函数其实只是接受了a和b的值，在swap内部使用的变量和a，b没有半毛钱关系。这种情况下，swap内部随便改，外部的a和b都不会变。&lt;/p&gt;
&lt;p&gt;这种调用就叫做值传递。&lt;/p&gt;
&lt;h5 id=&quot;引用传递&quot;&gt;引用传递&lt;/h5&gt;
&lt;p&gt;这个时候是将参数的地址复制到函数参数中。在函数内，地址用于访问实际参数。这意味着函数内部参数的变化会影响到外部函数。还拿作弊的时候为例，值传递是打小抄。 而引用传递就是传递试卷了，A直接把他的试卷给了B，B在试卷上面随意修改。那当然会影响到A。所以这种作弊方法，有很大风险性，谁知道B的智商够不够呀。 万一改错了怎么办。&lt;/p&gt;
&lt;p&gt;我们将上面的例子稍加改造:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;package main

import &quot;fmt&quot;

func main() {

   var a int = 100
   var b int = 200

   fmt.Printf(&quot;Before swap, value of a : %d\n&quot;, a )
   fmt.Printf(&quot;Before swap, value of b : %d\n&quot;, b )

   swap(&amp;amp;a, &amp;amp;b)

   fmt.Printf(&quot;After swap, value of a : %d\n&quot;, a )
   fmt.Printf(&quot;After swap, value of b : %d\n&quot;, b )
}
func swap(x *int, y *int) {
   var temp int
   temp = *x    
   *x = *y    
   *y = temp    
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;在swap函数中，是*int(不熟悉的同学，可以返回前几节，去看变量那一节内容)。 表示的是地址。而&amp;amp;a表示的是取a的内存地址。而后swap内部所有的操作都是在a和b的内存中进行的，所以无论swap内部做了什么，都会反映到a和b上面。&lt;/p&gt;
&lt;p&gt;看完是不是感觉引用传递好厉害，是不是担心驾驭不了？说实话，应该是你看到了指针，地址这些C的东西才会感觉到内心害怕吧。虽说有两种调用方式，但Golang默认情况都是第一种，值传递。 只有在编码时使用了指针，才会是引用传递。 所以如果你感觉Hold不住，那就老老实实的去值传递。 如果你感觉小case，那就大胆的去引用传递。究竟哪个好，公婆无定论，没有最好的，只有最合适的。&lt;/p&gt;
&lt;p&gt;聊完参数的传递，我们来聊函数的最后一点内容。&lt;/p&gt;
&lt;h5 id=&quot;如何创建函数&quot;&gt;如何创建函数&lt;/h5&gt;
&lt;p&gt;上面的函数创建方式，是最普遍也是最通用的。 但作为一本教程而言，不能只说普通的，也要说到&quot;回&quot;的五种写法。至于能不能用得上，我就不知道了。 没准可以哄住你的面试考官。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;作为变量时创建。先看下面的例子:&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code&gt;package main

import (
   &quot;fmt&quot; 
   &quot;math&quot; 
)

func main(){
   getSquareRoot := func(x float64) float64 {
      return math.Sqrt(x)
   }

   fmt.Println(getSquareRoot(9))
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;getSquareRoot在上面例子中，就和变量的创建方式一样，随用随创建。建完即用，用完即扔，扔完即删，删完即清。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;匿名函数。同样看下面的例子:&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code&gt;package main

import &quot;fmt&quot;

func getSequence() func() int {
   i:=0
   return func() int {
      i+=1
      return i  
   }
}

func main(){
   nextNumber := getSequence()  

   fmt.Println(nextNumber())
   fmt.Println(nextNumber())
   fmt.Println(nextNumber())

   nextNumber1 := getSequence()  
   fmt.Println(nextNumber1())
   fmt.Println(nextNumber1())
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;不要以为是函数声明错了。 没错，因为上面getSequence()这个函数就是返回一个函数。 也就是函数返函数。 比对一下函数语法，可以看到 func() int 是返回的数据类型(函数也是一种类型). 然后函数体中就return了一个函数(fun() int)。 只不过这个函数没有名字而已。&lt;/p&gt;
&lt;p&gt;无名没关系，在调用的时候给了一个名字，叫做nextNumber。 所以这个函数就等同于 func nextNumbe() int{}。这下就没问题了吧。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;类型中的方法，我们说过函数，有名方法。 在什么情况下叫做方法呢？ 只有在这个函数独属于某一种类型的时候才叫做方法。例如下面的情况：&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code&gt;package main

import (
   &quot;fmt&quot; 
   &quot;math&quot; 
)

type Circle struct {
   x,y,radius float64
}

func(circle Circle) area() float64 {
   return math.Pi * circle.radius * circle.radius
}

func main(){
   circle := Circle{x:0, y:0, radius:5}
   fmt.Printf(&quot;Circle area: %f&quot;, circle.area())
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;通过type xxx struct定义了一个新的数据类型(现在还没讲到，如果你懂Java，可以类比为java里面的类)。在area之前添加(circle Circle)就告诉了编译器，这个函数是独属于Circle类的。 换句话说，area()是Circle的成员方法。只不过Java是定义在class中，而golang是定义在外面而已。 本质都是那么一回事。&lt;/p&gt;
&lt;p&gt;既然属于Circle，所以调用的时候，必须声明一个Circle实例，然后才能调用。所以也就有了circle := Circle{x:0, y:0, radius:5}这句。&lt;/p&gt;
&lt;p&gt;Golang中的函数内容，基本就这么多了。 因为是想到多少就写多少，如果有哪些没写上的，还希望提醒一下我。 最后，来一段软文推广:&lt;/p&gt;
&lt;p&gt;谢谢Apple公司，有偿提供的mac笔记本，让我将手写书变成了手敲书。 谢谢网易公司无偿提供的有道词典，让我可以翻译英文单词。但也只能翻译单词了，因为翻译大段英文，经常词不达意。谢谢Gitbook提供的平台可以存储我写的文章，没啥可以吐槽的，非要吐槽的，那就是希望PC端呈现的样式可以和客户端呈现的一样。感谢河北工业大学，让我走上了开发的道路，虽然我当时想转专业，但最后还是屈服走了这条不归路。&lt;/p&gt;
&lt;p&gt;如果你也希望出现在这里，联系我。如果符合我的风格，一定给软文留个推广位。 如果不符合，那就想法子给你留个推广位。 不用担心费用，免费Free。 只为一乐，干嘛较真呢。 嘛钱不钱的，乐呵乐呵得了。&lt;/p&gt;
</description>
<pubDate>Mon, 27 Nov 2017 06:33:00 +0000</pubDate>
<dc:creator>vikings`s blog</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/vikings-blog/p/7903970.html</dc:identifier>
</item>
</channel>
</rss>