<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>如何创建 Swarm 集群？- 每天5分钟玩转 Docker 容器技术（95） - CloudMan</title>
<link>http://www.cnblogs.com/CloudMan6/p/7862254.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/CloudMan6/p/7862254.html</guid>
<description>&lt;p&gt;本节我们将创建三节点的 swarm 集群。&lt;/p&gt;
&lt;p&gt;&lt;img title=&quot;https://image.ipaiban.com/upload-ueditor-image-20171119-1511097800862085831.png&quot; src=&quot;https://image.ipaiban.com/upload-ueditor-image-20171119-1511097800862085831.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;swarm-manager 是 manager node，swarm-worker1 和 swarm-worker2 是 worker node。&lt;/span&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;所有节点的 Docker 版本均不低于 v1.12。我们的实验环境 node 的操作系统为 Ubuntu 16.04，当然其他 Linux 也是可以的。&lt;/p&gt;
&lt;p&gt;在 swarm-manager 上执行如下命令创建 swarm。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;docker swarm init --advertise-addr 192.168.56.101&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img title=&quot;https://image.ipaiban.com/upload-ueditor-image-20171119-1511097802131075277.png&quot; src=&quot;https://image.ipaiban.com/upload-ueditor-image-20171119-1511097802131075277.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&lt;span&gt;--advertise-addr&lt;/span&gt;&lt;/code&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;指定与其他 node 通信的地址。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&lt;span&gt;docker swarm init&lt;/span&gt;&lt;/code&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;输出告诉我们：&lt;/p&gt;
&lt;p&gt;① swarm 创建成功，swarm-manager 成为 manager node。&lt;/p&gt;
&lt;p&gt;② 添加 worker node 需要执行的命令。&lt;/p&gt;
&lt;p&gt;③ 添加 manager node 需要执行的命令。&lt;/p&gt;
&lt;p&gt;执行&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;code&gt;&lt;span&gt;docker node ls&lt;/span&gt;&lt;/code&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;查看当前 swarm 的 node，目前只有一个 manager。&lt;/p&gt;
&lt;p&gt;&lt;img title=&quot;https://image.ipaiban.com/upload-ueditor-image-20171119-1511097800778039730.png&quot; src=&quot;https://image.ipaiban.com/upload-ueditor-image-20171119-1511097800778039730.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;复制前面的&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;code&gt;&lt;span&gt;docker swarm join&lt;/span&gt;&lt;/code&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;命令，在 swarm-worker1 和 swarm-worker2 上执行，将它们添加到 swarm 中。命令输出如下：&lt;/p&gt;
&lt;p&gt;&lt;img title=&quot;https://image.ipaiban.com/upload-ueditor-image-20171119-1511097802323088965.png&quot; src=&quot;https://image.ipaiban.com/upload-ueditor-image-20171119-1511097802323088965.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&lt;span&gt;docker node ls&lt;/span&gt;&lt;/code&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;可以看到两个 worker node 已经添加进来了。&lt;/p&gt;
&lt;p&gt;&lt;img title=&quot;https://image.ipaiban.com/upload-ueditor-image-20171119-1511097801567038595.png&quot; src=&quot;https://image.ipaiban.com/upload-ueditor-image-20171119-1511097801567038595.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;如果当时没有记录下&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;code&gt;&lt;span&gt;docker swarm init&lt;/span&gt;&lt;/code&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;提示的添加 worker 的完整命令，可以通过&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;code&gt;&lt;span&gt;docker swarm join-token worker&lt;/span&gt;&lt;/code&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;查看。&lt;/p&gt;
&lt;p&gt;&lt;img title=&quot;https://image.ipaiban.com/upload-ueditor-image-20171119-1511097802091025278.png&quot; src=&quot;https://image.ipaiban.com/upload-ueditor-image-20171119-1511097802091025278.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;注意：此命令只能在 manager node 上执行。&lt;/p&gt;
&lt;p&gt;至此，三节点的 swarm 集群就已经搭建好了，操作还是相当简单的。&lt;/p&gt;
&lt;p&gt;下一节我们将在 swarm 中部署第一个 service。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;书籍：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;1.《每天5分钟玩转Docker容器技术》&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;a href=&quot;https://item.jd.com/16936307278.html&quot; target=&quot;_blank&quot;&gt;https://item.jd.com/16936307278.html&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;2.《每天5分钟玩转OpenStack》&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;a href=&quot;https://item.jd.com/12086376.html&quot; target=&quot;_blank&quot;&gt;https://item.jd.com/12086376.html&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img title=&quot;https://image.ipaiban.com/upload-ueditor-image-20171010-1507627732322012171.png&quot; src=&quot;https://image.ipaiban.com/upload-ueditor-image-20171010-1507627732322012171.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
</description>
<pubDate>Sun, 19 Nov 2017 23:56:00 +0000</pubDate>
<dc:creator>CloudMan</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/CloudMan6/p/7862254.html</dc:identifier>
</item>
<item>
<title>基于HTML5 Canvas 实现商场监控 - xhload3d</title>
<link>http://www.cnblogs.com/xhload3d/p/7859473.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/xhload3d/p/7859473.html</guid>
<description>&lt;p&gt;伴随国内经济的高速发展，人们对安全的要求越来越高。为了防止下列情况的发生，您需要考虑安装安防系统： 提供证据与线索：很多工厂银行发生偷盗或者事故相关机关可以根据录像信息侦破案件，这个是非常重要的一个线索。还有一些纠纷或事故，也可以通过录像很容易找出相关人员的责任。 人防成本高：现在很多地方想到安全就想到要雇佣保安，每个保安每个月 800，每天 3 班倒，一班人员一年就需要将近 4 万元，相比于电子安防设备成本并不便宜，而且使用电子安防设备几年内就不太需要更换。所以人防成本相对也很高。人防辅助：多数情况下，完全靠人来保证安全是一件很困难的事情，很多事情需要电子保安器材（如监视器、报警器）辅助才更完美。特殊场合必须使用：在一些恶劣条件下（高热、寒冷、封闭等），人很难用肉眼观察清楚，或者环境根本不适合人的停留，必须使用电子安防设备。隐蔽性：使用电子安防设备，一般人不会感觉时时被监控，具有隐蔽性。24 小时安全保证：要达到 24 小时不间断的安全需要，电子设备是必须考虑的。远程监控：随着计算机技术与网络技术的发展，远程监控观看异地图象已经成为可能，现在已经有很多公司的负责人已经可以 INTERNET 及时观看世界各地的任何分公司情况，有利于及时了解情况。图象保存：数字录像技术的发展，使得影象可以通过计算机数字存储设备得以保存，可以保存时间更长，图象更清晰。生产管理：管理人员可以及时、直观的了解生产第一线的情况，便于指挥与管理。&lt;/p&gt;
&lt;p&gt;鉴于监控系统在国内的需求量较大，我们今天来给大家介绍一下如何创建一个监控系统的前端部分。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.hightopo.com/demo/metro/demo2.html&quot; target=&quot;_blank&quot;&gt;http://www.hightopo.com/demo/metro/demo2.html&lt;/a&gt; 进入页面右键“审查元素”可查看例子源代码。&lt;/p&gt;
&lt;p&gt;本例的动态效果如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/591709/201711/591709-20171119110705265-1516373653.gif&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; 我们先来搭建基础场景，在 HT 中，非常常用的一种方法来将外部场景导入到内部就是靠解析 JSON 文件，用 JSON 文件来搭建场景的好处之一就是可以循环利用，我们今天的场景就是利用 JSON 画出来的。接下来 HT 将利用  ht.Default.xhrLoad 函数载入 JSON 场景，并用 HT 封装的 DataModel.deserialize(json) 来&lt;a href=&quot;http://hightopo.com/guide/guide/core/serialization/ht-serialization-guide.html#ref_serialization&quot; target=&quot;_blank&quot;&gt;反序列化&lt;/a&gt;，并将反序列化的对象加入 DataModel：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
ht.Default.xhrLoad('demo2.json', &lt;span&gt;function&lt;/span&gt;&lt;span&gt;(text) {
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; json =&lt;span&gt; ht.Default.parse(text);
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(json.title) document.title =&lt;span&gt; json.title;//将 JSON 文件中的 titile 赋给全局变量 titile 
    dataModel.deserialize(json);//反序列化
    graphView.fitContent(&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;);//缩放平移拓扑以展示所有图元，即让所有的元素都显示出来
});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在 HT 中，Data 类型对象构造时内部会自动被赋予一个 id 属性，可通过 data.getId() 和 data.setId(id) 获取和设置，Data 对象添加到 DataModel 之后不允许修改 id 值，可通过 dataModel.getDataById(id) 快速查找 Data 对象。一般建议 id 属性由 HT 自动分配，用户业务意义的唯一标示可存在 tag 属性上，通过 Data#setTag(tag) 函数允许任意动态改变 tag 值，通过DataModel#getDataByTag(tag) 可查找到对应的 Data 对象，并支持通过 DataModel#removeDataByTag(tag) 删除 Data 对象。我们这边通过在 JSON 中设置 Data 对象的 tag 属性，在代码中通过 dataModel.getDataByTag(tag) 函数来获取该 Data 对象：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; fan1 = dataModel.getDataByTag('fan1'&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; fan2 = dataModel.getDataByTag('fan2'&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; camera1 = dataModel.getDataByTag('camera1'&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; camera2 = dataModel.getDataByTag('camera2'&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; camera3 = dataModel.getDataByTag('camera3'&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; redAlarm = dataModel.getDataByTag('redAlarm'&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; yellowAlarm = dataModel.getDataByTag('yellowAlarm');
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;我在下图中做了各标签对应的元素：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/591709/201711/591709-20171119120928327-1733373857.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;接着我们对需要旋转、闪烁的对象进行设置，HT 中对“旋转”封装了 setRotation(rotation) 函数，通过获得对象当前的旋转角度，在这个角度的基础上再增加某个弧度，通过 setInterval 定时调用，这样就能在一定的时间间隔内旋转相同的弧度：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
setInterval(&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; time = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Date().getTime();
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; deltaTime = time -&lt;span&gt; lastTime;
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; deltaRotation = deltaTime * Math.PI / 180 * 0.1&lt;span&gt;;
    lastTime &lt;/span&gt;=&lt;span&gt; time;

    fan1.setRotation(fan1.getRotation() &lt;/span&gt;+ deltaRotation*3&lt;span&gt;);
    fan2.setRotation(fan2.getRotation() &lt;/span&gt;+ deltaRotation*3&lt;span&gt;);
    camera1.setRotation(camera1.getRotation() &lt;/span&gt;+ deltaRotation/3);
    camera2.setRotation(camera2.getRotation() + deltaRotation/3);
    camera3.setRotation(camera3.getRotation() + deltaRotation/3);

    &lt;span&gt;if&lt;/span&gt; (time - stairTime &amp;gt; 500&lt;span&gt;) {
        stairIndex&lt;/span&gt;--&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (stairIndex &amp;lt; 0&lt;span&gt;) {
            stairIndex &lt;/span&gt;= 8&lt;span&gt;;
        }
        stairTime &lt;/span&gt;=&lt;span&gt; time;
    }

    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; i = 0; i &amp;lt; 8; i++&lt;span&gt;) {//因为有一些相似的元素我们设置的 tag 名类似，只是在后面换成了1、2、3，所以我们通过 for 循环来获取
        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; color = stairIndex === i ? '#F6A623' : '#CFCFCF'&lt;span&gt;;
        dataModel.getDataByTag(&lt;/span&gt;'stair_1_' + i).s('shape.border.color'&lt;span&gt;, color);
        dataModel.getDataByTag(&lt;/span&gt;'stair_2_' + i).s('shape.border.color'&lt;span&gt;, color);
    }

    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (&lt;span&gt;new&lt;/span&gt; Date().getSeconds() % 2 === 1&lt;span&gt;) {
        yellowAlarm.s(&lt;/span&gt;'shape.background', &lt;span&gt;null&lt;/span&gt;&lt;span&gt;);
        redAlarm.s(&lt;/span&gt;'shape.background', &lt;span&gt;null&lt;/span&gt;&lt;span&gt;);
    }
    &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
        yellowAlarm.s(&lt;/span&gt;'shape.background', 'yellow'&lt;span&gt;);
        redAlarm.s(&lt;/span&gt;'shape.background', 'red'&lt;span&gt;);
    }
}, &lt;/span&gt;5);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;HT 还封装了 setStyle 函数用来设置样式，可简写为 s，具体样式请参考 &lt;a href=&quot;http://hightopo.com/guide/guide/core/theme/ht-theme-guide.html&quot; target=&quot;_blank&quot;&gt;HT for Web 样式手册&lt;/a&gt;：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; i = 0; i &amp;lt; 8; i++) {&lt;span&gt;//&lt;/span&gt;&lt;span&gt;因为有一些相似的元素我们设置的 tag 名类似，只是在后面换成了1、2、3，所以我们通过 for 循环来获取&lt;/span&gt;
    &lt;span&gt;var&lt;/span&gt; color = stairIndex === i ? '#F6A623' : '#CFCFCF'&lt;span&gt;;
    dataModel.getDataByTag(&lt;/span&gt;'stair_1_' + i).s('shape.border.color'&lt;span&gt;, color);
    dataModel.getDataByTag(&lt;/span&gt;'stair_2_' + i).s('shape.border.color'&lt;span&gt;, color);
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;我们还对“警告灯”的闪烁进行了定时控制，如果是偶数秒的时候，就将灯的背景颜色设置为“无色”，否则，如果是 yellowAlarm 则设置为“黄色”，如果是 redAlarm 则设置为“红色”：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;if&lt;/span&gt; (&lt;span&gt;new&lt;/span&gt; Date().getSeconds() % 2 === 1&lt;span&gt;) {
    yellowAlarm.s(&lt;/span&gt;'shape.background', &lt;span&gt;null&lt;/span&gt;&lt;span&gt;);
    redAlarm.s(&lt;/span&gt;'shape.background', &lt;span&gt;null&lt;/span&gt;&lt;span&gt;);
}
&lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
    yellowAlarm.s(&lt;/span&gt;'shape.background', 'yellow'&lt;span&gt;);
    redAlarm.s(&lt;/span&gt;'shape.background', 'red'&lt;span&gt;);
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;整个例子就这么轻松地解决了，简直太轻松了。。。&lt;/p&gt;
&lt;p&gt;有兴趣继续了解的小伙伴可以进入 &lt;a href=&quot;http://hightopo.com/&quot; target=&quot;_blank&quot;&gt;HT for Web 官网&lt;/a&gt;查看各个手册进行学习。&lt;/p&gt;

</description>
<pubDate>Sun, 19 Nov 2017 23:40:00 +0000</pubDate>
<dc:creator>xhload3d</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/xhload3d/p/7859473.html</dc:identifier>
</item>
<item>
<title>多数据库有序GUID - Sweet-Tang</title>
<link>http://www.cnblogs.com/tdfblog/p/SequentialGuid.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/tdfblog/p/SequentialGuid.html</guid>
<description>&lt;h2 id=&quot;背景&quot;&gt;背景&lt;/h2&gt;
&lt;p&gt;常见的一种数据库设计是使用连续的整数为做主键，当新的数据插入到数据库时，由数据库自动生成。但这种设计不一定适合所有场景。&lt;/p&gt;
&lt;p&gt;随着越来越多的使用Nhibernate、EntityFramework等ORM（对象关系映射）框架，应用程序被设计成为工作单元（Unit Of Work）模式，需要在数据持久化之前生成主键，为了保证在多线程并发以及站点集群环境中主键的唯一性，最简单最常见的方式是将主键设计成为GUID类型。&lt;/p&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;&lt;strong&gt;工作单元&lt;/strong&gt;是数据库应用程序经常使用的一种设计模式，简单一点来说，就是对多个数据库操作进行打包，记录对象上的所有变化，并在最后提交时一次性将所有变化通过系统事务写入数据库。目的是为了&lt;strong&gt;减少数据库调用次数&lt;/strong&gt;以及&lt;strong&gt;避免数据库长事务&lt;/strong&gt;。关于工作单元的知识可以在园子里面搜索到很多，在这里就不做详细的介绍了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;GUID（全球唯一标识符）也称为UUID，是一种由算法生成的二进制长度为128位的数字标识符。在理想情况下，任何计算机和计算机集群都不会生成两个相同的GUID。GUID 的总数达到了2^128（3.4×10^38）个，所以随机生成两个相同GUID的可能性非常小，但并不为0。GUID一词有时也专指微软对UUID标准的实现。&lt;/p&gt;
&lt;blockquote readability=&quot;5.6878612716763&quot;&gt;
&lt;p&gt;&lt;a href=&quot;http://www.ietf.org/rfc/rfc4122.txt&quot;&gt;RFC 41222&lt;/a&gt;描述了创建标准GUID，如今大多数GUID生成算法通常是一个很长的随机数，再结合一些像网络MAC地址这种随机的本地组件信息。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;GUID的优点允许开发人员随时创建新值，而无需从数据库服务器检查值的唯一性，这似乎是一个完美的解决方案。&lt;/p&gt;
&lt;p&gt;很多数据库在创建主键时，为了充分发挥数据库的性能，会自动在该列上创建聚集索引。我们先来说一说什么是聚集索引，。集索引确定表中数据的物理顺序。聚集索引类似于电话簿，按姓氏排列数据。由于聚集索引规定数据在表中的物理存储顺序，因此一个表也只能包含一个聚集索引。它能够快速查找到数据，但是如果插入数据库的主键不在列表的末尾，向表中添加新行时就非常缓慢。例如，看下面这个例子，在表中已经存在三行数据(例子来自Jeremy Todd的博客&lt;a href=&quot;https://www.codeproject.com/articles/388157/guids-as-fast-primary-keys-under-multiple-database&quot;&gt;GUIDs as fast primary keys under multiple databases&lt;/a&gt;：&lt;/p&gt;
&lt;table&gt;&lt;thead/&gt;&lt;tbody&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;Holmes, S.&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;Watson, J.&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;Moriarty, J.&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;此时非常简单：数据行按对应ID列的顺序储存。如果我们新添加一行ID为8的数据，不会产生任何问题，新行会追加的末尾。&lt;/p&gt;
&lt;table&gt;&lt;thead/&gt;&lt;tbody&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;Holmes, S.&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;Watson, J.&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;Moriarty, J.&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;&lt;span&gt;8&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt;Lestrade, I.&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;但如果我们想插入一行的ID为5的数据:&lt;/p&gt;
&lt;table&gt;&lt;thead/&gt;&lt;tbody&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;Holmes, S.&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;Watson, J.&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;&lt;span&gt;5&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt;Hudson, Mrs.&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;&lt;span&gt;7&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt;Moriarty, J.&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;&lt;span&gt;8&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt;Lestrade, I.&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;ID为7,8的数据行必须向下移动。虽然在这算什么事儿，但当您的数据量达到数百万行的级别之后，这就是个问题了。如果你还想要每秒处理上百次这种请求，那可真是难上加难了。&lt;/p&gt;
&lt;p&gt;这就是GUID主键引发的问题：它是随机产生的，所以在数据插入时，随时都会涉及到数据的移动，导致插入会很缓慢，还会涉及大量不必要的磁盘活动。总结果有两点：&lt;/p&gt;
&lt;p&gt;GUID最关键的问题就是它是随机的。我们需要设计一种有规则的GUID生成方式，在之后生成的GUID类型总是比之前的要大，保证插入数据库的主键是在列表末尾追加的，这种我们称之为&lt;strong&gt;有序GUID&lt;/strong&gt;。&lt;/p&gt;
&lt;h2 id=&quot;guid排序规则&quot;&gt;GUID排序规则&lt;/h2&gt;
&lt;p&gt;在讲解有序GUID之前，我们必须先了解一下GUID在.Net中以及各个数据库中的排序规则，排序规则不一样，生成有序GUID的规则也会随之变化。&lt;/p&gt;
&lt;p&gt;128位的GUID主要有4部分组成：Data1, Data2, Data3, and Data4，你可以看成下面这样：&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;11111111-2222-3333-4444-444444444444&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Data1 占4个字节, Data2 2个字节, Data3 2个字节加 Data4 8个字节。我们分别的对个字节编上序号：&lt;/p&gt;
&lt;table&gt;&lt;thead/&gt;&lt;tbody&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;Value&lt;/td&gt;
&lt;td&gt;11&lt;/td&gt;
&lt;td&gt;11&lt;/td&gt;
&lt;td&gt;11&lt;/td&gt;
&lt;td&gt;11&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;22&lt;/td&gt;
&lt;td&gt;22&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;33&lt;/td&gt;
&lt;td&gt;33&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;44&lt;/td&gt;
&lt;td&gt;44&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;44&lt;/td&gt;
&lt;td&gt;44&lt;/td&gt;
&lt;td&gt;44&lt;/td&gt;
&lt;td&gt;44&lt;/td&gt;
&lt;td&gt;44&lt;/td&gt;
&lt;td&gt;44&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h3 id=&quot;guid在.net中的排序规则&quot;&gt;GUID在.Net中的排序规则&lt;/h3&gt;
&lt;p&gt;在.Net中，GUID默认的排序过段规则是按左到右的，看下面这个示例。&lt;/p&gt;
&lt;pre class=&quot;c#&quot;&gt;
&lt;code&gt;    var list = new List&amp;lt;Guid&amp;gt; {
        new Guid(&quot;00000000-0000-0000-0000-010000000000&quot;),
        new Guid(&quot;00000000-0000-0000-0000-000100000000&quot;),
        new Guid(&quot;00000000-0000-0000-0000-000001000000&quot;),
        new Guid(&quot;00000000-0000-0000-0000-000000010000&quot;),
        new Guid(&quot;00000000-0000-0000-0000-000000000100&quot;),
        new Guid(&quot;00000000-0000-0000-0000-000000000001&quot;),
        new Guid(&quot;00000000-0000-0000-0100-000000000000&quot;),
        new Guid(&quot;00000000-0000-0000-0010-000000000000&quot;),
        new Guid(&quot;00000000-0000-0001-0000-000000000000&quot;),
        new Guid(&quot;00000000-0000-0100-0000-000000000000&quot;),
        new Guid(&quot;00000000-0001-0000-0000-000000000000&quot;),
        new Guid(&quot;00000000-0100-0000-0000-000000000000&quot;),
        new Guid(&quot;00000001-0000-0000-0000-000000000000&quot;),
        new Guid(&quot;00000100-0000-0000-0000-000000000000&quot;),
        new Guid(&quot;00010000-0000-0000-0000-000000000000&quot;),
        new Guid(&quot;01000000-0000-0000-0000-000000000000&quot;)
    };
    list.Sort();

    foreach (Guid guid in list) {
        Console.WriteLine(guid.ToString());
    }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;输出结果：&lt;/p&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;00000000-0000-0000-0000-00000000000&lt;strong&gt;1&lt;/strong&gt;&lt;br/&gt;00000000-0000-0000-0000-000000000&lt;strong&gt;1&lt;/strong&gt;00&lt;br/&gt;00000000-0000-0000-0000-0000000&lt;strong&gt;1&lt;/strong&gt;0000&lt;br/&gt;00000000-0000-0000-0000-00000&lt;strong&gt;1&lt;/strong&gt;000000&lt;br/&gt;00000000-0000-0000-0000-000&lt;strong&gt;1&lt;/strong&gt;00000000&lt;br/&gt;00000000-0000-0000-0000-0&lt;strong&gt;1&lt;/strong&gt;0000000000&lt;br/&gt;00000000-0000-0000-00&lt;strong&gt;1&lt;/strong&gt;0-000000000000&lt;br/&gt;00000000-0000-0000-0&lt;strong&gt;1&lt;/strong&gt;00-000000000000&lt;br/&gt;00000000-0000-000&lt;strong&gt;1&lt;/strong&gt;-0000-000000000000&lt;br/&gt;00000000-0000-0&lt;strong&gt;1&lt;/strong&gt;00-0000-000000000000&lt;br/&gt;00000000-000&lt;strong&gt;1&lt;/strong&gt;-0000-0000-000000000000&lt;br/&gt;00000000-0&lt;strong&gt;1&lt;/strong&gt;00-0000-0000-000000000000&lt;br/&gt;0000000&lt;strong&gt;1&lt;/strong&gt;-0000-0000-0000-000000000000&lt;br/&gt;00000&lt;strong&gt;1&lt;/strong&gt;00-0000-0000-0000-000000000000&lt;br/&gt;000&lt;strong&gt;1&lt;/strong&gt;0000-0000-0000-0000-000000000000&lt;br/&gt;0&lt;strong&gt;1&lt;/strong&gt;000000-0000-0000-0000-000000000000&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;通过上面的输出结果，我们可以得到排序的权重如下：&lt;/p&gt;
&lt;table&gt;&lt;thead/&gt;&lt;tbody&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;权重&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td/&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td/&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td/&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td/&gt;
&lt;td&gt;11&lt;/td&gt;
&lt;td&gt;12&lt;/td&gt;
&lt;td&gt;13&lt;/td&gt;
&lt;td&gt;14&lt;/td&gt;
&lt;td&gt;15&lt;/td&gt;
&lt;td&gt;16&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;Value&lt;/td&gt;
&lt;td&gt;11&lt;/td&gt;
&lt;td&gt;11&lt;/td&gt;
&lt;td&gt;11&lt;/td&gt;
&lt;td&gt;11&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;22&lt;/td&gt;
&lt;td&gt;22&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;33&lt;/td&gt;
&lt;td&gt;33&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;44&lt;/td&gt;
&lt;td&gt;44&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;44&lt;/td&gt;
&lt;td&gt;44&lt;/td&gt;
&lt;td&gt;44&lt;/td&gt;
&lt;td&gt;44&lt;/td&gt;
&lt;td&gt;44&lt;/td&gt;
&lt;td&gt;44&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;这与数字排序规则一致，从右到左进行依次进行排序（数字越小，权重越高，排序的优先级越高）。&lt;/p&gt;
&lt;h3 id=&quot;guid在各个数据库中的排序规则&quot;&gt;GUID在各个数据库中的排序规则&lt;/h3&gt;
&lt;p&gt;在SQL Server数据库中，我们有一种非常简单的方式来比较两个GUID类型的大小值（其实在SQL Server数据库中称为&lt;code&gt;UniqueIdentifier&lt;/code&gt;类型）：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;27&quot;&gt;
&lt;pre class=&quot;sourceCode sql&quot;&gt;
&lt;code class=&quot;sourceCode sql&quot;&gt;&lt;span class=&quot;kw&quot;&gt;With&lt;/span&gt; UIDs &lt;span class=&quot;kw&quot;&gt;As&lt;/span&gt; (&lt;span class=&quot;co&quot;&gt;--                         0 1 2 3  4 5  6 7  8 9  A B C D E F&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;Select&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;ID&lt;/span&gt; =  &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;fu&quot;&gt;UID&lt;/span&gt; = &lt;span class=&quot;fu&quot;&gt;cast&lt;/span&gt; (&lt;span class=&quot;st&quot;&gt;'00000000-0000-0000-0000-010000000000'&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;as&lt;/span&gt; uniqueidentifier)
    &lt;span class=&quot;kw&quot;&gt;Union&lt;/span&gt;   &lt;span class=&quot;kw&quot;&gt;Select&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;ID&lt;/span&gt; =  &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;fu&quot;&gt;UID&lt;/span&gt; = &lt;span class=&quot;fu&quot;&gt;cast&lt;/span&gt; (&lt;span class=&quot;st&quot;&gt;'00000000-0000-0000-0000-000100000000'&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;as&lt;/span&gt; uniqueidentifier)
    &lt;span class=&quot;kw&quot;&gt;Union&lt;/span&gt;   &lt;span class=&quot;kw&quot;&gt;Select&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;ID&lt;/span&gt; =  &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;fu&quot;&gt;UID&lt;/span&gt; = &lt;span class=&quot;fu&quot;&gt;cast&lt;/span&gt; (&lt;span class=&quot;st&quot;&gt;'00000000-0000-0000-0000-000001000000'&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;as&lt;/span&gt; uniqueidentifier)
    &lt;span class=&quot;kw&quot;&gt;Union&lt;/span&gt;   &lt;span class=&quot;kw&quot;&gt;Select&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;ID&lt;/span&gt; =  &lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;fu&quot;&gt;UID&lt;/span&gt; = &lt;span class=&quot;fu&quot;&gt;cast&lt;/span&gt; (&lt;span class=&quot;st&quot;&gt;'00000000-0000-0000-0000-000000010000'&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;as&lt;/span&gt; uniqueidentifier)
    &lt;span class=&quot;kw&quot;&gt;Union&lt;/span&gt;   &lt;span class=&quot;kw&quot;&gt;Select&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;ID&lt;/span&gt; =  &lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;fu&quot;&gt;UID&lt;/span&gt; = &lt;span class=&quot;fu&quot;&gt;cast&lt;/span&gt; (&lt;span class=&quot;st&quot;&gt;'00000000-0000-0000-0000-000000000100'&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;as&lt;/span&gt; uniqueidentifier)
    &lt;span class=&quot;kw&quot;&gt;Union&lt;/span&gt;   &lt;span class=&quot;kw&quot;&gt;Select&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;ID&lt;/span&gt; =  &lt;span class=&quot;dv&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;fu&quot;&gt;UID&lt;/span&gt; = &lt;span class=&quot;fu&quot;&gt;cast&lt;/span&gt; (&lt;span class=&quot;st&quot;&gt;'00000000-0000-0000-0000-000000000001'&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;as&lt;/span&gt; uniqueidentifier)
    &lt;span class=&quot;kw&quot;&gt;Union&lt;/span&gt;   &lt;span class=&quot;kw&quot;&gt;Select&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;ID&lt;/span&gt; =  &lt;span class=&quot;dv&quot;&gt;7&lt;/span&gt;, &lt;span class=&quot;fu&quot;&gt;UID&lt;/span&gt; = &lt;span class=&quot;fu&quot;&gt;cast&lt;/span&gt; (&lt;span class=&quot;st&quot;&gt;'00000000-0000-0000-0100-000000000000'&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;as&lt;/span&gt; uniqueidentifier)
    &lt;span class=&quot;kw&quot;&gt;Union&lt;/span&gt;   &lt;span class=&quot;kw&quot;&gt;Select&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;ID&lt;/span&gt; =  &lt;span class=&quot;dv&quot;&gt;8&lt;/span&gt;, &lt;span class=&quot;fu&quot;&gt;UID&lt;/span&gt; = &lt;span class=&quot;fu&quot;&gt;cast&lt;/span&gt; (&lt;span class=&quot;st&quot;&gt;'00000000-0000-0000-0010-000000000000'&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;as&lt;/span&gt; uniqueidentifier)
    &lt;span class=&quot;kw&quot;&gt;Union&lt;/span&gt;   &lt;span class=&quot;kw&quot;&gt;Select&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;ID&lt;/span&gt; =  &lt;span class=&quot;dv&quot;&gt;9&lt;/span&gt;, &lt;span class=&quot;fu&quot;&gt;UID&lt;/span&gt; = &lt;span class=&quot;fu&quot;&gt;cast&lt;/span&gt; (&lt;span class=&quot;st&quot;&gt;'00000000-0000-0001-0000-000000000000'&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;as&lt;/span&gt; uniqueidentifier)
    &lt;span class=&quot;kw&quot;&gt;Union&lt;/span&gt;   &lt;span class=&quot;kw&quot;&gt;Select&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;ID&lt;/span&gt; = &lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;fu&quot;&gt;UID&lt;/span&gt; = &lt;span class=&quot;fu&quot;&gt;cast&lt;/span&gt; (&lt;span class=&quot;st&quot;&gt;'00000000-0000-0100-0000-000000000000'&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;as&lt;/span&gt; uniqueidentifier)
    &lt;span class=&quot;kw&quot;&gt;Union&lt;/span&gt;   &lt;span class=&quot;kw&quot;&gt;Select&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;ID&lt;/span&gt; = &lt;span class=&quot;dv&quot;&gt;11&lt;/span&gt;, &lt;span class=&quot;fu&quot;&gt;UID&lt;/span&gt; = &lt;span class=&quot;fu&quot;&gt;cast&lt;/span&gt; (&lt;span class=&quot;st&quot;&gt;'00000000-0001-0000-0000-000000000000'&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;as&lt;/span&gt; uniqueidentifier)
    &lt;span class=&quot;kw&quot;&gt;Union&lt;/span&gt;   &lt;span class=&quot;kw&quot;&gt;Select&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;ID&lt;/span&gt; = &lt;span class=&quot;dv&quot;&gt;12&lt;/span&gt;, &lt;span class=&quot;fu&quot;&gt;UID&lt;/span&gt; = &lt;span class=&quot;fu&quot;&gt;cast&lt;/span&gt; (&lt;span class=&quot;st&quot;&gt;'00000000-0100-0000-0000-000000000000'&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;as&lt;/span&gt; uniqueidentifier)
    &lt;span class=&quot;kw&quot;&gt;Union&lt;/span&gt;   &lt;span class=&quot;kw&quot;&gt;Select&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;ID&lt;/span&gt; = &lt;span class=&quot;dv&quot;&gt;13&lt;/span&gt;, &lt;span class=&quot;fu&quot;&gt;UID&lt;/span&gt; = &lt;span class=&quot;fu&quot;&gt;cast&lt;/span&gt; (&lt;span class=&quot;st&quot;&gt;'00000001-0000-0000-0000-000000000000'&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;as&lt;/span&gt; uniqueidentifier)
    &lt;span class=&quot;kw&quot;&gt;Union&lt;/span&gt;   &lt;span class=&quot;kw&quot;&gt;Select&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;ID&lt;/span&gt; = &lt;span class=&quot;dv&quot;&gt;14&lt;/span&gt;, &lt;span class=&quot;fu&quot;&gt;UID&lt;/span&gt; = &lt;span class=&quot;fu&quot;&gt;cast&lt;/span&gt; (&lt;span class=&quot;st&quot;&gt;'00000100-0000-0000-0000-000000000000'&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;as&lt;/span&gt; uniqueidentifier)
    &lt;span class=&quot;kw&quot;&gt;Union&lt;/span&gt;   &lt;span class=&quot;kw&quot;&gt;Select&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;ID&lt;/span&gt; = &lt;span class=&quot;dv&quot;&gt;15&lt;/span&gt;, &lt;span class=&quot;fu&quot;&gt;UID&lt;/span&gt; = &lt;span class=&quot;fu&quot;&gt;cast&lt;/span&gt; (&lt;span class=&quot;st&quot;&gt;'00010000-0000-0000-0000-000000000000'&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;as&lt;/span&gt; uniqueidentifier)
    &lt;span class=&quot;kw&quot;&gt;Union&lt;/span&gt;   &lt;span class=&quot;kw&quot;&gt;Select&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;ID&lt;/span&gt; = &lt;span class=&quot;dv&quot;&gt;16&lt;/span&gt;, &lt;span class=&quot;fu&quot;&gt;UID&lt;/span&gt; = &lt;span class=&quot;fu&quot;&gt;cast&lt;/span&gt; (&lt;span class=&quot;st&quot;&gt;'01000000-0000-0000-0000-000000000000'&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;as&lt;/span&gt; uniqueidentifier)
)
&lt;span class=&quot;kw&quot;&gt;Select&lt;/span&gt; * &lt;span class=&quot;kw&quot;&gt;From&lt;/span&gt; UIDs &lt;span class=&quot;kw&quot;&gt;Order&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;By&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;UID&lt;/span&gt;, &lt;span class=&quot;kw&quot;&gt;ID&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;例子来自Ferrari的博客&lt;a href=&quot;http://sqlblog.com/blogs/alberto_ferrari/archive/2007/08/31/how-are-guids-sorted-by-sql-server.aspx&quot;&gt;How are GUIDs sorted by SQL Server?&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;查询结果：&lt;/p&gt;
&lt;table&gt;&lt;thead/&gt;&lt;tbody readability=&quot;16&quot;&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td&gt;16&lt;/td&gt;
&lt;td&gt;0&lt;strong&gt;1&lt;/strong&gt;000000-0000-0000-0000-000000000000&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;2&quot;&gt;&lt;td&gt;15&lt;/td&gt;
&lt;td&gt;000&lt;strong&gt;1&lt;/strong&gt;0000-0000-0000-0000-000000000000&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td&gt;14&lt;/td&gt;
&lt;td&gt;00000&lt;strong&gt;1&lt;/strong&gt;00-0000-0000-0000-000000000000&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;2&quot;&gt;&lt;td&gt;13&lt;/td&gt;
&lt;td&gt;0000000&lt;strong&gt;1&lt;/strong&gt;-0000-0000-0000-000000000000&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td&gt;12&lt;/td&gt;
&lt;td&gt;00000000-0&lt;strong&gt;1&lt;/strong&gt;00-0000-0000-000000000000&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;2&quot;&gt;&lt;td&gt;11&lt;/td&gt;
&lt;td&gt;00000000-000&lt;strong&gt;1&lt;/strong&gt;-0000-0000-000000000000&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;00000000-0000-0&lt;strong&gt;1&lt;/strong&gt;00-0000-000000000000&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;2&quot;&gt;&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;00000000-0000-000&lt;strong&gt;1&lt;/strong&gt;-0000-000000000000&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;00000000-0000-0000-00&lt;strong&gt;1&lt;/strong&gt;0-000000000000&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;2&quot;&gt;&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;00000000-0000-0000-0&lt;strong&gt;1&lt;/strong&gt;00-000000000000&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;00000000-0000-0000-0000-00000000000&lt;strong&gt;1&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;2&quot;&gt;&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;00000000-0000-0000-0000-000000000&lt;strong&gt;1&lt;/strong&gt;00&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;00000000-0000-0000-0000-0000000&lt;strong&gt;1&lt;/strong&gt;0000&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;2&quot;&gt;&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;00000000-0000-0000-0000-00000&lt;strong&gt;1&lt;/strong&gt;000000&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;00000000-0000-0000-0000-000&lt;strong&gt;1&lt;/strong&gt;00000000&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;2&quot;&gt;&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;00000000-0000-0000-0000-0&lt;strong&gt;1&lt;/strong&gt;0000000000&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;通过上面可以得于是如下结果：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;先按每1-8从左到右进行排序；&lt;/li&gt;
&lt;li&gt;接着按第9-10位从右到左进行排序；&lt;/li&gt;
&lt;li&gt;最后按后11-16位从右到左进行排序;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;通过分析，我们可得到如下权重列表：&lt;/p&gt;
&lt;table&gt;&lt;thead/&gt;&lt;tbody&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;权重&lt;/td&gt;
&lt;td&gt;16&lt;/td&gt;
&lt;td&gt;15&lt;/td&gt;
&lt;td&gt;14&lt;/td&gt;
&lt;td&gt;13&lt;/td&gt;
&lt;td/&gt;
&lt;td&gt;12&lt;/td&gt;
&lt;td&gt;11&lt;/td&gt;
&lt;td/&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td/&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td/&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;Value&lt;/td&gt;
&lt;td&gt;11&lt;/td&gt;
&lt;td&gt;11&lt;/td&gt;
&lt;td&gt;11&lt;/td&gt;
&lt;td&gt;11&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;22&lt;/td&gt;
&lt;td&gt;22&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;33&lt;/td&gt;
&lt;td&gt;33&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;44&lt;/td&gt;
&lt;td&gt;44&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;44&lt;/td&gt;
&lt;td&gt;44&lt;/td&gt;
&lt;td&gt;44&lt;/td&gt;
&lt;td&gt;44&lt;/td&gt;
&lt;td&gt;44&lt;/td&gt;
&lt;td&gt;44&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;在Microsoft官方文档中，有一篇文档关于GUID与&lt;code&gt;uniqueidentifier&lt;/code&gt;的值比较：&lt;br/&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/framework/data/adonet/sql/comparing-guid-and-uniqueidentifier-values&quot;&gt;Comparing GUID and uniqueidentifier Values&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;不同的数据库处理GUID的方式也是不同的。在SQL Server存在内置GUID类型，没有原生GUID支持的数据库通过模拟来方式来实现的。在Oracle保存为raw bytes类型，具体类型为&lt;strong&gt;raw(16)&lt;/strong&gt;；在MySql中通常将GUID储存为&lt;strong&gt;char(36)&lt;/strong&gt;的字符串形式。&lt;/p&gt;
&lt;p&gt;关于Oracle、MySql数据库的排序规则与.Net中排序规则，不过篇章的限制，这里不再做具体的演示，不过我在github上提供了示例SQL语句：&lt;a href=&quot;https://gist.github.com/tangdf/f0aed064ba10bfa0050e4344b9236889&quot; class=&quot;uri&quot;&gt;https://gist.github.com/tangdf/f0aed064ba10bfa0050e4344b9236889&lt;/a&gt;，您可以自己进行测试。我们在这里只给出最终的结论：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;小结：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;.Net中GUID的排序规则是从左到右依次进行排序，与数字排序规则一致；&lt;/li&gt;
&lt;li&gt;Sql Server数据库提供对GUID类型的支持，在数据库中称为&lt;code&gt;UniqueIdentifier&lt;/code&gt;类型，但是排序规则比较复杂：
&lt;ul&gt;&lt;li&gt;先按每1-8从左到右进行排序；&lt;/li&gt;
&lt;li&gt;接着按第9-10位从右到左进行排序；&lt;/li&gt;
&lt;li&gt;最后按后11-16位从右到左进行排序；&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Oracle数据库未提供对GUID类型的支持，使用的是raw bytes类型保存数据&lt;strong&gt;raw(16)&lt;/strong&gt;，具体类型为，排序规则与GUID在.Net中规则一致；&lt;/li&gt;
&lt;li&gt;MySql数据未提供对GUID类型的支持，使用的是字符串的类型保存数据，使用是的&lt;strong&gt;char(36)&lt;/strong&gt;类型，由于使用的是字符串类型，排序规则与GUID在.Net中的规则一致。&lt;/li&gt;
&lt;/ol&gt;&lt;/blockquote&gt;
&lt;h2 id=&quot;有序guid&quot;&gt;有序GUID&lt;/h2&gt;
&lt;p&gt;有序GUID是有规则的生成GUID，保存在之后生成的GUID类型总是比之前的要大。不过在上一节中，已经提到过各个数据库对GUID支持不一样，而且排序的规则也不一样，所以我们需要为每一个数据库提供不一致的有序GUID生成规则。&lt;/p&gt;
&lt;h3 id=&quot;uuidcreatesequential函数&quot;&gt;UuidCreateSequential函数&lt;/h3&gt;
&lt;p&gt;我们都知道SQL Server数据库有一个&lt;code&gt;NewSequentialId()&lt;/code&gt;函数，用于创建有序GUID。在创建表时，可以将它设置成为GUID类型字段的默认值，在插入新增数据时自动创建主键的值（该函数只能做为字段的默认值，不能直接在SQL中调用）。&lt;/p&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode sql&quot;&gt;
&lt;code class=&quot;sourceCode sql&quot;&gt;&lt;span class=&quot;kw&quot;&gt;Create&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;Table&lt;/span&gt; TestTable
       (
         &lt;span class=&quot;kw&quot;&gt;ID&lt;/span&gt; UniqueIdentifier &lt;span class=&quot;kw&quot;&gt;Not&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;Null&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;Default&lt;/span&gt; ( NewSequentialId() ) ,
         &lt;span class=&quot;dt&quot;&gt;Number&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Int&lt;/span&gt;
       );&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;NewSequentialId()&lt;/code&gt;函数只能在数据库使用，不过在 Microsoft 的 MSDN 文档中有说明，&lt;strong&gt;NEWSEQUENTIALID 是对 Windows UuidCreateSequential 函数的包装&lt;/strong&gt;，&lt;a href=&quot;https://msdn.microsoft.com/zh-cn/library/ms189786(v=sql.120).aspx&quot; class=&quot;uri&quot;&gt;https://msdn.microsoft.com/zh-cn/library/ms189786(v=sql.120).aspx&lt;/a&gt;。这样我们可以在C#通过非托管方法调用：&lt;/p&gt;
&lt;pre class=&quot;c#&quot;&gt;
&lt;code&gt;   [System.Runtime.InteropServices.DllImport(&quot;rpcrt4.dll&quot;, SetLastError = true)]
   private static extern int UuidCreateSequential(out Guid guid);

   public static Guid NewSequentialGuid()
   {
       const int RPC_S_OK = 0;

       int result = UuidCreateSequential(out var guid);
       if (result != RPC_S_OK) {
           throw new System.ComponentModel.Win32Exception(System.Runtime.InteropServices.Marshal.GetLastWin32Error());
       }

       return guid;
   }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;不这个方法也存在三个问题：&lt;/p&gt;
&lt;ol readability=&quot;4.3270339525945&quot;&gt;&lt;li readability=&quot;4.5&quot;&gt;
&lt;p&gt;这个方法涉及到安全问题，&lt;code&gt;UuidCreateSequential&lt;/code&gt;函数依赖的计算硬件，该方法的后12位其实是网卡的MAC地址。这是我电脑生成的一组有序GUID。&lt;/p&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;{A2A9339&lt;strong&gt;3&lt;/strong&gt;-C8DC-11E7-B133-&lt;strong&gt;2C56DC497A97&lt;/strong&gt;}&lt;br/&gt;{A2A9339&lt;strong&gt;4&lt;/strong&gt;-C8DC-11E7-B133-&lt;strong&gt;2C56DC497A97&lt;/strong&gt;}&lt;br/&gt;{A2A9339&lt;strong&gt;5&lt;/strong&gt;-C8DC-11E7-B133-&lt;strong&gt;2C56DC497A97&lt;/strong&gt;}&lt;br/&gt;{A2A9339&lt;strong&gt;6&lt;/strong&gt;-C8DC-11E7-B133-&lt;strong&gt;2C56DC497A97&lt;/strong&gt;}&lt;br/&gt;{A2A9339&lt;strong&gt;7&lt;/strong&gt;-C8DC-11E7-B133-&lt;strong&gt;2C56DC497A97&lt;/strong&gt;}&lt;br/&gt;{A2A9339&lt;strong&gt;8&lt;/strong&gt;-C8DC-11E7-B133-&lt;strong&gt;2C56DC497A97&lt;/strong&gt;}&lt;br/&gt;{A2A9339&lt;strong&gt;9&lt;/strong&gt;-C8DC-11E7-B133-&lt;strong&gt;2C56DC497A97&lt;/strong&gt;}&lt;br/&gt;{A2A9339&lt;strong&gt;A&lt;/strong&gt;-C8DC-11E7-B133-&lt;strong&gt;2C56DC497A97&lt;/strong&gt;}&lt;br/&gt;{A2A9339&lt;strong&gt;B&lt;/strong&gt;-C8DC-11E7-B133-&lt;strong&gt;2C56DC497A97&lt;/strong&gt;}&lt;br/&gt;{A2A9339&lt;strong&gt;C&lt;/strong&gt;-C8DC-11E7-B133-&lt;strong&gt;2C56DC497A97&lt;/strong&gt;}&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这是我电脑的网卡的MAC地址：&lt;br/&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/162090/201711/162090-20171117164633499-10139893.png&quot;/&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;由于&lt;code&gt;UuidCreateSequential&lt;/code&gt;函数生成的有序GUID中包括MAC地址，所以如果在服务器集群环境中，肯定存在一台服务器A上生成的有序GUID总比另一台服务器B生成要更小，服务器A产生的数据插入到数据库时，由于聚集索引的问题，总是会移动服务器B已经持久化到数据库中的数据。集群的服务器越多，产生的IO问题更严重。在服务器群集环境中，需要自行实现有序GUID。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1.75&quot;&gt;
&lt;p&gt;&lt;code&gt;UuidCreateSequential&lt;/code&gt;函数生成的&lt;strong&gt;GUID规则与SQL Server中排序的规则存在不一致&lt;/strong&gt;，这样仍然会导致严重的IO问题，所以需要将GUID重新排序后再持久化到数据库。例如上面列出生成的GUID列表，依次生成的数据可以看出，是第4位字节在自增长，在这与任何一个数据库的排序规则都不一致；关于该函数生成的规则，可以见此链接：&lt;a href=&quot;https://stackoverflow.com/questions/5585307/sequential-guids&quot; class=&quot;uri&quot;&gt;https://stackoverflow.com/questions/5585307/sequential-guids&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;下面的方法是将生成的GUID调整成为适合Sql Server使用的有序GUID（针对其它数据库支持，您可以按排序规则自行修改）：&lt;/p&gt;
&lt;pre class=&quot;csharp&quot;&gt;
&lt;code&gt;
[System.Runtime.InteropServices.DllImport(&quot;rpcrt4.dll&quot;, SetLastError = true)]
static extern int UuidCreateSequential(byte[] buffer);

static Guid NewSequentialGuid() {

    byte[] raw = new byte[16];
    if (UuidCreateSequential(raw) != 0)
        throw new System.ComponentModel.Win32Exception(System.Runtime.InteropServices.Marshal.GetLastWin32Error());

    byte[] fix = new byte[16];

    // reverse 0..3
    fix[0x0] = raw[0x3];
    fix[0x1] = raw[0x2];
    fix[0x2] = raw[0x1];
    fix[0x3] = raw[0x0];

    // reverse 4 &amp;amp; 5
    fix[0x4] = raw[0x5];
    fix[0x5] = raw[0x4];

    // reverse 6 &amp;amp; 7
    fix[0x6] = raw[0x7];
    fix[0x7] = raw[0x6];

    // all other are unchanged
    fix[0x8] = raw[0x8];
    fix[0x9] = raw[0x9];
    fix[0xA] = raw[0xA];
    fix[0xB] = raw[0xB];
    fix[0xC] = raw[0xC];
    fix[0xD] = raw[0xD];
    fix[0xE] = raw[0xE];
    fix[0xF] = raw[0xF];

    return new Guid(fix);
}&lt;/code&gt;
&lt;/pre&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;&lt;strong&gt;小结：&lt;/strong&gt;&lt;br/&gt;&lt;code&gt;UuidCreateSequential&lt;/code&gt;函数存在隐私的问题，不适合集群环境，并且需要重新排序后再提交到数据库；&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;comb解决方案&quot;&gt;COMB解决方案&lt;/h3&gt;
&lt;p&gt;COMB 类型的GUID 是由&lt;code&gt;Jimmy Nilsson&lt;/code&gt;在他的“&lt;a href=&quot;http://www.informit.com/articles/article.aspx?p=25862&quot;&gt;The Cost of GUIDs as Primary Keys&lt;/a&gt;”一文中设计出来的。&lt;br/&gt;基本设计思路是这样的：既然GUID数据生成是随机的造成索引效率低下，影响了系统的性能，那么能不能通过组合的方式，保留GUID的前10个字节，用后6个字节表示GUID生成的时间（DateTime），这样我们将时间信息与GUID组合起来，在保留GUID的唯一性的同时增加了有序性，以此来提高索引效率（这是针对Sql Server数据库来设计的）。&lt;/p&gt;
&lt;p&gt;在NHibernate框架中已经实现该功能，可以在github上看到实现方式：&lt;a href=&quot;https://github.com/nhibernate/nhibernate-core/blob/master/src/NHibernate/Id/GuidCombGenerator.cs#L25-L72&quot; class=&quot;uri&quot;&gt;https://github.com/nhibernate/nhibernate-core/blob/master/src/NHibernate/Id/GuidCombGenerator.cs#L25-L72&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;在EF以及EF Core也同样实现了类似的解决方案，EF Core的实现方式：&lt;a href=&quot;https://github.com/aspnet/EntityFrameworkCore/blob/f7f6d6e23c8e47e44a61983827d9e41f2afe5cc7/src/EFCore/ValueGeneration/SequentialGuidValueGenerator.cs#L25-L44&quot; class=&quot;uri&quot;&gt;https://github.com/aspnet/EntityFrameworkCore/blob/f7f6d6e23c8e47e44a61983827d9e41f2afe5cc7/src/EFCore/ValueGeneration/SequentialGuidValueGenerator.cs#L25-L44&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在这里介绍一下使用的方式，由EF Core框架自动生成有序GUID的方式：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;    public class SampleDbContext : DbContext
    {
        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity&amp;lt;GuidEntity&amp;gt;(b =&amp;gt;
            {
                b.Property(e =&amp;gt; e.Id).HasValueGenerator&amp;lt;SequentialGuidValueGenerator&amp;gt;();
            });
        }
    }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;但是请注意，这两个ORM的解决方案只针对Sql Server数据库，因为只保证了最后几位字节是按顺序来生成的。&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;sequentialguid框架&quot;&gt;SequentialGuid框架&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/jhtodd/SequentialGuid/&quot;&gt;SequentialGuid&lt;/a&gt;框架也是我要推荐给您，因为它提供了常见数据库生成有序Guid的解决方案。&lt;/p&gt;
&lt;p&gt;关于该框架的设计思路以及针对各个数据库的性能测试，见链接：&lt;a href=&quot;https://www.codeproject.com/Articles/388157/GUIDs-as-fast-primary-keys-under-multiple-database&quot; class=&quot;uri&quot;&gt;https://www.codeproject.com/Articles/388157/GUIDs-as-fast-primary-keys-under-multiple-database&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;使用方式，建议您参考ABP框架，在ABP中使用SequentialGuid框架来生成有序GUID，关键代码链接：&lt;a href=&quot;https://github.com/aspnetboilerplate/aspnetboilerplate/blob/b36855f0c238c3592203f058c641862844a0614e/src/Abp/SequentialGuidGenerator.cs#L36-L51&quot; class=&quot;uri&quot;&gt;https://github.com/aspnetboilerplate/aspnetboilerplate/blob/b36855f0c238c3592203f058c641862844a0614e/src/Abp/SequentialGuidGenerator.cs#L36-L51&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&quot;总结&quot;&gt;总结&lt;/h2&gt;
&lt;p&gt;我们来解决一下：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;在数据库中最好不要使用随机的GUID，它会影响性能；&lt;/li&gt;
&lt;li&gt;在SQL Server中提供了&lt;code&gt;NewSequentialId&lt;/code&gt;函数来生成有序GUID；&lt;/li&gt;
&lt;li&gt;各个数据库对GUID支持的不一样，而且排序的规则也不一样；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;UuidCreateSequential&lt;/code&gt;函数存在隐私的问题，不适合集群环境，并且需要重新排序后再提交到数据库；&lt;/li&gt;
&lt;li&gt;各ORM框架提供了有序GUID的支持，但是其实只是针对Sql Server数据库设计的；&lt;/li&gt;
&lt;li&gt;推荐您使用SequentialGuid框架，它解决了多数据库以及集群环境的问题。&lt;/li&gt;
&lt;/ol&gt;</description>
<pubDate>Sun, 19 Nov 2017 23:18:00 +0000</pubDate>
<dc:creator>Sweet-Tang</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/tdfblog/p/SequentialGuid.html</dc:identifier>
</item>
<item>
<title>WebService学习总结 - pony1223</title>
<link>http://www.cnblogs.com/pony1223/p/7847323.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/pony1223/p/7847323.html</guid>
<description>&lt;p&gt;&lt;span&gt;因为最近开发的项目需求中涉及到了webservice，正好对这块知识以前学过但是又忘记了，于是想着从新学习下，整理一个笔记，便于后面的复习。于是有了本文，下面开始介绍webservice。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;一、简介&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;大家或多或少都听过 WebService（Web服务），有一段时间甚至很多计算机期刊、书籍和网站都大肆的提及和宣传WebService技术，其中不乏很多吹嘘和做广告的成 分。但是不得不承认的是WebService真的是一门新兴和有前途的技术，那么WebService到底是什么？何时应该用？下面将会详细介绍，这一节我们先有一个感性认识。&lt;/span&gt;&lt;span&gt;具体举个例子，比如在Windows Server服务器上有个C#.Net开发的应用A，在Linux上有个Java语言开发的应用B，B应用要调用A应用，或者是互相调用。用于查看对方的业务数据。再举个例子，天气预报接口。无数的应用需要获取天气预报信息；这些应用可能是各种平台，各种技术实现；而气象局的项目，估计也就一两种，要对外提供天气预报信息，这个时候，如何解决呢？这些应用的时候的都可以通过WebService来很好的实现其应用。通过Web Service，客户端和服务器才能够自由的用HTTP进行通信，不论两个程序的平台和编程语言是什么。当然有人会说使用Socket通信业可以达到效果，但是两者之间还是有区别的。比如：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/401339/201711/401339-20171117065717906-770336222.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;客户端：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.pony1223;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.io.DataInputStream;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.io.DataOutputStream;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.io.IOException;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.net.Socket;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.net.UnknownHostException;

&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; WeatherClient 
{
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; main(String[] args) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; UnknownHostException, IOException
    {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;1.创建Socket对象，和服务端建立连接&lt;/span&gt;
        Socket socket = &lt;span&gt;new&lt;/span&gt; Socket(&quot;127.0.0.1&quot;,12345&lt;span&gt;);
         
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;2.发送城市名称&lt;/span&gt;
        DataOutputStream dos = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; DataOutputStream(socket.getOutputStream());
        dos.writeUTF(&lt;/span&gt;&quot;北京&quot;&lt;span&gt;);
        System.out.println(&lt;/span&gt;&quot;请求查询天气: 北京&quot;&lt;span&gt;);
         
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;3.接受返回结果使用输入流&lt;/span&gt;
        DataInputStream dis = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; DataInputStream(socket.getInputStream());
        String result &lt;/span&gt;=&lt;span&gt; dis.readUTF();
        System.out.println(&lt;/span&gt;&quot;北京的天气: &quot; +&lt;span&gt; result);
         
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;4.关闭流&lt;/span&gt;
&lt;span&gt;        dis.close();
        dos.close();
    }

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;服务端：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.pony1223;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.io.DataInputStream;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.io.DataOutputStream;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.io.IOException;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.net.ServerSocket;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.net.Socket;

&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; WeatherServer 
{
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; main(String[] args) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; IOException{
         
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 1.创建ServerSocket对象&lt;/span&gt;
        ServerSocket serverSocket = &lt;span&gt;new&lt;/span&gt; ServerSocket(12345&lt;span&gt;);
 
        &lt;/span&gt;&lt;span&gt;while&lt;/span&gt;(&lt;span&gt;true&lt;/span&gt;&lt;span&gt;){
 
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2.等待客户端连接，阻塞的方法&lt;/span&gt;
            &lt;span&gt;final&lt;/span&gt; Socket socket =&lt;span&gt; serverSocket.accept();
             
            Runnable runnable &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Runnable(){
                @Override
                &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; run(){
                    &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt;{
                        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 3.使用输入流接受客户端发送的请求&lt;/span&gt;
                        DataInputStream dis = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; DataInputStream(socket.getInputStream());
                        String cityName &lt;/span&gt;=&lt;span&gt; dis.readUTF();
                        System.out.println(&lt;/span&gt;&quot;接收到客户端发送的请求: &quot; +&lt;span&gt; cityName);
                         
                        Thread.sleep(&lt;/span&gt;1000&lt;span&gt;);
                         
                        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 4.根据城市名查询天气&lt;/span&gt;
                        String result = &quot;今天天气很热&quot;&lt;span&gt;;
                        System.out.println(&lt;/span&gt;&quot;返回天气信息: &quot; +&lt;span&gt; result);
 
                        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 5.返回查询结果，使用输出流。&lt;/span&gt;
                        DataOutputStream dos = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; DataOutputStream(socket.getOutputStream());
                        dos.writeUTF(result);
 
                        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 6.关闭流&lt;/span&gt;
&lt;span&gt;                        dis.close();
                        dos.close();
                    }&lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt;(Exception e){
                        e.printStackTrace();
                    }
                }
            };
             
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;启动线程&lt;/span&gt;
            &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Thread(runnable).start();
             
        }
    }

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;输出结果为：&lt;/p&gt;
&lt;p&gt;&lt;span&gt;请求查询天气: 北京 &lt;br/&gt;北京的天气: 今天天气很热&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;接收到客户端发送的请求: 北京 &lt;br/&gt;返回天气信息: 今天天气很热&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;然后我们采用WebService来实现下：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;第一步: 创建一个java工程，不需要导入jar包。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;第二步: 创建接口。在Webservice中叫做SEI(wsdl中叫做PortType)。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;第三步: 创建实现类。需要在实现类上加一个@Webservice注解。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;第四步: 发布服务。EndPoint.publish发布服务。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;WeatherInterface.java&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.pony1223.wsservice;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; javax.jws.WebService;


@WebService
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt;&lt;span&gt; WeatherInterface 
{
    String getWeatherByCity(String city);
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;实现类：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.pony1223.wsservice.impl;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; javax.jws.WebService;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.pony1223.wsservice.WeatherInterface;

@WebService
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; WeatherInterfaceImpl &lt;span&gt;implements&lt;/span&gt;&lt;span&gt; WeatherInterface
{

    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getWeatherByCity(String city) {
        System.out.println(&lt;/span&gt;&quot;接收客户端发送过来的城市名字:&quot;+&lt;span&gt;city);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;调用天气等服务
        
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;.....
        
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;这里模拟所以直接返回结果&lt;/span&gt;
&lt;span&gt;        
        String result &lt;/span&gt;= &quot;天气比较冷&quot;&lt;span&gt;;
        System.out.println(&lt;/span&gt;&quot;返回天气查询结果:&quot;+&lt;span&gt;result);
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; result;
    }

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;WeatherServer.java 发布服务；&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.pony1223.test;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; javax.xml.ws.Endpoint;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.pony1223.wsservice.WeatherInterface;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.pony1223.wsservice.impl.WeatherInterfaceImpl;

&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; WeatherServer 
{
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args)
    {
        WeatherInterface server &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; WeatherInterfaceImpl();
        String address &lt;/span&gt;= &quot;http://192.168.31.159:1111/WeatherInterface&quot;&lt;span&gt;;
        Endpoint.publish(address, server);
    }

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt; 看看服务是否发布成功，访问wsdl:http://192.168.31.159:1111/WeatherInterface?wsdl&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/401339/201711/401339-20171117075008952-17886400.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; 可以看到服务发布成功：&lt;/p&gt;
&lt;p&gt;&lt;span&gt;客户端代码编写，可以采用工具生成：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/401339/201711/401339-20171117075208702-797434705.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;刷新工程：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/401339/201711/401339-20171117075303687-2049731590.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;因此我们只需要编写client的调用即可：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;第1步:创建服务视图对象。&lt;br/&gt;第2步: 从服务视图中获得PortType对象。&lt;br/&gt;第3步: 调用PortType的方法(可以实现远程通信)&lt;br/&gt;第4步: 接收方法的返回值(服务端响应的结果)。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.pony1223.wsservice.impl;

&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Client
{
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) 
    {
        WeatherInterfaceImplService server &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; WeatherInterfaceImplService();
        WeatherInterfaceImpl impl &lt;/span&gt;=&lt;span&gt; server.getWeatherInterfaceImplPort();
        System.out.println(impl.getWeatherByCity(&lt;/span&gt;&quot;北京&quot;&lt;span&gt;));
        
    }

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;输出结果：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;天气比较冷&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;接收客户端发送过来的城市名字:北京&lt;br/&gt;返回天气查询结果:天气比较冷&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;上面编写了两种方式，那么区别是什么？&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;(1)Socket是基于TCP/IP的传输层协议。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;Webservice是基于HTTP协议传输数据，http是基于tcp的应用层协议。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;Webservice采用了基于http的soap协议传输数据。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;(2)Socket接口通过流传输，不支持面向对象。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;Webservice 接口支持面向对象，最终webservice将对象进行序列化后通过流传输。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;Webservice采用soap协议进行通信，不需专门针对数据流的发送和接收进行处理，是一种跨平台的面向对象远程调用技术。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;(3)Socket适用于高性能大数据的传输，传输的数据需要手动处理，socket通信的接口协议需要自定义。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;比如：自定义一种字符串拼接的格式，比如自定义的xml数据，自定义麻烦之处在接口调用方和接口服务端需要互相讨论确定接口的协议内容，不方便。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;缺点&lt;/span&gt;&lt;br/&gt;&lt;span&gt;程序员需要自己去解析输入、输出流，解析发送和接收的数据。数据传输的格式不固定，需要程序员开发socket接口时自定义接口协议。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;优点&lt;/span&gt;&lt;br/&gt;&lt;span&gt;如果要传输大数据量，socket可以满足，如果存在大并发使用socket也可以实现，程序用socket灵活性更大，比如可以socket的高并发框架mina开发。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;Webservcie由于是遵循标准的soap协议，soap 协议的内容格式固定，soap协议传递的内容是xml数据，由于webservice是基于http的，所以简单理解为soap=http+xml，适用于没有性能要求情况下且数据传输量小，推荐在公开接口上使用webservice，因为soap协议的标准的。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;优点&lt;/span&gt;&lt;br/&gt;&lt;span&gt;jaxws可以通过面向对象开发webservice，程序员不需要解析输入、输出流。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;由于webservice传输数据使用标准的soap协议(基于http传输xml)，soap协议已经被w3c管理了。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;缺点&lt;/span&gt;&lt;br/&gt;&lt;span&gt;如果传输大数据量，webservice不适用。如果webservice开发大并发的应用，webservice依靠web容器提高并发数。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;说明：大部分场景，WebService 已经足够使用，所以本文的的重点是webservice.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;二、WebService的本质&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;一句话：&lt;strong&gt;WebService是一种跨语言和跨平台的远程调用技术。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;所谓跨编程语言和跨操作平台，就是说服务端程序采用java编写，客户端程序则可以采用其他编程语言编写，反之亦然！跨操作系统平台则是指服务端程序和客户端程序可以在不同的操作系统上运行。&lt;/span&gt;&lt;/strong&gt;&lt;br/&gt;&lt;span&gt;&lt;strong&gt;所谓远程调用，就是一台计算机a上 的一个程序可以调用到另外一台计算机b上的一个对象的方法&lt;/strong&gt;，譬如，银联提供给商场的pos刷卡系统，商场的POS机转账调用的转账方法的代码其实是跑在银 行服务器上。再比如，amazon，天气预报系统，淘宝网，校内网，百度等把自己的系统服务以webservice服务的形式暴露出来，让第三方网站和程 序可以调用这些服务功能，这样扩展了自己系统的市场占有率，往大的概念上吹，就是所谓的SOA应用。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;strong&gt;其实可以从多个角度来理解 WebService，从表面上看，WebService就是一个应用程序向外界暴露出一个能通过Web进行调用的API&lt;/strong&gt;，也就是说能用编程的方法通过 Web来调用这个应用程序。我们把调用这个WebService的应用程序叫做客户端，而把提供这个WebService的应用程序叫做服务端。&lt;strong&gt;从深层次 看，WebService是建立可互操作的分布式应用程序的新平台&lt;/strong&gt;，是一个平台，是一套标准。它定义了应用程序如何在Web上实现互操作性，你可以用任何 你喜欢的语言，在任何你喜欢的平台上写Web service ，只要我们可以通过Web service标准对这些服务进行查询和访问。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;strong&gt;WebService平台需要一套协议来实现分布式应用程序的创建。&lt;/strong&gt;任何平台都有它的数据表示方法和类型系统。要实现互操作性，WebService平台 必须提供一套标准的类型系统，用于沟通不同平台、编程语言和组件模型中的不同类型系统。Web service平台必须提供一种标准来描述 Web service，让客户可以得到足够的信息来调用这个Web service。最后，我们还必须有一种方法来对这个Web service进行远 程调用,这种方法实际是一种远程过程调用协议(RPC)。为了达到互操作性，这种RPC协议还必须与平台和编程语言无关。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;三、WebService的技术基础&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;XML+XSD,SOAP和WSDL就是构成WebService平台的三大技术。&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&quot;blogTitle3&quot;&gt;&lt;span&gt;3.1、XML+XSD&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;　　WebService采用HTTP协议传输数据，采用XML格式封装数据（即XML中说明调用远程服务对象的哪个方法，传递的参数是什么，以及服务对象的 返回结果是什么）。XML是WebService平台中表示数据的格式。除了易于建立和易于分析外，XML主要的优点在于它既是平台无关的，又是厂商无关 的。无关性是比技术优越性更重要的：软件厂商是不会选择一个由竞争对手所发明的技术的。 &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　XML解决了数据表示的问题，但它没有定义一套标准的数据类型，更没有说怎么去扩展这套数据类型。例如，整形数到底代表什么？16位，32位，64位？这 些细节对实现互操作性很重要。XML Schema(XSD)就是专门解决这个问题的一套标准。它定义了一套标准的数据类型，并给出了一种语言来扩展这套数据类型。WebService平台就 是用XSD来作为其数据类型系统的。当你用某种语言(如VB.NET或C#)来构造一个Web service时，为了符合WebService标准，所 有你使用的数据类型都必须被转换为XSD类型。你用的工具可能已经自动帮你完成了这个转换，但你很可能会根据你的需要修改一下转换过程。&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&quot;blogTitle4&quot;&gt;&lt;span&gt;3.2、SOAP&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;   WebService通过HTTP协议发送请求和接收结果时，发送的请求内容和结果内容都采用XML格式封装，并增加了一些特定的HTTP消息头，以说明 HTTP消息的内容格式，这些特定的HTTP消息头和XML内容格式就是SOAP协议。SOAP提供了标准的RPC方法来调用Web Service。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;  &lt;strong&gt;SOAP协议 = HTTP协议 + XML数据格式&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p0&quot;&gt;&lt;span&gt;  SOAP协议定义了SOAP消息的格式，SOAP协议是基于HTTP协议的，SOAP也是基于XML和XSD的，XML是SOAP的数据编码方式。打个比 喻：HTTP就是普通公路，XML就是中间的绿色隔离带和两边的防护栏，SOAP就是普通公路经过加隔离带和防护栏改造过的高速公路。&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&quot;blogTitle5&quot;&gt;&lt;span&gt;3.3、WSDL&lt;/span&gt;&lt;/h3&gt;
&lt;p class=&quot;p0&quot;&gt;&lt;span&gt;　　好比我们去商店买东西，首先要知道商店里有什么东西可买，然后再来购买，商家的做法就是张贴广告海报。 WebService也一样，WebService客户端要调用一个WebService服务，首先要有知道这个服务的地址在哪，以及这个服务里有什么方 法可以调用，所以，WebService务器端首先要通过一个WSDL文件来说明自己家里有啥服务可以对外调用，服务是什么（服务中有哪些方法，方法接受 的参数是什么，返回值是什么），服务的网络地址用哪个url地址表示，服务通过什么方式来调用。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　WSDL(Web Services Description Language)就是这样一个基于XML的语言，用于描述Web Service及其函数、参数和返回值。它是WebService客户端和服务器端都 能理解的标准格式。因为是基于XML的，所以WSDL既是机器可阅读的，又是人可阅读的，这将是一个很大的好处。一些最新的开发工具既能根据你的 Web service生成WSDL文档，又能导入WSDL文档，生成调用相应WebService的代理类代码。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　WSDL 文件保存在Web服务器上，通过一个url地址就可以访问到它。客户端要调用一个WebService服务之前，要知道该服务的WSDL文件的地址。 WebService服务提供商可以通过两种方式来暴露它的WSDL文件地址：1.注册到UDDI服务器，以便被人查找；2.直接告诉给客户端调用者。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;四、WebService知识小节&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;1、WebService是什么？&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　1.1 基于Web的服务：服务器端整出一些资源让客户端应用访问（获取数据）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　1.2 一个跨语言、跨平台的规范（抽象）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　1.3 多个跨平台、跨语言的应用间通信整合的方案（实际）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;2、为什么要用 Web service？&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　web service能解决：跨平台调用 跨语言调用  远程调用&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;3、什么时候使用web Service?&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　3.1. 同一家公司的新旧应用之间&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　3.2. 不同公司的应用之间&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　3.3. 一些提供数据的内容聚合应用：天气预报、股票行情&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;4、Web Service中的几个重要术语&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;       4.1、WSDL(web service definition language)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　WSDL是webservice定义语言, 对应.wsdl文档, 一个webservice会对应一个唯一的wsdl文档, 定义了客户端与服务端发送请求和响应的数据格式和过程&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;       4.2、SOAP(simple object  access protocal)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　SOAP是&quot;简单对象访问协议&quot;&lt;/span&gt;&lt;span&gt;是一种简单的、基于HTTP和XML的协议, 用于在WEB上交换结构化的数据&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;       soap消息：请求消息和响应消息&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;       4.3、SEI(WebService EndPoint Interface)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　SEI是web service的终端接口，就是WebService服务器端用来处理请求的接口&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;       4.4、CXF(Celtix + XFire)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　一个apache的用于开发webservice服务器端和客户端的框架。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;五、WebService实战&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;1.使用CXF开发WebService服务器端接口&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;CXF主页：http://cxf.apache.org/&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;1.1首先建一个Maven的j2se项目；项目的jre用1.7，因为1.7有webservice的默认实现。不要用1.5 不然下面你用我的代码会有问题，用1.5的话，还需要另外加jar包。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/401339/201711/401339-20171119223749984-1888853909.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;根据规范，我们先建一个接口类：HelloWorld&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.pony1223.wsservice;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; javax.jws.WebService;


@WebService
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt;&lt;span&gt; HelloWorld 
{
     String say(String str);
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;再建一个具体的实现类：HelloWorldImpl&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.pony1223.wsservice.impl;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; javax.jws.WebService;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.pony1223.wsservice.HelloWorld;

@WebService
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; HelloWorldImpl &lt;span&gt;implements&lt;/span&gt;&lt;span&gt; HelloWorld {

    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String say(String str) {
         &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &quot;Hello &quot;+&lt;span&gt;str;
    }

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;最后建一个发布服务的主类：Server&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.pony1223.test;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; javax.xml.ws.Endpoint;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.pony1223.wsservice.HelloWorld;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.pony1223.wsservice.impl.HelloWorldImpl;

&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Server 
{
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
        System.out.println(&lt;/span&gt;&quot;start......&quot;&lt;span&gt;);
        HelloWorld hw &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; HelloWorldImpl();
        String address &lt;/span&gt;= &quot;http://192.168.31.151:1122/helloworld&quot;&lt;span&gt;;
        Endpoint.publish(address, hw);
        System.out.println(&lt;/span&gt;&quot;started......&quot;&lt;span&gt;);
    }

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;这里的Endpoint是Jdk自身实现的WebService。所以到这里我们不需要用到CXF的任何东西。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;这里的address，写上自己的本机IP&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;我们运行下Server类：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;运行效果如下：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/401339/201711/401339-20171119224828952-1994246358.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;服务已发布成功。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;下面我们介绍使用CXF来实现webservice接口：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;我们先在pom.xml中加入：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.apache.cxf&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;cxf-core&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;3.1.5&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
     
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.apache.cxf&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;cxf-rt-frontend-jaxws&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;3.1.5&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
     
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.apache.cxf&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;cxf-rt-transports-http-jetty&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;3.1.5&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;这里要额外加入jetty，作为webservice发布的服务器。jetty是一个内嵌的web服务器&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;我们把Server改下。换成CXF实现：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.cxf.jaxws.JaxWsServerFactoryBean;
 
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.java1234.webservice.impl.HelloWorldImpl;
 
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Server {
 
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
        System.out.println(&lt;/span&gt;&quot;web service start&quot;&lt;span&gt;);  
        HelloWorld implementor &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; HelloWorldImpl();  
        String address &lt;/span&gt;= &quot;http://192.168.1.103/helloWorld&quot;&lt;span&gt;;  
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Endpoint.publish(address, implementor);  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; JDK实现&lt;/span&gt;
        JaxWsServerFactoryBean factoryBean = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; JaxWsServerFactoryBean();
        factoryBean.setAddress(address); &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 设置暴露地址&lt;/span&gt;
        factoryBean.setServiceClass(HelloWorld.&lt;span&gt;class&lt;/span&gt;); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 接口类&lt;/span&gt;
        factoryBean.setServiceBean(implementor); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 设置实现类&lt;/span&gt;
&lt;span&gt;        factoryBean.create();      
        System.out.println(&lt;/span&gt;&quot;web service started&quot;&lt;span&gt;);  
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;运行效果和刚才一样&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;2.使用CXF开发WebService客户端&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;前面一讲开发了webservice服务器端接口，今天的话，我们来开发webservice客户端，让大家来体验下过程；&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;首先建一个Maven项目，项目名字，WS_Client；&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/401339/201711/401339-20171119225544031-271329258.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;然后我们要用CXF给我们提供的工具wsdl2java 来根据请求的url生成客户端代码；&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;wsdl2java工具在CXF开发包里；开发下载地址：&lt;a title=&quot;http://cxf.apache.org/download.html&quot; href=&quot;http://cxf.apache.org/download.html&quot; target=&quot;_blank&quot;&gt;http://cxf.apache.org/download.html&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;下载二进制包，然后解压到D盘 ，wsdl2java命令；当然要用的话，还得配置Path。我们打开环境变量配置，加入路径 D:\apache-cxf-3.1.5\bin  可能你的和我不一样；&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/401339/201711/401339-20171119225740515-318294629.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;现在我们要干的事是在我们项目里生成我们需要的webservice客户端代码，&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;我们找到项目的本地路径，&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/401339/201711/401339-20171119225830874-336129194.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;然后我们进入dos，进入上面的本地硬盘地址，然后执行命令：wsdl2java &lt;a href=&quot;http://192.168.1.103/helloWorld?wsdl&quot;&gt;http://192.168.1.103/helloWorld?wsdl&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;这样就完成了代码的生成，我们刷新下工程：最关键的代码是HelloWorldService.java 我们下面写请求主类要用到；&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;我们下面写下主类 Client ，自己建下：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Client {
 
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
        HelloWorldService service&lt;/span&gt;=&lt;span&gt;new&lt;/span&gt;&lt;span&gt; HelloWorldService();
        HelloWorld helloWorld&lt;/span&gt;=&lt;span&gt;service.getHelloWorldPort();
        System.out.println(helloWorld.say(&lt;/span&gt;&quot;java&quot;&lt;span&gt;));
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;运行后即可调用服务端代码。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;3.CXF处理JavaBean以及复合类型&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;前面讲的是处理简单类型，今天这里来讲下CXF处理JavaBean以及复合类型，比如集合；&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;这里实例是客户端传一个JavaBean，服务器端返回集合类型；&lt;br/&gt;在原来的项目实例基础上，我们先创建一个实体类User:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * 用户实体类
 * &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; Administrator
 *
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; User {
 
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; Integer id; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 编号&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; String userName; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 用户名&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; String password; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 密码&lt;/span&gt;
     
    &lt;span&gt;public&lt;/span&gt;&lt;span&gt; Integer getId() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; id;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setId(Integer id) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.id =&lt;span&gt; id;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getUserName() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; userName;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setUserName(String userName) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.userName =&lt;span&gt; userName;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getPassword() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; password;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setPassword(String password) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.password =&lt;span&gt; password;
    }
     
     
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;再创建一个Role实体类：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * 角色实体
 * &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; Administrator
 *
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Role {
 
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; Integer id; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 编号&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; String roleName; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 角色名称&lt;/span&gt;
     
     
     
    &lt;span&gt;public&lt;/span&gt;&lt;span&gt; Role() {
        &lt;/span&gt;&lt;span&gt;super&lt;/span&gt;&lt;span&gt;();
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; TODO Auto-generated constructor stub&lt;/span&gt;
&lt;span&gt;    }
     
     
     
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; Role(Integer id, String roleName) {
        &lt;/span&gt;&lt;span&gt;super&lt;/span&gt;&lt;span&gt;();
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.id =&lt;span&gt; id;
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.roleName =&lt;span&gt; roleName;
    }
 
 
 
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; Integer getId() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; id;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setId(Integer id) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.id =&lt;span&gt; id;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getRoleName() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; roleName;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setRoleName(String roleName) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.roleName =&lt;span&gt; roleName;
    }
     
     
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;然后HelloWorld再加一个接口方法getRoleByUser，通过用户查找角色：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.List;
 
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; javax.jws.WebService;
 
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.java1234.entity.Role;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.java1234.entity.User;
 
@WebService
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt;&lt;span&gt; HelloWorld {
 
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String say(String str);
     
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; List&amp;lt;Role&amp;gt;&lt;span&gt; getRoleByUser(User user);
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;然后HelloWorld接口实现类 HelloWorldImpl写下新增的方法的具体实现，我们这里写死，模拟下即可：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.ArrayList;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.List;
 
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; javax.jws.WebService;
 
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.java1234.entity.Role;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.java1234.entity.User;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.java1234.webservice.HelloWorld;
 
@WebService
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; HelloWorldImpl &lt;span&gt;implements&lt;/span&gt;&lt;span&gt; HelloWorld{
 
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String say(String str) {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &quot;Hello &quot;+&lt;span&gt;str;
    }
 
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; List&amp;lt;Role&amp;gt;&lt;span&gt; getRoleByUser(User user) {
        List&lt;/span&gt;&amp;lt;Role&amp;gt; roleList=&lt;span&gt;new&lt;/span&gt; ArrayList&amp;lt;Role&amp;gt;&lt;span&gt;();
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 模拟 直接写死&lt;/span&gt;
        &lt;span&gt;if&lt;/span&gt;(user!=&lt;span&gt;null&lt;/span&gt;&lt;span&gt;){
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(user.getUserName().equals(&quot;java1234&quot;) &amp;amp;&amp;amp; user.getPassword().equals(&quot;123456&quot;&lt;span&gt;)){
                roleList.add(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt; Role(1,&quot;技术总监&quot;&lt;span&gt;));
                roleList.add(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt; Role(2,&quot;架构师&quot;&lt;span&gt;));
            }&lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;(user.getUserName().equals(&quot;jack&quot;) &amp;amp;&amp;amp; user.getPassword().equals(&quot;123456&quot;&lt;span&gt;)){
                roleList.add(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt; Role(3,&quot;程序员&quot;&lt;span&gt;));
            }
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; roleList;
        }&lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;{
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;          
        }
         
    }
     
     
 
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;服务端其他地方不用动；客户端代码从新生成。改下Client类：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.List;
 
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Client {
 
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
        HelloWorldService service&lt;/span&gt;=&lt;span&gt;new&lt;/span&gt;&lt;span&gt; HelloWorldService();
        HelloWorld helloWorld&lt;/span&gt;=&lt;span&gt;service.getHelloWorldPort();
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;System.out.println(helloWorld.say(&quot;java1234&quot;));&lt;/span&gt;
        User user=&lt;span&gt;new&lt;/span&gt;&lt;span&gt; User();
        user.setUserName(&lt;/span&gt;&quot;jack&quot;&lt;span&gt;);
        user.setPassword(&lt;/span&gt;&quot;123456&quot;&lt;span&gt;);
        List&lt;/span&gt;&amp;lt;Role&amp;gt; roleList=&lt;span&gt;helloWorld.getRoleByUser(user);
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt;(Role role:roleList){
            System.out.println(role.getId()&lt;/span&gt;+&quot;,&quot;+&lt;span&gt;role.getRoleName());
        }
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;运行截图：&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/401339/201711/401339-20171119230924671-526826369.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;4.CXF处理一些Map等复杂类型&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;前面讲的一些都是简单类型,cxf都支持。但是有些复杂类型，cxf是不支持，比如常用的Map类型；&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;下面我们在前面的实例基础上在加一个方法，比如我们现在有个需求，获取所有用用户以及对应的每个用户所有角色信息；&lt;br/&gt;服务器端：&lt;br/&gt;HelloWorld接口加方法：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 获取所有用户以及对应的角色
     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;
     &lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; Map&amp;lt;String,List&amp;lt;Role&amp;gt;&amp;gt; getRoles();
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;HelloWorldImpl实现类加方法实现：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; Map&amp;lt;String, List&amp;lt;Role&amp;gt;&amp;gt;&lt;span&gt; getRoles() {
        Map&lt;/span&gt;&amp;lt;String,List&amp;lt;Role&amp;gt;&amp;gt; map=&lt;span&gt;new&lt;/span&gt; HashMap&amp;lt;String,List&amp;lt;Role&amp;gt;&amp;gt;&lt;span&gt;();
        List&lt;/span&gt;&amp;lt;Role&amp;gt; roleList1=&lt;span&gt;new&lt;/span&gt; ArrayList&amp;lt;Role&amp;gt;&lt;span&gt;();
        roleList1.add(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt; Role(1,&quot;技术总监&quot;&lt;span&gt;));
        roleList1.add(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt; Role(2,&quot;架构师&quot;&lt;span&gt;));
        map.put(&lt;/span&gt;&quot;java1234&quot;&lt;span&gt;, roleList1);
        List&lt;/span&gt;&amp;lt;Role&amp;gt; roleList2=&lt;span&gt;new&lt;/span&gt; ArrayList&amp;lt;Role&amp;gt;&lt;span&gt;();
        roleList2.add(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt; Role(1,&quot;程序员&quot;&lt;span&gt;));
        map.put(&lt;/span&gt;&quot;jack&quot;&lt;span&gt;, roleList2);
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; map;
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;然后我们启动Server类：发现报错：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/401339/201711/401339-20171119231253812-1706289842.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;这个报错信息说，不支持该类型；&lt;/span&gt;&lt;br/&gt;&lt;span&gt;这里我们有好几种解决方案，这里我们用最常用的一种，使用适配器，把cxf不能接受的类型通过适配器，转能接受的类型。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;我们使用@XmlJavaTypeAdapter注解，加在接口定义上，完整接口代码如下：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;
 
@WebService
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt;&lt;span&gt; HelloWorld {
 
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String say(String str);
     
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; List&amp;lt;Role&amp;gt;&lt;span&gt; getRoleByUser(User user);
     
    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 获取所有用户以及对应的角色
     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;
     &lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    @XmlJavaTypeAdapter(MapAdapter.&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; Map&amp;lt;String,List&amp;lt;Role&amp;gt;&amp;gt;&lt;span&gt; getRoles();
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;这里参数需要一个实现了XmlAdapter类的适配器类；&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;44&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * Map适配器
 * &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; Administrator
 *
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; MapAdapter &lt;span&gt;extends&lt;/span&gt; XmlAdapter&amp;lt;MyRole[], Map&amp;lt;String,List&amp;lt;Role&amp;gt;&amp;gt;&amp;gt;&lt;span&gt;{
 
    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 适配转换  MyRole[] -&amp;gt; Map&amp;lt;String, List&amp;lt;Role&amp;gt;&amp;gt;
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; Map&amp;lt;String, List&amp;lt;Role&amp;gt;&amp;gt; unmarshal(MyRole[] v) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
        Map&lt;/span&gt;&amp;lt;String, List&amp;lt;Role&amp;gt;&amp;gt; map=&lt;span&gt;new&lt;/span&gt; HashMap&amp;lt;String,List&amp;lt;Role&amp;gt;&amp;gt;&lt;span&gt;();
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; i=0;i&amp;lt;v.length;i++&lt;span&gt;){
            MyRole r&lt;/span&gt;=&lt;span&gt;v[i];
            map.put(r.getKey(), r.getValue());
        }
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; map;
    }
 
    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 适配转换  Map&amp;lt;String, List&amp;lt;Role&amp;gt;&amp;gt; -&amp;gt; MyRole[]
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; MyRole[] marshal(Map&amp;lt;String, List&amp;lt;Role&amp;gt;&amp;gt; v) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
        MyRole[] roles&lt;/span&gt;=&lt;span&gt;new&lt;/span&gt;&lt;span&gt; MyRole[v.size()];
        &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; i=0&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt;(String key:v.keySet()){
            roles[i]&lt;/span&gt;=&lt;span&gt;new&lt;/span&gt;&lt;span&gt; MyRole();
            roles[i].setKey(key);
            roles[i].setValue(v.get(key));
            i&lt;/span&gt;++&lt;span&gt;;
        }
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; roles;
    }
 
     
     
 
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;这里的话XmlAdapter要加两个参数，XmlAdapter&amp;lt;ValueType,BoundType&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span&gt;ValueType是cxf能接收的类型，这里我用了数组；&lt;/span&gt;&lt;br/&gt;&lt;span&gt;BoundType是cxf不能接受的类型，也就是我例子里的需求的Map类型；&lt;/span&gt;&lt;br/&gt;&lt;span&gt;这里大家会看到，还有一个MyRole自定义类型，key:value。我们搞成两个属性，具体实现如下：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * 自定义实体 cxf能接受
 * &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; Administrator
 *
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; MyRole {
 
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String key;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; List&amp;lt;Role&amp;gt;&lt;span&gt; value;
     
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getKey() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; key;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setKey(String key) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.key =&lt;span&gt; key;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; List&amp;lt;Role&amp;gt;&lt;span&gt; getValue() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; value;
    }
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; setValue(List&amp;lt;Role&amp;gt;&lt;span&gt; value) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.value =&lt;span&gt; value;
    }
     
     
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;OK 这样就行了。我们运行Server类，发布webservice接口：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/401339/201711/401339-20171119231606609-1729738289.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;然后就到了webservice客户端，我们用wsdl2java工具生成下最新代码，具体过程前面讲过，这里不重复讲：修改下Client类：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Client {
 
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
        HelloWorldService service&lt;/span&gt;=&lt;span&gt;new&lt;/span&gt;&lt;span&gt; HelloWorldService();
        HelloWorld helloWorld&lt;/span&gt;=&lt;span&gt;service.getHelloWorldPort();
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;System.out.println(helloWorld.say(&quot;java1234&quot;));&lt;/span&gt;
        &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;User user=new User();
        user.setUserName(&quot;jack&quot;);
        user.setPassword(&quot;123456&quot;);
        List&amp;lt;Role&amp;gt; roleList=helloWorld.getRoleByUser(user);
        for(Role role:roleList){
            System.out.println(role.getId()+&quot;,&quot;+role.getRoleName());
        }&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
        MyRoleArray array&lt;/span&gt;=&lt;span&gt;helloWorld.getRoles();
        List&lt;/span&gt;&amp;lt;MyRole&amp;gt; roleList=&lt;span&gt;array.item;
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; i=0;i&amp;lt;roleList.size();i++&lt;span&gt;){
            MyRole my&lt;/span&gt;=&lt;span&gt;roleList.get(i);
            System.out.print(my.key&lt;/span&gt;+&quot;:&quot;&lt;span&gt;);
            &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt;(Role r:my.value){
                System.out.print(r.getId()&lt;/span&gt;+&quot;,&quot;+r.getRoleName()+&quot; &quot;&lt;span&gt;);
            }
            System.out.println();
        }
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;运行效果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/401339/201711/401339-20171119231726671-436811052.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;5.CXF添加拦截器&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;今天开始讲下拦截器，前面大家学过servlet，struts2 都有拦截器概念，主要作用是做一些权限过滤，编码处理等；&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;webservice也可以加上拦截器，我们可以给webservice请求加权限判断功能；&lt;/span&gt;&lt;br/&gt;&lt;span&gt;webservice分服务端和客户端，服务端和客户端都是可以加拦截器的，无论是服务端还是客户端，都分进，出（In，Out）拦截器；&lt;/span&gt;&lt;br/&gt;&lt;span&gt;我们先来改下服务端的Server类：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.cxf.interceptor.LoggingInInterceptor;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.cxf.interceptor.LoggingOutInterceptor;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.cxf.jaxws.JaxWsServerFactoryBean;
 
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.java1234.webservice.impl.HelloWorldImpl;
 
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Server {
 
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
        System.out.println(&lt;/span&gt;&quot;web service start&quot;&lt;span&gt;);  
        HelloWorld implementor &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; HelloWorldImpl();  
        String address &lt;/span&gt;= &quot;http://192.168.1.103/helloWorld&quot;&lt;span&gt;;  
        JaxWsServerFactoryBean factoryBean &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; JaxWsServerFactoryBean();
        factoryBean.setAddress(address); &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 设置暴露地址&lt;/span&gt;
        factoryBean.setServiceClass(HelloWorld.&lt;span&gt;class&lt;/span&gt;); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 接口类&lt;/span&gt;
        factoryBean.setServiceBean(implementor); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 设置实现类&lt;/span&gt;
        factoryBean.getInInterceptors().add(&lt;span&gt;new&lt;/span&gt; LoggingInInterceptor()); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 添加in拦截器 日志拦截器&lt;/span&gt;
        factoryBean.getOutInterceptors().add(&lt;span&gt;new&lt;/span&gt; LoggingOutInterceptor()); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 添加out拦截器&lt;/span&gt;
&lt;span&gt;        factoryBean.create();      
        System.out.println(&lt;/span&gt;&quot;web service started&quot;&lt;span&gt;);  
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;这里的话，我们通过factoryBean对象可以获取拦截器组，添加进或者出拦截器，这里有个经典的拦截器，我们开发的时候经常用，就是日志拦截器，&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;我们可以把客户端的请求，以及服务端返回的信息打印出来，可以打印控制台，也可以打印到执行文件；这里为了演示方便，直接搞无参的拦截器，&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;打印到控制台； &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;无论是自定义的拦截器，还是CXF自带的拦截器，都必须实现Interceptor接口。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;同理，我们在客户端也可以加进出拦截器，修改Client代码：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.List;
 
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.cxf.frontend.ClientProxy;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.cxf.interceptor.LoggingInInterceptor;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.cxf.interceptor.LoggingOutInterceptor;
 
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Client {
 
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
        HelloWorldService service&lt;/span&gt;=&lt;span&gt;new&lt;/span&gt;&lt;span&gt; HelloWorldService();
        HelloWorld helloWorld&lt;/span&gt;=&lt;span&gt;service.getHelloWorldPort();
        org.apache.cxf.endpoint.Client client&lt;/span&gt;=&lt;span&gt;ClientProxy.getClient(helloWorld);
        client.getInInterceptors().add(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt; LoggingInInterceptor()); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 添加in拦截器 日志拦截器&lt;/span&gt;
        client.getOutInterceptors().add(&lt;span&gt;new&lt;/span&gt; LoggingOutInterceptor()); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 添加out拦截器
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;System.out.println(helloWorld.say(&quot;java1234&quot;));&lt;/span&gt;
        &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;User user=new User();
        user.setUserName(&quot;jack&quot;);
        user.setPassword(&quot;123456&quot;);
        List&amp;lt;Role&amp;gt; roleList=helloWorld.getRoleByUser(user);
        for(Role role:roleList){
            System.out.println(role.getId()+&quot;,&quot;+role.getRoleName());
        }&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
        MyRoleArray array&lt;/span&gt;=&lt;span&gt;helloWorld.getRoles();
        List&lt;/span&gt;&amp;lt;MyRole&amp;gt; roleList=&lt;span&gt;array.item;
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; i=0;i&amp;lt;roleList.size();i++&lt;span&gt;){
            MyRole my&lt;/span&gt;=&lt;span&gt;roleList.get(i);
            System.out.print(my.key&lt;/span&gt;+&quot;:&quot;&lt;span&gt;);
            &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt;(Role r:my.value){
                System.out.print(r.getId()&lt;/span&gt;+&quot;,&quot;+r.getRoleName()+&quot; &quot;&lt;span&gt;);
            }
            System.out.println();
        }
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这里的话，我们用到了ClientProxy，客户端代理。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;6.CXF添加自定义拦截器&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;前面我们说到CXF添加内置的拦截器，今天的话，我们来讲下如何添加自定义拦截器；&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;我们的实例是客户端访问服务端webservice接口要加权限认证。&lt;/span&gt;&lt;br/&gt;&lt;span&gt;我们思路先说下。我们可以通过在SOAP消息的Header头信息中添加自定义信息，然后发送到服务端端，服务器端通过获取&lt;/span&gt;&lt;br/&gt;&lt;span&gt;Header头消息，然后进行认证；这里的添加消息，和获取消息认证，我们都是通过自定义拦截器来实现；&lt;/span&gt;&lt;br/&gt;&lt;span&gt;OK下面我们来实现下：&lt;/span&gt;&lt;br/&gt;&lt;span&gt;首先是服务器端：&lt;/span&gt;&lt;br/&gt;&lt;span&gt;我们自定义拦截器：MyInterceptor&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * 自定义拦截器
 * &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; Administrator
 *
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; MyInterceptor &lt;span&gt;extends&lt;/span&gt; AbstractPhaseInterceptor&amp;lt;SoapMessage&amp;gt;&lt;span&gt;{
 
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; MyInterceptor(){
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 在调用方法之前调用拦截器&lt;/span&gt;
        &lt;span&gt;super&lt;/span&gt;&lt;span&gt;(Phase.PRE_INVOKE);
    }
 
    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 拦截获取消息
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; handleMessage(SoapMessage message) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Fault {
        List&lt;/span&gt;&amp;lt;Header&amp;gt; headers=&lt;span&gt;message.getHeaders();
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(headers==&lt;span&gt;null&lt;/span&gt; || headers.size()==0&lt;span&gt;){
            &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; Fault(&lt;span&gt;new&lt;/span&gt; IllegalArgumentException(&quot;没有Header,拦截器实施拦截&quot;&lt;span&gt;));
        }
        Header firstHeader&lt;/span&gt;=headers.get(0&lt;span&gt;);
        Element ele&lt;/span&gt;=&lt;span&gt;(Element) firstHeader.getObject();
        NodeList userIds&lt;/span&gt;=ele.getElementsByTagName(&quot;userName&quot;&lt;span&gt;);
        NodeList userPasses&lt;/span&gt;=ele.getElementsByTagName(&quot;password&quot;&lt;span&gt;);
         
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(userIds.getLength()!=1&lt;span&gt;){
            &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; Fault(&lt;span&gt;new&lt;/span&gt; IllegalArgumentException(&quot;用户名格式不对&quot;&lt;span&gt;));
        }
         
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(userPasses.getLength()!=1&lt;span&gt;){
            &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; Fault(&lt;span&gt;new&lt;/span&gt; IllegalArgumentException(&quot;密码格式不对&quot;&lt;span&gt;));
        }
         
        String userId&lt;/span&gt;=userIds.item(0&lt;span&gt;).getTextContent();
        String userPass&lt;/span&gt;=userPasses.item(0&lt;span&gt;).getTextContent();
         
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(!userId.equals(&quot;java1234&quot;) || ! userPass.equals(&quot;123456&quot;&lt;span&gt;)){
            &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; Fault(&lt;span&gt;new&lt;/span&gt; IllegalArgumentException(&quot;用户名或者密码不正确&quot;&lt;span&gt;));
        }
         
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;这里的话，我们主要是获取Header头消息，然后获取userName和password节点，然后获取值，进行权限判断，假如认证不通过，我们抛出异常；&lt;/span&gt;&lt;br/&gt;&lt;span&gt;在Server类里，我们要添加一个in 拦截器，在进入的时候，我们要进行验证；&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Server {
 
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
        System.out.println(&lt;/span&gt;&quot;web service start&quot;&lt;span&gt;);  
        HelloWorld implementor &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; HelloWorldImpl();  
        String address &lt;/span&gt;= &quot;http://10.10.7.18/helloWorld&quot;&lt;span&gt;;  
        JaxWsServerFactoryBean factoryBean &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; JaxWsServerFactoryBean();
        factoryBean.setAddress(address); &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 设置暴露地址&lt;/span&gt;
        factoryBean.setServiceClass(HelloWorld.&lt;span&gt;class&lt;/span&gt;); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 接口类&lt;/span&gt;
        factoryBean.setServiceBean(implementor); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 设置实现类&lt;/span&gt;
        factoryBean.getInInterceptors().add(&lt;span&gt;new&lt;/span&gt; LoggingInInterceptor()); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 添加in拦截器 日志拦截器&lt;/span&gt;
        factoryBean.getOutInterceptors().add(&lt;span&gt;new&lt;/span&gt; LoggingOutInterceptor()); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 添加out拦截器&lt;/span&gt;
&lt;span&gt;         
        factoryBean.getInInterceptors().add(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt; MyInterceptor()); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 添加自定义拦截器&lt;/span&gt;
&lt;span&gt;        factoryBean.create();      
        System.out.println(&lt;/span&gt;&quot;web service started&quot;&lt;span&gt;);  
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;接下来是修改客户端代码：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;我们同样要添加一个自定义拦截器：AddHeaderInterceptor&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; AddHeaderInterceptor &lt;span&gt;extends&lt;/span&gt; AbstractPhaseInterceptor&amp;lt;SoapMessage&amp;gt;&lt;span&gt; {
 
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String userName;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String password;
 
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; AddHeaderInterceptor(String userName, String password) {
        &lt;/span&gt;&lt;span&gt;super&lt;/span&gt;(Phase.PREPARE_SEND); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 发送SOAP消息之前调用拦截器&lt;/span&gt;
        &lt;span&gt;this&lt;/span&gt;.userName=&lt;span&gt;userName;
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.password=&lt;span&gt;password;
    }
 
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; handleMessage(SoapMessage message) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Fault {
        List&lt;/span&gt;&amp;lt;Header&amp;gt; headers=&lt;span&gt;message.getHeaders();
         
        Document doc&lt;/span&gt;=&lt;span&gt;DOMUtils.createDocument();
        Element ele&lt;/span&gt;=doc.createElement(&quot;authHeader&quot;&lt;span&gt;);
        Element idElement&lt;/span&gt;=doc.createElement(&quot;userName&quot;&lt;span&gt;);
        idElement.setTextContent(userName);
        Element passElement&lt;/span&gt;=doc.createElement(&quot;password&quot;&lt;span&gt;);
        passElement.setTextContent(password);
         
        ele.appendChild(idElement);
        ele.appendChild(passElement);
         
        headers.add(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt; Header(&lt;span&gt;new&lt;/span&gt; QName(&quot;java1234&quot;&lt;span&gt;),ele));
         
         
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;这里的话，我们主要是在拦截器里创建头消息；&lt;/span&gt;&lt;br/&gt;&lt;span&gt;Client类里我们要修改下，加下Out 拦截器：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Client {
 
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
        HelloWorldService service&lt;/span&gt;=&lt;span&gt;new&lt;/span&gt;&lt;span&gt; HelloWorldService();
        HelloWorld helloWorld&lt;/span&gt;=&lt;span&gt;service.getHelloWorldPort();
        org.apache.cxf.endpoint.Client client&lt;/span&gt;=&lt;span&gt;ClientProxy.getClient(helloWorld);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; client.getInInterceptors().add(new LoggingInInterceptor()); &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 添加in拦截器 日志拦截器&lt;/span&gt;
        client.getOutInterceptors().add(&lt;span&gt;new&lt;/span&gt; AddHeaderInterceptor(&quot;java1234&quot;,&quot;123456&quot;)); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 添加自定义拦截器&lt;/span&gt;
        client.getOutInterceptors().add(&lt;span&gt;new&lt;/span&gt; LoggingOutInterceptor()); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 添加out拦截器
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;System.out.println(helloWorld.say(&quot;java1234&quot;));&lt;/span&gt;
        &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;User user=new User();
        user.setUserName(&quot;jack&quot;);
        user.setPassword(&quot;123456&quot;);
        List&amp;lt;Role&amp;gt; roleList=helloWorld.getRoleByUser(user);
        for(Role role:roleList){
            System.out.println(role.getId()+&quot;,&quot;+role.getRoleName());
        }&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
        MyRoleArray array&lt;/span&gt;=&lt;span&gt;helloWorld.getRoles();
        List&lt;/span&gt;&amp;lt;MyRole&amp;gt; roleList=&lt;span&gt;array.item;
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; i=0;i&amp;lt;roleList.size();i++&lt;span&gt;){
            MyRole my&lt;/span&gt;=&lt;span&gt;roleList.get(i);
            System.out.print(my.key&lt;/span&gt;+&quot;:&quot;&lt;span&gt;);
            &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt;(Role r:my.value){
                System.out.print(r.getId()&lt;/span&gt;+&quot;,&quot;+r.getRoleName()+&quot; &quot;&lt;span&gt;);
            }
            System.out.println();
        }
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;7.Spring整合CXF之发布WebService服务&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;今天我们来讲下如何用Spring来整合CXF，来发布WebService服务；&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;给下官方文档地址：http://cxf.apache.org/docs/writing-a-service-with-spring.html&lt;/span&gt;&lt;br/&gt;&lt;span&gt;根据官方文档。我们把前面的实例用Spring整合CXF来处理下。会简化很多；&lt;/span&gt;&lt;br/&gt;&lt;span&gt;首先我们来建一个Maven项目 WebService_CXF&lt;/span&gt;&lt;br/&gt;&lt;span&gt;建好项目第一步，我们打开pom.xml&lt;/span&gt;&lt;br/&gt;&lt;span&gt;我们来添加下Spring支持：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 添加Spring支持 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-core&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;4.1.7.RELEASE&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-beans&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;4.1.7.RELEASE&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-tx&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;4.1.7.RELEASE&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-context&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;4.1.7.RELEASE&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-context-support&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;4.1.7.RELEASE&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
 
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-web&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;4.1.7.RELEASE&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
 
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-webmvc&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;4.1.7.RELEASE&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
 
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-aop&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;4.1.7.RELEASE&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
 
 
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-aspects&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;4.1.7.RELEASE&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
 
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-jdbc&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;4.1.7.RELEASE&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;


接下来添加下CXF支持：

&lt;/span&gt;&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 添加cxf支持  &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.apache.cxf&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;cxf-core&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;3.1.5&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
 
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.apache.cxf&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;cxf-rt-frontend-jaxws&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;3.1.5&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
 
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.apache.cxf&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;cxf-rt-transports-http&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;3.1.5&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;我们在项目里添加下 applicationContext.xml spring配置文件 我们要额外添加下命名路径，因为我们要用新的标签；&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;beans &lt;/span&gt;&lt;span&gt;xmlns&lt;/span&gt;&lt;span&gt;=&quot;http://www.springframework.org/schema/beans&quot;&lt;/span&gt;&lt;span&gt;    
    xmlns:xsi&lt;/span&gt;&lt;span&gt;=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt;&lt;span&gt;   
    xmlns:p&lt;/span&gt;&lt;span&gt;=&quot;http://www.springframework.org/schema/p&quot;&lt;/span&gt;&lt;span&gt;  
    xmlns:aop&lt;/span&gt;&lt;span&gt;=&quot;http://www.springframework.org/schema/aop&quot;&lt;/span&gt;&lt;span&gt;   
    xmlns:context&lt;/span&gt;&lt;span&gt;=&quot;http://www.springframework.org/schema/context&quot;&lt;/span&gt;&lt;span&gt;  
    xmlns:jee&lt;/span&gt;&lt;span&gt;=&quot;http://www.springframework.org/schema/jee&quot;&lt;/span&gt;&lt;span&gt;  
    xmlns:tx&lt;/span&gt;&lt;span&gt;=&quot;http://www.springframework.org/schema/tx&quot;&lt;/span&gt;&lt;span&gt;  
    xmlns:jaxws&lt;/span&gt;&lt;span&gt;=&quot;http://cxf.apache.org/jaxws&quot;&lt;/span&gt;&lt;span&gt;
    xsi:schemaLocation&lt;/span&gt;&lt;span&gt;=&quot;    
        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd  
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd  
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd  
        http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-4.0.xsd  
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
        http://cxf.apache.org/jaxws http://cxf.apache.org/schemas/jaxws.xsd&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这里的我是参考官方文档上，添加了 jaxws支持。。大家直接贴下即可；&lt;/p&gt;
&lt;p&gt;然后我们再导入下cxf里的一些bean配置，参考官方文档：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;import &lt;/span&gt;&lt;span&gt;resource&lt;/span&gt;&lt;span&gt;=&quot;classpath:META-INF/cxf/cxf.xml&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;import &lt;/span&gt;&lt;span&gt;resource&lt;/span&gt;&lt;span&gt;=&quot;classpath:META-INF/cxf/cxf-servlet.xml&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;这里的HelloWorldImpl类上，我们加一个 @Component(&quot;helloWorld&quot;)  &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Spring配置文件里，我加下扫描：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 自动扫描 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;context:component-scan &lt;/span&gt;&lt;span&gt;base-package&lt;/span&gt;&lt;span&gt;=&quot;com.java1234.webservice&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;前面搞完后，我们在处理下web.xml文件 首先启动的时候，必须加载Spring：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; Spring配置文件 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;context-param&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;param-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;contextConfigLocation&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;param-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;param-value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;classpath:applicationContext.xml&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;param-value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;context-param&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
 
&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; Spring监听器 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;listener&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;listener-class&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.web.context.ContextLoaderListener&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;listener-class&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;listener&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;然后我们要定义一个Servlet，主要是处理WebService请求：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&amp;lt;servlet&amp;gt;  
 &amp;lt;servlet-name&amp;gt;CXFServlet&amp;lt;/servlet-name&amp;gt;  
 &amp;lt;servlet-&lt;span&gt;class&lt;/span&gt;&amp;gt;org.apache.cxf.transport.servlet.CXFServlet&amp;lt;/servlet-&lt;span&gt;class&lt;/span&gt;&amp;gt;  
&amp;lt;/servlet&amp;gt;  
 
&amp;lt;servlet-mapping&amp;gt;  
   &amp;lt;servlet-name&amp;gt;CXFServlet&amp;lt;/servlet-name&amp;gt;  
   &amp;lt;url-pattern&amp;gt;/webservice&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;&amp;lt;/url-pattern&amp;gt;  
&amp;lt;/servlet-mapping&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;这里的话，我们所有的 /webservice请求，都交给CXFServlet类处理；&lt;/span&gt;&lt;br/&gt;&lt;span&gt;最后一步，我们在Spring配置文件里，定义下webservice接口发布：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&amp;lt;!-- 定义服务提供者  --&amp;gt;
&amp;lt;&lt;span&gt;jaxws:endpoint
    implementor&lt;/span&gt;=&quot;#helloWorld&quot;&lt;span&gt;
    address&lt;/span&gt;=&quot;/HelloWorld&quot;
 &amp;gt;&amp;lt;/jaxws:endpoint&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;这里implementor指定webservice接口实现类&lt;/span&gt;&lt;br/&gt;&lt;span&gt;address是具体的接口路径&lt;/span&gt;&lt;br/&gt;&lt;span&gt;最终完整的applicationContext.xml配置文件如下&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;?&lt;/span&gt;&lt;span&gt;xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;?&amp;gt;&lt;/span&gt;    
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;beans &lt;/span&gt;&lt;span&gt;xmlns&lt;/span&gt;&lt;span&gt;=&quot;http://www.springframework.org/schema/beans&quot;&lt;/span&gt;&lt;span&gt;    
    xmlns:xsi&lt;/span&gt;&lt;span&gt;=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt;&lt;span&gt;   
    xmlns:p&lt;/span&gt;&lt;span&gt;=&quot;http://www.springframework.org/schema/p&quot;&lt;/span&gt;&lt;span&gt;  
    xmlns:aop&lt;/span&gt;&lt;span&gt;=&quot;http://www.springframework.org/schema/aop&quot;&lt;/span&gt;&lt;span&gt;   
    xmlns:context&lt;/span&gt;&lt;span&gt;=&quot;http://www.springframework.org/schema/context&quot;&lt;/span&gt;&lt;span&gt;  
    xmlns:jee&lt;/span&gt;&lt;span&gt;=&quot;http://www.springframework.org/schema/jee&quot;&lt;/span&gt;&lt;span&gt;  
    xmlns:tx&lt;/span&gt;&lt;span&gt;=&quot;http://www.springframework.org/schema/tx&quot;&lt;/span&gt;&lt;span&gt;  
    xmlns:jaxws&lt;/span&gt;&lt;span&gt;=&quot;http://cxf.apache.org/jaxws&quot;&lt;/span&gt;&lt;span&gt;
    xsi:schemaLocation&lt;/span&gt;&lt;span&gt;=&quot;    
        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd  
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd  
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd  
        http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-4.0.xsd  
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
        http://cxf.apache.org/jaxws http://cxf.apache.org/schemas/jaxws.xsd&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;    
         
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;import &lt;/span&gt;&lt;span&gt;resource&lt;/span&gt;&lt;span&gt;=&quot;classpath:META-INF/cxf/cxf.xml&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;import &lt;/span&gt;&lt;span&gt;resource&lt;/span&gt;&lt;span&gt;=&quot;classpath:META-INF/cxf/cxf-servlet.xml&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
     
    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 自动扫描 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;context:component-scan &lt;/span&gt;&lt;span&gt;base-package&lt;/span&gt;&lt;span&gt;=&quot;com.java1234.webservice&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
     
    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 定义服务提供者  &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;jaxws:endpoint
        &lt;/span&gt;&lt;span&gt;implementor&lt;/span&gt;&lt;span&gt;=&quot;#helloWorld&quot;&lt;/span&gt;&lt;span&gt;
        address&lt;/span&gt;&lt;span&gt;=&quot;/HelloWorld&quot;&lt;/span&gt;
     &lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;jaxws:endpoint&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;beans&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;我们来启动下项目，然后访问 http://localhost:8080/WebService_CXF/webservice/ &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;8.Spring整合CXF之添加拦截器&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 定义服务提供者  &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;jaxws:endpoint
    &lt;/span&gt;&lt;span&gt;implementor&lt;/span&gt;&lt;span&gt;=&quot;#helloWorld&quot;&lt;/span&gt;&lt;span&gt;
    address&lt;/span&gt;&lt;span&gt;=&quot;/HelloWorld&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 添加in拦截器 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;jaxws:inInterceptors&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;bean &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;org.apache.cxf.interceptor.LoggingInInterceptor&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;bean &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;com.java1234.interceptor.MyInterceptor&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;jaxws:inInterceptors&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 添加out拦截器 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;jaxws:outInterceptors&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;bean &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;org.apache.cxf.interceptor.LoggingInInterceptor&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;jaxws:outInterceptors&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;jaxws:endpoint&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;span&gt;&lt;strong&gt;参考资料：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; http://www.cnblogs.com/xdp-gacl&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;java1234&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Sun, 19 Nov 2017 16:17:00 +0000</pubDate>
<dc:creator>pony1223</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/pony1223/p/7847323.html</dc:identifier>
</item>
<item>
<title>wealoha thrift-client-pool 总结 - 来自火星写代码的你</title>
<link>http://www.cnblogs.com/yyystar/p/7860779.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/yyystar/p/7860779.html</guid>
<description>&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;enum&lt;/span&gt;&lt;span&gt; PooledObjectState {
    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * In the queue, not in use.
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    IDLE,

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * In use.
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    ALLOCATED,

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * In the queue, currently being tested for possible eviction.
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    EVICTION,

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * Not in the queue, currently being tested for possible eviction. An
     * attempt to borrow the object was made while being tested which removed it
     * from the queue. It should be returned to the head of the queue once
     * eviction testing completes.
     * TODO: Consider allocating object and ignoring the result of the eviction
     *       test.
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    EVICTION_RETURN_TO_HEAD,

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * In the queue, currently being validated.
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    VALIDATION,

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * Not in queue, currently being validated. The object was borrowed while
     * being validated and since testOnBorrow was configured, it was removed
     * from the queue and pre-allocated. It should be allocated once validation
     * completes.
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    VALIDATION_PREALLOCATED,

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * Not in queue, currently being validated. An attempt to borrow the object
     * was made while previously being tested for eviction which removed it from
     * the queue. It should be returned to the head of the queue once validation
     * completes.
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    VALIDATION_RETURN_TO_HEAD,

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * Failed maintenance (e.g. eviction test or validation) and will be / has
     * been destroyed
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    INVALID,

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * Deemed abandoned, to be invalidated.
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    ABANDONED,

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * Returning to the pool.
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    RETURNING
}&lt;/span&gt;
&lt;/pre&gt;</description>
<pubDate>Sun, 19 Nov 2017 16:12:00 +0000</pubDate>
<dc:creator>来自火星写代码的你</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/yyystar/p/7860779.html</dc:identifier>
</item>
<item>
<title>照虎画猫写自己的Spring - JackieZheng</title>
<link>http://www.cnblogs.com/bigdataZJ/p/Fairy.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/bigdataZJ/p/Fairy.html</guid>
<description>&lt;h3 id=&quot;从细节跳出来&quot;&gt;从细节跳出来&lt;/h3&gt;
&lt;p&gt;看了部分Spring的代码，前面用了四篇内容写了一些读书笔记。&lt;br/&gt;回想起来，论复杂度，Spring够喝上好几壶的。他就像一颗枝繁叶茂的大树，远处看，只是一片绿；走近看，他为你撑起一片小天地，为你遮风避雨；往深了看，他盘根错节，根基夯实。&lt;/p&gt;
&lt;p&gt;在看Spring代码的过程中，我几度有些迷糊，因为一行简单的函数调用，你要是一直跟踪下去，从一个函数跳到另一个函数，又从一个类进入到另一个接口或者代理类，可能原本你只想知道函数做了什么，等回过头来，你发现已经找不到回去的路……&lt;/p&gt;
&lt;p&gt;所以，每写一篇的时候，我都用一两句话总结该篇主要讲的是Spring干了什么事，实现了什么功能。&lt;/p&gt;
&lt;p&gt;这些，我觉得还不够。所以，今天我照虎画猫，写了一个自己的Spring——Fairy项目。&lt;/p&gt;
&lt;h3 id=&quot;fairy项目&quot;&gt;Fairy项目&lt;/h3&gt;
&lt;p&gt;取名Fairy，意为小精灵，象征着东西不大，但是能量无穷，稍有契合Spring春天生机盎然之意。&lt;/p&gt;
&lt;h4 id=&quot;大体思路&quot;&gt;大体思路&lt;/h4&gt;
&lt;p&gt;Spring经过这么多年的发展和补充，已经变成庞然大物，代码中包含了很多可扩展性和抽象的代码和设计。如果想一把抓尽收眼底，还是比较难消化的。这里，就设计一个简洁版的Spring，也算是抽丝剥茧，看看Spring最开始是给我们解决了一个什么问题，大体思路如下：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;声明配置文件，用于声明需要加载使用的类&lt;/li&gt;
&lt;li&gt;加载配置文件，读取配置文件&lt;/li&gt;
&lt;li&gt;解析配置文件，需要将配置文件中声明的标签转换为Fairy能够识别的类&lt;/li&gt;
&lt;li&gt;初始化类，提供配置文件中声明的类的实例&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;项目结构如下：&lt;br/&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/619240/201711/619240-20171120000516562-830043544.png&quot;/&gt;&lt;/p&gt;
&lt;h4 id=&quot;声明配置文件&quot;&gt;声明配置文件&lt;/h4&gt;
&lt;p&gt;首先你需要声明一个配置文件，这是一切工作的开始（当然了，更首先是要有一个项目，后面会给出在GitHub上的项目地址）。所有你想要用到的类，都应该声明在这里。&lt;/p&gt;
&lt;p&gt;配置文件的好处就是可扩展性强，耦合度低。当需要声明一个bean的时候，我们只需要打开配置文件，在其中加上一个标签，填充你需要使用的那个类即可，剩下的工作就交个容器。&lt;/p&gt;
&lt;p&gt;这里的配置文件application-context.xml很简单&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;lt;beans&amp;gt;
    &amp;lt;bean id=&quot;fairyBean&quot; class=&quot;com.jackie.fairy.bean.impl.FairyBeanImpl&quot;&amp;gt;
    &amp;lt;/bean&amp;gt;
&amp;lt;/beans&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;看完配置，我们大概就知道这是一次想得到FairyBeanImpl这个类的实例的征程。按照以往的套路，这些交给Spring去执行就好了，大可以通过这种xml配置的方式，&lt;a href=&quot;mailto:甚至可以通过@Autowired注解的方式&quot;&gt;甚至可以通过@Autowired注解的方式&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;只是这里，我们不再引入Spring的任何依赖，我们要自己造轮子，完成这次bean的加载。这里的标签其实可以声明任何你想声明的标签名，因为已经跳出Spring的约束了，好比这样&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;lt;life&amp;gt;
    &amp;lt;smile id=&quot;fairyBean&quot; class=&quot;com.jackie.fairy.bean.impl.FairyBeanImpl&quot;&amp;gt;
    &amp;lt;/smile&amp;gt;
&amp;lt;/life&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;加载解析配置文件&quot;&gt;加载、解析配置文件&lt;/h4&gt;
&lt;p&gt;从上面的声明可以看出，我们还是使用了XML这种传统的配置文件的方式（后面还会尝试使用JSON的数据格式，详见项目中的JsonParserImpl）。&lt;br/&gt;所以加载首先我们需要加载xml配置文件。其实这里加载xml文件和其他格式的文件并无二致，只是在解析的时候才有差别。&lt;br/&gt;&lt;strong&gt;加载&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;URL xmlPath = XmlReaderUtil.class.getClassLoader().getResource(fileName);&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这里只需要传入文件名，剩下的通过getResource得到文件的URL路径，后面的事情就交给xml解析器去做了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;解析&lt;/strong&gt;&lt;br/&gt;因为配置文件是xml格式，所以需要针对xml进行解析，这里用的是dom4j对xml进行解析。解析的本质就是层层剥开，抽取想要的信息。&lt;br/&gt;我将解析的过程写在工具类中&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;public class XmlReaderUtil {
    private static final Logger LOG = LoggerFactory.getLogger(XmlReaderUtil.class);

    public static List&amp;lt;BeanDefinition&amp;gt; readXml(String fileName) {
        List&amp;lt;BeanDefinition&amp;gt; beanDefinitions = Lists.newArrayList();

        //创建一个读取器
        SAXReader saxReader = new SAXReader();
        Document document = null;

        try {
            //获取要读取的配置文件的路径
            URL xmlPath = XmlReaderUtil.class.getClassLoader().getResource(fileName);
            //读取文件内容
            document = saxReader.read(xmlPath);
            //获取xml中的根元素
            Element rootElement = document.getRootElement();

            for (Iterator iterator = rootElement.elementIterator(); iterator.hasNext(); ) {
                Element element = (Element)iterator.next();
                String id = element.attributeValue(&quot;id&quot;);
                String clazz = element.attributeValue(&quot;class&quot;);
                BeanDefinition beanDefinition = new BeanDefinition(id, clazz);
                beanDefinitions.add(beanDefinition);
            }

        } catch (Exception e) {
            LOG.error(&quot;read xml failed&quot;, e);
        }

        return beanDefinitions;
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;主要过程&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;新建一个解析器&lt;/li&gt;
&lt;li&gt;加载xml配置文件&lt;/li&gt;
&lt;li&gt;找到根元素&lt;/li&gt;
&lt;li&gt;遍历各个元素&lt;/li&gt;
&lt;li&gt;找到相应的属性&lt;/li&gt;
&lt;li&gt;完成解析，将信息存储到集合中&lt;/li&gt;
&lt;/ul&gt;&lt;h4 id=&quot;初始化类&quot;&gt;初始化类&lt;/h4&gt;
&lt;p&gt;完成配置文件的解析后，就需要针对配置文件的信息进行实例化，方便调用者使用。&lt;br/&gt;通过解析后，我们得到了一个List集合，存放了BeanDefinition，每一个BeanDefinition都存放这标签的属性值（这里仅支持id和class属性的解析和存储）。下面就需要针对List集合中解析后的标签进行实例化了。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;private void instanceBeanDefinitions() {
    if (CollectionUtils.isNotEmpty(beanDefinitions)) {
        for (BeanDefinition beanDefinition : beanDefinitions) {
            if (StringUtils.isNotEmpty(beanDefinition.getClassName())) {
                try {
                    instanceBeans.put(beanDefinition.getId(),
                            Class.forName(beanDefinition.getClassName()).newInstance());
                    LOG.info(&quot;instance beans successfully, instanceBeans: {}&quot;, instanceBeans);
                } catch (InstantiationException e) {
                    LOG.error(&quot;instantiation failed&quot;, e);
                } catch (IllegalAccessException e) {
                    LOG.error(&quot;illegalAccessException&quot;, e);
                } catch (ClassNotFoundException e) {
                    LOG.error(&quot;classNotFoundException&quot;, e);
                }
            }
        }
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;主要是通过遍历解析得到的集合，分别对各个元素一一进行实例化，再存储到Map集合中，方便后面根据名称获取（这里还有一些异常情况的处理和参数校验就不做解释，可以直接看代码）。&lt;/p&gt;
&lt;h4 id=&quot;测试&quot;&gt;测试&lt;/h4&gt;
&lt;p&gt;完成以上简单的几步之后，我们就可以测试成果了，新建测试类FairyTest&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;@Test
public void testLoadBean() {
    FairyApplicationContext applicationContext = new FairyApplicationContext(&quot;application-context.xml&quot;, ParseType.XML_PARSER);
    FairyBean fairyBean = (FairyBean) applicationContext.getBean(&quot;fairyBean&quot;);
    fairyBean.greet();
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/619240/201711/619240-20171120000459593-2099852381.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这样，我们就如愿的完成了FairyBean类的加载和实例化，我们没有用到Spring的任何依赖，自己写了个小容器完成了类加载。&lt;br/&gt;项目地址：&lt;a href=&quot;https://github.com/DMinerJackie/fairy&quot; class=&quot;uri&quot;&gt;https://github.com/DMinerJackie/fairy&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;如果您觉得阅读本文对您有帮助，请点一下“&lt;strong&gt;推荐&lt;/strong&gt;”按钮，您的“&lt;strong&gt;推荐&lt;/strong&gt;”将是我最大的写作动力！如果您想持续关注我的文章，请扫描二维码，关注JackieZheng的微信公众号，我会将我的文章推送给您，并和您一起分享我日常阅读过的优质文章。&lt;br/&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/4459384-f166f03afb66b79f.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot;/&gt;&lt;/p&gt;
</description>
<pubDate>Sun, 19 Nov 2017 16:09:00 +0000</pubDate>
<dc:creator>JackieZheng</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/bigdataZJ/p/Fairy.html</dc:identifier>
</item>
<item>
<title>创建mysql快捷登录方式 - 就听海吧丶</title>
<link>http://www.cnblogs.com/han3159/p/7863034.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/han3159/p/7863034.html</guid>
<description>&lt;p&gt;1.先找到mysql的bin目录,将Mysql.exe发送快捷方式到桌面,到这里还没有完成。&lt;/p&gt;

&lt;p&gt;2.然后右键选择属性，将目标后面添加上 -uroot -p&lt;/p&gt;

&lt;p&gt;我的完整目标如下:&lt;/p&gt;

&lt;p&gt;D:\install\mysql-5.7.20-winx64\bin\mysql.exe -uroot -p&lt;/p&gt;

&lt;p&gt;ps：双击发送到桌面的快捷方式出现窗口如图所示&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1234478/201711/1234478-20171119235354671-650169722.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

</description>
<pubDate>Sun, 19 Nov 2017 15:55:00 +0000</pubDate>
<dc:creator>就听海吧丶</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/han3159/p/7863034.html</dc:identifier>
</item>
<item>
<title>如何开发一个chrome扩展 - wangmeijian</title>
<link>http://www.cnblogs.com/wangmeijian/p/7862979.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/wangmeijian/p/7862979.html</guid>
<description>&lt;p&gt;chrome是一个不错的浏览器，web开发者工作中一般都会使用chrome做为默认浏览器，它有很多扩展，给浏览器补充了各种功能，增强了用户体验。chrome具体能干什么？怎么做出来的呢？&lt;/p&gt;
&lt;h2&gt;&lt;span&gt;&lt;strong&gt;chrome扩展是什么？&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;本质上是HTML+CSS+JavaScript组成的页面，所有文件打包成crx文件，安装到chrome，就可以使用&lt;/p&gt;
&lt;h2&gt;&lt;span&gt;&lt;strong&gt;chrome扩展能干什么？&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;chrome扩展可以操作浏览器的书签、cookie、历史记录、右键菜单、tab选项卡、浏览器窗口，甚至可以读取系统信息包括CPU、内存等，扩展借助这些开放的接口，改善网页的实用性，更多信息请戳&lt;a href=&quot;http://open.chrome.360.cn/extension_dev/overview.html&quot; target=&quot;_blank&quot;&gt;这里&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span&gt;怎么做一个扩展出来？&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;新建项目文件夹，在文件夹下新建配置文件manifest.json&lt;/p&gt;
&lt;p&gt;manifest.json配置&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;45&quot;&gt;
&lt;pre&gt;
&lt;span&gt;{
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 强制为数字2，http://open.chrome.360.cn/extension_dev/manifest.html#manifest_version&lt;/span&gt;
    &quot;manifest_version&quot;: 2&lt;span&gt;,
    &lt;/span&gt;&quot;name&quot;: &quot;扩展名称&quot;&lt;span&gt;,
    &lt;/span&gt;&quot;description&quot;: &quot;扩展描述&quot;&lt;span&gt;,
    &lt;/span&gt;&quot;version&quot;: &quot;版本号&quot;&lt;span&gt;,
    &lt;/span&gt;&quot;author&quot;: &quot;作者&quot;&lt;span&gt;,
    &lt;/span&gt;&quot;permissions&quot;: [&quot;需要的权限&quot;&lt;span&gt;],
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 各种尺寸的icon&lt;/span&gt;
    &quot;icons&quot;&lt;span&gt;: {
        &lt;/span&gt;&quot;16&quot;: &quot;icon路径&quot;&lt;span&gt;,
        &lt;/span&gt;&quot;48&quot;: &quot;icon路径&quot;&lt;span&gt;,
        &lt;/span&gt;&quot;128&quot;: &quot;icon路径&quot;&lt;span&gt;
    },
    &lt;/span&gt;&quot;browser_action&quot;&lt;span&gt;: {
        &lt;/span&gt;&quot;default_popup&quot;: &quot;点击扩展icon弹出的那个HTML页面&quot;&lt;span&gt;
    },
    &lt;/span&gt;&quot;options_page&quot;: &quot;右键扩展icon跳转到扩展的配置HTML页面&quot;&lt;span&gt;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;permissions就是要申请的权限，比如书签&quot;bookmarks&quot;&lt;/p&gt;
&lt;p&gt;之后就可以开始写扩展具体页面和具体功能了，如搜索书签&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
chrome.bookmarks.search(搜索关键字, (result) =&amp;gt;&lt;span&gt; {
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 操作搜索结果result&lt;/span&gt;
})
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;做的书签复杂的化，可能需要对扩展进行一些个性化配置，比如设置搜索书签的方式是表单值变化立即搜索还是按搜索按钮再搜索，设置结果利用localStorage存储在本地即可，扩展功能页面利用localStorage.getItem读取&lt;/p&gt;
&lt;h2&gt;&lt;span&gt;开发过程中怎么调试？&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;打开chrome-更多工具-扩展程序&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/664733/201711/664733-20171119231948796-1118324124.png&quot; alt=&quot;&quot; width=&quot;500&quot;/&gt;&lt;/p&gt;
&lt;p&gt;点击“加载已解压的扩展程序”，选择上面新建的项目文件夹，扩展就自动载入到chrome，在地址栏右侧可以看到一个icon，右键它，选择“审查弹出内容”，找到扩展里的js文件夹就可以打断点调试了。&lt;/p&gt;
&lt;p&gt;扩展程序开发完了，可以打包成crx文件，点击上图“打包扩展程序”选择项目文件夹确定，打包完就可以将crx文件直接发送给身边的人安装体验，还可以发布到chrome网上商店，不过要先交5美元，是的，你提交免费的chrome扩展，还要收你钱，只收一次，不支持微信支付宝。&lt;/p&gt;
&lt;p&gt;希望大家做出好的扩展，参考样例：&lt;a href=&quot;https://github.com/wangmeijian/search_bookmark&quot; target=&quot;_blank&quot;&gt;一个书签搜索扩展&lt;/a&gt;，如果本文对你有帮助，可以给个star鼓励一下。&lt;/p&gt;

</description>
<pubDate>Sun, 19 Nov 2017 15:41:00 +0000</pubDate>
<dc:creator>wangmeijian</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/wangmeijian/p/7862979.html</dc:identifier>
</item>
<item>
<title>Java8 ArrayList源码分析 - -Finley-</title>
<link>http://www.cnblogs.com/Finley/p/7862919.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/Finley/p/7862919.html</guid>
<description>&lt;p&gt;&lt;code&gt;java.util.ArrayList&lt;/code&gt;是最常用的工具类之一, 它是一个线程不安全的动态数组. 本文将对JDK 1.8.0中ArrayList实现源码进行简要分析.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ArrayList&lt;/code&gt;底层采用&lt;code&gt;Object[]&lt;/code&gt;来存储, 每次添加元素前都会检查数组是否有足够空间容纳新的元素.&lt;/p&gt;
&lt;p&gt;若数组空间不足则会进行扩容操作, 即创建一个容量更大的数组 并将已有的元素复制到新数组中. 默认情况下新数组的容量是当前容量的1.5倍.&lt;/p&gt;
&lt;p&gt;ArrayList使用&lt;code&gt;Arrays.copyOf&lt;/code&gt;和&lt;code&gt;System.arraycopy&lt;/code&gt;调用原生(native)方法进行数组复制, 以提高效率.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;addAll&lt;/code&gt;, &lt;code&gt;removeAll&lt;/code&gt;等方法中通常使用&lt;code&gt;c.toArray&lt;/code&gt;方法来获取容器中所有元素.&lt;/p&gt;
&lt;p&gt;ArrayList提供了&lt;code&gt;iterator()&lt;/code&gt;和&lt;code&gt;listIterator()&lt;/code&gt;两种迭代器, 前者只能向后移动, 而后者可以双向移动.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;iterator()&lt;/code&gt;只能删除上一个访问的元素, 而&lt;code&gt;listIterator()&lt;/code&gt;还可以在游标位置添加元素.&lt;/p&gt;
&lt;p&gt;两种迭代器都采用fail-fast机制, 即使用&lt;code&gt;modCount&lt;/code&gt;记录结构性改变(添加删除元素等)的次数, 迭代器在移动前会检查&lt;code&gt;modCount&lt;/code&gt;是否发生改变. 若&lt;code&gt;modCount&lt;/code&gt;改变, 则抛出异常中止迭代. 该方法是为了防止其它线程修改容器造成迭代结果不一致.&lt;/p&gt;
&lt;h2 id=&quot;数据结构与构造器&quot;&gt;数据结构与构造器&lt;/h2&gt;
&lt;p&gt;在介绍构造器之前, 首先介绍一下&lt;code&gt;ArrayList&lt;/code&gt;的数据结构:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;13&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;co&quot;&gt;// 默认初始容量&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; DEFAULT_CAPACITY = &lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;;

&lt;span class=&quot;co&quot;&gt;/** &lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * elementData是实际存储数据的缓冲区&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * 其类型为Object[], 即在内部用Object类存储元素在取出时进行类型转换&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * 访问控制为默认(包内访问)是为了便于内部类访问&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * transient关键字表示不对该域进行序列化, ArrayList内部重写了序列化/反序列化方法&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; */&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;transient&lt;/span&gt; Object[] elementData; 

&lt;span class=&quot;co&quot;&gt;// 当前元素数目&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; size;

&lt;span class=&quot;co&quot;&gt;// 用于表示空实例的数组 &lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;final&lt;/span&gt; Object[] EMPTY_ELEMENTDATA = {};

&lt;span class=&quot;co&quot;&gt;/** &lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * 默认构造器使用的空数组&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * 当elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA时, 首次添加元素会使elementData扩容到DEFAULT_CAPACITY&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; */&lt;/span&gt; 
&lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;final&lt;/span&gt; Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = {};&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;接下来可以阅读&lt;code&gt;ArrayList&lt;/code&gt;的几个构造器:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;16&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;co&quot;&gt;// 按照指定初始容量进行初始化&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; ArrayList(&lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; initialCapacity) {
    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (initialCapacity &amp;gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;) {
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;elementData&lt;/span&gt; = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; Object[initialCapacity];
    } &lt;span class=&quot;kw&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (initialCapacity == &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;) {
        &lt;span class=&quot;co&quot;&gt;// 指定容量为0时使用EMPTY_ELEMENTDATA, 而非重新初始化空数组&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;elementData&lt;/span&gt; = EMPTY_ELEMENTDATA;
    } &lt;span class=&quot;kw&quot;&gt;else&lt;/span&gt; {
        &lt;span class=&quot;co&quot;&gt;// 不允许负容量&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; IllegalArgumentException(&lt;span class=&quot;st&quot;&gt;&quot;Illegal Capacity: &quot;&lt;/span&gt; + initialCapacity);
    }
}

&lt;span class=&quot;co&quot;&gt;/** &lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * 按照DEFAULT_CAPACITY进行初始化&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * 构造时并未实际建立缓冲区, 在首次添加元素时才会扩容到DEFAULT_CAPACITY&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; */&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; ArrayList() {
    &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;elementData&lt;/span&gt; = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;
}

&lt;span class=&quot;co&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * 根据其它集合对象创建&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * 默认调用Collection.toArray方法, &lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * 若toArray方法返回类型不是Object[], 则利用Arrays.copyOf进行类型转换&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; */&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; ArrayList(Collection&amp;lt;? &lt;span class=&quot;kw&quot;&gt;extends&lt;/span&gt; E&amp;gt; c) {
    elementData = c.&lt;span class=&quot;fu&quot;&gt;toArray&lt;/span&gt;();
    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; ((size = elementData.&lt;span class=&quot;fu&quot;&gt;length&lt;/span&gt;) != &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;) {
        &lt;span class=&quot;co&quot;&gt;// c.toArray might (incorrectly) not return Object[] (see 6260652)&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (elementData.&lt;span class=&quot;fu&quot;&gt;getClass&lt;/span&gt;() != Object[].&lt;span class=&quot;fu&quot;&gt;class&lt;/span&gt;)
            elementData = Arrays.&lt;span class=&quot;fu&quot;&gt;copyOf&lt;/span&gt;(elementData, size, Object[].&lt;span class=&quot;fu&quot;&gt;class&lt;/span&gt;);
    } &lt;span class=&quot;kw&quot;&gt;else&lt;/span&gt; {
        &lt;span class=&quot;co&quot;&gt;// replace with empty array.&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;elementData&lt;/span&gt; = EMPTY_ELEMENTDATA;
    }
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;Arrays.copyOf&lt;/code&gt;用于复制数组, 其封装了原生(native)方法&lt;code&gt;System.arraycopy&lt;/code&gt;, 具有很高的效率.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ArrayList&lt;/code&gt;中广泛使用这两个方法用于扩容, 插入等操作.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;19&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;static&lt;/span&gt; &amp;lt;T,U&amp;gt; T[] &lt;span class=&quot;fu&quot;&gt;copyOf&lt;/span&gt;(U[] original, &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; newLength, Class&amp;lt;? &lt;span class=&quot;kw&quot;&gt;extends&lt;/span&gt; T[]&amp;gt; newType) {
    &lt;span class=&quot;fu&quot;&gt;@SuppressWarnings&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;unchecked&quot;&lt;/span&gt;)
    T[] copy = ((Object)newType == (Object)Object[].&lt;span class=&quot;fu&quot;&gt;class&lt;/span&gt;)
        ? (T[]) &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; Object[newLength]
        : (T[]) Array.&lt;span class=&quot;fu&quot;&gt;newInstance&lt;/span&gt;(newType.&lt;span class=&quot;fu&quot;&gt;getComponentType&lt;/span&gt;(), newLength);
    System.&lt;span class=&quot;fu&quot;&gt;arraycopy&lt;/span&gt;(original, &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;, copy, &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;,
                     Math.&lt;span class=&quot;fu&quot;&gt;min&lt;/span&gt;(original.&lt;span class=&quot;fu&quot;&gt;length&lt;/span&gt;, newLength));
    &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; copy;
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;添加元素&quot;&gt;添加元素&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;ArrayList&lt;/code&gt;的底层数据结构为数组, 每次向其中添加元素前都会检查数组容量是否足够. 若数组已满则会进行扩容操作.&lt;/p&gt;
&lt;p&gt;首先阅读添加单个元素的方法&lt;code&gt;add(E)&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;17&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;co&quot;&gt;// 向数组末尾添加一个元素, 返回值代表数组是否改变&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;add&lt;/span&gt;(E e) {
    &lt;span class=&quot;fu&quot;&gt;ensureCapacityInternal&lt;/span&gt;(size + &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;);  &lt;span class=&quot;co&quot;&gt;// Increments modCount!!&lt;/span&gt;
    elementData[size++] = e;
    &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;true&lt;/span&gt;;
}

&lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;ensureCapacityInternal&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; minCapacity) {
    &lt;span class=&quot;co&quot;&gt;// 对于默认构造器创建的实例, 保证容量不小于DEFAULT_CAPACITY&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) {
        minCapacity = Math.&lt;span class=&quot;fu&quot;&gt;max&lt;/span&gt;(DEFAULT_CAPACITY, minCapacity);
    }
    &lt;span class=&quot;fu&quot;&gt;ensureExplicitCapacity&lt;/span&gt;(minCapacity);
}

&lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;ensureExplicitCapacity&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; minCapacity) {
    &lt;span class=&quot;co&quot;&gt;// modCount记录了实例发生结构性变化的次数, 用于迭代器的fail-fast机制&lt;/span&gt;
    modCount++;

    &lt;span class=&quot;co&quot;&gt;// overflow-conscious code&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (minCapacity - elementData.&lt;span class=&quot;fu&quot;&gt;length&lt;/span&gt; &amp;gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;)
        &lt;span class=&quot;fu&quot;&gt;grow&lt;/span&gt;(minCapacity);
}

&lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;grow&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; minCapacity) {
    &lt;span class=&quot;co&quot;&gt;// 计算扩容后新容量, 默认为原容量的1.5倍&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; oldCapacity = elementData.&lt;span class=&quot;fu&quot;&gt;length&lt;/span&gt;;
    &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; newCapacity = oldCapacity + (oldCapacity &amp;gt;&amp;gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;);
    
    &lt;span class=&quot;co&quot;&gt;// oldCapacity的1.5倍已经溢出, 所以出现反而变小的情况&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (newCapacity - minCapacity &amp;lt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;)
        newCapacity = minCapacity;
        
    &lt;span class=&quot;co&quot;&gt;// 若大于MAX_ARRAY_SIZE则由hugeCapacity取上限&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (newCapacity - MAX_ARRAY_SIZE &amp;gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;)
        newCapacity = &lt;span class=&quot;fu&quot;&gt;hugeCapacity&lt;/span&gt;(minCapacity);

    &lt;span class=&quot;co&quot;&gt;// 创建新数组并把原有元素移动到新数组中        &lt;/span&gt;
    elementData = Arrays.&lt;span class=&quot;fu&quot;&gt;copyOf&lt;/span&gt;(elementData, newCapacity);
}
    
&lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;hugeCapacity&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; minCapacity) {
    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (minCapacity &amp;lt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;) &lt;span class=&quot;co&quot;&gt;// overflow&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; OutOfMemoryError();
    &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; (minCapacity &amp;gt; MAX_ARRAY_SIZE) ?
        Integer.&lt;span class=&quot;fu&quot;&gt;MAX_VALUE&lt;/span&gt; :
        MAX_ARRAY_SIZE;
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在制定位置添加元素的&lt;code&gt;add(index, e)&lt;/code&gt;方法非常类似:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;16&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;add&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; index, E element) {
    &lt;span class=&quot;fu&quot;&gt;rangeCheckForAdd&lt;/span&gt;(index);

    &lt;span class=&quot;fu&quot;&gt;ensureCapacityInternal&lt;/span&gt;(size + &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;);  &lt;span class=&quot;co&quot;&gt;// Increments modCount!!&lt;/span&gt;
    &lt;span class=&quot;co&quot;&gt;// elementData类型一定为Object[], 不用Arrays.copyOf进行类型检查直接调用System.arraycopy即可&lt;/span&gt;
    System.&lt;span class=&quot;fu&quot;&gt;arraycopy&lt;/span&gt;(elementData, index, elementData, index + &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;,
                     size - index);
    elementData[index] = element;
    size++;
}

&lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;rangeCheckForAdd&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; index) {
    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (index &amp;gt; size || index &amp;lt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;)
        &lt;span class=&quot;kw&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; IndexOutOfBoundsException(&lt;span class=&quot;fu&quot;&gt;outOfBoundsMsg&lt;/span&gt;(index));
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;addAll&lt;/code&gt;方法调用&lt;code&gt;c.toArray&lt;/code&gt;获取c中所有元素:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;23&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;addAll&lt;/span&gt;(Collection&amp;lt;? &lt;span class=&quot;kw&quot;&gt;extends&lt;/span&gt; E&amp;gt; c) {
    Object[] a = c.&lt;span class=&quot;fu&quot;&gt;toArray&lt;/span&gt;();
    &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; numNew = a.&lt;span class=&quot;fu&quot;&gt;length&lt;/span&gt;;
    &lt;span class=&quot;fu&quot;&gt;ensureCapacityInternal&lt;/span&gt;(size + numNew);  &lt;span class=&quot;co&quot;&gt;// Increments modCount&lt;/span&gt;
    System.&lt;span class=&quot;fu&quot;&gt;arraycopy&lt;/span&gt;(a, &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;, elementData, size, numNew);
    size += numNew;
    &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; numNew != &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;;
}

&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;addAll&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; index, Collection&amp;lt;? &lt;span class=&quot;kw&quot;&gt;extends&lt;/span&gt; E&amp;gt; c) {
    &lt;span class=&quot;fu&quot;&gt;rangeCheckForAdd&lt;/span&gt;(index);

    Object[] a = c.&lt;span class=&quot;fu&quot;&gt;toArray&lt;/span&gt;();
    &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; numNew = a.&lt;span class=&quot;fu&quot;&gt;length&lt;/span&gt;;
    &lt;span class=&quot;fu&quot;&gt;ensureCapacityInternal&lt;/span&gt;(size + numNew);  &lt;span class=&quot;co&quot;&gt;// Increments modCount&lt;/span&gt;

    &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; numMoved = size - index;
    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (numMoved &amp;gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;)
        System.&lt;span class=&quot;fu&quot;&gt;arraycopy&lt;/span&gt;(elementData, index, elementData, index + numNew,
                         numMoved);

    System.&lt;span class=&quot;fu&quot;&gt;arraycopy&lt;/span&gt;(a, &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;, elementData, index, numNew);
    size += numNew;
    &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; numNew != &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;;
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;访问元素&quot;&gt;访问元素&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;get&lt;/code&gt;方法可以访问指定位置的元素:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; E &lt;span class=&quot;fu&quot;&gt;get&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; index) {
    &lt;span class=&quot;fu&quot;&gt;rangeCheck&lt;/span&gt;(index);

    &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;elementData&lt;/span&gt;(index);
}

&lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;rangeCheck&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; index) {
    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (index &amp;gt;= size)
        &lt;span class=&quot;kw&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; IndexOutOfBoundsException(&lt;span class=&quot;fu&quot;&gt;outOfBoundsMsg&lt;/span&gt;(index));
}

E &lt;span class=&quot;fu&quot;&gt;elementData&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; index) {
    &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; (E) elementData[index];
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;set&lt;/code&gt;方法用于修改某位置的元素, 未发生结构性改变不会修改&lt;code&gt;modCount&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; E &lt;span class=&quot;fu&quot;&gt;set&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; index, E element) {
    &lt;span class=&quot;fu&quot;&gt;rangeCheck&lt;/span&gt;(index);

    E oldValue = &lt;span class=&quot;fu&quot;&gt;elementData&lt;/span&gt;(index);
    elementData[index] = element;
    &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; oldValue;
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;toArray&lt;/code&gt;方法可以将&lt;code&gt;ArrayList&lt;/code&gt;中所有元素作为数组返回:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;18&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; Object[] &lt;span class=&quot;fu&quot;&gt;toArray&lt;/span&gt;() {
    &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; Arrays.&lt;span class=&quot;fu&quot;&gt;copyOf&lt;/span&gt;(elementData, size);
}

&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &amp;lt;T&amp;gt; T[] &lt;span class=&quot;fu&quot;&gt;toArray&lt;/span&gt;(T[] a) {
    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (a.&lt;span class=&quot;fu&quot;&gt;length&lt;/span&gt; &amp;lt; size)
        &lt;span class=&quot;co&quot;&gt;// Make a new array of a's runtime type, but my contents:&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; (T[]) Arrays.&lt;span class=&quot;fu&quot;&gt;copyOf&lt;/span&gt;(elementData, size, a.&lt;span class=&quot;fu&quot;&gt;getClass&lt;/span&gt;());
    System.&lt;span class=&quot;fu&quot;&gt;arraycopy&lt;/span&gt;(elementData, &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;, a, &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;, size);
    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (a.&lt;span class=&quot;fu&quot;&gt;length&lt;/span&gt; &amp;gt; size)
        a[size] = &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;;
    &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; a;
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;出于类型安全的原因, 建议使用第二个&lt;code&gt;toArray&lt;/code&gt;方法:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;List&amp;lt;String&amp;gt; list = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; ArrayList&amp;lt;&amp;gt;();
&lt;span class=&quot;co&quot;&gt;// add sth in list&lt;/span&gt;
String[] arr = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; String[list.&lt;span class=&quot;fu&quot;&gt;size&lt;/span&gt;()];
arr = list.&lt;span class=&quot;fu&quot;&gt;toArray&lt;/span&gt;(arr);&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;删除元素&quot;&gt;删除元素&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;remove(index)&lt;/code&gt;方法用于移除指定位置的元素:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;13&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; E &lt;span class=&quot;fu&quot;&gt;remove&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; index) {
    &lt;span class=&quot;fu&quot;&gt;rangeCheck&lt;/span&gt;(index);

    modCount++;
    E oldValue = &lt;span class=&quot;fu&quot;&gt;elementData&lt;/span&gt;(index);

    &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; numMoved = size - index - &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;;
    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (numMoved &amp;gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;)
        System.&lt;span class=&quot;fu&quot;&gt;arraycopy&lt;/span&gt;(elementData, index&lt;span class=&quot;dv&quot;&gt;+1&lt;/span&gt;, elementData, index,
                             numMoved);
    elementData[--size] = &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;; &lt;span class=&quot;co&quot;&gt;// clear to let GC do its work&lt;/span&gt;

    &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; oldValue;
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;使用&lt;code&gt;System.arraycopy&lt;/code&gt;将index后面的元素向前移动一位, 覆盖被删除的元素.&lt;/p&gt;
&lt;p&gt;将最后位置上的元素设为null便于GC进行回收.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;remove(obj)&lt;/code&gt;方法会移除第一个与obj相同的元素, 相同关系使用&lt;code&gt;obj.equals&lt;/code&gt;方法来判断:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;14&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;remove&lt;/span&gt;(Object o) {
    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (o == &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;) {
        &lt;span class=&quot;kw&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; index = &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;; index &amp;lt; size; index++)
            &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (elementData[index] == &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;) {
                &lt;span class=&quot;fu&quot;&gt;fastRemove&lt;/span&gt;(index);
                &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;true&lt;/span&gt;;
            }
    } &lt;span class=&quot;kw&quot;&gt;else&lt;/span&gt; {
        &lt;span class=&quot;kw&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; index = &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;; index &amp;lt; size; index++)
            &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (o.&lt;span class=&quot;fu&quot;&gt;equals&lt;/span&gt;(elementData[index])) {
                &lt;span class=&quot;fu&quot;&gt;fastRemove&lt;/span&gt;(index);
                &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;true&lt;/span&gt;;
            }
    }
    &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;false&lt;/span&gt;;
}

&lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;fastRemove&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; index) {
    modCount++;
    &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; numMoved = size - index - &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;;
    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (numMoved &amp;gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;)
        System.&lt;span class=&quot;fu&quot;&gt;arraycopy&lt;/span&gt;(elementData, index&lt;span class=&quot;dv&quot;&gt;+1&lt;/span&gt;, elementData, index,
                         numMoved);
    elementData[--size] = &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;; &lt;span class=&quot;co&quot;&gt;// clear to let GC do its work&lt;/span&gt;
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;removeAll(c)&lt;/code&gt;方法移除所有包含在容器c中的元素, &lt;code&gt;retainAll(c)&lt;/code&gt;方法移除所有未包含在容器c中的元素.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;removeAll&lt;/span&gt;(Collection&amp;lt;?&amp;gt; c) {
     Objects.&lt;span class=&quot;fu&quot;&gt;requireNonNull&lt;/span&gt;(c);
    &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;batchRemove&lt;/span&gt;(c, &lt;span class=&quot;kw&quot;&gt;false&lt;/span&gt;);
}

&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;retainAll&lt;/span&gt;(Collection&amp;lt;?&amp;gt; c) {
    Objects.&lt;span class=&quot;fu&quot;&gt;requireNonNull&lt;/span&gt;(c);
    &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;batchRemove&lt;/span&gt;(c, &lt;span class=&quot;kw&quot;&gt;true&lt;/span&gt;);
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;实际完成该操作的是&lt;code&gt;batchRemove&lt;/code&gt;方法:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;18&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;batchRemove&lt;/span&gt;(Collection&amp;lt;?&amp;gt; c, &lt;span class=&quot;dt&quot;&gt;boolean&lt;/span&gt; complement) {
    &lt;span class=&quot;dt&quot;&gt;final&lt;/span&gt; Object[] elementData = &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;elementData&lt;/span&gt;;
    &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; r = &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;, w = &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;;
    &lt;span class=&quot;dt&quot;&gt;boolean&lt;/span&gt; modified = &lt;span class=&quot;kw&quot;&gt;false&lt;/span&gt;;
    &lt;span class=&quot;kw&quot;&gt;try&lt;/span&gt; {
        &lt;span class=&quot;co&quot;&gt;// 遍历ArrayList, 使用`c.contains`判断是否包含&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;for&lt;/span&gt; (; r &amp;lt; size; r++)
            &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (c.&lt;span class=&quot;fu&quot;&gt;contains&lt;/span&gt;(elementData[r]) == complement)
                &lt;span class=&quot;co&quot;&gt;// 将需要保留的元素移动到数组前部&lt;/span&gt;
                elementData[w++] = elementData[r];
    } &lt;span class=&quot;kw&quot;&gt;finally&lt;/span&gt; {
        &lt;span class=&quot;co&quot;&gt;// 保持与AbstractCollection的行为一致&lt;/span&gt;
        &lt;span class=&quot;co&quot;&gt;// 即使c.contains抛出异常仍完成操作&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (r != size) {
            &lt;span class=&quot;co&quot;&gt;// r != size 说明发生了contains异常. &lt;/span&gt;
            &lt;span class=&quot;co&quot;&gt;// 将后部未判断的部分移动到前面予以保留&lt;/span&gt;
            System.&lt;span class=&quot;fu&quot;&gt;arraycopy&lt;/span&gt;(elementData, r,
                             elementData, w,
                             size - r);
            w += size - r;
        }
        &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (w != size) {
            &lt;span class=&quot;co&quot;&gt;// w != size 说明有元素被删除, 执行清理&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; i = w; i &amp;lt; size; i++)
                elementData[i] = &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;;
            modCount += size - w;
            size = w;
            modified = &lt;span class=&quot;kw&quot;&gt;true&lt;/span&gt;;
        }
    }
    &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; modified;
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;迭代器&quot;&gt;迭代器&lt;/h2&gt;
&lt;p&gt;ArrayList提供了两个迭代器: &lt;code&gt;iterator()&lt;/code&gt;和&lt;code&gt;listIterator()&lt;/code&gt;. 它们都采用fail-fast机制, 即当迭代器遍历过程中容器发生结构性改变时, next方法会抛出&lt;code&gt;ConcurrentModificationException&lt;/code&gt;异常, 终止迭代.&lt;/p&gt;
&lt;p&gt;所谓结构性改变是指&lt;code&gt;modCount&lt;/code&gt;发生改变的情况, 所有的add, removey操作以及&lt;code&gt;clear()&lt;/code&gt;方法都会修改&lt;code&gt;modCount&lt;/code&gt;. fail-fast机制主要为了应对其它线程修改容器导致的不一致问题.&lt;/p&gt;
&lt;p&gt;首先阅读&lt;code&gt;iterator()&lt;/code&gt;源码:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;15&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;co&quot;&gt;// 获得迭代器实例&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; Iterator&amp;lt;E&amp;gt; &lt;span class=&quot;fu&quot;&gt;iterator&lt;/span&gt;() {
    &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;Itr&lt;/span&gt;();
}

&lt;span class=&quot;co&quot;&gt;// 迭代器内部实现类&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; Itr &lt;span class=&quot;kw&quot;&gt;implements&lt;/span&gt; Iterator&amp;lt;E&amp;gt; {
    &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; cursor;       &lt;span class=&quot;co&quot;&gt;// 下一个要返回元素的下标&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; lastRet = -&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;; &lt;span class=&quot;co&quot;&gt;// 上一个返回元素的下标, 默认为-1.&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; expectedModCount = modCount;

    &lt;span class=&quot;co&quot;&gt;// 检查是否可以继续遍历&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;hasNext&lt;/span&gt;() {
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; cursor != size;
    }

    &lt;span class=&quot;co&quot;&gt;// 返回cursor指向的元素, 并将cursor后移一个位置&lt;/span&gt;
    &lt;span class=&quot;fu&quot;&gt;@SuppressWarnings&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;unchecked&quot;&lt;/span&gt;)
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; E &lt;span class=&quot;fu&quot;&gt;next&lt;/span&gt;() {
        &lt;span class=&quot;co&quot;&gt;// 检查modCount是否一致&lt;/span&gt;
        &lt;span class=&quot;fu&quot;&gt;checkForComodification&lt;/span&gt;();
        &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; i = cursor;
        &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (i &amp;gt;= size)
            &lt;span class=&quot;kw&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; NoSuchElementException();
        Object[] elementData = ArrayList.&lt;span class=&quot;fu&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;elementData&lt;/span&gt;;
        &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (i &amp;gt;= elementData.&lt;span class=&quot;fu&quot;&gt;length&lt;/span&gt;)
            &lt;span class=&quot;kw&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; ConcurrentModificationException();
        cursor = i + &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;;
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; (E) elementData[lastRet = i];
    }

    &lt;span class=&quot;co&quot;&gt;// 删除上一次返回的元素&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;remove&lt;/span&gt;() {
        &lt;span class=&quot;co&quot;&gt;// 检查是否返回过元素(成功调用过next方法), 且该元素未被删除&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (lastRet &amp;lt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;)
            &lt;span class=&quot;kw&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; IllegalStateException();
        &lt;span class=&quot;fu&quot;&gt;checkForComodification&lt;/span&gt;();

        &lt;span class=&quot;kw&quot;&gt;try&lt;/span&gt; {
            &lt;span class=&quot;co&quot;&gt;// 删除元素&lt;/span&gt;
            ArrayList.&lt;span class=&quot;fu&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;remove&lt;/span&gt;(lastRet);
            &lt;span class=&quot;co&quot;&gt;// 修正游标位置&lt;/span&gt;
            cursor = lastRet;
            &lt;span class=&quot;co&quot;&gt;// 标记上次返回的元素已被删除, 避免误删&lt;/span&gt;
            lastRet = -&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;;
            &lt;span class=&quot;co&quot;&gt;// 更新expectedModCount, 保证迭代器可以继续执行&lt;/span&gt;
            expectedModCount = modCount;
        } &lt;span class=&quot;kw&quot;&gt;catch&lt;/span&gt; (IndexOutOfBoundsException ex) {
            &lt;span class=&quot;kw&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; ConcurrentModificationException();
        }
    }
    
   &lt;span class=&quot;dt&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;checkForComodification&lt;/span&gt;() {
        &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (modCount != expectedModCount)
            &lt;span class=&quot;kw&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; ConcurrentModificationException();
    }&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;listIterator()&lt;/code&gt;可以双向移动, 除了删除元素外还可以在游标位置添加元素:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;12&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; ListIterator&amp;lt;E&amp;gt; &lt;span class=&quot;fu&quot;&gt;listIterator&lt;/span&gt;() {
    &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;ListItr&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;);
}

&lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; ListItr &lt;span class=&quot;kw&quot;&gt;extends&lt;/span&gt; Itr &lt;span class=&quot;kw&quot;&gt;implements&lt;/span&gt; ListIterator&amp;lt;E&amp;gt; {
    &lt;span class=&quot;fu&quot;&gt;ListItr&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; index) {
        &lt;span class=&quot;kw&quot;&gt;super&lt;/span&gt;();
        cursor = index;
    }

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;hasPrevious&lt;/span&gt;() {
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; cursor != &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;;
    }

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;nextIndex&lt;/span&gt;() {
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; cursor;
    }

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;previousIndex&lt;/span&gt;() {
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; cursor - &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;;
    }

    &lt;span class=&quot;fu&quot;&gt;@SuppressWarnings&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;unchecked&quot;&lt;/span&gt;)
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; E &lt;span class=&quot;fu&quot;&gt;previous&lt;/span&gt;() {
        &lt;span class=&quot;fu&quot;&gt;checkForComodification&lt;/span&gt;();
        &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; i = cursor - &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;;
        &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (i &amp;lt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;)
            &lt;span class=&quot;kw&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; NoSuchElementException();
        Object[] elementData = ArrayList.&lt;span class=&quot;fu&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;elementData&lt;/span&gt;;
        &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (i &amp;gt;= elementData.&lt;span class=&quot;fu&quot;&gt;length&lt;/span&gt;)
            &lt;span class=&quot;kw&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; ConcurrentModificationException();
        cursor = i;
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; (E) elementData[lastRet = i];
    }

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;set&lt;/span&gt;(E e) {
        &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (lastRet &amp;lt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;)
            &lt;span class=&quot;kw&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; IllegalStateException();
        &lt;span class=&quot;fu&quot;&gt;checkForComodification&lt;/span&gt;();

        &lt;span class=&quot;kw&quot;&gt;try&lt;/span&gt; {
            ArrayList.&lt;span class=&quot;fu&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;set&lt;/span&gt;(lastRet, e);
        } &lt;span class=&quot;kw&quot;&gt;catch&lt;/span&gt; (IndexOutOfBoundsException ex) {
            &lt;span class=&quot;kw&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; ConcurrentModificationException();
        }
    }

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;add&lt;/span&gt;(E e) {
        &lt;span class=&quot;fu&quot;&gt;checkForComodification&lt;/span&gt;();

        &lt;span class=&quot;kw&quot;&gt;try&lt;/span&gt; {
            &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; i = cursor;
            ArrayList.&lt;span class=&quot;fu&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;add&lt;/span&gt;(i, e);
            cursor = i + &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;;
            lastRet = -&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;;
            expectedModCount = modCount;
        } &lt;span class=&quot;kw&quot;&gt;catch&lt;/span&gt; (IndexOutOfBoundsException ex) {
            &lt;span class=&quot;kw&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; ConcurrentModificationException();
        }
    }
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;ArrayList&lt;/code&gt;还有两个内部类用于处理子序列操作:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;SubList extends AbstractList&amp;lt;E&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ArrayListSpliterator&amp;lt;E&amp;gt; implements Spliterator&amp;lt;E&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;序列化&quot;&gt;序列化&lt;/h2&gt;
&lt;p&gt;ArrayList的序列化会写入&lt;code&gt;modCount&lt;/code&gt;, &lt;code&gt;size&lt;/code&gt;和实际的元素. 同样会检查&lt;code&gt;modCount&lt;/code&gt;是否一致, 以避免并发问题.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;writeObject&lt;/span&gt;(java.&lt;span class=&quot;fu&quot;&gt;io&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;ObjectOutputStream&lt;/span&gt; s)
    &lt;span class=&quot;kw&quot;&gt;throws&lt;/span&gt; java.&lt;span class=&quot;fu&quot;&gt;io&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;IOException&lt;/span&gt;{
    &lt;span class=&quot;co&quot;&gt;// Write out element count, and any hidden stuff&lt;/span&gt;
    &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; expectedModCount = modCount;
    s.&lt;span class=&quot;fu&quot;&gt;defaultWriteObject&lt;/span&gt;();

    &lt;span class=&quot;co&quot;&gt;// Write out size as capacity for behavioural compatibility with clone()&lt;/span&gt;
    s.&lt;span class=&quot;fu&quot;&gt;writeInt&lt;/span&gt;(size);

    &lt;span class=&quot;co&quot;&gt;// Write out all elements in the proper order.&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; i=&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;; i&amp;lt;size; i++) {
        s.&lt;span class=&quot;fu&quot;&gt;writeObject&lt;/span&gt;(elementData[i]);
    }

    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (modCount != expectedModCount) {
        &lt;span class=&quot;kw&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; ConcurrentModificationException();
    }
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;自定义序列化机制的根本目的在于避免写入无意义的字段. &lt;code&gt;readObject&lt;/code&gt;也按照同样的策略进行重写:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;13&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;readObject&lt;/span&gt;(java.&lt;span class=&quot;fu&quot;&gt;io&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;ObjectInputStream&lt;/span&gt; s)
    &lt;span class=&quot;kw&quot;&gt;throws&lt;/span&gt; java.&lt;span class=&quot;fu&quot;&gt;io&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;IOException&lt;/span&gt;, ClassNotFoundException {
    elementData = EMPTY_ELEMENTDATA;

    &lt;span class=&quot;co&quot;&gt;// Read in size, and any hidden stuff&lt;/span&gt;
    s.&lt;span class=&quot;fu&quot;&gt;defaultReadObject&lt;/span&gt;();

    &lt;span class=&quot;co&quot;&gt;// Read in capacity&lt;/span&gt;
    s.&lt;span class=&quot;fu&quot;&gt;readInt&lt;/span&gt;(); &lt;span class=&quot;co&quot;&gt;// ignored&lt;/span&gt;

    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (size &amp;gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;) {
        &lt;span class=&quot;co&quot;&gt;// be like clone(), allocate array based upon size not capacity&lt;/span&gt;
        &lt;span class=&quot;fu&quot;&gt;ensureCapacityInternal&lt;/span&gt;(size);

        Object[] a = elementData;
        &lt;span class=&quot;co&quot;&gt;// Read in all elements in the proper order.&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; i=&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;; i&amp;lt;size; i++) {
            a[i] = s.&lt;span class=&quot;fu&quot;&gt;readObject&lt;/span&gt;();
        }
    }
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
</description>
<pubDate>Sun, 19 Nov 2017 15:16:00 +0000</pubDate>
<dc:creator>-Finley-</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/Finley/p/7862919.html</dc:identifier>
</item>
<item>
<title>漫淡面向对象——POJO对象 - 庄君祥</title>
<link>http://www.cnblogs.com/ansn001/p/7862470.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/ansn001/p/7862470.html</guid>
<description>&lt;p&gt;产品或者服务由数据存储和数据计算组成。pojo对象就是用于数据存储。一旦确定后，整个应用或者产品的数据来源就确定。比如一个页面或者功能需要使用什么数据就可以快速找到对应的对象或者通过对象的关系找出来。&lt;/p&gt;
&lt;p&gt;pojo对象属于对系统的静态描述。它应该是名词，不应该是动词或者其他。动词、类型或者状态等应该是算法类型的对象，权限应该是AOP考虑的，在后面的漫谈里还会详细提到。&lt;/p&gt;

&lt;p&gt;对领域的客观描述反应。比如说：教育领域，农业领域，电商领域，零食领域等。这些只要领域背景没有变化，就会是客观稳定的。当然不同的产品的商业模式对同一个领域的理解也会不同，这些是会经常变化的，但是通常也只是体现在流程、类型、算法、功能等上面，这些并不影响pojo对象。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;所有人在沟通的时候理解一致&lt;/li&gt;
&lt;li&gt;每个对象职责单一、明确、不可替代&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;为了快速区分属性，并且快速找到真正的pojo对象和属性。这些属性可以在产品里的新增、详情、列表等功能里得到体现。&lt;/p&gt;
&lt;h2 id=&quot;自描述&quot;&gt;自描述&lt;/h2&gt;
&lt;p&gt;一般体现出来的就是手动输入。比如：名称，标题等。&lt;/p&gt;
&lt;h2 id=&quot;关联&quot;&gt;关联&lt;/h2&gt;
&lt;p&gt;有依赖来源，即在别的地方是手动输入，但是当前功能是选择。比如：选择地区，选择类型。&lt;/p&gt;
&lt;h2 id=&quot;冗余&quot;&gt;冗余&lt;/h2&gt;
&lt;p&gt;方便查询，减少复杂度。一般有以下情况：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;一旦生成不会变化的，可以考虑冗余，因为这样可以减少复杂度。&lt;/li&gt;
&lt;li&gt;偏统计类。比如：视频里冗余评论数购买数。&lt;/li&gt;
&lt;li&gt;为了减少不同类型表的依赖。&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;功能&quot;&gt;功能&lt;/h2&gt;
&lt;p&gt;个性化业务，纯粹是为了做功能&lt;/p&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;只留自描述，这个很难。需要深层次了解领域。通过领域驱动设计。这样可以通过面向对象，通过很少的关注点，对整个系统有个静态的认识。而且还可以判断出产品变更的时候对整个系统的结构（即数据存储）有什么影响。特别是出现新名词的时候。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;需要根据产品的实际情况来判断这些属性怎么规划。如果是想要快速、简单，但是4种类型都放到pojo上，开发是最快的，但是同时肯定也是扩展性最差的。也需要根据产品的真实需求来判断怎么处理后面3种类型的属性。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;很多童鞋打着面向对象的幌子干着面向过程的事。在抽取名词的时候同时又考虑算法、流程、权限等。这样一来关注点几何倍数增长，本来应该用于考虑pojo对象是否合理的时间更没办法充分得到利用。&lt;/p&gt;
&lt;p&gt;很多童鞋想成一次就把对象抽取出来。实现上抽取比印象中还要复杂。所以建议的是分步骤，按部就班的去抽取才是最快的办法。&lt;/p&gt;
&lt;h2 id=&quot;枚举&quot;&gt;枚举&lt;/h2&gt;
&lt;p&gt;只是把产品里涉及到的所有名词枚举出来。&lt;br/&gt;下面是枚举时的陷阱：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;不要去通过自己的理解去修改名词叫法&lt;/li&gt;
&lt;li&gt;不要去忽略自己觉得不重要的名词&lt;/li&gt;
&lt;li&gt;不要考虑表怎么存储&lt;/li&gt;
&lt;li&gt;不要考虑非名词&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;这些陷阱很容易让后期返工。&lt;/p&gt;
&lt;h2 id=&quot;删除&quot;&gt;删除&lt;/h2&gt;
&lt;p&gt;删除和产品（领域）无关的名词。比如：文案可能出现了&lt;code&gt;故宫&lt;/code&gt;或者平台名等和本领域无关的名词。&lt;/p&gt;
&lt;h2 id=&quot;去重&quot;&gt;去重&lt;/h2&gt;
&lt;p&gt;必需确保每个名词都是职责单一，不可替代的。&lt;br/&gt;一般去重的特征如下：不同的名词体现出来的属性，功能和生命周期是一样的，只是描述不同。&lt;br/&gt;比如： 不同角色的人在对同一个名词描述不同，他们在新增的时候属性相似度非常高，流程也特别像。&lt;/p&gt;
&lt;p&gt;一般的反问自己或者产品：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;它们的不同点在哪？&lt;/li&gt;
&lt;li&gt;如果改一个地方，另一个地方会不会需要同时修改？&lt;/li&gt;
&lt;li&gt;如果把它们做成一样会有什么问题吗？&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;添加&quot;&gt;添加&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;在描述一个概念的时候，必须通过非常多其他对象，而且经常提。&lt;/li&gt;
&lt;li&gt;虽然产品没有提过，但是在实施的时候发生有很多对象有一样的特性。常见情况：
&lt;ul&gt;&lt;li&gt;一个列表涉及到非常多的名词，但是列表本身产品并没有体现概念。&lt;/li&gt;
&lt;li&gt;不同的名词，他们的属性很雷同，而且生命周期几乎是一样的，有种几条平行线的感觉。比如说：同样要新增、发布、审核等&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;聚合&quot;&gt;聚合&lt;/h2&gt;
&lt;p&gt;把属性名词聚合到对象名词里。这里务必确认只放自描述属性。其他的属性暂时不考虑，因为可以很方便的通过关系来描述，而且这个也经常会变化。&lt;/p&gt;

&lt;p&gt;如果有以下的情况说明对象分析的不够合理，后面很容易返工，请务必重视。&lt;/p&gt;
&lt;h2 id=&quot;单方面描述&quot;&gt;单方面描述&lt;/h2&gt;
&lt;p&gt;有一方有一直在说，但是另一方从来不提。说明这里缺少重要名词。&lt;/p&gt;
&lt;h2 id=&quot;描述不一致&quot;&gt;描述不一致&lt;/h2&gt;
&lt;p&gt;在描述同一名词的时候，往往需求进一步翻译。&lt;br/&gt;这样可能会出现的问题是：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;沟通和维护成本增加&lt;/li&gt;
&lt;li&gt;很可能缺少重要信息或者说关系理解的不对等。&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;组合描述&quot;&gt;组合描述&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;用多个词来描述一个概念。需要一个新词。&lt;/li&gt;
&lt;li&gt;一个概念没有具体自描述，而是关系出来的，但是又是沟通描述时经常出现。&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;&lt;li&gt;《UML基础，应用与案例》&lt;/li&gt;
&lt;li&gt;《领域驱动设计》&lt;/li&gt;
&lt;/ul&gt;</description>
<pubDate>Sun, 19 Nov 2017 14:14:00 +0000</pubDate>
<dc:creator>庄君祥</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/ansn001/p/7862470.html</dc:identifier>
</item>
</channel>
</rss>