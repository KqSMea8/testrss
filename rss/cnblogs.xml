<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>图片优化 - 小火柴的蓝色理想</title>
<link>http://www.cnblogs.com/xiaohuochai/p/9183454.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/xiaohuochai/p/9183454.html</guid>
<description>&lt;h2&gt;前面的话&lt;/h2&gt;
&lt;p&gt;　　本文将详细介绍前端项目中的图片相关的优化方案&lt;/p&gt;

&lt;h3&gt;图片格式&lt;/h3&gt;
&lt;p&gt;　　目前在前端的开发中常用的图片格式有jpg、png、gif，png8、png24、png32、svg和webp&lt;/p&gt;
&lt;p&gt;【gif】&lt;/p&gt;
&lt;p&gt;　　gif是无损的，具有文件小、支持动画及透明的优点。但gif无法支持半透明，且仅支持8bit的索引色，即在整个图片中，只能存在256种不同的颜色&lt;/p&gt;
&lt;p&gt;　　但实际上，gif是一种逐渐被抛弃的图片格式。png格式的出现就是为了替代它&lt;/p&gt;
&lt;p&gt;　　由于gif支持动画的这个“一招鲜”的本领，在网络中仍然占有一席之地，主要用于一些小图标&lt;/p&gt;
&lt;p&gt;【jpg】&lt;/p&gt;
&lt;p&gt;　　jpg又称为jpeg，是有损的，但采用了直接色，保证了色彩的丰富性。jpg图片支持透明和半透明，所有空白区域填充白色&lt;/p&gt;
&lt;p&gt;　　jpg格式主要用于高清图、摄影图等大图&lt;/p&gt;
&lt;p&gt;【png8】&lt;/p&gt;
&lt;p&gt;　　png8是无损的，是png的索引色版本&lt;/p&gt;
&lt;p&gt;　　前面提到过，png是gif格式的替代者，在相同图片效果下，png8具有更小的文件体积，且支持透明度的调节&lt;/p&gt;
&lt;p&gt;　　但png8不支持半透明，也不支持动画&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://pic.xiaohuochai.site/blog/helper_ps_imgType1.png&quot; alt=&quot;png&quot; width=&quot;640&quot; height=&quot;352&quot;/&gt;&lt;/p&gt;
&lt;p&gt;【png24】&lt;/p&gt;
&lt;p&gt;　　png24是无损的，是png的直接色版本。　&lt;/p&gt;
&lt;p&gt;　　png24支持透明，也支持半透明，但png有文件体积较大的缺点&lt;/p&gt;
&lt;p&gt;　　png24的目标是替换jpg。但一般而言，png24的文件大小是jpg的5倍之多，但显示效果却只有一点点提升&lt;/p&gt;
&lt;p&gt;【png32】&lt;/p&gt;
&lt;p&gt;　　png32是在png24的基础上，添加了8位的alpha通道信息，可以支持透明和半透明，且支持图层，辅助线等复杂数据的保存&lt;/p&gt;
&lt;p&gt;　　使用ps导出的透明的png24图片，实际上是阉割版的png32，因为只有32位的png图片才支持透明，阉割版是说导出的图片不支持图层&lt;/p&gt;
&lt;p&gt;【SVG】&lt;/p&gt;
&lt;p&gt;　　svg是无损的矢量图。svg与上面这些图片格式最大的不同是，上面的图片格式都是位图，而svg是矢量图，具有无论如何缩放都不会失真的优点&lt;/p&gt;
&lt;p&gt;　　svg格式非常适用于绘制logo、图标等　　&lt;/p&gt;
&lt;p&gt;　　但由于低版本浏览器支持不足，应用不广泛&lt;/p&gt;
&lt;p&gt;【webp】&lt;/p&gt;
&lt;p&gt;　　WebP 格式是 Google 于2010年发布的一种支持有损压缩和无损压缩的图片文件格式，派生自图像编码格式 VP8。它具有较优的图像数据压缩算法，能带来更小的图片体积，而且拥有肉眼识别无差异的图像质量，同时具备了无损和有损的压缩模式、Alpha 透明以及动画的特性，在 JPEG 和 PNG 上的转化效果都非常优秀、稳定和统一。目前，知名网站 Youtube 、Facebook、Ebay 等均有使用 WebP格式。&lt;/p&gt;
&lt;p&gt;　　WebP 集合了多种图片文件格式的特点，JPEG 适合压缩照片和其他细节丰富的图片，GIF 可以显示动态图片，PNG 支持透明图像，图片色彩非常丰富，而 WebP 则兼具上述优点，且较于它们还有更出色的地方。&lt;/p&gt;
&lt;p&gt;　　无损压缩后的 WebP 比 PNG 文件少了 45% 的文件大小，即使 PNG 文件经过其他压缩工具压缩后，WebP 还是可以减少 28% 的文件大小。此外，与 JPEG 相比，在质量相同的情况下，WebP 格式图像的体积要比 JPEG 格式图像小 40%，而 WebP 在压缩方面比 JPEG 格式更优越&lt;/p&gt;
&lt;p&gt;　　但目前为止，webp只能在安卓系统下使用&lt;/p&gt;

&lt;h3&gt;PS保存&lt;/h3&gt;
&lt;p&gt;　　一般地，在对设计图进行修改前，首先要保留一份psd源文本，然后再在其副本上进行修改&lt;/p&gt;
&lt;p&gt;　　通过photoshop将设计图切成需要的素材时，涉及到图片格式的设置问题，应注意以下几点：&lt;/p&gt;
&lt;p&gt;　　1、当图片色彩丰富且无透明要求时，建议保存为jpg格式并选择合适的品质，一般为60-80&lt;/p&gt;
&lt;p&gt;　　2、当图片色彩不太丰富时无论有无透明要求，保存为PNG8格式(特点是只有256种颜色，文件本身比较小)，保存时选择无仿色，无杂边&lt;/p&gt;
&lt;p&gt;　　3、当图片有半透明要求时，保存PNG24格式(对图片不进行压缩，所有相对比较大)&lt;/p&gt;

&lt;h3&gt;懒加载&lt;/h3&gt;
&lt;p&gt;　　图片延迟加载也称为懒加载，延迟加载图片或符合某些条件时才加载某些图片，通常用于图片比较多的网页。可以减少请求数或者延迟请求数，优化性能&lt;/p&gt;
&lt;p&gt;【呈现形式】&lt;/p&gt;
&lt;p&gt;　　一般而言，有以下三种呈现形式&lt;/p&gt;
&lt;p&gt;　　1、延时加载，使用setTimeout或setInterval进行加载延迟，如果用户在加载前就离开，自然就不会进行加载&lt;/p&gt;
&lt;p&gt;　　2、条件加载，符合某些条件或者触发了某些条件才开始异步加载&lt;/p&gt;
&lt;p&gt;　　3、可视区域加载，仅仅加载用户可以看到的区域，这个主要监控滚动条实现，一般距离用户看到的底边很近的时候开始加载，这样能保证用户下拉时图片正好接上，不会有太长时间的停顿&lt;/p&gt;
&lt;p&gt;【基本步骤】&lt;/p&gt;
&lt;p&gt;　　1、待加载的图片默认加载一张占位图&lt;/p&gt;
&lt;p&gt;　　2、使用data-src属性保存真正地址&lt;/p&gt;
&lt;p&gt;　　3、当触发某些条件时，自动改变该区域的图片的src属性为真实的地址&lt;/p&gt;
&lt;p&gt;【可视区域加载】&lt;/p&gt;
&lt;p&gt;　　可视区域加载，是图片懒加载最常用的一种形式，涉及到的细节如下所示：&lt;/p&gt;
&lt;p&gt;　　1、判断可视区域&lt;/p&gt;
&lt;p&gt;　　图片顶部距离页面顶部的高度小于页面高度&lt;/p&gt;
&lt;p&gt;　　2、保存图片路径&lt;/p&gt;
&lt;p&gt;　　待加载的图片默认加载一张占位图，使用data-src属性保存真正的地址&lt;/p&gt;
&lt;p&gt;　　3、判断加载时机&lt;/p&gt;
&lt;p&gt;　　监听页面的scroll事件，收集当前进入页面的图片元素，给src赋值为真正的地址，给已加载的图片添加标记&lt;/p&gt;
&lt;p&gt;　　4、滚动性能提升&lt;/p&gt;
&lt;p&gt;　　使用函数节流优化滚动性能&lt;/p&gt;
&lt;p&gt;　　代码如下所示：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;const&lt;/span&gt; oList = document.getElementById(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;list&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;const&lt;/span&gt; viewHeight =&lt;span&gt; oList.clientHeight
&lt;/span&gt;&lt;span&gt;const&lt;/span&gt; eles = document.querySelectorAll(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;img[data-src]&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;const&lt;/span&gt; lazyLoad = () =&amp;gt;&lt;span&gt; {
  Array.prototype.forEach.call(eles, item &lt;/span&gt;=&amp;gt;&lt;span&gt; {
    &lt;/span&gt;&lt;span&gt;const&lt;/span&gt; rect =&lt;span&gt; item.getBoundingClientRect()
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (rect.top &amp;lt;= viewHeight &amp;amp;&amp;amp; !&lt;span&gt;item.isLoaded) {
      item.isLoaded &lt;/span&gt;= &lt;span&gt;true&lt;/span&gt;
      &lt;span&gt;const&lt;/span&gt; oImg = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Image()
      oImg.onload &lt;/span&gt;= () =&amp;gt; { item.src =&lt;span&gt; oImg.src }
      oImg.src &lt;/span&gt;= item.getAttribute(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;data-src&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
    }
  })
}
&lt;/span&gt;&lt;span&gt;const&lt;/span&gt; throttle = (fn, wait=&lt;span&gt;100&lt;/span&gt;) =&amp;gt;&lt;span&gt;{
  &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; function() {
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(fn.timer) &lt;span&gt;return&lt;/span&gt;&lt;span&gt;
    fn.timer &lt;/span&gt;= setTimeout(() =&amp;gt;&lt;span&gt; {
      fn.apply(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;, arguments)
      fn.timer &lt;/span&gt;= &lt;span&gt;null&lt;/span&gt;&lt;span&gt;
    }, wait)
  }
}
lazyLoad()
oList.addEventListener(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;scroll&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, throttle(lazyLoad))
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　效果如下&lt;/p&gt;


&lt;h3&gt;懒加载进阶&lt;/h3&gt;
&lt;p&gt;　　上面代码的问题在于，每次调用getBoundingClientRect()方法时，都会触发回流，严重地影响性能&lt;/p&gt;
&lt;p&gt;　　可以使用Intersection Observer这一API来解决问题，可以异步观察目标元素与祖先元素或顶层文件的交集变化&lt;/p&gt;
&lt;p&gt;　　创建一个 IntersectionObserver对象并传入相应参数和回调用函数，该回调函数将会在target 元素和root的交集大小超过threshold规定的大小时候被执行&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
var options =&lt;span&gt; {
    root: document.querySelector('#scrollArea'&lt;span&gt;), 
    rootMargin: '0px'&lt;span&gt;, 
    threshold: 1.0&lt;span&gt;
}
var callback =&lt;span&gt; function(entries, observer) { 
    /* Content excerpted, show below */&lt;span&gt; 
};
var observer = new IntersectionObserver(callback, options);&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　如果root参数指定为null或者不指定的时候默认使用浏览器视口做为root&lt;/p&gt;
&lt;p&gt;　　rootMargin表示root元素的外边距。该属性值是用作root元素和target发生交集时的计算交集的区域范围，使用该属性可以控制root元素每一边的收缩或者扩张。默认值为0&lt;/p&gt;
&lt;p&gt;　　threshold可以是单一的number也可以是number数组，target元素和root元素相交程度达到该值的时候，将会被执行&lt;/p&gt;
&lt;p&gt;　　如果只是想要探测当target元素的在root元素中的可见性超过50%的时候，可以指定该属性值为0.5。如果想要target元素在root元素的可见程度每多25%就执行一次回调，那么可以指定一个数组[0, 0.25, 0.5, 0.75, 1]。默认值是0(意味着只要有一个target像素出现在root元素中，回调函数将会被执行)。该值为1.0含义是当target完全出现在root元素时回调才会被执行&lt;/p&gt;
&lt;p&gt;　　为每个观察者配置一个目标&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
var target = document.querySelector('#listItem'&lt;span&gt;)
observer.observe(target)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　当目标满足该IntersectionObserver指定的threshold值，回调被调用&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
var callback =&lt;span&gt; function(entries, observer) { 
    entries.forEach(entry =&amp;gt;&lt;span&gt; {
        entry.time;             
        entry.rootBounds;       
        entry.boundingClientRect;
        entry.intersectionRect;   
        entry.intersectionRatio;  
        entry.target;           
&lt;span&gt;    });
};&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　time： 可见性发生变化的时间，是一个高精度时间戳，单位为毫秒&lt;/p&gt;
&lt;p&gt;　　intersectionRatio： 目标元素的可见比例，即 intersectionRect 占 boundingClientRect 的比例，完全可见时为 1 ，完全不可见时小于等于 0&lt;/p&gt;
&lt;p&gt;　　boundingClientRect： 目标元素的矩形区域的信息&lt;/p&gt;
&lt;p&gt;　　intersectionRect： 目标元素与视口（或根元素）的交叉区域的信息&lt;/p&gt;
&lt;p&gt;　　rootBounds： 根元素的矩形区域的信息，getBoundingClientRect() 方法的返回值，如果没有根元素（即直接相对于视口滚动），则返回 null&lt;/p&gt;
&lt;p&gt;　　isIntersecting： 是否进入了视口，boolean 值&lt;/p&gt;
&lt;p&gt;　　target： 被观察的目标元素，是一个 DOM 节点对象&lt;/p&gt;
&lt;p&gt;　　代码如下所示：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;const&lt;/span&gt; eles = document.querySelectorAll(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;img[data-src]&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;const&lt;/span&gt; observer = &lt;span&gt;new&lt;/span&gt; IntersectionObserver( entries =&amp;gt;&lt;span&gt; {
  entries.forEach(entry &lt;/span&gt;=&amp;gt;&lt;span&gt; {
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (entry.intersectionRatio &amp;gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;) {
      let oImg &lt;/span&gt;=&lt;span&gt; entry.target
      oImg.src &lt;/span&gt;= oImg.getAttribute(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;data-src&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
      observer.unobserve(oImg)
    }
  })
}, {
  root: document.getElementById(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;list&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
})
eles.forEach(item &lt;/span&gt;=&amp;gt; { observer.observe(item) })
&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;预加载&lt;/h3&gt;
&lt;p&gt;　　预加载图片是提升用户体验的一个好办法，提前加载用户所需的图片，保证图片快速、无缝发布，使用户在浏览器网站时获得更好用户体验。常用于图片画廊等应用中&lt;/p&gt;
&lt;p&gt;【使用场景】&lt;/p&gt;
&lt;p&gt;　　以下几个场景中，可以使用图片预加载&lt;/p&gt;
&lt;p&gt;　　1、在首屏加载之前，缩短白屏时间&lt;/p&gt;
&lt;p&gt;　　2、在空闲时间为SPA的下一屏预加载&lt;/p&gt;
&lt;p&gt;　　3、预测用户操作，预先加载数据&lt;/p&gt;
&lt;p&gt;【三种思路】&lt;/p&gt;
&lt;p&gt;　　一般来说，实现预加载有三种思路：&lt;/p&gt;
&lt;p&gt;　　1、使用页面无用元素的背景图片来进行图片预加载&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&amp;lt;button&amp;gt;载入图片&amp;lt;/button&amp;gt;
&amp;lt;img src=&quot;img/test.png&quot; alt=&quot;测试&quot;&amp;gt;
&amp;lt;ul class=&quot;list&quot;&amp;gt;
    &amp;lt;li id=&quot;preload1&quot;&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;li id=&quot;preload2&quot;&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;li id=&quot;preload3&quot;&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;li id=&quot;preload4&quot;&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&amp;lt;script&amp;gt;
var oBtn = document.getElementsByTagName('button')[0&lt;span&gt;];
var oImg0 = document.images[0&lt;span&gt;];
var array = [&quot;img/img1.gif&quot;,&quot;img/img2.gif&quot;,&quot;img/img3.gif&quot;,&quot;img/img4.gif&quot;&lt;span&gt;]
var iNow = -1&lt;span&gt;;
oBtn.onclick =&lt;span&gt; function(){
    iNow++&lt;span&gt;;
    iNow = iNow%4&lt;span&gt;;
    oImg0.src =&lt;span&gt; array[iNow];
}
function preLoadImg(){
    preload1.style.background = &quot;url('img/img1.gif')&quot;&lt;span&gt;;
    preload2.style.background = &quot;url('img/img2.gif')&quot;&lt;span&gt;;
    preload3.style.background = &quot;url('img/img3.gif')&quot;&lt;span&gt;;
    preload4.style.background = &quot;url('img/img4.gif')&quot;&lt;span&gt;;
}
window.onload =&lt;span&gt; function(){
    preLoadImg();    
}
&amp;lt;/script&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　2、通过new Image()或document.createElement('img')创建img标签，然后通过img的src属性来加载图片&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&amp;lt;button&amp;gt;载入图片&amp;lt;/button&amp;gt;
&amp;lt;img src=&quot;img/test.png&quot; alt=&quot;测试&quot;&amp;gt;
&amp;lt;script&amp;gt;
var oBtn = document.getElementsByTagName('button')[0&lt;span&gt;];
var oImg0 = document.images[0&lt;span&gt;];
var array = [&quot;img/img1.gif&quot;,&quot;img/img2.gif&quot;,&quot;img/img3.gif&quot;,&quot;img/img4.gif&quot;&lt;span&gt;]
var iNow = -1&lt;span&gt;;
oBtn.onclick =&lt;span&gt; function(){
    iNow++&lt;span&gt;;
    iNow = iNow%4&lt;span&gt;;
    oImg0.src =&lt;span&gt; array[iNow];
}
var aImages =&lt;span&gt; [];
function preLoadImg(array){
    for(var i = 0, len = preLoadImg.arguments[0].length; i &amp;lt; len; i++&lt;span&gt;){
        aImages[i] = new&lt;span&gt; Image();
        aImages[i].src = preLoadImg.arguments[0&lt;span&gt;][i];
    }
}
window.onload =&lt;span&gt; function(){
    preLoadImg(array);    
}
&amp;lt;/script&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　3、通过XHR对象发送ajax请求来获取图片，但只能获取同域图片&lt;/p&gt;
&lt;p&gt;【onload和onerror】&lt;/p&gt;
&lt;p&gt;　　通过添加onload和onerror这两个事件钩子，可以实现图片在加载完成和加载失败时的函数回调。多个资源加载可以计算出大体进度，如3/10&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&amp;lt;button&amp;gt;载入图片&amp;lt;/button&amp;gt;
&amp;lt;img src=&quot;img/test.png&quot; alt=&quot;测试&quot;&amp;gt;
&amp;lt;script&amp;gt;
var oBtn = document.getElementsByTagName('button')[0&lt;span&gt;];
var oImg0 = document.images[0&lt;span&gt;];
var array = [&quot;img/img1.gif&quot;,&quot;img/img2.gif&quot;,&quot;img/img3.gif&quot;,&quot;img/img4.gif&quot;&lt;span&gt;]
var iNow = -1&lt;span&gt;;
oBtn.onclick =&lt;span&gt; function(){
    iNow++&lt;span&gt;;
    iNow = iNow%4&lt;span&gt;;
    oImg0.src =&lt;span&gt; array[iNow];
}
var iDown = 0&lt;span&gt;;
var oImage = new&lt;span&gt; Image();
function preLoadImg(arr){
    function loadImgTest(arr){
        iDown++&lt;span&gt;;
        if(iDown &amp;lt;&lt;span&gt; arr.length){
            preLoadImg(arr);
        }else&lt;span&gt;{
            alert('ok'&lt;span&gt;);
            oImg.onload = null&lt;span&gt;;
            oImg = null&lt;span&gt;;            
        }
    }
    oImage.onload =&lt;span&gt; function(){
        loadImgTest(arr);
    };
    oImage.onerror =&lt;span&gt; function(){
        loadImgTest(arr);
    };    
    oImage.src =&lt;span&gt; arr[iDown];
}
preLoadImg(array);
&amp;lt;/script&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　将预加载写成一个通用的资源加载器，代码如下&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;49&quot;&gt;
&lt;pre&gt;
let isFunc =&lt;span&gt; function(f){
  return typeof f === 'function'&lt;span&gt;
}
function resLoader(config){
  this.option =&lt;span&gt; {
    resourceType: 'image'&lt;span&gt;,
    baseUrl: ''&lt;span&gt;,
    resources: [],
    onStart: null&lt;span&gt;,
    onProgress: null&lt;span&gt;,
    onComplete: null&lt;span&gt;
  }
  if&lt;span&gt;(config){
    for(i in&lt;span&gt; config){
      this.options[i] =&lt;span&gt; config[i]
    }
  } else&lt;span&gt; {
    alert('参数错误'&lt;span&gt;)
    return&lt;span&gt; 
  }
  // 加载器状态 0:未启动 1:正在加载 2:加载完毕
  this.status = 0
  this.total = this.option.resources.length || 0
  this.currentIndex = 0&lt;span&gt;
}
resLoader.prototype.start =&lt;span&gt; function(){
  this.status = 1&lt;span&gt;
  let _this = this&lt;span&gt;
  let baseUrl = this&lt;span&gt;.option.baseUrl
  for(var i = 0, l = this.option.resources.length; i &amp;lt; l; i++&lt;span&gt;){
    let r = this&lt;span&gt;.option.resources[i],
        url = ''
    if(r.indexOf('http://) === 0 || r.indexOf('https://') === 0){
      url =&lt;span&gt; r
    } else&lt;span&gt; {
      url = baseUrl +&lt;span&gt; r
    }
    let image = new&lt;span&gt; Image()
    image.onload =&lt;span&gt; function(){_this.loaded()}
    image.onerror =&lt;span&gt; function(){_this.loaded()}
    image.src =&lt;span&gt; url
  }
  if(isFunc(this&lt;span&gt;.option.onStart)){
    this.option.onStart(this&lt;span&gt;.total)
  }
}
resloader.prototype.loaded =&lt;span&gt; funtion(){
  if(isFunc(this&lt;span&gt;.option.onProgress)){
    this.option.onProgress(++this.currentIndex, this&lt;span&gt;.total)
  }
  if(this.currentIndex === this&lt;span&gt;.total){
    if(isFunc(this&lt;span&gt;.option.onComplete)){
      this.option.onComplete(this&lt;span&gt;.total)
    }
  }
} 
let loader = new&lt;span&gt; resLoader({
  resources: ['img1.png','img2.png','img3.png'&lt;span&gt;],
  onStart: function(total){
    console.log('start:' +&lt;span&gt; total)
  },
  onProgress: function(current, total){
    console.log(current+ '/' +&lt;span&gt; total)
    let percent = current/total*100&lt;span&gt;
  },
  onComplete: function(total){
    console.log('加载完毕:' + total + '个资源'&lt;span&gt;)
  }
})
loader.start()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Webp&lt;/h3&gt;
&lt;p&gt;　　在安卓下可以使用webp格式的图片，它具有更优的图像数据压缩算法，能带来更小的图片体积，同等画面质量下，体积比jpg、png少了25%以上，而且同时具备了无损和有损的压缩模式、Alpha 透明以及动画的特性&lt;/p&gt;
&lt;p&gt;【检测】&lt;/p&gt;
&lt;p&gt;　　是否支持webp格式的图片的检测方法如下&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;const&lt;/span&gt; isSupportWebp = !![].map &amp;amp;&amp;amp; document.createElement(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;canvas&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;).toDataURL(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;image/webp&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;).indexOf(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;data:image/webp&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;) === &lt;span&gt;0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;【七牛自动转换】&lt;/p&gt;
&lt;p&gt;　　七牛支持自动将其他格式的图片转换成webp格式的图片，只需添加在图片地址之后添加?imageView2/2/format/webp&lt;/p&gt;
&lt;p&gt;　　下面是详细代码&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;*
 * 若该浏览器支持webp格式，则将返回webp图片的url，否则返回原url
 * @param {string} '&lt;/span&gt;&lt;span&gt;https://static.xiaohuochai.site/20180612030117.png&lt;/span&gt;&lt;span&gt;'
 * @return {string} '&lt;/span&gt;&lt;span&gt;https://static.xiaohuochai.site/20180612030117.png?imageView2/1/format/webp&lt;/span&gt;&lt;span&gt;'
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
export &lt;/span&gt;&lt;span&gt;const&lt;/span&gt; getUrlWithWebp = url =&amp;gt;&lt;span&gt; {
  &lt;/span&gt;&lt;span&gt;const&lt;/span&gt; isSupportWebp = !![].map &amp;amp;&amp;amp; document.createElement(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;canvas&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;).toDataURL(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;image/webp&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;).indexOf(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;data:image/webp&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;) === &lt;span&gt;0&lt;/span&gt;
  &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (isSupportWebp) {
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; `${url}?imageView2/&lt;span&gt;2&lt;/span&gt;/format/&lt;span&gt;webp`
  }
  &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; url
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;【pageSpeed】&lt;/p&gt;
&lt;p&gt;　　Google开发的PageSpeed模块有一个功能，会自动将图像转换成WebP格式或者是浏览器所支持的其它格式&lt;/p&gt;
&lt;p&gt;　　以nginx为例，它的设置很简单&lt;/p&gt;
&lt;p&gt;　　1、在http模块开启pagespeed属性&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;pagespeed on;
pagespeed FileCachePath &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/var/cache/ngx_pagespeed/&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　2、在主机配置添加如下一行代码，就能启用这个特性&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
pagespeed EnableFilters convert_png_to_jpeg,convert_jpeg_to_webp;
&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;CDN&lt;/h3&gt;
&lt;p&gt;　　图片性能的最后一步就是分发了。所有资源都可以从使用 CDN 中受益&lt;/p&gt;
&lt;p&gt;　　CDN 可以降低从图片站点提供自适应和高性能图片的复杂度。大多数CDN都可以根据设备和浏览器进行尺寸调整、裁剪和确定最合适的格式，甚至更多 —— 压缩、检测像素密度、水印、人脸识别和允许后期处理。借助这些强大的功能和能够将参数附到 URL 中，使得提供以用户为中心的图片变得轻而易举了&lt;/p&gt;
&lt;p&gt;　　以七牛云为例，imageView2 提供简单快捷的图片格式转换、缩略、剪裁功能。只需要填写几个参数，即可对图片进行缩略操作，生成各种缩略图&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 裁剪正中部分，等比缩小生成200x200缩略图&lt;/span&gt;
http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;odum9helk.qnssl.com/resource/gogopher.jpg?imageView2/1/w/200/h/200

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 宽度固定为200px，高度等比缩小，生成200x133缩略图&lt;/span&gt;
http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;odum9helk.qnssl.com/resource/gogopher.jpg?imageView2/2/w/200&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Vue图片优化&lt;/h3&gt;
&lt;p&gt;　　下面来介绍一个VUE下的插件vue-lazyload，可以实现图片或背景图片的懒加载、使用webp图片等效果&lt;/p&gt;
&lt;p&gt;　　首先，使用npm安装&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
npm install vue-lazyload -D
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;【基础使用】&lt;/p&gt;
&lt;p&gt;　　在main.js中，使用该插件&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
import Vue &lt;span&gt;from&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;vue&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
import App &lt;/span&gt;&lt;span&gt;from&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;./App.vue&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
import VueLazyload &lt;/span&gt;&lt;span&gt;from&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;vue-lazyload&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;

Vue.use(VueLazyload)

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; or with options&lt;/span&gt;
&lt;span&gt;Vue.use(VueLazyload, {
  preLoad: &lt;/span&gt;&lt;span&gt;1.3&lt;/span&gt;&lt;span&gt;,
  error: &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;dist/error.png&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
  loading: &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;dist/loading.gif&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
  attempt: &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;
})

&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Vue({
  el: &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
  components: {
    App
  }
})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　在模板中使用v-lazy来保存图片的真实地址&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&amp;lt;ul&amp;gt;
  &amp;lt;li v-&lt;span&gt;for&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;img in list&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
    &amp;lt;img v-lazy=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;img.src&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &amp;gt;
  &amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　或者使用v-lazy-container配合图片的data-src属性&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&amp;lt;div v-lazy-container=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;{ selector: 'img', error: 'xxx.jpg', loading: 'xxx.jpg' }&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
  &amp;lt;img data-src=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;//domain.com/img1.jpg&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
  &amp;lt;img data-src=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;//domain.com/img2.jpg&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
  &amp;lt;img data-src=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;//domain.com/img3.jpg&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;  
&amp;lt;/div&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&amp;lt;div v-lazy-container=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;{ selector: 'img' }&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
  &amp;lt;img data-src=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;//domain.com/img1.jpg&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; data-error=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;xxx.jpg&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
  &amp;lt;img data-src=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;//domain.com/img2.jpg&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; data-loading=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;xxx.jpg&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
  &amp;lt;img data-src=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;//domain.com/img3.jpg&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;  
&amp;lt;/div&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;【参数说明】&lt;/p&gt;
&lt;p&gt;　　vue-lazyload相关配置的参数说明&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
&lt;span&gt;key    　　 描述    默认值    类型
preLoad    预加载的宽高比    &lt;/span&gt;&lt;span&gt;1.3&lt;/span&gt;&lt;span&gt;    Number
error      图片加载失败时使用的图片源    &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;data-src&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;    String
loading    图片加载的路径    &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;data-src&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;    String
attempt    尝试加载次数    &lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt;    Number
listenEvents    想让vue监听的事件    [&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;scroll&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;wheel&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;mousewheel&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;resize&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;animationend&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;transitionend&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;touchmove&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]    
adapter    动态修改元素属性    { }    
filter     图像的SRC过滤器    { }    
lazyComponent    懒加载组件    &lt;/span&gt;&lt;span&gt;false&lt;/span&gt;    
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　比如，可以使用如下的配置&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;Vue.use(VueLazyload, {
  preLoad: &lt;/span&gt;&lt;span&gt;1.3&lt;/span&gt;&lt;span&gt;,
  error: &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;dist/error.png&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
  loading: &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;dist/loading.gif&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
  attempt: &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;,
  listenEvents: [ &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;scroll&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt; ]
})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;【动态修改图片的URL】&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;Vue.use(vueLazy, {
    filter: {
      progressive (listener, options) {
          &lt;/span&gt;&lt;span&gt;const&lt;/span&gt; isCDN = /qiniudn.com/
          &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (isCDN.test(listener.src)) {
              listener.el.setAttribute(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;lazy-progressive&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
              listener.loading &lt;/span&gt;= listener.src + &lt;span&gt;'&lt;/span&gt;&lt;span&gt;?imageView2/1/w/10/h/10&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
          }
      },
      webp (listener, options) {
          &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!options.supportWebp) &lt;span&gt;return&lt;/span&gt;
          &lt;span&gt;const&lt;/span&gt; isCDN = /qiniudn.com/
          &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (isCDN.test(listener.src)) {
              listener.src &lt;/span&gt;+= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;?imageView2/2/format/webp&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
          }
      }
    }
})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;【设置事件钩子】&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;48&quot;&gt;
&lt;pre&gt;
&lt;span&gt;Vue.use(vueLazy, {
    adapter: {
        loaded ({ bindType, el, naturalHeight, naturalWidth, $parent, src, loading, error, Init }) {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; do something here
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; example for call LoadedHandler&lt;/span&gt;
&lt;span&gt;            LoadedHandler(el)
        },
        loading (listender, Init) {
            console.log(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;loading&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
        },
        error (listender, Init) {
            console.log(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;error&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
        }
    }
})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;【使用IntersectionObserver】&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;Vue.use(vueLazy, {
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; set observer to true&lt;/span&gt;
  observer: &lt;span&gt;true&lt;/span&gt;&lt;span&gt;,

  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; optional&lt;/span&gt;
&lt;span&gt;  observerOptions: {
    rootMargin: &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;0px&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
    threshold: &lt;/span&gt;&lt;span&gt;0.1&lt;/span&gt;&lt;span&gt;
  }
})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;【懒加载组件】&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;Vue.use(VueLazyload, {
  lazyComponent: &lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;
});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&amp;lt;lazy-component @show=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;handler&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
  &amp;lt;img &lt;span&gt;class&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;mini-cover&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; :src=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;img.src&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; width=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;100%&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; height=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;400&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&amp;lt;/lazy-component&amp;gt;

&amp;lt;script&amp;gt;&lt;span&gt;
  {
    ...
    methods: {
      handler (component) {
        console.log(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;this component is showing&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
      }
    }

  }
&lt;/span&gt;&amp;lt;/script&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;【组件中为图片或背景图片使用懒加载】&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
&amp;lt;script&amp;gt;&lt;span&gt;
export &lt;/span&gt;&lt;span&gt;default&lt;/span&gt;&lt;span&gt; {
  data () {
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; {
      imgObj: {
        src: &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;http://xx.com/logo.png&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
        error: &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;http://xx.com/error.png&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
        loading: &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;http://xx.com/loading-spin.svg&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
      },
      imgUrl: &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;http://xx.com/logo.png&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; String&lt;/span&gt;
&lt;span&gt;    }
  }
}
&lt;/span&gt;&amp;lt;/script&amp;gt;

&amp;lt;template&amp;gt;
  &amp;lt;div &lt;span&gt;ref&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;container&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
     &amp;lt;img v-lazy=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;imgUrl&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;/&amp;gt;
     &amp;lt;div v-lazy:background-image=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;imgUrl&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;/div&amp;gt;

     &amp;lt;!-- with customer error and loading --&amp;gt;
     &amp;lt;img v-lazy=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;imgObj&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;/&amp;gt;
     &amp;lt;div v-lazy:background-image=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;imgObj&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;/div&amp;gt;

     &amp;lt;!-- Customer scrollable element --&amp;gt;
     &amp;lt;img v-lazy.container =&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;imgUrl&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;/&amp;gt;
     &amp;lt;div v-lazy:background-image.container=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;img&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;&amp;lt;/div&amp;gt;

    &amp;lt;!-- srcset --&amp;gt;
    &amp;lt;img v-lazy=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;'img.400px.jpg'&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; data-srcset=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;img.400px.jpg 400w, img.800px.jpg 800w, img.1200px.jpg 1200w&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
    &amp;lt;img v-lazy=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;imgUrl&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; :data-srcset=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;imgUrl' + '?size=400 400w, ' + imgUrl + ' ?size=800 800w, ' + imgUrl +'/1200.jpg 1200w'&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; /&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;【CSS状态】&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&amp;lt;img src=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;imgUrl&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; lazy=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;loading&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&amp;lt;img src=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;imgUrl&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; lazy=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;loaded&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&amp;lt;img src=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;imgUrl&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; lazy=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;error&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&amp;lt;style&amp;gt;&lt;span&gt;
  img[lazy&lt;/span&gt;=&lt;span&gt;loading] {
    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;your style here&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
  }
  img[lazy&lt;/span&gt;=&lt;span&gt;error] {
    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;your style here&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
  }
  img[lazy&lt;/span&gt;=&lt;span&gt;loaded] {
    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;your style here&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
  }
  &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;
  or background-image
  &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
  .yourclass[lazy&lt;/span&gt;=&lt;span&gt;loading] {
    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;your style here&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
  }
  .yourclass[lazy&lt;/span&gt;=&lt;span&gt;error] {
    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;your style here&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
  }
  .yourclass[lazy&lt;/span&gt;=&lt;span&gt;loaded] {
    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;your style here&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
  }
&lt;/span&gt;&amp;lt;/style&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　下面是&lt;a href=&quot;https://www.xiaohuochai.cc/&quot; target=&quot;_blank&quot;&gt;前端小站&lt;/a&gt;中vue-lazyload插件的使用&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; main.js&lt;/span&gt;
import VueLazyload &lt;span&gt;from&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;vue-lazyload&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;

Vue.use(VueLazyload, {
  loading: require(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;./assets/imgs/loading.gif&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;),
  listenEvents: [&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;scroll&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;],
  filter: {
    webp(listener, options) {
      &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!options.supportWebp) &lt;span&gt;return&lt;/span&gt;
      &lt;span&gt;const&lt;/span&gt; isCDN = /xiaohuochai.site/
      &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (isCDN.test(listener.src)) {
        listener.src &lt;/span&gt;+= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;?imageView2/2/format/webp&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
      }
    }
  }
})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; homeCategory.vue&lt;/span&gt;
&amp;lt;ul v-lazy:background-image=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;require('@/assets/imgs/match-bg.jpg')&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&amp;gt;
&lt;/pre&gt;&lt;/div&gt;

</description>
<pubDate>Sun, 17 Jun 2018 21:27:00 +0000</pubDate>
<dc:creator>小火柴的蓝色理想</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/xiaohuochai/p/9183454.html</dc:identifier>
</item>
<item>
<title>Javascript异步机制 - 大雄的学习人生</title>
<link>http://www.cnblogs.com/codernie/p/9194313.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/codernie/p/9194313.html</guid>
<description>&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;Javascript作为一种单线程语言，是如何实现异步编程的呢？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;相信不少人对Javascript单线程表示怀疑：为何单线程可以实现异步操作呢？其实Javascript确实是单线程的（我们不妨把这个线程称作主线程），但它实现异步操作的方式确实借助了浏览器的其他线程的帮助。那其他线程是怎么帮助Javascript主线程来实现异步的呢？答案就是任务队列（task queue）和事件循环（event loop）。&lt;/p&gt;
&lt;h3 id=&quot;任务队列&quot;&gt;任务队列&lt;/h3&gt;
&lt;p&gt;首先，作为单线程语言，在Javascript中定义的任务都会在主线程中执行。但是并不是每个任务都会立刻执行，而这种不立刻执行的任务我们称作异步任务。相反，那些立刻执行的任务我们把它们称作同步任务。而这些异步任务都会交给浏览器的其他线程去执行，但是主线程需要了解这些异步任务执行的状态，才方便进行下一步操作。&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;打个比方，主线程准备做饭，所以下达一个异步任务去买菜，异步任务买完菜之后得告诉主线程：“我买完菜啦”，这个时候主线程才好开始做饭。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;而我们知道因为Javascript是单线程，所以上述的“下一步操作”没法直接定义在主函数里（不然就被当做同步任务直接执行了），那这些应该定义在哪里呢？答案就是&lt;strong&gt;异步任务的回调函数中&lt;/strong&gt;。在Javascript异步机制中，任务队列就是用来维护异步任务回调函数的队列。这样一个队列用来存放这些回调函数，它们会等到主线程执行完所有的同步函数之后按照先进先出的方式挨个执行。那么执行完任务队列之后呢？Javascript主线程就执行完毕了吗？当然不是，不然网页加载完毕之后，谁来处理后续与用户的交互事件（比如点击事件）呢？&lt;/p&gt;
&lt;h3 id=&quot;事件循环&quot;&gt;事件循环&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/12275140-2962d9dbb54f1cc6.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;javascript_asyc.jpg&quot;/&gt;&lt;br/&gt;我们通过上图来更加形象的了解Javascript的异步机制。&lt;br/&gt;执行同步任务 -&amp;gt; 检查任务队列中是否有任务 -&amp;gt; [有如果则执行] -&amp;gt; 检查任务队列中是否有任务 -&amp;gt; [有如果则执行] -&amp;gt; ......&lt;br/&gt;可见主线程在执行完同步任务之后，会无限循环地去检查任务队列中是否有新的“任务”，如果有则执行。而这些任务包括我们在异步任务中定义的回调函数，也包括用户交互事件的回调函数。通过事件循环，Javascript不仅很好的处理了异步任务，也很好的完成了与用户交互事件的处理。因为在完成异步任务的回调函数之后，任务队列中的任务都是由事件所产生的，因此我们也把上述的循环过程叫做&lt;strong&gt;事件循环&lt;/strong&gt;。&lt;/p&gt;
&lt;h3 id=&quot;异步机制实践&quot;&gt;异步机制实践&lt;/h3&gt;
&lt;pre&gt;
&lt;code&gt;console.log('定时器去买菜吧')
setTimeout(function(){
    console.log('菜买完了，主线程去做菜吧')
}, 0)
console.log('你先去买菜，我先看个世界杯')&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;在浏览器中执行上述代码，兴许能更好地理解Javascript的异步机制。&lt;/p&gt;
&lt;h3 id=&quot;总结&quot;&gt;总结&lt;/h3&gt;
&lt;p&gt;总而言之，Javascript单线程的背后有浏览器的其他线程为其完成异步服务，这些异步任务为了和主线程通信，通过将回调函数推入到任务队列等待执行。主线程所做的就是执行完同步任务后，通过事件循环，不断地检查并执行任务队列中回调函数。&lt;/p&gt;
</description>
<pubDate>Sun, 17 Jun 2018 19:20:00 +0000</pubDate>
<dc:creator>大雄的学习人生</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/codernie/p/9194313.html</dc:identifier>
</item>
<item>
<title>Python学习：9.模块的安装以及调用模块 - BD-ld-2017</title>
<link>http://www.cnblogs.com/liudi2017/p/9194253.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/liudi2017/p/9194253.html</guid>
<description>&lt;p&gt;&lt;span&gt;什么是模块&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　在Python中，模块其实也就是包含python代码的文件，我们为什么要使用模块？在我们以后写代码的时候，我们会发现有很多功能需要经常使用，那我们想要使用这些功能怎么办，要再把那些代码在敲一遍吗，这样不但增加了代码量，还浪费了时间，有人说我们可以写在函数里，是的，我们可以把一些功能写在函数里，使用的时候调用函数就行了，但是我们每次新建一个文件的时候，都需要再次将那些功能函数写一遍，还是有些麻烦，这时候，模块的便捷就体现出来了，我们将大量功能函数写在一个py文件里，当我们需要用到部分功能的时候，将这个文件（模块）导入一下，就可以轻松地调用里面的函数了。当然模块中不仅可以写函数，也可以写类。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;模块的调用&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;1.import语句，用于导入整个模块&lt;/strong&gt;&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; module1
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; module as module_a
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;给导入的模块自定义一个别名&lt;/span&gt;

&lt;span&gt;import&lt;/span&gt;&lt;span&gt; sys
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt; time as ti
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;2.form..import，用于导入模块的某一部分功能或模糊导入&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;from&lt;/span&gt; module &lt;span&gt;import&lt;/span&gt;&lt;span&gt; name
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; random &lt;span&gt;import&lt;/span&gt; *
&lt;span&gt;#&lt;/span&gt;&lt;span&gt;导入random中所有属性&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;使用import导入模块内部机制&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;import语句导入指定的模块时会执行3个步骤&lt;br/&gt;&lt;strong&gt;1. 找到模块文件：在模块搜索路径下搜索模块文件&lt;/strong&gt;&lt;br/&gt;　　程序的主目录&lt;br/&gt;　　PYTHONPATH目录&lt;br/&gt;　　标准链接库目录&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.编译成字节码：文件导入时会编译，因此，顶层文件的.pyc字节码文件在内部使用后会被丢弃，只有被导入的文件才会留下.pyc文件&lt;/strong&gt;&lt;br/&gt;&lt;strong&gt;3.执行模块的代码来创建其所定义的对象：模块文件中的所有语句从头至尾依次执行，而此步骤中任何对变量名的赋值运算，都会产生所得到的模块文件的属性&lt;/strong&gt;&lt;br/&gt;&lt;span&gt;注意：模块只在第一次导入时才会执行如上步骤，后续的导入操作只不过是提取内存中已加载的模块对象，reload()可用于重新加载模块&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;自定义模块&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;所谓的自定义模块就是自己创建一个python文件，在里面写入了一些函数或者类，在自己定义文件名的时候，注意不能把自己文件的名字定义和已经存在的模块的名字重复，否则导入模块的时候可能导入的模块不是你想要的模块。&lt;/p&gt;
&lt;p&gt;先在一个.py文件内写一个函数，然后再另一个文件内import 文件名,然后再写使用文件名.函数名调用函数。&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
import 文件名 


文件名.函数名()
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;导入模块时需要根据sys.path的路径找，为了我们自定义的模块可以成功导入，我们需要把自己写的py文件的路径添加到sys.path。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; sys
sys.path.append(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;d:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;这个&quot;d:&quot;是你py文件放置的位置&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;查看模块搜索路径有哪些，自己添加的路径是否在搜索路径中。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; sys
&lt;/span&gt;&lt;span&gt;for&lt;/span&gt; i &lt;span&gt;in&lt;/span&gt;&lt;span&gt; sys.path:
    &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(i)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;内置模块&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;内置模块是python自带功能，使用的时候直接使用import或者from..import导入模块即可。&lt;/p&gt;
&lt;p&gt;python中有哪些内置模块，接下来就介绍一下：&lt;/p&gt;
&lt;h3&gt;一、OS&lt;/h3&gt;
&lt;p&gt;用于提供操作系统级别的操作&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre readability=&quot;4&quot;&gt;
&lt;span&gt;os.getcwd()                 获取当前工作目录，即当前python脚本工作的目录路径
        os.chdir(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;dirname&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)         改变当前脚本工作目录；相当于shell下cd
        os.curdir                   返回当前目录: (&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
        os.pardir                   获取当前目录的父目录字符串名：(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;..&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
        os.makedirs(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;dir1/dir2&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)    可生成多层递归目录
        os.removedirs(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;dirname1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)   若目录为空，则删除，并递归到上一级目录，如若也为空，则删除，依此类推
        os.mkdir(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;dirname&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)         生成单级目录；相当于shell中mkdir dirname
        os.rmdir(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;dirname&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)         删除单级空目录，若目录不为空则无法删除，报错；相当于shell中rmdir dirname
        os.listdir(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;dirname&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)       列出指定目录下的所有文件和子目录，包括隐藏文件，并以列表方式打印
        os.remove()                 删除一个文件
        os.rename(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;oldname&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;)  重命名文件/&lt;span&gt;目录
    &lt;/span&gt;*   os.stat(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;path/filename&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)    获取文件/&lt;span&gt;目录信息
        　　&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; os
        　　info &lt;/span&gt;= os.stat(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;D:\\文件名，需带后缀&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
        　　&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;&lt;span readability=&quot;2&quot;&gt;(info)&lt;p&gt;os.sep                      操作系统特定的路径分隔符，win下为&lt;/p&gt;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;\\&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,Linux下为&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        os.linesep                  当前平台使用的行终止符，win下为&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;\t\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,Linux下为&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        os.pathsep                  用于分割文件路径的字符串
        os.name                     字符串指示当前使用平台。win&lt;/span&gt;-&amp;gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;nt&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;; Linux-&amp;gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;posix&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
        os.system(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;bash command&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)   运行shell命令，直接显示
        　　&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; os
        　　os.system(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;shell命令&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
        &lt;br/&gt;os.environ                  获取系统环境变量
        os.path.abspath(path)       返回path规范化的绝对路径
        os.path.split(path)         将path分割成目录和文件名二元组返回
    &lt;/span&gt;*   os.path.dirname(path) &lt;span&gt;      返回path的目录。其实就是os.path.split(path)的第一个元素
        os.path.basename(path)      返回path最后的文件名。如何path以／或\结尾，那么就会返回空值。
                                    即os.path.split(path)的第二个元素
    &lt;/span&gt;*&lt;span&gt;   os.path.exists(path)        如果path存在，返回True；如果path不存在，返回False
        os.path.isabs(path)         如果path是绝对路径，返回True
        os.path.isfile(path)        如果path是一个存在的文件，返回True。否则返回False
        os.path.isdir(path)         如果path是一个存在的目录，则返回True。否则返回False
    &lt;/span&gt;*   os.path.join(path1[, path2[, ...]])**&lt;span&gt; 将多个路径组合后返回，第一个绝对路径之前的参数将被忽略
        　　&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; os 
        　　str1 &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;D:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        　　str2 &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;home&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        　　str3 &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;index&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        　　n &lt;/span&gt;=&lt;span&gt; os.path.join(str1,str2,str3)
       　　 &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(n)
        　　&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;结果  #自己根据顺序添加分割符&lt;/span&gt;
&lt;span&gt;        　　D:home\index&lt;br/&gt;os.path.getatime(path)      返回path所指向的文件或者目录的最后存取时间
        os.path.getmtime(path)      返回path所指向的文件或者目录的最后修改时间&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;二、sys&lt;/h3&gt;
&lt;p&gt;用于提供对python解释器相关的操作&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;sys.argv           命令行参数List，第一个元素是程序本身路径
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; &lt;span&gt;sys.exit(n)        退出程序，正常退出时exit(0)
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; &lt;span&gt;sys.version        获取Python解释程序的版本信息
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; &lt;span&gt;sys.maxint         最大的Int值
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt; &lt;span&gt;sys.path           返回模块的搜索路径，初始化时使用PYTHONPATH环境变量的值
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt; &lt;span&gt;sys.platform       返回操作系统平台名称
&lt;/span&gt;&lt;span&gt;7&lt;/span&gt; &lt;span&gt;sys.stdin          输入相关
&lt;/span&gt;&lt;span&gt;8&lt;/span&gt; &lt;span&gt;sys.stdout         输出相关
&lt;/span&gt;&lt;span&gt;9&lt;/span&gt; sys.stderror       错误相关
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;三、hashlib&lt;/h3&gt;
&lt;p&gt;用于加密相关的操作，代替了md5模块和sha模块，主要提供 SHA1, SHA224, SHA256, SHA384, SHA512 ，MD5 算法。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;46&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; hashlib

&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;#######md5#########&lt;br/&gt;&lt;/span&gt;
hash =&lt;span&gt; hashlib.md5()
hash.update(bytes(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;admin&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, encoding=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;utf-8&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;))
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(hash.hexdigest())
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(hash.digest())

&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;####### sha1 ########&lt;/span&gt;
&lt;span&gt;
hash &lt;/span&gt;=&lt;span&gt; hashlib.sha1()
hash.update(bytes(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;admin&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, encoding=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;utf-8&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;))
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(hash.hexdigest())

&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; ######## sha256 ########&lt;/span&gt;
&lt;span&gt;
hash &lt;/span&gt;=&lt;span&gt; hashlib.sha256()
hash.update(bytes(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;admin&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, encoding=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;utf-8&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;))
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(hash.hexdigest())

&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; ######## sha384 ########&lt;/span&gt;
&lt;span&gt;
hash &lt;/span&gt;=&lt;span&gt; hashlib.sha384()
hash.update(bytes(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;admin&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, encoding=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;utf-8&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;))
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(hash.hexdigest())

&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; ######## sha512 ########&lt;/span&gt;
&lt;span&gt;
hash &lt;/span&gt;=&lt;span&gt; hashlib.sha512()
hash.update(bytes(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;admin&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, encoding=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;utf-8&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;))
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(hash.hexdigest())
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;以上加密算法虽然依然非常厉害，但时候存在缺陷，即：通过撞库可以反解。所以，有必要对加密算法中添加自定义key再来做加密。&lt;/span&gt;

&lt;span&gt;import&lt;/span&gt;&lt;span&gt; hashlib

&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; ######## md5 ########&lt;/span&gt;
&lt;span&gt;
hash &lt;/span&gt;= hashlib.md5(bytes(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;898oaFs09f&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, encoding=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;utf-8&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;))
hash.update(bytes(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;admin&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, encoding=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;utf-8&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;))
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(hash.hexdigest())

&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;python内置还有一个hmac模块，它内部对我们创建key和内容进行进一步的处理然后再加密&lt;/span&gt;

&lt;span&gt;import&lt;/span&gt;&lt;span&gt; hmac

h &lt;/span&gt;= hmac.new(bytes(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;898oaFs09f&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, encoding=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;utf-8&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;))
h.update(bytes(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;admin&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, encoding=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;utf-8&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;))
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(h.hexdigest())

&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;加盐值的加密（加密两次的加密）&lt;/span&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; hashlib

&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 自己加的加密规则&lt;/span&gt;
hash = hashlib.md5(bytes(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;admafasdin&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, encoding=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;utf-8&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;))
hash.update(bytes(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;admin&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, encoding=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;utf-8&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;))
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(hash.hexdigest()) 
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;四、re&lt;/h3&gt;
&lt;p&gt;python中提供了正则表达式相关操作&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;re.match()&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;#从头匹配&lt;br/&gt;#最开始哪个字符（或字符串）开始匹配上后面的全部忽略&lt;br/&gt;#简单&lt;br/&gt;#分组&lt;/p&gt;
&lt;p&gt;无分组&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 无分组&lt;/span&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; re

origin &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;hello alex bcd alex lge alex acd 19&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
r &lt;/span&gt;= re.match(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;h\w+&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, origin)
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(r.group())  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 获取匹配到的所有结果&lt;/span&gt;
&lt;span&gt;print&lt;/span&gt;(r.groups())  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 获取模型中匹配到的分组结果&lt;/span&gt;
&lt;span&gt;print&lt;/span&gt;(r.groupdict())  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 获取模型中匹配到的分组结果&lt;/span&gt;
&lt;span&gt;
结果
hello
()
{}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;分组&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 分组&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt; 分组的用处:从已经匹配到的字符串里在获取其中的某个字符&lt;/span&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; re

origin &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;hello alex bcd alex lge alex acd 19&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
r &lt;/span&gt;= re.match(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;h(\w+)&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, origin)
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(r.group())  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 获取匹配到的所有结果&lt;/span&gt;
&lt;span&gt;print&lt;/span&gt;(r.groups())  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 获取模型中匹配到的分组结果（括号（组）里的内容）&lt;/span&gt;
&lt;span&gt;print&lt;/span&gt;(r.groupdict())  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 获取模型中匹配到的分组结果&lt;/span&gt;
&lt;span&gt;
结果：
hello
(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;ello&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,)
{}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;#有组（括号）只有groups可以匹配到，有key只有gruopdict可以匹配到&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
&lt;span&gt;origin = &lt;span&gt;&quot;hello alex bcd alex lge alex acd 19&quot;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;br/&gt;r = re.match(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;(h)\w+&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, origin)
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(r.groups())  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 获取模型中匹配到的分组结果&lt;/span&gt;
&lt;span&gt;
结果：(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;h&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,)

r &lt;/span&gt;= re.match(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;?P&amp;lt;n1&amp;gt;h(\w+)&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, origin)  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; ?P&amp;lt;x&amp;gt;  x为key字典类型&lt;/span&gt;
&lt;span&gt;print&lt;/span&gt;(r.groupdict())  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 获取模型中匹配到的分组结果&lt;/span&gt;
r = re.match(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;?P&amp;lt;n1&amp;gt;h(?P&amp;lt;n2&amp;gt;\w+)&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, origin)  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; key ?P&amp;lt;&amp;gt; 的值为后面的字符串&lt;/span&gt;
&lt;span&gt;print&lt;/span&gt;(r.groupdict())  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 获取模型中匹配到的分组结果&lt;/span&gt;
&lt;span&gt;
 结果：
{&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;n1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;h&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;}
{&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;n1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;h&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;n2&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;ello&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;re.search()&lt;/strong&gt;&lt;br/&gt;浏览全部字符串，匹配第一个符合规则的字符串&lt;br/&gt;和match用法差不多，search只不过这个全部浏览，一个一个字符的匹配&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
origin = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;hello alex bcd alex lge alex acd 19&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
r &lt;/span&gt;= re.search(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;a\w+&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, origin)
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(r.group())  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 获取匹配到的所有结果&lt;/span&gt;
&lt;span&gt;print&lt;/span&gt;(r.groups())  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 获取模型中匹配到的分组结果&lt;/span&gt;
&lt;span&gt;print&lt;/span&gt;(r.groupdict())  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 获取模型中匹配到的分组结果&lt;/span&gt;
&lt;br/&gt;&lt;span&gt;结果：
alex
()
{}

origin &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;hello alex bcd alex lge alex acd 19&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
r &lt;/span&gt;= re.search(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;a(\w+).*(?P&amp;lt;name&amp;gt;\d)$&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, origin)
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(r.group())  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 获取匹配到的所有结果                      #上下两个也相同&lt;/span&gt;
&lt;span&gt;print&lt;/span&gt;(r.groups())  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 获取模型中匹配到的分组结果#显示组的结果，忽略掉自己不匹配的比如?P&amp;lt;name&amp;gt;&lt;/span&gt;
&lt;span&gt;print&lt;/span&gt;(r.groupdict())  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 获取模型中匹配到的分组结果&lt;/span&gt;
&lt;br/&gt;&lt;span&gt;结果：
alex bcd alex lge alex acd &lt;/span&gt;19&lt;span&gt;
(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;lex&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;9&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
{&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;9&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;}


&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; re
origin &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;hello alex bcd alex lge alex acd 19&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
n &lt;/span&gt;= re.search(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;(a)(\w+)&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,origin)
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(n.group())
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(n.groups())
&lt;br/&gt;结果：
alex
(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;lex&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)    
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;re.findall()&lt;/strong&gt;&lt;br/&gt;在字符串中找到正则表达式所匹配的所有子串，并返回一个列表，如果没有找到匹配的，则返回空列表。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;45&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; re
re.findall(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;\d+\w\d+&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;a2b3c4d5&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;匹配时是逐个匹配，匹配到之后，下一轮匹配时就从他的后面开始匹配&lt;/span&gt;
结果:[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;2b3&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;4d5&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]

findall特别
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(re.findall(&lt;span&gt;&quot;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;asdfasdf&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;))
结果：
[&lt;/span&gt;&lt;span&gt;''&lt;/span&gt;, &lt;span&gt;''&lt;/span&gt;, &lt;span&gt;''&lt;/span&gt;, &lt;span&gt;''&lt;/span&gt;, &lt;span&gt;''&lt;/span&gt;, &lt;span&gt;''&lt;/span&gt;, &lt;span&gt;''&lt;/span&gt;, &lt;span&gt;''&lt;/span&gt;, &lt;span&gt;''&lt;/span&gt;]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;当元素处理时，有几个括号就有几个组，就要分几个，如果第一个匹配了，第二个，没有匹配但是第二个可有可无，但是在第二个的位置上第三个匹配了，就会生成三个，其中一个留给没有匹配的，留的那个为空。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;100&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; re
origin &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;hello alex bcd alex lge alex acd 19&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;print&lt;/span&gt;(re.findall(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;a\w+&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,origin))
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(re.findall(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;(a\w+)&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,origin))
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(re.findall(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;a(\w+)&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,origin))
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;加括号以后，就行当于把按照规则匹配后，把括号里的输出，不在括号里的就不输出&lt;/span&gt;
&lt;span&gt;结果：   
[&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;alex&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;alex&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;alex&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;acd&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]
[&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;alex&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;alex&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;alex&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;acd&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]
[&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;lex&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;lex&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;lex&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;cd&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]

origin &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;hello alex bcd alex lge alex acd 19&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
n &lt;/span&gt;= re.search(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;(a)(\w+)&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, origin)
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(re.findall(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;(a)(\w+)&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,origin))&lt;span&gt;#&lt;/span&gt;&lt;span&gt;在规则都匹配过一次时，先把这些放在一个括号里，之后一次匹配放在一个括号里，再匹配再放&lt;/span&gt;
&lt;span&gt;print&lt;/span&gt;(n.groups())                                &lt;span&gt;#&lt;/span&gt;&lt;span&gt;结果第一个&lt;/span&gt;
&lt;span&gt;结果：
[(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;lex&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;), (&lt;span&gt;'&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;lex&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;), (&lt;span&gt;'&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;lex&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;), (&lt;span&gt;'&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;cd&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)]
(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;lex&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)


                                &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;origin为上面的&lt;/span&gt;
&lt;span&gt;print&lt;/span&gt;(re.findall(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;(a)(\w+(e))(x)&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,origin))
结果：&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;先找到a放进组里，再找到le放进组里，再从le里找到e放进组里，在找到x放进组里&lt;/span&gt;
[(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;le&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;e&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;x&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;), (&lt;span&gt;'&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;le&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;e&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;x&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;), (&lt;span&gt;'&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;le&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;e&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;x&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)]
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;括号的意思是从提取到的内容里再次提取内容，有几个括号提取几次&lt;/span&gt;
&lt;span&gt;例子：
origin &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;hello alex bcd alex lge alex acd 19&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt;print&lt;/span&gt;(re.findall(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;(a)((\w+)(e))(x)&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,origin))
[(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;le&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;l&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;e&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;x&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;), (&lt;span&gt;'&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;le&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;l&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;e&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;x&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;), (&lt;span&gt;'&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;le&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;l&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;e&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;x&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)]
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;详情请看199&lt;/span&gt;


&lt;span&gt;import&lt;/span&gt;&lt;span&gt; re
a &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;alex&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
n &lt;/span&gt;= re.findall(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;(\w){4}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,a)&lt;span&gt;#&lt;/span&gt;&lt;span&gt;理论上它输出了四次，但是它只有一个括号，所以取一个，而且默认去最后一个&lt;/span&gt;
n1 = re.findall(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;(\w)(\w)(\w)(\w)&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,a)
n3 &lt;/span&gt;= re.findall(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;(\w)*&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,a)详解199 24
&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(n)
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(n1)
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(n3)
结果
[&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;x&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]
[(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;l&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;e&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;x&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)]
[&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;x&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;''&lt;/span&gt;&lt;span&gt;]
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;findall其实就是search的groups组合而来&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt;当加有*时，前面那个可有可无所以当匹配不到或匹配到最后时，会以空的再匹配一次？？？？&lt;/span&gt;

&lt;span&gt;import&lt;/span&gt;&lt;span&gt; re
n &lt;/span&gt;= re.findall(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;(\dasd)*&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;1asd2asdp3asd98kif&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(n)
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;结果  #那么多空，因为贪婪匹配 #连续两次匹配到就去后面那个，带括号情况下&lt;/span&gt;
[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;2asd&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;''&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;3asd&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;''&lt;/span&gt;, &lt;span&gt;''&lt;/span&gt;, &lt;span&gt;''&lt;/span&gt;, &lt;span&gt;''&lt;/span&gt;, &lt;span&gt;''&lt;/span&gt;, &lt;span&gt;''&lt;/span&gt;] &lt;span&gt;#&lt;/span&gt;&lt;span&gt;详解200 6 or 7&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;re.finditer()&lt;/strong&gt;&lt;br/&gt;和 findall 类似，在字符串中找到正则表达式所匹配的所有子串，并把它们作为一个迭代器返回。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;57&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; re

origin &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;hello alex bcd alex lge alex acd 19&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
r &lt;/span&gt;= re.finditer(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;(a)((\w+)(e))(?P&amp;lt;n1&amp;gt;x)&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,origin)
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(r)
&lt;/span&gt;&lt;span&gt;for&lt;/span&gt; i &lt;span&gt;in&lt;/span&gt;&lt;span&gt; r:
    &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(i,i.group(),i.groups(),i.groupdict())
    
&lt;br/&gt;结果：
&lt;/span&gt;&amp;lt;callable_iterator object at 0x0000000687374C50&amp;gt;
&amp;lt;_sre.SRE_Match object; span=(6, 10), match=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;alex&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&amp;gt; alex (&lt;span&gt;'&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;le&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;l&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;e&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;x&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;) {&lt;span&gt;'&lt;/span&gt;&lt;span&gt;n1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;x&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;}
&lt;/span&gt;&amp;lt;_sre.SRE_Match object; span=(15, 19), match=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;alex&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&amp;gt; alex (&lt;span&gt;'&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;le&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;l&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;e&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;x&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;) {&lt;span&gt;'&lt;/span&gt;&lt;span&gt;n1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;x&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;}
&lt;/span&gt;&amp;lt;_sre.SRE_Match object; span=(24, 28), match=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;alex&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&amp;gt; alex (&lt;span&gt;'&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;le&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;l&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;e&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;x&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;) {&lt;span&gt;'&lt;/span&gt;&lt;span&gt;n1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;x&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;re.split()&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;方法按照能够匹配的子串将字符串分割后返回列表&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;51&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; re

origin &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;hello alex bcd alex lge alex acd 19&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
ddd &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;hello alex bcd alex ddaf lge alex acd 19&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
n &lt;/span&gt;= re.split(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;a\w+&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, origin, 1)  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 1为分割次数&lt;/span&gt;
n1 = re.split(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;a\w+&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, ddd)
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(n)
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(n1)
结果
[&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;hello &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt; bcd &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt; lge &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt; 19&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]
[&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;hello &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt; bcd &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt; dd&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt; lge &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt; 19&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]

origin &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;hello alex bcd alex lge alex acd 19&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
n &lt;/span&gt;= re.split(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;a(\w+)&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, origin, )
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(n)
结果  &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 因为被分割了，所以n有三个部分，就像下面，n[1]第一部分 n[2]第二部分 n[3]第三部分&lt;/span&gt;
[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;hello &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;lex&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt; bcd alex lge alex acd 19&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]

&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 中括号里面的字符无需转意，但是正则表达式里的括号有特殊意义，所以正常情况下需要转意&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;re.sub()&lt;/strong&gt;&lt;br/&gt;替换匹配成功的指定位置的字符串&lt;/p&gt;
&lt;p&gt;sub(模型，替换成什么，所要替换的字符串，替换到前几个，模式)&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
origin = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;jhasdjas4dg564jskdbf5s41g56asg&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
str_n &lt;/span&gt;= re.sub(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;\d+&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;KKK&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,origin,5&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(str_n)
&lt;br/&gt;结果
jhasdjasKKKdgKKKjskdbf5s41g56asg

subn()      &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;subn返回两个元素&lt;/span&gt;
origin = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;jhasdjas4dg564jskdbf5s41g56asg&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
new_str,count &lt;/span&gt;= re.subn(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;\d+&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;KKK&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,origin)
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(new_str,count)
&lt;br/&gt;结果：                    &lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;5为匹配个数&lt;/span&gt;
jhasdjasKKKdgKKKjskdbfKKKsKKKgKKKasg 5
&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;&lt;strong&gt;五、json模块&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;用于字符串和python基本数据类型之间转换&lt;/p&gt;
&lt;p&gt;json模块中提供了四个功能：dumps、dump、loads、load&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; json
result &lt;/span&gt;= json.loads(s)&lt;span&gt;#&lt;/span&gt;&lt;span&gt;将字符串类型转换为一种类型（看起来像什么转什么）但是需要完全符合那种类型的条件&lt;/span&gt;
&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(result,type(result))
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;json.loads用于将字典、列表、元组形式的字符串，转换为相应的字典、列表、元组&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt;json.dumps将基本数据类型转换为字符串&lt;/span&gt;
&lt;span&gt;
json.dump()
json.load()&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;这两个基本不用，可以不记&lt;/span&gt;

&lt;span&gt;import&lt;/span&gt;&lt;span&gt; json
dic &lt;/span&gt;= {&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;k1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:123,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;k2&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;:&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;asd&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;}
json.dump(dic,open(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;hp&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;w&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;))&lt;span&gt;#&lt;/span&gt;&lt;span&gt;将dic字符串写到hp文件里面来&lt;/span&gt;
&lt;span&gt;
r &lt;/span&gt;= json.load(open(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;hp&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;r&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;))&lt;span&gt;#&lt;/span&gt;&lt;span&gt;将hp文件里的字符串读出，转为相应的类型&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;json是通用的数据传输，可以和多种语言转换，在用元组转换时可能出现错误，因为这种类型是python里特有的所以，别的可能无法识别。&lt;/p&gt;

&lt;h3&gt;六、pickle模块&lt;/h3&gt;
&lt;p&gt;用于python特有的类型和python基本数据类型间进行转换&lt;/p&gt;
&lt;p&gt;pickle模块提供了四个功能：dumps、dump、loads、load&lt;/p&gt;
&lt;p&gt;pickle模块用于将内存中的python对象序列化成字节流，并可以写入任何类似文件对象中；它也可以根据序列化的字节流进行反序列化，将字节流还原为内存中的对象。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#&lt;/span&gt;&lt;span&gt;pickle使用dump方法将内存对象序列化：&lt;/span&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; pickle

li &lt;/span&gt;= list(range(1,3&lt;span&gt;))
dbfile &lt;/span&gt;= open(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;pickle_list&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;wb&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)    &lt;span&gt;#&lt;/span&gt;&lt;span&gt;必须以2进制打开文件，否则pickle无法将对象序列化只文件&lt;/span&gt;
&lt;span&gt;pickle.dump(li, dbfile)
dbfile.close()

&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;以上代码即将list对象li序列化至文件“pickle_list&quot;中，下次再次运行时，可以通过pickle的load方法恢复list对象：&lt;/span&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; pickle

dbfile &lt;/span&gt;= open(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;pickle_list&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;rb&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
li &lt;/span&gt;=&lt;span&gt; pickle.load(dbfile)
dbfile.close()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;json模块和pickle模块的区别&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;#pickle可以将任何数据类型序列化，json只能列表字典字符串数字等简单的数据类型，复杂的不可以&lt;br/&gt;#但是pickle只能在python中使用，json可以支持多个语言&lt;/p&gt;
&lt;h3&gt;六、time模块&lt;/h3&gt;
&lt;p&gt;时间相关的操作&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;47&quot;&gt;
&lt;pre&gt;
&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(time.time())
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 时间戳 从1970年1月1号开始到现在一共过去了多少秒&lt;/span&gt;

&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(time.ctiem())
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 输出当前系统时间&lt;/span&gt;

&lt;span&gt;print&lt;/span&gt;(time.ctime(time.time() - 86640&lt;span&gt;))
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 将时间戳转为字符串格式&lt;/span&gt;

&lt;span&gt;print&lt;/span&gt;(time.gmtime(time.time() - 86640&lt;span&gt;))
结果
time.struct_time(tm_year&lt;/span&gt;=2017, tm_mon=8, tm_mday=7, tm_hour=7, tm_min=32, tm_sec=49, tm_wday=0, tm_yday=219, tm_isdst=&lt;span&gt;0)

time_obj &lt;/span&gt;= time.gmtime(time.time() - 86640&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(time_obj)  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 根据上面的输出内容进行格式化输出&lt;/span&gt;
&lt;span&gt;print&lt;/span&gt;(str(time_obj.tm_year) + &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; + str(time_obj.tm_mon) + &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; +&lt;span&gt; str(time_obj.tm_mday))
结果
　　　　 &lt;/span&gt;2018 - 6 - 17  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; 加上str是因为他们原来是整形的&lt;/span&gt;
&lt;span&gt;用字符串格式化输出
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%s-%s-%s&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; %&lt;span&gt; (time_obj.tm_year, time_obj.tm_mon, time_obj.tm_mday))
结果为
&lt;/span&gt;2018 - 6 - 17&lt;span&gt;
格林威治时间

time.locatime(time.time() &lt;/span&gt;- 86640&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 本地时间（本机时间）&lt;/span&gt;
&lt;span&gt;
time.strftime(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%Y-%m=%d %H:%M:%S&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, time.localtime())
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 格式化输出时间可以将time.localtime替换为其他时间&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt; strftime将给定对象转成给定格式&lt;/span&gt;
&lt;span&gt;
time.strptime(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;2016/05/22&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%Y/%m/%d&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; 将 日期字符串 转成 struct时间对象格式&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt; 就是上面那个反过来&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt; 表明时间格式转换成struct时间格式&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;七、datatime模块&lt;/h3&gt;
&lt;p&gt;datatime模块重新封装了time模块，提供更多接口&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(datetime.date.today())
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;输出格式2016-01-26&lt;/span&gt;

&lt;span&gt;print&lt;/span&gt;(datetime.date.fromtimestamp(timetime()-86400&lt;span&gt;))
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;2016-01-26 将时间戳转换为日期格式&lt;/span&gt;
&lt;span&gt;
current_time &lt;/span&gt;=&lt;span&gt; datetime.datetime.now()
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(current_time)
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;输出2017-08-08 20:33:12.870346&lt;/span&gt;
&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(current_time.timetuple)
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;返回struct_time格式&lt;/span&gt;
&lt;span&gt;print&lt;/span&gt;(current_time.replace())&lt;span&gt;#&lt;/span&gt;&lt;span&gt;输出现在时间&lt;/span&gt;
&lt;span&gt;print&lt;/span&gt;(current_time.replace(1996,5,20))&lt;span&gt;#&lt;/span&gt;&lt;span&gt;输出给定时间&lt;/span&gt;


&lt;span&gt;print&lt;/span&gt;(datetime.datetime.now() )&lt;span&gt;#&lt;/span&gt;&lt;span&gt;当前时间&lt;/span&gt;
&lt;span&gt;print&lt;/span&gt;(datetime.datetime.now() + datetime.timedelta(3)) &lt;span&gt;#&lt;/span&gt;&lt;span&gt;当前时间+3天&lt;/span&gt;
&lt;span&gt;print&lt;/span&gt;(datetime.datetime.now() + datetime.timedelta(-3)) &lt;span&gt;#&lt;/span&gt;&lt;span&gt;当前时间-3天&lt;/span&gt;
&lt;span&gt;print&lt;/span&gt;(datetime.datetime.now() + datetime.timedelta(hours=3)) &lt;span&gt;#&lt;/span&gt;&lt;span&gt;当前时间+3小时&lt;/span&gt;
&lt;span&gt;print&lt;/span&gt;(datetime.datetime.now() + datetime.timedelta(minutes=30)) &lt;span&gt;#&lt;/span&gt;&lt;span&gt;当前时间+30&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt;这里可以进行的操作&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt;days=None, seconds=None, microseconds=None, milliseconds=None, minutes=None,&lt;/span&gt;&lt;span&gt;
#&lt;/span&gt;&lt;span&gt;hours=None, weeks=None&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;第三方开源模块&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;python有很丰富的模块库，我们以后编写代码是的时候可以直接下载别人的模块，简化我们的代码，那么怎么下载模块，接下来我们就介绍一些。&lt;/p&gt;
&lt;p&gt;我们使用pip进行安装，pip是一个Python包管理工具，我们安装的python3.6中自带pip3，我们需要找到python根目录下的scripts添加到环境变量中。&lt;/p&gt;
&lt;p&gt;首先右击我的电脑==&amp;gt;属性==&amp;gt;高级系统设置==&amp;gt;在高级下找到下面的环境变量点击==&amp;gt;在系统变量中找到path点开==&amp;gt;将pip的目录（python根目录下的scripts文件路径）添加到path中。注意每个路径之间需要用 “；”分开。&lt;/p&gt;
&lt;p&gt;打开命令提示符，使用pip3进行安装，我们演示一下，格式就是：pip3 install 你要安装的模块名字。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1205099/201806/1205099-20180618002903300-1446062617.png&quot; alt=&quot;&quot; width=&quot;600&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;今天主要对三方面进行了介绍&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;模块的调用&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;内置模块（今天介绍了几个常用的模块，以后我们用到模块继续介绍）&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;第三方模块下载&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;今天所讲的重点就在前两个，需要多练习的是内置模块中的方法，今天就到这里就结束了，明天见。&lt;/p&gt;
</description>
<pubDate>Sun, 17 Jun 2018 16:55:00 +0000</pubDate>
<dc:creator>BD-ld-2017</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/liudi2017/p/9194253.html</dc:identifier>
</item>
<item>
<title>通过ODBC接口访问人大金仓数据库 - DHUtoBUAA</title>
<link>http://www.cnblogs.com/DHUtoBUAA/p/9194139.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/DHUtoBUAA/p/9194139.html</guid>
<description>&lt;p&gt;  国产化软件和国产化芯片的窘境一样，一方面市场已经存在性能优越的同类软件，成本很低，但小众的国产化软件不仅需要高价买入版权，并且软件开发维护成本高；另一方面，国产软件目前普遍难用，性能不稳定，Bug满天飞，虽然可以去迭代，但是没有人愿意耐心地等国产软件迭代，甚至市场的生态不给国产软件迭代的机会，选择性忽视国产，国内公司也不会给工程师去试错的机会，这直接限制了中国软件的能力提升。&lt;br/&gt;  虽然国产软件处于劣势，但是在涉及GJ安全的领域，国产化一词是个香饽饽，处于强势地位，尤其是中兴事件以后，国产化会慢慢推进。我们是支持国产化的，但是希望国产化软件能够主动创新，不要活在ZF和TZ的庇护下，永远长不大，偏安一隅，走不到市场去竞争。&lt;br/&gt;  国产数据库有达梦数据库、人大金仓数据库，本文主要讲述人大金仓数据库如何在windows 7/10操作系统上用C#编程语言通过ODBC接口访问，来支持国产化。&lt;/p&gt;

&lt;p&gt;  北京人大金仓信息技术股份有限公司（简称：人大金仓）是中国自主研发数据库产品和数据管理解决方案的领导企业，由中国人民大学及一批最早在国内开展数据库教学、研究与开发的专家于1999年发起创立，至今已成功获得中国电子科技集团（CETC）旗下的普华基础软件股份有限公司和太极计算机股份有限公司的战略注资，被纳入CETC集团的整体发展战略。&lt;br/&gt;  KingbaseES是人大金仓面向事务处理类、兼顾简单分析类应用的数据库产品，可承载各行业管理信息系统和业务生产系统的相关业务，可用于替代Oracle的大型通用关系型数据库。(官网介绍，看看就好，明白怎么回事)&lt;br/&gt;  因为人大金仓需要购买版权，现在网络上流传着一个古老的版本Kingbase ES V3.1，自备激活码，本文以此数据库为例，讲述数据库开发流程。&lt;/p&gt;

&lt;p&gt;  人大金仓数据库提供了基于开放数据库连接(Open Database Connectivity, ODBC)的接口，ODBC为异构数据库访问提供统一接口，允许应用程序以SQL为数据存取标准，存取不同DBMS管理的数据，使应用程序直接操纵DB中的数据，免除随DB的改变而改变。&lt;/p&gt;

&lt;p&gt;  在安装Kingbase ES V3.1时，请一定按照步骤安装，这个版本比较古老，否则容易按照失败，大概归纳为：&lt;/p&gt;
</description>
<pubDate>Sun, 17 Jun 2018 15:59:00 +0000</pubDate>
<dc:creator>DHUtoBUAA</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/DHUtoBUAA/p/9194139.html</dc:identifier>
</item>
<item>
<title>区分defer和async - 吴贤强</title>
<link>http://www.cnblogs.com/wuxianqiang/p/9194129.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/wuxianqiang/p/9194129.html</guid>
<description>&lt;p&gt;今天要介绍的让脚本延迟加载，让脚本延迟加载的方式有多种，最简单粗暴的方法就是将 &lt;span class=&quot;cnblogs_code&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt; 标签放在 &lt;span class=&quot;cnblogs_code&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt; 标签的最下面，这样就可以按照先后顺序依次执行了，但是你有些情况还是想放在 &lt;span class=&quot;cnblogs_code&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt; 标签的下面，但是这个时候就要让脚本延迟执行，因为页面要先解析DOM再执行脚本。&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;&lt;strong&gt;方法一&lt;/strong&gt;：使用HTML4.01为 &lt;span class=&quot;cnblogs_code&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt; 标签定义的 &lt;span class=&quot;cnblogs_code&quot;&gt;defer&lt;/span&gt; 属性，IE4~7支持&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;方法二&lt;/strong&gt;： 使用HTML5为 &lt;span class=&quot;cnblogs_code&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt; 定义的 &lt;span class=&quot;cnblogs_code&quot;&gt;&lt;span&gt;async&lt;/span&gt;&lt;/span&gt; 属性，IE8己以上支持&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&quot;en&quot;&amp;gt;
&amp;lt;head&amp;gt;
  &amp;lt;meta charset=&quot;UTF-8&quot;&amp;gt;
  &amp;lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&amp;gt;
  &amp;lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&amp;gt;
  &amp;lt;title&amp;gt;Document&amp;lt;/title&amp;gt;
  &amp;lt;script type=&quot;text/javascript&quot; defer=&quot;defer&quot; src=&quot;example1.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
  &amp;lt;script type=&quot;text/javascript&quot; defer=&quot;defer&quot; src=&quot;example2.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
  &amp;lt;div&amp;gt;hello world&amp;lt;/div&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注意上面两个脚本都使用了  &lt;span class=&quot;cnblogs_code&quot;&gt;defer&lt;/span&gt; 属性，但是这两个脚本文件执行的先后顺序是不确定，所以一个页面最好只使用一个脚本延迟，除非他们没有依赖关系才会这么用。 &lt;span class=&quot;cnblogs_code&quot;&gt;async&lt;/span&gt; 属性也同样存在这样的问题，他们两唯一的区别就是兼容性问题了。如果想安先后顺序依次执行，唯一的办法就是放在 &lt;span class=&quot;cnblogs_code&quot;&gt;body&lt;/span&gt; 里面才是更好的选择。&lt;/p&gt;

&lt;p&gt;今天是父亲节，祝天下所有的父亲节日快乐·！&lt;/p&gt;
</description>
<pubDate>Sun, 17 Jun 2018 15:49:00 +0000</pubDate>
<dc:creator>吴贤强</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/wuxianqiang/p/9194129.html</dc:identifier>
</item>
<item>
<title>Java死锁排查和Java CPU 100% 排查的步骤整理 - 阿飞-dufyun</title>
<link>http://www.cnblogs.com/aflyun/p/9194104.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/aflyun/p/9194104.html</guid>
<description>&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;工欲善其事，必先利其器&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;简介&quot;&gt;简介&lt;/h2&gt;
&lt;p&gt;本篇整理两个排查问题的简单技巧，一个是java死锁排查，这个一般在面试的时会问到，如果没有写多线程的话，实际中遇到的机会不多；第二个是java cpu 100%排查，这个实际的开发中，线的应用出现这个问题可能性比较大，所以这里简单总结介绍一下，对自己学习知识的一个整理，提高自己的解决问题能力。&lt;/p&gt;
&lt;h2 id=&quot;一java死锁排查&quot;&gt;一、Java死锁排查&lt;/h2&gt;
&lt;p&gt;通过标题我们就要思考三个问题：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;什么是死锁？&lt;/li&gt;
&lt;li&gt;为什么会出现死锁？&lt;/li&gt;
&lt;li&gt;怎么排查代码中出现了死锁？&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;作为技术人员（工程师），在面对问题的时候，可能需要的能力是怎么去解决这个问题。但是在学习技术知识的时候，那就要多问为什么，一定要锻炼自己这方面的能力，这样才能更好的掌握知识。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;解答&lt;/strong&gt;：&lt;/p&gt;
&lt;ol&gt;&lt;li readability=&quot;-0.47017045454545&quot;&gt;
&lt;p&gt;什么是死锁？&lt;/p&gt;
&lt;blockquote readability=&quot;7.4954954954955&quot;&gt;
&lt;p&gt;死锁是指两个或两个以上的进程在执行过程中，由于竞争资源或者由于彼此通信而造成的一种阻塞的现象，若无外力作用，它们都将无法推进下去。此时称系统处于死锁状态或系统产生了死锁，这些永远在互相等待的进程称为死锁进程。&lt;a href=&quot;https://baike.baidu.com/item/%E6%AD%BB%E9%94%81/2196938?fr=aladdin&quot;&gt;百度百科：死锁&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;img src=&quot;https://img-blog.csdn.net/20180617222821998?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTA2NDg1NTU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70&quot; alt=&quot;死锁图示&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注：进程和线程都可以发生死锁，只要满足死锁的条件！&lt;/strong&gt;&lt;/p&gt;
&lt;ol readability=&quot;-2&quot;&gt;&lt;li readability=&quot;0.5&quot;&gt;
&lt;p&gt;为什么会出现死锁？&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;从上面的概念中我们知道&lt;br/&gt;（1）必须是两个或者两个以上进程（线程）&lt;br/&gt;（2）必须有竞争资源&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;怎么排查代码中出现了死锁？【&lt;strong&gt;重点来了&lt;/strong&gt;】&lt;br/&gt;首先写一个死锁的代码，看例子：&lt;br/&gt;```&lt;br/&gt;/**&lt;/li&gt;
&lt;/ol&gt;&lt;ul&gt;&lt;li&gt;使用jstack 排查死锁&lt;/li&gt;
&lt;li&gt;@author dufyun&lt;/li&gt;
&lt;li&gt;*/&lt;br/&gt;public class JStackDemo {&lt;br/&gt;public static void main(String[] args) {&lt;br/&gt;Thread t1 = new Thread(new DeadLockTest(true));//建立一个线程&lt;br/&gt;Thread t2 = new Thread(new DeadLockTest(false));//建立另一个线程&lt;br/&gt;t1.setName(&quot;thread-dufy-1&quot;);&lt;br/&gt;t2.setName(&quot;thread-dufy-2&quot;);&lt;br/&gt;t1.start();//启动一个线程&lt;br/&gt;t2.start();//启动另一个线程&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;class DeadLockTest implements Runnable {&lt;br/&gt;public boolean falg;// 控制线程&lt;br/&gt;DeadLockTest(boolean falg) {&lt;br/&gt;this.falg = falg;&lt;br/&gt;}&lt;br/&gt;public void run() {&lt;br/&gt;/**&lt;br/&gt;* 如果falg的值为true则调用t1线程&lt;br/&gt;*/&lt;br/&gt;if (falg) {&lt;br/&gt;while (true) {&lt;br/&gt;synchronized (Demo.o1) {&lt;br/&gt;System.out.println(&quot;o1 &quot; + Thread.currentThread().getName());&lt;br/&gt;synchronized (Demo.o2) {&lt;br/&gt;System.out.println(&quot;o2 &quot; + Thread.currentThread().getName());&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;/**&lt;br/&gt;* 如果falg的值为false则调用t2线程&lt;br/&gt;*/&lt;br/&gt;else {&lt;br/&gt;while (true) {&lt;br/&gt;synchronized (Demo.o2) {&lt;br/&gt;System.out.println(&quot;o2 &quot; + Thread.currentThread().getName());&lt;br/&gt;synchronized (Demo.o1) {&lt;br/&gt;System.out.println(&quot;o1 &quot; + Thread.currentThread().getName());&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;}&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;class Demo {&lt;br/&gt;static Object o1 = new Object();&lt;br/&gt;static Object o2 = new Object();&lt;br/&gt;}&lt;/p&gt;
&lt;p&gt;```&lt;br/&gt;上面这段代码执行后，就会出现死锁，那么排查的方法有如下：&lt;/p&gt;
&lt;h4 id=&quot;使用-jps-jstack&quot;&gt;使用 jps + jstack&lt;/h4&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;第一：在windons命令窗口，使用 jps -l 【不会使用jps请自行查询资料】&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdn.net/20180617224314653?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTA2NDg1NTU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70&quot; alt=&quot;jps -l 命令&quot;/&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;第二：使用jstack -l 12316 【不会使用jstack请自行查询资料】&lt;br/&gt;&lt;img src=&quot;https://img-blog.csdn.net/20180617224419971?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTA2NDg1NTU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70&quot; alt=&quot;jstack&quot;/&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;使用jconsole&quot;&gt;使用jconsole&lt;/h3&gt;
&lt;p&gt;在window打开 JConsole，JConsole是一个图形化的监控工具！&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;在windons命令窗口 ，输出 JConsole&lt;br/&gt;&lt;img src=&quot;https://img-blog.csdn.net/20180617224721820?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTA2NDg1NTU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70&quot; alt=&quot;这里写图片描述&quot;/&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdn.net/20180617225004261?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTA2NDg1NTU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70&quot; alt=&quot;这里写图片描述&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;使用java-visual-vm&quot;&gt;使用Java Visual VM&lt;/h3&gt;
&lt;p&gt;在window打开 jvisualvm，jvisualvm是一个图形化的监控工具！&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;在windons命令窗口 ，输出 jvisualvm&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdn.net/20180617225253701?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTA2NDg1NTU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70&quot; alt=&quot;Java Visual VM&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdn.net/20180617225315495?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTA2NDg1NTU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70&quot; alt=&quot;死锁检测&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;二java-cpu-100-排查&quot;&gt;二、Java CPU 100% 排查&lt;/h2&gt;
&lt;p&gt;这个如果在实际的应用开发中遇到，要怎么排查呢？&lt;/p&gt;
&lt;p&gt;这里没有一步步的图示过程，只有一个简单的操作过程！有空写一个详细的例子。&lt;/p&gt;
&lt;p&gt;1 、 使用top命令查看cpu占用资源较高的PID&lt;br/&gt;&lt;img src=&quot;https://img-blog.csdn.net/20180617225946794?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTA2NDg1NTU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70&quot; alt=&quot;top命令&quot;/&gt;&lt;br/&gt;2、 通过jps 找到当前用户下的java程序PID&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;执行 jps -l 能够打印出所有的应用的PID，找到有一个PID和这个cpu使用100%一样的ID！！就知道是哪一个服务了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;3、 使用 pidstat -p&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdn.net/20180617230647320?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTA2NDg1NTU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70&quot; alt=&quot;这里写图片描述&quot;/&gt;&lt;/p&gt;
&lt;p&gt;4 、 找到cpu占用较高的线程TID&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;通过上图发现是 3467的TID占用cup较大&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;5、 将TID转换为十六进制的表示方式&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;将3467转为十六进制 d8d，注意是小写！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdn.net/20180617231206817?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTA2NDg1NTU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70&quot; alt=&quot;巧转进制&quot;/&gt;&lt;br/&gt;6、 通过jstack -l&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;使用jstack 输出当前PID的线程dunp信息&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;7、 查找 TID对应的线程(输出的线程id为十六进制)，找到对应的代码&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdn.net/20180617230519477?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTA2NDg1NTU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70&quot; alt=&quot;查找&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;三压力测试使用jstack找到系统的代码性能问题&quot;&gt;三、压力测试使用jstack找到系统的代码性能问题&lt;/h2&gt;
&lt;p&gt;1、在进行压力测试的时候，使用jps找到应用的PID&lt;br/&gt;2、然后使用jstack输出出压力测试时候应用的dump信息&lt;br/&gt;3、分析输出的日志文件中那个方法block线程占用最多，这里可能是性能有问题，找到对应的代码分析&lt;/p&gt;
&lt;h2 id=&quot;参考&quot;&gt;参考&lt;/h2&gt;
&lt;p&gt;1、&lt;a href=&quot;https://blog.csdn.net/green1893/article/details/72357032&quot;&gt;Java应用CPU占用100%原因分析&lt;/a&gt;&lt;br/&gt;2、&lt;a href=&quot;https://www.cnblogs.com/garinzhang/p/java_dump_jstack_top_cpu_100.html&quot;&gt;[Java] CPU 100% 原因查找解决&lt;/a&gt;&lt;br/&gt;3、&lt;a href=&quot;http://www.blogjava.net/hankchen/archive/2012/05/09/377738.html&quot;&gt;线上应用故障排查系列&lt;/a&gt;&lt;br/&gt;4、&lt;a href=&quot;https://blog.csdn.net/jiangguilong2000/article/details/17971247&quot;&gt;分析JAVA应用CPU占用过高的问题&lt;/a&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;&lt;strong&gt;如果您觉得这篇博文对你有帮助，请点赞或者喜欢，让更多的人看到，谢谢！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;如果帅气（美丽）、睿智（聪颖），和我一样简单善良的你看到本篇博文中存在问题，请指出，我虚心接受你让我成长的批评，谢谢阅读！&lt;br/&gt;祝你今天开心愉快！&lt;/strong&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;欢迎访问我的csdn博客，我们一同成长！&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;不管做什么，只要坚持下去就会看到不一样！在路上，不卑不亢!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.csdn.net/u010648555&quot;&gt;博客首页 : http://blog.csdn.net/u010648555&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Sun, 17 Jun 2018 15:39:00 +0000</pubDate>
<dc:creator>阿飞-dufyun</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/aflyun/p/9194104.html</dc:identifier>
</item>
<item>
<title>六九金服：细思极恐！三鼓正睡觉，银行卡被盗刷！骗子劫持了你的短信 - 六九金服</title>
<link>http://www.cnblogs.com/69jinfu/p/9194098.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/69jinfu/p/9194098.html</guid>
<description>&lt;p&gt;你会不会想到&lt;/p&gt;
&lt;p&gt;当有一天你早晨醒来&lt;/p&gt;
&lt;p&gt;发现手机收到很多验证码&lt;/p&gt;
&lt;p&gt;和银行扣款短信&lt;/p&gt;
&lt;p&gt;你还不知咋回事的时候&lt;/p&gt;
&lt;p&gt;又发现&lt;/p&gt;
&lt;p&gt;网银登录账号和密码已被窜改&lt;/p&gt;
&lt;p&gt;丧失惨重&lt;/p&gt;
&lt;p&gt;还有比这更恐惧的事吗？&lt;/p&gt;
&lt;p&gt;近期，多地警方陆续接报这类蹊跷案件。整个过程中，受害者处于熟睡形态，没有停止任何操做，取款密码等关键信息也包管没有泄露，留下众多谜团。&lt;/p&gt;
&lt;p&gt;那么，这种盗刷银行卡究竟结果是怎么发生的？&lt;/p&gt;
&lt;p&gt;近日通过跟踪多地警方的抓捕审讯以及宁静公司尝试室的测试复盘发现：骗子通过“GSM劫持+短信嗅探技术”，可实时获取用户手机短信内容，进而操做各大知名银行、网站、挪动支付APP存在的技术漏洞和缺陷，能够实现信息窃取、资金盗刷和网络诈骗等犯功。&lt;/p&gt;
&lt;p&gt;一、可怕的劫持与嗅探技术&lt;/p&gt;
&lt;p&gt;车载应急基站&lt;/p&gt;
&lt;p&gt;以前，骗子通过“伪基站”冒充银行、运营商给手机发送一些诈骗短信，或者为一些公司发送垃圾推广广告。很多人对这类短信都已经习以为常，假如不去点击短信中的不明链接，一般是不会有风险的。&lt;/p&gt;
&lt;p&gt;后来，随着一项GSM劫持技术被国际黑客界公布，骗子已不再满足于只给用户发短信，而是想到要监视用户短信，因为用户短信里有搜罗验证码在内的很多敏感信息。他们通过淘宝等电商网站购置一些单机设备，再通过安拆黑客开发的相关软件，很便利就能组拆好一个GSM劫持设备。&lt;/p&gt;
&lt;p&gt;警方查获的GSM劫持设备&lt;/p&gt;
&lt;p&gt;这个劫持设备的原理和伪基站差不多，但它的可怕之处在于：他能够看到这个基站区域内所有用户收到的短信，而且用户毫无知觉。就像是一条颠末专业训练的狗，悄无声息地分辨事物，因而也被专业人士叫做“短信嗅探”技术。&lt;/p&gt;
&lt;p&gt;骗子通过该技术，能够看到该基站用户的所有短信内容&lt;/p&gt;
&lt;p&gt;二、你永久不知道骗子有多狡猾&lt;/p&gt;
&lt;p&gt;骗子劫持短信内容，目的只要一个，就是通过盗刷、贷款等手段要你的钱，这一切的前提就是要得到你的底子信息：姓名、手机号码、身份证号、银行卡账号、验证码。因为很多网站（搜罗网银APP）采纳是“账号+手机+验证码”的宁静策略，不需密码也能登录。&lt;/p&gt;
&lt;p&gt;那么，在操做“GSM劫持+短信嗅探”技术获得用户的短信后，他们怎么获取其他信息呢，这就要操做各大公司提供的“便当”了。&lt;/p&gt;
&lt;p&gt;好比：骗子劫持到中国挪动139邮箱发送来的短信后，复制此中的链接到阅读器，点击“进入掌上营业厅”，就能够间接看到手机号了。说实话，要不是骗子交待，恐怕很多人还不知道，不信你能够马上尝尝。&lt;/p&gt;
&lt;p&gt;只需要劫持到139邮箱短信，就能够知道用户手机号码&lt;/p&gt;
&lt;p&gt;知道了手机号以后，再通过登录其他一些网站，操做社工手段就能够很轻松地知道这个人的银行卡账号、身份证号。&lt;/p&gt;
&lt;p&gt;看终结诈骗发布的动静看到这里&lt;/p&gt;
&lt;p&gt;连反诈君都连连冒冷汗&lt;/p&gt;
&lt;p&gt;反诈君不得不感慨&lt;/p&gt;
&lt;p&gt;这确实比较可怕&lt;/p&gt;
&lt;p&gt;三、后果有哪些&lt;/p&gt;
&lt;p&gt;“姓名、手机号、身份证号、银行卡账号、验证码”这些信息上当子掌握以后，成果主要有三类：&lt;/p&gt;
&lt;p&gt;1、个人信息被泄露&lt;/p&gt;
&lt;p&gt;很多网站都是“手机号+验证码”的登录方式，而骗子又能够实时监控到验证码，所以很容易就能够登录。即便采纳了“手机号+密码”的方式，但只要点击“忘记密码”，就能够通过验证码来找回密码，同样能够便利登录。尝试室测试了几个主流网站，都能顺利登录，查看到商品订单、行程信息、支付信息等，而且还能够间接更改登录密码。&lt;/p&gt;
&lt;p&gt;某购物网站能够方面地停止修改密码操做&lt;/p&gt;
&lt;p&gt;2、资金被盗刷&lt;/p&gt;
&lt;p&gt;通过犯功嫌疑人的供述和尝试室的测试，很多银行的官网宁静策略虽然很高，但是一些APP的宁静策略低得要命，不少APP只要输入“姓名+银行卡账号+身份证号码+手机号码+动态验证码”，就默认是本人操做，骗子进入以后马上就会盗刷或者购置点卡类虚拟物品。&lt;/p&gt;
&lt;p&gt;3、其他网络犯功&lt;/p&gt;
&lt;p&gt;有些嫌疑人刷完了银行卡中的钱，还会通过这些信息在一些小的贷款网站、平台申请小额贷款，让受害人不但积蓄全无，还会背负债务。&lt;/p&gt;
&lt;p&gt;四、哪些人最危险？&lt;/p&gt;
&lt;p&gt;骗子操做的是黑客公布的“GSM劫持”技术。因而，只要手机用了GSM网络，城市存在这种风险。&lt;/p&gt;
&lt;p&gt;所谓GSM，是全球挪动通信系统(Global System for Mobile communications) 的简称。由于它的信令和语音信道是数字式的，和以前模仿蜂窝技术尺度有很大不同，因而又被称做是第二代挪动电话系统，也就是我们常说的2G。GSM尺度的设备几乎占了全球市场的80%以上。&lt;/p&gt;
&lt;p&gt;在2G通信网络下，国内使用的GSM通信协议，存在鉴权弱、短信明文传输的短处，很容易会被劫持嗅探到。而在我们国家，由于挪动和联通的2G是GSM网络制式，所以中国挪动和中国联通的用户是这种劫持技术的风险客户。在警方侦办的案例中，尚未发现中国电信誉户遭受该类技术攻击的情况。&lt;/p&gt;
&lt;p&gt;五、到底该怎么防备、反制？&lt;/p&gt;
&lt;p&gt;面对这种技术攻击，对于个人来说，方法极其有限和被动，更关键的是需要挪动和联通运营商、挪动应用和网站效劳提供商共同勤奋。&lt;/p&gt;
&lt;p&gt;那么，对于咱广阔手机用户到底该怎么防备？&lt;/p&gt;
&lt;p&gt;1、睡觉前关机或者把手机调成飞行形式，因为这样手机信号就无法被劫持，而此类犯功也底子发生在后三鼓。&lt;/p&gt;
&lt;p&gt;2、看到奇异的验证码和短信，要马上意识到可能已被劫持攻击，要马上联络短信所属的挪动应用和网站效劳提供商，并可考虑暂时关机。&lt;/p&gt;
&lt;p&gt;3、假如本人的手机信号突然从4G降到2G，可能会上当子降维攻击，请马上启动飞行形式。&lt;/p&gt;
&lt;p&gt;4、平常保护好个人的账号、手机号、身份证号等敏感信息。&lt;/p&gt;
&lt;p&gt;你能否有上当的经历？欢送分享你的经历，&lt;/p&gt;
&lt;p&gt;提醒更多人！&lt;/p&gt;
&lt;p&gt;— THE END —&lt;/p&gt;
&lt;p&gt;原文来自https://www.69696.org/content-61226-1-1.html&lt;/p&gt;
</description>
<pubDate>Sun, 17 Jun 2018 15:35:00 +0000</pubDate>
<dc:creator>六九金服</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/69jinfu/p/9194098.html</dc:identifier>
</item>
<item>
<title>AFNetworking封装-项目使用 - 国孩</title>
<link>http://www.cnblogs.com/guohai-stronger/p/9193465.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/guohai-stronger/p/9193465.html</guid>
<description>&lt;p&gt;本篇博客是接着上一篇AFNetworking源码解析的后续，如果想对AFNetworking源码有所了解。&lt;/p&gt;
&lt;p&gt;请读一下&lt;a href=&quot;https://www.cnblogs.com/guohai-stronger/p/9191497.html&quot; target=&quot;_blank&quot;&gt;https://www.cnblogs.com/guohai-stronger/p/9191497.html&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;这篇博客主要是对AFNetworking代码进行封装，也是自己在实际项目中所使用过的（对中小型企业或者项目）可直接使用，也会在github上传（偷偷窃喜一下，一直想在github上有所项目，一直没有时间），趁着端午几天有时间，给github贡献点自己力量。本篇读下来大约10-15分钟，欢迎指正。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;一.结构解析&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;最核心（可直接拖拽到新项目中）&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1305302/201806/1305302-20180617190641818-226021407.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;(拓展cocoapods的拖入) 拖入之前，需要导入AFNetworking，最好利用cocoapods导入，cocoapods导入时&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;vim Podfile     ---&amp;gt;输入i&lt;/code&gt;
&lt;/pre&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
platform :ios, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;8.0&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;

target &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;targetName&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;do&lt;/span&gt;&lt;span&gt;

pod &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;AFNetworking&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;

end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;（有一点在&lt;strong&gt;然后按Esc，并且输入“ ：”号进入vim命令模式，然后在冒号后边输入wq&lt;/strong&gt;）最后pod install。编译一下，拖入项目的类就好了，就不会编译错误。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;二.分类讲解&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1.Singleton&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#import&lt;/span&gt; &amp;lt;UIKit/UIKit.h&amp;gt;
&lt;span&gt;//////////////////////////////////////////////////////////////////////////////&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 申明和定义单例对象:
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; AS_SINGLETON( XxxClass );
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; DEF_SINGLETON( XxxClass );&lt;/span&gt;
&lt;span&gt;#undef&lt;/span&gt;    AS_SINGLETON
&lt;span&gt;#define&lt;/span&gt; AS_SINGLETON( __class ) \
- (__class *&lt;span&gt;)sharedInstance; \
&lt;/span&gt;+ (__class *&lt;span&gt;)sharedInstance;

&lt;/span&gt;&lt;span&gt;#undef&lt;/span&gt;    DEF_SINGLETON
&lt;span&gt;#define&lt;/span&gt; DEF_SINGLETON( __class ) \
- (__class *&lt;span&gt;)sharedInstance \
{ \
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; [__class sharedInstance]; \
} \
&lt;/span&gt;+ (__class *&lt;span&gt;)sharedInstance \
{ \
    &lt;/span&gt;&lt;span&gt;static&lt;/span&gt;&lt;span&gt; dispatch_once_t once; \
    &lt;/span&gt;&lt;span&gt;static&lt;/span&gt; __class *&lt;span&gt; __singleton__; \
    dispatch_once( &lt;/span&gt;&amp;amp;once, ^{ __singleton__ = [[[self &lt;span&gt;class&lt;/span&gt;&lt;span&gt;] alloc] init]; } ); \
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; __singleton__; \
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;通过Singleton，来声明和定义单例对象。&lt;/p&gt;
&lt;p&gt;声明单例&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 声明单例&lt;/span&gt;
AS_SINGLETON(APIClient);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;定义单例&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 定义单例&lt;/span&gt;
DEF_SINGLETON(APIClient);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;2.APIClient.h&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;（1）请求响应的状态&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 请求响应的状态&lt;/span&gt;
&lt;span&gt;typedef NS_ENUM(NSInteger, ApiRequestStatusCode) {
    ApiRequestNotReachable &lt;/span&gt;= -&lt;span&gt;2&lt;/span&gt;,    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 当前网络已断开&lt;/span&gt;
    ApiRequestErr          = -&lt;span&gt;1&lt;/span&gt;,    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 请求出错&lt;/span&gt;
    ApiRequestOK           = &lt;span&gt;0&lt;/span&gt;,     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 请求成功&lt;/span&gt;
};
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;当时的请求响应状态只有三个，故定义一个枚举表示请求响应的状态。&lt;/p&gt;
&lt;p&gt;（2）请求的方法类型&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;46&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 请求的方法类型&lt;/span&gt;
&lt;span&gt;typedef NS_ENUM(NSInteger, HttpMethod) {
    GET         &lt;/span&gt;= &lt;span&gt;0&lt;/span&gt;&lt;span&gt;,
    POST        &lt;/span&gt;= &lt;span&gt;1&lt;/span&gt;&lt;span&gt;,
    DELETE      &lt;/span&gt;= &lt;span&gt;2&lt;/span&gt;&lt;span&gt;,
    PUT         &lt;/span&gt;= &lt;span&gt;3&lt;/span&gt;&lt;span&gt;,
    PATH_GET    &lt;/span&gt;= &lt;span&gt;4&lt;/span&gt;, &lt;span&gt;//&lt;/span&gt;&lt;span&gt; GET请求,填充参数到url上,处理@&quot;user/account/check/{phone}&quot;,{phone}这种情况&lt;/span&gt;
    QUERY_GET   = &lt;span&gt;5&lt;/span&gt;, &lt;span&gt;//&lt;/span&gt;&lt;span&gt; GET请求,填充query参数到url上,处理&quot;?a=1&amp;amp;b=2&quot;这种情况&lt;/span&gt;
};
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;（3）请求相应的block&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 请求响应Block&lt;/span&gt;
typedef &lt;span&gt;void&lt;/span&gt; (^APIClientRequestResponse)(ApiRequestStatusCode requestStatusCode, &lt;span&gt;id&lt;/span&gt; JSON);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;（4）通过设置代理拦截成功响应数据&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;@protocol&lt;/span&gt; APIClientDelegate &amp;lt;NSObject&amp;gt;&lt;span&gt;

@required
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 拦截成功请求响应数据进行处理&lt;/span&gt;
- (&lt;span&gt;void&lt;/span&gt;)handleSuccessRequest:(&lt;span&gt;id&lt;/span&gt;)JSON completion:(&lt;span&gt;void&lt;/span&gt;(^)(&lt;span&gt;id&lt;/span&gt;&lt;span&gt; aJSON))cb;

&lt;/span&gt;&lt;span&gt;@end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在.h中还有一些方法属性&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 为处理拦截的响应数据而设置的委托&lt;/span&gt;
@property (nonatomic, weak) &lt;span&gt;id&lt;/span&gt;&amp;lt;APIClientDelegate&amp;gt; &lt;span&gt;delegate&lt;/span&gt;&lt;span&gt;;

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 声明单例&lt;/span&gt;
&lt;span&gt;AS_SINGLETON(APIClient);

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 获取当前的网络状态类型(返回:0-No wifi or cellular(无网络), 1-2G, 2-3G, 3-4G, 4-LTE, 5-wifi)&lt;/span&gt;
+ (&lt;span&gt;int&lt;/span&gt;&lt;span&gt;)networkType;

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 网络状态监听，应用当前是否有网络:有返回YES,没有返回NO&lt;/span&gt;
+ (&lt;span&gt;void&lt;/span&gt;)networkReachableWithBlock:(&lt;span&gt;void&lt;/span&gt;(^&lt;span&gt;)(BOOL isReachable))block;

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 发送请求，返回JSON格式的响应数据&lt;/span&gt;
+ (&lt;span&gt;void&lt;/span&gt;)requestURL:(NSString *&lt;span&gt;)urlString
        httpMethod:(HttpMethod)method
            &lt;/span&gt;&lt;span&gt;params&lt;/span&gt;:(NSDictionary *)&lt;span&gt;params&lt;/span&gt;&lt;span&gt;
          response:(APIClientRequestResponse)response;

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 取消掉所有网络请求&lt;/span&gt;
+ (&lt;span&gt;void&lt;/span&gt;)cancelAllRequest;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;3.APIClient.m&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;(1)创建请求管理对象&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
@property (nonatomic, strong) AFHTTPSessionManager *manager;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;(2)获取当前的网络状态类型&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 获取当前的网络状态类型(返回:0-No wifi or cellular(无网络), 1-2G, 2-3G, 3-4G, 4-LTE, 5-wifi)&lt;/span&gt;
+ (&lt;span&gt;int&lt;/span&gt;&lt;span&gt;)networkType {
    NSArray &lt;/span&gt;*subviews = [[[[UIApplication sharedApplication] valueForKey:&lt;span&gt;@&quot;&lt;/span&gt;&lt;span&gt;statusBar&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;] valueForKey:&lt;span&gt;@&quot;&lt;/span&gt;&lt;span&gt;foregroundView&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;]subviews];
    NSNumber &lt;/span&gt;*dataNetworkItemView =&lt;span&gt; nil;
    
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;id&lt;/span&gt; subview &lt;span&gt;in&lt;/span&gt;&lt;span&gt; subviews) {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;([subview isKindOfClass:[NSClassFromString(&lt;span&gt;@&quot;&lt;/span&gt;&lt;span&gt;UIStatusBarDataNetworkItemView&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;) &lt;span&gt;class&lt;/span&gt;&lt;span&gt;]]) {
            dataNetworkItemView &lt;/span&gt;=&lt;span&gt; subview;
            &lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
        }
    }
    &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; ret = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;switch&lt;/span&gt; ([[dataNetworkItemView valueForKey:&lt;span&gt;@&quot;&lt;/span&gt;&lt;span&gt;dataNetworkType&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;] integerValue]) {
        &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;:
            ret &lt;/span&gt;= &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;1&lt;/span&gt;&lt;span&gt;:
            ret &lt;/span&gt;= &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;2&lt;/span&gt;&lt;span&gt;:
            ret &lt;/span&gt;= &lt;span&gt;2&lt;/span&gt;&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;3&lt;/span&gt;&lt;span&gt;:
            ret &lt;/span&gt;= &lt;span&gt;3&lt;/span&gt;&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;4&lt;/span&gt;&lt;span&gt;:
            ret &lt;/span&gt;= &lt;span&gt;4&lt;/span&gt;&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;case&lt;/span&gt; &lt;span&gt;5&lt;/span&gt;&lt;span&gt;:
            ret &lt;/span&gt;= &lt;span&gt;5&lt;/span&gt;&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;default&lt;/span&gt;&lt;span&gt;:
            &lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
    }
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; ret;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;(3)网络状态监听，应用当前是否有网络&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 网络状态监听，应用当前是否有网络&lt;/span&gt;
+ (&lt;span&gt;void&lt;/span&gt;)networkReachableWithBlock:(&lt;span&gt;void&lt;/span&gt;(^&lt;span&gt;)(BOOL isReachable))block {
    [[AFNetworkReachabilityManager sharedManager] startMonitoring];
    
    [[AFNetworkReachabilityManager sharedManager] setReachabilityStatusChangeBlock:&lt;/span&gt;^&lt;span&gt;(AFNetworkReachabilityStatus status) {
        &lt;/span&gt;&lt;span&gt;switch&lt;/span&gt;&lt;span&gt; (status) {
            &lt;/span&gt;&lt;span&gt;case&lt;/span&gt;&lt;span&gt; AFNetworkReachabilityStatusReachableViaWWAN:
            &lt;/span&gt;&lt;span&gt;case&lt;/span&gt;&lt;span&gt; AFNetworkReachabilityStatusReachableViaWiFi: {
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (block) {
                    block(YES);
                }
                &lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
            }
            &lt;/span&gt;&lt;span&gt;case&lt;/span&gt;&lt;span&gt; AFNetworkReachabilityStatusNotReachable: {
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (block) {
                    block(NO);
                }
                &lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
            }
            &lt;/span&gt;&lt;span&gt;default&lt;/span&gt;&lt;span&gt;:
                &lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
        }
    }];
    
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;结束监听
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;[[AFNetworkReachabilityManager sharedManager] stopMonitoring];&lt;/span&gt;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;(3)请求最重要最核心的代码&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;68&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 发送请求，返回JSON格式的响应数据&lt;/span&gt;
+ (&lt;span&gt;void&lt;/span&gt;)requestURL:(NSString *&lt;span&gt;)urlString
        httpMethod:(HttpMethod)method
            &lt;/span&gt;&lt;span&gt;params&lt;/span&gt;:(NSDictionary *)&lt;span&gt;params&lt;/span&gt;&lt;span&gt;
          response:(APIClientRequestResponse)response {
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; ([APIClient networkType] &amp;gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;) {
        APIClient &lt;/span&gt;*client =&lt;span&gt; [APIClient sharedInstance];
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;client.manager) {
            AFHTTPSessionManager &lt;/span&gt;*manager =&lt;span&gt; [AFHTTPSessionManager manager];
            manager.requestSerializer.timeoutInterval &lt;/span&gt;= &lt;span&gt;30&lt;/span&gt;&lt;span&gt;;
            manager.requestSerializer     &lt;/span&gt;=&lt;span&gt; [AFHTTPRequestSerializer serializer];
            manager.responseSerializer    &lt;/span&gt;=&lt;span&gt; [AFJSONResponseSerializer serializer];
            AFJSONResponseSerializer &lt;/span&gt;*responseSerializer =&lt;span&gt; [AFJSONResponseSerializer serializerWithReadingOptions:NSJSONReadingAllowFragments];
            manager.responseSerializer &lt;/span&gt;=&lt;span&gt; responseSerializer;
            manager.responseSerializer.acceptableContentTypes &lt;/span&gt;= [NSSet setWithObjects:&lt;span&gt;@&quot;&lt;/span&gt;&lt;span&gt;application/json&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;@&quot;&lt;/span&gt;&lt;span&gt;text/json&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;@&quot;&lt;/span&gt;&lt;span&gt;text/javascript&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;@&quot;&lt;/span&gt;&lt;span&gt;text/html&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;@&quot;&lt;/span&gt;&lt;span&gt;text/plain&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;@&quot;&lt;/span&gt;&lt;span&gt;application/x-www-form-urlencodem&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, nil];
            
            
            client.manager &lt;/span&gt;=&lt;span&gt; manager;
        }
        
        __weak &lt;/span&gt;&lt;span&gt;typeof&lt;/span&gt;(self)weakSelf =&lt;span&gt; self;
        &lt;/span&gt;&lt;span&gt;switch&lt;/span&gt;&lt;span&gt; (method) {
            &lt;/span&gt;&lt;span&gt;case&lt;/span&gt;&lt;span&gt; PATH_GET: {
                urlString &lt;/span&gt;= [APIClient pathGet:urlString &lt;span&gt;params&lt;/span&gt;:&lt;span&gt;params&lt;/span&gt;&lt;span&gt;];
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;                &lt;span&gt;//&lt;/span&gt;&lt;span&gt;LOG(@&quot;PATH_GET http_url:%@&quot;,urlString);&lt;/span&gt;
&lt;span&gt;                [client.manager GET:urlString
                         parameters:nil
                           progress:nil
                            success:&lt;/span&gt;^(NSURLSessionDataTask * __unused task, &lt;span&gt;id&lt;/span&gt;&lt;span&gt; JSON) {
                                __strong &lt;/span&gt;&lt;span&gt;typeof&lt;/span&gt;(weakSelf)strongSelf =&lt;span&gt; weakSelf;
                                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (strongSelf) {
                                    [strongSelf handleSuccessRequest:JSON cb:response];
                                }
                            }
                            failure:&lt;/span&gt;^(NSURLSessionDataTask *__unused task, NSError *&lt;span&gt;error) {
                                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (response) {
                                    response(ApiRequestErr, nil);
                                }
                            }];
                &lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
            }
            &lt;/span&gt;&lt;span&gt;case&lt;/span&gt;&lt;span&gt; QUERY_GET: {
                urlString &lt;/span&gt;= [APIClient queryGet:urlString &lt;span&gt;params&lt;/span&gt;:&lt;span&gt;params&lt;/span&gt;&lt;span&gt;];
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;LOG(@&quot;QUERY_GET http_url:%@&quot;,urlString);&lt;/span&gt;
&lt;span&gt;                [client.manager GET:urlString
                         parameters:nil
                           progress:nil
                            success:&lt;/span&gt;^(NSURLSessionDataTask * __unused task, &lt;span&gt;id&lt;/span&gt;&lt;span&gt; JSON) {
                                __strong &lt;/span&gt;&lt;span&gt;typeof&lt;/span&gt;(weakSelf)strongSelf =&lt;span&gt; weakSelf;
                                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (strongSelf) {
                                    [strongSelf handleSuccessRequest:JSON cb:response];
                                }
                            }
                            failure:&lt;/span&gt;^(NSURLSessionDataTask *__unused task, NSError *&lt;span&gt;error) {
                                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (response) {
                                    response(ApiRequestErr, nil);
                                }
                            }];
                &lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
            }
            &lt;/span&gt;&lt;span&gt;case&lt;/span&gt;&lt;span&gt; GET: {
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;                &lt;span&gt;//&lt;/span&gt;&lt;span&gt;LOG(@&quot;GET http_url:%@&quot;,urlString);&lt;/span&gt;
&lt;span&gt;                [client.manager GET:urlString
                  parameters:nil
                    progress:nil
                     success:&lt;/span&gt;^(NSURLSessionDataTask * __unused task, &lt;span&gt;id&lt;/span&gt;&lt;span&gt; JSON) {
                         __strong &lt;/span&gt;&lt;span&gt;typeof&lt;/span&gt;(weakSelf)strongSelf =&lt;span&gt; weakSelf;
                         &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (strongSelf) {
                             [strongSelf handleSuccessRequest:JSON cb:response];
                         }
                     }
                     failure:&lt;/span&gt;^(NSURLSessionDataTask *__unused task, NSError *&lt;span&gt;error) {
                         &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (response) {
                             response(ApiRequestErr, nil);
                             &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;LOG(@&quot;GET http_url:%@&quot;,urlString);&lt;/span&gt;
&lt;span&gt;                         }
                     }];
                &lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
            }
            &lt;/span&gt;&lt;span&gt;case&lt;/span&gt;&lt;span&gt; POST: {
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;                &lt;span&gt;//&lt;/span&gt;&lt;span&gt;LOG(@&quot;POST http_url:%@&quot;,urlString);&lt;/span&gt;
&lt;span&gt;                [client.manager POST:urlString
                   parameters:&lt;/span&gt;&lt;span&gt;params&lt;/span&gt;&lt;span&gt;
                     progress:nil
                      success:&lt;/span&gt;^(NSURLSessionDataTask * __unused task, &lt;span&gt;id&lt;/span&gt;&lt;span&gt; JSON) {
                          __strong &lt;/span&gt;&lt;span&gt;typeof&lt;/span&gt;(weakSelf)strongSelf =&lt;span&gt; weakSelf;
                          &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (strongSelf) {
                              [strongSelf handleSuccessRequest:JSON cb:response];
                          }
                      }
                      failure:&lt;/span&gt;^(NSURLSessionDataTask *__unused task, NSError *&lt;span&gt;error) {
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;                          &lt;span&gt;//&lt;/span&gt;&lt;span&gt;LOG(@&quot;%@&quot;,error);&lt;/span&gt;
                          &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (response) {
                              response(ApiRequestErr, nil);
                          }
                      }];
                &lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
            }
            &lt;/span&gt;&lt;span&gt;case&lt;/span&gt;&lt;span&gt; DELETE: {
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;LOG(@&quot;DELETE http_url:%@&quot;,urlString);&lt;/span&gt;
&lt;span&gt;                [client.manager DELETE:urlString
                     parameters:nil
                        success:&lt;/span&gt;^(NSURLSessionDataTask * __unused task, &lt;span&gt;id&lt;/span&gt;&lt;span&gt; JSON) {
                            __strong &lt;/span&gt;&lt;span&gt;typeof&lt;/span&gt;(weakSelf)strongSelf =&lt;span&gt; weakSelf;
                            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (strongSelf) {
                                [strongSelf handleSuccessRequest:JSON cb:response];
                            }
                        }
                        failure:&lt;/span&gt;^(NSURLSessionDataTask *__unused task, NSError *&lt;span&gt;error) {
                            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (response) {
                                response(ApiRequestErr, nil);
                            }
                        }];
                &lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
            }
            &lt;/span&gt;&lt;span&gt;case&lt;/span&gt;&lt;span&gt; PUT: {
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;LOG(@&quot;PUT http_url:%@&quot;,urlString);&lt;/span&gt;
&lt;span&gt;                [client.manager PUT:urlString
                  parameters:&lt;/span&gt;&lt;span&gt;params&lt;/span&gt;&lt;span&gt;
                     success:&lt;/span&gt;^(NSURLSessionDataTask * __unused task, &lt;span&gt;id&lt;/span&gt;&lt;span&gt; JSON) {
                         __strong &lt;/span&gt;&lt;span&gt;typeof&lt;/span&gt;(weakSelf)strongSelf =&lt;span&gt; weakSelf;
                         &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (strongSelf) {
                             [strongSelf handleSuccessRequest:JSON cb:response];
                         }
                     }
                     failure:&lt;/span&gt;^(NSURLSessionDataTask *__unused task, NSError *&lt;span&gt;error) {
                         &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (response) {
                             response(ApiRequestErr, nil);
                         }
                     }];
                &lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
            }
        }
    } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; { &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 没有连接网络&lt;/span&gt;
        &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (response)
            response(ApiRequestNotReachable, nil);
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;(4)统一处理响应数据&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 统一处理响应数据&lt;/span&gt;
+ (&lt;span&gt;void&lt;/span&gt;)handleSuccessRequest:(&lt;span&gt;id&lt;/span&gt;)JSON cb:(&lt;span&gt;void&lt;/span&gt;(^)(ApiRequestStatusCode requestStatusCode, &lt;span&gt;id&lt;/span&gt;&lt;span&gt; JSON))cb {
    APIClient &lt;/span&gt;*client =&lt;span&gt; [APIClient sharedInstance];
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (client.&lt;span&gt;delegate&lt;/span&gt; &amp;amp;&amp;amp; [client.&lt;span&gt;delegate&lt;/span&gt;&lt;span&gt; respondsToSelector:@selector(handleSuccessRequest:completion:)]) {
        [client.&lt;/span&gt;&lt;span&gt;delegate&lt;/span&gt;&lt;span&gt; handleSuccessRequest:JSON
                              completion:&lt;/span&gt;^(&lt;span&gt;id&lt;/span&gt;&lt;span&gt; aJSON) {
                                  &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (cb) {
                                      cb(ApiRequestOK, aJSON);
                                  }
                              }];
    } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (cb) {
            cb(ApiRequestOK, JSON);
        }
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;(5)参数拼接&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 填充参数到url上,处理@&quot;user/account/check/{phone}&quot;,{phone}这种情况&lt;/span&gt;
+ (NSString *)pathGet:(NSString *&lt;span&gt;)uri
               &lt;/span&gt;&lt;span&gt;params&lt;/span&gt;:(NSDictionary *)&lt;span&gt;params&lt;/span&gt;&lt;span&gt; {
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (nil == uri|| nil == &lt;span&gt;params&lt;/span&gt; || &lt;span&gt;params&lt;/span&gt;.count &amp;lt;= &lt;span&gt;0&lt;/span&gt;&lt;span&gt;) {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt;  uri;
    }
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (NSString *key &lt;span&gt;in&lt;/span&gt; &lt;span&gt;params&lt;/span&gt;&lt;span&gt;) {
        NSString &lt;/span&gt;*key2 = [NSString stringWithFormat:&lt;span&gt;@&quot;&lt;/span&gt;&lt;span&gt;{%@}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,key];
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; ([uri rangeOfString:key2].location !=&lt;span&gt; NSNotFound) {
            uri &lt;/span&gt;= [uri stringByReplacingOccurrencesOfString:key2 withString:&lt;span&gt;params&lt;/span&gt;&lt;span&gt;[key]];
        }
    }
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; [uri stringByAddingPercentEscapesUsingEncoding:NSUTF8StringEncoding];
}

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 填充query参数到url上,处理&quot;?a=1&amp;amp;b=2&quot;这种情况&lt;/span&gt;
+ (NSString *)queryGet:(NSString *&lt;span&gt;)uri
                &lt;/span&gt;&lt;span&gt;params&lt;/span&gt;:(NSDictionary *)&lt;span&gt;params&lt;/span&gt;&lt;span&gt; {
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (nil == uri || nil == &lt;span&gt;params&lt;/span&gt; || &lt;span&gt;params&lt;/span&gt;.count &amp;lt;= &lt;span&gt;0&lt;/span&gt;&lt;span&gt;) {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt;  uri;
    }
    NSMutableString &lt;/span&gt;*tmpUri =&lt;span&gt; [NSMutableString stringWithString:uri];
    &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (NSString *key &lt;span&gt;in&lt;/span&gt; &lt;span&gt;params&lt;/span&gt;&lt;span&gt;) {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (i == &lt;span&gt;0&lt;/span&gt;&lt;span&gt;) {
            [tmpUri appendFormat:&lt;/span&gt;&lt;span&gt;@&quot;&lt;/span&gt;&lt;span&gt;?%@=%@&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,key, &lt;span&gt;params&lt;/span&gt;&lt;span&gt;[key]];
        } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
            [tmpUri appendFormat:&lt;/span&gt;&lt;span&gt;@&quot;&lt;/span&gt;&lt;span&gt;&amp;amp;%@=%@&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,key, &lt;span&gt;params&lt;/span&gt;&lt;span&gt;[key]];
        }
        i&lt;/span&gt;++&lt;span&gt;;
    }
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; [tmpUri stringByAddingPercentEscapesUsingEncoding:NSUTF8StringEncoding];;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;(6)取消所有网络请求&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 取消掉所有网络请求&lt;/span&gt;
+ (&lt;span&gt;void&lt;/span&gt;&lt;span&gt;)cancelAllRequest {
    APIClient &lt;/span&gt;*client =&lt;span&gt; [APIClient sharedInstance];
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (client.manager) {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (client.manager.operationQueue) {
            [client.manager.operationQueue cancelAllOperations];
        }
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上面就是代码的主要封装，可以应对中小型企业和App的要求。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;三.使用&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1.新建API.h继承NSObject&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1305302/201806/1305302-20180617201525627-316037483.png&quot; alt=&quot;&quot; width=&quot;604&quot; height=&quot;177&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.在API.m使用&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1305302/201806/1305302-20180617201628949-1110598498.png&quot; alt=&quot;&quot; width=&quot;603&quot; height=&quot;180&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3.在控制器里面调用如下&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt; WS(weakSelf);
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; ([APIClient networkType] &amp;gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;){
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;获取个人界面的信息&lt;/span&gt;
        [API1 getEvaluateMeDataWithCB:^(ApiRequestStatusCode requestStatusCode, &lt;span&gt;id&lt;/span&gt;&lt;span&gt; JSON) {
            &lt;/span&gt;&lt;span&gt;switch&lt;/span&gt;&lt;span&gt; (requestStatusCode) {
                &lt;/span&gt;&lt;span&gt;case&lt;/span&gt;&lt;span&gt; ApiRequestOK: {
                    //正确解析json，以及UI处理&lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
                    }
                }
                &lt;/span&gt;&lt;span&gt;case&lt;/span&gt;&lt;span&gt; ApiRequestErr:
                    [MBProgressHUD showError:kErrTip];
                    &lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
                &lt;/span&gt;&lt;span&gt;case&lt;/span&gt;&lt;span&gt; ApiRequestNotReachable:
                    [MBProgressHUD showError:kNotReachableTip];
                    &lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
                &lt;/span&gt;&lt;span&gt;default&lt;/span&gt;&lt;span&gt;:
                    &lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
            }
        }];
    }&lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;{
        [MBProgressHUD showError:kNotReachableTip];
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上面就是针对AFNetworking的简单封装，可以满足网络请求的封装。&lt;/p&gt;
&lt;p&gt;本次代码的demo已上传git。&lt;span&gt;github地址&lt;/span&gt;：&lt;a href=&quot;https://github.com/zxy1829760/testAF&quot; target=&quot;_blank&quot;&gt;https://github.com/zxy1829760/testAF&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;欢迎指正。&lt;/p&gt;

</description>
<pubDate>Sun, 17 Jun 2018 15:32:00 +0000</pubDate>
<dc:creator>国孩</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/guohai-stronger/p/9193465.html</dc:identifier>
</item>
<item>
<title>Spring Cloud OAuth2（二） 扩展登陆方式：账户密码登陆、 手机验证码登陆、 二维码扫码登陆 - 明月新</title>
<link>http://www.cnblogs.com/fp2952/p/9193959.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/fp2952/p/9193959.html</guid>
<description>&lt;h2 id=&quot;概要&quot;&gt;概要&lt;/h2&gt;
&lt;p&gt;基于上文讲解的spring cloud 授权服务的搭建，本文扩展了spring security 的登陆方式，增加手机验证码登陆、二维码登陆。 主要实现方式为使用自定义filter、 AuthenticationProvider、 AbstractAuthenticationToken 根据不同登陆方式分别处理。 本文相应代码在Github上已更新。&lt;br/&gt;GitHub 地址：&lt;a href=&quot;https://github.com/fp2952/spring-cloud-base/tree/master/auth-center/auth-center-provider&quot; class=&quot;uri&quot;&gt;https://github.com/fp2952/spring-cloud-base/tree/master/auth-center/auth-center-provider&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;srping-security-登陆流程&quot;&gt;srping security 登陆流程&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;http://112.74.60.248:8080/image/securitylogin.png&quot; alt=&quot;avatar&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;关于二维码登陆&quot;&gt;关于二维码登陆&lt;/h2&gt;
&lt;p&gt;二维码扫码登陆前提是已在微信端登陆，流程如下：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;用户点击二维码登陆，调用后台接口生成二维码(带参数key), 返回二维码链接、key到页面&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;页面显示二维码，提示扫码，并通过此key建立websocket&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;用户扫码，获取参数key，点击登陆调用后台并传递key&lt;/li&gt;
&lt;li&gt;后台根据微信端用户登陆状态拿到userdetail, 并在缓存（redis）中维护 key: userDetail 关联关系&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;后台根据websocket: key通知对于前台页面登陆&lt;/li&gt;
&lt;li&gt;页面用此key登陆&lt;br/&gt;最后一步用户通过key登陆就是本文的二维码扫码登陆部分，实际过程中注意二维码超时，redis超时等处理&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;自定义loginfilter&quot;&gt;自定义LoginFilter&lt;/h2&gt;
&lt;p&gt;自定义过滤器，实现AbstractAuthenticationProcessingFilter，在attemptAuthentication方法中根据不同登陆类型获取对于参数、 并生成自定义的 MyAuthenticationToken。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;    @Override
    public Authentication attemptAuthentication(HttpServletRequest request, HttpServletResponse response) throws AuthenticationException, IOException, ServletException {
        if (postOnly &amp;amp;&amp;amp; !request.getMethod().equals(&quot;POST&quot;)) {
            throw new AuthenticationServiceException(
                    &quot;Authentication method not supported: &quot; + request.getMethod());
        }

        // 登陆类型：user:用户密码登陆；phone:手机验证码登陆；qr:二维码扫码登陆
        String type = obtainParameter(request, &quot;type&quot;);
        String mobile = obtainParameter(request, &quot;mobile&quot;);
        MyAuthenticationToken authRequest;
        String principal;
        String credentials;

        // 手机验证码登陆
        if(&quot;phone&quot;.equals(type)){
            principal = obtainParameter(request, &quot;phone&quot;);
            credentials = obtainParameter(request, &quot;verifyCode&quot;);
        }
        // 二维码扫码登陆
        else if(&quot;qr&quot;.equals(type)){
            principal = obtainParameter(request, &quot;qrCode&quot;);
            credentials = null;
        }
        // 账号密码登陆
        else {
            principal = obtainParameter(request, &quot;username&quot;);
            credentials = obtainParameter(request, &quot;password&quot;);
            if(type == null)
                type = &quot;user&quot;;
        }
        if (principal == null) {
            principal = &quot;&quot;;
        }
        if (credentials == null) {
            credentials = &quot;&quot;;
        }
        principal = principal.trim();
        authRequest = new MyAuthenticationToken(
                principal, credentials, type, mobile);
        // Allow subclasses to set the &quot;details&quot; property
        setDetails(request, authRequest);
        return this.getAuthenticationManager().authenticate(authRequest);
    }

    private void setDetails(HttpServletRequest request,
                            AbstractAuthenticationToken authRequest) {
        authRequest.setDetails(authenticationDetailsSource.buildDetails(request));
    }

    private String obtainParameter(HttpServletRequest request, String parameter) {
        return request.getParameter(parameter);
    }&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;自定义-abstractauthenticationtoken&quot;&gt;自定义 AbstractAuthenticationToken&lt;/h2&gt;
&lt;p&gt;继承 AbstractAuthenticationToken，添加属性 type，用于后续判断。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;public class MyAuthenticationToken extends AbstractAuthenticationToken {

    private static final long serialVersionUID = 110L;
    private final Object principal;
    private Object credentials;
    private String type;
    private String mobile;

    /**
     * This constructor can be safely used by any code that wishes to create a
     * &amp;lt;code&amp;gt;UsernamePasswordAuthenticationToken&amp;lt;/code&amp;gt;, as the {@link
     * #isAuthenticated()} will return &amp;lt;code&amp;gt;false&amp;lt;/code&amp;gt;.
     *
     */
    public MyAuthenticationToken(Object principal, Object credentials,String type, String mobile) {
        super(null);
        this.principal = principal;
        this.credentials = credentials;
        this.type = type;
        this.mobile = mobile;
        this.setAuthenticated(false);
    }

    /**
     * This constructor should only be used by &amp;lt;code&amp;gt;AuthenticationManager&amp;lt;/code&amp;gt; or &amp;lt;code&amp;gt;AuthenticationProvider&amp;lt;/code&amp;gt;
     * implementations that are satisfied with producing a trusted (i.e. {@link #isAuthenticated()} = &amp;lt;code&amp;gt;true&amp;lt;/code&amp;gt;)
     * token token.
     *
     * @param principal
     * @param credentials
     * @param authorities
     */
    public MyAuthenticationToken(Object principal, Object credentials,String type, String mobile, Collection&amp;lt;? extends GrantedAuthority&amp;gt; authorities) {
        super(authorities);
        this.principal = principal;
        this.credentials = credentials;
        this.type = type;
        this.mobile = mobile;
        super.setAuthenticated(true);
    }


    @Override
    public Object getCredentials() {
        return this.credentials;
    }

    @Override
    public Object getPrincipal() {
        return this.principal;
    }

    public String getType() {
        return this.type;
    }

    public String getMobile() {
        return this.mobile;
    }

    public void setAuthenticated(boolean isAuthenticated) throws IllegalArgumentException {
        if(isAuthenticated) {
            throw new IllegalArgumentException(&quot;Cannot set this token to trusted - use constructor which takes a GrantedAuthority list instead&quot;);
        } else {
            super.setAuthenticated(false);
        }
    }

    public void eraseCredentials() {
        super.eraseCredentials();
        this.credentials = null;
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;自定义-authenticationprovider&quot;&gt;自定义 AuthenticationProvider&lt;/h2&gt;
&lt;h3 id=&quot;实现-authenticationprovider&quot;&gt;实现 AuthenticationProvider&lt;/h3&gt;
&lt;p&gt;代码与 AbstractUserDetailsAuthenticationProvider 基本一致，只需修改 authenticate 方法 及 createSuccessAuthentication 方法中的 UsernamePasswordAuthenticationToken 为我们的 token, 改为：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;    public Authentication authenticate(Authentication authentication) throws AuthenticationException {
        // 此处修改断言自定义的 MyAuthenticationToken
        Assert.isInstanceOf(MyAuthenticationToken.class, authentication, this.messages.getMessage(&quot;MyAbstractUserDetailsAuthenticationProvider.onlySupports&quot;, &quot;Only MyAuthenticationToken is supported&quot;));
        // ...
    }

    protected Authentication createSuccessAuthentication(Object principal, Authentication authentication, UserDetails user) {
        MyAuthenticationToken result = new MyAuthenticationToken(principal, authentication.getCredentials(),((MyAuthenticationToken) authentication).getType(),((MyAuthenticationToken) authentication).getMobile(), this.authoritiesMapper.mapAuthorities(user.getAuthorities()));
        result.setDetails(authentication.getDetails());
        return result;
    }&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;继承provider&quot;&gt;继承provider&lt;/h3&gt;
&lt;p&gt;继承我们自定义的AuthenticationProvider，编写验证方法additionalAuthenticationChecks及 retrieveUser&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;    /**
     * 自定义验证
     * @param userDetails
     * @param authentication
     * @throws AuthenticationException
     */
    protected void additionalAuthenticationChecks(UserDetails userDetails, MyAuthenticationToken authentication) throws AuthenticationException {
        Object salt = null;
        if(this.saltSource != null) {
            salt = this.saltSource.getSalt(userDetails);
        }

        if(authentication.getCredentials() == null) {
            this.logger.debug(&quot;Authentication failed: no credentials provided&quot;);
            throw new BadCredentialsException(this.messages.getMessage(&quot;MyAbstractUserDetailsAuthenticationProvider.badCredentials&quot;, &quot;Bad credentials&quot;));
        } else {
            String presentedPassword = authentication.getCredentials().toString();

            // 验证开始
            if(&quot;phone&quot;.equals(authentication.getType())){
                // 手机验证码验证，调用公共服务查询后台验证码缓存： key 为authentication.getPrincipal()的value， 并判断其与验证码是否匹配,
                此处写死为 1000
                if(!&quot;1000&quot;.equals(presentedPassword)){
                    this.logger.debug(&quot;Authentication failed: verifyCode does not match stored value&quot;);
                    throw new BadCredentialsException(this.messages.getMessage(&quot;MyAbstractUserDetailsAuthenticationProvider.badCredentials&quot;, &quot;Bad verifyCode&quot;));
                }
            }else if(MyLoginAuthenticationFilter.SPRING_SECURITY_RESTFUL_TYPE_QR.equals(authentication.getType())){
                // 二维码只需要根据 qrCode 查询到用户即可，所以此处无需验证
            }
            else {
                // 用户名密码验证
                if(!this.passwordEncoder.isPasswordValid(userDetails.getPassword(), presentedPassword, salt)) {
                    this.logger.debug(&quot;Authentication failed: password does not match stored value&quot;);
                    throw new BadCredentialsException(this.messages.getMessage(&quot;MyAbstractUserDetailsAuthenticationProvider.badCredentials&quot;, &quot;Bad credentials&quot;));
                }
            }
        }
    }

    protected final UserDetails retrieveUser(String username, MyAuthenticationToken authentication) throws AuthenticationException {
        UserDetails loadedUser;
        try {
            // 调用loadUserByUsername时加入type前缀
            loadedUser = this.getUserDetailsService().loadUserByUsername(authentication.getType() + &quot;:&quot; + username);
        } catch (UsernameNotFoundException var6) {
            if(authentication.getCredentials() != null) {
                String presentedPassword = authentication.getCredentials().toString();
                this.passwordEncoder.isPasswordValid(this.userNotFoundEncodedPassword, presentedPassword, (Object)null);
            }

            throw var6;
        } catch (Exception var7) {
            throw new InternalAuthenticationServiceException(var7.getMessage(), var7);
        }

        if(loadedUser == null) {
            throw new InternalAuthenticationServiceException(&quot;UserDetailsService returned null, which is an interface contract violation&quot;);
        } else {
            return loadedUser;
        }
    }&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;自定义-userdetailsservice&quot;&gt;自定义 UserDetailsService&lt;/h2&gt;
&lt;p&gt;查询用户时根据类型采用不同方式查询： 账号密码根据用户名查询用户； 验证码根据 phone查询用户， 二维码可调用公共服务&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;    @Override
    public UserDetails loadUserByUsername(String var1) throws UsernameNotFoundException {

        BaseUser baseUser;
        String[] parameter = var1.split(&quot;:&quot;);
        // 手机验证码调用FeignClient根据电话号码查询用户
        if(&quot;phone&quot;.equals(parameter[0])){
            ResponseData&amp;lt;BaseUser&amp;gt; baseUserResponseData = baseUserService.getUserByPhone(parameter[1]);
            if(baseUserResponseData.getData() == null || !ResponseCode.SUCCESS.getCode().equals(baseUserResponseData.getCode())){
                logger.error(&quot;找不到该用户，手机号码：&quot; + parameter[1]);
                throw new UsernameNotFoundException(&quot;找不到该用户，手机号码：&quot; + parameter[1]);
            }
            baseUser = baseUserResponseData.getData();
        } else if(&quot;qr&quot;.equals(parameter[0])){
            // 扫码登陆根据key从redis查询用户
            baseUser = null;
        } else {
            // 账号密码登陆调用FeignClient根据用户名查询用户
            ResponseData&amp;lt;BaseUser&amp;gt; baseUserResponseData = baseUserService.getUserByUserName(parameter[1]);
            if(baseUserResponseData.getData() == null || !ResponseCode.SUCCESS.getCode().equals(baseUserResponseData.getCode())){
                logger.error(&quot;找不到该用户，用户名：&quot; + parameter[1]);
                throw new UsernameNotFoundException(&quot;找不到该用户，用户名：&quot; + parameter[1]);
            }
            baseUser = baseUserResponseData.getData();
        }

        // 调用FeignClient查询角色
        ResponseData&amp;lt;List&amp;lt;BaseRole&amp;gt;&amp;gt; baseRoleListResponseData = baseRoleService.getRoleByUserId(baseUser.getId());
        List&amp;lt;BaseRole&amp;gt; roles;
        if(baseRoleListResponseData.getData() == null ||  !ResponseCode.SUCCESS.getCode().equals(baseRoleListResponseData.getCode())){
            logger.error(&quot;查询角色失败！&quot;);
            roles = new ArrayList&amp;lt;&amp;gt;();
        }else {
            roles = baseRoleListResponseData.getData();
        }

        //调用FeignClient查询菜单
        ResponseData&amp;lt;List&amp;lt;BaseModuleResources&amp;gt;&amp;gt; baseModuleResourceListResponseData = baseModuleResourceService.getMenusByUserId(baseUser.getId());

        // 获取用户权限列表
        List&amp;lt;GrantedAuthority&amp;gt; authorities = convertToAuthorities(baseUser, roles);

        // 存储菜单到redis
        if( ResponseCode.SUCCESS.getCode().equals(baseModuleResourceListResponseData.getCode()) &amp;amp;&amp;amp; baseModuleResourceListResponseData.getData() != null){
            resourcesTemplate.delete(baseUser.getId() + &quot;-menu&quot;);
            baseModuleResourceListResponseData.getData().forEach(e -&amp;gt; {
                resourcesTemplate.opsForList().leftPush(baseUser.getId() + &quot;-menu&quot;, e);
            });
        }

        // 返回带有用户权限信息的User
        org.springframework.security.core.userdetails.User user =  new org.springframework.security.core.userdetails.User(baseUser.getUserName(),
                baseUser.getPassword(), isActive(baseUser.getActive()), true, true, true, authorities);
        return new BaseUserDetail(baseUser, user);
    }&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;配置websecurityconfigureradapter&quot;&gt;配置WebSecurityConfigurerAdapter&lt;/h2&gt;
&lt;p&gt;将我们自定义的类配置到spring security 登陆流程中&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;@Configuration
@Order(ManagementServerProperties.ACCESS_OVERRIDE_ORDER)
public class WebSecurityConfig extends WebSecurityConfigurerAdapter {

    // 自动注入UserDetailsService
    @Autowired
    private BaseUserDetailService baseUserDetailService;

    @Override
    public void configure(HttpSecurity http) throws Exception {
        http    // 自定义过滤器
                .addFilterAt(getMyLoginAuthenticationFilter(), UsernamePasswordAuthenticationFilter.class)
                // 配置登陆页/login并允许访问
                .formLogin().loginPage(&quot;/login&quot;).permitAll()
                // 登出页
                .and().logout().logoutUrl(&quot;/logout&quot;).logoutSuccessUrl(&quot;/backReferer&quot;)
                // 其余所有请求全部需要鉴权认证
                .and().authorizeRequests().anyRequest().authenticated()
                // 由于使用的是JWT，我们这里不需要csrf
                .and().csrf().disable();
    }

    /**
     * 用户验证
     * @param auth
     */
    @Override
    public void configure(AuthenticationManagerBuilder auth) {
        auth.authenticationProvider(myAuthenticationProvider());
    }

    /**
     * 自定义密码验证
     * @return
     */
    @Bean
    public MyAuthenticationProvider myAuthenticationProvider(){
        MyAuthenticationProvider provider = new MyAuthenticationProvider();
        // 设置userDetailsService
        provider.setUserDetailsService(baseUserDetailService);
        // 禁止隐藏用户未找到异常
        provider.setHideUserNotFoundExceptions(false);
        // 使用BCrypt进行密码的hash
        provider.setPasswordEncoder(new BCryptPasswordEncoder(6));
        return provider;
    }

    /**
     * 自定义登陆过滤器
     * @return
     */
    @Bean
    public MyLoginAuthenticationFilter getMyLoginAuthenticationFilter() {
        MyLoginAuthenticationFilter filter = new MyLoginAuthenticationFilter();
        try {
            filter.setAuthenticationManager(this.authenticationManagerBean());
        } catch (Exception e) {
            e.printStackTrace();
        }
        filter.setAuthenticationSuccessHandler(new MyLoginAuthSuccessHandler());
        filter.setAuthenticationFailureHandler(new SimpleUrlAuthenticationFailureHandler(&quot;/login?error&quot;));
        return filter;
    }
}&lt;/code&gt;
&lt;/pre&gt;</description>
<pubDate>Sun, 17 Jun 2018 14:46:00 +0000</pubDate>
<dc:creator>明月新</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/fp2952/p/9193959.html</dc:identifier>
</item>
<item>
<title>Python装饰器AOP 不定长参数 鸭子类型 重载(三) - 诚实善良小郎君</title>
<link>http://www.cnblogs.com/why957/p/9193877.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/why957/p/9193877.html</guid>
<description>&lt;h4 id=&quot;可变长参数与关键字参数&quot;&gt;1 可变长参数与关键字参数&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;*args&lt;/code&gt;代表任意长度可变参数&lt;/p&gt;
&lt;p&gt;&lt;code&gt;**kwargs&lt;/code&gt;代表关键字参数&lt;/p&gt;
&lt;p&gt;用&lt;code&gt;*args&lt;/code&gt;和&lt;code&gt;**kwargs&lt;/code&gt;只是为了方便并没有强制使用它们.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;缺省参数&lt;/strong&gt;即是调用该函数时，&lt;strong&gt;缺省参数的值若未被传入，则传入默认预设的值&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;注意 : 须将所有带有默认值的参数置于参数列表的&lt;strong&gt;末尾&lt;/strong&gt;。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;12&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; print_info(name, age &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;18&lt;/span&gt;，gender &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;True&lt;/span&gt; )
print_info(&lt;span class=&quot;st&quot;&gt;&quot;zhan&quot;&lt;/span&gt;, gender &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;False&lt;/span&gt; )

&lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; demo(num, &lt;span class=&quot;op&quot;&gt;*&lt;/span&gt;nums ,&lt;span class=&quot;op&quot;&gt;**&lt;/span&gt;nums )&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;当你不确定你的函数里将要传递多少参数时你可以用&lt;code&gt;*args&lt;/code&gt;.例如,它可以传递任意数量的参数:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;12&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; print_everything(&lt;span class=&quot;op&quot;&gt;*&lt;/span&gt;args):
        &lt;span class=&quot;cf&quot;&gt;for&lt;/span&gt; count, thing &lt;span class=&quot;op&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;bu&quot;&gt;enumerate&lt;/span&gt;(args):
...         &lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;{0}&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;. &lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;{1}&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'&lt;/span&gt;.&lt;span class=&quot;bu&quot;&gt;format&lt;/span&gt;(count, thing)
...
&lt;span class=&quot;op&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; print_everything(&lt;span class=&quot;st&quot;&gt;'apple'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'banana'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'cabbage'&lt;/span&gt;)
&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;. apple
&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;. banana
&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;. cabbage&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;相似的,&lt;code&gt;**kwargs&lt;/code&gt;允许你使用没有事先定义的参数名:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;12&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; table_things(&lt;span class=&quot;op&quot;&gt;**&lt;/span&gt;kwargs):
...     &lt;span class=&quot;cf&quot;&gt;for&lt;/span&gt; name, value &lt;span class=&quot;op&quot;&gt;in&lt;/span&gt; kwargs.items():
...         &lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;{0}&lt;/span&gt;&lt;span class=&quot;st&quot;&gt; = &lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;{1}&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'&lt;/span&gt;.&lt;span class=&quot;bu&quot;&gt;format&lt;/span&gt;(name, value)
...
&lt;span class=&quot;op&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; table_things(apple &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'fruit'&lt;/span&gt;, cabbage &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'vegetable'&lt;/span&gt;)
cabbage &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; vegetable
apple &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; fruit&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;*args&lt;/code&gt;和&lt;code&gt;**kwargs&lt;/code&gt;可以同时在函数的定义中,但是&lt;code&gt;*args&lt;/code&gt;必须在&lt;code&gt;**kwargs&lt;/code&gt;前面.&lt;/p&gt;
&lt;p&gt;当调用函数时你也可以用&lt;code&gt;*&lt;/code&gt;和&lt;code&gt;**&lt;/code&gt;语法.例如:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;18&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; myPrint(a, b, c):
...     &lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;'a = &lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;{0}&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;, b = &lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;{1}&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;, c = &lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;{2}&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;'&lt;/span&gt;.&lt;span class=&quot;bu&quot;&gt;format&lt;/span&gt;(a,b,c)
...
&lt;span class=&quot;op&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; mylist &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; [&lt;span class=&quot;st&quot;&gt;'aardvark'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'baboon'&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;'cat'&lt;/span&gt;]
&lt;span class=&quot;op&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; myPrint(&lt;span class=&quot;op&quot;&gt;*&lt;/span&gt;mylist)

a &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; aardvark, b &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; baboon, c &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; cat&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;就像你看到的一样,它可以传递列表(或者元组)的每一项并把它们解包.注意必须与它们在函数里的参数相吻合.当然,你也可以在函数定义或者函数调用时用*.&lt;/p&gt;
&lt;h4 id=&quot;面向切面编程aop和装饰器&quot;&gt;2 面向切面编程AOP和装饰器&lt;/h4&gt;
&lt;p&gt;AOP实际就是面向切面编程,python实现方法是采用装饰器模式.&lt;/p&gt;
&lt;p&gt;​ 装饰器是一个很著名的设计模式，经常被用于有切面需求的场景，较为经典的有插入日志、性能测试、事务处理等。装饰器是解决这类问题的绝佳设计，有了装饰器，我们就可以抽离出大量函数中与函数功能本身无关的雷同代码并继续重用。概括的讲，&lt;strong&gt;装饰器的作用就是为已经存在的对象添加额外的功能。&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; makebold(fn):
    &lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; wrapped():
        &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;&amp;lt;b&amp;gt;&quot;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; fn() &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;&amp;lt;/b&amp;gt;&quot;&lt;/span&gt;
    &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; wrapped

&lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; makeitalic(fn):
    &lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; wrapped():
        &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;&amp;lt;i&amp;gt;&quot;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; fn() &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;&amp;lt;/i&amp;gt;&quot;&lt;/span&gt;
    &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; wrapped

&lt;span class=&quot;at&quot;&gt;@makebold&lt;/span&gt;
&lt;span class=&quot;at&quot;&gt;@makeitalic&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; hello():
    &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;hello world&quot;&lt;/span&gt;

&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt; hello() &lt;span class=&quot;co&quot;&gt;## returns &amp;lt;b&amp;gt;&amp;lt;i&amp;gt;hello world&amp;lt;/i&amp;gt;&amp;lt;/b&amp;gt;&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;#通过两个装饰器实现对目标函数的包装&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;理解装饰器首先理解python函数同样是对象,既然是对象就可以作为函数的返回值,可以执行复制,添加属性,作为函数参数传递,这些就是实现装饰器的基础&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; bread(func):
    &lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; wrapper():
        &lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;&amp;lt;/''''''\&amp;gt;&quot;&lt;/span&gt;
        func()
        &lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;&amp;lt;\______/&amp;gt;&quot;&lt;/span&gt;
    &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; wrapper

&lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; ingredients(func):
    &lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; wrapper():
        &lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;#tomatoes#&quot;&lt;/span&gt;
        func()
        &lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;~salad~&quot;&lt;/span&gt;
    &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; wrapper

&lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; sandwich(food&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;--ham--&quot;&lt;/span&gt;):
    &lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt; food

sandwich()
&lt;span class=&quot;co&quot;&gt;#outputs: --ham--&lt;/span&gt;
sandwich &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; bread(ingredients(sandwich))  &lt;span class=&quot;co&quot;&gt;#装饰器实际就是函数调用&lt;/span&gt;
sandwich()

&lt;span class=&quot;co&quot;&gt;#输出:&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;#&amp;lt;/''''''\&amp;gt;&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;# #tomatoes#&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;# --ham--&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;# ~salad~&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;#&amp;lt;\______/&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;作为程序员必须学会偷懒,&lt;a href=&quot;mailto:于是python采用@作为装饰器语法糖&quot;&gt;于是python采用@作为装饰器语法糖&lt;/a&gt;,并学习一些高级用法:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;at&quot;&gt;@bread&lt;/span&gt;
&lt;span class=&quot;at&quot;&gt;@ingredients&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; sandwich(food&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;--ham--&quot;&lt;/span&gt;):
    &lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt; food

sandwich()
&lt;span class=&quot;co&quot;&gt;#输出:  是不是觉得简单很多啦!&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;#&amp;lt;/''''''\&amp;gt;&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;# #tomatoes#&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;# --ham--&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;# ~salad~&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;#&amp;lt;\______/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;#改变顺序会有影响的,执行顺序是先里面@ingredients,在执行@bread&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;装饰器的传参&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;21&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; a_decorator_passing_arguments(function_to_decorate):
    &lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; a_wrapper_accepting_arguments(arg1, arg2):
        &lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;I got args! Look:&quot;&lt;/span&gt;, arg1, arg2
        function_to_decorate(arg1, arg2)
    &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; a_wrapper_accepting_arguments

&lt;span class=&quot;co&quot;&gt;# 当你调用装饰器返回的函数时,也就调用了包装器,把参数传入包装器里,&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;# 它将把参数传递给被装饰的函数里.&lt;/span&gt;

&lt;span class=&quot;at&quot;&gt;@a_decorator_passing_arguments&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; print_full_name(first_name, last_name):
    &lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;My name is&quot;&lt;/span&gt;, first_name, last_name

print_full_name(&lt;span class=&quot;st&quot;&gt;&quot;Peter&quot;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&quot;Venkman&quot;&lt;/span&gt;)
&lt;span class=&quot;co&quot;&gt;# 输出:&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;#I got args! Look: Peter Venkman&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;#My name is Peter Venkman&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;装饰器装饰类方法&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;15&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; method_friendly_decorator(method_to_decorate):
    &lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; wrapper(&lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;, lie):
        lie &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; lie &lt;span class=&quot;op&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;# 女性福音 :-)&lt;/span&gt;
        &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; method_to_decorate(&lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;, lie)
    &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; wrapper

&lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; Lucy(&lt;span class=&quot;bu&quot;&gt;object&lt;/span&gt;):
    &lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;__init__&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;):
        &lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.age &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;32&lt;/span&gt;
      
    &lt;span class=&quot;at&quot;&gt;@method_friendly_decorator&lt;/span&gt;&lt;span class=&quot;co&quot;&gt;#装饰类方法&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; sayYourAge(&lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;, lie):
        &lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;I am &lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;%s&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;, what did you think?&quot;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;%&lt;/span&gt; (&lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;.age &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; lie)

l &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; Lucy()
l.sayYourAge(&lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;)
&lt;span class=&quot;co&quot;&gt;#输出: I am 26, what did you think?&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;装饰器自己传参数&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;24&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; decorator_maker_with_arguments(decorator_arg1, decorator_arg2):
    &lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;I make decorators! And I accept arguments:&quot;&lt;/span&gt;, decorator_arg1, decorator_arg2)
    &lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; my_decorator(func):
        &lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;I am the decorator&quot;&lt;/span&gt;, decorator_arg1, decorator_arg2)
        &lt;span class=&quot;co&quot;&gt;# 不要忘了装饰器参数和函数参数!&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; wrapped(function_arg1, function_arg2) :
            &lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt; (&lt;span class=&quot;st&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;- from the decorator: &lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;{0}&lt;/span&gt;&lt;span class=&quot;st&quot;&gt; &lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;{1}&lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;&lt;/span&gt;
                  &lt;span class=&quot;co&quot;&gt;&quot;\t- from the function call: {2} {3}\n&quot;&lt;/span&gt;
                  &lt;span class=&quot;co&quot;&gt;&quot;Then I can pass them to the decorated function&quot;&lt;/span&gt;
                  .&lt;span class=&quot;bu&quot;&gt;format&lt;/span&gt;(decorator_arg1, decorator_arg2,
                          function_arg1, function_arg2))
            &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; func(function_arg1, function_arg2)
        &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; wrapped
    &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; my_decorator

&lt;span class=&quot;at&quot;&gt;@decorator_maker_with_arguments&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;Leonard&quot;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&quot;Sheldon&quot;&lt;/span&gt;)
&lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; decorated_function_with_arguments(function_arg1, function_arg2):
    &lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt; (&lt;span class=&quot;st&quot;&gt;&quot;I am the decorated function and only knows about my arguments: &lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;{0}&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;&lt;/span&gt;
           &lt;span class=&quot;co&quot;&gt;&quot; {1}&quot;&lt;/span&gt;.&lt;span class=&quot;bu&quot;&gt;format&lt;/span&gt;(function_arg1, function_arg2))

decorated_function_with_arguments(&lt;span class=&quot;st&quot;&gt;&quot;Rajesh&quot;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&quot;Howard&quot;&lt;/span&gt;) &lt;span class=&quot;co&quot;&gt;#调用函数&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;#输出:&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;#I make decorators! And I accept arguments: Leonard Sheldon&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;#I am the decorator. Leonard Sheldon&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;#   - from the decorator: Leonard Sheldon&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;#   - from the function call: Rajesh Howard&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;#Then I can pass them to the decorated function&lt;/span&gt;

&lt;span class=&quot;co&quot;&gt;#I am the decorated function and only knows about my arguments: Rajesh Howard&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;鸭子类型&quot;&gt;3 鸭子类型&lt;/h4&gt;
&lt;p&gt;“当看到一只鸟走起来像鸭子、游泳起来像鸭子、叫起来也像鸭子，那么这只鸟就可以被称为鸭子。”&lt;/p&gt;
&lt;p&gt;我们并不关心对象是什么类型，到底是不是鸭子，只关心行为。&lt;/p&gt;
&lt;p&gt;比如在python中，有很多file-like的东西，比如StringIO,GzipFile,socket。它们有很多相同的方法，我们把它们当作文件使用。又比如list.extend()方法中,我们并不关心它的参数是不是list,只要它是可迭代的,所以它的参数可以是list/tuple/dict/字符串/生成器等.&lt;/p&gt;
&lt;p&gt;鸭子类型在动态语言中经常使用，非常灵活，使得python不像java那样专门去弄一大堆的设计模式。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;15&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; duck():
  &lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; walk(&lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;):
    &lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'I walk like a duck'&lt;/span&gt;)
  &lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; swim(&lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;):
    &lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'i swim like a duck'&lt;/span&gt;)
 
&lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; person():
  &lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; walk(&lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;):
    &lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'this one walk like a duck'&lt;/span&gt;) 
  &lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; swim(&lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;):
    &lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'this man swim like a duck'&lt;/span&gt;)
    
&lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; watch_duck(animal): &lt;span class=&quot;co&quot;&gt;#定义一个函数,接受animal参数,需要具有walk swim两项本领&lt;/span&gt;
  animal.walk()
  animal.swim()
 
small_duck &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; duck()  &lt;span class=&quot;co&quot;&gt;#实例化鸭子&lt;/span&gt;
watch_duck(small_duck) &lt;span class=&quot;co&quot;&gt;#能调用就认为是鸭子类型&lt;/span&gt;
输出 &lt;span class=&quot;op&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; 
I walk like a duck
i swim like a duck
 
duck_like_man &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; person() &lt;span class=&quot;co&quot;&gt;#实例化人,但是人同样有walk swim方法&lt;/span&gt;
watch_duck(duck_like_man) &lt;span class=&quot;co&quot;&gt;#同样被认为是鸭子类型&lt;/span&gt;
输出 &lt;span class=&quot;op&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; 
this one walk like a duck
this man swim like a duck
 
&lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; Lame_Foot_Duck():
  &lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; swim(&lt;span class=&quot;va&quot;&gt;self&lt;/span&gt;):
    &lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'i am lame but i can swim'&lt;/span&gt;)
 
lame_duck &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; Lame_Foot_Duck() &lt;span class=&quot;co&quot;&gt;#实例化蹩脚的鸭子,类下只具有swim方法&lt;/span&gt;
watch_duck(lame_duck)  &lt;span class=&quot;co&quot;&gt;#虽然是鸭子,但是不被认为是鸭子类型&lt;/span&gt;
 
输出 &lt;span class=&quot;op&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;pp&quot;&gt;AttributeError&lt;/span&gt;: Lame_Foot_Duck instance has no attribute &lt;span class=&quot;st&quot;&gt;'walk'&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;python中重载&quot;&gt;4 python中重载&lt;/h4&gt;
&lt;p&gt;函数重载主要是为了解决两个问题。&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;可变参数类型&lt;/li&gt;
&lt;li&gt;可变参数个数&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;一个对象的特征不是由它的类型决定，而是通过对象中的方法决定，所以函数重载在动态语言中就显得没有意义.&lt;/p&gt;
&lt;p&gt;另外，一个基本的设计原则是，仅仅当两个函数除了参数类型和参数个数不同以外，其功能是完全相同的，此时才使用函数重载，如果两个函数的功能其实不同，那么不应当使用重载，而应当使用一个不同名的函数。&lt;/p&gt;
&lt;p&gt;那么对于情况 1 ，函数功能相同，但是参数类型不同，python 如何处理？答案是根本不需要处理，因为 python 可以接受任何类型的参数，如果函数的功能相同，那么不同的参数类型在 python 中很可能是相同的代码，没有必要做成两个不同函数。&lt;/p&gt;
&lt;p&gt;那么对于情况 2 ，函数功能相同，但参数个数不同，python 如何处理？大家知道，答案就是缺省参数。对那些缺少的参数设定为缺省参数即可解决问题。因为你假设函数功能相同，那么那些缺少的参数终归是需要用的。&lt;/p&gt;
&lt;p&gt;好了，鉴于情况 1 跟 情况 2 都有了解决方案，python 自然就不需要函数重载了&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;14&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; Write:
    &lt;span class=&quot;at&quot;&gt;@staticmethod&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; write(output,content):
        &lt;span class=&quot;co&quot;&gt;#output对象只要实现write方法,不管接受的类型&lt;/span&gt;
        output.write(content)
&lt;span class=&quot;co&quot;&gt;#stringIO类型&lt;/span&gt;
output &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; StringIO.StringIO()
Write.write(output,&lt;span class=&quot;st&quot;&gt;'helloworld'&lt;/span&gt;)

&lt;span class=&quot;co&quot;&gt;#file类型&lt;/span&gt;
output &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bu&quot;&gt;open&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;'out.txt'&lt;/span&gt;,&lt;span class=&quot;st&quot;&gt;'w'&lt;/span&gt;)
Write.write(output,&lt;span class=&quot;st&quot;&gt;'helloworld'&lt;/span&gt;)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
</description>
<pubDate>Sun, 17 Jun 2018 14:17:00 +0000</pubDate>
<dc:creator>诚实善良小郎君</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/why957/p/9193877.html</dc:identifier>
</item>
</channel>
</rss>