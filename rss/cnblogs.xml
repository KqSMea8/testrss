<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>Codeforces Round #500 (Div. 2)  D - Chemical table - basasuya</title>
<link>http://www.cnblogs.com/Basasuya/p/9428082.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/Basasuya/p/9428082.html</guid>
<description>&lt;p&gt;首先我们如果满足三缺一，那么必有同行和同列的点&lt;/p&gt;
&lt;p&gt;如果两行有同列的数，我们可以设想，他们最后会全部填充成为两者啥都有的情况&lt;br/&gt;显然这个是个并查集&lt;br/&gt;现在我们有了很多集合，每个集合自己可以进行三缺一操作，但是集合有缺陷，集合里面的人都没有的列数，那就没法搞&lt;/p&gt;
&lt;p&gt;可以贪心的想，一共k个集合的话，把k个集合连接起来需要k-1个新点，如果还有列没有，那就需要这些列需要新店&lt;br/&gt;除此之外，一开始没有讨论有些行压根没有点，这些行也需要点去开辟疆土&lt;/p&gt;
&lt;p&gt;综上所述，一开始论述的时候将行和列交换也是合理的&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;人总喜欢在伤心，劳累，挫折时放纵自己，但这之后把你引向深渊&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;#include &amp;lt;algorithm&amp;gt;
#include &amp;lt;cmath&amp;gt;
#include &amp;lt;cstdio&amp;gt;
#include &amp;lt;cstring&amp;gt;
#include &amp;lt;iostream&amp;gt;
#include &amp;lt;map&amp;gt;
#include &amp;lt;queue&amp;gt;
#include &amp;lt;set&amp;gt;
#include &amp;lt;vector&amp;gt;
using namespace std;
typedef long long ll; 
const int N = 200005;
const int INF = 0x3f3f3f3f;

int f[N]; //col
int find(int x) { return f[x] == x ? x : (f[x] = find(f[x])); }

vector&amp;lt;int&amp;gt; row[N];
vector&amp;lt;int&amp;gt; col[N];

vector&amp;lt;int&amp;gt; part[N];
int has[N];

int tag[N];
int main() {
    int n, m, q;
    while(~scanf(&quot;%d %d %d&quot;, &amp;amp;n, &amp;amp;m, &amp;amp;q)) {
        for(int i = 1; i &amp;lt;= m; ++i) f[i] = i;
        for(int i = 0; i &amp;lt; q; ++i) {
            int a, b;
            scanf(&quot;%d %d&quot;, &amp;amp;a, &amp;amp;b);
            row[a].push_back(b);
            tag[a] ++;
            col[b].push_back(a);
            has[b] = 1;
        }
        for(int i = 1; i &amp;lt;= n; ++i) {
            for(int j = 1; j &amp;lt; row[i].size(); ++j) {
                int t1 = row[i][0];
                int t2 = row[i][j];
                int f1 = find(t1); int f2 = find(t2);
                if(f1 != f2) {
                    f[f2] = f1;
                }
            }
        }

        for(int i = 1; i &amp;lt;= m; ++i) {
            int tt = find(i);
            part[tt].push_back(i);
        }

        int cnt = 0; int cntPart = 0;
        for(int i = 1; i &amp;lt;= m; ++i) {
            if(!has[i]) continue;
            if(part[i].size() &amp;gt; 0) {
                cntPart ++;
                cnt += part[i].size();
            }
        }

        int result = 0;
        for(int i = 1;  i &amp;lt;= n; ++i) {
            if(!tag[i])
                result ++;
        }
    //    printf(&quot;%d\n&quot;, cnt);
        printf(&quot;%d\n&quot;, result + cntPart - 1 - cnt + m);
    }
    return 0;
}&lt;/code&gt;
&lt;/pre&gt;</description>
<pubDate>Sun, 05 Aug 2018 17:02:00 +0000</pubDate>
<dc:creator>basasuya</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/Basasuya/p/9428082.html</dc:identifier>
</item>
<item>
<title>IdentityServer4客户端如何获取自定义声明，了解一下？ - Jeffcky</title>
<link>http://www.cnblogs.com/CreateMyself/p/9399118.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/CreateMyself/p/9399118.html</guid>
<description>&lt;h2&gt;前言 &lt;/h2&gt;
&lt;p&gt;久违了各位，之前录制过IdentityServer4的基础视频（&lt;a title=&quot;IdentityServer4基础&quot; href=&quot;https://space.bilibili.com/319652230/#/&quot; target=&quot;_blank&quot;&gt;https://space.bilibili.com/319652230/#/&lt;/a&gt;），有兴趣了解的童鞋可以看一下，只不过未发表成博客。我们使用IdentityServer4结和ASP.NET Identity来进行用户的认证和授权管理，在实际项目中我们都会继承ASP.NET Core Identity中IdentityUser类即用户实体，并添加我们自定义的扩展属性，在客户端（Clients）中我们只能拿到用户Id，但是若我们要获取用户中其他重要的属性，此时相对于IdentityServer4而言则需要自定义声明，那么在IdentityServer4中如何添加自定义声明并在客户端中能正确获取到呢？本文详细讲解一下，对于IdentityServer4我也是初学者，仅仅止于知道和使用而已，若有错误的地方，还请大佬指正。&lt;/p&gt;
&lt;h2&gt;IdentityServer4添加自定义声明（方式一）&lt;/h2&gt;
&lt;p&gt;首先我们继承自IdentityUser类并添加额外的属性比如部门Id，如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; OnLineBookIdentityUser : IdentityUser
    {   
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; DepartmentId { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;set&lt;/span&gt;&lt;span&gt;; }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;接下来我们需要将部门Id通过IdentityServer4添加到声明中，在IdentityServer4中添加自定义声明我们需要实现IProfileService接口，该接口有如下两个方法。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/589642/201808/589642-20180805231340958-1539088498.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;我们实现上述两个方法，在第一个方法中参数也就是用户基本信息上下文中拿到用户Id即Subject，然后我们定义用户中的部门Id属性为idr，并将用户中的部门Id属性映射到声明的idr中，最终实现如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; ProfileService : IProfileService
    {
        &lt;/span&gt;&lt;span&gt;protected&lt;/span&gt; UserManager&amp;lt;OnLineBookIdentityUser&amp;gt;&lt;span&gt; _userManager;

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; ProfileService(UserManager&amp;lt;OnLineBookIdentityUser&amp;gt;&lt;span&gt; userManager)
        {
            _userManager &lt;/span&gt;=&lt;span&gt; userManager;
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; Task GetProfileDataAsync(ProfileDataRequestContext context)
        {
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; user =&lt;span&gt; _userManager.GetUserAsync(context.Subject).Result;

            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; claims = &lt;span&gt;new&lt;/span&gt; List&amp;lt;Claim&amp;gt;&lt;span&gt;
            {
                &lt;/span&gt;&lt;span&gt;new&lt;/span&gt; Claim(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;idr&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, user.DepartmentId),
            };

            context.IssuedClaims.AddRange(claims);
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; Task.FromResult(&lt;span&gt;0&lt;/span&gt;&lt;span&gt;);
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; Task IsActiveAsync(IsActiveContext context)
        {
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; user =&lt;span&gt; _userManager.GetUserAsync(context.Subject).Result;
            context.IsActive &lt;/span&gt;= &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; Task.FromResult(&lt;span&gt;0&lt;/span&gt;&lt;span&gt;);
        }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 接下来在注入IdentityServer4时，添加我们自定义实现的ProfileService，更多基础请参考IdentityServer4官网以及我所录制的IdentityServer4基础视频。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
            &lt;span&gt;//&lt;/span&gt;&lt;span&gt;注入IdentityServer4使用AspNetIdentity&lt;/span&gt;
            services.AddIdentityServer(options =&amp;gt;&lt;span&gt;
                 {
                     options.Authentication.CookieLifetime &lt;/span&gt;= TimeSpan.FromMinutes(&lt;span&gt;1&lt;/span&gt;&lt;span&gt;);
                 })
                .AddDeveloperSigningCredential()
                .AddAspNetIdentity&lt;/span&gt;&amp;lt;OnLineBookIdentityUser&amp;gt;&lt;span&gt;()
                ....&lt;/span&gt;&lt;span&gt;
                .AddProfileService&lt;/span&gt;&amp;lt;ProfileService&amp;gt;();
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;晓晨姐姐在他发表的博客文章（&lt;a title=&quot;IdentityServer4实战 - 基于角色的权限控制及Claim详解&quot; href=&quot;http://www.cnblogs.com/stulzq/p/8726002.html&quot; target=&quot;_blank&quot;&gt;http://www.cnblogs.com/stulzq/p/8726002.html&lt;/a&gt;）中说必须还要实现IResourceOwnerPasswordValidator接口，那么在客户端获取到自定义声明应该是通过调用接口的方式获取用户自定义声明（不知是否理解正确或者说通过客户端中User中Principal获取到呢？）这里我们并未实现上述IResourceOwnerPasswordValidator接口，我们看看在客户端是否能拿到上述我们声明的idr呢？在客户端我们定义如下控制器，访问需要进行授权，并获取我们添加的自定义声明idr，如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
    [Route(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;[controller]&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;), Authorize]
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; OrderController : Controller
    {
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;readonly&lt;/span&gt;&lt;span&gt; IOrderService _orderService;
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; OrderController(IOrderService orderService)
        {
            _orderService &lt;/span&gt;=&lt;span&gt; orderService;
        }

        [HttpGet(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;index&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)]
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; IActionResult Index()
        {
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; idr = User.FindFirst(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;idr&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;)?&lt;span&gt;.Value;
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; View(nameof(Index), idr);
        }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;并在上述index视图中我们答应自定义声明idr所对应的部门的值，如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
@model &lt;span&gt;string&lt;/span&gt;&lt;span&gt;
@if (Model &lt;/span&gt;&lt;span&gt;is&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
{

    &lt;/span&gt;&amp;lt;h1&amp;gt;idr &lt;span&gt;is&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&amp;lt;/h1&amp;gt;&lt;span&gt;
}
&lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;
{
    &lt;/span&gt;&amp;lt;h1&amp;gt;@Model.ToString()&amp;lt;/h1&amp;gt;&lt;span&gt;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;接下来我们通过动态gif来演示下，注意如下视频http://localhost:5000/为IdentityServer4认证、授权服务器端。而http://localhost:5003/为客户端。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/589642/201808/589642-20180806000430309-1587318622.gif&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; 上述我们可以看到在登录之后重定向到客户端，我们拿到ack即AccessToken里面有自定义声明idr，但是当我们访问Order/Index并未获取到idr，这是为何，这是因为我们通过如下即ClaimPrincipal去获取idr时，实际上是获取的id_token里面的用户信息，而不是AccessToken，而id_token我们看到没有idr，所以才出现没有获取到的情况。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
 &lt;span&gt;var&lt;/span&gt; idr = User.FindFirst(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;idr&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;)?.Value;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;为了解决这个问题，我们可以在通过IdentityServer4创建的Clients表中所对应的调用客户端中的如下列设置为True即可。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/589642/201808/589642-20180806001022177-1253374307.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;接下来我们再来演示一下，此时我们将看到解析通过id_token将返回idr，并能在客户端读取到idr。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/589642/201808/589642-20180806001650642-1760535132.gif&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;IdentityServer4添加自定义声明（方式二）&lt;/h2&gt;
&lt;p&gt;除了上述方式通过实现ProfileService接口外，我们还可以通过实现自定义UserClaimsPrincipalFactory工厂类来实现，复写CreateAsync方法来创建自定义声明如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; CustomizeUserClaimsFactory&amp;lt;TRole&amp;gt; : UserClaimsPrincipalFactory&amp;lt;OnLineBookIdentityUser, TRole&amp;gt;
        &lt;span&gt;where&lt;/span&gt; TRole : &lt;span&gt;class&lt;/span&gt;&lt;span&gt;
    {
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; CustomizeUserClaimsFactory(UserManager&amp;lt;OnLineBookIdentityUser&amp;gt; userManager, RoleManager&amp;lt;TRole&amp;gt; roleManager, IOptions&amp;lt;IdentityOptions&amp;gt;&lt;span&gt; optionsAccessor)
            : &lt;/span&gt;&lt;span&gt;base&lt;/span&gt;&lt;span&gt;(userManager, roleManager, optionsAccessor)
        {
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;async&lt;/span&gt; &lt;span&gt;override&lt;/span&gt; Task&amp;lt;ClaimsPrincipal&amp;gt;&lt;span&gt; CreateAsync(OnLineBookIdentityUser user)
        {
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; cliamsPrincipal = &lt;span&gt;await&lt;/span&gt; &lt;span&gt;base&lt;/span&gt;&lt;span&gt;.CreateAsync(user);
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; identity =&lt;span&gt; cliamsPrincipal.Identities.First();


            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!identity.HasClaim(x =&amp;gt; x.Type == &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;idr&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;))
            {
                identity.AddClaim(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt; Claim(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;idr&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, user.DepartmentId));
            }

            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; cliamsPrincipal;
        }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后通过创建扩展方法将上述自定义用户声明工厂进行注入，如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; IdentityBuilder AddCustomizeUserClaimsPrincipalFactory(&lt;span&gt;this&lt;/span&gt;&lt;span&gt; IdentityBuilder builder)
        {
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; interfaceType = &lt;span&gt;typeof&lt;/span&gt;(IUserClaimsPrincipalFactory&amp;lt;&amp;gt;&lt;span&gt;);
            interfaceType &lt;/span&gt;=&lt;span&gt; interfaceType.MakeGenericType(builder.UserType);

            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; classType = &lt;span&gt;typeof&lt;/span&gt;(CustomizeUserClaimsFactory&amp;lt;&amp;gt;&lt;span&gt;);
            classType &lt;/span&gt;=&lt;span&gt; classType.MakeGenericType(builder.RoleType);

            builder.Services.AddScoped(interfaceType, classType);

            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; builder;
        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;最后在注入Identity时，添加上述自定义声明工厂，如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
  services.AddIdentity&amp;lt;OnLineBookIdentityUser, IdentityRole&amp;gt;&lt;span&gt;()
            .AddEntityFrameworkStores&lt;/span&gt;&amp;lt;OnLineBookDbContext&amp;gt;&lt;span&gt;()
            .AddDefaultTokenProviders()
            .AddCustomizeUserClaimsPrincipalFactory();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;总结&lt;/h2&gt;
&lt;p&gt;本节内容需要有一定IdentityServer4基础，如若不太了解请参考官方文档，同时针对如上在客户端如何获取自定义声明，重点在于在对应客户端表中设置AlwaysIncludeInIdToken为True才好使，并未去深究设置该列为True所产生的副作用，感谢阅读，若有不同见解，望留下您的评论。&lt;/p&gt;
</description>
<pubDate>Sun, 05 Aug 2018 16:54:00 +0000</pubDate>
<dc:creator>Jeffcky</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/CreateMyself/p/9399118.html</dc:identifier>
</item>
<item>
<title>JAVAEE——宜立方商城12：购物车实现、订单确认页面展示 - kent鹏</title>
<link>http://www.cnblogs.com/xieyupeng/p/9428030.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/xieyupeng/p/9428030.html</guid>
<description>&lt;p&gt;第十二天：&lt;/p&gt;
&lt;p&gt;1、购物车实现&lt;/p&gt;
&lt;p&gt;2、订单确认页面展示&lt;/p&gt;


&lt;h2&gt;2.1. 功能分析&lt;/h2&gt;
&lt;p&gt;1&lt;span&gt;、购物车是一个独立的表现层工程。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;2&lt;span&gt;、添加购物车不要求登录。可以指定购买商品的数量。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;3&lt;span&gt;、展示购物车列表页面&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;4&lt;span&gt;、修改购物车商品数量&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;5&lt;span&gt;、删除购物车商品&lt;/span&gt;&lt;/p&gt;

&lt;h2&gt;2.2. 工程搭建&lt;/h2&gt;
&lt;p&gt;e3-cart-web&lt;span&gt;打包方式&lt;/span&gt;&lt;span&gt;war&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;可以参考e3-portal-web&lt;/p&gt;

&lt;h3&gt;2.2.1. Pom&lt;span&gt;文件&lt;/span&gt;&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;project &lt;/span&gt;&lt;span&gt;xmlns&lt;/span&gt;&lt;span&gt;=&quot;http://maven.apache.org/POM/4.0.0&quot;&lt;/span&gt;&lt;span&gt; xmlns:xsi&lt;/span&gt;&lt;span&gt;=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt;&lt;span&gt;
    xsi:schemaLocation&lt;/span&gt;&lt;span&gt;=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;modelVersion&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;4.0.0&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;modelVersion&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;parent&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;cn.e3mall&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;e3-parent&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;0.0.1-SNAPSHOT&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;parent&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;cn.e3mall&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;e3-cart-web&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;0.0.1-SNAPSHOT&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;packaging&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;war&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;packaging&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependencies&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;cn.e3mall&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;e3-manager-interface&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;0.0.1-SNAPSHOT&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; Spring &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-context&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-beans&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-webmvc&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-jdbc&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-aspects&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-jms&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-context-support&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; JSP相关 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;jstl&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;jstl&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;javax.servlet&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;servlet-api&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;scope&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;provided&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;scope&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;javax.servlet&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;jsp-api&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;scope&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;provided&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;scope&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; dubbo相关 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;com.alibaba&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;dubbo&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 排除依赖 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;exclusions&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;exclusion&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;exclusion&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;exclusion&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.jboss.netty&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;netty&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;exclusion&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;exclusions&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.apache.zookeeper&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;zookeeper&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;com.github.sgroschupf&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;zkclient&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;junit&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;junit&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependencies&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 配置tomcat插件 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;build&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;plugins&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;plugin&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.apache.tomcat.maven&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;tomcat7-maven-plugin&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;configuration&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;port&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;8089&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;port&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;path&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;/&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;path&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;configuration&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;plugin&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;plugins&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;build&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;project&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;&lt;br/&gt;3. &lt;/span&gt;&lt;strong&gt;未登录状态下使用购物车&lt;/strong&gt; &lt;/p&gt;
&lt;h2&gt;3.1. 添加购物车&lt;/h2&gt;
&lt;h3&gt;3.1.1. 功能分析&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;在不登陆的情况下也可以添加购物车。把购物车信息写入&lt;/span&gt;cookie&lt;span&gt;。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;优点：&lt;/p&gt;
&lt;p&gt;1、不占用服务端存储空间&lt;/p&gt;
&lt;p&gt;2、用户体验好。&lt;/p&gt;
&lt;p&gt;3、代码实现简单。&lt;/p&gt;
&lt;p&gt;缺点：&lt;/p&gt;
&lt;p&gt;1、cookie&lt;span&gt;中保存的容量有限。最大&lt;/span&gt;&lt;span&gt;4k&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;2、&lt;span&gt;把购物车信息保存在&lt;/span&gt;cookie&lt;span&gt;中，更换设备购物车信息不能同步。&lt;/span&gt;&lt;/p&gt;


&lt;p&gt;改造商品详情页面&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1135185/201808/1135185-20180806002138933-873393002.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1135185/201808/1135185-20180806002140862-2010229078.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;




&lt;p&gt;&lt;span&gt;请求的&lt;/span&gt;url&lt;span&gt;：&lt;/span&gt;&lt;span&gt;/cart/add/{itemId}&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;参数：&lt;/p&gt;
&lt;p&gt;1）&lt;span&gt;商品&lt;/span&gt;id&lt;span&gt;：&lt;/span&gt; &lt;span&gt;Long itemId&lt;/span&gt;&lt;br/&gt;2&lt;span&gt;）商品数量：&lt;/span&gt; &lt;span&gt;int num&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;业务逻辑：&lt;/p&gt;
&lt;p&gt;1、&lt;span&gt;从&lt;/span&gt;cookie&lt;span&gt;中查询商品列表。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;2、判断商品在商品列表中是否存在。&lt;/p&gt;
&lt;p&gt;3、如果存在，商品数量相加。&lt;/p&gt;
&lt;p&gt;4、&lt;span&gt;不存在，根据商品&lt;/span&gt;id&lt;span&gt;查询商品信息。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;5、把商品添加到购车列表。&lt;/p&gt;
&lt;p&gt;6、&lt;span&gt;把购车商品列表写入&lt;/span&gt;cookie&lt;span&gt;。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;返回值：逻辑视图&lt;/p&gt;

&lt;p&gt;Cookie&lt;span&gt;保存购物车&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;1&lt;span&gt;）&lt;/span&gt;&lt;span&gt;key&lt;/span&gt;&lt;span&gt;：&lt;/span&gt;&lt;span&gt;TT_CART&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;2&lt;span&gt;）&lt;/span&gt;&lt;span&gt;Value&lt;/span&gt;&lt;span&gt;：购物车列表转换成&lt;/span&gt;&lt;span&gt;json&lt;/span&gt;&lt;span&gt;数据。需要对数据进行编码。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;3&lt;span&gt;）&lt;/span&gt;&lt;span&gt;Cookie&lt;/span&gt;&lt;span&gt;的有效期：保存&lt;/span&gt;&lt;span&gt;7&lt;/span&gt;&lt;span&gt;天。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;商品列表：&lt;/p&gt;
&lt;p&gt;List&amp;lt;TbItem&amp;gt;&lt;span&gt;，每个商品数据使用&lt;/span&gt;&lt;span&gt;TbItem&lt;/span&gt;&lt;span&gt;保存。当根据商品&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;查询商品信息后，取第一张图片保存到&lt;/span&gt;&lt;span&gt;image&lt;/span&gt;&lt;span&gt;属性中即可。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;读写&lt;/span&gt;cookie&lt;span&gt;可以使用&lt;/span&gt;&lt;span&gt;CookieUtils&lt;/span&gt;&lt;span&gt;工具类实现。&lt;/span&gt;&lt;/p&gt;

&lt;h3&gt;3.1.2. Controller&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;47&quot;&gt;
&lt;pre&gt;
&lt;span&gt;@Controller
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; CartController {
    
    @Value(&lt;/span&gt;&quot;${TT_CART}&quot;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String TT_CART;
    @Value(&lt;/span&gt;&quot;${CART_EXPIRE}&quot;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; Integer CART_EXPIRE;

    @Autowired
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; ItemService itemService;
    
    @RequestMapping(&lt;/span&gt;&quot;/cart/add/{itemId}&quot;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String addCartItem(@PathVariable Long itemId, Integer num,
            HttpServletRequest request, HttpServletResponse response) {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 1、从cookie中查询商品列表。&lt;/span&gt;
        List&amp;lt;TbItem&amp;gt; cartList =&lt;span&gt; getCartList(request);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2、判断商品在商品列表中是否存在。&lt;/span&gt;
        &lt;span&gt;boolean&lt;/span&gt; hasItem = &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt; (TbItem tbItem : cartList) {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;对象比较的是地址，应该是值的比较&lt;/span&gt;
            &lt;span&gt;if&lt;/span&gt; (tbItem.getId() ==&lt;span&gt; itemId.longValue()) {
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 3、如果存在，商品数量相加。&lt;/span&gt;
                tbItem.setNum(tbItem.getNum() +&lt;span&gt; num);
                hasItem &lt;/span&gt;= &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
                &lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
            }
        }
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;hasItem) {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 4、不存在，根据商品id查询商品信息。&lt;/span&gt;
            TbItem tbItem =&lt;span&gt; itemService.getItemById(itemId);
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;取一张图片&lt;/span&gt;
            String image =&lt;span&gt; tbItem.getImage();
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (StringUtils.isNoneBlank(image)) {
                String[] images &lt;/span&gt;= image.split(&quot;,&quot;&lt;span&gt;);
                tbItem.setImage(images[&lt;/span&gt;0&lt;span&gt;]);
            }
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置购买商品数量&lt;/span&gt;
&lt;span&gt;            tbItem.setNum(num);
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 5、把商品添加到购车列表。&lt;/span&gt;
&lt;span&gt;            cartList.add(tbItem);
        }
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 6、把购车商品列表写入cookie。&lt;/span&gt;
        CookieUtils.setCookie(request, response, TT_CART, JsonUtils.objectToJson(cartList), CART_EXPIRE, &lt;span&gt;true&lt;/span&gt;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &quot;cartSuccess&quot;&lt;span&gt;;
    }
    
    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 从cookie中取购物车列表
     * &amp;lt;p&amp;gt;Title: getCartList&amp;lt;/p&amp;gt;
     * &amp;lt;p&amp;gt;Description: &amp;lt;/p&amp;gt;
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; request
     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;
     &lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; List&amp;lt;TbItem&amp;gt;&lt;span&gt; getCartList(HttpServletRequest request) {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;取购物车列表&lt;/span&gt;
        String json = CookieUtils.getCookieValue(request, TT_CART, &lt;span&gt;true&lt;/span&gt;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;判断json是否为null&lt;/span&gt;
        &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (StringUtils.isNotBlank(json)) {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;把json转换成商品列表返回&lt;/span&gt;
            List&amp;lt;TbItem&amp;gt; list = JsonUtils.jsonToList(json, TbItem.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;);
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; list;
        }
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; ArrayList&amp;lt;&amp;gt;&lt;span&gt;();
    }
    
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;&lt;br/&gt;3.2. 展示购物车商品列表&lt;/span&gt; &lt;/p&gt;
&lt;p&gt;&lt;span&gt;请求的&lt;/span&gt;url:/cart/cart&lt;/p&gt;
&lt;p&gt;参数：无&lt;/p&gt;
&lt;p&gt;返回值：逻辑视图&lt;/p&gt;
&lt;p&gt;业务逻辑：&lt;/p&gt;
&lt;p&gt;1、&lt;span&gt;从&lt;/span&gt;cookie&lt;span&gt;中取商品列表。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;2、把商品列表传递给页面。&lt;/p&gt;
&lt;h3&gt;3.2.1. Controller&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
@RequestMapping(&quot;/cart/cart&quot;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String showCartList(HttpServletRequest request, Model model) {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;取购物车商品列表&lt;/span&gt;
        List&amp;lt;TbItem&amp;gt; cartList =&lt;span&gt; getCartList(request);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;传递给页面&lt;/span&gt;
        model.addAttribute(&quot;cartList&quot;&lt;span&gt;, cartList);
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &quot;cart&quot;&lt;span&gt;;
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;&lt;br/&gt;3.3. 修改购物车商品数量&lt;/span&gt; &lt;/p&gt;
&lt;h3&gt;3.3.1. 功能分析&lt;/h3&gt;
&lt;p&gt;1、在页面中可以修改商品数量&lt;/p&gt;
&lt;p&gt;2、重新计算小计和总计。&lt;/p&gt;
&lt;p&gt;3、&lt;span&gt;修改需要写入&lt;/span&gt;cookie&lt;span&gt;。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;4、&lt;span&gt;每次修改都需要向服务端发送一个&lt;/span&gt;ajax&lt;span&gt;请求，在服务端修改&lt;/span&gt;&lt;span&gt;cookie&lt;/span&gt;&lt;span&gt;中的商品数量。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1135185/201808/1135185-20180806002230741-825491003.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;请求的&lt;/span&gt;url&lt;span&gt;：&lt;/span&gt;&lt;span&gt;/cart/update/num/{itemId}/{num}&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;参数：&lt;/span&gt;long itemId&lt;span&gt;、&lt;/span&gt;&lt;span&gt;int num&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;业务逻辑：&lt;/p&gt;
&lt;p&gt;1、接收两个参数&lt;/p&gt;
&lt;p&gt;2、&lt;span&gt;从&lt;/span&gt;cookie&lt;span&gt;中取商品列表&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;3、遍历商品列表找到对应商品&lt;/p&gt;
&lt;p&gt;4、更新商品数量&lt;/p&gt;
&lt;p&gt;5、&lt;span&gt;把商品列表写入&lt;/span&gt;cookie&lt;span&gt;。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;6、响应e3Result&lt;span&gt;。&lt;/span&gt;&lt;span&gt;Json&lt;/span&gt;&lt;span&gt;数据。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;返回值：&lt;/p&gt;
&lt;p&gt; e3Result&lt;span&gt;。&lt;/span&gt;&lt;span&gt;Json&lt;/span&gt;&lt;span&gt;数据&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;3.3.2. Controller&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
@RequestMapping(&quot;/cart/update/num/{itemId}/{num}&quot;&lt;span&gt;)
    @ResponseBody
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; e3Result updateNum(@PathVariable Long itemId, @PathVariable Integer num,
            HttpServletRequest request, HttpServletResponse response) {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 1、接收两个参数
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2、从cookie中取商品列表&lt;/span&gt;
        List&amp;lt;TbItem&amp;gt; cartList =&lt;span&gt; getCartList(request);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 3、遍历商品列表找到对应商品&lt;/span&gt;
        &lt;span&gt;for&lt;/span&gt;&lt;span&gt; (TbItem tbItem : cartList) {
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (tbItem.getId() ==&lt;span&gt; itemId.longValue()) {
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 4、更新商品数量&lt;/span&gt;
&lt;span&gt;                tbItem.setNum(num);
            }
        }
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 5、把商品列表写入cookie。&lt;/span&gt;
        CookieUtils.setCookie(request, response, TT_CART, JsonUtils.objectToJson(cartList), CART_EXPIRE, &lt;span&gt;true&lt;/span&gt;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 6、响应e3Result。Json数据。&lt;/span&gt;
        &lt;span&gt;return&lt;/span&gt;&lt;span&gt; e3Result.ok();
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;&lt;br/&gt;3.3.3. &lt;/span&gt;&lt;span&gt;解决请求&lt;/span&gt;&lt;span&gt;*.html&lt;/span&gt;&lt;span&gt;后缀无法返回&lt;/span&gt;&lt;span&gt;json&lt;/span&gt;&lt;span&gt;数据的问题&lt;/span&gt; &lt;/p&gt;
&lt;p&gt;&lt;span&gt;在&lt;/span&gt;springmvc&lt;span&gt;中请求&lt;/span&gt;&lt;span&gt;*.html&lt;/span&gt;&lt;span&gt;不可以返回&lt;/span&gt;&lt;span&gt;json&lt;/span&gt;&lt;span&gt;数据。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;修改&lt;/span&gt;web.xml&lt;span&gt;，添加&lt;/span&gt;&lt;span&gt;url&lt;/span&gt;&lt;span&gt;拦截格式。&lt;/span&gt;&lt;/p&gt;


&lt;h2&gt;3.4. 删除购物车商品&lt;/h2&gt;
&lt;h3&gt;3.4.1. 功能分析&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;请求的&lt;/span&gt;url&lt;span&gt;：&lt;/span&gt;&lt;span&gt;/cart/delete/{itemId}&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;参数：商品&lt;/span&gt;id&lt;/p&gt;
&lt;p&gt;&lt;span&gt;返回值：展示购物车列表页面。&lt;/span&gt;Url&lt;span&gt;需要做&lt;/span&gt;&lt;span&gt;redirect&lt;/span&gt;&lt;span&gt;跳转。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;业务逻辑：&lt;/p&gt;
&lt;p&gt;1、&lt;span&gt;从&lt;/span&gt;url&lt;span&gt;中取商品&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;2、&lt;span&gt;从&lt;/span&gt;cookie&lt;span&gt;中取购物车商品列表&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;3、遍历列表找到对应的商品&lt;/p&gt;
&lt;p&gt;4、删除商品。&lt;/p&gt;
&lt;p&gt;5、&lt;span&gt;把商品列表写入&lt;/span&gt;cookie&lt;span&gt;。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;6、&lt;span&gt;返回逻辑视图：在逻辑视图中做&lt;/span&gt;redirect&lt;span&gt;跳转。&lt;/span&gt;&lt;/p&gt;

&lt;h3&gt;3.4.2. Controller&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
@RequestMapping(&quot;/cart/delete/{itemId}&quot;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String deleteCartItem(@PathVariable Long itemId, HttpServletRequest request,
            HttpServletResponse response) {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 1、从url中取商品id
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2、从cookie中取购物车商品列表&lt;/span&gt;
        List&amp;lt;TbItem&amp;gt; cartList =&lt;span&gt; getCartList(request);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 3、遍历列表找到对应的商品&lt;/span&gt;
        &lt;span&gt;for&lt;/span&gt;&lt;span&gt; (TbItem tbItem : cartList) {
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (tbItem.getId() ==&lt;span&gt; itemId.longValue()) {
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 4、删除商品。&lt;/span&gt;
&lt;span&gt;                cartList.remove(tbItem);
                &lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
            }
        }
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 5、把商品列表写入cookie。&lt;/span&gt;
        CookieUtils.setCookie(request, response, TT_CART, JsonUtils.objectToJson(cartList), CART_EXPIRE, &lt;span&gt;true&lt;/span&gt;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 6、返回逻辑视图：在逻辑视图中做redirect跳转。&lt;/span&gt;
        &lt;span&gt;return&lt;/span&gt; &quot;redirect:/cart/cart.html&quot;&lt;span&gt;;
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;&lt;br/&gt;4. &lt;/span&gt;&lt;strong&gt;登录状态下的购物车处理&lt;/strong&gt; &lt;/p&gt;
&lt;h2&gt;4.1. 功能分析&lt;/h2&gt;
&lt;p&gt;1&lt;span&gt;、购物车数据保存的位置：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;未登录状态下，把购物车数据保存到&lt;/span&gt;cookie&lt;span&gt;中。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;登录状态下，需要把购物车数据保存到服务端。需要永久保存，可以保存到数据库中。可以把购物车数据保存到&lt;/span&gt;redis&lt;span&gt;中。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;2、redis&lt;span&gt;使用的数据类型&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;a) &lt;span&gt;使用&lt;/span&gt;hash&lt;span&gt;数据类型&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;b) Hash&lt;span&gt;的&lt;/span&gt;&lt;span&gt;key&lt;/span&gt;&lt;span&gt;应该是用户&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;span&gt;Hash&lt;/span&gt;&lt;span&gt;中的&lt;/span&gt;&lt;span&gt;field&lt;/span&gt;&lt;span&gt;是商品&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;，&lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;可以把商品信息转换成&lt;/span&gt;&lt;span&gt;json&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;3、添加购物车&lt;/p&gt;
&lt;p&gt;&lt;span&gt;登录状态下直接包商品数据保存到&lt;/span&gt;redis&lt;span&gt;中。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;未登录状态保存到&lt;/span&gt;cookie&lt;span&gt;中。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;4、如何判断是否登录？&lt;/p&gt;
&lt;p&gt;a) &lt;span&gt;从&lt;/span&gt;cookie&lt;span&gt;中取&lt;/span&gt;&lt;span&gt;token&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;b) 取不到未登录&lt;/p&gt;
&lt;p&gt;c) &lt;span&gt;取到&lt;/span&gt;token&lt;span&gt;，到&lt;/span&gt;&lt;span&gt;redis&lt;/span&gt;&lt;span&gt;中查询&lt;/span&gt;&lt;span&gt;token&lt;/span&gt;&lt;span&gt;是否过期。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;d) 如果过期，未登录状态&lt;/p&gt;
&lt;p&gt;e) 没过期登录状态。&lt;/p&gt;

&lt;h2&gt;4.2. 判断用户是否登录&lt;/h2&gt;
&lt;h3&gt;4.2.1. 功能分析&lt;/h3&gt;
&lt;p&gt;应该使用拦截器实现。&lt;/p&gt;
&lt;p&gt;1、&lt;span&gt;实现一个&lt;/span&gt;HandlerInterceptor&lt;span&gt;接口。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;2、&lt;span&gt;在执行&lt;/span&gt;handler&lt;span&gt;方法之前做业务处理&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;3、&lt;span&gt;从&lt;/span&gt;cookie&lt;span&gt;中取&lt;/span&gt;&lt;span&gt;token&lt;/span&gt;&lt;span&gt;。使用&lt;/span&gt;&lt;span&gt;CookieUtils&lt;/span&gt;&lt;span&gt;工具类实现。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;4、&lt;span&gt;没有取到&lt;/span&gt;token&lt;span&gt;，用户未登录。放行&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;5、&lt;span&gt;取到&lt;/span&gt;token&lt;span&gt;，调用&lt;/span&gt;&lt;span&gt;sso&lt;/span&gt;&lt;span&gt;系统的服务，根据&lt;/span&gt;&lt;span&gt;token&lt;/span&gt;&lt;span&gt;查询用户信息。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;6、没有返回用户信息。登录已经过期，未登录，放行。&lt;/p&gt;
&lt;p&gt;7、&lt;span&gt;返回用户信息。用户是登录状态。可以把用户对象保存到&lt;/span&gt;request&lt;span&gt;中，在&lt;/span&gt;&lt;span&gt;Controller&lt;/span&gt;&lt;span&gt;中可以通过判断&lt;/span&gt;&lt;span&gt;request&lt;/span&gt;&lt;span&gt;中是否包含用户对象，确定是否为登录状态。&lt;/span&gt;&lt;/p&gt;

&lt;h3&gt;4.2.2. LoginInterceptor&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;45&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * 判断用户是否登录的拦截器
 * &amp;lt;p&amp;gt;Title: LoginInterceptor&amp;lt;/p&amp;gt;
 * &amp;lt;p&amp;gt;Description: &amp;lt;/p&amp;gt;
 * &amp;lt;p&amp;gt;Company: www.itcast.cn&amp;lt;/p&amp;gt; 
 * &lt;/span&gt;&lt;span&gt;@version&lt;/span&gt;&lt;span&gt; 1.0
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; LoginInterceptor &lt;span&gt;implements&lt;/span&gt;&lt;span&gt; HandlerInterceptor {
    
    @Value(&lt;/span&gt;&quot;${COOKIE_TOKEN_KEY}&quot;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String COOKIE_TOKEN_KEY;
    @Autowired
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; UserService userService;
    
    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt; preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 执行handler方法之前执行此方法
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 1、实现一个HandlerInterceptor接口。
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2、在执行handler方法之前做业务处理
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 3、从cookie中取token。使用CookieUtils工具类实现。&lt;/span&gt;
        String token =&lt;span&gt; CookieUtils.getCookieValue(request, COOKIE_TOKEN_KEY);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 4、没有取到token，用户未登录。放行&lt;/span&gt;
        &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (StringUtils.isBlank(token)) {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
        }
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 5、取到token，调用sso系统的服务，根据token查询用户信息。&lt;/span&gt;
        E3Result e3Result =&lt;span&gt; userService.getUserByToken(token);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 6、没有返回用户信息。登录已经过期，未登录，放行。&lt;/span&gt;
        &lt;span&gt;if&lt;/span&gt; (e3Result.getStatus() != 200&lt;span&gt;) {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
        }
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 7、返回用户信息。用户是登录状态。可以把用户对象保存到request中，在Controller中可以通过判断request中是否包含用户对象，确定是否为登录状态。&lt;/span&gt;
        TbUser user =&lt;span&gt; (TbUser) e3Result.getData();
        request.setAttribute(&lt;/span&gt;&quot;user&quot;&lt;span&gt;, user);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;返回true放行
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;返回false拦截&lt;/span&gt;
        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
    }
    
    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)
            &lt;/span&gt;&lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 执行handler方法之后，并且是返回ModelAndView对象之前&lt;/span&gt;
&lt;span&gt;
    }

    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)
            &lt;/span&gt;&lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 返回ModelAndView之后。可以捕获异常。&lt;/span&gt;
&lt;span&gt;
    }

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;&lt;br/&gt;4.2.3. Springmvc.xml&lt;/span&gt;&lt;span&gt;配置拦截器&lt;/span&gt; &lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 拦截器配置 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;mvc:interceptors&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;mvc:interceptor&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;mvc:mapping &lt;/span&gt;&lt;span&gt;path&lt;/span&gt;&lt;span&gt;=&quot;/**&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;bean &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;cn.e3mall.cart.interceptor.LoginInterceptor&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;mvc:interceptor&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;mvc:interceptors&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;&lt;br/&gt;4.3. 添加购物车&lt;/span&gt; &lt;/p&gt;
&lt;h3&gt;4.3.1. 功能分析&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;登录状态下添加购物车，直接把数据保存到&lt;/span&gt;redis&lt;span&gt;中。需要调用购物车服务，使用&lt;/span&gt;&lt;span&gt;redis&lt;/span&gt;&lt;span&gt;的&lt;/span&gt;&lt;span&gt;hash&lt;/span&gt;&lt;span&gt;来保存数据。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Key&lt;span&gt;：用户&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Field&lt;span&gt;：商品&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Value&lt;span&gt;：商品对象转换成&lt;/span&gt;&lt;span&gt;json&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;参数：&lt;/p&gt;
&lt;p&gt;1、&lt;span&gt;用户&lt;/span&gt;id&lt;/p&gt;
&lt;p&gt;2、&lt;span&gt;商品&lt;/span&gt;id&lt;/p&gt;
&lt;p&gt;3、商品数量&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt; &lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;业务逻辑：&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;1、&lt;span&gt;根据商品&lt;/span&gt;id&lt;span&gt;查询商品信息&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;2、&lt;span&gt;把商品信息保存到&lt;/span&gt;redis&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;a) 判断购物车中是否有此商品&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;b) 如果有，数量相加&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;c) &lt;span&gt;如果没有，根据商品&lt;/span&gt;id&lt;span&gt;查询商品信息。&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;d) 把商品信息添加到购物车&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;3、&lt;span&gt;返回值。&lt;/span&gt;E3Result&lt;/p&gt;
&lt;h3&gt;4.3.2. dao&lt;span&gt;层&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;根据商品&lt;/span&gt;id&lt;span&gt;查询商品信息，单表查询。可以使用逆向工程。&lt;/span&gt;&lt;/p&gt;

&lt;h3&gt;4.3.3. Service&lt;span&gt;层&lt;/span&gt;&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;45&quot;&gt;
&lt;pre&gt;
&lt;span&gt;@Service
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; CartServiceImpl &lt;span&gt;implements&lt;/span&gt;&lt;span&gt; CartService {
    
    @Value(&lt;/span&gt;&quot;${CART_REDIS_KEY}&quot;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String CART_REDIS_KEY;

    @Autowired
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; TbItemMapper itemMapper;
    @Autowired
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; JedisClient jedisClient;
    
    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; E3Result addCart(&lt;span&gt;long&lt;/span&gt; userId, &lt;span&gt;long&lt;/span&gt; itemId, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; num) {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; a)判断购物车中是否有此商品&lt;/span&gt;
        Boolean flag = jedisClient.hexists(CART_REDIS_KEY + &quot;:&quot; + userId, itemId + &quot;&quot;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; b)如果有，数量相加&lt;/span&gt;
        &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (flag) {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;从hash中取商品数据&lt;/span&gt;
            String json = jedisClient.hget(CART_REDIS_KEY + &quot;:&quot; + userId, itemId + &quot;&quot;&lt;span&gt;);
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;转换成java对象&lt;/span&gt;
            TbItem tbItem = JsonUtils.jsonToPojo(json, TbItem.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;);
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;数量相加&lt;/span&gt;
            tbItem.setNum(tbItem.getNum() +&lt;span&gt; num);
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;写入hash&lt;/span&gt;
            jedisClient.hset(CART_REDIS_KEY + &quot;:&quot; + userId, itemId + &quot;&quot;&lt;span&gt;, JsonUtils.objectToJson(tbItem));
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;返回添加成功&lt;/span&gt;
            &lt;span&gt;return&lt;/span&gt;&lt;span&gt; E3Result.ok();
        }
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; c)如果没有，根据商品id查询商品信息。&lt;/span&gt;
        TbItem tbItem =&lt;span&gt; itemMapper.selectByPrimaryKey(itemId);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置商品数量&lt;/span&gt;
&lt;span&gt;        tbItem.setNum(num);
        String image &lt;/span&gt;=&lt;span&gt; tbItem.getImage();
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;取一张图片&lt;/span&gt;
        &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (StringUtils.isNotBlank(image)) {
            tbItem.setImage(image.split(&lt;/span&gt;&quot;,&quot;)[0&lt;span&gt;]);
        }
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; d)把商品信息添加到购物车&lt;/span&gt;
        jedisClient.hset(CART_REDIS_KEY + &quot;:&quot; + userId, itemId + &quot;&quot;&lt;span&gt;, JsonUtils.objectToJson(tbItem));
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; E3Result.ok();
    }

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;br/&gt;发布服务： &lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1135185/201808/1135185-20180806002350074-1420558957.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h3&gt;4.3.4. Controller&lt;/h3&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;46&quot;&gt;
&lt;pre&gt;
@RequestMapping(&quot;/cart/add/{itemId}&quot;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String addCart(@PathVariable Long itemId, Integer num,
            HttpServletRequest request, HttpServletResponse response) {
        &lt;/span&gt;&lt;span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;判断用户是否为登录状态&lt;/span&gt;
        Object object = request.getAttribute(&quot;user&quot;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (object != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
            TbUser user &lt;/span&gt;=&lt;span&gt; (TbUser) object;
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;取用户id&lt;/span&gt;
            Long userId =&lt;span&gt; user.getId();
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;添加到服务端&lt;/span&gt;
            E3Result e3Result =&lt;span&gt; cartService.addCart(userId, itemId, num);
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &quot;cartSuccess&quot;&lt;span&gt;;
        }
        &lt;/span&gt;&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果登录直接把购物车信息添加到服务端
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;如果未登录保存到cookie中
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 1、从cookie中取购物车列表。&lt;/span&gt;
        List&amp;lt;TbItem&amp;gt; cartList =&lt;span&gt; getItemListFromCookie(request);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2、判断商品列表是否存在此商品。&lt;/span&gt;
        &lt;span&gt;boolean&lt;/span&gt; falg = &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt; (TbItem tbItem : cartList) {
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (tbItem.getId() ==&lt;span&gt; itemId.longValue()) {
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;数量相加
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 4、如果存在，数量相加。&lt;/span&gt;
                tbItem.setNum(tbItem.getNum() +&lt;span&gt; num);
                falg &lt;/span&gt;= &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
                &lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
            }
        }
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 3、如果不存在添加到列表&lt;/span&gt;
        &lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;falg) {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;根据商品id取商品信息&lt;/span&gt;
            TbItem tbItem =&lt;span&gt; itemService.getItemById(itemId);
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置数量&lt;/span&gt;
&lt;span&gt;            tbItem.setNum(num);
            String image &lt;/span&gt;=&lt;span&gt; tbItem.getImage();
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;取一张图片&lt;/span&gt;
            &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (StringUtils.isNotBlank(image)) {
                tbItem.setImage(image.split(&lt;/span&gt;&quot;,&quot;)[0&lt;span&gt;]);
            }
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;添加到列表&lt;/span&gt;
&lt;span&gt;            cartList.add(tbItem);
        }
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 5、把购车列表写入cookie&lt;/span&gt;
        CookieUtils.setCookie(request, response, COOKIE_CART_KEY, JsonUtils.objectToJson(cartList), COOKIE_CART_EXPIRE, &lt;span&gt;true&lt;/span&gt;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 6、返回逻辑视图，提示添加成功&lt;/span&gt;
        &lt;span&gt;return&lt;/span&gt; &quot;cartSuccess&quot;&lt;span&gt;;
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;span&gt;&lt;br/&gt;4.4. 登录状态下访问购物车列表&lt;/span&gt; &lt;/p&gt;
&lt;h3&gt;4.4.1. 功能分析&lt;/h3&gt;
&lt;p&gt;1、&lt;span&gt;未登录状态下购物车列表是从&lt;/span&gt;cookie&lt;span&gt;中取。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;2、登录状态下购物车应该是从服务端取。&lt;/p&gt;
&lt;p&gt;3、&lt;span&gt;如果&lt;/span&gt;cookie&lt;span&gt;中有购物车数据，应该吧&lt;/span&gt;&lt;span&gt;cookie&lt;/span&gt;&lt;span&gt;中的购物车和服务端合并，合并后删除&lt;/span&gt;&lt;span&gt;cookie&lt;/span&gt;&lt;span&gt;中的购物车数据。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;4、合并购物车时，如果商品存在，数量相加，如果不存在，添加一个新的商品。&lt;/p&gt;
&lt;p&gt;5、从服务端取购物车列表展示&lt;/p&gt;

&lt;h3&gt;4.4.2. Dao&lt;span&gt;层&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;不需要访问数据库，只需要访问&lt;/span&gt;redis&lt;span&gt;。&lt;/span&gt;&lt;/p&gt;

&lt;h3&gt;4.4.3. Service&lt;span&gt;层&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;1、合并购物车&lt;/p&gt;
&lt;p&gt;&lt;span&gt;参数：用户&lt;/span&gt;id&lt;/p&gt;
&lt;p&gt;      List&amp;lt;TbItem&amp;gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;返回值：&lt;/span&gt;E3Result&lt;/p&gt;
&lt;p&gt;业务逻辑：&lt;/p&gt;
&lt;p&gt;1&lt;span&gt;）遍历商品列表&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;2&lt;span&gt;）如果服务端有相同商品，数量相加&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;3&lt;span&gt;）如果没有相同商品，添加一个新的商品&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;2、取购物车列表&lt;/p&gt;
&lt;p&gt;&lt;span&gt;参数：用户&lt;/span&gt;id&lt;/p&gt;
&lt;p&gt;&lt;span&gt;返回值：&lt;/span&gt;List&amp;lt;TbItem&amp;gt;&lt;/p&gt;
&lt;p&gt;业务逻辑：&lt;/p&gt;
&lt;p&gt;1）&lt;span&gt;从&lt;/span&gt;hash&lt;span&gt;中取所有商品数据&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;2）返回&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 合并购物车
     * &amp;lt;p&amp;gt;Title: mergeCart&amp;lt;/p&amp;gt;
     * &amp;lt;p&amp;gt;Description: &amp;lt;/p&amp;gt;
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; userId
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; itemList
     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;&lt;span&gt;
     * &lt;/span&gt;&lt;span&gt;@see&lt;/span&gt;&lt;span&gt; cn.e3mall.cart.service.CartService#mergeCart(long, java.util.List)
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; E3Result mergeCart(&lt;span&gt;long&lt;/span&gt; userId, List&amp;lt;TbItem&amp;gt;&lt;span&gt; itemList) {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;遍历商品列表&lt;/span&gt;
        &lt;span&gt;for&lt;/span&gt;&lt;span&gt; (TbItem tbItem : itemList) {
            addCart(userId, tbItem.getId(), tbItem.getNum());
        }
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; E3Result.ok();
    }

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 取购物车列表
     * &amp;lt;p&amp;gt;Title: getCartList&amp;lt;/p&amp;gt;
     * &amp;lt;p&amp;gt;Description: &amp;lt;/p&amp;gt;
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; userId
     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;&lt;span&gt;
     * &lt;/span&gt;&lt;span&gt;@see&lt;/span&gt;&lt;span&gt; cn.e3mall.cart.service.CartService#getCartList(long)
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; List&amp;lt;TbItem&amp;gt; getCartList(&lt;span&gt;long&lt;/span&gt;&lt;span&gt; userId) {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;从redis中根据用户id查询商品列表&lt;/span&gt;
        List&amp;lt;String&amp;gt; strList = jedisClient.hvals(CART_REDIS_KEY + &quot;:&quot; +&lt;span&gt; userId);
        List&lt;/span&gt;&amp;lt;TbItem&amp;gt; resultList = &lt;span&gt;new&lt;/span&gt; ArrayList&amp;lt;&amp;gt;&lt;span&gt;();
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;把json列表转换成TbItem列表&lt;/span&gt;
        &lt;span&gt;for&lt;/span&gt;&lt;span&gt; (String string : strList) {
            TbItem tbItem &lt;/span&gt;= JsonUtils.jsonToPojo(string, TbItem.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;);
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;添加到列表&lt;/span&gt;
&lt;span&gt;            resultList.add(tbItem);
        }
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; resultList;
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;&lt;br/&gt;4.4.4. 表现层&lt;/span&gt; &lt;/p&gt;
&lt;p&gt;1、判断用户是否登录。&lt;/p&gt;
&lt;p&gt;2、&lt;span&gt;如果已经登录，判断&lt;/span&gt;cookie&lt;span&gt;中是否有购物车信息&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;3、&lt;span&gt;如果有合并购物车，并删除&lt;/span&gt;cookie&lt;span&gt;中的购物车。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;4、如果是登录状态，应从服务端取购物车列表。&lt;/p&gt;
&lt;p&gt;5、&lt;span&gt;如果是未登录状态，从&lt;/span&gt;cookie&lt;span&gt;中取购物车列表&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
@RequestMapping(&quot;/cart/cart&quot;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String showCartList(HttpServletRequest request, HttpServletResponse response) {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;从cookie中取购物车列表&lt;/span&gt;
        List&amp;lt;TbItem&amp;gt; cartList =&lt;span&gt; getItemListFromCookie(request);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;判断用户是否登录&lt;/span&gt;
        Object object = request.getAttribute(&quot;user&quot;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (object != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
            TbUser user &lt;/span&gt;=&lt;span&gt; (TbUser) object; 
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;用户已经登录&lt;/span&gt;
            System.out.println(&quot;用户已经登录，用户名为：&quot; +&lt;span&gt; user.getUsername());
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;判断给我吃列表是否为空&lt;/span&gt;
            &lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;cartList.isEmpty()) {
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;合并购物车&lt;/span&gt;
&lt;span&gt;                cartService.mergeCart(user.getId(), cartList);
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;删除cookie中的购物车&lt;/span&gt;
                CookieUtils.setCookie(request, response, COOKIE_CART_KEY, &quot;&quot;&lt;span&gt;);
            }
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;从服务端取购物车列表&lt;/span&gt;
            List&amp;lt;TbItem&amp;gt; list =&lt;span&gt; cartService.getCartList(user.getId());
            request.setAttribute(&lt;/span&gt;&quot;cartList&quot;&lt;span&gt;, list);
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &quot;cart&quot;&lt;span&gt;;
        } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
            System.out.println(&lt;/span&gt;&quot;用户未登录&quot;&lt;span&gt;);
        }
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;传递给页面&lt;/span&gt;
        request.setAttribute(&quot;cartList&quot;&lt;span&gt;, cartList);
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &quot;cart&quot;&lt;span&gt;;
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;&lt;br/&gt;4.5. 修改购物车数量&lt;/span&gt; &lt;/p&gt;
&lt;p&gt;&lt;span&gt;只需要更新&lt;/span&gt;hash&lt;span&gt;中商品的数量即可。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;不需要对数据库进行操作，只需要对&lt;/span&gt;redis&lt;span&gt;操作即可。&lt;/span&gt;&lt;/p&gt;

&lt;h3&gt;4.5.1. Server&lt;/h3&gt;
&lt;p&gt;参数：&lt;/p&gt;
&lt;p&gt;1、&lt;span&gt;用户&lt;/span&gt;id&lt;/p&gt;
&lt;p&gt;2、&lt;span&gt;商品&lt;/span&gt;id&lt;/p&gt;
&lt;p&gt;3、数量&lt;/p&gt;
&lt;p&gt;返回值：&lt;/p&gt;
&lt;p&gt;E3Result&lt;/p&gt;
&lt;p&gt;业务逻辑：&lt;/p&gt;
&lt;p&gt;1、&lt;span&gt;根据商品&lt;/span&gt;id&lt;span&gt;从&lt;/span&gt;&lt;span&gt;hash&lt;/span&gt;&lt;span&gt;中取商品信息。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;2、&lt;span&gt;把&lt;/span&gt;json&lt;span&gt;转换成&lt;/span&gt;&lt;span&gt;java&lt;/span&gt;&lt;span&gt;对象&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;3、更新商品数量&lt;/p&gt;
&lt;p&gt;4、&lt;span&gt;把商品数据写回&lt;/span&gt;hash&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
&lt;span&gt;@Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; E3Result updateCartItemNum(&lt;span&gt;long&lt;/span&gt; userId, &lt;span&gt;long&lt;/span&gt; itemId, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; num) {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;从hash中取商品信息&lt;/span&gt;
        String json = jedisClient.hget(CART_REDIS_KEY + &quot;:&quot; + userId, itemId + &quot;&quot;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;转换成java对象&lt;/span&gt;
        TbItem tbItem = JsonUtils.jsonToPojo(json, TbItem.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;更新数量&lt;/span&gt;
&lt;span&gt;        tbItem.setNum(num);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;写入hash&lt;/span&gt;
        jedisClient.hset(CART_REDIS_KEY + &quot;:&quot; + userId, itemId + &quot;&quot;&lt;span&gt;, JsonUtils.objectToJson(tbItem));
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; E3Result.ok();
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;&lt;br/&gt;4.5.2. Controller&lt;/span&gt; &lt;/p&gt;
&lt;p&gt;1、判断是否为登录状态&lt;/p&gt;
&lt;p&gt;2、如果是登录状态，更新服务端商品数量&lt;/p&gt;
&lt;p&gt;3、&lt;span&gt;如果未登录，更新&lt;/span&gt;cookie&lt;span&gt;中是商品数量&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;45&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 更新商品数量
     * &amp;lt;p&amp;gt;Title: updateCartItemNum&amp;lt;/p&amp;gt;
     * &amp;lt;p&amp;gt;Description: &amp;lt;/p&amp;gt;
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; itemId
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; num
     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;
     &lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    @RequestMapping(&lt;/span&gt;&quot;/cart/update/num/{itemId}/{num}&quot;&lt;span&gt;)
    @ResponseBody
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; E3Result updateCartItemNum(@PathVariable Long itemId, @PathVariable Integer num,
            HttpServletRequest request, HttpServletResponse response) {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;判断是否为登录状态&lt;/span&gt;
        Object object = request.getAttribute(&quot;user&quot;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (object != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
            TbUser user &lt;/span&gt;=&lt;span&gt; (TbUser) object;
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;更新服务端的购物车&lt;/span&gt;
&lt;span&gt;            cartService.updateCartItemNum(user.getId(), itemId, num);
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; E3Result.ok();
        }
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 1、从cookie中取购物车列表&lt;/span&gt;
        List&amp;lt;TbItem&amp;gt; cartList =&lt;span&gt; getItemListFromCookie(request);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2、遍历列表找到对应的商品&lt;/span&gt;
        &lt;span&gt;for&lt;/span&gt;&lt;span&gt; (TbItem tbItem : cartList) {
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (tbItem.getId() ==&lt;span&gt; itemId.longValue()) {
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 3、更新商品数量&lt;/span&gt;
&lt;span&gt;                tbItem.setNum(num);
                &lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
            }
        }
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 4、把购物车列表写入cookie&lt;/span&gt;
        CookieUtils.setCookie(request, response, COOKIE_CART_KEY, JsonUtils.objectToJson(cartList), COOKIE_CART_EXPIRE, &lt;span&gt;true&lt;/span&gt;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;返回OK&lt;/span&gt;
        &lt;span&gt;return&lt;/span&gt;&lt;span&gt; E3Result.ok();
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;&lt;span&gt;&lt;br/&gt;4.6.1. 业务逻辑&lt;/span&gt;4.6. 删除购物车商品&lt;/h2&gt;
&lt;p&gt;1、判断是否为登录状态&lt;/p&gt;
&lt;p&gt;2、&lt;span&gt;如果是登录状态，直接删除&lt;/span&gt;hash&lt;span&gt;中的商品。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;3、&lt;span&gt;如果不是登录状态，对&lt;/span&gt;cookie&lt;span&gt;中的购物车进行操作&lt;/span&gt;&lt;/p&gt;

&lt;h3&gt;4.6.2. Service&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;参数：用户&lt;/span&gt;id&lt;/p&gt;
&lt;p&gt;      &lt;span&gt;商品&lt;/span&gt;id&lt;/p&gt;
&lt;p&gt;&lt;span&gt;返回值：&lt;/span&gt;E3Result&lt;/p&gt;
&lt;p&gt;业务逻辑：&lt;/p&gt;
&lt;p&gt;&lt;span&gt;根据商品&lt;/span&gt;id&lt;span&gt;删除&lt;/span&gt;&lt;span&gt;hash&lt;/span&gt;&lt;span&gt;中对应的商品数据。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;@Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; E3Result deleteCartItem(&lt;span&gt;long&lt;/span&gt; userId, &lt;span&gt;long&lt;/span&gt;&lt;span&gt; itemId) {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 根据商品id删除hash中对应的商品数据。&lt;/span&gt;
        jedisClient.hdel(CART_REDIS_KEY + &quot;:&quot; + userId, itemId + &quot;&quot;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; E3Result.ok();
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;&lt;br/&gt;4.6.3. Controller&lt;/span&gt; &lt;/p&gt;
&lt;p&gt;1、判断用户登录状态&lt;/p&gt;
&lt;p&gt;2、如果登录删除服务端&lt;/p&gt;
&lt;p&gt;3、&lt;span&gt;如果未登录删除&lt;/span&gt;cookie&lt;span&gt;中的购物车商品&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 删除购物车商品
     * &amp;lt;p&amp;gt;Title: deleteCartItem&amp;lt;/p&amp;gt;
     * &amp;lt;p&amp;gt;Description: &amp;lt;/p&amp;gt;
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; itemId
     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;
     &lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    @RequestMapping(&lt;/span&gt;&quot;/cart/delete/{itemId}&quot;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String deleteCartItem(@PathVariable Long itemId, 
            HttpServletRequest request, HttpServletResponse response) {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;判断用户登录状态&lt;/span&gt;
        Object object = request.getAttribute(&quot;user&quot;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (object != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
            TbUser user &lt;/span&gt;=&lt;span&gt; (TbUser) object;
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;删除服务端的购物车商品&lt;/span&gt;
&lt;span&gt;            cartService.deleteCartItem(user.getId(), itemId);
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &quot;redirect:/cart/cart.html&quot;&lt;span&gt;;
        }
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 1、从url 中取商品id
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2、从cookie 中取购物车列表&lt;/span&gt;
        List&amp;lt;TbItem&amp;gt; cartList =&lt;span&gt; getItemListFromCookie(request);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 3、遍历列表找到商品&lt;/span&gt;
        &lt;span&gt;for&lt;/span&gt;&lt;span&gt; (TbItem tbItem : cartList) {
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (tbItem.getId() ==&lt;span&gt; itemId.longValue()) {
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 4、删除商品&lt;/span&gt;
&lt;span&gt;                cartList.remove(tbItem);
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;退出循环&lt;/span&gt;
                &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
            }
        }
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 5、把购物车列表写入cookie&lt;/span&gt;
        CookieUtils.setCookie(request, response, COOKIE_CART_KEY, JsonUtils.objectToJson(cartList), COOKIE_CART_EXPIRE, &lt;span&gt;true&lt;/span&gt;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 6、返回逻辑视图。做redirect跳转到购物车列表页面。&lt;/span&gt;
        &lt;span&gt;return&lt;/span&gt; &quot;redirect:/cart/cart.html&quot;&lt;span&gt;;
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;br/&gt;  &lt;/p&gt;
</description>
<pubDate>Sun, 05 Aug 2018 16:27:00 +0000</pubDate>
<dc:creator>kent鹏</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/xieyupeng/p/9428030.html</dc:identifier>
</item>
<item>
<title>基于 HTML5 结合工业互联网的智能飞机控制 - xhload3d</title>
<link>http://www.cnblogs.com/xhload3d/p/9428016.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/xhload3d/p/9428016.html</guid>
<description>&lt;p&gt;从互联网+的概念一出来，就瞬间吸引了各行各业的能人志士，想要在这个领域分上一杯羹。现在传统工业生产行业运用互联网+的概念偏多，但是在大众创业万众创新的背景下，“互联网＋”涌出了层出不穷的“玩法”，智慧城市、隧道交通、智慧园区、工业生产，甚至是这次要说的智能飞机！异地协同制造的范围，目前多局限于主机制造厂之间，发动机和机载系统介入得很少。“互联网+飞机”可通过提高各类飞行器的有效监控能力、应急处置能力来大幅提高航行安全水平。“在提高这两大能力后，像飞机失联这类事件将不再发生。”当飞机飞离预定航线时，地面可以即时监控，甚至在飞机遭遇恶意操控时，地面也可以接管，而且“互联网+飞机”将对每架飞机的各项数据了如指掌，有效提高航行的安全。我认为，“互联网+飞机”将超出传统的“互联网+飞机制造”阶段，让互联网在飞机全寿命使用过程中发威，这可为传统制造业转型升级提供重大机遇。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/591709/201808/591709-20180805233224930-1425417331.gif&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h2&gt;加载飞机模型&lt;/h2&gt;
&lt;p&gt;首先，最重要的是我们的飞机模型，前面有文章写到过，HT 内部封装了一个方法 ht.Default.loadObj 来加载 OBJ 文件：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;50&quot;&gt;
&lt;pre&gt;
ht.Default.loadObj('obj/plane.obj', 'obj/plane.mtl'&lt;span&gt;, {                    
    center: &lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;,
    r3: [&lt;/span&gt;0, -Math.PI/2, 0], //&lt;span&gt; make plane face right
    s3: [&lt;/span&gt;0.15, 0.15, 0.15], &lt;span&gt;//&lt;/span&gt;&lt;span&gt; make plane smaller&lt;/span&gt;
    finishFunc: &lt;span&gt;function&lt;/span&gt;&lt;span&gt;(modelMap, array, rawS3){
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt;(modelMap){                            
            modelMap.propeller.r3 &lt;/span&gt;= {&lt;span&gt;//&lt;/span&gt;&lt;span&gt; propeller 螺旋桨&lt;/span&gt;
            func: &lt;span&gt;function&lt;/span&gt;&lt;span&gt;(data){
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; [data.a('angle'), 0, 0&lt;span&gt;]; 
            }
        };                             
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 设置模型的大小为原来的 1 1.2 1.2 倍（相当于 x 轴放大了 1 倍，y 轴放大了 1.2 倍，z 轴放大了 1.2 倍）&lt;/span&gt;
        modelMap.propeller.s3 = [1, 1.2, 1.2&lt;span&gt;]; 
        modelMap.propeller.color &lt;/span&gt;= 'yellow'&lt;span&gt;;
    } 
});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;要将 obj 解析后的模型信息绑定到图元，需先调用建模手册中模型注册章节介绍的 ht.Default.setShape3dModel(name, model) 函数进行注册，之后图元只需将 style 的 shape3d 属性设置为注册的名称。当然我们现在将这个方法封装了一下，采用更简便的方法来加载模型，但是还是需要加载的原理：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; models/plane.json&lt;/span&gt;
&lt;span&gt;{
    &lt;/span&gt;&quot;modelType&quot;: &quot;obj&quot;&lt;span&gt;,
    &lt;/span&gt;&quot;obj&quot;: &quot;obj/plane.obj&quot;&lt;span&gt;,
    &lt;/span&gt;&quot;mtl&quot;: &quot;obj/plane.mtl&quot;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 要是没有 mtl 文件，则设置为 &quot;&quot;&lt;/span&gt;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 之后通过设置节点的 style 的 shape3d 属性设置为这个 json：node.s('shape3d', 'models/plane.json')。&lt;/p&gt;
&lt;p&gt;注意！不管使用哪种方法来加载模型，mtl 文件中如果有使用贴图，贴图的路径需要是相对于 obj 文件的路径。&lt;/p&gt;
&lt;p&gt;前面代码中的 modelMap.propeller 是 OBJ 文件中定义好的 modelMap 对象中的 propeller 对象，可以试着打印 modelMap 看看输出结果。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/591709/201808/591709-20180805234554874-733033186.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;加载机尾指示灯&lt;/h2&gt;
&lt;p&gt;这个方法里的 finishFunc(modelMap, array, rawS3) 用于加载后的回调处理，具体查阅 HT for Web OBJ 手册，我们还添加了一个在 OBJ 模型中没有的飞机尾部的“红色闪烁指示灯”，这里用到的是组合模型 array（所有材质组成的数组，里面有至少一个模型），我们在 array中加入一个新的球模型：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
&lt;span&gt;// 添加一个指示灯的圆形模型&lt;/span&gt;
&lt;span&gt;array.push({
    shape3d: ht.Default.createSmoothSphereModel(),
    t3: [&lt;/span&gt;-40, 10, 0&lt;span&gt;],
    s3: [&lt;/span&gt;6, 6, 6&lt;span&gt;],
    color: {
        func: &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(data){
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; data.a('light') ? 'red': 'black'&lt;span&gt;;
        }
    }
});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这里的 shape3d 是 HT 封装的一个属性名，通过 setShape3dModel(name, model) 函数注册的或者是通过 getShape3dModel(name) 函数返回的注册过的 3D 模型，如何注册 3D 模型可查阅 HT for Web 建模手册。&lt;/p&gt;
&lt;p&gt;color 属性名对应了一个对象，这边的定义是这样的，color 直接通过 data.getAttr('a') 获取 data.setAttr(‘a’, value) 中的值，这样做有两个好处，一是可以不污染 HT 的常用属性操作，所以 HT 专门定义了这个 attr 属性类型，是 HT 预留给用户存储业务数据的；二是这样也很方便数据绑定，我们可以通过在需要更改属性的地方调用 setAttr 方法，非常方便。&lt;/p&gt;
&lt;p&gt;接着我们通过 ht.Default.setShape3dModel(name, model) 来将我们刚刚组合好的模型 array 注册成我们要的“plane”模型：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
ht.Default.setShape3dModel('plane', array);
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;创建模型节点&lt;/h2&gt;
&lt;p&gt;注册好模型后肯定是要调用这个模型，我们可以通过 shape3d 属性来调用这个模型，并且在这个模型中自定义上面代码中出现过的 light 属性和 angle 属性：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
plane = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; ht.Node();
plane.s3(&lt;/span&gt;200, 200, 200&lt;span&gt;);
plane.s3(rawS3);
plane.s({
    &lt;/span&gt;'shape3d': 'plane'&lt;span&gt;,
    &lt;/span&gt;'shape3d.scaleable': &lt;span&gt;false&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;'wf.visible': &lt;span&gt;true&lt;/span&gt;,&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 线框是否可见&lt;/span&gt;
    'wf.color': 'white'&lt;span&gt;,
    &lt;/span&gt;'wf.short': &lt;span&gt;true&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 是否显示封闭的线框，true为不封闭的短线框&lt;/span&gt;
&lt;span&gt;});
plane.a({
    &lt;/span&gt;'angle': 0&lt;span&gt;,
    &lt;/span&gt;'light': &lt;span&gt;false&lt;/span&gt;&lt;span&gt;
});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;动画&lt;/h2&gt;
&lt;p&gt;因为飞机还有螺旋桨、指示灯两个功能，我们还得对这两个模型做动画效果，可查阅 HT for Web 动画手册，通过用户在 form 表单上选择的结果来决定飞机飞行持续时间、看飞机的视角、飞机沿着“航线”飞行所要旋转的角度、机尾指示灯的“闪烁”功能等等，最后别忘了飞机停止飞行时，如果要让飞机继续飞行，就得回调这个动画，并且设置灯不再闪烁，别忘了要启动动画：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;65&quot;&gt;
&lt;pre&gt;
params =&lt;span&gt; {
    delay: &lt;/span&gt;1500&lt;span&gt;,
    duration: &lt;/span&gt;20000&lt;span&gt;,
    easing: &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(t){ 
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; (t *= 2) &amp;lt; 1 ? 0.5 * t * t : 0.5 * (1 - (--t) * (t - 2&lt;span&gt;));
    },
    action: &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(v, t){
        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; length =&lt;span&gt; g3d.getLineLength(polyline),
        offset &lt;/span&gt;= g3d.getLineOffset(polyline, length*&lt;span&gt;v),
        point &lt;/span&gt;=&lt;span&gt; offset.point,
        px &lt;/span&gt;=&lt;span&gt; point.x,
        py &lt;/span&gt;=&lt;span&gt; point.y,
        pz &lt;/span&gt;=&lt;span&gt; point.z,
        tangent &lt;/span&gt;=&lt;span&gt; offset.tangent,
        tx &lt;/span&gt;=&lt;span&gt; tangent.x,
        ty &lt;/span&gt;=&lt;span&gt; tangent.y,
        tz &lt;/span&gt;=&lt;span&gt; tangent.z;
        plane.p3(px, py, pz);
        plane.lookAt([px &lt;/span&gt;+ tx, py + ty, pz + tz], 'right'&lt;span&gt;);
                        
        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; camera = formPane.v('Camera'&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(camera === 'Look At'&lt;span&gt;){
            g3d.setCenter(px, py, pz);
        }
        &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt;(camera === 'First Person'&lt;span&gt;){                            
            g3d.setEye(px &lt;/span&gt;- tx * 400, py - ty * 400 + 30, pz - tz * 400&lt;span&gt;);
            g3d.setCenter(px, py, pz);                            
        }
                        
        plane.a(&lt;/span&gt;'angle', v*Math.PI*120&lt;span&gt;);                        
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(&lt;span&gt;this&lt;/span&gt;.duration * t % 1000 &amp;gt; 500&lt;span&gt;){
            plane.a(&lt;/span&gt;'light', &lt;span&gt;false&lt;/span&gt;&lt;span&gt;);
        }&lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;{
            plane.a(&lt;/span&gt;'light', &lt;span&gt;true&lt;/span&gt;&lt;span&gt;);
        }                        
    },
    finishFunc: &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
        animation &lt;/span&gt;=&lt;span&gt; ht.Default.startAnim(params);
        plane.a(&lt;/span&gt;'light', &lt;span&gt;false&lt;/span&gt;&lt;span&gt;);
    }                  
};                               
               
animation &lt;/span&gt;= ht.Default.startAnim(params);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 其实最让我们好奇的是描绘的路径跟飞机本身的飞行并没有关系，还有那么多左拐右拐的，要如何做才能做到呢？&lt;/p&gt;
&lt;h2&gt;绘制飞机轨道&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/591709/201808/591709-20180805234109466-1862741070.png&quot; alt=&quot;&quot; width=&quot;800&quot;/&gt;&lt;/p&gt;
&lt;p&gt;接下来我们来描绘路径，首先这个路径是由 ht.Polyline 作为基础来描绘的：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
polyline = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; ht.Polyline();   
polyline.setThickness(&lt;/span&gt;2&lt;span&gt;);
polyline.s({
    &lt;/span&gt;'shape.border.pattern': [16, 16&lt;span&gt;],
    &lt;/span&gt;'shape.border.color': 'red'&lt;span&gt;,
    &lt;/span&gt;'shape.border.gradient.color': 'yellow'&lt;span&gt;,
    &lt;/span&gt;'shape3d.resolution': 300&lt;span&gt;,
    &lt;/span&gt;'3d.selectable': &lt;span&gt;false&lt;/span&gt;&lt;span&gt;
});
dataModel.add(polyline);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上面的代码只是向 datamodel 数据模型中添加了一个 polyline 管线而已，不会显示任何东西，要显示“航道”首先就要设置航道所在的点，我们先设置航道的初始点：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
points = [{ x: 0, y: 0, e: 0&lt;span&gt; }];
segments &lt;/span&gt;= [1];
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 这个 points 和 segments 是 HT for Web Shape 手册中定义的，points 是 ht.List 类型数组的定点信息，顶点为 { x: 100, y: 200 } 格式的对象；segments 是 ht.List 类型的线段数组信息，代表 points 数组中的顶点按数组顺序的连接方式。&lt;/p&gt;
&lt;p&gt;图中“航道”左侧的多个圆形轨道也是通过设置 points 和 segments 来设置的：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;for&lt;/span&gt;(&lt;span&gt;var&lt;/span&gt; k=0; k&amp;lt;count+1; k++&lt;span&gt;){
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; angle = k * Math.PI * 2 * round /&lt;span&gt; count;
    points.push({
        x: cx &lt;/span&gt;+ radius *&lt;span&gt; Math.cos(angle),
        y: cy &lt;/span&gt;+ radius *&lt;span&gt; Math.sin(angle),
        e: k &lt;/span&gt;* height /&lt;span&gt; count
    }); 
    segments.push(&lt;/span&gt;2&lt;span&gt;);
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 接下来几个拐点也是这种方法来实现的，这里就不赘述了，如果你还没看手册的话，这里标明一点，segments 只能取值 1~5，1 代表一个新路径的起点；2 代表从上次最后点连接到该点；3 占用两个点信息，第一个点作为曲线控制点，第二个点作为曲线结束点；4 占用3个点信息，第一和第二个点作为曲线控制点，第三个点作为曲线结束点；5 不占用点信息，代表本次绘制路径结束，并闭合到路径的起始点：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;47&quot;&gt;
&lt;pre&gt;
points.push({ x: cx+radius, y: 0, e: height/2 });
points.push({ x: 0, y: 0, e: height/2 });
segments.push(3&lt;span&gt;);

points.push({ x: radius, y: &lt;/span&gt;-radius, e: height/2*0.7 });
points.push({ x: radius*2, y: radius, e: height/2*0.3 });
points.push({ x: radius*3, y: 0, e: 0&lt;span&gt; });
segments.push(&lt;/span&gt;4&lt;span&gt;);   

points.push({ x: &lt;/span&gt;0, y: 0, e: 0&lt;span&gt; });
segments.push(&lt;/span&gt;2);  
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 我们已经把路径上的点都添加进“航道”中了，接下来要把点都设置到管道上去才会显示在界面上：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;polyline.setPoints(points);
polyline.setSegments(segments);  &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;飞机跑道&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/591709/201808/591709-20180805234038800-2130604327.png&quot; alt=&quot;&quot; width=&quot;800&quot;/&gt;&lt;/p&gt;
&lt;p&gt;“跑道”就比较简单了，只是一个 Node 节点然后设置基础效果而已，没什么特别的：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
runway = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; ht.Node();
runway.s3(&lt;/span&gt;-cx+radius*3, 1, 200&lt;span&gt;);
runway.p3(cx&lt;/span&gt;+runway.getWidth()/2, -22, 0);
&lt;span&gt;runway.s({
    &lt;/span&gt;'all.color': '#FAFAFA'&lt;span&gt;,
    &lt;/span&gt;'all.transparent': &lt;span&gt;true&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;'all.reverse.cull': &lt;span&gt;true&lt;/span&gt;&lt;span&gt;,
    &lt;/span&gt;'all.opacity': 0.8&lt;span&gt;,
    &lt;/span&gt;'3d.selectable': &lt;span&gt;false&lt;/span&gt;&lt;span&gt;
});
dataModel.add(runway);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 最后，在界面上添加一个 formPane 表单面板，定义好之后可以直接添加到 body 上，这样就不会跟 graph3dView 有显示的联系了。&lt;/p&gt;
&lt;h2&gt;表单面板&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/591709/201808/591709-20180805233948980-1010115836.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;formPane 可以用 formPane.addRow 方法动态添加行，这个方法中可以直接对动态变化的数据进行交互，例如本例中的是否有动画 Animation，我们利用 checkBox 来记录选中或者非选中的状态：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;{
    checkBox: {
        label: &lt;/span&gt;'Animation'&lt;span&gt;,
        selected: &lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;,
        onValueChanged: &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.isSelected()){
                animation.resume();
            }&lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;{
                animation.pause();
            }                               
        }
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 也可以通过设置“id”来记录动态改变的值，然后 formPane 就会通过调用 formPane.v(id) 来获取当前值。&lt;/p&gt;

&lt;p&gt;工业互联网（Industrial Internet）的概念最早由通用电气（GE）在 2012 年提出，即让互联网进入产业链的上游，从根本上革新产业。根据飞常准的数据显示，美国已有 78% 的航班提供机上互联服务。在航天航空领域，工业互联网会打破软件、硬件和人员之间的信息壁垒，依靠大数据的分析，让飞机建立自己的声音，表达给飞行员和维修人员飞行员，具体飞行状况如何或者哪里需要维修。工业互联网技术的深入应用，正在改变着民航飞机的使用效率和制造成本。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/591709/201808/591709-20180805233450799-675544218.png&quot; alt=&quot;&quot; width=&quot;800&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/591709/201808/591709-20180805233619087-1931121658.gif&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/591709/201808/591709-20180805233659051-815391558.png&quot; alt=&quot;&quot; width=&quot;800&quot;/&gt;&lt;/p&gt;
</description>
<pubDate>Sun, 05 Aug 2018 16:20:00 +0000</pubDate>
<dc:creator>xhload3d</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/xhload3d/p/9428016.html</dc:identifier>
</item>
<item>
<title>[源码分析]AbstractStringBuilder - GoldArowana</title>
<link>http://www.cnblogs.com/noKing/p/9427967.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/noKing/p/9427967.html</guid>
<description>&lt;h2&gt;[源码分析]AbstractStringBuilder&lt;/h2&gt;
&lt;p&gt;Java中, AbstractStringBuilder是 StringBuilder 和 StringBuffer 的父类. 所以了解StringBuilder和StringBuffer前, 有必要先了解一下这个抽象父类.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1251417/201808/1251417-20180805235847037-1618966363.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;value字段&lt;/h3&gt;
&lt;p&gt;在这里存储字符串内容&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1251417/201808/1251417-20180805213530881-1364596344.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;构造器&lt;/h3&gt;
&lt;p&gt;在构造器内立即创建一个capacity大小的数组, 作为value字段的值.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1251417/201808/1251417-20180805213535253-130798475.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;扩容&lt;/h3&gt;
&lt;p&gt; 每次插入类的操作都会确保空间大小足够. 如果不够就会扩容, 再插入.&lt;/p&gt;
&lt;p&gt;扩容是靠调用这个方法, 来确保每次有足够的空间.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1251417/201808/1251417-20180805214125302-626987379.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;也就是说扩容后具体是多大, 还要根据newCapacity这个方法来定:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1251417/201808/1251417-20180805222835297-1243383549.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;  可以看到, 扩容策略是原先的数组长度乘以2, 然后加2. &lt;/p&gt;
&lt;p&gt;如果oldLength*2+2 之后的大小足够大了, 那么下次的数组大小就是这个数值了.&lt;/p&gt;
&lt;p&gt;但是oldLength*2+2之后的大小还是不够, 那么就直接采用传进来的数据作为目标大小.(先不讨论hugeCapacity)&lt;/p&gt;
&lt;h3&gt;trimToSize&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1251417/201808/1251417-20180805223014065-639432672.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;trimToSize的使用结果如下:&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
public class AbstractStringBuilderTest {
    public static void main(String[] args) {
        StringBuilder sb = new StringBuilder();
        sb.append(&quot;hello&quot;);
        System.out.println(&quot;size:&quot; + sb.length()); // 5
        System.out.println(&quot;capacity&quot; + sb.capacity()); // 16
        sb.trimToSize();
        System.out.println(&quot;size:&quot; + sb.length()); // 5
        System.out.println(&quot;capacity&quot; + sb.capacity()); // 5
    }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;setLength方法&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1251417/201808/1251417-20180805224402357-456558601.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;详细注意事项用下面的例子来说明:&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
public class AbstractStringBuilderTest {
    public static void main(String[] args) {
        StringBuilder sb = new StringBuilder();
        sb.append(&quot;hello&quot;);
        System.out.println(sb.toString()); // hello
        System.out.println(&quot;size:&quot; + sb.length()); // 5
        System.out.println(&quot;capacity&quot; + sb.capacity()); // 16
        sb.setLength(2);
        System.out.println(sb.toString()); // he
        System.out.println(&quot;size:&quot; + sb.length()); // 2
        System.out.println(&quot;capacity&quot; + sb.capacity()); // 16
        sb.setLength(20);
        System.out.println(sb.toString()); // he\0\0\0\00\0\0\00\0\0\00\0\0\0\0\0
        System.out.println(&quot;size:&quot; + sb.length()); // 20
        System.out.println(&quot;capacity&quot; + sb.capacity()); // 34
        sb.setLength(77);
        System.out.println(&quot;size:&quot; + sb.length()); // 77
        System.out.println(&quot;capacity&quot; + sb.capacity()); // 77
    }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;  在上面这个demo中, 我用到了三次setLength. 但是每次调用后的结果都多多少少有些区别.&lt;/p&gt;
&lt;p&gt;第1次调用: 因为setLength的参数比当前字符串的长度要小, 所以字符串被截短了, 长度也直接变为了相应的数值.&lt;/p&gt;
&lt;p&gt;第2次调用: 因为setLength的参数比当前字符串的长度要大, 所以多余出来的部分用'\0'来补充.length是20. 而数组进行一次扩容就可以hold住20这个大小, 所以就进行一次正常的扩容就行了. 正常的扩容就是原来的长度乘以2, 然后再加2, 所以是34.&lt;/p&gt;
&lt;p&gt;第三次调用: 当前数组的长度是34, 而我setLength的参数是77.  34进行一次扩容才只是34*2+2 = 70. 因为77大于这个70, 所以capacity也就是77了.&lt;/p&gt;

&lt;p&gt;同样是参数大于当前数组的大小, 同样是用'\0'来补充. 但是如果这个参数太大, 以至于一次扩容无法hold住这个大小, 那么capacity就会直接设置为那个数值.&lt;/p&gt;
&lt;p&gt;这段逻辑在newCapacity方法中. 代码前面将扩容的时候粘贴过了.&lt;/p&gt;
&lt;h3&gt;charAt方法&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1251417/201808/1251417-20180805225352096-1549770576.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;我们可以看到charAt就是判断数组越界, 来抛出异常.&lt;/p&gt;
&lt;p&gt;返回值直接就是用的数组的下角标.&lt;/p&gt;
&lt;p&gt;根据这个, setCharAt方法就不用多说了, 也是判断是否越界, 然后给数组的相应位置赋值.&lt;/p&gt;
&lt;h3&gt;append方法&lt;/h3&gt;
&lt;p&gt;append方法的很多重载就是靠调用getChars方法来达到尾插的目的的. 很简单, 就不提了.&lt;/p&gt;
&lt;p&gt;就是appendNull方法, 很想吐槽...看完了眼前一亮....&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1251417/201808/1251417-20180805231635877-1769859595.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;嗯...还有append方法的bool型重载:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1251417/201808/1251417-20180805231711011-558822978.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;.....&lt;/p&gt;
&lt;h3&gt;substring&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1251417/201808/1251417-20180805234604447-932084892.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;可以看到substring底层是直接调用的new String&lt;/p&gt;
&lt;h3&gt;reverse方法&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1251417/201808/1251417-20180805235250696-1885814030.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;两个指针j和k. 关于中心对称. 从中间开始一边向两边遍历, 一边交换. 就完成了翻转.&lt;/p&gt;
&lt;h3&gt;总结&lt;/h3&gt;
&lt;p&gt;这个类没什么特别的, 但还是稍微总结一下&lt;/p&gt;
&lt;p&gt;1. 构造器里立即初始化数组&lt;/p&gt;
&lt;p&gt;2. 扩容方式为 oldLength * 2 + 2&lt;/p&gt;
&lt;p&gt;3. 大规模使用了System.arraycopy方法.&lt;/p&gt;
</description>
<pubDate>Sun, 05 Aug 2018 15:57:00 +0000</pubDate>
<dc:creator>GoldArowana</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/noKing/p/9427967.html</dc:identifier>
</item>
<item>
<title>python 异常处理（try...finally...和with...as 方法） - 暮良文王</title>
<link>http://www.cnblogs.com/liangmingshen/p/9427951.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/liangmingshen/p/9427951.html</guid>
<description>&lt;p&gt;&lt;span&gt;&lt;strong&gt;　&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;　我们在执行一长串关联命令时，会有一个问题，如果当中一个命令失败了，整个命令串事实上就没有必要执行下去了。在异常发生时，我们也需要执行一些收场工作。比如 close() 方法关闭文件。这时 try...finally... 结构就可以派上用场了。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
try:
    f = open('a.txt', 'w')
    f.write('Hello!')
finally:
    f.close()
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　&lt;span&gt;这种结构简单的说：无论异常是否发生，在程序结束前，finally中的语句都会被执行。&lt;/span&gt;&lt;/p&gt;


&lt;p&gt;&lt;span&gt;　　try...finally... 虽然好用，但是代码段有点长。因此python2.5以后引入 with 语句。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　with 语句适用于对资源进行访问的场合，确保不管使用过程中是否发生异常都会执行必要的“清理”操作，释放资源，比如文件使用后自动关闭、线程中锁的自动获取和释放等。&lt;/span&gt;&lt;/p&gt;
&lt;div readability=&quot;6.5&quot;&gt;&lt;span&gt;&lt;span&gt;　　&lt;/span&gt;&lt;/span&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
with open('a.txt', 'w') as f:
    f.write('Hello!')
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　&lt;span&gt;和上面 try...finally... 实现一样的功能。但是代码精简很多。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Sun, 05 Aug 2018 15:52:00 +0000</pubDate>
<dc:creator>暮良文王</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/liangmingshen/p/9427951.html</dc:identifier>
</item>
<item>
<title>决策树应用（一） - DeepLearningLovers</title>
<link>http://www.cnblogs.com/xlandll/p/9410957.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/xlandll/p/9410957.html</guid>
<description>&lt;p&gt;      &lt;span&gt;  上一篇讲了ID3决策树原理，现在开始拿一个例子进行实战&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;一、python机器学习库&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;       &lt;span&gt;scikit-learn。sklearn是一个Python第三方提供的非常强力的机器学习库，它包含了从数据预处理到训练模型的各个方面。在实战使用scikit-learn中可以极大的节省我们编写代码的时间以及减少我们的代码量，使我们有更多的精力去分析数据分布，调整模型和修改超参。sklearn基本包含了所有机器学习的方式，如&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;Classification 分类，如SVM&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;Regression 回归 ，如LR&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;Clustering 非监督分类，如聚类&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;Dimensionality reduction 数据降维，如PCA&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;Model Selection 模型选择&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;Preprocessing 数据预处理       &lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;span&gt;sklearn包含了所有的机器学习算法，例如本文将用到sklearn中的ID3算法。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;在python环境中可以通过 &lt;span&gt;from sklearn.XXXX import XXXX&lt;span&gt;的形式导入sklearn包，例如，本例要使用sklean中决策树将以&lt;span&gt;from sklearn import tree&lt;/span&gt;的形式在python环境中导入决策树算法。&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;二、实战演练&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt; &lt;span&gt;1、项目说明&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt; &lt;span&gt;    &lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;&lt;span&gt;本例数据将用上一篇文章电脑销售数据，运用ID3决策树的算法对数据进行分类，即用python编程，得到最终的决策树，数据如下&lt;/span&gt;，&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;我将数据放入excel表格里面&lt;/span&gt;，&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;是为了方面python读取数据。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1421805/201808/1421805-20180803193415908-499359834.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;2、数据预处理&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;      &lt;span&gt;这里要说明，sklearn提供的tree类，只接受数值型的数据，不接受文本数据，所以需要对数据进行预处理，在本例中需要对数据转化成&lt;span&gt;虚拟变量（dummy variable）。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;   （1）虚拟变量（dummy variable）&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;            虚拟变量又称虚设变量、名义变量或哑变量，用以反映质的属性的一个人工变量,是量化了的质变量，通常取值为0或1，一般地，在虚拟变量的设置中：基础类型、肯定类型取值为1；比较类型，否定类型取值为0。这些概念往往让人看不懂，其实说白了就是将数据都变成1或者0，但具体怎么转化？拿本例的age属性来说，age有三个取值｛youth，senior,middle_aged｝现在将age的取值转化为dummy variable，将youth转化为[1,0,0] ，即1代表youth，后面两个0代表senior和middle_aged，同理，将senior转化为[0,1,0]，将middle_aged转化为[0,0,1]。再拿student属性来说，student有两个属性｛yes，no｝，现在将student的取值转化为dummy variable，将yes转化为[1,0]，将no转化为[0,1]。按照同样的原理将整个表的数据都转化成dummy variable。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;            在sklearn中有个DictVectorizer类可以直接将数据转化为dummy variable，但DictVectorizer需要接受字典的形式，所以本次&lt;span&gt;数据预处理的步骤有&lt;/span&gt;：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;            1、将数据转为字典形式，如表中编号1数据，转化为字典形式为：[{'age':'youth'},{'income':'high'},{'student':'no'},{'credit_rating':'fair'},{'buys'_computer:'no'}],同理其他数据也要转化呈这种形式，&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;最后将这些字典放在一个列表当中。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;            &lt;span&gt;2、将上一步所得的列表传入DictVectorizer中，将数据转化为dummy variable。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;     （2）代码实现预处理过程&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; pandas as pd
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; data=pd.read_excel(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;./data/决策树1.xls&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; data=&lt;span&gt;pd.DataFrame(data)
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; 
&lt;span&gt; 6&lt;/span&gt; valuedata=data.values&lt;span&gt;#&lt;/span&gt;&lt;span&gt;表里面的数据&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt; header=list(data.columns)[1:6]&lt;span&gt;#&lt;/span&gt;&lt;span&gt;表头&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt; 
&lt;span&gt; 9&lt;/span&gt; featureList=[]&lt;span&gt;#&lt;/span&gt;&lt;span&gt;这个列表用于存放处理后得到的字典&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt; labelList=data[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Class_buys_computer&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;]&lt;span&gt;#&lt;/span&gt;&lt;span&gt;存放表中Class_buys_computer属性的数据&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt; &lt;span&gt;for&lt;/span&gt; value &lt;span&gt;in&lt;/span&gt;&lt;span&gt; valuedata:
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;     featureDict=&lt;span&gt;{}
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;     &lt;span&gt;for&lt;/span&gt; i &lt;span&gt;in&lt;/span&gt; range(4&lt;span&gt;):
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;         featureDict[header[i]]=value[i+1&lt;span&gt;]
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;    featureList.append(featureDict)
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;         
&lt;/pre&gt;&lt;/div&gt;



&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;以上的代码是将数据变成字典的过程，输出的featureList为：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1421805/201808/1421805-20180805185248249-887174923.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;将得到的featureList传送给sklearn中的DictVectorizer的对象，最后将数据转化为dummy variable。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; sklearn.feature_extraction &lt;span&gt;import&lt;/span&gt;&lt;span&gt; DictVectorizer
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; sklearn &lt;span&gt;import&lt;/span&gt;&lt;span&gt; preprocessing
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; 
&lt;span&gt;4&lt;/span&gt; vec=&lt;span&gt;DictVectorizer()
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt; dummyX=&lt;span&gt;vec.fit_transform(featureList).toarray()
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt; lb=&lt;span&gt;preprocessing.LabelBinarizer()
&lt;/span&gt;&lt;span&gt;7&lt;/span&gt; dummyY=lb.fit_transform(labelList)
&lt;/pre&gt;&lt;/div&gt;



&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;preprocessing是sklearn中的预处理模块，而preprocessing.LabelBinarizer()是专门将标签变量进行二值化，比如本例，将Class_buys_computer中的取值yes和no转化为1和0&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;打印dummyX和dummyY的结果为：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1421805/201808/1421805-20180805190333748-2045094864.png&quot; alt=&quot;&quot;/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1421805/201808/1421805-20180805190451487-773109428.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;



&lt;pre&gt;
&lt;br/&gt;&lt;span&gt;3、建立决策树&lt;/span&gt;
&lt;/pre&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;from&lt;/span&gt; sklearn &lt;span&gt;import&lt;/span&gt;&lt;span&gt; tree
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; sklearn.externals.six &lt;span&gt;import&lt;/span&gt;&lt;span&gt; StringIO

clf&lt;/span&gt;=tree.DecisionTreeClassifier(criterion=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;entropy&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
clf&lt;/span&gt;=clf.fit(dummyX,dummyY)
&lt;/pre&gt;&lt;/div&gt;

&lt;pre&gt;
&lt;span&gt;在python环境中通过from sklearn import tree导入决策树模块，调用tree.DecisionTreefier（）建立决策树模型，在参数中criterion是选择决策树中的类型，&lt;br/&gt;entropy代表信息熵，所以选择ID3模型。再调用fit（）函数对预处理得到的dummyX，和dummyY进行训练。将得到的clf打印出来结果为：&lt;br/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1421805/201808/1421805-20180805232226930-57323887.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;可以看到，我们建立ID3决策树的具体参数配置，具体参数的意义，可以自行查阅。现在需要对最后的模型进行可视化，决策树的可视化需要另外安装Graphviz环境，他的下载地址为&lt;br/&gt;&lt;a href=&quot;http://www.graphviz.org/&quot;&gt;http://www.graphviz.org/&lt;/a&gt;，下载安装完后，需要加入环境变量，具体下载安装过程网上有很多。这里不再赘述。&lt;br/&gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
with open(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;allElectronicsInformationGainOri.dot&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;w&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;) as f:
    f&lt;/span&gt;=tree.export_graphviz(clf,feature_names=vec.get_feature_names(),out_file=f)
&lt;/pre&gt;&lt;/div&gt;

&lt;pre&gt;
&lt;span&gt;它会在本目录下生成一个叫，allElecrionInformationGainOri.dot文件，里面的内容为：&lt;br/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1421805/201808/1421805-20180805233214469-359622796.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;这种dot文件都是文字叙述，看起来有点乱，但Graphviz可以将dot文件转化为pdf格式，内容为最后的决策树形状&lt;br/&gt;但需要执行一个命令，就是先打开windows的命令窗口， 转化dot文件至pdf可视化决策树语句：dot -Tpdf iris.dot -o outpu.pdf，再本目录里面会得到一个pdf文件&lt;br/&gt;里面是最终的决策树：&lt;br/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1421805/201808/1421805-20180805233610205-676126697.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;pre readability=&quot;4&quot;&gt;
&lt;span readability=&quot;2&quot;&gt;这个决策树跟我们手工算出得出的形状不太一样，这是sklearn将决策树进行了优化，优化的手段有“剪枝”等处理，这将会在后续文章，进行讲解。&lt;br/&gt;至此整个应用到此完毕，请读者手动去实践一下吧。&lt;p&gt;下一篇文章： 决策树原理（二）&lt;br/&gt;&lt;/p&gt;&lt;/span&gt;
&lt;/pre&gt;



























</description>
<pubDate>Sun, 05 Aug 2018 15:39:00 +0000</pubDate>
<dc:creator>DeepLearningLovers</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/xlandll/p/9410957.html</dc:identifier>
</item>
<item>
<title>从 0 到 1 实现 React 系列 —— 4.setState优化和ref的实现 - 牧云云</title>
<link>http://www.cnblogs.com/MuYunyun/p/9427911.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/MuYunyun/p/9427911.html</guid>
<description>&lt;p&gt;看源码一个痛处是会陷进理不顺主干的困局中，本系列文章在实现一个 (x)react 的同时理顺 React 框架的主干内容(JSX/虚拟DOM/组件/生命周期/diff算法/setState/ref/...)&lt;/p&gt;
&lt;h3 id=&quot;同步-setstate-的问题&quot;&gt;同步 setState 的问题&lt;/h3&gt;
&lt;p&gt;而在现有 setState 逻辑实现中，每调用一次 setState 就会执行 render 一次。因此在如下代码中，每次点击增加按钮，因为 click 方法里调用了 10 次 setState 函数，页面也会被渲染 10 次。而我们希望的是每点击一次增加按钮只执行 render 函数一次。&lt;/p&gt;
&lt;pre class=&quot;js&quot;&gt;
&lt;code&gt;export default class B extends Component {
  constructor(props) {
    super(props)
    this.state = {
      count: 0
    }
    this.click = this.click.bind(this)
  }

  click() {
    for (let i = 0; i &amp;lt; 10; i++) {
      this.setState({ // 在先前的逻辑中，没调用一次 setState 就会 render 一次
        count: ++this.state.count
      })
    }
  }

  render() {
    console.log(this.state.count)
    return (
      &amp;lt;div&amp;gt;
        &amp;lt;button onClick={this.click}&amp;gt;增加&amp;lt;/button&amp;gt;
        &amp;lt;div&amp;gt;{this.state.count}&amp;lt;/div&amp;gt;
      &amp;lt;/div&amp;gt;
    )
  }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;异步调用-setstate&quot;&gt;异步调用 setState&lt;/h3&gt;
&lt;p&gt;查阅 setState 的 api，其形式如下：&lt;/p&gt;
&lt;pre class=&quot;js&quot;&gt;
&lt;code&gt;setState(updater, [callback])&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;它能接收两个参数，其中第一个参数 updater 可以为对象或者为函数 (&lt;code&gt;(prevState, props) =&amp;gt; stateChange&lt;/code&gt;)，第二个参数为回调函数；&lt;/p&gt;
&lt;p&gt;确定优化思路为：将多次 setState 后跟着的值进行浅合并，并借助事件循环等所有值合并好之后再进行渲染界面。&lt;/p&gt;
&lt;pre class=&quot;js&quot;&gt;
&lt;code&gt;let componentArr = []

// 异步渲染
function asyncRender(updater, component, cb) {
  if (componentArr.length === 0) {
    defer(() =&amp;gt; render())       // 利用事件循环，延迟渲染函数的调用
  }

  if (cb) defer(cb)             // 调用回调函数
  if (_.isFunction(updater)) {  // 处理 setState 后跟函数的情况
    updater = updater(component.state, component.props)
  }
  // 浅合并逻辑
  component.state = Object.assign({}, component.state, updater)
  if (componentArr.includes(component)) {
    component.state = Object.assign({}, component.state, updater)
  } else {
    componentArr.push(component)
  }
}

function render() {
  let component
  while (component = componentArr.shift()) {
    renderComponent(component) // rerender
  }
}

// 事件循环，关于 promise 的事件循环和 setTimeout 的事件循环后续会单独写篇文章。
const defer = function(fn) {
  return Promise.resolve().then(() =&amp;gt; fn())
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;此时，每点击一次增加按钮 render 函数只执行一次了。&lt;/p&gt;
&lt;h3 id=&quot;ref-的实现&quot;&gt;ref 的实现&lt;/h3&gt;
&lt;p&gt;在 react 中并不建议使用 ref 属性，而应该尽量使用&lt;a href=&quot;https://doc.react-china.org/docs/lifting-state-up.html&quot;&gt;状态提升&lt;/a&gt;，但是 react 还是提供了 ref 属性赋予了开发者操作 dom 的能力，react 的 ref 有 &lt;code&gt;string&lt;/code&gt;、&lt;code&gt;callback&lt;/code&gt;、&lt;code&gt;createRef&lt;/code&gt; 三种形式，分别如下：&lt;/p&gt;
&lt;pre class=&quot;js&quot;&gt;
&lt;code&gt;// string 这种写法未来会被抛弃
class MyComponent extends Component {
  componentDidMount() {
    this.refs.myRef.focus()
  }
  render() {
    return &amp;lt;input ref=&quot;myRef&quot; /&amp;gt;
  }
}

// callback(比较通用)
class MyComponent extends Component {
  componentDidMount() {
    this.myRef.focus()
  }
  render() {
    return &amp;lt;input ref={(ele) =&amp;gt; {
      this.myRef = ele
    }} /&amp;gt;
  }
}

// react 16.3 增加，其它 react-like 框架还没有同步
class MyComponent extends Component {
  constructor() {
    super() {
      this.myRef = React.createRef()
    }
  }
  componentDidMount() {
    this.myRef.current.focus()
  }
  render() {
    return &amp;lt;input ref={this.myRef} /&amp;gt;
  }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/40462264&quot;&gt;React ref 的前世今生&lt;/a&gt; 罗列了三种写法的差异，下面对上述例子中的第二种写法(比较通用)进行实现。&lt;/p&gt;
&lt;p&gt;首先在 setAttribute 方法内补充上对 ref 的属性进行特殊处理，&lt;/p&gt;
&lt;pre class=&quot;js&quot;&gt;
&lt;code&gt;function setAttribute(dom, attr, value) {
  ...
  else if (attr === 'ref') {          // 处理 ref 属性
    if (_.isFunction(value)) {
      value(dom)
    }
  }
  ...
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;针对这个例子中 &lt;code&gt;this.myRef.focus()&lt;/code&gt; 的 focus 属性需要异步处理，因为调用 componentDidMount 的时候，界面上还未添加 dom 元素。处理 renderComponent 函数：&lt;/p&gt;
&lt;pre class=&quot;js&quot;&gt;
&lt;code&gt;function renderComponent(component) {
  ...
  else if (component &amp;amp;&amp;amp; component.componentDidMount) {
    defer(component.componentDidMount.bind(component))
  }
  ...
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;刷新页面，可以发现 input 框已为选中状态。&lt;/p&gt;
&lt;p&gt;&lt;embed src=&quot;http://oqhtscus0.bkt.clouddn.com/d35589fbbff45a2437c6c13e24ba8058.jpg-200&quot;/&gt;&lt;/p&gt;
&lt;p&gt;处理完普通元素的 ref 后，再来处理下自定义组件的 ref 的情况。之前默认自定义组件上是没属性的，现在只要针对自定义组件的 ref 属性做相应处理即可。稍微修改 vdomToDom 函数如下：&lt;/p&gt;
&lt;pre class=&quot;js&quot;&gt;
&lt;code&gt;function vdomToDom(vdom) {
  if (_.isFunction(vdom.nodeName)) { // 此时是自定义组件
    ...
    for (const attr in vdom.attributes) { // 处理自定义组件的 ref 属性
      if (attr === 'ref' &amp;amp;&amp;amp; _.isFunction(vdom.attributes[attr])) {
        vdom.attributes[attr](component)
      }
    }
    ...
  }
  ...
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;跑如下测试用例：&lt;/p&gt;
&lt;pre class=&quot;js&quot;&gt;
&lt;code&gt;class A extends Component {
  constructor() {
    super()
    this.state = {
      count: 0
    }
    this.click = this.click.bind(this)
  }

  click() {
    this.setState({
      count: ++this.state.count
    })
  }

  render() {
    return &amp;lt;div&amp;gt;{this.state.count}&amp;lt;/div&amp;gt;
  }
}

class B extends Component {
  constructor() {
    super()
    this.click = this.click.bind(this)
  }

  click() {
    this.A.click()
  }

  render() {
    return (
      &amp;lt;div&amp;gt;
        &amp;lt;button onClick={this.click}&amp;gt;加1&amp;lt;/button&amp;gt;
        &amp;lt;A ref={(e) =&amp;gt; { this.A = e }} /&amp;gt;
      &amp;lt;/div&amp;gt;
    )
  }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;效果如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://oqhtscus0.bkt.clouddn.com/reactref%E6%B5%8B%E8%AF%951&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/MuYunyun/cpreact&quot;&gt;项目地址&lt;/a&gt;，&lt;a href=&quot;https://github.com/MuYunyun/cpreact/blob/master/.github/PULL_REQUEST_TEMPLATE.md&quot;&gt;关于如何 pr&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;本系列文章拜读和借鉴了 &lt;a href=&quot;https://github.com/hujiulong/simple-react&quot;&gt;simple-react&lt;/a&gt;，在此特别感谢 &lt;a href=&quot;https://github.com/hujiulong&quot;&gt;Jiulong Hu&lt;/a&gt; 的分享。&lt;/p&gt;
</description>
<pubDate>Sun, 05 Aug 2018 15:35:00 +0000</pubDate>
<dc:creator>牧云云</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/MuYunyun/p/9427911.html</dc:identifier>
</item>
<item>
<title>Nginx-rtmp 直播媒体实时流实现 - 无脑仔的小明</title>
<link>http://www.cnblogs.com/wunaozai/p/9427730.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/wunaozai/p/9427730.html</guid>
<description>&lt;p&gt;&lt;strong&gt;&lt;span&gt;0. 前言&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　这段时间在搭建一个IPCamera项目服务器。视频点对点通话，客户端会查看设备端的音视频实时流。为了省流量，是通过P2P进行穿透。但是由于NAT设备的原因和IPV4的枯竭。有些设备是无法进行点对点传输实时流。所以需要进行服务器转发。这里为了快速实现原型，同时参考现在主流的流媒体协议。发现很多使用的是RTMP协议。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　下图是总体设计图，为了整合多平台，会自建RTMP流媒体服务器和使用云厂商SaaS的RTMP流媒体服务。但是由于有时候会传输一些非流媒体数据，需要传输一些二进制文件，所以会需要自定义媒体转发服务。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　以下是我实际项目中，用到的架构实现流程图。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/485067/201808/485067-20180805224250622-955288547.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;1&lt;/span&gt;&lt;span&gt;. 客户端A无法进行P2P穿透，请求业务服务器要进行转发。
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; &lt;span&gt;2&lt;/span&gt;. 业务服务器根据客户端A，请求类型，返回对应的转发服务器地址和对应的房间号RoomID/&lt;span&gt;Token等信息
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; &lt;span&gt;3&lt;/span&gt;&lt;span&gt;. 上述请求类型，可以是请求自建RTMP流媒体服务，购买于云厂商RTMP流媒体服务或者自定义协议媒体转发服务
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; &lt;span&gt;4&lt;/span&gt;. 客户端A得到业务服务器返回的媒体服务器地址和RoomID/&lt;span&gt;Token
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt; &lt;span&gt;5&lt;/span&gt;. 通过信令服务器或者MQTT服务器，把对应的媒体服务器地址和RoomID/&lt;span&gt;Token告诉另一端客户端B
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt; &lt;span&gt;6&lt;/span&gt;&lt;span&gt;. 客户端A和客户端B同时进入相同房间Room，客户端A进行推流，客户端B进行拉流
&lt;/span&gt;&lt;span&gt;7&lt;/span&gt; &lt;span&gt;7&lt;/span&gt;. 其他媒体信息，如编解码格式，清晰度，播放，暂停，拍照等命令，通过上述信令或MQTT服务器进行命令控制
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;1. 编译Nginx&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　RTMP流媒体服务器，现成的开源方案有很多，有SRS，Red5，wowoza，FMS等，我这里使用的是Nginx的rtmp插件实现实时流转发。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　下载 nginx-rtmp-module  &lt;a href=&quot;https://github.com/arut/nginx-rtmp-module&quot;&gt;https://github.com/arut/nginx-rtmp-module&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　重新编译nginx &lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; --prefix=/opt/nginx --with-stream --with-http_ssl_module --with-stream_ssl_module --with-debug --add-module=../nginx-rtmp-module
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;2. 配置Nginx.conf&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　基本的nginx配置，这里就不进行介绍了，需要了解的可以参考我其他博客，里面有介绍。这里只介绍rtmp段的定义。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;rtmp{
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;    server{
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;         listen &lt;span&gt;8081&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;         access_log logs/&lt;span&gt;rtmp_access.log;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;         on_connect http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;127.0.0.1:8080/v1/rtmp/on_connect;&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;        application rtmp {
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;            live on;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;            notify_method get;
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;             on_play http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;127.0.0.1:8080/v1/rtmp/on_play;&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt;             on_publish http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;127.0.0.1:8080/v1/rtmp/on_publish;&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt;             on_done http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;127.0.0.1:8080/v1/rtmp/on_done;&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt;             on_play_done http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;127.0.0.1:8080/v1/rtmp/on_play_done;&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt;             on_publish_done http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;127.0.0.1:8080/v1/rtmp/on_publish_done;&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt;             on_record_done http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;127.0.0.1:8080/v1/rtmp/on_record_done;&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt;             on_update http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;127.0.0.1:8080/v1/rtmp/on_update;&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt; &lt;span&gt;            notify_update_timeout 10s;
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;        application vod {
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;             play /opt/openresty/&lt;span&gt;video;
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;3. HTTP异步通知回调&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; 　　Nginx-rtmp-module插件实现了针对RTMP协议的一些命令做了事件通知。这里我通过一个简单的SpringBoot项目，快速搭建一个HTTP服务来接收RTMP的回调。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;44&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.wunaozai.rtmp.notify.controller;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; 
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; javax.servlet.http.HttpServletRequest;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; 
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.web.bind.annotation.GetMapping;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.web.bind.annotation.RequestMapping;
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.web.bind.annotation.RestController;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; 
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;@RestController
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; @RequestMapping(value=&quot;/v1/rtmp/&quot;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; RTMPNotifyController {
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; 
&lt;span&gt;13&lt;/span&gt;     @GetMapping(value=&quot;/on_connect&quot;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; String onConnect(HttpServletRequest request){
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;         debug(request, &quot;on_connect&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &quot;on_connect&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;     @GetMapping(value=&quot;/on_play&quot;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; String onPlay(HttpServletRequest request){
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;         debug(request, &quot;on_play&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &quot;on_play&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;     @GetMapping(value=&quot;/on_publish&quot;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; String onPublish(HttpServletRequest request){
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;         debug(request, &quot;on_publish&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &quot;on_publish&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;     @GetMapping(value=&quot;/on_done&quot;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; String onDone(HttpServletRequest request){
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;         debug(request, &quot;on_done&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &quot;on_done&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt;     @GetMapping(value=&quot;/on_play_done&quot;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; String onPlayDone(HttpServletRequest request){
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt;         debug(request, &quot;on_play_done&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &quot;on_play_done&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt;     @GetMapping(value=&quot;/on_publish_done&quot;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; String onPublishDone(HttpServletRequest request){
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt;         debug(request, &quot;on_publish_done&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &quot;on_publish_done&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt;     @GetMapping(value=&quot;/on_record_done&quot;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; String onRecordDone(HttpServletRequest request){
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt;         debug(request, &quot;on_record_done&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &quot;on_record_done&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt;     @GetMapping(value=&quot;/on_update&quot;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;49&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; String onUpdate(HttpServletRequest request){
&lt;/span&gt;&lt;span&gt;50&lt;/span&gt;         debug(request, &quot;on_update&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;51&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &quot;on_update&quot;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;52&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;53&lt;/span&gt;     
&lt;span&gt;54&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt;&lt;span&gt; String debug(HttpServletRequest request, String action){
&lt;/span&gt;&lt;span&gt;55&lt;/span&gt;         String str = action + &quot;: &quot; + request.getRequestURI() + &quot; &quot; +&lt;span&gt; request.getQueryString();
&lt;/span&gt;&lt;span&gt;56&lt;/span&gt; &lt;span&gt;        System.out.println(str);
&lt;/span&gt;&lt;span&gt;57&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; str;
&lt;/span&gt;&lt;span&gt;58&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;59&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;4. 运行效果&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　(1) 启动nginx和SpringBoot&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　(2) 以下是SpringBoot打印信息(各位可以简单分析一下这些日志的)&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; on_connect: /v1/rtmp/on_connect app=rtmp&amp;amp;flashver=FMLE/&lt;span&gt;3.0&lt;/span&gt;%&lt;span&gt;20&lt;/span&gt;(compatible%3B%20FMSc/&lt;span&gt;1.0&lt;/span&gt;)&amp;amp;swfurl=&amp;amp;tcurl=rtmp:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;120.24.210.62:8081/rtmp&amp;amp;pageurl=&amp;amp;addr=113.74.127.195&amp;amp;epoch=178269841&amp;amp;call=connect&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; on_publish: /v1/rtmp/on_publish app=rtmp&amp;amp;flashver=FMLE/&lt;span&gt;3.0&lt;/span&gt;%&lt;span&gt;20&lt;/span&gt;(compatible%3B%20FMSc/&lt;span&gt;1.0&lt;/span&gt;)&amp;amp;swfurl=&amp;amp;tcurl=rtmp:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;120.24.210.62:8081/rtmp&amp;amp;pageurl=&amp;amp;addr=113.74.127.195&amp;amp;clientid=541&amp;amp;call=publish&amp;amp;name=room&amp;amp;type=live&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt; on_update: /v1/rtmp/on_update app=rtmp&amp;amp;flashver=FMLE/&lt;span&gt;3.0&lt;/span&gt;%&lt;span&gt;20&lt;/span&gt;(compatible%3B%20FMSc/&lt;span&gt;1.0&lt;/span&gt;)&amp;amp;swfurl=&amp;amp;tcurl=rtmp:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;120.24.210.62:8081/rtmp&amp;amp;pageurl=&amp;amp;addr=113.74.127.195&amp;amp;clientid=541&amp;amp;call=update_publish&amp;amp;time=10&amp;amp;timestamp=3999&amp;amp;name=room&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt; on_done: /v1/rtmp/on_done app=rtmp&amp;amp;flashver=FMLE/&lt;span&gt;3.0&lt;/span&gt;%&lt;span&gt;20&lt;/span&gt;(compatible%3B%20FMSc/&lt;span&gt;1.0&lt;/span&gt;)&amp;amp;swfurl=&amp;amp;tcurl=rtmp:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;120.24.210.62:8081/rtmp&amp;amp;pageurl=&amp;amp;addr=113.74.127.195&amp;amp;clientid=541&amp;amp;call=done&amp;amp;name=room&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt; on_publish_done: /v1/rtmp/on_publish_done app=rtmp&amp;amp;flashver=FMLE/&lt;span&gt;3.0&lt;/span&gt;%&lt;span&gt;20&lt;/span&gt;(compatible%3B%20FMSc/&lt;span&gt;1.0&lt;/span&gt;)&amp;amp;swfurl=&amp;amp;tcurl=rtmp:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;120.24.210.62:8081/rtmp&amp;amp;pageurl=&amp;amp;addr=113.74.127.195&amp;amp;clientid=541&amp;amp;call=publish_done&amp;amp;name=room&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt; on_connect: /v1/rtmp/on_connect app=rtmp&amp;amp;flashver=FMLE/&lt;span&gt;3.0&lt;/span&gt;%&lt;span&gt;20&lt;/span&gt;(compatible%3B%20FMSc/&lt;span&gt;1.0&lt;/span&gt;)&amp;amp;swfurl=&amp;amp;tcurl=rtmp:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;120.24.210.62:8081/rtmp&amp;amp;pageurl=&amp;amp;addr=113.74.127.195&amp;amp;epoch=178305623&amp;amp;call=connect&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt; on_publish: /v1/rtmp/on_publish app=rtmp&amp;amp;flashver=FMLE/&lt;span&gt;3.0&lt;/span&gt;%&lt;span&gt;20&lt;/span&gt;(compatible%3B%20FMSc/&lt;span&gt;1.0&lt;/span&gt;)&amp;amp;swfurl=&amp;amp;tcurl=rtmp:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;120.24.210.62:8081/rtmp&amp;amp;pageurl=&amp;amp;addr=113.74.127.195&amp;amp;clientid=547&amp;amp;call=publish&amp;amp;name=room&amp;amp;type=live&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt; on_update: /v1/rtmp/on_update app=rtmp&amp;amp;flashver=FMLE/&lt;span&gt;3.0&lt;/span&gt;%&lt;span&gt;20&lt;/span&gt;(compatible%3B%20FMSc/&lt;span&gt;1.0&lt;/span&gt;)&amp;amp;swfurl=&amp;amp;tcurl=rtmp:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;120.24.210.62:8081/rtmp&amp;amp;pageurl=&amp;amp;addr=113.74.127.195&amp;amp;clientid=547&amp;amp;call=update_publish&amp;amp;time=10&amp;amp;timestamp=7296&amp;amp;name=room&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt; on_update: /v1/rtmp/on_update app=rtmp&amp;amp;flashver=FMLE/&lt;span&gt;3.0&lt;/span&gt;%&lt;span&gt;20&lt;/span&gt;(compatible%3B%20FMSc/&lt;span&gt;1.0&lt;/span&gt;)&amp;amp;swfurl=&amp;amp;tcurl=rtmp:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;120.24.210.62:8081/rtmp&amp;amp;pageurl=&amp;amp;addr=113.74.127.195&amp;amp;clientid=547&amp;amp;call=update_publish&amp;amp;time=20&amp;amp;timestamp=17248&amp;amp;name=room&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt; on_update: /v1/rtmp/on_update app=rtmp&amp;amp;flashver=FMLE/&lt;span&gt;3.0&lt;/span&gt;%&lt;span&gt;20&lt;/span&gt;(compatible%3B%20FMSc/&lt;span&gt;1.0&lt;/span&gt;)&amp;amp;swfurl=&amp;amp;tcurl=rtmp:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;120.24.210.62:8081/rtmp&amp;amp;pageurl=&amp;amp;addr=113.74.127.195&amp;amp;clientid=547&amp;amp;call=update_publish&amp;amp;time=30&amp;amp;timestamp=27328&amp;amp;name=room&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt; on_update: /v1/rtmp/on_update app=rtmp&amp;amp;flashver=FMLE/&lt;span&gt;3.0&lt;/span&gt;%&lt;span&gt;20&lt;/span&gt;(compatible%3B%20FMSc/&lt;span&gt;1.0&lt;/span&gt;)&amp;amp;swfurl=&amp;amp;tcurl=rtmp:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;120.24.210.62:8081/rtmp&amp;amp;pageurl=&amp;amp;addr=113.74.127.195&amp;amp;clientid=547&amp;amp;call=update_publish&amp;amp;time=40&amp;amp;timestamp=37280&amp;amp;name=room&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt; on_update: /v1/rtmp/on_update app=rtmp&amp;amp;flashver=FMLE/&lt;span&gt;3.0&lt;/span&gt;%&lt;span&gt;20&lt;/span&gt;(compatible%3B%20FMSc/&lt;span&gt;1.0&lt;/span&gt;)&amp;amp;swfurl=&amp;amp;tcurl=rtmp:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;120.24.210.62:8081/rtmp&amp;amp;pageurl=&amp;amp;addr=113.74.127.195&amp;amp;clientid=547&amp;amp;call=update_publish&amp;amp;time=50&amp;amp;timestamp=47296&amp;amp;name=room&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt; on_update: /v1/rtmp/on_update app=rtmp&amp;amp;flashver=FMLE/&lt;span&gt;3.0&lt;/span&gt;%&lt;span&gt;20&lt;/span&gt;(compatible%3B%20FMSc/&lt;span&gt;1.0&lt;/span&gt;)&amp;amp;swfurl=&amp;amp;tcurl=rtmp:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;120.24.210.62:8081/rtmp&amp;amp;pageurl=&amp;amp;addr=113.74.127.195&amp;amp;clientid=547&amp;amp;call=update_publish&amp;amp;time=60&amp;amp;timestamp=57312&amp;amp;name=room&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt; on_update: /v1/rtmp/on_update app=rtmp&amp;amp;flashver=FMLE/&lt;span&gt;3.0&lt;/span&gt;%&lt;span&gt;20&lt;/span&gt;(compatible%3B%20FMSc/&lt;span&gt;1.0&lt;/span&gt;)&amp;amp;swfurl=&amp;amp;tcurl=rtmp:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;120.24.210.62:8081/rtmp&amp;amp;pageurl=&amp;amp;addr=113.74.127.195&amp;amp;clientid=547&amp;amp;call=update_publish&amp;amp;time=70&amp;amp;timestamp=67264&amp;amp;name=room&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt; on_connect: /v1/rtmp/on_connect app=rtmp&amp;amp;flashver=&amp;amp;swfurl=&amp;amp;tcurl=rtmp:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;rtmp.wunaozai.com:8081/rtmp&amp;amp;pageurl=&amp;amp;addr=113.74.127.195&amp;amp;epoch=178380351&amp;amp;call=connect&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt; on_play: /v1/rtmp/on_play app=rtmp&amp;amp;flashver=&amp;amp;swfurl=&amp;amp;tcurl=rtmp:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;rtmp.wunaozai.com:8081/rtmp&amp;amp;pageurl=&amp;amp;addr=113.74.127.195&amp;amp;clientid=557&amp;amp;call=play&amp;amp;name=room&amp;amp;start=4294966296&amp;amp;duration=0&amp;amp;reset=0&amp;amp;pass=12345&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt; on_play_done: /v1/rtmp/on_play_done app=rtmp&amp;amp;flashver=&amp;amp;swfurl=&amp;amp;tcurl=rtmp:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;rtmp.wunaozai.com:8081/rtmp&amp;amp;pageurl=&amp;amp;addr=113.74.127.195&amp;amp;clientid=557&amp;amp;call=play_done&amp;amp;name=room&amp;amp;pass=12345&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt; on_done: /v1/rtmp/on_done app=rtmp&amp;amp;flashver=&amp;amp;swfurl=&amp;amp;tcurl=rtmp:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;rtmp.wunaozai.com:8081/rtmp&amp;amp;pageurl=&amp;amp;addr=113.74.127.195&amp;amp;clientid=557&amp;amp;call=done&amp;amp;name=room&amp;amp;pass=12345&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt; on_update: /v1/rtmp/on_update app=rtmp&amp;amp;flashver=FMLE/&lt;span&gt;3.0&lt;/span&gt;%&lt;span&gt;20&lt;/span&gt;(compatible%3B%20FMSc/&lt;span&gt;1.0&lt;/span&gt;)&amp;amp;swfurl=&amp;amp;tcurl=rtmp:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;120.24.210.62:8081/rtmp&amp;amp;pageurl=&amp;amp;addr=113.74.127.195&amp;amp;clientid=547&amp;amp;call=update_publish&amp;amp;time=80&amp;amp;timestamp=77344&amp;amp;name=room&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt; on_connect: /v1/rtmp/on_connect app=rtmp&amp;amp;flashver=&amp;amp;swfurl=&amp;amp;tcurl=rtmp:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;rtmp.wunaozai.com:8081/rtmp&amp;amp;pageurl=&amp;amp;addr=113.74.127.195&amp;amp;epoch=178388202&amp;amp;call=connect&lt;/span&gt;
&lt;span&gt;21&lt;/span&gt; on_play: /v1/rtmp/on_play app=rtmp&amp;amp;flashver=&amp;amp;swfurl=&amp;amp;tcurl=rtmp:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;rtmp.wunaozai.com:8081/rtmp&amp;amp;pageurl=&amp;amp;addr=113.74.127.195&amp;amp;clientid=563&amp;amp;call=play&amp;amp;name=room&amp;amp;start=4294966296&amp;amp;duration=0&amp;amp;reset=0&amp;amp;pass=12345&lt;/span&gt;
&lt;span&gt;22&lt;/span&gt; on_done: /v1/rtmp/on_done app=rtmp&amp;amp;flashver=&amp;amp;swfurl=&amp;amp;tcurl=rtmp:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;rtmp.wunaozai.com:8081/rtmp&amp;amp;pageurl=&amp;amp;addr=113.74.127.195&amp;amp;clientid=563&amp;amp;call=done&amp;amp;name=room&amp;amp;pass=12345&lt;/span&gt;
&lt;span&gt;23&lt;/span&gt; on_play_done: /v1/rtmp/on_play_done app=rtmp&amp;amp;flashver=&amp;amp;swfurl=&amp;amp;tcurl=rtmp:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;rtmp.wunaozai.com:8081/rtmp&amp;amp;pageurl=&amp;amp;addr=113.74.127.195&amp;amp;clientid=563&amp;amp;call=play_done&amp;amp;name=room&amp;amp;pass=12345&lt;/span&gt;
&lt;span&gt;24&lt;/span&gt; on_update: /v1/rtmp/on_update app=rtmp&amp;amp;flashver=FMLE/&lt;span&gt;3.0&lt;/span&gt;%&lt;span&gt;20&lt;/span&gt;(compatible%3B%20FMSc/&lt;span&gt;1.0&lt;/span&gt;)&amp;amp;swfurl=&amp;amp;tcurl=rtmp:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;120.24.210.62:8081/rtmp&amp;amp;pageurl=&amp;amp;addr=113.74.127.195&amp;amp;clientid=547&amp;amp;call=update_publish&amp;amp;time=90&amp;amp;timestamp=87360&amp;amp;name=room&lt;/span&gt;
&lt;span&gt;25&lt;/span&gt; on_connect: /v1/rtmp/on_connect app=rtmp&amp;amp;flashver=&amp;amp;swfurl=&amp;amp;tcurl=rtmp:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;rtmp.wunaozai.com:8081/rtmp&amp;amp;pageurl=&amp;amp;addr=113.74.127.195&amp;amp;epoch=178396146&amp;amp;call=connect&lt;/span&gt;
&lt;span&gt;26&lt;/span&gt; on_play: /v1/rtmp/on_play app=rtmp&amp;amp;flashver=&amp;amp;swfurl=&amp;amp;tcurl=rtmp:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;rtmp.wunaozai.com:8081/rtmp&amp;amp;pageurl=&amp;amp;addr=113.74.127.195&amp;amp;clientid=569&amp;amp;call=play&amp;amp;name=room&amp;amp;start=4294966296&amp;amp;duration=0&amp;amp;reset=0&amp;amp;pass=12345&lt;/span&gt;
&lt;span&gt;27&lt;/span&gt; on_done: /v1/rtmp/on_done app=rtmp&amp;amp;flashver=&amp;amp;swfurl=&amp;amp;tcurl=rtmp:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;rtmp.wunaozai.com:8081/rtmp&amp;amp;pageurl=&amp;amp;addr=113.74.127.195&amp;amp;clientid=569&amp;amp;call=done&amp;amp;name=room&amp;amp;pass=12345&lt;/span&gt;
&lt;span&gt;28&lt;/span&gt; on_play_done: /v1/rtmp/on_play_done app=rtmp&amp;amp;flashver=&amp;amp;swfurl=&amp;amp;tcurl=rtmp:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;rtmp.wunaozai.com:8081/rtmp&amp;amp;pageurl=&amp;amp;addr=113.74.127.195&amp;amp;clientid=569&amp;amp;call=play_done&amp;amp;name=room&amp;amp;pass=12345&lt;/span&gt;
&lt;span&gt;29&lt;/span&gt; on_connect: /v1/rtmp/on_connect app=rtmp&amp;amp;flashver=&amp;amp;swfurl=&amp;amp;tcurl=rtmp:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;rtmp.wunaozai.com:8081/rtmp&amp;amp;pageurl=&amp;amp;addr=113.74.127.195&amp;amp;epoch=178403666&amp;amp;call=connect&lt;/span&gt;
&lt;span&gt;30&lt;/span&gt; on_play: /v1/rtmp/on_play app=rtmp&amp;amp;flashver=&amp;amp;swfurl=&amp;amp;tcurl=rtmp:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;rtmp.wunaozai.com:8081/rtmp&amp;amp;pageurl=&amp;amp;addr=113.74.127.195&amp;amp;clientid=574&amp;amp;call=play&amp;amp;name=room&amp;amp;start=4294966296&amp;amp;duration=0&amp;amp;reset=0&amp;amp;pass=12345&lt;/span&gt;
&lt;span&gt;31&lt;/span&gt; on_update: /v1/rtmp/on_update app=rtmp&amp;amp;flashver=FMLE/&lt;span&gt;3.0&lt;/span&gt;%&lt;span&gt;20&lt;/span&gt;(compatible%3B%20FMSc/&lt;span&gt;1.0&lt;/span&gt;)&amp;amp;swfurl=&amp;amp;tcurl=rtmp:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;120.24.210.62:8081/rtmp&amp;amp;pageurl=&amp;amp;addr=113.74.127.195&amp;amp;clientid=547&amp;amp;call=update_publish&amp;amp;time=100&amp;amp;timestamp=97311&amp;amp;name=room&lt;/span&gt;
&lt;span&gt;32&lt;/span&gt; on_update: /v1/rtmp/on_update app=rtmp&amp;amp;flashver=&amp;amp;swfurl=&amp;amp;tcurl=rtmp:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;rtmp.wunaozai.com:8081/rtmp&amp;amp;pageurl=&amp;amp;addr=113.74.127.195&amp;amp;clientid=574&amp;amp;call=update_play&amp;amp;time=10&amp;amp;timestamp=105504&amp;amp;name=room&amp;amp;pass=12345&lt;/span&gt;
&lt;span&gt;33&lt;/span&gt; on_update: /v1/rtmp/on_update app=rtmp&amp;amp;flashver=FMLE/&lt;span&gt;3.0&lt;/span&gt;%&lt;span&gt;20&lt;/span&gt;(compatible%3B%20FMSc/&lt;span&gt;1.0&lt;/span&gt;)&amp;amp;swfurl=&amp;amp;tcurl=rtmp:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;120.24.210.62:8081/rtmp&amp;amp;pageurl=&amp;amp;addr=113.74.127.195&amp;amp;clientid=547&amp;amp;call=update_publish&amp;amp;time=110&amp;amp;timestamp=107199&amp;amp;name=room&lt;/span&gt;
&lt;span&gt;34&lt;/span&gt; on_done: /v1/rtmp/on_done app=rtmp&amp;amp;flashver=&amp;amp;swfurl=&amp;amp;tcurl=rtmp:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;rtmp.wunaozai.com:8081/rtmp&amp;amp;pageurl=&amp;amp;addr=113.74.127.195&amp;amp;clientid=574&amp;amp;call=done&amp;amp;name=room&amp;amp;pass=12345&lt;/span&gt;
&lt;span&gt;35&lt;/span&gt; on_play_done: /v1/rtmp/on_play_done app=rtmp&amp;amp;flashver=&amp;amp;swfurl=&amp;amp;tcurl=rtmp:&lt;span&gt;//rtmp.wunaozai.com&lt;/span&gt;&lt;span&gt;:8081/rtmp&amp;amp;pageurl=&amp;amp;addr=113.74.127.195&amp;amp;clientid=574&amp;amp;call=play_done&amp;amp;name=room&amp;amp;pass=12345&lt;/span&gt;
&lt;span&gt;36&lt;/span&gt; on_update: /v1/rtmp/on_update app=rtmp&amp;amp;flashver=FMLE/&lt;span&gt;3.0&lt;/span&gt;%&lt;span&gt;20&lt;/span&gt;(compatible%3B%20FMSc/&lt;span&gt;1.0&lt;/span&gt;)&amp;amp;swfurl=&amp;amp;tcurl=rtmp:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;120.24.210.62:8081/rtmp&amp;amp;pageurl=&amp;amp;addr=113.74.127.195&amp;amp;clientid=547&amp;amp;call=update_publish&amp;amp;time=120&amp;amp;timestamp=117344&amp;amp;name=room&lt;/span&gt;
&lt;span&gt;37&lt;/span&gt; on_update: /v1/rtmp/on_update app=rtmp&amp;amp;flashver=FMLE/&lt;span&gt;3.0&lt;/span&gt;%&lt;span&gt;20&lt;/span&gt;(compatible%3B%20FMSc/&lt;span&gt;1.0&lt;/span&gt;)&amp;amp;swfurl=&amp;amp;tcurl=rtmp:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;120.24.210.62:8081/rtmp&amp;amp;pageurl=&amp;amp;addr=113.74.127.195&amp;amp;clientid=547&amp;amp;call=update_publish&amp;amp;time=130&amp;amp;timestamp=122815&amp;amp;name=room&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;　　(3) 客户端进行推流，这里的推流软件，我是使用这个 http://www.iavcast.com/html/ruanjian/iavcast.html &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/485067/201808/485067-20180805231915378-1626592119.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　(4) 移动端，我使用微信小程序里的 腾讯视频云  这个小程序里面有RTMP测试&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/485067/201808/485067-20180805232149241-1055414099.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　(5) nginx-rtmp 日志&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;113.74&lt;/span&gt;.&lt;span&gt;127.195&lt;/span&gt; [&lt;span&gt;05&lt;/span&gt;/Aug/&lt;span&gt;2018&lt;/span&gt;:&lt;span&gt;16&lt;/span&gt;:&lt;span&gt;18&lt;/span&gt;:&lt;span&gt;08&lt;/span&gt; +&lt;span&gt;0800&lt;/span&gt;] PUBLISH &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;rtmp&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;room&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;&quot;&quot;&lt;/span&gt; - &lt;span&gt;2646572&lt;/span&gt; &lt;span&gt;687&lt;/span&gt; &lt;span&gt;&quot;&quot;&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;FMLE/3.0 (compatible; FMSc/1.0)&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; (1m 46s)
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;113.74&lt;/span&gt;.&lt;span&gt;127.195&lt;/span&gt; [&lt;span&gt;05&lt;/span&gt;/Aug/&lt;span&gt;2018&lt;/span&gt;:&lt;span&gt;16&lt;/span&gt;:&lt;span&gt;19&lt;/span&gt;:&lt;span&gt;49&lt;/span&gt; +&lt;span&gt;0800&lt;/span&gt;] PLAY &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;rtmp&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;room&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;pass=12345&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; - &lt;span&gt;413&lt;/span&gt; &lt;span&gt;542&lt;/span&gt; &lt;span&gt;&quot;&quot;&lt;/span&gt; &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt; (4s)
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;113.74&lt;/span&gt;.&lt;span&gt;127.195&lt;/span&gt; [&lt;span&gt;05&lt;/span&gt;/Aug/&lt;span&gt;2018&lt;/span&gt;:&lt;span&gt;16&lt;/span&gt;:&lt;span&gt;19&lt;/span&gt;:&lt;span&gt;57&lt;/span&gt; +&lt;span&gt;0800&lt;/span&gt;] PLAY &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;rtmp&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;room&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;pass=12345&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; - &lt;span&gt;413&lt;/span&gt; &lt;span&gt;542&lt;/span&gt; &lt;span&gt;&quot;&quot;&lt;/span&gt; &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt; (4s)
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;113.74&lt;/span&gt;.&lt;span&gt;127.195&lt;/span&gt; [&lt;span&gt;05&lt;/span&gt;/Aug/&lt;span&gt;2018&lt;/span&gt;:&lt;span&gt;16&lt;/span&gt;:&lt;span&gt;20&lt;/span&gt;:&lt;span&gt;05&lt;/span&gt; +&lt;span&gt;0800&lt;/span&gt;] PLAY &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;rtmp&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;room&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;pass=12345&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; - &lt;span&gt;413&lt;/span&gt; &lt;span&gt;542&lt;/span&gt; &lt;span&gt;&quot;&quot;&lt;/span&gt; &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt; (4s)
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;113.74&lt;/span&gt;.&lt;span&gt;127.195&lt;/span&gt; [&lt;span&gt;05&lt;/span&gt;/Aug/&lt;span&gt;2018&lt;/span&gt;:&lt;span&gt;16&lt;/span&gt;:&lt;span&gt;20&lt;/span&gt;:&lt;span&gt;13&lt;/span&gt; +&lt;span&gt;0800&lt;/span&gt;] PLAY &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;rtmp&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;room&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;pass=12345&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; - &lt;span&gt;413&lt;/span&gt; &lt;span&gt;542&lt;/span&gt; &lt;span&gt;&quot;&quot;&lt;/span&gt; &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt; (4s)
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;113.74&lt;/span&gt;.&lt;span&gt;127.195&lt;/span&gt; [&lt;span&gt;05&lt;/span&gt;/Aug/&lt;span&gt;2018&lt;/span&gt;:&lt;span&gt;16&lt;/span&gt;:&lt;span&gt;30&lt;/span&gt;:&lt;span&gt;39&lt;/span&gt; +&lt;span&gt;0800&lt;/span&gt;] PLAY &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;rtmp&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;room&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;pass=12345&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; - &lt;span&gt;413&lt;/span&gt; &lt;span&gt;871&lt;/span&gt; &lt;span&gt;&quot;&quot;&lt;/span&gt; &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt; (4s)
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;113.74&lt;/span&gt;.&lt;span&gt;127.195&lt;/span&gt; [&lt;span&gt;05&lt;/span&gt;/Aug/&lt;span&gt;2018&lt;/span&gt;:&lt;span&gt;16&lt;/span&gt;:&lt;span&gt;30&lt;/span&gt;:&lt;span&gt;54&lt;/span&gt; +&lt;span&gt;0800&lt;/span&gt;] PLAY &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;rtmp&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;room&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;pass=12345&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; - &lt;span&gt;413&lt;/span&gt; &lt;span&gt;647163&lt;/span&gt; &lt;span&gt;&quot;&quot;&lt;/span&gt; &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt; (12s)
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;113.74&lt;/span&gt;.&lt;span&gt;127.195&lt;/span&gt; [&lt;span&gt;05&lt;/span&gt;/Aug/&lt;span&gt;2018&lt;/span&gt;:&lt;span&gt;16&lt;/span&gt;:&lt;span&gt;31&lt;/span&gt;:&lt;span&gt;08&lt;/span&gt; +&lt;span&gt;0800&lt;/span&gt;] PUBLISH &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;rtmp&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;room&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;&quot;&quot;&lt;/span&gt; - &lt;span&gt;4961955&lt;/span&gt; &lt;span&gt;409&lt;/span&gt; &lt;span&gt;&quot;&quot;&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;FMLE/3.0 (compatible; FMSc/1.0)&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; (1m 30s)
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;113.74&lt;/span&gt;.&lt;span&gt;127.195&lt;/span&gt; [&lt;span&gt;05&lt;/span&gt;/Aug/&lt;span&gt;2018&lt;/span&gt;:&lt;span&gt;23&lt;/span&gt;:&lt;span&gt;06&lt;/span&gt;:&lt;span&gt;47&lt;/span&gt; +&lt;span&gt;0800&lt;/span&gt;] PUBLISH &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;rtmp&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;room&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;&quot;&quot;&lt;/span&gt; - &lt;span&gt;425763&lt;/span&gt; &lt;span&gt;529&lt;/span&gt; &lt;span&gt;&quot;&quot;&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;FMLE/3.0 (compatible; FMSc/1.0)&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; (13s)
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;113.74&lt;/span&gt;.&lt;span&gt;127.195&lt;/span&gt; [&lt;span&gt;05&lt;/span&gt;/Aug/&lt;span&gt;2018&lt;/span&gt;:&lt;span&gt;23&lt;/span&gt;:&lt;span&gt;08&lt;/span&gt;:&lt;span&gt;29&lt;/span&gt; +&lt;span&gt;0800&lt;/span&gt;] PLAY &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;rtmp&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;room&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;pass=12345&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; - &lt;span&gt;413&lt;/span&gt; &lt;span&gt;871&lt;/span&gt; &lt;span&gt;&quot;&quot;&lt;/span&gt; &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt; (4s)
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;113.74&lt;/span&gt;.&lt;span&gt;127.195&lt;/span&gt; [&lt;span&gt;05&lt;/span&gt;/Aug/&lt;span&gt;2018&lt;/span&gt;:&lt;span&gt;23&lt;/span&gt;:&lt;span&gt;08&lt;/span&gt;:&lt;span&gt;37&lt;/span&gt; +&lt;span&gt;0800&lt;/span&gt;] PLAY &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;rtmp&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;room&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;pass=12345&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; - &lt;span&gt;413&lt;/span&gt; &lt;span&gt;871&lt;/span&gt; &lt;span&gt;&quot;&quot;&lt;/span&gt; &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt; (4s)
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;113.74&lt;/span&gt;.&lt;span&gt;127.195&lt;/span&gt; [&lt;span&gt;05&lt;/span&gt;/Aug/&lt;span&gt;2018&lt;/span&gt;:&lt;span&gt;23&lt;/span&gt;:&lt;span&gt;08&lt;/span&gt;:&lt;span&gt;45&lt;/span&gt; +&lt;span&gt;0800&lt;/span&gt;] PLAY &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;rtmp&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;room&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;pass=12345&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; - &lt;span&gt;413&lt;/span&gt; &lt;span&gt;871&lt;/span&gt; &lt;span&gt;&quot;&quot;&lt;/span&gt; &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt; (4s)
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;113.74&lt;/span&gt;.&lt;span&gt;127.195&lt;/span&gt; [&lt;span&gt;05&lt;/span&gt;/Aug/&lt;span&gt;2018&lt;/span&gt;:&lt;span&gt;23&lt;/span&gt;:&lt;span&gt;09&lt;/span&gt;:&lt;span&gt;05&lt;/span&gt; +&lt;span&gt;0800&lt;/span&gt;] PLAY &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;rtmp&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;room&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;pass=12345&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; - &lt;span&gt;413&lt;/span&gt; &lt;span&gt;926026&lt;/span&gt; &lt;span&gt;&quot;&quot;&lt;/span&gt; &lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt; (17s)
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;113.74&lt;/span&gt;.&lt;span&gt;127.195&lt;/span&gt; [&lt;span&gt;05&lt;/span&gt;/Aug/&lt;span&gt;2018&lt;/span&gt;:&lt;span&gt;23&lt;/span&gt;:&lt;span&gt;09&lt;/span&gt;:&lt;span&gt;30&lt;/span&gt; +&lt;span&gt;0800&lt;/span&gt;] PUBLISH &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;rtmp&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;room&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;&quot;&quot;&lt;/span&gt; - &lt;span&gt;7061016&lt;/span&gt; &lt;span&gt;409&lt;/span&gt; &lt;span&gt;&quot;&quot;&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;FMLE/3.0 (compatible; FMSc/1.0)&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; (2m 20s)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;5. RTMP鉴权方式&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　 一般商用的话，为了防止被其他人使用和安全性考虑，所以需要对RTMP进行鉴权处理。鉴权如果有特殊性的，可以通过修改nginx-rtmp-module的源代码，然后进行修改，其实就是增加个auth函数，这个函数可以查询数据库之类的，然后决定返回0成功还是-1表示失败。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　除了上面说到的方式，还可以通过简单的方式，就是上面提到的HTTP回调。如果HTTP回调返回的HTTP状态码是2xx的，表示成功。如果是返回5xx的状态码，那么表示失败。那样的话，服务器就是断开RTMP连接。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　就是在rtmp://rtmp.wunaozai.com/rtmp_live/room?username=username&amp;amp;password=password&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　至于实现，这里暂时还没有，其实就是在SpringBoot项目中对每个请求，判断一下参数即可。如果后面有机会就详细写一下，关联Redis数据库，实现房间号功能。但是可能不会写了，因为实际上不难。就是整个流程跑通还是比较多代码要写的，在博客里贴太多代码有点不好。博客最主要的还是提供思路。实际实现就应该在项目中实现了。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;6. 其他&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　这里是一些配置说明和示例&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt; &lt;span&gt;Application 创建一个RTMP应用，这里有点区别于http的location
&lt;/span&gt;&lt;span&gt;  2&lt;/span&gt; &lt;span&gt;Timeout 60s 
&lt;/span&gt;&lt;span&gt;  3&lt;/span&gt; &lt;span&gt;stocket超时，可以配合keepalive和ping值来实现不让服务器端长期处于监听连接客户端状态，实现快速关掉socket
&lt;/span&gt;&lt;span&gt;  4&lt;/span&gt; &lt;span&gt;Ping 3m
&lt;/span&gt;&lt;span&gt;  5&lt;/span&gt; &lt;span&gt;ping_timeout 30s
&lt;/span&gt;&lt;span&gt;  6&lt;/span&gt; &lt;span&gt;RTMP ping用于检查活动连接的协议。发送一个特殊的包远程连接，在ping_timeout指定时间内期待一个回复，如果没有收到回复，连接断开
&lt;/span&gt;&lt;span&gt;  7&lt;/span&gt; max_streams &lt;span&gt;32&lt;/span&gt;
&lt;span&gt;  8&lt;/span&gt; &lt;span&gt;设置RTMP流的最大数目，单一流数据最大限制，一般默认的32就可以了
&lt;/span&gt;&lt;span&gt;  9&lt;/span&gt; ack_window &lt;span&gt;5000000&lt;/span&gt;
&lt;span&gt; 10&lt;/span&gt; &lt;span&gt;设置RTMP窗口的大小
&lt;/span&gt;&lt;span&gt; 11&lt;/span&gt; chunk_size &lt;span&gt;4096&lt;/span&gt;
&lt;span&gt; 12&lt;/span&gt; &lt;span&gt;数据块大小 设置值越大CPU负载就越小
&lt;/span&gt;&lt;span&gt; 13&lt;/span&gt; &lt;span&gt;max_queue
&lt;/span&gt;&lt;span&gt; 14&lt;/span&gt; &lt;span&gt;最大队列数，一般默认即可
&lt;/span&gt;&lt;span&gt; 15&lt;/span&gt; &lt;span&gt;max_message 1M
&lt;/span&gt;&lt;span&gt; 16&lt;/span&gt; &lt;span&gt;输入数据消息的最大大小。所有输入数据消息都会保存在内存中，等待完成流媒体转发。在理论上传入的消息可以是非常大，对服务器稳定性影响较大，所以一般默认即可。
&lt;/span&gt;&lt;span&gt; 17&lt;/span&gt; &lt;span&gt;out_queue
&lt;/span&gt;&lt;span&gt; 18&lt;/span&gt; &lt;span&gt;out_cork
&lt;/span&gt;&lt;span&gt; 19&lt;/span&gt; &lt;span&gt;Buflen 5s
&lt;/span&gt;&lt;span&gt; 20&lt;/span&gt; &lt;span&gt;设置默认缓冲区长度。通常客户端发送播放前RTMP set_buflen命令并重置该设置
&lt;/span&gt;&lt;span&gt; 21&lt;/span&gt; 
&lt;span&gt; 22&lt;/span&gt; &lt;span&gt;访问控制
&lt;/span&gt;&lt;span&gt; 23&lt;/span&gt; &lt;span&gt;Access
&lt;/span&gt;&lt;span&gt; 24&lt;/span&gt; Allow/&lt;span&gt;deny
&lt;/span&gt;&lt;span&gt; 25&lt;/span&gt; 允许来自指定地址或者所有地址发布/&lt;span&gt;播放
&lt;/span&gt;&lt;span&gt; 26&lt;/span&gt; Allow public &lt;span&gt;127.0&lt;/span&gt;.&lt;span&gt;0.1&lt;/span&gt;
&lt;span&gt; 27&lt;/span&gt; &lt;span&gt;Deny publish all;
&lt;/span&gt;&lt;span&gt; 28&lt;/span&gt; Allow play &lt;span&gt;192.168&lt;/span&gt;.&lt;span&gt;0.0&lt;/span&gt;/&lt;span&gt;24&lt;/span&gt;
&lt;span&gt; 29&lt;/span&gt; &lt;span&gt;Deny play all;
&lt;/span&gt;&lt;span&gt; 30&lt;/span&gt; 
&lt;span&gt; 31&lt;/span&gt; &lt;span&gt;Exec命令
&lt;/span&gt;&lt;span&gt; 32&lt;/span&gt; &lt;span&gt;Exce 
&lt;/span&gt;&lt;span&gt; 33&lt;/span&gt; &lt;span&gt;exec_options on;
&lt;/span&gt;&lt;span&gt; 34&lt;/span&gt; &lt;span&gt;启动一些exec指令选项，通过一些exec事件来干预整个RTMP流
&lt;/span&gt;&lt;span&gt; 35&lt;/span&gt; &lt;span&gt;可以仔细一些外部编解码功能
&lt;/span&gt;&lt;span&gt; 36&lt;/span&gt; Exec ffmpeg -i rtmp:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;localhost?src/$name -vcodec libx264 -vprofile baseline -g 10 -s 300x200 -acodec libfaac -ar 44100 -ac 1 -f flv rtmp:&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;localhost/hls/$name 2&amp;gt;&amp;gt; /var/log/ffmpeg-$name.log;&lt;/span&gt;
&lt;span&gt; 37&lt;/span&gt; &lt;span&gt;Exce_statc 
&lt;/span&gt;&lt;span&gt; 38&lt;/span&gt; &lt;span&gt;类似exce，属于静态命令，不支持传递上下文参数
&lt;/span&gt;&lt;span&gt; 39&lt;/span&gt; &lt;span&gt;Exec_kill_signal term;
&lt;/span&gt;&lt;span&gt; 40&lt;/span&gt; &lt;span&gt;Exec_kill_signal user1;
&lt;/span&gt;&lt;span&gt; 41&lt;/span&gt; Exec_kill_signal &lt;span&gt;3&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 42&lt;/span&gt; &lt;span&gt;Exec_pull 
&lt;/span&gt;&lt;span&gt; 43&lt;/span&gt; &lt;span&gt;Exec_push
&lt;/span&gt;&lt;span&gt; 44&lt;/span&gt; &lt;span&gt;Exec_publish
&lt;/span&gt;&lt;span&gt; 45&lt;/span&gt; &lt;span&gt;指定与参数外部命令要在发布事件执行。
&lt;/span&gt;&lt;span&gt; 46&lt;/span&gt; &lt;span&gt;Exec_play
&lt;/span&gt;&lt;span&gt; 47&lt;/span&gt; &lt;span&gt;指定与要在打开事件执行外部命令
&lt;/span&gt;&lt;span&gt; 48&lt;/span&gt; &lt;span&gt;Exec_play_done
&lt;/span&gt;&lt;span&gt; 49&lt;/span&gt; &lt;span&gt;指定要在打开完成事件执行外部命令
&lt;/span&gt;&lt;span&gt; 50&lt;/span&gt; &lt;span&gt;Exec_publish_done
&lt;/span&gt;&lt;span&gt; 51&lt;/span&gt; &lt;span&gt;Exec_record_done
&lt;/span&gt;&lt;span&gt; 52&lt;/span&gt; &lt;span&gt;例子
&lt;/span&gt;&lt;span&gt; 53&lt;/span&gt; exec_play bash -c “&lt;span&gt;echo&lt;/span&gt; $addr $pageurl &amp;gt;&amp;gt; /tmp/&lt;span&gt;clients”
&lt;/span&gt;&lt;span&gt; 54&lt;/span&gt; Exec_publish base -c “&lt;span&gt;echo&lt;/span&gt; $addr $flashver &amp;gt;&amp;gt; /tmp/&lt;span&gt;publishers”
&lt;/span&gt;&lt;span&gt; 55&lt;/span&gt; &lt;span&gt;转录
&lt;/span&gt;&lt;span&gt; 56&lt;/span&gt; Exec_record_done ffmpeg -y -i $path -acodec libmp31ame -&lt;span&gt;ar&lt;/span&gt; &lt;span&gt;44100&lt;/span&gt; -ac &lt;span&gt;1&lt;/span&gt; -vcodec libx264 $&lt;span&gt;dirname&lt;/span&gt;/$&lt;span&gt;basename&lt;/span&gt;&lt;span&gt;.mp4
&lt;/span&gt;&lt;span&gt; 57&lt;/span&gt; 
&lt;span&gt; 58&lt;/span&gt; &lt;span&gt;Live 模式
&lt;/span&gt;&lt;span&gt; 59&lt;/span&gt; &lt;span&gt;Live on
&lt;/span&gt;&lt;span&gt; 60&lt;/span&gt; &lt;span&gt;切换直播模式，即一对多广播
&lt;/span&gt;&lt;span&gt; 61&lt;/span&gt; Meta on/copy/&lt;span&gt;off
&lt;/span&gt;&lt;span&gt; 62&lt;/span&gt; &lt;span&gt;奇幻发送元数据到客户端 默认on
&lt;/span&gt;&lt;span&gt; 63&lt;/span&gt; Interleave on/&lt;span&gt;off
&lt;/span&gt;&lt;span&gt; 64&lt;/span&gt; &lt;span&gt;切换交叉模式。在该模式下，音视频会在同一个RTMPchunk流中传输。默认为off
&lt;/span&gt;&lt;span&gt; 65&lt;/span&gt; wait_key on|&lt;span&gt;off
&lt;/span&gt;&lt;span&gt; 66&lt;/span&gt; &lt;span&gt;使视频流从一个关键帧开始，默认为off
&lt;/span&gt;&lt;span&gt; 67&lt;/span&gt; wait_video on|&lt;span&gt;off
&lt;/span&gt;&lt;span&gt; 68&lt;/span&gt; &lt;span&gt;在一个视频帧发送前禁用音频。默认off
&lt;/span&gt;&lt;span&gt; 69&lt;/span&gt; 通过wait_key/&lt;span&gt;wait_video进行组合以使客户端可以收到具有所有其他数据的视频关键帧。但这样会增加连接延迟。不过可以通过编解码器中调整关键帧间隔来减少延迟。
&lt;/span&gt;&lt;span&gt; 70&lt;/span&gt; &lt;span&gt;Publish_notify on
&lt;/span&gt;&lt;span&gt; 71&lt;/span&gt; &lt;span&gt;发送NetStream.Publish.Start和NetStream.Publish.Stop给用户，默认off
&lt;/span&gt;&lt;span&gt; 72&lt;/span&gt; &lt;span&gt;Drop_idle_publisher 10s
&lt;/span&gt;&lt;span&gt; 73&lt;/span&gt; &lt;span&gt;终止指定时间内闲置（没有音频、视频）的发布连接，默认为off。注意这个仅仅对于发布模式的连接起作用（发送publish命令之后）
&lt;/span&gt;&lt;span&gt; 74&lt;/span&gt; &lt;span&gt;Sync 10ms
&lt;/span&gt;&lt;span&gt; 75&lt;/span&gt; &lt;span&gt;同步音视频流。如果用户带宽不足以接收发布率，服务器会丢弃一些帧。这将导致同步问题。当时间戳差超过sync指定值，将会发送一个绝对帧来解决这个问题，默认为300ms
&lt;/span&gt;&lt;span&gt; 76&lt;/span&gt; &lt;span&gt;Play_restart off
&lt;/span&gt;&lt;span&gt; 77&lt;/span&gt; 使nginx-&lt;span&gt;rtmp能够在发布启动或者停止时发送NetStream.Play.Start 和 NetStrem.Play.Stop到每个用户。如果关闭的话，那么每个用户就只能在回放的开始结束时收到该通知了。默认为on
&lt;/span&gt;&lt;span&gt; 78&lt;/span&gt; 
&lt;span&gt; 79&lt;/span&gt; &lt;span&gt;Record 模式
&lt;/span&gt;&lt;span&gt; 80&lt;/span&gt; Record off|all|audio|video|keyframes|&lt;span&gt;manual
&lt;/span&gt;&lt;span&gt; 81&lt;/span&gt; &lt;span&gt;切换录制模式，流可以被记录到flv文件
&lt;/span&gt;&lt;span&gt; 82&lt;/span&gt; &lt;span&gt;Off 不录制
&lt;/span&gt;&lt;span&gt; 83&lt;/span&gt; &lt;span&gt;All 录制音频和视频
&lt;/span&gt;&lt;span&gt; 84&lt;/span&gt; &lt;span&gt;Audio
&lt;/span&gt;&lt;span&gt; 85&lt;/span&gt; &lt;span&gt;Video
&lt;/span&gt;&lt;span&gt; 86&lt;/span&gt; &lt;span&gt;Keyframes 只录制关键视频帧
&lt;/span&gt;&lt;span&gt; 87&lt;/span&gt; &lt;span&gt;Manual 不自动启动录制，使用控制接口来进行启动和停止
&lt;/span&gt;&lt;span&gt; 88&lt;/span&gt; Record_path /tmp/&lt;span&gt;rec
&lt;/span&gt;&lt;span&gt; 89&lt;/span&gt; &lt;span&gt;指定录制的flv文件存放目录
&lt;/span&gt;&lt;span&gt; 90&lt;/span&gt; Record_suffix -%d-%b-%y-%&lt;span&gt;T.flv
&lt;/span&gt;&lt;span&gt; 91&lt;/span&gt; &lt;span&gt;录制后缀strftime格式
&lt;/span&gt;&lt;span&gt; 92&lt;/span&gt; Record_unique on|&lt;span&gt;off
&lt;/span&gt;&lt;span&gt; 93&lt;/span&gt; &lt;span&gt;是否添加时间戳到录制文件，防止文件被覆盖，默认off
&lt;/span&gt;&lt;span&gt; 94&lt;/span&gt; record_append on|&lt;span&gt;off
&lt;/span&gt;&lt;span&gt; 95&lt;/span&gt; &lt;span&gt;切换文件附加模式。开启后，录制时将新数据附加到旧文件后面。默认off
&lt;/span&gt;&lt;span&gt; 96&lt;/span&gt; record_lock on|&lt;span&gt;off
&lt;/span&gt;&lt;span&gt; 97&lt;/span&gt; &lt;span&gt;锁定文件，调用系统的fcntl
&lt;/span&gt;&lt;span&gt; 98&lt;/span&gt; &lt;span&gt;record_max_size 128K
&lt;/span&gt;&lt;span&gt; 99&lt;/span&gt; &lt;span&gt;设置录制文件的最大值
&lt;/span&gt;&lt;span&gt;100&lt;/span&gt; Record_max_frames &lt;span&gt;2&lt;/span&gt;
&lt;span&gt;101&lt;/span&gt; &lt;span&gt;设置每个录制文件的视频帧最大数量
&lt;/span&gt;&lt;span&gt;102&lt;/span&gt; Record_interval 1s/&lt;span&gt;15m
&lt;/span&gt;&lt;span&gt;103&lt;/span&gt; &lt;span&gt;在这个指令指定的时间之后重启录制。默认off设置为0表示录制中无延迟。如果record_unique为off时所有的记录都会被写到同一个文件中。否则就会以时间戳区分在不同文件
&lt;/span&gt;&lt;span&gt;104&lt;/span&gt; Record_notify on|&lt;span&gt;off
&lt;/span&gt;&lt;span&gt;105&lt;/span&gt; &lt;span&gt;奇幻当定义录制启动或者停止文件时发送NetStream.Record.Start和NetStream.Record.Stop状态信息onStatus到发布者。
&lt;/span&gt;&lt;span&gt;106&lt;/span&gt; 
&lt;span&gt;107&lt;/span&gt; &lt;span&gt;应用
&lt;/span&gt;&lt;span&gt;108&lt;/span&gt; &lt;span&gt;Application rtmp{
&lt;/span&gt;&lt;span&gt;109&lt;/span&gt; &lt;span&gt;Live on;
&lt;/span&gt;&lt;span&gt;110&lt;/span&gt; &lt;span&gt;Record all;
&lt;/span&gt;&lt;span&gt;111&lt;/span&gt; Record_path /var/&lt;span&gt;rec;
&lt;/span&gt;&lt;span&gt;112&lt;/span&gt; 
&lt;span&gt;113&lt;/span&gt; &lt;span&gt;Recorder audio{
&lt;/span&gt;&lt;span&gt;114&lt;/span&gt; &lt;span&gt;Record audio;
&lt;/span&gt;&lt;span&gt;115&lt;/span&gt; &lt;span&gt;Record_suffix .audio.flv;
&lt;/span&gt;&lt;span&gt;116&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;117&lt;/span&gt; &lt;span&gt;Recorder chunked{
&lt;/span&gt;&lt;span&gt;118&lt;/span&gt; &lt;span&gt;Record all;
&lt;/span&gt;&lt;span&gt;119&lt;/span&gt; &lt;span&gt;Record_interval 15s;
&lt;/span&gt;&lt;span&gt;120&lt;/span&gt; Record_path /var/rec/&lt;span&gt;chunked;
&lt;/span&gt;&lt;span&gt;121&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;122&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;123&lt;/span&gt; &lt;span&gt;创建录制块。可以在单个application中创建多个记录 。
&lt;/span&gt;&lt;span&gt;124&lt;/span&gt; 
&lt;span&gt;125&lt;/span&gt; &lt;span&gt;VOD媒体
&lt;/span&gt;&lt;span&gt;126&lt;/span&gt; Play &lt;span&gt;dir&lt;/span&gt;|http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;loc &lt;/span&gt;
&lt;span&gt;127&lt;/span&gt; 播放指定目录或者HTTP地址的flv或者mp4文件。注意HTTP播放是要在整个文件下载完后才开始播放。同一个play可以播放多个视频地址(用于负载)。MP4格式要在编解码都被RTMP支持才可以播放。一般常见的就是H264/&lt;span&gt;AAC
&lt;/span&gt;&lt;span&gt;128&lt;/span&gt; &lt;span&gt;Application vod{
&lt;/span&gt;&lt;span&gt;129&lt;/span&gt; Play /var/&lt;span&gt;flvs;
&lt;/span&gt;&lt;span&gt;130&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;131&lt;/span&gt; &lt;span&gt;Application vod_http{
&lt;/span&gt;&lt;span&gt;132&lt;/span&gt; Play http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;localhost/vod;&lt;/span&gt;
&lt;span&gt;133&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;134&lt;/span&gt; Play_temp_path /&lt;span&gt;www
&lt;/span&gt;&lt;span&gt;135&lt;/span&gt; &lt;span&gt;设置远程VOD文件完全下载之后复制于play_temp_path之后的路径。空值的话禁用此功能。
&lt;/span&gt;&lt;span&gt;136&lt;/span&gt; Play_local_path &lt;span&gt;dir&lt;/span&gt;
&lt;span&gt;137&lt;/span&gt; 在播放前设置远程存储VOD文件路径，默认/&lt;span&gt;tmp
&lt;/span&gt;&lt;span&gt;138&lt;/span&gt; Play_local_path /tmp/&lt;span&gt;videos;
&lt;/span&gt;&lt;span&gt;139&lt;/span&gt; Paly /tmp/videos http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;localhost/videos&lt;/span&gt;
&lt;span&gt;140&lt;/span&gt; 表示播放视频，先播放本地缓存，如果没有的话，从localhost/videos下载到本地/tmp/&lt;span&gt;videos后，在进行播放
&lt;/span&gt;&lt;span&gt;141&lt;/span&gt; 
&lt;span&gt;142&lt;/span&gt; 
&lt;span&gt;143&lt;/span&gt; &lt;span&gt;Relay模式
&lt;/span&gt;&lt;span&gt;144&lt;/span&gt; Pull url [key=&lt;span&gt;value]
&lt;/span&gt;&lt;span&gt;145&lt;/span&gt; &lt;span&gt;创建pull中继。主要是从远程服务器拉取流媒体。并进行重新发布。
&lt;/span&gt;&lt;span&gt;146&lt;/span&gt; Url语法 [rtmp:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;]host[:port][/app[/playpath]] 如果application找不到那么将会使用本地application名，如果找不到playpath那么久用当前流名称。&lt;/span&gt;
&lt;span&gt;147&lt;/span&gt; 参数如下(使用Key=&lt;span&gt;Value方式)
&lt;/span&gt;&lt;span&gt;148&lt;/span&gt; &lt;span&gt;app 明确application名
&lt;/span&gt;&lt;span&gt;149&lt;/span&gt; &lt;span&gt;Name 捆绑到relay的bending流名称。如果为空，那么会使用application中所有本地流
&lt;/span&gt;&lt;span&gt;150&lt;/span&gt; &lt;span&gt;tcUrl
&lt;/span&gt;&lt;span&gt;151&lt;/span&gt; &lt;span&gt;pageUrl
&lt;/span&gt;&lt;span&gt;152&lt;/span&gt; &lt;span&gt;swfUrl
&lt;/span&gt;&lt;span&gt;153&lt;/span&gt; &lt;span&gt;flashVer
&lt;/span&gt;&lt;span&gt;154&lt;/span&gt; &lt;span&gt;playPath
&lt;/span&gt;&lt;span&gt;155&lt;/span&gt; &lt;span&gt;Live
&lt;/span&gt;&lt;span&gt;156&lt;/span&gt; &lt;span&gt;Start
&lt;/span&gt;&lt;span&gt;157&lt;/span&gt; &lt;span&gt;Stop
&lt;/span&gt;&lt;span&gt;158&lt;/span&gt; &lt;span&gt;Static
&lt;/span&gt;&lt;span&gt;159&lt;/span&gt; Pull rtmp:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;cdn.example.com/main/ch?id=1234 name=channel;&lt;/span&gt;
&lt;span&gt;160&lt;/span&gt; Push url [key=&lt;span&gt;value]
&lt;/span&gt;&lt;span&gt;161&lt;/span&gt; &lt;span&gt;与pull类似，只是push推送发布流到远程服务器。
&lt;/span&gt;&lt;span&gt;162&lt;/span&gt; &lt;span&gt;Push_reconnect 1s
&lt;/span&gt;&lt;span&gt;163&lt;/span&gt; &lt;span&gt;在断开连接后，在push重新连接钱等待的时间，默认3秒
&lt;/span&gt;&lt;span&gt;164&lt;/span&gt; &lt;span&gt;Session_relay on;
&lt;/span&gt;&lt;span&gt;165&lt;/span&gt; &lt;span&gt;切换会话relay模式。在这种情况下关闭时relay销毁。
&lt;/span&gt;&lt;span&gt;166&lt;/span&gt; 
&lt;span&gt;167&lt;/span&gt; &lt;span&gt;Notify 模式
&lt;/span&gt;&lt;span&gt;168&lt;/span&gt; &lt;span&gt;这个功能主要是提供HTTP回调。当发送一些连接操作是，一个HTTP请求异步发送。命令处理会被暂停挂起，知道它返回结果代码。当HTTP返回2xx成功状态码时，RTMP会话继续。3xx状态码会使RTMP重定向到另一个从HTTP返回头获取到的application，否则连接丢失。其他状态码，连接断开。目前用来做简单的鉴权。
&lt;/span&gt;&lt;span&gt;169&lt;/span&gt; &lt;span&gt;On_connect url
&lt;/span&gt;&lt;span&gt;170&lt;/span&gt; &lt;span&gt;设置HTTP连接回调。当客户分发连接命令时。
&lt;/span&gt;&lt;span&gt;171&lt;/span&gt; &lt;span&gt;例子：
&lt;/span&gt;&lt;span&gt;172&lt;/span&gt; On_connect http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;localhost/my_auth;&lt;/span&gt;
&lt;span&gt;173&lt;/span&gt; Location /&lt;span&gt;on_connect{
&lt;/span&gt;&lt;span&gt;174&lt;/span&gt; If($arg_flashver !=&lt;span&gt; “my_secret_flashver”){
&lt;/span&gt;&lt;span&gt;175&lt;/span&gt; Rewrite ^.*$ fallback?&lt;span&gt;permanent;
&lt;/span&gt;&lt;span&gt;176&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;177&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;178&lt;/span&gt; &lt;span&gt;On_play url
&lt;/span&gt;&lt;span&gt;179&lt;/span&gt; &lt;span&gt;设置HTTP播放回调。分发客户分发播放命令时。
&lt;/span&gt;&lt;span&gt;180&lt;/span&gt; &lt;span&gt;http {
&lt;/span&gt;&lt;span&gt;181&lt;/span&gt; Location /&lt;span&gt;redirect {
&lt;/span&gt;&lt;span&gt;182&lt;/span&gt; Rewrite ^.*$ newname?&lt;span&gt;permanent;
&lt;/span&gt;&lt;span&gt;183&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;184&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;185&lt;/span&gt; &lt;span&gt;Rtmp{
&lt;/span&gt;&lt;span&gt;186&lt;/span&gt; &lt;span&gt;Application myqpp{
&lt;/span&gt;&lt;span&gt;187&lt;/span&gt; &lt;span&gt;Live on;
&lt;/span&gt;&lt;span&gt;188&lt;/span&gt; On_play http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;localhost/redirect;&lt;/span&gt;
&lt;span&gt;189&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;190&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;191&lt;/span&gt; &lt;span&gt;On_publish
&lt;/span&gt;&lt;span&gt;192&lt;/span&gt; &lt;span&gt;On_doone
&lt;/span&gt;&lt;span&gt;193&lt;/span&gt; &lt;span&gt;On_play_done
&lt;/span&gt;&lt;span&gt;194&lt;/span&gt; &lt;span&gt;On_publish_done
&lt;/span&gt;&lt;span&gt;195&lt;/span&gt; &lt;span&gt;On_record_done
&lt;/span&gt;&lt;span&gt;196&lt;/span&gt; &lt;span&gt;On_update
&lt;/span&gt;&lt;span&gt;197&lt;/span&gt; &lt;span&gt;Notify_update_timeout
&lt;/span&gt;&lt;span&gt;198&lt;/span&gt; &lt;span&gt;设置on_update回调时间
&lt;/span&gt;&lt;span&gt;199&lt;/span&gt; Notify_update_strict on|&lt;span&gt;off
&lt;/span&gt;&lt;span&gt;200&lt;/span&gt; &lt;span&gt;Notify_relay_redirect on
&lt;/span&gt;&lt;span&gt;201&lt;/span&gt; &lt;span&gt;Notify_method get
&lt;/span&gt;&lt;span&gt;202&lt;/span&gt; 设置HTTP方法通知，默认是application/x-www-form-urlencodeed 的POST内容类型。有时候可能会需要GET方法，在nginx的http{}部分处理调用。在这种情况下可以使用arg_*&lt;span&gt;变量去访问参数。
&lt;/span&gt;&lt;span&gt;203&lt;/span&gt; &lt;span&gt;例如如果是method为get时
&lt;/span&gt;&lt;span&gt;204&lt;/span&gt; Location /&lt;span&gt;on_play{
&lt;/span&gt;&lt;span&gt;205&lt;/span&gt; If($arg_pageUrl ~*&lt;span&gt; localhost){
&lt;/span&gt;&lt;span&gt;206&lt;/span&gt; Return &lt;span&gt;200&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;207&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;208&lt;/span&gt; Return &lt;span&gt;500&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;209&lt;/span&gt; &lt;span&gt;}
&lt;/span&gt;&lt;span&gt;210&lt;/span&gt; 
&lt;span&gt;211&lt;/span&gt; &lt;span&gt;HLS 模式
&lt;/span&gt;&lt;span&gt;212&lt;/span&gt; Hls on|&lt;span&gt;off
&lt;/span&gt;&lt;span&gt;213&lt;/span&gt; &lt;span&gt;使application 切换HLS协议直播
&lt;/span&gt;&lt;span&gt;214&lt;/span&gt; Hls_path /tmp/&lt;span&gt;hls;
&lt;/span&gt;&lt;span&gt;215&lt;/span&gt; &lt;span&gt;设置HLS播放列表和分段目录。这一目录必须在nginx启动前就已经存在。
&lt;/span&gt;&lt;span&gt;216&lt;/span&gt; &lt;span&gt;Hls_fragment 15s;
&lt;/span&gt;&lt;span&gt;217&lt;/span&gt; &lt;span&gt;设置HLS分段长度，默认5秒，这个跟直播延迟有比较大的影响
&lt;/span&gt;&lt;span&gt;218&lt;/span&gt; &lt;span&gt;Hls_playlist_length 20m;
&lt;/span&gt;&lt;span&gt;219&lt;/span&gt; &lt;span&gt;设置HLS播放列表长度，默认30秒。这个跟直播缓存有关。
&lt;/span&gt;&lt;span&gt;220&lt;/span&gt; Hls_sync &lt;span&gt;time&lt;/span&gt;
&lt;span&gt;221&lt;/span&gt; 设置HLS时间戳同步阈值。默认2ms。这个功能防止由低分辨率RTMP(1KHz)转换到高分辨率MPEG-&lt;span&gt;TS(90KHz)之后出现的噪音。
&lt;/span&gt;&lt;span&gt;222&lt;/span&gt; Hls_continuous on|&lt;span&gt;off
&lt;/span&gt;&lt;span&gt;223&lt;/span&gt; &lt;span&gt;切换HLS连续模式，默认off。
&lt;/span&gt;&lt;span&gt;224&lt;/span&gt; Hls_nested on|&lt;span&gt;off
&lt;/span&gt;&lt;span&gt;225&lt;/span&gt; &lt;span&gt;切换HLS嵌套模式。默认off。
&lt;/span&gt;&lt;span&gt;226&lt;/span&gt; Hls_cleanup on|&lt;span&gt;off;
&lt;/span&gt;&lt;span&gt;227&lt;/span&gt; &lt;span&gt;切换HLS清理。默认on
&lt;/span&gt;&lt;span&gt;228&lt;/span&gt; 
&lt;span&gt;229&lt;/span&gt; &lt;span&gt;AccessLog日志
&lt;/span&gt;&lt;span&gt;230&lt;/span&gt; Access_log off|&lt;span&gt;path [format_name]
&lt;/span&gt;&lt;span&gt;231&lt;/span&gt; &lt;span&gt;Log_format new_format ‘$remote_addr’;
&lt;/span&gt;&lt;span&gt;232&lt;/span&gt; Access_log logs/&lt;span&gt;rtmp_access.log new_format;
&lt;/span&gt;&lt;span&gt;233&lt;/span&gt; &lt;span&gt;Log_format 指定日志格式
&lt;/span&gt;&lt;span&gt;234&lt;/span&gt; &lt;span&gt;创建指定的日志格式。日志格式看起来很像 nginx HTTP 日志格式。日志格式里支持的几个变量有：
&lt;/span&gt;&lt;span&gt;235&lt;/span&gt; * connection -&lt;span&gt; 连接数。
&lt;/span&gt;&lt;span&gt;236&lt;/span&gt; * remote_addr -&lt;span&gt; 客户端地址。
&lt;/span&gt;&lt;span&gt;237&lt;/span&gt; * app -&lt;span&gt; application 名。
&lt;/span&gt;&lt;span&gt;238&lt;/span&gt; * name -&lt;span&gt; 上一个流名。
&lt;/span&gt;&lt;span&gt;239&lt;/span&gt; * args - 上一个流播放/&lt;span&gt;发布参数。
&lt;/span&gt;&lt;span&gt;240&lt;/span&gt; * flashver -&lt;span&gt; 客户端 flash 版本。
&lt;/span&gt;&lt;span&gt;241&lt;/span&gt; * swfurl -&lt;span&gt; 客户端 swf url。
&lt;/span&gt;&lt;span&gt;242&lt;/span&gt; * tcurl -&lt;span&gt; 客户端 tcUrl。
&lt;/span&gt;&lt;span&gt;243&lt;/span&gt; * pageurl -&lt;span&gt; 客户端页面 url。
&lt;/span&gt;&lt;span&gt;244&lt;/span&gt; * command - 客户端发送的播放/发布命令：NONE、PLAY、PUBLISH、PLAY+&lt;span&gt;PUBLISH。
&lt;/span&gt;&lt;span&gt;245&lt;/span&gt; * bytes_sent -&lt;span&gt; 发送到客户端的字节数。
&lt;/span&gt;&lt;span&gt;246&lt;/span&gt; * bytes_received -&lt;span&gt; 从客户端接收到的字节数。
&lt;/span&gt;&lt;span&gt;247&lt;/span&gt; * time_local -&lt;span&gt; 客户端连接结束的本地时间。
&lt;/span&gt;&lt;span&gt;248&lt;/span&gt; * session_time -&lt;span&gt; 持续连接的秒数。
&lt;/span&gt;&lt;span&gt;249&lt;/span&gt; * session_readable_time -&lt;span&gt; 在可读格式下的持续时间。
&lt;/span&gt;&lt;span&gt;250&lt;/span&gt; &lt;span&gt;默认的日志格式叫做 combined。这里是这一格式的定义：
&lt;/span&gt;&lt;span&gt;251&lt;/span&gt; $remote_addr [$time_local] $command &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;$app&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;$name&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;$args&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; -&lt;span&gt; 
&lt;/span&gt;&lt;span&gt;252&lt;/span&gt; $bytes_received $bytes_sent &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;$pageurl&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;$flashver&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; ($session_readable_time)
&lt;/span&gt;&lt;span&gt;253&lt;/span&gt; 
&lt;span&gt;254&lt;/span&gt; &lt;span&gt;Limits限制
&lt;/span&gt;&lt;span&gt;255&lt;/span&gt; &lt;span&gt;max_connections number;
&lt;/span&gt;&lt;span&gt;256&lt;/span&gt; &lt;span&gt;设置rtmp引擎最大连接数，默认off
&lt;/span&gt;&lt;span&gt;257&lt;/span&gt; 
&lt;span&gt;258&lt;/span&gt; &lt;span&gt;Application hls{
&lt;/span&gt;&lt;span&gt;259&lt;/span&gt; &lt;span&gt;Live on;
&lt;/span&gt;&lt;span&gt;260&lt;/span&gt; &lt;span&gt;Hls on;
&lt;/span&gt;&lt;span&gt;261&lt;/span&gt; Hls_path /tmp/&lt;span&gt;hls;
&lt;/span&gt;&lt;span&gt;262&lt;/span&gt; &lt;span&gt;Hls_fragment 15s;
&lt;/span&gt;&lt;span&gt;263&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;参考资料&lt;/p&gt;
&lt;p&gt;　　&lt;a href=&quot;https://github.com/arut/nginx-rtmp-module&quot;&gt;https://github.com/arut/nginx-rtmp-module&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;a href=&quot;https://blog.csdn.net/cui918/article/details/53540397&quot; target=&quot;_blank&quot;&gt;https://blog.csdn.net/cui918/article/details/53540397&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;a href=&quot;https://www.cnblogs.com/zx-admin/p/5783523.html&quot; target=&quot;_blank&quot;&gt;https://www.cnblogs.com/zx-admin/p/5783523.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;a href=&quot;https://www.cnblogs.com/lidabo/p/7099501.html&quot; target=&quot;_blank&quot;&gt;https://www.cnblogs.com/lidabo/p/7099501.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;a href=&quot;https://blog.csdn.net/wei389083222/article/details/78721074&quot; target=&quot;_blank&quot;&gt;https://blog.csdn.net/wei389083222/article/details/78721074&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;本文地址： &lt;a href=&quot;https://www.cnblogs.com/wunaozai/p/9427730.html&quot; target=&quot;_blank&quot;&gt;https://www.cnblogs.com/wunaozai/p/9427730.html&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Sun, 05 Aug 2018 15:35:00 +0000</pubDate>
<dc:creator>无脑仔的小明</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/wunaozai/p/9427730.html</dc:identifier>
</item>
<item>
<title>微信小程序之多列表的显示和隐藏功能（附源码） - yanyw</title>
<link>http://www.cnblogs.com/YYW303/p/9427753.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/YYW303/p/9427753.html</guid>
<description>&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/4041074-105a3a3fff873861.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;51Y58PICRDJ.jpg&quot;/&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;今天在项目碰到一个问题，之前在项目首页实现单列表的显示和隐藏，通过wx:if判断就可实现，现在要实现多列表的单项显示和隐藏功能应该如何实现呢？如果还用wx:if实现的话会出现点击一个列表项，多个列表同时显示和隐藏，明显不适合功能需求，然后简单地查了资料也没发现有类似的功能，最后思考一番后，慢慢地理清了思路...&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id=&quot;效果图&quot;&gt;效果图：&lt;/h5&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/4041074-9d66bfd6440d7bb6.gif?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;显示和隐藏.gif&quot;/&gt;&lt;/p&gt;
&lt;h6 id=&quot;实现思路&quot;&gt;实现思路：&lt;/h6&gt;
&lt;blockquote&gt;
&lt;ul&gt;&lt;li&gt;实现单个列表的显示和隐藏应该使用唯一元素让程序知道你应该显示和隐藏哪个列表项，可以用数据的id；&lt;/li&gt;
&lt;li&gt;css中定义一个hidden{display：none}控制显示和隐藏，然后通过三元运算符来判断；&lt;/li&gt;
&lt;li&gt;wxml定义一个点击事件来动态修改这个列表项的变量值。&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;h6 id=&quot;功能实现&quot;&gt;功能实现：&lt;/h6&gt;
&lt;p&gt;好了，思路有了，就开始按照思路来用代码验证。果不其然，使用代码实现之后，发现自己的思路还是没错的。此功能点也可以应用到其它类似的列表的显示和隐藏中。&lt;/p&gt;
&lt;h6 id=&quot;示例代码&quot;&gt;示例代码：&lt;/h6&gt;
&lt;pre&gt;
&lt;code&gt;&amp;lt;!--pages/myOrder/myOrder.wxml--&amp;gt;
&amp;lt;view class='container'&amp;gt;
  &amp;lt;!-- 订单列表 --&amp;gt;
  &amp;lt;block wx:for-items=&quot;{{carInfoData}}&quot;&amp;gt;
    &amp;lt;view class='card  b-shadow' bindtap='toggleBtn' id=&quot;{{item.id}}&quot;&amp;gt;
      &amp;lt;view class='nearCard-fl'&amp;gt;
        &amp;lt;image src='{{item.imgurl}}'&amp;gt;&amp;lt;/image&amp;gt;
      &amp;lt;/view&amp;gt;
      &amp;lt;view class='nearCard-fr'&amp;gt;
        &amp;lt;view&amp;gt;日期：
          &amp;lt;text class='c-green'&amp;gt;{{item.useDate}}&amp;lt;/text&amp;gt;
        &amp;lt;/view&amp;gt;
        &amp;lt;view&amp;gt;车型：
          &amp;lt;text class='c-green'&amp;gt;{{item.cx}}&amp;lt;/text&amp;gt;
        &amp;lt;/view&amp;gt;
        &amp;lt;view&amp;gt;时长：
          &amp;lt;text class='c-green'&amp;gt;{{item.time}}&amp;lt;/text&amp;gt;
        &amp;lt;/view&amp;gt;
        &amp;lt;view&amp;gt;费用：
          &amp;lt;text class='c-green'&amp;gt;{{item.feiyong}}&amp;lt;/text&amp;gt;
        &amp;lt;/view&amp;gt;
      &amp;lt;/view&amp;gt;
      &amp;lt;view class='down clearfix {{uhide==item.id?&quot;&quot;:&quot;hidden&quot;}}'&amp;gt;
        &amp;lt;view class='ml30'&amp;gt;启用时间：2018.01.01 11:33&amp;lt;/view&amp;gt;
        &amp;lt;view class='ml30'&amp;gt;结束时间：2018.01.01 11:33&amp;lt;/view&amp;gt;
        &amp;lt;view class='ml30'&amp;gt;租赁地区：舟山市桃花岛景区海湾浪琴&amp;lt;/view&amp;gt;
        &amp;lt;view class='feedBack'&amp;gt;意见反馈&amp;lt;/view&amp;gt;
      &amp;lt;/view&amp;gt;
    &amp;lt;/view&amp;gt;
  &amp;lt;/block&amp;gt;
&amp;lt;/view&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code&gt;// pages/myOrder/myOrder.js
Page({

  /**
   * 页面的初始数据
   */
  data: {
    uhide: 0
  },

  /**
   * 生命周期函数--监听页面加载
   */
  onLoad: function (options) {
    var that = this;

    var data = {
      &quot;datas&quot;: [
        {
          &quot;id&quot;: 1,
          &quot;imgurl&quot;: &quot;../../images/car.png&quot;,
          &quot;useDate&quot;: &quot;2017-12-22&quot;,
          &quot;cx&quot;: &quot;奇瑞EQ1&quot;,
          &quot;time&quot;: &quot;1小时&quot;,
          &quot;feiyong&quot;: &quot;20元&quot;
        },
        {
          &quot;id&quot;: 2,
          &quot;imgurl&quot;: &quot;../../images/car.png&quot;,
          &quot;useDate&quot;: &quot;2017-12-22&quot;,
          &quot;cx&quot;: &quot;奇瑞EQ1&quot;,
          &quot;time&quot;: &quot;1小时&quot;,
          &quot;feiyong&quot;: &quot;20元&quot;
        },
        {
          &quot;id&quot;: 3,
          &quot;imgurl&quot;: &quot;../../images/car.png&quot;,
          &quot;useDate&quot;: &quot;2017-12-22&quot;,
          &quot;cx&quot;: &quot;奇瑞EQ1&quot;,
          &quot;time&quot;: &quot;1小时&quot;,
          &quot;feiyong&quot;: &quot;20元&quot;
        },
        {
          &quot;id&quot;: 4,
          &quot;imgurl&quot;: &quot;../../images/car.png&quot;,
          &quot;useDate&quot;: &quot;2017-12-22&quot;,
          &quot;cx&quot;: &quot;奇瑞EQ1&quot;,
          &quot;time&quot;: &quot;1小时&quot;,
          &quot;feiyong&quot;: &quot;20元&quot;
        }
      ]
    };
    //console.log(data.datas);
    //设置车辆展示信息
    that.setData({
      carInfoData: data.datas
    })
  },

  //点击切换隐藏和显示
  toggleBtn: function (event) { 
    var that = this;
    var toggleBtnVal = that.data.uhide;
    var itemId = event.currentTarget.id; 
    if (toggleBtnVal == itemId) {
      that.setData({
        uhide: 0
      })
    } else {
      that.setData({
        uhide: itemId
      })
    } 
  }
})&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;GitHub源码地址：&lt;a href=&quot;https://github.com/1501372739/wx-show.git&quot;&gt;小程序显示和隐藏&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Sun, 05 Aug 2018 14:56:00 +0000</pubDate>
<dc:creator>yanyw</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/YYW303/p/9427753.html</dc:identifier>
</item>
</channel>
</rss>