<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>python全栈开发-Day13 内置函数 - 天王盖地虎宝塔镇河妖</title>
<link>http://www.cnblogs.com/ManyQian/p/8708864.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/ManyQian/p/8708864.html</guid>
<description>&lt;h2&gt;一、内置函数&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;注意：内置函数id()可以返回一个对象的身份，返回值为整数。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;这个整数通常对应与该对象在内存中的位置，但这与python的具体实现有关，不应该作为对身份的定义，即不够精准，最精准的还是以内存地址为准。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;is运算符用于比较两个对象的身份，等号比较两个对象的值，内置函数type()则返回一个对象的类型&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;#更多内置函数：https://docs.python.org/3/library/functions.html?highlight=built#ascii&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1274477/201804/1274477-20180403150824724-898235535.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;二、内置函数详情&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;1、abs(x)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;功能：取数的绝对值&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter sh-gutter&quot;&gt;
&lt;div&gt;
&lt;div id=&quot;highlighter_691940&quot; class=&quot;syntaxhighlighter python&quot;&gt;
&lt;table border=&quot;0&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;
&lt;p&gt;1&lt;/p&gt;
&lt;p&gt;2&lt;/p&gt;
&lt;/td&gt;
&lt;td class=&quot;code&quot;&gt;
&lt;div class=&quot;container&quot;&gt;
&lt;p&gt;&lt;code class=&quot;python plain&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/code&gt;&lt;code class=&quot;python functions&quot;&gt;abs&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;(&lt;/code&gt;&lt;code class=&quot;python keyword&quot;&gt;-&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;1&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;)  &lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python value&quot;&gt;1&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;span&gt;2、all(&lt;span class=&quot;sig-paren&quot;&gt;&lt;em&gt;iterable&lt;/em&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;功能：如果这个可迭代的元素都为真，则返回真(非0的就为真，负数也是为真)&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter sh-gutter&quot;&gt;
&lt;div&gt;
&lt;div id=&quot;highlighter_536098&quot; class=&quot;syntaxhighlighter python&quot;&gt;
&lt;table border=&quot;0&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody readability=&quot;3&quot;&gt;&lt;tr readability=&quot;6&quot;&gt;&lt;td class=&quot;gutter&quot;&gt;
&lt;p&gt;1&lt;/p&gt;
&lt;p&gt;2&lt;/p&gt;
&lt;p&gt;3&lt;/p&gt;
&lt;p&gt;4&lt;/p&gt;
&lt;/td&gt;
&lt;td class=&quot;code&quot;&gt;
&lt;div class=&quot;container&quot;&gt;
&lt;p&gt;&lt;code class=&quot;python plain&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/code&gt;&lt;code class=&quot;python functions&quot;&gt;all&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;([&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;0&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;,&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;9&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;,-&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;3&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;])   &lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python color1&quot;&gt;False&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python plain&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/code&gt;&lt;code class=&quot;python functions&quot;&gt;all&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;([-&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;1&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;,&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;5&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;,&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;6&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;])  &lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python color1&quot;&gt;True&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;span&gt;3、any(&lt;span class=&quot;sig-paren&quot;&gt;&lt;em&gt;iterable&lt;/em&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;功能：可迭代的元素中，有一个为真，则返回真，没有真或空列表返回假。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter sh-gutter&quot;&gt;
&lt;div&gt;
&lt;div id=&quot;highlighter_434076&quot; class=&quot;syntaxhighlighter python&quot;&gt;
&lt;table border=&quot;0&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody readability=&quot;2&quot;&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td class=&quot;gutter&quot;&gt;
&lt;p&gt;1&lt;/p&gt;
&lt;p&gt;2&lt;/p&gt;
&lt;p&gt;3&lt;/p&gt;
&lt;p&gt;4&lt;/p&gt;
&lt;/td&gt;
&lt;td class=&quot;code&quot;&gt;
&lt;div class=&quot;container&quot;&gt;
&lt;p&gt;&lt;code class=&quot;python plain&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/code&gt;&lt;code class=&quot;python functions&quot;&gt;any&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;([&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;0&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;,&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;0&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;,&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;2&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;])  &lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python color1&quot;&gt;True&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python plain&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/code&gt;&lt;code class=&quot;python functions&quot;&gt;any&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;([])  &lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python color1&quot;&gt;False&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;span&gt;4、ascii(&lt;span class=&quot;sig-paren&quot;&gt;&lt;em&gt;object&lt;/em&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;功能：把内存对象变成一个可打印的字符串格式&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter sh-gutter&quot;&gt;
&lt;div id=&quot;highlighter_172577&quot; class=&quot;syntaxhighlighter python&quot;&gt;
&lt;table border=&quot;0&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody readability=&quot;3&quot;&gt;&lt;tr readability=&quot;6&quot;&gt;&lt;td class=&quot;gutter&quot;&gt;
&lt;p&gt;&lt;span&gt;1&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;2&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td class=&quot;code&quot;&gt;
&lt;div class=&quot;container&quot;&gt;
&lt;p&gt;&lt;span&gt;&lt;code class=&quot;python plain&quot;&gt;&amp;gt;&amp;gt;&amp;gt; a = ascii([&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;1&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;,&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;2&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;,&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;3&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;,&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;4&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;])&lt;/code&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;code class=&quot;python string&quot;&gt;&amp;gt;&amp;gt;&amp;gt; print(type(a),[a])&lt;/code&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;span&gt;5、bin(x)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;功能：把一个整数转换成二进制&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter sh-gutter&quot;&gt;
&lt;div&gt;
&lt;div id=&quot;highlighter_513444&quot; class=&quot;syntaxhighlighter python&quot;&gt;
&lt;table border=&quot;0&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody readability=&quot;1&quot;&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td class=&quot;gutter&quot;&gt;
&lt;p&gt;1&lt;/p&gt;
&lt;p&gt;2&lt;/p&gt;
&lt;p&gt;3&lt;/p&gt;
&lt;p&gt;4&lt;/p&gt;
&lt;/td&gt;
&lt;td class=&quot;code&quot;&gt;
&lt;div class=&quot;container&quot;&gt;
&lt;p&gt;&lt;code class=&quot;python plain&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/code&gt;&lt;code class=&quot;python functions&quot;&gt;bin&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;(&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;300&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;)  &lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python string&quot;&gt;'0b100101100'&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python plain&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/code&gt;&lt;code class=&quot;python functions&quot;&gt;bin&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;(&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;1&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python string&quot;&gt;'0b1'&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;span&gt;6、bool([x])&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;功能：返回一个布尔值，空列表为假，不为空为真&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter sh-gutter&quot;&gt;
&lt;div&gt;
&lt;div id=&quot;highlighter_689495&quot; class=&quot;syntaxhighlighter python&quot;&gt;
&lt;table border=&quot;0&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody readability=&quot;1.5&quot;&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td class=&quot;gutter&quot;&gt;
&lt;p&gt;1&lt;/p&gt;
&lt;p&gt;2&lt;/p&gt;
&lt;p&gt;3&lt;/p&gt;
&lt;p&gt;4&lt;/p&gt;
&lt;p&gt;5&lt;/p&gt;
&lt;p&gt;6&lt;/p&gt;
&lt;/td&gt;
&lt;td class=&quot;code&quot;&gt;
&lt;div class=&quot;container&quot;&gt;
&lt;p&gt;&lt;code class=&quot;python plain&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/code&gt;&lt;code class=&quot;python functions&quot;&gt;bool&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;([])   &lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python color1&quot;&gt;False&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python plain&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/code&gt;&lt;code class=&quot;python functions&quot;&gt;bool&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;([&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;1&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;,&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;2&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;])   &lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python color1&quot;&gt;True&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python plain&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/code&gt;&lt;code class=&quot;python functions&quot;&gt;bool&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;([&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;0&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;])&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python color1&quot;&gt;True&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;span&gt;7、bytearray&lt;span class=&quot;sig-paren&quot;&gt;&lt;span class=&quot;optional&quot;&gt;[&lt;em&gt;source&lt;/em&gt;&lt;span class=&quot;optional&quot;&gt;[, &lt;em&gt;encoding&lt;/em&gt;&lt;span class=&quot;optional&quot;&gt;[, &lt;em&gt;errors&lt;/em&gt;&lt;span class=&quot;optional&quot;&gt;]&lt;span class=&quot;optional&quot;&gt;]&lt;span class=&quot;optional&quot;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;sig-paren&quot;&gt;功能：字节数组，并且可以修改二进制的字节&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter sh-gutter&quot;&gt;
&lt;div&gt;
&lt;div id=&quot;highlighter_668897&quot; class=&quot;syntaxhighlighter python&quot;&gt;
&lt;table border=&quot;0&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody readability=&quot;2&quot;&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td class=&quot;gutter&quot;&gt;
&lt;p&gt;1&lt;/p&gt;
&lt;p&gt;2&lt;/p&gt;
&lt;p&gt;3&lt;/p&gt;
&lt;p&gt;4&lt;/p&gt;
&lt;p&gt;5&lt;/p&gt;
&lt;p&gt;6&lt;/p&gt;
&lt;/td&gt;
&lt;td class=&quot;code&quot; readability=&quot;4.5&quot;&gt;
&lt;div class=&quot;container&quot; readability=&quot;8&quot;&gt;
&lt;p&gt;&lt;code class=&quot;python plain&quot;&gt;&amp;gt;&amp;gt;&amp;gt; b &lt;/code&gt;&lt;code class=&quot;python keyword&quot;&gt;=&lt;/code&gt; &lt;code class=&quot;python plain&quot;&gt;bytearray(&lt;/code&gt;&lt;code class=&quot;python string&quot;&gt;&quot;abcd&quot;&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;,encoding&lt;/code&gt;&lt;code class=&quot;python keyword&quot;&gt;=&lt;/code&gt;&lt;code class=&quot;python string&quot;&gt;&quot;utf-8&quot;&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;)  &lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python plain&quot;&gt;&amp;gt;&amp;gt;&amp;gt; b[&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;0&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;]  &lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python value&quot;&gt;97&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python plain&quot;&gt;&amp;gt;&amp;gt;&amp;gt; b[&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;0&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;] &lt;/code&gt;&lt;code class=&quot;python keyword&quot;&gt;=&lt;/code&gt; &lt;code class=&quot;python value&quot;&gt;100&lt;/code&gt;  &lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python plain&quot;&gt;&amp;gt;&amp;gt;&amp;gt; b&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python plain&quot;&gt;bytearray(b&lt;/code&gt;&lt;code class=&quot;python string&quot;&gt;'dbcd'&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;)   &lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;span&gt;8、bytes(&lt;span class=&quot;sig-paren&quot;&gt;&lt;span class=&quot;optional&quot;&gt;[&lt;em&gt;source&lt;/em&gt;&lt;span class=&quot;optional&quot;&gt;[, &lt;em&gt;encoding&lt;/em&gt;&lt;span class=&quot;optional&quot;&gt;[, &lt;em&gt;errors&lt;/em&gt;&lt;span class=&quot;optional&quot;&gt;]&lt;span class=&quot;optional&quot;&gt;]&lt;span class=&quot;optional&quot;&gt;])&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;功能：把字符串转换成字节&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter sh-gutter&quot;&gt;
&lt;div&gt;
&lt;div id=&quot;highlighter_637315&quot; class=&quot;syntaxhighlighter python&quot;&gt;
&lt;table border=&quot;0&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody readability=&quot;3.5&quot;&gt;&lt;tr readability=&quot;7&quot;&gt;&lt;td class=&quot;gutter&quot;&gt;
&lt;p&gt;1&lt;/p&gt;
&lt;p&gt;2&lt;/p&gt;
&lt;p&gt;3&lt;/p&gt;
&lt;p&gt;4&lt;/p&gt;
&lt;p&gt;5&lt;/p&gt;
&lt;p&gt;6&lt;/p&gt;
&lt;p&gt;7&lt;/p&gt;
&lt;p&gt;8&lt;/p&gt;
&lt;p&gt;9&lt;/p&gt;
&lt;/td&gt;
&lt;td class=&quot;code&quot; readability=&quot;8.5&quot;&gt;
&lt;div class=&quot;container&quot; readability=&quot;16&quot;&gt;
&lt;p&gt;&lt;code class=&quot;python plain&quot;&gt;&amp;gt;&amp;gt;&amp;gt; b &lt;/code&gt;&lt;code class=&quot;python keyword&quot;&gt;=&lt;/code&gt; &lt;code class=&quot;python plain&quot;&gt;bytes(&lt;/code&gt;&lt;code class=&quot;python string&quot;&gt;&quot;abcd&quot;&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;,encoding&lt;/code&gt;&lt;code class=&quot;python keyword&quot;&gt;=&lt;/code&gt;&lt;code class=&quot;python string&quot;&gt;&quot;utf-8&quot;&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;)  &lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python plain&quot;&gt;&amp;gt;&amp;gt;&amp;gt; b&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python plain&quot;&gt;b&lt;/code&gt;&lt;code class=&quot;python string&quot;&gt;'abcd'&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python plain&quot;&gt;&amp;gt;&amp;gt;&amp;gt; b[&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;0&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;]   &lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python value&quot;&gt;97&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python plain&quot;&gt;&amp;gt;&amp;gt;&amp;gt; b[&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;0&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;]&lt;/code&gt;&lt;code class=&quot;python keyword&quot;&gt;=&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;100&lt;/code&gt;    &lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python plain&quot;&gt;Traceback (most recent call last):&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python spaces&quot;&gt;  &lt;/code&gt;&lt;code class=&quot;python functions&quot;&gt;File&lt;/code&gt; &lt;code class=&quot;python string&quot;&gt;&quot;&amp;lt;input&amp;gt;&quot;&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;, line &lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;1&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;, &lt;/code&gt;&lt;code class=&quot;python keyword&quot;&gt;in&lt;/code&gt; &lt;code class=&quot;python plain&quot;&gt;&amp;lt;module&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python plain&quot;&gt;TypeError: &lt;/code&gt;&lt;code class=&quot;python string&quot;&gt;'bytes'&lt;/code&gt; &lt;code class=&quot;python functions&quot;&gt;object&lt;/code&gt; &lt;code class=&quot;python plain&quot;&gt;does &lt;/code&gt;&lt;code class=&quot;python keyword&quot;&gt;not&lt;/code&gt; &lt;code class=&quot;python plain&quot;&gt;support item assignment&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;span&gt;9、callable(&lt;span class=&quot;sig-paren&quot;&gt;&lt;em&gt;object&lt;/em&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;功能：判断一个对象是否可以被调用，只有在后面有括号的，表示可以调用，比如:函数，类。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter sh-gutter&quot;&gt;
&lt;div&gt;
&lt;div id=&quot;highlighter_935121&quot; class=&quot;syntaxhighlighter python&quot;&gt;
&lt;table border=&quot;0&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody readability=&quot;1&quot;&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td class=&quot;gutter&quot;&gt;
&lt;p&gt;1&lt;/p&gt;
&lt;p&gt;2&lt;/p&gt;
&lt;p&gt;3&lt;/p&gt;
&lt;p&gt;4&lt;/p&gt;
&lt;p&gt;5&lt;/p&gt;
&lt;/td&gt;
&lt;td class=&quot;code&quot; readability=&quot;4&quot;&gt;
&lt;div class=&quot;container&quot; readability=&quot;7&quot;&gt;
&lt;p&gt;&lt;code class=&quot;python plain&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/code&gt;&lt;code class=&quot;python functions&quot;&gt;callable&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;([])  &lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python color1&quot;&gt;False&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python plain&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/code&gt;&lt;code class=&quot;python keyword&quot;&gt;def&lt;/code&gt; &lt;code class=&quot;python plain&quot;&gt;sayhi():&lt;/code&gt;&lt;code class=&quot;python keyword&quot;&gt;pass&lt;/code&gt;  &lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python plain&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/code&gt;&lt;code class=&quot;python functions&quot;&gt;callable&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;(sayhi)  &lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python color1&quot;&gt;True&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;span&gt;10、chr(i)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;功能：通过ascii的值(必须是数字)，找到对应的字符&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter sh-gutter&quot;&gt;
&lt;div&gt;
&lt;div id=&quot;highlighter_272779&quot; class=&quot;syntaxhighlighter python&quot;&gt;
&lt;table border=&quot;0&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;
&lt;p&gt;1&lt;/p&gt;
&lt;p&gt;2&lt;/p&gt;
&lt;/td&gt;
&lt;td class=&quot;code&quot;&gt;
&lt;div class=&quot;container&quot;&gt;
&lt;p&gt;&lt;code class=&quot;python plain&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/code&gt;&lt;code class=&quot;python functions&quot;&gt;chr&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;(&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;97&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python string&quot;&gt;'a'&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;span&gt;11、ord(c)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;功能：根据字符(必须ascii的字符)，找到对应的ascii值&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter sh-gutter&quot;&gt;
&lt;div&gt;
&lt;div id=&quot;highlighter_286832&quot; class=&quot;syntaxhighlighter python&quot;&gt;
&lt;table border=&quot;0&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;
&lt;p&gt;1&lt;/p&gt;
&lt;p&gt;2&lt;/p&gt;
&lt;/td&gt;
&lt;td class=&quot;code&quot;&gt;
&lt;div class=&quot;container&quot;&gt;
&lt;p&gt;&lt;code class=&quot;python plain&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/code&gt;&lt;code class=&quot;python functions&quot;&gt;ord&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;(&lt;/code&gt;&lt;code class=&quot;python string&quot;&gt;'a'&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python value&quot;&gt;97&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;span&gt;12、complex(&lt;span class=&quot;optional&quot;&gt;[&lt;em&gt;real&lt;/em&gt;&lt;span class=&quot;optional&quot;&gt;[, &lt;em&gt;imag&lt;/em&gt;&lt;span class=&quot;optional&quot;&gt;]&lt;span class=&quot;optional&quot;&gt;])&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;功能：返回一个复数，我们几乎用不到。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter sh-gutter&quot;&gt;
&lt;div&gt;
&lt;div id=&quot;highlighter_104442&quot; class=&quot;syntaxhighlighter python&quot;&gt;
&lt;table border=&quot;0&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody readability=&quot;1&quot;&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td class=&quot;gutter&quot;&gt;
&lt;p&gt;1&lt;/p&gt;
&lt;p&gt;2&lt;/p&gt;
&lt;/td&gt;
&lt;td class=&quot;code&quot;&gt;
&lt;div class=&quot;container&quot;&gt;
&lt;p&gt;&lt;code class=&quot;python plain&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/code&gt;&lt;code class=&quot;python functions&quot;&gt;complex&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;(&lt;/code&gt;&lt;code class=&quot;python string&quot;&gt;'1+2j'&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python plain&quot;&gt;(&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;1&lt;/code&gt;&lt;code class=&quot;python keyword&quot;&gt;+&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;2j&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;)&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;span&gt;13、dict(&lt;em&gt;**kwarg&lt;/em&gt;)、dict(&lt;span class=&quot;sig-paren&quot;&gt;&lt;em&gt;mapping&lt;/em&gt;, &lt;em&gt;**kwarg&lt;/em&gt;)、dict(&lt;em&gt;iterable&lt;/em&gt;, &lt;em&gt;**kwarg&lt;/em&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;功能：返回一个字典&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter sh-gutter&quot;&gt;
&lt;div&gt;
&lt;div id=&quot;highlighter_4531&quot; class=&quot;syntaxhighlighter python&quot;&gt;
&lt;table border=&quot;0&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody readability=&quot;7&quot;&gt;&lt;tr readability=&quot;14&quot;&gt;&lt;td class=&quot;gutter&quot;&gt;
&lt;p&gt;1&lt;/p&gt;
&lt;p&gt;2&lt;/p&gt;
&lt;p&gt;3&lt;/p&gt;
&lt;p&gt;4&lt;/p&gt;
&lt;p&gt;5&lt;/p&gt;
&lt;p&gt;6&lt;/p&gt;
&lt;p&gt;7&lt;/p&gt;
&lt;p&gt;8&lt;/p&gt;
&lt;/td&gt;
&lt;td class=&quot;code&quot; readability=&quot;14&quot;&gt;
&lt;div class=&quot;container&quot; readability=&quot;27&quot;&gt;
&lt;p&gt;&lt;code class=&quot;python plain&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/code&gt;&lt;code class=&quot;python functions&quot;&gt;dict&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;()  &lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python plain&quot;&gt;{}&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python plain&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/code&gt;&lt;code class=&quot;python functions&quot;&gt;dict&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;(name&lt;/code&gt;&lt;code class=&quot;python keyword&quot;&gt;=&lt;/code&gt;&lt;code class=&quot;python string&quot;&gt;'qianduoduo'&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;,age&lt;/code&gt;&lt;code class=&quot;python keyword&quot;&gt;=&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;18&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;)   &lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python plain&quot;&gt;{&lt;/code&gt;&lt;code class=&quot;python string&quot;&gt;'name'&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;: &lt;/code&gt;&lt;code class=&quot;python string&quot;&gt;'qianduoduo'&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;, &lt;/code&gt;&lt;code class=&quot;python string&quot;&gt;'age'&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;: &lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;18&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;}&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python plain&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/code&gt;&lt;code class=&quot;python functions&quot;&gt;dict&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;([(&lt;/code&gt;&lt;code class=&quot;python string&quot;&gt;'name'&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;,&lt;/code&gt;&lt;code class=&quot;python string&quot;&gt;'qianduoduo'&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;),(&lt;/code&gt;&lt;code class=&quot;python string&quot;&gt;'age'&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;,&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;18&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;)])   &lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python plain&quot;&gt;{&lt;/code&gt;&lt;code class=&quot;python string&quot;&gt;'name'&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;: &lt;/code&gt;&lt;code class=&quot;python string&quot;&gt;'zhangqigao'&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;, &lt;/code&gt;&lt;code class=&quot;python string&quot;&gt;'age'&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;: &lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;18&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;}&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python plain&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/code&gt;&lt;code class=&quot;python functions&quot;&gt;dict&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;([[&lt;/code&gt;&lt;code class=&quot;python string&quot;&gt;'name'&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;,&lt;/code&gt;&lt;code class=&quot;python string&quot;&gt;'qianduoduo'&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;],[&lt;/code&gt;&lt;code class=&quot;python string&quot;&gt;'age'&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;,&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;18&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;]])    &lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python plain&quot;&gt;{&lt;/code&gt;&lt;code class=&quot;python string&quot;&gt;'name'&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;: &lt;/code&gt;&lt;code class=&quot;python string&quot;&gt;'qianduoduo'&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;, &lt;/code&gt;&lt;code class=&quot;python string&quot;&gt;'age'&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;: &lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;18&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;}&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt; &lt;span&gt;14、dir(&lt;span class=&quot;optional&quot;&gt;[&lt;em&gt;object&lt;/em&gt;&lt;span class=&quot;optional&quot;&gt;])&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;功能：看一个对象有哪些方法&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter sh-gutter&quot;&gt;
&lt;div&gt;
&lt;div id=&quot;highlighter_983829&quot; class=&quot;syntaxhighlighter python&quot;&gt;
&lt;table border=&quot;0&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody readability=&quot;24.5&quot;&gt;&lt;tr readability=&quot;49&quot;&gt;&lt;td class=&quot;gutter&quot;&gt;
&lt;p&gt;1&lt;/p&gt;
&lt;p&gt;2&lt;/p&gt;
&lt;p&gt;3&lt;/p&gt;
&lt;p&gt;4&lt;/p&gt;
&lt;p&gt;5&lt;/p&gt;
&lt;p&gt;6&lt;/p&gt;
&lt;p&gt;7&lt;/p&gt;
&lt;p&gt;8&lt;/p&gt;
&lt;/td&gt;
&lt;td class=&quot;code&quot; readability=&quot;31.5&quot;&gt;
&lt;div class=&quot;container&quot; readability=&quot;62&quot;&gt;
&lt;p&gt;&lt;code class=&quot;python plain&quot;&gt;&amp;gt;&amp;gt;&amp;gt; name &lt;/code&gt;&lt;code class=&quot;python keyword&quot;&gt;=&lt;/code&gt; &lt;code class=&quot;python plain&quot;&gt;[]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python plain&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/code&gt;&lt;code class=&quot;python functions&quot;&gt;dir&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;(name)  &lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python plain&quot;&gt;[&lt;/code&gt;&lt;code class=&quot;python string&quot;&gt;'__add__'&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;, &lt;/code&gt;&lt;code class=&quot;python string&quot;&gt;'__class__'&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;, &lt;/code&gt;&lt;code class=&quot;python string&quot;&gt;'__contains__'&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;, &lt;/code&gt;&lt;code class=&quot;python string&quot;&gt;'__delattr__'&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;, &lt;/code&gt;&lt;code class=&quot;python string&quot;&gt;'__delitem__'&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;, &lt;/code&gt;&lt;code class=&quot;python string&quot;&gt;'__dir__'&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;, &lt;/code&gt;&lt;code class=&quot;python string&quot;&gt;'__doc__'&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;,&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python string&quot;&gt;'__eq__'&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;, &lt;/code&gt;&lt;code class=&quot;python string&quot;&gt;'__format__'&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;, &lt;/code&gt;&lt;code class=&quot;python string&quot;&gt;'__ge__'&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;, &lt;/code&gt;&lt;code class=&quot;python string&quot;&gt;'__getattribute__'&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;, &lt;/code&gt;&lt;code class=&quot;python string&quot;&gt;'__getitem__'&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;, &lt;/code&gt;&lt;code class=&quot;python string&quot;&gt;'__gt__'&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;, &lt;/code&gt;&lt;code class=&quot;python string&quot;&gt;'__hash__'&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;,&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python string&quot;&gt;'__iadd__'&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;, &lt;/code&gt;&lt;code class=&quot;python string&quot;&gt;'__imul__'&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;, &lt;/code&gt;&lt;code class=&quot;python string&quot;&gt;'__init__'&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;, &lt;/code&gt;&lt;code class=&quot;python string&quot;&gt;'__iter__'&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;, &lt;/code&gt;&lt;code class=&quot;python string&quot;&gt;'__le__'&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;, &lt;/code&gt;&lt;code class=&quot;python string&quot;&gt;'__len__'&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;, &lt;/code&gt;&lt;code class=&quot;python string&quot;&gt;'__lt__'&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;, &lt;/code&gt;&lt;code class=&quot;python string&quot;&gt;'__mul__'&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;, &lt;/code&gt;&lt;code class=&quot;python string&quot;&gt;'__ne__'&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;,&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python string&quot;&gt;'__new__'&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;, &lt;/code&gt;&lt;code class=&quot;python string&quot;&gt;'__reduce__'&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;, &lt;/code&gt;&lt;code class=&quot;python string&quot;&gt;'__reduce_ex__'&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;, &lt;/code&gt;&lt;code class=&quot;python string&quot;&gt;'__repr__'&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;, &lt;/code&gt;&lt;code class=&quot;python string&quot;&gt;'__reversed__'&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;, &lt;/code&gt;&lt;code class=&quot;python string&quot;&gt;'__rmul__'&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;,&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python string&quot;&gt;'__setattr__'&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;, &lt;/code&gt;&lt;code class=&quot;python string&quot;&gt;'__setitem__'&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;, &lt;/code&gt;&lt;code class=&quot;python string&quot;&gt;'__sizeof__'&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;, &lt;/code&gt;&lt;code class=&quot;python string&quot;&gt;'__str__'&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;, &lt;/code&gt;&lt;code class=&quot;python string&quot;&gt;'__subclasshook__'&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;, &lt;/code&gt;&lt;code class=&quot;python string&quot;&gt;'append'&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;, &lt;/code&gt;&lt;code class=&quot;python string&quot;&gt;'clear'&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;,&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python string&quot;&gt;'copy'&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;, &lt;/code&gt;&lt;code class=&quot;python string&quot;&gt;'count'&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;, &lt;/code&gt;&lt;code class=&quot;python string&quot;&gt;'extend'&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;, &lt;/code&gt;&lt;code class=&quot;python string&quot;&gt;'index'&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;, &lt;/code&gt;&lt;code class=&quot;python string&quot;&gt;'insert'&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;, &lt;/code&gt;&lt;code class=&quot;python string&quot;&gt;'pop'&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;, &lt;/code&gt;&lt;code class=&quot;python string&quot;&gt;'remove'&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;, &lt;/code&gt;&lt;code class=&quot;python string&quot;&gt;'reverse'&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;, &lt;/code&gt;&lt;code class=&quot;python string&quot;&gt;'sort'&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;]&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;span&gt;15、divmod(a,b)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;功能：地板除，获得一个元组，元组第一个元素是商，第二个元素是余数。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter sh-gutter&quot;&gt;
&lt;div&gt;
&lt;div id=&quot;highlighter_51443&quot; class=&quot;syntaxhighlighter python&quot;&gt;
&lt;table border=&quot;0&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody readability=&quot;2&quot;&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td class=&quot;gutter&quot;&gt;
&lt;p&gt;1&lt;/p&gt;
&lt;p&gt;2&lt;/p&gt;
&lt;/td&gt;
&lt;td class=&quot;code&quot;&gt;
&lt;div class=&quot;container&quot;&gt;
&lt;p&gt;&lt;code class=&quot;python plain&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/code&gt;&lt;code class=&quot;python functions&quot;&gt;divmod&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;(&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;5&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;,&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;2&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python plain&quot;&gt;(&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;2&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;, &lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;1&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;)    &lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;span&gt;16、enumerate(&lt;span class=&quot;sig-paren&quot;&gt;&lt;em&gt;iterable&lt;/em&gt;,&lt;em&gt;start=0&lt;/em&gt;)  购物车的列表用到了，&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;功能：遍历一个可迭代对象，获取索引和对应的元素的&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter sh-gutter&quot;&gt;
&lt;div&gt;
&lt;div id=&quot;highlighter_589458&quot; class=&quot;syntaxhighlighter python&quot;&gt;
&lt;table border=&quot;0&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody readability=&quot;11&quot;&gt;&lt;tr readability=&quot;22&quot;&gt;&lt;td class=&quot;gutter&quot;&gt;
&lt;p&gt;1&lt;/p&gt;
&lt;p&gt;2&lt;/p&gt;
&lt;p&gt;3&lt;/p&gt;
&lt;p&gt;4&lt;/p&gt;
&lt;p&gt;5&lt;/p&gt;
&lt;/td&gt;
&lt;td class=&quot;code&quot; readability=&quot;17&quot;&gt;
&lt;div class=&quot;container&quot; readability=&quot;33&quot;&gt;
&lt;p&gt;&lt;code class=&quot;python plain&quot;&gt;&amp;gt;&amp;gt;&amp;gt; seasons &lt;/code&gt;&lt;code class=&quot;python keyword&quot;&gt;=&lt;/code&gt; &lt;code class=&quot;python plain&quot;&gt;[&lt;/code&gt;&lt;code class=&quot;python string&quot;&gt;'Spring'&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;, &lt;/code&gt;&lt;code class=&quot;python string&quot;&gt;'Summer'&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;, &lt;/code&gt;&lt;code class=&quot;python string&quot;&gt;'Fall'&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;, &lt;/code&gt;&lt;code class=&quot;python string&quot;&gt;'Winter'&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python plain&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/code&gt;&lt;code class=&quot;python functions&quot;&gt;list&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;(&lt;/code&gt;&lt;code class=&quot;python functions&quot;&gt;enumerate&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;(seasons))&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python plain&quot;&gt;[(&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;0&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;, &lt;/code&gt;&lt;code class=&quot;python string&quot;&gt;'Spring'&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;), (&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;1&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;, &lt;/code&gt;&lt;code class=&quot;python string&quot;&gt;'Summer'&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;), (&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;2&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;, &lt;/code&gt;&lt;code class=&quot;python string&quot;&gt;'Fall'&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;), (&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;3&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;, &lt;/code&gt;&lt;code class=&quot;python string&quot;&gt;'Winter'&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;)]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python plain&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/code&gt;&lt;code class=&quot;python functions&quot;&gt;list&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;(&lt;/code&gt;&lt;code class=&quot;python functions&quot;&gt;enumerate&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;(seasons, start&lt;/code&gt;&lt;code class=&quot;python keyword&quot;&gt;=&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;1&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;))&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python plain&quot;&gt;[(&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;1&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;, &lt;/code&gt;&lt;code class=&quot;python string&quot;&gt;'Spring'&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;), (&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;2&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;, &lt;/code&gt;&lt;code class=&quot;python string&quot;&gt;'Summer'&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;), (&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;3&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;, &lt;/code&gt;&lt;code class=&quot;python string&quot;&gt;'Fall'&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;), (&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;4&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;, &lt;/code&gt;&lt;code class=&quot;python string&quot;&gt;'Winter'&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;)]&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;span&gt; 17、eval(&lt;span class=&quot;sig-paren&quot;&gt;&lt;em&gt;expression&lt;/em&gt;, &lt;em&gt;globals=None&lt;/em&gt;, &lt;em&gt;locals=None&lt;/em&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;功能：把字典类型的字符串变成字典，把一个整数类型的字符变成int类型，或者加减乘除这种简单转换成表达式。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter sh-gutter&quot;&gt;
&lt;div&gt;
&lt;div id=&quot;highlighter_202321&quot; class=&quot;syntaxhighlighter python&quot;&gt;
&lt;table border=&quot;0&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody readability=&quot;1&quot;&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td class=&quot;gutter&quot;&gt;
&lt;p&gt;1&lt;/p&gt;
&lt;p&gt;2&lt;/p&gt;
&lt;p&gt;3&lt;/p&gt;
&lt;p&gt;4&lt;/p&gt;
&lt;/td&gt;
&lt;td class=&quot;code&quot; readability=&quot;4&quot;&gt;
&lt;div class=&quot;container&quot; readability=&quot;7&quot;&gt;
&lt;p&gt;&lt;code class=&quot;python plain&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/code&gt;&lt;code class=&quot;python functions&quot;&gt;eval&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;(&lt;/code&gt;&lt;code class=&quot;python string&quot;&gt;'1'&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;)  &lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python value&quot;&gt;1&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python plain&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/code&gt;&lt;code class=&quot;python functions&quot;&gt;eval&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;(&lt;/code&gt;&lt;code class=&quot;python string&quot;&gt;&quot;1+3/2*6&quot;&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;)   &lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python value&quot;&gt;10.0&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;span&gt;18、filter(&lt;span class=&quot;sig-paren&quot;&gt;&lt;em&gt;function&lt;/em&gt;, &lt;em&gt;iterable&lt;/em&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;功能：通过function过滤条件，去获取&lt;span class=&quot;sig-paren&quot;&gt;&lt;em&gt;iterable&lt;/em&gt;中你想要的数据。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter sh-gutter&quot;&gt;
&lt;div&gt;
&lt;div id=&quot;highlighter_952683&quot; class=&quot;syntaxhighlighter python&quot;&gt;
&lt;table border=&quot;0&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody readability=&quot;2&quot;&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td class=&quot;gutter&quot;&gt;
&lt;p&gt;1&lt;/p&gt;
&lt;p&gt;2&lt;/p&gt;
&lt;p&gt;3&lt;/p&gt;
&lt;p&gt;4&lt;/p&gt;
&lt;p&gt;5&lt;/p&gt;
&lt;p&gt;6&lt;/p&gt;
&lt;p&gt;7&lt;/p&gt;
&lt;p&gt;8&lt;/p&gt;
&lt;p&gt;9&lt;/p&gt;
&lt;/td&gt;
&lt;td class=&quot;code&quot; readability=&quot;5.5&quot;&gt;
&lt;div class=&quot;container&quot; readability=&quot;10&quot;&gt;
&lt;p&gt;&lt;code class=&quot;python plain&quot;&gt;&amp;gt;&amp;gt;&amp;gt; res &lt;/code&gt;&lt;code class=&quot;python keyword&quot;&gt;=&lt;/code&gt; &lt;code class=&quot;python functions&quot;&gt;filter&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;(&lt;/code&gt;&lt;code class=&quot;python keyword&quot;&gt;lambda&lt;/code&gt; &lt;code class=&quot;python plain&quot;&gt;n:n&amp;gt;&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;5&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;,&lt;/code&gt;&lt;code class=&quot;python functions&quot;&gt;range&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;(&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;10&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;)) &lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python plain&quot;&gt;&amp;gt;&amp;gt;&amp;gt; res     &lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python plain&quot;&gt;&amp;lt;&lt;/code&gt;&lt;code class=&quot;python functions&quot;&gt;filter&lt;/code&gt; &lt;code class=&quot;python functions&quot;&gt;object&lt;/code&gt; &lt;code class=&quot;python plain&quot;&gt;at &lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;0x0000000003093BE0&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python plain&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/code&gt;&lt;code class=&quot;python keyword&quot;&gt;for&lt;/code&gt; &lt;code class=&quot;python plain&quot;&gt;i &lt;/code&gt;&lt;code class=&quot;python keyword&quot;&gt;in&lt;/code&gt; &lt;code class=&quot;python plain&quot;&gt;res:&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python spaces&quot;&gt;    &lt;/code&gt;&lt;code class=&quot;python functions&quot;&gt;print&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;(i)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python value&quot;&gt;6&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python value&quot;&gt;7&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python value&quot;&gt;8&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python value&quot;&gt;9&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;span&gt;19、map(&lt;span class=&quot;sig-paren&quot;&gt;&lt;em&gt;function&lt;/em&gt;, &lt;em&gt;iterable&lt;/em&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;功能：对传入的每一个值进行处理，处理完了再返回，再把原来的结果覆盖掉。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter sh-gutter&quot;&gt;
&lt;div&gt;
&lt;div id=&quot;highlighter_602594&quot; class=&quot;syntaxhighlighter python&quot;&gt;
&lt;table border=&quot;0&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody readability=&quot;2&quot;&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td class=&quot;gutter&quot;&gt;
&lt;p&gt;1&lt;/p&gt;
&lt;p&gt;2&lt;/p&gt;
&lt;p&gt;3&lt;/p&gt;
&lt;p&gt;4&lt;/p&gt;
&lt;p&gt;5&lt;/p&gt;
&lt;p&gt;6&lt;/p&gt;
&lt;p&gt;7&lt;/p&gt;
&lt;p&gt;8&lt;/p&gt;
&lt;p&gt;9&lt;/p&gt;
&lt;p&gt;10&lt;/p&gt;
&lt;/td&gt;
&lt;td class=&quot;code&quot; readability=&quot;5.5&quot;&gt;
&lt;div class=&quot;container&quot; readability=&quot;10&quot;&gt;
&lt;p&gt;&lt;code class=&quot;python plain&quot;&gt;&amp;gt;&amp;gt;&amp;gt; res &lt;/code&gt;&lt;code class=&quot;python keyword&quot;&gt;=&lt;/code&gt; &lt;code class=&quot;python functions&quot;&gt;map&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;(&lt;/code&gt;&lt;code class=&quot;python keyword&quot;&gt;lambda&lt;/code&gt; &lt;code class=&quot;python plain&quot;&gt;n:n&lt;/code&gt;&lt;code class=&quot;python keyword&quot;&gt;*&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;2&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;,&lt;/code&gt;&lt;code class=&quot;python functions&quot;&gt;range&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;(&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;5&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;))  &lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python plain&quot;&gt;&amp;gt;&amp;gt;&amp;gt; res&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python plain&quot;&gt;&amp;lt;&lt;/code&gt;&lt;code class=&quot;python functions&quot;&gt;map&lt;/code&gt; &lt;code class=&quot;python functions&quot;&gt;object&lt;/code&gt; &lt;code class=&quot;python plain&quot;&gt;at &lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;0x00000000031B4BE0&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python plain&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/code&gt;&lt;code class=&quot;python keyword&quot;&gt;for&lt;/code&gt; &lt;code class=&quot;python plain&quot;&gt;i &lt;/code&gt;&lt;code class=&quot;python keyword&quot;&gt;in&lt;/code&gt; &lt;code class=&quot;python plain&quot;&gt;res:&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python spaces&quot;&gt;    &lt;/code&gt;&lt;code class=&quot;python functions&quot;&gt;print&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;(i)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python value&quot;&gt;0&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python value&quot;&gt;2&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python value&quot;&gt;4&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python value&quot;&gt;6&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python value&quot;&gt;8&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;span&gt;20、reduce(&lt;span class=&quot;sig-paren&quot;&gt;&lt;em&gt;function&lt;/em&gt;,&lt;span class=&quot;sig-paren&quot;&gt;&lt;em&gt;iterable&lt;/em&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;功能：把一组可迭代序列通过&lt;span class=&quot;sig-paren&quot;&gt;&lt;em&gt;function&lt;/em&gt;函数操作，元素之间相加或者相乘操作。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter sh-gutter&quot;&gt;
&lt;div&gt;
&lt;div id=&quot;highlighter_496748&quot; class=&quot;syntaxhighlighter python&quot;&gt;
&lt;table border=&quot;0&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody readability=&quot;4&quot;&gt;&lt;tr readability=&quot;8&quot;&gt;&lt;td class=&quot;gutter&quot;&gt;
&lt;p&gt;1&lt;/p&gt;
&lt;p&gt;2&lt;/p&gt;
&lt;p&gt;3&lt;/p&gt;
&lt;p&gt;4&lt;/p&gt;
&lt;p&gt;5&lt;/p&gt;
&lt;p&gt;6&lt;/p&gt;
&lt;p&gt;7&lt;/p&gt;
&lt;/td&gt;
&lt;td class=&quot;code&quot; readability=&quot;8.5&quot;&gt;
&lt;div class=&quot;container&quot; readability=&quot;16&quot;&gt;
&lt;p&gt;&lt;code class=&quot;python plain&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/code&gt;&lt;code class=&quot;python keyword&quot;&gt;from&lt;/code&gt; &lt;code class=&quot;python plain&quot;&gt;functools &lt;/code&gt;&lt;code class=&quot;python keyword&quot;&gt;import&lt;/code&gt; &lt;code class=&quot;python functions&quot;&gt;reduce&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python plain&quot;&gt;&amp;gt;&amp;gt;&amp;gt; res &lt;/code&gt;&lt;code class=&quot;python keyword&quot;&gt;=&lt;/code&gt; &lt;code class=&quot;python functions&quot;&gt;reduce&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;(&lt;/code&gt;&lt;code class=&quot;python keyword&quot;&gt;lambda&lt;/code&gt; &lt;code class=&quot;python plain&quot;&gt;x,y:x&lt;/code&gt;&lt;code class=&quot;python keyword&quot;&gt;+&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;y,&lt;/code&gt;&lt;code class=&quot;python functions&quot;&gt;range&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;(&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;10&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;))  &lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python plain&quot;&gt;&amp;gt;&amp;gt;&amp;gt; res&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python value&quot;&gt;45&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python plain&quot;&gt;&amp;gt;&amp;gt;&amp;gt; res &lt;/code&gt;&lt;code class=&quot;python keyword&quot;&gt;=&lt;/code&gt; &lt;code class=&quot;python functions&quot;&gt;reduce&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;(&lt;/code&gt;&lt;code class=&quot;python keyword&quot;&gt;lambda&lt;/code&gt; &lt;code class=&quot;python plain&quot;&gt;x,y:x&lt;/code&gt;&lt;code class=&quot;python keyword&quot;&gt;*&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;y,&lt;/code&gt;&lt;code class=&quot;python functions&quot;&gt;range&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;(&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;1&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;,&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;10&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;)) &lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python plain&quot;&gt;&amp;gt;&amp;gt;&amp;gt; res&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python value&quot;&gt;362880&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;span&gt;21、float([x])&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;功能：把一个浮点类型的字符串转换为浮点类型的数据。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter sh-gutter&quot;&gt;
&lt;div&gt;
&lt;div id=&quot;highlighter_453471&quot; class=&quot;syntaxhighlighter python&quot;&gt;
&lt;table border=&quot;0&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody readability=&quot;1.5&quot;&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td class=&quot;gutter&quot;&gt;
&lt;p&gt;1&lt;/p&gt;
&lt;p&gt;2&lt;/p&gt;
&lt;p&gt;3&lt;/p&gt;
&lt;p&gt;4&lt;/p&gt;
&lt;p&gt;5&lt;/p&gt;
&lt;p&gt;6&lt;/p&gt;
&lt;p&gt;7&lt;/p&gt;
&lt;p&gt;8&lt;/p&gt;
&lt;p&gt;9&lt;/p&gt;
&lt;p&gt;10&lt;/p&gt;
&lt;/td&gt;
&lt;td class=&quot;code&quot; readability=&quot;4&quot;&gt;
&lt;div class=&quot;container&quot; readability=&quot;7&quot;&gt;
&lt;p&gt;&lt;code class=&quot;python plain&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/code&gt;&lt;code class=&quot;python functions&quot;&gt;float&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;(&lt;/code&gt;&lt;code class=&quot;python string&quot;&gt;'+1.23'&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python value&quot;&gt;1.23&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python plain&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/code&gt;&lt;code class=&quot;python functions&quot;&gt;float&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;(&lt;/code&gt;&lt;code class=&quot;python string&quot;&gt;'   -12345\n'&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python keyword&quot;&gt;-&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;12345.0&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python plain&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/code&gt;&lt;code class=&quot;python functions&quot;&gt;float&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;(&lt;/code&gt;&lt;code class=&quot;python string&quot;&gt;'1e-003'&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python value&quot;&gt;0.001&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python plain&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/code&gt;&lt;code class=&quot;python functions&quot;&gt;float&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;(&lt;/code&gt;&lt;code class=&quot;python string&quot;&gt;'+1E6'&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python value&quot;&gt;1000000.0&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python plain&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/code&gt;&lt;code class=&quot;python functions&quot;&gt;float&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;(&lt;/code&gt;&lt;code class=&quot;python string&quot;&gt;'-Infinity'&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python keyword&quot;&gt;-&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;inf&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;span&gt;22、format(&lt;em&gt;value&lt;/em&gt;&lt;span class=&quot;optional&quot;&gt;[, &lt;em&gt;format_spec&lt;/em&gt;&lt;span class=&quot;optional&quot;&gt;])&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;功能：格式话字符串，前面字符串拼接讲过&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;23、frozenset(&lt;span class=&quot;sig-paren&quot;&gt;&lt;span class=&quot;optional&quot;&gt;[&lt;em&gt;iterable&lt;/em&gt;&lt;span class=&quot;optional&quot;&gt;])&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;功能：把集合变成一个不可变的集合&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter sh-gutter&quot;&gt;
&lt;div&gt;
&lt;div id=&quot;highlighter_794666&quot; class=&quot;syntaxhighlighter python&quot;&gt;
&lt;table border=&quot;0&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody readability=&quot;26&quot;&gt;&lt;tr readability=&quot;52&quot;&gt;&lt;td class=&quot;gutter&quot;&gt;
&lt;p&gt;1&lt;/p&gt;
&lt;p&gt;2&lt;/p&gt;
&lt;p&gt;3&lt;/p&gt;
&lt;p&gt;4&lt;/p&gt;
&lt;p&gt;5&lt;/p&gt;
&lt;p&gt;6&lt;/p&gt;
&lt;p&gt;7&lt;/p&gt;
&lt;p&gt;8&lt;/p&gt;
&lt;p&gt;9&lt;/p&gt;
&lt;p&gt;10&lt;/p&gt;
&lt;/td&gt;
&lt;td class=&quot;code&quot; readability=&quot;36.5&quot;&gt;
&lt;div class=&quot;container&quot; readability=&quot;72&quot;&gt;
&lt;p&gt;&lt;code class=&quot;python plain&quot;&gt;&amp;gt;&amp;gt;&amp;gt; res &lt;/code&gt;&lt;code class=&quot;python keyword&quot;&gt;=&lt;/code&gt; &lt;code class=&quot;python functions&quot;&gt;frozenset&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;([&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;1&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;,&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;2&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;,&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;3&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;,&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;4&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;,&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;3&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;])&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python plain&quot;&gt;&amp;gt;&amp;gt;&amp;gt; res&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python functions&quot;&gt;frozenset&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;({&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;1&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;, &lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;2&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;, &lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;3&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;, &lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;4&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;})   &lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python plain&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/code&gt;&lt;code class=&quot;python functions&quot;&gt;dir&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;(res)   &lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python plain&quot;&gt;[&lt;/code&gt;&lt;code class=&quot;python string&quot;&gt;'__and__'&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;, &lt;/code&gt;&lt;code class=&quot;python string&quot;&gt;'__class__'&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;, &lt;/code&gt;&lt;code class=&quot;python string&quot;&gt;'__contains__'&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;, &lt;/code&gt;&lt;code class=&quot;python string&quot;&gt;'__delattr__'&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;, &lt;/code&gt;&lt;code class=&quot;python string&quot;&gt;'__dir__'&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;, &lt;/code&gt;&lt;code class=&quot;python string&quot;&gt;'__doc__'&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;, &lt;/code&gt;&lt;code class=&quot;python string&quot;&gt;'__eq__'&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;,&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python string&quot;&gt;'__format__'&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;, &lt;/code&gt;&lt;code class=&quot;python string&quot;&gt;'__ge__'&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;, &lt;/code&gt;&lt;code class=&quot;python string&quot;&gt;'__getattribute__'&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;, &lt;/code&gt;&lt;code class=&quot;python string&quot;&gt;'__gt__'&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;, &lt;/code&gt;&lt;code class=&quot;python string&quot;&gt;'__hash__'&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;, &lt;/code&gt;&lt;code class=&quot;python string&quot;&gt;'__init__'&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;, &lt;/code&gt;&lt;code class=&quot;python string&quot;&gt;'__iter__'&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;, &lt;/code&gt;&lt;code class=&quot;python string&quot;&gt;'__le__'&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;,&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python spaces&quot;&gt; &lt;/code&gt;&lt;code class=&quot;python string&quot;&gt;'__len__'&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;, &lt;/code&gt;&lt;code class=&quot;python string&quot;&gt;'__lt__'&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;, &lt;/code&gt;&lt;code class=&quot;python string&quot;&gt;'__ne__'&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;, &lt;/code&gt;&lt;code class=&quot;python string&quot;&gt;'__new__'&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;, &lt;/code&gt;&lt;code class=&quot;python string&quot;&gt;'__or__'&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;, &lt;/code&gt;&lt;code class=&quot;python string&quot;&gt;'__rand__'&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;, &lt;/code&gt;&lt;code class=&quot;python string&quot;&gt;'__reduce__'&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;, &lt;/code&gt;&lt;code class=&quot;python string&quot;&gt;'__reduce_ex__'&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;,&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python string&quot;&gt;'__repr__'&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;, &lt;/code&gt;&lt;code class=&quot;python string&quot;&gt;'__ror__'&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;, &lt;/code&gt;&lt;code class=&quot;python string&quot;&gt;'__rsub__'&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;, &lt;/code&gt;&lt;code class=&quot;python string&quot;&gt;'__rxor__'&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;, &lt;/code&gt;&lt;code class=&quot;python string&quot;&gt;'__setattr__'&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;, &lt;/code&gt;&lt;code class=&quot;python string&quot;&gt;'__sizeof__'&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;, &lt;/code&gt;&lt;code class=&quot;python string&quot;&gt;'__str__'&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;, &lt;/code&gt;&lt;code class=&quot;python string&quot;&gt;'__sub__'&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;,&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python string&quot;&gt;'__subclasshook__'&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;, &lt;/code&gt;&lt;code class=&quot;python string&quot;&gt;'__xor__'&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;, &lt;/code&gt;&lt;code class=&quot;python string&quot;&gt;'copy'&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;, &lt;/code&gt;&lt;code class=&quot;python string&quot;&gt;'difference'&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;, &lt;/code&gt;&lt;code class=&quot;python string&quot;&gt;'intersection'&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;, &lt;/code&gt;&lt;code class=&quot;python string&quot;&gt;'isdisjoint'&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;, &lt;/code&gt;&lt;code class=&quot;python string&quot;&gt;'issubset'&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;,&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python string&quot;&gt;'issuperset'&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;, &lt;/code&gt;&lt;code class=&quot;python string&quot;&gt;'symmetric_difference'&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;, &lt;/code&gt;&lt;code class=&quot;python string&quot;&gt;'union'&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;]&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;span&gt; &lt;strong&gt;注：set()是可变的&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;24、globals()&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;功能：返回当前这个python文件中的所有变量的key-value，变量是key，值是value&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter sh-gutter&quot;&gt;
&lt;div&gt;
&lt;div id=&quot;highlighter_243651&quot; class=&quot;syntaxhighlighter python&quot;&gt;
&lt;table border=&quot;0&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody readability=&quot;6&quot;&gt;&lt;tr readability=&quot;12&quot;&gt;&lt;td class=&quot;gutter&quot;&gt;
&lt;p&gt;1&lt;/p&gt;
&lt;p&gt;2&lt;/p&gt;
&lt;p&gt;3&lt;/p&gt;
&lt;p&gt;4&lt;/p&gt;
&lt;p&gt;5&lt;/p&gt;
&lt;p&gt;6&lt;/p&gt;
&lt;p&gt;7&lt;/p&gt;
&lt;/td&gt;
&lt;td class=&quot;code&quot; readability=&quot;10.5&quot;&gt;
&lt;div class=&quot;container&quot; readability=&quot;20&quot;&gt;
&lt;p&gt;&lt;code class=&quot;python functions&quot;&gt;print&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;(&lt;/code&gt;&lt;code class=&quot;python functions&quot;&gt;globals&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;())&lt;/code&gt;&lt;/p&gt;


&lt;p&gt;&lt;code class=&quot;python plain&quot;&gt;{&lt;/code&gt;&lt;code class=&quot;python string&quot;&gt;'__spec__'&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;: &lt;/code&gt;&lt;code class=&quot;python color1&quot;&gt;None&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;, &lt;/code&gt;&lt;code class=&quot;python string&quot;&gt;'__name__'&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;: &lt;/code&gt;&lt;code class=&quot;python string&quot;&gt;'__main__'&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;, &lt;/code&gt;&lt;code class=&quot;python string&quot;&gt;'__file__'&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;: 'D:&lt;/code&gt;&lt;code class=&quot;python keyword&quot;&gt;/&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;PycharmProjects&lt;/code&gt;&lt;code class=&quot;python keyword&quot;&gt;/&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;pyhomework&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python keyword&quot;&gt;/&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;day4&lt;/code&gt;&lt;code class=&quot;python keyword&quot;&gt;/&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;内置函数&lt;/code&gt;&lt;code class=&quot;python keyword&quot;&gt;/&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;内置函数.py&lt;/code&gt;&lt;code class=&quot;python string&quot;&gt;', '&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;__doc__&lt;/code&gt;&lt;code class=&quot;python string&quot;&gt;': None, '&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;__package__&lt;/code&gt;&lt;code class=&quot;python string&quot;&gt;': None, '&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;__loader__':&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python plain&quot;&gt;&amp;lt;_frozen_importlib_external.SourceFileLoader &lt;/code&gt;&lt;code class=&quot;python functions&quot;&gt;object&lt;/code&gt; &lt;code class=&quot;python plain&quot;&gt;at &lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;0x0000000000695B00&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;&amp;gt;,&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python string&quot;&gt;'__cached__'&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;: &lt;/code&gt;&lt;code class=&quot;python color1&quot;&gt;None&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;, &lt;/code&gt;&lt;code class=&quot;python string&quot;&gt;'__builtins__'&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;: &amp;lt;module 'built&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;span&gt;注：可以判断一个文件中的变量是否存在，而globals()只能打印全局变量&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;25、help(&lt;span class=&quot;optional&quot;&gt;[&lt;em&gt;object&lt;/em&gt;&lt;span class=&quot;optional&quot;&gt;])&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;功能：显示对象的帮助信息&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter sh-gutter&quot;&gt;
&lt;div&gt;
&lt;div id=&quot;highlighter_729971&quot; class=&quot;syntaxhighlighter python&quot;&gt;
&lt;table border=&quot;0&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody readability=&quot;2&quot;&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td class=&quot;gutter&quot;&gt;
&lt;p&gt;1&lt;/p&gt;
&lt;p&gt;2&lt;/p&gt;
&lt;p&gt;3&lt;/p&gt;
&lt;p&gt;4&lt;/p&gt;
&lt;p&gt;5&lt;/p&gt;
&lt;p&gt;6&lt;/p&gt;
&lt;p&gt;7&lt;/p&gt;
&lt;p&gt;8&lt;/p&gt;
&lt;p&gt;9&lt;/p&gt;
&lt;p&gt;10&lt;/p&gt;
&lt;p&gt;11&lt;/p&gt;
&lt;/td&gt;
&lt;td class=&quot;code&quot; readability=&quot;6&quot;&gt;
&lt;div class=&quot;container&quot; readability=&quot;11&quot;&gt;
&lt;p&gt;&lt;code class=&quot;python plain&quot;&gt;&amp;gt;&amp;gt;&amp;gt; res &lt;/code&gt;&lt;code class=&quot;python keyword&quot;&gt;=&lt;/code&gt; &lt;code class=&quot;python plain&quot;&gt;[]  &lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python plain&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/code&gt;&lt;code class=&quot;python functions&quot;&gt;help&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;(res)   &lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python functions&quot;&gt;Help&lt;/code&gt; &lt;code class=&quot;python plain&quot;&gt;on &lt;/code&gt;&lt;code class=&quot;python functions&quot;&gt;list&lt;/code&gt; &lt;code class=&quot;python functions&quot;&gt;object&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;:&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;python keyword&quot;&gt;class&lt;/code&gt; &lt;code class=&quot;python functions&quot;&gt;list&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;(&lt;/code&gt;&lt;code class=&quot;python functions&quot;&gt;object&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python spaces&quot;&gt; &lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;|  &lt;/code&gt;&lt;code class=&quot;python functions&quot;&gt;list&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;() &lt;/code&gt;&lt;code class=&quot;python keyword&quot;&gt;-&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;&amp;gt; new empty &lt;/code&gt;&lt;code class=&quot;python functions&quot;&gt;list&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python spaces&quot;&gt; &lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;|  &lt;/code&gt;&lt;code class=&quot;python functions&quot;&gt;list&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;(iterable) &lt;/code&gt;&lt;code class=&quot;python keyword&quot;&gt;-&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;&amp;gt; new &lt;/code&gt;&lt;code class=&quot;python functions&quot;&gt;list&lt;/code&gt; &lt;code class=&quot;python plain&quot;&gt;initialized &lt;/code&gt;&lt;code class=&quot;python keyword&quot;&gt;from&lt;/code&gt; &lt;code class=&quot;python plain&quot;&gt;iterable's items&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python spaces&quot;&gt; &lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;| &lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python spaces&quot;&gt; &lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;|  Methods defined here:&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python spaces&quot;&gt; &lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;| &lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python spaces&quot;&gt; &lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;.....&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;span&gt;26、hex(x)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;功能：把一个数字转成16进制&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter sh-gutter&quot;&gt;
&lt;div&gt;
&lt;div id=&quot;highlighter_229425&quot; class=&quot;syntaxhighlighter python&quot;&gt;
&lt;table border=&quot;0&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody readability=&quot;1&quot;&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td class=&quot;gutter&quot;&gt;
&lt;p&gt;1&lt;/p&gt;
&lt;p&gt;2&lt;/p&gt;
&lt;p&gt;3&lt;/p&gt;
&lt;p&gt;4&lt;/p&gt;
&lt;/td&gt;
&lt;td class=&quot;code&quot;&gt;
&lt;div class=&quot;container&quot;&gt;
&lt;p&gt;&lt;code class=&quot;python plain&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/code&gt;&lt;code class=&quot;python functions&quot;&gt;hex&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;(&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;255&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python string&quot;&gt;'0xff'&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python plain&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/code&gt;&lt;code class=&quot;python functions&quot;&gt;hex&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;(&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;10&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python string&quot;&gt;'0xa'&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;span&gt;27、id(&lt;span class=&quot;sig-paren&quot;&gt;&lt;em&gt;object&lt;/em&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;功能：返回对象的内存地址&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter sh-gutter&quot;&gt;
&lt;div&gt;
&lt;div id=&quot;highlighter_210656&quot; class=&quot;syntaxhighlighter python&quot;&gt;
&lt;table border=&quot;0&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody readability=&quot;1&quot;&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td class=&quot;gutter&quot;&gt;
&lt;p&gt;1&lt;/p&gt;
&lt;p&gt;2&lt;/p&gt;
&lt;/td&gt;
&lt;td class=&quot;code&quot;&gt;
&lt;div class=&quot;container&quot;&gt;
&lt;p&gt;&lt;code class=&quot;python plain&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/code&gt;&lt;code class=&quot;python functions&quot;&gt;id&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;(&lt;/code&gt;&lt;code class=&quot;python string&quot;&gt;'zhangqigao'&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python value&quot;&gt;50993136&lt;/code&gt;   &lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;span&gt;28、input(&lt;span class=&quot;sig-paren&quot;&gt;&lt;span class=&quot;optional&quot;&gt;[&lt;em&gt;prompt&lt;/em&gt;&lt;span class=&quot;optional&quot;&gt;])&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;功能：输入字符串&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter sh-gutter&quot;&gt;
&lt;div&gt;
&lt;div id=&quot;highlighter_233622&quot; class=&quot;syntaxhighlighter python&quot;&gt;
&lt;table border=&quot;0&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody readability=&quot;1.5&quot;&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td class=&quot;gutter&quot;&gt;
&lt;p&gt;1&lt;/p&gt;
&lt;p&gt;2&lt;/p&gt;
&lt;p&gt;3&lt;/p&gt;
&lt;p&gt;4&lt;/p&gt;
&lt;/td&gt;
&lt;td class=&quot;code&quot; readability=&quot;6&quot;&gt;
&lt;div class=&quot;container&quot; readability=&quot;11&quot;&gt;
&lt;p&gt;&lt;code class=&quot;python plain&quot;&gt;&amp;gt;&amp;gt;&amp;gt; s &lt;/code&gt;&lt;code class=&quot;python keyword&quot;&gt;=&lt;/code&gt; &lt;code class=&quot;python functions&quot;&gt;input&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;(&lt;/code&gt;&lt;code class=&quot;python string&quot;&gt;'--&amp;gt; '&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;) &lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python keyword&quot;&gt;-&lt;/code&gt;&lt;code class=&quot;python keyword&quot;&gt;-&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;&amp;gt; Monty Python's Flying Circus  &lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python plain&quot;&gt;&amp;gt;&amp;gt;&amp;gt; s &lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python string&quot;&gt;&quot;Monty Python's Flying Circus&quot;&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;span&gt;29、int(x)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;功能：把其他数据类型强制转换成int类型&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter sh-gutter&quot;&gt;
&lt;div&gt;
&lt;div id=&quot;highlighter_811683&quot; class=&quot;syntaxhighlighter python&quot;&gt;
&lt;table border=&quot;0&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;
&lt;p&gt;1&lt;/p&gt;
&lt;p&gt;2&lt;/p&gt;
&lt;/td&gt;
&lt;td class=&quot;code&quot;&gt;
&lt;div class=&quot;container&quot;&gt;
&lt;p&gt;&lt;code class=&quot;python plain&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/code&gt;&lt;code class=&quot;python functions&quot;&gt;int&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;(&lt;/code&gt;&lt;code class=&quot;python string&quot;&gt;'10'&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python value&quot;&gt;10&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;span&gt;30、iter(&lt;em&gt;object&lt;/em&gt;&lt;span class=&quot;optional&quot;&gt;[, &lt;em&gt;sentinel&lt;/em&gt;&lt;span class=&quot;optional&quot;&gt;])&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;功能：把一个普通序列转成迭代器&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter sh-gutter&quot;&gt;
&lt;div&gt;
&lt;div id=&quot;highlighter_147052&quot; class=&quot;syntaxhighlighter python&quot;&gt;
&lt;table border=&quot;0&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody readability=&quot;2&quot;&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td class=&quot;gutter&quot;&gt;
&lt;p&gt;1&lt;/p&gt;
&lt;p&gt;2&lt;/p&gt;
&lt;p&gt;3&lt;/p&gt;
&lt;/td&gt;
&lt;td class=&quot;code&quot; readability=&quot;6.5&quot;&gt;
&lt;div class=&quot;container&quot; readability=&quot;12&quot;&gt;
&lt;p&gt;&lt;code class=&quot;python plain&quot;&gt;with &lt;/code&gt;&lt;code class=&quot;python functions&quot;&gt;open&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;(&lt;/code&gt;&lt;code class=&quot;python string&quot;&gt;'mydata.txt'&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;) as fp:&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python spaces&quot;&gt;    &lt;/code&gt;&lt;code class=&quot;python keyword&quot;&gt;for&lt;/code&gt; &lt;code class=&quot;python plain&quot;&gt;line &lt;/code&gt;&lt;code class=&quot;python keyword&quot;&gt;in&lt;/code&gt; &lt;code class=&quot;python functions&quot;&gt;iter&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;(fp.readline, ''):&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python spaces&quot;&gt;        &lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;process_line(line)&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;span&gt;31、len(s)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;功能：计算序列或者字符串的长度&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter sh-gutter&quot;&gt;
&lt;div&gt;
&lt;div id=&quot;highlighter_188268&quot; class=&quot;syntaxhighlighter python&quot;&gt;
&lt;table border=&quot;0&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody readability=&quot;3&quot;&gt;&lt;tr readability=&quot;6&quot;&gt;&lt;td class=&quot;gutter&quot;&gt;
&lt;p&gt;1&lt;/p&gt;
&lt;p&gt;2&lt;/p&gt;
&lt;p&gt;3&lt;/p&gt;
&lt;p&gt;4&lt;/p&gt;
&lt;/td&gt;
&lt;td class=&quot;code&quot; readability=&quot;7&quot;&gt;
&lt;div class=&quot;container&quot; readability=&quot;13&quot;&gt;
&lt;p&gt;&lt;code class=&quot;python plain&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/code&gt;&lt;code class=&quot;python functions&quot;&gt;len&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;(&lt;/code&gt;&lt;code class=&quot;python string&quot;&gt;&quot;zhangqigao&quot;&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;)  &lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python value&quot;&gt;10&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python plain&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/code&gt;&lt;code class=&quot;python functions&quot;&gt;len&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;([&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;1&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;,&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;2&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;,&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;3&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;,&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;4&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;,&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;5&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;])  &lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python value&quot;&gt;5&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;span&gt;32、list(&lt;span class=&quot;sig-paren&quot;&gt;&lt;span class=&quot;optional&quot;&gt;[&lt;em&gt;iterable&lt;/em&gt;&lt;span class=&quot;optional&quot;&gt;])&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;功能:把其他序列转换成一个列表&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter sh-gutter&quot;&gt;
&lt;div&gt;
&lt;div id=&quot;highlighter_832523&quot; class=&quot;syntaxhighlighter python&quot;&gt;
&lt;table border=&quot;0&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody readability=&quot;5&quot;&gt;&lt;tr readability=&quot;10&quot;&gt;&lt;td class=&quot;gutter&quot;&gt;
&lt;p&gt;1&lt;/p&gt;
&lt;p&gt;2&lt;/p&gt;
&lt;/td&gt;
&lt;td class=&quot;code&quot; readability=&quot;6&quot;&gt;
&lt;div class=&quot;container&quot; readability=&quot;11&quot;&gt;
&lt;p&gt;&lt;code class=&quot;python plain&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/code&gt;&lt;code class=&quot;python functions&quot;&gt;list&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;((&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;1&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;,&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;2&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;,&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;3&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;,&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;4&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;,&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;5&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;))   &lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python plain&quot;&gt;[&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;1&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;, &lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;2&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;, &lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;3&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;, &lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;4&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;, &lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;5&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;]&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;span&gt;33、locals()&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;功能：打印局部变量&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter sh-gutter&quot;&gt;
&lt;div&gt;
&lt;div id=&quot;highlighter_392108&quot; class=&quot;syntaxhighlighter python&quot;&gt;
&lt;table border=&quot;0&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody readability=&quot;1.5&quot;&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td class=&quot;gutter&quot;&gt;
&lt;p&gt;1&lt;/p&gt;
&lt;p&gt;2&lt;/p&gt;
&lt;p&gt;3&lt;/p&gt;
&lt;p&gt;4&lt;/p&gt;
&lt;p&gt;5&lt;/p&gt;
&lt;p&gt;6&lt;/p&gt;
&lt;p&gt;7&lt;/p&gt;
&lt;p&gt;8&lt;/p&gt;
&lt;p&gt;9&lt;/p&gt;
&lt;p&gt;10&lt;/p&gt;
&lt;p&gt;11&lt;/p&gt;
&lt;/td&gt;
&lt;td class=&quot;code&quot; readability=&quot;6&quot;&gt;
&lt;div class=&quot;container&quot; readability=&quot;11&quot;&gt;
&lt;p&gt;&lt;code class=&quot;python keyword&quot;&gt;def&lt;/code&gt; &lt;code class=&quot;python plain&quot;&gt;test():&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python spaces&quot;&gt;    &lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;locals_var &lt;/code&gt;&lt;code class=&quot;python keyword&quot;&gt;=&lt;/code&gt; &lt;code class=&quot;python value&quot;&gt;333&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python spaces&quot;&gt;    &lt;/code&gt;&lt;code class=&quot;python functions&quot;&gt;print&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;(&lt;/code&gt;&lt;code class=&quot;python functions&quot;&gt;locals&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;())   &lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;python plain&quot;&gt;test()&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python functions&quot;&gt;print&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;(&lt;/code&gt;&lt;code class=&quot;python functions&quot;&gt;globals&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;().get(&lt;/code&gt;&lt;code class=&quot;python string&quot;&gt;&quot;locals_var&quot;&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;))  &lt;/code&gt;&lt;/p&gt;



&lt;p&gt;&lt;code class=&quot;python plain&quot;&gt;{&lt;/code&gt;&lt;code class=&quot;python string&quot;&gt;'locals_var'&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;: &lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;333&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;}&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python color1&quot;&gt;None&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;span&gt;34、max(&lt;span class=&quot;sig-paren&quot;&gt;&lt;em&gt;iterable&lt;/em&gt;, &lt;em&gt;*&lt;/em&gt;&lt;span class=&quot;optional&quot;&gt;[, &lt;em&gt;key&lt;/em&gt;, &lt;em&gt;default&lt;/em&gt;&lt;span class=&quot;optional&quot;&gt;])&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;功能：返回列表重点额最大值&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter sh-gutter&quot;&gt;
&lt;div&gt;
&lt;div id=&quot;highlighter_129723&quot; class=&quot;syntaxhighlighter python&quot;&gt;
&lt;table border=&quot;0&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;
&lt;p&gt;1&lt;/p&gt;
&lt;p&gt;2&lt;/p&gt;
&lt;/td&gt;
&lt;td class=&quot;code&quot;&gt;
&lt;div class=&quot;container&quot;&gt;
&lt;p&gt;&lt;code class=&quot;python plain&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/code&gt;&lt;code class=&quot;python functions&quot;&gt;max&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;([&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;1&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;,&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;2&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;,&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;3&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;,&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;4&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;,&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;5&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;])&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python value&quot;&gt;5&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;span&gt;35、min(&lt;em&gt;iterable&lt;/em&gt;, &lt;em&gt;*&lt;/em&gt;&lt;span class=&quot;optional&quot;&gt;[, &lt;em&gt;key&lt;/em&gt;, &lt;em&gt;default&lt;/em&gt;&lt;span class=&quot;optional&quot;&gt;])&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;功能：返回列表中的最小值&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter sh-gutter&quot;&gt;
&lt;div&gt;
&lt;div id=&quot;highlighter_58964&quot; class=&quot;syntaxhighlighter python&quot;&gt;
&lt;table border=&quot;0&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;
&lt;p&gt;1&lt;/p&gt;
&lt;p&gt;2&lt;/p&gt;
&lt;/td&gt;
&lt;td class=&quot;code&quot;&gt;
&lt;div class=&quot;container&quot;&gt;
&lt;p&gt;&lt;code class=&quot;python plain&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/code&gt;&lt;code class=&quot;python functions&quot;&gt;min&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;([&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;1&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;,&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;2&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;,&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;3&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;,&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;4&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;,&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;5&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;])&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python value&quot;&gt;1&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;span&gt;36、next(&lt;span class=&quot;sig-paren&quot;&gt;&lt;em&gt;iterator&lt;/em&gt;&lt;span class=&quot;optional&quot;&gt;[, &lt;em&gt;default&lt;/em&gt;&lt;span class=&quot;optional&quot;&gt;])&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;功能：返回迭代器的下一个值，相当于__next__()方法，如果迭代最后一个数据之后没有值了，则会抛出一个StopIteration异常&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter sh-gutter&quot;&gt;
&lt;div&gt;
&lt;div id=&quot;highlighter_526896&quot; class=&quot;syntaxhighlighter python&quot;&gt;
&lt;table border=&quot;0&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody readability=&quot;3&quot;&gt;&lt;tr readability=&quot;6&quot;&gt;&lt;td class=&quot;gutter&quot;&gt;
&lt;p&gt;1&lt;/p&gt;
&lt;p&gt;2&lt;/p&gt;
&lt;p&gt;3&lt;/p&gt;
&lt;p&gt;4&lt;/p&gt;
&lt;p&gt;5&lt;/p&gt;
&lt;p&gt;6&lt;/p&gt;
&lt;p&gt;7&lt;/p&gt;
&lt;p&gt;8&lt;/p&gt;
&lt;p&gt;9&lt;/p&gt;
&lt;/td&gt;
&lt;td class=&quot;code&quot; readability=&quot;6&quot;&gt;
&lt;div class=&quot;container&quot; readability=&quot;11&quot;&gt;
&lt;p&gt;&lt;code class=&quot;python plain&quot;&gt;&amp;gt;&amp;gt;&amp;gt; a &lt;/code&gt;&lt;code class=&quot;python keyword&quot;&gt;=&lt;/code&gt; &lt;code class=&quot;python functions&quot;&gt;iter&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;([&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;1&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;,&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;2&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;])&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python plain&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/code&gt;&lt;code class=&quot;python functions&quot;&gt;next&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;(a)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python value&quot;&gt;1&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python plain&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/code&gt;&lt;code class=&quot;python functions&quot;&gt;next&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;(a)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python value&quot;&gt;2&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python plain&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/code&gt;&lt;code class=&quot;python functions&quot;&gt;next&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;(a)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python plain&quot;&gt;Traceback (most recent call last):&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python spaces&quot;&gt;  &lt;/code&gt;&lt;code class=&quot;python functions&quot;&gt;File&lt;/code&gt; &lt;code class=&quot;python string&quot;&gt;&quot;&amp;lt;input&amp;gt;&quot;&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;, line &lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;1&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;, &lt;/code&gt;&lt;code class=&quot;python keyword&quot;&gt;in&lt;/code&gt; &lt;code class=&quot;python plain&quot;&gt;&amp;lt;module&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python plain&quot;&gt;StopIteration&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;span&gt;37、object&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;功能：python中一切皆对象，每一个对象都有它的属性和方法&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;38、oct(x)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;功能：把一个数转成8进制&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter sh-gutter&quot;&gt;
&lt;div&gt;
&lt;div id=&quot;highlighter_114363&quot; class=&quot;syntaxhighlighter python&quot;&gt;
&lt;table border=&quot;0&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody readability=&quot;1&quot;&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td class=&quot;gutter&quot;&gt;
&lt;p&gt;&lt;span&gt;1&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;2&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;3&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;4&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;5&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;6&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;7&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;8&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td class=&quot;code&quot;&gt;
&lt;div class=&quot;container&quot;&gt;
&lt;p&gt;&lt;span&gt;&lt;code class=&quot;python plain&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/code&gt;&lt;code class=&quot;python functions&quot;&gt;oct&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;(&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;7&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;)&lt;/code&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;code class=&quot;python string&quot;&gt;'0o7'&lt;/code&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;code class=&quot;python plain&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/code&gt;&lt;code class=&quot;python functions&quot;&gt;oct&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;(&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;8&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;)&lt;/code&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;code class=&quot;python string&quot;&gt;'0o10'&lt;/code&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;code class=&quot;python plain&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/code&gt;&lt;code class=&quot;python functions&quot;&gt;oct&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;(&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;15&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;)&lt;/code&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;code class=&quot;python string&quot;&gt;'0o17'&lt;/code&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;code class=&quot;python plain&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/code&gt;&lt;code class=&quot;python functions&quot;&gt;oct&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;(&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;16&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;)&lt;/code&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;code class=&quot;python string&quot;&gt;'0o20'&lt;/code&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;span&gt;39、open(&lt;em&gt;file&lt;/em&gt;, &lt;em&gt;mode='r'&lt;/em&gt;, &lt;em&gt;buffering=-1&lt;/em&gt;, &lt;em&gt;encoding=None&lt;/em&gt;, &lt;em&gt;errors=None&lt;/em&gt;, &lt;em&gt;newline=None&lt;/em&gt;, &lt;em&gt;closefd=True&lt;/em&gt;, &lt;em&gt;opener=None&lt;/em&gt;)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;功能：文件操作，详细介绍：http://www.cnblogs.com/ManyQian/p/8075983.html&lt;a href=&quot;http://www.cnblogs.com/zhangqigao/articles/6477625.html&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;&lt;br data-filtered=&quot;filtered&quot;/&gt;&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;40、pow(&lt;span class=&quot;sig-paren&quot;&gt;&lt;em&gt;x&lt;/em&gt;, &lt;em&gt;y&lt;/em&gt;&lt;span class=&quot;optional&quot;&gt;[, &lt;em&gt;z&lt;/em&gt;&lt;span class=&quot;optional&quot;&gt;])&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;功能：返回多少次幂&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter sh-gutter&quot;&gt;
&lt;div&gt;
&lt;div id=&quot;highlighter_820776&quot; class=&quot;syntaxhighlighter python&quot;&gt;
&lt;table border=&quot;0&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;
&lt;p&gt;1&lt;/p&gt;
&lt;p&gt;2&lt;/p&gt;
&lt;/td&gt;
&lt;td class=&quot;code&quot;&gt;
&lt;div class=&quot;container&quot;&gt;
&lt;p&gt;&lt;code class=&quot;python plain&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/code&gt;&lt;code class=&quot;python functions&quot;&gt;pow&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;(&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;2&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;,&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;3&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;)  &lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python value&quot;&gt;8&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;span&gt;41、print(&lt;em&gt;*objects&lt;/em&gt;, &lt;em&gt;sep=' '&lt;/em&gt;, &lt;em&gt;end='\n'&lt;/em&gt;, &lt;em&gt;file=sys.stdout&lt;/em&gt;, &lt;em&gt;flush=False&lt;/em&gt;)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;功能：打印&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter sh-gutter&quot;&gt;
&lt;div&gt;
&lt;div id=&quot;highlighter_825171&quot; class=&quot;syntaxhighlighter python&quot;&gt;
&lt;table border=&quot;0&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody readability=&quot;1&quot;&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td class=&quot;gutter&quot;&gt;
&lt;p&gt;1&lt;/p&gt;
&lt;p&gt;2&lt;/p&gt;
&lt;/td&gt;
&lt;td class=&quot;code&quot;&gt;
&lt;div class=&quot;container&quot;&gt;
&lt;p&gt;&lt;code class=&quot;python plain&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/code&gt;&lt;code class=&quot;python functions&quot;&gt;print&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;(&lt;/code&gt;&lt;code class=&quot;python string&quot;&gt;&quot;zhangqigao&quot;&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python plain&quot;&gt;zhangqigao&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;span&gt;42、range(stop)、range(&lt;em&gt;start&lt;/em&gt;, &lt;em&gt;stop&lt;/em&gt;&lt;span class=&quot;optional&quot;&gt;[, &lt;em&gt;step&lt;/em&gt;&lt;span class=&quot;optional&quot;&gt;])&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;功能：生成一个迭代器&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter sh-gutter&quot;&gt;
&lt;div&gt;
&lt;div id=&quot;highlighter_949917&quot; class=&quot;syntaxhighlighter python&quot;&gt;
&lt;table border=&quot;0&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody readability=&quot;4.5&quot;&gt;&lt;tr readability=&quot;9&quot;&gt;&lt;td class=&quot;gutter&quot;&gt;
&lt;p&gt;1&lt;/p&gt;
&lt;p&gt;2&lt;/p&gt;
&lt;p&gt;3&lt;/p&gt;
&lt;p&gt;4&lt;/p&gt;
&lt;p&gt;5&lt;/p&gt;
&lt;p&gt;6&lt;/p&gt;
&lt;/td&gt;
&lt;td class=&quot;code&quot;&gt;
&lt;div class=&quot;container&quot;&gt;
&lt;p&gt;&lt;code class=&quot;python plain&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/code&gt;&lt;code class=&quot;python functions&quot;&gt;range&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;(&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;5&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python functions&quot;&gt;range&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;(&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;0&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;, &lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;5&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python plain&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/code&gt;&lt;code class=&quot;python functions&quot;&gt;range&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;(&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;1&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;,&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;5&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python functions&quot;&gt;range&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;(&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;1&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;, &lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;5&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python plain&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/code&gt;&lt;code class=&quot;python functions&quot;&gt;range&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;(&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;1&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;,&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;5&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;,&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;2&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python functions&quot;&gt;range&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;(&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;1&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;, &lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;5&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;, &lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;2&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;)&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;span&gt;43、reversed(&lt;span class=&quot;sig-paren&quot;&gt;&lt;em&gt;seq&lt;/em&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;功能：反转一个序列，跟列表中的reversed方法是一样的&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter sh-gutter&quot;&gt;
&lt;div&gt;
&lt;div id=&quot;highlighter_728213&quot; class=&quot;syntaxhighlighter python&quot;&gt;
&lt;table border=&quot;0&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody readability=&quot;5.5&quot;&gt;&lt;tr readability=&quot;11&quot;&gt;&lt;td class=&quot;gutter&quot;&gt;
&lt;p&gt;1&lt;/p&gt;
&lt;p&gt;2&lt;/p&gt;
&lt;p&gt;3&lt;/p&gt;
&lt;p&gt;4&lt;/p&gt;
&lt;p&gt;5&lt;/p&gt;
&lt;p&gt;6&lt;/p&gt;
&lt;p&gt;7&lt;/p&gt;
&lt;p&gt;8&lt;/p&gt;
&lt;p&gt;9&lt;/p&gt;
&lt;p&gt;10&lt;/p&gt;
&lt;/td&gt;
&lt;td class=&quot;code&quot; readability=&quot;10&quot;&gt;
&lt;div class=&quot;container&quot; readability=&quot;19&quot;&gt;
&lt;p&gt;&lt;code class=&quot;python plain&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/code&gt;&lt;code class=&quot;python functions&quot;&gt;reversed&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;([&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;1&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;,&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;2&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;,&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;3&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;,&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;4&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;,&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;5&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;])&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python plain&quot;&gt;&amp;lt;list_reverseiterator &lt;/code&gt;&lt;code class=&quot;python functions&quot;&gt;object&lt;/code&gt; &lt;code class=&quot;python plain&quot;&gt;at &lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;0x00000000030A2588&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;&amp;gt;  &lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python plain&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/code&gt;&lt;code class=&quot;python keyword&quot;&gt;for&lt;/code&gt; &lt;code class=&quot;python plain&quot;&gt;i &lt;/code&gt;&lt;code class=&quot;python keyword&quot;&gt;in&lt;/code&gt;  &lt;code class=&quot;python functions&quot;&gt;reversed&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;([&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;1&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;,&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;2&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;,&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;3&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;,&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;4&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;,&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;5&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;]):&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python plain&quot;&gt;...     &lt;/code&gt;&lt;code class=&quot;python functions&quot;&gt;print&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;(i)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python plain&quot;&gt;...    &lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python value&quot;&gt;5&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python value&quot;&gt;4&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python value&quot;&gt;3&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python value&quot;&gt;2&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python value&quot;&gt;1&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;span&gt;44、round(&lt;em&gt;number&lt;/em&gt;&lt;span class=&quot;optional&quot;&gt;[, &lt;em&gt;ndigits&lt;/em&gt;&lt;span class=&quot;optional&quot;&gt;])&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;功能：四舍五入&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;45、set(&lt;span class=&quot;sig-paren&quot;&gt;&lt;span class=&quot;optional&quot;&gt;[&lt;em&gt;iterable&lt;/em&gt;&lt;span class=&quot;optional&quot;&gt;])&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;功能:集合&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;46、slice(&lt;span class=&quot;sig-paren&quot;&gt;&lt;em&gt;stop&lt;/em&gt;),slice(&lt;em&gt;start&lt;/em&gt;, &lt;em&gt;stop&lt;/em&gt;&lt;span class=&quot;optional&quot;&gt;[, &lt;em&gt;step&lt;/em&gt;&lt;span class=&quot;optional&quot;&gt;])&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;功能：序列的切片，方便多次反复切&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter sh-gutter&quot;&gt;
&lt;div&gt;
&lt;div id=&quot;highlighter_399049&quot; class=&quot;syntaxhighlighter python&quot;&gt;
&lt;table border=&quot;0&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody readability=&quot;5&quot;&gt;&lt;tr readability=&quot;10&quot;&gt;&lt;td class=&quot;gutter&quot;&gt;
&lt;p&gt;1&lt;/p&gt;
&lt;p&gt;2&lt;/p&gt;
&lt;p&gt;3&lt;/p&gt;
&lt;p&gt;4&lt;/p&gt;
&lt;p&gt;5&lt;/p&gt;
&lt;/td&gt;
&lt;td class=&quot;code&quot;&gt;
&lt;div class=&quot;container&quot;&gt;
&lt;p&gt;&lt;code class=&quot;python plain&quot;&gt;&amp;gt;&amp;gt;&amp;gt; a &lt;/code&gt;&lt;code class=&quot;python keyword&quot;&gt;=&lt;/code&gt; &lt;code class=&quot;python plain&quot;&gt;[&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;1&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;,&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;2&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;,&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;3&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;,&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;4&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;,&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;5&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;,&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;6&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python plain&quot;&gt;&amp;gt;&amp;gt;&amp;gt; a[&lt;/code&gt;&lt;code class=&quot;python functions&quot;&gt;slice&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;(&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;1&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;,&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;3&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;)]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python plain&quot;&gt;[&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;2&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;, &lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;3&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python plain&quot;&gt;&amp;gt;&amp;gt;&amp;gt; a[&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;1&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;:&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;3&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python plain&quot;&gt;[&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;2&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;, &lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;3&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;]&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;span&gt;47、sorted(&lt;em&gt;iterable[, key][, reverse]&lt;/em&gt;)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;功能：对一个序列进行排序&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter sh-gutter&quot;&gt;
&lt;div&gt;
&lt;div id=&quot;highlighter_849700&quot; class=&quot;syntaxhighlighter python&quot;&gt;
&lt;table border=&quot;0&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody readability=&quot;13.5&quot;&gt;&lt;tr readability=&quot;27&quot;&gt;&lt;td class=&quot;gutter&quot;&gt;
&lt;p&gt;1&lt;/p&gt;
&lt;p&gt;2&lt;/p&gt;
&lt;p&gt;3&lt;/p&gt;
&lt;p&gt;4&lt;/p&gt;
&lt;p&gt;5&lt;/p&gt;
&lt;p&gt;6&lt;/p&gt;
&lt;p&gt;7&lt;/p&gt;
&lt;p&gt;8&lt;/p&gt;
&lt;p&gt;9&lt;/p&gt;
&lt;/td&gt;
&lt;td class=&quot;code&quot; readability=&quot;12.5&quot;&gt;
&lt;div class=&quot;container&quot; readability=&quot;24&quot;&gt;
&lt;p&gt;&lt;code class=&quot;python plain&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/code&gt;&lt;code class=&quot;python functions&quot;&gt;sorted&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;([&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;5&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;,&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;3&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;,&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;2&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;,&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;6&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;,&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;8&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;])&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python plain&quot;&gt;[&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;2&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;, &lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;3&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;, &lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;5&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;, &lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;6&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;, &lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;8&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python plain&quot;&gt;&amp;gt;&amp;gt;&amp;gt; a &lt;/code&gt;&lt;code class=&quot;python keyword&quot;&gt;=&lt;/code&gt; &lt;code class=&quot;python plain&quot;&gt;{&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;1&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;:&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;5&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;,&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;6&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;:&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;8&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;,&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;3&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;:&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;6&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;}&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python plain&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/code&gt;&lt;code class=&quot;python functions&quot;&gt;sorted&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;(a)  &lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python plain&quot;&gt;[&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;1&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;, &lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;3&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;, &lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;6&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python plain&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/code&gt;&lt;code class=&quot;python functions&quot;&gt;sorted&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;(a.items())  &lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python plain&quot;&gt;[(&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;1&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;, &lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;5&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;), (&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;3&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;, &lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;6&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;), (&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;6&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;, &lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;8&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;)]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python plain&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/code&gt;&lt;code class=&quot;python functions&quot;&gt;sorted&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;(a.items(),key &lt;/code&gt;&lt;code class=&quot;python keyword&quot;&gt;=&lt;/code&gt; &lt;code class=&quot;python keyword&quot;&gt;lambda&lt;/code&gt; &lt;code class=&quot;python plain&quot;&gt;x:x[&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;1&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;])  &lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python plain&quot;&gt;[(&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;1&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;, &lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;5&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;), (&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;3&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;, &lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;6&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;), (&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;6&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;, &lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;8&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;)]&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;span&gt;48、 str(&lt;span class=&quot;sig-paren&quot;&gt;&lt;em&gt;object&lt;/em&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;功能：把其他数据类型转换为字符串&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter sh-gutter&quot;&gt;
&lt;div&gt;
&lt;div id=&quot;highlighter_633278&quot; class=&quot;syntaxhighlighter python&quot;&gt;
&lt;table border=&quot;0&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;
&lt;p&gt;1&lt;/p&gt;
&lt;p&gt;2&lt;/p&gt;
&lt;/td&gt;
&lt;td class=&quot;code&quot;&gt;
&lt;div class=&quot;container&quot;&gt;
&lt;p&gt;&lt;code class=&quot;python plain&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/code&gt;&lt;code class=&quot;python functions&quot;&gt;str&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;(&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;1&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python string&quot;&gt;'1'&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;span&gt;49、sum(&lt;span class=&quot;sig-paren&quot;&gt;&lt;em&gt;iterable&lt;/em&gt;&lt;span class=&quot;optional&quot;&gt;[, &lt;em&gt;start&lt;/em&gt;&lt;span class=&quot;optional&quot;&gt;])&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;功能：求一个列表的和,元组，集合，前提都是数字类型&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter sh-gutter&quot;&gt;
&lt;div&gt;
&lt;div id=&quot;highlighter_852287&quot; class=&quot;syntaxhighlighter python&quot;&gt;
&lt;table border=&quot;0&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody readability=&quot;3.5&quot;&gt;&lt;tr readability=&quot;7&quot;&gt;&lt;td class=&quot;gutter&quot;&gt;
&lt;p&gt;1&lt;/p&gt;
&lt;p&gt;2&lt;/p&gt;
&lt;/td&gt;
&lt;td class=&quot;code&quot;&gt;
&lt;div class=&quot;container&quot;&gt;
&lt;p&gt;&lt;code class=&quot;python plain&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/code&gt;&lt;code class=&quot;python functions&quot;&gt;sum&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;([&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;1&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;,&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;2&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;,&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;3&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;,&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;4&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;,&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;5&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;,&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;6&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;])&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python value&quot;&gt;21&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;span&gt;50、tuple(&lt;span class=&quot;sig-paren&quot;&gt;&lt;span class=&quot;optional&quot;&gt;[&lt;em&gt;iterable&lt;/em&gt;&lt;span class=&quot;optional&quot;&gt;])&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;功能：把其他序列转换为一个元组&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter sh-gutter&quot;&gt;
&lt;div&gt;
&lt;div id=&quot;highlighter_320085&quot; class=&quot;syntaxhighlighter python&quot;&gt;
&lt;table border=&quot;0&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody readability=&quot;5&quot;&gt;&lt;tr readability=&quot;10&quot;&gt;&lt;td class=&quot;gutter&quot;&gt;
&lt;p&gt;1&lt;/p&gt;
&lt;p&gt;2&lt;/p&gt;
&lt;/td&gt;
&lt;td class=&quot;code&quot;&gt;
&lt;div class=&quot;container&quot;&gt;
&lt;p&gt;&lt;code class=&quot;python plain&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/code&gt;&lt;code class=&quot;python functions&quot;&gt;tuple&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;([&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;1&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;,&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;2&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;,&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;3&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;,&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;4&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;,&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;5&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;])&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python plain&quot;&gt;(&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;1&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;, &lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;2&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;, &lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;3&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;, &lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;4&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;, &lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;5&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;)&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;span&gt;51、type(&lt;span class=&quot;sig-paren&quot;&gt;&lt;em&gt;object&lt;/em&gt;) 、type(&lt;span class=&quot;sig-paren&quot;&gt;&lt;em&gt;name&lt;/em&gt;, &lt;em&gt;bases&lt;/em&gt;, &lt;em&gt;dict&lt;/em&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;功能：查看一个对象的数据类型&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter sh-gutter&quot;&gt;
&lt;div&gt;
&lt;div id=&quot;highlighter_535069&quot; class=&quot;syntaxhighlighter python&quot;&gt;
&lt;table border=&quot;0&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody readability=&quot;1&quot;&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td class=&quot;gutter&quot;&gt;
&lt;p&gt;1&lt;/p&gt;
&lt;p&gt;2&lt;/p&gt;
&lt;p&gt;3&lt;/p&gt;
&lt;/td&gt;
&lt;td class=&quot;code&quot;&gt;
&lt;div class=&quot;container&quot;&gt;
&lt;p&gt;&lt;code class=&quot;python plain&quot;&gt;&amp;gt;&amp;gt;&amp;gt; a &lt;/code&gt;&lt;code class=&quot;python keyword&quot;&gt;=&lt;/code&gt; &lt;code class=&quot;python string&quot;&gt;'qianduoduo'&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python plain&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/code&gt;&lt;code class=&quot;python functions&quot;&gt;type&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;(a)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python plain&quot;&gt;&amp;lt;&lt;/code&gt;&lt;code class=&quot;python keyword&quot;&gt;class&lt;/code&gt; &lt;code class=&quot;python string&quot;&gt;'str'&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;注：一切数据类型都是有type()方法产生，它是一切数据类型的根。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;52、zip(&lt;span class=&quot;sig-paren&quot;&gt;&lt;em&gt;*iterables&lt;/em&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;功能：zip中文意思是拉链的意思，把两个序列一一对应起来。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter sh-gutter&quot;&gt;
&lt;div&gt;
&lt;div id=&quot;highlighter_659681&quot; class=&quot;syntaxhighlighter python&quot;&gt;
&lt;table border=&quot;0&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody readability=&quot;7&quot;&gt;&lt;tr readability=&quot;14&quot;&gt;&lt;td class=&quot;gutter&quot;&gt;
&lt;p&gt;1&lt;/p&gt;
&lt;p&gt;2&lt;/p&gt;
&lt;p&gt;3&lt;/p&gt;
&lt;p&gt;4&lt;/p&gt;
&lt;p&gt;5&lt;/p&gt;
&lt;p&gt;6&lt;/p&gt;
&lt;p&gt;7&lt;/p&gt;
&lt;p&gt;8&lt;/p&gt;
&lt;p&gt;9&lt;/p&gt;
&lt;/td&gt;
&lt;td class=&quot;code&quot; readability=&quot;4.5&quot;&gt;
&lt;div class=&quot;container&quot; readability=&quot;8&quot;&gt;
&lt;p&gt;&lt;code class=&quot;python plain&quot;&gt;&amp;gt;&amp;gt;&amp;gt; a &lt;/code&gt;&lt;code class=&quot;python keyword&quot;&gt;=&lt;/code&gt; &lt;code class=&quot;python plain&quot;&gt;[&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;1&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;,&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;2&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;,&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;3&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;,&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;4&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python plain&quot;&gt;&amp;gt;&amp;gt;&amp;gt; b&lt;/code&gt;&lt;code class=&quot;python keyword&quot;&gt;=&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;[&lt;/code&gt;&lt;code class=&quot;python string&quot;&gt;'a'&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;,&lt;/code&gt;&lt;code class=&quot;python string&quot;&gt;'b'&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;,&lt;/code&gt;&lt;code class=&quot;python string&quot;&gt;'c'&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;,&lt;/code&gt;&lt;code class=&quot;python string&quot;&gt;'d'&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python plain&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/code&gt;&lt;code class=&quot;python keyword&quot;&gt;for&lt;/code&gt; &lt;code class=&quot;python plain&quot;&gt;i &lt;/code&gt;&lt;code class=&quot;python keyword&quot;&gt;in&lt;/code&gt; &lt;code class=&quot;python functions&quot;&gt;zip&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;(a,b):&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python plain&quot;&gt;...     &lt;/code&gt;&lt;code class=&quot;python functions&quot;&gt;print&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;(i)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python plain&quot;&gt;...    &lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python plain&quot;&gt;(&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;1&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;, &lt;/code&gt;&lt;code class=&quot;python string&quot;&gt;'a'&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python plain&quot;&gt;(&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;2&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;, &lt;/code&gt;&lt;code class=&quot;python string&quot;&gt;'b'&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python plain&quot;&gt;(&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;3&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;, &lt;/code&gt;&lt;code class=&quot;python string&quot;&gt;'c'&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;python plain&quot;&gt;(&lt;/code&gt;&lt;code class=&quot;python value&quot;&gt;4&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;, &lt;/code&gt;&lt;code class=&quot;python string&quot;&gt;'d'&lt;/code&gt;&lt;code class=&quot;python plain&quot;&gt;)&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;span&gt; 注：如果a的元素比b的多,则按照元素最少的那个来 &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;PS：有些没有列出来，不是实在用不着，就是后面类的重点，后面还有单独的博客！&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Tue, 03 Apr 2018 07:40:00 +0000</pubDate>
<dc:creator>天王盖地虎宝塔镇河妖</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/ManyQian/p/8708864.html</dc:identifier>
</item>
<item>
<title>第八篇 Python 模块与包 - 1024python</title>
<link>http://www.cnblogs.com/zzzhfo/p/8708758.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/zzzhfo/p/8708758.html</guid>
<description>&lt;h3&gt;一、模块介绍&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;
&lt;h4&gt;什么是模块？&lt;/h4&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;常见的场景：一个模块就是一个包含了一组功能的Python文件，比如spam.py，模块名为spam，可以通过import spam使用。
在Python中，模块的使用方式都是一样的，但其实细说的，模块可以分为四个通过类别：
&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;、使用Python编写的.py文件
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;、已被编译为共享库或DLL的C或C++&lt;span&gt;扩展
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt;、把一系列模块组织到一起的文件夹(注：文件夹下有一个__init__.py文件，该文件夹称之为包)
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;、使用C编写并链接到Python解释器的内置模块
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;
&lt;h4&gt;为何要使用模块？&lt;/h4&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
#&lt;span&gt;1&lt;/span&gt;&lt;span&gt;、从文件级别组织程序，更方便管理
随着程序的发展，功能越来越多，为了方便管理，我们通常将程序分成一个个的文件，这样做程序的结构更清晰，方便管理。这时我们不仅仅可以把这些文件当作脚本去执行，还可以把他们当作模块来导入到其他的模块中，实现了功能的重复利用。
#&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;、拿来主义，提升开发效率
同样的原理，我们也可以下载别人写好的模块然后导入到自己的项目中使用，这种拿来主义，可以极大地提升我们的开发效率
#ps:
如果你退出Python解释器然后重新进入，那么你之间定义的函数或变量都将丢失，因此我们通常将程序写到文件中以便永久保存下来，需要时就通过python test.py方式去执行，此时test.py被称为脚本script&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;
&lt;h4&gt;以spam.py为例来介绍模块的使用：文件名spam.py，模块名spam&lt;/h4&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('36e05735-79af-428f-ad6c-553eea5fbbbc')&quot; readability=&quot;33&quot;&gt;&lt;img id=&quot;code_img_closed_36e05735-79af-428f-ad6c-553eea5fbbbc&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_36e05735-79af-428f-ad6c-553eea5fbbbc&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('36e05735-79af-428f-ad6c-553eea5fbbbc',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_36e05735-79af-428f-ad6c-553eea5fbbbc&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;61&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#spam.py
print(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;from the spam.py&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)

money&lt;/span&gt;=&lt;span&gt;1000&lt;/span&gt;&lt;span&gt;

def read1():
    print(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;spam模块,read1：&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,money)

def read2():
    print(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;spam模块,read2&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
    read1()

def change():
    &lt;/span&gt;&lt;span&gt;global&lt;/span&gt;&lt;span&gt; money
    money&lt;/span&gt;=&lt;span&gt;0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;spam.py&lt;/span&gt;&lt;/div&gt;
&lt;h3&gt;二、使用模块之import&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;
&lt;h4&gt;import的使用&lt;/h4&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#模块可以包含可执行的语句和函数的定义，这些语句的目的是初始化模块，它们只在模块名第一次遇到导入import语句时才执行(import语句是可以在程序中的任意位置使用的，且针对同一个模块import很多次，为了防止你重复导入，python的优化手段是：第一次导入后就将模块名加载到内存了，后续的import语句仅是对已经加载到内存中的模块对象增加了一次引用，不会重新执行模块内的语句)，如下

#test.py
import spam #只在第一次导入时才执行spam.py内代码,此处的显式效果是只打印一次&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;from the spam.py&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,当然其他的顶级代码也都被执行了,只不过没有显示效果.
import spam
import spam
import spam

&lt;/span&gt;&lt;span&gt;'''
&lt;/span&gt;&lt;span&gt;执行结果：
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt;&lt;span&gt; the spam.py
&lt;/span&gt;&lt;span&gt;'''&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ps:我们可以从sys.module中找到当前已经加载的模块，sys.module是一个字典，内部包含模块名与模块对象的映射，该字典决定了导入模块时是否需要重新导入。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;
&lt;h4&gt;在第一次导入模块时会做三件事，重复导入会直接引用内存中已经加载好的结果&lt;/h4&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
#&lt;span&gt;1&lt;/span&gt;&lt;span&gt;、为源文件(spam模块)创建新的名称空间，在spam中定义的函数和方法若是使用了global时访问的就是这个名称空间。
#&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;、在新创建的命名空间中执行模块中包含的代码，见初始导入import spam
    提示:导入模块时到底执行了什么？
    In fact function definitions are also ‘statements’ that are 
    ‘executed’; the execution of a module&lt;/span&gt;-&lt;span&gt;level function definition 
    enters the function name &lt;/span&gt;&lt;span&gt;in&lt;/span&gt; the module’s &lt;span&gt;global&lt;/span&gt;&lt;span&gt; symbol table.
    事实上函数定义也是“被执行”的语句，模块级别函数定义的执行将函数名放
    入模块全局名称空间表，用globals()可以查看

#&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt;、创建名字spam来引用该名称空间
    这个名字和变量名没什么区别，都是&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;第一类的&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;，且使用spam.名字的方式可以访问spam.py文件中定义的名字，spam.名字与test.py中的名字来自两个完全不同的地方。
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;
&lt;h4&gt;被导入模块有独立的名称空间&lt;/h4&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;每个模块都是一个独立的名称空间，定义在这个模块中的函数，把这个模块的名称空间当作全局名称空间，这样我们在编写自己的模块时，&lt;/p&gt;
&lt;p&gt;就不用担心我们定义在自己模块中全局变量会在被导入时，与使用者的全局变量冲突&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('87b7a387-6d4a-4732-aff5-5f807eacdaee')&quot; readability=&quot;31&quot;&gt;&lt;img id=&quot;code_img_closed_87b7a387-6d4a-4732-aff5-5f807eacdaee&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_87b7a387-6d4a-4732-aff5-5f807eacdaee&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('87b7a387-6d4a-4732-aff5-5f807eacdaee',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_87b7a387-6d4a-4732-aff5-5f807eacdaee&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;57&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#test.py
import spam 
money&lt;/span&gt;=&lt;span&gt;10&lt;/span&gt;&lt;span&gt;
print(spam.money)

&lt;/span&gt;&lt;span&gt;'''
&lt;/span&gt;&lt;span&gt;执行结果：
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt;&lt;span&gt; the spam.py
&lt;/span&gt;&lt;span&gt;1000&lt;/span&gt;
&lt;span&gt;'''&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;测试一:money与spam.money不冲突&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('3b376eb8-3fbc-41c2-8222-111bb9b32395')&quot; readability=&quot;31.5&quot;&gt;&lt;img id=&quot;code_img_closed_3b376eb8-3fbc-41c2-8222-111bb9b32395&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_3b376eb8-3fbc-41c2-8222-111bb9b32395&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('3b376eb8-3fbc-41c2-8222-111bb9b32395',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_3b376eb8-3fbc-41c2-8222-111bb9b32395&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;58&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#test.py
import spam
def read1():
    print(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;========&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
spam.read1()

&lt;/span&gt;&lt;span&gt;'''
&lt;/span&gt;&lt;span&gt;执行结果:
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt;&lt;span&gt; the spam.py
spam&lt;/span&gt;-&amp;gt;read1-&amp;gt;money &lt;span&gt;1000&lt;/span&gt;
&lt;span&gt;'''&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;测试二：read1与spam.read1不冲突&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('d2aa315f-d0ff-4e19-ba11-fbdc93dd0f19')&quot; readability=&quot;31&quot;&gt;&lt;img id=&quot;code_img_closed_d2aa315f-d0ff-4e19-ba11-fbdc93dd0f19&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_d2aa315f-d0ff-4e19-ba11-fbdc93dd0f19&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('d2aa315f-d0ff-4e19-ba11-fbdc93dd0f19',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_d2aa315f-d0ff-4e19-ba11-fbdc93dd0f19&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;57&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#test.py
import spam
money&lt;/span&gt;=&lt;span&gt;1&lt;/span&gt;&lt;span&gt;
spam.change()
print(money)

&lt;/span&gt;&lt;span&gt;'''
&lt;/span&gt;&lt;span&gt;执行结果：
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt;&lt;span&gt; the spam.py
&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;
&lt;span&gt;'''&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;测试三：执行spam.change()操作的全局变量money仍然是spam中的&lt;/span&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;
&lt;h4&gt;为模块起别名&lt;/h4&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;为已经导入的模块起别名的方式对编写可扩展的代码很有用&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
import spam &lt;span&gt;as&lt;/span&gt;&lt;span&gt; sm

print(sm.money)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;有两种sql模块mysql和oracle，根据用户的输入，选择不同的sql功能&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;if&lt;/span&gt; file_format == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;xml&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
    import xmlreader &lt;/span&gt;&lt;span&gt;as&lt;/span&gt;&lt;span&gt; reader
elif file_format &lt;/span&gt;== &lt;span&gt;'&lt;/span&gt;&lt;span&gt;csv&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
    import csvreader &lt;/span&gt;&lt;span&gt;as&lt;/span&gt;&lt;span&gt; reader
data&lt;/span&gt;=reader.read_date(filename)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;假设有两个模块xmlreader.py和csvreader.py，它们都定义了函数read_data(filename):用来从文件中读取一些数据，但采用不同的输入格式。可以编写代码来选择性地挑选读取模块&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;if&lt;/span&gt; file_format == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;xml&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
    import xmlreader &lt;/span&gt;&lt;span&gt;as&lt;/span&gt;&lt;span&gt; reader
elif file_format &lt;/span&gt;== &lt;span&gt;'&lt;/span&gt;&lt;span&gt;csv&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;:
    import csvreader &lt;/span&gt;&lt;span&gt;as&lt;/span&gt;&lt;span&gt; reader
data&lt;/span&gt;=reader.read_date(filename)
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;
&lt;h4&gt;在一行导入多个模块&lt;/h4&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
import sys,os,re
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;三、使用模块之from...import...&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;
&lt;h4&gt;from...import...的使用&lt;/h4&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;from&lt;/span&gt; spam import read1,read2
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;
&lt;h4&gt;from...import与import的对比&lt;/h4&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#唯一的区别就是：使用from...import...则是将spam中的名字直接导入到当前的名称空间中，所以在当前名称空间中，直接使用名字就可以了、无需加前缀：spam.

#&lt;/span&gt;&lt;span&gt;from&lt;/span&gt;&lt;span&gt;...import...的方式有好处也有坏处
    好处：使用起来方便了
    坏处：容易与当前执行文件中的名字冲突&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;验证一：当前位置直接使用read1和read2就好了，执行时，仍然以spam.py文件全局名称空间&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('35417fd3-f968-4e92-9f66-74cf58460c77')&quot; readability=&quot;33&quot;&gt;&lt;img id=&quot;code_img_closed_35417fd3-f968-4e92-9f66-74cf58460c77&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_35417fd3-f968-4e92-9f66-74cf58460c77&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('35417fd3-f968-4e92-9f66-74cf58460c77',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_35417fd3-f968-4e92-9f66-74cf58460c77&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;61&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#测试一：导入的函数read1，执行时仍然回到spam.py中寻找全局变量money
#test.py
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt;&lt;span&gt; spam import read1
money&lt;/span&gt;=&lt;span&gt;1000&lt;/span&gt;&lt;span&gt;
read1()
&lt;/span&gt;&lt;span&gt;'''
&lt;/span&gt;&lt;span&gt;执行结果:
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt;&lt;span&gt; the spam.py
spam&lt;/span&gt;-&amp;gt;read1-&amp;gt;money &lt;span&gt;1000&lt;/span&gt;
&lt;span&gt;'''
&lt;/span&gt;&lt;span&gt;
#测试二:导入的函数read2，执行时需要调用read1(),仍然回到spam.py中找read1()
#test.py
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt;&lt;span&gt; spam import read2
def read1():
    print(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;==========&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
read2()

&lt;/span&gt;&lt;span&gt;'''
&lt;/span&gt;&lt;span&gt;执行结果:
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt;&lt;span&gt; the spam.py
spam&lt;/span&gt;-&amp;gt;&lt;span&gt;read2 calling read
spam&lt;/span&gt;-&amp;gt;read1-&amp;gt;money &lt;span&gt;1000&lt;/span&gt;
&lt;span&gt;'''&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;验证二：如果当前有重名read1或者read2，那么会有覆盖效果。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('6e5fd90a-3261-40fb-a683-c22f693da0ca')&quot; readability=&quot;31.5&quot;&gt;&lt;img id=&quot;code_img_closed_6e5fd90a-3261-40fb-a683-c22f693da0ca&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_6e5fd90a-3261-40fb-a683-c22f693da0ca&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('6e5fd90a-3261-40fb-a683-c22f693da0ca',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_6e5fd90a-3261-40fb-a683-c22f693da0ca&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;58&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#测试三:导入的函数read1，被当前位置定义的read1覆盖掉了
#test.py
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt;&lt;span&gt; spam import read1
def read1():
    print(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;==========&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
read1()
&lt;/span&gt;&lt;span&gt;'''
&lt;/span&gt;&lt;span&gt;执行结果:
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt;&lt;span&gt; the spam.py
&lt;/span&gt;==========
&lt;span&gt;'''&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;验证三：导入的方法在执行时，始终是以源文件为准的&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('c6d7d900-3aa7-4b6b-a2a5-7adb09166408')&quot; readability=&quot;33&quot;&gt;&lt;img id=&quot;code_img_closed_c6d7d900-3aa7-4b6b-a2a5-7adb09166408&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_c6d7d900-3aa7-4b6b-a2a5-7adb09166408&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('c6d7d900-3aa7-4b6b-a2a5-7adb09166408',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_c6d7d900-3aa7-4b6b-a2a5-7adb09166408&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;61&quot;&gt;
&lt;pre&gt;
&lt;span&gt;from&lt;/span&gt;&lt;span&gt; spam import money,read1
money&lt;/span&gt;=&lt;span&gt;100&lt;/span&gt;&lt;span&gt; #将当前位置的名字money绑定到了100
print(money) #打印当前的名字
read1() #读取spam.py中的名字money,仍然为1000

&lt;/span&gt;&lt;span&gt;'''
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt;&lt;span&gt; the spam.py
&lt;/span&gt;&lt;span&gt;100&lt;/span&gt;&lt;span&gt;
spam&lt;/span&gt;-&amp;gt;read1-&amp;gt;money &lt;span&gt;1000&lt;/span&gt;
&lt;span&gt;'''&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;
&lt;h4&gt;也支持as&lt;/h4&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;from&lt;/span&gt; spam import read1 &lt;span&gt;as&lt;/span&gt; read
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;
&lt;h4&gt;一行导入多个名字&lt;/h4&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;from&lt;/span&gt; spam import read1,read2,money
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;
&lt;h4&gt;&lt;strong&gt;from...import *&lt;/strong&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
#&lt;span&gt;from&lt;/span&gt; spam import *&lt;span&gt; 把spam中所有的不是以下划线(_)开头的名字都导入到当前位置

#大部分情况下我们的python程序不应该使用这种导入方式，因为&lt;/span&gt;*你不知道你导入什么名字，很有可能会覆盖掉你之前已经定义的名字。而且可读性极其的差，在交互式环境中导入时没有问题。
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('deb3bd0c-9979-483e-b07a-97f9fc69637b')&quot; readability=&quot;32&quot;&gt;&lt;img id=&quot;code_img_closed_deb3bd0c-9979-483e-b07a-97f9fc69637b&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_deb3bd0c-9979-483e-b07a-97f9fc69637b&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('deb3bd0c-9979-483e-b07a-97f9fc69637b',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_deb3bd0c-9979-483e-b07a-97f9fc69637b&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;59&quot;&gt;
&lt;pre&gt;
&lt;span&gt;from&lt;/span&gt; spam import *&lt;span&gt; #将模块spam中所有的名字都导入到当前名称空间
print(money)
print(read1)
print(read2)
print(change)

&lt;/span&gt;&lt;span&gt;'''
&lt;/span&gt;&lt;span&gt;执行结果:
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt;&lt;span&gt; the spam.py
&lt;/span&gt;&lt;span&gt;1000&lt;/span&gt;
&amp;lt;function read1 at &lt;span&gt;0x1012e8158&lt;/span&gt;&amp;gt;
&amp;lt;function read2 at &lt;span&gt;0x1012e81e0&lt;/span&gt;&amp;gt;
&amp;lt;function change at &lt;span&gt;0x1012e8268&lt;/span&gt;&amp;gt;
&lt;span&gt;'''&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;可以使用__all__来控制*（用来发布新版本），在spam.py中新增一行&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
__all__=[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;money&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;read1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] #这样在另外一个文件中用from spam import *就这能导入列表中规定的两个名字
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;四、模块的重载(了解)&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;考虑到性能的原因，每个模块只被导入一次，放入字典sys.module中，如果你改变了模块的内容，你必须重启程序，python不支持重新加载或卸载之前导入的模块，
有的同学可能会想到直接从sys.module中删除一个模块不就可以卸载了吗，注意了，你删了sys.module中的模块对象仍然可能被其他程序的组件所引用，因而不会被清楚。

特别的对于我们引用了这个模块中的一个类，用这个类产生了很多对象，因而这些对象都有关于这个模块的引用。

如果只是你想交互测试的一个模块，使用 importlib.reload(), e.g. import importlib; importlib.reload(modulename)，这只能用于测试环境。&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('34d3b1dd-4d5e-4156-813e-0fd0b2b39855')&quot; readability=&quot;31&quot;&gt;&lt;img id=&quot;code_img_closed_34d3b1dd-4d5e-4156-813e-0fd0b2b39855&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_34d3b1dd-4d5e-4156-813e-0fd0b2b39855&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('34d3b1dd-4d5e-4156-813e-0fd0b2b39855',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_34d3b1dd-4d5e-4156-813e-0fd0b2b39855&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;57&quot;&gt;
&lt;pre&gt;
&lt;span&gt;def func1():
    print(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;func1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;aa.py的初始内容&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('ab103419-00ad-4d66-bb53-406eb9972ac7')&quot; readability=&quot;31.5&quot;&gt;&lt;img id=&quot;code_img_closed_ab103419-00ad-4d66-bb53-406eb9972ac7&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_ab103419-00ad-4d66-bb53-406eb9972ac7&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('ab103419-00ad-4d66-bb53-406eb9972ac7',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_ab103419-00ad-4d66-bb53-406eb9972ac7&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;58&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import time,importlib
import aa

time.sleep(&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;&lt;span&gt;)
# importlib.reload(aa)
aa.func1()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;执行test.py&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;在20秒的等待时间里，修改aa.py中func1的内容，等待test.py的结果。&lt;/p&gt;
&lt;p&gt;打开importlib注释，重新测试&lt;/p&gt;
&lt;h3&gt;五、py文件区分两种用途：模块与脚本&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#编写好的一个python文件可以有两种用途：
    一：脚本，一个文件就是整个程序，用来被执行
    二：模块，文件中存放着一堆功能，用来被导入使用


#python为我们内置了全局变量__name__，
    当文件被当做脚本执行时：__name__ 等于&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;__main__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
    当文件被当做模块导入时：__name__等于模块名

#作用：用来控制.py文件在不同的应用场景下执行不同的逻辑
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; __name__ == &lt;span&gt;'&lt;/span&gt;&lt;span&gt;__main__&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('8af27c12-e8b6-49da-ac9c-5600b5dd8915')&quot; readability=&quot;37&quot;&gt;&lt;img id=&quot;code_img_closed_8af27c12-e8b6-49da-ac9c-5600b5dd8915&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_8af27c12-e8b6-49da-ac9c-5600b5dd8915&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('8af27c12-e8b6-49da-ac9c-5600b5dd8915',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_8af27c12-e8b6-49da-ac9c-5600b5dd8915&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;69&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#fib.py

def fib(n):    # write Fibonacci series up to n
    a, b &lt;/span&gt;= &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;1&lt;/span&gt;
    &lt;span&gt;while&lt;/span&gt; b &amp;lt;&lt;span&gt; n:
        print(b, end&lt;/span&gt;=&lt;span&gt;'&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
        a, b &lt;/span&gt;= b, a+&lt;span&gt;b
    print()

def fib2(n):   # &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; Fibonacci series up to n
    result &lt;/span&gt;=&lt;span&gt; []
    a, b &lt;/span&gt;= &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;1&lt;/span&gt;
    &lt;span&gt;while&lt;/span&gt; b &amp;lt;&lt;span&gt; n:
        result.append(b)
        a, b &lt;/span&gt;= b, a+&lt;span&gt;b
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; result

&lt;/span&gt;&lt;span&gt;if&lt;/span&gt; __name__ == &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;__main__&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;:
    import sys
    fib(&lt;/span&gt;&lt;span&gt;int&lt;/span&gt;(sys.argv[&lt;span&gt;1&lt;/span&gt;&lt;span&gt;]))


#执行：python fib.py &lt;/span&gt;&amp;lt;arguments&amp;gt;&lt;span&gt;
python fib.py &lt;/span&gt;&lt;span&gt;50&lt;/span&gt; #在命令行
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;h3&gt;六、模块搜索路径&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;模块的查找顺序是：内存中已经加载的模块-&amp;gt;内置模块-&amp;gt;sys.path路径中包含的模块&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('3c9d01a8-a86a-4cb1-af82-efcf9d74e66d')&quot; readability=&quot;35&quot;&gt;&lt;img id=&quot;code_img_closed_3c9d01a8-a86a-4cb1-af82-efcf9d74e66d&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_3c9d01a8-a86a-4cb1-af82-efcf9d74e66d&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('3c9d01a8-a86a-4cb1-af82-efcf9d74e66d',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_3c9d01a8-a86a-4cb1-af82-efcf9d74e66d&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;65&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#模块的查找顺序
&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;、在第一次导入某个模块时（比如spam），会先检查该模块是否已经被加载到内存中（当前执行文件的名称空间对应的内存），如果有则直接引用
    ps：python解释器在启动时会自动加载一些模块到内存中，可以使用sys.modules查看
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;、如果没有，解释器则会查找同名的内建模块
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt;、如果还没有找到就从sys.path给出的目录列表中依次寻找spam.py文件。


#sys.path的初始化的值来自于：
The directory containing the input script (or the current directory when no file &lt;/span&gt;&lt;span&gt;is&lt;/span&gt;&lt;span&gt; specified).
PYTHONPATH (a list of directory names, with the same syntax &lt;/span&gt;&lt;span&gt;as&lt;/span&gt;&lt;span&gt; the shell variable PATH).
The installation&lt;/span&gt;-dependent &lt;span&gt;default&lt;/span&gt;&lt;span&gt;.

#需要特别注意的是：我们自定义的模块名不应该与系统内置模块重名。虽然每次都说，但是仍然会有人不停的犯错。 

#在初始化后，python程序可以修改sys.path,路径放到前面的优先于标准库被加载。
&lt;/span&gt;&lt;span&gt;1&lt;/span&gt; &amp;gt;&amp;gt;&amp;gt;&lt;span&gt; import sys
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; &amp;gt;&amp;gt;&amp;gt; sys.path.append(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/a/b/c/d&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; &amp;gt;&amp;gt;&amp;gt; sys.path.insert(&lt;span&gt;0&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/x/y/z&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;) #排在前的目录，优先被搜索
注意：搜索时按照sys.path中从左到右的顺序查找，位于前的优先被查找，sys.path中还可能包含.zip归档文件和.egg文件，python会把.zip归档文件当成一个目录去处理，

#首先制作归档文件：zip module.zip foo.py bar.py 
import sys
sys.path.append(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;module.zip&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
import foo,bar

#也可以使用zip中目录结构的具体位置
sys.path.append(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;module.zip/lib/python&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)


#windows下的路径不加r开头，会语法错误
sys.path.insert(&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;,r&lt;span&gt;'&lt;/span&gt;&lt;span&gt;C:\Users\Administrator\PycharmProjects\a&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
 

#至于.egg文件是由setuptools创建的包，这是按照第三方python库和扩展时使用的一种常见格式，.egg文件实际上只是添加了额外元数据(如版本号，依赖项等)的.zip文件。

#需要强调的一点是：只能从.zip文件中导入.py，.pyc等文件。使用C编写的共享库和扩展块无法直接从.zip文件中加载（此时setuptools等打包系统有时能提供一种规避方法），且从.zip中加载文件不会创建.pyc或者.pyo文件，因此一定要事先创建他们，来避免加载模块是性能下降。&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;详细的&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;官方解释：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
#官网链接：https:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;docs.python.org/3/tutorial/modules.html#the-module-search-path&lt;/span&gt;
&lt;span&gt;搜索路径：
当一个命名为spam的模块被导入时
    解释器首先会从内建模块中寻找该名字
    找不到，则去sys.path中找该名字

sys.path从以下位置初始化
    &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt; 执行文件所在的当前目录
    &lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt; PTYHONPATH（包含一系列目录名，与shell变量PATH语法一样）
    &lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt; 依赖安装时默认指定的

注意：在支持软连接的文件系统中，执行脚本所在的目录是在软连接之后被计算的，换句话说，包含软连接的目录不会被添加到模块的搜索路径中

在初始化后，我们也可以在python程序中修改sys.path,执行文件所在的路径默认是sys.path的第一个目录，在所有标准库路径的前面。这意味着，当前目录是优先于标准库目录的，需要强调的是：我们自定义的模块名不要跟python标准库的模块名重复，除非你是故意的，傻叉。&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt; 七、编译Python文件(了解)&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
为了提高加载模块的速度，强调强调强调：提高的是加载速度而绝非运行速度。python解释器会在__pycache__目录中下缓存每个模块编译后的版本，格式为：module.version.pyc。通常会包含python的版本号。例如，在CPython3.3版本下，spam.py模块会被缓存成__pycache__/spam.cpython-&lt;span&gt;33&lt;/span&gt;&lt;span&gt;.pyc。这种命名规范保证了编译后的结果多版本共存。

Python检查源文件的修改时间与编译的版本进行对比，如果过期就需要重新编译。这是完全自动的过程。并且编译的模块是平台独立的，所以相同的库可以在不同的架构的系统之间共享，即pyc使一种跨平台的字节码，类似于JAVA火.NET,是由python虚拟机来执行的，但是pyc的内容跟python的版本相关，不同的版本编译后的pyc文件不同，&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;.5编译的pyc文件不能到3.5上执行，并且pyc文件是可以反编译的，因而它的出现仅仅是用来提升模块的加载速度的，不是用来加密的。
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('93997971-9530-4b62-b30b-ae677bb63730')&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_93997971-9530-4b62-b30b-ae677bb63730&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_93997971-9530-4b62-b30b-ae677bb63730&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('93997971-9530-4b62-b30b-ae677bb63730',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_93997971-9530-4b62-b30b-ae677bb63730&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#python解释器在以下两种情况下不检测缓存
#&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt; 如果是在命令行中被直接导入模块，则按照这种方式，每次导入都会重新编译，并且不会存储编译后的结果（python3.3以前的版本应该是这样）
    python &lt;/span&gt;-&lt;span&gt;m spam.py

#&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt; 如果源文件不存在，那么缓存的结果也不会被使用，如果想在没有源文件的情况下来使用编译后的结果，则编译后的结果必须在源目录下
sh&lt;/span&gt;-&lt;span&gt;3.2&lt;/span&gt;&lt;span&gt;# ls
__pycache__ spam.py
sh&lt;/span&gt;-&lt;span&gt;3.2&lt;/span&gt;# rm -&lt;span&gt;rf spam.py 
sh&lt;/span&gt;-&lt;span&gt;3.2&lt;/span&gt;# mv __pycache__/spam.cpython-&lt;span&gt;36&lt;/span&gt;.pyc ./&lt;span&gt;spam.pyc
sh&lt;/span&gt;-&lt;span&gt;3.2&lt;/span&gt;&lt;span&gt;# python3 spam.pyc 
spam
 

#提示：
&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;.模块名区分大小写，foo.py与FOO.py代表的是两个模块
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;.你可以使用-O或者-&lt;span&gt;OO转换python命令来减少编译模块的大小
    &lt;/span&gt;-&lt;span&gt;O转换会帮你去掉assert语句
    &lt;/span&gt;-&lt;span&gt;OO转换会帮你去掉assert语句和__doc__文档字符串
    由于一些程序可能依赖于assert语句或文档字符串，你应该在在确认需要
    的情况下使用这些选项。
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt;.在速度上从.pyc文件中读指令来执行不会比从.py文件中读指令执行更快，只有在模块被加载时，.pyc文件才是更快的

&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;&lt;span&gt;.只有使用import语句是才将文件自动编译为.pyc文件，在命令行或标准输入中指定运行脚本则不会生成这类文件，因而我们可以使用compieall模块为一个目录中的所有模块创建.pyc文件

模块可以作为一个脚本（使用python &lt;/span&gt;-&lt;span&gt;m compileall）编译Python源  
python &lt;/span&gt;-m compileall /&lt;span&gt;module_directory 递归着编译
如果使用python &lt;/span&gt;-O -m compileall /module_directory -&lt;span&gt;l则只一层
  
命令行里使用compile()函数时，自动使用python &lt;/span&gt;-O -&lt;span&gt;m compileall
  
详见：https:&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;docs.python.org/3/library/compileall.html#module-compileall&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;详细的&lt;/span&gt;&lt;/div&gt;
&lt;h3&gt;八、包介绍&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;
&lt;h4&gt;什么是包？&lt;/h4&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#官网解释
Packages are a way of structuring Python’s module &lt;/span&gt;&lt;span&gt;namespace&lt;/span&gt; by &lt;span&gt;using&lt;/span&gt;&lt;span&gt; “dotted module names”
包是一种通过使用‘.模块名’来组织python模块名称空间的方式。

#具体的：包就是一个包含有__init__.py文件的文件夹，所以其实我们创建包的目的就是为了用文件夹将文件&lt;/span&gt;/&lt;span&gt;模块组织起来

#需要强调的是：
　　&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;. 在python3中，即使包下没有__init__.py文件，import 包仍然不会报错，而在python2中，包下一定要有该文件，否则import 包报错

　　&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;. 创建包的目的不是为了运行，而是被导入使用，记住，包只是模块的一种形式而已，包的本质就是一种模块
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;
&lt;h4&gt; 为何要使用包&lt;/h4&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;包的本质就是一个文件夹，那么文件夹的功能就是将文件组织起来
随着功能越写越多，我们无法将所有功能都放到一个文件中，于是我们使用模块去组织功能，而随着模块越来越多，我们就需要用文件夹将模块文件组织起来，以此来提高程序的结构性和可维护性&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;
&lt;h4&gt;注意事项&lt;/h4&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
#&lt;span&gt;1&lt;/span&gt;&lt;span&gt;、关于相关的导入语句分为import和from ... import ...两种，但是无论那种，无论在什么位置，在导入时带点的，点的左边都必须是一个包，否则非法。可以带有一连串的点，如item.subitem.subsubitem,但都必须遵循这个原则。但对于导入后，在使用时就没有这种限制了，点的左边可以是包,模块，函数，类(它们都可以用点的方式调用自己的属性)。

#&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;、import导入文件时，产生名称空间中的名字来源于文件，import 包，产生的名称空间的名字同样来源于文件，即包下的__init__.py，导入包本质就是在导入该文件

#&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;、包A和包B下有同名模块也不会冲突，如A.a与B.a来自俩个命名空间
&lt;/pre&gt;&lt;/div&gt;

</description>
<pubDate>Tue, 03 Apr 2018 07:28:00 +0000</pubDate>
<dc:creator>1024python</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/zzzhfo/p/8708758.html</dc:identifier>
</item>
<item>
<title>ArcGIS地图打印那些事 - 猴妹</title>
<link>http://www.cnblogs.com/angelapaq/p/8708726.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/angelapaq/p/8708726.html</guid>
<description>&lt;p&gt;　　记录了通过ArcGIS的PringTask进行地图打印，以及借助html2canvas实现屏幕截图的方法。两个方法各有适用的情景。过程中涉及的相关资源和问题给出链接，自行查看。&lt;/p&gt;
&lt;p&gt;1.需求背景&lt;/p&gt;
&lt;p&gt;　　地图打印，这是地图应用系统的基本工具了。多数使用者都希望能够将地图，连带着查询结果、统计结果以及自己绘制的各种图形输出，将其保存到本地，以供他用。本文描述两类情况：一类是通过ArcGIS Server发布的地图服务，一类是调用其他数据源的地图切片形成的地图。&lt;/p&gt;
&lt;p&gt;2.通过ArcGIS Server发布的地图服务&lt;/p&gt;
&lt;p&gt;　　这个网上很多例子啦，官方API也有详细例子。上个链接：&lt;a href=&quot;https://developers.arcgis.com/javascript/3/jssamples/#search/PrintTask&quot;&gt;https://developers.arcgis.com/javascript/3/jssamples/#search/PrintTask&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;　　这个的思路就是通过printTask执行一个打印任务。截一段代码给大伙看看：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;43&quot;&gt;
&lt;pre class=&quot;brush:javascript;gutter:true;&quot;&gt;
arcgisPrint=function(){
    var printTask = new PrintTask(&quot;http://172.28.1.131:6080/arcgis/rest/services/Utilities/PrintingTools/GPServer/Export%20Web%20Map%20Task&quot;);
    var template = new PrintTemplate();
    
    template.layoutOptions = {
        &quot;authorText&quot;: &quot;paq&quot;,
        &quot;copyrightText&quot;: &quot;copyright info here&quot;,
        &quot;legendLayers&quot;: [],
        &quot;titleText&quot;: &quot;Pool Permits&quot;,
        &quot;scalebarUnit&quot;: &quot;Miles&quot;
    };
    template.exportOptions = {
        width: 800,
        height: 600,
        dpi: Number(90)
    };
    template.format = &quot;png32&quot;;
    template.layout = &quot;MAP_ONLY&quot;;
    template.preserveScale = false;
    var params = new PrintParameters();
    params.map = map;
    params.template = template;
    printTask.execute(params, function (evt) {
        window.open(evt.url, &quot;_blank&quot;);
    });
};
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　这种方法的打印对于ArcGIS Server发布的服务来讲方便好用，但是如果是调用其他地方的切片（比如通过继承WebTiledLayer调用天地图、百度地图），那么输出的会是空白。如图，底图是天地图，中国范围内叠加了一个MapServer方便区别：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/820110/201804/820110-20180403151442151-1586192871.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　用PrintTask打印出来是这个样子，底图天地图是空白的：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/820110/201804/820110-20180403151511501-1063305583.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; /* *题外话：&lt;/p&gt;
&lt;p&gt;      *如何通过ArcGIS JS API调用百度地图和天地图自行百度，提供几个链接：&lt;/p&gt;
&lt;p&gt;      *&lt;a href=&quot;http://www.cnblogs.com/angelapaq/p/7595831.html&quot;&gt;http://www.cnblogs.com/angelapaq/p/7595831.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;    *&lt;a href=&quot;https://blog.csdn.net/oldmonkeyyu_s/article/details/53710779&quot;&gt;https://blog.csdn.net/oldmonkeyyu_s/article/details/53710779&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;*总结调用切片三点：确定好级别、分辨率、比例尺；调整好图片大小、切图原点；把行列号和层级号拼成能够访问的URL，这些做好了，不管百度谷歌还是高德超图都是一个道理。&lt;/p&gt;
&lt;p&gt;**/&lt;/p&gt;
&lt;p&gt;3.借助html2canvas实现屏幕截图&lt;/p&gt;
&lt;p&gt;　　思考之后，决定换方法，不用ArcGIS提供的方法，转向通用的屏幕输出，网上有很多关于html2canvas截图插件的使用，我们也拿来一用。&lt;/p&gt;
&lt;p&gt;　　html2canvas官方网站: &lt;a href=&quot;http://html2canvas.hertzen.com/&quot;&gt;http://html2canvas.hertzen.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;　　这个插件的使用详情可自行百度，我这里贴出自己的代码，大致流程是：确定截图区域，克隆一份，把不需要截图的dom移除，调用插件把html片段转成canvas，输出。&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;43&quot;&gt;
&lt;pre class=&quot;brush:javascript;gutter:true;&quot;&gt;
canvasPrint=function () {
    var targetDom = $(&quot;#map&quot;);
    //克隆截图区域
    var copyDom = targetDom.clone();
    copyDom.width(targetDom.width() + &quot;px&quot;);
    copyDom.height(targetDom.height() + &quot;px&quot;);
    copyDom.attr(&quot;id&quot;, &quot;copyDom&quot;);
    $(&quot;body&quot;).append(copyDom);
    //移除不需要截图的区域
    $(&quot;.base-map&quot;).remove();

    var pathName = document.location.pathname;
    var ctxPath = pathName.substring(1, pathName.substr(1).indexOf('/') + 1);
    html2canvas(copyDom[0], {
        useCORS: true,
        imageTimeout:0
        //, proxy: &quot;/&quot; + ctxPath + &quot;/proxy/proxyScreenShot&quot;
    }).then(function (canvas) {
        var url = canvas.toDataURL();
        //创建下载a标签
        var a = document.createElement(&quot;a&quot;);
        a.setAttribute(&quot;id&quot;, &quot;download&quot;);
        document.body.appendChild(a);
        //以下代码为下载此图片功能
        var triggerDownload = $(&quot;#download&quot;).attr(&quot;href&quot;, url).attr(&quot;download&quot;, &quot;img.png&quot;);
        triggerDownload[0].click();
        //移除下载a标签
        document.body.removeChild(a);
        //克隆DOM删除
        copyDom.remove();
    });
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　&lt;span&gt;按理说，这样就可以输出了，奈何我们的那些个小切片，不在一个域，跨域了，跨域了。找了各种方法，发现通过代理访问比较靠谱。以下是操作步骤：&lt;/span&gt; &lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;①&lt;span&gt;  &lt;/span&gt;&lt;/span&gt; &lt;span&gt;跨域，首先想到&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;ArcGIS&lt;/span&gt;&lt;span&gt;提供的跨域解决方法，详情戳链接，参照这个方法进行配置即可：&lt;/span&gt; &lt;/p&gt;
&lt;p class=&quot;MsoListParagraph&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;a href=&quot;https://blog.csdn.net/wpz0713/article/details/50245041&quot;&gt;https://blog.csdn.net/wpz0713/article/details/50245041&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;②  在继承&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;WebTiledLayer&lt;/span&gt;&lt;span&gt;的&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;getTileUrl&lt;/span&gt;&lt;span&gt;方法时，返回图片&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;URL&lt;/span&gt;&lt;span&gt;前加上代理地址，例如：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;37&quot;&gt;
&lt;pre class=&quot;brush:javascript;gutter:true;&quot;&gt;
getTileUrl: function (level, row, col) {
    return &quot;http://192.168.0.117:8080/Java/proxy.jsp?&quot;+&quot;http://t&quot; + row % 8 + &quot;.tianditu.cn/cva_c/wmts?SERVICE=WMTS&amp;amp;REQUEST=GetTile&amp;amp;VERSION=1.0.0&amp;amp;LAYER=cva&amp;amp;STYLE=default&amp;amp;TILEMATRIXSET=c&amp;amp;TILEMATRIX=&quot; + level + &quot;&amp;amp;TILEROW=&quot; + row + &quot;&amp;amp;TILECOL=&quot; + col + &quot;&amp;amp;FORMAT=tiles&quot;;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　&lt;span lang=&quot;EN-US&quot;&gt; &lt;/span&gt; &lt;span&gt;现在来看看结果是什么：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/820110/201804/820110-20180403151841334-1084579206.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;　　看来，这个跨域方法并没有达到我们想要的效果，那么就改造吧，仔细看跨域的那个proxy.jsp，在fetchAndPassBackToClient方法内190行添加以下一行代码，允许跨域。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;clientResponse.setHeader(&quot;Access-Control-Allow-Origin&quot;,&quot;*&quot;)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　好了，大功告成，下图是截屏输出的图片：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/820110/201804/820110-20180403151917691-1952328177.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　另外，在简单补一补跨域和代理的问题：&lt;a href=&quot;https://www.cnblogs.com/fanyx/p/5775939.html&quot;&gt;https://www.cnblogs.com/fanyx/p/5775939.html&lt;/a&gt;&lt;/p&gt;

</description>
<pubDate>Tue, 03 Apr 2018 07:24:00 +0000</pubDate>
<dc:creator>猴妹</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/angelapaq/p/8708726.html</dc:identifier>
</item>
<item>
<title>RESTful三问 - 欣欣念念</title>
<link>http://www.cnblogs.com/xxnn/p/8696864.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/xxnn/p/8696864.html</guid>
<description>&lt;p&gt;&lt;span&gt;我觉得学习一个技术，其实就是要弄明白三件事情：是什么（what），为什么（why），怎么用（how）。正是所谓的三W方法。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;所以打算总结一个“三问”系列。为了自己学习，也分享给别人。&lt;/span&gt;&lt;/p&gt;

&lt;div readability=&quot;31.141522988506&quot;&gt;
&lt;p&gt;REST是&lt;em&gt;REpresentational State Transfer&lt;/em&gt;的缩写。但是representational state transfer仍然很难理解。直译的话一般译作表述性状态转移。什么鬼？&lt;/p&gt;
&lt;p&gt;其实是因为前面主语被去掉了，应该是Resource Representational State Transfer。直译的话，我觉得可以译作“&lt;strong&gt;具象化的资源状态转换&lt;/strong&gt;”。&lt;/p&gt;
&lt;p&gt;这只是我的个人理解。因为这个本来就是老外的晦涩难懂的论文中的词汇，并没有一个准确的翻译。&lt;/p&gt;
&lt;p&gt;那么什么是具象化的资源状态转换呢？&lt;br/&gt;Resource：资源，即数据。网络上的所以数据都可以被看做是资源，并且能用一个唯一的URL表示。比如一条用户信息数据，一张图片，一个文件等等；&lt;br/&gt;Representational：具象化的。有人认为这个词是某种表现形式，比如用JSON，XML，JPEG等来表示资源。我觉得理解成具象化的可能更好一点，就是指HTTP中的具体动词方法：GET，POST，PUT，PATCH，DELETE等等；&lt;br/&gt;State Transfer：状态转换。transfer一般是翻译成转移，但是我觉得叫“转换”在这里更贴切。状态转换就是指资源被改变，比如更新操作，删除操作。其实我也觉得这样翻译挺牵强的，什么嘛还状态转换。。。&lt;/p&gt;
&lt;div readability=&quot;8.7810218978102&quot;&gt;总的来说就是对于网络上的、通过URL表示的资源，我们通过具象化的HTTP方法GET、POST、DELETE等等来操作，改变资源的状态。&lt;br/&gt;如果你还是没看懂（应该是没有），那可以自行参考大神Roy Fielding的毕业论文。REST就是他提出的。这哥们参与设计HTTP协议，也是Apache Web Server项目的co-founder。&lt;br/&gt;&lt;/div&gt;

&lt;p&gt;怎么样，看完是不是更懵了呢？&lt;/p&gt;
&lt;p&gt;没关系，一句话理解就是：&lt;strong&gt;在HTTP请求中，用URL定位资源，用HTTP动词（GET,POST,PUT,PATCH,&lt;/strong&gt;DELETE）描述对资源进行什么操作。&lt;/p&gt;
&lt;p&gt;符合这种设计风格的架构设计，我们就称之为RESTful风格的架构。&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;span&gt;首先要说明的一点就是，RESTful是一种设计风格，不是指导思想，也不是最佳实践。只是有些情况下选用符合RESTful的架构确实更好一些。不吹不黑。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;现在的网络时代，技术飞速发展。SOA啦，Web Service啦，微服务啦，各种概念各种思想层出不穷。客户端也是浏览器，Android，iOS等都五花八门。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;那么在前后端分离的思想下，一般我们都是设计基于 HTTP API 的服务。&lt;/span&gt;&lt;span&gt;这样的好处是什么呢？当然是一套API各种客户端随便用啦。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;设计API的时候，我们一般有两种方法：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;一种是只要用 GET 请求和 POST 请求就足够了，把操作放在URL上。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;一种是RESTful的方式，URL只表示资源，用HTTP中不同的请求方法代表不同的操作。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;假设有一类资源 ResourceXYZ ，对其有增删查改的操作。 如果只使用 GET POST 之类的设计方式，那么很可能会设计以下的请求接口：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;POST .../addResourceXYZ //新增资源
POST .../delResourceXYZ  //删除资源
GET .../getResourceXYZ?resourceId=resourceId  //获取指定ID的资源
POST .../updateResourceXYZ  //更新资源&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果按照 RESTful 的 设计方式，很可能会设计以下的请求接口：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;POST .../ResourceXYZs  //新增资源
DELETE .../ResourceXYZ/{resourceId}  //删除资源
GET .../ResourceXYZ/{resourceId}  //获取指定ID的资源
PUT .../ResourceXYZ/{resourceId}  //更新资源&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;那么使用RESTful风格有什么好处呢？&lt;/p&gt;
&lt;p&gt;现在假设，客户端要获取该资源，其 ID 为 resourceId 。 如果成功，那么一切都好说。 如果失败， Restful 的处理方式是，通过 HTTP status 返回错误码来表示原因，例如 404 表示该资源不存在。&lt;/p&gt;
&lt;p&gt;那么只用 GET POST 两种方法的方式呢？ 响应请求&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
GET .../getResourceXYZ?resourceId=resourceId
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;的时候能不能也用 404 呢？&lt;/p&gt;
&lt;p&gt;按照 404 的语义，响应 404 是不对的： 因为客户端请求的 URL 实际上是正确的，只是对应的参数没有找到对应的结果。很多时候，就只能靠响应 200 然后返回空数据或者空对象来处理了。例如 Content-type 为 application/json 时，可以返回 {} 或者&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;{
    &quot;error&quot;: &quot;not found&quot;,
    &quot;code&quot;: 404
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这样就会要求客户端，必须处理 HTTP 回复的具体内容，而不能只处理头部。 那么客户端要怎么处理这个 json 呢？要先解析 json ，然后尝试区分这是一个资源的内容，还是一个错误提示。&lt;/p&gt;
&lt;p&gt;这样前端的人就比较容易骂街了。&lt;/p&gt;


&lt;p&gt;我觉得这篇写的很详细很好了，这里全文转载&lt;a href=&quot;http://www.ruanyifeng.com/blog/2014/05/restful_api&quot; target=&quot;_blank&quot;&gt;阮一峰的RESTful API 设计指南&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;以下为转载开始：&lt;/p&gt;
&lt;h2&gt;一、协议&lt;/h2&gt;
&lt;p&gt;API与用户的通信协议，总是使用&lt;a href=&quot;http://www.ruanyifeng.com/blog/2014/02/ssl_tls.html&quot; target=&quot;_blank&quot;&gt;HTTPs协议&lt;/a&gt;。&lt;/p&gt;
&lt;h2&gt;二、域名&lt;/h2&gt;
&lt;p&gt;应该尽量将API部署在专用域名之下。&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre class=&quot; language-javascript&quot;&gt;
&lt;code class=&quot; language-javascript&quot;&gt;
https&lt;span class=&quot;token punctuation&quot;&gt;:&lt;span class=&quot;token operator&quot;&gt;/&lt;span class=&quot;token operator&quot;&gt;/api&lt;span class=&quot;token punctuation&quot;&gt;.example&lt;span class=&quot;token punctuation&quot;&gt;.com
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/blockquote&gt;
&lt;p&gt;如果确定API很简单，不会有进一步扩展，可以考虑放在主域名下。&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre class=&quot; language-javascript&quot;&gt;
&lt;code class=&quot; language-javascript&quot;&gt;
https&lt;span class=&quot;token punctuation&quot;&gt;:&lt;span class=&quot;token operator&quot;&gt;/&lt;span class=&quot;token operator&quot;&gt;/example&lt;span class=&quot;token punctuation&quot;&gt;.org&lt;span class=&quot;token regex&quot;&gt;/api/
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/blockquote&gt;
&lt;h2&gt;三、版本（Versioning）&lt;/h2&gt;
&lt;p&gt;应该将API的版本号放入URL。&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;pre class=&quot; language-javascript&quot;&gt;
&lt;code class=&quot; language-javascript&quot;&gt;
https&lt;span class=&quot;token punctuation&quot;&gt;:&lt;span class=&quot;token operator&quot;&gt;/&lt;span class=&quot;token operator&quot;&gt;/api&lt;span class=&quot;token punctuation&quot;&gt;.example&lt;span class=&quot;token punctuation&quot;&gt;.com&lt;span class=&quot;token regex&quot;&gt;/v1/
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/blockquote&gt;
&lt;p&gt;另一种做法是，将版本号放在HTTP头信息中，但不如放入URL方便和直观。&lt;a href=&quot;https://developer.github.com/v3/media/#request-specific-version&quot; target=&quot;_blank&quot;&gt;Github&lt;/a&gt;采用这种做法。&lt;/p&gt;
&lt;h2&gt;四、路径（Endpoint）&lt;/h2&gt;
&lt;p&gt;路径又称&quot;终点&quot;（endpoint），表示API的具体网址。&lt;/p&gt;
&lt;p&gt;在RESTful架构中，每个网址代表一种资源（resource），所以网址中不能有动词，只能有名词，而且所用的名词往往与数据库的表格名对应。一般来说，数据库中的表都是同种记录的&quot;集合&quot;（collection），所以API中的名词也应该使用复数。&lt;/p&gt;
&lt;p&gt;举例来说，有一个API提供动物园（zoo）的信息，还包括各种动物和雇员的信息，则它的路径应该设计成下面这样。&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;&lt;li&gt;https://api.example.com/v1/zoos&lt;/li&gt;
&lt;li&gt;https://api.example.com/v1/animals&lt;/li&gt;
&lt;li&gt;https://api.example.com/v1/employees&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;h2&gt;五、HTTP动词&lt;/h2&gt;
&lt;p&gt;对于资源的具体操作类型，由HTTP动词表示。&lt;/p&gt;
&lt;p&gt;常用的HTTP动词有下面五个（括号里是对应的SQL命令）。&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;&lt;li&gt;GET（SELECT）：从服务器取出资源（一项或多项）。&lt;/li&gt;
&lt;li&gt;POST（CREATE）：在服务器新建一个资源。&lt;/li&gt;
&lt;li&gt;PUT（UPDATE）：在服务器更新资源（客户端提供改变后的完整资源）。&lt;/li&gt;
&lt;li&gt;PATCH（UPDATE）：在服务器更新资源（客户端提供改变的属性）。&lt;/li&gt;
&lt;li&gt;DELETE（DELETE）：从服务器删除资源。&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;p&gt;还有两个不常用的HTTP动词。&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;&lt;li&gt;HEAD：获取资源的元数据。&lt;/li&gt;
&lt;li&gt;OPTIONS：获取信息，关于资源的哪些属性是客户端可以改变的。&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;p&gt;下面是一些例子。&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;&lt;li&gt;GET /zoos：列出所有动物园&lt;/li&gt;
&lt;li&gt;POST /zoos：新建一个动物园&lt;/li&gt;
&lt;li&gt;GET /zoos/ID：获取某个指定动物园的信息&lt;/li&gt;
&lt;li&gt;PUT /zoos/ID：更新某个指定动物园的信息（提供该动物园的全部信息）&lt;/li&gt;
&lt;li&gt;PATCH /zoos/ID：更新某个指定动物园的信息（提供该动物园的部分信息）&lt;/li&gt;
&lt;li&gt;DELETE /zoos/ID：删除某个动物园&lt;/li&gt;
&lt;li&gt;GET /zoos/ID/animals：列出某个指定动物园的所有动物&lt;/li&gt;
&lt;li&gt;DELETE /zoos/ID/animals/ID：删除某个指定动物园的指定动物&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;h2&gt;六、过滤信息（Filtering）&lt;/h2&gt;
&lt;p&gt;如果记录数量很多，服务器不可能都将它们返回给用户。API应该提供参数，过滤返回结果。&lt;/p&gt;
&lt;p&gt;下面是一些常见的参数。&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;&lt;li&gt;?limit=10：指定返回记录的数量&lt;/li&gt;
&lt;li&gt;?offset=10：指定返回记录的开始位置。&lt;/li&gt;
&lt;li&gt;?page=2&amp;amp;per_page=100：指定第几页，以及每页的记录数。&lt;/li&gt;
&lt;li&gt;?sortby=name&amp;amp;order=asc：指定返回结果按照哪个属性排序，以及排序顺序。&lt;/li&gt;
&lt;li&gt;?animal_type_id=1：指定筛选条件&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;p&gt;参数的设计允许存在冗余，即允许API路径和URL参数偶尔有重复。比如，GET /zoo/ID/animals 与 GET /animals?zoo_id=ID 的含义是相同的。&lt;/p&gt;
&lt;h2&gt;七、状态码（Status Codes）&lt;/h2&gt;
&lt;p&gt;服务器向用户返回的状态码和提示信息，常见的有以下一些（方括号中是该状态码对应的HTTP动词）。&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;&lt;li&gt;200 OK - [GET]：服务器成功返回用户请求的数据，该操作是幂等的（Idempotent）。&lt;/li&gt;
&lt;li&gt;201 CREATED - [POST/PUT/PATCH]：用户新建或修改数据成功。&lt;/li&gt;
&lt;li&gt;202 Accepted - [*]：表示一个请求已经进入后台排队（异步任务）&lt;/li&gt;
&lt;li&gt;204 NO CONTENT - [DELETE]：用户删除数据成功。&lt;/li&gt;
&lt;li&gt;400 INVALID REQUEST - [POST/PUT/PATCH]：用户发出的请求有错误，服务器没有进行新建或修改数据的操作，该操作是幂等的。&lt;/li&gt;
&lt;li&gt;401 Unauthorized - [*]：表示用户没有权限（令牌、用户名、密码错误）。&lt;/li&gt;
&lt;li&gt;403 Forbidden - [*] 表示用户得到授权（与401错误相对），但是访问是被禁止的。&lt;/li&gt;
&lt;li&gt;404 NOT FOUND - [*]：用户发出的请求针对的是不存在的记录，服务器没有进行操作，该操作是幂等的。&lt;/li&gt;
&lt;li&gt;406 Not Acceptable - [GET]：用户请求的格式不可得（比如用户请求JSON格式，但是只有XML格式）。&lt;/li&gt;
&lt;li&gt;410 Gone -[GET]：用户请求的资源被永久删除，且不会再得到的。&lt;/li&gt;
&lt;li&gt;422 Unprocesable entity - [POST/PUT/PATCH] 当创建一个对象时，发生一个验证错误。&lt;/li&gt;
&lt;li&gt;500 INTERNAL SERVER ERROR - [*]：服务器发生错误，用户将无法判断发出的请求是否成功。&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;p&gt;状态码的完全列表参见&lt;a href=&quot;http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html&quot; target=&quot;_blank&quot;&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;h2&gt;八、错误处理（Error handling）&lt;/h2&gt;
&lt;p&gt;如果状态码是4xx，就应该向用户返回出错信息。一般来说，返回的信息中将error作为键名，出错信息作为键值即可。&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;pre class=&quot; language-javascript&quot;&gt;
&lt;code class=&quot; language-javascript&quot;&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{
    error&lt;span class=&quot;token punctuation&quot;&gt;: &lt;span class=&quot;token string&quot;&gt;&quot;Invalid API key&quot;
&lt;span class=&quot;token punctuation&quot;&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/blockquote&gt;
&lt;h2&gt;九、返回结果&lt;/h2&gt;
&lt;p&gt;针对不同操作，服务器向用户返回的结果应该符合以下规范。&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;&lt;li&gt;GET /collection：返回资源对象的列表（数组）&lt;/li&gt;
&lt;li&gt;GET /collection/resource：返回单个资源对象&lt;/li&gt;
&lt;li&gt;POST /collection：返回新生成的资源对象&lt;/li&gt;
&lt;li&gt;PUT /collection/resource：返回完整的资源对象&lt;/li&gt;
&lt;li&gt;PATCH /collection/resource：返回完整的资源对象&lt;/li&gt;
&lt;li&gt;DELETE /collection/resource：返回一个空文档&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;h2&gt;十、Hypermedia API&lt;/h2&gt;
&lt;p&gt;RESTful API最好做到Hypermedia，即返回结果中提供链接，连向其他API方法，使得用户不查文档，也知道下一步应该做什么。&lt;/p&gt;
&lt;p&gt;比如，当用户向api.example.com的根目录发出请求，会得到这样一个文档。&lt;/p&gt;
&lt;blockquote readability=&quot;6.0352941176471&quot;&gt;
&lt;pre class=&quot; language-javascript&quot;&gt;
&lt;code class=&quot; language-javascript&quot;&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;span class=&quot;token string&quot;&gt;&quot;link&quot;&lt;span class=&quot;token punctuation&quot;&gt;: &lt;span class=&quot;token punctuation&quot;&gt;{
  &lt;span class=&quot;token string&quot;&gt;&quot;rel&quot;&lt;span class=&quot;token punctuation&quot;&gt;:   &lt;span class=&quot;token string&quot;&gt;&quot;collection &lt;a class=&quot;token url-link&quot; href=&quot;https://www.example.com/zoos&quot;&gt;https://www.example.com/zoos&lt;/a&gt;&quot;&lt;span class=&quot;token punctuation&quot;&gt;,
  &lt;span class=&quot;token string&quot;&gt;&quot;href&quot;&lt;span class=&quot;token punctuation&quot;&gt;:  &lt;span class=&quot;token string&quot;&gt;&quot;&lt;a class=&quot;token url-link&quot; href=&quot;https://api.example.com/zoos&quot;&gt;https://api.example.com/zoos&lt;/a&gt;&quot;&lt;span class=&quot;token punctuation&quot;&gt;,
  &lt;span class=&quot;token string&quot;&gt;&quot;title&quot;&lt;span class=&quot;token punctuation&quot;&gt;: &lt;span class=&quot;token string&quot;&gt;&quot;List of zoos&quot;&lt;span class=&quot;token punctuation&quot;&gt;,
  &lt;span class=&quot;token string&quot;&gt;&quot;type&quot;&lt;span class=&quot;token punctuation&quot;&gt;:  &lt;span class=&quot;token string&quot;&gt;&quot;application/vnd.yourformat+json&quot;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;span class=&quot;token punctuation&quot;&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/blockquote&gt;
&lt;p&gt;上面代码表示，文档中有一个link属性，用户读取这个属性就知道下一步该调用什么API了。rel表示这个API与当前网址的关系（collection关系，并给出该collection的网址），href表示API的路径，title表示API的标题，type表示返回类型。&lt;/p&gt;
&lt;p&gt;Hypermedia API的设计被称为&lt;a href=&quot;http://en.wikipedia.org/wiki/HATEOAS&quot; target=&quot;_blank&quot;&gt;HATEOAS&lt;/a&gt;。Github的API就是这种设计，访问&lt;a href=&quot;https://api.github.com/&quot; target=&quot;_blank&quot;&gt;api.github.com&lt;/a&gt;会得到一个所有可用API的网址列表。&lt;/p&gt;
&lt;blockquote readability=&quot;3.5478260869565&quot;&gt;
&lt;pre class=&quot; language-javascript&quot;&gt;
&lt;code class=&quot; language-javascript&quot;&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{
  &lt;span class=&quot;token string&quot;&gt;&quot;current_user_url&quot;&lt;span class=&quot;token punctuation&quot;&gt;: &lt;span class=&quot;token string&quot;&gt;&quot;&lt;a class=&quot;token url-link&quot; href=&quot;https://api.github.com/user&quot;&gt;https://api.github.com/user&lt;/a&gt;&quot;&lt;span class=&quot;token punctuation&quot;&gt;,
  &lt;span class=&quot;token string&quot;&gt;&quot;authorizations_url&quot;&lt;span class=&quot;token punctuation&quot;&gt;: &lt;span class=&quot;token string&quot;&gt;&quot;&lt;a class=&quot;token url-link&quot; href=&quot;https://api.github.com/authorizations&quot;&gt;https://api.github.com/authorizations&lt;/a&gt;&quot;&lt;span class=&quot;token punctuation&quot;&gt;,
 &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/blockquote&gt;
&lt;p&gt;从上面可以看到，如果想获取当前用户的信息，应该去访问&lt;a href=&quot;https://api.github.com/user&quot; target=&quot;_blank&quot;&gt;api.github.com/user&lt;/a&gt;，然后就得到了下面结果。&lt;/p&gt;
&lt;blockquote readability=&quot;4.0625&quot;&gt;
&lt;pre class=&quot; language-javascript&quot;&gt;
&lt;code class=&quot; language-javascript&quot;&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{
  &lt;span class=&quot;token string&quot;&gt;&quot;message&quot;&lt;span class=&quot;token punctuation&quot;&gt;: &lt;span class=&quot;token string&quot;&gt;&quot;Requires authentication&quot;&lt;span class=&quot;token punctuation&quot;&gt;,
  &lt;span class=&quot;token string&quot;&gt;&quot;documentation_url&quot;&lt;span class=&quot;token punctuation&quot;&gt;: &lt;span class=&quot;token string&quot;&gt;&quot;&lt;a class=&quot;token url-link&quot; href=&quot;https://developer.github.com/v3&quot;&gt;https://developer.github.com/v3&lt;/a&gt;&quot;
&lt;span class=&quot;token punctuation&quot;&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/blockquote&gt;
&lt;p&gt;上面代码表示，服务器给出了提示信息，以及文档的网址。&lt;/p&gt;
&lt;h2&gt;十一、其他&lt;/h2&gt;
&lt;p&gt;（1）API的身份认证应该使用&lt;a href=&quot;http://www.ruanyifeng.com/blog/2014/05/oauth_2_0.html&quot; target=&quot;_blank&quot;&gt;OAuth 2.0&lt;/a&gt;框架。&lt;/p&gt;
&lt;p&gt;（2）服务器返回的数据格式，应该尽量使用JSON，避免使用XML。&lt;/p&gt;
&lt;p&gt;转载结束。&lt;/p&gt;

&lt;p&gt;支持RESTful的Java开发框架，有SpringMVC，Oracle的Jersey等。关于Jersey我还在学习，以后会写专门的文章来总结。&lt;/p&gt;

&lt;p&gt;&lt;span&gt;参考文章：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;知乎用户覃超的回答：&lt;a href=&quot;https://www.zhihu.com/question/28557115/answer/48094438&quot; target=&quot;_blank&quot;&gt;https://www.zhihu.com/question/28557115/answer/48094438&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;V2EX用户&lt;a href=&quot;https://www.v2ex.com/member/noli&quot;&gt;noli&lt;/a&gt;的文章：&lt;a href=&quot;https://www.v2ex.com/t/340607?p=2&quot; target=&quot;_blank&quot;&gt;https://www.v2ex.com/t/340607?p=2&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;阮一峰的博客：&lt;a href=&quot;http://www.ruanyifeng.com/blog/2014/05/restful_api&quot; target=&quot;_blank&quot;&gt;http://www.ruanyifeng.com/blog/2014/05/restful_api&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Tue, 03 Apr 2018 07:21:00 +0000</pubDate>
<dc:creator>欣欣念念</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/xxnn/p/8696864.html</dc:identifier>
</item>
<item>
<title>C# Unity游戏开发——Excel中的数据是如何到游戏中的 （四）2018.4.3更新 - 追峰人</title>
<link>http://www.cnblogs.com/fly-100/p/8707749.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/fly-100/p/8707749.html</guid>
<description>&lt;p&gt; 本帖是延续的：&lt;a href=&quot;http://www.cnblogs.com/fly-100/p/4557402.html&quot; target=&quot;_blank&quot;&gt;C# Unity游戏开发——Excel中的数据是如何到游戏中的 （三）&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;前言&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;最近项目不算太忙，终于有时间更新博客了。关于数据处理这个主题前面的（一）（二）（三）基本上算是一个完整的静态数据处理方案了。&lt;/p&gt;
&lt;p&gt;不过前几篇发布的时候是2015年，比较早了，随着这几年技术不断积累和进步，其实已经有更好的方案来处理数据了，不过对于前端存储的那几个M的数据，多点少点其实影响也不大。&lt;/p&gt;
&lt;p&gt;但是也不能就这样算了，毕竟技术的变化日新月异，还是要保持持续学习的心态。&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;虽然简单但却不易忽视&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;对于游戏中静态数据的处理，单纯的对于整个程序项目来说其实只是很小的一部分。写个读写工具，打个包，压个缩，加个密其实对于很&lt;/p&gt;
&lt;p&gt;多程序来说也不是难事。但是，我又要说但是了。但是，根据博主的个人经验来说，数据对于游戏的业务逻辑是非常底层的“逻辑”，对于&lt;/p&gt;
&lt;p&gt;后期的开发起到了一个基础的作用。主要体现在两个方面:&lt;/p&gt;
&lt;p&gt;1.业务逻辑角度的数据结构化。&lt;/p&gt;
&lt;p&gt;　　这点很关键，策划想要把自己大脑里的游戏玩法用数据表示出来，而这个表示过程其实是需要程序配合的，因为不可能每个策划&lt;/p&gt;
&lt;p&gt;　　都那么牛逼，然而现实情况也确实如此。因此，这部分要做的事就是，用数据抽象的思维把策划描述的游戏世界表示出来，最终&lt;/p&gt;
&lt;p&gt;　　体现就是“表格”。这些数据，其实就是游戏业务逻辑的“骨架”，后续的开发都是围绕着数据来做的，或者说被数据“支配”的。&lt;/p&gt;
&lt;p&gt;2.程序结构的设计。&lt;/p&gt;
&lt;p&gt;　　第一条说过了，“后续的开发都是围绕着数据来做的”，那么这些数据的使用频率必然会很高。那么，问题来了，如何设计这部分的程序结构会使开发效率和运行效率最优？单纯的创建一个类，把所有数据查询的方法都放里面？还是根据第一条抽象出来的“实体类”来组织数据，然后对数据做一些预处理，例如游戏运行先进行分类然后放到内存中等待使用？&lt;/p&gt;
&lt;p&gt;　　显然，后者更加高效，这也“静态数据处理虽然简单，但是也不容忽视”的理由。&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;最新的方案&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt; 前面也说了，技术是不断在变化的，我们也需要快速适应。之前的方案确实用了很长时间，也没什么问题。但是自己撸的代码总有几个疑问？这是最好的方案吗？和最好的方案差距有多大？&lt;/p&gt;
&lt;p&gt;带着这几个问题，在最近2年所做的项目中也对这方面做了一些工作：1，在最近的项目中使用了ScriptableObject的方式。2,开始了一个protobuf方式处理数据的开源项目。&lt;/p&gt;
&lt;p&gt;说起来惭愧，其实结果影响并不算很大，下面把这部分总结一下。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;方案一 : 使用Unity的ScriptableObject。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;　　做法就是每个表格生成的数据类都直接或者间接的继承自ScriptableObject类，打包的时候直接把所有表数据都生成一个对应类型的.asset文件。然后建一个总的Map类来存放所有asset的引用，当然这个Map类也必须继承自ScriptableObject，也生成对应的.asset文件。最终打包的时候，只打这个Map类的.asset文件，Unity会自动识别里面的依赖关系，将所有数据打包进bundle。&lt;/p&gt;
&lt;p&gt;实体类Hero&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;using&lt;/span&gt;&lt;span&gt; UnityEngine;
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Hero : ScriptableObject
{
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;&lt;span&gt; name;
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;&lt;span&gt; level;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Map类&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;using&lt;/span&gt;&lt;span&gt; UnityEngine;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Collections.Generic;
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Map : ScriptableObject
{
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; List&amp;lt;Hero&amp;gt; heroList = &lt;span&gt;new&lt;/span&gt; List&amp;lt;Hero&amp;gt;&lt;span&gt;();
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;最终在使用的时候也很方便：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
                AssetBundle bundle = AssetBundle.LoadFromFile(Application.streamingAssetsPath + &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/constance&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
                Map m_Constance &lt;/span&gt;= bundle.LoadAsset(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;constance&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;) &lt;span&gt;as&lt;/span&gt; Map;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;这种方式对Unity3D非常友好，使用起来也非常方便，但是缺点也是有的，下面来总结一下：&lt;/p&gt;
&lt;p&gt;优点：&lt;/p&gt;
&lt;p&gt;　　可以和预制产生依赖，prefab如果依赖了asset打包的时候也会打进去，减少了查找操作。&lt;/p&gt;
&lt;p&gt;　　可以直接用Unity API操作asset。省去了一部分序列化反序列化代码。&lt;/p&gt;
&lt;p&gt;　　可以直接用AssetBundle.LoadAsset() as Map;加载，省去了之前的反序列化代码。&lt;/p&gt;
&lt;p&gt;　　在Unty中选中asset可以直接在Inpector中看到数据。&lt;/p&gt;
&lt;p&gt;缺点：&lt;/p&gt;
&lt;p&gt;　　生成asset的时候会有大量的文件操作，速度慢。&lt;/p&gt;

&lt;p&gt;还有两个指标就是运行速度和存储空间。由于影响不大，没有做进一步测试。&lt;/p&gt;
&lt;p&gt;存储空间的话，我这里有个参考：6个Excel文件占用的pc上的磁盘空间是112k，最终打成AssetBundle是31k。&lt;/p&gt;

&lt;p&gt; &lt;strong&gt;方案二 : 使用protobuf&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; 　　&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　这种做法主要是通过google提供的&lt;a href=&quot;https://developers.google.com/protocol-buffers/&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;protobuf&lt;/span&gt;&lt;/a&gt;来序列化和反序列化数据，并且使用protoc生成目标语言的代码。工作流程如下图所示。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/524836/201804/524836-20180403142126952-1280125346.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; 　　把做法分成几部分来说：&lt;/p&gt;
&lt;p&gt;　　　　操作1，读取excel数据描述信息，通过excel数据描述信息生成.proto文件。&lt;/p&gt;
&lt;p&gt;　　　　操作2，使用protoc命令行生成本地代码，也就是你制作工具使用的语言代码。&lt;/p&gt;
&lt;p&gt;　　　　操作3，创建本地代码的类的实例。&lt;/p&gt;
&lt;p&gt;　　　　操作4，读取excel数据，并且将内容赋值给“操作3”创建的实例，最终使用protobuf API序列化。&lt;/p&gt;
&lt;p&gt;　　　　操作5，生成目标平台的代码。&lt;/p&gt;
&lt;p&gt;　　最终生成的二进制文件（.bytes）和目标代码会和程序一同发布，使用生成的目标代码解析生成的二进制数据。&lt;/p&gt;
&lt;p&gt;　　具体代码就不贴出了，下面是本人对&lt;strong&gt;方案二&lt;/strong&gt;开启的一个开源项目，用的是java+netbean8.2,目前已经完成大部分内容。&lt;/p&gt;
&lt;p&gt;　　有兴趣的同学可以看一下。我会一直更新。&lt;/p&gt;
&lt;p&gt;　　&lt;a href=&quot;https://github.com/superbig/GearDataExporter&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;&lt;span&gt;https://github.com/superbig/GearDataExporter&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;最后&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;　　如果你在游戏开发的静态数据处理方面还在犹豫，建议是：如果项目小可是试试ScriptableObject方式，应使用起来确实要方便一些。当然你也需要忍受数据导出时候的频繁的IO操作（当然其实你也可以开发一个增量导出的工具）。&lt;/p&gt;
&lt;p&gt;如果项目大，数据很多还是老老实实用protobuf，空间占用少，速度快。或者自己写。&lt;/p&gt;


&lt;p&gt;&lt;span&gt;版权声明：本文为博主原创文章，未经博主允许不得转载。 http://www.cnblogs.com/fly-100/p/8707749.html&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Tue, 03 Apr 2018 07:05:00 +0000</pubDate>
<dc:creator>追峰人</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/fly-100/p/8707749.html</dc:identifier>
</item>
<item>
<title>用.NET Core实现装饰模式和.NET Core的Stream简介 - solenovex</title>
<link>http://www.cnblogs.com/cgzl/p/8697949.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/cgzl/p/8697949.html</guid>
<description>
&lt;p&gt;该文章综合了几本书的内容.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/986268/201804/986268-20180402212547316-543147496.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;某咖啡店供应咖啡, 客户买咖啡的时候可以添加若干调味料, 最后要求算出总价钱.&lt;/p&gt;
&lt;p&gt;Beverage是所有咖啡饮料的抽象类, 里面的cost方法是抽象的. description变量在每个子类里面都需要设置(表示对咖啡的描述).&lt;/p&gt;
&lt;p&gt;每个子类实现cost方法, 表示咖啡的价格.&lt;/p&gt;
&lt;p&gt;除了这些类之外, 还有调味品:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/986268/201804/986268-20180402213009319-1934381189.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;问题是调味品太多了, 如果使用继承来做的话, 各种组合简直是类的爆炸.&lt;/p&gt;
&lt;p&gt;而且还有其他的问题, 如果牛奶的价格上涨了怎么办? 如果再加一种焦糖调料呢?&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/986268/201804/986268-20180402213823779-1139255217.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;父类里面有调味料的变量(bool), 并且在父类里面直接实现cost方法(通过是否有某种调味料来计算价格).&lt;/p&gt;
&lt;p&gt;子类override父类的cost方法, 但是也调用父类的cost方法, 这样就可以把子类这个咖啡的价格和父类里计算出来的调味料的价格加到一起算出最终的价格了.&lt;/p&gt;
&lt;p&gt;下面就是:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/986268/201804/986268-20180402214100987-1557458359.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;看起来不错, 那么, 问题来了:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;调味料价格变化的话就不得不修改现有代码了&lt;/li&gt;
&lt;li&gt;如果有新的调味料那么久必须在父类里面添加新的方法, 并且修改cost方法了.&lt;/li&gt;
&lt;li&gt;可能某些调味料根本不适用于某些咖啡&lt;/li&gt;
&lt;li&gt;如果某个客户想要两个摩卡(调味料)怎么办?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;类应该对扩展开放 而对修改关闭.&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;使用装饰模式, 我们可以购买一个咖啡, 并且在运行时使用调味料对它进行装饰.&lt;/p&gt;
&lt;p&gt;大约步骤如下:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;买某种咖啡&lt;/li&gt;
&lt;li&gt;使用mocha调味料装饰它&lt;/li&gt;
&lt;li&gt;使用whip调味料装饰它&lt;/li&gt;
&lt;li&gt;调用cost方法, 并且使用委托来计算调味料的总价格&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/986268/201804/986268-20180402214702696-2011753473.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/986268/201804/986268-20180402214719896-819884828.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;到目前我知道了这些:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;装饰器的父类和它所要装饰的对象的父类是一样的&lt;/li&gt;
&lt;li&gt;可以使用多个装饰器来装饰某对象&lt;/li&gt;
&lt;li&gt;既然装饰器和被装饰对象的父类是一样的, 那传递的时候就传递被装饰过的对象就好了.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;装饰器会在委托给它要装饰的对象之前和/或之后添加自己的行为以便来完成余下的工作&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;对象可以在任意时刻被装饰, 所以可以在运行时使用任意多个装饰器对对象进行装饰.&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;装饰模式定义&lt;/h2&gt;
&lt;p&gt; &lt;strong&gt;&lt;span&gt;动态的对某个对象进行扩展(附加额外的职责), 装饰器是除了继承之外的另外一种为对象扩展功能的方法&lt;/span&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;下面看看该模式的类图:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/986268/201804/986268-20180403061214224-89117111.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/986268/201804/986268-20180403061310678-729786480.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这个就很好理解了, 父类都是Beverage(饮料), 左边是四种具体实现的咖啡, 右边上面是装饰器的父类, 下面是具体的装饰器(调味料).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;这里需要注意的是, 装饰器和咖啡都继承于同一个父类只是因为需要它们的类型匹配而已, 并不是要继承行为&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Beverage:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; DecoratorPattern.Core
{
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;abstract&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Beverage 
    {
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;virtual&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; Description { &lt;span&gt;get&lt;/span&gt;; &lt;span&gt;protected&lt;/span&gt; &lt;span&gt;set&lt;/span&gt;; } = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Unknown Beverage&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
        
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;abstract&lt;/span&gt; &lt;span&gt;double&lt;/span&gt;&lt;span&gt; Cost();
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;CondimentDecorator:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; DecoratorPattern.Core
{
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;abstract&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; CondimentDecorator : Beverage
    {
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;abstract&lt;/span&gt; &lt;span&gt;override&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; Description { &lt;span&gt;get&lt;/span&gt;&lt;span&gt;; }
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Espresso 浓咖啡:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;using&lt;/span&gt;&lt;span&gt; DecoratorPattern.Core;

&lt;/span&gt;&lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; DecoratorPattern.Coffee
{
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Espresso : Beverage
    {
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; Espresso()
        {
            Description &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Espresso&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
        }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;override&lt;/span&gt; &lt;span&gt;double&lt;/span&gt;&lt;span&gt; Cost()
        {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;1.99&lt;/span&gt;&lt;span&gt;;
        }
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;HouseBlend:&lt;/p&gt;
&lt;div readability=&quot;7&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;using&lt;/span&gt;&lt;span&gt; DecoratorPattern.Core;

&lt;/span&gt;&lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; DecoratorPattern.Coffee
{
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; HouseBlend : Beverage
    {
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; HouseBlend()
        {
            Description &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;HouseBlend&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;override&lt;/span&gt; &lt;span&gt;double&lt;/span&gt;&lt;span&gt; Cost()
        {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; .&lt;span&gt;89&lt;/span&gt;&lt;span&gt;;
        }
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Mocha:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;using&lt;/span&gt;&lt;span&gt; DecoratorPattern.Core;

&lt;/span&gt;&lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; DecoratorPattern.Condiments
{
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Mocha : CondimentDecorator
    {
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;readonly&lt;/span&gt;&lt;span&gt; Beverage beverage;

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; Mocha(Beverage beverage) =&amp;gt; &lt;span&gt;this&lt;/span&gt;.beverage =&lt;span&gt; beverage;

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;override&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; Description =&amp;gt; $&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;{beverage.Description}, Mocha&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;override&lt;/span&gt; &lt;span&gt;double&lt;/span&gt;&lt;span&gt; Cost()
        {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; .&lt;span&gt;20&lt;/span&gt; +&lt;span&gt; beverage.Cost();
        }
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Whip:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;using&lt;/span&gt;&lt;span&gt; DecoratorPattern.Core;

&lt;/span&gt;&lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; DecoratorPattern.Condiments
{
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Whip : CondimentDecorator
    {
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;readonly&lt;/span&gt;&lt;span&gt; Beverage beverage;

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; Whip(Beverage beverage) =&amp;gt; &lt;span&gt;this&lt;/span&gt;.beverage =&lt;span&gt; beverage;

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;override&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; Description =&amp;gt; $&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;{beverage.Description}, Whip&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;override&lt;/span&gt; &lt;span&gt;double&lt;/span&gt;&lt;span&gt; Cost()
        {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; .&lt;span&gt;15&lt;/span&gt; +&lt;span&gt; beverage.Cost();
        }
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Program:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; DecoratorPattern.Coffee;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; DecoratorPattern.Condiments;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; DecoratorPattern.Core;

&lt;/span&gt;&lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; DecoratorPattern
{
    &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Program
    {
        &lt;/span&gt;&lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; Main(&lt;span&gt;string&lt;/span&gt;&lt;span&gt;[] args)
        {
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; beverage = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Espresso();
            Console.WriteLine($&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;{beverage.Description} $ {beverage.Cost()}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);

            Beverage beverage2 &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; HouseBlend();
            beverage2 &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Mocha(beverage2);
            beverage2 &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Mocha(beverage2);
            beverage2 &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Whip(beverage2);
            Console.WriteLine($&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;{beverage2.Description} $ {beverage2.Cost()}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
        
        }
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;运行结果:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/986268/201804/986268-20180403064107575-469608268.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt;首先需要知道, System.IO命名空间是低级I/O功能的大本营.&lt;/p&gt;
&lt;h2&gt;Stream的结构&lt;/h2&gt;
&lt;p&gt;.NET Core里面的Stream主要是三个概念: 存储(backing stores 我不知道怎么翻译比较好), &lt;strong&gt;装饰器&lt;/strong&gt;, 适配器.&lt;/p&gt;
&lt;p&gt;backing stores是让输入和输出发挥作用的端点, 例如文件或者网络连接. 就是下面任意一点或两点:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;一个源, 从它这里字节可以被顺序的读取&lt;/li&gt;
&lt;li&gt;一个目的地, 字节可以被连续的写入.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;程序员可以通过Stream类来发挥backing store的作用. Stream类有一套方法, 可以进行读取, 写入, 定位等操作. 个数组不同的是, 数组是把所有的数据都一同放在了内存里, 而stream则是顺序的/连续的处理数据, 要么是一次处理一个字节, 要么是一次处理特定大小(不能太大, 可管理的范围内)的数据.&lt;/p&gt;
&lt;p&gt;于是, stream可以用比较小的固定大小的内存来处理无论多大的backing store.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/986268/201804/986268-20180403102055629-845557249.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;中间的那部分就是装饰器Stream. 它符合装饰模式.&lt;/p&gt;
&lt;p&gt;从图中可以看到, Stream又分为两部分:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Backing Store Streams: 硬连接到特定类型的backing store, 例如FileStream和NetworkStream&lt;/li&gt;
&lt;li&gt;Decorator Streams 装饰器Stream: 使用某种方式把数据进行了转化, 例如DeflateStream和CryptoStream.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;装饰器Stream有如下结构性的优点(参考装饰模式):&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;无需让backing store stream去实现例如压缩, 加密等功能.&lt;/li&gt;
&lt;li&gt;装饰的时候接口(interface)并没有变化&lt;/li&gt;
&lt;li&gt;可以在运行时进行装饰&lt;/li&gt;
&lt;li&gt;可以串联装饰(先后进行多个装饰)&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;backing store和装饰器stream都是按字节进行处理的. 尽管这很灵活和高效, 但是程序一般还是采用更高级别的处理方式例如文字或者xml.&lt;/p&gt;
&lt;p&gt;适配器通过使用特殊化的方法把类里面的stream进行包装成特殊的格式. 这就弥合了上述的间隔.&lt;/p&gt;
&lt;p&gt;例如 text reader有一个ReadLine方法, XML writer又WriteAttributes方法.&lt;/p&gt;
&lt;p&gt;注意: 适配器包装了stream, 这点和装饰器一样, 但是不一样的是, 适配器本身并不是stream, 它一般会把所有针对字节的方法都隐藏起来. 所以本文就不介绍适配器了.&lt;/p&gt;
&lt;p&gt;总结一下:&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;backing store stream 提供原始数据, 装饰器stream提供透明的转换(例如加密); 适配器提供方法来处理高级别的类型例如字符串和xml&lt;/strong&gt;&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;想要连成串的话, 秩序把对象传递到另一个对象的构造函数里.&lt;/p&gt;
&lt;h2&gt;使用Stream&lt;/h2&gt;
&lt;p&gt;Stream抽象类是所有Stream的基类.&lt;/p&gt;
&lt;p&gt;它的方法和属性主要分三类基本操作: 读, 写, 寻址(Seek); 和管理操作: 关闭(close), 冲(flush)和设定超时:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/986268/201804/986268-20180403103538686-667994898.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这些方法都有异步的版本, 加async, 返回Task即可.&lt;/p&gt;
&lt;p&gt;一个例子:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;48&quot;&gt;
&lt;pre&gt;
&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.IO;

&lt;/span&gt;&lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; Test
{
    &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Program
    {
        &lt;/span&gt;&lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; Main(&lt;span&gt;string&lt;/span&gt;&lt;span&gt;[] args)
        {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 在当前目录创建按一个 test.txt 文件&lt;/span&gt;
            &lt;span&gt;using&lt;/span&gt; (Stream s = &lt;span&gt;new&lt;/span&gt; FileStream(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;test.txt&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, FileMode.Create))
            {
                Console.WriteLine(s.CanRead); &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; True&lt;/span&gt;
                Console.WriteLine(s.CanWrite); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; True&lt;/span&gt;
                Console.WriteLine(s.CanSeek); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; True&lt;/span&gt;
                s.WriteByte(&lt;span&gt;101&lt;/span&gt;&lt;span&gt;);
                s.WriteByte(&lt;/span&gt;&lt;span&gt;102&lt;/span&gt;&lt;span&gt;);
                &lt;/span&gt;&lt;span&gt;byte&lt;/span&gt;[] block = { &lt;span&gt;1&lt;/span&gt;, &lt;span&gt;2&lt;/span&gt;, &lt;span&gt;3&lt;/span&gt;, &lt;span&gt;4&lt;/span&gt;, &lt;span&gt;5&lt;/span&gt;&lt;span&gt; };
                s.Write(block, &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;, block.Length); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 写 5 字节&lt;/span&gt;
                Console.WriteLine(s.Length); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;
                Console.WriteLine(s.Position); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;
                s.Position = &lt;span&gt;0&lt;/span&gt;; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 回到开头位置&lt;/span&gt;
                Console.WriteLine(s.ReadByte()); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 101&lt;/span&gt;
                Console.WriteLine(s.ReadByte()); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 102
                                                 &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 从block数组开始的地方开始read:&lt;/span&gt;
                Console.WriteLine(s.Read(block, &lt;span&gt;0&lt;/span&gt;, block.Length)); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 5
                                                                   &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 假设最后一次read返回 5, 那就是在文件结尾, 所以read会返回0:&lt;/span&gt;
                Console.WriteLine(s.Read(block, &lt;span&gt;0&lt;/span&gt;, block.Length)); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 0&lt;/span&gt;
&lt;span&gt;            }
        }
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;运行结果:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/986268/201804/986268-20180403104235966-1284300371.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;异步例子:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;44&quot;&gt;
&lt;pre&gt;
&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.IO;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Threading.Tasks;

&lt;/span&gt;&lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; Test
{
    &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Program
    {
        &lt;/span&gt;&lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; Main(&lt;span&gt;string&lt;/span&gt;&lt;span&gt;[] args)
        {
            Task.Run(AsyncDemo).GetAwaiter().GetResult();
        }

        &lt;/span&gt;&lt;span&gt;async&lt;/span&gt; &lt;span&gt;static&lt;/span&gt;&lt;span&gt; Task AsyncDemo()
        {
            &lt;/span&gt;&lt;span&gt;using&lt;/span&gt; (Stream s = &lt;span&gt;new&lt;/span&gt; FileStream(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;test.txt&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, FileMode.Create))
            {
                &lt;/span&gt;&lt;span&gt;byte&lt;/span&gt;[] block = { &lt;span&gt;1&lt;/span&gt;, &lt;span&gt;2&lt;/span&gt;, &lt;span&gt;3&lt;/span&gt;, &lt;span&gt;4&lt;/span&gt;, &lt;span&gt;5&lt;/span&gt;&lt;span&gt; };
                &lt;/span&gt;&lt;span&gt;await&lt;/span&gt; s.WriteAsync(block, &lt;span&gt;0&lt;/span&gt;&lt;span&gt;, block.Length); 
                s.Position &lt;/span&gt;= &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
                Console.WriteLine(&lt;/span&gt;&lt;span&gt;await&lt;/span&gt; s.ReadAsync(block, &lt;span&gt;0&lt;/span&gt;&lt;span&gt;, block.Length));
            }
        }
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/986268/201804/986268-20180403104807536-1175006945.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;异步版本比较适合慢的stream, 例如网络的stream.&lt;/p&gt;
&lt;h2&gt;读和写&lt;/h2&gt;
&lt;p&gt;CanRead和CanWrite属性可以判断Stream是否可以读写.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Read&lt;/strong&gt;方法把stream的一块数据写入到数组, 返回接受到的字节数, 它总是小于等于count这个参数. 如果它小于count, 就说明要么是已经读取到stream的结尾了, 要么stream给的数据块太小了(网络stream经常这样).&lt;/p&gt;
&lt;p&gt;一个读取1000字节stream的例子:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
 &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 假设s是某个stream&lt;/span&gt;
            &lt;span&gt;byte&lt;/span&gt;[] data = &lt;span&gt;new&lt;/span&gt; &lt;span&gt;byte&lt;/span&gt;[&lt;span&gt;1000&lt;/span&gt;&lt;span&gt;];
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; bytesRead 的结束位置肯定是1000, 除非stream的长度不足1000&lt;/span&gt;
            &lt;span&gt;int&lt;/span&gt; bytesRead = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; chunkSize = &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;while&lt;/span&gt; (bytesRead &amp;lt; data.Length &amp;amp;&amp;amp; chunkSize &amp;gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
                bytesRead &lt;/span&gt;+=&lt;span&gt;
                   chunkSize &lt;/span&gt;= s.Read(data, bytesRead, data.Length - bytesRead);
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;ReadByte&lt;/strong&gt;方法更简单一些, 一次就读一个字节, 如果返回-1表示读取到stream的结尾了. 返回类型是int.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Write和WriteByte&lt;/strong&gt;就是相应的写入方法了. 如果无法写入某个字节, 那就会抛出异常.&lt;/p&gt;
&lt;p&gt;上面方法签名里的offset参数, 表示的是缓冲数组开始读取或写入的位置, 而不是指stream里面的位置.&lt;/p&gt;
&lt;h2&gt;寻址 Seek&lt;/h2&gt;
&lt;p&gt;CanSeek为true的话, Stream就可以被寻址. 可以查询和修改可寻址的stream(例如文件stream)的长度, 也可以随时修改读取和写入的位置.&lt;/p&gt;
&lt;p&gt;Position属性就是所需要的, 它是相对于stream开始位置的.&lt;/p&gt;
&lt;p&gt;Seek方法就允许你移动到当前位置或者stream的尾部.&lt;/p&gt;
&lt;p&gt;注意改变FileStream的Position会花去几微秒. 如果是在大规模循环里面做这个操作的话, 建议使用MemoryMappedFile类.&lt;/p&gt;
&lt;p&gt;对于不可寻址的Stream(例如加密Stream), 想知道它的长度只能是把它读完. 而且你要是想读取前一部分的话必须关闭stream, 然后再开始一个全新的stream才可以.&lt;/p&gt;
&lt;h2&gt;关闭和Flush&lt;/h2&gt;
&lt;p&gt;Stream用完之后必须被处理掉(dispose)来释放底层资源例如文件和socket处理. 通常使用using来实现.&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Dispose和Close方法功能上是一样的.&lt;/li&gt;
&lt;li&gt;重复close和flush一个stream不会报错.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;关闭装饰器stream的时候会同时关闭装饰器和它的backing store stream.&lt;/p&gt;
&lt;p&gt;针对一连串的装饰器装饰的stream, 关闭最外层的装饰器就会关闭所有.&lt;/p&gt;
&lt;p&gt;有些stream从backing store读取/写入的时候有一个缓存机制, 这就减少了实际到backing store的往返次数以达到提高性能的目的(例如FileStream).&lt;/p&gt;
&lt;p&gt;这就意味着你写入数据到stream的时候可能不会立即写入到backing store; 它会有延迟, 直到缓冲被填满.&lt;/p&gt;
&lt;p&gt;Flush方法会强制内部缓冲的数据被立即的写入. Flush会在stream关闭的时候自动被调用. 所以你不需要这样写: s.Flush(); s.Close();&lt;/p&gt;
&lt;h2&gt;超时&lt;/h2&gt;
&lt;p&gt;如果CanTimeout属性为true的话, 那么该stream就可以设定读或写的超时.&lt;/p&gt;
&lt;p&gt;网络stream支持超时, 而文件和内存stream则不支持.&lt;/p&gt;
&lt;p&gt;支持超时的stream, 通过ReadTimeout和WriteTimeout属性可以设定超时, 单位毫秒. 0表示无超时.&lt;/p&gt;
&lt;p&gt;Read和Write方法通过抛出异常的方式来表示超时已经发生了.&lt;/p&gt;
&lt;h2&gt;线程安全&lt;/h2&gt;
&lt;p&gt;stream并不是线程安全的, 也就是说两个线程同时读或写一个stream的时候就会报错.&lt;/p&gt;
&lt;p&gt;Stream通过Synchronized方法来解决这个问题. 该方法接受stream为参数, 返回一个线程安全的包装结果.&lt;/p&gt;
&lt;p&gt;这个包装结果在每次读, 写, 寻址的时候会获得一个独立锁/排他锁, 所以同一时刻只有一个线程可以执行操作.&lt;/p&gt;
&lt;p&gt;实际上, 这允许多个线程同时为同一个数据追加数据, 而其他类型的操作(例如同读)则需要额外的锁来保证每个线程可以访问到stream相应的部分.&lt;/p&gt;
&lt;h2&gt;Backing Store Stream&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/986268/201804/986268-20180403114046831-2104297416.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;FileStream&lt;/h2&gt;
&lt;p&gt;文件流&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;构建一个FileStream&lt;/strong&gt;: &lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
FileStream fs1 = File.OpenRead(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;readme.bin&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Read-only&lt;/span&gt;
FileStream fs2 = File.OpenWrite(&lt;span&gt;@&quot;&lt;/span&gt;&lt;span&gt;c:\temp\writeme.tmp&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Write-only&lt;/span&gt;
FileStream fs3 = File.Create(&lt;span&gt;@&quot;&lt;/span&gt;&lt;span&gt;c:\temp\writeme.tmp&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Read/write&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;OpenWrite和Create对于已经存在的文件来说, 它的行为是不同的.&lt;/p&gt;
&lt;p&gt;Create会把现有文件的内容清理掉, 写入的时候从头开写.&lt;/p&gt;
&lt;p&gt;OpenWrite则是完整的保存着现有的内容, 而stream的位置定位在0. 如果写入的内容比原来的内容少, 那么OpenWrite打开并写完之后的内容是原内容和新写入内容的混合体.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;直接构建FileStream&lt;/strong&gt;:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; fs = &lt;span&gt;new&lt;/span&gt; FileStream (&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;readwrite.tmp&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, FileMode.Open); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Read/write&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;其构造函数里面还可以传入其他参数, 具体请看文档.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;File类的快捷方法&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;下面这些静态方法会一次性把整个文件读进内存:&lt;/p&gt;
&lt;p&gt;下面的方法直接写入整个文件:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span class=&quot;fontstyle0&quot;&gt;File.WriteAllText&lt;br/&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&quot;fontstyle0&quot;&gt;File.WriteAllLines&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&quot;fontstyle0&quot;&gt;File.WriteAllBytes&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;File.AppendAllText &lt;span class=&quot;fontstyle2&quot;&gt;(很适合附加log文件)&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle0&quot;&gt;&lt;span class=&quot;fontstyle2&quot;&gt;还有一个静态方法叫File.ReadLines: 它有点想ReadAllLines, 但是它返回的是一个懒加载的IEnumerable&amp;lt;string&amp;gt;. 这个实际上效率更高一些, 因为不必一次性把整个文件都加载到内存里. LINQ非常适合处理这个结果. 例如:&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;int&lt;/span&gt; longLines = File.ReadLines (&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;filePath&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;).Count (l =&amp;gt; l.Length &amp;gt; &lt;span&gt;80&lt;/span&gt;);
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;指定的文件名&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;可以是绝对路径也可以是相对路径.&lt;/p&gt;
&lt;p&gt;可已修改静态属性Environment.CurrentDirectory的值来改变当前的路径. (注意: 默认的当前路径不一定是exe所在的目录)&lt;/p&gt;
&lt;p&gt;AppDomain.CurrentDomain.BaseDirectory会返回应用的基目录, 它通常是包含exe的目录. &lt;/p&gt;
&lt;p&gt;指定相对于这个目录的地址最好使用Path.Combine方法:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
            &lt;span&gt;string&lt;/span&gt; baseFolder =&lt;span&gt; AppDomain.CurrentDomain.BaseDirectory;
            &lt;/span&gt;&lt;span&gt;string&lt;/span&gt; logoPath = Path.Combine(baseFolder, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;logo.jpg&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            Console.WriteLine(File.Exists(logoPath));&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;通过网络对文件读写要使用UNC路径&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;例如: \\JoesPC\PicShare \pic.jpg 或者 \\10.1.1.2\PicShare\pic.jpg.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;FileMode&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;所有的FileStream的构造器都会接收一个文件名和一个FileMode枚举作为参数. 如果选择FileMode请看下图:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/986268/201804/986268-20180403134631142-336756190.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;其他特性还是需要看文档.&lt;/p&gt;
&lt;h2&gt;MemoryStream&lt;/h2&gt;
&lt;p&gt;MemoryStream在随机访问不可寻址的stream时就有用了.&lt;/p&gt;
&lt;p&gt;如果你知道源stream的大小可以接受, 你就可以直接把它复制到MemoryStream里:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
            &lt;span&gt;var&lt;/span&gt; ms = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; MemoryStream();
            sourceStream.CopyTo(ms);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;可以通过ToArray方法把MemoryStream转化成数组.&lt;/p&gt;
&lt;p&gt;GetBuffer方法也是同样的功能, 但是因为它是直接把底层的存储数组的引用直接返回了, 所以会更有效率. 不过不幸的是, 这个数组通常比stream的真实长度要长.&lt;/p&gt;
&lt;p&gt;注意: Close和Flush 一个MemoryStream是可选的. 如果关闭了MemoryStream, 你就再也不能对它读写了, 但是仍然可以调用ToArray方法来获取其底层的数据.&lt;/p&gt;
&lt;p&gt;Flush则对MemoryStream毫无用处.&lt;/p&gt;
&lt;h2&gt;PipeStream&lt;/h2&gt;
&lt;p&gt;PipeStream通过Windows Pipe 协议, 允许一个进程(process)和另一个进程通信.&lt;/p&gt;
&lt;p&gt;分两种:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;匿名进程(快一点), 允许同一个电脑内的父子进程单向通信.&lt;/li&gt;
&lt;li&gt;命名进程(更灵活), 允许同一个电脑内或者同一个windows网络内的不同电脑间的任意两个进程间进行双向通信&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;pipe很适合一个电脑上的进程间交互(IPC), 它并不依赖于网络传输, 这也意味着没有网络开销, 也不在乎防火墙.&lt;/p&gt;
&lt;p&gt;注意: pipe是基于Stream的, 一个进程等待接受一串字符的同时另一个进程发送它们.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;PipeStream是抽象类&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;具体的实现类有4个:&lt;/p&gt;
&lt;p&gt;匿名pipe:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;AnonymousePipeServerStream&lt;/li&gt;
&lt;li&gt;AnonymousePipeClientStream&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;命名Pipe:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;NamedPipeServerStream&lt;/li&gt;
&lt;li&gt;NamePipeClientStream&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;命名Pipe&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;命名pipe的双方通过同名的pipe进行通信. 协议规定了两个角色: 服务器和客户端. 按照下述方式进行通信:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;服务器实例化一个NamedPipeServerStream然后调用WaitForConnection方法.&lt;/li&gt;
&lt;li&gt;客户端实例化一个NamedPipeClientStream然后调用Connect方法(可以设定超时).&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;然后双方就可以读写stream来进行通信了.&lt;/p&gt;
&lt;p&gt;例子:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.IO;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.IO.Pipes;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Threading.Tasks;

&lt;/span&gt;&lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; Test
{
    &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Program
    {
        &lt;/span&gt;&lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; Main(&lt;span&gt;string&lt;/span&gt;&lt;span&gt;[] args)
        {
            Console.WriteLine(DateTime.Now.ToString());
            &lt;/span&gt;&lt;span&gt;using&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; s = &lt;span&gt;new&lt;/span&gt; NamedPipeServerStream(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;pipedream&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;))
            {
                s.WaitForConnection();
                s.WriteByte(&lt;/span&gt;&lt;span&gt;100&lt;/span&gt;); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Send the value 100.&lt;/span&gt;
&lt;span&gt;                Console.WriteLine(s.ReadByte());
            }
            Console.WriteLine(DateTime.Now.ToString());
        }
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.IO.Pipes;

&lt;/span&gt;&lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; Test2
{
    &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Program
    {
        &lt;/span&gt;&lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; Main(&lt;span&gt;string&lt;/span&gt;&lt;span&gt;[] args)
        {
            Console.WriteLine(DateTime.Now.ToString());
            &lt;/span&gt;&lt;span&gt;using&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; s = &lt;span&gt;new&lt;/span&gt; NamedPipeClientStream(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;pipedream&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;))
            {
                s.Connect();
                Console.WriteLine(s.ReadByte());
                s.WriteByte(&lt;/span&gt;&lt;span&gt;200&lt;/span&gt;); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Send the value 200 back.&lt;/span&gt;
&lt;span&gt;            }
            Console.WriteLine(DateTime.Now.ToString());
        }
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/986268/201804/986268-20180403140649031-1848658324.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;命名的PipeStream默认情况下是双向的, 所以任意一方都可以进行读写操作, 这也意味着服务器和客户端必须达成某种协议来协调它们的操作, 避免同时进行发送和接收.&lt;/p&gt;
&lt;p&gt;还需要协定好每次传输的长度.&lt;/p&gt;
&lt;p&gt;在处理长度大于一字节的信息的时候, pipe提供了一个信息传输的模式, 如果这个启用了, 一方在调用read的时候可以通过检查IsMessageComplete属性来知道消息什么时候结束.&lt;/p&gt;
&lt;p&gt;例子:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
        &lt;span&gt;static&lt;/span&gt; &lt;span&gt;byte&lt;/span&gt;&lt;span&gt;[] ReadMessage(PipeStream s)
        {
            MemoryStream ms &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; MemoryStream();
            &lt;/span&gt;&lt;span&gt;byte&lt;/span&gt;[] buffer = &lt;span&gt;new&lt;/span&gt; &lt;span&gt;byte&lt;/span&gt;[&lt;span&gt;0x1000&lt;/span&gt;]; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Read in 4 KB blocks&lt;/span&gt;
            &lt;span&gt;do&lt;/span&gt; { ms.Write(buffer, &lt;span&gt;0&lt;/span&gt;, s.Read(buffer, &lt;span&gt;0&lt;/span&gt;&lt;span&gt;, buffer.Length)); }
            &lt;/span&gt;&lt;span&gt;while&lt;/span&gt; (!s.IsMessageComplete); &lt;span&gt;return&lt;/span&gt;&lt;span&gt; ms.ToArray();
        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;注意: 针对PipeStream不可以通过Read返回值是0的方式来它是否已经完成读取消息了. 这是因为它和其他的Stream不同, pipe stream和network stream没有确定的终点. 在两个信息传送动作之间, 它们就干等着.&lt;/p&gt;
&lt;p&gt;这样启用信息传输模式, 服务器端 :&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;using&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; s = &lt;span&gt;new&lt;/span&gt; NamedPipeServerStream(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;pipedream&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, PipeDirection.InOut, &lt;span&gt;1&lt;/span&gt;&lt;span&gt;, &lt;strong&gt;PipeTransmissionMode.Message&lt;/strong&gt;))
            {
                s.WaitForConnection();
                &lt;/span&gt;&lt;span&gt;byte&lt;/span&gt;[] msg = Encoding.UTF8.GetBytes(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Hello&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
                s.Write(msg, &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;, msg.Length);
                Console.WriteLine(Encoding.UTF8.GetString(ReadMessage(s)));
            }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;客户端:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
            &lt;span&gt;using&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; s = &lt;span&gt;new&lt;/span&gt; NamedPipeClientStream(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;pipedream&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;))
            {
                s.Connect();
                &lt;strong&gt;s.ReadMode &lt;/strong&gt;&lt;/span&gt;&lt;strong&gt;=&lt;/strong&gt;&lt;span&gt;&lt;strong&gt; PipeTransmissionMode.Message;&lt;/strong&gt;
                Console.WriteLine(Encoding.UTF8.GetString(ReadMessage(s)));
                &lt;/span&gt;&lt;span&gt;byte&lt;/span&gt;[] msg = Encoding.UTF8.GetBytes(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Hello right back!&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
                s.Write(msg, &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;, msg.Length);
            }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;匿名pipe&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;匿名pipe提供父子进程间的单向通信. 流程如下:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;服务器实例化一个AnonymousPipeServerStream, 并指定PipeDirection是In还是Out&lt;/li&gt;
&lt;li&gt;服务器调用GetClientHandleAsString方法来获取一个pipe的标识, 然后会把它传递给客户端(通常是启动子进程的参数 argument)&lt;/li&gt;
&lt;li&gt;子进程实例化一个AnonymousePipeClientStream, 指定相反的PipeDirection&lt;/li&gt;
&lt;li&gt;服务器通过调用DisposeLocalCopyOfClientHandle释放步骤2的本地处理, &lt;/li&gt;
&lt;li&gt;父子进程间通过读写stream进行通信&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;因为匿名pipe是单向的, 所以服务器必须创建两份pipe来进行双向通信&lt;/p&gt;
&lt;p&gt;例子:&lt;/p&gt;
&lt;p&gt;server:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Diagnostics;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.IO;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.IO.Pipes;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Text;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Threading.Tasks;

&lt;/span&gt;&lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; Test
{
    &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Program
    {
        &lt;/span&gt;&lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; Main(&lt;span&gt;string&lt;/span&gt;&lt;span&gt;[] args)
        {
            &lt;/span&gt;&lt;span&gt;string&lt;/span&gt; clientExe = &lt;span&gt;@&quot;&lt;/span&gt;&lt;span&gt;D:\Projects\Test2\bin\Debug\netcoreapp2.0\win10-x64\publish\Test2.exe&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
            HandleInheritability inherit &lt;/span&gt;=&lt;span&gt; HandleInheritability.Inheritable;
            &lt;/span&gt;&lt;span&gt;using&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; tx = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; AnonymousPipeServerStream(PipeDirection.Out, inherit))
            &lt;/span&gt;&lt;span&gt;using&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; rx = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; AnonymousPipeServerStream(PipeDirection.In, inherit))
            {
                &lt;/span&gt;&lt;span&gt;string&lt;/span&gt; txID =&lt;span&gt; tx.GetClientHandleAsString();
                &lt;/span&gt;&lt;span&gt;string&lt;/span&gt; rxID =&lt;span&gt; rx.GetClientHandleAsString();
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; startInfo = &lt;span&gt;new&lt;/span&gt; ProcessStartInfo(clientExe, txID + &lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt; +&lt;span&gt; rxID);
                startInfo.UseShellExecute &lt;/span&gt;= &lt;span&gt;false&lt;/span&gt;; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Required for child process&lt;/span&gt;
                Process p =&lt;span&gt; Process.Start(startInfo);
                tx.DisposeLocalCopyOfClientHandle(); &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Release unmanaged&lt;/span&gt;
                rx.DisposeLocalCopyOfClientHandle(); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; handle resources.&lt;/span&gt;
                tx.WriteByte(&lt;span&gt;100&lt;/span&gt;&lt;span&gt;);
                Console.WriteLine(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Server received: &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; +&lt;span&gt; rx.ReadByte());
                p.WaitForExit();
            }
        }
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;client:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.IO.Pipes;

&lt;/span&gt;&lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; Test2
{
    &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; Program
    {
        &lt;/span&gt;&lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; Main(&lt;span&gt;string&lt;/span&gt;&lt;span&gt;[] args)
        {
            &lt;/span&gt;&lt;span&gt;string&lt;/span&gt; rxID = args[&lt;span&gt;0&lt;/span&gt;]; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Note we're reversing the&lt;/span&gt;
            &lt;span&gt;string&lt;/span&gt; txID = args[&lt;span&gt;1&lt;/span&gt;]; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; receive and transmit roles.&lt;/span&gt;
            &lt;span&gt;using&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; rx = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; AnonymousPipeClientStream(PipeDirection.In, rxID))
            &lt;/span&gt;&lt;span&gt;using&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; tx = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; AnonymousPipeClientStream(PipeDirection.Out, txID))
            {
                Console.WriteLine(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Client received: &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; +&lt;span&gt; rx.ReadByte());
                tx.WriteByte(&lt;/span&gt;&lt;span&gt;200&lt;/span&gt;&lt;span&gt;);
            }
        }
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;最好发布一下client成为独立运行的exe:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
dotnet publish --self-contained --runtime win10-x64
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;运行结果:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/986268/201804/986268-20180403143114632-2007343363.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;匿名pipe不支持消息模式, 所以你必须自己来为传输的长度制定协议. 有一种做法是: 在每次传输的前4个字节里存放一个整数表示消息的长度, 可以使用BitConverter类来对整型和长度为4的字节数组进行转换.&lt;/p&gt;
&lt;h2&gt;BufferedStream&lt;/h2&gt;
&lt;p&gt;BufferedStream对另一个stream进行装饰或者说包装, 让它拥有缓冲的能力.它也是众多装饰stream类型中的一个.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/986268/201804/986268-20180403143635816-1329325863.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;缓冲肯定会通过减少往返backing store的次数来提升性能.&lt;/p&gt;
&lt;p&gt;下面这个例子是把一个FileStream装饰成20k的缓冲stream:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
            &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Write 100K to a file:&lt;/span&gt;
            File.WriteAllBytes(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;myFile.bin&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;new&lt;/span&gt; &lt;span&gt;byte&lt;/span&gt;[&lt;span&gt;100000&lt;/span&gt;&lt;span&gt;]);
            &lt;/span&gt;&lt;span&gt;using&lt;/span&gt; (FileStream fs = File.OpenRead(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;myFile.bin&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;))
            &lt;/span&gt;&lt;span&gt;using&lt;/span&gt; (BufferedStream bs = &lt;span&gt;new&lt;/span&gt; BufferedStream(fs, &lt;span&gt;20000&lt;/span&gt;)) &lt;span&gt;//&lt;/span&gt;&lt;span&gt;20K buffer&lt;/span&gt;
&lt;span&gt;            {
                bs.ReadByte();
                Console.WriteLine(fs.Position); &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 20000&lt;/span&gt;
&lt;span&gt;            }
        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;通过预读缓冲, 底层的stream会在读取1字节后, 直接预读了20000字节, 这样我们在另外调用ReadByte 19999次之后, 才会再次访问到FileStream.&lt;/p&gt;
&lt;p&gt;这个例子是把BufferedStream和FileStream耦合到一起, 实际上这个例子里面的缓冲作用有限, 因为FileStream有一个内置的缓冲. 这个例子也只能扩大一下缓冲而已.&lt;/p&gt;
&lt;p&gt;关闭BufferedStream就会关闭底层的backing store stream..&lt;/p&gt;

&lt;p&gt;先写到这里, 略微有点跑题了, 但是.NET Core的Stream这部分没写完, 另开一篇文章再写吧.&lt;/p&gt;
</description>
<pubDate>Tue, 03 Apr 2018 06:45:00 +0000</pubDate>
<dc:creator>solenovex</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/cgzl/p/8697949.html</dc:identifier>
</item>
<item>
<title>从源码角度看LinkedList一些基本操作（jdk1.7） - 云枭zd</title>
<link>http://www.cnblogs.com/fixzd/p/8693676.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/fixzd/p/8693676.html</guid>
<description>&lt;h2&gt;介绍&lt;/h2&gt;
&lt;p&gt;LinkedList是一个双向链表，就像下图展示那样，每个节点有个指向上个元素和一个指向下个元素的指针。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1333208/201804/1333208-20180403100602818-1087015829.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;接下来我会对我们经常使用的方法进行介绍，代码如下&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
   @Test
        public void testLinkedList(){
                //1.实例化LinkedList
                LinkedList&amp;lt;Character&amp;gt; list = new LinkedList&amp;lt;Character&amp;gt;();
                //2.添加元素
                for (Character i = 'A'; i &amp;lt;= 'Z'; i++) {
                        list.add(i);
                }
                //3.添加null值和其他元素
                list.add(null);
                list.add('G');
                
                //4.移除元素
                list.remove(new Character('V'));
                list.remove(new Character('G'));
                
                //5.获取元素...
        } 
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;现在我们先来看看实例化LinkedList调用的构造函数。&lt;/p&gt;
&lt;h2&gt;构造函数&lt;/h2&gt;
&lt;p&gt;LinkedList的构造函数有两个，如下&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;36&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
    /**
     * Constructs an empty list.
     */
    public LinkedList() {
    }

    /**
     * Constructs a list containing the elements of the specified
     * collection, in the order they are returned by the collection's
     * iterator.
     *
     * @param  c the collection whose elements are to be placed into this list
     * @throws NullPointerException if the specified collection is null
     */
    public LinkedList(Collection&amp;lt;? extends E&amp;gt; c) {
        this();
        addAll(c);
    }
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;一个是无参的构造函数，无参的构造函数没什么可以讲的，另外一个是传入一个Collection集合的构造函数。我们先来看看LinkedList的成员变量。&lt;/p&gt;
&lt;h3&gt;成员变量&lt;/h3&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
    transient int size = 0;

    /**
     * Pointer to first node.
     * Invariant: (first == null &amp;amp;&amp;amp; last == null) ||
     *            (first.prev == null &amp;amp;&amp;amp; first.item != null)
     */
    transient Node&amp;lt;E&amp;gt; first;

    /**
     * Pointer to last node.
     * Invariant: (first == null &amp;amp;&amp;amp; last == null) ||
     *            (last.next == null &amp;amp;&amp;amp; last.item != null)
     */
    transient Node&amp;lt;E&amp;gt; last;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;从源码中可以看到有三个成员变量&lt;/p&gt;
&lt;p&gt;第一个是size，表示LinkedList的长度；&lt;/p&gt;
&lt;p&gt;第二个是first，表示LinkedList的第一个节点；&lt;/p&gt;
&lt;p&gt;第三个是last，表示LinkedList的最后一个节点；&lt;/p&gt;
&lt;p&gt;第二个成员变量first和第三个成员变量last让LinkedList可以从第一个节点添加也可以从第二各节点添加，也就是说可以作为先进先出（FIFO）的队列，也可以作为LIFO（后进先出）的栈。&lt;/p&gt;
&lt;p&gt;成员变量介绍完了，现在来看看有参的构造函数&lt;/p&gt;
&lt;h3&gt;LinkedList(Collection&amp;lt;? extends E&amp;gt; c)&lt;/h3&gt;
&lt;p&gt;构造函数里面只是调用两个函数，一个是无参的构造函数，一个是addAll方法。接下来就看看addAll方法吧。&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
    public LinkedList(Collection&amp;lt;? extends E&amp;gt; c) {
        this();
        addAll(c);
    }
&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;addAll(Collection&amp;lt;? extends E&amp;gt; c)&lt;/h3&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
    public boolean addAll(Collection&amp;lt;? extends E&amp;gt; c) {
        return addAll(size, c);
    }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　这边又调用了重载方法，传入当前的长度和集合，让我么继续查看这个重载的方法。&lt;/p&gt;
&lt;h3&gt;addAll(int index, Collection&amp;lt;? extends E&amp;gt; c)&lt;/h3&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;39&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
    public boolean addAll(int index, Collection&amp;lt;? extends E&amp;gt; c) {
        //1.检查传入的index是否大于等于0且小于等于LinkedList的长度（index &amp;gt;= 0 &amp;amp;&amp;amp; index &amp;lt;= size）
        checkPositionIndex(index);
        //2.将集合元素转换成数组对象，获取数组对象的长度，如果长度为0，则直接返回false
        Object[] a = c.toArray();
        int numNew = a.length;
        if (numNew == 0)
            return false;
        //3.定义两个节点pred、succ，判断传入的index是否等于当前LinkedList的长度
        //--&amp;gt;是，succ节点赋值为null，pred节点赋值为LinkedList的最后一个元素
        //--&amp;gt;否，succ节点赋值为位置为index的值，pred节点赋值为succ节点之前的值
        Node&amp;lt;E&amp;gt; pred, succ;
        if (index == size) {
            succ = null;
            pred = last;
        } else {
            succ = node(index);
            pred = succ.prev;
        }
        //4.循环数组对象，创建新节点newNode
        //判断pred节点是否为null
        //--&amp;gt;是，首节点first赋值为新节点newNode
        //--&amp;gt;否，pred节点的next指向newNode节点
        //pred节点重新赋值为newNode节点
        for (Object o : a) {
            @SuppressWarnings(&quot;unchecked&quot;) E e = (E) o;
            Node&amp;lt;E&amp;gt; newNode = new Node&amp;lt;&amp;gt;(pred, e, null);
            if (pred == null)
                first = newNode;
            else
                pred.next = newNode;
            pred = newNode;
        }
        //5.succ节点是否为null
        //--&amp;gt;是，最后一个节点last赋值为pred节点
        //--&amp;gt;否，pred节点的next指向succ节点，将原先的节点加到插入新数据之后。succ节点的prev指向pred。
        if (succ == null) {
            last = pred;
        } else {
            pred.next = succ;
            succ.prev = pred;
        }
        //6.当前元素大小加上新插入的数组大小
        size += numNew;
        modCount++;
        return true;
    }
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;这边也就第三点会有些疑问了，其实最主要的就是succ节点的赋值，如果index是链表的最后就赋值为null，如果不是就赋值index所在的值（要在位置为index的地方插入新的元素，之后的元素加载新插入元素之后）&lt;/p&gt;
&lt;h2&gt; 添加节点&lt;/h2&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
    public boolean add(E e) {
        linkLast(e);
        return true;
    }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　add方法调用linkLast方法（添加到链表的尾部），那么就来看看linkLast方法。&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
    void linkLast(E e) {
        final Node&amp;lt;E&amp;gt; l = last;
        final Node&amp;lt;E&amp;gt; newNode = new Node&amp;lt;&amp;gt;(l, e, null);
        last = newNode;
        if (l == null)
            first = newNode;
        else
            l.next = newNode;
        size++;
        modCount++;
    }
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;代码比较简单，总体步骤就是创建一个新节点，将当前的尾节点的next指向新节点，然后新节点变成尾节点，元素长度size加1，修改统计modCount加1。linkFirst方法也类似，如下&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
   private void linkFirst(E e) {
        final Node&amp;lt;E&amp;gt; f = first;
        final Node&amp;lt;E&amp;gt; newNode = new Node&amp;lt;&amp;gt;(null, e, f);
        first = newNode;
        if (f == null)
            last = newNode;
        else
            f.prev = newNode;
        size++;
        modCount++;
    }
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;空值的添加也是一样&lt;/p&gt;
&lt;h2&gt;删除节点&lt;/h2&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;34&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
    public boolean remove(Object o) {
        if (o == null) {
            for (Node&amp;lt;E&amp;gt; x = first; x != null; x = x.next) {
                if (x.item == null) {
                    unlink(x);
                    return true;
                }
            }
        } else {
            for (Node&amp;lt;E&amp;gt; x = first; x != null; x = x.next) {
                if (o.equals(x.item)) {
                    unlink(x);
                    return true;
                }
            }
        }
        return false;
    }
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;删除元素的代码如上，删除时先判断传入的元素是否为null，null之的用==来比较，其他则用equals方法比较。找到匹配的节点是调用unlink方法，传入要删除的节点。&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;36&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
    E unlink(Node&amp;lt;E&amp;gt; x) {
        //1.获得当前节点、当前节点的前一个节点和后一个节点
        // assert x != null;
        final E element = x.item;
        final Node&amp;lt;E&amp;gt; next = x.next;
        final Node&amp;lt;E&amp;gt; prev = x.prev;
        //2.判断当前节点的前一个节点是否为null
        //--&amp;gt;是,则当前节点的后一个节点则变成头节点
        //--&amp;gt;否，当前节点的前一个节点的next指向当前节点的后一个节点，当前节点的prev赋值为null
        if (prev == null) {
            first = next;
        } else {
            prev.next = next;
            x.prev = null;
        }
        //3.判断当前节点的后一个节点是否为null
        //--&amp;gt;是，当前节点的前一个节点变成尾节点
        //--&amp;gt;否，当前节点的后一个节点的prev指向当前元素的前一个节点，当前节点的next赋值为null
        if (next == null) {
            last = prev;
        } else {
            next.prev = prev;
            x.next = null;
        }
        //4.当前节点的内容item赋值为null，
        //长度size减1
        //修改次数modCount+1
        x.item = null;
        size--;
        modCount++;
        return element;
    }
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;原理就类似下图，a节点的next原本指向b，c节点的prev原本指向b，因为要删除b节点，所以a节点的next重新指向c，c节点的prev则重新指向a，至此，节点的删除就完成了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1333208/201804/1333208-20180403141751055-199494763.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h2&gt; 获取节点&lt;/h2&gt;
&lt;p&gt;LinkedList获取节点的方式有很多种，可以通过如下&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Iterator&lt;/li&gt;
&lt;li&gt;根据索引值获取&lt;/li&gt;
&lt;li&gt;foreach循环获取&lt;/li&gt;
&lt;li&gt;pollFirst方法获取，会删除头结点（null值不会报错，只会返回null）&lt;/li&gt;
&lt;li&gt;pollLast方法获取，会删除尾节点（null值不会报错，只会返回null）&lt;/li&gt;
&lt;li&gt;removeFirst方法获取，会删除头结点（null值会报NoSuchElementException异常）&lt;/li&gt;
&lt;li&gt;removeLast方法获取，会删除尾结点（null值会报NoSuchElementException异常）&lt;/li&gt;
&lt;/ol&gt;
</description>
<pubDate>Tue, 03 Apr 2018 06:37:00 +0000</pubDate>
<dc:creator>云枭zd</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/fixzd/p/8693676.html</dc:identifier>
</item>
<item>
<title>python 3.x 爬虫基础---常用第三方库（一） - 王延领</title>
<link>http://www.cnblogs.com/kmonkeywyl/p/8482962.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/kmonkeywyl/p/8482962.html</guid>
<description>&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/kmonkeywyl/p/8435533.html&quot; target=&quot;_blank&quot;&gt;python 3.x 爬虫基础---http headers详解&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a id=&quot;link_post_title&quot; class=&quot;link-post-title&quot; href=&quot;http://www.cnblogs.com/kmonkeywyl/p/8458442.html&quot;&gt;python 3.x 爬虫基础---Urllib详解&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/kmonkeywyl/p/8482962.html%20&quot; target=&quot;_blank&quot;&gt;python 3.x 爬虫基础---常用第三方库&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;其实前两章都是python内置的爬虫函数，大家都知道python有强大的第三方库，今天我们就来说一下requests，BeautifulSoup4，selenium，lxml ，顺便正则re也会在这篇文章中提及。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;参考文档&lt;/strong&gt;：&lt;a href=&quot;http://docs.python-requests.org/zh_CN/latest/user/quickstart.html&quot; target=&quot;_blank&quot;&gt;http://docs.python-requests.org/zh_CN/latest/user/quickstart.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;python实现的简单易用的HTTP库（第三方库记得去导入）你不需要手动为 URL 添加查询字串，也不需要对 POST 数据进行表单编码。Keep-alive 和 HTTP 连接池的功能是 100% 自动化的，一切动力都来自于根植在 Requests 内部的 urllib3，&lt;span&gt;使用起来比urllib简洁很多。&lt;/span&gt;&lt;/span&gt;&lt;span&gt;上面的得文档有详细的介绍，所以如果想系统的学习就直接观看文档即可，我在这只是简单一下。&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span&gt;常见的操作属性&lt;/span&gt;&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; requests
response &lt;/span&gt;= requests.get(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;http://www.baidu.com&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;文本形式的网页源码&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(response.text)
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;二进制流形式打印&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(response.content)
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;返回JSON格式，可能抛出异常&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(response.json)
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;状态码&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(response.status_code)
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;请求url&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(response.url)
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;头信息&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(response.headers)
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;cookie信息&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(response.cookies)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;看一下运行结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/688939/201804/688939-20180402130843665-880925266.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt; &lt;strong&gt;传递参数&lt;/strong&gt;&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; requests
payload &lt;/span&gt;= {&lt;span&gt;'&lt;/span&gt;&lt;span&gt;key1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;value1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;key2&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;value2&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;key3&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;: None}
r &lt;/span&gt;= requests.get(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;http://httpbin.org/get&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, params=&lt;span&gt;payload)
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(r.url)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;运行结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/688939/201804/688939-20180402132907743-312132435.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;&lt;span&gt;传递&lt;span lang=&quot;EN-US&quot;&gt;headers&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;这个在&lt;a href=&quot;http://www.cnblogs.com/kmonkeywyl/p/8435533.html&quot; target=&quot;_blank&quot;&gt;python 3.x 爬虫基础---http headers详解&lt;/a&gt; 有详细的介绍不管是urllib还是request headers都是至关重要的，在这不过多叙述有兴趣的自己去看一下吧。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;请求方式&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
requests.get(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;http://httpbin.org/get&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
requests.post(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;http://httpbin.org/post&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
requests.put(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;http://httpbin.org/put&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
requests.delete(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;http://httpbin.org/delete&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
requests.head(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;http://httpbin.org/get&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
requests.options(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;http://httpbin.org/get&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;&lt;strong&gt;&lt;span&gt;post访问&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;通常，你想要发送一些编码为表单形式的数据—非常像一个&lt;span lang=&quot;EN-US&quot;&gt;HTML表单。 要实现这个，只需简单地传递一个字典给&lt;span lang=&quot;EN-US&quot;&gt; &lt;span lang=&quot;EN-US&quot;&gt;data&lt;span lang=&quot;EN-US&quot;&gt; &lt;span&gt;参数。你的数据字典 在发出请求时会自动编码为表单形式&lt;span lang=&quot;EN-US&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; requests
payload &lt;/span&gt;= {&lt;span&gt;'&lt;/span&gt;&lt;span&gt;key1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;value1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;key2&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;value2&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;}
r &lt;/span&gt;= requests.post(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;http://httpbin.org/post&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, data=&lt;span&gt;payload)
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(r.text)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;运行结果：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/688939/201804/688939-20180402134212418-840257295.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;传递文件：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; requests
url &lt;/span&gt;= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;http://httpbin.org/post&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
files &lt;/span&gt;= {&lt;span&gt;'&lt;/span&gt;&lt;span&gt;file&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: open(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;wyl.xls&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;rb&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)}
r &lt;/span&gt;= requests.post(url, files=files)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这个方式对你传递的复杂参数有很好的控制。&lt;/p&gt;
&lt;p&gt;传递字符串：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; requests
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; json
url &lt;/span&gt;= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;https://xxxxxxxx&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
payload &lt;/span&gt;= {&lt;span&gt;'&lt;/span&gt;&lt;span&gt;some&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;data&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;}
r &lt;/span&gt;= requests.post(url, data=&lt;span&gt;json.dumps(payload))
&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;或者&lt;/span&gt;
r = requests.post(url, json=payload)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;提示：选择适当的http访问。&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;超时设置：&lt;/strong&gt;&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
requests.get(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;http://xxxxx.com&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, timeout=1)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注：&lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;timeout&lt;/span&gt;&lt;/code&gt; 仅对连接过程有效，与响应体的下载无关。 &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;timeout&lt;/span&gt;&lt;/code&gt; 并不是整个下载响应的时间限制，而是如果服务器在 &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;timeout&lt;/span&gt;&lt;/code&gt; 秒内没有应答，将会引发一个异常。&lt;/p&gt;
&lt;h2&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;代理&lt;/span&gt;&lt;/span&gt;&lt;strong&gt;&lt;span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; requests
proxies &lt;/span&gt;=&lt;span&gt; {
  &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;http&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;http://10.10.1.10:3128&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
  &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;https&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;: &lt;span&gt;'&lt;/span&gt;&lt;span&gt;http://10.10.1.10:1080&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
}
requests.get(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;http://xxxx.com&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, proxies=proxies)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;防爬虫会涉及到ip限制，所以ip代理在爬虫中会常用到，还有vpn代理等等吧。&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;重定向与请求历史&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;默认情况下，除了 HEAD, Requests 会自动处理所有重定向。可以使用响应对象的 &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;history&lt;/span&gt;&lt;/code&gt; 方法来追踪重定向，head可以通过 &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;allow_redirects&lt;/span&gt;&lt;/code&gt; 参数禁用重定向处理。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; requests
s&lt;/span&gt;=requests.get(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;http://github.com&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(s.url)
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(s.status_code)
r&lt;/span&gt;=requests.get(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;http://github.com&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, allow_redirects=&lt;span&gt;False)
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(r.url)
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(r.history)
r&lt;/span&gt;=requests.head(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;http://github.com&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(r.url)
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(r.status_code)
r&lt;/span&gt;=requests.head(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;http://github.com&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, allow_redirects=&lt;span&gt;True)
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(r.url)
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(r.history)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;运行结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/688939/201804/688939-20180402140233303-2099264411.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;异常处理&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;所有Requests显式抛出的异常都继承自 &lt;code class=&quot;xref py py-exc docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;requests.exceptions.RequestException&lt;/span&gt;&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; requests
&lt;/span&gt;&lt;span&gt;from&lt;/span&gt; requests.exceptions &lt;span&gt;import&lt;/span&gt;&lt;span&gt; ReadTimeout,HTTPError,RequestException
&lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt;:
    response &lt;/span&gt;= requests.get(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;http://www.baidu.com&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,timeout=0.5&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(response.status_code)
&lt;/span&gt;&lt;span&gt;except&lt;/span&gt;&lt;span&gt; ReadTimeout:
    &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;timeout&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;except&lt;/span&gt;&lt;span&gt; HTTPError:
    &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;httperror&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;except&lt;/span&gt;&lt;span&gt; RequestException:
    &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;reqerror&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;xref py py-exc docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;HTTPError&lt;/span&gt;&lt;/code&gt;：如果 HTTP 请求返回了不成功的状态码&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;xref py py-exc docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;Timeout&lt;/span&gt;&lt;/code&gt;：请求超时&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;xref py py-exc docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;ConnectionError&lt;/span&gt;&lt;/code&gt;：遇到网络问题（如：DNS 查询失败、拒绝连接等）&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;xref py py-exc docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;TooManyRedirects&lt;/span&gt;&lt;/code&gt;：若请求超过了设定的最大重定向次数&lt;/p&gt;
&lt;p&gt;&lt;span&gt;RequestException：所有的requerst 异常&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;requests登陆的几种方法&lt;/h2&gt;
&lt;p&gt;通过账号与密码&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
loginurl=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;https://xxxxx.com/check&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;  
formData&lt;/span&gt;={&lt;span&gt;'&lt;/span&gt;&lt;span&gt;username&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;*****&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,  
          &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;password&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;*****&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;}  
headers&lt;/span&gt;={&lt;span&gt;'&lt;/span&gt;&lt;span&gt;User-Agent&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;Mozilla/5.0 (Windows NT 6.1; WOW64; rv:9.0.1) Gecko/20100101 Firefox/52.0&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;}  
res&lt;/span&gt;=req.post(loginurl,data=formData,headers=headers)  
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;通过cookies&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
    raw_cookies=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;k1=v1; k2=v2; k3=v3; &lt;/span&gt;
    cookies=&lt;span&gt;{}  
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; line &lt;span&gt;in&lt;/span&gt; raw_cookies.split(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;):  
        key,value&lt;/span&gt;=line.split(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,1&lt;span&gt;)  
        cookies[key]&lt;/span&gt;=&lt;span&gt;value  
    loginurl&lt;/span&gt;=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;http://xxxxxx.com&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;  
    res&lt;/span&gt;=req.post(loginurl,cookies=&lt;span&gt;cookies)  
    &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;&lt;span&gt; res.content  
    &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;访问其它的页面&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;  
    logi1&lt;/span&gt;=&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;http://xxxxx.htm&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;  
    &lt;span&gt;print&lt;/span&gt; req.post(logi1,cookies=cookies).content  
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;其中的cookies获取后将cookies的值以字典的方式存储，然后进行使用&lt;/p&gt;
&lt;p&gt;通过session&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import&lt;/span&gt;&lt;span&gt; requests as req  
s&lt;/span&gt;=&lt;span&gt;req.Session()  
param&lt;/span&gt;={&lt;span&gt;'&lt;/span&gt;&lt;span&gt;username&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;****&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,  
       &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;password&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;:&lt;span&gt;'&lt;/span&gt;&lt;span&gt;***&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;}  
url&lt;/span&gt;=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;https://xxxxxx&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;  
r&lt;/span&gt;=s.post(url,data=param,verify=False)  &lt;span&gt;#&lt;/span&gt;&lt;span&gt;登录获取登录后的session  &lt;/span&gt;
&lt;span&gt;print&lt;/span&gt;&lt;span&gt; r.content  
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt; s.get(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;http://xxxxxxx&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,verify=False).content  &lt;span&gt;#&lt;/span&gt;&lt;span&gt;通过session访问其它url&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果有ssl认证，可以在post的时候，加入认证的参数，取消ssl的认证校验 &lt;span class=&quot;cnblogs_code&quot;&gt;requests.post(url,data=dataform,verify=False)&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;参考文档：&lt;a href=&quot;https://www.crummy.com/software/BeautifulSoup/bs4/doc/index.zh.html&quot; target=&quot;_blank&quot;&gt;https://www.crummy.com/software/BeautifulSoup/bs4/doc/index.zh.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;是一个可以从HTML或XML文件中提取数据的Python库.它能够通过你喜欢的转换器实现惯用的文档导航,查找,修改文档的方式.urllib或者request请求完之后，就要对其操作，那么下面就来操作吧。其实可以把它理解为js/css中的选择器来使用。&lt;/p&gt;
&lt;h2&gt;解析器&lt;/h2&gt;
&lt;p&gt;Beautiful Soup支持Python标准库中的HTML解析器,还支持一些第三方的解析器,其中一个是LXML ，后面会有介绍。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/688939/201804/688939-20180403115622527-916888380.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;对象的种类&lt;/h2&gt;
&lt;p&gt;Beautiful Soup将复杂HTML文档转换成一个复杂的树形结构,每个节点都是Python对象,所有对象可以归纳为4种: &lt;tt class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;Tag&lt;/span&gt;&lt;/tt&gt; , &lt;tt class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;NavigableString&lt;/span&gt;&lt;/tt&gt; , &lt;tt class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;BeautifulSoup&lt;/span&gt;&lt;/tt&gt; , &lt;tt class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;Comment&lt;/span&gt;&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;#1.tag&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;此对象与html和xml 中的tag相同&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
soup = BeautifulSoup(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;&amp;lt;div class=&quot;className&quot;&amp;gt;wangyanling&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
tag &lt;/span&gt;=&lt;span&gt; soup.div
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;tag 对象输出：&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(tag)
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;查看类型&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(type(tag))
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;#获取tag的名字&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(tag.name)
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;#Attributes&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;#Attributes：获取tag的属性值 注tag是有多个属性&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(tag[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;])
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;添加属性&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
tag[&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;]=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;wylId&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;
&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(tag)
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;#删除属性&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;del&lt;/span&gt; tag[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(tag)
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;#多值属性&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
css_soup &lt;/span&gt;= BeautifulSoup(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;&amp;lt;p class=&quot;body strikeout&quot;&amp;gt;&amp;lt;/p&amp;gt;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(css_soup.p[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;])
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;#不明确的多值属性&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
id_soup &lt;/span&gt;= BeautifulSoup(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;&amp;lt;p id=&quot;my id&quot;&amp;gt;&amp;lt;/p&amp;gt;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(id_soup.p[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;])
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;# 重新赋值&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;#重复的值会进行合并&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
rel_soup &lt;/span&gt;= BeautifulSoup(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;&amp;lt;p&amp;gt;Back to the &amp;lt;a rel=&quot;index&quot;&amp;gt;homepage&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(rel_soup.a[&lt;span&gt;'&lt;/span&gt;&lt;span&gt;rel&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;])
rel_soup.a[&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;rel&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;] = [&lt;span&gt;'&lt;/span&gt;&lt;span&gt;index&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;contents&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(rel_soup.p)
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;xml 多值属性&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;'''&lt;/span&gt;&lt;span&gt;xml_soup = BeautifulSoup('&amp;lt;p class=&quot;body strikeout&quot;&amp;gt;&amp;lt;/p&amp;gt;', 'xml')
print(xml_soup.p['class'])&lt;/span&gt;&lt;span&gt;'''&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;输出结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/688939/201804/688939-20180403123642666-358315390.png&quot; alt=&quot;&quot;/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/688939/201804/688939-20180403123711260-1866638195.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;#2.&lt;tt class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;NavigableString&lt;/span&gt;&lt;/tt&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;pre&quot;&gt;操作标签吓得字符串，我们就要用到&lt;tt class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;NavigableString&lt;/span&gt;&lt;/tt&gt; 类&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
soup = BeautifulSoup(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;&amp;lt;b class=&quot;index&quot;&amp;gt;wyl good&amp;lt;/b&amp;gt;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;soup.string的类型（NavigableString）&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(soup.string)
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(type(soup.string))
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;替换字符串&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
soup.string.replace_with(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;王延领&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(soup)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;输出结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/688939/201804/688939-20180403124936462-299467698.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;pre&quot;&gt;注：一个字符串不能包含其它内容(tag能够包含字符串或是其它tag),字符串不支持 &lt;tt class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;.contents&lt;/span&gt;&lt;/tt&gt; 或 &lt;tt class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;.string&lt;/span&gt;&lt;/tt&gt; 属性或 &lt;tt class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;find()&lt;/span&gt;&lt;/tt&gt; 方法.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;#3.BeautifulSoup&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;表示的是一个文档的全部内容，大部分时候,可以把它当作 &lt;tt class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;Tag&lt;/span&gt;&lt;/tt&gt; 对象。它支持 &lt;span class=&quot;reference internal&quot;&gt;遍历文档树&lt;/span&gt; 和 &lt;span class=&quot;reference internal&quot;&gt;搜索文档树&lt;/span&gt; 中描述的大部分的方法.他是没有name合attribute的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;#4.&lt;tt class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;Comment&lt;/span&gt;&lt;/tt&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;pre&quot;&gt;以上三个对象几乎包换了你所有html与xml的内容，但是你是不是觉得还有一个东西没有涉及到，那就是html xml不编辑的注解。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
markup = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;lt;b&amp;gt;&amp;lt;!--我是一个注释不要意思--&amp;gt;&amp;lt;/b&amp;gt;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
soup &lt;/span&gt;=&lt;span&gt; BeautifulSoup(markup)
comment &lt;/span&gt;=&lt;span&gt; soup.b.string
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;html中的注释&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(comment)
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(type(comment))
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;输出结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/688939/201804/688939-20180403125804729-1135382056.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;看输出Comment是不是一个特殊的&lt;strong&gt;&lt;tt class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;NavigableString&lt;/span&gt;&lt;/tt&gt;&lt;/strong&gt;管他呢。&lt;/p&gt;
&lt;h2&gt;遍历文档树&lt;/h2&gt;
&lt;p&gt;上面有提到遍历文档树与搜索文档树，那么就来一起学习一下。其实从名字就能知道踏实去循环遍历获取html xml内容的。&lt;/p&gt;
&lt;p&gt;我们可以把它分为子节点，父节点，兄弟节点，是不是css/js选择器的感觉其实差不多。&lt;/p&gt;
&lt;p&gt;为了方便我写了一些html&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('4596f455-3946-4816-878f-518a8f048cac')&quot; readability=&quot;33&quot;&gt;&lt;img id=&quot;code_img_closed_4596f455-3946-4816-878f-518a8f048cac&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_4596f455-3946-4816-878f-518a8f048cac&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('4596f455-3946-4816-878f-518a8f048cac',event)&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_4596f455-3946-4816-878f-518a8f048cac&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;61&quot;&gt;
&lt;pre&gt;
html_doc = &lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span&gt;
&amp;lt;html&amp;gt;
    &amp;lt;head&amp;gt;
        &amp;lt;title&amp;gt;The Dormouse's story&amp;lt;/title&amp;gt;
        &amp;lt;stype&amp;gt;
        .body{
        color:red;
        }
        &amp;lt;/stype&amp;gt;
    &amp;lt;/head&amp;gt;
&amp;lt;p class=&quot;title&quot;&amp;gt;&amp;lt;b&amp;gt;这是一个不太好的html&amp;lt;/b&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;p class=&quot;story&quot;&amp;gt;这是一个段落
&amp;lt;a href=&quot;http:http://www.cnblogs.com/kmonkeywyl/p/8482962.html%20&quot; id=&quot;link1&quot;&amp;gt;python 3.x 爬虫基础---常用第三方库&amp;lt;/a&amp;gt;,
&amp;lt;a href=&quot;http://www.cnblogs.com/kmonkeywyl/p/8458442.html&quot; class=&quot;sister&quot; id=&quot;link2&quot;&amp;gt;python 3.x 爬虫基础---Urllib详解&amp;lt;/a&amp;gt;
&amp;lt;a href=&quot;http://www.cnblogs.com/kmonkeywyl/p/8435533.html&quot; class=&quot;sister&quot; id=&quot;link3&quot;&amp;gt;python 3.x 爬虫基础---http headers详解&amp;lt;/a&amp;gt;;
&amp;lt;/p&amp;gt;
&amp;lt;p class=&quot;story&quot;&amp;gt;...&amp;lt;/p&amp;gt;
&lt;/span&gt;&lt;span&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;#1.子节点&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
soup =&lt;span&gt; BeautifulSoup(html_doc)
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;1.利用tag的name获取信息&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(soup.head)
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;2.获取第一个p标签&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(soup.p)
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;3.获取第一p下的a&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(soup.p.b)
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;4.tag的 .contents 属性可以将tag的子节点以列表的方式输出&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
head_tag &lt;/span&gt;=&lt;span&gt; soup.head
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(head_tag)
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(head_tag.contents)
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;5.通过tag的 .children 生成器,可以对tag的子节点进行循环&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
i&lt;/span&gt;=&lt;span&gt;0
&lt;/span&gt;&lt;span&gt;for&lt;/span&gt; child &lt;span&gt;in&lt;/span&gt;&lt;span&gt; head_tag.children:
    &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(i)
    i&lt;/span&gt;=i+1
    &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(child)
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;6.descendants 操作soup的子孙节点（包括字符串）&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;for&lt;/span&gt; child &lt;span&gt;in&lt;/span&gt;&lt;span&gt; head_tag.descendants:
    &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(i)
    i&lt;/span&gt;=i+1
    &lt;span&gt;print&lt;/span&gt;&lt;span&gt;(child)
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;7.如果tag只有一个 NavigableString 类型子节点,那么这个tag可以使用 .string 得到子节点&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
s_titl&lt;/span&gt;=&lt;span&gt;soup.title
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(s_titl.string)
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;8.如果有多个字符串可以用strings循环获得&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;for&lt;/span&gt; string &lt;span&gt;in&lt;/span&gt;&lt;span&gt; soup.strings:
    &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(repr(string))
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;9.stripped_strings去除空格&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;for&lt;/span&gt; string &lt;span&gt;in&lt;/span&gt;&lt;span&gt; soup.stripped_strings:
    &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(repr(string))
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/688939/201804/688939-20180403133344603-1309999176.png&quot; alt=&quot;&quot; width=&quot;354&quot; height=&quot;289&quot;/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/688939/201804/688939-20180403133401636-971395734.png&quot; alt=&quot;&quot; width=&quot;327&quot; height=&quot;310&quot;/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/688939/201804/688939-20180403133428537-614020704.png&quot; alt=&quot;&quot; width=&quot;344&quot; height=&quot;300&quot;/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/688939/201804/688939-20180403133447688-1227470353.png&quot; alt=&quot;&quot; width=&quot;313&quot; height=&quot;391&quot;/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/688939/201804/688939-20180403133509456-884724899.png&quot; alt=&quot;&quot; width=&quot;338&quot; height=&quot;441&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; #2.父节点&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;通过 .parent 属性来获取某个元素的父节点&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
soup &lt;/span&gt;=&lt;span&gt; BeautifulSoup(html_doc)
title_tag &lt;/span&gt;=&lt;span&gt; soup.title
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(title_tag)
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;title 父节点&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(title_tag.parent)
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;html 的父节点&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
html_tag &lt;/span&gt;=&lt;span&gt; soup.html
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(type(html_tag.parent))
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;BeautifulSoup的父节点 &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(soup.prent)
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;通过元素的 .parents 属性可以递归得到元素的所有父辈节点&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
link &lt;/span&gt;=&lt;span&gt; soup.a
&lt;/span&gt;&lt;span&gt;for&lt;/span&gt; parent &lt;span&gt;in&lt;/span&gt;&lt;span&gt; link.parents:
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; parent &lt;span&gt;is&lt;/span&gt;&lt;span&gt; None:
        &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(parent)
    &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;:
        &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(parent.name)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;输出结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/688939/201804/688939-20180403134659993-1781642482.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/688939/201804/688939-20180403134718521-1044432072.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;#3.兄弟节点&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
sibling_soup = BeautifulSoup(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;lt;a&amp;gt;&amp;lt;b&amp;gt;text1&amp;lt;/b&amp;gt;&amp;lt;c&amp;gt;text2&amp;lt;/c&amp;gt;&amp;lt;/a&amp;gt;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;next_sibling|previous_sibling 寻找兄弟节点&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(sibling_soup.prettify())
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(sibling_soup.b.next_sibling)
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(sibling_soup.c.previous_sibling)
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;通过 .next_siblings 和 .previous_siblings 属性可以对当前节点的兄弟节点迭代输出&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
soup &lt;/span&gt;=&lt;span&gt; BeautifulSoup(html_doc)
&lt;/span&gt;&lt;span&gt;for&lt;/span&gt; sibling &lt;span&gt;in&lt;/span&gt;&lt;span&gt; soup.a.next_siblings:
    &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(repr(sibling))
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;输出结果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/688939/201804/688939-20180403135504575-1498395968.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt; 未完待续&lt;/strong&gt;&lt;/p&gt;
</description>
<pubDate>Tue, 03 Apr 2018 05:56:00 +0000</pubDate>
<dc:creator>王延领</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/kmonkeywyl/p/8482962.html</dc:identifier>
</item>
<item>
<title>从PRISM开始学WPF（七）MVVM（三）事件聚合器EventAggregator？ - 丑拒</title>
<link>http://www.cnblogs.com/hicolin/p/8707903.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/hicolin/p/8707903.html</guid>
<description>&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/hicolin/p/8694714.html&quot;&gt;从PRISM开始学WPF（一）WPF？&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/hicolin/p/8694828.html&quot;&gt;从PRISM开始学WPF（二）Prism？&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/hicolin/p/8694861.html&quot;&gt;从PRISM开始学WPF（三）Prism-Region？&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/hicolin/p/8694892.html&quot;&gt;从PRISM开始学WPF（四）Prism-Module？&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/hicolin/p/8694920.html&quot;&gt;从PRISM开始学WPF（五）MVVM（一）ViewModel？&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/hicolin/p/8694940.html&quot;&gt;从PRISM开始学WPF（六）MVVM（二）Command？&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;http://www.cnblogs.com/hicolin/p/8707903.html&quot;&gt;从PRISM开始学WPF（七）MVVM（三）事件聚合器EventAggregator？&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&quot;事件聚合器eventaggregator&quot;&gt;事件聚合器EventAggregator&lt;/h4&gt;
&lt;blockquote&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Event aggregation&lt;/strong&gt;. For communication across view models, presenters, or controllers when there is not a direct action-reaction expectation.&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;p&gt;(⊙﹏⊙)，Google一下：&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;pre&gt;
&lt;code&gt;事件聚合。在没有直接的行动反应期望的情况下，跨视图模型，演示者或控制者进行通信。&lt;/code&gt;
&lt;/pre&gt;&lt;/blockquote&gt;
&lt;p&gt;1是没有直接行动反应期望，2跨视图通信&lt;/p&gt;
&lt;p&gt;在具体了解这个概念之前，先看一个例子：&lt;/p&gt;
&lt;p&gt;通过简介，很容易想到聊天窗口，当你在一个视图A中输入文字点击发送之后，另外一个视图B会接收到这个消息，并将文字输出到屏幕上，而这个时候，视图A并不关心谁将收到信息，只管提交，视图B也不管是谁发来的消息，只管接收，并显示。&lt;/p&gt;
&lt;p&gt;关门，放代码：&lt;/p&gt;
&lt;p&gt;Setp1 在Shell窗口中，定义两个Region，分别来展示发送视图和接收视图&lt;/p&gt;
&lt;pre class=&quot;xaml&quot;&gt;
&lt;code&gt;    &amp;lt;Grid&amp;gt;
        &amp;lt;Grid.ColumnDefinitions&amp;gt;
            &amp;lt;ColumnDefinition /&amp;gt;
            &amp;lt;ColumnDefinition /&amp;gt;
        &amp;lt;/Grid.ColumnDefinitions&amp;gt;
        &amp;lt;ContentControl prism:RegionManager.RegionName=&quot;LeftRegion&quot; /&amp;gt;
        &amp;lt;ContentControl Grid.Column=&quot;1&quot; prism:RegionManager.RegionName=&quot;RightRegion&quot; /&amp;gt;
    &amp;lt;/Grid&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;blockquote readability=&quot;22&quot;&gt;
&lt;p&gt;&lt;em&gt;今天Typora更新了，代码块支持&lt;code&gt;xaml&lt;/code&gt;格式，以前都是用&lt;code&gt;xml-dtd&lt;/code&gt;，下面统一使用&lt;code&gt;xaml&lt;/code&gt;&lt;/em&gt;&lt;br/&gt;&lt;strong&gt;XAML&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这应该是教程中出现的比较复杂的&lt;strong&gt;xaml&lt;/strong&gt;，比较详细的使用了Grid，这里的Grid很像一个表格，在使用他布局之前，需要定义好列数，下面的代码为Grid设置了两个列&lt;/p&gt;
&lt;pre class=&quot;xaml&quot;&gt;
&lt;code&gt;       &amp;lt;Grid.ColumnDefinitions&amp;gt;
            &amp;lt;ColumnDefinition /&amp;gt;
            &amp;lt;ColumnDefinition /&amp;gt;
        &amp;lt;/Grid.ColumnDefinitions&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;那么能加行吗？那是当然的了，下面是为Grid添加两行，Height的Auto表示这个行的高度会根据内容高度进行适应：&lt;/p&gt;
&lt;pre class=&quot;xaml&quot;&gt;
&lt;code&gt;    &amp;lt;Grid.RowDefinitions&amp;gt;
        &amp;lt;RowDefinition Height=&quot;Auto&quot; /&amp;gt;
        &amp;lt;RowDefinition Height=&quot;Auto&quot; /&amp;gt;
    &amp;lt;/Grid.RowDefinitions&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;在使用Grid的时候，需要为控件指定Grid的位置&lt;code&gt;Grid.Column=&quot;1&quot;&lt;/code&gt;，1就是下标，都是从0开始的，1就代表第二列，当你不指定具体位置的时候，默认将控件插入Grid的0行0列，上面的&lt;code&gt;LeftRegion&lt;/code&gt;就是在首行首列的位置。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Setp2 新建两个Module，分别为ModuleA 和 ModuleB，ModuleA中的视图用来发送信息，ModuleB中的视图用来接收显示信息。&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;em&gt;Module的创建在第四节已经说明了&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;先看ModuleA的发送视图：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;MessageView.xaml&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&quot;xaml&quot;&gt;
&lt;code&gt;    &amp;lt;StackPanel&amp;gt;
        &amp;lt;TextBox Text=&quot;{Binding Message}&quot; Margin=&quot;5&quot;/&amp;gt;
        &amp;lt;Button Command=&quot;{Binding SendMessageCommand}&quot; Content=&quot;Send Message&quot; Margin=&quot;5&quot;/&amp;gt;
    &amp;lt;/StackPanel&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;MessageView中定义了一个文本框，进行了数据绑定，然后是一个按钮，绑定了一个SendMessageCommand命令。在我们点击Send Message按钮的时候，就会将Message显示到接收视图里去。&lt;/p&gt;
&lt;p&gt;再看ModuleB的显示视图：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;MessageList.xaml&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&quot;xaml&quot;&gt;
&lt;code&gt;    &amp;lt;Grid&amp;gt;
        &amp;lt;ListBox ItemsSource=&quot;{Binding Messages}&quot; /&amp;gt;
    &amp;lt;/Grid&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;就定义了一个ListBox来显示Message。ItemsSource绑定的应该是一个集合，不然怎么叫Source呢？&lt;/p&gt;
&lt;p&gt;接下来，看下Prism怎么实现跨视图模型通讯：&lt;/p&gt;
&lt;p&gt;首先，定义一个&lt;code&gt;MessageSentEvent&lt;/code&gt;类，继承&lt;code&gt;PubSubEvent&amp;lt;string&amp;gt;&lt;/code&gt;，string是因为这个事件接收的payload是字符串类型，&lt;code&gt;PubSubEvent&amp;lt;T&amp;gt;&lt;/code&gt;类负责连接发布者和订阅者，他负责维护订阅者列表并处理事件派发给订阅者。&lt;/p&gt;
&lt;pre class=&quot;c#&quot;&gt;
&lt;code&gt;using Prism.Events;
namespace UsingEventAggregator.Core
{
    public class MessageSentEvent : PubSubEvent&amp;lt;string&amp;gt;
    {
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;然后我们看下MessageViewModel：&lt;/p&gt;
&lt;pre class=&quot;c#&quot;&gt;
&lt;code&gt;using Prism.Commands;
using Prism.Events;
using Prism.Mvvm;
using UsingEventAggregator.Core;

namespace ModuleA.ViewModels
{
    public class MessageViewModel : BindableBase
    {
        IEventAggregator _ea;

        private string _message = &quot;Message to Send&quot;;
        public string Message
        {
            get { return _message; }
            set { SetProperty(ref _message, value); }
        }

        public DelegateCommand SendMessageCommand { get; private set; }

        public MessageViewModel(IEventAggregator ea)
        {
            _ea = ea;
            SendMessageCommand = new DelegateCommand(SendMessage);
        }

        private void SendMessage()
        {
            _ea.GetEvent&amp;lt;MessageSentEvent&amp;gt;().Publish(Message);
        }
    }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;先看我们熟悉的部分：&lt;/p&gt;
&lt;pre class=&quot;c#&quot;&gt;
&lt;code&gt;        private string _message = &quot;Message to Send&quot;;
        public string Message
        {
            get { return _message; }
            set { SetProperty(ref _message, value); }
        }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这是&lt;code&gt;&amp;lt;TextBox Text=&quot;{Binding Message}&quot; Margin=&quot;5&quot;/&amp;gt;&lt;/code&gt;中的Message&lt;/p&gt;
&lt;p&gt;然后定义了一个DelegateCommand&lt;/p&gt;
&lt;pre class=&quot;c#&quot;&gt;
&lt;code&gt;public DelegateCommand SendMessageCommand { get; private set; }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;接下来就是EventAggregator部分了：&lt;/p&gt;
&lt;p&gt;首先定义一个IEventAggregator：&lt;/p&gt;
&lt;pre class=&quot;c#&quot;&gt;
&lt;code&gt;IEventAggregator _ea;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;构造函数：&lt;/p&gt;
&lt;p&gt;ea是依赖注入容器提供的EventAggregator实例，还定义了命令SendMessageCommand的回调函数&lt;code&gt;SendMessage&lt;/code&gt;。&lt;/p&gt;
&lt;pre class=&quot;c#&quot;&gt;
&lt;code&gt;        public MessageViewModel(IEventAggregator ea)
        {
            _ea = ea;
            SendMessageCommand = new DelegateCommand(SendMessage);
        }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;SendMessge中通过MessageSentEvent发布Payload，这里Payload一定要匹配MessageSentEvent的Payload类型，上面我们继承&lt;code&gt;PubSubEvent&amp;lt;string&amp;gt;&lt;/code&gt;时使用的&lt;code&gt;String&lt;/code&gt;，不然的话，这在编译的时候就会抛出异常。&lt;/p&gt;
&lt;pre class=&quot;c#&quot;&gt;
&lt;code&gt;        private void SendMessage()
        {
            _ea.GetEvent&amp;lt;MessageSentEvent&amp;gt;().Publish(Message);
        }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;接下来，我们让ModuleB中的&lt;code&gt;MessageListViewModel&lt;/code&gt;获取这个Payload，并进行一些操作：&lt;/p&gt;
&lt;pre class=&quot;c#&quot;&gt;
&lt;code&gt;using Prism.Events;
using Prism.Mvvm;
using System.Collections.ObjectModel;
using UsingEventAggregator.Core;

namespace ModuleB.ViewModels
{
    public class MessageListViewModel : BindableBase
    {
        IEventAggregator _ea;

        private ObservableCollection&amp;lt;string&amp;gt; _messages;
        public ObservableCollection&amp;lt;string&amp;gt; Messages
        {
            get { return _messages; }
            set { SetProperty(ref _messages, value); }
        }

        public MessageListViewModel(IEventAggregator ea)
        {
            _ea = ea;
            Messages = new ObservableCollection&amp;lt;string&amp;gt;();

            _ea.GetEvent&amp;lt;MessageSentEvent&amp;gt;().Subscribe(MessageReceived);
        }

        private void MessageReceived(string message)
        {
            Messages.Add(message);
        }
    }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;代码阅读：&lt;/p&gt;
&lt;pre class=&quot;c#&quot;&gt;
&lt;code&gt;        private ObservableCollection&amp;lt;string&amp;gt; _messages;
        public ObservableCollection&amp;lt;string&amp;gt; Messages
        {
            get { return _messages; }
            set { SetProperty(ref _messages, value); }
        }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这是 &lt;code&gt;&amp;lt;ListBox ItemsSource=&quot;{Binding Messages}&quot; /&amp;gt;&lt;/code&gt; 中的Messages，他的类型是&lt;code&gt;ObservableCollection&lt;/code&gt;，具体为什么是 ObservableCollection而不是List！后面再说。&lt;/p&gt;
&lt;pre class=&quot;c#&quot;&gt;
&lt;code&gt;        public MessageListViewModel(IEventAggregator ea)
        {
            _ea = ea;
            Messages = new ObservableCollection&amp;lt;string&amp;gt;();

            _ea.GetEvent&amp;lt;MessageSentEvent&amp;gt;().Subscribe(MessageReceived);
        }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这里订阅了MessageSentEvent，并且处理Payload，处理Payload的方法是MessageReceived，这个方法在Messages新增一条记录。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;事件聚合器可以有多个发布者和多个订阅者。&lt;/strong&gt;&lt;/p&gt;
</description>
<pubDate>Tue, 03 Apr 2018 05:12:00 +0000</pubDate>
<dc:creator>丑拒</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/hicolin/p/8707903.html</dc:identifier>
</item>
<item>
<title>ASP.NET MVC编程——单元测试 - 甜橙很酸</title>
<link>http://www.cnblogs.com/hdwgxz/p/8707878.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/hdwgxz/p/8707878.html</guid>
<description>&lt;p&gt;&lt;strong&gt;1&lt;span&gt;自动化测试基本概念&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;自动化测试分为：单元测试，集成测试，验收测试。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;单元测试&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;检验被测单元的功能，被测单元一般为低级别的组件，如一个类或类方法。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;单元测试要满足四个条件：自治的，可重复的，独立的，快速的。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;自治的是指：关注于验证某个单一功能，例如只关注于类的某个方法的功能。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;可重复的是指：无论何时允许同一段测试代码都应该得到相同的结果。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;独立的是指：不依赖与其他任何系统或单元测试。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;快速的是指：所有测试都应快速地完成，&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;集成测试&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;验证两个或多个组件之间的交互。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;验收测试&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;确保已构建的系统实现了既定的全部功能。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2&lt;span&gt;准备进行单元测试&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;创建单元测试项目并执行测试应该依据一定的准则，运用一些技巧或工具，下面列举了常用的技巧和工具。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;命名规则&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;测试类应以被测试的单元命名，测试方法的名称应能够描述待验证的行为。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;使用特性&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;TestClassAttribute&lt;span&gt;：&lt;/span&gt;&lt;span&gt;标识包含测试方法的类&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;TestMethodAttribute&lt;span&gt;：&lt;/span&gt;&lt;span&gt;用于标识测试方法&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;TestInitializeAttribute&lt;span&gt;：&lt;/span&gt;&lt;span&gt;标识在测试之前要运行的方法，从而分配并配置测试类中的所有测试所需的资源&lt;/span&gt;&lt;span&gt;。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;ExpectedExceptionAttribute&lt;span&gt;：&lt;/span&gt;&lt;span&gt;表示测试方法的执行过程中应引发异常&lt;/span&gt;&lt;span&gt;，&lt;/span&gt;&lt;span&gt;用来判断抛出的异常是否符合预期。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Arrange-Act-Assert&lt;span&gt;模式&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;此模式又被称为&lt;/span&gt;3A&lt;span&gt;模式，&lt;/span&gt;&lt;span&gt;Arrange&lt;/span&gt;&lt;span&gt;，准备测试环境；&lt;/span&gt;&lt;span&gt;Act&lt;/span&gt;&lt;span&gt;，调用被测方法；&lt;/span&gt;&lt;span&gt;Assert&lt;/span&gt;&lt;span&gt;，断言。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;例&lt;/span&gt;1&lt;span&gt;：标准的&lt;/span&gt;&lt;span&gt;3A&lt;/span&gt;&lt;span&gt;模式，且只测试一个功能，即返回视图对象是否为&lt;/span&gt;&lt;span&gt;null&lt;/span&gt;&lt;span&gt;，虽然待验证的点有好几个，但我们一次只验证一个。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;    [TestClass]
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; HomeTest
    {
        [TestMethod]
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; TestCacheExeActionResultNull()
        {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;Arrange&lt;/span&gt;
            HomeController hc = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; HomeController();

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;Act&lt;/span&gt;
            ViewResult vr =&lt;span&gt; hc.CacheExe();

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;Assert&lt;/span&gt;
&lt;span&gt;            Assert.IsNotNull(vr);
        }
     }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;例&lt;/span&gt;2&lt;span&gt;：验证参数为&lt;/span&gt;&lt;span&gt;null&lt;/span&gt;&lt;span&gt;时，是否会抛出预期的异常类型，即&lt;/span&gt;ArgumentNullException&lt;span&gt;类型&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;    [TestClass]
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; AccountTest
    {
        [TestMethod]
        [ExpectedException(&lt;/span&gt;&lt;span&gt;typeof&lt;/span&gt;&lt;span&gt;(ArgumentNullException))]
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; TestLogin()
        {
            AccountController ac &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; AccountController();

            ac.Login(&lt;/span&gt;&lt;span&gt;null&lt;/span&gt;&lt;span&gt;);
        }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;模拟依赖&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;为达到测试目的，使用假的组件模拟真实组件。有两种方式模拟依赖：一种是创建模拟对象，另一种是使用框架。为能够模拟依赖，使用存储库模式。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;例&lt;/span&gt;1&lt;span&gt;：自定义模拟对象。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;控制器：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; BookController : Controller
    {
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; IRepository repository;
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; BookController()
            : &lt;/span&gt;&lt;span&gt;base&lt;/span&gt;&lt;span&gt;()
        { }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; BookController(IRepository repository)
        {
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.repository =&lt;span&gt; repository;
        }
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; GET: Book&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; ViewResult GetBook(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; id)
        {
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; book =&lt;span&gt; repository.GetBook(id);
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; View(book);
        }

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;其他代码&lt;/span&gt;
    }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;实现&lt;/span&gt;Repository&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; BookRepository:IRepository
{

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; Book GetBook(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; id)
        {
            &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; NotImplementedException();
        }

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;其他代码&lt;/span&gt;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;定义&lt;/span&gt;IRepository&lt;span&gt;接口&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt;&lt;span&gt; IRepository
{
      Book GetBook(&lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt; id);

       &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;其他代码&lt;/span&gt;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;实体&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Book
{
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; Id { &lt;span&gt;set&lt;/span&gt;; &lt;span&gt;get&lt;/span&gt;&lt;span&gt;; }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;模拟对象&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; MocBookRepository : IRepository
{
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; Book bk;

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; MocBookRepository(Book bk)
        {
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.bk =&lt;span&gt; bk;
        }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; Book GetBook(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; id)
        {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; bk;
        }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;测试类&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;    [TestClass]
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; BookTest
    {
        [TestMethod]
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; TestGetBook()
        {
            Book exceptedBk &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Book
            {
                Id &lt;/span&gt;= &lt;span&gt;1&lt;/span&gt;&lt;span&gt;
            };
            BookController bc &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; BookController(&lt;span&gt;new&lt;/span&gt;&lt;span&gt; MocBookRepository(exceptedBk));

            ViewResult result &lt;/span&gt;=&lt;span&gt; bc.GetBook(exceptedBk.Id);

            Assert.AreEqual(exceptedBk,result.Model);
        }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;例&lt;/span&gt;2：使用模拟框架Moq&lt;/p&gt;
&lt;p&gt;&lt;span&gt;使用&lt;/span&gt;nuget下载Moq,截图如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1024858/201804/1024858-20180403124400545-1927189501.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;使用&lt;/span&gt;Moq:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;        [TestMethod]
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; TestGetBook()
        {
            Book exceptedBk &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Book
            {
                Id &lt;/span&gt;= &lt;span&gt;1&lt;/span&gt;&lt;span&gt;
            };

            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; mokRepository = &lt;span&gt;new&lt;/span&gt; Moq.Mock&amp;lt;IRepository&amp;gt;&lt;span&gt;();
            mokRepository.Setup(rep &lt;/span&gt;=&amp;gt;&lt;span&gt; rep.GetBook(exceptedBk.Id)).Returns(exceptedBk);

            BookController bc &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; BookController(mokRepository.Object);
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; result =&lt;span&gt; bc.GetBook(exceptedBk.Id);

            Assert.AreEqual(exceptedBk, result.Model);
        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;重构：去除重复代码&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;例：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;[TestClass]
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; HomeTest
{
        [TestMethod]
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; TestCacheExeActionResultNull()
        {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;Arrange&lt;/span&gt;
            HomeController hc = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; HomeController();

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;Act&lt;/span&gt;
            ViewResult vr =&lt;span&gt; hc.CacheExe();

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;Assert&lt;/span&gt;
&lt;span&gt;            Assert.IsNotNull(vr);
        }

        [TestMethod]
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; TestCacheExeActionValue()
        {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;Arrange&lt;/span&gt;
            HomeController hc = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; HomeController();

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;Act&lt;/span&gt;
            ViewResult vr =&lt;span&gt; hc.CacheExe();

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;Assert&lt;/span&gt;
            Assert.AreEqual(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;缓存部分&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,vr.ViewBag.Sign);
        }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;上面面的两个测试方法含有共同的代码，应将其提取，并作为测试所需的资源，先于测试方法执行。下面是改进后的代码。&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;    [TestClass]
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; HomeTest
    {
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; HomeController hc;
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; ViewResult vr;

        [TestInitialize]
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; InitializeContext()
        {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;Arrange&lt;/span&gt;
            hc = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; HomeController();

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;Act&lt;/span&gt;
            vr =&lt;span&gt; hc.CacheExe();
        }
        [TestMethod]
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; TestCacheExeActionResultNull()
        {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;Assert&lt;/span&gt;
&lt;span&gt;            Assert.IsNotNull(vr);
        }

        [TestMethod]
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; TestCacheExeActionValue()
        {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;Assert&lt;/span&gt;
            Assert.AreEqual(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;缓存部分&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,vr.ViewBag.Sign);
        }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;3 测试ASP.NET MVC项目&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3.1模拟HttpContext对象&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; HttpContextForController(Controller controller)
        {
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; contextBaseMock = &lt;span&gt;new&lt;/span&gt; Mock&amp;lt;HttpContextBase&amp;gt;&lt;span&gt;();
            contextBaseMock.Setup(c&lt;/span&gt;=&amp;gt;c).Returns(&lt;span&gt;new&lt;/span&gt;&lt;span&gt; CustomHttpContext());
            controller.ControllerContext &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; ControllerContext(&lt;span&gt;new&lt;/span&gt; RequestContext(contextBaseMock.Object, &lt;span&gt;new&lt;/span&gt;&lt;span&gt; RouteData()), controller);
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; CustomHttpContext : HttpContextBase
        {
 
        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;3.2模拟Request对象&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; contextBaseMock = &lt;span&gt;new&lt;/span&gt; Mock&amp;lt;HttpContextBase&amp;gt;&lt;span&gt;();
&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; method = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;get&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
contextBaseMock.Setup(c &lt;/span&gt;=&amp;gt;&lt;span&gt; c.Request.HttpMethod).Returns(method);
&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; mockHttpContext =&lt;span&gt; contextBaseMock.Object;
或
&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; request = &lt;span&gt;new&lt;/span&gt; Mock&amp;lt;HttpRequestBase&amp;gt;&lt;span&gt;();
&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; headerValue = &lt;span&gt;new&lt;/span&gt; NameValueCollection(){};&lt;span&gt;//&lt;/span&gt;&lt;span&gt;替换为具体实现&lt;/span&gt;
request.Setup(c =&amp;gt;&lt;span&gt;c.Headers).Returns(headerValue);
&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; mockRequest = request.Object;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;3.3模拟&lt;/strong&gt;&lt;strong&gt;HttpResponse&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;对象&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; contextBaseMock = &lt;span&gt;new&lt;/span&gt; Mock&amp;lt;HttpContextBase&amp;gt;&lt;span&gt;();
contextBaseMock.Setup(c &lt;/span&gt;=&amp;gt; c.Response.StatusCode).Returns(&lt;span&gt;200&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; mockHttpContext =&lt;span&gt; contextBaseMock.Object;
或
&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; response = &lt;span&gt;new&lt;/span&gt; Mock&amp;lt;HttpResponseBase&amp;gt;&lt;span&gt;();
&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; headerValue = &lt;span&gt;new&lt;/span&gt; NameValueCollection(){};&lt;span&gt;//&lt;/span&gt;&lt;span&gt;替换为具体实现&lt;/span&gt;
response.Setup(c =&amp;gt;&lt;span&gt; c.Headers).Returns(headerValue);
&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; mockRequest = response.Object;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;3.4模拟缓存对象&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;模拟&lt;/span&gt;Session对象&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; contextBaseMock = &lt;span&gt;new&lt;/span&gt; Mock&amp;lt;HttpContextBase&amp;gt;&lt;span&gt;();
contextBaseMock.Setup(c &lt;/span&gt;=&amp;gt; c.Session.Timeout).Returns(&lt;span&gt;10&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; mockHttpContext = contextBaseMock.Object;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;模拟&lt;/span&gt;Cache对象&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; contextBaseMock = &lt;span&gt;new&lt;/span&gt; Mock&amp;lt;HttpContextBase&amp;gt;&lt;span&gt;();
contextBaseMock.Setup(c &lt;/span&gt;=&amp;gt; c.Session.Timeout).Returns(&lt;span&gt;10&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; mockHttpContext = contextBaseMock.Object;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;3.5测试控制器&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;基本代码如下，其中&lt;/span&gt;&lt;span&gt;断言部分会根据下面的测试项不同而不同&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; TestGetBook()
        {
            Book exceptedBk &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Book
            {
                Id &lt;/span&gt;= &lt;span&gt;1&lt;/span&gt;&lt;span&gt;
            };

            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; mokRepository = &lt;span&gt;new&lt;/span&gt; Moq.Mock&amp;lt;IRepository&amp;gt;&lt;span&gt;();
            mokRepository.Setup(rep &lt;/span&gt;=&amp;gt;&lt;span&gt; rep.GetBook(exceptedBk.Id)).Returns(exceptedBk);

            BookController bc &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; BookController(mokRepository.Object);
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; result =&lt;span&gt; bc.GetBook(exceptedBk.Id);
&lt;br/&gt;&lt;/span&gt;&lt;span&gt;            //&lt;/span&gt;&lt;span&gt;断言部分&lt;/span&gt;
&lt;span&gt;                        
        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;测试控制器操作的返回类型&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
Assert.IsInstanceOfType(result, &lt;span&gt;typeof&lt;/span&gt;(ViewResult));
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;测试返回的视图模型数据&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;Assert.AreEqual(exceptedBk, result.Model);
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;或&lt;/span&gt;
Assert.AreEqual(exceptedBk.Id,result.Model.Id);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;测试重定向&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;控制器操作：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt;&lt;span&gt; RedirectResult Turn()
{
     &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; Redirect(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;~/home/index&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;测试方法：&lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;        [TestMethod]
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; TestTurn()
        {
            BookController bc &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; BookController();

            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; result =&lt;span&gt; bc.Turn();

            Assert.AreEqual(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;~/home/index&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, result.Url);
        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;3.6&lt;span&gt;测试过滤器&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;虽然可能对控制器应用了过滤器，但单元测试调用控制器时是不会调用过滤器的；此外我们注册的全局过滤器也不会被调用。要测试过滤器，就要模拟&lt;/span&gt;HTTP&lt;span&gt;上下文、请求等。此外，建议将具体的验证逻辑代码封装起来，这样可以将其作为普通的类来测试。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;例：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;动作过滤器定义：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; CustomActionFilterAttribute : ActionFilterAttribute
        {
            &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;override&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; OnActionExecuted(ActionExecutedContext filterContext)
            {
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;具体实现&lt;/span&gt;
&lt;span&gt;            }

            &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;override&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; OnActionExecuting(ActionExecutingContext filterContext)
            {
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;具体实现&lt;/span&gt;
&lt;span&gt;            }
        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;权限过滤器定义：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; CustomAuthorizeAttribute : AuthorizeAttribute
{
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; UserRole role;
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; CustomAuthorizeAttribute(UserRole role)
        {
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.role =&lt;span&gt; role;
        }
        &lt;/span&gt;&lt;span&gt;protected&lt;/span&gt; &lt;span&gt;override&lt;/span&gt; &lt;span&gt;bool&lt;/span&gt;&lt;span&gt; AuthorizeCore(HttpContextBase httpContext)
        {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;具体实现&lt;/span&gt;
&lt;span&gt;        }
        &lt;/span&gt;&lt;span&gt;protected&lt;/span&gt; &lt;span&gt;override&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; HandleUnauthorizedRequest(AuthorizationContext filterContext)
        {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;具体实现&lt;/span&gt;
&lt;span&gt;        }
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;override&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; OnAuthorization(AuthorizationContext filterContext)
        {
            &lt;/span&gt;&lt;span&gt;base&lt;/span&gt;&lt;span&gt;.OnAuthorization(filterContext);
        }
}

&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;enum&lt;/span&gt;&lt;span&gt; UserRole
{
        Org &lt;/span&gt;= &lt;span&gt;1&lt;/span&gt;&lt;span&gt;,
        Vip &lt;/span&gt;= &lt;span&gt;2&lt;/span&gt;&lt;span&gt;,
        Guest &lt;/span&gt;= &lt;span&gt;3&lt;/span&gt;&lt;span&gt;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;验证动作过滤器&lt;/span&gt;CustomActionFilterAttribute&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;            //&lt;/span&gt;&lt;span&gt;模拟Request&lt;/span&gt;
            &lt;span&gt;var&lt;/span&gt; request = &lt;span&gt;new&lt;/span&gt; Mock&amp;lt;HttpRequestBase&amp;gt;&lt;span&gt;();
            request.SetupGet(r &lt;/span&gt;=&amp;gt; r.HttpMethod).Returns(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;GET&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            request.SetupGet(r &lt;/span&gt;=&amp;gt; r.Url).Returns(&lt;span&gt;new&lt;/span&gt; Uri(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;http://basesit/controller/action&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;));

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置HttpContext，用模拟的Request设置HttpContext&lt;/span&gt;
            &lt;span&gt;var&lt;/span&gt; httpContext = &lt;span&gt;new&lt;/span&gt; Mock&amp;lt;HttpContextBase&amp;gt;&lt;span&gt;();
            httpContext.SetupGet(c &lt;/span&gt;=&amp;gt;&lt;span&gt; c.Request).Returns(request.Object);

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;模拟ActionExecutedContext&lt;/span&gt;
            &lt;span&gt;var&lt;/span&gt; actionExecutedContext = &lt;span&gt;new&lt;/span&gt; Mock&amp;lt;ActionExecutedContext&amp;gt;&lt;span&gt;();
            actionExecutedContext.SetupGet(c &lt;/span&gt;=&amp;gt;&lt;span&gt; c.HttpContext).Returns(httpContext.Object);

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;实例化待测试过滤器CustomActionFilterAttribute&lt;/span&gt;
            &lt;span&gt;var&lt;/span&gt; customActionFilter = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; CustomActionFilterAttribute();
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;调用执行方法，执行测试&lt;/span&gt;
&lt;span&gt;            customActionFilter.OnActionExecuted(actionExecutedContext.Object);

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;模拟ActionExecutingContext&lt;/span&gt;
            &lt;span&gt;var&lt;/span&gt; actionExecutingContext = &lt;span&gt;new&lt;/span&gt; Mock&amp;lt;ActionExecutingContext&amp;gt;&lt;span&gt;();
            actionExecutingContext.SetupGet(c &lt;/span&gt;=&amp;gt;&lt;span&gt; c.HttpContext).Returns(httpContext.Object);

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;调用执行方法，执行测试&lt;/span&gt;
            customActionFilter.OnActionExecuting(actionExecutingContext.Object);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;验证权限过滤器&lt;/span&gt;CustomAuthorizeAttribute&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
            &lt;span&gt;//&lt;/span&gt;&lt;span&gt;模拟Request&lt;/span&gt;
            &lt;span&gt;var&lt;/span&gt; request = &lt;span&gt;new&lt;/span&gt; Mock&amp;lt;HttpRequestBase&amp;gt;&lt;span&gt;();
            request.SetupGet(r &lt;/span&gt;=&amp;gt; r.HttpMethod).Returns(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;GET&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            request.SetupGet(r &lt;/span&gt;=&amp;gt; r.Url).Returns(&lt;span&gt;new&lt;/span&gt; Uri(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;http://basesit/controller/action&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;));

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;设置HttpContext，用模拟的Request设置HttpContext&lt;/span&gt;
            &lt;span&gt;var&lt;/span&gt; httpContext = &lt;span&gt;new&lt;/span&gt; Mock&amp;lt;HttpContextBase&amp;gt;&lt;span&gt;();
            httpContext.SetupGet(c &lt;/span&gt;=&amp;gt;&lt;span&gt; c.Request).Returns(request.Object);
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;模拟AuthorizationContext&lt;/span&gt;
            &lt;span&gt;var&lt;/span&gt; authorizationContext = &lt;span&gt;new&lt;/span&gt; Mock&amp;lt;AuthorizationContext&amp;gt;&lt;span&gt;();
            authorizationContext.SetupGet(c &lt;/span&gt;=&amp;gt;&lt;span&gt; c.HttpContext).Returns(httpContext.Object);

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;实例化待测试权限过滤器：CustomAuthorizeAttribute&lt;/span&gt;
            &lt;span&gt;var&lt;/span&gt; authorizationFilter = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; CustomAuthorizeAttribute(UserRole.Guest);
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;调用待测试方法&lt;/span&gt;
            authorizationFilter.OnAuthorization(authorizationContext.Object);
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;3.7&lt;span&gt;测试视图&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;视图的测试主要通过实际运行，然后观察浏览器渲染出来的结果，由于浏览器种类繁多，适配是也随之变成了比较繁重的任务，依靠自动化测试不是最佳选择，至少目前不是最佳选择，但在此还是给出一个自动化测试的例子，这里使用&lt;/span&gt;WatiN&lt;span&gt;测试套件，使用&lt;/span&gt;&lt;span&gt;NuGet&lt;/span&gt;&lt;span&gt;下载测试套件：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1024858/201804/1024858-20180403125416640-112129170.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;测试代码&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;        [TestMethod]
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; TestGetBookView()
        {
            &lt;/span&gt;&lt;span&gt;string&lt;/span&gt; url = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;http://localhost/MVCPointApp/Book/GetBook/1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;using&lt;/span&gt; (&lt;span&gt;var&lt;/span&gt; browser = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; FireFox(url))
            {
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; bookDiv = browser.Div(Find.ByClass(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;pro_book&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;));
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; title =&lt;span&gt; bookDiv.Element(Find.First()).Text;

                Assert.IsFalse(&lt;/span&gt;&lt;span&gt;string&lt;/span&gt;&lt;span&gt;.IsNullOrWhiteSpace(title));
                Assert.AreEqual(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;机器学习算法原理与编程实践&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, title);
            }
        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;3.8&lt;span&gt;测试路由&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;配置的路由模板为：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
routes.IgnoreRoute(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;{resource}.axd/{*pathInfo}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
routes.MapRoute(
                name: &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Default&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                url: &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;{controller}/{action}/{id}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                defaults: &lt;/span&gt;&lt;span&gt;new&lt;/span&gt; { controller = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Home&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, action = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Index&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, id =&lt;span&gt; UrlParameter.Optional }
            );&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;测试被忽略的路由&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;        [TestMethod]
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; TestIgnoreRoute()
        {
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; mock = &lt;span&gt;new&lt;/span&gt; Mock&amp;lt;HttpContextBase&amp;gt;&lt;span&gt;();
            mock.Setup(m &lt;/span&gt;=&amp;gt; m.Request.AppRelativeCurrentExecutionFilePath).Returns(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;~/book.axd&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; routes = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; RouteCollection();

            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; routeData =&lt;span&gt; routes.GetRouteData(mock.Object);

            Assert.IsNull(routeData);
            Assert.IsInstanceOfType(routeData.RouteHandler,&lt;/span&gt;&lt;span&gt;typeof&lt;/span&gt;&lt;span&gt;(StopRoutingHandler));
        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;测试可匹配的路由&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;        [TestMethod]
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; TestMatchedRoute()
        {
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; mock = &lt;span&gt;new&lt;/span&gt; Mock&amp;lt;HttpContextBase&amp;gt;&lt;span&gt;();
            mock.Setup(m &lt;/span&gt;=&amp;gt; m.Request.AppRelativeCurrentExecutionFilePath).Returns(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;~/book/getbook/1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; routes = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; RouteCollection();

            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; routeData =&lt;span&gt; routes.GetRouteData(mock.Object);

            Assert.IsNull(routeData);
            Assert.AreEqual(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Book&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, routeData.Values[&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;controller&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;]);
            Assert.AreEqual(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;GetBook&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, routeData.Values[&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;action&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;]);
            Assert.AreEqual(UrlParameter.Optional, routeData.Values[&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;]);

        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;4&lt;span&gt;启发：开发可测试的程序&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;即使对下面的概念没有感觉，当实施一次单元测试以后就会深有体会。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;基于接口编程&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;基于接口的编程，使得可以在测试的时候指定具体的类型，这样解除了依赖，方便模拟组件。我们常见的相关概念是控制反转（依赖注入）&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;使用&lt;/span&gt;IoC&lt;span&gt;框架&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;使用成熟稳定的&lt;/span&gt;Ioc&lt;span&gt;框架减少待测试的代码量，减轻测试任务量。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;存储库模式&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;使用存储库模式，将数据访问逻辑与业务逻辑、控制器分离开来，测试控制器时可以借助此模式方便地模拟依赖，这样将模块合理地切分，实现测试只关注单一功能。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;面向切面编程（&lt;/span&gt;APO&lt;span&gt;）&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;面向切面编程是面向对象编程的有力补充，降低业务处理中各个部分之间的耦合性，便于实施单元测试。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;测试驱动开发（&lt;/span&gt;TDD&lt;span&gt;）&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;遵循&lt;/span&gt;“红灯&lt;span&gt;-&lt;/span&gt;&lt;span&gt;绿灯&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;重构”的原则：从失败的情况开始测试，然后编写最少的代码让测试通过。为了能尽快地通过测试，编写的最少量的代码可能是未经过深思熟虑的，这种情况下就要重构。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;参考：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1.Jess Chadwick/Todd Snyder/Hrusikesh Panda，徐雷/徐扬译。ASP.NET MVC4 Web编程&lt;/p&gt;
&lt;p&gt;2.Jon Galloway/Phil Haack/Brad Wilson/K. Scott Allen，孙远帅/邹权译  ASP.NET MVC4 高级编程（第四版）&lt;/p&gt;
&lt;p&gt;3.Dino Esposito著，潘丽臣译，ASP.NET MVC5编程实战&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------------&lt;/p&gt;
&lt;p&gt;转载与引用请注明出处。&lt;/p&gt;
&lt;p&gt;时间仓促，水平有限，如有不当之处，欢迎指正。&lt;/p&gt;
</description>
<pubDate>Tue, 03 Apr 2018 05:03:00 +0000</pubDate>
<dc:creator>甜橙很酸</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/hdwgxz/p/8707878.html</dc:identifier>
</item>
</channel>
</rss>