<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>零基础想学习大数据要了解的知识 - 大数据大咖</title>
<link>http://www.cnblogs.com/dashujudaka/p/9305350.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/dashujudaka/p/9305350.html</guid>
<description>&lt;p&gt;1.了解大数据理论&lt;br/&gt;要学习大数据你至少应该知道什么是大数据，大数据一般运用在什么领域。对大数据有一个大概的了解，你才能清楚自己对大数据究竟是否有兴趣，如果对大数据一无所知就开始学习，有可能学着学着发现自己其实不喜欢，这样浪费了时间精力，可能还浪费了金钱。所以如果想要学习大数据，需要先对大数据有一个大概的了解。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;推荐一个大数据学习群 119599574晚上20:10都有一节【免费的】大数据直播课程，专注大数据分析方法,大数据编程，大数据仓库，大数据案例，人工智能,数据挖掘都是纯干货分享，&lt;img src=&quot;https://images2018.cnblogs.com/blog/1428094/201807/1428094-20180713154310114-1050752580.jpg&quot; alt=&quot;&quot;/&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;2.计算机编程语言的学习。&lt;br/&gt;对于零基础的朋友，一开始入门可能不会太简单。因为需要掌握一门计算机的编程语言，大家都知道计算机编程语言有很多，比如：R，C++，JAVA等等。目前大多数机构都是教JAVA，我们都知道Java是目前使用最为广泛的网络编程语言之一。他容易学而且很好用，如果你学习过C++语言，你会觉得C++和Java很像，因为Java中许多基本语句的语法和C++一样，像常用的循环语句，控制语句等和C++几乎一样，其实Java和C++是两种完全不同的语言，Java只需理解一些基本的概念，就可以用它编写出适合于各种情况的应用程序。Java略去了&lt;img src=&quot;https://images2018.cnblogs.com/blog/1428094/201807/1428094-20180713154326287-1303074399.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;运算符重载、多重继承等模糊的概念，C++中许多容易混淆的概念，有的被Java弃之不用了，或者以一种更清楚更容易理解的方式实现，因此Java语言相对是简单的。&lt;br/&gt;在学习Java的时候，我们一般需要学习这些课程： HTML&amp;amp;CSS&amp;amp;JS，java的基础，JDBC与数据库，JSP java web技术， jQuery与AJAX技术，SpringMVC、Mybatis、Hibernate等等。这些课程都能帮助我们更好了解Java，学会运用Java。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1428094/201807/1428094-20180713154348087-2125947783.jpg&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;3.大数据相关课程的学习。&lt;br/&gt;学完了编程语言之后，一般就可以进行大数据部分的课程学习了。一般来说，学习大数据部分的时间比学习Java的时间要短。大数据课程，包括大数据技术入门，海量数据高级分析语言，海量数据存储分布式存储，以及海量数据分析分布式计算等部分，Linux，Hadoop，Scala, HBase, Hive, Spark等等专业课程。如果要完整的学习大数据的话，这些课程都是必不可少的。&lt;/p&gt;
</description>
<pubDate>Fri, 13 Jul 2018 07:45:00 +0000</pubDate>
<dc:creator>大数据大咖</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/dashujudaka/p/9305350.html</dc:identifier>
</item>
<item>
<title>使用vw,vh对页面进行布局 - 徐伟杰</title>
<link>http://www.cnblogs.com/GeekXwj/p/9305348.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/GeekXwj/p/9305348.html</guid>
<description>&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
        body &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
            margin&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 0&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            padding&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 0&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
        
        #max &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
            width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 100vw&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 100vh&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            text-align&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; center&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            color&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; white&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            font-weight&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; bold&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
        
        #top,
        #center,
        #footer &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
            width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 100vw&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
        
        #top &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
            height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 10vh&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            background&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; red&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
        
        #center,
        #center-left,
        #center-right &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
            height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 80vh&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
        
        #footer &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
            height&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 10vh&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            background&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; blue&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
        
        #center-left &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
            width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 20vw&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            background&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; orange&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
        &lt;span&gt;}&lt;/span&gt;&lt;span&gt;
        
        #center-right &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;
            position&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; relative&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            width&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 80vw&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            background&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; deepskyblue&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            top&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; -80vh&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;
            left&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; 20vw&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
        &lt;span&gt;}&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;max&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;top&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;top&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;center&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;center-left&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;left&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
                &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;center-right&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;right&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
            &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;footer&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;footer&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/973500/201807/973500-20180713154303621-452754958.png&quot; alt=&quot;&quot;/&gt;告别了以前height不能直接用百分比的麻烦, 如果用vw，vh的话 请全局尽量都用vw，vh，如果又用这个又用百分比的话 会造成意想不到的意外(亲测)&lt;/p&gt;
&lt;p&gt;欢迎加群:822162679&lt;/p&gt;
</description>
<pubDate>Fri, 13 Jul 2018 07:44:00 +0000</pubDate>
<dc:creator>徐伟杰</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/GeekXwj/p/9305348.html</dc:identifier>
</item>
<item>
<title>ISO  2501 quality model division 学习笔记 - xja</title>
<link>http://www.cnblogs.com/xiangjiaoai/p/9305304.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/xiangjiaoai/p/9305304.html</guid>
<description>&lt;p&gt;作为一个测试，学习质量模型，能够帮你 在测试设计的时候，从多个角度来思考测试用例的设计。而不仅仅是从 功能上， 同时 需要结合自己的产品，选择自己的侧重点，譬如我们公司的产品，安全性这一块 就比较小，所以在设计case的时候，优先级就会比较低，性能和功能这一块 要求比较高，优先级就会高。&lt;/p&gt;
&lt;p&gt;设计case的时候，不防多问问自己，有没有从 多个角落来考虑 　　&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1179464/201807/1179464-20180713153622826-209121992.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
</description>
<pubDate>Fri, 13 Jul 2018 07:37:00 +0000</pubDate>
<dc:creator>xja</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/xiangjiaoai/p/9305304.html</dc:identifier>
</item>
<item>
<title>微信退款回调 - 寞小陌</title>
<link>http://www.cnblogs.com/x-x-j/p/9305291.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/x-x-j/p/9305291.html</guid>
<description>&lt;p&gt;微信退款一定要写回调函数！！！一定要写回调函数！！！一定要写回调函数！！！&lt;/p&gt;
&lt;p&gt;昨天，小编线上的版本微信退款失败了，失败了，由于没写回调函数，我当时还是一脸蒙蔽，还确信退款成功了，结果打开微信商户平台发现，还真没退成功，而且查不到任何信息，不说了，小编这个月要吃土了T_T.&lt;/p&gt;
&lt;p&gt;有时候微信退款，会有延时，比如银行卡支付的，会有1-3个工作日，所以，有些业务逻辑要在回调里写。&lt;/p&gt;
&lt;p&gt;下面撸退款代码……&lt;/p&gt;
&lt;p&gt;首先是申请退款的代码&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; 　　 &lt;span&gt;$app&lt;/span&gt; = app('wechat.payment'&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;     &lt;span&gt;$total_money&lt;/span&gt; = &lt;span&gt;$order_pay&lt;/span&gt;-&amp;gt;pay_money * 100&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;     &lt;span&gt;$refund_money&lt;/span&gt; = &lt;span&gt;$order_pay&lt;/span&gt;-&amp;gt;pay_money * 100&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;     &lt;span&gt;$result&lt;/span&gt; = &lt;span&gt;$app&lt;/span&gt;-&amp;gt;refund-&amp;gt;&lt;span&gt;byOutTradeNumber(
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;     &lt;span&gt;$order_pay&lt;/span&gt;-&amp;gt;pay_order_id,
&lt;span&gt; 6&lt;/span&gt;     &lt;span&gt;$order_pay&lt;/span&gt;-&amp;gt;transaction,
&lt;span&gt; 7&lt;/span&gt;     &lt;span&gt;$total_money&lt;/span&gt;,
&lt;span&gt; 8&lt;/span&gt;     &lt;span&gt;$refund_money&lt;/span&gt;,
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;    [
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;        'refund_desc' =&amp;gt; &lt;span&gt;$reason&lt;/span&gt;,
&lt;span&gt;11&lt;/span&gt;        'notify_url' =&amp;gt; config('wechat.payment.default.refund_url'),
&lt;span&gt;12&lt;/span&gt;        'out_refund_no' =&amp;gt; &lt;span&gt;$order_pay&lt;/span&gt;-&amp;gt;&lt;span&gt;out_refund_no
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;    ]
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;    );
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt;(&lt;span&gt;$result&lt;/span&gt;['return_code'] == 'SUCCESS' &amp;amp;&amp;amp; &lt;span&gt;$result&lt;/span&gt;['result_code'] == 'SUCCESS'&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;     　　&lt;span&gt;Log&lt;/span&gt;::info('退款申请请求成功'&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;     }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注意，&lt;span&gt;这里只是申请退款成功，并不是退款成功&lt;span&gt;，因为微信那边也有可能失败的。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;上面设置了&lt;/span&gt;&lt;/span&gt;notify_url这个回调地址。微信会把退款结果发送到这个地址，然后你需要写一些你的业务逻辑。&lt;/p&gt;
&lt;p&gt;注意：&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;　　&lt;/span&gt;在申请退款接口中上传参数“notify_url”以开通该功能&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;　　&lt;/span&gt;如果链接无法访问，商户将无法接收到微信通知。 &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;　　&lt;/span&gt;通知url必须为直接可访问的url，不能携带参数。示例：notify_url：“https://pay.weixin.qq.com/wxpay/pay.action”&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;　　&lt;/span&gt;如果参数中传了notify_url，则商户平台上配置的回调地址将不会生效。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;然后接下来就是写回调函数，处理退款成功/失败的相关逻辑&lt;/p&gt;
&lt;p&gt;微信通知的相关参数&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1200209/201807/1200209-20180713145332783-284036485.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;哈哈，是不是没有看到你想要的参数，比如订单号，没关系，微信都返回给你了，只是做了加密处理，都在加密信息req_info这个字段里。&lt;/p&gt;
&lt;p&gt;所以在做业务逻辑处理之前，我们先需要对这个req_info做解密处理。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;解密步骤如下： &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;（1）对加密串A做base64解码，得到加密串B&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;（2）对商户key做md5，得到32位小写key* ( key设置路径：微信商户平台(pay.weixin.qq.com)--&amp;gt;账户设置--&amp;gt;API安全--&amp;gt;密钥设置 )&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;（3）用key*对加密串B做AES-256-ECB解密（PKCS7Padding）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;看到解密步骤是不是有种吃屎的感觉（故意用了个屎黄色的底色，嘎嘎），很难受。emmmm。。。。还是直接我自己写(baidu copy)的解密代码吧。不然我怕你顺着网线过来打我&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;45&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;  &lt;span&gt;public&lt;/span&gt; &lt;span&gt;function&lt;/span&gt; req_info_decrypt(&lt;span&gt;$str&lt;/span&gt;, &lt;span&gt;$key&lt;/span&gt; = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;         &lt;span&gt;$key&lt;/span&gt; = &lt;span&gt;$key&lt;/span&gt; ? : &lt;span&gt;md5&lt;/span&gt;(config('wechat.payment.default.key'&lt;span&gt;));
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;         &lt;span&gt;$str&lt;/span&gt; = &lt;span&gt;base64_decode&lt;/span&gt;(&lt;span&gt;$str&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;         &lt;span&gt;$str&lt;/span&gt; = mcrypt_decrypt(MCRYPT_RIJNDAEL_128, &lt;span&gt;$key&lt;/span&gt;, &lt;span&gt;$str&lt;/span&gt;,&lt;span&gt; MCRYPT_MODE_ECB);
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;         &lt;span&gt;$block&lt;/span&gt; = mcrypt_get_block_size('rijndael_128', 'ecb'&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;         &lt;span&gt;$pad&lt;/span&gt; = &lt;span&gt;ord&lt;/span&gt;(&lt;span&gt;$str&lt;/span&gt;[(&lt;span&gt;$len&lt;/span&gt; = &lt;span&gt;strlen&lt;/span&gt;(&lt;span&gt;$str&lt;/span&gt;)) - 1&lt;span&gt;]);
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;         &lt;span&gt;$len&lt;/span&gt; = &lt;span&gt;strlen&lt;/span&gt;(&lt;span&gt;$str&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;         &lt;span&gt;$pad&lt;/span&gt; = &lt;span&gt;ord&lt;/span&gt;(&lt;span&gt;$str&lt;/span&gt;[&lt;span&gt;$len&lt;/span&gt; - 1&lt;span&gt;]);
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;         &lt;span&gt;$xml&lt;/span&gt; = &lt;span&gt;substr&lt;/span&gt;(&lt;span&gt;$str&lt;/span&gt;, 0, &lt;span&gt;strlen&lt;/span&gt;(&lt;span&gt;$str&lt;/span&gt;) - &lt;span&gt;$pad&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;         libxml_disable_entity_loader(&lt;span&gt;true&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; json_decode(json_encode(&lt;span&gt;simplexml_load_string&lt;/span&gt;(&lt;span&gt;$xml&lt;/span&gt;, 'SimpleXMLElement', LIBXML_NOCDATA)), &lt;span&gt;true&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;     }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;解密出来的参数：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1200209/201807/1200209-20180713152923471-116810006.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;（&lt;span&gt;未截全&lt;/span&gt;）具体参考微信官方文档。&lt;/p&gt;
&lt;p&gt;有了这个自定的解密函数之后就可以愉快的在自己的回调函数里玩耍啦。&lt;/p&gt;
&lt;p&gt;回调函数：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;function&lt;/span&gt;&lt;span&gt; refundSuccess()
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;         &lt;span&gt;$app&lt;/span&gt; = app('wechat.payment'&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;         &lt;span&gt;$response&lt;/span&gt; = &lt;span&gt;$app&lt;/span&gt;-&amp;gt;handleRefundedNotify(&lt;span&gt;function&lt;/span&gt; (&lt;span&gt;$message&lt;/span&gt;, &lt;span&gt;$fail&lt;/span&gt;&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt;(&lt;span&gt;$message&lt;/span&gt;['appid'] != config('wechat.payment.default.app_id'&lt;span&gt;)){
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;                 &lt;span&gt;//&lt;/span&gt;&lt;span&gt;不是商户本身的请求,直接略过&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt;                 &lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;             &lt;span&gt;$data = $this-&amp;gt;req_info_decrypt($message['req_info']);
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;             &lt;span&gt;Log&lt;/span&gt;::info(&lt;span&gt;$data&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;             &lt;span&gt;$order_pay&lt;/span&gt; = OrderPay::where('out_trade_no', &lt;span&gt;$data&lt;/span&gt;['out_trade_no'&lt;span&gt;])&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;                 -&amp;gt;&lt;span&gt;first();
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt;(&lt;span&gt;$order_pay&lt;/span&gt;&lt;span&gt;){&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;                 &lt;span&gt;Log&lt;/span&gt;::info('微信退款成功 pay_id:'.&lt;span&gt;$order_pay&lt;/span&gt;-&amp;gt;&lt;span&gt;pay_id);&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;                 &lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;             &lt;span&gt;Log&lt;/span&gt;::info('Order not exists.'&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt;             &lt;span&gt;$fail&lt;/span&gt;('Order not exists.'&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; &lt;span&gt;        });
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &lt;span&gt;$response&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt;     }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;好了，差不多就是这样，上面我把我自己处理的逻辑都给删掉了。差不多就是改一些订单的状态，发通知啊这类。&lt;/p&gt;


</description>
<pubDate>Fri, 13 Jul 2018 07:35:00 +0000</pubDate>
<dc:creator>寞小陌</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/x-x-j/p/9305291.html</dc:identifier>
</item>
<item>
<title>SpringCloud之声明式服务调用 Feign（三） - xuanm</title>
<link>http://www.cnblogs.com/grasp/p/9305218.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/grasp/p/9305218.html</guid>
<description>&lt;p&gt;一 Feign简介&lt;/p&gt;
&lt;p&gt;Feign是一种声明式、模板化的HTTP客户端，也是netflix公司组件。使用feign可以在远程调用另外服务的API,如果调用本地API一样。&lt;br/&gt;我们知道，阿里巴巴的doubbo采用二进制的RPC协议进行底层通讯，客户端可以使用类似本地方法一样调用。那么，虽然Feign同样可以有这种效果，但是底层还是通过HTTP协议调取restful的API的方式。&lt;br/&gt;通过Feign， 我们能把HTTP远程调用对开发者完全透明，得到与调用本地方法一致的编码体验。&lt;/p&gt;
&lt;p&gt;在实际开发中，对于服务依赖的调用可能不止一处，往往一个接口会被多处调用，所以我们通常会针对各个微服务自行封装一些客户端类来包装这些依赖服务的调用，Spring Cloud Feign 在此基础上做了进一步的封装，由他来帮助我们定义和实现依赖服务接口的定义，我们只需要创建一个接口并用注解的方式来配置他，即可完成对服务提供方的接口绑定，简化了在使用 Spring Cloud Ribbon 时自行封装服务调用客户端的开发量。&lt;/p&gt;

&lt;p&gt;接到上篇“&lt;a id=&quot;cb_post_title_url&quot; href=&quot;https://www.cnblogs.com/grasp/p/9296530.html&quot;&gt;SpringCloud之实现客户端的负载均衡Ribbon（二）&lt;/a&gt;”&lt;/p&gt;
&lt;p&gt;继续在springcloud工程中添加模块feign-client，也是通过start.spring.io提供的模板创建&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/738818/201807/738818-20180713145552281-224513100.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;新的目录&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/738818/201807/738818-20180713145656132-1872862823.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;生成的pom.xml文件为&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;
&amp;lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;span&gt;
    xsi:schemaLocation&lt;/span&gt;=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&amp;gt;
    &amp;lt;modelVersion&amp;gt;4.0.0&amp;lt;/modelVersion&amp;gt;

    &amp;lt;groupId&amp;gt;com.xuan&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;feign-client&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;0.0.1-SNAPSHOT&amp;lt;/version&amp;gt;
    &amp;lt;packaging&amp;gt;jar&amp;lt;/packaging&amp;gt;

    &amp;lt;name&amp;gt;feign-client&amp;lt;/name&amp;gt;
    &amp;lt;description&amp;gt;Demo project &lt;span&gt;for&lt;/span&gt; Spring Boot&amp;lt;/description&amp;gt;

    &amp;lt;parent&amp;gt;
        &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
        &amp;lt;artifactId&amp;gt;spring-boot-starter-parent&amp;lt;/artifactId&amp;gt;
        &amp;lt;version&amp;gt;2.0.3.RELEASE&amp;lt;/version&amp;gt;
        &amp;lt;relativePath/&amp;gt; &amp;lt;!-- lookup parent from repository --&amp;gt;
    &amp;lt;/parent&amp;gt;

    &amp;lt;properties&amp;gt;
        &amp;lt;project.build.sourceEncoding&amp;gt;UTF-8&amp;lt;/project.build.sourceEncoding&amp;gt;
        &amp;lt;project.reporting.outputEncoding&amp;gt;UTF-8&amp;lt;/project.reporting.outputEncoding&amp;gt;
        &amp;lt;java.version&amp;gt;1.8&amp;lt;/java.version&amp;gt;
        &amp;lt;spring-cloud.version&amp;gt;Finchley.RELEASE&amp;lt;/spring-cloud.version&amp;gt;
    &amp;lt;/properties&amp;gt;

    &amp;lt;dependencies&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;spring-boot-starter-web&amp;lt;/artifactId&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.springframework.cloud&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;spring-cloud-starter-netflix-eureka-client&amp;lt;/artifactId&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.springframework.cloud&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;spring-cloud-starter-openfeign&amp;lt;/artifactId&amp;gt;
        &amp;lt;/dependency&amp;gt;

        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;spring-boot-starter-test&amp;lt;/artifactId&amp;gt;
            &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt;
        &amp;lt;/dependency&amp;gt;
    &amp;lt;/dependencies&amp;gt;

    &amp;lt;dependencyManagement&amp;gt;
        &amp;lt;dependencies&amp;gt;
            &amp;lt;dependency&amp;gt;
                &amp;lt;groupId&amp;gt;org.springframework.cloud&amp;lt;/groupId&amp;gt;
                &amp;lt;artifactId&amp;gt;spring-cloud-dependencies&amp;lt;/artifactId&amp;gt;
                &amp;lt;version&amp;gt;${spring-cloud.version}&amp;lt;/version&amp;gt;
                &amp;lt;type&amp;gt;pom&amp;lt;/type&amp;gt;
                &amp;lt;scope&amp;gt;&lt;span&gt;import&lt;/span&gt;&amp;lt;/scope&amp;gt;
            &amp;lt;/dependency&amp;gt;
        &amp;lt;/dependencies&amp;gt;
    &amp;lt;/dependencyManagement&amp;gt;

    &amp;lt;build&amp;gt;
        &amp;lt;plugins&amp;gt;
            &amp;lt;plugin&amp;gt;
                &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
                &amp;lt;artifactId&amp;gt;spring-boot-maven-plugin&amp;lt;/artifactId&amp;gt;
            &amp;lt;/plugin&amp;gt;
        &amp;lt;/plugins&amp;gt;
    &amp;lt;/build&amp;gt;


&amp;lt;/project&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;修改启动文件FeignClientApplication.java,增加相关注解。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.xuan.feignclient;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.boot.SpringApplication;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.boot.autoconfigure.SpringBootApplication;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.cloud.client.discovery.EnableDiscoveryClient;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.cloud.openfeign.EnableFeignClients;

@SpringBootApplication
@EnableDiscoveryClient
@EnableFeignClients
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; FeignClientApplication {

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
        SpringApplication.run(FeignClientApplication.&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;, args);
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;增加 @FeignClient 注解的接口来绑定具体的服务，增加服务HelloService.java&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.xuan.feign;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.cloud.openfeign.FeignClient;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.web.bind.annotation.RequestMapping;

@FeignClient(value &lt;/span&gt;= &quot;eureka-client&quot;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt;&lt;span&gt; HelloService {
    @RequestMapping(value &lt;/span&gt;= &quot;/hello&quot;&lt;span&gt;)
    String hello();
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;增加测试的消费接口ConsumerController.java&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.xuan.feign;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.beans.factory.annotation.Autowired;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.web.bind.annotation.RequestMapping;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.web.bind.annotation.RequestMethod;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.web.bind.annotation.RestController;

@RestController
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; ConsumerController {
    @Autowired
    HelloService helloService;

    @RequestMapping(value &lt;/span&gt;= &quot;feign-consumer&quot;, method =&lt;span&gt; RequestMethod.GET)
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String helloConsumer(){
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; helloService.hello();
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;修改配置文件”application.properties“，找到注册中心和定义自身的服务名和端口，&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;spring.application.name=feign-consumer
server.port=9991
eureka.client.service-url.defaultZone=http://localhost:8080/eureka/&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;添加完成后工程的目录结构为&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/738818/201807/738818-20180713152315655-742078230.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;分别启动模块了：&lt;/p&gt;
&lt;p&gt;1.EurekaServerApplication&lt;/p&gt;
&lt;p&gt;2.EurekaClientApplication，EurekaClientApplication1，EurekaClientApplication2&lt;/p&gt;
&lt;p&gt;3.FeignClientApplication&lt;/p&gt;
&lt;p&gt; 启动后打开http://localhost:8080/显示如图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/738818/201807/738818-20180713152413913-1108736998.png&quot; alt=&quot;&quot; width=&quot;1250&quot; height=&quot;678&quot;/&gt;&lt;/p&gt;
&lt;p&gt;访问Feign模块提供的接口http://localhost:9991/feign-consumer，刷新一次也会访问到不同的提供者上面去,原因是feign内部也使用了ribbon做负载均衡。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/738818/201807/738818-20180713152508711-1670595746.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/738818/201807/738818-20180713152559734-2011228942.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/738818/201807/738818-20180713152618412-1822527692.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;源码地址：https://gitee.com/xuantest/SpringCloud-Feign&lt;/span&gt;&lt;/p&gt;

</description>
<pubDate>Fri, 13 Jul 2018 07:35:00 +0000</pubDate>
<dc:creator>xuanm</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/grasp/p/9305218.html</dc:identifier>
</item>
<item>
<title>好的测试团队需要有妹子！ - 测试柔柔</title>
<link>http://www.cnblogs.com/gupao123/p/9305242.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/gupao123/p/9305242.html</guid>
<description>&lt;p&gt;&lt;img src=&quot;https://img-blog.csdn.net/20180713151903783?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3N1aXpoaXR1YW44MzM3/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;关于硅谷女性代表性的缺乏，人们进行了大量的谈论。虽然在IT领域努力争取更多的平等人口本身就是一个有价值的事业，但当我们未能积极地将女性纳入测试团队时，实际上对我们行业非常不利。接下来的阅读，你将了解到原因。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;托马斯·杰斐逊曾经说过：“意见的差异导致了调查和对真理的探究...”女性的典型认知差异使得她们对我们的测试团队来说是无价的。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;首先，认知差异并不表明一个性别比另一个性别更聪明。在这种情况下，认知差异仅仅意味着看待世界的方式不同。在一些关键领域，这种差异使得团队必须包括男女。&lt;/p&gt;

&lt;p&gt;言语情景记忆任务&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;言语情景记忆是基于语言的事件、地点、时间、情感和语境的个人记忆。在口头情景记忆任务中，女性往往比男性更擅长，例如用描述语言记住单词、物体、图片和其他日常事件。这些技能渗透到测试生命周期中，无论是记忆关于明确需求的对话，还是回忆测试执行期间发现的缺陷的细节。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img-blog.csdn.net/20180713151955373?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3N1aXpoaXR1YW44MzM3/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;更好记住细节的女性通用能力源于她们在注意力集中时大脑两侧的运用。请注意，这与多任务不同。使用她们大脑双语的语言技能，允许女人从某种情况下吸收，破译和从给定的情景中比男人获取更多的信息。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;另一个区别是，女性可能需要更多的词汇来理解特定的语境，并且在描述事件时倾向于使用更多的词汇，而男性倾向于需要较少的词汇来理解特定的语境，并且在描述事件时使用较少的词汇。例如，如果一个男人和一个女人都试图让人们猜测这本书“Moby Dick”的名字，而不使用它的标题，那女人可能会说：“叫我以实玛利”，男人可能更简洁地说：“亚哈。”&lt;/p&gt;

&lt;p&gt;视觉空间情景记忆任务&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;视觉空间情景记忆是基于记忆事件、地点、时间、情感和基于上下文的那些记忆项的相互关系。男性往往比女性更擅长记忆和描绘事件的空间。这主要是由于男性在专注于事件时仅使用一个脑半球。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img-blog.csdn.net/20180713152007415?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3N1aXpoaXR1YW44MzM3/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;这种方法有两个主要优点。其一是它能使男人更专注地工作更长的时间。这很可能是由于男人需要集中注意力才能成功捕猎而产生的。其次，男人在把技术的一个方面与另一方面联系起来时往往具有优势。在测试中，有时需要密切关注和理解关系，例如分解需求、执行测试或故障排除。&lt;/p&gt;

&lt;p&gt;性别引起的分歧&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;很多性别之间的差异可以归因于这些认知差异。女性可能想在一个给定的对话中讨论大量的话题，而男性可能只想集中在一个单一的话题。这可能会导致女人把男人视为固执，同时让男人看到女人不专心。&lt;/p&gt;


&lt;p&gt;&lt;img src=&quot;https://img-blog.csdn.net/20180713152020593?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3N1aXpoaXR1YW44MzM3/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;当认知差异导致假设发挥作用时，可能会发生更多的挑战。男性想要跳到关键点，立即开始行动。认知上，他们的大脑已经对这个话题和计划做出了理解。另一方面，女性一般要深入讨论这个话题和程序，并确保在开始一个项目之前就明白了。她们知道需要了解更多的信息才能理解。男女双方理解这些差异可以帮助他们更有效地交流和工作。&lt;/p&gt;

&lt;p&gt;差异不是缺点&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;社会需要认识到，差异不是缺陷，也不是一成不变的。例如，通常报告说，男孩在数学方面做得很好，而女孩在阅读和写作方面表现优异。在性别中立的社会中，女孩和男孩在这些科目中一样地表现出色。&lt;/p&gt;


&lt;p&gt;&lt;img src=&quot;https://img-blog.csdn.net/20180713152029779?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3N1aXpoaXR1YW44MzM3/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;男女可以达到同样的效果；他们只是认知的不同。它就如女人通过地标航行一样，而男人则是通过基本的方向航行。每种方法都是可行的，可靠的，并且达到了相同的目标，但是这个过程是不同的 - 并不匮乏。性别差异在他们所见的背景下更为明显。在旨在消除性别规范的研究中，研究人员证明，性别角色和社会背景决定了一个人的行为。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;在工作场所，人们遵从性别差异的期望。仅仅改变对两性不平等的期望就会导致这种现象消失。&lt;/p&gt;

&lt;p&gt;和谐利用&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;团队需要理解、记住和处理事件、对话和地点的细节。团队还需要能够在多个未完成任务之间进行协调和转换，并对系统、关系和需求有很好的理解。消除基于性别差异和平等鼓励相结合的绩效差异，将提高个人和团队的生产力。从本质上说，团队在各种任务和层次位置上都有很强的性别参与能力。从经验，我知道我们都是更好的。&lt;/p&gt;

</description>
<pubDate>Fri, 13 Jul 2018 07:29:00 +0000</pubDate>
<dc:creator>测试柔柔</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/gupao123/p/9305242.html</dc:identifier>
</item>
<item>
<title>SpringBoot整合Mybatis完整版 - dsn727455218</title>
<link>http://www.cnblogs.com/dsn727455218/p/9305221.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/dsn727455218/p/9305221.html</guid>
<description>
&lt;p&gt;自从Spring推出Boot，Cloud系列之后，一度成为热门的框架，现在大部分的招聘要求都要有相关的开发经验，借此我在这里就给大家分享一下如何玩转SpringBoot跟Mybatis。&lt;/p&gt;

&lt;p&gt;这里我给大家提供我创建的demo下载地址&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://download.csdn.net/download/dsn727455218/10539629&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;https://download.csdn.net/download/dsn727455218/10539629&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在这里就不跟大家说废话，我们实际操作一番。&lt;/p&gt;
&lt;p&gt;使用工具：&lt;/p&gt;
&lt;p&gt;eclipse 版本随意&lt;/p&gt;
&lt;p&gt;jdk 环境&lt;/p&gt;
&lt;p&gt;mysql 数据库&lt;/p&gt;
&lt;p&gt;这个工具的安装使用我就不给大家介绍，相信你们都能完成。&lt;/p&gt;
&lt;p&gt;SpringBoot项目创建的方式：&lt;/p&gt;
&lt;h4&gt;1.访问 &lt;a href=&quot;http://start.spring.io/&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;http://start.spring.io/&lt;/a&gt; &lt;/h4&gt;
&lt;p&gt;这个是最为简单的 输入项目名，包名，以及项目类型后，版本现在基本都是2.0+，下载导入到开发工具即可&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1403434/201807/1403434-20180713152258984-1119277952.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h4&gt;2.Spring Boot CLI  cmd命令操作&lt;/h4&gt;
&lt;p&gt;下载安装地址：&lt;a href=&quot;http://docs.spring.io/spring-boot/docs/current/reference/html/getting-started-installing-spring-boot.html&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;http://docs.spring.io/spring-boot/docs/current/reference/html/getting-started-installing-spring-boot.html&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;下载安装配置环境我就不多做介绍，很简单的操作这不是我介绍的重点&lt;/p&gt;
&lt;h4&gt;3.利用eclipse来创建SpringBoot 这才是我介绍的重点&lt;/h4&gt;
&lt;p&gt;首先我们需要在eclipse上面集成STS，至于这是什么，自己可以去Sping的官网看介绍。&lt;/p&gt;
&lt;p&gt;eclipse安装：&lt;/p&gt;

&lt;h5&gt;Help -&amp;gt; Eclipse Marketplace…&lt;br/&gt;Search或选择“Popular”标签，选择Spring Tool Suite (STS) for Eclipse插件，安装&lt;/h5&gt;
&lt;p&gt;网络不好的可以下载有点慢，慢慢等安装。&lt;/p&gt;

&lt;h5&gt;new project ，选择spring -&amp;gt; spring starter project&lt;/h5&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1403434/201807/1403434-20180713152323130-1117583401.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h5&gt;按自己的信息填写，我这里项目名叫demo1&lt;/h5&gt;
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdn.net/20180713145903815?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2RzbjcyNzQ1NTIxOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h5&gt;选择版本和组件&lt;/h5&gt;
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdn.net/20180713145927660?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2RzbjcyNzQ1NTIxOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70&quot; alt=&quot;&quot;/&gt; &lt;br/&gt;我这里选了2.0.3版本，现在基本都是2.0+的版本，选了mysql和web,mybatis，因为是web项目，都会选择web这个选项，其他的可以按自己需要选择，点击 Finish ，就会有一个新项目，不过需要等待几分钟，sts工具会生成spring boot目录的结构及文件&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdn.net/20180713145223528?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2RzbjcyNzQ1NTIxOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这就是我们最终的结构。&lt;/p&gt;
&lt;h5&gt;这里需要提示一点如果没有dependencies包，检查一下项目目录下.classpath 里面是否有&lt;br/&gt;&amp;lt;classpathentry kind=&quot;con&quot; path=&quot;org.eclipse.m2e.MAVEN2_CLASSPATH_CONTAINER&quot;/&amp;gt;&lt;/h5&gt;
&lt;p&gt;没有就加上，重启eclipse即可，其他原因我就不做多的说明，相信你们能够发现。&lt;/p&gt;
&lt;p&gt;接下来我们就来创建包&lt;/p&gt;
&lt;p&gt;controller ：控制层&lt;/p&gt;
&lt;p&gt;dao：数据接口&lt;/p&gt;
&lt;p&gt;service：实现类&lt;/p&gt;
&lt;p&gt;mapper：这里是放dao层的xml文件 也就是mybatis的&lt;/p&gt;
&lt;p&gt;entity：实体类&lt;/p&gt;
&lt;p&gt;这几个包是做什么的你们应该能开明白&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdn.net/20180713145717781?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2RzbjcyNzQ1NTIxOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;就是这个样子的&lt;/p&gt;
&lt;p&gt;pom.xml 配置文件&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdn.net/20180713150208842?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2RzbjcyNzQ1NTIxOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这里我只是配置一个基础的，如果需要更加详细的配置文件可以参考我的另一篇文章&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/dsn727455218/article/details/81028192&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;https://blog.csdn.net/dsn727455218/article/details/81028192&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;接下来我们就写写代码try-try&lt;/p&gt;
&lt;p&gt;首先我们需要先创建一个userinfo表 字段（id,username,userpass,name）&lt;/p&gt;
&lt;p&gt;对应的实体类UserInfo&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; dsn
 *
 * &lt;/span&gt;&lt;span&gt;@version&lt;/span&gt;&lt;span&gt; 创建时间：2018年7月5日 上午11:30:00 
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.bootdemo.entity;
 
&lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; dsn
 * &lt;/span&gt;&lt;span&gt;@version&lt;/span&gt;&lt;span&gt; 创建时间：2018年7月5日 上午11:30:00
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; UserInfo {
 
    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;&lt;span&gt; the id
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; getId() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; id;
    }
 
    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; id
     *            the id to set
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; setId(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; id) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.id =&lt;span&gt; id;
    }
 
    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;&lt;span&gt; the username
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getUsername() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; username;
    }
 
    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; username
     *            the username to set
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setUsername(String username) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.username =&lt;span&gt; username;
    }
 
    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;&lt;span&gt; the userpass
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getUserpass() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; userpass;
    }
 
    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; userpass
     *            the userpass to set
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setUserpass(String userpass) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.userpass =&lt;span&gt; userpass;
    }
 
    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;&lt;span&gt; the name
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getName() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; name;
    }
 
    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; name
     *            the name to set
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; setName(String name) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.name =&lt;span&gt; name;
    }
 
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; id;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String username;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String userpass;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; String name;
 
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;dao层接口UserInfoMapper 这里我是继承了BaseMapper父类，一些方法是可以共用的&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; dsn
 *
 * &lt;/span&gt;&lt;span&gt;@version&lt;/span&gt;&lt;span&gt; 创建时间：2018年7月5日 上午11:35:10 
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.bootdemo.dao;
 
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.bootdemo.entity.UserInfo;
 
&lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; dsn
 * &lt;/span&gt;&lt;span&gt;@version&lt;/span&gt;&lt;span&gt; 创建时间：2018年7月5日 上午11:35:10
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt; UserInfoMapper &lt;span&gt;extends&lt;/span&gt; BaseMapper&amp;lt;UserInfo&amp;gt;&lt;span&gt; {
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;添加单个对象
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;    public int insert(User entity);&lt;/span&gt;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;BaseMapper&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.bootdemo.dao;
 
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.List;
 
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.ibatis.annotations.Param;
 
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt; BaseMapper&amp;lt;T&amp;gt;&lt;span&gt; {
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;添加单个对象&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; insert(T entity);
 
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;修改单个对象&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; update(T entity);
 
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;删除单个对象&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; delete(T entity);
 
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; deletebyname(T entity);
 
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;查询单个对象&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt;&lt;span&gt; T select(T entity);
 
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;查询多个对象&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; List&amp;lt;T&amp;gt;&lt;span&gt; query();
 
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;根据分页查询多个对象&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; List&amp;lt;T&amp;gt; selectbypage(@Param(value = &quot;pageSize&quot;) &lt;span&gt;int&lt;/span&gt; pageSize, @Param(value = &quot;currentPage&quot;) &lt;span&gt;int&lt;/span&gt;&lt;span&gt; currentPage);
 
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;根据搜索条件查询&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; List&amp;lt;T&amp;gt; searchbytj(@Param(value = &quot;st&quot;) String st, @Param(value = &quot;et&quot;&lt;span&gt;) String et,
            @Param(value &lt;/span&gt;= &quot;con&quot;&lt;span&gt;) String con);
 
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;查询总条数&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; selectCount();
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;service层UserInfoService 同样的我继承了BaseService&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; dsn
 *
 * &lt;/span&gt;&lt;span&gt;@version&lt;/span&gt;&lt;span&gt; 创建时间：2018年7月5日 上午11:35:36 
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.bootdemo.service;
 
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.bootdemo.entity.UserInfo;
 
&lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; dsn
 * &lt;/span&gt;&lt;span&gt;@version&lt;/span&gt;&lt;span&gt; 创建时间：2018年7月5日 上午11:35:36
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt; UserInfoService &lt;span&gt;extends&lt;/span&gt; BaseService&amp;lt;UserInfo&amp;gt;&lt;span&gt; {
 
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;BaseService&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.bootdemo.service;
 
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.List;
 
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.apache.ibatis.annotations.Param;
 
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt; BaseService&amp;lt;T&amp;gt;&lt;span&gt; {
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 添加单个对象&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; insert(T entity) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception;
 
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 修改单个对象&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; update(T entity) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception;
 
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 删除单个对象&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; delete(T entity) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception;
 
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; deletebyname(T entity);
 
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 查询单个对象&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt;&lt;span&gt; T select(T entity);
 
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;查询多个对象&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; List&amp;lt;T&amp;gt;&lt;span&gt; query();
 
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;分页查询多个对象&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; List&amp;lt;T&amp;gt; selectbypage(@Param(value = &quot;pageSize&quot;) &lt;span&gt;int&lt;/span&gt; pageSize, @Param(value = &quot;currentPage&quot;) &lt;span&gt;int&lt;/span&gt;&lt;span&gt; currentPage);
 
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;根据搜索条件查询&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; List&amp;lt;T&amp;gt; searchbytj(@Param(value = &quot;st&quot;) String st, @Param(value = &quot;et&quot;&lt;span&gt;) String et,
            @Param(value &lt;/span&gt;= &quot;con&quot;&lt;span&gt;) String con);
 
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;查询总条�?&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; selectCount();
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;mapper文件UserInfoMapper.xml 这是mybatis的sql&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;44&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;?&lt;/span&gt;&lt;span&gt;xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; &lt;/span&gt;&lt;span&gt;?&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot; &lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;mapper &lt;/span&gt;&lt;span&gt;namespace&lt;/span&gt;&lt;span&gt;=&quot;com.bootdemo.dao.UserInfoMapper&quot;&lt;/span&gt; &lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;resultMap &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;userResultMap&quot;&lt;/span&gt;&lt;span&gt; type&lt;/span&gt;&lt;span&gt;=&quot;com.bootdemo.entity.UserInfo&quot;&lt;/span&gt; &lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;id &lt;/span&gt;&lt;span&gt;column&lt;/span&gt;&lt;span&gt;=&quot;id&quot;&lt;/span&gt;&lt;span&gt; property&lt;/span&gt;&lt;span&gt;=&quot;id&quot;&lt;/span&gt;&lt;span&gt; jdbcType&lt;/span&gt;&lt;span&gt;=&quot;INTEGER&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;result &lt;/span&gt;&lt;span&gt;column&lt;/span&gt;&lt;span&gt;=&quot;name&quot;&lt;/span&gt;&lt;span&gt; property&lt;/span&gt;&lt;span&gt;=&quot;name&quot;&lt;/span&gt;&lt;span&gt; jdbcType&lt;/span&gt;&lt;span&gt;=&quot;VARCHAR&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;result &lt;/span&gt;&lt;span&gt;column&lt;/span&gt;&lt;span&gt;=&quot;username&quot;&lt;/span&gt;&lt;span&gt; property&lt;/span&gt;&lt;span&gt;=&quot;username&quot;&lt;/span&gt;&lt;span&gt; jdbcType&lt;/span&gt;&lt;span&gt;=&quot;VARCHAR&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;result &lt;/span&gt;&lt;span&gt;column&lt;/span&gt;&lt;span&gt;=&quot;userpass&quot;&lt;/span&gt;&lt;span&gt; property&lt;/span&gt;&lt;span&gt;=&quot;userpass&quot;&lt;/span&gt;&lt;span&gt; jdbcType&lt;/span&gt;&lt;span&gt;=&quot;VARCHAR&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;resultMap&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;select &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;selectList&quot;&lt;/span&gt;&lt;span&gt; parameterType&lt;/span&gt;&lt;span&gt;=&quot;UserInfo&quot;&lt;/span&gt;&lt;span&gt; resultMap&lt;/span&gt;&lt;span&gt;=&quot;userResultMap&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
      select
    id,username,userpass,name
    from userinfo 
    &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;where&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
        disable='1' 
        &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;if &lt;/span&gt;&lt;span&gt;test&lt;/span&gt;&lt;span&gt;=&quot;key!=null&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
            and (
            username = #{key,jdbcType=VARCHAR}
                or
            name = #{key,jdbcType=VARCHAR}
            )
        &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;where&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;select&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;insert &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;insert&quot;&lt;/span&gt;&lt;span&gt; parameterType&lt;/span&gt;&lt;span&gt;=&quot;UserInfo&quot;&lt;/span&gt;&lt;span&gt; 
        useGeneratedKeys&lt;/span&gt;&lt;span&gt;=&quot;true&quot;&lt;/span&gt;&lt;span&gt; keyProperty&lt;/span&gt;&lt;span&gt;=&quot;id&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt; 
        insert into userinfo(name,username,userpass)  
             values(#{name},#{username},#{userpass})  
  &lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;insert&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;mapper&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;controller层UserInfoController&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; dsn
 *
 * &lt;/span&gt;&lt;span&gt;@version&lt;/span&gt;&lt;span&gt; 创建时间：2018年7月12日 下午2:04:58 
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.bootdemo.controller;
 
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; javax.annotation.Resource;
 
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.web.bind.annotation.RequestMapping;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.web.bind.annotation.ResponseBody;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.web.bind.annotation.RestController;
 
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.bootdemo.entity.UserInfo;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.bootdemo.service.UserInfoService;
 
&lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; dsn
 * &lt;/span&gt;&lt;span&gt;@version&lt;/span&gt;&lt;span&gt; 创建时间：2018年7月12日 下午2:04:58
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
@RestController
@RequestMapping(&lt;/span&gt;&quot;user&quot;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; UserInfoController {
 
    @Resource
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; UserInfoService userinfoService;
 
    @RequestMapping(&lt;/span&gt;&quot;/add.do&quot;&lt;span&gt;)
    @ResponseBody
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; String addUser(UserInfo user, String msg) {
 
        System.out.println(user.getUsername());
 
        &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
            &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; insert =&lt;span&gt; userinfoService.insert(user);
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (insert == 1&lt;span&gt;) {
                msg &lt;/span&gt;= &quot;插入成功&quot;&lt;span&gt;;
            } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
                msg &lt;/span&gt;= &quot;插入成功&quot;&lt;span&gt;;
            }
        } &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception e) {
            e.printStackTrace();
        }
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; msg;
 
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;需要注意的是我们需要在DemoApplication里面添加&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdn.net/20180713151001261?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2RzbjcyNzQ1NTIxOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;扫描映射文件不然启动项目会报错的&lt;/p&gt;
&lt;p&gt;同样也可以再mapper接口类里面加@Mapper注解，两者皆可&lt;/p&gt;
&lt;p&gt;我们只需要运行DemoApplication文件即可。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1403434/201807/1403434-20180713152608648-11143139.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;成功界面，我们会看到Spring大大的logo&lt;/p&gt;
&lt;p&gt;平常我们web项目都是在tomcat等容器里面启动，这里为什么不需要呢，是SpringBoot已经集成了tomcat，所以不需要我们在配置了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdn.net/20180713151353363?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2RzbjcyNzQ1NTIxOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;如果有的码友需要看注解的源码那么打开dependencies&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdn.net/20180713151514161?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2RzbjcyNzQ1NTIxOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;一些jdbc等等常用的配置文件信息都可以查看的。&lt;/p&gt;
&lt;p&gt;这里我给大家提供我创建的demo下载地址&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://download.csdn.net/download/dsn727455218/10539629&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;https://download.csdn.net/download/dsn727455218/10539629&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;如有需要可以加我Q群【308742428】大家一起讨论技术。&lt;/p&gt;
&lt;p&gt;后面会不定时为大家更新文章，敬请期待。&lt;/p&gt;

</description>
<pubDate>Fri, 13 Jul 2018 07:27:00 +0000</pubDate>
<dc:creator>dsn727455218</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/dsn727455218/p/9305221.html</dc:identifier>
</item>
<item>
<title>一种海量社交短文本的热点话题发现方法 - 腾讯云+社区</title>
<link>http://www.cnblogs.com/qcloud1001/p/9304872.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/qcloud1001/p/9304872.html</guid>
<description>&lt;p&gt;&lt;strong&gt;欢迎大家前往腾讯云+社区，获取更多腾讯海量技术实践干货哦~&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;1.8269230769231&quot;&gt;
&lt;p&gt;本文由&lt;a href=&quot;https://cloud.tencent.com/developer/user/1920198?fromSource=waitui&quot;&gt;腾讯QQ大数据&lt;/a&gt; 发表于&lt;a href=&quot;https://cloud.tencent.com/developer/column/3013?fromSource=waitui&quot;&gt;云+社区专栏&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;随着社交网络的发展和积累，内容的产生、传播、消费等已经根深蒂固地融入在人们的生活里。随之内容分析的工作也就走进了人们的视野。近年来，各种公众趋势分析类产品涌现，各大公司都利用自身资源纷纷抢占一席之地。&lt;/p&gt;
&lt;p&gt;公众趋势分析平台利用自然语言处理、机器学习方法对数据进行分析，给用户提供舆情分析、竞品分析、数据营销、品牌形象建立等帮助。其中，热点发现问题是公众趋势分析中不可或缺的一部分。热点发现通过对海量数据（本文集中在文本数据方面）进行分析，挖掘相关人群重点关注的内容。&lt;/p&gt;
&lt;p&gt;在我们的业务场景中，快速高效地从海量社交短文本中发现出实时的话题，可以帮助产品、运营、公关等同学更好地吸引用户。然而，直接从海量文本中生成语法正确、意思明确的话题，是一件不容易的事情。本文主要介绍在话题生成上运用的一个较为简单高效的方法。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;所谓话题&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;目前很多内容平台的话题收集有相关的产品策略或者运营同事支持。例如让用户自定义话题，并用特定的符号标识，如“#白色情人节#”。在一些文本场景中，没有这些条件支持，而需要我们直接从海量的用户社交文本中提取热点话题，或者说热点事件。本文的目的即是自动从海量社交短文本中，自动发现热点事件或热点话题。&lt;/p&gt;
&lt;p&gt;不少相关的工作，将话题提取利用主题分析的方法来解决，利用主题模型（LDA等）、聚类等方法，但这种思路输出的各个话题的一些主题词或者相关词，而不是直接生成话题短语。可以考虑引入事件抽取或者文本摘要的思路来解决这类场景的热点话题提取问题，但其往往需要监督数据。本文介绍一种简单实用的热点话题提取方法的尝试。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;具体做法&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;本文提出一种从热词提取出发，提取热点话题的方法。下面是方法的整体流程图，首先提取热词，然后在热词的基础上，做话题提取。下面分两部分详细介绍。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ask.qcloudimg.com/http-save/yehe-1920198/u5dilob06n.png?imageView2/2/w/1620&quot; alt=&quot;img&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;热词提取&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;主体思路是利用词频梯度和平滑方法。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ask.qcloudimg.com/http-save/yehe-1920198/tqpn89zwrz.jpeg?imageView2/2/w/1620&quot; alt=&quot;img&quot;/&gt;&lt;/p&gt;
&lt;p&gt;如上图所示，词语的热度受很多方面的影响。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;大盘影响：白天和凌晨、双休日和工作日、节假日和平常日子，社交消息的整体数量都会有一个较大的波动。&lt;/li&gt;
&lt;li&gt;词间影响：也许语料中某个段子突然非常火，会导致一些平时关系不大的词语，一下子全部成为热词。&lt;/li&gt;
&lt;li&gt;周期影响：24小时、星期、月份、节气等周期性的变化，常常会使得“早安”、“周一”、“三月”等事件意义性不强的词语成为热词。&lt;/li&gt;
&lt;li&gt;自身趋势：这个就是我们最关心的热度信息了。这些由于事件引起相关词语的突发性、递增性等的增长，就是我们算法想要识别和分析出来的。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;针对以上一些影响因素，我们从以下的一些方面进行热词提取工作。&lt;/p&gt;
&lt;p&gt;1、&lt;strong&gt;预处理&lt;/strong&gt;：这里主要包括文本去重、广告识别等方法，对数据进行一些去躁的工作。&lt;/p&gt;
&lt;p&gt;2、&lt;strong&gt;梯度：&lt;/strong&gt;词频增量的主要衡量指标。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ask.qcloudimg.com/http-save/yehe-1920198/5khj5w6zcp.png?imageView2/2/w/1620&quot; alt=&quot;img&quot;/&gt;&lt;/p&gt;
&lt;p&gt;3、&lt;strong&gt;贝叶斯平均：&lt;/strong&gt;一种利用outside information，especially a pre-existing belief，来评价the mean of a population的方法。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ask.qcloudimg.com/http-save/yehe-1920198/0csns2mxq2.png?imageView2/2/w/1620&quot; alt=&quot;img&quot;/&gt;&lt;/p&gt;
&lt;p&gt;贝叶斯平均的典型应用包括用户投票排名，产品评分排序，广告点击率的平滑等等。&lt;/p&gt;
&lt;p&gt;以用户投票排名为例，用户投票评分的人很少，则算平均分很可能会出现不够客观的情况。这时引入外部信息，假设还有一部分人（C人）投了票，并且都给了平均分（m分）。把这些人的评分加入到已有用户的评分中，再进行求平均，可以对平均分进行修正，以在某种程度或角度上增加最终分数的客观性。容易得到，当投票人数少的时候，分数会趋向于平均分；投票人数越多，贝叶斯平均的结果就越接近真实投票的算术平均，加入的参数对最终排名的影响就越小。&lt;/p&gt;
&lt;p&gt;4、&lt;strong&gt;热度分数计算：&lt;/strong&gt;利用贝叶斯平均对梯度分数进行修正。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ask.qcloudimg.com/http-save/yehe-1920198/fphzjjxqi1.png?imageView2/2/w/1620&quot; alt=&quot;img&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这里，公式中的平均词频是贝叶斯平均公式中的C，平均分是贝叶斯平均公式中的m。也就是说在热词提取中，我们用梯度分数的平均分作为先验m，用平均词频作为C。&lt;/p&gt;
&lt;p&gt;热词提取中可以这么理解，词语每出现一次，相当于给词的热度进行了评分。&lt;/p&gt;
&lt;p&gt;词频少，也就代表了评分的人数少，则评分的不确定性大，需要用平均分来进行修正、平滑。这里可以把一些词频很少的词语的高分数拉下来，例如一个词语今天出现了18次，昨天出现了6次，这里梯度分数就比较高，为0.75，但这种词语其实更可能不是一个热词。&lt;/p&gt;
&lt;p&gt;词频大，远大于平均词频的词语，也就代表了评分的人数多。则分数会越趋向于自己的实际分数，这时平均分的影响变小。这是合理的，例如一个本来是百万量级的词语，第二天也出现了一个三倍的增量，这里热度价值就明显提高了。&lt;/p&gt;
&lt;p&gt;5、&lt;strong&gt;差分：&lt;/strong&gt;这里主要考虑是要解决热词的周期性影响的问题。具体做法非常简单，比较的时间间隔需包含一些影响较为明显的时间周期。例如按小时统计的热词，最好是拿今天和昨天一个相同的时间点进行比较。&lt;/p&gt;
&lt;p&gt;6、&lt;strong&gt;共现模型：&lt;/strong&gt;对于互为共现词的热词，进行一层筛选。&lt;/p&gt;
&lt;p&gt;通过频繁项集、word2vector等方法，发现出共现词语的关系。利用共现词语的信息，对热词进行一轮筛选，提取出最有价值的热词，避免信息冗余。&lt;/p&gt;
&lt;p&gt;7、&lt;strong&gt;时间序列分析：&lt;/strong&gt;考虑更详细的历史因素。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ask.qcloudimg.com/http-save/yehe-1920198/bvkr3v1afv.png?imageView2/2/w/1620&quot; alt=&quot;img&quot;/&gt;&lt;/p&gt;
&lt;p&gt;通过对词频进行时间序列分析，可以更详细地区分短期、长期与周期性热点；对一些更有价值的热词做热度预警；对热词的增长趋势进行分析等等。&lt;/p&gt;
&lt;p&gt;综上，我们在周期时间间隔内，通过贝叶斯平均修正的词语梯度分数来分析词语热度，并利用语料中词语的共现信息，进一步筛选得出热词。通过时间序列分析，得出热词的特性和增长趋势等。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;话题提取&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;提取出了热词，但一个词语对于事件或者话题的表达能力是有限的。这里我们从热词出发，进一步提取出话题。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ask.qcloudimg.com/http-save/yehe-1920198/dsujnz5ngc.png?imageView2/2/w/1620&quot; alt=&quot;img&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这里话题提取的工作也分为两步，第一步先找出一些候选的话题词组；第二步利用Attention的思想，从候选词组中找出一个包含的词语更加重要的词组，作为输出话题。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;候选词组提取&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;候选词组的提取主要根据信息熵的理论，用到以下一些特征。&lt;/p&gt;
&lt;p&gt;1、 &lt;strong&gt;内部聚合度——互信息&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这应该从信息熵说起。信息熵是用来衡量一个随机变量出现的期望值，一个变量的信息&lt;/p&gt;
&lt;p&gt;熵越大，表示其可能的出现的状态越多，越不确定，也即信息量越大。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ask.qcloudimg.com/http-save/yehe-1920198/zrrav47nmm.png?imageView2/2/w/1620&quot; alt=&quot;img&quot;/&gt;&lt;/p&gt;
&lt;p&gt;互信息可以说明两个随机变量之间的关系强弱。定义如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ask.qcloudimg.com/http-save/yehe-1920198/2i4gcdsym8.png?imageView2/2/w/1620&quot; alt=&quot;img&quot;/&gt;&lt;/p&gt;
&lt;p&gt;对上式做变换可以得到：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ask.qcloudimg.com/http-save/yehe-1920198/5enz69hhyk.png?imageView2/2/w/1620&quot; alt=&quot;img&quot;/&gt;&lt;/p&gt;
&lt;p&gt;表示Y的不确定度；表示在已知X的情况下，Y的不确定度，成为已经X时，Y的条件熵。则可知表示由X引入而使Y的不确定度减小的量。越大，说明X出现后，Y出现的不确定度减小，即Y很可能也会出现，也就是说X、Y关系越密切。反之亦然。&lt;/p&gt;
&lt;p&gt;在实际应用中，词组的内部聚合度即为词语间的内部聚合度。对于一个词组，我们选取使不确定性减少的程度最多的一种词语组合，来说明词组的内部聚合度。&lt;/p&gt;
&lt;p&gt;2、 &lt;strong&gt;所处语境的丰富程度——左右信息熵&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;刚刚已经提到信息熵说明了信息量的大小。那么如果一个词组的左右信息熵越大，即词&lt;/p&gt;
&lt;p&gt;组左右的可能情况越多，左右的搭配越丰富；则说明这个词组在不同的语境里可讨论的事情越多，越可能可以独立说明一个事件或话题。&lt;/p&gt;
&lt;p&gt;3、 &lt;strong&gt;是否普遍——这个很直观地可以通过词组出现的频次来衡量。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;话题精筛&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;对于某一个热词，挑选出来一批候选词组后，每个词组所含的词语不同，包含的信息量也不同。比如3月9日对于“巴黎”这个热词，我们提取出来的候选词组有“巴黎球迷”、“巴黎球员”、“淘汰巴黎”、“心疼巴黎”、“巴萨逆转巴黎”、“法国巴黎”、“巴黎时装周”。但“巴萨球员”、“巴黎球迷”、“淘汰巴黎”、“心疼巴黎”、“法国巴黎”这些词组中，“球员”、“球迷”、“淘汰”、“心疼”这些词语在很多其他的语境中也经常出现，它们的指向性并不明确；“法国巴黎”的信息量甚至只有一个地点。而“巴萨逆转巴黎”、 “巴黎时装周”则还包含了更具体的信息——足球比赛、球队、赛果、地点或者时装秀等，事件的指向更明确。这里，就需要我们对候选的话题词组进行筛选。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ask.qcloudimg.com/http-save/yehe-1920198/9lef9kthjp.png?imageView2/2/w/1620&quot; alt=&quot;img&quot;/&gt;&lt;/p&gt;
&lt;p&gt;筛选的主要依据或思想，其实和Attention机制是一样的，关键是要找出重要的词语。比如与“巴黎”的搭配，“巴萨”、“逆转”、“时装周”比“球迷”、“球员”、“心疼”、“法国”包含的信息更多，意义更大。可以想到，“巴萨”、“逆转”、“时装周”这些词语在其他无关语料中不常出现，“球迷”、“球员”、“心疼”、“法国”在不同语料中都常会出现，信息不明确。所以，在我们的问题中，可以通过TF-IDF的思路来确定Attention。&lt;/p&gt;
&lt;p&gt;具体说来，就是衡量词组中，各个词语在词组中的特异性。我们有理由相信，“巴萨”、“逆转”、“时装周”这些词语，在含“巴黎”的相关语料中出现的概率较高。热词的候选词组s的事件或话题表示能力分数可由以下公式求得：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ask.qcloudimg.com/http-save/yehe-1920198/sg826jsmjr.png?imageView2/2/w/1620&quot; alt=&quot;img&quot;/&gt;&lt;/p&gt;
&lt;p&gt;其中，N为候选词组中的词语个数，为候选词组中包含的第i个词语，Corpus (w)表示含有词语w的相关语料。&lt;/p&gt;
&lt;p&gt;另一方面，我们也需要考虑词组出现的频次，词组出现的次数越多，说明事件越重要。&lt;/p&gt;
&lt;p&gt;综上所述，我们通过候选词组的事件或话题表示能力分数以及出现频次，精筛出热词的相关话题。&lt;/p&gt;
&lt;blockquote readability=&quot;1.3386243386243&quot;&gt;
&lt;h2 id=&quot;问答&quot;&gt;&lt;strong&gt;问答&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://cloud.tencent.com/developer/ask/123213?fromSource=waitui&quot;&gt;使用&lt;em&gt;nlp&lt;/em&gt;进行句子压缩？&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;相关阅读&quot;&gt;&lt;strong&gt;相关阅读&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://cloud.tencent.com/developer/article/1158064?fromSource=waitui&quot;&gt;低于0.01%的极致Crash率是怎么做到的？&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://cloud.tencent.com/developer/article/1157984?fromSource=waitui&quot;&gt;神盾推荐——MAB算法应用总结&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://cloud.tencent.com/developer/article/1153060?fromSource=waitui&quot;&gt;逻辑回归如何用于新用户识别与触达&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;此文已由作者授权腾讯云+社区发布，原文链接：&lt;a href=&quot;https://cloud.tencent.com/developer/article/1155587?fromSource=waitui&quot; class=&quot;uri&quot;&gt;https://cloud.tencent.com/developer/article/1155587?fromSource=waitui&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;欢迎大家前往腾讯云+社区或关注云加社区微信公众号（QcloudCommunity），第一时间获取更多海量技术实践干货哦~&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;海量技术实践经验，尽在&lt;a href=&quot;https://cloud.tencent.com/developer?fromSource=waitui&quot;&gt;云加社区&lt;/a&gt;！&lt;/p&gt;
</description>
<pubDate>Fri, 13 Jul 2018 06:45:00 +0000</pubDate>
<dc:creator>腾讯云+社区</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/qcloud1001/p/9304872.html</dc:identifier>
</item>
<item>
<title>【源码解读】EOS测试插件：txn_test_gen_plugin.cpp - 一面千人</title>
<link>http://www.cnblogs.com/Evsward/p/txn_test_gen_plugin.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/Evsward/p/txn_test_gen_plugin.html</guid>
<description>&lt;blockquote readability=&quot;4.9090909090909&quot;&gt;
&lt;p&gt;本文内容本属于《&lt;a href=&quot;https://www.cnblogs.com/Evsward/p/eostps.html&quot;&gt;【精解】EOS TPS 多维实测&lt;/a&gt;》的内容，但由于在编写时篇幅过长，所以我决定将这一部分单独成文撰写，以便于理解。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote readability=&quot;10&quot;&gt;
&lt;p&gt;关键字：eos, txn_test_gen_plugin, signed_transaction, ordered_action_result, C++, EOS插件&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这个插件是官方开发用来测试块打包交易量的，这种方式由于是直接系统内部调用来模拟transaction，没有中间通讯的损耗，因此效率是非常高的，官方称通过这个插件测试到了8000的tps结果，而就我的测试结果来讲，没有这么恐怖，但也能到2000了，熟不知，其他的测试手段，例如cleos，eosjs可能只有百级的量。下面，我们一同来研究一下这个插件是如何实现以上功能的，过程中，我们也会思考EOS插件的架构体系，以及实现方法。通过本文的学习，如果有好的想法，我们也可以自己开发一个功能强大的插件pr给eos，为EOS社区做出我们自己的贡献。&lt;/p&gt;
&lt;blockquote readability=&quot;5.4330708661417&quot;&gt;
&lt;p&gt;关于txn_test_gen_plugin插件的使用，非常易于上手，本文不做分析，这方面可以直接参考&lt;a href=&quot;https://github.com/EOSIO/eos/tree/master/plugins/txn_test_gen_plugin&quot;&gt;官方文档&lt;/a&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;插件的整体架构&quot;&gt;插件的整体架构&lt;/h2&gt;
&lt;p&gt;插件代码整体结构中，我们上面介绍的核心功能的实现函数都是包含在一个结构体&lt;strong&gt;struct txn_test_gen_plugin_impl&lt;/strong&gt;中。剩余的其他代码都是对插件本身的通讯进行描述，包括如何调用，如何响应等，以及整个插件的生命周期的控制：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;set_program_options，设置参数的阶段，是最开始的阶段，内容只设置了txn-reference-block-lag的值，默认是0，-1代表最新头区块。&lt;/li&gt;
&lt;li&gt;plugin_initialize，这一时期就把包含核心功能的结构体txn_test_gen_plugin_impl加载到程序运行时内存中了，同时初始化标志位txn_reference_block_lag为txn-reference-block-lag的值。&lt;/li&gt;
&lt;li&gt;plugin_startup，我们通过基础插件http_plugin的支持获得了http接口的能力，这一时期，就暴露出来本插件的对外接口。&lt;/li&gt;
&lt;li&gt;plugin_shutdown，调用stop_generation函数，重置标志位running为false，计时器关闭，打印关闭提示日志。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;下面是对外暴露的三个接口之一的stop_generation函数的源码：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;void stop_generation() {
    if(!running)
        throw fc::exception(fc::invalid_operation_exception_code);
    timer.cancel();
    running = false;
    ilog(&quot;Stopping transaction generation test&quot;);
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;接下来，我们主要集中精力在结构体txn_test_gen_plugin_impl上，研究路线是以剩余两个接口分别为入口进行逐一分析。&lt;/p&gt;
&lt;h2 id=&quot;create_test_accounts-接口&quot;&gt;create_test_accounts 接口&lt;/h2&gt;
&lt;p&gt;关于这个接口，调用方法是&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;curl --data-binary '[&quot;eosio&quot;, &quot;5KQwrPbwdL6PhXujxW37FSSQZ1JiwsST4cqQzDeyXtP79zkvFD3&quot;]' http://localhost:8888/v1/txn_test_gen/create_test_accounts&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;传入的参数是eosio以及其私钥。我们进入到函数create_test_accounts中去分析源码。&lt;/p&gt;
&lt;h3 id=&quot;准备知识&quot;&gt;准备知识&lt;/h3&gt;
&lt;p&gt;首先，整个函数涉及到的所有transaction都是打包存入到一个vector集合&lt;strong&gt;std::vector&lt;/strong&gt;中去。&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;trxs是一个事务集，它包含很多的trx，而其中每一个trx包含一个actions集合&lt;strong&gt;vector&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;一准备账户&quot;&gt;一、准备账户&lt;/h3&gt;
&lt;p&gt;trxs的第一个trx，内容为账户创建：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;定义3个账户：txn.test.a，txn.test.b, txn.test.t&lt;/li&gt;
&lt;li&gt;辅助功能：&lt;strong&gt;controller&amp;amp; cc = app().get_plugin&amp;lt;chain_plugin&amp;gt;().chain();&lt;/strong&gt;，通过cc可以随时调用本地区块链上的任意信息。&lt;/li&gt;
&lt;li&gt;通过&lt;strong&gt;fc::crypto::private_key::regenerate&lt;/strong&gt;函数分别生成他们的私钥，要传入生成秘钥的seed。&lt;/li&gt;
&lt;li&gt;通过私钥直接调用get_public_key()即可获得公钥&lt;/li&gt;
&lt;li&gt;设置每个账户的owner和active权限对应的公钥，一般来讲他们是相同的&lt;/li&gt;
&lt;li&gt;账户的创建者均为我们外部调用create_test_accounts接口时传入的账户eosio，注意：&lt;strong&gt;eosio的私钥是通过字符串传入的，要通过fc::crypto::private_key转换成私钥对象&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;将每一个账户的创建组装好成为一个action，存入trx的actions集合中去。&lt;/li&gt;
&lt;li&gt;trx的actions成员已经设置完毕，完成剩余trx的组装工作，包括
&lt;ul&gt;&lt;li&gt;expiration，通过cc获得当前头区块的时间，加上延迟时间，这里是30s，&lt;strong&gt;fc::seconds(30)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;reference_block，值为通过cc获取当前的头区块，意思为本transaction的引用区块，所有的信息是引用的这个区块为头区块的环境&lt;/li&gt;
&lt;li&gt;sign，签名，使用的是创建者eosio的私钥对象，上面我们已经准备好了，签名的数据是data的摘要
&lt;ul&gt;&lt;li&gt;当前trx的actions中的元素的data并不是如文首的transaction中的data的加密串的结构，而是明文的，这里的加密是数字摘要技术，感兴趣的朋友可以去《&lt;a href=&quot;https://www.cnblogs.com/Evsward/p/cryptography.html&quot;&gt;应用密码学初探&lt;/a&gt;》进行了解。&lt;/li&gt;
&lt;li&gt;摘要的源码函数是：sig_digest(chain_id, context_free_data)，其中参数使用到了chain_id，而context_free_data就是上面提到的明文data内容，所以它是要与链id一起做数字摘要的（这一点我在使用eosjs尝试自己做摘要的时候并未想到）&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;这一部分的源码展示如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;name newaccountA(&quot;txn.test.a&quot;);
name newaccountB(&quot;txn.test.b&quot;);
name newaccountC(&quot;txn.test.t&quot;);
name creator(init_name);

abi_def currency_abi_def = fc::json::from_string(eosio_token_abi).as&amp;lt;abi_def&amp;gt;();

controller&amp;amp; cc = app().get_plugin&amp;lt;chain_plugin&amp;gt;().chain();
auto chainid = app().get_plugin&amp;lt;chain_plugin&amp;gt;().get_chain_id();

fc::crypto::private_key txn_test_receiver_A_priv_key = fc::crypto::private_key::regenerate(fc::sha256(std::string(64, 'a')));
fc::crypto::private_key txn_test_receiver_B_priv_key = fc::crypto::private_key::regenerate(fc::sha256(std::string(64, 'b')));
fc::crypto::private_key txn_test_receiver_C_priv_key = fc::crypto::private_key::regenerate(fc::sha256(std::string(64, 'c')));
fc::crypto::public_key  txn_text_receiver_A_pub_key = txn_test_receiver_A_priv_key.get_public_key();
fc::crypto::public_key  txn_text_receiver_B_pub_key = txn_test_receiver_B_priv_key.get_public_key();
fc::crypto::public_key  txn_text_receiver_C_pub_key = txn_test_receiver_C_priv_key.get_public_key();
fc::crypto::private_key creator_priv_key = fc::crypto::private_key(init_priv_key);

//create some test accounts
{
    signed_transaction trx;
    
    //create &quot;A&quot; account
    {
        auto owner_auth   = eosio::chain::authority{1, {{txn_text_receiver_A_pub_key, 1}}, {}};
        auto active_auth  = eosio::chain::authority{1, {{txn_text_receiver_A_pub_key, 1}}, {}};
        trx.actions.emplace_back(vector&amp;lt;chain::permission_level&amp;gt;{{creator,&quot;active&quot;}}, newaccount{creator, newaccountA, owner_auth, active_auth});
    }
    //create &quot;B&quot; account
    {
        auto owner_auth   = eosio::chain::authority{1, {{txn_text_receiver_B_pub_key, 1}}, {}};
        auto active_auth  = eosio::chain::authority{1, {{txn_text_receiver_B_pub_key, 1}}, {}};
        trx.actions.emplace_back(vector&amp;lt;chain::permission_level&amp;gt;{{creator,&quot;active&quot;}}, newaccount{creator, newaccountB, owner_auth, active_auth});
    }
    //create &quot;txn.test.t&quot; account
    {
        auto owner_auth   = eosio::chain::authority{1, {{txn_text_receiver_C_pub_key, 1}}, {}};
        auto active_auth  = eosio::chain::authority{1, {{txn_text_receiver_C_pub_key, 1}}, {}};
        trx.actions.emplace_back(vector&amp;lt;chain::permission_level&amp;gt;{{creator,&quot;active&quot;}}, newaccount{creator, newaccountC, owner_auth, active_auth});
    }
    trx.expiration = cc.head_block_time() + fc::seconds(30);
    trx.set_reference_block(cc.head_block_id());
    trx.sign(creator_priv_key, chainid);
    trxs.emplace_back(std::move(trx));
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;二token相关&quot;&gt;二、token相关&lt;/h3&gt;
&lt;p&gt;trxs的第二个trx，内容为token创建和issue，为账户转账为之后的测试做准备&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;为账户txn.test.t设置eosio.token合约，之前在操作cleos set contract的时候可以通过打印结果发现，是有setcode和setabi两个步骤的。
&lt;ul&gt;&lt;li&gt;setcode handler:
&lt;ul&gt;&lt;li&gt;设置handler的账户为txn.test.t&lt;/li&gt;
&lt;li&gt;将wasm设置为handler的code，wasm是通过eosio.token合约的eosio_token_wast文件获取的，&lt;strong&gt;vector&amp;lt;uint8_t&amp;gt; wasm = wast_to_wasm(std::string(eosio_token_wast))&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;将handler加上相关权限组装成action装入trx的actions集合中。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;setabi handler:
&lt;ul&gt;&lt;li&gt;设置handler的账户为txn.test.t&lt;/li&gt;
&lt;li&gt;设置handler的abi，将文件eosio_token_abi(json格式的)转成json转储为abi_def结构，然后通过&lt;strong&gt;fc::raw::pack&lt;/strong&gt;操作将结果赋值给abi&lt;/li&gt;
&lt;li&gt;将handler加上相关权限组装成action装入trx的actions集合中。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;使用账户txn.test.t创建token，标志位CUR，总发行量十亿，装成action装入trx的actions集合中。&lt;/li&gt;
&lt;li&gt;issue CUR 给txn.test.t 600枚CUR，装成action装入trx的actions集合中。&lt;/li&gt;
&lt;li&gt;从txn.test.t转账给txn.test.a 200枚CUR，装成action装入trx的actions集合中。&lt;/li&gt;
&lt;li&gt;从txn.test.t转账给txn.test.b 200枚CUR，装成action装入trx的actions集合中。&lt;/li&gt;
&lt;li&gt;trx的actions成员已经设置完毕，完成剩余trx的组装工作（同上），这里只介绍不同的部分
&lt;ul&gt;&lt;li&gt;max_net_usage_words，指定了网络资源的最大使用限制为5000个词。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;这一部分的源码展示如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;//set txn.test.t contract to eosio.token &amp;amp; initialize it
{
    signed_transaction trx;
    vector&amp;lt;uint8_t&amp;gt; wasm = wast_to_wasm(std::string(eosio_token_wast));
    setcode handler;
    handler.account = newaccountC;
    handler.code.assign(wasm.begin(), wasm.end());
    trx.actions.emplace_back( vector&amp;lt;chain::permission_level&amp;gt;{{newaccountC,&quot;active&quot;}}, handler);
    
    {
        setabi handler;
        handler.account = newaccountC;
        handler.abi = fc::raw::pack(json::from_string(eosio_token_abi).as&amp;lt;abi_def&amp;gt;());
        trx.actions.emplace_back( vector&amp;lt;chain::permission_level&amp;gt;{{newaccountC,&quot;active&quot;}}, handler);
    }
    {
        action act;
        act.account = N(txn.test.t);
        act.name = N(create);
        act.authorization = vector&amp;lt;permission_level&amp;gt;{{newaccountC,config::active_name}};
        act.data = eosio_token_serializer.variant_to_binary(&quot;create&quot;, fc::json::from_string(&quot;{\&quot;issuer\&quot;:\&quot;txn.test.t\&quot;,\&quot;maximum_supply\&quot;:\&quot;1000000000.0000 CUR\&quot;}}&quot;));
        trx.actions.push_back(act);
    }
    {
        action act;
        act.account = N(txn.test.t);
        act.name = N(issue);
        act.authorization = vector&amp;lt;permission_level&amp;gt;{{newaccountC,config::active_name}};
        act.data = eosio_token_serializer.variant_to_binary(&quot;issue&quot;, fc::json::from_string(&quot;{\&quot;to\&quot;:\&quot;txn.test.t\&quot;,\&quot;quantity\&quot;:\&quot;600.0000 CUR\&quot;,\&quot;memo\&quot;:\&quot;\&quot;}&quot;));
        trx.actions.push_back(act);
    }
    {
        action act;
        act.account = N(txn.test.t);
        act.name = N(transfer);
        act.authorization = vector&amp;lt;permission_level&amp;gt;{{newaccountC,config::active_name}};
        act.data = eosio_token_serializer.variant_to_binary(&quot;transfer&quot;, fc::json::from_string(&quot;{\&quot;from\&quot;:\&quot;txn.test.t\&quot;,\&quot;to\&quot;:\&quot;txn.test.a\&quot;,\&quot;quantity\&quot;:\&quot;200.0000 CUR\&quot;,\&quot;memo\&quot;:\&quot;\&quot;}&quot;));
        trx.actions.push_back(act);
    }
    {
        action act;
        act.account = N(txn.test.t);
        act.name = N(transfer);
        act.authorization = vector&amp;lt;permission_level&amp;gt;{{newaccountC,config::active_name}};
        act.data = eosio_token_serializer.variant_to_binary(&quot;transfer&quot;, fc::json::from_string(&quot;{\&quot;from\&quot;:\&quot;txn.test.t\&quot;,\&quot;to\&quot;:\&quot;txn.test.b\&quot;,\&quot;quantity\&quot;:\&quot;200.0000 CUR\&quot;,\&quot;memo\&quot;:\&quot;\&quot;}&quot;));
        trx.actions.push_back(act);
    }
    
    trx.expiration = cc.head_block_time() + fc::seconds(30);
    trx.set_reference_block(cc.head_block_id());
    trx.max_net_usage_words = 5000;
    trx.sign(txn_test_receiver_C_priv_key, chainid);
    trxs.emplace_back(std::move(trx));
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;发起请求&quot;&gt;发起请求&lt;/h3&gt;
&lt;p&gt;目前trxs集合已经包含了两个trx元素，其中每个trx包含了多个action。下面要将trxs推送到链上执行&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;push_transactions函数，遍历trxs元素，每个trx单独发送push_next_transaction&lt;/li&gt;
&lt;li&gt;push_next_transaction函数，首先将trx取出通过packed_transaction函数进行组装成post的结构&lt;/li&gt;
&lt;li&gt;packed_transaction函数，通过set_transaction函数对trx进行摘捡，使用pack_transaction函数进行组装&lt;/li&gt;
&lt;li&gt;pack_transaction函数，就是调用了一下上面提过的&lt;strong&gt;fc::raw::pack&lt;/strong&gt;操作，然后通过accept_transaction函数向链发起请求&lt;/li&gt;
&lt;li&gt;accept_transaction函数，是chain_plugin的一个函数，它内部调用了incoming_transaction_async_method异步发起交易请求。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;这部分代码比较杂，分为几个部分：&lt;/p&gt;
&lt;p&gt;push_transactions函数：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;void push_transactions( std::vector&amp;lt;signed_transaction&amp;gt;&amp;amp;&amp;amp; trxs, const std::function&amp;lt;void(fc::exception_ptr)&amp;gt;&amp;amp; next ) {
    auto trxs_copy = std::make_shared&amp;lt;std::decay_t&amp;lt;decltype(trxs)&amp;gt;&amp;gt;(std::move(trxs));
    push_next_transaction(trxs_copy, 0, next);
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;push_next_transaction函数：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;static void push_next_transaction(const std::shared_ptr&amp;lt;std::vector&amp;lt;signed_transaction&amp;gt;&amp;gt;&amp;amp; trxs, size_t index, const std::function&amp;lt;void(const fc::exception_ptr&amp;amp;)&amp;gt;&amp;amp; next ) {
      chain_plugin&amp;amp; cp = app().get_plugin&amp;lt;chain_plugin&amp;gt;();
      cp.accept_transaction( packed_transaction(trxs-&amp;gt;at(index)), [=](const fc::static_variant&amp;lt;fc::exception_ptr, transaction_trace_ptr&amp;gt;&amp;amp; result){
         if (result.contains&amp;lt;fc::exception_ptr&amp;gt;()) {
            next(result.get&amp;lt;fc::exception_ptr&amp;gt;());
         } else {
            if (index + 1 &amp;lt; trxs-&amp;gt;size()) {
               push_next_transaction(trxs, index + 1, next);
            } else {
               next(nullptr);
            }
         }
      });
   }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;packed_transaction函数，set_transaction函数以及pack_transaction函数的代码都属于本插件源码之外的EOS库源码，由于本身代码量也较少，含义在上面已经完全解释过了，这里不再粘贴源码。&lt;/p&gt;
&lt;p&gt;accept_transaction函数也是EOS的库源码&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;void chain_plugin::accept_transaction(const chain::packed_transaction&amp;amp; trx, next_function&amp;lt;chain::transaction_trace_ptr&amp;gt; next) {
    my-&amp;gt;incoming_transaction_async_method(std::make_shared&amp;lt;packed_transaction&amp;gt;(trx), false, std::forward&amp;lt;decltype(next)&amp;gt;(next));
}

incoming_transaction_async_method(app().get_method&amp;lt;incoming::methods::transaction_async&amp;gt;())&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;start_generation-接口&quot;&gt;start_generation 接口&lt;/h2&gt;
&lt;p&gt;该接口的调用方法是：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;curl --data-binary '[&quot;&quot;, 20, 20]' http://localhost:8888/v1/txn_test_gen/start_generation&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;参数列表为：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;第一个参数为 salt，一般用于“加盐”加密算法的值，这里我们可以留空。&lt;/li&gt;
&lt;li&gt;第二个参数为 period，发送交易的间隔时间，单位为ms，这里是20。&lt;/li&gt;
&lt;li&gt;第三个参数为 batch_size，每个发送间隔周期内打包交易的数量，这里也是20。&lt;/li&gt;
&lt;/ul&gt;&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;翻译过来就是：每20ms提交20笔交易。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;接下来，以start_generation 函数为入口进行源码分析。&lt;/p&gt;
&lt;h3 id=&quot;start_generation-函数&quot;&gt;start_generation 函数&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;校验：
&lt;ul&gt;&lt;li&gt;period的取值范围为(1, 2500)&lt;/li&gt;
&lt;li&gt;batch_size的取值范围为(1, 250)&lt;/li&gt;
&lt;li&gt;batch_size必须是2的倍数，batch_size &amp;amp; 1结果为假0才可以，这是一个位运算，与&amp;amp;，所以batch_size的值转为二进制时末位不能为1，所以就是2的倍数即可。&lt;/li&gt;
&lt;li&gt;对标志位running的控制。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;这部分代码展示如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;if(running)
    throw fc::exception(fc::invalid_operation_exception_code);
if(period &amp;lt; 1 || period &amp;gt; 2500)
    throw fc::exception(fc::invalid_operation_exception_code);
if(batch_size &amp;lt; 1 || batch_size &amp;gt; 250)
    throw fc::exception(fc::invalid_operation_exception_code);
if(batch_size &amp;amp; 1)
    throw fc::exception(fc::invalid_operation_exception_code);

running = true;&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;定义两个action，分别是：
&lt;ul&gt;&lt;li&gt;账户txn.test.a给txn.test.b转账1000枚CUR&lt;/li&gt;
&lt;li&gt;txn.test.b转给txn.test.a同样1000枚CUR&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;这部分代码展示如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;//create the actions here
act_a_to_b.account = N(txn.test.t);
act_a_to_b.name = N(transfer);
act_a_to_b.authorization = vector&amp;lt;permission_level&amp;gt;{{name(&quot;txn.test.a&quot;),config::active_name}};
act_a_to_b.data = eosio_token_serializer.variant_to_binary(&quot;transfer&quot;, fc::json::from_string(fc::format_string(&quot;{\&quot;from\&quot;:\&quot;txn.test.a\&quot;,\&quot;to\&quot;:\&quot;txn.test.b\&quot;,\&quot;quantity\&quot;:\&quot;1.0000 CUR\&quot;,\&quot;memo\&quot;:\&quot;${l}\&quot;}&quot;, fc::mutable_variant_object()(&quot;l&quot;, salt))));

act_b_to_a.account = N(txn.test.t);
act_b_to_a.name = N(transfer);
act_b_to_a.authorization = vector&amp;lt;permission_level&amp;gt;{{name(&quot;txn.test.b&quot;),config::active_name}};
act_b_to_a.data = eosio_token_serializer.variant_to_binary(&quot;transfer&quot;, fc::json::from_string(fc::format_string(&quot;{\&quot;from\&quot;:\&quot;txn.test.b\&quot;,\&quot;to\&quot;:\&quot;txn.test.a\&quot;,\&quot;quantity\&quot;:\&quot;1.0000 CUR\&quot;,\&quot;memo\&quot;:\&quot;${l}\&quot;}&quot;, fc::mutable_variant_object()(&quot;l&quot;, salt))));
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;接下来，是对参数period和batch_size的储存为结构体作用域的变量以供结构体内其他函数调用，然后打印日志，最后调用arm_timer函数。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;timer_timeout = period; // timer_timeout是结构体的成员变量
batch = batch_size/2; // batch是结构体的成员变量
ilog(&quot;Started transaction test plugin; performing ${p} transactions every ${m}ms&quot;, (&quot;p&quot;, batch_size)(&quot;m&quot;, period));
arm_timer(boost::asio::high_resolution_timer::clock_type::now());&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;arm_timer-函数&quot;&gt;arm_timer 函数&lt;/h3&gt;
&lt;p&gt;从start_generation 函数过来，传入的参数是当前时间now，该函数主要功能是对计时器的初始化操作（计时器与文首的stop_generation函数中的关闭计时器呼应）。具体内容可分为两部分：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;设定计时器的过期时间，值为start_generation 接口的参数period与now相加的值，即从现在开始，过period这么久，当前计时器对象timer就过期。&lt;/li&gt;
&lt;li&gt;设定计时器的异步定时任务，任务体直接调用send_transaction函数，对函数的返回值进行处理，如果有报错信息（一般是服务中止）则调用stop_generation函数关闭插件。&lt;/li&gt;
&lt;/ul&gt;&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;注意stop_generation函数关闭的是定时任务的无限递归，中止定时任务，停止发送测试交易。但它并没有停止插件服务，我们仍旧可以通过再次请求插件接口启动无限测试交易。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这部分代码如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;void arm_timer(boost::asio::high_resolution_timer::time_point s) {
    timer.expires_at(s + std::chrono::milliseconds(timer_timeout));
    timer.async_wait([this](const boost::system::error_code&amp;amp; ec) {
        if(!running || ec)
            return;
        
        send_transaction([this](const fc::exception_ptr&amp;amp; e){
            if (e) {
                elog(&quot;pushing transaction failed: ${e}&quot;, (&quot;e&quot;, e-&amp;gt;to_detail_string()));
                stop_generation();
            } else { // 如果没有终止报错，则无限递归调用arm_timer函数，递归时传入的参数代替上面的now是当前timer对象的过期时间，这样在新的递归调用中，timer的创建会以这个时间再加上period，无间隔继续执行。
                arm_timer(timer.expires_at());
            }
        });
    });
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;send_transaction-函数&quot;&gt;send_transaction 函数&lt;/h3&gt;
&lt;p&gt;这个函数是本插件的核心功能部分，主要是发送测试交易，对transaction的处理，将我们上面start_generation 函数中设置的两个action打包到transaction中去，以及对transaction各项属性的设置。具体步骤为：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;声明trxs，并为其设置大小为start_generation 接口中batch_size的值。&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code&gt;std::vector&amp;lt;signed_transaction&amp;gt; trxs;
trxs.reserve(2*batch); &lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;接下来，与上面介绍的create_test_accounts 接口的账户准备过程相同，准备私钥公钥，不多介绍。继续准备trx的参数：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;nonce，是用来赋值context_free_actions的&lt;/li&gt;
&lt;li&gt;context_free_actions：官方介绍一大堆，总之就是正常action是需要代价的，要确权，要占用主网资源什么的，所以搞了一个context_free_actions，字面意思就是上下文免费的action，这里权当测试用，填入的数据也是随机nonce组装的。&lt;/li&gt;
&lt;li&gt;abi_serializer，用来序列化abi的，传入的system_account_name的abi值，它是在这里被赋值，然而是在结构体的作用域中被调用的。&lt;/li&gt;
&lt;li&gt;reference_block_num的处理，引用区块，上面我们也提到过，而这里面增加了一层判断，是根据标志位txn_reference_block_lag的值来比较，也就是说reference_block_num最后的值是最新区块号减去txn_reference_block_lag的值，但是最小值为0，不可为负数。&lt;/li&gt;
&lt;li&gt;通过reference_block_num获得reference_block_id&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;这部分代码如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;controller&amp;amp; cc = app().get_plugin&amp;lt;chain_plugin&amp;gt;().chain();
auto chainid = app().get_plugin&amp;lt;chain_plugin&amp;gt;().get_chain_id();

fc::crypto::private_key a_priv_key = fc::crypto::private_key::regenerate(fc::sha256(std::string(64, 'a')));
fc::crypto::private_key b_priv_key = fc::crypto::private_key::regenerate(fc::sha256(std::string(64, 'b')));

static uint64_t nonce = static_cast&amp;lt;uint64_t&amp;gt;(fc::time_point::now().sec_since_epoch()) &amp;lt;&amp;lt; 32;
abi_serializer eosio_serializer(cc.db().find&amp;lt;account_object, by_name&amp;gt;(config::system_account_name)-&amp;gt;get_abi());

uint32_t reference_block_num = cc.last_irreversible_block_num();
if (txn_reference_block_lag &amp;gt;= 0) {
    reference_block_num = cc.head_block_num();
    if (reference_block_num &amp;lt;= (uint32_t)txn_reference_block_lag) {
        reference_block_num = 0;
    } else {
        reference_block_num -= (uint32_t)txn_reference_block_lag;
    }
}

block_id_type reference_block_id = cc.get_block_id_for_num(reference_block_num);
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;接下来，就是循环打包trx，我们设置的batch_size好比是20，现在我们已有两个action，每个action对应一个trx，则循环只需要执行10次，每次执行两个trx即可实现，每个trx相关的属性在上一阶段都已准备好。直接看代码吧。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;for(unsigned int i = 0; i &amp;lt; batch; ++i) {
    {
        signed_transaction trx;
        trx.actions.push_back(act_a_to_b);
        trx.context_free_actions.emplace_back(action({}, config::null_account_name, &quot;nonce&quot;, fc::raw::pack(nonce++)));
        trx.set_reference_block(reference_block_id);
        trx.expiration = cc.head_block_time() + fc::seconds(30);
        trx.max_net_usage_words = 100;
        trx.sign(a_priv_key, chainid);
        trxs.emplace_back(std::move(trx));
    }
    {
        signed_transaction trx;
        trx.actions.push_back(act_b_to_a);
        trx.context_free_actions.emplace_back(action({}, config::null_account_name, &quot;nonce&quot;, fc::raw::pack(nonce++)));
        trx.set_reference_block(reference_block_id);
        trx.expiration = cc.head_block_time() + fc::seconds(30);
        trx.max_net_usage_words = 100;
        trx.sign(b_priv_key, chainid);
        trxs.emplace_back(std::move(trx));
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;最后，执行&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;push_transactions(std::move(trxs), next);&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这个部分与create_test_accounts 接口发起请求的部分一致，这里不再重复展示。&lt;/p&gt;
&lt;h2 id=&quot;总结&quot;&gt;总结&lt;/h2&gt;
&lt;p&gt;到这里为止，我们已经完全分析透了txn_test_gen_plugin 插件的内容。本文首先从大体上介绍了插件的架构，生命周期，通讯请求与返回。接着介绍了核心结构体的内容，然后以对外接口为入口，沿着一条线将每个功能的实现完整地研究清楚。通过本文的学习，我们对于EOS插件的体系有了初步深刻的理解，同时我们也完全搞清楚了txn_test_gen_plugin 插件的功能，以及它为什么会达到一个比较高的tps的表现。&lt;/p&gt;
&lt;h2 id=&quot;参考资料&quot;&gt;参考资料&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;EOSIO/eos&lt;/li&gt;
&lt;li&gt;eos官方文档&lt;/li&gt;
&lt;/ul&gt;
</description>
<pubDate>Fri, 13 Jul 2018 06:30:00 +0000</pubDate>
<dc:creator>一面千人</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/Evsward/p/txn_test_gen_plugin.html</dc:identifier>
</item>
<item>
<title>.Net Core Cors中间件解析 - MicroHeart！</title>
<link>http://www.cnblogs.com/MicroHeart/p/9298759.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/MicroHeart/p/9298759.html</guid>
<description>&lt;h2&gt;同源策略和资源跨域共享&lt;/h2&gt;
&lt;h3&gt;　1、同源策略&lt;/h3&gt;
&lt;p&gt;　　 同源策略，它是&lt;span&gt;由Netscape提出的一个著名的安全策略&lt;/span&gt;。现在所有支持JavaScript 的浏览器都会使用这个策略。所谓同源是指，&lt;span&gt;域名，协议，端口&lt;/span&gt;相同。&lt;/p&gt;
&lt;h4&gt;&lt;span&gt;　1.1、目的&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;&lt;span&gt;　　 主要是为了保证用户信息的安全，防止网站窃取用户数据。假如没有同源策略，可能就会有下面这种情况的发生。用户访问两个网站A/B，并登录了A网站，A网站会在计算机本地存储Cookie或者Token等等，在访问B网站的时候，B网站就可以访问这些本地的存储信息，B网站可以使用用户的Cookie去登录A网站，那这样用户信息就被泄露了。&lt;/span&gt;&lt;/p&gt;
&lt;h4&gt;&lt;span&gt;　1.2、限制范围&lt;/span&gt;&lt;span&gt;　　　&lt;/span&gt;&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;Cookie、LocalStorage和indexDB无法访问(只有同源的网页才能共享Cookie)&lt;/li&gt;
&lt;li&gt;DOM无法获得（父窗口和子窗口的地址是同源的才能获取子窗口的信息）&lt;/li&gt;
&lt;li&gt;AJAX请求不能被发送(AJAX请求只能发送给同源的网址)&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;　　要知道一点，这些限制其实都是浏览器做的限制。&lt;/p&gt;
&lt;h3&gt;　2、跨域资源共享&lt;/h3&gt;
&lt;p&gt;　　跨域资源共享跟同源策略相反。在整个跨域通信过程中，浏览器会自动识别此次请求是否跨域，一旦发现跨域，就自动添加请求头信息(如Origin)或者自动发送一次请求方式为option的预请求。浏览器将CORS请求分为两类：简单请求和非简单请求。&lt;/p&gt;
&lt;h4&gt;　2.1、简单请求&lt;/h4&gt;
&lt;p&gt;　　当浏览器的请求方式是Head、Get或者Post，并且HTTP的头信息中不会超出以下字段:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;
&lt;p&gt;Accept&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Accept-Language&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Content-Language&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Origin&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;时，浏览器会将该请求定义为简单请求，否则就是非简单请求。当浏览器判断为简单请求后，浏览器会自动再请求报文头中加上Origin字段，表明此次请求来自的地址(协议+域名+端口)。然后服务器需要去判断是否接受这个来源的请求。如果允许服务器端返回的头部中需要有Access-Control-Allow-Origin，其值为请求时Origin字段的值或*（表示接受任意源的请求）。请求头中还会有Access-Control-Allow-Methods表示服务器允许的跨域请求的方式。Access-Control-Allow-Headers表示请求头中允许出现的字段。&lt;/p&gt;
&lt;h4&gt;　2.2、 非简单请求&lt;/h4&gt;
&lt;p&gt;　　　当浏览器判断为非简单请求后，会发送两次请求，首先浏览器会自动发送一个请求方式为options的请求，并在请求头中&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;加上Access-Control-Request-Method表示下次请求的方法，&lt;/li&gt;
&lt;li&gt;加上Origin表明来源，&lt;/li&gt;
&lt;li&gt;加上Access-Control-Request-Headers表示下次请求的请求头中额外的字段。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;　　   服务器收到请求后，需要获取这三个请求头中的值，并进行判断，确认是否允许进行跨域。如果服务器返回的请求头中没有任何CORS相关的请求头信息，浏览器会认为不通过预检，也不会进行第二次请求。&lt;/p&gt;
&lt;p&gt;　　   服务器如果接受跨域并验证通过了options的请求，会返回Access-Control-Allow-Origin(表明允许跨域请求的源)、Access-Control-Allow-Methods(允许跨域请求的请求方式)、Access-Control-Allow-Headers(允许请求头中包含的额外字段)。然后浏览器才会发送真正的请求。　　　　　　　　　　　　　　　　　　&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/794803/201807/794803-20180712142313711-417507927.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　(第一次options请求)&lt;br/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/794803/201807/794803-20180712144344863-179107870.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; 　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　(第二次请求)&lt;/p&gt;
&lt;h2&gt;二、服务端实现CORS&lt;/h2&gt;
&lt;p&gt;　　在.Net Core Web Api中使用很简单，首先安装包&lt;span class=&quot;hljs-selector-tag&quot;&gt;Microsoft&lt;span class=&quot;hljs-selector-class&quot;&gt;.AspNet&lt;span class=&quot;hljs-selector-class&quot;&gt;.WebApi&lt;span class=&quot;hljs-selector-class&quot;&gt;.Cors，在StartUp中添加下面两句&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;        public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; ConfigureServices(IServiceCollection services)
        {
            services.AddMvc();
　　　　　　　//添加Cors，并配置CorsPolicy 
            services.AddCors(options &lt;/span&gt;=&amp;gt; options.AddPolicy(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;CorsTest&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, p =&amp;gt;&lt;span&gt; p.AllowAnyOrigin().AllowAnyHeader().AllowAnyMethod()));&lt;/span&gt;&lt;span&gt;
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; Configure(IApplicationBuilder app, IHostingEnvironment env, ILoggerFactory loggerFactory)
        {
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (env.IsDevelopment())
            {
                app.UseDeveloperExceptionPage();
            }&lt;br/&gt;&lt;/span&gt;&lt;span&gt;　　　　　　  //&lt;span&gt;注意UseCors()要在UseMvc()之前&lt;/span&gt;
            app.UseCors(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;CorsTest&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            app.UseMvc();
        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在使用的时候&lt;span&gt;只需要在Controller或者Action中加上特性[EnableCors(&quot;CorsTest&quot;)]&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
    [EnableCors(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;CorsTest&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)]
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; ValuesController : Controller
    {
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; ILogger&amp;lt;ValuesController&amp;gt;&lt;span&gt; _logger;
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; ValuesController(ILogger&amp;lt;ValuesController&amp;gt;&lt;span&gt; logger)
        {
            _logger &lt;/span&gt;=&lt;span&gt; logger;
        }
        [HttpGet]
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; IEnumerable&amp;lt;&lt;span&gt;string&lt;/span&gt;&amp;gt;&lt;span&gt; Get()
        {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;[] { &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;value1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;value2&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; };
        }
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;现在服务端已经配置好了，现在需要通过前端跨域请求&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
    测试
&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    测试
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&quot;https://code.jquery.com/jquery-3.3.1.min.js&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;text/javascript&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
    $(&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
        $.ajax({
            type: &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;get&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
            url: &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;http://localhost:7000/api/values&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
             beforeSend: &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; (request) {//在请求报文头中加入Authorization 目的是让请求为非简单请求
                request.setRequestHeader(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Authorization&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Bearer 071899A00D4D4C5B1C41A6B0211B9399&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            },
            success: &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; (result) {
                alert(result);
            }
        }, &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;json&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
    });
&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;测试结果如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/794803/201807/794803-20180712171637446-410972081.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　　　　　　　　　　　　　　　　　　　　　　　(options请求)&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/794803/201807/794803-20180712171646486-109731498.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　　　　　　　　　　　　　　　　　　　　　　　（第二次请求）&lt;/p&gt;
&lt;p&gt; 上面配置允许所有的地址请求这个接口，也可以单独配置某个地址。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;services.AddCors(options =&amp;gt; options.AddPolicy(&quot;CorsTest&quot;, p =&amp;gt; p.WithOrigins(&quot;http://localhost:8089&quot;)
                                                                            .AllowAnyHeader()
                                                                            .AllowAnyMethod()));&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt; 三、解析Cors源码&lt;/h2&gt;
&lt;p&gt;　　打开&lt;a href=&quot;https://github.com/aspnet/CORS&quot; target=&quot;_blank&quot;&gt;CORS源码&lt;/a&gt;，主要的是CorsMiddleware、CorsOptions、CorsPolicy、CorsPolicyBuilder、CorsResult、CorsService这几个类。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;CorsPolicy：就是我们在Startup中的配置，如允许哪些域名可以跨域请求，允许哪些跨域请求方式，允许哪些额外的请求头，每个配置对应一个名称。&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;span&gt;       services.AddCors(options =&amp;gt; options.AddPolicy(&quot;CorsTest&quot;, p =&amp;gt;&lt;span&gt; p.AllowAnyOrigin().AllowAnyHeader().AllowAnyMethod()));&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;CorsOptions：中包含一个字典IDictionary&amp;lt;string, CorsPolicy&amp;gt; PolicyMap，一个项目可能有过个Cors配置，所以这个CorsOptions就是通过配置名称管理这些配置的。&lt;/li&gt;
&lt;li&gt;CorsPolicyBuilder：通过它来构造CorsPolicy。&lt;/li&gt;
&lt;li&gt;CorsResult：是验证跨域过程得到的结果。如在第一次Options请求时，客户端发送了Origi：http://localhost:8089，服务器会返回Access-Control-Allow-Origin：http://localhost:8089，服务器验证http://localhost:8089这个域名是否允许跨域，如果允许就将“http://localhost:8089”这个值存储到CorsResult的AllowedHeaders中，在请求(第一次请求)返回的时候将这些加到HTTP请求头中。&lt;/li&gt;
&lt;li&gt;CorsMiddleware：Cors中间件类，主要方法就是Invoke，每次HTTP请求都会调用这个方法。&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;cnblogs_code&quot; readability=&quot;48&quot;&gt;
&lt;pre&gt;
&lt;span&gt;　　　　　public&lt;/span&gt; &lt;span&gt;async&lt;/span&gt;&lt;span&gt; Task Invoke(HttpContext context)
        {&lt;span&gt;//判断HTTP请求头是否有Origin，由此判断是不是跨域请求
            &lt;/span&gt;&lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (context.Request.Headers.ContainsKey(CorsConstants.Origin))
            {
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; corsPolicy = _policy ?? &lt;span&gt;await&lt;/span&gt; _corsPolicyProvider?&lt;span&gt;.GetPolicyAsync(context, _corsPolicyName);
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (corsPolicy != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
                {
                    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; accessControlRequestMethod =&lt;span&gt; context.Request.Headers[CorsConstants.AccessControlRequestMethod];&lt;br/&gt;　　　　　　　　　　　　&lt;span&gt;//如果是跨域请求 判断是不是第一次Options请求
                    &lt;/span&gt;&lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (&lt;span&gt;string&lt;/span&gt;&lt;span&gt;.Equals(context.Request.Method,CorsConstants.PreflightHttpMethod,StringComparison.OrdinalIgnoreCase) 
                        &lt;/span&gt;&amp;amp;&amp;amp;!&lt;span&gt;StringValues.IsNullOrEmpty(accessControlRequestMethod))
                    {   &lt;br/&gt;　　　　　　　　　　　　　　&lt;span&gt;//判断是否允许当前请求跨域，根据HttpContext的内容和Cors配置 得到CorsResult,然后将CorsResult的内容添加到请求头中(看下面详细解释)&lt;/span&gt;
                        ApplyCorsHeaders(context, corsPolicy);&lt;/span&gt;
                        context.Response.StatusCode =&lt;span&gt; StatusCodes.Status204NoContent;
                        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
                    }
                    &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;
                    {&lt;span&gt;// 执行第二次非Options请求&lt;/span&gt;
                        context.Response.OnStarting(state &lt;/span&gt;=&amp;gt;&lt;span&gt;
                        {
                            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; (httpContext, policy) = (Tuple&amp;lt;HttpContext, CorsPolicy&amp;gt;&lt;span&gt;)state;
                            &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt;
                            {
                                ApplyCorsHeaders(httpContext, policy);
                            }
                            &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception exception)
                            {
                                _logger.FailedToSetCorsHeaders(exception);
                            }
                            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; Task.CompletedTask;
                        }, Tuple.Create(context, corsPolicy));
                    }
                }
            }
            &lt;/span&gt;&lt;span&gt;await&lt;/span&gt;&lt;span&gt; _next(context);
        }
　　　　
        &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; ApplyCorsHeaders(HttpContext context, CorsPolicy corsPolicy)
        {　　&lt;span&gt;//通过HTTP上下文请求的数据和Cors配置 得到CorsResult&lt;br/&gt;　　　　　　　　如在第一次Options请求时，客户端发送了Origi：http://localhost:8089，Access-Control-Resquest-Methods:GET&lt;br/&gt;　　　　　　　　服务器会返回Access-Control-Allow-Origin：http://localhost:8089，Access-Control-Allow-Methods:GET&lt;br/&gt;　　　　　　　　服务器验证http://localhost:8089这个域名以GET请求方式是否允许跨域，&lt;br/&gt;　　　　　　　　如果允许就将“http://localhost:8089”这个值存储到CorsResult的AllowedHeaders中&lt;br/&gt;　　　　　　　　将&quot;GET&quot;存储到CorsResult的AllowedMethods中
            &lt;/span&gt;&lt;/span&gt;&lt;span&gt;var&lt;/span&gt; corsResult =&lt;span&gt; _corsService.EvaluatePolicy(context, corsPolicy);&lt;br/&gt;　　　　　　　　&lt;span&gt;//将CorsResult中的值添加到相应头中的，返回到客户端&lt;/span&gt;
            _corsService.ApplyResult(corsResult, context.Response);
        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 相对来说Cors源码还是比较简单的，很容易看懂。可以自己写一个项目，然后挂上源码单步调试。&lt;/p&gt;
</description>
<pubDate>Fri, 13 Jul 2018 06:27:00 +0000</pubDate>
<dc:creator>MicroHeart！</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/MicroHeart/p/9298759.html</dc:identifier>
</item>
</channel>
</rss>