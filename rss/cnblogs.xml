<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>react的基本使用，及常用填坑 - puppeteers</title>
<link>http://www.cnblogs.com/sdorm/p/8694013.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/sdorm/p/8694013.html</guid>
<description>&lt;div readability=&quot;7&quot;&gt;源码地址：
&lt;pre&gt;
https://github.com/whisper540/react-demo.git&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;import React, { Component } from 'react';&lt;/p&gt;
&lt;p&gt;import PropTypes from 'prop-types';&lt;/p&gt;
&lt;p&gt;import './First.css';&lt;/p&gt;
&lt;p&gt;import $ from 'jquery';&lt;/p&gt;

&lt;p&gt;class First extends Component {&lt;/p&gt;
&lt;p&gt;constructor(props) {&lt;/p&gt;
&lt;p&gt;super(props);&lt;/p&gt;
&lt;p&gt;// create a ref to store the textInput DOM element&lt;/p&gt;
&lt;p&gt;//每个事件必须绑定后才可以使用&lt;/p&gt;
&lt;p&gt;this.myTextInput = React.createRef();&lt;/p&gt;
&lt;p&gt;// this.focusFunc = this.focusFunc.bind(this);&lt;/p&gt;
&lt;p&gt;// this.getInput = this.getInput.bind(this);&lt;/p&gt;
&lt;p&gt;//定义初始状态&lt;/p&gt;
&lt;p&gt;this.state = {&lt;/p&gt;
&lt;p&gt;message: false,&lt;/p&gt;
&lt;p&gt;inputValue: &quot;inputValue...&quot;,&lt;/p&gt;
&lt;p&gt;divStyle: {&lt;/p&gt;
&lt;p&gt;color: 'red',&lt;/p&gt;
&lt;p&gt;backgroundColor: 'green'&lt;/p&gt;
&lt;p&gt;},&lt;/p&gt;
&lt;p&gt;opacity:0.2,&lt;/p&gt;
&lt;p&gt;//fetch&lt;/p&gt;
&lt;p&gt;usernameF: '',&lt;/p&gt;
&lt;p&gt;lastUrlF: '',&lt;/p&gt;
&lt;p&gt;//ajax数据&lt;/p&gt;
&lt;p&gt;username: '',&lt;/p&gt;
&lt;p&gt;lastUrl: ''&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;render() {&lt;/p&gt;
&lt;p&gt;let hellotext = this.state.message ? 'like' : 'have\'t liked';&lt;/p&gt;
&lt;p&gt;return (&lt;/p&gt;
&lt;p&gt;&amp;lt;div&amp;gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;h1&amp;gt; {this.props.title} &amp;lt;/h1&amp;gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;hr /&amp;gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;input type=&quot;text&quot; ref=&quot;myTextInput&quot; /&amp;gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;input type=&quot;button&quot; value=&quot;Focus the textinput!&quot; onClick={this.focusFunc.bind(this)}/&amp;gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;p&amp;gt;{ hellotext }&amp;lt;/p&amp;gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;hr /&amp;gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;input type=&quot;button&quot; onClick={this.getInput.bind(this)} value=&quot;互动&quot; /&amp;gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;p&amp;gt;{ this.state.inputValue }&amp;lt;/p&amp;gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;hr /&amp;gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;div style={this.state.divStyle}&amp;gt;this is div!&amp;lt;/div&amp;gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;div style={{opacity: this.state.opacity}}&amp;gt;this is div2!&amp;lt;/div&amp;gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;hr/&amp;gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;div&amp;gt;&lt;/p&gt;
&lt;p&gt;{this.state.usernameF},&lt;/p&gt;
&lt;p&gt;{this.state.lastUrlF}&lt;/p&gt;
&lt;p&gt;&amp;lt;/div&amp;gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;hr /&amp;gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;div&amp;gt;&lt;/p&gt;
&lt;p&gt;{this.state.username},&lt;/p&gt;
&lt;p&gt;{this.state.lastUrl}&lt;/p&gt;
&lt;p&gt;&amp;lt;/div&amp;gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;/div&amp;gt;&lt;/p&gt;
&lt;p&gt;);&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;focusFunc() {&lt;/p&gt;
&lt;p&gt;this.refs.myTextInput.focus();//获取真实的DOM节点需要使用refs.name&lt;/p&gt;
&lt;p&gt;//重新修改状态值,每次修改以后，自动调用 this.render 方法，再次渲染组件。&lt;/p&gt;
&lt;p&gt;this.setState({&lt;/p&gt;
&lt;p&gt;message: !this.state.message&lt;/p&gt;
&lt;p&gt;});&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;getInput(event) {&lt;/p&gt;
&lt;p&gt;// alert();&lt;/p&gt;
&lt;p&gt;this.setState({&lt;/p&gt;
&lt;p&gt;inputValue: event.target.value&lt;/p&gt;
&lt;p&gt;});&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;//生命周期&lt;/p&gt;
&lt;p&gt;// Mounting：已插入真实 DOM&lt;/p&gt;
&lt;p&gt;// Updating：正在被重新渲染&lt;/p&gt;
&lt;p&gt;// Unmounting：已移出真实 DOM&lt;/p&gt;
&lt;p&gt;componentWillMount() {&lt;/p&gt;
&lt;p&gt;console.log('componentWillMount');&lt;/p&gt;
&lt;p&gt;fetch(this.props.source)&lt;/p&gt;
&lt;p&gt;.then(res =&amp;gt; res.json())&lt;/p&gt;
&lt;p&gt;.then(&lt;/p&gt;
&lt;p&gt;(result) =&amp;gt; {&lt;/p&gt;
&lt;p&gt;var lastGist = result[1];&lt;/p&gt;
&lt;p&gt;this.setState({&lt;/p&gt;
&lt;p&gt;usernameF: lastGist.owner.login,&lt;/p&gt;
&lt;p&gt;lastUrlF: lastGist.html_url&lt;/p&gt;
&lt;p&gt;});&lt;/p&gt;
&lt;p&gt;},&lt;/p&gt;
&lt;p&gt;// Note: it's important to handle errors here&lt;/p&gt;
&lt;p&gt;// instead of a catch() block so that we don't swallow&lt;/p&gt;
&lt;p&gt;// exceptions from actual bugs in components.&lt;/p&gt;
&lt;p&gt;(error) =&amp;gt; {&lt;/p&gt;
&lt;p&gt;this.setState({&lt;/p&gt;
&lt;p&gt;// isLoaded: true,&lt;/p&gt;
&lt;p&gt;// error&lt;/p&gt;
&lt;p&gt;});&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;)&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;componentDidMount() {&lt;/p&gt;
&lt;p&gt;let self = this;&lt;/p&gt;
&lt;p&gt;console.log('componentDidMount');&lt;/p&gt;
&lt;p&gt;$.get(this.props.source,function(res){&lt;/p&gt;
&lt;p&gt;var lastGist = res[0];&lt;/p&gt;
&lt;p&gt;self.setState({&lt;/p&gt;
&lt;p&gt;username: lastGist.owner.login,&lt;/p&gt;
&lt;p&gt;lastUrl: lastGist.html_url&lt;/p&gt;
&lt;p&gt;});&lt;/p&gt;
&lt;p&gt;});&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;componentWillUpdate(prevProps, prevState, snapshot) {&lt;/p&gt;
&lt;p&gt;// If we have a snapshot value, we've just added new items.&lt;/p&gt;
&lt;p&gt;// Adjust scroll so these new items don't push the old ones out of view.&lt;/p&gt;
&lt;p&gt;if (snapshot !== null) {&lt;/p&gt;
&lt;p&gt;console.log('componentWillUpdate');&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;componentDidUpdate(prevProps, prevState, snapshot) {&lt;/p&gt;
&lt;p&gt;// If we have a snapshot value, we've just added new items.&lt;/p&gt;
&lt;p&gt;// Adjust scroll so these new items don't push the old ones out of view.&lt;/p&gt;
&lt;p&gt;if (snapshot !== null) {&lt;/p&gt;
&lt;p&gt;console.log('componentDidUpdate');&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;componentWillUnmount() {&lt;/p&gt;
&lt;p&gt;console.log('componentWillUnmount');&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;//设置props的数据类型&lt;/p&gt;
&lt;p&gt;First.proTypes = {&lt;/p&gt;
&lt;p&gt;title: PropTypes.func,&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;//设置默认props的title值&lt;/p&gt;
&lt;p&gt;First.defaultProps = {&lt;/p&gt;
&lt;p&gt;title: 'First'&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;export default First;&lt;/p&gt;
</description>
<pubDate>Mon, 02 Apr 2018 07:42:00 +0000</pubDate>
<dc:creator>puppeteers</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/sdorm/p/8694013.html</dc:identifier>
</item>
<item>
<title>java虚拟机的内存分配与回收机制 - 真的是从入门开始</title>
<link>http://www.cnblogs.com/GoForMyDream/p/8693605.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/GoForMyDream/p/8693605.html</guid>
<description>&lt;p&gt;　&lt;span&gt;　&lt;span&gt;分为4个方面来介绍内存分配与回收，分别是&lt;span&gt;内存是如何分配的&lt;/span&gt;、&lt;span&gt;哪些内存需要回收&lt;/span&gt;、&lt;span&gt;在什么情况下执行回收&lt;/span&gt;、&lt;span&gt;如何监控和优化GC机制&lt;/span&gt;。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　java GC（Garbage Collction）垃圾回收机制，是java与C/C++的主要区别之一。通过对jvm中内存进行标记，自主回收一些无用的内存。目前使用的最多的是sun公司jdk中的HotSpot，所以本文也以该jvm作为介绍的根本。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;strong&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;&lt;strong&gt;.Java内&lt;/strong&gt;存区域&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;span&gt;在java运行时的数据取里，由jvm管理的内存区域分为多个部分：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1033862/201804/1033862-20180402113704241-307457285.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;span&gt;程序计数器(program counter register)&lt;/span&gt;：程序计数器是一个比较校的内存单元，用来表示当前程序运行哪里的一个指示器。由于每个线程都由自己的执行顺序，所以程序计数器是线程私有的，每个线程都要由一个自己的程序计数器来指示自己（线程）下一步要执行哪条指令。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　如果程序执行的是一个java方法，那么计数器记录的是&lt;span&gt;正在执行的虚拟机字节码指令地址&lt;/span&gt;；如果正在执行的是一个本地方法（native方法），那么计数器的值为Undefined。由于程序计数器记录的只是当前指令地址，所以不存在内存泄漏的情况，也是jvm内存区域中唯一一个没有OOME（out of memory error)定义的区域。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;span&gt;虚拟机栈(JVM stack)&lt;/span&gt;：当线程的每个方法在执行的时候都会创建一个栈帧（Stack Frame）用来存储方法中的局部变量、方法出口等，同时会将这个栈帧放入JVM栈中，方法调用完成时，这个栈帧出栈。每个线程都要一个自己的虚拟机栈来保存自己的方法调用时候的数据，因此虚拟机栈也是线程私有的。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　虚拟机栈中定义了两种异常，如果线程调用的栈深度大于虚拟机允许的最大深度，抛出StackOverFlowError，不过虚拟机基本上都允许动态扩展虚拟机栈的大小。这样的话线程可以一直申请栈，直到内存不足的时候，会抛出OOME（out of memory error）内存溢出。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;span&gt;本地方法栈(Native Method Stack）&lt;/span&gt;：本地方法栈与虚拟机栈类似，只是本地方法栈存放的栈帧是在native方法调用的时候产生的。有的虚拟机中会将本地方法栈和虚拟栈放在一起，因此本地方法栈也是线程私有的。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;span&gt;堆（Heap）&lt;/span&gt;：堆是java GC机制中最重要的区域。堆是为了放置“&lt;span&gt;对象的实例&lt;/span&gt;”，对象都是在堆区上分配内存的，堆在逻辑上连续，在物理上不一定连续。所有的线程共用一个堆，堆的大小是可扩展的，如果在执行GC之后，仍没有足够的内存可以分配且堆大小不可再扩展，将会抛出OOME。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;span&gt;方法区（Method Area）&lt;/span&gt;：又叫静态区，用于存储类的信息、常量池等，逻辑上是堆的一部分，是各个线程共享的区域，为了与堆区分，又叫非堆。在永久代还存在时，方法区被用作永久代。方法区可以选择是否开启垃圾回收。jvm内存不足时会抛出OOME。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;span&gt;&lt;em&gt;&lt;span&gt;直接内存（Direct Memory）&lt;/span&gt;：直接内存指的是非jvm管理的内存，是机器剩余的内存。用基于通道（Channel）和缓冲区(Buffer）的方式来进行内存分配，用存储在JVM中的DirectByteBuffer来引用，当机器本身内存不足时，也会抛出OOME。&lt;/em&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;span&gt;举例说明：Object obj = new Object();&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;　　obj表示一个本地引用，存储在jvm栈的本地变量表中&lt;/span&gt;，new Object()作为一个对象放在堆中，Object类的类型信息（接口，方法，对象类型等）放在堆中，而这些类型信息的地址放在方法区中。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　这里需要知道如何通过引用访问到具体对象，也就是通过obj引用如何找到new出来的这个Object()对象，主要有两种方法，&lt;span&gt;通过句柄&lt;/span&gt;和&lt;span&gt;通过直接指针&lt;/span&gt;访问。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;span&gt;通过句柄&lt;/span&gt;：&lt;img src=&quot;https://images2018.cnblogs.com/blog/1033862/201804/1033862-20180402135011241-578311265.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　在java堆中会专门有一块区域被划分为句柄池，一个引用的背后是一个对象实例数据（java堆中）的指针和对象类型信息（方法区中）的指针，而这两个指针都是在java堆上的。这种方法是优势是较为稳定，但是速度不是很快。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;span&gt;通过直接指针&lt;/span&gt;：&lt;img src=&quot;https://images2018.cnblogs.com/blog/1033862/201804/1033862-20180402135226063-2076350359.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　一个引用背后是一个对象的实例数据，这个实例数据里面包含了“到对象类型信息的指针”。这种方式的优势是速度快，在HotSpot中用的就是这种方式。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;span&gt;&lt;strong&gt;2.内存是如何分配和回收的&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　&lt;/strong&gt;&lt;span&gt;内存分配主要是在堆上的分配，如前面new出来的对象，放在堆上，但是现代技术也支持在栈上分配，较为少见，本文不考虑。分配内存与回收内存的标准是八个字：分代分配，分代回收。那么这个代是什么呢？&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　jvm中将对象根据存活的时间划分为三代：年轻代（Young Generation）、年老代（Old Generation）和永久代（Permannent Generation）。在jdk1.8中已经不再使用永久代，因此这里不再介绍。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1033862/201804/1033862-20180402140816095-1436045760.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;　　&lt;span&gt;&lt;strong&gt;年轻代&lt;/strong&gt;&lt;/span&gt;：又叫新生代，所有新生成的对象都是先放在年轻代。年轻代分三个区，&lt;span&gt;一个Eden区，两个Survivor区，一个叫From，一个叫To（这个名字是动态变化的）&lt;/span&gt;。当Eden中满时，执行Minor GC将消亡的对象清理掉，仍存活的对象将被复制到Survivor中的From区，清空Eden。当这个From区满的时候，仍存活的对象将被复制到To区，清空From区，并且&lt;span&gt;原From区变为To区，原To区变为From区&lt;/span&gt;，这样的目的是保证To区一直为空。当From区满无对象可清理或者From-To区交换的次数超过设定（HotSpot默认为15，通过-XX：MaxTenuringThreashold控制）的时候，仍存活的对象进入老年代。年轻代中Eden和Servivor的比例通过-XX：SerivorRation参数来配置，默认为8，也就时说Eden：From：To=8：1：1。年轻代的回收方式叫做Minor GC，又叫停止-复制清理法。这种方法在回收的时候，需要暂停其他所有线程的执行，导致效率很低，现在虽然有优化，但是仅仅是将停止的时间变短，并没有彻底取消这个停止。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;strong&gt;&lt;span&gt;年老代&lt;/span&gt;&lt;/strong&gt;：年老代的空间较大，当年老代内存不足时，将执行&lt;span&gt;Major GC也叫Full GC&lt;/span&gt;。如果对象比较大，可能会直接分配到老年代上而不经过年轻代。用-XX：pertenureSizeThreashold来设定这个值，大于这个的对象会直接分配到老年代上。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;strong&gt;&lt;span&gt;3.垃圾收集器&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　在GC机制中，起作用的是垃圾收集器。HotSpot1.6中使用的垃圾收集器如下（有连线表示有联系）：&lt;/p&gt;
&lt;p&gt;　　&lt;img src=&quot;https://images2018.cnblogs.com/blog/1033862/201804/1033862-20180402144354918-1643044538.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;span&gt;Serial收集器：新生代（年轻代）收集器，使用&lt;span&gt;停止-复制&lt;/span&gt;算法，使用一个线程进行GC，其他工作线程暂停。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　ParNew收起：新生代收集器，使用&lt;span&gt;停止-复制&lt;/span&gt;算法，Serial收集器的多线程版，用多个线程进行GC，其他工作线程暂停，关注缩短垃圾收集时间。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　Parallel Scavenge收集器：新生代收集器，使用&lt;span&gt;停止-复制&lt;/span&gt;算法，关注CPU吞吐量，即运行用户代码的时间/总时间。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　Serial Old收集器：年老代收集器，单线程收集器，使用&lt;span&gt;标记-整理&lt;/span&gt;算法（整理的方法包括&lt;span&gt;sweep清理和compact压缩&lt;/span&gt;，标记-清理是先标记需要回收的对象，在标记完成后统一清楚标记的对象，这样清理之后空闲的内存是不连续的；标记-压缩是先标记需要回收的对象，把存活的对象都向一端移动，然后直接清理掉端边界以外的内存，这样清理之后空闲的内存是连续的）。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　Parallel Old收集器：老年代收集器，多线程收集器，使用&lt;span&gt;标记-整理&lt;/span&gt;算法（整理的方法包括&lt;span&gt;summary汇总和compact压缩&lt;/span&gt;，标记-压缩与Serial Old一样，标记-汇总是将幸存的对象复制到预先准备好的区域，再清理之前的对象）。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　CMS（Concurrent Mark Sweep）收集器：老年老代收集器，多线程收集器，关注最短回收时间停顿，使用&lt;span&gt;标记-清除&lt;/span&gt;算法，用户线程可以和GC线程同时工作。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; 　　G1收集器：JDK1.7中发布，使用较少，不作介绍。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;　　Java GC是一个非常复杂的机制，想要详细说清楚他需要很多时间，如有错误恳请指正。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Mon, 02 Apr 2018 07:11:00 +0000</pubDate>
<dc:creator>真的是从入门开始</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/GoForMyDream/p/8693605.html</dc:identifier>
</item>
<item>
<title>使用IDEA配置Maven + SpringMVC + Mybatis 【一步一步踩坑详细配置完成】 - 清酒醉红尘</title>
<link>http://www.cnblogs.com/yangdaxian/p/8676218.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/yangdaxian/p/8676218.html</guid>
<description>
&lt;p&gt;PS:初学，想使用Maven配置一个SpringMVC的开发环境，照着网上的各种图文解说，配置了好久都没成功，有些写的不够详细，有些只有写一半，走了不少弯弯绕绕，踩了不少的坑，此文将正确配置成功的步骤全部记录下来。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;1、环境&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;IDEA 2017.3&lt;/li&gt;
&lt;li&gt;Maven 使用了 IDEA自带Maven，亦可以不用自带的（没什么大区别），不用IDEA自带的可以先去下载maven安装并设置。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;　　   Maven 安装配置 &lt;a title=&quot;maven 安装配置&quot; href=&quot;http://www.cnblogs.com/yangdaxian/p/8676373.html&quot; target=&quot;_blank&quot;&gt;http://www.cnblogs.com/yangdaxian/p/8676373.html&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;JDK 1.8  　　　　JDK需要先下载安装配置好&lt;/li&gt;
&lt;li&gt;Spring &lt;/li&gt;
&lt;li&gt;Mybatis&lt;/li&gt;
&lt;li&gt;MySQL 5.1.41　　MySQL需要保证可用&lt;/li&gt;
&lt;li&gt;Tomcat 8&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;span&gt;2、SSM整合&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;新建数据库表&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;101&quot;&gt;
&lt;pre&gt;
&lt;span&gt;CREATE&lt;/span&gt; &lt;span&gt;TABLE&lt;/span&gt; `&lt;span&gt;user&lt;/span&gt;&lt;span&gt;` (
  `id` &lt;/span&gt;&lt;span&gt;varchar&lt;/span&gt;(&lt;span&gt;10&lt;/span&gt;) &lt;span&gt;NOT&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt;&lt;span&gt;,
  `name` &lt;/span&gt;&lt;span&gt;varchar&lt;/span&gt;(&lt;span&gt;20&lt;/span&gt;) &lt;span&gt;DEFAULT&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt;&lt;span&gt;,
  `sex` &lt;/span&gt;&lt;span&gt;varchar&lt;/span&gt;(&lt;span&gt;5&lt;/span&gt;) &lt;span&gt;DEFAULT&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt;&lt;span&gt;,
  `age` &lt;/span&gt;&lt;span&gt;varchar&lt;/span&gt;(&lt;span&gt;3&lt;/span&gt;) &lt;span&gt;DEFAULT&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt;&lt;span&gt;,
  `address` &lt;/span&gt;&lt;span&gt;varchar&lt;/span&gt;(&lt;span&gt;100&lt;/span&gt;) &lt;span&gt;DEFAULT&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt;&lt;span&gt;,
  `phone` &lt;/span&gt;&lt;span&gt;varchar&lt;/span&gt;(&lt;span&gt;20&lt;/span&gt;) &lt;span&gt;DEFAULT&lt;/span&gt; &lt;span&gt;NULL&lt;/span&gt;&lt;span&gt;,
  &lt;/span&gt;&lt;span&gt;PRIMARY&lt;/span&gt; &lt;span&gt;KEY&lt;/span&gt;&lt;span&gt; (`id`)
) ENGINE&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;InnoDB &lt;span&gt;DEFAULT&lt;/span&gt; CHARSET&lt;span&gt;=&lt;/span&gt;&lt;span&gt;utf8；

&lt;/span&gt;&lt;span&gt;INSERT&lt;/span&gt; &lt;span&gt;INTO&lt;/span&gt; mytest.`&lt;span&gt;user&lt;/span&gt;&lt;span&gt;`(id, name, sex, age, address, phone) &lt;/span&gt;&lt;span&gt;VALUES&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;张三&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;男&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;共住地球村&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;18888888881&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;INSERT&lt;/span&gt; &lt;span&gt;INTO&lt;/span&gt; mytest.`&lt;span&gt;user&lt;/span&gt;&lt;span&gt;`(id, name, sex, age, address, phone) &lt;/span&gt;&lt;span&gt;VALUES&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;李四&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;男&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;共住地球村&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;18888888882&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;INSERT&lt;/span&gt; &lt;span&gt;INTO&lt;/span&gt; mytest.`&lt;span&gt;user&lt;/span&gt;&lt;span&gt;`(id, name, sex, age, address, phone) &lt;/span&gt;&lt;span&gt;VALUES&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;洪五&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;女&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;共住地球村&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;18888888883&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;INSERT&lt;/span&gt; &lt;span&gt;INTO&lt;/span&gt; mytest.`&lt;span&gt;user&lt;/span&gt;&lt;span&gt;`(id, name, sex, age, address, phone) &lt;/span&gt;&lt;span&gt;VALUES&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;马六&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;女&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;共住地球村&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;18888888884&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;INSERT&lt;/span&gt; &lt;span&gt;INTO&lt;/span&gt; mytest.`&lt;span&gt;user&lt;/span&gt;&lt;span&gt;`(id, name, sex, age, address, phone) &lt;/span&gt;&lt;span&gt;VALUES&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;5&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;孙七&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;女&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;共住地球村&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;18888888885&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;INSERT&lt;/span&gt; &lt;span&gt;INTO&lt;/span&gt; mytest.`&lt;span&gt;user&lt;/span&gt;&lt;span&gt;`(id, name, sex, age, address, phone) &lt;/span&gt;&lt;span&gt;VALUES&lt;/span&gt;(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;6&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;赵八&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;男&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;38&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;共住地球村&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;18888888886&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;);
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1359295/201804/1359295-20180402143514166-1618052897.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;


&lt;p&gt;&lt;span&gt;新建maven项目&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;选择好自己的JDK路径&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1359295/201803/1359295-20180330144618563-668954893.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;设置项目的group id， artifactid， version等信息&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1359295/201803/1359295-20180330144800492-1625476767.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;设置maven仓库路径，我这边偷懒直接使用了idea自带的&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1359295/201803/1359295-20180330153104449-138927242.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;项目名设置，然后Finish&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1359295/201803/1359295-20180330153157600-1663109706.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;等待后生成结构如下，右下角选择 Enable Auto-import 自动导入；&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1359295/201803/1359295-20180330153459078-1538622593.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;如果没有自动导入这个选项，pom.xml配置完成后可以在右侧边缘找到 Maven Projects 打开后点击第一个类似刷新的按钮进行下载&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1359295/201803/1359295-20180330154256435-599221832.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;新建结构目录如下（若想要包分层结构显示在,上面齿轮那的第二行菜单，【Hide Empty Middle Packages】，将以选中的勾去掉就行）&lt;/li&gt;
&lt;li&gt;新建的 java 文件 需要对它转一下， java文件夹上 右击 --&amp;gt; Make Diretorys as --&amp;gt; Sources Root (蓝色) /Test Sources Root (绿色) &lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1359295/201803/1359295-20180330160602711-161869239.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;【pom.xml 配置】&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;在&amp;lt;build&amp;gt;中添加如下信息&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;　　　　&amp;lt;!--plugins添加逆向工程插件&lt;span&gt;--&amp;gt;&lt;/span&gt;&lt;br/&gt;　　　　&amp;lt;&lt;span&gt;plugins&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;br/&gt;&lt;/span&gt;　　　　...  默认信息&lt;br/&gt;　　　　&amp;lt;!--&lt;/span&gt;&lt;span&gt;mybatis逆向工程插件&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;plugin&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.mybatis.generator&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;mybatis-generator-maven-plugin&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;1.3.2&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;plugin&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;plugin&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.apache.maven.plugins&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;maven-compiler-plugin&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;configuration&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
          &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 设置JDK版本 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
          &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;source&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;1.8&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;source&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
          &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;target&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;1.8&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;target&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;configuration&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;plugin&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;plugins&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;finalName&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;springmvc&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;finalName&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;若不配置，可能会发送打包不全&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;resources&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;resource&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;需要打包的目录&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;directory&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;src/main/java&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;directory&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;目录中的文件类型&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;includes&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
          &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;include&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;**/*.xml&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;include&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
          &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;include&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;**/*.properties&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;include&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;includes&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;resource&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;resource&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;需要打包的目录&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;directory&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;src/main/resources&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;directory&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;目录中的文件类型&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;includes&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
          &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;include&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;**/*.xml&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;include&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
          &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;include&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;**/*.properties&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;include&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;includes&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;resource&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;resources&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;在 &amp;lt;dependencies&amp;gt;之前设置变量参数&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
  &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 设置变量参数 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;properties&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 设置项目编码编码 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;project.build.sourceEncoding&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;UTF-8&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;project.build.sourceEncoding&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;project.reporting.outputEncoding&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;UTF-8&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;project.reporting.outputEncoding&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; spring版本号 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;spring.version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;4.3.5.RELEASE&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;spring.version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; mybatis版本号 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;mybatis.version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;3.4.1&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;mybatis.version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;log4j 版本号&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;log4j.version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;1.2.17&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;log4j.version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;properties&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;在 &amp;lt;dependencies&amp;gt;内添加需要的依赖包&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; java ee &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;javax&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;javaee-api&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;7.0&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 单元测试 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;junit&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;junit&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;4.12&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 实现slf4j接口并整合 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;ch.qos.logback&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;logback-classic&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;1.2.2&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; JSON &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;com.fasterxml.jackson.core&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;jackson-databind&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;2.8.7&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;


    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 数据库 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;mysql&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;mysql-connector-java&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;5.1.41&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;scope&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;runtime&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;scope&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 数据库连接池 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;com.mchange&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;c3p0&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;0.9.5.2&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; MyBatis &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.mybatis&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;mybatis&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;${mybatis.version}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; mybatis/spring整合包 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.mybatis&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;mybatis-spring&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;1.3.1&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;添加Hibernate Validator依赖,不加此项会报错，但不影响项目运行&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.hibernate&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;hibernate-validator&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;5.2.4.Final&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; Spring 依赖&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-core&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;${spring.version}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-beans&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;${spring.version}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-context&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;${spring.version}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-jdbc&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;${spring.version}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-tx&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;${spring.version}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-web&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;${spring.version}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-webmvc&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;${spring.version}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-test&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;${spring.version}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; log4j日志 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;log4j&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;log4j&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;${log4j.version}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependencies&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;【pom.xml 配置】 最终配置&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt; &lt;span&gt;&amp;lt;?&lt;/span&gt;&lt;span&gt;xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;?&amp;gt;&lt;/span&gt;
&lt;span&gt;  2&lt;/span&gt; &lt;span&gt;&amp;lt;!--&lt;/span&gt;
&lt;span&gt;  3&lt;/span&gt; &lt;span&gt;  Licensed to the Apache Software Foundation (ASF) under one
&lt;/span&gt;&lt;span&gt;  4&lt;/span&gt; &lt;span&gt;  or more contributor license agreements.  See the NOTICE file
&lt;/span&gt;&lt;span&gt;  5&lt;/span&gt; &lt;span&gt;  distributed with this work for additional information
&lt;/span&gt;&lt;span&gt;  6&lt;/span&gt; &lt;span&gt;  regarding copyright ownership.  The ASF licenses this file
&lt;/span&gt;&lt;span&gt;  7&lt;/span&gt; &lt;span&gt;  to you under the Apache License, Version 2.0 (the
&lt;/span&gt;&lt;span&gt;  8&lt;/span&gt; &lt;span&gt;  &quot;License&quot;); you may not use this file except in compliance
&lt;/span&gt;&lt;span&gt;  9&lt;/span&gt; &lt;span&gt;  with the License.  You may obtain a copy of the License at
&lt;/span&gt;&lt;span&gt; 10&lt;/span&gt; 
&lt;span&gt; 11&lt;/span&gt; &lt;span&gt;   http://www.apache.org/licenses/LICENSE-2.0
&lt;/span&gt;&lt;span&gt; 12&lt;/span&gt; 
&lt;span&gt; 13&lt;/span&gt; &lt;span&gt;  Unless required by applicable law or agreed to in writing,
&lt;/span&gt;&lt;span&gt; 14&lt;/span&gt; &lt;span&gt;  software distributed under the License is distributed on an
&lt;/span&gt;&lt;span&gt; 15&lt;/span&gt; &lt;span&gt;  &quot;AS IS&quot; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
&lt;/span&gt;&lt;span&gt; 16&lt;/span&gt; &lt;span&gt;  KIND, either express or implied.  See the License for the
&lt;/span&gt;&lt;span&gt; 17&lt;/span&gt; &lt;span&gt;  specific language governing permissions and limitations
&lt;/span&gt;&lt;span&gt; 18&lt;/span&gt; &lt;span&gt;  under the License.
&lt;/span&gt;&lt;span&gt; 19&lt;/span&gt; &lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 20&lt;/span&gt; &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; $Id: pom.xml 642118 2008-03-28 08:04:16Z reinhard $ &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 21&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;project &lt;/span&gt;&lt;span&gt;xmlns&lt;/span&gt;&lt;span&gt;=&quot;http://maven.apache.org/POM/4.0.0&quot;&lt;/span&gt;&lt;span&gt; xmlns:xsi&lt;/span&gt;&lt;span&gt;=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt;&lt;span&gt; xsi:schemaLocation&lt;/span&gt;&lt;span&gt;=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 22&lt;/span&gt; 
&lt;span&gt; 23&lt;/span&gt;   &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;modelVersion&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;4.0.0&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;modelVersion&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 24&lt;/span&gt;   &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;packaging&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;war&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;packaging&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 25&lt;/span&gt; 
&lt;span&gt; 26&lt;/span&gt;   &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;springmvc&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 27&lt;/span&gt;   &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;com.yq&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 28&lt;/span&gt;   &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;springmvc&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 29&lt;/span&gt;   &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;1.0-SNAPSHOT&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 30&lt;/span&gt; 
&lt;span&gt; 31&lt;/span&gt;   &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;build&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 32&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;plugins&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 33&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;plugin&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 34&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.mortbay.jetty&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 35&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;maven-jetty-plugin&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 36&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;6.1.7&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 37&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;configuration&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 38&lt;/span&gt;           &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;connectors&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 39&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;connector &lt;/span&gt;&lt;span&gt;implementation&lt;/span&gt;&lt;span&gt;=&quot;org.mortbay.jetty.nio.SelectChannelConnector&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 40&lt;/span&gt;               &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;port&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;8888&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;port&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 41&lt;/span&gt;               &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;maxIdleTime&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;30000&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;maxIdleTime&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 42&lt;/span&gt;             &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;connector&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 43&lt;/span&gt;           &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;connectors&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 44&lt;/span&gt;           &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;webAppSourceDirectory&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;${project.build.directory}/${pom.artifactId}-${pom.version}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;webAppSourceDirectory&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 45&lt;/span&gt;           &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;contextPath&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;/&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;contextPath&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 46&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;configuration&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 47&lt;/span&gt;       &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;plugin&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 48&lt;/span&gt; 
&lt;span&gt; 49&lt;/span&gt;       &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;mybatis逆向工程插件&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 50&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;plugin&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 51&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.mybatis.generator&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 52&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;mybatis-generator-maven-plugin&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 53&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;1.3.2&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 54&lt;/span&gt;       &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;plugin&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 55&lt;/span&gt; 
&lt;span&gt; 56&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;plugin&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 57&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.apache.maven.plugins&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 58&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;maven-compiler-plugin&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 59&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;configuration&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 60&lt;/span&gt;           &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 设置JDK版本 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 61&lt;/span&gt;           &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;source&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;1.8&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;source&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 62&lt;/span&gt;           &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;target&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;1.8&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;target&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 63&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;configuration&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 64&lt;/span&gt;       &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;plugin&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 65&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;plugins&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 66&lt;/span&gt; 
&lt;span&gt; 67&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;finalName&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;springmvc&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;finalName&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 68&lt;/span&gt; 
&lt;span&gt; 69&lt;/span&gt;     &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;若不配置，可能会发送打包不全&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 70&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;resources&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 71&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;resource&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 72&lt;/span&gt;         &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;需要打包的目录&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 73&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;directory&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;src/main/java&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;directory&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 74&lt;/span&gt;         &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;目录中的文件类型&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 75&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;includes&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 76&lt;/span&gt;           &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;include&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;**/*.xml&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;include&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 77&lt;/span&gt;           &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;include&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;**/*.properties&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;include&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 78&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;includes&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 79&lt;/span&gt;       &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;resource&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 80&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;resource&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 81&lt;/span&gt;         &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;需要打包的目录&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 82&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;directory&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;src/main/resources&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;directory&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 83&lt;/span&gt;         &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;目录中的文件类型&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 84&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;includes&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 85&lt;/span&gt;           &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;include&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;**/*.xml&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;include&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 86&lt;/span&gt;           &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;include&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;**/*.properties&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;include&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 87&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;includes&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 88&lt;/span&gt;       &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;resource&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 89&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;resources&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 90&lt;/span&gt;   &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;build&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 91&lt;/span&gt; 
&lt;span&gt; 92&lt;/span&gt;   &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 设置变量参数 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 93&lt;/span&gt;   &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;properties&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 94&lt;/span&gt;     &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 设置项目编码编码 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 95&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;project.build.sourceEncoding&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;UTF-8&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;project.build.sourceEncoding&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 96&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;project.reporting.outputEncoding&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;UTF-8&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;project.reporting.outputEncoding&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 97&lt;/span&gt;     &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; spring版本号 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 98&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;spring.version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;4.3.5.RELEASE&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;spring.version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 99&lt;/span&gt;     &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; mybatis版本号 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;100&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;mybatis.version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;3.4.1&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;mybatis.version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;101&lt;/span&gt;     &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;log4j 版本号&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;102&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;log4j.version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;1.2.17&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;log4j.version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;103&lt;/span&gt;   &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;properties&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;104&lt;/span&gt; 
&lt;span&gt;105&lt;/span&gt;   &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependencies&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;106&lt;/span&gt;     &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; java ee &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;107&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;108&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;javax&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;109&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;javaee-api&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;110&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;7.0&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;111&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;112&lt;/span&gt; 
&lt;span&gt;113&lt;/span&gt;     &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 单元测试 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;114&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;115&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;junit&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;116&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;junit&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;117&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;4.12&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;118&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;119&lt;/span&gt; 
&lt;span&gt;120&lt;/span&gt;     &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 实现slf4j接口并整合 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;121&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;122&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;ch.qos.logback&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;123&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;logback-classic&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;124&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;1.2.2&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;125&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;126&lt;/span&gt; 
&lt;span&gt;127&lt;/span&gt;     &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; JSON &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;128&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;129&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;com.fasterxml.jackson.core&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;130&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;jackson-databind&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;131&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;2.8.7&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;132&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;133&lt;/span&gt; 
&lt;span&gt;134&lt;/span&gt; 
&lt;span&gt;135&lt;/span&gt;     &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 数据库 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;136&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;137&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;mysql&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;138&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;mysql-connector-java&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;139&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;5.1.41&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;140&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;scope&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;runtime&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;scope&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;141&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;142&lt;/span&gt; 
&lt;span&gt;143&lt;/span&gt;     &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 数据库连接池 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;144&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;145&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;com.mchange&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;146&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;c3p0&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;147&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;0.9.5.2&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;148&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;149&lt;/span&gt; 
&lt;span&gt;150&lt;/span&gt;     &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; MyBatis &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;151&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;152&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.mybatis&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;153&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;mybatis&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;154&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;${mybatis.version}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;155&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;156&lt;/span&gt; 
&lt;span&gt;157&lt;/span&gt;     &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; mybatis/spring整合包 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;158&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;159&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.mybatis&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;160&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;mybatis-spring&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;161&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;1.3.1&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;162&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;163&lt;/span&gt; 
&lt;span&gt;164&lt;/span&gt;     &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;添加Hibernate Validator依赖,不加此项会报错，但不影响项目运行&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;165&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;166&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.hibernate&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;167&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;hibernate-validator&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;168&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;5.2.4.Final&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;169&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;170&lt;/span&gt; 
&lt;span&gt;171&lt;/span&gt;     &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; Spring 依赖&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;172&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;173&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;174&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-core&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;175&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;${spring.version}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;176&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;177&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;178&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;179&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-beans&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;180&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;${spring.version}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;181&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;182&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;183&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;184&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-context&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;185&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;${spring.version}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;186&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;187&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;188&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;189&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-jdbc&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;190&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;${spring.version}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;191&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;192&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;193&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;194&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-tx&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;195&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;${spring.version}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;196&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;197&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;198&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;199&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-web&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;200&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;${spring.version}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;201&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;202&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;203&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;204&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-webmvc&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;205&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;${spring.version}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;206&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;207&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;208&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;209&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;spring-test&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;210&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;${spring.version}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;211&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;212&lt;/span&gt; 
&lt;span&gt;213&lt;/span&gt;     &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; log4j日志 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;214&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;215&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;log4j&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;groupId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;216&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;log4j&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;artifactId&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;217&lt;/span&gt;       &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;${log4j.version}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;218&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependency&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;219&lt;/span&gt;   &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dependencies&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;220&lt;/span&gt; 
&lt;span&gt;221&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;project&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;配置 log4j.properties&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li readability=&quot;2.5&quot;&gt;在resources下新建，根据实际路径更改输出日志路径（D:/WorkSpace/idea_workSpase/springmvc/src/main/webapp/WEB-INF/log/log.txt）&lt;br/&gt;&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#日志输出级别
log4j.rootLogger=debug,stdout,D,E

#设置stdout的日志输出控制台
log4j.appender.stdout=org.apache.log4j.ConsoleAppender
#输出日志到控制台的方式，默认为System.out
log4j.appender.stdout.Target = System.out
#设置使用灵活布局
log4j.appender.stdout.layout=org.apache.log4j.PatternLayout
#灵活定义输出格式
log4j.appender.stdout.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss,SSS} -[%p]  method:[%c (%rms)] - %m%n

#每天产生一个日志文件
log4j.appender.D=org.apache.log4j.DailyRollingFileAppender
#设置的输出日志
log4j.appender.D.File=D:/WorkSpace/idea_workSpase/springmvc/src/main/webapp/WEB-INF/log/log.txt
#设置的日志最大限制
log4j.appender.D.MaxFileSize=6000KB
#最多只保存20个备份文件
log4j.appender.D.MaxBackupIndex=20
#输出INFO级别以上的日志
og4j.appender.D.Threshold=debug
log4j.appender.D.Append = true
log4j.appender.D.ImmediateFlush = true
#log4j.appender.D.DatePattern ='.'yyyy-MM-dd
#设置使用灵活布局
log4j.appender.D.layout=org.apache.log4j.PatternLayout
#灵活定义输出格式
log4j.appender.D.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss,SSS} -[%p]  method:[%l (%rms)] - %m%n

log4j.appender.E = org.apache.log4j.DailyRollingFileAppender
log4j.appender.E.File =D:/WorkSpace/idea_workSpase/springmvc/src/main/webapp/WEB-INF/log/error/error.txt
log4j.appender.E.Append = true
log4j.appender.E.Threshold = ERROR
#log4j.appender.E.DatePattern = '_'yyyyMMdd'.log'
log4j.appender.E.layout = org.apache.log4j.PatternLayout
log4j.appender.E.layout.ConversionPattern = %d{yyyy-MM-dd HH:mm:ss,SSS} -[%p]  method:[%l (%rms)] - %m%n&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span&gt;配置 jdbc.properties&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;在resources下新建；需要更改本地驱动路径与数据库连接信息&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;jdbc.driverLocation=C:\\Users\\yq\\.m2\\repository\\mysql\\mysql-connector-java\\5.1.41\\mysql-connector-java-5.1.41.jar
jdbc.driverClasss=com.mysql.jdbc.Driver
jdbc.url=jdbc:mysql://192.168.56.107:3306/mytest?useUnicode=true&lt;/span&gt;&lt;span&gt;&amp;amp;characterEncoding&lt;/span&gt;&lt;span&gt;=UTF-8
#声明使用username可能会与系统jvm冲突
jdbc.username=demo
jdbc.password=demo&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;驱动包路径查看方式：找到对应驱动后  右击 --&amp;gt; copy path&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1359295/201804/1359295-20180402101300165-316079491.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;配置generatorConfig.xml&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1359295/201804/1359295-20180402134122580-633692505.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;配置完成后的目录结构如下&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1359295/201804/1359295-20180402102437612-2066292411.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;测试逆向生成是否成功&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;配置完成后，可以测试逆向生成是否配置成功了~&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1359295/201804/1359295-20180402101733380-114049869.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;点击左上角绿色的 + ，设置好 Name(自定义) 与 Command line&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1359295/201804/1359295-20180402102226311-1781639895.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; 选中刚才设置的&lt;img src=&quot;https://images2018.cnblogs.com/blog/1359295/201804/1359295-20180402102549113-1960068171.png&quot; alt=&quot;&quot;/&gt;，点击执行，如果正确配置了能看到在 dao 与 model中均生成了如下文件，这个User表是在generatorConfig.xml中配置的；如果出现错误了，排查下配置文件&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1359295/201804/1359295-20180402102712849-1320967027.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1359295/201804/1359295-20180402102734250-1809345547.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;配置spring-mybatis&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;?&lt;/span&gt;&lt;span&gt;xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;?&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;beans &lt;/span&gt;&lt;span&gt;xmlns&lt;/span&gt;&lt;span&gt;=&quot;http://www.springframework.org/schema/beans&quot;&lt;/span&gt;&lt;span&gt;
       xmlns:xsi&lt;/span&gt;&lt;span&gt;=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt;&lt;span&gt;
       xmlns:context&lt;/span&gt;&lt;span&gt;=&quot;http://www.springframework.org/schema/context&quot;&lt;/span&gt;&lt;span&gt; xmlns:tx&lt;/span&gt;&lt;span&gt;=&quot;http://www.springframework.org/schema/tx&quot;&lt;/span&gt;&lt;span&gt;
       xsi:schemaLocation&lt;/span&gt;&lt;span&gt;=&quot;http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx.xsd&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 扫描service包下所有使用注解的类型 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;context:component-scan &lt;/span&gt;&lt;span&gt;base-package&lt;/span&gt;&lt;span&gt;=&quot;com.yq.service&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 配置数据库相关参数properties的属性：${url} &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;context:property-placeholder &lt;/span&gt;&lt;span&gt;location&lt;/span&gt;&lt;span&gt;=&quot;classpath*:jdbc.properties&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 数据库连接池 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;bean &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;dataSource&quot;&lt;/span&gt;&lt;span&gt; class&lt;/span&gt;&lt;span&gt;=&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;driverClass&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;${jdbc.driverClasss}&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;jdbcUrl&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;${jdbc.url}&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;user&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;${jdbc.username}&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;password&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;${jdbc.password}&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;bean&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 配置SqlSessionFactory对象 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;bean &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;sqlSessionFactory&quot;&lt;/span&gt;&lt;span&gt; class&lt;/span&gt;&lt;span&gt;=&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 注入数据库连接池 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;dataSource&quot;&lt;/span&gt;&lt;span&gt; ref&lt;/span&gt;&lt;span&gt;=&quot;dataSource&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 扫描model包 使用别名 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;mapperLocations&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;classpath:com/yq/dao/*.xml&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;bean&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 配置扫描Dao接口包，动态实现Dao接口，注入到spring容器中 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;bean &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 给出需要扫描Dao接口包 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;basePackage&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;com.yq.dao&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 注入sqlSessionFactory &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;sqlSessionFactoryBeanName&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;sqlSessionFactory&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;property&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;bean&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 配置事务管理器 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;bean &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;transactionManager&quot;&lt;/span&gt;&lt;span&gt; class&lt;/span&gt;&lt;span&gt;=&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 注入数据库连接池 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;dataSource&quot;&lt;/span&gt;&lt;span&gt; ref&lt;/span&gt;&lt;span&gt;=&quot;dataSource&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;bean&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 配置基于注解的声明式事务 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;tx:annotation-driven &lt;/span&gt;&lt;span&gt;transaction-manager&lt;/span&gt;&lt;span&gt;=&quot;transactionManager&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;beans&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;配置spring-mvc&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;?&lt;/span&gt;&lt;span&gt;xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;?&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;beans &lt;/span&gt;&lt;span&gt;xmlns&lt;/span&gt;&lt;span&gt;=&quot;http://www.springframework.org/schema/beans&quot;&lt;/span&gt;&lt;span&gt;
       xmlns:xsi&lt;/span&gt;&lt;span&gt;=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt;&lt;span&gt;
       xmlns:context&lt;/span&gt;&lt;span&gt;=&quot;http://www.springframework.org/schema/context&quot;&lt;/span&gt;&lt;span&gt;
       xmlns:mvc&lt;/span&gt;&lt;span&gt;=&quot;http://www.springframework.org/schema/mvc&quot;&lt;/span&gt;&lt;span&gt;
       xsi:schemaLocation&lt;/span&gt;&lt;span&gt;=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 扫描web相关的bean &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;context:component-scan &lt;/span&gt;&lt;span&gt;base-package&lt;/span&gt;&lt;span&gt;=&quot;com.yq.controller&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 开启SpringMVC注解模式 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;mvc:annotation-driven&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 静态资源默认servlet配置 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;mvc:default-servlet-handler&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;

    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 配置jsp 显示ViewResolver &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;bean &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;viewClass&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;org.springframework.web.servlet.view.JstlView&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;prefix&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;/WEB-INF/jsp/&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;suffix&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;.jsp&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;bean&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;beans&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;配置web.xml&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;?&lt;/span&gt;&lt;span&gt;xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;?&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;web-app &lt;/span&gt;&lt;span&gt;xmlns&lt;/span&gt;&lt;span&gt;=&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;&lt;/span&gt;&lt;span&gt;
         xmlns:xsi&lt;/span&gt;&lt;span&gt;=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt;&lt;span&gt;
         xsi:schemaLocation&lt;/span&gt;&lt;span&gt;=&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd&quot;&lt;/span&gt;&lt;span&gt;
         version&lt;/span&gt;&lt;span&gt;=&quot;3.1&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;display-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;springmvc&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;display-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;springmvc_0.0.1&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

  &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 编码过滤器 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;filter&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;filter-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;encodingFilter&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;filter-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;filter-class&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.web.filter.CharacterEncodingFilter&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;filter-class&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;init-param&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;param-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;encoding&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;param-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;param-value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;UTF-8&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;param-value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;init-param&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;filter&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;filter-mapping&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;filter-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;encodingFilter&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;filter-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;url-pattern&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;/*&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;url-pattern&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;filter-mapping&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

  &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; log4j 配置 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;context-param&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;param-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;log4jConfigLocation&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;param-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;param-value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;classpath:log4j.properties&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;param-value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;context-param&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;context-param&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;param-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;log4jRefreshInterval&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;param-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;param-value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;60000&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;param-value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;context-param&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

  &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 配置log4j 日志监听 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;listener&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;listener-class&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.web.util.Log4jConfigListener&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;listener-class&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;listener&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

  &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 配置DispatcherServlet &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;servlet&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;servlet-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;SpringMVC&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;servlet-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;servlet-class&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;org.springframework.web.servlet.DispatcherServlet&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;servlet-class&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 配置springMVC需要加载的配置文件&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;init-param&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;param-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;contextConfigLocation&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;param-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
      &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;param-value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;classpath:spring-*.xml&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;param-value&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;init-param&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;load-on-startup&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;1&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;load-on-startup&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;async-supported&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;true&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;async-supported&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;servlet&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;servlet-mapping&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;servlet-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;SpringMVC&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;servlet-name&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; 匹配所有请求&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;url-pattern&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;/&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;url-pattern&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;servlet-mapping&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

  &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;welcome-file-list&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;welcome-file&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;index.jsp&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;welcome-file&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
  &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;welcome-file-list&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;

&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;web-app&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;测试查询数据库是否成功&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;在test --&amp;gt; dao 目录下新建一个测试类，测试下现在能否读取到数据库内容&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1359295/201804/1359295-20180402111314761-523928044.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.yq.dao;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.yq.model.User;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.junit.Test;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.junit.runner.RunWith;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.beans.factory.annotation.Autowired;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.test.context.ContextConfiguration;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.test.context.junit4.SpringJUnit4ClassRunner;

@RunWith(SpringJUnit4ClassRunner.&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;)
@ContextConfiguration({&lt;/span&gt;&quot;classpath:spring-mybatis.xml&quot;&lt;span&gt;})
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; UserQueryTest {

    @Autowired
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; UserMapper userMapper;

    @Test
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; queryUserName() {
        String id &lt;/span&gt;= &quot;1&quot;&lt;span&gt;;
        User user &lt;/span&gt;=&lt;span&gt; userMapper.selectByPrimaryKey(id);
        System.out.println(user.getName());
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;webapp文件下创建index.jsp文件&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1359295/201804/1359295-20180402112344853-1277303821.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;%&lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;
  Created by IntelliJ IDEA.
  User: yq
  &lt;/span&gt;&lt;span&gt;Date&lt;/span&gt;&lt;span&gt;: &lt;/span&gt;&lt;span&gt;2018&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;
  &lt;span&gt;Time&lt;/span&gt;&lt;span&gt;: &lt;/span&gt;&lt;span&gt;14&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;56&lt;/span&gt;
  &lt;span&gt;To&lt;/span&gt;&lt;span&gt; change this template use File | Settings | File Templates.
&lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;%&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;%&lt;/span&gt;&lt;span&gt;@ page contentType&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text/html;charset=UTF-8&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; language&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;java&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;%&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;测试标题&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;
Hello World！ 你的配置是正确哒！！！~~~
&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;配置Tomcat&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1359295/201804/1359295-20180402112445598-109452681.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1359295/201804/1359295-20180402112524272-1720908140.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/1359295/201804/1359295-20180402112610746-143950078.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1359295/201804/1359295-20180402112753172-951324953.png&quot; alt=&quot;&quot;/&gt;  &lt;img src=&quot;https://images2018.cnblogs.com/blog/1359295/201804/1359295-20180402112852220-994599254.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;配置完成 &lt;img src=&quot;https://images2018.cnblogs.com/blog/1359295/201804/1359295-20180402112926549-855485434.png&quot; alt=&quot;&quot;/&gt;，启动看看~~&lt;/p&gt;

&lt;p&gt;&lt;span&gt;从数据库取数据来展示&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;现在上面已经配置成功了，接下去就要试试从数据库取数据来展示了&lt;/li&gt;
&lt;li&gt; 创建UserService&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.yq.service;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.yq.dao.UserMapper;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.yq.model.User;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.beans.factory.annotation.Autowired;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.stereotype.Service;

@Service
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; UserService {
    @Autowired
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; UserMapper userMapper;

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; User getUserById(String id){
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; userMapper.selectByPrimaryKey(id);
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;创建UserController&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.yq.controller;

&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.yq.model.User;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.yq.service.UserService;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.beans.factory.annotation.Autowired;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.stereotype.Controller;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.web.bind.annotation.RequestMapping;
&lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.web.servlet.ModelAndView;

@Controller
@RequestMapping(&lt;/span&gt;&quot;/userInfo&quot;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; UserController {
    @Autowired
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; UserService userService;

    @RequestMapping(&lt;/span&gt;&quot;/getUser&quot;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; ModelAndView getUser(String id){
        ModelAndView modelAndView &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; ModelAndView();
        User user &lt;/span&gt;=&lt;span&gt; userService.getUserById(id);
        modelAndView.addObject(&lt;/span&gt;&quot;userInfo&quot;&lt;span&gt;,user);
        modelAndView.setViewName(&lt;/span&gt;&quot;userInfo/getUser&quot;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; modelAndView;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;创建jsp文件，我们在spring-mvc.xml中配置了目录&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1359295/201804/1359295-20180402135455251-979615902.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;因此我们要在 WEB-INF下新建个jsp文件夹&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1359295/201804/1359295-20180402141404470-1186367075.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;getUser.jsp&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;%&lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;
  Created by IntelliJ IDEA.
  User: yq
  &lt;/span&gt;&lt;span&gt;Date&lt;/span&gt;&lt;span&gt;: &lt;/span&gt;&lt;span&gt;2018&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;
  &lt;span&gt;Time&lt;/span&gt;&lt;span&gt;: &lt;/span&gt;&lt;span&gt;14&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;04&lt;/span&gt;
  &lt;span&gt;To&lt;/span&gt;&lt;span&gt; change this template use File | Settings | File Templates.
&lt;/span&gt;&lt;span&gt;--&lt;/span&gt;&lt;span&gt;%&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;%&lt;/span&gt;&lt;span&gt;@ page contentType&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;text/html;charset=UTF-8&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; language&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;java&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;%&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;测试getUser&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;编号： ${userInfo.id}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;姓名：${userInfo.name}&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;访问 http://localhost:8080/springmvc/userInfo/getUser?id=2 &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1359295/201804/1359295-20180402144202526-161827362.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;完成，没毛病；  配置期间如果由于环境问题会出现一些异常错误，一般拷贝错误度娘下都能解决掉，都不是什么大问题。共勉~&lt;/p&gt;
&lt;p&gt;项目下载地址：&lt;a href=&quot;https://download.csdn.net/download/yq_111111/10322545&quot; target=&quot;_blank&quot;&gt;https://download.csdn.net/download/yq_111111/10322545&lt;/a&gt;&lt;/p&gt;

</description>
<pubDate>Mon, 02 Apr 2018 06:57:00 +0000</pubDate>
<dc:creator>清酒醉红尘</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/yangdaxian/p/8676218.html</dc:identifier>
</item>
<item>
<title>『开源』设置系统 主音量（0~100 静音） VolumeHelper 兼容 Xp Win7 .Net 20 AnyCPU - InkFx</title>
<link>http://www.cnblogs.com/shuxiaolong/p/WinXp_Win7_VolumeHelper.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/shuxiaolong/p/WinXp_Win7_VolumeHelper.html</guid>
<description>&lt;p&gt;&lt;span&gt;&lt;strong&gt;背景：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;近来的生活一团乱麻，没心态写高大上的代码，于是就着手 写了几个 辅助类。&lt;/p&gt;
&lt;p&gt;在整理 InkFx.Utils 时，发现有几个 辅助类 只写了定义，没有实现函数体，于是就 花了1天时间 完善了一下。&lt;/p&gt;
&lt;p&gt;本文介绍的是 系统主音频 控制 的 辅助类  VolumeHelper&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;百度搜索：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&amp;gt; 在 百度 和 各种技术论坛，搜索相关代码 —— 部分代码千篇一律，兼容性不太理想。&lt;/p&gt;
&lt;p&gt;&amp;gt; 似乎没人 愿意整理出一个通用 辅助类 —— 于是这篇文章就 统一汇总、代码重构精简一下。&lt;/p&gt;


&lt;p&gt;&lt;strong&gt;&lt;span&gt;功能介绍：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&amp;gt; 实现 系统主音量 0~100 控制，实现 静音和静音恢复。&lt;/p&gt;
&lt;p&gt;&amp;gt; 支持 .Net 2.0 +   &lt;/p&gt;
&lt;p&gt;&amp;gt; 支持 AnyCPU&lt;/p&gt;
&lt;p&gt;&amp;gt; 支持 WinXp  Win7+&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;Demo预览：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/166267/201804/166267-20180402141625480-1901492236.gif&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/166267/201804/166267-20180402141636054-2019199821.gif&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;类结构图：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/166267/201804/166267-20180402141958316-636111795.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/166267/201804/166267-20180402142126750-731474981.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;Demo代码：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/166267/201804/166267-20180402142016009-2036293234.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;运行目录：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/166267/201804/166267-20180402142109658-148485474.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/166267/201804/166267-20180402142513204-1250088764.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;鉴于辅助类有 974 行代码，具体代码就不贴在 本文中了，有需要的同学 可以在文章最后 点击下载  VolumeHelper 全部源码。&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;a href=&quot;https://download.csdn.net/download/sxl514286339/10322477&quot; target=&quot;_blank&quot;&gt;VolumeHelper全部源码及Demo下载&lt;/a&gt;   &lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;em&gt;&lt;span&gt;（如果本辅助类对您有用，麻烦点击一下右下角的 “推荐”，谢谢。）&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;

</description>
<pubDate>Mon, 02 Apr 2018 06:41:00 +0000</pubDate>
<dc:creator>InkFx</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/shuxiaolong/p/WinXp_Win7_VolumeHelper.html</dc:identifier>
</item>
<item>
<title>享元模式 - 楚大校</title>
<link>http://www.cnblogs.com/zxx123/p/8693080.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/zxx123/p/8693080.html</guid>
<description>&lt;h3&gt;　Flyweight在拳击比赛中指最轻量级，即“蝇量级”或“雨量级”，这里选择使用“享元模式”的意译，是因为这样更能反映模式的用意，享元模式是对象的结构模式，享元模式以共享的方式高效地支持大量的细粒度对象；&lt;/h3&gt;
&lt;h3&gt;　　&lt;/h3&gt;
&lt;p&gt;　　举其中的一个例子就是我们的String对象，String类型就是使用了享元模式，String对象是final类型，对象一旦创建就不可改变，在java中字符串常量都是存在常量池中，java会确保一个字符串常量在常量池中只有一个拷贝，String a = &quot;abc&quot;，其中&quot;abc&quot;就是一个字符串常量；这样可以避免在创建N多相同对象时产生的不必要的大量的资源消耗；&lt;/p&gt;
&lt;p&gt;    享元模式的结构：采用一个共享来避免大量拥有相同内容对象的开销，这种开销最常见的就是内存的损耗，享元对象能做到共享的关键是区分内蕴状态和外蕴状态；&lt;/p&gt;
&lt;p&gt;    &lt;strong&gt;内蕴状态&lt;/strong&gt;是存储在享元对象内部的，不会随环境的改变 而有所不同，因此，具有内蕴状态的享元可以共享；&lt;/p&gt;
&lt;p&gt;    &lt;strong&gt;外蕴状态&lt;/strong&gt;是随环境的改变而改变的，不可以共享，享元对象的外蕴状态必须由客户端保存，并在享元被创建之后，在需要使用的时候再传入到享元对象内部。外蕴状态不可以影响享元对象的内蕴状态，他们是相互独立的；&lt;/p&gt;
&lt;p&gt;　　享元模式可以分为单纯享元模式和复合享元模式两种；&lt;/p&gt;
&lt;p&gt;单纯享元所涉及到的角色如下：&lt;/p&gt;
&lt;p&gt;    抽象享元角色：给出一个抽象接口，以规定所有具体享元角色需要实现的方法。&lt;/p&gt;
&lt;p&gt;    具体享元角色：实现抽象享元角色所规定的出的接口，如果有内蕴状态的话，必须负责为内蕴状态提供存储空间；&lt;/p&gt;
&lt;p&gt;    享元工厂角色：本角色负责创建和管理享元角色。本角色必须保证享元对象可以被系统适当地共享，当一个客户端对象调用一个享元对象的时候，享元工厂角色会检查系统中是否已经有一个符合要求的享元对象。如果已经有了，享元工厂角色就应当提供这个已有的享元对象，如果没有的适当地享元对象的话，享元工厂角色就应当创建一个合适的享元对象。&lt;/p&gt;
&lt;div readability=&quot;11&quot;&gt;
&lt;p&gt;     抽象享元角色：&lt;/p&gt;
&lt;div readability=&quot;17&quot;&gt; 
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
package flyWeight;

public interface Flyweight {

      public void operation(String state);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　这就是一个抽象角色，里面的方法，具体享元独享创建时应该有一个内蕴状态，在本例中一个Character类型的intrinsicState属性代表，它的值应当在享元对象被创建时赋予，所有的内蕴状态在对象创建之后，就不会再改变；&lt;/p&gt;
&lt;p&gt;    如果一个享元对象有外蕴状态的话，所有的外蕴状态都必须存储在客户端，在使用享元对象时，再由客户端传入享元的对象，这里只有一个外蕴状态，operation()方法的参数state就是由外部传入的内蕴状态；&lt;/p&gt;
&lt;div readability=&quot;26.5&quot;&gt;    具体享元对象；
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
package flyWeight;

public class ConcreteFlyweight implements Flyweight {
    private Character intrinsicState = null;
    /**
     * 构造函数，内蕴状态作为参数传入
     * @param state
     */
    public ConcreteFlyweight(Character state){
        this.intrinsicState = state;
    }
   
   
    /**
     * 外蕴状态作为参数传入方法中，改变方法的行为，
     * 但是并不改变对象的内蕴状态。
     */
    @Override
    public void operation(String state) {
        // TODO Auto-generated method stub
        System.out.println(&quot;Intrinsic State = &quot; + this.intrinsicState);
        System.out.println(&quot;Extrinsic State = &quot; + state);
    }

}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　享元工厂角色类，必须指出，客户端不可以直接将具体享元类实例化，而必须通过一个工厂对象，利用一个factory()方法得到享元对象，一般而言，享元工厂对象在整个系统只有一个，因此可以使用单例模式；&lt;/p&gt;
&lt;div readability=&quot;44.5&quot;&gt;当客户端需要单纯享元对象的时候，需要调用享元工厂的factory（）方法，并传入所需的单纯享元对象的内蕴状态，有工厂方法产生所需要的享元对象；　　
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;38&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
package flyWeight;

import java.util.HashMap;
import java.util.Map;

public class FlyweightFactory {
    private Map&amp;lt;Character,Flyweight&amp;gt; files = new HashMap&amp;lt;Character,Flyweight&amp;gt;();
    
    public Flyweight factory(Character state){
        //先从缓存中查找对象
        Flyweight fly = files.get(state);
        if(fly == null){
            //如果对象不存在则创建一个新的Flyweight对象
            fly = new ConcreteFlyweight(state);
            //把这个新的Flyweight对象添加到缓存中
            files.put(state, fly);
        }
        return fly;
    }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　客户端类；&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
public class Client {

public static void main(String[] args) {
// TODO Auto-generated method stub
FlyweightFactory factory = new FlyweightFactory();
Flyweight fly = factory.factory(new Character('a'));
fly.operation(&quot;First Call&quot;);

fly = factory.factory(new Character('b'));
fly.operation(&quot;Second Call&quot;);

fly = factory.factory(new Character('a'));
fly.operation(&quot;Third Call&quot;);
}

}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　虽然客户端申请了三个享元对象，但是实际创建的享元对象只有两个，这就是共享的含义；&lt;/p&gt;
&lt;h3&gt;复合享元模式；&lt;/h3&gt;
&lt;p&gt;将一些单纯享元使用合成模式加以复合，形成复合享元对象，这样的复合享元对象本身不能共享，但是他们可以分解成单纯享元对象，而后者则可以共享；&lt;/p&gt;
&lt;p&gt;    抽象享元角色：给出一个抽象接口，以规定出所有具体享元角色需要实现的方法；&lt;/p&gt;
&lt;p&gt;    具体享元角色：实现抽象享元角色所规定出的接口，如果有内蕴状态的话，必须负责为内蕴状态提供存储空间；&lt;/p&gt;
&lt;p&gt;    复合享元角色：复合享元角色所代表的对象是不可以共享的，但是一个复合享元对象可以分解成多个本身是单纯享元对象的组合，复合享元对象又称作不可共享的享元对象；&lt;/p&gt;
&lt;p&gt;    享元工厂角色：本角色负责创建和管理享元角色，本角色必须保证享元对象可以被系统适当地共享，当一个客户端对象调用一个享元对象的时候，享元工厂角色会检查系统中是否已经有一个符合要求的享元对象，如果有了，享元工厂角色就应当提供这个已有的享元对象，如果系统中没有一个适当的享元对象的话，享元工厂角色就应当创建一个合适的享元对象；&lt;/p&gt;
&lt;div readability=&quot;32.5&quot;&gt;    抽象享元角色类：
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
public interface Flyweight {
//一个示意性方法，参数state是外蕴状态
public void operation(String state);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　具体享元角色类&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
public class ConcreteFlyweight implements Flyweight {
private Character intrinsicState = null;
/**
* 构造函数，内蕴状态作为参数传入
* @param state
*/
public ConcreteFlyweight(Character state){
this.intrinsicState = state;
}


/**
* 外蕴状态作为参数传入方法中，改变方法的行为，
* 但是并不改变对象的内蕴状态。
*/
@Override
public void operation(String state) {
// TODO Auto-generated method stub
System.out.println(&quot;Intrinsic State = &quot; + this.intrinsicState);
System.out.println(&quot;Extrinsic State = &quot; + state);
}

}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;    复合享元对象是由单纯享元对象通过复合而成的，因此他提供了add()这样的聚集管理方法，由于一个复合享元对象具有不同的聚集元素，这些聚集元素在复合享元元素被创建之后加入，这本身就意味着复合享元对象的状态是会改变的，因此复合享元对象是不能共享的；&lt;/p&gt;
&lt;p&gt;    复合享元角色实现了抽象享元角色所规定的的接口，也就是operation()方法，这个方法有一个参数，代表着复合享元对象的外蕴状态，一个复合享元对象的所有单纯享元对象的外蕴状态都是与复合享元对象的外蕴状态相等的，而一个复合享元对象所含有的单纯享元对象的内蕴状态一般是不相等的，不然就没有使用价值了。&lt;/p&gt;
&lt;div readability=&quot;35.5&quot;&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;39&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
public class ConcreteCompositeFlyweight implements Flyweight {

private Map&amp;lt;Character,Flyweight&amp;gt; files = new HashMap&amp;lt;Character,Flyweight&amp;gt;();
/**
* 增加一个新的单纯享元对象到聚集中
*/
public void add(Character key , Flyweight fly){
files.put(key,fly);
}
/**
* 外蕴状态作为参数传入到方法中
*/
@Override
public void operation(String state) {
Flyweight fly = null;
for(Object o : files.keySet()){
fly = files.get(o);
fly.operation(state);
}

}

}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　享元工厂角色提供两种不同的方法，一种用于提供单纯享元对象，另一种用于提供复合享元对象。&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;39&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
public class FlyweightFactory {
private Map&amp;lt;Character,Flyweight&amp;gt; files = new HashMap&amp;lt;Character,Flyweight&amp;gt;();
/**
* 复合享元工厂方法
*/
public Flyweight factory(List&amp;lt;Character&amp;gt; compositeState){
ConcreteCompositeFlyweight compositeFly = new ConcreteCompositeFlyweight();

for(Character state : compositeState){
compositeFly.add(state,this.factory(state));
}

return compositeFly;
}
/**
* 单纯享元工厂方法
*/
public Flyweight factory(Character state){
//先从缓存中查找对象
Flyweight fly = files.get(state);
if(fly == null){
//如果对象不存在则创建一个新的Flyweight对象
fly = new ConcreteFlyweight(state);
//把这个新的Flyweight对象添加到缓存中 files.put(state, fly);
}
return fly;
}
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　客户端角色&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
public class Client {

public static void main(String[] args) {
List&amp;lt;Character&amp;gt; compositeState = new ArrayList&amp;lt;Character&amp;gt;();
compositeState.add('a');
compositeState.add('b');
compositeState.add('c');
compositeState.add('a');
compositeState.add('b');

FlyweightFactory flyFactory = new FlyweightFactory();
Flyweight compositeFly1 = flyFactory.factory(compositeState);
Flyweight compositeFly2 = flyFactory.factory(compositeState);
compositeFly1.operation(&quot;Composite Call&quot;);

System.out.println(&quot;---------------------------------&quot;);
System.out.println(&quot;复合享元模式是否可以共享对象：&quot; + (compositeFly1 == compositeFly2));

Character state = 'a';
Flyweight fly1 = flyFactory.factory(state);
Flyweight fly2 = flyFactory.factory(state);
System.out.println(&quot;单纯享元模式是否可以共享对象：&quot; + (fly1 == fly2));
}
}
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;从最后结果可以看出，复合享元对象是不能共享的，即使用相同的对象componsiteState通过工厂分别创建出的对象不是同一个对象；&lt;/p&gt;
&lt;p&gt;单纯享元对象是可以共享的，即使用相同的对象state通过工厂分别两次创建出的对象是同一个对象；&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;享元模式的优缺点：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;    优点在于大幅度地降低内存中对象的数量，但是代价也很高；&lt;/p&gt;
&lt;p&gt;    使得系统更复杂，为了使对象可以共享，需要将一些状态外部化，使得程序的逻辑复杂化；&lt;/p&gt;
&lt;p&gt;    享元模式将享元对象的状态外部化，而读取外部状态使得运行时间稍微变长；&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
<pubDate>Mon, 02 Apr 2018 06:35:00 +0000</pubDate>
<dc:creator>楚大校</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/zxx123/p/8693080.html</dc:identifier>
</item>
<item>
<title>Spring MVC之适配器的获取及执行(RequestMappingHandlerAdapter) - 郝二驴</title>
<link>http://www.cnblogs.com/haoerlv/p/8692988.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/haoerlv/p/8692988.html</guid>
<description>&lt;p&gt;首先看下doDispatch()方法如何找到适合的适配器来执行方法的：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;     &lt;span&gt;protected&lt;/span&gt;&lt;span&gt; HandlerAdapter getHandlerAdapter(Object handler) throws ServletException {
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;         Iterator i$ = &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.handlerAdapters.iterator();
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; 
&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;        HandlerAdapter ha;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;         &lt;span&gt;do&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;i$.hasNext()) {
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;                 &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; ServletException(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;No adapter for handler [&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; + handler + &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;]: The DispatcherServlet configuration needs to include a HandlerAdapter that supports this handler&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; 
&lt;span&gt;10&lt;/span&gt;             ha =&lt;span&gt; (HandlerAdapter)i$.next();
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.logger.isTraceEnabled()) {
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;                 &lt;span&gt;this&lt;/span&gt;.logger.trace(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Testing handler adapter [&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; + ha + &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;         } &lt;span&gt;while&lt;/span&gt;(!&lt;span&gt;ha.supports(handler)); //遍历初始化时候保存好的适配器，通过执行每个适配器的supports方法，如果支持就是他了。
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; 
&lt;span&gt;16&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; ha;
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;     }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注： 这块也有点责任链模式的意思...&lt;/p&gt;
&lt;p&gt;下面看下RequestMappingHandlerAdapter是怎么实现support方法的，看之前先上类图。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1206628/201804/1206628-20180402094107902-2104133074.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;实际上support方法是在AbstractHandlerMethodAdapter这个父类实现的，然后给自己留个钩子方法，让子类实现&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; final boolean supports(Object handler) { 
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; handler instanceof HandlerMethod &amp;amp;&amp;amp; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.supportsInternal((HandlerMethod)handler);
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; 
&lt;span&gt;5&lt;/span&gt;     &lt;span&gt;protected&lt;/span&gt; &lt;span&gt;abstract&lt;/span&gt; boolean supportsInternal(HandlerMethod var1); //钩子方法
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这里RequestMappingHandlerAdapter的supportInternal直接是返回的true，估计后续扩展其他子类可能会复杂些，这就是设计模式的好处。&lt;/p&gt;
&lt;p&gt;这样就找到了合适的适配器，下面来看执行：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;57&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;     &lt;span&gt;protected&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; doDispatch(HttpServletRequest request, HttpServletResponse response) throws Exception {
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;         HttpServletRequest processedRequest =&lt;span&gt; request;
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;         HandlerExecutionChain mappedHandler = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;         boolean multipartRequestParsed = &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;         WebAsyncManager asyncManager =&lt;span&gt; WebAsyncUtils.getAsyncManager(request);
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt;         &lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;             &lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;                 ModelAndView mv = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;                 Exception dispatchException = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; 
&lt;span&gt;12&lt;/span&gt;                 &lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;                     processedRequest = &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.checkMultipart(request);
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;                     multipartRequestParsed = processedRequest !=&lt;span&gt; request;
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;                     mappedHandler = &lt;span&gt;this&lt;/span&gt;.getHandler(processedRequest, &lt;span&gt;false&lt;/span&gt;&lt;span&gt;); //获取处理器
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;                     &lt;span&gt;if&lt;/span&gt; (mappedHandler == &lt;span&gt;null&lt;/span&gt; || mappedHandler.getHandler() == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;                         &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.noHandlerFound(processedRequest, response);
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;                         &lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;                    }
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; 
&lt;span&gt;21&lt;/span&gt;                     HandlerAdapter ha = &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.getHandlerAdapter(mappedHandler.getHandler()); //获取适配器
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;                     String method =&lt;span&gt; request.getMethod();
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;                     boolean isGet = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;GET&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;.equals(method);
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;                     &lt;span&gt;if&lt;/span&gt; (isGet || &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;HEAD&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;.equals(method)) {
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;                         &lt;span&gt;long&lt;/span&gt; lastModified =&lt;span&gt; ha.getLastModified(request, mappedHandler.getHandler());
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;                         &lt;span&gt;if&lt;/span&gt; (&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.logger.isDebugEnabled()) {
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;                             String requestUri =&lt;span&gt; urlPathHelper.getRequestUri(request);
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;                             &lt;span&gt;this&lt;/span&gt;.logger.debug(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Last-Modified value for [&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; + requestUri + &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;] is: &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; +&lt;span&gt; lastModified);
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; &lt;span&gt;                        }
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; 
&lt;span&gt;31&lt;/span&gt;                         &lt;span&gt;if&lt;/span&gt; ((&lt;span&gt;new&lt;/span&gt; ServletWebRequest(request, response)).checkNotModified(lastModified) &amp;amp;&amp;amp;&lt;span&gt; isGet) {
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;                             &lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; &lt;span&gt;                        }
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; &lt;span&gt;                    } //这一块是处理重复请求？？？ 有大神知道请留言....
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt; 
&lt;span&gt;36&lt;/span&gt;                     &lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;mappedHandler.applyPreHandle(processedRequest, response)) {
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt;                         &lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt; &lt;span&gt;                    } //执行拦截器的preHandle方法
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt; 
&lt;span&gt;40&lt;/span&gt;                     &lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt;                         mv =&lt;span&gt; ha.handle(processedRequest, response, mappedHandler.getHandler()); //执行真正的Controller方法，就是我们的方法
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt;                     } &lt;span&gt;finally&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt;                         &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (asyncManager.isConcurrentHandlingStarted()) {
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt;                             &lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt; &lt;span&gt;                        }
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt; 
&lt;span&gt;47&lt;/span&gt; &lt;span&gt;                    }
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt; 
&lt;span&gt;49&lt;/span&gt;                     &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.applyDefaultViewName(request, mv); //设置视图名称
&lt;/span&gt;&lt;span&gt;50&lt;/span&gt; &lt;span&gt;                    mappedHandler.applyPostHandle(processedRequest, response, mv); //执行拦截器的postHandle方法
&lt;/span&gt;&lt;span&gt;51&lt;/span&gt;                 } &lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception var28) {
&lt;/span&gt;&lt;span&gt;52&lt;/span&gt;                     dispatchException =&lt;span&gt; var28;
&lt;/span&gt;&lt;span&gt;53&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;54&lt;/span&gt; 
&lt;span&gt;55&lt;/span&gt;                 &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.processDispatchResult(processedRequest, response, mappedHandler, mv, dispatchException);//渲染视图
&lt;/span&gt;&lt;span&gt;56&lt;/span&gt;             } &lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception var29) {
&lt;/span&gt;&lt;span&gt;57&lt;/span&gt;                 &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.triggerAfterCompletion(processedRequest, response, mappedHandler, var29);
&lt;/span&gt;&lt;span&gt;58&lt;/span&gt;             } &lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Error var30) {
&lt;/span&gt;&lt;span&gt;59&lt;/span&gt;                 &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.triggerAfterCompletionWithError(processedRequest, response, mappedHandler, var30);
&lt;/span&gt;&lt;span&gt;60&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;61&lt;/span&gt; 
&lt;span&gt;62&lt;/span&gt;         } &lt;span&gt;finally&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;63&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (asyncManager.isConcurrentHandlingStarted()) {
&lt;/span&gt;&lt;span&gt;64&lt;/span&gt; &lt;span&gt;                mappedHandler.applyAfterConcurrentHandlingStarted(processedRequest, response); //执行拦截器的afterConcurrentHandlingStarted
&lt;/span&gt;&lt;span&gt;65&lt;/span&gt;                 &lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;66&lt;/span&gt;             } &lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;67&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (multipartRequestParsed) {
&lt;/span&gt;&lt;span&gt;68&lt;/span&gt;                     &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.cleanupMultipart(processedRequest);
&lt;/span&gt;&lt;span&gt;69&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;70&lt;/span&gt; 
&lt;span&gt;71&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;72&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;73&lt;/span&gt;     }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;拦截器这里就不在多说，这块就是返回false就不在往下执行。下面我们重点满ha.handle()方法，是如果映射参数，找到我们的方法，封装结果的。&lt;/p&gt;
&lt;p&gt;类图前面已经展示了，实际上handle是在父类AbstractHandlerMethodAdapter实现的&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; final ModelAndView handle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.handleInternal(request, response, (HandlerMethod)handler); //子类实现这个方法
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; 
&lt;span&gt;5&lt;/span&gt;     &lt;span&gt;protected&lt;/span&gt; &lt;span&gt;abstract&lt;/span&gt; ModelAndView handleInternal(HttpServletRequest var1, HttpServletResponse var2, HandlerMethod var3) throws Exception;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;46&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;     &lt;span&gt;protected&lt;/span&gt;&lt;span&gt; final ModelAndView handleInternal(HttpServletRequest request, HttpServletResponse response, HandlerMethod handlerMethod) throws Exception {
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.getSessionAttributesHandler(handlerMethod).hasSessionAttributes()) {
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;             &lt;span&gt;this&lt;/span&gt;.checkAndPrepare(request, response, &lt;span&gt;this&lt;/span&gt;.cacheSecondsForSessionAttributeHandlers, &lt;span&gt;true&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;         } &lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;             &lt;span&gt;this&lt;/span&gt;.checkAndPrepare(request, response, &lt;span&gt;true&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;        } //看代码应该是从session中获取一些信息，然后初始化header等信息，不知道准确不？请大家指正！
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;         //这块就是根据需要是否进行同步操作
&lt;span&gt; 8&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.synchronizeOnSession) {
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;             HttpSession session = request.getSession(&lt;span&gt;false&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (session != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;                 Object mutex =&lt;span&gt; WebUtils.getSessionMutex(session);
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;                synchronized(mutex) {
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;                     &lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.invokeHandleMethod(request, response, handlerMethod);
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;         //正式进入执行环节
&lt;span&gt;18&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.invokeHandleMethod(request, response, handlerMethod);
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;     }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;下面这个方法非常重要，将重点讲解：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;47&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt;&lt;span&gt; ModelAndView invokeHandleMethod(HttpServletRequest request, HttpServletResponse response, HandlerMethod handlerMethod) throws Exception {
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;         ServletWebRequest webRequest = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; ServletWebRequest(request, response);
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;         WebDataBinderFactory binderFactory = &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.getDataBinderFactory(handlerMethod); //创建@InitBinder注解的方法的工厂类，进行缓存
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;         ModelFactory modelFactory = &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.getModelFactory(handlerMethod, binderFactory);//创建@ModelAttribute@ControllerAdvice注解方法工厂并缓存
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;         ServletInvocableHandlerMethod requestMappingMethod = &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.createRequestMappingMethod(handlerMethod, binderFactory);
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;         ModelAndViewContainer mavContainer = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; ModelAndViewContainer(); //创建结果容器并初始化一些参数，
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;        mavContainer.addAllAttributes(RequestContextUtils.getInputFlashMap(request));
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;        modelFactory.initModel(webRequest, mavContainer, requestMappingMethod);//执行@ModelAttribute注解的方法，将结果放到结果容器中
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;         mavContainer.setIgnoreDefaultModelOnRedirect(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.ignoreDefaultModelOnRedirect);
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;         AsyncWebRequest asyncWebRequest =&lt;span&gt; WebAsyncUtils.createAsyncWebRequest(request, response); //下面异步这一块不太明白，等后续在慢慢分析
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;         asyncWebRequest.setTimeout(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.asyncRequestTimeout);
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;         WebAsyncManager asyncManager =&lt;span&gt; WebAsyncUtils.getAsyncManager(request);
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;         asyncManager.setTaskExecutor(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.taskExecutor);
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;        asyncManager.setAsyncWebRequest(asyncWebRequest);
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;         asyncManager.registerCallableInterceptors(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.callableInterceptors);
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;         asyncManager.registerDeferredResultInterceptors(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.deferredResultInterceptors);
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (asyncManager.hasConcurrentResult()) {
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;             Object result =&lt;span&gt; asyncManager.getConcurrentResult();
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;             mavContainer = (ModelAndViewContainer)asyncManager.getConcurrentResultContext()[&lt;span&gt;0&lt;/span&gt;&lt;span&gt;];
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;            asyncManager.clearConcurrentResult();
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.logger.isDebugEnabled()) {
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;                 &lt;span&gt;this&lt;/span&gt;.logger.debug(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Found concurrent result value [&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; + result + &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; 
&lt;span&gt;25&lt;/span&gt;             requestMappingMethod =&lt;span&gt; requestMappingMethod.wrapConcurrentResult(result);
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; 
&lt;span&gt;28&lt;/span&gt;         requestMappingMethod.invokeAndHandle(webRequest, mavContainer, &lt;span&gt;new&lt;/span&gt; Object[&lt;span&gt;0&lt;/span&gt;&lt;span&gt;]); //继续执行方法
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; asyncManager.isConcurrentHandlingStarted() ? &lt;span&gt;null&lt;/span&gt; : &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.getModelAndView(mavContainer, modelFactory, webRequest); //返回值了，两种情况
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;     }
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;44&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; final &lt;span&gt;void&lt;/span&gt;&lt;span&gt; invokeAndHandle(ServletWebRequest webRequest, ModelAndViewContainer mavContainer, Object... providedArgs) throws Exception {
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;         Object returnValue = &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.invokeForRequest(webRequest, mavContainer, providedArgs); //执行方法，获取返回值
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.setResponseStatus(webRequest);
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (returnValue == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (&lt;span&gt;this&lt;/span&gt;.isRequestNotModified(webRequest) || &lt;span&gt;this&lt;/span&gt;.hasResponseStatus() ||&lt;span&gt; mavContainer.isRequestHandled()) {
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;                 mavContainer.setRequestHandled(&lt;span&gt;true&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;                 &lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;         } &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (StringUtils.hasText(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.responseReason)) {
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;             mavContainer.setRequestHandled(&lt;span&gt;true&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; 
&lt;span&gt;14&lt;/span&gt;         mavContainer.setRequestHandled(&lt;span&gt;false&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; 
&lt;span&gt;16&lt;/span&gt;         &lt;span&gt;try&lt;/span&gt;&lt;span&gt; { //处理返回值 ，封装结果集
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;             &lt;span&gt;this&lt;/span&gt;.returnValueHandlers.handleReturnValue(returnValue, &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.getReturnValueType(returnValue), mavContainer, webRequest);
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;         } &lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception var6) {
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.logger.isTraceEnabled()) {
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;                 &lt;span&gt;this&lt;/span&gt;.logger.trace(&lt;span&gt;this&lt;/span&gt;.getReturnValueHandlingErrorMessage(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Error handling return value&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, returnValue), var6);
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; 
&lt;span&gt;23&lt;/span&gt;             &lt;span&gt;throw&lt;/span&gt;&lt;span&gt; var6;
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;     }
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; final Object invokeForRequest(NativeWebRequest request, ModelAndViewContainer mavContainer, Object... providedArgs) throws Exception {
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;         Object[] args = &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.getMethodArgumentValues(request, mavContainer, providedArgs); //处理 参数
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.logger.isTraceEnabled()) {
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;             StringBuilder builder = &lt;span&gt;new&lt;/span&gt; StringBuilder(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Invoking [&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;             builder.append(&lt;span&gt;this&lt;/span&gt;.getMethod().getName()).append(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;] method with arguments &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;            builder.append(Arrays.asList(args));
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;             &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.logger.trace(builder.toString());
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; 
&lt;span&gt;10&lt;/span&gt;         Object returnValue = &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.invoke(args); //反射执行方法
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.logger.isTraceEnabled()) {
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;             &lt;span&gt;this&lt;/span&gt;.logger.trace(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Method [&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; + &lt;span&gt;this&lt;/span&gt;.getMethod().getName() + &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;] returned [&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; + returnValue + &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; 
&lt;span&gt;15&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; returnValue;
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;     }
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;45&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt;&lt;span&gt; Object[] getMethodArgumentValues(NativeWebRequest request, ModelAndViewContainer mavContainer, Object... providedArgs) throws Exception {
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;         MethodParameter[] parameters = &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.getMethodParameters();
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;         Object[] args = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Object[parameters.length];
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; 
&lt;span&gt; 5&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt;(&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; parameters.length; ++&lt;span&gt;i) { //遍历方法的所有参数
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;             MethodParameter parameter =&lt;span&gt; parameters[i];
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;             parameter.initParameterNameDiscovery(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.parameterNameDiscoverer);
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;             GenericTypeResolver.resolveParameterType(parameter, &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.getBean().getClass()); //获取设置参数类型
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;             args[i] = &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.resolveProvidedArgument(parameter, providedArgs);
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (args[i] == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt; (&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.argumentResolvers.supportsParameter(parameter)) { //这块是遍历预置的参数解析器，就是前面说的责任链模式，**composite负责查找和执行
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;                     &lt;span&gt;try&lt;/span&gt;&lt;span&gt; { //由找到的参数解析器，来解析参数
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;                         args[i] = &lt;span&gt;this&lt;/span&gt;.argumentResolvers.resolveArgument(parameter, mavContainer, request, &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.dataBinderFactory);
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;                     } &lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception var9) {
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;                         &lt;span&gt;if&lt;/span&gt; (&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.logger.isTraceEnabled()) {
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;                             &lt;span&gt;this&lt;/span&gt;.logger.trace(&lt;span&gt;this&lt;/span&gt;.getArgumentResolutionErrorMessage(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Error resolving argument&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, i), var9);
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;                        }
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; 
&lt;span&gt;19&lt;/span&gt;                         &lt;span&gt;throw&lt;/span&gt;&lt;span&gt; var9;
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;                    }
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;                 } &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (args[i] == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;                     String msg = &lt;span&gt;this&lt;/span&gt;.getArgumentResolutionErrorMessage(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;No suitable resolver for argument&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, i);
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;                     &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; IllegalStateException(msg);
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; 
&lt;span&gt;28&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; args;
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;     }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这块以，没有任何注解，参数为javaBean的解析器为例：ModelAttributeMethodProcessor&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;47&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; boolean supportsParameter(MethodParameter parameter) {
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (parameter.hasParameterAnnotation(ModelAttribute.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;)) {
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;         } &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.annotationNotRequired) {
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; !&lt;span&gt;BeanUtils.isSimpleProperty(parameter.getParameterType());
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;         } &lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; 
&lt;span&gt;11&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; final Object resolveArgument(MethodParameter parameter, ModelAndViewContainer mavContainer, NativeWebRequest request, WebDataBinderFactory binderFactory) throws Exception {
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;         String name =&lt;span&gt; ModelFactory.getNameForParameter(parameter); //如果当前参数用@ModelAttribute修饰了，返回value值或者参数类型第一个字母小写
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;         // 获取需要绑定的表单对象，看参数容器包含name为key的对象不，有的话就用它，没有创建个新的。 &lt;br/&gt;　　　　　　Object attribute = mavContainer.containsAttribute(name) ? mavContainer.getModel().&lt;span&gt;get&lt;/span&gt;(name) : &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.createAttribute(name, parameter, binderFactory, request);
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;         WebDataBinder binder =&lt;span&gt; binderFactory.createBinder(request, attribute, name);
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (binder.getTarget() != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;             &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.bindRequestParameters(binder, request);
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;             &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.validateIfApplicable(binder, parameter);
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (binder.getBindingResult().hasErrors() &amp;amp;&amp;amp; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.isBindExceptionRequired(binder, parameter)) {
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;                 &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; BindException(binder.getBindingResult());
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; 　　　　 //以上就是参数绑定， 这块领开一篇文章详细说
&lt;span&gt;23&lt;/span&gt;         Map&amp;lt;String, Object&amp;gt; bindingResultModel =&lt;span&gt; binder.getBindingResult().getModel();
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; &lt;span&gt;        mavContainer.removeAttributes(bindingResultModel);
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; &lt;span&gt;        mavContainer.addAllAttributes(bindingResultModel);
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; binder.getTarget();
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;     }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;参数就这样遍历处理，然后就开始通过反射 invoke执行了。接下来我们看是怎么封装换回结果的&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt;         &lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;             &lt;span&gt;this&lt;/span&gt;.returnValueHandlers.handleReturnValue(returnValue, &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.getReturnValueType(returnValue), mavContainer, webRequest);
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;         } &lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception var6) {
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.logger.isTraceEnabled()) {
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt;                 &lt;span&gt;this&lt;/span&gt;.logger.trace(&lt;span&gt;this&lt;/span&gt;.getReturnValueHandlingErrorMessage(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Error handling return value&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, returnValue), var6);
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;7&lt;/span&gt; 
&lt;span&gt;8&lt;/span&gt;             &lt;span&gt;throw&lt;/span&gt;&lt;span&gt; var6;
&lt;/span&gt;&lt;span&gt;9&lt;/span&gt;         }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;this.returnValuehandlers. 就是那个返回结果的包装类，初始化的结果解析器就保存这里，处理思路和参数解析器一样的，&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; handleReturnValue(Object returnValue, MethodParameter returnType, ModelAndViewContainer mavContainer, NativeWebRequest webRequest) throws Exception {
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;         HandlerMethodReturnValueHandler handler = &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.getReturnValueHandler(returnType);
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;         Assert.notNull(handler, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Unknown return value type [&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; + returnType.getParameterType().getName() + &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;        handler.handleReturnValue(returnValue, returnType, mavContainer, webRequest);
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt;&lt;span&gt; HandlerMethodReturnValueHandler getReturnValueHandler(MethodParameter returnType) {
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;         Iterator i$ = &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.returnValueHandlers.iterator();
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; 
&lt;span&gt;10&lt;/span&gt; &lt;span&gt;        HandlerMethodReturnValueHandler returnValueHandler;
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;         &lt;span&gt;do&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;i$.hasNext()) {
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;                 &lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; 
&lt;span&gt;16&lt;/span&gt;             returnValueHandler =&lt;span&gt; (HandlerMethodReturnValueHandler)i$.next();
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.logger.isTraceEnabled()) {
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;                 &lt;span&gt;this&lt;/span&gt;.logger.trace(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Testing if return value handler [&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; + returnValueHandler + &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;] supports [&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; + returnType.getGenericParameterType() + &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;         } &lt;span&gt;while&lt;/span&gt;(!&lt;span&gt;returnValueHandler.supportsReturnType(returnType));
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; 
&lt;span&gt;22&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; returnValueHandler;
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;     }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;遍历预置的所有结果解析器，结果解析器统一实现HandlerMethodReturnValueHandler 接口，实现supportReturnType方法：&lt;/p&gt;
&lt;p&gt;这里我们距离用@ResponseBody注解的结果解析器RequestResponseBodyMethodProcessor 前面说了，参数和结果集他都实现了&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; boolean supportsReturnType(MethodParameter returnType) {
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; returnType.getMethodAnnotation(ResponseBody.&lt;span&gt;class&lt;/span&gt;) != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;; //判断是否有@ResponseBody注解
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; handleReturnValue(Object returnValue, MethodParameter returnType, ModelAndViewContainer mavContainer, NativeWebRequest webRequest) throws IOException, HttpMediaTypeNotAcceptableException {
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;         mavContainer.setRequestHandled(&lt;span&gt;true&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (returnValue != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;             &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.writeWithMessageConverters(returnValue, returnType, webRequest); //用内置的消息转换器来转换结果集
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; 
&lt;span&gt;10&lt;/span&gt;     }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这里可能有人会问，消息转换器什么时候加载的？是在RequestMappingHandlerAdapter这个bean实例化的时候加载的，同时加载参数和结果解析器时候注入到解析器当中的&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; RequestMappingHandlerAdapter() { //无参构造函数中初始化
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;         StringHttpMessageConverter stringHttpMessageConverter = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; StringHttpMessageConverter();
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;         stringHttpMessageConverter.setWriteAcceptCharset(&lt;span&gt;false&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.messageConverters = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; ArrayList();
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.messageConverters.add(&lt;span&gt;new&lt;/span&gt;&lt;span&gt; ByteArrayHttpMessageConverter());
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.messageConverters.add(stringHttpMessageConverter);
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.messageConverters.add(&lt;span&gt;new&lt;/span&gt;&lt;span&gt; SourceHttpMessageConverter());
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;.messageConverters.add(&lt;span&gt;new&lt;/span&gt;&lt;span&gt; AllEncompassingFormHttpMessageConverter());
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt; List&amp;lt;HandlerMethodReturnValueHandler&amp;gt;&lt;span&gt; getDefaultReturnValueHandlers() { //构造参数解析器时候，注入进去
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;         List&amp;lt;HandlerMethodReturnValueHandler&amp;gt; handlers = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; ArrayList();
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;         handlers.add(&lt;span&gt;new&lt;/span&gt;&lt;span&gt; ModelAndViewMethodReturnValueHandler());
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;         handlers.add(&lt;span&gt;new&lt;/span&gt;&lt;span&gt; ModelMethodProcessor());
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;         handlers.add(&lt;span&gt;new&lt;/span&gt;&lt;span&gt; ViewMethodReturnValueHandler());
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;         handlers.add(&lt;span&gt;new&lt;/span&gt; HttpEntityMethodProcessor(&lt;span&gt;this&lt;/span&gt;.getMessageConverters(), &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.contentNegotiationManager));
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;         handlers.add(&lt;span&gt;new&lt;/span&gt;&lt;span&gt; CallableMethodReturnValueHandler());
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;         handlers.add(&lt;span&gt;new&lt;/span&gt;&lt;span&gt; DeferredResultMethodReturnValueHandler());
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;         handlers.add(&lt;span&gt;new&lt;/span&gt; AsyncTaskMethodReturnValueHandler(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.beanFactory));
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;         handlers.add(&lt;span&gt;new&lt;/span&gt; ModelAttributeMethodProcessor(&lt;span&gt;false&lt;/span&gt;&lt;span&gt;));
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;         handlers.add(&lt;span&gt;new&lt;/span&gt; RequestResponseBodyMethodProcessor(&lt;span&gt;this&lt;/span&gt;.getMessageConverters(), &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.contentNegotiationManager));
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;         handlers.add(&lt;span&gt;new&lt;/span&gt;&lt;span&gt; ViewNameMethodReturnValueHandler());
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;         handlers.add(&lt;span&gt;new&lt;/span&gt;&lt;span&gt; MapMethodProcessor());
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (&lt;span&gt;this&lt;/span&gt;.getCustomReturnValueHandlers() != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;             handlers.addAll(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.getCustomReturnValueHandlers());
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; 
&lt;span&gt;27&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (!CollectionUtils.isEmpty(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.getModelAndViewResolvers())) {
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;             handlers.add(&lt;span&gt;new&lt;/span&gt; ModelAndViewResolverMethodReturnValueHandler(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.getModelAndViewResolvers()));
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;         } &lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;             handlers.add(&lt;span&gt;new&lt;/span&gt; ModelAttributeMethodProcessor(&lt;span&gt;true&lt;/span&gt;&lt;span&gt;));
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; 
&lt;span&gt;33&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; handlers;
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt;     }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;下面来看是怎么寻找可以合适的消息转换器的&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;51&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;     &lt;span&gt;protected&lt;/span&gt; &amp;lt;T&amp;gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; writeWithMessageConverters(T returnValue, MethodParameter returnType, NativeWebRequest webRequest) throws IOException, HttpMediaTypeNotAcceptableException {
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;         ServletServerHttpRequest inputMessage = &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.createInputMessage(webRequest);
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;         ServletServerHttpResponse outputMessage = &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.createOutputMessage(webRequest);
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.writeWithMessageConverters(returnValue, returnType, inputMessage, outputMessage);
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt;     &lt;span&gt;protected&lt;/span&gt; &amp;lt;T&amp;gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; writeWithMessageConverters(T returnValue, MethodParameter returnType, ServletServerHttpRequest inputMessage, ServletServerHttpResponse outputMessage) throws IOException, HttpMediaTypeNotAcceptableException {
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;         Class&amp;lt;?&amp;gt; returnValueClass =&lt;span&gt; returnValue.getClass();
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;         HttpServletRequest servletRequest =&lt;span&gt; inputMessage.getServletRequest();
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;         List&amp;lt;MediaType&amp;gt; requestedMediaTypes = &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.getAcceptableMediaTypes(servletRequest); //获取请求的MediaType,eg：&quot;application/json&quot;
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;         List&amp;lt;MediaType&amp;gt; producibleMediaTypes = &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.getProducibleMediaTypes(servletRequest, returnValueClass); //寻找支持这个返回类型的转换器支持的MediaTyoe
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;         Set&amp;lt;MediaType&amp;gt; compatibleMediaTypes = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; LinkedHashSet();
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;         Iterator i$ =&lt;span&gt; requestedMediaTypes.iterator();
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; 　　　　 //双循环两个list，进行匹配，把复核条件的MediaType放到compatibleMediaTypes中 //TODO有些不懂得是为啥这块要过滤一遍，  后面实现了 父类也做了判断每个字类是否支持MediaType了？？
&lt;span&gt;15&lt;/span&gt; &lt;span&gt;        MediaType selectedMediaType;
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;        Iterator i$;
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;        MediaType mediaType;
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;         &lt;span&gt;while&lt;/span&gt;&lt;span&gt;(i$.hasNext()) {
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;             selectedMediaType =&lt;span&gt; (MediaType)i$.next();
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;             i$ =&lt;span&gt; producibleMediaTypes.iterator();
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; 
&lt;span&gt;22&lt;/span&gt;             &lt;span&gt;while&lt;/span&gt;&lt;span&gt;(i$.hasNext()) {
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;                 mediaType =&lt;span&gt; (MediaType)i$.next();
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (selectedMediaType.isCompatibleWith(mediaType)) {
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;                     compatibleMediaTypes.add(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.getMostSpecificMediaType(selectedMediaType, mediaType));
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; 
&lt;span&gt;30&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (compatibleMediaTypes.isEmpty()) {
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;             &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; HttpMediaTypeNotAcceptableException(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.allSupportedMediaTypes);
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;         } &lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt;             List&amp;lt;MediaType&amp;gt; mediaTypes = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; ArrayList(compatibleMediaTypes);
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; &lt;span&gt;            MediaType.sortBySpecificityAndQuality(mediaTypes);
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt;             selectedMediaType = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt;             i$ =&lt;span&gt; mediaTypes.iterator();
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt;             //排序之后，选择适合的MediaType
&lt;span&gt;38&lt;/span&gt;             &lt;span&gt;while&lt;/span&gt;&lt;span&gt;(i$.hasNext()) {
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt;                 mediaType =&lt;span&gt; (MediaType)i$.next();
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (mediaType.isConcrete()) {
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt;                     selectedMediaType =&lt;span&gt; mediaType;
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt;                     &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt; 
&lt;span&gt;45&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt; (mediaType.equals(MediaType.ALL) ||&lt;span&gt; mediaType.equals(MEDIA_TYPE_APPLICATION)) {
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt;                     selectedMediaType =&lt;span&gt; MediaType.APPLICATION_OCTET_STREAM;
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt;                     &lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;49&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;50&lt;/span&gt; 
&lt;span&gt;51&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (selectedMediaType != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;52&lt;/span&gt;                 selectedMediaType =&lt;span&gt; selectedMediaType.removeQualityValue();
&lt;/span&gt;&lt;span&gt;53&lt;/span&gt;                 i$ = &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.messageConverters.iterator();
&lt;/span&gt;&lt;span&gt;54&lt;/span&gt;                 //遍历所有消息转换器，canWrite是接口方法，相当于前面的support等，模式都是一个。然后满足的进行write。输出结果。
&lt;span&gt;55&lt;/span&gt;                 &lt;span&gt;while&lt;/span&gt;&lt;span&gt;(i$.hasNext()) {
&lt;/span&gt;&lt;span&gt;56&lt;/span&gt;                     HttpMessageConverter&amp;lt;?&amp;gt; messageConverter =&lt;span&gt; (HttpMessageConverter)i$.next();
&lt;/span&gt;&lt;span&gt;57&lt;/span&gt;                     &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (messageConverter.canWrite(returnValueClass, selectedMediaType)) {
&lt;/span&gt;&lt;span&gt;58&lt;/span&gt; &lt;span&gt;                        messageConverter.write(returnValue, selectedMediaType, outputMessage);
&lt;/span&gt;&lt;span&gt;59&lt;/span&gt;                         &lt;span&gt;if&lt;/span&gt; (&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.logger.isDebugEnabled()) {
&lt;/span&gt;&lt;span&gt;60&lt;/span&gt;                             &lt;span&gt;this&lt;/span&gt;.logger.debug(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Written [&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; + returnValue + &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;] as \&quot;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; + selectedMediaType + &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;\&quot; using [&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; + messageConverter + &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;61&lt;/span&gt; &lt;span&gt;                        }
&lt;/span&gt;&lt;span&gt;62&lt;/span&gt; 
&lt;span&gt;63&lt;/span&gt;                         &lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;64&lt;/span&gt; &lt;span&gt;                    }
&lt;/span&gt;&lt;span&gt;65&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;66&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;67&lt;/span&gt; 
&lt;span&gt;68&lt;/span&gt;             &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; HttpMediaTypeNotAcceptableException(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.allSupportedMediaTypes);
&lt;/span&gt;&lt;span&gt;69&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;70&lt;/span&gt;     }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;下面介绍下，@ResponseBode标签用的消息转换器是MappingJacksonHttpMessageConverter；先看下类图吧&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1206628/201804/1206628-20180402141509470-582704527.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;MappingJacksonHttpMessageConverter重写了父类的write方法：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; boolean canWrite(Class&amp;lt;?&amp;gt;&lt;span&gt; clazz, MediaType mediaType) {
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;.objectMapper.canSerialize(clazz) &amp;amp;&amp;amp; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.canWrite(mediaType); //canWrite(mediaType)是父类实现的
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;     }
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;     &lt;span&gt;protected&lt;/span&gt;&lt;span&gt; boolean canWrite(MediaType mediaType) {
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (mediaType != &lt;span&gt;null&lt;/span&gt; &amp;amp;&amp;amp; !&lt;span&gt;MediaType.ALL.equals(mediaType)) {
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;             Iterator i$ = &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.getSupportedMediaTypes().iterator(); //获取子类解析器支持的MediaType，看下是否支持
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; 
&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;            MediaType supportedMediaType;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;             &lt;span&gt;do&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;i$.hasNext()) {
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;                     &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; 
&lt;span&gt;11&lt;/span&gt;                 supportedMediaType =&lt;span&gt; (MediaType)i$.next();
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;             } &lt;span&gt;while&lt;/span&gt;(!&lt;span&gt;supportedMediaType.isCompatibleWith(mediaType));
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; 
&lt;span&gt;14&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;         } &lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;     }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;write方法 父类也帮着实现了，父类具体做了如输出，拼凑输出流头等信息&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; final &lt;span&gt;void&lt;/span&gt;&lt;span&gt; write(T t, MediaType contentType, HttpOutputMessage outputMessage) throws IOException, HttpMessageNotWritableException {
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;         HttpHeaders headers =&lt;span&gt; outputMessage.getHeaders();
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (headers.getContentType() == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (contentType == &lt;span&gt;null&lt;/span&gt; || contentType.isWildcardType() ||&lt;span&gt; contentType.isWildcardSubtype()) {
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;                 contentType = &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.getDefaultContentType(t);
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; 
&lt;span&gt; 8&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (contentType != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;                headers.setContentType(contentType);
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; 
&lt;span&gt;13&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (headers.getContentLength() == -&lt;span&gt;1L&lt;/span&gt;&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;             Long contentLength = &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.getContentLength(t, headers.getContentType());
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (contentLength != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;                headers.setContentLength(contentLength);
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; 
&lt;span&gt;20&lt;/span&gt;         &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.writeInternal(t, outputMessage); //钩子方法，让子类去实现
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;        outputMessage.getBody().flush();
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;     }
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;     &lt;span&gt;protected&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; writeInternal(Object &lt;span&gt;object&lt;/span&gt;&lt;span&gt;, HttpOutputMessage outputMessage) throws IOException, HttpMessageNotWritableException {
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;         JsonEncoding encoding = &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.getJsonEncoding(outputMessage.getHeaders().getContentType());
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;         JsonGenerator jsonGenerator = &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.objectMapper.getJsonFactory().createJsonGenerator(outputMessage.getBody(), encoding);
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.objectMapper.getSerializationConfig().isEnabled(Feature.INDENT_OUTPUT)) {
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;            jsonGenerator.useDefaultPrettyPrinter();
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;         //这块就是默认用Jackson进行翻译结果集了
&lt;span&gt; 8&lt;/span&gt;         &lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.prefixJson) {
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;                 jsonGenerator.writeRaw(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;{} &amp;amp;&amp;amp; &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; 
&lt;span&gt;13&lt;/span&gt;             &lt;span&gt;this&lt;/span&gt;.objectMapper.writeValue(jsonGenerator, &lt;span&gt;object&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;         } &lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (JsonProcessingException var6) {
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;             &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; HttpMessageNotWritableException(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Could not write JSON: &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; +&lt;span&gt; var6.getMessage(), var6);
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;     }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;因为用@ResponseBody不需要返回视图，所以视图那块就返回Null,不需要渲染视图了&lt;/p&gt;
</description>
<pubDate>Mon, 02 Apr 2018 06:25:00 +0000</pubDate>
<dc:creator>郝二驴</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/haoerlv/p/8692988.html</dc:identifier>
</item>
<item>
<title>三分钟看完京东区块链白皮书 - 邴越</title>
<link>http://www.cnblogs.com/binyue/p/8683326.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/binyue/p/8683326.html</guid>
<description>&lt;p&gt;京东区块链白皮书分析了区块链在企业级应用上的场景，以及技术发展目前的短板，编写者文字功底深厚，是一份优秀的区块链资料概括，可以认为是京东在Baas即Blockchain as service方面的规划和布局，不过缺少细节，以及京东在区块链方面的创新策略介绍。&lt;/p&gt;
&lt;p&gt;京东拥有全渠道零售和端到端供应链的高质量大数据，区块链技术天然可以解决京东业务场景中多个主体的信息记录与分享，可信数据交换与传递的业务诉求。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://img.chainnews.com/upload/reports/583cf46d-012a-5e55-96a5-512adf86f63c.pdf&quot;&gt;点击下载京东区块链白皮书&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;白皮书指出京东的目标是以区块链为“链接器”，结合自身在云计算、大数据、人工智能、物联网等新技术上积累的经验，构建一体化的智慧供应链体系、零售网络和金融科技。&lt;/p&gt;
&lt;h3 id=&quot;一京东如何看待区块链技术&quot;&gt;一、京东如何看待区块链技术&lt;/h3&gt;
&lt;h4 id=&quot;区块链技术如何引领数字经济变革&quot;&gt;1.区块链技术如何引领数字经济变革&lt;/h4&gt;
&lt;p&gt;京东认为区块链技术在以下三个方向存在将引领数字经济变革的巨大的应用机会:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;建立社会化共享的可信数据库&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;区块链的技术本质是一种去中心化、面向业务、跨主体、健壮与安全的分布式状态机。区块链具有存储数据、共有数据、分布式、防篡改与保护隐私、数字化合约 5项核心特征。&lt;br/&gt;基于这些特征，部署跨主体间的区块链联盟链节点和桥接，用区块链技术搭建一张社会化的共享数据存储网络，有机会以客观的技术手段来解决跨主体的信任问题。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;提升交易效率，降低交易成本&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;基于区块链智能合约等多种模式的商业交易可以大幅减少数据核实的环节和降低成本，同时又能保证商业交易的风险降低，交易更具确定性。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;推动供应链创新&lt;br/&gt;伴随着中国政府将供应链创新与应用上升为国家战略和居民消费的不断升级，供应链风险控制和提升供应链透明度的诉求不断攀升。区块链技术可以搭建供应链全流 程节点共同维护的联盟链，在联盟链中建立数据维护的参与规则与激励机制。&lt;/li&gt;
&lt;/ul&gt;&lt;h4 id=&quot;对区块链技术的再理解&quot;&gt;2.对区块链技术的再理解&lt;/h4&gt;
&lt;p&gt;区块链本质上是一种健壮和安全的分布式状态机，典型的技术构成包括共识算法、P2P 通讯、密码学、数据库技术和虚拟机。&lt;/p&gt;
&lt;p&gt;这也构成了区块链必不可少的 5 项核心能力:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;存储数据&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;源自数据库技术和硬件存储计算能力的发展，随着时间的累积，区块链的大小也在持续上升，成熟的硬件存储计算能力，使得多主体间同时大量存储相同数据成为可能;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;共有数据&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;源自共识算法，参与区块链的各个主体通过约定的决策机制自动达成共识，共享同一份可信的数据账本;&lt;/p&gt;
&lt;p&gt;源自 P2P 通讯技术，实现各主体间点对点的信息传输;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;防篡改与保护隐私&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;源自密码学运用，通过公钥私钥、哈希算法等密码学工具，确保各主体身份和共有信息的安全;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;数字化合约&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;源自虚拟机技术，将生成的跨主体的数字化智能合约写入区块链系统， 通过预设的触发条件，驱动数字合约的执行。&lt;/p&gt;
&lt;h4 id=&quot;区块链发展面临的挑战&quot;&gt;3.区块链发展面临的挑战&lt;/h4&gt;
&lt;p&gt;尤其在企业级应用方面，区块链的交易并发能力、数据存储能力、通用性、功能 完备性、易用性都还存在明显不足。&lt;/p&gt;
&lt;ul readability=&quot;-0.5&quot;&gt;&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;交易并发能力&lt;br/&gt;目前开源的区块链系统的高并发交易能力普遍不高，其中，共识算法是制约性能的重要方面。&lt;br/&gt;制约性能的另一个重要因素是账本结构。目前典型的区块链账本设计为区块的单链结构，意味着从全局来看所有的交易都只能顺序地被处理。由于交易处理缺少并行度，因而难以获得接近于传统中心化系统的性能表现。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;数据存储能力&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;在数据存储能力方面，由于区块链的数据只有追加而没有移除，数据只增不减，随着时间推移，区块链系统对数据存储大小的需要也只能持续地增大，在处理企业数据时这一趋势增长更甚。&lt;/p&gt;
&lt;p&gt;企业场景下的数据包含结构化和非结构化数据，数据量十分庞大。以电商供应链为例，主要电商入口的每日数据记录条数通常都在千万级以上，如再沿着供应链条进一步展开时，每延伸一级数据量都会进一步放大。&lt;/p&gt;
&lt;p&gt;目前典型的区块链系统在实现对账本数据的存储时，典型的实现方式是基于文件系统或者简单的 KV 数据库存储，没有采用分布式存储的设计，因而数据存储能力与实际需要之间 也存在较大的差距，需要探索更为有效的大数据存储方式。&lt;/p&gt;
&lt;p&gt;区块链需要适应多样化的业务需求，满足跨企业的业务链条上的数据共享，这意味着区&lt;br/&gt;块链对数据的记录方式要有足够的通用和标准，才能表示各种结构化和非结构化的信息，并&lt;br/&gt;能够满足随着业务范围拓展所需的跨链要求。&lt;/p&gt;
&lt;p&gt;区块链技术需要降低学习和使用门槛，支持快速实施部署，提供贴近业务的接口，推广使用。&lt;/p&gt;
&lt;h3 id=&quot;二京东区块链应用场景&quot;&gt;二、京东区块链应用场景&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;http://oh6tw5gsp.bkt.clouddn.com/Screen%20Shot%202018-03-31%20at%205.31.09%20PM.png&quot; alt=&quot;应用&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;三京东区块链架构体系&quot;&gt;三、京东区块链架构体系&lt;/h3&gt;
&lt;p&gt;京东区块链的目标是打造面向企业级应用的区块链基础设施，为企业提供能够切实解决业务痛点的区块链技术方案。&lt;/p&gt;
&lt;p&gt;京东区块链采用分层架构设计、标准化账本数据协议、优化共识算法、引入微服务架构与可伸缩的分布式存储技术、灵活的多级授权策略等一系列的创新技术方案。&lt;/p&gt;
&lt;h4 id=&quot;总体架构&quot;&gt;1.总体架构&lt;/h4&gt;
&lt;p&gt;京东区块链的总体架构分为 3 个层次:区块链协议、组件框架、服务平台。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://oh6tw5gsp.bkt.clouddn.com/%E4%BA%AC%E4%B8%9C%E5%8C%BA%E5%9D%97%E9%93%BE%E6%9E%B6%E6%9E%84.png&quot; alt=&quot;京东区块链架构&quot;/&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;区块链协议&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;京东区块链协议作为最顶层的架构设计，定义了区块链的数据格式标准，包括账本状态、历史证明、账本操作集、合约指令集 4 个方面的数据标准。&lt;/p&gt;
&lt;ul readability=&quot;0&quot;&gt;&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;组件模型&lt;br/&gt;“组件模型”是区块链逻辑组件的框架模型，是对京东区块链协议的实现框架。包括了&lt;br/&gt;共识网络、账本、持久化引擎、合约引擎四个组件。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;服务平台&lt;br/&gt;“服务平台”是对上层的区块链协议和组件模型的具体实现，由网关、服务、节点网 络、SDK 和一套工具集组成。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;京东区块链在架构和实现上遵循以下的几个设计原则。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;面向业务&lt;/li&gt;
&lt;li&gt;标准化&lt;/li&gt;
&lt;li&gt;松耦合与模块化&lt;/li&gt;
&lt;/ul&gt;&lt;h4 id=&quot;应用模型&quot;&gt;2.应用模型&lt;/h4&gt;
&lt;p&gt;与传统的互联网协议不同(如 TCP/IP，HTTP 等)，传统协议都是面向通讯过程的，而区块链是面向 业务过程的。区块链作为一种分布式状态机，“智能合约”是实现分布式业务状态转移的核心功能，使得基于区块链的应用架构模型产生了全新的变革。&lt;/p&gt;
&lt;p&gt;假设要开发一个商品贸易系统，业务的参与者包括贸易买卖双方和物流企业，这个系统要帮助买卖双方建立交易合同、跟踪货物运输过程、交付结算。&lt;/p&gt;
&lt;p&gt;基于区块链实现该应用通常需要以下几个步骤:&lt;/p&gt;
&lt;h5 id=&quot;定义参与业务的各个主体的身份账户&quot;&gt;(1) 定义参与业务的各个主体的身份账户&lt;/h5&gt;
&lt;p&gt;为参与者注册登记一个由公钥私钥对(证书)表示的身份账户。由符合国家标准的证书&lt;br/&gt;所表示的身份账户是能够代表一个特定的法人，由该账户签发的数据可以在法律上被认为是&lt;br/&gt;该法人做出的确认。&lt;/p&gt;
&lt;h5 id=&quot;编写智能合约对业务过程做出定义&quot;&gt;(2) 编写智能合约对业务过程做出定义&lt;/h5&gt;
&lt;p&gt;把参与者之间达成的商业协议以智能合约代码的形式进行定义，以数字化形式约定贸易&lt;br/&gt;的商品属性、数量、交付价格、交付期限、交付条件、运输方式、交割检验标准、货款计算&lt;br/&gt;方式、货款支付时限等等。&lt;/p&gt;
&lt;h5 id=&quot;联合签署智能合约并触发业务初始条件&quot;&gt;(3) 联合签署智能合约并触发业务初始条件&lt;/h5&gt;
&lt;p&gt;智能合约最后需要经过参与者以各自的身份账户做出签署，之后每一方参与者只需要根&lt;br/&gt;据自己业务范围内的业务进程做出相应的操作，便触发了智能合约的执行。&lt;/p&gt;
&lt;h3 id=&quot;四架构分层解析&quot;&gt;四、架构分层解析&lt;/h3&gt;
&lt;h4 id=&quot;账本协议&quot;&gt;1.账本协议&lt;/h4&gt;
&lt;ul readability=&quot;0&quot;&gt;&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;账本状态&lt;br/&gt;表示区块链系统在某一时刻所处的状况，由系统保存的业务数据以及系统运行的控制属性构成。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;账本操作集&lt;br/&gt;“账本操作集”是为了实现跨链互操作而定义一个通用的标准，包含“类型”的标准码，“参数”的标准格式。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;合约指令集&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;区块链以合约语言的形式定义业务状态的控制和转换逻辑。通过设计一个标准化的合约语言指令集，可以用一种通用的方式来表述各种复杂的业务逻辑，从而与具体的编程语言无关。&lt;/p&gt;
&lt;h4 id=&quot;组件模型&quot;&gt;2.组件模型&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;共识网络&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;目前典型的共识算法主要有 PoW、PoS、PBFT、Raft、Paxos 等。这些算法在运行过程都可以抽象下面几个阶段:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(1)交易扩散;&lt;/strong&gt;&lt;br/&gt;&lt;strong&gt;(2)交易排序;&lt;/strong&gt;&lt;br/&gt;&lt;strong&gt;(3)调用交易执行程序;&lt;/strong&gt;&lt;br/&gt;&lt;strong&gt;(4)对交易执行结果进行共识;&lt;/strong&gt;&lt;br/&gt;&lt;strong&gt;(5)提交共识结果。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;各种共识算法的差异体现在不同阶段采取了不同实现策略。&lt;br/&gt;京东区块链选择类 BFT 的算法进行优化，提供了确定性交易执行、拜占庭容错、动态调整节点的特性。&lt;/p&gt;
&lt;p&gt;账本状态与合约分离，使用基于身份的访问控制协议约束合约对状态的访问，这种将数 据与逻辑分离的设计模式是典型的贫血模型，可为上层业务逻辑提供无状态的逻辑抽象。&lt;/p&gt;
&lt;p&gt;合约引擎包含两大部分，前端包括合约高级语言规范及其工具链，后端是一个轻量级的 合约中间代码的执行环境。&lt;/p&gt;
&lt;h4 id=&quot;服务平台&quot;&gt;3.服务平台&lt;/h4&gt;
&lt;p&gt;功能模块分为区块链网关、区块链节点服务、区块链共识网络、配套工具四个部分。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://oh6tw5gsp.bkt.clouddn.com/Screen%20Shot%202018-03-31%20at%205.51.36%20PM.png&quot;/&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;区块链网关&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;“区块链网关”被设计为一种轻量的网关系统，通常是部署在参与者的网络环境中，提供功能包括:&lt;/p&gt;
&lt;p&gt;a) 私钥管理:提供完全本地化的私钥保管功能;&lt;/p&gt;
&lt;p&gt;b) 隐私保护:采用端到端加密手段实现隐私保护; c) 协议转换:提供轻量化的 HTTP Restful Service，适配 TCP 协议的区块链节点 API。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;区块链节点服务&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;在区块链基础网络的基础上提供的面向应用的通用的功能组件，目的是提供通用功能的&lt;br/&gt;复用。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;区块链共识网络&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;由共识节点组成的网络，基于 P2P 网络和共识算法确保交易数据在节点之间保持一致。&lt;/p&gt;
&lt;h3 id=&quot;五-京东区块链的特点&quot;&gt;五、 京东区块链的特点&lt;/h3&gt;
&lt;h4 id=&quot;性能&quot;&gt;1.性能&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;采用优化的 BFT 共识协议和 P2P 通讯，支持多链并行共识&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;采用改进的 BFT 算法，支持动态的调整网络拓扑，实现节点动态加入及主动退出。为了应对多样化的业务场景、满足信息安全需求、提升业务吞吐量，京东区块链支持多链架构。不相关的业务运行在多条并行的区块链上，这为我们提供了针对业务的线性扩展能力。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://oh6tw5gsp.bkt.clouddn.com/%E5%A4%9A%E9%93%BE%E5%B9%B6%E8%A1%8C.png&quot; alt=&quot;多链并行&quot;/&gt;&lt;/p&gt;
&lt;p&gt;对于多条链之间的互操作我们采取了中继链的模式，参与各方向中继链节点提交提案，结果经共识后得以确认。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;采用微服务处理架构，支持横向伸缩、动态扩容，实现海量交易处理与数据存储&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;http://oh6tw5gsp.bkt.clouddn.com/Screen%20Shot%202018-03-31%20at%205.22.26%20PM.png&quot; alt=&quot;微服务&quot;/&gt;&lt;/p&gt;
&lt;p&gt;通过测试、分析发现系统处理海量交易时，共识节点中密码模块与合约模块存在性能瓶颈。为了减轻这方面问题的影响，将密码模块、合约模块拆分为单独的无状态的微服务，以便在处理海量交易时有针对性的对密码、合约微服务进行横向扩容。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;采用灵活的数据存储结构，支持冷热数据分离&lt;/li&gt;
&lt;li&gt;支持节点动态加入和退出，实现系统的高可用性，保证业务不间断运行&lt;/li&gt;
&lt;/ul&gt;&lt;h4 id=&quot;功能&quot;&gt;2.功能&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;支持用户实名与认证&lt;/li&gt;
&lt;li&gt;支持企业数据治理&lt;/li&gt;
&lt;li&gt;支持事件驱动的业务协作模型&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;京东区块链采用通用事件驱动模型框架。已接入 AKKA 的 Actor 模型，对并发模型进行了更高的抽象。采用轻量级事务处理，从事件层面实现细粒度的组件复用。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;支持多账本以实现按业务维度管理链上数据&lt;/li&gt;
&lt;/ul&gt;&lt;h4 id=&quot;安全&quot;&gt;3.安全&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;可插拔的密码算法，可以灵活的制定相应的密码体系&lt;/li&gt;
&lt;li&gt;平台默认实现多套密码算法，包括国密算法和硬件加密设备&lt;/li&gt;
&lt;/ul&gt;&lt;h4 id=&quot;合约&quot;&gt;4.合约&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;支持可复用的智能合约&lt;/li&gt;
&lt;li&gt;支持智能合约语言的调试功能&lt;/li&gt;
&lt;/ul&gt;&lt;h4 id=&quot;合规&quot;&gt;5.合规&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;支持基于 CA 的账户认证&lt;/li&gt;
&lt;li&gt;支持监管节点的接入&lt;/li&gt;
&lt;li&gt;支持数据备案&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;六展望区块链技术发展&quot;&gt;六、展望区块链技术发展&lt;/h3&gt;
&lt;p&gt;区块链是构建合作伙伴间信任经济的基石，那么就需要区块链或是联盟链在互联网的广泛部署和规模化应用。&lt;br/&gt;目前区块链技术推广仍存在诸多挑战，京东区块链技术团队总结和建议如下:&lt;/p&gt;
&lt;h5 id=&quot;政策与标准指导&quot;&gt;(1) 政策与标准指导&lt;/h5&gt;
&lt;p&gt;区块链规模化应用，需要跨企业达成一致的技术标准和行业监管标准&lt;/p&gt;
&lt;h5 id=&quot;技术平台的不断完善&quot;&gt;(2) 技术平台的不断完善&lt;/h5&gt;
&lt;p&gt;区块链技术脱胎于比特币公共网络，据不完全统计，比特币矿池每年消耗大量的电力资源，原因是完全公有链的区块链部署形式实际上并不适用于全部场景。&lt;/p&gt;
&lt;h5 id=&quot;在应用中建立激励机制和商业模型&quot;&gt;(3) 在应用中建立激励机制和商业模型&lt;/h5&gt;
&lt;p&gt;比特币作为区块链的创始级应用得益于它搭建了一套非常完善的公有链模型和基于这个模型的工作和激励机制。&lt;/p&gt;
</description>
<pubDate>Mon, 02 Apr 2018 06:21:00 +0000</pubDate>
<dc:creator>邴越</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/binyue/p/8683326.html</dc:identifier>
</item>
<item>
<title>在Winform混合式框架中整合外部API接口的调用 - 伍华聪</title>
<link>http://www.cnblogs.com/wuhuacong/p/8691008.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/wuhuacong/p/8691008.html</guid>
<description>&lt;p&gt;在我们常规的业务处理中，一般内部处理的接口多数都是以数据库相关的，基于混合式开发的Winform开发框架，虽然在客户端调用的时候，一般选择也是基于Web API的调用，不过后端我们可能不仅仅是针对我们业务数据库的处理，也可以能是调用其他外部接口，如物流、供应商接口等接口，本随笔就是主要介绍基于混合式开发框架如何整合外部API接口的调用。&lt;/p&gt;
&lt;h3&gt;1、混合式框架的结构介绍&lt;/h3&gt;
&lt;p&gt; 我们知道，混合式的框架是可以在客户端访问Web API服务、WCF服务或者直接连接数据库几种方式的综合，而尤以Web API为最广泛的应用，它的整个框架的结构如下所示。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/8867/201804/8867-20180402105401736-641959836.png&quot; alt=&quot;&quot; width=&quot;342&quot; height=&quot;498&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/8867/201804/8867-20180402105952678-157792157.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;在客户端中，通过统一的工厂类CallerFactory&amp;lt;T&amp;gt;对相应的接口进行访问，这里主要就是服务器端Web API服务接口的处理，以及客户端对Web API接口的封装，两部分通过一些基类进行简化处理，可以极大提高开发效率。&lt;/p&gt;
&lt;p&gt;对于外部第三方的Web API接口，我们也可以在自己的Web API接口中进行包装，使得客户端通过相应的接口进行交互即可，不需要理会内部还是外部的接口，从而实现透明的接口调用。&lt;/p&gt;
&lt;h3&gt; 2、RFID外部接口的整合处理&lt;/h3&gt;
&lt;p&gt; 在一个客户的应用案例中，需要整合服务商RFID接口实现相应的数据交互，本篇随笔也是基于这个案例进行整个过程的分析和操作，使得我们了解在混合框架中如何整合第三方Web API接口为我们内部框架所用。&lt;/p&gt;
&lt;p&gt;一般来说，Web API接口，需要明确API的URL、数据提交方式（POST/GET）、提交参数、返回集合，以及一些特殊的数据等，而一般接口的操作，也是需要一个访问令牌的，这些都是Web API接口调用的关键。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/8867/201804/8867-20180402110749240-869685393.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/8867/201804/8867-20180402110905007-1616025993.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/8867/201804/8867-20180402110959308-244447814.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;基本上我们有了上面Web API的1/2/3步骤的信息就可以进行接口编程了，这些是Web API开发非常重要的信息。&lt;/p&gt;
&lt;p&gt;我们需要特别主要到，步骤1中的信息&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/8867/201804/8867-20180402111254964-1905540671.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这里面的token是额外的接口信息，是需要设置Http Request请求的头部信息里面的，是用户身份的重要信息，所以我们一般需要先通过指定的授权接口获取这个token信息。&lt;/p&gt;
&lt;p&gt;在这个外部的接口集合里面，我们找到统一登录验证的接口定义如下所示。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/8867/201804/8867-20180402112349991-1204128684.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/8867/201804/8867-20180402112621613-1137987478.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt; 通过上面的分析，我们首先需要需要处理好登录验证接口，然后通过接口传递令牌token给其他接口进行数据处理的。&lt;/p&gt;
&lt;p&gt;结合我们的混合框架结构，这里我以测试项目TestProject项目为例进行介绍，我们调整WHC.TestProject.Caller项目的对应类，如下所示。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/8867/201804/8867-20180402114330720-253210149.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;其中Facade层接口类IRFIDService.cs代码如下所示。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;49&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
    &lt;span&gt;///&lt;/span&gt;&lt;span&gt; RFID服务外部接口
    &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span&gt;    [ServiceContract]
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt;&lt;span&gt; IRFIDService 
    {

        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 终端用户统一登录验证
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span&gt;        [OperationContract]
        CheckinResult CheckIn(&lt;/span&gt;&lt;span&gt;string&lt;/span&gt; username, &lt;span&gt;string&lt;/span&gt; password, &lt;span&gt;string&lt;/span&gt; device_uuid, &lt;span&gt;string&lt;/span&gt; device_type, &lt;span&gt;string&lt;/span&gt; last_app_version, &lt;span&gt;string&lt;/span&gt;&lt;span&gt; app_id);

        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 获取标签发货通知单批量
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span&gt;        [OperationContract]
        TagOrderAsnResult TagOrderAsn(&lt;/span&gt;&lt;span&gt;int&lt;/span&gt; brand_id, &lt;span&gt;string&lt;/span&gt; factcode, &lt;span&gt;string&lt;/span&gt; start_time, &lt;span&gt;string&lt;/span&gt; end_time, PagerInfo pagerInfo, &lt;span&gt;string&lt;/span&gt;&lt;span&gt; token);

        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 标签订单出库物流信息回写
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span&gt;        [OperationContract]
        CommonResult TagOutPost(&lt;/span&gt;&lt;span&gt;string&lt;/span&gt; docno_asn, &lt;span&gt;string&lt;/span&gt; factcode, &lt;span&gt;string&lt;/span&gt; dest_factcode, List&amp;lt;FreightInfo&amp;gt; freight, &lt;span&gt;string&lt;/span&gt;&lt;span&gt; token);
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这里面的接口定义，我们是根据输入参数、输出参数进行定义的，另外token是额外增加的令牌参数，用于请求头部写入信息的。&lt;/p&gt;
&lt;p&gt;这个接口的定义其实和我们常规的Web API接口定义没有太多的不同，如下是一个内部客户信息接口定义。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
    &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 客户信息的服务接口
    &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span&gt;    [ServiceContract]
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt; ICustomerService : IBaseService&amp;lt;CustomerInfo&amp;gt;&lt;span&gt;
    {               
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 根据客户名称获取客户列表
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;name&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;客户名称&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
&lt;span&gt;        [OperationContract]
        List&lt;/span&gt;&amp;lt;CustomerInfo&amp;gt; FindByName(&lt;span&gt;string&lt;/span&gt;&lt;span&gt; name);
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;差别就是它们接口继承类有所不同，外部接口由于不需要和数据库打交道，我们不需要继承IBaseService接口&lt;/p&gt;
&lt;p&gt;根据这些接口的定义，我们还需要实现我们具体的Web API 服务，逻辑上它是对外部Web API接口的封装，但是对于客户端来说，并不需要知道是内部还是外部接口，客户端只需要知道如果提交参数或者结果即可。&lt;/p&gt;
&lt;p&gt;由于Web API涉及多个参数的数据提交，一般来说这种情况都是以POST方式处理的，数据参数则统一在Web API端通过定义一个JObject对象来传递即可，登录认证的Web API接口定义如下所示。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
    &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 基于RFID的应用接口
    &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; RFIDController : BaseApiController
    {
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 终端用户统一登录验证
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;param&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;包含多个属性的对象&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;token&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;访问令牌&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;span&gt;        [HttpPost]
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; CheckinResult CheckIn(JObject param)
        {
            CheckinResult result &lt;/span&gt;= &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;dynamic&lt;/span&gt; obj =&lt;span&gt; param;
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (obj != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
            {
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;使用POST数据&lt;/span&gt;
                &lt;span&gt;var&lt;/span&gt; postData =&lt;span&gt; param.ToJson();
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;使用具体的URL&lt;/span&gt;
                &lt;span&gt;var&lt;/span&gt; queryUrl = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;https://***.***.***/api/v6/rfid/terminal/checkin/post&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;

                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; helper = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; HttpHelper();
                helper.ContentType &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;application/json&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; content = helper.GetHtml(queryUrl, postData, &lt;span&gt;true&lt;/span&gt;&lt;span&gt;);
                RFIDBaseData&lt;/span&gt;&amp;lt;CheckinResult&amp;gt; jsonResult = JsonConvert.DeserializeObject&amp;lt;RFIDBaseData&amp;lt;CheckinResult&amp;gt;&amp;gt;&lt;span&gt;(content);
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (jsonResult != &lt;span&gt;null&lt;/span&gt; &amp;amp;&amp;amp; jsonResult.code == &lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
                {
                    result &lt;/span&gt;=&lt;span&gt; jsonResult.data;
                }
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; result;
            }
            &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;
            {
                &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; MyApiException(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;传递参数错误&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            }
        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;其中输入的参数这里用了JObject param的参数，我们提交给外部Web API接口的时候，我们把这个参数再次序列号为JSON格式的字符串即可：&lt;/p&gt;
&lt;pre&gt;
var postData =&lt;span&gt; param.ToJson();&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;其中CheckinResult和RFIDBaseData是根据输入参数、输出结果进行的实体类定义，目的是序列化为强类型的实体类，方便数据处理操作。&lt;/p&gt;
&lt;p&gt;在客户端，我们只需要对接好和Web API服务端的接口，那么调用起来就非常方便，其中对应的Web API接口客户端封装类 RFIDCaller 如下所示。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;48&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
    &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 对RFID控制的接口调用封装
    &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; RFIDCaller : NormalApiService, IRFIDService
    {
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; RFIDCaller()
        {
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.ConfigurationPath = ApiConfig.ConfigFileName; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;Web API配置文件&lt;/span&gt;
            &lt;span&gt;this&lt;/span&gt;.configurationName =&lt;span&gt; ApiConfig.RFID;
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; CheckinResult CheckIn(&lt;span&gt;string&lt;/span&gt; username, &lt;span&gt;string&lt;/span&gt; password, &lt;span&gt;string&lt;/span&gt; device_uuid, &lt;span&gt;string&lt;/span&gt; device_type, &lt;span&gt;string&lt;/span&gt; last_app_version, &lt;span&gt;string&lt;/span&gt;&lt;span&gt; app_id)
        {
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; action =&lt;span&gt; System.Reflection.MethodBase.GetCurrentMethod().Name;
            &lt;/span&gt;&lt;span&gt;string&lt;/span&gt; url =&lt;span&gt; GetNormalUrl(action);
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; postData = &lt;span&gt;new&lt;/span&gt;&lt;span&gt;
            {
                username &lt;/span&gt;=&lt;span&gt; username,
                password &lt;/span&gt;=&lt;span&gt; password,
                device_uuid &lt;/span&gt;=&lt;span&gt; device_uuid,
                device_type &lt;/span&gt;=&lt;span&gt; device_type,
                last_app_version &lt;/span&gt;=&lt;span&gt; last_app_version,
                app_id &lt;/span&gt;=&lt;span&gt; app_id,
            }.ToJson();

            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; result = JsonHelper&amp;lt;CheckinResult&amp;gt;&lt;span&gt;.ConvertJson(url, postData);
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; result;
        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;有了这些，我们直接在客户端的界面里面，就可以通过调用CallerFactory&amp;lt;T&amp;gt;进行处理操作了，如下是客户端窗体获取验证身份令牌数据的代码&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
        &lt;span&gt;private&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; token = &lt;span&gt;null&lt;/span&gt;;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;访问RFID接口的token&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 根据终端用户统一登录验证获取相关访问token
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
        &lt;span&gt;private&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;&lt;span&gt; GetRFIDToken()
        {
            &lt;/span&gt;&lt;span&gt;string&lt;/span&gt; username = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;wuhuacong&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;string&lt;/span&gt; password = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;123456&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;string&lt;/span&gt; device_uuid = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;aaaaaaa&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;string&lt;/span&gt; device_type = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;iphone&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;string&lt;/span&gt; last_app_version = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;xxxxxxx&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;string&lt;/span&gt; app_id = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ntdf5543581a2f066e74cf2fe456&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
            
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; result = CallerFactory&amp;lt;IRFIDService&amp;gt;&lt;span&gt;.Instance.CheckIn(username, password, device_uuid, device_type, last_app_version, app_id);
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(result != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
            {
                token &lt;/span&gt;=&lt;span&gt; result.token;
            }
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; token;
        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt; 上面是认证身份的接口，其他类型的接口类似的处理方式，如增加了一个&lt;/p&gt;
&lt;h3 id=&quot;page_title&quot;&gt;获取标签发货通知单批量&lt;/h3&gt;
&lt;p&gt;操作后，对应的客户端封装类如下所示。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;61&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
    &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 对RFID控制的接口调用封装
    &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; RFIDCaller : NormalApiService, IRFIDService
    {
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; RFIDCaller()
        {
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.ConfigurationPath = ApiConfig.ConfigFileName; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;Web API配置文件&lt;/span&gt;
            &lt;span&gt;this&lt;/span&gt;.configurationName =&lt;span&gt; ApiConfig.RFID;
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; CheckinResult CheckIn(&lt;span&gt;string&lt;/span&gt; username, &lt;span&gt;string&lt;/span&gt; password, &lt;span&gt;string&lt;/span&gt; device_uuid, &lt;span&gt;string&lt;/span&gt; device_type, &lt;span&gt;string&lt;/span&gt; last_app_version, &lt;span&gt;string&lt;/span&gt;&lt;span&gt; app_id)
        {
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; action =&lt;span&gt; System.Reflection.MethodBase.GetCurrentMethod().Name;
            &lt;/span&gt;&lt;span&gt;string&lt;/span&gt; url =&lt;span&gt; GetNormalUrl(action);
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; postData = &lt;span&gt;new&lt;/span&gt;&lt;span&gt;
            {
                username &lt;/span&gt;=&lt;span&gt; username,
                password &lt;/span&gt;=&lt;span&gt; password,
                device_uuid &lt;/span&gt;=&lt;span&gt; device_uuid,
                device_type &lt;/span&gt;=&lt;span&gt; device_type,
                last_app_version &lt;/span&gt;=&lt;span&gt; last_app_version,
                app_id &lt;/span&gt;=&lt;span&gt; app_id,
            }.ToJson();

            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; result = JsonHelper&amp;lt;CheckinResult&amp;gt;&lt;span&gt;.ConvertJson(url, postData);
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; result;
        }

        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; TagOrderAsnResult TagOrderAsn(&lt;span&gt;int&lt;/span&gt; brand_id, &lt;span&gt;string&lt;/span&gt; factcode, &lt;span&gt;string&lt;/span&gt; start_time, &lt;span&gt;string&lt;/span&gt; end_time, Pager.Entity.PagerInfo pagerInfo, &lt;span&gt;string&lt;/span&gt;&lt;span&gt; token)
        {
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; action =&lt;span&gt; System.Reflection.MethodBase.GetCurrentMethod().Name;
            &lt;/span&gt;&lt;span&gt;string&lt;/span&gt; url = GetNormalUrl(action) + &lt;span&gt;string&lt;/span&gt;.Format(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;?token={0}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, token);
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; postData = &lt;span&gt;new&lt;/span&gt;&lt;span&gt;
            {
                page &lt;/span&gt;=&lt;span&gt; pagerInfo.CurrenetPageIndex,
                pagesize &lt;/span&gt;=&lt;span&gt; pagerInfo.PageSize,
                brand_id &lt;/span&gt;=&lt;span&gt; brand_id,
                factcode &lt;/span&gt;=&lt;span&gt; factcode,
                start_time &lt;/span&gt;=&lt;span&gt; start_time,
                end_time &lt;/span&gt;=&lt;span&gt; end_time,
            }.ToJson();

            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; result = JsonHelper&amp;lt;TagOrderAsnResult&amp;gt;&lt;span&gt;.ConvertJson(url, postData);
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; result;
        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;page_title&quot;&gt;获取标签发货通知单批量&lt;/h3&gt;
&lt;p&gt; 的Web API接口如下代码定义&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 获取标签发货通知单批量
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;param&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;token&quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
&lt;span&gt;        [HttpPost]
        &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; TagOrderAsnResult TagOrderAsn(JObject param, &lt;span&gt;string&lt;/span&gt;&lt;span&gt; token)
        {
            TagOrderAsnResult result &lt;/span&gt;= &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;dynamic&lt;/span&gt; obj =&lt;span&gt; param;
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (obj != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
            {
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;使用POST方式&lt;/span&gt;
                &lt;span&gt;var&lt;/span&gt; postData =&lt;span&gt; param.ToJson();
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; queryUrl = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;https://***.***.***/api/v6/rfid/tag/tag_order_asn/get&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
                                
                &lt;span&gt;var&lt;/span&gt; helper = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; HttpHelper();
                helper.ContentType &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;application/json&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
                helper.Header.Add(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;token&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, token); 
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; content = helper.GetHtml(queryUrl, postData, &lt;span&gt;true&lt;/span&gt;&lt;span&gt;);

                RFIDBaseData&lt;/span&gt;&amp;lt;TagOrderAsnResult&amp;gt; jsonResult = JsonConvert.DeserializeObject&amp;lt;RFIDBaseData&amp;lt;TagOrderAsnResult&amp;gt;&amp;gt;&lt;span&gt;(content);
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (jsonResult != &lt;span&gt;null&lt;/span&gt; &amp;amp;&amp;amp; jsonResult.code == &lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
                {
                    result &lt;/span&gt;=&lt;span&gt; jsonResult.data;
                }

                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; result;
            }
            &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;
            {
                &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; MyApiException(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;传递参数错误&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;其中表头信息，我们通过下面的代码指定，设置特殊的token表头信息&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
                &lt;span&gt;var&lt;/span&gt; helper = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; HttpHelper();
                helper.ContentType &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;application/json&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
                helper.Header.Add(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;token&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, token); 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;而在客户端的调用窗体里面，我们调用对应的接口就可以获取该接口的数据了。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
        &lt;span&gt;private&lt;/span&gt;&lt;span&gt; TagOrderAsnResult asnResult;
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 根据参数获取标签生产订单批量信息
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
        &lt;span&gt;private&lt;/span&gt;&lt;span&gt; TagOrderAsnResult GetResult()
        {
            PagerInfo pagerInfo &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; PagerInfo() { PageSize = &lt;span&gt;50&lt;/span&gt;, CurrenetPageIndex = &lt;span&gt;1&lt;/span&gt; };&lt;span&gt;//&lt;/span&gt;&lt;span&gt;初始化一个分页条件&lt;/span&gt;
            &lt;span&gt;var&lt;/span&gt; brand_id = &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.txtbrand_id.Text.ToInt32();
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; factcode = &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.txtfactcode.Text;
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; start_time = &lt;span&gt;this&lt;/span&gt;.txtstart_time.DateTime.ToString(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;yyyy-MM-dd HH:mm:ss&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; end_time = &lt;span&gt;this&lt;/span&gt;.txtend_time.DateTime.ToString(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;yyyy-MM-dd HH:mm:ss&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);

            asnResult &lt;/span&gt;= CallerFactory&amp;lt;IRFIDService&amp;gt;&lt;span&gt;.Instance.TagOrderAsn(brand_id, factcode, start_time, end_time, pagerInfo, Token);
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; asnResult;
        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;通过上面的代码演示，我们了解了在混合框架基础上增加外部Web API接口的方法，通过增加Facade层接口，增加Web API接口，以及对应的客户端封装类，具体处理参数根据Web API接口的输入参数、输出数据等信息进行综合处理即可。&lt;/p&gt;
&lt;p&gt;最后我们来看看数据的展示界面。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/8867/201804/8867-20180402122328794-1053679925.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

</description>
<pubDate>Mon, 02 Apr 2018 04:24:00 +0000</pubDate>
<dc:creator>伍华聪</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/wuhuacong/p/8691008.html</dc:identifier>
</item>
<item>
<title>注解就这么简单 - Java3y</title>
<link>http://www.cnblogs.com/Java3y/p/8692333.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/Java3y/p/8692333.html</guid>
<description>&lt;p&gt;今天要讲的是注解，对于本章节，最好是有Servlet基础的人查阅～因为单纯是Java基础的话，可能用不上注解这个东西。但如果开发过Servlet，就对&lt;code&gt;@WebServlet&lt;/code&gt;不会陌生。&lt;/p&gt;
&lt;p&gt;现在的开发都推崇使用注解来进行开发，这样就可以免去写XML配置了，十分方便的一项技术～&lt;/p&gt;
&lt;p&gt;学习注解可以更好地理解注解是怎么工作的，看见注解了就可以想到它的运行原理了～。&lt;/p&gt;
&lt;p&gt;如果有错的地方请大家多多包涵并欢迎在评论区指正～&lt;/p&gt;

&lt;p&gt;注解：Annotation....&lt;/p&gt;
&lt;p&gt;注解其实就是&lt;strong&gt;代码中的特殊标记&lt;/strong&gt;，这些标记可以&lt;strong&gt;在编译、类加载、运行时被读取，并执行相对应的处理&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;传统的方式，我们是通过&lt;strong&gt;配置文件(xml文件)来告诉类是如何运行的&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;有了注解技术以后，我们就可以&lt;strong&gt;通过注解告诉类如何运行&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;例如：我们以前编写Servlet的时候，需要在web.xml文件配置具体的信息&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2018/4/2/1628480749bc6b13?w=654&amp;amp;h=217&amp;amp;f=png&amp;amp;s=18680&quot; alt=&quot;这里写图片描述&quot;/&gt;&lt;/p&gt;
&lt;p&gt;我们使用了注解以后，可以直接在Servlet源代码上，增加注解...Servlet就被配置到Tomcat上了。也就是说，&lt;strong&gt;注解可以给类、方法上注入信息。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2018/4/2/1628480749cdc0fa?w=781&amp;amp;h=53&amp;amp;f=png&amp;amp;s=10476&quot; alt=&quot;这里写图片描述&quot;/&gt;&lt;/p&gt;
&lt;p&gt;明显地可以看出，这样是非常直观的，并且&lt;strong&gt;Servlet规范是推崇这种配置方式的&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;在java.lang包下存在着5个基本的Annotation，其中有3个Annotation我们是非常常见的了。&lt;/p&gt;
&lt;h2 id=&quot;overried&quot;&gt;3.1&lt;code&gt;@Overried&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;重写注解&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果我们使用IDE重写父类的方法，我们就可以看见它了。那它有什么用呢？？&lt;/p&gt;
&lt;p&gt;&lt;code&gt;@Overried&lt;/code&gt;是告诉编译器要检查&lt;strong&gt;该方法是实现父类的&lt;/strong&gt;...可以帮我们避免一些低级的错误...&lt;/p&gt;
&lt;p&gt;比如，我们在实现equals()方法的时候，把euqals()打错了，那么&lt;strong&gt;编译器就会发现该方法并不是实现父类的，与注解&lt;code&gt;@Overried&lt;/code&gt;冲突，于是就会给予错误&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2018/4/2/162848074a4eaa1d?w=557&amp;amp;h=146&amp;amp;f=png&amp;amp;s=13671&quot; alt=&quot;这里写图片描述&quot;/&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;h2 id=&quot;deprecated&quot;&gt;3.2&lt;code&gt;@Deprecated&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;过时注解&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;该注解也非常常见，Java在设计的时候，可能觉得某些方法设计得不好，&lt;strong&gt;为了兼容以前的程序，是不能直接把它抛弃的，于是就设置它为过时&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;Date对象中的toLocalString()就被设置成过时了&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;    &lt;span class=&quot;fu&quot;&gt;@Deprecated&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;fu&quot;&gt;toLocaleString&lt;/span&gt;() {
        DateFormat formatter = DateFormat.&lt;span class=&quot;fu&quot;&gt;getDateTimeInstance&lt;/span&gt;();
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; formatter&lt;span class=&quot;fu&quot;&gt;.format&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;);
    }&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;当我们在程序中调用它的时候，在IDE上会出现一条横杠，说明该方法是过时的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2018/4/2/162848074a644b02?w=347&amp;amp;h=96&amp;amp;f=png&amp;amp;s=7800&quot; alt=&quot;这里写图片描述&quot;/&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;h2 id=&quot;suppresswarnings&quot;&gt;3.3&lt;code&gt;@SuppressWarnings&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;抑制编译器警告注解&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;该注解在我们写程序的时候并不是很常见，我们可以用它来&lt;strong&gt;让编译器不给予我们警告&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;当我们在使用集合的时候，如果没有指定泛型，那么会提示安全检查的警告&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2018/4/2/162848074bd4fae7?w=799&amp;amp;h=377&amp;amp;f=png&amp;amp;s=21143&quot; alt=&quot;这里写图片描述&quot;/&gt;&lt;/p&gt;
&lt;p&gt;如果我们在类上添加了&lt;code&gt;@SuppressWarnings&lt;/code&gt;这个注解，那么编译器就不会给予我们警告了&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2018/4/2/162848074bfec8a7?w=661&amp;amp;h=281&amp;amp;f=png&amp;amp;s=16871&quot; alt=&quot;这里写图片描述&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;safevarargs&quot;&gt;3.4&lt;code&gt;@SafeVarargs&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Java 7“堆污染”警告&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;什么是堆污染呢？？&lt;strong&gt;当把一个不是泛型的集合赋值给一个带泛型的集合的时候&lt;/strong&gt;，这种情况就很容易发生堆污染....&lt;/p&gt;
&lt;p&gt;这个注解也是用来抑制编译器警告的注解...用的地方并不多，我也不详细说明了......有用到的时候再回来填坑吧。&lt;/p&gt;
&lt;h2 id=&quot;functionalinterface&quot;&gt;3.5&lt;code&gt;@FunctionalInterface&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;@FunctionalInterface&lt;/code&gt;用来指定该接口是函数式接口&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;用该注解&lt;strong&gt;显示指定&lt;/strong&gt;该接口是一个函数式接口。&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;上面讲解的是java.lang包下的5个注解，&lt;strong&gt;我们是可以自己来写注解，给方法或类注入信息&lt;/strong&gt;。&lt;/p&gt;
&lt;h2 id=&quot;标记annotation&quot;&gt;4.1标记Annotation&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;没有任何成员变量的注解称作为标记注解，&lt;code&gt;@Overried&lt;/code&gt;就是一个标记注解&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;
&lt;span class=&quot;co&quot;&gt;//有点像定义一个接口一样，只不过它多了一个@&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;@interface&lt;/span&gt; MyAnnotation {
    
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;元数据annotation&quot;&gt;4.2元数据Annotation&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;我们自定义的注解是可以带成员变量的，定义带成员变量的注解叫做元数据Annotation&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在注解中定义成员变量，&lt;strong&gt;语法类似于声明方法一样&lt;/strong&gt;....&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;
&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;@interface&lt;/span&gt; MyAnnotation {

    &lt;span class=&quot;co&quot;&gt;//定义了两个成员变量&lt;/span&gt;
    String &lt;span class=&quot;fu&quot;&gt;username&lt;/span&gt;();
    &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;age&lt;/span&gt;();
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注意：在注解上&lt;strong&gt;定义的成员变量只能是String、数组、Class、枚举类、注解&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;有的人可能会奇怪，为什么注解上还要定义注解成员变量？？听起来就很复杂了....&lt;/p&gt;
&lt;p&gt;上边已经说了，注解的作用就是给类、方法注入信息。那么我们经常使用XML文件，告诉程序怎么运行。&lt;strong&gt;XML经常会有嵌套的情况&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode xml&quot;&gt;
&lt;code class=&quot;sourceCode xml&quot;&gt;
&lt;span class=&quot;er&quot;&gt;&amp;lt;&lt;/span&gt;书&amp;gt;
    &lt;span class=&quot;er&quot;&gt;&amp;lt;&lt;/span&gt;作者&amp;gt;zhongfucheng&lt;span class=&quot;er&quot;&gt;&amp;lt;&lt;/span&gt;/作者&amp;gt;
    &lt;span class=&quot;er&quot;&gt;&amp;lt;&lt;/span&gt;价钱&amp;gt;22222&lt;span class=&quot;er&quot;&gt;&amp;lt;&lt;/span&gt;/价钱&amp;gt;

&lt;span class=&quot;er&quot;&gt;&amp;lt;&lt;/span&gt;/书&amp;gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;那么，当我们在使用注解的时候，也可能需要有嵌套的时候，所以就&lt;strong&gt;允许了注解上可以定义成员变量为注解。&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;使用自定义注解&quot;&gt;4.3使用自定义注解&lt;/h2&gt;
&lt;p&gt;上面我们已经定义了一个注解了，下面我们来使用它吧&lt;/p&gt;
&lt;h3 id=&quot;常规使用&quot;&gt;4.3.1常规使用&lt;/h3&gt;
&lt;p&gt;下面我有一个add的方法，需要username和age参数，我们&lt;strong&gt;通过注解来让该方法拥有这两个变量&lt;/strong&gt;！&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;
    &lt;span class=&quot;co&quot;&gt;//注解拥有什么属性，在修饰的时候就要给出相对应的值&lt;/span&gt;
    &lt;span class=&quot;fu&quot;&gt;@MyAnnotation&lt;/span&gt;(username = &lt;span class=&quot;st&quot;&gt;&quot;zhongfucheng&quot;&lt;/span&gt;, age = &lt;span class=&quot;dv&quot;&gt;20&lt;/span&gt;)
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;add&lt;/span&gt;(String username, &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; age) {

    }&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;hr/&gt;&lt;h3 id=&quot;默认值&quot;&gt;4.3.2默认值&lt;/h3&gt;
&lt;p&gt;当然啦，我们可以在&lt;strong&gt;注解声明属性的时候，给出默认值&lt;/strong&gt;。那么在修饰的时候，就可以不用具体指定了。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;
&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;@interface&lt;/span&gt; MyAnnotation {

    &lt;span class=&quot;co&quot;&gt;//定义了两个成员变量&lt;/span&gt;
    String &lt;span class=&quot;fu&quot;&gt;username&lt;/span&gt;() &lt;span class=&quot;kw&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;zicheng&quot;&lt;/span&gt;;
    &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;age&lt;/span&gt;() &lt;span class=&quot;kw&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;23&lt;/span&gt;;
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;在修饰的时候就不需要给出具体的值了&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;
    &lt;span class=&quot;fu&quot;&gt;@MyAnnotation&lt;/span&gt;()
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;add&lt;/span&gt;(String username, &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; age) {

    }&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;hr/&gt;&lt;h3 id=&quot;注解属性为value&quot;&gt;4.3.3注解属性为value&lt;/h3&gt;
&lt;p&gt;还有一种特殊的情况，如果&lt;strong&gt;注解上只有一个属性，并且属性的名称为value&lt;/strong&gt;，那么在使用的时候，我们&lt;strong&gt;可以不写value，直接赋值给它就行&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;
&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;@interface&lt;/span&gt; MyAnnotation2 {

    String &lt;span class=&quot;fu&quot;&gt;value&lt;/span&gt;();
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;使用注解，可以&lt;strong&gt;不指定value，直接赋值&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;
    &lt;span class=&quot;fu&quot;&gt;@MyAnnotation2&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;zhongfucheng&quot;&lt;/span&gt;)
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;find&lt;/span&gt;(String id) {
        
    }&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;hr/&gt;&lt;h2 id=&quot;把自定义注解的基本信息注入到方法上&quot;&gt;4.4把自定义注解的基本信息注入到方法上&lt;/h2&gt;
&lt;p&gt;上面我们已经使用到了注解，但是目前为止&lt;strong&gt;注解上的信息和方法上的信息是没有任何关联的&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;我们使用Servlet注解的时候，仅仅调用注解，那么注解的就生效了。这是&lt;strong&gt;Web容器把内部实现了&lt;/strong&gt;。我们&lt;strong&gt;自己写的自定义注解是需要我们自己来处理的&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;那现在问题来了，我们怎么把注解上的信息注入到方法上呢？？？我们&lt;strong&gt;利用的是反射技术&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;步骤可分为三部：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;反射出该类的方法&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;通过方法得到注解上具体的信息&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;将注解上的信息注入到方法上&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;14&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;
        &lt;span class=&quot;co&quot;&gt;//反射出该类的方法&lt;/span&gt;
        Class aClass = Demo2.&lt;span class=&quot;fu&quot;&gt;class&lt;/span&gt;;
        Method method = aClass.&lt;span class=&quot;fu&quot;&gt;getMethod&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;add&quot;&lt;/span&gt;, String.&lt;span class=&quot;fu&quot;&gt;class&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;class&lt;/span&gt;);

        &lt;span class=&quot;co&quot;&gt;//通过该方法得到注解上的具体信息&lt;/span&gt;
        MyAnnotation annotation = method.&lt;span class=&quot;fu&quot;&gt;getAnnotation&lt;/span&gt;(MyAnnotation.&lt;span class=&quot;fu&quot;&gt;class&lt;/span&gt;);
        String username = annotation.&lt;span class=&quot;fu&quot;&gt;username&lt;/span&gt;();
        &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; age = annotation.&lt;span class=&quot;fu&quot;&gt;age&lt;/span&gt;();

        &lt;span class=&quot;co&quot;&gt;//将注解上的信息注入到方法上&lt;/span&gt;
        Object o = aClass.&lt;span class=&quot;fu&quot;&gt;newInstance&lt;/span&gt;();
        method.&lt;span class=&quot;fu&quot;&gt;invoke&lt;/span&gt;(o, username, age);&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;当我们执行的时候，我们发现会出现异常...&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2018/4/2/1628480774611ef2?w=1421&amp;amp;h=667&amp;amp;f=png&amp;amp;s=79995&quot; alt=&quot;这里写图片描述&quot;/&gt;&lt;/p&gt;
&lt;p&gt;此时，我们需要在自定义注解上加入这样一句代码&lt;strong&gt;(下面就会讲到，为什么要加入这句代码)&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;
    &lt;span class=&quot;fu&quot;&gt;@Retention&lt;/span&gt;(RetentionPolicy.&lt;span class=&quot;fu&quot;&gt;RUNTIME&lt;/span&gt;)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;再次执行的时候，我们就会发现，可以通过注解来把信息注入到方法中了。&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;前面我们已经介绍了java.lang包下的几个基本Annotation了。在JDK中除了java.lang包下有Annotation，&lt;strong&gt;在java.lang.annotation下也有几个常用的元Annotation。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在annotation包下的好几个元Annotation都是&lt;strong&gt;用于修饰其他的Annotation定义&lt;/strong&gt;。&lt;/p&gt;
&lt;hr/&gt;&lt;h3 id=&quot;retention&quot;&gt;5.1&lt;code&gt;@Retention&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;上面在将注解信息注入到方法中的时候，我们&lt;strong&gt;最后加上了&lt;code&gt;@Retention&lt;/code&gt;的注解....不然就会报错了&lt;/strong&gt;..那它是干什么用的呢？&lt;/p&gt;
&lt;p&gt;&lt;code&gt;@Retention&lt;/code&gt;只能用于修饰其他的Annotation，&lt;strong&gt;用于指定被修饰的Annotation被保留多长时间。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;@Retention&lt;/code&gt;&lt;strong&gt;包含了一个RetentionPolicy类型的value变量&lt;/strong&gt;，所以在使用它的时候，&lt;strong&gt;必须要为value成员变量赋值&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;value变量的值只有三个：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;13&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;
&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;enum&lt;/span&gt; RetentionPolicy {
    &lt;span class=&quot;co&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     * Annotations are to be discarded by the compiler.&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     */&lt;/span&gt;
    SOURCE,

    &lt;span class=&quot;co&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     * Annotations are to be recorded in the class file by the compiler&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     * but need not be retained by the VM at run time.  This is the default&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     * behavior.&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     */&lt;/span&gt;
    CLASS,

    &lt;span class=&quot;co&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     * Annotations are to be recorded in the class file by the compiler and&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     * retained by the VM at run time, so they may be read reflectively.&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     *&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     * &lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;@see java.lang.reflect.AnnotatedElement&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;     */&lt;/span&gt;
    RUNTIME
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;java文件有三个时期：&lt;strong&gt;编译,class,运行。@Retention默认是class&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;前面我们是使用反射来得到注解上的信息的，&lt;a href=&quot;mailto:**因为@retention默认是class&quot;&gt;**因为@Retention默认是class&lt;/a&gt;，而反射是在运行时期来获取信息的**。因此就获取不到Annotation的信息了。于是，就得在自定义注解上修改它的RetentionPolicy值&lt;/p&gt;
&lt;hr/&gt;&lt;h3 id=&quot;target&quot;&gt;5.2&lt;code&gt;@Target&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;@Target&lt;/code&gt;也是&lt;strong&gt;只能用于修饰另外的Annotation&lt;/strong&gt;，&lt;strong&gt;它用于指定被修饰的Annotation用于修饰哪些程序单元&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;@Target&lt;/code&gt;是只有一个value成员变量的，该成员变量的值是以下的：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;19&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;
&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;enum&lt;/span&gt; ElementType {
    &lt;span class=&quot;co&quot;&gt;/** Class, interface (including annotation type), or enum declaration */&lt;/span&gt;
    TYPE,

    &lt;span class=&quot;co&quot;&gt;/** Field declaration (includes enum constants) */&lt;/span&gt;
    FIELD,

    &lt;span class=&quot;co&quot;&gt;/** Method declaration */&lt;/span&gt;
    METHOD,

    &lt;span class=&quot;co&quot;&gt;/** Parameter declaration */&lt;/span&gt;
    PARAMETER,

    &lt;span class=&quot;co&quot;&gt;/** Constructor declaration */&lt;/span&gt;
    CONSTRUCTOR,

    &lt;span class=&quot;co&quot;&gt;/** Local variable declaration */&lt;/span&gt;
    LOCAL_VARIABLE,

    &lt;span class=&quot;co&quot;&gt;/** Annotation type declaration */&lt;/span&gt;
    ANNOTATION_TYPE,

    &lt;span class=&quot;co&quot;&gt;/** Package declaration */&lt;/span&gt;
    PACKAGE
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果&lt;code&gt;@Target&lt;/code&gt;指定的是ElementType.ANNOTATION_TYPE，那么&lt;strong&gt;该被修饰的Annotation只能修饰Annotaion&lt;/strong&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;h3 id=&quot;documented&quot;&gt;5.3&lt;code&gt;@Documented&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;@Documented&lt;/code&gt;用于指定&lt;strong&gt;被该Annotation修饰的Annotation类将被javadoc工具提取成文档&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;该元Annotation用得挺少的....&lt;/p&gt;
&lt;hr/&gt;&lt;h3 id=&quot;inherited&quot;&gt;5.4&lt;code&gt;@Inherited&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;@Inherited&lt;/code&gt;也是用来修饰其他的Annotation的，被修饰过的Annotation将具有继承性。。。&lt;/p&gt;
&lt;p&gt;例子：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;&lt;code&gt;@xxx&lt;/code&gt;是我自定义的注解，我现在使用&lt;code&gt;@xxx&lt;/code&gt;注解在Base类上使用....&lt;/li&gt;
&lt;li&gt;使用&lt;code&gt;@Inherited修饰@xxx注解&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;当有类继承了Base类的时候，该实现类自动拥有&lt;code&gt;@xxx&lt;/code&gt;注解&lt;/li&gt;
&lt;/ol&gt;&lt;hr/&gt;
&lt;h2 id=&quot;把对象注入到方法上&quot;&gt;6.1把对象注入到方法上&lt;/h2&gt;
&lt;p&gt;前面我们已经可以使用注解将基本的信息注入到方法上了，现在我们要使用的是&lt;strong&gt;将对象注入到方法上&lt;/strong&gt;.....&lt;/p&gt;
&lt;p&gt;上边已经说过了，注解上只能定义String、枚举类、Double之类的成员变量，那怎么把对象注入到方法上呢？&lt;/p&gt;
&lt;h3 id=&quot;模拟场景&quot;&gt;6.1.2模拟场景：&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;Person类，定义username和age属性，拥有uername和age的getter和setter方法&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;
&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; Person {
    
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; String username;
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; age;

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;fu&quot;&gt;getUsername&lt;/span&gt;() {
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; username;
    }

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;setUsername&lt;/span&gt;(String username) {
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;username&lt;/span&gt; = username;
    }

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;getAge&lt;/span&gt;() {
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; age;
    }

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;setAge&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; age) {
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;age&lt;/span&gt; = age;
    }
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;PersonDao类，PersonDao类定义了Person对象，拥有person的setter和getter方法&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;
&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; PersonDao {
    
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; Person person;

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; Person &lt;span class=&quot;fu&quot;&gt;getPerson&lt;/span&gt;() {
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; person;
    }

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;setPerson&lt;/span&gt;(Person person) {
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;person&lt;/span&gt; = person;
    }
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;现在我要做的就是：&lt;strong&gt;使用注解将Person对象注入到setPerson()方法中，从而设置了PersonDao类的person属性&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;
&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; PersonDao {

    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; Person person;

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; Person &lt;span class=&quot;fu&quot;&gt;getPerson&lt;/span&gt;() {
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; person;
    }


    &lt;span class=&quot;co&quot;&gt;//将username为zhongfucheng，age为20的Person对象注入到setPerson方法中&lt;/span&gt;
    &lt;span class=&quot;fu&quot;&gt;@InjectPerson&lt;/span&gt;(username = &lt;span class=&quot;st&quot;&gt;&quot;zhongfucheng&quot;&lt;/span&gt;,age = &lt;span class=&quot;dv&quot;&gt;20&lt;/span&gt;)
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;setPerson&lt;/span&gt;(Person person) {
        
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;person&lt;/span&gt; = person;
    }
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;hr/&gt;&lt;p&gt;&lt;strong&gt;步骤：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;①： 自定义一个注解，属性是和JavaBean类一致的&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;
&lt;span class=&quot;co&quot;&gt;//注入工具是通过反射来得到注解的信息的，于是保留域必须使用RunTime&lt;/span&gt;
&lt;span class=&quot;fu&quot;&gt;@Retention&lt;/span&gt;(RetentionPolicy.&lt;span class=&quot;fu&quot;&gt;RUNTIME&lt;/span&gt;)
&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;@interface&lt;/span&gt; InjectPerson {

    String &lt;span class=&quot;fu&quot;&gt;username&lt;/span&gt;();
    &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;age&lt;/span&gt;();
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;②：编写注入工具&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;17&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;
        &lt;span class=&quot;co&quot;&gt;//1.使用内省【后边需要得到属性的写方法】，得到想要注入的属性&lt;/span&gt;
        PropertyDescriptor descriptor = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; PropertyDescriptor(&lt;span class=&quot;st&quot;&gt;&quot;person&quot;&lt;/span&gt;, PersonDao.&lt;span class=&quot;fu&quot;&gt;class&lt;/span&gt;);

        &lt;span class=&quot;co&quot;&gt;//2.得到要想注入属性的具体对象&lt;/span&gt;
        Person person = (Person) descriptor.&lt;span class=&quot;fu&quot;&gt;getPropertyType&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;newInstance&lt;/span&gt;();

        &lt;span class=&quot;co&quot;&gt;//3.得到该属性的写方法【setPerson()】&lt;/span&gt;
        Method method = descriptor.&lt;span class=&quot;fu&quot;&gt;getWriteMethod&lt;/span&gt;();

        &lt;span class=&quot;co&quot;&gt;//4.得到写方法的注解&lt;/span&gt;
        Annotation annotation = method.&lt;span class=&quot;fu&quot;&gt;getAnnotation&lt;/span&gt;(InjectPerson.&lt;span class=&quot;fu&quot;&gt;class&lt;/span&gt;);

        &lt;span class=&quot;co&quot;&gt;//5.得到注解上的信息【注解的成员变量就是用方法来定义的】&lt;/span&gt;
        Method[] methods = annotation.&lt;span class=&quot;fu&quot;&gt;getClass&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;getMethods&lt;/span&gt;();

        &lt;span class=&quot;co&quot;&gt;//6.将注解上的信息填充到person对象上&lt;/span&gt;

        &lt;span class=&quot;kw&quot;&gt;for&lt;/span&gt; (Method m : methods) {

            &lt;span class=&quot;co&quot;&gt;//得到注解上属性的名字【age或name】&lt;/span&gt;
            String name = m.&lt;span class=&quot;fu&quot;&gt;getName&lt;/span&gt;();

            &lt;span class=&quot;co&quot;&gt;//看看Person对象有没有与之对应的方法【setAge(),setName()】&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;try&lt;/span&gt; {

                &lt;span class=&quot;co&quot;&gt;//6.1这里假设：有与之对应的写方法，得到写方法&lt;/span&gt;
                PropertyDescriptor descriptor1 = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; PropertyDescriptor(name, Person.&lt;span class=&quot;fu&quot;&gt;class&lt;/span&gt;);
                Method method1 = descriptor1.&lt;span class=&quot;fu&quot;&gt;getWriteMethod&lt;/span&gt;();&lt;span class=&quot;co&quot;&gt;//setAge(), setName()&lt;/span&gt;

                &lt;span class=&quot;co&quot;&gt;//得到注解中的值&lt;/span&gt;
                Object o = m.&lt;span class=&quot;fu&quot;&gt;invoke&lt;/span&gt;(annotation, &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;);

                &lt;span class=&quot;co&quot;&gt;//调用Person对象的setter方法，将注解上的值设置进去&lt;/span&gt;
                method1.&lt;span class=&quot;fu&quot;&gt;invoke&lt;/span&gt;(person, o);

            } &lt;span class=&quot;kw&quot;&gt;catch&lt;/span&gt; (Exception e) {

                &lt;span class=&quot;co&quot;&gt;//6.2 Person对象没有与之对应的方法，会跳到catch来。我们要让它继续遍历注解就好了&lt;/span&gt;
                &lt;span class=&quot;kw&quot;&gt;continue&lt;/span&gt;;
            }
        }
        
        &lt;span class=&quot;co&quot;&gt;//当程序遍历完之后，person对象已经填充完数据了&lt;/span&gt;

        &lt;span class=&quot;co&quot;&gt;//7.将person对象赋给PersonDao【通过写方法】&lt;/span&gt;
        PersonDao personDao = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;PersonDao&lt;/span&gt;();
        method.&lt;span class=&quot;fu&quot;&gt;invoke&lt;/span&gt;(personDao, person);

        System.&lt;span class=&quot;fu&quot;&gt;out&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;println&lt;/span&gt;(personDao.&lt;span class=&quot;fu&quot;&gt;getPerson&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;getUsername&lt;/span&gt;());
        System.&lt;span class=&quot;fu&quot;&gt;out&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;println&lt;/span&gt;(personDao.&lt;span class=&quot;fu&quot;&gt;getPerson&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;getAge&lt;/span&gt;());
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;③：总结一下步骤&lt;/p&gt;
&lt;p&gt;其实我们是这样把对象注入到方法中的：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;得到想要类中注入的属性&lt;/li&gt;
&lt;li&gt;得到该属性的对象&lt;/li&gt;
&lt;li&gt;得到属性对应的写方法&lt;/li&gt;
&lt;li&gt;通过写方法得到注解&lt;/li&gt;
&lt;li&gt;获取注解详细的信息&lt;/li&gt;
&lt;li&gt;将注解的信息注入到对象上&lt;/li&gt;
&lt;li&gt;调用属性写方法，将已填充数据的对象注入到方法中&lt;/li&gt;
&lt;/ul&gt;&lt;hr/&gt;&lt;h2 id=&quot;把对象注入到成员变量&quot;&gt;6.2把对象注入到成员变量&lt;/h2&gt;
&lt;p&gt;上面已经说了如何将对象注入到方法上了，那么注入到成员变量上也是非常简单的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;步骤：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;①：&lt;strong&gt;在成员变量上使用注解&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;
&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; PersonDao {

    &lt;span class=&quot;fu&quot;&gt;@InjectPerson&lt;/span&gt;(username = &lt;span class=&quot;st&quot;&gt;&quot;zhongfucheng&quot;&lt;/span&gt;,age = &lt;span class=&quot;dv&quot;&gt;20&lt;/span&gt;) &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; Person person;

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; Person &lt;span class=&quot;fu&quot;&gt;getPerson&lt;/span&gt;() {
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; person;
    }
    
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;setPerson&lt;/span&gt;(Person person) {

        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;person&lt;/span&gt; = person;
    }
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;②：编写注入工具&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;14&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;
        &lt;span class=&quot;co&quot;&gt;//1.得到想要注入的属性&lt;/span&gt;
        Field field = PersonDao.&lt;span class=&quot;fu&quot;&gt;class&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;getDeclaredField&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;person&quot;&lt;/span&gt;);

        &lt;span class=&quot;co&quot;&gt;//2.得到属性的具体对象&lt;/span&gt;
        Person person = (Person) field.&lt;span class=&quot;fu&quot;&gt;getType&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;newInstance&lt;/span&gt;();

        &lt;span class=&quot;co&quot;&gt;//3.得到属性上的注解&lt;/span&gt;
        Annotation annotation = field.&lt;span class=&quot;fu&quot;&gt;getAnnotation&lt;/span&gt;(InjectPerson.&lt;span class=&quot;fu&quot;&gt;class&lt;/span&gt;);

        &lt;span class=&quot;co&quot;&gt;//4.得到注解的属性【注解上的属性使用方法来表示的】&lt;/span&gt;
        Method[] methods = annotation.&lt;span class=&quot;fu&quot;&gt;getClass&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;getMethods&lt;/span&gt;();

        &lt;span class=&quot;co&quot;&gt;//5.将注入的属性填充到person对象上&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;for&lt;/span&gt; (Method method : methods) {

            &lt;span class=&quot;co&quot;&gt;//5.1得到注解属性的名字&lt;/span&gt;
            String name = method.&lt;span class=&quot;fu&quot;&gt;getName&lt;/span&gt;();

            &lt;span class=&quot;co&quot;&gt;//查看一下Person对象上有没有与之对应的写方法&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;try&lt;/span&gt; {

                &lt;span class=&quot;co&quot;&gt;//如果有&lt;/span&gt;
                PropertyDescriptor descriptor = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; PropertyDescriptor(name, Person.&lt;span class=&quot;fu&quot;&gt;class&lt;/span&gt;);

                &lt;span class=&quot;co&quot;&gt;//得到Person对象上的写方法&lt;/span&gt;
                Method method1 = descriptor.&lt;span class=&quot;fu&quot;&gt;getWriteMethod&lt;/span&gt;();

                &lt;span class=&quot;co&quot;&gt;//得到注解上的值&lt;/span&gt;
                Object o = method.&lt;span class=&quot;fu&quot;&gt;invoke&lt;/span&gt;(annotation, &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;);

                &lt;span class=&quot;co&quot;&gt;//填充person对象&lt;/span&gt;
                method1.&lt;span class=&quot;fu&quot;&gt;invoke&lt;/span&gt;(person, o);
            } &lt;span class=&quot;kw&quot;&gt;catch&lt;/span&gt; (IntrospectionException e) {

                &lt;span class=&quot;co&quot;&gt;//如果没有想对应的属性，继续循环&lt;/span&gt;
                &lt;span class=&quot;kw&quot;&gt;continue&lt;/span&gt;;
            }
        }

        &lt;span class=&quot;co&quot;&gt;//循环完之后，person就已经填充好数据了&lt;/span&gt;


        &lt;span class=&quot;co&quot;&gt;//6.把person对象设置到PersonDao中&lt;/span&gt;
        PersonDao personDao = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;PersonDao&lt;/span&gt;();
        field.&lt;span class=&quot;fu&quot;&gt;setAccessible&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;true&lt;/span&gt;);
        field.&lt;span class=&quot;fu&quot;&gt;set&lt;/span&gt;(personDao, person);

        System.&lt;span class=&quot;fu&quot;&gt;out&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;println&lt;/span&gt;(personDao.&lt;span class=&quot;fu&quot;&gt;getPerson&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;getUsername&lt;/span&gt;());&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;①：注入对象的步骤：&lt;strong&gt;得到想要注入的对象属性，通过属性得到注解的信息，通过属性的写方法将注解的信息注入到对象上，最后将对象赋给类&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;②：注解其实就是两个作用：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;让编译器检查代码&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;将数据注入到方法、成员变量、类上&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;③:在JDK中注解分为了&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;基本Annotation
&lt;ul&gt;&lt;li&gt;在lang包下，用于常用于标记该方法，抑制编译器警告等&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;元Annotaion
&lt;ul&gt;&lt;li&gt;在annotaion包下，常用于修饰其他的Annotation定义&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2018/4/2/1628480776ad6482?w=200&amp;amp;h=200&amp;amp;f=jpeg&amp;amp;s=6529&quot;/&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;如果文章有错的地方欢迎指正，大家互相交流。习惯在微信看技术文章，想要获取更多的Java资源的同学，可以&lt;strong&gt;关注微信公众号:Java3y&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
<pubDate>Mon, 02 Apr 2018 04:06:00 +0000</pubDate>
<dc:creator>Java3y</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/Java3y/p/8692333.html</dc:identifier>
</item>
<item>
<title>巨人大哥谈Java中的Synchronized关键字用法 - 巨人大哥</title>
<link>http://www.cnblogs.com/jurendage/p/8691975.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/jurendage/p/8691975.html</guid>
<description>&lt;h4&gt;&lt;strong&gt;巨人大哥谈Java中的Synchronized关键字用法&lt;/strong&gt;&lt;/h4&gt;
&lt;h4&gt;认识synchronized&lt;/h4&gt;
&lt;p&gt;对于写多线程程序的人来说，经常碰到的就是并发问题，对于容易出现并发问题的地方加上synchronized修饰符基本上就搞定 了，如果说不考虑性能问题的话，这一招绝对能应对百分之九十以上的情况，若对于性能方面有要求的话就需要额外的知识比如读写锁等等。本文目的先了解透彻synchronized的基本原理。&lt;/p&gt;
&lt;h4&gt;Synchronized的基本使用&lt;/h4&gt;
&lt;p&gt;Synchronized的作用主要有三个： &lt;br/&gt;（1）确保线程互斥的访问同步代码 &lt;br/&gt;（2）保证共享变量的修改能够及时可见 &lt;br/&gt;（3）有效解决重排序问题。 &lt;br/&gt;从语法上讲，Synchronized总共有三种用法： &lt;br/&gt;　     （1）修饰普通方法 &lt;br/&gt;　 　 （2）修饰静态方法 &lt;br/&gt;　 　 （3）修饰代码块 &lt;br/&gt;　　&lt;/p&gt;
&lt;p&gt;&lt;span&gt;package com.paddx.test.concurrent;&lt;br/&gt;&lt;span&gt;public &lt;span&gt;&lt;span&gt;class &lt;span&gt;SynchronizedDemo {&lt;br/&gt;   &lt;span&gt;&lt;span&gt;public &lt;span&gt;void &lt;span&gt;method&lt;span&gt;() {&lt;br/&gt;       &lt;span&gt;synchronized (&lt;span&gt;this) {&lt;br/&gt;           System.out.println(&lt;span&gt;&quot;Method 1 start&quot;);&lt;br/&gt;       }&lt;br/&gt;   }&lt;br/&gt;}&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;对于上述方法我们很容易就知道是线程安全的，具体是怎么做的到的线程安全呢，对class通过javap编译结果如下：&lt;/p&gt;
&lt;h3&gt;monitorenter&lt;/h3&gt;
&lt;p&gt;每个对象有一个监视器锁（monitor）。当monitor被占用时就会处于锁定状态，线程执行monitorenter指令时尝试获取monitor的所有权，过程如下：&lt;/p&gt;
&lt;p&gt;1、如果monitor的进入数为0，则该线程进入monitor，然后将进入数设置为1，该线程即为monitor的所有者。&lt;/p&gt;
&lt;p&gt;2、如果线程已经占有该monitor，只是重新进入，则进入monitor的进入数加1.&lt;/p&gt;
&lt;p&gt;3.如果其他线程已经占用了monitor，则该线程进入阻塞状态，直到monitor的进入数为0，再重新尝试获取monitor的所有权。&lt;/p&gt;
&lt;h3&gt;monitorexit&lt;/h3&gt;
&lt;p&gt;执行monitorexit的线程必须是objectref所对应的monitor的所有者。&lt;/p&gt;
&lt;p&gt;指令执行时，monitor的进入数减1，如果减1后进入数为0，那线程退出monitor，不再是这个monitor的所有者。其他被这个monitor阻塞的线程可以尝试去获取这个 monitor 的所有权。 &lt;br/&gt;　　通过这两段描述，我们应该能很清楚的看出Synchronized的实现原理，Synchronized的语义底层是通过一个monitor的对象来完成，其实wait/notify等方法也依赖于monitor对象，这就是为什么只有在同步的块或者方法中才能调用wait/notify等方法，否则会抛出java.lang.IllegalMonitorStateException的异常的原因。&lt;/p&gt;
&lt;h3&gt;原理总结&lt;/h3&gt;
&lt;p&gt;每个对象都有一个内部的锁或者叫做是监视器，称之为monitor，当一个方法加上synchronized关键字的时候，如果一个线程想执行这个方法那么首先需要获取这个对象的monirot权限，对应到指令上面也就是需要获取monitorenter 指令，如果一个对象获取到这个指令之后，那么monitor的进入数为1，当其他线程再次获取的时候发现这个对象的monitor对象被别的线程所占用，那么进入阻塞状态，知道占用这个对象的线程执行monitorexit,设置进入数为0为止。&lt;/p&gt;
&lt;p&gt;如果synchronized加在普通方法上，那么有效的范围是多个线程执行同一个对象的方法。通过上面的解释应该比较容易理解了，因为不同的对象获取的是不同的monitor监视器，自然也就不存在占用–等待的过程了。如果是加载static方法上那么需要获取的就是这个对象所在class的Class对象，所以此时不管是几个对象，对应的都是同一个class对象，也就是说多个线程又存在对同一个monitor的占用—等待的过程了。所以说加载static上是对于整个类文件有效。&lt;/p&gt;
</description>
<pubDate>Mon, 02 Apr 2018 03:43:00 +0000</pubDate>
<dc:creator>巨人大哥</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/jurendage/p/8691975.html</dc:identifier>
</item>
</channel>
</rss>