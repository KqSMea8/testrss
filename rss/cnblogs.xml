<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>我从.net转别的语言的遭遇，现在貌似又要回头（一） - 精密～顽石</title>
<link>http://www.cnblogs.com/zlfucku/p/7658961.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/zlfucku/p/7658961.html</guid>
<description>&lt;p&gt;         从2016年开始，作为公司最后的一个.net部门，被迫转向了php。&lt;/p&gt;
&lt;p&gt;         php里面装得一手什么逼呢？&lt;/p&gt;
&lt;p&gt;          首先，你要来几本入门的书，linux，mysql，php基础语法，nginx或apache。哥那时候刚有小孩不久。有小孩不久是什么概念？小宝宝半夜哭呀，没有什么睡眠，每天公司上手项目，自己还回家看书，很勤奋的好不。可是依然，被比自己年轻几岁的，拥有3-5年的php经验的小伙子领导说慢、鄙视，看不起你们这些.net。社会就是这么的残酷，不管你家里发生了什么大事，你在工作上不能怠慢。可这真真是一个很难的时期好吗？我当时的压力很大，面临学习新东西，家里还不能好好睡觉，接近崩溃。&lt;/p&gt;
&lt;p&gt;          其次，php的逼在于，一堆牛人开发了很多免费的东西必须跑在linux上，且发展有一定岁月了。其实php有什么？和我当时弄的asp，没啥差别。差别在于牛人的想法就是老子就不想在windows上跑这些代码，写的工具只支持linux，或者在windows上跑不出那效果，如redis之流。&lt;/p&gt;
&lt;p&gt;          后面，你可能要上手一些php框架了，什么Laravel, yii之类，这些在刻意模仿着面向对象语言的做法。看到这些框架，然后php本身是个脚本语言，有点勉为其难。特别你如果看下yii，你会发现和.net mvc 惊人的相似。然后php的那些人还说，你们不要老用.net的思想来思考问题，尼玛你们用的这个思想和.net有毛差别？我只能压住心中的怒火，我刚生小孩不久，要养家，不能任性。&lt;/p&gt;
&lt;p&gt;         php最大的逼，在于linux，很多吃饱了撑的c/c++程序员，写了很多巨屌的东西。php只是他们的一个应用层，我就是这么理解的。&lt;/p&gt;
&lt;p&gt;         国内最大php应用，微博，其余我就不知道了，中小型公司，php 貌似他妈的比.net还多，用.net的公司，妈的比php还少，好可悲呀。&lt;/p&gt;
&lt;p&gt;         finally，我还是没忍住，在小领导日夜反复说我慢的情况下，我终于爆发了一句，你行你上。然后没过多久，公司每年了例行淘汰中，就淘汰了我，虽然我在这家公司是比他要老的员工。但是人家就是5年php ,来公司就吃香的很，公司毫不留情的把我给赶走了。想想，很心酸，这家公司起家靠的就是.net，这么多年，赚钱打下江山的也是.net，如今全部切成别的，我这种不是来很多年的员工，被无情赶走。资本家是不管你什么技术的，对于他有利的技术就行。.net，呵呵。&lt;/p&gt;
&lt;p&gt;        因为临近过年了，这时候把我开了，找工作不好找。各公司都管自己的年会去了，无心招人，但是我有小孩，我还要为生计，怎么办？还搞.net？又好像很久没开过宇宙无敌ide vs 了。找php?好像经验又不是那么足。你这时候要养家，要保证有一定收入，但是你初级，社会上公司又可能不会给那么多，好他妈尴尬呀。.net就这死样，市场用的公司不多，即使用的，给的价也不高。但是你这时候去找php，估计更低。怎么办呢？&lt;/p&gt;
&lt;p&gt;        鬼使神差，一个外包的hr找了我，看到我简历上有个js，就叫我去面试了，前端。&lt;/p&gt;
&lt;p&gt;       还他妈面试官打瞌睡，就让我过了。&lt;/p&gt;
&lt;p&gt;       这下开启了我的全职前端生涯。前端现在怎么这么火呢？我原来很看不起前端的，这他妈也叫编程？也叫写代码？不过外包给的工资就是他妈的猛，一下是我做 .net的翻倍。我都怀疑了人生好几天。我在纠结什么？我原来死死的抓着.net不放干什么？&lt;/p&gt;
&lt;p&gt;       前端的逼，在于这几年前端的各大框架迅猛发展，React,Angular,Vue，github 近些年，最多的开源项目就是js。再借着手机端大家比较统一的支持html5 +css3，使得前端需求旺盛。es5语法糖，nodejs，可以结合docker，搞病毒复制般的n个服务器，简直是百花齐放。前端的东西，如果没用那三大框架，组件化的话，会很多重复代码。且css,js,html无法完美做成组件。前端弄了一阵子觉得好像真没太大意思，一天到晚就是和点浏览器打交道，f12一下，定下位，写点css。后端的是Java，屌得很一个，跟他们配合，只感受到Java那群人内心的优越感，酱油感。&lt;/p&gt;
&lt;p&gt;      完了今晚看样子写不完了，未完待续。。。。&lt;/p&gt;
</description>
<pubDate>Thu, 12 Oct 2017 15:40:00 +0000</pubDate>
<dc:creator>精密～顽石</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/zlfucku/p/7658961.html</dc:identifier>
</item>
<item>
<title>Nginx平滑升级源码分析 - magicsoar</title>
<link>http://www.cnblogs.com/magicsoar/p/7658939.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/magicsoar/p/7658939.html</guid>
<description>&lt;p&gt;&lt;span&gt;&lt;strong&gt;一、平滑升级步骤&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;1、重命名之前的sbin/nginx文件，将新的nginx文件放到sbin/目录下&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;#mv ./sbin/nginx ./sbin/nginx.old&lt;/p&gt;
&lt;p&gt;#cp ~/nginx ./sbin/&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;2、向正在运行的nginx发送USR2信号启动新的nginx，这个时候新老nginx都会接收请求，看那一个进程能抢到锁，抢到锁的worker进程可以accpet新请求&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;#kill -USR2  `cat nginx.pid`&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;3、观察新的nginx运行无误后，向旧nginx发信号 停止旧nginx的运行&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;#kill -QUIT `cat nginx.pid.oldbin`&lt;/p&gt;


&lt;p&gt;&lt;span&gt;&lt;strong&gt;二、源码分析&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;1，nginx启动时 设置信号监听函数，监听信号&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;src/core/nginx.c  &lt;/p&gt;
&lt;p&gt;&lt;img title=&quot;NewImage.png&quot; src=&quot;http://images2017.cnblogs.com/blog/412433/201710/412433-20171010185935465-1582523946.png&quot; alt=&quot;NewImage&quot; width=&quot;600&quot; height=&quot;218&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;
&lt;p&gt;368行 ngx_init_signals函数 设置要监听的信号，和信号的处理函数&lt;/p&gt;

&lt;p&gt;src/core/nginx.c  &lt;/p&gt;
&lt;p&gt;&lt;img title=&quot;NewImage.png&quot; src=&quot;http://images2017.cnblogs.com/blog/412433/201710/412433-20171010185907449-533394531.png&quot; alt=&quot;NewImage&quot; width=&quot;600&quot; height=&quot;198&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;
&lt;p&gt;291-293行 信号为sig-&amp;gt;signo,对应的处理函数为sig-&amp;gt;handler&lt;/p&gt;

&lt;p&gt;sig的定义如下&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;img title=&quot;NewImage.png&quot; src=&quot;http://images2017.cnblogs.com/blog/412433/201710/412433-20171010190153277-889385732.png&quot; alt=&quot;NewImage&quot; width=&quot;500&quot; height=&quot;600&quot; border=&quot;0&quot;/&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;QUIT和USR2的信号处理函数都为 ngx_signal_handler&lt;/p&gt;
&lt;p&gt;对应的流程图为&lt;/p&gt;
&lt;p&gt;&lt;img title=&quot;NewImage.png&quot; src=&quot;http://images2017.cnblogs.com/blog/412433/201710/412433-20171010190346590-1540744687.png&quot; alt=&quot;NewImage&quot; width=&quot;348&quot; height=&quot;550&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;


&lt;p&gt;&lt;span&gt;&lt;strong&gt;2、master进程通过sigsuspend挂起在信号监听处&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img title=&quot;NewImage.png&quot; src=&quot;http://images2017.cnblogs.com/blog/412433/201710/412433-20171010190641371-1052523550.png&quot; alt=&quot;NewImage&quot; width=&quot;600&quot; height=&quot;493&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;3，向master进程id发送USR2信号&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;ngx_signal_handler处理USR2信号&lt;/p&gt;
&lt;p&gt;src/os/unix/ngx_process.c&lt;/p&gt;
&lt;p&gt;&lt;img title=&quot;NewImage.png&quot; src=&quot;http://images2017.cnblogs.com/blog/412433/201710/412433-20171010191332387-594590228.png&quot; alt=&quot;NewImage&quot; width=&quot;600&quot; height=&quot;320&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;
&lt;p&gt;372行  设置了ngx_change_binary=1&lt;/p&gt;

&lt;p&gt;master进程接收到信号，从挂起状态恢复，继续执行&lt;/p&gt;
&lt;p&gt;src/os/unix/ngx_process.c&lt;/p&gt;
&lt;p&gt;&lt;img title=&quot;NewImage.png&quot; src=&quot;http://images2017.cnblogs.com/blog/412433/201710/412433-20171010191602559-2062196315.png&quot; alt=&quot;NewImage&quot; width=&quot;600&quot; height=&quot;200&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;
&lt;p&gt;277行 ngx_exec_new_binary通过fork启动新的nginx bin文件&lt;/p&gt;

&lt;p&gt;src/core/nginx.c&lt;/p&gt;
&lt;p&gt;&lt;img title=&quot;NewImage.png&quot; src=&quot;http://images2017.cnblogs.com/blog/412433/201710/412433-20171010192522777-1043111436.png&quot; alt=&quot;NewImage&quot; width=&quot;600&quot; height=&quot;244&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;
&lt;p&gt;589行 ngx_set_evviroment 设置新nginx bin的环境变量&lt;/p&gt;
&lt;p&gt;640行 ngx_rename_file 通过rename函数将nginx.pid文件重命名为nginx.pid.oldbin&lt;/p&gt;
&lt;p&gt;651行 ngx_execute 启动新的bin文件&lt;/p&gt;
&lt;p&gt;由于nginx老master进程fork出的新nginxmaster进程，他们可以监听同一个端口，所以新nginx和老nginx可以同时监听端口，具体谁执行看哪一个worker子进程抢到了锁，可以accpet新连接 &lt;/p&gt;

&lt;p&gt;src/os/unix/ngx_process.c&lt;/p&gt;
&lt;p&gt;&lt;img title=&quot;NewImage.png&quot; src=&quot;http://images2017.cnblogs.com/blog/412433/201710/412433-20171010192148215-284053548.png&quot; alt=&quot;NewImage&quot; width=&quot;600&quot; height=&quot;92&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;
&lt;p&gt;src/os/unix/ngx_process.c&lt;/p&gt;
&lt;p&gt;&lt;img title=&quot;NewImage.png&quot; src=&quot;http://images2017.cnblogs.com/blog/412433/201710/412433-20171010192126684-1456412195.png&quot; alt=&quot;NewImage&quot; width=&quot;600&quot; height=&quot;282&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;
&lt;p&gt;src/os/unix/ngx_process.c&lt;/p&gt;

&lt;p&gt;对应的流程图如下&lt;/p&gt;

&lt;p&gt;&lt;img title=&quot;NewImage.png&quot; src=&quot;http://images2017.cnblogs.com/blog/412433/201710/412433-20171012173633043-1993480516.png&quot; alt=&quot;NewImage&quot; width=&quot;252&quot; height=&quot;900&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;4、向老的nginx进程发送QUIT信号，从容关闭&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;master进程收到QUIT信号后，将ngx_quit置为1&lt;/p&gt;
&lt;p&gt;&lt;img title=&quot;NewImage.png&quot; src=&quot;http://images2017.cnblogs.com/blog/412433/201710/412433-20171010193708137-915046564.png&quot; alt=&quot;NewImage&quot; width=&quot;600&quot; height=&quot;161&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;
&lt;p&gt;master进程接收到信号，从挂起状态恢复，继续执行&lt;/p&gt;
&lt;p&gt;&lt;img title=&quot;NewImage.png&quot; src=&quot;http://images2017.cnblogs.com/blog/412433/201710/412433-20171010200153934-1801943486.png&quot; alt=&quot;NewImage&quot; width=&quot;600&quot; height=&quot;330&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;
&lt;p&gt;209行 ngx_signal_worket_processes 向worker进程发送 NGX_SHUTDOWN_SIGNAL(QUIT)信号&lt;/p&gt;
&lt;p&gt;215行 ngx_close_socket 主进程关闭监听的socket&lt;/p&gt;

&lt;p&gt;src/os/unix/ngx_process_cycle.c&lt;/p&gt;
&lt;p&gt;&lt;img title=&quot;NewImage.png&quot; src=&quot;http://images2017.cnblogs.com/blog/412433/201710/412433-20171011112706730-506820672.png&quot; alt=&quot;NewImage&quot; width=&quot;600&quot; height=&quot;206&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;
&lt;p&gt;504行 通过kill函数向所有worker进程发送信号&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;5、worker进程收到NGX_SHUTDOWN_SIGNAL(QUIT)信号&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;src/os/unix/ngx_process.c &lt;/p&gt;
&lt;p&gt;&lt;img title=&quot;NewImage.png&quot; src=&quot;http://images2017.cnblogs.com/blog/412433/201710/412433-20171011114039465-1665637566.png&quot; alt=&quot;NewImage&quot; width=&quot;600&quot; height=&quot;237&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;
&lt;p&gt;360行 worker进程将ngx_quit置为1&lt;/p&gt;
&lt;p&gt;&lt;img title=&quot;NewImage.png&quot; src=&quot;http://images2017.cnblogs.com/blog/412433/201710/412433-20171011130803918-1006922178.png&quot; alt=&quot;NewImage&quot; width=&quot;600&quot; height=&quot;311&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;
&lt;p&gt;worker进程收到信号后从epoll_wait中唤醒从ngx_process_events_and_timers函数中恢复，&lt;/p&gt;
&lt;p&gt;710-714行 发现ngx_quit=1后将ngx_quit恢复为0，ngx_exiting置为1，&lt;/p&gt;
&lt;p&gt;713行 通过ngx_close_listening_sockets关闭处理的socket&lt;/p&gt;
&lt;p&gt;609行 下一次循环发现ngx_exiting=1后，处理队列中的已有事件和超时事件，发现没有要处理的事件了，就通过ngx_worker_process_exit退出worker进程&lt;/p&gt;

&lt;p&gt;src/os/unix/ngx_process_cycle.c&lt;/p&gt;
&lt;p&gt;&lt;img title=&quot;NewImage.png&quot; src=&quot;http://images2017.cnblogs.com/blog/412433/201710/412433-20171011192705012-1422619325.png&quot; alt=&quot;NewImage&quot; width=&quot;600&quot; height=&quot;430&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;
&lt;p&gt;1024行 调用各个模块的exit_process方法&lt;/p&gt;
&lt;p&gt;1067行 销毁内存池&lt;/p&gt;
&lt;p&gt;对应的流程图如下&lt;/p&gt;
&lt;p&gt;&lt;img title=&quot;NewImage.png&quot; src=&quot;http://images2017.cnblogs.com/blog/412433/201710/412433-20171012172044887-48408022.png&quot; alt=&quot;NewImage&quot; width=&quot;362&quot; height=&quot;600&quot; border=&quot;0&quot;/&gt; &lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;6、子进程退出后，作为父进程的master进程会收到SIGCHLD信号&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;src/os/unix/ngx_process.c&lt;/p&gt;
&lt;p&gt;&lt;img title=&quot;NewImage.png&quot; src=&quot;http://images2017.cnblogs.com/blog/412433/201710/412433-20171011193446746-89080528.png&quot; alt=&quot;NewImage&quot; width=&quot;600&quot; height=&quot;259&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;
&lt;p&gt;387行 父进程收到SIGCHLD后将ngx_reap置为1，&lt;/p&gt;
&lt;p&gt;437行 发现信号是SIGCHLD后执行ngx_process_get_status函数判断worker子进程是正常退出，还是异常退出&lt;/p&gt;

&lt;p&gt;src/os/unix/ngx_process.c&lt;/p&gt;
&lt;p&gt;&lt;img title=&quot;NewImage.png&quot; src=&quot;http://images2017.cnblogs.com/blog/412433/201710/412433-20171011193541199-589697227.png&quot; alt=&quot;NewImage&quot; width=&quot;600&quot; height=&quot;350&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;
&lt;p&gt;494-499行 如果发现worker子进程如果是正常退出的，会将exited置为1&lt;/p&gt;

&lt;p&gt;master进程接收到信号，从挂起状态恢复，继续执行&lt;/p&gt;
&lt;p&gt;&lt;img title=&quot;NewImage.png&quot; src=&quot;http://images2017.cnblogs.com/blog/412433/201710/412433-20171012160858777-572627924.png&quot; alt=&quot;NewImage&quot; width=&quot;600&quot; height=&quot;186&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;
&lt;p&gt;176行 发现ngx_reap=1后，ngx_reap_children函数判断是否需要重启worker进程&lt;/p&gt;
&lt;p&gt;如果worker是因为收到了quit信号正常退出的，所有worker进程退出时，live=0&lt;/p&gt;
&lt;p&gt;183行 live=0 并且收到了ngx_quit信号  通过ngx_master_process_exit关闭master进程&lt;/p&gt;

&lt;p&gt;src/os/unix/ngx_process_cycle.c&lt;/p&gt;
&lt;p&gt;&lt;img title=&quot;NewImage.png&quot; src=&quot;http://images2017.cnblogs.com/blog/412433/201710/412433-20171012161233918-149682252.png&quot; alt=&quot;NewImage&quot; width=&quot;600&quot; height=&quot;300&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;
&lt;p&gt;619 如果worker至今才是因为意外退出的，并且可以重启，则调用ngx_spawn_process重新启动一个worker子进程&lt;/p&gt;
&lt;p&gt;642 如果有worker进程还在运行则live=1 如果全部的worker子进程都已经退出则live=0&lt;/p&gt;

&lt;p&gt;src/os/unix/ngx_process_cycle.c&lt;/p&gt;
&lt;p&gt;&lt;img title=&quot;NewImage.png&quot; src=&quot;http://images2017.cnblogs.com/blog/412433/201710/412433-20171012161607012-1646781270.png&quot; alt=&quot;NewImage&quot; width=&quot;600&quot; height=&quot;120&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;
&lt;p&gt;656行 ngx_delete_pidfile 删除pid文件&lt;/p&gt;
&lt;p&gt;666行 ngx_close_listening_sockets 关闭监听端口&lt;/p&gt;
&lt;p&gt;685行 销毁内存池&lt;/p&gt;
&lt;p&gt;686行 退出&lt;/p&gt;
&lt;p&gt;对应的流程图如下&lt;/p&gt;
&lt;p&gt;&lt;img title=&quot;NewImage.png&quot; src=&quot;http://images2017.cnblogs.com/blog/412433/201710/412433-20171012173545277-1100261090.png&quot; alt=&quot;NewImage&quot; width=&quot;236&quot; height=&quot;1000&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;






&lt;p&gt;PS:推荐一个好朋友的微信公众号，一个每天都在思考或者在思考路上的公众号运营少女~&lt;img title=&quot;NewImage.png&quot; src=&quot;http://images2017.cnblogs.com/blog/412433/201710/412433-20171012174839730-1002116022.png&quot; alt=&quot;NewImage&quot; width=&quot;600&quot; height=&quot;326&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

</description>
<pubDate>Thu, 12 Oct 2017 15:33:00 +0000</pubDate>
<dc:creator>magicsoar</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/magicsoar/p/7658939.html</dc:identifier>
</item>
<item>
<title>程序员 各种PDF格式电子书--免费网盘资源 - 孤独是1态度</title>
<link>http://www.cnblogs.com/gudu1/p/7658909.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/gudu1/p/7658909.html</guid>
<description>&lt;p&gt; &lt;span&gt;&lt;strong&gt;《设计模式之禅(完整高清版)》&lt;/strong&gt;&lt;/span&gt; 链接：http://pan.baidu.com/s/1bo7noMb 密码：5kve&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; &lt;span&gt;《重构_改善既有代码的设计》&lt;/span&gt; &lt;/strong&gt;链接：http://pan.baidu.com/s/1miBoWDa 密码：vlbj&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;《微服务架构与实践(王磊著)完整版》&lt;/strong&gt; 链接：http://pan.baidu.com/s/1kVehbD1 密码：plpz&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;《网络爬虫入门到精通》&lt;/strong&gt; 链接：http://pan.baidu.com/s/1i5w1UVb 密码：megy&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;《图解HTTP》&lt;/strong&gt; 链接：http://pan.baidu.com/s/1dF91xyp 密码：qzhy&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;《架构探险 从零开始写javaweb框架》&lt;/strong&gt; 链接：https://pan.baidu.com/s/1hsPAiIo 密码：4cnr&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;《数据结构与算法 Java版》&lt;/strong&gt; 链接：http://pan.baidu.com/s/1nuAWJCP 密码：pvsg&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;《[JAVA解惑]（美）布洛赫》&lt;/strong&gt;链接：http://pan.baidu.com/s/1mhQ7G6W 密码：h7os&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;《[Java语言程序设计-进阶篇(原书第8版)]》&lt;/strong&gt;链接：http://pan.baidu.com/s/1jHLSfMQ 密码：1pvl&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;《[深入理解Java虚拟机：JVM高级特性与最佳实践]》&lt;/strong&gt;链接：http://pan.baidu.com/s/1pLqQaJh 密码：8cml&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;《Apache服务器配置与使用工作笔记》&lt;/strong&gt;链接：http://pan.baidu.com/s/1cLIFGa 密码：rc98&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;《Effective Java 中文第二版》&lt;/strong&gt;链接：http://pan.baidu.com/s/1jIgkWx4 密码：zemh&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;《Head First Java 中文高清版》&lt;/strong&gt;链接：http://pan.baidu.com/s/1c2KYGKS 密码：6byq&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;《Head First Servlet JSP(清晰中文版)》&lt;/strong&gt;链接：http://pan.baidu.com/s/1mi9TcnA 密码：q7lx&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;《JAVA 8实战》&lt;/strong&gt;链接：http://pan.baidu.com/s/1c1BUXVU 密码：bhic&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;《Java NIO 中文版》&lt;/strong&gt;链接：http://pan.baidu.com/s/1eS1XFOm 密码：trhc&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;《Java RESTful Web Service实战 [韩陆著]》&lt;/strong&gt;链接：http://pan.baidu.com/s/1sl7aXIX 密码：bihj&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;《Java TCP IP Socket编程(原书第2版)》&lt;/strong&gt;链接：http://pan.baidu.com/s/1hsqyuZM 密码：1erx&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;《Java+JVM》&lt;/strong&gt;链接：http://pan.baidu.com/s/1jIvebps 密码：d54e&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;《Java8函数式编程》&lt;/strong&gt;链接：http://pan.baidu.com/s/1eRPyi6Q 密码：zk04&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;《Java编程思想(第4版)》&lt;/strong&gt;链接：http://pan.baidu.com/s/1bpIsNCV 密码：u7s6&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;《Java程序性能优化  让你的Java程序更快、更稳定》&lt;/strong&gt;链接：http://pan.baidu.com/s/1c75CfG 密码：1fd9&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;《Java程序员面试宝典(第2版)(欧立奇,刘洋,段韬)  PDF 扫描版》&lt;/strong&gt;链接：http://pan.baidu.com/s/1eRLuxpw 密码：vu8n&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;《Java核心技术 卷Ⅰ 基础知识(第8版)》&lt;/strong&gt;链接：http://pan.baidu.com/s/1mi9TcpE 密码：54w0&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;《Java核心技术 卷Ⅱ 高级特性(第8版)》&lt;/strong&gt;链接：http://pan.baidu.com/s/1o8okmwi 密码：9xsv&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;《java基础概念》&lt;/strong&gt;链接：http://pan.baidu.com/s/1i5ahoFF 密码：wzgh&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;《java基础教程(强烈推荐)》&lt;/strong&gt;链接：http://pan.baidu.com/s/1hrVzDEO 密码：5qow&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;《Jsp、Tomcat、Sqlserver部分笔记》&lt;/strong&gt;链接：http://pan.baidu.com/s/1eRJszwm 密码：59nt&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;《TCPIP详解卷1》&lt;/strong&gt;链接：http://pan.baidu.com/s/1eS8dyRg 密码：q94v&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;《TCPIP详解卷2》&lt;/strong&gt;链接：http://pan.baidu.com/s/1gfMU2jh 密码：elsi&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;《TCPIP详解卷3》&lt;/strong&gt;链接：http://pan.baidu.com/s/1pLTzHof 密码：5v3v&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;《UML精粹》&lt;/strong&gt;链接：http://pan.baidu.com/s/1qYVz7yc 密码：x30z&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;《Java常用算法手册 第三版本》&lt;/strong&gt;链接：http://pan.baidu.com/s/1pLp4miJ 密码：j6gk&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;《Java核心技术 卷II 高级特性(原书第9版)》&lt;/strong&gt;链接：http://pan.baidu.com/s/1eSgtcGi 密码：15nh&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;《Java核心技术(卷I)基础知识(原书第9版)》&lt;/strong&gt;链接：http://pan.baidu.com/s/1o8HW458 密码：3r7k&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;《Java虚拟机并发编程》&lt;/strong&gt;链接：http://pan.baidu.com/s/1eRKE0oU 密码：omys&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;《阿里双11系统管控调度架构与实践+》&lt;/strong&gt;链接：http://pan.baidu.com/s/1i4NWdZB 密码：zsq1&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;《疯狂Java讲义(第3版)》&lt;/strong&gt;链接：http://pan.baidu.com/s/1qYNsdIW 密码：im3y&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;《数据结构与算法 Java版》&lt;/strong&gt;链接：http://pan.baidu.com/s/1o7Vn1iy 密码：o6nu&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;《图解HTTP 完整彩色版》&lt;/strong&gt;链接：http://pan.baidu.com/s/1kVh4Fyf 密码：bz21&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;《图解数据结构-使用Java》&lt;/strong&gt;链接：http://pan.baidu.com/s/1dE5hxG9 密码：w7ww&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;《编程之美-完整版》&lt;/strong&gt;链接：http://pan.baidu.com/s/1eS0BPD4 密码：wwvb&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;《从Paxos到Zookeeper  分布式一致性原理与实践（书签版）》&lt;/strong&gt;链接：http://pan.baidu.com/s/1o8QdUT8 密码：lu41&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;《大话数据结构》&lt;/strong&gt;链接：http://pan.baidu.com/s/1miiOFCO 密码：ofsl&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;《大型网站系统与JAVA中间件实践（高清版）》&lt;/strong&gt;链接：http://pan.baidu.com/s/1o8mi0K6 密码：r9k5&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;《计算机程序设计艺术（第二卷）高清中文版》&lt;/strong&gt;链接：http://pan.baidu.com/s/1hs29DOC 密码：wdg1&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;《计算机程序设计艺术（第三卷）高清中文版》&lt;/strong&gt;链接：http://pan.baidu.com/s/1dEQMfbr 密码：rl6s&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;《计算机程序设计艺术（第一卷）高清中文版》&lt;/strong&gt;链接：http://pan.baidu.com/s/1nv2z1hf 密码：jsa2&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;《面向对象设计UML实践》&lt;/strong&gt;链接：http://pan.baidu.com/s/1miMKqH6 密码：whsx&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;《深入分析Java  Web技术修订版》&lt;/strong&gt;链接：http://pan.baidu.com/s/1c1URLaK 密码：mdkn&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;《深入理解JAVA内存模型》&lt;/strong&gt;链接：http://pan.baidu.com/s/1o7JIkrw 密码：hyq6&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;《深入理解Java虚拟机：JVM高级特性与最佳实践（最新第二版）》&lt;/strong&gt;链接：http://pan.baidu.com/s/1qXAQ8pQ 密码：fy7d&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;《实战Java高并发程序设计》&lt;/strong&gt;链接：http://pan.baidu.com/s/1dFm0Gt7 密码：w899&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;《淘宝技术这十年，完整最终确认版》&lt;/strong&gt;链接：http://pan.baidu.com/s/1eSo0Aiu 密码：tbsd&lt;/span&gt;&lt;/p&gt;


&lt;p&gt;&lt;span&gt;&lt;strong&gt;《Spring实战(第4版)》 &lt;/strong&gt;链接：http://pan.baidu.com/s/1o8FUBSQ 密码：kh21&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;strong&gt;《Spring源码深度解析》&lt;/strong&gt;&lt;/strong&gt; 链接：http://pan.baidu.com/s/1sljuyT3 密码：n860&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;《精通Spring4.X企业应用开发实战》&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;链接：http://pan.baidu.com/s/1geZ53Qr 密码：zmb3&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;《精通Spring(清晰书签版)》&lt;/strong&gt;链接：http://pan.baidu.com/s/1boBrcVd 密码：9b08&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;《亿级流量网站架构核心技术-跟开涛学搭建高可用高并发系统》&lt;/strong&gt;链接：http://pan.baidu.com/s/1eRQJYJC 密码：1bqf&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;《SPRING 实战（第3版）》&lt;/strong&gt; 链接：http://pan.baidu.com/s/1skAO7zZ 密码：i87j&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;《Java EE设计模式：Spring企业级开发最佳实践》&lt;/strong&gt;链接：http://pan.baidu.com/s/1o8sTUFg 密码：dx8s&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;《spring揭秘(完整)》&lt;/strong&gt;链接：http://pan.baidu.com/s/1mhI0ugS 密码：1noy&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;《SPRING技术内幕：深入解析SPRING架构与设计原理》&lt;/strong&gt;链接：http://pan.baidu.com/s/1mhRTEHU 密码：qf8a&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;《SpringBoot揭秘：快速构建微服务体系》&lt;/strong&gt;链接：http://pan.baidu.com/s/1mi65lFE 密码：ueut&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;《从零开始学Spring Boot》&lt;/strong&gt;链接：http://pan.baidu.com/s/1qYC2IPe 密码：ntg4&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;《深入实践Spring Boot.陈韶健》&lt;/strong&gt;链接：http://pan.baidu.com/s/1skGoivj 密码：xz2m&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;《Spring.Boot.in.Action.2015.12》&lt;/strong&gt;链接：http://pan.baidu.com/s/1skIqeeD 密码：kn63&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;《spring-boot-reference-guide-zh》&lt;/strong&gt;链接：http://pan.baidu.com/s/1boMMtBL 密码：981n&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;《Spring Boot实战 ,丁雪丰 (译者) 》&lt;/strong&gt;链接：http://pan.baidu.com/s/1nvgKI2P 密码：pykt&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;《Spring Boot Cookbook》&lt;/strong&gt;链接：http://pan.baidu.com/s/1jI5nv3w 密码：xw7q&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;《Learning+Spring+Boot+-+Greg+L.+Turnquist》&lt;/strong&gt;链接：http://pan.baidu.com/s/1o8LunnO 密码：px7v&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;《JavaEE开发的颠覆者 Spring Boot实战  完整版》&lt;/strong&gt;链接：http://pan.baidu.com/s/1jIR8aO2 密码：ndnm&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;　　&lt;span&gt;后续还会有更多更新，比如Python,Redis,Mongo DB等。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Thu, 12 Oct 2017 15:27:00 +0000</pubDate>
<dc:creator>孤独是1态度</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/gudu1/p/7658909.html</dc:identifier>
</item>
<item>
<title>坑中速记整理! 使用 kotlin 写第一个 ReactNative Android 模块 - iOS122</title>
<link>http://www.cnblogs.com/ios122/p/7658806.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/ios122/p/7658806.html</guid>
<description>&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/801860/201710/801860-20171012225951387-737789880.png&quot; alt=&quot;preview&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Kotlin 和 Swift, 两大新宠! 借 ReactNative 熟悉下 kotlin 的用法,不料掉坑里面了.昨晚花了大半夜,趁这会儿思路清晰,把涉及到的一些关键信息,迅速整理下.&lt;/p&gt;
&lt;h2 id=&quot;最佳的使用-kotlin-快速开始写android模块的方式&quot;&gt;最佳的使用 Kotlin 快速开始写Android模块的方式&lt;/h2&gt;
&lt;ol&gt;&lt;li&gt;&lt;em&gt;react-native init AwesomeProject&lt;/em&gt; 生成的 android 目录,是一个标准的 Android Studio 工程,详见: &lt;a href=&quot;http://facebook.github.io/react-native/docs/getting-started.html&quot; class=&quot;uri&quot;&gt;http://facebook.github.io/react-native/docs/getting-started.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;直接在 Android Studio 中打开 AwesomeProject/android 目录.&lt;/li&gt;
&lt;li&gt;参考文章 &lt;a href=&quot;http://facebook.github.io/react-native/docs/native-modules-android.html&quot; class=&quot;uri&quot;&gt;http://facebook.github.io/react-native/docs/native-modules-android.html&lt;/a&gt;,先用 java 实现&lt;/li&gt;
&lt;li&gt;顶部菜单 --&amp;gt; code --&amp;gt; Convert Java File to Kotlin File ,自动转换为 kotlin .&lt;/li&gt;
&lt;/ol&gt;&lt;div class=&quot;sourceCode&quot; readability=&quot;17&quot;&gt;
&lt;pre class=&quot;sourceCode kotlin&quot;&gt;
&lt;code class=&quot;sourceCode kotlin&quot;&gt;&lt;span class=&quot;kw&quot;&gt;package&lt;/span&gt; com.&lt;span class=&quot;fu&quot;&gt;awesomeproject&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;AnExampleReactPackage&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;import&lt;/span&gt; android.&lt;span class=&quot;fu&quot;&gt;widget&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;Toast&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;import&lt;/span&gt; com.&lt;span class=&quot;fu&quot;&gt;facebook&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;react&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;bridge&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;ReactApplicationContext&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import&lt;/span&gt; com.&lt;span class=&quot;fu&quot;&gt;facebook&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;react&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;bridge&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;ReactContextBaseJavaModule&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;import&lt;/span&gt; com.&lt;span class=&quot;fu&quot;&gt;facebook&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;react&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;bridge&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;ReactMethod&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;import&lt;/span&gt; java.&lt;span class=&quot;fu&quot;&gt;util&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;HashMap&lt;/span&gt;

&lt;span class=&quot;co&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; * Created by yanfeng on 2017/10/12.&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt; */&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;ToastModule&lt;/span&gt;(reactContext: ReactApplicationContext) : &lt;span class=&quot;fu&quot;&gt;ReactContextBaseJavaModule&lt;/span&gt;(reactContext) {

    &lt;span class=&quot;kw&quot;&gt;override&lt;/span&gt; fun &lt;span class=&quot;fu&quot;&gt;getName&lt;/span&gt;(): String {
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;ToastExample&quot;&lt;/span&gt;
    }

    &lt;span class=&quot;kw&quot;&gt;override&lt;/span&gt; fun &lt;span class=&quot;fu&quot;&gt;getConstants&lt;/span&gt;(): Map&amp;lt;String, Any&amp;gt;? {
        &lt;span class=&quot;kw&quot;&gt;val&lt;/span&gt; constants = HashMap&amp;lt;String, Any&amp;gt;()
        constants.&lt;span class=&quot;fu&quot;&gt;put&lt;/span&gt;(DURATION_SHORT_KEY, Toast.&lt;span class=&quot;fu&quot;&gt;LENGTH_SHORT&lt;/span&gt;)
        constants.&lt;span class=&quot;fu&quot;&gt;put&lt;/span&gt;(DURATION_LONG_KEY, Toast.&lt;span class=&quot;fu&quot;&gt;LENGTH_LONG&lt;/span&gt;)
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; constants
    }

    @ReactMethod
    fun &lt;span class=&quot;fu&quot;&gt;show&lt;/span&gt;(message: String, duration: &lt;span class=&quot;dt&quot;&gt;Int&lt;/span&gt;) {
        Toast.&lt;span class=&quot;fu&quot;&gt;makeText&lt;/span&gt;(reactApplicationContext, message, duration).&lt;span class=&quot;fu&quot;&gt;show&lt;/span&gt;()
    }

    companion &lt;span class=&quot;kw&quot;&gt;object&lt;/span&gt; {

        &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;val&lt;/span&gt; DURATION_SHORT_KEY = &lt;span class=&quot;st&quot;&gt;&quot;SHORT&quot;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;val&lt;/span&gt; DURATION_LONG_KEY = &lt;span class=&quot;st&quot;&gt;&quot;LONG&quot;&lt;/span&gt;
    }
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;一些坑中的经验&quot;&gt;一些坑中的经验&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;如果 ReactNative 初始化慢,可以改用淘宝源,后面的 &lt;em&gt;--verbose&lt;/em&gt; 参数,主要用来辨别是否卡住.&lt;/li&gt;
&lt;/ul&gt;&lt;pre class=&quot;shell&quot;&gt;
&lt;code&gt;npm install -g nrm
nrm use taobao
npm install -g react-native-cli --verbose
react-native init AwesomeProject --verboses&lt;/code&gt;
&lt;/pre&gt;
&lt;ul readability=&quot;11.527230590962&quot;&gt;&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;RN 与已有项目集成的原理是,把已有的 Android 项目复制到 android 文件夹,然后改下配置.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;8&quot;&gt;
&lt;p&gt;如果没有已有的运行良好的项目,不要尝试用 Android Studio 直接新建项目,因为 Android Studio 的默认 SDK 版本(25.3.1) 和 ReactNative 的SDK版本(23.0.1) 不一致,所以在根据 RN 文档,改配置,会遇到各种问题.如果非要模拟,建议直接基于 AwesomeProject/android 这个项目改.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;4.2703862660944&quot;&gt;
&lt;p&gt;改淘宝源,可以加快速度,但是每次安装还是需要 20~40 分钟(取决于网络环境等).如果本地再起一个 sinopia ,这样第二次初始化 RN 时,只需要 3 ~ 5 分钟.详见: &lt;a href=&quot;https://github.com/rlidwka/sinopia&quot; class=&quot;uri&quot;&gt;https://github.com/rlidwka/sinopia&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;3&quot;&gt;
&lt;p&gt;如果遇到 &lt;em&gt;All com.android.support libraries must use the exact same version specification&lt;/em&gt; 一类的错误,又必须解决的话,可以尝试查看依赖关系,看到底是哪里在冲突:&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;命令是:&lt;/p&gt;
&lt;pre class=&quot;shell&quot;&gt;
&lt;code&gt;./gradlew -q dependencies app:dependencies --configuration compile&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;可能的输出:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;+--- com.android.support.constraint:constraint-layout:1.0.0-beta2
|    \--- com.android.support.constraint:constraint-layout-solver:1.0.0-beta2
\--- com.facebook.react:react-native:+ -&amp;gt; 0.20.1
     +--- com.google.code.findbugs:jsr305:3.0.0
     +--- com.facebook.stetho:stetho-okhttp:1.2.0
     |    +--- com.google.code.findbugs:jsr305:2.0.1 -&amp;gt; 3.0.0
     |    +--- com.facebook.stetho:stetho:1.2.0
     |    |    +--- com.google.code.findbugs:jsr305:2.0.1 -&amp;gt; 3.0.0
     |    |    \--- commons-cli:commons-cli:1.2
     |    \--- com.squareup.okhttp:okhttp:2.2.0 -&amp;gt; 2.5.0
     |         \--- com.squareup.okio:okio:1.6.0
     +--- com.squareup.okhttp:okhttp-ws:2.5.0
     |    \--- com.squareup.okhttp:okhttp:2.5.0 (*)
     +--- com.facebook.fresco:fresco:0.8.1
     |    +--- com.facebook.fresco:imagepipeline:0.8.1
     |    |    +--- com.nineoldandroids:library:2.4.0
     |    |    +--- com.facebook.fresco:fbcore:0.8.1
     |    |    +--- com.android.support:support-v4:21.0.3 -&amp;gt; 23.0.1
     |    |    |    \--- com.android.support:support-annotations:23.0.1
     |    |    \--- com.parse.bolts:bolts-android:1.1.4
     |    +--- com.facebook.fresco:fbcore:0.8.1
     |    \--- com.facebook.fresco:drawee:0.8.1
     |         +--- com.facebook.fresco:fbcore:0.8.1
     |         \--- com.android.support:support-v4:21.0.3 -&amp;gt; 23.0.1 (*)
     +--- org.webkit:android-jsc:r174650
     +--- com.fasterxml.jackson.core:jackson-core:2.2.3
     +--- com.squareup.okhttp:okhttp:2.5.0 (*)
     +--- com.facebook.fresco:imagepipeline-okhttp:0.8.1
     |    +--- com.squareup.okhttp:okhttp:2.3.0 -&amp;gt; 2.5.0 (*)
     |    +--- com.facebook.fresco:imagepipeline:0.8.1 (*)
     |    \--- com.facebook.fresco:fbcore:0.8.1
     +--- com.squareup.okio:okio:1.6.0
     +--- com.android.support:recyclerview-v7:23.0.1
     |    +--- com.android.support:support-v4:23.0.1 (*)
     |    \--- com.android.support:support-annotations:23.0.1
     +--- com.facebook.stetho:stetho:1.2.0 (*)
     \--- com.android.support:appcompat-v7:23.0.1
          \--- com.android.support:support-v4:23.0.1 (*)

(*) - dependencies omitted (listed previously)&lt;/code&gt;
&lt;/pre&gt;
&lt;ul readability=&quot;7&quot;&gt;&lt;li readability=&quot;3&quot;&gt;
&lt;p&gt;kotlin,会自动引入库; java,点击提示不存在的类,然后使用 &lt;em&gt;Alt + 回车&lt;/em&gt; 也可以快速引入.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;3&quot;&gt;
&lt;p&gt;RN 的文档可能是错的.如果提示方法名总是不对,可以尝试下手动输入,看下提示,可能真的变了.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;执行 &lt;em&gt;react-native run-android&lt;/em&gt; 可能比在 Android Studio 中运行方便;但是第二次执行原生 Android 代码时, Android Studio Run Build 的速度非常快,是更好的选择.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;如果是真机,可能需要:&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;pre class=&quot;shell&quot;&gt;
&lt;code&gt;adb reverse tcp:8081 tcp:8081&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;遇到诡异的问题时,可以尝试先: &lt;em&gt;clean build&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;源码参考&quot;&gt;源码参考:&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/ios122/kotlin-module-sample-for-reactnative&quot; class=&quot;uri&quot;&gt;https://github.com/ios122/kotlin-module-sample-for-reactnative&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;参考文章&quot;&gt;参考文章&lt;/h2&gt;
</description>
<pubDate>Thu, 12 Oct 2017 15:02:00 +0000</pubDate>
<dc:creator>iOS122</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/ios122/p/7658806.html</dc:identifier>
</item>
<item>
<title>【DDD】业务建模实践 —— 人关注人 - 倒骑的驴</title>
<link>http://www.cnblogs.com/daoqidelv/p/7657785.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/daoqidelv/p/7657785.html</guid>
<description>
&lt;p&gt;　　社区业务领域中，存在‘人关注人’的场景，在这个场景中，关系较为复杂，且均表现在‘人’同一个业务实体上，因此，这个case的建模过程值得思考。本文将就‘人关注人’这个业务case的领域建模进行探讨，欢迎拍砖。&lt;/p&gt;

&lt;p&gt;　　在做‘帖子’模块的建模过程中，遇到了‘查询帖子阅读者是否关注了帖子作者’的case，基于这个case，尝试对‘关注’这个业务领域进行建模。&lt;/p&gt;
&lt;h2 id=&quot;id-‘关注’模块领域建模-业务建模&quot;&gt;业务建模&lt;/h2&gt;
&lt;p&gt;　　就‘人关注人’来讲，可以将人按照角色分为：关注者（FollowingUser，使用进行时标识行为主动发起者）、被关注者（FollowedUser，使用过去式标识行为被动接受者），FollowingUser可以‘关注’（follows）被关注者，FollowedUser可以‘被关注’（followed）；FollowingUser持有一个‘被关注者‘集合（followedUsers），FollowedUser持有一个’关注者‘集合（followingUsers）。因此可以梳理出如下实体：FollowingUser、FollowedUser，且他们都应当是‘用户’（UserInfo）实体的子类。&lt;/p&gt;
&lt;p&gt;　　常见的需求中，人与人之间的关系可能有如下几种：单粉（FollowingUser follows FollowedUser）、互粉（FollowingUser follows FollowedUser, FollowedUser follows FollowingUser ）、没有关系（不存在关注关系），通常需要判定制定的User和另外一个User之间的关注关系，所以，我们期望FollowingUser 能够判定自己是否关注过给定的User， 这个行为我们把他称为：hasFollowed（UserInfo）；对应的，在FollowedUser 也需要判定自己是否被某个User关注，这个行为我们表示为：hasBeenFollowed（UserInfo）。&lt;/p&gt;
&lt;p&gt;　　我们来考虑一个比较特殊的场景：帖子详情查询场景，需要判定‘帖子当前阅读者是否关注了帖子作者’。在这个场景中，我们尝试把‘帖子阅读者’（PostReader）当做一个FollowingUser ，PostReader继承FollowingUser ；将‘帖子作者’（PostAuthor）当着一个FollowedUser ，PostAuthor继承FollowedUser 。&lt;/p&gt;
&lt;p&gt;　　为了完成判定PostReader和PostAuthor的关注关系，我们将PostAuthor作为一个User传入FollowingUser的hasFollowed（UserInfo）中，但是会发现无法识别出互粉的情况，因为，在这个场景中，我们并不认为PostAuthor是一个FollowingUser，它并不持有’被关注者‘集合（followedUsers），所以无法判定出PostAuthor是否关注过PostReader。&lt;/p&gt;
&lt;p&gt;　　那么我们是不是可以为PostAuthor加上FollowingUser这样一个角色呢？ 重新梳理一遍，发现其实PostAuthor和PostReader也是我们给UserInfo的一对角色，一个用户在’帖子详情查询‘场景，不可能同时拥有PostAuthor和FollowingUser的角色。PostAuthor并不需要知道自己关注了那些人，因此为PostAuthor加上FollowingUser的角色并不合适。&lt;/p&gt;
&lt;p&gt;　　那么是不是可以撇开PostAuthor角色，再单独引入一个FollowingUser呢？按照这个思路，每个FollowingUser都可以将对方作为判定对象使用自己的hasFollowed（UserInfo）完成判定，这样我们为FollowingUser增加了一个行为：判定一个关注者和自己的关系，这个行为我们记为：getFollowRelation(FollowingUser)。&lt;/p&gt;
&lt;p&gt;　　先不论合理性，先尝试去实现之后再做评估。&lt;/p&gt;
&lt;h2 id=&quot;id-‘关注’模块领域建模-业务模型&quot;&gt;业务模型&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/849051/201710/849051-20171012193116840-823747298.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;id-‘关注’模块领域建模-示例代码&quot;&gt;示例代码&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('8121f38c-02da-47a3-9142-c01ba9f56d5c')&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_8121f38c-02da-47a3-9142-c01ba9f56d5c&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_8121f38c-02da-47a3-9142-c01ba9f56d5c&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('8121f38c-02da-47a3-9142-c01ba9f56d5c',event)&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_8121f38c-02da-47a3-9142-c01ba9f56d5c&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; UserInfo {
       &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 用户ID&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;long&lt;/span&gt;&lt;span&gt; userId;
 
    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 判定给定用户是否是自己
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; UserInfo 给定的用户
     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;&lt;span&gt; true —— 是本人
     *         false —— 不是本人
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt;&lt;span&gt; isMyself(UserInfo userInfo) {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(userInfo == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
        }
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(userInfo.getUserId() == &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.getUserId()) {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
        }
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
    }
 
    ......
 
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;UserInfo.java&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('53af0cb8-d5cd-4c40-a195-0a1ccd899182')&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_53af0cb8-d5cd-4c40-a195-0a1ccd899182&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_53af0cb8-d5cd-4c40-a195-0a1ccd899182&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('53af0cb8-d5cd-4c40-a195-0a1ccd899182',event)&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_53af0cb8-d5cd-4c40-a195-0a1ccd899182&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; FollowingUser &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; UserInfo {
    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 我关注的用户 集
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; Set&amp;lt;FollowedUser&amp;gt; followedUsers = &lt;span&gt;new&lt;/span&gt; HashSet&amp;lt;FollowedUser&amp;gt;&lt;span&gt;();
     
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; FollowingUser(&lt;span&gt;long&lt;/span&gt;&lt;span&gt; userId) {
        &lt;/span&gt;&lt;span&gt;super&lt;/span&gt;&lt;span&gt;(userId);
    }
     
    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 关注者 追随 被关注者
     * 如果此人已经关注过指定的用户，则不再重复关注
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; followedUserId 被关注者userId
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; follow(&lt;span&gt;long&lt;/span&gt;&lt;span&gt; followedUserId) {
        FollowedUser followedUser &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; FollowedUser(followedUserId);
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.follow(followedUser);
    }
     
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; follow(FollowedUser followedUser) {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(!&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.followedUsers.contains(followedUser)) {
            followedUser.followed(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;);
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.followedUsers.add(followedUser);
        }
    }
     
    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 检查本人是否关注过指定的User
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; userInfo 指定的用户
     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;&lt;span&gt; String
     * 1：自己
     * 2：单粉
     * 4:未关注
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt;&lt;span&gt; String hasFollowed(UserInfo userInfo) {
        String followState &lt;/span&gt;=&lt;span&gt;  FollowRelationConst.FOLLOW_SIGN_4;
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.isMyself(userInfo)) {
            followState &lt;/span&gt;=&lt;span&gt; FollowRelationConst.FOLLOW_SIGN_1;
        } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.followedUsers.contains(userInfo)) {
                followState &lt;/span&gt;=&lt;span&gt; FollowRelationConst.FOLLOW_SIGN_2;
            } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
                followState &lt;/span&gt;=&lt;span&gt; FollowRelationConst.FOLLOW_SIGN_4;
            }
        }      
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; followState;
    }
     
    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 检查本人与指定的FollowingUser的关注关系，和hasFollowed不一样的地方在于，该方法可以识别出‘互粉’
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; userInfo 指定的用户
     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;&lt;span&gt; String
     * 1：自己
     * 2：单粉
     * 3：互粉
     * 4:未关注
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getFollowRelation(FollowingUser followingUser) {
        String followState &lt;/span&gt;=&lt;span&gt;  FollowRelationConst.FOLLOW_SIGN_4;
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.isMyself(followingUser)) {
            followState &lt;/span&gt;=&lt;span&gt; FollowRelationConst.FOLLOW_SIGN_1;
        } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.followedUsers.contains(followingUser)) {
                followState &lt;/span&gt;=&lt;span&gt; FollowRelationConst.FOLLOW_SIGN_2;
                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(FollowRelationConst.FOLLOW_SIGN_2.equals(followingUser.hasFollowed(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;))) {
                    followState &lt;/span&gt;=&lt;span&gt; FollowRelationConst.FOLLOW_SIGN_3;
                }
            } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
                followState &lt;/span&gt;=&lt;span&gt; FollowRelationConst.FOLLOW_SIGN_4;
            }
        }      
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; followState;
    }
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;省略 getter/ setter方法&lt;/span&gt;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;FollowingUser.java&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('b949893f-2659-4564-93ff-161353c73e0c')&quot;&gt;&lt;img id=&quot;code_img_closed_b949893f-2659-4564-93ff-161353c73e0c&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;FollowdUser.java&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('fd9f4382-848b-4c1a-bd17-b06384ec0e7c')&quot; readability=&quot;31&quot;&gt;&lt;img id=&quot;code_img_closed_fd9f4382-848b-4c1a-bd17-b06384ec0e7c&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_fd9f4382-848b-4c1a-bd17-b06384ec0e7c&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('fd9f4382-848b-4c1a-bd17-b06384ec0e7c',event)&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_fd9f4382-848b-4c1a-bd17-b06384ec0e7c&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;57&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; PostReader &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; FollowingUser {
    ......
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;PostReader.java&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('94f32675-4228-4b0e-9cb0-4255fcf045b9')&quot; readability=&quot;31&quot;&gt;&lt;img id=&quot;code_img_closed_94f32675-4228-4b0e-9cb0-4255fcf045b9&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_94f32675-4228-4b0e-9cb0-4255fcf045b9&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('94f32675-4228-4b0e-9cb0-4255fcf045b9',event)&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_94f32675-4228-4b0e-9cb0-4255fcf045b9&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;57&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; PostAuthor &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; FollowedUser {
    ......
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;PostAuthor.java&lt;/span&gt;&lt;/div&gt;
&lt;p&gt; 　　编写应用服务层代码，尝试判定PostReader和PostAuthor之间的关注关系，这是否发现现有的模型无法支持，我们需要新建一个临时的FollowingUser传递给PostReader.getFollowRelation()方法，这里看起来非常别扭，一个关注者（postReader这时是一个FollowingUser）怎么会去和另外一个关注者判定相互之间的关注关系呢？不符合业务场景；我们理不清FollowingUser和PostAuthor之间有什么区别，实际上，他们是标识同一个人，但是却被两个实体所表征，这会造成混乱。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('88b0b198-b8c0-43dc-9f92-7e1fd7a94b84')&quot; readability=&quot;33.5&quot;&gt;&lt;img id=&quot;code_img_closed_88b0b198-b8c0-43dc-9f92-7e1fd7a94b84&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_88b0b198-b8c0-43dc-9f92-7e1fd7a94b84&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('88b0b198-b8c0-43dc-9f92-7e1fd7a94b84',event)&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_88b0b198-b8c0-43dc-9f92-7e1fd7a94b84&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;62&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; BaseOutBean queryPostDetails(BaseInBean&amp;lt;QueryPostDetailsInBean&amp;gt; baseInBean) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
        ......
        postReader.follow(followRepository.queryFollowedUser(post.getPostAuthorUserId(), postReader.getUserId()));
        FollowingUser followingUser &lt;/span&gt;= followRepository.queryFollowingUser(post.getPostAuthorUserId(), postReader.getUserId()); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;临时的followingUser让人困惑&lt;/span&gt;
        String followSign = postReader.getFollowRelation(followingUser); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;一个关注者判定自己和一个关注者之间的关注关系，这个在业务上讲不清楚的，很是别扭。&lt;/span&gt;
&lt;span&gt;        ......
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;PostsServiceImpl.java&lt;/span&gt;&lt;/div&gt;


&lt;h2&gt; 业务建模&lt;/h2&gt;
&lt;p&gt;　　鉴于第一次建模尝试中遇到的困扰，分析下来发现：PostAuthor这个人在‘互粉’的场景下持有了双重角色：FollowingUser和FollowedUser，因此导致模型的实现并不符合业务上的理解，哪个诡异的followingUser和postAuthor本身的关系让人不能一下子识别出来。&lt;/p&gt;
&lt;p&gt;　　既然PostAuthor在‘互粉’场景下即是FollowedUser又是FollowingUser，而FollowedUser和FollowingUser都是UserInfo，也就意味者UserInfo是可以将FollowedUser和FollowingUser的行为包含进去的，因此，我们退一步，在‘人关注人’的场景下，不去区分FollowedUser和FollowingUser，统一称之为UserInfo，并将之前的行为全部赋予UserInfo，这样得到的模型和业务场景完全一致，易于理解。&lt;/p&gt;
&lt;p&gt;　　因此，FollowedUser就没有存在的必要了，那么FollowingUser还要不要呢？ 我们先保留，因为它在后面的‘人关注话题’场景中会有用武之地。&lt;/p&gt;
&lt;h2 id=&quot;id-‘关注’模块领域建模-业务模型.1&quot;&gt;业务模型&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/849051/201710/849051-20171012194030590-2036715161.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;代码示例&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('bc2f337f-cf78-45f7-a32d-1417e69f4d49')&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_bc2f337f-cf78-45f7-a32d-1417e69f4d49&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_bc2f337f-cf78-45f7-a32d-1417e69f4d49&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('bc2f337f-cf78-45f7-a32d-1417e69f4d49',event)&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_bc2f337f-cf78-45f7-a32d-1417e69f4d49&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; UserInfo {
       &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 用户ID&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;long&lt;/span&gt;&lt;span&gt; userId;
  
    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 判定给定用户是否是自己
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; UserInfo 给定的用户
     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;&lt;span&gt; true —— 是本人
     *         false —— 不是本人
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt;&lt;span&gt; isMyself(UserInfo userInfo) {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(userInfo == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
        }
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(userInfo.getUserId() == &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.getUserId()) {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
        }
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
    }
    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 被关注者 被 关注者 追随
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; followingUserId 关注者userId
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; followed(&lt;span&gt;long&lt;/span&gt;&lt;span&gt; followingUserId) {
        UserInfo followingUser &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; UserInfo(followingUserId);
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.followed(followingUser);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;NOTE：这里不再调用 followingUser.follow(followedUserId)。避免循环依赖。&lt;/span&gt;
&lt;span&gt;    }
     
    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 被关注者 被 关注者 追随
     * 如果已经指定的FollowingUser， 则不必再关注
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; FollowingUser 关注者
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; followed(UserInfo followingUser) {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(!&lt;span&gt;followingUsers.contains(followingUser)) {
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.followingUsers.add(followingUser);
        };     
    }
     
    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 关注者 追随 被关注者
     * 如果此人已经关注过指定的用户，则不再重复关注
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; followedUserId 被关注者userId
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; follow(&lt;span&gt;long&lt;/span&gt;&lt;span&gt; followedUserId) {
        UserInfo followedUser &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; UserInfo(followedUserId);
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.follow(followedUser);
    }
     
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; follow(UserInfo followedUser) {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(!&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.followedUsers.contains(followedUser)) {
            followedUser.followed(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;);
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.followedUsers.add(followedUser);
        }
    }
     
    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 检查本人是否关注过指定的User
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; userInfo 指定的用户
     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;&lt;span&gt; boolean
     *  true —— 已经关注了指定的user
     *  false —— 还未关注指定的user，如果指定用户是自己，则也返回false
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt;&lt;span&gt; hasFollowed(UserInfo userInfo) {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.isMyself(userInfo)) {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
        } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.followedUsers.contains(userInfo)) {
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
            }
        }      
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
    }
     
    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 检查本人与指定的FollowingUser的关注关系，和hasFollowed不一样的地方在于，该方法可以识别出‘互粉’
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; userInfo 指定的用户
     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;&lt;span&gt; String
     * 1：自己
     * 2：单粉
     * 3：互粉
     * 4:未关注
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getFollowRelation(UserInfo followingUser) {
        String followState &lt;/span&gt;=&lt;span&gt;  FollowRelationConst.FOLLOW_SIGN_4;
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.isMyself(followingUser)) {
            followState &lt;/span&gt;=&lt;span&gt; FollowRelationConst.FOLLOW_SIGN_1;
        } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.followedUsers.contains(followingUser)) {
                followState &lt;/span&gt;=&lt;span&gt; FollowRelationConst.FOLLOW_SIGN_2;
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;NOTE:这里不能调用followingUser.getFollowRelation(this)，否则进入死循环&lt;/span&gt;
                &lt;span&gt;if&lt;/span&gt;(followingUser.hasFollowed(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;)) {
                    followState &lt;/span&gt;=&lt;span&gt; FollowRelationConst.FOLLOW_SIGN_3;
                }
            } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
                followState &lt;/span&gt;=&lt;span&gt; FollowRelationConst.FOLLOW_SIGN_4;
            }
        }      
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; followState;
    }
  
    ......
  
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;UserInfo.java&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('9594199f-686f-4094-ac21-c7cbee4c1e0a')&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_9594199f-686f-4094-ac21-c7cbee4c1e0a&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_9594199f-686f-4094-ac21-c7cbee4c1e0a&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('9594199f-686f-4094-ac21-c7cbee4c1e0a',event)&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_9594199f-686f-4094-ac21-c7cbee4c1e0a&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * 粉丝，关注者，具有‘关注者’角色的用户
 * ‘关注者’可以关注话题等，人关注人的逻辑放到了UserInfo中处理。
 * &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; LENGFUPING610
 * @CreateDate 2017年9月6日
 *
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; FollowingUser &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; UserInfo {
     
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; FollowingUser(&lt;span&gt;long&lt;/span&gt;&lt;span&gt; userId) {
        &lt;/span&gt;&lt;span&gt;super&lt;/span&gt;&lt;span&gt;(userId);
    }  
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;FollowingUser.java&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('2678269b-64cd-427b-8025-d7674fb8e8c5')&quot; readability=&quot;32&quot;&gt;&lt;img id=&quot;code_img_closed_2678269b-64cd-427b-8025-d7674fb8e8c5&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_2678269b-64cd-427b-8025-d7674fb8e8c5&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('2678269b-64cd-427b-8025-d7674fb8e8c5',event)&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_2678269b-64cd-427b-8025-d7674fb8e8c5&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;59&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; LENGFUPING610
 * @CreateDate 2017年8月29日
 * 帖子读者
 * 读者通常也是追随者，通常会去关注作者，或者关注话题
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; PostReader &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; FollowingUser {
    ......
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;PostReader.java&lt;/span&gt;&lt;/div&gt;


&lt;h2&gt;业务建模&lt;/h2&gt;
&lt;p&gt;　　上述两次建模过程没有考虑‘关注’场景的复杂业务规则，现在我们重头梳理下‘关注’场景的业务规则。从需求上看，需要满足如下业务规则：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;
&lt;ul&gt;&lt;li&gt;一个人不能关注自己&lt;/li&gt;
&lt;li&gt;不能重复关注同一个人&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;　　为了第一条业务规则，我们模型中的follow行为需要调用UserInfo的isMyself判定是否本人，如果是本人则抛出异常。&lt;/p&gt;
&lt;p&gt;　　对于第二条业务规则，为了判定出FollowingUser是否已经关注过FollowedUser，理论上我们需要将FollowingUser关注过的FollowedUser都从存储中查询出来，装入到followedUsers，但是如果一个人关注了成千上万个，那么这种做法在性能上是不可取的。退一步我们可以只查询这次判定的两个人之间的关系，这样将结果集限定在1或者o个。同时我们需要在follow(UserInfo followedUser)方法中将此次关注的FollowedUser返回给调用方，这样调用方判定返回值是否为空，从而决定是否做存储操作。FollowedUser的followed行为和FollowingUser.follow()行为类似，不再赘述。&lt;/p&gt;
&lt;h2&gt;业务模型&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;　　同‘Round-II’中的业务模型&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;示例代码&lt;/h2&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('e055cbe1-fb08-432e-acba-30c73a6b7a97')&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_e055cbe1-fb08-432e-acba-30c73a6b7a97&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_e055cbe1-fb08-432e-acba-30c73a6b7a97&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('e055cbe1-fb08-432e-acba-30c73a6b7a97',event)&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_e055cbe1-fb08-432e-acba-30c73a6b7a97&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; UserInfo {
    ......
 
    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 关注者 追随 被关注者
     * 如果此人已经关注过指定的用户，则不再重复关注
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; followedUser
     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;&lt;span&gt; followedUser 被关注者
     * &lt;/span&gt;&lt;span&gt;@throws&lt;/span&gt;&lt;span&gt; BusinessException
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; UserInfo follow(UserInfo followedUser) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; BusinessException{
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(followedUser == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
        }
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.isMyself(followedUser)) {
            &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; BusinessException(MessageConst.CODE_1008);
        }
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(!&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.followedUsers.contains(followedUser)) {
            followedUser.followed(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;);
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.followedUsers.add(followedUser);
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; followedUser;
        }
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
    }
 
    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 被关注者 被 关注者 追随
     * 如果已经指定的FollowingUser， 则不必再关注
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; FollowingUser 关注者
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; FollowingUser 关注者
     * &lt;/span&gt;&lt;span&gt;@throws&lt;/span&gt;&lt;span&gt; BusinessException
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; UserInfo followed(UserInfo followingUser) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; BusinessException {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(followingUser == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
        }
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.isMyself(followingUser)) {
            &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; BusinessException(MessageConst.CODE_1008);
        }
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;(!&lt;span&gt;followingUsers.contains(followingUser)) {
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.followingUsers.add(followingUser);
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; followingUser;
        };     
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
    }
    ......
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;UserInfo.java&lt;/span&gt;&lt;/div&gt;


&lt;p&gt;　　经过上述三次建模迭代，我们得到了较完善的业务模型，但是不能沾沾自喜，当后续开发进入到‘关注’业务领域中的‘人关注人’和‘取消关注’的场景下时，发现上面的模型捉襟见肘了。&lt;/p&gt;


&lt;h2&gt;业务建模&lt;/h2&gt;
&lt;p&gt;　　考虑‘人关注人’的case&lt;span&gt;，我们需要将模型存入到存储介质中，这里的存储介质使用的oracle，在数据模型中，‘人关注人’的关注场景需要包含如下信息项：关注者用户id（following_user_id）、被关注者用户id（followed_user_id）以及可能的其他信息项。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　&lt;/span&gt;&lt;span&gt;现有业务模型中，在“关注”场景下，following_user_id是followingUser的userId，对于followed_user_id也能从followingUser.follow(UserInfo followedUser)的返回结果中获取（见上节描述）。那么再考虑一个更深层次的业务需求：“取消关注之后再次关注”，这里涉及到‘取消关注’这个场景的数据建模，对于‘取消关注’可以有两种做法：&lt;/span&gt;&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;
&lt;ul&gt;&lt;li&gt;取消关注即将该条关注关系硬删除；&lt;/li&gt;
&lt;li&gt;取消关注不做硬删除，只是给改天关注关系打上删除标记，但是记录还被保留；&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;　　&lt;span&gt;对于与上述两种‘取消关注’，“取消关注之后再次关注”可以有如下几种做法：&lt;/span&gt;&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;
&lt;ul&gt;&lt;li&gt;方案一、硬删除的情况下，再次关注直接插入一条新的关注关系；&lt;/li&gt;
&lt;li&gt;方案二、软删除的情况下，插入一条新的关注关系，同时保留旧的被标记为‘软删除’的关注关系；&lt;/li&gt;
&lt;li&gt;方案三、软删除的情况下，修改旧的被标记为‘软删除’的关注关系为正常的关注关系；&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;现在我们来评估下三种方案的利弊：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;
&lt;ul&gt;&lt;li&gt;方案1、优点在于：简洁明了，且符合业务模型，在业务模型中我们可以将‘关注关系’作为一个值对象建模；缺点在于：历史的关注关系会丢失，因为做了硬删除。&lt;/li&gt;
&lt;li&gt;方案2、优点在于业务模型层处理简单；缺点在于：数据模型需要考虑软删除标记的影响，比如在删除标记上建立索引时需要做过滤；&lt;/li&gt;
&lt;li&gt;方案3、优点在于数据模型层较简单；缺点在于：业务模型需要区分出“第一次关注”和‘取消关注后再次关注’两种场景，同时数据模型丢失了关注的历史信息。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;　　&lt;span&gt;我们再回过来看下，方案1、3丢失掉的关注的历史信息在方案2中被记录到了“关注关系”数据模型中，那么方案2合理吗？ 其实不合理的，一个数据模型承担了两种角色：”关注关系“和”关注历史“。所以我们可以将”关注关系“和”关注历史“分开进行数据建模，那么方案1的缺点就没有了。最终我们得到的最优数据模型为：&lt;/span&gt;&lt;/p&gt;
&lt;pre&gt;
     “关注关系” —— t_follow_relation(following_user_id, followed_user_id, create_time, last_update_time)
&lt;/pre&gt;
&lt;pre readability=&quot;8&quot;&gt;
     “关注历史” —— t_follow_history(following_user_id, followed_user_id, action, create_time, last_update_time)&lt;p&gt;　 回过头来我们再来看看业务模型，上面的业务模型，并没有将“关注关系”单独建模，而是表征在了UserInfo的两个set集合中；实际上，仅仅是表征‘人关注人’的话，业务模型是可以契合上面的最优数据模型的。再往前想一步假如“关注关系”中含有了其他属性呢？比如：关注渠道等，这时候就没法使用UserInfo的两个set属性来表征了。所以我们决定还是对
&lt;/p&gt;&lt;/pre&gt;
&lt;pre&gt;
“关注关系”（UserFollowRelation）单独建模，让UserInfo持有UserFollowRelation的集合。
&lt;/pre&gt;
&lt;h2&gt;业务模型&lt;/h2&gt;
&lt;p&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/849051/201710/849051-20171012200814152-946540421.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;示例代码&lt;/h2&gt;

&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('187635cf-025f-4c62-b1f4-0d3717dc52c9')&quot; readability=&quot;31.5&quot;&gt;&lt;img id=&quot;code_img_closed_187635cf-025f-4c62-b1f4-0d3717dc52c9&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_187635cf-025f-4c62-b1f4-0d3717dc52c9&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('187635cf-025f-4c62-b1f4-0d3717dc52c9',event)&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_187635cf-025f-4c62-b1f4-0d3717dc52c9&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;58&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
 * 关注关系基类
 * &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; DAOQIDELV
 *
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;abstract&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; FollowRelation {
    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 用户ID
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;protected&lt;/span&gt; &lt;span&gt;long&lt;/span&gt;&lt;span&gt; followingUserId;

      &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 省略setter/getter&lt;/span&gt;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;FollowRelation.java&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('ed3a6044-06ca-43d4-b36c-6fb16c7306ec')&quot; readability=&quot;33.5&quot;&gt;&lt;img id=&quot;code_img_closed_ed3a6044-06ca-43d4-b36c-6fb16c7306ec&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_ed3a6044-06ca-43d4-b36c-6fb16c7306ec&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('ed3a6044-06ca-43d4-b36c-6fb16c7306ec',event)&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_ed3a6044-06ca-43d4-b36c-6fb16c7306ec&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;62&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; FollowFactory &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; Factory {

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt;&lt;span&gt; UserFollowRelation getUserFollowRelationInstance(UserInfo followingUser, UserInfo followedUser) {

        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (followingUser == &lt;span&gt;null&lt;/span&gt; || followedUser == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
        }

        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (followedUser.getUserId() ==&lt;span&gt; followingUser.getUserId()) {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
        }

        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; UserFollowRelation(followingUser.getUserId(), followedUser.getUserId());
    }

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;FollowFactory.java&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('53e7d54f-9198-46b4-b913-2363480d9634')&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_53e7d54f-9198-46b4-b913-2363480d9634&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_53e7d54f-9198-46b4-b913-2363480d9634&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('53e7d54f-9198-46b4-b913-2363480d9634',event)&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_53e7d54f-9198-46b4-b913-2363480d9634&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; UserFollowRelation &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; FollowRelation {
    
    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 用户ID
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;long&lt;/span&gt;&lt;span&gt; followingUserId;

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 关注用户ID
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;long&lt;/span&gt;&lt;span&gt; followedUserId;

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 是否有效：1-有效，0-无效
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt;&lt;span&gt; String enabled;

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 来源
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt;&lt;span&gt; String source;

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 关注类型，0：系统默认:1：自主关注
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt;&lt;span&gt; String followType;

    

    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; hashCode() {
        &lt;/span&gt;&lt;span&gt;final&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; prime = 31&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; result = 1&lt;span&gt;;
        result &lt;/span&gt;= prime * result + (&lt;span&gt;int&lt;/span&gt;) (followedUserId ^ (followedUserId &amp;gt;&amp;gt;&amp;gt; 32&lt;span&gt;));
        result &lt;/span&gt;= prime * result + (&lt;span&gt;int&lt;/span&gt;) (followingUserId ^ (followingUserId &amp;gt;&amp;gt;&amp;gt; 32&lt;span&gt;));
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; result;
    }

    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt;&lt;span&gt; equals(Object obj) {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (&lt;span&gt;this&lt;/span&gt; ==&lt;span&gt; obj)
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (obj == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (getClass() !=&lt;span&gt; obj.getClass())
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
        UserFollowRelation other &lt;/span&gt;=&lt;span&gt; (UserFollowRelation) obj;
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (followedUserId !=&lt;span&gt; other.followedUserId)
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (followingUserId !=&lt;span&gt; other.followingUserId)
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
    }

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;省略setter/getter方法&lt;/span&gt;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;UserFollowRelation.java&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('60ad9aff-2272-4034-88c8-ae8a4dcecb09')&quot; readability=&quot;43.5&quot;&gt;&lt;img id=&quot;code_img_closed_60ad9aff-2272-4034-88c8-ae8a4dcecb09&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_60ad9aff-2272-4034-88c8-ae8a4dcecb09&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('60ad9aff-2272-4034-88c8-ae8a4dcecb09',event)&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_60ad9aff-2272-4034-88c8-ae8a4dcecb09&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;82&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; UserInfo {

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 用户ID&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; &lt;span&gt;long&lt;/span&gt;&lt;span&gt; userId;

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * user关注关系集合，关注侧和被关注侧维护的相同的、唯一的关系对象
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;private&lt;/span&gt; Map&amp;lt;UserFollowRelation, UserFollowRelation&amp;gt; userFollowRelationMap = &lt;span&gt;new&lt;/span&gt; HashMap&amp;lt;UserFollowRelation, UserFollowRelation&amp;gt;&lt;span&gt;();

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 判定给定用户是否是自己
     * 
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; UserInfo
     *            给定的用户
     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;&lt;span&gt; true —— 是本人 false —— 不是本人
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt;&lt;span&gt; isMyself(UserInfo userInfo) {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (userInfo == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
        }
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (userInfo.getUserId() == &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.getUserId()) {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
        }
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
    }

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 关注者 追随 被关注者 如果此人已经关注过指定的用户，则不再重复关注
     * 
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; followedUserId
     *            被关注者userId
     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;&lt;span&gt; followedUser 被关注者
     * &lt;/span&gt;&lt;span&gt;@throws&lt;/span&gt;&lt;span&gt; BusinessException
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;

    &lt;span&gt;public&lt;/span&gt; UserFollowRelation follow(&lt;span&gt;long&lt;/span&gt; followedUserId) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; BusinessException {
        UserInfo followedUser &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; UserInfo(followedUserId);
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.follow(followedUser);
    }

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 关注者 追随 被关注者 如果此人已经关注过指定的用户，则不再重复关注,单向
     * 
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; followedUser
     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;&lt;span&gt; followedUser 被关注者
     * &lt;/span&gt;&lt;span&gt;@throws&lt;/span&gt;&lt;span&gt; BusinessException
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; UserFollowRelation follow(UserInfo followedUser) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; BusinessException {

        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (followedUser == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
        }

        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.isMyself(followedUser)) {
            &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; BusinessException(MessageConst.CODE_1008);
        }

        UserFollowRelation followingRelationKeyOrInitial &lt;/span&gt;= FollowFactory.getUserFollowRelationInstance(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;,
                followedUser);

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 获取当前对象和需要关注对象的关系 A关注B&lt;/span&gt;
        UserFollowRelation followingSide = &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.userFollowRelationMap.get(followingRelationKeyOrInitial);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 获取当前对象和需要关注对象的关系 B被A关注了&lt;/span&gt;
        UserFollowRelation followedSide =&lt;span&gt; followedUser.userFollowRelationMap.get(followingRelationKeyOrInitial);

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 关注侧和被关注侧,只需要做一次判断即可(关系的原子性)&lt;/span&gt;
        &lt;span&gt;if&lt;/span&gt; (followingSide == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
            followingSide &lt;/span&gt;=&lt;span&gt; followingRelationKeyOrInitial;
            followingSide.setFollowType(FollowRelationConst.FOLLOW_TYPE_1);
            followingSide.setSource(FollowRelationConst.SOURCE_COMMUNITY);
            followingSide.setalreadyPersistentStatus(&lt;/span&gt;&lt;span&gt;false&lt;/span&gt;&lt;span&gt;);
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.userFollowRelationMap.put(followingRelationKeyOrInitial, followingSide);
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 同一份关系&lt;/span&gt;
            followedSide =&lt;span&gt; followingSide;
            followedUser.userFollowRelationMap.put(followingRelationKeyOrInitial, followedSide);
        }&lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (followingSide != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)) {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 如果有记录并且关注状态为未关注，则更改为关注&lt;/span&gt;
            followingSide.setFollowType(followingSide.getFollowType() != &lt;span&gt;null&lt;/span&gt; ?&lt;span&gt; followingSide.getFollowType()
                    : FollowRelationConst.FOLLOW_TYPE_1);
            followingSide.setSource(followingSide.getSource() &lt;/span&gt;!= &lt;span&gt;null&lt;/span&gt; ?&lt;span&gt; followingSide.getSource()
                    : FollowRelationConst.SOURCE_COMMUNITY);
            followingSide.setalreadyPersistentStatus(&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;);
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.userFollowRelationMap.put(followingRelationKeyOrInitial, followingSide);

            followedSide.setFollowType(followedSide.getFollowType() &lt;/span&gt;!= &lt;span&gt;null&lt;/span&gt; ?&lt;span&gt; followedSide.getFollowType()
                    : FollowRelationConst.FOLLOW_TYPE_1);
            followedSide.setSource(
                    followedSide.getSource() &lt;/span&gt;!= &lt;span&gt;null&lt;/span&gt; ?&lt;span&gt; followedSide.getSource() : FollowRelationConst.SOURCE_COMMUNITY);
            followedSide.setalreadyPersistentStatus(&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;);
            followedUser.userFollowRelationMap.put(followingRelationKeyOrInitial, followedSide);
        } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
            &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; BusinessException(MessageConst.CODE_1025);
        }

        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; followingSide;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; followed(&lt;span&gt;long&lt;/span&gt; followingUserId) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; BusinessException {
        UserInfo followedUser &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; UserInfo(followingUserId);
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.followed(followedUser);
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; followed(UserInfo followingUser) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; BusinessException {

        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (followingUser == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
        }

        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.isMyself(followingUser)) {
            &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; BusinessException(MessageConst.CODE_1008);
        }

        UserFollowRelation followedRelationKeyOrInitial &lt;/span&gt;=&lt;span&gt; FollowFactory.getUserFollowRelationInstance(followingUser,
                &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;);

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 获取当前对象和需要关注对象的关系 B被A关注&lt;/span&gt;
        UserFollowRelation followedSide =&lt;span&gt; followingUser.userFollowRelationMap.get(followedRelationKeyOrInitial);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 获取当前对象和需要关注对象的关系 A关注B&lt;/span&gt;
        UserFollowRelation followingSide = &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.userFollowRelationMap.get(followedRelationKeyOrInitial);

        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (followedSide == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
            followedSide &lt;/span&gt;=&lt;span&gt; followedRelationKeyOrInitial;
            followedSide.setFollowType(FollowRelationConst.FOLLOW_TYPE_1);
            followedSide.setSource(FollowRelationConst.SOURCE_COMMUNITY);
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.userFollowRelationMap.put(followedRelationKeyOrInitial, followedSide);
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 同一份关系&lt;/span&gt;
            followingSide =&lt;span&gt; followedSide;
            followingUser.userFollowRelationMap.put(followedRelationKeyOrInitial, followingSide);
        }&lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (followedSide != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 如果有记录并且关注状态为未关注，则更改为关注&lt;/span&gt;
            followedSide.setFollowType(followedSide.getFollowType() != &lt;span&gt;null&lt;/span&gt; ?&lt;span&gt; followedSide.getFollowType()
                    : FollowRelationConst.FOLLOW_TYPE_1);
            followedSide.setSource(
                    followedSide.getSource() &lt;/span&gt;!= &lt;span&gt;null&lt;/span&gt; ?&lt;span&gt; followedSide.getSource() : FollowRelationConst.SOURCE_COMMUNITY);
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.userFollowRelationMap.put(followedRelationKeyOrInitial, followedSide);

            followingSide.setFollowType(followingSide.getFollowType() &lt;/span&gt;!= &lt;span&gt;null&lt;/span&gt; ?&lt;span&gt; followingSide.getFollowType()
                    : FollowRelationConst.FOLLOW_TYPE_1);
            followingSide.setSource(followingSide.getSource() &lt;/span&gt;!= &lt;span&gt;null&lt;/span&gt; ?&lt;span&gt; followingSide.getSource()
                    : FollowRelationConst.SOURCE_COMMUNITY);
            followingUser.userFollowRelationMap.put(followedRelationKeyOrInitial, followingSide);
        }

    }

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 取消关注 返回 非null，则需改变数据库enable状态
     * 
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; followedUser
     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;&lt;span&gt;
     * &lt;/span&gt;&lt;span&gt;@throws&lt;/span&gt;&lt;span&gt; BusinessException
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; UserFollowRelation cancelFollow(UserInfo followedUser) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; BusinessException {

        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (followedUser == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
        }

        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.isMyself(followedUser)) {
            &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; BusinessException(MessageConst.CODE_1008);
        }

        UserFollowRelation cancelRelationKey &lt;/span&gt;= FollowFactory.getUserFollowRelationInstance(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;, followedUser);

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 1.关注端取消&lt;/span&gt;
        UserFollowRelation followingSide = &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.userFollowRelationMap.get(cancelRelationKey);

        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (followingSide == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
            &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; BusinessException(MessageConst.CODE_1023);
        }
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 2.被关注端取消&lt;/span&gt;
        UserFollowRelation followedSide =&lt;span&gt; followedUser.userFollowRelationMap.get(cancelRelationKey);

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 如果不为空,且已经关注，且状态有效&lt;/span&gt;
        &lt;span&gt;if&lt;/span&gt; (followingSide != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
            followingSide.setEnabled(FollowRelationConst.FOLLOW_ENABLED_0);
            followingSide.setSource(FollowRelationConst.SOURCE_COMMUNITY);&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 社区场景&lt;/span&gt;
&lt;span&gt;            followingSide.setFollowType(FollowRelationConst.FOLLOW_TYPE_1);
            &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.userFollowRelationMap.put(followingSide, followingSide);

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 如果不为空,且已经关注，且状态有效&lt;/span&gt;
&lt;span&gt;            followedSide.setEnabled(FollowRelationConst.FOLLOW_ENABLED_0);
            followedSide.setSource(FollowRelationConst.SOURCE_COMMUNITY);&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 社区场景&lt;/span&gt;
&lt;span&gt;            followedSide.setFollowType(FollowRelationConst.FOLLOW_TYPE_1);
            followedUser.userFollowRelationMap.put(followedSide, followedSide);
        } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
            &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt;&lt;span&gt; BusinessException(MessageConst.CODE_1024);
        }
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; followingSide;
    }

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 检查本人是否关注过指定的User,单向关系
     * 
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; userInfo
     *            指定的用户
     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;&lt;span&gt; boolean true —— 已经关注了指定的user false —— 还未关注指定的user，如果指定用户是自己，则也返回false
     * &lt;/span&gt;&lt;span&gt;@throws&lt;/span&gt;&lt;span&gt; BusinessException
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt;&lt;span&gt; hasFollowed(UserInfo userInfo) {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.isMyself(userInfo)) {
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
        } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
            UserFollowRelation FollowingRelation &lt;/span&gt;= &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.userFollowRelationMap
                    .get(FollowFactory.getUserFollowRelationInstance(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;, userInfo));
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (FollowingRelation != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
                &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
            }
        }
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
    }

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 检查本人与指定的FollowingUser的关注关系，和hasFollowed不一样的地方在于，该方法可以识别出‘互粉’，双向关系
     * 
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; userInfo
     *            指定的用户
     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;&lt;span&gt; String 1：自己 2：单粉 3：互粉 4:未关注
     * &lt;/span&gt;&lt;span&gt;@throws&lt;/span&gt;&lt;span&gt; BusinessException
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt;&lt;span&gt; String getFollowRelation(UserInfo followingUser) {
        String followState &lt;/span&gt;=&lt;span&gt; FollowRelationConst.FOLLOW_SIGN_4;
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.isMyself(followingUser)) {
            followState &lt;/span&gt;=&lt;span&gt; FollowRelationConst.FOLLOW_SIGN_1;
        } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
            &lt;/span&gt;&lt;span&gt;boolean&lt;/span&gt; AFollowB = &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.hasFollowed(followingUser);
            &lt;/span&gt;&lt;span&gt;boolean&lt;/span&gt; BFollowA = followingUser.hasFollowed(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;);
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (AFollowB == &lt;span&gt;true&lt;/span&gt; &amp;amp;&amp;amp; BFollowA == &lt;span&gt;true&lt;/span&gt;&lt;span&gt;) {
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; A关注 B,B也关注A&lt;/span&gt;
                followState =&lt;span&gt; FollowRelationConst.FOLLOW_SIGN_3;
            } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (AFollowB == &lt;span&gt;true&lt;/span&gt; || BFollowA == &lt;span&gt;true&lt;/span&gt;&lt;span&gt;) {
                followState &lt;/span&gt;=&lt;span&gt; FollowRelationConst.FOLLOW_SIGN_2;
            } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
                followState &lt;/span&gt;=&lt;span&gt; FollowRelationConst.FOLLOW_SIGN_4;
            }
        }
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; followState;
    }
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;ignore setter/getter&lt;/span&gt;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;UserInfo.java&lt;/span&gt;&lt;/div&gt;

&lt;p&gt;　　UserFollowRelation是一个值对象。&lt;/p&gt;
&lt;p&gt;　　&lt;strong&gt;NOTE：&lt;/strong&gt;UserInfo持有UserFollowRelation的表现形式为一个Map，且map的key和value均为同一个UserFollowRelation对象，这样做的目的是为了方便在hasFollowed等场景下，快速地根据（followingUserId和followedUserId）查找到一个UserFollowRelation，如果使用Set也可以实现，但是需要遍历整个Set，性能上有损耗。&lt;/p&gt;

&lt;p&gt;　　从上述建模过程中可以发现，我们最开始从‘查询关注关系’入手建模，得到的简易模型无法满足后续‘人关注人’、‘取消关注’两个场景，导致推翻重来。故，最好从模型的最复杂场景开始建模，而不是最简单场景。&lt;/p&gt;

</description>
<pubDate>Thu, 12 Oct 2017 14:59:00 +0000</pubDate>
<dc:creator>倒骑的驴</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/daoqidelv/p/7657785.html</dc:identifier>
</item>
<item>
<title>ImageSharp一个专注于NetCore平台图像处理的开源项目 - 神牛步行3</title>
<link>http://www.cnblogs.com/wangrudong003/p/7656842.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/wangrudong003/p/7656842.html</guid>
<description>&lt;p&gt;今天大家分享的是一个专注于NetCore平台图像处理的开源项目，老实说为这篇文章取名字想了5分钟，可能是词穷亦或是想更好的表达出这款开源项目的作用；这个项目在图像处理方面有很多功能，如：&lt;strong&gt;缩放，裁剪，绘画，组合图片&lt;/strong&gt;等；今天主要讲的是用她怎么来绘图和生成验证码的实际例子。&lt;/p&gt;
&lt;p&gt;号外：近来淘宝服装小店进了批新货，有需要购衣的朋友可以来看看，地址在文章最下方。&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;简单介绍ImageSharp&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;试试画两条线（实线和虚线）&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;生成个缩略图&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;在图片上画字&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;制作一个验证码图片&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;结合RazorPage模板，展示验证码图片&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ImageSharp是对NetCore平台扩展的一个图像处理方案，在写下本文为止它最新的nuget下载量为4,034次，作者团队最近一个月刚更新的包；没错这里说最新是因为她前身和之前的版本都很受欢迎下载量也超高；她的git项目地址：&lt;a href=&quot;https://github.com/SixLabors/ImageSharp&quot; target=&quot;_blank&quot;&gt;https://github.com/SixLabors/ImageSharp&lt;/a&gt;。如果您的项目和我一样是2.0版本（2.0以前的略过），那么直接可以通过vs的nuget控制台下载对应的包，注意绘图的话需要分别下载如下两个包：&lt;/p&gt;
&lt;p&gt; &lt;span class=&quot;cnblogs_code&quot;&gt;Install-Package SixLabors.ImageSharp -Version &lt;span&gt;1.0&lt;/span&gt;.&lt;span&gt;0&lt;/span&gt;-beta0001&lt;/span&gt; &lt;/p&gt;
&lt;p&gt; &lt;span class=&quot;cnblogs_code&quot;&gt;Install-Package SixLabors.ImageSharp.Drawing -Version &lt;span&gt;1.0&lt;/span&gt;.&lt;span&gt;0&lt;/span&gt;-beta0001&lt;/span&gt; &lt;/p&gt;
&lt;p&gt;ImageSharp用法有朋友之前写过，不过都主要针对于之前的版本，本章主要用到的都是最新的，有部分写法可能不相同。&lt;/p&gt;

&lt;p&gt;这里将用她来画两条直线并保存成图片，主要起到一个介绍作用，先来看实线如下代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
&lt;span&gt;var&lt;/span&gt; path = &lt;span&gt;@&quot;&lt;/span&gt;&lt;span&gt;D:\F\学习\vs2017\netcore\Study.AspNetCore\WebApp02-1\wwwroot\images&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;默认实线&lt;/span&gt;
            &lt;span&gt;using&lt;/span&gt; (Image&amp;lt;Rgba32&amp;gt; image = &lt;span&gt;new&lt;/span&gt; Image&amp;lt;Rgba32&amp;gt;(&lt;span&gt;500&lt;/span&gt;, &lt;span&gt;500&lt;/span&gt;))   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;画布大小&lt;/span&gt;
&lt;span&gt;            {
                image.Mutate(x &lt;/span&gt;=&amp;gt;&lt;span&gt; x.
                        BackgroundColor(Rgba32.WhiteSmoke).   &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;画布背景&lt;/span&gt;
&lt;span&gt;                            DrawLines(
                            Rgba32.HotPink, &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;字体颜色&lt;/span&gt;
                            &lt;span&gt;5&lt;/span&gt;,   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;字体大小&lt;/span&gt;
                            &lt;span&gt;new&lt;/span&gt;&lt;span&gt; SixLabors.Primitives.PointF[]{
                                    &lt;/span&gt;&lt;span&gt;new&lt;/span&gt; Vector2(&lt;span&gt;10&lt;/span&gt;, &lt;span&gt;10&lt;/span&gt;&lt;span&gt;),
                                    &lt;/span&gt;&lt;span&gt;new&lt;/span&gt; Vector2(&lt;span&gt;200&lt;/span&gt;, &lt;span&gt;150&lt;/span&gt;&lt;span&gt;),
                                    &lt;/span&gt;&lt;span&gt;new&lt;/span&gt; Vector2(&lt;span&gt;50&lt;/span&gt;, &lt;span&gt;300&lt;/span&gt;&lt;span&gt;)
                            } &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;两点一线坐标&lt;/span&gt;
&lt;span&gt;                        )
                    );

                image.Save($&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;{path}/1.png&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;保存&lt;/span&gt;
            }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 总要步骤我都备注上文字了，这里主要通过两点一线来绘制图形，&lt;strong&gt;Vector2&lt;/strong&gt;对象值得注意就是C#二维坐标(x,y)对象，其实除了Vector2还有&lt;strong&gt;Vector3&lt;/strong&gt;(三维坐标)等，这对于做u3d的朋友来说不会陌生，老实说这个也是我在接触u3d时候才知道有这个类的。下面来看效果图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/348819/201710/348819-20171012165151168-1112520209.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;由两个两点一线构造的一个角，下面来看下虚线绘制：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;虚线&lt;/span&gt;
            &lt;span&gt;using&lt;/span&gt; (Image&amp;lt;Rgba32&amp;gt; image = &lt;span&gt;new&lt;/span&gt; Image&amp;lt;Rgba32&amp;gt;(&lt;span&gt;500&lt;/span&gt;, &lt;span&gt;500&lt;/span&gt;))   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;画布大小&lt;/span&gt;
&lt;span&gt;            {
                image.Mutate(x &lt;/span&gt;=&amp;gt;&lt;span&gt; x.
                        BackgroundColor(Rgba32.WhiteSmoke).   &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;画布背景&lt;/span&gt;
&lt;span&gt;                            DrawLines(
                            Pens.Dash(Rgba32.HotPink, &lt;/span&gt;&lt;span&gt;5&lt;/span&gt;),   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;字体大小&lt;/span&gt;
                            &lt;span&gt;new&lt;/span&gt;&lt;span&gt; SixLabors.Primitives.PointF[]{
                                    &lt;/span&gt;&lt;span&gt;new&lt;/span&gt; Vector2(&lt;span&gt;10&lt;/span&gt;, &lt;span&gt;10&lt;/span&gt;&lt;span&gt;),
                                    &lt;/span&gt;&lt;span&gt;new&lt;/span&gt; Vector2(&lt;span&gt;200&lt;/span&gt;, &lt;span&gt;150&lt;/span&gt;&lt;span&gt;),
                                    &lt;/span&gt;&lt;span&gt;new&lt;/span&gt; Vector2(&lt;span&gt;50&lt;/span&gt;, &lt;span&gt;300&lt;/span&gt;&lt;span&gt;)
                            } &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;两点一线坐标&lt;/span&gt;
&lt;span&gt;                        )
                    );

                image.Save($&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;{path}/2.png&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;保存&lt;/span&gt;
            }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;步骤都差不多，只是调用了DrawLines的扩展方法而已，其他线条例子就不多说了各位自行实验。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/348819/201710/348819-20171012165609871-837238193.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;对于图片类型的网站来说缩略图是常见的，这里用ImageSharp生成缩略图很简单，本实例用8.png做样本来生成缩略图8-1.png，直接看例子如下是&lt;strong&gt;netstandard 1.3+&lt;/strong&gt;的例子：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
 &lt;span&gt;//&lt;/span&gt;&lt;span&gt;缩略图&lt;/span&gt;
            &lt;span&gt;using&lt;/span&gt; (Image&amp;lt;Rgba32&amp;gt; image = Image.Load($&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;{path}/8.png&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;))
            {
                image.Mutate(x &lt;/span&gt;=&amp;gt;&lt;span&gt; x
                     .Resize(image.Width &lt;/span&gt;/ &lt;span&gt;2&lt;/span&gt;, image.Height / &lt;span&gt;2&lt;/span&gt;&lt;span&gt;)
                     );
                image.Save($&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;{path}/8-1.png&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;为了更好的对比缩略图和原图的区别这里对接拿两图的属性做对比如：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/348819/201710/348819-20171012170437324-1100700019.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;能很好的看出&lt;strong&gt;缩略图文件大小和像素都减半&lt;/strong&gt;了，实际缩略的时候不一定减半，这全由参数控制Resize(width,height)；&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;画字：&lt;/strong&gt;在图片上画我们想要的字，其实类似于水印的一种需求，下面是在图片上画字的代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;画字 &lt;/span&gt;
            &lt;span&gt;var&lt;/span&gt; install_Family = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; FontCollection().Install(
                System.IO.Path.Combine(Directory.GetCurrentDirectory(), &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;wwwroot/bak&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;STKAITI.TTF&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;@&quot;C:\Windows\Fonts\STKAITI.TTF&quot;   &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;字体文件&lt;/span&gt;
&lt;span&gt;                );
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; font = &lt;span&gt;new&lt;/span&gt; Font(install_Family, &lt;span&gt;50&lt;/span&gt;);  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;字体&lt;/span&gt;
            &lt;span&gt;using&lt;/span&gt; (Image&amp;lt;Rgba32&amp;gt; image = Image.Load($&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;{path}/8.png&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;))
            {
                image.Mutate(x &lt;/span&gt;=&amp;gt;&lt;span&gt; x
                     .DrawText(
                        &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;你们好，我是神牛&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;文字内容&lt;/span&gt;
&lt;span&gt;                         font,
                         Rgba32.HotPink,
                         &lt;/span&gt;&lt;span&gt;new&lt;/span&gt; Vector2(&lt;span&gt;50&lt;/span&gt;, &lt;span&gt;150&lt;/span&gt;&lt;span&gt;),
                         TextGraphicsOptions.Default)
                     );
                image.Save($&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;{path}/8-2.png&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
            }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这里用ImageSharp在图片上画字的时候需要注意：&lt;strong&gt;字体&lt;/strong&gt;，因为windows系统自带了字体问题这里以STKAITI.TTF字体文件为例，它存储于 &lt;span class=&quot;cnblogs_code&quot;&gt;C:\Windows\Fonts\STKAITI.TTF&lt;/span&gt; 目录，当然您可以直接把它拷贝到我们项目中如下我这里的例子一样做法（这里只测试了windows下可用，尚未测试linux下直接使用该字体文件是否可行）；&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/348819/201710/348819-20171012172243496-221694858.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;下面我们将用她来画一个验证码类型的图片，通常验证码都有一些点和线来干扰，上面已经有画线例子了，这里展示怎么画点：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;画点（规则的点，其他的各位自行写算法） &lt;/span&gt;
            &lt;span&gt;var&lt;/span&gt; dianWith = &lt;span&gt;1&lt;/span&gt;; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;点宽度&lt;/span&gt;
            &lt;span&gt;var&lt;/span&gt; xx = &lt;span&gt;300&lt;/span&gt;;  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;图片宽度&lt;/span&gt;
            &lt;span&gt;var&lt;/span&gt; yy = &lt;span&gt;200&lt;/span&gt;;  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;图片高度&lt;/span&gt;

            &lt;span&gt;var&lt;/span&gt; xx_space = &lt;span&gt;10&lt;/span&gt;;  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;点与点之间x坐标间隔&lt;/span&gt;
            &lt;span&gt;var&lt;/span&gt; yy_space = &lt;span&gt;5&lt;/span&gt;;    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;y坐标间隔&lt;/span&gt;

            &lt;span&gt;var&lt;/span&gt; listPath = &lt;span&gt;new&lt;/span&gt; List&amp;lt;IPath&amp;gt;&lt;span&gt;();
            &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; xx / xx_space; i++&lt;span&gt;)
            {
                &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; j = &lt;span&gt;0&lt;/span&gt;; j &amp;lt; yy / yy_space; j++&lt;span&gt;)
                {
                    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; position = &lt;span&gt;new&lt;/span&gt; Vector2(i * xx_space, j *&lt;span&gt; yy_space);
                    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; linerLine = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; LinearLineSegment(position, position);
                    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; shapesPath = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; SixLabors.Shapes.Path(linerLine);
                    listPath.Add(shapesPath);
                }
            }

            &lt;/span&gt;&lt;span&gt;using&lt;/span&gt; (Image&amp;lt;Rgba32&amp;gt; image = &lt;span&gt;new&lt;/span&gt; Image&amp;lt;Rgba32&amp;gt;(xx, yy))   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;画布大小&lt;/span&gt;
&lt;span&gt;            {
                image.Mutate(x &lt;/span&gt;=&amp;gt;&lt;span&gt; x.
                        BackgroundColor(Rgba32.WhiteSmoke).   &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;画布背景&lt;/span&gt;
&lt;span&gt;                            Draw(
                            Pens.Dot(Rgba32.HotPink, dianWith),   &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;大小&lt;/span&gt;
                            &lt;span&gt;new&lt;/span&gt; SixLabors.Shapes.PathCollection(listPath)  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;坐标集合&lt;/span&gt;
&lt;span&gt;                        )
                    );
                image.Save($&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;{path}/9.png&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;); &lt;span&gt;//&lt;/span&gt;&lt;span&gt;保存&lt;/span&gt;
            }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这里直接利用IImageProcessingContext&amp;lt;TPixel&amp;gt;扩展方法Draw来绘制有规则的点，如图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/348819/201710/348819-20171012172833340-1368643123.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;比较单调，或许您们能做的更好看些；下面来做验证码图片，主要由：&lt;strong&gt;画点+画字=验证码图片&lt;/strong&gt;，这里我封装了一个方法直接生成验证码图片：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;52&quot;&gt;
&lt;pre&gt;
&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 画点+画字=验证码图片  
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;content&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;验证码&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;outImgPath&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;输出图片路径&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;fontFilePath&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;字体文件&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;x&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;图片宽度&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;y&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;图片高度&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; GetValidCode(
                    &lt;/span&gt;&lt;span&gt;string&lt;/span&gt; content = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;我是神牛&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                    &lt;/span&gt;&lt;span&gt;string&lt;/span&gt; outImgPath = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;D:/F/学习/vs2017/netcore/Study.AspNetCore/WebApp02-1/wwwroot/images/10.png&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                    &lt;/span&gt;&lt;span&gt;string&lt;/span&gt; fontFilePath = &lt;span&gt;@&quot;&lt;/span&gt;&lt;span&gt;D:\F\学习\vs2017\netcore\Study.AspNetCore\WebApp02-1\wwwroot\bak\STKAITI.TTF&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                    &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; xx = &lt;span&gt;150&lt;/span&gt;, &lt;span&gt;int&lt;/span&gt; yy = &lt;span&gt;25&lt;/span&gt;&lt;span&gt;)
        {
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; dianWith = &lt;span&gt;1&lt;/span&gt;; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;点宽度&lt;/span&gt;
            &lt;span&gt;var&lt;/span&gt; xx_space = &lt;span&gt;10&lt;/span&gt;;  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;点与点之间x坐标间隔&lt;/span&gt;
            &lt;span&gt;var&lt;/span&gt; yy_space = &lt;span&gt;5&lt;/span&gt;;    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;y坐标间隔&lt;/span&gt;
            &lt;span&gt;var&lt;/span&gt; wenZiLen = content.Length;  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;文字长度&lt;/span&gt;
            &lt;span&gt;var&lt;/span&gt; maxX = xx / wenZiLen; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;每个文字最大x宽度&lt;/span&gt;
            &lt;span&gt;var&lt;/span&gt; prevWenZiX = &lt;span&gt;0&lt;/span&gt;; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;前面一个文字的x坐标&lt;/span&gt;
            &lt;span&gt;var&lt;/span&gt; size = &lt;span&gt;16&lt;/span&gt;;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;字体大小

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;字体&lt;/span&gt;
            &lt;span&gt;var&lt;/span&gt; install_Family = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; FontCollection().Install(
              fontFilePath
              &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;@&quot;C:\Windows\Fonts\STKAITI.TTF&quot;   &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;windows系统下字体文件&lt;/span&gt;
&lt;span&gt;              );
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; font = &lt;span&gt;new&lt;/span&gt; Font(install_Family, size);  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;字体

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;点坐标&lt;/span&gt;
            &lt;span&gt;var&lt;/span&gt; listPath = &lt;span&gt;new&lt;/span&gt; List&amp;lt;IPath&amp;gt;&lt;span&gt;();
            &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; xx / xx_space; i++&lt;span&gt;)
            {
                &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; j = &lt;span&gt;0&lt;/span&gt;; j &amp;lt; yy / yy_space; j++&lt;span&gt;)
                {
                    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; position = &lt;span&gt;new&lt;/span&gt; Vector2(i * xx_space, j *&lt;span&gt; yy_space);
                    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; linerLine = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; LinearLineSegment(position, position);
                    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; shapesPath = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; SixLabors.Shapes.Path(linerLine);
                    listPath.Add(shapesPath);
                }
            }

            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;画图&lt;/span&gt;
            &lt;span&gt;using&lt;/span&gt; (Image&amp;lt;Rgba32&amp;gt; image = &lt;span&gt;new&lt;/span&gt; Image&amp;lt;Rgba32&amp;gt;(xx, yy))   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;画布大小&lt;/span&gt;
&lt;span&gt;            {
                image.Mutate(x &lt;/span&gt;=&amp;gt;&lt;span&gt;
                {
                    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;画点&lt;/span&gt;
                    &lt;span&gt;var&lt;/span&gt; imgProc = x.BackgroundColor(Rgba32.WhiteSmoke).   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;画布背景&lt;/span&gt;
&lt;span&gt;                              Draw(
                              Pens.Dot(Rgba32.HotPink, dianWith),   &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;大小&lt;/span&gt;
                              &lt;span&gt;new&lt;/span&gt; SixLabors.Shapes.PathCollection(listPath)  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;坐标集合&lt;/span&gt;
&lt;span&gt;                          );

                    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;逐个画字&lt;/span&gt;
                    &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; wenZiLen; i++&lt;span&gt;)
                    {
                        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;当前的要输出的字&lt;/span&gt;
                        &lt;span&gt;var&lt;/span&gt; nowWenZi = content.Substring(i, &lt;span&gt;1&lt;/span&gt;&lt;span&gt;);

                        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;文字坐标&lt;/span&gt;
                        &lt;span&gt;var&lt;/span&gt; wenXY = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Vector2();
                        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; maxXX = prevWenZiX + (maxX -&lt;span&gt; size);
                        wenXY.X &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Random().Next(prevWenZiX, maxXX);
                        wenXY.Y &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; Random().Next(&lt;span&gt;0&lt;/span&gt;, yy -&lt;span&gt; size);

                        prevWenZiX &lt;/span&gt;= Convert.ToInt32(Math.Floor(wenXY.X)) +&lt;span&gt; size;

                        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;画字&lt;/span&gt;
&lt;span&gt;                        imgProc.DrawText(
                           nowWenZi,   &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;文字内容&lt;/span&gt;
&lt;span&gt;                           font,
                           i &lt;/span&gt;% &lt;span&gt;2&lt;/span&gt; &amp;gt; &lt;span&gt;0&lt;/span&gt; ?&lt;span&gt; Rgba32.HotPink : Rgba32.Red,
                           wenXY,
                           TextGraphicsOptions.Default);
                    }
                });
                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;保存到图片&lt;/span&gt;
&lt;span&gt;                image.Save(outImgPath);
            }
        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;通过简单的调用 &lt;span class=&quot;cnblogs_code&quot;&gt;GetValidCode(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;我是神牛&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;);&lt;span&gt;return&lt;/span&gt; Page();&lt;/span&gt; 能得到如图验证码图片的效果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/348819/201710/348819-20171012173336059-13750781.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;文字看起来好像在点的前面，不过没关系只需要把画点和画字的先后顺序修改下就行了，这里不贴图了；&lt;/p&gt;

&lt;p&gt;上面一节是生成了验证码图片，当然实际场景中我们是不需要生成验证码物理图片的，只需要返回一个流或base64等方式输出到web界面上就行了，我们可以来看看 &lt;span class=&quot;cnblogs_code&quot;&gt;Image&amp;lt;TPixel&amp;gt;&lt;/span&gt; 保存时候的扩展方法：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; onclick=&quot;cnblogs_code_show('d65efbe0-b892-4b44-946b-b06d34eb20f5')&quot; readability=&quot;49&quot;&gt;&lt;img id=&quot;code_img_closed_d65efbe0-b892-4b44-946b-b06d34eb20f5&quot; class=&quot;code_img_closed&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_d65efbe0-b892-4b44-946b-b06d34eb20f5&quot; class=&quot;code_img_opened&quot; onclick=&quot;cnblogs_code_hide('d65efbe0-b892-4b44-946b-b06d34eb20f5',event)&quot; src=&quot;http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_d65efbe0-b892-4b44-946b-b06d34eb20f5&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;93&quot;&gt;
&lt;pre&gt;
        &lt;span&gt;//&lt;/span&gt;
        &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 摘要:
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;     Saves the image to the given stream using the currently loaded image format.
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;
        &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 参数:
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;   source:
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;     The source image
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;
        &lt;span&gt;//&lt;/span&gt;&lt;span&gt;   filePath:
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;     The file path to save the image to.
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;
        &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 类型参数:
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;   TPixel:
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;     The Pixel format.
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;
        &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 异常:
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;   T:System.ArgumentNullException:
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;     Thrown if the stream is null.&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; Save&amp;lt;TPixel&amp;gt;(&lt;span&gt;this&lt;/span&gt; Image&amp;lt;TPixel&amp;gt; source, &lt;span&gt;string&lt;/span&gt; filePath) &lt;span&gt;where&lt;/span&gt; TPixel : &lt;span&gt;struct&lt;/span&gt;, IPixel&amp;lt;TPixel&amp;gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;
        &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 摘要:
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;     Saves the image to the given stream using the currently loaded image format.
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;
        &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 参数:
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;   source:
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;     The source image
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;
        &lt;span&gt;//&lt;/span&gt;&lt;span&gt;   filePath:
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;     The file path to save the image to.
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;
        &lt;span&gt;//&lt;/span&gt;&lt;span&gt;   encoder:
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;     The encoder to save the image with.
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;
        &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 类型参数:
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;   TPixel:
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;     The Pixel format.
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;
        &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 异常:
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;   T:System.ArgumentNullException:
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;     Thrown if the encoder is null.&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; Save&amp;lt;TPixel&amp;gt;(&lt;span&gt;this&lt;/span&gt; Image&amp;lt;TPixel&amp;gt; source, &lt;span&gt;string&lt;/span&gt; filePath, IImageEncoder encoder) &lt;span&gt;where&lt;/span&gt; TPixel : &lt;span&gt;struct&lt;/span&gt;, IPixel&amp;lt;TPixel&amp;gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;
        &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 摘要:
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;     Saves the image to the given stream using the currently loaded image format.
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;
        &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 参数:
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;   source:
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;     The source image
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;
        &lt;span&gt;//&lt;/span&gt;&lt;span&gt;   stream:
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;     The stream to save the image to.
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;
        &lt;span&gt;//&lt;/span&gt;&lt;span&gt;   format:
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;     The format to save the image to.
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;
        &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 类型参数:
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;   TPixel:
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;     The Pixel format.
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;
        &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 异常:
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;   T:System.ArgumentNullException:
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;     Thrown if the stream is null.&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; Save&amp;lt;TPixel&amp;gt;(&lt;span&gt;this&lt;/span&gt; Image&amp;lt;TPixel&amp;gt; source, Stream stream, IImageFormat format) &lt;span&gt;where&lt;/span&gt; TPixel : &lt;span&gt;struct&lt;/span&gt;, IPixel&amp;lt;TPixel&amp;gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;
        &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 摘要:
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;     Saves the image to the given stream with the bmp format.
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;
        &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 参数:
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;   source:
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;     The image this method extends.
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;
        &lt;span&gt;//&lt;/span&gt;&lt;span&gt;   stream:
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;     The stream to save the image to.
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;
        &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 类型参数:
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;   TPixel:
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;     The pixel format.
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;
        &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 异常:
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;   T:System.ArgumentNullException:
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;     Thrown if the stream is null.&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; SaveAsBmp&amp;lt;TPixel&amp;gt;(&lt;span&gt;this&lt;/span&gt; Image&amp;lt;TPixel&amp;gt; source, Stream stream) &lt;span&gt;where&lt;/span&gt; TPixel : &lt;span&gt;struct&lt;/span&gt;, IPixel&amp;lt;TPixel&amp;gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;
        &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 摘要:
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;     Saves the image to the given stream with the bmp format.
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;
        &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 参数:
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;   source:
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;     The image this method extends.
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;
        &lt;span&gt;//&lt;/span&gt;&lt;span&gt;   stream:
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;     The stream to save the image to.
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;
        &lt;span&gt;//&lt;/span&gt;&lt;span&gt;   encoder:
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;     The encoder to save the image with.
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;
        &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 类型参数:
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;   TPixel:
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;     The pixel format.
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;
        &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 异常:
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;   T:System.ArgumentNullException:
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;     Thrown if the stream is null.&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; SaveAsBmp&amp;lt;TPixel&amp;gt;(&lt;span&gt;this&lt;/span&gt; Image&amp;lt;TPixel&amp;gt; source, Stream stream, BmpEncoder encoder) &lt;span&gt;where&lt;/span&gt; TPixel : &lt;span&gt;struct&lt;/span&gt;, IPixel&amp;lt;TPixel&amp;gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;
        &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 摘要:
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;     Saves the image to the given stream with the gif format.
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;
        &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 参数:
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;   source:
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;     The image this method extends.
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;
        &lt;span&gt;//&lt;/span&gt;&lt;span&gt;   stream:
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;     The stream to save the image to.
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;
        &lt;span&gt;//&lt;/span&gt;&lt;span&gt;   encoder:
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;     The options for the encoder.
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;
        &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 类型参数:
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;   TPixel:
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;     The pixel format.
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;
        &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 异常:
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;   T:System.ArgumentNullException:
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;     Thrown if the stream is null.&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; SaveAsGif&amp;lt;TPixel&amp;gt;(&lt;span&gt;this&lt;/span&gt; Image&amp;lt;TPixel&amp;gt; source, Stream stream, GifEncoder encoder) &lt;span&gt;where&lt;/span&gt; TPixel : &lt;span&gt;struct&lt;/span&gt;, IPixel&amp;lt;TPixel&amp;gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;
        &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 摘要:
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;     Saves the image to the given stream with the gif format.
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;
        &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 参数:
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;   source:
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;     The image this method extends.
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;
        &lt;span&gt;//&lt;/span&gt;&lt;span&gt;   stream:
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;     The stream to save the image to.
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;
        &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 类型参数:
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;   TPixel:
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;     The pixel format.
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;
        &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 异常:
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;   T:System.ArgumentNullException:
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;     Thrown if the stream is null.&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; SaveAsGif&amp;lt;TPixel&amp;gt;(&lt;span&gt;this&lt;/span&gt; Image&amp;lt;TPixel&amp;gt; source, Stream stream) &lt;span&gt;where&lt;/span&gt; TPixel : &lt;span&gt;struct&lt;/span&gt;, IPixel&amp;lt;TPixel&amp;gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;
        &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 摘要:
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;     Saves the image to the given stream with the jpeg format.
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;
        &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 参数:
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;   source:
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;     The image this method extends.
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;
        &lt;span&gt;//&lt;/span&gt;&lt;span&gt;   stream:
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;     The stream to save the image to.
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;
        &lt;span&gt;//&lt;/span&gt;&lt;span&gt;   encoder:
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;     The options for the encoder.
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;
        &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 类型参数:
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;   TPixel:
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;     The pixel format.
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;
        &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 异常:
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;   T:System.ArgumentNullException:
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;     Thrown if the stream is null.&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; SaveAsJpeg&amp;lt;TPixel&amp;gt;(&lt;span&gt;this&lt;/span&gt; Image&amp;lt;TPixel&amp;gt; source, Stream stream, JpegEncoder encoder) &lt;span&gt;where&lt;/span&gt; TPixel : &lt;span&gt;struct&lt;/span&gt;, IPixel&amp;lt;TPixel&amp;gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;
        &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 摘要:
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;     Saves the image to the given stream with the jpeg format.
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;
        &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 参数:
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;   source:
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;     The image this method extends.
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;
        &lt;span&gt;//&lt;/span&gt;&lt;span&gt;   stream:
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;     The stream to save the image to.
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;
        &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 类型参数:
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;   TPixel:
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;     The pixel format.
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;
        &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 异常:
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;   T:System.ArgumentNullException:
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;     Thrown if the stream is null.&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; SaveAsJpeg&amp;lt;TPixel&amp;gt;(&lt;span&gt;this&lt;/span&gt; Image&amp;lt;TPixel&amp;gt; source, Stream stream) &lt;span&gt;where&lt;/span&gt; TPixel : &lt;span&gt;struct&lt;/span&gt;, IPixel&amp;lt;TPixel&amp;gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;
        &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 摘要:
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;     Saves the image to the given stream with the png format.
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;
        &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 参数:
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;   source:
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;     The image this method extends.
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;
        &lt;span&gt;//&lt;/span&gt;&lt;span&gt;   stream:
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;     The stream to save the image to.
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;
        &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 类型参数:
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;   TPixel:
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;     The pixel format.
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;
        &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 异常:
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;   T:System.ArgumentNullException:
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;     Thrown if the stream is null.&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; SaveAsPng&amp;lt;TPixel&amp;gt;(&lt;span&gt;this&lt;/span&gt; Image&amp;lt;TPixel&amp;gt; source, Stream stream) &lt;span&gt;where&lt;/span&gt; TPixel : &lt;span&gt;struct&lt;/span&gt;, IPixel&amp;lt;TPixel&amp;gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;
        &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 摘要:
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;     Saves the image to the given stream with the png format.
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;
        &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 参数:
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;   source:
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;     The image this method extends.
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;
        &lt;span&gt;//&lt;/span&gt;&lt;span&gt;   stream:
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;     The stream to save the image to.
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;
        &lt;span&gt;//&lt;/span&gt;&lt;span&gt;   encoder:
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;     The options for the encoder.
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;
        &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 类型参数:
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;   TPixel:
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;     The pixel format.
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;
        &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 异常:
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;   T:System.ArgumentNullException:
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;     Thrown if the stream is null.&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; SaveAsPng&amp;lt;TPixel&amp;gt;(&lt;span&gt;this&lt;/span&gt; Image&amp;lt;TPixel&amp;gt; source, Stream stream, PngEncoder encoder) &lt;span&gt;where&lt;/span&gt; TPixel : &lt;span&gt;struct&lt;/span&gt;, IPixel&amp;lt;TPixel&amp;gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;
        &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 摘要:
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;     Saves the raw image to the given bytes.
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;
        &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 参数:
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;   source:
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;     The source image
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;
        &lt;span&gt;//&lt;/span&gt;&lt;span&gt;   buffer:
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;     The buffer to save the raw pixel data to.
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;
        &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 类型参数:
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;   TPixel:
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;     The Pixel format.
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;
        &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 异常:
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;   T:System.ArgumentNullException:
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;     Thrown if the stream is null.&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; SavePixelData&amp;lt;TPixel&amp;gt;(&lt;span&gt;this&lt;/span&gt; ImageFrame&amp;lt;TPixel&amp;gt; source, &lt;span&gt;byte&lt;/span&gt;[] buffer) &lt;span&gt;where&lt;/span&gt; TPixel : &lt;span&gt;struct&lt;/span&gt;, IPixel&amp;lt;TPixel&amp;gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;
        &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 摘要:
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;     Saves the raw image to the given bytes.
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;
        &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 参数:
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;   source:
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;     The source image
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;
        &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 类型参数:
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;   TPixel:
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;     The Pixel format.
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;
        &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 返回结果:
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;     A copy of the pixel data as bytes from this frame.
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;
        &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 异常:
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;   T:System.ArgumentNullException:
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;     Thrown if the stream is null.&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;byte&lt;/span&gt;[] SavePixelData&amp;lt;TPixel&amp;gt;(&lt;span&gt;this&lt;/span&gt; ImageFrame&amp;lt;TPixel&amp;gt; source) &lt;span&gt;where&lt;/span&gt; TPixel : &lt;span&gt;struct&lt;/span&gt;, IPixel&amp;lt;TPixel&amp;gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;
        &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 摘要:
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;     Saves the raw image to the given bytes.
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;
        &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 参数:
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;   source:
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;     The source image
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;
        &lt;span&gt;//&lt;/span&gt;&lt;span&gt;   buffer:
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;     The buffer to save the raw pixel data to.
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;
        &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 类型参数:
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;   TPixel:
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;     The Pixel format.
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;
        &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 异常:
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;   T:System.ArgumentNullException:
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;     Thrown if the stream is null.&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; SavePixelData&amp;lt;TPixel&amp;gt;(&lt;span&gt;this&lt;/span&gt; Image&amp;lt;TPixel&amp;gt; source, &lt;span&gt;byte&lt;/span&gt;[] buffer) &lt;span&gt;where&lt;/span&gt; TPixel : &lt;span&gt;struct&lt;/span&gt;, IPixel&amp;lt;TPixel&amp;gt;;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;好吧有点多，我们只需要明白她能转base64，stream，保存为图片等就行了；这里我们将用到 &lt;span class=&quot;cnblogs_code&quot;&gt;SaveAsPng(Stream)&lt;/span&gt; 方法，然后获取他的byte[]，如下代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;51&quot;&gt;
&lt;pre&gt;
&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 画点+画字=验证码byte[]
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;content&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;验证码&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;outImgPath&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;输出图片路径&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;fontFilePath&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;字体文件&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;x&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;图片宽度&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;y&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;图片高度&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt; &lt;span&gt;byte&lt;/span&gt;&lt;span&gt;[] GetValidCodeByte(
                    &lt;/span&gt;&lt;span&gt;string&lt;/span&gt; content = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;我是神牛&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                    &lt;/span&gt;&lt;span&gt;string&lt;/span&gt; fontFilePath = &lt;span&gt;@&quot;&lt;/span&gt;&lt;span&gt;D:\F\学习\vs2017\netcore\Study.AspNetCore\WebApp02-1\wwwroot\bak\STKAITI.TTF&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,
                    &lt;/span&gt;&lt;span&gt;int&lt;/span&gt; xx = &lt;span&gt;150&lt;/span&gt;, &lt;span&gt;int&lt;/span&gt; yy = &lt;span&gt;25&lt;/span&gt;&lt;span&gt;)
        {
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; bb = &lt;span&gt;default&lt;/span&gt;(&lt;span&gt;byte&lt;/span&gt;&lt;span&gt;[]);
            &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt;
            {
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; dianWith = &lt;span&gt;1&lt;/span&gt;; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;点宽度&lt;/span&gt;
                &lt;span&gt;var&lt;/span&gt; xx_space = &lt;span&gt;10&lt;/span&gt;;  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;点与点之间x坐标间隔&lt;/span&gt;
                &lt;span&gt;var&lt;/span&gt; yy_space = &lt;span&gt;5&lt;/span&gt;;    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;y坐标间隔&lt;/span&gt;
                &lt;span&gt;var&lt;/span&gt; wenZiLen = content.Length;  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;文字长度&lt;/span&gt;
                &lt;span&gt;var&lt;/span&gt; maxX = xx / wenZiLen; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;每个文字最大x宽度&lt;/span&gt;
                &lt;span&gt;var&lt;/span&gt; prevWenZiX = &lt;span&gt;0&lt;/span&gt;; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;前面一个文字的x坐标&lt;/span&gt;
                &lt;span&gt;var&lt;/span&gt; size = &lt;span&gt;16&lt;/span&gt;;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;字体大小

                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;字体&lt;/span&gt;
                &lt;span&gt;var&lt;/span&gt; install_Family = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; FontCollection().Install(
                  fontFilePath
                  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;@&quot;C:\Windows\Fonts\STKAITI.TTF&quot;   &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;windows系统下字体文件&lt;/span&gt;
&lt;span&gt;                  );
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; font = &lt;span&gt;new&lt;/span&gt; Font(install_Family, size);  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;字体

                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;点坐标&lt;/span&gt;
                &lt;span&gt;var&lt;/span&gt; listPath = &lt;span&gt;new&lt;/span&gt; List&amp;lt;IPath&amp;gt;&lt;span&gt;();
                &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; xx / xx_space; i++&lt;span&gt;)
                {
                    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; j = &lt;span&gt;0&lt;/span&gt;; j &amp;lt; yy / yy_space; j++&lt;span&gt;)
                    {
                        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; position = &lt;span&gt;new&lt;/span&gt; Vector2(i * xx_space, j *&lt;span&gt; yy_space);
                        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; linerLine = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; LinearLineSegment(position, position);
                        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; shapesPath = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; SixLabors.Shapes.Path(linerLine);
                        listPath.Add(shapesPath);
                    }
                }

                &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;画图&lt;/span&gt;
                &lt;span&gt;using&lt;/span&gt; (Image&amp;lt;Rgba32&amp;gt; image = &lt;span&gt;new&lt;/span&gt; Image&amp;lt;Rgba32&amp;gt;(xx, yy))   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;画布大小&lt;/span&gt;
&lt;span&gt;                {
                    image.Mutate(x &lt;/span&gt;=&amp;gt;&lt;span&gt;
                    {
                        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; imgProc =&lt;span&gt; x;

                        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;逐个画字&lt;/span&gt;
                        &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; wenZiLen; i++&lt;span&gt;)
                        {
                            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;当前的要输出的字&lt;/span&gt;
                            &lt;span&gt;var&lt;/span&gt; nowWenZi = content.Substring(i, &lt;span&gt;1&lt;/span&gt;&lt;span&gt;);

                            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;文字坐标&lt;/span&gt;
                            &lt;span&gt;var&lt;/span&gt; wenXY = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Vector2();
                            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; maxXX = prevWenZiX + (maxX -&lt;span&gt; size);
                            wenXY.X &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Random().Next(prevWenZiX, maxXX);
                            wenXY.Y &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; Random().Next(&lt;span&gt;0&lt;/span&gt;, yy -&lt;span&gt; size);

                            prevWenZiX &lt;/span&gt;= Convert.ToInt32(Math.Floor(wenXY.X)) +&lt;span&gt; size;

                            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;画字&lt;/span&gt;
&lt;span&gt;                            imgProc.DrawText(
                                   nowWenZi,   &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;文字内容&lt;/span&gt;
&lt;span&gt;                                   font,
                                   i &lt;/span&gt;% &lt;span&gt;2&lt;/span&gt; &amp;gt; &lt;span&gt;0&lt;/span&gt; ?&lt;span&gt; Rgba32.HotPink : Rgba32.Red,
                                   wenXY,
                                   TextGraphicsOptions.Default);
                        }

                        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;画点 &lt;/span&gt;
                        imgProc.BackgroundColor(Rgba32.WhiteSmoke).   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;画布背景&lt;/span&gt;
&lt;span&gt;                                     Draw(
                                     Pens.Dot(Rgba32.HotPink, dianWith),   &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;大小&lt;/span&gt;
                                     &lt;span&gt;new&lt;/span&gt; SixLabors.Shapes.PathCollection(listPath)  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;坐标集合&lt;/span&gt;
&lt;span&gt;                                 );
                    });
                    &lt;/span&gt;&lt;span&gt;using&lt;/span&gt; (MemoryStream stream = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; MemoryStream())
                    {
                        image.SaveAsPng(stream);
                        bb &lt;/span&gt;=&lt;span&gt; stream.GetBuffer();
                    }
                }
            }
            &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception ex)
            {
            }
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; bb;
        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;该方法返回了一个byte[]数组，然后通过HttpGet方式请求Razor接口，前端就能够获取到这个验证码图片byte[]了；&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; Get获取验证码图片byte[]
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
        &lt;span&gt;public&lt;/span&gt;&lt;span&gt; FileResult OnGetValidCode()
        {
            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; codebb = GetValidCodeByte(DateTime.Now.ToString(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;mmssfff&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;));
            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; File(codebb, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;image/png&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
        }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;我们通过get请求获取验证码： &lt;span class=&quot;cnblogs_code&quot;&gt;http:&lt;span&gt;//&lt;/span&gt;&lt;span&gt;localhost:1120/login?handler=ValidCode&lt;/span&gt;&lt;/span&gt; ，然后得到如图效果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/348819/201710/348819-20171012174836699-430893917.gif&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;本篇内容到此就结束了，如果对您有好的帮助，不妨点个“赞”；一起努力推动NetCore发展吧，谢谢。&lt;/p&gt;
</description>
<pubDate>Thu, 12 Oct 2017 14:48:00 +0000</pubDate>
<dc:creator>神牛步行3</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/wangrudong003/p/7656842.html</dc:identifier>
</item>
<item>
<title>谈谈用户体验中的表单设计-理论篇 - 撩撩浮云</title>
<link>http://www.cnblogs.com/oumindblogs/p/7658522.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/oumindblogs/p/7658522.html</guid>
<description>&lt;div data-mce-=&quot;&quot; readability=&quot;13&quot;&gt;
&lt;p&gt;&lt;span&gt;大多数情况，开发人员都比较烦UI和交互，如果公司有专门配备UI和交互工程师，那么开发人员就可以省事很多，专注于业务代码的实现，但据我了解很多小公司则没这么幸运了，所以，我认为开发人员多了解设计方面的知识对自己也是一种能力的提升，不用总被产品经理手撕了。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;下图为PC端触摸屏产品的2个登录表单，仅从用户交互层面考虑，哪个表单登录效率高？&lt;/p&gt;
&lt;/div&gt;
&lt;div data-mce-=&quot;&quot;&gt;
&lt;p&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/514709/201710/514709-20171012222749262-633331992.png&quot; alt=&quot;&quot; width=&quot;371&quot; height=&quot;290&quot;/&gt;     &lt;img src=&quot;http://images2017.cnblogs.com/blog/514709/201710/514709-20171012222756590-1422600555.png&quot; alt=&quot;&quot; width=&quot;359&quot; height=&quot;290&quot;/&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;                                   图1                                                                                  图2&lt;/p&gt;

&lt;p&gt;       大家暂且将PC端触摸屏产品理解为像是高铁站自助取票的设备吧。在这种类似的PC端触摸屏产品中，人机交互应该做到尽量流程简化，提升效率，才能给用户带来好的用户体验，同时也提升了业务应用场景的效率。&lt;/p&gt;
&lt;p&gt;       图1的用户角色采用的是下拉框隐藏控件，图2的用户角色是直截了当的呈现。当用户需要切换用户角色登录系统时，那么图1需要点击2次才能选中其它用户角色进行登录；图2则只需要点击1次就能选中其它用户角色进行登录。&lt;/p&gt;
&lt;p&gt;      所以，单从用户交互层面来讲，图2切换用户角色登录系统的效率高。可能有人会说了，至于吗？才多这么一步操作无伤大雅！嗯！举这个例子我只是想说明一点：&lt;strong&gt;做产品一定要遵循用户体验至上原则，千万不要小看细节，好的用户体验都是在每一个微乎其微的细节中进行打磨提升的。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;通过学习前辈总结的关于表单设计中的如何提升用户体验，结合自身工作，下面总结了我认为很重要的10点设计原则，仅供参考：&lt;/p&gt;


&lt;p&gt;&lt;strong&gt;设计原则1：尽量单列、纵向布局&lt;/strong&gt;&lt;/p&gt;
&lt;div data-mce-=&quot;&quot;&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/514709/201710/514709-20171012222843293-547136320.png&quot; alt=&quot;&quot; width=&quot;695&quot; height=&quot;281&quot;/&gt;&lt;/div&gt;
&lt;div data-mce-=&quot;&quot;&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/514709/201710/514709-20171012222919574-452999365.png&quot; alt=&quot;&quot; width=&quot;718&quot; height=&quot;258&quot;/&gt;&lt;/div&gt;
&lt;p&gt;多列布局会扰乱用户垂直方向的视线移动，纵向排列能加快浏览速度。 因为人的眼球移动从上向下更加集中，从左到右浏览，视野范围广，浏览效率没有纵向排列高。&lt;/p&gt;


&lt;p&gt;&lt;strong&gt;设计原则2：标签应顶部对齐&lt;/strong&gt;&lt;/p&gt;
&lt;div data-mce-=&quot;&quot;&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/514709/201710/514709-20171012222933043-1671068843.png&quot; alt=&quot;&quot; width=&quot;606&quot; height=&quot;289&quot;/&gt;&lt;/div&gt;
&lt;p&gt;数据项少：顶部标签能让用户更快完成浏览，也易于移植到移动端。&lt;/p&gt;
&lt;p&gt;数据项多：左侧标签能够减少高度，因为它们在一起更易于浏览。&lt;/p&gt;


&lt;p&gt;&lt;strong&gt;设计原则3：选项少于6个，全部展示出来&lt;/strong&gt;&lt;/p&gt;
&lt;div data-mce-=&quot;&quot;&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/514709/201710/514709-20171012222942902-1310074820.png&quot; alt=&quot;&quot; width=&quot;670&quot; height=&quot;305&quot;/&gt;&lt;/div&gt;
&lt;p&gt;把选项放入下拉选单需要用户进行两次点击，还会把选项隐藏起来。超过5项才使用下拉选框。如果超过25个选项，就要在下拉菜单中加入搜索。&lt;/p&gt;


&lt;p&gt;&lt;strong&gt;设计原则4：内容验证对错应合理和及时&lt;/strong&gt;&lt;/p&gt;
&lt;div data-mce-=&quot;&quot;&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/514709/201710/514709-20171012223011559-949922882.png&quot; alt=&quot;&quot; width=&quot;674&quot; height=&quot;311&quot;/&gt;&lt;/div&gt;
&lt;p&gt;告诉用户是哪里出错了，并说明出错的具体原因。&lt;/p&gt;

&lt;div data-mce-=&quot;&quot;&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/514709/201710/514709-20171012223021199-1570933748.png&quot; alt=&quot;&quot; width=&quot;685&quot; height=&quot;263&quot;/&gt;&lt;/div&gt;
&lt;p&gt;别在用户打字的时候进行逐行验证，除非这对他们有帮助——例如创建密码、用户名之类，或者字符数提示信息。&lt;/p&gt;


&lt;p&gt;&lt;strong&gt;设计原则5：区分主次操作项&lt;/strong&gt;&lt;/p&gt;
&lt;div data-mce-=&quot;&quot;&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/514709/201710/514709-20171012223029152-395883770.png&quot; alt=&quot;&quot; width=&quot;628&quot; height=&quot;278&quot;/&gt;&lt;/div&gt;
&lt;p&gt;主要操作应重点突出，如Sign Up按钮是我们希望用户去点击的，那么就通过深色背景突出，吸引和引导用户去点击。大家有卸载过某杀毒软件吧？它们就是恶心的把取消卸载按钮做成深色，一不留心就点中了，还以为是卸载了呢！我个人觉得这点小聪明还是别去干了！&lt;/p&gt;


&lt;p&gt;&lt;strong&gt;设计原则6：抛弃星号*，标出选填项&lt;/strong&gt;&lt;/p&gt;
&lt;div data-mce-=&quot;&quot;&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/514709/201710/514709-20171012223036980-2085629393.png&quot; alt=&quot;&quot; width=&quot;626&quot; height=&quot;300&quot;/&gt;&lt;/div&gt;
&lt;p&gt;必填项比选填项要多的时候，标出选填项，避免*号过多打扰用户浏览界面的简洁性。&lt;/p&gt;


&lt;p&gt;&lt;strong&gt;设计原则7：把相关信息分类编组&lt;/strong&gt;&lt;/p&gt;
&lt;div data-mce-=&quot;&quot;&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/514709/201710/514709-20171012223045949-506285413.png&quot; alt=&quot;&quot; width=&quot;540&quot; height=&quot;699&quot;/&gt;&lt;/div&gt;

&lt;p&gt;用户会分块思考，太长的表单会让人眼花缭乱。创建符合逻辑的分组，用户会更容易理解表单。&lt;/p&gt;


&lt;p&gt;&lt;strong&gt;设计原则8：对特定数字序列按规则划分&lt;/strong&gt;&lt;/p&gt;
&lt;div data-mce-=&quot;&quot;&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/514709/201710/514709-20171012223055434-264467468.png&quot; alt=&quot;&quot; width=&quot;521&quot; height=&quot;279&quot;/&gt;&lt;/div&gt;


&lt;div data-mce-=&quot;&quot;&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/514709/201710/514709-20171012223105730-155208593.png&quot; alt=&quot;&quot; width=&quot;521&quot; height=&quot;267&quot;/&gt;&lt;/div&gt;
&lt;p&gt;人的短期记忆是有限的，按特定规则划分，有利于用户阅读、编辑、校对。&lt;/p&gt;


&lt;p&gt;&lt;strong&gt;设计原则9：增加一键清空Icon，方便重新输入&lt;/strong&gt;&lt;/p&gt;
&lt;div data-mce-=&quot;&quot;&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/514709/201710/514709-20171012230143902-1358432909.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;p&gt;一个是只需要点一次就能清空，一个需要长按一段时间或者连续按多次才能清空，孰优孰劣可想而知。&lt;/p&gt;


&lt;p&gt;&lt;strong&gt;设计原则10：能让用户选择的就不要让用户输入&lt;/strong&gt;&lt;/p&gt;
&lt;div data-mce-=&quot;&quot;&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/514709/201710/514709-20171012224158746-924860861.png&quot; alt=&quot;&quot; width=&quot;629&quot; height=&quot;578&quot;/&gt;&lt;/div&gt;
&lt;p&gt;用户并没有我们想象的那么勤奋，默认给用户做好选择。&lt;/p&gt;

&lt;p&gt;-------------------------------------------------邪恶的分割线-----------------------------------------&lt;/p&gt;
&lt;p&gt;下图为&lt;span data-mce-=&quot;&quot;&gt;我们几年前最早版本微信公众号的访客预约表单设计，感兴趣的伙伴可以针对上面所学的设计原则练练手，看看如何改进才使得这个界面让你想用或是用的爽！也请期待我的下一篇文章对这个案例的说明和改进！&lt;/span&gt;&lt;/p&gt;

&lt;div data-mce-=&quot;&quot;&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/514709/201710/514709-20171012224243355-1168905303.png&quot; alt=&quot;&quot; width=&quot;338&quot; height=&quot;683&quot;/&gt;  &lt;img src=&quot;http://images2017.cnblogs.com/blog/514709/201710/514709-20171012224256496-1691411049.png&quot; alt=&quot;&quot; width=&quot;362&quot; height=&quot;685&quot;/&gt;&lt;/div&gt;
</description>
<pubDate>Thu, 12 Oct 2017 14:22:00 +0000</pubDate>
<dc:creator>撩撩浮云</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/oumindblogs/p/7658522.html</dc:identifier>
</item>
<item>
<title>实战之elasticsearch集群及filebeat server和logstash server - JevonWei</title>
<link>http://www.cnblogs.com/JevonWei/p/7658512.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/JevonWei/p/7658512.html</guid>
<description>&lt;p&gt;&lt;strong&gt;author：JevonWei&lt;/strong&gt;&lt;br/&gt;&lt;strong&gt;版权声明：原创作品&lt;/strong&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;环境&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;elasticsearch集群节点环境为172.16.100.120:9200，172.16.100.121:9200，172.16.100.122:9200
logstash server服务端为172.16.100.121
filebeat server服务端为172.16.100.121
httpd服务产生日志信息 172.16.100.121 
redis服务端172.16.253.181
kibana服务端172.16.253.181
tomcat server端172.16.253.145&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;网络拓扑图&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://timgsa.baidu.com/timg?image&amp;amp;quality=80%20&amp;amp;size=b10000_10000&amp;amp;sec=1507826820163&amp;amp;di=5956971d9a2f1a246349a944be81cac0&amp;amp;imgtype=jpg&amp;amp;src=http%3A%2F%2Fb.hiphotos.baidu.com%2Fimage%2Fpic%2Fitem%2Fa8ec8a13632762d02608c1dfabec08fa513dc698.jpg&quot; alt=&quot;image&quot;/&gt;&lt;/p&gt;
&lt;p&gt;elasticsearch集群构建如上，在此省略&lt;/p&gt;
&lt;h2 id=&quot;filebeat-server&quot;&gt;filebeat server&lt;/h2&gt;
&lt;pre&gt;
&lt;code&gt;下载filebeat程序包
    https://www.elastic.co/downloads/beats/filebeat

[root@node4 ~]# ls filebeat-5.5.1-x86_64.rpm 
filebeat-5.5.1-x86_64.rpm&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;安装filebeat&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;[root@node4 ~]# yum -y install filebeat-5.5.1-x86_64.rpm
[root@node4 ~]# rpm -ql filebeat&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;编辑filebeat.yml文件&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;[root@node2 ~]# vim /etc/filebeat/filebeat.yml
- input_type: log
    - /var/log/httpd/access_log*    指定数据的输入路径为access_log开头的所有文件
output.logstash:     \\数据输出到logstash中
    # The Logstash hosts
    hosts: [&quot;172.16.100.121:5044&quot;]   \\指定logstash服务端&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;启动服务&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;[root@node4 ~]# systemctl start filebeat &lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;logstash-server&quot;&gt;logstash server&lt;/h2&gt;
&lt;p&gt;安装java环境&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;[root@node2 ~]# yum -y install java-1.8.0-openjdk-devel&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;下载logstash程序&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;https://www.elastic.co/downloads/logstash
    &lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;安装logstash程序&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;[root@node2 ~]# ll logstash-5.5.1.rpm 
-rw-r--r--. 1 root root 94158545 Aug 21 17:06 logstash-5.5.1.rpm
[root@node4 ~]# rpm -ivh logstash-5.5.1.rpm &lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;编辑logstash的配置文件&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;[root@node2 ~]# vim /etc/logstash/logstash.yml文件配置
path.data: /var/lib/logstash            数据存放路径
path.config: /etc/logstash/conf.d       配置文件的读取路径
path.logs: /var/log/logstash            日志文件的保存路径
        
[root@node2 ~]# vim  /etc/logstash/jvm.options环境文件
-Xms256m   启用的内存大小
-Xmx1g&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;编辑/etc/logstash/conf.d/test.conf 文件&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;[root@node4 ~]# vim /etc/logstash/conf.d/test.conf 
input {
    beats {
        port =&amp;gt; 5044
    }
}

filter {
    grok {
        match =&amp;gt; {
            &quot;message&quot; =&amp;gt; &quot;%{COMBINEDAPACHELOG}&quot;
        }
    remove_field =&amp;gt; &quot;message&quot;   \\只显示message字段的数据
    }
}

output {
    elasticsearch {
        hosts =&amp;gt; [&quot;http://172.16.100.120:9200&quot;,&quot;http://172.16.100.121:9200&quot;,&quot;http://172.16.100.122:9200&quot;]
        index =&amp;gt; &quot;logstash-%{+YYYY.MM.dd}&quot;
        action =&amp;gt; &quot;index&quot;
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;测试/etc/logstash/conf.d/test.conf文件语法&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;[root@node2 ~]# /usr/share/logstash/bin/logstash -t -f /etc/logstash/conf.d/test.conf&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;执行/etc/logstash/conf.d/test.conf文件&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;[root@node2 ~]#/usr/share/logstash/bin/logstash -f /etc/logstash/conf.d/test.conf&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;客户端访问测试索引信息是否生成&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;[root@node5 ~]#curl -XGET '172.16.100.120:9200/_cat/indices'
green open logstash-2017.10.12 baieaGWpSN-BA28dAlqxhA 5 1 27 0 186.7kb 93.3kb&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;从redis插件读取采集数据&quot;&gt;从redis插件读取采集数据&lt;/h2&gt;
&lt;p&gt;Redis&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;[root@node4 ~]# yum -y install redis
[root@node4 ~]# vim /etc/redis.conf 
bind 0.0.0.0                监听所有地址
requirepass danran      设定密码为danran
[root@node4 ~]# systemctl restart redis&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;连接测试redis是否正常&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;[root@node4 ~]# redis-cli -h 172.16.253.181 -a danran
172.16.253.181:6379&amp;gt; &lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;配置logstash server文件&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;[root@node2 ~]# vim /etc/logstash/conf.d/redis-input.conf
input {
    redis {
        host =&amp;gt; &quot;172.16.253.181&quot;
        port =&amp;gt; &quot;6379&quot;
        password =&amp;gt; &quot;danran&quot;
        db =&amp;gt; &quot;0&quot;
        data_type =&amp;gt; &quot;list&quot;    \\定义数据类型为列表格式
        key =&amp;gt; &quot;filebeat&quot;   \\定义key为filebeat，与filebeat.yml定义key一致
    }
}

filter {
    grok {
        match =&amp;gt; {
           &quot;message&quot; =&amp;gt; &quot;%{COMBINEDAPACHELOG}&quot;
        }
    remove_field =&amp;gt; &quot;message&quot;
    }
    mutate {
        rename =&amp;gt; {&quot;clientip&quot; =&amp;gt; &quot;[httpd][clientip]&quot; }
    }
}

output {
    elasticsearch {
        hosts =&amp;gt; [&quot;http://172.16.100.120:9200&quot;,&quot;http://172.16.100.121:9200&quot;,&quot;http://172.16.100.122:9200&quot;]
        index =&amp;gt; &quot;logstash-%{+YYYY.MM.dd}&quot;
        action =&amp;gt; &quot;index&quot;
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;重启logstash server&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;[root@node2 ~]# systemctl restart logstash&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;配置filebeat的数据输出到redis&quot;&gt;配置filebeat的数据输出到redis&lt;/h2&gt;
&lt;pre&gt;
&lt;code&gt;[root@node2 ~]# vim /etc/filebeat/filebeat.yml   
- input_type: log
    - /var/log/httpd/access_log*    指定数据的输入路径为access_log开头的所有文件

#-----------------------redis output ---------------------------

output.redis:
    hosts: [&quot;172.16.253.181&quot;]    \\redis服务端
    port: &quot;6379&quot;
    password: &quot;danran&quot;        \\redis密码
    key: &quot;filebeat&quot;               \\定义key，与redis-input.conf文件中input字段的key保存一致
    db: 0                         \\指定输出的数据库为0
    timeout: 5&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;重启filebeat&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;[root@node2 ~]# systemctl restart filebeat    &lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;客户端访问httpd服务&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;[root@node1 ~]# curl 172.16.100.121
test page&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;登录redis数据库查看数据是否采集&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;[root@node4 ~]# redis-cli -h 172.16.253.181 -a danran&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;查看elasticsearch集群是否采集数据&lt;br/&gt;&lt;img src=&quot;https://timgsa.baidu.com/timg?image&amp;amp;quality=80%20&amp;amp;size=b10000_10000&amp;amp;sec=1507827975467&amp;amp;di=93525dee7dcb66aa84e8577ff3987850&amp;amp;imgtype=jpg&amp;amp;src=http%3A%2F%2Fa.hiphotos.baidu.com%2Fimage%2Fpic%2Fitem%2F8435e5dde71190ef5e76f0bfc51b9d16fcfa60c4.jpg&quot; alt=&quot;image&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;启用geoip插件&quot;&gt;启用geoip插件&lt;/h2&gt;
&lt;p&gt;下载geoip程序安装&lt;br/&gt;[&lt;a href=&quot;mailto:root@node2&quot;&gt;root@node2&lt;/a&gt; ~]# ll GeoLite2-City.tar.gz&lt;br/&gt;-rw-r--r--. 1 root root 25511308 Aug 21 05:06 GeoLite2-City.tar.gz&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;[root@node2 ~]# cd GeoLite2-City_20170704/
[root@node2 GeoLite2-City_20170704]# mv GeoLite2-City.mmdb /etc/logstash/&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;配置logstash server文件&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;[root@node2 ~]# vim /etc/logstash/conf.d/geoip.conf
input {
    redis {
        host =&amp;gt; &quot;172.16.253.181&quot;
        port =&amp;gt; &quot;6379&quot;
        password =&amp;gt; &quot;danran&quot;
        db =&amp;gt; &quot;0&quot;
        data_type =&amp;gt; &quot;list&quot;    \\定义数据类型为列表格式
        key =&amp;gt; &quot;filebeat&quot;   \\定义key为filebeat，与filebeat.yml定义key一致
    }
}

filter {
    grok {
        match =&amp;gt; {
           &quot;message&quot; =&amp;gt; &quot;%{COMBINEDAPACHELOG}&quot;
        }
    remove_field =&amp;gt; &quot;message&quot;
    }
    geoip {
        source =&amp;gt; &quot;clientip&quot;    指定客户端IP查找
        target =&amp;gt; &quot;geoip&quot;
        database =&amp;gt; &quot;/etc/logstash/GeoLite2-City.mmdb&quot;  \\指定geoip数据库文件
    }
}

output {
    elasticsearch {
        hosts =&amp;gt; [&quot;http://172.16.100.120:9200&quot;,&quot;http://172.16.100.121:9200&quot;,&quot;http://172.16.100.122:9200&quot;]
        index =&amp;gt; &quot;logstash-%{+YYYY.MM.dd}&quot;
        action =&amp;gt; &quot;index&quot;
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;测试redis-input.conf文件语法&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;[root@node2 ~]#  /usr/share/logstash/bin/logstash -t -f /etc/logstash/conf.d/redis-input.conf &lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;指定配置文件启动logstash&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;[root@node2 ~]#  /usr/share/logstash/bin/logstash -f /etc/logstash/conf.d/redis-input.conf    &lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;客户端访问httpd&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;[root@node1 ~]# curl 172.16.100.121         test page&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;查看elasticsearch-head中信息，可根据IP地址查询区域&lt;br/&gt;&lt;img src=&quot;https://timgsa.baidu.com/timg?image&amp;amp;quality=80%20&amp;amp;size=b10000_10000&amp;amp;sec=1507827927964&amp;amp;di=a2a7c34624552b2bb1d02299da05e1ff&amp;amp;imgtype=jpg&amp;amp;src=http%3A%2F%2Fb.hiphotos.baidu.com%2Fimage%2Fpic%2Fitem%2Faec379310a55b3197253e01548a98226cffc1723.jpg&quot; alt=&quot;image&quot;/&gt;&lt;/p&gt;
&lt;p&gt;模仿两条外部的访问日志信息&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;[root@node2 ~]# echo '72.16.100.120 - - [11/Oct/2017:22:32:21 -0400] &quot;GET / HTTP/1.1&quot; 200 10 &quot;-&quot; &quot;curl/7.29.0&quot;' &amp;gt;&amp;gt; /var/log/httpd/access_log 

[root@node2 ~]# echo '22.16.100.120 - - [11/Oct/2017:22:32:21 -0400] &quot;GET / HTTP/1.1&quot; 200 10 &quot;-&quot; &quot;curl/7.29.0&quot;' &amp;gt;&amp;gt; /var/log/httpd/access_log &lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;查看elasticsearch-head中信息，可根据IP地址查询区域&lt;br/&gt;&lt;img src=&quot;https://timgsa.baidu.com/timg?image&amp;amp;quality=80%20&amp;amp;size=b10000_10000&amp;amp;sec=1507827889070&amp;amp;di=7b606154199d4c6a07110664bfe5ac42&amp;amp;imgtype=jpg&amp;amp;src=http%3A%2F%2Fd.hiphotos.baidu.com%2Fimage%2Fpic%2Fitem%2F279759ee3d6d55fb61b5144666224f4a20a4dd5b.jpg&quot; alt=&quot;image&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;启用kibana插件&quot;&gt;启用kibana插件&lt;/h2&gt;
&lt;p&gt;下载安装kibana&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;[root@node4 ~]# ls kibana-5.5.1-x86_64.rpm 
kibana-5.5.1-x86_64.rpm
[root@node4 ~]# rpm -ivh kibana-5.5.1-x86_64.rpm &lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;配置kibana.yml文件&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;[root@node4 ~]# vim /etc/kibana/kibana.yml 
server.port: 5601           监听端口
server.host: &quot;0.0.0.0&quot;    监听地址
elasticsearch.url: &quot;http://172.16.100.120:9200&quot; 指定elasticsearch集群中的某个节点URL&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;启动服务&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;[root@node4 ~]# systemctl start kibana brandbot 
[root@node4 ~]# ss -ntl   监听5601端口&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;配置logstash server数据采集文件&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;[root@node2 ~]# vim /etc/logstash/conf.d/geoip.conf
input {
    redis {
        host =&amp;gt; &quot;172.16.253.181&quot;
        port =&amp;gt; &quot;6379&quot;
        password =&amp;gt; &quot;danran&quot;
        db =&amp;gt; &quot;0&quot;
        data_type =&amp;gt; &quot;list&quot;    \\定义数据类型为列表格式
        key =&amp;gt; &quot;filebeat&quot;   \\定义key为filebeat，与filebeat.yml定义key一致
    }
}

filter {
    grok {
        match =&amp;gt; {
           &quot;message&quot; =&amp;gt; &quot;%{COMBINEDAPACHELOG}&quot;
        }
    remove_field =&amp;gt; &quot;message&quot;
    }
    geoip {
        source =&amp;gt; &quot;clientip&quot;    指定客户端IP查找
        target =&amp;gt; &quot;geoip&quot;
        database =&amp;gt; &quot;/etc/logstash/GeoLite2-City.mmdb&quot;  \\指定geoip数据库文件
    }
}

output {
    elasticsearch {
        hosts =&amp;gt; [&quot;http://172.16.100.120:9200&quot;,&quot;http://172.16.100.121:9200&quot;,&quot;http://172.16.100.122:9200&quot;]
        index =&amp;gt; &quot;logstash-%{+YYYY.MM.dd}&quot;
        action =&amp;gt; &quot;index&quot;
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;测试redis-input.conf文件语法&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;[root@node2 ~]#  /usr/share/logstash/bin/logstash -t -f /etc/logstash/conf.d/redis-input.conf &lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;指定配置文件启动logstash&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;[root@node2 ~]#  /usr/share/logstash/bin/logstash -f /etc/logstash/conf.d/redis-input.conf  &lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;elasticsearch-head中查看信息&lt;br/&gt;&lt;img src=&quot;https://timgsa.baidu.com/timg?image&amp;amp;quality=80%20&amp;amp;size=b10000_10000&amp;amp;sec=1507827792630&amp;amp;di=f0669c7a5ffc75c0cda53d54e713fff5&amp;amp;imgtype=jpg&amp;amp;src=http%3A%2F%2Fa.hiphotos.baidu.com%2Fimage%2Fpic%2Fitem%2F79f0f736afc379319292e549e0c4b74542a911d3.jpg&quot; alt=&quot;image&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Web加载kibana&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;浏览器键入http://172.16.253.181:5601&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://timgsa.baidu.com/timg?image&amp;amp;quality=80%20&amp;amp;size=b10000_10000&amp;amp;sec=1507827829024&amp;amp;di=6fc304a6400e5a1bf3bf92fa3346fde6&amp;amp;imgtype=jpg&amp;amp;src=http%3A%2F%2Ff.hiphotos.baidu.com%2Fimage%2Fpic%2Fitem%2F472309f790529822aff95aa3dcca7bcb0b46d48c.jpg&quot; alt=&quot;image&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://timgsa.baidu.com/timg?image&amp;amp;quality=80%20&amp;amp;size=b10000_10000&amp;amp;sec=1507827846735&amp;amp;di=0d72061585c25ea0c646500507d710d1&amp;amp;imgtype=jpg&amp;amp;src=http%3A%2F%2Fg.hiphotos.baidu.com%2Fimage%2Fpic%2Fitem%2F5fdf8db1cb13495437328a045d4e9258d1094aa5.jpg&quot; alt=&quot;image&quot;/&gt;&lt;/p&gt;
&lt;p&gt;图形显示访问数据统计&lt;br/&gt;&lt;img src=&quot;https://timgsa.baidu.com/timg?image&amp;amp;quality=80%20&amp;amp;size=b10000_10000&amp;amp;sec=1507827716765&amp;amp;di=dbc57febcac3c24e46e13df82521305d&amp;amp;imgtype=jpg&amp;amp;src=http%3A%2F%2Fg.hiphotos.baidu.com%2Fimage%2Fpic%2Fitem%2Fa6efce1b9d16fdfa8141a58ebf8f8c5494ee7ba4.jpg&quot; alt=&quot;image&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://timgsa.baidu.com/timg?image&amp;amp;quality=80%20&amp;amp;size=b10000_10000&amp;amp;sec=1507827738573&amp;amp;di=9e2c389b56aa994bc7b1cccc36850af4&amp;amp;imgtype=jpg&amp;amp;src=http%3A%2F%2Fe.hiphotos.baidu.com%2Fimage%2Fpic%2Fitem%2Ff9dcd100baa1cd1116ac1140b212c8fcc3ce2db3.jpg&quot; alt=&quot;image&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;采集监控tomcat节点日志&quot;&gt;采集监控tomcat节点日志&lt;/h2&gt;
&lt;p&gt;安装tomcat服务&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;[root@node5 ~]# yum -y install tomcat tomcat-webapps tomcat-admin-webapps tomcat-docs-webapp
[root@node5 ~]# systemctl start tomcat
[root@node5 ~]# ss -ntl   \\8080端口已监听&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;查看日志文件路径&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;[root@node5 ~]# ls /var/log/tomcat/localhost_access_log.2017-10-12.txt 
/var/log/tomcat/localhost_access_log.2017-10-12.txt&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;安装filebeat&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;下载filebeat程序包
    https://www.elastic.co/downloads/beats/filebeat

[root@node4 ~]# ls filebeat-5.5.1-x86_64.rpm 
filebeat-5.5.1-x86_64.rpm&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;安装filebeat&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;[root@node4 ~]# yum -y install filebeat-5.5.1-x86_64.rpm
[root@node4 ~]# rpm -ql filebeat&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;配置filebeat.yml文件&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;[root@node5 ~]# vim /etc/filebeat/filebeat.yml 
- input_type: log
    - /var/log/tomcat/*.txt    数据文件的采集路径
#---------------------------redis output ---------------------
output.redis:
    hosts: [&quot;172.16.253.181&quot;]
    port: &quot;6379&quot;
    password: &quot;danran&quot;
    key: &quot;fb-tomcat&quot;
    db: 0
    timeout: 5&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;启动filebeat服务&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;[root@node5 ~]# systemctl start filebeat &lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;配置logstash server端数据采集配置文件&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;[root@node2 ~]# vim /etc/logstash/conf.d/tomcat.conf
input {
    redis {
        host =&amp;gt; &quot;172.16.253.181&quot;
        port =&amp;gt; &quot;6379&quot;
        password =&amp;gt; &quot;danran&quot;
        db =&amp;gt; &quot;0&quot;
        data_type =&amp;gt; &quot;list&quot;    \\定义数据类型为列表格式
        key =&amp;gt; &quot;fb-tomcat&quot;   \\定义key为filebeat，与filebeat.yml定义key一致
    }
}

filter {
    grok {
        match =&amp;gt; {
           &quot;message&quot; =&amp;gt; &quot;%{COMMONAPACHELOG}&quot;
        }
    remove_field =&amp;gt; &quot;message&quot;
    }
    geoip {
        source =&amp;gt; &quot;clientip&quot;    指定客户端IP查找
        target =&amp;gt; &quot;geoip&quot;
        database =&amp;gt; &quot;/etc/logstash/GeoLite2-City.mmdb&quot;  \\指定geoip数据库文件
    }
}

output {
    elasticsearch {
        hosts =&amp;gt; [&quot;http://172.16.100.120:9200&quot;,&quot;http://172.16.100.121:9200&quot;,&quot;http://172.16.100.122:9200&quot;]
        index =&amp;gt; &quot;logstash-tomcat-%{+YYYY.MM.dd}&quot;
        action =&amp;gt; &quot;index&quot;
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;测试redis-input.conf文件语法&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;[root@node2 ~]#/usr/share/logstash/bin/logstash -t -f /etc/logstash/conf.d/tomcat.conf &lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;重新启动logstash&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;[root@node2 ~]# systemctl restart logstash&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;elasticsearch-head中查看是否产生logstash-toncat索引信息&lt;br/&gt;&lt;img src=&quot;https://timgsa.baidu.com/timg?image&amp;amp;quality=80%20&amp;amp;size=b10000_10000&amp;amp;sec=1507827649643&amp;amp;di=6031d0ef15e49dc01940d18fc5417130&amp;amp;imgtype=jpg&amp;amp;src=http%3A%2F%2Fa.hiphotos.baidu.com%2Fimage%2Fpic%2Fitem%2F5fdf8db1cb13495449b988045d4e9258d1094a2e.jpg&quot; alt=&quot;image&quot;/&gt;&lt;/p&gt;
&lt;p&gt;配置kibana可视化查看索引数据&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;浏览器键入http://172.16.253.181:5601&lt;/code&gt;
&lt;/pre&gt;</description>
<pubDate>Thu, 12 Oct 2017 14:20:00 +0000</pubDate>
<dc:creator>JevonWei</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/JevonWei/p/7658512.html</dc:identifier>
</item>
<item>
<title>Lucene介绍与入门使用 - 高压锅里的小白</title>
<link>http://www.cnblogs.com/xiaobai1226/p/7652093.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/xiaobai1226/p/7652093.html</guid>
<description>&lt;p&gt;　　Lucene是apache软件基金会4 jakarta项目组的一个子项目，是一个开放源代码的全文检索引擎工具包，但它不是一个完整的全文检索引擎，而是一个全文检索引擎的架构，提供了完整的查询引擎和索引引擎，部分文本分析引擎（英文与德文两种西方语言）。Lucene的目的是为软件开发人员提供一个简单易用的工具包，以方便的在目标系统中实现全文检索的功能，或者是以此为基础建立起完整的全文检索引擎。Lucene是一套用于全文检索和搜寻的开源程式库，由Apache软件基金会支持和提供。Lucene提供了一个简单却强大的应用程式接口，能够做全文索引和搜寻。在Java开发环境里Lucene是一个成熟的免费开源工具。就其本身而言，Lucene是当前以及最近几年最受欢迎的免费Java信息检索程序库。人们经常提到信息检索程序库，虽然与搜索引擎有关，但不应该将信息检索程序库与搜索引擎相混淆。&lt;/p&gt;
&lt;h3&gt;　　那么先来说一说什么是全文搜索&lt;/h3&gt;
&lt;p&gt;　　说之前先说一说&lt;strong&gt;数据的分类&lt;/strong&gt;：　&lt;/p&gt;
&lt;p&gt;　　　　我们生活中的数据总体分为两种：结构化数据和非结构化数据。&lt;/p&gt;
&lt;p&gt;　　　　（1）&lt;strong&gt;结构化数据&lt;/strong&gt;：指具有固定格式或有限长度的数据，如数据库，元数据等。&lt;/p&gt;
&lt;p&gt;　　　　（2）&lt;strong&gt;非结构化数据&lt;/strong&gt;：指不定长或无固定格式的数据，如邮件，word文档等磁盘上的文件&lt;/p&gt;
&lt;h2&gt;　　结构化数据查询方法&lt;/h2&gt;
&lt;h3&gt;　　数据库搜索&lt;/h3&gt;
&lt;p&gt;　　数据库中的搜索很容易实现，通常都是使用sql语句进行查询，而且能很快的得到查询结果。&lt;/p&gt;
&lt;p&gt;　　为什么数据库搜索很容易？&lt;/p&gt;
&lt;p&gt;　　因为数据库中的数据存储是有规律的，有行有列而且数据格式、数据长度都是固定的。&lt;/p&gt;
&lt;h2&gt;　　非结构化数据查询方法&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;　　（1）&lt;/strong&gt;&lt;strong&gt;顺序扫描法&lt;/strong&gt;&lt;strong&gt;(Serial Scanning)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　所谓顺序扫描，比如要找内容包含某一个字符串的文件，就是一个文档一个文档的看，对于每一个文档，从头看到尾，如果此文档包含此字符串，则此文档为我们要找的文件，接着看下一个文件，直到扫描完所有的文件。如利用windows的搜索也可以搜索文件内容，只是&lt;strong&gt;相当的慢&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　（2）&lt;/strong&gt;&lt;strong&gt;全文检索&lt;/strong&gt;&lt;strong&gt;(Full-text Search)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　将非结构化数据中的一部分信息提取出来，重新组织，使其变得有一定结构，然后对此有一定结构的数据进行搜索，从而达到搜索相对较快的目的。这部分从非结构化数据中提取出的然后重新组织的信息，我们称之&lt;strong&gt;索引&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;例如：字典。字典的拼音表和部首检字表就相当于字典的索引，对每一个字的解释是非结构化的，如果字典没有音节表和部首检字表，在茫茫辞海中找一个字只能顺序扫描。然而字的某些信息可以提取出来进行结构化处理，比如读音，就比较结构化，分声母和韵母，分别只有几种可以一一列举，于是将读音拿出来按一定的顺序排列，每一项读音都指向此字的详细解释的页数。我们搜索时按结构化的拼音搜到读音，然后按其指向的页数，便可找到我们的非结构化数据——也即对字的解释。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　这种先建立索引，再对索引进行搜索的过程就叫全文检索&lt;/strong&gt;&lt;strong&gt;(Full-text Search)&lt;/strong&gt;&lt;strong&gt;。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　虽然创建索引的过程也是非常耗时的，但是索引一旦创建就可以多次使用，全文检索主要处理的是查询，所以耗时间创建索引是值得的。&lt;/p&gt;
&lt;h3&gt;　　全文检索的应用场景&lt;/h3&gt;
&lt;p&gt;　　对于数据量大、数据结构不固定的数据可采用全文检索方式搜索，比如百度、Google等搜索引擎、论坛站内搜索、电商网站站内搜索等。&lt;/p&gt;


&lt;h3&gt;　　索引和搜索流程图&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1227182/201710/1227182-20171011190654543-1014690139.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　1、绿色表示索引过程，对要搜索的原始内容进行索引构建一个索引库，索引过程包括：&lt;/p&gt;
&lt;p&gt;　　　　确定原始内容即要搜索的内容&lt;span&gt;→&lt;/span&gt;采集文档&lt;span&gt;→&lt;/span&gt;创建文档&lt;span&gt;→&lt;/span&gt;分析文档&lt;span&gt;→&lt;/span&gt;索引文档&lt;/p&gt;
&lt;p&gt;　　2、红色表示搜索过程，从索引库中搜索内容，搜索过程包括：&lt;/p&gt;
&lt;p&gt;　　　　用户通过搜索界面&lt;span&gt;→&lt;/span&gt;创建查询&lt;span&gt;→&lt;/span&gt;执行搜索，从索引库搜索&lt;span&gt;→&lt;/span&gt;渲染搜索结果&lt;/p&gt;

&lt;p&gt;　　&lt;span&gt;接下来详细讲解一下这张图片：&lt;/span&gt;　&lt;/p&gt;
&lt;h2&gt;　&lt;span&gt;1，创建索引&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;　　对文档索引的过程，将用户要搜索的文档内容进行索引，索引存储在索引库（index）中。&lt;/p&gt;
&lt;p&gt;这里我们要搜索的文档是磁盘上的文本文件，根据案例描述：凡是文件名或文件内容包括关键字的文件都要找出来，这里要对文件名和文件内容创建索引。&lt;/p&gt;
&lt;h3&gt;&lt;span&gt;　　1.1.1.   获得原始文档&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;　　原始文档&lt;/strong&gt;是指要索引和搜索的内容。原始内容包括互联网上的网页、数据库中的数据、磁盘上的文件等。&lt;/p&gt;
&lt;p&gt;　　从互联网上、数据库、文件系统中等获取需要搜索的原始信息，这个过程就是信息采集，信息采集的目的是为了对原始内容进行索引。在Internet上采集信息的软件通常称为爬虫或蜘蛛，也称为网络机器人，爬虫访问互联网上的每一个网页，将获取到的网页内容存储起来。&lt;/p&gt;
&lt;p&gt;        Lucene不提供信息采集的类库，需要自己编写一个爬虫程序实现信息采集，也可以通过一些开源软件实现信息采集，如下：&lt;/p&gt;
&lt;p&gt;         （1）Nutch（&lt;a href=&quot;http://lucene.apache.org/nutch&quot;&gt;http://lucene.apache.org/nutch&lt;/a&gt;）, Nutch是apache的一个子项目，包括大规模爬虫工具，能够抓取和分辨web网站数据。&lt;/p&gt;
&lt;p&gt;         （2）jsoup（http://jsoup.org/ ），jsoup 是一款Java 的HTML解析器，可直接解析某个URL地址、HTML文本内容。它提供了一套非常省力的API，可通过DOM，CSS以及类似于jQuery的操作方法来取出和操作数据。&lt;/p&gt;
&lt;p&gt;         （3）heritrix（http://sourceforge.net/projects/archive-crawler/files/），Heritrix 是一个由 java 开发的、开源的网络爬虫，用户可以使用它来从网上抓取想要的资源。其最出色之处在于它良好的可扩展性，方便用户实现自己的抓取逻辑。&lt;/p&gt;

&lt;p&gt;　　本案例我们要获取磁盘上文件的内容，可以通过文件流来读取文本文件的内容，对于pdf、doc、xls等文件可通过第三方提供的解析工具读取文件内容，比如Apache POI读取doc和xls的文件内容。 &lt;/p&gt;

&lt;h3&gt;　　1.1.2.   创建文档对象&lt;/h3&gt;
&lt;p&gt;　　获取原始内容的目的是为了索引，在索引前需要将原始内容创建成文档（Document），文档中包括一个一个的域（Field），域中存储内容。&lt;/p&gt;
&lt;p&gt;这里我们可以将磁盘上的一个文件当成一个document，Document中包括一些Field（file_name文件名称、file_path文件路径、file_size文件大小、file_content文件内容），如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1227182/201710/1227182-20171011192234699-115366628.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;　　注意：（1）每个Document可以有多个Field&lt;/p&gt;
&lt;p&gt;　　　　　（2）不同的Document可以有不同的Field&lt;/p&gt;
&lt;p&gt;　　　　　（3）同一个Document可以有相同的Field（域名和域值都相同）&lt;/p&gt;
&lt;p&gt;　　　　　（4）每个文档都有一个唯一的编号，就是文档id。&lt;/p&gt;

&lt;h3&gt;　　1.1.3.   分析文档&lt;/h3&gt;
&lt;p&gt;　　将原始内容创建为包含域（Field）的文档（document），需要再对域中的内容进行分析，分析的过程是经过对原始文档提取单词、将字母转为小写、去除标点符号、去除停用词等过程生成最终的语汇单元，可以将语汇单元理解为一个一个的单词。&lt;/p&gt;
&lt;p&gt;　　比如下边的文档经过分析如下：&lt;/p&gt;
&lt;p&gt;　　原文档内容：&lt;/p&gt;
&lt;p&gt;　　Lucene is a Java full-text search engine.  &lt;/p&gt;
&lt;p&gt;　　分析后得到的&lt;strong&gt;语汇单元&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;　　lucene、java、full、search、engine&lt;/p&gt;

&lt;p&gt;　　每个单词叫做一个&lt;strong&gt;Term&lt;/strong&gt;，不同的域中拆分出来的相同的单词是不同的term。term中包含两部分一部分是文档的域名，另一部分是单词的内容。&lt;/p&gt;
&lt;p&gt;　　例如：文件名中包含apache和文件内容中包含的apache是不同的term。&lt;/p&gt;

&lt;h3&gt;　　1.1.4.   创建索引&lt;/h3&gt;
&lt;p&gt;　　对所有文档分析得出的语汇单元进行索引，索引的目的是为了搜索，最终要实现只搜索被索引的语汇单元从而找到Document（文档）。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1227182/201710/1227182-20171011194345059-873127678.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h3&gt;&lt;strong&gt; &lt;img src=&quot;http://images2017.cnblogs.com/blog/1227182/201710/1227182-20171011193525215-791530589.png&quot; alt=&quot;&quot;/&gt;&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;　　注意：（1）创建索引是对语汇单元索引，通过词语找文档，这种索引的结构叫&lt;strong&gt;倒排索引结构&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;　　　　　（2）传统方法是根据文件找到该文件的内容，在文件内容中匹配搜索关键字，这种方法是顺序扫描方法，数据量大、搜索慢。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　           （3）倒排索引结构&lt;/strong&gt;是根据内容（词语）找文档，如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1227182/201710/1227182-20171011193758934-50928958.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;　　倒排索引结构也叫反向索引结构，包括索引和文档两部分，索引即词汇表，它的规模较小，而文档集合较大。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　创建索引代码实例：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　&lt;/strong&gt;新建一个Java工程，导入相关的jar包&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1227182/201710/1227182-20171012002720309-486036118.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;　　编写创建索引代码&lt;/p&gt;
&lt;p&gt;　　使用indexwriter对象创建索引&lt;/p&gt;
&lt;p&gt;　　&lt;strong&gt;具体步骤：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　第一步：创建一个indexwriter对象。&lt;/p&gt;
&lt;p&gt;　　　　1）指定索引库的存放位置Directory对象&lt;/p&gt;
&lt;p&gt;　　　　2）指定一个分析器，对文档内容进行分析。&lt;/p&gt;
&lt;p&gt;　　第二步：创建document对象。&lt;/p&gt;
&lt;p&gt;　　第三步：创建field对象，将field添加到document对象中。&lt;/p&gt;
&lt;p&gt;　　第四步：使用indexwriter对象将document对象写入索引库，此过程进行索引创建。并将索引和document对象写入索引库。&lt;/p&gt;
&lt;p&gt;　　第五步：关闭IndexWriter对象。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;45&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;创建索引&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; testCreateIndex() &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; IOException{
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;指定索引库的存放位置Directory对象&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt;         Directory directory = FSDirectory.open(&lt;span&gt;new&lt;/span&gt; File(&quot;E:\\programme\\test&quot;&lt;span&gt;));
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;索引库还可以存放到内存中
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;Directory directory = new RAMDirectory();
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; 
&lt;span&gt; 8&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;指定一个标准分析器，对文档内容进行分析&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt;         Analyzer analyzer = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; StandardAnalyzer();
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;         
&lt;span&gt;11&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;创建indexwriterCofig对象
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;第一个参数： Lucene的版本信息，可以选择对应的lucene版本也可以使用LATEST
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;第二根参数：分析器对象&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt;         IndexWriterConfig config = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; IndexWriterConfig(Version.LATEST, analyzer);
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;         
&lt;span&gt;16&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;创建一个indexwriter对象&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt;         IndexWriter indexWriter = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; IndexWriter(directory, config);
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;         
&lt;span&gt;19&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;原始文档的路径&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt;         File file = &lt;span&gt;new&lt;/span&gt; File(&quot;E:\\programme\\searchsource&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;         File[] fileList =&lt;span&gt; file.listFiles();
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt;&lt;span&gt; (File file2 : fileList) {
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;创建document对象&lt;/span&gt;
&lt;span&gt;24&lt;/span&gt;             Document document = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Document();
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;             
&lt;span&gt;26&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;创建field对象，将field添加到document对象中
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt;             
&lt;span&gt;28&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;文件名称&lt;/span&gt;
&lt;span&gt;29&lt;/span&gt;             String fileName =&lt;span&gt; file2.getName();
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;创建文件名域
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;第一个参数：域的名称
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;第二个参数：域的内容
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;第三个参数：是否存储&lt;/span&gt;
&lt;span&gt;34&lt;/span&gt;             Field fileNameField = &lt;span&gt;new&lt;/span&gt; TextField(&quot;fileName&quot;&lt;span&gt;, fileName, Store.YES);
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt;             
&lt;span&gt;36&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;文件的大小&lt;/span&gt;
&lt;span&gt;37&lt;/span&gt;             &lt;span&gt;long&lt;/span&gt; fileSize  =&lt;span&gt; FileUtils.sizeOf(file2);
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;文件大小域&lt;/span&gt;
&lt;span&gt;39&lt;/span&gt;             Field fileSizeField = &lt;span&gt;new&lt;/span&gt; LongField(&quot;fileSize&quot;&lt;span&gt;, fileSize, Store.YES);
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt;             
&lt;span&gt;41&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;文件路径&lt;/span&gt;
&lt;span&gt;42&lt;/span&gt;             String filePath =&lt;span&gt; file2.getPath();
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;文件路径域（不分析、不索引、只存储）&lt;/span&gt;
&lt;span&gt;44&lt;/span&gt;             Field filePathField = &lt;span&gt;new&lt;/span&gt; StoredField(&quot;filePath&quot;&lt;span&gt;, filePath);
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt;             
&lt;span&gt;46&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;文件内容&lt;/span&gt;
&lt;span&gt;47&lt;/span&gt;             String fileContent =&lt;span&gt; FileUtils.readFileToString(file2);
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;String fileContent = FileUtils.readFileToString(file2, &quot;utf-8&quot;);
&lt;/span&gt;&lt;span&gt;49&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;文件内容域&lt;/span&gt;
&lt;span&gt;50&lt;/span&gt;             Field fileContentField = &lt;span&gt;new&lt;/span&gt; TextField(&quot;fileContent&quot;&lt;span&gt;, fileContent, Store.YES);
&lt;/span&gt;&lt;span&gt;51&lt;/span&gt;             
&lt;span&gt;52&lt;/span&gt; &lt;span&gt;            document.add(fileNameField);
&lt;/span&gt;&lt;span&gt;53&lt;/span&gt; &lt;span&gt;            document.add(fileSizeField);
&lt;/span&gt;&lt;span&gt;54&lt;/span&gt; &lt;span&gt;            document.add(filePathField);
&lt;/span&gt;&lt;span&gt;55&lt;/span&gt; &lt;span&gt;            document.add(fileContentField);
&lt;/span&gt;&lt;span&gt;56&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;使用indexwriter对象将document对象写入索引库，此过程进行索引创建。并将索引和document对象写入索引库。&lt;/span&gt;
&lt;span&gt;57&lt;/span&gt; &lt;span&gt;            indexWriter.addDocument(document);
&lt;/span&gt;&lt;span&gt;58&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;59&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;关闭IndexWriter对象。&lt;/span&gt;
&lt;span&gt;60&lt;/span&gt; &lt;span&gt;        indexWriter.close();
&lt;/span&gt;&lt;span&gt;61&lt;/span&gt;     }
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;　　 Field域的属性概述&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;　　是否分析&lt;/strong&gt;：是否对域的内容进行分词处理。前提是我们要对域的内容进行查询。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　是否索引&lt;/strong&gt;：将Field分析后的词或整个Field值进行索引，只有索引方可搜索到。&lt;/p&gt;
&lt;p&gt;　　比如：商品名称、商品简介分析后进行索引，订单号、身份证号不用分析但也要索引，这些将来都要作为查询条件。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　是否存储&lt;/strong&gt;：将Field值存储在文档中，存储在文档中的Field才可以从Document中获取&lt;/p&gt;
&lt;p&gt;　　比如：商品名称、订单号，凡是将来要从Document中获取的Field都要存储。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　是否存储的标准：是否要将内容展示给用户&lt;/strong&gt;&lt;/p&gt;
&lt;table border=&quot;0&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody readability=&quot;15.5&quot;&gt;&lt;tr&gt;&lt;td width=&quot;210&quot;&gt;
&lt;p align=&quot;center&quot;&gt;&lt;span&gt;Field类&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;74&quot;&gt;
&lt;p align=&quot;center&quot;&gt;&lt;span&gt;数据类型&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;95&quot;&gt;
&lt;p align=&quot;center&quot;&gt;&lt;span&gt;Analyzed&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;span&gt;是否分析&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;83&quot;&gt;
&lt;p align=&quot;center&quot;&gt;&lt;span&gt;Indexed&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;span&gt;是否索引&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;83&quot;&gt;
&lt;p align=&quot;center&quot;&gt;&lt;span&gt;Stored&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;span&gt;是否存储&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;236&quot;&gt;
&lt;p align=&quot;center&quot;&gt;&lt;span&gt;说明&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;13&quot;&gt;&lt;td width=&quot;210&quot; readability=&quot;7&quot;&gt;
&lt;p align=&quot;center&quot;&gt;&lt;span&gt;StringField(FieldName, FieldValue,Store.YES))&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;74&quot;&gt;
&lt;p align=&quot;center&quot;&gt;&lt;span&gt;字符串&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;95&quot;&gt;
&lt;p align=&quot;center&quot;&gt;&lt;span&gt;N&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;83&quot;&gt;
&lt;p align=&quot;center&quot;&gt;&lt;span&gt;Y&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;83&quot;&gt;
&lt;p align=&quot;center&quot;&gt;&lt;span&gt;Y或N&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;236&quot; readability=&quot;9&quot;&gt;
&lt;p align=&quot;center&quot;&gt;&lt;span&gt;这个Field用来构建一个字符串Field，但是不会进行分析，会将整个串存储在索引中，比如(订单号,姓名等)&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;span&gt;是否存储在文档中用Store.YES或Store.NO决定&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;11&quot;&gt;&lt;td width=&quot;210&quot; readability=&quot;7&quot;&gt;
&lt;p align=&quot;center&quot;&gt;&lt;span&gt;LongField(FieldName, FieldValue,Store.YES)&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;74&quot;&gt;
&lt;p align=&quot;center&quot;&gt;&lt;span&gt;Long型&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;95&quot;&gt;
&lt;p align=&quot;center&quot;&gt;&lt;span&gt;Y&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;83&quot;&gt;
&lt;p align=&quot;center&quot;&gt;&lt;span&gt;Y&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;83&quot;&gt;
&lt;p align=&quot;center&quot;&gt;&lt;span&gt;Y或N&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;236&quot; readability=&quot;7&quot;&gt;
&lt;p align=&quot;center&quot;&gt;&lt;span&gt;这个Field用来构建一个Long数字型Field，进行分析和索引，比如(价格)&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;span&gt;是否存储在文档中用Store.YES或Store.NO决定&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;11.5&quot;&gt;&lt;td width=&quot;210&quot; readability=&quot;6&quot;&gt;
&lt;p align=&quot;center&quot;&gt;&lt;span&gt;StoredField(FieldName, FieldValue)&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;74&quot; readability=&quot;5&quot;&gt;
&lt;p align=&quot;center&quot;&gt;&lt;span&gt;重载方法，支持多种类型&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;95&quot;&gt;
&lt;p align=&quot;center&quot;&gt;&lt;span&gt;N&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;83&quot;&gt;
&lt;p align=&quot;center&quot;&gt;&lt;span&gt;N&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;83&quot;&gt;
&lt;p align=&quot;center&quot;&gt;&lt;span&gt;Y&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;236&quot; readability=&quot;7&quot;&gt;
&lt;p align=&quot;center&quot;&gt;&lt;span&gt;这个Field用来构建不同类型Field&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;span&gt;不分析，不索引，但要Field存储在文档中&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;14.5&quot;&gt;&lt;td width=&quot;210&quot; readability=&quot;10&quot;&gt;
&lt;p align=&quot;center&quot;&gt;&lt;span&gt;TextField(FieldName, FieldValue, Store.NO)&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;span&gt;或&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;span&gt;TextField(FieldName, reader)&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;74&quot;&gt;
&lt;p align=&quot;center&quot;&gt;&lt;span&gt;字符串&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;span&gt;或&lt;/span&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;span&gt;流&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;95&quot;&gt;
&lt;p align=&quot;center&quot;&gt;&lt;span&gt;Y&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;83&quot;&gt;
&lt;p align=&quot;center&quot;&gt;&lt;span&gt;Y&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;83&quot;&gt;
&lt;p align=&quot;center&quot;&gt;&lt;span&gt;Y或N&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td width=&quot;236&quot; readability=&quot;7&quot;&gt;
&lt;p align=&quot;center&quot;&gt;&lt;span&gt;如果是一个Reader, lucene猜测内容比较多,会采用Unstored的策略.&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;h2&gt;&lt;span&gt;　　2. 查询索引&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;　　查询索引也是搜索的过程。搜索就是用户输入关键字，从索引（index）中进行搜索的过程。根据关键字搜索索引，根据索引找到对应的文档，从而找到要搜索的内容（这里指磁盘上的文件）。&lt;/p&gt;
&lt;p&gt;       对要搜索的信息创建Query查询对象，Lucene会根据Query查询对象生成最终的查询语法，类似关系数据库Sql语法一样Lucene也有自己的查询语法，比如：“name:lucene”表示查询Field的name为“lucene”的文档信息。&lt;/p&gt;
&lt;h3&gt;　　2.1.   用户查询接口&lt;/h3&gt;
&lt;p&gt;　　全文检索系统提供用户搜索的界面供用户提交搜索的关键字，搜索完成展示搜索结果。&lt;/p&gt;
&lt;p&gt;　　比如： 百度搜索&lt;/p&gt;
&lt;p&gt;　　Lucene不提供制作用户搜索界面的功能，需要根据自己的需求开发搜索界面。&lt;/p&gt;
&lt;h3&gt;　　2.2.   创建查询&lt;/h3&gt;
&lt;p&gt;　　用户输入查询关键字执行搜索之前需要先构建一个查询对象，查询对象中可以指定查询要搜索的Field文档域、查询关键字等，查询对象会生成具体的查询语法，&lt;/p&gt;
&lt;p&gt;　　例如： 语法 “fileName:lucene”表示要搜索Field域的内容为“lucene”的文档&lt;/p&gt;
&lt;h3&gt;　　2.3.   执行查询&lt;/h3&gt;
&lt;p&gt;　　搜索索引过程：&lt;/p&gt;
&lt;p&gt;　　根据查询语法在倒排索引词典表中分别找出对应搜索词的索引，从而找到索引所链接的文档链表。&lt;/p&gt;
&lt;p&gt;　　比如搜索语法为“fileName:lucene”表示搜索出fileName域中包含Lucene的文档。&lt;/p&gt;
&lt;p&gt;　　搜索过程就是在索引上查找域为fileName，并且关键字为Lucene的term，并根据term找到文档id列表。&lt;/p&gt;

&lt;p&gt;       可通过两种方法创建查询对象：&lt;/p&gt;
&lt;p&gt;         1）使用Lucene提供Query子类&lt;/p&gt;
&lt;p&gt;         Query是一个抽象类，lucene提供了很多查询对象，比如TermQuery项精确查询，NumericRangeQuery数字范围查询等。&lt;/p&gt;
&lt;p&gt;         如下代码：&lt;/p&gt;
&lt;p&gt;    　　Query query = &lt;strong&gt;new&lt;/strong&gt; TermQuery(&lt;strong&gt;new&lt;/strong&gt; Term(&quot;name&quot;, &quot;lucene&quot;));&lt;/p&gt;

&lt;p&gt;         2）使用QueryParse解析查询表达式&lt;/p&gt;
&lt;p&gt;         QueryParse会将用户输入的查询表达式解析成Query对象实例。&lt;/p&gt;
&lt;p&gt;         如下代码：&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;           QueryParser queryParser = &lt;strong&gt;new&lt;/strong&gt; QueryParser(&quot;name&quot;, &lt;strong&gt;new&lt;/strong&gt; IKAnalyzer());&lt;/p&gt;
&lt;p&gt;           Query query = queryParser.parse(&quot;name:lucene&quot;);&lt;/p&gt;

&lt;p&gt;　　首先，演示第一种方法，&lt;strong&gt;使用query的子类查询&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　实现步骤&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　第一步：创建一个Directory对象，也就是索引库存放的位置。&lt;/p&gt;
&lt;p&gt;　　第二步：创建一个indexReader对象，需要指定Directory对象。&lt;/p&gt;
&lt;p&gt;　　第三步：创建一个indexsearcher对象，需要指定IndexReader对象&lt;/p&gt;
&lt;p&gt;　　第四步：创建一个Query的子类对象，指定查询的域和查询的关键词。&lt;/p&gt;
&lt;p&gt;　　第五步：执行查询。&lt;/p&gt;
&lt;p&gt;　　第六步：返回查询结果。遍历查询结果并输出。&lt;/p&gt;
&lt;p&gt;　　第七步：关闭IndexReader对象&lt;/p&gt;

&lt;h3&gt;　　MatchAllDocsQuery&lt;/h3&gt;
&lt;p&gt;　　使用MatchAllDocsQuery查询索引目录中的所有文档&lt;/p&gt;
&lt;p&gt;　　&lt;strong&gt;具体代码：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;    @Test
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; testMatchAllDocsQuery() &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;创建一个Directory对象，指定索引库存放的路径&lt;/span&gt;
        Directory directory = FSDirectory.open(&lt;span&gt;new&lt;/span&gt; File(&quot;E:\\programme\\test&quot;&lt;span&gt;));
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;创建IndexReader对象，需要指定Directory对象&lt;/span&gt;
        IndexReader indexReader =&lt;span&gt; DirectoryReader.open(directory);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;创建Indexsearcher对象，需要指定IndexReader对象&lt;/span&gt;
        IndexSearcher indexSearcher = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; IndexSearcher(indexReader);
        
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;创建查询条件
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;使用MatchAllDocsQuery查询索引目录中的所有文档&lt;/span&gt;
        Query query = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; MatchAllDocsQuery();
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;执行查询
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;第一个参数是查询对象，第二个参数是查询结果返回的最大值&lt;/span&gt;
        TopDocs topDocs = indexSearcher.search(query, 10&lt;span&gt;);
        
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;查询结果的总条数&lt;/span&gt;
        System.out.println(&quot;查询结果的总条数：&quot;+&lt;span&gt; topDocs.totalHits);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;遍历查询结果
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;topDocs.scoreDocs存储了document对象的id
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;ScoreDoc[] scoreDocs = topDocs.scoreDocs;&lt;/span&gt;
        &lt;span&gt;for&lt;/span&gt;&lt;span&gt; (ScoreDoc scoreDoc : topDocs.scoreDocs) {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;scoreDoc.doc属性就是document对象的id
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;int doc = scoreDoc.doc;
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;根据document的id找到document对象&lt;/span&gt;
            Document document =&lt;span&gt; indexSearcher.doc(scoreDoc.doc);
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;文件名称&lt;/span&gt;
            System.out.println(document.get(&quot;fileName&quot;&lt;span&gt;));
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;文件内容&lt;/span&gt;
            System.out.println(document.get(&quot;fileContent&quot;&lt;span&gt;));
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;文件大小&lt;/span&gt;
            System.out.println(document.get(&quot;fileSize&quot;&lt;span&gt;));
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;文件路径&lt;/span&gt;
            System.out.println(document.get(&quot;filePath&quot;&lt;span&gt;));
            System.out.println(&lt;/span&gt;&quot;----------------------------------&quot;&lt;span&gt;);
        }
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;关闭indexreader对象&lt;/span&gt;
&lt;span&gt;        indexReader.close();
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;　　TermQuery（精准查询）&lt;/h3&gt;
&lt;p&gt;　　TermQuery，通过项查询，TermQuery不使用分析器所以建议匹配不分词的Field域查询，比如订单号、分类ID号等。&lt;/p&gt;
&lt;p&gt;指定要查询的域和要查询的关键词。&lt;/p&gt;
&lt;p&gt;　&lt;strong&gt;　具体代码： &lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;搜索索引&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;    @Test
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; testSearchIndex() &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; IOException{
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;创建一个Directory对象，指定索引库存放的路径&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt;         Directory directory = FSDirectory.open(&lt;span&gt;new&lt;/span&gt; File(&quot;E:\\programme\\test&quot;&lt;span&gt;));
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;创建IndexReader对象，需要指定Directory对象&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt;         IndexReader indexReader =&lt;span&gt; DirectoryReader.open(directory);
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;创建Indexsearcher对象，需要指定IndexReader对象&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt;         IndexSearcher indexSearcher = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; IndexSearcher(indexReader);
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;创建一个TermQuery（精准查询）对象，指定查询的域与查询的关键词
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;创建查询&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt;         Query query = &lt;span&gt;new&lt;/span&gt; TermQuery(&lt;span&gt;new&lt;/span&gt; Term(&quot;fileName&quot;, &quot;apache&quot;&lt;span&gt;));
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;执行查询
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;第一个参数是查询对象，第二个参数是查询结果返回的最大值&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt;         TopDocs topDocs = indexSearcher.search(query, 10&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;查询结果的总条数&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt;         System.out.println(&quot;查询结果的总条数：&quot;+&lt;span&gt; topDocs.totalHits);
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;遍历查询结果
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;topDocs.scoreDocs存储了document对象的id
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;ScoreDoc[] scoreDocs = topDocs.scoreDocs;&lt;/span&gt;
&lt;span&gt;21&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt;&lt;span&gt; (ScoreDoc scoreDoc : topDocs.scoreDocs) {
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;scoreDoc.doc属性就是document对象的id
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;int doc = scoreDoc.doc;
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;根据document的id找到document对象&lt;/span&gt;
&lt;span&gt;25&lt;/span&gt;             Document document =&lt;span&gt; indexSearcher.doc(scoreDoc.doc);
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;文件名称&lt;/span&gt;
&lt;span&gt;27&lt;/span&gt;             System.out.println(document.get(&quot;fileName&quot;&lt;span&gt;));
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;文件内容&lt;/span&gt;
&lt;span&gt;29&lt;/span&gt;             System.out.println(document.get(&quot;fileContent&quot;&lt;span&gt;));
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;文件大小&lt;/span&gt;
&lt;span&gt;31&lt;/span&gt;             System.out.println(document.get(&quot;fileSize&quot;&lt;span&gt;));
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;文件路径&lt;/span&gt;
&lt;span&gt;33&lt;/span&gt;             System.out.println(document.get(&quot;filePath&quot;&lt;span&gt;));
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt;             System.out.println(&quot;----------------------------------&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;关闭indexreader对象&lt;/span&gt;
&lt;span&gt;37&lt;/span&gt; &lt;span&gt;        indexReader.close();
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;　　NumericRangeQuery&lt;/h3&gt;
&lt;p&gt;　　可以根据数值范围查询。&lt;/p&gt;
&lt;p&gt;　　&lt;strong&gt;具体代码：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;数值范围查询&lt;/span&gt;
&lt;span&gt;    @Test
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; testNumericRangeQuery() &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;创建一个Directory对象，指定索引库存放的路径&lt;/span&gt;
        Directory directory = FSDirectory.open(&lt;span&gt;new&lt;/span&gt; File(&quot;E:\\programme\\test&quot;&lt;span&gt;));
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;创建IndexReader对象，需要指定Directory对象&lt;/span&gt;
        IndexReader indexReader =&lt;span&gt; DirectoryReader.open(directory);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;创建Indexsearcher对象，需要指定IndexReader对象&lt;/span&gt;
        IndexSearcher indexSearcher = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; IndexSearcher(indexReader);
        
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;创建查询
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;参数：
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;1.域名
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;2.最小值
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;3.最大值
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;4.是否包含最小值
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;5.是否包含最大值&lt;/span&gt;
        Query query = NumericRangeQuery.newLongRange(&quot;fileSize&quot;, 41L, 2055L, &lt;span&gt;true&lt;/span&gt;, &lt;span&gt;true&lt;/span&gt;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;执行查询

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;第一个参数是查询对象，第二个参数是查询结果返回的最大值&lt;/span&gt;
        TopDocs topDocs = indexSearcher.search(query, 10&lt;span&gt;);
        
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;查询结果的总条数&lt;/span&gt;
        System.out.println(&quot;查询结果的总条数：&quot;+&lt;span&gt; topDocs.totalHits);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;遍历查询结果
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;topDocs.scoreDocs存储了document对象的id
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;ScoreDoc[] scoreDocs = topDocs.scoreDocs;&lt;/span&gt;
        &lt;span&gt;for&lt;/span&gt;&lt;span&gt; (ScoreDoc scoreDoc : topDocs.scoreDocs) {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;scoreDoc.doc属性就是document对象的id
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;int doc = scoreDoc.doc;
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;根据document的id找到document对象&lt;/span&gt;
            Document document =&lt;span&gt; indexSearcher.doc(scoreDoc.doc);
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;文件名称&lt;/span&gt;
            System.out.println(document.get(&quot;fileName&quot;&lt;span&gt;));
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;文件内容&lt;/span&gt;
            System.out.println(document.get(&quot;fileContent&quot;&lt;span&gt;));
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;文件大小&lt;/span&gt;
            System.out.println(document.get(&quot;fileSize&quot;&lt;span&gt;));
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;文件路径&lt;/span&gt;
            System.out.println(document.get(&quot;filePath&quot;&lt;span&gt;));
            System.out.println(&lt;/span&gt;&quot;----------------------------------&quot;&lt;span&gt;);
        }
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;关闭indexreader对象&lt;/span&gt;
&lt;span&gt;        indexReader.close();
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;　　BooleanQuery&lt;/h3&gt;
&lt;p&gt;　　可以组合查询条件。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　具体代码：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;组合条件查询&lt;/span&gt;
&lt;span&gt;    @Test
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; testBooleanQuery() &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;创建一个Directory对象，指定索引库存放的路径&lt;/span&gt;
        Directory directory = FSDirectory.open(&lt;span&gt;new&lt;/span&gt; File(&quot;E:\\programme\\test&quot;&lt;span&gt;));
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;创建IndexReader对象，需要指定Directory对象&lt;/span&gt;
        IndexReader indexReader =&lt;span&gt; DirectoryReader.open(directory);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;创建Indexsearcher对象，需要指定IndexReader对象&lt;/span&gt;
        IndexSearcher indexSearcher = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; IndexSearcher(indexReader);
        
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;创建一个布尔查询对象&lt;/span&gt;
        BooleanQuery query = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; BooleanQuery();
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;创建第一个查询条件&lt;/span&gt;
        Query query1 = &lt;span&gt;new&lt;/span&gt; TermQuery(&lt;span&gt;new&lt;/span&gt; Term(&quot;fileName&quot;, &quot;apache&quot;&lt;span&gt;));
        Query query2 &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt; TermQuery(&lt;span&gt;new&lt;/span&gt; Term(&quot;fileName&quot;, &quot;lucene&quot;&lt;span&gt;));
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;组合查询条件&lt;/span&gt;
&lt;span&gt;        query.add(query1, Occur.MUST);
        query.add(query2, Occur.MUST);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;执行查询

        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;第一个参数是查询对象，第二个参数是查询结果返回的最大值&lt;/span&gt;
        TopDocs topDocs = indexSearcher.search(query, 10&lt;span&gt;);
        
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;查询结果的总条数&lt;/span&gt;
        System.out.println(&quot;查询结果的总条数：&quot;+&lt;span&gt; topDocs.totalHits);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;遍历查询结果
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;topDocs.scoreDocs存储了document对象的id
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;ScoreDoc[] scoreDocs = topDocs.scoreDocs;&lt;/span&gt;
        &lt;span&gt;for&lt;/span&gt;&lt;span&gt; (ScoreDoc scoreDoc : topDocs.scoreDocs) {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;scoreDoc.doc属性就是document对象的id
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;int doc = scoreDoc.doc;
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;根据document的id找到document对象&lt;/span&gt;
            Document document =&lt;span&gt; indexSearcher.doc(scoreDoc.doc);
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;文件名称&lt;/span&gt;
            System.out.println(document.get(&quot;fileName&quot;&lt;span&gt;));
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;文件内容&lt;/span&gt;
            System.out.println(document.get(&quot;fileContent&quot;&lt;span&gt;));
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;文件大小&lt;/span&gt;
            System.out.println(document.get(&quot;fileSize&quot;&lt;span&gt;));
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;文件路径&lt;/span&gt;
            System.out.println(document.get(&quot;filePath&quot;&lt;span&gt;));
            System.out.println(&lt;/span&gt;&quot;----------------------------------&quot;&lt;span&gt;);
        }
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;关闭indexreader对象&lt;/span&gt;
&lt;span&gt;        indexReader.close();
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　Occur.MUST：必须满足此条件，相当于and&lt;/p&gt;
&lt;p&gt;　　Occur.SHOULD：应该满足，但是不满足也可以，相当于or&lt;/p&gt;
&lt;p&gt;　　Occur.MUST_NOT：必须不满足。相当于not&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　接着，演示第二种方法：&lt;strong&gt;使用queryparser查询&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　通过QueryParser也可以创建Query，QueryParser提供一个Parse方法，此方法可以直接根据查询语法来查询。Query对象执行的查询语法可通过System.out.println(query);查询。&lt;/p&gt;
&lt;p&gt;　　这个操作需要使用到分析器。建议创建索引时使用的分析器和查询索引时使用的分析器要一致。&lt;/p&gt;
&lt;p&gt;　　&lt;strong&gt;queryparser&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　具体代码：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;    @Test
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; testQueryParser() &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;创建一个Directory对象，指定索引库存放的路径&lt;/span&gt;
        Directory directory = FSDirectory.open(&lt;span&gt;new&lt;/span&gt; File(&quot;E:\\programme\\test&quot;&lt;span&gt;));
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;创建IndexReader对象，需要指定Directory对象&lt;/span&gt;
        IndexReader indexReader =&lt;span&gt; DirectoryReader.open(directory);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;创建Indexsearcher对象，需要指定IndexReader对象&lt;/span&gt;
        IndexSearcher indexSearcher = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; IndexSearcher(indexReader);
        
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;创建queryparser对象
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;第一个参数默认搜索的域
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;第二个参数就是分析器对象&lt;/span&gt;
        QueryParser queryParser = &lt;span&gt;new&lt;/span&gt; QueryParser(&quot;fileName&quot;, &lt;span&gt;new&lt;/span&gt;&lt;span&gt; IKAnalyzer());
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;使用默认的域,这里用的是语法，下面会详细讲解一下&lt;/span&gt;
        Query query = queryParser.parse(&quot;apache&quot;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;不使用默认的域，可以自己指定域
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;Query query = queryParser.parse(&quot;fileContent:apache&quot;);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;执行查询


        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;第一个参数是查询对象，第二个参数是查询结果返回的最大值&lt;/span&gt;
        TopDocs topDocs = indexSearcher.search(query, 10&lt;span&gt;);
        
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;查询结果的总条数&lt;/span&gt;
        System.out.println(&quot;查询结果的总条数：&quot;+&lt;span&gt; topDocs.totalHits);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;遍历查询结果
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;topDocs.scoreDocs存储了document对象的id
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;ScoreDoc[] scoreDocs = topDocs.scoreDocs;&lt;/span&gt;
        &lt;span&gt;for&lt;/span&gt;&lt;span&gt; (ScoreDoc scoreDoc : topDocs.scoreDocs) {
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;scoreDoc.doc属性就是document对象的id
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;int doc = scoreDoc.doc;
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;根据document的id找到document对象&lt;/span&gt;
            Document document =&lt;span&gt; indexSearcher.doc(scoreDoc.doc);
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;文件名称&lt;/span&gt;
            System.out.println(document.get(&quot;fileName&quot;&lt;span&gt;));
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;文件内容&lt;/span&gt;
            System.out.println(document.get(&quot;fileContent&quot;&lt;span&gt;));
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;文件大小&lt;/span&gt;
            System.out.println(document.get(&quot;fileSize&quot;&lt;span&gt;));
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;文件路径&lt;/span&gt;
            System.out.println(document.get(&quot;filePath&quot;&lt;span&gt;));
            System.out.println(&lt;/span&gt;&quot;----------------------------------&quot;&lt;span&gt;);
        }
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;关闭indexreader对象&lt;/span&gt;
&lt;span&gt;        indexReader.close();        
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h4&gt;　　查询语法&lt;/h4&gt;
&lt;p&gt;　　1、基础的查询语法，关键词查询：&lt;/p&gt;
&lt;p&gt;　　　　域名+“：”+搜索的关键字&lt;/p&gt;
&lt;p&gt;　　　　例如：content:java&lt;/p&gt;
&lt;p&gt;　　2、范围查询&lt;/p&gt;
&lt;p&gt;　　　　域名+“:”+[最小值 TO 最大值]&lt;/p&gt;
&lt;p&gt;　　　　例如：size:[1 TO 1000]&lt;/p&gt;
&lt;p&gt;　　　　范围查询在lucene中支持数值类型，不支持字符串类型。在solr中支持字符串类型。&lt;/p&gt;
&lt;p&gt;　　3、组合条件查询&lt;/p&gt;
&lt;p&gt;　　　　1）+条件1 +条件2：两个条件之间是并且的关系and&lt;/p&gt;
&lt;p&gt;　　　　　　例如：+filename:apache +content:apache&lt;/p&gt;
&lt;p&gt;　　　　2）+条件1 条件2：必须满足第一个条件，应该满足第二个条件&lt;/p&gt;
&lt;p&gt;　　　　　　例如：+filename:apache content:apache&lt;/p&gt;
&lt;p&gt;　　　　3）条件1 条件2：两个条件满足其一即可。&lt;/p&gt;
&lt;p&gt;　　　　　　例如：filename:apache content:apache&lt;/p&gt;
&lt;p&gt;　　　　4）-条件1 条件2：必须不满足条件1，要满足条件2&lt;/p&gt;
&lt;p&gt;　　　　　　例如：-filename:apache content:apache&lt;/p&gt;
&lt;table border=&quot;1&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody readability=&quot;3&quot;&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;411&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;span&gt;Occur.MUST 查询条件必须满足，相当于and&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;215&quot;&gt;
&lt;p&gt;&lt;span&gt;+（加号）&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;411&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;span&gt;Occur.SHOULD 查询条件可选，相当于or&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;215&quot;&gt;
&lt;p&gt;&lt;span&gt;空（不用符号）&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;411&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;span&gt;Occur.MUST_NOT 查询条件不能满足，相当于not非&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;215&quot;&gt;
&lt;p&gt;&lt;span&gt;-（减号）&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;　　第二种写法：&lt;/p&gt;
&lt;p&gt;　　条件1 AND 条件2&lt;/p&gt;
&lt;p&gt;　　条件1 OR 条件2&lt;/p&gt;
&lt;p&gt;　　条件1 NOT 条件2&lt;/p&gt;

&lt;h3&gt;　　MultiFieldQueryParser&lt;/h3&gt;
&lt;p&gt;　　可以指定多个默认搜索域&lt;/p&gt;
&lt;p&gt;　　&lt;strong&gt;具体代码：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;    @Test
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; testMultiFiledQueryParser() &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;创建一个Directory对象，指定索引库存放的路径&lt;/span&gt;
&lt;span&gt; 4&lt;/span&gt;         Directory directory = FSDirectory.open(&lt;span&gt;new&lt;/span&gt; File(&quot;E:\\programme\\test&quot;&lt;span&gt;));
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;创建IndexReader对象，需要指定Directory对象&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt;         IndexReader indexReader =&lt;span&gt; DirectoryReader.open(directory);
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;创建Indexsearcher对象，需要指定IndexReader对象&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt;         IndexSearcher indexSearcher = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; IndexSearcher(indexReader);
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;         
&lt;span&gt;10&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;可以指定默认搜索的域是多个&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt;         String[] fields = {&quot;fileName&quot;, &quot;fileContent&quot;&lt;span&gt;};
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;创建一个MulitFiledQueryParser对象&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt;         MultiFieldQueryParser queryParser = &lt;span&gt;new&lt;/span&gt; MultiFieldQueryParser(fields, &lt;span&gt;new&lt;/span&gt;&lt;span&gt; IKAnalyzer());
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;         Query query = queryParser.parse(&quot;apache&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;        System.out.println(query);
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;执行查询
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; 
&lt;span&gt;18&lt;/span&gt; 
&lt;span&gt;19&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;第一个参数是查询对象，第二个参数是查询结果返回的最大值&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt;         TopDocs topDocs = indexSearcher.search(query, 10&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;         
&lt;span&gt;22&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;查询结果的总条数&lt;/span&gt;
&lt;span&gt;23&lt;/span&gt;         System.out.println(&quot;查询结果的总条数：&quot;+&lt;span&gt; topDocs.totalHits);
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;遍历查询结果
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;topDocs.scoreDocs存储了document对象的id
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;ScoreDoc[] scoreDocs = topDocs.scoreDocs;&lt;/span&gt;
&lt;span&gt;27&lt;/span&gt;         &lt;span&gt;for&lt;/span&gt;&lt;span&gt; (ScoreDoc scoreDoc : topDocs.scoreDocs) {
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;scoreDoc.doc属性就是document对象的id
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;int doc = scoreDoc.doc;
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;根据document的id找到document对象&lt;/span&gt;
&lt;span&gt;31&lt;/span&gt;             Document document =&lt;span&gt; indexSearcher.doc(scoreDoc.doc);
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;文件名称&lt;/span&gt;
&lt;span&gt;33&lt;/span&gt;             System.out.println(document.get(&quot;fileName&quot;&lt;span&gt;));
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;文件内容&lt;/span&gt;
&lt;span&gt;35&lt;/span&gt;             System.out.println(document.get(&quot;fileContent&quot;&lt;span&gt;));
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;文件大小&lt;/span&gt;
&lt;span&gt;37&lt;/span&gt;             System.out.println(document.get(&quot;fileSize&quot;&lt;span&gt;));
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;文件路径&lt;/span&gt;
&lt;span&gt;39&lt;/span&gt;             System.out.println(document.get(&quot;filePath&quot;&lt;span&gt;));
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt;             System.out.println(&quot;----------------------------------&quot;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;关闭indexreader对象&lt;/span&gt;
&lt;span&gt;43&lt;/span&gt; &lt;span&gt;        indexReader.close();
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt;     }
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt; &lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt; &lt;span&gt;IndexSearcher搜索方法&lt;/span&gt;&lt;/h2&gt;
&lt;table border=&quot;1&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody readability=&quot;12&quot;&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; width=&quot;358&quot;&gt;
&lt;p align=&quot;center&quot;&gt;&lt;span&gt;方法&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;363&quot;&gt;
&lt;p align=&quot;center&quot;&gt;&lt;span&gt;说明&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;7.5&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;358&quot; readability=&quot;6&quot;&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;indexSearcher.search(query, n)&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;363&quot; readability=&quot;5&quot;&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;根据Query搜索，返回评分最高的n条记录&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;9&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;358&quot; readability=&quot;7&quot;&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;indexSearcher.search(query, filter, n)&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;363&quot; readability=&quot;5&quot;&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;根据Query搜索，添加过滤策略，返回评分最高的n条记录&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;9&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;358&quot; readability=&quot;7&quot;&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;indexSearcher.search(query, n, sort)&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;363&quot; readability=&quot;5&quot;&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;根据Query搜索，添加排序策略，返回评分最高的n条记录&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;10.5&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;358&quot; readability=&quot;8&quot;&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;indexSearcher.search(booleanQuery, filter, n, sort)&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;363&quot; readability=&quot;5&quot;&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;根据Query搜索，添加过滤策略，添加排序策略，返回评分最高的n条记录&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;

&lt;h2&gt;　&lt;span&gt;　TopDocs&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;　　Lucene搜索结果可通过TopDocs遍历，TopDocs类提供了少量的属性，如下：&lt;/p&gt;
&lt;table border=&quot;1&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody readability=&quot;1&quot;&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; width=&quot;308&quot;&gt;
&lt;p align=&quot;center&quot;&gt;&lt;span&gt;方法或属性&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;393&quot;&gt;
&lt;p align=&quot;center&quot;&gt;&lt;span&gt;说明&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td valign=&quot;top&quot; width=&quot;308&quot;&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;totalHits&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;393&quot; readability=&quot;5&quot;&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;匹配搜索条件的总记录数&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; width=&quot;308&quot;&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;scoreDocs&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td valign=&quot;top&quot; width=&quot;393&quot;&gt;
&lt;p align=&quot;left&quot;&gt;&lt;span&gt;顶部匹配记录&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;　　注意：&lt;/p&gt;
&lt;p&gt;　　　　（1）Search方法需要指定匹配记录数量n：indexSearcher.search(query, n)&lt;/p&gt;
&lt;p&gt;　　　　（2）TopDocs.totalHits：是匹配索引库中所有记录的数量&lt;/p&gt;
&lt;p&gt;　　　　（3）TopDocs.scoreDocs：匹配相关度高的前边记录数组，scoreDocs的长度小于等于search方法指定的参数n&lt;/p&gt;

&lt;p&gt;　　&lt;strong&gt;中文分词器 ：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　首先，看一看Lucene自带的中文分词器&lt;/p&gt;
&lt;p class=&quot;ListParagraph&quot;&gt;　　（1）StandardAnalyzer：（标准分词器，也是前面例子中使用的分词器）&lt;/p&gt;
&lt;p&gt;　　　　单字分词：就是按照中文一个字一个字地进行分词。&lt;/p&gt;
&lt;p&gt;　　　　如：“我爱中国”，&lt;br/&gt;　　　　效果：“我”、“爱”、“中”、“国”。&lt;/p&gt;
&lt;p class=&quot;ListParagraph&quot;&gt;　　（2）CJKAnalyzer&lt;/p&gt;
&lt;p&gt;　　　　二分法分词：按两个字进行切分。&lt;/p&gt;
&lt;p&gt;　　　　如：“我是中国人”，&lt;/p&gt;
&lt;p&gt;　　　　效果：“我是”、“是中”、“中国”“国人”。&lt;/p&gt;
&lt;p&gt;　　&lt;strong&gt;但上边两个分词器无法满足需求。&lt;/strong&gt;&lt;/p&gt;
&lt;p class=&quot;ListParagraph&quot;&gt;　　（3）SmartChineseAnalyzer&lt;/p&gt;
&lt;p class=&quot;ListParagraph&quot;&gt;　　　　对中文支持较好，但扩展性差，扩展词库，禁用词库和同义词库等不好处理&lt;/p&gt;
&lt;p class=&quot;ListParagraph&quot;&gt; &lt;/p&gt;
&lt;p&gt;　　然后，看一看我们开发真正使用的&lt;strong&gt;第三方中文分词器：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　&lt;/strong&gt;我们今天介绍IK-analyzer这款第三方中文分词器&lt;/p&gt;
&lt;p&gt;&lt;span lang=&quot;EN-US&quot;&gt;　　IK-analyzer： 最新版在&lt;span lang=&quot;EN-US&quot;&gt;https://code.google.com/p/ik-analyzer/上，支持&lt;span lang=&quot;EN-US&quot;&gt;Lucene 4.10从&lt;span lang=&quot;EN-US&quot;&gt;2006年&lt;span lang=&quot;EN-US&quot;&gt;12月推出&lt;span lang=&quot;EN-US&quot;&gt;1.0版开始， &lt;span lang=&quot;EN-US&quot;&gt;IKAnalyzer已经推出了&lt;span lang=&quot;EN-US&quot;&gt;4个大版本。最初，它是以开源项目&lt;span lang=&quot;EN-US&quot;&gt;Luence为应用主体的，结合词典分词和文法分析算法的中文分词组件。从&lt;span lang=&quot;EN-US&quot;&gt;3.0版本开 始，&lt;span lang=&quot;EN-US&quot;&gt;IK发展为面向&lt;span lang=&quot;EN-US&quot;&gt;Java的公用分词组件，独立于&lt;span lang=&quot;EN-US&quot;&gt;Lucene项目，同时提供了对&lt;span lang=&quot;EN-US&quot;&gt;Lucene的默认优化实现。在&lt;span lang=&quot;EN-US&quot;&gt;2012版本中，&lt;span lang=&quot;EN-US&quot;&gt;IK实现了简单的分词 歧义排除算法，标志着&lt;span lang=&quot;EN-US&quot;&gt;IK分词器从单纯的词典分词向模拟语义分词衍化。 但是也就是&lt;span lang=&quot;EN-US&quot;&gt;2012年&lt;span lang=&quot;EN-US&quot;&gt;12月后没有在更新。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;　&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;strong&gt;使用方法：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　第一步：把jar包添加到工程中&lt;/p&gt;
&lt;p&gt;　　第二步：把&lt;strong&gt;配置文件&lt;/strong&gt;和&lt;strong&gt;扩展&lt;/strong&gt;词词典和&lt;strong&gt;停用词词典&lt;/strong&gt;添加到classpath下（停用词词典与扩展词词典名称可自行定义，只要在配置文件中配置好就可以了）&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1227182/201710/1227182-20171012185227840-1236066687.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;　　注意：&lt;strong&gt;扩展&lt;/strong&gt;词&lt;/span&gt;词典&lt;/span&gt;和&lt;strong&gt;停用词词典&lt;/strong&gt;文件的格式为UTF-8，注意是无BOM 的UTF-8 编码。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;　　配置文件详情&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;&amp;lt;?&lt;/span&gt;&lt;span&gt;xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;?&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE properties SYSTEM &quot;http://java.sun.com/dtd/properties.dtd&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;  
&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;properties&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;  
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;comment&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;IK Analyzer 扩展配置&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;comment&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;用户可以在这里配置自己的扩展字典 &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt; 
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;entry &lt;/span&gt;&lt;span&gt;key&lt;/span&gt;&lt;span&gt;=&quot;ext_dict&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;ext.dic;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;entry&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; 
    
    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;用户可以在这里配置自己的扩展停止词字典&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;entry &lt;/span&gt;&lt;span&gt;key&lt;/span&gt;&lt;span&gt;=&quot;ext_stopwords&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;stopword.dic;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;entry&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; 
&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;properties&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;　　停用词词典与扩展词词典样例：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1227182/201710/1227182-20171012185848824-1377191348.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;&lt;span lang=&quot;EN-US&quot;&gt;　　这样，创建分析器时，用一下代码就好了&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
Analyzer analyzer = &lt;span&gt;new&lt;/span&gt; IKAnalyzer();
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;　　&lt;span&gt;注意：搜索使用的分析器要和索引使用的分析器一致，不然搜索出来结果可能会错乱。&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;　　3. 删除索引&lt;/h2&gt;
&lt;p&gt; 　　（1）删除全部索引&lt;/p&gt;
&lt;p&gt;　　说明：将索引目录的索引信息全部删除，直接彻底删除，无法恢复。&lt;span&gt;&lt;strong&gt;此方法慎用！！&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;删除全部索引&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;    @Test
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; testDeleteAllIndex() &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;         Directory directory = FSDirectory.open(&lt;span&gt;new&lt;/span&gt; File(&quot;E:\\programme\\test&quot;&lt;span&gt;));
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;         Analyzer analyzer = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; IKAnalyzer();
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;         IndexWriterConfig config = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; IndexWriterConfig(Version.LATEST, analyzer);
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;         IndexWriter indexWriter = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; IndexWriter(directory, config);
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;删除全部索引&lt;/span&gt;
&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;        indexWriter.deleteAll();
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;关闭indexwriter&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt; &lt;span&gt;        indexWriter.close();
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;     }
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;　　（2）指定查询条件删除&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;根据查询条件删除索引&lt;/span&gt;
&lt;span&gt;    @Test
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; deleteIndexByQuery() &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
        Directory directory &lt;/span&gt;= FSDirectory.open(&lt;span&gt;new&lt;/span&gt; File(&quot;E:\\programme\\test&quot;&lt;span&gt;));
        Analyzer analyzer &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; IKAnalyzer();
        IndexWriterConfig config &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; IndexWriterConfig(Version.LATEST, analyzer);
        IndexWriter indexWriter &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; IndexWriter(directory, config);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;创建一个查询条件&lt;/span&gt;
        Query query = &lt;span&gt;new&lt;/span&gt; TermQuery(&lt;span&gt;new&lt;/span&gt; Term(&quot;fileContent&quot;, &quot;apache&quot;&lt;span&gt;));
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;根据查询条件删除&lt;/span&gt;
&lt;span&gt;        indexWriter.deleteDocuments(query);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;关闭indexwriter&lt;/span&gt;
&lt;span&gt;        indexWriter.close();
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;　　4 索引库的修改&lt;/h2&gt;
&lt;p&gt;　　更新的原理就是先删除在添加&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;修改索引库&lt;/span&gt;
&lt;span&gt;    @Test
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; updateIndex() &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
        Directory directory &lt;/span&gt;= FSDirectory.open(&lt;span&gt;new&lt;/span&gt; File(&quot;E:\\programme\\test&quot;&lt;span&gt;));
        Analyzer analyzer &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; IKAnalyzer();
        IndexWriterConfig config &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; IndexWriterConfig(Version.LATEST, analyzer);
        IndexWriter indexWriter &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; IndexWriter(directory, config);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;创建一个Document对象&lt;/span&gt;
        Document document = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Document();
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;向document对象中添加域。
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;不同的document可以有不同的域，同一个document可以有相同的域。&lt;/span&gt;
        document.add(&lt;span&gt;new&lt;/span&gt; TextField(&quot;fileXXX&quot;, &quot;要更新的文档&quot;&lt;span&gt;, Store.YES));
        document.add(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt; TextField(&quot;contentYYY&quot;, &quot;简介 Lucene 是一个基于 Java 的全文信息检索工具包。&quot;&lt;span&gt;, Store.YES));
        indexWriter.updateDocument(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt; Term(&quot;fileName&quot;, &quot;apache&quot;&lt;span&gt;), document);
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;关闭indexWriter&lt;/span&gt;
&lt;span&gt;        indexWriter.close();
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 　　这样，Lucene的简单介绍使用就完成了。&lt;/p&gt;
</description>
<pubDate>Thu, 12 Oct 2017 14:06:00 +0000</pubDate>
<dc:creator>高压锅里的小白</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/xiaobai1226/p/7652093.html</dc:identifier>
</item>
<item>
<title>DNS—正、反向解析；委派；主从；子域；转发；智能dns等的实现 - 阿龙along</title>
<link>http://www.cnblogs.com/along21/p/7657793.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/along21/p/7657793.html</guid>
<description>&lt;p&gt;前言：DNS，耳熟能详的东西，内容太多，小编也不太好讲清，只能写几个实验详解，供大家参考。&lt;/p&gt;
&lt;h2&gt;一、简单介绍&lt;/h2&gt;
&lt;p&gt;1、DNS：通过主机名，最终得到该主机名对应的IP地址的过程叫做域名解析（或主机名解析）。&lt;/p&gt;
&lt;p&gt;端口号：53/udp, 53/tcp&lt;/p&gt;

&lt;p&gt;2、等级&lt;/p&gt;
&lt;p&gt;根域 ：世界有13个ip地址管理，有10个在美国，1个在日本，3个在欧洲，荷兰，瑞典&lt;/p&gt;
&lt;p&gt;一级域名：Top Level Domain: tld&lt;/p&gt;
&lt;p&gt;　　com, edu, mil, gov, net, org, int,arpa&lt;/p&gt;
&lt;p&gt;　　三类：组织域、国家域(.cn, .ca, .hk, .tw)、反向域&lt;/p&gt;
&lt;p&gt;二级域名&lt;/p&gt;
&lt;p&gt;三级域名&lt;/p&gt;
&lt;p&gt;最多127 级域名&lt;/p&gt;
&lt;p&gt;例如：www.baidu.com.&lt;/p&gt;
&lt;p&gt;. 根&lt;/p&gt;
&lt;p&gt;com 一级域名，相当于子目录&lt;/p&gt;
&lt;p&gt;baidu&lt;/p&gt;
&lt;p&gt;www&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1216496/201710/1216496-20171012195353012-1759628164.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;3、DNS服务器类型&lt;/p&gt;
&lt;p&gt;DNS 服务器的类型：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;主&lt;/strong&gt;DNS 服务器：管理和维护所负责解析的域内解析库的服务器&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;从&lt;/strong&gt;DNS 服务器：从主服务器或从服务器&quot;复制&quot;（区域传输）解析库副本&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;4、资源记录&lt;/p&gt;
&lt;p&gt;资源记录：Resource Record, RR&lt;/p&gt;
&lt;p&gt;记录类型：&lt;strong/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;SOA&lt;/strong&gt;&lt;/span&gt; ：Start Of Authority ，起始授权记录；一个区域解析库有且仅能有一个SOA 记录，必须位于解析库的&lt;strong&gt;第一条记录，同步主从数据&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;A&lt;/span&gt;&lt;/strong&gt; ：internet Address ，作用，FQDN --&amp;gt; IP（名字到ip）&lt;/p&gt;
&lt;p&gt;AAAA: FQDN --&amp;gt; &lt;strong&gt;IPv6&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;PTR&lt;/strong&gt;: PoinTeR ，&lt;strong&gt;IP --&amp;gt; FQDN 全称域名&lt;/strong&gt;（ip到名字）&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;NS&lt;/strong&gt;&lt;/span&gt;: Name Server ，专用于&lt;strong&gt;标明&lt;/strong&gt;当前区域的DNS 服务器，&lt;strong&gt;谁是域的服务器&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;CNAME&lt;/strong&gt; ：Canonical Name ，&lt;strong&gt;别名&lt;/strong&gt;记录&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;MX&lt;/strong&gt;: Mail eXchanger &lt;strong&gt;邮件&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;5、资源记录定义的格式：（5项，如果下一条和上一天一样，可以继承）&lt;/p&gt;
&lt;p&gt;语法：&lt;strong&gt;name　　 [TTL(缓存生存期)]　　 IN　　 rr_type 　　value （5列）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;注意：&lt;/p&gt;
&lt;p&gt;(1) TTL 可从全局继承 (缓存生存期)，例：$TTL 1D 一天 设为变量，下边全部使用&lt;/p&gt;
&lt;p&gt;(2) &lt;strong&gt;@ 可用于引用当前区域的名字，&lt;/strong&gt;因为有&lt;strong&gt;特殊含义&lt;/strong&gt;，所以后边不能用，例如邮箱.&lt;/p&gt;
&lt;p&gt;(3) 同一个名字可以通过多条记录定义多个不同的值；此时DNS 服务器会以轮询方式响应&lt;/p&gt;
&lt;p&gt;(4) 同一个值也可能有多个不同的定义名字；通过多个不同的名字指向同一个值进行定义；此仅表示通过多个不同的名字可以找到同一个主机&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1216496/201710/1216496-20171012195355746-197248862.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h2&gt;二、BIND安装及named服务的介绍&lt;/h2&gt;
&lt;p&gt;DNS的实现就是named服务，named服务需要安装bind包&lt;/p&gt;
&lt;p&gt;1、BIND 的安装配置：yum install bind -y&lt;/p&gt;
&lt;p&gt;dns 服务程序包:&lt;strong&gt;bind&lt;/strong&gt; ，unbound（新的）&lt;/p&gt;
&lt;p&gt;程序名：&lt;strong&gt;named&lt;/strong&gt; ，unbound&lt;/p&gt;
&lt;p&gt;程序包：bind &lt;/p&gt;

&lt;p&gt;2、&lt;strong&gt;主配置文件：/etc/named.conf&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;（1）介绍&lt;/p&gt;
&lt;p&gt;主配置文件：&lt;/p&gt;
&lt;p&gt;全局配置：options {};&lt;/p&gt;
&lt;p&gt;日志子系统配置：logging {};&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;区域定义&lt;/strong&gt;：本机能够为哪些zone 进行解析，就要定义哪些zone&lt;strong/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　zone&lt;/strong&gt; &quot;ZONE_NAME&quot; IN {}; 数据库文件最好不写在这个主配置文件，写在&lt;strong&gt;/etc/named.rfc1912.zones&lt;/strong&gt;中&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; 原理&lt;/strong&gt;：就是在配置文件中设置区域定义zone，然后在zone指定的文件中建立数据库，这些文件都放在/var/named下&lt;/p&gt;

&lt;p&gt;3、options {};需&lt;strong&gt;要改的4个地方&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;① listen-on port 53 { 127.0.0.1; };  端口上只绑定自己ip&lt;/p&gt;
&lt;p&gt;改为：&lt;strong&gt;listen-on port 53 { localhost; };&lt;/strong&gt; 或 // 注释掉&lt;/p&gt;
&lt;p&gt;② allow-query { localhost; }; 只允许自己访问&lt;/p&gt;
&lt;p&gt;改为：&lt;strong&gt;allow-query { any; };&lt;/strong&gt;也可以不用any,公司内部允许哪些就加哪些，或 // 注释掉&lt;/p&gt;
&lt;p&gt;③ allow-transfer 是安全策略，为了防止任何人传输下载自己的dns信息，只允许自己的从dns同步&lt;/p&gt;
&lt;p&gt;改为：&lt;strong&gt;allow-transfer { 允许传输的ip;};&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1216496/201710/1216496-20171012195400934-507749494.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;④ 缓存名称服务器的配置：dnssec: 建议关闭dnssec ，设为no，影响委派和转发&lt;/p&gt;
&lt;p&gt;dnssec-enable no;&lt;br/&gt;dnssec-validation no;&lt;/p&gt;

&lt;h2&gt;三、测试命令及rndc命令&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;1、dig&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;dig [&lt;strong&gt;-t&lt;/strong&gt; type] name [&lt;strong&gt;@&lt;/strong&gt;SERVER] [query options]　　&lt;/p&gt;
&lt;p&gt;　　dig 只用于测试dns 系统，不会查询hosts 文件进行解析&lt;/p&gt;
&lt;p&gt;查询选项：&lt;/p&gt;
&lt;p&gt;　　+[no]trace程 ：跟踪解析过程 : dig +trace magedu.com&lt;/p&gt;
&lt;p&gt;　　+[no]recurse ：进行递归解析&lt;/p&gt;
&lt;p&gt;　　测试&lt;strong&gt;反向&lt;/strong&gt;解析：dig &lt;strong&gt;-x&lt;/strong&gt; IP = dig &lt;strong&gt;-t ptr&lt;/strong&gt; reverseip.in-addr.arpa&lt;/p&gt;
&lt;p&gt;　　模拟区域传送：&lt;/p&gt;
&lt;p&gt;　　dig &lt;strong&gt;-t axfr&lt;/strong&gt; ZONE_NAME @SERVER    &lt;strong&gt;抓区域数据库，&lt;/strong&gt;&lt;strong&gt;可以被allow-transfer  { 192.168.30.106;}; 防止&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　dig -t axfr magedu.com @10.10.10.11&lt;/p&gt;
&lt;p&gt;　　dig -t axfr 100.1.10.in-addr.arpa @172.16.1.1&lt;/p&gt;
&lt;p&gt;　　dig &lt;strong&gt;-t NS&lt;/strong&gt; . @114.114.114.114  测试邮件记录&lt;/p&gt;
&lt;p&gt;　　dig -t NS . @a.root-servers.net  查根的服务器，13个&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2、host，查询没有dig详细&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;host [-t type] name [SERVER]&lt;/p&gt;
&lt;p&gt;host &lt;strong&gt;-t NS&lt;/strong&gt; magedu.com 172.16.0.1&lt;/p&gt;
&lt;p&gt;host -t soa magedu.com&lt;/p&gt;
&lt;p&gt;host -t mx magedu.com&lt;/p&gt;
&lt;p&gt;host -t axfr magedu.com&lt;/p&gt;
&lt;p&gt;host 1.2.3.4&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3、nslookup&lt;/strong&gt;： （windows和linux都有这个命令）&lt;/p&gt;
&lt;p&gt;命令： nslookup [-option] [name | -] [server]&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;交互式&lt;/strong&gt;模式：&lt;/p&gt;
&lt;p&gt;　　nslookup&amp;gt;&lt;/p&gt;
&lt;p&gt;　　server IP: 指明使用哪个DNS server 进行查询&lt;/p&gt;
&lt;p&gt;　　set q=RR_TYPE: 指明查询的资源记录类型&lt;/p&gt;
&lt;p&gt;　　NAME: 要查询的名称&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1216496/201710/1216496-20171012195402293-1089020687.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4、rndc 命令&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;rndc：&lt;/p&gt;
&lt;p&gt;　　rndc --&amp;gt; rndc (953/tcp)&lt;/p&gt;
&lt;p&gt;　　rndc COMMAND&lt;/p&gt;
&lt;p&gt;COMMAND:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　reload: 重载主配置文件和区域解析库文件&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　reload zonename: 重载区域解析库文件&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　retransfer zonename: 手动启动 区域传送， 而不管序列号是否增加&lt;/p&gt;
&lt;p&gt;　　notify zonename: 重新对区域传送发通知，当主从同步过程发生意外时，&lt;/p&gt;
&lt;p&gt;　　　　例：rndc notify magedu.com&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　reconfig: 重载主配置文件&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　querylog: 开启或关闭查询日志文件/var/log/message&lt;/strong&gt;（默认不启用日志），排错的时候才开启，要不访问一条加一条记录，量太大了；关闭，执行同样的命令&lt;/p&gt;
&lt;p&gt;　　　　tail -f /var/log/messages 动态查询日志&lt;/p&gt;
&lt;p&gt;　　trace: 递增debug 一个级别&lt;/p&gt;
&lt;p&gt;　　trace LEVEL: 指定使用的级别，日志级别，日志的详细程度&lt;/p&gt;
&lt;p&gt;　　notrace：为将调试级别设置为 0&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;　　flush&lt;/strong&gt; ：&lt;strong&gt;清空DNS&lt;/strong&gt; 服务器的&lt;strong&gt;所有缓存记录&lt;/strong&gt;&lt;/p&gt;


&lt;h2&gt;实验一：建立正向解析数据库，实现域的解析，如：magedu.com&lt;/h2&gt;
&lt;p&gt;1、yum install bind   安装包&lt;/p&gt;
&lt;p&gt;systemctl start named     centos 7开启服务&lt;/p&gt;
&lt;p&gt;service named start           centos 6开启服务&lt;/p&gt;

&lt;p&gt;2、vim &lt;strong&gt;/etc/named.conf 修改总配置文件&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;listen-on port 53 { &lt;strong&gt;localhost;&lt;/strong&gt; };&lt;/p&gt;
&lt;p&gt;allow-query { &lt;strong&gt;any ;&lt;/strong&gt;};&lt;/p&gt;

&lt;p&gt;3、vim &lt;strong&gt;/etc/named.rfc1912.zones&lt;/strong&gt;（最好在这个文件中修改，也可在/etc/named.conf总配置文件中修改）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;zone &quot;magedu.com&quot; {&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; type master;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; file &quot;magedu.com.zone&quot;;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;};&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1216496/201710/1216496-20171012195413902-797154510.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;4、vim &lt;strong&gt;/var/named/magedu.com.zone 建立修改数据库文件&lt;/strong&gt;（这个文件名一定要和上边的对应，可以自己写，也可以复制模板）&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1216496/201710/1216496-20171012195414418-2136096519.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;$TTL 1D&lt;/p&gt;
&lt;p&gt;@ 　　IN 　　&lt;strong&gt;SOA&lt;/strong&gt; dns1 mail.magedu.com. ( 2017100901 ; serial&lt;/p&gt;
&lt;p&gt; 　　　　　　　　　　　　　　　　1D ; refresh&lt;/p&gt;
&lt;p&gt; 　　　　　　　　　　　　　　　　1H ; retry&lt;/p&gt;
&lt;p&gt; 　　　　　　　　　　　　　　　　1W ; expire&lt;/p&gt;
&lt;p&gt; 　　　　　　　　　　　　　　　　3H ) ; minimum&lt;/p&gt;
&lt;p&gt;@ 　NS　dns1&lt;/p&gt;
&lt;p&gt;dns1　A 　192.168.37.107&lt;/p&gt;
&lt;p&gt;www   CNAME websrv 设置的别名&lt;/p&gt;
&lt;p&gt;websrv A 192.168.37.106&lt;/p&gt;
&lt;p&gt;下面都是记录的例子：&lt;/p&gt;
&lt;p&gt;[websrv A 192.168.37.107] 可以加多个，访问时随机，平衡负载&lt;/p&gt;
&lt;p&gt;@ MX 10 mailsrv1 也可以加邮件记录&lt;/p&gt;
&lt;p&gt;@ MX 20 mailsrv2&lt;/p&gt;
&lt;p&gt;mailsrv1 A 192.168.30.100&lt;/p&gt;
&lt;p&gt;mailsrv2 A 192.168.30.200C&lt;/p&gt;
&lt;p&gt;$GENERATE 1-100 server$ A 1.1.1.$&lt;/p&gt;
&lt;p&gt;@ A 192.168.30.102 解决前面不输入东西的问题，例：mage.com&lt;/p&gt;
&lt;p&gt;* A 192.168.30.101 泛域名解析，电商前面输错了ww.taobao.com，也能进淘宝网页&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;注意：&lt;/strong&gt;chgrp named /var/named/magedu.com.zone  如果不是cp -p 模板的，要注意修改权限&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;named-checkzone&lt;/strong&gt; magedu.com /var/named/magedu.com.zone 检查这个数据库文件有没有错&lt;/p&gt;

&lt;p&gt; 5、rndc reload 重新加载配置文件&lt;/p&gt;
&lt;p&gt;6、测试ping、dig、host、links...都行&lt;/p&gt;
&lt;p&gt;dig websrv.magedu.com @192.168.30.107&lt;/p&gt;
&lt;p&gt;dig -t mx magedu.com @192.168.30.107 检查邮件记录&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1216496/201710/1216496-20171012195414996-1635852704.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;host adaf23.magedu.com 192.168.30.107 检测泛域名记录&lt;/p&gt;
&lt;p&gt;dig magedu.com @192.168.30.107&lt;/p&gt;

&lt;h2&gt;实验二：建立反向解析数据库（配置文件中都有例子）&lt;/h2&gt;
&lt;p&gt;1、2、同上&lt;/p&gt;
&lt;p&gt;3、vim &lt;strong&gt;/etc/named.rfc1912.zones&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;zone &quot;30.168.192.&lt;strong&gt;in-addr.arpa&lt;/strong&gt;&quot; IN { （倒过来写，反过来读）&lt;/p&gt;
&lt;p&gt; type master;&lt;/p&gt;
&lt;p&gt; file &quot;192.168.30.zone&quot;;&lt;/p&gt;
&lt;p&gt;};&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1216496/201710/1216496-20171012195415324-1821899412.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;4、vim /var/named/192.168.30.zone&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1216496/201710/1216496-20171012195416027-192373389.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;$TTL 1D&lt;/p&gt;
&lt;p&gt;@ IN SOA dns1 rname.invalid. (&lt;/p&gt;
&lt;p&gt; 　　　　　　　　　　　　　　0 ; serial&lt;/p&gt;
&lt;p&gt; 　　　　　　　　　　　　　　1D ; refresh&lt;/p&gt;
&lt;p&gt; 　　　　　　　　　　　　　　1H ; retry&lt;/p&gt;
&lt;p&gt; 　　　　　　　　　　　　　　1W ; expire&lt;/p&gt;
&lt;p&gt; 　　　　　　　　　　　　　　3H ) ; minimum&lt;/p&gt;
&lt;p&gt; NS dns1&lt;/p&gt;
&lt;p&gt;dns1 A 127.0.0.1&lt;/p&gt;
&lt;p&gt;107 &lt;strong&gt;PTR&lt;/strong&gt; dns1.magedu.com&lt;strong&gt;.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;106 PTR websrv.magedu.com&lt;strong&gt;.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;100.30.168.192.in-addr.arpa&lt;strong&gt;.&lt;/strong&gt; PTR dbsrv&lt;/p&gt;


&lt;p&gt;5、rndc reload 重新加载配置文件&lt;/p&gt;
&lt;p&gt;6、检测&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;dig -x&lt;/strong&gt; 192.168.30.107&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1216496/201710/1216496-20171012195416699-400454021.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;h2&gt;实验三：建立主从服务器&lt;/h2&gt;
&lt;p&gt;1、vim &lt;strong&gt;/etc/named.conf 修改总配置文件&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;主：只允许从传输数据&lt;/p&gt;
&lt;p&gt;listen-on port 53 { localhost; };&lt;/p&gt;
&lt;p&gt;allow-query { any ;};&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;allow-transfer { 从DNS服务器IP;};&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;从：不允许任何人传输数据&lt;/p&gt;
&lt;p&gt;listen-on port 53 { localhost; };&lt;/p&gt;
&lt;p&gt;allow-query { any ;};&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;allow-transfer { none;};&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;2、vim /etc/named.rfc1912.zones&lt;/p&gt;
&lt;p&gt;主：&lt;/p&gt;
&lt;p&gt;zone &quot;magedu.com&quot; {&lt;/p&gt;
&lt;p&gt; type master;&lt;/p&gt;
&lt;p&gt; file &quot;magedu.com.zone&quot;;&lt;/p&gt;
&lt;p&gt;};&lt;/p&gt;
&lt;p&gt;从：&lt;/p&gt;
&lt;p&gt;zone &quot;magedu.com&quot; IN {&lt;/p&gt;
&lt;p&gt; &lt;strong&gt;type slave;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; &lt;strong&gt;masters { 192.168.30.107;};&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; &lt;strong&gt;file &quot;slaves/&lt;/strong&gt;magedu.com.zone.slave&quot;;&lt;/p&gt;
&lt;p&gt;};&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1216496/201710/1216496-20171012195417105-795709943.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;3、vim /var/named/magedu.com.zone&lt;/p&gt;
&lt;p&gt;主：加一条NS记录&lt;/p&gt;
&lt;p&gt; NS dns1&lt;/p&gt;
&lt;p&gt; NS dns2&lt;/p&gt;
&lt;p&gt;dns1 A 192.168.30.107&lt;/p&gt;
&lt;p&gt;dns2 A 192.168.30.106&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1216496/201710/1216496-20171012195417465-1521006594.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;从：不用创建这个文件，重新加载数据会在/var/named/slaves 自动生成一个文件，内容和主dns一样&lt;/p&gt;

&lt;p&gt;4、rndc reload 重新加载配置文件&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1216496/201710/1216496-20171012195417762-649911509.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;5、检测&lt;/p&gt;
&lt;p&gt;dig www.magedu.com @192.168.30.106&lt;/p&gt;

&lt;h2&gt;实验四：建立子域&lt;/h2&gt;
&lt;p&gt;（1）主dns加&lt;strong&gt;A记录充当子域&lt;/strong&gt;，访问量特别小&lt;/p&gt;
&lt;p&gt;子域访问量不大，主dns可以帮它管理，在主数据库加一条A记录，实际不是建立子域，只是用户当做子域&lt;/p&gt;
&lt;p&gt;1、vim /etc/named.conf 修改总配置文件&lt;/p&gt;
&lt;p&gt;listen-on port 53 { localhost; };&lt;/p&gt;
&lt;p&gt;allow-query { any ;};&lt;/p&gt;

&lt;p&gt;2、vim/etc/named.rfc1912.zones&lt;/p&gt;
&lt;p&gt;zone &quot;magedu.com&quot; {&lt;/p&gt;
&lt;p&gt; type master;&lt;/p&gt;
&lt;p&gt; file &quot;magedu.com.zone&quot;;&lt;/p&gt;
&lt;p&gt;};&lt;/p&gt;

&lt;p&gt;3、vim /var/named/magedu.com.zone&lt;/p&gt;
&lt;p&gt;加两条A记录：&lt;/p&gt;
&lt;p&gt;www.henan A 2.2.2.2&lt;/p&gt;
&lt;p&gt;mail.henan A 3.3.3.3&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1216496/201710/1216496-20171012195418230-1038195589.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;4、rndc reload 重新加载配置文件&lt;/p&gt;
&lt;p&gt;5、检测 dig www.henan.magedu.com @192.168.30.107&lt;/p&gt;

&lt;p&gt;（2）在自己的建立独机器上立的域，当子域&lt;/p&gt;
&lt;p&gt;1、同上&lt;/p&gt;
&lt;p&gt;2、vim/etc/named.rfc1912.zones&lt;/p&gt;
&lt;p&gt;zone &quot;henan.magedu.com&quot; IN {&lt;/p&gt;
&lt;p&gt; type master;&lt;/p&gt;
&lt;p&gt; file &quot;henan.magedu.com.zone&quot;;&lt;/p&gt;
&lt;p&gt;};&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1216496/201710/1216496-20171012195418559-657299791.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;3、vim /var/named/henan.magedu.com.zone 复制模板，自己写都行&lt;/p&gt;
&lt;p&gt;cp -p /var/named/magedu.com.zone /var/named/henan.magedu.com.zone&lt;/p&gt;
&lt;p&gt;自己写注意修改权限&lt;/p&gt;
&lt;p&gt;$TTL 1D&lt;/p&gt;
&lt;p&gt;@ IN SOA dns1 mail.magedu.com. (&lt;/p&gt;
&lt;p&gt; 2017100901 ; serial&lt;/p&gt;
&lt;p&gt; 1D ; refresh&lt;/p&gt;
&lt;p&gt; 1H ; retry&lt;/p&gt;
&lt;p&gt; 1W ; expire&lt;/p&gt;
&lt;p&gt; 3H ) ; minimum&lt;/p&gt;
&lt;p&gt; NS dns1&lt;/p&gt;
&lt;p&gt;dns1 A 192.168.30.107&lt;/p&gt;
&lt;p&gt;www CNAME websrv&lt;/p&gt;
&lt;p&gt;websrv A 5.5.5.5&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1216496/201710/1216496-20171012195419324-575942470.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;4、5同上&lt;/p&gt;

&lt;p&gt;（3）委派给其他机器(106)的域管理子域，访问量大的时候&lt;/p&gt;
&lt;p&gt;在本机上：父域主机&lt;/p&gt;
&lt;p&gt;1、vim /etc/named.conf&lt;/p&gt;
&lt;p&gt;关闭dnssec 功能：&lt;/p&gt;
&lt;p&gt;dnssec-enable no;&lt;/p&gt;
&lt;p&gt;dnssec-validation no&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1216496/201710/1216496-20171012195419777-892724297.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;2、vim /var/named/magedu.com.zone&lt;/p&gt;
&lt;p&gt;@ NS dns1&lt;/p&gt;
&lt;p&gt;henan NS dns2&lt;/p&gt;
&lt;p&gt;dns1 A 192.168.30.107&lt;/p&gt;
&lt;p&gt;dns2 A 192.168.30.106&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1216496/201710/1216496-20171012195420355-1562080073.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;在另一个机器6上：子域主机创建henan.magedu.com的master区域&lt;/p&gt;
&lt;p&gt;3、vim /etc/named.conf&lt;/p&gt;
&lt;p&gt;关闭dnssec 功能：&lt;/p&gt;
&lt;p&gt;dnssec-enable no;&lt;/p&gt;
&lt;p&gt;dnssec-validation no&lt;/p&gt;

&lt;p&gt;4、vim /etc/named.rfc1912.zones&lt;/p&gt;
&lt;p&gt;zone &quot;&lt;strong&gt;henan.magedu.com&lt;/strong&gt;&quot; IN {&lt;/p&gt;
&lt;p&gt; type master;&lt;/p&gt;
&lt;p&gt; file &quot;henan.magedu.com.zone&quot;;&lt;/p&gt;
&lt;p&gt;};&lt;/p&gt;

&lt;p&gt;5、vim &lt;strong&gt;/var/named/henan&lt;/strong&gt;.magedu.com.zone&lt;/p&gt;
&lt;p&gt;$TTL 86400 ; 1 day&lt;/p&gt;
&lt;p&gt;@ IN SOA dns1 mail.magedu.com. (&lt;/p&gt;
&lt;p&gt; 2017100901 ; serial&lt;/p&gt;
&lt;p&gt; 86400 ; refresh (1 day)&lt;/p&gt;
&lt;p&gt; 3600 ; retry (1 hour)&lt;/p&gt;
&lt;p&gt; 604800 ; expire (1 week)&lt;/p&gt;
&lt;p&gt; 10800 ; minimum (3 hours)&lt;/p&gt;
&lt;p&gt; )&lt;/p&gt;
&lt;p&gt; NS dns1&lt;/p&gt;
&lt;p&gt;dns1 A 192.168.30.106&lt;/p&gt;
&lt;p&gt;www CNAME websrv&lt;/p&gt;
&lt;p&gt;websrv A 6.6.6.6&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1216496/201710/1216496-20171012195420777-431005723.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;6、rndc reload 重新加载配置文件&lt;/p&gt;
&lt;p&gt;7、检测 dig www.henan.magedu.com @192.168.30.107 因为是委派，所以直接测107&lt;/p&gt;

&lt;h2&gt;实验五：服务器转发&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1216496/201710/1216496-20171012195421152-759071314.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;原理：要访问www.qq.com，beijing的dns服务器给zhengzhou、shanghai转发&lt;/p&gt;
&lt;p&gt;在6上建立qq.com的数据库&lt;/p&gt;
&lt;p&gt;1、vim /etc/named.rfc1912.zones&lt;/p&gt;
&lt;p&gt;zone &quot;qq.com&quot; IN {&lt;/p&gt;
&lt;p&gt;　　 type master;&lt;/p&gt;
&lt;p&gt;　　 file &quot;qq.com.zone&quot;;c&lt;/p&gt;
&lt;p&gt;};&lt;/p&gt;

&lt;p&gt;2、vim /var/named/qq.com.zone 自己写（改权限）或cp -p一个模板&lt;/p&gt;
&lt;p&gt;$TTL 86400 ; 1 day&lt;/p&gt;
&lt;p&gt;@ IN SOA dns1 mail.magedu.com. (&lt;/p&gt;
&lt;p&gt; 　　　　　　　　　　　　　　　　2017100901 ; serial&lt;/p&gt;
&lt;p&gt; 　　　　　　　　　　　　　　　　86400 ; refresh (1 day)&lt;/p&gt;
&lt;p&gt; 　　　　　　　　　　　　　　　　3600 ; retry (1 hour)&lt;/p&gt;
&lt;p&gt; 　　　　　　　　　　　　　　　　604800 ; expire (1 week)&lt;/p&gt;
&lt;p&gt; 　　　　　　　　　　　　　　　　10800 ; minimum (3 hours)&lt;/p&gt;
&lt;p&gt; )&lt;/p&gt;
&lt;p&gt; NS dns1&lt;/p&gt;
&lt;p&gt;dns1 A 192.168.30.106&lt;/p&gt;
&lt;p&gt;www CNAME websrv&lt;/p&gt;
&lt;p&gt;websrv A 6.6.6.6&lt;/p&gt;

&lt;p&gt;在7上设置转发&lt;/p&gt;
&lt;p&gt;3、vim /etc/named.conf 设置全局转发&lt;/p&gt;
&lt;p&gt;forward only ;&lt;/p&gt;
&lt;p&gt;forwarders {192.168.30.106;};&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1216496/201710/1216496-20171012195421980-2045940819.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;named-checkconf 写完可以检测总配置文件的语法&lt;/p&gt;

&lt;p&gt;或设置特定区域转发&lt;/p&gt;
&lt;p&gt;vim /etc/named.rfc1912.zones&lt;/p&gt;
&lt;p&gt;zone &quot;qq.com&quot; IN {&lt;/p&gt;
&lt;p&gt; type forward;&lt;/p&gt;
&lt;p&gt;forward first&lt;/p&gt;
&lt;p&gt;forward { 192.168.30.106;};&lt;/p&gt;
&lt;p&gt;};&lt;/p&gt;

&lt;p&gt;4、rndc reload 重新加载配置文件&lt;/p&gt;

&lt;p&gt;5、检测&lt;/p&gt;
&lt;p&gt;dig www.qq.com @192.168.30.107&lt;/p&gt;
&lt;p&gt;dig www.baidu.com @192.168.30.107 only的情况下，如果6的数据库没有记录，就不再询问根；first的情况下，如果6的数据库没有记录，7自己去询问根&lt;/p&gt;

&lt;h2&gt;实验六：包含子域、主从、委派的模拟dns整个过程的实验&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1216496/201710/1216496-20171012195422621-845399097.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;注意&lt;/strong&gt;：&lt;/span&gt;做实验之前需：关闭防火墙，关闭selinux&lt;/p&gt;
&lt;p&gt;vim /etc/named.conf 注释两项或改两项&lt;/p&gt;
&lt;p&gt;// listen-on port 53 { 127.0.0.1; };&lt;/p&gt;
&lt;p&gt;// allow-query { localhost; };&lt;/p&gt;
&lt;p&gt;或&lt;/p&gt;
&lt;p&gt;listen-on port 53 { localhost; };&lt;/p&gt;
&lt;p&gt;allow-query { any; };&lt;/p&gt;
&lt;p&gt;改两个no&lt;/p&gt;
&lt;p&gt;dnssec-enable no;&lt;/p&gt;
&lt;p&gt;dnssec-validation no;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1216496/201710/1216496-20171012195423309-1584001857.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1、从107 magedu 主 开始：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;① vim /etc/named.con 主配置文件加一条&lt;/p&gt;
&lt;p&gt;allow-transfer { 192.168.30.103;};&lt;/p&gt;
&lt;p&gt;注释或修改两行&lt;/p&gt;
&lt;p&gt;// listen-on port 53 { 127.0.0.1; };&lt;/p&gt;
&lt;p&gt;// allow-query { localhost; };&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1216496/201710/1216496-20171012195423887-1866765624.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;② vim /etc/named.rfc1912.zones 数据库配置文件&lt;/p&gt;
&lt;p&gt;zone &quot;magedu.com&quot; IN {&lt;/p&gt;
&lt;p&gt; type master;&lt;/p&gt;
&lt;p&gt; file &quot;magedu.com.zone&quot;;&lt;/p&gt;
&lt;p&gt;};&lt;/p&gt;

&lt;p&gt;③ vim /var/named/magedu.com.zone&lt;/p&gt;
&lt;p&gt;$TTL 1D&lt;/p&gt;
&lt;p&gt;@ IN SOA dns1 mail.magedu.com. (&lt;/p&gt;
&lt;p&gt; 2017100901 ; serial&lt;/p&gt;
&lt;p&gt; 1D ; refresh&lt;/p&gt;
&lt;p&gt; 1H ; retry&lt;/p&gt;
&lt;p&gt; 1W ; expire&lt;/p&gt;
&lt;p&gt; 3H ) ; minimum&lt;/p&gt;
&lt;p&gt; NS dns1&lt;/p&gt;
&lt;p&gt; &lt;strong&gt;NS dns2&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;dns1 A 192.168.30.107&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;dns2 A 192.168.30.103&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;www CNAME websrv&lt;/p&gt;
&lt;p&gt;websrv A 192.168.30.106&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1216496/201710/1216496-20171012195424574-392981204.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;④ rndc reload&lt;/p&gt;
&lt;p&gt;⑤ 测试&lt;/p&gt;
&lt;p&gt;dig www.magedu.com @192.168.30.107&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2、103 magedu.com 从：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;① vim /etc/named.conf&lt;/p&gt;
&lt;p&gt;注释或修改2行&lt;/p&gt;
&lt;p&gt;allow-transfer { none;}; 为了安全，不允许任何人传输信息&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1216496/201710/1216496-20171012195425168-1733936000.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;② vim /etc/named.rfc1912.zones&lt;/p&gt;
&lt;p&gt;zone &quot;magedu.com&quot; IN {&lt;/p&gt;
&lt;p&gt; type &lt;strong&gt;slave&lt;/strong&gt;;&lt;/p&gt;
&lt;p&gt; &lt;strong&gt;masters { 192.168.30.107;};&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; &lt;strong&gt;file &quot;slaves/&lt;/strong&gt;magedu.com.zone&quot;;&lt;/p&gt;
&lt;p&gt;};&lt;/p&gt;
&lt;p&gt;③ rndc reload&lt;/p&gt;
&lt;p&gt;④ 测试&lt;/p&gt;
&lt;p&gt;dig www.magedu.com @192.168.30.103&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3、102 com：是被根委派，委派magedu的主107、从103&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;① vim /etc/named.conf&lt;/p&gt;
&lt;p&gt;注释或修改2行&lt;/p&gt;
&lt;p&gt;为了不影响转发、委派：改两个no&lt;/p&gt;
&lt;p&gt;dnssec-enable no;&lt;/p&gt;
&lt;p&gt;dnssec-validation no;&lt;/p&gt;

&lt;p&gt;② vim /etc/named.rfc1912.zones&lt;/p&gt;
&lt;p&gt;zone &quot;com&quot; IN {&lt;/p&gt;
&lt;p&gt;type master;&lt;/p&gt;
&lt;p&gt;file &quot;com.zone&quot;;&lt;/p&gt;
&lt;p&gt;};&lt;/p&gt;

&lt;p&gt;③ vim /var/named/com.zone&lt;/p&gt;
&lt;p&gt;$TTL 1D&lt;/p&gt;
&lt;p&gt;@ IN SOA dns1 rname.invalid. (&lt;/p&gt;
&lt;p&gt; 0 ; serial&lt;/p&gt;
&lt;p&gt; 1D ; refresh&lt;/p&gt;
&lt;p&gt; 1H ; retry&lt;/p&gt;
&lt;p&gt; 1W ; expire&lt;/p&gt;
&lt;p&gt; 3H ) ; minimum&lt;/p&gt;
&lt;p&gt; NS dns1&lt;/p&gt;
&lt;p&gt;magedu NS dns2&lt;/p&gt;
&lt;p&gt;magedu NS dns3&lt;/p&gt;
&lt;p&gt;dns1 A 127.0.0.1&lt;/p&gt;
&lt;p&gt;dns2 A 192.168.30.107&lt;/p&gt;
&lt;p&gt;dns3 A 192.168.30.103&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1216496/201710/1216496-20171012195427074-1637141959.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;④ rndc reload&lt;/p&gt;
&lt;p&gt;⑤ 检测&lt;/p&gt;
&lt;p&gt;dig www.magedu.com @192.168.30.102&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4、101 根：委派com&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;① vim /etc/named.conf&lt;/p&gt;
&lt;p&gt;注释或修改2行&lt;/p&gt;
&lt;p&gt;为了不影响转发、委派：改两个no&lt;/p&gt;
&lt;p&gt;dnssec-enable no;&lt;/p&gt;
&lt;p&gt;dnssec-validation no;&lt;/p&gt;
&lt;p&gt;自己当根：&lt;/p&gt;
&lt;p&gt;zone &quot;.&quot; IN {&lt;/p&gt;
&lt;p&gt; type master;&lt;/p&gt;
&lt;p&gt; file &quot;root.zone&quot;;&lt;/p&gt;
&lt;p&gt;};&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1216496/201710/1216496-20171012195427465-651456605.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;② vim /var/named/com.zone&lt;/p&gt;
&lt;p&gt;$TTL 1D&lt;/p&gt;
&lt;p&gt;@ IN SOA dns1 rname.invalid. (&lt;/p&gt;
&lt;p&gt; 0 ; serial&lt;/p&gt;
&lt;p&gt; 1D ; refresh&lt;/p&gt;
&lt;p&gt; 1H ; retry&lt;/p&gt;
&lt;p&gt; 1W ; expire&lt;/p&gt;
&lt;p&gt; 3H ) ; minimum&lt;/p&gt;
&lt;p&gt; NS dns1&lt;/p&gt;
&lt;p&gt;com NS dns2&lt;/p&gt;
&lt;p&gt;dns1 A 192.168.30.101&lt;/p&gt;
&lt;p&gt;dns2 A 192.168.30.102&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1216496/201710/1216496-20171012195428324-1625578390.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;③ rndc reload&lt;/p&gt;
&lt;p&gt;④ 检测&lt;/p&gt;
&lt;p&gt;dig www.magedu.com @192.168.30.101&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5、104 第一个dns服务器：委派&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;① vim /etc/named.conf&lt;/p&gt;
&lt;p&gt;注释或修改2行&lt;/p&gt;
&lt;p&gt;为了不影响转发、委派：改两个no&lt;/p&gt;
&lt;p&gt;dnssec-enable no;&lt;/p&gt;
&lt;p&gt;dnssec-validation no;&lt;/p&gt;

&lt;p&gt;② vim /var/named/named.ca 修改根服务器数据库&lt;/p&gt;
&lt;p&gt;删除其他的根记录，留一个101的根A记录&lt;/p&gt;
&lt;p&gt;A.ROOT-SERVERS.NET. 3600000 A 192.168.30.101&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1216496/201710/1216496-20171012195429074-2060141134.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;③ rndc reload&lt;/p&gt;
&lt;p&gt;④ 检测&lt;/p&gt;
&lt;p&gt;dig www.magedu.com @192.168.30.104&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;6、105 客户端：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;① 修改网卡配置，dns指向192.168.30.104&lt;/p&gt;
&lt;p&gt;DNS1=192.168.30.104&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1216496/201710/1216496-20171012195430871-1827127676.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;② 重启网络服务&lt;/p&gt;
&lt;p&gt;service network restart&lt;/p&gt;
&lt;p&gt;③ 检测&lt;/p&gt;
&lt;p&gt;dig www.magedu.com&lt;/p&gt;
&lt;p&gt;links www.magedu.com&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1216496/201710/1216496-20171012195431215-372910545.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;实验全部结束！！！&lt;/p&gt;

&lt;h2&gt;实验七：智能dns&lt;/h2&gt;
&lt;p&gt;原理：ACL的实现，和view视图来匹配acl中的设置和zone数据库信息&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1、vim /etc/named.conf&lt;/strong&gt; 在总配置文件中，加2条acl设置，acl设置要&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;acl&lt;/strong&gt; henannet {&lt;/p&gt;
&lt;p&gt; 192.168.30.0/24;&lt;/p&gt;
&lt;p&gt; 192.168.31.1/24;&lt;/p&gt;
&lt;p&gt;};&lt;/p&gt;
&lt;p&gt;acl beijingnet {&lt;/p&gt;
&lt;p&gt; 172.17.0.0/16;&lt;/p&gt;
&lt;p&gt; 172.18.0.0/16;&lt;/p&gt;
&lt;p&gt;};&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1216496/201710/1216496-20171012195431605-893031675.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;2、vim /etc/named.conf 还是在主配置文件中，设置view关联：acl和zone区域&lt;/p&gt;
&lt;p&gt;有两种方法：&lt;/p&gt;
&lt;p&gt;方法一：直接就在主配置文件中设置好zone数据库&lt;/p&gt;
&lt;p&gt;方法二：在主配置文件中指向/etc/named.rfc1912.zones中，在这个文件中设置zone数据库&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;view&lt;/strong&gt; henanview {&lt;/p&gt;
&lt;p&gt; match-clients { henannet;};&lt;/p&gt;
&lt;p&gt; zone &quot;magedu.com&quot; {&lt;/p&gt;
&lt;p&gt; type master;&lt;/p&gt;
&lt;p&gt; file &quot;magedu.com.zone.henan&quot;;&lt;/p&gt;
&lt;p&gt; };&lt;/p&gt;
&lt;p&gt; zone &quot;.&quot; IN { //加个根zone，是为了能访问外网&lt;/p&gt;
&lt;p&gt; type hint;&lt;/p&gt;
&lt;p&gt; file &quot;named.ca&quot;;&lt;/p&gt;
&lt;p&gt; };&lt;/p&gt;
&lt;p&gt;};&lt;/p&gt;
&lt;p&gt;view beijingview {&lt;/p&gt;
&lt;p&gt; match-clients { beijingnet;};&lt;/p&gt;
&lt;p&gt; include &quot;/etc/named.rfc1912.zones.beijing&quot;;&lt;/p&gt;
&lt;p&gt; zone &quot;.&quot; IN {                 //加个根zone，是为了能访问外网&lt;/p&gt;
&lt;p&gt; type hint;&lt;/p&gt;
&lt;p&gt; file &quot;named.ca&quot;;&lt;/p&gt;
&lt;p&gt; };&lt;/p&gt;
&lt;p&gt;};&lt;/p&gt;
&lt;p&gt;view otherview { //加一个other，不在那两个view的也要能访问&lt;/p&gt;
&lt;p&gt; match-clients {any;};&lt;/p&gt;
&lt;p&gt; include &quot;/etc/named.rfc1912.zones&quot;;&lt;/p&gt;
&lt;p&gt;};&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1216496/201710/1216496-20171012195432152-1116393742.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;3、若2采用了方法二，则需：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;vim /etc/named.rfc1912.zones.beijing&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;zone &quot;magedu.com&quot; IN {&lt;/p&gt;
&lt;p&gt; type master;&lt;/p&gt;
&lt;p&gt; file &quot;magedu.com.zone.beijing&quot;;&lt;/p&gt;
&lt;p&gt;};&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images2017.cnblogs.com/blog/1216496/201710/1216496-20171012195432527-501419643.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;若有other，需：&lt;/p&gt;
&lt;p&gt;vim /etc/named.rfc1912.zones&lt;/p&gt;
&lt;p&gt;zone &quot;magedu.com&quot; IN {&lt;/p&gt;
&lt;p&gt; type master;&lt;/p&gt;
&lt;p&gt; file &quot;magedu.com.zone&quot;;&lt;/p&gt;
&lt;p&gt;};&lt;/p&gt;

&lt;p&gt;4、在数据库中随便配置点设置，为了试验测试结果明显，可以把三个解析的地址写为不同的&lt;/p&gt;
&lt;p&gt;vim /var/named/magedu.com.zone&lt;/p&gt;
&lt;p&gt;vim /var/named/magedu.com.zone.henan&lt;/p&gt;
&lt;p&gt;vim /var/named/magedu.com.zone.beijing&lt;/p&gt;
&lt;p&gt;$TTL 1D&lt;/p&gt;
&lt;p&gt;@ IN SOA dns1 mail.magedu.com. (&lt;/p&gt;
&lt;p&gt; 2017100903 ; serial&lt;/p&gt;
&lt;p&gt; 1D ; refresh&lt;/p&gt;
&lt;p&gt; 1H ; retry&lt;/p&gt;
&lt;p&gt; 1W ; expire&lt;/p&gt;
&lt;p&gt; 3H ) ; minimum&lt;/p&gt;
&lt;p&gt; NS dns1&lt;/p&gt;
&lt;p&gt;dns1 A 192.168.30.107&lt;/p&gt;
&lt;p&gt;www CNAME websrv&lt;/p&gt;
&lt;p&gt;websrv A 6.6.6.6&lt;/p&gt;

&lt;p&gt;5、测试，测试的解析不一样&lt;/p&gt;
&lt;p&gt;dig www.magedu.com @192.168.30.107 测试henan&lt;/p&gt;
&lt;p&gt;dig www.magedu.com @172.17.252.107 测试beijing&lt;/p&gt;
&lt;p&gt;dig www.magedu.com @127.0.0.1 测试other&lt;/p&gt;

&lt;p&gt;实验有点多，中间也会有很多错误，如果有什么不懂可以留言~&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt; &lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Thu, 12 Oct 2017 13:39:00 +0000</pubDate>
<dc:creator>阿龙along</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/along21/p/7657793.html</dc:identifier>
</item>
</channel>
</rss>