<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>javaweb代码生成器,专注于javaweb项通用目的代码生成器 - okrs.cn</title>
<link>http://www.cnblogs.com/a157680412/p/8582434.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/a157680412/p/8582434.html</guid>
<description>&lt;p&gt;该项目为javaWEB项目通用代码生成器，根据数据库表和自定义代码模板生成相应的jsp,js,java文件，生成到指定路径下，javaweb项目开发利器；&lt;/p&gt;
&lt;p&gt;项目开源地址：&lt;a href=&quot;https://gitee.com/okrs.cn/CodeGenerator&quot; target=&quot;_blank&quot;&gt;https://gitee.com/okrs.cn/CodeGenerator&lt;/a&gt;&lt;/p&gt;&lt;p&gt;代码生成器：&lt;br/&gt;该项目为代码生成器 基于Apache Velocity的 Java模板引擎&lt;br/&gt;base_build文件夹为最原始代码&lt;br/&gt;为整理后的版本&lt;br/&gt;执行：&lt;br/&gt;com.mmk.BaseApplication.java或生成jar包：run Maven intall&lt;/p&gt;&lt;p&gt;访问路径：http://localhost:10001/codeUI/index.html&lt;/p&gt;&lt;p&gt;不可用ip 访问&lt;/p&gt;
&lt;p&gt;登录界面输入的是作者 &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/315726/201803/315726-20180316153543556-1432053761.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/315726/201803/315726-20180316153551940-2080151377.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/315726/201803/315726-20180316153600651-700795339.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;模板加载地址：&lt;/p&gt;
&lt;p&gt;resources/static/template.json&lt;/p&gt;&lt;p&gt;添加模板地址：&lt;br/&gt;src/main/resources/&lt;/p&gt;&lt;p&gt;com.mmk.code.common.PropertyNameTools.java 设置表初始加载的时候数据库字段类型对应的实体字段类型&lt;/p&gt;&lt;p&gt;#foreach($field in $fieldList)&lt;br/&gt; #if($!{velocityCount}==$!{fieldList.size()})//当循环到最后一个时&lt;br/&gt;  &quot; s.${field.columnName}&quot;+&lt;br/&gt;#else&lt;br/&gt;  &quot; s.${field.columnName},&quot;+&lt;br/&gt;#end &lt;br/&gt;   #end;&lt;br/&gt;   &lt;br/&gt;   $fieldList 字段列表&lt;br/&gt;    ${field.comment} 字段描述&lt;br/&gt;${field.columnName}数据库字段名称&lt;br/&gt;${field.inputType} 数据库类型&lt;br/&gt;${field.validate}&lt;br/&gt;${field.field} 实体字段名称&lt;br/&gt;${field.fieldUp} 实体字段名称大写&lt;br/&gt;${field.type} 实体字段类型&lt;/p&gt;&lt;p&gt;$field.findBy) 启用特殊方法findBy&lt;/p&gt;&lt;p&gt;以上对应字段值设置&lt;br/&gt;\resources\static\codeUI\app\store&lt;br/&gt;${field.inputType}==&quot;input&quot;&lt;br/&gt;#if($field.validate==&quot;mobile&quot;)lay-verify=&quot;phone&quot;#elseif(!$field.nullable)lay-verify=&quot;required&quot;#end&lt;br/&gt;#if( $field.type == &quot;Date&quot;)&lt;/p&gt;&lt;p&gt;${model.packageName}.${model.modulePackage}&lt;br/&gt;${model.model}大写 实体名字&lt;br/&gt;${model.modelL}首字母小写 实体名字&lt;br/&gt;${model.comment}&lt;/p&gt;&lt;p&gt;*@author ${model.author} ${date}&lt;/p&gt;&lt;p&gt;${model.tableName} 数据库名字&lt;/p&gt;&lt;p&gt;表单验证：&lt;br/&gt; &amp;lt;input type=&quot;text&quot;  name=&quot;${field.field}&quot; placeholder=&quot;请输入${field.comment}&quot; autocomplete=&quot;off&quot;  data-rule=&quot;${field.comment};required;#if(${field.validate})${field.validate};&quot; data-msg=&quot;不符合规则&quot; #else &quot; #end value=&quot;${${model.modelL}.${field.field}}&quot;/&amp;gt;&lt;/p&gt;&lt;p&gt;生成：&lt;br/&gt; &amp;lt;input type=&quot;text&quot;  name=&quot;type&quot; placeholder=&quot;请输入违规类型,0-一般，1-严重&quot; autocomplete=&quot;off&quot;  data-rule=&quot;违规类型,0-一般，1-严重;required;number;&quot; data-msg=&quot;不符合规则&quot;  value=&quot;${cbViolateNotice.type}&quot;/&amp;gt;&lt;br/&gt;                       &lt;br/&gt;   &lt;/p&gt;&lt;p&gt;sql拼接&lt;br/&gt;#if($field.type==&quot;String&quot;)&lt;br/&gt;#if($field.matchType == 'any')&lt;br/&gt;        sql.append(&quot; and s.name like '%&quot;).append(search_name).append(&quot;%'&quot;);&lt;br/&gt;#elseif($field.matchType == 'eq')&lt;br/&gt;        if(StringUtils.isNotBlank(condition.get${field.fieldUp}())){&lt;br/&gt;            sb.append(&quot; and ${field.columnName} = ?$!{velocityCount} &quot;);&lt;br/&gt;            params.put($!{velocityCount},condition.get${field.fieldUp}());&lt;br/&gt;        }&lt;br/&gt;#elseif($field.matchType == 'left')&lt;br/&gt;        if(StringUtils.isNotBlank(condition.get${field.fieldUp}())){&lt;br/&gt;            sb.append(&quot; and ${field.columnName} like ?$!{velocityCount} &quot;);&lt;br/&gt;            params.put($!{velocityCount},condition.get${field.fieldUp}()+&quot;%&quot;);&lt;br/&gt;        }&lt;br/&gt;#elseif($field.matchType == 'right')&lt;br/&gt;        if(StringUtils.isNotBlank(condition.get${field.fieldUp}())){&lt;br/&gt;            sb.append(&quot; and ${field.columnName} like ?$!{velocityCount} &quot;);&lt;br/&gt;            params.put($!{velocityCount},&quot;%&quot;+condition.get${field.fieldUp}());&lt;br/&gt;        }&lt;br/&gt;#elseif($field.matchType == 'dateRange')&lt;br/&gt;        if(condition.get${field.fieldUp}Begin()!=null){&lt;br/&gt;            sb.append(&quot; and ${field.columnName} &amp;gt;= ?$!{velocityCount} &quot;);&lt;br/&gt;            params.put($!{velocityCount},condition.get${field.fieldUp}Begin());&lt;br/&gt;        }&lt;br/&gt;        if(condition.get${field.fieldUp}End()!=null){&lt;br/&gt;            sb.append(&quot; and ${field.columnName} &amp;gt;= ?$!{velocityCount} &quot;);&lt;br/&gt;            params.put($!{velocityCount},condition.get${field.fieldUp}End());&lt;br/&gt;        }&lt;br/&gt;#end&lt;br/&gt;#else&lt;br/&gt;#if($field.matchType != 'none')&lt;br/&gt;        if(condition.get${field.fieldUp}()!=null){&lt;br/&gt;            sb.append(&quot; and ${field.columnName} = ?$!{velocityCount} &quot;);&lt;br/&gt;            params.put($!{velocityCount},condition.get${field.fieldUp}());&lt;br/&gt;        }&lt;br/&gt;#end&lt;br/&gt;#end&lt;/p&gt;&lt;p&gt;模拟文件结构不能更改，删除其中的文件会报错&lt;/p&gt;&lt;p&gt;注意：&lt;br/&gt;1、生成代码的时候会直接覆盖&lt;br/&gt;2、maven 生成的jar包 会存在乱码问题：解决方式：命令行中执行  java -Dfile.encoding=utf-8 -jar APA_BUILD-1.0.0.jar&lt;/p&gt;&lt;p&gt;-------------------------------------------------------------------&lt;br/&gt; &lt;/p&gt;&lt;p&gt;1、生成代码的时候会直接覆盖&lt;br/&gt;2、必须设计表的时候&lt;br/&gt;字段填写注释&lt;br/&gt;表上填写注释&lt;br/&gt;3、数据库中设计必须有：id(自增),code(uuid,标识),create_time,create_code,update_code,update_time,del_flag(逻辑删除，1)&lt;/p&gt;&lt;p&gt; -------------------------------------------------------------&lt;/p&gt;
</description>
<pubDate>Fri, 16 Mar 2018 07:34:00 +0000</pubDate>
<dc:creator>okrs.cn</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/a157680412/p/8582434.html</dc:identifier>
</item>
<item>
<title>MySQL服务读取参数文件my.cnf的规律研究探索 - 潇湘隐者</title>
<link>http://www.cnblogs.com/kerrycode/p/8582249.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/kerrycode/p/8582249.html</guid>
<description>&lt;p class=&quot;MsoNormal&quot; align=&quot;left&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;在MySQL中，它是按什么顺序或规律去读取my.cnf配置文件的呢？其实只要你花一点功夫，实验测试一下就能弄清楚，下面的实验环境为5.7.21 MySQL Community Server。其它版本如有不同，请以实际情况为准。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;left&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;left&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;其实，MySQL是按照下面这个顺序来读取my.cnf：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;left&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;left&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;   &lt;/span&gt;&lt;/span&gt; &lt;span&gt;1： /etc/my.cnf&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;left&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;   &lt;/span&gt;&lt;/span&gt; &lt;span&gt;2： /etc/mysql/my.cnf&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;left&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;   &lt;/span&gt;&lt;/span&gt; &lt;span&gt;3： /usr/etc/my.cnf&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;left&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;   &lt;/span&gt;&lt;/span&gt; &lt;span&gt;4： ~/.my.cnf&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;left&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;left&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;也就是说首先它会找/etc/my.cnf 这个文件， 如果这个文件不存在，那么它接下来去找/etc/mysql/my.cnf这个文件，依此类推（这个实验很简单，在此略过，不浪费篇幅），如果最后一个文件~/.my.cnf 也不存在，那么会怎么样呢？&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div id=&quot;codeSnippetWrapper&quot; readability=&quot;13.5&quot;&gt;
&lt;div id=&quot;codeSnippet&quot; readability=&quot;22&quot;&gt;
&lt;pre&gt;
[root@gettestlnx02 ~]&lt;span&gt;# mysql --help | grep my.cnf&lt;/span&gt;
&lt;/pre&gt;
&lt;pre&gt;
                      order of preference, my.cnf, $MYSQL_TCP_PORT,
&lt;/pre&gt;
&lt;pre&gt;
/etc/my.cnf /etc/mysql/my.cnf /usr/etc/my.cnf ~/.my.cnf 
&lt;/pre&gt;
&lt;pre&gt;
[root@gettestlnx02 ~]&lt;span&gt;# ls /etc/my.cnf /etc/mysql/my.cnf /usr/etc/my.cnf ~/.my.cnf&lt;/span&gt;
&lt;/pre&gt;
&lt;pre&gt;
ls: cannot access /etc/mysql/my.cnf: No such file or directory
&lt;/pre&gt;
&lt;pre&gt;
ls: cannot access /usr/etc/my.cnf: No such file or directory
&lt;/pre&gt;
&lt;pre&gt;
ls: cannot access /root/.my.cnf: No such file or directory
&lt;/pre&gt;
&lt;pre&gt;
/etc/my.cnf
&lt;/pre&gt;
&lt;pre&gt;
[root@gettestlnx02 ~]# 
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;left&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;left&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;如上所示，其实MySQL安装完成后，只生成了/etc/my.cnf这个配置文件。其它路径的my.cnf文件是不存在的。我们先来测试一下，将配置文件移走。在这之前，我们先查看一下log_error的位置。如下所示：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;left&quot;&gt; &lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;left&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div id=&quot;codeSnippetWrapper&quot; readability=&quot;13&quot;&gt;
&lt;div id=&quot;codeSnippet&quot; readability=&quot;21&quot;&gt;
&lt;pre&gt;
mysql&amp;gt; show variables like &lt;span&gt;'%log_error%'&lt;/span&gt;;
&lt;/pre&gt;
&lt;pre&gt;
+---------------------+---------------------+
&lt;/pre&gt;
&lt;pre&gt;
| Variable_name       | Value               |
&lt;/pre&gt;
&lt;pre&gt;
+---------------------+---------------------+
&lt;/pre&gt;
&lt;pre&gt;
| binlog_error_action | ABORT_SERVER        |
&lt;/pre&gt;
&lt;pre&gt;
| log_error           | /var/log/mysqld.log |
&lt;/pre&gt;
&lt;pre&gt;
| log_error_verbosity | 3                   |
&lt;/pre&gt;
&lt;pre&gt;
+---------------------+---------------------+
&lt;/pre&gt;
&lt;pre&gt;
3 rows &lt;span&gt;in&lt;/span&gt; set (0.00 sec)
&lt;/pre&gt;
&lt;pre&gt;
 
&lt;/pre&gt;
&lt;pre&gt;
mysql&amp;gt; exit
&lt;/pre&gt;
&lt;pre&gt;
Bye
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;left&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;left&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div id=&quot;codeSnippetWrapper&quot; readability=&quot;10&quot;&gt;
&lt;div id=&quot;codeSnippet&quot; readability=&quot;15&quot;&gt;
&lt;pre&gt;
[root@gettestlnx02 ~]&lt;span&gt;# mv /etc/my.cnf  /tmp/my.cnf&lt;/span&gt;
&lt;/pre&gt;
&lt;pre&gt;
[root@gettestlnx02 ~]&lt;span&gt;# ls -lrt /etc/my.cnf&lt;/span&gt;
&lt;/pre&gt;
&lt;pre&gt;
ls: cannot access /etc/my.cnf: No such file or directory
&lt;/pre&gt;
&lt;pre&gt;
[root@gettestlnx02 ~]&lt;span&gt;# service mysqld stop&lt;/span&gt;
&lt;/pre&gt;
&lt;pre&gt;
Stopping mysqld:  [  OK  ]
&lt;/pre&gt;
&lt;pre&gt;
[root@gettestlnx02 ~]&lt;span&gt;# service mysqld start&lt;/span&gt;
&lt;/pre&gt;
&lt;pre&gt;
Starting mysqld:  [  OK  ]
&lt;/pre&gt;
&lt;pre&gt;
[root@gettestlnx02 ~]# 
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;left&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;left&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;left&quot;&gt;&lt;span&gt;&lt;a href=&quot;https://images2018.cnblogs.com/blog/73542/201803/73542-20180316152650318-1589276501.png&quot;&gt;&lt;img title=&quot;clip_image001[4]&quot; border=&quot;0&quot; alt=&quot;clip_image001[4]&quot; src=&quot;https://images2018.cnblogs.com/blog/73542/201803/73542-20180316152650942-693349295.png&quot; width=&quot;650&quot; height=&quot;167&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;left&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;left&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;left&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;如上所示，即使没了my.cnf配置文件，MySQL服务依然可以启动，那么这个是怎么回事呢？ 我们知道service mysqld start启动MySQL，其实是运行/etc/init.d/mysqld这个脚本。下面是脚本获取给变量datadir、socketfile、errlogifle赋值的部分脚本，如下所示：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;left&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div id=&quot;codeSnippetWrapper&quot; readability=&quot;17.5&quot;&gt;
&lt;div id=&quot;codeSnippet&quot; readability=&quot;30&quot;&gt;
&lt;pre&gt;
&lt;span&gt;# Extract value of a MySQL option from config files&lt;/span&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;span&gt;# Usage: get_mysql_option OPTION DEFAULT SECTION1 SECTION2 SECTIONN&lt;/span&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;span&gt;# Result is returned in $result&lt;/span&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;span&gt;# We use my_print_defaults which prints all options from multiple files,&lt;/span&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;span&gt;# with the more specific ones later; hence take the last match.&lt;/span&gt;
&lt;/pre&gt;
&lt;pre&gt;
get_mysql_option () {
&lt;/pre&gt;
&lt;pre&gt;
    option=$1
&lt;/pre&gt;
&lt;pre&gt;
    &lt;span&gt;default&lt;/span&gt;=$2
&lt;/pre&gt;
&lt;pre&gt;
    shift 2  &lt;span&gt;#移动到第3个参数，详情见下面调试。&lt;/span&gt;
&lt;/pre&gt;
&lt;pre&gt;
    result=$(/usr/bin/my_print_defaults &lt;span&gt;&quot;$@&quot;&lt;/span&gt; | sed -n &lt;span&gt;&quot;s/^--${option}=//p&quot;&lt;/span&gt; | tail -n 1)
&lt;/pre&gt;
&lt;pre&gt;
    &lt;span&gt;if&lt;/span&gt; [ -z &lt;span&gt;&quot;$result&quot;&lt;/span&gt; ]; then
&lt;/pre&gt;
&lt;pre&gt;
        &lt;span&gt;# not found, use default&lt;/span&gt;
&lt;/pre&gt;
&lt;pre&gt;
        result=&lt;span&gt;&quot;${default}&quot;&lt;/span&gt;
&lt;/pre&gt;
&lt;pre&gt;
    fi
&lt;/pre&gt;
&lt;pre&gt;
}
&lt;/pre&gt;
&lt;pre&gt;
 
&lt;/pre&gt;
&lt;pre&gt;
get_mysql_option datadir &lt;span&gt;&quot;/var/lib/mysql&quot;&lt;/span&gt; mysqld
&lt;/pre&gt;
&lt;pre&gt;
datadir=&lt;span&gt;&quot;$result&quot;&lt;/span&gt;
&lt;/pre&gt;
&lt;pre&gt;
get_mysql_option socket &lt;span&gt;&quot;$datadir/mysql.sock&quot;&lt;/span&gt; mysqld
&lt;/pre&gt;
&lt;pre&gt;
socketfile=&lt;span&gt;&quot;$result&quot;&lt;/span&gt;
&lt;/pre&gt;
&lt;pre&gt;
get_mysql_option log-error &lt;span&gt;&quot;/var/log/mysqld.log&quot;&lt;/span&gt; mysqld mysqld_safe
&lt;/pre&gt;
&lt;pre&gt;
errlogfile=&lt;span&gt;&quot;$result&quot;&lt;/span&gt;
&lt;/pre&gt;
&lt;pre&gt;
get_mysql_option pid-file &lt;span&gt;&quot;/var/run/mysqld/mysqld.pid&quot;&lt;/span&gt; mysqld mysqld_safe
&lt;/pre&gt;
&lt;pre&gt;
mypidfile=&lt;span&gt;&quot;$result&quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;left&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;left&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;如果你对shell很熟，那么可以忽略下面步骤，如果不熟悉，那么我们可以手工调试一下（# sh -x mysqld），看看它是如何获取相关变量的值的呢？&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;left&quot;&gt; &lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;left&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;left&quot;&gt;&lt;span&gt;&lt;a href=&quot;https://images2018.cnblogs.com/blog/73542/201803/73542-20180316152652418-1203199024.png&quot;&gt;&lt;img title=&quot;clip_image002[4]&quot; border=&quot;0&quot; alt=&quot;clip_image002[4]&quot; src=&quot;https://images2018.cnblogs.com/blog/73542/201803/73542-20180316152653076-509610626.png&quot; width=&quot;650&quot; height=&quot;553&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;left&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;left&quot;&gt; &lt;/p&gt;
&lt;div id=&quot;codeSnippetWrapper&quot; readability=&quot;11&quot;&gt;
&lt;div id=&quot;codeSnippet&quot; readability=&quot;17&quot;&gt;
&lt;pre&gt;
[root@gettestlnx02 ~]&lt;span&gt;# file /usr/bin/my_print_defaults&lt;/span&gt;
&lt;/pre&gt;
&lt;pre&gt;
/usr/bin/my_print_defaults: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked (uses shared libs), &lt;span&gt;for&lt;/span&gt; GNU/Linux 2.6.18, not stripped
&lt;/pre&gt;
&lt;pre&gt;
[root@gettestlnx02 ~]&lt;span&gt;# /usr/bin/my_print_defaults mysqld&lt;/span&gt;
&lt;/pre&gt;
&lt;pre&gt;
[root@gettestlnx02 ~]&lt;span&gt;# &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;p class=&quot;MsoNormal&quot; align=&quot;left&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;如上所示，因为/usr/bin/my_print_defaults mysqld输出为空，所以result为空值， 所以result被授予${default}的值，而defualt=$2,其实就是第二个变量,如下所示，第二个变量被标记为红色。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;left&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;left&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;get_mysql_option datadir&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;&lt;span&gt;&quot;/var/lib/mysql&quot;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;mysqld&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;left&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;datadir=&quot;$result&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;left&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;left&quot;&gt; &lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;left&quot;&gt;&lt;span&gt;&lt;a href=&quot;https://images2018.cnblogs.com/blog/73542/201803/73542-20180316152653484-1587929190.png&quot;&gt;&lt;img title=&quot;clip_image003[4]&quot; border=&quot;0&quot; alt=&quot;clip_image003[4]&quot; src=&quot;https://images2018.cnblogs.com/blog/73542/201803/73542-20180316152653887-1628221020.png&quot; width=&quot;650&quot; height=&quot;375&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;left&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;left&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;另外，my.cnf的位置是会影响脚本输出结果的。如下所示：（不在几个默认路径的话，my_print_defaults是没有输出结果的）&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;left&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div id=&quot;codeSnippetWrapper&quot; readability=&quot;12&quot;&gt;
&lt;div id=&quot;codeSnippet&quot; readability=&quot;19&quot;&gt;
&lt;pre&gt;
[root@gettestlnx02 ~]&lt;span&gt;# ls /tmp/my.cnf&lt;/span&gt;
&lt;/pre&gt;
&lt;pre&gt;
/tmp/my.cnf
&lt;/pre&gt;
&lt;pre&gt;
[root@gettestlnx02 ~]&lt;span&gt;# /usr/bin/my_print_defaults mysqld&lt;/span&gt;
&lt;/pre&gt;
&lt;pre&gt;
[root@gettestlnx02 ~]&lt;span&gt;# mv /tmp/my.cnf  /etc/my.cnf&lt;/span&gt;
&lt;/pre&gt;
&lt;pre&gt;
[root@gettestlnx02 ~]&lt;span&gt;# /usr/bin/my_print_defaults mysqld&lt;/span&gt;
&lt;/pre&gt;
&lt;pre&gt;
--datadir=/var/lib/mysql
&lt;/pre&gt;
&lt;pre&gt;
--socket=/var/lib/mysql/mysql.sock
&lt;/pre&gt;
&lt;pre&gt;
--symbolic-links=0
&lt;/pre&gt;
&lt;pre&gt;
--log-error=/var/log/mysqld.log
&lt;/pre&gt;
&lt;pre&gt;
--pid-file=/var/run/mysqld/mysqld.pid
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;left&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;left&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;left&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;left&quot;&gt;&lt;span&gt;&lt;a href=&quot;https://images2018.cnblogs.com/blog/73542/201803/73542-20180316152654263-1708643915.png&quot;&gt;&lt;img title=&quot;clip_image004[4]&quot; border=&quot;0&quot; alt=&quot;clip_image004[4]&quot; src=&quot;https://images2018.cnblogs.com/blog/73542/201803/73542-20180316152654649-1339151963.png&quot; width=&quot;650&quot; height=&quot;184&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;left&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;left&quot;&gt; &lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;left&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;接下来，我们将配置文件my.cnf挪回原位（/etc/my.cnf），然后更改数据库数据存储目录（从/var/lib/mysql挪动到/data/mysqldata/mysql 步骤从略），然后我们再做下面测试：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;left&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;left&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div id=&quot;codeSnippetWrapper&quot; readability=&quot;19&quot;&gt;
&lt;div id=&quot;codeSnippet&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
[root@gettestlnx02 ~]&lt;span&gt;# service mysqld stop&lt;/span&gt;
&lt;/pre&gt;
&lt;pre&gt;
Stopping mysqld:  [  OK  ]
&lt;/pre&gt;
&lt;pre&gt;
[root@gettestlnx02 ~]&lt;span&gt;# mv /etc/my.cnf  /tmp/my.cnf&lt;/span&gt;
&lt;/pre&gt;
&lt;pre&gt;
[root@gettestlnx02 ~]&lt;span&gt;# service mysqld start&lt;/span&gt;
&lt;/pre&gt;
&lt;pre&gt;
Initializing MySQL database:  2018-03-16T01:26:19.589182Z 0 [Warning] TIMESTAMP with implicit DEFAULT value is deprecated. Please use --explicit_defaults_for_timestamp server option (see documentation &lt;span&gt;for&lt;/span&gt; more details).
&lt;/pre&gt;
&lt;pre&gt;
2018-03-16T01:26:20.034494Z 0 [Warning] InnoDB: New log files created, LSN=45790
&lt;/pre&gt;
&lt;pre&gt;
2018-03-16T01:26:20.132219Z 0 [Warning] InnoDB: Creating foreign key constraint system tables.
&lt;/pre&gt;
&lt;pre&gt;
2018-03-16T01:26:20.193504Z 0 [Warning] No existing UUID has been found, so we assume that this is the first time that this server has been started. Generating a new UUID: 07ee8c42-28b9-11e8-a04a-005056b3ebdf.
&lt;/pre&gt;
&lt;pre&gt;
2018-03-16T01:26:20.208662Z 0 [Warning] Gtid table is not ready to be used. Table &lt;span&gt;'mysql.gtid_executed'&lt;/span&gt; cannot be opened.
&lt;/pre&gt;
&lt;pre&gt;
2018-03-16T01:26:20.209919Z 1 [Note] A temporary password is generated &lt;span&gt;for&lt;/span&gt; root@localhost: O;kZmIj+.6jf
&lt;/pre&gt;
&lt;pre&gt;
[  OK  ]
&lt;/pre&gt;
&lt;pre&gt;
Logging to &lt;span&gt;'/var/lib/mysql/gettestlnx02.err'&lt;/span&gt;.
&lt;/pre&gt;
&lt;pre&gt;
Starting mysqld:  [  OK  ]
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;left&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;left&quot;&gt;&lt;span&gt;&lt;a href=&quot;https://images2018.cnblogs.com/blog/73542/201803/73542-20180316152655127-792440481.png&quot;&gt;&lt;img title=&quot;clip_image005[4]&quot; border=&quot;0&quot; alt=&quot;clip_image005[4]&quot; src=&quot;https://images2018.cnblogs.com/blog/73542/201803/73542-20180316152655482-2010365640.png&quot; width=&quot;800&quot; height=&quot;184&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;left&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;left&quot;&gt; &lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;left&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;MySQL服务居然也启动了，它初始化了数据库，数据文件位于/var/lib/mysql。这个确实让我吃了一惊，原本预测，如果更改数据库数据存储目录，MySQL又没有my.cnf配置文件，MySQL服务应该启动不了。当然这个启动也没有什么意义，因为你的数据和一些账号权限配置都没有了（有点类似于SQL Server里面的重建系统数据库）&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;left&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div id=&quot;codeSnippetWrapper&quot; readability=&quot;28&quot;&gt;
&lt;div id=&quot;codeSnippet&quot; readability=&quot;51&quot;&gt;
&lt;pre&gt;
[root@gettestlnx02 mysql]&lt;span&gt;# cd /var/lib/mysql&lt;/span&gt;
&lt;/pre&gt;
&lt;pre&gt;
[root@gettestlnx02 mysql]&lt;span&gt;# ls -lrt&lt;/span&gt;
&lt;/pre&gt;
&lt;pre&gt;
total 122948
&lt;/pre&gt;
&lt;pre&gt;
-rw-r-----. 1 mysql mysql 50331648 Mar 16 09:26 ib_logfile1
&lt;/pre&gt;
&lt;pre&gt;
-rw-r-----. 1 mysql mysql       56 Mar 16 09:26 auto.cnf
&lt;/pre&gt;
&lt;pre&gt;
drwxr-x---. 2 mysql mysql     4096 Mar 16 09:26 performance_schema
&lt;/pre&gt;
&lt;pre&gt;
drwxr-x---. 2 mysql mysql     4096 Mar 16 09:26 mysql
&lt;/pre&gt;
&lt;pre&gt;
drwxr-x---. 2 mysql mysql    12288 Mar 16 09:26 sys
&lt;/pre&gt;
&lt;pre&gt;
-rw-r-----. 1 mysql mysql      420 Mar 16 09:26 ib_buffer_pool
&lt;/pre&gt;
&lt;pre&gt;
-rw-------. 1 mysql mysql     1679 Mar 16 09:26 ca-key.pem
&lt;/pre&gt;
&lt;pre&gt;
-rw-r--r--. 1 mysql mysql     1107 Mar 16 09:26 ca.pem
&lt;/pre&gt;
&lt;pre&gt;
-rw-------. 1 mysql mysql     1675 Mar 16 09:26 server-key.pem
&lt;/pre&gt;
&lt;pre&gt;
-rw-r--r--. 1 mysql mysql     1107 Mar 16 09:26 server-cert.pem
&lt;/pre&gt;
&lt;pre&gt;
-rw-------. 1 mysql mysql     1675 Mar 16 09:26 client-key.pem
&lt;/pre&gt;
&lt;pre&gt;
-rw-r--r--. 1 mysql mysql     1107 Mar 16 09:26 client-cert.pem
&lt;/pre&gt;
&lt;pre&gt;
-rw-------. 1 mysql mysql     1675 Mar 16 09:26 private_key.pem
&lt;/pre&gt;
&lt;pre&gt;
-rw-r--r--. 1 mysql mysql      451 Mar 16 09:26 public_key.pem
&lt;/pre&gt;
&lt;pre&gt;
-rw-------. 1 mysql mysql        6 Mar 16 09:26 mysql.sock.lock
&lt;/pre&gt;
&lt;pre&gt;
srwxrwxrwx. 1 mysql mysql        0 Mar 16 09:26 mysql.sock
&lt;/pre&gt;
&lt;pre&gt;
-rw-r-----. 1 mysql mysql 12582912 Mar 16 09:26 ibtmp1
&lt;/pre&gt;
&lt;pre&gt;
-rw-r-----. 1 mysql mysql 12582912 Mar 16 09:26 ibdata1
&lt;/pre&gt;
&lt;pre&gt;
-rw-r-----. 1 mysql mysql 50331648 Mar 16 09:26 ib_logfile0
&lt;/pre&gt;
&lt;pre&gt;
-rw-r-----. 1 mysql mysql     3277 Mar 16 09:27 gettestlnx02.err
&lt;/pre&gt;
&lt;pre&gt;
[root@gettestlnx02 mysql]# 
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;left&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;left&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;测试、折腾过程发现并不是所有情况下都会成功初始化数据库，如果当/var/lib/mysql下存在一些文件时，初始化会报错&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;“&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;initialize specified but the data directory has files in it. Aborting.&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;”&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;此时，只要你清空&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;left&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;/var/lib/mysql下文件，就能成功初始化。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;left&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;left&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;[root@gettestlnx02 ~]# service mysqld stop&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;left&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;[root@gettestlnx02 ~]# mv /etc/my.cnf&lt;span&gt; &lt;/span&gt; /tmp/my.cnf&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;left&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;[root@gettestlnx02 ~]# service mysqld start&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;left&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;Initializing MySQL database:&lt;span&gt; &lt;/span&gt; 2018-03-16T03:49:45.190114Z 0 [Warning] TIMESTAMP with implicit DEFAULT value is deprecated. Please use --explicit_defaults_for_timestamp server option (see documentation for more details).&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;left&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;2018-03-16T03:49:45.192215Z 0 [ERROR] --initialize specified but the data directory has files in it. Aborting.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;left&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;2018-03-16T03:49:45.192246Z 0 [ERROR] Aborting&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;left&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;left&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;[FAILED]&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;left&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;[root@gettestlnx02 ~]#&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;left&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;left&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;left&quot;&gt;&lt;span&gt;&lt;a href=&quot;https://images2018.cnblogs.com/blog/73542/201803/73542-20180316152655780-1603192142.png&quot;&gt;&lt;img title=&quot;clip_image006[4]&quot; border=&quot;0&quot; alt=&quot;clip_image006[4]&quot; src=&quot;https://images2018.cnblogs.com/blog/73542/201803/73542-20180316152656296-1712939424.png&quot; width=&quot;800&quot; height=&quot;366&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;left&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;left&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;其实只要稍微花费一点心思，查看一下/etc/init.d/mysqld的代码，就会发现start函数里面在条件满足的情况就会初始化数据库。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;left&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div id=&quot;codeSnippetWrapper&quot; readability=&quot;35.5&quot;&gt;
&lt;div id=&quot;codeSnippet&quot; readability=&quot;66&quot;&gt;
&lt;pre&gt;
start(){
&lt;/pre&gt;
&lt;pre&gt;
    [ -x $exec ] || exit 5
&lt;/pre&gt;
&lt;pre&gt;
    &lt;span&gt;# check to see if it's already running&lt;/span&gt;
&lt;/pre&gt;
&lt;pre&gt;
    RESPONSE=$(/usr/bin/mysqladmin --no-defaults --socket=&lt;span&gt;&quot;$adminsocket&quot;&lt;/span&gt; --user=UNKNOWN_MYSQL_USER ping 2&amp;gt;&amp;amp;1)
&lt;/pre&gt;
&lt;pre&gt;
    &lt;span&gt;if&lt;/span&gt; [ $? = 0 ]; then
&lt;/pre&gt;
&lt;pre&gt;
        &lt;span&gt;# already running, do nothing&lt;/span&gt;
&lt;/pre&gt;
&lt;pre&gt;
        action $&lt;span&gt;&quot;Starting $prog: &quot;&lt;/span&gt; /bin/true
&lt;/pre&gt;
&lt;pre&gt;
        ret=0
&lt;/pre&gt;
&lt;pre&gt;
    elif echo &lt;span&gt;&quot;$RESPONSE&quot;&lt;/span&gt; | grep -q &lt;span&gt;&quot;Access denied for user&quot;&lt;/span&gt;
&lt;/pre&gt;
&lt;pre&gt;
    then
&lt;/pre&gt;
&lt;pre&gt;
        &lt;span&gt;# already running, do nothing&lt;/span&gt;
&lt;/pre&gt;
&lt;pre&gt;
        action $&lt;span&gt;&quot;Starting $prog: &quot;&lt;/span&gt; /bin/true
&lt;/pre&gt;
&lt;pre&gt;
        ret=0
&lt;/pre&gt;
&lt;pre&gt;
    &lt;span&gt;else&lt;/span&gt;
&lt;/pre&gt;
&lt;pre&gt;
        &lt;span&gt;# prepare for start&lt;/span&gt;
&lt;/pre&gt;
&lt;pre&gt;
        &lt;span&gt;if&lt;/span&gt; [ ! -e &lt;span&gt;&quot;$errlogfile&quot;&lt;/span&gt; -a ! -h &lt;span&gt;&quot;$errlogfile&quot;&lt;/span&gt; -a &lt;span&gt;&quot;x$(dirname &quot;&lt;/span&gt;$errlogfile&lt;span&gt;&quot;)&quot;&lt;/span&gt; = &lt;span&gt;&quot;x/var/log&quot;&lt;/span&gt; ]; then
&lt;/pre&gt;
&lt;pre&gt;
            install /dev/null -m0640 -omysql -gmysql &lt;span&gt;&quot;$errlogfile&quot;&lt;/span&gt;
&lt;/pre&gt;
&lt;pre&gt;
        fi
&lt;/pre&gt;
&lt;pre&gt;
        [ -x /sbin/restorecon ] &amp;amp;&amp;amp; /sbin/restorecon &lt;span&gt;&quot;$errlogfile&quot;&lt;/span&gt;
&lt;/pre&gt;
&lt;pre&gt;
        &lt;span&gt;if&lt;/span&gt; [ ! -d &lt;span&gt;&quot;$datadir/mysql&quot;&lt;/span&gt; ] ; then
&lt;/pre&gt;
&lt;pre&gt;
            &lt;span&gt;# First, make sure $datadir is there with correct permissions&lt;/span&gt;
&lt;/pre&gt;
&lt;pre&gt;
            &lt;span&gt;if&lt;/span&gt; [ ! -d &lt;span&gt;&quot;$datadir&quot;&lt;/span&gt; -a ! -h &lt;span&gt;&quot;$datadir&quot;&lt;/span&gt; -a &lt;span&gt;&quot;x$(dirname &quot;&lt;/span&gt;$datadir&lt;span&gt;&quot;)&quot;&lt;/span&gt; = &lt;span&gt;&quot;x/var/lib&quot;&lt;/span&gt; ]; then
&lt;/pre&gt;
&lt;pre&gt;
                install -d -m0751 -omysql -gmysql &lt;span&gt;&quot;$datadir&quot;&lt;/span&gt; || exit 1
&lt;/pre&gt;
&lt;pre&gt;
            fi
&lt;/pre&gt;
&lt;pre&gt;
            &lt;span&gt;if&lt;/span&gt; [ ! -h &lt;span&gt;&quot;$datadir&quot;&lt;/span&gt; -a &lt;span&gt;&quot;x$(dirname &quot;&lt;/span&gt;$datadir&lt;span&gt;&quot;)&quot;&lt;/span&gt; = &lt;span&gt;&quot;x/var/lib&quot;&lt;/span&gt; ]; then
&lt;/pre&gt;
&lt;pre&gt;
                chown mysql:mysql &lt;span&gt;&quot;$datadir&quot;&lt;/span&gt;
&lt;/pre&gt;
&lt;pre&gt;
                chmod 0751 &lt;span&gt;&quot;$datadir&quot;&lt;/span&gt;
&lt;/pre&gt;
&lt;pre&gt;
            fi
&lt;/pre&gt;
&lt;pre&gt;
            &lt;span&gt;if&lt;/span&gt; [ -x /sbin/restorecon ]; then
&lt;/pre&gt;
&lt;pre&gt;
                /sbin/restorecon &lt;span&gt;&quot;$datadir&quot;&lt;/span&gt;
&lt;/pre&gt;
&lt;pre&gt;
                &lt;span&gt;for&lt;/span&gt; dir &lt;span&gt;in&lt;/span&gt; /var/lib/mysql-files /var/lib/mysql-keyring ; do
&lt;/pre&gt;
&lt;pre&gt;
                    &lt;span&gt;if&lt;/span&gt; [ -x /usr/sbin/semanage -a -d /var/lib/mysql -a -d $dir ] ; then
&lt;/pre&gt;
&lt;pre&gt;
                        /usr/sbin/semanage fcontext -a -e /var/lib/mysql $dir &amp;gt;/dev/null 2&amp;gt;&amp;amp;1
&lt;/pre&gt;
&lt;pre&gt;
                        /sbin/restorecon -r $dir
&lt;/pre&gt;
&lt;pre&gt;
                    fi
&lt;/pre&gt;
&lt;pre&gt;
                done
&lt;/pre&gt;
&lt;pre&gt;
            fi
&lt;/pre&gt;
&lt;pre&gt;
            &lt;span&gt;# Now create the database&lt;/span&gt;
&lt;/pre&gt;
&lt;pre&gt;
            initfile=&lt;span&gt;&quot;$(install_validate_password_sql_file)&quot;&lt;/span&gt;
&lt;/pre&gt;
&lt;pre&gt;
            action $&lt;span&gt;&quot;Initializing MySQL database: &quot;&lt;/span&gt; /usr/sbin/mysqld --initialize --datadir=&lt;span&gt;&quot;$datadir&quot;&lt;/span&gt; --user=mysql --init-file=&lt;span&gt;&quot;$initfile&quot;&lt;/span&gt;
&lt;/pre&gt;
&lt;pre&gt;
            ret=$?
&lt;/pre&gt;
&lt;pre&gt;
            rm -f &lt;span&gt;&quot;$initfile&quot;&lt;/span&gt;
&lt;/pre&gt;
&lt;pre&gt;
            [ $ret -ne 0 ] &amp;amp;&amp;amp; &lt;span&gt;return&lt;/span&gt; $ret
&lt;/pre&gt;
&lt;pre&gt;
            &lt;span&gt;# Generate certs if needed&lt;/span&gt;
&lt;/pre&gt;
&lt;pre&gt;
            &lt;span&gt;if&lt;/span&gt; [ -x /usr/bin/mysql_ssl_rsa_setup -a ! -e &lt;span&gt;&quot;${datadir}/server-key.pem&quot;&lt;/span&gt; ] ; then
&lt;/pre&gt;
&lt;pre&gt;
                /usr/bin/mysql_ssl_rsa_setup --datadir=&lt;span&gt;&quot;$datadir&quot;&lt;/span&gt; --uid=mysql &amp;gt;/dev/null 2&amp;gt;&amp;amp;1
&lt;/pre&gt;
&lt;pre&gt;
            fi
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;left&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;left&quot;&gt; &lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;left&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;另外，在多实例情况下，多实例有两种方案：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;left&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;left&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;1、基于mysqld_multi:&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;多个实例共用同一个my.cnf配置文件中，利用[mysqld1]、[mysqld2]、[mysqld*]标签实现不同实例的差异化配置；&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;left&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;left&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;2、基于多配置文件：每一个实例单独一个my.cnf配置文件&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;left&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;left&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;left&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;多实例启动时都会指定对应的my.cnf，所以虽然这里没有详细测试，其实大致的原理也跟单实例是差不多的。当你有疑问或不解的时候，动手实践是检验真理的唯一标准。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;left&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;left&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;left&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot; align=&quot;left&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

</description>
<pubDate>Fri, 16 Mar 2018 07:27:00 +0000</pubDate>
<dc:creator>潇湘隐者</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/kerrycode/p/8582249.html</dc:identifier>
</item>
<item>
<title>纳税服务系统【总结】 - Java3y</title>
<link>http://www.cnblogs.com/Java3y/p/8582259.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/Java3y/p/8582259.html</guid>
<description>&lt;p&gt;纳税服务系统是我第一个做得比较大的项目(不同于javaWeb小项目),该项目系统来源于传智Java32期，十天的视频课程(想要视频的同学关注我的公众号就可以直接获取了)&lt;/p&gt;
&lt;p&gt;我跟着练习一步一步完成需求，才发觉原来Java是这样用来做网站的，Java有那么多的类库，页面的效果(图表、日期选择器等等)是通过JavaScript组件来显示，调用后端代码来获取数据从而显示出来的。&lt;/p&gt;
&lt;p&gt;通过这次的项目开阔了我的视野，也解决了我当初学习Java时很多的疑问，自己练习完我将项目的代码放到了GitHub中：&lt;a href=&quot;https://github.com/ZhongFuCheng3y/NSFW_Systen&quot; class=&quot;uri&quot;&gt;https://github.com/ZhongFuCheng3y/NSFW_Systen&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;同时在练习的过程中也用博文记录下来了，一共7篇。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzI4Njg5MDA5NA==&amp;amp;mid=2247484000&amp;amp;idx=2&amp;amp;sn=3b637234b3911d94cfb291b01329027b&amp;amp;chksm=ebd74361dca0ca77d9208dee547374613e0b8d09a49c9580580f35d0154a6e116dc0e69a463f#rd&quot;&gt;纳税服务系统一（用户模块）【简单增删改查、日期组件、上传和修改头像】&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzI4Njg5MDA5NA==&amp;amp;mid=2247484000&amp;amp;idx=3&amp;amp;sn=01c3acd7ae24cee1c1a608df7a004e21&amp;amp;chksm=ebd74361dca0ca7786d54f9e70507c7472cca02c8f5d506d76ccee394b4be643fb0de1ce27a7#rd&quot;&gt;纳税服务系统二（用户模块）【POI、用户唯一性校验】&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzI4Njg5MDA5NA==&amp;amp;mid=2247484000&amp;amp;idx=4&amp;amp;sn=e832cad131b63b150ea372a414c82436&amp;amp;chksm=ebd74361dca0ca77348a604ffba6880d0302ac5052c6fe0b6ffa41d951cf7f71978500ae972a#rd&quot;&gt;纳税服务系统三(优化处理)【异常处理、抽取BaseAction】&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzI4Njg5MDA5NA==&amp;amp;mid=2247484000&amp;amp;idx=5&amp;amp;sn=feab77a450feaa805cb5b4e8dad22b74&amp;amp;chksm=ebd74361dca0ca77794e40dfb28289b658922c8e2ca34d0ac897cd7efdf53d43ca066282c180#rd&quot;&gt;纳税服务系统四（角色模块）【角色与权限、角色与用户】&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzI4Njg5MDA5NA==&amp;amp;mid=2247484000&amp;amp;idx=6&amp;amp;sn=2e51fff489d778a8eee656e4e54361d5&amp;amp;chksm=ebd74361dca0ca77475ed3cf2080533106dcbf61629d1dfbb43486b11b9be89b7ff2e1ed6eb8#rd&quot;&gt;纳税服务系统五（登陆与系统拦截）【配置系统、子系统首页、登陆与拦截】&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzI4Njg5MDA5NA==&amp;amp;mid=2247484000&amp;amp;idx=7&amp;amp;sn=9ecf5932232658f8263cf9282433ec69&amp;amp;chksm=ebd74361dca0ca7789eb016b9cef31ac4ac9666798a15f2a5e585c4f1a6b2991ca9d727845e2#rd&quot;&gt;纳税服务系统六（信息发布管理模块）【Ueditor、异步信息交互、抽取BaseService、条件查询、分页】&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzI4Njg5MDA5NA==&amp;amp;mid=2247484000&amp;amp;idx=8&amp;amp;sn=15b91ba39935e4a38bf168726e7d22da&amp;amp;chksm=ebd74361dca0ca77497ebc37fe6ad26fb346e84a659774ccc411adc7262cf274bfa153f11ab4#rd&quot;&gt;纳税服务系统七（投诉管理模块）【显示投诉信息、处理回复、我要投诉、Quartz自动受理、统计图FusionCharts】&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;练习时截取部分的gif：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/cEVB5Vr.gif&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/hVsS2xk.gif&quot;/&gt;&lt;/p&gt;
&lt;p&gt;该项目涉及到的知识：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Struts2,Spring,Hibernate&lt;/li&gt;
&lt;li&gt;JSP&lt;/li&gt;
&lt;li&gt;Javascript，jQuery，AJAX&lt;/li&gt;
&lt;li&gt;某些工具类及组件如(FileUtil,POI，DateUtils)&lt;/li&gt;
&lt;li&gt;JS组件：日期组件、富文本编辑器、Fusionchart(图表组件)&lt;/li&gt;
&lt;li&gt;抽取Action、Service、Dao，全局异常处理&lt;/li&gt;
&lt;li&gt;权限控制的模型设计(用户、角色、权限)&lt;/li&gt;
&lt;li&gt;数据回显和分页&lt;/li&gt;
&lt;li&gt;Hibernate逆向工程&lt;/li&gt;
&lt;li&gt;Quartz定时调度工具&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;写这篇博文的目的也是为了总结一下在这次项目中学到了什么东西，除了上面这些知识点大纲，还有&lt;strong&gt;很多实用的小技巧&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;JSP重复的代码最好抽取&lt;/strong&gt;出来，用到的页面再重新&lt;code&gt;include&lt;/code&gt;进去就行了&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;多用一些常用的工具类&lt;/strong&gt;(FileUtil,DateUtils)，简化我们的开发&lt;/li&gt;
&lt;li&gt;在前端页面上想要达到一些绚丽的效果(自己很难写出来和功能比较复杂那种),&lt;strong&gt;找找有没有对应的组件来使用&lt;/strong&gt;(日期组件、富文本编辑器、Fusionchart)。&lt;/li&gt;
&lt;li&gt;同理，在后端也是一样。Java操作Excel有对应的组件POI等，Java实现&quot;自动处理&quot;有Quartz开源框架&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;AJAX无刷新特定能干很多的功能&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;三层架构(Controller、Service、Dao)的代码很多都能够抽取出来&lt;/strong&gt;，Controller抽取的是通用的属性和方法，Service抽取的是相同的业务方法，Dao层抽取CURD通用方法&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;统一处理异常能够提高系统的健壮性&lt;/strong&gt;，避免异常信息给到用户看(用户也看不懂，发生错误应该提示友好的提示)&lt;/li&gt;
&lt;li&gt;在设计模型对象关系时，&lt;strong&gt;如果功能简单的话也不用“死板”地创建对象，创建表，看能不能用常量(集合)来代替&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;在修改多个数据的时候可以换个思路：&lt;strong&gt;先把原有的数据删除了，再增加用户勾选的记录(达到修改的效果)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;在页面上定位一个标签，我们可以&lt;strong&gt;使用特殊的前缀+上我们的Id&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;在条件查询的时候，&lt;strong&gt;尽量把like字段的数据放在后边，以提高我们的查询性能!&lt;/strong&gt;当在数据库查询时，如果某些数据是不存在但有这个字段时，想想能不能用左外连接查询&lt;/li&gt;
&lt;li&gt;在Struts2指定name为root的话，我们可以指定哪个属性是返回JSON格式的。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;要是使用到日历的话，我们想到使用Calendar这个日历类&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;上面仅仅是我个人总结的要点，如果有错误的地方还请大家给我指正。&lt;/p&gt;
&lt;p&gt;如果SSH还不太熟悉的同学可先看我其他的基础博文：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Hibernate：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Struts2：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Spring：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;SSH整合与阅读项目：&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;如果文章有错的地方欢迎指正，大家互相交流。习惯在微信看技术文章，想要获取更多的Java资源的同学，可以&lt;strong&gt;关注微信公众号:Java3y&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
<pubDate>Fri, 16 Mar 2018 07:27:00 +0000</pubDate>
<dc:creator>Java3y</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/Java3y/p/8582259.html</dc:identifier>
</item>
<item>
<title>JavaScript之事件及动画 - 人生不如戏</title>
<link>http://www.cnblogs.com/fu-yong/p/8582251.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/fu-yong/p/8582251.html</guid>
<description>&lt;h2&gt;一、事件&lt;/h2&gt;
&lt;h3&gt;常用事件&lt;/h3&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;34&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
click(function(){...})    //单击事件
hover(function(){...})  //鼠标经过事件   
blur(function(){...})    //失去光标
focus(function(){...})  //获取光标
change(function(){...}) //修改事件
keyup(function(){...})  //松开键盘
keydown(function(){...})  //按下键盘
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;事件绑定&lt;/h3&gt;
&lt;p&gt;语法：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;34&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
.on( events [, selector ],function(){})　
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;events： 事件&lt;/li&gt;
&lt;li&gt;selector: 选择器（可选的）&lt;/li&gt;
&lt;li&gt;function: 事件处理函数&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;移除事件&lt;/h3&gt;
&lt;p&gt;语法：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;34&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
.off( events [, selector ][,function(){}])
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;events： 事件&lt;/li&gt;
&lt;li&gt;selector: 选择器（可选的）&lt;/li&gt;
&lt;li&gt;function: 事件处理函数&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;阻止后续事件执行&lt;/h3&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
return false; // 常见阻止表单提交等
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;页面载入&lt;/h3&gt;
&lt;p&gt;当DOM载入就绪可以查询及操纵时绑定一个要执行的函数。这是事件模块中最重要的一个函数，因为它可以极大地提高web应用程序的响应速度。&lt;/p&gt;
&lt;p&gt;两种写法：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
$(document).ready(function(){
// 在这里写你的JS代码...
})
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;简写：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
$(function(){
// 你在这里写你的代码
})
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;事件委托&lt;/h3&gt;
&lt;p&gt;事件委托是通过事件冒泡的原理，利用父标签去捕获子标签的事件。&lt;/p&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;p&gt;表格中每一行的编辑和删除按钮都能触发相应的事件。&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;34&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
$(&quot;table&quot;).on(&quot;click&quot;, &quot;.delete&quot;, function () {
  // 删除按钮绑定的事件
})
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;二、动画效果&lt;/h2&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;59&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
// 基本
show([s,[e],[fn]])
hide([s,[e],[fn]])
toggle([s],[e],[fn])
// 滑动
slideDown([s],[e],[fn])
slideUp([s,[e],[fn]])
slideToggle([s],[e],[fn])
// 淡入淡出
fadeIn([s],[e],[fn])
fadeOut([s],[e],[fn])
fadeTo([[s],o,[e],[fn]])
fadeToggle([s,[e],[fn]])
// 自定义（了解即可）
animate(p,[s],[e],[fn])
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;三、其他知识补充&lt;/h2&gt;
&lt;h3&gt;each&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;jQuery.each(collection, callback(indexInArray, valueOfElement))：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;描述：一个通用的迭代函数，它可以用来无缝迭代对象和数组。数组和类似数组的对象通过一个长度属性（如一个函数的参数对象）来迭代数字索引，从0到length - 1。其他对象通过其属性名进行迭代。&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;39&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
li =[10,20,30,40]
$.each(li,function(i, v){
  console.log(i, v);//index是索引，ele是每次循环的具体元素。
})
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;输出：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
010
120
230
340
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;.each(function(index, Element))：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;描述：遍历一个jQuery对象，为每个匹配元素执行一个函数。&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;prettyprint code-in-text prettyprinted&quot;&gt;&lt;span class=&quot;pun&quot;&gt;.&lt;span class=&quot;pln&quot;&gt;each&lt;span class=&quot;pun&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt; 方法用来迭代jQuery对象中的每一个DOM元素。每次回调函数执行时，会传递当前循环次数作为参数(从0开始计数)。由于回调函数是在当前DOM元素为上下文的语境中触发的，所以关键字 &lt;code class=&quot;prettyprint code-in-text prettyprinted&quot;&gt;&lt;span class=&quot;kwd&quot;&gt;this&lt;/span&gt;&lt;/code&gt; 总是指向这个元素。&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
// 为每一个li标签添加foo
$(&quot;li&quot;).each(function(){
  $(this).addClass(&quot;c1&quot;);
});
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;注意: jQuery的方法返回一个jQuery对象，遍历jQuery集合中的元素 - 被称为隐式&lt;em&gt;迭代&lt;/em&gt;的过程。当这种情况发生时，它通常不需要显式地循环的 &lt;code class=&quot;prettyprint code-in-text prettyprinted&quot;&gt;&lt;span class=&quot;pun&quot;&gt;.&lt;span class=&quot;pln&quot;&gt;each&lt;span class=&quot;pun&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;方法：&lt;/p&gt;
&lt;p&gt;也就是说，上面的例子没有必要使用each()方法，直接像下面这样写就可以了：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
$(&quot;li&quot;).addClass(&quot;c1&quot;);  // 对所有标签做统一操作
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;注意：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在遍历过程中可以使用 &lt;code class=&quot;prettyprint code-in-text prettyprinted&quot;&gt;&lt;span class=&quot;kwd&quot;&gt;return &lt;span class=&quot;kwd&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;提前结束each循环。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;终止each循环&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
return false；
&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;.date()&lt;/h3&gt;
&lt;p&gt;在匹配的元素集合中的所有元素上存储任意相关数据或返回匹配的元素集合中的第一个元素的给定名称的数据存储的值。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;.data(key, value):&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;描述：在匹配的元素上存储任意相关数据。&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
$(&quot;div&quot;).data(&quot;k&quot;,100);//给所有div标签都保存一个名为k，值为100
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;.data(key):&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;描述: 返回匹配的元素集合中的第一个元素的给定名称的数据存储的值—通过 &lt;code class=&quot;prettyprint code-in-text prettyprinted&quot;&gt;&lt;span class=&quot;pun&quot;&gt;.&lt;span class=&quot;pln&quot;&gt;data&lt;span class=&quot;pun&quot;&gt;(&lt;span class=&quot;pln&quot;&gt;name&lt;span class=&quot;pun&quot;&gt;,&lt;span class=&quot;pln&quot;&gt; value&lt;span class=&quot;pun&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;或 &lt;code class=&quot;prettyprint code-in-text prettyprinted&quot;&gt;&lt;span class=&quot;pln&quot;&gt;HTML5 data&lt;span class=&quot;pun&quot;&gt;-*&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;属性设置。&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
$(&quot;div&quot;).data(&quot;k&quot;);//返回第一个div标签中保存的&quot;k&quot;的值
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;.removeData(key):&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;描述：移除存放在元素上的数据，不加key参数表示移除所有保存的数据。&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
$(&quot;div&quot;).removeData(&quot;k&quot;);  //移除元素上存放k对应的数据
&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;插件&lt;/h3&gt;
&lt;p&gt;jQuery.extend(object)&lt;/p&gt;
&lt;p&gt;jQuery的命名空间下添加新的功能。多用于插件开发者向 jQuery 中添加新函数时使用。&lt;/p&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;38&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
&amp;lt;script&amp;gt;
jQuery.extend({
  min:function(a, b){return a &amp;lt; b ? a : b;},
  max:function(a, b){return a &amp;gt; b ? a : b;}
});
jQuery.min(2,3);// =&amp;gt; 2
jQuery.max(4,5);// =&amp;gt; 5
&amp;lt;/script&amp;gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;jQuery.fn.extend(object)&lt;/p&gt;
&lt;p&gt;一个对象的内容合并到jQuery的原型，以提供新的jQuery实例方法。&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
&amp;lt;script&amp;gt;
  jQuery.fn.extend({
    check:function(){
      return this.each(function(){this.checked =true;});
    },
    uncheck:function(){
      return this.each(function(){this.checked =false;});
    }
  });
// jQuery对象可以使用新添加的check()方法了。
$(&quot;input[type='checkbox']&quot;).check();
&amp;lt;/script&amp;gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;单独写在文件中的扩展：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:csharp;gutter:true;&quot;&gt;
(function(jq){
  jq.extend({
    funcName:function(){
    ...
    },
  });
})(jQuery);
&lt;/pre&gt;&lt;/div&gt;

</description>
<pubDate>Fri, 16 Mar 2018 07:27:00 +0000</pubDate>
<dc:creator>人生不如戏</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/fu-yong/p/8582251.html</dc:identifier>
</item>
<item>
<title>Spring Data（二）查询 - 牛初九</title>
<link>http://www.cnblogs.com/boboooo/p/8582227.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/boboooo/p/8582227.html</guid>
<description>&lt;p&gt;&lt;span&gt;&lt;strong&gt;Spring Data（二）查询&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;接着上一篇，我们继续讲解Spring Data查询的策略。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;查询的生成&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;查询的构建机制对于Spring Data的基础是非常有用的。构建的机制将截断前缀find…By、read…By、query…By、count…By、get…By等，从剩余的部分开始解析。省略号可以进一步使用distinct等关键字创建查询。第一个By作为分界符，后面的部分将开始解析。最基础的，你可以使用实体中的属性定义条件并且可以使用And或Or连接它们。&lt;/p&gt;
&lt;p&gt;方法名字生成查询：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;40&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
interface PersonRepository extends Repository&amp;lt;User, Long&amp;gt; { 
    List&amp;lt;Person&amp;gt; findByEmailAddressAndLastname(EmailAddress emailAddress, String lastname); 

    // 使用distinct关键字构建查询
    List&amp;lt;Person&amp;gt; findDistinctPeopleByLastnameOrFirstname(String lastname, String firstname); 
    List&amp;lt;Person&amp;gt; findPeopleDistinctByLastnameOrFirstname(String lastname, String firstname); 

    // Enabling ignoring case for an individual property 
    List&amp;lt;Person&amp;gt; findByLastnameIgnoreCase(String lastname); 

    // Enabling ignoring case for all suitable properties 
    List&amp;lt;Person&amp;gt; findByLastnameAndFirstnameAllIgnoreCase(String lastname, String firstname); 

    // 在查询中使用OrderBy
    List&amp;lt;Person&amp;gt; findByLastnameOrderByFirstnameAsc(String lastname); 
    List&amp;lt;Person&amp;gt; findByLastnameOrderByFirstnameDesc(String lastname); 
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;解析方法的实际结果取决于持久化的存储，但是其中有一些通用的东西要告诉大家：&lt;/p&gt;
&lt;ul class=&quot; list-paddingleft-2&quot; readability=&quot;2.5&quot;&gt;&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;表达式通常遍历属性并且使用操作符连接。你可以连接属性使用表达式And或者Or，也可以使用其他的操作符Between、LessThan、GreaterThan、Like等。被支持的操作符非常的广泛，你可以查询适合的相关文档。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;方法解析器支持单个属性设置IgnoreCase的标识（例如：findByLastnameIgnoreCase(…)），或者一个类型的所有属性设置ignoring case（例如：findByLastnameAndFirstnameAllIgnoreCase(…)）。不管ignoring cases是不是被广大的数据库支持，都要查询指定数据库的相关文档。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;你可以使用OrderBy使方法查询排序。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;属性表达式&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;属性表达式仅仅涉及一个被管理实体的属性。在查询生成时，你已经确定解析的属性就是你管理的实体类中的属性。你也可以通过嵌套属性定义约束，假设一个Person类有一个Address类，Address类有一个ZipCode类，方法的命名如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
List&amp;lt;Person&amp;gt; findByAddressZipCode(ZipCode zipCode);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;生成的属性嵌套为：x.address.zipCode。解决的逻辑是从AddressZipCode开始，用这个名字（开头字母小写）去检查属性，如果找到了，就检查这个属性。如果没有找到，将从右侧按照驼峰规则进行分割，分割成一个头和一个尾，然后尝试找到合适的属性，我们的例子中，分割层AddressZip和Code。接着，如果用头找到了合适的属性，会用尾继续向下一层查找，将尾部按照上面的描述那样继续分割。如果第一次分割没有匹配成功，将分割点左移（Address和ZipCode）并继续。&lt;/p&gt;
&lt;p&gt;虽然这中逻辑可以为大多数情况下工作，但是它也有可能选择错误的属性。假设Person也有一个addressZip的属性，这种逻辑将匹配第一次分割，选择了错误的属性并最终失败（addressZip没有code字段）。&lt;/p&gt;
&lt;p&gt;为了解决中模糊不清的含义，我们可以在方法名字中使用“_”手动创建分割点。所以我们的方法名字如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
List&amp;lt;Person&amp;gt; findByAddress_ZipCode(ZipCode zipCode);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;我们将下划线作为保留字段，我们强烈建议使用java标准的命名规则。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;特殊参数的处理&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;为了在查询中处理参数，你可以按照上面例子中的那样，简单的定义方法参数。除了这些之外，它还可以认识特殊的类型如：Pageable和Sort，他们可以在查询中应用分页和排序。例子如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;38&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
Page&amp;lt;User&amp;gt; findByLastname(String lastname, Pageable pageable); 
Slice&amp;lt;User&amp;gt; findByLastname(String lastname, Pageable pageable); 
List&amp;lt;User&amp;gt; findByLastname(String lastname, Sort sort); 
List&amp;lt;User&amp;gt; findByLastname(String lastname, Pageable pageable);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;第一个方法将通过Pageable实例在查询中添加分页，Page接口知道元素的总数和可用的分页。它是通过底层触发count方法进行总数查询，这将会依赖数据库的使用，我们可以使用Slice替换Page。Slice仅仅知道是否有下一个可用的Slice，这样在遍历大结果集是非常足够的。&lt;/p&gt;
&lt;p&gt;排序选项也可以通过Pageable实例处理，如果仅仅需要排序，你可以简单在方法中加入Sort参数，返回的是一个简单List。为了找到你的查询有多少页，你必须触发一个额外的count查询，默认的，这个查询是从你触发的那个查询衍生出来的。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;限制查询结果&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;查询方法的结果可以被关键字限制，如：first，top，它们可以被交换使用。后面跟随的数值将制定最大的结果集，如果数字没有设置，将返回一个结果。&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;用Top和First限制查询结果大小&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;39&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
User findFirstByOrderByLastnameAsc(); 
User findTopByOrderByAgeDesc(); 
Page&amp;lt;User&amp;gt; queryFirst10ByLastname(String lastname, Pageable pageable); 
Slice&amp;lt;User&amp;gt; findTop3ByLastname(String lastname, Pageable pageable); 
List&amp;lt;User&amp;gt; findFirst10ByLastname(String lastname, Sort sort); 
List&amp;lt;User&amp;gt; findTop10ByLastname(String lastname, Pageable pageable);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;限制的表达式也支持Distinct关键字，限制查询的结果集设置到一个实例中，将结果封装到Optional中也是支持的。&lt;/p&gt;
&lt;p&gt;如果pagination或者slicing应用到限制的查询分页中，他们也是在限制的结果集中应用。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;查询结果流&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;查询的结果也可以用java8的Stream&amp;lt;T&amp;gt;处理，这样可以使用stream的良好性能。&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
@Query(&quot;select u from User u&quot;) 
Stream&amp;lt;User&amp;gt; findAllByCustomQueryAndStream(); 

Stream&amp;lt;User&amp;gt; readAllByFirstnameNotNull(); 

@Query(&quot;select u from User u&quot;) 
Stream&amp;lt;User&amp;gt; streamAllPaged(Pageable pageable);
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;由于stream使用了底层的资源，在使用后必须关闭，你可以使用close手动关闭，也可以使用java7的try-with-resources 块。&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
try (Stream&amp;lt;User&amp;gt; stream = repository.findAllByCustomQueryAndStream()) {   
    stream.forEach(…); 
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;现在并不是所有的Spring Data模块都支持Stream。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;异步查询结果&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;仓库的查询方法可以异步执行，这意味着查询会提交到Spring TaskExecutor，并不会立即执行。&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
@Async 
Future&amp;lt;User&amp;gt; findByFirstname(String firstname);  

@Async 
CompletableFuture&amp;lt;User&amp;gt; findOneByFirstname(String firstname);  

@Async 
ListenableFuture&amp;lt;User&amp;gt; findOneByLastname(String lastname);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;第一个方法使用Future作为返回结果。&lt;/p&gt;
&lt;p&gt;第二个方法使用java8的CompletableFuture作为返回结果。&lt;/p&gt;
&lt;p&gt;第三个方法使用了Spring的ListenableFuture作为返回结果。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;生成仓库实例&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;每一个Spring Data模块都包含一个repositories元素指定Spring 扫描的包路径。&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Spring Data的xml配置方式&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:html;gutter:true;&quot;&gt;
&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt; 
&amp;lt;beans:beans xmlns:beans=&quot;http://www.springframework.org/schema/beans&quot; 
    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; 
    xmlns=&quot;http://www.springframework.org/schema/data/jpa&quot; 
    xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans     
    http://www.springframework.org/schema/beans/spring-beans.xsd     
    http://www.springframework.org/schema/data/jpa     
    http://www.springframework.org/schema/data/jpa/spring-jpa.xsd&quot;&amp;gt; 
    
    &amp;lt;repositories base-package=&quot;com.acme.repositories&quot; /&amp;gt; 
&amp;lt;/beans:beans&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在上面的例子中，Spring扫描com.acme.repositories和它所有子包中，所有继承了Repository和它子类的所有几口，并将它们构造成仓库。每一个接口被发现，spring都将注册指定的持久化技术并生成合适的代理处理查询方法。每一个bean都是通过接口的名字注册而成，所以UserRepository接口将会注册成userRepository。base-package参数可以使用正则表达式。&lt;/p&gt;
&lt;p&gt;使用JavaConfig注解的方式也可以配置包的扫描&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
@Configuration 
@EnableJpaRepositories(&quot;com.acme.repositories&quot;) 
class ApplicationConfiguration { 
    @Bean 
    EntityManagerFactory entityManagerFactory() { // … } 
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在这里，我们使用Jpa作为例子。&lt;/p&gt;
&lt;p&gt;Spring Data的Common模块就介绍到这里，欢迎大家在评论区多多交流。&lt;/p&gt;

</description>
<pubDate>Fri, 16 Mar 2018 07:26:00 +0000</pubDate>
<dc:creator>牛初九</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/boboooo/p/8582227.html</dc:identifier>
</item>
<item>
<title>微信小程序之生成图片分享 - GavinJay</title>
<link>http://www.cnblogs.com/gavinjay/p/8582137.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/gavinjay/p/8582137.html</guid>
<description>&lt;p data-anchor-id=&quot;0y8x&quot;&gt;通过社交软件分享的方式来进行营销&lt;a class=&quot;relatedlink&quot; href=&quot;http://www.wxapp-union.com/&quot; target=&quot;_blank&quot;&gt;小程序&lt;/a&gt;，是一个常用的运营途径。小程序本身支持直接将一个小程序的链接卡片分享至微信好友或微信群，然后别人就可以通过点击该卡片进入该小程序页面。但是小程序目前不支持直接分享到微信朋友圈，而对我们来说，微信朋友圈又是一个很重要的吸引别人关注的入口，所以，得想办法把这个资源利用起来。&lt;/p&gt;
&lt;p data-anchor-id=&quot;xvk2&quot;&gt;可能有的人已经知道，微信小程序支持通过扫描/长按识别二维码或小程序码图片的方式进入一个小程序首页或小程序中某个特定页面（如何生成这类常规二维码、小程序码，可参考《微信小程序之生成自定义参数小程序二维码》这篇文章），我们可以将二维码或小程序码分享到朋友圈去。&lt;/p&gt;
&lt;p data-anchor-id=&quot;hzwf&quot;&gt;不过，这种二维码看起来比较单调，不太感人！&lt;/p&gt;
&lt;p data-anchor-id=&quot;7anu&quot;&gt;为了提升吸引力，我们可以把这种用于分享出去的二维码图片做的尽量美观、有情景感一些，比如像腾讯出品的小程序《长城你造不造》里生成的这种分享图片：&lt;/p&gt;
&lt;p data-anchor-id=&quot;7anu&quot;&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1162161/201803/1162161-20180316151827552-1967678577.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p data-anchor-id=&quot;kcor&quot;&gt;这种配有图文的图片，就比单单给一个硬邦邦的二维码要吸引人得多啦！你是不是也想试试做这种分享图呢？我们今天就来讨论一下如何实现这样的分享图。&lt;/p&gt;
&lt;p data-anchor-id=&quot;jejm&quot;&gt;实现这种合并图文的方案，选择无外乎就是在前端做还是在后端做。如果在后端做的话，可选的技术方案还是挺多的，各种后端语言都有自己的绘图工具库，比如nodejs里可以用node-canvas来做，或者也可以通过调用一些图片编辑软件（如ImageMagic）来实现。&lt;/p&gt;
&lt;p data-anchor-id=&quot;pt5t&quot;&gt;而在前端做的话，由于微信小程序也提供了一系列基于canvas的绘图相关API，所以绘制这样的图片还是比较简单易上手的，且调试起来也比较方便直观。所以，决定先在小程序前端这边来实现了。&lt;/p&gt;
&lt;p data-anchor-id=&quot;iq7z&quot;&gt;添加画布&lt;/p&gt;
&lt;p data-anchor-id=&quot;ay7b&quot;&gt;首先，在小程序里进行绘图操作需要用到组件，那我们就先在我们的wxml代码中放入如下的：&lt;/p&gt;

&lt;ol class=&quot;linenums&quot;&gt;&lt;li class=&quot;L0&quot;&gt;&lt;code&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;canvas&amp;lt; span=&quot;&quot;&amp;gt; &lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;atn&quot;&gt;canvas-id&lt;span class=&quot;pun&quot;&gt;=&lt;span class=&quot;atv&quot;&gt;&quot;shareCanvas&quot; &lt;span class=&quot;pln&quot;&gt;&lt;span class=&quot;atn&quot;&gt;style&lt;span class=&quot;pun&quot;&gt;=&lt;span class=&quot;atv&quot;&gt;&quot;&lt;span class=&quot;pln&quot;&gt;width&lt;span class=&quot;pun&quot;&gt;:&lt;span class=&quot;lit&quot;&gt;600px&lt;span class=&quot;pun&quot;&gt;;&lt;span class=&quot;pln&quot;&gt;height&lt;span class=&quot;pun&quot;&gt;:&lt;span class=&quot;lit&quot;&gt;900px&lt;span class=&quot;atv&quot;&gt;&quot;&lt;span class=&quot;tag&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p data-anchor-id=&quot;89mc&quot;&gt;这样一来我们就有了一个600x900的绘图区域。然后，我们要开始写JS代码在这张画布上进行绘图操作。&lt;/p&gt;

&lt;h3 id=&quot;步骤1绘制背景图&quot; data-anchor-id=&quot;b625&quot;&gt;步骤1：绘制背景图&lt;/h3&gt;
&lt;p data-anchor-id=&quot;5ohi&quot;&gt;通过观察《长城你造不造》合成的那张分享图，我们可以分析得出它的组成主要有以下3个部分：一张大的背景图，一段动态的文字（xxxx 喊你“一起来为修长城献砖”），以及一个小程序码图片。&lt;/p&gt;
&lt;p data-anchor-id=&quot;ph9b&quot;&gt;那么我们就先找一张图片来当做背景图，将它画到画布上去，代码大致如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;const&lt;/span&gt; wxGetImageInfo =&lt;span&gt; promisify(wx.getImageInfo)
wxGetImageInfo({
    src: &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;http://some-domain/bg.png&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
}).then(res &lt;/span&gt;=&amp;gt;&lt;span&gt; {
    &lt;/span&gt;&lt;span&gt;const&lt;/span&gt; ctx = wx.createCanvasContext(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;shareCanvas&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
    ctx.drawImage(res.path, &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;600&lt;/span&gt;, &lt;span&gt;900&lt;/span&gt;&lt;span&gt;)
    ctx.draw()
})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p data-anchor-id=&quot;k8fp&quot;&gt;在这段代码中，我们通过使用wx.getImageInfo这个API来下载一个网络图片到本地（并可获取该图片的尺寸等其他信息），然后调用ctx.drawImage方法将图片绘制到画布上，填满画布。&lt;/p&gt;

&lt;h3 id=&quot;步骤2绘制文字&quot; data-anchor-id=&quot;3cmq&quot;&gt;步骤2：绘制文字&lt;/h3&gt;
&lt;p data-anchor-id=&quot;jcti&quot;&gt;接着，让我们来在画布上继续绘制一段文字，一般这种宣传用的分享图，少不了文字描述，而且可能是根据场景内容不同而产生的动态信息，比如可能是一篇文章的作者、文章的标题和内容。&lt;/p&gt;
&lt;p data-anchor-id=&quot;zzmu&quot;&gt;我们尝试下在画布上添加一段居中显示的文字：“作者：一斤代码”，还是基于前面的那段代码接着写：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
&lt;span&gt;const&lt;/span&gt; wxGetImageInfo =&lt;span&gt; promisify(wx.getImageInfo)
wxGetImageInfo({
    src: &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;http://some-domain/bg.png&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
}).then(res &lt;/span&gt;=&amp;gt;&lt;span&gt; {
    &lt;/span&gt;&lt;span&gt;const&lt;/span&gt; ctx = wx.createCanvasContext(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;shareCanvas&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 底图&lt;/span&gt;
    ctx.drawImage(res.path, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;600&lt;/span&gt;, &lt;span&gt;900&lt;/span&gt;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 作者名称&lt;/span&gt;
    ctx.setTextAlign(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;center&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 文字居中&lt;/span&gt;
    ctx.setFillStyle(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;#000000&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 文字颜色：黑色&lt;/span&gt;
    ctx.setFontSize(&lt;span&gt;22&lt;/span&gt;)         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 文字字号：22px&lt;/span&gt;
    ctx.fillText(“作者：一斤代码”, &lt;span&gt;600&lt;/span&gt; / &lt;span&gt;2&lt;/span&gt;, &lt;span&gt;500&lt;/span&gt;&lt;span&gt;)
    ctx.stroke()
    ctx.draw()
})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p data-anchor-id=&quot;kqxu&quot;&gt;由于在canvas上绘制文字不会自动折行，如果要画一段比较长的文本，可以考虑限制一行的字数，将长文本拆分成几行来画。&lt;/p&gt;

&lt;h3 id=&quot;步骤3绘制小程序码&quot; data-anchor-id=&quot;d1sh&quot;&gt;步骤3：绘制小程序码&lt;/h3&gt;
&lt;p data-anchor-id=&quot;57lx&quot;&gt;最后，我们在画布最后添加一个小程序码，可以是静态的小程序码，也可以是比如为每一篇文章动态生成的小程序码（参考《微信小程序之生成自定义参数小程序二维码》这篇文章），反正这个小程序码也就是一张图片，所以绘制方法跟绘制底图差不多。最后的代码类似如此：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;46&quot;&gt;
&lt;pre&gt;
&lt;span&gt;const&lt;/span&gt; wxGetImageInfo =&lt;span&gt; promisify(wx.getImageInfo)
Promise.all([
    wxGetImageInfo({
        src: &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;http://some-domain.com/background.png&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
    }),
    wxGetImageInfo({
        src: &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;http://some-domain.com/api/generate/qrcode&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
    })
]).then(res &lt;/span&gt;=&amp;gt;&lt;span&gt; {
    &lt;/span&gt;&lt;span&gt;const&lt;/span&gt; ctx = wx.createCanvasContext(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;shareCanvas&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 底图&lt;/span&gt;
    ctx.drawImage(res[&lt;span&gt;0&lt;/span&gt;].path, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;, &lt;span&gt;600&lt;/span&gt;, &lt;span&gt;900&lt;/span&gt;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 作者名称&lt;/span&gt;
    ctx.setTextAlign(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;center&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)    &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 文字居中&lt;/span&gt;
    ctx.setFillStyle(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;#000000&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 文字颜色：黑色&lt;/span&gt;
    ctx.setFontSize(&lt;span&gt;22&lt;/span&gt;)         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 文字字号：22px&lt;/span&gt;
    ctx.fillText(“作者：一斤代码”, &lt;span&gt;600&lt;/span&gt; / &lt;span&gt;2&lt;/span&gt;, &lt;span&gt;500&lt;/span&gt;&lt;span&gt;)
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 小程序码&lt;/span&gt;
    &lt;span&gt;const&lt;/span&gt; qrImgSize = &lt;span&gt;180&lt;/span&gt;&lt;span&gt;
    ctx.drawImage(res[&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;].path, (&lt;span&gt;600&lt;/span&gt; - qrImgSize) / &lt;span&gt;2&lt;/span&gt;, &lt;span&gt;530&lt;/span&gt;&lt;span&gt;, qrImgSize, qrImgSize)
    ctx.stroke()
    ctx.draw()
})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p data-anchor-id=&quot;ptwf&quot;&gt;这样，差不多我们的分享图就生成好了。&lt;/p&gt;
&lt;p data-anchor-id=&quot;co81&quot;&gt;保存到系统相册&lt;/p&gt;
&lt;p data-anchor-id=&quot;wqwi&quot;&gt;接着，我们要把它保存进用户的系统相册中去，实现这个功能，我们主要靠wx.canvasToTempFilePath和wx.saveImageToPhotosAlbum这两个API。&lt;/p&gt;
&lt;p data-anchor-id=&quot;7xx0&quot;&gt;主要的流程就是先通过wx.canvasToTempFilePath将上绘制的图像生成临时文件的形式，然后再通过wx.saveImageToPhotosAlbum进行保存到系统相册的操作。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;const&lt;/span&gt; wxCanvasToTempFilePath =&lt;span&gt; promisify(wx.canvasToTempFilePath)
&lt;/span&gt;&lt;span&gt;const&lt;/span&gt; wxSaveImageToPhotosAlbum =&lt;span&gt; promisify(wx.saveImageToPhotosAlbum)
wxCanvasToTempFilePath({
    canvasId: &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;shareCanvas&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
}, &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;).then(res =&amp;gt;&lt;span&gt; {
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; wxSaveImageToPhotosAlbum({
        filePath: res.tempFilePath
    })
}).then(res &lt;/span&gt;=&amp;gt;&lt;span&gt; {
    wx.showToast({
        title: &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;已保存到相册&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
    })
})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;以上就是在微信小程序里合成一个朋友圈分享用的小程序推广图片的简要流程了，代码仅供参考，实战可自由发挥：）&lt;/p&gt;
</description>
<pubDate>Fri, 16 Mar 2018 07:21:00 +0000</pubDate>
<dc:creator>GavinJay</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/gavinjay/p/8582137.html</dc:identifier>
</item>
<item>
<title>Android开发——设置界面的创建 - Stars-one</title>
<link>http://www.cnblogs.com/kexing/p/8548648.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/kexing/p/8548648.html</guid>
<description>&lt;h2&gt;前言：&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;最近忙着搞项目，难得有时间，便来整理搞项目中学习到的知识&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;使用之前，先介绍一下android这种的五种数据储存方式，分别为文件储存，SharePrefence，SQL，使用ContentProvider存储数据，网络存储数据，其中，SharePrefence是一个轻量的储存，主要是用来储存app的相关设置，设置界面就是使用的这种储存方式&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;想要深入了解的请看下面的参考博文&lt;/span&gt;&lt;/p&gt;
&lt;h3 class=&quot;t&quot;&gt;&lt;a href=&quot;http://www.baidu.com/link?url=ns6IAWD9aiUA-im53oIE0Wte7bGWvvuQPfA8JeBteXAT2VfJkIgTsENUAunKHAHSPcsfQqSaOD9x_ieCESsBE_&amp;amp;wd=&amp;amp;eqid=d8089c9400036aa7000000065aab621f&quot; target=&quot;_blank&quot; data-click=&quot;{ 'F':'778317EA', 'F1':'9D73F1C4', 'F2':'4CA6DE6B', 'F3':'54E5343F', 'T':'1521181215', 'y':'AE5EFF5F' }&quot;&gt;&lt;em&gt;Android&lt;/em&gt; &lt;em&gt;数据存储&lt;/em&gt;五种方式使用与总结 - CSDN博客&lt;/a&gt;&lt;/h3&gt;
&lt;h2&gt;使用：&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;按照以往，我们创建界面的时候，是用的xml布局+activity文件，设置界面也是与之类似&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;&lt;span&gt;第一步：创建xml文件夹&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;切换到Project模式，新建一个xml文件夹，用来放设置界面的布局文件&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1210268/201803/1210268-20180316142507939-1175337135.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;第二步：编写布局文件&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;在xml文件夹中新建一个xml文件&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1210268/201803/1210268-20180316142737390-198361919.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;命名的话以pref_xxx形式，官方的命名规范就是以pref为前缀命名的&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;打开xml文件，可以发现与我们之前写布局文件是一样的，有design模式和text模式，这里我们可以看到有七种可以选择，我只讲解EditTextPreference和SwitichPreference&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;需要详解的可以参考这一篇&lt;a href=&quot;http://www.baidu.com/link?url=SlXVM-YehxwWX-zLJrZSUARtMPibW2N9nKau7tKfKq2Q5b3Hs_zRkGshgjrd3vfe&amp;amp;wd=&amp;amp;eqid=9c2682000003d50e000000065aab64c9&quot; target=&quot;_blank&quot; data-click=&quot;{ 'F':'778317EA', 'F1':'9D73F1E4', 'F2':'4CA6DE6B', 'F3':'54E5242F', 'T':'1521181897', 'y':'5DAFFFE7' }&quot;&gt;&lt;em&gt;Android&lt;/em&gt;:详解如何创建Google风格的&lt;em&gt;SettingsActivity&lt;/em&gt; - 简书&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1210268/201803/1210268-20180316142648694-1554058363.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1210268/201803/1210268-20180316143245901-247080189.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;结合上面的两张图片，我讲解一下相关的属性&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;defaultValue是默认值，&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;key类似于我们写layout文件中定义的id&lt;/span&gt;，我们可以通过id找到控件，同样的，在这里，我们也可以通过key可以找到控件&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;summary就是开通会员下面的那一行字&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;title就是标题，也就是开通会员&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;EditViewPreference 这个是封装了EditView的一个控件，当我们点击的时候，会弹出一个对话框让我们输入数据，当我们输入数据之后，数据就会保存在SharePreference之中&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;同理，switch是一个开关，点击的时候会将true或者false保存在SharePreference中&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;如果我们只是想弄一个选项，点击会打开一个浏览器，上面的控件均不合适，我们怎么办呢？不知道你注意到没有，最外层使用的是PreferenceScreen&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1210268/201803/1210268-20180316144033355-1565833672.png&quot; alt=&quot;&quot;/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1210268/201803/1210268-20180316144049880-123120567.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;我们可以像上图之中这样使用PreferenceScreen，之后在java代码之中可以为它设置监听器，跳转到浏览器&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;key可以定义在sting.xml中，当然，也可以直接设置&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;第三步：创建Fragment&lt;/h3&gt;
&lt;div readability=&quot;10&quot;&gt;
&lt;p&gt;&lt;span&gt;对于Android 3.0以下的应用，我们需要在 Activity 中显示设置，应当扩展 PreferenceActivity 类。这是传统 Activity 类的扩展，该类根据 Preference 对象的层次结构显示设置列表。当用户进行更改时，PreferenceActivity 会自动保留与每个 Preference 相关的设置。对 Android 3.0 及 更高版本系统的应用，则应改为使用 PreferenceFragment。与仅使用上述 Activity 相比，无论在构建何种 Activity，Fragment都可为应用提供一个更加灵活的体系结构。&lt;/span&gt;&lt;/p&gt;
&lt;span&gt;现在来说，最低版本都是android4.0了，我们就直接抛弃以前的方法，使用Fragment即可&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;br/&gt;新建一个Fragment&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1210268/201803/1210268-20180316144814079-1104813480.png&quot; alt=&quot;&quot; width=&quot;846&quot; height=&quot;606&quot;/&gt;&lt;/div&gt;
&lt;div readability=&quot;35&quot;&gt;
&lt;p&gt;由于我们这个是设置界面，所以不需要想正常的fragment那样使用，所以将三个选项都取消&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1210268/201803/1210268-20180316144921905-13862123.png&quot; alt=&quot;&quot; width=&quot;885&quot; height=&quot;752&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;首先我们要修改fragment，使其继承PreferenceFragment&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1210268/201803/1210268-20180316145044463-1527520055.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;之后，在onCreate方法中添加一行代码，使用addPreferenceFromResource方法绑定之前的设置界面的xml&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1210268/201803/1210268-20180316145159555-603209873.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;如果之前有使用过fragment的，应该知道我们只能在onViewCreated方法中来找控件&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;这里通过key来找到设置界面的控件&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;调用静态方法getDefaultSharedPreference来获得sharePreference，之后通过get方法来获取之前保存的数值&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;这里需要提及一下，原本的SharedPreference中可以保存int boolean String等类型的数据，但是，如果像我们这里使用设置来保存app设置的相关数据，sharedPreference只有两种数据，一种是String，另外一种则是boolean，如果想要int，需要将获得的String转换为int类型&lt;/span&gt;&lt;/p&gt;


&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1210268/201803/1210268-20180316145323749-663679079.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;找到控件之后，我们可以调用相关的方法为其设置监听器来实现相关的功能&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;第四步：动态添加在framelayout中&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;我们需要新建一个activity文件，其布局需要一个framelayout&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1210268/201803/1210268-20180316150313260-1535721070.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;之后，我们通过Fragment的方法动态添加设置fragment&lt;/span&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;span&gt;FragmentManager fragmentManager = &lt;span&gt;getFragmentManager();&lt;br/&gt;&lt;span&gt;FragmentTransaction transaction = fragmentManager.&lt;span&gt;beginTransaction();&lt;br/&gt;transaction.&lt;span&gt;add(&lt;span&gt;R.id.&lt;span&gt;setting_framlayout,&lt;span&gt;settingFragment).&lt;span&gt;commit();&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;学过fragment的话，应该知道，我们使用Fragment的时候，有两个包给我们选择，一个是v4包，另外一个则是app包，使用v4包的那个fragment可以获得更好的兼容性（低版本）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;所以这里需要注意，使用的fragment是app包的Fragment，&lt;/span&gt;刚开始我使用的v4包，一直出错，查找原因之后，发现了，之前settingFragment继承的是PreferenceFragment，而&lt;span&gt;PreferenceFragment&lt;/span&gt;继承的则是app包下的Fragment&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;补充：&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;通过setEnable方法（对象为控件）可以禁用控件（如果设置密码锁的话可以使用此方法）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;可以将Preference转型为相关的对象，如Preference可以转为EditText&lt;span&gt;Preference&lt;/span&gt;，或者可以转为Switch&lt;span&gt;Preference&lt;/span&gt;，之后就可以调用相关的对象的方法（与原来的在xml定义的控件相同的使用方法）&lt;/span&gt;&lt;/p&gt;

</description>
<pubDate>Fri, 16 Mar 2018 07:17:00 +0000</pubDate>
<dc:creator>Stars-one</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/kexing/p/8548648.html</dc:identifier>
</item>
<item>
<title>[解决]Linux Tomcat启动慢--Creation of SecureRandom instance for session ID generation using [SHA1PRNG] took [236,325] milliseconds - 乐佳Jcode</title>
<link>http://www.cnblogs.com/zhangyuejia/p/8575080.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/zhangyuejia/p/8575080.html</guid>
<description>&lt;p&gt;&lt;span&gt;&lt;strong&gt;一、背景&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;今天部署项目到tomcat，执行./startup.sh命令之后，访问项目迟迟加载不出来，查看日志又没报错（其实是我粗心了，当时tomcat日志还没打印完），一开始怀疑是阿里云主机出现问题，访问ip:80发现nginx运行正常。在我百思不得其解时，项目访问正常了，查看启动日志，发现如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
15-Mar-2018 16:41:02.302 WARNING [main] org.apache.catalina.util.SessionIdGeneratorBase.createSecureRandom Creation of SecureRandom instance for session ID generation using [SHA1PRNG] took [236,325] milliseconds.
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可以看出实例化SecureRandom花了接近4分钟！&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;二、调查&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;网上搜索到的信息如下：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;**********************************************************************************************&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Tomcat 7/8/9 都使用 org.apache.catalina.util.SessionIdGeneratorBase.createSecureRandom 类产生安全随机类 SecureRandom 的实例作为会话 ID。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Tomcat 使用 SHA1PRNG 算法是基于 SHA-1 算法实现且保密性较强的伪随机数生成器。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;在 SHA1PRNG 中，有一个种子产生器，它根据配置执行各种操作。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Linux 中的随机数可以从两个特殊的文件中产生，一个是 /dev/urandom，另外一个是 /dev/random。他们产生随机数的原理是利用当前系统的熵池来计算出固定一定数量的随机比特，然后将这些比特作为字节流返回。熵池就是当前系统的环境噪音，熵指的是一个系统的混乱程度，系统噪音可以通过很多参数来评估，如内存的使用，文件的使用量，不同类型的进程数量等等。如果当前环境噪音变化的不是很剧烈或者当前环境噪音很小，比如刚开机的时候，而当前需要大量的随机比特，这时产生的随机数的随机效果就不是很好了。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;这就是为什么会有 /dev/urandom 和 /dev/random 这两种不同的文件，后者在不能产生新的随机数时会阻塞程序，而前者不会（ublock），当然产生的随机数效果就不太好了，这对加密解密这样的应用来说就不是一种很好的选择。/dev/random 会阻塞当前的程序，直到根据熵池产生新的随机字节之后才返回，所以使用 /dev/random 比使用 /dev/urandom 产生大量随机数的速度要慢。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;SecureRandom generateSeed  使用 /dev/random 生成种子。但是 /dev/random 是一个阻塞数字生成器，如果它没有足够的随机数据提供，它就一直等，这迫使 JVM 等待。键盘和鼠标输入以及磁盘活动可以产生所需的随机性或熵。但在一个服务器缺乏这样的活动，可能会出现问题。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;**********************************************************************************************&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;说得很清楚，就是随机数生成问题。上述观点在jdk中SecureRandom类的注释得到了印证：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
 * Note: Depending on the implementation, the {@code generateSeed} and
 * {@code nextBytes} methods may block as entropy is being gathered,
 * for example, if they need to read from /dev/random on various Unix-like
 * operating systems.
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;三、解决&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;方案有3个&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;方案1：通过rng-tools自动补充熵池（推荐）&lt;/strong&gt;&lt;a href=&quot;http://blog.csdn.net/tiantao2012/article/details/78792046&quot;&gt;&lt;br/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre readability=&quot;5&quot;&gt;
yum install rng-&lt;span&gt;tools      #安装rngd熵服务

systemctl start rngd       #启动服务&lt;br/&gt;&lt;/span&gt;&lt;span&gt;
cp &lt;/span&gt;/usr/lib/systemd/system/rngd.service /etc/systemd/&lt;span&gt;system

&lt;/span&gt;cd /etc/systemd/system/&lt;p&gt;vim rngd.service &lt;br/&gt;将 &lt;code class=&quot;hljs crystal&quot; data-language=&quot;&quot;&gt;ExecStart=&lt;span class=&quot;hljs-regexp&quot;&gt;/sbin/rngd -f 改为 &lt;/span&gt;&lt;/code&gt;&lt;code class=&quot;hljs crystal&quot; data-language=&quot;&quot;&gt;ExecStart=&lt;span class=&quot;hljs-regexp&quot;&gt;/sbin/rngd -f -r /dev/urandom&lt;/span&gt;&lt;/code&gt;
&lt;/p&gt;&lt;/pre&gt;
&lt;pre readability=&quot;4&quot;&gt;
&lt;span&gt;systemctl daemon&lt;/span&gt;-&lt;span readability=&quot;2&quot;&gt;reload   #重新载入服务 &lt;p&gt;systemctl restart rngd    #重启服务&lt;/p&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;重启tomcat，查看日志，启动时间1271 ms&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
15-Mar-2018 17:28:24.092 INFO [main] org.apache.catalina.startup.Catalina.start Server startup &lt;span&gt;in&lt;/span&gt; 1271 ms
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;方案2：修改jvm参数&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code data-language=&quot;&quot;&gt;通过修改JRE中的java.security文件securerandom.source=file:/dev/urandom&lt;/code&gt;&lt;span&gt;&lt;code data-language=&quot;&quot;&gt;&lt;br/&gt;&lt;/code&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;&lt;span class=&quot;hljs-regexp&quot;&gt;重启tomcat，查看日志，启动时间1271 ms&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
15-Mar-2018 17:22:27.363 INFO [main] org.apache.catalina.startup.Catalina.start Server startup in 84777 ms
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可见启动速度比原来快了一半多，但还是不理想&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;方案3：修改tomcat参数&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;通过修改Tomcat启动文件-Djava.security.egd=&lt;span class=&quot;hljs-keyword&quot;&gt;file:&lt;span class=&quot;hljs-regexp&quot;&gt;/dev/urandom（没尝试过）&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;四、小插曲&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;总算解决，但是这个问题之前没有的啊，为什么呢？&lt;/p&gt;
&lt;p&gt;回想一下，这是我修改代码之后才出现的。所以我将一个继承自HttpServlet的类中&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;long&lt;/span&gt; serialVersionUID = 1L;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;改为&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;final&lt;/span&gt; &lt;span&gt;long&lt;/span&gt; serialVersionUID = -9135576688701595777L;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;重启tomcat，查看日志&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:javascript;gutter:true;&quot;&gt;
15-Mar-2018 16:07:02.781 INFO [main] org.apache.catalina.startup.Catalina.start Server startup in 1267 ms
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　tomcat恢复了往日的神速！可是serialVersionUID这个对象的序列化值为什么会影响导致这个问题呢，在一篇《&lt;a href=&quot;http://www.mkyong.com/java-best-practices/understand-the-serialversionuid/&quot; target=&quot;_blank&quot;&gt;弄懂serialVersionUID&lt;/a&gt;》文献中说到&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1278358/201803/1278358-20180316144627511-80812499.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;使用默认序列号jvm会使用自身的算法（&lt;a href=&quot;https://docs.oracle.com/javase/6/docs/platform/serialization/spec/class.html#4100&quot; target=&quot;_blank&quot;&gt;算法介绍&lt;/a&gt;），其中涉及到了&lt;strong&gt;SHA1&lt;/strong&gt;，就我的理解用到了熵值算法，熵池不够所以实例化慢，实证的话要再去看jvm规范，能力有限，以后再爬坑。&lt;/p&gt;
&lt;p&gt;以上！&lt;/p&gt;

</description>
<pubDate>Fri, 16 Mar 2018 07:16:00 +0000</pubDate>
<dc:creator>乐佳Jcode</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/zhangyuejia/p/8575080.html</dc:identifier>
</item>
<item>
<title>Spring整合Shiro并扩展使用EL表达式 - Elim的博客</title>
<link>http://www.cnblogs.com/elim-zhang/p/8581427.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/elim-zhang/p/8581427.html</guid>
<description>&lt;p&gt;Shiro是一个轻量级的权限控制框架，应用非常广泛。本文的重点是介绍Spring整合Shiro，并通过扩展使用Spring的EL表达式，&lt;a href=&quot;mailto:使@requiresroles等支持动态的参数&quot;&gt;使@RequiresRoles等支持动态的参数&lt;/a&gt;。对Shiro的介绍则不在本文的讨论范围之内，读者如果有对shiro不是很了解的，可以通过其&lt;a href=&quot;http://shiro.apache.org/index.html&quot;&gt;官方网站&lt;/a&gt;了解相应的信息。infoq上也有一篇文章对shiro介绍比较全面的，也是官方推荐的，其地址是&lt;a href=&quot;https://www.infoq.com/articles/apache-shiro&quot; class=&quot;uri&quot;&gt;https://www.infoq.com/articles/apache-shiro&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&quot;shiro整合spring&quot;&gt;Shiro整合Spring&lt;/h2&gt;
&lt;p&gt;首先需要在你的工程中加入shiro-spring-xxx.jar，如果是使用Maven管理你的工程，则可以在你的依赖中加入以下依赖，笔者这里是选择的当前最新的1.4.0版本。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode xml&quot;&gt;
&lt;code class=&quot;sourceCode xml&quot;&gt;&lt;span class=&quot;kw&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.apache.shiro&lt;span class=&quot;kw&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;shiro-spring&lt;span class=&quot;kw&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;1.4.0&lt;span class=&quot;kw&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;接下来需要在你的web.xml中定义一个shiroFilter，应用它来拦截所有的需要权限控制的请求，通常是配置为&lt;code&gt;/*&lt;/code&gt;。另外该Filter需要加入最前面，以确保请求进来后最先通过shiro的权限控制。这里的Filter对应的class配置的是DelegatingFilterProxy，这是Spring提供的一个Filter的代理，可以使用Spring bean容器中的一个bean来作为当前的Filter实例，对应的bean就会取&lt;code&gt;filter-name&lt;/code&gt;对应的那个bean。所以下面的配置会到bean容器中寻找一个名为shiroFilter的bean。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode xml&quot;&gt;
&lt;code class=&quot;sourceCode xml&quot;&gt;&lt;span class=&quot;kw&quot;&gt;&amp;lt;filter&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;filter-name&amp;gt;&lt;/span&gt;shiroFilter&lt;span class=&quot;kw&quot;&gt;&amp;lt;/filter-name&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;filter-class&amp;gt;&lt;/span&gt;org.springframework.web.filter.DelegatingFilterProxy&lt;span class=&quot;kw&quot;&gt;&amp;lt;/filter-class&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;init-param&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;param-name&amp;gt;&lt;/span&gt;targetFilterLifecycle&lt;span class=&quot;kw&quot;&gt;&amp;lt;/param-name&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;param-value&amp;gt;&lt;/span&gt;true&lt;span class=&quot;kw&quot;&gt;&amp;lt;/param-value&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/init-param&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/filter&amp;gt;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;&amp;lt;filter-mapping&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;filter-name&amp;gt;&lt;/span&gt;shiroFilter&lt;span class=&quot;kw&quot;&gt;&amp;lt;/filter-name&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;url-pattern&amp;gt;&lt;/span&gt;/*&lt;span class=&quot;kw&quot;&gt;&amp;lt;/url-pattern&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/filter-mapping&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;独立使用Shiro时通常会定义一个&lt;code&gt;org.apache.shiro.web.servlet.ShiroFilter&lt;/code&gt;来做类似的事。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;接下来就是在bean容器中定义我们的shiroFilter了。如下我们定义了一个ShiroFilterFactoryBean，其会产生一个AbstractShiroFilter类型的bean。通过ShiroFilterFactoryBean我们可以指定一个SecurityManager，这里使用的DefaultWebSecurityManager需要指定一个Realm，如果需要指定多个Realm则通过realms指定。这里简单起见就直接使用基于文本定义的TextConfigurationRealm。通过loginUrl指定登录地址、successUrl指定登录成功后需要跳转的地址，unauthorizedUrl指定权限不足时的提示页面。filterChainDefinitions则定义URL与需要使用的Filter之间的关系，等号右边的是filter的别名，默认的别名都定义在&lt;code&gt;org.apache.shiro.web.filter.mgt.DefaultFilter&lt;/code&gt;这个枚举类中。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;17&quot;&gt;
&lt;pre class=&quot;sourceCode xml&quot;&gt;
&lt;code class=&quot;sourceCode xml&quot;&gt;&lt;span class=&quot;kw&quot;&gt;&amp;lt;bean&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; id=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;shiroFilter&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; class=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;org.apache.shiro.spring.web.ShiroFilterFactoryBean&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;property&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;securityManager&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; ref=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;securityManager&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;property&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;loginUrl&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; value=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;/login.jsp&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;property&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;successUrl&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; value=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;/home.jsp&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;property&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;unauthorizedUrl&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; value=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;/unauthorized.jsp&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;property&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;filterChainDefinitions&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;value&amp;gt;&lt;/span&gt;
            /admin/** = authc, roles[admin]
            /logout = logout
            # 其它地址都要求用户已经登录了
            /** = authc,logger
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;/value&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/property&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/bean&amp;gt;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;&amp;lt;bean&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; id=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;securityManager&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; class=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;org.apache.shiro.web.mgt.DefaultWebSecurityManager&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;property&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;realm&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; ref=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;realm&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/bean&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;bean&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; id=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;lifecycleBeanPostProcessor&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; class=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;org.apache.shiro.spring.LifecycleBeanPostProcessor&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;

&lt;span class=&quot;co&quot;&gt;&amp;lt;!-- 简单起见，这里就使用基于文本的Realm实现 --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;bean&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; id=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;realm&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; class=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;org.apache.shiro.realm.text.TextConfigurationRealm&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;property&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;userDefinitions&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;value&amp;gt;&lt;/span&gt;
            user1=pass1,role1,role2
            user2=pass2,role2,role3
            admin=admin,admin
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;/value&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/property&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/bean&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果需要在filterChainDefinitions定义中使用自定义的Filter，则可以通过ShiroFilterFactoryBean的filters指定自定义的Filter及其别名映射关系。比如下面这样我们新增了一个别名为logger的Filter，并在filterChainDefinitions中指定了&lt;code&gt;/**&lt;/code&gt;需要应用别名为logger的Filter。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;12&quot;&gt;
&lt;pre class=&quot;sourceCode xml&quot;&gt;
&lt;code class=&quot;sourceCode xml&quot;&gt;&lt;span class=&quot;kw&quot;&gt;&amp;lt;bean&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; id=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;shiroFilter&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; class=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;org.apache.shiro.spring.web.ShiroFilterFactoryBean&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;property&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;securityManager&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; ref=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;securityManager&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;property&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;loginUrl&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; value=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;/login.jsp&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;property&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;successUrl&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; value=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;/home.jsp&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;property&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;unauthorizedUrl&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; value=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;/unauthorized.jsp&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;property&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;filters&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;util:map&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;entry&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; key=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;logger&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;kw&quot;&gt;&amp;lt;bean&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; class=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;com.elim.chat.shiro.filter.LoggerFilter&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;/entry&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;/util:map&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/property&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;property&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;filterChainDefinitions&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;value&amp;gt;&lt;/span&gt;
            /admin/** = authc, roles[admin]
            /logout = logout
            # 其它地址都要求用户已经登录了
            /** = authc,logger
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;/value&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/property&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/bean&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;其实我们需要应用的Filter别名定义也可以不直接通过ShiroFilterFactoryBean的setFilters()来指定，而是直接在对应的bean容器中定义对应的Filter对应的bean。因为默认情况下，ShiroFilterFactoryBean会把bean容器中的所有的Filter类型的bean以其id为别名注册到filters中。所以上面的定义等价于下面这样。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;12&quot;&gt;
&lt;pre class=&quot;sourceCode xml&quot;&gt;
&lt;code class=&quot;sourceCode xml&quot;&gt;&lt;span class=&quot;kw&quot;&gt;&amp;lt;bean&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; id=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;shiroFilter&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; class=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;org.apache.shiro.spring.web.ShiroFilterFactoryBean&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;property&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;securityManager&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; ref=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;securityManager&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;property&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;loginUrl&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; value=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;/login.jsp&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;property&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;successUrl&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; value=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;/home.jsp&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;property&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;unauthorizedUrl&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; value=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;/unauthorized.jsp&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;property&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;filterChainDefinitions&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;value&amp;gt;&lt;/span&gt;
            /admin/** = authc, roles[admin]
            /logout = logout
            # 其它地址都要求用户已经登录了
            /** = authc,logger
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;/value&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/property&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/bean&amp;gt;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;&amp;lt;bean&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; id=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;logger&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; class=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;com.elim.chat.shiro.filter.LoggerFilter&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;经过以上几步，Shiro和Spring的整合就完成了，这个时候我们请求工程的任意路径都会要求我们登录，且会自动跳转到&lt;code&gt;loginUrl&lt;/code&gt;指定的路径让我们输入用户名/密码登录。这个时候我们应该提供一个表单，通过username获得用户名，通过password获得密码，然后提交登录请求的时候&lt;span&gt;请求需要提交到&lt;code&gt;loginUrl&lt;/code&gt;指定的地址，但是请求方式需要变为POST&lt;/span&gt;。登录时使用的用户名/密码是我们在TextConfigurationRealm中定义的用户名/密码，基于我们上面的配置则可以使用user1/pass1、admin/admin等。登录成功后就会跳转到&lt;code&gt;successUrl&lt;/code&gt;参数指定的地址了。如果我们是使用user1/pass1登录的，则我们还可以试着访问一下&lt;code&gt;/admin/index&lt;/code&gt;，这个时候会因为权限不足跳转到&lt;code&gt;unauthorized.jsp&lt;/code&gt;。&lt;/p&gt;
&lt;h2 id=&quot;启用基于注解的支持&quot;&gt;启用基于注解的支持&lt;/h2&gt;
&lt;p&gt;基本的整合需要我们把URL需要应用的权限控制都定义在ShiroFilterFactoryBean的filterChainDefinitions中。这有时候会没那么灵活。Shiro为我们提供了整合Spring后可以使用的注解，它允许我们在需要进行权限控制的Class或Method上加上对应的注解以定义访问Class或Method需要的权限，&lt;span&gt;如果是定义中Class上的，则表示调用该Class中所有的方法都需要对应的权限（注意需要是外部调用，这是动态代理的局限）&lt;/span&gt;。要使用这些注解我们需要在Spring的bean容器中添加下面两个bean定义，这样才能在运行时根据注解定义来判断用户是否拥有对应的权限。这是通过Spring的AOP机制来实现的，关于Spring Aop如果有不是特别了解的，可以参考笔者写在iteye的&lt;a href=&quot;http://www.iteye.com/blogs/subjects/springaop&quot;&gt;《Spring Aop介绍专栏》&lt;/a&gt;。下面的两个bean定义，&lt;code&gt;AuthorizationAttributeSourceAdvisor&lt;/code&gt;是定义了一个Advisor，其会基于Shiro提供的注解配置的方法进行拦截，校验权限。&lt;code&gt;DefaultAdvisorAutoProxyCreator&lt;/code&gt;则是提供了为标注有Shiro提供的权限控制注解的Class创建代理对象，并在拦截到目标方法调用时应用&lt;code&gt;AuthorizationAttributeSourceAdvisor&lt;/code&gt;的功能。当拦截到了用户的一个请求，而该用户没有对应方法或类上标注的权限时，将抛出&lt;code&gt;org.apache.shiro.authz.AuthorizationException&lt;/code&gt;异常。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode xml&quot;&gt;
&lt;code class=&quot;sourceCode xml&quot;&gt;&lt;span class=&quot;kw&quot;&gt;&amp;lt;bean&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; class=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator&quot;&lt;/span&gt; 
&lt;span class=&quot;ot&quot;&gt;    depends-on=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;lifecycleBeanPostProcessor&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;bean&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; class=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;property&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;securityManager&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; ref=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;securityManager&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/bean&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote readability=&quot;7.0549450549451&quot;&gt;
&lt;p&gt;如果我们的bean容器中已经定义了&lt;code&gt;&amp;lt;aop:config/&amp;gt;&lt;/code&gt;或&lt;code&gt;&amp;lt;aop:aspectj-autoproxy/&amp;gt;&lt;/code&gt;，则可以不再定义&lt;code&gt;DefaultAdvisorAutoProxyCreator&lt;/code&gt;。因为前面两种情况都会自动添加与&lt;code&gt;DefaultAdvisorAutoProxyCreator&lt;/code&gt;类似的bean。关于&lt;code&gt;DefaultAdvisorAutoProxyCreator&lt;/code&gt;的更多介绍也可以参考笔者的&lt;a href=&quot;http://elim.iteye.com/blog/2398725&quot;&gt;Spring Aop自动创建代理对象的原理&lt;/a&gt;这篇博客。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Shiro提供的权限控制注解如下：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;RequiresAuthentication：需要用户在当前会话中是被认证过的，即需要通过用户名/密码登录过，不包括RememberMe自动登录。&lt;/li&gt;
&lt;li&gt;RequiresUser：需要用户是被认证过的，可以是在本次会话中通过用户名/密码登录认证，也可以是通过RememberMe自动登录。&lt;/li&gt;
&lt;li&gt;RequiresGuest：需要用户是未登录的。&lt;/li&gt;
&lt;li&gt;RequiresRoles：需要用户拥有指定的角色。&lt;/li&gt;
&lt;li&gt;RequiresPermissions：需要用户拥有指定的权限。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;前面三个都很好理解，而后面两个是类似的。&lt;a href=&quot;mailto:笔者这里拿@requirespermissions来做个示例&quot;&gt;笔者这里拿@RequiresPermissions来做个示例&lt;/a&gt;。首先我们把上面定义的Realm改一下，给role添加权限。这样我们的user1将拥有perm1、perm2和perm3的权限，而user2将拥有perm1、perm3和perm4的权限。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;18&quot;&gt;
&lt;pre class=&quot;sourceCode xml&quot;&gt;
&lt;code class=&quot;sourceCode xml&quot;&gt;&lt;span class=&quot;kw&quot;&gt;&amp;lt;bean&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; id=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;realm&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; class=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;org.apache.shiro.realm.text.TextConfigurationRealm&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;property&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;userDefinitions&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;value&amp;gt;&lt;/span&gt;
            user1=pass1,role1,role2
            user2=pass2,role2,role3
            admin=admin,admin
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;/value&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/property&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;property&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;roleDefinitions&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;value&amp;gt;&lt;/span&gt;
            role1=perm1,perm2
            role2=perm1,perm3
            role3=perm3,perm4
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;/value&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/property&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/bean&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;@RequiresPermissions可以添加在方法上，用来指定调用该方法时需要拥有的权限。下面的代码我们就指定了在访问&lt;code&gt;/perm1&lt;/code&gt;时必须拥有&lt;code&gt;perm1&lt;/code&gt;这个权限。这个时候user1和user2都能访问。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;fu&quot;&gt;@RequestMapping&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;/perm1&quot;&lt;/span&gt;)
&lt;span class=&quot;fu&quot;&gt;@RequiresPermissions&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;perm1&quot;&lt;/span&gt;)
&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; Object &lt;span class=&quot;fu&quot;&gt;permission1&lt;/span&gt;() {
    &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;permission1&quot;&lt;/span&gt;;
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果需要指定必须同时拥有多个权限才能访问某个方法，可以把需要指定的权限以数组的形式指定（注解上的数组属性指定单个的时候可以不加大括号，需要指定多个时就需要加大括号）。比如下面这样我们就指定了在访问&lt;code&gt;/perm1AndPerm4&lt;/code&gt;时用户必须同时拥有&lt;code&gt;perm1&lt;/code&gt;和&lt;code&gt;perm4&lt;/code&gt;这两个权限。这时候就只有user2可以访问，因为只有它才同时拥有&lt;code&gt;perm1&lt;/code&gt;和&lt;code&gt;perm4&lt;/code&gt;。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;fu&quot;&gt;@RequestMapping&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;/perm1AndPerm4&quot;&lt;/span&gt;)
&lt;span class=&quot;fu&quot;&gt;@RequiresPermissions&lt;/span&gt;({&lt;span class=&quot;st&quot;&gt;&quot;perm1&quot;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&quot;perm4&quot;&lt;/span&gt;})
&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; Object &lt;span class=&quot;fu&quot;&gt;perm1AndPerm4&lt;/span&gt;() {
    &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;perm1AndPerm4&quot;&lt;/span&gt;;
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;当同时指定了多个权限时，&lt;span&gt;默认多个权限之间的关系是与的关系&lt;/span&gt;，即需要同时拥有指定的所有的权限。如果只需要拥有指定的多个权限中的一个就可以访问，则我们&lt;span&gt;可以通过&lt;code&gt;logical=Logical.OR&lt;/code&gt;指定多个权限之间是或的关系&lt;/span&gt;。比如下面这样我们就指定了在访问&lt;code&gt;/perm1OrPerm4&lt;/code&gt;时只需要拥有&lt;code&gt;perm1&lt;/code&gt;或&lt;code&gt;perm4&lt;/code&gt;权限即可，这样user1和user2都可以访问该方法。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;fu&quot;&gt;@RequestMapping&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;/perm1OrPerm4&quot;&lt;/span&gt;)
&lt;span class=&quot;fu&quot;&gt;@RequiresPermissions&lt;/span&gt;(value={&lt;span class=&quot;st&quot;&gt;&quot;perm1&quot;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&quot;perm4&quot;&lt;/span&gt;}, logical=Logical.&lt;span class=&quot;fu&quot;&gt;OR&lt;/span&gt;)
&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; Object &lt;span class=&quot;fu&quot;&gt;perm1OrPerm4&lt;/span&gt;() {
    &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;perm1OrPerm4&quot;&lt;/span&gt;;
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;@RequiresPermissions也可以标注在Class上，表示&lt;span&gt;在外部访问&lt;/span&gt;Class中的方法时都需要有对应的权限。比如下面这样我们在Class级别指定了需要拥有权限&lt;code&gt;perm2&lt;/code&gt;，而在&lt;code&gt;index()&lt;/code&gt;方法上则没有指定需要任何权限，但是我们在访问该方法时还是需要拥有Class级别指定的权限。此时将只有user1可以访问。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;fu&quot;&gt;@RestController&lt;/span&gt;
&lt;span class=&quot;fu&quot;&gt;@RequestMapping&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;/foo&quot;&lt;/span&gt;)
&lt;span class=&quot;fu&quot;&gt;@RequiresPermissions&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;perm2&quot;&lt;/span&gt;)
&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; FooController {

    &lt;span class=&quot;fu&quot;&gt;@RequestMapping&lt;/span&gt;(method=RequestMethod.&lt;span class=&quot;fu&quot;&gt;GET&lt;/span&gt;)
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; Object &lt;span class=&quot;fu&quot;&gt;index&lt;/span&gt;() {
        Map&amp;lt;String, Object&amp;gt; map = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; HashMap&amp;lt;&amp;gt;();
        map.&lt;span class=&quot;fu&quot;&gt;put&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;abc&quot;&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;123&lt;/span&gt;);
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; map;
    }
    
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href=&quot;mailto:当Class和方法级别都同时拥有@requirespermissions时&quot;&gt;当Class和方法级别都同时拥有@RequiresPermissions时&lt;/a&gt;，方法级别的拥有更高的优先级，而且此时将只会校验方法级别要求的权限。如下我们在Class级别指定了需要&lt;code&gt;perm2&lt;/code&gt;权限，而在方法级别指定了需要&lt;code&gt;perm3&lt;/code&gt;权限，那么在访问&lt;code&gt;/foo&lt;/code&gt;时将只需要拥有&lt;code&gt;perm3&lt;/code&gt;权限即可访问到&lt;code&gt;index()&lt;/code&gt;方法。所以此时user1和user2都可以访问&lt;code&gt;/foo&lt;/code&gt;。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;fu&quot;&gt;@RestController&lt;/span&gt;
&lt;span class=&quot;fu&quot;&gt;@RequestMapping&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;/foo&quot;&lt;/span&gt;)
&lt;span class=&quot;fu&quot;&gt;@RequiresPermissions&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;perm2&quot;&lt;/span&gt;)
&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; FooController {

    &lt;span class=&quot;fu&quot;&gt;@RequestMapping&lt;/span&gt;(method=RequestMethod.&lt;span class=&quot;fu&quot;&gt;GET&lt;/span&gt;)
    &lt;span class=&quot;fu&quot;&gt;@RequiresPermissions&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;perm3&quot;&lt;/span&gt;)
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; Object &lt;span class=&quot;fu&quot;&gt;index&lt;/span&gt;() {
        Map&amp;lt;String, Object&amp;gt; map = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; HashMap&amp;lt;&amp;gt;();
        map.&lt;span class=&quot;fu&quot;&gt;put&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;abc&quot;&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;123&lt;/span&gt;);
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; map;
    }
    
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;但是如果此时我们在Class上新增&lt;code&gt;@RequiresRoles(&quot;role1&quot;)&lt;/code&gt;指定需要拥有角色role1,那么此时访问&lt;code&gt;/foo&lt;/code&gt;时需要拥有Class上的role1和&lt;code&gt;index()&lt;/code&gt;方法上&lt;code&gt;@RequiresPermissions(&quot;perm3&quot;)&lt;/code&gt;指定的&lt;code&gt;perm3&lt;/code&gt;权限。因为&lt;code&gt;RequiresRoles&lt;/code&gt;和&lt;code&gt;RequiresPermissions&lt;/code&gt;属于不同维度的权限定义，Shiro在校验的时候都将校验一遍，但是如果Class和方法上都拥有同类型的权限控制定义的注解时，则只会以方法上的定义为准。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;fu&quot;&gt;@RestController&lt;/span&gt;
&lt;span class=&quot;fu&quot;&gt;@RequestMapping&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;/foo&quot;&lt;/span&gt;)
&lt;span class=&quot;fu&quot;&gt;@RequiresPermissions&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;perm2&quot;&lt;/span&gt;)
&lt;span class=&quot;fu&quot;&gt;@RequiresRoles&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;role1&quot;&lt;/span&gt;)
&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; FooController {

    &lt;span class=&quot;fu&quot;&gt;@RequestMapping&lt;/span&gt;(method=RequestMethod.&lt;span class=&quot;fu&quot;&gt;GET&lt;/span&gt;)
    &lt;span class=&quot;fu&quot;&gt;@RequiresPermissions&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;perm3&quot;&lt;/span&gt;)
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; Object &lt;span class=&quot;fu&quot;&gt;index&lt;/span&gt;() {
        Map&amp;lt;String, Object&amp;gt; map = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; HashMap&amp;lt;&amp;gt;();
        map.&lt;span class=&quot;fu&quot;&gt;put&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;abc&quot;&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;123&lt;/span&gt;);
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; map;
    }
    
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;虽然示例中使用的只是&lt;code&gt;RequiresPermissions&lt;/code&gt;,但是其它权限控制注解的用法也是类似的，其它注解的用法请感兴趣的朋友自己实践。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;基于注解控制权限的原理&quot;&gt;基于注解控制权限的原理&lt;/h2&gt;
&lt;p&gt;上面使用&lt;code&gt;@RequiresPermissions&lt;/code&gt;我们指定的权限都是静态的，写本文的一个主要目的是介绍一种方法，通过扩展实现来使指定的权限可以是动态的。但是在扩展前我们得知道它底层的工作方式，即实现原理，我们才能进行扩展。所以接下来我们先来看一下Shiro整合Spring后使用&lt;code&gt;@RequiresPermissions&lt;/code&gt;的工作原理。在启用对&lt;code&gt;@RequiresPermissions&lt;/code&gt;的支持时我们定义了如下bean，这是一个Advisor，其继承自StaticMethodMatcherPointcutAdvisor，它的方法匹配逻辑是只要Class或Method上拥有Shiro的几个权限控制注解即可，而拦截以后的处理逻辑则是由相应的Advice指定。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode xml&quot;&gt;
&lt;code class=&quot;sourceCode xml&quot;&gt;&lt;span class=&quot;kw&quot;&gt;&amp;lt;bean&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; class=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;property&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;securityManager&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; ref=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;securityManager&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/bean&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;以下是AuthorizationAttributeSourceAdvisor的源码。我们可以看到在其构造方法中通过&lt;code&gt;setAdvice()&lt;/code&gt;指定了AopAllianceAnnotationsAuthorizingMethodInterceptor这个Advice实现类，这是基于MethodInterceptor的实现。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;20&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; AuthorizationAttributeSourceAdvisor &lt;span class=&quot;kw&quot;&gt;extends&lt;/span&gt; StaticMethodMatcherPointcutAdvisor {

    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;final&lt;/span&gt; Logger log = LoggerFactory.&lt;span class=&quot;fu&quot;&gt;getLogger&lt;/span&gt;(AuthorizationAttributeSourceAdvisor.&lt;span class=&quot;fu&quot;&gt;class&lt;/span&gt;);

    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;final&lt;/span&gt; Class&amp;lt;? &lt;span class=&quot;kw&quot;&gt;extends&lt;/span&gt; Annotation&amp;gt;[] AUTHZ_ANNOTATION_CLASSES =
            &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; Class[] {
                    RequiresPermissions.&lt;span class=&quot;fu&quot;&gt;class&lt;/span&gt;, RequiresRoles.&lt;span class=&quot;fu&quot;&gt;class&lt;/span&gt;,
                    RequiresUser.&lt;span class=&quot;fu&quot;&gt;class&lt;/span&gt;, RequiresGuest.&lt;span class=&quot;fu&quot;&gt;class&lt;/span&gt;, RequiresAuthentication.&lt;span class=&quot;fu&quot;&gt;class&lt;/span&gt;
            };

    &lt;span class=&quot;kw&quot;&gt;protected&lt;/span&gt; SecurityManager securityManager = &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;;

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;AuthorizationAttributeSourceAdvisor&lt;/span&gt;() {
        &lt;span class=&quot;fu&quot;&gt;setAdvice&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;AopAllianceAnnotationsAuthorizingMethodInterceptor&lt;/span&gt;());
    }

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; SecurityManager &lt;span class=&quot;fu&quot;&gt;getSecurityManager&lt;/span&gt;() {
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; securityManager;
    }

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;setSecurityManager&lt;/span&gt;(org.&lt;span class=&quot;fu&quot;&gt;apache&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;shiro&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;mgt&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;SecurityManager&lt;/span&gt; securityManager) {
        &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;securityManager&lt;/span&gt; = securityManager;
    }

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;matches&lt;/span&gt;(Method method, Class targetClass) {
        Method m = method;

        &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; ( &lt;span class=&quot;fu&quot;&gt;isAuthzAnnotationPresent&lt;/span&gt;(m) ) {
            &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;true&lt;/span&gt;;
        }

        &lt;span class=&quot;co&quot;&gt;//The 'method' parameter could be from an interface that doesn't have the annotation.&lt;/span&gt;
        &lt;span class=&quot;co&quot;&gt;//Check to see if the implementation has it.&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; ( targetClass != &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;) {
            &lt;span class=&quot;kw&quot;&gt;try&lt;/span&gt; {
                m = targetClass.&lt;span class=&quot;fu&quot;&gt;getMethod&lt;/span&gt;(m.&lt;span class=&quot;fu&quot;&gt;getName&lt;/span&gt;(), m.&lt;span class=&quot;fu&quot;&gt;getParameterTypes&lt;/span&gt;());
                &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;isAuthzAnnotationPresent&lt;/span&gt;(m) || &lt;span class=&quot;fu&quot;&gt;isAuthzAnnotationPresent&lt;/span&gt;(targetClass);
            } &lt;span class=&quot;kw&quot;&gt;catch&lt;/span&gt; (NoSuchMethodException ignored) {
                &lt;span class=&quot;co&quot;&gt;//default return value is false.  If we can't find the method, then obviously&lt;/span&gt;
                &lt;span class=&quot;co&quot;&gt;//there is no annotation, so just use the default return value.&lt;/span&gt;
            }
        }

        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;false&lt;/span&gt;;
    }

    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;isAuthzAnnotationPresent&lt;/span&gt;(Class&amp;lt;?&amp;gt; targetClazz) {
        &lt;span class=&quot;kw&quot;&gt;for&lt;/span&gt;( Class&amp;lt;? &lt;span class=&quot;kw&quot;&gt;extends&lt;/span&gt; Annotation&amp;gt; annClass : AUTHZ_ANNOTATION_CLASSES ) {
            Annotation a = AnnotationUtils.&lt;span class=&quot;fu&quot;&gt;findAnnotation&lt;/span&gt;(targetClazz, annClass);
            &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; ( a != &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt; ) {
                &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;true&lt;/span&gt;;
            }
        }
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;false&lt;/span&gt;;
    }

    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;isAuthzAnnotationPresent&lt;/span&gt;(Method method) {
        &lt;span class=&quot;kw&quot;&gt;for&lt;/span&gt;( Class&amp;lt;? &lt;span class=&quot;kw&quot;&gt;extends&lt;/span&gt; Annotation&amp;gt; annClass : AUTHZ_ANNOTATION_CLASSES ) {
            Annotation a = AnnotationUtils.&lt;span class=&quot;fu&quot;&gt;findAnnotation&lt;/span&gt;(method, annClass);
            &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; ( a != &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt; ) {
                &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;true&lt;/span&gt;;
            }
        }
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;false&lt;/span&gt;;
    }

}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;AopAllianceAnnotationsAuthorizingMethodInterceptor的源码如下。其实现的MethodInterceptor接口的invoke方法又调用了父类的invoke方法。同时我们要看到在其构造方法中创建了一些AuthorizingAnnotationMethodInterceptor实现，这些实现才是实现权限控制的核心，待会我们会挑出PermissionAnnotationMethodInterceptor实现类来看其具体的实现逻辑。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; AopAllianceAnnotationsAuthorizingMethodInterceptor
        &lt;span class=&quot;kw&quot;&gt;extends&lt;/span&gt; AnnotationsAuthorizingMethodInterceptor &lt;span class=&quot;kw&quot;&gt;implements&lt;/span&gt; MethodInterceptor {

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;AopAllianceAnnotationsAuthorizingMethodInterceptor&lt;/span&gt;() {
        List&amp;lt;AuthorizingAnnotationMethodInterceptor&amp;gt; interceptors =
                &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; ArrayList&amp;lt;AuthorizingAnnotationMethodInterceptor&amp;gt;(&lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;);

        &lt;span class=&quot;co&quot;&gt;//use a Spring-specific Annotation resolver - Spring's AnnotationUtils is nicer than the&lt;/span&gt;
        &lt;span class=&quot;co&quot;&gt;//raw JDK resolution process.&lt;/span&gt;
        AnnotationResolver resolver = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;SpringAnnotationResolver&lt;/span&gt;();
        &lt;span class=&quot;co&quot;&gt;//we can re-use the same resolver instance - it does not retain state:&lt;/span&gt;
        interceptors.&lt;span class=&quot;fu&quot;&gt;add&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;RoleAnnotationMethodInterceptor&lt;/span&gt;(resolver));
        interceptors.&lt;span class=&quot;fu&quot;&gt;add&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;PermissionAnnotationMethodInterceptor&lt;/span&gt;(resolver));
        interceptors.&lt;span class=&quot;fu&quot;&gt;add&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;AuthenticatedAnnotationMethodInterceptor&lt;/span&gt;(resolver));
        interceptors.&lt;span class=&quot;fu&quot;&gt;add&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;UserAnnotationMethodInterceptor&lt;/span&gt;(resolver));
        interceptors.&lt;span class=&quot;fu&quot;&gt;add&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;GuestAnnotationMethodInterceptor&lt;/span&gt;(resolver));

        &lt;span class=&quot;fu&quot;&gt;setMethodInterceptors&lt;/span&gt;(interceptors);
    }

    &lt;span class=&quot;kw&quot;&gt;protected&lt;/span&gt; org.&lt;span class=&quot;fu&quot;&gt;apache&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;shiro&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;aop&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;MethodInvocation&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;createMethodInvocation&lt;/span&gt;(Object implSpecificMethodInvocation) {
        &lt;span class=&quot;dt&quot;&gt;final&lt;/span&gt; MethodInvocation mi = (MethodInvocation) implSpecificMethodInvocation;

        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; org.&lt;span class=&quot;fu&quot;&gt;apache&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;shiro&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;aop&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;MethodInvocation&lt;/span&gt;() {
            &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; Method &lt;span class=&quot;fu&quot;&gt;getMethod&lt;/span&gt;() {
                &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; mi.&lt;span class=&quot;fu&quot;&gt;getMethod&lt;/span&gt;();
            }

            &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; Object[] &lt;span class=&quot;fu&quot;&gt;getArguments&lt;/span&gt;() {
                &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; mi.&lt;span class=&quot;fu&quot;&gt;getArguments&lt;/span&gt;();
            }

            &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;fu&quot;&gt;toString&lt;/span&gt;() {
                &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;Method invocation [&quot;&lt;/span&gt; + mi.&lt;span class=&quot;fu&quot;&gt;getMethod&lt;/span&gt;() + &lt;span class=&quot;st&quot;&gt;&quot;]&quot;&lt;/span&gt;;
            }

            &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; Object &lt;span class=&quot;fu&quot;&gt;proceed&lt;/span&gt;() &lt;span class=&quot;kw&quot;&gt;throws&lt;/span&gt; Throwable {
                &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; mi.&lt;span class=&quot;fu&quot;&gt;proceed&lt;/span&gt;();
            }

            &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; Object &lt;span class=&quot;fu&quot;&gt;getThis&lt;/span&gt;() {
                &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; mi.&lt;span class=&quot;fu&quot;&gt;getThis&lt;/span&gt;();
            }
        };
    }

    &lt;span class=&quot;kw&quot;&gt;protected&lt;/span&gt; Object &lt;span class=&quot;fu&quot;&gt;continueInvocation&lt;/span&gt;(Object aopAllianceMethodInvocation) &lt;span class=&quot;kw&quot;&gt;throws&lt;/span&gt; Throwable {
        MethodInvocation mi = (MethodInvocation) aopAllianceMethodInvocation;
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; mi.&lt;span class=&quot;fu&quot;&gt;proceed&lt;/span&gt;();
    }

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; Object &lt;span class=&quot;fu&quot;&gt;invoke&lt;/span&gt;(MethodInvocation methodInvocation) &lt;span class=&quot;kw&quot;&gt;throws&lt;/span&gt; Throwable {
        org.&lt;span class=&quot;fu&quot;&gt;apache&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;shiro&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;aop&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;MethodInvocation&lt;/span&gt; mi = &lt;span class=&quot;fu&quot;&gt;createMethodInvocation&lt;/span&gt;(methodInvocation);
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;super&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;invoke&lt;/span&gt;(mi);
    }
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;通过看父类的invoke方法实现，最终我们会看到核心逻辑是调用assertAuthorized方法，而该方法的实现（源码如下）又是依次判断配置的AuthorizingAnnotationMethodInterceptor是否支持当前方法进行权限校验（通过判断Class或Method上是否拥有其支持的注解），当支持时则会调用其assertAuthorized方法进行权限校验，而AuthorizingAnnotationMethodInterceptor又会调用AuthorizingAnnotationHandler的assertAuthorized方法。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;kw&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;assertAuthorized&lt;/span&gt;(MethodInvocation methodInvocation) &lt;span class=&quot;kw&quot;&gt;throws&lt;/span&gt; AuthorizationException {
    &lt;span class=&quot;co&quot;&gt;//default implementation just ensures no deny votes are cast:&lt;/span&gt;
    Collection&amp;lt;AuthorizingAnnotationMethodInterceptor&amp;gt; aamis = &lt;span class=&quot;fu&quot;&gt;getMethodInterceptors&lt;/span&gt;();
    &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (aamis != &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt; &amp;amp;&amp;amp; !aamis.&lt;span class=&quot;fu&quot;&gt;isEmpty&lt;/span&gt;()) {
        &lt;span class=&quot;kw&quot;&gt;for&lt;/span&gt; (AuthorizingAnnotationMethodInterceptor aami : aamis) {
            &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (aami.&lt;span class=&quot;fu&quot;&gt;supports&lt;/span&gt;(methodInvocation)) {
                aami.&lt;span class=&quot;fu&quot;&gt;assertAuthorized&lt;/span&gt;(methodInvocation);
            }
        }
    }
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;接下来我们再回过头来看AopAllianceAnnotationsAuthorizingMethodInterceptor的定义的PermissionAnnotationMethodInterceptor，其源码如下。结合AopAllianceAnnotationsAuthorizingMethodInterceptor的源码和PermissionAnnotationMethodInterceptor的源码，我们可以看到PermissionAnnotationMethodInterceptor中这时候指定了PermissionAnnotationHandler和SpringAnnotationResolver。PermissionAnnotationHandler是AuthorizingAnnotationHandler的一个子类。所以我们最终的权限控制由PermissionAnnotationHandler的assertAuthorized实现决定。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; PermissionAnnotationMethodInterceptor &lt;span class=&quot;kw&quot;&gt;extends&lt;/span&gt; AuthorizingAnnotationMethodInterceptor {

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;PermissionAnnotationMethodInterceptor&lt;/span&gt;() {
        &lt;span class=&quot;kw&quot;&gt;super&lt;/span&gt;( &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;PermissionAnnotationHandler&lt;/span&gt;() );
    }

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;PermissionAnnotationMethodInterceptor&lt;/span&gt;(AnnotationResolver resolver) {
        &lt;span class=&quot;kw&quot;&gt;super&lt;/span&gt;( &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;PermissionAnnotationHandler&lt;/span&gt;(), resolver);
    }

}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;接下来我们来看PermissionAnnotationHandler的assertAuthorized方法实现，其完整代码如下。从实现上我们可以看到其会从Annotation中获取配置的权限值，而这里的Annotation就是RequiresPermissions注解。而且在进行权限校验时都是直接使用的我们定义注解时指定的文本值，待会我们进行扩展时就将从这里入手。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; PermissionAnnotationHandler &lt;span class=&quot;kw&quot;&gt;extends&lt;/span&gt; AuthorizingAnnotationHandler {

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;PermissionAnnotationHandler&lt;/span&gt;() {
        &lt;span class=&quot;kw&quot;&gt;super&lt;/span&gt;(RequiresPermissions.&lt;span class=&quot;fu&quot;&gt;class&lt;/span&gt;);
    }

    &lt;span class=&quot;kw&quot;&gt;protected&lt;/span&gt; String[] &lt;span class=&quot;fu&quot;&gt;getAnnotationValue&lt;/span&gt;(Annotation a) {
        RequiresPermissions rpAnnotation = (RequiresPermissions) a;
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; rpAnnotation.&lt;span class=&quot;fu&quot;&gt;value&lt;/span&gt;();
    }

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;assertAuthorized&lt;/span&gt;(Annotation a) &lt;span class=&quot;kw&quot;&gt;throws&lt;/span&gt; AuthorizationException {
        &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (!(a &lt;span class=&quot;kw&quot;&gt;instanceof&lt;/span&gt; RequiresPermissions)) &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt;;

        RequiresPermissions rpAnnotation = (RequiresPermissions) a;
        String[] perms = &lt;span class=&quot;fu&quot;&gt;getAnnotationValue&lt;/span&gt;(a);
        Subject subject = &lt;span class=&quot;fu&quot;&gt;getSubject&lt;/span&gt;();

        &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (perms.&lt;span class=&quot;fu&quot;&gt;length&lt;/span&gt; == &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;) {
            subject.&lt;span class=&quot;fu&quot;&gt;checkPermission&lt;/span&gt;(perms[&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;]);
            &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt;;
        }
        &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (Logical.&lt;span class=&quot;fu&quot;&gt;AND&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;equals&lt;/span&gt;(rpAnnotation.&lt;span class=&quot;fu&quot;&gt;logical&lt;/span&gt;())) {
            &lt;span class=&quot;fu&quot;&gt;getSubject&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;checkPermissions&lt;/span&gt;(perms);
            &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt;;
        }
        &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (Logical.&lt;span class=&quot;fu&quot;&gt;OR&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;equals&lt;/span&gt;(rpAnnotation.&lt;span class=&quot;fu&quot;&gt;logical&lt;/span&gt;())) {
            &lt;span class=&quot;co&quot;&gt;// Avoid processing exceptions unnecessarily - &quot;delay&quot; throwing the exception by calling hasRole first&lt;/span&gt;
            &lt;span class=&quot;dt&quot;&gt;boolean&lt;/span&gt; hasAtLeastOnePermission = &lt;span class=&quot;kw&quot;&gt;false&lt;/span&gt;;
            &lt;span class=&quot;kw&quot;&gt;for&lt;/span&gt; (String permission : perms) &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;fu&quot;&gt;getSubject&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;isPermitted&lt;/span&gt;(permission)) hasAtLeastOnePermission = &lt;span class=&quot;kw&quot;&gt;true&lt;/span&gt;;
            &lt;span class=&quot;co&quot;&gt;// Cause the exception if none of the role match, note that the exception message will be a bit misleading&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (!hasAtLeastOnePermission) &lt;span class=&quot;fu&quot;&gt;getSubject&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;checkPermission&lt;/span&gt;(perms[&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;]);
            
        }
    }
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;通过前面的介绍我们知道PermissionAnnotationHandler的assertAuthorized方法参数的Annotation是由AuthorizingAnnotationMethodInterceptor在调用AuthorizingAnnotationHandler的assertAuthorized方法时传递的。其源码如下，从源码中我们可以看到Annotation是通过getAnnotation方法获得的。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;assertAuthorized&lt;/span&gt;(MethodInvocation mi) &lt;span class=&quot;kw&quot;&gt;throws&lt;/span&gt; AuthorizationException {
    &lt;span class=&quot;kw&quot;&gt;try&lt;/span&gt; {
        ((AuthorizingAnnotationHandler)&lt;span class=&quot;fu&quot;&gt;getHandler&lt;/span&gt;()).&lt;span class=&quot;fu&quot;&gt;assertAuthorized&lt;/span&gt;(&lt;span class=&quot;fu&quot;&gt;getAnnotation&lt;/span&gt;(mi));
    }
    &lt;span class=&quot;kw&quot;&gt;catch&lt;/span&gt;(AuthorizationException ae) {
        &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (ae.&lt;span class=&quot;fu&quot;&gt;getCause&lt;/span&gt;() == &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;) ae.&lt;span class=&quot;fu&quot;&gt;initCause&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;AuthorizationException&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;Not authorized to invoke method: &quot;&lt;/span&gt; + mi.&lt;span class=&quot;fu&quot;&gt;getMethod&lt;/span&gt;()));
        &lt;span class=&quot;kw&quot;&gt;throw&lt;/span&gt; ae;
    }         
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;沿着这个方向走下去，最终我们会找到SpringAnnotationResolver的getAnnotation方法实现，其实现如下。从下面的代码可以看到，其在寻找注解时是优先寻找Method上的，如果在Method上没有找到会从当前方法调用的所属Class上寻找对应的注解。从这里也可以看到为什么我们之前在Class和Method上都定义了相同类型的权限控制注解时生效的是Method上的，而单独存在的时候就是单独定义的那个生效了。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;18&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; SpringAnnotationResolver &lt;span class=&quot;kw&quot;&gt;implements&lt;/span&gt; AnnotationResolver {

    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; Annotation &lt;span class=&quot;fu&quot;&gt;getAnnotation&lt;/span&gt;(MethodInvocation mi, Class&amp;lt;? &lt;span class=&quot;kw&quot;&gt;extends&lt;/span&gt; Annotation&amp;gt; clazz) {
        Method m = mi.&lt;span class=&quot;fu&quot;&gt;getMethod&lt;/span&gt;();

        Annotation a = AnnotationUtils.&lt;span class=&quot;fu&quot;&gt;findAnnotation&lt;/span&gt;(m, clazz);
        &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (a != &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;) &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; a;

        &lt;span class=&quot;co&quot;&gt;//The MethodInvocation's method object could be a method defined in an interface.&lt;/span&gt;
        &lt;span class=&quot;co&quot;&gt;//However, if the annotation existed in the interface's implementation (and not&lt;/span&gt;
        &lt;span class=&quot;co&quot;&gt;//the interface itself), it won't be on the above method object.  Instead, we need to&lt;/span&gt;
        &lt;span class=&quot;co&quot;&gt;//acquire the method representation from the targetClass and check directly on the&lt;/span&gt;
        &lt;span class=&quot;co&quot;&gt;//implementation itself:&lt;/span&gt;
        Class&amp;lt;?&amp;gt; targetClass = mi.&lt;span class=&quot;fu&quot;&gt;getThis&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;getClass&lt;/span&gt;();
        m = ClassUtils.&lt;span class=&quot;fu&quot;&gt;getMostSpecificMethod&lt;/span&gt;(m, targetClass);
        a = AnnotationUtils.&lt;span class=&quot;fu&quot;&gt;findAnnotation&lt;/span&gt;(m, clazz);
        &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (a != &lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;) &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; a;
        &lt;span class=&quot;co&quot;&gt;// See if the class has the same annotation&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; AnnotationUtils.&lt;span class=&quot;fu&quot;&gt;findAnnotation&lt;/span&gt;(mi.&lt;span class=&quot;fu&quot;&gt;getThis&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;getClass&lt;/span&gt;(), clazz);
    }
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;通过以上的源码阅读，相信读者对于Shiro整合Spring后支持的权限控制注解的原理已经有了比较深入的理解。上面贴出的源码只是部分笔者认为比较核心的，有想详细了解完整内容的请读者自己沿着笔者提到的思路去阅读完整代码。&lt;br/&gt;了解了这块基于注解进行权限控制的原理后，读者朋友们也可以根据实际的业务需要进行相应的扩展。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;扩展使用spring-el表达式&quot;&gt;扩展使用Spring EL表达式&lt;/h2&gt;
&lt;p&gt;假设现在内部有下面这样一个接口，其中有一个query方法，接收一个参数type。这里我们简化一点，假设只要接收这么一个参数，然后对应不同的取值时将返回不同的结果。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;interface&lt;/span&gt; RealService {

    Object &lt;span class=&quot;fu&quot;&gt;query&lt;/span&gt;(&lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; type);
    
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这个接口是对外开放的，通过对应的URL可以请求到该方法，我们定义了对应的Controller方法如下：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;fu&quot;&gt;@RequestMapping&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;/service/{type}&quot;&lt;/span&gt;)
&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; Object &lt;span class=&quot;fu&quot;&gt;query&lt;/span&gt;(&lt;span class=&quot;fu&quot;&gt;@PathVariable&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;type&quot;&lt;/span&gt;) &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; type) {
    &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;realService&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;query&lt;/span&gt;(type);
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上面的接口服务在进行查询的时候针对type是有权限的，不是每个用户都可以使用每种type进行查询的，需要拥有对应的权限才行。所以针对上面的处理器方法我们需要加上权限控制，而且在控制时需要的权限是随着参数type动态变的。假设关于type的每项权限的定义是query:type的形式，比如type=1时需要的权限是query:1，type=2时需要的权限是query:2。在没有与Spring整合时，我们会如下这样做：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;fu&quot;&gt;@RequestMapping&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;/service/{type}&quot;&lt;/span&gt;)
&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; Object &lt;span class=&quot;fu&quot;&gt;query&lt;/span&gt;(&lt;span class=&quot;fu&quot;&gt;@PathVariable&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;type&quot;&lt;/span&gt;) &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; type) {
    SecurityUtils.&lt;span class=&quot;fu&quot;&gt;getSubject&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;checkPermission&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;query:&quot;&lt;/span&gt; + type);
    &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;realService&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;query&lt;/span&gt;(type);
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;但是与Spring整合后，上面的做法耦合性强，我们会更希望通过整合后的注解来进行权限控制。对于上面的场景我们更希望通过&lt;code&gt;@RequiresPermissions&lt;/code&gt;来指定需要的权限，但是&lt;code&gt;@RequiresPermissions&lt;/code&gt;中定义的权限是静态文本，固定的。它没法满足我们动态的需求。这个时候可能你会想着我们可以把Controller处理方法拆分为多个，单独进行权限控制。比如下面这样：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;fu&quot;&gt;@RequestMapping&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;/service/1&quot;&lt;/span&gt;)
&lt;span class=&quot;fu&quot;&gt;@RequiresPermissions&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;query:1&quot;&lt;/span&gt;)
&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; Object &lt;span class=&quot;fu&quot;&gt;service1&lt;/span&gt;() {
    &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;realService&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;query&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;);
}

&lt;span class=&quot;fu&quot;&gt;@RequiresPermissions&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;query:2&quot;&lt;/span&gt;)
&lt;span class=&quot;fu&quot;&gt;@RequestMapping&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;/service/2&quot;&lt;/span&gt;)
&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; Object &lt;span class=&quot;fu&quot;&gt;service2&lt;/span&gt;() {
    &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;realService&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;query&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;);
}

&lt;span class=&quot;co&quot;&gt;//...&lt;/span&gt;

&lt;span class=&quot;fu&quot;&gt;@RequestMapping&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;/service/200&quot;&lt;/span&gt;)
&lt;span class=&quot;fu&quot;&gt;@RequiresPermissions&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;query:200&quot;&lt;/span&gt;)
&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; Object &lt;span class=&quot;fu&quot;&gt;service200&lt;/span&gt;() {
    &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;realService&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;query&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;200&lt;/span&gt;);
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这在type的取值范围比较小的时候还可以，但是如果像上面这样可能的取值有200种，把它们穷举出来定义单独的处理器方法并进行权限控制就显得有点麻烦了。另外就是如果将来type的取值有变动，我们还得添加新的处理器方法。所以最好的办法是让&lt;code&gt;@RequiresPermissions&lt;/code&gt;支持动态的权限定义，同时又可以维持静态定义的支持。通过前面的分析我们知道，切入点是PermissionAnnotationHandler，而它里面是没有提供对权限校验的扩展的。我们如果想对它扩展简单的办法就是把它整体的替换。但是我们需要动态处理的权限是跟方法参数相关的，而PermissionAnnotationHandler中是取不到方法参数的，为此我们不能直接替换掉PermissionAnnotationHandler。PermissionAnnotationHandler是由PermissionAnnotationMethodInterceptor调用的，在其父类AuthorizingAnnotationMethodInterceptor的assertAuthorized方法中调用PermissionAnnotationHandler时是可以获取到方法参数的。为此我们的扩展点就选在PermissionAnnotationMethodInterceptor类上，我们也需要把它整体的替换。Spring的EL表达式可以支持解析方法参数值，这里我们选择引入Spring的EL表达式，在&lt;code&gt;@RequiresPermissions&lt;/code&gt;定义权限时可以使用Spring EL表达式引入方法参数。同时为了兼顾静态的文本。这里引入Spring的EL表达式模板。关于Spring的EL表达式模板可以参考笔者的&lt;a href=&quot;http://elim.iteye.com/blog/2393611&quot;&gt;这篇博文&lt;/a&gt;。我们定义自己的PermissionAnnotationMethodInterceptor，把它继承自PermissionAnnotationMethodInterceptor，重写assertAuthoried方法，方法的实现逻辑参考PermissionAnnotationHandler中的逻辑，但是所使用的&lt;code&gt;@RequiresPermissions&lt;/code&gt;中的权限定义，是我们使用Spring EL表达式基于当前调用的方法作为EvaluationContext解析后的结果。以下是我们自己定义的PermissionAnnotationMethodInterceptor实现。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;16&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; SelfPermissionAnnotationMethodInterceptor &lt;span class=&quot;kw&quot;&gt;extends&lt;/span&gt; PermissionAnnotationMethodInterceptor {

    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;final&lt;/span&gt; SpelExpressionParser parser = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;SpelExpressionParser&lt;/span&gt;();
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;final&lt;/span&gt; ParameterNameDiscoverer paramNameDiscoverer = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;DefaultParameterNameDiscoverer&lt;/span&gt;();
    &lt;span class=&quot;kw&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;final&lt;/span&gt; TemplateParserContext templateParserContext = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;TemplateParserContext&lt;/span&gt;();
    
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;SelfPermissionAnnotationMethodInterceptor&lt;/span&gt;(AnnotationResolver resolver) {
        &lt;span class=&quot;kw&quot;&gt;super&lt;/span&gt;(resolver);
    }
    
    &lt;span class=&quot;fu&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;assertAuthorized&lt;/span&gt;(MethodInvocation mi) &lt;span class=&quot;kw&quot;&gt;throws&lt;/span&gt; AuthorizationException {
        Annotation annotation = &lt;span class=&quot;kw&quot;&gt;super&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;getAnnotation&lt;/span&gt;(mi);
        RequiresPermissions permAnnotation = (RequiresPermissions) annotation;
        String[] perms = permAnnotation.&lt;span class=&quot;fu&quot;&gt;value&lt;/span&gt;();
        EvaluationContext evaluationContext = &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;MethodBasedEvaluationContext&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;null&lt;/span&gt;, mi.&lt;span class=&quot;fu&quot;&gt;getMethod&lt;/span&gt;(), mi.&lt;span class=&quot;fu&quot;&gt;getArguments&lt;/span&gt;(), paramNameDiscoverer);
        &lt;span class=&quot;kw&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; i=&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;; i&amp;lt;perms.&lt;span class=&quot;fu&quot;&gt;length&lt;/span&gt;; i++) {
            Expression expression = &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;parser&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;parseExpression&lt;/span&gt;(perms[i], templateParserContext);
            &lt;span class=&quot;co&quot;&gt;//使用Spring EL表达式解析后的权限定义替换原来的权限定义&lt;/span&gt;
            perms[i] = expression.&lt;span class=&quot;fu&quot;&gt;getValue&lt;/span&gt;(evaluationContext, String.&lt;span class=&quot;fu&quot;&gt;class&lt;/span&gt;);
        }
        Subject subject = &lt;span class=&quot;fu&quot;&gt;getSubject&lt;/span&gt;();
        
        &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (perms.&lt;span class=&quot;fu&quot;&gt;length&lt;/span&gt; == &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;) {
            subject.&lt;span class=&quot;fu&quot;&gt;checkPermission&lt;/span&gt;(perms[&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;]);
            &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt;;
        }
        &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (Logical.&lt;span class=&quot;fu&quot;&gt;AND&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;equals&lt;/span&gt;(permAnnotation.&lt;span class=&quot;fu&quot;&gt;logical&lt;/span&gt;())) {
            &lt;span class=&quot;fu&quot;&gt;getSubject&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;checkPermissions&lt;/span&gt;(perms);
            &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt;;
        }
        &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (Logical.&lt;span class=&quot;fu&quot;&gt;OR&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;equals&lt;/span&gt;(permAnnotation.&lt;span class=&quot;fu&quot;&gt;logical&lt;/span&gt;())) {
            &lt;span class=&quot;co&quot;&gt;// Avoid processing exceptions unnecessarily - &quot;delay&quot; throwing the exception by calling hasRole first&lt;/span&gt;
            &lt;span class=&quot;dt&quot;&gt;boolean&lt;/span&gt; hasAtLeastOnePermission = &lt;span class=&quot;kw&quot;&gt;false&lt;/span&gt;;
            &lt;span class=&quot;kw&quot;&gt;for&lt;/span&gt; (String permission : perms) &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;fu&quot;&gt;getSubject&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;isPermitted&lt;/span&gt;(permission)) hasAtLeastOnePermission = &lt;span class=&quot;kw&quot;&gt;true&lt;/span&gt;;
            &lt;span class=&quot;co&quot;&gt;// Cause the exception if none of the role match, note that the exception message will be a bit misleading&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (!hasAtLeastOnePermission) &lt;span class=&quot;fu&quot;&gt;getSubject&lt;/span&gt;().&lt;span class=&quot;fu&quot;&gt;checkPermission&lt;/span&gt;(perms[&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;]);
            
        }
    }
    
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;定义了自己的PermissionAnnotationMethodInterceptor后，我们需要替换原来的PermissionAnnotationMethodInterceptor为我们自己的PermissionAnnotationMethodInterceptor。根据前面介绍的Shiro整合Spring后使用&lt;code&gt;@RequiresPermissions&lt;/code&gt;等注解的原理我们知道PermissionAnnotationMethodInterceptor是由AopAllianceAnnotationsAuthorizingMethodInterceptor指定的，而后者又是由AuthorizationAttributeSourceAdvisor指定的。为此我们需要在定义AuthorizationAttributeSourceAdvisor时通过显示定义AopAllianceAnnotationsAuthorizingMethodInterceptor的方式显示的定义其中的AuthorizingAnnotationMethodInterceptor，然后把自带的PermissionAnnotationMethodInterceptor替换为我们自定义的SelfAuthorizingAnnotationMethodInterceptor。替换后的定义如下：&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;sourceCode xml&quot;&gt;
&lt;code class=&quot;sourceCode xml&quot;&gt;&lt;span class=&quot;kw&quot;&gt;&amp;lt;bean&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; class=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;property&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;securityManager&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; ref=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;securityManager&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;property&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;advice&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;bean&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; class=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;org.apache.shiro.spring.security.interceptor.AopAllianceAnnotationsAuthorizingMethodInterceptor&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;property&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;methodInterceptors&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;kw&quot;&gt;&amp;lt;util:list&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;kw&quot;&gt;&amp;lt;bean&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; class=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;org.apache.shiro.authz.aop.RoleAnnotationMethodInterceptor&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;                        c:resolver-ref=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;springAnnotationResolver&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;co&quot;&gt;&amp;lt;!-- 使用自定义的PermissionAnnotationMethodInterceptor --&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;kw&quot;&gt;&amp;lt;bean&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; class=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;com.elim.chat.shiro.SelfPermissionAnnotationMethodInterceptor&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;                        c:resolver-ref=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;springAnnotationResolver&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;kw&quot;&gt;&amp;lt;bean&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; class=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;org.apache.shiro.authz.aop.AuthenticatedAnnotationMethodInterceptor&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;                        c:resolver-ref=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;springAnnotationResolver&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;kw&quot;&gt;&amp;lt;bean&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; class=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;org.apache.shiro.authz.aop.UserAnnotationMethodInterceptor&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;                        c:resolver-ref=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;springAnnotationResolver&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;kw&quot;&gt;&amp;lt;bean&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; class=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;org.apache.shiro.authz.aop.GuestAnnotationMethodInterceptor&quot;&lt;/span&gt;
&lt;span class=&quot;ot&quot;&gt;                        c:resolver-ref=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;springAnnotationResolver&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;kw&quot;&gt;&amp;lt;/util:list&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kw&quot;&gt;&amp;lt;/property&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;/bean&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/property&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/bean&amp;gt;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;&amp;lt;bean&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; id=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;springAnnotationResolver&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; class=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;org.apache.shiro.spring.aop.SpringAnnotationResolver&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;为了演示前面示例的动态的权限，我们把角色与权限的关系调整如下，让role1、role2和role3分别拥有query:1、&lt;a class=&quot;uri&quot;&gt;query:2和query:3的权限。此时user1将拥有query:1和query:2的权限&lt;/a&gt;。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;21&quot;&gt;
&lt;pre class=&quot;sourceCode xml&quot;&gt;
&lt;code class=&quot;sourceCode xml&quot;&gt;&lt;span class=&quot;kw&quot;&gt;&amp;lt;bean&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; id=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;realm&quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; class=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;org.apache.shiro.realm.text.TextConfigurationRealm&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;property&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;userDefinitions&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;value&amp;gt;&lt;/span&gt;
            user1=pass1,role1,role2
            user2=pass2,role2,role3
            admin=admin,admin
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;/value&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/property&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;property&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&quot;roleDefinitions&quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;value&amp;gt;&lt;/span&gt;
            role1=perm1,perm2,query:1
            role2=perm1,perm3,query:2
            role3=perm3,perm4,query:3
        &lt;span class=&quot;kw&quot;&gt;&amp;lt;/value&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kw&quot;&gt;&amp;lt;/property&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/bean&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;此时&lt;code&gt;@RequiresPermissions&lt;/code&gt;中指定权限时就可以使用Spring EL表达式支持的语法了。因为我们在定义SelfPermissionAnnotationMethodInterceptor时已经指定了应用基于模板的表达式解析，此时权限中定义的文本都将作为文本解析，动态的部分默认需要使用&lt;code&gt;#{&lt;/code&gt;前缀和&lt;code&gt;}&lt;/code&gt;后缀包起来（这个前缀和后缀是可以指定的，但是默认就好）。在动态部分中可以使用&lt;code&gt;#&lt;/code&gt;前缀引用变量，基于方法的表达式解析中可以使用参数名或&lt;code&gt;p参数索引&lt;/code&gt;的形式引用方法参数。所以上面我们需要动态的权限的query方法的&lt;code&gt;@RequiresPermissions&lt;/code&gt;定义如下。&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode java&quot;&gt;
&lt;code class=&quot;sourceCode java&quot;&gt;&lt;span class=&quot;fu&quot;&gt;@RequestMapping&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;/service/{type}&quot;&lt;/span&gt;)
&lt;span class=&quot;fu&quot;&gt;@RequiresPermissions&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;query:#{#type}&quot;&lt;/span&gt;)
&lt;span class=&quot;kw&quot;&gt;public&lt;/span&gt; Object &lt;span class=&quot;fu&quot;&gt;query&lt;/span&gt;(&lt;span class=&quot;fu&quot;&gt;@PathVariable&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&quot;type&quot;&lt;/span&gt;) &lt;span class=&quot;dt&quot;&gt;int&lt;/span&gt; type) {
    &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;realService&lt;/span&gt;.&lt;span class=&quot;fu&quot;&gt;query&lt;/span&gt;(type);
}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这样user1在访问&lt;code&gt;/service/1&lt;/code&gt;和&lt;code&gt;/service/2&lt;/code&gt;是OK的，但是在访问&lt;code&gt;/service/3&lt;/code&gt;和&lt;code&gt;/service/300&lt;/code&gt;时会提示没有权限，因为user1没有&lt;code&gt;query:3&lt;/code&gt;和&lt;code&gt;query:300&lt;/code&gt;的权限。&lt;/p&gt;
</description>
<pubDate>Fri, 16 Mar 2018 06:52:00 +0000</pubDate>
<dc:creator>Elim的博客</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/elim-zhang/p/8581427.html</dc:identifier>
</item>
<item>
<title>Spring与Akka的集成 - 泰山不老生</title>
<link>http://www.cnblogs.com/jiaan-geng/p/8581312.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/jiaan-geng/p/8581312.html</guid>
<description>&lt;h2&gt;概述&lt;/h2&gt;
&lt;p&gt;       近年来随着Spark的火热，Spark本身使用的开发语言Scala、用到的分布式内存文件系统Tachyon（现已更名为Alluxio）以及基于Actor并发编程模型的Akka都引起了大家的注意。了解过Akka或者Actor的人应该知道，这的确是一个很不错的框架，按照Akka官网的描述——使用Akka使得构建强有力的并发与分布式应用将更加容易。由于历史原因，很多Web系统在开发分布式服务时首先会选择RMI(Remote Method Invoke ,远程方法调用)、RPC(Remote Procedure Call Protocol,远程过程调用)或者使用JMS（Java Messaging Service,Java消息服务）。&lt;/p&gt;
&lt;p&gt;       但是使用RMI只能使用java语言，而且开发、执行效率都不高；RPC框架虽然可以通过匹配方法签名的方式比RMI更灵活，但是其存在调用超时、调用丢失等缺点；JMS方式虽然可以通过At Least Delivery Once、消息持久化等机制保证消息不会丢失，但是只能作为一种跨服务的生产者、消费者编程模型使用。Akka不但处理了以上问题，而且还可以使用Actor作为并发编程模型，减少java多线程编程的阻塞、调度、上下文开销甚至死锁等问题。此外，Akka还提供了集群Sharding、流处理等功能的支持，更易于实现有限状态自动机等功能。所以有心的开发者势必会关心如何在最常见的Java系统中使用它，如何与Spring集成？&lt;/p&gt;
&lt;p&gt;       本文参考Akka官方使用文档，根据自身的经验和理解，提供Akka与Spring集成的方案。本文不说明Spring框架的具体使用，并从Spring已经配置完备的情况开始叙述。&lt;/p&gt;
&lt;h2&gt;Actor系统——ActorSystem&lt;/h2&gt;
&lt;p&gt;       什么是ActorSystem？根据Akka官网的描述——ActorSystem是一个重量级的结构体，可以用于分配1到N个线程，所以每个应用都需要创建一个ActorSystem。通常而言，使用以下代码来创建ActorSystem。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
ActorSystem system = ActorSystem.create(&quot;Hello&quot;);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;不过对于接入Spring而言，由IOC（Inversion of Control，控制反转）方式会更接地气，你可以这样：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; AKKA System Setup &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;bean &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;actorSystem&quot;&lt;/span&gt;&lt;span&gt; class&lt;/span&gt;&lt;span&gt;=&quot;akka.actor.ActorSystem&quot;&lt;/span&gt;&lt;span&gt; factory-method&lt;/span&gt;&lt;span&gt;=&quot;create&quot;&lt;/span&gt;&lt;span&gt; destroy-method&lt;/span&gt;&lt;span&gt;=&quot;shutdown&quot;&lt;/span&gt;&lt;span&gt; scope&lt;/span&gt;&lt;span&gt;=&quot;singleton&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;constructor-arg &lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;=&quot;helloAkkaSystem&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
    &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;bean&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后在你需要的地方依赖注入即可。&lt;/p&gt;
&lt;h2&gt;Actor编程模型&lt;/h2&gt;
&lt;p&gt;       有关Actor编程模型的具体介绍可以看我的另一篇博文——《&lt;a href=&quot;http://www.cnblogs.com/jiaan-geng/p/5385993.html&quot; target=&quot;_blank&quot;&gt;Spark如何使用Akka实现进程、节点通信的简明介绍&lt;/a&gt;》，里面有更多的介绍。需要补充的是，在最新的Scala官方网站上已经决定废弃Scala自身的Actor编程模型，转而全面拥抱Akka提供的Actor编程模型。&lt;/p&gt;
&lt;p&gt;       我们可以通过以下代码（代码片段借用了Akka官网的例子）创建一个简单的Actor例子。&lt;/p&gt;
&lt;p&gt;       Greeter是代表问候者的Actor：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; Greeter &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; UntypedActor {

  &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;enum&lt;/span&gt;&lt;span&gt; Msg {
    GREET, DONE;
  }

  @Override
  &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; onReceive(Object msg) {
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (msg ==&lt;span&gt; Msg.GREET) {
      System.out.println(&lt;/span&gt;&quot;Hello World!&quot;&lt;span&gt;);
      getSender().tell(Msg.DONE, getSelf());
    } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;
      unhandled(msg);
  }

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;一般情况下我们的Actor都需要继承自UntypedActor，并实现其onReceive方法。onReceive用于接收消息，你可以在其中实现对消息的匹配并做不同的处理。&lt;/p&gt;
&lt;p&gt;HelloWorld是用于向Greeter发送问候消息的访客：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; HelloWorld &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; UntypedActor {

  @Override
  &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; preStart() {
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; create the greeter actor&lt;/span&gt;
    &lt;span&gt;final&lt;/span&gt; ActorRef greeter = getContext().actorOf(Props.create(Greeter.&lt;span&gt;class&lt;/span&gt;), &quot;greeter&quot;&lt;span&gt;);
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; tell it to perform the greeting&lt;/span&gt;
&lt;span&gt;    greeter.tell(Greeter.Msg.GREET, getSelf());
  }

  @Override
  &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; onReceive(Object msg) {
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (msg ==&lt;span&gt; Greeter.Msg.DONE) {
      &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; when the greeter is done, stop this actor and with it the application&lt;/span&gt;
&lt;span&gt;      getContext().stop(getSelf());
    } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;
      unhandled(msg);
  }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;有了Actor之后，我们可以这样使用它：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
ActorRef a = system.actorOf(Props.create(HelloWorld.&lt;span&gt;class&lt;/span&gt;), &quot;helloWorld&quot;);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;       在HelloWorld的preStart实现中，获取了Greeter的ActorRef（Actor的引用）并向Greeter发送了问候的消息，Greeter收到问候消息后，会先打印Hello World！，然后向HelloWorld回复完成的消息，HelloWorld得知Greeter完成了向世界问好这个伟大的任务后，就结束了自己的生命。HelloWorld的例子用编程API的方式告诉了我们如何使用Actor及发送、接收消息。为了便于描述与Spring的集成，下面再介绍一个例子。&lt;/p&gt;
&lt;p&gt;       CountingActor（代码主体借用自Akka官网）是用于计数的Actor，见代码清单1所示。&lt;/p&gt;
&lt;p&gt;代码清单1&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
@Named(&quot;CountingActor&quot;&lt;span&gt;)
@Scope(&lt;/span&gt;&quot;prototype&quot;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; CountingActor &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; UntypedActor {

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Count {
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; Get {
    }

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; the service that will be automatically injected&lt;/span&gt;
&lt;span&gt;    @Resource
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; CountingService countingService;

    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; count = 0&lt;span&gt;;

    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; onReceive(Object message) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; Exception {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (message &lt;span&gt;instanceof&lt;/span&gt;&lt;span&gt; Count) {
            count &lt;/span&gt;=&lt;span&gt; countingService.increment(count);
        } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (message &lt;span&gt;instanceof&lt;/span&gt;&lt;span&gt; Get) {
            getSender().tell(count, getSelf());
        } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
            unhandled(message);
        }
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;CountingActor用于接收Count消息进行计数，接收Get消息回复给发送者当前的计数值。CountingService是用于计数的接口，其定义如下：&lt;/p&gt;
&lt;div readability=&quot;6.5&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt;&lt;span&gt; CountingService {
    
    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * 计数
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; count
     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;
     &lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;int&lt;/span&gt; increment(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; count);

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;CountingService的具体实现是CountingServiceImpl，其实现如下：&lt;/p&gt;
&lt;div readability=&quot;7.5&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
@Service(&quot;countingService&quot;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; CountingServiceImpl &lt;span&gt;implements&lt;/span&gt;&lt;span&gt; CountingService {

    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; Logger logger = LoggerFactory.getLogger(CountingServiceImpl.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;);

    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;
     * (non-Javadoc)
     * 
     * @see com.elong.sentosa.metadata.service.CountingService#increment(int)
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; increment(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; count) {
        logger.info(&lt;/span&gt;&quot;increase &quot; + count + &quot;by 1.&quot;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; count + 1&lt;span&gt;;
    }

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;CountingActor通过注解方式注入了CountingService，CountingActor的计数实际是由CountingService完成。&lt;/p&gt;
&lt;p&gt;        细心的同学可能发现了CountingActor使用了注解Named，这里为什么没有使用@Service或者@Component等注解呢？由于Akka的Actor在初始化的时候必须使用System或者Context的工厂方法actorOf创建新的Actor实例，不能使用构造器来初始化，而使用Spring的Service或者Component注解，会导致使用构造器初始化Actor，所以会抛出以下异常：&lt;/p&gt;
&lt;div readability=&quot;7&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
akka.actor.ActorInitializationException: You cannot create an instance of [com.elong.metadata.akka.actor.CountingActor] explicitly using the constructor (&lt;span&gt;new&lt;/span&gt;). You have to use one of the 'actorOf' factory methods to create a &lt;span&gt;new&lt;/span&gt; actor. See the documentation.
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;如果我们不能使用@Service或者@Component，也不能使用XML配置的方式使用（与注解一个道理），那么我们如何使用CountingActor提供的服务呢？&lt;/p&gt;

&lt;h2&gt;IndirectActorProducer接口&lt;/h2&gt;
&lt;p&gt;        IndirectActorProducer是Akka提供的Actor生成接口，从其名字我们知道Akka给我们指出了另一条道路——石头大了绕着走！通过实现IndirectActorProducer接口我们可以定制一些Actor的生成方式，与Spring集成可以这样实现它，见代码清单2所示。&lt;/p&gt;
&lt;p&gt;代码清单2&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; SpringActorProducer &lt;span&gt;implements&lt;/span&gt;&lt;span&gt; IndirectActorProducer {
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt;&lt;span&gt; ApplicationContext applicationContext;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt;&lt;span&gt; String actorBeanName;
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;final&lt;/span&gt;&lt;span&gt; Object[] args;

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; SpringActorProducer(ApplicationContext applicationContext, String actorBeanName, Object ... args) {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.applicationContext =&lt;span&gt; applicationContext;
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.actorBeanName =&lt;span&gt; actorBeanName;
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.args =&lt;span&gt; args;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt; Actor produce() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; (Actor) applicationContext.getBean(actorBeanName, args);
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; Class&amp;lt;? &lt;span&gt;extends&lt;/span&gt; Actor&amp;gt;&lt;span&gt; actorClass() {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; (Class&amp;lt;? &lt;span&gt;extends&lt;/span&gt; Actor&amp;gt;&lt;span&gt;) applicationContext.getType(actorBeanName);
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;SpringActorProducer的实现主要借鉴了Akka官方文档，我这里对其作了一些扩展以便于支持构造器带有多个参数的情况。从其实现看到实际是利用了ApplicationContext提供的getBean方式实例化Actor。&lt;br/&gt;       这里还有两个问题：一、ApplicationContext如何获取和设置？二、如何使用SpringActorProducer生成Spring需要的Actor实例？&lt;/p&gt;
&lt;p&gt;       对于第一个问题，我们可以通过封装SpringActorProducer并实现ApplicationContextAware接口的方式获取ApplicationContext；对于第二个问题，我们知道Akka中的所有Actor实例都是以Props作为配置参数开始的，这里以SpringActorProducer为代理生成我们需要的Actor的Props。&lt;/p&gt;
&lt;p&gt;       SpringExt实现了以上思路，见代码清单3所示。&lt;/p&gt;
&lt;p&gt;代码清单3&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
@Component(&quot;springExt&quot;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; SpringExt &lt;span&gt;implements&lt;/span&gt;&lt;span&gt; Extension, ApplicationContextAware {

    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; ApplicationContext applicationContext;

    &lt;/span&gt;&lt;span&gt;/**&lt;/span&gt;&lt;span&gt;
     * Create a Props for the specified actorBeanName using the
     * SpringActorProducer class.
     *
     * &lt;/span&gt;&lt;span&gt;@param&lt;/span&gt;&lt;span&gt; actorBeanName
     *            The name of the actor bean to create Props for
     * &lt;/span&gt;&lt;span&gt;@return&lt;/span&gt;&lt;span&gt; a Props that will create the named actor bean using Spring
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt;&lt;span&gt; Props props(String actorBeanName, Object ... args) {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; Props.create(SpringActorProducer.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;, applicationContext, actorBeanName, args);
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; setApplicationContext(ApplicationContext applicationContext) &lt;span&gt;throws&lt;/span&gt;&lt;span&gt; BeansException {
        &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.applicationContext =&lt;span&gt; applicationContext;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;应用例子&lt;/h2&gt;
&lt;p&gt;        经过了以上的铺垫，现在你可以使用创建好的CountingActor了，首先你需要在你的业务类中注入ActorSystem和SpringExt。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;        @Autowired
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; ActorSystem actorSystem;

    @Autowired
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; SpringExt springExt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后我们使用CountingActor进行计数，代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
    ActorRef counter = actorSystem.actorOf(springExt.props(&quot;CountingActor&quot;), &quot;counter&quot;&lt;span&gt;);

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Create the &quot;actor-in-a-box&quot;&lt;/span&gt;
        &lt;span&gt;final&lt;/span&gt; Inbox inbox =&lt;span&gt; Inbox.create(system);
        
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; tell it to count three times&lt;/span&gt;
        inbox.send(counter, &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Count());
        inbox.send(counter, &lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Count());
        inbox.send(counter, &lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Count());

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; print the result&lt;/span&gt;
    FiniteDuration duration = FiniteDuration.create(3&lt;span&gt;, TimeUnit.SECONDS);
    Future&lt;/span&gt;&amp;lt;Object&amp;gt; result = ask(counter, &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Get(), Timeout.durationToTimeout(duration));
    &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt; {
        System.out.println(&lt;/span&gt;&quot;Got back &quot; +&lt;span&gt; Await.result(result, duration));
    } &lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception e) {
        System.err.println(&lt;/span&gt;&quot;Failed getting result: &quot; +&lt;span&gt; e.getMessage());
        &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt;&lt;span&gt; e;
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;输出结果为：&lt;/p&gt;
&lt;p&gt;Got back 3&lt;/p&gt;
&lt;h2&gt;总结&lt;/h2&gt;
&lt;p&gt;       本文只是最简单的Akka集成Spring的例子，Akka的remote、cluster、persistence、router等机制都可以应用。&lt;/p&gt;
&lt;p&gt;后记：经过近一年的准备，《Spark内核设计的艺术 架构设计与实现》一书现已出版发行，图书如图：&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;http://img.blog.csdn.net/20180122173306551&quot; alt=&quot;&quot; width=&quot;360&quot; height=&quot;360&quot;/&gt;&lt;/div&gt;

&lt;div&gt;
&lt;p&gt;售卖链接如下：&lt;/p&gt;

&lt;/div&gt;
</description>
<pubDate>Fri, 16 Mar 2018 06:45:00 +0000</pubDate>
<dc:creator>泰山不老生</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/jiaan-geng/p/8581312.html</dc:identifier>
</item>
</channel>
</rss>