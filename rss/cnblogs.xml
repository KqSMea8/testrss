<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>TensorFlow 框架 - weilongyitian</title>
<link>http://www.cnblogs.com/missidiot/p/9414451.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/missidiot/p/9414451.html</guid>
<description>&lt;p&gt;TensorFlow&lt;/p&gt;
&lt;p&gt;TensorFlow核心程序由2个独立部分组成：&lt;/p&gt;
&lt;p&gt;  　　a:Building the computational graph构建计算图&lt;/p&gt;
&lt;p&gt;  　　b:Running the computational graph运行计算图&lt;/p&gt;
&lt;p&gt;1.一个computational graph(计算图)是一系列的TensorFlow操作排列成一个节点图。&lt;/p&gt;
&lt;p&gt;　　1.1 构建计算图&lt;/p&gt;
&lt;div readability=&quot;30.5&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
node1 = tf.constant(3.0, dtype=&lt;span&gt;tf.float32)
node2 &lt;/span&gt;= tf.constant(4.0)&lt;span&gt;#&lt;/span&gt;&lt;span&gt; also tf.float32 implicitly&lt;/span&gt;
&lt;span&gt;print&lt;/span&gt;(node1, node2)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;结果：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
Tensor(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Const:0&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, shape=(), dtype=float32) Tensor(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Const_1:0&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,shape=(), dtype=float32)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　1.2运行计算图&lt;/p&gt;
&lt;p&gt;我们必须用到session:一个session封装了TensorFlow运行时的控制和状态&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
sess =&lt;span&gt; tf.Session()
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(sess.run([node1, node2]))
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　1.3 我们可以组合Tensor节点操作(操作仍然是一个节点)来构造更加复杂的计算，&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
node3 =&lt;span&gt; tf.add(node1, node2)
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;node3:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, node3)
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;sess.run(node3):&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, sess.run(node3))
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　运行结果：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
node3:Tensor(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Add:0&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, shape=(), dtype=&lt;span&gt;float32)
sess.run(node3):&lt;/span&gt;7.0
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　1.4 TensorFlow提供一个统一的调用称之为TensorBoard，它能展示一个计算图的图片；如下面这个截图就展示了这个计算图&lt;/p&gt;
&lt;div&gt;
&lt;div&gt;&lt;img src=&quot;https://blog.csdn.net/lengguoxing/article/details/78456279&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;img src=&quot;https://img-blog.csdn.net/20171106120234631?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbGVuZ2d1b3hpbmc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;p&gt;　　1.5 一个计算图可以参数化的接收外部的输入，作为一个placeholders(占位符)，一个占位符是允许后面提供一个值的。&lt;/p&gt;
&lt;div readability=&quot;28.5&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
a =&lt;span&gt; tf.placeholder(tf.float32)
b &lt;/span&gt;=&lt;span&gt; tf.placeholder(tf.float32)
adder_node &lt;/span&gt;= a + b  &lt;span&gt;#&lt;/span&gt;&lt;span&gt; + provides a shortcut for tf.add(a, b)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　这里有点像一个function (函数)或者lambda表达式，我们定义了2个输入参数a和b，然后提供一个在它们之上的操作。我们可以使用&lt;/p&gt;
&lt;p&gt;feed_dict(传递字典)参数传递具体的值到run方法的占位符来进行多个输入，从而来计算这个图。　　&lt;/p&gt;
&lt;div readability=&quot;24&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;print&lt;/span&gt;(sess.run(adder_node, {a:3, b:4.5&lt;span&gt;}))
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(sess.run(adder_node, {a: [1,3], b: [2,4]}))
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
7.5&lt;span&gt;
[&lt;/span&gt;3.  7.]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　在TensorBoard，计算图类似于这样：&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;https://img-blog.csdn.net/20171106120248608?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbGVuZ2d1b3hpbmc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;p&gt;　　1.6我们可以增加另外的操作来让计算图更加复杂，比如&lt;/p&gt;
&lt;div readability=&quot;21.5&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
    add_and_triple = adder_node *3&lt;span&gt;.
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(sess.run(add_and_triple, {a:3, b:4.5&lt;span&gt;}))
输出结果是：
&lt;/span&gt;22.5
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　在TensorBoard，计算图类似于这样：&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;https://img-blog.csdn.net/20171106120309478?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbGVuZ2d1b3hpbmc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;div readability=&quot;12&quot;&gt;　　1.7 在机器学习中，我们通常想让一个模型可以接收任意多个输入，比如大于1个，好让这个模型可以被训练，在不改变输入的情况下,
&lt;p&gt;我们需要改变这个计算图去获得一个新的输出。变量允许我们增加可训练的参数到这个计算图中，它们被构造成有一个类型和初始值：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
W = tf.Variable([.3], dtype=&lt;span&gt;tf.float32)
b &lt;/span&gt;= tf.Variable([-.3], dtype=&lt;span&gt;tf.float32)
x &lt;/span&gt;=&lt;span&gt; tf.placeholder(tf.float32)
linear_model &lt;/span&gt;= W*x + b
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　1.8 当你调用tf.constant时常量被初始化，它们的值是不可以改变的，而变量当你调用tf.Variable时没有被初始化，&lt;/p&gt;
&lt;p&gt;在TensorFlow程序中要想初始化这些变量，你必须明确调用一个特定的操作，如下：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; init =&lt;span&gt; tf.global_variables_initializer()
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; sess.run(init)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　1.9 要实现初始化所有全局变量的TensorFlow子图的的处理是很重要的，直到我们调用sess.run，这些变量都是未被初始化的。&lt;/p&gt;
&lt;p&gt;既然x是一个占位符，我们就可以同时地对多个x的值进行求值linear_model，例如：&lt;/p&gt;
&lt;/div&gt;
&lt;div readability=&quot;23.5&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;(sess.run(linear_model, {x: [1,2,3,4&lt;span&gt;]}))
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; &lt;span&gt;求值linear_model 
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; &lt;span&gt;输出为
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; [0.  0.30000001  0.60000002  0.90000004]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　1.10 我们已经创建了一个模型，但是我们至今不知道它是多好，在这些训练数据上对这个模型进行评估，我们需要一个&lt;/p&gt;
&lt;p&gt;y占位符来提供一个期望的值，并且我们需要写一个loss function(损失函数)，一个损失函数度量当前的模型和提供&lt;/p&gt;
&lt;p&gt;的数据有多远，我们将会使用一个标准的损失模式来线性回归，它的增量平方和就是当前模型与提供的数据之间的损失&lt;/p&gt;
&lt;p&gt;，linear_model - y创建一个向量，其中每个元素都是对应的示例错误增量。这个错误的方差我们称为tf.square。然后&lt;/p&gt;
&lt;p&gt;，我们合计所有的错误方差用以创建一个标量，用tf.reduce_sum抽象出所有示例的错误。&lt;/p&gt;
&lt;/div&gt;
&lt;div readability=&quot;22&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; y =&lt;span&gt; tf.placeholder(tf.float32)
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; squared_deltas = tf.square(linear_model -&lt;span&gt; y)
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; loss =&lt;span&gt; tf.reduce_sum(squared_deltas)
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; &lt;span&gt;print&lt;/span&gt;(sess.run(loss, {x: [1,2,3,4], y: [0, -1, -2, -3&lt;span&gt;]}))
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt; &lt;span&gt;输出的结果为
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt; 23.66
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　1.11 我们分配一个值给W和b(得到一个完美的值是-1和1)来手动改进这一点,一个变量被初始化一个值会调用tf.Variable，&lt;/p&gt;
&lt;p&gt;但是可以用tf.assign来改变这个值，例如：&lt;/p&gt;
&lt;div readability=&quot;27.5&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;44&quot;&gt;
&lt;pre&gt;
fixW=tf.assign(W,[1&lt;span&gt;.])
fixb &lt;/span&gt;= tf.assign(b, [1&lt;span&gt;.])
sess.run([fixW, fixb])
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;(sess.run(loss, {x: [1,2,3,4], y: [0, -1, -2, -3&lt;span&gt;]}))
最终打印的结果是：
&lt;/span&gt;0.0
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　1.12 tf.train APITessorFlow提供optimizers(优化器)，它能慢慢改变每一个变量以最小化损失函数，最简单的优化器是&lt;/p&gt;
&lt;p&gt;gradient descent(梯度下降)，它根据变量派生出损失的大小,来修改每个变量。通常手工计算变量符号是乏味且容易出错的，&lt;/p&gt;
&lt;p&gt;因此，TensorFlow使用函数tf.gradients给这个模型一个描述，从而能自动地提供衍生品，简而言之，优化器通常会为你做这个。例如：&lt;/p&gt;
&lt;div readability=&quot;24.5&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;47&quot;&gt;
&lt;pre&gt;
    optimizer = tf.train.GradientDescentOptimizer(0.01&lt;span&gt;)
train &lt;/span&gt;=&lt;span&gt; optimizer.minimize(loss)
sess.run(init)&lt;/span&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt; reset values to incorrect defaults.&lt;/span&gt;
&lt;span&gt;for&lt;/span&gt; iin range(1000&lt;span&gt;):
   sess.run(train, {x: [&lt;/span&gt;1,2,3,4], y: [0, -1, -2, -3&lt;span&gt;]})
 
&lt;/span&gt;&lt;span&gt;print&lt;/span&gt;&lt;span&gt;(sess.run([W, b]))
输出结果为
[array([&lt;/span&gt;-0.9999969], dtype=float32), array([ 0.99999082], dtype=float32)]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;本文仅用于学习研究，非商业用途，如需参考，请注明出处，作者：木子龙。&lt;/p&gt;
&lt;p&gt;本文参考了以下地址的讲解，万分感谢,如有侵权，请联系我会尽快删除，929994365@qq.com：&lt;/p&gt;
&lt;p&gt;https://blog.csdn.net/lengguoxing/article/details/78456279&lt;/p&gt;
&lt;p&gt;https://www.cnblogs.com/kang06/p/9373600.html&lt;/p&gt;

&lt;/div&gt;









&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
<pubDate>Fri, 03 Aug 2018 07:36:00 +0000</pubDate>
<dc:creator>weilongyitian</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/missidiot/p/9414451.html</dc:identifier>
</item>
<item>
<title>redis 单机，主从模式配置及注意事项 - 陈明羽</title>
<link>http://www.cnblogs.com/cmyxn/p/9414457.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/cmyxn/p/9414457.html</guid>
<description>&lt;p&gt;&lt;strong&gt;前言：&lt;/strong&gt;本文先分享下如何搭建redis的主从模式配置，以及主从模式配置的注意事项。后续会继续分享如何实现一个高可用的redis服务，redis的Sentinel 哨兵模式及集群搭建。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;安装：&lt;/strong&gt;&lt;br/&gt;1，yum install gcc-c++&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;安装环境&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;2，wget http://download.redis.io/releases/redis-4.0.2.tar.gz&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;获取压缩包&lt;/li&gt;
&lt;li&gt;我的安装路径：/usr/local/redis&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;3，tar -zxvf redis-4.0.2.tar.gz&lt;/p&gt;
&lt;p&gt;4，cd redis-4.0.2&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;切换到对应目录&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;5，make&lt;/p&gt;
&lt;p&gt;自此，redis已经安装成功&lt;/p&gt;
&lt;p&gt;6，./src/redis-server redis.conf&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;启动redis，指定配置文件&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;服务启动成功如下：&lt;br/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/986865/201808/986865-20180803154212618-670095328.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;7，Ctrl+c&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;退出当前服务&lt;/li&gt;
&lt;li&gt;由于不是以守护线程的方式去启动，所以需要Ctrl+c停止服务&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;8，vi redis.conf&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;修改配置文件&lt;/li&gt;
&lt;li&gt;daemonize no 修改为 daemonize yes ，以守护线程启动&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;9，./src/redis-server redis.conf&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;再次启动redis&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;10，ps -ef |grep redis&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;查看redis服务&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;11，./src/redis-cli&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;启动客户端链接&lt;/li&gt;
&lt;li&gt;键入info，查看当前redis信息&lt;/li&gt;
&lt;li&gt;键入shutdown 停止redis服务&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;单机redis就安装和调试完了。&lt;/p&gt;
&lt;h4 id=&quot;redis-主从模式配置&quot;&gt;redis 主从模式配置&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;主从模式：&lt;/strong&gt; redis的主从模式，使用异步复制，slave节点异步从master节点复制数据，master节点提供读写服务，slave节点只提供读服务（这个是默认配置，可以通过修改配置文件 slave-read-only 控制）。master节点可以有多个从节点。配置一个slave节点只需要在redis.conf文件中指定 slaveof master-ip master-port 即可。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;本示例：一个master节点有两个slave节点&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;配置：&lt;/strong&gt;&lt;br/&gt;1，cd /usr/local/redis/redis-4.0.2&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;切换到当前redis安装路径&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;2， mkdir config&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;新建一个文件夹，存放redis的配置文件&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;3，在config下，新建三个配置文件，如下：&lt;/p&gt;
&lt;p&gt;cd config&lt;/p&gt;
&lt;p&gt;vi master-6739.conf&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;bind 0.0.0.0
port 6379
logfile &quot;6379.log&quot;
dbfilename &quot;dump-6379.rdb&quot;
daemonize yes
rdbcompression yes&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;vi slave-6380.conf&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;bind 0.0.0.0
port 6380
logfile &quot;6380.log&quot;
dbfilename &quot;dump-6380.rdb&quot;
daemonize yes
rdbcompression yes
slaveof 192.168.81.135 6379&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;vi slave-6381.conf&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;bind 0.0.0.0
port 6381
logfile &quot;6381.log&quot;
dbfilename &quot;dump-6381.rdb&quot;
daemonize yes
rdbcompression yes
slaveof 192.168.81.135 6379&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;master-6739.conf，为主节点配置文件，slave-6380.conf，slave-6381.conf为从节点配置文件&lt;/em&gt;&lt;br/&gt;&lt;em&gt;在从节点的配置文件中使用：slaveof 指定master节点&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;4，启动三台reids服务&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;[root@localhost redis-4.0.2]# ./src/redis-server config/master-6379.conf 
[root@localhost redis-4.0.2]# ./src/redis-server config/slave-6380.conf 
[root@localhost redis-4.0.2]# ./src/redis-server config/slave-6381.conf&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;查看一下redis服务&lt;br/&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/986865/201808/986865-20180803154135520-1283657648.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;测试主从模式&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;a，先分别连上三台Redis服务，获取key为name的值，通过-p 指定连接那个端口的redis服务&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;[root@localhost redis-4.0.2]# ./src/redis-cli -p 6379
127.0.0.1:6379&amp;gt; get name
(nil)
[root@localhost redis-4.0.2]# ./src/redis-cli -p 6380
127.0.0.1:6380&amp;gt; get name
(nil)
[root@localhost redis-4.0.2]# ./src/redis-cli -p 6381
127.0.0.1:6381&amp;gt; get name
(nil)
#获取的值都为空&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;b，给master节点set一个key&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;[root@localhost redis-4.0.2]# ./src/redis-cli -p 6379
127.0.0.1:6379&amp;gt; set name cmy
OK
127.0.0.1:6379&amp;gt; get name
&quot;cmy&quot;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;c，slave节点直接读取key为name的值&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;[root@localhost redis-4.0.2]# ./src/redis-cli -p 6380
127.0.0.1:6380&amp;gt; get name
&quot;cmy&quot;
[root@localhost redis-4.0.2]# ./src/redis-cli -p 6381
127.0.0.1:6381&amp;gt; get name
&quot;cmy&quot;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;d，slave节点只提供读服务，不能进行写入操作&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;127.0.0.1:6381&amp;gt; set age 23
(error) READONLY You can't write against a read only slave.&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;&lt;br/&gt;使用主从模式时应注意matser节点的持久化操作，matser节点在未使用持久化的情况详情下如果宕机，并自动重新拉起服务，从服务器会出现丢失数据的情况。&lt;/p&gt;
&lt;p&gt;首先，禁止matser服务持久化&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;127.0.0.1:6379&amp;gt; CONFIG SET save &quot;&quot;
OK&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;在master节点set一个值&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;127.0.0.1:6379&amp;gt; set age 23
OK&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;slave节点可以get到age的值&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;127.0.0.1:6380&amp;gt; get age
&quot;23&quot;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;关掉master节点服务&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;127.0.0.1:6379&amp;gt; shutdown
not connected&amp;gt; &lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;slave节点此时仍可以get到age的值&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;127.0.0.1:6380&amp;gt; get age
&quot;23&quot;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;重启master服务，此时获取不到age的值&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;[root@localhost redis-4.0.2]# ./src/redis-server config/master-6379.conf 
[root@localhost redis-4.0.2]# ./src/redis-cli -p 6379
127.0.0.1:6379&amp;gt; get age
(nil)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;slave节点此时在获取age的值为空，数据丢失&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;[root@localhost redis-4.0.2]# ./src/redis-cli -p 6380
127.0.0.1:6380&amp;gt; get age
(nil)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;数据丢失的原因：&lt;/strong&gt;因为master服务挂了之后，重启服务后，slave节点会与master节点进行一次完整的重同步操作，所以由于master节点没有持久化，就导致slave节点上的数据也会丢失掉。所以在配置了Redis的主从模式的时候，应该打开主服务器的持久化功能。&lt;/p&gt;
&lt;p&gt;到这，redis的主从模式就已经完成了&lt;/p&gt;
</description>
<pubDate>Fri, 03 Aug 2018 07:36:00 +0000</pubDate>
<dc:creator>陈明羽</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/cmyxn/p/9414457.html</dc:identifier>
</item>
<item>
<title>单例模式之懒饿汉模式简介 - 丑娃</title>
<link>http://www.cnblogs.com/yshang/p/9414429.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/yshang/p/9414429.html</guid>
<description>&lt;p&gt; &lt;em&gt;单例模式的概念：&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;单例模式的意思就是只有一个实例。单例模式确保某一个类只有一个实例，而且自行实例化并向整个系统提供这个实例。这个类称为单例类。&lt;/p&gt;

&lt;p&gt;关键点：&lt;/p&gt;

&lt;p&gt;1）一个类只有一个实例，这是最基本的&lt;/p&gt;

&lt;p&gt;2）它必须自行创建这个实例&lt;br/&gt;3）它必须自行向整个系统提供这个实例&lt;/p&gt;

&lt;p&gt;两种实现方式：懒汉式和饿汉式单例模式&lt;/p&gt;

&lt;pre&gt;
双重检查锁（DCL）实现单例模式，虽然解决了线程不安全的问题，以及保证了资源的懒加载，在需要的时候，才会进行实例化的操作。&lt;br/&gt;但是在某些情况下（比如JDK低于1.5）会出现DCL失效，所以有一种很简洁且依旧是懒加载的方法实现单例模式。写法如下所示：
&lt;/pre&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32.5&quot;&gt;&lt;img id=&quot;code_img_closed_37542ed8-b67d-49e4-a866-6ee6ee33b32c&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_37542ed8-b67d-49e4-a866-6ee6ee33b32c&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_37542ed8-b67d-49e4-a866-6ee6ee33b32c&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;60&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;  1 &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; Singleton {&lt;span&gt;//&lt;/span&gt;&lt;span&gt;懒汉式单例模式&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt;  2     &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; Singleton singleton = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;  3 
&lt;span&gt; 4&lt;/span&gt;  4     &lt;span&gt;public&lt;/span&gt;&lt;span&gt; Singleton() {
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;  5&lt;span&gt;     }
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;  6 
&lt;span&gt; 7&lt;/span&gt;  7     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;synchronized&lt;/span&gt;&lt;span&gt; Singleton getSingleton() {
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;  8         &lt;span&gt;if&lt;/span&gt; (singleton == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;  9             singleton = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Singleton();
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; 10&lt;span&gt;         }
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; 11         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; singleton;
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; 12&lt;span&gt;     }
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; 13     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; EhSingleton{&lt;span&gt;//&lt;/span&gt;&lt;span&gt;饿汉式单例模式&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt; 14         &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; EhSingleton eh = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; EhSingleton();
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; 15         &lt;span&gt;public&lt;/span&gt;&lt;span&gt; EhSingleton(){}
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; 16         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt;&lt;span&gt; EhSingleton getEhSingleton(){
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; 17             &lt;span&gt;return&lt;/span&gt;&lt;span&gt; eh;
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; 18&lt;span&gt;         }
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; 19&lt;span&gt;     }
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; 20     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; Doubleli {&lt;span&gt;//&lt;/span&gt;&lt;span&gt;懒汉式实现单例模式使用双重加锁机制&lt;/span&gt;
&lt;span&gt;21&lt;/span&gt; 21         &lt;span&gt;private&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;volatile&lt;/span&gt; Doubleli dl = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; 22         &lt;span&gt;public&lt;/span&gt;&lt;span&gt; Doubleli(){}
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; 23         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt;&lt;span&gt; Doubleli getInstance(){
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; 24             &lt;span&gt;if&lt;/span&gt;(dl == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;){
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; 25                 &lt;span&gt;synchronized&lt;/span&gt; (Doubleli.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; 26                     &lt;span&gt;if&lt;/span&gt;(dl == &lt;span&gt;null&lt;/span&gt;&lt;span&gt;){
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; 27                         dl = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Doubleli();
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; 28&lt;span&gt;                     }
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; 29&lt;span&gt;                 }
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; 30&lt;span&gt;             }
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; 31             &lt;span&gt;return&lt;/span&gt;&lt;span&gt; dl;
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; 32&lt;span&gt;         }
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; 33&lt;span&gt;     }
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; 34 }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
</description>
<pubDate>Fri, 03 Aug 2018 07:33:00 +0000</pubDate>
<dc:creator>丑娃</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/yshang/p/9414429.html</dc:identifier>
</item>
<item>
<title>JavaScript执行环境和作用域(链)的那些事 - 如是说</title>
<link>http://www.cnblogs.com/lishanlei/p/9414204.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/lishanlei/p/9414204.html</guid>
<description>&lt;h3&gt;什么是执行环境&lt;/h3&gt;
&lt;p&gt;提起作用域，我们不得不说说什么是执行环境。执行环境定义了变量或函数有权访问的其他数据，并决定其各自的行为。每一个执行环境都有一个对应的变量对象，这个对象的作用就是保存在环境中定义的变量和函数（这个变量对象我们无法直接使用）。&lt;/p&gt;

&lt;h3&gt;全局执行环境&lt;/h3&gt;
&lt;p&gt;在JavaScript中window对象表示的是全局执行环境，全局执行环境是最外围的环境，所有的全局变量和函数都是作为window对象的属性和方法的。这个执行环境在浏览器关闭时才进行销毁，也就是说window执行环境的生命周期贯穿整个浏览器显示。&lt;/p&gt;

&lt;h3&gt;执行流和环境栈&lt;/h3&gt;
&lt;p&gt;当然并不是只有window执行环境，每一个函数都有自己的执行环境，这些执行环境中所有代码执行完后，该环境被销毁。我们都知道，js中程序是以流形式执行的，当&lt;span&gt;&lt;strong&gt;执行流&lt;/strong&gt;&lt;/span&gt;执行到一个函数的时候，这个函数的执行环境会被推送到一个&lt;span&gt;&lt;strong&gt;环境栈&lt;/strong&gt;&lt;/span&gt;中，在函数执行完毕后，栈中的这个执行环境会被弹出并把控制权交个之前调用函数的执行环境。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;环境栈&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;怎么理解上文我们提到的环境栈（执行环境栈）。在逻辑上执行流依次进入的执行环境形成了一个栈，这个栈的底部永远都是全局执行环境，栈的顶部则是出于当前活动状态的执行环境，执行流执行到一个函数时会把这个函数的执行环境压到栈顶中，结束后弹出，这样做的原因其实就是JavaScript的解释器是单线程的，也就是说在一个时刻只能做一件事，其他等待执行的上下文会在栈中等待。&lt;/p&gt;

&lt;p&gt;我们用ECMAStack表示执行环境栈。foo函数被执行了三次，分别是i=1/2/3,每次调用的时候都会创建一个上下文压到栈中，最后控制权交给栈底的全局执行环境，当i==3时，当前栈中的状态应该是：&lt;/p&gt;




&lt;h3&gt;变量的作用域&lt;/h3&gt;
&lt;p&gt;在js中变量的作用域有两种：全局变量和局部变量。且所有的变量声明是通过var来定义(ES6中新增了let)。&lt;/p&gt;
&lt;p&gt;使用var声明的变量将会自动被添加到最接近的环境中，全局变量被理解为window对象的属性和方法，而局部变量只能在相对应的环境中使用&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;cke_widget_wrapper cke_widget_inline cke_widget_image cke_image_nocaption cke_widget_selected&quot; data-cke-widget-wrapper=&quot;1&quot; data-cke-filter=&quot;off&quot; data-cke-display-name=&quot;图像&quot; data-cke-widget-id=&quot;5&quot;&gt;&lt;span class=&quot;cke_reset cke_widget_drag_handler_container&quot;&gt;&lt;span class=&quot;cke_image_resizer&quot; title=&quot;点击并拖拽以改变尺寸&quot;&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1201942/201808/1201942-20180803150303567-1471616914.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;这里需要&lt;strong&gt;注意&lt;/strong&gt;的是：&lt;/p&gt;
&lt;p&gt;1.在定义变量的时候如果去掉前面的var，那么局部变量将会升级为全局变量。&lt;/p&gt;
&lt;p&gt;2.局部变量的优先级高于同名的全局变量。即如果在函数中也定义了一个变量名为gla的变量，在函数中使用的时候，输出的应该是这个局部变量的值。&lt;/p&gt;
&lt;p&gt;这两点的原因也会在作用域链中体现。&lt;/p&gt;

&lt;h3&gt;作用域和声明提前&lt;/h3&gt;
&lt;p&gt;首先我们需要注意的是，在js中没有块级作用域这一说，再其他语言中，有花括号“{}”封闭的代码块都有自己的作用域，作用域外无法使用作用域内定义的变量，因为作用域在执行完成里面的内容后会被销毁。我们可以看下面的代码:&lt;/p&gt;

&lt;p&gt;在js中,if语句中的变量声明会将变量添加到当前的执行环境中去，所以在js中使用for循环时要注意（ES6中对于变量定义新增了let,可以解决这个问题）&lt;/p&gt;

&lt;p&gt;下面我们来理解变量的声明提前。函数作用域就是：变量在声明他们的函数体以及这个函数体嵌套的任意函数体内都是有定义的（出自：《JavaScript高级程序设计》）。&lt;/p&gt;
&lt;p&gt;我们可以理解为变量在声明之前就可以使用，这种特性叫做&lt;span&gt;&lt;strong&gt;声明提前&lt;/strong&gt;&lt;/span&gt;。js程序在正是执行之前，会将所有var声明的变量和function声明的函数预读到所在作用域的顶部，对于var声明只是将声明提前，赋值仍然在原位置，function声明，会将函数名称和函数体都提前，而且先预声明变量在预定义函数。&lt;/p&gt;




&lt;p&gt;当代码在环境中执行时，会创建变量对象的一个作用域链。&lt;/p&gt;
&lt;p&gt;作用域链的作用是保证对执行环境有权访问所有变量和函数的有序访问。&lt;/p&gt;
&lt;p&gt;在作用域链的前端始终都是当前执行的代码所在的执行环境的变量对象（这个环境如果是函数，会把它的活动对象作为变量对象，活动对象最开始只包含一个变量，也就是arguments对象），作用域链中的下一个变量对象来自外部包含环境，在下一个变量对象时来自下一个包含环境一直延伸到全局执行环境，即全局执行环境始终都是作用域链的最后一个对象。&lt;/p&gt;

&lt;p&gt;变量名的解析的过程实际就是沿着作用域链一层一层搜索标识符的过程，开始是从作用域链的前端进行，然后逐级向后直至找到为止。&lt;/p&gt;
&lt;p&gt;例如：在上面这个小例子中函数f()的作用域上有两个对象，一个是自己的变量对象，一个就是全局环境的变量对象，当在函数中使用test变量时会先从作用域链的前端，也就是当前执行环境寻找，没有找到，会往后倒全局执行环境中寻找，而test变量是在全局执行环境中定义的，所以会在全局执行环境中找到这个变量（如果没有找到，证明这个标识符未被定义，浏览器会抛出Uncaught ReferenceError）。&lt;/p&gt;
&lt;p&gt;再看一个例子：&lt;/p&gt;

&lt;p&gt;通过上面的例子可以说明，内部环境可以通过作用域访问所有的外部环境，但是外部环境不能访问内部环境中的任何变量和函数，每个环境都可以向上搜索作用域链，但任何环境都不能通过向下搜索作用域链而进入另一个环境。这样也就解释了上面我们所说的如果局部环境中存在同名的标识符，那么会覆盖全局变量。&lt;/p&gt;


&lt;p&gt;以上~~~&lt;/p&gt;
</description>
<pubDate>Fri, 03 Aug 2018 07:05:00 +0000</pubDate>
<dc:creator>如是说</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/lishanlei/p/9414204.html</dc:identifier>
</item>
<item>
<title>实现MySQL数据库的实时备份 - 吴 剑</title>
<link>http://www.cnblogs.com/wu-jian/p/9396739.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/wu-jian/p/9396739.html</guid>
<description>&lt;p class=&quot;wj_title&quot;&gt;实现MySQL数据库的实时备份&lt;/p&gt;
&lt;p class=&quot;wj_subtitle&quot;&gt;使用MySQL Replication&lt;/p&gt;
&lt;p&gt;吴剑 2018-08-03&lt;/p&gt;
&lt;p&gt;原创文章，转载必需注明出处：&lt;a href=&quot;http://www.cnblogs.com/wu-jian&quot;&gt;http://www.cnblogs.com/wu-jian&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;wj_hide&quot;&gt;吴剑 http://www.cnblogs.com/wu-jian&lt;/p&gt;
&lt;p class=&quot;wj_title_1&quot;&gt;前言&lt;/p&gt;
&lt;p&gt;数据库实时备份的需求很常见，MySQL本身提供了 Replication 机制，摘译官方介绍如下：&lt;/p&gt;
&lt;p&gt;MySQL Replication 可以将一个主数据库中的数据同步到一个或多个从数据库中。并且这个同步过程默认以异步方式工作，不需要保持主从数据库的实时连接（即允许连接中断）。同时允许自定义配置需同步的数据库及数据表。&lt;/p&gt;
&lt;p&gt;MySQL Replication 的优点及应用场景如下：&lt;/p&gt;
&lt;p&gt;1、通过 MySQL Replication 实现负载均衡与读写分离（主数据库仅更新，从数据库仅读取），提升数据库性能。&lt;/p&gt;
&lt;p&gt;2、通过 MySQL Replication 实现数据的实时备份，保证数据安全。&lt;/p&gt;
&lt;p&gt;3、通过 MySQL Replication 实现数据的离线分析（主数据库生成数据，从数据库分析计算不影响主数据库性能）。&lt;/p&gt;
&lt;p&gt;4、数据分发。&lt;/p&gt;
&lt;p&gt;MySQL Replication完整的官方文档请参阅：&lt;a href=&quot;https://dev.mysql.com/doc/refman/5.7/en/replication.html&quot; target=&quot;_blank&quot;&gt;https://dev.mysql.com/doc/refman/5.7/en/replication.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;剑 http://www.cnblogs.com/wu-jian&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;wj_title_1&quot;&gt;工作原理&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/113726/201808/113726-20180803091308140-1970741375.jpg&quot; alt=&quot;MySQL Replication 工作原理&quot;/&gt;&lt;/p&gt;
&lt;p&gt;1、Master中的所有数据库变更事件写入Binary Log文件&lt;/p&gt;
&lt;p&gt;2、当在Slave中执行“SLAVE START”命令时，开启Slave I/O Thread，并连接Master&lt;/p&gt;
&lt;p&gt;3、Master侦测到Slave I/O Thread的连接，开启Log Jump Thread进行响应&lt;/p&gt;
&lt;p&gt;4、Master Binary Log经Master Log Jump Thread和Slave I/O Thread传输至Slave Relay Log &lt;/p&gt;
&lt;p&gt;5、Slave SQL Thread将Relay Log还原至数据，同步完成&lt;/p&gt;
&lt;p&gt;注：可使用“SHOW PROCESSLIST”命令在Master和Slave中查看对应线程的运行情况&lt;/p&gt;
&lt;p&gt;&lt;span&gt;吴剑 http://www.cnblogs.com/wu-jian&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;wj_title_1&quot;&gt;配置Master&lt;/p&gt;
&lt;p&gt;开启Binary Log并设置ServerID，ServerID必须唯一，取值范围1至2&lt;sup&gt;32&lt;/sup&gt;-1&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre readability=&quot;7&quot;&gt;
[mysqld]&lt;br/&gt;# 开启Binary Log
log-bin=mysql-bin&lt;br/&gt;# 设置全局ID
server-id=1&lt;p&gt;# 指定需同步的数据库（因为数据库名称可能包含逗号，因此多个数据库必须重复配置多次而不能以逗号分隔）&lt;br/&gt;binlog-do-db=database_name&lt;br/&gt;# 指定禁止同步的数据库&lt;br/&gt;binlog-ignore-db=database_name&lt;br/&gt;# 指定Binary Log格式&lt;br/&gt;binlog_format=MIXED
&lt;/p&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;创建同步帐号&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;因为每个Slave均需要使用帐号密码连接至主数据库，所以在主数据库上必须提供帐号。建议使用一个独立帐号，仅授权数据同步权限。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;CREATE&lt;/span&gt; &lt;span&gt;USER&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;repl&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;@&lt;span&gt;'&lt;/span&gt;&lt;span&gt;%.example.com&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; IDENTIFIED &lt;span&gt;BY&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;password&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;GRANT&lt;/span&gt; &lt;span&gt;REPLICATION&lt;/span&gt; SLAVE &lt;span&gt;ON&lt;/span&gt; &lt;span&gt;*&lt;/span&gt;.&lt;span&gt;*&lt;/span&gt; &lt;span&gt;TO&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;repl&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;@&lt;span&gt;'&lt;/span&gt;&lt;span&gt;%.example.com&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;获取Binary Log信息&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Slave启动I/O Thread时需要传入Binary Log部分信息，因此需要获取一下Binary Log信息：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
SHOW MASTER STATUS;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;使用“SHOW MASTER STATUS”命令获取Binary Log信息，并记录File和Position字段值。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;同步前保证Master与Slave的数据一致&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在Slave启动I/O Thread前，需确保Master与Slave的数据一致，因此先对Master进行锁定（防止数据变更），手动同步并确保数据一致后再解锁。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
FLUSH TABLES WITH READ LOCK;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;手动数据同步相关操作略...&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
UNLOCK TABLES;
&lt;/pre&gt;&lt;/div&gt;

&lt;p class=&quot;wj_title_1&quot;&gt;配置Slave&lt;/p&gt;
&lt;p&gt;设置ServerID，可不必开启BinLog：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34.5&quot;&gt;
&lt;pre readability=&quot;6&quot;&gt;
[mysqld]&lt;br/&gt;# 设置全局ID
server-id=2&lt;p&gt;# 指定同步的数据库&lt;br/&gt;replicate-do-db=database_name&lt;br/&gt;# 指定禁止同步的数据库&lt;br/&gt;replicate_ignore_db=database_name
&lt;/p&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;设置Master信息，执行如下命令：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
mysql&amp;gt; CHANGE MASTER TO
    -&amp;gt;     MASTER_HOST='master_host_name',&lt;br/&gt;-&amp;gt;     MASTER_PORT='master_host_port',
    -&amp;gt;     MASTER_USER='replication_user_name',
    -&amp;gt;     MASTER_PASSWORD='replication_password',
    -&amp;gt;     MASTER_LOG_FILE='recorded_log_file_name',
    -&amp;gt;     MASTER_LOG_POS=recorded_log_position;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;启动I/O Thread&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
START SLAVE;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;查看同步状态：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
SHOW SLAVE STATUS;
&lt;/pre&gt;&lt;/div&gt;
&lt;p class=&quot;wj_hide&quot;&gt;吴剑 http://www.cnblogs.com/wu-jian&lt;/p&gt;
&lt;p class=&quot;wj_title_1&quot;&gt;Master的binlog_format 参数&lt;/p&gt;
&lt;p&gt;binlog_format用于配置Binary Log的格式，支持如下三种类型：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Row&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;按数据行的变化进行记录，该模式与SQL语句、存储过程、函数、触发器等无关，它只关心每一行的数据是否发生变化，如变化则记录，因此Row模式是准确度最高的。但它的缺点是某些情况下会产生大量内容而导致效率下降，比如表结构发生变更时。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Statement&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;按SQL语句进行记录，很明显这个解决了Row模式的短板，但问题是准确度不够高，因为SQL语句可以非常复杂并且容易出现意外情况。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Mixed&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Row与Statement混合模式，由MySQL自动决定什么时候使用Row，什么时候使用Statement，这也是默认模式。&lt;/p&gt;
&lt;p class=&quot;wj_hide&quot;&gt;吴剑 http://www.cnblogs.com/wu-jian&lt;/p&gt;
&lt;p class=&quot;wj_title_1&quot;&gt;replicate-do-db注意事项&lt;/p&gt;
&lt;p&gt;当在Slave中使用replicate-do-db和replicate-ignore-db配置项时，需特别注意，跨数据库的SQL语句将不会被同步，如：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot;&gt;
&lt;pre&gt;
replicate-do-db=a
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;use&lt;/span&gt;&lt;span&gt; b;
&lt;/span&gt;&lt;span&gt;update&lt;/span&gt; a.some_table &lt;span&gt;set&lt;/span&gt; some_field &lt;span&gt;=&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;some value&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;解决方案是使用replicate_wild_do_table和replicate_wild_ignore_table，如：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
replicate_wild_do_table=database_name.%
replicate_wild_ignore_table=database_name.%
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;吴剑 http://www.cnblogs.com/wu-jian&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;全文完&amp;gt;&lt;/p&gt;
&lt;p class=&quot;wj_hide&quot;&gt;吴剑 http://www.cnblogs.com/wu-jian&lt;/p&gt;
&lt;div readability=&quot;5.8049132947977&quot;&gt;
&lt;div&gt;&lt;img src=&quot;https://images.cnblogs.com/cnblogs_com/wu-jian/278681/o_weixin.png?r=1&quot; alt=&quot;微信打赏&quot;/&gt;&lt;/div&gt;
&lt;div readability=&quot;7.1445086705202&quot;&gt;&lt;span&gt;如果您觉得本文对您有所帮助，可扫描两侧的二维码向作者打赏。您的支持是原创的源动力！&lt;/span&gt;&lt;br/&gt;作者：&lt;a href=&quot;http://www.cnblogs.com/wu-jian/&quot;&gt;吴剑&lt;/a&gt;&lt;br/&gt;出处：&lt;a href=&quot;http://www.cnblogs.com/wu-jian/&quot;&gt;http://www.cnblogs.com/wu-jian/&lt;/a&gt;&lt;br/&gt;本文版权归作者所有，欢迎转载，但必需注明出处，并且在转载页面明显位置给出原文连接，否则保留追究法律责任的权利。&lt;/div&gt;
&lt;div&gt;&lt;img src=&quot;https://images.cnblogs.com/cnblogs_com/wu-jian/278681/o_zfb.png?r=2&quot; alt=&quot;支付宝打赏&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
</description>
<pubDate>Fri, 03 Aug 2018 06:58:00 +0000</pubDate>
<dc:creator>吴 剑</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/wu-jian/p/9396739.html</dc:identifier>
</item>
<item>
<title>散列——排解冲突（1） 分离链接法 - 仪式黑刃</title>
<link>http://www.cnblogs.com/hongshijie/p/9414015.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/hongshijie/p/9414015.html</guid>
<description>&lt;p&gt;之前我们说过，对于需要动态维护的散列表 冲突是不可避免的，无论你的散列函数设计的有多么精妙。因此我们解决的重要问题就是：一旦发生冲突，我们该如何加以排解？&lt;/p&gt;

&lt;p&gt;我们在这里讨论最常见的两种方法：分离链接法和开放定址法。本篇探讨前者，下一篇讨论后者。&lt;/p&gt;

&lt;h2&gt;分离链接法&lt;/h2&gt;
&lt;p&gt;&lt;span lang=&quot;zh-CN&quot;&gt;解决冲突的第一种方法通常叫做分离链接法（separate&lt;span lang=&quot;en-US&quot;&gt;chaining&lt;span lang=&quot;zh-CN&quot;&gt;），做法是将散列到同一个值的所有元素保留到一个链表中。那……为什么要这么做呢？保留到数组中不行么？下面我们来分析一下。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span lang=&quot;zh-CN&quot;&gt;我们先从最初的思路说起，所谓的冲突形象来说就是一山不容二虎，倘若的确有两只老虎呢？答：用铁丝网将这座山分成两部分，两只老虎各居一侧，这是最朴素的办法了，这种思路也就是多槽位法（multiple&lt;span lang=&quot;en-US&quot;&gt;slots&lt;span lang=&quot;zh-CN&quot;&gt;）。如果此前的桶单元对应于山，那么每一个槽位（slot）就对应于在这个山中用铁丝网分割出的一个子区域。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1262741/201808/1262741-20180803142249097-1812907224.png&quot; alt=&quot;&quot; width=&quot;454&quot; height=&quot;249&quot;/&gt;&lt;/p&gt;
&lt;p&gt;对于这个散列表，每一个横条就是一个一个又一个的桶单元。在这里，我们将每个桶单元都继续细分为ABCD，4个槽位，每个桶内部的这些槽位就可以用来存放彼此冲突的若干个词条。&lt;/p&gt;
&lt;p&gt;具体看一个例子吧，比如这就是一个长度为23的散列表，其中每一个桶都被分成了3个槽位&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1262741/201808/1262741-20180803142305043-1337286514.png&quot; alt=&quot;&quot; width=&quot;251&quot; height=&quot;498&quot;/&gt;&lt;/p&gt;
&lt;p&gt;往里面放入数据之后变成这样： &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1262741/201808/1262741-20180803142336216-1392158741.png&quot; alt=&quot;&quot; width=&quot;243&quot; height=&quot;559&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span lang=&quot;zh-CN&quot;&gt;可以看到这里尽管有些词条的确会彼此冲突，但依然可以在对应的桶中和平共处，被分隔开。当然，查找过程需要多出一步：除了需要根据关键码确定对应的桶单元地址，还需要在桶中遍历所有的槽位&lt;span lang=&quot;zh-CN&quot;&gt;——&lt;span lang=&quot;zh-CN&quot;&gt;直到找到目标&lt;span lang=&quot;zh-CN&quot;&gt;or&lt;span lang=&quot;zh-CN&quot;&gt;失败。&lt;span lang=&quot;en-US&quot;&gt;不过只要槽位数量不多&lt;span lang=&quot;zh-CN&quot;&gt;，就还能保证O（&lt;span lang=&quot;en-US&quot;&gt;1&lt;span lang=&quot;zh-CN&quot;&gt;）的效率。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;但是！有一个显而易见的问题。。。。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1262741/201808/1262741-20180803142400428-638837723.jpg&quot; alt=&quot;&quot; width=&quot;398&quot; height=&quot;232&quot;/&gt;&lt;/p&gt;

&lt;p&gt;找到对应的地址之后，遍历到哪算完啊，我还得往前扫描多久啊？问题就在这：每一个桶具体应该细分为多少个槽位，在事先几乎是无法预测的。如果分的过细就会造成空间上的浪费，而反过来，无论分的多细，在极端的情况下，仍有可能在某个特定的桶中发生大规模的冲突。那么面临这一两难的抉择该如何破解呢？&lt;/p&gt;

&lt;p&gt;&lt;span lang=&quot;zh-CN&quot;&gt;多槽位法&lt;span lang=&quot;en-US&quot;&gt;在空间和时间效率上的两难处境&lt;span lang=&quot;zh-CN&quot;&gt;，我在学习向量（动态数组）的时候也遇到过，那时的解决办法就是用列表（这里就采用指针链表实现）。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1262741/201808/1262741-20180803142544306-1356061545.png&quot; alt=&quot;&quot; width=&quot;446&quot; height=&quot;359&quot;/&gt;&lt;/p&gt;

&lt;p&gt;新的策略如这幅图所示：如果这个长条是整个散列表，那么其中的每一个单元都将各自拥有一个对应的列表，而每一个列表都可以用来存放一组彼此冲突的词条。那么答案就水落石出了——将相互冲突的词条串接起来，也就是所谓的separate chaining。举个例子：&lt;/p&gt;
&lt;p&gt;&lt;span lang=&quot;zh-CN&quot;&gt;这里我们假设关键字是前&lt;span lang=&quot;en-US&quot;&gt;10个完全平方数&lt;span lang=&quot;zh-CN&quot;&gt;，&lt;span lang=&quot;en-US&quot;&gt;hash(x)=x%10&lt;span lang=&quot;zh-CN&quot;&gt;，这里&lt;span lang=&quot;en-US&quot;&gt;size不是素数&lt;span lang=&quot;zh-CN&quot;&gt;，只是为了简便。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1262741/201808/1262741-20180803142614770-127102873.png&quot; alt=&quot;&quot; width=&quot;281&quot; height=&quot;285&quot;/&gt;&lt;/p&gt;

&lt;p&gt;相对于多槽位法，独立链法的优势非常明显：除了最初的表头，我们无需预留任何更多的空间，甚至如果空间很紧，更可取的方法是避免使用这些表头。而且表的长度可以根据需要自由的伸缩，只要系统的资源足够，任意多次的冲突都可以解决。得益于我们之前实现的表结构，我们只需寥寥几句即可实现相应的散列表结构。&lt;/p&gt;

&lt;p&gt;下面来谈谈实现策略。&lt;/p&gt;

&lt;p&gt;&lt;span lang=&quot;zh-CN&quot;&gt;先给出实现分离链接法所需要的类型声明。里面的ListNode&lt;span lang=&quot;en-US&quot;&gt;结构和之前的链表声明相同&lt;span lang=&quot;zh-CN&quot;&gt;，而散列表结构包含一个链表数组（和数组中链表的个数），在散列表结构初始化时动态分配空间。此处的HashTable类型就是指向表头的指针。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#ifndef HashSep_h
&lt;/span&gt;&lt;span&gt;#define&lt;/span&gt; HashSep_h
&lt;span&gt;struct&lt;/span&gt;&lt;span&gt; ListNode;
typedef &lt;/span&gt;&lt;span&gt;struct&lt;/span&gt; ListNode *&lt;span&gt;Position;
&lt;/span&gt;&lt;span&gt;struct&lt;/span&gt;&lt;span&gt; HashTb1;
typedef &lt;/span&gt;&lt;span&gt;struct&lt;/span&gt; HashTb1 *&lt;span&gt;HashTable;

HashTable Init(&lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt; size);
&lt;/span&gt;&lt;span&gt;int&lt;/span&gt; Delete(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; key,HashTable H);
&lt;/span&gt;&lt;span&gt;void&lt;/span&gt; Insert(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; key, HashTable H);
Position Find(&lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt; key,HashTable H);
Position FindPre(&lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt; key,HashTable H);
&lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt; Retrieve(Position P);
&lt;/span&gt;&lt;span&gt;#endif&lt;/span&gt; /* HashSep_h */

&lt;span&gt;struct&lt;/span&gt;&lt;span&gt; ListNode {
    &lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt; value;
    Position next;
};

typedef Position List;

&lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt;这里的List *TheLists将会是一个指针数组，用来充当表头，等待后续分配节点。
 这个例子中我们使用表头（有时候空间资源比较紧可以省略表头），虽然这有点浪费。
 &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;struct&lt;/span&gt;&lt;span&gt; HashTb1 {
    &lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt; TableSize;
    List &lt;/span&gt;*&lt;span&gt;TheLists;
};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;但是有个问题要小心&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1262741/201808/1262741-20180803142757485-179549094.jpg&quot; alt=&quot;&quot; width=&quot;140&quot; height=&quot;173&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span lang=&quot;zh-CN&quot;&gt;就是The&lt;span lang=&quot;en-US&quot;&gt;List域实际上是一个指向“指向ListNode结构的指针”的指针&lt;span lang=&quot;zh-CN&quot;&gt;，二级指针。如果不使用&lt;span lang=&quot;en-US&quot;&gt;typedef&lt;span lang=&quot;zh-CN&quot;&gt;，那可能会相当混乱——毕竟没人想看见代码里出现一堆&lt;span lang=&quot;en-US&quot;&gt;struct** TheLists这种鬼玩意&lt;span lang=&quot;zh-CN&quot;&gt;。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span lang=&quot;zh-CN&quot;&gt;为执行Find，我们要用散列函数来确定究竟考察哪个表。此时我们顺次遍历并返回被查找项所在的位置。为执行Insert，我们要先查查有没有重复的，遍历一下（如果插入重复元素，通常要留出一个额外的变量，用来计数，重复元出现时&lt;span lang=&quot;en-US&quot;&gt;+1&lt;span lang=&quot;zh-CN&quot;&gt;）。如果是新元素，那么插到前端或者末尾都行，哪个容易就做哪个&lt;span lang=&quot;en-US&quot;&gt;hhhh  编写程序时这是最容易寻址的一种方式&lt;span lang=&quot;zh-CN&quot;&gt;。有时候新元素插入前端不仅因为方便，而且还因为新被插入的元素被最先访问的可能性最大（我大散列自有国情在此）。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span lang=&quot;en-US&quot;&gt;Find思路说清了&lt;span lang=&quot;zh-CN&quot;&gt;，开始干吧，先初始化&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
HashTable Init(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; size){
    HashTable H;
    &lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt; i;
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (size&amp;lt;&lt;span&gt;MinTableSize) {
        printf(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Table size too small\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; nullptr;
    }
    
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;Allocate table&lt;/span&gt;
    H=(HashTable)&lt;span&gt;malloc&lt;/span&gt;(&lt;span&gt;sizeof&lt;/span&gt;(&lt;span&gt;struct&lt;/span&gt;&lt;span&gt; HashTb1));
    H&lt;/span&gt;-&amp;gt;TableSize=&lt;span&gt;aPrime;
    
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;Allocate array of lists&lt;/span&gt;
    H-&amp;gt;TheLists=(List*)&lt;span&gt;malloc&lt;/span&gt;(&lt;span&gt;sizeof&lt;/span&gt;(List)*H-&amp;gt;&lt;span&gt;TableSize);
    
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;Allocate list headers&lt;/span&gt;
    &lt;span&gt;for&lt;/span&gt; (i=&lt;span&gt;0&lt;/span&gt;; i&amp;lt;H-&amp;gt;TableSize; i++&lt;span&gt;) {
        H&lt;/span&gt;-&amp;gt;TheLists[i]=(List)&lt;span&gt;malloc&lt;/span&gt;(&lt;span&gt;sizeof&lt;/span&gt;(&lt;span&gt;struct&lt;/span&gt;&lt;span&gt; ListNode));
        H&lt;/span&gt;-&amp;gt;TheLists[i]-&amp;gt;next=&lt;span&gt;nullptr;
    }
     &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; H;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span lang=&quot;en-US&quot;&gt;这里用到了与栈的数组视线中相同的想法&lt;span lang=&quot;zh-CN&quot;&gt;。大概情形如下，做了一个简陋的图&lt;span lang=&quot;en-US&quot;&gt;233&lt;span lang=&quot;zh-CN&quot;&gt;：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1262741/201808/1262741-20180803143013408-1363717155.png&quot; alt=&quot;&quot; width=&quot;421&quot; height=&quot;352&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span lang=&quot;en-US&quot;&gt;不过这个程序里的一个低效之处在于malloc执行了TableSize次&lt;span lang=&quot;zh-CN&quot;&gt;，这样写是为了方便直观理解，也可以再循环之前调用一次&lt;span lang=&quot;en-US&quot;&gt;malloc&lt;span lang=&quot;zh-CN&quot;&gt;然后循环里对接，从而减少开销，像这样：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
List header=(List)&lt;span&gt;malloc&lt;/span&gt;(H-&amp;gt;TableSize * &lt;span&gt;sizeof&lt;/span&gt;(&lt;span&gt;struct&lt;/span&gt;&lt;span&gt; ListNode));
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;Allocate list headers&lt;/span&gt;
    &lt;span&gt;for&lt;/span&gt; (i=&lt;span&gt;0&lt;/span&gt;; i&amp;lt;H-&amp;gt;TableSize; i++&lt;span&gt;) {
        &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;H-&amp;gt;TheLists[i]=(List)malloc(sizeof(struct ListNode));&lt;/span&gt;
        H-&amp;gt;TheLists[i]=&amp;amp;&lt;span&gt;header[i];
        H&lt;/span&gt;-&amp;gt;TheLists[i]-&amp;gt;next=&lt;span&gt;nullptr;
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span lang=&quot;zh-CN&quot;&gt;然后实现Find，对Fi&lt;span lang=&quot;en-US&quot;&gt;nd&lt;span lang=&quot;zh-CN&quot;&gt;（&lt;span lang=&quot;en-US&quot;&gt;key,H)的调用返回一个指向key的指针&lt;span lang=&quot;zh-CN&quot;&gt;。如果&lt;span lang=&quot;en-US&quot;&gt;key是一个string&lt;span lang=&quot;zh-CN&quot;&gt;，那么比较和赋值必须用&lt;span lang=&quot;en-US&quot;&gt;strcmp和strcpy进行&lt;span lang=&quot;zh-CN&quot;&gt;。（以后补充上&lt;span lang=&quot;en-US&quot;&gt;C++代码的时候就不用这么麻烦的方法了&lt;span lang=&quot;zh-CN&quot;&gt;）&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
Position Find(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; key,HashTable H) {
    List L&lt;/span&gt;=H-&amp;gt;TheLists[Hash(key, H-&amp;gt;&lt;span&gt;TableSize)];
    Position P&lt;/span&gt;=L-&amp;gt;&lt;span&gt;next;
    
    &lt;/span&gt;&lt;span&gt;while&lt;/span&gt; (P &amp;amp;&amp;amp; P-&amp;gt;value!=&lt;span&gt;key)
        P&lt;/span&gt;=P-&amp;gt;&lt;span&gt;next;
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; P;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;然后说插入新元素，如果插入的项已经存在那我们就什么也不做；否则就插入表的前端。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;void&lt;/span&gt; Insert(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; key, HashTable H) {
    Position p,newCell;
    List L;
    
    p&lt;/span&gt;=&lt;span&gt;Find(key, H);
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!p) {   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;key尚未存在&lt;/span&gt;
        newCell=(List)&lt;span&gt;malloc&lt;/span&gt;(&lt;span&gt;sizeof&lt;/span&gt;(&lt;span&gt;struct&lt;/span&gt;&lt;span&gt; ListNode));
        L&lt;/span&gt;=H-&amp;gt;TheLists[Hash(key, H-&amp;gt;TableSize)];&lt;span&gt;//&lt;/span&gt;&lt;span&gt;找到对应的桶，这时（可能）发生冲突了，就往前塞进去一个槽&lt;/span&gt;
        newCell-&amp;gt;next=L-&amp;gt;next;   &lt;span&gt;//&lt;/span&gt;&lt;span&gt;这老三步了，装填数据，插入前端&lt;/span&gt;
        newCell-&amp;gt;value=&lt;span&gt;key;
        L&lt;/span&gt;-&amp;gt;next=&lt;span&gt;newCell;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span lang=&quot;zh-CN&quot;&gt;这里的程序是作为例子方便理解，因此处于表意的目的牺牲了一部分性能，比如这里计算了&lt;span lang=&quot;en-US&quot;&gt;2次hash函数&lt;span lang=&quot;zh-CN&quot;&gt;，多余的计算总是不好的，所以后续还需要进一步优化重写。不过作为例子它的使命已经完成了。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span lang=&quot;zh-CN&quot;&gt;删除的语义是返回被删除的关键字，以便。。。留作念想&lt;span lang=&quot;en-US&quot;&gt;2333&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
&lt;span&gt;int&lt;/span&gt; Delete(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; key,HashTable H) {
    Position cur,pre;
    cur&lt;/span&gt;=&lt;span&gt;Find(key, H);
    pre&lt;/span&gt;=&lt;span&gt;FindPre(key, H);
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (cur) {
        pre&lt;/span&gt;-&amp;gt;next=cur-&amp;gt;&lt;span&gt;next;
        cur&lt;/span&gt;-&amp;gt;next=nullptr;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;防止野指针&lt;/span&gt;
        &lt;span&gt;free&lt;/span&gt;&lt;span&gt;(cur);
    }
    &lt;/span&gt;&lt;span&gt;else&lt;/span&gt; printf(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;%d has not been found!\n&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,key);
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; key;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 这里的FindPre实现如下：和Find差不多，只是多往后试探了一步（如果用双向链表就不用这样了，双链表的实现在我的github里，右侧边栏有地址）&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
Position FindPre(&lt;span&gt;int&lt;/span&gt;&lt;span&gt; key,HashTable H) {
    List L&lt;/span&gt;=H-&amp;gt;TheLists[Hash(key, H-&amp;gt;TableSize)]; &lt;span&gt;//&lt;/span&gt;&lt;span&gt;指向要放的那个桶&lt;/span&gt;
    Position P=L-&amp;gt;&lt;span&gt;next;
    
    &lt;/span&gt;&lt;span&gt;while&lt;/span&gt; (P &amp;amp;&amp;amp; P-&amp;gt;next-&amp;gt;value!=&lt;span&gt;key)
        P&lt;/span&gt;=P-&amp;gt;&lt;span&gt;next;
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; P;

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span lang=&quot;zh-CN&quot;&gt;除了链表之外，任何的方案都有可能用来解决冲突：一颗BST甚至另一个散列表均可胜任。但是我们所希翼的是，如果表的&lt;span lang=&quot;en-US&quot;&gt;size大&lt;span lang=&quot;zh-CN&quot;&gt;，同时&lt;span lang=&quot;en-US&quot;&gt;hash策略足够好&lt;span lang=&quot;zh-CN&quot;&gt;，那么所有的表就会尽可能短。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span lang=&quot;zh-CN&quot;&gt;再做一些细致分析：我们定义散列表的装填因子&lt;span lang=&quot;en-US&quot;&gt;lambda=表中总元素&lt;span lang=&quot;zh-CN&quot;&gt;／&lt;span lang=&quot;en-US&quot;&gt;size&lt;span lang=&quot;zh-CN&quot;&gt;，在上面的例子中，&lt;span lang=&quot;en-US&quot;&gt;lambda=1.0&lt;span lang=&quot;zh-CN&quot;&gt;，表的平均长度也是&lt;span lang=&quot;en-US&quot;&gt;lambda&lt;span lang=&quot;zh-CN&quot;&gt;。执行&lt;span lang=&quot;en-US&quot;&gt;find需要的总时间是计算散列函数的O&lt;span lang=&quot;zh-CN&quot;&gt;（&lt;span lang=&quot;en-US&quot;&gt;1&lt;span lang=&quot;zh-CN&quot;&gt;）&lt;span lang=&quot;en-US&quot;&gt;+遍历表的时间&lt;span lang=&quot;zh-CN&quot;&gt;。在一次不成功的查找中，遍历的平均数量为&lt;span lang=&quot;en-US&quot;&gt;lamda&lt;span lang=&quot;zh-CN&quot;&gt;，不包括最后的null。成功的查找则需要遍历大约&lt;span lang=&quot;en-US&quot;&gt;1+lam/2个节点&lt;span lang=&quot;zh-CN&quot;&gt;（具体的推导步骤我去CLRS上看看，然后附上来），他保证必然会遍历至少一个节点，因为查找成功了，但是我们也希望沿着一个表&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span lang=&quot;zh-CN&quot;&gt;中途就能找到匹配元素。这就说明了，表的大小实际上不重要，而装填因子才是最重要的。分离链接散列的一般原则是：使得表的大小尽量与预料的元素个数差不多（lam&lt;span lang=&quot;en-US&quot;&gt;b=1&lt;span lang=&quot;zh-CN&quot;&gt;）。正如前面说过的，让表的&lt;span lang=&quot;en-US&quot;&gt;size是素数从而保证了一个良好的分布&lt;span lang=&quot;zh-CN&quot;&gt;，这也是一个好方法。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span lang=&quot;zh-CN&quot;&gt;所以我们可以看到分离链接是多么智慧的一种方法啊，优雅而巧妙的避开了一个老大难的问题：我到底该留几个槽位？而且保证了插入新元素的常数时间，可以解决任意多次的冲突，只要你内存吃得消，时间足够多，而且有链表作为基础，不会卡在指针调整上，实现&lt;span lang=&quot;en-US&quot;&gt;起来十分&lt;span lang=&quot;zh-CN&quot;&gt;便利&lt;span lang=&quot;en-US&quot;&gt;……&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1262741/201808/1262741-20180803143321313-674535454.png&quot; alt=&quot;&quot; width=&quot;405&quot; height=&quot;277&quot;/&gt;&lt;/p&gt;

&lt;p&gt;嗯。。。当然，这种方法的缺点也同样是很明显的，比如需要引入额外的指针，而为了生成或销毁节点，也需要借助动态内存的申请。相对于常规的操作，此类动态申请操作的时间成本大致要高出两个数量级。然而这种方法最大的缺陷还不仅于此，还有系统的缓存功能，在这里每个桶内部的查找都是沿着对应的列表顺序进行的，然而在此之前，不同列表中各节点的插入和销毁次序完全是随机的。因此对于任何一个列表而言，其中的节点在物理空间上，往往不是连续分布的。那系统很难预测你的访问方向了，无法通过有效的缓存加速查找过程。当散列表的规模非常之大，以至于不得不借助IO时，这一矛盾就显得更加突出了。&lt;/p&gt;

&lt;p&gt;总结一下分离链接的优劣之处吧&lt;/p&gt;
&lt;p&gt;优点：&lt;/p&gt;
&lt;ul type=&quot;disc&quot;&gt;&lt;li&gt;无需为每个桶预留多个槽位&lt;/li&gt;
&lt;li&gt;可解决任意多次冲突&lt;/li&gt;
&lt;li&gt;删除操作简单、统一&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;缺点：&lt;/p&gt;
&lt;ul type=&quot;disc&quot;&gt;&lt;li&gt;指针需要额外空间&lt;/li&gt;
&lt;li&gt;&lt;span lang=&quot;zh-CN&quot;&gt;节点需要动态申请，开销比正常高&lt;span lang=&quot;en-US&quot;&gt;10^2&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span lang=&quot;en-US&quot;&gt;空间未必连续&lt;span lang=&quot;zh-CN&quot;&gt;分布，系统缓存几乎失效&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;第三个缺点是极其致命的，那么为了有效的激活并充分利用系统的缓存功能，我们又当如何继续改进呢？下一篇我们继续探索其中的奥秘hhhhh &lt;/p&gt;
</description>
<pubDate>Fri, 03 Aug 2018 06:37:00 +0000</pubDate>
<dc:creator>仪式黑刃</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/hongshijie/p/9414015.html</dc:identifier>
</item>
<item>
<title>Reactor 模型的实现 - wskwbog</title>
<link>http://www.cnblogs.com/wskwbog/p/9413912.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/wskwbog/p/9413912.html</guid>
<description>&lt;p&gt;NIO 常用的编程模型是 Reactor，在 Doug Lea 的 Scalable IO in Java 的 PPT 中对其进行了介绍，文末有福利 :) ，Reactor 的特点是 I/O 多路复用和事件驱动，基本处理过程为：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;处理程序声明感兴趣的 I/O 事件，这些事件表示在特定套接字上准备读取的情况&lt;/li&gt;
&lt;li&gt;事件通知器等待事件&lt;/li&gt;
&lt;li&gt;一个事件发生并唤醒通知器，通知器调用适当的处理程序&lt;/li&gt;
&lt;li&gt;事件处理程序执行实际的读取操作，并进行处理，然后重新声明关注的 I/O 事件，并将控制权返回给调度程序&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;其中通知器，就是 Selector。Reactor模型主要有以下几种版本：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;单线程Reactor，单线程处理器&lt;/li&gt;
&lt;li&gt;单线程Reactor，多线程处理器&lt;/li&gt;
&lt;li&gt;多线程主从Reactor，单线程处理器&lt;/li&gt;
&lt;li&gt;多线程主从Reactor，多线程处理器&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;单线程版本&quot;&gt;单线程版本&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1424165/201808/1424165-20180803142201320-1610004538.png&quot; alt=&quot;单线程版本&quot;/&gt;&lt;/p&gt;
&lt;p&gt;核心代码：&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt; public void run() {
    try { 
      if      (state == READING) read(); 
      else if (state == SENDING) send();
    } catch (IOException ex) { /* ... */ }
  }
  void read() throws IOException {
    socket.read(input);
    if (inputIsComplete()) {
       process(); 
       state = SENDING; 
       // Normally also do first write now
       sk.interestOps(SelectionKey.OP_WRITE);
    }
  }
  void send() throws IOException {
    socket.write(output);
    if (outputIsComplete()) sk.cancel();
  } &lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;单线程的特点是：只有一个 Reactor 线程，即只有一个 Selector 事件通知器，也就是说，字节的读取 I/O 和后续的业务处理（process() 方法），均由 Reactor 线程来做，很显然业务的处理影响后续事件的分发，所以引出多线程版本进行优化。&lt;/p&gt;
&lt;h3 id=&quot;多线程版本&quot;&gt;多线程版本&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1424165/201808/1424165-20180803142226410-1478915803.png&quot; alt=&quot;多线程版本&quot;/&gt;&lt;/p&gt;
&lt;p&gt;核心代码：&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;static PooledExecutor pool = new PooledExecutor(...);
static final int PROCESSING = 3;
// ...
synchronized void read() { // ...
  socket.read(input);
  if (inputIsComplete()) {
    state = PROCESSING;
    pool.execute(new Processer());
  }
}
synchronized void processAndHandOff() {
  process();
  state = SENDING; // or rebind attachment
  sk.interest(SelectionKey.OP_WRITE);
}
class Processer implements Runnable {
  public void run() { processAndHandOff(); }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;多线程版本的特点是：一个 Reactor 线程和多个处理线程，将业务处理（process 交给线程池）进行了分离，Reactor 线程，只关注事件分发和字节的发送和读取(I/O)。注意，实际的发送和读取还是由 Reactor 处理，那么在高并发下，有可能连接来不及接收，继续优化，采用主从 Reactor。&lt;/p&gt;
&lt;h3 id=&quot;主从-reactor&quot;&gt;主从 Reactor&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/1424165/201808/1424165-20180803142242491-1328318201.png&quot; alt=&quot;主从 Reactor&quot;/&gt;&lt;/p&gt;
&lt;p&gt;核心代码：&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;Selector[] selectors; // also create threads
int next = 0;
class Acceptor { // ... 
  public synchronized void run() { ...
    Socket connection = serverSocket.accept();
    if (connection != null)
      new Handler(selectors[next], connection);
    if (++next == selectors.length) next = 0;
  }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;主从 Reactor 特点是：使用一个 Selector 池，通常有一个 &lt;strong&gt;主Reactor&lt;/strong&gt; 用于处理接收连接事件，多个 &lt;strong&gt;从Reactor&lt;/strong&gt; 处理实际的 I/O，整体来看，分工合作，分而治之，非常高效。&lt;/p&gt;
&lt;p&gt;在真正实现时，有些细节需要注意，&lt;strong&gt;完整代码下载&lt;/strong&gt;：&lt;a href=&quot;https://github.com/rmwheel/reactor&quot; class=&quot;uri&quot;&gt;https://github.com/rmwheel/reactor&lt;/a&gt;&lt;br/&gt;代码有详细注释，看完绝对能理解 Reactor，其中包含对 Doug Lea 的 Scalable IO in Java 的 翻译，欢迎 star :)&lt;/p&gt;
</description>
<pubDate>Fri, 03 Aug 2018 06:32:00 +0000</pubDate>
<dc:creator>wskwbog</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/wskwbog/p/9413912.html</dc:identifier>
</item>
<item>
<title>day33_Spring学习笔记_02 - 黑泽明军</title>
<link>http://www.cnblogs.com/chenmingjun/p/9413977.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/chenmingjun/p/9413977.html</guid>
<description>&lt;div id=&quot;output_wrapper_id&quot; class=&quot;output_wrapper&quot; readability=&quot;157&quot;&gt;
&lt;h2 id=&quot;haop&quot;&gt;&lt;span&gt;&lt;strong&gt;一、AOP&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;h3 id=&quot;h11aop&quot;&gt;&lt;span&gt;&lt;strong&gt;1.1、AOP介绍&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;h4 id=&quot;h111aop&quot;&gt;&lt;span&gt;&lt;strong&gt;1.1.1、什么是AOP？&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;在软件业，AOP为Aspect Oriented Programming的缩写，意为：&lt;code&gt;面向切面编程&lt;/code&gt;，通过&lt;code&gt;预编译方式&lt;/code&gt;和&lt;code&gt;运行期动态代理&lt;/code&gt;实现程序功能的统一维护的一种技术。AOP是OOP（面向对象编程）的延续，是软件开发中的一个热点，也是Spring框架中的一个重要内容，是&lt;code&gt;函数式编程&lt;/code&gt;的一种衍生范型。利用AOP可以对业务逻辑的各个部分进行&lt;code&gt;隔离&lt;/code&gt;，从而使得业务逻辑各部分之间的&lt;code&gt;耦合度降低&lt;/code&gt;，提高程序的&lt;code&gt;可重用性&lt;/code&gt;，同时提高了开发的效率。&lt;/li&gt;
&lt;li&gt;AOP采取&lt;strong&gt;横向抽取&lt;/strong&gt;机制，取代了传统&lt;strong&gt;纵向继承&lt;/strong&gt;体系重复性代码。如下图所示：&lt;/li&gt;
&lt;li&gt;&lt;span&gt;经典应用：事务管理、性能监视、安全检查、缓存 、日志等。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;Spring AOP使用纯Java实现，不需要专门的编译过程和类加载器，在运行期通过&lt;code&gt;代理方式&lt;/code&gt;向目标类织入增强代码。&lt;/li&gt;
&lt;li&gt;&lt;span&gt;AspectJ是一个基于Java语言的AOP框架，从Spring2.0开始，Spring AOP引入对Aspect的支持，AspectJ扩展了Java语言，提供了一个专门的编译器，在编译时提供横向代码的织入。&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h4 id=&quot;h112aop&quot;&gt;&lt;span&gt;&lt;strong&gt;1.1.2、AOP实现原理&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;aop底层将采用&lt;code&gt;代理机制&lt;/code&gt;进行实现。&lt;/li&gt;
&lt;li&gt;接口 + 实现类时 ：spring采用 jdk 的 &lt;code&gt;动态代理&lt;/code&gt; Proxy。&lt;/li&gt;
&lt;li&gt;只有实现类时：spring 采用 &lt;code&gt;cglib 字节码增强&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;&lt;h4 id=&quot;h113aop&quot;&gt;&lt;span&gt;&lt;strong&gt;1.1.3、AOP术语【掌握】&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;ol&gt;&lt;li&gt;&lt;span&gt;Target ：目标类，需要被代理的类。本例中如：UserService&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;Joinpoint(连接点) ：所谓连接点是指那些可能被拦截到的点。在spring中，这些点指的是方法，因为spring只支持方法类型的连接点。本例中如：UserService的所有的方法&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;PointCut 切入点 ：所谓切入点是指我们要对哪些Joinpoint进行拦截，即已经被增强的连接点。例如：addUser()&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;Advice ：通知/增强，增强的代码。例如：after()、before()&lt;br/&gt;所谓通知是指拦截到Joinpoint之后所要做的事情就是通知，通知分为前置通知、后置通知、异常通知、最终通知、环绕通知(即切面要完成的功能)。&lt;/li&gt;
&lt;li&gt;Weaving(织入) ：是指把通知/增强advice应用到目标对象target来创建新的代理对象proxy的过程。&lt;br/&gt;spring采用动态代理织入，而AspectJ采用编译期织入和类装在期织入。&lt;/li&gt;
&lt;li&gt;&lt;span&gt;Proxy ：代理类，一个类被AOP织入增强后，就产生一个结果代理类。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;Aspect(切面) ： 是切入点Pointcut和通知Advice(引介)的结合。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;Introduction(引介) ：引介是一种&lt;code&gt;特殊的通知&lt;/code&gt;，在不修改类代码的前提下，Introduction 可以在运行期为类动态地添加一些方法或Field。&lt;/li&gt;
&lt;/ol&gt;&lt;hr/&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;小结：&lt;/strong&gt;&lt;br/&gt;一个线是一个特殊的面。&lt;br/&gt;一个切入点和一个通知，组成成一个特殊的面。&lt;/li&gt;
&lt;/ul&gt;&lt;img title=&quot;&quot; src=&quot;http://pcv7rz07n.bkt.clouddn.com/01.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;&lt;img title=&quot;&quot; src=&quot;http://pcv7rz07n.bkt.clouddn.com/02.png&quot; alt=&quot;&quot;/&gt;&lt;h3 id=&quot;h12&quot;&gt;&lt;span&gt;&lt;strong&gt;1.2、手动方式&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;h4 id=&quot;h121jdk&quot;&gt;&lt;span&gt;&lt;strong&gt;1.2.1、JDK动态代理&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;JDK动态代理：是对“装饰者”设计模式的简化。JDK动态代理使用前提：必须有接口。
&lt;ol&gt;&lt;li&gt;&lt;span&gt;目标类：接口 + 实现类&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;切面类：用于存放通知，名称叫：MyAspect.java&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;工厂类：编写工厂生成代理&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;测试类&lt;/span&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;1.2.1.1、目标类&lt;/strong&gt;&lt;br/&gt;　　UserService.java&lt;/p&gt;
&lt;pre readability=&quot;5&quot;&gt;
&lt;code class=&quot;hljs java&quot; readability=&quot;4&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;package&lt;/span&gt; com.itheima.a_proxy.a_jdk;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;UserService&lt;/span&gt; &lt;/span&gt;{&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;addUser&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;updateUser&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;deleteUser&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;br/&gt;}&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;　　UserServiceImpl.java&lt;/p&gt;
&lt;pre readability=&quot;7&quot;&gt;
&lt;code class=&quot;hljs java&quot; readability=&quot;8&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;package&lt;/span&gt; com.itheima.a_proxy.a_jdk;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;UserServiceImpl&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;UserService&lt;/span&gt; &lt;/span&gt;{&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;addUser&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;a_proxy.a_jdk addUser&quot;&lt;/span&gt;);&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;updateUser&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;a_proxy.a_jdk updateUser&quot;&lt;/span&gt;);&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;deleteUser&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;a_proxy.a_jdk deleteUser&quot;&lt;/span&gt;);&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;1.2.1.2、切面类&lt;/strong&gt;&lt;br/&gt;　　MyAspect.java&lt;/p&gt;
&lt;pre readability=&quot;5&quot;&gt;
&lt;code class=&quot;hljs cs&quot; readability=&quot;4&quot;&gt;package com.itheima.a_proxy.a_jdk;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;MyAspect&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;before&lt;/span&gt;() &lt;/span&gt;{&lt;br/&gt;System.&lt;span class=&quot;hljs-keyword&quot;&gt;out&lt;/span&gt;.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;前方法&quot;&lt;/span&gt;);&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;after&lt;/span&gt;() &lt;/span&gt;{&lt;br/&gt;System.&lt;span class=&quot;hljs-keyword&quot;&gt;out&lt;/span&gt;.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;后方法&quot;&lt;/span&gt;);&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;1.2.1.3、工厂类（自定义的）&lt;/strong&gt;&lt;br/&gt;　　MyBeanFactory.java&lt;/p&gt;
&lt;pre readability=&quot;11.5&quot;&gt;
&lt;code class=&quot;hljs java&quot; readability=&quot;17&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;package&lt;/span&gt; com.itheima.a_proxy.a_jdk;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.lang.reflect.InvocationHandler;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.lang.reflect.Method;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.lang.reflect.Proxy;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;MyBeanFactory&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; UserService &lt;span class=&quot;hljs-title&quot;&gt;createService&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; UserService userService = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; UserServiceImpl();&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; MyAspect myAspect = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; MyAspect();&lt;br/&gt;UserService proxyService = (UserService) Proxy.newProxyInstance(&lt;br/&gt;MyAspect.class.getClassLoader(), &lt;br/&gt;userService.getClass().getInterfaces(), &lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; InvocationHandler() {&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; Object &lt;span class=&quot;hljs-title&quot;&gt;invoke&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Object proxy, Method method, Object[] args)&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;throws&lt;/span&gt; Throwable &lt;/span&gt;{&lt;/p&gt;&lt;p&gt;&lt;br/&gt;myAspect.before();&lt;/p&gt;&lt;p&gt;&lt;br/&gt;Object obj = method.invoke(userService, args);&lt;/p&gt;&lt;p&gt;&lt;br/&gt;myAspect.after();&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; obj;&lt;br/&gt;}&lt;br/&gt;});&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; proxyService;&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;1.2.1.4、测试类&lt;/strong&gt;&lt;br/&gt;　　TestJDK.java&lt;/p&gt;
&lt;pre readability=&quot;4.5&quot;&gt;
&lt;code class=&quot;hljs java&quot; readability=&quot;3&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;package&lt;/span&gt; com.itheima.a_proxy.a_jdk;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.junit.Test;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;TestJDK&lt;/span&gt; &lt;/span&gt;{&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@Test&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;demo01&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;UserService userService = MyBeanFactory.createService();&lt;br/&gt;userService.addUser();&lt;br/&gt;userService.updateUser();&lt;br/&gt;userService.deleteUser();&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;程度运行结果为：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs css&quot;&gt;前方法&lt;br/&gt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;a_proxy&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.a_jdk&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;addUser&lt;/span&gt;&lt;br/&gt;后方法&lt;br/&gt;前方法&lt;br/&gt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;a_proxy&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.a_jdk&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;updateUser&lt;/span&gt;&lt;br/&gt;后方法&lt;br/&gt;前方法&lt;br/&gt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;a_proxy&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.a_jdk&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;deleteUser&lt;/span&gt;&lt;br/&gt;后方法&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;debug调试的结果：&lt;br/&gt;JDK动态代理返回的是：&lt;code&gt;$Proxy (id=34)&lt;/code&gt;&lt;/p&gt;
&lt;img title=&quot;&quot; src=&quot;http://pcv7rz07n.bkt.clouddn.com/02_1.png&quot; alt=&quot;&quot;/&gt;&lt;h4 id=&quot;h122cglib&quot;&gt;&lt;span&gt;&lt;strong&gt;1.2.2、CGLIB字节码增强&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;没有接口，只有实现类。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;采用字节码增强框架 cglib，运行原理：在运行时，创建目标类的子类，从而对目标类进行增强。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;导入jar包： 自己导jar包（了解）：
&lt;ul&gt;&lt;li&gt;&lt;span&gt;核心包：hibernate-distribution-3.6.10.Final\lib\bytecode\cglib\cglib-2.2.jar&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;依赖包：struts-2.3.15.3\apps\struts2-blank\WEB-INF\lib\asm-3.3.jar&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;spring-core-3.2.0.RELEASE.jar 已经整合以上两个内容，所以我们只需要导入这个包就可以了，如下图所示：&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;img title=&quot;&quot; src=&quot;http://pcv7rz07n.bkt.clouddn.com/03.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;&lt;img title=&quot;&quot; src=&quot;http://pcv7rz07n.bkt.clouddn.com/04.png&quot; alt=&quot;&quot;/&gt;&lt;p&gt;&lt;strong&gt;1.2.2.1、目标类&lt;/strong&gt;&lt;br/&gt;　　UserServiceImpl.java&lt;/p&gt;
&lt;pre readability=&quot;7&quot;&gt;
&lt;code class=&quot;hljs cs&quot; readability=&quot;8&quot;&gt;package com.itheima.a_proxy.b_cglib;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;UserServiceImpl&lt;/span&gt; {&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;addUser&lt;/span&gt;() &lt;/span&gt;{&lt;br/&gt;System.&lt;span class=&quot;hljs-keyword&quot;&gt;out&lt;/span&gt;.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;a_proxy.b_cglib addUser&quot;&lt;/span&gt;);&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;updateUser&lt;/span&gt;() &lt;/span&gt;{&lt;br/&gt;System.&lt;span class=&quot;hljs-keyword&quot;&gt;out&lt;/span&gt;.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;a_proxy.b_cglib updateUser&quot;&lt;/span&gt;);&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;deleteUser&lt;/span&gt;() &lt;/span&gt;{&lt;br/&gt;System.&lt;span class=&quot;hljs-keyword&quot;&gt;out&lt;/span&gt;.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;a_proxy.b_cglib deleteUser&quot;&lt;/span&gt;);&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;1.2.2.2、切面类&lt;/strong&gt;&lt;br/&gt;　　MyAspect.java的代码同上 &lt;code&gt;1.2.1.2、切面类&lt;/code&gt; 代码，这里不再赘述！&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1.2.2.3、工厂类（自定义的）&lt;/strong&gt;&lt;br/&gt;　　MyBeanFactory.java&lt;/p&gt;
&lt;pre readability=&quot;14.5&quot;&gt;
&lt;code class=&quot;hljs java&quot; readability=&quot;23&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;package&lt;/span&gt; com.itheima.a_proxy.b_cglib;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.lang.reflect.Method;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.springframework.cglib.proxy.Enhancer;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.springframework.cglib.proxy.MethodInterceptor;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.springframework.cglib.proxy.MethodProxy;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;MyBeanFactory&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; UserServiceImpl &lt;span class=&quot;hljs-title&quot;&gt;createService&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; UserServiceImpl userServiceImpl = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; UserServiceImpl();&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; MyAspect myAspect = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; MyAspect();&lt;/p&gt;&lt;p&gt;&lt;br/&gt;Enhancer enhancer = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Enhancer();&lt;br/&gt;enhancer.setSuperclass(userServiceImpl.getClass());&lt;br/&gt;enhancer.setCallback(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; MethodInterceptor() {&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; Object &lt;span class=&quot;hljs-title&quot;&gt;intercept&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Object proxy, Method method, Object[] args, MethodProxy methodProxy)&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;throws&lt;/span&gt; Throwable &lt;/span&gt;{&lt;/p&gt;&lt;p&gt;&lt;br/&gt;myAspect.before();&lt;/p&gt;&lt;p&gt;&lt;br/&gt;Object obj = method.invoke(userServiceImpl, args);&lt;br/&gt;methodProxy.invokeSuper(proxy, args);&lt;/p&gt;&lt;p&gt;&lt;br/&gt;myAspect.after();&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; obj;&lt;br/&gt;}});&lt;/p&gt;&lt;p&gt;&lt;br/&gt;UserServiceImpl proxyService = (UserServiceImpl) enhancer.create();&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; proxyService;&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;1.2.2.4、测试类&lt;/strong&gt;&lt;br/&gt;　　TestJDK.java的代码同上 &lt;code&gt;1.2.1.4、切面类&lt;/code&gt; 代码，这里不再赘述！&lt;br/&gt;　　程度运行结果为：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs css&quot;&gt;前方法&lt;br/&gt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;a_proxy&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.b_cglib&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;addUser&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;a_proxy&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.b_cglib&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;addUser&lt;/span&gt;&lt;br/&gt;后方法&lt;br/&gt;前方法&lt;br/&gt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;a_proxy&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.b_cglib&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;updateUser&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;a_proxy&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.b_cglib&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;updateUser&lt;/span&gt;&lt;br/&gt;后方法&lt;br/&gt;前方法&lt;br/&gt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;a_proxy&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.b_cglib&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;deleteUser&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;a_proxy&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.b_cglib&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;deleteUser&lt;/span&gt;&lt;br/&gt;后方法&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;　　debug调试的结果：&lt;br/&gt;　　CGLIB字节码增强返回的是：&lt;code&gt;UserServiceImpl$$EnhancerByCGLIB$$157a2b67 (id=34)&lt;/code&gt;&lt;/p&gt;
&lt;img title=&quot;&quot; src=&quot;http://pcv7rz07n.bkt.clouddn.com/04_1.png&quot; alt=&quot;&quot;/&gt;&lt;h4 id=&quot;h123&quot;&gt;&lt;span&gt;1.2.3、代理知识总结&lt;/span&gt;&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;Spring在运行期，生成动态代理对象，不需要特殊的编译器。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;Spring AOP的底层就是通过JDK动态代理或CGLib动态代理技术为目标Bean执行横向织入的。
&lt;ol&gt;&lt;li&gt;&lt;span&gt;若目标对象实现了若干接口，spring使用JDK的java.lang.reflect.Proxy类代理。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;若目标对象没有实现任何接口，spring使用CGLIB库生成目标对象的子类。&lt;/span&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;程序中应优先对接口创建代理，便于程序解耦维护。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;标记为final的方法，不能被代理，因为无法进行覆盖。
&lt;ol&gt;&lt;li&gt;&lt;span&gt;JDK动态代理，是针对接口生成子类，接口中的方法不能使用final修饰。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;CGLib动态代理，是针对目标类生产子类，因此目标类和目标类的方法是不能使用final修饰。&lt;/span&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;Spring只支持方法连接点，不提供属性连接。&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;h13aop&quot;&gt;&lt;span&gt;&lt;strong&gt;1.3、AOP联盟增强(通知)类型&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;AOP联盟为通知Advice定义了org.aopalliance.aop.Advice&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;Spring按照通知Advice在目标类方法的连接点位置，可以分为5类：
&lt;ul&gt;&lt;li&gt;1、前置通知：org.springframework.aop.MethodBeforeAdvice
&lt;ul&gt;&lt;li&gt;&lt;span&gt;在目标方法执行前实施增强&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;2、后置通知：org.springframework.aop.AfterReturningAdvice
&lt;ul&gt;&lt;li&gt;&lt;span&gt;在目标方法执行后实施增强&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;3、&lt;strong&gt;环绕通知&lt;/strong&gt;：org.aopalliance.intercept.MethodInterceptor
&lt;ul&gt;&lt;li&gt;&lt;span&gt;在目标方法执行前后实施增强&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;4、异常抛出通知：org.springframework.aop.ThrowsAdvice
&lt;ul&gt;&lt;li&gt;&lt;span&gt;在方法抛出异常后实施增强&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;5、引介通知：org.springframework.aop.IntroductionInterceptor
&lt;ul&gt;&lt;li&gt;&lt;span&gt;在目标类中添加一些新的方法和属性&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;模拟环绕通知：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs javascript&quot;&gt;环绕通知：&lt;span class=&quot;hljs-string&quot;&gt;`必须手动执行目标方法`&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {&lt;br/&gt;} &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt;() {&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;h14spring&quot;&gt;&lt;span&gt;&lt;strong&gt;1.4、spring 编写代理：半自动&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;让spring 给我们创建代理对象，我们从spring容器中手动的获取代理对象。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;导入jar包：
&lt;ul&gt;&lt;li&gt;&lt;span&gt;核心jar包：4 + 1&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;AOP的jar包：AOP联盟（规范/接口）、spring-aop（实现）&lt;br/&gt;&lt;img title=&quot;&quot; src=&quot;http://pcv7rz07n.bkt.clouddn.com/05.png&quot; alt=&quot;&quot;/&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h4 id=&quot;h141&quot;&gt;&lt;span&gt;&lt;strong&gt;1.4.1、目标类&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;　　UserService.java&lt;/p&gt;
&lt;pre readability=&quot;5&quot;&gt;
&lt;code class=&quot;hljs java&quot; readability=&quot;4&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;package&lt;/span&gt; com.itheima.b_factory_bean;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;UserService&lt;/span&gt; &lt;/span&gt;{&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;addUser&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;updateUser&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;deleteUser&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;br/&gt;}&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;　　UserServiceImpl.java&lt;/p&gt;
&lt;pre readability=&quot;7&quot;&gt;
&lt;code class=&quot;hljs java&quot; readability=&quot;8&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;package&lt;/span&gt; com.itheima.b_factory_bean;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;UserServiceImpl&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;UserService&lt;/span&gt; &lt;/span&gt;{&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;addUser&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;b_factory_bean addUser&quot;&lt;/span&gt;);&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;updateUser&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;b_factory_bean updateUser&quot;&lt;/span&gt;);&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;deleteUser&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;b_factory_bean deleteUser&quot;&lt;/span&gt;);&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;h142&quot;&gt;&lt;span&gt;&lt;strong&gt;1.4.2、切面类&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;pre readability=&quot;9.5&quot;&gt;
&lt;code class=&quot;hljs java&quot; readability=&quot;13&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;package&lt;/span&gt; com.itheima.b_factory_bean;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.aopalliance.intercept.MethodInterceptor;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.aopalliance.intercept.MethodInvocation;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;MyAspect&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;MethodInterceptor&lt;/span&gt; &lt;/span&gt;{&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; Object &lt;span class=&quot;hljs-title&quot;&gt;invoke&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(MethodInvocation mi)&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;throws&lt;/span&gt; Throwable &lt;/span&gt;{&lt;/p&gt;&lt;p&gt;System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;我们的前代码&quot;&lt;/span&gt;);&lt;/p&gt;&lt;p&gt;&lt;br/&gt;Object obj = mi.proceed();&lt;/p&gt;&lt;p&gt;System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;我们的后代码&quot;&lt;/span&gt;);&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; obj;&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;h143spring&quot;&gt;&lt;span&gt;&lt;strong&gt;1.4.3、spring配置&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;　　bean.xml&lt;/p&gt;
&lt;pre readability=&quot;5.5&quot;&gt;
&lt;code class=&quot;hljs xml&quot; readability=&quot;5&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;beans&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;xmlns&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://www.springframework.org/schema/beans&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-attr&quot;&gt;xmlns:xsi&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-attr&quot;&gt;xsi:schemaLocation&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://www.springframework.org/schema/beans &lt;br/&gt;http://www.springframework.org/schema/beans/spring-beans.xsd&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;bean&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;userServiceId&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;com.itheima.b_factory_bean.UserServiceImpl&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;bean&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;bean&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;myAspectId&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;com.itheima.b_factory_bean.MyAspect&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;bean&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;bean&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;proxyServiceId&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;org.springframework.aop.framework.ProxyFactory&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;interfaces&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;com.itheima.b_factory_bean.UserService&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;property&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;target&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;ref&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;userServiceId&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;property&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;interceptorNames&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;myAspectId&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;property&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;optimize&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;true&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;property&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;bean&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;beans&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;h144&quot;&gt;&lt;span&gt;&lt;strong&gt;1.4.4、测试类&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;　　TestFactoryBean.java&lt;/p&gt;
&lt;pre readability=&quot;8.5&quot;&gt;
&lt;code class=&quot;hljs java&quot; readability=&quot;11&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;package&lt;/span&gt; com.itheima.b_factory_bean;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.junit.Test;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.springframework.context.ApplicationContext;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.springframework.context.support.ClassPathXmlApplicationContext;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;TestFactoryBean&lt;/span&gt; &lt;/span&gt;{&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@Test&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;demo01&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;String xmlPath = &lt;span class=&quot;hljs-string&quot;&gt;&quot;com/itheima/b_factory_bean/beans.xml&quot;&lt;/span&gt;;&lt;br/&gt;ApplicationContext applicationContext = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; ClassPathXmlApplicationContext(xmlPath);&lt;br/&gt;UserService userService = (UserService) applicationContext.getBean(&lt;span class=&quot;hljs-string&quot;&gt;&quot;proxyServiceId&quot;&lt;/span&gt;);&lt;/p&gt;&lt;p&gt;userService.addUser();&lt;br/&gt;userService.updateUser();&lt;br/&gt;userService.deleteUser();&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;h15springaop&quot;&gt;&lt;span&gt;&lt;strong&gt;1.5、spring aop编程：全自动【掌握】&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;我们从spring容器获得的就是目标类，如果我们配置了aop，spring将自动生成代理对象。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;我们要确定目标类，使用aspectj 切入点表达式，要导入jar包：&lt;br/&gt;spring-framework-3.0.2.RELEASE-dependencies\org.aspectj\com.springsource.org.aspectj.weaver\1.6.8.RELEASE&lt;br/&gt;&lt;img title=&quot;&quot; src=&quot;http://pcv7rz07n.bkt.clouddn.com/06.png&quot; alt=&quot;&quot;/&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h4 id=&quot;h151&quot;&gt;&lt;span&gt;&lt;strong&gt;1.5.1、目标类&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;　　UserService.java 和 UserServiceImpl.java 代码 同 &lt;strong&gt;1.4.1、目标类&lt;/strong&gt; 代码一样。&lt;/p&gt;
&lt;h4 id=&quot;h152&quot;&gt;&lt;span&gt;&lt;strong&gt;1.5.2、切面类&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;　　MyAspect.java 代码同 &lt;strong&gt;1.4.2、切面类&lt;/strong&gt; 代码一样。&lt;/p&gt;
&lt;h4 id=&quot;h153spring&quot;&gt;&lt;span&gt;&lt;strong&gt;1.5.3、spring配置&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;img title=&quot;&quot; src=&quot;http://pcv7rz07n.bkt.clouddn.com/07.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;　　beans.xml
&lt;pre&gt;
&lt;code class=&quot;hljs xml&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;beans&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;xmlns&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://www.springframework.org/schema/beans&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-attr&quot;&gt;xmlns:xsi&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-attr&quot;&gt;xmlns:aop&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://www.springframework.org/schema/aop&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-attr&quot;&gt;xsi:schemaLocation&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://www.springframework.org/schema/beans &lt;br/&gt;http://www.springframework.org/schema/beans/spring-beans.xsd&lt;br/&gt;http://www.springframework.org/schema/aop &lt;br/&gt;http://www.springframework.org/schema/aop/spring-aop.xsd&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;bean&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;userServiceId&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;com.itheima.c_spring_aop.UserServiceImpl&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;bean&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;bean&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;myAspectId&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;com.itheima.c_spring_aop.MyAspect&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;bean&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;aop:config&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;proxy-target-class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;true&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;aop:pointcut&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;expression&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;execution(* com.itheima.c_spring_aop.*.*(..))&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;myPointCut&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;aop:advisor&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;advice-ref&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;myAspectId&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;pointcut-ref&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;myPointCut&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;aop:config&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;beans&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;h154&quot;&gt;&lt;span&gt;&lt;strong&gt;1.5.4、测试类&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;　　TestFactoryBean.java&lt;/p&gt;
&lt;pre readability=&quot;8.5&quot;&gt;
&lt;code class=&quot;hljs java&quot; readability=&quot;11&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;package&lt;/span&gt; com.itheima.c_spring_aop;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.junit.Test;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.springframework.context.ApplicationContext;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.springframework.context.support.ClassPathXmlApplicationContext;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;TestSpringAOP&lt;/span&gt; &lt;/span&gt;{&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@Test&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;demo01&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;String xmlPath = &lt;span class=&quot;hljs-string&quot;&gt;&quot;com/itheima/c_spring_aop/beans.xml&quot;&lt;/span&gt;;&lt;br/&gt;ApplicationContext applicationContext = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; ClassPathXmlApplicationContext(xmlPath);&lt;br/&gt;UserService userService = (UserService) applicationContext.getBean(&lt;span class=&quot;hljs-string&quot;&gt;&quot;userServiceId&quot;&lt;/span&gt;);&lt;/p&gt;&lt;p&gt;userService.addUser();&lt;br/&gt;userService.updateUser();&lt;br/&gt;userService.deleteUser();&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;　　程度运行结果为：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs&quot;&gt;我们的前代码&lt;br/&gt;c_spring_aop addUser&lt;br/&gt;我们的后代码&lt;br/&gt;我们的前代码&lt;br/&gt;c_spring_aop updateUser&lt;br/&gt;我们的后代码&lt;br/&gt;我们的前代码&lt;br/&gt;c_spring_aop deleteUser&lt;br/&gt;我们的后代码&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;haspectjaop&quot;&gt;&lt;span&gt;&lt;strong&gt;二、使用 AspectJ 实现 AOP&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;h3 id=&quot;h21aspectj&quot;&gt;&lt;span&gt;&lt;strong&gt;2.1、AspectJ 的介绍&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;AspectJ是一个基于Java语言的AOP框架。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;Spring2.0以后新增了对AspectJ切点表达式支持。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;@AspectJ 是AspectJ1.5新增的功能，通过JDK5注解技术，允许直接在Bean类中定义切面。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;在新版本的Spring框架中，建议使用AspectJ方式来开发AOP。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;主要用途：&lt;code&gt;自定义开发&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;h22&quot;&gt;&lt;span&gt;&lt;strong&gt;2.2、切入点表达式【掌握】&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;pre readability=&quot;7&quot;&gt;
&lt;code class=&quot;hljs delphi&quot; readability=&quot;8&quot;&gt;&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;.execution()  用于描述方法【掌握】&lt;br/&gt;语法：execution(修饰符  返回值  包.类.方法名(参数) throws异常)&lt;br/&gt;修饰符，一般省略&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt;      公共方法&lt;br/&gt;*           任意&lt;br/&gt;返回值，不能省略&lt;br/&gt;void        返回没有值&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;String&lt;/span&gt;      返回值字符串&lt;br/&gt;*           任意&lt;br/&gt;包，[可以省略]&lt;br/&gt;com.itheima.crm                 固定的包&lt;br/&gt;com.itheima.crm.*.service       crm包下面的任意子包，固定目录service（例如：com.itheima.crm.staff.service）&lt;br/&gt;com.itheima.crm..               crm包下面的所有子包（含自己）&lt;br/&gt;com.itheima.crm.*.service..     crm包下面的任意子包，固定目录service，service目录任意包（含自己）&lt;br/&gt;类，[可以省略]&lt;br/&gt;UserServiceImpl                 指定的类&lt;br/&gt;*Impl                           以Impl结尾的类&lt;br/&gt;User*                           以User开头的类&lt;br/&gt;*                               任意的类&lt;br/&gt;方法名，不能省略&lt;br/&gt;addUser                         固定的方法名&lt;br/&gt;add*                            以add开头的方法名&lt;br/&gt;*&lt;span class=&quot;hljs-keyword&quot;&gt;Do&lt;/span&gt;                             以&lt;span class=&quot;hljs-keyword&quot;&gt;Do&lt;/span&gt;结尾的方法名&lt;br/&gt;*                               任意的方法名&lt;br/&gt;(参数)&lt;br/&gt;()                              无参&lt;br/&gt;(int)                           一个整型&lt;br/&gt;(int, int)                      两个整型&lt;br/&gt;(..)                            参数任意&lt;br/&gt;throws，[可以省略]，一般省略。&lt;p&gt;综合案例&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;：&lt;br/&gt;execution&lt;/p&gt;&lt;p&gt;2.within:匹配包或子包中的方法(了解)&lt;br/&gt;within(com.itheima.aop..*)&lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;.this:匹配实现了接口的代理对象中的方法(了解)&lt;br/&gt;this(com.itheima.aop.user.UserDAO)&lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;.target:匹配实现了接口的目标对象中的方法(了解)&lt;br/&gt;target(com.itheima.aop.user.UserDAO)&lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;.args:匹配参数格式符合标准的方法(了解)&lt;br/&gt;args(int, int)&lt;br/&gt;&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;.bean(id):对指定的bean所有的方法(了解)&lt;br/&gt;bean(&lt;span class=&quot;hljs-string&quot;&gt;'userServiceId'&lt;/span&gt;)&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;h23aspectj&quot;&gt;&lt;span&gt;&lt;strong&gt;2.3、AspectJ 的通知类型&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;aop联盟定义的通知类型，具有特定的接口，我们必须去实现该接口，从而确定方法名称。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;aspectj 的通知类型：只定义了类型的名称以及方法的格式。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;AspectJ 的通知类型的个数：共6种，知道5种，掌握1种即可。
&lt;ul&gt;&lt;li&gt;before:前置通知(应用：各种校验)
&lt;ul&gt;&lt;li&gt;&lt;span&gt;在方法执行前执行，如果该通知抛出异常，将阻止方法运行。&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;afterReturning:后置通知(应用：常规数据处理)
&lt;ul&gt;&lt;li&gt;&lt;span&gt;方法正常返回后执行，如果方法中抛出异常，那么通知将无法执行。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;必须在方法执行后才执行，所以可以获得方法的返回值。&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;`around`:环绕通知(应用：十分强大，可以做任何事情)
&lt;ul&gt;&lt;li&gt;&lt;span&gt;方法执行前后分别执行，可以阻止方法的执行。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;使用AOP联盟的环绕通知，必须手动执行目标方法。&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;afterThrowing:抛出异常通知(应用：包装异常信息)
&lt;ul&gt;&lt;li&gt;&lt;span&gt;方法抛出异常后执行，如果方法没有抛出异常，则该通知无法执行。&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;after:最终通知(应用：清理现场)
&lt;ul&gt;&lt;li&gt;&lt;span&gt;方法执行完毕后执行，无论方法中是否出现异常，该通知都执行。&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;模拟以上几个通知：&lt;/p&gt;
&lt;pre readability=&quot;4&quot;&gt;
&lt;code class=&quot;hljs cs&quot; readability=&quot;2&quot;&gt;环绕通知：around&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {&lt;br/&gt;} &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt;() {&lt;br/&gt;} &lt;span class=&quot;hljs-keyword&quot;&gt;finally&lt;/span&gt; {&lt;br/&gt;}&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;要学习的5个实现类，如下图所示：&lt;/p&gt;
&lt;img title=&quot;&quot; src=&quot;http://pcv7rz07n.bkt.clouddn.com/08.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;&lt;img title=&quot;&quot; src=&quot;http://pcv7rz07n.bkt.clouddn.com/09.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;&lt;img title=&quot;&quot; src=&quot;http://pcv7rz07n.bkt.clouddn.com/10.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt;&lt;img title=&quot;&quot; src=&quot;http://pcv7rz07n.bkt.clouddn.com/11.png&quot; alt=&quot;&quot;/&gt;&lt;h3 id=&quot;h24jar&quot;&gt;&lt;span&gt;&lt;strong&gt;2.4、导入jar包&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;需要导入4个jar包：
&lt;ul&gt;&lt;li&gt;&lt;span&gt;aop 联盟规范&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;spring aop 实现&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;aspect 规范&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;spring aspect 实现&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;如下如所示：&lt;/p&gt;
&lt;img title=&quot;&quot; src=&quot;http://pcv7rz07n.bkt.clouddn.com/12.png&quot; alt=&quot;&quot;/&gt;&lt;h3 id=&quot;h25xml&quot;&gt;&lt;span&gt;&lt;strong&gt;2.5、基于xml&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;思路：
&lt;ul&gt;&lt;li&gt;&lt;span&gt;1、目标类：接口类 + 实现类&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;2、切面类：编写多个通知，采用aspectj 的方法，所以通知名称任意（即方法名任意）&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;3、aop编程，将通知应用到目标类&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;4、测试类&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h4 id=&quot;h251&quot;&gt;&lt;span&gt;&lt;strong&gt;2.5.1、目标类&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;　　UserService.java 和 UserServiceImpl.java 代码 同 &lt;strong&gt;1.4.1、目标类&lt;/strong&gt; 代码一样。&lt;/p&gt;
&lt;h4 id=&quot;h252&quot;&gt;&lt;span&gt;&lt;strong&gt;2.5.2、切面类&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;　　MyAspect.java&lt;/p&gt;
&lt;pre readability=&quot;14.5&quot;&gt;
&lt;code class=&quot;hljs cs&quot; readability=&quot;23&quot;&gt;package com.itheima.d_aspect.a_xml;&lt;p&gt;import org.aspectj.lang.JoinPoint;&lt;br/&gt;import org.aspectj.lang.ProceedingJoinPoint;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;MyAspect&lt;/span&gt; {&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;myBefore&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;JoinPoint joinPonint&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;System.&lt;span class=&quot;hljs-keyword&quot;&gt;out&lt;/span&gt;.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;我的前置通知：&quot;&lt;/span&gt; + joinPonint.getSignature().getName());&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;myAfterReturning&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;JoinPoint joinPoint, Object ret&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;System.&lt;span class=&quot;hljs-keyword&quot;&gt;out&lt;/span&gt;.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;我的后置通知 ： &quot;&lt;/span&gt; + joinPoint.getSignature().getName() + &lt;span class=&quot;hljs-string&quot;&gt;&quot;, --&amp;gt; &quot;&lt;/span&gt; + ret);&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; Object &lt;span class=&quot;hljs-title&quot;&gt;myAround&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;ProceedingJoinPoint joinPoint&lt;/span&gt;) throws Throwable &lt;/span&gt;{&lt;br/&gt;System.&lt;span class=&quot;hljs-keyword&quot;&gt;out&lt;/span&gt;.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;前方法&quot;&lt;/span&gt;);&lt;/p&gt;&lt;p&gt;&lt;br/&gt;Object obj = joinPoint.proceed();&lt;/p&gt;&lt;p&gt;System.&lt;span class=&quot;hljs-keyword&quot;&gt;out&lt;/span&gt;.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;后方法&quot;&lt;/span&gt;);&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;;&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;myAfterThrowing&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;JoinPoint joinPoint, Throwable e&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;System.&lt;span class=&quot;hljs-keyword&quot;&gt;out&lt;/span&gt;.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;我的抛出异常通知 ： &quot;&lt;/span&gt; + e.getMessage());&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;myAfter&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;JoinPoint joinPoint&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;System.&lt;span class=&quot;hljs-keyword&quot;&gt;out&lt;/span&gt;.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;我的最终通知&quot;&lt;/span&gt;);&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;h253spring&quot;&gt;&lt;span&gt;&lt;strong&gt;2.5.3、spring配置&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;　　beans.xml&lt;/p&gt;
&lt;pre readability=&quot;4&quot;&gt;
&lt;code class=&quot;hljs xml&quot; readability=&quot;2&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;beans&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;xmlns&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://www.springframework.org/schema/beans&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-attr&quot;&gt;xmlns:xsi&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-attr&quot;&gt;xmlns:aop&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://www.springframework.org/schema/aop&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-attr&quot;&gt;xsi:schemaLocation&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://www.springframework.org/schema/beans &lt;br/&gt;http://www.springframework.org/schema/beans/spring-beans.xsd&lt;br/&gt;http://www.springframework.org/schema/aop &lt;br/&gt;http://www.springframework.org/schema/aop/spring-aop.xsd&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;bean&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;userServiceId&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;com.itheima.d_aspect.a_xml.UserServiceImpl&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;bean&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;bean&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;myAspectId&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;com.itheima.d_aspect.a_xml.MyAspect&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;bean&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;aop:config&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;aop:aspect&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;ref&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;myAspectId&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;aop:pointcut&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;expression&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;execution(* com.itheima.d_aspect.a_xml.UserServiceImpl.*(..))&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;myPointCut&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;aop:after&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;method&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;myAfter&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;pointcut-ref&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;myPointCut&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;aop:aspect&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;aop:config&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;beans&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;h26xml&quot;&gt;&lt;span&gt;&lt;strong&gt;2.6、基于注解（替代xml）&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;h4 id=&quot;h261bean&quot;&gt;&lt;span&gt;&lt;strong&gt;2.6.1、替换bean&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs xml&quot;&gt;    &lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;bean&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;userServiceId&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;com.itheima.d_aspect.b_annotation.UserServiceImpl&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;bean&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;bean&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;myAspectId&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;com.itheima.d_aspect.b_annotation.MyAspect&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;bean&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;output_wrapper&quot; readability=&quot;37&quot;&gt;&lt;img title=&quot;&quot; src=&quot;http://pcv7rz07n.bkt.clouddn.com/13.png&quot; alt=&quot;&quot;/&gt;&lt;ul&gt;&lt;li&gt;&lt;span&gt;&lt;br/&gt;注意：需要配置扫描，注解使用前提，必须添加命名空间，让spring扫描含有注解类。&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;hljs xml&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;beans&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;xmlns&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://www.springframework.org/schema/beans&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-attr&quot;&gt;xmlns:xsi&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-attr&quot;&gt;xmlns:context&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://www.springframework.org/schema/context&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-attr&quot;&gt;xmlns:aop&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://www.springframework.org/schema/aop&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-attr&quot;&gt;xsi:schemaLocation&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://www.springframework.org/schema/beans &lt;br/&gt;http://www.springframework.org/schema/beans/spring-beans.xsd&lt;br/&gt;http://www.springframework.org/schema/aop &lt;br/&gt;http://www.springframework.org/schema/aop/spring-aop.xsd&lt;br/&gt;http://www.springframework.org/schema/context &lt;br/&gt;http://www.springframework.org/schema/context/spring-context.xsd&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;context:component-scan&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;base-package&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;com.itheima.d_aspect.b_annotation&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;context:component-scan&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;aop:aspectj-autoproxy&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;aop:aspectj-autoproxy&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;h262aop&quot;&gt;&lt;span&gt;&lt;strong&gt;2.6.2、替换aop&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;声明 切面&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;hljs cs&quot;&gt;以前：&lt;br/&gt;&amp;lt;aop:aspect &lt;span class=&quot;hljs-keyword&quot;&gt;ref&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;myAspectId&quot;&lt;/span&gt;&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs java&quot;&gt;现在：&lt;br/&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@Component&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@Aspect&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;MyAspect&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;替换 前置通知&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;hljs xml&quot;&gt;现在：&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;aop:before&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;method&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;myBefore&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;pointcut&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;execution(* com.itheima.d_aspect.b_annotation.UserServiceImpl.*(..))&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs cs&quot;&gt;以前：&lt;br/&gt;@Before(&lt;span class=&quot;hljs-string&quot;&gt;&quot;execution(* com.itheima.d_aspect.b_annotation.UserServiceImpl.*(..))&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;myBefore&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;JoinPoint joinPonint&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;System.&lt;span class=&quot;hljs-keyword&quot;&gt;out&lt;/span&gt;.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;我的前置通知：&quot;&lt;/span&gt; + joinPonint.getSignature().getName());&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;替换 公共切入点&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;hljs xml&quot;&gt;以前：&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;aop:pointcut&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;expression&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;execution(* com.itheima.d_aspect.b_annotation.UserServiceImpl.*(..))&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;myPointCut&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs java&quot;&gt;现在：&lt;br/&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@Pointcut&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;execution(* com.itheima.d_aspect.b_annotation.UserServiceImpl.*(..))&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;myPointCut&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;替换 后置通知&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;hljs cs&quot;&gt;以前：&lt;br/&gt;&amp;lt;aop:after-returning method=&lt;span class=&quot;hljs-string&quot;&gt;&quot;myAfterReturning&quot;&lt;/span&gt; pointcut-&lt;span class=&quot;hljs-keyword&quot;&gt;ref&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;myPointCut&quot;&lt;/span&gt; returning=&lt;span class=&quot;hljs-string&quot;&gt;&quot;ret&quot;&lt;/span&gt;/&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs cs&quot;&gt;现在：&lt;br/&gt;@AfterReturning(&lt;span class=&quot;hljs-keyword&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;myPointCut()&quot;&lt;/span&gt;, returning=&lt;span class=&quot;hljs-string&quot;&gt;&quot;ret&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;myAfterReturning&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;JoinPoint joinPoint, Object ret&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;System.&lt;span class=&quot;hljs-keyword&quot;&gt;out&lt;/span&gt;.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;我的后置通知 ： &quot;&lt;/span&gt; + joinPoint.getSignature().getName() + &lt;span class=&quot;hljs-string&quot;&gt;&quot;, --&amp;gt; &quot;&lt;/span&gt; + ret);&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;output_wrapper&quot; readability=&quot;110&quot;&gt;&lt;img title=&quot;&quot; src=&quot;http://pcv7rz07n.bkt.clouddn.com/14.png&quot; alt=&quot;&quot;/&gt;&lt;ul&gt;&lt;li&gt;&lt;span&gt;&lt;br/&gt;替换 环绕通知&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;hljs cs&quot;&gt;以前：&lt;br/&gt;&amp;lt;aop:around method=&lt;span class=&quot;hljs-string&quot;&gt;&quot;myAround&quot;&lt;/span&gt; pointcut-&lt;span class=&quot;hljs-keyword&quot;&gt;ref&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;myPointCut&quot;&lt;/span&gt;/&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;pre readability=&quot;5&quot;&gt;
&lt;code class=&quot;hljs kotlin&quot; readability=&quot;4&quot;&gt;现在：&lt;br/&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@Around(value=&lt;span class=&quot;hljs-meta-string&quot;&gt;&quot;myPointCut()&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; Object myAround(ProceedingJoinPoint joinPoint) throws Throwable {&lt;br/&gt;System.&lt;span class=&quot;hljs-keyword&quot;&gt;out&lt;/span&gt;.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;前方法&quot;&lt;/span&gt;);&lt;p&gt;&lt;br/&gt;Object obj = joinPoint.proceed();&lt;/p&gt;&lt;p&gt;System.&lt;span class=&quot;hljs-keyword&quot;&gt;out&lt;/span&gt;.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;后方法&quot;&lt;/span&gt;);&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;;&lt;br/&gt;}&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;替换 抛出异常通知&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;hljs xml&quot;&gt;以前：&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;aop:after-throwing&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;method&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;myAfterThrowing&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;pointcut&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;execution(* com.itheima.d_aspect.b_annotation.UserServiceImpl.*(..))&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;throwing&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;e&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs cs&quot;&gt;现在：&lt;br/&gt;@AfterThrowing(&lt;span class=&quot;hljs-keyword&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;execution(* com.itheima.d_aspect.b_annotation.UserServiceImpl.*(..))&quot;&lt;/span&gt; ,throwing=&lt;span class=&quot;hljs-string&quot;&gt;&quot;e&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;myAfterThrowing&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;JoinPoint joinPoint, Throwable e&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;System.&lt;span class=&quot;hljs-keyword&quot;&gt;out&lt;/span&gt;.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;我的抛出异常通知 ： &quot;&lt;/span&gt; + e.getMessage());&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;替换 最终通知&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;hljs cs&quot;&gt;以前：&lt;br/&gt;&amp;lt;aop:after method=&lt;span class=&quot;hljs-string&quot;&gt;&quot;myAfter&quot;&lt;/span&gt; pointcut-&lt;span class=&quot;hljs-keyword&quot;&gt;ref&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;myPointCut&quot;&lt;/span&gt;/&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs cs&quot;&gt;现在：&lt;br/&gt;@After(&lt;span class=&quot;hljs-string&quot;&gt;&quot;myPointCut()&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;myAfter&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;JoinPoint joinPoint&lt;/span&gt;) &lt;/span&gt;{&lt;br/&gt;System.&lt;span class=&quot;hljs-keyword&quot;&gt;out&lt;/span&gt;.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;我的最终通知&quot;&lt;/span&gt;);&lt;br/&gt;}&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;h263&quot;&gt;&lt;span&gt;&lt;strong&gt;2.6.3、切面类&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;　　MyAspect.java&lt;/p&gt;
&lt;pre readability=&quot;19.5&quot;&gt;
&lt;code class=&quot;hljs kotlin&quot; readability=&quot;33&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;package&lt;/span&gt; com.itheima.d_aspect.b_annotation;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.aspectj.lang.JoinPoint;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.aspectj.lang.ProceedingJoinPoint;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.aspectj.lang.&lt;span class=&quot;hljs-keyword&quot;&gt;annotation&lt;/span&gt;.After;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.aspectj.lang.&lt;span class=&quot;hljs-keyword&quot;&gt;annotation&lt;/span&gt;.AfterReturning;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.aspectj.lang.&lt;span class=&quot;hljs-keyword&quot;&gt;annotation&lt;/span&gt;.AfterThrowing;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.aspectj.lang.&lt;span class=&quot;hljs-keyword&quot;&gt;annotation&lt;/span&gt;.Around;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.aspectj.lang.&lt;span class=&quot;hljs-keyword&quot;&gt;annotation&lt;/span&gt;.Aspect;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.aspectj.lang.&lt;span class=&quot;hljs-keyword&quot;&gt;annotation&lt;/span&gt;.Before;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.aspectj.lang.&lt;span class=&quot;hljs-keyword&quot;&gt;annotation&lt;/span&gt;.Pointcut;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.springframework.stereotype.Component;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@Component&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@Aspect&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;MyAspect&lt;/span&gt; &lt;/span&gt;{&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; void myBefore(JoinPoint joinPonint) {&lt;br/&gt;System.&lt;span class=&quot;hljs-keyword&quot;&gt;out&lt;/span&gt;.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;我的前置通知：&quot;&lt;/span&gt; + joinPonint.getSignature().getName());&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; void myPointCut() {&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; void myAfterReturning(JoinPoint joinPoint, Object ret) {&lt;br/&gt;System.&lt;span class=&quot;hljs-keyword&quot;&gt;out&lt;/span&gt;.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;我的后置通知 ： &quot;&lt;/span&gt; + joinPoint.getSignature().getName() + &lt;span class=&quot;hljs-string&quot;&gt;&quot;, --&amp;gt; &quot;&lt;/span&gt; + ret);&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@Around(value=&lt;span class=&quot;hljs-meta-string&quot;&gt;&quot;myPointCut()&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; Object myAround(ProceedingJoinPoint joinPoint) throws Throwable {&lt;br/&gt;System.&lt;span class=&quot;hljs-keyword&quot;&gt;out&lt;/span&gt;.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;前方法&quot;&lt;/span&gt;);&lt;/p&gt;&lt;p&gt;&lt;br/&gt;Object obj = joinPoint.proceed();&lt;/p&gt;&lt;p&gt;System.&lt;span class=&quot;hljs-keyword&quot;&gt;out&lt;/span&gt;.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;后方法&quot;&lt;/span&gt;);&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;null&lt;/span&gt;;&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@AfterThrowing(value=&lt;span class=&quot;hljs-meta-string&quot;&gt;&quot;execution(* com.itheima.d_aspect.b_annotation.UserServiceImpl.*(..))&quot;&lt;/span&gt; ,throwing=&lt;span class=&quot;hljs-meta-string&quot;&gt;&quot;e&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; void myAfterThrowing(JoinPoint joinPoint, Throwable e) {&lt;br/&gt;System.&lt;span class=&quot;hljs-keyword&quot;&gt;out&lt;/span&gt;.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;我的抛出异常通知 ： &quot;&lt;/span&gt; + e.getMessage());&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@After(&lt;span class=&quot;hljs-meta-string&quot;&gt;&quot;myPointCut()&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; void myAfter(JoinPoint joinPoint) {&lt;br/&gt;System.&lt;span class=&quot;hljs-keyword&quot;&gt;out&lt;/span&gt;.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;我的最终通知&quot;&lt;/span&gt;);&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;h264spring&quot;&gt;&lt;span&gt;&lt;strong&gt;2.6.4、spring配置&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;　　bean.xml&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs xml&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;beans&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;xmlns&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://www.springframework.org/schema/beans&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-attr&quot;&gt;xmlns:xsi&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-attr&quot;&gt;xmlns:context&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://www.springframework.org/schema/context&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-attr&quot;&gt;xmlns:aop&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://www.springframework.org/schema/aop&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-attr&quot;&gt;xsi:schemaLocation&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://www.springframework.org/schema/beans &lt;br/&gt;http://www.springframework.org/schema/beans/spring-beans.xsd&lt;br/&gt;http://www.springframework.org/schema/aop &lt;br/&gt;http://www.springframework.org/schema/aop/spring-aop.xsd&lt;br/&gt;http://www.springframework.org/schema/context &lt;br/&gt;http://www.springframework.org/schema/context/spring-context.xsd&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;                      &lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;context:component-scan&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;base-package&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;com.itheima.d_aspect.b_annotation&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;context:component-scan&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;aop:aspectj-autoproxy&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;aop:aspectj-autoproxy&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;beans&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;h265aop&quot;&gt;&lt;span&gt;&lt;strong&gt;2.6.5、aop注解总结&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs java&quot;&gt;切面&lt;br/&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@Aspect&lt;/span&gt;     用于声明切面，修饰切面类，从而获得通知。&lt;br/&gt;通知&lt;br/&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@Before&lt;/span&gt;     前置通知&lt;br/&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@AfterReturning&lt;/span&gt; 后置通知&lt;br/&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@Around&lt;/span&gt;     环绕通知&lt;br/&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@AfterThrowing&lt;/span&gt;  抛出异常通知&lt;br/&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@After&lt;/span&gt;      最终通知&lt;br/&gt;切入点&lt;br/&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@PointCut&lt;/span&gt;   该注解修饰方法格式为：&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;xxx&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;{}  我们通过“方法名”获得切入点的引用。&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;hjdbctemplate&quot;&gt;&lt;span&gt;&lt;strong&gt;三、JdbcTemplate&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;JdbcTemplate是spring 提供用于操作JDBC的工具类，类似：DBUtils。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;JdbcTemplate依赖连接池DataSource（数据源）&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;h31&quot;&gt;&lt;span&gt;&lt;strong&gt;3.1、环境搭建&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;h4 id=&quot;h311&quot;&gt;&lt;span&gt;&lt;strong&gt;3.1.1、创建表&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;pre readability=&quot;8.5&quot;&gt;
&lt;code class=&quot;sql language-sql hljs&quot; readability=&quot;11&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;DATABASE&lt;/span&gt; day34;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;USE&lt;/span&gt; day34;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;TABLE&lt;/span&gt; t_user(&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;INT&lt;/span&gt; PRIMARY &lt;span class=&quot;hljs-keyword&quot;&gt;KEY&lt;/span&gt; AUTO_INCREMENT,&lt;br/&gt;username &lt;span class=&quot;hljs-built_in&quot;&gt;VARCHAR&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;50&lt;/span&gt;),&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;PASSWORD&lt;/span&gt; &lt;span class=&quot;hljs-built_in&quot;&gt;VARCHAR&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;32&lt;/span&gt;)&lt;br/&gt;);&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;INTO&lt;/span&gt; t_user(username,&lt;span class=&quot;hljs-keyword&quot;&gt;PASSWORD&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;VALUES&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;'jack'&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;'1234'&lt;/span&gt;);&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;INTO&lt;/span&gt; t_user(username,&lt;span class=&quot;hljs-keyword&quot;&gt;PASSWORD&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;VALUES&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;'rose'&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;'5678'&lt;/span&gt;);&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;h312jar&quot;&gt;&lt;span&gt;&lt;strong&gt;3.1.2、导入jar包&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;如下图所示：&lt;/p&gt;
&lt;img title=&quot;&quot; src=&quot;http://pcv7rz07n.bkt.clouddn.com/15.png&quot; alt=&quot;&quot;/&gt;&lt;h4 id=&quot;h313&quot;&gt;&lt;span&gt;&lt;strong&gt;3.1.3、创建数据模型&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;　　User.java&lt;/p&gt;
&lt;pre readability=&quot;5.5&quot;&gt;
&lt;code class=&quot;hljs java&quot; readability=&quot;5&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;package&lt;/span&gt; com.itheima.domain;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;User&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; Integer id;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; String username;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; String password;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; Integer &lt;span class=&quot;hljs-title&quot;&gt;getId&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; id;&lt;br/&gt;}&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;setId&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(Integer id)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.id = id;&lt;br/&gt;}&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;hljs-title&quot;&gt;getUsername&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; username;&lt;br/&gt;}&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;setUsername&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String username)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.username = username;&lt;br/&gt;}&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;hljs-title&quot;&gt;getPassword&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; password;&lt;br/&gt;}&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;setPassword&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String password)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.password = password;&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;h32api&quot;&gt;&lt;span&gt;&lt;strong&gt;3.2、使用api（了解）&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;pre readability=&quot;11&quot;&gt;
&lt;code class=&quot;hljs java&quot; readability=&quot;16&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;package&lt;/span&gt; com.itheima.b_api;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.apache.commons.dbcp.BasicDataSource;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.springframework.jdbc.core.JdbcTemplate;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;TestAPI&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;{&lt;/p&gt;&lt;p&gt;&lt;br/&gt;BasicDataSource dataSource = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; BasicDataSource();&lt;br/&gt;dataSource.setDriverClassName(&lt;span class=&quot;hljs-string&quot;&gt;&quot;com.mysql.jdbc.Driver&quot;&lt;/span&gt;);&lt;br/&gt;dataSource.setUrl(&lt;span class=&quot;hljs-string&quot;&gt;&quot;jdbc:mysql://localhost:3306/day34&quot;&lt;/span&gt;);&lt;br/&gt;dataSource.setUsername(&lt;span class=&quot;hljs-string&quot;&gt;&quot;root&quot;&lt;/span&gt;);&lt;br/&gt;dataSource.setPassword(&lt;span class=&quot;hljs-string&quot;&gt;&quot;root&quot;&lt;/span&gt;);&lt;/p&gt;&lt;p&gt;&lt;br/&gt;JdbcTemplate jdbcTemplate = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; JdbcTemplate();&lt;br/&gt;jdbcTemplate.setDataSource(dataSource);&lt;/p&gt;&lt;p&gt;&lt;br/&gt;jdbcTemplate.update(&lt;span class=&quot;hljs-string&quot;&gt;&quot;insert into t_user(username,password) values(?,?);&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;tom&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;998&quot;&lt;/span&gt;);&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;h33dbcp&quot;&gt;&lt;span&gt;&lt;strong&gt;3.3、配置DBCP&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;　　beans.xml&lt;/p&gt;
&lt;pre readability=&quot;8.5&quot;&gt;
&lt;code class=&quot;hljs xml&quot; readability=&quot;11&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;beans&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;xmlns&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://www.springframework.org/schema/beans&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-attr&quot;&gt;xmlns:xsi&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-attr&quot;&gt;xmlns:context&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://www.springframework.org/schema/context&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-attr&quot;&gt;xmlns:aop&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://www.springframework.org/schema/aop&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-attr&quot;&gt;xsi:schemaLocation&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://www.springframework.org/schema/beans &lt;br/&gt;http://www.springframework.org/schema/beans/spring-beans.xsd&lt;br/&gt;http://www.springframework.org/schema/aop &lt;br/&gt;http://www.springframework.org/schema/aop/spring-aop.xsd&lt;br/&gt;http://www.springframework.org/schema/context &lt;br/&gt;http://www.springframework.org/schema/context/spring-context.xsd&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;bean&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;dataSourceId&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;org.apache.commons.dbcp.BasicDataSource&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;driverClassName&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;com.mysql.jdbc.Driver&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;property&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;url&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;jdbc:mysql://localhost:3306/day34&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;property&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;username&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;root&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;property&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;password&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;root&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;property&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;bean&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;bean&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;jdbcTemplateId&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;org.springframework.jdbc.core.JdbcTemplate&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;dataSource&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;ref&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;dataSourceId&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;property&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;bean&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;bean&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;userDaoId&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;com.itheima.c_dbcp.UserDao&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;jdbcTemplate&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;ref&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;jdbcTemplateId&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;property&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;bean&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;beans&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;h34c3p0&quot;&gt;&lt;span&gt;&lt;strong&gt;3.4、配置C3P0&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;　　beans.xml&lt;/p&gt;
&lt;pre readability=&quot;8.5&quot;&gt;
&lt;code class=&quot;hljs xml&quot; readability=&quot;11&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;beans&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;xmlns&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://www.springframework.org/schema/beans&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-attr&quot;&gt;xmlns:xsi&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-attr&quot;&gt;xmlns:context&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://www.springframework.org/schema/context&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-attr&quot;&gt;xmlns:aop&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://www.springframework.org/schema/aop&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-attr&quot;&gt;xsi:schemaLocation&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://www.springframework.org/schema/beans &lt;br/&gt;http://www.springframework.org/schema/beans/spring-beans.xsd&lt;br/&gt;http://www.springframework.org/schema/aop &lt;br/&gt;http://www.springframework.org/schema/aop/spring-aop.xsd&lt;br/&gt;http://www.springframework.org/schema/context &lt;br/&gt;http://www.springframework.org/schema/context/spring-context.xsd&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;bean&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;dataSourceId&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;driverClass&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;com.mysql.jdbc.Driver&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;property&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;jdbcUrl&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;jdbc:mysql://localhost:3306/day34&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;property&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;user&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;root&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;property&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;password&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;root&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;property&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;bean&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;bean&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;jdbcTemplateId&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;org.springframework.jdbc.core.JdbcTemplate&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;dataSource&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;ref&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;dataSourceId&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;property&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;bean&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;bean&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;userDaoId&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;com.itheima.d_c3p0.UserDao&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;jdbcTemplate&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;ref&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;jdbcTemplateId&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;property&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;bean&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;beans&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;h35jdbcdaosupport&quot;&gt;&lt;span&gt;&lt;strong&gt;3.5、使用JdbcDaoSupport&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;pre readability=&quot;4&quot;&gt;
&lt;code class=&quot;hljs cpp&quot; readability=&quot;2&quot;&gt;    &lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; JdbcTemplate jdbcTemplate;&lt;p&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;setJdbcTemplate&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(JdbcTemplate jdbcTemplate)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.jdbcTemplate = jdbcTemplate;&lt;br/&gt;}&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;　　由于每一个dao里面都需要将jdbc模板代码使用Spring注入进来（如上代码），比较麻烦，所以Spring就想了一个招：把jdbc模板代码写到一个父类中，然后让dao去继承它。这个父类叫做JdbcDaoSupport。&lt;/p&gt;
&lt;h4 id=&quot;h351dao&quot;&gt;&lt;span&gt;&lt;strong&gt;3.5.1、dao层&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;pre readability=&quot;12.5&quot;&gt;
&lt;code class=&quot;hljs java&quot; readability=&quot;19&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;package&lt;/span&gt; com.itheima.e_JdbcDaoSupport;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.util.List;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.springframework.jdbc.core.simple.ParameterizedBeanPropertyRowMapper;&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.springframework.jdbc.core.support.JdbcDaoSupport;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; com.itheima.a_domain.User;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;UserDao&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;JdbcDaoSupport&lt;/span&gt; &lt;/span&gt;{&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(User user)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;String sql = &lt;span class=&quot;hljs-string&quot;&gt;&quot;update t_user set username=?,password=? where id =?&quot;&lt;/span&gt;;&lt;br/&gt;Object[] args = { user.getUsername(), user.getPassword(), user.getId() };&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.getJdbcTemplate().update(sql, args);&lt;br/&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; List&amp;lt;User&amp;gt; &lt;span class=&quot;hljs-title&quot;&gt;findAll&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.getJdbcTemplate().query(&lt;span class=&quot;hljs-string&quot;&gt;&quot;select * from t_user&quot;&lt;/span&gt;, ParameterizedBeanPropertyRowMapper.newInstance(User.class));&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;h352spring&quot;&gt;&lt;span&gt;&lt;strong&gt;3.5.2、spring配置文件&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;　　beans.xml&lt;/p&gt;
&lt;pre readability=&quot;7&quot;&gt;
&lt;code class=&quot;hljs xml&quot; readability=&quot;8&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;beans&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;xmlns&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://www.springframework.org/schema/beans&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-attr&quot;&gt;xmlns:xsi&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-attr&quot;&gt;xmlns:context&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://www.springframework.org/schema/context&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-attr&quot;&gt;xmlns:aop&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://www.springframework.org/schema/aop&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-attr&quot;&gt;xsi:schemaLocation&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://www.springframework.org/schema/beans &lt;br/&gt;http://www.springframework.org/schema/beans/spring-beans.xsd&lt;br/&gt;http://www.springframework.org/schema/aop &lt;br/&gt;http://www.springframework.org/schema/aop/spring-aop.xsd&lt;br/&gt;http://www.springframework.org/schema/context &lt;br/&gt;http://www.springframework.org/schema/context/spring-context.xsd&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;bean&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;dataSourceId&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;driverClass&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;com.mysql.jdbc.Driver&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;property&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;jdbcUrl&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;jdbc:mysql://localhost:3306/day34&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;property&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;user&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;root&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;property&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;password&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;root&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;property&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;bean&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;bean&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;userDaoId&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;com.itheima.e_JdbcDaoSupport.UserDao&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;dataSource&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;ref&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;dataSourceId&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;property&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;bean&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;beans&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;h353jdbcdaosupport&quot;&gt;&lt;span&gt;&lt;strong&gt;3.5.3、JdbcDaoSupport源码分析&lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;img title=&quot;&quot; src=&quot;http://pcv7rz07n.bkt.clouddn.com/16.png&quot; alt=&quot;&quot;/&gt;
&lt;h3 id=&quot;h46properties&quot;&gt;&lt;span&gt;&lt;strong&gt;3.6、配置properties&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;　　以后在开发中，我们会将创建数据源对象时需要注入的基本四项，放在一个properties文件中。&lt;br/&gt;　　JdbcInfo.properties&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;hljs cpp&quot;&gt;jdbc.driverClass=com.mysql.jdbc.Driver&lt;br/&gt;jdbc.jdbcUrl=jdbc:mysql:&lt;br/&gt;jdbc.user=root&lt;br/&gt;jdbc.password=root&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;　　beans.xml&lt;/p&gt;
&lt;pre readability=&quot;7&quot;&gt;
&lt;code class=&quot;hljs xml&quot; readability=&quot;8&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;beans&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;xmlns&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://www.springframework.org/schema/beans&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-attr&quot;&gt;xmlns:xsi&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-attr&quot;&gt;xmlns:context&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://www.springframework.org/schema/context&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-attr&quot;&gt;xmlns:aop&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://www.springframework.org/schema/aop&quot;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-attr&quot;&gt;xsi:schemaLocation&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://www.springframework.org/schema/beans &lt;br/&gt;http://www.springframework.org/schema/beans/spring-beans.xsd&lt;br/&gt;http://www.springframework.org/schema/aop &lt;br/&gt;http://www.springframework.org/schema/aop/spring-aop.xsd&lt;br/&gt;http://www.springframework.org/schema/context &lt;br/&gt;http://www.springframework.org/schema/context/spring-context.xsd&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;context:property-placeholder&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;location&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;classpath:com/itheima/f_properties/jdbcInfo.properties&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;bean&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;dataSourceId&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;driverClass&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;${jdbc.driverClass}&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;property&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;jdbcUrl&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;${jdbc.jdbcUrl}&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;property&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;user&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;${jdbc.user}&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;property&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;password&quot;&lt;/span&gt;  &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;${jdbc.password}&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;property&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;bean&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;bean&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;userDaoId&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;com.itheima.f_properties.UserDao&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;dataSource&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;ref&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;dataSourceId&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;property&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;bean&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;beans&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;/p&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
</description>
<pubDate>Fri, 03 Aug 2018 06:32:00 +0000</pubDate>
<dc:creator>黑泽明军</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/chenmingjun/p/9413977.html</dc:identifier>
</item>
<item>
<title>「深度剖析」程序员因为奇葩需求暴打pm，然后被双双开除 - 闰土大叔</title>
<link>http://www.cnblogs.com/running-runtu/p/9413689.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/running-runtu/p/9413689.html</guid>
<description>&lt;p&gt;想必大家都听说了，这两天关于&lt;strong&gt;中国平安&lt;/strong&gt;一个产品经理因奇葩需求和程序员爆发肢体冲突的事件在朋友圈被刷屏，更有现场打架视频在技术群里疯传。&lt;/p&gt;
&lt;p&gt;在这里先带大家简单文字回顾下事情经过，N次打架视频和截图就不给大家放出来了，相信大家都在技术群和朋友圈里亲眼目睹过了（当然，没看过的朋友可以找我微信私聊），最重要的一点是&lt;strong&gt;为了社会和谐&lt;/strong&gt;。 &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;「 肢体冲突的起因 」&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt; &lt;/strong&gt;以下是网上流传的本次打架事件的文字叙述：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/701424/201808/701424-20180803134252994-640613417.jpg&quot; alt=&quot;&quot;/&gt; &lt;/p&gt;
&lt;p&gt;&lt;strong&gt; &lt;/strong&gt;&lt;strong&gt; &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;「 事件的处理结果 」&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;事情的起因大概就是这样，先不讨论本次事件中pm提出的需求是否合理，程序员能否实现，本身这起办公室冲突事件的发生，引起了圈内很大的热议，“成功地”推上了互联网热点头条，同时也给中国平安公司的名誉带来了负面影响，&lt;strong&gt;最后&lt;/strong&gt;&lt;strong&gt;涉事的两位外包人员惨被双双开除。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;很多看过现场视频的网友是这样分析的，秃头的是程序猿，没秃头的是产品，假装劝架的是运营和设计，看戏的是测试，拍这个视频的应该是商务，pm下次记得戴安全帽提需求。&lt;/p&gt;
&lt;p&gt;分析地头头是道，活脱脱一个国内社会看热闹不嫌事儿大的缩影，也是厉害。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;「 如何向外行解释内情 」&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;可能一些非软件行业内的吃瓜群众，想不通为什么程序员和产品经理要干架？我完全可以通过一张表情图合集，来生动形象地告诉你，一家软件公司的项目是如何上线的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/701424/201808/701424-20180803134311715-960265860.jpg&quot; alt=&quot;&quot;/&gt; &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;「 打架是不对的 」&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;看完这张图，我们再来说说pm和coder打架的事儿&lt;/p&gt;
&lt;p&gt;年轻人血气方刚，一言不合就互怼，借用孙红雷在电视剧《征服》里的一句台词：不气盛，还叫年轻人吗？&lt;/p&gt;
&lt;h2&gt;&lt;span&gt;但是，以暴制暴是不对的，朋友，毕竟就算打赢了也是真的疼啊。&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;在乱提需求的前提下，至少得练得跟我一样吧。&lt;/p&gt;
&lt;p&gt;不然，还真不一定打得过我，说一下我三大项的数据吧：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;卧推：90kg&lt;/p&gt;
&lt;p&gt;深蹲：140kg&lt;/p&gt;
&lt;p&gt;硬拉：160kg&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt; &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;「 冲突的根源是什么 」&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;先来说说很多公司的现状：产品经理和“老板们”关起门来开了个会，赶出原型和UI图，之后交给程序员们的就是“圣旨”，“反正我们就这么定了，你照着开发吧。 &lt;/p&gt;
&lt;p&gt;程序员说：目标是需求，技术只是手段。&lt;/p&gt;
&lt;p&gt;产品经理说：目标是用户，需求是方式。&lt;/p&gt;
&lt;p&gt;立场不同，定位不同，矛盾就来了。&lt;/p&gt;
&lt;p&gt;产品经理永远是用户需求的代名词，自以为是研发人员的上帝，动不动就要改需求，他们觉得好像很简单的事情，殊不知给程序员添了多大的麻烦。&lt;/p&gt;
&lt;p&gt;技术和产品撕逼，无非就是以下几个原因：&lt;/p&gt;
&lt;p&gt;1，产品没有想明白，然后来来回回的改；&lt;/p&gt;
&lt;p&gt;2，开发没有理解清楚需求，开发东西和产品的要求有出入&lt;/p&gt;
&lt;p&gt;3，产品的需求有问题&lt;/p&gt;
&lt;p&gt;4，技术的时间不够用&lt;/p&gt;
&lt;p&gt;所以说，&lt;strong&gt;一个不懂项目管理的程序员不是好程序员，一个不懂软件开发的产品经理，不是一个好的产品经理&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;程序员和产品经理似乎天生就有不可调和的矛盾，和平共处很难么？&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;「 &lt;/strong&gt;&lt;strong&gt;说点掏心窝儿的话 」&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;就这次事件，土叔我不站队，也不说谁对谁错，抱着一颗同理心，我分别来站在程序员、产品经理，以及项目管理层的角度，给coder、pm，以及manager分享几点我的小想法。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;「 给程序员的建议 」&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;程序员和产品经理干架其实需要理性，查查他的经历，要分析下他懂不懂技术，懂的话有多懂。&lt;/p&gt;
&lt;p&gt;一般很懂技术的产品经理是不和程序员干架的。&lt;/p&gt;
&lt;p&gt;懂一点，但是就拿出来说事的这种，一般和程序员关系不好。&lt;/p&gt;
&lt;p&gt;一点都不懂的产品经理有的谦卑，有的不懂装懂乱说一通。&lt;/p&gt;
&lt;p&gt;对于懂一点，就拿出来说事的这种，就要想法设法在技术上反问他，让他觉得自己其实真的知道的很少。&lt;/p&gt;
&lt;p&gt;这时候再动之以情，说明自己做这个的难度。&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://images2018.cnblogs.com/blog/701424/201808/701424-20180803134358217-1570183178.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;对于不懂装懂的产品经理，就俩字：&lt;strong&gt;你来&lt;/strong&gt;。 &lt;/p&gt;
&lt;p&gt;还剩下一种是不讲理的，对于这种不讲理的就只有一句话，&lt;strong&gt;我他娘的意大利炮呢？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;玩笑归玩笑，土叔在这里分享几点走心又走肾的建议：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;做好需求更改的准备，提高代码的扩展性和可维护性；&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;预留出修改bug和需求的时间；&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;对需求理解透彻再开始写代码；&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;代码不要写死，防止需求变动。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;「 给产品经理的建议 」&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;好多pm搞不懂，为什么产品经理频繁更改需求会令程序员小哥哥们烦恼不堪？我想，大多时候是因为你们pm平时在工作中的这些口头禅吧：&lt;/p&gt;
&lt;p&gt;1.「先做出来看看吧」&lt;/p&gt;
&lt;p&gt;2.「我就要这种效果，怎么实现是你的问题」&lt;/p&gt;
&lt;p&gt;3.「这应该很简单吧，不就是XXX，然后XXX吗」&lt;/p&gt;
&lt;p&gt;4.「这个需求，先这样这样，再那样那样，用XX技术很快就搞定了」&lt;/p&gt;
&lt;p&gt;5.「你就说能不能做吧」&lt;/p&gt;
&lt;p&gt;6.「我有一个绝妙的idea，什么都准备好了，就差一个写代码的了」&lt;/p&gt;
&lt;p&gt;7.「这个需求老大已经同意了，你照着做就是了」&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/701424/201808/701424-20180803134414973-1778755697.jpg&quot; alt=&quot;&quot;/&gt; &lt;/p&gt;
&lt;p&gt;产品经理频繁的需求变更，和程序员有限的工时是存在矛盾的，除非让程序员加班。特别是上次的变更刚刚改完，这时又提出再次修改，&lt;strong&gt;朝令夕改，一步一步很巧妙地惹恼了程序员。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;程序员最讨厌朝三暮四的产品经理了。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如何与单纯的程序员共处，土叔的走心建议要不要听一下：&lt;/p&gt;
&lt;p&gt;1. 不要随时打扰，尤其在他们戴着耳机的时候；&lt;/p&gt;
&lt;p&gt;2. 传达「要做什么（What）」，还有「为什么这么做（Why）」；&lt;/p&gt;
&lt;p&gt;3. 学习基础开发知识（比如 HTML/CSS），方便彼此沟通；&lt;/p&gt;
&lt;p&gt;4. 不要让他们成为最后知道的人，一起讨论可以少走弯路；&lt;/p&gt;
&lt;p&gt;5. 尽可能用数据说话；&lt;/p&gt;
&lt;p&gt;6. 配合工具（哪怕是纸笔）来表达你的想法；&lt;/p&gt;
&lt;p&gt;7. 提供有用工具给他们参考（比如 AniCollection）；&lt;/p&gt;
&lt;p&gt;8. 做好设计规范（个人很喜欢 Mavel 的 Styleguilde）；&lt;/p&gt;
&lt;p&gt;9. 尽可能和他们坐在一起；&lt;/p&gt;
&lt;p&gt;10. 他们可能羞于/不善于表达，多给一些耐心；&lt;/p&gt;
&lt;p&gt;11. 不要不好意思发问，其实他们都很热心解决问题；&lt;/p&gt;
&lt;p&gt;12. 不要问那些 Google 一下就能找到答案的问题，节约双方时间；&lt;/p&gt;
&lt;p&gt;13. 缕清用户流程，不要让他们来处理你的工作内容；&lt;/p&gt;
&lt;p&gt;14. 想清楚产品可能出现的各种状态（404、零数据、极端用例、转场……）；&lt;/p&gt;
&lt;p&gt;15. 该你决策就由你来决策，不要分担责任；&lt;/p&gt;
&lt;p&gt;16. 相信他们的技术水准（如果他们确实不会，他们会学）；&lt;/p&gt;
&lt;p&gt;17. 勇敢承认你的错误；&lt;/p&gt;
&lt;p&gt;18. 记得给他们展示用户/客户的反馈；&lt;/p&gt;
&lt;p&gt;19. 改需求不要超过 3 次，再改就先跪下；&lt;/p&gt;
&lt;p&gt;20. 就算月饼被抢了，也要友爱和睦相处。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;「 给项目管理层的建议 」&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;其实，谁都有想不到的地方，和想不明白的东西。但是自己都没有搞懂之前就觉得只有自己是对的，那就只能撕了。&lt;/p&gt;
&lt;p&gt;在我们公司的团队里，程序员和PM一起讨论需求，勾画原型，提出自己不同角度的不同理解，让程序员更接触“原始需求”，能参与到产品的生命线里会更好，毕竟每个人都有思考能力，不是机器，一张需求甩过来就照做的程序员不是好的程序员。&lt;/p&gt;
&lt;p&gt;在产品需求会议上，允许程序员参加并发表意见，这样可以从技术的角度及早发现产品功能中存在的问题，从而避免后期需求的频繁改动。&lt;/p&gt;
&lt;p&gt;这也是大多数比较有经验的互联网公司的常规做法。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;「 结尾 」&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;身在江湖，谁都不易，只要换个角度思考，互相多点体谅，这种矛盾自然就可以化解。&lt;/p&gt;
&lt;p&gt;文章最后，如果想彻底解决pm和coder的矛盾冲突，土叔有个不成熟的终极方案，朋友们不妨一听：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;产品/UI每天给程序员提任务，程序员每天给产品做任务。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;如果同一个人可以分饰产品/UI和程序员两角，那么他就会变成永动机。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;这款永动机有个广为人知的名字，叫做独立开发者。&lt;/strong&gt;&lt;/p&gt;

&lt;hr/&gt;&lt;p&gt;&lt;strong&gt;更多文章我会第一时间更新在公众号&amp;lt;&lt;/strong&gt;闰土大叔&amp;gt;里面，欢迎关注~&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;img src=&quot;https://images2018.cnblogs.com/blog/701424/201808/701424-20180803135355569-1815831299.jpg&quot; alt=&quot;&quot;/&gt;&lt;/strong&gt;&lt;/p&gt;
</description>
<pubDate>Fri, 03 Aug 2018 05:55:00 +0000</pubDate>
<dc:creator>闰土大叔</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/running-runtu/p/9413689.html</dc:identifier>
</item>
<item>
<title>基于kafka-net实现的可以长链接的消息生产者 - 可均可可</title>
<link>http://www.cnblogs.com/PatrickLiu/p/9413626.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/PatrickLiu/p/9413626.html</guid>
<description>&lt;p&gt;    　　今天有点时间，我就来说两句。最近接触的Kafka相关的东西要多一些，其实以前也接触过，但是在项目使用中的经验不是很多。最近公司的项目里面使用了Kafka消息中间件，由于以前的人员编写的客户端的类不是很好，没有设计的概念，就是一个简单类的功能罗列，没有考虑到后期的扩展和维护（以后可能会兼容其他形式的消息队列，要做到无缝衔接），所以这个重构的任务就落到我的身上。&lt;/p&gt;&lt;p&gt;    　　先说说我的感受，然后再贴出代码的实现吧。我第一次是基于Confluent.Kafka编写的Kafka消息生产者，后来经过测试，同步操作的时间比较长，要完成20万数据发送消息并更新到数据库的时间大概是16-18分钟，这个结果有点让人不能接受。为了提高性能，也做了很多测试，都没有办法解决这个问题。后来抱着试试看的想法，我又基于kafka-net重新实现了Kafka消息的生产者。经过测试，完成同样的任务，时间大概需要3分钟左右。两种实现方法完成同样的任务，都是以同步的方式生产消息，并将消息成功发送到Broker后，再将数据插入到数据库做记录。大家不要纠结为什么这样使用消息队列，这是上头的做法，我还不能做大的改动，我也无奈。&lt;/p&gt;&lt;p&gt;    　　目前看，基于kafka-net实现的消息生产者在生产消息并发送成功所需要的时间要比基于Confluent.Kafka实现的消息生产者的所需要的时间要少，尤其是发送的数据越多，这个时间的差距越大。具体的原因还不清楚，如果有高手可以不吝赐教。好了，我该上代码了。&lt;/p&gt;&lt;p&gt;    　　开始代码之前，要说明一点：Confluent.Kafka的Broker是不需要带Http://这个前缀的，但是 kafka-net 的Broker是有http://这个前缀的，大家要注意这个，刚开始的时候我也被坑了一下子。&lt;br/&gt;   &lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Collections.Generic;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Linq;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Text;
&lt;/span&gt;&lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Threading.Tasks;

&lt;/span&gt;&lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; Enterprise.Framework.MessageQueue
{
    &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
    &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 消息生产者的接口定义，所有消息生产者的实现必须继承该接口
    &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt;&lt;span&gt; IMessageProducer
    {
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 将指定的消息内容发送到消息服务器并存放在指定的主题名称里
        &lt;/span&gt;&lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;topic&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;发送消息的主题名称，这个主题就是对消息的分类，不同的主题存放不同的消息，该参数不能为空，空值会抛出异常&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;message&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;需要发送的消息内容，该参数不能为空，空值会抛出异常&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;        
        &lt;span&gt;void&lt;/span&gt; Produce(&lt;span&gt;string&lt;/span&gt; topic, &lt;span&gt;string&lt;/span&gt;&lt;span&gt; message);
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Collections.Generic;
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Linq;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Text;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Threading.Tasks;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; Enterprise.Framework.MessageQueue
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;     &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt;     &lt;span&gt;///&lt;/span&gt;&lt;span&gt; Kafka消息生产者的接口定义，所有Kafka消息生产者的实现必须继承该接口
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;     &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt;&lt;span&gt; IKafkaMessageProducer : IMessageProducer
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 将指定的消息内容发送到消息服务器并存放在指定的主题名称里
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;topic&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;发送消息的主题名称，这个主题就是对消息的分类，不同的主题存放不同的消息，该参数不能为空，空值会抛出异常&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;message&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;需要发送的消息内容，该参数不能为空，空值会抛出异常&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;producedAction&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;当消息生产完成并成功发送到服务器后，可以对成功生产并发送的消息执行代理所封装方法的操作，默认值为空&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt;         &lt;span&gt;void&lt;/span&gt; Produce(&lt;span&gt;string&lt;/span&gt; topic, &lt;span&gt;string&lt;/span&gt; message, Action&amp;lt;MessageResult&amp;gt; producedAction = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Collections.Generic;
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Linq;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Runtime.InteropServices;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Text;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; Enterprise.Framework.AbstractInterface
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;     &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt;     &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 该抽象类定义了所有需要释放资源类型的抽象类
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;     &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;abstract&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; DisposableBase : IDisposable
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;         &lt;span&gt;private&lt;/span&gt; &lt;span&gt;bool&lt;/span&gt; disposed = &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; 
&lt;span&gt;16&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 实现IDisposable中的Dispose方法
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; Dispose()
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;必须为true&lt;/span&gt;
&lt;span&gt;22&lt;/span&gt;             Dispose(&lt;span&gt;true&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;通知垃圾回收机制不再调用终结器（析构器）&lt;/span&gt;
&lt;span&gt;24&lt;/span&gt;             GC.SuppressFinalize(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; 
&lt;span&gt;27&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span&gt;28&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 不是必要的，提供一个Close方法仅仅是为了更符合其他语言（如C++）的规范
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span&gt;30&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; Close()
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; &lt;span&gt;            Dispose();
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; 
&lt;span&gt;35&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span&gt;36&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 必须，以备程序员忘记了显式调用Dispose方法
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span&gt;38&lt;/span&gt;         ~&lt;span&gt;DisposableBase()
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;必须为false&lt;/span&gt;
&lt;span&gt;41&lt;/span&gt;             Dispose(&lt;span&gt;false&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt; 
&lt;span&gt;44&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span&gt;45&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 非密封类修饰用protected virtual
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 密封类修饰用private
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span&gt;48&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;disposing&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;是否要清理托管资源，true表示需要清理托管资源，false表示不需要清理托管资源&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;span&gt;49&lt;/span&gt;         &lt;span&gt;protected&lt;/span&gt; &lt;span&gt;virtual&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; Dispose(&lt;span&gt;bool&lt;/span&gt;&lt;span&gt; disposing)
&lt;/span&gt;&lt;span&gt;50&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;51&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (disposed)
&lt;/span&gt;&lt;span&gt;52&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;53&lt;/span&gt;                 &lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;54&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;55&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (disposing)
&lt;/span&gt;&lt;span&gt;56&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;57&lt;/span&gt;                 &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 清理托管资源                &lt;/span&gt;
&lt;span&gt;58&lt;/span&gt; &lt;span&gt;                DisposeManagedResources();
&lt;/span&gt;&lt;span&gt;59&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;60&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 清理非托管资源&lt;/span&gt;
&lt;span&gt;61&lt;/span&gt; &lt;span&gt;            DisposeUnmanagedResource();
&lt;/span&gt;&lt;span&gt;62&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;让类型知道自己已经被释放&lt;/span&gt;
&lt;span&gt;63&lt;/span&gt;             disposed = &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;64&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;65&lt;/span&gt; 
&lt;span&gt;66&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span&gt;67&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 释放托管资源
&lt;/span&gt;&lt;span&gt;68&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span&gt;69&lt;/span&gt;         &lt;span&gt;protected&lt;/span&gt; &lt;span&gt;abstract&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; DisposeManagedResources();
&lt;/span&gt;&lt;span&gt;70&lt;/span&gt; 
&lt;span&gt;71&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span&gt;72&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 释放非托管资源
&lt;/span&gt;&lt;span&gt;73&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span&gt;74&lt;/span&gt;         &lt;span&gt;protected&lt;/span&gt; &lt;span&gt;abstract&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; DisposeUnmanagedResource();
&lt;/span&gt;&lt;span&gt;75&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;76&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;51&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; KafkaNet;
&lt;/span&gt;&lt;span&gt;  2&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; KafkaNet.Model;
&lt;/span&gt;&lt;span&gt;  3&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; KafkaNet.Protocol;
&lt;/span&gt;&lt;span&gt;  4&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System;
&lt;/span&gt;&lt;span&gt;  5&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Collections.Generic;
&lt;/span&gt;&lt;span&gt;  6&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.IO;
&lt;/span&gt;&lt;span&gt;  7&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Linq;
&lt;/span&gt;&lt;span&gt;  8&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Text;
&lt;/span&gt;&lt;span&gt;  9&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Threading;
&lt;/span&gt;&lt;span&gt; 10&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; System.Threading.Tasks;
&lt;/span&gt;&lt;span&gt; 11&lt;/span&gt; &lt;span&gt;using&lt;/span&gt;&lt;span&gt; ThreeSoft.Framework.AbstractInterface;
&lt;/span&gt;&lt;span&gt; 12&lt;/span&gt; 
&lt;span&gt; 13&lt;/span&gt; &lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; Enterprise.Framework.MessageQueue
&lt;/span&gt;&lt;span&gt; 14&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 15&lt;/span&gt;     &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span&gt; 16&lt;/span&gt;     &lt;span&gt;///&lt;/span&gt;&lt;span&gt; Kafka消息生产者具体的实现类，可以针对长链接进行消息发送处理，不用频繁进行消息组件的创建和销毁的工作
&lt;/span&gt;&lt;span&gt; 17&lt;/span&gt;     &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span&gt; 18&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;sealed&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; KafkaMessageKeepAliveProducer : DisposableBase, IDisposable, IKafkaMessageProducer
&lt;/span&gt;&lt;span&gt; 19&lt;/span&gt; &lt;span&gt;    {
&lt;/span&gt;&lt;span&gt; 20&lt;/span&gt;         &lt;span&gt;#region&lt;/span&gt; 私有字段
&lt;span&gt; 21&lt;/span&gt; 
&lt;span&gt; 22&lt;/span&gt;         &lt;span&gt;private&lt;/span&gt;&lt;span&gt; KafkaNet.Producer _producer;
&lt;/span&gt;&lt;span&gt; 23&lt;/span&gt;         &lt;span&gt;private&lt;/span&gt;&lt;span&gt; BrokerRouter _brokerRouter;
&lt;/span&gt;&lt;span&gt; 24&lt;/span&gt;         &lt;span&gt;private&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;&lt;span&gt; _broker;
&lt;/span&gt;&lt;span&gt; 25&lt;/span&gt; 
&lt;span&gt; 26&lt;/span&gt;         &lt;span&gt;#endregion&lt;/span&gt;
&lt;span&gt; 27&lt;/span&gt; 
&lt;span&gt; 28&lt;/span&gt;         &lt;span&gt;#region&lt;/span&gt; 构造函数
&lt;span&gt; 29&lt;/span&gt; 
&lt;span&gt; 30&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span&gt; 31&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 通过构造函数初始化消息队列的服务器
&lt;/span&gt;&lt;span&gt; 32&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span&gt; 33&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;broker&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;消息队列服务器地址，该值不能为空&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;span&gt; 34&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; KafkaMessageKeepAliveProducer(&lt;span&gt;string&lt;/span&gt;&lt;span&gt; broker)
&lt;/span&gt;&lt;span&gt; 35&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 36&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (&lt;span&gt;string&lt;/span&gt;.IsNullOrEmpty(broker) || &lt;span&gt;string&lt;/span&gt;&lt;span&gt;.IsNullOrWhiteSpace(broker))
&lt;/span&gt;&lt;span&gt; 37&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt; 38&lt;/span&gt;                 &lt;span&gt;throw&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; ArgumentNullException(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;消息队列服务器的地址不可以为空！&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 39&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt; 40&lt;/span&gt; 
&lt;span&gt; 41&lt;/span&gt;             &lt;span&gt;#region&lt;/span&gt; kafka-net实现
&lt;span&gt; 42&lt;/span&gt; 
&lt;span&gt; 43&lt;/span&gt;             Uri[] brokerUriList = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 44&lt;/span&gt; 
&lt;span&gt; 45&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (broker.IndexOf(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;) &amp;gt;= &lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 46&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt; 47&lt;/span&gt;                 &lt;span&gt;string&lt;/span&gt;[] brokers = broker.Split(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 48&lt;/span&gt;                 brokerUriList = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Uri[brokers.Length];
&lt;/span&gt;&lt;span&gt; 49&lt;/span&gt; 
&lt;span&gt; 50&lt;/span&gt;                 &lt;span&gt;for&lt;/span&gt; (&lt;span&gt;int&lt;/span&gt; i = &lt;span&gt;0&lt;/span&gt;; i &amp;lt; brokers.Length; i++&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 51&lt;/span&gt; &lt;span&gt;                {
&lt;/span&gt;&lt;span&gt; 52&lt;/span&gt;                     brokerUriList[i] = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Uri(brokers[i]);
&lt;/span&gt;&lt;span&gt; 53&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt; 54&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt; 55&lt;/span&gt;             &lt;span&gt;else&lt;/span&gt;
&lt;span&gt; 56&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt; 57&lt;/span&gt;                 brokerUriList = &lt;span&gt;new&lt;/span&gt; Uri[] { &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Uri(broker) };
&lt;/span&gt;&lt;span&gt; 58&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt; 59&lt;/span&gt; 
&lt;span&gt; 60&lt;/span&gt;             &lt;span&gt;var&lt;/span&gt; kafkaOptions = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; KafkaOptions(brokerUriList);
&lt;/span&gt;&lt;span&gt; 61&lt;/span&gt;             _brokerRouter = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; BrokerRouter(kafkaOptions);
&lt;/span&gt;&lt;span&gt; 62&lt;/span&gt;             _producer = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; KafkaNet.Producer(_brokerRouter);
&lt;/span&gt;&lt;span&gt; 63&lt;/span&gt; 
&lt;span&gt; 64&lt;/span&gt;             &lt;span&gt;#endregion&lt;/span&gt;
&lt;span&gt; 65&lt;/span&gt; 
&lt;span&gt; 66&lt;/span&gt;             _broker =&lt;span&gt; broker;
&lt;/span&gt;&lt;span&gt; 67&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 68&lt;/span&gt; 
&lt;span&gt; 69&lt;/span&gt;         &lt;span&gt;#endregion&lt;/span&gt;
&lt;span&gt; 70&lt;/span&gt; 
&lt;span&gt; 71&lt;/span&gt;         &lt;span&gt;#region&lt;/span&gt; 实例属性
&lt;span&gt; 72&lt;/span&gt; 
&lt;span&gt; 73&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span&gt; 74&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 获取消息服务器的地址
&lt;/span&gt;&lt;span&gt; 75&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span&gt; 76&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;&lt;span&gt; Broker
&lt;/span&gt;&lt;span&gt; 77&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 78&lt;/span&gt;             &lt;span&gt;get&lt;/span&gt; { &lt;span&gt;return&lt;/span&gt;&lt;span&gt; _broker; }
&lt;/span&gt;&lt;span&gt; 79&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt; 80&lt;/span&gt; 
&lt;span&gt; 81&lt;/span&gt;         &lt;span&gt;#endregion&lt;/span&gt;
&lt;span&gt; 82&lt;/span&gt; 
&lt;span&gt; 83&lt;/span&gt;         &lt;span&gt;#region&lt;/span&gt; 发送消息的方法
&lt;span&gt; 84&lt;/span&gt; 
&lt;span&gt; 85&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span&gt; 86&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 将指定的消息内容发送到消息服务器并存放在指定的主题名称里
&lt;/span&gt;&lt;span&gt; 87&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;        
&lt;span&gt; 88&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;topic&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;发送消息的主题名称，这个主题就是对消息的分类，不同的主题存放不同的消息，该参数不能为空，空值会抛出异常&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;span&gt; 89&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;message&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;需要发送的消息内容，该参数不能为空，空值会抛出异常&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;span&gt; 90&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;producedAction&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;当消息生产完成并成功发送到服务器后，可以对成功生产并发送的消息执行代理所封装方法的操作&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;span&gt; 91&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; Produce(&lt;span&gt;string&lt;/span&gt; topic, &lt;span&gt;string&lt;/span&gt; message, Action&amp;lt;MessageResult&amp;gt; producedAction = &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt; 92&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt; 93&lt;/span&gt;             &lt;span&gt;#region&lt;/span&gt; 同步实现
&lt;span&gt; 94&lt;/span&gt; 
&lt;span&gt; 95&lt;/span&gt;             &lt;span&gt;var&lt;/span&gt; currentDatetime =&lt;span&gt; DateTime.Now;
&lt;/span&gt;&lt;span&gt; 96&lt;/span&gt;             &lt;span&gt;var&lt;/span&gt; key =&lt;span&gt; currentDatetime.Second.ToString();
&lt;/span&gt;&lt;span&gt; 97&lt;/span&gt;             &lt;span&gt;var&lt;/span&gt; events = &lt;span&gt;new&lt;/span&gt;[] { &lt;span&gt;new&lt;/span&gt;&lt;span&gt; KafkaNet.Protocol.Message(message, key) };
&lt;/span&gt;&lt;span&gt; 98&lt;/span&gt;             List&amp;lt;ProduceResponse&amp;gt; result =&lt;span&gt; _producer.SendMessageAsync(topic, events).Result;
&lt;/span&gt;&lt;span&gt; 99&lt;/span&gt; 
&lt;span&gt;100&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (producedAction != &lt;span&gt;null&lt;/span&gt; &amp;amp;&amp;amp; result != &lt;span&gt;null&lt;/span&gt; &amp;amp;&amp;amp; result.Count &amp;gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;101&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;102&lt;/span&gt;                 MessageResult messageResult = &lt;span&gt;new&lt;/span&gt; MessageResult { Broker = Broker, GroupID = &lt;span&gt;null&lt;/span&gt;, Message = message, Offset = result[&lt;span&gt;0&lt;/span&gt;].Offset, Partition = result[&lt;span&gt;0&lt;/span&gt;].PartitionId, Topic = result[&lt;span&gt;0&lt;/span&gt;&lt;span&gt;].Topic };
&lt;/span&gt;&lt;span&gt;103&lt;/span&gt; &lt;span&gt;                producedAction(messageResult);
&lt;/span&gt;&lt;span&gt;104&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;105&lt;/span&gt; 
&lt;span&gt;106&lt;/span&gt;             &lt;span&gt;#endregion&lt;/span&gt;
&lt;span&gt;107&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;108&lt;/span&gt; 
&lt;span&gt;109&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span&gt;110&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 将指定的消息内容发送到消息服务器并存放在指定的主题名称里
&lt;/span&gt;&lt;span&gt;111&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;        
&lt;span&gt;112&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;topic&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;发送消息的主题名称，这个主题就是对消息的分类，不同的主题存放不同的消息，该参数不能为空，空值会抛出异常&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;span&gt;113&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;param name=&quot;message&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;需要发送的消息内容，该参数不能为空，空值会抛出异常&lt;/span&gt;&lt;span&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;        
&lt;span&gt;114&lt;/span&gt;         &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; Produce(&lt;span&gt;string&lt;/span&gt; topic, &lt;span&gt;string&lt;/span&gt;&lt;span&gt; message)
&lt;/span&gt;&lt;span&gt;115&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;116&lt;/span&gt;             Produce(topic, message, &lt;span&gt;null&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;117&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;118&lt;/span&gt; 
&lt;span&gt;119&lt;/span&gt;         &lt;span&gt;#endregion&lt;/span&gt;
&lt;span&gt;120&lt;/span&gt; 
&lt;span&gt;121&lt;/span&gt;         &lt;span&gt;#region&lt;/span&gt; 实现消息队列资源的释放
&lt;span&gt;122&lt;/span&gt; 
&lt;span&gt;123&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span&gt;124&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 析构函数释放资源
&lt;/span&gt;&lt;span&gt;125&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span&gt;126&lt;/span&gt;         ~&lt;span&gt;KafkaMessageKeepAliveProducer()
&lt;/span&gt;&lt;span&gt;127&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;128&lt;/span&gt;             Dispose(&lt;span&gt;false&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;129&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;130&lt;/span&gt; 
&lt;span&gt;131&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span&gt;132&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 释放托管资源
&lt;/span&gt;&lt;span&gt;133&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span&gt;134&lt;/span&gt;         &lt;span&gt;protected&lt;/span&gt; &lt;span&gt;override&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; DisposeManagedResources()
&lt;/span&gt;&lt;span&gt;135&lt;/span&gt; &lt;span&gt;        {
&lt;/span&gt;&lt;span&gt;136&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (_producer != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;137&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;138&lt;/span&gt; &lt;span&gt;                _producer.Dispose();
&lt;/span&gt;&lt;span&gt;139&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;140&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt; (_brokerRouter != &lt;span&gt;null&lt;/span&gt;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;141&lt;/span&gt; &lt;span&gt;            {
&lt;/span&gt;&lt;span&gt;142&lt;/span&gt; &lt;span&gt;                _brokerRouter.Dispose();
&lt;/span&gt;&lt;span&gt;143&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;144&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;145&lt;/span&gt; 
&lt;span&gt;146&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span&gt;147&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt;&lt;span&gt; 释放非托管资源
&lt;/span&gt;&lt;span&gt;148&lt;/span&gt;         &lt;span&gt;///&lt;/span&gt; &lt;span&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span&gt;149&lt;/span&gt;         &lt;span&gt;protected&lt;/span&gt; &lt;span&gt;override&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; DisposeUnmanagedResource(){}
&lt;/span&gt;&lt;span&gt;150&lt;/span&gt; 
&lt;span&gt;151&lt;/span&gt;         &lt;span&gt;#endregion&lt;/span&gt;
&lt;span&gt;152&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;153&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;br/&gt;    好了，今天就写到这里了，每天进步一点点，努力坚持。不忘初心，继续努力吧，欢迎大家前来讨论。&lt;/p&gt;
</description>
<pubDate>Fri, 03 Aug 2018 05:25:00 +0000</pubDate>
<dc:creator>可均可可</dc:creator>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/PatrickLiu/p/9413626.html</dc:identifier>
</item>
</channel>
</rss>